[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.HabitatDetector.HabitatInfo : object {
    public static JetPlatform Platform { get; }
    public static JetArchitecture OSArchitecture { get; }
    public static JetArchitecture ProcessArchitecture { get; }
    public static string OSName { get; }
    public static JetClrImplementation ClrImplementation { get; }
    [NullableAttribute("2")]
public static Version MonoVersion { get; }
    public static Nullable`1<JetLinuxLibC> LinuxLibC { get; }
    [NullableAttribute("2")]
public static Version LinuxLibCVersion { get; }
    [NullableAttribute("2")]
public static Version MacOSVersion { get; }
    public static Nullable`1<UInt32> WindowsBuildNumber { get; }
    public static Nullable`1<JetWindowsInstallationType> WindowsInstallationType { get; }
    public static Nullable`1<bool> WindowsIsUserAdministrator { get; }
    public static Nullable`1<bool> WindowsIsElevated { get; }
    public static Nullable`1<JetWindowsTokenElevationType> WindowsElevationType { get; }
    public static JetArchitecture[] AllOrderedArchitectures { get; }
    public static string OSRuntimeIdString { get; }
    public static string ProcessRuntimeIdString { get; }
    public static JetPlatform get_Platform();
    public static JetArchitecture get_OSArchitecture();
    public static JetArchitecture get_ProcessArchitecture();
    public static string get_OSName();
    public static JetClrImplementation get_ClrImplementation();
    [NullableContextAttribute("2")]
public static Version get_MonoVersion();
    public static Nullable`1<JetLinuxLibC> get_LinuxLibC();
    [NullableContextAttribute("2")]
public static Version get_LinuxLibCVersion();
    [NullableContextAttribute("2")]
public static Version get_MacOSVersion();
    public static Nullable`1<UInt32> get_WindowsBuildNumber();
    public static Nullable`1<JetWindowsInstallationType> get_WindowsInstallationType();
    public static Nullable`1<bool> get_WindowsIsUserAdministrator();
    public static Nullable`1<bool> get_WindowsIsElevated();
    public static Nullable`1<JetWindowsTokenElevationType> get_WindowsElevationType();
    public static JetArchitecture[] get_AllOrderedArchitectures();
    public static JetArchitecture[] GetAllOrderedArchitecturesForOS(JetPlatform platform, JetArchitecture osArchitecture);
    public static JetArchitecture GetProcessArchitecture(int processId);
    [NullableContextAttribute("0")]
public static JetArchitecture GetProcessArchitecture(Void* processHandle);
    public static JetArchitecture GetProcessArchitecture(Process process);
    public static string get_OSRuntimeIdString();
    public static string get_ProcessRuntimeIdString();
    public static string GetRuntimeIdName(JetPlatform platform);
    public static string GetRuntimeIdName(JetArchitecture architecture);
    public static string GetRuntimeIdName(JetLinuxLibC linuxLibC, bool allowGlibc);
    public static string GetRuntimeIdString(JetPlatform platform, JetArchitecture architecture, Nullable`1<JetLinuxLibC> linuxLibC);
    public static string GetPresentableString(JetClrImplementation clrImplementation);
    public static string GetPresentableString(JetPlatform platform);
    public static string GetPresentableString(JetArchitecture architecture);
    public static bool TryParsePlatform(string platformStr, JetPlatform& platform);
    public static bool TryParseArchitecture(string architectureStr, JetArchitecture& architecture);
    public static bool TryParseLinuxLibC(string linuxLibCStr, JetLinuxLibC& linuxLibC, bool allowGlibc);
    public static bool TryParseRuntimeId(string str, JetPlatform& platform, JetArchitecture& architecture, Nullable`1& linuxLibC);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.HabitatDetector.HabitatInfoEx : object {
    [ExtensionAttribute]
public static string ToPlatformIdName(JetPlatform platform);
    [ExtensionAttribute]
public static string ToPlatformIdName(JetArchitecture architecture);
    [ExtensionAttribute]
public static string ToPlatformIdName(JetLinuxLibC linuxLibC);
    [ExtensionAttribute]
public static string ToPresentableString(JetClrImplementation clrImplementation);
    [ExtensionAttribute]
public static string ToPresentableString(JetPlatform platform);
    [ExtensionAttribute]
public static string ToPresentableString(JetArchitecture architecture);
    [ExtensionAttribute]
public static JetArchitecture GetArchitecture(Process process);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class JetBrains.HabitatDetector.Impl.Helper : object {
    internal static JetPlatform Platform;
    internal static JetArchitecture OSArchitecture;
    internal static JetArchitecture ProcessArchitecture;
    [NullableAttribute("1")]
internal static string OSName;
    internal static JetClrImplementation ClrImplementation;
    internal static Version MonoVersion;
    internal static Nullable`1<JetLinuxLibC> LinuxLibC;
    internal static Version LinuxLibCVersion;
    internal static Version MacOSVersion;
    internal static Nullable`1<UInt32> WindowsBuildNumber;
    internal static Nullable`1<JetWindowsInstallationType> WindowsInstallationType;
    internal static Nullable`1<bool> WindowsIsUserAdministrator;
    internal static Nullable`1<bool> WindowsIsElevated;
    internal static Nullable`1<JetWindowsTokenElevationType> WindowsElevationType;
    private static Helper();
    [NullableContextAttribute("1")]
internal static Version NormalizeVersion(Version version);
    internal static Version NormalizeVersionNullable(Version version);
    internal static JetArchitecture GetProcessArchitecture(int processId);
    [NullableContextAttribute("0")]
internal static JetArchitecture GetProcessArchitecture(Void* processHandle);
    [NullableContextAttribute("1")]
internal static JetArchitecture GetProcessArchitecture(Process process);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class JetBrains.HabitatDetector.Impl.Linux.LinuxHelper : object {
    internal static ElfInfo GetElfInfo();
    internal static ElfInfo GetElfInfo(string executable);
    internal static ElfInfo GetElfInfo(Stream stream);
    internal static Nullable`1<JetLinuxLibC> ConvertToLibC(string interpreter);
    internal static JetArchitecture ConvertToArchitecture(ELFCLASS eiClass, ELFDATA eiData, EM eMachine);
    [NullableContextAttribute("2")]
private static string RunLddVersion(bool shouldFail);
    internal static Version GetGlibcApiVersion();
    [NullableContextAttribute("2")]
internal static Version GetGlibcLddVersion();
    [NullableContextAttribute("2")]
internal static Version GetMuslLddVersion();
    internal static Version ParseGlibcLddOutput(string output);
    internal static Version ParseMuslLddOutput(string output);
}
internal class JetBrains.HabitatDetector.Impl.MacOsX._ucred : ValueType {
    internal UInt32 cr_uid;
}
internal class JetBrains.HabitatDetector.Impl.MacOsX.eproc : ValueType {
    internal _ucred e_ucred;
}
internal static class JetBrains.HabitatDetector.Impl.MacOsX.ERRNO : object {
    public static int EPERM;
    public static int ENOENT;
    public static int ESRCH;
    public static int EINTR;
    public static int EIO;
    public static int ENXIO;
    public static int E2BIG;
    public static int ENOEXEC;
    public static int EBADF;
    public static int ECHILD;
    public static int EDEADLK;
    public static int ENOMEM;
    public static int EFAULT;
    public static int EBUSY;
    public static int EEXIST;
    public static int EXDEV;
    public static int ENODEV;
    public static int ENOTDIR;
    public static int EISDIR;
    public static int EINVAL;
    public static int ENFILE;
    public static int EMFILE;
    public static int ENOTTY;
    public static int ETXTBSY;
    public static int EFBIG;
    public static int ENOSPC;
    public static int ESPIPE;
    public static int EROFS;
    public static int EMLINK;
    public static int EPIPE;
    public static int EDOM;
    public static int ERANGE;
    public static int EAGAIN;
    public static int EWOULDBLOCK;
    public static int EINPROGRESS;
    public static int EALREADY;
    public static int ENOTSOCK;
    public static int EDESTADDRREQ;
    public static int EMSGSIZE;
    public static int EPROTOTYPE;
    public static int ENOPROTOOPT;
    public static int EPROTONOSUPPORT;
    public static int ENOTSUP;
    public static int EOPNOTSUPP;
    public static int EAFNOSUPPORT;
    public static int EADDRINUSE;
    public static int EADDRNOTAVAIL;
    public static int ENETDOWN;
    public static int ENETUNREACH;
    public static int ENETRESET;
    public static int ECONNABORTED;
    public static int ECONNRESET;
    public static int ENOBUFS;
    public static int EISCONN;
    public static int ENOTCONN;
    public static int ETIMEDOUT;
    public static int ECONNREFUSED;
    public static int ELOOP;
    public static int ENAMETOOLONG;
    public static int EHOSTUNREACH;
    public static int ENOTEMPTY;
    public static int EDQUOT;
    public static int ESTALE;
    public static int ENOLCK;
    public static int ENOSYS;
    public static int EOVERFLOW;
    public static int ECANCELED;
    public static int EIDRM;
    public static int ENOMSG;
    public static int EILSEQ;
    public static int EBADMSG;
    public static int EMULTIHOP;
    public static int ENODATA;
    public static int ENOLINK;
    public static int ENOSR;
    public static int ENOSTR;
    public static int EPROTO;
    public static int ETIME;
    public static int ENOTRECOVERABLE;
    public static int EOWNERDEAD;
}
internal class JetBrains.HabitatDetector.Impl.MacOsX.extern_proc : ValueType {
    internal int p_flag;
}
internal class JetBrains.HabitatDetector.Impl.MacOsX.kinfo_proc : ValueType {
    internal extern_proc kp_proc;
    internal eproc kp_eproc;
}
internal static class JetBrains.HabitatDetector.Impl.MacOsX.LibObjC : object {
    [NullableAttribute("1")]
private static string LibraryName;
    internal static Void* objc_getClass(string name);
    internal static Void* sel_getUid(string str);
    internal static Void* objc_msgSend(Void* self, Void* op);
    internal static void objc_msgSend_stret(Void*& stret, Void* self, Void* op);
    internal static NSOperatingSystemVersion NSOperatingSystemVersion_objc_msgSend(Void* self, Void* op);
    internal static void NSOperatingSystemVersion_objc_msgSend_stret(NSOperatingSystemVersion& osVersion, Void* self, Void* op);
}
internal static class JetBrains.HabitatDetector.Impl.MacOsX.LibSystemCDylib : object {
    [NullableAttribute("1")]
private static string LibraryName;
    internal static int sysctl(Int32* name, UInt32 namelen, Void* oldp, UInt64* oldlenp, Void* newp, ulong newlen);
}
internal static class JetBrains.HabitatDetector.Impl.MacOsX.LibSystemKernelDylib : object {
    [NullableAttribute("1")]
private static string LibraryName;
    internal static int getpid();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class JetBrains.HabitatDetector.Impl.MacOsX.MacOsHelper : object {
    internal static bool GetRunningUnderRosetta2();
    internal static bool GetRunningUnderRosetta2(int processId);
    private static Nullable`1<bool> GetSysctlKernProcPidTranslated(int pid);
    [NullableContextAttribute("2")]
private static string GetSysctlKernOsVersion();
    internal static Version GetOSVersion(JetArchitecture processArchitecture);
    internal static string GetOSName(Version version);
}
internal static class JetBrains.HabitatDetector.Impl.MacOsX.P_FLAG : object {
    internal static int P_TRANSLATED;
}
internal static class JetBrains.HabitatDetector.Impl.MacOsX.SYSCTL : object {
    internal static int CTL_KERN;
    internal static int CTL_VM;
    internal static int CTL_VFS;
    internal static int CTL_NET;
    internal static int CTL_DEBUG;
    internal static int CTL_HW;
    internal static int CTL_MACHDEP;
    internal static int CTL_USER;
    internal static int KERN_OSTYPE;
    internal static int KERN_OSRELEASE;
    internal static int KERN_OSREV;
    internal static int KERN_VERSION;
    internal static int KERN_MAXVNODES;
    internal static int KERN_MAXPROC;
    internal static int KERN_MAXFILES;
    internal static int KERN_ARGMAX;
    internal static int KERN_PROC;
    internal static int KERN_PROCARGS;
    internal static int KERN_PROCARGS2;
    internal static int KERN_OSVERSION;
    internal static int KERN_PROC_ALL;
    internal static int KERN_PROC_PID;
    internal static int KERN_PROC_PGRP;
    internal static int KERN_PROC_SESSION;
    internal static int KERN_PROC_TTY;
    internal static int KERN_PROC_UID;
    internal static int KERN_PROC_RUID;
    internal static int KERN_PROC_LCID;
    internal static int HW_MEMSIZE;
}
internal static class JetBrains.HabitatDetector.Impl.Unix.LibC : object {
    [NullableAttribute("1")]
private static string LibraryName;
    internal static int uname(IntPtr buf);
    internal static IntPtr gnu_get_libc_version();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class JetBrains.HabitatDetector.Impl.Unix.UnixHelper : object {
    internal static UnameInfo GetUnameInfo();
    internal static JetPlatform ConvertToPlatform(string sysname);
    internal static int ConvertToNameLength(JetPlatform platform);
    internal static JetArchitecture ConvertToArchitecture(JetPlatform platform, string machine);
    internal static string GetOSName(JetPlatform platform, string unameSysname, string unameRelease);
}
[FlagsAttribute]
internal enum JetBrains.HabitatDetector.Impl.Windows.AccessRights : Enum {
    public UInt32 value__;
    public static AccessRights GENERIC_READ;
    public static AccessRights GENERIC_WRITE;
    public static AccessRights GENERIC_EXECUTE;
    public static AccessRights GENERIC_ALL;
    public static AccessRights ACCESS_SYSTEM_SECURITY;
    public static AccessRights DELETE;
    public static AccessRights READ_CONTROL;
    public static AccessRights WRITE_DAC;
    public static AccessRights WRITE_OWNER;
    public static AccessRights SYNCHRONIZE;
    public static AccessRights STANDARD_RIGHTS_READ;
    public static AccessRights STANDARD_RIGHTS_WRITE;
    public static AccessRights STANDARD_RIGHTS_EXECUTE;
    public static AccessRights STANDARD_RIGHTS_ALL;
    public static AccessRights SPECIFIC_RIGHTS_ALL;
    public static AccessRights MAXIMUM_ALLOWED;
    public static AccessRights STANDARD_RIGHTS_REQUIRED;
}
internal static class JetBrains.HabitatDetector.Impl.Windows.Advapi32Dll : object {
    [NullableAttribute("1")]
internal static string LibraryName;
    internal static int RegOpenKeyExW(Void* hKey, string lpSubKey, UInt32 ulOptions, UInt32 samDesired, Void** phkResult);
    internal static int RegQueryValueExW(Void* hKey, string lpValueName, UInt32* lpReserved, REG* lpType, Byte* lpData, UInt32* lpcbData);
    internal static int RegCloseKey(Void* hKey);
    internal static int OpenProcessToken(Void* ProcessHandle, UInt32 DesiredAccess, Void** TokenHandle);
    internal static int GetTokenInformation(Void* TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, Void* TokenInformation, UInt32 TokenInformationLength, UInt32* ReturnLength);
    internal static int AllocateAndInitializeSid(SID_IDENTIFIER_AUTHORITY* pIdentifierAuthority, byte nSubAuthorityCount, UInt32 dwSubAuthority0, UInt32 dwSubAuthority1, UInt32 dwSubAuthority2, UInt32 dwSubAuthority3, UInt32 dwSubAuthority4, UInt32 dwSubAuthority5, UInt32 dwSubAuthority6, UInt32 dwSubAuthority7, Void** pSid);
    internal static Void* FreeSid(Void* pSid);
    internal static int DuplicateToken(Void* ExistingTokenHandle, SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, Void** DuplicateTokenHandle);
    internal static int CheckTokenMembership(Void* TokenHandle, Void* SidToCheck, Int32* IsMember);
}
internal static class JetBrains.HabitatDetector.Impl.Windows.HKEY : object {
    internal static Void* HKEY_CLASSES_ROOT;
    internal static Void* HKEY_CURRENT_USER;
    internal static Void* HKEY_LOCAL_MACHINE;
    internal static Void* HKEY_USERS;
    internal static Void* HKEY_PERFORMANCE_DATA;
    internal static Void* HKEY_PERFORMANCE_TEXT;
    internal static Void* HKEY_PERFORMANCE_NLSTEXT;
    internal static Void* HKEY_CURRENT_CONFIG;
    internal static Void* HKEY_DYN_DATA;
    internal static Void* HKEY_CURRENT_USER_LOCAL_SETTINGS;
    private static HKEY();
}
internal enum JetBrains.HabitatDetector.Impl.Windows.IMAGE_FILE_MACHINE : Enum {
    public ushort value__;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_UNKNOWN;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_TARGET_HOST;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_I386;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_R3000;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_R4000;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_R10000;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_WCEMIPSV2;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_ALPHA;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_SH3;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_SH3DSP;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_SH3E;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_SH4;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_SH5;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_ARM;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_THUMB;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_ARMNT;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_AM33;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_POWERPC;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_POWERPCFP;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_IA64;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_MIPS16;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_ALPHA64;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_MIPSFPU;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_MIPSFPU16;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_TRICORE;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_CEF;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_EBC;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_AMD64;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_M32R;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_ARM64;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_CEE;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_RISCV32;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_RISCV64;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_RISCV128;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_LOONGARCH32;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_LOONGARCH64;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_I486;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_PENTIUM;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_R3000_BE;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_POWERPC_BE;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_SPARC;
}
internal static class JetBrains.HabitatDetector.Impl.Windows.Kernel32Dll : object {
    [NullableAttribute("1")]
internal static string LibraryName;
    internal static int GetLastError();
    internal static Void* GetCurrentProcess();
    internal static Void* GetModuleHandleW(string lpModuleName);
    internal static Void* GetProcAddress(Void* hModule, string lpProcName);
    internal static void GetSystemInfo(SYSTEM_INFO* lpSystemInfo);
    internal static void GetNativeSystemInfo(SYSTEM_INFO* lpSystemInfo);
    internal static int IsWow64Process(Void* hProcess, Int32* Wow64Process);
    internal static int IsWow64Process2(Void* hProcess, IMAGE_FILE_MACHINE* pProcessMachine, IMAGE_FILE_MACHINE* pNativeMachine);
    internal static int GetProcessInformation(Void* hProcess, PROCESS_INFORMATION_CLASS ProcessInformationClass, Void* ProcessInformation, UInt32 ProcessInformationSize);
    internal static Void* OpenProcess(UInt32 dwDesiredAccess, int bInheritHandle, UInt32 dwProcessId);
    internal static int CloseHandle(Void* hObject);
}
[FlagsAttribute]
internal enum JetBrains.HabitatDetector.Impl.Windows.KeyAccessRights : Enum {
    public UInt32 value__;
    public static KeyAccessRights KEY_QUERY_VALUE;
    public static KeyAccessRights KEY_SET_VALUE;
    public static KeyAccessRights KEY_CREATE_SUB_KEY;
    public static KeyAccessRights KEY_ENUMERATE_SUB_KEYS;
    public static KeyAccessRights KEY_NOTIFY;
    public static KeyAccessRights KEY_CREATE_LINK;
    public static KeyAccessRights KEY_WOW64_32KEY;
    public static KeyAccessRights KEY_WOW64_64KEY;
    public static KeyAccessRights KEY_WOW64_RES;
    public static KeyAccessRights KEY_READ;
    public static KeyAccessRights KEY_WRITE;
    public static KeyAccessRights KEY_EXECUTE;
    public static KeyAccessRights KEY_ALL_ACCESS;
}
[FlagsAttribute]
internal enum JetBrains.HabitatDetector.Impl.Windows.MACHINE_ATTRIBUTES : Enum {
    public int value__;
    public static MACHINE_ATTRIBUTES UserEnabled;
    public static MACHINE_ATTRIBUTES KernelEnabled;
    public static MACHINE_ATTRIBUTES Wow64Container;
}
internal enum JetBrains.HabitatDetector.Impl.Windows.PROCESS_INFORMATION_CLASS : Enum {
    public int value__;
    public static PROCESS_INFORMATION_CLASS ProcessMemoryPriority;
    public static PROCESS_INFORMATION_CLASS ProcessMemoryExhaustionInfo;
    public static PROCESS_INFORMATION_CLASS ProcessAppMemoryInfo;
    public static PROCESS_INFORMATION_CLASS ProcessInPrivateInfo;
    public static PROCESS_INFORMATION_CLASS ProcessPowerThrottling;
    public static PROCESS_INFORMATION_CLASS ProcessReservedValue1;
    public static PROCESS_INFORMATION_CLASS ProcessTelemetryCoverageInfo;
    public static PROCESS_INFORMATION_CLASS ProcessProtectionLevelInfo;
    public static PROCESS_INFORMATION_CLASS ProcessLeapSecondInfo;
    public static PROCESS_INFORMATION_CLASS ProcessMachineTypeInfo;
    public static PROCESS_INFORMATION_CLASS ProcessInformationClassMax;
}
internal class JetBrains.HabitatDetector.Impl.Windows.PROCESS_MACHINE_INFORMATION : ValueType {
    internal IMAGE_FILE_MACHINE ProcessMachine;
    internal ushort Res0;
    internal MACHINE_ATTRIBUTES MachineAttributes;
}
[FlagsAttribute]
internal enum JetBrains.HabitatDetector.Impl.Windows.ProcessAccessRights : Enum {
    public UInt32 value__;
    public static ProcessAccessRights PROCESS_TERMINATE;
    public static ProcessAccessRights PROCESS_CREATE_THREAD;
    public static ProcessAccessRights PROCESS_SET_SESSIONID;
    public static ProcessAccessRights PROCESS_VM_OPERATION;
    public static ProcessAccessRights PROCESS_VM_READ;
    public static ProcessAccessRights PROCESS_VM_WRITE;
    public static ProcessAccessRights PROCESS_DUP_HANDLE;
    public static ProcessAccessRights PROCESS_CREATE_PROCESS;
    public static ProcessAccessRights PROCESS_SET_QUOTA;
    public static ProcessAccessRights PROCESS_SET_INFORMATION;
    public static ProcessAccessRights PROCESS_QUERY_INFORMATION;
    public static ProcessAccessRights PROCESS_SUSPEND_RESUME;
    public static ProcessAccessRights PROCESS_QUERY_LIMITED_INFORMATION;
    public static ProcessAccessRights PROCESS_ALL_ACCESS;
    public static ProcessAccessRights DELETE;
    public static ProcessAccessRights READ_CONTROL;
    public static ProcessAccessRights WRITE_DAC;
    public static ProcessAccessRights WRITE_OWNER;
    public static ProcessAccessRights SYNCHRONIZE;
    public static ProcessAccessRights STANDARD_RIGHTS_REQUIRED;
    public static ProcessAccessRights STANDARD_RIGHTS_READ;
    public static ProcessAccessRights STANDARD_RIGHTS_WRITE;
    public static ProcessAccessRights STANDARD_RIGHTS_EXECUTE;
    public static ProcessAccessRights STANDARD_RIGHTS_ALL;
    public static ProcessAccessRights SPECIFIC_RIGHTS_ALL;
    public static ProcessAccessRights ACCESS_SYSTEM_SECURITY;
}
internal enum JetBrains.HabitatDetector.Impl.Windows.PROCESSOR_ARCHITECTURE : Enum {
    public ushort value__;
    public static PROCESSOR_ARCHITECTURE PROCESSOR_ARCHITECTURE_INTEL;
    public static PROCESSOR_ARCHITECTURE PROCESSOR_ARCHITECTURE_MIPS;
    public static PROCESSOR_ARCHITECTURE PROCESSOR_ARCHITECTURE_ALPHA;
    public static PROCESSOR_ARCHITECTURE PROCESSOR_ARCHITECTURE_PPC;
    public static PROCESSOR_ARCHITECTURE PROCESSOR_ARCHITECTURE_SHX;
    public static PROCESSOR_ARCHITECTURE PROCESSOR_ARCHITECTURE_ARM;
    public static PROCESSOR_ARCHITECTURE PROCESSOR_ARCHITECTURE_IA64;
    public static PROCESSOR_ARCHITECTURE PROCESSOR_ARCHITECTURE_ALPHA64;
    public static PROCESSOR_ARCHITECTURE PROCESSOR_ARCHITECTURE_MSIL;
    public static PROCESSOR_ARCHITECTURE PROCESSOR_ARCHITECTURE_AMD64;
    public static PROCESSOR_ARCHITECTURE PROCESSOR_ARCHITECTURE_IA32_ON_WIN64;
    public static PROCESSOR_ARCHITECTURE PROCESSOR_ARCHITECTURE_NEUTRAL;
    public static PROCESSOR_ARCHITECTURE PROCESSOR_ARCHITECTURE_ARM64;
    public static PROCESSOR_ARCHITECTURE PROCESSOR_ARCHITECTURE_UNKNOWN;
}
internal enum JetBrains.HabitatDetector.Impl.Windows.REG : Enum {
    public UInt32 value__;
    public static REG REG_NONE;
    public static REG REG_SZ;
    public static REG REG_EXPAND_SZ;
    public static REG REG_BINARY;
    public static REG REG_DWORD;
    public static REG REG_DWORD_LITTLE_ENDIAN;
    public static REG REG_DWORD_BIG_ENDIAN;
    public static REG REG_LINK;
    public static REG REG_MULTI_SZ;
    public static REG REG_RESOURCE_LIST;
    public static REG REG_FULL_RESOURCE_DESCRIPTOR;
    public static REG REG_RESOURCE_REQUIREMENTS_LIST;
    public static REG REG_QWORD;
    public static REG REG_QWORD_LITTLE_ENDIAN;
}
internal static class JetBrains.HabitatDetector.Impl.Windows.RID : object {
    public static int SECURITY_NULL_RID;
    public static int SECURITY_WORLD_RID;
    public static int SECURITY_LOCAL_RID;
    public static int SECURITY_LOCAL_LOGON_RID;
    public static int SECURITY_CREATOR_OWNER_RID;
    public static int SECURITY_CREATOR_GROUP_RID;
    public static int SECURITY_DIALUP_RID;
    public static int SECURITY_NETWORK_RID;
    public static int SECURITY_BATCH_RID;
    public static int SECURITY_INTERACTIVE_RID;
    public static int SECURITY_LOGON_IDS_RID;
    public static int SECURITY_SERVICE_RID;
    public static int SECURITY_ANONYMOUS_LOGON_RID;
    public static int SECURITY_PROXY_RID;
    public static int SECURITY_ENTERPRISE_CONTROLLERS_RID;
    public static int SECURITY_PRINCIPAL_SELF_RID;
    public static int SECURITY_AUTHENTICATED_USER_RID;
    public static int SECURITY_RESTRICTED_CODE_RID;
    public static int SECURITY_TERMINAL_SERVER_RID;
    public static int SECURITY_REMOTE_LOGON_RID;
    public static int SECURITY_THIS_ORGANIZATION_RID;
    public static int SECURITY_IUSER_RID;
    public static int SECURITY_LOCAL_SYSTEM_RID;
    public static int SECURITY_LOCAL_SERVICE_RID;
    public static int SECURITY_NETWORK_SERVICE_RID;
    public static int SECURITY_BUILTIN_DOMAIN_RID;
    public static int DOMAIN_ALIAS_RID_ADMINS;
    public static int DOMAIN_ALIAS_RID_USERS;
    public static int DOMAIN_ALIAS_RID_GUESTS;
    public static int DOMAIN_ALIAS_RID_POWER_USERS;
    public static int DOMAIN_ALIAS_RID_ACCOUNT_OPS;
    public static int DOMAIN_ALIAS_RID_SYSTEM_OPS;
    public static int DOMAIN_ALIAS_RID_PRINT_OPS;
    public static int DOMAIN_ALIAS_RID_BACKUP_OPS;
    public static int DOMAIN_ALIAS_RID_REPLICATOR;
    public static int DOMAIN_ALIAS_RID_RAS_SERVERS;
    public static int DOMAIN_ALIAS_RID_PREW2KCOMPACCESS;
    public static int DOMAIN_ALIAS_RID_REMOTE_DESKTOP_USERS;
    public static int DOMAIN_ALIAS_RID_NETWORK_CONFIGURATION_OPS;
    public static int DOMAIN_ALIAS_RID_INCOMING_FOREST_TRUST_BUILDERS;
    public static int DOMAIN_ALIAS_RID_MONITORING_USERS;
    public static int DOMAIN_ALIAS_RID_LOGGING_USERS;
    public static int DOMAIN_ALIAS_RID_AUTHORIZATIONACCESS;
    public static int DOMAIN_ALIAS_RID_TS_LICENSE_SERVERS;
    public static int DOMAIN_ALIAS_RID_DCOM_USERS;
    public static int DOMAIN_ALIAS_RID_IUSERS;
    public static int DOMAIN_ALIAS_RID_CRYPTO_OPERATORS;
    public static int DOMAIN_ALIAS_RID_CACHEABLE_PRINCIPALS_GROUP;
    public static int DOMAIN_ALIAS_RID_NON_CACHEABLE_PRINCIPALS_GROUP;
    public static int DOMAIN_ALIAS_RID_EVENT_LOG_READERS_GROUP;
    public static int DOMAIN_ALIAS_RID_CERTSVC_DCOM_ACCESS_GROUP;
    public static int DOMAIN_ALIAS_RID_RDS_REMOTE_ACCESS_SERVERS;
    public static int DOMAIN_ALIAS_RID_RDS_ENDPOINT_SERVERS;
    public static int DOMAIN_ALIAS_RID_RDS_MANAGEMENT_SERVERS;
    public static int DOMAIN_ALIAS_RID_HYPER_V_ADMINS;
    public static int DOMAIN_ALIAS_RID_ACCESS_CONTROL_ASSISTANCE_OPS;
    public static int DOMAIN_ALIAS_RID_REMOTE_MANAGEMENT_USERS;
    public static int DOMAIN_ALIAS_RID_DEFAULT_ACCOUNT;
    public static int DOMAIN_ALIAS_RID_STORAGE_REPLICA_ADMINS;
    public static int DOMAIN_ALIAS_RID_DEVICE_OWNERS;
    public static int SECURITY_APP_PACKAGE_BASE_RID;
    public static int SECURITY_CAPABILITY_BASE_RID;
    public static int SECURITY_CAPABILITY_APP_RID;
    public static int SECURITY_BUILTIN_PACKAGE_ANY_PACKAGE;
    public static int SECURITY_BUILTIN_PACKAGE_ANY_RESTRICTED_PACKAGE;
    public static int SECURITY_MANDATORY_UNTRUSTED_RID;
    public static int SECURITY_MANDATORY_LOW_RID;
    public static int SECURITY_MANDATORY_MEDIUM_RID;
    public static int SECURITY_MANDATORY_MEDIUM_PLUS_RID;
    public static int SECURITY_MANDATORY_HIGH_RID;
    public static int SECURITY_MANDATORY_SYSTEM_RID;
    public static int SECURITY_MANDATORY_PROTECTED_PROCESS_RID;
}
internal enum JetBrains.HabitatDetector.Impl.Windows.SECURITY_IMPERSONATION_LEVEL : Enum {
    public int value__;
    public static SECURITY_IMPERSONATION_LEVEL SecurityAnonymous;
    public static SECURITY_IMPERSONATION_LEVEL SecurityIdentification;
    public static SECURITY_IMPERSONATION_LEVEL SecurityImpersonation;
    public static SECURITY_IMPERSONATION_LEVEL SecurityDelegation;
}
internal class JetBrains.HabitatDetector.Impl.Windows.SID_IDENTIFIER_AUTHORITY : ValueType {
    [FixedBufferAttribute("System.Byte", "6")]
internal <Value>e__FixedBuffer Value;
    internal static SID_IDENTIFIER_AUTHORITY SECURITY_NULL_SID_AUTHORITY;
    internal static SID_IDENTIFIER_AUTHORITY SECURITY_WORLD_SID_AUTHORITY;
    internal static SID_IDENTIFIER_AUTHORITY SECURITY_LOCAL_SID_AUTHORITY;
    internal static SID_IDENTIFIER_AUTHORITY SECURITY_CREATOR_SID_AUTHORITY;
    internal static SID_IDENTIFIER_AUTHORITY SECURITY_NON_UNIQUE_AUTHORITY;
    internal static SID_IDENTIFIER_AUTHORITY SECURITY_NT_AUTHORITY;
    internal static SID_IDENTIFIER_AUTHORITY SECURITY_RESOURCE_MANAGER_AUTHORITY;
    internal static SID_IDENTIFIER_AUTHORITY SECURITY_APP_PACKAGE_AUTHORITY;
    internal static SID_IDENTIFIER_AUTHORITY SECURITY_MANDATORY_LABEL_AUTHORITY;
    internal static SID_IDENTIFIER_AUTHORITY SECURITY_SCOPED_POLICY_ID_AUTHORITY;
    internal static SID_IDENTIFIER_AUTHORITY SECURITY_AUTHENTICATION_AUTHORITY;
    internal static SID_IDENTIFIER_AUTHORITY SECURITY_PROCESS_TRUST_AUTHORITY;
    private SID_IDENTIFIER_AUTHORITY(byte value0, byte value1, byte value2, byte value3, byte value4, byte value5);
    private static SID_IDENTIFIER_AUTHORITY();
}
internal class JetBrains.HabitatDetector.Impl.Windows.SYSTEM_INFO : ValueType {
    internal PROCESSOR_ARCHITECTURE wProcessorArchitecture;
    internal ushort wReserved;
    internal UInt32 dwPageSize;
    internal IntPtr lpMinimumApplicationAddress;
    internal IntPtr lpMaximumApplicationAddress;
    internal UIntPtr dwActiveProcessorMask;
    internal UInt32 dwNumberOfProcessors;
    internal UInt32 dwProcessorType;
    internal UInt32 dwAllocationGranularity;
    internal ushort wProcessorLevel;
    internal ushort wProcessorRevision;
}
internal class JetBrains.HabitatDetector.Impl.Windows.TOKEN_ELEVATION : ValueType {
    internal UInt32 TokenIsElevated;
}
internal enum JetBrains.HabitatDetector.Impl.Windows.TOKEN_ELEVATION_TYPE : Enum {
    public int value__;
    public static TOKEN_ELEVATION_TYPE TokenElevationTypeDefault;
    public static TOKEN_ELEVATION_TYPE TokenElevationTypeFull;
    public static TOKEN_ELEVATION_TYPE TokenElevationTypeLimited;
}
internal enum JetBrains.HabitatDetector.Impl.Windows.TOKEN_INFORMATION_CLASS : Enum {
    public UInt32 value__;
    public static TOKEN_INFORMATION_CLASS TokenUser;
    public static TOKEN_INFORMATION_CLASS TokenGroups;
    public static TOKEN_INFORMATION_CLASS TokenPrivileges;
    public static TOKEN_INFORMATION_CLASS TokenOwner;
    public static TOKEN_INFORMATION_CLASS TokenPrimaryGroup;
    public static TOKEN_INFORMATION_CLASS TokenDefaultDacl;
    public static TOKEN_INFORMATION_CLASS TokenSource;
    public static TOKEN_INFORMATION_CLASS TokenType;
    public static TOKEN_INFORMATION_CLASS TokenImpersonationLevel;
    public static TOKEN_INFORMATION_CLASS TokenStatistics;
    public static TOKEN_INFORMATION_CLASS TokenRestrictedSids;
    public static TOKEN_INFORMATION_CLASS TokenSessionId;
    public static TOKEN_INFORMATION_CLASS TokenGroupsAndPrivileges;
    public static TOKEN_INFORMATION_CLASS TokenSessionReference;
    public static TOKEN_INFORMATION_CLASS TokenSandBoxInert;
    public static TOKEN_INFORMATION_CLASS TokenAuditPolicy;
    public static TOKEN_INFORMATION_CLASS TokenOrigin;
    public static TOKEN_INFORMATION_CLASS TokenElevationType;
    public static TOKEN_INFORMATION_CLASS TokenLinkedToken;
    public static TOKEN_INFORMATION_CLASS TokenElevation;
    public static TOKEN_INFORMATION_CLASS TokenHasRestrictions;
    public static TOKEN_INFORMATION_CLASS TokenAccessInformation;
    public static TOKEN_INFORMATION_CLASS TokenVirtualizationAllowed;
    public static TOKEN_INFORMATION_CLASS TokenVirtualizationEnabled;
    public static TOKEN_INFORMATION_CLASS TokenIntegrityLevel;
    public static TOKEN_INFORMATION_CLASS TokenUIAccess;
    public static TOKEN_INFORMATION_CLASS TokenMandatoryPolicy;
    public static TOKEN_INFORMATION_CLASS TokenLogonSid;
    public static TOKEN_INFORMATION_CLASS TokenIsAppContainer;
    public static TOKEN_INFORMATION_CLASS TokenCapabilities;
    public static TOKEN_INFORMATION_CLASS TokenAppContainerSid;
    public static TOKEN_INFORMATION_CLASS TokenAppContainerNumber;
    public static TOKEN_INFORMATION_CLASS TokenUserClaimAttributes;
    public static TOKEN_INFORMATION_CLASS TokenDeviceClaimAttributes;
    public static TOKEN_INFORMATION_CLASS TokenRestrictedUserClaimAttributes;
    public static TOKEN_INFORMATION_CLASS TokenRestrictedDeviceClaimAttributes;
    public static TOKEN_INFORMATION_CLASS TokenDeviceGroups;
    public static TOKEN_INFORMATION_CLASS TokenRestrictedDeviceGroups;
    public static TOKEN_INFORMATION_CLASS TokenSecurityAttributes;
    public static TOKEN_INFORMATION_CLASS TokenIsRestricted;
    public static TOKEN_INFORMATION_CLASS MaxTokenInfoClass;
}
[FlagsAttribute]
internal enum JetBrains.HabitatDetector.Impl.Windows.TokenSpecificAccessRights : Enum {
    public UInt32 value__;
    public static TokenSpecificAccessRights TOKEN_ASSIGN_PRIMARY;
    public static TokenSpecificAccessRights TOKEN_DUPLICATE;
    public static TokenSpecificAccessRights TOKEN_IMPERSONATE;
    public static TokenSpecificAccessRights TOKEN_QUERY;
    public static TokenSpecificAccessRights TOKEN_QUERY_SOURCE;
    public static TokenSpecificAccessRights TOKEN_ADJUST_PRIVILEGES;
    public static TokenSpecificAccessRights TOKEN_ADJUST_GROUPS;
    public static TokenSpecificAccessRights TOKEN_ADJUST_DEFAULT;
    public static TokenSpecificAccessRights TOKEN_ADJUST_SESSIONID;
    public static TokenSpecificAccessRights TOKEN_ALL_ACCESS_P;
    public static TokenSpecificAccessRights TOKEN_ALL_ACCESS;
    public static TokenSpecificAccessRights TOKEN_READ;
    public static TokenSpecificAccessRights TOKEN_WRITE;
    public static TokenSpecificAccessRights TOKEN_EXECUTE;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class JetBrains.HabitatDetector.Impl.Windows.WinApiCalls : object {
    public static IsWow64ProcessDelegate IsWow64Process;
    public static IsWow64Process2Delegate IsWow64Process2;
    public static GetProcessInformationDelegate GetProcessInformation;
    private static WinApiCalls();
}
internal static class JetBrains.HabitatDetector.Impl.Windows.WindowsHelper : object {
    internal static JetArchitecture GetProcessArchitecture();
    [NullableContextAttribute("1")]
internal static JetArchitecture OpenProcess(int processId, OpenProcessDelegate`1<JetArchitecture> action);
    internal static JetArchitecture GetProcessArchitecture(Void* hProcess);
    internal static JetArchitecture GetOSArchitecture();
    internal static ElevationData GetElevation();
    internal static ElevationData GetElevation(Void* hProcess);
    private static bool IsBuildInGroupMember(Void* hToken, UInt32 domainAliasRid);
    private static JetArchitecture ConvertToArchitecture(PROCESSOR_ARCHITECTURE processorArchitecture);
    private static JetArchitecture ConvertToArchitecture(IMAGE_FILE_MACHINE imageFileMachine);
    [NullableContextAttribute("1")]
internal static string FixProductName(string productName, UInt32 buildNumber);
    internal static OSInfo GetOSInfo();
    [NullableContextAttribute("1")]
private static TResult RegQueryValues(Void* hKey, string path, KeyAccessRights samDesired, RegQueryValuesDelegate`1<TResult> queries);
}
internal static class JetBrains.HabitatDetector.Impl.Windows.WinError : object {
    internal static int ERROR_SUCCESS;
    internal static int ERROR_FILE_NOT_FOUND;
    internal static int ERROR_INVALID_PARAMETER;
    internal static int ERROR_MORE_DATA;
}
public enum JetBrains.HabitatDetector.JetArchitecture : Enum {
    public int value__;
    public static JetArchitecture X86;
    public static JetArchitecture X64;
    public static JetArchitecture Arm;
    public static JetArchitecture Arm64;
    public static JetArchitecture S390x;
    public static JetArchitecture LoongArch64;
    public static JetArchitecture Ppc64le;
    public static JetArchitecture RiscV64;
}
public enum JetBrains.HabitatDetector.JetClrImplementation : Enum {
    public int value__;
    public static JetClrImplementation Mono;
    public static JetClrImplementation NetCore;
    public static JetClrImplementation NetFramework;
}
public enum JetBrains.HabitatDetector.JetLinuxLibC : Enum {
    public int value__;
    public static JetLinuxLibC Bionic;
    public static JetLinuxLibC Glibc;
    public static JetLinuxLibC Musl;
}
public enum JetBrains.HabitatDetector.JetPlatform : Enum {
    public int value__;
    public static JetPlatform FreeBSD;
    public static JetPlatform Linux;
    public static JetPlatform MacOsX;
    public static JetPlatform Windows;
}
public enum JetBrains.HabitatDetector.JetUnixId : Enum {
    public int value__;
    public static JetUnixId Alpine;
    public static JetUnixId Amazon;
    public static JetUnixId Arch;
    public static JetUnixId CentOS;
    public static JetUnixId Debian;
    public static JetUnixId Elementary;
    public static JetUnixId Fedora;
    public static JetUnixId FreeBSD;
    public static JetUnixId Kali;
    public static JetUnixId Manjaro;
    public static JetUnixId Mint;
    public static JetUnixId OpenSUSE;
    public static JetUnixId Oracle;
    public static JetUnixId RHEL;
    public static JetUnixId SLES;
    public static JetUnixId Ubuntu;
}
public enum JetBrains.HabitatDetector.JetWindowsInstallationType : Enum {
    public int value__;
    public static JetWindowsInstallationType Client;
    public static JetWindowsInstallationType NanoServer;
    public static JetWindowsInstallationType Server;
    public static JetWindowsInstallationType ServerCore;
    public static JetWindowsInstallationType IoTCore;
}
public enum JetBrains.HabitatDetector.JetWindowsTokenElevationType : Enum {
    public int value__;
    public static JetWindowsTokenElevationType Default;
    public static JetWindowsTokenElevationType Full;
    public static JetWindowsTokenElevationType Limited;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.HabitatDetector.OsReleaseProperties : object {
    public static string AnsiColorKey;
    public static string BugReportUrlKey;
    public static string BuildIdKey;
    public static string DocumentationUrlKey;
    public static string HomeUrlKey;
    public static string IdKey;
    public static string IdLikeKey;
    public static string ImageIdKey;
    public static string ImageVersionKey;
    public static string LogoKey;
    public static string NameKey;
    public static string PrettyNameKey;
    public static string PrivacyPolicyUrlKey;
    public static string SupportUrlKey;
    public static string VariantIdKey;
    public static string VariantKey;
    public static string VersionCodenameKey;
    public static string VersionIdKey;
    public static string VersionKey;
    private Dictionary`2<string, string> myProperties;
    private OsReleaseProperties(Dictionary`2<string, string> properties);
    public string TryGetValue(string key);
    public Nullable`1<JetUnixId> TryGetUnixId();
    [NullableContextAttribute("2")]
public static OsReleaseProperties ReadFromDefaultLocations();
    internal static OsReleaseProperties ReadFromStream(StreamReader reader);
    [CompilerGeneratedAttribute]
internal static bool <ReadFromStream>g__IsQuotedString|24_0(string str, char ch);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NativeIntegerAttribute : Attribute {
    public Boolean[] TransformFlags;
    public NativeIntegerAttribute(Boolean[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
