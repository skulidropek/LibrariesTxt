public class Microsoft.VisualBasic.ApplicationServices.ApplicationBase : object {
    private AssemblyInfo m_AssemblyInfo;
    private Log m_Log;
    public AssemblyInfo Info { get; }
    public CultureInfo Culture { get; }
    public Log Log { get; }
    public CultureInfo UICulture { get; }
    public void ChangeCulture(string cultureName);
    public void ChangeUICulture(string cultureName);
    public string GetEnvironmentVariable(string name);
    public AssemblyInfo get_Info();
    public CultureInfo get_Culture();
    public Log get_Log();
    public CultureInfo get_UICulture();
}
public class Microsoft.VisualBasic.ApplicationServices.AssemblyInfo : object {
    private Assembly m_CurrentAssembly;
    public string AssemblyName { get; }
    public string CompanyName { get; }
    public string Copyright { get; }
    public string Description { get; }
    public string DirectoryPath { get; }
    public ReadOnlyCollection`1<Assembly> LoadedAssemblies { get; }
    public string ProductName { get; }
    public string StackTrace { get; }
    public string Title { get; }
    public string Trademark { get; }
    public Version Version { get; }
    public long WorkingSet { get; }
    public AssemblyInfo(Assembly currentAssembly);
    private T GetAttribute();
    public string get_AssemblyName();
    public string get_CompanyName();
    public string get_Copyright();
    public string get_Description();
    public string get_DirectoryPath();
    public ReadOnlyCollection`1<Assembly> get_LoadedAssemblies();
    public string get_ProductName();
    public string get_StackTrace();
    public string get_Title();
    public string get_Trademark();
    public Version get_Version();
    public long get_WorkingSet();
}
public enum Microsoft.VisualBasic.ApplicationServices.AuthenticationMode : Enum {
    public static AuthenticationMode ApplicationDefined;
    public static AuthenticationMode Windows;
    public int value__;
}
[TypeConverterAttribute("Microsoft.VisualBasic.ApplicationServices.BuiltInRoleConverter")]
public enum Microsoft.VisualBasic.ApplicationServices.BuiltInRole : Enum {
    public static BuiltInRole AccountOperator;
    public static BuiltInRole Administrator;
    public static BuiltInRole BackupOperator;
    public static BuiltInRole Guest;
    public static BuiltInRole PowerUser;
    public static BuiltInRole PrintOperator;
    public static BuiltInRole Replicator;
    public static BuiltInRole SystemOperator;
    public static BuiltInRole User;
    public int value__;
}
public class Microsoft.VisualBasic.ApplicationServices.BuiltInRoleConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    private WindowsBuiltInRole GetWindowsBuiltInRole(object role);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.ApplicationServices.CantStartSingleInstanceException : Exception {
    public CantStartSingleInstanceException(string message);
    public CantStartSingleInstanceException(string message, Exception inner);
    [EditorBrowsableAttribute("2")]
protected CantStartSingleInstanceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase : ApplicationBase {
    public ReadOnlyCollection`1<string> CommandLineArgs { get; }
    [EditorBrowsableAttribute("2")]
unknown ReadOnlyCollection`1<string> InternalCommandLine {protected set; }
    public bool IsNetworkDeployed { get; }
    public ReadOnlyCollection`1<string> get_CommandLineArgs();
    protected void set_InternalCommandLine(ReadOnlyCollection`1<string> value);
    public bool get_IsNetworkDeployed();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.ApplicationServices.NoStartupFormException : Exception {
    public NoStartupFormException(string message);
    [EditorBrowsableAttribute("2")]
protected NoStartupFormException(SerializationInfo info, StreamingContext context);
    public NoStartupFormException(string message, Exception inner);
}
[EditorBrowsableAttribute("2")]
public class Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler : MulticastDelegate {
    public ShutdownEventHandler(object TargetObject, IntPtr TargetMethod);
    public virtual void Invoke(object sender, EventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback DelegateCallback, object DelegateAsyncState);
    public virtual void EndInvoke(IAsyncResult DelegateAsyncResult);
}
public enum Microsoft.VisualBasic.ApplicationServices.ShutdownMode : Enum {
    public static ShutdownMode AfterAllFormsClose;
    public static ShutdownMode AfterMainFormCloses;
    public int value__;
}
[ComVisibleAttribute("False")]
[EditorBrowsableAttribute("2")]
public class Microsoft.VisualBasic.ApplicationServices.StartupEventArgs : CancelEventArgs {
    private ReadOnlyCollection`1<string> m_CommandLine;
    public ReadOnlyCollection`1<string> CommandLine { get; }
    public StartupEventArgs(ReadOnlyCollection`1<string> args);
    public ReadOnlyCollection`1<string> get_CommandLine();
}
[EditorBrowsableAttribute("2")]
public class Microsoft.VisualBasic.ApplicationServices.StartupEventHandler : MulticastDelegate {
    public StartupEventHandler(object TargetObject, IntPtr TargetMethod);
    public virtual void Invoke(object sender, StartupEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, StartupEventArgs e, AsyncCallback DelegateCallback, object DelegateAsyncState);
    public virtual void EndInvoke(IAsyncResult DelegateAsyncResult);
}
[EditorBrowsableAttribute("2")]
public class Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs : EventArgs {
    private bool m_BringToForeground;
    private ReadOnlyCollection`1<string> m_CommandLine;
    public bool BringToForeground { get; public set; }
    public ReadOnlyCollection`1<string> CommandLine { get; }
    public StartupNextInstanceEventArgs(ReadOnlyCollection`1<string> args, bool bringToForegroundFlag);
    public bool get_BringToForeground();
    public void set_BringToForeground(bool value);
    public ReadOnlyCollection`1<string> get_CommandLine();
}
[EditorBrowsableAttribute("2")]
public class Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler : MulticastDelegate {
    public StartupNextInstanceEventHandler(object TargetObject, IntPtr TargetMethod);
    public virtual void Invoke(object sender, StartupNextInstanceEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, StartupNextInstanceEventArgs e, AsyncCallback DelegateCallback, object DelegateAsyncState);
    public virtual void EndInvoke(IAsyncResult DelegateAsyncResult);
}
[EditorBrowsableAttribute("2")]
[ComVisibleAttribute("False")]
public class Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs : ThreadExceptionEventArgs {
    private bool m_ExitApplication;
    public bool ExitApplication { get; public set; }
    public UnhandledExceptionEventArgs(bool exitApplication, Exception exception);
    public bool get_ExitApplication();
    public void set_ExitApplication(bool value);
}
[EditorBrowsableAttribute("2")]
public class Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler : MulticastDelegate {
    public UnhandledExceptionEventHandler(object TargetObject, IntPtr TargetMethod);
    public virtual void Invoke(object sender, UnhandledExceptionEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, UnhandledExceptionEventArgs e, AsyncCallback DelegateCallback, object DelegateAsyncState);
    public virtual void EndInvoke(IAsyncResult DelegateAsyncResult);
}
public class Microsoft.VisualBasic.ApplicationServices.User : object {
    [EditorBrowsableAttribute("2")]
public IPrincipal CurrentPrincipal { get; public set; }
    protected IPrincipal InternalPrincipal { get; protected set; }
    public bool IsAuthenticated { get; }
    public string Name { get; }
    [EditorBrowsableAttribute("2")]
public void InitializeWithWindowsUser();
    public bool IsInRole(BuiltInRole role);
    public bool IsInRole(string role);
    public IPrincipal get_CurrentPrincipal();
    public void set_CurrentPrincipal(IPrincipal value);
    protected virtual IPrincipal get_InternalPrincipal();
    protected virtual void set_InternalPrincipal(IPrincipal value);
    public bool get_IsAuthenticated();
    public string get_Name();
}
public class Microsoft.VisualBasic.ApplicationServices.WebUser : User {
    protected IPrincipal InternalPrincipal { get; protected set; }
    protected virtual IPrincipal get_InternalPrincipal();
    protected virtual void set_InternalPrincipal(IPrincipal value);
}
public class Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase : ConsoleApplicationBase {
    private bool m_IsSingleInstance;
    private bool m_EnableVisualStyles;
    private bool m_SaveMySettingsOnExit;
    private ShutdownMode m_ShutdownStyle;
    private AuthenticationMode m_AuthenticationMode;
    private WindowsFormsApplicationContext m_ApplicationContext;
    private int m_MinimumSplashScreenTime;
    private Form m_SplashScreen;
    private NetworkAvailableEventHandler NetworkAvailabilityChangedEvent;
    private ShutdownEventHandler ShutdownEvent;
    private StartupEventHandler StartupEvent;
    private StartupNextInstanceEventHandler StartupNextInstanceEvent;
    private UnhandledExceptionEventHandler UnhandledExceptionEvent;
    [EditorBrowsableAttribute("2")]
protected static bool UseCompatibleTextRendering { get; }
    [EditorBrowsableAttribute("2")]
protected bool IsSingleInstance { get; protected set; }
    protected bool EnableVisualStyles { get; protected set; }
    public bool SaveMySettingsOnExit { get; public set; }
    protected ShutdownMode ShutdownStyle { get; protected set; }
    [EditorBrowsableAttribute("2")]
public ApplicationContext ApplicationContext { get; }
    protected Form MainForm { get; protected set; }
    public int MinimumSplashScreenDisplayTime { get; public set; }
    public FormCollection OpenForms { get; }
    public Form SplashScreen { get; public set; }
    public WindowsFormsApplicationBase(AuthenticationMode mode);
    protected static bool get_UseCompatibleTextRendering();
    public void Run(String[] commandLine);
    protected bool get_IsSingleInstance();
    protected void set_IsSingleInstance(bool Value);
    protected bool get_EnableVisualStyles();
    protected void set_EnableVisualStyles(bool Value);
    public bool get_SaveMySettingsOnExit();
    public void set_SaveMySettingsOnExit(bool Value);
    protected ShutdownMode get_ShutdownStyle();
    protected void set_ShutdownStyle(ShutdownMode Value);
    public ApplicationContext get_ApplicationContext();
    protected Form get_MainForm();
    protected void set_MainForm(Form value);
    public int get_MinimumSplashScreenDisplayTime();
    public void set_MinimumSplashScreenDisplayTime(int value);
    public FormCollection get_OpenForms();
    public Form get_SplashScreen();
    public void set_SplashScreen(Form value);
    public void DoEvents();
    [EditorBrowsableAttribute("2")]
protected void HideSplashScreen();
    [EditorBrowsableAttribute("2")]
protected virtual void OnCreateMainForm();
    [EditorBrowsableAttribute("2")]
protected virtual void OnCreateSplashScreen();
    [EditorBrowsableAttribute("2")]
[STAThreadAttribute]
protected virtual bool OnInitialize(ReadOnlyCollection`1<string> commandLineArgs);
    [EditorBrowsableAttribute("2")]
protected virtual void OnRun();
    [EditorBrowsableAttribute("2")]
protected virtual void OnShutdown();
    [EditorBrowsableAttribute("2")]
protected virtual bool OnStartup(StartupEventArgs eventArgs);
    [EditorBrowsableAttribute("2")]
protected virtual void OnStartupNextInstance(StartupNextInstanceEventArgs eventArgs);
    [EditorBrowsableAttribute("2")]
protected virtual bool OnUnhandledException(UnhandledExceptionEventArgs e);
    [EditorBrowsableAttribute("2")]
protected void ShowSplashScreen();
    public void add_NetworkAvailabilityChanged(NetworkAvailableEventHandler obj);
    public void remove_NetworkAvailabilityChanged(NetworkAvailableEventHandler obj);
    public void add_Shutdown(ShutdownEventHandler obj);
    public void remove_Shutdown(ShutdownEventHandler obj);
    public void add_Startup(StartupEventHandler obj);
    public void remove_Startup(StartupEventHandler obj);
    public void add_StartupNextInstance(StartupNextInstanceEventHandler obj);
    public void remove_StartupNextInstance(StartupNextInstanceEventHandler obj);
    public void add_UnhandledException(UnhandledExceptionEventHandler obj);
    public void remove_UnhandledException(UnhandledExceptionEventHandler obj);
}
public enum Microsoft.VisualBasic.AppWinStyle : Enum {
    public static AppWinStyle Hide;
    public static AppWinStyle NormalFocus;
    public static AppWinStyle MinimizedFocus;
    public static AppWinStyle MaximizedFocus;
    public static AppWinStyle NormalNoFocus;
    public static AppWinStyle MinimizedNoFocus;
    public short value__;
}
internal class Microsoft.VisualBasic.ArrayDescriptor : object {
    public int Rank;
    public Int32[] Sizes;
    public Int32[] LowerBounds;
    public bool HasNonZeroLowerBounds;
    public void Read(BinaryReader BinaryStream);
}
public enum Microsoft.VisualBasic.AudioPlayMode : Enum {
    public static AudioPlayMode Background;
    public static AudioPlayMode BackgroundLoop;
    public static AudioPlayMode WaitToComplete;
    public short value__;
}
public enum Microsoft.VisualBasic.CallType : Enum {
    public static CallType Method;
    public static CallType Get;
    public static CallType Let;
    public static CallType Set;
    public int value__;
}
[DebuggerTypeProxyAttribute("Microsoft.VisualBasic.Collection/CollectionDebugView")]
[DebuggerDisplayAttribute("Count = {Count}")]
[DefaultMemberAttribute("Item")]
public class Microsoft.VisualBasic.Collection : object {
    private Hashtable m_Hashtable;
    private ArrayList m_HashIndexers;
    private int m_KeysCount;
    internal bool Modified;
    private bool IsReadOnly { get; }
    private bool IsSynchronized { get; }
    private object SyncRoot { get; }
    private bool IsFixedSize { get; }
    public int Count { get; }
    private int IList_Count { get; }
    [EditorBrowsableAttribute("2")]
public object Item { get; }
    public object Item { get; }
    public object Item { get; }
    private object IList_Item { get; private set; }
    private sealed virtual override bool get_IsReadOnly();
    private sealed virtual override bool get_IsSynchronized();
    private sealed virtual override object get_SyncRoot();
    private sealed virtual override bool get_IsFixedSize();
    public int get_Count();
    private sealed virtual override int get_IList_Count();
    public object get_Item(object Index);
    public object get_Item(int Index);
    public object get_Item(string Key);
    private sealed virtual override object get_IList_Item(int index);
    private sealed virtual override void set_IList_Item(int index, object Value);
    internal sealed virtual override int IndexOf(object value);
    public bool Contains(string Key);
    private sealed virtual override bool IListContains(object value);
    public void Clear();
    private sealed virtual override void IList_Clear();
    public void Remove(string Key);
    public void Remove(int Index);
    private sealed virtual override void Remove(object value);
    private sealed virtual override void RemoveAt(int index);
    private sealed virtual override void Insert(int index, object value);
    private void Insert(int index, object value, string Key);
    private sealed virtual override int IList_Add(object value);
    private int AddByKey(object Item, string Key);
    public void Add(object Item, string Key, object Before, object After);
    private string GetNextKey(object value);
    private int GetIndexPosition(object Item);
    private sealed virtual override void CopyTo(Array array, int index);
    private sealed virtual override IEnumerator IEnumerable_GetEnumerator();
    public IEnumerator GetEnumerator();
    [SecurityCriticalAttribute]
private sealed virtual override void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override void OnDeserialization(object sender);
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualBasic.ComClassAttribute : Attribute {
    private string m_classID;
    private string m_interfaceID;
    private string m_eventID;
    private bool m_interfaceShadows;
    public string EventID { get; }
    public bool InterfaceShadows { get; public set; }
    public string ClassID { get; }
    public string InterfaceID { get; }
    public ComClassAttribute(string _ClassID);
    public ComClassAttribute(string _ClassID, string _InterfaceID);
    public ComClassAttribute(string _ClassID, string _InterfaceID, string _EventID);
    public string get_EventID();
    public bool get_InterfaceShadows();
    public void set_InterfaceShadows(bool Value);
    public string get_ClassID();
    public string get_InterfaceID();
}
public enum Microsoft.VisualBasic.CompareMethod : Enum {
    public static CompareMethod Binary;
    public static CompareMethod Text;
    public int value__;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.BooleanType : object {
    public static bool FromObject(object Value);
    public static bool FromString(string Value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.ByteType : object {
    public static byte FromString(string value);
    public static byte FromObject(object Value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.CharArrayType : object {
    public static Char[] FromObject(object Value);
    public static Char[] FromString(string Value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.CharType : object {
    public static char FromString(string value);
    public static char FromObject(object Value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.Conversions : object {
    public static object ChangeType(object Expression, Type TargetType);
    public static string FromCharAndCount(char Value, int Count);
    public static string FromCharArray(Char[] Value);
    public static string FromCharArraySubset(Char[] Value, int StartIndex, int Length);
    public static bool ToBoolean(object Value);
    public static bool ToBoolean(string Value);
    public static byte ToByte(object Value);
    public static byte ToByte(string Value);
    public static char ToChar(object Value);
    public static char ToChar(string Value);
    public static Char[] ToCharArrayRankOne(object Value);
    public static Char[] ToCharArrayRankOne(string Value);
    public static DateTime ToDate(object Value);
    public static DateTime ToDate(string Value);
    public static decimal ToDecimal(bool Value);
    public static decimal ToDecimal(object Value);
    public static decimal ToDecimal(string Value);
    public static double ToDouble(object Value);
    public static double ToDouble(string Value);
    public static T ToGenericParameter(object Value);
    public static int ToInteger(object Value);
    public static int ToInteger(string Value);
    public static long ToLong(object Value);
    public static long ToLong(string Value);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(object Value);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(string Value);
    public static short ToShort(object Value);
    public static short ToShort(string Value);
    public static float ToSingle(object Value);
    public static float ToSingle(string Value);
    public static string ToString(bool Value);
    public static string ToString(byte Value);
    public static string ToString(char Value);
    public static string ToString(DateTime Value);
    public static string ToString(decimal Value);
    public static string ToString(double Value);
    public static string ToString(short Value);
    public static string ToString(int Value);
    public static string ToString(long Value);
    public static string ToString(object Value);
    public static string ToString(float Value);
    [CLSCompliantAttribute("False")]
public static string ToString(UInt32 Value);
    [CLSCompliantAttribute("False")]
public static string ToString(ulong Value);
    public static string ToString(decimal Value, NumberFormatInfo NumberFormat);
    public static string ToString(double Value, NumberFormatInfo NumberFormat);
    public static string ToString(float Value, NumberFormatInfo NumberFormat);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInteger(object Value);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInteger(string Value);
    [CLSCompliantAttribute("False")]
public static ulong ToULong(object Value);
    [CLSCompliantAttribute("False")]
public static ulong ToULong(string Value);
    [CLSCompliantAttribute("False")]
public static ushort ToUShort(object Value);
    [CLSCompliantAttribute("False")]
public static ushort ToUShort(string Value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.DateType : object {
    public static DateTime FromObject(object Value);
    public static DateTime FromString(string Value, CultureInfo culture);
    public static DateTime FromString(string Value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.DecimalType : object {
    public static decimal FromBoolean(bool Value);
    public static decimal FromObject(object Value);
    public static decimal FromObject(object Value, NumberFormatInfo NumberFormat);
    public static decimal FromString(string Value);
    public static decimal FromString(string Value, NumberFormatInfo NumberFormat);
    public static decimal Parse(string Value, NumberFormatInfo NumberFormat);
}
[EditorBrowsableAttribute("1")]
[AttributeUsageAttribute("4")]
public class Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute : Attribute {
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.DoubleType : object {
    public static double FromObject(object Value);
    public static double FromObject(object Value, NumberFormatInfo NumberFormat);
    public static double FromString(string Value);
    public static double FromString(string Value, NumberFormatInfo NumberFormat);
    public static double Parse(string Value);
    public static double Parse(string Value, NumberFormatInfo NumberFormat);
    internal static bool TryParse(string value, Double& result);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.ExceptionUtils : object {
    internal static Exception GetVBException(VBErrors Number);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.FlowControl : object {
    public static void CheckForSyncLockOnValueType(object obj);
    public static IEnumerator ForEachInArr(Array ary);
    public static IEnumerator ForEachInObj(object obj);
    public static bool ForEachNextObj(Object& obj, IEnumerator enumerator);
    public static bool ForLoopInitObj(object Counter, object Start, object Limit, object StepValue, Object& LoopForResult, Object& CounterResult);
    public static bool ForNextCheckDec(decimal count, decimal limit, decimal StepValue);
    public static bool ForNextCheckObj(object Counter, object LoopObj, Object& CounterResult);
    public static bool ForNextCheckR4(float count, float limit, float StepValue);
    public static bool ForNextCheckR8(double count, double limit, double StepValue);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.HostServices : object {
    private static IVbHost host;
    public static IVbHost VBHost { get; public set; }
    private static HostServices();
    public static IVbHost get_VBHost();
    public static void set_VBHost(IVbHost Value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.IncompleteInitialization : Exception {
    [EditorBrowsableAttribute("2")]
public IncompleteInitialization(string message);
    [EditorBrowsableAttribute("2")]
public IncompleteInitialization(string message, Exception innerException);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.IntegerType : object {
    public static int FromObject(object Value);
    public static int FromString(string Value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.InternalErrorException : Exception {
    [EditorBrowsableAttribute("2")]
public InternalErrorException(string message);
    [EditorBrowsableAttribute("2")]
public InternalErrorException(string message, Exception innerException);
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.VisualBasic.CompilerServices.IVbHost {
    public abstract virtual string GetWindowTitle();
    public abstract virtual IWin32Window GetParentWindow();
}
internal class Microsoft.VisualBasic.CompilerServices.LateBinder : Binder {
    private bool _wasIncompleteInvocation;
    private MethodInfo _invokeNext;
    private Object[] _invokeNextArgs;
    public bool WasIncompleteInvocation { get; }
    public MethodInfo InvokeNext { get; }
    public Object[] InvokeNextArgs { get; }
    public bool get_WasIncompleteInvocation();
    public MethodInfo get_InvokeNext();
    public Object[] get_InvokeNextArgs();
    public static object GetStateInstance();
    public virtual FieldInfo BindToField(BindingFlags bindingAttr, FieldInfo[] match, object value, CultureInfo culture);
    internal int Array_IndexOf(Int32[] Array, int item);
    internal int Array_IndexOf(String[] Array, string item);
    public virtual MethodBase BindToMethod(BindingFlags bindingAttr, MethodBase[] match, Object[]& args, ParameterModifier[] modifiers, CultureInfo culture, String[] names, Object& state);
    public virtual object ChangeType(object value, Type type1, CultureInfo culture);
    public virtual void ReorderArgumentArray(Object[]& args, object state);
    public virtual MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers);
    public virtual PropertyInfo SelectProperty(BindingFlags bindingAttr, PropertyInfo[] match, Type returnType, Type[] indexes, ParameterModifier[] modifiers);
    private Object[] PrepareArguments(Object[] args, ParameterInfo[] parameters, String[] names, BState bstate);
    private Int32[] GetArgumentsMapping(ParameterInfo[] parameters, String[] names, Object[] args);
    private void PrepareParameters(Object[]& args, MethodBase f, String[] names, BState bstate);
    private object ConvertValue(object value, Type type2);
    private SignatureCompare CompareMethods(MethodBase f1, MethodBase f2, Object[] args);
    private SignatureCompare CompareWideningTypes(Type f1, Type f2, bool type1isParamArray, bool type2isParamArray);
    private SignatureCompare CompareWideningTypesWithNothing(Type f1, Type f2);
    private SignatureCompare CompareWideningTypes(Type f1, Type f2);
    private Type GetArgumentType(Object[] args, int number);
    private Type GetParameterType(ParameterInfo[] parameters, int number);
    private bool IsParamArray(ParameterInfo[] parameters, int index);
    private MethodBase[] FilterMethodsByParameterName(MethodBase[] methods, String[] names);
    private bool IsGetterThatReturnObjectWithIndexer(MethodBase method, Object[]& args);
    private MethodBase[] FilterMethods(MethodBase[] methods, Object[]& args, String[] names);
    private TypeConversion CompareSignature(Object[] args, ParameterInfo[] parameters, String[] names);
    private TypeConversion CompareTypes(Type type1, Type type2, bool type2isParamArray);
    private TypeConversion CompareTypes(Type type1, Type type2);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.LateBinding : object {
    private static LateBinder LBinder { get; }
    private static LateBinder get_LBinder();
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static void LateCall(object o, Type objType, string name, Object[] args, String[] paramnames, Boolean[] CopyBack);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static void LateIndexSet(object o, Object[] args, String[] paramnames);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static void LateIndexSetComplex(object o, Object[] args, String[] paramnames, bool OptimisticSet, bool RValueBase);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static void LateSet(object o, Type objType, string name, Object[] args, String[] paramnames);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static void LateSetComplex(object o, Type objType, string name, Object[] args, String[] paramnames, bool OptimisticSet, bool RValueBase);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static object LateGet(object o, Type objType, string name, Object[] args, String[] paramnames, Boolean[] CopyBack);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static object LateIndexGet(object o, Object[] args, String[] paramnames);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.LikeOperator : object {
    public static object LikeObject(object Source, object Pattern, CompareMethod CompareOption);
    public static bool LikeString(string Source, string Pattern, CompareMethod CompareOption);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.LongType : object {
    public static long FromObject(object Value);
    public static long FromString(string value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.NewLateBinding : object {
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static object LateCall(object Instance, Type Type, string MemberName, Object[] Arguments, String[] ArgumentNames, Type[] TypeArguments, Boolean[] CopyBack, bool IgnoreReturn);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static bool LateCanEvaluate(object instance, Type type, string memberName, Object[] arguments, bool allowFunctionEvaluation, bool allowPropertyEvaluation);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static object LateGet(object Instance, Type Type, string MemberName, Object[] Arguments, String[] ArgumentNames, Type[] TypeArguments, Boolean[] CopyBack);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static object LateIndexGet(object Instance, Object[] Arguments, String[] ArgumentNames);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static void LateIndexSet(object Instance, Object[] Arguments, String[] ArgumentNames);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static void LateIndexSetComplex(object Instance, Object[] Arguments, String[] ArgumentNames, bool OptimisticSet, bool RValueBase);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static void LateSet(object Instance, Type Type, string MemberName, Object[] Arguments, String[] ArgumentNames, Type[] TypeArguments);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static void LateSet(object Instance, Type Type, string MemberName, Object[] Arguments, String[] ArgumentNames, Type[] TypeArguments, bool OptimisticSet, bool RValueBase, CallType CallType);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static void LateSetComplex(object Instance, Type Type, string MemberName, Object[] Arguments, String[] ArgumentNames, Type[] TypeArguments, bool OptimisticSet, bool RValueBase);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.ObjectFlowControl : object {
    public static void CheckForSyncLockOnValueType(object Expression);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.ObjectType : object {
    private static TypeCode BiggestTypeCode(object obj1, object obj2);
    public static int ObjTst(object o1, object o2, bool TextCompare);
    internal static Exception GetCaseNotImplemented();
    internal static Exception GetCaseNotImplemented(string msg);
    public static object PlusObj(object obj);
    public static object NegObj(object obj);
    public static object NotObj(object obj);
    public static object BitAndObj(object obj1, object obj2);
    public static object BitOrObj(object obj1, object obj2);
    public static object BitXorObj(object obj1, object obj2);
    public static object AddObj(object o1, object o2);
    public static object SubObj(object o1, object o2);
    public static object MulObj(object o1, object o2);
    public static object DivObj(object o1, object o2);
    public static object PowObj(object o1, object o2);
    public static object ShiftLeftObj(object o1, int amount);
    public static object ShiftRightObj(object o1, int amount);
    public static object ModObj(object o1, object o2);
    public static object IDivObj(object o1, object o2);
    public static object XorObj(object obj1, object obj2);
    public static bool LikeObj(object vLeft, object vRight, CompareMethod CompareOption);
    public static object StrCatObj(object vLeft, object vRight);
    public static object GetObjectValuePrimitive(object o);
    private static object CreateNullObjectType(object otype);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.Operators : object {
    private static TypeCode[0...,0...] DEST_TYPECODE_ADD;
    private static TypeCode[0...,0...] DEST_TYPECODE_SUBTRACT;
    private static TypeCode[0...,0...] DEST_TYPECODE_DIVIDE;
    private static TypeCode[0...,0...] DEST_TYPECODE_INTDIVIDE;
    private static TypeCode[0...,0...] DEST_TYPECODE_MULTIPLY;
    private static TypeCode[0...,0...] DEST_TYPECODE_BITWISE_OP;
    private static TypeCode[0...,0...] DEST_TYPECODE_MOD;
    private static TypeCode[0...,0...] DEST_TYPECODE_COMPARE;
    private static Operators();
    private static CompareResult CompareBoolean(bool Left, bool Right);
    private static CompareResult CompareByte(byte Left, byte Right);
    private static CompareResult CompareChar(char Left, char Right);
    private static CompareResult CompareDate(DateTime Left, DateTime Right);
    private static CompareResult IntToCompareResult(int val);
    private static CompareResult CompareDecimal(decimal Left, decimal Right);
    private static CompareResult CompareDouble(double Left, double Right);
    private static CompareResult CompareInt16(short Left, short Right);
    private static CompareResult CompareInt32(int Left, int Right);
    private static CompareResult CompareInt64(long Left, long Right);
    private static CompareResult CompareSByte(sbyte Left, sbyte Right);
    private static CompareResult CompareSingle(float Left, float Right);
    private static CompareResult CompareUInt16(ushort Left, ushort Right);
    private static CompareResult CompareUInt32(UInt32 Left, UInt32 Right);
    private static CompareResult CompareUInt64(ulong Left, ulong Right);
    internal static TypeCode GetTypeCode(object obj);
    private static TypeCode DestTypeCodeOpAdd(object obj1, object obj2);
    private static TypeCode DestTypeCodeOpSubtract(object obj1, object obj2);
    private static TypeCode DestTypeCodeOpDivide(object obj1, object obj2);
    private static TypeCode DestTypeCodeOpIntDivide(object obj1, object obj2);
    private static TypeCode DestTypeCodeOpMultiply(object obj1, object obj2);
    private static TypeCode DestTypeCodeOpMod(object obj1, object obj2);
    private static TypeCode DestTypeCodeBitwiseOp(object obj1, object obj2);
    private static TypeCode DestTypeCodeOpCompare(object obj1, object obj2);
    private static object AddBooleans(bool o1, bool o2);
    private static object AddBytes(byte o1, byte o2);
    private static object AddChars(char o1, char o2);
    private static object AddDateTimes(DateTime o1, DateTime o2);
    private static object AddDecimals(decimal o1, decimal o2);
    private static object AddDoubles(double o1, double o2);
    private static object AddInt16s(short o1, short o2);
    private static object AddInt32s(int o1, int o2);
    private static object AddInt64s(long o1, long o2);
    private static object AddObjects(object o1, object o2);
    private static object AddSBytes(sbyte o1, sbyte o2);
    private static object AddSingles(float o1, float o2);
    private static object AddStrings(string o1, string o2);
    private static object AddUInt16s(ushort o1, ushort o2);
    private static object AddUInt32s(UInt32 o1, UInt32 o2);
    private static object AddUInt64s(ulong o1, ulong o2);
    public static object AddObject(object Left, object Right);
    private static object CreateNullObjectType(object otype);
    public static object AndObject(object Left, object Right);
    public static int CompareObject(object Left, object Right, bool TextCompare);
    private static CompareResult CompareObjectInternal(object o1, object o2, bool TextCompare);
    public static object CompareObjectEqual(object Left, object Right, bool TextCompare);
    public static object CompareObjectGreater(object Left, object Right, bool TextCompare);
    public static object CompareObjectGreaterEqual(object Left, object Right, bool TextCompare);
    public static object CompareObjectLess(object Left, object Right, bool TextCompare);
    public static object CompareObjectLessEqual(object Left, object Right, bool TextCompare);
    public static object CompareObjectNotEqual(object Left, object Right, bool TextCompare);
    public static int CompareString(string Left, string Right, bool TextCompare);
    public static object ConcatenateObject(object Left, object Right);
    internal static bool InvokeBinaryOperator(object left, object right, string operation, Object& ret);
    private static bool InvokeUnaryOperator(object operand, string operation, Object& ret);
    public static bool ConditionalCompareObjectEqual(object Left, object Right, bool TextCompare);
    public static bool ConditionalCompareObjectGreater(object Left, object Right, bool TextCompare);
    public static bool ConditionalCompareObjectGreaterEqual(object Left, object Right, bool TextCompare);
    public static bool ConditionalCompareObjectLess(object Left, object Right, bool TextCompare);
    public static bool ConditionalCompareObjectLessEqual(object Left, object Right, bool TextCompare);
    public static bool ConditionalCompareObjectNotEqual(object Left, object Right, bool TextCompare);
    private static object DivideObjects(object o1, object o2);
    private static object IntDivideObjects(object o1, object o2);
    private static object MultiplyObjects(object Left, object Right);
    private static object ModObjects(object o1, object o2);
    public static object DivideObject(object Left, object Right);
    public static object ExponentObject(object Left, object Right);
    private static bool IsUnsignNum(object obj);
    public static object IntDivideObject(object Left, object Right);
    public static object LeftShiftObject(object Operand, object Amount);
    public static object LikeObject(object Source, object Pattern, CompareMethod CompareOption);
    public static bool LikeString(string Source, string Pattern, CompareMethod CompareOption);
    public static object ModObject(object Left, object Right);
    private static object SizeDown(long num, TypeCode minTC);
    internal static object MultiplyAndSize(long o1, long o2, TypeCode tc);
    public static object MultiplyObject(object Left, object Right);
    internal static object PlusBoolean(bool Operand);
    internal static object PlusString(string Operand);
    internal static object NegateBoolean(bool Operand);
    internal static object NegateByte(byte Operand);
    internal static object NegateUInt16(ushort Operand);
    internal static object NegateUInt32(UInt32 Operand);
    internal static object NegateUInt64(ulong Operand);
    internal static object NegateSByte(sbyte Operand);
    internal static object NegateDecimal(decimal Operand);
    internal static object NegateDouble(double Operand);
    internal static object NegateSingle(float Operand);
    internal static object NegateInt16(short Operand);
    internal static object NegateInt32(int Operand);
    internal static object NegateInt64(long Operand);
    internal static object NegateString(string Operand);
    internal static object NegateObject_(object Operand);
    internal static object PlusObject_(object Operand);
    internal static object RightShiftObject_(object Operand, object Amount);
    internal static object LeftShiftObject_(object Operand, object Amount);
    public static object NegateObject(object Operand);
    internal static object NotObject_(object Operand);
    internal static object NotString(string Operand);
    public static object NotObject(object Operand);
    private static object OrObjects(object o1, object o2);
    private static object XorObjects(object o1, object o2);
    private static object AndObjects(object o1, object o2);
    private static long GetAsLong(object obj);
    public static object OrObject(object Left, object Right);
    internal static object BitWiseOpObject(object o1, object o2, BitWiseOpHandler opHandler);
    public static object PlusObject(object Operand);
    private static int GetAmountAsInteger(object Amount);
    public static object RightShiftObject(object Operand, object Amount);
    private static object SubtractBooleans(bool o1, bool o2);
    private static object SubtractBytes(byte o1, byte o2);
    private static object SubtractDecimals(decimal o1, decimal o2);
    private static object SubtractDoubles(double o1, double o2);
    private static object SubtractInt16s(short o1, short o2);
    private static object SubtractInt32s(int o1, int o2);
    private static object SubtractInt64s(long o1, long o2);
    private static object SubtractObjects(object o1, object o2);
    private static object SubtractSBytes(sbyte o1, sbyte o2);
    private static object SubtractSingles(float o1, float o2);
    private static object SubtractUInt16s(ushort o1, ushort o2);
    private static object SubtractUInt32s(UInt32 o1, UInt32 o2);
    private static object SubtractUInt64s(ulong o1, ulong o2);
    private static object SubtractDateTime(DateTime o1, DateTime o2);
    public static object SubtractObject(object Left, object Right);
    public static object XorObject(object Left, object Right);
}
[AttributeUsageAttribute("2048")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.OptionTextAttribute : Attribute {
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.ProjectData : object {
    private static ProjectData Inst;
    [ThreadStaticAttribute]
internal static ErrObject m_projectError;
    internal ErrObject ProjectError { get; }
    private static ProjectData();
    internal ErrObject get_ProjectError();
    internal static ProjectData Instance();
    [ReliabilityContractAttribute("3", "2")]
public static void ClearProjectError();
    public static Exception CreateProjectError(int hr);
    [ReliabilityContractAttribute("3", "2")]
public static void SetProjectError(Exception ex);
    [ReliabilityContractAttribute("3", "2")]
public static void SetProjectError(Exception ex, int lErl);
    public static void EndApp();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.ShortType : object {
    public static short FromObject(object Value);
    public static short FromString(string value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.SingleType : object {
    public static float FromObject(object Value);
    public static float FromObject(object Value, NumberFormatInfo NumberFormat);
    public static float FromString(string value);
    public static float FromString(string Value, NumberFormatInfo NumberFormat);
    private static float Parse(string Value, NumberFormatInfo NumberFormat);
}
[EditorBrowsableAttribute("1")]
[AttributeUsageAttribute("4")]
public class Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute : Attribute {
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag : object {
    public short State;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.StringType : object {
    public static string FromBoolean(bool Value);
    public static string FromChar(char Value);
    public static string FromInteger(int Value);
    public static string FromDecimal(decimal Value);
    public static string FromDecimal(decimal Value, NumberFormatInfo NumberFormat);
    public static string FromObject(object Value);
    public static string FromDouble(double value);
    public static string FromDouble(double Value, NumberFormatInfo NumberFormat);
    public static string FromByte(byte value);
    public static string FromSingle(float value);
    public static string FromSingle(float Value, NumberFormatInfo NumberFormat);
    public static string FromLong(long value);
    public static string FromShort(short value);
    public static int StrCmp(string sLeft, string sRight, bool textCompare);
    public static string FromDate(DateTime value);
    public static void MidStmtStr(String& sDest, int StartPosition, int MaxInsertLength, string sInsert);
    public static bool StrLike(string Source, string Pattern, CompareMethod CompareOption);
    private static string ConvertLikeExpression(string expression);
    private static StringBuilder ConvertGroupSubexpression(string carr, Int32& pos);
    public static bool StrLikeBinary(string Source, string Pattern);
    public static bool StrLikeText(string Source, string Pattern);
}
internal enum Microsoft.VisualBasic.CompilerServices.TypeCombinations : Enum {
    public static TypeCombinations SHIFT;
    public static TypeCombinations Empty_Empty;
    public static TypeCombinations Empty_Object;
    public static TypeCombinations Empty_DBNull;
    public static TypeCombinations Empty_Boolean;
    public static TypeCombinations Empty_Char;
    public static TypeCombinations Empty_SByte;
    public static TypeCombinations Empty_Byte;
    public static TypeCombinations Empty_Int16;
    public static TypeCombinations Empty_UInt16;
    public static TypeCombinations Empty_Int32;
    public static TypeCombinations Empty_UInt32;
    public static TypeCombinations Empty_Int64;
    public static TypeCombinations Empty_UInt64;
    public static TypeCombinations Empty_Single;
    public static TypeCombinations Empty_Double;
    public static TypeCombinations Empty_Decimal;
    public static TypeCombinations Empty_DateTime;
    public static TypeCombinations Empty_String;
    public static TypeCombinations Object_Empty;
    public static TypeCombinations Object_Object;
    public static TypeCombinations Object_DBNull;
    public static TypeCombinations Object_Boolean;
    public static TypeCombinations Object_Char;
    public static TypeCombinations Object_SByte;
    public static TypeCombinations Object_Byte;
    public static TypeCombinations Object_Int16;
    public static TypeCombinations Object_UInt16;
    public static TypeCombinations Object_Int32;
    public static TypeCombinations Object_UInt32;
    public static TypeCombinations Object_Int64;
    public static TypeCombinations Object_UInt64;
    public static TypeCombinations Object_Single;
    public static TypeCombinations Object_Double;
    public static TypeCombinations Object_Decimal;
    public static TypeCombinations Object_DateTime;
    public static TypeCombinations Object_String;
    public static TypeCombinations DBNull_Empty;
    public static TypeCombinations DBNull_Object;
    public static TypeCombinations DBNull_DBNull;
    public static TypeCombinations DBNull_Boolean;
    public static TypeCombinations DBNull_Char;
    public static TypeCombinations DBNull_SByte;
    public static TypeCombinations DBNull_Byte;
    public static TypeCombinations DBNull_Int16;
    public static TypeCombinations DBNull_UInt16;
    public static TypeCombinations DBNull_Int32;
    public static TypeCombinations DBNull_UInt32;
    public static TypeCombinations DBNull_Int64;
    public static TypeCombinations DBNull_UInt64;
    public static TypeCombinations DBNull_Single;
    public static TypeCombinations DBNull_Double;
    public static TypeCombinations DBNull_Decimal;
    public static TypeCombinations DBNull_DateTime;
    public static TypeCombinations DBNull_String;
    public static TypeCombinations Boolean_Empty;
    public static TypeCombinations Boolean_Object;
    public static TypeCombinations Boolean_DBNull;
    public static TypeCombinations Boolean_Boolean;
    public static TypeCombinations Boolean_Char;
    public static TypeCombinations Boolean_SByte;
    public static TypeCombinations Boolean_Byte;
    public static TypeCombinations Boolean_Int16;
    public static TypeCombinations Boolean_UInt16;
    public static TypeCombinations Boolean_Int32;
    public static TypeCombinations Boolean_UInt32;
    public static TypeCombinations Boolean_Int64;
    public static TypeCombinations Boolean_UInt64;
    public static TypeCombinations Boolean_Single;
    public static TypeCombinations Boolean_Double;
    public static TypeCombinations Boolean_Decimal;
    public static TypeCombinations Boolean_DateTime;
    public static TypeCombinations Boolean_String;
    public static TypeCombinations Char_Empty;
    public static TypeCombinations Char_Object;
    public static TypeCombinations Char_DBNull;
    public static TypeCombinations Char_Boolean;
    public static TypeCombinations Char_Char;
    public static TypeCombinations Char_SByte;
    public static TypeCombinations Char_Byte;
    public static TypeCombinations Char_Int16;
    public static TypeCombinations Char_UInt16;
    public static TypeCombinations Char_Int32;
    public static TypeCombinations Char_UInt32;
    public static TypeCombinations Char_Int64;
    public static TypeCombinations Char_UInt64;
    public static TypeCombinations Char_Single;
    public static TypeCombinations Char_Double;
    public static TypeCombinations Char_Decimal;
    public static TypeCombinations Char_DateTime;
    public static TypeCombinations Char_String;
    public static TypeCombinations SByte_Empty;
    public static TypeCombinations SByte_Object;
    public static TypeCombinations SByte_DBNull;
    public static TypeCombinations SByte_Boolean;
    public static TypeCombinations SByte_Char;
    public static TypeCombinations SByte_SByte;
    public static TypeCombinations SByte_Byte;
    public static TypeCombinations SByte_Int16;
    public static TypeCombinations SByte_UInt16;
    public static TypeCombinations SByte_Int32;
    public static TypeCombinations SByte_UInt32;
    public static TypeCombinations SByte_Int64;
    public static TypeCombinations SByte_UInt64;
    public static TypeCombinations SByte_Single;
    public static TypeCombinations SByte_Double;
    public static TypeCombinations SByte_Decimal;
    public static TypeCombinations SByte_DateTime;
    public static TypeCombinations SByte_String;
    public static TypeCombinations Byte_Empty;
    public static TypeCombinations Byte_Object;
    public static TypeCombinations Byte_DBNull;
    public static TypeCombinations Byte_Boolean;
    public static TypeCombinations Byte_Char;
    public static TypeCombinations Byte_SByte;
    public static TypeCombinations Byte_Byte;
    public static TypeCombinations Byte_Int16;
    public static TypeCombinations Byte_UInt16;
    public static TypeCombinations Byte_Int32;
    public static TypeCombinations Byte_UInt32;
    public static TypeCombinations Byte_Int64;
    public static TypeCombinations Byte_UInt64;
    public static TypeCombinations Byte_Single;
    public static TypeCombinations Byte_Double;
    public static TypeCombinations Byte_Decimal;
    public static TypeCombinations Byte_DateTime;
    public static TypeCombinations Byte_String;
    public static TypeCombinations Int16_Empty;
    public static TypeCombinations Int16_Object;
    public static TypeCombinations Int16_DBNull;
    public static TypeCombinations Int16_Boolean;
    public static TypeCombinations Int16_Char;
    public static TypeCombinations Int16_SByte;
    public static TypeCombinations Int16_Byte;
    public static TypeCombinations Int16_Int16;
    public static TypeCombinations Int16_UInt16;
    public static TypeCombinations Int16_Int32;
    public static TypeCombinations Int16_UInt32;
    public static TypeCombinations Int16_Int64;
    public static TypeCombinations Int16_UInt64;
    public static TypeCombinations Int16_Single;
    public static TypeCombinations Int16_Double;
    public static TypeCombinations Int16_Decimal;
    public static TypeCombinations Int16_DateTime;
    public static TypeCombinations Int16_String;
    public static TypeCombinations UInt16_Empty;
    public static TypeCombinations UInt16_Object;
    public static TypeCombinations UInt16_DBNull;
    public static TypeCombinations UInt16_Boolean;
    public static TypeCombinations UInt16_Char;
    public static TypeCombinations UInt16_SByte;
    public static TypeCombinations UInt16_Byte;
    public static TypeCombinations UInt16_Int16;
    public static TypeCombinations UInt16_UInt16;
    public static TypeCombinations UInt16_Int32;
    public static TypeCombinations UInt16_UInt32;
    public static TypeCombinations UInt16_Int64;
    public static TypeCombinations UInt16_UInt64;
    public static TypeCombinations UInt16_Single;
    public static TypeCombinations UInt16_Double;
    public static TypeCombinations UInt16_Decimal;
    public static TypeCombinations UInt16_DateTime;
    public static TypeCombinations UInt16_String;
    public static TypeCombinations Int32_Empty;
    public static TypeCombinations Int32_Object;
    public static TypeCombinations Int32_DBNull;
    public static TypeCombinations Int32_Boolean;
    public static TypeCombinations Int32_Char;
    public static TypeCombinations Int32_SByte;
    public static TypeCombinations Int32_Byte;
    public static TypeCombinations Int32_Int16;
    public static TypeCombinations Int32_UInt16;
    public static TypeCombinations Int32_Int32;
    public static TypeCombinations Int32_UInt32;
    public static TypeCombinations Int32_Int64;
    public static TypeCombinations Int32_UInt64;
    public static TypeCombinations Int32_Single;
    public static TypeCombinations Int32_Double;
    public static TypeCombinations Int32_Decimal;
    public static TypeCombinations Int32_DateTime;
    public static TypeCombinations Int32_String;
    public static TypeCombinations UInt32_Empty;
    public static TypeCombinations UInt32_Object;
    public static TypeCombinations UInt32_DBNull;
    public static TypeCombinations UInt32_Boolean;
    public static TypeCombinations UInt32_Char;
    public static TypeCombinations UInt32_SByte;
    public static TypeCombinations UInt32_Byte;
    public static TypeCombinations UInt32_Int16;
    public static TypeCombinations UInt32_UInt16;
    public static TypeCombinations UInt32_Int32;
    public static TypeCombinations UInt32_UInt32;
    public static TypeCombinations UInt32_Int64;
    public static TypeCombinations UInt32_UInt64;
    public static TypeCombinations UInt32_Single;
    public static TypeCombinations UInt32_Double;
    public static TypeCombinations UInt32_Decimal;
    public static TypeCombinations UInt32_DateTime;
    public static TypeCombinations UInt32_String;
    public static TypeCombinations Int64_Empty;
    public static TypeCombinations Int64_Object;
    public static TypeCombinations Int64_DBNull;
    public static TypeCombinations Int64_Boolean;
    public static TypeCombinations Int64_Char;
    public static TypeCombinations Int64_SByte;
    public static TypeCombinations Int64_Byte;
    public static TypeCombinations Int64_Int16;
    public static TypeCombinations Int64_UInt16;
    public static TypeCombinations Int64_Int32;
    public static TypeCombinations Int64_UInt32;
    public static TypeCombinations Int64_Int64;
    public static TypeCombinations Int64_UInt64;
    public static TypeCombinations Int64_Single;
    public static TypeCombinations Int64_Double;
    public static TypeCombinations Int64_Decimal;
    public static TypeCombinations Int64_DateTime;
    public static TypeCombinations Int64_String;
    public static TypeCombinations UInt64_Empty;
    public static TypeCombinations UInt64_Object;
    public static TypeCombinations UInt64_DBNull;
    public static TypeCombinations UInt64_Boolean;
    public static TypeCombinations UInt64_Char;
    public static TypeCombinations UInt64_SByte;
    public static TypeCombinations UInt64_Byte;
    public static TypeCombinations UInt64_Int16;
    public static TypeCombinations UInt64_UInt16;
    public static TypeCombinations UInt64_Int32;
    public static TypeCombinations UInt64_UInt32;
    public static TypeCombinations UInt64_Int64;
    public static TypeCombinations UInt64_UInt64;
    public static TypeCombinations UInt64_Single;
    public static TypeCombinations UInt64_Double;
    public static TypeCombinations UInt64_Decimal;
    public static TypeCombinations UInt64_DateTime;
    public static TypeCombinations UInt64_String;
    public static TypeCombinations Single_Empty;
    public static TypeCombinations Single_Object;
    public static TypeCombinations Single_DBNull;
    public static TypeCombinations Single_Boolean;
    public static TypeCombinations Single_Char;
    public static TypeCombinations Single_SByte;
    public static TypeCombinations Single_Byte;
    public static TypeCombinations Single_Int16;
    public static TypeCombinations Single_UInt16;
    public static TypeCombinations Single_Int32;
    public static TypeCombinations Single_UInt32;
    public static TypeCombinations Single_Int64;
    public static TypeCombinations Single_UInt64;
    public static TypeCombinations Single_Single;
    public static TypeCombinations Single_Double;
    public static TypeCombinations Single_Decimal;
    public static TypeCombinations Single_DateTime;
    public static TypeCombinations Single_String;
    public static TypeCombinations Double_Empty;
    public static TypeCombinations Double_Object;
    public static TypeCombinations Double_DBNull;
    public static TypeCombinations Double_Boolean;
    public static TypeCombinations Double_Char;
    public static TypeCombinations Double_SByte;
    public static TypeCombinations Double_Byte;
    public static TypeCombinations Double_Int16;
    public static TypeCombinations Double_UInt16;
    public static TypeCombinations Double_Int32;
    public static TypeCombinations Double_UInt32;
    public static TypeCombinations Double_Int64;
    public static TypeCombinations Double_UInt64;
    public static TypeCombinations Double_Single;
    public static TypeCombinations Double_Double;
    public static TypeCombinations Double_Decimal;
    public static TypeCombinations Double_DateTime;
    public static TypeCombinations Double_String;
    public static TypeCombinations Decimal_Empty;
    public static TypeCombinations Decimal_Object;
    public static TypeCombinations Decimal_DBNull;
    public static TypeCombinations Decimal_Boolean;
    public static TypeCombinations Decimal_Char;
    public static TypeCombinations Decimal_SByte;
    public static TypeCombinations Decimal_Byte;
    public static TypeCombinations Decimal_Int16;
    public static TypeCombinations Decimal_UInt16;
    public static TypeCombinations Decimal_Int32;
    public static TypeCombinations Decimal_UInt32;
    public static TypeCombinations Decimal_Int64;
    public static TypeCombinations Decimal_UInt64;
    public static TypeCombinations Decimal_Single;
    public static TypeCombinations Decimal_Double;
    public static TypeCombinations Decimal_Decimal;
    public static TypeCombinations Decimal_DateTime;
    public static TypeCombinations Decimal_String;
    public static TypeCombinations DateTime_Empty;
    public static TypeCombinations DateTime_Object;
    public static TypeCombinations DateTime_DBNull;
    public static TypeCombinations DateTime_Boolean;
    public static TypeCombinations DateTime_Char;
    public static TypeCombinations DateTime_SByte;
    public static TypeCombinations DateTime_Byte;
    public static TypeCombinations DateTime_Int16;
    public static TypeCombinations DateTime_UInt16;
    public static TypeCombinations DateTime_Int32;
    public static TypeCombinations DateTime_UInt32;
    public static TypeCombinations DateTime_Int64;
    public static TypeCombinations DateTime_UInt64;
    public static TypeCombinations DateTime_Single;
    public static TypeCombinations DateTime_Double;
    public static TypeCombinations DateTime_Decimal;
    public static TypeCombinations DateTime_DateTime;
    public static TypeCombinations DateTime_String;
    public static TypeCombinations String_Empty;
    public static TypeCombinations String_Object;
    public static TypeCombinations String_DBNull;
    public static TypeCombinations String_Boolean;
    public static TypeCombinations String_Char;
    public static TypeCombinations String_SByte;
    public static TypeCombinations String_Byte;
    public static TypeCombinations String_Int16;
    public static TypeCombinations String_UInt16;
    public static TypeCombinations String_Int32;
    public static TypeCombinations String_UInt32;
    public static TypeCombinations String_Int64;
    public static TypeCombinations String_UInt64;
    public static TypeCombinations String_Single;
    public static TypeCombinations String_Double;
    public static TypeCombinations String_Decimal;
    public static TypeCombinations String_DateTime;
    public static TypeCombinations String_String;
    public int value__;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.Utils : object {
    private static ResourceManager m_Resources;
    internal static long Array_GetLength(Array array);
    internal static long Array_GetLength(Array array, int dimension);
    internal static void Array_Copy(Array sourceArray, long sourceIndex, Array destinationArray, long destinationIndex, long length);
    public static Array CopyArray(Array arySrc, Array aryDest);
    public static string MethodToString(MethodBase Method);
    public static object SetCultureInfo(CultureInfo Culture);
    public static void ThrowException(int hr);
    public static string GetResourceString(string ResourceKey, String[] Args);
    internal static string GetResourceString(string Name);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.Versioned : object {
    [MonoLimitationAttribute("CallType.Let options is not supported.")]
public static object CallByName(object Instance, string MethodName, CallType UseCallType, Object[] Arguments);
    public static bool IsNumeric(object Expression);
    public static string SystemTypeName(string VbName);
    public static string TypeName(object Expression);
    public static string VbTypeName(string SystemName);
}
[StandardModuleAttribute]
public class Microsoft.VisualBasic.Constants : object {
    public static string vbCrLf;
    public static string vbNewLine;
    public static string vbCr;
    public static string vbLf;
    public static string vbBack;
    public static string vbFormFeed;
    public static string vbTab;
    public static string vbVerticalTab;
    public static string vbNullChar;
    public static string vbNullString;
    public static DateFormat vbGeneralDate;
    public static DateFormat vbLongDate;
    public static DateFormat vbLongTime;
    public static DateFormat vbShortDate;
    public static DateFormat vbShortTime;
    public static FirstDayOfWeek vbFriday;
    public static FirstDayOfWeek vbMonday;
    public static FirstDayOfWeek vbThursday;
    public static FirstDayOfWeek vbTuesday;
    public static FirstDayOfWeek vbWednesday;
    public static FirstDayOfWeek vbSaturday;
    public static FirstDayOfWeek vbSunday;
    public static FirstDayOfWeek vbUseSystemDayOfWeek;
    public static CallType vbMethod;
    public static CallType vbGet;
    public static CallType vbLet;
    public static CallType vbSet;
    public static CompareMethod vbBinaryCompare;
    public static CompareMethod vbTextCompare;
    public static FirstWeekOfYear vbUseSystem;
    public static FirstWeekOfYear vbFirstJan1;
    public static FirstWeekOfYear vbFirstFourDays;
    public static FirstWeekOfYear vbFirstFullWeek;
    public static VbStrConv vbUpperCase;
    public static VbStrConv vbLowerCase;
    public static VbStrConv vbProperCase;
    public static VbStrConv vbWide;
    public static VbStrConv vbNarrow;
    public static VbStrConv vbKatakana;
    public static VbStrConv vbHiragana;
    public static VbStrConv vbSimplifiedChinese;
    public static VbStrConv vbTraditionalChinese;
    public static VbStrConv vbLinguisticCasing;
    public static VariantType vbEmpty;
    public static VariantType vbNull;
    public static VariantType vbInteger;
    public static VariantType vbLong;
    public static VariantType vbSingle;
    public static VariantType vbDouble;
    public static VariantType vbCurrency;
    public static VariantType vbDate;
    public static VariantType vbString;
    public static VariantType vbObject;
    public static int vbObjectError;
    public static VariantType vbBoolean;
    public static VariantType vbVariant;
    public static VariantType vbDecimal;
    public static VariantType vbByte;
    public static VariantType vbUserDefinedType;
    public static VariantType vbArray;
    public static FileAttribute vbArchive;
    public static FileAttribute vbDirectory;
    public static FileAttribute vbHidden;
    public static FileAttribute vbNormal;
    public static FileAttribute vbReadOnly;
    public static FileAttribute vbSystem;
    public static FileAttribute vbVolume;
    public static MsgBoxResult vbAbort;
    public static MsgBoxResult vbIgnore;
    public static MsgBoxResult vbOK;
    public static MsgBoxResult vbCancel;
    public static MsgBoxResult vbRetry;
    public static MsgBoxResult vbYes;
    public static MsgBoxResult vbNo;
    public static MsgBoxStyle vbAbortRetryIgnore;
    public static MsgBoxStyle vbOKOnly;
    public static MsgBoxStyle vbOKCancel;
    public static MsgBoxStyle vbYesNoCancel;
    public static MsgBoxStyle vbYesNo;
    public static MsgBoxStyle vbRetryCancel;
    public static MsgBoxStyle vbCritical;
    public static MsgBoxStyle vbQuestion;
    public static MsgBoxStyle vbExclamation;
    public static MsgBoxStyle vbInformation;
    public static MsgBoxStyle vbDefaultButton1;
    public static MsgBoxStyle vbDefaultButton2;
    public static MsgBoxStyle vbDefaultButton3;
    public static MsgBoxStyle vbApplicationModal;
    public static MsgBoxStyle vbSystemModal;
    public static MsgBoxStyle vbMsgBoxHelp;
    public static MsgBoxStyle vbMsgBoxRight;
    public static MsgBoxStyle vbMsgBoxRtlReading;
    public static MsgBoxStyle vbMsgBoxSetForeground;
    public static TriState vbFalse;
    public static TriState vbTrue;
    public static TriState vbUseDefault;
    public static AppWinStyle vbHide;
    public static AppWinStyle vbNormalFocus;
    public static AppWinStyle vbMinimizedFocus;
    public static AppWinStyle vbMaximizedFocus;
    public static AppWinStyle vbNormalNoFocus;
    public static AppWinStyle vbMinimizedNoFocus;
}
public class Microsoft.VisualBasic.ControlChars : object {
    public static char Back;
    public static char Cr;
    public static string CrLf;
    public static char FormFeed;
    public static char Lf;
    public static string NewLine;
    public static char NullChar;
    public static char Tab;
    public static char VerticalTab;
    public static char Quote;
}
[StandardModuleAttribute]
public class Microsoft.VisualBasic.Conversion : object {
    public static string ErrorToString();
    public static string ErrorToString(int ErrorNumber);
    public static decimal Fix(decimal Number);
    public static double Fix(double Number);
    public static int Fix(int Number);
    public static long Fix(long Number);
    public static object Fix(object Number);
    public static short Fix(short Number);
    public static float Fix(float Number);
    public static string Hex(byte Number);
    public static string Hex(int Number);
    public static string Hex(long Number);
    public static string Hex(short Number);
    public static string Hex(object Number);
    private static object SizeDown(long num);
    public static decimal Int(decimal Number);
    public static double Int(double Number);
    public static int Int(int Number);
    public static long Int(long Number);
    public static object Int(object Number);
    public static short Int(short Number);
    public static float Int(float Number);
    public static string Oct(byte Number);
    public static string Oct(int Number);
    public static string Oct(long Number);
    public static string Oct(object Number);
    public static string Oct(short Number);
    public static string Str(object Number);
    public static int Val(char Expression);
    public static double Val(object Expression);
    public static double Val(string InputStr);
    [CLSCompliantAttribute("False")]
public static string Hex(sbyte Number);
    [CLSCompliantAttribute("False")]
public static string Hex(ushort Number);
    [CLSCompliantAttribute("False")]
public static string Hex(UInt32 Number);
    [CLSCompliantAttribute("False")]
public static string Hex(ulong Number);
    [CLSCompliantAttribute("False")]
public static string Oct(sbyte Number);
    [CLSCompliantAttribute("False")]
public static string Oct(ushort Number);
    [CLSCompliantAttribute("False")]
public static string Oct(UInt32 Number);
    [CLSCompliantAttribute("False")]
public static string Oct(ulong Number);
}
[StandardModuleAttribute]
public class Microsoft.VisualBasic.DateAndTime : object {
    public static string DateString { get; public set; }
    public static DateTime Today { get; public set; }
    public static double Timer { get; }
    public static DateTime Now { get; }
    public static DateTime TimeOfDay { get; public set; }
    public static string TimeString { get; public set; }
    public static string get_DateString();
    public static void set_DateString(string Value);
    public static DateTime get_Today();
    public static void set_Today(DateTime Value);
    public static double get_Timer();
    public static DateTime get_Now();
    public static DateTime get_TimeOfDay();
    public static void set_TimeOfDay(DateTime Value);
    public static string get_TimeString();
    public static void set_TimeString(string Value);
    public static DateTime DateAdd(DateInterval Interval, double Number, DateTime DateValue);
    internal static DayOfWeek GetDayRule(FirstDayOfWeek StartOfWeek, DayOfWeek DayRule);
    internal static CalendarWeekRule GetWeekRule(FirstWeekOfYear StartOfYear, CalendarWeekRule WeekRule);
    public static long DateDiff(DateInterval Interval, DateTime Date1, DateTime Date2, FirstDayOfWeek DayOfWeek, FirstWeekOfYear WeekOfYear);
    internal static int ConvertWeekDay(DayOfWeek Day, int Offset);
    public static int DatePart(DateInterval Interval, DateTime DateValue, FirstDayOfWeek FirstDayOfWeekValue, FirstWeekOfYear FirstWeekOfYearValue);
    internal static DateInterval DateIntervalFromString(string Interval);
    public static DateTime DateAdd(string Interval, double Number, object DateValue);
    public static long DateDiff(string Interval, object Date1, object Date2, FirstDayOfWeek DayOfWeek, FirstWeekOfYear WeekOfYear);
    public static int DatePart(string Interval, object DateValue, FirstDayOfWeek DayOfWeek, FirstWeekOfYear WeekOfYear);
    public static DateTime DateSerial(int Year, int Month, int Day);
    public static DateTime TimeSerial(int Hour, int Minute, int Second);
    public static DateTime DateValue(string StringDate);
    public static DateTime TimeValue(string StringTime);
    public static int Year(DateTime DateValue);
    public static int Month(DateTime DateValue);
    public static int Day(DateTime DateValue);
    public static int Hour(DateTime TimeValue);
    public static int Minute(DateTime TimeValue);
    public static int Second(DateTime TimeValue);
    public static int Weekday(DateTime DateValue, FirstDayOfWeek DayOfWeek);
    public static string MonthName(int Month, bool Abbreviate);
    public static string WeekdayName(int Weekday, bool Abbreviate, FirstDayOfWeek FirstDayOfWeekValue);
}
public enum Microsoft.VisualBasic.DateFormat : Enum {
    public static DateFormat GeneralDate;
    public static DateFormat LongDate;
    public static DateFormat ShortDate;
    public static DateFormat LongTime;
    public static DateFormat ShortTime;
    public int value__;
}
public enum Microsoft.VisualBasic.DateInterval : Enum {
    public static DateInterval Year;
    public static DateInterval Quarter;
    public static DateInterval Month;
    public static DateInterval DayOfYear;
    public static DateInterval Day;
    public static DateInterval WeekOfYear;
    public static DateInterval Weekday;
    public static DateInterval Hour;
    public static DateInterval Minute;
    public static DateInterval Second;
    public int value__;
}
public class Microsoft.VisualBasic.Devices.Audio : object {
    private SoundPlayer m_Player;
    public void Play(string location);
    public void Play(string location, AudioPlayMode playMode);
    public void Play(Stream stream, AudioPlayMode playMode);
    public void Play(Byte[] data, AudioPlayMode playMode);
    public void PlaySystemSound(SystemSound systemSound);
    public void Stop();
    private void Play(SoundPlayer player, AudioPlayMode mode);
}
public class Microsoft.VisualBasic.Devices.Clock : object {
    public DateTime GmtTime { get; }
    public DateTime LocalTime { get; }
    public int TickCount { get; }
    public DateTime get_GmtTime();
    public DateTime get_LocalTime();
    public int get_TickCount();
}
public class Microsoft.VisualBasic.Devices.Computer : ServerComputer {
    public Audio Audio { get; }
    public ClipboardProxy Clipboard { get; }
    public Keyboard Keyboard { get; }
    public Mouse Mouse { get; }
    public Ports Ports { get; }
    public Screen Screen { get; }
    public Audio get_Audio();
    public ClipboardProxy get_Clipboard();
    public Keyboard get_Keyboard();
    public Mouse get_Mouse();
    public Ports get_Ports();
    public Screen get_Screen();
}
[DebuggerTypeProxyAttribute("Microsoft.VisualBasic.Devices.ComputerInfo/ComputerInfoDebugView")]
public class Microsoft.VisualBasic.Devices.ComputerInfo : object {
    [CLSCompliantAttribute("False")]
public ulong AvailablePhysicalMemory { get; }
    [CLSCompliantAttribute("False")]
public ulong AvailableVirtualMemory { get; }
    public CultureInfo InstalledUICulture { get; }
    public string OSFullName { get; }
    public string OSPlatform { get; }
    public string OSVersion { get; }
    [CLSCompliantAttribute("False")]
public ulong TotalPhysicalMemory { get; }
    [CLSCompliantAttribute("False")]
public ulong TotalVirtualMemory { get; }
    private bool IsOnWindows();
    private static bool GlobalMemoryStatusEx(MEMORYSTATUSEX& buf);
    private MEMORYSTATUSEX GetMemoryInfo();
    public ulong get_AvailablePhysicalMemory();
    public ulong get_AvailableVirtualMemory();
    public CultureInfo get_InstalledUICulture();
    public string get_OSFullName();
    public string get_OSPlatform();
    public string get_OSVersion();
    public ulong get_TotalPhysicalMemory();
    public ulong get_TotalVirtualMemory();
}
public class Microsoft.VisualBasic.Devices.Keyboard : object {
    public bool AltKeyDown { get; }
    public bool CapsLock { get; }
    public bool CtrlKeyDown { get; }
    public bool NumLock { get; }
    public bool ScrollLock { get; }
    public bool ShiftKeyDown { get; }
    public void SendKeys(string keys);
    public void SendKeys(string keys, bool wait);
    public bool get_AltKeyDown();
    public bool get_CapsLock();
    public bool get_CtrlKeyDown();
    public bool get_NumLock();
    public bool get_ScrollLock();
    public bool get_ShiftKeyDown();
}
public class Microsoft.VisualBasic.Devices.Mouse : object {
    public bool ButtonsSwapped { get; }
    public bool WheelExists { get; }
    public int WheelScrollLines { get; }
    public bool get_ButtonsSwapped();
    public bool get_WheelExists();
    public int get_WheelScrollLines();
}
internal class Microsoft.VisualBasic.Devices.MyProgressDialog : Form {
    [AccessedThroughPropertyAttribute("m_Client")]
private WebClient _m_Client;
    [AccessedThroughPropertyAttribute("cmdCancel")]
private Button _cmdCancel;
    [AccessedThroughPropertyAttribute("barProgress")]
private ProgressBar _barProgress;
    [AccessedThroughPropertyAttribute("lblStatus")]
private Label _lblStatus;
    private IContainer components;
    private WebClient m_Client { get; private set; }
    internal Button cmdCancel { get; internal set; }
    internal ProgressBar barProgress { get; internal set; }
    internal Label lblStatus { get; internal set; }
    public MyProgressDialog(WebClient Client, string Status);
    protected virtual void Dispose(bool disposing);
    [DebuggerStepThroughAttribute]
private void InitializeComponent();
    private void m_Client_DownloadFileCompleted(object sender, AsyncCompletedEventArgs e);
    private void m_Client_DownloadProgressChanged(object sender, DownloadProgressChangedEventArgs e);
    private void m_Client_UploadFileCompleted(object sender, UploadFileCompletedEventArgs e);
    private void m_Client_UploadProgressChanged(object sender, UploadProgressChangedEventArgs e);
    private void cmdCancel_Click(object sender, EventArgs e);
    private virtual WebClient get_m_Client();
    private virtual void set_m_Client(WebClient WithEventsValue);
    internal virtual Button get_cmdCancel();
    internal virtual void set_cmdCancel(Button WithEventsValue);
    internal virtual ProgressBar get_barProgress();
    internal virtual void set_barProgress(ProgressBar WithEventsValue);
    internal virtual Label get_lblStatus();
    internal virtual void set_lblStatus(Label WithEventsValue);
}
internal class Microsoft.VisualBasic.Devices.MyWebClient : WebClient {
    public int Timeout;
    public MyWebClient(int Timeout);
    protected virtual WebRequest GetWebRequest(Uri address);
}
public class Microsoft.VisualBasic.Devices.Network : object {
    private static int DEFAULTTIMEOUT;
    private NetworkAvailableEventHandler NetworkAvailabilityChangedEvent;
    public bool IsAvailable { get; }
    public void DownloadFile(string address, string destinationFileName);
    public void DownloadFile(Uri address, string destinationFileName);
    public void DownloadFile(string address, string destinationFileName, string userName, string password);
    public void DownloadFile(Uri address, string destinationFileName, string userName, string password);
    public void DownloadFile(Uri address, string destinationFileName, ICredentials networkCredentials, bool showUI, int connectionTimeout, bool overwrite);
    public void DownloadFile(string address, string destinationFileName, string userName, string password, bool showUI, int connectionTimeout, bool overwrite);
    public void DownloadFile(Uri address, string destinationFileName, ICredentials networkCredentials, bool showUI, int connectionTimeout, bool overwrite, UICancelOption onUserCancel);
    public void DownloadFile(Uri address, string destinationFileName, string userName, string password, bool showUI, int connectionTimeout, bool overwrite);
    public void DownloadFile(string address, string destinationFileName, string userName, string password, bool showUI, int connectionTimeout, bool overwrite, UICancelOption onUserCancel);
    public void DownloadFile(Uri address, string destinationFileName, string userName, string password, bool showUI, int connectionTimeout, bool overwrite, UICancelOption onUserCancel);
    [MonoNotSupportedAttribute("")]
public bool Ping(string hostNameOrAddress);
    [MonoNotSupportedAttribute("")]
public bool Ping(Uri address);
    [MonoNotSupportedAttribute("")]
public bool Ping(string hostNameOrAddress, int timeout);
    [MonoNotSupportedAttribute("")]
public bool Ping(Uri address, int timeout);
    public void UploadFile(string sourceFileName, string address);
    public void UploadFile(string sourceFileName, Uri address);
    public void UploadFile(string sourceFileName, string address, string userName, string password);
    public void UploadFile(string sourceFileName, Uri address, string userName, string password);
    public void UploadFile(string sourceFileName, Uri address, ICredentials networkCredentials, bool showUI, int connectionTimeout);
    public void UploadFile(string sourceFileName, string address, string userName, string password, bool showUI, int connectionTimeout);
    public void UploadFile(string sourceFileName, Uri address, ICredentials networkCredentials, bool showUI, int connectionTimeout, UICancelOption onUserCancel);
    public void UploadFile(string sourceFileName, Uri address, string userName, string password, bool showUI, int connectionTimeout);
    public void UploadFile(string sourceFileName, string address, string userName, string password, bool showUI, int connectionTimeout, UICancelOption onUserCancel);
    public void UploadFile(string sourceFileName, Uri address, string userName, string password, bool showUI, int connectionTimeout, UICancelOption onUserCancel);
    public bool get_IsAvailable();
    public void add_NetworkAvailabilityChanged(NetworkAvailableEventHandler obj);
    public void remove_NetworkAvailabilityChanged(NetworkAvailableEventHandler obj);
}
public class Microsoft.VisualBasic.Devices.NetworkAvailableEventArgs : EventArgs {
    private bool m_NetworkAvailable;
    public bool IsNetworkAvailable { get; }
    public NetworkAvailableEventArgs(bool networkAvailable);
    public bool get_IsNetworkAvailable();
}
[EditorBrowsableAttribute("2")]
public class Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler : MulticastDelegate {
    public NetworkAvailableEventHandler(object TargetObject, IntPtr TargetMethod);
    public virtual void Invoke(object sender, NetworkAvailableEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NetworkAvailableEventArgs e, AsyncCallback DelegateCallback, object DelegateAsyncState);
    public virtual void EndInvoke(IAsyncResult DelegateAsyncResult);
}
public class Microsoft.VisualBasic.Devices.Ports : object {
    public ReadOnlyCollection`1<string> SerialPortNames { get; }
    public SerialPort OpenSerialPort(string portName);
    public SerialPort OpenSerialPort(string portName, int baudRate);
    public SerialPort OpenSerialPort(string portName, int baudRate, Parity parity);
    public SerialPort OpenSerialPort(string portName, int baudRate, Parity parity, int dataBits);
    public SerialPort OpenSerialPort(string portName, int baudRate, Parity parity, int dataBits, StopBits stopBits);
    public ReadOnlyCollection`1<string> get_SerialPortNames();
}
public class Microsoft.VisualBasic.Devices.ServerComputer : object {
    public Clock Clock { get; }
    public FileSystemProxy FileSystem { get; }
    public ComputerInfo Info { get; }
    public string Name { get; }
    public Network Network { get; }
    public RegistryProxy Registry { get; }
    public Clock get_Clock();
    public FileSystemProxy get_FileSystem();
    public ComputerInfo get_Info();
    public string get_Name();
    public Network get_Network();
    public RegistryProxy get_Registry();
}
public enum Microsoft.VisualBasic.DueDate : Enum {
    public static DueDate EndOfPeriod;
    public static DueDate BegOfPeriod;
    public int value__;
}
public class Microsoft.VisualBasic.ErrObject : object {
    private int m_Number;
    private Exception m_Exception;
    private string m_Description;
    private int m_HelpContext;
    private string m_HelpFile;
    private string m_Source;
    private bool IsMappedExceptionToNumber;
    public string Description { get; public set; }
    public int Erl { get; }
    public int HelpContext { get; public set; }
    public string HelpFile { get; public set; }
    public int LastDllError { get; }
    public int Number { get; public set; }
    public string Source { get; public set; }
    [ReliabilityContractAttribute("3", "2")]
public void Clear();
    public void Raise(int Number, object Source, object Description, object HelpFile, object HelpContext);
    public Exception GetException();
    public string get_Description();
    public void set_Description(string Value);
    public int get_Erl();
    public int get_HelpContext();
    public void set_HelpContext(int Value);
    public string get_HelpFile();
    public void set_HelpFile(string Value);
    public int get_LastDllError();
    public int get_Number();
    public void set_Number(int Value);
    public string get_Source();
    public void set_Source(string Value);
    internal void SetException(Exception ex);
    internal void SetExceptionFromNumber(int Number, string Message);
    internal static Exception GetExceptionFromNumber(int Number, string Message);
    private int GetNumberFromException(Exception ex);
}
[FlagsAttribute]
public enum Microsoft.VisualBasic.FileAttribute : Enum {
    public static FileAttribute Normal;
    public static FileAttribute ReadOnly;
    public static FileAttribute Hidden;
    public static FileAttribute System;
    public static FileAttribute Volume;
    public static FileAttribute Directory;
    public static FileAttribute Archive;
    public int value__;
}
internal class Microsoft.VisualBasic.FileData : object {
    public int FileNumber;
    public string FileName;
    public OpenMode Mode;
    public OpenAccess Access;
    public OpenShare Share;
    public int RecordLength;
    public int RecordWidth;
    public FileStream Stream;
    public StreamReader Reader;
    public StreamWriter Writer;
    public BinaryWriter BinaryWriter;
    public BinaryReader BinaryReader;
    private bool IsEOF { get; }
    public FileData(int FileNumber, string FileName, OpenMode Mode, OpenAccess Access, OpenShare Share, int RecordLength);
    public void CreateStream();
    public void Close();
    public void VerifyFileModes(OpenMode[] Modes);
    public void VerifyWriteAccess();
    public void VerifyReadAccessWeirdly();
    public void VerifyReadAccess();
    public bool EOF();
    public void FileGet(Boolean& Value, long RecordNumber);
    public void FileGet(Byte& Value, long RecordNumber);
    public void FileGet(Char& Value, long RecordNumber);
    public void FileGet(DateTime& Value, long RecordNumber);
    public void FileGet(Decimal& Value, long RecordNumber);
    public void FileGet(Double& Value, long RecordNumber);
    public void FileGet(Int32& Value, long RecordNumber);
    public void FileGet(Int64& Value, long RecordNumber);
    public void FileGet(Int16& Value, long RecordNumber);
    public void FileGet(Single& Value, long RecordNumber);
    private void FileGetBinary(String& Value, long RecordNumber, bool StringIsFixedLength, bool ReadDescriptor);
    private void FileGetRandom(String& Value, long RecordNumber, bool StringIsFixedLength);
    public void FileGet(String& Value, long RecordNumber, bool StringIsFixedLength);
    public void FileGet(Array& Value, long RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength);
    public void FileGet(ValueType& Value, long RecordNumber);
    public void FileGetObject(Object& Value, long RecordNumber);
    private void FileGetObjectBinary(Object& Value, long RecordNumber);
    private void FileGetObjectRandom(Object& Value, long RecordNumber);
    private void FileGetObjectVariable(FileVariableType Type, Object& Value);
    private void FileGetObjectArray(FileVariableType Type, Object& Value);
    public void FilePutObjectVariable(object Value, FileVariableType Type, bool PutDescriptor, bool StringIsFixedLength);
    public void FilePut(bool Value, long RecordNumber);
    public void FilePut(byte Value, long RecordNumber);
    public void FilePut(char Value, long RecordNumber);
    public void FilePut(DateTime Value, long RecordNumber);
    public void FilePut(decimal Value, long RecordNumber);
    public void FilePut(double Value, long RecordNumber);
    public void FilePut(int Value, long RecordNumber);
    public void FilePut(long Value, long RecordNumber);
    public void FilePut(short Value, long RecordNumber);
    public void FilePut(float Value, long RecordNumber);
    public void FilePut(string Value, long RecordNumber, bool StringIsFixedLength);
    public void FilePut(Array Value, long RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength);
    private void FilePutDynamicArray(Array Value, bool StringIsFixedLength);
    private void FilePutArrayDescriptor(Array Value);
    private FileVariableType GetCOMTypeForValue(object value);
    private void FilePutStaticArray(Array Value, bool StringIsFixedLength);
    public void FilePut(ValueType Value, long RecordNumber);
    private void FilePut(object Value, bool StringIsFixedLength);
    public void FilePutObject(object Value, long RecordNumber);
    public void FileWidth(int RecordWidth);
    private bool get_IsEOF();
    private string ReadStringRecord();
    private object ParseRecord(string record);
    private string ReadRecord();
    public void Input(Boolean& Value);
    public void Input(Byte& Value);
    public void Input(Char& Value);
    public void Input(DateTime& Value);
    public void Input(Decimal& Value);
    public void Input(Double& Value);
    public void Input(Int32& Value);
    public void Input(Int64& Value);
    public void Input(Object& Value);
    public void Input(Int16& Value);
    public void Input(Single& Value);
    public void Input(String& Value);
    public string InputString(int CharCount);
    public string LineInput();
    public long Loc();
    public void Lock();
    public void Lock(long Record);
    public void Lock(long FromRecord, long ToRecord);
    public long LOF();
    public void Print(Object[] Output);
    public void PrintLine(Object[] Output);
    public long Seek();
    public void Seek(long Position);
    public void Unlock();
    public void Unlock(long Record);
    public void Unlock(long FromRecord, long ToRecord);
    public void Write(Object[] Output);
    private void WriteInternal(string EndValue, Object[] Output);
    public void WriteLine(Object[] Output);
}
public enum Microsoft.VisualBasic.FileIO.DeleteDirectoryOption : Enum {
    public static DeleteDirectoryOption DeleteAllContents;
    public static DeleteDirectoryOption ThrowIfDirectoryNonEmpty;
    public int value__;
}
public enum Microsoft.VisualBasic.FileIO.FieldType : Enum {
    public static FieldType Delimited;
    public static FieldType FixedWidth;
    public int value__;
}
public class Microsoft.VisualBasic.FileIO.FileSystem : object {
    public static string CurrentDirectory { get; public set; }
    public static ReadOnlyCollection`1<DriveInfo> Drives { get; }
    private static string StripTrailingSlash(string dir);
    public static string CombinePath(string baseDirectory, string relativePath);
    public static void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName);
    public static void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, UIOption showUI);
    public static void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite);
    public static void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, UIOption showUI, UICancelOption onUserCancel);
    public static void CopyFile(string sourceFileName, string destinationFileName);
    public static void CopyFile(string sourceFileName, string destinationFileName, UIOption showUI);
    public static void CopyFile(string sourceFileName, string destinationFileName, bool overwrite);
    public static void CopyFile(string sourceFileName, string destinationFileName, UIOption showUI, UICancelOption onUserCancel);
    public static void CreateDirectory(string directory);
    public static void DeleteDirectory(string directory, DeleteDirectoryOption onDirectoryNotEmpty);
    public static void DeleteDirectory(string directory, UIOption showUI, RecycleOption recycle);
    public static void DeleteDirectory(string directory, UIOption showUI, RecycleOption recycle, UICancelOption onUserCancel);
    private static void DeleteDirectory(string directory, UIOption showUIOption, RecycleOption recycle, UICancelOption onUserCancel, DeleteDirectoryOption onDirectoryNotEmpty, bool showUI);
    public static void DeleteFile(string file);
    public static void DeleteFile(string file, UIOption showUI, RecycleOption recycle);
    public static void DeleteFile(string file, UIOption showUI, RecycleOption recycle, UICancelOption onUserCancel);
    private static void DeleteFile(string file, UIOption showUIOption, RecycleOption recycle, UICancelOption onUserCancel, bool showUI);
    public static bool DirectoryExists(string directory);
    public static bool FileExists(string file);
    public static ReadOnlyCollection`1<string> FindInFiles(string directory, string containsText, bool ignoreCase, SearchOption searchType);
    public static ReadOnlyCollection`1<string> FindInFiles(string directory, string containsText, bool ignoreCase, SearchOption searchType, String[] fileWildcards);
    private static void FindInFiles2(string directory, string containsText, bool ignoreCase, SearchOption searchType, String[] fileWildcards, List`1<string> result);
    private static void AddUniqueToList(List`1<string> list, String[] items);
    private static bool FileContainsText(string file, string text, bool ignoreCase);
    public static ReadOnlyCollection`1<string> GetDirectories(string directory);
    public static ReadOnlyCollection`1<string> GetDirectories(string directory, SearchOption searchType, String[] wildcards);
    private static void FindInDirectory2(string directory, SearchOption searchType, String[] fileWildcards, List`1<string> result);
    public static DirectoryInfo GetDirectoryInfo(string directory);
    public static DriveInfo GetDriveInfo(string drive);
    public static FileInfo GetFileInfo(string file);
    public static ReadOnlyCollection`1<string> GetFiles(string directory);
    public static ReadOnlyCollection`1<string> GetFiles(string directory, SearchOption searchType, String[] wildcards);
    public static string GetName(string path);
    public static string GetParentPath(string path);
    public static string GetTempFileName();
    public static void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName);
    public static void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, UIOption showUI);
    public static void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite);
    public static void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, UIOption showUI, UICancelOption onUserCancel);
    private static void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, UIOption showUIOption, UICancelOption onUserCancel, bool showUI, bool overwrite);
    public static void MoveFile(string sourceFileName, string destinationFileName);
    public static void MoveFile(string sourceFileName, string destinationFileName, UIOption showUI);
    public static void MoveFile(string sourceFileName, string destinationFileName, bool overwrite);
    public static void MoveFile(string sourceFileName, string destinationFileName, UIOption showUI, UICancelOption onUserCancel);
    private static void MoveFile(string sourceFileName, string destinationFileName, UIOption showUIOption, UICancelOption onUserCancel, bool showUI, bool overwrite);
    public static TextFieldParser OpenTextFieldParser(string file);
    public static TextFieldParser OpenTextFieldParser(string file, Int32[] fieldWidths);
    public static TextFieldParser OpenTextFieldParser(string file, String[] delimiters);
    public static StreamReader OpenTextFileReader(string file);
    public static StreamReader OpenTextFileReader(string file, Encoding encoding);
    public static StreamWriter OpenTextFileWriter(string file, bool append);
    public static StreamWriter OpenTextFileWriter(string file, bool append, Encoding encoding);
    public static Byte[] ReadAllBytes(string file);
    public static string ReadAllText(string file);
    public static string ReadAllText(string file, Encoding encoding);
    public static void RenameDirectory(string directory, string newName);
    public static void RenameFile(string file, string newName);
    public static void WriteAllBytes(string file, Byte[] data, bool append);
    public static void WriteAllText(string file, string text, bool append);
    public static void WriteAllText(string file, string text, bool append, Encoding encoding);
    public static string get_CurrentDirectory();
    public static void set_CurrentDirectory(string value);
    public static ReadOnlyCollection`1<DriveInfo> get_Drives();
}
internal class Microsoft.VisualBasic.FileIO.FileSystemOperation : object {
    private string m_Source;
    private string m_Destination;
    private bool m_Overwrite;
    private DeleteDirectoryOption m_DirectoryNotEmpty;
    private bool m_ShowUI;
    private UIOption m_ShowUIOption;
    private UICancelOption m_UICancelOption;
    private RecycleOption m_Recycle;
    private FileSystemOperationUI m_UI;
    private List`1<Info> m_Sources;
    private long m_TotalSize;
    private bool m_Cancelled;
    private Dictionary`2<string, string> m_Errors;
    private bool $STATIC$DoOverwrite$84046$overWriteAll;
    private bool $STATIC$DoOverwrite$84054$overWriteNone;
    private bool OnSameVolume { get; }
    public FileSystemOperation(string Source, string Destination, UIOption ShowUIOption, UICancelOption UICancelOption, bool ShowUI, bool overwrite);
    public FileSystemOperation(string Source, string Destination, UIOption ShowUIOption, UICancelOption UICancelOption);
    public FileSystemOperation(string Source, string Destination, bool Overwrite);
    public FileSystemOperation(string Directory, UIOption ShowUIOption, RecycleOption Recycle, UICancelOption UICancelOption, DeleteDirectoryOption onDirectoryNotEmpty, bool ShowUI);
    public FileSystemOperation(string Directory, UIOption ShowUIOption, RecycleOption Recycle, UICancelOption UICancelOption, bool ShowUI);
    public void Cancel();
    public void ExecuteFileCopy();
    public void ExecuteFileMove();
    public void ExecuteDirCopy();
    public void ExecuteDirMove();
    public void ExecuteDirDelete();
    public void ExecuteFileDelete();
    private string GetDestination(string Source);
    private void Move();
    private void Copy();
    private void CopyItem(Info Info, string Destination, int Counter, Int64& Size);
    private void DeleteItem(Info Info, int Counter, bool DoUpdate);
    private bool IsDirectory(string Path);
    private void CopyFile(string Source, string Destination, Int64& Size);
    private void Delete();
    private void Recycle(string Source);
    private void LoadSources(bool Recursive, bool SizeMatters);
    private void LoadSources(string Source, bool Recursive, bool SizeMatters, Int64& DirSize);
    private void Init(string Title);
    private void UpdateUI(long SizeDone);
    private void UpdateUI(string SourceDirectory, string DestinationDirectory, string File, int ItemsDone, long SizeDone);
    private void CleanUp();
    private void CopyDir(string SourceDir, string DestinationDir);
    private bool DoOverwrite(string Source, string Destination);
    private bool get_OnSameVolume();
    private static bool IsOnSameVolume(string Source, string Destination);
}
internal class Microsoft.VisualBasic.FileIO.FileSystemOperationUI : Form {
    private DateTime m_LastUpdate;
    private DateTime m_Start;
    private bool m_Started;
    private FileSystemOperation m_Operation;
    private string m_SourceDirectory;
    private string m_DestinationDirectory;
    private string m_File;
    private IContainer components;
    [AccessedThroughPropertyAttribute("barProgress")]
private ProgressBar _barProgress;
    [AccessedThroughPropertyAttribute("cmdCancel")]
private Button _cmdCancel;
    [AccessedThroughPropertyAttribute("lblFile")]
private Label _lblFile;
    [AccessedThroughPropertyAttribute("lblDirs")]
private Label _lblDirs;
    [AccessedThroughPropertyAttribute("lblTimeLeft")]
private Label _lblTimeLeft;
    internal ProgressBar barProgress { get; internal set; }
    internal Button cmdCancel { get; internal set; }
    internal Label lblFile { get; internal set; }
    internal Label lblDirs { get; internal set; }
    internal Label lblTimeLeft { get; internal set; }
    public FileSystemOperationUI(FileSystemOperation Operation);
    public void UpdateInfo(double PercentDone);
    private void UpdateInfoInternal(double PercentDone);
    public void UpdateInfo(string SourceDirectory, string DestinationDirectory, string File, double PercentDone);
    private void cmdCancel_Click(object sender, EventArgs e);
    [DebuggerNonUserCodeAttribute]
protected virtual void Dispose(bool disposing);
    [DebuggerStepThroughAttribute]
private void InitializeComponent();
    internal virtual ProgressBar get_barProgress();
    internal virtual void set_barProgress(ProgressBar WithEventsValue);
    internal virtual Button get_cmdCancel();
    internal virtual void set_cmdCancel(Button WithEventsValue);
    internal virtual Label get_lblFile();
    internal virtual void set_lblFile(Label WithEventsValue);
    internal virtual Label get_lblDirs();
    internal virtual void set_lblDirs(Label WithEventsValue);
    internal virtual Label get_lblTimeLeft();
    internal virtual void set_lblTimeLeft(Label WithEventsValue);
}
internal class Microsoft.VisualBasic.FileIO.FileSystemOperationUIQuestion : Form {
    private Answer m_Answer;
    private IContainer components;
    [AccessedThroughPropertyAttribute("lblTitle")]
private Label _lblTitle;
    [AccessedThroughPropertyAttribute("lblText1")]
private Label _lblText1;
    [AccessedThroughPropertyAttribute("lblText2")]
private Label _lblText2;
    [AccessedThroughPropertyAttribute("lblDateA")]
private Label _lblDateA;
    [AccessedThroughPropertyAttribute("lblSizeA")]
private Label _lblSizeA;
    [AccessedThroughPropertyAttribute("lblDateB")]
private Label _lblDateB;
    [AccessedThroughPropertyAttribute("lblSizeB")]
private Label _lblSizeB;
    [AccessedThroughPropertyAttribute("cmdYes")]
private Button _cmdYes;
    [AccessedThroughPropertyAttribute("cmdYesToAll")]
private Button _cmdYesToAll;
    [AccessedThroughPropertyAttribute("cmdNo")]
private Button _cmdNo;
    [AccessedThroughPropertyAttribute("cmdCancel")]
private Button _cmdCancel;
    [AccessedThroughPropertyAttribute("iconA")]
private PictureBox _iconA;
    [AccessedThroughPropertyAttribute("iconB")]
private PictureBox _iconB;
    internal Label lblTitle { get; internal set; }
    internal Label lblText1 { get; internal set; }
    internal Label lblText2 { get; internal set; }
    internal Label lblDateA { get; internal set; }
    internal Label lblSizeA { get; internal set; }
    internal Label lblDateB { get; internal set; }
    internal Label lblSizeB { get; internal set; }
    internal Button cmdYes { get; internal set; }
    internal Button cmdYesToAll { get; internal set; }
    internal Button cmdNo { get; internal set; }
    internal Button cmdCancel { get; internal set; }
    internal PictureBox iconA { get; internal set; }
    internal PictureBox iconB { get; internal set; }
    public Answer ShowDialog();
    private void cmdCancel_Click(object sender, EventArgs e);
    private void cmdNo_Click(object sender, EventArgs e);
    private void cmdYesToAll_Click(object sender, EventArgs e);
    private void cmdYes_Click(object sender, EventArgs e);
    [DebuggerNonUserCodeAttribute]
protected virtual void Dispose(bool disposing);
    [DebuggerStepThroughAttribute]
private void InitializeComponent();
    internal virtual Label get_lblTitle();
    internal virtual void set_lblTitle(Label WithEventsValue);
    internal virtual Label get_lblText1();
    internal virtual void set_lblText1(Label WithEventsValue);
    internal virtual Label get_lblText2();
    internal virtual void set_lblText2(Label WithEventsValue);
    internal virtual Label get_lblDateA();
    internal virtual void set_lblDateA(Label WithEventsValue);
    internal virtual Label get_lblSizeA();
    internal virtual void set_lblSizeA(Label WithEventsValue);
    internal virtual Label get_lblDateB();
    internal virtual void set_lblDateB(Label WithEventsValue);
    internal virtual Label get_lblSizeB();
    internal virtual void set_lblSizeB(Label WithEventsValue);
    internal virtual Button get_cmdYes();
    internal virtual void set_cmdYes(Button WithEventsValue);
    internal virtual Button get_cmdYesToAll();
    internal virtual void set_cmdYesToAll(Button WithEventsValue);
    internal virtual Button get_cmdNo();
    internal virtual void set_cmdNo(Button WithEventsValue);
    internal virtual Button get_cmdCancel();
    internal virtual void set_cmdCancel(Button WithEventsValue);
    internal virtual PictureBox get_iconA();
    internal virtual void set_iconA(PictureBox WithEventsValue);
    internal virtual PictureBox get_iconB();
    internal virtual void set_iconB(PictureBox WithEventsValue);
}
public class Microsoft.VisualBasic.FileIO.MalformedLineException : Exception {
    private long m_LineNumber;
    private bool m_AnyMessage;
    [EditorBrowsableAttribute("0")]
public long LineNumber { get; public set; }
    public MalformedLineException(string message);
    [EditorBrowsableAttribute("2")]
protected MalformedLineException(SerializationInfo info, StreamingContext context);
    public MalformedLineException(string message, Exception innerException);
    public MalformedLineException(string message, long lineNumber);
    public MalformedLineException(string message, long lineNumber, Exception innerException);
    [EditorBrowsableAttribute("2")]
[SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual string ToString();
    public long get_LineNumber();
    public void set_LineNumber(long value);
}
public enum Microsoft.VisualBasic.FileIO.RecycleOption : Enum {
    public static RecycleOption DeletePermanently;
    public static RecycleOption SendToRecycleBin;
    public int value__;
}
public enum Microsoft.VisualBasic.FileIO.SearchOption : Enum {
    public static SearchOption SearchAllSubDirectories;
    public static SearchOption SearchTopLevelOnly;
    public int value__;
}
public class Microsoft.VisualBasic.FileIO.SpecialDirectories : object {
    public static string AllUsersApplicationData { get; }
    public static string CurrentUserApplicationData { get; }
    public static string Desktop { get; }
    public static string MyDocuments { get; }
    public static string MyMusic { get; }
    public static string MyPictures { get; }
    public static string ProgramFiles { get; }
    public static string Programs { get; }
    public static string Temp { get; }
    private static string RemovePathSeparator(string Path);
    public static string get_AllUsersApplicationData();
    public static string get_CurrentUserApplicationData();
    public static string get_Desktop();
    public static string get_MyDocuments();
    public static string get_MyMusic();
    public static string get_MyPictures();
    public static string get_ProgramFiles();
    public static string get_Programs();
    public static string get_Temp();
}
public class Microsoft.VisualBasic.FileIO.TextFieldParser : object {
    private TextReader m_Reader;
    private bool m_LeaveOpen;
    private String[] m_CommentTokens;
    private String[] m_Delimiters;
    private string m_ErrorLine;
    private long m_ErrorLineNumber;
    private Int32[] m_FieldWidths;
    private bool m_HasFieldsEnclosedInQuotes;
    private long m_LineNumber;
    private FieldType m_TextFieldType;
    private bool m_TrimWhiteSpace;
    private Queue`1<string> m_PeekedLine;
    private int m_MinFieldLength;
    private bool disposedValue;
    [EditorBrowsableAttribute("2")]
public String[] CommentTokens { get; public set; }
    public String[] Delimiters { get; public set; }
    public bool EndOfData { get; }
    public string ErrorLine { get; }
    public long ErrorLineNumber { get; }
    public Int32[] FieldWidths { get; public set; }
    [EditorBrowsableAttribute("2")]
public bool HasFieldsEnclosedInQuotes { get; public set; }
    [EditorBrowsableAttribute("2")]
public long LineNumber { get; }
    public FieldType TextFieldType { get; public set; }
    public bool TrimWhiteSpace { get; public set; }
    public TextFieldParser(Stream stream);
    public TextFieldParser(TextReader reader);
    public TextFieldParser(string path);
    public TextFieldParser(Stream stream, Encoding defaultEncoding);
    public TextFieldParser(string path, Encoding defaultEncoding);
    public TextFieldParser(Stream stream, Encoding defaultEncoding, bool detectEncoding);
    public TextFieldParser(string path, Encoding defaultEncoding, bool detectEncoding);
    public TextFieldParser(Stream stream, Encoding defaultEncoding, bool detectEncoding, bool leaveOpen);
    private String[] GetDelimitedFields();
    private string GetNextField(string line, int startIndex, Int32& nextIndex);
    private void RaiseDelimiterEx(string Line);
    private void RaiseFieldWidthEx(string Line);
    private String[] GetWidthFields();
    private bool IsCommentLine(string Line);
    private string GetNextRealLine();
    private string GetNextLine();
    public void Close();
    protected virtual void Finalize();
    public string PeekChars(int numberOfChars);
    public String[] ReadFields();
    [EditorBrowsableAttribute("2")]
public string ReadLine();
    [EditorBrowsableAttribute("2")]
public string ReadToEnd();
    public void SetDelimiters(String[] delimiters);
    public void SetFieldWidths(Int32[] fieldWidths);
    public String[] get_CommentTokens();
    public void set_CommentTokens(String[] value);
    public String[] get_Delimiters();
    public void set_Delimiters(String[] value);
    public bool get_EndOfData();
    public string get_ErrorLine();
    public long get_ErrorLineNumber();
    public Int32[] get_FieldWidths();
    public void set_FieldWidths(Int32[] value);
    public bool get_HasFieldsEnclosedInQuotes();
    public void set_HasFieldsEnclosedInQuotes(bool value);
    public long get_LineNumber();
    public FieldType get_TextFieldType();
    public void set_TextFieldType(FieldType value);
    public bool get_TrimWhiteSpace();
    public void set_TrimWhiteSpace(bool value);
    protected virtual void Dispose(bool disposing);
    public sealed virtual override void Dispose();
}
public enum Microsoft.VisualBasic.FileIO.UICancelOption : Enum {
    public static UICancelOption DoNothing;
    public static UICancelOption ThrowException;
    public int value__;
}
public enum Microsoft.VisualBasic.FileIO.UIOption : Enum {
    public static UIOption AllDialogs;
    public static UIOption OnlyErrorDialogs;
    public int value__;
}
[StandardModuleAttribute]
public class Microsoft.VisualBasic.FileSystem : object {
    private static int m_Index;
    private static FileSystemInfo[] m_FileSystemInfos;
    private static Hashtable m_OpenFiles;
    public static void ChDir(string Path);
    public static void ChDrive(char Drive);
    public static void ChDrive(string Drive);
    public static string CurDir();
    public static string CurDir(char Drive);
    public static string Dir();
    public static string Dir(string Pathname, FileAttribute Attributes);
    private static FileData FindFileData(int FileNumber);
    public static bool EOF(int FileNumber);
    public static OpenMode FileAttr(int FileNumber);
    public static void FileClose(Int32[] FileNumbers);
    public static void FileCopy(string Source, string Destination);
    public static DateTime FileDateTime(string PathName);
    public static void FileGet(int FileNumber, Boolean& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Byte& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Char& Value, long RecordNumber);
    public static void FileGet(int FileNumber, DateTime& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Decimal& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Double& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Int32& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Int64& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Int16& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Single& Value, long RecordNumber);
    public static void FileGet(int FileNumber, String& Value, long RecordNumber, bool StringIsFixedLength);
    public static void FileGet(int FileNumber, Array& Value, long RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength);
    public static void FileGet(int FileNumber, ValueType& Value, long RecordNumber);
    public static void FileGetObject(int FileNumber, Object& Value, long RecordNumber);
    public static long FileLen(string PathName);
    public static void FileOpen(int FileNumber, string FileName, OpenMode Mode, OpenAccess Access, OpenShare Share, int RecordLength);
    public static void FilePut(int FileNumber, bool Value, long RecordNumber);
    public static void FilePut(int FileNumber, byte Value, long RecordNumber);
    public static void FilePut(int FileNumber, char Value, long RecordNumber);
    public static void FilePut(int FileNumber, DateTime Value, long RecordNumber);
    public static void FilePut(int FileNumber, decimal Value, long RecordNumber);
    public static void FilePut(int FileNumber, double Value, long RecordNumber);
    public static void FilePut(int FileNumber, int Value, long RecordNumber);
    public static void FilePut(int FileNumber, long Value, long RecordNumber);
    public static void FilePut(int FileNumber, short Value, long RecordNumber);
    public static void FilePut(int FileNumber, float Value, long RecordNumber);
    public static void FilePut(int FileNumber, string Value, long RecordNumber, bool StringIsFixedLength);
    public static void FilePut(int FileNumber, Array Value, long RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength);
    public static void FilePut(int FileNumber, ValueType Value, long RecordNumber);
    [ObsoleteAttribute("This member has been deprectated. Try FilePutObject.")]
public static void FilePut(object FileNumber, object Value, object RecordNumber);
    public static void FilePutObject(int FileNumber, object Value, long RecordNumber);
    public static void FileWidth(int FileNumber, int RecordWidth);
    public static int FreeFile();
    public static FileAttribute GetAttr(string PathName);
    public static void Input(int FileNumber, Boolean& Value);
    public static void Input(int FileNumber, Byte& Value);
    public static void Input(int FileNumber, Char& Value);
    public static void Input(int FileNumber, DateTime& Value);
    public static void Input(int FileNumber, Decimal& Value);
    public static void Input(int FileNumber, Double& Value);
    public static void Input(int FileNumber, Int32& Value);
    public static void Input(int FileNumber, Int64& Value);
    public static void Input(int FileNumber, Object& Value);
    public static void Input(int FileNumber, Int16& Value);
    public static void Input(int FileNumber, Single& Value);
    public static void Input(int FileNumber, String& Value);
    public static string InputString(int FileNumber, int CharCount);
    public static void Kill(string PathName);
    public static string LineInput(int FileNumber);
    public static long Loc(int FileNumber);
    public static void Lock(int FileNumber);
    public static void Lock(int FileNumber, long Record);
    public static void Lock(int FileNumber, long FromRecord, long ToRecord);
    public static long LOF(int FileNumber);
    public static void MkDir(string Path);
    public static void Print(int FileNumber, Object[] Output);
    public static void PrintLine(int FileNumber, Object[] Output);
    public static void Rename(string OldPath, string NewPath);
    public static void Reset();
    public static void RmDir(string Path);
    public static long Seek(int FileNumber);
    public static void Seek(int FileNumber, long Position);
    public static void SetAttr(string PathName, FileAttribute Attributes);
    public static SpcInfo SPC(short Count);
    public static TabInfo TAB();
    public static TabInfo TAB(short Column);
    public static void Unlock(int FileNumber);
    public static void Unlock(int FileNumber, long Record);
    public static void Unlock(int FileNumber, long FromRecord, long ToRecord);
    public static void Write(int FileNumber, Object[] Output);
    public static void WriteLine(int FileNumber, Object[] Output);
}
internal enum Microsoft.VisualBasic.FileVariableType : Enum {
    public static FileVariableType Empty;
    public static FileVariableType DBNull;
    public static FileVariableType Short;
    public static FileVariableType Integer;
    public static FileVariableType Single;
    public static FileVariableType Double;
    public static FileVariableType Currency;
    public static FileVariableType Date;
    public static FileVariableType String;
    public static FileVariableType Error;
    public static FileVariableType Variant;
    public static FileVariableType Decimal;
    public static FileVariableType Boolean;
    public static FileVariableType Byte;
    public static FileVariableType Char;
    public static FileVariableType Long;
    public static FileVariableType Structure;
    public static FileVariableType Array;
    public static FileVariableType Binary;
    public static FileVariableType Chapter;
    public static FileVariableType ActualChar;
    public static FileVariableType DBDate;
    public static FileVariableType DBTime;
    public static FileVariableType DBTimeStamp;
    public static FileVariableType FileTime;
    public static FileVariableType Guid;
    public static FileVariableType IDispatch;
    public static FileVariableType IUnknown;
    public static FileVariableType LongVarBinary;
    public static FileVariableType LongVarChar;
    public static FileVariableType LongVarWChar;
    public static FileVariableType Numeric;
    public static FileVariableType PropVariant;
    public static FileVariableType TinyInt;
    public static FileVariableType UnsignedBigInt;
    public static FileVariableType UnsignedInt;
    public static FileVariableType UserDefind;
    public static FileVariableType VarBinary;
    public static FileVariableType VarChar;
    public static FileVariableType VarNumeric;
    public static FileVariableType VarWChar;
    public static FileVariableType WChar;
    public int value__;
}
[StandardModuleAttribute]
public class Microsoft.VisualBasic.Financial : object {
    public static double DDB(double Cost, double Salvage, double Life, double Period, double Factor);
    public static double SLN(double Cost, double Salvage, double Life);
    public static double SYD(double Cost, double Salvage, double Life, double Period);
    public static double FV(double Rate, double NPer, double Pmt, double PV, DueDate Due);
    public static double Rate(double NPer, double Pmt, double PV, double FV, DueDate Due, double Guess);
    public static double IRR(Double[]& ValueArray, double Guess);
    public static double MIRR(Double[]& ValueArray, double FinanceRate, double ReinvestRate);
    private static double PNPV(Double[] ValueArray, double Rate);
    private static double NNPV(Double[] ValueArray, double Rate);
    public static double NPer(double Rate, double Pmt, double PV, double FV, DueDate Due);
    public static double IPmt(double Rate, double Per, double NPer, double PV, double FV, DueDate Due);
    public static double Pmt(double Rate, double NPer, double PV, double FV, DueDate Due);
    public static double PPmt(double Rate, double Per, double NPer, double PV, double FV, DueDate Due);
    public static double NPV(double Rate, Double[]& ValueArray);
    public static double PV(double Rate, double NPer, double Pmt, double FV, DueDate Due);
}
public enum Microsoft.VisualBasic.FirstDayOfWeek : Enum {
    public static FirstDayOfWeek System;
    public static FirstDayOfWeek Sunday;
    public static FirstDayOfWeek Monday;
    public static FirstDayOfWeek Tuesday;
    public static FirstDayOfWeek Wednesday;
    public static FirstDayOfWeek Thursday;
    public static FirstDayOfWeek Friday;
    public static FirstDayOfWeek Saturday;
    public int value__;
}
public enum Microsoft.VisualBasic.FirstWeekOfYear : Enum {
    public static FirstWeekOfYear System;
    public static FirstWeekOfYear Jan1;
    public static FirstWeekOfYear FirstFourDays;
    public static FirstWeekOfYear FirstFullWeek;
    public int value__;
}
[StandardModuleAttribute]
public class Microsoft.VisualBasic.Globals : object {
    public static string ScriptEngine { get; }
    public static int ScriptEngineBuildVersion { get; }
    public static int ScriptEngineMajorVersion { get; }
    public static int ScriptEngineMinorVersion { get; }
    public static string get_ScriptEngine();
    public static int get_ScriptEngineBuildVersion();
    public static int get_ScriptEngineMajorVersion();
    public static int get_ScriptEngineMinorVersion();
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualBasic.HideModuleNameAttribute : Attribute {
}
[StandardModuleAttribute]
public class Microsoft.VisualBasic.Information : object {
    [EditorBrowsableAttribute("1")]
public static int Erl();
    public static ErrObject Err();
    public static bool IsArray(object VarName);
    public static bool IsDate(object Expression);
    public static bool IsDBNull(object Expression);
    public static bool IsError(object Expression);
    public static bool IsNothing(object Expression);
    public static bool IsNumeric(object Expression);
    public static bool IsReference(object Expression);
    public static int LBound(Array Array, int Rank);
    public static int QBColor(int Color);
    public static int RGB(int Red, int Green, int Blue);
    public static string SystemTypeName(string VbName);
    internal static string VBName(Type tp);
    public static string TypeName(object VarName);
    public static int UBound(Array Array, int Rank);
    public static VariantType VarType(object VarName);
    public static string VbTypeName(string UrtName);
}
[StandardModuleAttribute]
public class Microsoft.VisualBasic.Interaction : object {
    public static void AppActivate(int ProcessId);
    public static void AppActivate(string Title);
    public static void Beep();
    public static object CallByName(object ObjectRef, string ProcName, CallType UseCallType, Object[] Args);
    public static object Choose(double Index, Object[] Choice);
    public static string Command();
    public static object CreateObject(string ProgId, string ServerName);
    public static void DeleteSetting(string AppName, string Section, string Key);
    public static string Environ(int Expression);
    public static string Environ(string Expression);
    [MonoLimitationAttribute("If this function is used the assembly have to be recompiled when you switch platforms.")]
public static String[0...,0...] GetAllSettings(string AppName, string Section);
    public static object GetObject(string PathName, string Class);
    public static string GetSetting(string AppName, string Section, string Key, string Default);
    public static object IIf(bool Expression, object TruePart, object FalsePart);
    public static string InputBox(string Prompt, string Title, string DefaultResponse, int XPos, int YPos);
    public static string Partition(long Number, long Start, long Stop, long Interval);
    public static void SaveSetting(string AppName, string Section, string Key, string Setting);
    public static int Shell(string Pathname, AppWinStyle Style, bool Wait, int Timeout);
    public static object Switch(Object[] VarExpr);
    public static MsgBoxResult MsgBox(object Prompt, MsgBoxStyle Button, object Title);
}
public class Microsoft.VisualBasic.Logging.AspLog : Log {
    public AspLog(string name);
    protected internal virtual void InitializeWithDefaultsSinceNoConfigExists();
}
public enum Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption : Enum {
    public static DiskSpaceExhaustedOption DiscardMessages;
    public static DiskSpaceExhaustedOption ThrowException;
    public int value__;
}
[ComVisibleAttribute("False")]
public class Microsoft.VisualBasic.Logging.FileLogTraceListener : TraceListener {
    private bool m_Append;
    private bool m_AutoFlush;
    private string m_BaseFileName;
    private string m_CustomLocation;
    private string m_Delimiter;
    private DiskSpaceExhaustedOption m_DiskSpaceExhaustedBehaviour;
    private Encoding m_Encoding;
    private bool m_IncludeHostName;
    private LogFileLocation m_Location;
    private LogFileCreationScheduleOption m_LogFileCreationSchedule;
    private long m_MaxFileSize;
    private long m_ReserveDiskSpace;
    private StreamWriter m_Stream;
    private String[] m_SupportedAttributes;
    public bool Append { get; public set; }
    public bool AutoFlush { get; public set; }
    public string BaseFileName { get; public set; }
    public string CustomLocation { get; public set; }
    public string Delimiter { get; public set; }
    public DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior { get; public set; }
    public Encoding Encoding { get; public set; }
    public string FullLogFileName { get; }
    public bool IncludeHostName { get; public set; }
    public LogFileLocation Location { get; public set; }
    public LogFileCreationScheduleOption LogFileCreationSchedule { get; public set; }
    public long MaxFileSize { get; public set; }
    public long ReserveDiskSpace { get; public set; }
    public FileLogTraceListener(string name);
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    protected virtual String[] GetSupportedAttributes();
    public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, object data);
    public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, Object[] data);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string message);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string format, Object[] args);
    public virtual void Write(string message);
    public virtual void WriteLine(string message);
    private bool CheckSpace(int msgSize);
    private StreamWriter GetOpenStream();
    public bool get_Append();
    public void set_Append(bool value);
    public bool get_AutoFlush();
    public void set_AutoFlush(bool value);
    public string get_BaseFileName();
    public void set_BaseFileName(string value);
    public string get_CustomLocation();
    public void set_CustomLocation(string value);
    public string get_Delimiter();
    public void set_Delimiter(string value);
    public DiskSpaceExhaustedOption get_DiskSpaceExhaustedBehavior();
    public void set_DiskSpaceExhaustedBehavior(DiskSpaceExhaustedOption value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public string get_FullLogFileName();
    public bool get_IncludeHostName();
    public void set_IncludeHostName(bool value);
    public LogFileLocation get_Location();
    public void set_Location(LogFileLocation value);
    public LogFileCreationScheduleOption get_LogFileCreationSchedule();
    public void set_LogFileCreationSchedule(LogFileCreationScheduleOption value);
    public long get_MaxFileSize();
    public void set_MaxFileSize(long value);
    public long get_ReserveDiskSpace();
    public void set_ReserveDiskSpace(long value);
}
public class Microsoft.VisualBasic.Logging.Log : object {
    private TraceSource m_Source;
    private static Int32[] m_IDs;
    public FileLogTraceListener DefaultFileLogWriter { get; }
    [EditorBrowsableAttribute("2")]
public TraceSource TraceSource { get; }
    public Log(string name);
    private static Log();
    protected internal virtual void InitializeWithDefaultsSinceNoConfigExists();
    private static int GetIDOfType(TraceEventType severity);
    public void WriteEntry(string message);
    public void WriteEntry(string message, TraceEventType severity);
    public void WriteEntry(string message, TraceEventType severity, int id);
    public void WriteException(Exception ex);
    public void WriteException(Exception ex, TraceEventType severity, string additionalInfo);
    public void WriteException(Exception ex, TraceEventType severity, string additionalInfo, int id);
    public FileLogTraceListener get_DefaultFileLogWriter();
    public TraceSource get_TraceSource();
}
public enum Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption : Enum {
    public static LogFileCreationScheduleOption Daily;
    public static LogFileCreationScheduleOption None;
    public static LogFileCreationScheduleOption Weekly;
    public int value__;
}
public enum Microsoft.VisualBasic.Logging.LogFileLocation : Enum {
    public static LogFileLocation CommonApplicationDirectory;
    public static LogFileLocation Custom;
    public static LogFileLocation ExecutableDirectory;
    public static LogFileLocation LocalUserApplicationDirectory;
    public static LogFileLocation TempDirectory;
    public int value__;
}
public enum Microsoft.VisualBasic.MsgBoxResult : Enum {
    public static MsgBoxResult Ok;
    public static MsgBoxResult Cancel;
    public static MsgBoxResult Abort;
    public static MsgBoxResult Retry;
    public static MsgBoxResult Ignore;
    public static MsgBoxResult Yes;
    public static MsgBoxResult No;
    public int value__;
}
[FlagsAttribute]
public enum Microsoft.VisualBasic.MsgBoxStyle : Enum {
    public static MsgBoxStyle ApplicationModal;
    public static MsgBoxStyle DefaultButton1;
    public static MsgBoxStyle OkOnly;
    public static MsgBoxStyle OkCancel;
    public static MsgBoxStyle AbortRetryIgnore;
    public static MsgBoxStyle YesNoCancel;
    public static MsgBoxStyle YesNo;
    public static MsgBoxStyle RetryCancel;
    public static MsgBoxStyle Critical;
    public static MsgBoxStyle Question;
    public static MsgBoxStyle Exclamation;
    public static MsgBoxStyle Information;
    public static MsgBoxStyle DefaultButton2;
    public static MsgBoxStyle DefaultButton3;
    public static MsgBoxStyle SystemModal;
    public static MsgBoxStyle MsgBoxHelp;
    public static MsgBoxStyle MsgBoxSetForeground;
    public static MsgBoxStyle MsgBoxRight;
    public static MsgBoxStyle MsgBoxRtlReading;
    public int value__;
}
[EditorBrowsableAttribute("2")]
[AttributeUsageAttribute("4")]
public class Microsoft.VisualBasic.MyGroupCollectionAttribute : Attribute {
    private string _typeToCollect;
    private string _createInstanceMethodName;
    private string _disposeInstanceMethodName;
    private string _defaultInstanceAlias;
    public string CreateMethod { get; }
    public string DefaultInstanceAlias { get; }
    public string DisposeMethod { get; }
    public string MyGroupName { get; }
    public MyGroupCollectionAttribute(string typeToCollect, string createInstanceMethodName, string disposeInstanceMethodName, string defaultInstanceAlias);
    public string get_CreateMethod();
    public string get_DefaultInstanceAlias();
    public string get_DisposeMethod();
    public string get_MyGroupName();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.MyServices.ClipboardProxy : object {
    public void Clear();
    public bool ContainsAudio();
    public bool ContainsData(string format);
    public bool ContainsFileDropList();
    public bool ContainsImage();
    public bool ContainsText();
    public bool ContainsText(TextDataFormat format);
    public Stream GetAudioStream();
    public object GetData(string format);
    [EditorBrowsableAttribute("2")]
public IDataObject GetDataObject();
    public StringCollection GetFileDropList();
    public Image GetImage();
    public string GetText();
    public string GetText(TextDataFormat format);
    public void SetAudio(Stream audioStream);
    public void SetAudio(Byte[] audioBytes);
    public void SetData(string format, object data);
    [EditorBrowsableAttribute("2")]
public void SetDataObject(DataObject data);
    public void SetFileDropList(StringCollection filePaths);
    public void SetImage(Image image);
    public void SetText(string text);
    public void SetText(string text, TextDataFormat format);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.MyServices.FileSystemProxy : object {
    public string CurrentDirectory { get; public set; }
    public ReadOnlyCollection`1<DriveInfo> Drives { get; }
    public SpecialDirectoriesProxy SpecialDirectories { get; }
    public string CombinePath(string baseDirectory, string relativePath);
    public void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName);
    public void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, UIOption showUI);
    public void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite);
    public void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, UIOption showUI, UICancelOption onUserCancel);
    public void CopyFile(string sourceFileName, string destinationFileName);
    public void CopyFile(string sourceFileName, string destinationFileName, UIOption showUI);
    public void CopyFile(string sourceFileName, string destinationFileName, bool overwrite);
    public void CopyFile(string sourceFileName, string destinationFileName, UIOption showUI, UICancelOption onUserCancel);
    public void CreateDirectory(string directory);
    public void DeleteDirectory(string directory, DeleteDirectoryOption onDirectoryNotEmpty);
    public void DeleteDirectory(string directory, UIOption showUI, RecycleOption recycle);
    public void DeleteDirectory(string directory, UIOption showUI, RecycleOption recycle, UICancelOption onUserCancel);
    public void DeleteFile(string file);
    public void DeleteFile(string file, UIOption showUI, RecycleOption recycle);
    public void DeleteFile(string file, UIOption showUI, RecycleOption recycle, UICancelOption onUserCancel);
    public bool DirectoryExists(string directory);
    public bool FileExists(string file);
    public ReadOnlyCollection`1<string> FindInFiles(string directory, string containsText, bool ignoreCase, SearchOption searchType);
    public ReadOnlyCollection`1<string> FindInFiles(string directory, string containsText, bool ignoreCase, SearchOption searchType, String[] fileWildcards);
    public ReadOnlyCollection`1<string> GetDirectories(string directory);
    public ReadOnlyCollection`1<string> GetDirectories(string directory, SearchOption searchType, String[] wildcards);
    public DirectoryInfo GetDirectoryInfo(string directory);
    public DriveInfo GetDriveInfo(string drive);
    public FileInfo GetFileInfo(string file);
    public ReadOnlyCollection`1<string> GetFiles(string directory);
    public ReadOnlyCollection`1<string> GetFiles(string directory, SearchOption searchType, String[] wildcards);
    public string GetName(string path);
    public string GetParentPath(string path);
    public string GetTempFileName();
    public void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName);
    public void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, UIOption showUI);
    public void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite);
    public void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, UIOption showUI, UICancelOption onUserCancel);
    public void MoveFile(string sourceFileName, string destinationFileName);
    public void MoveFile(string sourceFileName, string destinationFileName, UIOption showUI);
    public void MoveFile(string sourceFileName, string destinationFileName, bool overwrite);
    public void MoveFile(string sourceFileName, string destinationFileName, UIOption showUI, UICancelOption onUserCancel);
    public TextFieldParser OpenTextFieldParser(string file);
    public TextFieldParser OpenTextFieldParser(string file, Int32[] fieldWidths);
    public TextFieldParser OpenTextFieldParser(string file, String[] delimiters);
    public StreamReader OpenTextFileReader(string file);
    public StreamReader OpenTextFileReader(string file, Encoding encoding);
    public StreamWriter OpenTextFileWriter(string file, bool append);
    public StreamWriter OpenTextFileWriter(string file, bool append, Encoding encoding);
    public Byte[] ReadAllBytes(string file);
    public string ReadAllText(string file);
    public string ReadAllText(string file, Encoding encoding);
    public void RenameDirectory(string directory, string newName);
    public void RenameFile(string file, string newName);
    public void WriteAllBytes(string file, Byte[] data, bool append);
    public void WriteAllText(string file, string text, bool append);
    public void WriteAllText(string file, string text, bool append, Encoding encoding);
    public string get_CurrentDirectory();
    public void set_CurrentDirectory(string value);
    public ReadOnlyCollection`1<DriveInfo> get_Drives();
    public SpecialDirectoriesProxy get_SpecialDirectories();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.MyServices.Internal.ContextValue`1 : object {
    public T Value { get; public set; }
    public T get_Value();
    public void set_Value(T value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.MyServices.RegistryProxy : object {
    public RegistryKey ClassesRoot { get; }
    public RegistryKey CurrentConfig { get; }
    public RegistryKey CurrentUser { get; }
    public RegistryKey DynData { get; }
    public RegistryKey LocalMachine { get; }
    public RegistryKey PerformanceData { get; }
    public RegistryKey Users { get; }
    public object GetValue(string keyName, string valueName, object defaultValue);
    public void SetValue(string keyName, string valueName, object value);
    public void SetValue(string keyName, string valueName, object value, RegistryValueKind valueKind);
    public RegistryKey get_ClassesRoot();
    public RegistryKey get_CurrentConfig();
    public RegistryKey get_CurrentUser();
    public RegistryKey get_DynData();
    public RegistryKey get_LocalMachine();
    public RegistryKey get_PerformanceData();
    public RegistryKey get_Users();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy : object {
    public string AllUsersApplicationData { get; }
    public string CurrentUserApplicationData { get; }
    public string Desktop { get; }
    public string MyDocuments { get; }
    public string MyMusic { get; }
    public string MyPictures { get; }
    public string ProgramFiles { get; }
    public string Programs { get; }
    public string Temp { get; }
    public string get_AllUsersApplicationData();
    public string get_CurrentUserApplicationData();
    public string get_Desktop();
    public string get_MyDocuments();
    public string get_MyMusic();
    public string get_MyPictures();
    public string get_ProgramFiles();
    public string get_Programs();
    public string get_Temp();
}
public enum Microsoft.VisualBasic.OpenAccess : Enum {
    public static OpenAccess Read;
    public static OpenAccess Write;
    public static OpenAccess ReadWrite;
    public static OpenAccess Default;
    public int value__;
}
public enum Microsoft.VisualBasic.OpenMode : Enum {
    public static OpenMode Input;
    public static OpenMode Output;
    public static OpenMode Random;
    public static OpenMode Append;
    public static OpenMode Binary;
    public int value__;
}
public enum Microsoft.VisualBasic.OpenShare : Enum {
    public static OpenShare LockReadWrite;
    public static OpenShare LockWrite;
    public static OpenShare LockRead;
    public static OpenShare Shared;
    public static OpenShare Default;
    public int value__;
}
internal class Microsoft.VisualBasic.OSSpecific.LinuxDriver : OSDriver {
    public virtual void SetDate(DateTime Value);
    public virtual void SetTime(DateTime Value);
    internal static int stime(Int32& t);
}
internal abstract class Microsoft.VisualBasic.OSSpecific.OSDriver : object {
    private static OSDriver m_Driver;
    public static OSDriver Driver { get; }
    public static OSDriver get_Driver();
    public virtual void SetDate(DateTime newDate);
    public virtual void SetTime(DateTime newTime);
    public void ThrowNotImplemented(string Method);
}
internal class Microsoft.VisualBasic.OSSpecific.Win32Driver : OSDriver {
    [SecuritySafeCriticalAttribute]
public virtual void SetDate(DateTime newDate);
    [SecuritySafeCriticalAttribute]
public virtual void SetTime(DateTime newTime);
    public static void GetLocalTime(SystemTime& systime);
    public static int SetLocalTime(SystemTime& systime);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.SpcInfo : ValueType {
    public short Count;
}
[StandardModuleAttribute]
public class Microsoft.VisualBasic.Strings : object {
    private static Hashtable PredefinedNumericFormats;
    private static Hashtable PredefinedDateTimeFormats;
    private static String[] PredefinedNumbersAfterDigitalSign;
    private static Strings();
    public static int Asc(char String);
    public static int AscW(char String);
    public static int Asc(string String);
    public static int AscW(string String);
    public static char Chr(int CharCode);
    public static char ChrW(int CharCode);
    public static String[] Filter(Object[] Source, string Match, bool Include, CompareMethod Compare);
    public static String[] Filter(String[] Source, string Match, bool Include, CompareMethod Compare);
    public static string Format(object Expression, string Style);
    private static string FormatDateTime(object Expression, string Style);
    private static string FormatNumeric(object Expression, string Style);
    public static string FormatCurrency(object Expression, int NumDigitsAfterDecimal, TriState IncludeLeadingDigit, TriState UseParensForNegativeNumbers, TriState GroupDigits);
    private static void FormatCurrency(StringBuilder sb, object Expression, int NumDigitsAfterDecimal, TriState IncludeLeadingDigit, TriState UseParensForNegativeNumbers, TriState GroupDigits);
    public static string FormatDateTime(DateTime Expression, DateFormat NamedFormat);
    public static string FormatNumber(object Expression, int NumDigitsAfterDecimal, TriState IncludeLeadingDigit, TriState UseParensForNegativeNumbers, TriState GroupDigits);
    private static void FormatNumber(StringBuilder sb, object Expression, int NumDigitsAfterDecimal, TriState IncludeLeadingDigit, TriState UseParensForNegativeNumbers, TriState GroupDigits);
    public static string FormatPercent(object Expression, int NumDigitsAfterDecimal, TriState IncludeLeadingDigit, TriState UseParensForNegativeNumbers, TriState GroupDigits);
    private static void FormatPercent(StringBuilder sb, object Expression, int NumDigitsAfterDecimal, TriState IncludeLeadingDigit, TriState UseParensForNegativeNumbers, TriState GroupDigits);
    public static char GetChar(string str, int Index);
    public static int InStr(int Start, string String1, string String2, CompareMethod Compare);
    public static int InStr(string String1, string String2, CompareMethod Compare);
    public static int InStrRev(string StringCheck, string StringMatch, int Start, CompareMethod Compare);
    public static string Join(Object[] SourceArray, string Delimiter);
    public static string Join(String[] SourceArray, string Delimiter);
    public static char LCase(char Value);
    public static string LCase(string Value);
    public static string Left(string str, int Length);
    public static int Len(bool Expression);
    public static int Len(byte Expression);
    public static int Len(char Expression);
    public static int Len(double Expression);
    public static int Len(int Expression);
    public static int Len(long Expression);
    public static int Len(object Expression);
    public static int Len(short Expression);
    public static int Len(float Expression);
    public static int Len(string Expression);
    public static int Len(DateTime Expression);
    public static int Len(decimal Expression);
    private static int GetSize(object Expression);
    public static string LSet(string Source, int Length);
    public static string LTrim(string str);
    public static string Mid(string str, int Start, int Length);
    public static string Mid(string str, int Start);
    public static string Replace(string Expression, string Find, string Replacement, int Start, int Count, CompareMethod Compare);
    private static string Replace(string Expression, string Find, string Replacement, int Start, int Count, bool IgnoreCase);
    public static string Right(string str, int Length);
    public static string RSet(string Source, int Length);
    public static string RTrim(string str);
    public static string Space(int Number);
    public static String[] Split(string Expression, string Delimiter, int Limit, CompareMethod Compare);
    internal static int String_Compare(string strA, string strB, bool ignoreCase);
    internal static int String_Compare(string strA, int indexA, string strB, int indexB, int length, bool ignoreCase);
    public static int StrComp(string String1, string String2, CompareMethod Compare);
    public static string StrConv(string str, VbStrConv Conversion, int LocaleID);
    public static string StrDup(int Number, char Character);
    public static string StrDup(int Number, string Character);
    public static object StrDup(int Number, object Character);
    public static string StrReverse(string Expression);
    public static string Trim(string str);
    public static char UCase(char Value);
    public static string UCase(string Value);
    [CLSCompliantAttribute("False")]
public static int Len(sbyte Expression);
    [CLSCompliantAttribute("False")]
public static int Len(UInt32 Expression);
    [CLSCompliantAttribute("False")]
public static int Len(ulong Expression);
    [CLSCompliantAttribute("False")]
public static int Len(ushort Expression);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.TabInfo : ValueType {
    public short Column;
}
public enum Microsoft.VisualBasic.TriState : Enum {
    public static TriState False;
    public static TriState UseDefault;
    public static TriState True;
    public int value__;
}
public enum Microsoft.VisualBasic.VariantType : Enum {
    public static VariantType Array;
    public static VariantType Empty;
    public static VariantType Null;
    public static VariantType Short;
    public static VariantType Integer;
    public static VariantType Single;
    public static VariantType Double;
    public static VariantType Currency;
    public static VariantType Date;
    public static VariantType String;
    public static VariantType Object;
    public static VariantType Error;
    public static VariantType Boolean;
    public static VariantType Variant;
    public static VariantType DataObject;
    public static VariantType Decimal;
    public static VariantType Byte;
    public static VariantType Char;
    public static VariantType Long;
    public static VariantType UserDefinedType;
    public int value__;
}
[AttributeUsageAttribute("256")]
public class Microsoft.VisualBasic.VBFixedArrayAttribute : Attribute {
    private int m_UpperBound1;
    private int m_UpperBound2;
    public Int32[] Bounds { get; }
    public int Length { get; }
    public VBFixedArrayAttribute(int UpperBound1);
    public VBFixedArrayAttribute(int UpperBound1, int UpperBound2);
    public Int32[] get_Bounds();
    public int get_Length();
}
[AttributeUsageAttribute("256")]
public class Microsoft.VisualBasic.VBFixedStringAttribute : Attribute {
    private int m_Length;
    public int Length { get; }
    public VBFixedStringAttribute(int Length);
    public int get_Length();
}
[StandardModuleAttribute]
public class Microsoft.VisualBasic.VBMath : object {
    private static Random m_rnd;
    private static float m_last;
    private static VBMath();
    public static float Rnd();
    public static float Rnd(float Number);
    public static void Randomize();
    public static void Randomize(double Number);
}
[FlagsAttribute]
public enum Microsoft.VisualBasic.VbStrConv : Enum {
    public static VbStrConv None;
    public static VbStrConv LinguisticCasing;
    public static VbStrConv Uppercase;
    public static VbStrConv Lowercase;
    public static VbStrConv ProperCase;
    public static VbStrConv Wide;
    public static VbStrConv Narrow;
    public static VbStrConv Katakana;
    public static VbStrConv Hiragana;
    public static VbStrConv SimplifiedChinese;
    public static VbStrConv TraditionalChinese;
    public int value__;
}
[AttributeUsageAttribute("32767")]
internal class System.MonoDocumentationNoteAttribute : MonoTODOAttribute {
    public MonoDocumentationNoteAttribute(string comment);
}
[AttributeUsageAttribute("32767")]
internal class System.MonoExtensionAttribute : MonoTODOAttribute {
    public MonoExtensionAttribute(string comment);
}
[AttributeUsageAttribute("32767")]
internal class System.MonoInternalNoteAttribute : MonoTODOAttribute {
    public MonoInternalNoteAttribute(string comment);
}
[AttributeUsageAttribute("32767")]
internal class System.MonoLimitationAttribute : MonoTODOAttribute {
    public MonoLimitationAttribute(string comment);
}
[AttributeUsageAttribute("32767")]
internal class System.MonoNotSupportedAttribute : MonoTODOAttribute {
    public MonoNotSupportedAttribute(string comment);
}
[AttributeUsageAttribute("32767")]
internal class System.MonoTODOAttribute : Attribute {
    private string _comment;
    public string Comment { get; }
    public MonoTODOAttribute(string comment);
    public string get_Comment();
}
internal enum VBErrors : Enum {
    public static VBErrors ERR3_This_Error_number_is_obsolete_and_no_longer_used;
    public static VBErrors ERR5_Invalid_procedure_call;
    public static VBErrors ERR6_Overflow;
    public static VBErrors ERR7_Out_of_memory;
    public static VBErrors ERR9_Subscript_out_of_range;
    public static VBErrors ERR10_This_array_is_fixed_or_temporarily_locked;
    public static VBErrors ERR11_Division_by_zero;
    public static VBErrors ERR13_Type_mismatch;
    public static VBErrors ERR14_Out_of_string_space;
    public static VBErrors ERR16_Expression_too_complex;
    public static VBErrors ERR17_Can_t_perform_requested_operation;
    public static VBErrors ERR18_User_interrupt_occurred;
    public static VBErrors ERR20_Resume_without_error;
    public static VBErrors ERR28_Out_of_stack_space;
    public static VBErrors ERR35_Sub_Function_or_Property_not_defined;
    public static VBErrors ERR47_Too_many_DLL_application_clients;
    public static VBErrors ERR48_Error_in_loading_DLL;
    public static VBErrors ERR49_Bad_DLL_calling_convention;
    public static VBErrors ERR51_Internal_error;
    public static VBErrors ERR52_Bad_file_name_or_number;
    public static VBErrors ERR53_File_not_found;
    public static VBErrors ERR54_Bad_file_mode;
    public static VBErrors ERR55_File_already_open;
    public static VBErrors ERR57_Device_IO_error;
    public static VBErrors ERR58_File_already_exists;
    public static VBErrors ERR59_Bad_record_length;
    public static VBErrors ERR61_Disk_full;
    public static VBErrors ERR62_Input_past_end_of_file;
    public static VBErrors ERR63_Bad_record_number;
    public static VBErrors ERR67_Too_many_files;
    public static VBErrors ERR68_Device_unavailable;
    public static VBErrors ERR70_Permission_denied;
    public static VBErrors ERR71_Disk_not_ready;
    public static VBErrors ERR74_Can_t_rename_with_different_drive;
    public static VBErrors ERR75_Path_File_access_error;
    public static VBErrors ERR76_Path_not_found;
    public static VBErrors ERR91_Object_variable_or_With_block_variable_not_set;
    public static VBErrors ERR92_For_loop_not_initialized;
    public static VBErrors ERR93_Invalid_pattern_string;
    public static VBErrors ERR94_Invalid_use_of_Null;
    public static VBErrors ERR95_Application_defined_or_object_defined_error;
    public static VBErrors ERR97_Can_t_call_Friend_procedure_on_an_object_that_is_not_an_instance_of_the_defining_class;
    public static VBErrors ERR98_A_property_or_method_call_cannot_include_a_reference_to_a_private_object_either_as_an_argument_or_as_a_return_value;
    public static VBErrors ERR298_System_DLL_could_not_be_loaded;
    public static VBErrors ERR320_Can_t_use_character_device_names_in_specified_file_names;
    public static VBErrors ERR321_Invalid_file_format;
    public static VBErrors ERR322_Cant_create_necessary_temporary_file;
    public static VBErrors ERR325_Invalid_format_in_resource_file;
    public static VBErrors ERR327_Data_value_named_not_found;
    public static VBErrors ERR328_Illegal_parameter_cant_write_arrays;
    public static VBErrors ERR335_Could_not_access_system_registry;
    public static VBErrors ERR336_Component_not_correctly_registered;
    public static VBErrors ERR337_Component_not_found;
    public static VBErrors ERR338_Component_did_not_run_correctly;
    public static VBErrors ERR360_Object_already_loaded;
    public static VBErrors ERR361_Can_t_load_or_unload_this_object;
    public static VBErrors ERR363_Control_specified_not_found;
    public static VBErrors ERR364_Object_was_unloaded;
    public static VBErrors ERR365_Unable_to_unload_within_this_context;
    public static VBErrors ERR368_The_specified_file_is_out_of_date__This_program_requires_a_later_version;
    public static VBErrors ERR371_The_specified_object_cant_be_used_as_an_owner_form_for_Show;
    public static VBErrors ERR380_Invalid_property_value;
    public static VBErrors ERR381_Invalid_property_array_index;
    public static VBErrors ERR382_Property_Set_cant_be_executed_at_run_time;
    public static VBErrors ERR383_Property_Set_cant_be_used_with_a_read_only_property;
    public static VBErrors ERR385_Need_property_array_index;
    public static VBErrors ERR387_Property_Set_not_permitted;
    public static VBErrors ERR393_Property_Get_cant_be_executed_at_run_time;
    public static VBErrors ERR394_Property_Get_cant_be_executed_on_write_only_property;
    public static VBErrors ERR400_Form_already_displayed_cant_show_modally;
    public static VBErrors ERR402_Code_must_close_topmost_modal_form_first;
    public static VBErrors ERR419_Permission_to_use_object_denied;
    public static VBErrors ERR422_Property_not_found;
    public static VBErrors ERR423_Property_or_method_not_found;
    public static VBErrors ERR424_Object_required;
    public static VBErrors ERR425_Invalid_object_use;
    public static VBErrors ERR429_Component_cant_create_object_or_return_reference_to_this_object;
    public static VBErrors ERR430_Class_doesnt_support_Automation;
    public static VBErrors ERR432_File_name_or_class_name_not_found_during_Automation_operation;
    public static VBErrors ERR438_Object_doesnt_support_this_property_or_method;
    public static VBErrors ERR440_Automation_error;
    public static VBErrors ERR442_Connection_to_type_library_or_object_library_for_remote_process_has_been_lost;
    public static VBErrors ERR443_Automation_object_doesnt_have_a_default_value;
    public static VBErrors ERR445_Object_doesnt_support_this_action;
    public static VBErrors ERR446_Object_doesnt_support_named_arguments;
    public static VBErrors ERR447_Object_doesnt_support_current_locale_setting;
    public static VBErrors ERR448_Named_argument_not_found;
    public static VBErrors ERR449_Argument_not_optional_or_invalid_property_assignment;
    public static VBErrors ERR450_Wrong_number_of_arguments_or_invalid_property_assignment;
    public static VBErrors ERR451_Object_not_a_collection;
    public static VBErrors ERR452_Invalid_ordinal;
    public static VBErrors ERR453_Specified_not_found;
    public static VBErrors ERR454_Code_resource_not_found;
    public static VBErrors ERR455_Code_resource_lock_error;
    public static VBErrors ERR457_This_key_is_already_associated_with_an_element_of_this_collection;
    public static VBErrors ERR458_Variable_uses_a_type_not_supported_in_Visual_Basic;
    public static VBErrors ERR459_This_component_doesnt_support_the_set_of_events;
    public static VBErrors ERR460_Invalid_Clipboard_format;
    public static VBErrors ERR461_Method_or_data_member_not_found;
    public static VBErrors ERR462_The_remote_server_machine_does_not_exist_or_is_unavailable;
    public static VBErrors ERR463_Class_not_registered_on_local_machine;
    public static VBErrors ERR480_Can_t_create_AutoRedraw_image;
    public static VBErrors ERR481_Invalid_picture;
    public static VBErrors ERR482_Printer_error;
    public static VBErrors ERR483_Printer_driver_does_not_support_specified_property;
    public static VBErrors ERR484_Problem_getting_printer_information_from_the_system_Make_sure_the_printer_is_set_up_correctly;
    public static VBErrors ERR485_Invalid_picture_type;
    public static VBErrors ERR486_Can_t_print_form_image_to_this_type_of_printer;
    public static VBErrors ERR520_Can_t_empty_Clipboard;
    public static VBErrors ERR521_Can_t_open_Clipboard;
    public static VBErrors ERR735_Can_t_save_file_to_TEMP_directory;
    public static VBErrors ERR744_Search_tex_not_found;
    public static VBErrors ERR746_Replacements_too_long;
    public static VBErrors ERR31001_Out_of_memory;
    public static VBErrors ERR31004_No_object;
    public static VBErrors ERR31018_Class_is_not_set;
    public static VBErrors ERR31027_Unable_to_activate_object;
    public static VBErrors ERR31032_Unable_to_create_embedded_object;
    public static VBErrors ERR31036_Error_saving_to_file;
    public static VBErrors ERR31037_Error_loading_from_file;
    public int value__;
}
