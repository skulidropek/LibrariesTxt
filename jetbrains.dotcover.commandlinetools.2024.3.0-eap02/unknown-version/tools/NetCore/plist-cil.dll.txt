public class Claunia.PropertyList.ASCIIPropertyListParser : object {
    public static char WHITESPACE_SPACE;
    public static char WHITESPACE_TAB;
    public static char WHITESPACE_NEWLINE;
    public static char WHITESPACE_CARRIAGE_RETURN;
    public static char ARRAY_BEGIN_TOKEN;
    public static char ARRAY_END_TOKEN;
    public static char ARRAY_ITEM_DELIMITER_TOKEN;
    public static char DICTIONARY_BEGIN_TOKEN;
    public static char DICTIONARY_END_TOKEN;
    public static char DICTIONARY_ASSIGN_TOKEN;
    public static char DICTIONARY_ITEM_DELIMITER_TOKEN;
    public static char QUOTEDSTRING_BEGIN_TOKEN;
    public static char QUOTEDSTRING_END_TOKEN;
    public static char QUOTEDSTRING_ESCAPE_TOKEN;
    public static char DATA_BEGIN_TOKEN;
    public static char DATA_END_TOKEN;
    public static char DATA_GSOBJECT_BEGIN_TOKEN;
    public static char DATA_GSDATE_BEGIN_TOKEN;
    public static char DATA_GSBOOL_BEGIN_TOKEN;
    public static char DATA_GSBOOL_TRUE_TOKEN;
    public static char DATA_GSBOOL_FALSE_TOKEN;
    public static char DATA_GSINT_BEGIN_TOKEN;
    public static char DATA_GSREAL_BEGIN_TOKEN;
    public static char DATE_DATE_FIELD_DELIMITER;
    public static char DATE_TIME_FIELD_DELIMITER;
    public static char DATE_GS_DATE_TIME_DELIMITER;
    public static char DATE_APPLE_DATE_TIME_DELIMITER;
    public static char DATE_APPLE_END_TOKEN;
    public static char COMMENT_BEGIN_TOKEN;
    public static char MULTILINE_COMMENT_SECOND_TOKEN;
    public static char SINGLELINE_COMMENT_SECOND_TOKEN;
    public static char MULTILINE_COMMENT_END_TOKEN;
    private Char[] data;
    private int index;
    private ASCIIPropertyListParser(Char[] propertyListContent);
    public static NSObject Parse(FileInfo f);
    public static NSObject Parse(Stream fs);
    public static NSObject Parse(Byte[] bytes);
    public static NSObject Parse(Byte[] bytes, int offset, int count);
    public static NSObject Parse(ReadOnlySpan`1<byte> bytes);
    public static NSObject ParseString(string value);
    private bool AcceptSequence(Char[] sequence);
    private bool Accept(Char[] acceptableSymbols);
    private bool Accept(char acceptableSymbol);
    private void Expect(Char[] expectedSymbols);
    private void Expect(char expectedSymbol);
    private void Read(char symbol);
    private void Skip();
    private void Skip(int numSymbols);
    private void SkipWhitespacesAndComments();
    private string ReadInputUntil(Char[] symbols);
    private string ReadInputUntil(char symbol);
    public NSObject Parse();
    private NSObject ParseObject();
    private NSArray ParseArray();
    private NSDictionary ParseDictionary();
    private NSObject ParseData();
    private NSObject ParseDateString();
    private string ParseString();
    private string ParseQuotedString();
    public static string ParseQuotedString(string s);
    private static string ParseEscapedSequence(IEnumerator`1<char> iterator);
    internal static bool IsASCIIEncodable(string text);
}
public class Claunia.PropertyList.BinaryPropertyListParser : object {
    private static Encoding utf16BigEndian;
    private int majorVersion;
    private int minorVersion;
    private int objectRefSize;
    private Int32[] offsetTable;
    private static BinaryPropertyListParser();
    public static NSObject Parse(Byte[] data);
    public static NSObject Parse(Byte[] data, int offset, int length);
    public static NSObject Parse(ReadOnlySpan`1<byte> data);
    protected NSObject DoParse(ReadOnlySpan`1<byte> bytes);
    public static NSObject Parse(Stream fs);
    public static NSObject Parse(FileInfo f);
    protected int GetOffset(int obj);
    protected virtual NSObject ParseObject(ReadOnlySpan`1<byte> bytes, int obj);
    private void ReadLengthAndOffset(ReadOnlySpan`1<byte> bytes, int objInfo, int offset, Int32& lengthValue, Int32& offsetValue);
    private int CalculateUtf8StringLength(ReadOnlySpan`1<byte> bytes, int offset, int numCharacters);
    public static long ParseUnsignedInt(ReadOnlySpan`1<byte> bytes);
    public static long ParseUnsignedInt(Byte[] bytes);
    public static long ParseLong(ReadOnlySpan`1<byte> bytes);
    public static double ParseDouble(ReadOnlySpan`1<byte> bytes);
    public static Byte[] CopyOfRange(ReadOnlySpan`1<byte> src, int startIndex, int endIndex);
}
public class Claunia.PropertyList.BinaryPropertyListWriter : object {
    public static int VERSION_00;
    public static int VERSION_10;
    public static int VERSION_15;
    public static int VERSION_20;
    protected Dictionary`2<NSObject, int> idDict;
    protected Dictionary`2<NSObject, int> idDict2;
    private Stream outStream;
    private int version;
    private long count;
    protected int currentId;
    private int idSizeInBytes;
    [CompilerGeneratedAttribute]
private bool <ReuseObjectIds>k__BackingField;
    public bool ReuseObjectIds { get; public set; }
    public BinaryPropertyListWriter(Stream outStr);
    public BinaryPropertyListWriter(Stream outStr, int version);
    public BinaryPropertyListWriter(Stream outStr, int version, IEqualityComparer`1<NSObject> addObjectEqualityComparer, IEqualityComparer`1<NSObject> getObjectEqualityComparer);
    [CompilerGeneratedAttribute]
public bool get_ReuseObjectIds();
    [CompilerGeneratedAttribute]
public void set_ReuseObjectIds(bool value);
    private static int GetMinimumRequiredVersion(NSObject root);
    public static void Write(FileInfo file, NSObject root);
    public static void Write(Stream outStream, NSObject root);
    public static Byte[] WriteToArray(NSObject root);
    public void Write(NSObject root);
    protected internal virtual void AssignID(NSObject obj);
    internal int GetID(NSObject obj);
    private static int ComputeIdSizeInBytes(int numberOfIds);
    private static int ComputeOffsetSizeInBytes(long maxOffset);
    internal void WriteIntHeader(int kind, int value);
    internal void Write(int b);
    internal void Write(Byte[] bytes);
    internal void Write(Span`1<byte> bytes);
    internal void WriteBytes(long value, int bytes);
    internal void WriteID(int id);
    internal void WriteLong(long value);
    internal void WriteDouble(double value);
    internal static bool IsSerializationPrimitive(NSString obj);
    internal static bool IsSerializationPrimitive(NSNumber n);
}
[DefaultMemberAttribute("Item")]
public class Claunia.PropertyList.NSArray : NSObject {
    private List`1<NSObject> array;
    public int Count { get; }
    public NSObject Item { get; public set; }
    public bool IsReadOnly { get; }
    public NSArray(int length);
    public NSArray(NSObject[] a);
    public sealed virtual int get_Count();
    [ObsoleteAttribute]
public NSObject ObjectAtIndex(int i);
    [ObsoleteAttribute]
public void Remove(int i);
    [ObsoleteAttribute]
public void SetValue(int key, object value);
    [ObsoleteAttribute]
public NSObject[] GetArray();
    [ObsoleteAttribute]
public bool ContainsObject(object obj);
    [ObsoleteAttribute]
public int IndexOfObject(object obj);
    [ObsoleteAttribute]
public int IndexOfIdenticalObject(object obj);
    public NSObject LastObject();
    public NSObject[] ObjectsAtIndexes(Int32[] indexes);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal virtual void ToXml(StringBuilder xml, int level);
    internal virtual void AssignIDs(BinaryPropertyListWriter outPlist);
    internal virtual void ToBinary(BinaryPropertyListWriter outPlist);
    public string ToASCIIPropertyList();
    public string ToGnuStepASCIIPropertyList();
    internal virtual void ToASCII(StringBuilder ascii, int level);
    internal virtual void ToASCIIGnuStep(StringBuilder ascii, int level);
    public virtual bool Equals(NSObject obj);
    public sealed virtual NSObject get_Item(int index);
    public sealed virtual void set_Item(int index, NSObject value);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(NSObject item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(NSObject item);
    public sealed virtual void CopyTo(NSObject[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<NSObject> GetEnumerator();
    public sealed virtual int IndexOf(NSObject item);
    public sealed virtual void Insert(int index, NSObject item);
    public sealed virtual bool Remove(NSObject item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void Add(object item);
    public bool Contains(object item);
    public int IndexOf(object item);
    public void Insert(int index, object item);
    public bool Remove(object item);
}
public class Claunia.PropertyList.NSData : NSObject {
    private static int DataLineLength;
    [CompilerGeneratedAttribute]
private Byte[] <Bytes>k__BackingField;
    public Byte[] Bytes { get; }
    public int Length { get; }
    public NSData(Byte[] bytes);
    public NSData(string base64);
    public NSData(FileInfo file);
    [CompilerGeneratedAttribute]
public Byte[] get_Bytes();
    public int get_Length();
    public void GetBytes(MemoryStream buf, int length);
    public void GetBytes(MemoryStream buf, int rangeStart, int rangeStop);
    public string GetBase64EncodedData();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal virtual void ToXml(StringBuilder xml, int level);
    internal virtual void ToBinary(BinaryPropertyListWriter outPlist);
    internal virtual void ToASCII(StringBuilder ascii, int level);
    internal virtual void ToASCIIGnuStep(StringBuilder ascii, int level);
    public virtual bool Equals(NSObject obj);
    public static Byte[] op_Explicit(NSData value);
    public static NSData op_Explicit(Byte[] value);
}
public class Claunia.PropertyList.NSDate : NSObject {
    private static DateTime EPOCH;
    private static string sdfDefault;
    private static string sdfGnuStep;
    private static String[] sdfAll;
    private static CultureInfo provider;
    [CompilerGeneratedAttribute]
private DateTime <Date>k__BackingField;
    public DateTime Date { get; }
    public NSDate(ReadOnlySpan`1<byte> bytes);
    public NSDate(string textRepresentation);
    public NSDate(DateTime d);
    private static NSDate();
    [CompilerGeneratedAttribute]
public DateTime get_Date();
    private static DateTime ParseDateString(string textRepresentation);
    public static string MakeDateString(DateTime date);
    private static string MakeDateStringGnuStep(DateTime date);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal virtual void ToXml(StringBuilder xml, int level);
    internal virtual void ToBinary(BinaryPropertyListWriter outPlist);
    public virtual string ToString();
    internal virtual void ToASCII(StringBuilder ascii, int level);
    internal virtual void ToASCIIGnuStep(StringBuilder ascii, int level);
    public virtual bool Equals(NSObject obj);
    public static DateTime op_Explicit(NSDate value);
    public static NSDate op_Explicit(DateTime value);
}
[DefaultMemberAttribute("Item")]
public class Claunia.PropertyList.NSDictionary : NSObject {
    private Dictionary`2<string, NSObject> dict;
    private Dictionary`2<string, NSString> keys;
    public bool IsEmpty { get; }
    public NSObject Item { get; public set; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<NSObject> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public NSDictionary(int capacity);
    public bool get_IsEmpty();
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, NSObject>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public Dictionary`2<string, NSObject> GetDictionary();
    public NSObject ObjectForKey(string key);
    public bool ContainsKey(object key);
    public bool Remove(object key);
    public NSObject Get(object key);
    public bool ContainsValue(object value);
    public void Add(string key, object obj);
    public void Add(string key, long obj);
    public void Add(string key, double obj);
    public void Add(string key, bool obj);
    public bool ContainsValue(string val);
    public bool ContainsValue(long val);
    public bool ContainsValue(double val);
    public bool ContainsValue(bool val);
    public bool ContainsValue(DateTime val);
    public bool ContainsValue(Byte[] val);
    public virtual bool Equals(NSObject obj);
    public virtual int GetHashCode();
    internal virtual void ToXml(StringBuilder xml, int level);
    internal virtual void AssignIDs(BinaryPropertyListWriter outPlist);
    internal virtual void ToBinary(BinaryPropertyListWriter outPlist);
    public string ToASCIIPropertyList();
    public string ToGnuStepASCIIPropertyList();
    internal virtual void ToASCII(StringBuilder ascii, int level);
    internal virtual void ToASCIIGnuStep(StringBuilder ascii, int level);
    public sealed virtual void Add(string key, NSObject value);
    public sealed virtual bool ContainsKey(string key);
    public bool ContainsValue(NSObject value);
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, NSObject& value);
    public sealed virtual NSObject get_Item(string index);
    public sealed virtual void set_Item(string index, NSObject value);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<NSObject> get_Values();
    public sealed virtual void Add(KeyValuePair`2<string, NSObject> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, NSObject> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<string, NSObject> item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
}
public class Claunia.PropertyList.NSNumber : NSObject {
    public static int INTEGER;
    public static int REAL;
    public static int BOOLEAN;
    private bool boolValue;
    private double doubleValue;
    private long longValue;
    private int type;
    public NSNumber(ReadOnlySpan`1<byte> bytes, int type);
    public NSNumber(string text, int type);
    public NSNumber(string text);
    public NSNumber(int i);
    public NSNumber(long l);
    public NSNumber(double d);
    public NSNumber(bool b);
    public sealed virtual int CompareTo(object o);
    public int GetNSNumberType();
    public bool isBoolean();
    public bool isInteger();
    public bool isReal();
    public bool ToBool();
    public long ToLong();
    public int ToInt();
    public double ToDouble();
    public float floatValue();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal virtual void ToXml(StringBuilder xml, int level);
    internal virtual void ToBinary(BinaryPropertyListWriter outPlist);
    internal virtual void ToASCII(StringBuilder ascii, int level);
    internal virtual void ToASCIIGnuStep(StringBuilder ascii, int level);
    private static bool IsNumber(object o);
    private static double GetDoubleFromObject(object o);
    public virtual bool Equals(NSObject obj);
    public static ulong op_Explicit(NSNumber value);
    public static long op_Explicit(NSNumber value);
    public static UInt32 op_Explicit(NSNumber value);
    public static int op_Explicit(NSNumber value);
    public static ushort op_Explicit(NSNumber value);
    public static short op_Explicit(NSNumber value);
    public static byte op_Explicit(NSNumber value);
    public static sbyte op_Explicit(NSNumber value);
    public static double op_Explicit(NSNumber value);
    public static float op_Explicit(NSNumber value);
    public static bool op_Explicit(NSNumber value);
    public static NSNumber op_Explicit(ulong value);
    public static NSNumber op_Explicit(long value);
    public static NSNumber op_Explicit(UInt32 value);
    public static NSNumber op_Explicit(int value);
    public static NSNumber op_Explicit(ushort value);
    public static NSNumber op_Explicit(short value);
    public static NSNumber op_Explicit(byte value);
    public static NSNumber op_Explicit(sbyte value);
    public static NSNumber op_Explicit(double value);
    public static NSNumber op_Explicit(float value);
    public static NSNumber op_Explicit(bool value);
}
public abstract class Claunia.PropertyList.NSObject : object {
    internal static string NEWLINE;
    private static string INDENT;
    internal static int ASCII_LINE_LENGTH;
    private static NSObject();
    internal abstract virtual void ToXml(StringBuilder xml, int level);
    internal virtual void AssignIDs(BinaryPropertyListWriter outPlist);
    internal abstract virtual void ToBinary(BinaryPropertyListWriter outPlist);
    public string ToXmlPropertyList();
    internal abstract virtual void ToASCII(StringBuilder ascii, int level);
    internal abstract virtual void ToASCIIGnuStep(StringBuilder ascii, int level);
    internal static void Indent(StringBuilder xml, int level);
    public static NSNumber Wrap(long value);
    public static NSNumber Wrap(double value);
    public static NSNumber Wrap(bool value);
    public static NSData Wrap(Byte[] value);
    public static NSArray Wrap(Object[] value);
    public static NSDictionary Wrap(Dictionary`2<string, object> value);
    public static NSSet Wrap(List`1<object> value);
    public static NSObject Wrap(object o);
    public object ToObject();
    internal static bool ArrayEquals(Byte[] arrayA, Byte[] arrayB);
    internal static bool ArrayEquals(IList`1<NSObject> arrayA, IList`1<NSObject> arrayB);
    public abstract virtual bool Equals(NSObject obj);
}
public class Claunia.PropertyList.NSSet : NSObject {
    private bool ordered;
    private List`1<NSObject> set;
    public int Count { get; }
    public NSSet(bool ordered);
    public NSSet(NSObject[] objects);
    public NSSet(bool ordered, NSObject[] objects);
    public int get_Count();
    public sealed virtual IEnumerator GetEnumerator();
    public void AddObject(NSObject obj);
    public void RemoveObject(NSObject obj);
    public NSObject[] AllObjects();
    public NSObject AnyObject();
    public bool ContainsObject(NSObject obj);
    public NSObject Member(NSObject obj);
    public bool IntersectsSet(NSSet otherSet);
    public bool IsSubsetOfSet(NSSet otherSet);
    internal List`1<NSObject> GetSet();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    internal virtual void ToXml(StringBuilder xml, int level);
    internal virtual void AssignIDs(BinaryPropertyListWriter outPlist);
    internal virtual void ToBinary(BinaryPropertyListWriter outPlist);
    internal virtual void ToASCII(StringBuilder ascii, int level);
    internal virtual void ToASCIIGnuStep(StringBuilder ascii, int level);
    public virtual bool Equals(NSObject obj);
}
public class Claunia.PropertyList.NSString : NSObject {
    private static Encoding asciiEncoder;
    private static Encoding utf16beEncoder;
    private static Encoding utf8Encoder;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    public string Content { get; public set; }
    public NSString(ReadOnlySpan`1<byte> bytes, string encoding);
    public NSString(ReadOnlySpan`1<byte> bytes, Encoding encoding);
    public NSString(string text);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    public sealed virtual int CompareTo(object o);
    public void Append(NSString s);
    public void Append(string s);
    public void Prepend(string s);
    public void Prepend(NSString s);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal virtual void ToXml(StringBuilder xml, int level);
    internal virtual void ToBinary(BinaryPropertyListWriter outPlist);
    internal virtual void ToASCII(StringBuilder ascii, int level);
    internal virtual void ToASCIIGnuStep(StringBuilder ascii, int level);
    internal static string EscapeStringForASCII(string s);
    public virtual bool Equals(NSObject obj);
    internal static bool IsASCIIEncodable(string text);
    public static string op_Explicit(NSString value);
    public static NSString op_Explicit(string value);
}
public class Claunia.PropertyList.PropertyListException : Exception {
    public PropertyListException(string message);
    public PropertyListException(string message, Exception inner);
    protected PropertyListException(SerializationInfo info, StreamingContext context);
}
public class Claunia.PropertyList.PropertyListFormatException : PropertyListException {
    public PropertyListFormatException(string message);
}
public static class Claunia.PropertyList.PropertyListParser : object {
    private static int TYPE_XML;
    private static int TYPE_BINARY;
    private static int TYPE_ASCII;
    private static int TYPE_ERROR_BLANK;
    private static int TYPE_ERROR_UNKNOWN;
    private static int DetermineTypeExact(ReadOnlySpan`1<byte> dataBeginning);
    private static int DetermineType(ReadOnlySpan`1<byte> bytes);
    private static int DetermineType(Stream fs, long offset);
    internal static Byte[] ReadAll(Stream fs);
    public static NSObject Parse(string filePath);
    public static NSObject Parse(FileInfo f);
    public static NSObject Parse(Byte[] bytes);
    public static NSObject Parse(Byte[] bytes, int offset, int length);
    public static NSObject Parse(ReadOnlySpan`1<byte> bytes);
    public static NSObject Parse(Stream fs);
    public static void SaveAsXml(NSObject root, FileInfo outFile);
    public static void SaveAsXml(NSObject root, Stream outStream);
    public static void ConvertToXml(FileInfo inFile, FileInfo outFile);
    public static void SaveAsBinary(NSObject root, FileInfo outFile);
    public static void SaveAsBinary(NSObject root, Stream outStream);
    public static void ConvertToBinary(FileInfo inFile, FileInfo outFile);
    public static void SaveAsASCII(NSDictionary root, FileInfo outFile);
    public static void SaveAsASCII(NSArray root, FileInfo outFile);
    public static void ConvertToASCII(FileInfo inFile, FileInfo outFile);
    public static void SaveAsGnuStepASCII(NSDictionary root, FileInfo outFile);
    public static void SaveAsGnuStepASCII(NSArray root, FileInfo outFile);
    public static void ConvertToGnuStepASCII(FileInfo inFile, FileInfo outFile);
}
public class Claunia.PropertyList.UID : NSObject {
    private ulong value;
    public Byte[] Bytes { get; }
    public int ByteCount { get; }
    public UID(ReadOnlySpan`1<byte> bytes);
    public UID(byte number);
    public UID(ushort number);
    public UID(UInt32 number);
    public UID(ulong number);
    public Byte[] get_Bytes();
    public int get_ByteCount();
    public void GetBytes(Span`1<byte> bytes);
    internal virtual void ToXml(StringBuilder xml, int level);
    internal virtual void ToBinary(BinaryPropertyListWriter outPlist);
    internal virtual void ToASCII(StringBuilder ascii, int level);
    internal virtual void ToASCIIGnuStep(StringBuilder ascii, int level);
    public virtual bool Equals(NSObject obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public ulong ToUInt64();
}
public static class Claunia.PropertyList.XmlPropertyListParser : object {
    public static NSObject Parse(FileInfo f);
    public static NSObject Parse(Byte[] bytes);
    public static NSObject Parse(Stream str);
    public static NSObject ParseString(string value);
    private static NSObject ParseDocument(XmlDocument doc);
    private static NSObject ParseObject(XmlNode n);
    private static List`1<XmlNode> FilterElementNodes(XmlNodeList list);
    private static string GetNodeTextContents(XmlNode n);
}
