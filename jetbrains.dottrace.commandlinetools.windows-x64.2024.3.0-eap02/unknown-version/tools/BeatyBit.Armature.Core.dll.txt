public class Armature.Core.Annotations.WithoutTestAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class BeatyBit.Armature.Core.ArmatureException : AggregateException {
    [DebuggerStepThroughAttribute]
public ArmatureException(string message);
    [DebuggerStepThroughAttribute]
public ArmatureException(string message, Exception innerException);
    [DebuggerStepThroughAttribute]
public ArmatureException(string message, IEnumerable`1<Exception> innerExceptions);
    [DebuggerStepThroughAttribute]
public virtual string ToString();
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class BeatyBit.Armature.Core.BuildActionBag : Dictionary`2<object, List`1<IBuildAction>> {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class BeatyBit.Armature.Core.BuildActionBagExtension : object {
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static WeightedBuildActionBag Merge(WeightedBuildActionBag left, WeightedBuildActionBag right);
    [ExtensionAttribute]
public static IBuildAction GetTopmostAction(WeightedBuildActionBag buildActionBag, object stage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class BeatyBit.Armature.Core.Builder : BuildStackPatternTree {
    private Object[] _buildStages;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IBuilder[] _parentBuilders;
    [NullableAttribute("2")]
private string _hoconString;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public Builder(string name, Object[] buildStages);
    public Builder(string name, Object[] buildStages, IBuilder[] parentBuilders);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [NullableContextAttribute("2")]
public sealed virtual BuildResult BuildUnit(UnitId unitId, IBuildStackPattern auxBuildStackPatternTree);
    [NullableContextAttribute("2")]
public sealed virtual List`1<Weighted`1<BuildResult>> BuildAllUnits(UnitId unitId, IBuildStackPattern auxBuildStackPatternTree);
    public virtual string ToHoconString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class BeatyBit.Armature.Core.BuildResult : ValueType {
    public object Value;
    public bool HasValue;
    [DebuggerStepThroughAttribute]
public BuildResult(object value);
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class BeatyBit.Armature.Core.BuildSession : object {
    private static string GatherBuildActions;
    private Object[] _buildStages;
    private IBuildStackPattern _mainBuildStackPatternTree;
    [NullableAttribute("2")]
private IBuildStackPattern _auxPatternTree;
    private IBuilder[] _parentBuilders;
    private List`1<UnitId> _buildStackList;
    public BuildSession(Object[] buildStages, IBuildStackPattern patternTree, IBuildStackPattern auxPatternTree, IBuilder[] parentBuilders);
    public BuildResult BuildUnit(UnitId unitId, bool engageParentBuilders);
    public List`1<Weighted`1<BuildResult>> BuildAllUnits(UnitId unitId, bool engageParentBuilders);
    private T Build(UnitId unitId, Func`3<Stack, WeightedBuildActionBag, T> build);
    [NullableContextAttribute("2")]
private BuildResult BuildUnit(Stack stack, WeightedBuildActionBag buildActionBag, bool engageParentBuilders);
    [NullableContextAttribute("2")]
private List`1<Weighted`1<BuildResult>> BuildAllUnits(Stack stack, WeightedBuildActionBag buildActionBag, bool engageParentBuilders);
    private static void BuildActionProcess(IBuildAction buildAction, IBuildSession buildSession);
    private static void BuildActionPostProcess(IBuildAction buildAction, IBuildSession buildSession);
    private BuildResult BuildViaParentBuilder(UnitId unitId);
    private static void Log_BuildResult(BuildResult buildResult);
    private static void Log_BuildAllResult(string title, List`1<Weighted`1<BuildResult>> buildResultList);
    private static void Log_BuildActionResult(IBuildAction buildAction, BuildResult buildResult);
    [NullableContextAttribute("2")]
private static void Log_GatheredActions(WeightedBuildActionBag actionBag);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class BeatyBit.Armature.Core.BuildStackPatternBase : object {
    [NullableAttribute("2")]
[PublicAPIAttribute]
protected BuildActionBag RawBuildActions;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected HashSet`1<IBuildStackPattern> RawChildren;
    [CompilerGeneratedAttribute]
private long <Weight>k__BackingField;
    protected long Weight { get; }
    public BuildActionBag BuildActions { get; }
    public HashSet`1<IBuildStackPattern> Children { get; }
    private long BeatyBit.Armature.Core.Sdk.IInternal<System.Int64>.Member1 { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HashSet`1<IBuildStackPattern> BeatyBit.Armature.Core.Sdk.IInternal<System.Int64,System.Collections.Generic.HashSet<BeatyBit.Armature.Core.IBuildStackPattern>>.Member2 { get; }
    [NullableAttribute("2")]
private BuildActionBag BeatyBit.Armature.Core.Sdk.IInternal<System.Int64,System.Collections.Generic.HashSet<BeatyBit.Armature.Core.IBuildStackPattern>,BeatyBit.Armature.Core.BuildActionBag>.Member3 { get; }
    protected BuildStackPatternBase(int weight);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
protected long get_Weight();
    public BuildActionBag get_BuildActions();
    public HashSet`1<IBuildStackPattern> get_Children();
    public virtual T GetOrAddNode(T node);
    public virtual T AddNode(T node);
    public sealed virtual bool AddBuildAction(IBuildAction buildAction, object buildStage);
    [NullableContextAttribute("2")]
public abstract virtual bool GatherBuildActions(Stack stack, WeightedBuildActionBag& actionBag, long inputWeight);
    [NullableContextAttribute("2")]
[PublicAPIAttribute]
protected bool GetOwnBuildActions(long inputWeight, WeightedBuildActionBag& actionBag);
    [NullableContextAttribute("2")]
protected bool GetOwnAndChildrenBuildActions(Stack stack, long inputWeight, WeightedBuildActionBag& actionBag);
    [NullableContextAttribute("2")]
[PublicAPIAttribute]
protected bool GetChildrenActions(Stack stack, long inputWeight, WeightedBuildActionBag& actionBag);
    public virtual bool IsStatic(UnitId& unitId);
    public virtual void PrintToLog(LogLevel logLevel);
    protected virtual void PrintContentToLog(LogLevel logLevel);
    [PublicAPIAttribute]
protected void PrintChildrenToLog(LogLevel logLevel);
    public virtual string ToHoconString();
    [NullableContextAttribute("2")]
public virtual bool Equals(IBuildStackPattern other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override long BeatyBit.Armature.Core.Sdk.IInternal<System.Int64>.get_Member1();
    private sealed virtual override HashSet`1<IBuildStackPattern> BeatyBit.Armature.Core.Sdk.IInternal<System.Int64,System.Collections.Generic.HashSet<BeatyBit.Armature.Core.IBuildStackPattern>>.get_Member2();
    [NullableContextAttribute("2")]
private sealed virtual override BuildActionBag BeatyBit.Armature.Core.Sdk.IInternal<System.Int64,System.Collections.Generic.HashSet<BeatyBit.Armature.Core.IBuildStackPattern>,BeatyBit.Armature.Core.BuildActionBag>.get_Member3();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class BeatyBit.Armature.Core.BuildStackPatternByUnitBase : BuildStackPatternBase {
    protected IUnitPattern UnitPattern;
    private IUnitPattern BeatyBit.Armature.Core.Sdk.IInternal<BeatyBit.Armature.Core.IUnitPattern>.Member1 { get; }
    protected BuildStackPatternByUnitBase(IUnitPattern unitPattern, int weight);
    public virtual bool IsStatic(UnitId& unitId);
    protected virtual void PrintContentToLog(LogLevel logLevel);
    [NullableContextAttribute("2")]
private bool Equals(BuildStackPatternByUnitBase other);
    [NullableContextAttribute("2")]
public virtual bool Equals(IBuildStackPattern other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override IUnitPattern BeatyBit.Armature.Core.Sdk.IInternal<BeatyBit.Armature.Core.IUnitPattern>.get_Member1();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class BeatyBit.Armature.Core.BuildStackPatternExtension : object {
    [ExtensionAttribute]
public static IBuildStackPattern UseBuildAction(IBuildStackPattern node, IBuildAction buildAction, object buildStage);
    [DoesNotReturnAttribute]
public static void ThrowNodeIsAlreadyAddedException(IBuildStackPattern parentNode, IBuildStackPattern node);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class BeatyBit.Armature.Core.BuildStackPatternTree : object {
    private string _name;
    private Root _root;
    private Dictionary`2<UnitId, LeanList`1<IBuildStackPattern>> _staticMap;
    private long BeatyBit.Armature.Core.Sdk.IInternal<System.Int64>.Member1 { get; }
    private HashSet`1<IBuildStackPattern> BeatyBit.Armature.Core.Sdk.IInternal<System.Int64,System.Collections.Generic.HashSet<BeatyBit.Armature.Core.IBuildStackPattern>>.Member2 { get; }
    [NullableAttribute("2")]
private BuildActionBag BeatyBit.Armature.Core.Sdk.IInternal<System.Int64,System.Collections.Generic.HashSet<BeatyBit.Armature.Core.IBuildStackPattern>,BeatyBit.Armature.Core.BuildActionBag>.Member3 { get; }
    private Dictionary`2<UnitId, LeanList`1<IBuildStackPattern>> BeatyBit.Armature.Core.Sdk.IInternal<System.Int64,System.Collections.Generic.HashSet<BeatyBit.Armature.Core.IBuildStackPattern>,BeatyBit.Armature.Core.BuildActionBag,System.Collections.Generic.Dictionary<BeatyBit.Armature.Core.UnitId,BeatyBit.Armature.Core.LeanList<BeatyBit.Armature.Core.IBuildStackPattern>>>.Member4 { get; }
    public BuildStackPatternTree(string name, int weight);
    [NullableContextAttribute("2")]
public sealed virtual bool GatherBuildActions(Stack stack, WeightedBuildActionBag& actionBag, long inputWeight);
    private sealed virtual override bool BeatyBit.Armature.Core.IStaticPattern.IsStatic(UnitId& unitId);
    public virtual void PrintToLog(LogLevel logLevel);
    public sealed virtual T GetOrAddNode(T node);
    public sealed virtual T AddNode(T node);
    public virtual string ToHoconString();
    private sealed virtual override bool BeatyBit.Armature.Core.IBuildStackPattern.AddBuildAction(IBuildAction buildAction, object buildStage);
    private sealed virtual override bool System.IEquatable<BeatyBit.Armature.Core.IBuildStackPattern>.Equals(IBuildStackPattern other);
    public void Add(IBuildStackPattern buildStackPattern);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override long BeatyBit.Armature.Core.Sdk.IInternal<System.Int64>.get_Member1();
    private sealed virtual override HashSet`1<IBuildStackPattern> BeatyBit.Armature.Core.Sdk.IInternal<System.Int64,System.Collections.Generic.HashSet<BeatyBit.Armature.Core.IBuildStackPattern>>.get_Member2();
    [NullableContextAttribute("2")]
private sealed virtual override BuildActionBag BeatyBit.Armature.Core.Sdk.IInternal<System.Int64,System.Collections.Generic.HashSet<BeatyBit.Armature.Core.IBuildStackPattern>,BeatyBit.Armature.Core.BuildActionBag>.get_Member3();
    private sealed virtual override Dictionary`2<UnitId, LeanList`1<IBuildStackPattern>> BeatyBit.Armature.Core.Sdk.IInternal<System.Int64,System.Collections.Generic.HashSet<BeatyBit.Armature.Core.IBuildStackPattern>,BeatyBit.Armature.Core.BuildActionBag,System.Collections.Generic.Dictionary<BeatyBit.Armature.Core.UnitId,BeatyBit.Armature.Core.LeanList<BeatyBit.Armature.Core.IBuildStackPattern>>>.get_Member4();
}
[ExtensionAttribute]
internal static class BeatyBit.Armature.Core.DictionaryExtension : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TValue GetValueSafe(Dictionary`2<TKey, TValue> dictionary, TKey key, TValue defaultValue);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static TValue GetOrCreateValue(Dictionary`2<TKey, TValue> dictionary, TKey key, Func`1<TValue> createValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PublicAPIAttribute]
public static class BeatyBit.Armature.Core.ExceptionConst : object {
    public static string ArmaturePrefix;
    public static string MessageKey;
    public static string BuildStack;
    public static string Logged;
}
[ExtensionAttribute]
public static class BeatyBit.Armature.Core.ExceptionExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static T AddData(T exception, object key, object value);
}
[NullableContextAttribute("1")]
public interface BeatyBit.Armature.Core.IBuildAction {
    public abstract virtual void Process(IBuildSession buildSession);
    public abstract virtual void PostProcess(IBuildSession buildSession);
}
[NullableContextAttribute("1")]
public interface BeatyBit.Armature.Core.IBuilder {
    public string Name { get; }
    [NullableContextAttribute("2")]
public abstract virtual BuildResult BuildUnit(UnitId unitId, IBuildStackPattern auxBuildStackPatternTree);
    [NullableContextAttribute("2")]
public abstract virtual List`1<Weighted`1<BuildResult>> BuildAllUnits(UnitId unitId, IBuildStackPattern auxBuildStackPatternTree);
    public abstract virtual string get_Name();
}
public interface BeatyBit.Armature.Core.IBuildSession {
    public BuildResult BuildResult { get; public set; }
    public Stack Stack { get; }
    public abstract virtual BuildResult get_BuildResult();
    public abstract virtual void set_BuildResult(BuildResult value);
    public abstract virtual Stack get_Stack();
    public abstract virtual BuildResult BuildUnit(UnitId unitId, bool engageParentBuilders);
    public abstract virtual List`1<Weighted`1<BuildResult>> BuildAllUnits(UnitId unitId, bool engageParentBuilders);
}
public interface BeatyBit.Armature.Core.IBuildStackPattern {
    [NullableContextAttribute("1")]
public abstract virtual T GetOrAddNode(T node);
    [NullableContextAttribute("1")]
public abstract virtual T AddNode(T node);
    [NullableContextAttribute("1")]
public abstract virtual bool AddBuildAction(IBuildAction buildAction, object buildStage);
    [NullableContextAttribute("2")]
public abstract virtual bool GatherBuildActions(Stack stack, WeightedBuildActionBag& actionBag, long inputWeight);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class BeatyBit.Armature.Core.IfFirstUnit : BuildStackPatternByUnitBase {
    public IfFirstUnit(IUnitPattern pattern);
    public IfFirstUnit(IUnitPattern pattern, int weight);
    [NullableContextAttribute("2")]
public virtual bool GatherBuildActions(Stack stack, WeightedBuildActionBag& actionBag, long inputWeight);
}
public interface BeatyBit.Armature.Core.ILoggable {
    [WithoutTestAttribute]
public abstract virtual void PrintToLog(LogLevel logLevel);
}
[NullableContextAttribute("1")]
public interface BeatyBit.Armature.Core.ILogString {
    [WithoutTestAttribute]
public abstract virtual string ToHoconString();
}
public interface BeatyBit.Armature.Core.IStaticPattern {
    public abstract virtual bool IsStatic(UnitId& unitId);
}
public interface BeatyBit.Armature.Core.IUnitPattern {
    public abstract virtual bool Matches(UnitId unitId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class BeatyBit.Armature.Core.LeanList`1 : object {
    [NullableAttribute("2")]
private T _0;
    [NullableAttribute("2")]
private T _1;
    [NullableAttribute("2")]
private T _2;
    [NullableAttribute("2")]
private T _3;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<T> _list;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public int Count { get; private set; }
    public T Item { get; public set; }
    public bool IsReadOnly { get; }
    private List`1<T> List { get; }
    public LeanList`1(int capacity);
    public LeanList`1(ICollection`1<T> collection);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public sealed virtual void Add(T item);
    public void AddRange(ICollection`1<T> items);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual int IndexOf(T item);
    public sealed virtual bool Contains(T item);
    public sealed virtual void Clear();
    [IteratorStateMachineAttribute("BeatyBit.Armature.Core.LeanList`1/<GetEnumerator>d__19")]
public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool Remove(T item);
    private List`1<T> get_List();
    private Action`1<T> SetItem(int index);
    private T GetItem(int index);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual void RemoveAt(int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PublicAPIAttribute]
public static class BeatyBit.Armature.Core.Log : object {
    [NullableAttribute("2")]
private static DeferredLogScope _activeDeferredScope;
    private static LogLevel _logLevel;
    private static object _crossThreadAccess;
    public static bool LogFullTypeName;
    public static int IndentSize { get; public set; }
    private static Log();
    public static int get_IndentSize();
    public static void set_IndentSize(int value);
    public static bool IsEnabled(LogLevel logLevel);
    public static Disposable Enable(LogLevel logLevel);
    public static Disposable Disable();
    public static void Write(LogLevel logLevel, string text);
    [StringFormatMethodAttribute("format")]
public static void Write(LogLevel logLevel, string format, Object[] parameters);
    public static void Write(LogLevel logLevel, Func`1<string> getText);
    [StringFormatMethodAttribute("format")]
public static void WriteLine(LogLevel logLevel, string format, T1 p1);
    [StringFormatMethodAttribute("format")]
public static void WriteLine(LogLevel logLevel, string format, T1 p1, T2 p2);
    [StringFormatMethodAttribute("format")]
public static void WriteLine(LogLevel logLevel, string format, T1 p1, T2 p2, T3 p3);
    [StringFormatMethodAttribute("format")]
public static void WriteLine(LogLevel logLevel, string format, Object[] parameters);
    public static void WriteLine(LogLevel logLevel, string text);
    public static void WriteLine(LogLevel logLevel, Func`1<string> getText);
    public static Indenter IndentBlock(LogLevel logLevel, string name, string brackets, int indentDelta, bool threadRoot);
    public static Indenter NamedBlock(LogLevel logLevel, string name, bool threadRoot);
    public static Indenter NamedBlock(LogLevel logLevel, Func`1<string> getName);
    public static void Execute(LogLevel logLevel, Action action);
    public static Condition UnderCondition(LogLevel conditionLogLevel);
    private static Condition CreateCondition(DeferredLogScope deferredScope, DeferredLogScope prevActiveDeferredScope);
    private static void DoWriteLine(string line, LogLevel logLevel);
    private static void DoWrite(string text, LogLevel logLevel, bool newLine);
    private static void AmendIndentLevel(int indentDelta, LogLevel logLevel);
    private static void WriteToTrace(string text, bool newLine);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class BeatyBit.Armature.Core.LogConst : object {
    public static string Matched;
    public static string LoggingSubsystemError;
    public static string ArmatureExceptionPostfix(string options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[PublicAPIAttribute]
public static class BeatyBit.Armature.Core.LogExtension : object {
    private static HashSet`1<char> BadCharacters;
    private static LogExtension();
    [ExtensionAttribute]
public static string GetFullName(Type type);
    [ExtensionAttribute]
public static string GetShortName(Type type);
    [ExtensionAttribute]
public static string ToLogString(Type type);
    [ExtensionAttribute]
public static string ToLogString(BuildResult buildResult);
    [ExtensionAttribute]
public static string ToHoconString(object value);
    [ExtensionAttribute]
public static string ToHoconString(Type type);
    [ExtensionAttribute]
public static string ToHoconArray(IEnumerable`1<Type> items);
    [ExtensionAttribute]
public static string ToHoconString(Stack stack);
    [ExtensionAttribute]
public static string Quote(string str);
    [ExtensionAttribute]
public static string QuoteIfNeeded(string str);
    [ExtensionAttribute]
public static void WriteToLog(WeightedBuildActionBag actions, LogLevel logLevel, string propertyName);
    [ExtensionAttribute]
public static string GetName(IBuildAction buildAction);
    [ExtensionAttribute]
public static string ProcessMethod(IBuildAction buildAction);
    [ExtensionAttribute]
public static string PostProcessMethod(IBuildAction buildAction);
    [ExtensionAttribute]
public static void WriteToLog(Exception exception);
    private static void WriteHoconProperty(LogLevel logLevel, string propertyName, string text);
}
public enum BeatyBit.Armature.Core.LogLevel : Enum {
    public int value__;
    public static LogLevel None;
    public static LogLevel Info;
    public static LogLevel Verbose;
    public static LogLevel Trace;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class BeatyBit.Armature.Core.Sdk.Empty`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static T[] _array;
    public static T[] Array;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static List`1<T> _list;
    public static List`1<T> List;
    private static Empty`1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class BeatyBit.Armature.Core.Sdk.ExtensibilityExtension : object {
    [ExtensionAttribute]
public static IInternal`1<T> GetInternals(IInternal`1<T> obj);
    [ExtensionAttribute]
public static IInternal`2<T1, T2> GetInternals(IInternal`2<T1, T2> obj);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IInternal`3<T1, T2, T3> GetInternals(IInternal`3<T1, T2, T3> obj);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IInternal`4<T1, T2, T3, T4> GetInternals(IInternal`4<T1, T2, T3, T4> obj);
}
[NullableContextAttribute("1")]
public interface BeatyBit.Armature.Core.Sdk.IInternal`1 {
    public T1 Member1 { get; }
    public abstract virtual T1 get_Member1();
}
[NullableContextAttribute("1")]
public interface BeatyBit.Armature.Core.Sdk.IInternal`2 {
    public T2 Member2 { get; }
    public abstract virtual T2 get_Member2();
}
[NullableContextAttribute("2")]
public interface BeatyBit.Armature.Core.Sdk.IInternal`3 {
    [NullableAttribute("1")]
public T3 Member3 { get; }
    [NullableContextAttribute("1")]
public abstract virtual T3 get_Member3();
}
[NullableContextAttribute("2")]
public interface BeatyBit.Armature.Core.Sdk.IInternal`4 {
    [NullableAttribute("1")]
public T4 Member4 { get; }
    [NullableContextAttribute("1")]
public abstract virtual T4 get_Member4();
}
public static class BeatyBit.Armature.Core.Sdk.Static : object {
    [NullableContextAttribute("1")]
public static T Of();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class BeatyBit.Armature.Core.Sdk.Weighted`1 : ValueType {
    public T Entity;
    public long Weight;
    [DebuggerStepThroughAttribute]
public Weighted`1(T entity, long weight);
    [WithoutTestAttribute]
[DebuggerStepThroughAttribute]
public sealed virtual int CompareTo(Weighted`1<T> other);
    [DebuggerStepThroughAttribute]
public virtual string ToString();
}
[ExtensionAttribute]
public static class BeatyBit.Armature.Core.Sdk.WeightedExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static Weighted`1<T> WithWeight(T entity, long weight);
}
public class BeatyBit.Armature.Core.SkipTillUnit : BuildStackPatternByUnitBase {
    [NullableContextAttribute("1")]
public SkipTillUnit(IUnitPattern pattern, int weight);
    [NullableContextAttribute("2")]
public virtual bool GatherBuildActions(Stack stack, WeightedBuildActionBag& actionBag, long inputWeight);
}
public class BeatyBit.Armature.Core.SkipWhileUnit : BuildStackPatternByUnitBase {
    [NullableContextAttribute("1")]
public SkipWhileUnit(IUnitPattern unitPattern, int weight);
    [NullableContextAttribute("2")]
public virtual bool GatherBuildActions(Stack stack, WeightedBuildActionBag& actionBag, long inputWeight);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class BeatyBit.Armature.Core.Tag : object {
    private string _name;
    public static Tag Any;
    public static Tag Propagate;
    [PublicAPIAttribute]
public Tag(string name);
    private static Tag();
    [DebuggerStepThroughAttribute]
public sealed virtual string ToHoconString();
    [DebuggerStepThroughAttribute]
public virtual string ToString();
}
[ExtensionAttribute]
public static class BeatyBit.Armature.Core.TagExtension : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static object GetEffectiveTag(object patternTag, object unitTag);
}
public static class BeatyBit.Armature.Core.Unit : object {
    [NullableContextAttribute("2")]
public static UnitId Of(object kind, object tag);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class BeatyBit.Armature.Core.UnitId : ValueType {
    [NullableAttribute("2")]
public object Kind;
    [NullableAttribute("2")]
public object Tag;
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public UnitId(object kind, object tag);
    public virtual string ToString();
    public sealed virtual string ToHoconString();
    [DebuggerStepThroughAttribute]
public bool Equals(UnitId other);
    [DebuggerStepThroughAttribute]
public virtual bool Equals(object obj);
    [WithoutTestAttribute]
[DebuggerStepThroughAttribute]
public virtual int GetHashCode();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class BeatyBit.Armature.Core.UnitPattern : object {
    private object _unitKind;
    private object _tag;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [DebuggerStepThroughAttribute]
public UnitPattern(object unitKind, object tag);
    [CompilerGeneratedAttribute]
private UnitPattern(UnitPattern original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Type get_EqualityContract();
    public sealed virtual bool Matches(UnitId unitId);
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
public sealed virtual string ToHoconString();
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
public virtual string ToString();
    public sealed virtual bool IsStatic(UnitId& unitId);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(UnitPattern left, UnitPattern right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(UnitPattern left, UnitPattern right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(UnitPattern other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public UnitPattern <Clone>$();
}
[ExtensionAttribute]
public static class BeatyBit.Armature.Core.UnitTagExtension : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool Matches(object patternTag, object unitTag);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class BeatyBit.Armature.Core.WeightedBuildActionBag : Dictionary`2<object, LeanList`1<Weighted`1<IBuildAction>>> {
    [DebuggerStepThroughAttribute]
public virtual string ToString();
}
[PublicAPIAttribute]
public class BeatyBit.Armature.Core.WeightOf : object {
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseKindFlags : Enum {
    public int value__;
    public static ImplicitUseKindFlags Default;
    public static ImplicitUseKindFlags Access;
    public static ImplicitUseKindFlags Assign;
    public static ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature;
    public static ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature;
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseTargetFlags : Enum {
    public int value__;
    public static ImplicitUseTargetFlags Default;
    public static ImplicitUseTargetFlags Itself;
    public static ImplicitUseTargetFlags Members;
    public static ImplicitUseTargetFlags WithInheritors;
    public static ImplicitUseTargetFlags WithMembers;
}
[AttributeUsageAttribute("2048")]
[ConditionalAttribute("JETBRAINS_ANNOTATIONS")]
internal class JetBrains.Annotations.InstantHandleAttribute : Attribute {
}
[AttributeUsageAttribute("18436")]
[ConditionalAttribute("JETBRAINS_ANNOTATIONS")]
internal class JetBrains.Annotations.MeansImplicitUseAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    [UsedImplicitlyAttribute]
public ImplicitUseKindFlags UseKindFlags { get; }
    [UsedImplicitlyAttribute]
public ImplicitUseTargetFlags TargetFlags { get; }
    public MeansImplicitUseAttribute(ImplicitUseKindFlags useKindFlags);
    public MeansImplicitUseAttribute(ImplicitUseTargetFlags targetFlags);
    public MeansImplicitUseAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[MeansImplicitUseAttribute("3")]
[AttributeUsageAttribute("32767")]
[ConditionalAttribute("JETBRAINS_ANNOTATIONS")]
internal class JetBrains.Annotations.PublicAPIAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    public string Comment { get; }
    [NullableContextAttribute("1")]
public PublicAPIAttribute(string comment);
    [CompilerGeneratedAttribute]
public string get_Comment();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4320")]
[ConditionalAttribute("JETBRAINS_ANNOTATIONS")]
internal class JetBrains.Annotations.StringFormatMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FormatParameterName>k__BackingField;
    public string FormatParameterName { get; }
    public StringFormatMethodAttribute(string formatParameterName);
    [CompilerGeneratedAttribute]
public string get_FormatParameterName();
}
[AttributeUsageAttribute("2048")]
[ConditionalAttribute("JETBRAINS_ANNOTATIONS")]
internal class JetBrains.Annotations.StructuredMessageTemplateAttribute : Attribute {
}
[AttributeUsageAttribute("32767")]
[ConditionalAttribute("JETBRAINS_ANNOTATIONS")]
internal class JetBrains.Annotations.UsedImplicitlyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    public ImplicitUseKindFlags UseKindFlags { get; }
    public ImplicitUseTargetFlags TargetFlags { get; }
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags);
    public UsedImplicitlyAttribute(ImplicitUseTargetFlags targetFlags);
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class Public : object {
    [NullableAttribute("1")]
public static string Key;
}
[AttributeUsageAttribute("64")]
public class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
