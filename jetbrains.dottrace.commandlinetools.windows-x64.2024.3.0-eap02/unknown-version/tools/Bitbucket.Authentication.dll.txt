public class Atlassian.Bitbucket.Authentication.App : Application {
    private bool _contentLoaded;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class Atlassian.Bitbucket.Authentication.Authentication : BaseAuthentication {
    public static string BitbucketBaseUrlHost;
    private static string RefreshTokenSuffix;
    public TokenScope TokenScope;
    [CompilerGeneratedAttribute]
private ICredentialStore <PersonalAccessTokenStore>k__BackingField;
    [CompilerGeneratedAttribute]
private AcquireCredentialsDelegate <AcquireCredentialsCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private AcquireAuthenticationOAuthDelegate <AcquireAuthenticationOAuthCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationResultDelegate <AuthenticationResultCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthority <BitbucketAuthority>k__BackingField;
    public ICredentialStore PersonalAccessTokenStore { get; }
    internal AcquireCredentialsDelegate AcquireCredentialsCallback { get; internal set; }
    internal AcquireAuthenticationOAuthDelegate AcquireAuthenticationOAuthCallback { get; internal set; }
    internal AuthenticationResultDelegate AuthenticationResultCallback { get; internal set; }
    private IAuthority BitbucketAuthority { get; }
    public Authentication(RuntimeContext context, ICredentialStore personalAccessTokenStore, AcquireCredentialsDelegate acquireCredentialsCallback, AcquireAuthenticationOAuthDelegate acquireAuthenticationOAuthCallback, IAuthority authority);
    [CompilerGeneratedAttribute]
public ICredentialStore get_PersonalAccessTokenStore();
    [CompilerGeneratedAttribute]
internal AcquireCredentialsDelegate get_AcquireCredentialsCallback();
    [CompilerGeneratedAttribute]
internal void set_AcquireCredentialsCallback(AcquireCredentialsDelegate value);
    [CompilerGeneratedAttribute]
internal AcquireAuthenticationOAuthDelegate get_AcquireAuthenticationOAuthCallback();
    [CompilerGeneratedAttribute]
internal void set_AcquireAuthenticationOAuthCallback(AcquireAuthenticationOAuthDelegate value);
    [CompilerGeneratedAttribute]
internal AuthenticationResultDelegate get_AuthenticationResultCallback();
    [CompilerGeneratedAttribute]
internal void set_AuthenticationResultCallback(AuthenticationResultDelegate value);
    public virtual Task`1<bool> DeleteCredentials(TargetUri targetUri);
    [AsyncStateMachineAttribute("Atlassian.Bitbucket.Authentication.Authentication/<DeleteCredentials>d__20")]
public virtual Task`1<bool> DeleteCredentials(TargetUri targetUri, string username);
    private static TargetUri GetRefreshTokenTargetUri(TargetUri targetUri);
    [AsyncStateMachineAttribute("Atlassian.Bitbucket.Authentication.Authentication/<GetCredentials>d__22")]
public Task`1<Credential> GetCredentials(TargetUri targetUri, string username);
    [AsyncStateMachineAttribute("Atlassian.Bitbucket.Authentication.Authentication/<GetCredentials>d__23")]
public virtual Task`1<Credential> GetCredentials(TargetUri targetUri);
    [AsyncStateMachineAttribute("Atlassian.Bitbucket.Authentication.Authentication/<SetCredentials>d__24")]
public virtual Task`1<bool> SetCredentials(TargetUri targetUri, Credential credentials);
    [AsyncStateMachineAttribute("Atlassian.Bitbucket.Authentication.Authentication/<SetCredentials>d__25")]
public Task`1<bool> SetCredentials(TargetUri targetUri, Credential credentials, string username);
    private static string GetRealUsername(Credential credentials, string username);
    private static string GetRealUsername(string remoteUsername, string username);
    public static BaseAuthentication GetAuthentication(RuntimeContext context, TargetUri targetUri, ICredentialStore personalAccessTokenStore, AcquireCredentialsDelegate acquireCredentialsCallback, AcquireAuthenticationOAuthDelegate acquireAuthenticationOAuthCallback);
    [AsyncStateMachineAttribute("Atlassian.Bitbucket.Authentication.Authentication/<InteractiveLogon>d__29")]
public Task`1<Credential> InteractiveLogon(TargetUri targetUri, string username);
    [AsyncStateMachineAttribute("Atlassian.Bitbucket.Authentication.Authentication/<InteractiveLogon>d__30")]
public sealed virtual Task`1<Credential> InteractiveLogon(TargetUri targetUri);
    private Credential GenerateCredentials(TargetUri targetUri, string username, AuthenticationResult& result);
    private Credential GenerateRefreshCredentials(TargetUri targetUri, string username, AuthenticationResult& result);
    [AsyncStateMachineAttribute("Atlassian.Bitbucket.Authentication.Authentication/<ValidateCredentials>d__33")]
public sealed virtual Task`1<Credential> ValidateCredentials(TargetUri targetUri, string username, Credential credentials);
    [AsyncStateMachineAttribute("Atlassian.Bitbucket.Authentication.Authentication/<RefreshCredentials>d__34")]
private Task`1<Credential> RefreshCredentials(TargetUri targetUri, string refreshToken, string username);
    [CompilerGeneratedAttribute]
private IAuthority get_BitbucketAuthority();
}
public class Atlassian.Bitbucket.Authentication.AuthenticationPrompts : Base {
    private IntPtr _parentHwnd;
    public AuthenticationPrompts(RuntimeContext context, IntPtr parentHwnd);
    public AuthenticationPrompts(RuntimeContext context);
    public static string GetUserFromTargetUri(TargetUri targetUri);
    public bool CredentialModalPrompt(string title, TargetUri targetUri, String& username, String& password);
    public bool AuthenticationOAuthModalPrompt(string title, TargetUri targetUri, AuthenticationResultType resultType, string username);
    [CompilerGeneratedAttribute]
private AuthenticationDialogWindow <CredentialModalPrompt>b__4_0();
    [CompilerGeneratedAttribute]
private AuthenticationDialogWindow <AuthenticationOAuthModalPrompt>b__5_0();
}
[DebuggerDisplayAttribute("{Type}")]
public class Atlassian.Bitbucket.Authentication.AuthenticationResult : ValueType {
    public AuthenticationResultType Type;
    [CompilerGeneratedAttribute]
private Token <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private Token <RefreshToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RemoteUsername>k__BackingField;
    public Token Token { get; internal set; }
    public Token RefreshToken { get; internal set; }
    public string RemoteUsername { get; internal set; }
    public bool IsSuccess { get; }
    public AuthenticationResult(AuthenticationResultType type);
    public AuthenticationResult(AuthenticationResultType type, string username);
    public AuthenticationResult(AuthenticationResultType type, Token token);
    public AuthenticationResult(AuthenticationResultType type, Token token, string username);
    public AuthenticationResult(AuthenticationResultType type, Token accessToken, Token refreshToken);
    public AuthenticationResult(AuthenticationResultType type, Token accessToken, Token refreshToken, string remoteUsername);
    [CompilerGeneratedAttribute]
public Token get_Token();
    [CompilerGeneratedAttribute]
internal void set_Token(Token value);
    [CompilerGeneratedAttribute]
public Token get_RefreshToken();
    [CompilerGeneratedAttribute]
internal void set_RefreshToken(Token value);
    [CompilerGeneratedAttribute]
public string get_RemoteUsername();
    [CompilerGeneratedAttribute]
internal void set_RemoteUsername(string value);
    public bool get_IsSuccess();
    public static bool op_Implicit(AuthenticationResult result);
    public static AuthenticationResultType op_Implicit(AuthenticationResult result);
    public static AuthenticationResult op_Implicit(AuthenticationResultType type);
}
public enum Atlassian.Bitbucket.Authentication.AuthenticationResultType : Enum {
    public int value__;
    public static AuthenticationResultType None;
    public static AuthenticationResultType Success;
    public static AuthenticationResultType Failure;
    public static AuthenticationResultType TwoFactor;
}
internal class Atlassian.Bitbucket.Authentication.Authority : Base {
    public static string DefaultRestRoot;
    public static int RequestTimeout;
    private string _restRootUrl;
    public Authority(RuntimeContext context, string restRootUrl);
    [AsyncStateMachineAttribute("Atlassian.Bitbucket.Authentication.Authority/<AcquireToken>d__4")]
public sealed virtual Task`1<AuthenticationResult> AcquireToken(TargetUri targetUri, Credential credentials, AuthenticationResultType resultType, TokenScope scope);
    [AsyncStateMachineAttribute("Atlassian.Bitbucket.Authentication.Authority/<RefreshToken>d__5")]
public sealed virtual Task`1<AuthenticationResult> RefreshToken(TargetUri targetUri, string refreshToken);
    [AsyncStateMachineAttribute("Atlassian.Bitbucket.Authentication.Authority/<ValidateCredentials>d__6")]
public sealed virtual Task`1<bool> ValidateCredentials(TargetUri targetUri, string username, Credential credentials);
    private static string GetEncodedCredentials(string username, Credential credentials);
    private static string GetEncodedCredentials(string user, string password);
    [AsyncStateMachineAttribute("Atlassian.Bitbucket.Authentication.Authority/<ValidateCredentials>d__9")]
private Task`1<bool> ValidateCredentials(TargetUri targetUri, Secret authorization);
}
public abstract class Atlassian.Bitbucket.Authentication.Base : Base {
    protected IGui Gui { get; }
    protected Base(RuntimeContext context);
    protected IGui get_Gui();
}
public class Atlassian.Bitbucket.Authentication.BasicAuth.BasicAuthAuthenticator : Base {
    public BasicAuthAuthenticator(RuntimeContext context);
    [AsyncStateMachineAttribute("Atlassian.Bitbucket.Authentication.BasicAuth.BasicAuthAuthenticator/<GetAuthAsync>d__1")]
public Task`1<AuthenticationResult> GetAuthAsync(TargetUri targetUri, TokenScope scope, int requestTimeout, Uri restRootUrl, Credential credentials);
}
public class Atlassian.Bitbucket.Authentication.Controls.CredentialsControl : DialogUserControl {
    internal PromptTextBox loginTextBox;
    internal MaskedPasswordBox passwordTextBox;
    private bool _contentLoaded;
    protected virtual void SetFocus();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class Atlassian.Bitbucket.Authentication.Controls.OAuthControl : DialogUserControl {
    private bool _contentLoaded;
    protected virtual void SetFocus();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class Atlassian.Bitbucket.Authentication.Controls.ValidationMessage : UserControl {
    private static double defaultTextChangeThrottle;
    public static DependencyProperty TextProperty;
    public static DependencyProperty ShowErrorProperty;
    public static DependencyProperty TextChangeThrottleProperty;
    public static DependencyProperty ValidatorProperty;
    public static DependencyProperty FillProperty;
    public static DependencyProperty ErrorAdornerTemplateProperty;
    public string Text { get; private set; }
    public bool ShowError { get; public set; }
    public double TextChangeThrottle { get; public set; }
    public PropertyValidator Validator { get; public set; }
    public Brush Fill { get; public set; }
    public string ErrorAdornerTemplate { get; public set; }
    private static ValidationMessage();
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    public string get_Text();
    private void set_Text(string value);
    public bool get_ShowError();
    public void set_ShowError(bool value);
    public double get_TextChangeThrottle();
    public void set_TextChangeThrottle(double value);
    public PropertyValidator get_Validator();
    public void set_Validator(PropertyValidator value);
    public Brush get_Fill();
    public void set_Fill(Brush value);
    public string get_ErrorAdornerTemplate();
    public void set_ErrorAdornerTemplate(string value);
    private bool IsAdornerEnabled();
    [CompilerGeneratedAttribute]
private void <OnPropertyChanged>b__1_0(object s, PropertyChangedEventArgs pce);
}
internal class Atlassian.Bitbucket.Authentication.Gui : Base {
    public Type ServiceType { get; }
    public Gui(RuntimeContext context);
    public sealed virtual Type get_ServiceType();
    public sealed virtual bool ShowViewModel(DialogViewModel viewModel, Func`1<AuthenticationDialogWindow> windowCreator);
    private static void EnsureApplicationResources();
    private static Task StartSTATask(Action action);
}
public interface Atlassian.Bitbucket.Authentication.IAuthentication {
    public abstract virtual Task`1<Credential> InteractiveLogon(TargetUri targetUri);
    public abstract virtual Task`1<Credential> ValidateCredentials(TargetUri targetUri, string username, Credential credentials);
}
public interface Atlassian.Bitbucket.Authentication.IAuthority {
    public abstract virtual Task`1<AuthenticationResult> AcquireToken(TargetUri targetUri, Credential credentials, AuthenticationResultType resultType, TokenScope scope);
    public abstract virtual Task`1<AuthenticationResult> RefreshToken(TargetUri targetUri, string refreshToken);
    public abstract virtual Task`1<bool> ValidateCredentials(TargetUri targetUri, string username, Credential credentials);
}
public interface Atlassian.Bitbucket.Authentication.IGui {
    public abstract virtual bool ShowViewModel(DialogViewModel viewModel, Func`1<AuthenticationDialogWindow> windowCreator);
}
public class Atlassian.Bitbucket.Authentication.OAuth.OAuthAuthenticator : Base {
    public static int RequestTimeout;
    internal static Regex RefreshTokenRegex;
    internal static Regex AccessTokenTokenRegex;
    public string AuthorizeUrlPath { get; }
    public string CallbackUri { get; }
    public string ConsumerKey { get; }
    public string ConsumerSecret { get; }
    public string TokenUri { get; }
    public OAuthAuthenticator(RuntimeContext context);
    private static OAuthAuthenticator();
    public string get_AuthorizeUrlPath();
    public string get_CallbackUri();
    public string get_ConsumerKey();
    public string get_ConsumerSecret();
    public string get_TokenUri();
    [AsyncStateMachineAttribute("Atlassian.Bitbucket.Authentication.OAuth.OAuthAuthenticator/<GetAuthAsync>d__14")]
public Task`1<AuthenticationResult> GetAuthAsync(TargetUri targetUri, TokenScope scope, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Atlassian.Bitbucket.Authentication.OAuth.OAuthAuthenticator/<RefreshAuthAsync>d__15")]
public Task`1<AuthenticationResult> RefreshAuthAsync(TargetUri targetUri, string refreshToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Atlassian.Bitbucket.Authentication.OAuth.OAuthAuthenticator/<Authorize>d__16")]
private Task`1<string> Authorize(TargetUri targetUri, TokenScope scope, CancellationToken cancellationToken);
    private string GetAuthenticationCode(Dictionary`2<string, string> qs);
    private string GetErrorDescription(Dictionary`2<string, string> qs);
    [AsyncStateMachineAttribute("Atlassian.Bitbucket.Authentication.OAuth.OAuthAuthenticator/<GetAccessToken>d__19")]
private Task`1<AuthenticationResult> GetAccessToken(TargetUri targetUri, string authCode);
    [AsyncStateMachineAttribute("Atlassian.Bitbucket.Authentication.OAuth.OAuthAuthenticator/<RefreshAccessToken>d__20")]
private Task`1<AuthenticationResult> RefreshAccessToken(TargetUri targetUri, string currentRefreshToken);
    private Uri GetAuthorizationUri(TokenScope scope);
    private Uri GetRefreshUri();
    private Uri GetGrantUrl(TargetUri targetUri, string authCode);
    private MultipartFormDataContent GetGrantRequestContent(string authCode);
    private Dictionary`2<string, string> GetQueryParameters(string rawUrlData);
    private MultipartFormDataContent GetRefreshRequestContent(string currentRefreshToken);
    private Token FindAccessToken(string responseText);
    private Token FindRefreshToken(string responseText);
    private AuthenticationResult GetAuthenticationResult(Token token, Token refreshToken);
}
public class Atlassian.Bitbucket.Authentication.OAuth.SimpleServer : object {
    [AsyncStateMachineAttribute("Atlassian.Bitbucket.Authentication.OAuth.SimpleServer/<WaitForURLAsync>d__0")]
public static Task`1<string> WaitForURLAsync(string url, CancellationToken cancellationToken);
    private static string GetSuccessString();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class Atlassian.Bitbucket.Authentication.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string AuthorizeLabel { get; }
    public static string CancelText { get; }
    public static string ContinueLabel { get; }
    public static string DoNotHaveAccountText { get; }
    public static string ForgotPasswordText { get; }
    public static string LearnMoreLink { get; }
    public static string LoginLabel { get; }
    public static string LoginPromptText { get; }
    public static string LoginRequired { get; }
    public static string OAuthAuthText { get; }
    public static string PasswordPromptText { get; }
    public static string PasswordRequired { get; }
    public static string SignUpLinkText { get; }
    public static string VerifyText { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_AuthorizeLabel();
    public static string get_CancelText();
    public static string get_ContinueLabel();
    public static string get_DoNotHaveAccountText();
    public static string get_ForgotPasswordText();
    public static string get_LearnMoreLink();
    public static string get_LoginLabel();
    public static string get_LoginPromptText();
    public static string get_LoginRequired();
    public static string get_OAuthAuthText();
    public static string get_PasswordPromptText();
    public static string get_PasswordRequired();
    public static string get_SignUpLinkText();
    public static string get_VerifyText();
}
public class Atlassian.Bitbucket.Authentication.Rest.RestClient : Base {
    internal static Regex UsernameRegex;
    public static string UserUrl { get; }
    public RestClient(RuntimeContext context);
    private static RestClient();
    public static string get_UserUrl();
    [AsyncStateMachineAttribute("Atlassian.Bitbucket.Authentication.Rest.RestClient/<TryGetUser>d__4")]
public Task`1<AuthenticationResult> TryGetUser(TargetUri targetUri, int requestTimeout, Uri restRootUrl, Secret authorization);
    private string FindUsername(string responseText);
}
public class Atlassian.Bitbucket.Authentication.TokenScope : TokenScope {
    public static TokenScope None;
    public static TokenScope Account;
    public static TokenScope AccountWrite;
    public static TokenScope Team;
    public static TokenScope TeamWrite;
    public static TokenScope Repository;
    public static TokenScope RepositoryWrite;
    public static TokenScope RepositoryAdmin;
    public static TokenScope PullRequest;
    public static TokenScope PullRequestWrite;
    public static TokenScope Snippet;
    public static TokenScope SnippetWrite;
    public static TokenScope Issue;
    public static TokenScope IssueWrite;
    public static TokenScope Wiki;
    public static TokenScope Email;
    public static TokenScope Webhook;
    public static TokenScope Project;
    public static TokenScope ProjectWrite;
    private TokenScope(string value);
    private TokenScope(String[] values);
    private TokenScope(HashSet`1<string> set);
    private static TokenScope();
    [IteratorStateMachineAttribute("Atlassian.Bitbucket.Authentication.TokenScope/<EnumerateValues>d__22")]
public static IEnumerable`1<TokenScope> EnumerateValues();
    public static TokenScope op_Addition(TokenScope scope1, TokenScope scope2);
    public static TokenScope op_Subtraction(TokenScope scope1, TokenScope scope2);
    public static TokenScope op_BitwiseOr(TokenScope scope1, TokenScope scope2);
    public static TokenScope op_BitwiseAnd(TokenScope scope1, TokenScope scope2);
    public static TokenScope op_ExclusiveOr(TokenScope scope1, TokenScope scope2);
}
public class Atlassian.Bitbucket.Authentication.ViewModels.CredentialsViewModel : DialogViewModel {
    private string _login;
    [CompilerGeneratedAttribute]
private PropertyValidator`1<string> <LoginValidator>k__BackingField;
    private string _password;
    [CompilerGeneratedAttribute]
private PropertyValidator`1<string> <PasswordValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelValidator <ModelValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <LoginCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <CancelCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <HyperLinkCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <ForgotPasswordCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <SignUpCommand>k__BackingField;
    public string Login { get; public set; }
    public PropertyValidator`1<string> LoginValidator { get; }
    public string Password { get; public set; }
    public PropertyValidator`1<string> PasswordValidator { get; }
    public ModelValidator ModelValidator { get; }
    public ICommand LoginCommand { get; }
    public ICommand CancelCommand { get; }
    public ICommand HyperLinkCommand { get; }
    public ICommand ForgotPasswordCommand { get; }
    public ICommand SignUpCommand { get; }
    public CredentialsViewModel(string username);
    public string get_Login();
    public void set_Login(string value);
    [CompilerGeneratedAttribute]
public PropertyValidator`1<string> get_LoginValidator();
    public string get_Password();
    public void set_Password(string value);
    [CompilerGeneratedAttribute]
public PropertyValidator`1<string> get_PasswordValidator();
    [CompilerGeneratedAttribute]
public ModelValidator get_ModelValidator();
    [CompilerGeneratedAttribute]
public ICommand get_LoginCommand();
    [CompilerGeneratedAttribute]
public ICommand get_CancelCommand();
    [CompilerGeneratedAttribute]
public ICommand get_HyperLinkCommand();
    [CompilerGeneratedAttribute]
public ICommand get_ForgotPasswordCommand();
    [CompilerGeneratedAttribute]
public ICommand get_SignUpCommand();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(object _);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_1(object _);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_4(object s, PropertyChangedEventArgs e);
}
public class Atlassian.Bitbucket.Authentication.ViewModels.OAuthViewModel : DialogViewModel {
    private bool _resultType;
    [CompilerGeneratedAttribute]
private ICommand <LearnMoreCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <ForgotPasswordCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <SignUpCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <OkCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <CancelCommand>k__BackingField;
    public ICommand LearnMoreCommand { get; }
    public ICommand ForgotPasswordCommand { get; }
    public ICommand SignUpCommand { get; }
    public ICommand OkCommand { get; }
    public ICommand CancelCommand { get; }
    public OAuthViewModel(bool resultType);
    [CompilerGeneratedAttribute]
public ICommand get_LearnMoreCommand();
    [CompilerGeneratedAttribute]
public ICommand get_ForgotPasswordCommand();
    [CompilerGeneratedAttribute]
public ICommand get_SignUpCommand();
    [CompilerGeneratedAttribute]
public ICommand get_OkCommand();
    [CompilerGeneratedAttribute]
public ICommand get_CancelCommand();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0(object _);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_1(object _);
}
public class Atlassian.Bitbucket.Authentication.Views.CredentialsWindow : AuthenticationDialogWindow {
    internal CredentialsControl credentialsControl;
    private bool _contentLoaded;
    internal CredentialsViewModel ViewModel { get; }
    public CredentialsWindow(RuntimeContext context, IntPtr parentHwnd);
    public CredentialsWindow(RuntimeContext context);
    private void HandleEsc(object sender, KeyEventArgs e);
    internal CredentialsViewModel get_ViewModel();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class Atlassian.Bitbucket.Authentication.Views.OAuthWindow : AuthenticationDialogWindow {
    internal OAuthControl oauthControl;
    private bool _contentLoaded;
    public OAuthViewModel ViewModel { get; }
    public OAuthWindow(RuntimeContext context, IntPtr parentHwnd);
    public OAuthWindow(RuntimeContext context);
    private void HandleEsc(object sender, KeyEventArgs e);
    public OAuthViewModel get_ViewModel();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[ExtensionAttribute]
public static class Atlassian.Shared.Helpers.StreamExtensions : object {
    [ExtensionAttribute]
public static void WriteStringUtf8(Stream target, string value);
}
[ExtensionAttribute]
public static class Atlassian.Shared.Helpers.TaskExtensions : object {
    [AsyncStateMachineAttribute("Atlassian.Shared.Helpers.TaskExtensions/<RunWithCancellation>d__0`1")]
[ExtensionAttribute]
public static Task`1<TResult> RunWithCancellation(Task`1<TResult> task, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task AsTask(CancellationToken cancellationToken);
}
public abstract class GitHub.Shared.Controls.AuthenticationDialogWindow : Window {
    protected AuthenticationDialogWindow(RuntimeContext context, IntPtr parentHwnd);
    protected AuthenticationDialogWindow(RuntimeContext context);
    private void HandleDialogResult(object sender, PropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0(object s, DependencyPropertyChangedEventArgs e);
}
public abstract class GitHub.Shared.Controls.DialogUserControl : UserControl {
    protected abstract virtual void SetFocus();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0(object s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_1();
}
public class GitHub.Shared.Controls.MaskedPasswordBox : PromptTextBox {
    private static char pwdChar;
    private bool dirtyBaseText;
    private string password;
    public static DependencyProperty PasswordProperty;
    protected string BaseText { get; protected set; }
    public string Text { get; public set; }
    [LocalizabilityAttribute]
public string Password { get; public set; }
    private static MaskedPasswordBox();
    protected string get_BaseText();
    protected void set_BaseText(string value);
    public string get_Text();
    public void set_Text(string value);
    public string get_Password();
    public void set_Password(string value);
    protected virtual void OnTextChanged(TextChangedEventArgs e);
}
public class GitHub.Shared.Controls.PromptTextBox : TextBox {
    public static DependencyProperty PromptTextProperty;
    [LocalizabilityAttribute]
[DefaultValueAttribute("")]
public string PromptText { get; public set; }
    private static PromptTextBox();
    public string get_PromptText();
    public void set_PromptText(string value);
}
public class GitHub.Shared.Converters.AspectRatioConverter : DoubleConverter {
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
[LocalizabilityAttribute]
public class GitHub.Shared.Converters.BooleanToHiddenVisibilityConverter : ValueConverterMarkupExtension`1<BooleanToHiddenVisibilityConverter> {
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[LocalizabilityAttribute]
public class GitHub.Shared.Converters.BooleanToInverseHiddenVisibilityConverter : ValueConverterMarkupExtension`1<BooleanToInverseHiddenVisibilityConverter> {
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[LocalizabilityAttribute]
public class GitHub.Shared.Converters.BooleanToVisibilityConverter : ValueConverterMarkupExtension`1<BooleanToVisibilityConverter> {
    private BooleanToVisibilityConverter converter;
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class GitHub.Shared.Converters.ThicknessConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public abstract class GitHub.Shared.Converters.ValueConverterMarkupExtension`1 : MarkupExtension {
    private static T converter;
    public virtual object ProvideValue(IServiceProvider serviceProvider);
    public abstract virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public static class GitHub.Shared.Helpers.AccessKeysManagerScoping : object {
    public static DependencyProperty IsEnabledProperty;
    private static AccessKeysManagerScoping();
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetIsEnabled(DependencyObject d);
    public static void SetIsEnabled(DependencyObject d, bool value);
    private static void OnIsEnabledChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void HandleAccessKeyPressed(object sender, AccessKeyPressedEventArgs e);
}
public class GitHub.Shared.Helpers.ActionCommand : object {
    private Action`1<object> _commandAction;
    [CompilerGeneratedAttribute]
private EventHandler CanExecuteChanged;
    private bool _isEnabled;
    public bool IsEnabled { get; public set; }
    public ActionCommand(Action commandAction);
    public ActionCommand(Action`1<object> commandAction);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CanExecuteChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual void Execute(object parameter);
}
[ExtensionAttribute]
public static class GitHub.Shared.Helpers.FocusHelper : object {
    [ExtensionAttribute]
public static Task`1<bool> TryMoveFocus(FrameworkElement element, FocusNavigationDirection direction);
    [ExtensionAttribute]
public static Task`1<bool> TryFocus(FrameworkElement element);
    [AsyncStateMachineAttribute("GitHub.Shared.Helpers.FocusHelper/<TryFocusImpl>d__2")]
private static Task`1<bool> TryFocusImpl(FrameworkElement element, Func`2<FrameworkElement, bool> focusAction);
    private static Task`1<FrameworkElement> WaitForElementLoaded(FrameworkElement element);
}
public class GitHub.Shared.Helpers.HyperLinkCommand : ActionCommand {
    private static void ExecuteNavigateUrl(object parameter);
}
public enum GitHub.Shared.ViewModels.AuthenticationDialogResult : Enum {
    public int value__;
    public static AuthenticationDialogResult None;
    public static AuthenticationDialogResult Ok;
    public static AuthenticationDialogResult Cancel;
}
public class GitHub.Shared.ViewModels.DialogViewModel : ViewModel {
    private AuthenticationDialogResult _result;
    private bool _isValid;
    public AuthenticationDialogResult Result { get; internal set; }
    public bool IsValid { get; public set; }
    public AuthenticationDialogResult get_Result();
    internal void set_Result(AuthenticationDialogResult value);
    public bool get_IsValid();
    public void set_IsValid(bool value);
}
public class GitHub.Shared.ViewModels.Validation.ModelValidator : ViewModel {
    private bool _isValid;
    public bool IsValid { get; public set; }
    public ModelValidator(PropertyValidator[] propertyValidators);
    public bool get_IsValid();
    public void set_IsValid(bool value);
}
public class GitHub.Shared.ViewModels.Validation.PropertyValidationResult : object {
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private ValidationStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisplayValidationError>k__BackingField;
    [CompilerGeneratedAttribute]
private static PropertyValidationResult <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private static PropertyValidationResult <Unvalidated>k__BackingField;
    public bool IsValid { get; }
    public ValidationStatus Status { get; }
    public string Message { get; }
    public bool DisplayValidationError { get; }
    public static PropertyValidationResult Success { get; }
    public static PropertyValidationResult Unvalidated { get; }
    public PropertyValidationResult(ValidationStatus validationStatus);
    public PropertyValidationResult(ValidationStatus validationStatus, string message);
    private static PropertyValidationResult();
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
public ValidationStatus get_Status();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public bool get_DisplayValidationError();
    [CompilerGeneratedAttribute]
public static PropertyValidationResult get_Success();
    [CompilerGeneratedAttribute]
public static PropertyValidationResult get_Unvalidated();
}
public abstract class GitHub.Shared.ViewModels.Validation.PropertyValidator : ViewModel {
    private PropertyValidationResult _validationResult;
    public PropertyValidationResult ValidationResult { get; protected set; }
    public static PropertyValidator`2<TObject, TProperty> For(TObject source, Expression`1<Func`2<TObject, TProperty>> property);
    public PropertyValidationResult get_ValidationResult();
    protected void set_ValidationResult(PropertyValidationResult value);
}
public class GitHub.Shared.ViewModels.Validation.PropertyValidator`1 : PropertyValidator {
    private TProperty _currentValue;
    protected TProperty CurrentPropertyValue { get; protected set; }
    protected PropertyValidator`1(PropertyValidator`1<TProperty> previousValidator);
    internal PropertyValidator`1(PropertyValidator`1<TProperty> previousValidator, Func`2<TProperty, PropertyValidationResult> validation);
    protected TProperty get_CurrentPropertyValue();
    protected void set_CurrentPropertyValue(TProperty value);
    protected virtual void NotifyNextValidator(TProperty currentValue);
}
public class GitHub.Shared.ViewModels.Validation.PropertyValidator`2 : PropertyValidator`1<TProperty> {
    internal PropertyValidator`2(TObject source, Expression`1<Func`2<TObject, TProperty>> propertyExpression);
    private static PropertyInfo GetPropertyInfo(Expression`1<Func`2<TObject, TProperty>> propertyExpression);
}
[ExtensionAttribute]
public static class GitHub.Shared.ViewModels.Validation.PropertyValidatorExtensions : object {
    [ExtensionAttribute]
public static PropertyValidator`1<string> Required(PropertyValidator`1<string> validator, string errorMessage);
    [ExtensionAttribute]
public static PropertyValidator`1<TProperty> ValidIfTrue(PropertyValidator`1<TProperty> validator, Func`2<TProperty, bool> predicate, string errorMessage);
}
public enum GitHub.Shared.ViewModels.Validation.ValidationStatus : Enum {
    public int value__;
    public static ValidationStatus Unvalidated;
    public static ValidationStatus Invalid;
    public static ValidationStatus Valid;
}
public class GitHub.Shared.ViewModels.ViewModel : object {
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected void RaisePropertyChangedEvent(string propertyName);
}
