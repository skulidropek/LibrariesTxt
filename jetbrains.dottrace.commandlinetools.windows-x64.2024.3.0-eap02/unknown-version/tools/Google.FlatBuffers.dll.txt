public class Google.FlatBuffers.ByteArrayAllocator : ByteBufferAllocator {
    private Byte[] _buffer;
    public ByteArrayAllocator(Byte[] buffer);
    public virtual void GrowFront(int newSize);
    private void InitBuffer();
}
public class Google.FlatBuffers.ByteBuffer : object {
    private ByteBufferAllocator _buffer;
    private int _pos;
    private static Dictionary`2<Type, int> genericSizes;
    public int Position { get; public set; }
    public int Length { get; }
    public ByteBuffer(ByteBufferAllocator allocator, int position);
    public ByteBuffer(int size);
    public ByteBuffer(Byte[] buffer);
    public ByteBuffer(Byte[] buffer, int pos);
    private static ByteBuffer();
    public int get_Position();
    public void set_Position(int value);
    public int get_Length();
    public void Reset();
    public ByteBuffer Duplicate();
    public void GrowFront(int newSize);
    public Byte[] ToArray(int pos, int len);
    public static int SizeOf();
    public static bool IsSupportedType();
    public static int ArraySize(T[] x);
    public static int ArraySize(ArraySegment`1<T> x);
    public T[] ToArray(int pos, int len);
    public Byte[] ToSizedArray();
    public Byte[] ToFullArray();
    public ArraySegment`1<byte> ToArraySegment(int pos, int len);
    public MemoryStream ToMemoryStream(int pos, int len);
    public static ushort ReverseBytes(ushort input);
    public static UInt32 ReverseBytes(UInt32 input);
    public static ulong ReverseBytes(ulong input);
    protected void WriteLittleEndian(int offset, int count, ulong data);
    protected ulong ReadLittleEndian(int offset, int count);
    private void AssertOffsetAndLength(int offset, int length);
    public void PutSbyte(int offset, sbyte value);
    public void PutByte(int offset, byte value);
    public void PutByte(int offset, byte value, int count);
    public void Put(int offset, byte value);
    public void PutStringUTF8(int offset, string value);
    public void PutShort(int offset, short value);
    public void PutUshort(int offset, ushort value);
    public void PutInt(int offset, int value);
    public void PutUint(int offset, UInt32 value);
    public void PutLong(int offset, long value);
    public void PutUlong(int offset, ulong value);
    public void PutFloat(int offset, float value);
    public void PutDouble(int offset, double value);
    public sbyte GetSbyte(int index);
    public byte Get(int index);
    public string GetStringUTF8(int startPos, int len);
    public short GetShort(int index);
    public ushort GetUshort(int index);
    public int GetInt(int index);
    public UInt32 GetUint(int index);
    public long GetLong(int index);
    public ulong GetUlong(int index);
    public float GetFloat(int index);
    public double GetDouble(int index);
    public int Put(int offset, T[] x);
    public int Put(int offset, ArraySegment`1<T> x);
    public int Put(int offset, IntPtr ptr, int sizeInBytes);
}
public abstract class Google.FlatBuffers.ByteBufferAllocator : object {
    [CompilerGeneratedAttribute]
private Byte[] <Buffer>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public Byte[] Buffer { get; protected set; }
    public int Length { get; protected set; }
    [CompilerGeneratedAttribute]
public Byte[] get_Buffer();
    [CompilerGeneratedAttribute]
protected void set_Buffer(Byte[] value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
protected void set_Length(int value);
    public abstract virtual void GrowFront(int newSize);
}
public class Google.FlatBuffers.ByteBufferUtil : object {
    public static int GetSizePrefix(ByteBuffer bb);
    public static ByteBuffer RemoveSizePrefix(ByteBuffer bb);
}
public class Google.FlatBuffers.checkElementStruct : ValueType {
    public bool elementValid;
    public UInt32 elementOffset;
}
public class Google.FlatBuffers.FlatBufferBuilder : object {
    private int _space;
    private ByteBuffer _bb;
    private int _minAlign;
    private Int32[] _vtable;
    private int _vtableSize;
    private int _objectStart;
    private Int32[] _vtables;
    private int _numVtables;
    private int _vectorNumElems;
    private Dictionary`2<string, StringOffset> _sharedStringMap;
    [CompilerGeneratedAttribute]
private bool <ForceDefaults>k__BackingField;
    public bool ForceDefaults { get; public set; }
    public int Offset { get; }
    public ByteBuffer DataBuffer { get; }
    public FlatBufferBuilder(int initialSize);
    public FlatBufferBuilder(ByteBuffer buffer);
    public void Clear();
    [CompilerGeneratedAttribute]
public bool get_ForceDefaults();
    [CompilerGeneratedAttribute]
public void set_ForceDefaults(bool value);
    public int get_Offset();
    public void Pad(int size);
    private void GrowBuffer();
    public void Prep(int size, int additionalBytes);
    public void PutBool(bool x);
    public void PutSbyte(sbyte x);
    public void PutByte(byte x);
    public void PutShort(short x);
    public void PutUshort(ushort x);
    public void PutInt(int x);
    public void PutUint(UInt32 x);
    public void PutLong(long x);
    public void PutUlong(ulong x);
    public void PutFloat(float x);
    public void Put(T[] x);
    public void Put(ArraySegment`1<T> x);
    public void Put(IntPtr ptr, int sizeInBytes);
    public void PutDouble(double x);
    public void AddBool(bool x);
    public void AddSbyte(sbyte x);
    public void AddByte(byte x);
    public void AddShort(short x);
    public void AddUshort(ushort x);
    public void AddInt(int x);
    public void AddUint(UInt32 x);
    public void AddLong(long x);
    public void AddUlong(ulong x);
    public void AddFloat(float x);
    public void Add(T[] x);
    public void Add(ArraySegment`1<T> x);
    public void Add(IntPtr ptr, int sizeInBytes);
    public void AddDouble(double x);
    public void AddOffset(int off);
    public void StartVector(int elemSize, int count, int alignment);
    public VectorOffset EndVector();
    public VectorOffset CreateVectorOfTables(Offset`1[] offsets);
    public void Nested(int obj);
    public void NotNested();
    public void StartTable(int numfields);
    public void Slot(int voffset);
    public void AddBool(int o, bool x, bool d);
    public void AddBool(int o, Nullable`1<bool> x);
    public void AddSbyte(int o, sbyte x, sbyte d);
    public void AddSbyte(int o, Nullable`1<sbyte> x);
    public void AddByte(int o, byte x, byte d);
    public void AddByte(int o, Nullable`1<byte> x);
    public void AddShort(int o, short x, int d);
    public void AddShort(int o, Nullable`1<short> x);
    public void AddUshort(int o, ushort x, ushort d);
    public void AddUshort(int o, Nullable`1<ushort> x);
    public void AddInt(int o, int x, int d);
    public void AddInt(int o, Nullable`1<int> x);
    public void AddUint(int o, UInt32 x, UInt32 d);
    public void AddUint(int o, Nullable`1<UInt32> x);
    public void AddLong(int o, long x, long d);
    public void AddLong(int o, Nullable`1<long> x);
    public void AddUlong(int o, ulong x, ulong d);
    public void AddUlong(int o, Nullable`1<ulong> x);
    public void AddFloat(int o, float x, double d);
    public void AddFloat(int o, Nullable`1<float> x);
    public void AddDouble(int o, double x, double d);
    public void AddDouble(int o, Nullable`1<double> x);
    public void AddOffset(int o, int x, int d);
    public StringOffset CreateString(string s);
    public StringOffset CreateSharedString(string s);
    public void AddStruct(int voffset, int x, int d);
    public int EndTable();
    public void Required(int table, int field);
    protected void Finish(int rootTable, bool sizePrefix);
    public void Finish(int rootTable);
    public void FinishSizePrefixed(int rootTable);
    public ByteBuffer get_DataBuffer();
    public Byte[] SizedByteArray();
    protected void Finish(int rootTable, string fileIdentifier, bool sizePrefix);
    public void Finish(int rootTable, string fileIdentifier);
    public void FinishSizePrefixed(int rootTable, string fileIdentifier);
}
public static class Google.FlatBuffers.FlatBufferConstants : object {
    public static int FileIdentifierLength;
    public static int SizePrefixLength;
    public static void FLATBUFFERS_23_5_26();
}
public interface Google.FlatBuffers.IFlatbufferObject {
    public ByteBuffer ByteBuffer { get; }
    public abstract virtual void __init(int _i, ByteBuffer _bb);
    public abstract virtual ByteBuffer get_ByteBuffer();
}
public class Google.FlatBuffers.Offset`1 : ValueType {
    public int Value;
    public Offset`1(int value);
}
public class Google.FlatBuffers.Options : object {
    public static int DEFAULT_MAX_DEPTH;
    public static int DEFAULT_MAX_TABLES;
    private int max_depth;
    private int max_tables;
    private bool string_end_check;
    private bool alignment_check;
    public int maxDepth { get; public set; }
    public int maxTables { get; public set; }
    public bool stringEndCheck { get; public set; }
    public bool alignmentCheck { get; public set; }
    public Options(int maxDepth, int maxTables, bool stringEndCheck, bool alignmentCheck);
    public int get_maxDepth();
    public void set_maxDepth(int value);
    public int get_maxTables();
    public void set_maxTables(int value);
    public bool get_stringEndCheck();
    public void set_stringEndCheck(bool value);
    public bool get_alignmentCheck();
    public void set_alignmentCheck(bool value);
}
public class Google.FlatBuffers.StringOffset : ValueType {
    public int Value;
    public StringOffset(int value);
}
public class Google.FlatBuffers.Struct : ValueType {
    [CompilerGeneratedAttribute]
private int <bb_pos>k__BackingField;
    [CompilerGeneratedAttribute]
private ByteBuffer <bb>k__BackingField;
    public int bb_pos { get; private set; }
    public ByteBuffer bb { get; private set; }
    public Struct(int _i, ByteBuffer _bb);
    [CompilerGeneratedAttribute]
public int get_bb_pos();
    [CompilerGeneratedAttribute]
private void set_bb_pos(int value);
    [CompilerGeneratedAttribute]
public ByteBuffer get_bb();
    [CompilerGeneratedAttribute]
private void set_bb(ByteBuffer value);
}
public class Google.FlatBuffers.Table : ValueType {
    [CompilerGeneratedAttribute]
private int <bb_pos>k__BackingField;
    [CompilerGeneratedAttribute]
private ByteBuffer <bb>k__BackingField;
    public int bb_pos { get; private set; }
    public ByteBuffer bb { get; private set; }
    public ByteBuffer ByteBuffer { get; }
    public Table(int _i, ByteBuffer _bb);
    [CompilerGeneratedAttribute]
public int get_bb_pos();
    [CompilerGeneratedAttribute]
private void set_bb_pos(int value);
    [CompilerGeneratedAttribute]
public ByteBuffer get_bb();
    [CompilerGeneratedAttribute]
private void set_bb(ByteBuffer value);
    public ByteBuffer get_ByteBuffer();
    public int __offset(int vtableOffset);
    public static int __offset(int vtableOffset, int offset, ByteBuffer bb);
    public int __indirect(int offset);
    public static int __indirect(int offset, ByteBuffer bb);
    public string __string(int offset);
    public int __vector_len(int offset);
    public int __vector(int offset);
    public Nullable`1<ArraySegment`1<byte>> __vector_as_arraysegment(int offset);
    public T[] __vector_as_array(int offset);
    public T __union(int offset);
    public static bool __has_identifier(ByteBuffer bb, string ident);
    public static int CompareStrings(int offset_1, int offset_2, ByteBuffer bb);
    public static int CompareStrings(int offset_1, Byte[] key, ByteBuffer bb);
}
public class Google.FlatBuffers.VectorOffset : ValueType {
    public int Value;
    public VectorOffset(int value);
}
public class Google.FlatBuffers.Verifier : object {
    private ByteBuffer verifier_buffer;
    private Options verifier_options;
    private int depth_cnt;
    private int num_tables_cnt;
    public static int SIZE_BYTE;
    public static int SIZE_INT;
    public static int SIZE_U_OFFSET;
    public static int SIZE_S_OFFSET;
    public static int SIZE_V_OFFSET;
    public static int SIZE_PREFIX_LENGTH;
    public static int FLATBUFFERS_MAX_BUFFER_SIZE;
    public static int FILE_IDENTIFIER_LENGTH;
    public ByteBuffer Buf { get; public set; }
    public Options options { get; public set; }
    public int depth { get; public set; }
    public int numTables { get; public set; }
    public Verifier(ByteBuffer buf, Options options);
    public ByteBuffer get_Buf();
    public void set_Buf(ByteBuffer value);
    public Options get_options();
    public void set_options(Options value);
    public int get_depth();
    public void set_depth(int value);
    public int get_numTables();
    public void set_numTables(int value);
    public Verifier SetMaxDepth(int value);
    public Verifier SetMaxTables(int value);
    public Verifier SetAlignmentCheck(bool value);
    public Verifier SetStringCheck(bool value);
    private bool BufferHasIdentifier(ByteBuffer buf, UInt32 startPos, string identifier);
    private UInt32 ReadUOffsetT(ByteBuffer buf, UInt32 pos);
    private int ReadSOffsetT(ByteBuffer buf, int pos);
    private short ReadVOffsetT(ByteBuffer buf, int pos);
    private short GetVRelOffset(int pos, short vtableOffset);
    private UInt32 GetVOffset(UInt32 tablePos, short vtableOffset);
    private bool CheckComplexity();
    private bool CheckAlignment(UInt32 element, ulong align);
    private bool CheckElement(UInt32 pos, ulong elementSize);
    private bool CheckScalar(UInt32 pos, ulong elementSize);
    private bool CheckOffset(UInt32 offset);
    private checkElementStruct CheckVectorOrString(UInt32 pos, ulong elementSize);
    private bool CheckString(UInt32 pos);
    private bool CheckVector(UInt32 pos, ulong elementSize);
    private bool CheckTable(UInt32 tablePos, VerifyTableAction verifyAction);
    private bool CheckStringFunc(Verifier verifier, UInt32 pos);
    private bool CheckVectorOfObjects(UInt32 pos, VerifyTableAction verifyAction);
    private bool CheckIndirectOffset(UInt32 pos);
    private bool CheckBufferFromStart(string identifier, UInt32 startPos, VerifyTableAction verifyAction);
    private UInt32 GetIndirectOffset(UInt32 pos);
    public bool VerifyTableStart(UInt32 tablePos);
    public bool VerifyTableEnd(UInt32 tablePos);
    public bool VerifyField(UInt32 tablePos, short offsetId, ulong elementSize, ulong align, bool required);
    public bool VerifyString(UInt32 tablePos, short vOffset, bool required);
    public bool VerifyVectorOfData(UInt32 tablePos, short vOffset, ulong elementSize, bool required);
    public bool VerifyVectorOfStrings(UInt32 tablePos, short offsetId, bool required);
    public bool VerifyVectorOfTables(UInt32 tablePos, short offsetId, VerifyTableAction verifyAction, bool required);
    public bool VerifyTable(UInt32 tablePos, short offsetId, VerifyTableAction verifyAction, bool required);
    public bool VerifyNestedBuffer(UInt32 tablePos, short offsetId, VerifyTableAction verifyAction, bool required);
    public bool VerifyUnionData(UInt32 pos, ulong elementSize, ulong align);
    public bool VerifyUnionString(UInt32 pos);
    public bool VerifyUnion(UInt32 tablePos, short typeIdVOffset, short valueVOffset, VerifyUnionAction verifyAction, bool required);
    public bool VerifyVectorOfUnion(UInt32 tablePos, short typeOffsetId, short offsetId, VerifyUnionAction verifyAction, bool required);
    public bool VerifyBuffer(string identifier, bool sizePrefixed, VerifyTableAction verifyAction);
}
public class Google.FlatBuffers.VerifyTableAction : MulticastDelegate {
    public VerifyTableAction(object object, IntPtr method);
    public virtual bool Invoke(Verifier verifier, UInt32 tablePos);
    public virtual IAsyncResult BeginInvoke(Verifier verifier, UInt32 tablePos, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class Google.FlatBuffers.VerifyUnionAction : MulticastDelegate {
    public VerifyUnionAction(object object, IntPtr method);
    public virtual bool Invoke(Verifier verifier, byte typeId, UInt32 tablePos);
    public virtual IAsyncResult BeginInvoke(Verifier verifier, byte typeId, UInt32 tablePos, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
