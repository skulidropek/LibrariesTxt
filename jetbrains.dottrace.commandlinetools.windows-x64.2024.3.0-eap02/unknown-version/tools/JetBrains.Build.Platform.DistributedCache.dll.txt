[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Build.Platform.DistributedCache.ActionStatisticsCollector : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`4<string, string, string, Status> OnGetFromLocalCache;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`4<string, string, string, Status> OnPutToLocalCache;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`6<string, string, string, Status, TimeSpan, string> OnGeneratorCalled;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`7<string, string, string, Status, long, TimeSpan, string> OnDownloadFromRemoteCache;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`7<string, string, string, Status, long, TimeSpan, string> OnUploadToRemoteCache;
    public sealed virtual void GetFromLocalCache(string toolName, string buildUnitName, string hash, Status status);
    public sealed virtual void PutToLocalCache(string toolName, string buildUnitName, string hash, Status status);
    public sealed virtual void GeneratorCalled(string toolName, string buildUnitName, string hash, Status status, TimeSpan duration, string message);
    public sealed virtual void DownloadFromRemoteCache(string toolName, string buildUnitName, string hash, Status status, long size, TimeSpan duration, string message);
    public sealed virtual void UploadToRemoteCache(string toolName, string buildUnitName, string hash, Status status, long size, TimeSpan duration, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Build.Platform.DistributedCache.CacheMissException : Exception {
    public string ToolName;
    public string SourceHash;
    public string BuildUnitName;
    public CacheMissException(string toolName, string sourceHash);
    public CacheMissException(string toolName, string sourceHash, string buildUnitName);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Build.Platform.DistributedCache.DebugHasher : object {
    private IHasher _hasher;
    private Func`1<IHasher> _createHasher;
    private Action`1<string> _logger;
    public string Hash { get; }
    public long ProcessedBytes { get; }
    public DebugHasher(Action`1<string> logger, Func`1<IHasher> createHasher);
    public sealed virtual IHasher Append(Byte[] data, int offset, int count);
    public sealed virtual IHasher Append(Byte[] data);
    public sealed virtual IHasher Append(string text);
    public sealed virtual IHasher Append(Stream stream);
    public sealed virtual IHasher AppendFile(string path, string rootPath);
    public sealed virtual IHasher Append(Assembly assembly);
    public sealed virtual IHasher Append(char value);
    public sealed virtual IHasher Append(byte value);
    public sealed virtual IHasher Append(short value);
    public sealed virtual IHasher Append(ushort value);
    public sealed virtual IHasher Append(int value);
    public sealed virtual IHasher Append(UInt32 value);
    public sealed virtual IHasher Append(long value);
    public sealed virtual IHasher Append(ulong value);
    public sealed virtual IHasher Append(float value);
    public sealed virtual IHasher Append(double value);
    public sealed virtual IHasher Append(bool value);
    public sealed virtual string get_Hash();
    public sealed virtual long get_ProcessedBytes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Build.Platform.DistributedCache.DelayedStatisticsSender : StatisticsSaver {
    private string _path;
    private string _url;
    private string _lockFilePath;
    public TimeSpan Timeout;
    public int MaxPackSize;
    public TimeSpan LockAcquireInterval;
    public TimeSpan FileScanInterval;
    public TimeSpan RetryOnErrorInterval;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _dispose;
    [NullableAttribute("2")]
private Thread _thread;
    private static ConcurrentDictionary`2<string, object> ThreadStartLocks;
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _threadStarted;
    public DelayedStatisticsSender(string url, string path, Action`1<string> logger);
    private static DelayedStatisticsSender();
    private void ThreadProc();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Build.Platform.DistributedCache.DistributedCache : object {
    private static string DateFormat;
    private static ConcurrentDictionary`2<string, DateTime> BadDownloadUrls;
    private static ConcurrentDictionary`2<string, DateTime> BadUploadUrls;
    private static string EnvVarPrefix;
    public static string UploadNewCacheFilesEnvVariable;
    public static string LocalCachePathEnvVariable;
    public static string RemoteCacheUrlEnvVariable;
    public static string RemoteCacheTokenEnvVariable;
    public static string EnabledEnvVariable;
    public static string DebugEnvVariable;
    public static string AlwaysCallGeneratorEnvVariable;
    public static string MinDownloadBytesPerSecEnvVariable;
    public static string MinUploadBytesPerSecEnvVariable;
    public static string BadRemoteUrlIntervalEnvVariable;
    public static string RemoteCacheTimeoutEnvVariable;
    public static string MinimalWaitIntervalEnvVariable;
    public static string FailOnMissEnvVariable;
    public static string SyslogHostEnvVariable;
    public static string SyslogPortEnvVariable;
    public static string StatsUrlEnvVariable;
    public static string StatsTimeoutEnvVariable;
    public static string StatsLockAcquireIntervalEnvVariable;
    public static string StatsFileScanIntervalEnvVariable;
    public static string StatsRetryOnErrorIntervalEnvVariable;
    public static string StatsMaxPackSizeEnvVariable;
    public static string HashBufferSizeEnvVariable;
    public static string WarningsAsInfoEnvVariable;
    public static int DefaultLocalRemoteTimeout;
    public static int DefaultTeamcityRemoteTimeout;
    public static int DefaultLocalMinimalWait;
    public static int DefaultTeamcityMinimalWait;
    public static int DefaultStatsTimeout;
    [NullableAttribute("2")]
public static string DefaultStatsUrl;
    public static int DefaultStatsLockAcquireInterval;
    public static int DefaultStatsFileScanInterval;
    public static int DefaultStatsRetryOnErrorInterval;
    public static int DefaultStatsMaxPackSize;
    [NullableAttribute("2")]
public IStatisticCollector modreq(System.Runtime.CompilerServices.IsVolatile) StatisticCollector;
    public String modreq(System.Runtime.CompilerServices.IsVolatile) LocalCachePath;
    [NullableAttribute("2")]
public String modreq(System.Runtime.CompilerServices.IsVolatile) RemoteCacheUrl;
    [NullableAttribute("2")]
public String modreq(System.Runtime.CompilerServices.IsVolatile) RemoteCacheToken;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<string> <DebugLogger>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<string> <InfoLogger>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<string> <WarningLogger>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<string> <ErrorLogger>k__BackingField;
    public Boolean modreq(System.Runtime.CompilerServices.IsVolatile) CacheEnabled;
    public Boolean modreq(System.Runtime.CompilerServices.IsVolatile) DebugEnabled;
    public Boolean modreq(System.Runtime.CompilerServices.IsVolatile) UploadToRemoteCache;
    public Boolean modreq(System.Runtime.CompilerServices.IsVolatile) AlwaysCallGenerator;
    public Boolean modreq(System.Runtime.CompilerServices.IsVolatile) FailOnMiss;
    [NullableAttribute("2")]
public String modreq(System.Runtime.CompilerServices.IsVolatile) SyslogHost;
    public Int32 modreq(System.Runtime.CompilerServices.IsVolatile) SyslogPort;
    public TimeSpan LocalCacheCleanInterval;
    public long LocalCacheMaxSize;
    public TimeSpan LocalCacheMaxTime;
    public TimeSpan RemoteCacheTimeout;
    public TimeSpan BadRemoteUrlInterval;
    public Int32 modreq(System.Runtime.CompilerServices.IsVolatile) MinimalDownloadBytesPerSec;
    public Int32 modreq(System.Runtime.CompilerServices.IsVolatile) MinimalUploadBytesPerSec;
    public TimeSpan MinimalWaitInterval;
    [NullableAttribute("2")]
public string StatsUrl;
    public TimeSpan StatsTimeout;
    public TimeSpan StatsLockAcquireInterval;
    public TimeSpan StatsFileScanInterval;
    public TimeSpan StatsRetryOnErrorInterval;
    public Int32 modreq(System.Runtime.CompilerServices.IsVolatile) StatsMaxPackSize;
    public Int32 modreq(System.Runtime.CompilerServices.IsVolatile) HashBufferSize;
    [NullableAttribute("2")]
public string HashingSeed;
    public Boolean modreq(System.Runtime.CompilerServices.IsVolatile) WarningsAsInfo;
    [NullableAttribute("2")]
private SyslogClient _syslogClient;
    private CacheFormatHandler`1<Stream> StreamFormat;
    [CompilerGeneratedAttribute]
private string <ToolName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildUnitName>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<string> DebugLogger { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<string> InfoLogger { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<string> WarningLogger { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<string> ErrorLogger { get; private set; }
    public string ToolName { get; }
    public string BuildUnitName { get; }
    public DistributedCache(string toolName, string buildUnitName);
    public DistributedCache(string toolName, string buildUnitName, IStatisticCollector collector);
    private static DistributedCache();
    public static Nullable`1<DateTime> IsUploadUrlBad(string url);
    public static Nullable`1<DateTime> IsDownloadUrlBad(string url);
    public static void ResetBadUrls();
    [CompilerGeneratedAttribute]
public Action`1<string> get_DebugLogger();
    [CompilerGeneratedAttribute]
private void set_DebugLogger(Action`1<string> value);
    [CompilerGeneratedAttribute]
public Action`1<string> get_InfoLogger();
    [CompilerGeneratedAttribute]
private void set_InfoLogger(Action`1<string> value);
    [CompilerGeneratedAttribute]
public Action`1<string> get_WarningLogger();
    [CompilerGeneratedAttribute]
private void set_WarningLogger(Action`1<string> value);
    [CompilerGeneratedAttribute]
public Action`1<string> get_ErrorLogger();
    [CompilerGeneratedAttribute]
private void set_ErrorLogger(Action`1<string> value);
    public void SetupLoggers(Action`1<string> debug, Action`1<string> info, Action`1<string> warning, Action`1<string> error);
    public void SetupSingleLogger(Action`1<string> logger);
    public DistributedCache WithStats(IStatisticCollector collector);
    private string FormatMessage(string message);
    private void Debug(string message);
    protected void Info(string message);
    protected void Warning(string message);
    protected void Error(string message);
    [CompilerGeneratedAttribute]
public string get_ToolName();
    [CompilerGeneratedAttribute]
public string get_BuildUnitName();
    private string GetAndLogEnvVar(string name);
    public IHasher CreateHasher();
    public Task`1<Stream> TryGetCacheStream(string sourceHash);
    [AsyncStateMachineAttribute("JetBrains.Build.Platform.DistributedCache.DistributedCache/<TryGetCacheCore>d__105`1")]
protected Task`1<TOutput> TryGetCacheCore(string sourceHash, CacheFormatHandler`1<TOutput> format);
    public Task TryPutCacheStream(string sourceHash, Stream stream);
    [AsyncStateMachineAttribute("JetBrains.Build.Platform.DistributedCache.DistributedCache/<TryPutCacheCore>d__107`1")]
public Task TryPutCacheCore(string sourceHash, TOutput data, CacheFormatHandler`1<TOutput> format);
    public Task`1<Stream> DoAsync(string sourceHash, Func`1<Task`1<Stream>> generator);
    [AsyncStateMachineAttribute("JetBrains.Build.Platform.DistributedCache.DistributedCache/<DoCacheCoreAsync>d__109`2")]
public Task`1<TOutput> DoCacheCoreAsync(string sourceHash, CacheFormatHandler`1<TOutput> format, TArg arg, Func`2<TArg, Task`1<GeneratorResult`1<TOutput>>> generator);
    private string GetSubPathByHash(string hash, string fileext);
    private string GetLocalCachePathByHash(string hash, string fileext);
    public void CleanupCache();
    [AsyncStateMachineAttribute("JetBrains.Build.Platform.DistributedCache.DistributedCache/<PutResultToLocalCacheCore>d__113`1")]
private Task PutResultToLocalCacheCore(string sourceHash, TOutput data, CacheFormatHandler`1<TOutput> format);
    private string GetUrlByHash(string hash, string fileext, string remoteCacheUrl);
    [AsyncStateMachineAttribute("JetBrains.Build.Platform.DistributedCache.DistributedCache/<DownloadResultFromRemoteCache>d__115")]
private Task`1<bool> DownloadResultFromRemoteCache(string sourceHash, string fileext);
    [AsyncStateMachineAttribute("JetBrains.Build.Platform.DistributedCache.DistributedCache/<UploadResultToRemoteCache>d__116")]
private Task UploadResultToRemoteCache(string sourceHash, string fileext);
    [AsyncStateMachineAttribute("JetBrains.Build.Platform.DistributedCache.DistributedCache/<DownloadFromRemoteCacheToFile>d__117")]
private Task`1<bool> DownloadFromRemoteCacheToFile(string sourceHash, string filePath, string fileext, string remoteCacheUrl);
    [AsyncStateMachineAttribute("JetBrains.Build.Platform.DistributedCache.DistributedCache/<UploadFileToRemoteCache>d__118")]
private Task UploadFileToRemoteCache(string filePath, string sourceHash, string fileext, string remoteCacheUrl);
    protected void CatchAndLog(Action action);
    [AsyncStateMachineAttribute("JetBrains.Build.Platform.DistributedCache.DistributedCache/<WriteTempFileAsync>d__120")]
private Task`1<bool> WriteTempFileAsync(string targetFile, Func`2<string, Task`1<bool>> generator);
    [AsyncStateMachineAttribute("JetBrains.Build.Platform.DistributedCache.DistributedCache/<CatchAndLogAsync>d__121")]
protected Task CatchAndLogAsync(Func`1<Task> action);
    [CompilerGeneratedAttribute]
private IHasher <CreateHasher>b__101_0();
    [CompilerGeneratedAttribute]
internal static TOutput <TryGetCacheCore>g__ReadFromFile|105_0(string filepath, Func`2<string, TOutput> reader, string sourceHashForDiagnostics, DistributedCache owner);
    [CompilerGeneratedAttribute]
internal static void <TryGetCacheCore>g__ExtendExpiration|105_1(string filepath, TimeSpan localCacheCleanInterval);
}
public class JetBrains.Build.Platform.DistributedCache.GeneratorResult`1 : ValueType {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private TResult <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DontWriteToCache>k__BackingField;
    [NullableAttribute("1")]
public TResult Result { get; public set; }
    public bool DontWriteToCache { get; public set; }
    [NullableContextAttribute("1")]
public GeneratorResult`1(TResult Result, bool DontWriteToCache);
    [IsReadOnlyAttribute]
[NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public TResult get_Result();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Result(TResult value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_DontWriteToCache();
    [CompilerGeneratedAttribute]
public void set_DontWriteToCache(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(GeneratorResult`1<TResult> left, GeneratorResult`1<TResult> right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(GeneratorResult`1<TResult> left, GeneratorResult`1<TResult> right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(GeneratorResult`1<TResult> other);
    [IsReadOnlyAttribute]
[NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void Deconstruct(TResult& Result, Boolean& DontWriteToCache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Build.Platform.DistributedCache.Hasher : object {
    private bool OptionHashAssemblyFileBody;
    private IncrementalHash _incrementalHash;
    [CompilerGeneratedAttribute]
private long <ProcessedBytes>k__BackingField;
    [NullableAttribute("2")]
private string _finalHash;
    private static ConcurrentDictionary`2<Tuple`3<string, DateTime, long>, Byte[]> HashStore;
    public static int DefaultHashBufferSize;
    [NullableAttribute("2")]
private Byte[] _buffer;
    private int _hashBufferSize;
    public long ProcessedBytes { get; private set; }
    public string Hash { get; }
    public Hasher(int hashBufferSize);
    private static Hasher();
    [CompilerGeneratedAttribute]
public sealed virtual long get_ProcessedBytes();
    [CompilerGeneratedAttribute]
private void set_ProcessedBytes(long value);
    public sealed virtual string get_Hash();
    private Byte[] GetFileHash(string path);
    public sealed virtual IHasher Append(Byte[] data, int offset, int count);
    public sealed virtual IHasher Append(Stream stream);
    public sealed virtual IHasher AppendFile(string path, string rootPath);
    public sealed virtual IHasher Append(Assembly assembly);
    public sealed virtual IHasher Append(Byte[] data);
    public sealed virtual IHasher Append(string value);
    public sealed virtual IHasher Append(char value);
    public sealed virtual IHasher Append(byte value);
    public sealed virtual IHasher Append(short value);
    public sealed virtual IHasher Append(ushort value);
    public sealed virtual IHasher Append(int value);
    public sealed virtual IHasher Append(UInt32 value);
    public sealed virtual IHasher Append(long value);
    public sealed virtual IHasher Append(ulong value);
    public sealed virtual IHasher Append(float value);
    public sealed virtual IHasher Append(double value);
    public sealed virtual IHasher Append(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.Build.Platform.DistributedCache.HasherAppendExtension : object {
    [ExtensionAttribute]
public static IHasher AppendBlob(IHasher hasher, Byte[] data);
    [ExtensionAttribute]
public static IHasher AppendBlob(IHasher hasher, Byte[] data, int offset, int count);
    [ExtensionAttribute]
public static IHasher AppendText(IHasher hasher, string text);
    [ExtensionAttribute]
public static IHasher AppendStream(IHasher hasher, Stream stream);
    [ExtensionAttribute]
public static IHasher AppendAssembly(IHasher hasher, Assembly assembly);
    [ExtensionAttribute]
public static IHasher AppendChar(IHasher hasher, char value);
    [ExtensionAttribute]
public static IHasher AppendByte(IHasher hasher, byte value);
    [ExtensionAttribute]
public static IHasher AppendShort(IHasher hasher, short value);
    [ExtensionAttribute]
public static IHasher AppendUShort(IHasher hasher, ushort value);
    [ExtensionAttribute]
public static IHasher AppendInt(IHasher hasher, int value);
    [ExtensionAttribute]
public static IHasher AppendUInt(IHasher hasher, UInt32 value);
    [ExtensionAttribute]
public static IHasher AppendLong(IHasher hasher, long value);
    [ExtensionAttribute]
public static IHasher AppendULong(IHasher hasher, ulong value);
    [ExtensionAttribute]
public static IHasher AppendFloat(IHasher hasher, float value);
    [ExtensionAttribute]
public static IHasher AppendDouble(IHasher hasher, double value);
    [ExtensionAttribute]
public static IHasher AppendBool(IHasher hasher, bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Build.Platform.DistributedCache.HttpStatisticsSender : PduStatisticsHandler {
    private string _url;
    private Guid _sessionId;
    public TimeSpan Timeout;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<string> _logger;
    private TeamcityPropertiesReader _tcPropReader;
    public HttpStatisticsSender(string url, Action`1<string> logger);
    protected virtual void HandlePdu(StatPdu pdu);
}
[NullableContextAttribute("1")]
public interface JetBrains.Build.Platform.DistributedCache.IHasher {
    public string Hash { get; }
    public long ProcessedBytes { get; }
    public abstract virtual IHasher Append(Byte[] data, int offset, int count);
    public abstract virtual IHasher Append(Stream stream);
    public abstract virtual IHasher Append(Assembly assembly);
    public abstract virtual IHasher AppendFile(string path, string rootPath);
    public abstract virtual IHasher Append(string text);
    public abstract virtual IHasher Append(Byte[] data);
    public abstract virtual IHasher Append(char value);
    public abstract virtual IHasher Append(byte value);
    public abstract virtual IHasher Append(short value);
    public abstract virtual IHasher Append(ushort value);
    public abstract virtual IHasher Append(int value);
    public abstract virtual IHasher Append(UInt32 value);
    public abstract virtual IHasher Append(long value);
    public abstract virtual IHasher Append(ulong value);
    public abstract virtual IHasher Append(float value);
    public abstract virtual IHasher Append(double value);
    public abstract virtual IHasher Append(bool value);
    public abstract virtual string get_Hash();
    public abstract virtual long get_ProcessedBytes();
}
[NullableContextAttribute("1")]
public interface JetBrains.Build.Platform.DistributedCache.IStatisticCollector {
    public abstract virtual void GetFromLocalCache(string toolName, string buildUnitName, string hash, Status status);
    public abstract virtual void PutToLocalCache(string toolName, string buildUnitName, string hash, Status status);
    public abstract virtual void GeneratorCalled(string toolName, string buildUnitName, string hash, Status status, TimeSpan duration, string message);
    public abstract virtual void DownloadFromRemoteCache(string toolName, string buildUnitName, string hash, Status status, long size, TimeSpan duration, string message);
    public abstract virtual void UploadToRemoteCache(string toolName, string buildUnitName, string hash, Status status, long size, TimeSpan duration, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.Build.Platform.DistributedCache.PduStatisticsHandler : object {
    protected abstract virtual void HandlePdu(StatPdu pdu);
    public sealed virtual void GetFromLocalCache(string toolName, string buildUnitName, string hash, Status status);
    public sealed virtual void PutToLocalCache(string toolName, string buildUnitName, string hash, Status status);
    public sealed virtual void GeneratorCalled(string toolName, string buildUnitName, string hash, Status status, TimeSpan duration, string message);
    public sealed virtual void DownloadFromRemoteCache(string toolName, string buildUnitName, string hash, Status status, long size, TimeSpan duration, string message);
    public sealed virtual void UploadToRemoteCache(string toolName, string buildUnitName, string hash, Status status, long size, TimeSpan duration, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Build.Platform.DistributedCache.StatisticsSaver : PduStatisticsHandler {
    private Guid _sessionId;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _seqNumber;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<string> _logger;
    private string _path;
    private TeamcityPropertiesReader _tcPropReader;
    public StatisticsSaver(string path, Action`1<string> logger);
    protected virtual void HandlePdu(StatPdu pdu);
}
public enum JetBrains.Build.Platform.DistributedCache.Status : Enum {
    public int value__;
    public static Status Ok;
    public static Status NotFound;
    public static Status BadUrl;
    public static Status TransferTimeout;
    public static Status ConnectionTimeout;
    public static Status TransferError;
    public static Status GeneratorError;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.Build.Platform.DistributedCache.SyslogClient : object {
    private int _stackHeight;
    private bool _useLocalTime;
    private UdpClient _udpClient;
    private int _facility;
    [NullableAttribute("2")]
private string _fixedSender;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <MessageFormat>k__BackingField;
    [NullableAttribute("2")]
public string MessageFormat { get; public set; }
    public SyslogClient(string hostName, int port, int facility, string sender, bool useLocalTime);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_MessageFormat();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_MessageFormat(string value);
    public void Log(LogLevel logLevel, string sender, string message, Object[] args);
    public void Log(LogLevel logLevel, string message, Object[] args);
    private void LogWithSender(LogLevel logLevel, string message, Object[] args);
    public void Emergency(object arg);
    public void Emergency(string message, Object[] args);
    public void Emergency(string message, Object[] args);
    public void Alert(object arg);
    public void Alert(string message, Object[] args);
    public void Alert(string message, Object[] args);
    public void Critical(object arg);
    public void Critical(string message, Object[] args);
    public void Critical(string message, Object[] args);
    public void Error(object arg);
    public void Error(string message, Object[] args);
    public void Error(string message, Object[] args);
    public void Warn(object arg);
    public void Warn(string message, Object[] args);
    public void Warn(string message, Object[] args);
    public void Notice(object arg);
    public void Notice(string message, Object[] args);
    public void Notice(string message, Object[] args);
    public void Info(object arg);
    public void Info(string message, Object[] args);
    public void Info(string message, Object[] args);
    public void Debug(object arg);
    public void Debug(string message, Object[] args);
    public void Debug(string message, Object[] args);
    private void Send(LogLevel logLevel, string message, string sender);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.Build.Platform.DistributedCache.TeamcityPropertiesReader : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<string, string> _configurationProperties;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<string, string> _systemProperties;
    [NullableAttribute("2")]
private string _teamcityBuildPropertiesFileEnvValue;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<string> _logger;
    public TeamcityPropertiesReader(Action`1<string> logger);
    public bool IsRunningOnTeamcity();
    private void AssertRunningOnTeamcity();
    public IEnumerable`1<KeyValuePair`2<string, string>> EnumConfigurationProperties();
    public IEnumerable`1<KeyValuePair`2<string, string>> EnumSystemProperties();
    public string GetConfigurationProperty(string name);
    public string GetSystemProperty(string name);
    public string TryGetConfigurationProperty(string name);
    public string TryGetSystemProperty(string name);
    private void TryLoadConfigurationPropertiesFile();
    private void TryLoadSystemPropertiesFile();
    [NullableContextAttribute("2")]
private string TryGetSystemPropertiesPath();
    private IDictionary`2<string, string> ReadJavaPropertiesXml(string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class JetBrains.Build.Platform.DistributedCache.Utils : object {
    [ExtensionAttribute]
public static string BytesToString(Byte[] data);
    public static string GetRelativePath(string path, string baseDir);
    public static string GetDirNameOrThrow(string path);
    public static string GetFileNameOrThrow(string path);
    public static bool SafeMoveFile(string srcPath, string dstPath);
    public static void SafeDeleteFile(string path);
    public static void DeleteFile(string path);
    public static void CreateDirForFile(string path);
    public static string GetAndLogEnvVar(string name, Action`1<string> logger);
    [ExtensionAttribute]
public static string FullMessage(Exception e);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Stream Rewind(Stream stream);
    [NullableContextAttribute("2")]
public static Nullable`1<int> ParseNullableInt(string s);
    [NullableContextAttribute("2")]
public static Nullable`1<bool> ParseNullableBool(string s);
    public static bool ParseBool(string s);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
