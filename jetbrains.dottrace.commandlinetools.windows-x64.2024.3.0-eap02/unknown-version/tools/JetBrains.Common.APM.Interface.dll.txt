public class JetBrains.Common.APM.Interface.ActionTaskQueue`1 : object {
    private Func`2<TItem, ITask> myCreateTask;
    private IEnumerator`1<TItem> myItemEnumerator;
    public ITask Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public ActionTaskQueue`1(IEnumerable`1<TItem> items, Func`2<TItem, ITask> createTask);
    public sealed virtual ITask get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Dispose();
    public sealed virtual void Reset();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
}
[ExtensionAttribute]
public static class JetBrains.Common.APM.Interface.DataProviderEx : object {
    [ExtensionAttribute]
public static IAsyncDataProvider`1<T> ToAPM(IThreadSwitch`1<T> provider, IAsyncTaskDispatcher dispatcher, string title);
    [ExtensionAttribute]
public static IAsyncDataProvider`1<T> ToAPM(IThreadSwitch`1<T> provider, IAsyncTaskDispatcher dispatcher, DataPipeLifetime lifetime, object taskId, string title);
}
[ObsoleteAttribute("It is recommended to migrate to IPriorityTaskScheduler and System.Tasks")]
public interface JetBrains.Common.APM.Interface.IAsyncTaskDispatcher {
    public abstract virtual void AddToHead(ITask task, object groupId);
    public abstract virtual void AddToHead(IEnumerator`1<ITask> taskQueue, object groupId);
    public abstract virtual void AddToTail(ITask task, object groupId);
    public abstract virtual void AddToTail(IEnumerator`1<ITask> taskQueue, object groupId);
    public abstract virtual void MoveToHead(object groupId);
    public abstract virtual void Cancel(object groupId, bool andWait);
}
public interface JetBrains.Common.APM.Interface.IAsyncTaskDispatcherMonitor {
    public int ThreadsAvalaible { get; }
    public int ResourcesCount { get; }
    public int ActiveTasksCount { get; }
    public abstract virtual int get_ThreadsAvalaible();
    public abstract virtual int get_ResourcesCount();
    public abstract virtual int get_ActiveTasksCount();
    public abstract virtual void StartRoutine();
    public abstract virtual void Pause();
    public abstract virtual void Resume();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ResourceCaptured(EventHandler`1<EventArgs`1<ITask>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ResourceCaptured(EventHandler`1<EventArgs`1<ITask>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TaskCompleted(EventHandler`1<EventArgs`1<ITask>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TaskCompleted(EventHandler`1<EventArgs`1<ITask>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ResourceReleased(EventHandler`1<EventArgs`1<ITask>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ResourceReleased(EventHandler`1<EventArgs`1<ITask>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TaskAttached(EventHandler`1<EventArgs`1<ITask>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TaskAttached(EventHandler`1<EventArgs`1<ITask>> value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
