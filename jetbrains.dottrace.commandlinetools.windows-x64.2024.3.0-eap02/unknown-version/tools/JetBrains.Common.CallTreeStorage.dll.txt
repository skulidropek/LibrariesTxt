public class JetBrains.Common.CallTreeStorage.BinaryReaderCompactTreeReader : CompactTreeReader {
    public BinaryReaderCompactTreeReader(Func`1<BinaryReader> binaryReaderAccessor, CompactTreeKeySize keySize);
    private static Func`2<int, UInt32> CreateValueAccessor(Func`1<BinaryReader> readerAccessor);
}
public class JetBrains.Common.CallTreeStorage.ChunkArrayCompactTreeReader : CompactTreeReader {
    public ChunkArrayCompactTreeReader(IList`1<byte> list, CompactTreeKeySize keySize);
    private static Func`2<int, UInt32> CreateValueExtractor(IList`1<byte> list);
}
public class JetBrains.Common.CallTreeStorage.ChunkListCompactTreeWriter : object {
    private ChunkList`1<CompactTreeNode> myNodes;
    private ChunkList`1<UInt32> myParents;
    [CompilerGeneratedAttribute]
private UInt32 <NullPtr>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <RootPtr>k__BackingField;
    public UInt32 NullPtr { get; }
    public UInt32 RootPtr { get; }
    public ChunkListCompactTreeWriter(ChunkList`1<CompactTreeNode> nodes, ChunkList`1<UInt32> parents);
    private static void Unreachable();
    public sealed virtual UInt32 GetParent(UInt32 index);
    public sealed virtual UInt32 GetNextSibling(UInt32 index);
    public sealed virtual UInt32 GetFirstChild(UInt32 index);
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_NullPtr();
    public sealed virtual ulong ReadKey(UInt32 index);
    public sealed virtual UInt32 ReadPayload(UInt32 index, int payloadIndex);
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_RootPtr();
    [IteratorStateMachineAttribute("JetBrains.Common.CallTreeStorage.ChunkListCompactTreeWriter/<EnumerateAllNodes>d__15")]
public sealed virtual IEnumerable`1<UInt32> EnumerateAllNodes(UInt32 nodeSize);
    public sealed virtual UInt32 AddChild(UInt32 parentPtr, ulong key);
}
public class JetBrains.Common.CallTreeStorage.CompactTreeDfsTraverse : TreeDfsTraverse`1<UInt32> {
    public CompactTreeDfsTraverse(ICompactTreeReader reader);
}
public static class JetBrains.Common.CallTreeStorage.CompactTreeHelper : object {
    public static CompactTreeKeySize GetCompactTreeKeySize(UInt32 keySize);
}
public enum JetBrains.Common.CallTreeStorage.CompactTreeKeySize : Enum {
    public int value__;
    public static CompactTreeKeySize FourBytes;
    public static CompactTreeKeySize EightBytes;
}
public class JetBrains.Common.CallTreeStorage.CompactTreeNode : ValueType {
    public ulong Key;
    public CompactTreeNodeReference Reference;
    public UInt32 FirstChild;
    public CompactTreeNode(ulong key, CompactTreeNodeReference reference, UInt32 firstChild);
    public virtual string ToString();
}
[IsReadOnlyAttribute]
public class JetBrains.Common.CallTreeStorage.CompactTreeNodeReference : ValueType {
    public static CompactTreeNodeReference NullReference;
    private UInt32 myRaw;
    private static UInt32 IsParentReferenceMask;
    public UInt32 Raw { get; }
    public UInt32 Index { get; }
    public CompactTreeNodeReference(UInt32 reference, Type type);
    private CompactTreeNodeReference(UInt32 raw);
    private static CompactTreeNodeReference();
    public UInt32 get_Raw();
    public UInt32 get_Index();
    public bool ToSibling();
    public bool ToParent();
    public virtual string ToString();
}
public class JetBrains.Common.CallTreeStorage.CompactTreePtrToIndexConverter : object {
    [CompilerGeneratedAttribute]
private GetNodeIndex <nodeIndexGetter>P;
    [CompilerGeneratedAttribute]
private UInt32 <nullPtr>P;
    [CompilerGeneratedAttribute]
private UInt32 <nodeSize>P;
    public static UInt32 NullIndex;
    public CompactTreePtrToIndexConverter(GetNodeIndex nodeIndexGetter, UInt32 nullPtr, UInt32 nodeSize);
    public CompactTreePtrToIndexConverter(CompactTreeReader callTreeReader, UInt32 nodeSize);
    public sealed virtual UInt32 Convert(UInt32 ptr);
}
[UsedImplicitlyAttribute]
public class JetBrains.Common.CallTreeStorage.CompactTreeReader : object {
    private Func`2<int, UInt32> myValueFromAddressReader;
    private CompactTreeKeySize myKeySize;
    private UInt32 myIsParentReferenceBitMask;
    private Header myHeader;
    protected long Shift;
    private int myKeySizeBytes;
    private static int PayloadSize;
    private static int PtrSize;
    public UInt32 NullPtr { get; }
    public UInt32 RootPtr { get; }
    public CompactTreeReader(Func`2<int, UInt32> valueFromAddressReader, CompactTreeKeySize keySize, UInt32 isParentReferenceBitMask);
    public sealed virtual UInt32 GetParent(UInt32 treeNodePtr);
    public sealed virtual UInt32 GetNextSibling(UInt32 treeNodePtr);
    public sealed virtual UInt32 GetFirstChild(UInt32 treeNodePtr);
    public sealed virtual UInt32 get_NullPtr();
    public sealed virtual ulong ReadKey(UInt32 treeNodePtr);
    public sealed virtual UInt32 ReadPayload(UInt32 treeNodePtr, int index);
    public sealed virtual UInt32 get_RootPtr();
    [IteratorStateMachineAttribute("JetBrains.Common.CallTreeStorage.CompactTreeReader/<EnumerateAllNodes>d__18")]
public sealed virtual IEnumerable`1<UInt32> EnumerateAllNodes(UInt32 nodeSize);
    public GetNodeIndex NodeIndexGetter();
    private Header ReadHeader(Func`2<int, UInt32> valueFromAddressReader);
    [CompilerGeneratedAttribute]
private UInt32 <NodeIndexGetter>b__20_0(UInt32 nodeSize, UInt32 ptr);
}
[ExtensionAttribute]
public static class JetBrains.Common.CallTreeStorage.CompactTreeReaderEx : object {
    [IteratorStateMachineAttribute("JetBrains.Common.CallTreeStorage.CompactTreeReaderEx/<GetChildren>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<UInt32> GetChildren(ICompactTreeReader tree, UInt32 ptr);
    [IteratorStateMachineAttribute("JetBrains.Common.CallTreeStorage.CompactTreeReaderEx/<GetPathToRoot>d__1")]
[ExtensionAttribute]
public static IEnumerable`1<UInt32> GetPathToRoot(ICompactTreeReader tree, UInt32 ptr);
    [ExtensionAttribute]
public static List`1<ulong> GetFuidsPathToRoot(ICompactTreeReader tree, UInt32 ptr);
    [ExtensionAttribute]
public static List`1<ulong> GetFuidsPathToRoot(ICompactTreeReader tree, UInt32 ptr, List`1<ulong> result);
    [ExtensionAttribute]
public static List`1<DfsNode`2<TOffset, TKey>> BuildDfsTree(ICompactTreeReader callTreeReader, Dictionary`2& dfsToPtrMap, Dictionary`2& keysIndex, Func`2<TOffset, int> offsetToIndex, TOffset invalidOffset, Func`2<int, TOffset> indexToOffset, ITreeVisitor`2<UInt32, IKeyContainingContext`1<TKey>> keySettingVisitor, TKey invalidKey);
    [ExtensionAttribute]
public static HashSet`1<FunctionUID> CollectUniqueKeys(ICompactTreeReader reader, bool ignoreShift);
    [ExtensionAttribute]
public static void CollectUniqueKeys(ICompactTreeReader reader, UInt32 ptr, HashSet`1<FunctionUID> result, bool ignoreShift);
}
public class JetBrains.Common.CallTreeStorage.Dfs.ActionConsumer`2 : object {
    private Action`3<UInt32, TOffset, DfsNode`2<TOffset, TKey>> myEndNode;
    private Action`4<UInt32, TOffset, TOffset, TKey> myStartNode;
    private Action`1<UInt32> myOnFinish;
    public ActionConsumer`2(Action`3<UInt32, TOffset, DfsNode`2<TOffset, TKey>> endNode, Action`4<UInt32, TOffset, TOffset, TKey> startNode, Action`1<UInt32> onFinish);
    public sealed virtual void StartNodeProcessing(UInt32 oldIndex, TOffset newIndex, TOffset leftIndex, TKey key);
    public sealed virtual void EndNodeProcessing(UInt32 oldIndex, TOffset newIndex, DfsNode`2<TOffset, TKey> node);
    public sealed virtual void OnFinish(UInt32 nodesCount);
}
public class JetBrains.Common.CallTreeStorage.Dfs.ClassicDfsTreeReader`2 : object {
    private IReadOnlyList`1<DfsNode`2<TOffset, TKey>> myDfsNodes;
    private TOffset myNullPtr;
    private Func`2<TOffset, int> myOffsetToIndex;
    private Func`2<TOffset, TOffset> myPreviousOffset;
    private IComparer`1<TOffset> myComparer;
    public TOffset RootPtr { get; }
    public TOffset NullPtr { get; }
    public ClassicDfsTreeReader`2(IReadOnlyList`1<DfsNode`2<TOffset, TKey>> dfsNodes, TOffset nullPtr, Func`2<TOffset, int> offsetToIndex, Func`2<TOffset, TOffset> previousOffset, IComparer`1<TOffset> comparer);
    public sealed virtual TOffset get_RootPtr();
    public sealed virtual TOffset get_NullPtr();
    public sealed virtual TKey ReadKey(TOffset ptr);
    public sealed virtual TOffset GetParent(TOffset ptr);
    public sealed virtual TOffset GetLeft(TOffset ptr);
    [IteratorStateMachineAttribute("JetBrains.Common.CallTreeStorage.Dfs.ClassicDfsTreeReader`2/<GetChildrenReversed>d__13")]
public sealed virtual IEnumerable`1<TOffset> GetChildrenReversed(TOffset rootIndex);
}
public class JetBrains.Common.CallTreeStorage.Dfs.CombiningDfsNodeConsumer`3 : VisitorCombiner`1<IEmittedDfsNodeConsumer`3<TOffset, TKey, TOldOffset>> {
    public CombiningDfsNodeConsumer`3(IEmittedDfsNodeConsumer`3[] many);
    public sealed virtual void StartNodeProcessing(TOldOffset oldIndex, TOffset newIndex, TOffset leftIndex, TKey key);
    public sealed virtual void EndNodeProcessing(TOldOffset oldIndex, TOffset newIndex, DfsNode`2<TOffset, TKey> node);
    public sealed virtual void OnFinish(UInt32 nodesCount);
}
public class JetBrains.Common.CallTreeStorage.Dfs.DfsNode`2 : ValueType {
    public TOffset Offset;
    public TKey Key;
    public TOffset ParentOffset;
    public TOffset LeftOffset;
    [LocalizableAttribute("False")]
public virtual string ToString();
}
public class JetBrains.Common.CallTreeStorage.Dfs.DfsNodesWriter`2 : object {
    private IStructuredSectionMemory`1<DfsNode`2<TOffset, TKey>> myMemory;
    private Func`2<TOffset, int> myOffsetToIndex;
    public DfsNodesWriter`2(IStructuredSectionMemory`1<DfsNode`2<TOffset, TKey>> memory, Func`2<TOffset, int> offsetToIndex);
    public sealed virtual void StartNodeProcessing(UInt32 oldIndex, TOffset newIndex, TOffset leftIndex, TKey key);
    public sealed virtual void EndNodeProcessing(UInt32 oldIndex, TOffset newIndex, DfsNode`2<TOffset, TKey> node);
    public sealed virtual void OnFinish(UInt32 nodesCount);
}
public class JetBrains.Common.CallTreeStorage.Dfs.DfsToPtrMapWriter`3 : object {
    private IStructuredSectionMemory`1<T> myDfsToPtrMap;
    private Func`2<UInt32, T> myTransformOldIndex;
    private Func`2<TOffset, int> myOffsetToIndex;
    public IReadonlyStructuredSectionMemory`1<T> Data { get; }
    public DfsToPtrMapWriter`3(IStructuredSectionMemory`1<T> dfsToPtrMap, Func`2<UInt32, T> transformOldIndex, Func`2<TOffset, int> offsetToIndex);
    public sealed virtual void StartNodeProcessing(UInt32 oldIndex, TOffset newIndex, TOffset leftIndex, TKey key);
    public sealed virtual void EndNodeProcessing(UInt32 oldIndex, TOffset newIndex, DfsNode`2<TOffset, TKey> node);
    public sealed virtual void OnFinish(UInt32 nodesCount);
    public IReadonlyStructuredSectionMemory`1<T> get_Data();
}
public interface JetBrains.Common.CallTreeStorage.Dfs.IClassicDfsTreeReader`2 {
    public TOffset RootPtr { get; }
    public TOffset NullPtr { get; }
    public abstract virtual TOffset get_RootPtr();
    public abstract virtual TOffset get_NullPtr();
    public abstract virtual TKey ReadKey(TOffset ptr);
    public abstract virtual TOffset GetParent(TOffset ptr);
    public abstract virtual TOffset GetLeft(TOffset ptr);
    public abstract virtual IEnumerable`1<TOffset> GetChildrenReversed(TOffset ptr);
}
public interface JetBrains.Common.CallTreeStorage.Dfs.IEmittedDfsNodeConsumer`3 {
    public abstract virtual void StartNodeProcessing(TOldOffset oldIndex, TOffset newIndex, TOffset leftIndex, TKey key);
    public abstract virtual void EndNodeProcessing(TOldOffset oldNode, TOffset newIndex, DfsNode`2<TOffset, TKey> node);
    public abstract virtual void OnFinish(UInt32 nodesCount);
}
public interface JetBrains.Common.CallTreeStorage.Dfs.IKeyContainingContext`1 {
    public TKey Key { get; public set; }
    public abstract virtual TKey get_Key();
    public abstract virtual void set_Key(TKey value);
}
public interface JetBrains.Common.CallTreeStorage.Dfs.ISkipNodeContext {
    public bool SkipNode { get; public set; }
    public abstract virtual bool get_SkipNode();
    public abstract virtual void set_SkipNode(bool value);
}
public class JetBrains.Common.CallTreeStorage.Dfs.KeyContainingContext`1 : object {
    [CompilerGeneratedAttribute]
private TKey <Key>k__BackingField;
    public TKey Key { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual TKey get_Key();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Key(TKey value);
}
public class JetBrains.Common.CallTreeStorage.Dfs.KeySettingVisitor : object {
    private ICompactTreeReader myCompactTreeReader;
    public KeySettingVisitor(ICompactTreeReader compactTreeReader);
    public sealed virtual VisitResult StartNodeProcessing(UInt32 ptr, IKeyContainingContext`1<ulong> sharedContext);
    public sealed virtual void EndNodeProcessing(UInt32 ptr, IKeyContainingContext`1<ulong> sharedContext);
    public sealed virtual void AllNodesProcessed();
}
public class JetBrains.Common.CallTreeStorage.Dfs.KeyToNodesAscendingIndex`3 : object {
    private ConditionalLog myLog;
    private Dictionary`2<TKey, List`1<TOffset>> myData;
    public static IComparer`1<TOffset> Comparer { get; }
    public Dictionary`2<TKey, List`1<TOffset>> Data { get; }
    public static IComparer`1<TOffset> get_Comparer();
    public sealed virtual void StartNodeProcessing(TOldOffset oldIndex, TOffset newIndex, TOffset leftIndex, TKey key);
    public sealed virtual void EndNodeProcessing(TOldOffset oldIndex, TOffset newPtr, DfsNode`2<TOffset, TKey> node);
    public sealed virtual void OnFinish(UInt32 nodesCount);
    public Dictionary`2<TKey, List`1<TOffset>> get_Data();
}
public enum JetBrains.Common.CallTreeStorage.Dfs.PayloadDisplayType : Enum {
    public int value__;
    public static PayloadDisplayType Visible;
    public static PayloadDisplayType Dissolved;
    public static PayloadDisplayType Hidden;
}
public class JetBrains.Common.CallTreeStorage.Dfs.PostOrderDfsNodeEmitter`4 : object {
    private IEmittedDfsNodeConsumer`3<TOffset, TKey, TOldOffset> myNodeConsumer;
    private TOffset myInvalidOffset;
    private Func`2<int, TOffset> myIndexToOffset;
    private Stack`1<NodeRefWithChildren<TContext, TOffset, TKey, TOldOffset>> myStack;
    private int myCurrentDfsIndex;
    public PostOrderDfsNodeEmitter`4(IEmittedDfsNodeConsumer`3<TOffset, TKey, TOldOffset> nodeConsumer, TOffset invalidOffset, Func`2<int, TOffset> indexToOffset, TKey invalidKey);
    public sealed virtual VisitResult StartNodeProcessing(TOldOffset ptr, TContext context);
    public sealed virtual void EndNodeProcessing(TOldOffset ptr, TContext context);
    private void EmitChildren(NodeRefWithChildren<TContext, TOffset, TKey, TOldOffset> currentNodeWithChildren, TOffset parentIndex);
    public sealed virtual void AllNodesProcessed();
}
public class JetBrains.Common.CallTreeStorage.Dfs.RawNodeSkipContext`1 : object {
    [CompilerGeneratedAttribute]
private bool <SkipNode>k__BackingField;
    [CompilerGeneratedAttribute]
private TKey <Key>k__BackingField;
    public bool SkipNode { get; public set; }
    public TKey Key { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SkipNode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SkipNode(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual TKey get_Key();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Key(TKey value);
}
public class JetBrains.Common.CallTreeStorage.Dfs.SkipNodeContextSetter`2 : object {
    private Stack`1<StackFrame<TContext, TKey>> myStack;
    private SkipNodePredicate<TContext, TKey> mySkipPredicate;
    private StackFrame<TContext, TKey> myDefaultFrame;
    public SkipNodeContextSetter`2(SkipNodePredicate<TContext, TKey> skipPredicate, TKey invalidKey);
    public sealed virtual VisitResult StartNodeProcessing(UInt32 ptr, TContext context);
    public sealed virtual void EndNodeProcessing(UInt32 ptr, TContext context);
    public sealed virtual void AllNodesProcessed();
}
public class JetBrains.Common.CallTreeStorage.Dfs.SkippedNodeMapBuilder`3 : object {
    private Stack`1<Frame<TContext, TOffset, TKey>> myStack;
    private int myCounter;
    private int myEmittedCounter;
    private EmittedMapEntry<TContext, TOffset, TKey> myEmitHandler;
    public SkippedNodeMapBuilder`3(EmittedMapEntry<TContext, TOffset, TKey> emitHandler);
    public sealed virtual VisitResult StartNodeProcessing(UInt32 ptr, TContext context);
    public sealed virtual void EndNodeProcessing(UInt32 ptr, TContext context);
    public sealed virtual void AllNodesProcessed();
    public sealed virtual void StartNodeProcessing(UInt32 oldIndex, TOffset newIndex, TOffset leftIndex, TKey key);
    public sealed virtual void EndNodeProcessing(UInt32 oldIndex, TOffset newIndex, DfsNode`2<TOffset, TKey> node);
    public sealed virtual void OnFinish(UInt32 nodesCount);
}
public class JetBrains.Common.CallTreeStorage.FastIndexableCompactTree`2 : object {
    private TNodesStore myNodes;
    private Nullable`1<TParentsStore> myFastParents;
    [CompilerGeneratedAttribute]
private UInt32 <NullPtr>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <RootPtr>k__BackingField;
    public UInt32 NullPtr { get; }
    public UInt32 RootPtr { get; }
    public FastIndexableCompactTree`2(TNodesStore nodes, Nullable`1<TParentsStore> fastParents);
    public sealed virtual UInt32 GetParent(UInt32 index);
    protected CompactTreeNode GetLastSibling(UInt32 anySiblingIndex, CompactTreeNodeReference& reference, UInt32& lastSiblingIndex);
    public sealed virtual UInt32 GetNextSibling(UInt32 index);
    public sealed virtual UInt32 GetFirstChild(UInt32 index);
    private static void ThrowException();
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_NullPtr();
    public sealed virtual ulong ReadKey(UInt32 index);
    public sealed virtual UInt32 ReadPayload(UInt32 index, int payloadIndex);
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_RootPtr();
    [IteratorStateMachineAttribute("JetBrains.Common.CallTreeStorage.FastIndexableCompactTree`2/<EnumerateAllNodes>d__16")]
public sealed virtual IEnumerable`1<UInt32> EnumerateAllNodes(UInt32 nodeSize);
}
[UsedImplicitlyAttribute]
public class JetBrains.Common.CallTreeStorage.FlagFirstCompactTreeReader : CompactTreeReader {
    private static UInt32 IsParentReferenceBitMask;
    public FlagFirstCompactTreeReader(Func`2<int, UInt32> valueFromAddressReader, CompactTreeKeySize keySize);
}
public class JetBrains.Common.CallTreeStorage.ForeignBinaryReaderCompactTreeReader : FlagFirstCompactTreeReader {
    public ForeignBinaryReaderCompactTreeReader(BinaryReader binaryReader, CompactTreeKeySize keySize);
    private static Func`2<int, UInt32> CreateValueAccessor(BinaryReader reader);
}
public interface JetBrains.Common.CallTreeStorage.ICompactTreePtrToIndexConverter {
    public abstract virtual UInt32 Convert(UInt32 ptr);
}
public interface JetBrains.Common.CallTreeStorage.ICompactTreeReader {
    public UInt32 NullPtr { get; }
    public UInt32 RootPtr { get; }
    public abstract virtual UInt32 GetParent(UInt32 treeNodePtr);
    public abstract virtual UInt32 GetNextSibling(UInt32 treeNodePtr);
    public abstract virtual UInt32 GetFirstChild(UInt32 treeNodePtr);
    public abstract virtual UInt32 get_NullPtr();
    public abstract virtual ulong ReadKey(UInt32 treeNodePtr);
    public abstract virtual UInt32 ReadPayload(UInt32 treeNodePtr, int index);
    public abstract virtual UInt32 get_RootPtr();
    public abstract virtual IEnumerable`1<UInt32> EnumerateAllNodes(UInt32 nodeSize);
}
public interface JetBrains.Common.CallTreeStorage.ICompactTreeWriter {
    public abstract virtual void WriteKey(UInt32 treeNodePtr, UInt32 key);
}
public interface JetBrains.Common.CallTreeStorage.IIndexableCompactTreeReader {
}
public interface JetBrains.Common.CallTreeStorage.IIndexableCompactTreeWriter {
    public abstract virtual UInt32 AddChild(UInt32 parentPtr, ulong key);
}
public class JetBrains.Common.CallTreeStorage.IndexableCompactTree : object {
    protected Func`1<int> GetCount;
    protected Func`2<int, CompactTreeNode> GetItem;
    [CompilerGeneratedAttribute]
private UInt32 <NullPtr>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <RootPtr>k__BackingField;
    public UInt32 NullPtr { get; }
    public UInt32 RootPtr { get; }
    protected IndexableCompactTree(Func`2<int, CompactTreeNode> getItem, Func`1<int> getCount);
    public sealed virtual UInt32 GetParent(UInt32 index);
    protected CompactTreeNode GetLastSibling(UInt32 anySiblingIndex, CompactTreeNodeReference& reference, UInt32& lastSiblingIndex);
    public sealed virtual UInt32 GetNextSibling(UInt32 index);
    public sealed virtual UInt32 GetFirstChild(UInt32 index);
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_NullPtr();
    public sealed virtual ulong ReadKey(UInt32 index);
    public sealed virtual UInt32 ReadPayload(UInt32 index, int payloadIndex);
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_RootPtr();
    [IteratorStateMachineAttribute("JetBrains.Common.CallTreeStorage.IndexableCompactTree/<EnumerateAllNodes>d__15")]
public sealed virtual IEnumerable`1<UInt32> EnumerateAllNodes(UInt32 nodeSize);
    public static IIndexableCompactTreeReader Create(IReadonlyStructuredSectionMemory`1<CompactTreeNode> section);
}
public static class JetBrains.Common.CallTreeStorage.IndexableCompactTreeEx : object {
    public static FastIndexableCompactTree`2<ARR`1<CompactTreeNode>, ARR`1<UInt32>> Create(CompactTreeNode[] indexable);
    public static FastIndexableCompactTree`2<CHL`1<CompactTreeNode>, CHL`1<UInt32>> Create(ChunkList`1<CompactTreeNode> indexable);
}
public class JetBrains.Common.CallTreeStorage.InMemoryStreamCompactTreeReader : CompactTreeReader {
    public InMemoryStreamCompactTreeReader(IInMemoryStream stream, StreamAccessDirection direction, CompactTreeKeySize keySize);
    private static Func`2<int, UInt32> CreateValueAccessor(IInMemoryStream stream, StreamAccessDirection direction);
}
public class JetBrains.Common.CallTreeStorage.IntermediateCompactTree : object {
    private Func`2<int, UInt32> myValueFromAddressReader;
    private CompactTreeKeySize myKeySize;
    private ulong mySectionSize;
    protected long Shift;
    private int myKeySizeBytes;
    private int myNodeSize;
    private static UInt32 IsParentReferenceMask;
    private static int PayloadSize;
    private static int PtrSize;
    public UInt32 NullPtr { get; }
    public UInt32 RootPtr { get; }
    public IntermediateCompactTree(Func`2<int, UInt32> valueFromAddressReader, ulong sectionSize, int nodeSize);
    public sealed virtual UInt32 GetParent(UInt32 treeNodePtr);
    public sealed virtual UInt32 GetNextSibling(UInt32 treeNodePtr);
    public sealed virtual UInt32 GetFirstChild(UInt32 treeNodePtr);
    public sealed virtual UInt32 get_NullPtr();
    public sealed virtual ulong ReadKey(UInt32 treeNodePtr);
    public sealed virtual UInt32 ReadPayload(UInt32 treeNodePtr, int index);
    public sealed virtual UInt32 get_RootPtr();
    [IteratorStateMachineAttribute("JetBrains.Common.CallTreeStorage.IntermediateCompactTree/<EnumerateAllNodes>d__19")]
public sealed virtual IEnumerable`1<UInt32> EnumerateAllNodes(UInt32 nodeSize);
}
public class JetBrains.Common.CallTreeStorage.IntermediateCompactTreeReader : IntermediateCompactTree {
    public IntermediateCompactTreeReader(IInMemoryStream stream, StreamAccessDirection direction, ulong sectionSize, int nodeSize);
    private static Func`2<int, UInt32> CreateValueAccessor(IInMemoryStream stream, StreamAccessDirection direction);
}
public enum JetBrains.Common.CallTreeStorage.StreamAccessDirection : Enum {
    public int value__;
    public static StreamAccessDirection Forward;
    public static StreamAccessDirection Backward;
}
public class JetBrains.Common.CallTreeStorage.StreamCompactTreeReader : CompactTreeReader {
    public StreamCompactTreeReader(Stream stream, CompactTreeKeySize keySize);
    public static Func`2<int, UInt32> CreateStreamValueReader(Stream stream);
}
public class JetBrains.Common.CallTreeStorage.StreamCompactTreeReaderWriter : StreamCompactTreeReader {
    private BinaryWriter myWriter;
    public StreamCompactTreeReaderWriter(Stream stream);
    public sealed virtual void WriteKey(UInt32 treeNodePtr, UInt32 key);
    public sealed virtual void Dispose();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
