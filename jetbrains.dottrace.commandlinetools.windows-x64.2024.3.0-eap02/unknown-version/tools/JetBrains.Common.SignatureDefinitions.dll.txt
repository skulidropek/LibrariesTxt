public class JetBrains.Common.SignatureDefinitions.AnonymousTypeSignature : ClassTypeSignature {
    public TypeSignature[] FieldTypes { get; }
    public AnonymousTypeSignature(IGetter`1<TypeSignature[]> fieldTypesGetter, IGetter`1<TypeInfoSignature> typeInfoGetter);
    public TypeSignature[] get_FieldTypes();
    public virtual bool EqualsTo(TypeSignature obj);
    public virtual void AcceptVisitor(ISignatureVisitor visitor);
}
public class JetBrains.Common.SignatureDefinitions.ArrayTypeSignature : TypeSignature {
    public UInt32 Rank;
    private IGetter`1<TypeSignature> myTypeGetter;
    private TypeSignature myType;
    public TypeSignature Type { get; }
    public ArrayTypeSignature(UInt32 rank, IGetter`1<TypeSignature> typeGetter);
    public TypeSignature get_Type();
    public virtual bool EqualsTo(TypeSignature obj);
    public virtual void AcceptVisitor(ISignatureVisitor visitor);
}
public class JetBrains.Common.SignatureDefinitions.ClassTypeSignature : TypeSignature {
    private IGetter`1<TypeSignature[]> myGenericArgumentsGetter;
    private IGetter`1<TypeInfoSignature> myTypeInfoGetter;
    private TypeSignature[] myGenericArguments;
    private TypeInfoSignature myTypeInfo;
    public TypeInfoSignature TypeInfo { get; }
    public TypeSignature[] GenericArguments { get; }
    public ClassTypeSignature(IGetter`1<TypeSignature[]> genericArgumentsGetter, IGetter`1<TypeInfoSignature> typeInfoGetter);
    public TypeInfoSignature get_TypeInfo();
    public TypeSignature[] get_GenericArguments();
    private void ValidateGenericArgumentsCount();
    public virtual bool EqualsTo(TypeSignature obj);
    public virtual void AcceptVisitor(ISignatureVisitor visitor);
}
public enum JetBrains.Common.SignatureDefinitions.CodeLanguage : Enum {
    public int value__;
    public static CodeLanguage CSharp;
    public static CodeLanguage VBasic;
    public static CodeLanguage CLR;
}
public class JetBrains.Common.SignatureDefinitions.FunctionPointerTypeSignature : TypeSignature {
    private FunctionSignature myFunctionSignature;
    public FunctionSignature FunctionSignature { get; }
    public FunctionPointerTypeSignature(FunctionSignature functionSignature);
    public FunctionSignature get_FunctionSignature();
    public virtual bool EqualsTo(TypeSignature obj);
    public virtual void AcceptVisitor(ISignatureVisitor visitor);
}
public class JetBrains.Common.SignatureDefinitions.FunctionSignature : ReturnTypeOwnerSignature {
    private IGetter`1<ParameterSignature[]> myParameterSignaturesGetter;
    private ParameterSignature[] myParameterSignatures;
    public ParameterSignature[] Parameters { get; }
    public FunctionSignature(IGetter`1<TypeSignature> returnTypeGetter, IGetter`1<ParameterSignature[]> parameterSignaturesGetter);
    public ParameterSignature[] get_Parameters();
    public virtual bool EqualsTo(ReturnTypeOwnerSignature obj);
    public virtual void AcceptVisitor(ISignatureVisitor visitor);
}
public interface JetBrains.Common.SignatureDefinitions.IEquatable`1 {
    public abstract virtual bool EqualsTo(T other);
}
public interface JetBrains.Common.SignatureDefinitions.IGetter`1 {
    public abstract virtual T Get();
}
public interface JetBrains.Common.SignatureDefinitions.ISignature {
    public abstract virtual void AcceptVisitor(ISignatureVisitor visitor);
}
public interface JetBrains.Common.SignatureDefinitions.ISignatureVisitor {
    public abstract virtual void VisitFunction(FunctionSignature functionSignature);
    public abstract virtual void VisitReturnTypeOwner(ReturnTypeOwnerSignature memberSignature);
    public abstract virtual void VisitClassType(ClassTypeSignature classTypeSignature);
    public abstract virtual void VisitTypeGenericReference(TypeGenericReferenceSignature typeGenericReferenceSignature);
    public abstract virtual void VisitMethodGenericReference(MethodGenericReferenceSignature methodGenericReferenceSignature);
    public abstract virtual void VisitArrayType(ArrayTypeSignature arrayTypeSignature);
    public abstract virtual void VisitTypeMember(TypeMemberSignature typeMemberSignature);
    public abstract virtual void VisitTypeInfo(TypeInfoSignature typeInfoSignature);
    public abstract virtual void VisitMethod(MethodSignature methodSignature);
    public abstract virtual void VisitParameter(ParameterSignature parameter);
    public abstract virtual void VisitAnonymousType(AnonymousTypeSignature anonymousTypeSignature);
    public abstract virtual void VisitPointerType(PointerTypeSignature pointerTypeSignature);
    public abstract virtual void VisitReferenceType(ReferenceTypeSignature referenceTypeSignature);
    public abstract virtual void VisitFunctionPointerType(FunctionPointerTypeSignature functionPointerTypeSignature);
    public abstract virtual void VisitMultitype(MultitypeSignature multitypeSignature);
}
public class JetBrains.Common.SignatureDefinitions.MethodGenericReferenceSignature : TypeSignature {
    public string Name;
    public int Index;
    public MethodGenericReferenceSignature(string name, int index);
    public virtual bool EqualsTo(TypeSignature obj);
    public virtual void AcceptVisitor(ISignatureVisitor visitor);
}
public class JetBrains.Common.SignatureDefinitions.MethodSignature : TypeMemberSignature {
    private IGetter`1<FunctionSignature> myFunctionSignatureGetter;
    private IGetter`1<String[]> myGenericParameterNamesGetter;
    private FunctionSignature myFunctionSignature;
    private String[] myGenericParameterNames;
    public String[] GenericParameterNames { get; }
    public FunctionSignature FunctionSignature { get; }
    public MethodSignature(IGetter`1<FunctionSignature> functionSignatureGetter, IGetter`1<String[]> genericParameterNamesGetter, IGetter`1<TypeInfoSignature> containingTypeGetter);
    public String[] get_GenericParameterNames();
    public FunctionSignature get_FunctionSignature();
    public virtual bool EqualsTo(TypeMemberSignature obj);
    public virtual void AcceptVisitor(ISignatureVisitor visitor);
}
public class JetBrains.Common.SignatureDefinitions.MultitypeSignature : TypeSignature {
    [CompilerGeneratedAttribute]
private TypeSignature[] <Constituents>k__BackingField;
    public TypeSignature[] Constituents { get; }
    public MultitypeSignature(IEnumerable`1<TypeSignature> constituents);
    [CompilerGeneratedAttribute]
public TypeSignature[] get_Constituents();
    public virtual bool EqualsTo(TypeSignature other);
    public virtual void AcceptVisitor(ISignatureVisitor visitor);
}
public enum JetBrains.Common.SignatureDefinitions.ParameterModifier : Enum {
    public int value__;
    public static ParameterModifier Ref;
    public static ParameterModifier In;
    public static ParameterModifier Out;
    public static ParameterModifier Params;
    public static ParameterModifier None;
}
public class JetBrains.Common.SignatureDefinitions.ParameterSignature : object {
    public ParameterModifier Modifier;
    public TypeSignature Type;
    public ParameterSignature(TypeSignature type, ParameterModifier modifier);
    public sealed virtual bool EqualsTo(ParameterSignature other);
    public sealed virtual void AcceptVisitor(ISignatureVisitor visitor);
}
public class JetBrains.Common.SignatureDefinitions.PointerTypeSignature : TypeSignature {
    private TypeSignature myType;
    public TypeSignature Type { get; }
    public PointerTypeSignature(TypeSignature type);
    public TypeSignature get_Type();
    public virtual bool EqualsTo(TypeSignature obj);
    public virtual void AcceptVisitor(ISignatureVisitor visitor);
}
public class JetBrains.Common.SignatureDefinitions.ReferenceTypeSignature : TypeSignature {
    private TypeSignature myType;
    public TypeSignature Type { get; }
    public ReferenceTypeSignature(TypeSignature type);
    public TypeSignature get_Type();
    public virtual bool EqualsTo(TypeSignature obj);
    public virtual void AcceptVisitor(ISignatureVisitor visitor);
}
public class JetBrains.Common.SignatureDefinitions.ReturnTypeOwnerSignature : object {
    private IGetter`1<TypeSignature> myReturnTypeGetter;
    private TypeSignature myReturnType;
    public TypeSignature ReturnType { get; }
    public ReturnTypeOwnerSignature(IGetter`1<TypeSignature> returnTypeGetter);
    public TypeSignature get_ReturnType();
    public virtual bool EqualsTo(ReturnTypeOwnerSignature other);
    public virtual void AcceptVisitor(ISignatureVisitor visitor);
}
internal static class JetBrains.Common.SignatureDefinitions.SignatureComparisonHelper : object {
    public static bool AreEqual(T o1, T o2);
    public static bool AreSequencesEqual(T[] o1, T[] o2);
    public static bool AreEquatableSequencesEqual(T[] o1, T[] o2);
    private static bool EqualSequences(IEnumerable`1<T> o1, IEnumerable`1<T> o2, Comparer`1<T> comparer);
}
[LocalizableAttribute("False")]
public class JetBrains.Common.SignatureDefinitions.SignaturePresenter : object {
    public static SignaturePresenter Full;
    private static IDictionary`2<string, string> CSharpValueTypesMap;
    private static IDictionary`2<string, string> VBasicValueTypesMap;
    private SignaturePresenterConfiguration myConfiguration;
    public SignaturePresenterConfiguration Configuration { get; }
    public SignaturePresenter(SignaturePresenterConfiguration configuration);
    private static SignaturePresenter();
    public SignaturePresenterConfiguration get_Configuration();
    public string GetPresentation(ISignature signature, TypeInfoSignature declaringTypeInfoSignature);
}
[LocalizableAttribute("False")]
public class JetBrains.Common.SignatureDefinitions.SignaturePresenterConfiguration : object {
    [CompilerGeneratedAttribute]
private char <NestedClassDelimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipOuterTypeNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WriteCompilerGeneratedTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowGenericParameterAsIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseFullyQualifiedTypeNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WriteReturnTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WriteParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WriteParametersParenthesis>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WriteGenericArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WriteMethodGenericParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WriteTypeGenericParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AsteriskForPointerTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeLanguage <ValueTypesLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PresentableAnonymousTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisplayParameterModifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MergeParameterModifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FunctionParametersDelimiter>k__BackingField;
    public static SignaturePresenterConfiguration FullConfiguration;
    public static SignaturePresenterConfiguration DefaultConfiguration;
    public static SignaturePresenterConfiguration ETWConfiguration;
    public char NestedClassDelimiter { get; public set; }
    public bool SkipOuterTypeNames { get; public set; }
    public bool WriteCompilerGeneratedTypes { get; public set; }
    public bool ShowGenericParameterAsIndex { get; public set; }
    public bool UseFullyQualifiedTypeNames { get; public set; }
    public bool WriteReturnTypes { get; public set; }
    public bool WriteParameters { get; public set; }
    public bool WriteParametersParenthesis { get; public set; }
    public bool WriteGenericArguments { get; public set; }
    public bool WriteMethodGenericParameters { get; public set; }
    public bool WriteTypeGenericParameters { get; public set; }
    public bool AsteriskForPointerTypes { get; public set; }
    public CodeLanguage ValueTypesLanguage { get; public set; }
    public bool PresentableAnonymousTypes { get; public set; }
    public bool DisplayParameterModifiers { get; public set; }
    public bool MergeParameterModifiers { get; public set; }
    public string FunctionParametersDelimiter { get; public set; }
    private static SignaturePresenterConfiguration();
    [CompilerGeneratedAttribute]
public char get_NestedClassDelimiter();
    [CompilerGeneratedAttribute]
public void set_NestedClassDelimiter(char value);
    [CompilerGeneratedAttribute]
public bool get_SkipOuterTypeNames();
    [CompilerGeneratedAttribute]
public void set_SkipOuterTypeNames(bool value);
    [CompilerGeneratedAttribute]
public bool get_WriteCompilerGeneratedTypes();
    [CompilerGeneratedAttribute]
public void set_WriteCompilerGeneratedTypes(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowGenericParameterAsIndex();
    [CompilerGeneratedAttribute]
public void set_ShowGenericParameterAsIndex(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseFullyQualifiedTypeNames();
    [CompilerGeneratedAttribute]
public void set_UseFullyQualifiedTypeNames(bool value);
    [CompilerGeneratedAttribute]
public bool get_WriteReturnTypes();
    [CompilerGeneratedAttribute]
public void set_WriteReturnTypes(bool value);
    [CompilerGeneratedAttribute]
public bool get_WriteParameters();
    [CompilerGeneratedAttribute]
public void set_WriteParameters(bool value);
    [CompilerGeneratedAttribute]
public bool get_WriteParametersParenthesis();
    [CompilerGeneratedAttribute]
public void set_WriteParametersParenthesis(bool value);
    [CompilerGeneratedAttribute]
public bool get_WriteGenericArguments();
    [CompilerGeneratedAttribute]
public void set_WriteGenericArguments(bool value);
    [CompilerGeneratedAttribute]
public bool get_WriteMethodGenericParameters();
    [CompilerGeneratedAttribute]
public void set_WriteMethodGenericParameters(bool value);
    [CompilerGeneratedAttribute]
public bool get_WriteTypeGenericParameters();
    [CompilerGeneratedAttribute]
public void set_WriteTypeGenericParameters(bool value);
    [CompilerGeneratedAttribute]
public bool get_AsteriskForPointerTypes();
    [CompilerGeneratedAttribute]
public void set_AsteriskForPointerTypes(bool value);
    [CompilerGeneratedAttribute]
public CodeLanguage get_ValueTypesLanguage();
    [CompilerGeneratedAttribute]
public void set_ValueTypesLanguage(CodeLanguage value);
    [CompilerGeneratedAttribute]
public bool get_PresentableAnonymousTypes();
    [CompilerGeneratedAttribute]
public void set_PresentableAnonymousTypes(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisplayParameterModifiers();
    [CompilerGeneratedAttribute]
public void set_DisplayParameterModifiers(bool value);
    [CompilerGeneratedAttribute]
public bool get_MergeParameterModifiers();
    [CompilerGeneratedAttribute]
public void set_MergeParameterModifiers(bool value);
    [CompilerGeneratedAttribute]
public string get_FunctionParametersDelimiter();
    [CompilerGeneratedAttribute]
public void set_FunctionParametersDelimiter(string value);
    private static SignaturePresenterConfiguration CreateDefaultConfiguration();
}
public class JetBrains.Common.SignatureDefinitions.TypeGenericReferenceSignature : TypeSignature {
    public string Name;
    public int Index;
    public TypeGenericReferenceSignature(string name, int index);
    public virtual bool EqualsTo(TypeSignature obj);
    public virtual void AcceptVisitor(ISignatureVisitor visitor);
}
public class JetBrains.Common.SignatureDefinitions.TypeInfoSignature : TypeMemberSignature {
    private IGetter`1<String[]> myGenericParameterNamesGetter;
    private string myNamespace;
    private string myShortName;
    private String[] myGenericParameterNames;
    public string ShortName { get; }
    public string Namespace { get; }
    public IEnumerable`1<TypeInfoSignature> ContainingTypesChain { get; }
    public String[] GenericParameterNames { get; }
    public IEnumerable`1<string> OwnGenericParameterNames { get; }
    public TypeInfoSignature(string shortName, IGetter`1<String[]> genericParameterNamesGetter, string containingNamespace, IGetter`1<TypeInfoSignature> containingTypeGetter);
    public string get_ShortName();
    public string get_Namespace();
    [IteratorStateMachineAttribute("JetBrains.Common.SignatureDefinitions.TypeInfoSignature/<get_ContainingTypesChain>d__10")]
public IEnumerable`1<TypeInfoSignature> get_ContainingTypesChain();
    public String[] get_GenericParameterNames();
    [IteratorStateMachineAttribute("JetBrains.Common.SignatureDefinitions.TypeInfoSignature/<get_OwnGenericParameterNames>d__14")]
public IEnumerable`1<string> get_OwnGenericParameterNames();
    public virtual bool EqualsTo(TypeMemberSignature obj);
    public virtual void AcceptVisitor(ISignatureVisitor visitor);
}
public class JetBrains.Common.SignatureDefinitions.TypeMemberSignature : object {
    private IGetter`1<TypeInfoSignature> myContainingTypeGetter;
    private TypeInfoSignature myContainingType;
    private bool myIsContainingTypeObtained;
    public TypeInfoSignature ContainingType { get; }
    public TypeMemberSignature(IGetter`1<TypeInfoSignature> containingTypeGetter);
    public TypeInfoSignature get_ContainingType();
    public virtual bool EqualsTo(TypeMemberSignature other);
    public virtual void AcceptVisitor(ISignatureVisitor visitor);
}
public abstract class JetBrains.Common.SignatureDefinitions.TypeSignature : object {
    public abstract virtual bool EqualsTo(TypeSignature other);
    public abstract virtual void AcceptVisitor(ISignatureVisitor visitor);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
