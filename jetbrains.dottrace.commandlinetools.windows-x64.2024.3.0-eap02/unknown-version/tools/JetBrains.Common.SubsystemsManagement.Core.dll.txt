[ExtensionAttribute]
public static class JetBrains.Common.SubsystemsManagement.Converters.ColorsHelpers : object {
    public static sbyte ToDarkDelta;
    public static sbyte ToLightDelta;
    [ExtensionAttribute]
public static double GetBrightness(Color color);
    [ExtensionAttribute]
public static bool IsBrightColor(Color color);
    [ExtensionAttribute]
public static Color AddColor(Color color, sbyte delta);
    private static byte AddChanel(byte source, sbyte delta);
    public static Color GetColorFromObject(object value);
}
public class JetBrains.Common.SubsystemsManagement.EmptyMeasure : AAutomation {
    public static IMeasuredSubsystemInfo Instance;
    [CompilerGeneratedAttribute]
private double <MinWidth>k__BackingField;
    public string DisplayName { get; }
    public long Payload { get; }
    public object PayloadPresentation { get; }
    public float Percent { get; }
    public SubsystemKey SubsystemId { get; }
    public string SmartNamespace { get; }
    public ISubsystemInfo MainSubsystem { get; }
    public string GroupName { get; }
    public BrushDescriptor SubsystemColor { get; }
    public Lazy`1<IEnumerable`1<IMeasuredMethodInfo>> TopMethods { get; }
    public bool HasChilden { get; }
    public Lazy`1<IMeasuredSubsystemInfo[]> Children { get; }
    public double MinWidth { get; private set; }
    private static EmptyMeasure();
    public sealed virtual string get_DisplayName();
    public sealed virtual long get_Payload();
    public sealed virtual object get_PayloadPresentation();
    public sealed virtual float get_Percent();
    public sealed virtual SubsystemKey get_SubsystemId();
    public sealed virtual string get_SmartNamespace();
    public sealed virtual ISubsystemInfo get_MainSubsystem();
    public sealed virtual string get_GroupName();
    public sealed virtual BrushDescriptor get_SubsystemColor();
    public sealed virtual Lazy`1<IEnumerable`1<IMeasuredMethodInfo>> get_TopMethods();
    public sealed virtual bool get_HasChilden();
    public sealed virtual Lazy`1<IMeasuredSubsystemInfo[]> get_Children();
    [CompilerGeneratedAttribute]
public sealed virtual double get_MinWidth();
    [CompilerGeneratedAttribute]
private void set_MinWidth(double value);
}
[ZoneDefinitionAttribute]
public interface JetBrains.Common.SubsystemsManagement.ISubsystemsManagementZone {
}
public static class JetBrains.Common.SubsystemsManagement.Model.ColorTable : object {
    private static Dictionary`2<SubsystemKey, Color[]> ourTable;
    private static ColorTable();
    private static Color FromRgb(int number);
    public static Color GetColor(SubsystemKey key);
    public static void UpdateColorScheme(int oldVersion, ISubsystemInfo[]& subsystems);
    private static Color UpdateColor(int oldVersion, SubsystemKey key, Color currentColor);
    private static int TableIndex(int version);
}
public static class JetBrains.Common.SubsystemsManagement.Model.DisplayNameTable : object {
    private static Dictionary`2<SubsystemKey, string> ourTable;
    private static DisplayNameTable();
    public static string GetDisplayName(SubsystemKey key);
}
public enum JetBrains.Common.SubsystemsManagement.Model.Interface.CoverType : Enum {
    public int value__;
    public static CoverType CoveredByThisSubsystem;
    public static CoverType CoveredByOtherSubsystem;
    public static CoverType NotCovered;
}
public static class JetBrains.Common.SubsystemsManagement.Model.Interface.DataConstants : object {
    public static DataConstant`1<IMeasuredMethodInfo> MeasuredMethodInfo;
    public static DataConstant`1<IMeasuredSubsystemInfo> MeasuredSubsystemInfo;
    public static DataConstant`1<object> SubsystemResultsTag;
    private static DataConstants();
}
public interface JetBrains.Common.SubsystemsManagement.Model.Interface.IItemPayloadBuilder {
    public abstract virtual float BuildPercent(long itemPayload);
    public abstract virtual object BuildPresentation(long itemPayload);
}
public interface JetBrains.Common.SubsystemsManagement.Model.Interface.IMeasureBuilder {
    public abstract virtual ISubsystemMeasure Build(SubsystemUsageInfoData subsystem, ISmartSubsystemTree nsTree);
}
public interface JetBrains.Common.SubsystemsManagement.Model.Interface.IMeasuredItem {
    [CanBeNullAttribute]
public string DisplayName { get; }
    public long Payload { get; }
    public object PayloadPresentation { get; }
    public float Percent { get; }
    public double MinWidth { get; }
    public abstract virtual string get_DisplayName();
    public abstract virtual long get_Payload();
    public abstract virtual object get_PayloadPresentation();
    public abstract virtual float get_Percent();
    public abstract virtual double get_MinWidth();
}
public interface JetBrains.Common.SubsystemsManagement.Model.Interface.IMeasuredMethodInfo {
    public ISubsystemInfo MainSubsystem { get; }
    public BrushDescriptor SubsystemColor { get; }
    public MethodViewData ViewData { get; }
    public abstract virtual ISubsystemInfo get_MainSubsystem();
    public abstract virtual BrushDescriptor get_SubsystemColor();
    public abstract virtual MethodViewData get_ViewData();
}
public interface JetBrains.Common.SubsystemsManagement.Model.Interface.IMeasuredSubsystemInfo {
    public SubsystemKey SubsystemId { get; }
    [CanBeNullAttribute]
public string SmartNamespace { get; }
    public ISubsystemInfo MainSubsystem { get; }
    [NotNullAttribute]
public string GroupName { get; }
    [NotNullAttribute]
public BrushDescriptor SubsystemColor { get; }
    public Lazy`1<IEnumerable`1<IMeasuredMethodInfo>> TopMethods { get; }
    public bool HasChilden { get; }
    public Lazy`1<IMeasuredSubsystemInfo[]> Children { get; }
    public abstract virtual SubsystemKey get_SubsystemId();
    public abstract virtual string get_SmartNamespace();
    public abstract virtual ISubsystemInfo get_MainSubsystem();
    public abstract virtual string get_GroupName();
    public abstract virtual BrushDescriptor get_SubsystemColor();
    public abstract virtual Lazy`1<IEnumerable`1<IMeasuredMethodInfo>> get_TopMethods();
    public abstract virtual bool get_HasChilden();
    public abstract virtual Lazy`1<IMeasuredSubsystemInfo[]> get_Children();
}
public interface JetBrains.Common.SubsystemsManagement.Model.Interface.IOneRuleViewModel {
    public bool IsEmptyRule { get; }
    public bool HasNamespace { get; }
    public string NamespaceTemplate { get; }
    public bool HasAssembly { get; }
    public string AssemblyTemplate { get; }
    public bool HasEventType { get; }
    public string EventType { get; }
    public abstract virtual bool get_IsEmptyRule();
    public abstract virtual bool get_HasNamespace();
    public abstract virtual string get_NamespaceTemplate();
    public abstract virtual bool get_HasAssembly();
    public abstract virtual string get_AssemblyTemplate();
    public abstract virtual bool get_HasEventType();
    public abstract virtual string get_EventType();
}
public interface JetBrains.Common.SubsystemsManagement.Model.Interface.IRuleInfo {
    public string AssemblyTemplate { get; public set; }
    [CanBeNullAttribute]
public Regex AssemblyRegex { get; }
    public string NamespaceTemplate { get; public set; }
    [CanBeNullAttribute]
public Regex NamespaceRegex { get; }
    public SubsystemEventType EventType { get; public set; }
    public abstract virtual string get_AssemblyTemplate();
    public abstract virtual void set_AssemblyTemplate(string value);
    public abstract virtual Regex get_AssemblyRegex();
    public abstract virtual string get_NamespaceTemplate();
    public abstract virtual void set_NamespaceTemplate(string value);
    public abstract virtual Regex get_NamespaceRegex();
    public abstract virtual SubsystemEventType get_EventType();
    public abstract virtual void set_EventType(SubsystemEventType value);
    public abstract virtual int GetPersistentHashCode();
}
public interface JetBrains.Common.SubsystemsManagement.Model.Interface.ISmartSubsystemTree {
    public INamespaceTreeNode Root { get; }
    public long MinThreshold { get; }
    public long MaxThreshold { get; }
    public abstract virtual INamespaceTreeNode get_Root();
    public abstract virtual long get_MinThreshold();
    public abstract virtual long get_MaxThreshold();
    public abstract virtual void MarkSignature(MethodViewData methodViewData, ISubsystemMeasureResult subsystemMeasure, long sum);
    public abstract virtual CoverType CoveredBySubsystem(MethodViewData methodViewData, ISubsystemMeasureResult subsystemMeasure);
    public abstract virtual long GetNodeSum(MethodViewData methodViewData);
}
public interface JetBrains.Common.SubsystemsManagement.Model.Interface.ISubsystemCollector {
    public abstract virtual ISubsystemProfileResult BuildResult(long total, ulong timeResolution, string description);
}
public interface JetBrains.Common.SubsystemsManagement.Model.Interface.ISubsystemInfo {
    public SubsystemKey Key { get; }
    [CanBeNullAttribute]
public string DisplayName { get; public set; }
    public Color SubsystemColor { get; public set; }
    public IRuleInfo[] Rules { get; public set; }
    public SubsystemType Type { get; }
    public SubsystemInfoData Data { get; }
    public abstract virtual SubsystemKey get_Key();
    public abstract virtual string get_DisplayName();
    public abstract virtual void set_DisplayName(string value);
    public abstract virtual Color get_SubsystemColor();
    public abstract virtual void set_SubsystemColor(Color value);
    public abstract virtual IRuleInfo[] get_Rules();
    public abstract virtual void set_Rules(IRuleInfo[] value);
    public abstract virtual SubsystemType get_Type();
    public abstract virtual SubsystemInfoData get_Data();
}
public interface JetBrains.Common.SubsystemsManagement.Model.Interface.ISubsystemInfoFilter {
    public abstract virtual bool Accept(ISubsystemInfo subsystemInfo);
}
public interface JetBrains.Common.SubsystemsManagement.Model.Interface.ISubsystemMeasureResultCollector {
    public abstract virtual SubsystemMeasureResultData BuildMeasureResult(long total, string description);
}
public interface JetBrains.Common.SubsystemsManagement.Model.Interface.ISubsystemProcessorManager`1 {
    [CanBeNullAttribute]
public abstract virtual ISubsystemResults ProcessNode(TCallTreeNode dataModelAggregatedNode, IExecutionControllerOld executionController);
}
public interface JetBrains.Common.SubsystemsManagement.Model.Interface.ISubsystemProfile {
    public int ProfileId { get; }
    public int InvolvedSubsystemsCount { get; }
    public string ProfileName { get; public set; }
    public ISubsystemUsageInfo[] OrderedSubsystems { get; public set; }
    public ISubsystemUsageInfo[] BuiltinSubsystems { get; public set; }
    public abstract virtual int get_ProfileId();
    public abstract virtual int get_InvolvedSubsystemsCount();
    public abstract virtual string get_ProfileName();
    public abstract virtual void set_ProfileName(string value);
    public abstract virtual ISubsystemUsageInfo[] get_OrderedSubsystems();
    public abstract virtual void set_OrderedSubsystems(ISubsystemUsageInfo[] value);
    public abstract virtual ISubsystemUsageInfo[] get_BuiltinSubsystems();
    public abstract virtual void set_BuiltinSubsystems(ISubsystemUsageInfo[] value);
}
public interface JetBrains.Common.SubsystemsManagement.Model.Interface.ISubsystemProfileResult {
    public ISubsystemProfile Profile { get; }
    public int ProfileId { get; }
    public IEnumerable`1<ISubsystemMeasureResult> Subsystems { get; }
    public IItemPayloadBuilder PayloadBuilder { get; }
    public abstract virtual ISubsystemProfile get_Profile();
    public abstract virtual int get_ProfileId();
    public abstract virtual IEnumerable`1<ISubsystemMeasureResult> get_Subsystems();
    public abstract virtual IItemPayloadBuilder get_PayloadBuilder();
}
public interface JetBrains.Common.SubsystemsManagement.Model.Interface.ISubsystemResults {
    public IEnumerable`1<ISubsystemProfileResult> ProfileResults { get; }
    public object Tag { get; }
    public IAccessor`1<IAdvancedMethodInfoProvider> AdvancedMethodInfoResolver { get; }
    public abstract virtual IEnumerable`1<ISubsystemProfileResult> get_ProfileResults();
    public abstract virtual object get_Tag();
    public abstract virtual IAccessor`1<IAdvancedMethodInfoProvider> get_AdvancedMethodInfoResolver();
}
public interface JetBrains.Common.SubsystemsManagement.Model.Interface.ISubsystemStoreManager {
    public IAsyncDataProvider`1<ISubsystemProfile> ActiveProfile { get; }
    public IProperty`1<bool> Enabled { get; }
    public IEnumerable`1<ISubsystemInfo> SubsystemsList { get; }
    public ISimpleSignal OnConfigurationPostprocessing { get; }
    public ISimpleSignal OnConfigurationChangeCompleted { get; }
    public IEnumerable`1<ISubsystemProfile> Profiles { get; }
    public abstract virtual IAsyncDataProvider`1<ISubsystemProfile> get_ActiveProfile();
    public abstract virtual void SetActiveProfileId(int profileId);
    public abstract virtual IProperty`1<bool> get_Enabled();
    public abstract virtual IEnumerable`1<ISubsystemInfo> get_SubsystemsList();
    public abstract virtual void SetData(IEnumerable`1<ISubsystemProfile> profiles, IEnumerable`1<ISubsystemInfo> subsystems);
    public abstract virtual ISimpleSignal get_OnConfigurationPostprocessing();
    public abstract virtual ISimpleSignal get_OnConfigurationChangeCompleted();
    public abstract virtual IEnumerable`1<ISubsystemProfile> get_Profiles();
}
public interface JetBrains.Common.SubsystemsManagement.Model.Interface.ISubsystemUsageInfo {
    [NotNullAttribute]
public ISubsystemInfo SubsystemInfo { get; }
    public bool Enabled { get; public set; }
    public bool CanBeDisabled { get; }
    public PayloadDisplayType DisplayType { get; public set; }
    public abstract virtual ISubsystemInfo get_SubsystemInfo();
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
    public abstract virtual bool get_CanBeDisabled();
    public abstract virtual PayloadDisplayType get_DisplayType();
    public abstract virtual void set_DisplayType(PayloadDisplayType value);
}
public interface JetBrains.Common.SubsystemsManagement.Model.Interface.ISubsystemViewerProvider {
    public SubsystemViewer Value { get; }
    public abstract virtual SubsystemViewer get_Value();
}
[DataContractAttribute]
public class JetBrains.Common.SubsystemsManagement.Model.Interface.SubsystemKey : ValueType {
    [DataMemberAttribute]
private string myKey;
    private SubsystemKey(string key);
    public sealed virtual bool Equals(SubsystemKey other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(SubsystemKey left, SubsystemKey right);
    public static bool op_Inequality(SubsystemKey left, SubsystemKey right);
    public sealed virtual int CompareTo(SubsystemKey other);
    public virtual string ToString();
    public static SubsystemKey Create(string keyOrUserName);
    public int GetPersistentHashCode();
}
public class JetBrains.Common.SubsystemsManagement.Model.Interface.SubsystemKeysSet : object {
    [CompilerGeneratedAttribute]
private SortedSet`1<SubsystemKey> <Exclude>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedSet`1<SubsystemKey> <Include>k__BackingField;
    private static SortedSet`1<SubsystemKey> EmptyCollection;
    [NotNullAttribute]
public SortedSet`1<SubsystemKey> Exclude { get; private set; }
    [NotNullAttribute]
public SortedSet`1<SubsystemKey> Include { get; private set; }
    public SubsystemKeysSet(SubsystemKey include, SortedSet`1<SubsystemKey> exclude);
    public SubsystemKeysSet(IEnumerable`1<SubsystemKey> include, IEnumerable`1<SubsystemKey> exclude);
    private SubsystemKeysSet(SortedSet`1<SubsystemKey> include, SortedSet`1<SubsystemKey> exclude);
    private static SubsystemKeysSet();
    [CompilerGeneratedAttribute]
public SortedSet`1<SubsystemKey> get_Exclude();
    [CompilerGeneratedAttribute]
private void set_Exclude(SortedSet`1<SubsystemKey> value);
    [CompilerGeneratedAttribute]
public SortedSet`1<SubsystemKey> get_Include();
    [CompilerGeneratedAttribute]
private void set_Include(SortedSet`1<SubsystemKey> value);
    [LocalizableAttribute("False")]
public virtual string ToString();
    public bool IsIncluded(SubsystemKey key);
    public sealed virtual bool Equals(SubsystemKeysSet other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public int PersistentHashCode();
    public static bool op_Equality(SubsystemKeysSet left, SubsystemKeysSet right);
    public static bool op_Inequality(SubsystemKeysSet left, SubsystemKeysSet right);
    public Boolean[] IncludedSubsystems(IReadOnlyDictionary`2<SubsystemIndex, SubsystemUsageInfoData> indexToSubsystemKey);
}
public class JetBrains.Common.SubsystemsManagement.Model.Interface.SubsystemMeasureResultData : object {
    public long TotalPayloadExclHidden;
    public ISubsystemMeasureResult[] Results;
}
public class JetBrains.Common.SubsystemsManagement.Model.Interface.SubsystemsConfigData : ValueType {
    public ISubsystemProfile[] Profiles;
    public ISubsystemInfo[] Subsystems;
}
public enum JetBrains.Common.SubsystemsManagement.Model.Interface.SubsystemType : Enum {
    public int value__;
    public static SubsystemType UserDefined;
    public static SubsystemType Native;
    public static SubsystemType UserCode;
    public static SubsystemType SystemCode;
}
[ExtensionAttribute]
public static class JetBrains.Common.SubsystemsManagement.Model.Interface.SubsystemTypeEx : object {
    [ExtensionAttribute]
public static bool IsOther(SubsystemType type);
}
public class JetBrains.Common.SubsystemsManagement.Model.Interface.SubsystemUsageSortingComparer : object {
    public sealed virtual bool Equals(ISubsystemUsageInfo x, ISubsystemUsageInfo y);
    public sealed virtual int GetHashCode(ISubsystemUsageInfo obj);
}
public enum JetBrains.Common.SubsystemsManagement.Model.Interface.SubsystemViewer : Enum {
    public int value__;
    public static SubsystemViewer Performance;
    public static SubsystemViewer Timeline;
}
public interface JetBrains.Common.SubsystemsManagement.Model.ISubsystemCalculationResults`1 {
    public long HiddenPayload { get; }
    public abstract virtual long get_HiddenPayload();
    public abstract virtual bool TryGetCollectedInfo(TKey fuid, Int64& time, SubsystemUsageInfoData& subsystemUsage);
    public abstract virtual long GetTotalOwnPayload();
}
public interface JetBrains.Common.SubsystemsManagement.Model.ISubsystemMeasure {
    public abstract virtual void AddCounter(MethodViewData signature, long sum);
    public abstract virtual IEnumerable`1<ISubsystemMeasureResult> BuildResult();
}
public interface JetBrains.Common.SubsystemsManagement.Model.ISubsystemMeasureResult {
    public SubsystemKey SubsystemId { get; }
    public Lazy`1<ISubsystemMeasureResult[]> Children { get; }
    public Lazy`1<KeyValuePair`2[]> TopSignatures { get; }
    public long Sum { get; }
    [CanBeNullAttribute]
public string DisplayName { get; }
    public string GroupName { get; }
    public abstract virtual SubsystemKey get_SubsystemId();
    public abstract virtual Lazy`1<ISubsystemMeasureResult[]> get_Children();
    public abstract virtual Lazy`1<KeyValuePair`2[]> get_TopSignatures();
    public abstract virtual long get_Sum();
    public abstract virtual string get_DisplayName();
    public abstract virtual string get_GroupName();
}
public class JetBrains.Common.SubsystemsManagement.Model.NamespaceNodeInfoAccessor`1 : object {
    private Func`2<MethodViewData, TKey> myFuidGetter;
    private Func`2<MethodViewData, SubsystemUsageInfoData> mySubsystemResolver;
    public NamespaceNodeInfoAccessor`1(Func`2<MethodViewData, TKey> fuidGetter, Func`2<MethodViewData, SubsystemUsageInfoData> subsystemResolver);
    public TKey GetFuid(MethodViewData node);
    public SubsystemUsageInfoData ResolveSubsystem(MethodViewData node);
}
public class JetBrains.Common.SubsystemsManagement.Model.SmartSubsystemResolveData`1 : object {
    public bool IgnoreTimeMismatch;
    public ISnapshotNamespaceTree SnapshotTree;
    public IDictionary`2<TKey, SubsystemUsageInfoData> FuidToSubsystemUsage;
    internal SmartSubsystemResolveData`1(ISnapshotNamespaceTree snapshotNamespaceTree, IDictionary`2<TKey, SubsystemUsageInfoData> fuidToSubsystemUsage, bool ignoreTimeMismatch);
}
public static class JetBrains.Common.SubsystemsManagement.Model.SmartSubsystemResolveDataBuilder : object {
    public static SmartSubsystemResolveData`1<TFuid> Build(ISnapshotNamespaceTree snapshotNamespaceTree, NamespaceNodeInfoAccessor`1<TFuid> namespaceNodeInfoAccessor, bool ignoreTimeMismatch);
}
public static class JetBrains.Common.SubsystemsManagement.Model.SubsystemCollectorBuilder : object {
    public static ISubsystemMeasureResultCollector Build(SmartSubsystemResolveData`1<TKey> resolveData, ISubsystemCalculationResults`1<TKey> calculator, NamespaceNodeInfoAccessor`1<TKey> namespaceNodeInfoAccessor, IMeasureBuilder measureBuilder);
}
public class JetBrains.Common.SubsystemsManagement.Model.SubsystemData.RuleInfo : object {
    private string myAssemblyTemplate;
    private string myNamespaceTemplate;
    private SubsystemEventType myEventType;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private Regex myAssemblyRegex;
    private Regex myNamespaceRegex;
    public string AssemblyTemplate { get; public set; }
    [CanBeNullAttribute]
public Regex AssemblyRegex { get; }
    public string NamespaceTemplate { get; public set; }
    [CanBeNullAttribute]
public Regex NamespaceRegex { get; }
    public SubsystemEventType EventType { get; public set; }
    public RuleInfo(SubsystemEventType eventType);
    public RuleInfo(string assemblyTemplate, string namespaceTemplate, SubsystemEventType eventType);
    public sealed virtual bool Equals(RuleInfo other);
    private bool NullOrEmptyEquals(string a, string b);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual string get_AssemblyTemplate();
    public sealed virtual void set_AssemblyTemplate(string value);
    public sealed virtual Regex get_AssemblyRegex();
    public sealed virtual string get_NamespaceTemplate();
    public sealed virtual void set_NamespaceTemplate(string value);
    public sealed virtual Regex get_NamespaceRegex();
    public sealed virtual SubsystemEventType get_EventType();
    public sealed virtual void set_EventType(SubsystemEventType value);
    public sealed virtual IRuleInfo Clone();
    private sealed virtual override object System.ICloneable.Clone();
    public sealed virtual int GetPersistentHashCode();
}
public class JetBrains.Common.SubsystemsManagement.Model.SubsystemData.SubsystemIndex : ValueType {
    public byte Value;
    public static SubsystemIndex Hidden;
    private SubsystemIndex(byte value);
    private static SubsystemIndex();
    public static SubsystemIndex op_Explicit(byte value);
    public sealed virtual bool Equals(SubsystemIndex other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(SubsystemIndex left, SubsystemIndex right);
    public static bool op_Inequality(SubsystemIndex left, SubsystemIndex right);
    public virtual string ToString();
}
public class JetBrains.Common.SubsystemsManagement.Model.SubsystemData.SubsystemInfo : object {
    private Color mySubsystemColor;
    [CompilerGeneratedAttribute]
private SubsystemInfoData <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public SubsystemInfoData Data { get; private set; }
    public SubsystemKey Key { get; }
    public string DisplayName { get; public set; }
    public Color SubsystemColor { get; public set; }
    public IRuleInfo[] Rules { get; public set; }
    public SubsystemType Type { get; }
    private SubsystemInfo(SubsystemType type, string userName, Color color, IRuleInfo[] rules);
    private SubsystemInfo(SubsystemType type, SubsystemKey key, IRuleInfo[] rules);
    private SubsystemInfo(SubsystemInfoData infoData, Color color);
    [CompilerGeneratedAttribute]
public sealed virtual SubsystemInfoData get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(SubsystemInfoData value);
    public static ISubsystemInfo BuildUserDefinedSubsystem();
    public static ISubsystemInfo DefaultUserDefinedSubsystem(SubsystemKey key, IRuleInfo[] rules);
    public static ISubsystemInfo BuildUserDefinedSubsystem(string userName, Color color, IRuleInfo[] rules);
    public static ISubsystemInfo BuiltinSubsystem(SubsystemType subsystemType, SubsystemKey key);
    public virtual string ToString();
    public sealed virtual SubsystemKey get_Key();
    public sealed virtual string get_DisplayName();
    public sealed virtual void set_DisplayName(string value);
    public sealed virtual Color get_SubsystemColor();
    public sealed virtual void set_SubsystemColor(Color value);
    public sealed virtual IRuleInfo[] get_Rules();
    public sealed virtual void set_Rules(IRuleInfo[] value);
    public sealed virtual SubsystemType get_Type();
    public sealed virtual bool Equals(ISubsystemInfo other);
    public sealed virtual bool Equals(SubsystemInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual ISubsystemInfo Clone();
    private sealed virtual override object System.ICloneable.Clone();
}
public class JetBrains.Common.SubsystemsManagement.Model.SubsystemData.SubsystemInfoData : object {
    [CompilerGeneratedAttribute]
private SubsystemKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private IRuleInfo[] <Rules>k__BackingField;
    [CompilerGeneratedAttribute]
private SubsystemType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    public SubsystemKey Key { get; public set; }
    public IRuleInfo[] Rules { get; public set; }
    public SubsystemType Type { get; public set; }
    public string DisplayName { get; public set; }
    public SubsystemInfoData(string userName, IRuleInfo[] rules, SubsystemType type);
    public SubsystemInfoData(SubsystemKey key, IRuleInfo[] rules, SubsystemType type);
    [CompilerGeneratedAttribute]
public SubsystemKey get_Key();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Key(SubsystemKey value);
    [CompilerGeneratedAttribute]
public IRuleInfo[] get_Rules();
    [CompilerGeneratedAttribute]
public void set_Rules(IRuleInfo[] value);
    [CompilerGeneratedAttribute]
public SubsystemType get_Type();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Type(SubsystemType value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DisplayName(string value);
    [LocalizableAttribute("False")]
public virtual string ToString();
    public sealed virtual bool Equals(SubsystemInfoData other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public int GetPersistentHashCode();
}
public class JetBrains.Common.SubsystemsManagement.Model.SubsystemData.SubsystemProfile : object {
    private int myProfileId;
    private ISubsystemUsageInfo[] myOrderedSubsystems;
    private ISubsystemUsageInfo[] myBuiltinSubsystems;
    private string myProfileName;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public int ProfileId { get; }
    public string ProfileName { get; public set; }
    public int InvolvedSubsystemsCount { get; }
    public ISubsystemUsageInfo[] OrderedSubsystems { get; public set; }
    public ISubsystemUsageInfo[] BuiltinSubsystems { get; public set; }
    public SubsystemProfile(string profileName, IEnumerable`1<ISubsystemUsageInfo> orderedSubsystems, IEnumerable`1<ISubsystemInfo> allList, int profileId);
    public SubsystemProfile(string profileName, IEnumerable`1<ISubsystemUsageInfo> orderedSubsystems, IEnumerable`1<ISubsystemUsageInfo> builtinSubsystems, IEnumerable`1<ISubsystemInfo> allList, int profileId);
    public SubsystemProfile(string profileName, IEnumerable`1<ISubsystemInfo> orderedSubsystems, IEnumerable`1<ISubsystemInfo> allList, int profileId);
    public SubsystemProfile(string profileName, IEnumerable`1<ISubsystemInfo> orderedSubsystems, IEnumerable`1<ISubsystemInfo> allList, IEnumerable`1<ISubsystemUsageInfo> builtinSubsystems, int profileId);
    private SubsystemProfile(string profileName, ISubsystemUsageInfo[] orderedSubsystems, int profileId);
    public SubsystemProfile(string profileName, ISubsystemUsageInfo[] orderedSubsystems, ISubsystemUsageInfo[] defaultSubsystems, int profileId);
    public static ISubsystemUsageInfo[] BuildUsageList(IEnumerable`1<ISubsystemUsageInfo> orderedSubsystems, IEnumerable`1<ISubsystemInfo> allList);
    private static ISubsystemUsageInfo[] BuildUsageList(IEnumerable`1<ISubsystemInfo> orderedSubsystems, IEnumerable`1<ISubsystemInfo> allList);
    private static ISubsystemUsageInfo[] CloneSubsystemUsageList(IEnumerable`1<ISubsystemUsageInfo> source);
    public sealed virtual ISubsystemProfile Clone();
    private sealed virtual override object System.ICloneable.Clone();
    public sealed virtual int get_ProfileId();
    public sealed virtual string get_ProfileName();
    public sealed virtual void set_ProfileName(string value);
    public sealed virtual int get_InvolvedSubsystemsCount();
    public sealed virtual ISubsystemUsageInfo[] get_OrderedSubsystems();
    public sealed virtual void set_OrderedSubsystems(ISubsystemUsageInfo[] value);
    public sealed virtual ISubsystemUsageInfo[] get_BuiltinSubsystems();
    public sealed virtual void set_BuiltinSubsystems(ISubsystemUsageInfo[] value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public class JetBrains.Common.SubsystemsManagement.Model.SubsystemData.SubsystemUsageInfo : object {
    private ISubsystemInfo mySubsystemInfo;
    private bool myEnabled;
    private PayloadDisplayType myDisplayType;
    [CompilerGeneratedAttribute]
private bool <CanBeDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public ISubsystemInfo SubsystemInfo { get; }
    public bool Enabled { get; public set; }
    public bool CanBeDisabled { get; }
    public PayloadDisplayType DisplayType { get; public set; }
    public SubsystemUsageInfo(ISubsystemInfo selectedItem, bool enabled, PayloadDisplayType dissolved, bool canBeDisabled);
    [LocalizableAttribute("False")]
public virtual string ToString();
    public sealed virtual ISubsystemInfo get_SubsystemInfo();
    public sealed virtual bool get_Enabled();
    public sealed virtual void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CanBeDisabled();
    public sealed virtual PayloadDisplayType get_DisplayType();
    public sealed virtual void set_DisplayType(PayloadDisplayType value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public class JetBrains.Common.SubsystemsManagement.Model.SubsystemMeasureResultBuilder`1 : object {
    private static ushort MinPercent;
    private static ushort MaxPercent;
    private bool myIgnorePayloadMismatch;
    private IMeasureBuilder myMeasureBuilder;
    private NamespaceNodeInfoAccessor`1<TKey> myNamespaceNodeInfoAccessor;
    private ISnapshotNamespaceTree mySnapshotTree;
    private ISubsystemCalculationResults`1<TKey> mySubsystemCalculator;
    public SubsystemMeasureResultBuilder`1(NamespaceNodeInfoAccessor`1<TKey> namespaceNodeInfoAccessor, IMeasureBuilder measureBuilder, ISnapshotNamespaceTree snapshotTree, ISubsystemCalculationResults`1<TKey> subsystemCalculator, bool ignoreTimeMismatch);
    public sealed virtual SubsystemMeasureResultData BuildMeasureResult(long totalPayload, string description);
}
public class JetBrains.Common.SubsystemsManagement.Model.SubsystemProfileData : ValueType {
    private SubsystemUsageInfoData myNativeSubsystem;
    private SubsystemUsageInfoData myUserCodeSubsystem;
    private SubsystemUsageInfoData mySystemCodeSubsystem;
    [CompilerGeneratedAttribute]
private SubsystemUsageInfoData[] <BuiltinSubsystems>k__BackingField;
    [CompilerGeneratedAttribute]
private SubsystemUsageInfoData[] <OrderedSubsystems>k__BackingField;
    public SubsystemUsageInfoData NativeSubsystem { get; }
    public SubsystemUsageInfoData UserCodeSubsystem { get; }
    public SubsystemUsageInfoData SystemCodeSubsystem { get; }
    public SubsystemUsageInfoData[] BuiltinSubsystems { get; private set; }
    public SubsystemUsageInfoData[] OrderedSubsystems { get; private set; }
    private SubsystemProfileData(ISubsystemProfile profile);
    public SubsystemUsageInfoData get_NativeSubsystem();
    public SubsystemUsageInfoData get_UserCodeSubsystem();
    public SubsystemUsageInfoData get_SystemCodeSubsystem();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public SubsystemUsageInfoData[] get_BuiltinSubsystems();
    [CompilerGeneratedAttribute]
private void set_BuiltinSubsystems(SubsystemUsageInfoData[] value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public SubsystemUsageInfoData[] get_OrderedSubsystems();
    [CompilerGeneratedAttribute]
private void set_OrderedSubsystems(SubsystemUsageInfoData[] value);
    public static SubsystemProfileData Create(ISubsystemProfile profile);
    public sealed virtual bool Equals(SubsystemProfileData other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public int GetPersistentHashCode();
}
public class JetBrains.Common.SubsystemsManagement.Model.SubsystemProfileResultBuilder : object {
    private ISubsystemMeasureResultCollector mySubsystemMeasureResult;
    private ISubsystemProfile myProfile;
    public SubsystemProfileResultBuilder(ISubsystemProfile profile, ISubsystemMeasureResultCollector subsystemMeasureResult);
    public sealed virtual ISubsystemProfileResult BuildResult(long total, ulong timeResolution, string description);
}
public class JetBrains.Common.SubsystemsManagement.Model.SubsystemRanging.ItemPayloadBuilder : object {
    private PayloadPresenter myPayloadPresenter;
    private long myTotalPayload;
    public ItemPayloadBuilder(ItemPayloadBuilder other, long totalPayload);
    public ItemPayloadBuilder(ulong timeResolution, long totalPayload);
    public ItemPayloadBuilder(long totalPayload, PayloadPresenter payloadPresenter);
    public sealed virtual float BuildPercent(long itemPayload);
    public sealed virtual object BuildPresentation(long itemPayload);
}
internal interface JetBrains.Common.SubsystemsManagement.Model.SubsystemRanging.Measure.ISmartSubsystemMeasureResult {
    public INamespaceTreeNode NamespaceTreeNode { get; }
    public abstract virtual INamespaceTreeNode get_NamespaceTreeNode();
}
internal interface JetBrains.Common.SubsystemsManagement.Model.SubsystemRanging.Measure.ISubTree {
    public NodeState Type { get; }
    public ISubsystemMeasureResult SubsystemMeasureResult { get; }
    public abstract virtual NodeState get_Type();
    public abstract virtual ISubsystemMeasureResult get_SubsystemMeasureResult();
    [CanBeNullAttribute]
public abstract virtual ISubTree DetachTopChild(long threshold);
}
public abstract class JetBrains.Common.SubsystemsManagement.Model.SubsystemRanging.Measure.MeasuredItem : AAutomation {
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Payload>k__BackingField;
    [CompilerGeneratedAttribute]
private object <PayloadPresentation>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Percent>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinWidth>k__BackingField;
    public string DisplayName { get; }
    public long Payload { get; }
    public object PayloadPresentation { get; }
    public float Percent { get; }
    public double MinWidth { get; public set; }
    protected MeasuredItem(string displayName, long itemPayload, IItemPayloadBuilder builder);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public sealed virtual long get_Payload();
    [CompilerGeneratedAttribute]
public sealed virtual object get_PayloadPresentation();
    [CompilerGeneratedAttribute]
public sealed virtual float get_Percent();
    [CompilerGeneratedAttribute]
public sealed virtual double get_MinWidth();
    [CompilerGeneratedAttribute]
public void set_MinWidth(double value);
}
public class JetBrains.Common.SubsystemsManagement.Model.SubsystemRanging.Measure.MeasuredSubsystemInfo : MeasuredItem {
    private Lazy`1<IEnumerable`1<IMeasuredMethodInfo>> myTopMethods;
    private BrushDescriptor mySubsystemColor;
    private string myGroupName;
    private Lazy`1<IMeasuredSubsystemInfo[]> myChildren;
    private ISubsystemInfo myMainSubsystem;
    private string mySmartNamespace;
    private SubsystemKey mySubsystemId;
    public Lazy`1<IEnumerable`1<IMeasuredMethodInfo>> TopMethods { get; }
    public bool HasChilden { get; }
    public Lazy`1<IMeasuredSubsystemInfo[]> Children { get; }
    public SubsystemKey SubsystemId { get; }
    public string SmartNamespace { get; }
    public ISubsystemInfo MainSubsystem { get; }
    public string GroupName { get; }
    public BrushDescriptor SubsystemColor { get; }
    public MeasuredSubsystemInfo(ISubsystemMeasureResult subsystem, IItemPayloadBuilder builder, ISubsystemInfo rootSubsystemInfo);
    public sealed virtual Lazy`1<IEnumerable`1<IMeasuredMethodInfo>> get_TopMethods();
    public sealed virtual bool get_HasChilden();
    public sealed virtual Lazy`1<IMeasuredSubsystemInfo[]> get_Children();
    public sealed virtual SubsystemKey get_SubsystemId();
    public sealed virtual string get_SmartNamespace();
    public sealed virtual ISubsystemInfo get_MainSubsystem();
    public sealed virtual string get_GroupName();
    public sealed virtual BrushDescriptor get_SubsystemColor();
}
internal enum JetBrains.Common.SubsystemsManagement.Model.SubsystemRanging.Measure.NodeState : Enum {
    public int value__;
    public static NodeState NsHasDifferentSubsystem;
    public static NodeState HasNoSubsystem;
    public static NodeState HasOurSubsystem;
    public static NodeState HasOtherSubsystem;
}
public class JetBrains.Common.SubsystemsManagement.Model.SubsystemRanging.Measure.SubsystemMeasureResult : object {
    private SubsystemUsageInfoData mySubsystemInfo;
    private ISmartSubsystemTree myNsTree;
    private SubsystemKey mySubsystemId;
    private string myDisplayName;
    private TopMeasureList`1<MethodViewData> myTopList;
    private long mySum;
    private Lazy`1<ISubsystemMeasureResult[]> myChildren;
    private KeyValuePair`2[] myTopSignatures;
    public Lazy`1<ISubsystemMeasureResult[]> Children { get; }
    public Lazy`1<KeyValuePair`2[]> TopSignatures { get; }
    public long Sum { get; }
    public string DisplayName { get; }
    public string GroupName { get; }
    public SubsystemKey SubsystemId { get; }
    public SubsystemMeasureResult(SubsystemUsageInfoData subsystemInfo, ISmartSubsystemTree nsTree, string displayName);
    private IEnumerable`1<ISubsystemMeasureResult> BuildSmartList();
    public sealed virtual Lazy`1<ISubsystemMeasureResult[]> get_Children();
    public sealed virtual Lazy`1<KeyValuePair`2[]> get_TopSignatures();
    public sealed virtual long get_Sum();
    public sealed virtual string get_DisplayName();
    public sealed virtual string get_GroupName();
    public sealed virtual SubsystemKey get_SubsystemId();
    public sealed virtual void AddCounter(MethodViewData signature, long sum);
    [IteratorStateMachineAttribute("JetBrains.Common.SubsystemsManagement.Model.SubsystemRanging.Measure.SubsystemMeasureResult/<BuildResult>d__23")]
public sealed virtual IEnumerable`1<ISubsystemMeasureResult> BuildResult();
    [CompilerGeneratedAttribute]
private ISubsystemMeasureResult[] <.ctor>b__8_0();
    [CompilerGeneratedAttribute]
private ISubsystemMeasureResult[] <.ctor>b__8_1();
    [CompilerGeneratedAttribute]
private KeyValuePair`2[] <get_TopSignatures>b__13_0();
}
internal class JetBrains.Common.SubsystemsManagement.Model.SubsystemRanging.Measure.SubTree : object {
    private ISubTree myTopChildNode;
    private NodeState myType;
    private long mySum;
    private ISubsystemMeasureResult mySubsystemMesureResult;
    private KeyValuePair`2[] myTopSignaturesWithoutTopMethod;
    private KeyValuePair`2[] myTopSignatures;
    [CanBeNullAttribute]
private INamespaceTreeNode myNamespaceTreeNode;
    private Lazy`1<ISubsystemMeasureResult[]> myChildren;
    public INamespaceTreeNode NamespaceTreeNode { get; }
    public Lazy`1<ISubsystemMeasureResult[]> Children { get; }
    public Lazy`1<KeyValuePair`2[]> TopSignatures { get; }
    public long Sum { get; }
    public string DisplayName { get; }
    public string GroupName { get; }
    public SubsystemKey SubsystemId { get; }
    public NodeState Type { get; }
    public ISubsystemMeasureResult SubsystemMeasureResult { get; }
    private SubTree(NodeState type, INamespaceTreeNode namespaceTreeNode, ISubsystemMeasureResult subsystemMesureResult, long sum, KeyValuePair`2[] topSignaturesWithoutTopMethod, ISubTree topChildNode);
    public static ISubTree OurSubsystemLeaf(INamespaceTreeNode nodeNamespace, ISubsystemMeasureResult subsystemInfo, long sum);
    public static ISubTree OtherSubsystemLeaf(long sum);
    public static ISubTree OtherSubsystem(long sum);
    public static ISubTree NotCoveredSubsystem();
    public static ISubTree OurSubsystem(IEnumerable`1<ISubTree> children, INamespaceTreeNode nodeNamespace);
    public static ISubTree DirtyNode();
    public sealed virtual INamespaceTreeNode get_NamespaceTreeNode();
    public sealed virtual Lazy`1<ISubsystemMeasureResult[]> get_Children();
    public sealed virtual Lazy`1<KeyValuePair`2[]> get_TopSignatures();
    private void RebuildTopMethods();
    public sealed virtual long get_Sum();
    public sealed virtual string get_DisplayName();
    public sealed virtual string get_GroupName();
    public sealed virtual SubsystemKey get_SubsystemId();
    public sealed virtual NodeState get_Type();
    public sealed virtual ISubsystemMeasureResult get_SubsystemMeasureResult();
    public sealed virtual ISubTree DetachTopChild(long threshold);
    [CompilerGeneratedAttribute]
private KeyValuePair`2[] <get_TopSignatures>b__20_0();
}
public class JetBrains.Common.SubsystemsManagement.Model.SubsystemRanging.Measure.TopMeasureList`1 : object {
    private static int TopFunctionsCount;
    private bool myTopSignaturesIsSorted;
    private List`1<KeyValuePair`2<T, long>> myTopSignatures;
    public IEnumerable`1<KeyValuePair`2<T, long>> GetTopList();
    private void SortSignatures(List`1<KeyValuePair`2<T, long>> topSignatures);
    public void AddItem(T signature, long sum);
    public static KeyValuePair`2[] MergeArrays(KeyValuePair`2[] arr1, KeyValuePair`2[] arr2);
}
public class JetBrains.Common.SubsystemsManagement.Model.SubsystemRanging.SmartSubsystem.SmartSubsystemList : object {
    private static int PredominantNodePercent;
    private static int SplitThresholdPercent;
    private List`1<ISubTree> myMeasureNodes;
    private List`1<ISubTree> myOtherNodes;
    private ISubsystemMeasureResult mySubsystemMeasure;
    private SmartSubsystemList(ISubsystemMeasureResult subsystemMeasure);
    public static IEnumerable`1<ISubsystemMeasureResult> Build(ISubsystemMeasureResult subsystemMeasure, ISmartSubsystemTree nsTree, long totalSum);
    private IEnumerable`1<ISubsystemMeasureResult> Build(ISmartSubsystemTree nsTree, long totalSum);
    private static ISubTree BuildMutualTreeNode(IEnumerable`1<ISubTree> nodes);
    private static ISubTree SplitByPredominantNode(ISubTree subTree, long threshold, ISubTree& remain);
    private long CalcSubsystemTimeUnderRoot(ISmartSubsystemTree nsTree, INamespaceTreeNode root);
    private ISubTree CollectSmartNode(ISmartSubsystemTree nsTree, INamespaceTreeNode node, bool forceBuildResult);
    private ISubTree BuildSmartNode(ISmartSubsystemTree nsTree, INamespaceTreeNode node, long totalTime, ICollection`1<ISubTree> children);
    private void AddToDirtyFromNode(ISubTree subtree);
    private void AddToLowTimeFromNode(ISubTree subtree);
    private void AddNewMeasureFromNode(ISubTree subtree);
    private static NodeState BuildNodeState(bool hasOurSubsystem, bool hasOtherSubsystem);
}
public class JetBrains.Common.SubsystemsManagement.Model.SubsystemRanging.SmartSubsystem.SmartSubsystemTree : object {
    private long myMinThreshold;
    private long myMaxThreshold;
    private ISnapshotNamespaceTree myTree;
    private Dictionary`2<MethodViewData, KeyValuePair`2<ISubsystemMeasureResult, long>> myMarkStorage;
    public INamespaceTreeNode Root { get; }
    public long MinThreshold { get; }
    public long MaxThreshold { get; }
    public SmartSubsystemTree(long minThreshold, long maxThreshold, ISnapshotNamespaceTree tree);
    public sealed virtual void MarkSignature(MethodViewData methodViewData, ISubsystemMeasureResult subsystemMeasure, long sum);
    public sealed virtual CoverType CoveredBySubsystem(MethodViewData methodViewData, ISubsystemMeasureResult subsystemMeasure);
    public sealed virtual long GetNodeSum(MethodViewData methodViewData);
    public sealed virtual INamespaceTreeNode get_Root();
    public sealed virtual long get_MinThreshold();
    public sealed virtual long get_MaxThreshold();
}
public class JetBrains.Common.SubsystemsManagement.Model.SubsystemRanging.SubsystemMethodInfo : MeasuredItem {
    private BrushDescriptor mySubsystemColor;
    private MethodViewData myMethod;
    private ISubsystemInfo myMainSubsystem;
    public MethodViewData ViewData { get; }
    public ISubsystemInfo MainSubsystem { get; }
    public BrushDescriptor SubsystemColor { get; }
    public SubsystemMethodInfo(ISubsystemInfo mainSubsystem, BrushDescriptor subsystemColor, MethodViewData method, long itemPayload, IItemPayloadBuilder builder);
    public sealed virtual MethodViewData get_ViewData();
    public sealed virtual ISubsystemInfo get_MainSubsystem();
    public sealed virtual BrushDescriptor get_SubsystemColor();
    public sealed virtual bool Equals(IMeasuredMethodInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.Common.SubsystemsManagement.Model.SubsystemRanging.SubsystemProfileResult : object {
    private ISubsystemMeasureResult[] mySubsystems;
    [CompilerGeneratedAttribute]
private ISubsystemProfile <Profile>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProfileId>k__BackingField;
    private IItemPayloadBuilder myPayloadBuilder;
    public ISubsystemProfile Profile { get; }
    public int ProfileId { get; }
    public IEnumerable`1<ISubsystemMeasureResult> Subsystems { get; }
    public IItemPayloadBuilder PayloadBuilder { get; }
    public SubsystemProfileResult(ISubsystemProfile profile, IEnumerable`1<ISubsystemMeasureResult> results, IItemPayloadBuilder payloadBuilder);
    [CompilerGeneratedAttribute]
public sealed virtual ISubsystemProfile get_Profile();
    [CompilerGeneratedAttribute]
public sealed virtual int get_ProfileId();
    public sealed virtual IEnumerable`1<ISubsystemMeasureResult> get_Subsystems();
    public sealed virtual IItemPayloadBuilder get_PayloadBuilder();
}
[ExtensionAttribute]
public static class JetBrains.Common.SubsystemsManagement.Model.SubsystemResolveHelpers : object {
    [ExtensionAttribute]
public static SubsystemUsageInfoData ResolveSubsystem(SubsystemProfileData profileData, SubsystemEventType eventType);
    [ExtensionAttribute]
public static SubsystemUsageInfoData ResolveSubsystem(SubsystemProfileData profileData, MethodViewData signature, bool isNative);
    private static bool CheckFunctionSignature(IRuleInfo[] rules, MethodViewData methodViewData);
    private static bool CheckEventType(IRuleInfo[] ruleInfos, SubsystemEventType eventType);
}
public class JetBrains.Common.SubsystemsManagement.Model.SubsystemResults : object {
    private IAccessor`1<IAdvancedMethodInfoProvider> myAdvancedMethodInfoResolver;
    private ISubsystemProfileResult[] myProfileResults;
    private object myTag;
    public IEnumerable`1<ISubsystemProfileResult> ProfileResults { get; }
    public object Tag { get; }
    public IAccessor`1<IAdvancedMethodInfoProvider> AdvancedMethodInfoResolver { get; }
    public SubsystemResults(IEnumerable`1<ISubsystemProfileResult> profileResults, object tag, IAccessor`1<IAdvancedMethodInfoProvider> advancedMethodInfoResolver);
    public sealed virtual IEnumerable`1<ISubsystemProfileResult> get_ProfileResults();
    public sealed virtual object get_Tag();
    public sealed virtual IAccessor`1<IAdvancedMethodInfoProvider> get_AdvancedMethodInfoResolver();
}
public static class JetBrains.Common.SubsystemsManagement.Model.SubsystemsCollection : object {
    public static SubsystemKey SpecialKey;
    public static SubsystemKey NativeCodeKey;
    public static SubsystemKey UserCodeKey;
    public static SubsystemKey SystemCodeKey;
    public static SubsystemKey WaitKey;
    public static SubsystemKey SleepKey;
    public static SubsystemKey WPFKey;
    public static SubsystemKey SystemIOKey;
    public static SubsystemKey FileIOKey;
    public static SubsystemKey StringKey;
    public static SubsystemKey WinformsKey;
    public static SubsystemKey LinqKey;
    public static SubsystemKey CollectionsKey;
    public static SubsystemKey RemotingKey;
    public static SubsystemKey ReflectionKey;
    public static SubsystemKey WaitingForCPUKey;
    public static SubsystemKey GCWaitKey;
    public static SubsystemKey EventSqlQueryKey;
    public static SubsystemKey EventLockContentionKey;
    public static SubsystemKey EventGcWaitKey;
    public static SubsystemKey EventJitKey;
    public static SubsystemKey EventFileIOKey;
    public static SubsystemKey EventWaitingForCPUKey;
    public static SubsystemKey EventAwaitingTimeKey;
    public static string DefaultProfileName;
    private static ISubsystemInfo NativeSubsystem;
    private static ISubsystemInfo UserCodeSubsystem;
    private static ISubsystemInfo SystemCodeSubsystem;
    public static RuleInfo[] SystemIORules;
    public static ISubsystemInfo AwaitsSubsystem;
    public static ISubsystemInfo[] EventBasedSubsystems;
    public static RuleInfo SleepSubsystemRule;
    public static ISubsystemInfo SleepSubsystem;
    private static ISubsystemInfo[] PerformanceSubsystems;
    public static ISubsystemUsageInfo[] DefaultSubsystemUsages;
    public static ISubsystemInfo[] BuiltinSubsystems;
    public static ISubsystemInfo[] BuiltinDissolvedSubsystems;
    public static ISubsystemUsageInfo[] DefaultBuiltinSubsystemUsages;
    public static ISubsystemUsageInfo[] BuiltinSubsystemUsagesForNewProfile;
    public static ISubsystemInfo[] AllSubsystems;
    public static ISubsystemProfile DefaultProfile;
    private static SubsystemsCollection();
    private static SubsystemKey GetEventTypeSubsystemKey(SubsystemEventType eventType);
    private static ISubsystemInfo BuildSubsystemForEvent(SubsystemEventType eventType, RuleInfo[] additionalRules);
}
public static class JetBrains.Common.SubsystemsManagement.Model.SubsystemSerializationHelper : object {
    private static ColorConverter ourColorConverter;
    private static SubsystemSerializationHelper();
    public static void WriteToXml(SubsystemsConfigData configData, XmlElement element);
    private static void BuildSubsystemXml(XmlElement xmlElement, ISubsystemInfo subsystem);
    private static void BuildRuleXml(XmlElement xmlElement, IRuleInfo ruleInfo);
    private static void BuildProfileXml(XmlElement xmlElement, ISubsystemProfile profile);
    private static bool IsDefaultBuiltinSubsystems(ISubsystemUsageInfo[] profileBuiltinSubsystems);
    private static void BuildSubsystemsListXml(XmlElement parentElement, ISubsystemUsageInfo[] subsystems);
    public static SubsystemsConfigData ReadFromXml(XmlElement element);
    private static IEnumerable`1<ISubsystemProfile> BuildProfileList(XmlElement xmlElement, ISubsystemInfo[] subsystems);
    private static IEnumerable`1<ISubsystemUsageInfo> BuildSubsystemList(XmlElement xmlElement, ISubsystemInfo[] globalSubsystems, bool canBeDisabled);
    private static PayloadDisplayType TryParseSubsystemDisplayType(string source);
    private static IEnumerable`1<ISubsystemInfo> BuildSubsystemList(XmlElement xmlElement);
    [IteratorStateMachineAttribute("JetBrains.Common.SubsystemsManagement.Model.SubsystemSerializationHelper/<BuildRuleList>d__12")]
private static IEnumerable`1<IRuleInfo> BuildRuleList(XmlElement xmlElement);
    private static Color DeserializeColor(string color);
    public static void ValidateData(ISubsystemProfile[] profilesArr, ISubsystemInfo[] subsystemsArr);
    public static SubsystemsConfigData DeserializeSettings(string xmlSettings);
    public static string SerializeSettings(SubsystemsConfigData configData);
}
public class JetBrains.Common.SubsystemsManagement.Model.SubsystemUsageInfoData : object {
    [CompilerGeneratedAttribute]
private SubsystemInfoData <SubsystemInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private PayloadDisplayType <DisplayType>k__BackingField;
    public SubsystemInfoData SubsystemInfo { get; private set; }
    public bool Enabled { get; private set; }
    public PayloadDisplayType DisplayType { get; private set; }
    private SubsystemUsageInfoData(ISubsystemUsageInfo usageInfo);
    public SubsystemUsageInfoData(SubsystemInfoData subsystemInfo, bool enabled, PayloadDisplayType displayType);
    [CompilerGeneratedAttribute]
public SubsystemInfoData get_SubsystemInfo();
    [CompilerGeneratedAttribute]
private void set_SubsystemInfo(SubsystemInfoData value);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
private void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public PayloadDisplayType get_DisplayType();
    [CompilerGeneratedAttribute]
private void set_DisplayType(PayloadDisplayType value);
    public static SubsystemUsageInfoData Create(ISubsystemUsageInfo usageInfo);
    public static SubsystemUsageInfoData CreateMock(string name, PayloadDisplayType displayType);
    public sealed virtual bool Equals(SubsystemUsageInfoData other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public int GetPersistentHashCode();
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.Common.SubsystemsManagement.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string ActiveProfileInTimelineSettingDescription { get; }
    public static string ActiveProfileSettingDescription { get; }
    public static string DefaultSettingsVersionSettingDescription { get; }
    public static string SubsystemManagerSettingsSettingDescription { get; }
    public static string XmlSettingDescription { get; }
    public static string Subsystems_EmptyMeasure_DisplayName { get; }
    public static string Subsystems_RuleEditor_AddRule_Title { get; }
    public static string Subsystems_RuleEditor_EditRule_Title { get; }
    public static string Subsystems_ProfilesEditor_Default_Title { get; }
    public static string Subsystems_ProfilesEditor_NewProfileWithIndex { get; }
    public static string Subsystems_ProfilesEditor_NewProfile_AllFailed { get; }
    public static string Subsystems_SubsystemListSelector_Title { get; }
    public static string Subsystems_SubsystemListEditor_RemovePrompt_Text { get; }
    public static string Subsystems_SubsystemListEditor_RemovePrompt_Title { get; }
    public static string Subsystems_InfoEditor_EmptySubsystemName { get; }
    public static string Subsystems_InfoEditor_DuplicateSubsystemName { get; }
    public static string Subsystems_SubsystemEdit_Title { get; }
    public static string Subsystems_MergedSubsystem_Name { get; }
    public static string Subsystems_OpenSettings_ContextMenuAction { get; }
    public static string Subsystems_Migration_NewNameOnConflict { get; }
    public static string Subsystems_SubTree_OtherStar_DisplayName { get; }
    public static string Subsystems_SubTree_Other_DisplayName { get; }
    public static string Subsystems_Profile_Default_Name { get; }
    public static string Subsystems_Predefined_Hidden { get; }
    public static string Subsystems_Predefined_Special { get; }
    public static string Subsystems_Predefined_NativeCode { get; }
    public static string Subsystems_Predefined_UserCode { get; }
    public static string Subsystems_Predefined_SystemCode { get; }
    public static string Subsystems_Predefined_Wait { get; }
    public static string Subsystems_Predefined_Sleep { get; }
    public static string Subsystems_Predefined_WPF { get; }
    public static string Subsystems_Predefined_String { get; }
    public static string Subsystems_Predefined_WinForms { get; }
    public static string Subsystems_Predefined_Linq { get; }
    public static string Subsystems_Predefined_Collections { get; }
    public static string Subsystems_Predefined_Remoting { get; }
    public static string Subsystems_Predefined_Reflection { get; }
    public static string Subsystems_Predefined_FileIO { get; }
    public static string Subsystems_Predefined_WaitingForCPU { get; }
    public static string Subsystems_Predefined_GCWait { get; }
    public static string SimpleRuleType_Empty_Text1 { get; }
    public static string SimpleRuleType_HasAssemblyAndNamespaceTemplate_Text1 { get; }
    public static string SimpleRuleType_HasAssemblyAndNamespaceTemplate_Text2 { get; }
    public static string ComplexRuleType_Complex { get; }
    public static string ComplexRuleType_Or_Preposition { get; }
    public static string ComplexRuleType_N_other { get; }
    public static string FirstAssemblyRule_Text1 { get; }
    public static string FirstNamespaceRule_Text1 { get; }
    public static string EntityNotUsed { get; }
    public static string EntityUsedIn { get; }
    public static string EntityUsedIn_NProfiles { get; }
    public static string SimpleRuleType_HasAssemblyTemplate { get; }
    public static string SimpleRuleType_HasNamespaceTemplate { get; }
    public static string SimpleRuleType_HasAssemblyAndNamespaceTemplate { get; }
    public static string Options_Show { get; }
    public static string Options_Join { get; }
    public static string Options_Hide { get; }
    public static string Options_Profiles_Header { get; }
    public static string Options_Subsystems_Header { get; }
    public static string Options_AddProfile_Tooltip { get; }
    public static string Options_ChangeProfile_Tooltip { get; }
    public static string Options_RemoveProfile_Tooltip { get; }
    public static string Options_DeleteProfile_Tooltip { get; }
    public static string Options_AddSubsystem_Tooltip { get; }
    public static string Options_AddSubsystem_Empty_Tooltip { get; }
    public static string Options_AddSubsystem_Duplicate_Tooltip { get; }
    public static string Options_ChangeSubsystem_Tooltip { get; }
    public static string Options_RemoveSubsystem_Tooltip { get; }
    public static string Options_MergeSubsystem_Tooltip { get; }
    public static string Options_MoveUpSubsystem_Tooltip { get; }
    public static string Options_MoveDownSubsystem_Tooltip { get; }
    public static string Options_Tip { get; }
    public static string Options_SubsystemEdit_AssemblyPrefix_Header { get; }
    public static string Options_SubsystemEdit_MethodPrefix_Header { get; }
    public static string Options_SubsystemEdit_Color_Label { get; }
    public static string Options_SubsystemEdit_Color_Tooltip { get; }
    public static string Options_SubsystemEdit_Show_Tooltip { get; }
    public static string Options_SubsystemEdit_Join_Tooltip { get; }
    public static string Options_SubsystemEdit_Hide_Tooltip { get; }
    public static string Options_SubsystemEdit_TimeSpent_Label { get; }
    public static string Options_SubsystemEdit_InAssembly_Label { get; }
    public static string Options_SubsystemEdit_DuringEvent_Label { get; }
    public static string Options_SubsystemEdit_Name_Label { get; }
    public static string Options_SubsystemEdit_EmptyRule { get; }
    public static string Options_SubsystemEdit_Reset_Label { get; }
    public static string Options_SubsystemEdit_MethodFilter_Hint { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_ActiveProfileInTimelineSettingDescription();
    public static string get_ActiveProfileSettingDescription();
    public static string get_DefaultSettingsVersionSettingDescription();
    public static string get_SubsystemManagerSettingsSettingDescription();
    public static string get_XmlSettingDescription();
    public static string get_Subsystems_EmptyMeasure_DisplayName();
    public static string get_Subsystems_RuleEditor_AddRule_Title();
    public static string get_Subsystems_RuleEditor_EditRule_Title();
    public static string get_Subsystems_ProfilesEditor_Default_Title();
    public static string get_Subsystems_ProfilesEditor_NewProfileWithIndex();
    public static string get_Subsystems_ProfilesEditor_NewProfile_AllFailed();
    public static string get_Subsystems_SubsystemListSelector_Title();
    public static string get_Subsystems_SubsystemListEditor_RemovePrompt_Text();
    public static string get_Subsystems_SubsystemListEditor_RemovePrompt_Title();
    public static string get_Subsystems_InfoEditor_EmptySubsystemName();
    public static string get_Subsystems_InfoEditor_DuplicateSubsystemName();
    public static string get_Subsystems_SubsystemEdit_Title();
    public static string get_Subsystems_MergedSubsystem_Name();
    public static string get_Subsystems_OpenSettings_ContextMenuAction();
    public static string get_Subsystems_Migration_NewNameOnConflict();
    public static string get_Subsystems_SubTree_OtherStar_DisplayName();
    public static string get_Subsystems_SubTree_Other_DisplayName();
    public static string get_Subsystems_Profile_Default_Name();
    public static string get_Subsystems_Predefined_Hidden();
    public static string get_Subsystems_Predefined_Special();
    public static string get_Subsystems_Predefined_NativeCode();
    public static string get_Subsystems_Predefined_UserCode();
    public static string get_Subsystems_Predefined_SystemCode();
    public static string get_Subsystems_Predefined_Wait();
    public static string get_Subsystems_Predefined_Sleep();
    public static string get_Subsystems_Predefined_WPF();
    public static string get_Subsystems_Predefined_String();
    public static string get_Subsystems_Predefined_WinForms();
    public static string get_Subsystems_Predefined_Linq();
    public static string get_Subsystems_Predefined_Collections();
    public static string get_Subsystems_Predefined_Remoting();
    public static string get_Subsystems_Predefined_Reflection();
    public static string get_Subsystems_Predefined_FileIO();
    public static string get_Subsystems_Predefined_WaitingForCPU();
    public static string get_Subsystems_Predefined_GCWait();
    public static string get_SimpleRuleType_Empty_Text1();
    public static string get_SimpleRuleType_HasAssemblyAndNamespaceTemplate_Text1();
    public static string get_SimpleRuleType_HasAssemblyAndNamespaceTemplate_Text2();
    public static string get_ComplexRuleType_Complex();
    public static string get_ComplexRuleType_Or_Preposition();
    public static string get_ComplexRuleType_N_other();
    public static string get_FirstAssemblyRule_Text1();
    public static string get_FirstNamespaceRule_Text1();
    public static string get_EntityNotUsed();
    public static string get_EntityUsedIn();
    public static string get_EntityUsedIn_NProfiles();
    public static string get_SimpleRuleType_HasAssemblyTemplate();
    public static string get_SimpleRuleType_HasNamespaceTemplate();
    public static string get_SimpleRuleType_HasAssemblyAndNamespaceTemplate();
    public static string get_Options_Show();
    public static string get_Options_Join();
    public static string get_Options_Hide();
    public static string get_Options_Profiles_Header();
    public static string get_Options_Subsystems_Header();
    public static string get_Options_AddProfile_Tooltip();
    public static string get_Options_ChangeProfile_Tooltip();
    public static string get_Options_RemoveProfile_Tooltip();
    public static string get_Options_DeleteProfile_Tooltip();
    public static string get_Options_AddSubsystem_Tooltip();
    public static string get_Options_AddSubsystem_Empty_Tooltip();
    public static string get_Options_AddSubsystem_Duplicate_Tooltip();
    public static string get_Options_ChangeSubsystem_Tooltip();
    public static string get_Options_RemoveSubsystem_Tooltip();
    public static string get_Options_MergeSubsystem_Tooltip();
    public static string get_Options_MoveUpSubsystem_Tooltip();
    public static string get_Options_MoveDownSubsystem_Tooltip();
    public static string get_Options_Tip();
    public static string get_Options_SubsystemEdit_AssemblyPrefix_Header();
    public static string get_Options_SubsystemEdit_MethodPrefix_Header();
    public static string get_Options_SubsystemEdit_Color_Label();
    public static string get_Options_SubsystemEdit_Color_Tooltip();
    public static string get_Options_SubsystemEdit_Show_Tooltip();
    public static string get_Options_SubsystemEdit_Join_Tooltip();
    public static string get_Options_SubsystemEdit_Hide_Tooltip();
    public static string get_Options_SubsystemEdit_TimeSpent_Label();
    public static string get_Options_SubsystemEdit_InAssembly_Label();
    public static string get_Options_SubsystemEdit_DuringEvent_Label();
    public static string get_Options_SubsystemEdit_Name_Label();
    public static string get_Options_SubsystemEdit_EmptyRule();
    public static string get_Options_SubsystemEdit_Reset_Label();
    public static string get_Options_SubsystemEdit_MethodFilter_Hint();
}
public class JetBrains.Common.SubsystemsManagement.Resources.SubsystemsManagementCoreThemedIcons : object {
}
public class JetBrains.Common.SubsystemsManagement.Resources.SubsystemsManagementViewThemedIcons : object {
}
public interface JetBrains.Common.SubsystemsManagement.Settings.IProfileSettingManager {
    public object ViewModel { get; }
    public abstract virtual object get_ViewModel();
    public abstract virtual bool CanClose();
    public abstract virtual bool Close();
}
public interface JetBrains.Common.SubsystemsManagement.Settings.ISubsystemSettingManagerFactory {
    public abstract virtual IProfileSettingManager CreateSettingsManager(Lifetime lifetime, IContextBoundSettingsStoreLive settingsContext);
}
public abstract class JetBrains.Common.SubsystemsManagement.Settings.ProfilesEditorOptionsPageBase : AAutomation {
    public static string PageId;
    private IProfileSettingManager myProfileSettingManager;
    public object ViewModel { get; }
    private string JetBrains.Application.UI.Options.IOptionsPage.Id { get; }
    protected ProfilesEditorOptionsPageBase(Lifetime lifetime, ISubsystemSettingManagerFactory profileSettingManager, OptionsSettingsSmartContext optionsSettingsSmartContext);
    public object get_ViewModel();
    private sealed virtual override string JetBrains.Application.UI.Options.IOptionsPage.get_Id();
    private sealed virtual override bool JetBrains.Application.UI.Options.IOptionsPage.OnOk();
}
public abstract class JetBrains.Common.SubsystemsManagement.Settings.SubsystemsOptionsPageBase : AEmptyOptionsPage {
    public static string PageId;
}
[ShellComponentAttribute("16")]
public class JetBrains.Common.SubsystemsManagement.ShellComponents.DefaultSubsystemInfoFilter : object {
    public virtual bool Accept(ISubsystemInfo subsystemInfo);
}
[ShellComponentAttribute("16")]
public class JetBrains.Common.SubsystemsManagement.ShellComponents.DefaultSubsystemViewerProvider : object {
    public SubsystemViewer Value { get; }
    public virtual SubsystemViewer get_Value();
}
[ShellComponentAttribute("10")]
public class JetBrains.Common.SubsystemsManagement.ShellComponents.MeasureBuilder : object {
    public MeasureBuilder(Lifetime lifetime);
    public sealed virtual ISubsystemMeasure Build(SubsystemUsageInfoData subsystem, ISmartSubsystemTree nsTree);
}
[SettingsKeyAttribute("System.Reflection.Missing", "JetBrains.Common.SubsystemsManagement.Resources.Strings", "SubsystemManagerSettingsSettingDescription")]
public class JetBrains.Common.SubsystemsManagement.ShellComponents.SubsystemManagerSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Common.SubsystemsManagement.Resources.Strings", "ActiveProfileSettingDescription")]
public int ActiveProfile;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Common.SubsystemsManagement.Resources.Strings", "ActiveProfileInTimelineSettingDescription")]
public int ActiveProfileInTimeline;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Common.SubsystemsManagement.Resources.Strings", "XmlSettingDescription")]
public string Xml;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Common.SubsystemsManagement.Resources.Strings", "DefaultSettingsVersionSettingDescription")]
public int DefaultSettingsVersion;
    public static int CurrentDefaultSettingsVersion;
}
public static class JetBrains.Common.SubsystemsManagement.ShellComponents.SubsystemMigrationHelpers : object {
    public static IRuleInfo[] RemoveAll(IRuleInfo[] rules, RuleInfo ruleToDelete);
    public static ISubsystemInfo[] UniqueToAdd(ISubsystemInfo[] userSet, IEnumerable`1<ISubsystemInfo> newSet, IEqualityComparer`1<ISubsystemInfo> comparer);
    [IteratorStateMachineAttribute("JetBrains.Common.SubsystemsManagement.ShellComponents.SubsystemMigrationHelpers/<UniqueToAdd>d__2`1")]
private static IEnumerable`1<T> UniqueToAdd(T[] userSet, IEnumerable`1<T> newSet, Func`3<T, T, bool> conflictingItems, Func`2<T, T> recreateOnConflict, IEqualityComparer`1<T> comparer);
}
[ShellComponentAttribute("10")]
public class JetBrains.Common.SubsystemsManagement.ShellComponents.SubsystemSettingManagerFactory : object {
    private ISubsystemUiEditorController mySubsystemUiController;
    private SubsystemStorageComponent myStorageComponent;
    private IThreading myThreading;
    public SubsystemSettingManagerFactory(Lifetime lifetime, ISubsystemUiEditorController subsystemUiController, SubsystemStorageComponent storageComponent, IThreading threading);
    public sealed virtual IProfileSettingManager CreateSettingsManager(Lifetime lifetime, IContextBoundSettingsStoreLive settingsContext);
}
[ShellComponentAttribute("18")]
public class JetBrains.Common.SubsystemsManagement.ShellComponents.SubsystemStorageComponent : object {
    [NotNullAttribute]
public ISubsystemStoreManager Storage;
    private SubsystemViewer myViewProvider;
    public SubsystemStorageComponent(Lifetime lifetime, ISettingsStore settingsStore, ISubsystemViewerProvider subsystemViewerProvider, IThreading threading);
    public ISubsystemStoreManager BuildStoreManageOnCustomSettingContext(Lifetime lifetime, IContextBoundSettingsStoreLive liveContext, IThreading threading);
}
[ShellComponentAttribute("10")]
public class JetBrains.Common.SubsystemsManagement.ShellComponents.SubsystemUiEditorController : object {
    private Lifetime myLifetime;
    private IModalDialogController myDialogController;
    private IProperty`1<Nullable`1<SubsystemKey>> myLastSelectedSubsystemName;
    private ISubsystemStoreManager myApplicationWideSubsystemStorage;
    private ISubsystemInfoFilter mySubsystemInfoFilter;
    private bool AllowHiddenDisplayType { get; }
    private bool EventTypeEditorIsVisible { get; }
    public SubsystemUiEditorController(Lifetime lifetime, IModalDialogController dialogController, SubsystemStorageComponent storageComponent, ISubsystemInfoFilter subsystemInfoFilter);
    public sealed virtual void EditProfiles();
    public sealed virtual bool SelectSubsystemList(IEnumerable`1<ISubsystemInfo> allSubsystemList, IEnumerable`1& result);
    [AsyncStateMachineAttribute("JetBrains.Common.SubsystemsManagement.ShellComponents.SubsystemUiEditorController/<EditSubsystem>d__8")]
public sealed virtual Task`1<bool> EditSubsystem(ISubsystemUsageInfo selectedItem, IEnumerable`1<ISubsystemInfo> restrictedSubsystems);
    [AsyncStateMachineAttribute("JetBrains.Common.SubsystemsManagement.ShellComponents.SubsystemUiEditorController/<EditSubsystem>d__9")]
public sealed virtual Task`1<bool> EditSubsystem(ISubsystemInfo selectedItem, IEnumerable`1<ISubsystemInfo> restrictedSubsystems);
    public sealed virtual JetRgbaColor EditColor(JetRgbaColor color);
    public sealed virtual ISubsystemProfilesEditor GetSubsystemProfilesEditorViewModel(ISubsystemStoreManager storage);
    public sealed virtual bool AddRuleToCustomSubsystem(int activeProfileId, string ns, string module, Nullable`1<SubsystemKey> selectedSubsystemKey);
    private bool get_AllowHiddenDisplayType();
    private bool get_EventTypeEditorIsVisible();
    public sealed virtual bool AddRuleToNewSubsystem(int activeProfileId, string ns, string module);
    public sealed virtual bool ShowYesNoMessageBox(string message, string title);
    private SubsystemProfilesEditor GetSubsystemProfilesEditorViewModelCore(ISubsystemStoreManager storage);
    private static void InsertSubsystemUsage(ISubsystemProfile profile, ISubsystemUsageInfo subsystem);
}
[ZoneMarkerAttribute]
public class JetBrains.Common.SubsystemsManagement.ShellComponents.ZoneMarker : object {
}
public static class JetBrains.Common.SubsystemsManagement.ViewModel.Common.SubsystemViewModelHelpers : object {
    public static IMeasuredSubsystemInfo[] BuildMeasuredSubsystemInfo(IEnumerable`1<ISubsystemMeasureResult> results, IItemPayloadBuilder payloadBuilder, ISubsystemProfile profile, bool sortByPayloads);
    private static void OrderByPayloadsDesc(IMeasuredSubsystemInfo[] list);
}
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Interface.IColorPickerEditor {
    public Color SelectedColor { get; public set; }
    public abstract virtual Color get_SelectedColor();
    public abstract virtual void set_SelectedColor(Color value);
}
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Interface.IContextMenuItem {
    public object Id { get; }
    public string DisplayName { get; }
    public bool IsSelected { get; }
    public ICommand ExecuteCommand { get; }
    public abstract virtual object get_Id();
    public abstract virtual string get_DisplayName();
    public abstract virtual bool get_IsSelected();
    public abstract virtual ICommand get_ExecuteCommand();
}
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Interface.IProfileSubsystemBuiltinListViewer {
    public ICollection`1<ISubsystemUsageInfo> BuiltinSubsystemList { get; }
    public abstract virtual ICollection`1<ISubsystemUsageInfo> get_BuiltinSubsystemList();
}
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Interface.IProfileSubsystemListEditor {
    public IList SelectedSubsystems { get; }
    public ICommand MoveDownCommand { get; }
    public ICommand MoveUpCommand { get; }
    public ICommand DuplicateCommand { get; }
    public ICommand MergeCommand { get; }
    public abstract virtual IList get_SelectedSubsystems();
    public abstract virtual ICommand get_MoveDownCommand();
    public abstract virtual ICommand get_MoveUpCommand();
    public abstract virtual ICommand get_DuplicateCommand();
    public abstract virtual ICommand get_MergeCommand();
}
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Interface.IRuleInfoViewModel {
    public string AssemblyTemplate { get; public set; }
    public string NamespaceTemplate { get; public set; }
    public bool FocusFirstControl { get; }
    public abstract virtual string get_AssemblyTemplate();
    public abstract virtual void set_AssemblyTemplate(string value);
    public abstract virtual string get_NamespaceTemplate();
    public abstract virtual void set_NamespaceTemplate(string value);
    public abstract virtual bool get_FocusFirstControl();
}
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Interface.ISubsystemChart {
    [NotNullAttribute]
public IEnumerable`1<object> ChartList { get; }
    public bool ShowPercents { get; }
    public abstract virtual IEnumerable`1<object> get_ChartList();
    public abstract virtual bool get_ShowPercents();
}
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Interface.ISubsystemChartItemInfo {
    public IMeasuredSubsystemInfo MeasuredSubsystemInfo { get; }
    public IEnumerable`1<ISubsystemChartItemInfo> Items { get; }
    public IDataNotifier`1<bool> IsChecked { get; }
    public IDataNotifier`1<object> ToolTip { get; }
    public IDataProvider`1<object> ToolTipForMock { get; }
    public abstract virtual IMeasuredSubsystemInfo get_MeasuredSubsystemInfo();
    public abstract virtual IEnumerable`1<ISubsystemChartItemInfo> get_Items();
    public abstract virtual IDataNotifier`1<bool> get_IsChecked();
    public abstract virtual IDataNotifier`1<object> get_ToolTip();
    public abstract virtual IDataProvider`1<object> get_ToolTipForMock();
}
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Interface.ISubsystemOverview {
    public ISubsystemOverviewTile MainThreadTile { get; }
    public ISubsystemOverviewTile OtherThreadTile { get; }
    public abstract virtual ISubsystemOverviewTile get_MainThreadTile();
    public abstract virtual ISubsystemOverviewTile get_OtherThreadTile();
}
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Interface.ISubsystemOverviewLine {
    public double Percent { get; }
    public BrushDescriptor SubsystemColor { get; }
    public string DisplayName { get; }
    public abstract virtual double get_Percent();
    public abstract virtual BrushDescriptor get_SubsystemColor();
    public abstract virtual string get_DisplayName();
}
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Interface.ISubsystemOverviewTile {
    public IEnumerable`1<ISubsystemOverviewLine> Lines { get; }
    public bool IsEmpty { get; }
    public abstract virtual IEnumerable`1<ISubsystemOverviewLine> get_Lines();
    public abstract virtual bool get_IsEmpty();
}
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Interface.ISubsystemProfilesEditor {
    public bool EnableAnalysis { get; public set; }
    public ICollection`1<ISubsystemProfileInlineViewModel> SubsystemProfiles { get; }
    public ISubsystemProfileInlineViewModel SelectedProfile { get; public set; }
    public IProfileSubsystemListEditor ListEditorViewModel { get; }
    public ICommand AddCommand { get; }
    public ICommand EditCommand { get; }
    public ICommand RemoveCommand { get; }
    public ICommand ResetCommand { get; }
    public ICommand SaveCommand { get; }
    public ICommand CancelCommand { get; }
    public bool AllowHiddenDisplayType { get; }
    public IProfileSubsystemBuiltinListViewer BuiltinListViewerViewModel { get; }
    public abstract virtual bool get_EnableAnalysis();
    public abstract virtual void set_EnableAnalysis(bool value);
    public abstract virtual ICollection`1<ISubsystemProfileInlineViewModel> get_SubsystemProfiles();
    public abstract virtual ISubsystemProfileInlineViewModel get_SelectedProfile();
    public abstract virtual void set_SelectedProfile(ISubsystemProfileInlineViewModel value);
    public abstract virtual IProfileSubsystemListEditor get_ListEditorViewModel();
    public abstract virtual ICommand get_AddCommand();
    public abstract virtual ICommand get_EditCommand();
    public abstract virtual ICommand get_RemoveCommand();
    public abstract virtual ICommand get_ResetCommand();
    public abstract virtual ICommand get_SaveCommand();
    public abstract virtual ICommand get_CancelCommand();
    public abstract virtual bool get_AllowHiddenDisplayType();
    public abstract virtual IProfileSubsystemBuiltinListViewer get_BuiltinListViewerViewModel();
}
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Interface.ISubsystemProfilesEditorFacade {
    public abstract virtual IEnumerable`1<ISubsystemProfile> SubsystemUsageList(ISubsystemInfo subsystem);
    public abstract virtual void ReplaceSubsystemInProfiles(ISubsystemInfo oldSubsystem, ISubsystemInfo newSubsystem);
    public abstract virtual string BuildNewName(string originalName);
    public abstract virtual void InsertSubsystem(int insertPosition, ISubsystemInfo subsystem);
    public abstract virtual void RemoveSubsystem(ISubsystemInfo subsystemInfo);
}
[ObsoleteAttribute]
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Interface.ISubsystemRuleEditor {
    public string AssemblyTemplate { get; public set; }
    public string NamespaceTemplate { get; public set; }
    public ICommand SaveCommand { get; }
    public ICommand CancelCommand { get; }
    public abstract virtual string get_AssemblyTemplate();
    public abstract virtual void set_AssemblyTemplate(string value);
    public abstract virtual string get_NamespaceTemplate();
    public abstract virtual void set_NamespaceTemplate(string value);
    public abstract virtual ICommand get_SaveCommand();
    public abstract virtual ICommand get_CancelCommand();
}
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Interface.ISubsystemsRanging {
    public IWriteableDataNotifier`1<object> SelectedTreeNode { get; }
    public IDataNotifier`1<object> ChartSubsystems { get; }
    public IDataNotifier`1<ISubsystemTreeNode> SubsystemTreeNodeRoot { get; }
    public IDataNotifier`1<bool> SubsystemTreeVisible { get; }
    public ICollectionNotifier`1<IContextMenuItem> ContextMenuItems { get; }
    public ICommandSink CommandSink { get; }
    public IDataProvider`1<object> ChartSubsystemsForMock { get; }
    public abstract virtual IWriteableDataNotifier`1<object> get_SelectedTreeNode();
    public abstract virtual IDataNotifier`1<object> get_ChartSubsystems();
    public abstract virtual IDataNotifier`1<ISubsystemTreeNode> get_SubsystemTreeNodeRoot();
    public abstract virtual IDataNotifier`1<bool> get_SubsystemTreeVisible();
    public abstract virtual ICollectionNotifier`1<IContextMenuItem> get_ContextMenuItems();
    public abstract virtual ICommandSink get_CommandSink();
    public abstract virtual IDataProvider`1<object> get_ChartSubsystemsForMock();
}
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Interface.ISubsystemsRangingDialog {
    [NotNullAttribute]
public object Content { get; }
    [NotNullAttribute]
public ICommand EditSubsystemsCommand { get; }
    [NotNullAttribute]
public ICommand CloseCommand { get; }
    public abstract virtual object get_Content();
    public abstract virtual ICommand get_EditSubsystemsCommand();
    public abstract virtual ICommand get_CloseCommand();
}
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Interface.ISubsystemToolTipViewModel {
    public IMeasuredSubsystemInfo SubsystemInfo { get; }
    public abstract virtual IMeasuredSubsystemInfo get_SubsystemInfo();
}
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Interface.ISubsystemTreeNode {
    public Type ContextMenuGroupId { get; }
    public bool IsExpanded { get; public set; }
    public Lazy`1<List`1<ISubsystemTreeNode>> Children { get; }
    public object Data { get; }
    public bool IsMethodNode { get; }
    public ISubsystemTreeNode ParentForMethodNode { get; }
    public BrushDescriptor SubsystemColor { get; }
    public string FullName { get; }
    public SubsystemKey SubsystemId { get; }
    public string DisplayName { get; }
    public object PayloadPresentation { get; }
    public float Percent { get; }
    public string AssemblyName { get; }
    public Version AssemblyVersion { get; }
    public abstract virtual Type get_ContextMenuGroupId();
    public abstract virtual bool get_IsExpanded();
    public abstract virtual void set_IsExpanded(bool value);
    public abstract virtual Lazy`1<List`1<ISubsystemTreeNode>> get_Children();
    public abstract virtual object get_Data();
    public abstract virtual bool get_IsMethodNode();
    public abstract virtual ISubsystemTreeNode get_ParentForMethodNode();
    public abstract virtual BrushDescriptor get_SubsystemColor();
    public abstract virtual string get_FullName();
    public abstract virtual SubsystemKey get_SubsystemId();
    public abstract virtual string get_DisplayName();
    public abstract virtual object get_PayloadPresentation();
    public abstract virtual float get_Percent();
    public abstract virtual string get_AssemblyName();
    public abstract virtual Version get_AssemblyVersion();
}
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Interface.ISubsystemUiController`1 {
    public IProperty`1<ISubsystemOverview> SubsystemOverview { get; }
    public abstract virtual void ShowSubsystemClassification(TCallTreeNode dataModelAgregatedNode);
    public abstract virtual object GetSubsystemMeasureViewModel(TCallTreeNode treeNode);
    public abstract virtual bool IsValidNodeForSubsystem(TCallTreeNode treeNode);
    public abstract virtual IProperty`1<ISubsystemOverview> get_SubsystemOverview();
    public abstract virtual UIElement GetOverviewControl();
}
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Interface.ISubsystemUiEditorController {
    public abstract virtual void EditProfiles();
    public abstract virtual bool SelectSubsystemList(IEnumerable`1<ISubsystemInfo> allSubsystemList, IEnumerable`1& result);
    public abstract virtual Task`1<bool> EditSubsystem(ISubsystemUsageInfo selectedItem, IEnumerable`1<ISubsystemInfo> restrictedSubsystems);
    public abstract virtual Task`1<bool> EditSubsystem(ISubsystemInfo selectedItem, IEnumerable`1<ISubsystemInfo> restrictedSubsystems);
    public abstract virtual JetRgbaColor EditColor(JetRgbaColor color);
    public abstract virtual ISubsystemProfilesEditor GetSubsystemProfilesEditorViewModel(ISubsystemStoreManager storage);
    public abstract virtual bool AddRuleToCustomSubsystem(int activeProfileId, string ns, string module, Nullable`1<SubsystemKey> selectedSubsystemKey);
    public abstract virtual bool AddRuleToNewSubsystem(int activeProfileId, string ns, string module);
    public abstract virtual bool ShowYesNoMessageBox(string message, string title);
}
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Interface.ITimelineChartItemInfo {
    public IMeasuredSubsystemInfo MeasuredSubsystemInfo { get; }
    public IDataNotifier`1<bool> IsChecked { get; }
    public IDataNotifier`1<bool> IsFaded { get; }
    public IDataNotifier`1<object> ToolTip { get; }
    public bool IsMerged { get; }
    public abstract virtual IMeasuredSubsystemInfo get_MeasuredSubsystemInfo();
    public abstract virtual IDataNotifier`1<bool> get_IsChecked();
    public abstract virtual IDataNotifier`1<bool> get_IsFaded();
    public abstract virtual IDataNotifier`1<object> get_ToolTip();
    public abstract virtual bool get_IsMerged();
}
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Interface.IUsedProfilesInfo {
    public IEnumerable`1<ISubsystemProfile> UsedProfiles { get; }
    public abstract virtual IEnumerable`1<ISubsystemProfile> get_UsedProfiles();
}
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Interface.IUsedSubsystemInfo {
    public ISubsystemInfo SubsystemInfo { get; }
    public IEnumerable`1<ISubsystemProfile> UsedInProfiles { get; }
    public abstract virtual ISubsystemInfo get_SubsystemInfo();
    public abstract virtual IEnumerable`1<ISubsystemProfile> get_UsedInProfiles();
}
[ExtensionAttribute]
public static class JetBrains.Common.SubsystemsManagement.ViewModel.Interface.RuleInfoViewModelHelpers : object {
    [ExtensionAttribute]
public static bool IsEmpty(IRuleInfoViewModel ruleViewModel);
}
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Interface.SubsystemEditor.RuleList.IInlineRuleEditor {
    public ICommand AddNewRuleCommand { get; }
    public ICommand ClearSelectedRuleCommand { get; }
    public IEnumerable`1<RuleInfoViewModel> Rules { get; }
    public RuleInfoViewModel SelectedRule { get; public set; }
    public ICommandSink CommandSink { get; }
    public SubsystemEventType EventType { get; public set; }
    public abstract virtual ICommand get_AddNewRuleCommand();
    public abstract virtual ICommand get_ClearSelectedRuleCommand();
    public abstract virtual IEnumerable`1<RuleInfoViewModel> get_Rules();
    public abstract virtual RuleInfoViewModel get_SelectedRule();
    public abstract virtual void set_SelectedRule(RuleInfoViewModel value);
    public abstract virtual ICommandSink get_CommandSink();
    public abstract virtual SubsystemEventType get_EventType();
    public abstract virtual void set_EventType(SubsystemEventType value);
}
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Interface.SubsystemEditor.RuleList.ISubsystemItemEditor {
    public ICommand EditColorCommand { get; }
    [CanBeNullAttribute]
public string DisplayName { get; public set; }
    public Color SubsystemColor { get; public set; }
    public IInlineRuleEditor InlineRuleEditor { get; }
    public ICommand SaveCommand { get; }
    public ICommand CancelCommand { get; }
    public ICommand PickRandomColorCommand { get; }
    public IObservable`1<Unit> CloseRequested { get; }
    public bool EventTypeEditorIsVisible { get; }
    public bool AllowHiddenDisplayType { get; }
    public abstract virtual ICommand get_EditColorCommand();
    public abstract virtual string get_DisplayName();
    public abstract virtual void set_DisplayName(string value);
    public abstract virtual Color get_SubsystemColor();
    public abstract virtual void set_SubsystemColor(Color value);
    public abstract virtual IInlineRuleEditor get_InlineRuleEditor();
    public abstract virtual ICommand get_SaveCommand();
    public abstract virtual ICommand get_CancelCommand();
    public abstract virtual ICommand get_PickRandomColorCommand();
    public abstract virtual IObservable`1<Unit> get_CloseRequested();
    public abstract virtual bool get_EventTypeEditorIsVisible();
    public abstract virtual bool get_AllowHiddenDisplayType();
}
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Interface.SubsystemEditor.RuleList.ISubsystemSimpleRuleCreator {
    public IEnumerable`1<ISubsystemUsageInfo> SubsystemList { get; }
    public ISubsystemUsageInfo SelectedSubsystem { get; public set; }
    public IInlineRuleEditor InlineRuleEditor { get; }
    public ICommand SaveCommand { get; }
    public ICommand CancelCommand { get; }
    public abstract virtual IEnumerable`1<ISubsystemUsageInfo> get_SubsystemList();
    public abstract virtual ISubsystemUsageInfo get_SelectedSubsystem();
    public abstract virtual void set_SelectedSubsystem(ISubsystemUsageInfo value);
    public abstract virtual IInlineRuleEditor get_InlineRuleEditor();
    public abstract virtual ICommand get_SaveCommand();
    public abstract virtual ICommand get_CancelCommand();
}
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Interface.SubsystemEditor.RuleList.ISubsystemUsageItemEditor {
    public bool Enabled { get; public set; }
    public PayloadDisplayType DisplayType { get; public set; }
    public bool IsDisplayTypeVisible { get; public set; }
    public bool IsDisplayTypeDissolved { get; public set; }
    public bool IsDisplayTypeHidden { get; public set; }
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
    public abstract virtual PayloadDisplayType get_DisplayType();
    public abstract virtual void set_DisplayType(PayloadDisplayType value);
    public abstract virtual bool get_IsDisplayTypeVisible();
    public abstract virtual void set_IsDisplayTypeVisible(bool value);
    public abstract virtual bool get_IsDisplayTypeDissolved();
    public abstract virtual void set_IsDisplayTypeDissolved(bool value);
    public abstract virtual bool get_IsDisplayTypeHidden();
    public abstract virtual void set_IsDisplayTypeHidden(bool value);
}
[ObsoleteAttribute]
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Interface.SubsystemEditor.SubsystemList.ISubsystemGlobalListEditor {
    public IList SelectedSubsystem { get; }
    public ICommand DuplicateCommand { get; }
    public ICommand MergeCommand { get; }
    public abstract virtual IList get_SelectedSubsystem();
    public abstract virtual ICommand get_DuplicateCommand();
    public abstract virtual ICommand get_MergeCommand();
}
[ObsoleteAttribute]
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Interface.SubsystemEditor.SubsystemList.ISubsystemInternalListEditor {
    public ICommand AddNewCommand { get; }
    public ICommand MoveDownCommand { get; }
    public ICommand MoveUpCommand { get; }
    public abstract virtual ICommand get_AddNewCommand();
    public abstract virtual ICommand get_MoveDownCommand();
    public abstract virtual ICommand get_MoveUpCommand();
}
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Interface.SubsystemEditor.SubsystemList.ISubsystemListEditor {
    public IEnumerable OrderedSubsystemList { get; }
    public ICommand AddCommand { get; }
    public ICommand EditCommand { get; }
    public ICommand RemoveCommand { get; }
    public abstract virtual IEnumerable get_OrderedSubsystemList();
    public abstract virtual ICommand get_AddCommand();
    public abstract virtual ICommand get_EditCommand();
    public abstract virtual ICommand get_RemoveCommand();
}
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Interface.SubsystemEditor.SubsystemList.ISubsystemListSelector {
    public ICollectionView List { get; }
    public IList SelectedSubsystem { get; }
    public ICommand SaveCommand { get; }
    public ICommand CancelCommand { get; }
    public abstract virtual ICollectionView get_List();
    public abstract virtual IList get_SelectedSubsystem();
    public abstract virtual ICommand get_SaveCommand();
    public abstract virtual ICommand get_CancelCommand();
}
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Interface.SubsystemEditor.SubsystemList.ISubsystemProfileInlineViewModel {
    public ISubsystemProfile Profile { get; }
    public bool EditMode { get; public set; }
    public bool FocusProfileNameField { get; public set; }
    public abstract virtual ISubsystemProfile get_Profile();
    public abstract virtual bool get_EditMode();
    public abstract virtual void set_EditMode(bool value);
    public abstract virtual bool get_FocusProfileNameField();
    public abstract virtual void set_FocusProfileNameField(bool value);
}
public static class JetBrains.Common.SubsystemsManagement.ViewModel.Interface.SubsystemRoutedCommands : object {
    private static ICommand ourClickChartSubsystem;
    private static ICommand ourDoubleClickOnChart;
    private static ICommand ourSubsystemRuleSelected;
    public static ICommand ClickChartSubsystem { get; public set; }
    public static ICommand DoubleClickOnChart { get; public set; }
    public static ICommand SubsystemRuleSelected { get; public set; }
    public static ICommand get_ClickChartSubsystem();
    public static void set_ClickChartSubsystem(ICommand value);
    public static ICommand get_DoubleClickOnChart();
    public static void set_DoubleClickOnChart(ICommand value);
    public static ICommand get_SubsystemRuleSelected();
    public static void set_SubsystemRuleSelected(ICommand value);
}
public class JetBrains.Common.SubsystemsManagement.ViewModel.Overview.SubsystemOverview : object {
    private ISubsystemOverviewTile myMainThreadTile;
    private ISubsystemOverviewTile myOtherThreadTile;
    public ISubsystemOverviewTile MainThreadTile { get; }
    public ISubsystemOverviewTile OtherThreadTile { get; }
    public SubsystemOverview(ISubsystemResults mainThreadResults, ISubsystemResults otherThreadsResults);
    public sealed virtual ISubsystemOverviewTile get_MainThreadTile();
    public sealed virtual ISubsystemOverviewTile get_OtherThreadTile();
}
internal class JetBrains.Common.SubsystemsManagement.ViewModel.Overview.SubsystemOverviewLine : object {
    private double myPercent;
    private BrushDescriptor mySubsystemColor;
    private string myDisplayName;
    public double Percent { get; }
    public BrushDescriptor SubsystemColor { get; }
    public string DisplayName { get; }
    public SubsystemOverviewLine(string displayName, BrushDescriptor subsystemColor, double percent);
    public sealed virtual double get_Percent();
    public sealed virtual BrushDescriptor get_SubsystemColor();
    public sealed virtual string get_DisplayName();
}
internal class JetBrains.Common.SubsystemsManagement.ViewModel.Overview.SubsystemOverviewTile : object {
    private IList`1<ISubsystemOverviewLine> myLines;
    public IEnumerable`1<ISubsystemOverviewLine> Lines { get; }
    public bool IsEmpty { get; }
    public SubsystemOverviewTile(IMeasuredSubsystemInfo[] subsystems);
    public sealed virtual IEnumerable`1<ISubsystemOverviewLine> get_Lines();
    public sealed virtual bool get_IsEmpty();
}
public class JetBrains.Common.SubsystemsManagement.ViewModel.Overview.SubsystemViewOptions : ValueType {
    [CompilerGeneratedAttribute]
private bool <ShowSmartSubsystemTree>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowPercents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MultiSelectionAllowed>k__BackingField;
    public static SubsystemViewOptions TimelineBar;
    public static SubsystemViewOptions PerformanceBar;
    public bool ShowSmartSubsystemTree { get; private set; }
    public bool ShowPercents { get; private set; }
    public bool MultiSelectionAllowed { get; private set; }
    private static SubsystemViewOptions();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_ShowSmartSubsystemTree();
    [CompilerGeneratedAttribute]
private void set_ShowSmartSubsystemTree(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_ShowPercents();
    [CompilerGeneratedAttribute]
private void set_ShowPercents(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_MultiSelectionAllowed();
    [CompilerGeneratedAttribute]
private void set_MultiSelectionAllowed(bool value);
}
public class JetBrains.Common.SubsystemsManagement.ViewModel.Ranging.ChartViewModel : object {
    private static SubsystemChartItemInfoViewModel[] EmptyViewModel;
    [CompilerGeneratedAttribute]
private IEnumerable`1<object> <ChartList>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowPercents>k__BackingField;
    public IEnumerable`1<object> ChartList { get; }
    public bool ShowPercents { get; }
    public ChartViewModel(IEnumerable`1<IMeasuredSubsystemInfo> subsystems, IItemPayloadBuilder payloadBuilder, SubsystemViewOptions subsystemViewOptions, IObservableSet`1<SubsystemKey> includedSubsystems);
    private static ChartViewModel();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<object> get_ChartList();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowPercents();
    private static IEnumerable`1<object> BuildSubsystemsForChart(IEnumerable`1<IMeasuredSubsystemInfo> results, IItemPayloadBuilder payloadBuilder, IObservableSet`1<SubsystemKey> activeSubsystems);
}
public class JetBrains.Common.SubsystemsManagement.ViewModel.Ranging.ContextMenuItem`1 : object {
    private T myId;
    private string myDisplayName;
    private ICommand`1<T> myExecuteCommand;
    private bool myIsSelected;
    public object Id { get; }
    public string DisplayName { get; }
    public bool IsSelected { get; }
    public ICommand ExecuteCommand { get; }
    public ContextMenuItem`1(T id, string displayName, ICommand`1<T> executeCommand, bool isSelected);
    public sealed virtual object get_Id();
    public sealed virtual string get_DisplayName();
    public sealed virtual bool get_IsSelected();
    public sealed virtual ICommand get_ExecuteCommand();
}
public class JetBrains.Common.SubsystemsManagement.ViewModel.Ranging.DefaultChartViewModelBuilder : object {
    public static IChartViewModelBuilder Instance;
    private static DefaultChartViewModelBuilder();
    public sealed virtual object Build(Lifetime lifetime, IMeasuredSubsystemInfo[] subsystems, IItemPayloadBuilder payloadBuilder, SubsystemViewOptions subsystemViewOptions, IObservableSet`1<SubsystemKey> includedSubsystems, IDataController`1<bool> isMouseOver);
}
public class JetBrains.Common.SubsystemsManagement.ViewModel.Ranging.EmptySubsystemsRanging : object {
    public static EmptySubsystemsRanging Instance;
    private static EmptySubsystemsRanging();
}
public interface JetBrains.Common.SubsystemsManagement.ViewModel.Ranging.IChartViewModelBuilder {
    [CanBeNullAttribute]
public abstract virtual object Build(Lifetime lifetime, IMeasuredSubsystemInfo[] subsystems, IItemPayloadBuilder payloadBuilder, SubsystemViewOptions subsystemViewOptions, IObservableSet`1<SubsystemKey> includedSubsystems, IDataController`1<bool> isMouseOver);
}
public class JetBrains.Common.SubsystemsManagement.ViewModel.Ranging.MergedMeasuredSubsystemInfo : AAutomation {
    private SubsystemKey mySubsystemId;
    private string myDisplayName;
    private IMeasuredSubsystemInfo[] myChildren;
    private long myPayload;
    private float myPercent;
    private BrushDescriptor mySubsystemColor;
    private object myPayloadPresentation;
    [CompilerGeneratedAttribute]
private double <MinWidth>k__BackingField;
    public string DisplayName { get; }
    public long Payload { get; }
    public object PayloadPresentation { get; }
    public float Percent { get; }
    public SubsystemKey SubsystemId { get; }
    public string SmartNamespace { get; }
    public ISubsystemInfo MainSubsystem { get; }
    public string GroupName { get; }
    public BrushDescriptor SubsystemColor { get; }
    public Lazy`1<IEnumerable`1<IMeasuredMethodInfo>> TopMethods { get; }
    public bool HasChilden { get; }
    public Lazy`1<IMeasuredSubsystemInfo[]> Children { get; }
    public double MinWidth { get; private set; }
    public MergedMeasuredSubsystemInfo(string displayName, IEnumerable`1<IMeasuredSubsystemInfo> mergedSubsystems, IItemPayloadBuilder payloadBuilder);
    private static BrushDescriptor BuildStripedBrush(JetRgbaColor firstColor, JetRgbaColor secondColor);
    public sealed virtual string get_DisplayName();
    public sealed virtual long get_Payload();
    public sealed virtual object get_PayloadPresentation();
    public sealed virtual float get_Percent();
    public sealed virtual SubsystemKey get_SubsystemId();
    public sealed virtual string get_SmartNamespace();
    public sealed virtual ISubsystemInfo get_MainSubsystem();
    public sealed virtual string get_GroupName();
    public sealed virtual BrushDescriptor get_SubsystemColor();
    public sealed virtual Lazy`1<IEnumerable`1<IMeasuredMethodInfo>> get_TopMethods();
    public sealed virtual bool get_HasChilden();
    public sealed virtual Lazy`1<IMeasuredSubsystemInfo[]> get_Children();
    [CompilerGeneratedAttribute]
public sealed virtual double get_MinWidth();
    [CompilerGeneratedAttribute]
private void set_MinWidth(double value);
    [CompilerGeneratedAttribute]
private IMeasuredSubsystemInfo[] <get_Children>b__32_0();
}
public class JetBrains.Common.SubsystemsManagement.ViewModel.Ranging.SimpleContextMenuItem : object {
    private string myDisplayName;
    private bool myIsSelected;
    private ICommand myExecuteCommand;
    public object Id { get; }
    public string DisplayName { get; }
    public bool IsSelected { get; }
    public ICommand ExecuteCommand { get; }
    public SimpleContextMenuItem(string displayName, ICommand executeCommand, bool isSelected);
    public SimpleContextMenuItem(string displayName, Action`1<object> execute, Predicate`1<object> canExecute, bool isSelected);
    public sealed virtual object get_Id();
    public sealed virtual string get_DisplayName();
    public sealed virtual bool get_IsSelected();
    public sealed virtual ICommand get_ExecuteCommand();
}
public class JetBrains.Common.SubsystemsManagement.ViewModel.Ranging.SubsystemChartItemInfoViewModel : object {
    private IMeasuredSubsystemInfo myMeasuredSubsystemInfo;
    private IEnumerable`1<ISubsystemChartItemInfo> myNestedElements;
    [CompilerGeneratedAttribute]
private IDataNotifier`1<bool> <IsChecked>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataNotifier`1<object> <ToolTip>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<object> <ToolTipForMock>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public IMeasuredSubsystemInfo MeasuredSubsystemInfo { get; }
    public IEnumerable`1<ISubsystemChartItemInfo> Items { get; }
    public IDataNotifier`1<bool> IsChecked { get; }
    public IDataNotifier`1<object> ToolTip { get; }
    public IDataProvider`1<object> ToolTipForMock { get; }
    public string DisplayName { get; }
    public long Payload { get; }
    public object PayloadPresentation { get; }
    public float Percent { get; }
    public double MinWidth { get; }
    public SubsystemChartItemInfoViewModel(IMeasuredSubsystemInfo measuredSubsystemInfo, bool showNestedSubsystems, IObservableSet`1<SubsystemKey> activeKeys);
    public sealed virtual IMeasuredSubsystemInfo get_MeasuredSubsystemInfo();
    public sealed virtual IEnumerable`1<ISubsystemChartItemInfo> get_Items();
    [CompilerGeneratedAttribute]
public sealed virtual IDataNotifier`1<bool> get_IsChecked();
    [CompilerGeneratedAttribute]
public sealed virtual IDataNotifier`1<object> get_ToolTip();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<object> get_ToolTipForMock();
    public sealed virtual string get_DisplayName();
    public sealed virtual long get_Payload();
    public sealed virtual object get_PayloadPresentation();
    public sealed virtual float get_Percent();
    public sealed virtual double get_MinWidth();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public class JetBrains.Common.SubsystemsManagement.ViewModel.Ranging.SubsystemsRanging : object {
    private CommandSink myCommandSink;
    private Action`1<object> myOpenOptionsAction;
    private ISubsystemStoreManager mySubsystemStoreManager;
    private IDataSink`1<object> myResultsTagSink;
    [CompilerGeneratedAttribute]
private IDataProvider`1<object> <ChartSubsystemsForMock>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataNotifier`1<bool> <SubsystemTreeVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollectionNotifier`1<IContextMenuItem> <ContextMenuItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataNotifier`1<object> <ChartSubsystems>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataNotifier`1<ISubsystemTreeNode> <SubsystemTreeNodeRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private IWriteableDataNotifier`1<object> <SelectedTreeNode>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public IDataProvider`1<object> ChartSubsystemsForMock { get; }
    public IDataNotifier`1<bool> SubsystemTreeVisible { get; }
    public ICollectionNotifier`1<IContextMenuItem> ContextMenuItems { get; }
    public IDataNotifier`1<object> ChartSubsystems { get; }
    public IDataNotifier`1<ISubsystemTreeNode> SubsystemTreeNodeRoot { get; }
    public IWriteableDataNotifier`1<object> SelectedTreeNode { get; }
    public ICommandSink CommandSink { get; }
    public SubsystemsRanging(Lifetime lifetime, IDataProvider`1<ISubsystemResults> subsystemsFilterNotApplied, Type contextMenuGroupId, IProperty`1<SubsystemViewOptions> subsystemViewModeProperty, Action`1<object> openOptionsAction, ISubsystemStoreManager subsystemStoreManager, bool expandSelectedSubsystems, IChartViewModelBuilder chartViewModelBuilder, IObservableSet`1<SubsystemKey> includedSubsystems, IObservableSet`1<SubsystemKey> excludedSubsystems);
    private static IDataProvider`1<ISubsystemProfileResult> BarInput(Lifetime lifetime, ISubsystemStoreManager subsystemStoreManager, IObservableSet`1<SubsystemKey> includedSubsystems, IDataProvider`1<ISubsystemResults> input, IDataController`1<bool> isMouseOver, bool expandSelectedSubsystems);
    private static IDataProvider`1<bool> MouseWasOverDuringLastSecond(Lifetime lifetime, IDataController`1<bool> isMouseOver);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<object> get_ChartSubsystemsForMock();
    private static ISubsystemTreeNode FindAndExpand(IMeasuredSubsystemInfo nodeToFind, List`1<ISubsystemTreeNode> children);
    [CompilerGeneratedAttribute]
public sealed virtual IDataNotifier`1<bool> get_SubsystemTreeVisible();
    [CompilerGeneratedAttribute]
public sealed virtual ICollectionNotifier`1<IContextMenuItem> get_ContextMenuItems();
    [IteratorStateMachineAttribute("JetBrains.Common.SubsystemsManagement.ViewModel.Ranging.SubsystemsRanging/<GenerateProfileMenuItems>d__17")]
private IEnumerable`1<IContextMenuItem> GenerateProfileMenuItems(IEnumerable`1<ISubsystemProfile> profiles, int activeProfileId);
    [CompilerGeneratedAttribute]
public sealed virtual IDataNotifier`1<object> get_ChartSubsystems();
    [CompilerGeneratedAttribute]
public sealed virtual IDataNotifier`1<ISubsystemTreeNode> get_SubsystemTreeNodeRoot();
    [CompilerGeneratedAttribute]
public sealed virtual IWriteableDataNotifier`1<object> get_SelectedTreeNode();
    public sealed virtual ICommandSink get_CommandSink();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [IteratorStateMachineAttribute("JetBrains.Common.SubsystemsManagement.ViewModel.Ranging.SubsystemsRanging/<GetDataRules>d__32")]
public sealed virtual IEnumerable`1<IDataRule> GetDataRules();
    [CompilerGeneratedAttribute]
private void <GenerateProfileMenuItems>b__17_0(int profileId);
}
public class JetBrains.Common.SubsystemsManagement.ViewModel.Ranging.SubsystemsRangingDialog : CloseOnlyWindowViewModel {
    [NotNullAttribute]
private object myContent;
    [NotNullAttribute]
private ICommand myEditSubsystemCommand;
    public WindowLocation WindowStartupLocation { get; }
    public WindowStoreType WindowPositionStoreLogic { get; }
    public object Content { get; }
    public ICommand EditSubsystemsCommand { get; }
    public SubsystemsRangingDialog(ISubsystemUiEditorController uiController, object content, string title);
    public virtual WindowLocation get_WindowStartupLocation();
    public virtual WindowStoreType get_WindowPositionStoreLogic();
    public sealed virtual object get_Content();
    public sealed virtual ICommand get_EditSubsystemsCommand();
    private sealed virtual override ICommand JetBrains.Common.SubsystemsManagement.ViewModel.Interface.ISubsystemsRangingDialog.get_CloseCommand();
}
internal class JetBrains.Common.SubsystemsManagement.ViewModel.Ranging.SubsystemTreeNodeViewModel : object {
    private Lazy`1<List`1<ISubsystemTreeNode>> myChildren;
    private IMeasuredMethodInfo myMethodInfo;
    private IMeasuredSubsystemInfo mySubsystemInfo;
    private ISubsystemTreeNode myParentForMethodNode;
    private string myFullName;
    private bool myIsExpanded;
    private Type myContextMenuGroupId;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public Lazy`1<List`1<ISubsystemTreeNode>> Children { get; }
    public object Data { get; }
    public bool IsMethodNode { get; }
    public ISubsystemTreeNode ParentForMethodNode { get; }
    public Type ContextMenuGroupId { get; }
    public bool IsExpanded { get; public set; }
    public BrushDescriptor SubsystemColor { get; }
    public string FullName { get; }
    public string DisplayName { get; }
    public SubsystemKey SubsystemId { get; }
    public object PayloadPresentation { get; }
    public float Percent { get; }
    public string AssemblyName { get; }
    public Version AssemblyVersion { get; }
    public SubsystemTreeNodeViewModel(IAccessor`1<IAdvancedMethodInfoProvider> methodInfoResolverAccessor, IEnumerable`1<IMeasuredSubsystemInfo> children, Type contextMenuGroupId);
    private SubsystemTreeNodeViewModel(IMeasuredSubsystemInfo subsystem, IEnumerable`1<IMeasuredSubsystemInfo> children, IAccessor`1<IAdvancedMethodInfoProvider> methodInfoResolverAccessor, Type contextMenuGroupId);
    private SubsystemTreeNodeViewModel(IMeasuredSubsystemInfo subsystem, IEnumerable`1<IMeasuredMethodInfo> topMethods, IAccessor`1<IAdvancedMethodInfoProvider> methodInfoResolverAccessor, Type contextMenuGroupId);
    private SubsystemTreeNodeViewModel(IMeasuredMethodInfo methodInfo, IAdvancedMethodInfoProvider methodInfoResolver, ISubsystemTreeNode parentForMethodNode, Type contextMenuGroupId);
    private static List`1<ISubsystemTreeNode> CalculateChildren(IEnumerable`1<IMeasuredSubsystemInfo> children, IAccessor`1<IAdvancedMethodInfoProvider> methodInfoResolverAccessor, Type contextMenuGroupId);
    private List`1<ISubsystemTreeNode> CalculateTopMethods(IEnumerable`1<IMeasuredMethodInfo> topMethods, IAccessor`1<IAdvancedMethodInfoProvider> methodInfoResolverAccessor, Type contextMenuGroupId);
    public sealed virtual Lazy`1<List`1<ISubsystemTreeNode>> get_Children();
    public sealed virtual object get_Data();
    public sealed virtual bool get_IsMethodNode();
    public sealed virtual ISubsystemTreeNode get_ParentForMethodNode();
    public sealed virtual Type get_ContextMenuGroupId();
    public sealed virtual bool get_IsExpanded();
    public sealed virtual void set_IsExpanded(bool value);
    public sealed virtual BrushDescriptor get_SubsystemColor();
    public sealed virtual string get_FullName();
    public sealed virtual string get_DisplayName();
    public sealed virtual SubsystemKey get_SubsystemId();
    public sealed virtual object get_PayloadPresentation();
    public sealed virtual float get_Percent();
    public sealed virtual string get_AssemblyName();
    public sealed virtual Version get_AssemblyVersion();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [IteratorStateMachineAttribute("JetBrains.Common.SubsystemsManagement.ViewModel.Ranging.SubsystemTreeNodeViewModel/<GetDataRules>d__45")]
public sealed virtual IEnumerable`1<IDataRule> GetDataRules();
}
public static class JetBrains.Common.SubsystemsManagement.ViewModel.Ranging.SubsystemViewModelHelper : object {
    private static double PercentThreshold;
    [IteratorStateMachineAttribute("JetBrains.Common.SubsystemsManagement.ViewModel.Ranging.SubsystemViewModelHelper/<TransformToViewModels>d__1")]
public static IEnumerable`1<IMeasuredSubsystemInfo> TransformToViewModels(IEnumerable`1<IMeasuredSubsystemInfo> subsystemsEnumerable, IItemPayloadBuilder payloadBuilder, bool sortByPayloads);
}
public class JetBrains.Common.SubsystemsManagement.ViewModel.Ranging.TimelineChartItemInfoViewModel : object {
    private IMeasuredSubsystemInfo myMeasuredSubsystemInfo;
    private string myDisplayName;
    [CompilerGeneratedAttribute]
private IDataNotifier`1<bool> <IsChecked>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataNotifier`1<bool> <IsFaded>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataNotifier`1<object> <ToolTip>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMerged>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public IMeasuredSubsystemInfo MeasuredSubsystemInfo { get; }
    public IDataNotifier`1<bool> IsChecked { get; }
    public IDataNotifier`1<bool> IsFaded { get; }
    public IDataNotifier`1<object> ToolTip { get; }
    public bool IsMerged { get; }
    public string DisplayName { get; }
    public long Payload { get; }
    public object PayloadPresentation { get; }
    public float Percent { get; }
    public double MinWidth { get; }
    public TimelineChartItemInfoViewModel(IMeasuredSubsystemInfo measuredSubsystemInfo, IObservableSet`1<SubsystemKey> activeKeys);
    public sealed virtual IMeasuredSubsystemInfo get_MeasuredSubsystemInfo();
    [CompilerGeneratedAttribute]
public sealed virtual IDataNotifier`1<bool> get_IsChecked();
    [CompilerGeneratedAttribute]
public sealed virtual IDataNotifier`1<bool> get_IsFaded();
    [CompilerGeneratedAttribute]
public sealed virtual IDataNotifier`1<object> get_ToolTip();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsMerged();
    public sealed virtual string get_DisplayName();
    public sealed virtual long get_Payload();
    public sealed virtual object get_PayloadPresentation();
    public sealed virtual float get_Percent();
    public sealed virtual double get_MinWidth();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public class JetBrains.Common.SubsystemsManagement.ViewModel.SubsystemEditor.AnyComplexRule : RuleBase {
    private ComplexRuleType myRuleType;
    private int myOtherRulesCount;
    private string myFirstRule;
    private string myOtherRule;
    public ComplexRuleType RuleType { get; }
    public string FirstRule { get; }
    public string OtherRule { get; }
    public int OtherRulesCount { get; }
    public AnyComplexRule(SimpleRuleType ruleType, int rulesCount, string firstRule, string otherRule);
    public ComplexRuleType get_RuleType();
    public string get_FirstRule();
    public string get_OtherRule();
    public int get_OtherRulesCount();
}
public class JetBrains.Common.SubsystemsManagement.ViewModel.SubsystemEditor.AnySimpleRule : RuleBase {
    private SimpleRuleType myRuleType;
    private string myAssemblyTemplate;
    private string myNamespaceTemplate;
    public SimpleRuleType RuleType { get; }
    public string AssemblyTemplate { get; }
    public string NamespaceTemplate { get; }
    public AnySimpleRule(SimpleRuleType ruleType, string assemblyTemplate, string namespaceTemplate);
    public SimpleRuleType get_RuleType();
    public string get_AssemblyTemplate();
    public string get_NamespaceTemplate();
}
public class JetBrains.Common.SubsystemsManagement.ViewModel.SubsystemEditor.ColorPickerEditor : object {
    [CompilerGeneratedAttribute]
private Color <SelectedColor>k__BackingField;
    public Color SelectedColor { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Color get_SelectedColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SelectedColor(Color value);
}
public enum JetBrains.Common.SubsystemsManagement.ViewModel.SubsystemEditor.ComplexRuleType : Enum {
    public int value__;
    public static ComplexRuleType HasTwoNamespaceRules;
    public static ComplexRuleType HasTwoAssemblyRules;
    public static ComplexRuleType HasSomeNamespaceRules;
    public static ComplexRuleType HasSomeAssemblyRules;
    public static ComplexRuleType Complex;
}
public class JetBrains.Common.SubsystemsManagement.ViewModel.SubsystemEditor.OneRuleViewModel : object {
    private string myAssemblyTemplate;
    private string myNamespaceTemplate;
    private SubsystemEventType myEventType;
    public bool IsEmptyRule { get; }
    public bool HasNamespace { get; }
    public string NamespaceTemplate { get; }
    public bool HasAssembly { get; }
    public string AssemblyTemplate { get; }
    public bool HasEventType { get; }
    public string EventType { get; }
    public OneRuleViewModel(string assemblyTemplate, string namespaceTemplate, SubsystemEventType eventType);
    public sealed virtual bool get_IsEmptyRule();
    public sealed virtual bool get_HasNamespace();
    public sealed virtual string get_NamespaceTemplate();
    public sealed virtual bool get_HasAssembly();
    public sealed virtual string get_AssemblyTemplate();
    public sealed virtual bool get_HasEventType();
    public sealed virtual string get_EventType();
}
public abstract class JetBrains.Common.SubsystemsManagement.ViewModel.SubsystemEditor.RuleBase : object {
}
public abstract class JetBrains.Common.SubsystemsManagement.ViewModel.SubsystemEditor.RuleList.DefaultSubsystemEditWindow`1 : EditWindowViewModel`1<T> {
    public WindowLocation WindowStartupLocation { get; }
    public WindowStoreType WindowPositionStoreLogic { get; }
    protected DefaultSubsystemEditWindow`1(T originalItem);
    public virtual WindowLocation get_WindowStartupLocation();
    public virtual WindowStoreType get_WindowPositionStoreLogic();
}
public class JetBrains.Common.SubsystemsManagement.ViewModel.SubsystemEditor.RuleList.InlineRuleEditor : object {
    private ObservableCollection`1<RuleInfoViewModel> myTempRules;
    private DelegateCommand myAddNewRuleCommand;
    private DelegateCommand myClearSelectedRuleCommand;
    private CommandSink myCommandSink;
    private IRuleInfo myEventSubsystemsRule;
    private RuleInfoViewModel mySelectedRule;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public ICommand AddNewRuleCommand { get; }
    public ICommand ClearSelectedRuleCommand { get; }
    public IEnumerable`1<RuleInfoViewModel> Rules { get; }
    public RuleInfoViewModel SelectedRule { get; public set; }
    public SubsystemEventType EventType { get; public set; }
    public ICommandSink CommandSink { get; }
    public InlineRuleEditor(IEnumerable`1<IRuleInfo> rules);
    public sealed virtual ICommand get_AddNewRuleCommand();
    public sealed virtual ICommand get_ClearSelectedRuleCommand();
    public sealed virtual IEnumerable`1<RuleInfoViewModel> get_Rules();
    public sealed virtual RuleInfoViewModel get_SelectedRule();
    public sealed virtual void set_SelectedRule(RuleInfoViewModel value);
    public sealed virtual SubsystemEventType get_EventType();
    public sealed virtual void set_EventType(SubsystemEventType value);
    public sealed virtual ICommandSink get_CommandSink();
    public IRuleInfo[] GetRuleInfos();
    [IteratorStateMachineAttribute("JetBrains.Common.SubsystemsManagement.ViewModel.SubsystemEditor.RuleList.InlineRuleEditor/<GetSubsystemRuleIfNotEmpty>d__22")]
private IEnumerable`1<IRuleInfo> GetSubsystemRuleIfNotEmpty();
    public void Reset(IEnumerable`1<IRuleInfo> original, IRuleInfo focus);
    private void GotFocus(object obj);
    private void FixRuleInfos();
    private void AddEmptyLineIfNeed();
    private bool HasRuleSelected();
    private void OnAddRule();
    private void FocusLastRule();
    private void OnClearRule();
    private void RaiseCanExecuteChanged();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void OnPropertyChanged(string propertyName);
    protected bool SetField(T& field, T value, string propertyName);
}
public class JetBrains.Common.SubsystemsManagement.ViewModel.SubsystemEditor.RuleList.SubsystemInfoEditorHelper : object {
    private ISubsystemUiEditorController myUiController;
    private IEnumerable`1<ISubsystemInfo> myRestrictedSubsystems;
    private string myOriginalSubsystemName;
    private Action myChanged;
    private string myTempDisplayName;
    private Color myTempSubsystemColor;
    [CompilerGeneratedAttribute]
private InlineRuleEditor <InlineRuleEditor>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <EditColorCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <PickRandomColorCommand>k__BackingField;
    private static Random ourRandom;
    public InlineRuleEditor InlineRuleEditor { get; }
    public string DisplayName { get; public set; }
    public Color SubsystemColor { get; public set; }
    public ICommand EditColorCommand { get; }
    public ICommand PickRandomColorCommand { get; }
    public SubsystemInfoEditorHelper(ISubsystemUiEditorController uiController, ISubsystemInfo originalItem, IEnumerable`1<ISubsystemInfo> restrictedSubsystems, Action changed);
    private static SubsystemInfoEditorHelper();
    [CompilerGeneratedAttribute]
public InlineRuleEditor get_InlineRuleEditor();
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public Color get_SubsystemColor();
    public void set_SubsystemColor(Color value);
    [CompilerGeneratedAttribute]
public ICommand get_EditColorCommand();
    [CompilerGeneratedAttribute]
public ICommand get_PickRandomColorCommand();
    public bool Save(ISubsystemInfo original);
    public bool CanSave();
    public string GetDisplayNameError();
    private void Init(ISubsystemInfo original);
    private void OnChangeColor();
    private void OnPickRandomColor();
    private static Color PickRandomColor();
    private void RaiseCanExecuteChanged();
    [CompilerGeneratedAttribute]
private bool <GetDisplayNameError>b__24_0(ISubsystemInfo subsystem);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Common.SubsystemsManagement.ViewModel.SubsystemEditor.RuleList.SubsystemItemEditor : DefaultSubsystemEditWindow`1<ISubsystemInfo> {
    private SubsystemInfoEditorHelper myContainer;
    [CompilerGeneratedAttribute]
private bool <HaveChangesBeenStored>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EventTypeEditorIsVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowHiddenDisplayType>k__BackingField;
    public bool HaveChangesBeenStored { get; private set; }
    public string DisplayName { get; public set; }
    public Color SubsystemColor { get; public set; }
    public IInlineRuleEditor InlineRuleEditor { get; }
    public bool EventTypeEditorIsVisible { get; }
    public bool AllowHiddenDisplayType { get; }
    public ICommand EditColorCommand { get; }
    public ICommand PickRandomColorCommand { get; }
    public string Item { get; }
    public string Error { get; }
    public SubsystemItemEditor(ISubsystemUiEditorController uiController, ISubsystemInfo originalItem, IEnumerable`1<ISubsystemInfo> restrictedSubsystems, bool allowHiddenDisplayType, bool eventTypeEditorIsVisible);
    [CompilerGeneratedAttribute]
public bool get_HaveChangesBeenStored();
    [CompilerGeneratedAttribute]
private void set_HaveChangesBeenStored(bool value);
    protected virtual void CopyToSource(ISubsystemInfo original);
    protected virtual bool CanSave();
    protected virtual void RaiseCanExecuteChanged();
    public sealed virtual string get_DisplayName();
    public sealed virtual void set_DisplayName(string value);
    public sealed virtual Color get_SubsystemColor();
    public sealed virtual void set_SubsystemColor(Color value);
    public sealed virtual IInlineRuleEditor get_InlineRuleEditor();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EventTypeEditorIsVisible();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowHiddenDisplayType();
    public sealed virtual ICommand get_EditColorCommand();
    public sealed virtual ICommand get_PickRandomColorCommand();
    public sealed virtual string get_Item(string columnName);
    public sealed virtual string get_Error();
    private sealed virtual override IObservable`1<Unit> JetBrains.Common.SubsystemsManagement.ViewModel.Interface.SubsystemEditor.RuleList.ISubsystemItemEditor.get_CloseRequested();
}
public class JetBrains.Common.SubsystemsManagement.ViewModel.SubsystemEditor.RuleList.SubsystemSimpleRuleCreator : DefaultSubsystemEditWindow`1<ISubsystemProfile> {
    private InlineRuleEditor myInlineRuleEditor;
    private RuleInfo myRule;
    private ISubsystemUsageInfo[] mySubsystemList;
    private IProperty`1<Nullable`1<SubsystemKey>> myLastSelectedSubsystem;
    private ISubsystemUsageInfo mySelectedSubsystem;
    [CompilerGeneratedAttribute]
private bool <HaveChangesBeenStored>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public bool HaveChangesBeenStored { get; private set; }
    public IEnumerable`1<ISubsystemUsageInfo> SubsystemList { get; }
    public ISubsystemUsageInfo SelectedSubsystem { get; public set; }
    public IInlineRuleEditor InlineRuleEditor { get; }
    public SubsystemSimpleRuleCreator(ISubsystemProfile selectedProfile, string ns, string assembly, IProperty`1<Nullable`1<SubsystemKey>> lastSelectedSubsystem);
    public SubsystemSimpleRuleCreator(ISubsystemProfile selectedProfile, string ns, string assembly, Nullable`1<SubsystemKey> lastSelectedSubsystem);
    [CompilerGeneratedAttribute]
public bool get_HaveChangesBeenStored();
    [CompilerGeneratedAttribute]
private void set_HaveChangesBeenStored(bool value);
    [IteratorStateMachineAttribute("JetBrains.Common.SubsystemsManagement.ViewModel.SubsystemEditor.RuleList.SubsystemSimpleRuleCreator/<BuildRuleList>d__11")]
private IEnumerable`1<IRuleInfo> BuildRuleList();
    protected virtual bool CanSave();
    protected virtual void CopyToSource(ISubsystemProfile original);
    public sealed virtual IEnumerable`1<ISubsystemUsageInfo> get_SubsystemList();
    public sealed virtual ISubsystemUsageInfo get_SelectedSubsystem();
    public sealed virtual void set_SelectedSubsystem(ISubsystemUsageInfo value);
    public sealed virtual IInlineRuleEditor get_InlineRuleEditor();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__5_0(ISubsystemUsageInfo s);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Common.SubsystemsManagement.ViewModel.SubsystemEditor.RuleList.SubsystemUsageItemEditor : DefaultSubsystemEditWindow`1<ISubsystemUsageInfo> {
    private SubsystemInfoEditorHelper myContainer;
    private bool myEnabled;
    private PayloadDisplayType myDisplayType;
    [CompilerGeneratedAttribute]
private bool <HaveChangesBeenStored>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EventTypeEditorIsVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowHiddenDisplayType>k__BackingField;
    public bool HaveChangesBeenStored { get; private set; }
    public string DisplayName { get; public set; }
    public Color SubsystemColor { get; public set; }
    public bool Enabled { get; public set; }
    public PayloadDisplayType DisplayType { get; public set; }
    public bool IsDisplayTypeVisible { get; public set; }
    public bool IsDisplayTypeDissolved { get; public set; }
    public bool IsDisplayTypeHidden { get; public set; }
    public IInlineRuleEditor InlineRuleEditor { get; }
    public bool EventTypeEditorIsVisible { get; }
    public bool AllowHiddenDisplayType { get; }
    public ICommand EditColorCommand { get; }
    public ICommand PickRandomColorCommand { get; }
    public string Item { get; }
    public string Error { get; }
    public SubsystemUsageItemEditor(ISubsystemUiEditorController uiController, ISubsystemUsageInfo originalItem, IEnumerable`1<ISubsystemInfo> restrictedSubsystems, bool allowHiddenDisplayType, bool eventTypeEditorIsVisible);
    [CompilerGeneratedAttribute]
public bool get_HaveChangesBeenStored();
    [CompilerGeneratedAttribute]
private void set_HaveChangesBeenStored(bool value);
    public void AddRuleAndSetFocus(string ns, string module);
    protected virtual void CopyToSource(ISubsystemUsageInfo original);
    protected virtual bool CanSave();
    protected virtual void RaiseCanExecuteChanged();
    public sealed virtual string get_DisplayName();
    public sealed virtual void set_DisplayName(string value);
    public sealed virtual Color get_SubsystemColor();
    public sealed virtual void set_SubsystemColor(Color value);
    public sealed virtual bool get_Enabled();
    public sealed virtual void set_Enabled(bool value);
    public sealed virtual PayloadDisplayType get_DisplayType();
    public sealed virtual void set_DisplayType(PayloadDisplayType value);
    public sealed virtual bool get_IsDisplayTypeVisible();
    public sealed virtual void set_IsDisplayTypeVisible(bool value);
    public sealed virtual bool get_IsDisplayTypeDissolved();
    public sealed virtual void set_IsDisplayTypeDissolved(bool value);
    public sealed virtual bool get_IsDisplayTypeHidden();
    public sealed virtual void set_IsDisplayTypeHidden(bool value);
    public sealed virtual IInlineRuleEditor get_InlineRuleEditor();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EventTypeEditorIsVisible();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowHiddenDisplayType();
    public sealed virtual ICommand get_EditColorCommand();
    public sealed virtual ICommand get_PickRandomColorCommand();
    public sealed virtual string get_Item(string columnName);
    public sealed virtual string get_Error();
    private sealed virtual override IObservable`1<Unit> JetBrains.Common.SubsystemsManagement.ViewModel.Interface.SubsystemEditor.RuleList.ISubsystemItemEditor.get_CloseRequested();
}
public static class JetBrains.Common.SubsystemsManagement.ViewModel.SubsystemEditor.RuleViewModelFactory : object {
    private static SimpleRuleType GetRuleType(string assemblyTemplate, string namespaceTemplate);
    private static void AddRule(string nextRule, String& firstRule, StringBuilder& otherRules, Int32& count);
    public static RuleBase BuildSimpleRule(string assemblyTemplate, string namespaceTemplate);
    public static RuleBase BuildEmptyRule();
    public static RuleBase BuildComplexRule(IRuleInfo[] rulesArr);
}
[FlagsAttribute]
public enum JetBrains.Common.SubsystemsManagement.ViewModel.SubsystemEditor.SimpleRuleType : Enum {
    public int value__;
    public static SimpleRuleType Empty;
    public static SimpleRuleType HasAssemblyTemplate;
    public static SimpleRuleType HasNamespaceTemplate;
    public static SimpleRuleType HasAssemblyAndNamespaceTemplate;
}
public class JetBrains.Common.SubsystemsManagement.ViewModel.SubsystemEditor.SubsystemLists.ProfileSubsystemBuiltinListViewer : object {
    private ObservableCollection`1<ISubsystemUsageInfo> myList;
    private ReadOnlyCollection`1<ISubsystemUsageInfo> myFilteredList;
    public ICollection`1<ISubsystemUsageInfo> BuiltinSubsystemList { get; }
    public void SetSubsystemList(ISubsystemUsageInfo[] profileBuiltinSubsystems);
    public IEnumerable`1<ISubsystemUsageInfo> GetSubsystemUsageInfos();
    public sealed virtual ICollection`1<ISubsystemUsageInfo> get_BuiltinSubsystemList();
}
public class JetBrains.Common.SubsystemsManagement.ViewModel.SubsystemEditor.SubsystemLists.ProfileSubsystemListEditor : object {
    private ISubsystemUiEditorController mySubsystemUiController;
    private ISubsystemProfilesEditorFacade myProfilesEditorFacade;
    private ObservableCollection`1<ISubsystemUsageInfo> myList;
    private ReadOnlyObservableCollection`1<ISubsystemUsageInfo> myCollectionView;
    private ObservableCollection`1<ISubsystemUsageInfo> mySelectedSubsystems;
    private DelegateCommand myAddCommand;
    private DelegateCommand myEditCommand;
    private DelegateCommand myRemoveCommand;
    private DelegateCommand myMoveDownCommand;
    private DelegateCommand myMoveUpCommand;
    private DelegateCommand myDuplicateCommand;
    private DelegateCommand myMergeCommand;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public IList SelectedSubsystems { get; }
    private ISubsystemUsageInfo SelectedSubsystem { get; }
    public int SelectedSubsystemIndex { get; }
    public IEnumerable OrderedSubsystemList { get; }
    public IEnumerable SubsystemList { get; }
    public ICommand AddCommand { get; }
    public ICommand EditCommand { get; }
    public ICommand RemoveCommand { get; }
    public ICommand MoveDownCommand { get; }
    public ICommand MoveUpCommand { get; }
    public ICommand DuplicateCommand { get; }
    public ICommand MergeCommand { get; }
    public ProfileSubsystemListEditor(ISubsystemUiEditorController subsystemUiController, ISubsystemProfilesEditorFacade profilesEditorFacade, ISubsystemInfoFilter subsystemInfoFilter);
    private void OnCollectionChanged();
    private void RaiseCanExecuteChanged();
    private bool AnyItemIsSelected();
    private bool SelectedIsNotFirst();
    [AsyncStateMachineAttribute("JetBrains.Common.SubsystemsManagement.ViewModel.SubsystemEditor.SubsystemLists.ProfileSubsystemListEditor/<CreateNew>d__17")]
private void CreateNew();
    private int GetCurrentPosition();
    private void EditCurrent();
    private void RemoveCurrent();
    [AsyncStateMachineAttribute("JetBrains.Common.SubsystemsManagement.ViewModel.SubsystemEditor.SubsystemLists.ProfileSubsystemListEditor/<DoDuplicate>d__21")]
private void DoDuplicate();
    [AsyncStateMachineAttribute("JetBrains.Common.SubsystemsManagement.ViewModel.SubsystemEditor.SubsystemLists.ProfileSubsystemListEditor/<DoMerge>d__22")]
private void DoMerge();
    private static void AddNewRuleToList(List`1<IRuleInfo> rules, IRuleInfo newRule);
    private static bool IsDuplicate(IEnumerable`1<IRuleInfo> rules, IRuleInfo newRule);
    private bool MultipleItemSelected();
    private bool SingleItemSelected();
    private bool SelectedIsNotLast();
    private void MoveCurrentUp();
    private void MoveCurrentDown();
    private void MoveCurrent(int step);
    public void SetSubsystemList(IEnumerable`1<ISubsystemUsageInfo> list);
    public IEnumerable`1<ISubsystemUsageInfo> GetSubsystemUsageInfos();
    public sealed virtual IList get_SelectedSubsystems();
    private ISubsystemUsageInfo get_SelectedSubsystem();
    public int get_SelectedSubsystemIndex();
    public sealed virtual IEnumerable get_OrderedSubsystemList();
    public IEnumerable get_SubsystemList();
    public sealed virtual ICommand get_AddCommand();
    public sealed virtual ICommand get_EditCommand();
    public sealed virtual ICommand get_RemoveCommand();
    public sealed virtual ICommand get_MoveDownCommand();
    public sealed virtual ICommand get_MoveUpCommand();
    public sealed virtual ICommand get_DuplicateCommand();
    public sealed virtual ICommand get_MergeCommand();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void OnPropertyChanged(string propertyName);
    protected bool SetField(T& field, T value, string propertyName);
}
public class JetBrains.Common.SubsystemsManagement.ViewModel.SubsystemEditor.SubsystemLists.RuleInfoViewModel : object {
    private Action myOnRuleChanged;
    private bool myFocusFirstControl;
    private string myAssemblyTemplate;
    private string myNamespaceTemplate;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public string AssemblyTemplate { get; public set; }
    public string NamespaceTemplate { get; public set; }
    public bool FocusFirstControl { get; public set; }
    public RuleInfoViewModel(Action onRuleChanged);
    public RuleInfoViewModel(Action onRuleChanged, IRuleInfo ruleInfo);
    public IRuleInfo BuildRuleInfo();
    public sealed virtual string get_AssemblyTemplate();
    public sealed virtual void set_AssemblyTemplate(string value);
    public sealed virtual string get_NamespaceTemplate();
    public sealed virtual void set_NamespaceTemplate(string value);
    public sealed virtual bool get_FocusFirstControl();
    public void set_FocusFirstControl(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public class JetBrains.Common.SubsystemsManagement.ViewModel.SubsystemEditor.SubsystemLists.SubsystemListSelector : EditWindowViewModel`1<ICollection`1<ISubsystemInfo>> {
    private ICollectionView myList;
    private IList mySelectedSubsystem;
    [CompilerGeneratedAttribute]
private bool <HaveChangesBeenStored>k__BackingField;
    public WindowLocation WindowStartupLocation { get; }
    public WindowStoreType WindowPositionStoreLogic { get; }
    public ICollectionView List { get; }
    public IList SelectedSubsystem { get; }
    public bool HaveChangesBeenStored { get; private set; }
    public SubsystemListSelector(ICollection`1<ISubsystemInfo> list);
    protected virtual bool CanSave();
    public virtual WindowLocation get_WindowStartupLocation();
    public virtual WindowStoreType get_WindowPositionStoreLogic();
    protected virtual void CopyToSource(ICollection`1<ISubsystemInfo> original);
    public sealed virtual ICollectionView get_List();
    public sealed virtual IList get_SelectedSubsystem();
    [CompilerGeneratedAttribute]
public bool get_HaveChangesBeenStored();
    [CompilerGeneratedAttribute]
private void set_HaveChangesBeenStored(bool value);
}
public class JetBrains.Common.SubsystemsManagement.ViewModel.SubsystemEditor.SubsystemLists.SubsystemProfileInlineViewModel : object {
    private ISubsystemProfile myProfile;
    private bool myEditMode;
    private bool myFocusProfileNameField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public ISubsystemProfile Profile { get; }
    public bool EditMode { get; public set; }
    public bool FocusProfileNameField { get; public set; }
    public SubsystemProfileInlineViewModel(ISubsystemProfile profile);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual ISubsystemProfile get_Profile();
    public sealed virtual bool get_EditMode();
    public sealed virtual void set_EditMode(bool value);
    public sealed virtual bool get_FocusProfileNameField();
    public sealed virtual void set_FocusProfileNameField(bool value);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Common.SubsystemsManagement.ViewModel.SubsystemEditor.SubsystemProfilesEditor : EditWindowViewModel`1<ISubsystemStoreManager> {
    private DelegateCommand myAddCommand;
    private DelegateCommand myEditCommand;
    private ProfileSubsystemListEditor myListEditorViewModel;
    private ProfileSubsystemBuiltinListViewer myBuiltinListViewModel;
    private DelegateCommand myRemoveCommand;
    private DelegateCommand myResetCommand;
    private ObservableCollection`1<ISubsystemProfileInlineViewModel> myTempSubsystemProfiles;
    private IList`1<ISubsystemInfo> myTempSubsystems;
    private ISubsystemProfileInlineViewModel myCurrentProfile;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myDisableCollectionTracking;
    private bool myEnableAnalysis;
    private int myMaxProfileId;
    private ISubsystemProfileInlineViewModel mySelectedProfile;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private bool <AllowHiddenDisplayType>k__BackingField;
    public ISubsystemProfileInlineViewModel SelectedProfile { get; public set; }
    public WindowLocation WindowStartupLocation { get; }
    public WindowStoreType WindowPositionStoreLogic { get; }
    public IProfileSubsystemListEditor ListEditorViewModel { get; }
    public IProfileSubsystemBuiltinListViewer BuiltinListViewerViewModel { get; }
    public bool EnableAnalysis { get; public set; }
    public ICollection`1<ISubsystemProfileInlineViewModel> SubsystemProfiles { get; }
    public ICommand AddCommand { get; }
    public ICommand EditCommand { get; }
    public ICommand RemoveCommand { get; }
    public ICommand ResetCommand { get; }
    public bool AllowHiddenDisplayType { get; }
    public string Item { get; }
    public string Error { get; }
    public SubsystemProfilesEditor(Lifetime lifetime, ISubsystemUiEditorController subsystemUiController, ISubsystemStoreManager storeManager, bool allowHiddenDisplayType, ISubsystemInfoFilter subsystemInfoFilter);
    private void ResetSettings();
    public sealed virtual ISubsystemProfileInlineViewModel get_SelectedProfile();
    public sealed virtual void set_SelectedProfile(ISubsystemProfileInlineViewModel value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private void EditProfile();
    private void OnProfilesCollectionViewChanged();
    private void AddProfile();
    private string GenerateNewProfileName();
    private static void SetFocusProfileNameField(ISubsystemProfileInlineViewModel currentProfile);
    private void RemoveProfile();
    private bool AnyItemSelected();
    private bool CanRemove();
    private void StoreCurrentProfileChanges();
    private void CopyFromSource(bool enableAnalysisValue, IEnumerable`1<ISubsystemInfo> subsystemsList, IEnumerable`1<ISubsystemProfile> profiles, ISubsystemProfile currentProfile);
    protected virtual void CopyToSource(ISubsystemStoreManager original);
    protected virtual bool CanSave();
    protected virtual void RaiseCanExecuteChanged();
    public virtual WindowLocation get_WindowStartupLocation();
    public virtual WindowStoreType get_WindowPositionStoreLogic();
    public sealed virtual IProfileSubsystemListEditor get_ListEditorViewModel();
    public sealed virtual IProfileSubsystemBuiltinListViewer get_BuiltinListViewerViewModel();
    public sealed virtual bool get_EnableAnalysis();
    public sealed virtual void set_EnableAnalysis(bool value);
    public sealed virtual ICollection`1<ISubsystemProfileInlineViewModel> get_SubsystemProfiles();
    public sealed virtual ICommand get_AddCommand();
    public sealed virtual ICommand get_EditCommand();
    public sealed virtual ICommand get_RemoveCommand();
    public sealed virtual ICommand get_ResetCommand();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowHiddenDisplayType();
    public sealed virtual string get_Item(string columnName);
    public sealed virtual string get_Error();
    public sealed virtual IEnumerable`1<ISubsystemProfile> SubsystemUsageList(ISubsystemInfo subsystem);
    public sealed virtual string BuildNewName(string originalName);
    public sealed virtual void ReplaceSubsystemInProfiles(ISubsystemInfo oldSubsystem, ISubsystemInfo newSubsystem);
    public sealed virtual void RemoveSubsystem(ISubsystemInfo subsystem);
    public sealed virtual void InsertSubsystem(int insertPosition, ISubsystemInfo subsystem);
    private void ChangeSubsystemList(Action`1<IList`1<ISubsystemUsageInfo>> action);
}
[ObsoleteAttribute]
public class JetBrains.Common.SubsystemsManagement.ViewModel.SubsystemEditor.SubsystemRuleEditor : EditWindowViewModel`1<IRuleInfo> {
    private string myAssemblyTemplate;
    private string myNamespaceTemplate;
    [CompilerGeneratedAttribute]
private bool <HaveChangesBeenStored>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public WindowLocation WindowStartupLocation { get; }
    public WindowStoreType WindowPositionStoreLogic { get; }
    public bool HaveChangesBeenStored { get; private set; }
    public string AssemblyTemplate { get; public set; }
    public string NamespaceTemplate { get; public set; }
    public SubsystemRuleEditor(IRuleInfo original);
    private void CopyFromSource(IRuleInfo original);
    protected virtual void CopyToSource(IRuleInfo original);
    protected virtual bool CanSave();
    public virtual WindowLocation get_WindowStartupLocation();
    public virtual WindowStoreType get_WindowPositionStoreLogic();
    [CompilerGeneratedAttribute]
public bool get_HaveChangesBeenStored();
    [CompilerGeneratedAttribute]
private void set_HaveChangesBeenStored(bool value);
    public sealed virtual string get_AssemblyTemplate();
    public sealed virtual void set_AssemblyTemplate(string value);
    public sealed virtual string get_NamespaceTemplate();
    public sealed virtual void set_NamespaceTemplate(string value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public static class JetBrains.Common.SubsystemsManagement.ViewModel.SubsystemEditor.SubsystemUpdateHelpers : object {
    public static void ReplaceSubsystem(IList`1<ISubsystemInfo> list, ISubsystemInfo oldSubsystem, ISubsystemInfo newSubsystem);
    public static void ReplaceSubsystem(IList`1<ISubsystemUsageInfo> list, ISubsystemInfo oldSubsystem, ISubsystemInfo newSubsystem);
    public static void RemoveSubsystem(IList`1<ISubsystemInfo> list, ISubsystemInfo oldSubsystem);
    public static void RemoveSubsystem(IList`1<ISubsystemUsageInfo> list, ISubsystemInfo oldSubsystem);
    public static void InsertSubsystem(IList`1<ISubsystemInfo> list, int position, ISubsystemInfo subsystem);
    public static void InsertSubsystem(IList`1<ISubsystemUsageInfo> list, int position, ISubsystemInfo subsystem);
    private static void ReplaceSubsystemCore(IList`1<T> list, ISubsystemHelpers`1<T> helpers, ISubsystemInfo oldSubsystem, ISubsystemInfo newSubsystem);
    private static void RemoveSubsystemCore(IList`1<T> list, ISubsystemHelpers`1<T> helpers, ISubsystemInfo oldSubsystem);
    private static void InsertSubsystemCore(IList`1<T> list, ISubsystemHelpers`1<T> helpers, int index, ISubsystemInfo subsystemInfo);
}
public class JetBrains.Common.SubsystemsManagement.ViewModel.SubsystemEditor.UsedProfilesInfo : object {
    private IEnumerable`1<ISubsystemProfile> myProfiles;
    public IEnumerable`1<ISubsystemProfile> UsedProfiles { get; }
    public UsedProfilesInfo(IEnumerable`1<ISubsystemProfile> profiles);
    public sealed virtual IEnumerable`1<ISubsystemProfile> get_UsedProfiles();
}
public class JetBrains.Common.SubsystemsManagement.ViewModel.SubsystemEditor.UsedSubsystemInfo : object {
    private ISubsystemInfo mySubsystemInfo;
    private IEnumerable`1<ISubsystemProfile> myUsedInProfiles;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public ISubsystemInfo SubsystemInfo { get; }
    public IEnumerable`1<ISubsystemProfile> UsedInProfiles { get; }
    public UsedSubsystemInfo(ISubsystemInfo subsystemInfo, IEnumerable`1<ISubsystemProfile> usedInProfiles);
    public sealed virtual ISubsystemInfo get_SubsystemInfo();
    public sealed virtual IEnumerable`1<ISubsystemProfile> get_UsedInProfiles();
    public void UsageCanBeChanged();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public class JetBrains.Common.SubsystemsManagement.ViewModel.ToolTip.SubsystemToolTipViewModel : object {
    private IMeasuredSubsystemInfo mySubsystemInfo;
    public IMeasuredSubsystemInfo SubsystemInfo { get; }
    public SubsystemToolTipViewModel(IMeasuredSubsystemInfo subsystemInfo);
    public sealed virtual IMeasuredSubsystemInfo get_SubsystemInfo();
}
public class JetBrains.Common.SubsystemsManagement.ViewModel.ToolTip.ToolTipViewModel : object {
    private object myRealViewModel;
    public object Data { get; }
    public ToolTipViewModel(object realViewModel);
    public object get_Data();
}
[ZoneMarkerAttribute]
public class JetBrains.Common.SubsystemsManagement.ViewModel.ZoneMarker : object {
}
[ExtensionAttribute]
public static class JetBrains.Timeline.ViewModel.Subsystems.SubsystemKeyToSubsystemInfo : object {
    public static Dictionary`2<SubsystemKey, ISubsystemInfo> FromProfile(ISubsystemProfile profile);
    [ExtensionAttribute]
public static ISet`1<SubsystemKey> AllKeys(ISubsystemProfile profile);
}
public static class JetBrains.Timeline.ViewModel.Subsystems.SubsystemKeyToUsageInfo : object {
    internal static Dictionary`2<SubsystemKey, T> ProfileToDictionary(ISubsystemProfile profile, Func`2<ISubsystemUsageInfo, T> valueSelector);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
