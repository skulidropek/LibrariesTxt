public class JetBrains.Common.Timeline.EventLog.Interface.CallStackPtr : ValueType {
    private static IdEqualityComparer ComparerInstance;
    private UInt32 myId;
    public static UInt32 InvalidTo;
    public static CallStackPtr Invalid;
    public static CallStackPtr SingleFrame;
    public static CallStackPtr Truncated;
    public static CallStackPtr InvalidRoot;
    public static CallStackPtr FullKernel;
    public static CallStackPtr NoSample;
    public static CallStackPtr NoCswitch;
    public static CallStackPtr Expected;
    public static CallStackPtr NoCallStack;
    public static UInt32 InvalidFrom;
    private static UInt32 InvalidMask;
    public static IEqualityComparer`1<CallStackPtr> EqualityComparer { get; }
    public static IComparer`1<CallStackPtr> Comparer { get; }
    public static IEnumerable`1<CallStackPtr> InvalidValues { get; }
    private CallStackPtr(UInt32 id);
    private static CallStackPtr();
    public static IEqualityComparer`1<CallStackPtr> get_EqualityComparer();
    public static IComparer`1<CallStackPtr> get_Comparer();
    public static UInt32 op_Explicit(CallStackPtr value);
    public static int op_Explicit(CallStackPtr value);
    [PureAttribute]
public UInt32 Raw();
    public static CallStackPtr op_Explicit(UInt32 value);
    private static CallStackPtr Create(UInt32 value);
    public static CallStackPtr FromUlong(ulong value);
    [PureAttribute]
public bool IsValid();
    public sealed virtual bool Equals(CallStackPtr other);
    public sealed virtual int CompareTo(CallStackPtr other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(CallStackPtr left, CallStackPtr right);
    public static bool op_Inequality(CallStackPtr left, CallStackPtr right);
    public static bool op_LessThan(CallStackPtr left, CallStackPtr right);
    public static bool op_GreaterThan(CallStackPtr left, CallStackPtr right);
    [IteratorStateMachineAttribute("JetBrains.Common.Timeline.EventLog.Interface.CallStackPtr/<get_InvalidValues>d__36")]
public static IEnumerable`1<CallStackPtr> get_InvalidValues();
    [LocalizableAttribute("False")]
public virtual string ToString();
}
public enum JetBrains.Common.Timeline.EventLog.Interface.CallStackPtrWithDepth : Enum {
    public ulong value__;
    public static CallStackPtrWithDepth Invalid;
}
public class JetBrains.Common.Timeline.EventLog.Interface.ChunkInfo : ValueType {
    public ModelRange Range;
    public ChunkReference Reference;
    public UInt64[] Values;
    public ChunkPosition Position { get; }
    public byte Level { get; }
    public ChunkInfoShort ShortInfo { get; }
    public ChunkInfo(ModelRange range, ChunkReference reference, UInt64[] values);
    public ChunkPosition get_Position();
    public byte get_Level();
    public ChunkInfoShort get_ShortInfo();
}
public class JetBrains.Common.Timeline.EventLog.Interface.ChunkInfoShort : ValueType {
    public ModelRange Range;
    public ChunkReference Reference;
    public ChunkPosition Position { get; }
    public byte Level { get; }
    public ChunkInfoShort(ModelRange range, ChunkReference reference);
    public ChunkPosition get_Position();
    public byte get_Level();
    public virtual string ToString();
}
public class JetBrains.Common.Timeline.EventLog.Interface.ChunkItemId : ValueType {
    private ulong myValue;
    private static int ChunkOffsetBitsNumber;
    private static ulong ChunkOffsetMask;
    public short IndexInChunk { get; }
    public ChunkReference ParentChunkOffset { get; }
    public ChunkItemId(ChunkReference reference, int index);
    public static bool op_Equality(ChunkItemId left, ChunkItemId right);
    public static bool op_Inequality(ChunkItemId left, ChunkItemId right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public short get_IndexInChunk();
    public ChunkReference get_ParentChunkOffset();
    public sealed virtual bool Equals(ChunkItemId other);
}
public class JetBrains.Common.Timeline.EventLog.Interface.ChunkPosition : ValueType {
    public byte Level;
    public ulong Offset;
    public ulong ZeroLevelStart { get; }
    public ulong ZeroLevelEnd { get; }
    public ChunkPosition(ulong offset, byte level);
    public ChunkPosition IncreaseLevel();
    public ChunkPosition ToLevel(byte level);
    public ulong get_ZeroLevelStart();
    public ulong get_ZeroLevelEnd();
}
[ExtensionAttribute]
public static class JetBrains.Common.Timeline.EventLog.Interface.ChunkPositionExtensions : object {
    [ExtensionAttribute]
public static ChunkPosition GetCommonParent(ChunkPosition p1, ChunkPosition p2);
    [ExtensionAttribute]
public static ChunkPosition GetMinimalChunk(ModelRange range);
}
public enum JetBrains.Common.Timeline.EventLog.Interface.ChunkReference : Enum {
    public ulong value__;
    public static ChunkReference Invalid;
}
public static class JetBrains.Common.Timeline.EventLog.Interface.EventDetailsEncoder : object {
    public static ulong True;
    public static ulong False;
    public static ulong ZeroDouble { get; }
    private static EventDetailsEncoder();
    public static bool ToBool(ulong value);
    public static double ToDouble(ulong value);
    public static ulong FromBool(bool value);
    public static ulong get_ZeroDouble();
    public static ulong FromDouble(double value);
}
[DebuggerDisplayAttribute("{EventType} {Range}")]
public class JetBrains.Common.Timeline.EventLog.Interface.EventInfo : ValueType {
    public ModelRange Range;
    public int EventType;
    public UInt64[] Values;
    public EventInfoShort ShortInfo { get; }
    public EventInfo(ModelRange range, int eventType, UInt64[] values);
    public bool Equals(EventInfo other);
    public EventInfo DeepClone();
    public static bool op_Equality(EventInfo left, EventInfo right);
    public static bool op_Inequality(EventInfo left, EventInfo right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public EventInfoShort get_ShortInfo();
}
public class JetBrains.Common.Timeline.EventLog.Interface.EventInfoShort : ValueType {
    public ModelRange Range;
    public int EventType;
    public EventInfoShort(ModelRange range, int eventType);
}
public class JetBrains.Common.Timeline.EventLog.Interface.EventNodeData : ValueType {
    public ModelRange Range;
    public KnownEventTypes EventType;
    public string Payload;
    public string MainProperty;
    public string SecondaryProperty;
    public DfsNodePtr CallStack;
    public ThreadId Thread;
    [CanBeNullAttribute]
public string CallInfo;
    public EventNodeData(ModelRange range, KnownEventTypes eventType, string payload, string mainProperty, string secondaryProperty, DfsNodePtr callStack, ThreadId thread, string callInfo);
}
[IsReadOnlyAttribute]
public class JetBrains.Common.Timeline.EventLog.Interface.EventOrChunk : ValueType {
    public ModelRange Range;
    private long myData;
    public UInt64[] Values;
    public bool IsEvent { get; }
    public bool IsChunk { get; }
    public ChunkReference ChunkReference { get; }
    public int EventType { get; }
    private EventOrChunk(ModelRange range, long data, UInt64[] values);
    public bool Equals(EventOrChunk other);
    public static bool op_Equality(EventOrChunk left, EventOrChunk right);
    public static bool op_Inequality(EventOrChunk left, EventOrChunk right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public EventOrChunk DeepClone();
    public bool get_IsEvent();
    public bool get_IsChunk();
    public ChunkReference get_ChunkReference();
    public int get_EventType();
    public EventInfo AsEvent();
    public ChunkInfo AsChunkInfo();
    public static EventOrChunk FromEvent(EventInfo eventInfo);
    public static EventOrChunk FromChunk(ChunkInfo chunkInfo);
}
[ExtensionAttribute]
public static class JetBrains.Common.Timeline.EventLog.Interface.Extensions : object {
    [ExtensionAttribute]
public static bool Contains(IChunkItem item, double x);
    [ExtensionAttribute]
public static ModelRange GetRange(IChunkItem item);
    [ExtensionAttribute]
public static bool IsGlobal(IThreadDescriptor descriptor);
    [ExtensionAttribute]
public static bool IsGlobal(IEventLog log);
    [ExtensionAttribute]
public static long GetLength(IChunkItem node);
}
public class JetBrains.Common.Timeline.EventLog.Interface.FilePathId : ValueType {
    private ulong myId;
    private FilePathId(ulong id);
    public static ulong op_Explicit(FilePathId threadId);
    public static long op_Explicit(FilePathId threadId);
    public static FilePathId op_Explicit(ulong value);
    public static FilePathId op_Explicit(long value);
    private static FilePathId Create(ulong value);
    public virtual string ToString();
    public sealed virtual bool Equals(FilePathId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(FilePathId left, FilePathId right);
    public static bool op_Inequality(FilePathId left, FilePathId right);
}
public interface JetBrains.Common.Timeline.EventLog.Interface.IChunkItem {
    public ulong LeftTick { get; }
    public ulong RightTick { get; }
    public abstract virtual ulong get_LeftTick();
    public abstract virtual ulong get_RightTick();
}
public interface JetBrains.Common.Timeline.EventLog.Interface.IChunkStatistics {
    public ChunkPosition Position { get; }
    public Int64[] Statistics { get; }
    public abstract virtual ChunkPosition get_Position();
    public abstract virtual Int64[] get_Statistics();
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.Common.Timeline.EventLog.Interface.IEventDetails {
    public ulong Item { get; public set; }
    public int Count { get; }
    public bool HasPendingProperties { get; }
    public abstract virtual ulong get_Item(int index);
    public abstract virtual void set_Item(int index, ulong value);
    public abstract virtual int get_Count();
    public abstract virtual bool get_HasPendingProperties();
    public abstract virtual void StartPendingProperty();
    public abstract virtual void StopPendingProperty();
    public abstract virtual UInt64[] GetValues();
    public abstract virtual IEventDetails Clone();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Ready(Action value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Ready(Action value);
}
public interface JetBrains.Common.Timeline.EventLog.Interface.IEventItem {
    public IEventDetails EventDetails { get; }
    public int EventType { get; }
    public abstract virtual IEventDetails get_EventDetails();
    public abstract virtual int get_EventType();
}
public interface JetBrains.Common.Timeline.EventLog.Interface.IEventPropertyDescriptor {
    public PropertyType Type { get; }
    public String[] EnumValues { get; }
    public string Name { get; }
    public int Index { get; }
    public int ID { get; }
    public abstract virtual PropertyType get_Type();
    public abstract virtual String[] get_EnumValues();
    public abstract virtual string get_Name();
    public abstract virtual int get_Index();
    public abstract virtual int get_ID();
}
public interface JetBrains.Common.Timeline.EventLog.Interface.IEventTypeDescriptor {
    public int ID { get; }
    public IEventPropertyDescriptor[] Properties { get; }
    public ushort DetailsSize { get; }
    public abstract virtual int get_ID();
    public abstract virtual IEventPropertyDescriptor[] get_Properties();
    public abstract virtual ushort get_DetailsSize();
}
public interface JetBrains.Common.Timeline.EventLog.Interface.ILogStorage {
    public ulong TicksPerSecond { get; }
    public IEnumerable`1<ILayerDescriptor> Layers { get; }
    public IEnumerable`1<IEventTypeDescriptor> EventTypes { get; }
    public IReadOnlyCollection`1<ThreadId> Threads { get; }
    public ModelRange Range { get; }
    public IEnumerable`1<IEventLog> Logs { get; }
    public abstract virtual ulong get_TicksPerSecond();
    public abstract virtual IEventLog GetLog(ThreadId thread, int layer);
    public abstract virtual IThreadDescriptor GetThread(ThreadId thread);
    public abstract virtual ILayerDescriptor GetLayer(int layer);
    public abstract virtual IEnumerable`1<ILayerDescriptor> get_Layers();
    public abstract virtual IEnumerable`1<IEventTypeDescriptor> get_EventTypes();
    public abstract virtual IEventTypeDescriptor GetEvent(int eventType);
    public abstract virtual IReadOnlyCollection`1<ThreadId> get_Threads();
    public abstract virtual ModelRange get_Range();
    public abstract virtual IEnumerable`1<IEventLog> get_Logs();
    public abstract virtual IEnumerable`1<int> GetLayerIds(int eventId);
}
public interface JetBrains.Common.Timeline.EventLog.Interface.IPeakValueProvider {
}
public interface JetBrains.Common.Timeline.EventLog.Interface.IProcessDescriptor {
    public UniqueProcessId Id { get; }
    public UInt32 ProcessId { get; }
    public ulong CommandLineStringId { get; }
    public ulong ImageFilePathId { get; }
    public abstract virtual UniqueProcessId get_Id();
    public abstract virtual UInt32 get_ProcessId();
    public abstract virtual ulong get_CommandLineStringId();
    public abstract virtual ulong get_ImageFilePathId();
}
public interface JetBrains.Common.Timeline.EventLog.Interface.IStringProvider {
    public abstract virtual string ReadString(ulong key);
}
public interface JetBrains.Common.Timeline.EventLog.Interface.IThreadDescriptor {
    public ThreadId ThreadId { get; }
    public ThreadTypes Type { get; }
    public ulong NameStringId { get; public set; }
    public abstract virtual ThreadId get_ThreadId();
    public abstract virtual ThreadTypes get_Type();
    public abstract virtual ulong get_NameStringId();
    public abstract virtual void set_NameStringId(ulong value);
}
public enum JetBrains.Common.Timeline.EventLog.Interface.KnownEventTypes : Enum {
    public int value__;
    public static KnownEventTypes Unknown;
    public static KnownEventTypes Running;
    public static KnownEventTypes Preemption;
    public static KnownEventTypes PageLoading;
    public static KnownEventTypes Idle;
    public static KnownEventTypes Sleep;
    public static KnownEventTypes DiskIO;
    public static KnownEventTypes FileIO;
    public static KnownEventTypes BlockingGC;
    public static KnownEventTypes Contention;
    public static KnownEventTypes MemoryManagement;
    public static KnownEventTypes ThreadLifetime;
    public static KnownEventTypes Dead;
    public static KnownEventTypes Attaching;
    public static KnownEventTypes UnknownState;
    public static KnownEventTypes ManagedThread;
    public static KnownEventTypes ConversionErrors;
    public static KnownEventTypes IORead;
    public static KnownEventTypes IOWrite;
    public static KnownEventTypes CswitchTick;
    public static KnownEventTypes CpuUsage;
    public static KnownEventTypes Exception;
    public static KnownEventTypes OtherSuspends;
    public static KnownEventTypes Finalizers;
    public static KnownEventTypes HeapStats;
    public static KnownEventTypes MessageCheckDelay;
    public static KnownEventTypes UiFreezeTick;
    public static KnownEventTypes UiFreezeInterval;
    public static KnownEventTypes RuntimeRunning;
    public static KnownEventTypes ThreadActivation;
    public static KnownEventTypes Gen0;
    public static KnownEventTypes Gen1;
    public static KnownEventTypes Gen2;
    public static KnownEventTypes GenLoh;
    public static KnownEventTypes MemoryTick;
    public static KnownEventTypes Lost;
    public static KnownEventTypes AllocationTick;
    public static KnownEventTypes MemoryUsage;
    public static KnownEventTypes MemorySnapshot;
    public static KnownEventTypes TotalMemory;
    public static KnownEventTypes REMOVED_WPFArrange;
    public static KnownEventTypes REMOVED_WPFMeasure;
    public static KnownEventTypes REMOVED_WPFLayout;
    public static KnownEventTypes EtwEventCallStack;
    public static KnownEventTypes CallStackInversion;
    public static KnownEventTypes REMOVED_CoreCallStack;
    public static KnownEventTypes EtwSample;
    public static KnownEventTypes CustomEvent;
    public static KnownEventTypes ProcessSummaryTick;
    public static KnownEventTypes ApiEvent;
    public static KnownEventTypes Snapshot;
    public static KnownEventTypes DelegatesExecution;
    public static KnownEventTypes EventSummaryTick;
    public static KnownEventTypes ExternalBorders;
    public static KnownEventTypes ContinuousRunning;
    public static KnownEventTypes Jitting;
    public static KnownEventTypes ThreadPriority;
    public static KnownEventTypes SqlCommand;
    public static KnownEventTypes HttpRequest;
    public static KnownEventTypes FreeMemory;
    public static KnownEventTypes UnmanagedMemory;
    public static KnownEventTypes TotalNetMemory;
    public static KnownEventTypes KernelCallStackSampleInternal;
    public static KnownEventTypes CallStackIntervals;
    public static KnownEventTypes REMOVED_CrtAllocation;
    public static KnownEventTypes GC;
    public static KnownEventTypes NativeAllocation;
    public static KnownEventTypes DebugOutput;
    public static KnownEventTypes RawTPL;
    public static KnownEventTypes MainBackground;
    public static KnownEventTypes Splitters1;
    public static KnownEventTypes Splitters2;
    public static KnownEventTypes Splitters3;
    public static KnownEventTypes TimeSelection;
    public static KnownEventTypes TimeSelectionHover;
    public static KnownEventTypes ThreadSelectionStroke;
    public static KnownEventTypes ThreadLifetimeBorder;
    public static KnownEventTypes CurrentIntervalSet;
    public static KnownEventTypes HighlightedMarker;
    public static KnownEventTypes Subsystem;
    public static KnownEventTypes AwaitInfo;
    public static KnownEventTypes ReattachInterval;
    public static KnownEventTypes Tasks;
    public static KnownEventTypes LohAllocations;
    public static KnownEventTypes Gen0Allocations;
}
public enum JetBrains.Common.Timeline.EventLog.Interface.KnownLayers : Enum {
    public int value__;
    public static KnownLayers ThreadStates;
    public static KnownLayers IO;
    public static KnownLayers CPU;
    public static KnownLayers KernelStates;
    public static KnownLayers Memory;
    public static KnownLayers WPFLayout;
    public static KnownLayers ProcessSummary;
    public static KnownLayers RuntimeSuspendsWithGC;
    public static KnownLayers UiFreezeChart;
    public static KnownLayers AdditionalKernelStates;
    public static KnownLayers KernelStatesSummary;
    public static KnownLayers ContentionsSummary;
    public static KnownLayers FileIOSummary;
    public static KnownLayers ClrStates;
    public static KnownLayers GCSummary;
    public static KnownLayers RunWait;
    public static KnownLayers FirstApiLayer;
}
public static class JetBrains.Common.Timeline.EventLog.Interface.KnownProperties : object {
    public static int Filename;
    public static int OperationSize;
    public static int IODirection;
    public static int RelatedTimeOffset;
    public static int SpinWaitTime;
    public static int RelatedThreadOrProcess;
    public static int AllocatedSize;
    public static int LohAllocations;
    public static int WaitReason;
    public static int ExceptionType;
    public static int ExceptionMessage;
    public static int RelatedObject;
    public static int ApiMarkerType;
    public static int ErrorType;
    public static int ErrorDetails;
    public static int ThreadState;
    public static int RelatedCallStack;
    public static int GCDepth;
    public static int GCReason;
    public static int GCType;
    public static int ArrowAlignmentRight;
    public static int Artificial;
    public static int ThreadName;
    public static int CallStack;
    public static int AllocationDuration;
    public static int CpuCore;
    public static int AllocationHeap;
    public static int SqlCommandText;
    public static int SqlConnectionString;
    public static int HttpUrl;
    public static int HttpVerb;
    public static int DebugOutputString;
    public static int JitMethodFuid;
    public static int GcMode;
    public static int TPLEventID;
    public static int TPLDetails;
    public static int TaskName;
    public static int AwaitDuration;
    public static int TaskSubmitterId;
    public static int AllocationTypeName;
}
public enum JetBrains.Common.Timeline.EventLog.Interface.KnownStatistics : Enum {
    public int value__;
    public static KnownStatistics Other;
    public static KnownStatistics Counter;
    public static KnownStatistics Length;
    public static KnownStatistics Property;
    public static KnownStatistics CallStack;
    public static KnownStatistics Allocations;
    public static KnownStatistics InterpolationHelper;
}
[ExtensionAttribute]
public static class JetBrains.Common.Timeline.EventLog.Interface.KnownUtils : object {
    [ExtensionAttribute]
public static int GetKnownStatisticIndex(ILayerDescriptor layer, KnownStatistics statistics, int eventType);
    [ExtensionAttribute]
public static TimelineStatistics GetKnownStatistics(ILayerDescriptor layer, KnownStatistics statistics, int eventType);
    [ExtensionAttribute]
public static TimelineStatistics GetKnownStatistics(ILayerDescriptor layer, KnownStatistics statistics);
    [ExtensionAttribute]
public static IEventPropertyDescriptor GetProperty(IEventTypeDescriptor eventTypeDescriptor, int propertyId);
    [ExtensionAttribute]
public static IEventPropertyDescriptor GetProperty(IEventTypeDescriptor eventTypeDescriptor, PropertyType type);
    [ExtensionAttribute]
public static int GetPropertyIndex(ILogStorage logStorage, int eventId, int propertyId);
    [ExtensionAttribute]
public static int GetPropertyIndex(ILogStorage logStorage, int eventId, PropertyType type);
}
public class JetBrains.Common.Timeline.EventLog.Interface.LayerEvent : ValueType {
    public int LayerId;
    public int EventId;
    public LayerEvent(int layerId, int eventId);
    public bool Equals(LayerEvent other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public static class JetBrains.Common.Timeline.EventLog.Interface.LayerIdPresentation : object {
    public static string FullName(int layerId);
}
[ExtensionAttribute]
public static class JetBrains.Common.Timeline.EventLog.Interface.LogStorageEx : object {
    [ExtensionAttribute]
public static bool HasEvents(ILogStorage storage, KnownEventTypes eventId);
    [ExtensionAttribute]
public static bool HasEvents(ILogStorage storage, KnownLayers layerId, KnownEventTypes eventId, bool global);
    [ExtensionAttribute]
public static bool HasLayer(ILogStorage storage, int layerId);
    [ExtensionAttribute]
private static bool HasEvents(ILogStorage storage, int layerId, int eventId, bool global);
    [ExtensionAttribute]
private static bool HasEvents(ILogStorage storage, ILayerDescriptor layer, int eventType, bool global);
    [ExtensionAttribute]
private static bool HasThreadEvents(ILogStorage storage, ILayerDescriptor layer, int eventType, ThreadId thread);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IEventTypeDescriptor TryGetEventTypeDescriptor(ILogStorage logStorage, int layerId, KnownEventTypes eventType);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IEventPropertyDescriptor TryGetEventPropertyDescriptor(ILogStorage logStorage, KnownEventTypes eventType, int propertyId);
    [ExtensionAttribute]
public static bool HasProperty(ILogStorage logStorage, KnownEventTypes eventType, int propertyId);
    [ExtensionAttribute]
public static Func`2<UInt64[], ulong> CreatePropertyAccessor(ILogStorage logStorage, KnownEventTypes eventId, int propertyId);
    [ExtensionAttribute]
public static Func`2<EventInfo, ulong> CreatePropertyAccessor(ILogStorage logStorage, KnownEventTypes eventId, PropertyType propertyType);
    [ExtensionAttribute]
public static Nullable`1<EventInfo> FindEvent(ILogStorage logStorage, int layerId, ThreadId thread, ulong tick);
    [ExtensionAttribute]
public static Func`2<UInt64[], ulong> CreatePropertyAccessor(ILogStorage logStorage, int eventId, int propertyId);
    [ExtensionAttribute]
public static Func`2<UInt64[], StringId> CreateStringPropertyAccessor(ILogStorage logStorage, int eventId, int propertyId);
    [ExtensionAttribute]
public static Func`2<EventInfo, ulong> CreatePropertyAccessor(ILogStorage logStorage, int eventId, PropertyType propertyType);
    [ExtensionAttribute]
public static IEnumerable`1<int> GetAllEventTypesForLayer(ILogStorage storage, KnownLayers layer);
    private static TimelineStatistics GetCounterOrLengthStatistics(ILayerDescriptor desc, int eventId);
    [ExtensionAttribute]
public static bool HasThreadStates(ILogStorage storage);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IEventLog TryGetKernelStates(ILogStorage storage);
}
public class JetBrains.Common.Timeline.EventLog.Interface.LongAccumulator : MulticastDelegate {
    public LongAccumulator(object object, IntPtr method);
    public virtual void Invoke(UInt64* a, ulong b);
    public virtual IAsyncResult BeginInvoke(UInt64* a, ulong b, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum JetBrains.Common.Timeline.EventLog.Interface.PropertyType : Enum {
    public int value__;
    public static PropertyType Ulong;
    public static PropertyType Uint;
    public static PropertyType Byte;
    public static PropertyType Bool;
    public static PropertyType String;
    public static PropertyType Double;
    public static PropertyType Enum;
    public static PropertyType CallStack;
    public static PropertyType ThreadOrProcess;
    public static PropertyType File;
    public static PropertyType Url;
}
public class JetBrains.Common.Timeline.EventLog.Interface.Reader.CroppedEvent : ValueType {
    public ThreadId Thread;
    public ModelRange Range;
    public EventInfo Event;
    public CroppedEvent(ThreadId thread, ModelRange range, EventInfo event);
    public static ThreadRange op_Implicit(CroppedEvent e);
}
public class JetBrains.Common.Timeline.EventLog.Interface.Reader.CroppedEventOrChunk : ValueType {
    public ThreadId Thread;
    public ModelRange Range;
    public EventOrChunk EventOrChunk;
    public CroppedEventOrChunk(ThreadId thread, ModelRange range, EventOrChunk eventOrChunk);
}
[ExtensionAttribute]
public static class JetBrains.Common.Timeline.EventLog.Interface.Reader.EventTreeExplorerEx : object {
    [ExtensionAttribute]
public static IEnumerable`1<EventOrChunk> GetCoveringChunks(IEventTreeExplorer explorer, ModelRange modelRange);
    [ExtensionAttribute]
public static IEnumerable`1<EventOrChunk> GetItems(IEventTreeExplorer explorer, ModelRange range, Predicate`1<ChunkInfo> enterPredicate);
    [ExtensionAttribute]
public static EventInfo GetEvent(IEventTreeExplorer explorer, ulong tick);
    [ExtensionAttribute]
public static IEnumerable`1<CroppedEvent> GetAllEvents(IEventTreeExplorer explorer, ModelRange modelRange);
    [ExtensionAttribute]
public static IEnumerable`1<EventInfo> GetEventsOfType(IEventTreeExplorer explorer, ModelRange modelRange, int eventType, int statisticsCheckIndex);
    [ExtensionAttribute]
public static IEnumerable`1<EventInfo> GetEventsOfType(IEventTreeExplorer explorer, ModelRange modelRange, int eventType);
}
[ExtensionAttribute]
public static class JetBrains.Common.Timeline.EventLog.Interface.Reader.Extensions : object {
    [ExtensionAttribute]
public static IEventLog GetSingleLog(IThreadModel model, KnownLayers layerType);
    [ExtensionAttribute]
public static IEventLog GetSingleLog(IThreadModel model, KnownEventTypes layerType);
    [ExtensionAttribute]
public static IEventLog GetSingleLog(IThreadModel model, int layerType);
    [ExtensionAttribute]
public static IEventTypeDescriptor GetEventType(ILayerDescriptor desc, int eventType);
}
public interface JetBrains.Common.Timeline.EventLog.Interface.Reader.IEventLog {
    [NotNullAttribute]
public ILayerDescriptor LayerDescriptor { get; }
    [NotNullAttribute]
public IEventTreeExplorer TreeExplorer { get; }
    public ChunkInfo RootStatistics { get; }
    [NotNullAttribute]
public IThreadDescriptor ThreadDescriptor { get; }
    public abstract virtual ILayerDescriptor get_LayerDescriptor();
    public abstract virtual IEventTreeExplorer get_TreeExplorer();
    public abstract virtual ChunkInfo get_RootStatistics();
    public abstract virtual IThreadDescriptor get_ThreadDescriptor();
    public abstract virtual double GetPeak(KnownStatistics statisticsId, byte level, bool normalized);
}
public interface JetBrains.Common.Timeline.EventLog.Interface.Reader.IEventSessionReader {
    public abstract virtual ILogStorage Open(Lifetime lifetime, IReadonlyMemoryMappedSection eventTreesSection, LongAccumulator callStackAggregator);
}
public interface JetBrains.Common.Timeline.EventLog.Interface.Reader.IEventTreeExplorer {
    public ModelRange Range { get; }
    public ThreadId ThreadId { get; }
    public abstract virtual IEnumerable`1<EventOrChunk> GetNodes(ulong startTick, Predicate`1<ChunkInfo> enterPredicate);
    public abstract virtual ModelRange get_Range();
    public abstract virtual ThreadId get_ThreadId();
}
public interface JetBrains.Common.Timeline.EventLog.Interface.Reader.ILayerDescriptor {
    public int Id { get; }
    public IEventTypeDescriptor[] EventTypes { get; }
    public TimelineStatistics[] Statistics { get; }
    public string Name { get; }
    public StorageTypeAdapter StorageTypeAdapter { get; }
    public abstract virtual int get_Id();
    public abstract virtual IEventTypeDescriptor[] get_EventTypes();
    public abstract virtual TimelineStatistics[] get_Statistics();
    public abstract virtual int GetPeakStatisticIndex(int statisticsId, bool normalized);
    public abstract virtual string get_Name();
    public abstract virtual StorageTypeAdapter get_StorageTypeAdapter();
}
public interface JetBrains.Common.Timeline.EventLog.Interface.Reader.IStringReader {
}
public interface JetBrains.Common.Timeline.EventLog.Interface.Reader.IThreadModel {
    public IThreadDescriptor Descriptor { get; }
    public abstract virtual IThreadDescriptor get_Descriptor();
    public abstract virtual IEnumerable`1<IEventLog> GetLogs(int layerId);
}
public enum JetBrains.Common.Timeline.EventLog.Interface.Reader.StorageTypeAdapter : Enum {
    public int value__;
    public static StorageTypeAdapter EventTree;
    public static StorageTypeAdapter CallStacks;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Common.Timeline.EventLog.Interface.Reader.StringId : object {
    [CompilerGeneratedAttribute]
private int <KnownProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public int KnownProperty { get; public set; }
    public ulong Offset { get; public set; }
    public StringId(int KnownProperty, ulong Offset);
    [CompilerGeneratedAttribute]
protected StringId(StringId original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public int get_KnownProperty();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_KnownProperty(int value);
    [CompilerGeneratedAttribute]
public ulong get_Offset();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Offset(ulong value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(StringId left, StringId right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(StringId left, StringId right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(StringId other);
    [CompilerGeneratedAttribute]
public virtual StringId <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Int32& KnownProperty, UInt64& Offset);
}
public class JetBrains.Common.Timeline.EventLog.Interface.Reader.ThreadRange : ValueType {
    public ThreadId Thread;
    public ModelRange Range;
    public ThreadRange(ThreadId thread, ModelRange range);
    public sealed virtual bool Equals(ThreadRange other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.Common.Timeline.EventLog.Interface.RelatedActivityInfo : ValueType {
    public ulong Timestamp;
    public ThreadId Thread;
    public CallStackPtr CallStack;
    public RelatedActivityInfo(ulong timestamp, ThreadId thread, CallStackPtr callStack);
}
public class JetBrains.Common.Timeline.EventLog.Interface.Statistics.Accumulator : object {
    private IStatisticsAggregator myAggregator;
    private ulong myValue;
    public ulong Value { get; }
    public Accumulator(IStatisticsAggregator aggregator);
    public void Initialize();
    public void Aggregate(EventOrChunk a);
    public void Aggregate(ChunkInfo chunk);
    public void AggregatePart(EventInfo eventInfo, ulong length);
    public void Aggregate(EventInfo eventInfo);
    public ulong get_Value();
    public bool HasStatistics(ChunkInfo chunk);
}
public class JetBrains.Common.Timeline.EventLog.Interface.Statistics.DoubleChunkStatisticsExtractor : MulticastDelegate {
    public DoubleChunkStatisticsExtractor(object object, IntPtr method);
    public virtual double Invoke(ChunkInfo stat);
    public virtual IAsyncResult BeginInvoke(ChunkInfo stat, AsyncCallback callback, object object);
    public virtual double EndInvoke(IAsyncResult result);
}
public class JetBrains.Common.Timeline.EventLog.Interface.Statistics.DoubleEventStatisticsExtractor : MulticastDelegate {
    public DoubleEventStatisticsExtractor(object object, IntPtr method);
    public virtual double Invoke(EventInfo eventInfo);
    public virtual IAsyncResult BeginInvoke(EventInfo eventInfo, AsyncCallback callback, object object);
    public virtual double EndInvoke(IAsyncResult result);
}
public class JetBrains.Common.Timeline.EventLog.Interface.Statistics.DoubleStatisticsConverter : MulticastDelegate {
    public DoubleStatisticsConverter(object object, IntPtr method);
    public virtual double Invoke(ulong statistics);
    public virtual IAsyncResult BeginInvoke(ulong statistics, AsyncCallback callback, object object);
    public virtual double EndInvoke(IAsyncResult result);
}
public interface JetBrains.Common.Timeline.EventLog.Interface.Statistics.IStatisticsAggregator {
    public abstract virtual void Initialize(UInt64* accumulator);
    public abstract virtual void Aggregate(UInt64* current, ChunkInfo statistics);
    public abstract virtual void Aggregate(UInt64* current, EventInfo eventInfo);
    public abstract virtual void AggregatePart(UInt64* current, EventInfo eventInfo, ulong length);
    public abstract virtual void Aggregate(UInt64* current, UInt64* value);
    public abstract virtual bool HasPositiveStatistics(ChunkInfo chunk);
    public abstract virtual bool HasPositiveStatistics(EventInfo eventInfo);
}
[ExtensionAttribute]
public static class JetBrains.Common.Timeline.EventLog.Interface.Statistics.StatisticsAggregatorEx : object {
    [ExtensionAttribute]
public static void Aggregate(IStatisticsAggregator aggregator, UInt64* current, EventOrChunk item);
    [ExtensionAttribute]
public static void AggregatePart(Accumulator accumulator, EventInfo eventInfo, ModelRange constraints);
}
public class JetBrains.Common.Timeline.EventLog.Interface.Statistics.TimelineStatistics : object {
    public KnownStatistics ID;
    public DoubleChunkStatisticsExtractor ChunkValueExtractor;
    public DoubleEventStatisticsExtractor EventValueExtractor;
    public TimelineStatistics InterpolationHelper;
    public IStatisticsAggregator Aggregator;
    public DoubleStatisticsConverter DoubleStatisticsConverter;
    public bool IsDefaultPropertyAggregator;
    public int EventType;
    public int EventPropertyIndex;
    public int Index;
    public TimelineStatistics(KnownStatistics id, DoubleChunkStatisticsExtractor chunkValueExtractor, DoubleEventStatisticsExtractor eventValueExtractor, IStatisticsAggregator aggregator, int eventType, int eventPropertyIndex, DoubleStatisticsConverter doubleStatisticsConverter, bool isDefaultPropertyAggregator, TimelineStatistics interpolationHelper, int index);
    public Accumulator CreateAccumulator();
}
public class JetBrains.Common.Timeline.EventLog.Interface.ThreadAndTick : ValueType {
    [CompilerGeneratedAttribute]
private ThreadId <Thread>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Tick>k__BackingField;
    public ThreadId Thread { get; public set; }
    public ulong Tick { get; public set; }
    public ThreadAndTick(ThreadId Thread, ulong Tick);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ThreadId get_Thread();
    [CompilerGeneratedAttribute]
public void set_Thread(ThreadId value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_Tick();
    [CompilerGeneratedAttribute]
public void set_Tick(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ThreadAndTick left, ThreadAndTick right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ThreadAndTick left, ThreadAndTick right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ThreadAndTick other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(ThreadId& Thread, UInt64& Tick);
}
[DataContractAttribute]
public class JetBrains.Common.Timeline.EventLog.Interface.ThreadId : ValueType {
    [DataMemberAttribute]
private UInt32 myId;
    public static ThreadId Global;
    public static ThreadId Unknown;
    private ThreadId(UInt32 id);
    private static ThreadId();
    public static UInt32 op_Explicit(ThreadId threadId);
    public static int op_Explicit(ThreadId threadId);
    public static ThreadId op_Explicit(UInt32 value);
    public static ThreadId op_Implicit(int value);
    private static ThreadId Create(UInt32 value);
    public sealed virtual int CompareTo(ThreadId other);
    public virtual string ToString();
    public sealed virtual bool Equals(ThreadId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ThreadId left, ThreadId right);
    public static bool op_Inequality(ThreadId left, ThreadId right);
}
[DataContractAttribute]
public class JetBrains.Common.Timeline.EventLog.Interface.ThreadOrProcessId : ValueType {
    [DataMemberAttribute]
private UInt32 myId;
    private static UInt32 ProcessMask;
    public static ThreadOrProcessId Invalid;
    public bool IsProcess { get; }
    private ThreadOrProcessId(UInt32 id);
    private static ThreadOrProcessId();
    public bool get_IsProcess();
    public UInt32 Raw();
    public static ThreadId op_Explicit(ThreadOrProcessId id);
    public static UniqueProcessId op_Explicit(ThreadOrProcessId id);
    public static ThreadOrProcessId op_Implicit(ThreadId id);
    public static ThreadOrProcessId op_Implicit(UniqueProcessId id);
    public static UInt32 op_Explicit(ThreadOrProcessId threadId);
    public static int op_Explicit(ThreadOrProcessId threadId);
    public static ThreadOrProcessId op_Explicit(UInt32 value);
    public static ThreadOrProcessId op_Explicit(int value);
    private static ThreadOrProcessId Create(UInt32 value);
    public sealed virtual int CompareTo(ThreadOrProcessId other);
    [LocalizableAttribute("False")]
public virtual string ToString();
    public sealed virtual bool Equals(ThreadOrProcessId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ThreadOrProcessId left, ThreadOrProcessId right);
    public static bool op_Inequality(ThreadOrProcessId left, ThreadOrProcessId right);
}
public static class JetBrains.Common.Timeline.EventLog.Interface.ThreadTypePrinter : object {
    public static string Print(ThreadTypes threadType);
}
public class JetBrains.Common.Timeline.EventLog.Interface.ThreadTypes : ValueType {
    private UInt32 myId;
    public static ThreadTypes Native;
    public static ThreadTypes Main;
    [ObsoleteAttribute]
public static ThreadTypes ThreadPoolWorker;
    [ObsoleteAttribute]
public static ThreadTypes ThreadPoolIO;
    public static ThreadTypes GC;
    public static ThreadTypes Finalizer;
    public static ThreadTypes ClrWorker;
    public static ThreadTypes NamedManaged;
    public static ThreadTypes NamedNative;
    public static ThreadTypes Jit;
    public bool IsNamed { get; }
    public bool IsManaged { get; }
    private ThreadTypes(UInt32 id);
    private static ThreadTypes();
    public static UInt32 op_Explicit(ThreadTypes value);
    public static ThreadTypes op_Explicit(UInt32 value);
    private static ThreadTypes Create(UInt32 value);
    [LocalizableAttribute("False")]
public virtual string ToString();
    public bool get_IsNamed();
    public bool get_IsManaged();
    public sealed virtual bool Equals(ThreadTypes other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    public static bool op_Equality(ThreadTypes left, ThreadTypes right);
    public static bool op_Inequality(ThreadTypes left, ThreadTypes right);
}
public class JetBrains.Common.Timeline.EventLog.Interface.UniqueProcessId : ValueType {
    private UInt32 myId;
    public static UniqueProcessId Invalid;
    private UniqueProcessId(UInt32 id);
    private static UniqueProcessId();
    public static UInt32 op_Explicit(UniqueProcessId threadId);
    public static UniqueProcessId op_Increment(UniqueProcessId id);
    public static int op_Explicit(UniqueProcessId threadId);
    public static UniqueProcessId op_Explicit(UInt32 value);
    public static UniqueProcessId op_Explicit(int value);
    private static UniqueProcessId Create(UInt32 value);
    public virtual string ToString();
    public sealed virtual bool Equals(UniqueProcessId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(UniqueProcessId left, UniqueProcessId right);
    public static bool op_Inequality(UniqueProcessId left, UniqueProcessId right);
}
public enum JetBrains.Common.Timeline.EventLog.Interface.Writer.EventSessionState : Enum {
    public int value__;
    public static EventSessionState NotStarted;
    public static EventSessionState Started;
    public static EventSessionState Finished;
}
public interface JetBrains.Common.Timeline.EventLog.Interface.Writer.IEventSessionWriter {
    public EventSessionState State { get; }
    public abstract virtual EventSessionState get_State();
    public abstract virtual void StartSession(ulong tick, ulong ticksPerSecond);
    public abstract virtual void SetThreadInfo(IThreadDescriptor info);
    public abstract virtual void StopSession(ulong tick);
    public abstract virtual void LogEvent(ThreadId threadId, int layerId, ulong tick, int eventId, UInt64[] details);
}
public interface JetBrains.Common.Timeline.EventLog.Interface.Writer.IEventsLogger {
    public UInt32 EventsCount { get; }
    public abstract virtual void LogEvent(EventInfo eventInfo);
    public abstract virtual UInt32 get_EventsCount();
    public abstract virtual void Close();
}
public interface JetBrains.Common.Timeline.EventLog.Interface.Writer.IStringWriter {
    public abstract virtual ulong Write(string s);
}
public class JetBrains.DotTrace.Common.DalInterface.CallTree.Dfs.SubtractOffset`1 : MulticastDelegate {
    public SubtractOffset`1(object object, IntPtr method);
    public virtual SubtractResult Invoke(TOffset minuend, TOffset subtrahend);
    public virtual IAsyncResult BeginInvoke(TOffset minuend, TOffset subtrahend, AsyncCallback callback, object object);
    public virtual SubtractResult EndInvoke(IAsyncResult result);
}
public class JetBrains.DotTrace.Common.DalInterface.CallTree.Dfs.SubtractResult : ValueType {
    public long Diff;
    public bool IsValid;
    public SubtractResult(long diff, bool isValid);
    [LocalizableAttribute("False")]
public virtual string ToString();
}
public class JetBrains.DotTrace.DalInterface.Timeline.CallTree.DfsNodePtr : ValueType {
    private UInt32 myRaw;
    public static DfsNodePtr Invalid;
    private static UInt32 InvalidMask;
    private static IdComparer ComparerInstance;
    private static ReverseIdComparer ReverseComparerInstance;
    public static SubtractOffset`1<DfsNodePtr> Subtractor { get; }
    public static IdComparer Comparer { get; }
    public static ReverseIdComparer ReverseComparer { get; }
    public DfsNodePtr(UInt32 raw);
    private static DfsNodePtr();
    public static UInt32 op_Explicit(DfsNodePtr value);
    public static int op_Explicit(DfsNodePtr value);
    public UInt32 Raw();
    public static DfsNodePtr op_Explicit(UInt32 value);
    public static DfsNodePtr op_Explicit(int value);
    public static DfsNodePtr Create(UInt32 value);
    [PureAttribute]
private bool IsValid();
    public sealed virtual bool Equals(DfsNodePtr other);
    public sealed virtual int CompareTo(DfsNodePtr other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(DfsNodePtr left, DfsNodePtr right);
    public static bool op_Inequality(DfsNodePtr left, DfsNodePtr right);
    public static bool op_LessThan(DfsNodePtr left, DfsNodePtr right);
    public static bool op_GreaterThan(DfsNodePtr left, DfsNodePtr right);
    public static bool op_LessThanOrEqual(DfsNodePtr left, DfsNodePtr right);
    public static bool op_GreaterThanOrEqual(DfsNodePtr left, DfsNodePtr right);
    [LocalizableAttribute("False")]
public virtual string ToString();
    public static SubtractOffset`1<DfsNodePtr> get_Subtractor();
    public static Pair`2<DfsNodePtr, bool> Decrement(DfsNodePtr ptr);
    public static Pair`2<DfsNodePtr, bool> Increment(DfsNodePtr ptr);
    public static int ToIndex(DfsNodePtr ptr);
    public static DfsNodePtr FromIndex(int index);
    public static IdComparer get_Comparer();
    public static ReverseIdComparer get_ReverseComparer();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
