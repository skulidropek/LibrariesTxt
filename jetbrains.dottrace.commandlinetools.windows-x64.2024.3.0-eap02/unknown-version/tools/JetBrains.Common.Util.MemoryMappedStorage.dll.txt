public class JetBrains.Common.Util.MemoryMappedStorage.CopyBlockStructStreamingSectionReader`1 : ValueType {
    public sealed virtual T ReadUnaligned(IntPtr source);
}
public class JetBrains.Common.Util.MemoryMappedStorage.DefaultStructStreamingSectionReader`1 : ValueType {
    public sealed virtual T ReadUnaligned(IntPtr source);
}
[ExtensionAttribute]
public static class JetBrains.Common.Util.MemoryMappedStorage.DirectoryEx : object {
    [ExtensionAttribute]
public static bool TryGetSection(ISectionsContainer container, Lifetime lifetime, TSectionId sectionId, IMemoryMappedSection& result);
}
[ThreadUnsafeAttribute]
public abstract class JetBrains.Common.Util.MemoryMappedStorage.EnumerableStreamingSection`1 : object {
    private Lifetime myLifetime;
    [NotNullAttribute]
private IReadonlyMemoryMappedSection mySection;
    protected EnumerableStreamingSection`1(Lifetime lifetime, IReadonlyMemoryMappedSection section);
    protected abstract virtual T ReadElement(IStreamContentReader reader);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    public sealed virtual IStreamingSectionEnumerator`1<T> GetEnumerator();
}
public interface JetBrains.Common.Util.MemoryMappedStorage.IBlittableContentReader {
    public abstract virtual Byte[] ReadBytes(int count);
    public abstract virtual bool ReadBoolean();
    public abstract virtual byte ReadByte();
    public abstract virtual short ReadInt16();
    public abstract virtual ushort ReadUInt16();
    public abstract virtual int ReadInt32();
    public abstract virtual UInt32 ReadUInt32();
    public abstract virtual long ReadInt64();
    public abstract virtual ulong ReadUInt64();
    public abstract virtual Guid ReadGuid();
}
public interface JetBrains.Common.Util.MemoryMappedStorage.IBlittableContentWriter {
    public abstract virtual void WriteBoolean(bool value);
    public abstract virtual void WriteByte(byte value);
    public abstract virtual void WriteBytes(Byte[] value);
    public abstract virtual void WriteInt16(short value);
    public abstract virtual void WriteUInt16(ushort value);
    public abstract virtual void WriteInt32(int value);
    public abstract virtual void WriteUInt32(UInt32 value);
    public abstract virtual void WriteInt64(long value);
    public abstract virtual void WriteUInt64(ulong value);
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.Common.Util.MemoryMappedStorage.IIndexableStreamingSection`1 {
    public long CurrentCount { get; }
    public T Item { get; }
    public abstract virtual long get_CurrentCount();
    public abstract virtual T get_Item(long index);
}
public class JetBrains.Common.Util.MemoryMappedStorage.Impl.EmptyMemoryMappedView : object {
    [CompilerGeneratedAttribute]
private long <Position>k__BackingField;
    public IntPtr MappedPointer { get; }
    public long Size { get; }
    public long Position { get; }
    public EmptyMemoryMappedView(long position);
    public sealed virtual IntPtr get_MappedPointer();
    public sealed virtual long get_Size();
    public sealed virtual bool Flush(bool async);
    [CompilerGeneratedAttribute]
public sealed virtual long get_Position();
}
public class JetBrains.Common.Util.MemoryMappedStorage.Impl.IndexableStreamingSectionEnumerator`1 : object {
    private IIndexableStreamingSection`1<T> mySection;
    private long myIndex;
    private T myCurrent;
    private bool myHasCurrent;
    public bool HasCurrent { get; }
    public T Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public IndexableStreamingSectionEnumerator`1(IIndexableStreamingSection`1<T> section);
    public sealed virtual bool get_HasCurrent();
    public sealed virtual T get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual void Dispose();
}
public class JetBrains.Common.Util.MemoryMappedStorage.Impl.StreamContentReader : object {
    private Lifetime myLifetime;
    [NotNullAttribute]
private IReadonlyMemoryMappedSectionData mySectionData;
    [NotNullAttribute]
private IReadonlyMemoryMappedView myCurrentView;
    [NotNullAttribute]
private LifetimeDefinition myCurrentViewLifetimeDefinition;
    private int myViewMaxSize;
    private long myCachedReadyPosition;
    [CompilerGeneratedAttribute]
private long <CurrentPosition>k__BackingField;
    private long CurrentViewEndPosition { get; }
    public bool HasDataToRead { get; }
    public long CurrentPosition { get; private set; }
    private long CurrentViewBytesReady { get; }
    private long CurrentPositionViewOffset { get; }
    private IntPtr CurrentPositionPtr { get; }
    public StreamContentReader(Lifetime lifetime, IReadonlyMemoryMappedSectionData sectionData, int viewMaxSize);
    private long get_CurrentViewEndPosition();
    public sealed virtual bool get_HasDataToRead();
    [CompilerGeneratedAttribute]
public sealed virtual long get_CurrentPosition();
    [CompilerGeneratedAttribute]
private void set_CurrentPosition(long value);
    public sealed virtual bool ReadBoolean();
    public sealed virtual byte ReadByte();
    public sealed virtual Byte[] ReadBytes(int count);
    public sealed virtual void Read(Byte[] buffer, int offset, int count);
    private void ReadToPtr(Byte* destPtr, int count);
    public sealed virtual string ReadUtf16String();
    public sealed virtual short ReadInt16();
    public sealed virtual ushort ReadUInt16();
    public sealed virtual int ReadInt32();
    public sealed virtual UInt32 ReadUInt32();
    public sealed virtual long ReadInt64();
    public sealed virtual ulong ReadUInt64();
    public sealed virtual Guid ReadGuid();
    public sealed virtual ulong ReadPackedUInt64(byte bytesPerValue);
    public sealed virtual void SeekTo(long position);
    public void SeekToElement(long elementIndex, int elementSize);
    public void SeekToElement(long elementIndex);
    public sealed virtual void Skip(long count);
    public void SkipElements(long count, int elementSize);
    public void SkipElements(long count);
    private long get_CurrentViewBytesReady();
    private long get_CurrentPositionViewOffset();
    private IntPtr get_CurrentPositionPtr();
    private void RenewCachedReadyPosition();
    private void CheckDataReady(int bytesCount);
    private void MapViewToPosition(long position);
    private void CreateEmptyViewOnPosition(long position);
    private void ShiftViewIfNeeded();
    private void MoveCurrentPosition(long readBytesCount);
}
internal class JetBrains.Common.Util.MemoryMappedStorage.Impl.StreamContentWriter : object {
    private static int PreallocateBytes;
    private Lifetime myLifetime;
    [NotNullAttribute]
private IMemoryMappedSectionData mySectionData;
    [NotNullAttribute]
private IMemoryMappedView myCurrentView;
    [NotNullAttribute]
private LifetimeDefinition myCurrentViewLifetimeDefinition;
    private int myViewMaxSize;
    private long myPreallocatedPosition;
    private long myCurrentWritePosition;
    private long CurrentViewEndPosition { get; }
    private long CurrentViewBytesAvailable { get; }
    private long CurrentPositionViewOffset { get; }
    private IntPtr CurrentWritePositionPtr { get; }
    public StreamContentWriter(Lifetime lifetime, IMemoryMappedSectionData sectionData, int viewMaxSize);
    private long get_CurrentViewEndPosition();
    public sealed virtual void WriteBoolean(bool value);
    public sealed virtual void WriteByte(byte value);
    public sealed virtual void WriteBytes(Byte[] value);
    public sealed virtual void Write(Byte[] buffer, int offset, int count);
    private void WriteFromPtr(Byte* srcPtr, int count);
    public sealed virtual void WriteUtf16String(string value);
    public sealed virtual void WriteInt16(short value);
    public sealed virtual void WriteUInt16(ushort value);
    public sealed virtual void WriteInt32(int value);
    public sealed virtual void WriteUInt32(UInt32 value);
    public sealed virtual void WriteInt64(long value);
    public sealed virtual void WriteUInt64(ulong value);
    private static void Copy(IntPtr destination, T& source);
    public void WriteGuid(Guid value);
    private long get_CurrentViewBytesAvailable();
    private long get_CurrentPositionViewOffset();
    private IntPtr get_CurrentWritePositionPtr();
    private void MapViewToPosition(long position);
    private void ShiftViewIfNeeded();
    private void MoveCurrentPosition(long writeBytesCount);
    public sealed virtual void FlushReadyPosition();
}
[ThreadUnsafeAttribute]
internal class JetBrains.Common.Util.MemoryMappedStorage.Impl.UnsafeBlittableContentReader : object {
    private IntPtr myDataPtr;
    private long myElementSize;
    private long myEndElementPosition;
    private long myCurrentPosition;
    private IntPtr CurrentPositionPtr { get; }
    public UnsafeBlittableContentReader(IntPtr dataPtr, long elementSize);
    public void SetCurrentElementPostion(long elementPosition);
    public void Remap(IntPtr dataPtr);
    private void CheckDataAvailable(int size);
    private IntPtr get_CurrentPositionPtr();
    public sealed virtual bool ReadBoolean();
    public sealed virtual byte ReadByte();
    public sealed virtual Byte[] ReadBytes(int count);
    public sealed virtual short ReadInt16();
    public sealed virtual ushort ReadUInt16();
    public sealed virtual int ReadInt32();
    public sealed virtual UInt32 ReadUInt32();
    public sealed virtual long ReadInt64();
    public sealed virtual ulong ReadUInt64();
    public sealed virtual Guid ReadGuid();
}
[ThreadUnsafeAttribute]
internal class JetBrains.Common.Util.MemoryMappedStorage.Impl.UnsafeBlittableContentWriter : object {
    private IntPtr myDataPtr;
    private long myElementSize;
    private long myEndElementPosition;
    private long myCurrentPosition;
    private IntPtr CurrentPositionPtr { get; }
    public UnsafeBlittableContentWriter(IntPtr dataPtr, long elementSize);
    public void SetCurrentElementPostion(long elementPosition);
    public void Remap(IntPtr dataPtr);
    private void CheckSpaceAvailable(int size);
    private IntPtr get_CurrentPositionPtr();
    public sealed virtual void WriteBoolean(bool value);
    public sealed virtual void WriteByte(byte value);
    public sealed virtual void WriteBytes(Byte[] value);
    public sealed virtual void WriteInt16(short value);
    public sealed virtual void WriteUInt16(ushort value);
    public sealed virtual void WriteInt32(int value);
    public sealed virtual void WriteUInt32(UInt32 value);
    public sealed virtual void WriteInt64(long value);
    public sealed virtual void WriteUInt64(ulong value);
}
[DefaultMemberAttribute("Item")]
[ThreadUnsafeAttribute]
public abstract class JetBrains.Common.Util.MemoryMappedStorage.IndexableStreamingSection`1 : object {
    private Lifetime myLifetime;
    private UnsafeBlittableContentReader myReader;
    private IReadonlyMemoryMappedSectionData mySectionData;
    private long myCachedReadyPosition;
    private IReadonlyMemoryMappedView myCurrentView;
    private LifetimeDefinition myCurrentViewLifetimeDefinition;
    public long CurrentCount { get; }
    public T Item { get; }
    protected IndexableStreamingSection`1(Lifetime lifetime, IReadonlyMemoryMappedSection section);
    protected abstract virtual T ReadElement(IBlittableContentReader reader);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    public sealed virtual IStreamingSectionEnumerator`1<T> GetEnumerator();
    public sealed virtual long get_CurrentCount();
    public sealed virtual T get_Item(long elementIndex);
    private void CheckDataReady(long elementIndex);
    private void RenewCachedReadyPosition();
    private void MoveViewIfRequired(long elementIndex);
}
[ThreadUnsafeAttribute]
public abstract class JetBrains.Common.Util.MemoryMappedStorage.IndexableStreamingSectionWriter`1 : object {
    private UnsafeBlittableContentWriter myWriter;
    private Lifetime myLifetime;
    private IMemoryMappedSectionData mySectionData;
    private long myWritePosition;
    private IReadonlyMemoryMappedView myCurrentView;
    private LifetimeDefinition myCurrentViewLifetimeDefinition;
    protected IndexableStreamingSectionWriter`1(Lifetime lifetime, IMemoryMappedSection section, short elementSize);
    protected abstract virtual void WriteElement(IBlittableContentWriter writer, T element);
    public sealed virtual void Write(T element);
    private void MoveViewIfRequired(long elementIndex);
}
public interface JetBrains.Common.Util.MemoryMappedStorage.IStreamContentReader {
    public bool HasDataToRead { get; }
    public long CurrentPosition { get; }
    public abstract virtual ulong ReadPackedUInt64(byte bytesPerValue);
    public abstract virtual string ReadUtf16String();
    public abstract virtual bool get_HasDataToRead();
    public abstract virtual long get_CurrentPosition();
    public abstract virtual void Read(Byte[] buffer, int offset, int count);
    public abstract virtual void SeekTo(long position);
    public abstract virtual void Skip(long count);
}
public interface JetBrains.Common.Util.MemoryMappedStorage.IStreamContentWriter {
    public abstract virtual void WriteUtf16String(string value);
    public abstract virtual void Write(Byte[] buffer, int offset, int count);
    public abstract virtual void FlushReadyPosition();
}
public interface JetBrains.Common.Util.MemoryMappedStorage.IStreamingSection`1 {
    public abstract virtual IStreamingSectionEnumerator`1<T> GetEnumerator();
}
public interface JetBrains.Common.Util.MemoryMappedStorage.IStreamingSectionEnumerator`1 {
    public bool HasCurrent { get; }
    public abstract virtual bool get_HasCurrent();
}
public interface JetBrains.Common.Util.MemoryMappedStorage.IStreamingSectionWriter`1 {
    public abstract virtual void Write(T element);
}
public interface JetBrains.Common.Util.MemoryMappedStorage.IStructStreamingSectionReader`1 {
    public abstract virtual T ReadUnaligned(IntPtr source);
}
[ExtensionAttribute]
public static class JetBrains.Common.Util.MemoryMappedStorage.MemoryMappedSectionHeaderEx : object {
    [ExtensionAttribute]
public static T TryReadHeader(IReadonlyMemoryMappedSection this, Func`2<IBlittableContentReader, T> reader);
    [ExtensionAttribute]
public static T ReadHeader(IReadonlyMemoryMappedSection this, Func`2<IBlittableContentReader, T> reader);
    [ExtensionAttribute]
public static void WriteHeader(IMemoryMappedSection this, T header, int size, Action`2<IBlittableContentWriter, T> writer);
}
[ExtensionAttribute]
public static class JetBrains.Common.Util.MemoryMappedStorage.StreamContentReaderEx : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IStreamContentReader GetContentReader(IReadonlyMemoryMappedSectionData sectionData, Lifetime lifetime);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IStreamContentReader GetContentReader(IReadonlyMemoryMappedSection section, Lifetime lifetime);
}
[ExtensionAttribute]
public static class JetBrains.Common.Util.MemoryMappedStorage.StreamContentWriterEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IStreamContentWriter GetContentWriter(IMemoryMappedSectionData sectionData, Lifetime lifetime);
    [ExtensionAttribute]
[NotNullAttribute]
public static IStreamContentWriter GetContentWriter(IMemoryMappedSection section, Lifetime lifetime, byte segmentAlignmentBit, int preferredRegionPages);
}
[ExtensionAttribute]
public static class JetBrains.Common.Util.MemoryMappedStorage.StreamingSectionEnumeratorEx : object {
    [ExtensionAttribute]
public static bool TryGetCurrent(IStreamingSectionEnumerator`1<T> this, T& outCurrent);
    [ExtensionAttribute]
public static bool TryGetNext(IStreamingSectionEnumerator`1<T> this, T& outCurrent);
}
[DefaultMemberAttribute("Item")]
[ThreadUnsafeAttribute]
public class JetBrains.Common.Util.MemoryMappedStorage.StructStreamingSection`2 : object {
    private Lifetime myLifetime;
    private IReadonlyMemoryMappedSectionData mySectionData;
    private TReader myReader;
    private long myCachedReadyPosition;
    private IReadonlyMemoryMappedView myCurrentView;
    private LifetimeDefinition myCurrentViewLifetimeDefinition;
    private short myElementSize;
    public long CurrentCount { get; }
    public T Item { get; }
    public StructStreamingSection`2(Lifetime lifetime, IReadonlyMemoryMappedSection section, TReader reader);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    public sealed virtual IStreamingSectionEnumerator`1<T> GetEnumerator();
    public sealed virtual long get_CurrentCount();
    public T ReadUnaligned(IntPtr source);
    public sealed virtual T get_Item(long elementIndex);
    private void CheckDataReady(long elementIndex);
    private void RenewCachedReadyPosition();
    private void MoveViewIfRequired(long elementIndex);
}
[ThreadUnsafeAttribute]
public class JetBrains.Common.Util.MemoryMappedStorage.StructStreamingSectionWriter`1 : object {
    private Lifetime myLifetime;
    private IMemoryMappedSectionData mySectionData;
    private short myElementSize;
    private long myWritePosition;
    private IReadonlyMemoryMappedView myCurrentView;
    private LifetimeDefinition myCurrentViewLifetimeDefinition;
    public StructStreamingSectionWriter`1(Lifetime lifetime, IMemoryMappedSection section);
    public sealed virtual void Write(T element);
    private static void Copy(IntPtr destination, T& source);
    private void MoveViewIfRequired(long elementIndex);
}
public class JetBrains.Common.Util.MemoryMappedStorage.Util.SimpleContentPointerReader : object {
    [CompilerGeneratedAttribute]
private PtrSize <SizeOf>k__BackingField;
    public PtrSize SizeOf { get; }
    public SimpleContentPointerReader(IReadonlyMemoryMappedSection section);
    public SimpleContentPointerReader(PtrSize size);
    public SimpleContentPointerReader(byte size);
    [CompilerGeneratedAttribute]
public PtrSize get_SizeOf();
    public ulong Read(IBlittableContentReader reader);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsUnmanagedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
