public enum JetBrains.DotTrace.Common.DalInterface.Cache.DotTraceCacheItemTypes : Enum {
    public UInt32 value__;
    public static DotTraceCacheItemTypes Subsystems;
    public static DotTraceCacheItemTypes BlocksOfSystemMethods;
    public static DotTraceCacheItemTypes PerformancePayloads;
    public static DotTraceCacheItemTypes AsyncPtrToContinuationPtr;
    public static DotTraceCacheItemTypes PtrToAsyncFuid;
}
public interface JetBrains.DotTrace.Common.DalInterface.Cache.ICacheStorageDir {
    public FileSystemPath Path { get; }
    public abstract virtual FileSystemPath get_Path();
}
public interface JetBrains.DotTrace.Common.DalInterface.Cache.IClearCacheAfterClosing {
    public abstract virtual void RegisterClearing();
}
public interface JetBrains.DotTrace.Common.DalInterface.Cache.ISilentCleanupLocation {
    public FileSystemPath Path { get; }
    public TimeSpan LifeSpan { get; }
    public abstract virtual FileSystemPath get_Path();
    public abstract virtual TimeSpan get_LifeSpan();
}
public class JetBrains.DotTrace.Common.DalInterface.CallTree.CallTreePathState : object {
    [NotNullAttribute]
public CallTreePath Include;
    [CanBeNullAttribute]
public CallTreePath[] Exclude;
    public int ExcludeLen { get; }
    public CallTreePathState(CallTreePath include, CallTreePath[] exclude);
    public int get_ExcludeLen();
    public sealed virtual bool Equals(CallTreePathState other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.DotTrace.Common.DalInterface.CallTree.CallTreePathWithAccessData`1 : object {
    public CallTreePathState Path;
    public InterruptibleLazy`1<Nullable`1<AccessData`1<TOffset>>> AccessData;
}
public class JetBrains.DotTrace.Common.DalInterface.CallTree.CallTreeResponseData : object {
    public PayloadType PayloadType;
    public CallTreeDirection Direction;
    public CallTreeResponseData(PayloadType payloadType, CallTreeDirection direction);
}
public class JetBrains.DotTrace.Common.DalInterface.CallTree.Dfs.CallTreePayloadsData`2 : ValueType {
    public PayloadType PayloadType;
    [NotNullAttribute]
public IAccessor`1<ITryGetValue`2<TOffset, TPayload>> TotalPayloadStorage;
    [NotNullAttribute]
public IAccessor`1<IBatchReader`2<TOffset, TPayload>> OwnPayloadBatchReader;
}
public class JetBrains.DotTrace.Common.DalInterface.CallTree.Dfs.DfsIndexKey : ValueType {
    public FunctionUID Fuid;
    public int DataOffsetBytes;
    public int CountBytes;
    [CompilerGeneratedAttribute]
private static FuidRelationalComparer <FuidComparer>k__BackingField;
    public static FuidRelationalComparer FuidComparer { get; }
    public DfsIndexKey(FunctionUID fuid, int dataOffsetBytes, int countBytes);
    private static DfsIndexKey();
    [LocalizableAttribute("False")]
public virtual string ToString();
    [CompilerGeneratedAttribute]
public static FuidRelationalComparer get_FuidComparer();
}
public class JetBrains.DotTrace.Common.DalInterface.CallTree.Dfs.DfsRawRoots`1 : object {
    [CompilerGeneratedAttribute]
private T[] <Data>k__BackingField;
    public T[] Data { get; }
    public DfsRawRoots`1(T[] data);
    [CompilerGeneratedAttribute]
public sealed virtual T[] get_Data();
}
public interface JetBrains.DotTrace.Common.DalInterface.CallTree.Dfs.IBatchHeadersReader`1 {
}
public interface JetBrains.DotTrace.Common.DalInterface.CallTree.Dfs.IBatchHeadersReader`2 {
    public abstract virtual int ReadHeadersOffsetsDescending(TKey key, TOffset from, int count, TOffset[] offsets);
    public abstract virtual int ReadHeadersOffsetsDescending(TKey key, TOffset from, int count, int arrayLength, TOffset[] offsets);
}
public interface JetBrains.DotTrace.Common.DalInterface.CallTree.Dfs.IBatchNodesReader`1 {
}
public interface JetBrains.DotTrace.Common.DalInterface.CallTree.Dfs.IBatchNodesReader`2 {
}
public interface JetBrains.DotTrace.Common.DalInterface.CallTree.Dfs.IBatchReader`2 {
    public abstract virtual int ReadBackwardOffsetsAscending(TOffset to, int count, TData[] nodes, int rightBorder);
    public abstract virtual int ReadForwardOffsetsAscending(TOffset from, int count, TData[] nodes, int destStartIndex);
}
public interface JetBrains.DotTrace.Common.DalInterface.CallTree.Dfs.IDfsNodeBatchProcessor`3 {
    public abstract virtual void ProcessDfsNodesBatch(DfsNode`2[] nodes, TPayload[] payloads, SubsystemIndex[] subsystems, int start, int count, TOffset rootNodeOffset);
}
public interface JetBrains.DotTrace.Common.DalInterface.CallTree.Dfs.IDfsRawRoots`1 {
}
public static class JetBrains.DotTrace.Common.DalInterface.CallTree.Dfs.OffsetsListEx : object {
    public static int ReadFromList(List`1<T> list, T toIncluding, int count, T[] offsets, IComparer`1<T> reverseComparer);
}
public class JetBrains.DotTrace.Common.DalInterface.CallTree.Dfs.Other.Bounds : ValueType {
    public int LeftIndex;
    public int RightIndex;
    public static Bounds Empty;
    public int Count { get; }
    public Bounds(int leftIndex, int rightIndex);
    private static Bounds();
    public int get_Count();
    public bool Contains(int index);
    [LocalizableAttribute("False")]
public virtual string ToString();
    public bool AreEmpty();
    public sealed virtual bool Equals(Bounds other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Bounds left, Bounds right);
    public static bool op_Inequality(Bounds left, Bounds right);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Common.DalInterface.CallTree.Dfs.Other.ComparerEx : object {
    [ExtensionAttribute]
public static bool LessOrEqual(IComparer`1<T> comparer, bool orEqual, T first, T second);
    [ExtensionAttribute]
public static bool Less(IComparer`1<T> comparer, T first, T second);
}
public class JetBrains.DotTrace.Common.DalInterface.CallTree.Dfs.Other.DontSkip`1 : object {
    public static ISkipBlocksOfSystemMethods`1<TOffset> Instance;
    private static DontSkip`1();
    public sealed virtual TOffset SkipBackward(TOffset offset);
}
public class JetBrains.DotTrace.Common.DalInterface.CallTree.Dfs.Other.HeaderEnumerator`2 : object {
    private ConditionalLog myLog;
    private SparseDfsForwardEnumerator`2<TOffset, TOffset> myForwardEnumerator;
    [CompilerGeneratedAttribute]
private TOffset[] <Data>k__BackingField;
    public TOffset[] Data { get; }
    public HeaderEnumerator`2(TKey key, IBatchHeadersReader`2<TOffset, TKey> batchReaders, IComparer`1<TOffset> comparer, TOffset[] buffer);
    [CompilerGeneratedAttribute]
public TOffset[] get_Data();
    public Bounds GetBounds(TOffset offset, bool exclude);
    [LocalizableAttribute("False")]
public string Dump(string prefix, Bounds bounds);
}
public interface JetBrains.DotTrace.Common.DalInterface.CallTree.Dfs.Other.ISkipBlocksOfSystemMethods`1 {
    public abstract virtual TOffset SkipBackward(TOffset offset);
}
public class JetBrains.DotTrace.Common.DalInterface.CallTree.Dfs.Other.ProcessingSubtree`3 : ValueType {
    public DfsNode`2<TOffset, TKey> Root;
    public Nullable`1<UserFeedBack`1<TOffset>> UserFeedBack;
    public bool MinusesPhase;
    public TContext Context;
    public ProcessingSubtree`3(DfsNode`2<TOffset, TKey> root, bool minusesPhase, TContext context, Nullable`1<UserFeedBack`1<TOffset>> userFeedBack);
    [LocalizableAttribute("False")]
public virtual string ToString();
}
public class JetBrains.DotTrace.Common.DalInterface.CallTree.Dfs.Other.ReadFromOffsetIncluding`1 : MulticastDelegate {
    public ReadFromOffsetIncluding`1(object object, IntPtr method);
    public virtual int Invoke(TOffset offset, int readCount);
    public virtual IAsyncResult BeginInvoke(TOffset offset, int readCount, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
public class JetBrains.DotTrace.Common.DalInterface.CallTree.Dfs.Other.SkipBlocksOfSystemMethods`1 : object {
    private Func`2<TOffset, int> myOffsetToIndex;
    private Func`2<int, TOffset> myIndexToOffset;
    private int myBlockSize;
    private TOffset myMinOffset;
    private BitArray myBitArray;
    private int myMinIndex;
    public SkipBlocksOfSystemMethods`1(BitArray bitArray, int blockSize, TOffset minOffset, Func`2<TOffset, int> offsetToIndex, Func`2<int, TOffset> indexToOffset);
    public sealed virtual TOffset SkipBackward(TOffset offset);
}
public class JetBrains.DotTrace.Common.DalInterface.CallTree.Dfs.Other.SparseDfsForwardEnumerator`2 : object {
    private ConditionalLog myLog;
    private IComparer`1<TOffset> myComparer;
    private ReadFromOffsetIncluding`1<TOffset> myReader;
    private Func`2<TData, TOffset> myGetOffset;
    private Nullable`1<TOffset> myCurrentOffset;
    private int myCurrentStartIndex;
    [CompilerGeneratedAttribute]
private TData[] <Data>k__BackingField;
    private TData[] Data { get; }
    public SparseDfsForwardEnumerator`2(IComparer`1<TOffset> comparer, TData[] data, ReadFromOffsetIncluding`1<TOffset> reader, Func`2<TData, TOffset> getOffset);
    [CompilerGeneratedAttribute]
private TData[] get_Data();
    private int GetIndex(TOffset offset, bool exclude);
    public Bounds GetBounds(TOffset offset, bool exclude);
    public void Reset();
}
public class JetBrains.DotTrace.Common.DalInterface.CallTree.Dfs.Other.SubtreeContextManager`3 : object {
    [NotNullAttribute]
public CreateContextDelegate<TOffset, TKey, TContext> CreateContext;
    [CanBeNullAttribute]
public Action`1<TContext> DisposeContext;
    public SubtreeContextManager`3(CreateContextDelegate<TOffset, TKey, TContext> createContext);
}
public static class JetBrains.DotTrace.Common.DalInterface.CallTree.Dfs.Other.TreeAssert : object {
    [ConditionalAttribute("JET_ASSERT_CALL_TREE")]
public static void AreSorted(IComparer`1<TOffset> comparer, IEnumerable`1<TOffset> ptrs, IEnumerable`1<TOffset> minuses);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Common.DalInterface.CallTree.Dfs.Other.TreeEnumeratorEx : object {
    [ExtensionAttribute]
[LocalizableAttribute("False")]
public static string Dump(DfsNode`2[] dfsNodes, string prefix, Bounds bounds);
}
public class JetBrains.DotTrace.Common.DalInterface.CallTree.Dfs.Other.UserFeedBack`1 : ValueType {
    public TOffset Offset;
    public bool Exclude;
    public UserFeedBack`1(TOffset offset, bool exclude);
    [LocalizableAttribute("False")]
public virtual string ToString();
}
public class JetBrains.DotTrace.Common.DalInterface.CallTree.Dfs.OwnPayloadsData`2 : ValueType {
    public PayloadType PayloadType;
    [NotNullAttribute]
public IAccessor`1<IBatchReader`2<TOffset, TPayload>> OwnPayloadBatchReader;
}
public interface JetBrains.DotTrace.Common.DalInterface.CallTree.IAsyncMethodCallTreeService`1 {
    public abstract virtual IEnumerable`1<TPtr> GetContinuationPtrs(TPtr asyncMethodPtr);
    public abstract virtual IEnumerable`1<TPtr> GetAwaitPtrs(TPtr asyncMethodPtr);
    public abstract virtual Nullable`1<TPtr> GetAsyncMethodPtr(TPtr continuationOrAwaitPtr);
}
public interface JetBrains.DotTrace.Common.DalInterface.CallTree.ITopMethodsMap`1 {
    [CanBeNullAttribute]
public CallTreePathState Path { get; }
    public bool ForcedShowSystem { get; }
    public bool ShowSystemFunctions { get; }
    public bool SortedByTotal { get; }
    public TPayload TotalPayload { get; }
    public bool HaveUserFunctionsWithPayload { get; }
    public abstract virtual CallTreePathState get_Path();
    public abstract virtual bool get_ForcedShowSystem();
    public abstract virtual bool get_ShowSystemFunctions();
    public abstract virtual bool get_SortedByTotal();
    public abstract virtual TPayload get_TotalPayload();
    public abstract virtual bool get_HaveUserFunctionsWithPayload();
}
[FlagsAttribute]
public enum JetBrains.DotTrace.Common.DalInterface.CallTree.Payloads.CalculationTargets : Enum {
    public int value__;
    public static CalculationTargets TotalPayload;
    public static CalculationTargets OwnPlusSystemPayload;
    public static CalculationTargets OwnPlusNonFunctionPayload;
    public static CalculationTargets SubsystemsPayload;
    public static CalculationTargets ClassTotalPayloads;
    public static CalculationTargets TotalAndOwnPayloads;
    public static CalculationTargets All;
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Common.DalInterface.CallTree.Payloads.CallTreePayloadsDataEx : object {
    [ExtensionAttribute]
public static CallTreePayloads`2<TOffset, TPayload> ToCallTreePayloads(CallTreePayloadsData`2<TOffset, TPayload> payloadsData);
    [ExtensionAttribute]
public static CallTreePayloads`2<TOffset, TPayload> ToCallTreePayloads(IDataStorage`2<TOffset, TPayload> totalPayloadsDataStorage, PayloadType payloadType);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.DotTrace.Common.DalInterface.CallTree.Payloads.DictionaryPayloadsMap`2 : object {
    private IDictionary`2<TKey, TValue> myMap;
    [CompilerGeneratedAttribute]
private PayloadType <PayloadType>k__BackingField;
    public TValue Item { get; public set; }
    public PayloadType PayloadType { get; public set; }
    public int Count { get; }
    public virtual void Clear();
    public TValue get_Item(TKey key);
    public void set_Item(TKey key, TValue value);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    [CompilerGeneratedAttribute]
public sealed virtual PayloadType get_PayloadType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PayloadType(PayloadType value);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class JetBrains.DotTrace.Common.DalInterface.CallTree.Payloads.FunctionPayloadsMap`2 : DictionaryPayloadsMap`2<TKey, FunctionPayloads`1<TPayload>> {
    [CompilerGeneratedAttribute]
private TPayload <TotalPayload>k__BackingField;
    public TPayload TotalPayload { get; public set; }
    [CompilerGeneratedAttribute]
public TPayload get_TotalPayload();
    [CompilerGeneratedAttribute]
public void set_TotalPayload(TPayload value);
}
public interface JetBrains.DotTrace.Common.DalInterface.CallTree.Payloads.IPayloadPredicates`1 {
    [PureAttribute]
public abstract virtual bool OwnPlusNonFunction(TKey key);
    [PureAttribute]
public abstract virtual bool OwnPlusSystem(bool isSystem, TKey key);
}
public interface JetBrains.DotTrace.Common.DalInterface.CallTree.Payloads.IPayloadsMap`2 {
    public PayloadType PayloadType { get; public set; }
    public abstract virtual PayloadType get_PayloadType();
    public abstract virtual void set_PayloadType(PayloadType value);
}
public static class JetBrains.DotTrace.Common.DalInterface.CallTree.Payloads.PayloadPredicates : object {
    public static bool OwnPlusNonFunction(FunctionUID fuid);
    public static bool OwnPlusSystem(bool isSystem, FunctionUID fuid);
    public static bool OwnPlusNonFunction(FunctionUIDm fuid);
    public static bool OwnPlusSystem(bool isSystem, FunctionUIDm fuid);
}
public class JetBrains.DotTrace.Common.DalInterface.CallTree.Payloads.PayloadPredicatesInstance : ValueType {
    public sealed virtual bool OwnPlusNonFunction(FunctionUID key);
    public sealed virtual bool OwnPlusSystem(bool isSystem, FunctionUID key);
}
public class JetBrains.DotTrace.Common.DalInterface.CallTree.Subsystems.OffsetToAsyncFuidCache`2 : object {
    public IAccessor`1<IBatchReader`2<TOffset, TKey>> ReaderAccessor;
}
public class JetBrains.DotTrace.Common.DalInterface.CallTree.Subsystems.SubsystemsCache`1 : object {
    public IAccessor`1<IBatchReader`2<TOffset, SubsystemIndex>> ReaderAccessor;
    public IReadOnlyDictionary`2<SubsystemIndex, SubsystemUsageInfoData> IndexToUsage;
}
public class JetBrains.DotTrace.Common.DalInterface.CallTree.Subsystems.SubsystemsCalculation : object {
    public SubsystemMeasureResultData MeasureResultData;
    public PayloadType PayloadType;
}
public class JetBrains.DotTrace.Common.DalInterface.CallTree.TopMethodInfo`1 : ValueType {
    public bool IsSystem;
    public TPayload OwnPayload;
    public TPayload TotalPayload;
    public TopMethodInfo`1(bool isSystem, TPayload ownPayload, TPayload totalPayload);
}
public class JetBrains.DotTrace.Common.DalInterface.CallTree.TopMethodsMap`1 : DictionaryPayloadsMap`2<FunctionUIDm, TopMethodInfo`1<TPayload>> {
    [CompilerGeneratedAttribute]
private bool <ForcedShowSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowSystemFunctions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HaveUserFunctionsWithPayload>k__BackingField;
    [CompilerGeneratedAttribute]
private TPayload <TotalPayload>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SortedByTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private CallTreePathState <Path>k__BackingField;
    public bool ForcedShowSystem { get; public set; }
    public bool ShowSystemFunctions { get; public set; }
    public bool HaveUserFunctionsWithPayload { get; public set; }
    public TPayload TotalPayload { get; public set; }
    public bool SortedByTotal { get; public set; }
    public CallTreePathState Path { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ForcedShowSystem();
    [CompilerGeneratedAttribute]
public void set_ForcedShowSystem(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowSystemFunctions();
    [CompilerGeneratedAttribute]
public void set_ShowSystemFunctions(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HaveUserFunctionsWithPayload();
    [CompilerGeneratedAttribute]
public void set_HaveUserFunctionsWithPayload(bool value);
    public virtual void Clear();
    [CompilerGeneratedAttribute]
public sealed virtual TPayload get_TotalPayload();
    [CompilerGeneratedAttribute]
public void set_TotalPayload(TPayload value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SortedByTotal();
    [CompilerGeneratedAttribute]
public void set_SortedByTotal(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual CallTreePathState get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(CallTreePathState value);
}
public class JetBrains.DotTrace.Common.DalInterface.Comparison.SingleSnapshotInfo : object {
    [NotNullAttribute]
private SnapshotDataId myId;
    [CanBeNullAttribute]
public FileSystemPath IndexFile;
    [NotNullAttribute]
public string Info { get; }
    [NotNullAttribute]
public SnapshotDataId Data { get; }
    public SingleSnapshotInfo(SnapshotDataId id, FileSystemPath indexFile);
    public string get_Info();
    public virtual string ToString();
    public sealed virtual SnapshotDataId get_Data();
    public sealed virtual int CompareTo(SingleSnapshotInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(SingleSnapshotInfo other);
}
public class JetBrains.DotTrace.Common.DalInterface.Comparison.SnapshotDataId : object {
    public static SnapshotDataId First;
    public static SnapshotDataId Second;
    public static SnapshotDataId Comparison;
    public int Index;
    private SnapshotDataId(int index);
    private static SnapshotDataId();
    public static bool op_Inequality(SnapshotDataId left, SnapshotDataId right);
    public static bool op_Equality(SnapshotDataId left, SnapshotDataId right);
    public sealed virtual bool Equals(SnapshotDataId other);
    [LocalizableAttribute("False")]
public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface JetBrains.DotTrace.Common.DalInterface.ISnapshotIdContainer {
    public Guid Id { get; }
    public abstract virtual Guid get_Id();
}
public class JetBrains.DotTrace.Common.DalInterface.LifetimedResource`1 : object {
    private T myResource;
    private LifetimeDefinition myLifetimeDefinition;
    [CompilerGeneratedAttribute]
private T <Data>k__BackingField;
    public T Data { get; }
    public LifetimedResource`1(LifetimeDefinition lifetimeDefinition, T resource);
    public void Destroy();
    [CompilerGeneratedAttribute]
public sealed virtual T get_Data();
}
[DefaultMemberAttribute("Item")]
public class JetBrains.DotTrace.Common.DalInterface.Metadata.FunctionDataStorageOverDictionary`1 : object {
    private Dictionary`2<FunctionUID, T> myStorage;
    public T Item { get; public set; }
    public sealed virtual bool TryGetValue(FunctionUID key, T& value);
    public sealed virtual T get_Item(FunctionUID key);
    public sealed virtual void set_Item(FunctionUID key, T value);
    public sealed virtual void Clear();
}
public interface JetBrains.DotTrace.Common.DalInterface.Metadata.IAsyncMethodService {
}
public interface JetBrains.DotTrace.Common.DalInterface.Metadata.IAsyncMethodService`1 {
    public IEnumerable`1<TKey> MoveNextFuids { get; }
    public abstract virtual bool IsMoveNextFuid(TKey fuid);
    public abstract virtual bool TryGetMoveNextFuid(TKey asyncFuid, TKey& moveNextFuid);
    public abstract virtual bool IsAsyncMethod(TKey fuid);
    public abstract virtual bool TryGetAsyncFuid(TKey moveNextFuid, TKey& asyncFuid);
    public abstract virtual bool ShouldBeHiddenUnderAsyncFolding(TKey fuid);
    public abstract virtual IEnumerable`1<TKey> get_MoveNextFuids();
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.DotTrace.Common.DalInterface.Metadata.IDataStorage`2 {
    public TValue Item { get; public set; }
    public abstract virtual TValue get_Item(TKey id);
    public abstract virtual void set_Item(TKey id, TValue value);
    public abstract virtual void Clear();
}
public interface JetBrains.DotTrace.Common.DalInterface.Metadata.IEnumeratedModuleDataMapper`1 {
}
public interface JetBrains.DotTrace.Common.DalInterface.Metadata.IModuleDataMapper`1 {
}
public static class JetBrains.DotTrace.Common.DalInterface.Metadata.StorageHelpers : object {
    public static void ClearNotNull(ICollection`1<T> collection);
    public static void SetValue(ChunkList`1& storage, UInt32 index, T value, T defaultValue);
    public static bool ListTryGetValue(ChunkList`1<T> storage, UInt32 index, T defaultValue, T& value);
    private static bool ListTryGetValueImpl(ChunkList`1<T> storage, UInt32 index, T defaultValue, T& value);
    public static bool TryGetValue(ChunkList`1<T> storage, UInt32 index, T defaultValue, IEqualityComparer`1<T> comparer, T& value);
}
public class JetBrains.DotTrace.Common.DalInterface.Properties.ExemptFromZoningValidation : object {
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Common.DalInterface.Properties.ExemptFromZoningValidation/<SuppressZoneValidation>d__0")]
[BuildStepAttribute]
public static IEnumerable`1<SuppressMissingRequirementValidation> SuppressZoneValidation();
}
public interface JetBrains.DotTrace.Common.DalInterface.SnapshotDataApi.Metadata.IAllFuidsContainer {
}
public interface JetBrains.DotTrace.Common.DalInterface.SnapshotDataApi.Payloads.ICallTreePayloadsSource`2 {
    public IThreadSwitch`1<CallTreePayloadsData`2<TPtr, TPayload>> PayloadsWithSubsystemFilter { get; }
    public IThreadSwitch`1<CallTreePayloadsData`2<TPtr, TPayload>> PayloadsWithoutSubsystemFilter { get; }
    public abstract virtual IThreadSwitch`1<CallTreePayloadsData`2<TPtr, TPayload>> get_PayloadsWithSubsystemFilter();
    public abstract virtual IThreadSwitch`1<CallTreePayloadsData`2<TPtr, TPayload>> get_PayloadsWithoutSubsystemFilter();
}
public interface JetBrains.DotTrace.Common.DalInterface.SnapshotDataApi.Readers.IDfsReaders`1 {
    public TOffset MinOffset { get; }
    public TOffset InvalidOffset { get; }
    public IComparer`1<TOffset> Comparer { get; }
    public SubtractOffset`1<TOffset> Subtractor { get; }
    public abstract virtual IBatchNodesReader`1<TOffset> GetNodesReaders(Lifetime lifetime);
    public abstract virtual IBatchHeadersReader`1<TOffset> GetHeadersReaders(Lifetime lifetime);
    public abstract virtual IDataMapper`2<TOffset, FunctionUID> GetIndexToFuidMap(Lifetime lifetime);
    public abstract virtual IDataMapper`2<TOffset, TOffset> GetIndexToParentMap(Lifetime lifetime);
    public abstract virtual IDataMapper`2<TOffset, bool> GetIsRootPointer();
    public abstract virtual TOffset get_MinOffset();
    public abstract virtual TOffset get_InvalidOffset();
    public abstract virtual IComparer`1<TOffset> get_Comparer();
    public abstract virtual SubtractOffset`1<TOffset> get_Subtractor();
}
public interface JetBrains.DotTrace.Common.DalInterface.SnapshotDataApi.Readers.IOffsetToIndexConverter`1 {
    public abstract virtual TOffset IndexToOffset(int index);
    public abstract virtual int OffsetToIndex(TOffset offset);
}
public interface JetBrains.DotTrace.Common.DalInterface.SnapshotDataApi.Roots.IAllRootsProvider`1 {
}
public class JetBrains.DotTrace.Common.DalInterface.SnapshotDataApi.Snapshots.AllSnapshotsPresentation : object {
    private IDictionary`2<SnapshotDataId, SnapshotPresentationData> myDict;
    public AllSnapshotsPresentation(SnapshotPresentationData singlePresentationData);
    public AllSnapshotsPresentation(SnapshotPresentationData firstPresentationData, SnapshotPresentationData secondPresentationData);
    public SnapshotPresentationData GetPresentation(SnapshotDataId id);
}
public class JetBrains.DotTrace.Common.DalInterface.SnapshotDataApi.Snapshots.CallTreeAccessDataInfo`1 : object {
    public SingleSnapshotInfo SnapshotInfo;
    public RootAccessData`1<TOffset> AccessData;
    public CallTreePath Path;
    public CallTreeAccessDataInfo`1(SingleSnapshotInfo snapshotInfo, RootAccessData`1<TOffset> accessData, CallTreePath path);
}
public interface JetBrains.DotTrace.Common.DalInterface.SnapshotDataApi.Snapshots.IAllSnapshotsPresentationProvider {
    public IDataProvider`1<AllSnapshotsPresentation> AllSnapshotsPresentation { get; }
    public abstract virtual IDataProvider`1<AllSnapshotsPresentation> get_AllSnapshotsPresentation();
}
public interface JetBrains.DotTrace.Common.DalInterface.SnapshotDataApi.Snapshots.IAllSnapshotsProviders {
    public IDataProvider`1<SingleSnapshotInfo[]> AllSnapshots { get; }
    public abstract virtual IDataProvider`1<SingleSnapshotInfo[]> get_AllSnapshots();
}
public interface JetBrains.DotTrace.Common.DalInterface.SnapshotDataApi.Snapshots.ISnapshotsInfoProviders`1 {
    public IDataProvider`1<CallTreeAccessDataInfo`1[]> AccessDataInfos { get; }
    public abstract virtual IDataProvider`1<CallTreeAccessDataInfo`1[]> get_AccessDataInfos();
}
public class JetBrains.DotTrace.Common.DalInterface.SnapshotDataApi.Snapshots.SnapshotPresentationData : object {
    public static SnapshotPresentationData ComparisonInstance;
    [NotNullAttribute]
public string Title;
    [NotNullAttribute]
public FileSystemPath IndexFile;
    public SnapshotPresentationData(string title, FileSystemPath indexFile);
    private static SnapshotPresentationData();
}
public interface JetBrains.DotTrace.Common.DalInterface.SnapshotDataApi.Threads.IThreadFuidToNameDictionary {
    public IReadOnlyDictionary`2<FunctionUID, ThreadName> Data { get; }
    public abstract virtual IReadOnlyDictionary`2<FunctionUID, ThreadName> get_Data();
}
public interface JetBrains.DotTrace.Common.DalInterface.SnapshotDataApi.Threads.IThreadsMapper`1 {
}
public class JetBrains.DotTrace.Common.DalInterface.SubsystemRangesCalculator`3 : object {
    [NotNullAttribute]
private IComparer`1<TOffset> myComparer;
    [NotNullAttribute]
private Stack`1<DissolveData<TOffset, TKey, TPayload>> myStack;
    private Func`2<DfsNode`2<TOffset, TKey>, SubsystemUsageInfoData> myGetSubsystemInfo;
    private Func`1<LifetimedResource`1<RangeList`1<TOffset>>> myRangeListCreator;
    private RangeList`1<TOffset> mySingleElementRangeList;
    private Action`2<SubsystemUsageInfoData, RangeList`1<TOffset>> myEmitSubsystemRange;
    public SubsystemRangesCalculator`3(IComparer`1<TOffset> comparer, Func`2<DfsNode`2<TOffset, TKey>, SubsystemUsageInfoData> getSubsystemInfo, Func`1<LifetimedResource`1<RangeList`1<TOffset>>> rangeListCreator, RangeList`1<TOffset> singleElementRangeList, Action`2<SubsystemUsageInfoData, RangeList`1<TOffset>> emitSubsystemRange);
    public sealed virtual void ProcessDfsNodesBatch(DfsNode`2[] nodes, TPayload[] null, SubsystemIndex[] null2, int start, int count, TOffset rootNodeOffset);
}
[ZoneDefinitionAttribute]
public interface JetBrains.DotTrace.Common.DalInterface.Zones.ISnapshotDataZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.DotTrace.Common.DalInterface.Zones.ISnapshotFeaturesZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.DotTrace.Common.DalInterface.Zones.ISnapshotSelectorZone {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
