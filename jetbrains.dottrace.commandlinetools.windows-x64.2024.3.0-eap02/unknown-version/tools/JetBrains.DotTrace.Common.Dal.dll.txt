public class JetBrains.DotTrace.Common.Dal.CallTree.Dfs.DfsNodeBottomUpPayloadCalculator`3 : object {
    [NotNullAttribute]
private IComparer`1<TOffset> myComparer;
    [NotNullAttribute]
private Func`3<DfsNode`2<TOffset, TKey>, TPayload, PayloadDisplayType> myGetDisplayType;
    [CanBeNullAttribute]
private Action`3<DfsNode`2<TOffset, TKey>, TPayload, TPayload> myHiddenPayload;
    [NotNullAttribute]
private Stack`1<DissolveData<TOffset, TKey, TPayload>> myStack;
    [NotNullAttribute]
private Action`3<DfsNode`2<TOffset, TKey>, TPayload, TPayload> myVisiblePayload;
    public DfsNodeBottomUpPayloadCalculator`3(IComparer`1<TOffset> comparer, Func`3<DfsNode`2<TOffset, TKey>, TPayload, PayloadDisplayType> getDisplayType, Action`3<DfsNode`2<TOffset, TKey>, TPayload, TPayload> visiblePayload, Action`3<DfsNode`2<TOffset, TKey>, TPayload, TPayload> hiddenPayload);
    public sealed virtual void ProcessDfsNodesBatch(DfsNode`2[] nodes, TPayload[] payloads, SubsystemIndex[] null, int start, int count, TOffset rootNodeOffset);
}
public class JetBrains.DotTrace.Common.Dal.CallTree.Dfs.FunctionPayloadsCalculator`4 : object {
    public TPayload[] BatchResults;
    private TFeatures myFeatures;
    private Stack`1<DissolveData<TOffset, TKey, TPayload, TFeatures>> myStack;
    private bool myShowDissolvedToRootPayload;
    public TPayload TotalPayload;
    public FunctionPayloadsCalculator`4(TFeatures features);
    public sealed virtual void ProcessDfsNodesBatch(DfsNode`2[] nodes, TPayload[] payloads, SubsystemIndex[] null, int start, int count, TOffset rootNodeOffset);
}
public interface JetBrains.DotTrace.Common.Dal.CallTree.Dfs.IFunctionPayloadsCalculatorFeatures`3 {
    public bool ShowDissolvedToRootPayload { get; }
    public abstract virtual bool get_ShowDissolvedToRootPayload();
    public abstract virtual bool IsVisible(TKey key);
    public abstract virtual void ExecuteAfterNodeProcessed(TPayload[] batchResults, int resultsIndex, TOffset offset, TPayload payload);
}
public class JetBrains.DotTrace.Common.Dal.CallTree.Dfs.MemoryBatchReader`2 : object {
    private IReadonlyStructuredSectionMemory`1<TData> myDataSection;
    private Func`2<TOffset, int> myOffsetToIndex;
    public MemoryBatchReader`2(IReadonlyStructuredSectionMemory`1<TData> dataSection, Func`2<TOffset, int> offsetToIndex);
    public sealed virtual int ReadBackwardOffsetsAscending(TOffset to, int count, TData[] nodes, int destEndIndex);
    public sealed virtual int ReadForwardOffsetsAscending(TOffset from, int count, TData[] nodes, int destStartIndex);
}
public class JetBrains.DotTrace.Common.Dal.CallTree.Payloads.FilterPayloadsBySubsystem`2 : object {
    [NotNullAttribute]
private IComparer`1<TOffset> myComparer;
    [NotNullAttribute]
private Stack`1<DissolveData<TOffset, TKey>> myStack;
    private Boolean[] myIncludedSubsystems;
    public DotTraceDalPayload[] BatchResults;
    public FilterPayloadsBySubsystem`2(IComparer`1<TOffset> comparer, Boolean[] includedSubsystems);
    public sealed virtual void ProcessDfsNodesBatch(DfsNode`2[] nodes, DotTraceDalPayload[] payloads, SubsystemIndex[] subsystems, int start, int count, TOffset rootNodeOffset);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.DotTrace.Common.Dal.CallTree.Subsystems.SubsystemsResolver : object {
    private SubsystemProfileData myProfileData;
    public SubsystemUsageInfoData Item { get; }
    public SubsystemsResolver(SubsystemProfileData profileData);
    public sealed virtual SubsystemUsageInfoData get_Item(MethodViewData methodView);
    private SubsystemUsageInfoData ResolveSubsystemByFuid(SubsystemEventType subsystemType);
}
public class JetBrains.DotTrace.Common.Dal.Metadata.DataStorage.InvalidModuleTypeException : Exception {
    public InvalidModuleTypeException(ModuleUID id);
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Common.Dal.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
