public class JetBrains.DotTrace.DalInterface.Common.CallTree.FlatPayloads`2 : object {
    [NotNullAttribute]
public FunctionPayloadsMap`2<TKey, TPayload> FunctionPayloads;
    [CanBeNullAttribute]
public SimpleSubsystemsCalculation`1<TPayload> SubsystemPayloads;
    public FlatPayloads`2(FunctionPayloadsMap`2<TKey, TPayload> functionPayloads, SimpleSubsystemsCalculation`1<TPayload> subsystemPayloads);
    public void Clear();
}
public interface JetBrains.DotTrace.DalInterface.Common.CallTree.IDfsAlgorithms`2 {
    public abstract virtual void CalculatePayloads(AccessData`1<TOffset> accessData, CalculationTargets targets, OwnPayloadsData`2<TOffset, TPayload> payloads, SubsystemsCache`1<TOffset> subsystemCache, IDataMapper`2<TKey, bool> systemness, TPayloadPredicates payloadPredicates, IBatchReader`2<TOffset, TKey> keyRemapping, IDataMapper`2<TKey, int> fuidToClassId, IExecutionController controller, FlatPayloads`2<TKey, TPayload> calculationResult);
    public abstract virtual Predicate`1<TOffset> SubtreeContainsPredicate(AccessData`1<TOffset> accessData, SubsystemKeysSet subsystemsKeysSet, SubsystemsCache`1<TOffset> subsystemCache, IExecutionController controller);
    public abstract virtual void ProcessRangesWithSubsystems(IEnumerable`1<TOffset> ptrs, Func`2<TKey, SubsystemUsageInfoData> getSubsystemUsageInfo, Action`2<SubsystemUsageInfoData, RangeList`1<TOffset>> subsystemRangeAction, IExecutionController controller);
    public abstract virtual void FilterPayloadsBySubsystems(IEnumerable`1<TOffset> ptrs, SubsystemKeysSet subsystemsKeysSet, SubsystemsCache`1<TOffset> subsystemCache, IBatchReader`2<TOffset, DotTraceDalPayload> ownPayloadsReader, WritePayloadsBatch`1<TOffset> filteredPayloadsWriter, IExecutionController controller);
}
public interface JetBrains.DotTrace.DalInterface.Common.CallTree.IDfsAlgorithmsProviderContainer`1 {
}
public class JetBrains.DotTrace.DalInterface.Common.CallTree.WritePayloadsBatch`1 : MulticastDelegate {
    public WritePayloadsBatch`1(object object, IntPtr method);
    public virtual void Invoke(TOffset leftMostOffset, int count, DotTraceDalPayload[] buffer, int bufferOffset);
    public virtual IAsyncResult BeginInvoke(TOffset leftMostOffset, int count, DotTraceDalPayload[] buffer, int bufferOffset, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class JetBrains.DotTrace.DalInterface.Common.DefaultValueBatchReader`2 : object {
    public sealed virtual int ReadBackwardOffsetsAscending(TOffset to, int count, TData[] nodes, int destEndIndex);
    public sealed virtual int ReadForwardOffsetsAscending(TOffset from, int count, TData[] nodes, int destStartIndex);
}
public static class JetBrains.DotTrace.DalInterface.Common.DfsNodesEx : object {
    public static void CopyInBuffer(IReadOnlyList`1<TData> readNodes, int nodeRightIndex, int readCount, TData[] nodes, int bufferOffset);
}
[ZoneDefinitionAttribute]
public interface JetBrains.DotTrace.DalInterface.Common.IDotTraceStatisticsZone {
}
public interface JetBrains.DotTrace.DalInterface.Common.IFullEnvironmentSection {
}
public class JetBrains.DotTrace.DalInterface.Common.IndexableBatchReader`2 : object {
    private Func`2<TOffset, int> myOffsetToIndex;
    private IReadOnlyList`1<TData> myData;
    public IndexableBatchReader`2(IReadOnlyList`1<TData> data, Func`2<TOffset, int> offsetToIndex);
    public sealed virtual int ReadBackwardOffsetsAscending(TOffset to, int count, TData[] nodes, int destEndIndex);
    public sealed virtual int ReadForwardOffsetsAscending(TOffset from, int count, TData[] nodes, int destStartIndex);
}
public static class JetBrains.DotTrace.DalInterface.Common.Inject.CallTreeMeasureNodesAccessor : object {
    public static ICallTreeMeasureNodesAccessor`2<TOffset, TPayload> Create(Func`2<Lifetime, ITryFillArray`2<TOffset, TPayload>> getter);
    public static ICallTreeMeasureNodesAccessor`2<TOffset, TPayload> Create(ITryFillArray`2<TOffset, TPayload> storage);
}
public interface JetBrains.DotTrace.DalInterface.Common.Inject.ICallTreeMeasureDataReader`2 {
}
public interface JetBrains.DotTrace.DalInterface.Common.Inject.ICallTreeMeasureNodesAccessor`2 {
}
public interface JetBrains.DotTrace.DalInterface.Common.ISnapshotPresentation {
    public IDataProvider`1<SnapshotPresentationData> PresentationData { get; }
    public abstract virtual IDataProvider`1<SnapshotPresentationData> get_PresentationData();
}
public interface JetBrains.DotTrace.DalInterface.Common.Metadata.IFunctionSystemness {
}
public interface JetBrains.DotTrace.DalInterface.Common.Metadata.IFunctionSystemnessDal {
}
public interface JetBrains.DotTrace.DalInterface.Common.Metadata.IMetadataManager {
    public abstract virtual Nullable`1<ModuleUID> GetModuleUID(FunctionUID fuid);
    public abstract virtual SourceViewNavigationInfo GetSourceViewNavigationInfo(FunctionUID fuid);
    public abstract virtual bool TreatMethodAsSystem(FunctionUID fuid);
}
public interface JetBrains.DotTrace.DalInterface.Common.Metadata.IMethodViewDataProvider {
}
public interface JetBrains.DotTrace.DalInterface.Common.Metadata.IMethodViewDataProviderDal {
}
public interface JetBrains.DotTrace.DalInterface.Common.Metadata.INavigationInfoProvider {
    public abstract virtual CallTreeNavigationInfo GetNavigationInfo(FunctionUID fuid);
}
public class JetBrains.DotTrace.DalInterface.Common.Metadata.MethodViewDataDal : ValueType {
    [CompilerGeneratedAttribute]
private FunctionUID <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodType <Type>k__BackingField;
    [CanBeNullAttribute]
public string Namespace;
    [CanBeNullAttribute]
public string ClassName;
    public string MethodName;
    public string AssemblyName;
    public Version AssemblyVersion;
    public bool IsSystem;
    public FunctionUID Id { get; }
    public MethodType Type { get; }
    private MethodViewDataDal(MethodType methodType, string ns, string className, string methodName, bool isSystem, FunctionUID fuid, string assemblyName, Version assemblyVersion);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public FunctionUID get_Id();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public MethodType get_Type();
    public sealed virtual bool Equals(MethodViewDataDal other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static MethodViewDataDal CreateSpecial(string shortMethodName, FunctionUID id, bool isSystem);
    public static MethodViewDataDal CreateGc(string shortMethodName, FunctionUID id, bool isSystem);
    public static MethodViewDataDal Create(string ns, string className, string shortMethodName, bool isSystemFunction, string assemblyName, Version assemblyVersion, FunctionUID id);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DalInterface.Common.Metadata.MethodViewDataEx : object {
    [ExtensionAttribute]
public static MethodViewData CreateMerged(MethodViewDataDal methodViewDataDal, Func`2<FunctionUID, FunctionUIDm> fuidConverter);
    [ExtensionAttribute]
public static MethodViewData CreateMerged(MethodViewDataDal methodViewDataDal, FunctionUIDm id);
}
public interface JetBrains.DotTrace.DalInterface.Common.Overview.ISnapshotOverview {
    public IDataProvider`1<IEnumerable`1<InformationBlock>> OverviewInfoProvider { get; }
    public abstract virtual IDataProvider`1<IEnumerable`1<InformationBlock>> get_OverviewInfoProvider();
}
public interface JetBrains.DotTrace.DalInterface.Common.Payloads.IFlatPayloadsBuilder`3 {
    public IDataProxy`1<bool> CalculateClassIdPayloads { get; }
    public abstract virtual IThreadSwitch`1<FlatPayloads`2<TKey, TPayload>> BuildPipeline(DataPipeLifetime lifetime, CalculationTargets calculationTargets, IThreadSwitch`1<OwnPayloadsData`2<TOffset, TPayload>> payloadsProvider, IThreadSwitch`1<InterruptibleLazy`1<Nullable`1<AccessData`1<TOffset>>>> accessDataProvider, bool disableKeyRemapping);
    public abstract virtual IThreadSwitch`1<FunctionPayloadsMap`2<TKey, TPayload>> BuildCalledFunctionsPayloads(DataPipeLifetime lifetime, IThreadSwitch`1<OwnPayloadsData`2<TOffset, TPayload>> payloadsProvider, IThreadSwitch`1<Nullable`1<AccessData`1<TOffset>>> accessDataProvider);
    public abstract virtual IDataProxy`1<bool> get_CalculateClassIdPayloads();
}
public class JetBrains.DotTrace.DalInterface.Common.PlainList.PlainListNodeExtendedData`1 : ValueType {
    public List`1<PlainListNodeData`1<TPayload>> CalledFunctionsList;
    public PayloadType PayloadType;
    public PlainListNodeData`1<TPayload> Node;
    public CallTreePathState CallTreePathState;
    public PlainListNodeExtendedData`1(PlainListNodeData`1<TPayload> node, List`1<PlainListNodeData`1<TPayload>> calledFunctionsList, PayloadType payloadType, CallTreePathState callTreePathState);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.DalInterface.Common.SnapshotProcessingInput : object {
    [CompilerGeneratedAttribute]
private FileSystemPath <OriginalInputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessingMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessingFlags <Flags>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ArtefactName>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public FileSystemPath OriginalInputFile { get; public set; }
    public ProcessingMode Mode { get; public set; }
    public ProcessingFlags Flags { get; public set; }
    [NullableAttribute("2")]
public string ArtefactName { get; public set; }
    public SnapshotProcessingInput(FileSystemPath OriginalInputFile, ProcessingMode Mode, ProcessingFlags Flags, string ArtefactName);
    [CompilerGeneratedAttribute]
protected SnapshotProcessingInput(SnapshotProcessingInput original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_OriginalInputFile();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_OriginalInputFile(FileSystemPath value);
    [CompilerGeneratedAttribute]
public ProcessingMode get_Mode();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Mode(ProcessingMode value);
    [CompilerGeneratedAttribute]
public ProcessingFlags get_Flags();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Flags(ProcessingFlags value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ArtefactName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ArtefactName(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SnapshotProcessingInput left, SnapshotProcessingInput right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SnapshotProcessingInput left, SnapshotProcessingInput right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(SnapshotProcessingInput other);
    [CompilerGeneratedAttribute]
public virtual SnapshotProcessingInput <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(FileSystemPath& OriginalInputFile, ProcessingMode& Mode, ProcessingFlags& Flags, String& ArtefactName);
}
public interface JetBrains.DotTrace.DalInterface.Common.Subsystems.ISimpleSubsystemCalculationResults`1 {
    public TPayload HiddenPayload { get; }
    public IDictionary`2<SubsystemIndex, TPayload> Data { get; }
    public abstract virtual TPayload get_HiddenPayload();
    public abstract virtual IDictionary`2<SubsystemIndex, TPayload> get_Data();
}
public interface JetBrains.DotTrace.DalInterface.Common.Subsystems.ISimpleSubsystemMeasureResult`1 {
    public SubsystemKey SubsystemId { get; }
    public Lazy`1<ISubsystemMeasureResult[]> Children { get; }
    public Lazy`1<KeyValuePair`2[]> TopSignatures { get; }
    public TPayload Sum { get; }
    [CanBeNullAttribute]
public string DisplayName { get; }
    public string GroupName { get; }
    public abstract virtual SubsystemKey get_SubsystemId();
    public abstract virtual Lazy`1<ISubsystemMeasureResult[]> get_Children();
    public abstract virtual Lazy`1<KeyValuePair`2[]> get_TopSignatures();
    public abstract virtual TPayload get_Sum();
    public abstract virtual string get_DisplayName();
    public abstract virtual string get_GroupName();
}
public interface JetBrains.DotTrace.DalInterface.Common.Subsystems.ISubsystemSettingsProvider {
    public IDataProvider`1<ISubsystemProfile> CurrentProfileAndUpdates { get; }
    public abstract virtual IDataProvider`1<ISubsystemProfile> get_CurrentProfileAndUpdates();
}
public class JetBrains.DotTrace.DalInterface.Common.Subsystems.SimpleSubsystemMeasureResultData`1 : object {
    public TPayload TotalPayloadExclHidden;
    public ISimpleSubsystemMeasureResult`1[] Results;
}
public class JetBrains.DotTrace.DalInterface.Common.Subsystems.SimpleSubsystemsCalculation`1 : object {
    public SimpleSubsystemMeasureResultData`1<TPayload> MeasureResultData;
    public PayloadType PayloadType;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[LocalizableAttribute("False")]
public class JetBrains.DotTrace.DalInterface.Common.Utils.ChromeTrace : object {
    private StringBuilder myBuilder;
    public void AddBeginAsyncEvent(string name, string id, int tid, string ts, Pair`2[] args);
    public void AddEndAsyncEvent(string name, string id, int tid, string ts, Pair`2[] args);
    [LocalizableAttribute("False")]
private void AddEvent(string ph, string name, string id, int tid, string ts, Pair`2[] args);
    [LocalizableAttribute("False")]
public void AddEvent(string ph, string name, int pid, string ts, Pair`2[] args);
    private static void AppendArgsIfAny(StringBuilder builder, Pair`2[] args);
    [LocalizableAttribute("False")]
public void WriteToFile(TextWriter textWriter);
    public static string TickToMsString(long tick);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DalInterface.Common.Utils.MemoryUsageLowerBound : object {
    [ExtensionAttribute]
public static long MemoryUsage(ChunkList`1<T> list);
    [ExtensionAttribute]
public static long MemoryUsage(ChunkList`1<T> list, Tag`1<T> tag);
    [ExtensionAttribute]
public static long MemoryUsage(List`1<T> list);
    [ExtensionAttribute]
public static long MemoryUsage(Dictionary`2<T, V> dic, int sizeOfKey);
    [ExtensionAttribute]
public static long MemoryUsage(Dictionary`2<T, V> dic);
    [ExtensionAttribute]
public static long MemoryUsage(Dictionary`2<T, V> dic, Tag`1<V> tag);
    [ExtensionAttribute]
public static long MemoryUsage(Dictionary`2<T, List`1<V>> dic);
    [ExtensionAttribute]
public static long MemoryUsage(Dictionary`2<T, ChunkList`1<V>> dic);
    [ExtensionAttribute]
public static long MemoryUsage(HashSet`1<T> set);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.DalInterface.Common.Utils.PerfStatCookie : object {
    public static PerfStatCookie Root;
    [NullableAttribute("2")]
public string Label;
    public long StartTick;
    public long EndTick;
    public int StartThreadId;
    public int EndThreadId;
    public long BytesProcessed;
    public long ItemsProcessed;
    public long ItemsModified;
    public long MemoryRequired;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<PerfStatCookie> myOnDispose;
    public ImmutableList`1<PerfStatCookie> Children;
    private static double ourTickFrequency;
    public long ElapsedMilliseconds { get; }
    public PerfStatCookie(string label, Action`1<PerfStatCookie> onDispose);
    public PerfStatCookie(PerfStatCookie parent, string label, Action`1<PerfStatCookie> onDispose);
    private PerfStatCookie(PerfStatCookie parent, string label, long startTick, long endTick, int threadId);
    private static PerfStatCookie();
    public static void Reset();
    public void AddChild(string label, long startTick, long endTick);
    [NullableContextAttribute("2")]
private void AddToParent(PerfStatCookie parent);
    public sealed virtual void Dispose();
    private long GetElapsedDateTimeTicks();
    public long get_ElapsedMilliseconds();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[LocalizableAttribute("False")]
public static class JetBrains.DotTrace.DalInterface.Common.Utils.PerfStatsSummary : object {
    private static String[] ourKeys;
    private static string TableFormat;
    private static PerfStatsSummary();
    public static ChromeTrace PerfStatsToChromeTraceJson(PerfStatCookie perfStatCookie, ImmutableList`1<ProcMemSample> memorySamples);
    private static String[] GetValues(PerfStatCookie perfStat);
    public static string PrintPerfStatsTable(PerfStatCookie perfStatCookie);
    [ExtensionAttribute]
public static void PrintTableToLog(PerfStatCookie this, Action`1<string> logger);
    private static string ItemsString(long items);
    private static string ItemsPerSecondString(long items, long timeMs);
    private static string MBPerSecondString(long bytes, long timeMs);
    private static string MBString(long bytes);
    private static string ItemsPerSecond(long items, long timeMs);
    private static string MBPerSecond(long bytes, long timeMs);
    private static string MB(long bytes);
    [CompilerGeneratedAttribute]
internal static void <PrintPerfStatsTable>g__DumpStat|4_0(int level, PerfStatCookie perfStat, StringBuilder output);
}
public class JetBrains.DotTrace.DalInterface.Common.Utils.ProcMemSample : ValueType {
    [CompilerGeneratedAttribute]
private long <Timestamp>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Pair`2[] <Counters>k__BackingField;
    public long Timestamp { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Pair`2[] Counters { get; public set; }
    public ProcMemSample(long Timestamp, Pair`2[] Counters);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public long get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(long value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Pair`2[] get_Counters();
    [CompilerGeneratedAttribute]
public void set_Counters(Pair`2[] value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ProcMemSample left, ProcMemSample right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ProcMemSample left, ProcMemSample right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ProcMemSample other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(Int64& Timestamp, Pair`2[]& Counters);
}
public enum JetBrains.DotTrace.DalInterface.Common.VersionCheckVerdict : Enum {
    public int value__;
    public static VersionCheckVerdict NewerSnapshot;
    public static VersionCheckVerdict OlderSnapshot;
    public static VersionCheckVerdict CompatibleSnapshot;
    public static VersionCheckVerdict MissingMandatorySection;
}
public class JetBrains.DotTrace.DalInterface.Performance.CallTree.CallTreeHeaderFull : ValueType {
    public int GroupId;
    public byte CallTreeOffsetSize;
    public byte InjectOffsetSize;
    public byte TimeOffsetSize;
    public int SectionHeaderSize;
    public long SectionSize;
    public ulong FullFuidMask;
    public bool IsNegative;
    public UInt32 SectionId;
    public ulong FuidIdentityMask;
    [PureAttribute]
public int RecordSize();
    public CallTreeSectionOffset ZeroOffset();
    public CallTreeSectionOffset LastOffset();
}
[FlagsAttribute]
public enum JetBrains.DotTrace.DalInterface.Performance.CallTree.CallTreeNodeFlags : Enum {
    public byte value__;
    public static CallTreeNodeFlags MeasurePartly;
    public static CallTreeNodeFlags Unmanaged;
    public static CallTreeNodeFlags RecursiveRoot;
    public static CallTreeNodeFlags Recursive;
}
public class JetBrains.DotTrace.DalInterface.Performance.CallTree.CallTreeSectionNode : ValueType {
    public static CallTreeSectionNode Invalid;
    public CallTreeSectionOffset Offset;
    public FunctionId FuId;
    public CallTreeSectionOffset ParentOffset;
    public CallTreeSectionOffset LeftOffset;
    public long RawInjectOffset;
    public ulong OwnTime;
    public ulong TotalTime;
    public UInt32 CallCount;
    public CallTreeNodeFlags Flags;
    public CallTreeSectionOffset SiblingOffset;
    public bool HasChildren { get; }
    public bool IsMeasurePartly { get; }
    public bool IsUnmanaged { get; }
    public bool IsRecursiveRoot { get; }
    public bool IsRecursive { get; }
    private static CallTreeSectionNode();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool get_HasChildren();
    public bool get_IsMeasurePartly();
    public bool get_IsUnmanaged();
    public bool get_IsRecursiveRoot();
    public bool get_IsRecursive();
    public static bool op_Equality(CallTreeSectionNode first, CallTreeSectionNode second);
    public static bool op_Inequality(CallTreeSectionNode first, CallTreeSectionNode second);
    [LocalizableAttribute("False")]
public virtual string ToString();
}
public class JetBrains.DotTrace.DalInterface.Performance.CallTree.CallTreeSectionNodeComparer : object {
    public static CallTreeSectionNodeComparer Instance;
    private static CallTreeSectionNodeComparer();
    public sealed virtual int Compare(CallTreeSectionNode x, CallTreeSectionNode y);
    public sealed virtual bool Equals(CallTreeSectionNode x, CallTreeSectionNode y);
    public sealed virtual int GetHashCode(CallTreeSectionNode obj);
}
public class JetBrains.DotTrace.DalInterface.Performance.CallTree.CallTreeSectionNodeSimple : ValueType {
    public long Offset;
    public FunctionId FuId;
    public long ParentOffset;
    public long LeftOffset;
    public ulong OwnTime;
}
public class JetBrains.DotTrace.DalInterface.Performance.CallTree.CallTreeSectionOffset : ValueType {
    public static CallTreeSectionOffset Invalid;
    public int GroupId;
    public long myOffset;
    public bool IsValid { get; }
    public CallTreeSectionOffset(long offset, int key);
    private static CallTreeSectionOffset();
    public bool get_IsValid();
    public sealed virtual int CompareTo(CallTreeSectionOffset other);
    public sealed virtual bool Equals(CallTreeSectionOffset obj);
    [LocalizableAttribute("False")]
public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void Seek(Stream stream);
    public void Write(BinaryWriter writer);
    public void Write(XmlElement element);
    public static CallTreeSectionOffset Read(BinaryReader reader);
    public static CallTreeSectionOffset Read(XmlElement element);
    public static bool op_Equality(CallTreeSectionOffset left, CallTreeSectionOffset right);
    public static bool op_Inequality(CallTreeSectionOffset left, CallTreeSectionOffset right);
    public static bool op_LessThan(CallTreeSectionOffset left, CallTreeSectionOffset right);
    public static bool op_GreaterThan(CallTreeSectionOffset left, CallTreeSectionOffset right);
    public static bool op_LessThanOrEqual(CallTreeSectionOffset left, CallTreeSectionOffset right);
    public static bool op_GreaterThanOrEqual(CallTreeSectionOffset left, CallTreeSectionOffset right);
    public static CallTreeSectionOffset Construct(long offset, int section);
    public static CallTreeSectionOffset Construct(string representation);
}
public interface JetBrains.DotTrace.DalInterface.Performance.CallTree.ICallTreeAndIndexesSnapshotAccessor {
    public int MaxGroupIndex { get; }
    public int MinGroupIndex { get; }
    public CallTreeSectionOffset MinOffset { get; }
    public abstract virtual void GetSectionStreamByGroupId(int group, Func`2& readerAccessor, CallTreeHeaderFull& header);
    public abstract virtual void GetHeaderByGroupIdAndFuid(int group, FunctionUID fuid, Nullable`1& single, Nullable`1& header, Func`2& readerAccessor);
    public abstract virtual int GroupRecordSize(int groupId);
    public abstract virtual int get_MaxGroupIndex();
    public abstract virtual int get_MinGroupIndex();
    public abstract virtual CallTreeSectionOffset get_MinOffset();
}
[FlagsAttribute]
public enum JetBrains.DotTrace.DalInterface.Performance.CallTree.ThreadFlags : Enum {
    public byte value__;
    public static ThreadFlags HasMessageQueue;
    public static ThreadFlags MainThread;
    public static ThreadFlags FinalizerThread;
}
public class JetBrains.DotTrace.DalInterface.Performance.CallTreeHeader.CallTreeSectionHeader : ValueType {
    public CallTreeHeaderFull HeaderFull;
    public UInt32 Id;
    public ThreadFlags Flags;
    public UInt32 ThreadCount;
    public CallTreeSectionOffset Root;
    public string ThreadName;
    public string GroupName;
}
[FlagsAttribute]
public enum JetBrains.DotTrace.DalInterface.Performance.CallTreeHeader.Flags : Enum {
    public byte value__;
    public static Flags NoRecursion;
    public static Flags NoChildren;
}
public class JetBrains.DotTrace.DalInterface.Performance.CallTreeHeader.HeaderData : ValueType {
    public byte CallTreeOffsetSize;
}
public class JetBrains.DotTrace.DalInterface.Performance.CallTreeHeader.HeaderIndexData : ValueType {
    public IDictionary`2<FunctionId, HeaderIndexEntryData> HeaderEntries;
}
public class JetBrains.DotTrace.DalInterface.Performance.CallTreeHeader.HeaderIndexEntryData : ValueType {
    public SectionOffset`1<IHeaderDataSection> OffsetInHeaderSection;
    public ulong OwnTimeSum;
    public ulong TotalTimeSum;
    public ulong CallCountSum;
    public CallTreeSectionOffset MinCtOffset;
    public CallTreeSectionOffset MaxCtOffset;
    public Flags Flags;
}
public class JetBrains.DotTrace.DalInterface.Performance.CallTreeHeader.HeaderIndexOptData : ValueType {
    public IDictionary`2<FunctionId, CallTreeSectionOffset> HeaderEntries;
}
public class JetBrains.DotTrace.DalInterface.Performance.CallTreeHeader.HeaderNodeRef : ValueType {
    public CallTreeSectionOffset CallTreeOffset;
    public CallTreeSectionOffset ParentCallTreeOffset;
    private Flags myFlags;
    public bool IsRecursiveRoot { get; }
    public bool IsRecursive { get; }
    public HeaderNodeRef(CallTreeSectionOffset offset, CallTreeSectionOffset parentOffset, byte flags);
    public bool get_IsRecursiveRoot();
    public bool get_IsRecursive();
    public virtual int GetHashCode();
}
public interface JetBrains.DotTrace.DalInterface.Performance.CallTreeHeader.IHeaderDataNode {
    public FunctionId MethodId { get; }
    public bool IsNoRecursion { get; }
    public bool HasNoChildren { get; }
    public UInt32 NodesCount { get; }
    [NotNullAttribute]
public IEnumerable`1<HeaderNodeRef> Nodes { get; }
    public abstract virtual FunctionId get_MethodId();
    public abstract virtual bool get_IsNoRecursion();
    public abstract virtual bool get_HasNoChildren();
    public abstract virtual UInt32 get_NodesCount();
    public abstract virtual IEnumerable`1<HeaderNodeRef> get_Nodes();
    public abstract virtual UInt32 GetNodesCount(CallTreeSectionOffset left, CallTreeSectionOffset right);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<HeaderNodeRef> GetNodes(CallTreeSectionOffset left, CallTreeSectionOffset right);
    public abstract virtual int ReadNodeRefsFast(int startIndexInHeader, HeaderNodeRef[] buffer);
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.DotTrace.DalInterface.Performance.CallTreeHeader.IHeaderDataSection {
    public long Size { get; }
    [NotNullAttribute]
public IHeaderDataNode Item { get; }
    public abstract virtual long get_Size();
    public abstract virtual IHeaderDataNode get_Item(FunctionId methodId, SectionOffset`1<IHeaderDataSection> offset, Flags flags);
}
public class JetBrains.DotTrace.DalInterface.Performance.Environment.PerformanceEnvironmentSectionData : ValueType {
    public ulong TimeResolution;
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DalInterface.Performance.Fuids.FuidConverter : object {
    [ExtensionAttribute]
public static FunctionUIDm ToTimelineFuidMerged(FunctionId fid);
    [ExtensionAttribute]
public static FunctionId ToDotTraceFid(FunctionUIDm fuid);
    [ExtensionAttribute]
public static FunctionUID ToTimelineFuid(FunctionId fid, ISnapshotMasksComponent snapshotMasksComponent);
    [ExtensionAttribute]
public static FunctionId ToDotTraceFid(FunctionUID fuid, ISnapshotMasksComponent snapshotMasksComponent);
}
public interface JetBrains.DotTrace.DalInterface.Performance.Fuids.ISnapshotMasksComponent {
    public int GroupMask { get; }
    public ulong IdentityMask { get; }
    public bool IsNegative { get; }
    public abstract virtual int get_GroupMask();
    public abstract virtual ulong get_IdentityMask();
    public abstract virtual bool get_IsNegative();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DalInterface.Performance.Fuids.SnapshotMasksHelpers : object {
    public static int SecondSnapshotGroupMask;
    public static ulong SecondSnapshotFuidMask;
    [ExtensionAttribute]
public static bool IsCurrentSnapshotFuid(ISnapshotMasksComponent masksComponent, FunctionUID fuid);
    [ExtensionAttribute]
public static ulong GetFullFuidMask(ISnapshotMasksComponent masksComponent);
}
public static class JetBrains.DotTrace.DalInterface.Performance.Fuids.WellKnownFunctionIds : object {
    public static IEnumerable`1<FunctionId> List;
    private static WellKnownFunctionIds();
}
public class JetBrains.DotTrace.DalInterface.Performance.Header.FunctionHeaderData : ValueType {
    public int GroupId;
    public UInt32 NodesCount;
    public long StartingOffset;
    public int CallTreeOffsetSize;
    public int FlagsSize;
}
public interface JetBrains.DotTrace.DalInterface.Performance.Inject.IInjectInfoSnapshotAccessor {
    public abstract virtual void GetSectionStreamByGroupId(int group, Func`2& readerAccessor, InjectHeader& header);
}
public class JetBrains.DotTrace.DalInterface.Performance.Inject.InjectHeader : ValueType {
    public int GroupId;
    public byte InjectTimeSize;
    public bool IsNegative;
    public int RecordSize();
}
[IsReadOnlyAttribute]
public class JetBrains.DotTrace.DalInterface.Performance.Inject.InjectInfoSectionOffset : ValueType {
    public static InjectInfoSectionOffset Invalid;
    public int GroupId;
    public long myOffset;
    public bool IsValid { get; }
    public InjectInfoSectionOffset(int groupId, long offset);
    private static InjectInfoSectionOffset();
    public bool get_IsValid();
    [LocalizableAttribute("False")]
public virtual string ToString();
    public sealed virtual int CompareTo(InjectInfoSectionOffset other);
    public sealed virtual bool Equals(InjectInfoSectionOffset other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DefaultMemberAttribute("Item")]
public class JetBrains.DotTrace.DalInterface.Performance.ModulePath.ModulePathSectionData : object {
    private Dictionary`2<SectionIndex`1<IMetadataSection>, String[]> myModulesPaths;
    public int ModulesNumber { get; }
    public IEnumerable`1<KeyValuePair`2<SectionIndex`1<IMetadataSection>, String[]>> All { get; }
    public IEnumerable`1<string> ModulesEnumerablePlain { get; }
    public String[] Item { get; }
    public ModulePathSectionData(Dictionary`2<SectionIndex`1<IMetadataSection>, String[]> modulesPaths);
    public sealed virtual void Dispose();
    public sealed virtual int get_ModulesNumber();
    public sealed virtual IEnumerable`1<KeyValuePair`2<SectionIndex`1<IMetadataSection>, String[]>> get_All();
    public sealed virtual IEnumerable`1<string> get_ModulesEnumerablePlain();
    public sealed virtual String[] get_Item(SectionIndex`1<IMetadataSection> metaDataIndex);
    public sealed virtual bool TryGetValue(SectionIndex`1<IMetadataSection> metaDataIndex, String[]& pathes);
}
public interface JetBrains.DotTrace.DalInterface.Performance.Payload.IPerformancePayloadsDataReader {
}
public interface JetBrains.DotTrace.DalInterface.Performance.SectionAccessInterfaces.IGroupSection`1 {
    public int SectionsCount { get; }
    public abstract virtual int get_SectionsCount();
}
public interface JetBrains.DotTrace.DalInterface.Performance.SectionAccessInterfaces.ISectionStorage`1 {
    public abstract virtual T Get();
}
public interface JetBrains.DotTrace.DalInterface.SnapshotDataApi.Metadata.IAdvancedMethodInfoProviderAccessor {
}
public interface JetBrains.DotTrace.DalInterface.SnapshotDataApi.Metadata.INavigationInfoProviderAccessor {
}
public class JetBrains.DotTrace.DalInterface.SnapshotDataApi.Performance.SnapshotConfiguration : object {
    public bool IsSamplingSnapshot;
    public string SnapshotHeader;
    public SnapshotConfiguration(bool isSamplingSnapshot, string snapshotHeader);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DalInterface.Timeline.CallTree.DfsNodePtrRangeListEx : object {
    [ExtensionAttribute]
public static IEnumerable`1<DfsNodePtr> GenerateEnumerable(RangeList`1<DfsNodePtr> rangeList);
    public static IEnumerable`1<DfsNodePtr> GenerateFromPairReversed(Pair`2<DfsNodePtr, DfsNodePtr> pair);
}
[IsReadOnlyAttribute]
public class JetBrains.DotTrace.DalInterface.Timeline.CallTree.NodeTruncatedInfo : ValueType {
    private static ushort UnderTruncatedRootMask;
    private ushort myValue;
    public bool UnderTruncatedRoot { get; }
    public ushort GluedFramesCount { get; }
    private NodeTruncatedInfo(bool underTruncatedRoot, UInt32 gluedFrames);
    public bool get_UnderTruncatedRoot();
    public ushort get_GluedFramesCount();
    private NodeTruncatedInfo CreateRoot();
    public NodeTruncatedInfo CreateChild();
    private NodeTruncatedInfo CreateChild(UInt32 gluedFrames);
    public static NodeTruncatedInfo CreateChild(NodeTruncatedInfo parentInfo, FunctionUID fuid);
}
[FlagsAttribute]
public enum JetBrains.DotTrace.DalInterface.Timeline.CallTree.StaticNodeFlags : Enum {
    public byte value__;
    public static StaticNodeFlags None;
    public static StaticNodeFlags UnderABadRoot;
    public static StaticNodeFlags PathFromRootContainsManaged;
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DalInterface.Timeline.CallTree.StaticNodeFlagsEx : object {
    [ExtensionAttribute]
public static bool IsSet(StaticNodeFlags flags, StaticNodeFlags flagToTest);
    [ExtensionAttribute]
public static bool IsClear(StaticNodeFlags flags, StaticNodeFlags flagToTest);
    public static StaticNodeFlags CreateChild(StaticNodeFlags parentFlags, bool underABadRoot, bool isManaged);
}
public static class JetBrains.DotTrace.DalInterface.Timeline.CallTreeConstants : object {
    public static int NodeSize;
    public static int KeySize;
    public static int HeaderSize;
    public static CompactTreeKeySize KeySizeFlag { get; }
    public static CompactTreeKeySize get_KeySizeFlag();
    public static UInt32 CalculateTreeNodeCount(long sectionSize);
}
public class JetBrains.DotTrace.DalInterface.Timeline.CallTreeData : object {
    public ChunkList`1<CompactTreeNode> Nodes;
    public ChunkList`1<UInt32> Parents;
    public ChunkList`1<StaticNodeFlags> NodeFlags;
    public ChunkList`1<NodeTruncatedInfo> NodeTruncationInfos;
    public CallTreeData(int capacity);
    private CallTreeData(ChunkList`1<CompactTreeNode> nodes, ChunkList`1<UInt32> parents, ChunkList`1<StaticNodeFlags> nodeFlags, ChunkList`1<NodeTruncatedInfo> nodeTruncationInfos);
    public CallTreeData Clone();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DalInterface.Timeline.CallTreeDataEx : object {
    [ExtensionAttribute]
public static long MemoryUsage(CallTreeData callTreeData);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DalInterface.Timeline.CallTreeRoutines : object {
    [ExtensionAttribute]
private static bool HasFuid(ICompactTreeReader callTreeReader, CallStackPtr callStack, FunctionUID fuid);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.DalInterface.Timeline.CallTreeRoutines/<TraverseTreeNode>d__2")]
[ExtensionAttribute]
private static IEnumerable`1<PlusOrMinus`1<CallStackPtr>> TraverseTreeNode(ICompactTreeReader callTreeReader, CallStackPtr root, Func`2<CallStackPtr, TraverseAction> filter);
    [ExtensionAttribute]
private static IEnumerable`1<PlusOrMinus`1<CallStackPtr>> TraverseTreeNodes(ICompactTreeReader callTreeReader, IEnumerable`1<CallStackPtr> rootSet, Func`2<CallStackPtr, TraverseAction> filter);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.DalInterface.Timeline.CallTreeRoutines/<GetAllAccessPointersForFuidLazy>d__4")]
[ExtensionAttribute]
private static IEnumerable`1<PlusOrMinus`1<CallStackPtr>> GetAllAccessPointersForFuidLazy(ICompactTreeReader callTreeReader, FunctionUID targetFuid, IEnumerable`1<CallStackPtr> rootSet, HashSet`1<CallStackPtr> minuses);
    [ExtensionAttribute]
private static void GetAllAccessPointersForFuid(ICompactTreeReader callTreeReader, FunctionUID targetFuid, IEnumerable`1<CallStackPtr> rootSet, HashSet`1<CallStackPtr> inputMinuses, ICollection`1<CallStackPtr> resultRoots, HashSet`1<CallStackPtr> recursiveEntries, bool isTopLevel);
    private static IEnumerable`1<PlusOrMinus`1<CallStackPtr>> FilterFuidFromDescendantsOnly(ICompactTreeReader callTreeReader, FunctionUID targetFuid, IEnumerable`1<CallStackPtr> rootSet, HashSet`1<CallStackPtr> minuses);
    private static IEnumerable`1<PlusOrMinus`1<CallStackPtr>> FilterFuidFromList(ICompactTreeReader callTreeReader, FunctionUID targetFuid, IEnumerable`1<CallStackPtr> rootSet);
    [ExtensionAttribute]
public static IEnumerable`1<PlusOrMinus`1<CallStackPtr>> GetAllAccessPointersForFuid(ICompactTreeReader callTreeReader, FunctionUID targetFuid, AccessData`1<CallStackPtr> accessData);
    [ExtensionAttribute]
public static void GetAllAccessPointersForFuid(ICompactTreeReader callTreeReader, FunctionUID targetFuid, AccessData`1<CallStackPtr> accessData, IEnumerable`1& resultCallStacks, HashSet`1& recursivePtrs);
    [ExtensionAttribute]
public static IEnumerable`1<PlusOrMinus`1<CallStackPtr>> GetTopLevelDescendantsForFuid(ICompactTreeReader callTreeReader, FunctionUID targetFuid, AccessData`1<CallStackPtr> accessData);
    [ExtensionAttribute]
public static IEnumerable`1<PlusOrMinus`1<CallStackPtr>> GetTopLevelMinusesDescendants(ICompactTreeReader callTreeReader, AccessData`1<CallStackPtr> accessData);
    [ExtensionAttribute]
public static IEnumerable`1<CallStackPtr> GetTopPointers(ICompactTreeReader callTreeReader, IEnumerable`1<CallStackPtr> input);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.DalInterface.Timeline.CallTreeRoutines/<FilterMinuses>d__13")]
[ExtensionAttribute]
public static IEnumerable`1<PlusOrMinus`1<CallStackPtr>> FilterMinuses(IEnumerable`1<CallStackPtr> input, IMinuses`1<CallStackPtr> minuses);
    [ExtensionAttribute]
public static bool IsRootPointer(ICompactTreeReader reader, CallStackPtr callStack);
    [CanBeNullAttribute]
public static HashSet`1<CallStackPtr> GetMinuses(IMinuses`1<CallStackPtr> minusPtrs);
    [ExtensionAttribute]
public static IEnumerable`1<PlusOrMinus`1<CallStackPtr>> GetTopLevelElements(ICompactTreeReader callTreeReader, AccessData`1<CallStackPtr> accessData, Func`2<CallStackPtr, bool> func);
    public static IMinuses`1<CallStackPtr> CreateMinusesContainer(HashSet`1<CallStackPtr> minuses);
}
public class JetBrains.DotTrace.DalInterface.Timeline.CommonSections : object {
    [CompilerGeneratedAttribute]
private IEnvironmentSection <EnvironmentSection>k__BackingField;
    [CompilerGeneratedAttribute]
private IMetadataSection <ProfilerMetadataSection>k__BackingField;
    [CompilerGeneratedAttribute]
private IModulePathSection <ProfilerModulePathSection>k__BackingField;
    [CompilerGeneratedAttribute]
private IFuidToMetadataIdSection <ProfilerFuidToMetadataIdSection>k__BackingField;
    public IEnvironmentSection EnvironmentSection { get; }
    public IMetadataSection ProfilerMetadataSection { get; }
    public IModulePathSection ProfilerModulePathSection { get; }
    public IFuidToMetadataIdSection ProfilerFuidToMetadataIdSection { get; }
    public CommonSections(IMetadataSection metadata, IModulePathSection modulePaths, IEnvironmentSection environmentSection, IFuidToMetadataIdSection profilerFuidToMetadataIdSection);
    [CompilerGeneratedAttribute]
public IEnvironmentSection get_EnvironmentSection();
    [CompilerGeneratedAttribute]
public IMetadataSection get_ProfilerMetadataSection();
    [CompilerGeneratedAttribute]
public IModulePathSection get_ProfilerModulePathSection();
    [CompilerGeneratedAttribute]
public IFuidToMetadataIdSection get_ProfilerFuidToMetadataIdSection();
}
public class JetBrains.DotTrace.DalInterface.Timeline.ConvertedSectionAttribute : SectionAttribute {
    public ConvertedSectionAttribute(bool isMandatory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.DalInterface.Timeline.ConvertedSnapshot : object {
    [CompilerGeneratedAttribute]
private FileSystemPath <IndexFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessingStats <Stats>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public FileSystemPath IndexFile { get; public set; }
    public ProcessingStats Stats { get; public set; }
    public ConvertedSnapshot(FileSystemPath IndexFile, ProcessingStats Stats);
    [CompilerGeneratedAttribute]
protected ConvertedSnapshot(ConvertedSnapshot original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public FileSystemPath get_IndexFile();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IndexFile(FileSystemPath value);
    [CompilerGeneratedAttribute]
public ProcessingStats get_Stats();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Stats(ProcessingStats value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ConvertedSnapshot left, ConvertedSnapshot right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ConvertedSnapshot left, ConvertedSnapshot right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ConvertedSnapshot other);
    [CompilerGeneratedAttribute]
public virtual ConvertedSnapshot <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(FileSystemPath& IndexFile, ProcessingStats& Stats);
}
public class JetBrains.DotTrace.DalInterface.Timeline.DataOffset : ValueType {
    public static DataOffset Invalid;
    private ulong myValue;
    public DataOffset(ulong value);
    public DataOffset(long value);
    private static DataOffset();
    public static ulong op_Explicit(DataOffset offset);
    public static long op_Explicit(DataOffset offset);
    public sealed virtual bool Equals(DataOffset other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(DataOffset left, DataOffset right);
    public static bool op_Inequality(DataOffset left, DataOffset right);
    public virtual string ToString();
}
public class JetBrains.DotTrace.DalInterface.Timeline.EventCollector.EventCollectionInfo : ValueType {
    public IDictionary`2<KnownEventTypes, int> EventStatistics;
    public EventCollectionInfo(IDictionary`2<KnownEventTypes, int> eventStatistics);
}
public class JetBrains.DotTrace.DalInterface.Timeline.EventCollector.EventNode : ValueType {
    public KnownEventTypes EventType;
    public ModelRange Range;
    public ThreadId Thread;
    public int Offset;
    public EventNode(KnownEventTypes eventType, ModelRange range, ThreadId thread, int offset);
}
public class JetBrains.DotTrace.DalInterface.Timeline.EventCollector.EventNodesWithData : object {
    public ChunkList`1<EventNode> Nodes;
    public ChunkList`1<ulong> Data;
    public ChunkList`1<StringId> Strings;
    public EventNodesWithData(ChunkList`1<EventNode> nodes, ChunkList`1<ulong> data, ChunkList`1<StringId> strings);
}
public class JetBrains.DotTrace.DalInterface.Timeline.EventLayerDescriptor : ValueType {
    public KnownEventTypes EventType;
    public int LayerId;
    public EventLayerDescriptor(KnownEventTypes eventType);
}
public class JetBrains.DotTrace.DalInterface.Timeline.FuidSettingVisitor : object {
    private ICompactTreeReader myCompactTreeReader;
    private bool myIgnoreShift;
    public FuidSettingVisitor(ICompactTreeReader compactTreeReader, bool ignoreShift);
    public sealed virtual VisitResult StartNodeProcessing(UInt32 ptr, IKeyContainingContext`1<FunctionUID> context);
    public sealed virtual void EndNodeProcessing(UInt32 ptr, IKeyContainingContext`1<FunctionUID> context);
    public sealed virtual void AllNodesProcessed();
    public static FuidSettingVisitor Create(ICompactTreeReader reader, bool ignoreShift);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DalInterface.Timeline.FunctionInfoEx : object {
    [ExtensionAttribute]
public static bool IsModuleOnly(FunctionInfo info);
}
public interface JetBrains.DotTrace.DalInterface.Timeline.ICachedSectionAccessor`1 {
}
public interface JetBrains.DotTrace.DalInterface.Timeline.IConvertedTimelineSnapshot {
    public ISnapshotStorage Storage { get; }
    public FileSystemPath IndexFile { get; }
    public IEventTreesSection EventTreesSection { get; }
    public IStorageEnvironmentSection StorageEnvironmentSection { get; }
    public abstract virtual ISnapshotStorage get_Storage();
    public abstract virtual FileSystemPath get_IndexFile();
    public abstract virtual IEventTreesSection get_EventTreesSection();
    public abstract virtual IStorageEnvironmentSection get_StorageEnvironmentSection();
}
public interface JetBrains.DotTrace.DalInterface.Timeline.IFixedStructureProvider`1 {
}
public static class JetBrains.DotTrace.DalInterface.Timeline.IlToNativeMapReader : object {
    public static Dictionary`2<FunctionUID, IlToNativeMapRecord> Read(Stream section);
}
public class JetBrains.DotTrace.DalInterface.Timeline.IlToNativeMapRecord : ValueType {
    public Int32[] IlOffsets;
    public Int32[] NativeOffsets;
    public IlToNativeMapRecord(Int32[] ilOffsets, Int32[] nativeOffsets);
}
public class JetBrains.DotTrace.DalInterface.Timeline.IlToNativeMapWriter : object {
    private BinaryWriter mySection;
    private HashSet`1<FunctionUID> myWrittenMaps;
    public IlToNativeMapWriter(Stream section);
    public void Write(FunctionUID fuid, UInt32[] ilOffsets, UInt32[] nativeOffsets);
    public sealed virtual void Dispose();
}
public interface JetBrains.DotTrace.DalInterface.Timeline.IProcessDescriptorsSection {
    public int Count { get; }
    public abstract virtual int get_Count();
}
public interface JetBrains.DotTrace.DalInterface.Timeline.ISectionAccessor`1 {
    public bool HasSection { get; }
    public abstract virtual bool get_HasSection();
}
public interface JetBrains.DotTrace.DalInterface.Timeline.ISnapshotStatistics {
    public abstract virtual void RegisterOpenSnapshotReason(FileSystemPath originalInputFile, SnapshotOpenReason reason);
    public abstract virtual void RegisterInputFileType(FileSystemPath originalInputFile, TimelineInputFileType format);
}
public interface JetBrains.DotTrace.DalInterface.Timeline.ITestCompactCallTreeAccessor {
    public abstract virtual ICompactTreeReader GetReader(Lifetime lifetime);
    public abstract virtual int GetNodesCount();
}
public interface JetBrains.DotTrace.DalInterface.Timeline.ITimelineDfsExtras {
    public abstract virtual IEnumerable`1<FunctionUID> GetAllFuids(Lifetime lifetime);
}
public interface JetBrains.DotTrace.DalInterface.Timeline.ITimelineSnapshotProcessor`1 {
    public abstract virtual ProcessingContext`1<TOutput> Process(Lifetime lifetime, SnapshotProcessingInput input);
}
public interface JetBrains.DotTrace.DalInterface.Timeline.ITimelineSnapshotStorageReader {
    public abstract virtual IConvertedTimelineSnapshot Open(Lifetime lifetime, FileSystemPath snapshotPath);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DalInterface.Timeline.NamespaceTreeNodeEx : object {
    [ExtensionAttribute]
public static FunctionUIDm GetFuid(INamespaceTreeNode item);
    [ExtensionAttribute]
public static FunctionUIDm GetFuid(MethodViewData viewData);
}
public class JetBrains.DotTrace.DalInterface.Timeline.ObsoleteSectionAttribute : SectionAttribute {
    public ObsoleteSectionAttribute(string message);
}
public class JetBrains.DotTrace.DalInterface.Timeline.ProcessDescriptor : ValueType {
    public UInt32 ProcessId;
    public DataOffset AdditionalDataOffset;
    public ulong StartTick;
    public ulong EndTick;
    public UInt32 ExitCode;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.DalInterface.Timeline.Processing.CaughtException : object {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private UserArea <UserArea>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public Exception Exception { get; public set; }
    public UserArea UserArea { get; public set; }
    public CaughtException(Exception Exception, UserArea UserArea);
    [CompilerGeneratedAttribute]
protected CaughtException(CaughtException original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public UserArea get_UserArea();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UserArea(UserArea value);
    [LocalizableAttribute("False")]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(CaughtException left, CaughtException right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(CaughtException left, CaughtException right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(CaughtException other);
    [CompilerGeneratedAttribute]
public virtual CaughtException <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Exception& Exception, UserArea& UserArea);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DalInterface.Timeline.Processing.ChunkListEx : object {
    [ConditionalAttribute("JET_MODE_ASSERT")]
public static void AssertSorted(ChunkList`1<T> list, bool assertUnique);
    [ConditionalAttribute("JET_MODE_ASSERT")]
public static void AssertSorted(ChunkList`1<T> list, OverloadTag tag);
    [ConditionalAttribute("JET_MODE_ASSERT")]
public static void AssertSorted(List`1<T> list);
    [ConditionalAttribute("JET_MODE_ASSERT")]
public static void AssertSortedComparable(ChunkList`1<T> list);
    [ExtensionAttribute]
public static ChunkList`1<T> MergeSortedLists(ChunkList`1<T> leftList, ChunkList`1<T> rightList, Int64& itemsProcessed);
    public static void MergeSortedLists(ChunkList`1<T> leftList, ChunkList`1<T> rightList, ChunkList`1<T> result);
    public static void MergeIntervals(ChunkList`1<TL> leftList, ChunkList`1<TR> rightList, Action`2<TL, TR> zip);
    public static void ProcessPointsWithinIntervalsContext(ChunkList`1<T> points, ChunkList`1<V> intervals, Func`2<V, VCtx> onIntervalStart, Action`2<T, VCtx> zip);
    public static ChunkList`1<T> MergeSortedLists(Int64& itemsProcessed, ChunkList`1[] sortedLists);
    [ExtensionAttribute]
public static List`1<T> MergeSortedLists(List`1<T> leftList, List`1<T> rightList, Int64& itemsProcessed);
    public static void MergeSortedLists(List`1<T> leftList, List`1<T> rightList, List`1<T> result);
    public static bool SkipSortedToTick(ChunkList`1<TValue> list, Int32& currentIndex, ulong tick);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ChunkList`1<T> Clone(ChunkList`1<T> source);
    public static ChunkList`1<T> NarrowChunkListToStartAndEnd(ChunkList`1<T> original, T startEvent, bool haveEndThreadEvent, T endEvent, Int32& counter);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void CopyToStream(ChunkList`1<T> chunkList, Stream outputStream, PerfStatCookie perf);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static long CopyToStream(ChunkList`1<T> data, Stream outputStream);
}
public static class JetBrains.DotTrace.DalInterface.Timeline.Processing.ChunksEx : object {
    [ConditionalAttribute("JET_MODE_ASSERT")]
public static void AssertSorted(Chunk`1<T> head);
    public static void Sort(Chunks`1<T> chunks, Comparison`1<T> comparer);
    public static Chunks`1<T> MergeSortedLists(Int64& itemsProcessed, Chunks`1[] sortedLists);
    public static Chunks`1<T> NarrowListByTick(Chunks`1<T> original, ulong startTick, ulong endTick, Func`2<Nullable`1<T>, Nullable`1<T>> createStartEvent, Func`2<Nullable`1<T>, Nullable`1<T>> createEndEvent);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.DalInterface.Timeline.Processing.Error : object {
    [CompilerGeneratedAttribute]
private ErrorCase <Case>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public ErrorCase Case { get; public set; }
    public string Message { get; public set; }
    public Error(ErrorCase Case, string Message);
    [CompilerGeneratedAttribute]
protected Error(Error original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ErrorCase get_Case();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Case(ErrorCase value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Message(string value);
    public sealed virtual int CompareTo(Error other);
    public sealed virtual int CompareTo(object obj);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(Error left, Error right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(Error left, Error right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public virtual bool Equals(Error other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual Error <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(ErrorCase& Case, String& Message);
}
public enum JetBrains.DotTrace.DalInterface.Timeline.Processing.ErrorCase : Enum {
    public int value__;
    public static ErrorCase None;
    public static ErrorCase SnapshotIsCompatibleWith241;
    public static ErrorCase SnapshotIsTooNew;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.DalInterface.Timeline.Processing.Info : object {
    [CompilerGeneratedAttribute]
private InfoCase <Case>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public InfoCase Case { get; public set; }
    public string Message { get; public set; }
    public Info(InfoCase Case, string Message);
    [CompilerGeneratedAttribute]
protected Info(Info original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public InfoCase get_Case();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Case(InfoCase value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Message(string value);
    public sealed virtual int CompareTo(Info other);
    public sealed virtual int CompareTo(object obj);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(Info left, Info right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(Info left, Info right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public virtual bool Equals(Info other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual Info <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(InfoCase& Case, String& Message);
}
public enum JetBrains.DotTrace.DalInterface.Timeline.Processing.InfoCase : Enum {
    public int value__;
    public static InfoCase None;
}
public interface JetBrains.DotTrace.DalInterface.Timeline.Processing.IProcessingError {
    public ExceptionText ExceptionText { get; }
    public ProcessingErrorKind Kind { get; }
    public ProcessingStats Stats { get; }
    public abstract virtual ExceptionText get_ExceptionText();
    public abstract virtual ProcessingErrorKind get_Kind();
    public abstract virtual ProcessingStats get_Stats();
}
public interface JetBrains.DotTrace.DalInterface.Timeline.Processing.IProcessingLogger {
    public abstract virtual void Send(Message message);
}
public interface JetBrains.DotTrace.DalInterface.Timeline.Processing.IWithTick {
    public ulong Tick { get; public set; }
    public abstract virtual ulong get_Tick();
    public abstract virtual void set_Tick(ulong value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.DalInterface.Timeline.Processing.Message : object {
    [CompilerGeneratedAttribute]
private MessageType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Warning <WarningMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private CaughtException <CaughtException>k__BackingField;
    [CompilerGeneratedAttribute]
private Info <InfoMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private Error <ErrorMessage>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public MessageType Type { get; public set; }
    public Warning WarningMessage { get; public set; }
    public CaughtException CaughtException { get; public set; }
    public Info InfoMessage { get; public set; }
    public Error ErrorMessage { get; public set; }
    public Message(MessageType Type, Warning WarningMessage, CaughtException CaughtException, Info InfoMessage, Error ErrorMessage);
    [CompilerGeneratedAttribute]
protected Message(Message original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public MessageType get_Type();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Type(MessageType value);
    [CompilerGeneratedAttribute]
public Warning get_WarningMessage();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_WarningMessage(Warning value);
    [CompilerGeneratedAttribute]
public CaughtException get_CaughtException();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CaughtException(CaughtException value);
    [CompilerGeneratedAttribute]
public Info get_InfoMessage();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_InfoMessage(Info value);
    [CompilerGeneratedAttribute]
public Error get_ErrorMessage();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ErrorMessage(Error value);
    [NullableContextAttribute("1")]
public static Message Warning(WarningCase warningCase, string localizedMessage, IEnumerable`1<Pair`2<string, string>> data);
    [NullableContextAttribute("1")]
public static Message Info(string localizedMessage, InfoCase infoCase);
    [NullableContextAttribute("1")]
public static Message Error(string localizedMessage, ErrorCase errorCase);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(Message left, Message right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(Message left, Message right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public virtual bool Equals(Message other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual Message <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(MessageType& Type, Warning& WarningMessage, CaughtException& CaughtException, Info& InfoMessage, Error& ErrorMessage);
}
public enum JetBrains.DotTrace.DalInterface.Timeline.Processing.MessageType : Enum {
    public int value__;
    public static MessageType Info;
    public static MessageType Warning;
    public static MessageType CaughtException;
    public static MessageType Error;
}
public class JetBrains.DotTrace.DalInterface.Timeline.Processing.OverloadTag : object {
}
public class JetBrains.DotTrace.DalInterface.Timeline.Processing.ProcessingContext`1 : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<string> <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private ProgressProvider <Progress>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <EndedWithAnError>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<ResultOrError`1<TOutput>> <ResultProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IListEvents`1<Message> <Messages>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public IDataProvider`1<string> Header { get; public set; }
    public ProgressProvider Progress { get; public set; }
    public IDataProvider`1<bool> EndedWithAnError { get; public set; }
    public IDataProvider`1<ResultOrError`1<TOutput>> ResultProvider { get; public set; }
    public IListEvents`1<Message> Messages { get; public set; }
    public ProcessingContext`1(IDataProvider`1<string> Header, ProgressProvider Progress, IDataProvider`1<bool> EndedWithAnError, IDataProvider`1<ResultOrError`1<TOutput>> ResultProvider, IListEvents`1<Message> Messages);
    [CompilerGeneratedAttribute]
protected ProcessingContext`1(ProcessingContext`1<TOutput> original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IDataProvider`1<string> get_Header();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Header(IDataProvider`1<string> value);
    [CompilerGeneratedAttribute]
public ProgressProvider get_Progress();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Progress(ProgressProvider value);
    [CompilerGeneratedAttribute]
public IDataProvider`1<bool> get_EndedWithAnError();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_EndedWithAnError(IDataProvider`1<bool> value);
    [CompilerGeneratedAttribute]
public IDataProvider`1<ResultOrError`1<TOutput>> get_ResultProvider();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ResultProvider(IDataProvider`1<ResultOrError`1<TOutput>> value);
    [CompilerGeneratedAttribute]
public IListEvents`1<Message> get_Messages();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Messages(IListEvents`1<Message> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ProcessingContext`1<TOutput> left, ProcessingContext`1<TOutput> right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ProcessingContext`1<TOutput> left, ProcessingContext`1<TOutput> right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public virtual bool Equals(ProcessingContext`1<TOutput> other);
    [CompilerGeneratedAttribute]
public virtual ProcessingContext`1<TOutput> <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(IDataProvider`1& Header, ProgressProvider& Progress, IDataProvider`1& EndedWithAnError, IDataProvider`1& ResultProvider, IListEvents`1& Messages);
}
public enum JetBrains.DotTrace.DalInterface.Timeline.Processing.ProcessingErrorKind : Enum {
    public int value__;
    public static ProcessingErrorKind Cancelled;
    public static ProcessingErrorKind MultiFileStorageReading;
    public static ProcessingErrorKind KnownProcessingError;
    public static ProcessingErrorKind SnapshotIsCompatibleWith241;
    public static ProcessingErrorKind SnapshotIsTooNew;
    public static ProcessingErrorKind Other;
}
public class JetBrains.DotTrace.DalInterface.Timeline.Processing.ProcessingStepInfo : ValueType {
    [CompilerGeneratedAttribute]
private string <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private ProgressProvider <Progress>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ProgressWeightFactor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <EndedWithAnError>k__BackingField;
    public string Header { get; public set; }
    public ProgressProvider Progress { get; public set; }
    public double ProgressWeightFactor { get; public set; }
    public IDataProvider`1<bool> EndedWithAnError { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Header();
    [CompilerGeneratedAttribute]
public void set_Header(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ProgressProvider get_Progress();
    [CompilerGeneratedAttribute]
public void set_Progress(ProgressProvider value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_ProgressWeightFactor();
    [CompilerGeneratedAttribute]
public void set_ProgressWeightFactor(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IDataProvider`1<bool> get_EndedWithAnError();
    [CompilerGeneratedAttribute]
public void set_EndedWithAnError(IDataProvider`1<bool> value);
}
public enum JetBrains.DotTrace.DalInterface.Timeline.Processing.UserArea : Enum {
    public int value__;
    public static UserArea HTTP;
    public static UserArea SQL;
    public static UserArea KernelCallStacks;
    public static UserArea CallStacksProcessing;
    public static UserArea ThreadTypes;
    public static UserArea ThreadStates;
    public static UserArea GC;
    public static UserArea DebugOutput;
    public static UserArea Exceptions;
    public static UserArea FileIO;
    public static UserArea LineInformation;
    public static UserArea JIT;
    public static UserArea ActivatedByFilter;
    public static UserArea NativeAllocations;
    public static UserArea ManagedAllocations;
    public static UserArea Subsystems;
    public static UserArea ThreadNames;
    public static UserArea AsyncAwaitAndTasks;
    public static UserArea UIFreeze;
    public static UserArea ManagedEvents;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.DalInterface.Timeline.Processing.Warning : object {
    [CompilerGeneratedAttribute]
private WarningCase <Case>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalizedMessage>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<Pair`2<string, string>> <Data>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public WarningCase Case { get; public set; }
    public string LocalizedMessage { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<Pair`2<string, string>> Data { get; public set; }
    public Warning(WarningCase Case, string LocalizedMessage, IEnumerable`1<Pair`2<string, string>> Data);
    [CompilerGeneratedAttribute]
protected Warning(Warning original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public WarningCase get_Case();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Case(WarningCase value);
    [CompilerGeneratedAttribute]
public string get_LocalizedMessage();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LocalizedMessage(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Pair`2<string, string>> get_Data();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Data(IEnumerable`1<Pair`2<string, string>> value);
    public sealed virtual int CompareTo(Warning other);
    public sealed virtual int CompareTo(object obj);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(Warning left, Warning right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(Warning left, Warning right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public virtual bool Equals(Warning other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual Warning <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(WarningCase& Case, String& LocalizedMessage, IEnumerable`1& Data);
}
public enum JetBrains.DotTrace.DalInterface.Timeline.Processing.WarningCase : Enum {
    public int value__;
    public static WarningCase NoKernelSampling;
    public static WarningCase MainThreadNotDetected;
    public static WarningCase ProviderWarning;
    public static WarningCase ProviderError;
    public static WarningCase SessionInterrupted;
    public static WarningCase LostEventsDetected;
    public static WarningCase ProviderIsInUse;
    public static WarningCase NoRundownEvents;
    public static WarningCase IgnoredThreadLifetimesBecauseOfThreadIdReuse;
    public static WarningCase ErroneousFileIO;
    public static WarningCase TooManyTplEvents;
}
[FlagsAttribute]
public enum JetBrains.DotTrace.DalInterface.Timeline.ProcessingFlags : Enum {
    public int value__;
    public static ProcessingFlags None;
    public static ProcessingFlags WriteKernelSamplingInternal;
}
public enum JetBrains.DotTrace.DalInterface.Timeline.ProcessingKind : Enum {
    public int value__;
    public static ProcessingKind NoProcessing;
    public static ProcessingKind ManifestBased;
    public static ProcessingKind ProtoBufBased;
}
public enum JetBrains.DotTrace.DalInterface.Timeline.ProcessingMode : Enum {
    public int value__;
    public static ProcessingMode InitialProcessing;
    public static ProcessingMode Reprocessing;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.DalInterface.Timeline.ProcessingStats : object {
    public TimeSpan UnpackingTime;
    public bool ProcessingHappened;
    public TimeSpan ProcessingTime;
    public Guid SnapshotId;
    public Guid ProcessId;
    public long TotalSize;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
protected ProcessingStats(ProcessingStats original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ProcessingStats left, ProcessingStats right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ProcessingStats left, ProcessingStats right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ProcessingStats other);
    [CompilerGeneratedAttribute]
public virtual ProcessingStats <Clone>$();
}
public class JetBrains.DotTrace.DalInterface.Timeline.RawSectionAttribute : SectionAttribute {
    [CompilerGeneratedAttribute]
private ushort <LowestSupportedVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <HighestSupportedVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessingKind <RequiredProcessingKind>k__BackingField;
    public ushort LowestSupportedVersion { get; }
    public ushort HighestSupportedVersion { get; }
    public ProcessingKind RequiredProcessingKind { get; }
    public RawSectionAttribute(ushort lowestSupportedVersion, ushort highestSupportedVersion, ProcessingKind requiredProcessingKind, bool isMandatory);
    [CompilerGeneratedAttribute]
public ushort get_LowestSupportedVersion();
    [CompilerGeneratedAttribute]
public ushort get_HighestSupportedVersion();
    [CompilerGeneratedAttribute]
public ProcessingKind get_RequiredProcessingKind();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DalInterface.Timeline.ReadonlyDataSectionEx : object {
    [ExtensionAttribute]
public static IReadonlyDataSection ToReadonlyDataSection(SnapshotStorageSection sss);
}
public class JetBrains.DotTrace.DalInterface.Timeline.ResultOrError`1 : Union`2<T, IProcessingError> {
    public ResultOrError`1(T item);
    public ResultOrError`1(IProcessingError item);
    public bool IsError();
}
public class JetBrains.DotTrace.DalInterface.Timeline.SectionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <IsMandatory>k__BackingField;
    public bool IsMandatory { get; }
    public SectionAttribute(bool isMandatory);
    [CompilerGeneratedAttribute]
public bool get_IsMandatory();
}
public interface JetBrains.DotTrace.DalInterface.Timeline.Sections.ICallTreeParentsSection {
    public IRandomAccessStore`1<UInt32> Memory { get; }
    public abstract virtual IRandomAccessStore`1<UInt32> get_Memory();
}
public interface JetBrains.DotTrace.DalInterface.Timeline.Sections.ICallTreeSection {
    public IRandomAccessStore`1<CompactTreeNode> RandomAccess { get; }
    public ILinearAccessStore`1<CompactTreeNode> LinearAccess { get; }
    public UInt32 Version { get; }
    public abstract virtual IRandomAccessStore`1<CompactTreeNode> get_RandomAccess();
    public abstract virtual ILinearAccessStore`1<CompactTreeNode> get_LinearAccess();
    public abstract virtual UInt32 get_Version();
}
public interface JetBrains.DotTrace.DalInterface.Timeline.Sections.IEventsDataSection {
}
public interface JetBrains.DotTrace.DalInterface.Timeline.Sections.IEventTreesSection {
    public abstract virtual BinaryReader GetRootSection(Lifetime lifetime);
    public abstract virtual BinaryReader GetLayerSection(Lifetime lifetime, int layerId);
}
public interface JetBrains.DotTrace.DalInterface.Timeline.Sections.IIlToNativeMapSection {
    public IReadOnlyDictionary`2<FunctionUID, IlToNativeMapRecord> Data { get; }
    public abstract virtual IReadOnlyDictionary`2<FunctionUID, IlToNativeMapRecord> get_Data();
}
public interface JetBrains.DotTrace.DalInterface.Timeline.Sections.IProcessDataSection {
}
public interface JetBrains.DotTrace.DalInterface.Timeline.Sections.ISectionContainer {
    public IReadonlyDataSection Raw { get; }
    public abstract virtual IReadonlyDataSection get_Raw();
}
public interface JetBrains.DotTrace.DalInterface.Timeline.Sections.IStorageEnvironmentSection {
    public Guid StorageGuid { get; }
    public abstract virtual Guid get_StorageGuid();
}
public class JetBrains.DotTrace.DalInterface.Timeline.Sections.ProcessDataEx : ValueType {
    public string ImageName;
    public string ImageFullPath;
    public string CommandLine;
}
public class JetBrains.DotTrace.DalInterface.Timeline.SectionsBag : object {
    private Func`3<Lifetime, TimelineSectionTypes, IReadonlyDataSection> myGetReadOnly;
    private Func`3<Lifetime, TimelineSectionTypes, IReadonlyDataSection> myTryGetReadOnly;
    [CompilerGeneratedAttribute]
private IMetadataSection <ProfilerMetadataSection>k__BackingField;
    [CompilerGeneratedAttribute]
private IModulePathSection <ProfilerModulePathSection>k__BackingField;
    [CompilerGeneratedAttribute]
private IFuidToMetadataIdSection <ProfilerFuidToMetadataIdSection>k__BackingField;
    [CanBeNullAttribute]
public IMetadataSection ProfilerMetadataSection { get; }
    [CanBeNullAttribute]
public IModulePathSection ProfilerModulePathSection { get; }
    [CanBeNullAttribute]
public IFuidToMetadataIdSection ProfilerFuidToMetadataIdSection { get; }
    public SectionsBag(Func`3<Lifetime, TimelineSectionTypes, IReadonlyDataSection> getReadOnly, Func`3<Lifetime, TimelineSectionTypes, IReadonlyDataSection> tryGetReadOnly, CommonSections commonSections);
    [CompilerGeneratedAttribute]
public IMetadataSection get_ProfilerMetadataSection();
    [CompilerGeneratedAttribute]
public IModulePathSection get_ProfilerModulePathSection();
    [CompilerGeneratedAttribute]
public IFuidToMetadataIdSection get_ProfilerFuidToMetadataIdSection();
    [NotNullAttribute]
public IReadonlyDataSection GetReadonly(Lifetime lifetime, TimelineSectionTypes type);
    [CanBeNullAttribute]
public IReadonlyDataSection TryGetReadonly(Lifetime lifetime, TimelineSectionTypes type);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DalInterface.Timeline.SnapshotStorageEx : object {
    [ExtensionAttribute]
public static IReadonlyDataSection GetSectionReadonly(ISnapshotStorage storage, Lifetime lifetime, TimelineSectionTypes type);
    [ExtensionAttribute]
public static bool TryGetSectionReadonly(ISnapshotStorage storage, ushort type, IReadonlyDataSection& section);
}
public class JetBrains.DotTrace.DalInterface.Timeline.SssToReadonlyAdapter : object {
    private SnapshotStorageSection mySss;
    public UInt32 Type { get; }
    public UInt32 Version { get; }
    public long Size { get; }
    public SssToReadonlyAdapter(SnapshotStorageSection sss);
    public sealed virtual UInt32 get_Type();
    public sealed virtual UInt32 get_Version();
    public sealed virtual long get_Size();
    public sealed virtual BinaryReader GetReader(Lifetime lifetime);
    public sealed virtual ILinearAccessStore`1<T> GetStructuredMemory(Lifetime lifetime);
}
public class JetBrains.DotTrace.DalInterface.Timeline.Statistics.OpenSnapshotInfo : object {
    [CompilerGeneratedAttribute]
private IComponentContainer <Container>k__BackingField;
    [CompilerGeneratedAttribute]
private SnapshotOpenReason <OpenReason>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimelineInputFileType> <InputFileType>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalSize>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public IComponentContainer Container { get; public set; }
    public SnapshotOpenReason OpenReason { get; public set; }
    public Nullable`1<TimelineInputFileType> InputFileType { get; public set; }
    public long TotalSize { get; public set; }
    public OpenSnapshotInfo(IComponentContainer Container, SnapshotOpenReason OpenReason, Nullable`1<TimelineInputFileType> InputFileType, long TotalSize);
    [CompilerGeneratedAttribute]
protected OpenSnapshotInfo(OpenSnapshotInfo original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IComponentContainer get_Container();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Container(IComponentContainer value);
    [CompilerGeneratedAttribute]
public SnapshotOpenReason get_OpenReason();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_OpenReason(SnapshotOpenReason value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimelineInputFileType> get_InputFileType();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_InputFileType(Nullable`1<TimelineInputFileType> value);
    [CompilerGeneratedAttribute]
public long get_TotalSize();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TotalSize(long value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(OpenSnapshotInfo left, OpenSnapshotInfo right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(OpenSnapshotInfo left, OpenSnapshotInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(OpenSnapshotInfo other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual OpenSnapshotInfo <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(IComponentContainer& Container, SnapshotOpenReason& OpenReason, Nullable`1& InputFileType, Int64& TotalSize);
}
public class JetBrains.DotTrace.DalInterface.Timeline.Statistics.SnapshotProcessingError : object {
    [CompilerGeneratedAttribute]
private ProcessingStats <Stats>k__BackingField;
    [CompilerGeneratedAttribute]
private IProcessingError <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private SnapshotOpenReason <OpenReason>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimelineInputFileType> <InputFileType>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public ProcessingStats Stats { get; public set; }
    public IProcessingError Error { get; public set; }
    public SnapshotOpenReason OpenReason { get; public set; }
    public Nullable`1<TimelineInputFileType> InputFileType { get; public set; }
    public SnapshotProcessingError(ProcessingStats Stats, IProcessingError Error, SnapshotOpenReason OpenReason, Nullable`1<TimelineInputFileType> InputFileType);
    [CompilerGeneratedAttribute]
protected SnapshotProcessingError(SnapshotProcessingError original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ProcessingStats get_Stats();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Stats(ProcessingStats value);
    [CompilerGeneratedAttribute]
public IProcessingError get_Error();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Error(IProcessingError value);
    [CompilerGeneratedAttribute]
public SnapshotOpenReason get_OpenReason();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_OpenReason(SnapshotOpenReason value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimelineInputFileType> get_InputFileType();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_InputFileType(Nullable`1<TimelineInputFileType> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SnapshotProcessingError left, SnapshotProcessingError right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SnapshotProcessingError left, SnapshotProcessingError right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(SnapshotProcessingError other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual SnapshotProcessingError <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(ProcessingStats& Stats, IProcessingError& Error, SnapshotOpenReason& OpenReason, Nullable`1& InputFileType);
}
public class JetBrains.DotTrace.DalInterface.Timeline.Statistics.SnapshotProcessingInfo : object {
    [CompilerGeneratedAttribute]
private ProcessingStats <Stats>k__BackingField;
    [CompilerGeneratedAttribute]
private SnapshotOpenReason <OpenReason>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimelineInputFileType> <InputFileType>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public ProcessingStats Stats { get; public set; }
    public SnapshotOpenReason OpenReason { get; public set; }
    public Nullable`1<TimelineInputFileType> InputFileType { get; public set; }
    public SnapshotProcessingInfo(ProcessingStats Stats, SnapshotOpenReason OpenReason, Nullable`1<TimelineInputFileType> InputFileType);
    [CompilerGeneratedAttribute]
protected SnapshotProcessingInfo(SnapshotProcessingInfo original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ProcessingStats get_Stats();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Stats(ProcessingStats value);
    [CompilerGeneratedAttribute]
public SnapshotOpenReason get_OpenReason();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_OpenReason(SnapshotOpenReason value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimelineInputFileType> get_InputFileType();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_InputFileType(Nullable`1<TimelineInputFileType> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SnapshotProcessingInfo left, SnapshotProcessingInfo right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SnapshotProcessingInfo left, SnapshotProcessingInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(SnapshotProcessingInfo other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual SnapshotProcessingInfo <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(ProcessingStats& Stats, SnapshotOpenReason& OpenReason, Nullable`1& InputFileType);
}
public static class JetBrains.DotTrace.DalInterface.Timeline.StatUtils : object {
    public static string Ratio(int part, int total, string format);
    public static string Ratio(long part, long total, string format);
    public static string Ratio(T part, T total, Func`3<T, T, double> percentCalculator, string format);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DalInterface.Timeline.TimelineCompactTreeReaderEx : object {
    [ExtensionAttribute]
public static FunctionUID ReadKey(ICompactTreeReader reader, CallStackPtr callStack);
    [ExtensionAttribute]
public static CallStackPtr GetParent(ICompactTreeReader reader, CallStackPtr callStack);
    [ExtensionAttribute]
public static IEnumerable`1<CallStackPtr> GetChildren(ICompactTreeReader reader, CallStackPtr callStack);
}
public static class JetBrains.DotTrace.DalInterface.Timeline.TimelineConvertedSnapshotVersion : object {
    public static int Version;
}
public enum JetBrains.DotTrace.DalInterface.Timeline.TimelineInputFileType : Enum {
    public int value__;
    public static TimelineInputFileType Invalid;
    public static TimelineInputFileType RawMultiFile;
    public static TimelineInputFileType NetTrace;
    public static TimelineInputFileType ZipArchive;
    public static TimelineInputFileType ConvertedMMS;
    public static TimelineInputFileType RawSingleFile;
}
public enum JetBrains.DotTrace.DalInterface.Timeline.TimelineSectionTypes : Enum {
    public ushort value__;
    [RawSectionAttribute("0", "9", "0", "False")]
public static TimelineSectionTypes Environment;
    [RawSectionAttribute("0", "0", "0", "False")]
public static TimelineSectionTypes PostEnvironment;
    [RawSectionAttribute("0", "2", "0", "False")]
public static TimelineSectionTypes Metadata;
    [RawSectionAttribute("0", "0", "0", "False")]
public static TimelineSectionTypes FuidToMetadataId;
    [RawSectionAttribute("0", "0", "0", "False")]
public static TimelineSectionTypes ModulePath;
    [RawSectionAttribute("0", "0", "2", "False")]
public static TimelineSectionTypes KernelEvents;
    [RawSectionAttribute("0", "0", "2", "False")]
public static TimelineSectionTypes NetEvents;
    [RawSectionAttribute("0", "0", "2", "False")]
public static TimelineSectionTypes CoreRundownEvents;
    [RawSectionAttribute("0", "2", "2", "False")]
public static TimelineSectionTypes ServiceEvents;
    [RawSectionAttribute("0", "0", "2", "False")]
public static TimelineSectionTypes KernelRundownEvents;
    [RawSectionAttribute("16", "16", "1", "False")]
public static TimelineSectionTypes DiagnosticSourceEvents;
    [RawSectionAttribute("16", "16", "1", "False")]
public static TimelineSectionTypes NetCoreSql;
    [RawSectionAttribute("16", "16", "1", "False")]
public static TimelineSectionTypes KestrelWebServer;
    [RawSectionAttribute("0", "0", "1", "False")]
public static TimelineSectionTypes DiagnosticSourceParsedEvents;
    [RawSectionAttribute("16", "16", "1", "False")]
public static TimelineSectionTypes KernelDiskIo;
    [RawSectionAttribute("16", "16", "1", "False")]
public static TimelineSectionTypes KernelFileIo;
    [RawSectionAttribute("16", "16", "1", "False")]
public static TimelineSectionTypes KernelImage;
    [RawSectionAttribute("16", "16", "1", "False")]
public static TimelineSectionTypes KernelPerfInfo;
    [RawSectionAttribute("16", "16", "1", "False")]
public static TimelineSectionTypes KernelProcess;
    [RawSectionAttribute("16", "16", "1", "False")]
public static TimelineSectionTypes KernelThread;
    [RawSectionAttribute("16", "16", "1", "False")]
public static TimelineSectionTypes KernelCallStacks;
    [ObsoleteSectionAttribute("")]
public static TimelineSectionTypes WpfEvents;
    [RawSectionAttribute("16", "16", "1", "False")]
public static TimelineSectionTypes InputDelays;
    [ObsoleteSectionAttribute("")]
public static TimelineSectionTypes CustomEvents;
    [ObsoleteSectionAttribute("")]
public static TimelineSectionTypes TimelineApiEvents;
    [ObsoleteSectionAttribute("")]
public static TimelineSectionTypes MemoryTrace;
    [RawSectionAttribute("16", "16", "1", "False")]
public static TimelineSectionTypes NetFrameworkSql;
    [RawSectionAttribute("16", "16", "1", "False")]
public static TimelineSectionTypes OdbcEvents;
    [RawSectionAttribute("16", "16", "1", "False")]
public static TimelineSectionTypes HttpServiceEvents;
    [RawSectionAttribute("16", "16", "1", "False")]
public static TimelineSectionTypes HeapTraceEvents;
    [RawSectionAttribute("16", "16", "1", "False")]
public static TimelineSectionTypes DebugOutputEvents;
    [RawSectionAttribute("16", "17", "1", "False")]
public static TimelineSectionTypes TplEvents;
    [RawSectionAttribute("16", "17", "1", "False")]
public static TimelineSectionTypes MonoEvents;
    [RawSectionAttribute("0", "0", "1", "False")]
public static TimelineSectionTypes NetRundownProvider;
    [RawSectionAttribute("0", "0", "2", "False")]
public static TimelineSectionTypes NetCallStacks;
    [RawSectionAttribute("0", "0", "2", "False")]
public static TimelineSectionTypes ProtobufKernelCallStacks;
    [RawSectionAttribute("0", "0", "2", "False")]
public static TimelineSectionTypes CoreCallStacks;
    [RawSectionAttribute("0", "1", "0", "False")]
public static TimelineSectionTypes ETWCoreFunction;
    [RawSectionAttribute("0", "0", "0", "False")]
public static TimelineSectionTypes ETWManagedFunction;
    [RawSectionAttribute("0", "1", "0", "False")]
public static TimelineSectionTypes ETWNativeFunction;
    [RawSectionAttribute("0", "0", "0", "False")]
public static TimelineSectionTypes ETWManagedModule;
    [RawSectionAttribute("0", "1", "0", "False")]
public static TimelineSectionTypes ETWNativeModule;
    [RawSectionAttribute("0", "0", "0", "False")]
public static TimelineSectionTypes FrameAddress;
    [RawSectionAttribute("0", "0", "0", "False")]
public static TimelineSectionTypes ETWManagedFunctionData;
    [RawSectionAttribute("0", "0", "0", "False")]
public static TimelineSectionTypes ETWNativeFunctionData;
    [RawSectionAttribute("0", "1", "0", "False")]
public static TimelineSectionTypes ETWModuleData;
    [RawSectionAttribute("0", "0", "0", "False")]
public static TimelineSectionTypes ETWCoreModule;
    [ObsoleteSectionAttribute("")]
public static TimelineSectionTypes SectionHeaders;
    [ObsoleteSectionAttribute("Not used anymore, thread root events are in the service section")]
public static TimelineSectionTypes ThreadRoots;
    [RawSectionAttribute("0", "16", "0", "False")]
public static TimelineSectionTypes CallTree;
    [RawSectionAttribute("0", "0", "0", "False")]
public static TimelineSectionTypes EventPipeSequencePoints;
    [RawSectionAttribute("0", "0", "0", "False")]
public static TimelineSectionTypes NativeModuleToManagedMap;
    [RawSectionAttribute("0", "0", "1", "False")]
public static TimelineSectionTypes ProfilerSessionData;
    [RawSectionAttribute("16", "17", "1", "False")]
public static TimelineSectionTypes SampleProvider;
    [ConvertedSectionAttribute("True")]
public static TimelineSectionTypes EventTree;
    [ConvertedSectionAttribute("True")]
public static TimelineSectionTypes EventTreeStrings;
    [ConvertedSectionAttribute("True")]
public static TimelineSectionTypes ProcessDescriptors;
    [ConvertedSectionAttribute("True")]
public static TimelineSectionTypes ProcessData;
    [ConvertedSectionAttribute("True")]
public static TimelineSectionTypes IlToNativeMap;
    [ConvertedSectionAttribute("True")]
public static TimelineSectionTypes StorageEnvironment;
    [ConvertedSectionAttribute("True")]
public static TimelineSectionTypes EventTreePerLayer;
    [ConvertedSectionAttribute("False")]
public static TimelineSectionTypes EventTreeStringsPerProperty;
    [ConvertedSectionAttribute("True")]
public static TimelineSectionTypes DfsTree;
    [ConvertedSectionAttribute("True")]
public static TimelineSectionTypes DfsTreeIndexKeys;
    [ConvertedSectionAttribute("True")]
public static TimelineSectionTypes DfsTreeIndexValues;
    [ConvertedSectionAttribute("True")]
public static TimelineSectionTypes DfsTreeInvalidPtrs;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.DotTrace.DalInterface.Timeline.TimelineSectionTypesEx : object {
    private static ILogger ourLog;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static IDictionary`2<TimelineSectionTypes, RawSectionAttribute> ourSupportedRawSections;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static IDictionary`2<TimelineSectionTypes, ConvertedSectionAttribute> ourSupportedConvertedSections;
    public static IReadOnlyCollection`1<TimelineSectionTypes> SectionTypes { get; }
    public static IDictionary`2<TimelineSectionTypes, RawSectionAttribute> SupportedRawSections { get; }
    public static IDictionary`2<TimelineSectionTypes, ConvertedSectionAttribute> SupportedConvertedSections { get; }
    private static TimelineSectionTypesEx();
    public static IReadOnlyCollection`1<TimelineSectionTypes> get_SectionTypes();
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static T TryGetSectionAttribute(TimelineSectionTypes type);
    [ExtensionAttribute]
public static bool IsRaw(TimelineSectionTypes type);
    [ExtensionAttribute]
public static bool IsConverted(TimelineSectionTypes type);
    [ExtensionAttribute]
public static bool IsObsolete(TimelineSectionTypes type);
    [ExtensionAttribute]
public static bool IsManifestBased(TimelineSectionTypes type);
    public static IDictionary`2<TimelineSectionTypes, RawSectionAttribute> get_SupportedRawSections();
    public static IDictionary`2<TimelineSectionTypes, ConvertedSectionAttribute> get_SupportedConvertedSections();
    private static Dictionary`2<TimelineSectionTypes, T> SectionsDictionary();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DalInterface.Timeline.Utils : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> SelectMany(IEnumerable`1<IEnumerable`1<T>> src);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.DalInterface.Timeline.Utils/<MergeSorted>d__1`2")]
[ExtensionAttribute]
public static IEnumerable`1<T> MergeSorted(IEnumerable`1<IEnumerable`1<T>> src, Func`2<T, TOrder> orderFunc);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.DalInterface.Timeline.Utils/<MergeIntersections>d__2")]
[ExtensionAttribute]
public static IEnumerable`1<ModelRange> MergeIntersections(IEnumerable`1<ModelRange> sortedOverlappingRanges);
    [ExtensionAttribute]
public static IEnumerable`1<ModelRange> MergeRanges(IEnumerable`1<IEnumerable`1<ModelRange>> ranges);
}
[ZoneDefinitionAttribute]
public interface JetBrains.DotTrace.DalInterface.Zones.IPerformanceSnapshotZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.DotTrace.DalInterface.Zones.ITimelineSnapshotZone {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
