[ExtensionAttribute]
public static class JetBrains.DotTrace.Dal.Common.ArrayPoolUtils : object {
    [ExtensionAttribute]
public static LentBuffer`1<T> UsingBuffer(ArrayPool`1<T> pool, int minimumLength);
}
public class JetBrains.DotTrace.Dal.Common.Async.OffsetToAsyncFuidCacheBuilder`1 : object {
    private static ILogger ourLog;
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<OffsetToAsyncFuidCache`2<TOffset, FunctionUID>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<OffsetToAsyncFuidCache`2<TOffset, FunctionUID>>> Data { get; }
    protected OffsetToAsyncFuidCacheBuilder`1(IDataContainer`1<DataPipeLifetime> dataPipeLifetimeContainer, IDataProvider`1<ICacheSource`1<IDfsReaders`1<TOffset>>> dfsReadersCacheSource, IDataProvider`1<ICacheSource`1<IDfsRawRoots`1<TOffset>>> rawRootsCacheSource, ICacheProviderContainer`1<IAsyncMethodService> asyncMethodServiceContainer, ICacheProviderContainer`1<IAsyncMethodCallTreeService`1<TOffset>> asyncMethodCallTreeServiceContainer, ICacheProviderContainer`1<IOffsetToIndexConverter`1<TOffset>> offsetToIndexProviderContainer, IProviderContainer`1<ICacheStorageManager> cacheStorageManager, IMemoryMappedStorageManager cacheStorage);
    private static OffsetToAsyncFuidCacheBuilder`1();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<OffsetToAsyncFuidCache`2<TOffset, FunctionUID>>> get_Data();
    public static int BuildCache(Lifetime lifetime, TOffset[] rootsContainer, IDfsReaders`1<TOffset> dfsReaders, IAsyncMethodService asyncMethodService, IAsyncMethodCallTreeService`1<TOffset> asyncMethodCallTreeService, Func`2<TOffset, int> offsetToIndex, SetItems<TOffset> setItems);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Dal.Common.DotTraceSnapshotLocker : object {
    private static ILogger ourLog;
    private static DotTraceSnapshotLocker();
    [ExtensionAttribute]
public static void LockSnapshot(FileSystemPath fileSystemPath, Lifetime lifetime, ILogger logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Dal.Common.DotTraceSnapshotUtils : object {
    private static ILogger ourLog;
    private static DotTraceSnapshotUtils();
    private static SnapshotFileType GetFileType(FileSystemPath indexFile);
    private static FileSystemPath[] GetFiles(FileSystemPath indexFile);
    public static FileSystemPath RenameSnapshot(FileSystemPath srcIndexFile, DateTime snapshotCreationDate, string dstIndexFileNameWithoutExt, bool renameDirectory, IProgressIndicator progress);
    private static void VisitSnapshotAndArtefacts(IProgressIndicator progress, FileSystemPath srcIndexFile, Action`1<FileSystemPath> visitStateFile, Action`1<FileSystemPath> visitLegacyFile, Action`1<DirectoryEntryData> visitTimelineConvertedDir, Action`2<FileSystemPath, IProgressIndicator> visitIndexFile);
    private static void Move(IProgressIndicator progress, FileSystemPath srcIndexFile, FileSystemPath dstIndexFile);
    private static void MoveSnapshot(IProgressIndicator progress, FileSystemPath srcIndexFile, FileSystemPath dstIndexFile);
    private static void DeleteSnapshot(IProgressIndicator progress, FileSystemPath srcIndexFile);
    private static long GetLengthSnapshot(IProgressIndicator progress, FileSystemPath srcIndexFile);
    public static FileSystemPath GetUniqueSnapshotDirectory(FileSystemPath storageDir, string snapshotName, DateTime snapshotCreationDate);
    public static void Delete(IProgressIndicator progress, FileSystemPath srcIndexFile, bool tryDeleteDirectoryIfEmpty);
    public static IEnumerable`1<FileSystemPath> Locked(FileSystemPath indexFile);
    public static long GetLength(IProgressIndicator progress, FileSystemPath srcIndexFile);
    public static void ExportSnapshotWithoutLocking(FileSystemPath source, FileSystemPath target, IProgressIndicator progressIndicator);
    public static void ExportSnapshot(Lifetime snapshotLockLifetime, FileSystemPath source, FileSystemPath target, IProgressIndicator progressIndicator);
}
public class JetBrains.DotTrace.Dal.Common.Environment.FullEnvironmentSection : object {
    [NotNullAttribute]
private IEnvironmentSection myEnvironmentSection;
    [CanBeNullAttribute]
private IPostEnvironmentSection myPostEnvironmentSection;
    public string ConfigurationXml { get; }
    public DateTime BuildDateTime { get; }
    public Version BuildVersion { get; }
    public UInt32 ProcessId { get; }
    public string Executable { get; }
    public string CommandLine { get; }
    public string WorkingDir { get; }
    public DateTime DateTime { get; }
    public SnapshotIdentity SnapshotIdentity { get; }
    public JetArchitecture OSArchitecture { get; }
    public RuntimeType RuntimeType { get; }
    public string RuntimeName { get; }
    public UInt32 NumberOfProcessors { get; }
    public string OsName { get; }
    public string ComputerName { get; }
    public byte PointerSize { get; }
    public JetArchitecture ProcessArchitecture { get; }
    public string UserName { get; }
    public string RuntimeVersion { get; }
    public Nullable`1<DateTime> SnapshotEndTime { get; }
    public FullEnvironmentSection(IEnvironmentSection environmentSection, IPostEnvironmentSection postEnvironmentSection);
    public sealed virtual void Dispose();
    public sealed virtual string get_ConfigurationXml();
    public sealed virtual DateTime get_BuildDateTime();
    public sealed virtual Version get_BuildVersion();
    public sealed virtual UInt32 get_ProcessId();
    public sealed virtual string get_Executable();
    public sealed virtual string get_CommandLine();
    public sealed virtual string get_WorkingDir();
    public sealed virtual DateTime get_DateTime();
    public sealed virtual SnapshotIdentity get_SnapshotIdentity();
    public sealed virtual JetArchitecture get_OSArchitecture();
    public sealed virtual RuntimeType get_RuntimeType();
    public sealed virtual string get_RuntimeName();
    public sealed virtual UInt32 get_NumberOfProcessors();
    public sealed virtual string get_OsName();
    public sealed virtual string get_ComputerName();
    public sealed virtual byte get_PointerSize();
    public sealed virtual JetArchitecture get_ProcessArchitecture();
    public sealed virtual string get_UserName();
    public sealed virtual string get_RuntimeVersion();
    public sealed virtual Nullable`1<DateTime> get_SnapshotEndTime();
}
public interface JetBrains.DotTrace.Dal.Common.Environment.ISnapshotCreatedDateTimeForSourceView {
    public IDataProvider`1<Nullable`1<DateTime>> DateTime { get; }
    public abstract virtual IDataProvider`1<Nullable`1<DateTime>> get_DateTime();
}
public abstract class JetBrains.DotTrace.Dal.Common.FlatPayloadsBuilder`4 : object {
    [CompilerGeneratedAttribute]
private IDataProxy`1<bool> <CalculateClassIdPayloads>k__BackingField;
    private IDataProvider`1<IDfsAlgorithms`2<TOffset, TKey>> myDfsAlgorithmsProvider;
    private IDataProvider`1<SubsystemsCache`1<TOffset>> mySubsystemCache;
    private IDataProvider`1<IDataMapper`2<TKey, int>> myFuidToClassIdProvider;
    private IDataProvider`1<ICacheSource`1<IAccessor`1<IDataMapper`2<TKey, bool>>>> myFunctionSystemness;
    private IDataProvider`1<IAccessor`1<IBatchReader`2<TOffset, TKey>>> myKeyRemappingProvider;
    private TPayloadPredicates myPayloadPredicatesInstance;
    public IDataProxy`1<bool> CalculateClassIdPayloads { get; }
    protected FlatPayloadsBuilder`4(IDataProvider`1<IDfsAlgorithms`2<TOffset, TKey>> dfsAlgorithmsAccessorProvider, IDataProvider`1<SubsystemsCache`1<TOffset>> subsystemCache, ICacheProviderContainer`1<IAccessor`1<IDataMapper`2<TKey, bool>>> functionSystemness, IDataProvider`1<OffsetToAsyncFuidCache`2<TOffset, TKey>> keyRemappingProvider, IProviderContainer`1<IDataMapper`2<TKey, int>> fuidToClassIdProvider, TPayloadPredicates payloadPredicatesInstance);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProxy`1<bool> get_CalculateClassIdPayloads();
    public sealed virtual IThreadSwitch`1<FlatPayloads`2<TKey, TPayload>> BuildPipeline(DataPipeLifetime lifetime, CalculationTargets calculationTargets, IThreadSwitch`1<OwnPayloadsData`2<TOffset, TPayload>> payloadsProvider, IThreadSwitch`1<InterruptibleLazy`1<Nullable`1<AccessData`1<TOffset>>>> accessDataAccessorProvider, bool disableKeyRemapping);
    public sealed virtual IThreadSwitch`1<FunctionPayloadsMap`2<TKey, TPayload>> BuildCalledFunctionsPayloads(DataPipeLifetime lifetime, IThreadSwitch`1<OwnPayloadsData`2<TOffset, TPayload>> payloadsProvider, IThreadSwitch`1<Nullable`1<AccessData`1<TOffset>>> accessDataProvider);
    [CompilerGeneratedAttribute]
private FlatPayloads`2<TKey, TPayload> <BuildCalledFunctionsPayloads>b__11_2(<>f__AnonymousType2`5<IDfsAlgorithms`2<TOffset, TKey>, OwnPayloadsData`2<TOffset, TPayload>, Nullable`1<AccessData`1<TOffset>>, IAccessor`1<IDataMapper`2<TKey, bool>>, IAccessor`1<IBatchReader`2<TOffset, TKey>>> combo, FlatPayloads`2<TKey, TPayload> result, IExecutionController controller);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Dal.Common.Metadata.CallStackPresentation : object {
    [ExtensionAttribute]
public static StringBuilder AppendCallFramePresentation(StringBuilder seed, IMetadataManager manager, FunctionUID fuid);
    [ExtensionAttribute]
[LocalizableAttribute("False")]
public static StringBuilder AppendCallFramePresentation(StringBuilder seed, CallFrameInfo info, Nullable`1<ModuleInfo> moduleInfo, string signature);
    [LocalizableAttribute("False")]
private static string GetModuleName(Nullable`1<ModuleInfo> module);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.DotTrace.Dal.Common.Metadata.CoreFunctionNavigationInfoMapper : object {
    private IMetadataSectionAssemblyProvider myProfilerMetadata;
    public CallTreeNavigationInfo Item { get; }
    public CoreFunctionNavigationInfoMapper(IMetadataSectionAssemblyProvider profilerMetadata);
    public sealed virtual CallTreeNavigationInfo get_Item(MetadataId metadataId);
    private TargetFrameworkId GetAssemblyPlatformFromMetadata(IMetadataEntity entity);
    private static ISignature GetExplicitlyImplementedInterfaceSignature(IMetadataMethod metadataMethod);
    private static string ExcludeInterfaceName(string typeMemberName);
    private static string GetFullyQualifiedEnclosingTypeName(IMetadataTypeMember metadataTypeMember);
    private static bool IsAnonymousType(string typeName);
    private static AssemblyNameInfo GetAssemblyNameInfo(IMetadataTypeMember metadataTypeMember);
}
public interface JetBrains.DotTrace.Dal.Common.Metadata.ISyntheticMethodsDal {
}
[LocalizableAttribute("False")]
public static class JetBrains.DotTrace.Dal.Common.Metadata.SourceViewNavigationInfoBuilder : object {
    public static SourceViewNavigationInfo Build(IMetadataSection profilerMetadataSection, IMetadataSectionAssemblyProvider metadataSectionAssemblyProvider, FileSystemPath modulePath, MetadataId metadataId);
    private static FunctionSignatureInfo BuildFunctionSignatureInfo(IMetadataAssembly assembly, MetadataToken token);
    private static string GetOwnerFullyQualifiedName(IMetadataAssembly assembly, MetadataToken token);
}
public static class JetBrains.DotTrace.Dal.Common.ModuleSystemness : object {
    public static bool IsModuleSystem(IDictionary`2<string, bool> modulePathToSystem, AssemblyNameInfo assemblyNameInfo, string moduleFileName);
}
public class JetBrains.DotTrace.Dal.Common.Overview.InformationTileBuilder : object {
    private InformationLine myNaLine;
    private List`1<InformationBlock> myBuiltTiles;
    private List`1<KeyValuePair`2<string, string>> myVisiblePairs;
    private List`1<KeyValuePair`2<string, string>> myHiddenPairs;
    private List`1<KeyValuePair`2<string, string>> VisiblePairs { get; }
    private List`1<KeyValuePair`2<string, string>> HiddenPairs { get; }
    public IEnumerable`1<InformationBlock> BuiltTiles { get; }
    private List`1<KeyValuePair`2<string, string>> get_VisiblePairs();
    private List`1<KeyValuePair`2<string, string>> get_HiddenPairs();
    public IEnumerable`1<InformationBlock> get_BuiltTiles();
    public void Build(string title);
    private static ICollection`1<InformationLine> BuildLines(IEnumerable`1<KeyValuePair`2<string, string>> source);
    public void AddVisibleLine(string key, string value);
    public void AddHiddenLine(string key, string value);
    private static void AddLine(ICollection`1<KeyValuePair`2<string, string>> list, string key, string value);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Dal.Common.Overview.OverviewModelBuilders : object {
    [ExtensionAttribute]
private static void AddVisibleLineIfValueNotEmpty(InformationTileBuilder tiles, string key, string value);
    public static void BuildEnvironmentTile(InformationTileBuilder leftTiles, ProfileConfiguration profileConfiguration, IEnvironmentSection env, double snapshotTimeResolution);
    public static void BuildSnapshotTile(InformationTileBuilder leftTiles, ProfileConfiguration config, IFullEnvironmentSection env, string snapshotFullPath);
    public static void BuildProfiledApplicationInfo(InformationTileBuilder rightTiles, ProfileConfiguration profileConfiguration, IEnvironmentSection env, SnapshotOverviewStatistics snapshotStatistics);
    private static string FormattedDate(DateTime time);
    [CompilerGeneratedAttribute]
internal static void <BuildProfiledApplicationInfo>g__AddVisibleLineAndStoreKey|3_0(string key, string value, bool onlyNotEmpty, <>c__DisplayClass3_0& , <>c__DisplayClass3_1& );
}
public static class JetBrains.DotTrace.Dal.Common.Overview.UnitUtil : object {
    private static String[] ourSiHighPrefixes;
    private static String[] ourSiLowPrefixes;
    private static UnitUtil();
    private static double Calculate(double value, ushort step, String& prefix);
    public static double CalculateBinary(double value, String& prefix);
    public static double CalculateDecimal(double value, String& prefix);
}
public static class JetBrains.DotTrace.Dal.Common.RawSnapshot : object {
    public static Guid GetGuid(FileSystemPath snapshotPath);
}
[NullableContextAttribute("1")]
public interface JetBrains.DotTrace.Dal.Common.RecentSnapshots.ISnapshotInfo {
    public IDataController`1<FileSystemPath> CurrentPath { get; }
    public bool IsTemporary { get; }
    public string ArtefactName { get; }
    public FileSystemPath UnpackedSnapshotPath { get; }
    public abstract virtual IDataController`1<FileSystemPath> get_CurrentPath();
    public abstract virtual bool get_IsTemporary();
    public abstract virtual string get_ArtefactName();
    public abstract virtual FileSystemPath get_UnpackedSnapshotPath();
}
[ShellComponentAttribute("16")]
public class JetBrains.DotTrace.Dal.Common.ShellComponents.Local.FUS.FusSnapshotStatistics : SnapshotStatistics {
    private ILogger myLogger;
    private IOpenSnapshotCollector myCollector;
    private Dictionary`2<FileSystemPath, SnapshotOpenReason> myOpenReason;
    private Dictionary`2<FileSystemPath, TimelineInputFileType> myInputFileType;
    public FusSnapshotStatistics(ILogger logger, IOpenSnapshotCollector collector);
    public IDataProvider`1<ResultOrError`1<ConvertedSnapshot>> AddProcessingContext(IDataProvider`1<ResultOrError`1<ConvertedSnapshot>> processingResult, FileSystemPath originalInputFile);
    private void OnProcessingFinished(FileSystemPath originalInputFile, ProcessingStats stats);
    private void OnProcessingError(FileSystemPath originalInputFile, ProcessingStats stats, IProcessingError error);
    public void OnSnapshotOpened(FileSystemPath originalInputFile, long totalSize, IComponentContainer container);
    public virtual void RegisterOpenSnapshotReason(FileSystemPath originalInputFile, SnapshotOpenReason reason);
    public virtual void RegisterInputFileType(FileSystemPath originalInputFile, TimelineInputFileType format);
    private SnapshotOpenReason PopOpenReason(FileSystemPath originalInputFile);
    private Nullable`1<TimelineInputFileType> PopInputFileType(FileSystemPath originalInputFile);
}
[NullableContextAttribute("1")]
public interface JetBrains.DotTrace.Dal.Common.ShellComponents.Local.FUS.IOpenSnapshotCollector {
    public abstract virtual void SnapshotProcessingFailed(SnapshotProcessingError processingError);
    public abstract virtual void SnapshotProcessingFinished(SnapshotProcessingInfo processingInfo);
    public abstract virtual void SnapshotOpened(OpenSnapshotInfo openInfo);
}
[CounterUsagesCollectorAttribute("16")]
public class JetBrains.DotTrace.Dal.Common.ShellComponents.Local.FUS.OpenSnapshotCollector : CounterUsagesCollector {
    protected EventLogGroup Group;
    protected EventLogConfiguration EventLogConfiguration;
    private VarargEventId myTimelineSnapshotProcessedEvent;
    private VarargEventId mySnapshotOpenedEvent;
    private AnonymizedIdField mySnapshotIdField;
    private AnonymizedIdField myProcessIdField;
    private EnumEventField`1<SnapshotFormat> myFormatField;
    private EnumEventField`1<StorageType> myStorageTypeField;
    private EnumEventField`1<ProfileSource> mySourceField;
    private RoundedLongEventField mySizeRoundedField;
    private RoundedLongEventField myElapsedUnpackingTimeRoundedField;
    private RoundedLongEventField myElapsedTimeRoundedField;
    private EnumEventField`1<ProcessingResult> myProcessingResultField;
    private EnumEventField`1<FusRuntimeType> myRuntimeTypeField;
    private Version4Field myRuntimeVersionField;
    private Version4Field myCoreField;
    private EnumListEventField`1<TimelineEvents> myTimelineEventsField;
    private RoundedLongEventField myProfilingDurationRoundedField;
    private RoundedIntEventField myRoundedThreadsCountField;
    private RoundedIntEventField myRoundedModulesCountField;
    public OpenSnapshotCollector(FeatureUsageLogger featureUsageLogger, EventLogConfiguration eventLogConfiguration);
    public virtual EventLogGroup GetGroup();
    private void TimelineSnapshotProcessed(Guid snapshotId, Guid processId, SnapshotFormat format, StorageType storageType, ProfileSource source, long sizeRounded, long elapsedUnpackingTimeRounded, long elapsedTimeRounded, ProcessingResult processingResult);
    private void SnapshotOpened(Guid snapshotId, Guid processId, SnapshotFormat format, StorageType storageType, ProfileSource source, long sizeRounded, FusRuntimeType runtimeType, Version runtimeVersion, Version core, TimelineEvents timelineEvents, long profilingDurationRounded, int roundedThreadsCount, int roundedModulesCount);
    private static string TransformationHelperAnonymousId(Guid value);
    private static string TransformationHelperVersion(Version value);
    private static IList`1<TimelineEvents> TransformationHelperEnumFlags(TimelineEvents value);
    [NullableContextAttribute("1")]
public sealed virtual void SnapshotProcessingFailed(SnapshotProcessingError processingError);
    private static long ToMs(TimeSpan span);
    [NullableContextAttribute("1")]
public sealed virtual void SnapshotProcessingFinished(SnapshotProcessingInfo processingInfo);
    [NullableContextAttribute("1")]
public sealed virtual void SnapshotOpened(OpenSnapshotInfo openInfo);
    [NullableContextAttribute("1")]
private static IModulePathSection GetModulePathSection(Lifetime lifetime, IComponentContainer container);
    [NullableContextAttribute("1")]
private static ILogStorage GetLogStorage(IComponentContainer container);
    [NullableContextAttribute("1")]
private static IFullEnvironmentSection GetEnvironmentSection(Lifetime lifetime, IComponentContainer container);
    [NullableContextAttribute("1")]
private static long GetTimelineSnapshotDuration(ILogStorage logStorage);
    [NullableContextAttribute("2")]
private static TimelineEvents GetTimelineEvents(ILogStorage logStorage);
    [NullableContextAttribute("2")]
private static SnapshotFormat GetFormat(IInfo info);
    private static StorageType GetStorageType(Nullable`1<TimelineInputFileType> inputFileType);
    [NullableContextAttribute("2")]
private static ProcessingResult GetProcessingResult(IProcessingError error);
    [NullableContextAttribute("1")]
private static ProfileSource GetOpenReason(SnapshotOpenReason source);
}
public enum JetBrains.DotTrace.Dal.Common.ShellComponents.Local.FUS.ProcessingResult : Enum {
    public int value__;
    public static ProcessingResult Success;
    public static ProcessingResult OperationCanceled;
    public static ProcessingResult MultiFileSnapshotStorage;
    public static ProcessingResult Processing;
    public static ProcessingResult SnapshotIsTooNew;
    public static ProcessingResult SnapshotIsCompatibleWith241;
    public static ProcessingResult Other;
    public static ProcessingResult Invalid;
}
public enum JetBrains.DotTrace.Dal.Common.ShellComponents.Local.FUS.ProfileSource : Enum {
    public int value__;
    public static ProfileSource HomeOpenDialog;
    public static ProfileSource HomeDragNDrop;
    public static ProfileSource HomeSession;
    public static ProfileSource HomeAfterProfiling;
    public static ProfileSource VsOpenDialog;
    public static ProfileSource VsOpenInViewerAction;
    public static ProfileSource VsSnapshotList;
    public static ProfileSource VsAfterProfiling;
    public static ProfileSource RiderOpenDialog;
    public static ProfileSource RiderOpenInViewerAction;
    public static ProfileSource RiderSnapshotList;
    public static ProfileSource RiderOpenFromController;
    public static ProfileSource ViewerOpenDialog;
    public static ProfileSource Empty;
    public static ProfileSource Unknown;
    public static ProfileSource Invalid;
}
public enum JetBrains.DotTrace.Dal.Common.ShellComponents.Local.FUS.SnapshotFormat : Enum {
    public int value__;
    public static SnapshotFormat Unknown;
    public static SnapshotFormat Timeline;
    public static SnapshotFormat Sampling;
    public static SnapshotFormat Tracing;
    public static SnapshotFormat LineByLine;
}
public enum JetBrains.DotTrace.Dal.Common.ShellComponents.Local.FUS.StorageType : Enum {
    public int value__;
    public static StorageType Unknown;
    public static StorageType RawMultiFile;
    public static StorageType NetTrace;
    public static StorageType ZipArchive;
    public static StorageType ConvertedMMS;
    public static StorageType RawSingleFile;
}
[FlagsAttribute]
public enum JetBrains.DotTrace.Dal.Common.ShellComponents.Local.FUS.TimelineEvents : Enum {
    public int value__;
    public static TimelineEvents Sql;
    public static TimelineEvents UiFreeze;
    public static TimelineEvents Exceptions;
    public static TimelineEvents Gc;
    public static TimelineEvents FileIo;
    public static TimelineEvents NetAlloc;
    public static TimelineEvents NativeAlloc;
    public static TimelineEvents Http;
    public static TimelineEvents DebugOutput;
    public static TimelineEvents Awaits;
    public static TimelineEvents Tasks;
    public static TimelineEvents Jit;
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Dal.Common.ShellComponents.Local.FUS.ZoneMarker : object {
}
[ShellComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.DotTrace.Dal.Common.ShellComponents.Local.SnapshotStatistics : object {
    public virtual void RegisterOpenSnapshotReason(FileSystemPath rawSnapshotFile, SnapshotOpenReason reason);
    public virtual void RegisterInputFileType(FileSystemPath rawSnapshotFile, TimelineInputFileType format);
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Dal.Common.ShellComponents.Local.ZoneMarker : object {
}
[ShellComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Common.ShellComponents.Settings.CallTreePresentationSettingsComponent : object {
    [CompilerGeneratedAttribute]
private IDataController`1<bool> <ShowUnresolvedCallFrames>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataController`1<bool> <AsyncSupport>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataController`1<bool> <UseSteppedBackTrace>k__BackingField;
    public IDataController`1<bool> ShowUnresolvedCallFrames { get; }
    public IDataController`1<bool> AsyncSupport { get; public set; }
    public IDataController`1<bool> UseSteppedBackTrace { get; }
    public CallTreePresentationSettingsComponent(Lifetime lifetime, ISettingsStore settings);
    [CompilerGeneratedAttribute]
public IDataController`1<bool> get_ShowUnresolvedCallFrames();
    [CompilerGeneratedAttribute]
public IDataController`1<bool> get_AsyncSupport();
    [CompilerGeneratedAttribute]
public void set_AsyncSupport(IDataController`1<bool> value);
    [CompilerGeneratedAttribute]
public IDataController`1<bool> get_UseSteppedBackTrace();
}
public interface JetBrains.DotTrace.Dal.Common.ShellComponents.Settings.ICallTreePresentationRemoteSettings {
    public IDataProxy`1<bool> ShowUnresolvedCallFrames { get; }
    public IDataProxy`1<bool> AsyncSupport { get; }
    public abstract virtual IDataProxy`1<bool> get_ShowUnresolvedCallFrames();
    public abstract virtual IDataProxy`1<bool> get_AsyncSupport();
}
[SnapshotComponentAttribute("10")]
[UsedImplicitlyAttribute("2")]
public class JetBrains.DotTrace.Dal.Common.SnapshotComponent.Local.Settings.CallTreePresentationRemoteSettingsSetter : object {
    public CallTreePresentationRemoteSettingsSetter(CallTreePresentationSettingsComponent callTree, IDataContainer`1<IRemoteCommunicator> remoteComm, IRemotableReference`1<ICallTreePresentationRemoteSettings> remote);
}
[SnapshotComponentAttribute("10")]
[UsedImplicitlyAttribute("2")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.DotTrace.Dal.Common.SnapshotComponent.Local.Settings.SystemModulesSettingsSetter : object {
    public SystemModulesSettingsSetter(ISystemModuleSettingsProvider systemModules, IDataContainer`1<IRemoteCommunicator> remoteComm, IRemotableReference`1<ISystemModulesRemoteSettings> remote);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Common.SnapshotComponent.Local.SnapshotCreatedDateTimeForSourceView : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<Nullable`1<DateTime>> <DateTime>k__BackingField;
    public IDataProvider`1<Nullable`1<DateTime>> DateTime { get; }
    public SnapshotCreatedDateTimeForSourceView(IAccessor`1<IFullEnvironmentSection> environmentAccessor);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<Nullable`1<DateTime>> get_DateTime();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Common.SnapshotComponent.Local.SnapshotInfo : object {
    [CompilerGeneratedAttribute]
private IDataController`1<FileSystemPath> <CurrentPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTemporary>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ArtefactName>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <UnpackedSnapshotPath>k__BackingField;
    public IDataController`1<FileSystemPath> CurrentPath { get; }
    public bool IsTemporary { get; }
    [NullableAttribute("2")]
public string ArtefactName { get; }
    public FileSystemPath UnpackedSnapshotPath { get; }
    public SnapshotInfo(SnapshotOrigin origin);
    [CompilerGeneratedAttribute]
public sealed virtual IDataController`1<FileSystemPath> get_CurrentPath();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsTemporary();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_ArtefactName();
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_UnpackedSnapshotPath();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Common.SnapshotComponent.Local.SnapshotInfoProvider : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ISnapshotInfo> <Data>k__BackingField;
    public IDataProvider`1<ISnapshotInfo> Data { get; }
    public SnapshotInfoProvider(ISnapshotInfo snapshotInfo);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ISnapshotInfo> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Common.SnapshotComponent.Local.SnapshotOverviewComponent : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<IEnumerable`1<InformationBlock>> <OverviewInfoProvider>k__BackingField;
    public IDataProvider`1<IEnumerable`1<InformationBlock>> OverviewInfoProvider { get; }
    public SnapshotOverviewComponent(IHostManager hostParameters, IAccessor`1<IFullEnvironmentSection> environmentSectionAcc);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IEnumerable`1<InformationBlock>> get_OverviewInfoProvider();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Common.SnapshotComponent.Local.SnapshotPresentation : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<SnapshotPresentationData> <PresentationData>k__BackingField;
    public IDataProvider`1<bool> SnapshotIsLocked { get; }
    public IDataProvider`1<SnapshotPresentationData> PresentationData { get; }
    public SnapshotPresentation(ISnapshotInfo origin, IAccessor`1<IFullEnvironmentSection> environmentSectionAccessor);
    public IDataProvider`1<bool> get_SnapshotIsLocked();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<SnapshotPresentationData> get_PresentationData();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Common.SnapshotComponent.Local.Subsystems.SubsystemSettings : object {
    public SubsystemSettings(Lifetime lifetime, ISubsystemSettingsProvider subsystemSettingsProvider, IRemotableReference`1<SubsystemProfileDataProvider> resolveInputProvider, IDataContainer`1<IRemoteCommunicator> commContainer);
    private static void ChainWithRemotePipe(IRemotableReference`1<SubsystemProfileDataProvider> resolveInputProvider, IRemotableReference`1<IDataProvider`1<ICacheSource`1<Nullable`1<SubsystemProfileData>>>> localInputSource);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Common.SnapshotComponent.Local.Subsystems.SubsystemSettingsProvider : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ISubsystemProfile> <CurrentProfileAndUpdates>k__BackingField;
    public IDataProvider`1<ISubsystemProfile> CurrentProfileAndUpdates { get; }
    public SubsystemSettingsProvider(Lifetime lifetime, SubsystemStorageComponent storageComponent);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ISubsystemProfile> get_CurrentProfileAndUpdates();
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Dal.Common.SnapshotComponent.Local.Subsystems.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Dal.Common.SnapshotComponent.Local.ZoneMarker : object {
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Common.SnapshotComponent.Remote.CacheStorageManagerContainer : object {
    private bool myClearOnClose;
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheStorageManager> <Data>k__BackingField;
    public IDataProvider`1<ICacheStorageManager> Data { get; }
    public CacheStorageManagerContainer(Lifetime lifetime, ICacheStorageDir cacheStorageDir, ISnapshotIdContainer snapshotEnvironment);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheStorageManager> get_Data();
    public sealed virtual void RegisterClearing();
}
public class JetBrains.DotTrace.Dal.Common.SnapshotComponent.Remote.ModuleData : ValueType {
    [CanBeNullAttribute]
public AssemblyNameInfo AssemblyNameInfo;
    public FileSystemPath Path;
    public DebugInfoState DebugSymbolsState;
    public Nullable`1<bool> IsJitOptimized;
    public Guid Mvid;
    public bool IsSystem;
}
public class JetBrains.DotTrace.Dal.Common.SnapshotComponent.Remote.ModulesData : object {
    public List`1<ModuleData> Modules;
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Common.SnapshotComponent.Remote.ModulesDataComponent : object {
    private static ILogger ourLog;
    [CompilerGeneratedAttribute]
private IDataProvider`1<ModulesData> <Data>k__BackingField;
    public IDataProvider`1<ModulesData> Data { get; }
    public ModulesDataComponent(Lifetime lifetime, ISectionAccessor`1<IMetadataSection> metadataSectionAccessor, ISectionAccessor`1<IModulePathSection> modulePaths, ISystemModulesRemoteSettings systemModuleSettingsProvider);
    private static ModulesDataComponent();
    private static ModuleData CreateModuleData(AssemblyNameInfo assemblyNameInfo, string path, IModuleInfo moduleInfoInner, Nullable`1<bool> isJitOptimizedInner, IDictionary`2<string, bool> systemnessSettings);
    private static Nullable`1<bool> GetJitOptimizedFlag(IMetadataAssembly metadataAssembly);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ModulesData> get_Data();
}
[SnapshotComponentAttribute("16")]
public class JetBrains.DotTrace.Dal.Common.SnapshotComponent.Remote.Settings.CallTreePresentationSettingsRemoteComponent : object {
    [CompilerGeneratedAttribute]
private IDataProxy`1<bool> <ShowUnresolvedCallFrames>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProxy`1<bool> <AsyncSupport>k__BackingField;
    public IDataProxy`1<bool> ShowUnresolvedCallFrames { get; }
    public IDataProxy`1<bool> AsyncSupport { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IDataProxy`1<bool> get_ShowUnresolvedCallFrames();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProxy`1<bool> get_AsyncSupport();
}
public interface JetBrains.DotTrace.Dal.Common.SnapshotComponent.Remote.Settings.ISystemModulesRemoteSettings {
    public IDataProxy`1<ICacheSource`1<Dictionary`2<string, bool>>> ModuleToIsSystem { get; }
    public abstract virtual IDataProxy`1<ICacheSource`1<Dictionary`2<string, bool>>> get_ModuleToIsSystem();
}
[SnapshotComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.DotTrace.Dal.Common.SnapshotComponent.Remote.Settings.SystemModulesSettingsRemoteComponent : object {
    [CompilerGeneratedAttribute]
private IDataProxy`1<ICacheSource`1<Dictionary`2<string, bool>>> <ModuleToIsSystem>k__BackingField;
    public IDataProxy`1<ICacheSource`1<Dictionary`2<string, bool>>> ModuleToIsSystem { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IDataProxy`1<ICacheSource`1<Dictionary`2<string, bool>>> get_ModuleToIsSystem();
}
[SnapshotComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.DotTrace.Dal.Common.SnapshotComponent.Remote.Subsystems.ExtraSubsystemMethods : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<IReadOnlyCollection`1<MethodViewDataDal>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<IReadOnlyCollection`1<MethodViewDataDal>>> Data { get; }
    [CompilerGeneratedAttribute]
public virtual IDataProvider`1<ICacheSource`1<IReadOnlyCollection`1<MethodViewDataDal>>> get_Data();
}
[SnapshotComponentAttribute("16")]
public class JetBrains.DotTrace.Dal.Common.SnapshotComponent.Remote.Subsystems.SubsystemProfileDataProvider : object {
    [CompilerGeneratedAttribute]
private IDataProxy`1<ICacheSource`1<Nullable`1<SubsystemProfileData>>> <Provider>k__BackingField;
    public IDataProxy`1<ICacheSource`1<Nullable`1<SubsystemProfileData>>> Provider { get; }
    public IDataProvider`1<ICacheSource`1<Nullable`1<SubsystemProfileData>>> Data { get; }
    [CompilerGeneratedAttribute]
public IDataProxy`1<ICacheSource`1<Nullable`1<SubsystemProfileData>>> get_Provider();
    public sealed virtual IDataProvider`1<ICacheSource`1<Nullable`1<SubsystemProfileData>>> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Common.SnapshotComponent.Remote.SystemMethods.FuidToClassIdProvider : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<IDataMapper`2<FunctionUID, int>> <Data>k__BackingField;
    public IDataProvider`1<IDataMapper`2<FunctionUID, int>> Data { get; }
    public FuidToClassIdProvider(IAllFuidsContainer allFuidsContainer, IMethodViewDataProviderDal methodViewDataProviderDal);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IDataMapper`2<FunctionUID, int>> get_Data();
}
[ThreadSafeAttribute]
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Common.SnapshotComponent.Remote.SystemMethods.FunctionSystemnessDal : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<IAccessor`1<IDataMapper`2<FunctionUID, bool>>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<IAccessor`1<IDataMapper`2<FunctionUID, bool>>>> Data { get; }
    public FunctionSystemnessDal(Lifetime lifetime, IDataContainer`1<IAccessor`1<IMetadataManager>> metadataAccessor, IAllFuidsContainer allFuidsComponent, ISystemModulesRemoteSettings systemModuleSettingsProvider, ISyntheticMethodsDal syntheticMethods);
    private static bool IsSystem(FunctionUID fuid, IMetadataManager mgr, IDictionary`2<string, bool> settings);
    private static bool IsSyntheticFuidSystem(FunctionUID fuid);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<IAccessor`1<IDataMapper`2<FunctionUID, bool>>>> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Common.SnapshotComponent.Remote.SystemMethods.MethodViewDataProvider : MethodViewDataProviderBase {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<IAccessor`1<IDataMapper`2<FunctionUID, Nullable`1<MethodViewDataDal>>>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<IAccessor`1<IDataMapper`2<FunctionUID, Nullable`1<MethodViewDataDal>>>>> Data { get; }
    public MethodViewDataProvider(IDataContainer`1<IAccessor`1<IMetadataManager>> metadataAccessor, FunctionSystemnessDal functionSystemness, ISnapshotMasksComponent snapshotMasksComponent, ISyntheticMethodsDal syntheticMethods);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<IAccessor`1<IDataMapper`2<FunctionUID, Nullable`1<MethodViewDataDal>>>>> get_Data();
}
public class JetBrains.DotTrace.Dal.Common.SnapshotComponent.Remote.SystemMethods.MethodViewDataProviderBase : object {
    private ISnapshotMasksComponent mySnapshotMasksComponent;
    private ISet`1<FunctionUID> mySyntheticMethods;
    protected MethodViewDataProviderBase(ISnapshotMasksComponent snapshotMasksComponent, ISyntheticMethodsDal syntheticMethods);
    protected MethodViewDataDal CreateMethodViewData(IMetadataManager metadataManager, FunctionUID fuid, bool isSystem);
    private bool IsGcFuid(FunctionUID fuid);
    [NotNullAttribute]
private static string GetModuleFileName(IMetadataManager metadataManager, FunctionUID fuid);
    private MethodViewDataDal GetForManaged(IMetadataManager metadataManager, FunctionUID fuid, bool isSystem, bool isGcFuid);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Common.SnapshotComponent.Remote.SystemMethods.SubsystemResolveDataProvider : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<SubsystemResolveData`1<FunctionUID>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<SubsystemResolveData`1<FunctionUID>>> Data { get; }
    public SubsystemResolveDataProvider(IDataContainer`1<DataPipeLifetime> lifetime, ICacheProviderContainer`1<Nullable`1<SubsystemProfileData>> subsystemProfileData, IMethodViewDataProviderDal methodViewDataProvider, ExtraSubsystemMethods extraMethodsProvider, IAllFuidsContainer allFuidsContainer);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<SubsystemResolveData`1<FunctionUID>>> get_Data();
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Dal.Common.SnapshotComponent.Remote.SystemMethods.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Dal.Common.SnapshotComponent.Remote.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Dal.Common.SnapshotComponent.ZoneMarker : object {
}
public class JetBrains.DotTrace.Dal.Common.Subsystems.SimpleDfsNodeSubsystemCalculator`3 : object {
    private TPayload[] myResult;
    public TPayload HiddenPayload { get; }
    public IDictionary`2<SubsystemIndex, TPayload> Data { get; }
    public SimpleDfsNodeSubsystemCalculator`3(int subsystemsCount);
    public sealed virtual TPayload get_HiddenPayload();
    public sealed virtual IDictionary`2<SubsystemIndex, TPayload> get_Data();
    public sealed virtual void ProcessDfsNodesBatch(DfsNode`2[] nodes, TPayload[] payloads, SubsystemIndex[] subsystems, int start, int count, TOffset rootNodeOffset);
}
public class JetBrains.DotTrace.Dal.Common.Subsystems.SimpleDfsNodeSubsystemsRangesCalculator`2 : object {
    private Boolean[] myIncludedIndices;
    private RangeList`1<TOffset> myResult;
    public SimpleDfsNodeSubsystemsRangesCalculator`2(Boolean[] includedIndices, RangeList`1<TOffset> result);
    public sealed virtual void ProcessDfsNodesBatch(DfsNode`2[] nodes, Int32[] null, SubsystemIndex[] subsystems, int start, int count, TOffset rootNodeOffset);
}
public class JetBrains.DotTrace.Dal.Common.Subsystems.SimpleMeasureResult`1 : object {
    [CompilerGeneratedAttribute]
private SubsystemKey <SubsystemId>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<ISubsystemMeasureResult[]> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<KeyValuePair`2[]> <TopSignatures>k__BackingField;
    [CompilerGeneratedAttribute]
private TPayload <Sum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupName>k__BackingField;
    public SubsystemKey SubsystemId { get; private set; }
    public Lazy`1<ISubsystemMeasureResult[]> Children { get; private set; }
    public Lazy`1<KeyValuePair`2[]> TopSignatures { get; private set; }
    public TPayload Sum { get; private set; }
    public string DisplayName { get; private set; }
    public string GroupName { get; private set; }
    public SimpleMeasureResult`1(SubsystemKey subsystemId, TPayload sum, string displayName, string groupName);
    [CompilerGeneratedAttribute]
public sealed virtual SubsystemKey get_SubsystemId();
    [CompilerGeneratedAttribute]
private void set_SubsystemId(SubsystemKey value);
    [CompilerGeneratedAttribute]
public sealed virtual Lazy`1<ISubsystemMeasureResult[]> get_Children();
    [CompilerGeneratedAttribute]
private void set_Children(Lazy`1<ISubsystemMeasureResult[]> value);
    [CompilerGeneratedAttribute]
public sealed virtual Lazy`1<KeyValuePair`2[]> get_TopSignatures();
    [CompilerGeneratedAttribute]
private void set_TopSignatures(Lazy`1<KeyValuePair`2[]> value);
    [CompilerGeneratedAttribute]
public sealed virtual TPayload get_Sum();
    [CompilerGeneratedAttribute]
private void set_Sum(TPayload value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
private void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_GroupName();
    [CompilerGeneratedAttribute]
private void set_GroupName(string value);
}
public class JetBrains.DotTrace.Dal.Common.Subsystems.SubsystemOffsetToSubsystem`1 : object {
    private static ILogger Log;
    private static ConditionalLog CLog;
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<SubsystemsCache`1<TOffset>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<SubsystemsCache`1<TOffset>>> Data { get; }
    protected SubsystemOffsetToSubsystem`1(ICacheProviderContainer`1<SubsystemResolveData`1<FunctionUID>> subsystemResolveProvider, IAllRootsProvider`1<TOffset> rawRootsProviderContainer, ICacheProviderContainer`1<IDfsAlgorithms`2<TOffset, FunctionUID>> dfsAlgorithmsProviderContainer, IDataContainer`1<DataPipeLifetime> dataPipeLifetimeContainer, IMemoryMappedStorageManager cacheStorage, IProviderContainer`1<ICacheStorageManager> cacheStorageManager, IDataProvider`1<ICacheSource`1<Func`2<TOffset, int>>> offsetToIndexProvider);
    private static SubsystemOffsetToSubsystem`1();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<SubsystemsCache`1<TOffset>>> get_Data();
}
public class JetBrains.DotTrace.Dal.Common.Subsystems.SubsystemResolveData`1 : object {
    public SubsystemUsageInfoData[] SubsystemUsageInfoDatas;
    public IDictionary`2<TKey, SubsystemUsageInfoData> FuidToSubsystemUsage;
    public SubsystemResolveData`1(IDictionary`2<TKey, SubsystemUsageInfoData> fuidToSubsystemUsage, SubsystemUsageInfoData[] subsystemUsageInfoDatas);
}
[ThreadSafeAttribute]
public class JetBrains.DotTrace.Dal.Common.Tree.Dfs.CommonCoreDfsLogic`2 : object {
    public static int DefaultNodesBufferSize;
    private IComparer`1<TOffset> myComparer;
    private IComparer`1<TOffset> myReverseComparer;
    private ConditionalLog myLog;
    private TOffset myMinOffset;
    private TOffset myInvalidOffset;
    private SubtractOffset`1<TOffset> mySub;
    private int myBufferSize;
    private ObjectPool`1<List`1<int>> myYieldLists;
    private static List`1<TOffset> ourEmptyListSingleton;
    private ObjectPool`1<DfsNode`2[]> myNodeBuffers;
    private IAccessor`1<IBatchNodesReader`2<TOffset, TKey>> myBatchReaderAccessor;
    private ObjectPool`1<SubsystemIndex[]> mySubsystemIndexesPool;
    public CommonCoreDfsLogic`2(IAccessor`1<IBatchNodesReader`2<TOffset, TKey>> nodesReaderAccessor, IComparer`1<TOffset> comparer, IComparer`1<TOffset> reverseComparer, TOffset minOffset, TOffset invalidOffset, SubtractOffset`1<TOffset> subtractor, int bufferSize);
    private static CommonCoreDfsLogic`2();
    public IEnumerable`1<PlusOrMinus`1<TOffset>> GetChildren(IEnumerable`1<TOffset> roots, List`1<TOffset> minuses);
    private IEnumerable`1<PlusOrMinus`1<TOffset>> GetChildrenImpl(IEnumerable`1<TOffset> roots, List`1<TOffset> minuses, bool yieldMinusesMode);
    public IEnumerable`1<PlusOrMinus`1<TOffset>> GetSubtrees(IEnumerable`1<TOffset> roots, List`1<TOffset> minuses);
    public IEnumerable`1<PlusOrMinus`1<TOffset>> GetSubtrees(IEnumerable`1<TOffset> roots, List`1<TOffset> minuses, ProcessSubtreePart`3<TOffset, TKey, TContext> processor, int readCount, SubtreeContextManager`3<TOffset, TKey, TContext> subtreeContextManager, bool excludeRoots, bool yieldMinusesMode);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Dal.Common.Tree.Dfs.CommonCoreDfsLogic`2/<GetSubtrees>d__18`1")]
public IEnumerable`1<PlusOrMinus`1<TOffset>> GetSubtrees(Lifetime parentLifetime, IEnumerable`1<TOffset> roots, List`1<TOffset> minuses, ProcessSubtreePart`3<TOffset, TKey, TContext> processor, int readCount, SubtreeContextManager`3<TOffset, TKey, TContext> subtreeContextManager, bool excludeRoots, bool yieldMinusesMode);
    private DfsForwardEnumerator`2<TOffset, DfsNode`2<TOffset, TKey>> BuildForwardEnumerator(Lifetime lifetime);
    private DfsBackwardEnumerator`2<TOffset, DfsNode`2<TOffset, TKey>> BuildBackwardEnumerator(Lifetime lifetime);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Dal.Common.Tree.Dfs.CommonCoreDfsLogic`2/<GetTopLevelPointers>d__21")]
public IEnumerable`1<TOffset> GetTopLevelPointers(IEnumerable`1<TOffset> roots);
    public IEnumerable`1<PlusOrMinus`1<TOffset>> GetTopLevelMinusesDescendants(IEnumerable`1<TOffset> roots, List`1<TOffset> minuses);
    public IEnumerable`1<PlusOrMinus`1<TOffset>> TopLevelDescendantsForPredicate(Lifetime parentLifetime, IEnumerable`1<TOffset> ptrs, List`1<TOffset> minuses, Func`3<TOffset, TKey, bool> predicate, bool excludeRoots, FastSkipLogic`1<TOffset> fastSkip);
    public void ProcessSubtreesForward(Lifetime parentLifetime, List`1<RootAndRange`1<TOffset>> selectedRangesAndRoots, IBatchReader`2<TOffset, TKey> remappedKeysReader, IBatchReader`2<TOffset, TPayload> payloadsReader, IBatchReader`2<TOffset, SubsystemIndex> subsystemsReader, ProcessSubtreePartForward`3<TOffset, TKey, TPayload> processor, IExecutionController controller);
    private DfsForwardEnumerator`2<TOffset, SubsystemIndex> BuildSubsystemsEnumerator(Lifetime lifetime, IBatchReader`2<TOffset, SubsystemIndex> subsystemsBatchReader);
    public void GetSubtreesRangesAndRoots(IEnumerable`1<TOffset> ptrs, List`1<RootAndRange`1<TOffset>> result);
    private void GetSubtreesForwardImpl(DfsForwardEnumerator`2<TOffset, DfsNode`2<TOffset, TKey>> tree, DfsForwardEnumerator`2<TOffset, TKey> remappedKeys, DfsForwardEnumerator`2<TOffset, TPayload> payloads, DfsForwardEnumerator`2<TOffset, SubsystemIndex> subsystems, List`1<RootAndRange`1<TOffset>> rootsAndRanges, ProcessSubtreePartForward`3<TOffset, TKey, TPayload> processor, IExecutionController controller);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Dal.Common.Tree.Dfs.CommonCoreDfsLogic`2/<GetSubtreesImpl>d__28`1")]
private IEnumerable`1<PlusOrMinus`1<TOffset>> GetSubtreesImpl(DfsBackwardEnumerator`2<TOffset, DfsNode`2<TOffset, TKey>> nodes, IEnumerable`1<TOffset> roots, List`1<TOffset> minuses, List`1<int> yieldList, ProcessSubtreePart`3<TOffset, TKey, TContext> processor, int readCount, SubtreeContextManager`3<TOffset, TKey, TContext> subtreeContextManager, bool excludeRoots, bool yieldMinusesMode);
    private ProcessingSubtree`3<TOffset, TKey, TContext> ComposeStackFrame(DfsBackwardEnumerator`2<TOffset, DfsNode`2<TOffset, TKey>> nodes, SubtreeContextManager`3<TOffset, TKey, TContext> subtreeContextManager, TOffset currentOffset, bool isMinusPhase);
    private bool MoveNextAndAssert(IEnumerator`1<Pair`2<TOffset, Nullable`1<TOffset>>> ptrsEnumerator);
    private void DisposeStackFrame(Stack`1<ProcessingSubtree`3<TOffset, TKey, TContext>> stack, SubtreeContextManager`3<TOffset, TKey, TContext> subtreeContextManager);
    [ConditionalAttribute("JET_MODE_ASSERT")]
private void AssertNextRootNotInsideBatch(DfsNode`2[] nodes, Bounds currentBounds, IEnumerator`1<Pair`2<TOffset, Nullable`1<TOffset>>> ptrsEnumerator, ProcessingSubtree`3<TOffset, TKey, TContext> currentSubtree, DfsBackwardEnumerator`2<TOffset, DfsNode`2<TOffset, TKey>> dfsBackwardEnumerator);
    private Nullable`1<OffsetWithExclude<TOffset, TKey>> CreateOffsetWithExclude(Nullable`1<TOffset> offset, bool exclude);
    private void AssertInputPointersAreSorted(Pair`2<TOffset, Nullable`1<TOffset>> currentRootPair);
    private Nullable`1<OffsetWithExclude<TOffset, TKey>> FindNextMinus(TOffset currentOffset, List`1<TOffset> minuses, Int32& minusIndex);
    private ProcessingSubtree`3<TOffset, TKey, TContext> ComposeStackFrame(DfsNode`2<TOffset, TKey> node, bool minusesPhase, SubtreeContextManager`3<TOffset, TKey, TContext> contextManager);
    private void UpdateCurrentOffset(OffsetWithExclude& currentOffset, TOffset offset, bool exclude);
    private Nullable`1<int> CalculateUsingSubtraction(TOffset originOffset, int originIndex, TOffset targetOffset);
    private Nullable`1<int> IndexOfOffset(DfsNode`2[] nodes, Bounds currentBounds, TOffset targetOffset);
    private void TryUpdateLeftIndexToOffset(DfsNode`2[] nodes, Bounds& currentBounds, TOffset offset, bool exclude);
    private int BinarySearch(DfsNode`2[] nodes, Bounds currentBounds, TOffset offset);
    private void TryUpdateRightIndexToOffset(DfsNode`2[] nodes, TOffset offset, bool exclude, Bounds& currentBounds);
    public Pair`2<OffsetAndKey`2<TOffset, TKey>, Nullable`1<OffsetAndKey`2<TOffset, TKey>>> GetParentOffsetByPredicate(Lifetime parentLifetime, TOffset offset, Predicate`1<TKey> predicate);
    private Nullable`1<OffsetAndKey`2<TOffset, TKey>> GetParentByPredicate(DfsNode`2<TOffset, TKey> node, DfsForwardEnumerator`2<TOffset, DfsNode`2<TOffset, TKey>> nodesEnumerator, Predicate`1<TKey> predicate);
    public void ValidateAccessData(IEnumerable`1<TOffset> ptrs, List`1<TOffset> minuses);
    [CompilerGeneratedAttribute]
private UserFeedBack`1<TOffset> <GetChildrenImpl>b__15_0(DfsNode`2<TOffset, TKey> _, Bounds treeBounds, DfsNode`2[] nodes, TVoid _, List`1<int> selected);
}
[ThreadSafeAttribute]
public class JetBrains.DotTrace.Dal.Common.Tree.Dfs.CommonDfsLogic`2 : object {
    public static int DefaultOffsetsBufferSize;
    private CommonCoreDfsLogic`2<TOffset, TKeyRaw> myCore;
    private IAccessor`1<IBatchHeadersReader`2<TOffset, TKeyRaw>> myHeadersReaderAccessor;
    private ObjectPool`1<TOffset[]> myOffsetBuffers;
    private ObjectPool`1<List`1<Pair`2<TOffset, TOffset>>> myPairsLists;
    private ConditionalLog myLog;
    private TOffset myMinOffset;
    private SubtractOffset`1<TOffset> mySubtractor;
    private Func`3<TOffset, TOffset, bool> myIsNextOffsetForward;
    private Func`3<TOffset, TOffset, bool> myIsNextOffsetBackward;
    [CompilerGeneratedAttribute]
private IComparer`1<TOffset> <Comparer>k__BackingField;
    [CompilerGeneratedAttribute]
private ReverseComparer`1<TOffset> <ReverseComparer>k__BackingField;
    public IComparer`1<TOffset> Comparer { get; }
    public ReverseComparer`1<TOffset> ReverseComparer { get; }
    public CommonDfsLogic`2(IAccessor`1<IBatchNodesReader`2<TOffset, TKeyRaw>> nodesReaderAccessor, IAccessor`1<IBatchHeadersReader`2<TOffset, TKeyRaw>> headersReaderAccessor, IComparer`1<TOffset> comparer, TOffset minOffset, TOffset invalidOffset, SubtractOffset`1<TOffset> subtractor, int nodesBufferSize, int offsetsBufferSize);
    [CompilerGeneratedAttribute]
public IComparer`1<TOffset> get_Comparer();
    [CompilerGeneratedAttribute]
public ReverseComparer`1<TOffset> get_ReverseComparer();
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Dal.Common.Tree.Dfs.CommonDfsLogic`2/<GetTopLevelDescendantsForFuid>d__17")]
public IEnumerable`1<PlusOrMinus`1<TOffset>> GetTopLevelDescendantsForFuid(TKeyRaw fuid, IEnumerable`1<TOffset> ptrs, List`1<TOffset> minuses);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Dal.Common.Tree.Dfs.CommonDfsLogic`2/<GetNodeAndNearestAncestorByPredicateForFuid>d__18")]
public IEnumerable`1<Pair`2<OffsetAndKey`2<TOffset, TKeyRaw>, Nullable`1<OffsetAndKey`2<TOffset, TKeyRaw>>>> GetNodeAndNearestAncestorByPredicateForFuid(IEnumerable`1<TOffset> roots, TKeyRaw fuid, Predicate`1<TKeyRaw> predicate);
    private HeaderEnumerator`2<TOffset, TKeyRaw> BuildHeaderEnumerator(TransientLifetime lifetime, TKeyRaw fuid);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Dal.Common.Tree.Dfs.CommonDfsLogic`2/<GetAllAccessPointersForFuid>d__20")]
public IEnumerable`1<PlusOrMinus`1<TOffset>> GetAllAccessPointersForFuid(TKeyRaw fuid, IEnumerable`1<TOffset> ptrs, List`1<TOffset> minuses);
    public void GetAllAccessAndMinusPointersForFuid(TKeyRaw fuid, IEnumerable`1<TOffset> ptrsInput, List`1<TOffset> minusesInput, TOffset[]& ptrsOutput, List`1& recursivePtrs);
    public List`1<TOffset> MergeMinuses(IEnumerable`1<TOffset> firstMinuses, IEnumerable`1<TOffset> secondMinuses);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Dal.Common.Tree.Dfs.CommonDfsLogic`2/<EnumerateAccessAndMinusPointersForIndex>d__23")]
private IEnumerable`1<PlusOrMinus`1<TOffset>> EnumerateAccessAndMinusPointersForIndex(Lifetime parentLifetime, IEnumerable`1<TOffset> ptrs, List`1<TOffset> minuses, Action`1<TOffset> forEachMinus, HeaderEnumerator`2<TOffset, TKeyRaw> indexEnumerator, bool onlyTopLevels, bool excludeRoots);
    public IEnumerable`1<PlusOrMinus`1<TOffset>> GetTopLevelMinusesDescendants(IEnumerable`1<TOffset> ptrs, List`1<TOffset> minuses);
    public IEnumerable`1<PlusOrMinus`1<TOffset>> GetChildren(IEnumerable`1<TOffset> ptrs, List`1<TOffset> minuses);
    public IEnumerable`1<PlusOrMinus`1<TOffset>> GetSubtrees(Lifetime parentLifetime, IEnumerable`1<TOffset> roots, List`1<TOffset> minuses, ProcessSubtreePart`3<TOffset, TKeyRaw, TContext> processor, int readCount, SubtreeContextManager`3<TOffset, TKeyRaw, TContext> subtreeContextManager, bool excludeRoots, bool yieldMinusesMode);
    public bool IsOneOfMinuses(TOffset ptr, List`1<TOffset> minuses);
    public IEnumerable`1<PlusOrMinus`1<TOffset>> GetTopLevelDescendantsForPredicate(IEnumerable`1<TOffset> ptrs, List`1<TOffset> minuses, Func`3<TOffset, TKeyRaw, bool> predicate, FastSkipLogic`1<TOffset> fastSkip);
    public IEnumerable`1<TOffset> GetTopLevelPointers(IEnumerable`1<TOffset> ptrs);
    public IEnumerable`1<PlusOrMinus`1<TOffset>> MergePointers(IEnumerable`1<PlusOrMinus`1<TOffset>> ptrs1, IEnumerable`1<PlusOrMinus`1<TOffset>> ptrs2);
    public void ProcessSubtreesForward(Lifetime parentLifetime, List`1<RootAndRange`1<TOffset>> selectedRangesAndRoots, IBatchReader`2<TOffset, TKeyRaw> keyRemapping, IBatchReader`2<TOffset, TPayload> payloadsReader, IBatchReader`2<TOffset, SubsystemIndex> subsystemsReader, ProcessSubtreePartForward`3<TOffset, TKeyRaw, TPayload> processor, IExecutionController controller);
    public void GetSubtreesRanges(Lifetime lifetime, IEnumerable`1<TOffset> ptrs, List`1<TOffset> minuses, bool excludeRoots, RangeList`1<TOffset> result);
    public void GetSubtreesRangesAndRoots(Lifetime lifetime, IEnumerable`1<TOffset> ptrs, List`1<TOffset> minuses, List`1<RootAndRange`1<TOffset>> result);
    public void GetSubtreesPowers(IEnumerable`1<TOffset> ptrs, List`1<TOffset> minuses, Dictionary`2<TOffset, long> powerPerPtr, Int64& totalPower);
    public RangeList`1<TOffset> CreateBackwardRangeList();
    public LifetimedResource`1<RangeList`1<TOffset>> CreateLifetimedForwardRangeList();
    public RangeList`1<TOffset> CreateForwardRangeList();
    public void ValidateAccessData(IEnumerable`1<TOffset> ptrs, List`1<TOffset> minuses);
    [CompilerGeneratedAttribute]
private int <MergePointers>b__30_0(PlusOrMinus`1<TOffset> offset1, PlusOrMinus`1<TOffset> offset2);
}
public class JetBrains.DotTrace.Dal.Common.Tree.Dfs.DfsAlgorithms`1 : object {
    private IComparer`1<TOffset> myAssertComparer;
    private CommonDfsLogic`2<TOffset, FunctionUID> myLogic;
    private ObjectPool`1<List`1<RootAndRange`1<TOffset>>> myRootsAndRangesPool;
    private ObjectPool`1<List`1<TOffset>> myPtrsListPool;
    private ObjectPool`1<Dictionary`2<FunctionUID, TOffset>> myFuidToLeftOffsetsPool;
    private ObjectPool`1<Dictionary`2<int, TOffset>> myClassIdToLeftOffsetsPool;
    private ObjectPool`1<SubtreeContext<TOffset>> mySubtreeContextPool;
    public DfsAlgorithms`1(CommonDfsLogic`2<TOffset, FunctionUID> logic);
    private Predicate`1<TOffset> SubtreeContainsPredicate(AccessData`1<TOffset> accessData);
    public sealed virtual void ProcessRangesWithSubsystems(IEnumerable`1<TOffset> ptrs, Func`2<FunctionUID, SubsystemUsageInfoData> getSubsystemUsageInfo, Action`2<SubsystemUsageInfoData, RangeList`1<TOffset>> subsystemRangeAction, IExecutionController controller);
    public sealed virtual Predicate`1<TOffset> SubtreeContainsPredicate(AccessData`1<TOffset> accessData, SubsystemKeysSet subsystemsKeysSet, SubsystemsCache`1<TOffset> subsystemCache, IExecutionController controller);
    public sealed virtual void CalculatePayloads(AccessData`1<TOffset> accessData, CalculationTargets targets, OwnPayloadsData`2<TOffset, TPayload> payloads, SubsystemsCache`1<TOffset> subsystemCache, IDataMapper`2<FunctionUID, bool> systemness, TPayloadPredicates payloadPredicates, IBatchReader`2<TOffset, FunctionUID> keyRemapping, IDataMapper`2<FunctionUID, int> fuidToClassId, IExecutionController controller, FlatPayloads`2<FunctionUID, TPayload> calculationResult);
    private void CalculatePayloadsImpl(Lifetime lifetime, IEnumerable`1<TOffset> ptrs, List`1<TOffset> minuses, CalculationTargets targets, OwnPayloadsData`2<TOffset, TPayload> payloads, SubsystemsCache`1<TOffset> subsystemCache, IDataMapper`2<FunctionUID, bool> systemness, TPayloadPredicates payloadPredicates, IBatchReader`2<TOffset, FunctionUID> keyRemapping, IDataMapper`2<FunctionUID, int> fuidToClassId, IExecutionController controller, FlatPayloads`2<FunctionUID, TPayload> calculationResult);
    private SubtreeContextManager`3<TOffset, FunctionUID, SubtreeContext<TOffset>> CreateContextManager();
    public sealed virtual void FilterPayloadsBySubsystems(IEnumerable`1<TOffset> ptrs, SubsystemKeysSet subsystemsKeysSet, SubsystemsCache`1<TOffset> subsystemCache, IBatchReader`2<TOffset, DotTraceDalPayload> ownPayloadsReader, WritePayloadsBatch`1<TOffset> filteredPayloadsWriter, IExecutionController controller);
    [CompilerGeneratedAttribute]
private SubtreeContext<TOffset> <.ctor>b__7_4();
    [CompilerGeneratedAttribute]
private SubtreeContext<TOffset> <CreateContextManager>b__17_0(DfsNode`2<TOffset, FunctionUID> root, bool phase);
    [CompilerGeneratedAttribute]
private void <CreateContextManager>b__17_1(SubtreeContext<TOffset> context);
}
public class JetBrains.DotTrace.Dal.Common.Tree.Dfs.DfsBackwardEnumerator`2 : object {
    private ConditionalLog myLog;
    private ReadFromOffsetIncluding`1<TOffset> myReader;
    private SubtractOffset`1<TOffset> mySubtractor;
    private TOffset myBufferRightOffset;
    private int myCurrentLeftIndex;
    private int myReadCount;
    [CompilerGeneratedAttribute]
private TData[] <Data>k__BackingField;
    public TData[] Data { get; }
    public DfsBackwardEnumerator`2(IBatchReader`2<TOffset, TData> reader, SubtractOffset`1<TOffset> subtractor, TData[] buffer);
    [CompilerGeneratedAttribute]
public TData[] get_Data();
    public Bounds GetBounds(TOffset rightOffset, bool exclude, int readCount);
    private int GetIndex(TOffset rightOffset, bool exclude, int readCount);
}
public class JetBrains.DotTrace.Dal.Common.Tree.Dfs.DfsForwardEnumerator`2 : object {
    private ConditionalLog myLog;
    private ReadFromOffsetIncluding`1<TOffset> myReader;
    private SubtractOffset`1<TOffset> mySubtractor;
    private Nullable`1<TOffset> myCurrentOffset;
    private int myCurrentCount;
    [CompilerGeneratedAttribute]
private TData[] <Data>k__BackingField;
    public TData[] Data { get; }
    public DfsForwardEnumerator`2(IBatchReader`2<TOffset, TData> reader, SubtractOffset`1<TOffset> subtractor, TData[] data);
    [CompilerGeneratedAttribute]
public TData[] get_Data();
    public Bounds GetBounds(TOffset offset, bool exclude);
    private void Reset();
    private int GetIndex(TOffset offset, bool exclude);
}
public class JetBrains.DotTrace.Dal.Common.Tree.Dfs.DfsMinuses`1 : object {
    [NotNullAttribute]
private List`1<TOffset> myList;
    private DfsMinuses`1(List`1<TOffset> minuses);
    public static void ExtractOffsetsAndMinuses(AccessData`1<TOffset> accessData, IEnumerable`1& offsets, List`1& minuses);
    public static List`1<TOffset> ExtractMinuses(IMinuses`1<TOffset> minuses);
    public static DfsMinuses`1<TOffset> BuildMinusesContainer(List`1<TOffset> minusPtrs);
    public sealed virtual List`1<TOffset> AsList();
    public sealed virtual IEnumerator`1<TOffset> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Dal.Common.Tree.Dfs.DfsReadersEx : object {
    [ExtensionAttribute]
public static CommonDfsLogic`2<TOffset, FunctionUID> CreateCommonDfsLogic(IDfsReaders`1<TOffset> readers, int nodesBufferSize, int offsetsBufferSize);
}
public class JetBrains.DotTrace.Dal.Common.Tree.Dfs.FastSkipLogic`1 : object {
    [NotNullAttribute]
public Func`2<TOffset, TOffset> FastSkipPredicate;
    public int FastSkipNodeCount;
    public FastSkipLogic`1(Func`2<TOffset, TOffset> fastSkipPredicate, int fastSkipNodeCount);
}
public class JetBrains.DotTrace.Dal.Common.Tree.Dfs.OffsetAndKey`2 : ValueType {
    public TOffset Offset;
    public TKey Key;
    [LocalizableAttribute("False")]
public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Dal.Common.Tree.Dfs.OffsetAndKeyEx : object {
    [ExtensionAttribute]
public static OffsetAndKey`2<TOffset, TKey> ToOffsetAndKey(DfsNode`2<TOffset, TKey> node);
}
public class JetBrains.DotTrace.Dal.Common.Tree.Dfs.ProcessSubtreePart`3 : MulticastDelegate {
    public ProcessSubtreePart`3(object object, IntPtr method);
    public virtual UserFeedBack`1<TOffset> Invoke(DfsNode`2<TOffset, TKey> root, Bounds bounds, DfsNode`2[] nodes, TContext context, List`1<int> yieldSelected);
    public virtual IAsyncResult BeginInvoke(DfsNode`2<TOffset, TKey> root, Bounds bounds, DfsNode`2[] nodes, TContext context, List`1<int> yieldSelected, AsyncCallback callback, object object);
    public virtual UserFeedBack`1<TOffset> EndInvoke(IAsyncResult result);
}
public class JetBrains.DotTrace.Dal.Common.Tree.Dfs.ProcessSubtreePartForward`3 : MulticastDelegate {
    public ProcessSubtreePartForward`3(object object, IntPtr method);
    public virtual void Invoke(TOffset root, Bounds bounds, DfsNode`2[] nodes, TPayload[] payloads, SubsystemIndex[] subsystems);
    public virtual IAsyncResult BeginInvoke(TOffset root, Bounds bounds, DfsNode`2[] nodes, TPayload[] payloads, SubsystemIndex[] subsystems, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class JetBrains.DotTrace.Dal.Common.Tree.Dfs.RecursiveRootNotCoveredByMinusesException : ApplicationException {
}
public static class JetBrains.DotTrace.Dal.Common.ZippedSnapshot : object {
    private static ILogger ourLog;
    private static string Format;
    public static String[] IndexFileExtensions;
    private static ZippedSnapshot();
    public static Nullable`1<Guid> TryGetSnapshotGuid(FileSystemPath snapshotPath);
    public static void Compress(FileSystemPath source, FileSystemPath target, IProgressIndicator progressIndicator);
    private static ZipFile CreateZipFile();
    public static void Extract(Lifetime lifetime, FileSystemPath inputFilePath, FileSystemPath unpackedIndexFile, IProgressIndicator progress);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Dal.Performance.Metadata.PerformanceMetadataEx : object {
    [ExtensionAttribute]
public static ModuleUID GetModuleUid(SectionIndex`1<IMetadataSection> metadataIndex);
}
public class JetBrains.DotTrace.Dal.Performance.Metadata.PerformanceMetadataManager : object {
    private IFuidToMetadataIdConverter myFuidToMetadataConverter;
    private IModulePathSection myProfilerModulePathSection;
    private IMetadataSectionAssemblyProvider myAssemblyProvider;
    private IMetadataSection myMetadataSection;
    private ISnapshotMasksComponent mySnapshotMasksComponent;
    private IThreadFuidToNameDictionary myThreadFuidToName;
    private SignaturePresenter mySignaturePresenter;
    private Dictionary`2<ModuleUID, ModuleInfo> myAllModulesInfoDictionary;
    private ILogger myLogger;
    public PerformanceMetadataManager(IModulePathSection modulePathSectionContainer, IFuidToMetadataIdConverter fuidToMetadataSectionContainer, IMetadataSectionAssemblyProvider assemblyProvider, IEnumerable`1<KeyValuePair`2<SectionIndex`1<IMetadataSection>, IModuleInfo>> allMetadata, IMetadataSection metadataSection, ISnapshotMasksComponent snapshotMasksComponent, IThreadFuidToNameDictionary threadFuidToName);
    private static Dictionary`2<ModuleUID, ModuleInfo> GetAllModulesInfoDictionary(IEnumerable`1<KeyValuePair`2<SectionIndex`1<IMetadataSection>, IModuleInfo>> allMetadata, Func`2<SectionIndex`1<IMetadataSection>, FileSystemPath> func);
    public sealed virtual CallFrameInfo GetCallFrameInfo(FunctionUID fuid);
    public sealed virtual string GetPresentableSignature(FunctionUID fuid);
    public sealed virtual Nullable`1<ModuleInfo> GetModuleInfo(FunctionUID fuid);
    public sealed virtual Nullable`1<ModuleUID> GetModuleUID(FunctionUID fuid);
    public sealed virtual SourceViewNavigationInfo GetSourceViewNavigationInfo(FunctionUID fuid);
    public sealed virtual bool TreatMethodAsSystem(FunctionUID fuid);
    private bool TryGetMetadataId(FunctionUID fuid, MetadataId& metadataId);
    private CoreMetadataInfoProvider BuildInfoProvider(IMetadataSectionAssemblyProvider metadataProvider);
    [CompilerGeneratedAttribute]
private FileSystemPath <.ctor>b__9_0(SectionIndex`1<IMetadataSection> id);
}
public class JetBrains.DotTrace.Dal.Performance.Metadata.PerformanceMetadataManagerAccessor : object {
    private IFuidToMetadataIdConverter myFuidToMetadataConverter;
    private IModulePathSection myProfilerModulePathSection;
    private IMetadataSection myMetadataSection;
    private ISnapshotMasksComponent mySnapshotMasksComponent;
    private IThreadFuidToNameDictionary myThreadFuidToName;
    public PerformanceMetadataManagerAccessor(IModulePathSection modulePathSection, IFuidToMetadataIdConverter fuidToMetadataSection, IMetadataSection metadataSection, ISnapshotMasksComponent snapshotMasksComponent, IThreadFuidToNameDictionary threadFuidToName);
    private sealed virtual override IMetadataManager JetBrains.Common.Util.IAccessor<JetBrains.DotTrace.DalInterface.Common.Metadata.IMetadataManager>.Get(Lifetime lifetime);
    private PerformanceMetadataManager BuildMetadataManager(Lifetime lifetime);
    [LocalizableAttribute("False")]
public virtual string ToString();
}
public abstract class JetBrains.DotTrace.Dal.Performance.Metadata.PerformanceNavigationInfoAccessor : object {
    private AssemblyInfoDatabase myAssemblyInfoDatabase;
    private IFuidToMetadataIdConverter myFuidToMetadataConverter;
    private IModulePathSection myProfilerModulePathSection;
    private IMetadataSection myMetadataSection;
    [CanBeNullAttribute]
private ISnapshotMasksComponent mySnapshotMasksComponent;
    protected PerformanceNavigationInfoAccessor(AssemblyInfoDatabase assemblyInfoDatabase, IModulePathSection modulePathSection, IFuidToMetadataIdConverter fuidToMetadataSection, IMetadataSection metadataSection, ISnapshotMasksComponent snapshotMasksComponent);
    private sealed virtual override INavigationInfoProvider JetBrains.Common.Util.IAccessor<JetBrains.DotTrace.DalInterface.Common.Metadata.INavigationInfoProvider>.Get(Lifetime lifetime);
}
public class JetBrains.DotTrace.Dal.Performance.Metadata.PerformanceNavigationInfoProvider : object {
    private IFuidToMetadataIdConverter myFuidToMetadataConverter;
    private IMetadataSectionAssemblyProvider myAssemblyProvider;
    [CanBeNullAttribute]
private ISnapshotMasksComponent mySnapshotMasks;
    private CoreFunctionNavigationInfoMapper myCoreFunctionNavigationInfoMapper;
    public PerformanceNavigationInfoProvider(IFuidToMetadataIdConverter fuidToMetadataSectionContainer, IMetadataSectionAssemblyProvider assemblyProvider, ISnapshotMasksComponent snapshotMasks);
    public sealed virtual CallTreeNavigationInfo GetNavigationInfo(FunctionUID fuid);
    private CoreFunctionNavigationInfoMapper BuildCoreNavigationInfoMapper();
}
public class JetBrains.DotTrace.Dal.Performance.RemoteTree.CoreLogic.DotTraceBatchHeadersReader : object {
    private ICallTreeAndIndexesSnapshotAccessor myAccessor;
    public DotTraceBatchHeadersReader(ICallTreeAndIndexesSnapshotAccessor accessor);
    public sealed virtual int ReadHeadersOffsetsDescending(FunctionUID key, CallTreeSectionOffset from, int count, CallTreeSectionOffset[] offsets);
    public sealed virtual int ReadHeadersOffsetsDescending(FunctionUID key, CallTreeSectionOffset from, int count, int arrayLength, CallTreeSectionOffset[] offsets);
    private static int ReadHeadersOffsetsDescendingImpl(Func`2<Lifetime, IInMemoryStream> reader, Nullable`1<CallTreeSectionOffset> single, Nullable`1<FunctionHeaderData> header, CallTreeSectionOffset from, int count, CallTreeSectionOffset[] offsets, int startOutputIndex);
}
public class JetBrains.DotTrace.Dal.Performance.RemoteTree.CoreLogic.DotTraceBatchNodesReaderBase`1 : object {
    private ICallTreeAndIndexesSnapshotAccessor mySectionsAccessor;
    private BatchReaderDelegate`1<T> myReverseReader;
    private BatchReaderDelegate`1<T> myForwardReader;
    protected DotTraceBatchNodesReaderBase`1(ICallTreeAndIndexesSnapshotAccessor callTreeReader, BatchReaderDelegate`1<T> reverseReader, BatchReaderDelegate`1<T> forwardReader);
    public sealed virtual int ReadBackwardOffsetsAscending(CallTreeSectionOffset to, int count, T[] nodes, int destEndIndex);
    public sealed virtual int ReadForwardOffsetsAscending(CallTreeSectionOffset from, int count, T[] nodes, int destStartIndex);
    private int ReadAll(CallTreeSectionOffset offset, int count, T[] nodes, int outBufferRestriction, BatchReaderDelegate`1<T> reader, bool readingForward);
    private int ReadGroup(int groupId, Nullable`1<CallTreeSectionOffset> offset, int count, T[] nodes, int outBufferRestriction, int bufferOffset, BatchReaderDelegate`1<T> reader, bool readingForward);
}
public class JetBrains.DotTrace.Dal.Performance.RemoteTree.CoreLogic.DotTraceDfsNodeBatchReader : DotTraceBatchNodesReaderBase`1<DfsNode`2<CallTreeSectionOffset, FunctionUID>> {
    public DotTraceDfsNodeBatchReader(ICallTreeAndIndexesSnapshotAccessor accessor);
}
public class JetBrains.DotTrace.Dal.Performance.RemoteTree.CoreLogic.DotTraceDfsReaders : object {
    private ICallTreeAndIndexesSnapshotAccessor myAccessor;
    private IBatchNodesReader`1<CallTreeSectionOffset> myNodesReader;
    private IBatchHeadersReader`1<CallTreeSectionOffset> myHeadersReader;
    private CallTreeSectionOffset myMinOffset;
    public CallTreeSectionOffset MinOffset { get; }
    public CallTreeSectionOffset InvalidOffset { get; }
    public IComparer`1<CallTreeSectionOffset> Comparer { get; }
    public SubtractOffset`1<CallTreeSectionOffset> Subtractor { get; }
    public DotTraceDfsReaders(ICallTreeAndIndexesSnapshotAccessor accessor);
    public sealed virtual IBatchNodesReader`1<CallTreeSectionOffset> GetNodesReaders(Lifetime lifetime);
    public sealed virtual IBatchHeadersReader`1<CallTreeSectionOffset> GetHeadersReaders(Lifetime lifetime);
    public sealed virtual IDataMapper`2<CallTreeSectionOffset, FunctionUID> GetIndexToFuidMap(Lifetime lifetime);
    public sealed virtual IDataMapper`2<CallTreeSectionOffset, CallTreeSectionOffset> GetIndexToParentMap(Lifetime lifetime);
    public sealed virtual IDataMapper`2<CallTreeSectionOffset, bool> GetIsRootPointer();
    public sealed virtual CallTreeSectionOffset get_MinOffset();
    public sealed virtual CallTreeSectionOffset get_InvalidOffset();
    public sealed virtual IComparer`1<CallTreeSectionOffset> get_Comparer();
    public sealed virtual SubtractOffset`1<CallTreeSectionOffset> get_Subtractor();
    private DfsNode`2<CallTreeSectionOffset, FunctionUID> ReadSingleNode(CallTreeSectionOffset offset);
    [CompilerGeneratedAttribute]
private FunctionUID <GetIndexToFuidMap>b__7_0(CallTreeSectionOffset offset);
    [CompilerGeneratedAttribute]
private CallTreeSectionOffset <GetIndexToParentMap>b__8_0(CallTreeSectionOffset offset);
    [CompilerGeneratedAttribute]
private bool <GetIsRootPointer>b__9_0(CallTreeSectionOffset offset);
    [CompilerGeneratedAttribute]
private SubtractResult <get_Subtractor>b__17_0(CallTreeSectionOffset minuend, CallTreeSectionOffset subtrahend);
}
public class JetBrains.DotTrace.Dal.Performance.RemoteTree.CoreLogic.InjectInfoOffsetReader : DotTraceBatchNodesReaderBase`1<InjectInfoSectionOffset> {
    public InjectInfoOffsetReader(ICallTreeAndIndexesSnapshotAccessor reader);
}
public class JetBrains.DotTrace.Dal.Performance.RemoteTree.CoreLogic.InjectReader : object {
    private IInjectInfoSnapshotAccessor myInjectAccessor;
    public InjectReader(IInjectInfoSnapshotAccessor injectAccessor);
    public sealed virtual bool TryFillArray(InjectInfoSectionOffset key, ArrayBuffer`1<DotTraceFullPayload> buffer);
}
public static class JetBrains.DotTrace.Dal.Performance.RemoteTree.CoreLogic.LowLevelBatchReaders : object {
    private static int InvalidGroupMask;
    public static int ReadNodesReverse(IInMemoryStream stream, DfsNode`2[] buffer, int outputBufferLength, int rightBufferOffset, CallTreeSectionOffset offset, int count, CallTreeHeaderFull sectionHeader);
    public static int ReadNodesForward(IInMemoryStream stream, DfsNode`2[] buffer, int destStartingIndex, int leftBufferOffset, CallTreeSectionOffset leftOffset, int count, CallTreeHeaderFull sectionHeader);
    private static int ReadDfsNodes(Byte* sourcePtr, Byte* sourceEndPtr, int sourceRecordSize, Byte* destPtr, Byte* destEndPtr, int destRecordSize, long startOffset, CallTreeHeaderFull* callTreeHeaderData);
    public static int ReadNodesReverse(IInMemoryStream stream, DotTraceDalPayload[] buffer, int outputBufferLength, int rightBufferOffset, CallTreeSectionOffset offset, int count, CallTreeHeaderFull sectionHeader);
    public static int ReadNodesForward(IInMemoryStream stream, DotTraceDalPayload[] buffer, int destStartingIndex, int leftBufferOffset, CallTreeSectionOffset leftOffset, int count, CallTreeHeaderFull sectionHeader);
    private static int ReadNodePayloads(Byte* sourcePtr, Byte* sourceEndPtr, int sourceRecordSize, Byte* destPtr, Byte* destEndPtr, int destRecordSize, long startOffset, CallTreeHeaderFull* callTreeHeaderData);
    public static int ReadNodesReverseTotal(IInMemoryStream stream, DotTracePayload[] buffer, int outputBufferLength, int rightBufferOffset, CallTreeSectionOffset offset, int count, CallTreeHeaderFull sectionHeader);
    public static int ReadNodesReverseOwn(IInMemoryStream stream, DotTracePayload[] buffer, int outputBufferLength, int rightBufferOffset, CallTreeSectionOffset offset, int count, CallTreeHeaderFull sectionHeader);
    private static int ReadNodesReverseCore(IInMemoryStream stream, DotTracePayload[] buffer, int outputBufferLength, int rightBufferOffset, CallTreeSectionOffset offset, int count, CallTreeHeaderFull sectionHeader, LowLevelReader reader);
    public static int ReadNodesForwardTotal(IInMemoryStream stream, DotTracePayload[] buffer, int destStartingIndex, int leftBufferOffset, CallTreeSectionOffset leftOffset, int count, CallTreeHeaderFull sectionHeader);
    public static int ReadNodesForwardOwn(IInMemoryStream stream, DotTracePayload[] buffer, int destStartingIndex, int leftBufferOffset, CallTreeSectionOffset leftOffset, int count, CallTreeHeaderFull sectionHeader);
    private static int ReadNodesForwardCore(IInMemoryStream stream, DotTracePayload[] buffer, int destStartingIndex, int leftBufferOffset, CallTreeSectionOffset leftOffset, int count, CallTreeHeaderFull sectionHeader, LowLevelReader reader);
    private static int ReadDotTracePayloadsTotal(Byte* sourcePtr, Byte* sourceEndPtr, int sourceRecordSize, Byte* destPtr, Byte* destEndPtr, int destRecordSize, long startOffset, CallTreeHeaderFull* callTreeHeaderData);
    private static int ReadDotTracePayloadsOwn(Byte* sourcePtr, Byte* sourceEndPtr, int sourceRecordSize, Byte* destPtr, Byte* destEndPtr, int destRecordSize, long startOffset, CallTreeHeaderFull* callTreeHeaderData);
    public static int ReadInjectInfoOffsetReverse(IInMemoryStream stream, InjectInfoSectionOffset[] buffer, int outputBufferLength, int rightBufferOffset, CallTreeSectionOffset offset, int count, CallTreeHeaderFull sectionHeader);
    public static int ReadInjectInfoOffsetForward(IInMemoryStream stream, InjectInfoSectionOffset[] buffer, int destStartingIndex, int leftBufferOffset, CallTreeSectionOffset leftOffset, int count, CallTreeHeaderFull sectionHeader);
    private static int ReadMeasureInfo(Byte* sourcePtr, Byte* sourceEndPtr, int sourceRecordSize, Byte* destPtr, Byte* destEndPtr, int destRecordSize, long startOffset, CallTreeHeaderFull* callTreeHeaderData);
}
public static class JetBrains.DotTrace.Dal.Performance.RemoteTree.CoreLogic.LowLevelInjectInfoReaders : object {
    public static int ReadNodes(IInMemoryStream stream, InjectInfoSectionOffset offset, InjectHeader injectHeader, ArrayBuffer`1<DotTraceFullPayload> arrayBuffer);
    private static int InjectArrayReader(Byte* sourcePtr, Byte* sourceEndPtr, int sourceRecordSize, Byte* destPtr, Byte* destEndPtr, int destRecordSize, InjectHeader* injectHeader);
}
public class JetBrains.DotTrace.Dal.Performance.RemoteTree.CoreLogic.MeasureDataReader : object {
    private ITryGetValue`2<CallTreeSectionOffset, InjectInfoSectionOffset> myInjectInfoOffsets;
    private ITryFillArray`2<InjectInfoSectionOffset, DotTraceFullPayload> myInjectReader;
    public MeasureDataReader(ITryGetValue`2<CallTreeSectionOffset, InjectInfoSectionOffset> injectInfoOffsets, ITryFillArray`2<InjectInfoSectionOffset, DotTraceFullPayload> injectReader);
    public sealed virtual bool TryFillArray(CallTreeSectionOffset key, ArrayBuffer`1<DotTraceFullPayload> buffer);
    public ITryFillArray`2<CallTreeSectionOffset, DotTraceFullPayload> Get(Lifetime lifetime);
}
public class JetBrains.DotTrace.Dal.Performance.RemoteTree.CoreLogic.NodePayloadBatchReaderOwn : DotTraceBatchNodesReaderBase`1<DotTracePayload> {
    public NodePayloadBatchReaderOwn(ICallTreeAndIndexesSnapshotAccessor reader);
}
public class JetBrains.DotTrace.Dal.Performance.RemoteTree.CoreLogic.NodePayloadBatchReaderPositivePayload : DotTraceBatchNodesReaderBase`1<DotTraceDalPayload> {
    public NodePayloadBatchReaderPositivePayload(ICallTreeAndIndexesSnapshotAccessor reader);
}
public class JetBrains.DotTrace.Dal.Performance.RemoteTree.CoreLogic.NodePayloadBatchReaderTotal : DotTraceBatchNodesReaderBase`1<DotTracePayload> {
    public NodePayloadBatchReaderTotal(ICallTreeAndIndexesSnapshotAccessor reader);
}
public class JetBrains.DotTrace.Dal.Performance.RemoteTree.CoreLogic.SingleNodeReader`2 : object {
    [ThreadStaticAttribute]
private static TResult[] ourArray;
    private IBatchReader`2<TPtr, TResult> myBatchReader;
    public SingleNodeReader`2(IBatchReader`2<TPtr, TResult> batchReader);
    public sealed virtual bool TryGetValue(TPtr key, TResult& value);
}
public static class JetBrains.DotTrace.Dal.Performance.RemoteTree.CoreLogic.SingleNodeReaderHelper`1 : object {
    [ThreadStaticAttribute]
private static T[] ourArray;
    public static T ReadSingleNode(CallTreeSectionOffset offset, Func`5<CallTreeSectionOffset, int, T[], int, int> reader);
}
public class JetBrains.DotTrace.Dal.Performance.SectionReaders.CallTreeOffsetReader : object {
    private int myGroupId;
    private Int64Reader myReader;
    public byte SizeOf { get; }
    public CallTreeOffsetReader(byte sizeOf, int groupId);
    public byte get_SizeOf();
    public CallTreeSectionOffset ReadOffset(BinaryReader reader);
}
public static class JetBrains.DotTrace.Dal.Performance.SectionReaders.CalltreeSectionAsStreamReader : object {
    public static int ReadNodes(IInMemoryStream stream, CallTreeSectionNode[] buffer, CallTreeSectionOffset leftOffset, CallTreeSectionOffset offset, int count, CallTreeHeaderFull sectionHeader);
    public static int ReadNodesReverse(IInMemoryStream stream, CallTreeSectionNode[] buffer, CallTreeSectionOffset leftOffset, CallTreeSectionOffset offset, int count, CallTreeHeaderFull sectionHeader);
    public static int ReadNodes(IInMemoryStream stream, CallTreeSectionNodeSimple[] buffer, CallTreeSectionOffset leftOffset, CallTreeSectionOffset offset, int count, CallTreeHeaderFull sectionHeader);
    public static int ReadNodes(IInMemoryStream stream, FunctionId[] buffer, CallTreeSectionOffset leftOffset, CallTreeSectionOffset offset, int count, CallTreeHeaderFull sectionHeader);
    public static int ReadNodesReverse(IInMemoryStream stream, FunctionId[] buffer, CallTreeSectionOffset leftOffset, CallTreeSectionOffset offset, int count, CallTreeHeaderFull sectionHeader);
    public static int ReadNodesReverseCore(IInMemoryStream stream, Byte* bufferEnd, int structSize, CallTreeSectionOffset leftOffset, CallTreeSectionOffset offset, int count, LowLevelReader reader, CallTreeHeaderFull fullHeader);
    public static int ReadNodesCore(IInMemoryStream stream, Byte* buff, int structSize, CallTreeSectionOffset leftOffset, CallTreeSectionOffset offset, int count, LowLevelReader reader, CallTreeHeaderFull fullHeader);
    internal static int ReadTreeNodePackage(Byte* sourcePtr, Byte* sourceEndPtr, int sourceRecordSize, Byte* destPtr, Byte* destEndPtr, int destRecordSize, long startOffset, CallTreeHeaderFull* callTreeHeaderData);
    internal static int ReadTreeNodePackageSimple(Byte* sourcePtr, Byte* sourceEndPtr, int sourceRecordSize, Byte* destPtr, Byte* destEndPtr, int destRecordSize, long startOffset, CallTreeHeaderFull* callTreeHeaderData);
    internal static int ReadTreeNodePackageFuid(Byte* sourcePtr, Byte* sourceEndPtr, int sourceRecordSize, Byte* destPtr, Byte* destEndPtr, int destRecordSize, long startOffset, CallTreeHeaderFull* callTreeHeaderData);
}
public static class JetBrains.DotTrace.Dal.Performance.SectionReaders.HeaderLowlevelReader : object {
    public static int ReadNodesCore(IInMemoryStream stream, int groupId, long headerStartOffset, int start, int totalLength, int recordSize, Byte* buff, int structSize, int outputBufferCount, int callTreeOffsetSize);
    public static int ReadFast(IInMemoryStream stream, FunctionHeaderData data, int startIndexInHeader, CallTreeSectionOffset[] buffer, int startingOutputPosition);
    private static int ReadNodeRefsFast(IInMemoryStream stream, long headerStartOffset, int flagsSize, int startIndexInHeader, int refsTotal, int callTreeOffsetSize, int groupId, CallTreeSectionOffset[] buffer, int startingOutputPosition);
    private static int ReadNodesCoreReduced(IInMemoryStream stream, int groupId, long headerStartOffset, int start, int totalLength, int recordSize, Byte* buff, int structSize, int outputBufferCount, int callTreeOffsetSize);
    private static int ReadNodesCore(IInMemoryStream stream, int groupId, long headerStartOffset, int start, int totalLength, int recordSize, Byte* buff, int structSize, int outputBufferCount, int callTreeOffsetSize, ReadStructure reader);
    private static int ReadNodeRef(Byte* sourcePtr, Byte* sourceEndPtr, int sourceRecordSize, Byte* destPtr, Byte* destEndPtr, int destRecordSize, int callTreeOffsetSize, int groupId);
    private static int ReadCallTreeSectionOffsetOnly(Byte* sourcePtr, Byte* sourceEndPtr, int sourceRecordSize, Byte* destPtr, Byte* destEndPtr, int destRecordSize, int callTreeOffsetSize, int groupId);
}
public class JetBrains.DotTrace.Dal.Performance.SectionReaders.OwnPayloadsFromNodePayloadBatchReader`1 : object {
    private IReadonlyStructuredSectionMemory`1<DotTraceDalPayload> myDataSection;
    private Func`2<TOffset, int> myOffsetToIndex;
    private CallTreeFlags myNegativeFlag;
    private TakeBuffer myTakeMax;
    private BoundsCheck myTakeMaxBoundsCheck;
    private TakeBuffer myTakeBackMax;
    private BoundsCheck myTakeBackMaxBoundsCheck;
    private UnmanagedBufferClosure<TOffset> myUnmanagedBufferClosure;
    public OwnPayloadsFromNodePayloadBatchReader`1(IReadonlyStructuredSectionMemory`1<DotTraceDalPayload> dataSection, Func`2<TOffset, int> offsetToIndex, bool isNegativePayload);
    public sealed virtual int ReadBackwardOffsetsAscending(TOffset to, int count, DotTracePayload[] nodes, int destEndIndex);
    public sealed virtual int ReadForwardOffsetsAscending(TOffset from, int count, DotTracePayload[] nodes, int destStartIndex);
    private static void DalToDotTracePayload(DotTraceDalPayload* currentSrcPtr, DotTracePayload* currentDstPtr, CallTreeFlags isNegativePayload);
}
public static class JetBrains.DotTrace.Dal.Performance.SectionReaders.PerformanceEnvironmentSectionReaders : object {
    public static PerformanceEnvironmentSectionData ReadSectionV00(BinaryReader reader);
}
public static class JetBrains.DotTrace.Dal.Performance.SectionReaders.SectionHeaderReaders : object {
    public static CallTreeSectionHeader ReadCallTreeSectionHeaderV03(BinaryReader reader, int groupId);
    public static HeaderIndexData ReadHeaderIndexSectionHeaderV01(BinaryReader reader, int groupId);
    public static HeaderData ReadHeaderDataSectionHeaderV03(BinaryReader reader, int groupId);
    public static HeaderIndexOptData ReadHeaderIndexOptSectionHeaderV01(BinaryReader reader, int groupId);
    public static InjectHeader ReadInjectHeaderV00(BinaryReader reader, int groupId);
}
public class JetBrains.DotTrace.Dal.Performance.SectionReaders.TotalPayloadFromNodePayloadSection`1 : object {
    private IReadonlyStructuredSectionMemory`1<DotTraceDalPayload> myNodePayloads;
    private Func`2<TOffset, int> myOffsetToIndex;
    private CallTreeFlags myNegativeFlag;
    private int myCount;
    public TotalPayloadFromNodePayloadSection`1(IReadonlyStructuredSectionMemory`1<DotTraceDalPayload> nodePayloads, Func`2<TOffset, int> offsetToIndex, bool isNegativePayload);
    public sealed virtual bool TryGetValue(TOffset key, DotTracePayload& value);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.BothSides.CallTreeSections : GroupSectionBase`1<CallTreeSectionHeader> {
    [CanBeNullAttribute]
private static GroupSectionReader`1[] ourReaders;
    private Dictionary`2<int, int> myRecordSizes;
    private int myGroupMask;
    private ulong myFullFuidMask;
    private bool myIsNegative;
    private ulong myFuidIdentityMask;
    public int MinGroupIndex { get; }
    public int MaxGroupIndex { get; }
    public CallTreeSections(SnapshotStorageContainer container, ISnapshotMasksComponent snapshotMasks);
    private static CallTreeSections();
    public virtual CallTreeSectionHeader GetHeader(int groupId);
    public BinaryReader GetReader(int groupId);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Dal.Performance.SnapshotComponents.BothSides.CallTreeSections/<AllHeaders>d__9")]
public IEnumerable`1<CallTreeSectionHeader> AllHeaders();
    public int GroupRecordSize(int groupId);
    public int get_MinGroupIndex();
    public int get_MaxGroupIndex();
    private void ComputeGroupRecordSizes();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.BothSides.EnvironmentSectionContainerComponent : EnvironmentSectionContainer {
    public EnvironmentSectionContainerComponent(SnapshotStorageContainer container);
}
[SnapshotComponentAttribute("0")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.BothSides.FuidToMetadataSectionContainer : SectionStorageBase`1<FuidToMetadataIdConverter> {
    private static SectionStorageReader`1[] ourReaders;
    public FuidToMetadataSectionContainer(SnapshotStorageContainer container);
    private static FuidToMetadataSectionContainer();
}
[SnapshotComponentAttribute("0")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.BothSides.MetadataSectionContainer : SectionStorageBase`1<MetadataSection> {
    private static SectionStorageReader`1[] ourReaders;
    public bool HasSection { get; }
    public MetadataSectionContainer(SnapshotStorageContainer container);
    private static MetadataSectionContainer();
    public sealed virtual IMetadataSection Get(Lifetime lifetime);
    public sealed virtual bool get_HasSection();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.BothSides.ModulePathSectionContainerComponent : ModulePathSectionContainer {
    public ModulePathSectionContainerComponent(SnapshotStorageContainer container);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.BothSides.PerformanceMetadataManagerAccessorComponent : object {
    [CompilerGeneratedAttribute]
private IAccessor`1<IMetadataManager> <Data>k__BackingField;
    public IAccessor`1<IMetadataManager> Data { get; }
    public PerformanceMetadataManagerAccessorComponent(ModulePathSectionContainer modulePathSectionContainer, FuidToMetadataSectionContainer fuidToMetadataSectionContainer, MetadataSectionContainer metadataSectionContainer, ISnapshotMasksComponent snapshotMasksComponent, IThreadFuidToNameDictionary threadFuidToName);
    [CompilerGeneratedAttribute]
public sealed virtual IAccessor`1<IMetadataManager> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.BothSides.PerformanceNavigationInfoAccessorComponent : PerformanceNavigationInfoAccessor {
    public PerformanceNavigationInfoAccessorComponent(AssemblyInfoDatabase assemblyInfoDatabase, ModulePathSectionContainer modulePathSectionContainer, FuidToMetadataSectionContainer fuidToMetadataSectionContainer, MetadataSectionContainer metadataSectionContainer, ISnapshotMasksComponent snapshotMasksComponent);
}
[SnapshotComponentAttribute("0")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.BothSides.SnapshotIdContainer : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    public Guid Id { get; }
    public SnapshotIdContainer(EnvironmentSectionContainer snapshotEnvironment);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Id();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.BothSides.SnapshotStorageContainerComponent : SnapshotStorageContainer {
    public SnapshotStorageContainerComponent(Lifetime lifetime, ILogger logger, SnapshotOrigin origin, ISnapshotMasksComponent snapshotMasks);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.BothSides.ThreadsInfo : object {
    private IReadOnlyDictionary`2<FunctionUID, ThreadName> myThreadNamesData;
    private static ILogger ourLog;
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<IDataMapper`2<CallTreeSectionOffset, ThreadName>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<IDataMapper`2<CallTreeSectionOffset, ThreadName>>> Data { get; }
    private IReadOnlyDictionary`2<FunctionUID, ThreadName> JetBrains.DotTrace.Common.DalInterface.SnapshotDataApi.Threads.IThreadFuidToNameDictionary.Data { get; }
    public ThreadsInfo(CallTreeSections callTreeSections, ISnapshotMasksComponent snapshotMasksComponent);
    private static ThreadsInfo();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<IDataMapper`2<CallTreeSectionOffset, ThreadName>>> get_Data();
    private sealed virtual override IReadOnlyDictionary`2<FunctionUID, ThreadName> JetBrains.DotTrace.Common.DalInterface.SnapshotDataApi.Threads.IThreadFuidToNameDictionary.get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.Local.PerformanceEnvironmentSectionContainer : SectionBinaryReaderBase`1<PerformanceEnvironmentSectionData> {
    private static SectionReader`1[] ourReaders;
    public PerformanceEnvironmentSectionContainer(SnapshotStorageContainer container);
    private static PerformanceEnvironmentSectionContainer();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.Local.PerformanceSnapshotConfigurationProvider : object {
    private SnapshotOrigin myOrigin;
    private Lazy`1<ProfileConfiguration> myConfigurator;
    public IDataProvider`1<SnapshotConfiguration> Data { get; }
    public PerformanceSnapshotConfigurationProvider(SnapshotOrigin origin, EnvironmentSectionContainer environmentSectionContainer, IHostXmlResurrector hostXmlResurrector);
    private bool IsSamplingSnapshot();
    private string SnapshotHeader();
    public sealed virtual IDataProvider`1<SnapshotConfiguration> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.Local.PerformanceTickTimeConverterComponent : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ITickTimeConverterContainer> <Data>k__BackingField;
    public IDataProvider`1<ITickTimeConverterContainer> Data { get; }
    public PerformanceTickTimeConverterComponent(ISectionStorage`1<PerformanceEnvironmentSectionData> environmentSectionContainer);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ITickTimeConverterContainer> get_Data();
}
[SnapshotComponentAttribute("10")]
[UsedImplicitlyAttribute("2")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.Local.Settings.PerformanceCallTreePresentationRemoteSettingsSetter : CallTreePresentationRemoteSettingsSetter {
    public PerformanceCallTreePresentationRemoteSettingsSetter(CallTreePresentationSettingsComponent callTree, IDataContainer`1<IRemoteCommunicator> remoteComm, IRemotableReference`1<ICallTreePresentationRemoteSettings> remote);
}
[LocalizableAttribute("False")]
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.Local.Statistics.OpenSnapshotStatistics : object {
    private static ILogger ourLog;
    public OpenSnapshotStatistics(Lifetime lifetime, IComponentContainer container, SnapshotOrigin origin, FusSnapshotStatistics fusSnapshotStatistics);
    private static OpenSnapshotStatistics();
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.Local.Statistics.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.Local.ZoneMarker : object {
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.Remote.AllFuidsComponent : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<IReadOnlyCollection`1<FunctionUID>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<IReadOnlyCollection`1<FunctionUID>>> Data { get; }
    public AllFuidsComponent(HeaderIndexOptSections optSections, HeaderIndexSections indexSections);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<IReadOnlyCollection`1<FunctionUID>>> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.Remote.CallTreeAndIndexesSnapshotAccessor : object {
    private HeaderCombinedSections myHeaders;
    private HeaderIndexOptSections mySingles;
    private CallTreeSections myCallTree;
    [CompilerGeneratedAttribute]
private CallTreeSectionOffset <MinOffset>k__BackingField;
    public int MaxGroupIndex { get; }
    public int MinGroupIndex { get; }
    public CallTreeSectionOffset MinOffset { get; }
    public CallTreeAndIndexesSnapshotAccessor(CallTreeSections callTree, HeaderCombinedSections headers, HeaderIndexOptSections singles);
    private CallTreeSectionOffset GetMinOffset();
    public sealed virtual void GetSectionStreamByGroupId(int group, Func`2& readerAccessor, CallTreeHeaderFull& header);
    public sealed virtual void GetHeaderByGroupIdAndFuid(int group, FunctionUID fuid, Nullable`1& single, Nullable`1& header, Func`2& readerAccessor);
    public sealed virtual int GroupRecordSize(int groupId);
    public sealed virtual int get_MaxGroupIndex();
    public sealed virtual int get_MinGroupIndex();
    [CompilerGeneratedAttribute]
public sealed virtual CallTreeSectionOffset get_MinOffset();
    private static IInMemoryStream GetInMemoryStream(Lifetime lt, BinaryReader reader);
}
[SnapshotComponentAttribute("0")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.Remote.CallTreeInjectDataAccessor : object {
    private InjectSections myInjectSections;
    public CallTreeInjectDataAccessor(InjectSections injectSections);
    public sealed virtual void GetSectionStreamByGroupId(int group, Func`2& readerAccessor, InjectHeader& header);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.Remote.CallTreeOffsetToIndexConvertor : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<IOffsetToIndexConverter`1<CallTreeSectionOffset>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<IOffsetToIndexConverter`1<CallTreeSectionOffset>>> Data { get; }
    public CallTreeOffsetToIndexConvertor(CallTreeSections callTreeSections);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<IOffsetToIndexConverter`1<CallTreeSectionOffset>>> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.Remote.CallTreeRootsComponent : object {
    private IDataProvider`1<ICacheSource`1<DfsRawRoots`1<CallTreeSectionOffset>>> myAllRootsData;
    private IDataProvider`1<ICacheSource`1<IDfsRawRoots`1<CallTreeSectionOffset>>> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.Common.Util.ICacheSource<JetBrains.DotTrace.Common.DalInterface.CallTree.Dfs.IDfsRawRoots<JetBrains.DotTrace.DalInterface.Performance.CallTree.CallTreeSectionOffset>>>>.Data { get; }
    public CallTreeRootsComponent(CallTreeSections callTreeSections);
    private sealed virtual override IDataProvider`1<ICacheSource`1<IDfsRawRoots`1<CallTreeSectionOffset>>> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.Common.Util.ICacheSource<JetBrains.DotTrace.Common.DalInterface.CallTree.Dfs.IDfsRawRoots<JetBrains.DotTrace.DalInterface.Performance.CallTree.CallTreeSectionOffset>>>>.get_Data();
}
[SnapshotComponentAttribute("0")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.Remote.HeaderCombinedSections : object {
    private HeaderIndexSections myIndex;
    private HeaderSections myData;
    private ISnapshotMasksComponent mySnapshotMasks;
    public bool IsEmpty { get; }
    public int MinGroup { get; }
    public HeaderCombinedSections(HeaderIndexSections index, HeaderSections data, ISnapshotMasksComponent snapshotMasks);
    public Nullable`1<FunctionHeaderData> GetData(int groupId, FunctionUID fuid);
    public BinaryReader GetReader(int groupId);
    public bool get_IsEmpty();
    public int get_MinGroup();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.Remote.HeaderIndexOptSections : GroupSectionBase`1<HeaderIndexOptData> {
    private static GroupSectionReader`1[] ourReaders;
    private ISnapshotMasksComponent mySnapshotMasks;
    [CompilerGeneratedAttribute]
private IEnumerable`1<FunctionUID> <AllKeys>k__BackingField;
    public IEnumerable`1<FunctionUID> AllKeys { get; }
    public HeaderIndexOptSections(SnapshotStorageContainer container, ISnapshotMasksComponent snapshotMasks);
    private static HeaderIndexOptSections();
    [CompilerGeneratedAttribute]
public IEnumerable`1<FunctionUID> get_AllKeys();
    private IEnumerable`1<FunctionUID> BuildAllKeys();
    public Nullable`1<CallTreeSectionOffset> TryGetValue(int groupId, FunctionUID fuid);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.Remote.HeaderIndexSections : GroupSectionBase`1<HeaderIndexData> {
    private ISnapshotMasksComponent mySnapshotMasks;
    private static GroupSectionReader`1[] ourReaders;
    public IEnumerable`1<FunctionUID> AllKeys { get; }
    public HeaderIndexSections(SnapshotStorageContainer container, ISnapshotMasksComponent snapshotMasks);
    private static HeaderIndexSections();
    public IEnumerable`1<FunctionUID> get_AllKeys();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.Remote.HeaderSections : GroupSectionBase`1<HeaderData> {
    private static GroupSectionReader`1[] ourReaders;
    public int MinIndex { get; }
    public HeaderSections(SnapshotStorageContainer container);
    private static HeaderSections();
    public BinaryReader GetReader(int groupId);
    public int get_MinIndex();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.Remote.InjectSections : GroupSectionBase`1<InjectHeader> {
    private static GroupSectionReader`1[] ourReaders;
    private bool myIsNegative;
    public InjectSections(SnapshotStorageContainer container, ISnapshotMasksComponent snapshotMasks);
    private static InjectSections();
    public virtual InjectHeader GetHeader(int groupId);
    public BinaryReader GetReader(int groupId);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.Remote.Payloads.PerformanceCallTreePayloadsSource : object {
    [CompilerGeneratedAttribute]
private IThreadSwitch`1<CallTreePayloadsData`2<CallTreeSectionOffset, DotTracePayload>> <PayloadsWithSubsystemFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IThreadSwitch`1<CallTreePayloadsData`2<CallTreeSectionOffset, DotTracePayload>> <PayloadsWithoutSubsystemFilter>k__BackingField;
    public IThreadSwitch`1<CallTreePayloadsData`2<CallTreeSectionOffset, DotTracePayload>> PayloadsWithSubsystemFilter { get; }
    public IThreadSwitch`1<CallTreePayloadsData`2<CallTreeSectionOffset, DotTracePayload>> PayloadsWithoutSubsystemFilter { get; }
    public PerformanceCallTreePayloadsSource(Lifetime lifetime, IPerformancePayloadsDataReader reader, PerformanceSubsystemPayloadsSection subsystemPayloadsSection);
    [CompilerGeneratedAttribute]
public sealed virtual IThreadSwitch`1<CallTreePayloadsData`2<CallTreeSectionOffset, DotTracePayload>> get_PayloadsWithSubsystemFilter();
    [CompilerGeneratedAttribute]
public sealed virtual IThreadSwitch`1<CallTreePayloadsData`2<CallTreeSectionOffset, DotTracePayload>> get_PayloadsWithoutSubsystemFilter();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.Remote.Payloads.PerformanceMeasureInfoReader : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICallTreeMeasureNodesAccessor`2<CallTreeSectionOffset, DotTraceFullPayload>> <Data>k__BackingField;
    public IDataProvider`1<ICallTreeMeasureNodesAccessor`2<CallTreeSectionOffset, DotTraceFullPayload>> Data { get; }
    public PerformanceMeasureInfoReader(ICallTreeAndIndexesSnapshotAccessor callTreeAccessor, IInjectInfoSnapshotAccessor injectAccessor);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICallTreeMeasureNodesAccessor`2<CallTreeSectionOffset, DotTraceFullPayload>> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.Remote.Payloads.PerformancePayloadsDataReader : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<CallTreePayloadsData`2<CallTreeSectionOffset, DotTracePayload>> <Data>k__BackingField;
    public IDataProvider`1<CallTreePayloadsData`2<CallTreeSectionOffset, DotTracePayload>> Data { get; }
    public PerformancePayloadsDataReader(ICallTreeAndIndexesSnapshotAccessor reader);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<CallTreePayloadsData`2<CallTreeSectionOffset, DotTracePayload>> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.Remote.PerformanceCommonDfsLogicContainer : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<CommonDfsLogic`2<CallTreeSectionOffset, FunctionUID>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<CommonDfsLogic`2<CallTreeSectionOffset, FunctionUID>>> Data { get; }
    public PerformanceCommonDfsLogicContainer(ICacheProviderContainer`1<IDfsReaders`1<CallTreeSectionOffset>> dfsReaders);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<CommonDfsLogic`2<CallTreeSectionOffset, FunctionUID>>> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.Remote.PerformanceDfsAlgorithmsContainer : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<IDfsAlgorithms`2<CallTreeSectionOffset, FunctionUID>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<IDfsAlgorithms`2<CallTreeSectionOffset, FunctionUID>>> Data { get; }
    public PerformanceDfsAlgorithmsContainer(ICacheProviderContainer`1<CommonDfsLogic`2<CallTreeSectionOffset, FunctionUID>> logicContainer);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<IDfsAlgorithms`2<CallTreeSectionOffset, FunctionUID>>> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.Remote.PerformanceSyntheticMethods : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<FunctionUID> <Data>k__BackingField;
    public IEnumerable`1<FunctionUID> Data { get; }
    public PerformanceSyntheticMethods(ISnapshotMasksComponent masksComponent, IThreadFuidToNameDictionary threadFuidToNameDictionary);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<FunctionUID> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.Remote.RemoteTree.DotTraceDfsReadersProviderContainer : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<IDfsReaders`1<CallTreeSectionOffset>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<IDfsReaders`1<CallTreeSectionOffset>>> Data { get; }
    public DotTraceDfsReadersProviderContainer(ICallTreeAndIndexesSnapshotAccessor accessor);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<IDfsReaders`1<CallTreeSectionOffset>>> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.Remote.Subsystems.PerformanceExtraSubsystemMethods : ExtraSubsystemMethods {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<IReadOnlyCollection`1<MethodViewDataDal>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<IReadOnlyCollection`1<MethodViewDataDal>>> Data { get; }
    public PerformanceExtraSubsystemMethods(IThreadFuidToNameDictionary threadFuidToNameDictionary);
    [CompilerGeneratedAttribute]
public virtual IDataProvider`1<ICacheSource`1<IReadOnlyCollection`1<MethodViewDataDal>>> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.Remote.Subsystems.PerformanceSubsystemOffsetToSubsystem : SubsystemOffsetToSubsystem`1<CallTreeSectionOffset> {
    public PerformanceSubsystemOffsetToSubsystem(ICacheProviderContainer`1<SubsystemResolveData`1<FunctionUID>> subsystemResolveProvider, IAllRootsProvider`1<CallTreeSectionOffset> rawRootsProviderContainer, IDfsAlgorithmsProviderContainer`1<CallTreeSectionOffset> dfsAlgorithmsProviderContainer, IDataContainer`1<DataPipeLifetime> dataPipeLifetimeContainer, IMemoryMappedStorageManager cacheStorage, IProviderContainer`1<ICacheStorageManager> cacheStorageManager, ICacheProviderContainer`1<IOffsetToIndexConverter`1<CallTreeSectionOffset>> offsetToIndex);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.Remote.Subsystems.PerformanceSubsystemPayloadsSection : object {
    private static ILogger ourLog;
    [CompilerGeneratedAttribute]
private IDataProxy`1<SubsystemKeysSet> <SubsystemKeysSet>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<CallTreePayloadsData`2<CallTreeSectionOffset, DotTracePayload>>> <Data>k__BackingField;
    public IDataProxy`1<SubsystemKeysSet> SubsystemKeysSet { get; }
    public IDataProvider`1<ICacheSource`1<CallTreePayloadsData`2<CallTreeSectionOffset, DotTracePayload>>> Data { get; }
    public PerformanceSubsystemPayloadsSection(Lifetime lifetime, IMemoryMappedStorageManager memoryMappedSnapshotManager, IProviderContainer`1<ICacheStorageManager> cacheStorageManagerContainer, ICacheProviderContainer`1<SubsystemsCache`1<CallTreeSectionOffset>> subsystemsCacheContainer, IDfsAlgorithmsProviderContainer`1<CallTreeSectionOffset> dfsAlgorithmsProviderContainer, ICacheProviderContainer`1<IDfsRawRoots`1<CallTreeSectionOffset>> rawRootsCacheSource, ICacheProviderContainer`1<IOffsetToIndexConverter`1<CallTreeSectionOffset>> converterProvider, ICallTreeAndIndexesSnapshotAccessor reader, ISnapshotMasksComponent snapshotMasks);
    private static PerformanceSubsystemPayloadsSection();
    [CompilerGeneratedAttribute]
public IDataProxy`1<SubsystemKeysSet> get_SubsystemKeysSet();
    [CompilerGeneratedAttribute]
public IDataProvider`1<ICacheSource`1<CallTreePayloadsData`2<CallTreeSectionOffset, DotTracePayload>>> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.Remote.SystemMethods.PerformanceFlatPayloadsBuilder : FlatPayloadsBuilder`4<CallTreeSectionOffset, FunctionUID, DotTracePayload, PayloadPredicatesInstance> {
    public PerformanceFlatPayloadsBuilder(IDfsAlgorithmsProviderContainer`1<CallTreeSectionOffset> commonLogicContainer, ICacheProviderContainer`1<SubsystemsCache`1<CallTreeSectionOffset>> subsystemCacheProviderContainer, IFunctionSystemnessDal functionSystemness, FuidToClassIdProvider fuidToClassIdProvider);
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.Remote.SystemMethods.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.Remote.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Dal.Performance.SnapshotComponents.ZoneMarker : object {
}
public class JetBrains.DotTrace.Dal.Performance.SnapshotStorage.EnvironmentSectionContainer : object {
    private static SectionStorageReader`1[] ourEnvReaders;
    private static SectionStorageReader`1[] ourPostEnvReaders;
    private Lazy`1<IFullEnvironmentSection> myEnvSection;
    public EnvironmentSectionContainer(SnapshotStorageContainer container);
    private static EnvironmentSectionContainer();
    public IFullEnvironmentSection Get();
    public sealed virtual IFullEnvironmentSection Get(Lifetime lifetime);
}
public class JetBrains.DotTrace.Dal.Performance.SnapshotStorage.ModulePathSectionContainer : SectionBinaryReaderBase`1<ModulePathSectionData> {
    private static SectionReader`1[] ourReaders;
    public bool HasSection { get; }
    public ModulePathSectionContainer(SnapshotStorageContainer container);
    private static ModulePathSectionContainer();
    public sealed virtual IModulePathSection Get(Lifetime lifetime);
    public sealed virtual bool get_HasSection();
}
public class JetBrains.DotTrace.Dal.Performance.SnapshotStorage.SnapshotStorageContainer : object {
    private int myGroupMask;
    private IDictionary`2<ushort, List`1<GroupSnapshotStorageSection>> myGroupSections;
    private IDictionary`2<ushort, SnapshotStorageSection> mySingleSections;
    public SnapshotStorageContainer(Lifetime lifetime, ILogger logger, ISnapshotMasksComponent snapshotMasks, FileSystemPath snapshotStorageFile);
    [CanBeNullAttribute]
public SnapshotStorageSection GetOptionalSection(ushort sectionType);
    [NotNullAttribute]
public SnapshotStorageSection GetSingleSection(ushort sectionType);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Dal.Performance.SnapshotStorage.SnapshotStorageContainer/<GetAllGroupSections>d__6")]
[NotNullAttribute]
public IEnumerable`1<GroupSnapshotStorageSection> GetAllGroupSections(ushort sectionType);
}
public abstract class JetBrains.DotTrace.Dal.Performance.Tools.GroupSectionBase`1 : object {
    protected Dictionary`2<int, Pair`2<T, SnapshotStorageSection>> Headers;
    public int SectionsCount { get; }
    protected GroupSectionBase`1(SnapshotStorageContainer container, ushort sectionType, GroupSectionReader`1[] sectionReaders);
    public virtual T GetHeader(int groupId);
    public sealed virtual int get_SectionsCount();
    protected SnapshotStorageSection GetStorageSection(int groupId);
}
public class JetBrains.DotTrace.Dal.Performance.Tools.GroupSectionReader`1 : object {
    public ushort Version;
    public Func`3<BinaryReader, int, T> ReadFunc;
    public GroupSectionReader`1(ushort version, Func`3<BinaryReader, int, T> readFunc);
}
public class JetBrains.DotTrace.Dal.Performance.Tools.GroupSnapshotStorageSection : object {
    public int GroupId;
    public SnapshotStorageSection StorageSection;
    public GroupSnapshotStorageSection(int groupId, SnapshotStorageSection storageSection);
}
public class JetBrains.DotTrace.Dal.Performance.Tools.SectionBinaryReaderBase`1 : SectionStorageBase`1<T> {
    public SectionBinaryReaderBase`1(SnapshotStorageContainer container, ushort sectionType, SectionReader`1[] sectionReaders, bool optionalSection);
    public static SectionStorageReader`1[] ToSectionStorageReader(SectionReader`1[] sectionBinaryReaders);
}
public class JetBrains.DotTrace.Dal.Performance.Tools.SectionReader`1 : object {
    public ushort Version;
    public Func`2<BinaryReader, T> ReadFunc;
    public SectionReader`1(ushort version, Func`2<BinaryReader, T> readFunc);
}
public static class JetBrains.DotTrace.Dal.Performance.Tools.SectionReaderHelpers : object {
    public static T ReadSection(SnapshotStorageSection section, SectionStorageReader`1[] sectionReaders);
    public static T ReadSection(SnapshotStorageSection section, SectionReader`1[] sectionReaders);
    private static SectionStorageReader`1<T> BuildSectionReader(SectionReader`1<T> arg);
    public static T ReadSection(GroupSnapshotStorageSection section, GroupSectionReader`1[] sectionReaders);
}
public class JetBrains.DotTrace.Dal.Performance.Tools.SectionStorageBase`1 : object {
    private SnapshotStorageContainer myContainer;
    private ushort mySectionType;
    private SectionStorageReader`1[] mySectionReaders;
    private bool myOptionalSection;
    private bool myHasValue;
    private T myValue;
    public SectionStorageBase`1(SnapshotStorageContainer container, ushort sectionType, SectionStorageReader`1[] sectionReaders, bool optionalSection);
    public sealed virtual T Get();
}
public class JetBrains.DotTrace.Dal.Performance.Tools.SectionStorageReader`1 : object {
    public ushort Version;
    public Func`2<SnapshotStorageSection, T> ReadFunc;
    public SectionStorageReader`1(ushort version, Func`2<SnapshotStorageSection, T> readFunc);
}
public static class JetBrains.DotTrace.Dal.Performance.Tools.SectionTypes : object {
    private static HashSet`1<ushort> ourGroupSectionTypes;
    public static ushort CallTreeSectionType;
    public static ushort HeaderDataSectionType;
    public static ushort HeaderIndexSectionType;
    public static ushort HeaderSinglesSectionType;
    public static ushort CallTreeInjectSectionType;
    public static ushort EnvironmentSectionType;
    public static ushort PostEnvironmentSectionType;
    public static ushort MetadataSectionType;
    public static ushort ModulePathSectionType;
    public static ushort FuidToMetadataSection;
    public static ushort PerformanceEnvironmentSection;
    private static SectionTypes();
    public static bool IsGroupSection(ushort groupType);
    public static bool IsFirstSectionInGroup(ushort groupType);
}
public enum JetBrains.DotTrace.Dal.Performance.Tools.SectionTypesEnum : Enum {
    public ushort value__;
    public static SectionTypesEnum CallTreeSectionType;
    public static SectionTypesEnum HeaderDataSectionType;
    public static SectionTypesEnum HeaderIndexSectionType;
    public static SectionTypesEnum HeaderSinglesSectionType;
    public static SectionTypesEnum CallTreeInjectSectionType;
    public static SectionTypesEnum EnvironmentSectionType;
    public static SectionTypesEnum PostEnvironmentSectionType;
    public static SectionTypesEnum MetadataSectionType;
    public static SectionTypesEnum ModulePathSectionType;
    public static SectionTypesEnum FuidToMetadataSection;
    public static SectionTypesEnum PerformanceEnvironmentSection;
}
public static class JetBrains.DotTrace.Dal.Timeline.Cache.FuidToMany : object {
    private static ConditionalLog ourLog;
    private static FuidToMany();
    public static void Write(IMemoryMappedStorage storage, UInt32 type, IEnumerable`1<KeyValuePair`2<FunctionUID, IEnumerable`1<T>>> input, bool inputIsSortedByKey);
    public static OneToManyReader`2<FunctionUID, T> Read(Lifetime lifetime, IReadonlyMemoryMappedStorage storage, UInt32 type);
    public static IReadonlyStructuredSectionMemory`1<FunctionUID> ReadKeys(Lifetime lifetime, IReadonlyMemoryMappedStorage storage, UInt32 type);
    private static UInt32 FuidListSectionType(UInt32 type);
}
public static class JetBrains.DotTrace.Dal.Timeline.CallTree.CallTreeAccessorFactory : object {
    public static CompactTreeReader GetCallTreeReader(SnapshotStorageSection callTreeSection, UInt32& nodesCount);
    public static FastIndexableCompactTree`2<ARR`1<CompactTreeNode>, ARR`1<UInt32>> GetCallTreeReader(ILinearAccessStore`1<CompactTreeNode> callTreeMemory, Int32& nodeCount);
}
public class JetBrains.DotTrace.Dal.Timeline.CallTree.Dfs.ChunkListHeadersBatchReader : object {
    [CompilerGeneratedAttribute]
private DfsIndexKey[] <keys>P;
    [CompilerGeneratedAttribute]
private ChunkList`1<DfsNodePtr> <values>P;
    public ChunkListHeadersBatchReader(DfsIndexKey[] keys, ChunkList`1<DfsNodePtr> values);
    public sealed virtual int ReadHeadersOffsetsDescending(FunctionUID key, DfsNodePtr from, int count, DfsNodePtr[] offsets);
    public sealed virtual int ReadHeadersOffsetsDescending(FunctionUID key, DfsNodePtr from, int count, int arrayLength, DfsNodePtr[] offsets);
}
public class JetBrains.DotTrace.Dal.Timeline.CallTree.Dfs.ChunkListNodesBatchReader : object {
    [CompilerGeneratedAttribute]
private ChunkList`1<DfsNode`2<DfsNodePtr, FunctionUID>> <nodes>P;
    public ChunkListNodesBatchReader(ChunkList`1<DfsNode`2<DfsNodePtr, FunctionUID>> nodes);
    public sealed virtual int ReadBackwardOffsetsAscending(DfsNodePtr to, int count, DfsNode`2[] buffer, int rightBorder);
    public sealed virtual int ReadForwardOffsetsAscending(DfsNodePtr from, int count, DfsNode`2[] buffer, int destStartIndex);
}
public class JetBrains.DotTrace.Dal.Timeline.CallTree.Dfs.FunctionDataHeadersReader`1 : object {
    private IFunctionDataMapper`1<List`1<TOffset>> myHeaders;
    private IComparer`1<TOffset> myComparer;
    public FunctionDataHeadersReader`1(IFunctionDataMapper`1<List`1<TOffset>> headers, IComparer`1<TOffset> comparer);
    public sealed virtual int ReadHeadersOffsetsDescending(FunctionUID key, TOffset to, int count, TOffset[] offsets);
    public sealed virtual int ReadHeadersOffsetsDescending(FunctionUID key, TOffset from, int count, int arrayLength, TOffset[] offsets);
}
public class JetBrains.DotTrace.Dal.Timeline.CallTree.Dfs.IndexableBatchNodesReader`1 : IndexableBatchNodesReader`2<TOffset, FunctionUID> {
    public IndexableBatchNodesReader`1(IReadOnlyList`1<DfsNode`2<TOffset, FunctionUID>> dfsNodes, Func`2<TOffset, int> offsetToIndex);
}
public class JetBrains.DotTrace.Dal.Timeline.CallTree.Dfs.IndexableBatchNodesReader`2 : object {
    private IReadOnlyList`1<DfsNode`2<TOffset, TKey>> myDfsNodes;
    private Func`2<TOffset, int> myOffsetToIndex;
    public IndexableBatchNodesReader`2(IReadOnlyList`1<DfsNode`2<TOffset, TKey>> dfsNodes, Func`2<TOffset, int> offsetToIndex);
    public sealed virtual int ReadBackwardOffsetsAscending(TOffset to, int count, DfsNode`2[] nodes, int destEndIndex);
    public sealed virtual int ReadForwardOffsetsAscending(TOffset from, int count, DfsNode`2[] nodes, int destStartIndex);
}
public class JetBrains.DotTrace.Dal.Timeline.CallTree.Dfs.OneToManyHeadersReader : object {
    private OneToManyReader`2<FunctionUID, DfsNodePtr> myHeaders;
    public OneToManyHeadersReader(OneToManyReader`2<FunctionUID, DfsNodePtr> headers);
    public sealed virtual int ReadHeadersOffsetsDescending(FunctionUID key, DfsNodePtr to, int count, DfsNodePtr[] offsets);
    public sealed virtual int ReadHeadersOffsetsDescending(FunctionUID key, DfsNodePtr from, int count, int arrayLength, DfsNodePtr[] offsets);
}
public class JetBrains.DotTrace.Dal.Timeline.CallTree.Dfs.TimelineDfsReaders : object {
    private ChunkList`1<DfsNode`2<DfsNodePtr, FunctionUID>> myNodes;
    private DfsIndexKey[] myKeys;
    private ChunkListNodesBatchReader myNodesReader;
    private ChunkListHeadersBatchReader myHeadersReader;
    [CompilerGeneratedAttribute]
private DfsNodePtr <MinOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private DfsNodePtr <RootPtr>k__BackingField;
    [CompilerGeneratedAttribute]
private DfsNodePtr[] <Data>k__BackingField;
    public DfsNodePtr MinOffset { get; }
    public DfsNodePtr InvalidOffset { get; }
    public IComparer`1<DfsNodePtr> Comparer { get; }
    public SubtractOffset`1<DfsNodePtr> Subtractor { get; }
    public DfsNodePtr RootPtr { get; }
    public DfsNodePtr[] Data { get; }
    public TimelineDfsReaders(Lifetime lifetime, ChunkList`1<DfsNode`2<DfsNodePtr, FunctionUID>> nodes, DfsIndexKey[] keys, ChunkList`1<DfsNodePtr> values);
    public sealed virtual IBatchNodesReader`1<DfsNodePtr> GetNodesReaders(Lifetime lifetime);
    public sealed virtual IBatchHeadersReader`1<DfsNodePtr> GetHeadersReaders(Lifetime lifetime);
    public sealed virtual IDataMapper`2<DfsNodePtr, FunctionUID> GetIndexToFuidMap(Lifetime lifetime);
    public sealed virtual IDataMapper`2<DfsNodePtr, DfsNodePtr> GetIndexToParentMap(Lifetime lifetime);
    public sealed virtual IEnumerable`1<FunctionUID> GetAllFuids(Lifetime lifetime);
    public sealed virtual IDataMapper`2<DfsNodePtr, bool> GetIsRootPointer();
    [CompilerGeneratedAttribute]
public sealed virtual DfsNodePtr get_MinOffset();
    public sealed virtual DfsNodePtr get_InvalidOffset();
    public sealed virtual IComparer`1<DfsNodePtr> get_Comparer();
    public sealed virtual SubtractOffset`1<DfsNodePtr> get_Subtractor();
    [CompilerGeneratedAttribute]
public DfsNodePtr get_RootPtr();
    [CompilerGeneratedAttribute]
public sealed virtual DfsNodePtr[] get_Data();
    [CompilerGeneratedAttribute]
private FunctionUID <GetIndexToFuidMap>b__7_0(DfsNodePtr ptr);
    [CompilerGeneratedAttribute]
private DfsNodePtr <GetIndexToParentMap>b__8_0(DfsNodePtr ptr);
    [CompilerGeneratedAttribute]
private bool <GetIsRootPointer>b__10_0(DfsNodePtr ptr);
}
public class JetBrains.DotTrace.Dal.Timeline.CallTree.Dfs.TimelineMemoryBatchNodesReader : TimelineMemoryBatchReader`1<DfsNode`2<DfsNodePtr, FunctionUID>> {
    public TimelineMemoryBatchNodesReader(IReadonlyStructuredSectionMemory`1<DfsNode`2<DfsNodePtr, FunctionUID>> dataSection);
}
public class JetBrains.DotTrace.Dal.Timeline.CallTree.DfsBackTrace : object {
    [CompilerGeneratedAttribute]
private IDataMapper`2<DfsNodePtr, bool> <isRootPointer>P;
    [CompilerGeneratedAttribute]
private IDataMapper`2<DfsNodePtr, DfsNodePtr> <getParent>P;
    [CompilerGeneratedAttribute]
private IDataMapper`2<DfsNodePtr, FunctionUID> <readKey>P;
    public DfsBackTrace(IDataMapper`2<DfsNodePtr, bool> isRootPointer, IDataMapper`2<DfsNodePtr, DfsNodePtr> getParent, IDataMapper`2<DfsNodePtr, FunctionUID> readKey);
    public DfsNodePtr GetParent(DfsNodePtr index);
    public FunctionUID ReadKey(DfsNodePtr index);
    public bool IsRoot(DfsNodePtr index);
}
public static class JetBrains.DotTrace.Dal.Timeline.CallTree.DfsTreeAndIndexBuilder : object {
    public static ChunkList`1<DfsNode`2<TOffset, TKey>> Build(int sourceTreeNodesCount, FastIndexableCompactTree`2<TNodesStore, TParentsStore> callTreeReader, FakeLeafUnderRoot[] fakeLeafsUnderRoot, TBuildingHelper helper, TOffset invalidOffset, ChunkList`1& ptrToDfsMap, Dictionary`2& fakeLeafPtrToDfsMap, Dictionary`2& fuidToOffsetsList, IExecutionController executionController);
}
public class JetBrains.DotTrace.Dal.Timeline.CallTree.FakeLeafUnderRoot : ValueType {
    public UInt32 Ptr;
    public ulong Key;
}
public static class JetBrains.DotTrace.Dal.Timeline.CallTree.FakeLeafUnderRootEx : object {
    public static FakeLeafUnderRoot[] Create(ICompactTreeReader callTreeReader);
}
public interface JetBrains.DotTrace.Dal.Timeline.CallTree.IDfsTreeBuildingHelper`2 {
    public abstract virtual int OffsetToInt(TOffset offset);
    public abstract virtual TOffset OffsetFromInt(int index);
    public abstract virtual TKey ReadKey(UInt32 ptr);
    public abstract virtual TKey IgnoreShift(TKey key);
    public abstract virtual bool SkipNode(TKey current, Nullable`1<TKey> parent);
}
public class JetBrains.DotTrace.Dal.Timeline.CallTree.TimelineMemoryBatchReader`1 : object {
    private IReadonlyStructuredSectionMemory`1<TData> myDataSection;
    public TimelineMemoryBatchReader`1(IReadonlyStructuredSectionMemory`1<TData> dataSection);
    public sealed virtual int ReadBackwardOffsetsAscending(DfsNodePtr to, int count, TData[] nodes, int destEndIndex);
    public sealed virtual int ReadForwardOffsetsAscending(DfsNodePtr from, int count, TData[] nodes, int destStartIndex);
}
public static class JetBrains.DotTrace.Dal.Timeline.Events.EventDataStringKeys : object {
    public static string UnknownKey;
    public static string EmptyKey;
    [NotNullAttribute]
public static string GetDisplayName(string key);
}
public static class JetBrains.DotTrace.Dal.Timeline.Events.Protobuf.GoogleProtobufEx : object {
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Dal.Timeline.Events.Protobuf.GoogleProtobufEx/<ReadEvents>d__0")]
public static IEnumerable`1<Event> ReadEvents(Stream input, int readingBufferSize);
    private static void ThrowCantReadWholeEvent(long streamLength, long position);
}
public static class JetBrains.DotTrace.Dal.Timeline.Events.SourceEncoding : object {
    private static Encoding ourEncoding;
    private static SourceEncoding();
    public static string ToUtf8String(ByteString bytes);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Dal.Timeline.Metadata.Cache.CacheDecoratorBuilder : object {
    [ExtensionAttribute]
public static IFunctionDataMapper`1<T> Cache(IFunctionDataMapper`1<T> mapper, IDataStorage`2<FunctionUID, T> storage);
    [ExtensionAttribute]
public static IFunctionDataMapper`1<T> ThreadSafeCache(IFunctionDataMapper`1<T> mapper, ConcurrentDictionary`2<FunctionUID, T> storage);
}
[DefaultMemberAttribute("Item")]
[ThreadSafeAttribute]
internal class JetBrains.DotTrace.Dal.Timeline.Metadata.Cache.ConcurrentDictionaryCacheDecorator`2 : object {
    private Func`2<TKey, TValue> myInternalProvider;
    private ConcurrentDictionary`2<TKey, TValue> myStorage;
    public TValue Item { get; }
    protected ConcurrentDictionaryCacheDecorator`2(Func`2<TKey, TValue> internalProvider, ConcurrentDictionary`2<TKey, TValue> storage);
    public sealed virtual TValue get_Item(TKey fuid);
    [CompilerGeneratedAttribute]
private TValue <get_Item>b__4_0(TKey key);
}
[DefaultMemberAttribute("Item")]
internal abstract class JetBrains.DotTrace.Dal.Timeline.Metadata.Cache.DataMapperCacheDecorator`2 : object {
    private IDataMapper`2<TKey, TValue> myInternalProvider;
    private IDataStorage`2<TKey, TValue> myStorage;
    public TValue Item { get; }
    protected DataMapperCacheDecorator`2(IDataMapper`2<TKey, TValue> internalProvider, IDataStorage`2<TKey, TValue> dataStorage);
    public sealed virtual TValue get_Item(TKey fuid);
}
internal class JetBrains.DotTrace.Dal.Timeline.Metadata.Cache.FunctionCacheDecorator`1 : DataMapperCacheDecorator`2<FunctionUID, T> {
    public FunctionCacheDecorator`1(IDataMapper`2<FunctionUID, T> internalProvider, IDataStorage`2<FunctionUID, T> dataStorage);
}
[ThreadSafeAttribute]
internal class JetBrains.DotTrace.Dal.Timeline.Metadata.Cache.FunctionDataConcurrentDictionaryCacheDecorator`1 : ConcurrentDictionaryCacheDecorator`2<FunctionUID, T> {
    public FunctionDataConcurrentDictionaryCacheDecorator`1(IFunctionDataMapper`1<T> internalMapper, ConcurrentDictionary`2<FunctionUID, T> storage);
}
public class JetBrains.DotTrace.Dal.Timeline.Metadata.Cache.MetadataInfoCache : object {
    [CompilerGeneratedAttribute]
private IDataStorage`2<FunctionUID, CallFrameInfo> <CallFrameCacheStorage>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataStorage`2<FunctionUID, string> <SignaturesCacheStorage>k__BackingField;
    public IDataStorage`2<FunctionUID, CallFrameInfo> CallFrameCacheStorage { get; }
    public IDataStorage`2<FunctionUID, string> SignaturesCacheStorage { get; }
    [CompilerGeneratedAttribute]
public IDataStorage`2<FunctionUID, CallFrameInfo> get_CallFrameCacheStorage();
    [CompilerGeneratedAttribute]
public IDataStorage`2<FunctionUID, string> get_SignaturesCacheStorage();
    public void Clear();
}
[DefaultMemberAttribute("Item")]
public class JetBrains.DotTrace.Dal.Timeline.Metadata.CallStackPtrDataStorage`1 : object {
    private T myNotInitializedValue;
    private ChunkList`1<T> myData;
    private Dictionary`2<CallStackPtr, T> myInvalid;
    private IEqualityComparer`1<T> myComparer;
    public T Item { get; public set; }
    public CallStackPtrDataStorage`1(T notInitializedValue);
    public sealed virtual T get_Item(CallStackPtr id);
    public sealed virtual void set_Item(CallStackPtr id, T value);
    public sealed virtual bool TryGetValue(CallStackPtr id, T& value);
    public sealed virtual void Clear();
}
[ThreadUnsafeAttribute]
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.CorePartMetadataManager : object {
    private Lifetime myLifetime;
    [NotNullAttribute]
private static SignaturePresenter ourCoreParametersPresenter;
    [CanBeNullAttribute]
private IMetadataSectionAssemblyProvider myCoreMetadataAssemblyProvider;
    [NotNullAttribute]
private SectionsBag mySectionsBag;
    [CompilerGeneratedAttribute]
private IMetadataSection <ProfilerMetadataSection>k__BackingField;
    [CompilerGeneratedAttribute]
private IModulePathSection <ProfilerModulePathSection>k__BackingField;
    [NotNullAttribute]
private FuidToMetadataIdConverter myProfilerFuidToMetadataIdConverter;
    [CompilerGeneratedAttribute]
private ModuleUIDBySectionIndexMap <ModuleUidBySectionIndexMap>k__BackingField;
    [CompilerGeneratedAttribute]
private ETWToCoreModuleMapper <ETWToCoreModuleMapper>k__BackingField;
    [NotNullAttribute]
private ConcurrentDictionary`2<FunctionUID, Nullable`1<MetadataId>> myETWManagedToMetadataIdMatcherCache;
    [NotNullAttribute]
public IMetadataSection ProfilerMetadataSection { get; }
    [NotNullAttribute]
public IModulePathSection ProfilerModulePathSection { get; }
    [NotNullAttribute]
public ModuleUIDBySectionIndexMap ModuleUidBySectionIndexMap { get; }
    [NotNullAttribute]
public ETWToCoreModuleMapper ETWToCoreModuleMapper { get; }
    public CorePartMetadataManager(Lifetime lifetime, SectionsBag sectionsBag, IMetadataSection profilerMetadataSection, IModulePathSection profilerModulePathSection, FuidToMetadataIdConverter profilerFuidToMetadataIdConverter, ModuleUIDBySectionIndexMap moduleUidBySectionIndexMap, ETWToCoreModuleMapper etwToCoreModuleMapper, ConcurrentDictionary`2<FunctionUID, Nullable`1<MetadataId>> etwManagedToMetadataIdMatcherCache);
    private static CorePartMetadataManager();
    [CompilerGeneratedAttribute]
public IMetadataSection get_ProfilerMetadataSection();
    [CompilerGeneratedAttribute]
public IModulePathSection get_ProfilerModulePathSection();
    [CompilerGeneratedAttribute]
public ModuleUIDBySectionIndexMap get_ModuleUidBySectionIndexMap();
    [CompilerGeneratedAttribute]
public ETWToCoreModuleMapper get_ETWToCoreModuleMapper();
    [NotNullAttribute]
private CoreMetadataInfoProvider CoreFunctionProvider();
    [NotNullAttribute]
internal CoreModuleInfoMapper CoreModuleInfoProvider();
    [NotNullAttribute]
public IMetadataSectionAssemblyProvider MetadataAssemblyProvider();
    [NotNullAttribute]
internal CoreRelatedFunctionReader CoreRelatedFunctionProvider(Lifetime lifetime);
    private IEnumeratedFixedStructureProvider`1<CoreFunction> ETWCoreFunctionReader(Lifetime lifetime, CoreFunctionTransformer coreFunctionTransformer);
    private IFunctionDataMapper`1<Nullable`1<MetadataId>> BuildEtwManagedToMetadataIdMatcher(Lifetime lifetime);
    internal IFunctionDataMapper`1<Nullable`1<MetadataId>> BuildCoreMetadataIdProvider(Lifetime lifetime);
    internal IDataMapper`2<ValueTuple`2<MetadataId, FunctionUID>, CallFrameInfo> BuildCoreCallFrameInfoProvider();
    internal IDataMapper`2<MetadataId, string> BuildCorePresentableSignaturesMapper();
}
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.CorePartMetadataManagerBuilder : object {
    [CanBeNullAttribute]
private IMetadataSection myProfilerMetadataSection;
    [CanBeNullAttribute]
private IModulePathSection myProfilerModulePathSection;
    [CanBeNullAttribute]
private FuidToMetadataIdConverter myFuidToMetadataIdConverter;
    [CanBeNullAttribute]
private ModuleUIDBySectionIndexMap myModuleUidBySectionIndexMap;
    [CanBeNullAttribute]
private ETWToCoreModuleMapper myETWToCoreModuleMapper;
    [NotNullAttribute]
private ConcurrentDictionary`2<FunctionUID, Nullable`1<MetadataId>> myETWManagedToMetadataIdMatcherCache;
    [NotNullAttribute]
private SectionsBag mySectionsBag;
    public CorePartMetadataManagerBuilder(SectionsBag sectionsBag);
    [CanBeNullAttribute]
public CorePartMetadataManager Build(Lifetime lifetime);
}
public interface JetBrains.DotTrace.Dal.Timeline.NewMetadata.IEnumeratedFixedStructureProvider`1 {
}
public interface JetBrains.DotTrace.Dal.Timeline.NewMetadata.IUnfixedStructureProvider`1 {
    public abstract virtual TData Get(DataOffset offset);
}
internal static class JetBrains.DotTrace.Dal.Timeline.NewMetadata.MappedModulesLogger : object {
    private static ILogger ourLog;
    private static MappedModulesLogger();
    public static void Verbose(ETWToCoreModuleMapper etwToCoreModuleMapper, IEnumerable`1<ETWManagedModule> etwManagedModuleReader, MemoryMappedUnfixedReader`1<ETWManagedModuleData> etwManagedModuleDataReader, IEnumerable`1<KeyValuePair`2<SectionIndex`1<IMetadataSection>, IModuleInfo>> getAssembliesData);
}
public static class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Matching.DiffFinder : object {
    private static TDiff Process(IEnumerable`1<T> a, IEnumerable`1<T> b, Func`3<T, T, TDiff> substractor);
    public static Nullable`1<long> Process(IEnumerable`1<ulong> first, IEnumerable`1<ulong> second);
    public static Nullable`1<int> Process(IEnumerable`1<int> first, IEnumerable`1<int> second);
}
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Matching.ETWToCoreModuleMapper : object {
    private IDictionary`2<ETWModuleId, SectionIndex`1<IMetadataSection>> myMap;
    private static ILogger ourLog;
    internal ETWToCoreModuleMapper(IEnumeratedFixedStructureProvider`1<ETWManagedModule> etwManagedModuleReader, IEnumeratedFixedStructureProvider`1<CoreModule> coreModuleReader);
    private static ETWToCoreModuleMapper();
    private static Dictionary`2<ulong, SectionIndex`1<IMetadataSection>> CreateCoreModulesDictionary(IEnumeratedFixedStructureProvider`1<CoreModule> coreModuleReader);
    private void FillMap(IEnumerable`1<ETWManagedModule> etwManagedModules, IDictionary`2<ulong, SectionIndex`1<IMetadataSection>> coreModules, Nullable`1<long> diff);
    internal bool TryGetValue(ETWModuleId moduleId, SectionIndex`1& sectionIndex);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Matching.MetadataMatcher : object {
    private IFunctionDataMapper`1<ETWManagedFunctionInfo> myETWManagedFunctionInfoProvider;
    private IFixedStructureProvider`1<ETWManagedModule> myETWManagedModuleReader;
    private ETWToCoreModuleMapper myETWToCoreModuleMapper;
    private ModulesMethodSearcher myMethodSearcher;
    private ILogger myLog;
    public Nullable`1<MetadataId> Item { get; }
    internal MetadataMatcher(ModulesMethodSearcher methodSearcher, ETWToCoreModuleMapper etwToCoreModuleMapper, IFunctionDataMapper`1<ETWManagedFunctionInfo> etwManagedFunctionInfoProvider, IFixedStructureProvider`1<ETWManagedModule> etwManagedModuleReader);
    public sealed virtual Nullable`1<MetadataId> get_Item(FunctionUID fuid);
    private bool TryMatchManagedFunction(FunctionUID oldFuid, MetadataId& metadataId);
    private bool TryFindMethodsInReferencedAssemblies(SectionIndex`1<IMetadataSection> sectionIndex, ETWManagedFunctionInfo etwInfo, MetadataMethodId& result);
    private static bool TypeFQNsAreEqual(ETWManagedFunctionInfo info, IMetadataMethod method);
    [CompilerGeneratedAttribute]
internal static string <TryMatchManagedFunction>g__LoggingInfoGetter|8_0(<>c__DisplayClass8_0& );
}
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Matching.MetadataMethodId : object {
    [CompilerGeneratedAttribute]
private MetadataId <MetadataId>k__BackingField;
    [CompilerGeneratedAttribute]
private IMetadataMethod <Method>k__BackingField;
    internal MetadataId MetadataId { get; internal set; }
    internal IMetadataMethod Method { get; internal set; }
    [CompilerGeneratedAttribute]
internal MetadataId get_MetadataId();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MetadataId(MetadataId value);
    [CompilerGeneratedAttribute]
internal IMetadataMethod get_Method();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Method(IMetadataMethod value);
}
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Matching.ModulesMethodSearcher : object {
    private BidirectionalMapOnDictionary`2<IMetadataAssembly, SectionIndex`1<IMetadataSection>> myAssemblyToIndexMap;
    private List`1<IMetadataAssembly> mySearchByDefault;
    public ModulesMethodSearcher(IEnumerable`1<KeyValuePair`2<SectionIndex`1<IMetadataSection>, IModuleInfo>> assembliesData, IMetadataSectionAssemblyProvider metadataSectionAssemblyProvider);
    internal MetadataMethodId FindMethodInModule(SectionIndex`1<IMetadataSection> rootSectionIndex, MetadataToken methodToken);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Dal.Timeline.NewMetadata.Matching.ModulesMethodSearcher/<FindMethodsInReferencedAssemblies>d__4")]
internal IEnumerable`1<MetadataMethodId> FindMethodsInReferencedAssemblies(SectionIndex`1<IMetadataSection> rootSectionIndex, MetadataToken methodToken);
    private IEnumerable`1<IMetadataAssembly> ReferencedAssemblies(SectionIndex`1<IMetadataSection> rootSectionIndex);
    private MetadataMethodId GetMetadataMethod(SectionIndex`1<IMetadataSection> sectionIndex, MetadataToken methodToken);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Navigation.CombiningNavigationInfoMapper : object {
    [NotNullAttribute]
private IFunctionDataMapper`1<CallTreeNavigationInfo> myETWManagedFunctionInfoMapper;
    [CanBeNullAttribute]
private CoreFunctionNavigationInfoMapper myCoreFunctionNavigationInfoMapper;
    [CanBeNullAttribute]
private IFunctionDataMapper`1<Nullable`1<MetadataId>> myFuidToMetadataIdMapper;
    public CallTreeNavigationInfo Item { get; }
    internal CombiningNavigationInfoMapper(IFunctionDataMapper`1<CallTreeNavigationInfo> etwManagedFunctionInfoMapper, CoreFunctionNavigationInfoMapper coreFunctionNavigationInfoMapper, IFunctionDataMapper`1<Nullable`1<MetadataId>> fuidToMetadataIdMapper);
    public sealed virtual CallTreeNavigationInfo get_Item(FunctionUID fuid);
}
[DefaultMemberAttribute("Item")]
internal class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Navigation.ETWManagedFunctionNavigationInfoMapper : object {
    private IFunctionDataMapper`1<ETWManagedFunctionInfo> myETWManagedFunctionInfoProvider;
    public CallTreeNavigationInfo Item { get; }
    internal ETWManagedFunctionNavigationInfoMapper(IFunctionDataMapper`1<ETWManagedFunctionInfo> etwManagedFunctionInfoProvider);
    public sealed virtual CallTreeNavigationInfo get_Item(FunctionUID fuid);
}
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.NavigationInfoProvider : object {
    private Lifetime myLifetime;
    private IFunctionDataMapper`1<CallTreeNavigationInfo> myNavigationInfoMapper;
    [CanBeNullAttribute]
private CorePartMetadataManager myCorePartMetadataManager;
    private SectionsBag mySectionsBag;
    public NavigationInfoProvider(Lifetime lifetime, SectionsBag sectionsBag, CorePartMetadataManager corePartMetadataManager);
    private IFunctionDataMapper`1<CallTreeNavigationInfo> BuildNavigationInfoProvider(Lifetime lifetime);
    public sealed virtual CallTreeNavigationInfo GetNavigationInfo(FunctionUID fuid);
}
public static class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Providers.Builders.TimelineCallFrameBuilder : object {
    private static ILogger ourLog;
    private static SignaturePresenter ourETWCallFramePresenter;
    private static TimelineCallFrameBuilder();
    public static CallFrameInfo Build(string namespaceWithClassName, string methodName, ModuleUID moduleUID);
    public static void PresentNamespaceAndClassName(string namespaceWithClassName, String& namespace, String& className);
    private static void ConvertToTypeSignature(ClassSpecification parsedClassSpecification, String& namespace, String& className);
}
[DefaultMemberAttribute("Item")]
internal class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Providers.CallFrameInfoMapper : object {
    [CanBeNullAttribute]
private IFunctionDataMapper`1<Nullable`1<MetadataId>> myCoreMetadataIdProvider;
    [CanBeNullAttribute]
private IDataMapper`2<ValueTuple`2<MetadataId, FunctionUID>, CallFrameInfo> myCoreCallFrameInfoMapper;
    private IFunctionDataMapper`1<ETWManagedFunctionInfo> myETWManagedFunctionInfoProvider;
    private IFixedStructureProvider`1<ETWModuleOnly> myETWModuleOnlyProvider;
    private IFunctionDataMapper`1<ETWNativeFunctionInfo> myETWNativeFunctionInfoProvider;
    private IFixedStructureProvider`1<FrameAddress> myFrameAddressReader;
    private IModuleDataMapper`1<ModuleInfo> myModuleInfoMapper;
    public CallFrameInfo Item { get; }
    internal CallFrameInfoMapper(IFunctionDataMapper`1<Nullable`1<MetadataId>> coreMetadataIdProvider, IDataMapper`2<ValueTuple`2<MetadataId, FunctionUID>, CallFrameInfo> coreCallFrameInfoMapper, IFixedStructureProvider`1<FrameAddress> frameAddressReader, IFunctionDataMapper`1<ETWManagedFunctionInfo> etwManagedFunctionInfoProvider, IFunctionDataMapper`1<ETWNativeFunctionInfo> etwNativeFunctionInfoProvider, IFixedStructureProvider`1<ETWModuleOnly> etwModuleOnlyProvider, IModuleDataMapper`1<ModuleInfo> moduleInfoMapper);
    public sealed virtual CallFrameInfo get_Item(FunctionUID fuid);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Providers.CoreCallFrameInfoMapper : object {
    [NotNullAttribute]
private CoreMetadataInfoProvider myCoreFunctionInfoProvider;
    [NotNullAttribute]
private ModuleUIDBySectionIndexMap myModuleUidBySectionIndexMap;
    public CallFrameInfo Item { get; }
    public CoreCallFrameInfoMapper(CoreMetadataInfoProvider coreFunctionInfoProvider, ModuleUIDBySectionIndexMap moduleUidBySectionIndexMap);
    public sealed virtual CallFrameInfo get_Item(ValueTuple`2<MetadataId, FunctionUID> pair);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Providers.CoreFunctionMetadataIdMapper : object {
    [NotNullAttribute]
private IFunctionDataMapper`1<CoreFunction> myCoreRelatedFunctionMapper;
    [NotNullAttribute]
private IFixedStructureProvider`1<CoreModule> myETWCoreModuleDataProvider;
    [CanBeNullAttribute]
private IFuidToMetadataIdConverter myFuidToMetadataIdConverter;
    [NotNullAttribute]
private IFunctionDataMapper`1<Nullable`1<MetadataId>> myMetadataMatcher;
    public Nullable`1<MetadataId> Item { get; }
    internal CoreFunctionMetadataIdMapper(IFunctionDataMapper`1<CoreFunction> coreRelatedFunctionMapper, IFixedStructureProvider`1<CoreModule> etwCoreModuleDataProvider, IFuidToMetadataIdConverter fuidToMetadataIdConverter, IFunctionDataMapper`1<Nullable`1<MetadataId>> metadataMatcher);
    public sealed virtual Nullable`1<MetadataId> get_Item(FunctionUID fuid);
}
[DefaultMemberAttribute("Item")]
internal class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Providers.CorePresentableSignatureMapper : object {
    [NotNullAttribute]
private CoreMetadataInfoProvider myProfilerMetadata;
    [NotNullAttribute]
public string Item { get; }
    public CorePresentableSignatureMapper(CoreMetadataInfoProvider profilerMetadata);
    public sealed virtual string get_Item(MetadataId metadataId);
}
[DefaultMemberAttribute("Item")]
internal class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Providers.Helpers.CoreModuleInfoMapper : object {
    private IEnumeratedFixedStructureProvider`1<CoreModule> myCoreModuleProvider;
    [CanBeNullAttribute]
private IModulePathSection myModulePathSection;
    private IMetadataSectionAssemblyProvider myProfilerMetadata;
    public CoreModuleInfo Item { get; }
    public int Count { get; }
    internal CoreModuleInfoMapper(IMetadataSectionAssemblyProvider profilerMetadata, IModulePathSection modulePathSection, IEnumeratedFixedStructureProvider`1<CoreModule> coreModuleProvider);
    public sealed virtual CoreModuleInfo get_Item(ModuleUID moduleUID);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Dal.Timeline.NewMetadata.Providers.Helpers.CoreModuleInfoMapper/<GetAllItems>d__6")]
private IEnumerable`1<KeyValuePair`2<ModuleUID, CoreModuleInfo>> GetAllItems();
    public sealed virtual IEnumerator`1<KeyValuePair`2<ModuleUID, CoreModuleInfo>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
}
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Providers.Helpers.ETWManagedFunctionInfo : ValueType {
    [CompilerGeneratedAttribute]
private ModuleUID <ModuleUID>k__BackingField;
    [CompilerGeneratedAttribute]
private MetadataToken <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private EtwMethodFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NamespaceWithClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Signature>k__BackingField;
    public ModuleUID ModuleUID { get; }
    public MetadataToken Token { get; }
    public EtwMethodFlags Flags { get; }
    public string NamespaceWithClass { get; }
    public string Method { get; }
    public string Signature { get; }
    internal ETWManagedFunctionInfo(ModuleUID moduleUID, MetadataToken token, EtwMethodFlags flags, string namespaceWithClass, string method, string signature);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ModuleUID get_ModuleUID();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public MetadataToken get_Token();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public EtwMethodFlags get_Flags();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_NamespaceWithClass();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Method();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Signature();
}
[DefaultMemberAttribute("Item")]
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Providers.Helpers.ETWManagedFunctionInfoProvider : object {
    private IUnfixedStructureProvider`1<ETWManagedFunctionData> myETWManagedFunctionDataReader;
    private IFixedStructureProvider`1<ETWManagedFunction> myETWManagedFunctionReader;
    public ETWManagedFunctionInfo Item { get; }
    internal ETWManagedFunctionInfoProvider(IFixedStructureProvider`1<ETWManagedFunction> etwManagedFunctionReader, IUnfixedStructureProvider`1<ETWManagedFunctionData> etwManagedFunctionDataReader);
    public sealed virtual ETWManagedFunctionInfo get_Item(FunctionUID fuid);
}
internal class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Providers.Helpers.ETWNativeFunctionInfo : ValueType {
    private static ILogger ourLog;
    [CompilerGeneratedAttribute]
private ModuleUID <ModuleUID>k__BackingField;
    private string myNameWithSignatureRaw;
    private string myNameWithSignature;
    private string myPrettyName;
    private string myNgenAssemblyName;
    private Nullable`1<UInt32> myNgenToken;
    internal ModuleUID ModuleUID { get; }
    public string NameWithSignature { get; }
    public string PrettyName { get; }
    public string NgenAssemblyName { get; }
    public UInt32 NgenToken { get; }
    internal ETWNativeFunctionInfo(ModuleUID moduleUID, string nameWithSignatureRaw);
    private static ETWNativeFunctionInfo();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal ModuleUID get_ModuleUID();
    private void UpdateMethodDetails();
    private static string GetPrettyName(string name);
    public string get_NameWithSignature();
    public string get_PrettyName();
    public string get_NgenAssemblyName();
    public UInt32 get_NgenToken();
}
[DefaultMemberAttribute("Item")]
internal class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Providers.Helpers.ETWNativeFunctionInfoProvider : object {
    private IUnfixedStructureProvider`1<ETWNativeFunctionData> myETWNativeFunctionDataReader;
    private IFixedStructureProvider`1<ETWNativeFunction> myETWNativeFunctionReader;
    public ETWNativeFunctionInfo Item { get; }
    internal ETWNativeFunctionInfoProvider(IFixedStructureProvider`1<ETWNativeFunction> etwNativeFunctionReader, IUnfixedStructureProvider`1<ETWNativeFunctionData> etwNativeFunctionDataReader);
    public sealed virtual ETWNativeFunctionInfo get_Item(FunctionUID fuid);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Providers.ManagedModuleDataProvider : object {
    private IUnfixedStructureProvider`1<ETWManagedModuleData> myManagedModuleDataReader;
    private IEnumeratedFixedStructureProvider`1<ETWManagedModule> myManagedModuleReader;
    public ETWManagedModuleData Item { get; }
    public int Count { get; }
    internal ManagedModuleDataProvider(IEnumeratedFixedStructureProvider`1<ETWManagedModule> managedModuleReader, IUnfixedStructureProvider`1<ETWManagedModuleData> managedModuleDataReader);
    public sealed virtual ETWManagedModuleData get_Item(ModuleUID moduleUID);
    public sealed virtual IEnumerator`1<KeyValuePair`2<ModuleUID, ETWManagedModuleData>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Dal.Timeline.NewMetadata.Providers.ManagedModuleDataProvider/<GetAllItems>d__9")]
private IEnumerable`1<KeyValuePair`2<ModuleUID, ETWManagedModuleData>> GetAllItems();
}
[DefaultMemberAttribute("Item")]
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Providers.ModuleInfoMapper : object {
    private ILogger myLog;
    [CanBeNullAttribute]
private IEnumeratedModuleDataMapper`1<CoreModuleInfo> myCoreModuleInfoMapper;
    [NotNullAttribute]
private ManagedModuleDataProvider myManagedModuleDataProvider;
    [NotNullAttribute]
private NativeModuleDataProvider myNativeModuleDataProvider;
    public ModuleInfo Item { get; }
    public int Count { get; }
    internal ModuleInfoMapper(ManagedModuleDataProvider managedModuleDataProvider, NativeModuleDataProvider nativeModuleDataProvider, IEnumeratedModuleDataMapper`1<CoreModuleInfo> coreModuleInfoMapper);
    public sealed virtual ModuleInfo get_Item(ModuleUID moduleUID);
    private ModuleInfo GetModuleInfo(ModuleUID moduleUID);
    public sealed virtual IEnumerator`1<KeyValuePair`2<ModuleUID, ModuleInfo>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Dal.Timeline.NewMetadata.Providers.ModuleInfoMapper/<GetAllItems>d__12")]
private IEnumerable`1<KeyValuePair`2<ModuleUID, ModuleInfo>> GetAllItems();
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Dal.Timeline.NewMetadata.Providers.ModuleInfoMapper/<EnumeratePairs>d__13")]
private IEnumerable`1<KeyValuePair`2<ModuleUID, ModuleInfo>> EnumeratePairs(int count, ModuleType moduleType);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Providers.ModuleUIDByFunctionUIDMapper : object {
    [CanBeNullAttribute]
private IFunctionDataMapper`1<Nullable`1<MetadataId>> myCoreMetadataIdProvider;
    [CanBeNullAttribute]
private ModuleUIDBySectionIndexMap myModuleUidBySectionIndexMap;
    [CanBeNullAttribute]
private IFunctionDataMapper`1<CoreFunction> myCoreAndMatchFunctionMapper;
    private IFixedStructureProvider`1<ETWManagedFunction> myETWManagedFunctionReader;
    private IFixedStructureProvider`1<ETWModuleOnly> myETWModuleOnlyReader;
    private IFixedStructureProvider`1<ETWNativeFunction> myETWNativeFunctionReader;
    public Nullable`1<ModuleUID> Item { get; }
    internal ModuleUIDByFunctionUIDMapper(IFunctionDataMapper`1<Nullable`1<MetadataId>> coreMetadataIdProvider, ModuleUIDBySectionIndexMap moduleUidBySectionIndexMap, IFunctionDataMapper`1<CoreFunction> coreAndMatchFunctionMapper, IFixedStructureProvider`1<ETWManagedFunction> etwManagedFunctionReader, IFixedStructureProvider`1<ETWNativeFunction> etwNativeFunctionReader, IFixedStructureProvider`1<ETWModuleOnly> etwModuleOnlyReader);
    public sealed virtual Nullable`1<ModuleUID> get_Item(FunctionUID fuid);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Providers.NativeModuleDataProvider : object {
    private IUnfixedStructureProvider`1<ETWNativeModuleData> myNativeModuleDataReader;
    private IEnumeratedFixedStructureProvider`1<ETWNativeModule> myNativeModuleReader;
    public ETWNativeModuleData Item { get; }
    public int Count { get; }
    internal NativeModuleDataProvider(IEnumeratedFixedStructureProvider`1<ETWNativeModule> nativeModuleReader, IUnfixedStructureProvider`1<ETWNativeModuleData> nativeModuleDataReader);
    public sealed virtual ETWNativeModuleData get_Item(ModuleUID moduleUID);
    public sealed virtual IEnumerator`1<KeyValuePair`2<ModuleUID, ETWNativeModuleData>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Dal.Timeline.NewMetadata.Providers.NativeModuleDataProvider/<GetAllItems>d__9")]
private IEnumerable`1<KeyValuePair`2<ModuleUID, ETWNativeModuleData>> GetAllItems();
}
public static class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Providers.NgenNameParser : object {
    public static string ParseName(string name, String& ngenAssemblyName, UInt32& ngenMethodToken);
}
[DefaultMemberAttribute("Item")]
internal class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Providers.PresentableSignatureMapper : object {
    [NotNullAttribute]
private static SignaturePresenter ourETWPresenter;
    [NotNullAttribute]
private IFunctionDataMapper`1<ETWManagedFunctionInfo> myETWManagedFunctionInfoProvider;
    [CanBeNullAttribute]
private IFunctionDataMapper`1<Nullable`1<MetadataId>> myCoreMetadataIdProvider;
    [CanBeNullAttribute]
private IDataMapper`2<MetadataId, string> myCorePresentableSignatureMapper;
    private static ILogger ourLog;
    [NotNullAttribute]
public string Item { get; }
    public PresentableSignatureMapper(IFunctionDataMapper`1<ETWManagedFunctionInfo> etwManagedFunctionInfoProvider, IFunctionDataMapper`1<Nullable`1<MetadataId>> coreMetadataIdProvider, IDataMapper`2<MetadataId, string> corePresentableSignatureMapper);
    private static PresentableSignatureMapper();
    public sealed virtual string get_Item(FunctionUID fuid);
    private string PresentSignatureSafe(ISignature signature, ETWManagedFunctionInfo info);
}
[DefaultMemberAttribute("Item")]
internal class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Providers.SourceViewMapper : object {
    [NotNullAttribute]
private IFunctionDataMapper`1<Nullable`1<ModuleUID>> myModuleUIDByFunctionUID;
    [NotNullAttribute]
private IEnumeratedModuleDataMapper`1<ModuleInfo> myModuleInfoProvider;
    [CanBeNullAttribute]
private IFunctionDataMapper`1<Nullable`1<MetadataId>> myCoreMetadataIdProvider;
    [CanBeNullAttribute]
private IMetadataSection myMetadataSection;
    [CanBeNullAttribute]
private IMetadataSectionAssemblyProvider myMetadataAssemblyProvider;
    [CanBeNullAttribute]
private IModulePathSection myProfilerModulePathSection;
    [NotNullAttribute]
private IEnumeratedFixedStructureProvider`1<ETWNativeModule> myNativeModuleReader;
    [NotNullAttribute]
private NativeModuleDataProvider myNativeModuleDataProvider;
    [NotNullAttribute]
private IEnumeratedFixedStructureProvider`1<ETWNativeFunction> myNativeFunctionReader;
    private ETWNativeFunctionInfoProvider myETWNativeFunctionInfoReader;
    [NotNullAttribute]
private ManagedModuleDataProvider myManagedModuleDataProvider;
    private ETWManagedFunctionInfoProvider myETWManagedFunctionInfoProvider;
    private BidirectionalMapOnDictionary`2<UInt32, UInt32> myNativeModuleToManagedMap;
    [NotNullAttribute]
private IEnumeratedFixedStructureProvider`1<ETWManagedModule> myManagedModuleReader;
    [NotNullAttribute]
private IUnfixedStructureProvider`1<ETWManagedModuleData> myManagedModuleDataReader;
    private ETWToCoreModuleMapper myETWToCoreModuleMapper;
    private static ILogger ourLog;
    [CanBeNullAttribute]
public SourceViewNavigationInfo Item { get; }
    public SourceViewMapper(IFunctionDataMapper`1<Nullable`1<ModuleUID>> moduleUIDByFunctionUID, IEnumeratedModuleDataMapper`1<ModuleInfo> moduleInfoProvider, IFunctionDataMapper`1<Nullable`1<MetadataId>> coreMetadataIdProvider, IMetadataSection metadataSection, IMetadataSectionAssemblyProvider metadataAssemblyProvider, IModulePathSection profilerModulePathSection, IEnumeratedFixedStructureProvider`1<ETWNativeModule> nativeModuleReader, NativeModuleDataProvider nativeModuleDataProvider, IEnumeratedFixedStructureProvider`1<ETWNativeFunction> nativeFunctionReader, ETWNativeFunctionInfoProvider etwNativeFunctionInfoReader, ManagedModuleDataProvider managedModuleDataProvider, ETWManagedFunctionInfoProvider etwManagedFunctionInfoProvider, BidirectionalMapOnDictionary`2<UInt32, UInt32> nativeModuleToManagedMap, IEnumeratedFixedStructureProvider`1<ETWManagedModule> managedModuleReader, IUnfixedStructureProvider`1<ETWManagedModuleData> managedModuleDataReader, ETWToCoreModuleMapper etwToCoreModuleMapper);
    private static SourceViewMapper();
    public sealed virtual SourceViewNavigationInfo get_Item(FunctionUID fuid);
    private static string TryGetNgenAssemblyName(ETWNativeFunctionInfo etwFunctionInfo, ModuleDebugInfo moduleDebugInfo);
    private ModuleDebugInfo GetNativeModuleDebugInfo(ModuleUID nativeModuleUID, string modulePathForLogs);
    private SourceViewNavigationInfo GetCoreSourceViewNavigationInfo(SectionIndex`1<IMetadataSection> sectionIndex, UInt32 methodToken);
}
[ExtensionAttribute]
internal static class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.BinaryReaderEx : object {
    [ExtensionAttribute]
public static void ReadIntoBuffer(BinaryReader reader, int bytesToRead, Byte[]& buffer);
}
[IsReadOnlyAttribute]
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.Core.Function.CoreFunction : ValueType {
    [CompilerGeneratedAttribute]
private ModuleUID <ModuleUID>k__BackingField;
    [CompilerGeneratedAttribute]
private MetadataToken <MethodToken>k__BackingField;
    public ModuleUID ModuleUID { get; public set; }
    public MetadataToken MethodToken { get; public set; }
    public CoreFunction(ModuleUID ModuleUID, MetadataToken MethodToken);
    [CompilerGeneratedAttribute]
public ModuleUID get_ModuleUID();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModuleUID(ModuleUID value);
    [CompilerGeneratedAttribute]
public MetadataToken get_MethodToken();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MethodToken(MetadataToken value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(CoreFunction left, CoreFunction right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(CoreFunction left, CoreFunction right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(CoreFunction other);
    [CompilerGeneratedAttribute]
public void Deconstruct(ModuleUID& ModuleUID, MetadataToken& MethodToken);
}
internal class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.Core.Function.CoreFunctionTransformer : object {
    private ModuleUIDBySectionIndexMap myModuleUidMap;
    public CoreFunctionTransformer(ModuleUIDBySectionIndexMap moduleUidMap);
    public CoreFunction Transform(CoreFunctionV0 v0);
}
[IsReadOnlyAttribute]
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.Core.Function.CoreFunctionV0 : ValueType {
    [CompilerGeneratedAttribute]
private UInt32 <SectionIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RID>k__BackingField;
    public UInt32 SectionIndex { get; public set; }
    public int RID { get; public set; }
    public CoreFunctionV0(UInt32 SectionIndex, int RID);
    [CompilerGeneratedAttribute]
public UInt32 get_SectionIndex();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SectionIndex(UInt32 value);
    [CompilerGeneratedAttribute]
public int get_RID();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RID(int value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(CoreFunctionV0 left, CoreFunctionV0 right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(CoreFunctionV0 left, CoreFunctionV0 right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(CoreFunctionV0 other);
    [CompilerGeneratedAttribute]
public void Deconstruct(UInt32& SectionIndex, Int32& RID);
}
[DefaultMemberAttribute("Item")]
internal class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.Core.Function.CoreRelatedFunctionReader : object {
    private IFixedStructureProvider`1<CoreFunction> myETWCoreFunctionReader;
    public CoreFunction Item { get; }
    public CoreRelatedFunctionReader(IFixedStructureProvider`1<CoreFunction> etwCoreFunctionReader);
    public sealed virtual CoreFunction get_Item(FunctionUID fuid);
}
[IsReadOnlyAttribute]
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.Core.Module.CoreModule : ValueType {
    [CompilerGeneratedAttribute]
private ulong <CoreModuleId>k__BackingField;
    [CompilerGeneratedAttribute]
private SectionIndex`1<IMetadataSection> <CoreSectionIndex>k__BackingField;
    public ulong CoreModuleId { get; public set; }
    public SectionIndex`1<IMetadataSection> CoreSectionIndex { get; public set; }
    public CoreModule(ulong CoreModuleId, SectionIndex`1<IMetadataSection> CoreSectionIndex);
    [CompilerGeneratedAttribute]
public ulong get_CoreModuleId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CoreModuleId(ulong value);
    [CompilerGeneratedAttribute]
public SectionIndex`1<IMetadataSection> get_CoreSectionIndex();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CoreSectionIndex(SectionIndex`1<IMetadataSection> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(CoreModule left, CoreModule right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(CoreModule left, CoreModule right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(CoreModule other);
    [CompilerGeneratedAttribute]
public void Deconstruct(UInt64& CoreModuleId, SectionIndex`1& CoreSectionIndex);
}
[IsReadOnlyAttribute]
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.ETW.Managed.Function.ETWManagedFunction : ValueType {
    [CompilerGeneratedAttribute]
private ModuleUID <ModuleUID>k__BackingField;
    [CompilerGeneratedAttribute]
private MetadataToken <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private EtwMethodFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private DataOffset <Offset>k__BackingField;
    public ModuleUID ModuleUID { get; public set; }
    public MetadataToken Token { get; public set; }
    public EtwMethodFlags Flags { get; public set; }
    public DataOffset Offset { get; public set; }
    public ETWManagedFunction(ModuleUID ModuleUID, MetadataToken Token, EtwMethodFlags Flags, DataOffset Offset);
    [CompilerGeneratedAttribute]
public ModuleUID get_ModuleUID();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModuleUID(ModuleUID value);
    [CompilerGeneratedAttribute]
public MetadataToken get_Token();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Token(MetadataToken value);
    [CompilerGeneratedAttribute]
public EtwMethodFlags get_Flags();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Flags(EtwMethodFlags value);
    [CompilerGeneratedAttribute]
public DataOffset get_Offset();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Offset(DataOffset value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ETWManagedFunction left, ETWManagedFunction right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ETWManagedFunction left, ETWManagedFunction right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ETWManagedFunction other);
    [CompilerGeneratedAttribute]
public void Deconstruct(ModuleUID& ModuleUID, MetadataToken& Token, EtwMethodFlags& Flags, DataOffset& Offset);
}
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.ETW.Managed.Function.ETWManagedFunctionData : ValueType {
    [CompilerGeneratedAttribute]
private string <NamespaceWithClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Signature>k__BackingField;
    public string NamespaceWithClass { get; public set; }
    public string Method { get; public set; }
    public string Signature { get; public set; }
    public ETWManagedFunctionData(string NamespaceWithClass, string Method, string Signature);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_NamespaceWithClass();
    [CompilerGeneratedAttribute]
public void set_NamespaceWithClass(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Signature();
    [CompilerGeneratedAttribute]
public void set_Signature(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ETWManagedFunctionData left, ETWManagedFunctionData right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ETWManagedFunctionData left, ETWManagedFunctionData right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ETWManagedFunctionData other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(String& NamespaceWithClass, String& Method, String& Signature);
}
public static class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.ETW.Managed.Function.ETWManagedFunctionDataFactories : object {
    public static ETWManagedFunctionData Current(BinaryReader reader, Byte[]& buffer);
}
public static class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.ETW.Managed.Function.ETWManagedFunctionFactories : object {
    public static ETWManagedFunction Current(ETWManagedFunctionV0 v0);
}
[IsReadOnlyAttribute]
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.ETW.Managed.Function.ETWManagedFunctionV0 : ValueType {
    [CompilerGeneratedAttribute]
private UInt32 <ModuleIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RID>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private DataOffset <Offset>k__BackingField;
    public UInt32 ModuleIndex { get; public set; }
    public int RID { get; public set; }
    public int Flags { get; public set; }
    public DataOffset Offset { get; public set; }
    public ETWManagedFunctionV0(UInt32 ModuleIndex, int RID, int Flags, DataOffset Offset);
    [CompilerGeneratedAttribute]
public UInt32 get_ModuleIndex();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModuleIndex(UInt32 value);
    [CompilerGeneratedAttribute]
public int get_RID();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RID(int value);
    [CompilerGeneratedAttribute]
public int get_Flags();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Flags(int value);
    [CompilerGeneratedAttribute]
public DataOffset get_Offset();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Offset(DataOffset value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ETWManagedFunctionV0 left, ETWManagedFunctionV0 right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ETWManagedFunctionV0 left, ETWManagedFunctionV0 right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ETWManagedFunctionV0 other);
    [CompilerGeneratedAttribute]
public void Deconstruct(UInt32& ModuleIndex, Int32& RID, Int32& Flags, DataOffset& Offset);
}
[FlagsAttribute]
public enum JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.ETW.Managed.Function.EtwMethodFlags : Enum {
    public int value__;
    public static EtwMethodFlags None;
    public static EtwMethodFlags Dynamic;
    public static EtwMethodFlags Generic;
    public static EtwMethodFlags JitCompiled;
    public static EtwMethodFlags Helper;
    public static EtwMethodFlags All;
}
[IsReadOnlyAttribute]
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.ETW.Managed.Module.ETWManagedModule : ValueType {
    [CompilerGeneratedAttribute]
private ETWModuleId <ETWModuleId>k__BackingField;
    [CompilerGeneratedAttribute]
private DataOffset <Offset>k__BackingField;
    public ETWModuleId ETWModuleId { get; public set; }
    public DataOffset Offset { get; public set; }
    public ETWManagedModule(ETWModuleId ETWModuleId, DataOffset Offset);
    [CompilerGeneratedAttribute]
public ETWModuleId get_ETWModuleId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ETWModuleId(ETWModuleId value);
    [CompilerGeneratedAttribute]
public DataOffset get_Offset();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Offset(DataOffset value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ETWManagedModule left, ETWManagedModule right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ETWManagedModule left, ETWManagedModule right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ETWManagedModule other);
    [CompilerGeneratedAttribute]
public void Deconstruct(ETWModuleId& ETWModuleId, DataOffset& Offset);
}
[IsReadOnlyAttribute]
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.ETW.Managed.Module.ETWManagedModuleData : ValueType {
    [CompilerGeneratedAttribute]
private string <ILPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <AssemblyId>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ModuleFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <DebugDirectory>k__BackingField;
    public string ILPath { get; public set; }
    public string NativePath { get; public set; }
    public ulong AssemblyId { get; public set; }
    public UInt32 ModuleFlags { get; public set; }
    public Byte[] DebugDirectory { get; public set; }
    public ETWManagedModuleData(string ILPath, string NativePath, ulong AssemblyId, UInt32 ModuleFlags, Byte[] DebugDirectory);
    [CompilerGeneratedAttribute]
public string get_ILPath();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ILPath(string value);
    [CompilerGeneratedAttribute]
public string get_NativePath();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NativePath(string value);
    [CompilerGeneratedAttribute]
public ulong get_AssemblyId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AssemblyId(ulong value);
    [CompilerGeneratedAttribute]
public UInt32 get_ModuleFlags();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModuleFlags(UInt32 value);
    [CompilerGeneratedAttribute]
public Byte[] get_DebugDirectory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DebugDirectory(Byte[] value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ETWManagedModuleData left, ETWManagedModuleData right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ETWManagedModuleData left, ETWManagedModuleData right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ETWManagedModuleData other);
    [CompilerGeneratedAttribute]
public void Deconstruct(String& ILPath, String& NativePath, UInt64& AssemblyId, UInt32& ModuleFlags, Byte[]& DebugDirectory);
}
public static class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.ETW.Managed.Module.ETWManagedModuleDataFactories : object {
    private static ETWManagedModuleDataV0 V0(BinaryReader reader, Byte[]& buffer);
    public static ETWManagedModuleData Current(BinaryReader reader, Byte[]& buffer);
    public static ETWManagedModuleData V0ToCurrent(BinaryReader reader, Byte[]& buffer);
}
[IsReadOnlyAttribute]
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.ETW.Managed.Module.ETWManagedModuleDataV0 : ValueType {
    [CompilerGeneratedAttribute]
private string <ILPath>k__BackingField;
    public string ILPath { get; public set; }
    public ETWManagedModuleDataV0(string ILPath);
    [CompilerGeneratedAttribute]
public string get_ILPath();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ILPath(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ETWManagedModuleDataV0 left, ETWManagedModuleDataV0 right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ETWManagedModuleDataV0 left, ETWManagedModuleDataV0 right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ETWManagedModuleDataV0 other);
    [CompilerGeneratedAttribute]
public void Deconstruct(String& ILPath);
}
[IsReadOnlyAttribute]
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.ETW.Managed.Module.ETWModuleId : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Value>k__BackingField;
    public ulong Value { get; public set; }
    public ETWModuleId(ulong Value);
    [CompilerGeneratedAttribute]
public ulong get_Value();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Value(ulong value);
    [LocalizableAttribute("False")]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ETWModuleId left, ETWModuleId right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ETWModuleId left, ETWModuleId right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ETWModuleId other);
    [CompilerGeneratedAttribute]
public void Deconstruct(UInt64& Value);
}
[IsReadOnlyAttribute]
internal class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.ETW.Misc.ModuleOnly.ETWModuleOnly : ValueType {
    [CompilerGeneratedAttribute]
private ModuleUID <ModuleUID>k__BackingField;
    public ModuleUID ModuleUID { get; public set; }
    public ETWModuleOnly(ModuleUID ModuleUID);
    [CompilerGeneratedAttribute]
public ModuleUID get_ModuleUID();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModuleUID(ModuleUID value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ETWModuleOnly left, ETWModuleOnly right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ETWModuleOnly left, ETWModuleOnly right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ETWModuleOnly other);
    [CompilerGeneratedAttribute]
public void Deconstruct(ModuleUID& ModuleUID);
}
[DefaultMemberAttribute("Item")]
internal class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.ETW.Misc.ModuleOnly.ETWModuleOnlyBuilder : object {
    public ETWModuleOnly Item { get; }
    public sealed virtual ETWModuleOnly get_Item(UInt32 index);
}
[IsReadOnlyAttribute]
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.ETW.Misc.NativeModuleIndexToManaged : ValueType {
    [CompilerGeneratedAttribute]
private UInt32 <NativeIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ManagedIndex>k__BackingField;
    public UInt32 NativeIndex { get; public set; }
    public UInt32 ManagedIndex { get; public set; }
    public NativeModuleIndexToManaged(UInt32 NativeIndex, UInt32 ManagedIndex);
    [CompilerGeneratedAttribute]
public UInt32 get_NativeIndex();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NativeIndex(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_ManagedIndex();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ManagedIndex(UInt32 value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(NativeModuleIndexToManaged left, NativeModuleIndexToManaged right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(NativeModuleIndexToManaged left, NativeModuleIndexToManaged right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(NativeModuleIndexToManaged other);
    [CompilerGeneratedAttribute]
public void Deconstruct(UInt32& NativeIndex, UInt32& ManagedIndex);
}
[IsReadOnlyAttribute]
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.ETW.Misc.Unresolved.FrameAddress : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Value>k__BackingField;
    public ulong Value { get; public set; }
    public FrameAddress(ulong Value);
    [CompilerGeneratedAttribute]
public ulong get_Value();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Value(ulong value);
    public static ulong op_Explicit(FrameAddress address);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(FrameAddress left, FrameAddress right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(FrameAddress left, FrameAddress right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(FrameAddress other);
    [CompilerGeneratedAttribute]
public void Deconstruct(UInt64& Value);
}
[IsReadOnlyAttribute]
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.ETW.Native.Function.ETWNativeFunction : ValueType {
    [CompilerGeneratedAttribute]
private ModuleUID <ModuleUID>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <StartAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private DataOffset <Offset>k__BackingField;
    public ModuleUID ModuleUID { get; public set; }
    public ulong StartAddress { get; public set; }
    public DataOffset Offset { get; public set; }
    public ETWNativeFunction(ModuleUID ModuleUID, ulong StartAddress, DataOffset Offset);
    [CompilerGeneratedAttribute]
public ModuleUID get_ModuleUID();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModuleUID(ModuleUID value);
    [CompilerGeneratedAttribute]
public ulong get_StartAddress();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_StartAddress(ulong value);
    [CompilerGeneratedAttribute]
public DataOffset get_Offset();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Offset(DataOffset value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ETWNativeFunction left, ETWNativeFunction right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ETWNativeFunction left, ETWNativeFunction right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ETWNativeFunction other);
    [CompilerGeneratedAttribute]
public void Deconstruct(ModuleUID& ModuleUID, UInt64& StartAddress, DataOffset& Offset);
}
[IsReadOnlyAttribute]
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.ETW.Native.Function.ETWNativeFunctionData : ValueType {
    [CompilerGeneratedAttribute]
private string <NameWithSignature>k__BackingField;
    public string NameWithSignature { get; public set; }
    public ETWNativeFunctionData(string NameWithSignature);
    [CompilerGeneratedAttribute]
public string get_NameWithSignature();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NameWithSignature(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ETWNativeFunctionData left, ETWNativeFunctionData right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ETWNativeFunctionData left, ETWNativeFunctionData right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ETWNativeFunctionData other);
    [CompilerGeneratedAttribute]
public void Deconstruct(String& NameWithSignature);
}
public static class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.ETW.Native.Function.ETWNativeFunctionDataFactories : object {
    public static ETWNativeFunctionData Current(BinaryReader reader, Byte[]& buffer);
}
public static class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.ETW.Native.Function.ETWNativeFunctionFactories : object {
    public static ETWNativeFunction V0ToCurrent(ETWNativeFunctionV0 v0);
    private static ModuleUID ModuleUIDFromIndex(UInt32 moduleIndex);
    public static ETWNativeFunction Current(ETWNativeFunctionV1 v1);
}
[IsReadOnlyAttribute]
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.ETW.Native.Function.ETWNativeFunctionV0 : ValueType {
    [CompilerGeneratedAttribute]
private UInt32 <ModuleIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private DataOffset <Offset>k__BackingField;
    public UInt32 ModuleIndex { get; public set; }
    public DataOffset Offset { get; public set; }
    public ETWNativeFunctionV0(UInt32 ModuleIndex, DataOffset Offset);
    [CompilerGeneratedAttribute]
public UInt32 get_ModuleIndex();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModuleIndex(UInt32 value);
    [CompilerGeneratedAttribute]
public DataOffset get_Offset();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Offset(DataOffset value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ETWNativeFunctionV0 left, ETWNativeFunctionV0 right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ETWNativeFunctionV0 left, ETWNativeFunctionV0 right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ETWNativeFunctionV0 other);
    [CompilerGeneratedAttribute]
public void Deconstruct(UInt32& ModuleIndex, DataOffset& Offset);
}
[IsReadOnlyAttribute]
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.ETW.Native.Function.ETWNativeFunctionV1 : ValueType {
    [CompilerGeneratedAttribute]
private UInt32 <ModuleIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <StartAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private DataOffset <Offset>k__BackingField;
    public UInt32 ModuleIndex { get; public set; }
    public ulong StartAddress { get; public set; }
    public DataOffset Offset { get; public set; }
    public ETWNativeFunctionV1(UInt32 ModuleIndex, ulong StartAddress, DataOffset Offset);
    [CompilerGeneratedAttribute]
public UInt32 get_ModuleIndex();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModuleIndex(UInt32 value);
    [CompilerGeneratedAttribute]
public ulong get_StartAddress();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_StartAddress(ulong value);
    [CompilerGeneratedAttribute]
public DataOffset get_Offset();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Offset(DataOffset value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ETWNativeFunctionV1 left, ETWNativeFunctionV1 right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ETWNativeFunctionV1 left, ETWNativeFunctionV1 right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ETWNativeFunctionV1 other);
    [CompilerGeneratedAttribute]
public void Deconstruct(UInt32& ModuleIndex, UInt64& StartAddress, DataOffset& Offset);
}
public static class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.ETW.Native.Module.ETWModuleDataEx : object {
    private static ILogger ourLog;
    private static ETWModuleDataEx();
    public static ModuleDebugInfo ReadModuleDebugInfo(Byte[] debugDirectory, string pathForLogs);
}
[IsReadOnlyAttribute]
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.ETW.Native.Module.ETWNativeModule : ValueType {
    [CompilerGeneratedAttribute]
private ulong <ModBase>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ImageChecksum>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TimeDateStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private DataOffset <Offset>k__BackingField;
    public ulong ModBase { get; public set; }
    public int ImageChecksum { get; public set; }
    public int TimeDateStamp { get; public set; }
    public DataOffset Offset { get; public set; }
    public ETWNativeModule(ulong ModBase, int ImageChecksum, int TimeDateStamp, DataOffset Offset);
    [CompilerGeneratedAttribute]
public ulong get_ModBase();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModBase(ulong value);
    [CompilerGeneratedAttribute]
public int get_ImageChecksum();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ImageChecksum(int value);
    [CompilerGeneratedAttribute]
public int get_TimeDateStamp();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TimeDateStamp(int value);
    [CompilerGeneratedAttribute]
public DataOffset get_Offset();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Offset(DataOffset value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ETWNativeModule left, ETWNativeModule right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ETWNativeModule left, ETWNativeModule right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ETWNativeModule other);
    [CompilerGeneratedAttribute]
public void Deconstruct(UInt64& ModBase, Int32& ImageChecksum, Int32& TimeDateStamp, DataOffset& Offset);
}
[IsReadOnlyAttribute]
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.ETW.Native.Module.ETWNativeModuleData : ValueType {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <DebugDirectory>k__BackingField;
    public string Path { get; public set; }
    public Byte[] DebugDirectory { get; public set; }
    public ETWNativeModuleData(string Path, Byte[] DebugDirectory);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Path(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_DebugDirectory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DebugDirectory(Byte[] value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ETWNativeModuleData left, ETWNativeModuleData right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ETWNativeModuleData left, ETWNativeModuleData right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ETWNativeModuleData other);
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Path, Byte[]& DebugDirectory);
}
public static class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.ETW.Native.Module.ETWNativeModuleDataFactories : object {
    private static ETWNativeModuleDataV0 V0(BinaryReader reader, Byte[]& buffer);
    public static ETWNativeModuleData V0ToCurrent(BinaryReader reader, Byte[]& buffer);
    public static ETWNativeModuleData Current(BinaryReader reader, Byte[]& buffer);
}
[IsReadOnlyAttribute]
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.ETW.Native.Module.ETWNativeModuleDataV0 : ValueType {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Path { get; public set; }
    public ETWNativeModuleDataV0(string Path);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Path(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ETWNativeModuleDataV0 left, ETWNativeModuleDataV0 right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ETWNativeModuleDataV0 left, ETWNativeModuleDataV0 right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ETWNativeModuleDataV0 other);
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Path);
}
public static class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.ETW.Native.Module.ETWNativeModuleFactories : object {
    public static ETWNativeModule V0ToCurrent(ETWNativeModuleV0 v0);
}
[IsReadOnlyAttribute]
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.ETW.Native.Module.ETWNativeModuleV0 : ValueType {
    [CompilerGeneratedAttribute]
private DataOffset <Offset>k__BackingField;
    public DataOffset Offset { get; public set; }
    public ETWNativeModuleV0(DataOffset Offset);
    [CompilerGeneratedAttribute]
public DataOffset get_Offset();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Offset(DataOffset value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ETWNativeModuleV0 left, ETWNativeModuleV0 right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ETWNativeModuleV0 left, ETWNativeModuleV0 right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ETWNativeModuleV0 other);
    [CompilerGeneratedAttribute]
public void Deconstruct(DataOffset& Offset);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.MemoryMappedFixedReader`1 : object {
    [NotNullAttribute]
private IRandomAccessStore`1<TData> myMemory;
    private Func`1<string> mySectionNameGetter;
    public int Count { get; }
    public TData Item { get; }
    private MemoryMappedFixedReader`1(IRandomAccessStore`1<TData> memory, Func`1<string> sectionNameGetter);
    public sealed virtual int get_Count();
    public sealed virtual TData get_Item(UInt32 index);
    public sealed virtual IEnumerator`1<TData> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.MemoryMappedFixedReader`1/<GetAllItems>d__9")]
private IEnumerable`1<TData> GetAllItems();
    [NotNullAttribute]
public static IEnumeratedFixedStructureProvider`1<TData> Create(Lifetime lifetime, IReadonlyDataSection section);
    [NotNullAttribute]
public static IEnumeratedFixedStructureProvider`1<TData> Create(IRandomAccessStore`1<TData> memory, Func`1<string> sectionNameGetter);
    private TData GetUnsafe(UInt32 index);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.MemoryMappedFixedTransformingReader`2 : object {
    [NotNullAttribute]
private IRandomAccessStore`1<TOrig> myMemory;
    private Func`2<TOrig, TData> myTransform;
    private Func`1<string> mySectionNameGetter;
    public int Count { get; }
    public TData Item { get; }
    private MemoryMappedFixedTransformingReader`2(IRandomAccessStore`1<TOrig> memory, Func`2<TOrig, TData> transform, Func`1<string> sectionNameGetter);
    public sealed virtual int get_Count();
    public sealed virtual TData get_Item(UInt32 index);
    public sealed virtual IEnumerator`1<TData> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.MemoryMappedFixedTransformingReader`2/<GetAllItems>d__10")]
public IEnumerable`1<TData> GetAllItems();
    [NotNullAttribute]
public static IEnumeratedFixedStructureProvider`1<TData> Create(Lifetime lifetime, IReadonlyDataSection section, Func`2<TOrig, TData> transform);
    private TData GetUnsafe(UInt32 index);
}
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Readers.MemoryMappedUnfixedReader`1 : object {
    private Factory<TData> myFactory;
    private BinaryReader myReader;
    private Byte[] myBuffer;
    public MemoryMappedUnfixedReader`1(Lifetime lifetime, IReadonlyDataSection section, Factory<TData> factory);
    public sealed virtual TData Get(DataOffset offset);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Dal.Timeline.NewMetadata.SectionBagBuilders : object {
    [ExtensionAttribute]
public static SectionsBag CreateSectionsBag(ISnapshotStorage storage, CommonSections commonSections);
    [ExtensionAttribute]
public static IMetadataManager CreateMetadataManager(ISnapshotStorage storage, Lifetime lifetime);
    [ExtensionAttribute]
public static SectionsBag CreateSectionsBag(ISnapshotStorage storage, Lifetime lifetime);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Dal.Timeline.NewMetadata.SectionReaders : object {
    private static ILogger ourLog;
    private static SectionReaders();
    [ExtensionAttribute]
public static IEnumeratedFixedStructureProvider`1<FrameAddress> FrameAddressReader(SectionsBag this, Lifetime lifetime);
    [ExtensionAttribute]
public static IEnumeratedFixedStructureProvider`1<ETWManagedFunction> ETWManagedFunctionReader(SectionsBag this, Lifetime lifetime);
    [ExtensionAttribute]
public static MemoryMappedUnfixedReader`1<ETWManagedFunctionData> ETWManagedFunctionDataReader(SectionsBag this, Lifetime lifetime);
    [ExtensionAttribute]
public static MemoryMappedUnfixedReader`1<ETWNativeModuleData> ETWNativeModuleDataReader(SectionsBag this, Lifetime lifetime);
    [ExtensionAttribute]
public static IEnumeratedFixedStructureProvider`1<ETWNativeModule> ETWNativeModuleReader(SectionsBag this, Lifetime lifetime);
    [ExtensionAttribute]
public static MemoryMappedUnfixedReader`1<ETWManagedModuleData> ETWManagedModuleDataReader(SectionsBag this, Lifetime lifetime);
    [ExtensionAttribute]
public static IEnumeratedFixedStructureProvider`1<ETWManagedModule> ETWManagedModuleReader(SectionsBag this, Lifetime lifetime);
    [ExtensionAttribute]
public static IEnumeratedFixedStructureProvider`1<ETWNativeFunction> ETWNativeFunctionReader(SectionsBag this, Lifetime lifetime);
    [ExtensionAttribute]
public static MemoryMappedUnfixedReader`1<ETWNativeFunctionData> ETWNativeFunctionDataReader(SectionsBag this, Lifetime lifetime);
    [ExtensionAttribute]
internal static ETWNativeFunctionInfoProvider ETWNativeFunctionInfoProvider(SectionsBag this, Lifetime lifetime);
    [ExtensionAttribute]
public static ETWManagedFunctionInfoProvider ETWManagedFunctionInfoProvider(SectionsBag this, Lifetime lifetime);
    [ExtensionAttribute]
public static IEnumeratedFixedStructureProvider`1<CoreModule> GetETWCoreModuleProvider(SectionsBag this, Lifetime lifetime);
    [ExtensionAttribute]
[NotNullAttribute]
public static BidirectionalMapOnDictionary`2<UInt32, UInt32> BuildNativeModuleToManagedMap(SectionsBag this);
    [ExtensionAttribute]
public static CommonSections GetCommonSections(ISnapshotStorage this, Lifetime lifetime);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IMetadataSection GetProfilerMetadataSection(ISnapshotStorage this, Lifetime lifetime);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IModulePathSection GetProfilerModulePathSection(ISnapshotStorage this, Lifetime lifetime);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IFuidToMetadataIdSection GetProfilerFuidToMetadataIdSection(ISnapshotStorage this, Lifetime lifetime);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IEnvironmentSection GetProfilerEnvironmentSection(ISnapshotStorage this, Lifetime lifetime);
    [CanBeNullAttribute]
private static TResult GetProfilerSection(ISnapshotStorage this, Lifetime lifetime, TimelineSectionTypes timelineSectionType, Func`2<SnapshotStorageSection, TResult> reader);
    [CanBeNullAttribute]
private static TResult GetProfilerSection(ISnapshotStorage this, TimelineSectionTypes timelineSectionType, Func`2<SnapshotStorageSection, TResult> reader);
}
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.TimelineMetadataManager : object {
    private Lifetime myLifetime;
    private IFunctionDataMapper`1<CallFrameInfo> myCallFrameInfoMapper;
    private IFunctionDataMapper`1<string> mySignaturesMapper;
    private IFunctionDataMapper`1<SourceViewNavigationInfo> mySourceViewMapper;
    private ETWManagedFunctionInfoProvider myETWManagedFunctionInfoProvider;
    private IEnumeratedModuleDataMapper`1<ModuleInfo> myModuleInfoProvider;
    private IFunctionDataMapper`1<Nullable`1<ModuleUID>> myFuidToMuid;
    [NotNullAttribute]
private BidirectionalMapOnDictionary`2<UInt32, UInt32> myNativeModuleToManagedMap;
    private SectionsBag mySectionsBag;
    [CanBeNullAttribute]
private CorePartMetadataManager myCorePartMetadataManager;
    public TimelineMetadataManager(Lifetime lifetime, SectionsBag sectionsBag, CorePartMetadataManager corePartMetadataManager, BidirectionalMapOnDictionary`2<UInt32, UInt32> nativeModuleToManagedMap);
    private IFunctionDataMapper`1<CallFrameInfo> BuildCallFrameInfoMapper(Lifetime lifetime);
    private IFunctionDataMapper`1<string> BuildPresentableSignaturesMapper(Lifetime lifetime);
    private IEnumeratedModuleDataMapper`1<ModuleInfo> BuildModuleInfoProvider(Lifetime lifetime);
    private NativeModuleDataProvider BuildNativeModuleDataProvider(Lifetime lifetime);
    private ManagedModuleDataProvider BuildManagedModuleDataProvider(Lifetime lifetime);
    private IFunctionDataMapper`1<Nullable`1<ModuleUID>> BuildModuleUIDByFunctionUID(Lifetime lifetime);
    public sealed virtual CallFrameInfo GetCallFrameInfo(FunctionUID fuid);
    public sealed virtual string GetPresentableSignature(FunctionUID fuid);
    public sealed virtual Nullable`1<ModuleInfo> GetModuleInfo(FunctionUID fuid);
    private ModuleInfo GetModuleInfo(ModuleUID muid);
    public sealed virtual Nullable`1<ModuleUID> GetModuleUID(FunctionUID fuid);
    private IFunctionDataMapper`1<SourceViewNavigationInfo> BuildSourceViewMapper(Lifetime lifetime);
    public sealed virtual SourceViewNavigationInfo GetSourceViewNavigationInfo(FunctionUID fuid);
    public sealed virtual bool TreatMethodAsSystem(FunctionUID fuid);
}
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.TimelineMetadataManagerBuilder : object {
    [NotNullAttribute]
private SectionsBag mySectionsBag;
    [NotNullAttribute]
private CorePartMetadataManagerBuilder myCorePartMetadataManagerBuilder;
    [NotNullAttribute]
private BidirectionalMapOnDictionary`2<UInt32, UInt32> myNativeModuleToManagedMap;
    public TimelineMetadataManagerBuilder(SectionsBag sectionsBag, CorePartMetadataManagerBuilder corePartMetadataManagerBuilder);
    public TimelineMetadataManager Build(Lifetime lifetime);
}
public class JetBrains.DotTrace.Dal.Timeline.NewMetadata.Writers.ModuleUIDBySectionIndexMap : object {
    private IDictionary`2<SectionIndex`1<IMetadataSection>, ModuleUID> myMap;
    internal ModuleUIDBySectionIndexMap(IEnumeratedFixedStructureProvider`1<CoreModule> coreModuleProvider);
    internal ModuleUID Get(SectionIndex`1<IMetadataSection> index);
}
public class JetBrains.DotTrace.Dal.Timeline.Processing.ProcessingError : object {
    [CompilerGeneratedAttribute]
private ProcessingErrorKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessingStats <Stats>k__BackingField;
    private ExceptionText myExceptionText;
    public ProcessingErrorKind Kind { get; }
    public ProcessingStats Stats { get; }
    public ExceptionText ExceptionText { get; }
    public ProcessingError(ProcessingErrorKind kind, Exception exception, ProcessingStats stats);
    [CompilerGeneratedAttribute]
public sealed virtual ProcessingErrorKind get_Kind();
    [CompilerGeneratedAttribute]
public sealed virtual ProcessingStats get_Stats();
    public sealed virtual ExceptionText get_ExceptionText();
}
public class JetBrains.DotTrace.Dal.Timeline.Processing.ProcessingLogger : object {
    [CompilerGeneratedAttribute]
private IThreading <threading>P;
    private IListEvents`1<Message> myMessages;
    public IListEvents`1<Message> Messages { get; }
    public ProcessingLogger(IThreading threading);
    public sealed virtual void Send(Message message);
    public IListEvents`1<Message> get_Messages();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.Dal.Timeline.SectionInfo : object {
    [CompilerGeneratedAttribute]
private FileSystemPath <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <Version>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public FileSystemPath Path { get; public set; }
    public ushort Type { get; public set; }
    public ushort Version { get; public set; }
    public SectionInfo(FileSystemPath Path, ushort Type, ushort Version);
    [CompilerGeneratedAttribute]
protected SectionInfo(SectionInfo original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public FileSystemPath get_Path();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Path(FileSystemPath value);
    [CompilerGeneratedAttribute]
public ushort get_Type();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Type(ushort value);
    [CompilerGeneratedAttribute]
public ushort get_Version();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Version(ushort value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SectionInfo left, SectionInfo right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SectionInfo left, SectionInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(SectionInfo other);
    [CompilerGeneratedAttribute]
public virtual SectionInfo <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(FileSystemPath& Path, UInt16& Type, UInt16& Version);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.Dal.Timeline.Sections.EnvironmentSectionAccessor : object {
    private IConvertedTimelineSnapshot mySnapshot;
    [NullableAttribute("2")]
private IFullEnvironmentSection myFullEnvironmentSection;
    public EnvironmentSectionAccessor(IConvertedTimelineSnapshot snapshot);
    public sealed virtual IFullEnvironmentSection Get(Lifetime lifetime);
    public static FullEnvironmentSection FullEnvironmentSection(Lifetime lifetime, SnapshotStorageSection environmentSection, SnapshotStorageSection postEnvironmentSection);
}
public static class JetBrains.DotTrace.Dal.Timeline.Sections.MmsStorageToRawMultifile : object {
    private static ILogger ourLog;
    private static MmsStorageToRawMultifile();
    public static void Convert(Lifetime lifetime, IMemoryMappedSnapshotManager manager, FileSystemPath snapshotPath, FileSystemPath outputIndexFile, IProgressIndicator progressIndicator);
    private static void CopyAsFixedSize(Lifetime lifetime, IReadonlyMemoryMappedSection sourceSection, bool writeCountFirst, Stream destinationStream, IProgressIndicator progress);
    private static void CopyAsStream(Lifetime lifetime, IReadonlyMemoryMappedSection sourceSection, Stream destinationStream, IProgressIndicator progress);
}
public class JetBrains.DotTrace.Dal.Timeline.Sections.ModulePathAccessor : SectionAccessorBase {
    public ModulePathAccessor(Lifetime lifetime, IConvertedTimelineSnapshot snapshot);
    public sealed virtual IModulePathSection Get(Lifetime lifetime);
}
public abstract class JetBrains.DotTrace.Dal.Timeline.Sections.SectionAccessorBase : object {
    [CanBeNullAttribute]
private IReadonlyDataSection mySection;
    public bool HasSection { get; }
    protected SectionAccessorBase(IConvertedTimelineSnapshot snapshot, Lifetime lifetime, ushort sectionType);
    protected SectionAccessorBase(IConvertedTimelineSnapshot snapshot, Lifetime lifetime, TimelineSectionTypes sectionType);
    public sealed virtual bool get_HasSection();
    protected IReadonlyDataSection GetRawSection();
}
internal class JetBrains.DotTrace.Dal.Timeline.Sections.SectionContainer : object {
    private IReadonlyDataSection myRaw;
    public IReadonlyDataSection Raw { get; }
    public SectionContainer(IReadonlyDataSection raw);
    public sealed virtual IReadonlyDataSection get_Raw();
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Dal.Timeline.ShellComponents.Local.ZoneMarker : object {
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.BothSides.ConvertedTimelineSnapshotComponent : object {
    private IConvertedTimelineSnapshot myStorage;
    public ISnapshotStorage Storage { get; }
    public FileSystemPath IndexFile { get; }
    public IEventTreesSection EventTreesSection { get; }
    public IStorageEnvironmentSection StorageEnvironmentSection { get; }
    public ConvertedTimelineSnapshotComponent(Lifetime lifetime, ITimelineSnapshotStorageReader reader, SnapshotOrigin snapshotOrigin);
    public sealed virtual ISnapshotStorage get_Storage();
    public sealed virtual FileSystemPath get_IndexFile();
    public sealed virtual IEventTreesSection get_EventTreesSection();
    public sealed virtual IStorageEnvironmentSection get_StorageEnvironmentSection();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.BothSides.EventLayerDescriptorBuilder : object {
    private List`1<EventLayerDescriptor> myDescriptors;
    private ILogStorage myLogStorage;
    public IEnumerable`1<EventLayerDescriptor> Data { get; }
    public EventLayerDescriptorBuilder(IDataContainer`1<ILogStorage> logStorageContainer);
    public sealed virtual IEnumerable`1<EventLayerDescriptor> get_Data();
    private void Add(KnownEventTypes eventType, Int32[] properties);
}
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.BothSides.EventStringRepresentationBuilder : FormattedTextBufferBuilder`1<EventNodeData> {
    private static string Read;
    private static string Write;
    private static string from;
    private static string to;
    public EventStringRepresentationBuilder(bool collapseWhitespaces);
    private static EventStringRepresentationBuilder();
    public string GetString(EventNodeData data);
    protected virtual void Build(EventNodeData data);
    private void AddDebugOutput(EventNodeData data);
    private void AddFileIO(EventNodeData data);
    private void AddDefault(EventNodeData data);
    private void AddSQL(EventNodeData data);
    private void AddJit(EventNodeData data);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.BothSides.MetadataManagerBuilderComponent : object {
    [CompilerGeneratedAttribute]
private IAccessor`1<IMetadataManager> <Data>k__BackingField;
    public IAccessor`1<IMetadataManager> Data { get; }
    public MetadataManagerBuilderComponent(IConvertedTimelineSnapshot storage, IDataContainer`1<CommonSections> commonSectionsContainer);
    [CompilerGeneratedAttribute]
public sealed virtual IAccessor`1<IMetadataManager> get_Data();
}
[DefaultMemberAttribute("Item")]
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.BothSides.MustBeRemoteOnly.EventStorage.EventDataStringReader : object {
    private StringReader myReader;
    [CanBeNullAttribute]
public string Item { get; }
    public EventDataStringReader(Lifetime lifetime, IConvertedTimelineSnapshot snapshot);
    public EventDataStringReader(BinaryReader binaryReader);
    public sealed virtual string get_Item(StringId value);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.BothSides.MustBeRemoteOnly.EventStorage.LogStorageContainer : object {
    [CompilerGeneratedAttribute]
private ILogStorage <Data>k__BackingField;
    public ILogStorage Data { get; }
    public LogStorageContainer(Lifetime lifetime, ISectionAccessor`1<IEventTreesSection> eventTrees);
    [CompilerGeneratedAttribute]
public sealed virtual ILogStorage get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.BothSides.MustBeRemoteOnly.Sections.CachedCommonSections : object {
    [CompilerGeneratedAttribute]
private CommonSections <Data>k__BackingField;
    public CommonSections Data { get; }
    public CachedCommonSections(Lifetime lifetime, ICachedSectionAccessor`1<IMetadataSection> cachedMetadata, ICachedSectionAccessor`1<IModulePathSection> cachedModulePaths, ICachedSectionAccessor`1<IEnvironmentSection> environmentSection, ICachedSectionAccessor`1<IFuidToMetadataIdSection> fuidToMetadataIdSection);
    [CompilerGeneratedAttribute]
public sealed virtual CommonSections get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.BothSides.MustBeRemoteOnly.Sections.EnvironmentSectionAccessor : object {
    [CompilerGeneratedAttribute]
private IEnvironmentSection <Data>k__BackingField;
    public IEnvironmentSection Data { get; }
    public EnvironmentSectionAccessor(IConvertedTimelineSnapshot snapshot, Lifetime lifetime);
    [CompilerGeneratedAttribute]
public sealed virtual IEnvironmentSection get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.BothSides.MustBeRemoteOnly.Sections.EventsDataAccessor : SectionAccessorBase {
    public EventsDataAccessor(Lifetime lifetime, IConvertedTimelineSnapshot snapshot);
    public sealed virtual IEventsDataSection Get(Lifetime lifetime);
}
[SnapshotComponentAttribute("10")]
internal class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.BothSides.MustBeRemoteOnly.Sections.EventTreesAccessor : object {
    private IEventTreesSection mySnapshotEventTreesSection;
    public bool HasSection { get; }
    public EventTreesAccessor(Lifetime lifetime, IConvertedTimelineSnapshot snapshot);
    public sealed virtual IEventTreesSection Get(Lifetime lifetime);
    public sealed virtual bool get_HasSection();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.BothSides.MustBeRemoteOnly.Sections.FuidToMetadataIdSectionAccessor : object {
    [CompilerGeneratedAttribute]
private IFuidToMetadataIdSection <Data>k__BackingField;
    public IFuidToMetadataIdSection Data { get; }
    public FuidToMetadataIdSectionAccessor(IConvertedTimelineSnapshot snapshot, Lifetime lifetime);
    [CompilerGeneratedAttribute]
public sealed virtual IFuidToMetadataIdSection get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.BothSides.MustBeRemoteOnly.Sections.MetadataSectionAccessor : object {
    [CompilerGeneratedAttribute]
private IMetadataSection <Data>k__BackingField;
    public IMetadataSection Data { get; }
    public MetadataSectionAccessor(IConvertedTimelineSnapshot snapshot, Lifetime lifetime);
    [CompilerGeneratedAttribute]
public sealed virtual IMetadataSection get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.BothSides.MustBeRemoteOnly.Sections.ModulePathSectionAccessor : object {
    [CompilerGeneratedAttribute]
private IModulePathSection <Data>k__BackingField;
    public IModulePathSection Data { get; }
    public ModulePathSectionAccessor(IConvertedTimelineSnapshot snapshot, Lifetime lifetime);
    [CompilerGeneratedAttribute]
public sealed virtual IModulePathSection get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.BothSides.MustBeRemoteOnly.Sections.ProcessDataAccessor : SectionAccessorBase {
    public ProcessDataAccessor(Lifetime lifetime, IConvertedTimelineSnapshot snapshot);
    public sealed virtual IProcessDataSection Get(Lifetime lifetime);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.BothSides.MustBeRemoteOnly.Sections.ProcessDescriptorsAccessor : SectionAccessorBase {
    public ProcessDescriptorsAccessor(Lifetime lifetime, IConvertedTimelineSnapshot snapshot);
    public sealed virtual IProcessDescriptorsSection Get(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private string <Get>b__1_0();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.BothSides.MustBeRemoteOnly.Sections.StorageEnvironmentAccessor : object {
    private IStorageEnvironmentSection mySnapshotStorageEnvironmentSection;
    public bool HasSection { get; }
    public StorageEnvironmentAccessor(Lifetime lifetime, IConvertedTimelineSnapshot snapshot);
    public sealed virtual IStorageEnvironmentSection Get(Lifetime lifetime);
    public sealed virtual bool get_HasSection();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.BothSides.NavigationInfoProviderBuilder : object {
    [NotNullAttribute]
private CorePartMetadataManagerBuilder myCorePartMetadataManagerBuilder;
    [NotNullAttribute]
private SectionsBag mySectionsBag;
    public NavigationInfoProviderBuilder(IConvertedTimelineSnapshot storage, IDataContainer`1<CommonSections> commonSectionsContainer, IDataContainer`1<IAccessor`1<IMetadataManager>> metadataManagerAccessor);
    private sealed virtual override INavigationInfoProvider JetBrains.Common.Util.IAccessor<JetBrains.DotTrace.DalInterface.Common.Metadata.INavigationInfoProvider>.Get(Lifetime lifetime);
}
[SnapshotComponentAttribute("0")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.BothSides.Sections.EnvironmentSectionAccessorComponent : EnvironmentSectionAccessor {
    public EnvironmentSectionAccessorComponent(IConvertedTimelineSnapshot snapshot);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.BothSides.Sections.MetadataAccessor : SectionAccessorBase {
    public MetadataAccessor(Lifetime lifetime, IConvertedTimelineSnapshot snapshot);
    public sealed virtual IMetadataSection Get(Lifetime lifetime);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.BothSides.Sections.ModulePathAccessorComponent : ModulePathAccessor {
    public ModulePathAccessorComponent(Lifetime lifetime, IConvertedTimelineSnapshot snapshot);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.BothSides.TimelineSnapshotIdContainer : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    public Guid Id { get; }
    public TimelineSnapshotIdContainer(ICachedSectionAccessor`1<IEnvironmentSection> snapshotEnvironment, ISectionAccessor`1<IStorageEnvironmentSection> storageEnvironment);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Id();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.BothSides.TimelineTickTimeConverterComponent : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ITickTimeConverterContainer> <Data>k__BackingField;
    public IDataProvider`1<ITickTimeConverterContainer> Data { get; }
    public TimelineTickTimeConverterComponent(IDataContainer`1<ILogStorage> logStorage);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ITickTimeConverterContainer> get_Data();
}
[ObsoleteAttribute("Don't use this class. If you want remotable version, just request IRemotableReference<ILogStorage>, if you want local one - request ILogStorage")]
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.Local.LogStorageRemotablePair : object {
    private IRemotablePair`1<ILogStorage> myData;
    public IRemotablePair`1<ILogStorage> Data { get; }
    public LogStorageRemotablePair(IDataContainer`1<ILogStorage> locaLogStorage, IRemotableReference`1<IDataContainer`1<ILogStorage>> remoteLogStorage);
    public sealed virtual IRemotablePair`1<ILogStorage> get_Data();
}
[LocalizableAttribute("False")]
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.Local.Statistics.OpenSnapshotStatistics : object {
    private static ILogger ourLog;
    public OpenSnapshotStatistics(Lifetime lifetime, IComponentContainer container, SnapshotOrigin snapshotOrigin, IConvertedTimelineSnapshot snapshot, FusSnapshotStatistics fusSnapshotStatistics);
    private static OpenSnapshotStatistics();
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.Local.Statistics.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.Local.ZoneMarker : object {
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.Remote.AllFuidsComponent : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<IReadOnlyCollection`1<FunctionUID>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<IReadOnlyCollection`1<FunctionUID>>> Data { get; }
    public AllFuidsComponent(ICacheProviderContainer`1<ITimelineDfsExtras> timelineDfsExtrasProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<IReadOnlyCollection`1<FunctionUID>>> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.Remote.Async.TimelineOffsetToAsyncFuidCacheBuilder : OffsetToAsyncFuidCacheBuilder`1<DfsNodePtr> {
    public TimelineOffsetToAsyncFuidCacheBuilder(IDataContainer`1<DataPipeLifetime> dataPipeLifetimeContainer, ICacheProviderContainer`1<IDfsReaders`1<DfsNodePtr>> dfsReadersCacheSource, IAllRootsProvider`1<DfsNodePtr> rawRootsCacheSource, ICacheProviderContainer`1<IAsyncMethodService> asyncMethodServiceContainer, ICacheProviderContainer`1<IAsyncMethodCallTreeService`1<DfsNodePtr>> asyncMethodCallTreeServiceContainer, ICacheProviderContainer`1<IOffsetToIndexConverter`1<DfsNodePtr>> offsetToIndexConverter, IProviderContainer`1<ICacheStorageManager> cacheStorageManager, IMemoryMappedStorageManager cacheStorage);
}
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.Remote.CallFunctionInfoProvider : object {
    private static IList`1<FunctionType> ourFunctionTypes;
    private static IList`1<FunctionType> ourFunctionTypesWithModules;
    private IMetadataReader myMetadataReader;
    private Func`2<DfsNodePtr, bool> myPtrIsSystem;
    private DfsBackTrace myCallTree;
    public CallFunctionInfoProvider(IMetadataReader metadataReader, DfsBackTrace callTree, Func`2<DfsNodePtr, bool> ptrIsSystem);
    private static CallFunctionInfoProvider();
    public FunctionInfo GetFunctionInfo(DfsNodePtr callStack);
    public IList`1<FunctionInfo> GetCallStackWithModules(DfsNodePtr callStack);
    private IList`1<FunctionInfo> GetCallStack(DfsNodePtr callStack, ICollection`1<FunctionType> functionTypes);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.Remote.CallStackPointProvider : object {
    private ILogStorage myLogStorage;
    private Func`2<EventInfo, ulong> myCallStackExtractor;
    public CallStackPointProvider(IDataContainer`1<ILogStorage> logStorageContainer);
    public DfsNodePtr GetCallStack(ThreadId thread, ulong tick);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.Remote.DfsAlgorithmsProviderContainer : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<IDfsAlgorithms`2<DfsNodePtr, FunctionUID>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<IDfsAlgorithms`2<DfsNodePtr, FunctionUID>>> Data { get; }
    public DfsAlgorithmsProviderContainer(TimelineCommonDfsLogicProvider commonLogicProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<IDfsAlgorithms`2<DfsNodePtr, FunctionUID>>> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.Remote.DfsTreeIndex : object {
    private IDataProvider`1<ICacheSource`1<TimelineDfsReaders>> myTimelineDfsReaders;
    private IDataProvider`1<ICacheSource`1<IDfsReaders`1<DfsNodePtr>>> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.Common.Util.ICacheSource<JetBrains.DotTrace.Common.DalInterface.SnapshotDataApi.Readers.IDfsReaders<JetBrains.DotTrace.DalInterface.Timeline.CallTree.DfsNodePtr>>>>.Data { get; }
    public IDataProvider`1<ICacheSource`1<ITimelineDfsExtras>> Data { get; }
    private IDataProvider`1<ICacheSource`1<IDfsRawRoots`1<DfsNodePtr>>> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.Common.Util.ICacheSource<JetBrains.DotTrace.Common.DalInterface.CallTree.Dfs.IDfsRawRoots<JetBrains.DotTrace.DalInterface.Timeline.CallTree.DfsNodePtr>>>>.Data { get; }
    public DfsTreeIndex(Lifetime lifetime, TimelineDfsReadersContainer readersContainer);
    private sealed virtual override IDataProvider`1<ICacheSource`1<IDfsReaders`1<DfsNodePtr>>> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.Common.Util.ICacheSource<JetBrains.DotTrace.Common.DalInterface.SnapshotDataApi.Readers.IDfsReaders<JetBrains.DotTrace.DalInterface.Timeline.CallTree.DfsNodePtr>>>>.get_Data();
    public sealed virtual IDataProvider`1<ICacheSource`1<ITimelineDfsExtras>> get_Data();
    private sealed virtual override IDataProvider`1<ICacheSource`1<IDfsRawRoots`1<DfsNodePtr>>> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.Common.Util.ICacheSource<JetBrains.DotTrace.Common.DalInterface.CallTree.Dfs.IDfsRawRoots<JetBrains.DotTrace.DalInterface.Timeline.CallTree.DfsNodePtr>>>>.get_Data();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.Remote.SectionReaders : object {
    [ExtensionAttribute]
public static T[] ReadArray(SnapshotStorageSection nodes, Byte[] buffer, int bufferSize);
    [ExtensionAttribute]
public static ChunkList`1<T> ReadChunkList(SnapshotStorageSection nodes, Byte[] buffer, int bufferSize);
    [ExtensionAttribute]
public static ChunkList`1<T> ReadChunkList(Stream nodes, long length, Byte[] buffer, int bufferSize);
    [ExtensionAttribute]
public static long ReadArray(Stream stream, Byte[] buffer, int bufferSize, T[] dest, int destSizeInBytes);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.Remote.Sections.IlToNativeMapAccessor : SectionAccessorBase {
    private IlToNativeMapSection mySection;
    public IlToNativeMapAccessor(Lifetime lifetime, IConvertedTimelineSnapshot snapshot);
    public sealed virtual IIlToNativeMapSection Get(Lifetime lifetime);
}
[SnapshotComponentAttribute("16")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.Remote.SnapshotMasksComponent : object {
    public int GroupMask { get; }
    public ulong IdentityMask { get; }
    public bool IsNegative { get; }
    public sealed virtual int get_GroupMask();
    public sealed virtual ulong get_IdentityMask();
    public sealed virtual bool get_IsNegative();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.Remote.Subsystems.TimelineSubsystemOffsetToSubsystem : SubsystemOffsetToSubsystem`1<DfsNodePtr> {
    public TimelineSubsystemOffsetToSubsystem(IThreading threading, ICacheProviderContainer`1<SubsystemResolveData`1<FunctionUID>> subsystemResolveProvider, IAllRootsProvider`1<DfsNodePtr> rawRootsProviderContainer, IDfsAlgorithmsProviderContainer`1<DfsNodePtr> dfsAlgorithmsProviderContainer, IDataContainer`1<DataPipeLifetime> dataPipeLifetimeContainer, ICacheProviderContainer`1<IOffsetToIndexConverter`1<DfsNodePtr>> offsetToIndexProviderContainer, IMemoryMappedStorageManager cacheStorage, IProviderContainer`1<ICacheStorageManager> cacheStorageManager);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.Remote.SystemMethods.TimelineFlatPayloadsBuilder : FlatPayloadsBuilder`4<DfsNodePtr, FunctionUID, LongPayload, PayloadPredicatesInstance> {
    public TimelineFlatPayloadsBuilder(IDfsAlgorithmsProviderContainer`1<DfsNodePtr> commonLogicProvider, ICacheProviderContainer`1<SubsystemsCache`1<DfsNodePtr>> subsystemCacheProviderContainer, IFunctionSystemnessDal functionSystemness, TimelineOffsetToAsyncFuidCacheBuilder timelineOffsetToAsyncFuidCacheBuilder, FuidToClassIdProvider fuidToClassIdProvider);
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.Remote.SystemMethods.ZoneMarker : object {
}
[SnapshotComponentAttribute("16")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.Remote.TestRemotableComponent : object {
    public IDataProvider`1<string> ConstDataProvider;
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.Remote.TimelineCommonDfsLogicProvider : object {
    private static int NodesBufferSize;
    private static int OffsetsBufferSize;
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<CommonDfsLogic`2<DfsNodePtr, FunctionUID>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<CommonDfsLogic`2<DfsNodePtr, FunctionUID>>> Data { get; }
    public TimelineCommonDfsLogicProvider(ICacheProviderContainer`1<IDfsReaders`1<DfsNodePtr>> dfsReaders);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<CommonDfsLogic`2<DfsNodePtr, FunctionUID>>> get_Data();
}
[SnapshotComponentAttribute("0")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.Remote.TimelineDfsReadersContainer : object {
    [CompilerGeneratedAttribute]
private TimelineDfsReaders <DfsReaders>k__BackingField;
    private static ILogger ourLog;
    public TimelineDfsReaders DfsReaders { get; }
    public IDfsReaders`1<DfsNodePtr> Data { get; }
    public TimelineDfsReadersContainer(Lifetime lifetime, IConvertedTimelineSnapshot snapshot);
    private static TimelineDfsReadersContainer();
    [CompilerGeneratedAttribute]
public TimelineDfsReaders get_DfsReaders();
    public sealed virtual IDfsReaders`1<DfsNodePtr> get_Data();
}
[SnapshotComponentAttribute("16")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.Remote.TimelineOffsetToIndexConverterContainer : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<IOffsetToIndexConverter`1<DfsNodePtr>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<IOffsetToIndexConverter`1<DfsNodePtr>>> Data { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<IOffsetToIndexConverter`1<DfsNodePtr>>> get_Data();
}
[SnapshotComponentAttribute("16")]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.Remote.TimelineSyntheticMethods : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<FunctionUID> <Data>k__BackingField;
    public IEnumerable`1<FunctionUID> Data { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<FunctionUID> get_Data();
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.Remote.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Dal.Timeline.SnapshotComponents.ZoneMarker : object {
}
public static class JetBrains.DotTrace.Dal.Timeline.TimelineInputFileTypes : object {
    public static TimelineInputFileType GetInputFileType(FileSystemPath snapshotPath);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Dal.Timeline.TimelineStorageHelpers : object {
    private static ILogger ourLog;
    private static TimelineStorageHelpers();
    public static IWriteableSnapshotStorage ReadConvertedSnapshot(FileSystemPath snapshotPath);
    public static FileSystemPath ConvertedDirPath(FileSystemPath snapshotPath);
    public static FileSystemPath GetExistingConvertingDirOrEmpty(FileSystemPath snapshotPath);
    private static FileSystemPath GetExistingDirOrEmpty(FileSystemPath snapshotPath, Func`2<FileSystemPath, string> dirName);
    public static string ConvertedDirPrefix(FileSystemPath snapshotPath);
    public static string ConvertedDirName(FileSystemPath snapshotPath);
    public static FileSystemPath AddSection(FileSystemPath convertedDir, ImmutableList`1& newSectionFiles, string prefix, ushort type, ushort version);
    public static ValueTuple`2<FileSystemPath, SectionInfo> AddSection(FileSystemPath convertedDir, string prefix, ushort type, ushort version);
    private static string GetSectionFileNameWithExt(string prefix, ushort type, ushort version);
}
public class JetBrains.DotTrace.Dal.Timeline.Tools.ConvertedTimelineSnapshot : object {
    private ISnapshotStorage myStorage;
    [CompilerGeneratedAttribute]
private ISnapshotStorage <Storage>k__BackingField;
    [CompilerGeneratedAttribute]
private IEventTreesSection <EventTreesSection>k__BackingField;
    [CompilerGeneratedAttribute]
private IStorageEnvironmentSection <StorageEnvironmentSection>k__BackingField;
    private static ILogger ourLog;
    public ISnapshotStorage Storage { get; }
    public FileSystemPath IndexFile { get; }
    public IEventTreesSection EventTreesSection { get; }
    public IStorageEnvironmentSection StorageEnvironmentSection { get; }
    public ConvertedTimelineSnapshot(ISnapshotStorage storage);
    private static ConvertedTimelineSnapshot();
    [CompilerGeneratedAttribute]
public sealed virtual ISnapshotStorage get_Storage();
    public sealed virtual FileSystemPath get_IndexFile();
    [CompilerGeneratedAttribute]
public sealed virtual IEventTreesSection get_EventTreesSection();
    [CompilerGeneratedAttribute]
public sealed virtual IStorageEnvironmentSection get_StorageEnvironmentSection();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.Dal.Timeline.Tools.Internal.CallTreePrinter : object {
    private StreamWriter myOutput;
    private ICompactTreeReader myCallTreeReader;
    private Nullable`1<long> myCallTreeSizeBytes;
    private Func`2<FunctionUID, Nullable`1<ModuleInfo>> myGetModule;
    private IMetadataManager myMetadataManager;
    private IDictionary`2<FunctionUID, Cache> myMethodsCache;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`3<StringBuilder, VerbosityLevel, UInt32> myAdditionalPtrPrinter;
    public CallTreePrinter(ICompactTreeReader callTreeReader, IMetadataManager metadataManager, Nullable`1<long> callTreeSizeBytes, Action`3<StringBuilder, VerbosityLevel, UInt32> additionalPtrPrinter);
    private int TraverseTree(UInt32 node, int depth, Int32& maxDepth, Int32& maxWidth, Action`2<UInt32, int> processNode);
    private void PrintNode(UInt32 node, int depth, VerbosityLevel verbosityLevel);
    [LocalizableAttribute("False")]
public StringBuilder PrintMethodByPtr(StringBuilder sb, UInt32 node, int depth, VerbosityLevel verbosityLevel);
    [LocalizableAttribute("False")]
public StringBuilder PrintMethodByFuid(StringBuilder sb, FunctionUID fuid, int depth, VerbosityLevel verbosityLevel, Action`1<StringBuilder> beforeLine);
    [LocalizableAttribute("False")]
public void PrintCallTree(string stringOutputPath, VerbosityLevel level);
    public void PrintCallStackToFile(string stringOutputPath, UInt32 callStackPtr, VerbosityLevel level);
    private void PrintCallStack(TextWriter streamWriter, UInt32 callStackPtr, int spacesBefore, VerbosityLevel level);
    public StringBuilder PrintCallStack(StringBuilder sb, UInt32 callStackPtr, int spacesBefore, VerbosityLevel level);
    public string PrintCallStack(UInt32 callStackPtr, int spacesBefore, VerbosityLevel level);
    [CompilerGeneratedAttribute]
private Nullable`1<ModuleInfo> <.ctor>b__8_1(FunctionUID moduleUID);
}
public static class JetBrains.DotTrace.Dal.Timeline.Tools.Internal.CallTreePrinterBuilder : object {
    [LocalizableAttribute("False")]
public static CallTreePrinter RawCallTree(Lifetime lifetime, ISnapshotStorage storage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[LocalizableAttribute("False")]
public static class JetBrains.DotTrace.Dal.Timeline.Tools.Internal.DumpUtil : object {
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Dal.Timeline.Tools.Internal.DumpUtil/<DumpAll>d__0")]
public static Task`1<int> DumpAll(Lifetime lifetime, TimePresenter timePresenter, ISnapshotStorage snapshotStorage, IProgressIndicator controller, TextWriter writer, TimelineSectionTypes[] sections, Func`2<ulong, bool> acceptTick, Func`2<ThreadId, bool> acceptThreadId, Action`2<CallStackPtr, StringBuilder> forEachCallStack);
    private static void NetRundownPresentation(EventsBuffer buffer, int index, StringBuilder output);
    private static void PrintIlToNativeMap(ushort count, UInt32[] ilOffsets, UInt32[] nativeOffsets, StringBuilder output);
    private static void NetRuntimePresentation(EventsBuffer buffer, int index, StringBuilder output);
    private static void DiagnosticSourcePresentation(EventsBuffer buffer, int index, StringBuilder output);
}
public class JetBrains.DotTrace.Dal.Timeline.Tools.Internal.EventLogDumper : object {
    private Lifetime myLifetime;
    private ISnapshotStorage myStorage;
    private CallTreePrinter myCallTreePrinter;
    private TimePresenter myTimePresenter;
    private IShellLocks myShellLocks;
    public EventLogDumper(Lifetime lifetime, IShellLocks shellLocks, ISnapshotStorage storage, TimePresenter timePresenter);
    [LocalizableAttribute("False")]
public int Dump(TextWriter output, Nullable`1<ulong> fromTick, Nullable`1<ulong> toTick, bool expandCallStacks, IExecutionController progress, UInt16[] sectionIds, Func`2<ThreadId, bool> acceptThreadId);
}
public enum JetBrains.DotTrace.Dal.Timeline.Tools.Internal.VerbosityLevel : Enum {
    public int value__;
    public static VerbosityLevel Normal;
    public static VerbosityLevel Debug;
    public static VerbosityLevel Verbose;
}
public class JetBrains.DotTrace.Dal.Timeline.Tools.StreamUtils : object {
    public static void Copy(Lifetime lifetime, Stream srcStream, Stream dstStream, long totalSize, IProgressIndicator progress);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Dal.Timeline.Tools.TimelineMemoryMappedStorageEx : object {
    [ExtensionAttribute]
public static IReadonlyMemoryMappedSection GetSectionReadonly(IReadonlyMemoryMappedStorage storage, Lifetime lifetime, TimelineSectionTypes sectionType);
    [ExtensionAttribute]
public static SnapshotStorageSection ToSnapshotStorageSection(IReadonlyMemoryMappedSection section, Lifetime lifetime, bool linearAccessPattern);
    [ExtensionAttribute]
public static SnapshotStorageSection ToSnapshotStorageSection(IReadonlyDataSection section, Lifetime lifetime, bool linearAccessPattern);
    [ExtensionAttribute]
private static BinaryReader GetDisposableReader(IReadonlyMemoryMappedSection section, bool linearAccessPattern);
    public static Guid GetStorageGuid(Func`2<Lifetime, IEnumerable`1<T>> sections, Func`2<T, TimelineSectionTypes> type, Func`2<T, IReadonlyDataSection> readOnlyDataSection, ILogger logger);
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Dal.ZoneMarker : object {
}
public class JetBrains.DotTrace.DataStructures.Snapshot.StateFileUtils : object {
    public static String[] ExtensionsWithDot;
    public static string StateExtensionWithDot;
    private static StateFileUtils();
    public static FileSystemPath GetStateFilePath(FileSystemPath snapshotPath);
}
public static class JetBrains.dotTrace.Snapshot.Performance.OpenSnapshotWithRealtimeData : object {
    private static ushort SectionVersion;
    public static IWriteableSnapshotStorage OpenSnapshot(FileSystemPath indexFile);
}
public class JetBrains.dotTrace.Snapshot.Performance.RealtimeDataSection : object {
    public static ushort SectionType;
    [CompilerGeneratedAttribute]
private SnapshotStorageSection <Section>k__BackingField;
    private IRealtimeChartModel myRealtimeModel;
    public SnapshotStorageSection Section { get; public set; }
    public IRealtimeChartModel RealtimeModel { get; }
    [CompilerGeneratedAttribute]
public SnapshotStorageSection get_Section();
    [CompilerGeneratedAttribute]
public void set_Section(SnapshotStorageSection value);
    public IRealtimeChartModel get_RealtimeModel();
}
public static class JetBrains.Profiler.Constants.DotTraceSnapshotConstants : object {
    [ObsoleteAttribute("Is not used anymore. It is used to cleanup files from older versions.")]
public static string SessionFileName;
    [ObsoleteAttribute("Is not used anymore. It is used to cleanup files from older versions.")]
public static string RealtimeChartFileName;
    [ObsoleteAttribute("Is not used anymore. It is used to cleanup files from older versions.")]
public static string RealtimeSnapshotsFileName;
    [ObsoleteAttribute("Is not used anymore. It is used to cleanup files from older versions.")]
public static string MessagesFileName;
    [ObsoleteAttribute("Is not used anymore. It is used to cleanup files from older versions.")]
public static string SnapshotTempStorageSnapshotSuffix;
}
[ExtensionAttribute]
[LocalizableAttribute("False")]
public static class JetBrains.Timeline.EventLog.Converter.Dump.DumpEx : object {
    [ExtensionAttribute]
public static StringBuilder Common(StringBuilder prefix, TimePresenter timePresenter, ulong tick, string eventName, UInt32 threadId);
    [ExtensionAttribute]
public static StringBuilder TimeAndEvent(StringBuilder prefix, TimePresenter timePresenter, ulong tick, string eventName);
    [ExtensionAttribute]
public static StringBuilder ProcessID(StringBuilder prefix, UInt32 processId);
    [ExtensionAttribute]
public static StringBuilder ThreadID(StringBuilder prefix, UInt32 threadId);
    [ExtensionAttribute]
public static StringBuilder CallTreePtr(StringBuilder prefix, UInt32 key);
    [ExtensionAttribute]
public static StringBuilder TargetTimestamp(StringBuilder prefix, ulong tick);
    [ExtensionAttribute]
public static StringBuilder Timestamp(StringBuilder prefix, ulong tick);
}
[LocalizableAttribute("False")]
public static class JetBrains.Timeline.EventLog.Converter.Dump.ProtobufEventDumper : object {
    [AsyncIteratorStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Dump.ProtobufEventDumper/<Events>d__0")]
public static IAsyncEnumerable`1<ValueTuple`2<EventString[], int>> Events(ISnapshotStorage snapshotStorage, TimelineSectionTypes sectionType, Lifetime lifetime, TimePresenter timePresenter, Func`2<ulong, bool> acceptTick, Func`2<ThreadId, bool> acceptThreadId, Action`2<CallStackPtr, StringBuilder> forEachCallStack, IProgressIndicator controller);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class JetBrains.Timeline.EventLog.Converter.EventDetailsList : object {
    private static MessageParser`1<EventDetailsList> _parser;
    private UnknownFieldSet _unknownFields;
    public static int EventsFieldNumber;
    private static FieldCodec`1<Event> _repeated_events_codec;
    private RepeatedField`1<Event> events_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<EventDetailsList> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<Event> Events { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public EventDetailsList(EventDetailsList other);
    private static EventDetailsList();
    public static MessageParser`1<EventDetailsList> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual EventDetailsList Clone();
    public RepeatedField`1<Event> get_Events();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(EventDetailsList other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(EventDetailsList other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
public class JetBrains.Timeline.EventLog.Converter.Events.EventData`1 : ValueType {
    public ulong Tick;
    public UInt32 ThreadId;
    public StackFlag StackFlag;
    public TUserData Data;
    public EventData`1(ulong tick, UInt32 threadId, StackFlag stackFlag, TUserData data);
}
public static class JetBrains.Timeline.EventLog.Converter.Events.EventHelper : object {
    public static int SystemDataSize;
    private static EventHelper();
    public static EventData`1<TUserData> MakeEventData(SystemData sysData, TUserData userData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.EventString : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Tick>k__BackingField;
    [CompilerGeneratedAttribute]
private string <String>k__BackingField;
    public ulong Tick { get; public set; }
    public string String { get; public set; }
    public EventString(ulong Tick, string String);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_Tick();
    [CompilerGeneratedAttribute]
public void set_Tick(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_String();
    [CompilerGeneratedAttribute]
public void set_String(string value);
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(EventString left, EventString right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(EventString left, EventString right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(EventString other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(UInt64& Tick, String& String);
}
public static class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.EventsSorterEx : object {
    public static void SortAndGetIndices(T[] array, int count, ValueAndIndex`1[] arrayWithIndices);
    public static T[] CopyByIndex(ValueAndIndex`1[] ticksWithIndices, int count, T[] array);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[LocalizableAttribute("False")]
public static class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.HeapTraceProvider.V16.Dump : object {
    [AsyncIteratorStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.HeapTraceProvider.V16.Dump/<Events>d__0")]
public static IAsyncEnumerable`1<ValueTuple`2<EventString[], int>> Events(ISnapshotStorage snapshotStorage, TimelineSectionTypes sectionType, Lifetime lifetime, TimePresenter timePresenter, Func`2<ulong, bool> acceptTick, Func`2<ThreadId, bool> acceptThreadId, Action`2<CallStackPtr, StringBuilder> forEachCallStack, IProgressIndicator controller, Action`3<EventsBuffer, int, StringBuilder> alterPresentation);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static StringBuilder DumpEvent(StringBuilder output, EventsBuffer buffer, int i, TimePresenter timePresenter, Action`2<CallStackPtr, StringBuilder> forEachCallStack);
}
public enum JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.HeapTraceProvider.V16.EventId : Enum {
    public byte value__;
    public static EventId StackWalk;
    public static EventId HeapFreeId2V2;
    public static EventId HeapAllocId1V2;
    public static EventId HeapReAllocId3V2;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.HeapTraceProvider.V16.EventsBuffer : object {
    [CompilerGeneratedAttribute]
private UInt64[] <Tick>k__BackingField;
    public ThreadId[] ThreadId;
    public EventId[] EventId;
    public StackFlag[] StackFlag;
    public StackWalk[] StackWalk;
    public HeapFreeId2V2[] HeapFreeId2V2;
    public HeapAllocId1V2[] HeapAllocId1V2;
    public HeapReAllocId3V2[] HeapReAllocId3V2;
    [CompilerGeneratedAttribute]
private int <Capacity>k__BackingField;
    public UInt64[] Tick { get; private set; }
    public int Capacity { get; }
    public EventsBuffer(int count);
    [CompilerGeneratedAttribute]
public sealed virtual UInt64[] get_Tick();
    [CompilerGeneratedAttribute]
private void set_Tick(UInt64[] value);
    public void SetStackWalk(int index, SystemData& systemData, StackWalk& data);
    public void SetHeapFreeId2V2(int index, SystemData& systemData, HeapFreeId2V2& data);
    public void SetHeapAllocId1V2(int index, SystemData& systemData, HeapAllocId1V2& data);
    public void SetHeapReAllocId3V2(int index, SystemData& systemData, HeapReAllocId3V2& data);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Capacity();
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.HeapTraceProvider.V16.EventsBuffer/<Sort>d__19")]
public sealed virtual Task Sort(int count);
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.HeapTraceProvider.V16.EventsBuffer/<Copy>d__20")]
public sealed virtual Task Copy(int sourceIndex, IBuffer other, int destinationIndex, int count);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.HeapTraceProvider.V16.HeapAllocId1V2 : ValueType {
    public ulong AllocSize;
    public ulong AllocAddress;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.HeapTraceProvider.V16.HeapAllocId1V2PTR32 : ValueType {
    public UInt32 AllocSize;
    public UInt32 AllocAddress;
    public static HeapAllocId1V2 ToPTR64(HeapAllocId1V2PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.HeapTraceProvider.V16.HeapFreeId2V2 : ValueType {
    public ulong FreeAddress;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.HeapTraceProvider.V16.HeapFreeId2V2PTR32 : ValueType {
    public UInt32 FreeAddress;
    public static HeapFreeId2V2 ToPTR64(HeapFreeId2V2PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.HeapTraceProvider.V16.HeapReAllocId3V2 : ValueType {
    public ulong NewAllocAddress;
    public ulong OldAllocAddress;
    public ulong NewAllocSize;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.HeapTraceProvider.V16.HeapReAllocId3V2PTR32 : ValueType {
    public UInt32 NewAllocAddress;
    public UInt32 OldAllocAddress;
    public UInt32 NewAllocSize;
    public static HeapReAllocId3V2 ToPTR64(HeapReAllocId3V2PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.HeapTraceProvider.V16.ParseIntoBuffer : object {
    private States myState;
    [NullableAttribute("2")]
private Byte[] myPartialBuffer;
    private int myPartialCount;
    private long myMaxEvents;
    private SystemData mySystemData;
    public ParseIntoBuffer(long maxEvents);
    [NullableContextAttribute("1")]
public sealed virtual bool ProcessPage(Byte[] bytes, int count, EventsBuffer output, int outStartIndex, Int32& outCount, Boolean& outSortedByTick);
    [NullableContextAttribute("1")]
public sealed virtual EventsBuffer CreateBuffer(int capacity);
    private void ThrowReadError(int position, int count);
}
[NullableContextAttribute("1")]
public interface JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.IBuffer {
    public int Capacity { get; }
    public UInt64[] Tick { get; }
    public abstract virtual int get_Capacity();
    public abstract virtual UInt64[] get_Tick();
    public abstract virtual Task Sort(int count);
    public abstract virtual Task Copy(int sourceIndex, IBuffer other, int destinationIndex, int count);
}
[NullableContextAttribute("1")]
public interface JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.IParseIntoBuffer`1 {
    public abstract virtual bool ProcessPage(Byte[] bytes, int count, TBuffer output, int outStartIndex, Int32& outCount, Boolean& outSortedByTick);
    public abstract virtual TBuffer CreateBuffer(int capacity);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.JetBrains_Common_DebugOutput.V16.DebugOutputOpcodeId1 : ValueType {
    public UInt32 ProcessId;
    [NullableAttribute("1")]
public string DebugString;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[LocalizableAttribute("False")]
public static class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.JetBrains_Common_DebugOutput.V16.Dump : object {
    [AsyncIteratorStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.JetBrains_Common_DebugOutput.V16.Dump/<Events>d__0")]
public static IAsyncEnumerable`1<ValueTuple`2<EventString[], int>> Events(ISnapshotStorage snapshotStorage, TimelineSectionTypes sectionType, Lifetime lifetime, TimePresenter timePresenter, Func`2<ulong, bool> acceptTick, Func`2<ThreadId, bool> acceptThreadId, Action`2<CallStackPtr, StringBuilder> forEachCallStack, IProgressIndicator controller, Action`3<EventsBuffer, int, StringBuilder> alterPresentation);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static StringBuilder DumpEvent(StringBuilder output, EventsBuffer buffer, int i, TimePresenter timePresenter, Action`2<CallStackPtr, StringBuilder> forEachCallStack);
}
public enum JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.JetBrains_Common_DebugOutput.V16.EventId : Enum {
    public byte value__;
    public static EventId StackWalk;
    public static EventId DebugOutputOpcodeId1;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.JetBrains_Common_DebugOutput.V16.EventsBuffer : object {
    [CompilerGeneratedAttribute]
private UInt64[] <Tick>k__BackingField;
    public ThreadId[] ThreadId;
    public EventId[] EventId;
    public StackFlag[] StackFlag;
    public StackWalk[] StackWalk;
    public DebugOutputOpcodeId1[] DebugOutputOpcodeId1;
    [CompilerGeneratedAttribute]
private int <Capacity>k__BackingField;
    public UInt64[] Tick { get; private set; }
    public int Capacity { get; }
    public EventsBuffer(int count);
    [CompilerGeneratedAttribute]
public sealed virtual UInt64[] get_Tick();
    [CompilerGeneratedAttribute]
private void set_Tick(UInt64[] value);
    public void SetStackWalk(int index, SystemData& systemData, StackWalk& data);
    public void SetDebugOutputOpcodeId1(int index, SystemData& systemData, DebugOutputOpcodeId1& data);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Capacity();
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.JetBrains_Common_DebugOutput.V16.EventsBuffer/<Sort>d__15")]
public sealed virtual Task Sort(int count);
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.JetBrains_Common_DebugOutput.V16.EventsBuffer/<Copy>d__16")]
public sealed virtual Task Copy(int sourceIndex, IBuffer other, int destinationIndex, int count);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.JetBrains_Common_DebugOutput.V16.ParseIntoBuffer : object {
    private States myState;
    [NullableAttribute("2")]
private Byte[] myPartialBuffer;
    private int myPartialCount;
    private long myMaxEvents;
    private SystemData mySystemData;
    private int mySize;
    public ParseIntoBuffer(long maxEvents);
    [NullableContextAttribute("1")]
public sealed virtual bool ProcessPage(Byte[] bytes, int count, EventsBuffer output, int outStartIndex, Int32& outCount, Boolean& outSortedByTick);
    [NullableContextAttribute("1")]
public sealed virtual EventsBuffer CreateBuffer(int capacity);
    private void ThrowReadError(int position, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.ManifestEx : object {
    [ExtensionAttribute]
public static ManifestSection GetManifestSection(ISnapshotStorage storage, TimelineSectionTypes type);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<ValueTuple`2<TBuffer, int>> ParseManifestEvents(ManifestSection manifestSection, IParseIntoBuffer`1<TBuffer> parser, IProgressIndicator controller, string className, CancellationToken token, PerfStatCookie perf, int pageSizeOverride, bool assertSortOrder);
    [AsyncIteratorStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.ManifestEx/<ParseManifestEvents>d__2`1")]
public static IAsyncEnumerable`1<ValueTuple`2<TBuffer, int>> ParseManifestEvents(Func`1<BinaryReader> getReader, UInt64[] sequencePoints, IParseIntoBuffer`1<TBuffer> parser, IProgressIndicator controller, string className, CancellationToken token, PerfStatCookie perf, int pageSizeOverride, bool assertSortOrder);
    private static int NumberOfTicksLessThan(TBuffer buffer, ulong tick);
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.ManifestEx/<EnsureCapacity>d__4`1")]
private static Task`1<TBuffer> EnsureCapacity(IParseIntoBuffer`1<TBuffer> parser, TBuffer buffer, int bufferCount, int desiredCapacity, Stopwatch copySw);
    [NullableContextAttribute("2")]
[ContractAnnotationAttribute("null => null;notnull=>notnull")]
public static UInt64[] ReadSequencePoints(SnapshotStorageSection sequencePointsSection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.ManifestSection : object {
    [CompilerGeneratedAttribute]
private SnapshotStorageSection <Data>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private SnapshotStorageSection <SequencePoints>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Size>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public SnapshotStorageSection Data { get; public set; }
    [NullableAttribute("2")]
public SnapshotStorageSection SequencePoints { get; public set; }
    public long Size { get; }
    public ManifestSection(SnapshotStorageSection Data, SnapshotStorageSection SequencePoints);
    [CompilerGeneratedAttribute]
protected ManifestSection(ManifestSection original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public SnapshotStorageSection get_Data();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Data(SnapshotStorageSection value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public SnapshotStorageSection get_SequencePoints();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SequencePoints(SnapshotStorageSection value);
    [CompilerGeneratedAttribute]
public long get_Size();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ManifestSection left, ManifestSection right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ManifestSection left, ManifestSection right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ManifestSection other);
    [CompilerGeneratedAttribute]
public virtual ManifestSection <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(SnapshotStorageSection& Data, SnapshotStorageSection& SequencePoints);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_AspNetCore_Server_Kestrel.V16.ConnectionStartId1 : ValueType {
    public string connectionId;
    public string localEndPoint;
    public string remoteEndPoint;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_AspNetCore_Server_Kestrel.V16.ConnectionStopStopId2 : ValueType {
    [NullableAttribute("1")]
public string connectionId;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[LocalizableAttribute("False")]
public static class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_AspNetCore_Server_Kestrel.V16.Dump : object {
    [AsyncIteratorStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_AspNetCore_Server_Kestrel.V16.Dump/<Events>d__0")]
public static IAsyncEnumerable`1<ValueTuple`2<EventString[], int>> Events(ISnapshotStorage snapshotStorage, TimelineSectionTypes sectionType, Lifetime lifetime, TimePresenter timePresenter, Func`2<ulong, bool> acceptTick, Func`2<ThreadId, bool> acceptThreadId, Action`2<CallStackPtr, StringBuilder> forEachCallStack, IProgressIndicator controller, Action`3<EventsBuffer, int, StringBuilder> alterPresentation);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static StringBuilder DumpEvent(StringBuilder output, EventsBuffer buffer, int i, TimePresenter timePresenter, Action`2<CallStackPtr, StringBuilder> forEachCallStack);
}
public enum JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_AspNetCore_Server_Kestrel.V16.EventId : Enum {
    public byte value__;
    public static EventId StackWalk;
    public static EventId ConnectionStartId1;
    public static EventId ConnectionStopStopId2;
    public static EventId RequestStartId3;
    public static EventId RequestStopStopId4;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_AspNetCore_Server_Kestrel.V16.EventsBuffer : object {
    [CompilerGeneratedAttribute]
private UInt64[] <Tick>k__BackingField;
    public ThreadId[] ThreadId;
    public EventId[] EventId;
    public StackFlag[] StackFlag;
    public StackWalk[] StackWalk;
    public ConnectionStartId1[] ConnectionStartId1;
    public ConnectionStopStopId2[] ConnectionStopStopId2;
    public RequestStartId3[] RequestStartId3;
    public RequestStopStopId4[] RequestStopStopId4;
    [CompilerGeneratedAttribute]
private int <Capacity>k__BackingField;
    public UInt64[] Tick { get; private set; }
    public int Capacity { get; }
    public EventsBuffer(int count);
    [CompilerGeneratedAttribute]
public sealed virtual UInt64[] get_Tick();
    [CompilerGeneratedAttribute]
private void set_Tick(UInt64[] value);
    public void SetStackWalk(int index, SystemData& systemData, StackWalk& data);
    public void SetConnectionStartId1(int index, SystemData& systemData, ConnectionStartId1& data);
    public void SetConnectionStopStopId2(int index, SystemData& systemData, ConnectionStopStopId2& data);
    public void SetRequestStartId3(int index, SystemData& systemData, RequestStartId3& data);
    public void SetRequestStopStopId4(int index, SystemData& systemData, RequestStopStopId4& data);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Capacity();
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_AspNetCore_Server_Kestrel.V16.EventsBuffer/<Sort>d__21")]
public sealed virtual Task Sort(int count);
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_AspNetCore_Server_Kestrel.V16.EventsBuffer/<Copy>d__22")]
public sealed virtual Task Copy(int sourceIndex, IBuffer other, int destinationIndex, int count);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_AspNetCore_Server_Kestrel.V16.ParseIntoBuffer : object {
    private States myState;
    [NullableAttribute("2")]
private Byte[] myPartialBuffer;
    private int myPartialCount;
    private long myMaxEvents;
    private SystemData mySystemData;
    private int mySize;
    public ParseIntoBuffer(long maxEvents);
    [NullableContextAttribute("1")]
public sealed virtual bool ProcessPage(Byte[] bytes, int count, EventsBuffer output, int outStartIndex, Int32& outCount, Boolean& outSortedByTick);
    [NullableContextAttribute("1")]
public sealed virtual EventsBuffer CreateBuffer(int capacity);
    private void ThrowReadError(int position, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_AspNetCore_Server_Kestrel.V16.RequestStartId3 : ValueType {
    public string connectionId;
    public string requestId;
    public string path;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_AspNetCore_Server_Kestrel.V16.RequestStopStopId4 : ValueType {
    public string connectionId;
    public string requestId;
    public string method;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Data_SqlClient_EventSource.V16.CorrelationTraceId5 : ValueType {
    [NullableAttribute("1")]
public string message;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[LocalizableAttribute("False")]
public static class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Data_SqlClient_EventSource.V16.Dump : object {
    [AsyncIteratorStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Data_SqlClient_EventSource.V16.Dump/<Events>d__0")]
public static IAsyncEnumerable`1<ValueTuple`2<EventString[], int>> Events(ISnapshotStorage snapshotStorage, TimelineSectionTypes sectionType, Lifetime lifetime, TimePresenter timePresenter, Func`2<ulong, bool> acceptTick, Func`2<ThreadId, bool> acceptThreadId, Action`2<CallStackPtr, StringBuilder> forEachCallStack, IProgressIndicator controller, Action`3<EventsBuffer, int, StringBuilder> alterPresentation);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static StringBuilder DumpEvent(StringBuilder output, EventsBuffer buffer, int i, TimePresenter timePresenter, Action`2<CallStackPtr, StringBuilder> forEachCallStack);
}
public enum JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Data_SqlClient_EventSource.V16.EventId : Enum {
    public byte value__;
    public static EventId StackWalk;
    public static EventId CorrelationTraceId5;
    public static EventId TraceId1;
    public static EventId ScopeStartId2;
    public static EventId ScopeStopId3;
    public static EventId PoolerScopeStartId4;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Data_SqlClient_EventSource.V16.EventsBuffer : object {
    [CompilerGeneratedAttribute]
private UInt64[] <Tick>k__BackingField;
    public ThreadId[] ThreadId;
    public EventId[] EventId;
    public StackFlag[] StackFlag;
    public StackWalk[] StackWalk;
    public CorrelationTraceId5[] CorrelationTraceId5;
    public TraceId1[] TraceId1;
    public ScopeStartId2[] ScopeStartId2;
    public ScopeStopId3[] ScopeStopId3;
    public PoolerScopeStartId4[] PoolerScopeStartId4;
    [CompilerGeneratedAttribute]
private int <Capacity>k__BackingField;
    public UInt64[] Tick { get; private set; }
    public int Capacity { get; }
    public EventsBuffer(int count);
    [CompilerGeneratedAttribute]
public sealed virtual UInt64[] get_Tick();
    [CompilerGeneratedAttribute]
private void set_Tick(UInt64[] value);
    public void SetStackWalk(int index, SystemData& systemData, StackWalk& data);
    public void SetCorrelationTraceId5(int index, SystemData& systemData, CorrelationTraceId5& data);
    public void SetTraceId1(int index, SystemData& systemData, TraceId1& data);
    public void SetScopeStartId2(int index, SystemData& systemData, ScopeStartId2& data);
    public void SetScopeStopId3(int index, SystemData& systemData, ScopeStopId3& data);
    public void SetPoolerScopeStartId4(int index, SystemData& systemData, PoolerScopeStartId4& data);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Capacity();
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Data_SqlClient_EventSource.V16.EventsBuffer/<Sort>d__23")]
public sealed virtual Task Sort(int count);
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Data_SqlClient_EventSource.V16.EventsBuffer/<Copy>d__24")]
public sealed virtual Task Copy(int sourceIndex, IBuffer other, int destinationIndex, int count);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Data_SqlClient_EventSource.V16.ParseIntoBuffer : object {
    private States myState;
    [NullableAttribute("2")]
private Byte[] myPartialBuffer;
    private int myPartialCount;
    private long myMaxEvents;
    private SystemData mySystemData;
    private int mySize;
    public ParseIntoBuffer(long maxEvents);
    [NullableContextAttribute("1")]
public sealed virtual bool ProcessPage(Byte[] bytes, int count, EventsBuffer output, int outStartIndex, Int32& outCount, Boolean& outSortedByTick);
    [NullableContextAttribute("1")]
public sealed virtual EventsBuffer CreateBuffer(int capacity);
    private void ThrowReadError(int position, int count);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Data_SqlClient_EventSource.V16.PoolerScopeStartId4 : ValueType {
    [NullableAttribute("1")]
public string message;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Data_SqlClient_EventSource.V16.ScopeStartId2 : ValueType {
    [NullableAttribute("1")]
public string message;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Data_SqlClient_EventSource.V16.ScopeStopId3 : ValueType {
    [NullableAttribute("1")]
public string message;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Data_SqlClient_EventSource.V16.TraceId1 : ValueType {
    [NullableAttribute("1")]
public string message;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[LocalizableAttribute("False")]
public static class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource_Parsed.V16.Dump : object {
    [AsyncIteratorStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource_Parsed.V16.Dump/<Events>d__0")]
public static IAsyncEnumerable`1<ValueTuple`2<EventString[], int>> Events(ISnapshotStorage snapshotStorage, TimelineSectionTypes sectionType, Lifetime lifetime, TimePresenter timePresenter, Func`2<ulong, bool> acceptTick, Func`2<ThreadId, bool> acceptThreadId, Action`2<CallStackPtr, StringBuilder> forEachCallStack, IProgressIndicator controller, Action`3<EventsBuffer, int, StringBuilder> alterPresentation);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static StringBuilder DumpEvent(StringBuilder output, EventsBuffer buffer, int i, TimePresenter timePresenter, Action`2<CallStackPtr, StringBuilder> forEachCallStack);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource_Parsed.V16.EfCoreSqlCommandDataReaderDisposingId9 : ValueType {
    public string CommandId;
    public string ReadCount;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource_Parsed.V16.EfCoreSqlCommandErrorId8V1 : ValueType {
    [NullableAttribute("1")]
public string CommandId;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource_Parsed.V16.EfCoreSqlCommandExecutedId7 : ValueType {
    public string CommandId;
    public string Duration;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource_Parsed.V16.EfCoreSqlCommandExecutingId6V1 : ValueType {
    public string CommandId;
    public string CommandText;
    public string ConnectionId;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource_Parsed.V16.EfCoreSqlConnectionClosedId4 : ValueType {
    [NullableAttribute("1")]
public string ConnectionId;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource_Parsed.V16.EfCoreSqlConnectionClosingId3V1 : ValueType {
    [NullableAttribute("1")]
public string ConnectionId;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource_Parsed.V16.EfCoreSqlConnectionErrorId5V1 : ValueType {
    [NullableAttribute("1")]
public string ConnectionId;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource_Parsed.V16.EfCoreSqlConnectionOpenedId2 : ValueType {
    public string ConnectionId;
    public string ConnectionString;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource_Parsed.V16.EfCoreSqlConnectionOpeningId1V1 : ValueType {
    public string ConnectionId;
    public string ConnectionString;
}
public enum JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource_Parsed.V16.EventId : Enum {
    public byte value__;
    public static EventId StackWalk;
    public static EventId EfCoreSqlConnectionErrorId5V1;
    public static EventId EfCoreSqlCommandExecutingId6V1;
    public static EventId EfCoreSqlCommandExecutedId7;
    public static EventId EfCoreSqlCommandErrorId8V1;
    public static EventId EfCoreSqlCommandDataReaderDisposingId9;
    public static EventId SqlClientSqlConnectionOpeningId10V1;
    public static EventId SqlClientSqlConnectionOpenedId11;
    public static EventId SqlClientSqlConnectionOpenErrorId12V1;
    public static EventId SqlClientSqlConnectionCloseErrorId13V1;
    public static EventId SqlClientSqlConnectionClosingId14V1;
    public static EventId SqlClientSqlConnectionClosedId15;
    public static EventId SqlClientSqlCommandExecutingId16V1;
    public static EventId SqlClientSqlCommandExecutedId17;
    public static EventId SqlClientSqlCommandErrorId18V1;
    public static EventId EfCoreSqlConnectionOpeningId1V1;
    public static EventId EfCoreSqlConnectionOpenedId2;
    public static EventId EfCoreSqlConnectionClosingId3V1;
    public static EventId EfCoreSqlConnectionClosedId4;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource_Parsed.V16.EventsBuffer : object {
    [CompilerGeneratedAttribute]
private UInt64[] <Tick>k__BackingField;
    public ThreadId[] ThreadId;
    public EventId[] EventId;
    public StackFlag[] StackFlag;
    public StackWalk[] StackWalk;
    public EfCoreSqlConnectionErrorId5V1[] EfCoreSqlConnectionErrorId5V1;
    public EfCoreSqlCommandExecutingId6V1[] EfCoreSqlCommandExecutingId6V1;
    public EfCoreSqlCommandExecutedId7[] EfCoreSqlCommandExecutedId7;
    public EfCoreSqlCommandErrorId8V1[] EfCoreSqlCommandErrorId8V1;
    public EfCoreSqlCommandDataReaderDisposingId9[] EfCoreSqlCommandDataReaderDisposingId9;
    public SqlClientSqlConnectionOpeningId10V1[] SqlClientSqlConnectionOpeningId10V1;
    public SqlClientSqlConnectionOpenedId11[] SqlClientSqlConnectionOpenedId11;
    public SqlClientSqlConnectionOpenErrorId12V1[] SqlClientSqlConnectionOpenErrorId12V1;
    public SqlClientSqlConnectionCloseErrorId13V1[] SqlClientSqlConnectionCloseErrorId13V1;
    public SqlClientSqlConnectionClosingId14V1[] SqlClientSqlConnectionClosingId14V1;
    public SqlClientSqlConnectionClosedId15[] SqlClientSqlConnectionClosedId15;
    public SqlClientSqlCommandExecutingId16V1[] SqlClientSqlCommandExecutingId16V1;
    public SqlClientSqlCommandExecutedId17[] SqlClientSqlCommandExecutedId17;
    public SqlClientSqlCommandErrorId18V1[] SqlClientSqlCommandErrorId18V1;
    public EfCoreSqlConnectionOpeningId1V1[] EfCoreSqlConnectionOpeningId1V1;
    public EfCoreSqlConnectionOpenedId2[] EfCoreSqlConnectionOpenedId2;
    public EfCoreSqlConnectionClosingId3V1[] EfCoreSqlConnectionClosingId3V1;
    public EfCoreSqlConnectionClosedId4[] EfCoreSqlConnectionClosedId4;
    [CompilerGeneratedAttribute]
private int <Capacity>k__BackingField;
    public UInt64[] Tick { get; private set; }
    public int Capacity { get; }
    public EventsBuffer(int count);
    [CompilerGeneratedAttribute]
public sealed virtual UInt64[] get_Tick();
    [CompilerGeneratedAttribute]
private void set_Tick(UInt64[] value);
    public void SetStackWalk(int index, SystemData& systemData, StackWalk& data);
    public void SetEfCoreSqlConnectionErrorId5V1(int index, SystemData& systemData, EfCoreSqlConnectionErrorId5V1& data);
    public void SetEfCoreSqlCommandExecutingId6V1(int index, SystemData& systemData, EfCoreSqlCommandExecutingId6V1& data);
    public void SetEfCoreSqlCommandExecutedId7(int index, SystemData& systemData, EfCoreSqlCommandExecutedId7& data);
    public void SetEfCoreSqlCommandErrorId8V1(int index, SystemData& systemData, EfCoreSqlCommandErrorId8V1& data);
    public void SetEfCoreSqlCommandDataReaderDisposingId9(int index, SystemData& systemData, EfCoreSqlCommandDataReaderDisposingId9& data);
    public void SetSqlClientSqlConnectionOpeningId10V1(int index, SystemData& systemData, SqlClientSqlConnectionOpeningId10V1& data);
    public void SetSqlClientSqlConnectionOpenedId11(int index, SystemData& systemData, SqlClientSqlConnectionOpenedId11& data);
    public void SetSqlClientSqlConnectionOpenErrorId12V1(int index, SystemData& systemData, SqlClientSqlConnectionOpenErrorId12V1& data);
    public void SetSqlClientSqlConnectionCloseErrorId13V1(int index, SystemData& systemData, SqlClientSqlConnectionCloseErrorId13V1& data);
    public void SetSqlClientSqlConnectionClosingId14V1(int index, SystemData& systemData, SqlClientSqlConnectionClosingId14V1& data);
    public void SetSqlClientSqlConnectionClosedId15(int index, SystemData& systemData, SqlClientSqlConnectionClosedId15& data);
    public void SetSqlClientSqlCommandExecutingId16V1(int index, SystemData& systemData, SqlClientSqlCommandExecutingId16V1& data);
    public void SetSqlClientSqlCommandExecutedId17(int index, SystemData& systemData, SqlClientSqlCommandExecutedId17& data);
    public void SetSqlClientSqlCommandErrorId18V1(int index, SystemData& systemData, SqlClientSqlCommandErrorId18V1& data);
    public void SetEfCoreSqlConnectionOpeningId1V1(int index, SystemData& systemData, EfCoreSqlConnectionOpeningId1V1& data);
    public void SetEfCoreSqlConnectionOpenedId2(int index, SystemData& systemData, EfCoreSqlConnectionOpenedId2& data);
    public void SetEfCoreSqlConnectionClosingId3V1(int index, SystemData& systemData, EfCoreSqlConnectionClosingId3V1& data);
    public void SetEfCoreSqlConnectionClosedId4(int index, SystemData& systemData, EfCoreSqlConnectionClosedId4& data);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Capacity();
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource_Parsed.V16.EventsBuffer/<Sort>d__49")]
public sealed virtual Task Sort(int count);
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource_Parsed.V16.EventsBuffer/<Copy>d__50")]
public sealed virtual Task Copy(int sourceIndex, IBuffer other, int destinationIndex, int count);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource_Parsed.V16.ParseIntoBuffer : object {
    private States myState;
    [NullableAttribute("2")]
private Byte[] myPartialBuffer;
    private int myPartialCount;
    private long myMaxEvents;
    private SystemData mySystemData;
    private int mySize;
    public ParseIntoBuffer(long maxEvents);
    [NullableContextAttribute("1")]
public sealed virtual bool ProcessPage(Byte[] bytes, int count, EventsBuffer output, int outStartIndex, Int32& outCount, Boolean& outSortedByTick);
    [NullableContextAttribute("1")]
public sealed virtual EventsBuffer CreateBuffer(int capacity);
    private void ThrowReadError(int position, int count);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource_Parsed.V16.SqlClientSqlCommandErrorId18V1 : ValueType {
    [NullableAttribute("1")]
public string OperationId;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource_Parsed.V16.SqlClientSqlCommandExecutedId17 : ValueType {
    [NullableAttribute("1")]
public string OperationId;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource_Parsed.V16.SqlClientSqlCommandExecutingId16V1 : ValueType {
    public string OperationId;
    public string CommandText;
    public string ConnectionId;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource_Parsed.V16.SqlClientSqlConnectionClosedId15 : ValueType {
    [NullableAttribute("1")]
public string ConnectionId;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource_Parsed.V16.SqlClientSqlConnectionCloseErrorId13V1 : ValueType {
    [NullableAttribute("1")]
public string ConnectionId;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource_Parsed.V16.SqlClientSqlConnectionClosingId14V1 : ValueType {
    [NullableAttribute("1")]
public string ConnectionId;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource_Parsed.V16.SqlClientSqlConnectionOpenedId11 : ValueType {
    public string ConnectionId;
    public string ConnectionString;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource_Parsed.V16.SqlClientSqlConnectionOpenErrorId12V1 : ValueType {
    [NullableAttribute("1")]
public string ConnectionId;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource_Parsed.V16.SqlClientSqlConnectionOpeningId10V1 : ValueType {
    public string ClientConnectionId;
    public string ConnectionString;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource.V16.Activity1StartId1 : ValueType {
    public Guid ActivityId;
    public ushort Count;
    [NullableAttribute("1")]
public Dictionary`2<string, string> Arguments;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource.V16.Activity1StopId2 : ValueType {
    public Guid ActivityId;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[LocalizableAttribute("False")]
public static class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource.V16.Dump : object {
    [AsyncIteratorStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource.V16.Dump/<Events>d__0")]
public static IAsyncEnumerable`1<ValueTuple`2<EventString[], int>> Events(ISnapshotStorage snapshotStorage, TimelineSectionTypes sectionType, Lifetime lifetime, TimePresenter timePresenter, Func`2<ulong, bool> acceptTick, Func`2<ThreadId, bool> acceptThreadId, Action`2<CallStackPtr, StringBuilder> forEachCallStack, IProgressIndicator controller, Action`3<EventsBuffer, int, StringBuilder> alterPresentation);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static StringBuilder DumpEvent(StringBuilder output, EventsBuffer buffer, int i, TimePresenter timePresenter, Action`2<CallStackPtr, StringBuilder> forEachCallStack);
}
public enum JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource.V16.EventId : Enum {
    public byte value__;
    public static EventId StackWalk;
    public static EventId Activity1StartId1;
    public static EventId Activity1StopId2;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource.V16.EventsBuffer : object {
    [CompilerGeneratedAttribute]
private UInt64[] <Tick>k__BackingField;
    public ThreadId[] ThreadId;
    public EventId[] EventId;
    public StackFlag[] StackFlag;
    public StackWalk[] StackWalk;
    public Activity1StartId1[] Activity1StartId1;
    public Activity1StopId2[] Activity1StopId2;
    [CompilerGeneratedAttribute]
private int <Capacity>k__BackingField;
    public UInt64[] Tick { get; private set; }
    public int Capacity { get; }
    public EventsBuffer(int count);
    [CompilerGeneratedAttribute]
public sealed virtual UInt64[] get_Tick();
    [CompilerGeneratedAttribute]
private void set_Tick(UInt64[] value);
    public void SetStackWalk(int index, SystemData& systemData, StackWalk& data);
    public void SetActivity1StartId1(int index, SystemData& systemData, Activity1StartId1& data);
    public void SetActivity1StopId2(int index, SystemData& systemData, Activity1StopId2& data);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Capacity();
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource.V16.EventsBuffer/<Sort>d__17")]
public sealed virtual Task Sort(int count);
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource.V16.EventsBuffer/<Copy>d__18")]
public sealed virtual Task Copy(int sourceIndex, IBuffer other, int destinationIndex, int count);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Diagnostics_DiagnosticSource.V16.ParseIntoBuffer : object {
    private States myState;
    [NullableAttribute("2")]
private Byte[] myPartialBuffer;
    private int myPartialCount;
    private long myMaxEvents;
    private SystemData mySystemData;
    private int mySize;
    public ParseIntoBuffer(long maxEvents);
    [NullableContextAttribute("1")]
public sealed virtual bool ProcessPage(Byte[] bytes, int count, EventsBuffer output, int outStartIndex, Int32& outCount, Boolean& outSortedByTick);
    [NullableContextAttribute("1")]
public sealed virtual EventsBuffer CreateBuffer(int capacity);
    private void ThrowReadError(int position, int count);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntime.V16.AppDomainResourceManagementThreadCreatedId11 : ValueType {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntime.V16.CLRMethodMethodILToNativeMapId15 : ValueType {
    public ulong MethodID;
    public ulong ReJITID;
    public byte MethodExtent;
    public ushort CountOfMapEntries;
    public UInt32[] ILOffsets;
    public UInt32[] NativeOffsets;
    public ushort ClrInstanceID;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntime.V16.CLRMethodMethodILToNativeMapId16V1 : ValueType {
    public ulong MethodID;
    public ulong ReJITID;
    public byte MethodExtent;
    public ushort CountOfMapEntries;
    public UInt32[] ILOffsets;
    public UInt32[] NativeOffsets;
    public ushort ClrInstanceID;
    public ulong ILVersionID;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntime.V16.CLRMethodMethodJittingStartedId14 : ValueType {
    public ulong MethodID;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntime.V16.CLRMethodMethodLoadVerboseId13 : ValueType {
    public ulong MethodID;
    public ulong ModuleID;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntime.V16.ContentionStartId10V1 : ValueType {
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntime.V16.ContentionStartId17V2 : ValueType {
    public ulong AssociatedObjectID;
    public ulong LockOwnerThreadID;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntime.V16.ContentionStartId17V2PTR32 : ValueType {
    public UInt32 AssociatedObjectID;
    public ulong LockOwnerThreadID;
    public static ContentionStartId17V2 ToPTR64(ContentionStartId17V2PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntime.V16.ContentionStopId12 : ValueType {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[LocalizableAttribute("False")]
public static class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntime.V16.Dump : object {
    [AsyncIteratorStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntime.V16.Dump/<Events>d__0")]
public static IAsyncEnumerable`1<ValueTuple`2<EventString[], int>> Events(ISnapshotStorage snapshotStorage, TimelineSectionTypes sectionType, Lifetime lifetime, TimePresenter timePresenter, Func`2<ulong, bool> acceptTick, Func`2<ThreadId, bool> acceptThreadId, Action`2<CallStackPtr, StringBuilder> forEachCallStack, IProgressIndicator controller, Action`3<EventsBuffer, int, StringBuilder> alterPresentation);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static StringBuilder DumpEvent(StringBuilder output, EventsBuffer buffer, int i, TimePresenter timePresenter, Action`2<CallStackPtr, StringBuilder> forEachCallStack);
}
public enum JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntime.V16.EventId : Enum {
    public byte value__;
    public static EventId StackWalk;
    public static EventId GarbageCollectionStartId1V1;
    public static EventId GarbageCollectionGCAllocationTickId6;
    public static EventId GarbageCollectionGCAllocationTickId7V2;
    public static EventId GarbageCollectionGCFinalizersBeginId8V1;
    public static EventId CLRMethodMethodLoadVerboseId13;
    public static EventId CLRMethodMethodJittingStartedId14;
    public static EventId CLRMethodMethodILToNativeMapId15;
    public static EventId CLRMethodMethodILToNativeMapId16V1;
    public static EventId GarbageCollectionStopId2;
    public static EventId GarbageCollectionGCRestartEEEndId3V1;
    public static EventId GarbageCollectionGCHeapStatsId18;
    public static EventId GarbageCollectionGCHeapStatsId19V1;
    public static EventId GarbageCollectionGCHeapStatsId20V2;
    public static EventId ExceptionStartId9V1;
    public static EventId ContentionStartId10V1;
    public static EventId ContentionStartId17V2;
    public static EventId AppDomainResourceManagementThreadCreatedId11;
    public static EventId GarbageCollectionGCSuspendEEBeginId4;
    public static EventId GarbageCollectionGCSuspendEEBeginId5V1;
    public static EventId ContentionStopId12;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntime.V16.EventsBuffer : object {
    [CompilerGeneratedAttribute]
private UInt64[] <Tick>k__BackingField;
    public ThreadId[] ThreadId;
    public EventId[] EventId;
    public StackFlag[] StackFlag;
    public StackWalk[] StackWalk;
    public GarbageCollectionStartId1V1[] GarbageCollectionStartId1V1;
    public GarbageCollectionGCAllocationTickId6[] GarbageCollectionGCAllocationTickId6;
    public GarbageCollectionGCAllocationTickId7V2[] GarbageCollectionGCAllocationTickId7V2;
    public GarbageCollectionGCFinalizersBeginId8V1[] GarbageCollectionGCFinalizersBeginId8V1;
    public CLRMethodMethodLoadVerboseId13[] CLRMethodMethodLoadVerboseId13;
    public CLRMethodMethodJittingStartedId14[] CLRMethodMethodJittingStartedId14;
    public CLRMethodMethodILToNativeMapId15[] CLRMethodMethodILToNativeMapId15;
    public CLRMethodMethodILToNativeMapId16V1[] CLRMethodMethodILToNativeMapId16V1;
    public GarbageCollectionStopId2[] GarbageCollectionStopId2;
    public GarbageCollectionGCRestartEEEndId3V1[] GarbageCollectionGCRestartEEEndId3V1;
    public GarbageCollectionGCHeapStatsId18[] GarbageCollectionGCHeapStatsId18;
    public GarbageCollectionGCHeapStatsId19V1[] GarbageCollectionGCHeapStatsId19V1;
    public GarbageCollectionGCHeapStatsId20V2[] GarbageCollectionGCHeapStatsId20V2;
    public ExceptionStartId9V1[] ExceptionStartId9V1;
    public ContentionStartId10V1[] ContentionStartId10V1;
    public ContentionStartId17V2[] ContentionStartId17V2;
    public AppDomainResourceManagementThreadCreatedId11[] AppDomainResourceManagementThreadCreatedId11;
    public GarbageCollectionGCSuspendEEBeginId4[] GarbageCollectionGCSuspendEEBeginId4;
    public GarbageCollectionGCSuspendEEBeginId5V1[] GarbageCollectionGCSuspendEEBeginId5V1;
    public ContentionStopId12[] ContentionStopId12;
    [CompilerGeneratedAttribute]
private int <Capacity>k__BackingField;
    public UInt64[] Tick { get; private set; }
    public int Capacity { get; }
    public EventsBuffer(int count);
    [CompilerGeneratedAttribute]
public sealed virtual UInt64[] get_Tick();
    [CompilerGeneratedAttribute]
private void set_Tick(UInt64[] value);
    public void SetStackWalk(int index, SystemData& systemData, StackWalk& data);
    public void SetGarbageCollectionStartId1V1(int index, SystemData& systemData, GarbageCollectionStartId1V1& data);
    public void SetGarbageCollectionGCAllocationTickId6(int index, SystemData& systemData, GarbageCollectionGCAllocationTickId6& data);
    public void SetGarbageCollectionGCAllocationTickId7V2(int index, SystemData& systemData, GarbageCollectionGCAllocationTickId7V2& data);
    public void SetGarbageCollectionGCFinalizersBeginId8V1(int index, SystemData& systemData, GarbageCollectionGCFinalizersBeginId8V1& data);
    public void SetCLRMethodMethodLoadVerboseId13(int index, SystemData& systemData, CLRMethodMethodLoadVerboseId13& data);
    public void SetCLRMethodMethodJittingStartedId14(int index, SystemData& systemData, CLRMethodMethodJittingStartedId14& data);
    public void SetCLRMethodMethodILToNativeMapId15(int index, SystemData& systemData, CLRMethodMethodILToNativeMapId15& data);
    public void SetCLRMethodMethodILToNativeMapId16V1(int index, SystemData& systemData, CLRMethodMethodILToNativeMapId16V1& data);
    public void SetGarbageCollectionStopId2(int index, SystemData& systemData, GarbageCollectionStopId2& data);
    public void SetGarbageCollectionGCRestartEEEndId3V1(int index, SystemData& systemData, GarbageCollectionGCRestartEEEndId3V1& data);
    public void SetGarbageCollectionGCHeapStatsId18(int index, SystemData& systemData, GarbageCollectionGCHeapStatsId18& data);
    public void SetGarbageCollectionGCHeapStatsId19V1(int index, SystemData& systemData, GarbageCollectionGCHeapStatsId19V1& data);
    public void SetGarbageCollectionGCHeapStatsId20V2(int index, SystemData& systemData, GarbageCollectionGCHeapStatsId20V2& data);
    public void SetExceptionStartId9V1(int index, SystemData& systemData, ExceptionStartId9V1& data);
    public void SetContentionStartId10V1(int index, SystemData& systemData, ContentionStartId10V1& data);
    public void SetContentionStartId17V2(int index, SystemData& systemData, ContentionStartId17V2& data);
    public void SetAppDomainResourceManagementThreadCreatedId11(int index, SystemData& systemData, AppDomainResourceManagementThreadCreatedId11& data);
    public void SetGarbageCollectionGCSuspendEEBeginId4(int index, SystemData& systemData, GarbageCollectionGCSuspendEEBeginId4& data);
    public void SetGarbageCollectionGCSuspendEEBeginId5V1(int index, SystemData& systemData, GarbageCollectionGCSuspendEEBeginId5V1& data);
    public void SetContentionStopId12(int index, SystemData& systemData, ContentionStopId12& data);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Capacity();
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntime.V16.EventsBuffer/<Sort>d__53")]
public sealed virtual Task Sort(int count);
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntime.V16.EventsBuffer/<Copy>d__54")]
public sealed virtual Task Copy(int sourceIndex, IBuffer other, int destinationIndex, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntime.V16.ExceptionStartId9V1 : ValueType {
    public string ExceptionType;
    public string ExceptionMessage;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntime.V16.GarbageCollectionGCAllocationTickId6 : ValueType {
    public UInt32 AllocationAmount;
    public UInt32 AllocationKind;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntime.V16.GarbageCollectionGCAllocationTickId7V2 : ValueType {
    public UInt32 AllocationAmount;
    public UInt32 AllocationKind;
    [NullableAttribute("1")]
public string TypeName;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntime.V16.GarbageCollectionGCFinalizersBeginId8V1 : ValueType {
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntime.V16.GarbageCollectionGCHeapStatsId18 : ValueType {
    public ulong GenerationSize0;
    public ulong TotalPromotedSize0;
    public ulong GenerationSize1;
    public ulong TotalPromotedSize1;
    public ulong GenerationSize2;
    public ulong TotalPromotedSize2;
    public ulong GenerationSize3;
    public ulong TotalPromotedSize3;
    public ulong FinalizationPromotedSize;
    public ulong FinalizationPromotedCount;
    public UInt32 PinnedObjectCount;
    public UInt32 SinkBlockCount;
    public UInt32 GCHandleCount;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntime.V16.GarbageCollectionGCHeapStatsId19V1 : ValueType {
    public ulong GenerationSize0;
    public ulong TotalPromotedSize0;
    public ulong GenerationSize1;
    public ulong TotalPromotedSize1;
    public ulong GenerationSize2;
    public ulong TotalPromotedSize2;
    public ulong GenerationSize3;
    public ulong TotalPromotedSize3;
    public ulong FinalizationPromotedSize;
    public ulong FinalizationPromotedCount;
    public UInt32 PinnedObjectCount;
    public UInt32 SinkBlockCount;
    public UInt32 GCHandleCount;
    public ushort ClrInstanceID;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntime.V16.GarbageCollectionGCHeapStatsId20V2 : ValueType {
    public ulong GenerationSize0;
    public ulong TotalPromotedSize0;
    public ulong GenerationSize1;
    public ulong TotalPromotedSize1;
    public ulong GenerationSize2;
    public ulong TotalPromotedSize2;
    public ulong GenerationSize3;
    public ulong TotalPromotedSize3;
    public ulong FinalizationPromotedSize;
    public ulong FinalizationPromotedCount;
    public UInt32 PinnedObjectCount;
    public UInt32 SinkBlockCount;
    public UInt32 GCHandleCount;
    public ushort ClrInstanceID;
    public ulong GenerationSize4;
    public ulong TotalPromotedSize4;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntime.V16.GarbageCollectionGCRestartEEEndId3V1 : ValueType {
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntime.V16.GarbageCollectionGCSuspendEEBeginId4 : ValueType {
    public ushort Reason;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntime.V16.GarbageCollectionGCSuspendEEBeginId5V1 : ValueType {
    public UInt32 Reason;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntime.V16.GarbageCollectionStartId1V1 : ValueType {
    public UInt32 Count;
    public UInt32 Depth;
    public UInt32 Reason;
    public UInt32 Type;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntime.V16.GarbageCollectionStopId2 : ValueType {
    public UInt32 Count;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntime.V16.ParseIntoBuffer : object {
    private States myState;
    [NullableAttribute("2")]
private Byte[] myPartialBuffer;
    private int myPartialCount;
    private long myMaxEvents;
    private SystemData mySystemData;
    private int mySize;
    public ParseIntoBuffer(long maxEvents);
    [NullableContextAttribute("1")]
public sealed virtual bool ProcessPage(Byte[] bytes, int count, EventsBuffer output, int outStartIndex, Int32& outCount, Boolean& outSortedByTick);
    [NullableContextAttribute("1")]
public sealed virtual EventsBuffer CreateBuffer(int capacity);
    private void ThrowReadError(int position, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntimeRundown.V16.CLRMethodRundownMethodDCStartILToNativeMapId1 : ValueType {
    public ulong MethodID;
    public ulong ReJITID;
    public byte MethodExtent;
    public ushort CountOfMapEntries;
    public UInt32[] ILOffsets;
    public UInt32[] NativeOffsets;
    public ushort ClrInstanceID;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntimeRundown.V16.CLRMethodRundownMethodDCStartILToNativeMapId2V1 : ValueType {
    public ulong MethodID;
    public ulong ReJITID;
    public byte MethodExtent;
    public ushort CountOfMapEntries;
    public UInt32[] ILOffsets;
    public UInt32[] NativeOffsets;
    public ushort ClrInstanceID;
    public ulong ILVersionID;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntimeRundown.V16.CLRMethodRundownMethodDCStartVerboseId3 : ValueType {
    public ulong MethodID;
    public ulong ModuleID;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[LocalizableAttribute("False")]
public static class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntimeRundown.V16.Dump : object {
    [AsyncIteratorStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntimeRundown.V16.Dump/<Events>d__0")]
public static IAsyncEnumerable`1<ValueTuple`2<EventString[], int>> Events(ISnapshotStorage snapshotStorage, TimelineSectionTypes sectionType, Lifetime lifetime, TimePresenter timePresenter, Func`2<ulong, bool> acceptTick, Func`2<ThreadId, bool> acceptThreadId, Action`2<CallStackPtr, StringBuilder> forEachCallStack, IProgressIndicator controller, Action`3<EventsBuffer, int, StringBuilder> alterPresentation);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static StringBuilder DumpEvent(StringBuilder output, EventsBuffer buffer, int i, TimePresenter timePresenter, Action`2<CallStackPtr, StringBuilder> forEachCallStack);
}
public enum JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntimeRundown.V16.EventId : Enum {
    public byte value__;
    public static EventId StackWalk;
    public static EventId CLRMethodRundownMethodDCStartVerboseId3;
    public static EventId CLRMethodRundownMethodDCStartILToNativeMapId1;
    public static EventId CLRMethodRundownMethodDCStartILToNativeMapId2V1;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntimeRundown.V16.EventsBuffer : object {
    [CompilerGeneratedAttribute]
private UInt64[] <Tick>k__BackingField;
    public ThreadId[] ThreadId;
    public EventId[] EventId;
    public StackFlag[] StackFlag;
    public StackWalk[] StackWalk;
    public CLRMethodRundownMethodDCStartVerboseId3[] CLRMethodRundownMethodDCStartVerboseId3;
    public CLRMethodRundownMethodDCStartILToNativeMapId1[] CLRMethodRundownMethodDCStartILToNativeMapId1;
    public CLRMethodRundownMethodDCStartILToNativeMapId2V1[] CLRMethodRundownMethodDCStartILToNativeMapId2V1;
    [CompilerGeneratedAttribute]
private int <Capacity>k__BackingField;
    public UInt64[] Tick { get; private set; }
    public int Capacity { get; }
    public EventsBuffer(int count);
    [CompilerGeneratedAttribute]
public sealed virtual UInt64[] get_Tick();
    [CompilerGeneratedAttribute]
private void set_Tick(UInt64[] value);
    public void SetStackWalk(int index, SystemData& systemData, StackWalk& data);
    public void SetCLRMethodRundownMethodDCStartVerboseId3(int index, SystemData& systemData, CLRMethodRundownMethodDCStartVerboseId3& data);
    public void SetCLRMethodRundownMethodDCStartILToNativeMapId1(int index, SystemData& systemData, CLRMethodRundownMethodDCStartILToNativeMapId1& data);
    public void SetCLRMethodRundownMethodDCStartILToNativeMapId2V1(int index, SystemData& systemData, CLRMethodRundownMethodDCStartILToNativeMapId2V1& data);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Capacity();
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntimeRundown.V16.EventsBuffer/<Sort>d__19")]
public sealed virtual Task Sort(int count);
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntimeRundown.V16.EventsBuffer/<Copy>d__20")]
public sealed virtual Task Copy(int sourceIndex, IBuffer other, int destinationIndex, int count);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_DotNETRuntimeRundown.V16.ParseIntoBuffer : object {
    private States myState;
    [NullableAttribute("2")]
private Byte[] myPartialBuffer;
    private int myPartialCount;
    private long myMaxEvents;
    private SystemData mySystemData;
    private int mySize;
    public ParseIntoBuffer(long maxEvents);
    [NullableContextAttribute("1")]
public sealed virtual bool ProcessPage(Byte[] bytes, int count, EventsBuffer output, int outStartIndex, Int32& outCount, Boolean& outSortedByTick);
    [NullableContextAttribute("1")]
public sealed virtual EventsBuffer CreateBuffer(int capacity);
    private void ThrowReadError(int position, int count);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_HttpService.V16.DeliverId1 : ValueType {
    public ulong RequestId;
    [NullableAttribute("1")]
public string Url;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[LocalizableAttribute("False")]
public static class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_HttpService.V16.Dump : object {
    [AsyncIteratorStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_HttpService.V16.Dump/<Events>d__0")]
public static IAsyncEnumerable`1<ValueTuple`2<EventString[], int>> Events(ISnapshotStorage snapshotStorage, TimelineSectionTypes sectionType, Lifetime lifetime, TimePresenter timePresenter, Func`2<ulong, bool> acceptTick, Func`2<ThreadId, bool> acceptThreadId, Action`2<CallStackPtr, StringBuilder> forEachCallStack, IProgressIndicator controller, Action`3<EventsBuffer, int, StringBuilder> alterPresentation);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static StringBuilder DumpEvent(StringBuilder output, EventsBuffer buffer, int i, TimePresenter timePresenter, Action`2<CallStackPtr, StringBuilder> forEachCallStack);
}
public enum JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_HttpService.V16.EventId : Enum {
    public byte value__;
    public static EventId StackWalk;
    public static EventId DeliverId1;
    public static EventId RecvRespId2;
    public static EventId FastRespId3;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_HttpService.V16.EventsBuffer : object {
    [CompilerGeneratedAttribute]
private UInt64[] <Tick>k__BackingField;
    public ThreadId[] ThreadId;
    public EventId[] EventId;
    public StackFlag[] StackFlag;
    public StackWalk[] StackWalk;
    public DeliverId1[] DeliverId1;
    public RecvRespId2[] RecvRespId2;
    public FastRespId3[] FastRespId3;
    [CompilerGeneratedAttribute]
private int <Capacity>k__BackingField;
    public UInt64[] Tick { get; private set; }
    public int Capacity { get; }
    public EventsBuffer(int count);
    [CompilerGeneratedAttribute]
public sealed virtual UInt64[] get_Tick();
    [CompilerGeneratedAttribute]
private void set_Tick(UInt64[] value);
    public void SetStackWalk(int index, SystemData& systemData, StackWalk& data);
    public void SetDeliverId1(int index, SystemData& systemData, DeliverId1& data);
    public void SetRecvRespId2(int index, SystemData& systemData, RecvRespId2& data);
    public void SetFastRespId3(int index, SystemData& systemData, FastRespId3& data);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Capacity();
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_HttpService.V16.EventsBuffer/<Sort>d__19")]
public sealed virtual Task Sort(int count);
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_HttpService.V16.EventsBuffer/<Copy>d__20")]
public sealed virtual Task Copy(int sourceIndex, IBuffer other, int destinationIndex, int count);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_HttpService.V16.FastRespId3 : ValueType {
    public ulong RequestId;
    [NullableAttribute("1")]
public string Verb;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_HttpService.V16.ParseIntoBuffer : object {
    private States myState;
    [NullableAttribute("2")]
private Byte[] myPartialBuffer;
    private int myPartialCount;
    private long myMaxEvents;
    private SystemData mySystemData;
    private int mySize;
    public ParseIntoBuffer(long maxEvents);
    [NullableContextAttribute("1")]
public sealed virtual bool ProcessPage(Byte[] bytes, int count, EventsBuffer output, int outStartIndex, Int32& outCount, Boolean& outSortedByTick);
    [NullableContextAttribute("1")]
public sealed virtual EventsBuffer CreateBuffer(int capacity);
    private void ThrowReadError(int position, int count);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_HttpService.V16.RecvRespId2 : ValueType {
    public ulong RequestId;
    [NullableAttribute("1")]
public string Verb;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[LocalizableAttribute("False")]
public static class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_Win32k.V16.Dump : object {
    [AsyncIteratorStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_Win32k.V16.Dump/<Events>d__0")]
public static IAsyncEnumerable`1<ValueTuple`2<EventString[], int>> Events(ISnapshotStorage snapshotStorage, TimelineSectionTypes sectionType, Lifetime lifetime, TimePresenter timePresenter, Func`2<ulong, bool> acceptTick, Func`2<ThreadId, bool> acceptThreadId, Action`2<CallStackPtr, StringBuilder> forEachCallStack, IProgressIndicator controller, Action`3<EventsBuffer, int, StringBuilder> alterPresentation);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static StringBuilder DumpEvent(StringBuilder output, EventsBuffer buffer, int i, TimePresenter timePresenter, Action`2<CallStackPtr, StringBuilder> forEachCallStack);
}
public enum JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_Win32k.V16.EventId : Enum {
    public byte value__;
    public static EventId StackWalk;
    public static EventId InputProcessDelayId1;
    public static EventId MessageCheckDelayId2;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_Win32k.V16.EventsBuffer : object {
    [CompilerGeneratedAttribute]
private UInt64[] <Tick>k__BackingField;
    public ThreadId[] ThreadId;
    public EventId[] EventId;
    public StackFlag[] StackFlag;
    public StackWalk[] StackWalk;
    public InputProcessDelayId1[] InputProcessDelayId1;
    public MessageCheckDelayId2[] MessageCheckDelayId2;
    [CompilerGeneratedAttribute]
private int <Capacity>k__BackingField;
    public UInt64[] Tick { get; private set; }
    public int Capacity { get; }
    public EventsBuffer(int count);
    [CompilerGeneratedAttribute]
public sealed virtual UInt64[] get_Tick();
    [CompilerGeneratedAttribute]
private void set_Tick(UInt64[] value);
    public void SetStackWalk(int index, SystemData& systemData, StackWalk& data);
    public void SetInputProcessDelayId1(int index, SystemData& systemData, InputProcessDelayId1& data);
    public void SetMessageCheckDelayId2(int index, SystemData& systemData, MessageCheckDelayId2& data);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Capacity();
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_Win32k.V16.EventsBuffer/<Sort>d__17")]
public sealed virtual Task Sort(int count);
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_Win32k.V16.EventsBuffer/<Copy>d__18")]
public sealed virtual Task Copy(int sourceIndex, IBuffer other, int destinationIndex, int count);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_Win32k.V16.InputProcessDelayId1 : ValueType {
    public UInt32 Flags;
    public UInt32 TimeSinceInputRemoveMs;
    public UInt32 TimeSinceOldestInputMs;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_Win32k.V16.MessageCheckDelayId2 : ValueType {
    public UInt32 Flags;
    public UInt32 DelayTimeMs;
    public UInt32 TimeSinceInputRemoveMs;
    public UInt32 TimeSinceOldestInputMs;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Microsoft_Windows_Win32k.V16.ParseIntoBuffer : object {
    private States myState;
    [NullableAttribute("2")]
private Byte[] myPartialBuffer;
    private int myPartialCount;
    private long myMaxEvents;
    private SystemData mySystemData;
    public ParseIntoBuffer(long maxEvents);
    [NullableContextAttribute("1")]
public sealed virtual bool ProcessPage(Byte[] bytes, int count, EventsBuffer output, int outStartIndex, Int32& outCount, Boolean& outSortedByTick);
    [NullableContextAttribute("1")]
public sealed virtual EventsBuffer CreateBuffer(int capacity);
    private void ThrowReadError(int position, int count);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.DiskIoFlushInitId10V3 : ValueType {
    public ulong Irp;
    public UInt32 IssuingThreadId;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.DiskIoFlushInitId10V3PTR32 : ValueType {
    public UInt32 Irp;
    public UInt32 IssuingThreadId;
    public static DiskIoFlushInitId10V3 ToPTR64(DiskIoFlushInitId10V3PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.DiskIoFlushInitId9V2 : ValueType {
    public ulong Irp;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.DiskIoFlushInitId9V2PTR32 : ValueType {
    public UInt32 Irp;
    public static DiskIoFlushInitId9V2 ToPTR64(DiskIoFlushInitId9V2PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.DiskIoReadId1 : ValueType {
    public UInt32 DiskNumber;
    public UInt32 TransferSize;
    public ulong ByteOffset;
    public ulong FileObject;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.DiskIoReadId1PTR32 : ValueType {
    public UInt32 DiskNumber;
    public UInt32 TransferSize;
    public ulong ByteOffset;
    public UInt32 FileObject;
    public static DiskIoReadId1 ToPTR64(DiskIoReadId1PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.DiskIoReadId2V1 : ValueType {
    public UInt32 DiskNumber;
    public UInt32 TransferSize;
    public ulong ByteOffset;
    public ulong FileObject;
    public ulong HighResResponseTime;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.DiskIoReadId2V1PTR32 : ValueType {
    public UInt32 DiskNumber;
    public UInt32 TransferSize;
    public ulong ByteOffset;
    public UInt32 FileObject;
    public ulong HighResResponseTime;
    public static DiskIoReadId2V1 ToPTR64(DiskIoReadId2V1PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.DiskIoReadId3V2 : ValueType {
    public UInt32 DiskNumber;
    public UInt32 TransferSize;
    public ulong ByteOffset;
    public ulong FileObject;
    public ulong Irp;
    public ulong HighResResponseTime;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.DiskIoReadId3V2PTR32 : ValueType {
    public UInt32 DiskNumber;
    public UInt32 TransferSize;
    public ulong ByteOffset;
    public UInt32 FileObject;
    public UInt32 Irp;
    public ulong HighResResponseTime;
    public static DiskIoReadId3V2 ToPTR64(DiskIoReadId3V2PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.DiskIoReadId4V3 : ValueType {
    public UInt32 DiskNumber;
    public UInt32 TransferSize;
    public ulong ByteOffset;
    public ulong FileObject;
    public ulong Irp;
    public UInt32 IssuingThreadId;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.DiskIoReadId4V3PTR32 : ValueType {
    public UInt32 DiskNumber;
    public UInt32 TransferSize;
    public ulong ByteOffset;
    public UInt32 FileObject;
    public UInt32 Irp;
    public UInt32 IssuingThreadId;
    public static DiskIoReadId4V3 ToPTR64(DiskIoReadId4V3PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.DiskIoReadInitId11V2 : ValueType {
    public ulong Irp;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.DiskIoReadInitId11V2PTR32 : ValueType {
    public UInt32 Irp;
    public static DiskIoReadInitId11V2 ToPTR64(DiskIoReadInitId11V2PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.DiskIoReadInitId12V3 : ValueType {
    public ulong Irp;
    public UInt32 IssuingThreadId;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.DiskIoReadInitId12V3PTR32 : ValueType {
    public UInt32 Irp;
    public UInt32 IssuingThreadId;
    public static DiskIoReadInitId12V3 ToPTR64(DiskIoReadInitId12V3PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.DiskIoWriteId5 : ValueType {
    public UInt32 DiskNumber;
    public UInt32 TransferSize;
    public ulong ByteOffset;
    public ulong FileObject;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.DiskIoWriteId5PTR32 : ValueType {
    public UInt32 DiskNumber;
    public UInt32 TransferSize;
    public ulong ByteOffset;
    public UInt32 FileObject;
    public static DiskIoWriteId5 ToPTR64(DiskIoWriteId5PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.DiskIoWriteId6V1 : ValueType {
    public UInt32 DiskNumber;
    public UInt32 TransferSize;
    public ulong ByteOffset;
    public ulong FileObject;
    public ulong HighResResponseTime;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.DiskIoWriteId6V1PTR32 : ValueType {
    public UInt32 DiskNumber;
    public UInt32 TransferSize;
    public ulong ByteOffset;
    public UInt32 FileObject;
    public ulong HighResResponseTime;
    public static DiskIoWriteId6V1 ToPTR64(DiskIoWriteId6V1PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.DiskIoWriteId7V2 : ValueType {
    public UInt32 DiskNumber;
    public UInt32 TransferSize;
    public ulong ByteOffset;
    public ulong FileObject;
    public ulong Irp;
    public ulong HighResResponseTime;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.DiskIoWriteId7V2PTR32 : ValueType {
    public UInt32 DiskNumber;
    public UInt32 TransferSize;
    public ulong ByteOffset;
    public UInt32 FileObject;
    public UInt32 Irp;
    public ulong HighResResponseTime;
    public static DiskIoWriteId7V2 ToPTR64(DiskIoWriteId7V2PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.DiskIoWriteId8V3 : ValueType {
    public UInt32 DiskNumber;
    public UInt32 TransferSize;
    public ulong ByteOffset;
    public ulong FileObject;
    public ulong Irp;
    public UInt32 IssuingThreadId;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.DiskIoWriteId8V3PTR32 : ValueType {
    public UInt32 DiskNumber;
    public UInt32 TransferSize;
    public ulong ByteOffset;
    public UInt32 FileObject;
    public UInt32 Irp;
    public UInt32 IssuingThreadId;
    public static DiskIoWriteId8V3 ToPTR64(DiskIoWriteId8V3PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.DiskIoWriteInitId13V2 : ValueType {
    public ulong Irp;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.DiskIoWriteInitId13V2PTR32 : ValueType {
    public UInt32 Irp;
    public static DiskIoWriteInitId13V2 ToPTR64(DiskIoWriteInitId13V2PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.DiskIoWriteInitId14V3 : ValueType {
    public ulong Irp;
    public UInt32 IssuingThreadId;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.DiskIoWriteInitId14V3PTR32 : ValueType {
    public UInt32 Irp;
    public UInt32 IssuingThreadId;
    public static DiskIoWriteInitId14V3 ToPTR64(DiskIoWriteInitId14V3PTR32 from);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[LocalizableAttribute("False")]
public static class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.Dump : object {
    [AsyncIteratorStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.Dump/<Events>d__0")]
public static IAsyncEnumerable`1<ValueTuple`2<EventString[], int>> Events(ISnapshotStorage snapshotStorage, TimelineSectionTypes sectionType, Lifetime lifetime, TimePresenter timePresenter, Func`2<ulong, bool> acceptTick, Func`2<ThreadId, bool> acceptThreadId, Action`2<CallStackPtr, StringBuilder> forEachCallStack, IProgressIndicator controller, Action`3<EventsBuffer, int, StringBuilder> alterPresentation);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static StringBuilder DumpEvent(StringBuilder output, EventsBuffer buffer, int i, TimePresenter timePresenter, Action`2<CallStackPtr, StringBuilder> forEachCallStack);
}
public enum JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.EventId : Enum {
    public byte value__;
    public static EventId StackWalk;
    public static EventId PerfInfoSampleProfId48V1;
    public static EventId PerfInfoSampleProfId49V2;
    public static EventId DiskIoFlushInitId9V2;
    public static EventId DiskIoFlushInitId10V3;
    public static EventId DiskIoReadInitId11V2;
    public static EventId DiskIoReadInitId12V3;
    public static EventId DiskIoWriteInitId13V2;
    public static EventId DiskIoWriteInitId14V3;
    public static EventId ProcessDCStartId50;
    public static EventId ProcessDCStartId51V1;
    public static EventId ProcessDCStartId52V2;
    public static EventId ProcessDCStartId53V3;
    public static EventId ProcessDCStartId54V4;
    public static EventId ProcessEndId55;
    public static EventId ProcessEndId56V1;
    public static EventId ProcessEndId57V2;
    public static EventId ProcessEndId58V3;
    public static EventId ProcessEndId59V4;
    public static EventId ProcessStartId60;
    public static EventId ProcessStartId61V1;
    public static EventId ProcessStartId62V2;
    public static EventId ProcessStartId63V3;
    public static EventId ProcessStartId64V4;
    public static EventId ThreadDCStartId65;
    public static EventId ThreadDCStartId66V1;
    public static EventId ThreadDCStartId67V2;
    public static EventId ThreadDCStartId68V3;
    public static EventId ThreadDCStartId69V4;
    public static EventId ThreadEndId70;
    public static EventId ThreadEndId71V1;
    public static EventId ThreadEndId72V2;
    public static EventId ThreadEndId73V3;
    public static EventId ThreadEndId74V4;
    public static EventId ThreadStartId75;
    public static EventId ThreadStartId76V1;
    public static EventId ThreadStartId77V2;
    public static EventId ThreadStartId78V3;
    public static EventId ThreadStartId79V4;
    public static EventId ThreadCSwitchId80V1;
    public static EventId ThreadCSwitchId81V2;
    public static EventId ThreadCSwitchId82V3;
    public static EventId ThreadCSwitchId83V4;
    public static EventId ThreadReadyThreadId84V2;
    public static EventId FileIoNameId15;
    public static EventId FileIoNameId16V1;
    public static EventId FileIoNameId17V2;
    public static EventId FileIoNameId18V3;
    public static EventId FileIoFileCreateId19V1;
    public static EventId FileIoFileCreateId20V2;
    public static EventId FileIoFileCreateId21V3;
    public static EventId FileIoCleanupId22V2;
    public static EventId FileIoCleanupId23V3;
    public static EventId FileIoCloseId24V2;
    public static EventId FileIoCloseId25V3;
    public static EventId FileIoCreateId26V2;
    public static EventId FileIoCreateId27V3;
    public static EventId FileIoFileDeleteId28V2;
    public static EventId FileIoFileDeleteId29V3;
    public static EventId FileIoFileRundownId30V2;
    public static EventId FileIoFileRundownId31V3;
    public static EventId FileIoFlushId32V2;
    public static EventId FileIoFlushId33V3;
    public static EventId FileIoOperationEndId34V2;
    public static EventId FileIoOperationEndId35V3;
    public static EventId FileIoReadId36V2;
    public static EventId FileIoReadId37V3;
    public static EventId FileIoWriteId38V2;
    public static EventId FileIoWriteId39V3;
    public static EventId DiskIoReadId1;
    public static EventId DiskIoReadId2V1;
    public static EventId DiskIoReadId3V2;
    public static EventId DiskIoReadId4V3;
    public static EventId DiskIoWriteId5;
    public static EventId DiskIoWriteId6V1;
    public static EventId DiskIoWriteId7V2;
    public static EventId DiskIoWriteId8V3;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.EventsBuffer : object {
    [CompilerGeneratedAttribute]
private UInt64[] <Tick>k__BackingField;
    public ThreadId[] ThreadId;
    public EventId[] EventId;
    public StackFlag[] StackFlag;
    public StackWalk[] StackWalk;
    public PerfInfoSampleProfId48V1[] PerfInfoSampleProfId48V1;
    public PerfInfoSampleProfId49V2[] PerfInfoSampleProfId49V2;
    public DiskIoFlushInitId9V2[] DiskIoFlushInitId9V2;
    public DiskIoFlushInitId10V3[] DiskIoFlushInitId10V3;
    public DiskIoReadInitId11V2[] DiskIoReadInitId11V2;
    public DiskIoReadInitId12V3[] DiskIoReadInitId12V3;
    public DiskIoWriteInitId13V2[] DiskIoWriteInitId13V2;
    public DiskIoWriteInitId14V3[] DiskIoWriteInitId14V3;
    public ProcessDCStartId50[] ProcessDCStartId50;
    public ProcessDCStartId51V1[] ProcessDCStartId51V1;
    public ProcessDCStartId52V2[] ProcessDCStartId52V2;
    public ProcessDCStartId53V3[] ProcessDCStartId53V3;
    public ProcessDCStartId54V4[] ProcessDCStartId54V4;
    public ProcessEndId55[] ProcessEndId55;
    public ProcessEndId56V1[] ProcessEndId56V1;
    public ProcessEndId57V2[] ProcessEndId57V2;
    public ProcessEndId58V3[] ProcessEndId58V3;
    public ProcessEndId59V4[] ProcessEndId59V4;
    public ProcessStartId60[] ProcessStartId60;
    public ProcessStartId61V1[] ProcessStartId61V1;
    public ProcessStartId62V2[] ProcessStartId62V2;
    public ProcessStartId63V3[] ProcessStartId63V3;
    public ProcessStartId64V4[] ProcessStartId64V4;
    public ThreadDCStartId65[] ThreadDCStartId65;
    public ThreadDCStartId66V1[] ThreadDCStartId66V1;
    public ThreadDCStartId67V2[] ThreadDCStartId67V2;
    public ThreadDCStartId68V3[] ThreadDCStartId68V3;
    public ThreadDCStartId69V4[] ThreadDCStartId69V4;
    public ThreadEndId70[] ThreadEndId70;
    public ThreadEndId71V1[] ThreadEndId71V1;
    public ThreadEndId72V2[] ThreadEndId72V2;
    public ThreadEndId73V3[] ThreadEndId73V3;
    public ThreadEndId74V4[] ThreadEndId74V4;
    public ThreadStartId75[] ThreadStartId75;
    public ThreadStartId76V1[] ThreadStartId76V1;
    public ThreadStartId77V2[] ThreadStartId77V2;
    public ThreadStartId78V3[] ThreadStartId78V3;
    public ThreadStartId79V4[] ThreadStartId79V4;
    public ThreadCSwitchId80V1[] ThreadCSwitchId80V1;
    public ThreadCSwitchId81V2[] ThreadCSwitchId81V2;
    public ThreadCSwitchId82V3[] ThreadCSwitchId82V3;
    public ThreadCSwitchId83V4[] ThreadCSwitchId83V4;
    public ThreadReadyThreadId84V2[] ThreadReadyThreadId84V2;
    public FileIoNameId15[] FileIoNameId15;
    public FileIoNameId16V1[] FileIoNameId16V1;
    public FileIoNameId17V2[] FileIoNameId17V2;
    public FileIoNameId18V3[] FileIoNameId18V3;
    public FileIoFileCreateId19V1[] FileIoFileCreateId19V1;
    public FileIoFileCreateId20V2[] FileIoFileCreateId20V2;
    public FileIoFileCreateId21V3[] FileIoFileCreateId21V3;
    public FileIoCleanupId22V2[] FileIoCleanupId22V2;
    public FileIoCleanupId23V3[] FileIoCleanupId23V3;
    public FileIoCloseId24V2[] FileIoCloseId24V2;
    public FileIoCloseId25V3[] FileIoCloseId25V3;
    public FileIoCreateId26V2[] FileIoCreateId26V2;
    public FileIoCreateId27V3[] FileIoCreateId27V3;
    public FileIoFileDeleteId28V2[] FileIoFileDeleteId28V2;
    public FileIoFileDeleteId29V3[] FileIoFileDeleteId29V3;
    public FileIoFileRundownId30V2[] FileIoFileRundownId30V2;
    public FileIoFileRundownId31V3[] FileIoFileRundownId31V3;
    public FileIoFlushId32V2[] FileIoFlushId32V2;
    public FileIoFlushId33V3[] FileIoFlushId33V3;
    public FileIoOperationEndId34V2[] FileIoOperationEndId34V2;
    public FileIoOperationEndId35V3[] FileIoOperationEndId35V3;
    public FileIoReadId36V2[] FileIoReadId36V2;
    public FileIoReadId37V3[] FileIoReadId37V3;
    public FileIoWriteId38V2[] FileIoWriteId38V2;
    public FileIoWriteId39V3[] FileIoWriteId39V3;
    public DiskIoReadId1[] DiskIoReadId1;
    public DiskIoReadId2V1[] DiskIoReadId2V1;
    public DiskIoReadId3V2[] DiskIoReadId3V2;
    public DiskIoReadId4V3[] DiskIoReadId4V3;
    public DiskIoWriteId5[] DiskIoWriteId5;
    public DiskIoWriteId6V1[] DiskIoWriteId6V1;
    public DiskIoWriteId7V2[] DiskIoWriteId7V2;
    public DiskIoWriteId8V3[] DiskIoWriteId8V3;
    [CompilerGeneratedAttribute]
private int <Capacity>k__BackingField;
    public UInt64[] Tick { get; private set; }
    public int Capacity { get; }
    public EventsBuffer(int count);
    [CompilerGeneratedAttribute]
public sealed virtual UInt64[] get_Tick();
    [CompilerGeneratedAttribute]
private void set_Tick(UInt64[] value);
    public void SetStackWalk(int index, SystemData& systemData, StackWalk& data);
    public void SetPerfInfoSampleProfId48V1(int index, SystemData& systemData, PerfInfoSampleProfId48V1& data);
    public void SetPerfInfoSampleProfId49V2(int index, SystemData& systemData, PerfInfoSampleProfId49V2& data);
    public void SetDiskIoFlushInitId9V2(int index, SystemData& systemData, DiskIoFlushInitId9V2& data);
    public void SetDiskIoFlushInitId10V3(int index, SystemData& systemData, DiskIoFlushInitId10V3& data);
    public void SetDiskIoReadInitId11V2(int index, SystemData& systemData, DiskIoReadInitId11V2& data);
    public void SetDiskIoReadInitId12V3(int index, SystemData& systemData, DiskIoReadInitId12V3& data);
    public void SetDiskIoWriteInitId13V2(int index, SystemData& systemData, DiskIoWriteInitId13V2& data);
    public void SetDiskIoWriteInitId14V3(int index, SystemData& systemData, DiskIoWriteInitId14V3& data);
    public void SetProcessDCStartId50(int index, SystemData& systemData, ProcessDCStartId50& data);
    public void SetProcessDCStartId51V1(int index, SystemData& systemData, ProcessDCStartId51V1& data);
    public void SetProcessDCStartId52V2(int index, SystemData& systemData, ProcessDCStartId52V2& data);
    public void SetProcessDCStartId53V3(int index, SystemData& systemData, ProcessDCStartId53V3& data);
    public void SetProcessDCStartId54V4(int index, SystemData& systemData, ProcessDCStartId54V4& data);
    public void SetProcessEndId55(int index, SystemData& systemData, ProcessEndId55& data);
    public void SetProcessEndId56V1(int index, SystemData& systemData, ProcessEndId56V1& data);
    public void SetProcessEndId57V2(int index, SystemData& systemData, ProcessEndId57V2& data);
    public void SetProcessEndId58V3(int index, SystemData& systemData, ProcessEndId58V3& data);
    public void SetProcessEndId59V4(int index, SystemData& systemData, ProcessEndId59V4& data);
    public void SetProcessStartId60(int index, SystemData& systemData, ProcessStartId60& data);
    public void SetProcessStartId61V1(int index, SystemData& systemData, ProcessStartId61V1& data);
    public void SetProcessStartId62V2(int index, SystemData& systemData, ProcessStartId62V2& data);
    public void SetProcessStartId63V3(int index, SystemData& systemData, ProcessStartId63V3& data);
    public void SetProcessStartId64V4(int index, SystemData& systemData, ProcessStartId64V4& data);
    public void SetThreadDCStartId65(int index, SystemData& systemData, ThreadDCStartId65& data);
    public void SetThreadDCStartId66V1(int index, SystemData& systemData, ThreadDCStartId66V1& data);
    public void SetThreadDCStartId67V2(int index, SystemData& systemData, ThreadDCStartId67V2& data);
    public void SetThreadDCStartId68V3(int index, SystemData& systemData, ThreadDCStartId68V3& data);
    public void SetThreadDCStartId69V4(int index, SystemData& systemData, ThreadDCStartId69V4& data);
    public void SetThreadEndId70(int index, SystemData& systemData, ThreadEndId70& data);
    public void SetThreadEndId71V1(int index, SystemData& systemData, ThreadEndId71V1& data);
    public void SetThreadEndId72V2(int index, SystemData& systemData, ThreadEndId72V2& data);
    public void SetThreadEndId73V3(int index, SystemData& systemData, ThreadEndId73V3& data);
    public void SetThreadEndId74V4(int index, SystemData& systemData, ThreadEndId74V4& data);
    public void SetThreadStartId75(int index, SystemData& systemData, ThreadStartId75& data);
    public void SetThreadStartId76V1(int index, SystemData& systemData, ThreadStartId76V1& data);
    public void SetThreadStartId77V2(int index, SystemData& systemData, ThreadStartId77V2& data);
    public void SetThreadStartId78V3(int index, SystemData& systemData, ThreadStartId78V3& data);
    public void SetThreadStartId79V4(int index, SystemData& systemData, ThreadStartId79V4& data);
    public void SetThreadCSwitchId80V1(int index, SystemData& systemData, ThreadCSwitchId80V1& data);
    public void SetThreadCSwitchId81V2(int index, SystemData& systemData, ThreadCSwitchId81V2& data);
    public void SetThreadCSwitchId82V3(int index, SystemData& systemData, ThreadCSwitchId82V3& data);
    public void SetThreadCSwitchId83V4(int index, SystemData& systemData, ThreadCSwitchId83V4& data);
    public void SetThreadReadyThreadId84V2(int index, SystemData& systemData, ThreadReadyThreadId84V2& data);
    public void SetFileIoNameId15(int index, SystemData& systemData, FileIoNameId15& data);
    public void SetFileIoNameId16V1(int index, SystemData& systemData, FileIoNameId16V1& data);
    public void SetFileIoNameId17V2(int index, SystemData& systemData, FileIoNameId17V2& data);
    public void SetFileIoNameId18V3(int index, SystemData& systemData, FileIoNameId18V3& data);
    public void SetFileIoFileCreateId19V1(int index, SystemData& systemData, FileIoFileCreateId19V1& data);
    public void SetFileIoFileCreateId20V2(int index, SystemData& systemData, FileIoFileCreateId20V2& data);
    public void SetFileIoFileCreateId21V3(int index, SystemData& systemData, FileIoFileCreateId21V3& data);
    public void SetFileIoCleanupId22V2(int index, SystemData& systemData, FileIoCleanupId22V2& data);
    public void SetFileIoCleanupId23V3(int index, SystemData& systemData, FileIoCleanupId23V3& data);
    public void SetFileIoCloseId24V2(int index, SystemData& systemData, FileIoCloseId24V2& data);
    public void SetFileIoCloseId25V3(int index, SystemData& systemData, FileIoCloseId25V3& data);
    public void SetFileIoCreateId26V2(int index, SystemData& systemData, FileIoCreateId26V2& data);
    public void SetFileIoCreateId27V3(int index, SystemData& systemData, FileIoCreateId27V3& data);
    public void SetFileIoFileDeleteId28V2(int index, SystemData& systemData, FileIoFileDeleteId28V2& data);
    public void SetFileIoFileDeleteId29V3(int index, SystemData& systemData, FileIoFileDeleteId29V3& data);
    public void SetFileIoFileRundownId30V2(int index, SystemData& systemData, FileIoFileRundownId30V2& data);
    public void SetFileIoFileRundownId31V3(int index, SystemData& systemData, FileIoFileRundownId31V3& data);
    public void SetFileIoFlushId32V2(int index, SystemData& systemData, FileIoFlushId32V2& data);
    public void SetFileIoFlushId33V3(int index, SystemData& systemData, FileIoFlushId33V3& data);
    public void SetFileIoOperationEndId34V2(int index, SystemData& systemData, FileIoOperationEndId34V2& data);
    public void SetFileIoOperationEndId35V3(int index, SystemData& systemData, FileIoOperationEndId35V3& data);
    public void SetFileIoReadId36V2(int index, SystemData& systemData, FileIoReadId36V2& data);
    public void SetFileIoReadId37V3(int index, SystemData& systemData, FileIoReadId37V3& data);
    public void SetFileIoWriteId38V2(int index, SystemData& systemData, FileIoWriteId38V2& data);
    public void SetFileIoWriteId39V3(int index, SystemData& systemData, FileIoWriteId39V3& data);
    public void SetDiskIoReadId1(int index, SystemData& systemData, DiskIoReadId1& data);
    public void SetDiskIoReadId2V1(int index, SystemData& systemData, DiskIoReadId2V1& data);
    public void SetDiskIoReadId3V2(int index, SystemData& systemData, DiskIoReadId3V2& data);
    public void SetDiskIoReadId4V3(int index, SystemData& systemData, DiskIoReadId4V3& data);
    public void SetDiskIoWriteId5(int index, SystemData& systemData, DiskIoWriteId5& data);
    public void SetDiskIoWriteId6V1(int index, SystemData& systemData, DiskIoWriteId6V1& data);
    public void SetDiskIoWriteId7V2(int index, SystemData& systemData, DiskIoWriteId7V2& data);
    public void SetDiskIoWriteId8V3(int index, SystemData& systemData, DiskIoWriteId8V3& data);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Capacity();
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.EventsBuffer/<Sort>d__165")]
public sealed virtual Task Sort(int count);
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.EventsBuffer/<Copy>d__166")]
public sealed virtual Task Copy(int sourceIndex, IBuffer other, int destinationIndex, int count);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoCleanupId22V2 : ValueType {
    public ulong IrpPtr;
    public ulong FileObject;
    public ulong FileKey;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoCleanupId22V2PTR32 : ValueType {
    public UInt32 IrpPtr;
    public UInt32 FileObject;
    public UInt32 FileKey;
    public static FileIoCleanupId22V2 ToPTR64(FileIoCleanupId22V2PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoCleanupId23V3 : ValueType {
    public ulong IrpPtr;
    public ulong FileObject;
    public ulong FileKey;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoCleanupId23V3PTR32 : ValueType {
    public UInt32 IrpPtr;
    public UInt32 FileObject;
    public UInt32 FileKey;
    public static FileIoCleanupId23V3 ToPTR64(FileIoCleanupId23V3PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoCloseId24V2 : ValueType {
    public ulong IrpPtr;
    public ulong FileObject;
    public ulong FileKey;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoCloseId24V2PTR32 : ValueType {
    public UInt32 IrpPtr;
    public UInt32 FileObject;
    public UInt32 FileKey;
    public static FileIoCloseId24V2 ToPTR64(FileIoCloseId24V2PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoCloseId25V3 : ValueType {
    public ulong IrpPtr;
    public ulong FileObject;
    public ulong FileKey;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoCloseId25V3PTR32 : ValueType {
    public UInt32 IrpPtr;
    public UInt32 FileObject;
    public UInt32 FileKey;
    public static FileIoCloseId25V3 ToPTR64(FileIoCloseId25V3PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoCreateId26V2 : ValueType {
    public ulong IrpPtr;
    public ulong FileObject;
    [NullableAttribute("1")]
public string OpenPath;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoCreateId26V2PTR32 : ValueType {
    public UInt32 IrpPtr;
    public UInt32 FileObject;
    [NullableAttribute("1")]
public string OpenPath;
    public static FileIoCreateId26V2 ToPTR64(FileIoCreateId26V2PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoCreateId27V3 : ValueType {
    public ulong IrpPtr;
    public ulong FileObject;
    [NullableAttribute("1")]
public string OpenPath;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoCreateId27V3PTR32 : ValueType {
    public UInt32 IrpPtr;
    public UInt32 FileObject;
    [NullableAttribute("1")]
public string OpenPath;
    public static FileIoCreateId27V3 ToPTR64(FileIoCreateId27V3PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoFileCreateId19V1 : ValueType {
    public ulong FileObject;
    [NullableAttribute("1")]
public string FileName;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoFileCreateId19V1PTR32 : ValueType {
    public UInt32 FileObject;
    [NullableAttribute("1")]
public string FileName;
    public static FileIoFileCreateId19V1 ToPTR64(FileIoFileCreateId19V1PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoFileCreateId20V2 : ValueType {
    public ulong FileObject;
    [NullableAttribute("1")]
public string FileName;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoFileCreateId20V2PTR32 : ValueType {
    public UInt32 FileObject;
    [NullableAttribute("1")]
public string FileName;
    public static FileIoFileCreateId20V2 ToPTR64(FileIoFileCreateId20V2PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoFileCreateId21V3 : ValueType {
    public ulong FileObject;
    [NullableAttribute("1")]
public string FileName;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoFileCreateId21V3PTR32 : ValueType {
    public UInt32 FileObject;
    [NullableAttribute("1")]
public string FileName;
    public static FileIoFileCreateId21V3 ToPTR64(FileIoFileCreateId21V3PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoFileDeleteId28V2 : ValueType {
    public ulong FileObject;
    [NullableAttribute("1")]
public string FileName;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoFileDeleteId28V2PTR32 : ValueType {
    public UInt32 FileObject;
    [NullableAttribute("1")]
public string FileName;
    public static FileIoFileDeleteId28V2 ToPTR64(FileIoFileDeleteId28V2PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoFileDeleteId29V3 : ValueType {
    public ulong FileObject;
    [NullableAttribute("1")]
public string FileName;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoFileDeleteId29V3PTR32 : ValueType {
    public UInt32 FileObject;
    [NullableAttribute("1")]
public string FileName;
    public static FileIoFileDeleteId29V3 ToPTR64(FileIoFileDeleteId29V3PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoFileRundownId30V2 : ValueType {
    public ulong FileObject;
    [NullableAttribute("1")]
public string FileName;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoFileRundownId30V2PTR32 : ValueType {
    public UInt32 FileObject;
    [NullableAttribute("1")]
public string FileName;
    public static FileIoFileRundownId30V2 ToPTR64(FileIoFileRundownId30V2PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoFileRundownId31V3 : ValueType {
    public ulong FileObject;
    [NullableAttribute("1")]
public string FileName;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoFileRundownId31V3PTR32 : ValueType {
    public UInt32 FileObject;
    [NullableAttribute("1")]
public string FileName;
    public static FileIoFileRundownId31V3 ToPTR64(FileIoFileRundownId31V3PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoFlushId32V2 : ValueType {
    public ulong IrpPtr;
    public ulong FileObject;
    public ulong FileKey;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoFlushId32V2PTR32 : ValueType {
    public UInt32 IrpPtr;
    public UInt32 FileObject;
    public UInt32 FileKey;
    public static FileIoFlushId32V2 ToPTR64(FileIoFlushId32V2PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoFlushId33V3 : ValueType {
    public ulong IrpPtr;
    public ulong FileObject;
    public ulong FileKey;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoFlushId33V3PTR32 : ValueType {
    public UInt32 IrpPtr;
    public UInt32 FileObject;
    public UInt32 FileKey;
    public static FileIoFlushId33V3 ToPTR64(FileIoFlushId33V3PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoNameId15 : ValueType {
    public ulong FileObject;
    [NullableAttribute("1")]
public string FileName;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoNameId15PTR32 : ValueType {
    public UInt32 FileObject;
    [NullableAttribute("1")]
public string FileName;
    public static FileIoNameId15 ToPTR64(FileIoNameId15PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoNameId16V1 : ValueType {
    public ulong FileObject;
    [NullableAttribute("1")]
public string FileName;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoNameId16V1PTR32 : ValueType {
    public UInt32 FileObject;
    [NullableAttribute("1")]
public string FileName;
    public static FileIoNameId16V1 ToPTR64(FileIoNameId16V1PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoNameId17V2 : ValueType {
    public ulong FileObject;
    [NullableAttribute("1")]
public string FileName;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoNameId17V2PTR32 : ValueType {
    public UInt32 FileObject;
    [NullableAttribute("1")]
public string FileName;
    public static FileIoNameId17V2 ToPTR64(FileIoNameId17V2PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoNameId18V3 : ValueType {
    public ulong FileObject;
    [NullableAttribute("1")]
public string FileName;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoNameId18V3PTR32 : ValueType {
    public UInt32 FileObject;
    [NullableAttribute("1")]
public string FileName;
    public static FileIoNameId18V3 ToPTR64(FileIoNameId18V3PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoOperationEndId34V2 : ValueType {
    public ulong IrpPtr;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoOperationEndId34V2PTR32 : ValueType {
    public UInt32 IrpPtr;
    public static FileIoOperationEndId34V2 ToPTR64(FileIoOperationEndId34V2PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoOperationEndId35V3 : ValueType {
    public ulong IrpPtr;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoOperationEndId35V3PTR32 : ValueType {
    public UInt32 IrpPtr;
    public static FileIoOperationEndId35V3 ToPTR64(FileIoOperationEndId35V3PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoReadId36V2 : ValueType {
    public ulong Offset;
    public ulong IrpPtr;
    public ulong FileObject;
    public ulong FileKey;
    public UInt32 IoSize;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoReadId36V2PTR32 : ValueType {
    public ulong Offset;
    public UInt32 IrpPtr;
    public UInt32 FileObject;
    public UInt32 FileKey;
    public UInt32 IoSize;
    public static FileIoReadId36V2 ToPTR64(FileIoReadId36V2PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoReadId37V3 : ValueType {
    public ulong Offset;
    public ulong IrpPtr;
    public ulong FileObject;
    public ulong FileKey;
    public UInt32 IoSize;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoReadId37V3PTR32 : ValueType {
    public ulong Offset;
    public UInt32 IrpPtr;
    public UInt32 FileObject;
    public UInt32 FileKey;
    public UInt32 IoSize;
    public static FileIoReadId37V3 ToPTR64(FileIoReadId37V3PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoWriteId38V2 : ValueType {
    public ulong Offset;
    public ulong IrpPtr;
    public ulong FileObject;
    public ulong FileKey;
    public UInt32 IoSize;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoWriteId38V2PTR32 : ValueType {
    public ulong Offset;
    public UInt32 IrpPtr;
    public UInt32 FileObject;
    public UInt32 FileKey;
    public UInt32 IoSize;
    public static FileIoWriteId38V2 ToPTR64(FileIoWriteId38V2PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoWriteId39V3 : ValueType {
    public ulong Offset;
    public ulong IrpPtr;
    public ulong FileObject;
    public ulong FileKey;
    public UInt32 IoSize;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.FileIoWriteId39V3PTR32 : ValueType {
    public ulong Offset;
    public UInt32 IrpPtr;
    public UInt32 FileObject;
    public UInt32 FileKey;
    public UInt32 IoSize;
    public static FileIoWriteId39V3 ToPTR64(FileIoWriteId39V3PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ParseIntoBuffer : object {
    private States myState;
    [NullableAttribute("2")]
private Byte[] myPartialBuffer;
    private int myPartialCount;
    private long myMaxEvents;
    private SystemData mySystemData;
    private int mySize;
    public ParseIntoBuffer(long maxEvents);
    [NullableContextAttribute("1")]
public sealed virtual bool ProcessPage(Byte[] bytes, int count, EventsBuffer output, int outStartIndex, Int32& outCount, Boolean& outSortedByTick);
    [NullableContextAttribute("1")]
public sealed virtual EventsBuffer CreateBuffer(int capacity);
    private void ThrowReadError(int position, int count);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.PerfInfoSampleProfId48V1 : ValueType {
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.PerfInfoSampleProfId49V2 : ValueType {
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ProcessDCStartId50 : ValueType {
    public ulong ProcessId;
    public ulong ParentId;
    [NullableAttribute("1")]
public string ImageFileName;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ProcessDCStartId50PTR32 : ValueType {
    public UInt32 ProcessId;
    public UInt32 ParentId;
    [NullableAttribute("1")]
public string ImageFileName;
    public static ProcessDCStartId50 ToPTR64(ProcessDCStartId50PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ProcessDCStartId51V1 : ValueType {
    public UInt32 ProcessId;
    public UInt32 ParentId;
    public int ExitStatus;
    [NullableAttribute("1")]
public string ImageFileName;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ProcessDCStartId52V2 : ValueType {
    public UInt32 ProcessId;
    public UInt32 ParentId;
    public int ExitStatus;
    public string ImageFileName;
    public string CommandLine;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ProcessDCStartId53V3 : ValueType {
    public UInt32 ProcessId;
    public UInt32 ParentId;
    public int ExitStatus;
    public string ImageFileName;
    public string CommandLine;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ProcessDCStartId54V4 : ValueType {
    public UInt32 ProcessId;
    public UInt32 ParentId;
    public int ExitStatus;
    public string ImageFileName;
    public string CommandLine;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ProcessEndId55 : ValueType {
    public ulong ProcessId;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ProcessEndId55PTR32 : ValueType {
    public UInt32 ProcessId;
    public static ProcessEndId55 ToPTR64(ProcessEndId55PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ProcessEndId56V1 : ValueType {
    public UInt32 ProcessId;
    public int ExitStatus;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ProcessEndId57V2 : ValueType {
    public UInt32 ProcessId;
    public int ExitStatus;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ProcessEndId58V3 : ValueType {
    public UInt32 ProcessId;
    public int ExitStatus;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ProcessEndId59V4 : ValueType {
    public UInt32 ProcessId;
    public int ExitStatus;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ProcessStartId60 : ValueType {
    public ulong ProcessId;
    public ulong ParentId;
    [NullableAttribute("1")]
public string ImageFileName;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ProcessStartId60PTR32 : ValueType {
    public UInt32 ProcessId;
    public UInt32 ParentId;
    [NullableAttribute("1")]
public string ImageFileName;
    public static ProcessStartId60 ToPTR64(ProcessStartId60PTR32 from);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ProcessStartId61V1 : ValueType {
    public UInt32 ProcessId;
    public UInt32 ParentId;
    public int ExitStatus;
    [NullableAttribute("1")]
public string ImageFileName;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ProcessStartId62V2 : ValueType {
    public UInt32 ProcessId;
    public UInt32 ParentId;
    public int ExitStatus;
    public string ImageFileName;
    public string CommandLine;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ProcessStartId63V3 : ValueType {
    public UInt32 ProcessId;
    public UInt32 ParentId;
    public int ExitStatus;
    public string ImageFileName;
    public string CommandLine;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ProcessStartId64V4 : ValueType {
    public UInt32 ProcessId;
    public UInt32 ParentId;
    public int ExitStatus;
    public string ImageFileName;
    public string CommandLine;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ThreadCSwitchId80V1 : ValueType {
    public byte CoreId;
    public UInt32 NewThreadId;
    public UInt32 OldThreadId;
    public sbyte OldThreadWaitReason;
    public sbyte OldThreadState;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ThreadCSwitchId81V2 : ValueType {
    public byte CoreId;
    public UInt32 NewThreadId;
    public UInt32 OldThreadId;
    public sbyte OldThreadWaitReason;
    public sbyte OldThreadState;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ThreadCSwitchId82V3 : ValueType {
    public byte CoreId;
    public UInt32 NewThreadId;
    public UInt32 OldThreadId;
    public sbyte OldThreadWaitReason;
    public sbyte OldThreadState;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ThreadCSwitchId83V4 : ValueType {
    public byte CoreId;
    public UInt32 NewThreadId;
    public UInt32 OldThreadId;
    public sbyte OldThreadWaitReason;
    public sbyte OldThreadState;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ThreadDCStartId65 : ValueType {
    public UInt32 ProcessId;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ThreadDCStartId66V1 : ValueType {
    public UInt32 ProcessId;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ThreadDCStartId67V2 : ValueType {
    public UInt32 ProcessId;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ThreadDCStartId68V3 : ValueType {
    public UInt32 ProcessId;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ThreadDCStartId69V4 : ValueType {
    public UInt32 ProcessId;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ThreadEndId70 : ValueType {
    public UInt32 ProcessId;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ThreadEndId71V1 : ValueType {
    public UInt32 ProcessId;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ThreadEndId72V2 : ValueType {
    public UInt32 ProcessId;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ThreadEndId73V3 : ValueType {
    public UInt32 ProcessId;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ThreadEndId74V4 : ValueType {
    public UInt32 ProcessId;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ThreadReadyThreadId84V2 : ValueType {
    public UInt32 TThreadId;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ThreadStartId75 : ValueType {
    public UInt32 ProcessId;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ThreadStartId76V1 : ValueType {
    public UInt32 ProcessId;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ThreadStartId77V2 : ValueType {
    public UInt32 ProcessId;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ThreadStartId78V3 : ValueType {
    public UInt32 ProcessId;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.MSNT_SystemTrace.V16.ThreadStartId79V4 : ValueType {
    public UInt32 ProcessId;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[LocalizableAttribute("False")]
public static class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.OdbcProvider.V16.Dump : object {
    [AsyncIteratorStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.OdbcProvider.V16.Dump/<Events>d__0")]
public static IAsyncEnumerable`1<ValueTuple`2<EventString[], int>> Events(ISnapshotStorage snapshotStorage, TimelineSectionTypes sectionType, Lifetime lifetime, TimePresenter timePresenter, Func`2<ulong, bool> acceptTick, Func`2<ThreadId, bool> acceptThreadId, Action`2<CallStackPtr, StringBuilder> forEachCallStack, IProgressIndicator controller, Action`3<EventsBuffer, int, StringBuilder> alterPresentation);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static StringBuilder DumpEvent(StringBuilder output, EventsBuffer buffer, int i, TimePresenter timePresenter, Action`2<CallStackPtr, StringBuilder> forEachCallStack);
}
public enum JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.OdbcProvider.V16.EventId : Enum {
    public byte value__;
    public static EventId StackWalk;
    public static EventId TextAId1;
    public static EventId TextWId2;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.OdbcProvider.V16.EventsBuffer : object {
    [CompilerGeneratedAttribute]
private UInt64[] <Tick>k__BackingField;
    public ThreadId[] ThreadId;
    public EventId[] EventId;
    public StackFlag[] StackFlag;
    public StackWalk[] StackWalk;
    public TextAId1[] TextAId1;
    public TextWId2[] TextWId2;
    [CompilerGeneratedAttribute]
private int <Capacity>k__BackingField;
    public UInt64[] Tick { get; private set; }
    public int Capacity { get; }
    public EventsBuffer(int count);
    [CompilerGeneratedAttribute]
public sealed virtual UInt64[] get_Tick();
    [CompilerGeneratedAttribute]
private void set_Tick(UInt64[] value);
    public void SetStackWalk(int index, SystemData& systemData, StackWalk& data);
    public void SetTextAId1(int index, SystemData& systemData, TextAId1& data);
    public void SetTextWId2(int index, SystemData& systemData, TextWId2& data);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Capacity();
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.OdbcProvider.V16.EventsBuffer/<Sort>d__17")]
public sealed virtual Task Sort(int count);
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.OdbcProvider.V16.EventsBuffer/<Copy>d__18")]
public sealed virtual Task Copy(int sourceIndex, IBuffer other, int destinationIndex, int count);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.OdbcProvider.V16.ParseIntoBuffer : object {
    private States myState;
    [NullableAttribute("2")]
private Byte[] myPartialBuffer;
    private int myPartialCount;
    private long myMaxEvents;
    private SystemData mySystemData;
    private int mySize;
    public ParseIntoBuffer(long maxEvents);
    [NullableContextAttribute("1")]
public sealed virtual bool ProcessPage(Byte[] bytes, int count, EventsBuffer output, int outStartIndex, Int32& outCount, Boolean& outSortedByTick);
    [NullableContextAttribute("1")]
public sealed virtual EventsBuffer CreateBuffer(int capacity);
    private void ThrowReadError(int position, int count);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.OdbcProvider.V16.TextAId1 : ValueType {
    [NullableAttribute("1")]
public string msgStr;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.OdbcProvider.V16.TextWId2 : ValueType {
    [NullableAttribute("1")]
public string msgStr;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[LocalizableAttribute("False")]
public static class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.ProfilerSessionDataProvider.Dump : object {
    [AsyncIteratorStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.ProfilerSessionDataProvider.Dump/<Events>d__0")]
public static IAsyncEnumerable`1<ValueTuple`2<EventString[], int>> Events(ISnapshotStorage snapshotStorage, TimelineSectionTypes sectionType, Lifetime lifetime, TimePresenter timePresenter, Func`2<ulong, bool> acceptTick, Func`2<ThreadId, bool> acceptThreadId, Action`2<CallStackPtr, StringBuilder> forEachCallStack, IProgressIndicator controller, Action`3<EventsBuffer, int, StringBuilder> alterPresentation);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static StringBuilder DumpEvent(StringBuilder output, EventsBuffer buffer, int i, TimePresenter timePresenter, Action`2<CallStackPtr, StringBuilder> forEachCallStack);
}
public enum JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.ProfilerSessionDataProvider.EventId : Enum {
    public byte value__;
    public static EventId StackWalk;
    public static EventId SessionStartId1;
    public static EventId SessionInterruptedId2;
    public static EventId SessionStopId3;
    public static EventId MainThreadId4;
    public static EventId ThreadNameId5;
    public static EventId ThreadRootId6;
    public static EventId LogReportId7;
    public static EventId LostEventsBeginId8;
    public static EventId LostEventsEndId9;
    public static EventId ProviderInUseId10;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.ProfilerSessionDataProvider.EventsBuffer : object {
    [CompilerGeneratedAttribute]
private UInt64[] <Tick>k__BackingField;
    public ThreadId[] ThreadId;
    public EventId[] EventId;
    public StackFlag[] StackFlag;
    public StackWalk[] StackWalk;
    public SessionStartId1[] SessionStartId1;
    public SessionInterruptedId2[] SessionInterruptedId2;
    public SessionStopId3[] SessionStopId3;
    public MainThreadId4[] MainThreadId4;
    public ThreadNameId5[] ThreadNameId5;
    public ThreadRootId6[] ThreadRootId6;
    public LogReportId7[] LogReportId7;
    public LostEventsBeginId8[] LostEventsBeginId8;
    public LostEventsEndId9[] LostEventsEndId9;
    public ProviderInUseId10[] ProviderInUseId10;
    [CompilerGeneratedAttribute]
private int <Capacity>k__BackingField;
    public UInt64[] Tick { get; private set; }
    public int Capacity { get; }
    public EventsBuffer(int count);
    [CompilerGeneratedAttribute]
public sealed virtual UInt64[] get_Tick();
    [CompilerGeneratedAttribute]
private void set_Tick(UInt64[] value);
    public void SetStackWalk(int index, SystemData& systemData, StackWalk& data);
    public void SetSessionStartId1(int index, SystemData& systemData, SessionStartId1& data);
    public void SetSessionInterruptedId2(int index, SystemData& systemData, SessionInterruptedId2& data);
    public void SetSessionStopId3(int index, SystemData& systemData, SessionStopId3& data);
    public void SetMainThreadId4(int index, SystemData& systemData, MainThreadId4& data);
    public void SetThreadNameId5(int index, SystemData& systemData, ThreadNameId5& data);
    public void SetThreadRootId6(int index, SystemData& systemData, ThreadRootId6& data);
    public void SetLogReportId7(int index, SystemData& systemData, LogReportId7& data);
    public void SetLostEventsBeginId8(int index, SystemData& systemData, LostEventsBeginId8& data);
    public void SetLostEventsEndId9(int index, SystemData& systemData, LostEventsEndId9& data);
    public void SetProviderInUseId10(int index, SystemData& systemData, ProviderInUseId10& data);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Capacity();
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.ProfilerSessionDataProvider.EventsBuffer/<Sort>d__33")]
public sealed virtual Task Sort(int count);
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.ProfilerSessionDataProvider.EventsBuffer/<Copy>d__34")]
public sealed virtual Task Copy(int sourceIndex, IBuffer other, int destinationIndex, int count);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.ProfilerSessionDataProvider.LogReportId7 : ValueType {
    public byte Severity;
    [NullableAttribute("1")]
public string Message;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.ProfilerSessionDataProvider.LostEventsBeginId8 : ValueType {
    public ulong Number;
    [NullableAttribute("1")]
public string SessionName;
    public ulong Tick;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.ProfilerSessionDataProvider.LostEventsEndId9 : ValueType {
    public ulong Number;
    [NullableAttribute("1")]
public string SessionName;
    public ulong Tick;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.ProfilerSessionDataProvider.MainThreadId4 : ValueType {
    public UInt32 ThreadId;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.ProfilerSessionDataProvider.ParseIntoBuffer : object {
    private States myState;
    [NullableAttribute("2")]
private Byte[] myPartialBuffer;
    private int myPartialCount;
    private long myMaxEvents;
    private SystemData mySystemData;
    private int mySize;
    public ParseIntoBuffer(long maxEvents);
    [NullableContextAttribute("1")]
public sealed virtual bool ProcessPage(Byte[] bytes, int count, EventsBuffer output, int outStartIndex, Int32& outCount, Boolean& outSortedByTick);
    [NullableContextAttribute("1")]
public sealed virtual EventsBuffer CreateBuffer(int capacity);
    private void ThrowReadError(int position, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.ProfilerSessionDataProvider.ProviderInUseId10 : ValueType {
    public string ProviderName;
    public UInt32 ProcessId;
    public string SessionName;
    public string ProcessName;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.ProfilerSessionDataProvider.SessionInterruptedId2 : ValueType {
    public string SessionName;
    public UInt32 ProcessId;
    public string ProcessName;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.ProfilerSessionDataProvider.SessionStartId1 : ValueType {
    public UInt32 ProcessId;
    public ulong TimerResolution;
    public ulong Tick;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.ProfilerSessionDataProvider.SessionStopId3 : ValueType {
    public ulong Tick;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.ProfilerSessionDataProvider.ThreadNameId5 : ValueType {
    [NullableAttribute("1")]
public string Name;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.ProfilerSessionDataProvider.ThreadRootId6 : ValueType {
    public UInt32 Key;
    public ulong TimeStamp;
}
public enum JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.Providers.TPL.CausalitySynchronousWork : Enum {
    public int value__;
    public static CausalitySynchronousWork CompletionNotification;
    public static CausalitySynchronousWork ProgressNotification;
    public static CausalitySynchronousWork Execution;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[LocalizableAttribute("False")]
public static class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.SampleProvider.V16.Dump : object {
    [AsyncIteratorStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.SampleProvider.V16.Dump/<Events>d__0")]
public static IAsyncEnumerable`1<ValueTuple`2<EventString[], int>> Events(ISnapshotStorage snapshotStorage, TimelineSectionTypes sectionType, Lifetime lifetime, TimePresenter timePresenter, Func`2<ulong, bool> acceptTick, Func`2<ThreadId, bool> acceptThreadId, Action`2<CallStackPtr, StringBuilder> forEachCallStack, IProgressIndicator controller, Action`3<EventsBuffer, int, StringBuilder> alterPresentation);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static StringBuilder DumpEvent(StringBuilder output, EventsBuffer buffer, int i, TimePresenter timePresenter, Action`2<CallStackPtr, StringBuilder> forEachCallStack);
}
public enum JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.SampleProvider.V16.EventId : Enum {
    public byte value__;
    public static EventId StackWalk;
    public static EventId ThreadStartId1;
    public static EventId ThreadStopId2;
    public static EventId ThreadSampleId3;
    public static EventId ThreadSampleWithTypeId4;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.SampleProvider.V16.EventsBuffer : object {
    [CompilerGeneratedAttribute]
private UInt64[] <Tick>k__BackingField;
    public ThreadId[] ThreadId;
    public EventId[] EventId;
    public StackFlag[] StackFlag;
    public StackWalk[] StackWalk;
    public ThreadStartId1[] ThreadStartId1;
    public ThreadStopId2[] ThreadStopId2;
    public ThreadSampleId3[] ThreadSampleId3;
    public ThreadSampleWithTypeId4[] ThreadSampleWithTypeId4;
    [CompilerGeneratedAttribute]
private int <Capacity>k__BackingField;
    public UInt64[] Tick { get; private set; }
    public int Capacity { get; }
    public EventsBuffer(int count);
    [CompilerGeneratedAttribute]
public sealed virtual UInt64[] get_Tick();
    [CompilerGeneratedAttribute]
private void set_Tick(UInt64[] value);
    public void SetStackWalk(int index, SystemData& systemData, StackWalk& data);
    public void SetThreadStartId1(int index, SystemData& systemData, ThreadStartId1& data);
    public void SetThreadStopId2(int index, SystemData& systemData, ThreadStopId2& data);
    public void SetThreadSampleId3(int index, SystemData& systemData, ThreadSampleId3& data);
    public void SetThreadSampleWithTypeId4(int index, SystemData& systemData, ThreadSampleWithTypeId4& data);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Capacity();
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.SampleProvider.V16.EventsBuffer/<Sort>d__21")]
public sealed virtual Task Sort(int count);
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.SampleProvider.V16.EventsBuffer/<Copy>d__22")]
public sealed virtual Task Copy(int sourceIndex, IBuffer other, int destinationIndex, int count);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.SampleProvider.V16.ParseIntoBuffer : object {
    private States myState;
    [NullableAttribute("2")]
private Byte[] myPartialBuffer;
    private int myPartialCount;
    private long myMaxEvents;
    private SystemData mySystemData;
    public ParseIntoBuffer(long maxEvents);
    [NullableContextAttribute("1")]
public sealed virtual bool ProcessPage(Byte[] bytes, int count, EventsBuffer output, int outStartIndex, Int32& outCount, Boolean& outSortedByTick);
    [NullableContextAttribute("1")]
public sealed virtual EventsBuffer CreateBuffer(int capacity);
    private void ThrowReadError(int position, int count);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.SampleProvider.V16.ThreadSampleId3 : ValueType {
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.SampleProvider.V16.ThreadSampleWithTypeId4 : ValueType {
    public byte SampleType;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.SampleProvider.V16.ThreadStartId1 : ValueType {
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.SampleProvider.V16.ThreadStopId2 : ValueType {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[LocalizableAttribute("False")]
public static class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.SqlProvider.V16.Dump : object {
    [AsyncIteratorStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.SqlProvider.V16.Dump/<Events>d__0")]
public static IAsyncEnumerable`1<ValueTuple`2<EventString[], int>> Events(ISnapshotStorage snapshotStorage, TimelineSectionTypes sectionType, Lifetime lifetime, TimePresenter timePresenter, Func`2<ulong, bool> acceptTick, Func`2<ThreadId, bool> acceptThreadId, Action`2<CallStackPtr, StringBuilder> forEachCallStack, IProgressIndicator controller, Action`3<EventsBuffer, int, StringBuilder> alterPresentation);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static StringBuilder DumpEvent(StringBuilder output, EventsBuffer buffer, int i, TimePresenter timePresenter, Action`2<CallStackPtr, StringBuilder> forEachCallStack);
}
public enum JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.SqlProvider.V16.EventId : Enum {
    public byte value__;
    public static EventId StackWalk;
    public static EventId TextAId1;
    public static EventId TextWId2;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.SqlProvider.V16.EventsBuffer : object {
    [CompilerGeneratedAttribute]
private UInt64[] <Tick>k__BackingField;
    public ThreadId[] ThreadId;
    public EventId[] EventId;
    public StackFlag[] StackFlag;
    public StackWalk[] StackWalk;
    public TextAId1[] TextAId1;
    public TextWId2[] TextWId2;
    [CompilerGeneratedAttribute]
private int <Capacity>k__BackingField;
    public UInt64[] Tick { get; private set; }
    public int Capacity { get; }
    public EventsBuffer(int count);
    [CompilerGeneratedAttribute]
public sealed virtual UInt64[] get_Tick();
    [CompilerGeneratedAttribute]
private void set_Tick(UInt64[] value);
    public void SetStackWalk(int index, SystemData& systemData, StackWalk& data);
    public void SetTextAId1(int index, SystemData& systemData, TextAId1& data);
    public void SetTextWId2(int index, SystemData& systemData, TextWId2& data);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Capacity();
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.SqlProvider.V16.EventsBuffer/<Sort>d__17")]
public sealed virtual Task Sort(int count);
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.SqlProvider.V16.EventsBuffer/<Copy>d__18")]
public sealed virtual Task Copy(int sourceIndex, IBuffer other, int destinationIndex, int count);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.SqlProvider.V16.ParseIntoBuffer : object {
    private States myState;
    [NullableAttribute("2")]
private Byte[] myPartialBuffer;
    private int myPartialCount;
    private long myMaxEvents;
    private SystemData mySystemData;
    private int mySize;
    public ParseIntoBuffer(long maxEvents);
    [NullableContextAttribute("1")]
public sealed virtual bool ProcessPage(Byte[] bytes, int count, EventsBuffer output, int outStartIndex, Int32& outCount, Boolean& outSortedByTick);
    [NullableContextAttribute("1")]
public sealed virtual EventsBuffer CreateBuffer(int capacity);
    private void ThrowReadError(int position, int count);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.SqlProvider.V16.TextAId1 : ValueType {
    [NullableAttribute("1")]
public string msgStr;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.SqlProvider.V16.TextWId2 : ValueType {
    [NullableAttribute("1")]
public string msgStr;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.StackWalk : ValueType {
    public ulong TargetTimeStamp;
    public UInt32 CallTreePtr;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.StringUtils : object {
    public static string ReadUnicodeStringUntilNullOrEnd(Byte[] source, Int32& sourcePos, int maxCount);
    public static string ReadAnsiStringUntilNullOrEnd(Byte[] source, Int32& sourcePos, int maxCount);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[LocalizableAttribute("False")]
public static class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.System_Threading_Tasks_TplEventSource.V16.Dump : object {
    [AsyncIteratorStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.System_Threading_Tasks_TplEventSource.V16.Dump/<Events>d__0")]
public static IAsyncEnumerable`1<ValueTuple`2<EventString[], int>> Events(ISnapshotStorage snapshotStorage, TimelineSectionTypes sectionType, Lifetime lifetime, TimePresenter timePresenter, Func`2<ulong, bool> acceptTick, Func`2<ThreadId, bool> acceptThreadId, Action`2<CallStackPtr, StringBuilder> forEachCallStack, IProgressIndicator controller, Action`3<EventsBuffer, int, StringBuilder> alterPresentation);
    [ExtensionAttribute]
[UsedImplicitlyAttribute]
public static StringBuilder DumpEvent(StringBuilder output, EventsBuffer buffer, int i, TimePresenter timePresenter, Action`2<CallStackPtr, StringBuilder> forEachCallStack);
}
public enum JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.System_Threading_Tasks_TplEventSource.V16.EventId : Enum {
    public byte value__;
    public static EventId StackWalk;
    public static EventId TaskWaitSendId2V3;
    public static EventId TraceOperationBeginId3V1;
    public static EventId TraceOperationEndId4V1;
    public static EventId TraceSynchronousWorkBeginId5V1;
    public static EventId TraceSynchronousWorkEndId6V1;
    public static EventId TaskScheduledSendId1V1;
    public static EventId TaskScheduledSendId7V1;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.System_Threading_Tasks_TplEventSource.V16.EventsBuffer : object {
    [CompilerGeneratedAttribute]
private UInt64[] <Tick>k__BackingField;
    public ThreadId[] ThreadId;
    public EventId[] EventId;
    public StackFlag[] StackFlag;
    public StackWalk[] StackWalk;
    public TaskWaitSendId2V3[] TaskWaitSendId2V3;
    public TraceOperationBeginId3V1[] TraceOperationBeginId3V1;
    public TraceOperationEndId4V1[] TraceOperationEndId4V1;
    public TraceSynchronousWorkBeginId5V1[] TraceSynchronousWorkBeginId5V1;
    public TraceSynchronousWorkEndId6V1[] TraceSynchronousWorkEndId6V1;
    public TaskScheduledSendId1V1[] TaskScheduledSendId1V1;
    public TaskScheduledSendId7V1[] TaskScheduledSendId7V1;
    [CompilerGeneratedAttribute]
private int <Capacity>k__BackingField;
    public UInt64[] Tick { get; private set; }
    public int Capacity { get; }
    public EventsBuffer(int count);
    [CompilerGeneratedAttribute]
public sealed virtual UInt64[] get_Tick();
    [CompilerGeneratedAttribute]
private void set_Tick(UInt64[] value);
    public void SetStackWalk(int index, SystemData& systemData, StackWalk& data);
    public void SetTaskWaitSendId2V3(int index, SystemData& systemData, TaskWaitSendId2V3& data);
    public void SetTraceOperationBeginId3V1(int index, SystemData& systemData, TraceOperationBeginId3V1& data);
    public void SetTraceOperationEndId4V1(int index, SystemData& systemData, TraceOperationEndId4V1& data);
    public void SetTraceSynchronousWorkBeginId5V1(int index, SystemData& systemData, TraceSynchronousWorkBeginId5V1& data);
    public void SetTraceSynchronousWorkEndId6V1(int index, SystemData& systemData, TraceSynchronousWorkEndId6V1& data);
    public void SetTaskScheduledSendId1V1(int index, SystemData& systemData, TaskScheduledSendId1V1& data);
    public void SetTaskScheduledSendId7V1(int index, SystemData& systemData, TaskScheduledSendId7V1& data);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Capacity();
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.System_Threading_Tasks_TplEventSource.V16.EventsBuffer/<Sort>d__27")]
public sealed virtual Task Sort(int count);
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.System_Threading_Tasks_TplEventSource.V16.EventsBuffer/<Copy>d__28")]
public sealed virtual Task Copy(int sourceIndex, IBuffer other, int destinationIndex, int count);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.System_Threading_Tasks_TplEventSource.V16.ParseIntoBuffer : object {
    private States myState;
    [NullableAttribute("2")]
private Byte[] myPartialBuffer;
    private int myPartialCount;
    private long myMaxEvents;
    private SystemData mySystemData;
    private int mySize;
    public ParseIntoBuffer(long maxEvents);
    [NullableContextAttribute("1")]
public sealed virtual bool ProcessPage(Byte[] bytes, int count, EventsBuffer output, int outStartIndex, Int32& outCount, Boolean& outSortedByTick);
    [NullableContextAttribute("1")]
public sealed virtual EventsBuffer CreateBuffer(int capacity);
    private void ThrowReadError(int position, int count);
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.System_Threading_Tasks_TplEventSource.V16.TaskScheduledSendId1V1 : ValueType {
    public int TaskID;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.System_Threading_Tasks_TplEventSource.V16.TaskScheduledSendId7V1 : ValueType {
    public int OriginatingTaskID;
    public int TaskID;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.System_Threading_Tasks_TplEventSource.V16.TaskWaitSendId2V3 : ValueType {
    public int TaskID;
    public int ContinueWithTaskID;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.System_Threading_Tasks_TplEventSource.V16.TraceOperationBeginId3V1 : ValueType {
    public int TaskID;
    [NullableAttribute("1")]
public string OperationName;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.System_Threading_Tasks_TplEventSource.V16.TraceOperationEndId4V1 : ValueType {
    public int TaskID;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.System_Threading_Tasks_TplEventSource.V16.TraceSynchronousWorkBeginId5V1 : ValueType {
    public int TaskID;
    public UInt32 Work;
}
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.System_Threading_Tasks_TplEventSource.V16.TraceSynchronousWorkEndId6V1 : ValueType {
    public UInt32 Work;
}
[IsReadOnlyAttribute]
public class JetBrains.Timeline.EventLog.Converter.Events.ManifestBased.ValueAndIndex`1 : ValueType {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    public T Value { get; public set; }
    public int Index { get; public set; }
    public ValueAndIndex`1(T Value, int Index);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Value(T value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Index(int value);
    public sealed virtual int CompareTo(ValueAndIndex`1<T> other);
    public sealed virtual int CompareTo(object obj);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ValueAndIndex`1<T> left, ValueAndIndex`1<T> right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ValueAndIndex`1<T> left, ValueAndIndex`1<T> right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ValueAndIndex`1<T> other);
    [CompilerGeneratedAttribute]
public void Deconstruct(T& Value, Int32& Index);
}
public enum JetBrains.Timeline.EventLog.Converter.Events.StackFlag : Enum {
    public byte value__;
    public static StackFlag ImmediateStack;
    public static StackFlag DeferredStack;
    public static StackFlag NoStack;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.Timeline.EventLog.Converter.Events.StreamPrefetchEx : object {
    public static int DefaultPageSize;
    private static bool FetchPage(Stream stream, Page[] bufferPool, int pageNo, Byte[] buffer, int pageSize, CancellationToken lifetime);
    [ExtensionAttribute]
public static ValueTuple`2<long, Stopwatch> ReadFileStreamWithPrefetchSync(Stream fileStream, Lifetime lifetime, Func`3<Byte[], int, bool> processPage);
    [AsyncStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.StreamPrefetchEx/<ReadFileStreamWithPrefetch>d__5")]
[ExtensionAttribute]
public static Task`1<ValueTuple`2<long, Stopwatch>> ReadFileStreamWithPrefetch(Stream fileStream, Lifetime lifetime, Func`3<Byte[], int, bool> processPage, int pageSize, ArrayPool`1<byte> arrayPool);
    [AsyncIteratorStateMachineAttribute("JetBrains.Timeline.EventLog.Converter.Events.StreamPrefetchEx/<ReadStreamWithPrefetchAsync>d__6")]
[ExtensionAttribute]
public static IAsyncEnumerable`1<ValueTuple`2<Byte[], int>> ReadStreamWithPrefetchAsync(Stream fileStream, int pageSize, ArrayPool`1<byte> arrayPool, CancellationToken lifetime);
}
public class JetBrains.Timeline.EventLog.Converter.Events.SystemData : ValueType {
    public ulong Tick;
    public UInt32 ThreadId;
    public ushort EventIdAndStackFlag;
    public ushort EventId { get; public set; }
    public StackFlag StackFlag { get; }
    public ushort get_EventId();
    public void set_EventId(ushort value);
    public StackFlag get_StackFlag();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(SystemData left, SystemData right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(SystemData left, SystemData right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(SystemData other);
}
public static class JetBrains.Timeline.EventLog.Converter.EventsReflection : object {
    private static FileDescriptor descriptor;
    public static FileDescriptor Descriptor { get; }
    private static EventsReflection();
    public static FileDescriptor get_Descriptor();
}
public static class JetBrains.Timeline.EventLog.Converter.ProtobufSectionsEx : object {
    [NullableContextAttribute("1")]
public static IEnumerable`1<Event> GetEvents(Stream stream);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
