[IsReadOnlyAttribute]
[DataContractAttribute]
public class JetBrains.DotTrace.Common.DalInterface.CallTree.ThreadName : ValueType {
    [DataMemberAttribute]
public UInt32 Id;
    [DataMemberAttribute]
public string Name;
    public ThreadName(UInt32 id, string name);
    public sealed virtual bool Equals(ThreadName other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(ThreadName other);
}
public class JetBrains.DotTrace.DataStructures.BuildScript.ConstantsDotTrace : object {
    public static string Edition;
    public static string DotTraceShellHostShortName;
    public static string DotTraceShellPresentableName;
    public static string DotTraceVSPresentableName;
    public static string DotTraceViewHostShortName;
    public static string DotTraceViewPresentableName;
    public static string DotTraceViewDocumentExtension;
    public static string DotTraceViewDialogDescription;
    public static string TimelineAvaloniaViewHostShortName;
    public static string TimelineViewHostShortName;
    public static string TimelineViewPresentableName;
    public static string TimelineViewDocumentExtension;
    public static string DotTraceFileAssociationDescription;
    public static string TimelineViewDialogDescription;
    public static string NettraceViewDocumentExtension;
    public static string NettraceViewDialogDescription;
    public static string DotTraceTmpDocumentExtension;
    public static string DotTraceTmpDocumentDescription;
    public static string VsPluginProductDetails;
    public static string RiderPluginProductDetails;
    public static string RiderPluginProductTechnicalName;
    public static string AzProductDetails;
    public static string ProductDetails;
    public static string ProductUrl;
    public static string ProductTwitterUrl;
    public static string ProductPurchaseUrl;
    public static string ProductUrlEvaluate;
    public static string ProductUrlEvaluateEap;
    public static string ProductHelpUrl;
    public static string PreferredProductHelpUrlArgumentValue;
    public static JetSemanticVersion Version;
    private static ConstantsDotTrace();
}
public class JetBrains.DotTrace.DataStructures.BuildScript.DotTraceClipartHelpers : object {
    private static string ClipartRelativePath;
    private static FileSystemPath GetClipartDir(SubplatformOnSources subplatform, FileSystemPath productHomeDir);
    public static ByteArrayIconGroup GetIcon(SubplatformOnSources subplatform, FileSystemPath productHomeDir, string icon);
    public static FileSystemPath GetClipartFilePath(SubplatformOnSources subplatform, FileSystemPath productHomeDir, string icon);
    public static ImmutableByteStream GetSplash(SubplatformOnSources sub, FileSystemPath productHomeDir, bool isEap, string png);
}
public static class JetBrains.DotTrace.DataStructures.BuildScript.EmitRunConfigurationHelper : object {
    public static void GenerateRunConfiguration(ProductHomeDirArtifact productHomeDirArtifact, ProfileNameArtifact profile, string configurationName, string configurationFileName, string exeFileName);
}
public static class JetBrains.DotTrace.DataStructures.CallTree.Actions.ActionIds : object {
    public static int FindFunctionByName;
    public static int FoldUnfold;
    public static int OpenMethodWithoutUserChildren;
    public static int OpenAllMethodInstances;
    public static int OpenCurrentMethodInstance;
    public static int NavigateBack;
    public static int RestoreUserMethodsInCallTree;
    public static int UpdateSourceView;
    public static int OpenMergedHotspotSubtree;
    public static int NavigateForward;
    public static int NavigateHome;
    public static int MoveToTopThread;
    public static int MoveToTopSelectedThreads;
    public static int HideThread;
    public static int HideSelectedThreads;
    public static int HideAllThreadsInGroup;
    public static int HideAllExceptThisThread;
    public static int HideAllExceptSelectedThreads;
    public static int ClearThreadsSelection;
    public static int SelectOnlyThreadsInGroup;
    public static int CopyMethodSignature;
    public static int CopySubtree;
    public static int DoubleClickAndEnter;
    public static int ExcludeCurrentPath;
    public static int ToggleAggregateContinuations;
    public static int ToggleAggregateAwaits;
    public static int RestoreNode;
    public static int ScopeToAsync;
    public static int ExcludeMethod;
    public static int RestoreAll;
    public static int DumpDfsTree;
    public static int MarkAssemblyAsSystem;
    public static int DumpEventLog;
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DataStructures.CallTree.Actions.CallTreeCommandsExecutorHelpers : object {
    [ExtensionAttribute]
public static CurrentSelection GetCurrentCallTreeSelection(IDataContext context);
    [ExtensionAttribute]
public static Nullable`1<FunctionUIDm> GetSelectedFuid(IDataContext context);
    [ExtensionAttribute]
public static Nullable`1<bool> GetIsPrefixNode(IDataContext context);
    [ExtensionAttribute]
public static bool GetIsBacktrace(IDataContext context);
    [ExtensionAttribute]
private static Nullable`1<PayloadMode> GetOwnPayloadMode(IDataContext context);
    [ExtensionAttribute]
public static ICallTreeCommandsExecutor GetCallTreeCommandsExecutor(IDataContext context);
    [ExtensionAttribute]
public static ICallTreeFacade GetCallTree(IDataContext context);
    [ExtensionAttribute]
private static CallTreePath GetCallTreePathForMerging(IDataContext context);
    [ExtensionAttribute]
public static void MergeAllMethodInstances(IDataContext context);
    [ExtensionAttribute]
public static void ToggleAggregateContinuations(IDataContext context);
    [ExtensionAttribute]
public static void ToggleAggregateAwaits(IDataContext context);
    [ExtensionAttribute]
public static void WithCallTreeAndExecutor(IDataContext context, Action`2<ICallTreeFacade, ICallTreeCommandsExecutor> action);
    [ExtensionAttribute]
public static void WithExecutorAndFuid(IDataContext context, Action`2<ICallTreeCommandsExecutor, FunctionUIDm> action);
    [ExtensionAttribute]
public static bool WithExecutorAndFuid(IDataContext context, Func`4<ICallTreeCommandsExecutor, FunctionUIDm, bool, bool> action);
    [ExtensionAttribute]
public static bool WithCallTreeAndExecutor(IDataContext context, Func`3<ICallTreeFacade, ICallTreeCommandsExecutor, bool> action);
    [ExtensionAttribute]
public static void RestoreUserChildren(IDataContext context);
    [ExtensionAttribute]
public static bool CanRestoreUserChildren(IDataContext context);
    [ExtensionAttribute]
public static void OpenMethodsOwnTime(IDataContext context);
    [ExtensionAttribute]
public static bool IsOpenMethodsOwnTimeAvailable(IDataContext context);
    [ExtensionAttribute]
public static bool IsMergeMethodInstancesAvailable(IDataContext context);
    [ExtensionAttribute]
public static bool IsOpenCurrentMethodInstanceAvailable(IDataContext context);
    [ExtensionAttribute]
public static void OpenCurrentMethodInstance(IDataContext context);
}
public class JetBrains.DotTrace.DataStructures.CallTree.Actions.CurrentSelection : ValueType {
    public Nullable`1<FunctionUIDm> SelectedUid;
    public CurrentSelection(Nullable`1<FunctionUIDm> selectedUid);
}
public interface JetBrains.DotTrace.DataStructures.CallTree.Actions.IDoubleClickAndEnterLogic {
    public bool ShowActionInMenu { get; }
    public abstract virtual bool get_ShowActionInMenu();
    [CanBeNullAttribute]
public abstract virtual string GetActionText();
    public abstract virtual bool Available(CurrentSelection selection);
    public abstract virtual void Execute(IDataContext context);
}
public class JetBrains.DotTrace.DataStructures.CallTree.AddressInfo : ValueType {
    public ulong Value;
    public AddressInfo(ulong value);
}
public static class JetBrains.DotTrace.DataStructures.CallTree.Backend.CallTreeDataConstants : object {
    public static DataConstant`1<ICallTreeFacade> CallTreeModelFacade;
    public static DataConstant`1<ICallTreeNodeViewModel> TreeSelectedNode;
    public static DataConstant`1<CallTreePath> CallTreePathForMerging;
    public static DataConstant`1<string> SignatureToCopy;
    public static DataConstant`1<StructWrapper`1<FunctionUIDm>> SelectedFuid;
    public static DataConstant`1<NavigationPath> SourceCodeNavigationData;
    public static DataConstant`1<StructWrapper`1<bool>> IsBacktrace;
    public static DataConstant`1<NodeFoldingModifier> SelectedNodeFoldingModifier;
    public static DataConstant`1<StructWrapper`1<PayloadMode>> HotspotMode;
    public static DataConstant`1<StructWrapper`1<bool>> ContinuationsAggregationAvailable;
    public static DataConstant`1<StructWrapper`1<bool>> AwaitsAggregationAvailable;
    public static DataConstant`1<StructWrapper`1<bool>> IsPrefixNode;
    private static CallTreeDataConstants();
}
public class JetBrains.DotTrace.DataStructures.CallTree.Backend.CallTreeTransitionViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private CallTreeDirection <Direction>k__BackingField;
    public int Index { get; public set; }
    public int Length { get; public set; }
    public string Tooltip { get; public set; }
    public CallTreeDirection Direction { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(int value);
    [CompilerGeneratedAttribute]
public string get_Tooltip();
    [CompilerGeneratedAttribute]
public void set_Tooltip(string value);
    [CompilerGeneratedAttribute]
public CallTreeDirection get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(CallTreeDirection value);
}
public static class JetBrains.DotTrace.DataStructures.CallTree.Backend.FocusNextImportantCallDataConstants : object {
    public static DataConstant`1<IFocusNextImportantCallProvider> Instance;
    private static FocusNextImportantCallDataConstants();
}
public interface JetBrains.DotTrace.DataStructures.CallTree.Backend.ICallTree {
    public ITreeListStructureProvider`1<ICallTreeNodeViewModel> StructureProvider { get; }
    public bool IsBacktrace { get; }
    public IDataProvider`1<bool> IsEmpty { get; }
    public IDataProvider`1<ICallTreeNodeViewModel> SelectedNode { get; }
    public IDataProvider`1<IEnumerable`1<CallTreeTransitionViewModel>> Transitions { get; }
    public IDataProvider`1<CallTreePath> ModelSelection { get; }
    [NotNullAttribute]
public CallTreePath RootPrefix { get; }
    public abstract virtual ITreeListStructureProvider`1<ICallTreeNodeViewModel> get_StructureProvider();
    public abstract virtual bool get_IsBacktrace();
    public abstract virtual IDataProvider`1<bool> get_IsEmpty();
    public abstract virtual IDataProvider`1<ICallTreeNodeViewModel> get_SelectedNode();
    public abstract virtual IDataProvider`1<IEnumerable`1<CallTreeTransitionViewModel>> get_Transitions();
    public abstract virtual IDataProvider`1<CallTreePath> get_ModelSelection();
    public abstract virtual CallTreePath get_RootPrefix();
}
public interface JetBrains.DotTrace.DataStructures.CallTree.Backend.ICallTreeNodeViewModel {
    public NamePair NamePair { get; }
    public bool IsSystem { get; }
    public bool IsAuxiliary { get; }
    public bool IsPrefixNode { get; }
    [CanBeNullAttribute]
public object FormattedPayload { get; }
    public bool HasLoadedChildren { get; }
    public FunctionUIDm Fuid { get; }
    public bool IsAsync { get; }
    public bool IsSystemFolded { get; public set; }
    public bool IsSystemFoldable { get; }
    public bool IsRecursiveFolded { get; public set; }
    public bool IsRecursiveFoldable { get; }
    public bool ShowPercents { get; }
    public bool IsBacktrace { get; }
    public bool IsVisibleRoot { get; }
    public bool ShowPayload { get; }
    public bool IsStrokeOut { get; }
    public bool HasPayload { get; }
    public Percents Percents { get; }
    public bool RecursionHighlighting { get; }
    public IDataNotifier`1<bool> IsHighlighted { get; }
    public bool ShowExcludedPayload { get; }
    public object ExcludedPayload { get; }
    public double Intensity { get; }
    public abstract virtual NamePair get_NamePair();
    public abstract virtual bool get_IsSystem();
    public abstract virtual bool get_IsAuxiliary();
    public abstract virtual bool get_IsPrefixNode();
    public abstract virtual object get_FormattedPayload();
    public abstract virtual bool get_HasLoadedChildren();
    public abstract virtual FunctionUIDm get_Fuid();
    public abstract virtual bool get_IsAsync();
    public abstract virtual bool get_IsSystemFolded();
    public abstract virtual void set_IsSystemFolded(bool value);
    public abstract virtual bool get_IsSystemFoldable();
    public abstract virtual bool get_IsRecursiveFolded();
    public abstract virtual void set_IsRecursiveFolded(bool value);
    public abstract virtual bool get_IsRecursiveFoldable();
    public abstract virtual bool get_ShowPercents();
    public abstract virtual bool get_IsBacktrace();
    public abstract virtual bool get_IsVisibleRoot();
    public abstract virtual bool get_ShowPayload();
    public abstract virtual bool get_IsStrokeOut();
    public abstract virtual bool get_HasPayload();
    public abstract virtual Percents get_Percents();
    public abstract virtual bool get_RecursionHighlighting();
    public abstract virtual IDataNotifier`1<bool> get_IsHighlighted();
    public abstract virtual bool get_ShowExcludedPayload();
    public abstract virtual object get_ExcludedPayload();
    public abstract virtual double get_Intensity();
    public abstract virtual void FocusNextImportantCall();
}
public interface JetBrains.DotTrace.DataStructures.CallTree.Backend.ICallTreeViewModel {
    public IDataNotifier`1<ITreeListStructureProvider> TreeStructureProvider { get; }
    public IDataNotifier`1<bool> IsBacktrace { get; }
    public ICollectionNotifier`1<CallTreeTransitionViewModel> PrefixTransitionMarks { get; }
    public IDataNotifier`1<bool> HasPrefix { get; }
    public bool IsInPopup { get; }
    public abstract virtual IDataNotifier`1<ITreeListStructureProvider> get_TreeStructureProvider();
    public abstract virtual IDataNotifier`1<bool> get_IsBacktrace();
    public abstract virtual ICollectionNotifier`1<CallTreeTransitionViewModel> get_PrefixTransitionMarks();
    public abstract virtual IDataNotifier`1<bool> get_HasPrefix();
    public abstract virtual bool get_IsInPopup();
}
public interface JetBrains.DotTrace.DataStructures.CallTree.Backend.IFocusNextImportantCallProvider {
    public abstract virtual void FocusNextImportantCall();
    public abstract virtual bool IsFocusNextImportantCallAvailable();
}
public class JetBrains.DotTrace.DataStructures.CallTree.Backend.NodeFoldingModifier : object {
    private ICallTreeNodeViewModel myCallframe;
    public bool IsRecursiveFoldable { get; }
    public bool IsSystemFoldable { get; }
    public bool IsExpandable { get; }
    private NodeFoldingModifier(ICallTreeNodeViewModel callframe);
    public bool get_IsRecursiveFoldable();
    public bool get_IsSystemFoldable();
    public bool get_IsExpandable();
    public void ToggleSystemFolding();
    public void ToggleRecursiveFolding();
    public sealed virtual void FocusNextImportantCall();
    public sealed virtual bool IsFocusNextImportantCallAvailable();
    public static NodeFoldingModifier ForNode(ICallTreeNodeViewModel callframe);
}
public class JetBrains.DotTrace.DataStructures.CallTree.CallFrameInfo : ValueType {
    public CallFrameType Type;
    private ulong myData;
    private string myAddition1;
    private string myAddition2;
    private string myString1;
    private string myString2;
    private string myString3;
    public bool HasModuleUID { get; }
    public NativeFunctionInfo AsNativeFunction { get; }
    public ClrFunctionInfo AsClrFunction { get; }
    public ModulePath AsModuleInfo { get; }
    public ErrorInfo AsError { get; }
    public AddressInfo AsAddress { get; }
    public string AsSynthetic { get; }
    private CallFrameInfo(CallFrameType type, string string1, string string2, string string3, ulong data, string addition1, string addition2);
    public bool get_HasModuleUID();
    public NativeFunctionInfo get_AsNativeFunction();
    public ClrFunctionInfo get_AsClrFunction();
    public ModulePath get_AsModuleInfo();
    public ErrorInfo get_AsError();
    public AddressInfo get_AsAddress();
    public string get_AsSynthetic();
    public static CallFrameInfo NativeMethod(string name, string prettyName, ModuleUID moduleOffset);
    public static CallFrameInfo EtwMethod(string ns, string className, string methodName, ModuleUID moduleOffset);
    public static CallFrameInfo CoreMethod(string ns, string className, string methodName, ModuleUID moduleOffset, string isAsync, string isMoveNext);
    public static CallFrameInfo ModuleOnly(string path, ModuleUID moduleOffset);
    public static CallFrameInfo Error(string message, ulong fuid);
    public static CallFrameInfo Address(ulong address);
    public static CallFrameInfo Synthetic(string name, ulong fuid);
}
public enum JetBrains.DotTrace.DataStructures.CallTree.CallFrameType : Enum {
    public int value__;
    public static CallFrameType EtwFunction;
    public static CallFrameType CoreFunction;
    public static CallFrameType EtwNativeFunction;
    public static CallFrameType ModuleOnly;
    public static CallFrameType Error;
    public static CallFrameType Address;
    public static CallFrameType Synthetic;
}
public enum JetBrains.DotTrace.DataStructures.CallTree.CallTreeDirection : Enum {
    public int value__;
    public static CallTreeDirection Down;
    public static CallTreeDirection Up;
}
[DataContractAttribute]
public class JetBrains.DotTrace.DataStructures.CallTree.CallTreeNodeId : ValueType {
    [DataMemberAttribute]
public FunctionUIDm Fuid;
    [DataMemberAttribute]
public CallTreeDirection Direction;
    [DataMemberAttribute]
public CallTreeNodeMergeType MergeType;
    [DataMemberAttribute]
public bool AggregateContinuations;
    [DataMemberAttribute]
public bool AggregateAwaits;
    [DataMemberAttribute]
public bool IsParentRecursivelyFolded;
    [DataMemberAttribute]
public bool IsLogicalRoot;
    [DataMemberAttribute]
public PayloadMode PayloadMode;
    public static CallTreeNodeId Root;
    public bool IsParentSystemFolded { get; }
    private static CallTreeNodeId();
    public static CallTreeNodeId BuildFuidNode(FunctionUIDm fuid, CallTreeDirection direction);
    public CallTreeNodeId ChangeAggregateAwaits(bool aggregate);
    public CallTreeNodeId ChangeAggregateContinuations(bool aggregate);
    public bool get_IsParentSystemFolded();
    public sealed virtual bool Equals(CallTreeNodeId other);
    public sealed virtual int CompareTo(CallTreeNodeId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(CallTreeNodeId left, CallTreeNodeId right);
    public static bool op_Inequality(CallTreeNodeId left, CallTreeNodeId right);
    [LocalizableAttribute("False")]
public virtual string ToString();
    public CallTreeNodeId ToUserStateNodeId();
}
public class JetBrains.DotTrace.DataStructures.CallTree.CallTreeNodeIdInfo : object {
    public static ITreeKeyInfo`1<CallTreeNodeId> Instance;
    private static CallTreeNodeIdInfo();
    public sealed virtual CallTreeNodeId GetUserStateKey(CallTreeNodeId key);
    public sealed virtual bool IsRoot(CallTreeNodeId key);
}
public class JetBrains.DotTrace.DataStructures.CallTree.CallTreeNodeInfo`1 : object {
    private int myAbilities;
    private int myCurrentState;
    private int myDefaults;
    [CompilerGeneratedAttribute]
private double <Percents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStrokeOut>k__BackingField;
    [CompilerGeneratedAttribute]
private TPayload <Payload>k__BackingField;
    [CompilerGeneratedAttribute]
private TPayload <ExcludedPayload>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTaskRecursionFolded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    public bool IsSystem { get; }
    public bool IsExpandable { get; }
    public bool IsExpandedByDefault { get; }
    public bool IsSystemFoldable { get; }
    public bool IsSystemFolded { get; }
    public bool IsSystemFoldedByDefault { get; }
    public bool IsRecursiveFoldable { get; }
    public bool IsRecursiveFolded { get; }
    public bool IsRecursiveFoldedByDefault { get; }
    public double Percents { get; }
    public bool IsStrokeOut { get; }
    public TPayload Payload { get; }
    public TPayload ExcludedPayload { get; }
    public bool IsTaskRecursionFolded { get; }
    public bool IsAsync { get; private set; }
    public CallTreeNodeInfo`1(TPayload payload, TPayload excludedPayload, bool expandable, bool systemFoldable, bool recursiveFoldable, bool systemFolded, bool recursiveFolded, bool expandedByDefault, bool systemFoldedByDefault, bool recursiveFoldedByDefault, bool isSystem, double percents, bool isStrokeOut, bool isTaskRecursionFolded, bool isAsync);
    public static CallTreeNodeInfo`1<TPayload> CreateDefault();
    public bool get_IsSystem();
    public sealed virtual bool get_IsExpandable();
    public sealed virtual bool get_IsExpandedByDefault();
    public bool get_IsSystemFoldable();
    public bool get_IsSystemFolded();
    public bool get_IsSystemFoldedByDefault();
    public bool get_IsRecursiveFoldable();
    public bool get_IsRecursiveFolded();
    public bool get_IsRecursiveFoldedByDefault();
    [CompilerGeneratedAttribute]
public double get_Percents();
    [CompilerGeneratedAttribute]
public bool get_IsStrokeOut();
    [CompilerGeneratedAttribute]
public TPayload get_Payload();
    [CompilerGeneratedAttribute]
public TPayload get_ExcludedPayload();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsTaskRecursionFolded();
    [CompilerGeneratedAttribute]
public bool get_IsAsync();
    [CompilerGeneratedAttribute]
private void set_IsAsync(bool value);
}
public enum JetBrains.DotTrace.DataStructures.CallTree.CallTreeNodeMergeType : Enum {
    public int value__;
    public static CallTreeNodeMergeType NoMerge;
    public static CallTreeNodeMergeType MergeAllPaths;
    public static CallTreeNodeMergeType MergeSystemPaths;
}
[DataContractAttribute]
public class JetBrains.DotTrace.DataStructures.CallTree.CallTreeNodeUserState : object {
    [DataMemberAttribute]
private int myChangedState;
    [DataMemberAttribute]
private int myValues;
    public Nullable`1<bool> IsExpanded { get; public set; }
    public Nullable`1<bool> IsSystemFolded { get; public set; }
    public Nullable`1<bool> IsRecursiveFolded { get; public set; }
    public bool IsChanged { get; }
    public CallTreeNodeUserState(Nullable`1<bool> expanded, Nullable`1<bool> systemFolded, Nullable`1<bool> recursiveFolded);
    private Nullable`1<bool> GetState(int state);
    private void SetState(int state, Nullable`1<bool> value);
    public sealed virtual Nullable`1<bool> get_IsExpanded();
    public sealed virtual void set_IsExpanded(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsSystemFolded();
    public void set_IsSystemFolded(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsRecursiveFolded();
    public void set_IsRecursiveFolded(Nullable`1<bool> value);
    public sealed virtual bool get_IsChanged();
    [LocalizableAttribute("False")]
public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
[DataContractAttribute]
[JsonObjectAttribute]
public class JetBrains.DotTrace.DataStructures.CallTree.CallTreePath : object {
    [NotNullAttribute]
[DataMemberAttribute]
private CallTreeNodeId[] myItems;
    [NotNullAttribute]
public static CallTreePath RootPath;
    [JsonIgnoreAttribute]
public CallTreeNodeId LastNodeId { get; }
    [JsonIgnoreAttribute]
public int Length { get; }
    public CallTreeNodeId Item { get; }
    public CallTreePath(CallTreeNodeId[] items);
    private static CallTreePath();
    public sealed virtual IEnumerator`1<CallTreeNodeId> GetEnumerator();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(CallTreePath other);
    [LocalizableAttribute("False")]
public virtual string ToString();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override object System.ICloneable.Clone();
    [NotNullAttribute]
public CallTreePath ChangeLastNode(CallTreeNodeId item);
    [NotNullAttribute]
public CallTreePath ChangeLastNode(Func`2<CallTreeNodeId, CallTreeNodeId> rootModifier);
    public CallTreeNodeId get_LastNodeId();
    [NotNullAttribute]
public CallTreePath Append(CallTreeNodeId item);
    [NotNullAttribute]
public CallTreePath WithoutLastNode();
    public sealed virtual CallTreePath Clone();
    public sealed virtual bool Equals(CallTreePath other);
    public int get_Length();
    public CallTreeNodeId get_Item(int index);
    public static bool op_Equality(CallTreePath left, CallTreePath right);
    public static bool op_Inequality(CallTreePath left, CallTreePath right);
}
public class JetBrains.DotTrace.DataStructures.CallTree.CallTreePathItemState : object {
    public bool IsSystemFolded;
    public bool IsRecursiveFolded;
    public CallTreePathItemState(bool isSystemFolded, bool isRecursiveFolded);
    public sealed virtual bool Equals(CallTreePathItemState other);
    public sealed virtual CallTreePathItemState Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override object System.ICloneable.Clone();
}
public class JetBrains.DotTrace.DataStructures.CallTree.CallTreePathNodeInfo`1 : ValueType {
    public CallTreeNodeId Id;
    public PayloadType PayloadType;
    public bool IsSystem;
    public TPayload Payload;
}
public class JetBrains.DotTrace.DataStructures.CallTree.CallTreePayloads`2 : object {
    public PayloadType PayloadType;
    public IAccessor`1<PayloadGetter`2<T, TPayload>> TotalPayloadAccessor;
}
public class JetBrains.DotTrace.DataStructures.CallTree.CallTreePointerPair`1 : ValueType {
    public T NavigationPointer;
    public T PayloadPointer;
    public CallTreePointerPair`1(T payloadPointer, T navigationPointer);
    [LocalizableAttribute("False")]
public virtual string ToString();
}
[DataContractAttribute]
public class JetBrains.DotTrace.DataStructures.CallTree.CallTreeRootPrefix : object {
    [DataMemberAttribute]
public CallTreeDirection Direction;
    [NotNullAttribute]
[DataMemberAttribute]
public CallTreePath Path;
    public CallTreeNodeId LogicalRoot { get; }
    public bool IsBacktrace { get; }
    public CallTreeRootPrefix(CallTreePath path, CallTreeDirection direction);
    public CallTreeNodeId get_LogicalRoot();
    public bool get_IsBacktrace();
    public sealed virtual bool Equals(CallTreeRootPrefix other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DataStructures.CallTree.CallTreeRootPrefixEx : object {
    [ExtensionAttribute]
public static bool IsRoot(CallTreeRootPrefix prefix);
    [ExtensionAttribute]
public static bool IsRoot(CallTreePath path);
    [ExtensionAttribute]
public static bool IsRoot(CallTreeNodeId path);
    [ExtensionAttribute]
public static bool IsRoot(FunctionUIDm fuid);
    [ExtensionAttribute]
public static bool IsRootOrAllCalls(FunctionUIDm fuid);
}
[DataContractAttribute]
public class JetBrains.DotTrace.DataStructures.CallTree.CallTreeSelection : object {
    [NotNullAttribute]
private IDeferUpdateManager myUpdateManager;
    [DataMemberAttribute]
[NotNullAttribute]
private List`1<CallTreeNodeId> myPath;
    public CallTreeSelection(IDeferUpdateManager updateManager);
    public sealed virtual void UpdateSelection(IEnumerable`1<CallTreeNodeId> path);
    public sealed virtual IEnumerable`1<CallTreeNodeId> GetLastSelection();
    public sealed virtual bool Equals(CallTreeSelection other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.DotTrace.DataStructures.CallTree.CallTreeSelectionCreationConverter : CustomCreationConverter`1<CallTreeSelection> {
    private IDeferUpdateManager myUpdateManager;
    public CallTreeSelectionCreationConverter(IDeferUpdateManager updateManager);
    public virtual CallTreeSelection Create(Type objectType);
}
public class JetBrains.DotTrace.DataStructures.CallTree.CallTreeVisualState : object {
    [CompilerGeneratedAttribute]
private UserStateTreeData`2<CallTreeNodeId, CallTreeNodeUserState> <VisualStateRoot>k__BackingField;
    public UserStateTreeData`2<CallTreeNodeId, CallTreeNodeUserState> VisualStateRoot { get; }
    [CompilerGeneratedAttribute]
public UserStateTreeData`2<CallTreeNodeId, CallTreeNodeUserState> get_VisualStateRoot();
}
public class JetBrains.DotTrace.DataStructures.CallTree.ClrFunctionInfo : ValueType {
    [NotNullAttribute]
public string ClassName;
    [NotNullAttribute]
public string MethodName;
    [NotNullAttribute]
public string Namespace;
    [CanBeNullAttribute]
public string AsyncStateMachineTypeFullName;
    [CanBeNullAttribute]
public string MoveNextContainingTypeFullName;
    public bool IsAsync { get; }
    public bool IsMoveNext { get; }
    public ClrFunctionInfo(string ns, string className, string methodName, string asyncStateMachineTypeFullName, string moveNextContainingTypeFullName);
    public bool get_IsAsync();
    public bool get_IsMoveNext();
}
[IsReadOnlyAttribute]
public class JetBrains.DotTrace.DataStructures.CallTree.DotTraceFullPayload : ValueType {
    private static CallTreeFlags InvalidFlags;
    public static DotTraceFullPayload Invalid;
    public long PlusTotalTime;
    public long MinusTotalTime;
    public long PlusOwnTime;
    public long MinusOwnTime;
    public long PlusCallCount;
    public long MinusCallCount;
    public CallTreeFlags Flags;
    public long TotalTime { get; }
    public long OwnTime { get; }
    public long Calls { get; }
    public bool IsValid { get; }
    public bool MeasurePartly { get; }
    public bool IsZeroTimeAndCount { get; }
    public bool IsZeroTime { get; }
    private DotTraceFullPayload(long plusTotalTime, long minusTotalTime, long plusOwnTime, long minusOwnTime, long plusCallCount, long minusCallCount, CallTreeFlags flags);
    private static DotTraceFullPayload();
    public long get_TotalTime();
    public long get_OwnTime();
    public long get_Calls();
    public bool get_IsValid();
    public bool get_MeasurePartly();
    public sealed virtual bool Equals(DotTraceFullPayload other);
    public sealed virtual int CompareTo(DotTraceFullPayload other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool get_IsZeroTimeAndCount();
    public sealed virtual bool get_IsZeroTime();
    public sealed virtual DotTraceFullPayload AddPayload(DotTraceFullPayload o);
    public sealed virtual DotTraceFullPayload AddPayloadWithoutCallCounts(DotTraceFullPayload o);
    public sealed virtual DotTraceFullPayload SubtractPayload(DotTraceFullPayload o);
    public sealed virtual DotTraceFullPayload RemoveMinuses(DotTraceFullPayload minuses);
}
[IsReadOnlyAttribute]
public class JetBrains.DotTrace.DataStructures.CallTree.DotTracePayload : ValueType {
    public long PlusTime;
    public long MinusTime;
    public long PlusCallCount;
    public long MinusCallCount;
    private CallTreeFlags myFlags;
    private long TotalTime { get; }
    private long TotalCallCount { get; }
    public bool CallCountOverflow { get; }
    public bool CannotShowCounts { get; }
    public bool IsMeasuredPartly { get; }
    public bool IsZeroTimeAndCount { get; }
    public bool IsZeroTime { get; }
    public DotTracePayload(long time, UInt32 callCount, CallTreeFlags flags);
    internal DotTracePayload(long plusTime, long minusTime, long plusCallCount, long minusCallCount, CallTreeFlags flags);
    private long get_TotalTime();
    private long get_TotalCallCount();
    public bool get_CallCountOverflow();
    public bool get_CannotShowCounts();
    public bool get_IsMeasuredPartly();
    public static DotTracePayload CreateAverage(long plusAvgTime, long minusAvgTime);
    public sealed virtual int CompareTo(DotTracePayload other);
    public sealed virtual bool get_IsZeroTimeAndCount();
    public sealed virtual bool get_IsZeroTime();
    public sealed virtual DotTracePayload AddPayload(DotTracePayload o);
    public sealed virtual DotTracePayload AddPayloadWithoutCallCounts(DotTracePayload o);
    public sealed virtual DotTracePayload SubtractPayload(DotTracePayload o);
    public sealed virtual DotTracePayload RemoveMinuses(DotTracePayload minuses);
    [LocalizableAttribute("False")]
public virtual string ToString();
    public sealed virtual bool Equals(DotTracePayload other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DataStructures.CallTree.DotTracePayloadEx : object {
    [ExtensionAttribute]
public static DotTracePayload ToTotalTime(DotTraceFullPayload fullPayload);
    [ExtensionAttribute]
public static DotTracePayload ToOwnTime(DotTraceFullPayload fullPayload);
}
public class JetBrains.DotTrace.DataStructures.CallTree.ErrorInfo : ValueType {
    public string Message;
    public ErrorInfo(string message);
}
public interface JetBrains.DotTrace.DataStructures.CallTree.ICallTreePayload`1 {
    public bool IsZeroTimeAndCount { get; }
    public bool IsZeroTime { get; }
    public abstract virtual bool get_IsZeroTimeAndCount();
    public abstract virtual bool get_IsZeroTime();
    public abstract virtual TPayloadStruct AddPayload(TPayloadStruct o);
    public abstract virtual TPayloadStruct AddPayloadWithoutCallCounts(TPayloadStruct o);
    public abstract virtual TPayloadStruct SubtractPayload(TPayloadStruct o);
    public abstract virtual TPayloadStruct RemoveMinuses(TPayloadStruct minuses);
}
public interface JetBrains.DotTrace.DataStructures.CallTree.IDeferUpdateManager {
    public abstract virtual void Changed();
}
[IsReadOnlyAttribute]
public class JetBrains.DotTrace.DataStructures.CallTree.LongPayload : ValueType {
    public long Payload;
    public bool IsZeroTimeAndCount { get; }
    public bool IsZeroTime { get; }
    public LongPayload(long payload);
    public sealed virtual int CompareTo(LongPayload other);
    public sealed virtual bool get_IsZeroTimeAndCount();
    public sealed virtual bool get_IsZeroTime();
    public sealed virtual LongPayload AddPayload(LongPayload o);
    public sealed virtual LongPayload AddPayloadWithoutCallCounts(LongPayload o);
    public sealed virtual LongPayload SubtractPayload(LongPayload o);
    public sealed virtual LongPayload RemoveMinuses(LongPayload minuses);
    public sealed virtual bool Equals(LongPayload other);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
    public static LongPayload op_Multiply(LongPayload density, ulong tick);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DataStructures.CallTree.LongPayloadHelpers : object {
    public static LongPayload One;
    public static LongPayload Zero;
    private static LongPayloadHelpers();
    [ExtensionAttribute]
public static LongPayload AsLongPayload(long rawValue);
    [ExtensionAttribute]
public static LongPayload AsLongPayload(ulong rawValue);
}
public class JetBrains.DotTrace.DataStructures.CallTree.ModuleInfo : ValueType {
    public ModuleInfoType Type;
    private FileSystemPath myPath;
    private AssemblyNameInfo myInfo;
    private string myMessage;
    private ModuleInfo(ModuleInfoType type, FileSystemPath path, AssemblyNameInfo info, string message);
    public static ModuleInfo CreateCoreModule(FileSystemPath path, AssemblyNameInfo assemblyNameInfo);
    public ModulePathAndInfo AsCoreModuleInfo();
    public static ModuleInfo CreateEtwModule(FileSystemPath path);
    public ModulePath AsEtwModuleInfo();
    public static ModuleInfo Error(string message);
}
public enum JetBrains.DotTrace.DataStructures.CallTree.ModuleInfoType : Enum {
    public int value__;
    public static ModuleInfoType CoreModule;
    public static ModuleInfoType EtwModule;
    public static ModuleInfoType Error;
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DataStructures.CallTree.ModuleInfoUnionEx : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static AssemblyNameInfo AssemblyNameInfo(ModuleInfo this);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static string AssemblyName(ModuleInfo this);
    [ExtensionAttribute]
[NotNullAttribute]
public static FileSystemPath Path(ModuleInfo this);
}
public class JetBrains.DotTrace.DataStructures.CallTree.ModulePath : ValueType {
    public FileSystemPath Path;
    public ModulePath(FileSystemPath path);
    [NotNullAttribute]
public string FileName();
}
public class JetBrains.DotTrace.DataStructures.CallTree.ModulePathAndInfo : ValueType {
    public FileSystemPath Path;
    [CanBeNullAttribute]
public AssemblyNameInfo AssemblyNameInfo;
    public ModulePathAndInfo(FileSystemPath path, AssemblyNameInfo assemblyNameInfo);
}
public class JetBrains.DotTrace.DataStructures.CallTree.NamePair : ValueType {
    [CompilerGeneratedAttribute]
private FormattedText <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
private FormattedText <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private FormattedText <Tooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public FormattedText ShortName { get; }
    public FormattedText FullName { get; }
    public FormattedText Tooltip { get; public set; }
    public bool HasFullName { get; }
    private NamePair(FormattedText shortName, FormattedText fullName);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public FormattedText get_ShortName();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public FormattedText get_FullName();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public FormattedText get_Tooltip();
    [CompilerGeneratedAttribute]
public void set_Tooltip(FormattedText value);
    public static NamePair Create(string shortName, string tooltip);
    public static NamePair Create(FormattedText shortName, FormattedText tooltip);
    public static NamePair Create(FormattedText shortName, FormattedText fullName, FormattedText tooltip);
    public bool get_HasFullName();
    public sealed virtual bool Equals(NamePair other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(NamePair left, NamePair right);
    public static bool op_Inequality(NamePair left, NamePair right);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public class JetBrains.DotTrace.DataStructures.CallTree.NativeFunctionInfo : ValueType {
    public string Name;
    public string PrettyName;
    public NativeFunctionInfo(string name, string prettyName);
}
public class JetBrains.DotTrace.DataStructures.CallTree.PayloadGetter`2 : MulticastDelegate {
    public PayloadGetter`2(object object, IntPtr method);
    public virtual TPayload Invoke(T offset);
    public virtual IAsyncResult BeginInvoke(T offset, AsyncCallback callback, object object);
    public virtual TPayload EndInvoke(IAsyncResult result);
}
public class JetBrains.DotTrace.DataStructures.CallTree.PercentHSBColorConverterModel : object {
    private static double StartLimit;
    private static double EndLimit;
    private double myMaxB;
    private double myLimitB;
    private double myMaxH;
    private double myLimitH;
    private double myMaxS;
    private double myLimitS;
    private double myMinB;
    private double myMinH;
    private double myMinS;
    public PercentHSBColorConverterModel(double minH, double maxH, double limitH, double minS, double maxS, double limitS, double minB, double maxB, double limitB);
    public JetRgbaColor Convert(double percent);
    private HSB GetHSBColor(double percent);
    private static double GetRatio(double percent);
    private static double GetValue(double min, double max, double value);
}
public class JetBrains.DotTrace.DataStructures.CallTree.PlusOrMinus`1 : ValueType {
    public TOffset Offset;
    public bool IsMinus;
    public PlusOrMinus`1(TOffset offset, bool isMinus);
    [LocalizableAttribute("False")]
public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DataStructures.CallTree.PlusOrMinusEx : object {
    [ExtensionAttribute]
public static IEnumerable`1<TOffset> OnlyPluses(IEnumerable`1<PlusOrMinus`1<TOffset>> this);
    [ExtensionAttribute]
public static IEnumerable`1<TOffset> OnlyMinuses(IEnumerable`1<PlusOrMinus`1<TOffset>> this);
    [ExtensionAttribute]
public static IEnumerable`1<TOffset> PlusesAndMinuses(IEnumerable`1<PlusOrMinus`1<TOffset>> this);
    public static PlusOrMinus`1<TOffset> Plus(TOffset offset);
    public static PlusOrMinus`1<TOffset> Minus(TOffset offset);
}
public static class JetBrains.DotTrace.DataStructures.CallTree.TimelinePercentToColorConverterModels : object {
    public static PercentHSBColorConverterModel LightColorConverter;
    public static PercentHSBColorConverterModel DarkColorConverter;
    private static TimelinePercentToColorConverterModels();
}
[DefaultMemberAttribute("Item")]
[ThreadUnsafeAttribute]
public class JetBrains.DotTrace.DataStructures.Collections.StructStack`1 : object {
    private T[] myArray;
    private int mySize;
    private static int DefaultCapacity;
    public int Count { get; }
    public T& Item { get; }
    public int get_Count();
    public void Clear();
    public T& Peek();
    public T Pop();
    public void Push(T item);
    public T& get_Item(int index);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DataStructures.ComponentContainerEx : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static T TryGetData(IComponentContainer container);
}
public abstract class JetBrains.DotTrace.DataStructures.DotTraceBaseProductInfo : HostProductInfoComponent {
    public string ProductUrl { get; }
    public string ProductTwitterUrl { get; }
    public string ProductUrlEvaluate { get; }
    public string HelpUrl { get; }
    public string VersionMarketingString { get; }
    protected DotTraceBaseProductInfo(Lifetime lifetime, HostInfo hostInfo, ApplicationPackages apppkgs, ILogger logger);
    public sealed virtual string get_ProductUrl();
    public sealed virtual string get_ProductTwitterUrl();
    public sealed virtual string get_ProductUrlEvaluate();
    public sealed virtual string get_HelpUrl();
    public sealed virtual string get_VersionMarketingString();
}
public static class JetBrains.DotTrace.DataStructures.DotTraceDataConstants : object {
    public static DataConstant`1<ComponentContainerForFactoring> ComponentContainerForFactoring;
    private static DotTraceDataConstants();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DataStructures.DotTraceDataConstantsExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static T GetDotTraceComponent(IDataContext dataContext);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<T> GetDotTraceComponents(IDataContext dataContext);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static T TryGetDotTraceComponent(IDataContext dataContext);
}
[LicensedEntityIconsAttribute("JetBrains.DotTrace.DataStructures.resources.DotTraceCore.ThemedIcons.DotTraceCoreThemedIcons/DotTraceProduct", "JetBrains.DotTrace.DataStructures.resources.DotTraceCore.ThemedIcons.DotTraceCoreThemedIcons/DotTraceProduct")]
public abstract class JetBrains.DotTrace.DataStructures.DotTraceLicensedEntity : object {
    private ApplicationPackages myApppkgs;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ISupportsLicenseServer> <LicenseServer>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ISupportsJetBrainsAccount> <JetBrainsAccount>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ProductBuiltDateUsedForSubscriptionCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<UserLicenseChecker> <UserLicenseCheckers>k__BackingField;
    public string TechnicalName { get; }
    public string PresentableName { get; }
    public Version EntityVersion { get; }
    public string EntityMarketingVersionString { get; }
    public string PurchaseUrl { get; }
    public string ProductCode { get; }
    public ISupportsEvaluation Evaluation { get; }
    public ISupportsUserLicense UserLicense { get; }
    public IEnumerable`1<ISupportsLicenseServer> LicenseServer { get; }
    public IEnumerable`1<ISupportsJetBrainsAccount> JetBrainsAccount { get; }
    public IEnumerable`1<string> Signatures { get; }
    public string ProductGuid { get; }
    public FreeTrialMode TrialMode { get; }
    public int FreeTrialPeriod { get; }
    public int FeedbackRequestPeriod { get; }
    public int LeftDaysNotification { get; }
    public EvaluationUsageMode Mode { get; }
    public IList`1<Pair`2<string, string>> OptInSubscriptions { get; }
    public DateTime ProductBuiltDateUsedForSubscriptionCheck { get; }
    public bool DoCheckLicenseReuseOverNetwork { get; }
    public IEnumerable`1<UserLicenseChecker> UserLicenseCheckers { get; }
    protected DotTraceLicensedEntity(ApplicationPackages apppkgs);
    public sealed virtual string get_TechnicalName();
    public sealed virtual string get_PresentableName();
    public sealed virtual Version get_EntityVersion();
    public sealed virtual string get_EntityMarketingVersionString();
    public sealed virtual string get_PurchaseUrl();
    public sealed virtual string get_ProductCode();
    public virtual ISupportsEvaluation get_Evaluation();
    public virtual ISupportsUserLicense get_UserLicense();
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<ISupportsLicenseServer> get_LicenseServer();
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<ISupportsJetBrainsAccount> get_JetBrainsAccount();
    public abstract virtual IEnumerable`1<string> get_Signatures();
    public sealed virtual string get_ProductGuid();
    public sealed virtual FreeTrialMode get_TrialMode();
    public sealed virtual int get_FreeTrialPeriod();
    public sealed virtual int get_FeedbackRequestPeriod();
    public sealed virtual int get_LeftDaysNotification();
    public abstract virtual EvaluationUsageMode get_Mode();
    public sealed virtual IList`1<Pair`2<string, string>> get_OptInSubscriptions();
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_ProductBuiltDateUsedForSubscriptionCheck();
    public sealed virtual bool get_DoCheckLicenseReuseOverNetwork();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<UserLicenseChecker> get_UserLicenseCheckers();
    public sealed virtual string GetLicenseAgreement(LicenseType licenseType);
}
public static class JetBrains.DotTrace.DataStructures.Events.EventsDataConstants : object {
    public static DataConstant`1<EventsListProperties> SelectedEvents;
    private static EventsDataConstants();
}
public class JetBrains.DotTrace.DataStructures.Events.EventsListProperties : object {
    public HashSet`1<ThreadId> Threads;
    public ModelRange Range;
}
public class JetBrains.DotTrace.DataStructures.Filters.AppliedFilterValueModel : ValueType {
    public IDataProvider`1<FilterPresentationModel> PresentableValue;
    public Action Clear;
    public AppliedFilterValueModel(FilterPresentationModel presentableValue, Action clear);
    public AppliedFilterValueModel(IDataProvider`1<FilterPresentationModel> presentableValue, Action clear);
}
[ValueSerializerAttribute("JetBrains.DotTrace.DataStructures.Filters.FilterIdSerializer")]
[DataContractAttribute]
public class JetBrains.DotTrace.DataStructures.Filters.CallTreeFilterId : FilterId {
    public static CallTreeFilterId Instance;
    private static CallTreeFilterId();
    protected virtual bool DoEquals(FilterId filterId);
    protected virtual int DoCompareTo(FilterId other);
    [LocalizableAttribute("False")]
public virtual string ToString();
    public virtual int GetHashCode();
}
public class JetBrains.DotTrace.DataStructures.Filters.CompareFilterId : FilterId {
    public static CompareFilterId Instance;
    private static CompareFilterId();
    protected virtual bool DoEquals(FilterId filterId);
    protected virtual int DoCompareTo(FilterId other);
}
[ValueSerializerAttribute("JetBrains.DotTrace.DataStructures.Filters.FilterIdSerializer")]
[DataContractAttribute]
public class JetBrains.DotTrace.DataStructures.Filters.EventPropertyFilterId : FilterId {
    [DataMemberAttribute]
private int myEventId;
    [DataMemberAttribute]
private int myPropertyId;
    [DataMemberAttribute]
private int myPropertyIndex;
    [DataMemberAttribute]
private string myPropertyName;
    public EventPropertyFilterId(int eventId, int propertyId, int propertyIndex, string propertyName);
    public EventPropertyFilterId(int eventId, IEventPropertyDescriptor property);
    protected virtual bool DoEquals(FilterId filterId);
    protected virtual int DoCompareTo(FilterId other);
    [LocalizableAttribute("False")]
public virtual string ToString();
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
private bool <ToString>b__8_0(FieldInfo f);
}
public static class JetBrains.DotTrace.DataStructures.Filters.EventTypePresentation : object {
    public static string FullName(KnownEventTypes type);
    public static string Tooltip(KnownEventTypes type);
    public static string PluralEventName(KnownEventTypes type);
    public static string EventName(KnownEventTypes type);
    public static string ShortName(KnownEventTypes type);
    public static IconId Icon(KnownEventTypes type);
}
[ValueSerializerAttribute("JetBrains.DotTrace.DataStructures.Filters.FilterIdSerializer")]
[DataContractAttribute]
public abstract class JetBrains.DotTrace.DataStructures.Filters.FilterId : object {
    [DataMemberAttribute]
public FilterRadioGroupId RadioGroupId;
    protected FilterId(FilterRadioGroupId radioGroupId);
    protected abstract virtual bool DoEquals(FilterId filterId);
    public sealed virtual bool Equals(FilterId other);
    public static bool op_Equality(FilterId f1, FilterId f2);
    public static bool op_Inequality(FilterId f1, FilterId f2);
    public virtual bool Equals(object obj);
    protected abstract virtual int DoCompareTo(FilterId other);
    public sealed virtual int CompareTo(FilterId other);
    public virtual int GetHashCode();
}
public class JetBrains.DotTrace.DataStructures.Filters.FilterIdSerializer : JsonValueSerializerNewtonsoftWithSettings`1<FilterId> {
}
public class JetBrains.DotTrace.DataStructures.Filters.FilterIdTypeBinder : SerializationBinder {
    private static ILogger ourLog;
    [LocalizableAttribute("False")]
private static Dictionary`2<string, Type> ourNameToType;
    private static Dictionary`2<Type, string> ourTypeToName;
    private static FilterIdTypeBinder();
    public virtual Type BindToType(string assemblyName, string typeName);
    public virtual void BindToName(Type serializedType, String& assemblyName, String& typeName);
}
public class JetBrains.DotTrace.DataStructures.Filters.FilterPresentationModel : object {
    public PresentationModelType PresentationType;
    public UInt32 Id;
    public bool BFlag;
    public int Flags;
    public string Text;
    public string Tooltip;
    public Color Color;
    private FilterPresentationModel(PresentationModelType presentationType, UInt32 id, int flags, string text, string tooltip, Color color, bool bFlag);
    public static FilterPresentationModel TextWithTooltip(string text, string tooltip);
    public static FilterPresentationModel TextWithColor(Color color, string text);
    public static FilterPresentationModel ThreadOrProcessName(UInt32 id, ThreadPresentation threadPresentation, string name, string extendedName, bool addThreadWord);
    public static FilterPresentationModel ThreadOrProcessName(ThreadOrProcessNameModel model, bool addThreadWord);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DataStructures.Filters.FilterPresentationModelEx : object {
    [ExtensionAttribute]
public static FilterPresentationModel ToFilterPresentationModel(string text, string tooltip);
    [ExtensionAttribute]
public static FilterPresentationModel ToFilterPresentationModel(string text, Color color);
    [ExtensionAttribute]
public static Func`2<ThreadOrProcessId, FilterPresentationModel> ToFilterPresentationModelBuilder(IThreadOrProcessNameProvider nameProvider, bool addThreadWord);
}
public class JetBrains.DotTrace.DataStructures.Filters.FilterRadioGroup : object {
    public FilterId Default;
    public FilterRadioGroupId GroupId;
    private IDataControllerContainer`1<FilterId> myControllerContainer;
    [CompilerGeneratedAttribute]
private IDataProvider`1<FilterId> <Provider>k__BackingField;
    public IDataProvider`1<FilterId> Provider { get; }
    public FilterId Value { get; public set; }
    public FilterRadioGroup(IDataControllerContainer`1<FilterId> controllerContainer, FilterId defaultFilterId);
    [CompilerGeneratedAttribute]
public IDataProvider`1<FilterId> get_Provider();
    public FilterId get_Value();
    public void set_Value(FilterId value);
    public void Reset();
}
[ValueSerializerAttribute("JetBrains.Util.Serialization.JsonValueSerializerNewtonsoft`1<JetBrains.DotTrace.DataStructures.Filters.FilterRadioGroupId>")]
[DataContractAttribute]
public class JetBrains.DotTrace.DataStructures.Filters.FilterRadioGroupId : ValueType {
    public static FilterRadioGroupId SubjectFilterRadioGroupId;
    [DataMemberAttribute]
private int myId;
    public FilterRadioGroupId(int id);
    private static FilterRadioGroupId();
    public sealed virtual int CompareTo(FilterRadioGroupId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(FilterRadioGroupId f1, FilterRadioGroupId f2);
    public static bool op_Inequality(FilterRadioGroupId f1, FilterRadioGroupId f2);
    public static int op_Explicit(FilterRadioGroupId value);
    public sealed virtual bool Equals(FilterRadioGroupId other);
    public virtual string ToString();
}
public static class JetBrains.DotTrace.DataStructures.Filters.FilterRadioGroups : object {
    public static FilterRadioGroupId None;
    private static FilterRadioGroups();
}
public class JetBrains.DotTrace.DataStructures.Filters.GridColumnsDefinition : object {
    [CompilerGeneratedAttribute]
private GridColumnViewModel[] <Columns>k__BackingField;
    public GridColumnViewModel[] Columns { get; public set; }
    [CompilerGeneratedAttribute]
public GridColumnViewModel[] get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(GridColumnViewModel[] value);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DataStructures.Filters.Helpers : object {
    [ExtensionAttribute]
public static void Clear(IEnumerable`1<AppliedFilterValueModel> values);
}
public interface JetBrains.DotTrace.DataStructures.Filters.IFiltersMonitor {
    public abstract virtual IProviderContainerMonitor`1<FilterId> GetRadioGroupFilterMonitor(FilterRadioGroupId instanceRadioGroupId);
    public abstract virtual IProviderContainerMonitor`1<Nullable`1<ModelRange>> GetSelectedRangeFilterMonitor();
    public abstract virtual IProviderContainerMonitor`1<ModelRangeDouble> GetViewportRangeMonitor(ModelRangeDouble defaultValue);
    public abstract virtual IProviderContainerMonitor`1<Nullable`1<bool>> GetYesNoNestedFilter(int eventId, IEventPropertyDescriptor property, Func`2<bool, FilterPresentationModel> presenter);
    public abstract virtual IProviderContainerMonitor`1<Nullable`1<bool>> GetThreadStateFilterMonitor();
    public abstract virtual IProviderContainerMonitor`1<bool> GetToggleFilterMonitor(KnownEventTypes eventType);
    public abstract virtual ISavedStateListValueMonitor`1<CallTreePath> GetExcludedNodesListMonitor();
    public abstract virtual ISavedStateListValueMonitor`1<SubsystemKey> GetIncludedSubsystemListMonitor();
    public abstract virtual ISavedStateListValueMonitor`1<SubsystemKey> GetExcludedSubsystemListMonitor();
    public abstract virtual ISavedStateListValueMonitor`1<ThreadId> GetThreadFilterListMonitor(Func`2<ThreadOrProcessId, FilterPresentationModel> keyPresenter);
    public abstract virtual ISavedStateListValueMonitor`1<ThreadName> GetThreadNameFilterListMonitor();
    public abstract virtual ISavedStateListValueMonitor`1<ThreadOrProcessId> GetThreadOrProcessListNestedFilter(int eventId, IEventPropertyDescriptor property, IThreadOrProcessNameProvider threadNameProvider);
    public abstract virtual ISavedStateListValueMonitor`1<ulong> GetCommonListNestedFilter(int eventId, IEventPropertyDescriptor property, Func`2<ulong, FilterPresentationModel> keyPresenter);
    public abstract virtual ISavedStateListValueMonitor`1<ulong> GetCommonListNestedFilter(int eventId, IEventPropertyDescriptor property, Func`2<ulong, string> keyPresenter);
    public abstract virtual ISavedStateListValueMonitor`1<ThreadId> GetThreadScopeFilterListMonitor();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DataStructures.Filters.JsonSerializationSettingsEx : object {
    private static JsonSerializerSettings CreateDefaultSettings();
    [ExtensionAttribute]
public static JsonSerializerSettings WithoutMaxDepth(JsonSerializerSettings settings);
}
public class JetBrains.DotTrace.DataStructures.Filters.JsonValueSerializerNewtonsoftWithSettings`1 : ValueSerializerBase`1<T> {
    public JsonValueSerializerNewtonsoftWithSettings`1(JsonSerializerSettings settings);
}
[ValueSerializerAttribute("JetBrains.DotTrace.DataStructures.Filters.FilterIdSerializer")]
[DataContractAttribute]
public class JetBrains.DotTrace.DataStructures.Filters.LayerEventTypesFilterId : FilterId {
    [DataMemberAttribute]
public int LayerId;
    public LayerEventTypesFilterId(int layerId);
    protected virtual bool DoEquals(FilterId filterId);
    protected virtual int DoCompareTo(FilterId other);
    [LocalizableAttribute("False")]
public virtual string ToString();
    public virtual int GetHashCode();
}
public enum JetBrains.DotTrace.DataStructures.Filters.PresentationModelType : Enum {
    public int value__;
    public static PresentationModelType TextWithTooltip;
    public static PresentationModelType TextWithColor;
    public static PresentationModelType ThreadOrProcessName;
}
public class JetBrains.DotTrace.DataStructures.Filters.SelectedRangeData : ValueType {
    [CompilerGeneratedAttribute]
private IDataProvider`1<UnitValue`1<TimeUnits>> <Time>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<string> <Tooltip>k__BackingField;
    public IDataProvider`1<UnitValue`1<TimeUnits>> Time { get; }
    public IDataProvider`1<string> Tooltip { get; }
    private SelectedRangeData(IDataProvider`1<UnitValue`1<TimeUnits>> time, IDataProvider`1<string> tooltip);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IDataProvider`1<UnitValue`1<TimeUnits>> get_Time();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IDataProvider`1<string> get_Tooltip();
    public static SelectedRangeData Create(IDataProvider`1<bool> isThreadCountPayloadMode, IDataProvider`1<ModelRange> filteredRange, IDataProvider`1<ITickTimeConverter> tickTimeConverter, IViewportRanges viewportRanges, TimeUnits timestampUnits);
}
public enum JetBrains.DotTrace.DataStructures.Filters.SelectedRangeType : Enum {
    public int value__;
    public static SelectedRangeType TotalRange;
    public static SelectedRangeType VisibleRange;
    public static SelectedRangeType SelectedRange;
    public static SelectedRangeType Timestamp;
}
[ValueSerializerAttribute("JetBrains.DotTrace.DataStructures.Filters.FilterIdSerializer")]
[DataContractAttribute]
public class JetBrains.DotTrace.DataStructures.Filters.SubsystemsFilterId : FilterId {
    public static SubsystemsFilterId Instance;
    private static SubsystemsFilterId();
    protected virtual bool DoEquals(FilterId filterId);
    protected virtual int DoCompareTo(FilterId other);
    [LocalizableAttribute("False")]
public virtual string ToString();
    public virtual int GetHashCode();
}
[ValueSerializerAttribute("JetBrains.DotTrace.DataStructures.Filters.FilterIdSerializer")]
[DataContractAttribute]
public class JetBrains.DotTrace.DataStructures.Filters.ThreadFilterId : FilterId {
    public static ThreadFilterId Instance;
    private static ThreadFilterId();
    protected virtual bool DoEquals(FilterId filterId);
    protected virtual int DoCompareTo(FilterId other);
    [LocalizableAttribute("False")]
public virtual string ToString();
    public virtual int GetHashCode();
}
[ValueSerializerAttribute("JetBrains.DotTrace.DataStructures.Filters.FilterIdSerializer")]
[DataContractAttribute]
public class JetBrains.DotTrace.DataStructures.Filters.TimeSubjectFilterId : FilterId {
    public static FilterId Instance;
    private static TimeSubjectFilterId();
    protected virtual bool DoEquals(FilterId filterId);
    public virtual int GetHashCode();
    protected virtual int DoCompareTo(FilterId other);
    [LocalizableAttribute("False")]
public virtual string ToString();
}
public class JetBrains.DotTrace.DataStructures.Filters.ViewModels.ColumnHeadersViewModel : object {
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<ColumnHeaderViewModel> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private GridColumnsDefinition <Columns>k__BackingField;
    private bool myCanClearSort;
    public ObservableCollection`1<ColumnHeaderViewModel> Headers { get; public set; }
    public GridColumnsDefinition Columns { get; private set; }
    public ColumnHeadersViewModel(bool canClearSort);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public ObservableCollection`1<ColumnHeaderViewModel> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(ObservableCollection`1<ColumnHeaderViewModel> value);
    [CompilerGeneratedAttribute]
public GridColumnsDefinition get_Columns();
    [CompilerGeneratedAttribute]
private void set_Columns(GridColumnsDefinition value);
    public void Init(IDataControllerContainer`1<SortMode> sortMode);
}
public class JetBrains.DotTrace.DataStructures.Filters.ViewModels.ColumnHeaderViewModel : object {
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private JetGridLength <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataNotifier`1<bool> <CanClick>k__BackingField;
    [CompilerGeneratedAttribute]
private IWriteableDataNotifier`1<bool> <IsSortedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataNotifier`1<string> <Text>k__BackingField;
    public bool HideSortArrow;
    [CompilerGeneratedAttribute]
private JetThickness <Margin>k__BackingField;
    public SortMode SortMode;
    [CompilerGeneratedAttribute]
private IDataController`1<bool> <IsMouseOver>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataNotifier`1<bool> <IsHighlighted>k__BackingField;
    [CompilerGeneratedAttribute]
private HorizontalAlignment <HorizontalAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    public JetGridLength Width { get; public set; }
    public IDataNotifier`1<bool> CanClick { get; public set; }
    public IWriteableDataNotifier`1<bool> IsSortedBy { get; public set; }
    public IDataNotifier`1<string> Text { get; public set; }
    public JetThickness Margin { get; public set; }
    public IDataController`1<bool> IsMouseOver { get; }
    public IDataNotifier`1<bool> IsHighlighted { get; public set; }
    public HorizontalAlignment HorizontalAlignment { get; public set; }
    public int Index { get; internal set; }
    public ColumnHeaderViewModel(SortMode sortMode);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public JetGridLength get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(JetGridLength value);
    [CompilerGeneratedAttribute]
public IDataNotifier`1<bool> get_CanClick();
    [CompilerGeneratedAttribute]
public void set_CanClick(IDataNotifier`1<bool> value);
    [CompilerGeneratedAttribute]
public IWriteableDataNotifier`1<bool> get_IsSortedBy();
    [CompilerGeneratedAttribute]
public void set_IsSortedBy(IWriteableDataNotifier`1<bool> value);
    [CompilerGeneratedAttribute]
public IDataNotifier`1<string> get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(IDataNotifier`1<string> value);
    [CompilerGeneratedAttribute]
public JetThickness get_Margin();
    [CompilerGeneratedAttribute]
public void set_Margin(JetThickness value);
    [CompilerGeneratedAttribute]
public IDataController`1<bool> get_IsMouseOver();
    [CompilerGeneratedAttribute]
public IDataNotifier`1<bool> get_IsHighlighted();
    [CompilerGeneratedAttribute]
public void set_IsHighlighted(IDataNotifier`1<bool> value);
    [CompilerGeneratedAttribute]
public HorizontalAlignment get_HorizontalAlignment();
    [CompilerGeneratedAttribute]
public void set_HorizontalAlignment(HorizontalAlignment value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
internal void set_Index(int value);
}
public class JetBrains.DotTrace.DataStructures.Filters.ViewModels.ContentWithColumnHeadersViewModel : object {
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private object <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ColumnHeaders>k__BackingField;
    public object Content { get; public set; }
    public object ColumnHeaders { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public object get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(object value);
    [CompilerGeneratedAttribute]
public object get_ColumnHeaders();
    [CompilerGeneratedAttribute]
public void set_ColumnHeaders(object value);
}
public enum JetBrains.DotTrace.DataStructures.Filters.ViewModels.FilterColumnSet : Enum {
    public int value__;
    public static FilterColumnSet Default;
    public static FilterColumnSet TimelineThreads;
}
public class JetBrains.DotTrace.DataStructures.Filters.ViewModels.GridColumnViewModel : object {
    [CompilerGeneratedAttribute]
private JetGridLength <Width>k__BackingField;
    public JetGridLength Width { get; public set; }
    [CompilerGeneratedAttribute]
public JetGridLength get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(JetGridLength value);
}
public class JetBrains.DotTrace.DataStructures.Metadata.AccessData`1 : ValueType {
    [NotNullAttribute]
public IEnumerable`1<T> CallTreePtrs;
    [CanBeNullAttribute]
public IMinuses`1<T> CallTreeMinuses;
    public AccessData`1(IEnumerable`1<T> callTreePtrs, IMinuses`1<T> callTreeMinuses);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DataStructures.Metadata.CallTreeReaderEx : object {
    [ExtensionAttribute]
public static AccessData`1<T> GetAllAccessAndMinusPointersForFuid(ICallTreeReader`1<T> reader, FunctionUID fuid, AccessData`1<T> accessData);
    [ExtensionAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("first:null, second:null => null")]
public static IEnumerable`1<T> MergePointers(ICallTreeReader`1<T> reader, IEnumerable`1<T> first, IEnumerable`1<T> second);
    [ExtensionAttribute]
public static Nullable`1<T> TryGetParent(ICallTreeReader`1<T> tm, T callTreePointer);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.DataStructures.Metadata.CallTreeReaderEx/<GetPathToRoot>d__3`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> GetPathToRoot(ICallTreeReader`1<T> tm, T callTreePointer);
    [ExtensionAttribute]
public static Nullable`1<T> TryFindSibling(ICallTreeReader`1<T> treeReader, T callTreePointer, FunctionUID fuid);
    [ExtensionAttribute]
public static Nullable`1<T> GetNearestAncestor(ICallTreeReader`1<T> tm, T callTreePointer, Predicate`1<T> accept);
    [ExtensionAttribute]
public static Nullable`1<T> GetNearestUserAncestor(ICallTreeReaderWithIndexes`1<T> tm, T callTreePointer);
    [ExtensionAttribute]
public static IEnumerable`1<T> Sort(IEnumerable`1<T> pointers, ICallTreeReader`1<T> reader);
    [ExtensionAttribute]
public static IEnumerable`1<T> SortAndDistinct(IEnumerable`1<T> pointers, ICallTreeReader`1<T> reader);
    [ExtensionAttribute]
public static IEnumerable`1<T> DistinctSorted(IEnumerable`1<T> pointers, ICallTreeReader`1<T> reader);
}
public class JetBrains.DotTrace.DataStructures.Metadata.FunctionInfo : ValueType {
    public FunctionUID Fuid;
    public string Class;
    public string Method;
    public string Namespace;
    public string Module;
    [NotNullAttribute]
public string Parameters;
    public bool IsSystem;
}
public interface JetBrains.DotTrace.DataStructures.Metadata.ICallTreeIndexes`1 {
    public abstract virtual bool IsSystem(T callTreePtr);
    public abstract virtual bool HasSystemSubtree(AccessData`1<T> accessData);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<PlusOrMinus`1<T>> GetTopUserDescendants(AccessData`1<T> accessData);
    public abstract virtual IEnumerable`1<PlusOrMinus`1<T>> GetTopMethodsOwnPlusSystemDescendants(AccessData`1<T> accessData);
    public abstract virtual IEnumerable`1<PlusOrMinus`1<T>> GetTopMethodsOwnPlusNonFunctionDescendants(AccessData`1<T> accessData);
}
public interface JetBrains.DotTrace.DataStructures.Metadata.ICallTreeReader`1 {
    [CanBeNullAttribute]
public IComparer`1<T> PointersComparer { get; }
    public abstract virtual FunctionUID ReadKey(T callTreePtr);
    public abstract virtual IEnumerable`1<PlusOrMinus`1<T>> GetChildren(AccessData`1<T> accessData);
    public abstract virtual T GetParent(T callTreePtr);
    public abstract virtual bool IsRootPointer(T callTreePtr);
    public abstract virtual IEnumerable`1<PlusOrMinus`1<T>> GetTopLevelDescendantsForFuid(FunctionUID fuid, AccessData`1<T> accessData);
    public abstract virtual IEnumerable`1<PlusOrMinus`1<T>> GetAllAccessPointersForFuid(FunctionUID fuid, AccessData`1<T> accessData);
    public abstract virtual T[] GetAllAccessPointersForFuid(FunctionUID fuid, AccessData`1<T> accessData, IList`1& recursivePtrs);
    public abstract virtual IEnumerable`1<PlusOrMinus`1<T>> GetTopLevelMinusesDescendants(AccessData`1<T> accessData);
    public abstract virtual IEnumerable`1<T> GetTopPointers(IEnumerable`1<T> callTreePtrs);
    public abstract virtual bool IsOneOfMinuses(T callTreePtr, IMinuses`1<T> minuses);
    [ContractAnnotationAttribute("callTreePtrs1:null, callTreePtrs2:null => null")]
[CanBeNullAttribute]
public abstract virtual IEnumerable`1<PlusOrMinus`1<T>> MergePointers(IEnumerable`1<PlusOrMinus`1<T>> callTreePtrs1, IEnumerable`1<PlusOrMinus`1<T>> callTreePtrs2);
    [CanBeNullAttribute]
public abstract virtual IMinuses`1<T> CreateMinuses(IEnumerable`1<T> first, IMinuses`1<T> second);
    [CanBeNullAttribute]
public abstract virtual Exception ValidateAccessData(AccessData`1<T> accessData);
    [ContractAnnotationAttribute("null => null; notnull => notnull")]
public abstract virtual IEnumerable`1<T> SortPointers(IEnumerable`1<T> pointers);
    [ContractAnnotationAttribute("null => null; notnull => notnull")]
public abstract virtual IEnumerable`1<T> DistinctSortedPointers(IEnumerable`1<T> pointers);
    public abstract virtual IComparer`1<T> get_PointersComparer();
    public abstract virtual ValueTuple`2<Dictionary`2<T, long>, long> GetSubtreesPowers(AccessData`1<T> accessData);
}
public interface JetBrains.DotTrace.DataStructures.Metadata.ICallTreeReaderWithIndexes`1 {
}
public interface JetBrains.DotTrace.DataStructures.Metadata.IMetadataReader {
    public abstract virtual CallFrameInfo GetCallFrameInfo(FunctionUID fuid);
    [NotNullAttribute]
public abstract virtual string GetPresentableSignature(FunctionUID fuid);
    public abstract virtual Nullable`1<ModuleInfo> GetModuleInfo(FunctionUID fuid);
}
public interface JetBrains.DotTrace.DataStructures.Metadata.IMinuses`1 {
    public abstract virtual List`1<T> AsList();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DataStructures.Metadata.MetadataReaderEx : object {
    [ExtensionAttribute]
public static FunctionInfo GetFunctionInfo(IMetadataReader metadataReader, FunctionUID fuid, bool isSystem);
}
public class JetBrains.DotTrace.DataStructures.Metadata.ModuleIndex : ValueType {
    private UInt32 myValue;
    public ModuleIndex(UInt32 value);
    public static int op_Explicit(ModuleIndex index);
}
public enum JetBrains.DotTrace.DataStructures.Metadata.ModuleType : Enum {
    public int value__;
    public static ModuleType Managed;
    public static ModuleType Native;
    public static ModuleType Core;
    public static ModuleType Null;
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DataStructures.Metadata.ModuleTypeEx : object {
    [ExtensionAttribute]
public static bool IsCoreRelated(ModuleType type);
}
public class JetBrains.DotTrace.DataStructures.Metadata.ModuleUID : ValueType {
    private static int TypeBitsCount;
    private static UInt32 TypeMask;
    private UInt32 myValue;
    public ModuleType Type { get; }
    public UInt32 Index { get; }
    private ModuleUID(UInt32 moduleUID);
    public sealed virtual bool Equals(ModuleUID other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ModuleUID left, ModuleUID right);
    public static bool op_Inequality(ModuleUID left, ModuleUID right);
    public ModuleType get_Type();
    private static int TypeBitsShiftCount();
    public UInt32 get_Index();
    public static UInt32 op_Explicit(ModuleUID moduleUID);
    public static ModuleUID op_Explicit(UInt32 moduleUID);
    public static ModuleUID Create(UInt32 value);
    public static ModuleUID Create(ModuleType type, ModuleIndex index);
    public static ModuleUID CreateNull();
    public sealed virtual int CompareTo(ModuleUID other);
    [LocalizableAttribute("False")]
public virtual string ToString();
}
public class JetBrains.DotTrace.DataStructures.Metadata.RootAccessData`1 : object {
    public FunctionUIDm Fuid;
    public AccessData`1<TOffset> AccessData;
    public RootAccessData`1(FunctionUIDm fuid, AccessData`1<TOffset> accessData);
}
public static class JetBrains.DotTrace.DataStructures.Modules.ModulesDataConstants : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static DataConstant`1<List`1<ValueTuple`2<AssemblyNameInfo, FileSystemPath>>> SelectedModules;
    private static ModulesDataConstants();
}
public interface JetBrains.DotTrace.DataStructures.Navigation.INavigateToCode {
    public abstract virtual bool CanNavigate(FunctionUIDm fuid);
    public abstract virtual void Navigate(FunctionUIDm fuid, bool transferFocus);
    public abstract virtual void NavigateToSingleMatchSilently(FunctionUIDm fuid);
}
public static class JetBrains.DotTrace.DataStructures.Navigation.NavigateToCodeHelpers : object {
    public static bool CanNavigate(FunctionUIDm fuid);
}
public class JetBrains.DotTrace.DataStructures.Navigation.NavigationInfoData : object {
    [CompilerGeneratedAttribute]
private FunctionUIDm <Fuid>k__BackingField;
    [CompilerGeneratedAttribute]
private LineMeasures <LineMeasures>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public FunctionUIDm Fuid { get; public set; }
    public LineMeasures LineMeasures { get; public set; }
    public NavigationInfoData(FunctionUIDm Fuid, LineMeasures LineMeasures);
    [CompilerGeneratedAttribute]
protected NavigationInfoData(NavigationInfoData original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public FunctionUIDm get_Fuid();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Fuid(FunctionUIDm value);
    [CompilerGeneratedAttribute]
public LineMeasures get_LineMeasures();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LineMeasures(LineMeasures value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(NavigationInfoData left, NavigationInfoData right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(NavigationInfoData left, NavigationInfoData right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(NavigationInfoData other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual NavigationInfoData <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(FunctionUIDm& Fuid, LineMeasures& LineMeasures);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DataStructures.Navigation.NavigationInfoDataEx : object {
    [ExtensionAttribute]
public static bool IsNullOrEmpty(NavigationPath info);
    [ExtensionAttribute]
public static NavigationPath ToNavigationPath(FunctionUIDm fuid);
    [ExtensionAttribute]
public static NavigationPath ToNavigationPath(CallTreePath path, bool isRecursiveFolded);
    private static FunctionUIDm GetFuidForSourceCode(CallTreePath path);
}
public class JetBrains.DotTrace.DataStructures.Navigation.NavigationPath : object {
    [CompilerGeneratedAttribute]
private FunctionUIDm <Fuid>k__BackingField;
    [CompilerGeneratedAttribute]
private CallTreePath <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRecursiveFolded>k__BackingField;
    public static NavigationPath Empty;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public FunctionUIDm Fuid { get; public set; }
    public CallTreePath Path { get; public set; }
    public bool IsRecursiveFolded { get; public set; }
    public NavigationPath(FunctionUIDm Fuid, CallTreePath Path, bool IsRecursiveFolded);
    [CompilerGeneratedAttribute]
protected NavigationPath(NavigationPath original);
    private static NavigationPath();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public FunctionUIDm get_Fuid();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Fuid(FunctionUIDm value);
    [CompilerGeneratedAttribute]
public CallTreePath get_Path();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Path(CallTreePath value);
    [CompilerGeneratedAttribute]
public bool get_IsRecursiveFolded();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsRecursiveFolded(bool value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(NavigationPath left, NavigationPath right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(NavigationPath left, NavigationPath right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(NavigationPath other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual NavigationPath <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(FunctionUIDm& Fuid, CallTreePath& Path, Boolean& IsRecursiveFolded);
}
public class JetBrains.DotTrace.DataStructures.Other.ActiveImageInfo : object {
    public Image Normal;
    public Image Hot;
    public Image Pressed;
    public ActiveImageInfo(Image normal, Image hot);
    public ActiveImageInfo(Image normal, Image hot, Image pressed);
}
public class JetBrains.DotTrace.DataStructures.Other.EventNodeExtendedData : ValueType {
    public EventNodeData Data;
    public NodeDescriptor Descriptor;
    public IList`1<FunctionInfo> CallStack;
    public EventNodeExtendedData(EventNodeData data, NodeDescriptor descriptor, IList`1<FunctionInfo> callStack);
}
public class JetBrains.DotTrace.DataStructures.Other.ExpanderKey : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private HelpId <HelpKeyword>k__BackingField;
    public string Name { get; }
    public HelpId HelpKeyword { get; }
    public ExpanderKey(string name, HelpId helpKeyword);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public HelpId get_HelpKeyword();
    [LocalizableAttribute("False")]
public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DataStructures.Other.ExpanderKeyEx : object {
    private static ILogger ourLog;
    private static ExpanderKeyEx();
    [ExtensionAttribute]
public static string PluralName(ExpanderTitleAndKey titleKey);
    private static string PluralizeLastWord(string input);
}
public static class JetBrains.DotTrace.DataStructures.Other.ExpanderKeys : object {
    public static ExpanderKey Subsystems;
    public static ExpanderKey ExcludedCallTreePaths;
    public static ExpanderKey AnalysisSubject;
    public static ExpanderKey Threads;
    public static ExpanderKey ProcessOverview;
    public static ExpanderKey BackgroundGc;
    public static ExpanderKey BlockingGc;
    public static ExpanderKey BlockingGcReason;
    public static ExpanderKey GcDepth;
    public static ExpanderKey GcReason;
    public static ExpanderKey GcType;
    public static ExpanderKey CallTree;
    public static ExpanderKey ExceptionType;
    public static ExpanderKey ExceptionMessage;
    public static ExpanderKey FileIoDirection;
    public static ExpanderKey FileIoName;
    public static ExpanderKey NativeAllocationIsClosed;
    public static ExpanderKey DebugOutputString;
    public static ExpanderKey ConversionErrorType;
    public static ExpanderKey ConversionErrorMessage;
    public static ExpanderKey IntervalFilters;
    public static ExpanderKey IntervalFiltersShort;
    public static ExpanderKey AllocationHeap;
    public static ExpanderKey AllocationType;
    public static ExpanderKey CpuCore;
    public static ExpanderKey ThreadStates;
    public static ExpanderKey TopMethods;
    public static ExpanderKey WaitingActivatingThread;
    public static ExpanderKey WaitingReason;
    public static ExpanderKey ThreadPriority;
    public static ExpanderKey SqlCommandText;
    public static ExpanderKey SqlConnectionString;
    public static ExpanderKey HttpRequestUrl;
    public static ExpanderKey HttpRequestVerb;
    public static ExpanderKey ApiRelatedObject;
    public static ExpanderKey ApiEventName;
    public static ExpanderKey TaskName;
    public static ExpanderKey ProcessingErrorType;
    public static ExpanderKey ProcessingErrorDetails;
    public static ExpanderKey AwaitInfoTaskName;
    public static ExpanderKey AwaitInfoDuration;
    public static ExpanderKey Comparison;
    private static ExpanderKeys();
}
public class JetBrains.DotTrace.DataStructures.Other.ExpanderTitleAndKey : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpanderKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public string Title { get; }
    public ExpanderKey Key { get; }
    public ExpanderTitleAndKey(string title, ExpanderKey key);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public ExpanderKey get_Key();
    public static ExpanderTitleAndKey op_Implicit(ExpanderKey key);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public class JetBrains.DotTrace.DataStructures.Other.FileTimeEx : object {
    private static DateTime MaxFileTime(FileSystemPath file);
    public static DateTime Max(Nullable`1<DateTime> d1, DateTime d2);
    public static DateTime MaxFileTimeInDirectory(FileSystemPath sessionFolder, bool recursively);
    [CanBeNullAttribute]
public static Nullable`1<Pair`2<FileSystemPath, DateTime>> FileWithMaxTimeInDirectory(FileSystemPath directory, bool recursively);
}
public static class JetBrains.DotTrace.DataStructures.Other.FuncDataMapper : object {
    public static FuncDataMapper`2<TIn, TOut> Create(Func`2<TIn, TOut> func);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.DotTrace.DataStructures.Other.FuncDataMapper`2 : object {
    private Func`2<TIn, TOut> myFunc;
    public TOut Item { get; }
    public FuncDataMapper`2(Func`2<TIn, TOut> func);
    public sealed virtual TOut get_Item(TIn value);
}
public class JetBrains.DotTrace.DataStructures.Other.FunctionDataMapperFromFunc`1 : FuncDataMapper`2<FunctionUID, T> {
    public FunctionDataMapperFromFunc`1(Func`2<FunctionUID, T> func);
}
public interface JetBrains.DotTrace.DataStructures.Other.IChannelModel {
    public ThreadId Id { get; }
    public abstract virtual ThreadId get_Id();
}
public interface JetBrains.DotTrace.DataStructures.Other.IExpanderKeyMapping {
    public ExpanderKey CallTreeKey { get; }
    public abstract virtual ExpanderKey get_CallTreeKey();
}
public interface JetBrains.DotTrace.DataStructures.Other.IFunctionDataMapper`1 {
}
public interface JetBrains.DotTrace.DataStructures.Other.IOrderedItem {
    public IWriteableDataNotifier`1<int> Order { get; }
    public IDataNotifier`1<bool> IsVisible { get; }
    public abstract virtual IWriteableDataNotifier`1<int> get_Order();
    public abstract virtual IDataNotifier`1<bool> get_IsVisible();
}
public interface JetBrains.DotTrace.DataStructures.Other.IProviderContainerMonitor`1 {
    public abstract virtual void IntentionalStateChange(TProvider newState);
}
public interface JetBrains.DotTrace.DataStructures.Other.ISavedStateListValueMonitor`1 {
    public abstract virtual void ValueAdded(T value);
    public abstract virtual void ValueRemoved(T value);
    public abstract virtual void ListCleared();
}
public interface JetBrains.DotTrace.DataStructures.Other.IThreadOrProcessNameProvider {
}
public interface JetBrains.DotTrace.DataStructures.Other.IViewportRanges {
    public IDataControllerContainer`1<ModelRangeDouble> VisibleRange { get; }
    public IDataController`1<ModelRangeDouble> TotalRange { get; }
    public IDataProvider`1<ModelRange> VisibleModelRange { get; }
    public IDataProvider`1<bool> IsTotalRangeVisible { get; }
    public ulong MinimumVisibleModelRangeLength { get; }
    public abstract virtual IDataControllerContainer`1<ModelRangeDouble> get_VisibleRange();
    public abstract virtual IDataController`1<ModelRangeDouble> get_TotalRange();
    public abstract virtual IDataProvider`1<ModelRange> get_VisibleModelRange();
    public abstract virtual IDataProvider`1<bool> get_IsTotalRangeVisible();
    public abstract virtual ulong get_MinimumVisibleModelRangeLength();
}
public class JetBrains.DotTrace.DataStructures.Other.MethodsListItemModel : object {
    [CompilerGeneratedAttribute]
private FunctionUIDm <Fuid>k__BackingField;
    [CompilerGeneratedAttribute]
private NamePair <NamePair>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OwnPayloadFormatted>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TotalPayloadFormatted>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Calls>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMergedNode>k__BackingField;
    [CompilerGeneratedAttribute]
private Percents <Percents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OwnPayloadEqualsTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OwnPayloadTooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TotalPayloadTooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSystem>k__BackingField;
    public FunctionUIDm Fuid { get; }
    public NamePair NamePair { get; }
    public string OwnPayloadFormatted { get; }
    public string TotalPayloadFormatted { get; }
    [CanBeNullAttribute]
public string Calls { get; }
    public bool IsMergedNode { get; }
    public Percents Percents { get; }
    public bool OwnPayloadEqualsTotal { get; }
    public string OwnPayloadTooltip { get; }
    public string TotalPayloadTooltip { get; }
    public bool IsSystem { get; }
    public MethodsListItemModel(FunctionUIDm fuid, NamePair namePair, string ownPayloadFormatted, string totalPayloadFormatted, string calls, bool isMergedNode, Percents percents, bool ownPayloadEqualsTotal, string ownPayloadTooltip, string totalPayloadTooltip, bool isSystem);
    [CompilerGeneratedAttribute]
public FunctionUIDm get_Fuid();
    [CompilerGeneratedAttribute]
public NamePair get_NamePair();
    [CompilerGeneratedAttribute]
public string get_OwnPayloadFormatted();
    [CompilerGeneratedAttribute]
public string get_TotalPayloadFormatted();
    [CompilerGeneratedAttribute]
public string get_Calls();
    [CompilerGeneratedAttribute]
public bool get_IsMergedNode();
    [CompilerGeneratedAttribute]
public Percents get_Percents();
    [CompilerGeneratedAttribute]
public bool get_OwnPayloadEqualsTotal();
    [CompilerGeneratedAttribute]
public string get_OwnPayloadTooltip();
    [CompilerGeneratedAttribute]
public string get_TotalPayloadTooltip();
    [CompilerGeneratedAttribute]
public bool get_IsSystem();
}
public class JetBrains.DotTrace.DataStructures.Other.NodeDescriptor : ValueType {
    public int Index;
    public int Version;
    public static NodeDescriptor Stub;
    public NodeDescriptor(int index, int version);
    private static NodeDescriptor();
    public bool Equals(NodeDescriptor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(NodeDescriptor left, NodeDescriptor right);
    public static bool op_Inequality(NodeDescriptor left, NodeDescriptor right);
}
public class JetBrains.DotTrace.DataStructures.Other.NodeListDescriptor : ValueType {
    public List`1<int> Indices;
    public int Version;
    public NodeListDescriptor(List`1<int> indices, int version);
}
public class JetBrains.DotTrace.DataStructures.Other.NormalizedProgress : object {
    private static ILogger ourLogger;
    private Action`2<int, string> myStartProgress;
    private Action myAdvanceOneStep;
    private Action myDispose;
    private int myCurrentStep;
    private int myPreviousStep;
    private int myStepsCount;
    private long myTotalValue;
    private string myMessage;
    public NormalizedProgress(IExecutionController controller, long totalValue, int stepsCount, string message);
    public NormalizedProgress(IProgressIndicator controller, long totalValue, int stepsCount, string message);
    private static NormalizedProgress();
    private NormalizedProgress StartProgress(long totalValue, int stepsCount, string message);
    public void AdvanceProgress(long currentValue);
    [LocalizableAttribute("False")]
public void AdvanceProgress(long currentValue, Action`1<string> log);
    public sealed virtual void Dispose();
}
public class JetBrains.DotTrace.DataStructures.Other.Overview.InformationBlock : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ViewModel>k__BackingField;
    [CompilerGeneratedAttribute]
private object <TitleViewModel>k__BackingField;
    public string Title { get; }
    public object ViewModel { get; }
    public object TitleViewModel { get; }
    public InformationBlock(string title, object viewModel, object titleViewModel);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public object get_ViewModel();
    [CompilerGeneratedAttribute]
public object get_TitleViewModel();
}
public class JetBrains.DotTrace.DataStructures.Other.Overview.InformationLine : object {
    private string myKey;
    private string myValue;
    public string Key { get; }
    public string Value { get; }
    public InformationLine(string key, string value);
    public string get_Key();
    public string get_Value();
}
public class JetBrains.DotTrace.DataStructures.Other.Overview.InformationTile : object {
    private bool myShowHiddenContent;
    [CompilerGeneratedAttribute]
private IEnumerable`1<InformationLine> <VisibleLines>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<InformationLine> <HiddenLines>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <ToggleHiddenLines>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public IEnumerable`1<InformationLine> VisibleLines { get; }
    public IEnumerable`1<InformationLine> HiddenLines { get; }
    public bool HasHiddenContent { get; }
    public bool ShowHiddenContent { get; }
    public ICommand ToggleHiddenLines { get; }
    public InformationTile(IEnumerable`1<InformationLine> visibleLines, IEnumerable`1<InformationLine> hiddenLines);
    private void ChangeHiddenLineState();
    [CompilerGeneratedAttribute]
public IEnumerable`1<InformationLine> get_VisibleLines();
    [CompilerGeneratedAttribute]
public IEnumerable`1<InformationLine> get_HiddenLines();
    public bool get_HasHiddenContent();
    public bool get_ShowHiddenContent();
    [CompilerGeneratedAttribute]
public ICommand get_ToggleHiddenLines();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__1_0();
}
public class JetBrains.DotTrace.DataStructures.Other.Overview.SnapshotOverviewStatistics : object {
    public int ModulesCount;
    public int FunctionsCount;
    public int ThreadsCount;
    public SnapshotOverviewStatistics(int modulesCount, int functionsCount, int threadsCount);
}
public class JetBrains.DotTrace.DataStructures.Other.PayloadAggregationResult`2 : object {
    public TPayload TotalPayload;
    public IDictionary`2<TKey, TPayload> KeyPayloads;
    [NotNullAttribute]
public IReadOnlyCollection`1<TKey> Keys;
    [NotNullAttribute]
public Func`2<TKey, TPayload> GetPayload;
    public PayloadType PayloadType;
    public void Clear();
    [CompilerGeneratedAttribute]
private TPayload <.ctor>b__5_0(TKey a);
}
public enum JetBrains.DotTrace.DataStructures.Other.PayloadMode : Enum {
    public int value__;
    public static PayloadMode Total;
    public static PayloadMode OwnPlusSystem;
    public static PayloadMode Own;
}
public class JetBrains.DotTrace.DataStructures.Other.Payloads.CallCountPayloadPresenter : object {
    private Func`2<DotTracePayload, long> myGetCallsCount;
    private bool myShowPlusSign;
    private NumberFormatInfo myNumberFormat;
    public string DefaultMeasure { get; }
    public CallCountPayloadPresenter(Func`2<DotTracePayload, long> getCallsCount, bool showPlusSign);
    public long CallCountsNormalized(DotTracePayload nodePayload);
    public void NumberFormatted(DotTracePayload nodePayload, StringBuilder result);
    private void CallsWord(DotTracePayload nodePayload, StringBuilder result);
    public sealed virtual string get_DefaultMeasure();
    public sealed virtual FormattedPayload Format(DotTracePayload nodePayload);
}
public class JetBrains.DotTrace.DataStructures.Other.Payloads.DotTracePayloadPresenters : object {
    private bool myIsSamplingSnapshot;
    private DotTraceRawPayloadConverter myRawPayloadConverter;
    private IPayloadPresenter`1<DotTracePayload> myTimePayloadPresenter;
    private CallCountPayloadPresenter myCallsPresenter;
    private IReadOnlyCollection`1<SnapshotPayloadPresenter`1<DotTracePayload>> mySplittedTimePresenters;
    private IReadOnlyCollection`1<SnapshotPayloadPresenter`1<DotTracePayload>> mySplittedCallsPresenters;
    private CallCountPayloadPresenter CallsPresenter { get; }
    public DotTracePayloadPresenters(bool isSamplingSnapshot, DotTraceRawPayloadConverter rawPayloadConverter);
    public sealed virtual IPayloadPresenter`1<DotTracePayload> GetPresenter(PayloadType type);
    public sealed virtual IReadOnlyCollection`1<SnapshotPayloadPresenter`1<DotTracePayload>> GetSplitPresenters(PayloadType type);
    private List`1<SnapshotPayloadPresenter`1<DotTracePayload>> BuildTimeSplitPresenters(PayloadType type, string comparisonSnapshotHeader);
    private List`1<SnapshotPayloadPresenter`1<DotTracePayload>> BuildCallsSplitPresenters(PayloadType type, string comparisonSnapshotHeader);
    private CallCountPayloadPresenter get_CallsPresenter();
    public sealed virtual double ToNormalizedValue(PayloadType type, DotTracePayload payload);
    public sealed virtual DotTracePayload CalculateAverage(PayloadType type, DotTracePayload sum, DotTracePayload count);
    public sealed virtual double GetMaxSingleSnapshotNormalizedMainValue(PayloadType type, DotTracePayload payload);
    public sealed virtual double CalculatePercent(PayloadType type, DotTracePayload payload, DotTracePayload total);
    private double CalculateTimePercent(DotTracePayload payload, DotTracePayload total, int mode);
}
public class JetBrains.DotTrace.DataStructures.Other.Payloads.DotTraceRawPayloadConverter : object {
    private ITickTimeConverter myTickTimeConverter1;
    private string mySnapshot1Header;
    private ITickTimeConverter myTickTimeConverter2;
    private string mySnapshot2Header;
    private int mySign;
    public bool ShowPlusSign { get; }
    public DotTraceRawPayloadConverter(ITickTimeConverter tickTimeConverter1, ITickTimeConverter tickTimeConverter2, string snapshot1Header, string snapshot2Header, bool reverse);
    public bool get_ShowPlusSign();
    public double GetNormalizedMainValue(DotTracePayload payload);
    public bool IsFirstSnapshotExist();
    public double GetFirstTime(DotTracePayload payload);
    public long GetFirstCallCount(DotTracePayload payload);
    public string GetFirstHeader();
    public bool IsSecondSnapshotExist();
    public double GetSecondTime(DotTracePayload payload);
    public long GetSecondCallCount(DotTracePayload payload);
    public string GetSecondHeader();
    public bool BothSnapshotExist();
    public double GetMaxSingleSnapshotNormalizedMainValue(DotTracePayload payload);
    public long GetCallsCount(DotTracePayload payload);
}
[IsReadOnlyAttribute]
public class JetBrains.DotTrace.DataStructures.Other.Payloads.FormattedPayload : ValueType {
    public string Text;
    public string Tooltip;
    public FormattedPayload(string text, string tooltip);
    [LocalizableAttribute("False")]
public virtual string ToString();
    public bool IsEmpty();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DataStructures.Other.Payloads.FormattedPayloadEx : object {
    [ExtensionAttribute]
public static FormattedPayloadViewModel ToViewModel(FormattedPayload payload);
}
public class JetBrains.DotTrace.DataStructures.Other.Payloads.FormattedPayloadViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private string <Tooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <OnClick>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Payload>k__BackingField;
    public string Tooltip { get; }
    public ICommand OnClick { get; public set; }
    public string Payload { get; }
    public FormattedPayloadViewModel(string payload, string tooltip);
    [CompilerGeneratedAttribute]
public string get_Tooltip();
    [CompilerGeneratedAttribute]
public ICommand get_OnClick();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnClick(ICommand value);
    [CompilerGeneratedAttribute]
public string get_Payload();
    [LocalizableAttribute("False")]
public virtual string ToString();
}
public class JetBrains.DotTrace.DataStructures.Other.Payloads.FormattedPayloadWithCallCountViewModel : AAutomation {
    private string myTotalPayload;
    private string myCallsCount;
    [CompilerGeneratedAttribute]
private string <Tooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <OnClick>k__BackingField;
    public string Payload { get; }
    public string Tooltip { get; }
    public ICommand OnClick { get; public set; }
    public bool ShowCallsCount { get; }
    public object CallsCount { get; }
    public FormattedPayloadWithCallCountViewModel(string totalPayload, string callsCount, string tooltip);
    public string get_Payload();
    [CompilerGeneratedAttribute]
public string get_Tooltip();
    [CompilerGeneratedAttribute]
public ICommand get_OnClick();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnClick(ICommand value);
    public bool get_ShowCallsCount();
    public object get_CallsCount();
    [LocalizableAttribute("False")]
public virtual string ToString();
}
public interface JetBrains.DotTrace.DataStructures.Other.Payloads.IFormattedPayloadViewModel {
    unknown ICommand OnClick {public set; }
    public abstract virtual void set_OnClick(ICommand value);
}
public interface JetBrains.DotTrace.DataStructures.Other.Payloads.IPayloadNormalizer`1 {
    public abstract virtual double ToNormalizedValue(PayloadType type, TPayload payload);
    public abstract virtual double CalculatePercent(PayloadType type, TPayload payload, TPayload total);
    public abstract virtual double GetMaxSingleSnapshotNormalizedMainValue(PayloadType type, TPayload payload);
    public abstract virtual TPayload CalculateAverage(PayloadType type, TPayload sum, TPayload count);
}
public interface JetBrains.DotTrace.DataStructures.Other.Payloads.IPayloadPresenter`1 {
    public string DefaultMeasure { get; }
    public abstract virtual string get_DefaultMeasure();
    public abstract virtual FormattedPayload Format(TPayload nodePayload);
}
public interface JetBrains.DotTrace.DataStructures.Other.Payloads.IPayloadPresenters`1 {
    public abstract virtual IPayloadPresenter`1<TPayload> GetPresenter(PayloadType type);
    public abstract virtual IReadOnlyCollection`1<SnapshotPayloadPresenter`1<TPayload>> GetSplitPresenters(PayloadType type);
}
public interface JetBrains.DotTrace.DataStructures.Other.Payloads.IPayloadPresentersProvider`1 {
}
public interface JetBrains.DotTrace.DataStructures.Other.Payloads.IRawPayloadPresenters {
    public abstract virtual PayloadPresenter GetPresenter(PayloadType type);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DataStructures.Other.Payloads.PayloadPresenterEx : object {
    [ExtensionAttribute]
public static string Text(IPayloadPresenter`1<TPayload> presenter, TPayload nodePayload);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DataStructures.Other.Payloads.PayloadPresentersEx : object {
    [ExtensionAttribute]
public static IFormattedPayloadViewModel Print(IPayloadPresenters`1<TPayload> presenters, PayloadType type, TPayload payload, string secondaryTooltip);
    [ExtensionAttribute]
public static IDataProvider`1<bool> HaveCallsInfoProvider(IDataProvider`1<IPayloadPresenters`1<TPayload>> payloadsPresenterProvider);
}
public class JetBrains.DotTrace.DataStructures.Other.Payloads.RawPayloadPresenters : object {
    public static IRawPayloadPresenters Instance;
    private static PayloadPresenter ourSize;
    private static PayloadPresenter ourSizeKb;
    private static PayloadPresenter ourEvents;
    private static PayloadPresenter ourThreads;
    private PayloadPresenter myTime;
    public RawPayloadPresenters(ITickTimeConverter tickTimeConverterContainer);
    private static RawPayloadPresenters();
    public sealed virtual PayloadPresenter GetPresenter(PayloadType type);
}
public class JetBrains.DotTrace.DataStructures.Other.Payloads.SnapshotPayloadPresenter`1 : ValueType {
    public string SnapshotHeader;
    public IPayloadPresenter`1<TPayload> Presenter;
}
public class JetBrains.DotTrace.DataStructures.Other.Payloads.TickBasedPayloadPresenter : object {
    private bool myIsSamplingSnapshot;
    private Func`2<DotTracePayload, double> myGetNanosecondsValue;
    private Func`2<DotTracePayload, long> myGetCallsCount;
    private bool myShowPlusSign;
    private PayloadPresenter myPresenterFullMeasured;
    private PayloadPresenter myPresenterPartlyMeasured;
    public string DefaultMeasure { get; }
    public TickBasedPayloadPresenter(bool isSamplingSnapshot, Func`2<DotTracePayload, double> getNanosecondsValue, Func`2<DotTracePayload, long> getCallsCount, bool showPlusSign);
    public sealed virtual FormattedPayload Format(DotTracePayload nodePayload);
    public sealed virtual string get_DefaultMeasure();
}
public class JetBrains.DotTrace.DataStructures.Other.Payloads.TimelinePayloadPresenter : object {
    private PayloadPresenter myPresenter;
    public string DefaultMeasure { get; }
    public TimelinePayloadPresenter(PayloadPresenter presenter);
    public sealed virtual FormattedPayload Format(LongPayload payload);
    public sealed virtual string get_DefaultMeasure();
}
public class JetBrains.DotTrace.DataStructures.Other.Payloads.TimelinePayloadPresenters : object {
    private ITickTimeConverter myTickConverter;
    private IRawPayloadPresenters myPresenters;
    private ConcurrentDictionary`2<PayloadType, TimelinePayloadPresenter> myPayloadPresenters;
    public TimelinePayloadPresenters(ITickTimeConverter tickConverter);
    protected TimelinePayloadPresenters(SerializationInfo info, StreamingContext context);
    private static ITickTimeConverter Deserialize(SerializationInfo info);
    public sealed virtual IPayloadPresenter`1<LongPayload> GetPresenter(PayloadType type);
    public sealed virtual IReadOnlyCollection`1<SnapshotPayloadPresenter`1<LongPayload>> GetSplitPresenters(PayloadType type);
    public sealed virtual double ToNormalizedValue(PayloadType type, LongPayload payload);
    public sealed virtual double CalculatePercent(PayloadType type, LongPayload payload, LongPayload total);
    public sealed virtual double GetMaxSingleSnapshotNormalizedMainValue(PayloadType type, LongPayload payload);
    public sealed virtual LongPayload CalculateAverage(PayloadType type, LongPayload sum, LongPayload count);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
private TimelinePayloadPresenter <GetPresenter>b__6_0(PayloadType t);
}
public class JetBrains.DotTrace.DataStructures.Other.PayloadsMap`2 : object {
    public TPayload Total;
    public Func`2<TKey, TPayload> GetPayload;
    [NotNullAttribute]
public IReadOnlyCollection`1<TKey> Keys;
    public PayloadsMap`2(IReadOnlyCollection`1<TKey> keys, Func`2<TKey, TPayload> getPayload, TPayload total);
    internal PayloadsMap`2(SerializationInfo info, StreamingContext context);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    [LocalizableAttribute("False")]
public void DumpToLog();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DataStructures.Other.PayloadsMapEx : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static PresentablePayloads`2<TKey, TPayload> Readonly(PayloadAggregationResult`2<TKey, TPayload> r);
    [ExtensionAttribute]
public static PresentablePayloads`2<TKey, TPayload> ToPresentablePayloads(PayloadsMap`2<TKey, TPayload> map, PayloadType payloadType);
    [ExtensionAttribute]
[NotNullAttribute]
public static PayloadsMap`2<TKey, TPayload> ToPayloadsMap(IDictionary`2<TKey, TPayload> map, TPayload total);
    [ExtensionAttribute]
[NotNullAttribute]
public static PayloadsMap`2<TKey, TPayload> ToPayloadsMap(IReadOnlyDictionary`2<TKey, TPayload> map, TPayload total);
    [ExtensionAttribute]
public static PayloadsMap`2<TKey, long> Round(PayloadsMap`2<TKey, double> map);
}
public enum JetBrains.DotTrace.DataStructures.Other.PayloadType : Enum {
    public int value__;
    public static PayloadType Time;
    public static PayloadType Events;
    public static PayloadType Threads;
    public static PayloadType Size;
    public static PayloadType SizeKb;
    public static PayloadType Calls;
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DataStructures.Other.PayloadTypeEx : object {
    [ExtensionAttribute]
public static string GetDefaultMeasure(PayloadType type);
    [ExtensionAttribute]
public static IDataProvider`1<string> ToDefaultMeasure(IDataProvider`1<PayloadType> type);
}
public class JetBrains.DotTrace.DataStructures.Other.PresentablePayload`1 : object {
    public TPayload Payload;
    public TPayload Total;
    public PayloadType PayloadType;
    public PresentablePayload`1(TPayload payload, TPayload total, PayloadType payloadType);
    [LocalizableAttribute("False")]
public virtual string ToString();
}
public class JetBrains.DotTrace.DataStructures.Other.PresentablePayloads`2 : object {
    [NotNullAttribute]
public PayloadsMap`2<TKey, TPayload> Payloads;
    public PayloadType PayloadType;
    public PresentablePayloads`2(PayloadsMap`2<TKey, TPayload> payloads, PayloadType payloadType);
    [LocalizableAttribute("False")]
public virtual string ToString();
}
public class JetBrains.DotTrace.DataStructures.Other.PresentablePayloadsWithPresenter`2 : object {
    [NotNullAttribute]
public Func`2<TKey, TPayload> GetPayload;
    public Func`2<TKey, IPayloadPresenter`1<TPayload>> GetPresenter;
    public PresentablePayloadsWithPresenter`2(Func`2<TKey, TPayload> getPayload, Func`2<TKey, IPayloadPresenter`1<TPayload>> getPresenter);
}
public class JetBrains.DotTrace.DataStructures.Other.Range`1 : ValueType {
    public TOffset Left;
    public TOffset Right;
    public Range`1(TOffset left, TOffset right);
}
public static class JetBrains.DotTrace.DataStructures.Other.RangeEx : object {
    public static Range`1<TOffset> Create(TOffset left, TOffset right);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.DotTrace.DataStructures.Other.RangeList`1 : object {
    private List`1<Pair`2<T, T>> myList;
    private IComparer`1<T> myComparer;
    private Func`3<T, T, bool> myIsNextOffset;
    public int Count { get; }
    public Pair`2<T, T> Item { get; public set; }
    public RangeList`1(List`1<Pair`2<T, T>> list, IComparer`1<T> comparer, Func`3<T, T, bool> isNextOffset);
    public RangeList`1(IComparer`1<T> comparer, Func`3<T, T, bool> isNextOffset);
    public RangeList`1(IComparer`1<T> comparer, Func`3<T, T, bool> isNextOffset, List`1<Pair`2<T, T>> pairsList);
    public bool ContainValue(T value);
    public void AssertIsSorted();
    public IEnumerable`1<T> GenerateEnumerable(Func`2<T, Pair`2<T, bool>> moveNext);
    private void Add(Pair`2<T, T> range);
    public void AddToLastRange(RangeList`1<T> rangeList);
    public void AddToLastRange(Pair`2<T, T> range);
    public void AddToLastRange(T offset);
    public sealed virtual IEnumerator`1<Pair`2<T, T>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
    [LocalizableAttribute("False")]
public string ToString(Func`2<T, string> toString);
    public sealed virtual int get_Count();
    public sealed virtual Pair`2<T, T> get_Item(int index);
    public void set_Item(int index, Pair`2<T, T> value);
}
public class JetBrains.DotTrace.DataStructures.Other.RootAndRange`1 : ValueType {
    public TOffset RootOffset;
    public Range`1<TOffset> Range;
}
public interface JetBrains.DotTrace.DataStructures.Other.Selection.ISelectedRangeContainer {
    public IDataProvider`1<bool> HasSelectedRange { get; }
    public abstract virtual IDataProvider`1<bool> get_HasSelectedRange();
}
public interface JetBrains.DotTrace.DataStructures.Other.Selection.ISelectedTimeRangeActionsExecutor {
    public abstract virtual bool CanClearTimeSelection();
    public abstract virtual void ClearTimeSelection();
}
public enum JetBrains.DotTrace.DataStructures.Other.SnapshotOpeningScenario : Enum {
    public int value__;
    public static SnapshotOpeningScenario CommandLine;
    public static SnapshotOpeningScenario OpenDialog;
    public static SnapshotOpeningScenario IdeOpenSnapshot;
    public static SnapshotOpeningScenario AfterProfiling;
    public static SnapshotOpeningScenario ReprocessDialog;
}
public enum JetBrains.DotTrace.DataStructures.Other.SortMode : Enum {
    public int value__;
    public static SortMode None;
    public static SortMode Payload;
    public static SortMode Name;
    public static SortMode Additional;
}
public class JetBrains.DotTrace.DataStructures.Other.SortState : object {
    public SortMode Mode;
    [NotNullAttribute]
public IReadOnlyDictionary`2<ThreadId, int> CustomOrder;
    [NotNullAttribute]
public ISet`1<ThreadId> PinnedThreads;
    public SortState(SortMode mode, IReadOnlyDictionary`2<ThreadId, int> customOrder, ISet`1<ThreadId> pinnedThreads);
    public sealed virtual bool Equals(SortState other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.DotTrace.DataStructures.Other.SourceViewNavigationInfo : object {
    [CompilerGeneratedAttribute]
private ModuleDebugInfo <DebugInfos>k__BackingField;
    [CompilerGeneratedAttribute]
private DecompileInfo <DecompileInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private NativeDecompileInfo <NativeDecompileInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private FunctionSignatureInfo <SignatureInfo>k__BackingField;
    public ModuleDebugInfo DebugInfos { get; public set; }
    [CanBeNullAttribute]
public DecompileInfo DecompileInfo { get; public set; }
    [CanBeNullAttribute]
public NativeDecompileInfo NativeDecompileInfo { get; public set; }
    [CanBeNullAttribute]
public FunctionSignatureInfo SignatureInfo { get; public set; }
    [CompilerGeneratedAttribute]
public ModuleDebugInfo get_DebugInfos();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DebugInfos(ModuleDebugInfo value);
    [CompilerGeneratedAttribute]
public DecompileInfo get_DecompileInfo();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DecompileInfo(DecompileInfo value);
    [CompilerGeneratedAttribute]
public NativeDecompileInfo get_NativeDecompileInfo();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NativeDecompileInfo(NativeDecompileInfo value);
    [CompilerGeneratedAttribute]
public FunctionSignatureInfo get_SignatureInfo();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SignatureInfo(FunctionSignatureInfo value);
}
public class JetBrains.DotTrace.DataStructures.Other.TaskId : ValueType {
    public static TaskId NoId;
    private int myValue;
    public TaskId(int value);
    private static TaskId();
    public static int op_Explicit(TaskId taskId);
    public static ulong op_Explicit(TaskId taskId);
    public static TaskId op_Explicit(int taskId);
    public static TaskId op_Explicit(ulong taskId);
    public sealed virtual bool Equals(TaskId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(TaskId left, TaskId right);
    public static bool op_Inequality(TaskId left, TaskId right);
}
public class JetBrains.DotTrace.DataStructures.Other.ThreadOrProcessNameModel : object {
    public UInt32 Id;
    [CanBeNullAttribute]
public string Name;
    [CanBeNullAttribute]
public string ExtendedName;
    public ThreadPresentation Type;
    public ThreadOrProcessNameModel(UInt32 id, string name, ThreadPresentation type, string extendedName);
}
public enum JetBrains.DotTrace.DataStructures.Other.ThreadPresentation : Enum {
    public int value__;
    public static ThreadPresentation Id;
    public static ThreadPresentation Type;
    public static ThreadPresentation Name;
    public static ThreadPresentation Process;
    public static ThreadPresentation NoInfo;
}
public class JetBrains.DotTrace.DataStructures.Other.TypedPayload`1 : object {
    public T Payload;
    public PayloadType Type;
    public TypedPayload`1(T payload, PayloadType type);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DataStructures.Other.ViewportRangesEx : object {
    [ExtensionAttribute]
public static void DropVisualRange(IViewportRanges viewportRanges);
    [ExtensionAttribute]
public static void Zoom(IViewportRanges viewportRanges, double zoomRatio);
}
public interface JetBrains.DotTrace.DataStructures.Other.Viewports.IVisibleRangeContainer {
}
[DebuggerDisplayAttribute("{Payload} {Item}")]
public class JetBrains.DotTrace.DataStructures.Other.WithPayload`2 : ValueType {
    public T Item;
    public TPayload Payload;
    public WithPayload`2(T item, TPayload payload);
}
[FlagsAttribute]
public enum JetBrains.DotTrace.DataStructures.Payloads.CallTreeFlags : Enum {
    public ushort value__;
    public static CallTreeFlags MeasurePartly;
    public static CallTreeFlags Unmanaged;
    public static CallTreeFlags RecursiveRoot;
    public static CallTreeFlags Recursive;
    public static CallTreeFlags Negative;
    public static CallTreeFlags IsRoot;
    public static CallTreeFlags Overflow;
}
public class JetBrains.DotTrace.DataStructures.Payloads.DotTraceDalPayload : ValueType {
    public long OwnPayload;
    public long TotalPayload;
    public UInt32 CallCount;
    public CallTreeFlags Flags;
    public DotTraceDalPayload(long ownPayload, UInt32 callCount);
    public DotTraceDalPayload(long ownPayload, long totalPayload, UInt32 callCount, CallTreeFlags flags);
    public virtual int GetHashCode();
    [LocalizableAttribute("False")]
public virtual string ToString();
    public sealed virtual bool Equals(DotTraceDalPayload other);
}
public class JetBrains.DotTrace.DataStructures.Payloads.FunctionPayloads`1 : ValueType {
    public TPayload TotalPayloadRecursionSubtracted;
    public TPayload OwnPlusNonFunctionPayload;
    public TPayload OwnPlusSystemPayload;
    public TPayload ClassPayload;
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.DataStructures.Payloads.FunctionPayloadsEx : object {
    [ExtensionAttribute]
public static FunctionPayloads`1<TPayload> AddPayload(FunctionPayloads`1<TPayload> payload1, FunctionPayloads`1<TPayload> payload2);
}
public class JetBrains.DotTrace.DataStructures.PlainList.PlainListCollectionInfo : object {
    public PayloadType PayloadType;
    public int FunctionCount;
}
public static class JetBrains.DotTrace.DataStructures.PlainList.PlainListDataConstants : object {
    public static DataConstant`1<Boxed`1<int>> SelectedModelIndex;
    public static DataConstant`1<Action`1<int>> ShowNodeByModelIndexExecutor;
    private static PlainListDataConstants();
}
public class JetBrains.DotTrace.DataStructures.PlainList.PlainListNodeData`1 : ValueType {
    [CompilerGeneratedAttribute]
private int <ModelIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ParentModelIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ChildrenCount>k__BackingField;
    public PlainListNodeType NodeType;
    public string Namespace;
    public string ClassName;
    public string MethodName;
    public FunctionPayloads`1<TPayload> Payloads;
    public Nullable`1<FunctionUIDm> Fuid;
    public bool IsSystem;
    public int ModelIndex { get; public set; }
    public int ParentModelIndex { get; public set; }
    public int ChildrenCount { get; public set; }
    public PlainListNodeData`1(int modelIndex, int parentModelIndex, PlainListNodeType nodeType, string ns, string className, string methodName, FunctionPayloads`1<TPayload> payloads, Nullable`1<FunctionUIDm> fuid, bool isSystem);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual int get_ModelIndex();
    [CompilerGeneratedAttribute]
public void set_ModelIndex(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual int get_ParentModelIndex();
    [CompilerGeneratedAttribute]
public void set_ParentModelIndex(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual int get_ChildrenCount();
    [CompilerGeneratedAttribute]
public void set_ChildrenCount(int value);
}
public enum JetBrains.DotTrace.DataStructures.PlainList.PlainListNodeType : Enum {
    public int value__;
    public static PlainListNodeType None;
    public static PlainListNodeType Class;
    public static PlainListNodeType Namespace;
    public static PlainListNodeType Assembly;
}
public class JetBrains.DotTrace.DataStructures.resources.DotTraceCore.ThemedIcons.DotTraceCoreThemedIcons : object {
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.DotTrace.DataStructures.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string CallTreePresentationSettingsSettingDescription { get; }
    public static string DirectorySettingDescription { get; }
    public static string DotTraceIdeIntegrationSettingsSettingDescription { get; }
    public static string DotTraceOptionsSettingDescription { get; }
    public static string FilterSnapshotsBySolutionSettingDescription { get; }
    public static string MergeMissedCallstackTypesSettingDescription { get; }
    public static string OpenSaveDialogSettingsSettingDescription { get; }
    public static string SaveDirectorySettingDescription { get; }
    public static string ShowOtherSubsystemsWhenFilterAppliedSettingDescription { get; }
    public static string ShowUnresolvedCallFramesSettingDescription { get; }
    public static string OpenInPerformance_ActionText { get; }
    public static string AsyncSupportSettingDescription { get; }
    public static string UseSteppedBackTraceDescription { get; }
    public static string GroupByThreadSettingDescription { get; }
    public static string PlainListPresentationSettingsSettingDescription { get; }
    public static string FollowSelectionSettingDescription { get; }
    public static string ShowSystemFunctionsSettingDescription { get; }
    public static string ShowSystemFunctionsInPlainListSettingDescription { get; }
    public static string SortByTotalSettingDescription { get; }
    public static string AutoShowSystemMethodsSettingDescription { get; }
    public static string SearchAutoHideSettingDescription { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_CallTreePresentationSettingsSettingDescription();
    public static string get_DirectorySettingDescription();
    public static string get_DotTraceIdeIntegrationSettingsSettingDescription();
    public static string get_DotTraceOptionsSettingDescription();
    public static string get_FilterSnapshotsBySolutionSettingDescription();
    public static string get_MergeMissedCallstackTypesSettingDescription();
    public static string get_OpenSaveDialogSettingsSettingDescription();
    public static string get_SaveDirectorySettingDescription();
    public static string get_ShowOtherSubsystemsWhenFilterAppliedSettingDescription();
    public static string get_ShowUnresolvedCallFramesSettingDescription();
    public static string get_OpenInPerformance_ActionText();
    public static string get_AsyncSupportSettingDescription();
    public static string get_UseSteppedBackTraceDescription();
    public static string get_GroupByThreadSettingDescription();
    public static string get_PlainListPresentationSettingsSettingDescription();
    public static string get_FollowSelectionSettingDescription();
    public static string get_ShowSystemFunctionsSettingDescription();
    public static string get_ShowSystemFunctionsInPlainListSettingDescription();
    public static string get_SortByTotalSettingDescription();
    public static string get_AutoShowSystemMethodsSettingDescription();
    public static string get_SearchAutoHideSettingDescription();
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.DotTrace.DataStructures.Resources.UIResources : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string DaysSingularPluralForm { get; }
    public static string SaveSnapshot_Question { get; }
    public static string SavingSnapshot { get; }
    public static string AutoSaveCheckBoxText { get; }
    public static string AutoCleanupByDateCheckBoxText { get; }
    public static string AutoCleanupBySizeCheckBoxText { get; }
    public static string UseCrossPlatformViewer { get; }
    public static string UseCrossPlatformViewerComment { get; }
    public static string HideSystemFunctionsButtonTooltip { get; }
    public static string FollowSelectionButtonTooltip { get; }
    public static string FailedToOpenSnapshot_SnapshotNewerThanViewer { get; }
    public static string FailedToOpenSnapshot_SnapshotNewerThanViewer_LinkText { get; }
    public static string FailedToOpenSnapshot_SnapshotNewerThanViewer_LinkUri { get; }
    public static string FailedToOpenSnapshot_DownloadDotTrace241_Notification { get; }
    public static string FailedToOpenSnapshot_DownloadDotTrace241 { get; }
    public static string FailedToOpenSnapshot_DownloadDotTrace241_LinkText { get; }
    public static string FailedToOpenSnapshot_DownloadDotTrace241_LinkUri { get; }
    public static string FailedToOpenSnapshot_UnsupportedFormat { get; }
    public static string FailedToOpenSnapshot_BrokenSnapshot { get; }
    public static string FailedToOpenSnapshot_UnsupportedCpuType { get; }
    public static string FailedToOpenSnapshot_UnsupportedLinuxLibC { get; }
    public static string SourceViewNotAvailable { get; }
    public static string LostEventsFound { get; }
    public static string AsyncAwaitSupportWillBeDisabled { get; }
    public static string PossibleCauseAlreadyInUse { get; }
    public static string ProviderInUse { get; }
    public static string PossibleCauseTooManyEvents { get; }
    public static string EventSessionInterrupted { get; }
    public static string NoThreads { get; }
    public static string AllThreadsHaveBeenStopped { get; }
    public static string ExceptionsDuringProcessing { get; }
    public static string MetadataProcessingHasFailed { get; }
    public static string DeleteSnapshotConfirmationMessage { get; }
    public static string DeleteSnapshotsConfirmationMessage { get; }
    public static string DeleteLaunchConfigurationError { get; }
    public static string DeleteSnapshotError { get; }
    public static string ExportSnapshotErrorTitle { get; }
    public static string ExportSnapshotError { get; }
    public static string TooManySnapshotsSimulatneously { get; }
    public static string ProfilingTestsMessage { get; }
    public static string ProfilingApiMessage { get; }
    public static string StartingTheProfilingSession { get; }
    public static string WaitingForWeb { get; }
    public static string WaitingForXRuntime { get; }
    public static string NetOrNetCore { get; }
    public static string Unity20183_OrLater { get; }
    public static string Mono { get; }
    public static string Managed { get; }
    public static string UnknownCallFrameTooltip { get; }
    public static string CallTreeSystemUnfold { get; }
    public static string CallTreeSystemFold { get; }
    public static string CallTreeRecursiveFold { get; }
    public static string CallTreeRecursiveUnfold { get; }
    public static string SnapshotList_NoSnapshotsCollected { get; }
    public static string SnapshotList_NoSnapshotsMatchingTheFilterFound { get; }
    public static string SnapshotList_GettingStartedWithDotTrace { get; }
    public static string ReadonlySnapshotToTemporaryStorage { get; }
    public static string NetTraceFileToTemporaryStorage { get; }
    public static string HideSystemFunctionsButtonTooltipWhenDisabled { get; }
    public static string Comparison_ChangeSnapshotsOrderHint { get; }
    public static string Comparison_CloseExtraSnapshotHint { get; }
    public static string Comparison_OpenExtraSnapshotHint { get; }
    public static string Comparison_CloseExtraSnapshotText { get; }
    public static string PropertiesDialogTitle { get; }
    public static string PropertiesTableInstance { get; }
    public static string PropertiesTableScope { get; }
    public static string PropertiesParameters { get; }
    public static string PropertiesFullName { get; }
    public static string PropertiesModuleName { get; }
    public static string PropertiesModulePath { get; }
    public static string PropertiesTableNumberOfCalls { get; }
    public static string PropertiesTableTotalPayload { get; }
    public static string PropertiesTableAveragePayload { get; }
    public static string PropertiesTableOwnPayload { get; }
    public static string PropertiesTableOwnPlusSystemPayload { get; }
    public static string PropertiesCopyToClipboard { get; }
    public static string PropertiesClose { get; }
    public static string FlameGraph_ToggleButtonText { get; }
    public static string FlameGraph_ToggleButtonTooltip { get; }
    public static string CallTreeGrouped_ButtonText { get; }
    public static string CallTreeGrouped_ButtonTooltip { get; }
    public static string Backtraces_Header { get; }
    public static string CallTree_Header { get; }
    public static string Hotspots_Header { get; }
    public static string GroupByThread_Header { get; }
    public static string Hotspots_Header_UnderMethod { get; }
    public static string Hotspots_OwnPlusSystem { get; }
    public static string Hotspots_Own { get; }
    public static string Hotspots_Total { get; }
    public static string Hotspots_DefaultPayloadString { get; }
    public static string Filters_EventsHeader { get; }
    public static string Filters_All_Value { get; }
    public static string Filters_Off_Value { get; }
    public static string Filters_On_Value { get; }
    public static string Filters_Reset_ButtonText { get; }
    public static string Filters_Reset_ButtonTooltip { get; }
    public static string Filters_Enum_MultipleSelected { get; }
    public static string Filters_AllX { get; }
    public static string Filters_Popup_TooManyItems { get; }
    public static string CallTree_IncludeContinuations_Text { get; }
    public static string CallTree_IncludeContinuations_Tooltip { get; }
    public static string CallTree_IncludeAwaits_Text { get; }
    public static string CallTree_IncludeAwaits_Tooltip { get; }
    public static string CallTree_LoadingNodeText { get; }
    public static string SnapshotList_UnknownProfilingType { get; }
    public static string DiskManagement_LastOpened_Column { get; }
    public static string DiskManagement_Snapshot_Column { get; }
    public static string DiskManagement_ProfilingType_Column { get; }
    public static string DiskManagement_Created_Column { get; }
    public static string DiskManagement_Size_Column { get; }
    public static string DiskManagement_ManageStorage_LinkText { get; }
    public static string DiskManagement_ClearTemporarySnapshots_LinkText { get; }
    public static string DiskManagement_StorageContents_HeaderText { get; }
    public static string RiderActions_JumpToSource { get; }
    public static string RiderOptions_ShowNativeThreads { get; }
    public static string RiderOptions_OtherCategory { get; }
    public static string RiderOptions_ShowDiskManagement { get; }
    public static string SnapshotProcessing_TabHeader { get; }
    public static string SnapshotProcessing_SelectRowToSeeDetails { get; }
    public static string SnapshotProcessing_Processing_RowText { get; }
    public static string SnapshotProcessing_ProcessingWithPercent_RowText { get; }
    public static string SnapshotProcessing_ShowSnapshot_ButtonText { get; }
    public static string SnapshotProcessing_UnreliableDataInSnapshot { get; }
    public static string OpenSnapshotDialog_Title { get; }
    public static string OpenSnapshotDialog_SupportedFilesDescription { get; }
    public static string ConfigurationEditor_StartProfileUnavailable { get; }
    public static string ConfigurationEditor_AttachUnavailable { get; }
    public static string ConfigurationEditor_UnitTestProfilingUnavailable { get; }
    public static string ConfigurationEditor_TimeMeasurement { get; }
    public static string ConfigurationEditor_StartMode { get; }
    public static string ConfigurationEditor_ControlManually { get; }
    public static string ConfigurationEditor_ControlViaApi { get; }
    public static string ConfigurationEditor_AdvancedHeaderText { get; }
    public static string ConfigurationEditor_ConfigurationName_Label { get; }
    public static string ConfigurationEditor_SamplingUnstableOnEarlyNetCore { get; }
    public static string ConfigurationEditor_ConfigureSymbolServers_LinkText { get; }
    public static string ProcessingMessageLevel_Info { get; }
    public static string ProcessingMessageLevel_Warning { get; }
    public static string ProcessingMessageLevel_Error { get; }
    public static string ProcessingMessageLevel_Info_Plural { get; }
    public static string ProcessingMessageLevel_Warning_Plural { get; }
    public static string ProcessingMessageLevel_Error_Plural { get; }
    public static string Processing_Issues_Header { get; }
    public static string Payloads_MeasuredPartly { get; }
    public static string KnownEventTypes_Preemption_FullName { get; }
    public static string KnownEventTypes_Running_FullName { get; }
    public static string KnownEventTypes_BlockingGC_FullName { get; }
    public static string KnownEventTypes_GC_FullName { get; }
    public static string KnownEventTypes_RuntimeRunning_FullName { get; }
    public static string KnownEventTypes_OtherSuspends_FullName { get; }
    public static string KnownEventTypes_FileIO_FullName { get; }
    public static string KnownEventTypes_Exception_FullName { get; }
    public static string KnownEventTypes_DiskIO_FullName { get; }
    public static string KnownEventTypes_Idle_FullName { get; }
    public static string KnownEventTypes_UiFreeze_FullName { get; }
    public static string KnownEventTypes_CustomEvent_FullName { get; }
    public static string KnownEventTypes_ApiEvent_FullName { get; }
    public static string KnownEventTypes_MemoryManagement_FullName { get; }
    public static string KnownEventTypes_Contention_FullName { get; }
    public static string KnownEventTypes_SqlCommand_FullName { get; }
    public static string KnownEventTypes_EtwEventCallStack_FullName { get; }
    public static string KnownEventTypes_Jitting_FullName { get; }
    public static string KnownEventTypes_EtwSample_FullName { get; }
    public static string KnownEventTypes_CallStackInversion_FullName { get; }
    public static string KnownEventTypes_ConversionErrors_FullName { get; }
    public static string KnownEventTypes_KernelCallStackSamplesInternal_FullName { get; }
    public static string KnownEventTypes_AllocationTick_FullName { get; }
    public static string KnownEventTypes_HttpRequest_FullName { get; }
    public static string KnownEventTypes_NativeAllocation_FullName { get; }
    public static string KnownEventTypes_DebugOutput_FullName { get; }
    public static string KnownEventTypes_Tasks_FullName { get; }
    public static string KnownEventTypes_AwaitInfo_FullName { get; }
    public static string KnownEventTypes_ThreadLifetime_Tooltip { get; }
    public static string KnownEventTypes_AllocationTick_Tooltip { get; }
    public static string KnownEventTypes_Contention_Tooltip { get; }
    public static string KnownEventTypes_FileIO_Tooltip { get; }
    public static string KnownEventTypes_Jitting_Tooltip { get; }
    public static string KnownEventTypes_SqlCommand_Tooltip { get; }
    public static string KnownEventTypes_GC_Tooltip { get; }
    public static string KnownEventTypes_HttpRequest_Tooltip { get; }
    public static string KnownEventTypes_Exception_Tooltip { get; }
    public static string KnownEventTypes_UiFreezeInterval_Tooltip { get; }
    public static string KnownEventTypes_Tasks_Tooltip { get; }
    public static string KnownEventTypes_AllocationTick_EventName_Plural { get; }
    public static string KnownEventTypes_Exception_EventName_Plural { get; }
    public static string KnownEventTypes_CustomEvent_EventName_Plural { get; }
    public static string KnownEventTypes_UiFreezeInterval_EventName_Plural { get; }
    public static string KnownEventTypes_Contention_EventName_Plural { get; }
    public static string KnownEventTypes_SqlCommand_EventName_Plural { get; }
    public static string KnownEventTypes_FileIO_EventName_Plural { get; }
    public static string KnownEventTypes_Jitting_EventName_Plural { get; }
    public static string KnownEventTypes_GC_EventName_Plural { get; }
    public static string KnownEventTypes_Running_EventName_Plural { get; }
    public static string KnownEventTypes_Idle_EventName_Plural { get; }
    public static string KnownEventTypes_Preemption_EventName_Plural { get; }
    public static string KnownEventTypes_HttpRequest_EventName_Plural { get; }
    public static string KnownEventTypes_NativeAllocation_EventName_Plural { get; }
    public static string KnownEventTypes_DebugOutput_EventName_Plural { get; }
    public static string KnownEventTypes_AllocationTick_EventName { get; }
    public static string KnownEventTypes_Exception_EventName { get; }
    public static string KnownEventTypes_CustomEvent_EventName { get; }
    public static string KnownEventTypes_UiFreezeInterval_EventName { get; }
    public static string KnownEventTypes_Contention_EventName { get; }
    public static string KnownEventTypes_SqlCommand_EventName { get; }
    public static string KnownEventTypes_FileIO_EventName { get; }
    public static string KnownEventTypes_Jitting_EventName { get; }
    public static string KnownEventTypes_GC_EventName { get; }
    public static string KnownEventTypes_Running_EventName { get; }
    public static string KnownEventTypes_Idle_EventName { get; }
    public static string KnownEventTypes_Preemption_EventName { get; }
    public static string KnownEventTypes_HttpRequest_EventName { get; }
    public static string KnownEventTypes_ThreadLifetime_ShortName { get; }
    public static string KnownEventTypes_AllocationTick_ShortName { get; }
    public static string KnownEventTypes_Contention_ShortName { get; }
    public static string KnownEventTypes_Jitting_ShortName { get; }
    public static string KnownEventTypes_HttpRequest_ShortName { get; }
    public static string KnownEventTypes_SqlCommand_ShortName { get; }
    public static string KnownEventTypes_NativeAllocation_ShortName { get; }
    public static string Filters_Subsystems_Name { get; }
    public static string Filters_ExcludedCallTreePaths_Name { get; }
    public static string Filters_AnalysisSubject_Name { get; }
    public static string Filters_Threads_Name { get; }
    public static string Filters_ProcessOverview_Name { get; }
    public static string Filters_BackgroundGc_Name { get; }
    public static string Filters_BlockingGc_Name { get; }
    public static string Filters_BlockingGcReason_Name { get; }
    public static string Filters_BlockingGcReason_Name_Plural { get; }
    public static string Filters_GcDepth_Name { get; }
    public static string Filters_GcDepth_Name_Plural { get; }
    public static string Filters_GcReason_Name { get; }
    public static string Filters_GcReason_Name_Plural { get; }
    public static string Filters_GcType_Name { get; }
    public static string Filters_GcType_Name_Plural { get; }
    public static string Filters_CallTree_Name { get; }
    public static string Filters_ExceptionType_Name { get; }
    public static string Filters_ExceptionType_Name_Plural { get; }
    public static string Filters_ExceptionMessage_Name { get; }
    public static string Filters_ExceptionMessage_Name_Plural { get; }
    public static string Filters_FileIoDirection_Name { get; }
    public static string Filters_FileIoDirection_Name_Plural { get; }
    public static string Filters_FileIoName_Name { get; }
    public static string Filters_FileIoName_Name_Plural { get; }
    public static string Filters_NativeAllocationIsClosed_Name { get; }
    public static string Filters_DebugOutputString_Name { get; }
    public static string Filters_DebugOutputString_Name_Plural { get; }
    public static string Filters_ConversionErrorType_Name { get; }
    public static string Filters_ConversionErrorType_Name_Plural { get; }
    public static string Filters_ConversionErrorMessage_Name { get; }
    public static string Filters_ConversionErrorMessage_Name_Plural { get; }
    public static string Filters_IntervalFilters_Name { get; }
    public static string Filters_IntervalFiltersShort_Name { get; }
    public static string Filters_IntervalFiltersShort_Name_Plural { get; }
    public static string Filters_AllocationHeap_Name { get; }
    public static string Filters_AllocationHeap_Name_Plural { get; }
    public static string Filters_AllocationType_Name { get; }
    public static string Filters_AllocationType_Name_Plural { get; }
    public static string Filters_CpuCore_Name { get; }
    public static string Filters_CpuCore_Name_Plural { get; }
    public static string Filters_ThreadStates_Name { get; }
    public static string Filters_ThreadStates_Name_Plural { get; }
    public static string Filters_TopMethods_Name { get; }
    public static string Filters_WaitingActivatingThread_Name { get; }
    public static string Filters_WaitingReason_Name { get; }
    public static string Filters_WaitingReason_Name_Plural { get; }
    public static string Filters_ThreadPriority_Name { get; }
    public static string Filters_ThreadPriority_Name_Plural { get; }
    public static string Filters_SqlCommandText_Name { get; }
    public static string Filters_SqlCommandText_Name_Plural { get; }
    public static string Filters_SqlConnectionString_Name { get; }
    public static string Filters_SqlConnectionString_Name_Plural { get; }
    public static string Filters_HttpRequestUrl_Name { get; }
    public static string Filters_HttpRequestUrl_Name_Plural { get; }
    public static string Filters_HttpRequestVerb_Name { get; }
    public static string Filters_HttpRequestVerb_Name_Plural { get; }
    public static string Filters_ApiRelatedObject_Name { get; }
    public static string Filters_ApiRelatedObject_Name_Plural { get; }
    public static string Filters_ApiEventName_Name { get; }
    public static string Filters_ApiEventName_Name_Plural { get; }
    public static string Filters_TaskName_Name { get; }
    public static string Filters_TaskName_Name_Plural { get; }
    public static string Filters_ProcessingErrorType_Name { get; }
    public static string Filters_ProcessingErrorType_Name_Plural { get; }
    public static string Filters_ProcessingErrorDetails_Name { get; }
    public static string Filters_AwaitInfoTaskName_Name { get; }
    public static string Filters_AwaitInfoTaskName_Name_Plural { get; }
    public static string Filters_AwaitInfoDuration_Name { get; }
    public static string Filters_AwaitInfoDuration_Name_Plural { get; }
    public static string Filters_Comparison_Name { get; }
    public static string CallTreeAggregation_ProgressName { get; }
    public static string ThreadPresentation_NoInfo_Name { get; }
    public static string ThreadPresentation_Id_Name { get; }
    public static string ThreadPresentation_TypeGC_Name { get; }
    public static string ThreadPresentation_TypeWithName_Name { get; }
    public static string ThreadPresentation_ProcessNoName_Name { get; }
    public static string ThreadPresentation_Type_Tooltip { get; }
    public static string ThreadPresentation_Name_Tooltip { get; }
    public static string ThreadPresentation_ProcessUnknown_Tooltip { get; }
    public static string ThreadPresentation_Process_Tooltip { get; }
    public static string KnownProperties_IODirection_Read { get; }
    public static string KnownProperties_IODirection_Write { get; }
    public static string Filters_BooleanProperties_True { get; }
    public static string Filters_BooleanProperties_False { get; }
    public static string KnownProperties_CpuCore { get; }
    public static string KnownProperties_CpuCore_Unknown { get; }
    public static string EventLogTable_CallInfo_Unknown { get; }
    public static string NamespaceTree_Building_ProgressName { get; }
    public static string Summary_IntervalPart { get; }
    public static string Summary_IntervalPart_Plural { get; }
    public static string Summary_ThreadPart { get; }
    public static string Summary_ThreadPart_Plural { get; }
    public static string Summary_Empty { get; }
    public static string SnapshotPresentableName_ReprocessedSuffix { get; }
    public static string SettingsFactory_TimelineViewerStateLayer_DisplayName { get; }
    public static string TimelineSnapshotPostprocessor_CopyingNodes_ProgressName { get; }
    public static string TimelineSnapshotPostprocessor_CopyingParents_ProgressName { get; }
    public static string Processing_Starting { get; }
    public static string Processing_SourceToMemoryMappedStorage { get; }
    public static string Processing_ThroughPreprocessor { get; }
    public static string Processing_ConvertEvents { get; }
    public static string Processing_ThroughPostprocessor { get; }
    public static string Processing_FinishedIn { get; }
    public static string Processing_FailedToMoveSnapshotToStorage { get; }
    public static string Processing_Warning_UnknownProcessName { get; }
    public static string Processing_Warning_UnknownProcessId { get; }
    public static string ProviderInUse_UnknownSessionName { get; }
    public static string Processing_ConvertEvents_PumpAll_ProgressName { get; }
    public static string Processing_ConvertEvents_PrepareForDispose_ProgressName { get; }
    public static string PlainList_UnknownModule { get; }
    public static string PlainList_UnknownClass { get; }
    public static string PlainList_UnknownNamespace { get; }
    public static string Processing_NetTraceToTimeline { get; }
    public static string Processing_NetTrace_Starting { get; }
    public static string Processing_NetTrace_ProgressName { get; }
    public static string Comparison_FirstSnapshotPrefix { get; }
    public static string Comparison_SecondSnapshotPrefix { get; }
    public static string Comparison_SnapshotPrefix { get; }
    public static string Comparison_ComparisonItemPrefix { get; }
    public static string FindFunction_Node_InPreposition { get; }
    public static string FindFunction_HistoryHeader { get; }
    public static string FindFunction_HistoryHeader_Empty { get; }
    public static string FindFunction_NotReadyMessage { get; }
    public static string FindFunction_OnlyInUserMethod_Checkbox { get; }
    public static string FindFunction_Caption { get; }
    public static string Filters_Threads_NameColumn { get; }
    public static string Filters_Threads_IDColumn { get; }
    public static string Filters_ExceptionType_Header { get; }
    public static string Filters_ExceptionMessage_Header { get; }
    public static string Filters_SqlCommandText_Header { get; }
    public static string Filters_FileIoDirection_Header { get; }
    public static string Filters_GcDepth_Header { get; }
    public static string Filters_HttpRequestVerb_Header { get; }
    public static string Filters_DebugOutputString_Header { get; }
    public static string Filters_Subsystems_Header { get; }
    public static string Filters_BlockingGc_YesHeader { get; }
    public static string Filters_BlockingGc_NoHeader { get; }
    public static string Filters_ThreadStates_Tooltip { get; }
    public static string Filters_BlockingGc_Tooltip { get; }
    public static string Filters_Threads_Tooltip { get; }
    public static string Filters_WaitingActivatingThread_Tooltip { get; }
    public static string Filters_CpuCore_Tooltip { get; }
    public static string Filters_FileIoDirection_Tooltip { get; }
    public static string Filters_FileIoName_Tooltip { get; }
    public static string Filters_SqlCommandText_Tooltip { get; }
    public static string Filters_SqlConnectionString_Tooltip { get; }
    public static string Filters_HttpRequestUrl_Tooltip { get; }
    public static string Filters_HttpRequestVerb_Tooltip { get; }
    public static string Filters_AllocationHeap_Tooltip { get; }
    public static string Filters_AllocationType_Tooltip { get; }
    public static string Filters_ExceptionType_Tooltip { get; }
    public static string Filters_ExceptionMessage_Tooltip { get; }
    public static string Filters_GcDepth_Tooltip { get; }
    public static string Filters_Subsystems_Tooltip { get; }
    public static string Filters_GcReason_Tooltip { get; }
    public static string Filters_GcType_Tooltip { get; }
    public static string Filters_DebugOutputString_Tooltip { get; }
    public static string Filters_Panel_AllCalls_Text { get; }
    public static string Filters_Panel_AllCalls_Tooltip { get; }
    public static string ThreadPresentation_IdType_ShortName { get; }
    public static string ThreadPresentation_Name_Empty_ShortName { get; }
    public static string ThreadPresentation_Process_Empty_ShortName { get; }
    public static string ThreadPresentation_NoInfo_ShortName { get; }
    public static string SaveSnapshot_DialogTitle { get; }
    public static string SaveSnapshot_ProgressName { get; }
    public static string TopMethods_OwnPayload_Time_Tooltip { get; }
    public static string TopMethods_OwnPayload_Events_Tooltip { get; }
    public static string TopMethods_OwnPayload_Size_Tooltip { get; }
    public static string TopMethods_OwnPayload_SizeKb_Tooltip { get; }
    public static string TopMethods_OwnPayload_Threads_Tooltip { get; }
    public static string TopMethods_OwnPlusSystemPayload_Time_Tooltip { get; }
    public static string TopMethods_OwnPlusSystemPayload_Events_Tooltip { get; }
    public static string TopMethods_OwnPlusSystemPayload_Size_Tooltip { get; }
    public static string TopMethods_OwnPlusSystemPayload_SizeKb_Tooltip { get; }
    public static string TopMethods_OwnPlusSystemPayload_Threads_Tooltip { get; }
    public static string TopMethods_TotalPayload_Time_Tooltip { get; }
    public static string TopMethods_TotalPayload_Events_Tooltip { get; }
    public static string TopMethods_TotalPayload_Size_Tooltip { get; }
    public static string TopMethods_TotalPayload_SizeKb_Tooltip { get; }
    public static string TopMethods_TotalPayload_Threads_Tooltip { get; }
    public static string TopMethods_TotalEqualsOwnPayload_Time_Tooltip { get; }
    public static string TopMethods_TotalEqualsOwnPayload_Events_Tooltip { get; }
    public static string TopMethods_TotalEqualsOwnPayload_Size_Tooltip { get; }
    public static string TopMethods_TotalEqualsOwnPayload_SizeKb_Tooltip { get; }
    public static string TopMethods_TotalEqualsOwnPayload_Threads_Tooltip { get; }
    public static string TopMethods_TotalEqualsOwnPlusSystemPayload_Time_Tooltip { get; }
    public static string TopMethods_TotalEqualsOwnPlusSystemPayload_Events_Tooltip { get; }
    public static string TopMethods_TotalEqualsOwnPlusSystemPayload_Size_Tooltip { get; }
    public static string TopMethods_TotalEqualsOwnPlusSystemPayload_SizeKb_Tooltip { get; }
    public static string TopMethods_TotalEqualsOwnPlusSystemPayload_Threads_Tooltip { get; }
    public static string TopMethods_SystemStackTrace_Time_Tooltip { get; }
    public static string TopMethods_SystemStackTrace_Events_Tooltip { get; }
    public static string TopMethods_SystemStackTrace_Size_Tooltip { get; }
    public static string TopMethods_SystemStackTrace_SizeKb_Tooltip { get; }
    public static string TopMethods_SystemStackTrace_Threads_Tooltip { get; }
    public static string TopMethods_NativeStackTrace_Time_Tooltip { get; }
    public static string TopMethods_NativeStackTrace_Events_Tooltip { get; }
    public static string TopMethods_NativeStackTrace_Size_Tooltip { get; }
    public static string TopMethods_NativeStackTrace_SizeKb_Tooltip { get; }
    public static string TopMethods_NativeStackTrace_Threads_Tooltip { get; }
    public static string CallTree_History_MergeAll_Text { get; }
    public static string CallTree_History_MergeSystem_Text { get; }
    public static string CallTree_History_MergeAll_Tooltip { get; }
    public static string CallTree_History_MergeSystem_Tooltip { get; }
    public static string CallTree_History_Transition_Down_Tooltip { get; }
    public static string CallTree_History_Transition_Up_Tooltip { get; }
    public static string FlameGraph_SmallItemsNode { get; }
    public static string TopMethods_Merged_ShowSystem_Name { get; }
    public static string TopMethods_Merged_ShowSystem_Tooltip { get; }
    public static string TopMethods_Merged_ShowUser_Name { get; }
    public static string TopMethods_Merged_ShowUser_Tooltip { get; }
    public static string TopMethods_PayloadType_Time { get; }
    public static string TopMethods_PayloadType_Events { get; }
    public static string TopMethods_PayloadType_Threads { get; }
    public static string TopMethods_PayloadType_Size { get; }
    public static string TopMethods_PayloadType_SizeKb { get; }
    public static string Properties_UnknownModuleName { get; }
    public static string Properties_UnknownModulePath { get; }
    public static string Properties_NoModuleInfo { get; }
    public static string Properties_ModulePath { get; }
    public static string Properties_AssemblyInfo { get; }
    public static string Properties_SnapshotHeader { get; }
    public static string Properties_CallCount { get; }
    public static string Properties_AveragePayload { get; }
    public static string Properties_TotalPayload { get; }
    public static string Properties_OwnPayload { get; }
    public static string Properties_OwnPlusSystemPayload { get; }
    public static string Properties_ThisInstancePayloads_Header { get; }
    public static string Properties_ThisScopePayloads_Header { get; }
    public static string CallTree_Downtrace_Time_Tooltip { get; }
    public static string CallTree_Downtrace_Events_Tooltip { get; }
    public static string CallTree_Downtrace_Size_Tooltip { get; }
    public static string CallTree_Downtrace_SizeKb_Tooltip { get; }
    public static string CallTree_Downtrace_Threads_Tooltip { get; }
    public static string CallTree_Backtrace_Time_Tooltip { get; }
    public static string CallTree_Backtrace_Events_Tooltip { get; }
    public static string CallTree_Backtrace_Size_Tooltip { get; }
    public static string CallTree_Backtrace_SizeKb_Tooltip { get; }
    public static string CallTree_Backtrace_Threads_Tooltip { get; }
    public static string CallTree_Downtrace_Tooltip_Suffix { get; }
    public static string CallTree_TaskRecursionFoldedNode_Text { get; }
    public static string Filters_ThreadStates_Running { get; }
    public static string Filters_ThreadStates_Waiting { get; }
    public static string Filters_AnalysisSubhect_Default { get; }
    public static string TopMethods_Empty { get; }
    public static string TopMethods_Loading { get; }
    public static string CallTree_Empty { get; }
    public static string CallTree_NavigateToCode_ActionText { get; }
    public static string CallTree_Navigate_Disambiguate { get; }
    public static string DiskManagement_RemoveAllTemp_Text { get; }
    public static string DiskManagement_RemoveAllTemp_Title { get; }
    public static string DiskManagement_RemoveAllTemp_Yes { get; }
    public static string DiskManagement_RemoveAllTemp_No { get; }
    public static string DiskManagement_Header { get; }
    public static string DiskManagement_EmptySize { get; }
    public static string DiskManagement_Cleanup_LinkText { get; }
    public static string DiskManagement_Configure_LinkText { get; }
    public static string Options_General_Header { get; }
    public static string Options_TemporaryStorage_Header { get; }
    public static string Options_AutoDelete_Header { get; }
    public static string Options_StorageLocation_Label { get; }
    public static string Options_StorageLocation_PathIsNotWriteable { get; }
    public static string Options_SystemModules_LoadingText { get; }
    public static string Options_SystemModules_CategoryLabel { get; }
    public static string Options_SystemModules_ModuleNameLabel { get; }
    public static string Options_SystemModules_ModuleName_ErrorPrefix { get; }
    public static string TooManySnapshotsSimulatneously_Open { get; }
    public static string TooManySnapshotsSimulatneously_Export { get; }
    public static string Ide_OpenInStandalone_TextAction { get; }
    public static string RiderUnity_Profile_Caption { get; }
    public static string RiderUnity_CantDetectUnityPathText { get; }
    public static string RiderUnity_UnityVersionIsNotSupported { get; }
    public static string RiderUnity_UnityVersionIsUnknown { get; }
    public static string SnapshotOpening_DownloadLatestRider { get; }
    public static string SnapshotOpening_DownloadDotTrace241 { get; }
    public static string Presentation_NoFileName { get; }
    public static string CallFrameInfo_NoData { get; }
    public static string MethodViewData_Unknown { get; }
    public static string MethodViewData_Synthetic { get; }
    public static string Subsystems_Hidden { get; }
    public static string Unit_SI_k { get; }
    public static string Unit_SI_Mega { get; }
    public static string Unit_SI_G { get; }
    public static string Unit_SI_T { get; }
    public static string Unit_SI_Peta { get; }
    public static string Unit_SI_E { get; }
    public static string Unit_SI_Zetta { get; }
    public static string Unit_SI_Yotta { get; }
    public static string Unit_SI_m { get; }
    public static string Unit_SI_u { get; }
    public static string Unit_SI_n { get; }
    public static string Unit_SI_p { get; }
    public static string Unit_SI_f { get; }
    public static string Unit_SI_a { get; }
    public static string Unit_SI_z { get; }
    public static string Unit_SI_y { get; }
    public static string Overview_NA { get; }
    public static string Overview_Options { get; }
    public static string Overview_ComputerName { get; }
    public static string Overview_User { get; }
    public static string Overview_Frequency { get; }
    public static string Overview_CPUFrequency { get; }
    public static string Overview_ProcessId { get; }
    public static string Overview_Executable { get; }
    public static string Overview_ProcessArchitecture { get; }
    public static string Overview_OS { get; }
    public static string Overview_Profiler { get; }
    public static string Overview_NETRuntime { get; }
    public static string Overview_EnvironmentHeader { get; }
    public static string Overview_Location { get; }
    public static string Overview_Taken { get; }
    public static string Overview_SnapshotDuration { get; }
    public static string Overview_SnapshotHeader { get; }
    public static string Overview_Source { get; }
    public static string Overview_Source_UnitTests { get; }
    public static string Overview_CommandLine { get; }
    public static string Overview_WorkingDir { get; }
    public static string Overview_Stats { get; }
    public static string Overview_ModulesCount { get; }
    public static string Overview_FunctionsCount { get; }
    public static string Overview_ThreadsCount { get; }
    public static string Overview_ApplicationHeader { get; }
    public static string EventLogTable_Unresolved { get; }
    public static string EventLogTable_FileIo_From { get; }
    public static string EventLogTable_FileIo_To { get; }
    public static string EventLogTable_FileIo_Read { get; }
    public static string EventLogTable_FileIo_Write { get; }
    public static string SpecialValue_Sql_OpenConnection { get; }
    public static string SpecialValue_Sql_BeginTransaction { get; }
    public static string SpecialValue_Sql_CommitTransaction { get; }
    public static string SpecialValue_Sql_RollbackTransaction { get; }
    public static string SpecialValue_Sql_UnknownConnection { get; }
    public static string SpecialValue_Sql_UnknownText { get; }
    public static string SpecialValue_Sql_CloseConnection { get; }
    public static string SpecialValue_Sql_EmptyConnection { get; }
    public static string SpecialValue_Sql_EmptyText { get; }
    public static string SpecialValue_Tasks_UnknownTask { get; }
    public static string SpecialValue_File_UnknownFileName { get; }
    public static string SpecialValue_Process_Unknown { get; }
    public static string SpecialValue_Http_UnknownEndpoint { get; }
    public static string SpecialValue_Unknown { get; }
    public static string SpecialValue_Empty { get; }
    public static string RiderIntegrationPresentableName { get; }
    public static string Filters_AllocationHeap_Enum_SOH { get; }
    public static string Filters_AllocationHeap_Enum_LOH { get; }
    public static string Filters_AllocationHeap_Enum_POH { get; }
    public static string Filters_AllocationHeap_Enum_Unknown { get; }
    public static string Filters_BlockingGc_Depth_Enum_Gen0 { get; }
    public static string Filters_BlockingGc_Depth_Enum_Gen1 { get; }
    public static string Filters_BlockingGc_Depth_Enum_Gen2 { get; }
    public static string Filters_BlockingGc_Reason_Enum_SOH { get; }
    public static string Filters_BlockingGc_Reason_Enum_Induced { get; }
    public static string Filters_BlockingGc_Reason_Enum_LowMemory { get; }
    public static string Filters_BlockingGc_Reason_Enum_Empty { get; }
    public static string Filters_BlockingGc_Reason_Enum_LOH { get; }
    public static string Filters_BlockingGc_Reason_Enum_OOS_SOH { get; }
    public static string Filters_BlockingGc_Reason_Enum_OOS_LOH { get; }
    public static string Filters_BlockingGc_Reason_Enum_InducedNotForced { get; }
    public static string Filters_BlockingGc_Reason_Enum_Unknown { get; }
    public static string Filters_Gc_Type_Enum_Blocking { get; }
    public static string Filters_Gc_Type_Enum_Background { get; }
    public static string Filters_Gc_Type_Enum_BlockingDuringBackground { get; }
    public static string Filters_Gc_Type_Enum_Unknown { get; }
    public static string Filters_OnlySystemCalls_Text { get; }
    public static string Filters_OnlySystemCalls_Tooltip { get; }
    public static string ConfigurationEditor_SampleRateDisplayFormatString { get; }
    public static string ConfigurationEditor_SamplingRate { get; }
    public static string ConfigurationEditor_SamplingAllocationsIn { get; }
    public static string ConfigurationEditor_CollectUnreleasedAllocation { get; }
    public static string ConfigurationEditor_AllowLoadPdbInBackground { get; }
    public static string ConfigurationEditor_SamplingAllocationsInLabel { get; }
    private static UIResources();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_DaysSingularPluralForm();
    public static string get_SaveSnapshot_Question();
    public static string get_SavingSnapshot();
    public static string get_AutoSaveCheckBoxText();
    public static string get_AutoCleanupByDateCheckBoxText();
    public static string get_AutoCleanupBySizeCheckBoxText();
    public static string get_UseCrossPlatformViewer();
    public static string get_UseCrossPlatformViewerComment();
    public static string get_HideSystemFunctionsButtonTooltip();
    public static string get_FollowSelectionButtonTooltip();
    public static string get_FailedToOpenSnapshot_SnapshotNewerThanViewer();
    public static string get_FailedToOpenSnapshot_SnapshotNewerThanViewer_LinkText();
    public static string get_FailedToOpenSnapshot_SnapshotNewerThanViewer_LinkUri();
    public static string get_FailedToOpenSnapshot_DownloadDotTrace241_Notification();
    public static string get_FailedToOpenSnapshot_DownloadDotTrace241();
    public static string get_FailedToOpenSnapshot_DownloadDotTrace241_LinkText();
    public static string get_FailedToOpenSnapshot_DownloadDotTrace241_LinkUri();
    public static string get_FailedToOpenSnapshot_UnsupportedFormat();
    public static string get_FailedToOpenSnapshot_BrokenSnapshot();
    public static string get_FailedToOpenSnapshot_UnsupportedCpuType();
    public static string get_FailedToOpenSnapshot_UnsupportedLinuxLibC();
    public static string get_SourceViewNotAvailable();
    public static string get_LostEventsFound();
    public static string get_AsyncAwaitSupportWillBeDisabled();
    public static string get_PossibleCauseAlreadyInUse();
    public static string get_ProviderInUse();
    public static string get_PossibleCauseTooManyEvents();
    public static string get_EventSessionInterrupted();
    public static string get_NoThreads();
    public static string get_AllThreadsHaveBeenStopped();
    public static string get_ExceptionsDuringProcessing();
    public static string get_MetadataProcessingHasFailed();
    public static string get_DeleteSnapshotConfirmationMessage();
    public static string get_DeleteSnapshotsConfirmationMessage();
    public static string get_DeleteLaunchConfigurationError();
    public static string get_DeleteSnapshotError();
    public static string get_ExportSnapshotErrorTitle();
    public static string get_ExportSnapshotError();
    public static string get_TooManySnapshotsSimulatneously();
    public static string get_ProfilingTestsMessage();
    public static string get_ProfilingApiMessage();
    public static string get_StartingTheProfilingSession();
    public static string get_WaitingForWeb();
    public static string get_WaitingForXRuntime();
    public static string get_NetOrNetCore();
    public static string get_Unity20183_OrLater();
    public static string get_Mono();
    public static string get_Managed();
    public static string get_UnknownCallFrameTooltip();
    public static string get_CallTreeSystemUnfold();
    public static string get_CallTreeSystemFold();
    public static string get_CallTreeRecursiveFold();
    public static string get_CallTreeRecursiveUnfold();
    public static string get_SnapshotList_NoSnapshotsCollected();
    public static string get_SnapshotList_NoSnapshotsMatchingTheFilterFound();
    public static string get_SnapshotList_GettingStartedWithDotTrace();
    public static string get_ReadonlySnapshotToTemporaryStorage();
    public static string get_NetTraceFileToTemporaryStorage();
    public static string get_HideSystemFunctionsButtonTooltipWhenDisabled();
    public static string get_Comparison_ChangeSnapshotsOrderHint();
    public static string get_Comparison_CloseExtraSnapshotHint();
    public static string get_Comparison_OpenExtraSnapshotHint();
    public static string get_Comparison_CloseExtraSnapshotText();
    public static string get_PropertiesDialogTitle();
    public static string get_PropertiesTableInstance();
    public static string get_PropertiesTableScope();
    public static string get_PropertiesParameters();
    public static string get_PropertiesFullName();
    public static string get_PropertiesModuleName();
    public static string get_PropertiesModulePath();
    public static string get_PropertiesTableNumberOfCalls();
    public static string get_PropertiesTableTotalPayload();
    public static string get_PropertiesTableAveragePayload();
    public static string get_PropertiesTableOwnPayload();
    public static string get_PropertiesTableOwnPlusSystemPayload();
    public static string get_PropertiesCopyToClipboard();
    public static string get_PropertiesClose();
    public static string get_FlameGraph_ToggleButtonText();
    public static string get_FlameGraph_ToggleButtonTooltip();
    public static string get_CallTreeGrouped_ButtonText();
    public static string get_CallTreeGrouped_ButtonTooltip();
    public static string get_Backtraces_Header();
    public static string get_CallTree_Header();
    public static string get_Hotspots_Header();
    public static string get_GroupByThread_Header();
    public static string get_Hotspots_Header_UnderMethod();
    public static string get_Hotspots_OwnPlusSystem();
    public static string get_Hotspots_Own();
    public static string get_Hotspots_Total();
    public static string get_Hotspots_DefaultPayloadString();
    public static string get_Filters_EventsHeader();
    public static string get_Filters_All_Value();
    public static string get_Filters_Off_Value();
    public static string get_Filters_On_Value();
    public static string get_Filters_Reset_ButtonText();
    public static string get_Filters_Reset_ButtonTooltip();
    public static string get_Filters_Enum_MultipleSelected();
    public static string get_Filters_AllX();
    public static string get_Filters_Popup_TooManyItems();
    public static string get_CallTree_IncludeContinuations_Text();
    public static string get_CallTree_IncludeContinuations_Tooltip();
    public static string get_CallTree_IncludeAwaits_Text();
    public static string get_CallTree_IncludeAwaits_Tooltip();
    public static string get_CallTree_LoadingNodeText();
    public static string get_SnapshotList_UnknownProfilingType();
    public static string get_DiskManagement_LastOpened_Column();
    public static string get_DiskManagement_Snapshot_Column();
    public static string get_DiskManagement_ProfilingType_Column();
    public static string get_DiskManagement_Created_Column();
    public static string get_DiskManagement_Size_Column();
    public static string get_DiskManagement_ManageStorage_LinkText();
    public static string get_DiskManagement_ClearTemporarySnapshots_LinkText();
    public static string get_DiskManagement_StorageContents_HeaderText();
    public static string get_RiderActions_JumpToSource();
    public static string get_RiderOptions_ShowNativeThreads();
    public static string get_RiderOptions_OtherCategory();
    public static string get_RiderOptions_ShowDiskManagement();
    public static string get_SnapshotProcessing_TabHeader();
    public static string get_SnapshotProcessing_SelectRowToSeeDetails();
    public static string get_SnapshotProcessing_Processing_RowText();
    public static string get_SnapshotProcessing_ProcessingWithPercent_RowText();
    public static string get_SnapshotProcessing_ShowSnapshot_ButtonText();
    public static string get_SnapshotProcessing_UnreliableDataInSnapshot();
    public static string get_OpenSnapshotDialog_Title();
    public static string get_OpenSnapshotDialog_SupportedFilesDescription();
    public static string get_ConfigurationEditor_StartProfileUnavailable();
    public static string get_ConfigurationEditor_AttachUnavailable();
    public static string get_ConfigurationEditor_UnitTestProfilingUnavailable();
    public static string get_ConfigurationEditor_TimeMeasurement();
    public static string get_ConfigurationEditor_StartMode();
    public static string get_ConfigurationEditor_ControlManually();
    public static string get_ConfigurationEditor_ControlViaApi();
    public static string get_ConfigurationEditor_AdvancedHeaderText();
    public static string get_ConfigurationEditor_ConfigurationName_Label();
    public static string get_ConfigurationEditor_SamplingUnstableOnEarlyNetCore();
    public static string get_ConfigurationEditor_ConfigureSymbolServers_LinkText();
    public static string get_ProcessingMessageLevel_Info();
    public static string get_ProcessingMessageLevel_Warning();
    public static string get_ProcessingMessageLevel_Error();
    public static string get_ProcessingMessageLevel_Info_Plural();
    public static string get_ProcessingMessageLevel_Warning_Plural();
    public static string get_ProcessingMessageLevel_Error_Plural();
    public static string get_Processing_Issues_Header();
    public static string get_Payloads_MeasuredPartly();
    public static string get_KnownEventTypes_Preemption_FullName();
    public static string get_KnownEventTypes_Running_FullName();
    public static string get_KnownEventTypes_BlockingGC_FullName();
    public static string get_KnownEventTypes_GC_FullName();
    public static string get_KnownEventTypes_RuntimeRunning_FullName();
    public static string get_KnownEventTypes_OtherSuspends_FullName();
    public static string get_KnownEventTypes_FileIO_FullName();
    public static string get_KnownEventTypes_Exception_FullName();
    public static string get_KnownEventTypes_DiskIO_FullName();
    public static string get_KnownEventTypes_Idle_FullName();
    public static string get_KnownEventTypes_UiFreeze_FullName();
    public static string get_KnownEventTypes_CustomEvent_FullName();
    public static string get_KnownEventTypes_ApiEvent_FullName();
    public static string get_KnownEventTypes_MemoryManagement_FullName();
    public static string get_KnownEventTypes_Contention_FullName();
    public static string get_KnownEventTypes_SqlCommand_FullName();
    public static string get_KnownEventTypes_EtwEventCallStack_FullName();
    public static string get_KnownEventTypes_Jitting_FullName();
    public static string get_KnownEventTypes_EtwSample_FullName();
    public static string get_KnownEventTypes_CallStackInversion_FullName();
    public static string get_KnownEventTypes_ConversionErrors_FullName();
    public static string get_KnownEventTypes_KernelCallStackSamplesInternal_FullName();
    public static string get_KnownEventTypes_AllocationTick_FullName();
    public static string get_KnownEventTypes_HttpRequest_FullName();
    public static string get_KnownEventTypes_NativeAllocation_FullName();
    public static string get_KnownEventTypes_DebugOutput_FullName();
    public static string get_KnownEventTypes_Tasks_FullName();
    public static string get_KnownEventTypes_AwaitInfo_FullName();
    public static string get_KnownEventTypes_ThreadLifetime_Tooltip();
    public static string get_KnownEventTypes_AllocationTick_Tooltip();
    public static string get_KnownEventTypes_Contention_Tooltip();
    public static string get_KnownEventTypes_FileIO_Tooltip();
    public static string get_KnownEventTypes_Jitting_Tooltip();
    public static string get_KnownEventTypes_SqlCommand_Tooltip();
    public static string get_KnownEventTypes_GC_Tooltip();
    public static string get_KnownEventTypes_HttpRequest_Tooltip();
    public static string get_KnownEventTypes_Exception_Tooltip();
    public static string get_KnownEventTypes_UiFreezeInterval_Tooltip();
    public static string get_KnownEventTypes_Tasks_Tooltip();
    public static string get_KnownEventTypes_AllocationTick_EventName_Plural();
    public static string get_KnownEventTypes_Exception_EventName_Plural();
    public static string get_KnownEventTypes_CustomEvent_EventName_Plural();
    public static string get_KnownEventTypes_UiFreezeInterval_EventName_Plural();
    public static string get_KnownEventTypes_Contention_EventName_Plural();
    public static string get_KnownEventTypes_SqlCommand_EventName_Plural();
    public static string get_KnownEventTypes_FileIO_EventName_Plural();
    public static string get_KnownEventTypes_Jitting_EventName_Plural();
    public static string get_KnownEventTypes_GC_EventName_Plural();
    public static string get_KnownEventTypes_Running_EventName_Plural();
    public static string get_KnownEventTypes_Idle_EventName_Plural();
    public static string get_KnownEventTypes_Preemption_EventName_Plural();
    public static string get_KnownEventTypes_HttpRequest_EventName_Plural();
    public static string get_KnownEventTypes_NativeAllocation_EventName_Plural();
    public static string get_KnownEventTypes_DebugOutput_EventName_Plural();
    public static string get_KnownEventTypes_AllocationTick_EventName();
    public static string get_KnownEventTypes_Exception_EventName();
    public static string get_KnownEventTypes_CustomEvent_EventName();
    public static string get_KnownEventTypes_UiFreezeInterval_EventName();
    public static string get_KnownEventTypes_Contention_EventName();
    public static string get_KnownEventTypes_SqlCommand_EventName();
    public static string get_KnownEventTypes_FileIO_EventName();
    public static string get_KnownEventTypes_Jitting_EventName();
    public static string get_KnownEventTypes_GC_EventName();
    public static string get_KnownEventTypes_Running_EventName();
    public static string get_KnownEventTypes_Idle_EventName();
    public static string get_KnownEventTypes_Preemption_EventName();
    public static string get_KnownEventTypes_HttpRequest_EventName();
    public static string get_KnownEventTypes_ThreadLifetime_ShortName();
    public static string get_KnownEventTypes_AllocationTick_ShortName();
    public static string get_KnownEventTypes_Contention_ShortName();
    public static string get_KnownEventTypes_Jitting_ShortName();
    public static string get_KnownEventTypes_HttpRequest_ShortName();
    public static string get_KnownEventTypes_SqlCommand_ShortName();
    public static string get_KnownEventTypes_NativeAllocation_ShortName();
    public static string get_Filters_Subsystems_Name();
    public static string get_Filters_ExcludedCallTreePaths_Name();
    public static string get_Filters_AnalysisSubject_Name();
    public static string get_Filters_Threads_Name();
    public static string get_Filters_ProcessOverview_Name();
    public static string get_Filters_BackgroundGc_Name();
    public static string get_Filters_BlockingGc_Name();
    public static string get_Filters_BlockingGcReason_Name();
    public static string get_Filters_BlockingGcReason_Name_Plural();
    public static string get_Filters_GcDepth_Name();
    public static string get_Filters_GcDepth_Name_Plural();
    public static string get_Filters_GcReason_Name();
    public static string get_Filters_GcReason_Name_Plural();
    public static string get_Filters_GcType_Name();
    public static string get_Filters_GcType_Name_Plural();
    public static string get_Filters_CallTree_Name();
    public static string get_Filters_ExceptionType_Name();
    public static string get_Filters_ExceptionType_Name_Plural();
    public static string get_Filters_ExceptionMessage_Name();
    public static string get_Filters_ExceptionMessage_Name_Plural();
    public static string get_Filters_FileIoDirection_Name();
    public static string get_Filters_FileIoDirection_Name_Plural();
    public static string get_Filters_FileIoName_Name();
    public static string get_Filters_FileIoName_Name_Plural();
    public static string get_Filters_NativeAllocationIsClosed_Name();
    public static string get_Filters_DebugOutputString_Name();
    public static string get_Filters_DebugOutputString_Name_Plural();
    public static string get_Filters_ConversionErrorType_Name();
    public static string get_Filters_ConversionErrorType_Name_Plural();
    public static string get_Filters_ConversionErrorMessage_Name();
    public static string get_Filters_ConversionErrorMessage_Name_Plural();
    public static string get_Filters_IntervalFilters_Name();
    public static string get_Filters_IntervalFiltersShort_Name();
    public static string get_Filters_IntervalFiltersShort_Name_Plural();
    public static string get_Filters_AllocationHeap_Name();
    public static string get_Filters_AllocationHeap_Name_Plural();
    public static string get_Filters_AllocationType_Name();
    public static string get_Filters_AllocationType_Name_Plural();
    public static string get_Filters_CpuCore_Name();
    public static string get_Filters_CpuCore_Name_Plural();
    public static string get_Filters_ThreadStates_Name();
    public static string get_Filters_ThreadStates_Name_Plural();
    public static string get_Filters_TopMethods_Name();
    public static string get_Filters_WaitingActivatingThread_Name();
    public static string get_Filters_WaitingReason_Name();
    public static string get_Filters_WaitingReason_Name_Plural();
    public static string get_Filters_ThreadPriority_Name();
    public static string get_Filters_ThreadPriority_Name_Plural();
    public static string get_Filters_SqlCommandText_Name();
    public static string get_Filters_SqlCommandText_Name_Plural();
    public static string get_Filters_SqlConnectionString_Name();
    public static string get_Filters_SqlConnectionString_Name_Plural();
    public static string get_Filters_HttpRequestUrl_Name();
    public static string get_Filters_HttpRequestUrl_Name_Plural();
    public static string get_Filters_HttpRequestVerb_Name();
    public static string get_Filters_HttpRequestVerb_Name_Plural();
    public static string get_Filters_ApiRelatedObject_Name();
    public static string get_Filters_ApiRelatedObject_Name_Plural();
    public static string get_Filters_ApiEventName_Name();
    public static string get_Filters_ApiEventName_Name_Plural();
    public static string get_Filters_TaskName_Name();
    public static string get_Filters_TaskName_Name_Plural();
    public static string get_Filters_ProcessingErrorType_Name();
    public static string get_Filters_ProcessingErrorType_Name_Plural();
    public static string get_Filters_ProcessingErrorDetails_Name();
    public static string get_Filters_AwaitInfoTaskName_Name();
    public static string get_Filters_AwaitInfoTaskName_Name_Plural();
    public static string get_Filters_AwaitInfoDuration_Name();
    public static string get_Filters_AwaitInfoDuration_Name_Plural();
    public static string get_Filters_Comparison_Name();
    public static string get_CallTreeAggregation_ProgressName();
    public static string get_ThreadPresentation_NoInfo_Name();
    public static string get_ThreadPresentation_Id_Name();
    public static string get_ThreadPresentation_TypeGC_Name();
    public static string get_ThreadPresentation_TypeWithName_Name();
    public static string get_ThreadPresentation_ProcessNoName_Name();
    public static string get_ThreadPresentation_Type_Tooltip();
    public static string get_ThreadPresentation_Name_Tooltip();
    public static string get_ThreadPresentation_ProcessUnknown_Tooltip();
    public static string get_ThreadPresentation_Process_Tooltip();
    public static string get_KnownProperties_IODirection_Read();
    public static string get_KnownProperties_IODirection_Write();
    public static string get_Filters_BooleanProperties_True();
    public static string get_Filters_BooleanProperties_False();
    public static string get_KnownProperties_CpuCore();
    public static string get_KnownProperties_CpuCore_Unknown();
    public static string get_EventLogTable_CallInfo_Unknown();
    public static string get_NamespaceTree_Building_ProgressName();
    public static string get_Summary_IntervalPart();
    public static string get_Summary_IntervalPart_Plural();
    public static string get_Summary_ThreadPart();
    public static string get_Summary_ThreadPart_Plural();
    public static string get_Summary_Empty();
    public static string get_SnapshotPresentableName_ReprocessedSuffix();
    public static string get_SettingsFactory_TimelineViewerStateLayer_DisplayName();
    public static string get_TimelineSnapshotPostprocessor_CopyingNodes_ProgressName();
    public static string get_TimelineSnapshotPostprocessor_CopyingParents_ProgressName();
    public static string get_Processing_Starting();
    public static string get_Processing_SourceToMemoryMappedStorage();
    public static string get_Processing_ThroughPreprocessor();
    public static string get_Processing_ConvertEvents();
    public static string get_Processing_ThroughPostprocessor();
    public static string get_Processing_FinishedIn();
    public static string get_Processing_FailedToMoveSnapshotToStorage();
    public static string get_Processing_Warning_UnknownProcessName();
    public static string get_Processing_Warning_UnknownProcessId();
    public static string get_ProviderInUse_UnknownSessionName();
    public static string get_Processing_ConvertEvents_PumpAll_ProgressName();
    public static string get_Processing_ConvertEvents_PrepareForDispose_ProgressName();
    public static string get_PlainList_UnknownModule();
    public static string get_PlainList_UnknownClass();
    public static string get_PlainList_UnknownNamespace();
    public static string get_Processing_NetTraceToTimeline();
    public static string get_Processing_NetTrace_Starting();
    public static string get_Processing_NetTrace_ProgressName();
    public static string get_Comparison_FirstSnapshotPrefix();
    public static string get_Comparison_SecondSnapshotPrefix();
    public static string get_Comparison_SnapshotPrefix();
    public static string get_Comparison_ComparisonItemPrefix();
    public static string get_FindFunction_Node_InPreposition();
    public static string get_FindFunction_HistoryHeader();
    public static string get_FindFunction_HistoryHeader_Empty();
    public static string get_FindFunction_NotReadyMessage();
    public static string get_FindFunction_OnlyInUserMethod_Checkbox();
    public static string get_FindFunction_Caption();
    public static string get_Filters_Threads_NameColumn();
    public static string get_Filters_Threads_IDColumn();
    public static string get_Filters_ExceptionType_Header();
    public static string get_Filters_ExceptionMessage_Header();
    public static string get_Filters_SqlCommandText_Header();
    public static string get_Filters_FileIoDirection_Header();
    public static string get_Filters_GcDepth_Header();
    public static string get_Filters_HttpRequestVerb_Header();
    public static string get_Filters_DebugOutputString_Header();
    public static string get_Filters_Subsystems_Header();
    public static string get_Filters_BlockingGc_YesHeader();
    public static string get_Filters_BlockingGc_NoHeader();
    public static string get_Filters_ThreadStates_Tooltip();
    public static string get_Filters_BlockingGc_Tooltip();
    public static string get_Filters_Threads_Tooltip();
    public static string get_Filters_WaitingActivatingThread_Tooltip();
    public static string get_Filters_CpuCore_Tooltip();
    public static string get_Filters_FileIoDirection_Tooltip();
    public static string get_Filters_FileIoName_Tooltip();
    public static string get_Filters_SqlCommandText_Tooltip();
    public static string get_Filters_SqlConnectionString_Tooltip();
    public static string get_Filters_HttpRequestUrl_Tooltip();
    public static string get_Filters_HttpRequestVerb_Tooltip();
    public static string get_Filters_AllocationHeap_Tooltip();
    public static string get_Filters_AllocationType_Tooltip();
    public static string get_Filters_ExceptionType_Tooltip();
    public static string get_Filters_ExceptionMessage_Tooltip();
    public static string get_Filters_GcDepth_Tooltip();
    public static string get_Filters_Subsystems_Tooltip();
    public static string get_Filters_GcReason_Tooltip();
    public static string get_Filters_GcType_Tooltip();
    public static string get_Filters_DebugOutputString_Tooltip();
    public static string get_Filters_Panel_AllCalls_Text();
    public static string get_Filters_Panel_AllCalls_Tooltip();
    public static string get_ThreadPresentation_IdType_ShortName();
    public static string get_ThreadPresentation_Name_Empty_ShortName();
    public static string get_ThreadPresentation_Process_Empty_ShortName();
    public static string get_ThreadPresentation_NoInfo_ShortName();
    public static string get_SaveSnapshot_DialogTitle();
    public static string get_SaveSnapshot_ProgressName();
    public static string get_TopMethods_OwnPayload_Time_Tooltip();
    public static string get_TopMethods_OwnPayload_Events_Tooltip();
    public static string get_TopMethods_OwnPayload_Size_Tooltip();
    public static string get_TopMethods_OwnPayload_SizeKb_Tooltip();
    public static string get_TopMethods_OwnPayload_Threads_Tooltip();
    public static string get_TopMethods_OwnPlusSystemPayload_Time_Tooltip();
    public static string get_TopMethods_OwnPlusSystemPayload_Events_Tooltip();
    public static string get_TopMethods_OwnPlusSystemPayload_Size_Tooltip();
    public static string get_TopMethods_OwnPlusSystemPayload_SizeKb_Tooltip();
    public static string get_TopMethods_OwnPlusSystemPayload_Threads_Tooltip();
    public static string get_TopMethods_TotalPayload_Time_Tooltip();
    public static string get_TopMethods_TotalPayload_Events_Tooltip();
    public static string get_TopMethods_TotalPayload_Size_Tooltip();
    public static string get_TopMethods_TotalPayload_SizeKb_Tooltip();
    public static string get_TopMethods_TotalPayload_Threads_Tooltip();
    public static string get_TopMethods_TotalEqualsOwnPayload_Time_Tooltip();
    public static string get_TopMethods_TotalEqualsOwnPayload_Events_Tooltip();
    public static string get_TopMethods_TotalEqualsOwnPayload_Size_Tooltip();
    public static string get_TopMethods_TotalEqualsOwnPayload_SizeKb_Tooltip();
    public static string get_TopMethods_TotalEqualsOwnPayload_Threads_Tooltip();
    public static string get_TopMethods_TotalEqualsOwnPlusSystemPayload_Time_Tooltip();
    public static string get_TopMethods_TotalEqualsOwnPlusSystemPayload_Events_Tooltip();
    public static string get_TopMethods_TotalEqualsOwnPlusSystemPayload_Size_Tooltip();
    public static string get_TopMethods_TotalEqualsOwnPlusSystemPayload_SizeKb_Tooltip();
    public static string get_TopMethods_TotalEqualsOwnPlusSystemPayload_Threads_Tooltip();
    public static string get_TopMethods_SystemStackTrace_Time_Tooltip();
    public static string get_TopMethods_SystemStackTrace_Events_Tooltip();
    public static string get_TopMethods_SystemStackTrace_Size_Tooltip();
    public static string get_TopMethods_SystemStackTrace_SizeKb_Tooltip();
    public static string get_TopMethods_SystemStackTrace_Threads_Tooltip();
    public static string get_TopMethods_NativeStackTrace_Time_Tooltip();
    public static string get_TopMethods_NativeStackTrace_Events_Tooltip();
    public static string get_TopMethods_NativeStackTrace_Size_Tooltip();
    public static string get_TopMethods_NativeStackTrace_SizeKb_Tooltip();
    public static string get_TopMethods_NativeStackTrace_Threads_Tooltip();
    public static string get_CallTree_History_MergeAll_Text();
    public static string get_CallTree_History_MergeSystem_Text();
    public static string get_CallTree_History_MergeAll_Tooltip();
    public static string get_CallTree_History_MergeSystem_Tooltip();
    public static string get_CallTree_History_Transition_Down_Tooltip();
    public static string get_CallTree_History_Transition_Up_Tooltip();
    public static string get_FlameGraph_SmallItemsNode();
    public static string get_TopMethods_Merged_ShowSystem_Name();
    public static string get_TopMethods_Merged_ShowSystem_Tooltip();
    public static string get_TopMethods_Merged_ShowUser_Name();
    public static string get_TopMethods_Merged_ShowUser_Tooltip();
    public static string get_TopMethods_PayloadType_Time();
    public static string get_TopMethods_PayloadType_Events();
    public static string get_TopMethods_PayloadType_Threads();
    public static string get_TopMethods_PayloadType_Size();
    public static string get_TopMethods_PayloadType_SizeKb();
    public static string get_Properties_UnknownModuleName();
    public static string get_Properties_UnknownModulePath();
    public static string get_Properties_NoModuleInfo();
    public static string get_Properties_ModulePath();
    public static string get_Properties_AssemblyInfo();
    public static string get_Properties_SnapshotHeader();
    public static string get_Properties_CallCount();
    public static string get_Properties_AveragePayload();
    public static string get_Properties_TotalPayload();
    public static string get_Properties_OwnPayload();
    public static string get_Properties_OwnPlusSystemPayload();
    public static string get_Properties_ThisInstancePayloads_Header();
    public static string get_Properties_ThisScopePayloads_Header();
    public static string get_CallTree_Downtrace_Time_Tooltip();
    public static string get_CallTree_Downtrace_Events_Tooltip();
    public static string get_CallTree_Downtrace_Size_Tooltip();
    public static string get_CallTree_Downtrace_SizeKb_Tooltip();
    public static string get_CallTree_Downtrace_Threads_Tooltip();
    public static string get_CallTree_Backtrace_Time_Tooltip();
    public static string get_CallTree_Backtrace_Events_Tooltip();
    public static string get_CallTree_Backtrace_Size_Tooltip();
    public static string get_CallTree_Backtrace_SizeKb_Tooltip();
    public static string get_CallTree_Backtrace_Threads_Tooltip();
    public static string get_CallTree_Downtrace_Tooltip_Suffix();
    public static string get_CallTree_TaskRecursionFoldedNode_Text();
    public static string get_Filters_ThreadStates_Running();
    public static string get_Filters_ThreadStates_Waiting();
    public static string get_Filters_AnalysisSubhect_Default();
    public static string get_TopMethods_Empty();
    public static string get_TopMethods_Loading();
    public static string get_CallTree_Empty();
    public static string get_CallTree_NavigateToCode_ActionText();
    public static string get_CallTree_Navigate_Disambiguate();
    public static string get_DiskManagement_RemoveAllTemp_Text();
    public static string get_DiskManagement_RemoveAllTemp_Title();
    public static string get_DiskManagement_RemoveAllTemp_Yes();
    public static string get_DiskManagement_RemoveAllTemp_No();
    public static string get_DiskManagement_Header();
    public static string get_DiskManagement_EmptySize();
    public static string get_DiskManagement_Cleanup_LinkText();
    public static string get_DiskManagement_Configure_LinkText();
    public static string get_Options_General_Header();
    public static string get_Options_TemporaryStorage_Header();
    public static string get_Options_AutoDelete_Header();
    public static string get_Options_StorageLocation_Label();
    public static string get_Options_StorageLocation_PathIsNotWriteable();
    public static string get_Options_SystemModules_LoadingText();
    public static string get_Options_SystemModules_CategoryLabel();
    public static string get_Options_SystemModules_ModuleNameLabel();
    public static string get_Options_SystemModules_ModuleName_ErrorPrefix();
    public static string get_TooManySnapshotsSimulatneously_Open();
    public static string get_TooManySnapshotsSimulatneously_Export();
    public static string get_Ide_OpenInStandalone_TextAction();
    public static string get_RiderUnity_Profile_Caption();
    public static string get_RiderUnity_CantDetectUnityPathText();
    public static string get_RiderUnity_UnityVersionIsNotSupported();
    public static string get_RiderUnity_UnityVersionIsUnknown();
    public static string get_SnapshotOpening_DownloadLatestRider();
    public static string get_SnapshotOpening_DownloadDotTrace241();
    public static string get_Presentation_NoFileName();
    public static string get_CallFrameInfo_NoData();
    public static string get_MethodViewData_Unknown();
    public static string get_MethodViewData_Synthetic();
    public static string get_Subsystems_Hidden();
    public static string get_Unit_SI_k();
    public static string get_Unit_SI_Mega();
    public static string get_Unit_SI_G();
    public static string get_Unit_SI_T();
    public static string get_Unit_SI_Peta();
    public static string get_Unit_SI_E();
    public static string get_Unit_SI_Zetta();
    public static string get_Unit_SI_Yotta();
    public static string get_Unit_SI_m();
    public static string get_Unit_SI_u();
    public static string get_Unit_SI_n();
    public static string get_Unit_SI_p();
    public static string get_Unit_SI_f();
    public static string get_Unit_SI_a();
    public static string get_Unit_SI_z();
    public static string get_Unit_SI_y();
    public static string get_Overview_NA();
    public static string get_Overview_Options();
    public static string get_Overview_ComputerName();
    public static string get_Overview_User();
    public static string get_Overview_Frequency();
    public static string get_Overview_CPUFrequency();
    public static string get_Overview_ProcessId();
    public static string get_Overview_Executable();
    public static string get_Overview_ProcessArchitecture();
    public static string get_Overview_OS();
    public static string get_Overview_Profiler();
    public static string get_Overview_NETRuntime();
    public static string get_Overview_EnvironmentHeader();
    public static string get_Overview_Location();
    public static string get_Overview_Taken();
    public static string get_Overview_SnapshotDuration();
    public static string get_Overview_SnapshotHeader();
    public static string get_Overview_Source();
    public static string get_Overview_Source_UnitTests();
    public static string get_Overview_CommandLine();
    public static string get_Overview_WorkingDir();
    public static string get_Overview_Stats();
    public static string get_Overview_ModulesCount();
    public static string get_Overview_FunctionsCount();
    public static string get_Overview_ThreadsCount();
    public static string get_Overview_ApplicationHeader();
    public static string get_EventLogTable_Unresolved();
    public static string get_EventLogTable_FileIo_From();
    public static string get_EventLogTable_FileIo_To();
    public static string get_EventLogTable_FileIo_Read();
    public static string get_EventLogTable_FileIo_Write();
    public static string get_SpecialValue_Sql_OpenConnection();
    public static string get_SpecialValue_Sql_BeginTransaction();
    public static string get_SpecialValue_Sql_CommitTransaction();
    public static string get_SpecialValue_Sql_RollbackTransaction();
    public static string get_SpecialValue_Sql_UnknownConnection();
    public static string get_SpecialValue_Sql_UnknownText();
    public static string get_SpecialValue_Sql_CloseConnection();
    public static string get_SpecialValue_Sql_EmptyConnection();
    public static string get_SpecialValue_Sql_EmptyText();
    public static string get_SpecialValue_Tasks_UnknownTask();
    public static string get_SpecialValue_File_UnknownFileName();
    public static string get_SpecialValue_Process_Unknown();
    public static string get_SpecialValue_Http_UnknownEndpoint();
    public static string get_SpecialValue_Unknown();
    public static string get_SpecialValue_Empty();
    public static string get_RiderIntegrationPresentableName();
    public static string get_Filters_AllocationHeap_Enum_SOH();
    public static string get_Filters_AllocationHeap_Enum_LOH();
    public static string get_Filters_AllocationHeap_Enum_POH();
    public static string get_Filters_AllocationHeap_Enum_Unknown();
    public static string get_Filters_BlockingGc_Depth_Enum_Gen0();
    public static string get_Filters_BlockingGc_Depth_Enum_Gen1();
    public static string get_Filters_BlockingGc_Depth_Enum_Gen2();
    public static string get_Filters_BlockingGc_Reason_Enum_SOH();
    public static string get_Filters_BlockingGc_Reason_Enum_Induced();
    public static string get_Filters_BlockingGc_Reason_Enum_LowMemory();
    public static string get_Filters_BlockingGc_Reason_Enum_Empty();
    public static string get_Filters_BlockingGc_Reason_Enum_LOH();
    public static string get_Filters_BlockingGc_Reason_Enum_OOS_SOH();
    public static string get_Filters_BlockingGc_Reason_Enum_OOS_LOH();
    public static string get_Filters_BlockingGc_Reason_Enum_InducedNotForced();
    public static string get_Filters_BlockingGc_Reason_Enum_Unknown();
    public static string get_Filters_Gc_Type_Enum_Blocking();
    public static string get_Filters_Gc_Type_Enum_Background();
    public static string get_Filters_Gc_Type_Enum_BlockingDuringBackground();
    public static string get_Filters_Gc_Type_Enum_Unknown();
    public static string get_Filters_OnlySystemCalls_Text();
    public static string get_Filters_OnlySystemCalls_Tooltip();
    public static string get_ConfigurationEditor_SampleRateDisplayFormatString();
    public static string get_ConfigurationEditor_SamplingRate();
    public static string get_ConfigurationEditor_SamplingAllocationsIn();
    public static string get_ConfigurationEditor_CollectUnreleasedAllocation();
    public static string get_ConfigurationEditor_AllowLoadPdbInBackground();
    public static string get_ConfigurationEditor_SamplingAllocationsInLabel();
}
[SettingsKeyAttribute("System.Reflection.Missing", "JetBrains.DotTrace.DataStructures.Resources.Strings", "CallTreePresentationSettingsSettingDescription")]
public class JetBrains.DotTrace.DataStructures.Settings.CallTreePresentationSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.DataStructures.Resources.Strings", "ShowUnresolvedCallFramesSettingDescription")]
public bool ShowUnresolvedCallFrames;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.DataStructures.Resources.Strings", "AsyncSupportSettingDescription")]
public bool AsyncSupport;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.DataStructures.Resources.Strings", "UseSteppedBackTraceDescription")]
public bool UseSteppedBackTrace;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.DataStructures.Resources.Strings", "GroupByThreadSettingDescription")]
public bool GroupByThread;
}
[SettingsKeyAttribute("System.Reflection.Missing", "JetBrains.DotTrace.DataStructures.Resources.Strings", "DotTraceOptionsSettingDescription")]
public class JetBrains.DotTrace.DataStructures.Settings.DotTraceOptions : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.DataStructures.Resources.UIResources", "UseCrossPlatformViewer")]
public bool UseCrossPlatformViewer;
}
[SettingsKeyAttribute("System.Reflection.Missing", "JetBrains.DotTrace.DataStructures.Resources.Strings", "DotTraceIdeIntegrationSettingsSettingDescription")]
public class JetBrains.DotTrace.DataStructures.Settings.IdeIntegrationViewOptions : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.DataStructures.Resources.Strings", "FilterSnapshotsBySolutionSettingDescription")]
public bool FilterSnapshotsBySolution;
}
[SettingsKeyAttribute("System.Reflection.Missing", "JetBrains.DotTrace.DataStructures.Resources.Strings", "PlainListPresentationSettingsSettingDescription")]
public class JetBrains.DotTrace.DataStructures.Settings.MethodListPresentationSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.DataStructures.Resources.Strings", "FollowSelectionSettingDescription")]
public bool FollowSelection;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.DataStructures.Resources.Strings", "ShowSystemFunctionsSettingDescription")]
public bool ShowSystemFunctions;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.DataStructures.Resources.Strings", "ShowSystemFunctionsInPlainListSettingDescription")]
public bool ShowSystemFunctionsInPlainList;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.DataStructures.Resources.Strings", "SortByTotalSettingDescription")]
public bool SortByTotal;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.DataStructures.Resources.Strings", "AutoShowSystemMethodsSettingDescription")]
public bool AutoShowSystemFunctions;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.DataStructures.Resources.Strings", "SearchAutoHideSettingDescription")]
public bool SearchAutoHide;
}
[SettingsKeyAttribute("System.Reflection.Missing", "JetBrains.DotTrace.DataStructures.Resources.Strings", "OpenSaveDialogSettingsSettingDescription")]
public class JetBrains.DotTrace.DataStructures.Settings.OpenSaveDialogSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.DataStructures.Resources.Strings", "DirectorySettingDescription")]
public string Directory;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.DataStructures.Resources.Strings", "SaveDirectorySettingDescription")]
public string SaveDirectory;
}
public interface JetBrains.DotTrace.DataStructures.Snapshot.ISnapshotOrigin {
    public FileSystemPath OriginalInputFile { get; }
    public abstract virtual FileSystemPath get_OriginalInputFile();
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
[ComponentInstantiationAttribute("-32758")]
public class JetBrains.DotTrace.DataStructures.Snapshot.SnapshotComponentAttribute : ComponentAttribute {
    public SnapshotComponentAttribute(Instantiation instantiation);
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
public class JetBrains.DotTrace.DataStructures.Snapshot.SnapshotConvertorComponentAttribute : ComponentAttribute {
    public SnapshotConvertorComponentAttribute(Instantiation instantiation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.DataStructures.Snapshot.SnapshotOrigin : object {
    [CompilerGeneratedAttribute]
private FileSystemPath <OriginalInputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <SnapshotStorageFile>k__BackingField;
    [NullableAttribute("2")]
public string ArtefactName;
    [CompilerGeneratedAttribute]
private bool <IsTemporary>k__BackingField;
    public FileSystemPath OriginalInputFile { get; private set; }
    public FileSystemPath SnapshotStorageFile { get; private set; }
    public bool IsTemporary { get; }
    [NullableContextAttribute("2")]
public SnapshotOrigin(FileSystemPath originalInputFile, string artefactName, bool isTemporary, FileSystemPath snapshotStorageFile);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_OriginalInputFile();
    [CompilerGeneratedAttribute]
private void set_OriginalInputFile(FileSystemPath value);
    [CompilerGeneratedAttribute]
public FileSystemPath get_SnapshotStorageFile();
    [CompilerGeneratedAttribute]
private void set_SnapshotStorageFile(FileSystemPath value);
    [CompilerGeneratedAttribute]
public bool get_IsTemporary();
}
public static class JetBrains.DotTrace.DataStructures.Threads.ThreadTypesEx : object {
    public static ThreadTypes[] DefaultOrder;
    public static IDictionary`2<ThreadTypes, int> DefaultOrderMap;
    private static ThreadTypesEx();
}
public interface JetBrains.DotTrace.DataStructures.TreeList.ITreeListNodeModel {
    public int ModelIndex { get; }
    public int ParentModelIndex { get; }
    public int ChildrenCount { get; }
    public abstract virtual int get_ModelIndex();
    public abstract virtual int get_ParentModelIndex();
    public abstract virtual int get_ChildrenCount();
}
public interface JetBrains.DotTrace.DataStructures.ViewModelSharedInterfaces.IActiveSnapshotComponentTracker {
    public IDataProvider`1<IComponentContainer> Provider { get; }
    [CanBeNullAttribute]
public IComponentContainer Value { get; }
    public abstract virtual IDataProvider`1<IComponentContainer> get_Provider();
    public abstract virtual IComponentContainer get_Value();
}
public interface JetBrains.DotTrace.DataStructures.ViewModelSharedInterfaces.ICallTreeCommandsExecutor {
    public ICallTreeHistoryNavigator Navigator { get; }
    public PayloadMode PayloadMode { get; public set; }
    public abstract virtual ICallTreeHistoryNavigator get_Navigator();
    public abstract virtual PayloadMode get_PayloadMode();
    public abstract virtual void set_PayloadMode(PayloadMode value);
    public abstract virtual void Navigate(FunctionUIDm fuid);
    public abstract virtual bool IsOpenCurrentMethodInstanceAvailable(ICallTreeFacade callTree);
    public abstract virtual void OpenSelectedMethodInstance(ICallTreeFacade callTree);
    public abstract virtual bool IsOpenMergedAvailable(FunctionUIDm fuid, PayloadMode payloadMode);
    public abstract virtual void OpenMerged(CallTreePath path, FunctionUIDm fuid, PayloadMode payloadMode);
    public abstract virtual bool IsAsyncContinuationAggregated();
    public abstract virtual void ToggleAsyncContinuationAggregation();
    public abstract virtual bool IsAsyncAwaitsAggregated();
    public abstract virtual void ToggleAsyncAwaitsAggregation();
    public abstract virtual bool IsExcludePathAvailable(ICallTreeFacade callTree);
    public abstract virtual void ExcludeSelectedPath(ICallTreeFacade callTree);
    public abstract virtual bool IsScopeToAsyncAvailable(ICallTreeFacade callTree);
    public abstract virtual void ScopeToAsync(ICallTreeFacade callTree);
    public abstract virtual bool IsRestorePathAvailable(ICallTreeFacade callTree);
    public abstract virtual void RestorePath(ICallTreeFacade callTree);
    public abstract virtual bool IsExcludeMethodAvailable(FunctionUIDm fuid, bool nodeIsPrefixNode);
    public abstract virtual void ExcludeMethod(ICallTreeFacade callTree, FunctionUIDm fuid);
    public abstract virtual bool IsRestoreAllAvailable();
    public abstract virtual void RestoreAll();
}
public interface JetBrains.DotTrace.DataStructures.ViewModelSharedInterfaces.ICallTreeFacade {
    public bool IsHistoryNodeSelected { get; }
    public bool HasSelectedNode { get; }
    public abstract virtual bool get_IsHistoryNodeSelected();
    public abstract virtual CallTreePath GetPathToAsyncParent();
    public abstract virtual bool ScopeAndMergeDisabled(FunctionUIDm fuid);
    public abstract virtual bool get_HasSelectedNode();
    [CanBeNullAttribute]
public abstract virtual CallTreePath GetSelectedNodePath();
    public abstract virtual bool IsLogicalRoot(CallTreePath selectedPrefix);
    public abstract virtual string GetSelectedSubtreeClipboardData();
    public abstract virtual void SelectParent();
}
public interface JetBrains.DotTrace.DataStructures.ViewModelSharedInterfaces.ICallTreeHistoryNavigator {
    public bool CanNavigateBack { get; }
    public bool CanNavigateForward { get; }
    public bool CanNavigateHome { get; }
    public abstract virtual void NavigateBack();
    public abstract virtual bool get_CanNavigateBack();
    public abstract virtual void NavigateForward();
    public abstract virtual bool get_CanNavigateForward();
    public abstract virtual void NavigateHome();
    public abstract virtual bool get_CanNavigateHome();
}
public interface JetBrains.DotTrace.DataStructures.ViewModelSharedInterfaces.IFindFunctionByNameExecutor {
    public abstract virtual bool IsAvailable();
    public abstract virtual void Execute();
}
public interface JetBrains.DotTrace.DataStructures.ViewModelSharedInterfaces.ISourceViewUpdater {
    public abstract virtual void Navigate(NavigationPath navigationPath);
}
public interface JetBrains.DotTrace.DataStructures.ViewModelSharedInterfaces.ITickTimeConverterContainer {
}
[ZoneDefinitionAttribute]
public interface JetBrains.DotTrace.DataStructures.Zones.IDotTraceStandaloneLightThemeOnlyZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.DotTrace.DataStructures.Zones.IDotTraceThemingZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.DotTrace.DataStructures.Zones.IDotTraceZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.DotTrace.DataStructures.Zones.IRemoteTimelineEnvironmentZone {
}
[ValueSerializerAttribute("JetBrains.DotTrace.DataStructures.Filters.FilterIdSerializer")]
[DataContractAttribute]
public class JetBrains.DotTrace.Features.Timeline.Filtration.FilterDefinitions.ToggleFilterId : FilterId {
    [DataMemberAttribute]
public EventTypeUID EventTypeUId;
    [JsonConstructorAttribute]
public ToggleFilterId(EventTypeUID eventTypeUId);
    public ToggleFilterId(EventTypeUID eventTypeUId, FilterRadioGroupId groupId);
    protected virtual bool DoEquals(FilterId filterId);
    public virtual int GetHashCode();
    protected virtual int DoCompareTo(FilterId other);
    [LocalizableAttribute("False")]
public virtual string ToString();
}
[DataContractAttribute]
public class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.EventTypeUID : ValueType {
    [DataMemberAttribute]
public int EventId;
    [DataMemberAttribute]
public int LayerId;
    [DataMemberAttribute]
public bool IsGlobal;
    public EventTypeUID(int layerId, bool isGlobal, int eventId);
    public sealed virtual bool Equals(EventTypeUID other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [LocalizableAttribute("False")]
public virtual string ToString();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
