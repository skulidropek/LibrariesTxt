[ActionGroupAttribute("0", "16")]
public class JetBrains.DotTrace.Features.Actions.CallTree.CallTreeContextMenu : object {
}
[ActionAttribute("", "JetBrains.DotTrace.Features.Resources.Strings", "CopySignatureToClipboardActionText")]
public class JetBrains.DotTrace.Features.Actions.CallTree.CallTreeCopyMethodSignatureAction : ViewModelAction {
}
[ActionAttribute("", "JetBrains.DotTrace.Features.Resources.Strings", "CallTreeCopySubtreeAction_ActionText")]
public class JetBrains.DotTrace.Features.Actions.CallTree.CallTreeCopySubtreeAction : CopySubtreeLogic {
}
[ActionAttribute("JetBrains.DotTrace.Features.Resources.Strings", "ScopeToThisActionText")]
public class JetBrains.DotTrace.Features.Actions.CallTree.CallTreeDoubleClickAndEnterAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.DotTrace.Features.Resources.Strings", "CallTreeExcludeCurrentPathAction_ActionText")]
public class JetBrains.DotTrace.Features.Actions.CallTree.CallTreeExcludeCurrentPathAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.DotTrace.Features.Resources.Strings", "CallTreeExcludeMethodAction_ActionText")]
public class JetBrains.DotTrace.Features.Actions.CallTree.CallTreeExcludeMethodAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.DotTrace.Features.Resources.Strings", "CallTreeFoldUnfoldDefaultAction_SystemFolding_ActionName")]
public class JetBrains.DotTrace.Features.Actions.CallTree.CallTreeFoldUnfoldDefaultAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.DotTrace.Features.Resources.Strings", "CallTreeFoldUnfoldDefaultAction_RecursiveFolding_ActionName")]
public class JetBrains.DotTrace.Features.Actions.CallTree.CallTreeFoldUnfoldExtraAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.DotTrace.Features.Resources.Strings", "NavigateBackActionText")]
public class JetBrains.DotTrace.Features.Actions.CallTree.CallTreeNavigateBackAction : CallTreeNavigateBackActionBase {
}
public class JetBrains.DotTrace.Features.Actions.CallTree.CallTreeNavigateBackActionBase : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.DotTrace.Features.Resources.Strings", "NavigateForwardActionText")]
public class JetBrains.DotTrace.Features.Actions.CallTree.CallTreeNavigateForwardAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.DotTrace.Features.Resources.Strings", "ResetCallTreeFilterActionText")]
public class JetBrains.DotTrace.Features.Actions.CallTree.CallTreeNavigateHomeAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.DotTrace.Features.Resources.Strings", "CallTreeOpenAllMethodInstancesAction_ActionText")]
public class JetBrains.DotTrace.Features.Actions.CallTree.CallTreeOpenAllMethodInstancesAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.DotTrace.Features.Resources.Strings", "CallTreeOpenCurrentMethodInstanceAction_ActionText")]
public class JetBrains.DotTrace.Features.Actions.CallTree.CallTreeOpenCurrentMethodInstanceAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.DotTrace.Features.Resources.Strings", "FilterByMethodsOwnTimeActionText")]
public class JetBrains.DotTrace.Features.Actions.CallTree.CallTreeOpenMethodWithoutUserChildrenAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.DotTrace.Features.Resources.Strings", "CallTreeRestoreAllAction_Text")]
public class JetBrains.DotTrace.Features.Actions.CallTree.CallTreeRestoreAllAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.DotTrace.Features.Resources.Strings", "CallTreeRestoreNodeAction_Text")]
public class JetBrains.DotTrace.Features.Actions.CallTree.CallTreeRestoreNodeAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.DotTrace.Features.Resources.Strings", "CallTreeScopeToAsync_ActionText")]
public class JetBrains.DotTrace.Features.Actions.CallTree.CallTreeScopeToAsync : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ActionAttribute("JetBrains.DotTrace.Features.Resources.Strings", "CallTreeShowProperties_ActionText")]
public class JetBrains.DotTrace.Features.Actions.CallTree.CallTreeShowPropertiesAction : ViewModelAction {
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.DotTrace.Features.Actions.CallTree.TreeClipboardActions : object {
    public TreeClipboardActions(CallTreeCopyMethodSignatureAction copyMethod, CallTreeCopySubtreeAction copySubtree);
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.DotTrace.Features.Actions.CallTree.TreeSnapshotActions : object {
    public TreeSnapshotActions(CallTreeDoubleClickAndEnterAction enterAction, CallTreeOpenCurrentMethodInstanceAction openCurrent, CallTreeOpenAllMethodInstancesAction openMerged, CallTreeScopeToAsync scopeAsync, CallTreeExcludeCurrentPathAction excludeCurrentPath, CallTreeRestoreNodeAction restoreNode, CallTreeExcludeMethodAction excludeMethod, CallTreeRestoreAllAction restoreAll, CallTreeFoldUnfoldDefaultAction foldUnfoldDefalt, CallTreeFoldUnfoldExtraAction foldUnfoldExtra, CallTreeNavigateNextInterestingNodeAction navigateNextInteresting, CallTreeNavigateBackAction navigateBack, CallTreeNavigateForwardAction navigateForward);
}
[ActionAttribute("JetBrains.DotTrace.Features.Resources.Strings", "NextImportantCallActionText")]
public class JetBrains.DotTrace.Features.Actions.Common.CallTreeNavigateNextInterestingNodeAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.DotTrace.Features.Resources.Strings", "ShowSnapshotCacheFolderActionText")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.DotTrace.Features.Actions.Common.ShowSnapshotCacheFolderAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.DotTrace.Features.Actions.EventTable.EventTableContextMenu : object {
    public EventTableContextMenu(EventTableShiftLeftTickAction shiftLeft, EventTableShiftRightTickAction shiftRight, EventTableShiftLeftAndRightTickAction shiftLeftAndRight, EventTableSelectThreadsAction selectThreads);
}
[ActionAttribute("JetBrains.DotTrace.Features.Resources.Strings", "EventTableSelectThreadsAction_ActionText")]
public class JetBrains.DotTrace.Features.Actions.EventTable.EventTableSelectThreadsAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.DotTrace.Features.Resources.Strings", "EventTableShiftLeftAndRightTickAction_ActionText")]
public class JetBrains.DotTrace.Features.Actions.EventTable.EventTableShiftLeftAndRightTickAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.DotTrace.Features.Resources.Strings", "EventTableShiftLeftTickAction_ActionText")]
public class JetBrains.DotTrace.Features.Actions.EventTable.EventTableShiftLeftTickAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.DotTrace.Features.Resources.Strings", "EventTableShiftRightTickAction_ActionText")]
public class JetBrains.DotTrace.Features.Actions.EventTable.EventTableShiftRightTickAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.DotTrace.Features.Resources.Strings", "CopyToClipboardActionText")]
public class JetBrains.DotTrace.Features.Actions.Icicle.CopyIcicleCallStack : CopySubtreeLogic {
}
[ActionGroupAttribute("1", "10")]
public class JetBrains.DotTrace.Features.Actions.Icicle.IcicleActionGroup : object {
    public IcicleActionGroup(IcicleNavigateBackAction back, CallTreeOpenCurrentMethodInstanceAction scopeToThis, Separator sep, CopyIcicleCallStack copy);
}
[ActionAttribute("JetBrains.DotTrace.Features.Resources.Strings", "ReturnToPreviousScopeActionText")]
public class JetBrains.DotTrace.Features.Actions.Icicle.IcicleNavigateBackAction : CallTreeNavigateBackActionBase {
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.DotTrace.Features.Actions.Modules.ModulesContextMenu : object {
    public ModulesContextMenu(MarkModuleAsSystemAction makeSystem, MarkModuleAsUserAction makeUser);
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.Actions.Modules.ZoneMarker : object {
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.DotTrace.Features.Actions.PlainList.PlainListDetailsContextMenu : object {
    public PlainListDetailsContextMenu(PlainListShowNodeAction a, TopMethodsContextMenu g);
}
[ActionAttribute("JetBrains.DotTrace.Features.Resources.Strings", "PlainListShowNodeActionText")]
public class JetBrains.DotTrace.Features.Actions.PlainList.PlainListShowNodeAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ShellComponentAttribute("10")]
internal class JetBrains.DotTrace.Features.Actions.Standalone.DotTraceHardcodedShortcuts : object {
    private IActionManager myActionManager;
    public DotTraceHardcodedShortcuts(IActionManager actionManager);
    private void BindShortcutToBothSchemes(string shortcutString, ShortcutScope shortcutScope);
    private void BindShortcut(ShortcutScheme shortcutScheme, string shortcutString, ShortcutScope shortcutScope);
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.Actions.Standalone.ZoneMarker : object {
}
[ActionAttribute("JetBrains.DotTrace.Features.Resources.Strings", "MarkModuleAsSystemActionText")]
public class JetBrains.DotTrace.Features.Actions.Systemness.MarkModuleAsSystemAction : MarkModuleAsSystemActionBase {
}
public class JetBrains.DotTrace.Features.Actions.Systemness.MarkModuleAsSystemActionBase : MarkAssemblyAsSystemActionBase {
    private bool myMakeSystem;
    protected MarkModuleAsSystemActionBase(bool makeSystem);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.DotTrace.Features.Resources.Strings", "MarkModuleAsUserActionText")]
public class JetBrains.DotTrace.Features.Actions.Systemness.MarkModuleAsUserAction : MarkModuleAsSystemActionBase {
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.DotTrace.Features.Actions.Systemness.TreeSystemnessActions : object {
    public TreeSystemnessActions(Separator s, UnifiedMarkAssemblyAsSystemAction copySubtree);
}
[ActionAttribute("JetBrains.DotTrace.Features.Resources.Strings", "MarkAllFunctionsFromAssemblyAsSystemActionText")]
public class JetBrains.DotTrace.Features.Actions.Systemness.UnifiedMarkAssemblyAsSystemAction : MarkAssemblyAsSystemActionBase {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.Actions.Systemness.ZoneMarker : object {
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.DotTrace.Features.Actions.TopMethods.TopMethodsContextMenu : object {
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.DotTrace.Features.Actions.TopMethods.TopMethodsSnapshotActions : object {
    public TopMethodsSnapshotActions(CallTreeDoubleClickAndEnterAction enterAction, CallTreeOpenAllMethodInstancesAction openMerged, CallTreeOpenMethodWithoutUserChildrenAction openHotSpot, CallTreeExcludeMethodAction excludeMethod, CallTreeRestoreAllAction restoreAll, CallTreeCopyMethodSignatureAction copyMethod);
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.Actions.ZoneMarker : object {
}
public class JetBrains.DotTrace.Features.ActionsLogic.CopySubtreeLogic : ViewModelAction {
}
public abstract class JetBrains.DotTrace.Features.ActionsLogic.LocateSnapshotLogicAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.ActionsLogic.RecentSnapshotActionHelper : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IRecentSnapshot TryGetRecentSnapshotItem(IDataContext context);
}
public abstract class JetBrains.DotTrace.Features.ActionsLogic.SaveSnapshotLogicAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public static class JetBrains.DotTrace.Features.ActivityTracking.ActivityTrackingManagerHelper : object {
    public static void TrackRunAction(ComponentContainerForFactoring container, string action, string description);
}
public enum JetBrains.DotTrace.Features.ActivityTracking.ActivityTrackingState : Enum {
    public int value__;
    public static ActivityTrackingState Undefined;
    public static ActivityTrackingState SendActivityTracking;
    public static ActivityTrackingState DoNotSendActivityTracking;
}
public interface JetBrains.DotTrace.Features.ActivityTracking.IActivityTrackingManager {
    public IProperty`1<ActivityTrackingState> TrackingState { get; }
    public abstract virtual void TrackShowHelp(string keyword, string preferredProduct);
    public abstract virtual void TrackShowTutorial(string url);
    public abstract virtual void RunAction(string action, string description);
    public abstract virtual IProperty`1<ActivityTrackingState> get_TrackingState();
}
public class JetBrains.DotTrace.Features.Async.AsyncMethodService : object {
    private static ILogger ourLog;
    private BidirectionalMapOnDictionary`2<FunctionUID, FunctionUID> myAsyncMethodToMoveNextMap;
    private HashSet`1<FunctionUID> myFilteredAsyncRelatedFuids;
    public int Count { get; }
    public IEnumerable`1<FunctionUID> MoveNextFuids { get; }
    private static AsyncMethodService();
    public sealed virtual bool TryGetMoveNextFuid(FunctionUID asyncFuid, FunctionUID& moveNextFuid);
    public sealed virtual bool TryGetAsyncFuid(FunctionUID moveNextFuid, FunctionUID& asyncFuid);
    public void AddAsyncRelatedFilteredFuid(FunctionUID fuid);
    public sealed virtual bool ShouldBeHiddenUnderAsyncFolding(FunctionUID fuid);
    public bool AddAsyncMethod(FunctionUID asyncMethod, FunctionUID moveNextMethod);
    public int get_Count();
    public sealed virtual IEnumerable`1<FunctionUID> get_MoveNextFuids();
    public sealed virtual bool IsAsyncMethod(FunctionUID fuid);
    public sealed virtual bool IsMoveNextFuid(FunctionUID fuid);
}
public class JetBrains.DotTrace.Features.Async.DisabledDalAsyncMethodsServiceContainer : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<IAsyncMethodService>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<IAsyncMethodService>> Data { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<IAsyncMethodService>> get_Data();
}
public class JetBrains.DotTrace.Features.CallTree.Actions.CallTreeCommandExecutor : object {
    private ICallTreeRootsStack myRootStack;
    private CallTreeExcludeEngine myExcludeEngine;
    public PayloadMode PayloadMode { get; public set; }
    public ICallTreeHistoryNavigator Navigator { get; }
    public CallTreeCommandExecutor(ICallTreeRootsStack rootsStack, IObservableSet`1<CallTreePath> excludedPaths);
    public sealed virtual void OpenSelectedMethodInstance(ICallTreeFacade callTree);
    public sealed virtual bool IsExcludePathAvailable(ICallTreeFacade callTree);
    private static bool ExcludeAvailableForFuid(FunctionUIDm fuid);
    public sealed virtual void ExcludeSelectedPath(ICallTreeFacade callTree);
    public sealed virtual bool IsExcludeMethodAvailable(FunctionUIDm fuid, bool nodeIsPrefixNode);
    public sealed virtual void ExcludeMethod(ICallTreeFacade callTree, FunctionUIDm fuid);
    public sealed virtual bool IsRestorePathAvailable(ICallTreeFacade callTree);
    public sealed virtual void RestorePath(ICallTreeFacade callTree);
    public sealed virtual bool IsRestoreAllAvailable();
    public sealed virtual void RestoreAll();
    public sealed virtual void OpenMerged(CallTreePath path, FunctionUIDm fuid, PayloadMode payloadMode);
    public sealed virtual bool IsAsyncContinuationAggregated();
    public sealed virtual bool IsAsyncAwaitsAggregated();
    public sealed virtual bool IsOpenMergedAvailable(FunctionUIDm fuid, PayloadMode payloadMode);
    public sealed virtual void ToggleAsyncContinuationAggregation();
    public sealed virtual void ToggleAsyncAwaitsAggregation();
    public sealed virtual bool IsOpenCurrentMethodInstanceAvailable(ICallTreeFacade callTree);
    public sealed virtual bool IsScopeToAsyncAvailable(ICallTreeFacade callTree);
    public sealed virtual void ScopeToAsync(ICallTreeFacade callTree);
    [CanBeNullAttribute]
private static CallTreePath CreateScopeToAsyncPath(ICallTreeFacade callTree);
    public sealed virtual PayloadMode get_PayloadMode();
    public sealed virtual void set_PayloadMode(PayloadMode value);
    public sealed virtual void Navigate(FunctionUIDm fuid);
    public sealed virtual ICallTreeHistoryNavigator get_Navigator();
}
public class JetBrains.DotTrace.Features.CallTree.Backend.CallTree`1 : object {
    private ITree`2<CallTreeNodeId, ICallTreeNodeViewModelInternal> myTree;
    [CanBeNullAttribute]
private ICallTreeHistoryManager`1<TPayload> myHistoryManager;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <IsEmpty>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICallTreeNodeViewModel> <SelectedNode>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeListStructureProvider`1<ICallTreeNodeViewModel> <StructureProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBacktrace>k__BackingField;
    [CompilerGeneratedAttribute]
private CallTreePath <RootPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<CallTreePath> <ModelSelection>k__BackingField;
    public IDataProvider`1<bool> IsEmpty { get; }
    public IDataProvider`1<ICallTreeNodeViewModel> SelectedNode { get; }
    public ITreeListStructureProvider`1<ICallTreeNodeViewModel> StructureProvider { get; }
    public bool HasSelectedNode { get; }
    public bool IsBacktrace { get; }
    public IDataProvider`1<IEnumerable`1<CallTreeTransitionViewModel>> Transitions { get; }
    public CallTreePath RootPrefix { get; }
    public bool IsHistoryNodeSelected { get; }
    public IDataProvider`1<CallTreePath> ModelSelection { get; }
    public CallTree`1(Lifetime lifetime, ITree`2<CallTreeNodeId, ICallTreeNodeViewModelInternal> tree, ICallTreeHistoryManager`1<TPayload> historyManager, bool isBacktrace, bool isPopup, bool useSteppedBackTrace);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<bool> get_IsEmpty();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICallTreeNodeViewModel> get_SelectedNode();
    [CompilerGeneratedAttribute]
public sealed virtual ITreeListStructureProvider`1<ICallTreeNodeViewModel> get_StructureProvider();
    public sealed virtual CallTreePath GetPathToAsyncParent();
    public sealed virtual bool ScopeAndMergeDisabled(FunctionUIDm fuid);
    public sealed virtual bool get_HasSelectedNode();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsBacktrace();
    public sealed virtual IDataProvider`1<IEnumerable`1<CallTreeTransitionViewModel>> get_Transitions();
    [CompilerGeneratedAttribute]
public sealed virtual CallTreePath get_RootPrefix();
    public sealed virtual CallTreePath GetSelectedNodePath();
    public sealed virtual bool IsLogicalRoot(CallTreePath selectedPrefix);
    public sealed virtual string GetSelectedSubtreeClipboardData();
    public sealed virtual void SelectParent();
    private static void PrintNode(StringBuilder builder, ITreeNodeViewModel frame, int level, bool isBackTraceMode);
    public sealed virtual bool get_IsHistoryNodeSelected();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<CallTreePath> get_ModelSelection();
    [CompilerGeneratedAttribute]
private ITreeNode`2<CallTreeNodeId, ICallTreeNodeViewModelInternal> <.ctor>b__2_1();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.CallTree.Backend.CallTreeExtensions : object {
    [ExtensionAttribute]
public static CallTreePath GetNodePath(ITree`2<CallTreeNodeId, TNodeModel> tree, ITreeNode`2<CallTreeNodeId, TNodeModel> node);
    public static CallTreePath GetNodePath(IEnumerable`1<CallTreeNodeId> rootPrefix, IEnumerable`1<CallTreeNodeId> nodePrefix);
    [ExtensionAttribute]
public static ITreeNode`2<TKey, TNodeModel> GetFirstRoot(ITree`2<TKey, TNodeModel> tree);
}
public class JetBrains.DotTrace.Features.CallTree.Backend.CallTreeNodeViewModel`1 : TreeNodeViewModelBase`3<CallTreeNodeId, CallTreeNodeInfo`1<TPayload>, CallTreeNodeUserState> {
    private int myLastStates;
    private bool myRecursionHighlighting;
    private bool myIsBacktrace;
    private Nullable`1<double> myCustomIntensity;
    [CompilerGeneratedAttribute]
private IDataNotifier`1<bool> <IsHighlighted>k__BackingField;
    [CompilerGeneratedAttribute]
private NamePair <NamePair>k__BackingField;
    [CompilerGeneratedAttribute]
private FunctionUIDm <Fuid>k__BackingField;
    [CompilerGeneratedAttribute]
private object <FormattedPayload>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ExcludedPayload>k__BackingField;
    public bool IsAuxiliary { get; }
    public bool IsSystem { get; }
    public bool IsAsync { get; }
    public bool IsStrokeOut { get; }
    public bool IsSystemFoldable { get; }
    public bool IsRecursiveFoldable { get; }
    public bool ShowPercents { get; }
    public bool ShowPayload { get; }
    public bool HasPayload { get; }
    public bool ShowExcludedPayload { get; }
    public bool RecursionHighlighting { get; }
    public bool IsBacktrace { get; }
    public bool IsVisibleRoot { get; }
    public bool HasLoadedChildren { get; }
    public IDataNotifier`1<bool> IsHighlighted { get; private set; }
    public Percents Percents { get; }
    public NamePair NamePair { get; }
    public FunctionUIDm Fuid { get; }
    public object FormattedPayload { get; }
    public object ExcludedPayload { get; }
    public double Intensity { get; }
    protected bool IsBacktracePassThroughNode { get; }
    protected double PercentsValue { get; }
    public bool IsSystemFolded { get; public set; }
    public bool IsRecursiveFolded { get; public set; }
    public ITreeNodeViewModel Parent { get; }
    public CallTreeNodeViewModel`1(CallTreeNodeInfo`1<TPayload> nodeInfo, NamePair namePair, IFormattedPayloadViewModel formattedPayload, IFormattedPayloadViewModel excludedPayload, FunctionUIDm fuid, bool isBacktrace, ICommand`1<CallTreeNodeId[]> treeScopeToThis, Nullable`1<double> customIntensity);
    public virtual void AttachFacade(ITreeNode`2<CallTreeNodeId, ITreeNodeViewModel> container, IUserStateTree`2<CallTreeNodeId, CallTreeNodeUserState> treeFacade);
    public sealed virtual bool get_IsAuxiliary();
    public sealed virtual bool get_IsSystem();
    public sealed virtual bool get_IsAsync();
    public sealed virtual bool get_IsStrokeOut();
    public sealed virtual bool get_IsSystemFoldable();
    public sealed virtual bool get_IsRecursiveFoldable();
    public sealed virtual bool get_ShowPercents();
    public sealed virtual bool get_ShowPayload();
    public sealed virtual bool get_HasPayload();
    public sealed virtual bool get_ShowExcludedPayload();
    public sealed virtual bool get_RecursionHighlighting();
    public sealed virtual bool get_IsBacktrace();
    public sealed virtual bool get_IsVisibleRoot();
    public sealed virtual bool get_HasLoadedChildren();
    [CompilerGeneratedAttribute]
public sealed virtual IDataNotifier`1<bool> get_IsHighlighted();
    [CompilerGeneratedAttribute]
private void set_IsHighlighted(IDataNotifier`1<bool> value);
    public sealed virtual Percents get_Percents();
    [CompilerGeneratedAttribute]
public sealed virtual NamePair get_NamePair();
    [CompilerGeneratedAttribute]
public sealed virtual FunctionUIDm get_Fuid();
    [CompilerGeneratedAttribute]
public sealed virtual object get_FormattedPayload();
    [CompilerGeneratedAttribute]
public sealed virtual object get_ExcludedPayload();
    public sealed virtual double get_Intensity();
    protected virtual bool get_IsBacktracePassThroughNode();
    protected virtual double get_PercentsValue();
    public sealed virtual bool get_IsSystemFolded();
    public sealed virtual void set_IsSystemFolded(bool value);
    public sealed virtual bool get_IsRecursiveFolded();
    public sealed virtual void set_IsRecursiveFolded(bool value);
    public sealed virtual ITreeNodeViewModel get_Parent();
    public sealed virtual void SetRecursionHighlighting(bool highlight);
    protected virtual void BeforeUserStateChange();
    protected virtual bool IsStateChanged();
    private int GetPackedUserState();
    public virtual string ToString();
    private sealed virtual override bool JetBrains.DotTrace.DataStructures.CallTree.Backend.ICallTreeNodeViewModel.get_IsPrefixNode();
    private sealed virtual override void JetBrains.DotTrace.DataStructures.CallTree.Backend.ICallTreeNodeViewModel.FocusNextImportantCall();
}
public interface JetBrains.DotTrace.Features.CallTree.Backend.ICallTreeHistoryManager`1 {
    public IDataProvider`1<IEnumerable`1<CallTreeTransitionViewModel>> Transitions { get; }
    public IDataProvider`1<bool> HasSelectedNode { get; }
    public IDataProvider`1<CallTreePath> SelectedNodePath { get; }
    public IDataController`1<bool> ShowNavigationHistory { get; }
    public IDataProvider`1<ICallTreeNodeViewModel> SelectedNode { get; }
    public abstract virtual IDataProvider`1<IEnumerable`1<CallTreeTransitionViewModel>> get_Transitions();
    public abstract virtual void ClearSelection();
    public abstract virtual IDataProvider`1<bool> get_HasSelectedNode();
    public abstract virtual IDataProvider`1<CallTreePath> get_SelectedNodePath();
    public abstract virtual IDataController`1<bool> get_ShowNavigationHistory();
    public abstract virtual IDataProvider`1<ICallTreeNodeViewModel> get_SelectedNode();
    public abstract virtual void SetNewPrefix(CallTreePathNodeInfo`1[] newPrefix, CallTreeNodeId rootNodeId, IAccessor`1<IMetadataReaderMerged> metadataAccessor, IPayloadPresenters`1<TPayload> presenters);
}
public interface JetBrains.DotTrace.Features.CallTree.Backend.ICallTreeNodeViewModelInternal {
    public abstract virtual void SetRecursionHighlighting(bool highlight);
}
public class JetBrains.DotTrace.Features.CallTree.CallTreeBaseModel : object {
    [CompilerGeneratedAttribute]
private IDataController`1<bool> <GroupByThread>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICallTree> <CallTree>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataPipeNode <ProgressProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataController`1<bool> <ShowNavigationHistory>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<PayloadMode> <ChildrenExcludeMode>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<string> <ContinuationsPayload>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <HasContinuations>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<string> <AwaitsPayload>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <HasAwaits>k__BackingField;
    public IDataController`1<bool> GroupByThread { get; }
    public IDataProvider`1<ICallTree> CallTree { get; }
    public IDataPipeNode ProgressProvider { get; }
    public IDataController`1<bool> ShowNavigationHistory { get; }
    public IDataProvider`1<PayloadMode> ChildrenExcludeMode { get; }
    public IDataProvider`1<string> ContinuationsPayload { get; }
    public IDataProvider`1<bool> HasContinuations { get; }
    public IDataProvider`1<string> AwaitsPayload { get; }
    public IDataProvider`1<bool> HasAwaits { get; }
    public CallTreeBaseModel(IDataController`1<bool> groupByThread, IDataProvider`1<ICallTree> callTreeProvider, IDataPipeNode callTreeProgressSource, IDataController`1<bool> showNavigationHistory, IDataProvider`1<PayloadMode> childrenExcludeMode, IDataProvider`1<bool> hasContinuations, IDataProvider`1<string> continuationsPayload, IDataProvider`1<bool> hasAwaits, IDataProvider`1<string> awaitsPayload);
    [CompilerGeneratedAttribute]
public sealed virtual IDataController`1<bool> get_GroupByThread();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICallTree> get_CallTree();
    [CompilerGeneratedAttribute]
public sealed virtual IDataPipeNode get_ProgressProvider();
    [CompilerGeneratedAttribute]
public sealed virtual IDataController`1<bool> get_ShowNavigationHistory();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<PayloadMode> get_ChildrenExcludeMode();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<string> get_ContinuationsPayload();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<bool> get_HasContinuations();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<string> get_AwaitsPayload();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<bool> get_HasAwaits();
}
public abstract class JetBrains.DotTrace.Features.CallTree.CallTreeBaseModelBuilder`2 : object {
    [NotNullAttribute]
private ICacheProviderContainer`1<IAccessor`1<IMetadataReaderMerged>> myMetadataProviderContainer;
    [NotNullAttribute]
private IMethodPrinter myMethodPrinter;
    [NotNullAttribute]
private ICallTreeHistoryManager`1<TPayload> myHistoryManager;
    [NotNullAttribute]
private IRemotablePairContainer`1<DataPipeLifetime> myLifetimeContainer;
    [NotNullAttribute]
private IPayloadPresentersProvider`1<TPayload> myPayloadPresentersProviderContainer;
    [NotNullAttribute]
private IProviderContainer`1<IPayloadPresenters`1<TPayload>> myPayloadPresenterContainer;
    [NotNullAttribute]
private IProviderContainer`1<IPayloadNormalizer`1<TPayload>> myPayloadNormalizerContainer;
    [NotNullAttribute]
private ICallTreeRootsStack myRootsStack;
    [NotNullAttribute]
private IRemotableReference`1<ICallTreePayloadsSource`2<TPtr, TPayload>> myCallTreePayloadsComponent;
    [NotNullAttribute]
private CallTreePresentationSettingsComponent myCallTreePresentationSettings;
    [NotNullAttribute]
private IRemotableReference`1<IProviderContainer`1<ICallTreeAccessors`1<TPtr>>> myTreeAccessorsContainer;
    [NotNullAttribute]
private IRemotableReference`1<CallTreeFilterInputComponents`1<TPtr>> myRemoteComponents;
    [NotNullAttribute]
private IRemotableReference`1<ICallTreeRootProvider`1<TPtr>> myCallTreeRootProvider;
    [NotNullAttribute]
private IExcludedNodesProvider myExcludedNodesProvider;
    [NotNullAttribute]
private ISnapshotStateStorageProvider mySnapshotStateAccessorContainerProvider;
    [NotNullAttribute]
private IRemotableReference`1<IProviderContainer`1<IRootsSplitter`1<TPtr>>> myRootsSplitterProvider;
    [CanBeNullAttribute]
private IRemotableReference`1<IProviderContainer`1<ThreadPowersInfo`1<TPtr>>> myThreadPowersProvider;
    protected CallTreeBaseModelBuilder`2(ICacheProviderContainer`1<IAccessor`1<IMetadataReaderMerged>> metadataProviderContainer, IMethodPrinter methodPrinter, ICallTreeHistoryManager`1<TPayload> historyManager, IRemotablePairContainer`1<DataPipeLifetime> lifetimeContainer, IPayloadPresentersProvider`1<TPayload> payloadPresentersProviderContainer, IProviderContainer`1<IPayloadPresenters`1<TPayload>> payloadPresenterContainer, IProviderContainer`1<IPayloadNormalizer`1<TPayload>> payloadNormalizerContainer, ICallTreeRootsStack rootsStack, IRemotableReference`1<ICallTreePayloadsSource`2<TPtr, TPayload>> callTreePayloadsComponent, CallTreePresentationSettingsComponent callTreePresentationSettings, IRemotableReference`1<IProviderContainer`1<ICallTreeAccessors`1<TPtr>>> treeAccessorsContainer, IRemotableReference`1<CallTreeFilterInputComponents`1<TPtr>> remoteComponents, IRemotableReference`1<ICallTreeRootProvider`1<TPtr>> callTreeRootProvider, IExcludedNodesProvider excludedNodesProvider, ISnapshotStateStorageProvider snapshotStateAccessorContainerProvider, IRemotableReference`1<IProviderContainer`1<IRootsSplitter`1<TPtr>>> rootsSplitterProvider, IRemotableReference`1<IProviderContainer`1<ThreadPowersInfo`1<TPtr>>> threadPowersProvider);
    public Result<TPayload, TPtr> Build();
    private static RemotePipelineOutput<TPayload, TPtr> BuildRemotePipeline(RemotePipelineInput<TPayload, TPtr> input);
    [CompilerGeneratedAttribute]
private Func`2<Lifetime, CallTreeNodeFactory`1<TPayload>> <Build>b__19_10(IAccessor`1<IMetadataReaderMerged> metadataAccessor, IPayloadPresenters`1<TPayload> callTreePayloadPresenter, ICommand`1<CallTreeNodeId[]> scopeToThisCommand, Func`2<FunctionUIDm, Nullable`1<double>> fuidToIntensity);
}
internal class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Cache.CallTreeCacheNode`1 : object {
    private IDictionary`2<Pair`2<CallTreeNodeId, CallTreeDirection>, ICallTreeCacheNode`1<T>> myChildren;
    [CompilerGeneratedAttribute]
private ICallTreeNodeDefinitionData`1<T> <NodeDefinition>k__BackingField;
    public ICallTreeNodeDefinitionData`1<T> NodeDefinition { get; private set; }
    public sealed virtual bool TryGetChild(CallTreeNodeId id, CallTreeDirection direction, ICallTreeCacheNode`1& result);
    public sealed virtual void UpdateChild(CallTreeNodeId id, CallTreeDirection direction, ICallTreeCacheNode`1<T> result);
    [CompilerGeneratedAttribute]
public sealed virtual ICallTreeNodeDefinitionData`1<T> get_NodeDefinition();
    [CompilerGeneratedAttribute]
private void set_NodeDefinition(ICallTreeNodeDefinitionData`1<T> value);
    public static CallTreeCacheNode`1<T> CreateDummyNode();
    public static ICallTreeCacheNode`1<T> CreateDataDefinitionNode(ICallTreeNodeDefinitionData`1<T> nodeDefinitionData);
}
internal interface JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Cache.ICallTreeCacheNode`1 {
    [CanBeNullAttribute]
public ICallTreeNodeDefinitionData`1<T> NodeDefinition { get; }
    public abstract virtual bool TryGetChild(CallTreeNodeId id, CallTreeDirection direction, ICallTreeCacheNode`1& result);
    public abstract virtual void UpdateChild(CallTreeNodeId id, CallTreeDirection direction, ICallTreeCacheNode`1<T> result);
    public abstract virtual ICallTreeNodeDefinitionData`1<T> get_NodeDefinition();
}
public class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.CallTreeNodeFactory`1 : object {
    private IMethodPrinter myMethodPrinter;
    private IMetadataReaderMerged myMetadataInfoProvider;
    private IPayloadPresenters`1<TPayload> myPayloadPresenters;
    private ICommand`1<CallTreeNodeId[]> myScopeToThisCommand;
    [CanBeNullAttribute]
private Func`2<FunctionUIDm, Nullable`1<double>> myCustomIntensityForFuid;
    public CallTreeNodeFactory`1(IMethodPrinter methodPrinter, IMetadataReaderMerged metadataInfoProvider, IPayloadPresenters`1<TPayload> payloadPresenters, ICommand`1<CallTreeNodeId[]> scopeToThisCommand, Func`2<FunctionUIDm, Nullable`1<double>> customIntensityForFuid);
    public sealed virtual ICallTreeNodeViewModelInternal CreateNodeViewModel(CallTreeNodeInfo`1<TPayload> info, CallTreeNodeId key, object responseData);
    public sealed virtual ICallTreeNodeViewModelInternal CreateFakeRootNode();
    public sealed virtual ICallTreeNodeViewModelInternal CreateLoadingRootNode(CallTreeNodeId key);
    [CompilerGeneratedAttribute]
private IMetadataReaderMerged <CreateNodeViewModel>b__6_0(Lifetime _);
    [CompilerGeneratedAttribute]
private IMetadataReaderMerged <CreateLoadingRootNode>b__8_0(Lifetime _);
}
[ThreadSafeAttribute]
public class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.CallTreeNodeMinuses`1 : object {
    private object myLock;
    private IMinuses`1 modreq(System.Runtime.CompilerServices.IsVolatile) myAllMinuses;
    private static int ourMinusesLength;
    private IMinuses`1[] myMinuses;
    private IDictionary`2<T, MinusType> myMinusTypesMap;
    private static CallTreeNodeMinuses`1<T> myEmpty;
    public static CallTreeNodeMinuses`1<T> Empty { get; }
    private CallTreeNodeMinuses`1(IMinuses`1[] minuses);
    private static CallTreeNodeMinuses`1();
    public static CallTreeNodeMinuses`1<T> get_Empty();
    public static ICallTreeNodeMinuses`1<T> CreateRecursiveMinuses(IMinuses`1<T> minuses);
    public sealed virtual IMinuses`1<T> GetMinuses(MinusType type);
    public sealed virtual bool IsMinus(T ptr, MinusType type);
    public sealed virtual Nullable`1<MinusType> GetMinusType(T ptr);
    public sealed virtual IMinuses`1<T> GetAll(ICallTreeReader`1<T> reader);
    private IMinuses`1<T> MergeMinuses(ICallTreeReader`1<T> reader);
    public sealed virtual ICallTreeNodeMinuses`1<T> AddMinuses(IEnumerable`1<T> pointers, MinusType type, ICallTreeReader`1<T> reader);
    public sealed virtual ICallTreeNodeMinuses`1<T> MergeMinuses(ICallTreeNodeMinuses`1<T> minuses2, ICallTreeReader`1<T> reader);
    private IMinuses`1[] CloneMinuses();
    public sealed virtual ICallTreeNodeMinuses`1<T> Remove(MinusType type);
    public sealed virtual ICallTreeNodeMinuses`1<T> Remove(IEnumerable`1<T> pointers, MinusType type, ICallTreeReader`1<T> reader);
    public sealed virtual ICallTreeNodeMinuses`1<T> ClearMinuses(MinusType[] types);
}
public static class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.CallTreeNodeTooltips : object {
    private static IDictionary`2<PayloadType, string> ourDowntraceTooltips;
    private static IDictionary`2<PayloadType, string> ourBacktraceTooltips;
    private static CallTreeNodeTooltips();
    public static string GetTooltip(PayloadType type, CallTreeDirection direction);
}
public class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.CallTreeService`2 : object {
    private static ILogger ourLogger;
    [CanBeNullAttribute]
private CallTreePayloads`2<T, TPayload> myPayloads;
    private IPayloadNormalizer`1<TPayload> myPayloadNormalizer;
    private TPayload myTotalPayload;
    private int myTreeVersion;
    [NotNullAttribute]
private IAccessor`1<ICallTreeNodesProvider`1<T>> myNodesAccessor;
    [NotNullAttribute]
private IAsyncMethodService myAsyncMethodInfoProvider;
    [NotNullAttribute]
private IFuidsMatcher myFuidsMatcher;
    [NotNullAttribute]
private ICallTreeNodeDefinitionData`1[] myRoots;
    private Comparison`1<TreeNode`2<CallTreeNodeId, CallTreeNodeInfo`1<TPayload>>> myTreeRootNodesComparer;
    public CallTreeService`2(IAccessor`1<ICallTreeNodesProvider`1<T>> nodesAccessor, IAsyncMethodService asyncMethodInfoProvider, IFuidsMatcher fuidsMatcher, CallTreePayloads`2<T, TPayload> payloads, IPayloadNormalizer`1<TPayload> payloadNormalizer, Comparison`1<TreeNode`2<CallTreeNodeId, CallTreeNodeInfo`1<TPayload>>> customTreeRootNodesComparer, int treeVersion);
    private static CallTreeService`2();
    public sealed virtual TreeUpdateResponse`2<CallTreeNodeId, CallTreeNodeInfo`1<TPayload>> ProcessRequest(TreeUpdateRequest`2<CallTreeNodeId, CallTreeNodeUserState> request, CallTreeDirection direction, IExecutionController controller);
    private RootNodePresentationInfo<T, TPayload> GetRootNodePresentationInfo(CallTreeNodeId[] pathToRequestedNode, ICallTreeNodesProvider`1<T> tm, PayloadGetter`2<T, TPayload> payloadsGetter, ResolvedCallTreePath`1<T> resolvedPath);
    private TreeNode`2<CallTreeNodeId, CallTreeNodeInfo`1<TPayload>> CreateResponseRootNode(IEnumerable`1<TreeNode`2<CallTreeNodeId, CallTreeNodeInfo`1<TPayload>>> children);
    private TreeNode`2<CallTreeNodeId, CallTreeNodeInfo`1<TPayload>> LoadSubtree(Nullable`1<ResolvedCallTreePath`1<T>> resolvedPath, TreeNode`2<CallTreeNodeId, CallTreeNodeUserState> visualStateRoot, bool hasUnfoldedAncestor, bool hasNoSiblings, bool treatAsZeroPercent, ICallTreeNodesProvider`1<T> tm, PayloadGetter`2<T, TPayload> payloadsGetter, LoadSubtreeOptions loadSubtreeOptions);
    private TreeNode`2<CallTreeNodeId, CallTreeNodeInfo`1<TPayload>> LoadSubtreeCore(LoadSubtreeData<T, TPayload> rootData, TPayload totalPayload, LoadSubtreeOptions loadSubtreeOptions, ICallTreeNodesProvider`1<T> tm, PayloadGetter`2<T, TPayload> payloadsGetter, bool isRequestRoot);
    private static bool IsTaskRecursionFolded(ICallTreeNodeDefinitionData`1<T> node, ICallTreeReaderWithIndexes`1<T> reader);
    private static bool IsStrokeOut(ExcludeState excludeState);
    public static int CompareTreeNodes(TreeNode`2<CallTreeNodeId, CallTreeNodeInfo`1<TPayload>> x, TreeNode`2<CallTreeNodeId, CallTreeNodeInfo`1<TPayload>> y);
    private TreeNode`2<CallTreeNodeId, CallTreeNodeInfo`1<TPayload>> CreateEmptyLogicalRootNode(CallTreeNodeId id);
    private IEnumerable`1<ICallTreeNodeDefinitionData`1<T>> GetChildrenFilteredOutByPayload(ICallTreeNodeDefinitionData`1<T> node, bool isSystemFolded, bool isRecursivelyFolded, ICallTreeNodesProvider`1<T> tm, PayloadGetter`2<T, TPayload> payloadsGetter);
    private static bool IsSystemFoldedByUser(TreeNode`2<CallTreeNodeId, CallTreeNodeUserState> visualState);
    private static bool IsSystemUnfoldedByUser(TreeNode`2<CallTreeNodeId, CallTreeNodeUserState> visualState);
    private static bool IsRecursivelyFoldedByUser(TreeNode`2<CallTreeNodeId, CallTreeNodeUserState> visualState);
    private IEnumerable`1<ICallTreeNodeDefinitionData`1<T>> GetSystemUnfoldedVisibleChildren(ICallTreeNodeDefinitionData`1<T> data, bool isRecursivelyFolded, ICallTreeNodesProvider`1<T> tm, PayloadGetter`2<T, TPayload> payloadsGetter);
    private bool CanBeSystemFoldable(ICallTreeNodeDefinitionData`1<T> data);
    private bool WillBreakSystemFolding(ICallTreeNodeDefinitionData`1<T> data);
    private NodePresentationInfo<T, TPayload> GetNodePresentationInfo(ICallTreeNodeDefinitionData`1<T> data, bool hasUnfoldedAncestor, bool isSystemFoldedIfFoldable, bool isRecursionFoldedIfFoldable, ICallTreeNodesProvider`1<T> nodesProvider, PayloadGetter`2<T, TPayload> payloadsGetter);
    private TPayload CalculateExcludedPayload(TPayload payload, AccessDataEx`1<T> payloadAccessDataEx, ICallTreeReaderWithIndexes`1<T> treeReader, PayloadGetter`2<T, TPayload> payloadsGetter);
    private bool CheckIfNodeRecursiveFoldable(ICallTreeNodeDefinitionData`1<T> data, ICallTreeReader`1<T> reader, PayloadGetter`2<T, TPayload> payloadsGetter);
    private bool CheckSubtreeIsSystem(ICallTreeNodeDefinitionData`1<T> data, bool considerVisibility, ICallTreeNodesProvider`1<T> nodesProvider, PayloadGetter`2<T, TPayload> payloadsGetter, bool isRecursivelyFolded, Boolean& recursiveFoldingChangesNothing);
    private bool CheckDowntraceSubtreeIsSystemCore(ICallTreeNodeDefinitionData`1<T> node, ICallTreeReaderWithIndexes`1<T> reader, bool isRecursivelyFolded, Func`4<FunctionUIDm, ICallTreeReaderWithIndexes`1<T>, AccessData`1<T>, bool> checkIfUserChildrenHasDescendantsWithSpecifiedFuid, Func`3<ICallTreeReaderWithIndexes`1<T>, AccessDataEx`1<T>, bool> checkIfWholeSubtreeIsSystem, Boolean& recursiveFoldingChangesNothing);
    private AccessData`1<T> GetDescendantsWithSpecifiedFuidForUserChildren(FunctionUIDm fuid, ICallTreeReaderWithIndexes`1<T> metadata, AccessData`1<T> accessData);
    private bool CheckIfUserChildrenHasDescendantsWithSpecifiedFuid(FunctionUIDm fuid, ICallTreeReaderWithIndexes`1<T> reader, AccessData`1<T> accessData);
    private bool CheckIfUserChildrenHasVisibleDescendantsWithSpecifiedFuid(FunctionUIDm fuid, ICallTreeReaderWithIndexes`1<T> metadata, PayloadGetter`2<T, TPayload> payloadsGetter, AccessData`1<T> accessData);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.CallTreeServiceEx : object {
    [ExtensionAttribute]
public static ITreeService`3<CallTreeNodeId, CallTreeNodeInfo`1<TPayload>, CallTreeNodeUserState> ToDirectedCallTreeService(ICallTreeService`1<TPayload> service, CallTreeDirection direction);
}
public class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.CallTreeWithPrefixStructureProvider`1 : object {
    private T myRoot;
    private IList`1<T> myCurrentPrefix;
    private JetHashSet`1<T> myPrefixHashSet;
    private ITreeListStructureProvider`1<T> myTreeStructureProvider;
    [CompilerGeneratedAttribute]
private EventHandler`1<ItemUpdatedEventArgs`1<T>> myItemUpdated;
    [CompilerGeneratedAttribute]
private EventHandler`1<NodeUpdatedEventArgs`1<T>> myItemUpdatedV2;
    public T Root { get; }
    public IEventHandlerWithState`1<ItemUpdatedEventArgs`1<T>> OnScrollToItem { get; }
    public CallTreeWithPrefixStructureProvider`1(Lifetime lifetime, ITreeListStructureProvider`1<T> treeStructureProvider, ITreePrefixProvider`1<T> prefix, T root);
    private void OnPrefixChanged(IEnumerable`1<T> newValue);
    public sealed virtual T get_Root();
    public sealed virtual bool HasChildren(T item);
    public sealed virtual T GetParent(T item);
    public sealed virtual bool GetIsExpanded(T item);
    public sealed virtual void SetIsExpanded(T item, bool isExpanded);
    public sealed virtual IEnumerable`1<T> GetChildren(T item);
    [CompilerGeneratedAttribute]
private void add_myItemUpdated(EventHandler`1<ItemUpdatedEventArgs`1<T>> value);
    [CompilerGeneratedAttribute]
private void remove_myItemUpdated(EventHandler`1<ItemUpdatedEventArgs`1<T>> value);
    public sealed virtual void add_ItemUpdated(EventHandler`1<ItemUpdatedEventArgs`1<T>> value);
    public sealed virtual void remove_ItemUpdated(EventHandler`1<ItemUpdatedEventArgs`1<T>> value);
    private void StructureProviderOnItemUpdated(object sender, ItemUpdatedEventArgs`1<T> itemUpdatedEventArgs);
    [CompilerGeneratedAttribute]
private void add_myItemUpdatedV2(EventHandler`1<NodeUpdatedEventArgs`1<T>> value);
    [CompilerGeneratedAttribute]
private void remove_myItemUpdatedV2(EventHandler`1<NodeUpdatedEventArgs`1<T>> value);
    public sealed virtual void add_ItemUpdatedV2(EventHandler`1<NodeUpdatedEventArgs`1<T>> value);
    public sealed virtual void remove_ItemUpdatedV2(EventHandler`1<NodeUpdatedEventArgs`1<T>> value);
    public sealed virtual IEventHandlerWithState`1<ItemUpdatedEventArgs`1<T>> get_OnScrollToItem();
    private void StructureProviderOnItemUpdatedV2(object sender, NodeUpdatedEventArgs`1<T> nodeUpdatedEventArgs);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.DataClases.CallTreePayloadsEx : object {
    [ExtensionAttribute]
public static TPayload GetPayload(PayloadGetter`2<T, TPayload> payloads, T callStack);
    [ExtensionAttribute]
public static TPayload CalculatePayloads(PayloadGetter`2<T, TPayload> payloads, IEnumerable`1<T> pointers);
    [ExtensionAttribute]
public static TPayload GetPayload(PayloadGetter`2<T, TPayload> payloads, AccessData`1<T> accessData, ICallTreeReader`1<T> treeReader);
    [ExtensionAttribute]
public static bool HasNonEmptyPayload(PayloadGetter`2<T, TPayload> payloads, ICallTreeReader`1<T> metadata, AccessData`1<T> accessData);
    [ExtensionAttribute]
public static TPayload GetPayload(PayloadGetter`2<T, TPayload> payloads, ICallTreeNodeDefinitionData`1<T> data, ICallTreeReader`1<T> reader, bool isRecursiveFolded, IFuidsMatcher matcher);
    public static AccessDataEx`1<T> GetPayloadAccessDataEx(ICallTreeNodeDefinitionData`1<T> data, ICallTreeReader`1<T> reader, bool isRecursiveFolded, IFuidsMatcher matcher);
}
public class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.ExcludeState : object {
    private MinusType myMinusType;
    public MinusType Minus { get; }
    public ExcludeState(MinusType minusType);
    public MinusType get_Minus();
}
public interface JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.ICallTreeNodeDefinitionData`1 {
    public CallTreeNodeId Id { get; }
    [CanBeNullAttribute]
public ExcludeState ExcludeState { get; }
    public CallTreeDirection Direction { get; }
    public bool IsSystem { get; }
    [NotNullAttribute]
public IPointersCollection`1<T> PointersCollection { get; }
    public ICallTreeNodeMinuses`1<T> Minuses { get; }
    public Nullable`1<AccessDataEx`1<T>> AccessDataIfNodeIsRecursive { get; public set; }
    public abstract virtual CallTreeNodeId get_Id();
    public abstract virtual ExcludeState get_ExcludeState();
    public abstract virtual CallTreeDirection get_Direction();
    public abstract virtual bool get_IsSystem();
    public abstract virtual IPointersCollection`1<T> get_PointersCollection();
    public abstract virtual ICallTreeNodeMinuses`1<T> get_Minuses();
    public abstract virtual Nullable`1<AccessDataEx`1<T>> get_AccessDataIfNodeIsRecursive();
    public abstract virtual void set_AccessDataIfNodeIsRecursive(Nullable`1<AccessDataEx`1<T>> value);
}
public interface JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.ICallTreeNodeMinuses`1 {
    [CanBeNullAttribute]
public abstract virtual IMinuses`1<T> GetMinuses(MinusType type);
    public abstract virtual bool IsMinus(T ptr, MinusType type);
    public abstract virtual Nullable`1<MinusType> GetMinusType(T ptr);
    [PureAttribute]
[CanBeNullAttribute]
public abstract virtual IMinuses`1<T> GetAll(ICallTreeReader`1<T> reader);
    [PureAttribute]
[NotNullAttribute]
public abstract virtual ICallTreeNodeMinuses`1<T> AddMinuses(IEnumerable`1<T> pointers, MinusType type, ICallTreeReader`1<T> reader);
    public abstract virtual ICallTreeNodeMinuses`1<T> MergeMinuses(ICallTreeNodeMinuses`1<T> minuses2, ICallTreeReader`1<T> reader);
    [PureAttribute]
public abstract virtual ICallTreeNodeMinuses`1<T> Remove(MinusType type);
    [PureAttribute]
public abstract virtual ICallTreeNodeMinuses`1<T> Remove(IEnumerable`1<T> pointers, MinusType type, ICallTreeReader`1<T> reader);
    [PureAttribute]
public abstract virtual ICallTreeNodeMinuses`1<T> ClearMinuses(MinusType[] types);
}
public interface JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.ICallTreeService`1 {
    [NotNullAttribute]
public abstract virtual TreeUpdateResponse`2<CallTreeNodeId, CallTreeNodeInfo`1<TPayload>> ProcessRequest(TreeUpdateRequest`2<CallTreeNodeId, CallTreeNodeUserState> request, CallTreeDirection direction, IExecutionController controller);
}
public interface JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.IPointersCollection`1 {
    public IEnumerable`1<T> NavigationPointers { get; }
    public IEnumerable`1<T> PayloadPointers { get; }
    public abstract virtual IEnumerable`1<T> get_NavigationPointers();
    public abstract virtual IEnumerable`1<T> get_PayloadPointers();
    public abstract virtual T GetNavigationPointer(T payloadPointer);
}
public interface JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.ITreePrefixProvider`1 {
    public IDataProvider`1<IEnumerable`1<T>> Nodes { get; }
    public abstract virtual T FindNearestNodeAfterUpdate(T oldNode);
    public abstract virtual IDataProvider`1<IEnumerable`1<T>> get_Nodes();
}
public class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.LoadCallTreePrefixInfo`1 : MulticastDelegate {
    public LoadCallTreePrefixInfo`1(object object, IntPtr method);
    public virtual IDataProvider`1<CallTreePathNodeInfo`1[]> Invoke(CallTreePath path);
    public virtual IAsyncResult BeginInvoke(CallTreePath path, AsyncCallback callback, object object);
    public virtual IDataProvider`1<CallTreePathNodeInfo`1[]> EndInvoke(IAsyncResult result);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.LoadCallTreePrefixInfoHelpers : object {
    [ExtensionAttribute]
public static LoadCallTreePrefixInfo`1<T> SwitchPrefixLoaderLocalIfRemote(IRemotableReference`1<LoadCallTreePrefixInfo`1<T>> remoteLoader);
    private static LoadCallTreePrefixInfo`1<T> SwitchLocal(IRemotableReference`1<LoadCallTreePrefixInfo`1<T>> remoteDelegate);
    private static IDataProvider`1<CallTreePathNodeInfo`1[]> LoadPrefixRemotely(CallTreePath prefix, IRemotableReference`1<LoadCallTreePrefixInfo`1<T>> remoteLoader);
}
internal class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.LoadSubtreeOptions : object {
    private static int ForceExpandMaxDepth;
    [CanBeNullAttribute]
private UpdateRequestOptions myOptions;
    public bool IsSystemFoldedByDefault { get; }
    public LoadSubtreeOptions(UpdateRequestOptions options);
    public bool get_IsSystemFoldedByDefault();
    public ExpandNodeResult CalculateExpand(bool hasNoSiblings, bool isSystemUnfoldedByUser, int recursiveDepth, double percent, double parentPercent, bool isFirstNode);
}
public enum JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.MinusType : Enum {
    public int value__;
    public static MinusType Recursion;
    public static MinusType Continuation;
    public static MinusType Await;
    public static MinusType Exclude;
    public static MinusType PayloadFilter;
    public static MinusType TaskScheduled;
}
public class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.AccessDataEx`1 : ValueType {
    [NotNullAttribute]
public IEnumerable`1<T> CallTreePtrs;
    [NotNullAttribute]
public ICallTreeNodeMinuses`1<T> CallTreeMinuses;
    public AccessDataEx`1(IEnumerable`1<T> callTreePtrs, ICallTreeNodeMinuses`1<T> callTreeMinuses);
    public AccessData`1<T> MergeMinuses(ICallTreeReader`1<T> treeReader);
    public AccessDataEx`1<T> ExcludeMinuses(MinusType minusType);
}
[IsReadOnlyAttribute]
public class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.AccessDataWithExcludedPaths`1 : ValueType {
    public FunctionUIDm Fuid;
    [NotNullAttribute]
public IEnumerable`1<T> CallTreePtrs;
    [NotNullAttribute]
public ICallTreeNodeMinuses`1<T> CallTreeMinuses;
    [CanBeNullAttribute]
public CallTreePath[] ExcludedPaths;
    public AccessDataWithExcludedPaths`1(FunctionUIDm fuid, IEnumerable`1<T> callTreePtrs, ICallTreeNodeMinuses`1<T> callTreeMinuses, CallTreePath[] excludedPaths);
    public AccessDataEx`1<T> ToAccessDataEx();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.CallTreeNodeDefinitionDataEx : object {
    [ExtensionAttribute]
public static CallTreeDirection RootsDirection(ICallTreeNodeDefinitionData`1[] roots);
    [ExtensionAttribute]
public static ICallTreeNodeDefinitionData`1<T> GetSingleRootSafe(ICallTreeNodeDefinitionData`1[] roots);
}
public class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.CallTreeNodesAccessor`1 : object {
    [NotNullAttribute]
public IAccessor`1<ICallTreeNodesProvider`1<T>> NodesAccessor;
    [CanBeNullAttribute]
public CallTreePath[] ExcludedPaths;
    public CallTreeNodesAccessor`1(IAccessor`1<ICallTreeNodesProvider`1<T>> nodesAccessor, CallTreePath[] excludedPaths);
}
public class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.CallTreeNodesAccessors`1 : object {
    [NotNullAttribute]
public IAccessor`1<ICallTreeNodesProvider`1<T>> MergedNodesAccessor;
    [NotNullAttribute]
public IAccessor`1<ICallTreeNodesProvider`1<T>> SplittedNodesAccessor;
    [CanBeNullAttribute]
public CallTreePath[] ExcludedPaths;
    public CallTreeNodesAccessors`1(IAccessor`1<ICallTreeNodesProvider`1<T>> mergedNodesAccessor, IAccessor`1<ICallTreeNodesProvider`1<T>> splittedNodesAccessor, CallTreePath[] excludedPaths);
}
internal class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.CallTreeNodesProvider`1 : object {
    [NotNullAttribute]
private CallTreeCacheNode`1<T> myCacheRoot;
    private IAsyncMethodService myAsyncMethodService;
    private IAsyncMethodCallTreeService`1<T> myAsyncCallTreeService;
    private IFuidsMatcher myFuidsMatcher;
    [CompilerGeneratedAttribute]
private ICallTreeReaderWithIndexes`1<T> <ReaderWithIndexes>k__BackingField;
    [CompilerGeneratedAttribute]
private AccessDataEx`1<T> <RootAccessData>k__BackingField;
    [CompilerGeneratedAttribute]
private ICallTreeNodeDefinitionData`1[] <Roots>k__BackingField;
    public ICallTreeReaderWithIndexes`1<T> ReaderWithIndexes { get; }
    public AccessDataEx`1<T> RootAccessData { get; }
    [NotNullAttribute]
public ICallTreeNodeDefinitionData`1[] Roots { get; }
    public CallTreeNodesProvider`1(ICallTreeReaderWithIndexes`1<T> callTreeReader, ICallTreeNodeDefinitionData`1[] roots, CallTreeCacheNode`1<T> cacheRoot, IAsyncMethodService asyncMethodService, IAsyncMethodCallTreeService`1<T> asyncMethodCallTreeService, IFuidsMatcher matcher);
    [CompilerGeneratedAttribute]
public sealed virtual ICallTreeReaderWithIndexes`1<T> get_ReaderWithIndexes();
    [CompilerGeneratedAttribute]
public sealed virtual AccessDataEx`1<T> get_RootAccessData();
    [CompilerGeneratedAttribute]
public sealed virtual ICallTreeNodeDefinitionData`1[] get_Roots();
    public sealed virtual AccessDataEx`1<T> GetOrBuildDownChildrenAccessAndMinusesPtrs(ICallTreeNodeDefinitionData`1<T> nodeData, bool isLastNodeRecursivelyFolded);
    public sealed virtual ResolvedCallTreePath`1<T> ResolvePath(CallTreePath pathToRequestedNode, CallTreeDirection lastNodeDirection, IExecutionController controller);
    private FunctionUIDm ComposeKey(T callTreePtr);
    private IEnumerable`1<PlusOrMinus`1<T>> GetTopLevelDescendantsForFuid(FunctionUID fuid, AccessData`1<T> accessData);
    private IEnumerable`1<PlusOrMinus`1<T>> GetTopLevelDescendantsForFuid(FunctionUIDm fuid, AccessData`1<T> accessData);
    private IEnumerable`1<T> GetNearestAncestors(List`1<T> otherRootPointers, FunctionUIDm mergedFuid);
    public sealed virtual IEnumerable`1<ICallTreeNodeDefinitionData`1<T>> GetChildren(ICallTreeNodeDefinitionData`1<T> node, bool isSystemFolded, bool isRecursivelyFolded);
    [CanBeNullAttribute]
private ICallTreeNodeDefinitionData`1<T> GetChild(ICallTreeNodeDefinitionData`1<T> parentNode, CallTreeNodeId childId, CallTreeDirection direction);
    [PureAttribute]
private ICallTreeNodeMinuses`1<T> AdjustMinusesForAsyncs(CallTreeNodeId nodeId, IEnumerable`1<T> pointers, ICallTreeNodeMinuses`1<T> minuses);
    private ICallTreeNodeMinuses`1<T> RemoveAwaitsFromMinuses(IEnumerable`1<T> pointers, ICallTreeNodeMinuses`1<T> minuses);
    private ICallTreeNodeMinuses`1<T> RemoveContinuationsFromMinuses(CallTreeNodeId nodeId, IEnumerable`1<T> pointers, ICallTreeNodeMinuses`1<T> minuses);
    private ExcludeState ComputeExcludeState(IEnumerable`1<CallTreePointerPairWithMinuses`1<T>> data);
    [CanBeNullAttribute]
private ICallTreeNodeDefinitionData`1<T> BuildNodeDefinition(ICallTreeNodeDefinitionData`1<T> parentNode, CallTreeNodeId nodeId, CallTreeDirection direction);
    public sealed virtual ICallTreeNodeDefinitionData`1<T> ApplyPayloadMode(CallTreeNodeId nodeId, CallTreeDirection direction, ICallTreeNodeDefinitionData`1<T> root);
    private PlusMinusAccessData`1<T> GetDowntraceChildrenPtrs(ICallTreeNodeDefinitionData`1<T> node, bool systemFolded, bool isRecursivelyFolded);
    private IEnumerable`1<PlusOrMinus`1<T>> GetChildrenUnderSystemFolding(ICallTreeNodeDefinitionData`1<T> node, AccessDataEx`1<T> accessDataEx);
    private IEnumerable`1<T> ContinuationPtrs(IEnumerable`1<T> asyncPtrs);
    private IEnumerable`1<T> AwaitPtrs(IEnumerable`1<T> asyncPtrs);
    private AccessDataEx`1<T> RecursiveMoveNextPtrsAccessData(FunctionUID moveNextFuid, AccessDataEx`1<T> accessDataEx);
    private AccessDataEx`1<T> ExcludeContinuations(AccessDataEx`1<T> accessDataEx);
    private ICallTreeNodeDefinitionData`1<T> CreateMergedNode(ICallTreeNodeDefinitionData`1[] roots, CallTreeNodeId nodeId, CallTreeDirection direction);
    [CanBeNullAttribute]
private ICallTreeNodeDefinitionData`1<T> CreateMergedNode(AccessDataEx`1<T> accessData, CallTreeNodeId nodeId, CallTreeDirection direction);
    public sealed virtual IEnumerable`1<CallTreePointerPairWithMinuses`1<T>> GetChildrenPtrs(ICallTreeNodeDefinitionData`1<T> node, bool systemFolded, bool isRecursivelyFolded, ICallTreeNodeMinuses`1& minuses);
    private IEnumerable`1<CallTreePointerPairEx`1<T>> GetChildrenPtrPairs(ICallTreeNodeDefinitionData`1<T> nodeData, bool systemFolded, bool isRecursivelyFolded, ICallTreeNodeMinuses`1& minuses);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.CallTreeNodesProvider`1/<<GetNearestAncestors>g__GetNearestAncestorsUnsorted|19_0>d")]
[CompilerGeneratedAttribute]
private IEnumerable`1<T> <GetNearestAncestors>g__GetNearestAncestorsUnsorted|19_0(List`1<T> ptrs, FunctionUIDm fuid);
    [CompilerGeneratedAttribute]
private bool <GetChildrenUnderSystemFolding>b__29_0(PlusOrMinus`1<T> c);
    [CompilerGeneratedAttribute]
private bool <GetChildrenUnderSystemFolding>b__29_1(PlusOrMinus`1<T> c);
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <ContinuationPtrs>b__30_0(T c);
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <AwaitPtrs>b__31_0(T c);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.CallTreeNodesProviderEx : object {
    [ExtensionAttribute]
public static Nullable`1<AccessData`1<T>> GetNodeAccessData(IAccessor`1<ICallTreeNodesProvider`1<T>> nodesProvider, CallTreePath path, bool isLastNodeRecursivelyFolded, IExecutionController controller);
    [ExtensionAttribute]
public static Nullable`1<AccessData`1<T>> GetNodeAccessData(ICallTreeNodesProvider`1<T> nodesProvider, CallTreePath path, bool isLastNodeRecursivelyFolded, IExecutionController controller);
}
[ExtensionAttribute]
internal static class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.CallTreeNodesProviderHelpers : object {
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.CallTreeNodesProviderHelpers/<FilterVisibleNodes>d__0`1")]
[ExtensionAttribute]
public static IEnumerable`1<CallTreePointerPairWithMinuses`1<T>> FilterVisibleNodes(IEnumerable`1<CallTreePointerPairEx`1<T>> sequence, ICallTreeNodeMinuses`1<T> minuses, ICallTreeNodeDefinitionData`1<T> parentNode);
    [ExtensionAttribute]
private static bool IsMinusVisible(MinusType minusType, ICallTreeNodeDefinitionData`1<T> parentNode);
    [ExtensionAttribute]
[ContractAnnotationAttribute("minus:null=>false")]
private static bool IsMinusVisible(Nullable`1<MinusType> minus, ICallTreeNodeDefinitionData`1<T> parentNode);
}
public class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.CallTreePointerPairEx`1 : ValueType {
    public PlusOrMinus`1<T> NavigationPointer;
    public T PayloadPointer;
    public CallTreePointerPairEx`1(T payloadPointer, PlusOrMinus`1<T> navigationPointer);
}
[IsReadOnlyAttribute]
public class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.CallTreePointerPairWithMinuses`1 : ValueType {
    public Nullable`1<MinusType> MinusType;
    public T NavigationPointer;
    public T PayloadPointer;
    public CallTreePointerPair`1<T> Pair { get; }
    public CallTreePointerPairWithMinuses`1(T payloadPointer, T navigationPointer, Nullable`1<MinusType> minusType);
    public CallTreePointerPair`1<T> get_Pair();
}
public class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.CallTreePrefixHelper : object {
    public static CallTreePathNodeInfo`1[] LoadPrefixInfo(IAccessor`1<ICallTreeNodesProvider`1<T>> callTreeNodesAccessor, CallTreePayloads`2<T, TPayload> payloads, CallTreePath path, IAccessor`1<IDataMapper`2<FunctionUIDm, bool>> systemnessAccessor, IFuidsMatcher matcher, IExecutionController controller);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.CallTreeReaderWithIndexes : object {
    public static IAccessor`1<ICallTreeReaderWithIndexes`1<T>> GetReaderWithIndexesAccessor(IAccessor`1<ICallTreeReader`1<T>> callTreeReader, IAccessor`1<ICallTreeIndexes`1<T>> callTreeIndexes);
    [ExtensionAttribute]
public static IDataProvider`1<IAccessor`1<ICallTreeReaderWithIndexes`1<T>>> CreateReaderWithIndexesAccessorProvider(ICallTreeAccessors`1<T> accessors);
    public static ICallTreeReaderWithIndexes`1<T> GetReaderWithIndexes(ICallTreeReader`1<T> reader, ICallTreeIndexes`1<T> indexes);
}
internal class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.CallTreeReaderWithIndexes`1 : object {
    [NotNullAttribute]
private ICallTreeReader`1<T> myCallTreeReader;
    [CanBeNullAttribute]
private ICallTreeIndexes`1<T> myCallTreeIndexes;
    public IComparer`1<T> PointersComparer { get; }
    public CallTreeReaderWithIndexes`1(ICallTreeReader`1<T> callTreeReader, ICallTreeIndexes`1<T> callTreeIndexes);
    public sealed virtual FunctionUID ReadKey(T callTreePtr);
    public sealed virtual IEnumerable`1<PlusOrMinus`1<T>> GetChildren(AccessData`1<T> accessData);
    public sealed virtual T GetParent(T callTreePtr);
    public sealed virtual bool IsRootPointer(T callTreePtr);
    public sealed virtual IEnumerable`1<PlusOrMinus`1<T>> GetTopLevelDescendantsForFuid(FunctionUID fuid, AccessData`1<T> accessData);
    public sealed virtual IEnumerable`1<PlusOrMinus`1<T>> GetAllAccessPointersForFuid(FunctionUID fuid, AccessData`1<T> accessData);
    public sealed virtual T[] GetAllAccessPointersForFuid(FunctionUID fuid, AccessData`1<T> accessData, IList`1& recursivePtrs);
    public sealed virtual IEnumerable`1<PlusOrMinus`1<T>> GetTopLevelMinusesDescendants(AccessData`1<T> accessData);
    public sealed virtual IEnumerable`1<T> GetTopPointers(IEnumerable`1<T> callTreePtrs);
    public sealed virtual IEnumerable`1<PlusOrMinus`1<T>> MergePointers(IEnumerable`1<PlusOrMinus`1<T>> callTreePtrs1, IEnumerable`1<PlusOrMinus`1<T>> callTreePtrs2);
    public sealed virtual IMinuses`1<T> CreateMinuses(IEnumerable`1<T> first, IMinuses`1<T> second);
    public sealed virtual Exception ValidateAccessData(AccessData`1<T> accessData);
    public sealed virtual IEnumerable`1<T> SortPointers(IEnumerable`1<T> pointers);
    public sealed virtual IEnumerable`1<T> DistinctSortedPointers(IEnumerable`1<T> pointers);
    public sealed virtual IComparer`1<T> get_PointersComparer();
    public sealed virtual ValueTuple`2<Dictionary`2<T, long>, long> GetSubtreesPowers(AccessData`1<T> accessData);
    public sealed virtual bool IsOneOfMinuses(T callTreeOffset, IMinuses`1<T> minuses);
    public sealed virtual IEnumerable`1<PlusOrMinus`1<T>> GetTopUserDescendants(AccessData`1<T> accessData);
    public sealed virtual IEnumerable`1<PlusOrMinus`1<T>> GetTopMethodsOwnPlusSystemDescendants(AccessData`1<T> accessData);
    public sealed virtual IEnumerable`1<PlusOrMinus`1<T>> GetTopMethodsOwnPlusNonFunctionDescendants(AccessData`1<T> accessData);
    public sealed virtual bool IsSystem(T callTreePtr);
    public sealed virtual bool HasSystemSubtree(AccessData`1<T> accessData);
}
public static class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.FuidsMergeHelper : object {
    public static IEnumerable`1<TResult> MergeNonIntersecting(FunctionUIDm mergedFuid, IFuidsMatcher matcher, Func`2<FunctionUID, IEnumerable`1<TResult>> enumeratorBuilder, Func`2<TResult, TPtr> toPtr, IComparer`1<TPtr> ptrComparer);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.Helpers : object {
    private static CallTreeNodesAccessors`1<T> CreateNodesAccessors(IAccessor`1<ICallTreeReaderWithIndexes`1<T>> treeAccessor, IAsyncMethodService asyncMethodService, IAsyncMethodCallTreeService`1<T> asyncMethodCallTreeService, Nullable`1<AccessDataWithExcludedPaths`1<T>> rootAccessData, IFuidsMatcher matcher, IRootsSplitter`1<T> rootsSplitter);
    [ExtensionAttribute]
private static bool IsSystem(FunctionUIDm rootFuid, IAccessor`1<ICallTreeReaderWithIndexes`1<T>> treeAccessor, AccessDataEx`1<T> accessDataEx);
    public static CallTreeNodesAccessors`1<T> CreateNodesAccessors(IAccessor`1<ICallTreeReaderWithIndexes`1<T>> treeAccessor, IAsyncMethodService asyncMethodService, IAsyncMethodCallTreeService`1<T> asyncMethodCallTreeService, ICallTreeNodeDefinitionData`1[] mergedRoots, ICallTreeNodeDefinitionData`1[] splittedRoots, IFuidsMatcher matcher, CallTreePath[] excludedPaths);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.Helpers/<GetNearestAncestors>d__3`1")]
public static IEnumerable`1<T> GetNearestAncestors(ICallTreeReaderWithIndexes`1<T> reader, IEnumerable`1<T> callStacks, FunctionUID fuid);
    [ExtensionAttribute]
public static IDataProvider`1<CallTreeNodesAccessors`1<TPtr>> BuildNodesAccessors(IDataProvider`1<RootAccessData`1<TPtr>> rootsProvider, DataPipeLifetime dataPipeLifetime, IDataProvider`1<ICallTreeAccessors`1<TPtr>> treeAccessorsProvider, IDataProvider`1<bool> asyncSupported, CallTreeFilterInputComponents`1<TPtr> inputComponents, IDataProvider`1<CallTreePath[]> excludedPathsProvider, IDataProvider`1<IRootsSplitter`1<TPtr>> byThreadSplitter);
    [ExtensionAttribute]
public static IDataProvider`1<CallTreeNodesAccessors`1<TPtr>> BuildNodesAccessors(IDataProvider`1<RootAccessData`1<TPtr>> rootProvider, IDataProvider`1<IRootsSplitter`1<TPtr>> byThreadSplitter, IDataProvider`1<IAccessor`1<ICallTreeReaderWithIndexes`1<TPtr>>> treeReaderWithIndexes, IDataProvider`1<bool> asyncSupportedProvider, IDataProvider`1<IAsyncMethodService> asyncMethodServices, IDataProvider`1<IAsyncMethodCallTreeService`1<TPtr>> asyncMethodCallTreeServices, IDataProvider`1<IFuidsMatcher> fuidsMatcher, IDataProvider`1<CallTreePath[]> excludedPaths, DataPipeLifetime pipeLifetime);
    [CompilerGeneratedAttribute]
internal static ICallTreeNodeDefinitionData`1[] <CreateNodesAccessors>g__RootsDefinitionData|0_0(IRootsSplitter`1<T> splitter, <>c__DisplayClass0_0`1& );
}
public interface JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.ICallTreeNodesProvider`1 {
    public ICallTreeReaderWithIndexes`1<T> ReaderWithIndexes { get; }
    public AccessDataEx`1<T> RootAccessData { get; }
    public ICallTreeNodeDefinitionData`1[] Roots { get; }
    public abstract virtual ICallTreeReaderWithIndexes`1<T> get_ReaderWithIndexes();
    public abstract virtual AccessDataEx`1<T> get_RootAccessData();
    public abstract virtual ICallTreeNodeDefinitionData`1[] get_Roots();
    public abstract virtual IEnumerable`1<ICallTreeNodeDefinitionData`1<T>> GetChildren(ICallTreeNodeDefinitionData`1<T> node, bool isSystemFolded, bool isRecursivelyFolded);
    public abstract virtual IEnumerable`1<CallTreePointerPairWithMinuses`1<T>> GetChildrenPtrs(ICallTreeNodeDefinitionData`1<T> node, bool isSystemFolded, bool isRecursivelyFolded, ICallTreeNodeMinuses`1& minuses);
    public abstract virtual AccessDataEx`1<T> GetOrBuildDownChildrenAccessAndMinusesPtrs(ICallTreeNodeDefinitionData`1<T> nodeData, bool isLastNodeRecursivelyFolded);
    public abstract virtual ResolvedCallTreePath`1<T> ResolvePath(CallTreePath pathToRequestedNode, CallTreeDirection lastNodeDirection, IExecutionController controller);
    public abstract virtual ICallTreeNodeDefinitionData`1<T> ApplyPayloadMode(CallTreeNodeId nodeId, CallTreeDirection direction, ICallTreeNodeDefinitionData`1<T> root);
}
public class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.IdentityPointersCollection`1 : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <NavigationPointers>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <PayloadPointers>k__BackingField;
    public IEnumerable`1<T> NavigationPointers { get; }
    public IEnumerable`1<T> PayloadPointers { get; }
    public IdentityPointersCollection`1(IEnumerable`1<T> ptrs);
    public IdentityPointersCollection`1(IPointersCollection`1<T> collection);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<T> get_NavigationPointers();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<T> get_PayloadPointers();
    public sealed virtual T GetNavigationPointer(T payloadPointer);
}
public interface JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.IRootsSplitter`1 {
    public abstract virtual IEnumerable`1<ValueTuple`2<FunctionUIDm, AccessDataEx`1<T>>> SplitRoots(ICallTreeReader`1<T> callTreeReader, AccessDataWithExcludedPaths`1<T> rootAccessData);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.NodeDefinitionHelpers : object {
    private static ICallTreeNodeMinuses`1<T> GetRootMinuses(ICallTreeNodeDefinitionData`1[] roots);
    public static AccessDataEx`1<T> GetAllRootsAccessData(ICallTreeNodeDefinitionData`1[] roots, ICallTreeReader`1<T> callTreeReader);
    public static ICallTreeNodeDefinitionData`1<T> CreateRootData(FunctionUIDm fuid, bool isSystem, CallTreeDirection direction, AccessDataEx`1<T> callStacks);
    public static ICallTreeNodeDefinitionData`1<T> ResetPayloadsAndMinuses(ICallTreeNodeDefinitionData`1<T> node, ICallTreeReader`1<T> reader);
    private static ICallTreeNodeDefinitionData`1<T> RemoveRecursiveMinuses(ICallTreeNodeDefinitionData`1<T> node, ICallTreeReader`1<T> reader);
    private static ICallTreeNodeDefinitionData`1<T> ResetPayloadPointers(ICallTreeNodeDefinitionData`1<T> node, bool resetMinuses, ICallTreeReader`1<T> reader);
    public static ICallTreeNodeDefinitionData`1<T> FilterByPayloadMode(ICallTreeNodeDefinitionData`1<T> node, ICallTreeReaderWithIndexes`1<T> reader, PayloadMode desiredPayloadMode, IAsyncMethodService asyncMethodService, IFuidsMatcher matcher);
    private static ICallTreeNodeMinuses`1<T> CreateMinusesForPayloadMode(AccessDataEx`1<T> accessDataEx, ICallTreeReaderWithIndexes`1<T> reader, PayloadMode desiredPayloadMode);
    private static IEnumerable`1<PlusOrMinus`1<T>> DescendantsToExclude(AccessData`1<T> accessData, ICallTreeReaderWithIndexes`1<T> reader, PayloadMode desiredPayloadMode);
    [ExtensionAttribute]
public static AccessData`1<T> GetChildrenAccessData(ICallTreeNodeDefinitionData`1<T> node, ICallTreeReader`1<T> reader);
    [ExtensionAttribute]
public static AccessDataEx`1<T> GetChildrenAccessDataEx(ICallTreeNodeDefinitionData`1<T> node);
    [CanBeNullAttribute]
public static ICallTreeNodeDefinitionData`1<T> CreateDefinitionData(CallTreeNodeId nodeId, CallTreeDirection direction, IPointersCollection`1<T> pointersCollection, ICallTreeNodeMinuses`1<T> minuses, ICallTreeReaderWithIndexes`1<T> reader, ExcludeState excludeState);
    public static ICallTreeNodeDefinitionData`1<T> GetAllRootsNodeDefinition(ICallTreeNodeDefinitionData`1[] allRoots, ICallTreeReader`1<T> callTreeReader);
    public static IEnumerable`1<CallTreePointerPair`1<T>> CreatePairs(IEnumerable`1<T> ptrs);
    [ExtensionAttribute]
public static IEnumerable`1<CallTreePointerPair`1<T>> GetBacktraceChildrenPtrs(ICallTreeReaderWithIndexes`1<T> tm, ICallTreeNodeDefinitionData`1<T> nodeData, bool systemFolded, IAsyncMethodService asyncCallTreeService);
    private static Nullable`1<T> GetNextAncestorPtr(ICallTreeReaderWithIndexes`1<T> tm, bool systemFolded, IAsyncMethodService asyncCallTreeService, T inputPtr);
    private static Nullable`1<CallTreePointerPair`1<T>> GetNextAncestorPair(ICallTreeReaderWithIndexes`1<T> tm, bool systemFolded, IAsyncMethodService asyncCallTreeService, T payloadPointer, T navigationPointer);
    [ExtensionAttribute]
public static AccessDataEx`1<T> GetOrBuildDownChildrenAccessAndMinusesPtrs(ICallTreeReader`1<T> reader, ICallTreeNodeDefinitionData`1<T> nodeData, bool isRecursivelyFolded, IFuidsMatcher matcher);
    [ExtensionAttribute]
public static AccessData`1<T> GetAllPointersAndMinusesForFuid(ICallTreeReader`1<T> reader, AccessData`1<T> accessData, FunctionUIDm functionUIDm, IFuidsMatcher matcher);
    private static T[] GetAllAccessPointersForFuid(ICallTreeReader`1<T> reader, AccessData`1<T> accessData, FunctionUIDm mergedFuid, IFuidsMatcher matcher, IList`1& recursivePointers);
    [ExtensionAttribute]
public static IEnumerable`1<PlusOrMinus`1<T>> GetTopLevelDescendantsForFuid(ICallTreeReader`1<T> reader, FunctionUIDm fuid, AccessData`1<T> accessData, IFuidsMatcher matcher);
    [NotNullAttribute]
public static ICallTreeNodeMinuses`1<T> FilterAsyncMethodByPayload(AccessDataEx`1<T> accessDataEx, FunctionUID moveNextFuid, PayloadMode desiredPayloadMode, ICallTreeReaderWithIndexes`1<T> reader);
}
public class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.NoSplit`1 : object {
    public static IRootsSplitter`1<T> Instance;
    private static NoSplit`1();
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.NoSplit`1/<SplitRoots>d__1")]
public sealed virtual IEnumerable`1<ValueTuple`2<FunctionUIDm, AccessDataEx`1<T>>> SplitRoots(ICallTreeReader`1<T> callTreeReader, AccessDataWithExcludedPaths`1<T> rootAccessData);
}
public class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.PairedPointersCollection`1 : object {
    private ICallTreeReader`1<T> myReader;
    private IDictionary`2<T, T> myCallPoints;
    public IEnumerable`1<T> NavigationPointers { get; }
    public IEnumerable`1<T> PayloadPointers { get; }
    public PairedPointersCollection`1(IEnumerable`1<CallTreePointerPair`1<T>> callPoints, ICallTreeReader`1<T> reader);
    public PairedPointersCollection`1(IPointersCollection`1<T> collection, ICallTreeReader`1<T> reader);
    public sealed virtual IEnumerable`1<T> get_NavigationPointers();
    public sealed virtual IEnumerable`1<T> get_PayloadPointers();
    public sealed virtual T GetNavigationPointer(T payloadPointer);
}
public class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.PlusMinusAccessData`1 : ValueType {
    [NotNullAttribute]
public IEnumerable`1<PlusOrMinus`1<T>> CallTreePtrs;
    [CanBeNullAttribute]
public ICallTreeNodeMinuses`1<T> CallTreeMinuses;
    public PlusMinusAccessData`1(IEnumerable`1<PlusOrMinus`1<T>> callTreePtrs, ICallTreeNodeMinuses`1<T> callTreeMinuses);
}
public class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.PlusMinusCallTreePtrPair`1 : ValueType {
    public PlusOrMinus`1<T> NavigationPointer;
    public T PayloadPointer;
}
public class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.ResolvedCallTreeNodeData`1 : ValueType {
    public CallTreeNodeId Id;
    public ICallTreeNodeDefinitionData`1<T> Definition;
}
public class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.ResolvedCallTreePath`1 : ValueType {
    public ResolvedCallTreeNodeData`1[] Nodes;
    public int RootIndex;
    public bool FullPathWasProcessed;
    public ResolvedCallTreeNodeData`1<T> TargetNode { get; }
    public ResolvedCallTreeNodeData`1<T> LogicalRootNode { get; }
    public ResolvedCallTreeNodeData`1<T> get_TargetNode();
    public ResolvedCallTreeNodeData`1<T> get_LogicalRootNode();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.ResolvedCallTreePathEx : object {
    [ExtensionAttribute]
[ContractAnnotationAttribute("path:null => true")]
public static bool IsRootRequest(Nullable`1<ResolvedCallTreePath`1<T>> path, CallTreeNodeId& rootId);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.SortedNonIntersectingPtrMerger : object {
    public static IEnumerable`1<TPtr> Build(TSourceList first, TSourceList second, IComparer`1<TPtr> comparer);
    public static IMinuses`1<TPtr> Build(IMinuses`1<TPtr> first, IMinuses`1<TPtr> second, IComparer`1<TPtr> comparer);
    [ExtensionAttribute]
private static void AddSafe(SortedNonIntersectingPtrMerger`3<TSourceList, TPtr, TPtr> merger, TSourceList list);
}
public class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.SortedNonIntersectingPtrMerger`3 : object {
    private object myLockObject;
    private Func`2<TResult, TPtr> myToPtr;
    [CanBeNullAttribute]
private IComparer`1<TPtr> myPtrComparer;
    private MergerState<TSourceList, TResult, TPtr> myMergerState;
    private List`1<TSourceList> mySources;
    private List`1<IEnumerator`1<TResult>> myEnumerators;
    public SortedNonIntersectingPtrMerger`3(Func`2<TResult, TPtr> toPtr, IComparer`1<TPtr> ptrComparer);
    public void Add(TSourceList input);
    private void BuildEnumeratorsIfNeeded();
    public bool HasSingleResult();
    public TSourceList GetSingleResult();
    public IEnumerable`1<TResult> GetMergedResult();
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.SortedNonIntersectingPtrMerger`3/<GetMergedResultCore>d__13")]
private IEnumerable`1<TResult> GetMergedResultCore();
    private static IEnumerator`1<TResult> GetNotEmptyEnumerator(TSourceList enumerable);
    [CompilerGeneratedAttribute]
private int <BuildEnumeratorsIfNeeded>b__9_0(Pair`2<TSourceList, IEnumerator`1<TResult>> a, Pair`2<TSourceList, IEnumerator`1<TResult>> b);
}
public class JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.SplitByFuid`1 : object {
    private IFuidsMatcher myFuidsMatcher;
    public SplitByFuid`1(IFuidsMatcher fuidsMatcher);
    public sealed virtual IEnumerable`1<ValueTuple`2<FunctionUIDm, AccessDataEx`1<T>>> SplitRoots(ICallTreeReader`1<T> callTreeReader, AccessDataWithExcludedPaths`1<T> rootAccessData);
}
internal class JetBrains.DotTrace.Features.CallTree.CallTreeExcludeEngine : object {
    private IObservableSet`1<CallTreePath> myExcludedPaths;
    public CallTreeExcludeEngine(IObservableSet`1<CallTreePath> excludedPaths);
    private bool IsMethodExcluded(FunctionUIDm fuid);
    private bool IsPathExcluded(CallTreePath path);
    public void ExcludePath(CallTreePath path);
    public bool IsExcludePathAvailable(CallTreePath path);
    public bool IsExcludeMethodAvailable(FunctionUIDm fuid);
    public void ExcludeMethod(FunctionUIDm fuid);
    private static CallTreePath CreateMergedPath(FunctionUIDm fuid);
    public bool IsRestorePathAvailable(CallTreePath path);
    public void RestorePath(CallTreePath inputPath);
    public bool IsRestoreAllPathsAvailable();
    public void RestoreAllPaths();
}
public abstract class JetBrains.DotTrace.Features.CallTree.CallTreeHistoryManager`1 : object {
    [CanBeNullAttribute]
private CallTreePathNodeInfo`1[] myPrefix;
    private List`1<CallTreePrefixNodeViewModel<TPayload>> myNodeViewModels;
    private IDataController`1<CallTreePrefixNodeViewModel<TPayload>> mySelectedNode;
    private IMethodPrinter myMethodPrinter;
    private IDataSignalController myUpdateSignal;
    private IDataController`1<IEnumerable`1<CallTreeTransitionViewModel>> myTransitions;
    [CompilerGeneratedAttribute]
private IDataProvider`1<IEnumerable`1<CallTreeTransitionViewModel>> <Transitions>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataController`1<bool> <ShowNavigationHistory>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<IEnumerable`1<ICallTreeNodeViewModel>> <Nodes>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<CallTreePath> <SelectedNodePath>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <HasSelectedNode>k__BackingField;
    public IDataProvider`1<ICallTreeNodeViewModel> SelectedNode { get; }
    public IDataProvider`1<IEnumerable`1<CallTreeTransitionViewModel>> Transitions { get; }
    public IDataController`1<bool> ShowNavigationHistory { get; }
    public IDataProvider`1<IEnumerable`1<ICallTreeNodeViewModel>> Nodes { get; }
    public IDataProvider`1<CallTreePath> SelectedNodePath { get; }
    public IDataProvider`1<bool> HasSelectedNode { get; }
    protected CallTreeHistoryManager`1(Lifetime lifetime, IMethodPrinter methodPrinter);
    public sealed virtual IDataProvider`1<ICallTreeNodeViewModel> get_SelectedNode();
    private void AddMergedCallsNode(CallTreeNodeId nextNodeId, CallTreePathNodeInfo`1[] newPrefix, int index);
    private void AddRootNode(IMetadataReaderMerged metadataProvider);
    private CallTreeTransitionViewModel BuildTransition(CallTreeDirection direction);
    public sealed virtual void SetNewPrefix(CallTreePathNodeInfo`1[] newPrefix, CallTreeNodeId rootNodeId, IAccessor`1<IMetadataReaderMerged> metadataAccessor, IPayloadPresenters`1<TPayload> presenters);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IEnumerable`1<CallTreeTransitionViewModel>> get_Transitions();
    [CompilerGeneratedAttribute]
public sealed virtual IDataController`1<bool> get_ShowNavigationHistory();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IEnumerable`1<ICallTreeNodeViewModel>> get_Nodes();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<CallTreePath> get_SelectedNodePath();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<bool> get_HasSelectedNode();
    private CallTreePath GetNodePrefix(CallTreePrefixNodeViewModel<TPayload> node);
    public sealed virtual void SetSelectedNode(ICallTreeNodeViewModel node);
    public sealed virtual void ClearSelection();
    public sealed virtual ICallTreeNodeViewModel FindNearestNodeAfterUpdate(ICallTreeNodeViewModel oldNode);
    [CompilerGeneratedAttribute]
private List`1<CallTreePrefixNodeViewModel<TPayload>> <.ctor>b__8_0();
}
public class JetBrains.DotTrace.Features.CallTree.CallTreeModel : CallTreeBaseModel {
    [CompilerGeneratedAttribute]
private IDataProvider`1<IStaticTree> <IcicleTree>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICallTree> <TopMethodBacktrace>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProxy`1<Nullable`1<FunctionUIDm>> <SelectedTopMethodForBacktrace>k__BackingField;
    public IDataProvider`1<IStaticTree> IcicleTree { get; }
    public IDataProvider`1<ICallTree> TopMethodBacktrace { get; }
    public IDataProxy`1<Nullable`1<FunctionUIDm>> SelectedTopMethodForBacktrace { get; }
    public CallTreeModel(ICallTreeBaseModel m, IDataProvider`1<IStaticTree> icicleTree, IDataProvider`1<ICallTree> topMethodBacktrace, IDataProxy`1<Nullable`1<FunctionUIDm>> selectedTopMethodForBacktrace);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IStaticTree> get_IcicleTree();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICallTree> get_TopMethodBacktrace();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProxy`1<Nullable`1<FunctionUIDm>> get_SelectedTopMethodForBacktrace();
}
public class JetBrains.DotTrace.Features.CallTree.CallTreePanelModelBase : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<PayloadMode> <ChildrenExcludeMode>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataPipeNode <ProgressSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <IsRootNode>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<string> <AwaitsPayload>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<string> <ContinuationPayload>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <IsRootAsyncMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <AreAwaitsAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <AreContinuationsAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICallTree> <CallTree>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <AggregateAwaits>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <AggregateContinuations>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <IsFlameChartAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <IsGroupByThreadAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataController`1<bool> <ShowNavigationHistory>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataController`1<bool> <GroupByThread>k__BackingField;
    public IDataProvider`1<PayloadMode> ChildrenExcludeMode { get; }
    [CanBeNullAttribute]
public IDataPipeNode ProgressSource { get; }
    public IDataProvider`1<bool> IsRootNode { get; }
    public IDataProvider`1<string> AwaitsPayload { get; }
    public IDataProvider`1<string> ContinuationPayload { get; }
    public IDataProvider`1<bool> IsRootAsyncMethod { get; }
    public IDataProvider`1<bool> AreAwaitsAvailable { get; }
    public IDataProvider`1<bool> AreContinuationsAvailable { get; }
    public IDataProvider`1<ICallTree> CallTree { get; }
    public IDataProvider`1<bool> AggregateAwaits { get; }
    public IDataProvider`1<bool> AggregateContinuations { get; }
    public IDataProvider`1<bool> IsFlameChartAvailable { get; }
    public IDataProvider`1<bool> IsGroupByThreadAvailable { get; }
    public IDataController`1<bool> ShowNavigationHistory { get; }
    public IDataController`1<bool> GroupByThread { get; }
    protected CallTreePanelModelBase(ICallTreeBaseModel treeModel, IDataContainer`1<ICallTreeRootsStack> rootStack, IRemotableReference`1<IProviderContainer`1<IAsyncMethodService>> asyncMethodService, IRemotableReference`1<ICacheProviderContainer`1<IFuidsMatcher>> fuidsMatcher, IcicleWindowActionComponent icicleWindowActionComponent, bool isTimelineSnapshot);
    [CompilerGeneratedAttribute]
public IDataProvider`1<PayloadMode> get_ChildrenExcludeMode();
    [CompilerGeneratedAttribute]
public IDataPipeNode get_ProgressSource();
    [CompilerGeneratedAttribute]
public IDataProvider`1<bool> get_IsRootNode();
    [CompilerGeneratedAttribute]
public IDataProvider`1<string> get_AwaitsPayload();
    [CompilerGeneratedAttribute]
public IDataProvider`1<string> get_ContinuationPayload();
    [CompilerGeneratedAttribute]
public IDataProvider`1<bool> get_IsRootAsyncMethod();
    [CompilerGeneratedAttribute]
public IDataProvider`1<bool> get_AreAwaitsAvailable();
    [CompilerGeneratedAttribute]
public IDataProvider`1<bool> get_AreContinuationsAvailable();
    [CompilerGeneratedAttribute]
public IDataProvider`1<ICallTree> get_CallTree();
    [CompilerGeneratedAttribute]
public IDataProvider`1<bool> get_AggregateAwaits();
    [CompilerGeneratedAttribute]
public IDataProvider`1<bool> get_AggregateContinuations();
    [CompilerGeneratedAttribute]
public IDataProvider`1<bool> get_IsFlameChartAvailable();
    [CompilerGeneratedAttribute]
public IDataProvider`1<bool> get_IsGroupByThreadAvailable();
    [CompilerGeneratedAttribute]
public IDataController`1<bool> get_ShowNavigationHistory();
    [CompilerGeneratedAttribute]
public IDataController`1<bool> get_GroupByThread();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.CallTree.CallTreePathHelpers : object {
    private static FunctionUID ourDefaultDalRootRaw;
    public static FunctionUIDm DefaultDalRoot;
    private static NamePair ourOnlySystemCalls;
    private static CallTreePathHelpers();
    [ExtensionAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
[ContractAnnotationAttribute("notnull => notnull")]
public static CallTreePath Normalize(CallTreePath path);
    [ExtensionAttribute]
public static FunctionUID GetDalRoot(CallTreePath path);
    [ExtensionAttribute]
[NotNullAttribute]
public static CallTreePath AddMergeAllPathTransition(CallTreePath path, FunctionUIDm fuid, PayloadMode payloadMode);
    [ExtensionAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("path:null => null")]
[ContractAnnotationAttribute("path:notnull => notnull")]
public static CallTreeRootPrefix ToRootPrefix(CallTreePath path, CallTreeDirection direction);
    [ExtensionAttribute]
public static IDataProvider`1<Nullable`1<NamePair>> CurrentRootMethodNamePair(IDataProvider`1<CallTreePath> pathProvider, IMethodPrinter methodPrinter, IDataProvider`1<IAccessor`1<IMetadataReaderMerged>> metadataProvider);
    [ExtensionAttribute]
public static IDataProvider`1<string> CurrentRootMethodShortName(IDataProvider`1<CallTreePath> pathProvider, IMethodPrinter methodPrinter, IDataProvider`1<IAccessor`1<IMetadataReaderMerged>> metadataProvider);
    [ExtensionAttribute]
public static bool IsMatchedWithPrefix(CallTreePath path, CallTreeNodeId[] rootPrefix);
    [ExtensionAttribute]
public static CallTreePathWithAccessData`1<TPtr> PathAndAccessDataLoader(CallTreePath path, CallTreeNodesAccessor`1<TPtr> nodesAccessor);
    [ExtensionAttribute]
public static bool StartsWithAThreadRoot(CallTreePath path);
    [ExtensionAttribute]
public static Nullable`1<NamePair> GetPresentation(CallTreeNodeId logicalRoot, IMethodPrinter methodPrinter, IAccessor`1<IMetadataReaderMerged> metadataAccessor);
    [ExtensionAttribute]
public static Nullable`1<NamePair> GetPresentation(CallTreePath path, IMethodPrinter methodPrinter, IAccessor`1<IMetadataReaderMerged> metadataAccessor);
}
public static class JetBrains.DotTrace.Features.CallTree.CallTreeReaderHelper : object {
    public static IAccessor`1<ICallTreeReader`1<T>> CreateCallTreeReaderAccessor(IDfsReaders`1<T> readers, CommonDfsLogic`2<T, FunctionUID> commonLogic);
}
public class JetBrains.DotTrace.Features.CallTree.Dfs.DfsCallTreeAndIndexesAccessor`1 : object {
    [CompilerGeneratedAttribute]
private IAccessor`1<ICallTreeReader`1<TOffset>> <CallTree>k__BackingField;
    [CompilerGeneratedAttribute]
private IFuidsMatcher <FuidsMatcher>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<IAccessor`1<ICallTreeIndexes`1<TOffset>>> <Indexes>k__BackingField;
    public IAccessor`1<ICallTreeReader`1<TOffset>> CallTree { get; }
    public IFuidsMatcher FuidsMatcher { get; }
    public IDataProvider`1<IAccessor`1<ICallTreeIndexes`1<TOffset>>> Indexes { get; }
    public DfsCallTreeAndIndexesAccessor`1(IDataProvider`1<IAccessor`1<ICallTreeIndexes`1<TOffset>>> indexes, IAccessor`1<ICallTreeReader`1<TOffset>> callTreeReaderAccessor, IFuidsMatcher fuidsMatcher);
    [CompilerGeneratedAttribute]
public sealed virtual IAccessor`1<ICallTreeReader`1<TOffset>> get_CallTree();
    [CompilerGeneratedAttribute]
public sealed virtual IFuidsMatcher get_FuidsMatcher();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IAccessor`1<ICallTreeIndexes`1<TOffset>>> get_Indexes();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.CallTree.Dfs.DfsCallTreeAndIndexesAccessorEx : object {
    [ExtensionAttribute]
public static ICallTreeAccessors`1<TOffset> BuildCallTreeAndIndexesAccessor(IDfsReaders`1<TOffset> dfsReaders, CommonDfsLogic`2<TOffset, FunctionUID> commonDfsLogic, IAccessor`1<ICallTreeReader`1<TOffset>> callTreeReaderAccessor, IDataProvider`1<IAccessor`1<IDataMapper`2<FunctionUIDm, bool>>> functionSystemnessProvider, IDataProvider`1<IAsyncMethodCallTreeService`1<TOffset>> asyncMethodCallTreeService, IFuidsMatcher fuidsMatcher, IDataProvider`1<FastSkipLogic`1<TOffset>> fastSkipProvider);
    [ExtensionAttribute]
public static ICallTreeAccessors`1<TOffset> BuildSplittedByThreadCallTreeAndIndexesAccessor(IDfsReaders`1<TOffset> dfsReaders, CommonDfsLogic`2<TOffset, FunctionUID> commonDfsLogic, IAccessor`1<ICallTreeReader`1<TOffset>> callTreeReaderAccessor, IDataProvider`1<IAccessor`1<IDataMapper`2<FunctionUIDm, bool>>> functionSystemnessProvider, IDataProvider`1<IAsyncMethodCallTreeService`1<TOffset>> asyncMethodCallTreeService, IFuidsMatcher fuidsMatcher, IDataProvider`1<FastSkipLogic`1<TOffset>> fastSkipProvider);
    private static DfsTreeIndexesGroupByThreads`1<TOffset> DfsTreeIndexesGroupByThreads(IDfsReaders`1<TOffset> dfsReaders, DfsCallTreeIndexes`1<TOffset> indexes);
    [ExtensionAttribute]
public static ICallTreeAccessors`1<TOffset> BuildRawCallTreeAndIndexesAccessor(IDfsReaders`1<TOffset> dfsReaders, CommonDfsLogic`2<TOffset, FunctionUID> commonDfsLogic, IAccessor`1<ICallTreeReader`1<TOffset>> callTreeReaderAccessor, IDataProvider`1<IAccessor`1<IDataMapper`2<FunctionUID, bool>>> functionSystemnessProvider, IDataProvider`1<IAsyncMethodCallTreeService`1<TOffset>> asyncMethodCallTreeService, IDataProvider`1<FastSkipLogic`1<TOffset>> fastSkipProvider);
}
public class JetBrains.DotTrace.Features.CallTree.Dfs.DfsCallTreeIndexes`1 : DfsCallTreeIndexesRaw`1<TOffset> {
    public DfsCallTreeIndexes`1(CommonDfsLogic`2<TOffset, FunctionUID> commonLogic, IDataMapper`2<FunctionUIDm, bool> functionSystemness, IDataMapper`2<TOffset, FunctionUID> pointerToFuid, IAsyncMethodCallTreeService`1<TOffset> asyncMethodCallTreeService, IFuidsMatcher`2<FunctionUID, FunctionUIDm> fuidsMatcher, FastSkipLogic`1<TOffset> fastSkip);
}
public class JetBrains.DotTrace.Features.CallTree.Dfs.DfsCallTreeIndexesRaw`1 : object {
    private CommonDfsLogic`2<TOffset, FunctionUID> myCommonLogic;
    private IDataMapper`2<FunctionUID, bool> myFunctionSystemness;
    private IDataMapper`2<TOffset, FunctionUID> myPointerToFuid;
    [CanBeNullAttribute]
private FastSkipLogic`1<TOffset> myFastSkip;
    private IAsyncMethodCallTreeService`1<TOffset> myAsyncMethodCallTreeService;
    public DfsCallTreeIndexesRaw`1(CommonDfsLogic`2<TOffset, FunctionUID> commonLogic, IDataMapper`2<FunctionUID, bool> functionSystemness, IDataMapper`2<TOffset, FunctionUID> pointerToFuid, IAsyncMethodCallTreeService`1<TOffset> asyncMethodCallTreeService, FastSkipLogic`1<TOffset> fastSkip);
    public sealed virtual bool IsSystem(TOffset dfsIndex);
    private bool IsSystem(TOffset offset, FunctionUID fuid);
    public sealed virtual bool HasSystemSubtree(AccessData`1<TOffset> accessData);
    public sealed virtual IEnumerable`1<PlusOrMinus`1<TOffset>> GetTopUserDescendants(AccessData`1<TOffset> accessData);
    public sealed virtual IEnumerable`1<PlusOrMinus`1<TOffset>> GetTopMethodsOwnPlusSystemDescendants(AccessData`1<TOffset> accessData);
    public sealed virtual IEnumerable`1<PlusOrMinus`1<TOffset>> GetTopMethodsOwnPlusNonFunctionDescendants(AccessData`1<TOffset> accessData);
    [CompilerGeneratedAttribute]
private bool <GetTopUserDescendants>b__9_0(TOffset ptr, FunctionUID fuid);
    [CompilerGeneratedAttribute]
private bool <GetTopUserDescendants>b__9_1(PlusOrMinus`1<TOffset> p);
    [CompilerGeneratedAttribute]
private bool <GetTopMethodsOwnPlusSystemDescendants>b__10_0(TOffset ptr, FunctionUID fuid);
}
public class JetBrains.DotTrace.Features.CallTree.Dfs.DfsTreeDump`1 : object {
    private IThreadSwitch`1<FileSystemPath> myData;
    public IThreadSwitch`1<FileSystemPath> Data { get; }
    protected DfsTreeDump`1(IDataContainer`1<DataPipeLifetime> dataPipeLifetimeContainer, IFunctionSystemness functionSystemness, IDataProvider`1<IDfsReaders`1<TOffset>> dfsReadersCacheSource, IDataProvider`1<RootAccessData`1<TOffset>> rawRootsCacheSource, IDataProvider`1<IAccessor`1<IMetadataManagerMerged>> metadataAccessorProvider, IDataProvider`1<IFuidsMatcher> fuidsMatcher);
    public sealed virtual IThreadSwitch`1<FileSystemPath> get_Data();
    [LocalizableAttribute("False")]
private static void Print(TextWriter fileStream, int depth, DfsNode`2<TOffset, FunctionUID> node, Func`2<FunctionUIDm, string> printKey, IFuidsMatcher matcher);
}
public class JetBrains.DotTrace.Features.CallTree.Dfs.DfsTreeIndexesGroupByThreads`1 : object {
    private DfsCallTreeIndexes`1<T> myCallTreeIndexes;
    private Func`2<T, Nullable`1<bool>> myIsSystemOverride;
    public DfsTreeIndexesGroupByThreads`1(DfsCallTreeIndexes`1<T> callTreeIndexes, Func`2<T, Nullable`1<bool>> isSystemOverride);
    public sealed virtual bool IsSystem(T callTreePtr);
    public sealed virtual bool HasSystemSubtree(AccessData`1<T> accessData);
    public sealed virtual IEnumerable`1<PlusOrMinus`1<T>> GetTopUserDescendants(AccessData`1<T> accessData);
    public sealed virtual IEnumerable`1<PlusOrMinus`1<T>> GetTopMethodsOwnPlusSystemDescendants(AccessData`1<T> accessData);
    public sealed virtual IEnumerable`1<PlusOrMinus`1<T>> GetTopMethodsOwnPlusNonFunctionDescendants(AccessData`1<T> accessData);
}
public class JetBrains.DotTrace.Features.CallTree.Dfs.DfsTreeReader`1 : object {
    private IDataMapper`2<TOffset, bool> myIsRootPointer;
    private IDataMapper`2<TOffset, FunctionUID> myIndexToFuid;
    private IDataMapper`2<TOffset, TOffset> myIndexToParentIndex;
    private CommonDfsLogic`2<TOffset, FunctionUID> myCommonLogic;
    private IComparer`1<TOffset> myAssertComparer;
    private IComparer`1<PlusOrMinus`1<TOffset>> myAssertComparer2;
    public IComparer`1<TOffset> PointersComparer { get; }
    public DfsTreeReader`1(IDataMapper`2<TOffset, bool> isRootPointer, IDataMapper`2<TOffset, FunctionUID> indexToFuid, IDataMapper`2<TOffset, TOffset> indexToParentIndex, CommonDfsLogic`2<TOffset, FunctionUID> commonLogic, IComparer`1<TOffset> assertComparer);
    public sealed virtual FunctionUID ReadKey(TOffset callTreePtr);
    public sealed virtual TOffset GetParent(TOffset callTreePtr);
    public sealed virtual bool IsRootPointer(TOffset callTreePtr);
    public sealed virtual IEnumerable`1<PlusOrMinus`1<TOffset>> GetChildren(AccessData`1<TOffset> accessData);
    public sealed virtual IEnumerable`1<PlusOrMinus`1<TOffset>> GetTopLevelDescendantsForFuid(FunctionUID fuid, AccessData`1<TOffset> accessData);
    public sealed virtual IEnumerable`1<PlusOrMinus`1<TOffset>> GetAllAccessPointersForFuid(FunctionUID fuid, AccessData`1<TOffset> accessData);
    public sealed virtual TOffset[] GetAllAccessPointersForFuid(FunctionUID fuid, AccessData`1<TOffset> accessData, IList`1& recursivePtrs);
    public sealed virtual IMinuses`1<TOffset> CreateMinuses(IEnumerable`1<TOffset> first, IMinuses`1<TOffset> second);
    public sealed virtual Exception ValidateAccessData(AccessData`1<TOffset> accessData);
    public sealed virtual IEnumerable`1<TOffset> SortPointers(IEnumerable`1<TOffset> pointers);
    public sealed virtual IEnumerable`1<TOffset> DistinctSortedPointers(IEnumerable`1<TOffset> pointers);
    public sealed virtual IComparer`1<TOffset> get_PointersComparer();
    public sealed virtual IEnumerable`1<PlusOrMinus`1<TOffset>> GetTopLevelMinusesDescendants(AccessData`1<TOffset> accessData);
    public sealed virtual IEnumerable`1<TOffset> GetTopPointers(IEnumerable`1<TOffset> callTreePtrs);
    public sealed virtual bool IsOneOfMinuses(TOffset callTreeOffset, IMinuses`1<TOffset> minuses);
    [ContractAnnotationAttribute("callTreePtrs1:null, callTreePtrs2:null => null")]
public sealed virtual IEnumerable`1<PlusOrMinus`1<TOffset>> MergePointers(IEnumerable`1<PlusOrMinus`1<TOffset>> callTreePtrs1, IEnumerable`1<PlusOrMinus`1<TOffset>> callTreePtrs2);
    public sealed virtual ValueTuple`2<Dictionary`2<TOffset, long>, long> GetSubtreesPowers(AccessData`1<TOffset> accessData);
    [CompilerGeneratedAttribute]
private int <.ctor>b__6_0(PlusOrMinus`1<TOffset> a, PlusOrMinus`1<TOffset> b);
    [CompilerGeneratedAttribute]
private bool <DistinctSortedPointers>b__17_0(TOffset first, TOffset second);
}
public interface JetBrains.DotTrace.Features.CallTree.Dfs.IDfsTreeDump {
    public IThreadSwitch`1<FileSystemPath> Data { get; }
    public abstract virtual IThreadSwitch`1<FileSystemPath> get_Data();
}
public interface JetBrains.DotTrace.Features.CallTree.Dfs.IDfsTreeDumpBuilder {
    public abstract virtual void RequestDumpAndShowDialogOnFinish();
}
public class JetBrains.DotTrace.Features.CallTree.Dfs.ThreadPowersBase`1 : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ThreadPowersInfo`1<T>> <Data>k__BackingField;
    public IDataProvider`1<ThreadPowersInfo`1<T>> Data { get; }
    protected ThreadPowersBase`1(IRootAccessDataProvider`1<T> rootProvider, IProviderContainer`1<ICallTreeAccessors`1<T>> treeAccessorsContainer);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ThreadPowersInfo`1<T>> get_Data();
}
public class JetBrains.DotTrace.Features.CallTree.Dfs.ThreadPowersInfo`1 : object {
    public Dictionary`2<FunctionUIDm, double> FuidToPower;
    public Dictionary`2<TOffset, double> RootOffsetToPower;
}
public abstract class JetBrains.DotTrace.Features.CallTree.Filters.CallTreeFilterBuilderBase`2 : object {
    private ICallTreeCommandsExecutor myCallTreeCommandsExecutor;
    private IRemotableReference`1<IDataProvider`1<CallTreePathWithAccessData`1<TPtr>>> myRootWithAccessData;
    private IRemotableReference`1<IDataProvider`1<CallTreePayloads`2<TPtr, TPayload>>> myCallTreePayloads;
    private InstantiatedCallTreeFilter`1<TPayload> myInstantiatedFilter;
    private CallTreeModel myCallTreeModel;
    private InstantiatedCallTreeFilter`1<TPayload> JetBrains.Common.Util.IDataContainer<JetBrains.DotTrace.Features.Filtration.InstantiatedFilters.InstantiatedCallTreeFilter<TPayload>>.Data { get; }
    private ICallTreeCommandsExecutor JetBrains.Common.Util.IDataContainer<JetBrains.DotTrace.DataStructures.ViewModelSharedInterfaces.ICallTreeCommandsExecutor>.Data { get; }
    private ICallTreeModel JetBrains.Common.Util.IDataContainer<JetBrains.DotTrace.Features.CallTree.ICallTreeModel>.Data { get; }
    private IRemotableReference`1<IDataProvider`1<CallTreePathWithAccessData`1<TPtr>>> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.Remoting.IRemotableReference<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.Common.DalInterface.CallTree.CallTreePathWithAccessData<TPtr>>>>.Data { get; }
    private IRemotableReference`1<IDataProvider`1<CallTreePayloads`2<TPtr, TPayload>>> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.Remoting.IRemotableReference<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.DataStructures.CallTree.CallTreePayloads<TPtr,TPayload>>>>.Data { get; }
    protected CallTreeFilterBuilderBase`2(CallTreeBaseModelBuilder`2<TPayload, TPtr> callTreeBaseModelBuilder, ICacheProviderContainer`1<IAccessor`1<IMetadataReaderMerged>> metadataProviderContainer, IMethodPrinter methodPrinter, IRemotablePairContainer`1<DataPipeLifetime> lifetimeContainer, IPayloadPresentersProvider`1<TPayload> payloadPresentersProviderContainer, IProviderContainer`1<IPayloadNormalizer`1<TPayload>> payloadNormalizerContainer, ICallTreeRootsStack rootsStack, TopMethodsSettingsComponent topMethodSettingsComponent, IExcludedNodesProvider excludedNodesProvider, IDataProvider`1<bool> useSteppedBacktraceProvider, IRemotableReference`1<IDataProvider`1<bool>> disableAwaits, IRemotableReference`1<FlatPayloadsComponent`2<TPtr, TPayload>> flatPayloadsComponent);
    private static void SetFlatPayloadsComponentRemoteInputs(ICallTreeRootsStack rootsStack, IRemoteCommunicator comm, IRemotableReference`1<FlatPayloadsComponent`2<TPtr, TPayload>> flatPayloadsComponent, IObservableSet`1<CallTreePath> excludedNodes, IDataProxy`1<CallTreePath> callTreeModelSelection, IDataProxy`1<bool> useSplittedNodesAccessor);
    private static FilterPresentationModel ToPresentableName(NamePair namePair);
    private sealed virtual override InstantiatedCallTreeFilter`1<TPayload> JetBrains.Common.Util.IDataContainer<JetBrains.DotTrace.Features.Filtration.InstantiatedFilters.InstantiatedCallTreeFilter<TPayload>>.get_Data();
    private sealed virtual override ICallTreeCommandsExecutor JetBrains.Common.Util.IDataContainer<JetBrains.DotTrace.DataStructures.ViewModelSharedInterfaces.ICallTreeCommandsExecutor>.get_Data();
    private sealed virtual override ICallTreeModel JetBrains.Common.Util.IDataContainer<JetBrains.DotTrace.Features.CallTree.ICallTreeModel>.get_Data();
    private sealed virtual override IRemotableReference`1<IDataProvider`1<CallTreePathWithAccessData`1<TPtr>>> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.Remoting.IRemotableReference<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.Common.DalInterface.CallTree.CallTreePathWithAccessData<TPtr>>>>.get_Data();
    private sealed virtual override IRemotableReference`1<IDataProvider`1<CallTreePayloads`2<TPtr, TPayload>>> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.Remoting.IRemotableReference<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.DataStructures.CallTree.CallTreePayloads<TPtr,TPayload>>>>.get_Data();
}
public class JetBrains.DotTrace.Features.CallTree.Filters.CallTreeFilterInputComponents`1 : object {
    public IDataProvider`1<IAccessor`1<IDataMapper`2<FunctionUIDm, bool>>> FunctionSystemness;
    public IDataProvider`1<IAsyncMethodService> AsyncMethodServices;
    public IDataProvider`1<IAsyncMethodCallTreeService`1<TPtr>> AsyncMethodCallTreeServices;
    protected CallTreeFilterInputComponents`1(IDataProvider`1<IAccessor`1<IDataMapper`2<FunctionUIDm, bool>>> functionSystemnessProvider, IDataProvider`1<IAsyncMethodService> asyncMethodInfoProvider, IDataProvider`1<IAsyncMethodCallTreeService`1<TPtr>> asyncMethodCallTreeService);
}
public class JetBrains.DotTrace.Features.CallTree.Filters.CallTreeReaderContainer`1 : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<IAccessor`1<ICallTreeReader`1<TPtr>>> <Data>k__BackingField;
    public IDataProvider`1<IAccessor`1<ICallTreeReader`1<TPtr>>> Data { get; }
    protected CallTreeReaderContainer`1(ICacheProviderContainer`1<IDfsReaders`1<TPtr>> dfsReaders, ICacheProviderContainer`1<CommonDfsLogic`2<TPtr, FunctionUID>> commonDfsLogicContainer);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IAccessor`1<ICallTreeReader`1<TPtr>>> get_Data();
}
public abstract class JetBrains.DotTrace.Features.CallTree.Filters.SubsystemsFilterBuilderBase`2 : object {
    private InstantiatedSubsystemsFilter`1<TPayload> myInstantiatedFilter;
    private InstantiatedSubsystemsFilter`1<TPayload> JetBrains.Common.Util.IDataContainer<JetBrains.DotTrace.Features.Filtration.InstantiatedFilters.InstantiatedSubsystemsFilter<TPayload>>.Data { get; }
    private ISubsystemModel JetBrains.Common.Util.IDataContainer<JetBrains.DotTrace.Features.Subsystems.ISubsystemModel>.Data { get; }
    protected SubsystemsFilterBuilderBase`2(SubsystemKeysSource subsystemKeysSource, IRemotableReference`1<FlatPayloadsComponent`2<TPtr, TPayload>> flatPayloadsComponent, IProviderContainer`1<IEnumerable`1<SubsystemFilterItem>> allSubsystemFilterItemsContainer, IProviderContainer`1<IPayloadPresenters`1<TPayload>> payloadPresenterContainer, IProviderContainer`1<IPayloadNormalizer`1<TPayload>> payloadNormalizerContainer);
    private sealed virtual override InstantiatedSubsystemsFilter`1<TPayload> JetBrains.Common.Util.IDataContainer<JetBrains.DotTrace.Features.Filtration.InstantiatedFilters.InstantiatedSubsystemsFilter<TPayload>>.get_Data();
    private sealed virtual override ISubsystemModel JetBrains.Common.Util.IDataContainer<JetBrains.DotTrace.Features.Subsystems.ISubsystemModel>.get_Data();
}
public class JetBrains.DotTrace.Features.CallTree.GroupByThreadCoherentMarker : ValueType {
    [CompilerGeneratedAttribute]
private bool <GroupedByThread>k__BackingField;
    public bool GroupedByThread { get; public set; }
    public GroupByThreadCoherentMarker(bool GroupedByThread);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_GroupedByThread();
    [CompilerGeneratedAttribute]
public void set_GroupedByThread(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(GroupByThreadCoherentMarker left, GroupByThreadCoherentMarker right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(GroupByThreadCoherentMarker left, GroupByThreadCoherentMarker right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(GroupByThreadCoherentMarker other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(Boolean& GroupedByThread);
}
[DataContractAttribute]
public class JetBrains.DotTrace.Features.CallTree.History.CallTreeHistoryItem : object {
    [NotNullAttribute]
[DataMemberAttribute]
private CallTreeRootPrefix myCurrentPrefix;
    [NotNullAttribute]
[DataMemberAttribute]
private CallTreeSelection myBacktraceSelection;
    [NotNullAttribute]
[DataMemberAttribute]
private CallTreeSelection myDowntraceSelection;
    [NotNullAttribute]
[DataMemberAttribute]
private CallTreeSelection myGroupedByThreadBacktraceSelection;
    [NotNullAttribute]
[DataMemberAttribute]
private CallTreeSelection myGroupedByThreadDowntraceSelection;
    [NotNullAttribute]
public CallTreeRootPrefix Prefix { get; }
    public CallTreeHistoryItem(CallTreeRootPrefix currentPrefix, IDeferUpdateManager updateManager);
    public sealed virtual CallTreeRootPrefix get_Prefix();
    public sealed virtual bool ChangeExcludeChildrenMode(PayloadMode payloadMode);
    public sealed virtual bool ChangeAsyncContinuationAggregation(bool aggregate);
    public sealed virtual bool IsAsyncContinuationAggregated();
    public sealed virtual bool IsAsyncAwaitsAggregated();
    public sealed virtual bool ChangeAsyncAwaitsAggregation(bool aggregate);
    public sealed virtual bool ChangeDirection(bool isBackTrace);
    public sealed virtual CallTreeRootPrefixAndSelection GetCurrentState();
    public sealed virtual bool Equals(CallTreeHistoryItem other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.DotTrace.Features.CallTree.History.CallTreeHistoryItemCreationConverter : CustomCreationConverter`1<CallTreeHistoryItem> {
    private IDeferUpdateManager myUpdateManager;
    public CallTreeHistoryItemCreationConverter(IDeferUpdateManager updateManager);
    public virtual CallTreeHistoryItem Create(Type objectType);
}
public class JetBrains.DotTrace.Features.CallTree.History.DeferUpdateManager : object {
    private static int StatusConsistent;
    private static int StatusSaving;
    private static int StatusInconsistent;
    private int myUpdateStatus;
    private static int DispatcherFinished;
    private static int DispatcherScheduled;
    private int myDispatcherStatus;
    private Lifetime myLifetime;
    [NotNullAttribute]
private IThreading myDispatcher;
    [NotNullAttribute]
private Action mySaveAction;
    private TimeSpan myDelay;
    public DeferUpdateManager(Lifetime lifetime, IThreading dispatcher, Action save, TimeSpan delay);
    private void Save();
    public sealed virtual void Changed();
}
public class JetBrains.DotTrace.Features.CallTree.History.FunctionUIDmConverter : JsonConverter`1<FunctionUIDm> {
    private ulong myMask;
    public FunctionUIDmConverter(ulong mask);
    public virtual void WriteJson(JsonWriter writer, FunctionUIDm value, JsonSerializer serializer);
    public virtual FunctionUIDm ReadJson(JsonReader reader, Type objectType, FunctionUIDm existingValue, bool hasExistingValue, JsonSerializer serializer);
    private FunctionUIDm Build(object input);
}
public interface JetBrains.DotTrace.Features.CallTree.History.ICallTreeHistoryItem {
    public CallTreeRootPrefix Prefix { get; }
    public abstract virtual CallTreeRootPrefix get_Prefix();
    public abstract virtual bool ChangeExcludeChildrenMode(PayloadMode payloadMode);
    public abstract virtual bool ChangeAsyncContinuationAggregation(bool aggregate);
    public abstract virtual bool IsAsyncContinuationAggregated();
    public abstract virtual bool IsAsyncAwaitsAggregated();
    public abstract virtual bool ChangeAsyncAwaitsAggregation(bool aggregate);
    public abstract virtual bool ChangeDirection(bool isBackTrace);
    public abstract virtual CallTreeRootPrefixAndSelection GetCurrentState();
}
public interface JetBrains.DotTrace.Features.CallTree.ICallTreeAccessors`1 {
    public IAccessor`1<ICallTreeReader`1<T>> CallTree { get; }
    public IFuidsMatcher FuidsMatcher { get; }
    public IDataProvider`1<IAccessor`1<ICallTreeIndexes`1<T>>> Indexes { get; }
    public abstract virtual IAccessor`1<ICallTreeReader`1<T>> get_CallTree();
    public abstract virtual IFuidsMatcher get_FuidsMatcher();
    public abstract virtual IDataProvider`1<IAccessor`1<ICallTreeIndexes`1<T>>> get_Indexes();
}
public interface JetBrains.DotTrace.Features.CallTree.ICallTreeBaseModel {
    public IDataProvider`1<ICallTree> CallTree { get; }
    public IDataPipeNode ProgressProvider { get; }
    public IDataProvider`1<PayloadMode> ChildrenExcludeMode { get; }
    public IDataProvider`1<string> ContinuationsPayload { get; }
    public IDataProvider`1<bool> HasContinuations { get; }
    public IDataProvider`1<string> AwaitsPayload { get; }
    public IDataProvider`1<bool> HasAwaits { get; }
    public IDataController`1<bool> ShowNavigationHistory { get; }
    public IDataController`1<bool> GroupByThread { get; }
    public abstract virtual IDataProvider`1<ICallTree> get_CallTree();
    public abstract virtual IDataPipeNode get_ProgressProvider();
    public abstract virtual IDataProvider`1<PayloadMode> get_ChildrenExcludeMode();
    public abstract virtual IDataProvider`1<string> get_ContinuationsPayload();
    public abstract virtual IDataProvider`1<bool> get_HasContinuations();
    public abstract virtual IDataProvider`1<string> get_AwaitsPayload();
    public abstract virtual IDataProvider`1<bool> get_HasAwaits();
    public abstract virtual IDataController`1<bool> get_ShowNavigationHistory();
    public abstract virtual IDataController`1<bool> get_GroupByThread();
}
public interface JetBrains.DotTrace.Features.CallTree.ICallTreeModel {
    public IDataProvider`1<IStaticTree> IcicleTree { get; }
    public IDataProvider`1<ICallTree> TopMethodBacktrace { get; }
    public IDataProxy`1<Nullable`1<FunctionUIDm>> SelectedTopMethodForBacktrace { get; }
    public abstract virtual IDataProvider`1<IStaticTree> get_IcicleTree();
    public abstract virtual IDataProvider`1<ICallTree> get_TopMethodBacktrace();
    public abstract virtual IDataProxy`1<Nullable`1<FunctionUIDm>> get_SelectedTopMethodForBacktrace();
}
public interface JetBrains.DotTrace.Features.CallTree.ICallTreePrefixControllerForNode {
    public abstract virtual void SetSelectedNode(ICallTreeNodeViewModel node);
}
public interface JetBrains.DotTrace.Features.CallTree.ICallTreeRootProvider`1 {
}
public interface JetBrains.DotTrace.Features.CallTree.IExcludedNodesProvider {
    public IObservableSet`1<CallTreePath> Nodes { get; }
    public abstract virtual IObservableSet`1<CallTreePath> get_Nodes();
}
public interface JetBrains.DotTrace.Features.CallTree.Inject.IMeasureNodeStorage {
    public abstract virtual LineMeasures GetMeasureNodes(NavigationPath path, IExecutionController controller);
}
public class JetBrains.DotTrace.Features.CallTree.Inject.PayloadMeasureNodesData`1 : object {
    private MismatchLevel<TPayload> myMismatchLevel;
    private TPayload[] myCollectedResult;
    public TPayload[] GetAggregatedResult();
    private void AppendCore(ArrayBuffer`1<TPayload> measureNodes, Func`3<TPayload, TPayload, TPayload> operation, MismatchLevel<TPayload> mismatchLevelOnError);
    public void AddPayload(ArrayBuffer`1<TPayload> data);
    public void RemoveMinuses(ArrayBuffer`1<TPayload> data);
}
public class JetBrains.DotTrace.Features.CallTree.Inject.PayloadMeasureNodeStorage`2 : object {
    private CallTreeNodesAccessors`1<TOffset> myCallTreeAccessors;
    private ICallTreeMeasureNodesAccessor`2<TOffset, TPayload> myCallTreeMeasureNodesStorage;
    public PayloadMeasureNodeStorage`2(CallTreeNodesAccessors`1<TOffset> callTreeAccessors, ICallTreeMeasureNodesAccessor`2<TOffset, TPayload> callTreeMeasureNodesStorage);
    public PayloadMeasureNodesData`1<TPayload> GetMeasureNodes(NavigationPath path, IExecutionController controller);
}
public class JetBrains.DotTrace.Features.CallTree.Other.BuildCallTreeNodeFactoryAccessor`1 : MulticastDelegate {
    public BuildCallTreeNodeFactoryAccessor`1(object object, IntPtr method);
    public virtual Func`2<Lifetime, CallTreeNodeFactory`1<TPayload>> Invoke(IAccessor`1<IMetadataReaderMerged> metadataAccessor, IPayloadPresenters`1<TPayload> payloadPresenters, ICommand`1<CallTreeNodeId[]> scopeToThisCommand, Func`2<FunctionUIDm, Nullable`1<double>> fuidToIntensity);
    public virtual IAsyncResult BeginInvoke(IAccessor`1<IMetadataReaderMerged> metadataAccessor, IPayloadPresenters`1<TPayload> payloadPresenters, ICommand`1<CallTreeNodeId[]> scopeToThisCommand, Func`2<FunctionUIDm, Nullable`1<double>> fuidToIntensity, AsyncCallback callback, object object);
    public virtual Func`2<Lifetime, CallTreeNodeFactory`1<TPayload>> EndInvoke(IAsyncResult result);
}
public static class JetBrains.DotTrace.Features.CallTree.Other.CallTreeModelHelpers : object {
    private static void ScopeToThisExecute(Func`1<CallTreeNodeId[]> getPrefix, ICallTreeRootsStack callTreeRootsStack, CallTreePath path);
    private static bool ScopeToThisCanExecute(Func`1<CallTreeNodeId[]> getPrefix, CallTreePath path);
    private static ICommand`1<CallTreeNodeId[]> CreateScopeToThisCommand(Func`1<CallTreeNodeId[]> getPrefix, ICallTreeRootsStack rootsStack);
    public static IDataProvider`1<CallTree`1<TPayload>> BuildCallTreeProvider(ICallTreeRootsStack rootsStack, CallTreeRequestProcessor`1<TPayload> downRequestProcessor, CallTreeRequestProcessor`1<TPayload> upRequestProcessor, BuildCallTreeNodeFactoryAccessor`1<TPayload> boundTreeNodeFactory, IDataProvider`1<IAccessor`1<IMetadataReaderMerged>> metadataProviderContainer, IDataProvider`1<IPayloadPresenters`1<TPayload>> payloadPresentersProvider, IDataProvider`1<ISnapshotStateAccessor> snapshotStateAccessorProvider, IDataProvider`1<bool> useSteppedBacktraceProvider, Expression`1<Func`2<SnapshotState, string>> saveRestoreStatePath, Func`2<CallTreeRootPrefixAndSelection, ICallTreeSelection`1<CallTreeNodeId>> getSelection, LoadCallTreePrefixInfo`1<TPayload> prefixLoader, ICallTreeHistoryManager`1<TPayload> callTreeHistoryManager, IDataProvider`1<Func`2<FunctionUIDm, Nullable`1<double>>> fuidToIntensityProvider);
    public static IDataProvider`1<CallTree`1<TPayload>> BuildTopMethodsBacktrace(IDataProvider`1<CallTreePath> callTreePrefix, IDataProvider`1<Nullable`1<FunctionUIDm>> selectedMethod, CallTreeRequestProcessor`1<TPayload> backtraceRequestProcessor, IDataProvider`1<IAccessor`1<IMetadataReaderMerged>> metadataProviderContainer, IDataProvider`1<IPayloadPresenters`1<TPayload>> callTreePayloadPresenterProvider, IDataProvider`1<bool> useSteppedBacktraceProvider, BuildCallTreeNodeFactoryAccessor`1<TPayload> boundTreeNodeFactory, CallTreeVisualState visualState);
    private static void OnSelectedNodeOrSubtreeChanged(ITreeNode`2<CallTreeNodeId, ICallTreeNodeViewModelInternal> oldNode, ITreeNode`2<CallTreeNodeId, ICallTreeNodeViewModelInternal> newNode);
    private static void ApplyRecursiveHighlighting(ITreeNode`2<CallTreeNodeId, ICallTreeNodeViewModelInternal> newNode);
    private static void ClearRecursiveHighlighting(ITreeNode`2<CallTreeNodeId, ICallTreeNodeViewModelInternal> oldNode);
    private static void ProcessRecursiveNodes(ITreeNode`2<TKey, TNode> node, Action`1<ITreeNode`2<TKey, TNode>> process);
    private static CallTreeNodeId[] BuildPrefixData(CallTreeRootPrefix rootPrefix);
    public static IDataProvider`1<IStaticTree> BuildStaticTreeProvider(ICallTreeRootsStack rootsStack, CallTreeRequestProcessor`1<TPayload> icicleDownCallTreeRequestProcessor, ICacheProviderContainer`1<IAccessor`1<IMetadataReaderMerged>> metadataProviderContainer, IDataProvider`1<IPayloadPresenters`1<TPayload>> callTreePayloadPresenterProvider, IDataProvider`1<IPayloadNormalizer`1<TPayload>> payloadsNormalizerProvider, Func`4<IAccessor`1<IMetadataReaderMerged>, IPayloadPresenters`1<TPayload>, IPayloadNormalizer`1<TPayload>, Func`2<Lifetime, StaticTreeNodeFactory`1<TPayload>>> staticTreeNodeFactoryBuilder);
    public static CallTreeRequestProcessor`1<TPayload> CreateTreeRequestProcessor(IRemotablePair`1<DataPipeLifetime> lifetimePair, IRemotableReference`1<IDataProvider`1<ICallTreeService`1<TPayload>>> callTreeServiceProvider, CallTreeDirection direction);
    private static IDataProvider`1<TreeUpdateResponse`2<CallTreeNodeId, CallTreeNodeInfo`1<TPayload>>> BuildRemoteResponseProvider(IRemotablePair`1<DataPipeLifetime> lifetimePair, IRemotableReference`1<IDataProvider`1<ITreeService`3<CallTreeNodeId, CallTreeNodeInfo`1<TPayload>, CallTreeNodeUserState>>> treeBuilderProvider, IDataController`1<TreeUpdateRequest`2<CallTreeNodeId, CallTreeNodeUserState>> requestController);
    public static IDataProvider`1<bool> BuildHasContinuationsProvider(IDataProvider`1<CallTreePath> pathProvider, IDataProvider`1<IAsyncMethodCallTreeService`1<TPtr>> asyncMethodCallTreeService, IDataProvider`1<CallTreeNodesAccessor`1<TPtr>> nodesAccessor, DataPipeLifetime pipeLifetime);
    public static IDataProvider`1<TypedPayload`1<TPayload>> ComputeDiff(IDataProvider`1<CallTreePath> pathProvider, Func`2<CallTreeNodeId, CallTreeNodeId> modifyRoot1, Func`2<CallTreeNodeId, CallTreeNodeId> modifyRoot2, DataPipeLifetime pipeLifetime, IDataProvider`1<CallTreePayloads`2<TPtr, TPayload>> callTreePayloadsAccessor, IDataProvider`1<CallTreeNodesAccessor`1<TPtr>> nodesAccessor);
}
public class JetBrains.DotTrace.Features.CallTree.Other.CallTreeRequestProcessor`1 : object {
    [NotNullAttribute]
public IDataProvider`1<ITreeRequestProcessor`3<CallTreeNodeId, CallTreeNodeInfo`1<TPayload>, CallTreeNodeUserState>> Processor;
    public CallTreeRequestProcessor`1(IDataProvider`1<ITreeRequestProcessor`3<CallTreeNodeId, CallTreeNodeInfo`1<TPayload>, CallTreeNodeUserState>> processor);
}
public class JetBrains.DotTrace.Features.CallTree.Properties.FormattedPayloads : ValueType {
    public string Header;
    public Nullable`1<FormattedPayload> Calls;
    public FormattedPayload Own;
    public FormattedPayload OwnPlusSystem;
    public FormattedPayload Total;
    public Nullable`1<FormattedPayload> Average;
}
public interface JetBrains.DotTrace.Features.CallTree.Properties.IPropertiesModelBuilder {
    public abstract virtual PropertiesModel BuildModel(Lifetime lifetime, FunctionUIDm fuid, bool showThisInstancePayloads);
}
public interface JetBrains.DotTrace.Features.CallTree.Properties.IShowPropertiesActionExecutor {
    public abstract virtual void ShowProperties(FunctionUIDm fuid, bool showThisInstancePayloads, ControlWrapper sender);
}
public class JetBrains.DotTrace.Features.CallTree.Properties.PropertiesModel : object {
    public IDataProvider`1<string> Parameters;
    public IDataProvider`1<string> MethodName;
    public IDataProvider`1<string> FullName;
    public IDataProvider`1<string> ModuleName;
    public IDataProvider`1<FormattedText> ModulePath;
    public IDataProvider`1<IReadOnlyList`1<FormattedPayloads>> ThisInstance;
    public IDataProvider`1<IReadOnlyList`1<FormattedPayloads>> ThisScope;
    public IDataProvider`1<string> TextToCopy;
}
public abstract class JetBrains.DotTrace.Features.CallTree.Properties.PropertiesModelBuilderBase`2 : object {
    [NotNullAttribute]
private IMethodPrinter myMethodPrinter;
    private IDataProvider`1<IAccessor`1<IMetadataReaderMerged>> myMetadataProvider;
    private IThreadSwitch`1<FlatPayloads`2<FunctionUIDm, TPayload>> myPayloadsForScope;
    private IThreadSwitch`1<FlatPayloads`2<FunctionUIDm, TPayload>> myPayloadsForInstance;
    private IDataProvider`1<IPayloadPresenters`1<TPayload>> myPayloadPresenters;
    protected PropertiesModelBuilderBase`2(ICacheProviderContainer`1<IAccessor`1<IMetadataReaderMerged>> metadataProviderContainer, IMethodPrinter methodPrinter, IProviderContainer`1<IPayloadPresenters`1<TPayload>> payloadPresentersContainer, IRemotableReference`1<FlatPayloadsComponent`2<TPtr, TPayload>> flatPayloadsComponent);
    public sealed virtual PropertiesModel BuildModel(Lifetime lifetime, FunctionUIDm fuid, bool showThisInstancePayloads);
    private static string CreateTextToCopy(NamePair namePair, Nullable`1<ModuleInfo> moduleInfo, IReadOnlyCollection`1<FormattedPayloads> thisScopePayloads, IReadOnlyCollection`1<FormattedPayloads> thisInstancePayloads);
    private IAsyncDataProvider`1<List`1<FormattedPayloads>> GetPayloads(DataPipeLifetime dataPipeLifetime, IThreadSwitch`1<FlatPayloads`2<FunctionUIDm, TPayload>> payloads, FunctionUIDm fuid);
    [CompilerGeneratedAttribute]
internal static void <CreateTextToCopy>g__AppendPayloadsText|7_0(IReadOnlyCollection`1<FormattedPayloads> payloads, string levelIndent, <>c__DisplayClass7_0& );
    [CompilerGeneratedAttribute]
internal static FormattedPayloads <GetPayloads>g__ToFormattedPayloads|8_1(FunctionPayloads`1<TPayload> functionPayloads, string header, IPayloadPresenter`1<TPayload> mainPresenter, IPayloadPresenter`1<TPayload> callsPresenter, <>c__DisplayClass8_1& );
}
[IsReadOnlyAttribute]
public class JetBrains.DotTrace.Features.CallTree.Roots.CallTreeRootPrefixAndSelection : ValueType {
    public CallTreeRootPrefix Prefix;
    public ICallTreeSelection`1<CallTreeNodeId> Selection;
    public ICallTreeSelection`1<CallTreeNodeId> GroupedByThreadSelection;
    public CallTreeRootPrefixAndSelection(CallTreeRootPrefix prefix, ICallTreeSelection`1<CallTreeNodeId> selection, ICallTreeSelection`1<CallTreeNodeId> groupedByThreadSelection);
    public virtual int GetHashCode();
}
public class JetBrains.DotTrace.Features.CallTree.Roots.CallTreeRootsStack : object {
    private IDataSink`1<ICallTreeRootsHistory> myCurrentRootsHistory;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <IsBacktrace>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<PayloadMode> <ChildrenExcludeMode>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<CallTreeRootPrefixAndSelection> <CurrentRootProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <HasBacktraces>k__BackingField;
    [CanBeNullAttribute]
private ICallTreeRootsHistory RootsHistory { get; }
    public CallTreeRootPrefix CurrentPrefix { get; }
    public IDataProvider`1<bool> IsBacktrace { get; }
    public IDataProvider`1<PayloadMode> ChildrenExcludeMode { get; }
    public IDataProvider`1<CallTreeRootPrefixAndSelection> CurrentRootProvider { get; }
    public bool CanNavigateHome { get; }
    public bool CanNavigateBack { get; }
    public bool CanNavigateForward { get; }
    public IDataProvider`1<bool> HasBacktraces { get; }
    public CallTreeRootsStack(Lifetime lifetime, IDataProvider`1<ICallTreeRootsHistory> rootsHistoryProvider);
    private ICallTreeRootsHistory get_RootsHistory();
    public sealed virtual void PushNewRoot(CallTreeRootPrefix rootPath, bool deleteHistory);
    public sealed virtual void ChangeDirection(bool isBacktrace);
    public sealed virtual void ChangeAsyncContinuationAggregation(bool aggregateAsyncs);
    public sealed virtual void ChangeAsyncAwaitsAggregation(bool aggregateAsyncs);
    public sealed virtual bool IsAsyncContinuationAggregated();
    public sealed virtual bool IsAsyncAwaitsAggregated();
    public sealed virtual void SetChildrenExcludeMode(PayloadMode mode);
    public sealed virtual void ResetRoot();
    public sealed virtual void NavigateHome();
    public sealed virtual void NavigateBack();
    public sealed virtual void NavigateForward();
    public sealed virtual CallTreeRootPrefix get_CurrentPrefix();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<bool> get_IsBacktrace();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<PayloadMode> get_ChildrenExcludeMode();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<CallTreeRootPrefixAndSelection> get_CurrentRootProvider();
    public sealed virtual bool get_CanNavigateHome();
    public sealed virtual bool get_CanNavigateBack();
    public sealed virtual bool get_CanNavigateForward();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<bool> get_HasBacktraces();
}
public interface JetBrains.DotTrace.Features.CallTree.Roots.ICallTreeRootsHistory {
    public IDataProvider`1<CallTreeRootPrefixAndSelection> CurrentRootProvider { get; }
    public abstract virtual IDataProvider`1<CallTreeRootPrefixAndSelection> get_CurrentRootProvider();
    public abstract virtual void PushNewRoot(CallTreeRootPrefix rootPath, bool deleteHistory);
    public abstract virtual void ChangeIndex(Func`2<int, int> changeIndexFunc, bool deleteHistory);
    public abstract virtual bool CanChangeIndex(Func`2<int, int> changeIndexFunc);
    public abstract virtual void ChangeCurrentRoot(Func`2<ICallTreeHistoryItem, bool> changeFunc);
    public abstract virtual T GetCurrentRoot(Func`2<ICallTreeHistoryItem, T> getFunc);
}
public interface JetBrains.DotTrace.Features.CallTree.Roots.ICallTreeRootsStack {
    public IDataProvider`1<CallTreeRootPrefixAndSelection> CurrentRootProvider { get; }
    [NotNullAttribute]
public CallTreeRootPrefix CurrentPrefix { get; }
    public IDataProvider`1<bool> IsBacktrace { get; }
    public IDataProvider`1<PayloadMode> ChildrenExcludeMode { get; }
    public IDataProvider`1<bool> HasBacktraces { get; }
    public abstract virtual void PushNewRoot(CallTreeRootPrefix rootPath, bool deleteHistory);
    public abstract virtual void ChangeDirection(bool isBacktrace);
    public abstract virtual bool IsAsyncContinuationAggregated();
    public abstract virtual bool IsAsyncAwaitsAggregated();
    public abstract virtual void ChangeAsyncContinuationAggregation(bool aggregateAsyncs);
    public abstract virtual void ChangeAsyncAwaitsAggregation(bool aggregateAwaits);
    public abstract virtual void SetChildrenExcludeMode(PayloadMode mode);
    public abstract virtual void ResetRoot();
    public abstract virtual IDataProvider`1<CallTreeRootPrefixAndSelection> get_CurrentRootProvider();
    public abstract virtual CallTreeRootPrefix get_CurrentPrefix();
    public abstract virtual IDataProvider`1<bool> get_IsBacktrace();
    public abstract virtual IDataProvider`1<PayloadMode> get_ChildrenExcludeMode();
    public abstract virtual IDataProvider`1<bool> get_HasBacktraces();
}
public interface JetBrains.DotTrace.Features.CallTree.Roots.IDalAllRootsCallTreeAccessor`1 {
    public IDataProvider`1<CallTreeNodesAccessors`1<TPtr>> AccessorsProvider { get; }
    public IDataProvider`1<RootAccessData`1<TPtr>> RootAccessData { get; }
    public IDataProvider`1<IComparer`1<TPtr>> Comparer { get; }
    public IDataProvider`1<IAccessor`1<IDataMapper`2<FunctionUID, bool>>> Systemness { get; }
    public abstract virtual IDataProvider`1<CallTreeNodesAccessors`1<TPtr>> get_AccessorsProvider();
    public abstract virtual IDataProvider`1<RootAccessData`1<TPtr>> get_RootAccessData();
    public abstract virtual IDataProvider`1<IComparer`1<TPtr>> get_Comparer();
    public abstract virtual IDataProvider`1<IAccessor`1<IDataMapper`2<FunctionUID, bool>>> get_Systemness();
}
public interface JetBrains.DotTrace.Features.CallTree.Roots.IRootAccessDataProvider`1 {
}
public interface JetBrains.DotTrace.Features.CallTree.StaticTree.IStaticTree {
    public abstract virtual IEnumerable`1<IStaticTreeNode> GetChildren(IStaticTreeNode treeNode, IExecutionController executionController);
    public abstract virtual ulong GetPayload(IStaticTreeNode treeNode, IExecutionController executionController);
    public abstract virtual IEnumerable`1<IStaticTreeNode> GetRoots(IExecutionController executionController);
    public abstract virtual IStaticTreeNode AggregateNodes(IEnumerable`1<IStaticTreeNode> nodes);
    public abstract virtual CallTreePath GetPathToRoots(IStaticTreeNode node);
    public abstract virtual bool IsLogicalRoot(CallTreePath selectedPrefix);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TreeUpdate(Action`1<object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TreeUpdate(Action`1<object> value);
}
public interface JetBrains.DotTrace.Features.CallTree.StaticTree.IStaticTreeModelNode {
    public ulong RawPayload { get; }
    public Nullable`1<bool> IsSystem { get; }
    public FormattedPayload MainFormattedPayload { get; }
    public Nullable`1<FormattedPayload> CallsFormattedPayload { get; }
    public abstract virtual ulong get_RawPayload();
    public abstract virtual Nullable`1<bool> get_IsSystem();
    public abstract virtual FormattedPayload get_MainFormattedPayload();
    public abstract virtual Nullable`1<FormattedPayload> get_CallsFormattedPayload();
}
public interface JetBrains.DotTrace.Features.CallTree.StaticTree.IStaticTreeNode {
    public FormattedText NodeName { get; }
    public IFormattedPayloadViewModel FormattedPayloadViewModel { get; }
    public abstract virtual FormattedText get_NodeName();
    public abstract virtual IFormattedPayloadViewModel get_FormattedPayloadViewModel();
}
public class JetBrains.DotTrace.Features.CallTree.StaticTree.StaticTree`1 : object {
    private IDataProvider`1<TreeUpdateResponse`2<CallTreeNodeId, CallTreeNodeInfo`1<TPayload>>> myTreeUpdateResponse;
    private IDataRequestProcessor`1<TreeUpdateResponse`2<CallTreeNodeId, CallTreeNodeInfo`1<TPayload>>> myRequestProcessor;
    private Func`2<Lifetime, StaticTreeNodeFactory`1<TPayload>> myFactoryBuilder;
    private Lifetime myLifetime;
    private ITreeRequestProcessor`3<CallTreeNodeId, CallTreeNodeInfo`1<TPayload>, CallTreeNodeUserState> myIcicleDownCallTreeRequestProcessor;
    [CanBeNullAttribute]
private CallTreeNodeId[] myRootPrefix;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) myLastTreeVersion;
    [CompilerGeneratedAttribute]
private Action`1<object> TreeUpdate;
    public StaticTree`1(ITreeRequestProcessor`3<CallTreeNodeId, CallTreeNodeInfo`1<TPayload>, CallTreeNodeUserState> icicleDownCallTreeRequestProcessor, CallTreeNodeId[] prefixData, Func`2<Lifetime, StaticTreeNodeFactory`1<TPayload>> factoryBuilder, Lifetime& lt);
    private void RequestFullUpdate();
    public sealed virtual IEnumerable`1<IStaticTreeNode> GetChildren(IStaticTreeNode treeNode, IExecutionController executionController);
    public sealed virtual ulong GetPayload(IStaticTreeNode treeNode, IExecutionController executionController);
    public sealed virtual IEnumerable`1<IStaticTreeNode> GetRoots(IExecutionController executionController);
    private static IEnumerable`1<TreeNode`2<CallTreeNodeId, CallTreeNodeInfo`1<TPayload>>> GetChildren(TreeNode`2<CallTreeNodeId, CallTreeNodeInfo`1<TPayload>> parentNode);
    public sealed virtual IStaticTreeNode AggregateNodes(IEnumerable`1<IStaticTreeNode> nodes);
    public sealed virtual CallTreePath GetPathToRoots(IStaticTreeNode node);
    public sealed virtual bool IsLogicalRoot(CallTreePath selectedPrefix);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TreeUpdate(Action`1<object> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TreeUpdate(Action`1<object> value);
    private static TResult TransformTree(TSource root, Func`2<TSource, IEnumerable`1<TSource>> getChildren, Func`2<TSource, TResult> transform, Action`2<TResult, TResult> addChildren);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_2(TreeUpdateResponse`2<CallTreeNodeId, CallTreeNodeInfo`1<TPayload>> t);
}
public class JetBrains.DotTrace.Features.CallTree.StaticTree.StaticTreeNode`1 : object {
    private List`1<StaticTreeNode`1<TPayload>> myChildren;
    private NamePair myNamePair;
    private Nullable`1<PayloadType> myPayloadType;
    private Nullable`1<CallTreeDirection> myDirection;
    private IPayloadPresenters`1<TPayload> myPayloadPresenters;
    private IPayloadNormalizer`1<TPayload> myPayloadsNormalizer;
    [CompilerGeneratedAttribute]
private TPayload <Payload>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private Nullable`1<CallTreeNodeId> <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private StaticTreeNode`1<TPayload> <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsSystem>k__BackingField;
    private TPayload Payload { get; }
    public FormattedText NodeName { get; }
    public FormattedPayload MainFormattedPayload { get; }
    public Nullable`1<FormattedPayload> CallsFormattedPayload { get; }
    public IFormattedPayloadViewModel FormattedPayloadViewModel { get; }
    public ulong RawPayload { get; }
    public IEnumerable`1<IStaticTreeNode> Children { get; }
    public Nullable`1<CallTreeNodeId> NodeId { get; }
    public StaticTreeNode`1<TPayload> Parent { get; private set; }
    public Nullable`1<bool> IsSystem { get; }
    public StaticTreeNode`1(NamePair namePair, TPayload payload, Nullable`1<PayloadType> payloadType, Nullable`1<CallTreeDirection> direction, IPayloadPresenters`1<TPayload> payloadPresenters, IPayloadNormalizer`1<TPayload> payloadsNormalizer, Nullable`1<CallTreeNodeId> nodeId, Nullable`1<bool> isSystem);
    [CompilerGeneratedAttribute]
private TPayload get_Payload();
    public StaticTreeNode`1<TPayload> MergeNodes(StaticTreeNode`1<TPayload> secondNode);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual FormattedText get_NodeName();
    public sealed virtual FormattedPayload get_MainFormattedPayload();
    public sealed virtual Nullable`1<FormattedPayload> get_CallsFormattedPayload();
    public sealed virtual IFormattedPayloadViewModel get_FormattedPayloadViewModel();
    public sealed virtual ulong get_RawPayload();
    public IEnumerable`1<IStaticTreeNode> get_Children();
    [CompilerGeneratedAttribute]
public Nullable`1<CallTreeNodeId> get_NodeId();
    [CompilerGeneratedAttribute]
public StaticTreeNode`1<TPayload> get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(StaticTreeNode`1<TPayload> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_IsSystem();
    public void AddChild(StaticTreeNode`1<TPayload> child);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.CallTree.StaticTree.StaticTreeNodeEx : object {
    [ExtensionAttribute]
public static void GetNamespaceAndSignature(IStaticTreeNode icicleNode, Func`1& namespaceBuilder, String& methodSignature);
}
public class JetBrains.DotTrace.Features.CallTree.StaticTree.StaticTreeNodeFactory`1 : object {
    private IMethodPrinter myMethodPrinter;
    private IMetadataReaderMerged myMetadataInfoProvider;
    private IPayloadPresenters`1<TPayload> myPayloadPresenters;
    private IPayloadNormalizer`1<TPayload> myPayloadsNormalizer;
    public StaticTreeNodeFactory`1(IMethodPrinter methodPrinter, IMetadataReaderMerged metadataInfoProvider, IPayloadPresenters`1<TPayload> payloadPresenters, IPayloadNormalizer`1<TPayload> payloadsNormalizer);
    public StaticTreeNode`1<TPayload> Build(TPayload payload, CallTreeNodeId key, bool isSystem, object responseData);
    [CompilerGeneratedAttribute]
private IMetadataReaderMerged <Build>b__5_0(Lifetime _);
}
public class JetBrains.DotTrace.Features.CallTree.Timeline.TimelineCallTreeAccessor : object {
    private ITestCompactCallTreeAccessor myCompactCallTreeAccessor;
    public TimelineCallTreeAccessor(ITestCompactCallTreeAccessor compactCallTreeAccessor);
    public sealed virtual ICallTreeReader`1<CallStackPtr> Get(Lifetime lifetime);
}
internal class JetBrains.DotTrace.Features.CallTree.Timeline.TimelineTreeReader : object {
    private ICompactTreeReader myReader;
    public IComparer`1<CallStackPtr> PointersComparer { get; }
    public TimelineTreeReader(ICompactTreeReader reader);
    public sealed virtual FunctionUID ReadKey(CallStackPtr callTreePtr);
    public sealed virtual IEnumerable`1<PlusOrMinus`1<CallStackPtr>> GetChildren(AccessData`1<CallStackPtr> accessData);
    public sealed virtual CallStackPtr GetParent(CallStackPtr callTreePtr);
    public sealed virtual bool IsRootPointer(CallStackPtr callTreePtr);
    public sealed virtual IEnumerable`1<PlusOrMinus`1<CallStackPtr>> GetTopLevelDescendantsForFuid(FunctionUID fuid, AccessData`1<CallStackPtr> accessData);
    public sealed virtual IEnumerable`1<PlusOrMinus`1<CallStackPtr>> GetAllAccessPointersForFuid(FunctionUID fuid, AccessData`1<CallStackPtr> accessData);
    public sealed virtual CallStackPtr[] GetAllAccessPointersForFuid(FunctionUID fuid, AccessData`1<CallStackPtr> accessData, IList`1& recursivePtrs);
    public sealed virtual IEnumerable`1<PlusOrMinus`1<CallStackPtr>> GetTopLevelMinusesDescendants(AccessData`1<CallStackPtr> accessData);
    public sealed virtual IEnumerable`1<CallStackPtr> GetTopPointers(IEnumerable`1<CallStackPtr> callTreePtrs);
    public sealed virtual bool IsOneOfMinuses(CallStackPtr callTreeOffset, IMinuses`1<CallStackPtr> minuses);
    public sealed virtual IEnumerable`1<PlusOrMinus`1<CallStackPtr>> MergePointers(IEnumerable`1<PlusOrMinus`1<CallStackPtr>> callTreePtrs1, IEnumerable`1<PlusOrMinus`1<CallStackPtr>> callTreePtrs2);
    public sealed virtual IMinuses`1<CallStackPtr> CreateMinuses(IEnumerable`1<CallStackPtr> first, IMinuses`1<CallStackPtr> second);
    public sealed virtual Exception ValidateAccessData(AccessData`1<CallStackPtr> accessData);
    public sealed virtual IEnumerable`1<CallStackPtr> SortPointers(IEnumerable`1<CallStackPtr> pointers);
    public sealed virtual IEnumerable`1<CallStackPtr> DistinctSortedPointers(IEnumerable`1<CallStackPtr> pointers);
    public sealed virtual IComparer`1<CallStackPtr> get_PointersComparer();
    public sealed virtual ValueTuple`2<Dictionary`2<CallStackPtr, long>, long> GetSubtreesPowers(AccessData`1<CallStackPtr> accessData);
}
public abstract class JetBrains.DotTrace.Features.CallTree.TopMethods.TopMethodsModelBuilderBase`1 : object {
    [CompilerGeneratedAttribute]
private Action`1<bool> <HideSystemFunctionsButtonCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <HideSystemFunctionsButtonState>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <HideSystemFunctionsButtonIsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<string> <HideSystemFunctionsButtonTooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<string> <NoItemsText>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <HasItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<MethodListModel> <MethodsListModel>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataSink`1<bool> <AreSystemFunctionsShown>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataController`1<bool> <SearchAutoHide>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataController`1<bool> <FollowCallTree>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataController`1<bool> <SortByTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<string> <RootMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataController`1<string> <Search>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataSink`1<CallTreePath> <CallTreePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private ProgressAndTitleModel <ProgressModel>k__BackingField;
    public Action`1<bool> HideSystemFunctionsButtonCallback { get; }
    public IDataProvider`1<bool> HideSystemFunctionsButtonState { get; }
    public IDataProvider`1<bool> HideSystemFunctionsButtonIsEnabled { get; }
    public IDataProvider`1<string> HideSystemFunctionsButtonTooltip { get; }
    public IDataProvider`1<string> NoItemsText { get; }
    public IDataProvider`1<bool> HasItems { get; }
    public IDataProvider`1<MethodListModel> MethodsListModel { get; }
    public IDataSink`1<bool> AreSystemFunctionsShown { get; }
    public IDataController`1<bool> SearchAutoHide { get; }
    public IDataController`1<bool> FollowCallTree { get; }
    public IDataController`1<bool> SortByTotal { get; }
    public IDataProvider`1<string> RootMethodName { get; }
    public IDataController`1<string> Search { get; }
    public IDataSink`1<CallTreePath> CallTreePrefix { get; }
    [NotNullAttribute]
public ProgressAndTitleModel ProgressModel { get; }
    protected TopMethodsModelBuilderBase`1(IDataContainer`1<DataPipeLifetime> lifetimeContainer, ICacheProviderContainer`1<IAccessor`1<IMetadataReaderMerged>> metadataProviderContainer, IMethodPrinter methodPrinter, IProviderContainer`1<IPayloadPresenters`1<TPayload>> payloadPresentersContainer, IRemotableReference`1<IProviderContainer`1<ITopMethodsMap`1<TPayload>>> topMethodsMapContainer, TopMethodsSettingsComponent topMethodsSettingsComponent);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<bool> get_HideSystemFunctionsButtonCallback();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<bool> get_HideSystemFunctionsButtonState();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<bool> get_HideSystemFunctionsButtonIsEnabled();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<string> get_HideSystemFunctionsButtonTooltip();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<string> get_NoItemsText();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<bool> get_HasItems();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<MethodListModel> get_MethodsListModel();
    [CompilerGeneratedAttribute]
public sealed virtual IDataSink`1<bool> get_AreSystemFunctionsShown();
    [CompilerGeneratedAttribute]
public sealed virtual IDataController`1<bool> get_SearchAutoHide();
    [CompilerGeneratedAttribute]
public sealed virtual IDataController`1<bool> get_FollowCallTree();
    [CompilerGeneratedAttribute]
public sealed virtual IDataController`1<bool> get_SortByTotal();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<string> get_RootMethodName();
    [CompilerGeneratedAttribute]
public sealed virtual IDataController`1<string> get_Search();
    [CompilerGeneratedAttribute]
public sealed virtual IDataSink`1<CallTreePath> get_CallTreePrefix();
    [CompilerGeneratedAttribute]
public sealed virtual ProgressAndTitleModel get_ProgressModel();
    private void BuildTopMethodsItemModels(IAccessor`1<IMetadataReaderMerged> metadataReaderAccessor, IMethodPrinter methodPrinter, ITopMethodsMap`1<TPayload> payloads, IdentifierMatcher identifierMatcher, IPayloadPresenters`1<TPayload> rawPayloadPresenters, IExecutionController controller, List`1<MethodsListItemModel> result);
    private static string PayloadTypeToSortText(PayloadType type);
}
public static class JetBrains.DotTrace.Features.CallTree.TopMethodsTooltipsHelper : object {
    private static IDictionary`2<PayloadType, string> OwnPayloadTooltips;
    private static IDictionary`2<PayloadType, string> OwnPlusSystemPayloadTooltips;
    private static IDictionary`2<PayloadType, string> TotalPayloadTooltips;
    private static IDictionary`2<PayloadType, string> TotalEqualsOwnPayloadTooltips;
    private static IDictionary`2<PayloadType, string> TotalEqualsOwnPlusSystemPayloadTooltips;
    private static IDictionary`2<PayloadType, string> SystemStackTraceTooltips;
    private static IDictionary`2<PayloadType, string> NativeStackTraceTooltips;
    private static TopMethodsTooltipsHelper();
    public static string GetTooltip(bool mergedNode, bool isOwnPayload, bool showSystemFunctions, bool ownEqualTotal, PayloadType payloadType);
}
[SnapshotConvertorComponentAttribute("9")]
public class JetBrains.DotTrace.Features.ConverterComponents.Local.ConverterComponentFileLocker : object {
    private static ILogger ourLog;
    public ConverterComponentFileLocker(Lifetime lifetime, SnapshotProcessingInput input);
    private static ConverterComponentFileLocker();
}
[SnapshotConvertorComponentAttribute("10")]
public class JetBrains.DotTrace.Features.ConverterComponents.Local.FUS.SnapshotProcessorPipelineBuilderWithStatistics : SnapshotProcessorPipelineBuilder {
    private SnapshotProcessingInput mySnapshotProcessingInput;
    [NotNullAttribute]
private FusSnapshotStatistics mySnapshotStatistics;
    public SnapshotProcessorPipelineBuilderWithStatistics(Lifetime lifetime, IRemotablePairContainer`1<DataPipeLifetime> lifetimeContainer, SnapshotProcessingInput snapshotProcessingInput, FusSnapshotStatistics snapshotStatistics, IRemotableReference`1<ITimelineSnapshotProcessor`1<ConvertedSnapshot>> remoteProcessor);
    public virtual ProcessingContext`1<ConvertedSnapshot> BuildProcessingContext();
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.ConverterComponents.Local.FUS.ZoneMarker : object {
}
public interface JetBrains.DotTrace.Features.ConverterComponents.Local.ISnapshotProcessorPipelineBuilder {
    public abstract virtual ProcessingContext`1<ConvertedSnapshot> BuildProcessingContext();
}
[SnapshotConvertorComponentAttribute("10")]
public class JetBrains.DotTrace.Features.ConverterComponents.Local.RawSnapshotPresentation : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<SnapshotPresentationData> <PresentationData>k__BackingField;
    public IDataProvider`1<bool> SnapshotIsLocked { get; }
    public IDataProvider`1<SnapshotPresentationData> PresentationData { get; }
    public RawSnapshotPresentation(SnapshotProcessingInput input);
    public IDataProvider`1<bool> get_SnapshotIsLocked();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<SnapshotPresentationData> get_PresentationData();
}
[SnapshotConvertorComponentAttribute("16")]
public class JetBrains.DotTrace.Features.ConverterComponents.Local.SnapshotCreatedDateTimeForSourceView : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<Nullable`1<DateTime>> <DateTime>k__BackingField;
    public IDataProvider`1<Nullable`1<DateTime>> DateTime { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<Nullable`1<DateTime>> get_DateTime();
}
[SnapshotConvertorComponentAttribute("10")]
public class JetBrains.DotTrace.Features.ConverterComponents.Local.SnapshotProcessorComponent : object {
    [CompilerGeneratedAttribute]
private SnapshotProcessingPipe <ProcessingPipe>k__BackingField;
    public SnapshotProcessingPipe ProcessingPipe { get; }
    public SnapshotProcessorComponent(Lifetime lifetime, ISnapshotProcessorPipelineBuilder snapshotProcessorPipelineBuilder);
    [CompilerGeneratedAttribute]
public SnapshotProcessingPipe get_ProcessingPipe();
}
[SnapshotConvertorComponentAttribute("10")]
public class JetBrains.DotTrace.Features.ConverterComponents.Local.SnapshotProcessorPipelineBuilder : object {
    private ProcessingContext`1<ConvertedSnapshot> myProcessingContext;
    public SnapshotProcessorPipelineBuilder(Lifetime lifetime, IRemotablePairContainer`1<DataPipeLifetime> lifetimeContainer, SnapshotProcessingInput snapshotProcessingInput, IRemotableReference`1<ITimelineSnapshotProcessor`1<ConvertedSnapshot>> remoteProcessor);
    private static ProcessingContext`1<ConvertedSnapshot> BuildRemotePipeline(ProcessingInput input);
    private static ProcessingContext`1<T> SwitchLocalIfRemote(Lifetime lifetime, IRemotablePair`1<DataPipeLifetime> pipeLifetime, IRemotableReference`1<ProcessingContext`1<T>> remoteContext);
    private static IDataProvider`1<Message> BindMessages(IRemotablePair`1<DataPipeLifetime> lifetime, IRemotableReference`1<ProcessingContext`1<T>> remoteContext);
    public virtual ProcessingContext`1<ConvertedSnapshot> BuildProcessingContext();
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.ConverterComponents.Local.ZoneMarker : object {
}
[SnapshotConvertorComponentAttribute("0")]
public class JetBrains.DotTrace.Features.ConverterComponents.Remote.SnapshotProcessor : object {
    private IShellLocks myShellLocks;
    private ISnapshotsSettingsProvider mySnapshotsSettingsProvider;
    public SnapshotProcessor(IShellLocks shellLocks, ISnapshotsSettingsProvider snapshotsSettingsProvider);
    public sealed virtual ProcessingContext`1<ConvertedSnapshot> Process(Lifetime lifetime, SnapshotProcessingInput input);
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.ConverterComponents.Remote.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.ConverterComponents.ZoneMarker : object {
}
public class JetBrains.DotTrace.Features.Export.ExportSnapshotProcessInfo : object {
    [CompilerGeneratedAttribute]
private IProgressIndicatorModel <ProgressIndicator>k__BackingField;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <HasError>k__BackingField;
    public IProgressIndicatorModel ProgressIndicator { get; }
    public Lifetime Lifetime { get; }
    public IProperty`1<bool> HasError { get; }
    public ExportSnapshotProcessInfo(Lifetime lifetime, IProgressIndicatorModel progressIndicator, IProperty`1<bool> hasError);
    [CompilerGeneratedAttribute]
public IProgressIndicatorModel get_ProgressIndicator();
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_HasError();
}
public static class JetBrains.DotTrace.Features.Export.ExportUIUtil : object {
    public static FileSystemPath GetBrowseDialog(IPersistentPathDialogs fileDialogs, IEnumerable`1<ISnapshotViewer> viewers, FileSystemPath path, string proposedName);
    private static ExportSnapshotProcessInfo ExportSnapshotExecute(Lifetime parentLifetime, IThreading threading, FileSystemPath sourceSnapshotPath, FileSystemPath targetSnapshotPath, string progressTitle);
    public static void ExportSnapshot(Lifetime parentLifetime, IThreading threading, IRecentSnapshot sourceSnapshotPath, FileSystemPath targetSnapshotPath, IRecentSnapshotsCollection snapshotsCollection, IExportProgressSubmitter exportProgressProvider, string progressTitle);
}
public interface JetBrains.DotTrace.Features.Export.IExportProgressSubmitter {
    public abstract virtual void AddProgress(Lifetime lifetime, IProgressIndicatorModel progress);
    public abstract virtual bool CanAddProgress();
}
public interface JetBrains.DotTrace.Features.Export.IPersistentPathDialogs {
    public abstract virtual FileSystemPath OpenFileDialog(string title, ChooseFileType[] filters);
    public abstract virtual FileSystemPath SaveFileDialog(string title, ChooseFileType[] filters, string fileName);
}
public class JetBrains.DotTrace.Features.Filtration.AnalysisSubjectsModel : object {
    private IDictionary`2<FilterId, FilterInfo> myFilterInfos;
    private IList`1<FilterItem> myItems;
    public IDataProvider`1<bool> IsDefaultAnalysisSubject;
    public IDataProvider`1<string> HeaderProvider;
    private FilterId myDefault;
    private Action myClear;
    public string Tooltip { get; }
    public bool IsEmpty { get; }
    public IEnumerable`1<FilterItem> Items { get; }
    public AnalysisSubjectsModel(FilterRadioGroup analysisSubjectsRadioGroup);
    public string get_Tooltip();
    public void Add(FilterId id, FilterInfo nameInHeader, NameWithPayloadModel name, IDataProvider`1<bool> isSelected, Action select, IDataProvider`1<bool> isEnabled);
    public bool get_IsEmpty();
    public IEnumerable`1<FilterItem> get_Items();
    public void Clear();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Filtration.AppliedDataFilterEx : object {
    [ExtensionAttribute]
public static ICommandContainer CreateClearAllCommand(IDataProvider`1<IEnumerable`1<AppliedFilterValueModel>> values);
    [ExtensionAttribute]
public static Action ExecuteAll(IEnumerable`1<Action> actions);
}
public class JetBrains.DotTrace.Features.Filtration.ButtonWithIconModel : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <IsApplied>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<FormattedText> <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<FormattedText> <Tooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<IconId> <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <Clear>k__BackingField;
    public IDataProvider`1<bool> IsApplied { get; }
    public IDataProvider`1<FormattedText> Content { get; }
    public IDataProvider`1<FormattedText> Tooltip { get; }
    public IDataProvider`1<IconId> Icon { get; }
    public Action Clear { get; }
    public ButtonWithIconModel(IDataProvider`1<bool> isApplied, IDataProvider`1<FormattedText> content, IDataProvider`1<FormattedText> tooltip, IDataProvider`1<IconId> icon, Action clear);
    [CompilerGeneratedAttribute]
public IDataProvider`1<bool> get_IsApplied();
    [CompilerGeneratedAttribute]
public IDataProvider`1<FormattedText> get_Content();
    [CompilerGeneratedAttribute]
public IDataProvider`1<FormattedText> get_Tooltip();
    [CompilerGeneratedAttribute]
public IDataProvider`1<IconId> get_Icon();
    [CompilerGeneratedAttribute]
public Action get_Clear();
}
public static class JetBrains.DotTrace.Features.Filtration.DefaultTableDescriptor : object {
    public static PreviewTableDescriptor`2<TKey, TPayload> Create(Func`2<TKey, FilterPresentationModel> keyPresenter);
    public static PreviewTableDescriptor`2<TKey, TPayload> Create(Func`2<TKey, IDataProvider`1<FilterPresentationModel>> keyPresenter);
    public static PreviewSortDescriptor`2<TKey, TPayload> CreatePayloadSortDescriptor(bool useKeyForCompare);
}
public static class JetBrains.DotTrace.Features.Filtration.EnumFilterModelBuilder : object {
    private static int MaxElementCount;
    public static string ThreadShortName(string shortName, ThreadPresentation type, bool addThreadWord);
    public static IDataProvider`1<IEnumerable`1<TKey>> TopKeysAndSelected(IDataProvider`1<PayloadsMap`2<TKey, TPayload>> payloadsMap, IDataProvider`1<IReadOnlyCollection`1<TKey>> selectedKeysProvider, IDataProvider`1<IEnumerable`1<TKey>> alwaysVisibleKeys, IDataProvider`1<PreviewSortDescriptor`2<TKey, TPayload>> comparator, int maxElementCount, bool appendKeysFromPayloadMap);
    public static IEnumerable`1<TKey> SortItems(IEnumerable`1<TKey> keys, PayloadsMap`2<TKey, TPayload> payloads, PreviewSortDescriptor`2<TKey, TPayload> comparison);
    public static NameWithPayloadAndPercentsModel CreateModelForMenu(TKey key, IDataProvider`1<PresentablePayloads`2<TKey, TPayload>> presentablePayloads, IDataProvider`1<IPayloadPresenters`1<TPayload>> payloadPresenters, IDataProvider`1<FilterPresentationModel> nameProvider);
    public static NameWithPayloadAndPercentsModel CreateModel(IDataProvider`1<IPayloadPresenter`1<TPayload>> payloadPresenter, IDataProvider`1<FilterPresentationModel> name, IDataProvider`1<TPayload> payload, IDataProvider`1<bool> fade, IDataProvider`1<double> payloadPercent, IDataProvider`1<bool> showPercents, IDataProvider`1<bool> isPinned);
    public static NameWithPayloadAndPercentsModel CreateModel(IDataProvider`1<FilterPresentationModel> name, IDataProvider`1<Pair`2<TPayload, IPayloadPresenter`1<TPayload>>> payload, IDataProvider`1<bool> fade, IDataProvider`1<double> payloadPercent, IDataProvider`1<bool> showPercents, IDataProvider`1<bool> isPinned);
    public static NameWithPayloadModel CreateWithoutPercentsModel(IDataProvider`1<IPayloadPresenter`1<TPayload>> payloadPresenter, string name, IDataProvider`1<Nullable`1<TPayload>> payload);
}
public class JetBrains.DotTrace.Features.Filtration.EnumFilterPanelModel`2 : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<IEnumerable`1<TKey>> <OrderedKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxElementCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservableSet`1<TKey> <SelectedKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private Header <Header>k__BackingField;
    private IDataProvider`1<IPayloadPresenters`1<TValue>> myPayloadPresenter;
    [CompilerGeneratedAttribute]
private IDataProvider`1<PresentablePayloads`2<TKey, TValue>> <FilterPayloads>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<TKey, IDataProvider`1<FilterPresentationModel>> <KeyPresenter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<TKey, IDataProvider`1<FilterPresentationModel>> <FilteredValuePresenter>k__BackingField;
    public IDataProvider`1<IEnumerable`1<TKey>> OrderedKeys { get; }
    public int MaxElementCount { get; }
    public IObservableSet`1<TKey> SelectedKeys { get; }
    public Header Header { get; }
    public IDataProvider`1<PresentablePayloads`2<TKey, TValue>> FilterPayloads { get; }
    public Func`2<TKey, IDataProvider`1<FilterPresentationModel>> KeyPresenter { get; }
    public Func`2<TKey, IDataProvider`1<FilterPresentationModel>> FilteredValuePresenter { get; }
    public EnumFilterPanelModel`2(Lifetime lifetime, IDataProvider`1<IPayloadPresenters`1<TValue>> payloadPresenter, int maxElementCount, Header header, IObservableSet`1<TKey> selectedKeys, IDataProvider`1<PresentablePayloads`2<TKey, TValue>> filterPayloads, IDataProvider`1<IEnumerable`1<TKey>> allKeys, IDataProvider`1<PreviewSortDescriptor`2<TKey, TValue>> comparer, Func`2<TKey, IDataProvider`1<FilterPresentationModel>> filteredValuePresenter, Func`2<TKey, IDataProvider`1<FilterPresentationModel>> keyPresenter, bool appendKeysFromPayloadMap);
    [CompilerGeneratedAttribute]
public IDataProvider`1<IEnumerable`1<TKey>> get_OrderedKeys();
    [CompilerGeneratedAttribute]
public int get_MaxElementCount();
    [CompilerGeneratedAttribute]
public IObservableSet`1<TKey> get_SelectedKeys();
    [CompilerGeneratedAttribute]
public Header get_Header();
    [CompilerGeneratedAttribute]
public IDataProvider`1<PresentablePayloads`2<TKey, TValue>> get_FilterPayloads();
    [CompilerGeneratedAttribute]
public Func`2<TKey, IDataProvider`1<FilterPresentationModel>> get_KeyPresenter();
    [CompilerGeneratedAttribute]
public Func`2<TKey, IDataProvider`1<FilterPresentationModel>> get_FilteredValuePresenter();
    public EnumKeyModel`1<TKey> ItemModelGenerator(TKey key);
}
public class JetBrains.DotTrace.Features.Filtration.EnumKeyModel`1 : object {
    private TKey myKey;
    private IObservableSet`1<TKey> mySelectedKeys;
    [CompilerGeneratedAttribute]
private NameWithPayloadAndPercentsModel <PresentationModel>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <IsSelectedProvider>k__BackingField;
    public NameWithPayloadAndPercentsModel PresentationModel { get; }
    public IDataProvider`1<bool> IsSelectedProvider { get; }
    public bool IsSelected { get; }
    public EnumKeyModel`1(TKey key, IObservableSet`1<TKey> selectedKeys, NameWithPayloadAndPercentsModel presentationModel);
    [CompilerGeneratedAttribute]
public NameWithPayloadAndPercentsModel get_PresentationModel();
    [CompilerGeneratedAttribute]
public IDataProvider`1<bool> get_IsSelectedProvider();
    public void ToggleKey(bool isEnabled);
    public void SelectOne();
    public bool get_IsSelected();
}
public static class JetBrains.DotTrace.Features.Filtration.ExpanderKeyCustomization : object {
    public static string Header(ExpanderKey key);
    public static string PluralHeader(ExpanderKey key);
    public static void YesNoHeaderValues(ExpanderKey key, String& yesValue, String& noValue);
    public static string Tooltip(ExpanderKey key);
    public static IDataProvider`1<double> MinWidth(ExpanderKey key);
    public static int TopElementsCount(ExpanderKey key);
}
public class JetBrains.DotTrace.Features.Filtration.FilterInfo : object {
    [CompilerGeneratedAttribute]
private string <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tooltip>k__BackingField;
    public string Header { get; public set; }
    public string Tooltip { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Header();
    [CompilerGeneratedAttribute]
public void set_Header(string value);
    [CompilerGeneratedAttribute]
public string get_Tooltip();
    [CompilerGeneratedAttribute]
public void set_Tooltip(string value);
}
public class JetBrains.DotTrace.Features.Filtration.FilterItem : object {
    [CompilerGeneratedAttribute]
private NameWithPayloadModel <NameModel>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <IsSelected>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <Select>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <IsEnabled>k__BackingField;
    public NameWithPayloadModel NameModel { get; }
    public IDataProvider`1<bool> IsSelected { get; }
    public Action Select { get; }
    public IDataProvider`1<bool> IsEnabled { get; }
    public FilterItem(NameWithPayloadModel nameModel, IDataProvider`1<bool> isSelected, Action select, IDataProvider`1<bool> isEnabled);
    [CompilerGeneratedAttribute]
public NameWithPayloadModel get_NameModel();
    [CompilerGeneratedAttribute]
public IDataProvider`1<bool> get_IsSelected();
    [CompilerGeneratedAttribute]
public Action get_Select();
    [CompilerGeneratedAttribute]
public IDataProvider`1<bool> get_IsEnabled();
}
public enum JetBrains.DotTrace.Features.Filtration.FilterPresentationMode : Enum {
    public int value__;
    public static FilterPresentationMode Compact;
    public static FilterPresentationMode Extended;
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Filtration.FiltersModelEx : object {
    [ExtensionAttribute]
public static IDataProvider`1<IEnumerable`1<Action>> GetClearActions(IInstantiatedFilter filter);
    [ExtensionAttribute]
public static IDataProvider`1<bool> CreateIsAppliedProvider(IInstantiatedFilter filter);
    public static void Clear(IEnumerable`1<AppliedFilterValueModel> values);
}
public abstract class JetBrains.DotTrace.Features.Filtration.FiltersPanelBuilder : object {
    private IMethodPrinter myMethodPrinter;
    private ICacheProviderContainer`1<IAccessor`1<IMetadataReaderMerged>> myMetadataReaderAccessor;
    private IDataContainer`1<FilterPresentationMode> myThreadFilterMode;
    private IDataProvider`1<SelectedRangeType> myRangeFilterType;
    private InstantiatedFilters myFiltersData;
    protected DataPipeLifetime Lifetime;
    [CanBeNullAttribute]
private AnalysisSubjectsModel myAnalysisSubjectsModel;
    private IList`1<object> myToggleFilters;
    private ObservableCollection`1<object> myFilterViewModels;
    private IList`1<object> myRootFilterViewModels;
    private object myThreadsViewModel;
    private IInstantiatedFilter myLastAddedNestedFilter;
    private object myCallTreeFilter;
    protected FiltersPanelBuilder(DataPipeLifetime lifetime, IMethodPrinter methodPrinter, ICacheProviderContainer`1<IAccessor`1<IMetadataReaderMerged>> metadataReaderAccessor, FilterRadioGroup analysisSubjectGroup, IDataContainer`1<FilterPresentationMode> threadFilterMode, IDataProvider`1<SelectedRangeType> rangeFilterType, InstantiatedFilters filtersData);
    private IDataProvider`1<Nullable`1<NamePair>> CurrentMethodNamePair(InstantiatedCallTreeFilter`1<TPayload> filter);
    private ButtonWithIconModel CreateCallTreePanelButtonModel(InstantiatedCallTreeFilter`1<TPayload> filter);
    private EnumFilterPanelModel`2<TKey, TPayload> CreateEnumFilterModel(IInstantiatedEnumFilter`2<TKey, TPayload> filter, int elementsCount);
    private EnumFilterPanelModel`2<bool, TPayload> CreateYesNoFilterModel(IInstantiatedYesNoFilter`1<TPayload> filter);
    private void AddAnalysisSubject(IInstantiatedRadioButtonFilter`1<TPayload> instantiated);
    private static FilterInfo CreateFilterInfoForRadioButtonFilter(IInstantiatedRadioButtonFilter`1<TPayload> instantiated);
    public sealed virtual void RadioButtonFilter(IInstantiatedRadioButtonFilter`1<TPayload> instantiated);
    public sealed virtual void ToggleFilter(IInstantiatedToggleFilter`1<TPayload> instantiated);
    private static FilterInfo CreateFilterInfoForToggleFilter(IInstantiatedToggleFilter`1<TPayload> instantiated);
    public sealed virtual void EnumFilter(IInstantiatedEnumFilter`2<TKey, TPayload> filter);
    public sealed virtual void RadioGroupFilter(IInstantiatedRadioGroupFilter`2<TKey, TPayload> filter);
    protected abstract virtual int EnumFilterTopElementsCount(ExpanderKey filterExpanderKey);
    protected abstract virtual object BuildEnumFilterViewModel(ExpanderKey expanderKey, EnumFilterPanelModel`2<TKey, TPayload> model);
    private void InsertSeparator(IInstantiatedFilter previous, IInstantiatedFilter current);
    private static bool SeparatorNeeded(IInstantiatedFilter previous, IInstantiatedFilter current);
    private void AddSeparator(IInstantiatedFilter filter);
    protected abstract virtual object BuildSeparator();
    private void AddFilter(IInstantiatedFilter instantiated, object vm);
    public sealed virtual void YesNoFilter(IInstantiatedYesNoFilter`1<TPayload> filter);
    public sealed virtual void ClearableFilter(IInstantiatedClearableFilter instantiated);
    protected abstract virtual object BuildYesNoFilterViewModel(EnumFilterPanelModel`2<bool, TPayload> model);
    public sealed virtual void CallTreeFilter(InstantiatedCallTreeFilter`1<TPayload> filter);
    protected abstract virtual object BuildCallTreeFilterViewModel(ButtonWithIconModel model);
    private object CreateFiltersPanel();
    protected abstract virtual object BuildAnalysisSubjectsViewModel(AnalysisSubjectsModel analysisSubjectsModel);
    protected abstract virtual object BuildPanelViewModel(ObservableCollection`1<object> panelItemViewModels);
    protected abstract virtual object BuildToggleFilterViewModel(ToggleFilterInfo model);
    protected virtual object CreateTimeRangeFilter();
    protected object Build();
}
public class JetBrains.DotTrace.Features.Filtration.Header : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PluralText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<double> <MinWidth>k__BackingField;
    [LocalizableAttribute("True")]
public string Text { get; }
    [LocalizableAttribute("True")]
public string PluralText { get; }
    [LocalizableAttribute("True")]
public string Tooltip { get; }
    public IDataProvider`1<double> MinWidth { get; }
    public Header(ExpanderKey expanderKey);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public string get_PluralText();
    [CompilerGeneratedAttribute]
public string get_Tooltip();
    [CompilerGeneratedAttribute]
public IDataProvider`1<double> get_MinWidth();
}
public interface JetBrains.DotTrace.Features.Filtration.IFilteredRangeProvider {
    public IDataProvider`1<ModelRange> Range { get; }
    public abstract virtual IDataProvider`1<ModelRange> get_Range();
}
public interface JetBrains.DotTrace.Features.Filtration.IInitialThreadsVisibility {
    public IDataProvider`1<bool> ShowNativeThreads { get; }
    public abstract virtual IDataProvider`1<bool> get_ShowNativeThreads();
}
public interface JetBrains.DotTrace.Features.Filtration.INamedAction {
    [NotNullAttribute]
public IDataProvider`1<bool> IsVisible { get; }
    [NotNullAttribute]
public IDataProvider`1<bool> IsEnabled { get; }
    [CanBeNullAttribute]
public IDataProvider`1<string> Name { get; }
    [CanBeNullAttribute]
public IDataProvider`1<IconId> Icon { get; }
    [CanBeNullAttribute]
public IDataProvider`1<string> Hint { get; }
    [NotNullAttribute]
public IDataProvider`1<Action> RunAction { get; }
    public abstract virtual IDataProvider`1<bool> get_IsVisible();
    public abstract virtual IDataProvider`1<bool> get_IsEnabled();
    public abstract virtual IDataProvider`1<string> get_Name();
    public abstract virtual IDataProvider`1<IconId> get_Icon();
    public abstract virtual IDataProvider`1<string> get_Hint();
    public abstract virtual IDataProvider`1<Action> get_RunAction();
}
public interface JetBrains.DotTrace.Features.Filtration.InstantiatedFilters.IAnalysisSubjectContainer {
    [CanBeNullAttribute]
public FilterRadioGroup AnalysisSubjectGroup { get; }
    public abstract virtual FilterRadioGroup get_AnalysisSubjectGroup();
}
public interface JetBrains.DotTrace.Features.Filtration.InstantiatedFilters.IInstantiatedClearableFilter {
}
public interface JetBrains.DotTrace.Features.Filtration.InstantiatedFilters.IInstantiatedEnumFilter`2 {
    public IRemotableReference`1<IThreadSwitch`1<PresentablePayloads`2<TKey, TPayload>>> PayloadSwitch { get; }
    [NotNullAttribute]
public PreviewTableDescriptor`2<TKey, TPayload> TableDescriptor { get; }
    [NotNullAttribute]
public IObservableSet`1<TKey> SelectedKeys { get; }
    [CanBeNullAttribute]
public IDataProvider`1<IEnumerable`1<TKey>> AllKeys { get; }
    [NotNullAttribute]
public Func`2<TKey, IDataProvider`1<FilterPresentationModel>> FilteredValuePresenter { get; }
    public abstract virtual IRemotableReference`1<IThreadSwitch`1<PresentablePayloads`2<TKey, TPayload>>> get_PayloadSwitch();
    public abstract virtual PreviewTableDescriptor`2<TKey, TPayload> get_TableDescriptor();
    public abstract virtual IObservableSet`1<TKey> get_SelectedKeys();
    public abstract virtual IDataProvider`1<IEnumerable`1<TKey>> get_AllKeys();
    public abstract virtual Func`2<TKey, IDataProvider`1<FilterPresentationModel>> get_FilteredValuePresenter();
}
public interface JetBrains.DotTrace.Features.Filtration.InstantiatedFilters.IInstantiatedFilter {
    public FilterId Id { get; }
    public FilterId ParentFilterId { get; }
    public ExpanderKey ExpanderKey { get; }
    public IDataProvider`1<IEnumerable`1<AppliedFilterValueModel>> FilteredValues { get; }
    public IDataProvider`1<bool> IsAvailable { get; }
    public IDataSignal ProgressSource { get; }
    [CanBeNullAttribute]
public Int32[] EventTypeDependencies { get; }
    public abstract virtual FilterId get_Id();
    public abstract virtual FilterId get_ParentFilterId();
    public abstract virtual ExpanderKey get_ExpanderKey();
    public abstract virtual IDataProvider`1<IEnumerable`1<AppliedFilterValueModel>> get_FilteredValues();
    public abstract virtual IDataProvider`1<bool> get_IsAvailable();
    public abstract virtual void Clear();
    public abstract virtual IDataSignal get_ProgressSource();
    public abstract virtual Int32[] get_EventTypeDependencies();
    public abstract virtual void AcceptVisitor(IInstantiatedFilterVisitor builder);
}
public interface JetBrains.DotTrace.Features.Filtration.InstantiatedFilters.IInstantiatedFilterVisitor {
    public abstract virtual void EnumFilter(IInstantiatedEnumFilter`2<TKey, TPayload> instantiated);
    public abstract virtual void RadioGroupFilter(IInstantiatedRadioGroupFilter`2<TKey, TPayload> instantiated);
    public abstract virtual void CallTreeFilter(InstantiatedCallTreeFilter`1<TPayload> instantiated);
    public abstract virtual void ToggleFilter(IInstantiatedToggleFilter`1<TPayload> instantiated);
    public abstract virtual void RadioButtonFilter(IInstantiatedRadioButtonFilter`1<TPayload> instantiated);
    public abstract virtual void YesNoFilter(IInstantiatedYesNoFilter`1<TPayload> instantiated);
    public abstract virtual void ClearableFilter(IInstantiatedClearableFilter instantiated);
}
public interface JetBrains.DotTrace.Features.Filtration.InstantiatedFilters.IInstantiatedFilterWithPayload`1 {
    public IDataProvider`1<PresentablePayload`1<TPayload>> PayloadProvider { get; }
    public IDataProvider`1<IPayloadPresenters`1<TPayload>> PayloadPresenter { get; }
    public abstract virtual IDataProvider`1<PresentablePayload`1<TPayload>> get_PayloadProvider();
    public abstract virtual IDataProvider`1<IPayloadPresenters`1<TPayload>> get_PayloadPresenter();
}
public interface JetBrains.DotTrace.Features.Filtration.InstantiatedFilters.IInstantiatedFilterWithPayloadAndKey`2 {
    [NotNullAttribute]
public IDataProvider`1<PresentablePayloads`2<TKey, TPayload>> Payloads { get; }
    public IDataProvider`1<IPayloadPresenters`1<TPayload>> PayloadPresenter { get; }
    public abstract virtual IDataProvider`1<PresentablePayloads`2<TKey, TPayload>> get_Payloads();
    public abstract virtual IDataProvider`1<IPayloadPresenters`1<TPayload>> get_PayloadPresenter();
}
public interface JetBrains.DotTrace.Features.Filtration.InstantiatedFilters.IInstantiatedRadioButtonFilter`1 {
    public string Name { get; }
    public IDataProvider`1<bool> IsEnabled { get; }
    public bool HighlightCheckedState { get; }
    public KnownEventTypes EnablingEventType { get; }
    public IDataProvider`1<ITickTimeConverter> TickTimeConverter { get; }
    public abstract virtual string get_Name();
    public abstract virtual IDataProvider`1<bool> get_IsEnabled();
    public abstract virtual void Activate();
    public abstract virtual bool get_HighlightCheckedState();
    public abstract virtual KnownEventTypes get_EnablingEventType();
    public abstract virtual IDataProvider`1<ITickTimeConverter> get_TickTimeConverter();
}
public interface JetBrains.DotTrace.Features.Filtration.InstantiatedFilters.IInstantiatedRadioGroupFilter`2 {
    [NotNullAttribute]
public IDataProvider`1<PresentablePayloadsWithPresenter`2<TKey, TPayload>> Payloads { get; }
    [NotNullAttribute]
public IDataProvider`1<TKey> SelectedKey { get; }
    [CanBeNullAttribute]
public IDataProvider`1<IEnumerable`1<TKey>> AllKeys { get; }
    [NotNullAttribute]
public PreviewTableDescriptor`2<TKey, TPayload> TableDescriptor { get; }
    public IEnumerable`1<INamedAction> AdditionalActions { get; }
    public abstract virtual IDataProvider`1<PresentablePayloadsWithPresenter`2<TKey, TPayload>> get_Payloads();
    public abstract virtual IDataProvider`1<TKey> get_SelectedKey();
    public abstract virtual void ChangeSelection(TKey selection);
    public abstract virtual IDataProvider`1<IEnumerable`1<TKey>> get_AllKeys();
    public abstract virtual PreviewTableDescriptor`2<TKey, TPayload> get_TableDescriptor();
    public abstract virtual IEnumerable`1<INamedAction> get_AdditionalActions();
}
public interface JetBrains.DotTrace.Features.Filtration.InstantiatedFilters.IInstantiatedSubsystemFilter`1 {
    public IDataProvider`1<IPayloadNormalizer`1<TPayload>> PayloadNormalizer { get; }
    public abstract virtual IDataProvider`1<IPayloadNormalizer`1<TPayload>> get_PayloadNormalizer();
}
public interface JetBrains.DotTrace.Features.Filtration.InstantiatedFilters.IInstantiatedToggleFilter`1 {
    public string Name { get; }
    public IDataControllerContainer`1<bool> IsEnabled { get; }
    public IReadOnlyCollection`1<int> EnablingEventTypes { get; }
    public abstract virtual string get_Name();
    public abstract virtual IDataControllerContainer`1<bool> get_IsEnabled();
    public abstract virtual IReadOnlyCollection`1<int> get_EnablingEventTypes();
}
public interface JetBrains.DotTrace.Features.Filtration.InstantiatedFilters.IInstantiatedYesNoFilter`1 {
    public Func`2<bool, FilterPresentationModel> NamePresenter { get; }
    public IDataControllerContainer`1<Nullable`1<bool>> SelectedValue { get; }
    public IDataController`1<bool> IsActive { get; }
    public abstract virtual Func`2<bool, FilterPresentationModel> get_NamePresenter();
    public abstract virtual IDataControllerContainer`1<Nullable`1<bool>> get_SelectedValue();
    public abstract virtual IDataController`1<bool> get_IsActive();
}
public class JetBrains.DotTrace.Features.Filtration.InstantiatedFilters.InstantiatedCallTreeFilter`1 : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<IEnumerable`1<AppliedFilterValueModel>> <FilteredValues>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <AreAwaitsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private ICallTreeRootsStack <RootStack>k__BackingField;
    [CompilerGeneratedAttribute]
private IInstantiatedClearableFilter <ExcludedNodesFilter>k__BackingField;
    public FilterId Id { get; }
    public FilterId ParentFilterId { get; }
    public ExpanderKey ExpanderKey { get; }
    public IDataProvider`1<IEnumerable`1<AppliedFilterValueModel>> FilteredValues { get; }
    public IDataProvider`1<bool> IsAvailable { get; }
    [CanBeNullAttribute]
public IDataSignal ProgressSource { get; }
    public Int32[] EventTypeDependencies { get; }
    public IDataProvider`1<bool> AreAwaitsEnabled { get; }
    public ICallTreeRootsStack RootStack { get; }
    public IInstantiatedClearableFilter ExcludedNodesFilter { get; }
    public InstantiatedCallTreeFilter`1(IDataProvider`1<IEnumerable`1<AppliedFilterValueModel>> filteredValues, ICallTreeRootsStack rootsStack, IDataProvider`1<bool> areAwaitsEnabled, IInstantiatedClearableFilter excludedNodesFilter);
    public sealed virtual FilterId get_Id();
    public sealed virtual FilterId get_ParentFilterId();
    public sealed virtual ExpanderKey get_ExpanderKey();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IEnumerable`1<AppliedFilterValueModel>> get_FilteredValues();
    public sealed virtual IDataProvider`1<bool> get_IsAvailable();
    public sealed virtual void Clear();
    public sealed virtual IDataSignal get_ProgressSource();
    public sealed virtual Int32[] get_EventTypeDependencies();
    public sealed virtual void AcceptVisitor(IInstantiatedFilterVisitor builder);
    [CompilerGeneratedAttribute]
public IDataProvider`1<bool> get_AreAwaitsEnabled();
    [CompilerGeneratedAttribute]
public ICallTreeRootsStack get_RootStack();
    [CompilerGeneratedAttribute]
public IInstantiatedClearableFilter get_ExcludedNodesFilter();
}
public class JetBrains.DotTrace.Features.Filtration.InstantiatedFilters.InstantiatedFilters : object {
    private IInstantiatedFilter[] myAllFilters;
    public InstantiatedFilters(IInstantiatedFilter[] allFilters);
    public void Visit(IInstantiatedFilterVisitor visitor);
}
public abstract class JetBrains.DotTrace.Features.Filtration.InstantiatedFilters.InstantiatedFilterVisitorBase : object {
    public virtual void EnumFilter(IInstantiatedEnumFilter`2<TKey, TPayload> instantiated);
    public virtual void RadioGroupFilter(IInstantiatedRadioGroupFilter`2<TKey, TPayload> instantiated);
    public virtual void CallTreeFilter(InstantiatedCallTreeFilter`1<TPayload> instantiated);
    public virtual void ToggleFilter(IInstantiatedToggleFilter`1<TPayload> instantiated);
    public virtual void RadioButtonFilter(IInstantiatedRadioButtonFilter`1<TPayload> instantiated);
    public virtual void YesNoFilter(IInstantiatedYesNoFilter`1<TPayload> instantiated);
    public sealed virtual void ClearableFilter(IInstantiatedClearableFilter instantiated);
}
public class JetBrains.DotTrace.Features.Filtration.InstantiatedFilters.InstantiatedSubsystemsFilter`1 : object {
    private IObservableSet`1<SubsystemKey> mySelectedSubsystems;
    private IDataProvider`1<SimpleSubsystemsCalculation`1<TPayload>> mySubsystemsFilterNotAppliedResult;
    [CompilerGeneratedAttribute]
private IDataProvider`1<IEnumerable`1<AppliedFilterValueModel>> <FilteredValues>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataSignal <ProgressSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<PresentablePayloads`2<SubsystemKey, TPayload>> <Payloads>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<IPayloadPresenters`1<TPayload>> <PayloadPresenter>k__BackingField;
    [CompilerGeneratedAttribute]
private PreviewTableDescriptor`2<SubsystemKey, TPayload> <TableDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservableSet`1<SubsystemKey> <ExcludedSubsystems>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<SubsystemKey, IDataProvider`1<FilterPresentationModel>> <FilteredValuePresenter>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<IPayloadNormalizer`1<TPayload>> <PayloadNormalizer>k__BackingField;
    public FilterId Id { get; }
    public FilterId ParentFilterId { get; }
    public ExpanderKey ExpanderKey { get; }
    public IDataProvider`1<IEnumerable`1<AppliedFilterValueModel>> FilteredValues { get; }
    public IDataProvider`1<bool> IsAvailable { get; }
    public IDataSignal ProgressSource { get; }
    public Int32[] EventTypeDependencies { get; }
    public IDataProvider`1<PresentablePayloads`2<SubsystemKey, TPayload>> Payloads { get; }
    public IDataProvider`1<IPayloadPresenters`1<TPayload>> PayloadPresenter { get; }
    public PreviewTableDescriptor`2<SubsystemKey, TPayload> TableDescriptor { get; }
    public IObservableSet`1<SubsystemKey> ExcludedSubsystems { get; }
    public IObservableSet`1<SubsystemKey> SelectedKeys { get; }
    public IDataProvider`1<IEnumerable`1<SubsystemKey>> AllKeys { get; }
    public Func`2<SubsystemKey, IDataProvider`1<FilterPresentationModel>> FilteredValuePresenter { get; }
    public IRemotableReference`1<IThreadSwitch`1<PresentablePayloads`2<SubsystemKey, TPayload>>> PayloadSwitch { get; }
    public IDataProvider`1<IPayloadNormalizer`1<TPayload>> PayloadNormalizer { get; }
    public InstantiatedSubsystemsFilter`1(IObservableSet`1<SubsystemKey> includedSubsystems, IDataProvider`1<SimpleSubsystemsCalculation`1<TPayload>> payloads, IDataProvider`1<IEnumerable`1<SubsystemFilterItem>> allItems, IDataProvider`1<IPayloadPresenters`1<TPayload>> payloadPresenter, IDataProvider`1<IPayloadNormalizer`1<TPayload>> payloadsNormalizer, IDataProvider`1<SimpleSubsystemsCalculation`1<TPayload>> subsystemsFilterNotAppliedResult, IObservableSet`1<SubsystemKey> excludedSubsystems);
    public sealed virtual FilterId get_Id();
    public sealed virtual FilterId get_ParentFilterId();
    public sealed virtual ExpanderKey get_ExpanderKey();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IEnumerable`1<AppliedFilterValueModel>> get_FilteredValues();
    public sealed virtual IDataProvider`1<bool> get_IsAvailable();
    public sealed virtual void Clear();
    [CompilerGeneratedAttribute]
public sealed virtual IDataSignal get_ProgressSource();
    public sealed virtual Int32[] get_EventTypeDependencies();
    public sealed virtual void AcceptVisitor(IInstantiatedFilterVisitor builder);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<PresentablePayloads`2<SubsystemKey, TPayload>> get_Payloads();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IPayloadPresenters`1<TPayload>> get_PayloadPresenter();
    [CompilerGeneratedAttribute]
public sealed virtual PreviewTableDescriptor`2<SubsystemKey, TPayload> get_TableDescriptor();
    public sealed virtual IDataProvider`1<ISubsystemProfileResult> BuildSubsystemsFilterNotAppliedResult(IDataProvider`1<ISubsystemProfile> currentProfile);
    private static ISubsystemProfileResult SubsystemProfileDataToResults(SimpleSubsystemsCalculation`1<TPayload> result, ISubsystemProfile currentProfile, IPayloadNormalizer`1<TPayload> normalizer);
    [CompilerGeneratedAttribute]
public sealed virtual IObservableSet`1<SubsystemKey> get_ExcludedSubsystems();
    public sealed virtual IObservableSet`1<SubsystemKey> get_SelectedKeys();
    public sealed virtual NameWithPayloadAndPercentsModel MergedItemModelGenerator(SubsystemKey key);
    public sealed virtual IDataProvider`1<IEnumerable`1<SubsystemKey>> get_AllKeys();
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<SubsystemKey, IDataProvider`1<FilterPresentationModel>> get_FilteredValuePresenter();
    public sealed virtual IRemotableReference`1<IThreadSwitch`1<PresentablePayloads`2<SubsystemKey, TPayload>>> get_PayloadSwitch();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IPayloadNormalizer`1<TPayload>> get_PayloadNormalizer();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Filtration.ModelRangeEx : object {
    [ExtensionAttribute]
public static bool IsTimestamp(ModelRange range);
}
internal class JetBrains.DotTrace.Features.Filtration.NamedAction : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <IsVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<string> <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<IconId> <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<string> <Hint>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<Action> <RunAction>k__BackingField;
    public IDataProvider`1<bool> IsVisible { get; }
    public IDataProvider`1<bool> IsEnabled { get; }
    public IDataProvider`1<string> Name { get; }
    public IDataProvider`1<IconId> Icon { get; }
    public IDataProvider`1<string> Hint { get; }
    public IDataProvider`1<Action> RunAction { get; }
    private NamedAction(IDataProvider`1<bool> isVisible, IDataProvider`1<bool> isEnabled, IDataProvider`1<IconId> icon, IDataProvider`1<string> name, IDataProvider`1<string> hint, IDataProvider`1<Action> runAction);
    public static INamedAction Build(IDataProvider`1<bool> isVisible, IconId icon, string hint, Action runAction);
    public static INamedAction Build(IDataProvider`1<bool> isVisible, IconId icon, IDataProvider`1<string> hint, Action runAction);
    private static INamedAction Build(IDataProvider`1<bool> isVisible, IDataProvider`1<bool> isEnabled, IDataProvider`1<IconId> icon, IDataProvider`1<string> hint, Action runAction);
    public static INamedAction Build(IDataProvider`1<bool> isVisible, string name, string hint, Action runAction);
    public static INamedAction Build(IDataProvider`1<bool> isVisible, IDataProvider`1<bool> isEnabled, string name, string hint, Action runAction);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<bool> get_IsVisible();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<bool> get_IsEnabled();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<string> get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IconId> get_Icon();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<string> get_Hint();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<Action> get_RunAction();
}
public class JetBrains.DotTrace.Features.Filtration.NameWithPayloadAndPercentsModel : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <HasPayload>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <IsPinned>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<Nullable`1<Percents>> <Percent>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<FilterPresentationModel> <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<string> <FormattedPayload>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <IsFaded>k__BackingField;
    public IDataProvider`1<bool> HasPayload { get; }
    public IDataProvider`1<bool> IsPinned { get; }
    public IDataProvider`1<Nullable`1<Percents>> Percent { get; }
    public IDataProvider`1<FilterPresentationModel> Name { get; }
    public IDataProvider`1<string> FormattedPayload { get; }
    public IDataProvider`1<bool> IsFaded { get; }
    public NameWithPayloadAndPercentsModel(IDataProvider`1<FilterPresentationModel> name, IDataProvider`1<string> formattedPayload, IDataProvider`1<Nullable`1<Percents>> percent, IDataProvider`1<bool> isFaded, IDataProvider`1<bool> hasPayload, IDataProvider`1<bool> isPinned);
    [CompilerGeneratedAttribute]
public IDataProvider`1<bool> get_HasPayload();
    [CompilerGeneratedAttribute]
public IDataProvider`1<bool> get_IsPinned();
    [CompilerGeneratedAttribute]
public IDataProvider`1<Nullable`1<Percents>> get_Percent();
    [CompilerGeneratedAttribute]
public IDataProvider`1<FilterPresentationModel> get_Name();
    [CompilerGeneratedAttribute]
public IDataProvider`1<string> get_FormattedPayload();
    [CompilerGeneratedAttribute]
public IDataProvider`1<bool> get_IsFaded();
}
public class JetBrains.DotTrace.Features.Filtration.NameWithPayloadModel : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<string> <FormattedPayload>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <IsFaded>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tooltip>k__BackingField;
    public string Name { get; }
    [CanBeNullAttribute]
public IDataProvider`1<string> FormattedPayload { get; }
    public IDataProvider`1<bool> IsFaded { get; }
    public string Tooltip { get; public set; }
    public NameWithPayloadModel(string name, IDataProvider`1<string> formattedPayload, IDataProvider`1<bool> isFaded);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public IDataProvider`1<string> get_FormattedPayload();
    [CompilerGeneratedAttribute]
public IDataProvider`1<bool> get_IsFaded();
    [CompilerGeneratedAttribute]
public string get_Tooltip();
    [CompilerGeneratedAttribute]
public void set_Tooltip(string value);
}
public class JetBrains.DotTrace.Features.Filtration.TimeFilterController : object {
    public IDataProvider`1<bool> CanClear;
    public Action Clear;
    public Action ClearAll;
}
public class JetBrains.DotTrace.Features.Filtration.ToggleFilterInfo : object {
    [CompilerGeneratedAttribute]
private NameWithPayloadModel <NameModel>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <IsSelected>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <Toggle>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<bool> <Select>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <IsEnabled>k__BackingField;
    public NameWithPayloadModel NameModel { get; }
    public IDataProvider`1<bool> IsSelected { get; }
    public Action Toggle { get; }
    public Action`1<bool> Select { get; }
    public IDataProvider`1<bool> IsEnabled { get; }
    public ToggleFilterInfo(NameWithPayloadModel nameModel, IDataProvider`1<bool> isSelected, Action toggle, Action`1<bool> select, IDataProvider`1<bool> isEnabled);
    [CompilerGeneratedAttribute]
public NameWithPayloadModel get_NameModel();
    [CompilerGeneratedAttribute]
public IDataProvider`1<bool> get_IsSelected();
    [CompilerGeneratedAttribute]
public Action get_Toggle();
    [CompilerGeneratedAttribute]
public Action`1<bool> get_Select();
    [CompilerGeneratedAttribute]
public IDataProvider`1<bool> get_IsEnabled();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Filtration.ViewModelExtensions : object {
    [ExtensionAttribute]
public static INotifyPropertyChanged AddColumnHeaders(object viewModel, IDataProvider`1<PayloadType> payloadType, IDataControllerContainer`1<SortMode> sortMode, FilterColumnSet columnSet);
    public static ColumnHeadersViewModel CreateColumnHeaders(IDataProvider`1<PayloadType> payloadPresenter, IDataControllerContainer`1<SortMode> sortMode, FilterColumnSet columnSet, bool canClearSort);
}
public static class JetBrains.DotTrace.Features.Goto.GoToSnapshotMethodControllerBuilder : object {
    public static GotoByNameController Create(Lifetime popupLifetime, IComponentContainer solutionContainer, IShellLocks locks);
}
public interface JetBrains.DotTrace.Features.Metadata.IMethodPrinter {
    public abstract virtual NamePair Print(FunctionUIDm key, Func`2<Lifetime, IMetadataReaderMerged> metadataReaderAccessor, Boolean& matchFound, IdentifierMatcher matcher);
}
[SettingsKeyAttribute("System.Reflection.Missing", "JetBrains.DotTrace.Features.Resources.Strings", "MetadataPresentationSettingsSettingDescription")]
public class JetBrains.DotTrace.Features.Metadata.MetadataPresentationSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.Features.Resources.Strings", "ShowFuidsSettingDescription")]
public bool ShowFuids;
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Metadata.MethodPrinterEx : object {
    [ExtensionAttribute]
public static NamePair Print(IMethodPrinter this, FunctionUIDm key, Func`2<Lifetime, IMetadataReaderMerged> metadataReaderAccessor);
}
public interface JetBrains.DotTrace.Features.MetadataWrappers.ISyntheticMethods {
}
public class JetBrains.DotTrace.Features.Modules.ModulesAssemblyNamePresentationBuilder : FormattedTextBufferBuilder`1<ModulesNodeData> {
    public ModulesAssemblyNamePresentationBuilder(bool collapseWhitespaces);
    public string GetString(ModulesNodeData data);
    protected virtual void Build(ModulesNodeData data);
}
public abstract class JetBrains.DotTrace.Features.Modules.ModulesCommonTreeBackendBase : object {
    [CompilerGeneratedAttribute]
private IAsyncDataProvider`1<ModulesTree> <CommonTree>k__BackingField;
    public IDataProxy`1<string> SearchText;
    [CompilerGeneratedAttribute]
private IDataProxy`1<Nullable`1<int>> <SelectedNodeModelIndex>k__BackingField;
    public IAsyncDataProvider`1<ModulesTree> CommonTree { get; }
    public IDataProxy`1<Nullable`1<int>> SelectedNodeModelIndex { get; }
    public IAsyncDataProvider`1<Nullable`1<TVoidStruct>> ProvidedSelectedNode { get; }
    protected ModulesCommonTreeBackendBase(IDataContainer`1<DataPipeLifetime> pipeLifetime, IProviderContainer`1<ModulesData> modulesContainer);
    [CompilerGeneratedAttribute]
public sealed virtual IAsyncDataProvider`1<ModulesTree> get_CommonTree();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProxy`1<Nullable`1<int>> get_SelectedNodeModelIndex();
    public sealed virtual IAsyncDataProvider`1<Nullable`1<TVoidStruct>> get_ProvidedSelectedNode();
    private static Func`2<ModulesNodeData, bool> MatchesPattern(string pattern);
}
public class JetBrains.DotTrace.Features.Modules.ModulesDebugReleasePresentationBuilder : FormattedTextBufferBuilder`1<ModulesNodeData> {
    public ModulesDebugReleasePresentationBuilder(bool collapseWhitespaces);
    public string GetString(ModulesNodeData data);
    protected virtual void Build(ModulesNodeData data);
}
public class JetBrains.DotTrace.Features.Modules.ModulesNodeData : ValueType {
    [CompilerGeneratedAttribute]
private int <ModelIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ParentModelIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ChildrenCount>k__BackingField;
    [CanBeNullAttribute]
public string AssemblyNameInfo;
    public FileSystemPath ModulePath;
    public string DebugRelease;
    public DebugInfoState DebugSymbolsState;
    public Guid AssemblyMvid;
    public bool IsSystem;
    public int ModelIndex { get; }
    public int ParentModelIndex { get; }
    public int ChildrenCount { get; }
    public ModulesNodeData(int modelIndex, int parentModelIndex, string assemblyNameInfo, FileSystemPath modulePath, string debugRelease, DebugInfoState debugSymbolsState, Guid assemblyMvid, bool isSystem);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual int get_ModelIndex();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual int get_ParentModelIndex();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual int get_ChildrenCount();
}
public class JetBrains.DotTrace.Features.Modules.ModulesPathPresentationBuilder : FormattedTextBufferBuilder`1<ModulesNodeData> {
    public ModulesPathPresentationBuilder(bool collapseWhitespaces);
    public string GetString(ModulesNodeData data);
    protected virtual void Build(ModulesNodeData data);
}
public enum JetBrains.DotTrace.Features.Modules.ModulesSortBy : Enum {
    public int value__;
    public static ModulesSortBy Name;
    public static ModulesSortBy Path;
    public static ModulesSortBy DebugRelease;
    public static ModulesSortBy DebugSymbols;
    public static ModulesSortBy Mvid;
    public static ModulesSortBy IsSystem;
}
public static class JetBrains.DotTrace.Features.Modules.ModulesSorter : object {
    public static IDataProvider`1<Comparison`1<ModulesNodeData>> Create(IDataProvider`1<ModulesSortBy> index, IDataProvider`1<ListSortDirection> direction);
    private static Comparison`1<ModulesNodeData> GetSortComparison(ModulesSortBy key);
}
public class JetBrains.DotTrace.Features.Modules.ModulesTree : TreeList`1<ModulesNodeData> {
}
public class JetBrains.DotTrace.Features.Modules.TVoidStruct : ValueType {
}
public class JetBrains.DotTrace.Features.NamespaceTree.FindFunctionController : GotoByNameController {
    private static int MaxPresentableItems;
    private IAdvancedMethodInfoProvider myAdvancedMethodInfoProvider;
    [CanBeNullAttribute]
private Func`2<FullMethodName, INamespaceTreeNode> myFindMethod;
    [CanBeNullAttribute]
private ISearchHistoryManager myHistoryManager;
    private SignatureTreeNodeComparer myComparer;
    private Property`1<bool> myIsCancelledAction;
    private SignatureTreeNodePredicate myCheckerFunctorFiltered;
    private bool myHighlightOccurrences;
    [CanBeNullAttribute]
private Func`1<IAggregatedPayloads> myAggregatedPayloadsGetter;
    private SignatureTreeNodePredicate myCheckerFunctorNormal;
    private GetItems myGetItems;
    [CompilerGeneratedAttribute]
private SearchAgainAction <OnClassFound>k__BackingField;
    [CompilerGeneratedAttribute]
private FoundAction <OnFoundAction>k__BackingField;
    private SearchAgainAction OnClassFound { get; public set; }
    private FoundAction OnFoundAction { get; public set; }
    public FindFunctionController(Lifetime lifetime, GotoByNameModel model, GetItems getItems, IAdvancedMethodInfoProvider methodInfoProvider, Func`2<FullMethodName, INamespaceTreeNode> findMethod, ISearchHistoryManager historyManager, SignatureTreeNodePredicate checkerFunctorNormal, SignatureTreeNodePredicate checkerFunctorFiltered, IShellLocks locks, bool highlightOccurrences, Func`1<IAggregatedPayloads> aggregatedPayloadsGetter);
    [CompilerGeneratedAttribute]
private SearchAgainAction get_OnClassFound();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_OnClassFound(SearchAgainAction value);
    [CompilerGeneratedAttribute]
private FoundAction get_OnFoundAction();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_OnFoundAction(FoundAction value);
    protected virtual bool UpdateItems(string pattern, Func`3<IEnumerable`1<JetPopupMenuItem>, AddItemsBehavior, bool> funcAddItems);
    [CanBeNullAttribute]
private IEnumerable`1<SearchResult> TreeItemsExceptHistoryItems(IdentifierMatcher matcher);
    [CanBeNullAttribute]
private IEnumerable`1<SearchResult> HistoryItems(IdentifierMatcher matcher);
    [CanBeNullAttribute]
private IEnumerable`1<SearchResult> TreeItems(IdentifierMatcher matcher);
    private INamespaceTreeNode[] ProcessNodes(IEnumerable`1<SearchResult> source, SignatureTreeNodePredicate currentChecker);
    protected virtual bool ExecuteItem(JetPopupMenuItem item, ISignal`1<bool> closeBeforeExecute);
    [CompilerGeneratedAttribute]
private bool <TreeItemsExceptHistoryItems>b__21_0(SearchResult pair);
    [CompilerGeneratedAttribute]
private bool <HistoryItems>b__22_0(SearchResult t);
}
public static class JetBrains.DotTrace.Features.NamespaceTree.FindFunctionHelpers : object {
    public static GotoByNameModel CreateGotoByNameModel(Lifetime lt, string initialText, bool isChecked);
    public static FindFunctionController CreateRiderFindFunctionController(Lifetime lifetime, string initialText, bool isChecked, GetItems getItems, IAdvancedMethodInfoProvider advancedMethodInfoProvider, ICallTreeCommandsExecutor commandsExecutor, IShellLocks shellLocks, Func`1<IAggregatedPayloads> aggregatedPayloadsGetter);
    [CompilerGeneratedAttribute]
internal static bool <CreateRiderFindFunctionController>g__Accept|1_0(INamespaceTreeNode node, Property`1<bool> cancelled);
    [CompilerGeneratedAttribute]
internal static bool <CreateRiderFindFunctionController>g__AcceptFiltered|1_1(INamespaceTreeNode node, Property`1<bool> cancelled);
}
public class JetBrains.DotTrace.Features.NamespaceTree.FoundAction : MulticastDelegate {
    public FoundAction(object object, IntPtr method);
    public virtual void Invoke(INamespaceTreeNode searchItem);
    public virtual IAsyncResult BeginInvoke(INamespaceTreeNode searchItem, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class JetBrains.DotTrace.Features.NamespaceTree.GetItems : MulticastDelegate {
    public GetItems(object object, IntPtr method);
    public virtual IEnumerable`1<SearchResult> Invoke(IdentifierMatcher matcher);
    public virtual IAsyncResult BeginInvoke(IdentifierMatcher matcher, AsyncCallback callback, object object);
    public virtual IEnumerable`1<SearchResult> EndInvoke(IAsyncResult result);
}
public interface JetBrains.DotTrace.Features.NamespaceTree.INamespaceTreeBuildingManager {
    [CanBeNullAttribute]
public ISnapshotNamespaceTree Tree { get; }
    public abstract virtual void ExecuteWithNamespaceTree(Action`1<ISnapshotNamespaceTree> action);
    public abstract virtual ISnapshotNamespaceTree get_Tree();
}
public interface JetBrains.DotTrace.Features.NamespaceTree.ISearchHistoryManager {
    public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual void AddHistoryItem(INamespaceTreeNode item);
    public abstract virtual bool Contains(INamespaceTreeNode treeItem);
    public abstract virtual IEnumerable`1<SearchResult> MatchItemsAgainst(IdentifierMatcher matcher);
}
public interface JetBrains.DotTrace.Features.NamespaceTree.ISnapshotNamespaceTreeBuilder {
    public IDataProvider`1<ICacheSource`1<Func`2<IExecutionController, SnapshotNamespaceTree>>> Result { get; }
    public abstract virtual IDataProvider`1<ICacheSource`1<Func`2<IExecutionController, SnapshotNamespaceTree>>> get_Result();
}
public static class JetBrains.DotTrace.Features.NamespaceTree.NamespaceTreeNodePresentationHelper : object {
    private static TextStyle ourGreyHighlightingStyle;
    private static TextStyle ourGreyTextStyle;
    private static TextStyle ourDefaultHighlightingStyle;
    private static NamespaceTreeNodePresentationHelper();
    public static IEnumerable`1<JetPopupMenuItem> BuildItemsPresentation(IAdvancedMethodInfoProvider infoProvider, INamespaceTreeNode[] historyItems, INamespaceTreeNode[] treeItems, Property`1<bool> isCanceledAction, IdentifierMatcher matcher, Func`2<FunctionUIDm, SearchPayload> getPayloadFunc);
    private static JetPopupMenuItem BuildSeparator();
    private static JetPopupMenuItem BuildHeader(string title);
    private static void FillDuplicateMap(IAdvancedMethodInfoProvider infoProvider, IEnumerable`1<INamespaceTreeNode> nodes, CountingSet`1<string> countingSet);
    private static string GetFullName(IAdvancedMethodInfoProvider infoProvider, INamespaceTreeNode node);
    [CanBeNullAttribute]
private static string GetModuleName(IAdvancedMethodInfoProvider infoProvider, INamespaceTreeNode treeNode, CountingSet`1<string> countingSet);
    private static JetPopupMenuItem BuildRepresentation(IAdvancedMethodInfoProvider infoProvider, INamespaceTreeNode treeNode, IdentifierMatcher matcher, Func`2<FunctionUIDm, SearchPayload> getPayloadFunc, CountingSet`1<string> countingSet);
    private static RichText ConstructPayload(SearchPayload searchPayload, bool showPercent);
    private static RichText ConstructPresentation(string shortName, string longName, string funParams, IdentifierMatcher matcher);
    private static RichText CreateRichText(IdentifierMatcher matcher, string name, TextStyle foreStyle, TextStyle highlightingStyle);
}
public class JetBrains.DotTrace.Features.NamespaceTree.SearchAgainAction : MulticastDelegate {
    public SearchAgainAction(object object, IntPtr method);
    public virtual void Invoke(string init, bool checkedBox);
    public virtual IAsyncResult BeginInvoke(string init, bool checkedBox, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public interface JetBrains.DotTrace.Features.OpenSnapshotDialog.IOpenTimelineSnapshotDialog {
    public abstract virtual FileSystemPath Show(IDataSink`1<SnapshotFilter> filterProvider);
}
public class JetBrains.DotTrace.Features.OpenSnapshotDialog.SnapshotFilter : object {
    public SnapshotType AllowedType;
    [CanBeNullAttribute]
private IImmutableSet`1<FileSystemPath> myExcludedSnapshots;
    public SnapshotFilter(SnapshotType allowedType, IEnumerable`1<FileSystemPath> excludedSnapshots);
    public bool IsSnapshotExcluded(FileSystemPath indexFilePath);
}
public enum JetBrains.DotTrace.Features.OpenSnapshotDialog.SnapshotType : Enum {
    public int value__;
    public static SnapshotType Everything;
    public static SnapshotType SamplingOnly;
    public static SnapshotType TracingOnly;
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Payloads.PayloadHelper : object {
    public static IDataProvider`1<TPayload> PayloadProvider(TKey key, IDataProvider`1<PresentablePayloads`2<TKey, TPayload>> payloads);
    public static IDataProvider`1<double> PayloadPercent(TKey key, IDataProvider`1<PresentablePayloads`2<TKey, TPayload>> payloads, IDataProvider`1<IPayloadNormalizer`1<TPayload>> presenterProvider);
    public static IDataProvider`1<string> FormattedPayloadProvider(IDataProvider`1<Pair`2<TPayload, IPayloadPresenter`1<TPayload>>> payload);
    private static string PresentPayloadWithoutZeroes(IPayloadPresenter`1<TPayload> presenter, TPayload value);
    [ExtensionAttribute]
public static IDataProvider`1<bool> HasPayload(IDataProvider`1<PresentablePayload`1<TPayload>> payloadProvider);
}
public class JetBrains.DotTrace.Features.PayloadsWrappers.FlatPayloadsComponent`2 : object {
    public IDataProxy`1<CallTreeRootPrefix> CurrentRootPrefix;
    public IDataProxy`1<CallTreePath> CallTreeModelSelection;
    public IDataProxy`1<CallTreePath[]> ExcludedPaths;
    public IDataProxy`1<bool> UseSplittedNodesAccessor;
    public IThreadSwitch`1<OwnPayloadsData`2<TPtr, TPayload>> CurrentOwnPayloads;
    public IDataProvider`1<FunctionPayloadsMap`2<FunctionUIDm, TPayload>> CurrentRootFunctionPayloads;
    public IDataProvider`1<SimpleSubsystemsCalculation`1<TPayload>> SubsystemFilterNotApplied;
    public IDataProvider`1<SimpleSubsystemsCalculation`1<TPayload>> PayloadsForRootSubsystemFilterNotApplied;
    public IDataProvider`1<CallTreePathWithAccessData`1<TPtr>> RootPathAndAccessData;
    public IDataProvider`1<FlatPayloads`2<FunctionUIDm, TPayload>> PayloadsForRootSubsystemFilterApplied;
    public IDataProvider`1<FlatPayloads`2<FunctionUIDm, TPayload>> PayloadsForCursorSubsystemFilterApplied;
    [CompilerGeneratedAttribute]
private IDataProvider`1<ITopMethodsMap`1<TPayload>> <Data>k__BackingField;
    public IDataProvider`1<ITopMethodsMap`1<TPayload>> Data { get; }
    protected FlatPayloadsComponent`2(IDataContainer`1<DataPipeLifetime> dataPipeLifetimeContainer, ICallTreePayloadsSource`2<TPtr, TPayload> callTreePayloadsComponent, SubsystemKeysSetComponent subsystemKeysSetComponent, ITopMethodsRemoteSettings topMethodsSettingsComponent, ICallTreePresentationRemoteSettings callTreePresentationSettings, IProviderContainer`1<ICallTreeAccessors`1<TPtr>> treeAccessorsContainer, IFlatPayloadsBuilder`3<TPtr, FunctionUIDm, TPayload> flatPayloadsBuilder, CallTreeFilterInputComponents`1<TPtr> remoteComponents, ICallTreeRootProvider`1<TPtr> callTreeRootProvider, IPlainListGroupBySource plainListGroupBySource, IProviderContainer`1<IRootsSplitter`1<TPtr>> rootsSplitterContainer);
    private static void FillTopMethodsMap(CallTreePathState path, IAccessor`1<IDataMapper`2<FunctionUIDm, bool>> functionSystemness, bool sortByTotal, bool showSystemFunctions, bool autoShowSystemFunctions, int maxElements, TopMethodsMap`1<TPayload> result, PayloadType payloadType, TPayload totalPayload, IEnumerable`1<KeyValuePair`2<FunctionUIDm, FunctionPayloads`1<TPayload>>> mergedFlatPayloads, IExecutionController controller);
    private static OwnPayloadsData`2<TPtr, TPayload> ToOwnPayloadsData(CallTreePayloadsData`2<TPtr, TPayload> p);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ITopMethodsMap`1<TPayload>> get_Data();
}
public class JetBrains.DotTrace.Features.Performance.Filtration.InstantiatedFilters.PerformanceSnapshotsFilter : object {
    private ISelectedSnapshotController mySelectedSnapshot;
    private IOpenTimelineSnapshotDialog myDialog;
    private ISnapshotDataContainerManager mySnapshotManager;
    private IDataSink`1<SnapshotFilter> mySnapshotFilter;
    [CompilerGeneratedAttribute]
private PreviewTableDescriptor`2<SnapshotInfoFilterPresentation, DotTracePayload> <TableDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<INamedAction> <AdditionalActions>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<PresentablePayloadsWithPresenter`2<SnapshotInfoFilterPresentation, DotTracePayload>> <Payloads>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<IEnumerable`1<AppliedFilterValueModel>> <FilteredValues>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataSignal <ProgressSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<IEnumerable`1<SnapshotInfoFilterPresentation>> <AllKeys>k__BackingField;
    public PreviewTableDescriptor`2<SnapshotInfoFilterPresentation, DotTracePayload> TableDescriptor { get; }
    public IEnumerable`1<INamedAction> AdditionalActions { get; }
    public IDataProvider`1<PresentablePayloadsWithPresenter`2<SnapshotInfoFilterPresentation, DotTracePayload>> Payloads { get; }
    public FilterId Id { get; }
    public FilterId ParentFilterId { get; }
    public ExpanderKey ExpanderKey { get; }
    public IDataProvider`1<IEnumerable`1<AppliedFilterValueModel>> FilteredValues { get; }
    public IDataProvider`1<bool> IsAvailable { get; }
    public IDataSignal ProgressSource { get; }
    public Int32[] EventTypeDependencies { get; }
    public IDataProvider`1<SnapshotInfoFilterPresentation> SelectedKey { get; }
    public IDataProvider`1<IEnumerable`1<SnapshotInfoFilterPresentation>> AllKeys { get; }
    public PerformanceSnapshotsFilter(IDataProvider`1<PresentablePayloadsWithPresenter`2<SingleSnapshotInfo, DotTracePayload>> payloadsProvider, IDataProvider`1<SingleSnapshotInfo[]> allSnapshots, IDataProvider`1<AllSnapshotsPresentation> presentationProvider, ISelectedSnapshotController selectedSnapshot, IOpenTimelineSnapshotDialog dialog, ISnapshotDataContainerManager snapshotManager, ISnapshotOrderProvider snapshotOrder, IDataSink`1<SnapshotFilter> snapshotFilter);
    private static SnapshotInfoFilterPresentation[] BuildPresentation(SingleSnapshotInfo[] snapshots, SnapshotOrder order, AllSnapshotsPresentation presentation);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Performance.Filtration.InstantiatedFilters.PerformanceSnapshotsFilter/<BuildExtraActions>d__6")]
private IEnumerable`1<INamedAction> BuildExtraActions(IDataProvider`1<int> snapshotsCount, IDataProvider`1<SnapshotOrder> snapshotOrderProvider);
    private void OpenExtraSnapshot();
    private void CloseExtraSnapshot();
    private void ChangeSnapshotsOrder();
    [CompilerGeneratedAttribute]
public sealed virtual PreviewTableDescriptor`2<SnapshotInfoFilterPresentation, DotTracePayload> get_TableDescriptor();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<INamedAction> get_AdditionalActions();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<PresentablePayloadsWithPresenter`2<SnapshotInfoFilterPresentation, DotTracePayload>> get_Payloads();
    public sealed virtual FilterId get_Id();
    public sealed virtual FilterId get_ParentFilterId();
    public sealed virtual ExpanderKey get_ExpanderKey();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IEnumerable`1<AppliedFilterValueModel>> get_FilteredValues();
    public sealed virtual IDataProvider`1<bool> get_IsAvailable();
    public sealed virtual void Clear();
    [CompilerGeneratedAttribute]
public sealed virtual IDataSignal get_ProgressSource();
    public sealed virtual Int32[] get_EventTypeDependencies();
    public sealed virtual void AcceptVisitor(IInstantiatedFilterVisitor builder);
    public sealed virtual IDataProvider`1<SnapshotInfoFilterPresentation> get_SelectedKey();
    public sealed virtual void ChangeSelection(SnapshotInfoFilterPresentation selection);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IEnumerable`1<SnapshotInfoFilterPresentation>> get_AllKeys();
}
public class JetBrains.DotTrace.Features.Performance.Filtration.InstantiatedFilters.PerformanceThreadFilter : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<IEnumerable`1<AppliedFilterValueModel>> <FilteredValues>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataSignal <ProgressSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<PresentablePayloads`2<ThreadName, DotTracePayload>> <Payloads>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<IPayloadPresenters`1<DotTracePayload>> <PayloadPresenter>k__BackingField;
    [CompilerGeneratedAttribute]
private PreviewTableDescriptor`2<ThreadName, DotTracePayload> <TableDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservableSet`1<ThreadName> <SelectedKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<IEnumerable`1<ThreadName>> <AllKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<ThreadName, IDataProvider`1<FilterPresentationModel>> <FilteredValuePresenter>k__BackingField;
    public FilterId Id { get; }
    public FilterId ParentFilterId { get; }
    public ExpanderKey ExpanderKey { get; }
    public IDataProvider`1<bool> IsAvailable { get; }
    public IDataProvider`1<IEnumerable`1<AppliedFilterValueModel>> FilteredValues { get; }
    public IDataSignal ProgressSource { get; }
    public Int32[] EventTypeDependencies { get; }
    public IDataProvider`1<PresentablePayloads`2<ThreadName, DotTracePayload>> Payloads { get; }
    public IDataProvider`1<IPayloadPresenters`1<DotTracePayload>> PayloadPresenter { get; }
    public IRemotableReference`1<IThreadSwitch`1<PresentablePayloads`2<ThreadName, DotTracePayload>>> PayloadSwitch { get; }
    public PreviewTableDescriptor`2<ThreadName, DotTracePayload> TableDescriptor { get; }
    public IObservableSet`1<ThreadName> SelectedKeys { get; }
    public IDataProvider`1<IEnumerable`1<ThreadName>> AllKeys { get; }
    public Func`2<ThreadName, IDataProvider`1<FilterPresentationModel>> FilteredValuePresenter { get; }
    public PerformanceThreadFilter(IDataProvider`1<PresentablePayloads`2<ThreadName, DotTracePayload>> payloads, IDataProvider`1<IPayloadPresenters`1<DotTracePayload>> payloadPresenter, IDataProvider`1<Dictionary`2<ThreadName, double>> allThreadsWithPower, IObservableSet`1<ThreadName> selectedThreads);
    public sealed virtual FilterId get_Id();
    public sealed virtual FilterId get_ParentFilterId();
    public sealed virtual ExpanderKey get_ExpanderKey();
    public sealed virtual IDataProvider`1<bool> get_IsAvailable();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IEnumerable`1<AppliedFilterValueModel>> get_FilteredValues();
    public sealed virtual void Clear();
    [CompilerGeneratedAttribute]
public sealed virtual IDataSignal get_ProgressSource();
    public sealed virtual Int32[] get_EventTypeDependencies();
    public sealed virtual void AcceptVisitor(IInstantiatedFilterVisitor builder);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<PresentablePayloads`2<ThreadName, DotTracePayload>> get_Payloads();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IPayloadPresenters`1<DotTracePayload>> get_PayloadPresenter();
    public sealed virtual IRemotableReference`1<IThreadSwitch`1<PresentablePayloads`2<ThreadName, DotTracePayload>>> get_PayloadSwitch();
    [CompilerGeneratedAttribute]
public sealed virtual PreviewTableDescriptor`2<ThreadName, DotTracePayload> get_TableDescriptor();
    [CompilerGeneratedAttribute]
public sealed virtual IObservableSet`1<ThreadName> get_SelectedKeys();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IEnumerable`1<ThreadName>> get_AllKeys();
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<ThreadName, IDataProvider`1<FilterPresentationModel>> get_FilteredValuePresenter();
    [CompilerGeneratedAttribute]
private AppliedFilterValueModel <.ctor>b__0_5(ThreadName key);
}
public class JetBrains.DotTrace.Features.Performance.Filtration.InstantiatedFilters.SnapshotInfoFilterPresentation : object {
    private static Dictionary`2<SnapshotDataId, string> ourIdPresentation;
    [NotNullAttribute]
public SingleSnapshotInfo SnapshotInfo;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tooltip>k__BackingField;
    [CanBeNullAttribute]
public string Name { get; }
    [CanBeNullAttribute]
public string Tooltip { get; }
    public SnapshotInfoFilterPresentation(SingleSnapshotInfo singleSnapshotInfo, SnapshotPresentationData presentationData, Nullable`1<SnapshotOrder> presentationType);
    private static SnapshotInfoFilterPresentation();
    private static string BuildSnapshotPrefix(SnapshotDataId snapshotDataId, SnapshotOrder snapshotOrder);
    public static string BuildComparisonIdPresentation(SnapshotOrder snapshotOrder);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Tooltip();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(SnapshotInfoFilterPresentation other);
    public sealed virtual bool Equals(SnapshotInfoFilterPresentation other);
}
public class JetBrains.DotTrace.Features.Performance.Filtration.OffsetFilters.AndOffsetFilter : object {
    private IOffsetFilter[] myFilters;
    public AndOffsetFilter(IOffsetFilter[] filters);
    public sealed virtual bool Match(CallTreeSectionOffset offset);
    public static IOffsetFilter Build(IOffsetFilter filter1, IOffsetFilter filter2);
}
public class JetBrains.DotTrace.Features.Performance.Filtration.OffsetFilters.ComparisonSnapshotDataFilter : object {
    private SnapshotDataId myId;
    private ComparisonSnapshotDataFilter(SnapshotDataId id);
    public sealed virtual bool Match(CallTreeSectionOffset offset);
    public static IOffsetFilter Build(SingleSnapshotInfo snapshotInfo);
}
public interface JetBrains.DotTrace.Features.Performance.Filtration.OffsetFilters.IOffsetFilter {
    public abstract virtual bool Match(CallTreeSectionOffset offset);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Performance.Filtration.OffsetFilters.OffsetFilterEx : object {
    [ExtensionAttribute]
public static RootAccessData`1<CallTreeSectionOffset> FilterRootAccessData(IOffsetFilter filter, RootAccessData`1<CallTreeSectionOffset> rootAccessData, List`1<CallTreeSectionOffset> recycledList);
}
public class JetBrains.DotTrace.Features.Performance.Filtration.OffsetFilters.PassEverythingOffsetFilter : object {
    public static IOffsetFilter Instance;
    private static PassEverythingOffsetFilter();
    public sealed virtual bool Match(CallTreeSectionOffset offset);
}
public class JetBrains.DotTrace.Features.Performance.Filtration.OffsetFilters.ThreadsDataFilter : object {
    private IDataMapper`2<CallTreeSectionOffset, ThreadName> myThreadsMapper;
    private JetHashSet`1<ThreadName> mySelection;
    private ThreadsDataFilter(IDataMapper`2<CallTreeSectionOffset, ThreadName> threadsMapper, JetHashSet`1<ThreadName> selection);
    public sealed virtual bool Match(CallTreeSectionOffset offset);
    public static IOffsetFilter Build(IDataMapper`2<CallTreeSectionOffset, ThreadName> threadsMapper, ThreadName[] selection);
}
public class JetBrains.DotTrace.Features.Performance.Inject.PerformanceMeasureNodeStorage : object {
    private PayloadMeasureNodeStorage`2<CallTreeSectionOffset, DotTraceFullPayload> myStorage;
    private IPayloadNormalizer`1<DotTracePayload> myNormalizer;
    public PerformanceMeasureNodeStorage(PayloadMeasureNodeStorage`2<CallTreeSectionOffset, DotTraceFullPayload> storage, IPayloadNormalizer`1<DotTracePayload> normalizer);
    public sealed virtual LineMeasures GetMeasureNodes(NavigationPath path, IExecutionController controller);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Performance.Payloads.PerformancePayloadsHelpers : object {
    [ExtensionAttribute]
public static IDataProvider`1<PresentablePayloadsWithPresenter`2<T, DotTracePayload>> ToPresentablePayloadsWithPresenter(IDataProvider`1<PayloadsMap`2<T, DotTracePayload>> payloadsMap, IDataProvider`1<Func`2<T, IPayloadPresenters`1<DotTracePayload>>> presenterFactory);
    [ExtensionAttribute]
public static IDataProvider`1<PresentablePayloads`2<T, DotTracePayload>> ToPresentablePayloads(IDataProvider`1<PayloadsMap`2<T, DotTracePayload>> payloadsMap);
}
public interface JetBrains.DotTrace.Features.PlainList.IPlainListGroupBySource {
    public IDataProxy`1<PlainListNodeType> GroupBy { get; }
    public abstract virtual IDataProxy`1<PlainListNodeType> get_GroupBy();
}
public interface JetBrains.DotTrace.Features.PlainList.ITreeListBackend`3 {
    public IAsyncDataProvider`1<TTreeList> CommonTree { get; }
    public IDataProxy`1<Nullable`1<int>> SelectedNodeModelIndex { get; }
    public IAsyncDataProvider`1<Nullable`1<TExtendedModel>> ProvidedSelectedNode { get; }
    public abstract virtual IAsyncDataProvider`1<TTreeList> get_CommonTree();
    public abstract virtual IDataProxy`1<Nullable`1<int>> get_SelectedNodeModelIndex();
    public abstract virtual IAsyncDataProvider`1<Nullable`1<TExtendedModel>> get_ProvidedSelectedNode();
}
public abstract class JetBrains.DotTrace.Features.PlainList.PlainListCommonTreeBackendBase`2 : object {
    private static ILogger ourLog;
    [CompilerGeneratedAttribute]
private IAsyncDataProvider`1<PlainListTree`1<TPayload>> <CommonTree>k__BackingField;
    public IDataProxy`1<string> SearchText;
    [CompilerGeneratedAttribute]
private IDataProxy`1<Nullable`1<int>> <SelectedNodeModelIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private IAsyncDataProvider`1<Nullable`1<PlainListNodeExtendedData`1<TPayload>>> <ProvidedSelectedNode>k__BackingField;
    public IAsyncDataProvider`1<PlainListTree`1<TPayload>> CommonTree { get; }
    public IDataProxy`1<Nullable`1<int>> SelectedNodeModelIndex { get; }
    public IAsyncDataProvider`1<Nullable`1<PlainListNodeExtendedData`1<TPayload>>> ProvidedSelectedNode { get; }
    protected PlainListCommonTreeBackendBase`2(IDataContainer`1<DataPipeLifetime> pipeLifetime, IMethodViewDataProvider methodViewDataAccessorProvider, ICacheProviderContainer`1<IAccessor`1<IMetadataManagerMerged>> metadataManagerAccessorProvider, IPlainListGroupBySource plainListGroupBySource, FlatPayloadsComponent`2<TPtr, TPayload> flatPayloadsComponent, ICacheProviderContainer`1<IFuidsMatcher> fuidsMatcherProvider, IProviderContainer`1<ICallTreeAccessors`1<TPtr>> callTreeAccessorsProvider, IFlatPayloadsBuilder`3<TPtr, FunctionUIDm, TPayload> flatPayloadsBuilder, IMethodViewDataProvider methodViewDataProvider, ITopMethodsRemoteSettings topMethodsSettingsComponent);
    private static PlainListCommonTreeBackendBase`2();
    [CompilerGeneratedAttribute]
public sealed virtual IAsyncDataProvider`1<PlainListTree`1<TPayload>> get_CommonTree();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProxy`1<Nullable`1<int>> get_SelectedNodeModelIndex();
    [CompilerGeneratedAttribute]
public sealed virtual IAsyncDataProvider`1<Nullable`1<PlainListNodeExtendedData`1<TPayload>>> get_ProvidedSelectedNode();
    private static Nullable`1<ValueTuple`3<CallTreePathState, AccessData`1<TPtr>, HashSet`1<FunctionUIDm>>> CreateAccessDataAndChildrenFuids(Nullable`1<PlainListNodeData`1<TPayload>> data, CallTreePathWithAccessData`1<TPtr> currentPathAndAccessData, IFuidsMatcher fuidsMatcher, ICallTreeAccessors`1<TPtr> callTreeAccessors, IExecutionController controller);
    private static Nullable`1<PlainListNodeExtendedData`1<TPayload>> CreatePlainListNodeExtendedData(Nullable`1<PlainListNodeData`1<TPayload>> data, FunctionPayloadsMap`2<FunctionUIDm, TPayload> payloads, HashSet`1<FunctionUIDm> fuids, Dictionary`2<FunctionUIDm, int> calledFunctionFuidToModelIndex, IAccessor`1<IDataMapper`2<FunctionUIDm, Nullable`1<MethodViewData>>> methodViewDataAccessor, CallTreePathState callTreePathState, IExecutionController controller);
    private static ValueTuple`2<INamespaceTreeNode, int> BuildNamespaceTree(FunctionPayloadsMap`2<FunctionUIDm, TPayload> mergedFlatPayloads, PlainListNodeType groupBy, IDataMapper`2<FunctionUIDm, Nullable`1<MethodViewData>> methodViewData, IMetadataManagerMerged metadataManager, bool showSystemFunctions, IExecutionController controller);
    private static void BuildTreeModel(Int32& indexCounter, int parentIndex, Func`2<INamespaceTreeNode, bool> addNonLeafNode, Func`2<PlainListNodeData`1<TPayload>, bool> filterPredicate, bool addDescendantsWithoutFiltering, INamespaceTreeNode node, FunctionPayloadsMap`2<FunctionUIDm, TPayload> flatPayloads, List`1<NodeInfo<TPtr, TPayload>> pathFromRoot, ChunkList`1<PlainListNodeData`1<TPayload>> list, Nullable`1<FunctionUIDm> fuidToGetPathFor, Nullable`1& selectedModelIndex, IExecutionController controller);
    private static Func`2<PlainListNodeData`1<TPayload>, bool> MatchesPattern(string pattern);
    [CompilerGeneratedAttribute]
internal static PlainListNodeData`1<TPayload> <BuildTreeModel>g__CreateGroupNode|18_0(INamespaceTreeNode node, int modelIndex, int parentIndex);
    [CompilerGeneratedAttribute]
internal static PlainListNodeData`1<TPayload> <BuildTreeModel>g__CreateLeafNode|18_1(INamespaceTreeNode node, int modelIndex, int parentIndex, <>c__DisplayClass18_0& );
    [CompilerGeneratedAttribute]
internal static void <BuildTreeModel>g__AddAllAncestorNodes|18_2(Int32& indexCounter, Int32& parentIndex, PlainListNodeData`1& node, <>c__DisplayClass18_0& );
    [CompilerGeneratedAttribute]
internal static void <BuildTreeModel>g__AddPayloadToAncestorsOf|18_3(int nodeIndex, FunctionPayloads`1<TPayload> payloadsToAdd, <>c__DisplayClass18_0& );
    [CompilerGeneratedAttribute]
internal static void <BuildTreeModel>g__UpdateParentNode|18_4(int parentNodeIndex, PlainListNodeData`1<TPayload> childNode, <>c__DisplayClass18_0& );
}
public class JetBrains.DotTrace.Features.PlainList.PlainListNodePresentationBuilder`1 : FormattedTextBufferBuilder`1<PlainListNodeData`1<TPayload>> {
    public PlainListNodePresentationBuilder`1(bool collapseWhitespaces);
    public string GetString(PlainListNodeData`1<TPayload> data);
    protected virtual void Build(PlainListNodeData`1<TPayload> data);
    private void AddNamespace(PlainListNodeData`1<TPayload> data);
    private void AddMethod(PlainListNodeData`1<TPayload> data);
}
public enum JetBrains.DotTrace.Features.PlainList.PlainListSortBy : Enum {
    public int value__;
    public static PlainListSortBy Name;
    public static PlainListSortBy Total;
    public static PlainListSortBy Average;
    public static PlainListSortBy Own;
    public static PlainListSortBy OwnPlusSystem;
    public static PlainListSortBy OwnDividedByTotal;
    public static PlainListSortBy Calls;
}
public static class JetBrains.DotTrace.Features.PlainList.PlainListSorter : object {
    public static IDataProvider`1<Comparison`1<PlainListNodeData`1<TPayload>>> Create(IDataProvider`1<PlainListSortBy> index, IDataProvider`1<ListSortDirection> direction, IDataProvider`1<Func`2<TPayload, long>> extractCallsProvider, IDataProvider`1<Func`3<TPayload, TPayload, double>> percentCalculator, IDataProvider`1<Func`3<TPayload, TPayload, double>> averageCalculator);
    private static Comparison`1<PlainListNodeData`1<TPayload>> GetSortComparison(PlainListSortBy key, Func`3<TPayload, TPayload, double> percentCalculator, Func`2<TPayload, long> extractCalls, Func`3<TPayload, TPayload, double> averageCalculator);
    [CompilerGeneratedAttribute]
internal static TPayload <GetSortComparison>g__TotalPayload|1_0(PlainListNodeData`1<TPayload> node);
}
public class JetBrains.DotTrace.Features.PlainList.PlainListTree`1 : TreeList`1<PlainListNodeData`1<TPayload>> {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.Features.Processing.Timeline.CachingStringWriter : object {
    private IDictionary`2<string, ulong> myMap;
    private IStringWriter myWriter;
    public CachingStringWriter(IStringWriter writer);
    private ulong WriteString(string s);
    private bool TryGetValue(string key, UInt64& result);
    [NullableContextAttribute("2")]
public sealed virtual ulong Write(string key);
}
public static class JetBrains.DotTrace.Features.Processing.Timeline.CommonMessagePresenters : object {
    private static ILogger ourLog;
    private static CommonMessagePresenters();
    public static string PresentCaughtException(CaughtException ex);
    public static string PresentWarning(Warning w);
    private static bool IsInTestMode();
    private static string MissingWarningText(WarningCase case, bool throwException);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Processing.Timeline.EnumPropertyToType : object {
    public static Dictionary`2<int, Type> Map;
    private static EnumPropertyToType();
    [ExtensionAttribute]
private static string GetLocalizedDescription(Enum singleFlagEnumValue);
    [ExtensionAttribute]
public static String[] GetEnumPresentableValues(ILogStorage logStorage, int eventId, int propertyId);
    [ExtensionAttribute]
public static String[] GetEnumPresentableValues(IEventPropertyDescriptor property);
}
public enum JetBrains.DotTrace.Features.Processing.Timeline.FileKey : Enum {
    public ulong value__;
}
public enum JetBrains.DotTrace.Features.Processing.Timeline.FileObject : Enum {
    public ulong value__;
}
public enum JetBrains.DotTrace.Features.Processing.Timeline.Framework.OnOffStates : Enum {
    public int value__;
    public static OnOffStates Off;
    public static OnOffStates On;
}
public enum JetBrains.DotTrace.Features.Processing.Timeline.GCDepth : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("JetBrains.DotTrace.DataStructures.Resources.UIResources", "Filters_BlockingGc_Depth_Enum_Gen0")]
public static GCDepth Gen0;
    [LocalizedDescriptionAttribute("JetBrains.DotTrace.DataStructures.Resources.UIResources", "Filters_BlockingGc_Depth_Enum_Gen1")]
public static GCDepth Gen1;
    [LocalizedDescriptionAttribute("JetBrains.DotTrace.DataStructures.Resources.UIResources", "Filters_BlockingGc_Depth_Enum_Gen2")]
public static GCDepth Gen2;
}
public enum JetBrains.DotTrace.Features.Processing.Timeline.GCReason : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("JetBrains.DotTrace.DataStructures.Resources.UIResources", "Filters_BlockingGc_Reason_Enum_SOH")]
public static GCReason SmallObjectHeapAllocation;
    [LocalizedDescriptionAttribute("JetBrains.DotTrace.DataStructures.Resources.UIResources", "Filters_BlockingGc_Reason_Enum_Induced")]
public static GCReason Induced;
    [LocalizedDescriptionAttribute("JetBrains.DotTrace.DataStructures.Resources.UIResources", "Filters_BlockingGc_Reason_Enum_LowMemory")]
public static GCReason LowMemory;
    [LocalizedDescriptionAttribute("JetBrains.DotTrace.DataStructures.Resources.UIResources", "Filters_BlockingGc_Reason_Enum_Empty")]
public static GCReason Empty;
    [LocalizedDescriptionAttribute("JetBrains.DotTrace.DataStructures.Resources.UIResources", "Filters_BlockingGc_Reason_Enum_LOH")]
public static GCReason LargeObjectHeapAllocation;
    [LocalizedDescriptionAttribute("JetBrains.DotTrace.DataStructures.Resources.UIResources", "Filters_BlockingGc_Reason_Enum_OOS_SOH")]
public static GCReason OutOfSpaceForSmallObjectHeap;
    [LocalizedDescriptionAttribute("JetBrains.DotTrace.DataStructures.Resources.UIResources", "Filters_BlockingGc_Reason_Enum_OOS_LOH")]
public static GCReason OutOfSpaceForLargeObjectHeap;
    [LocalizedDescriptionAttribute("JetBrains.DotTrace.DataStructures.Resources.UIResources", "Filters_BlockingGc_Reason_Enum_InducedNotForced")]
public static GCReason InducedButNotForcedAsBlocking;
    [LocalizedDescriptionAttribute("JetBrains.DotTrace.DataStructures.Resources.UIResources", "Filters_BlockingGc_Reason_Enum_Unknown")]
public static GCReason UnknownReason;
}
public enum JetBrains.DotTrace.Features.Processing.Timeline.GCType : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("JetBrains.DotTrace.DataStructures.Resources.UIResources", "Filters_Gc_Type_Enum_Blocking")]
public static GCType Blocking;
    [LocalizedDescriptionAttribute("JetBrains.DotTrace.DataStructures.Resources.UIResources", "Filters_Gc_Type_Enum_Background")]
public static GCType Background;
    [LocalizedDescriptionAttribute("JetBrains.DotTrace.DataStructures.Resources.UIResources", "Filters_Gc_Type_Enum_BlockingDuringBackground")]
public static GCType BlockingDuringBackground;
    [LocalizedDescriptionAttribute("JetBrains.DotTrace.DataStructures.Resources.UIResources", "Filters_Gc_Type_Enum_Unknown")]
public static GCType Unknown;
}
[LocalizableAttribute("False")]
public class JetBrains.DotTrace.Features.Processing.Timeline.Layers.Base.CallStackLogger : object {
    private CallTreeWithStoragesWriter myTreeReader;
    private Func`2<FunctionUID, CallFrameInfo> myCallFrameInfoMapper;
    private Func`2<FunctionUID, Nullable`1<ModuleInfo>> myModuleInfoMapper;
    public CallStackLogger(CallTreeWithStoragesWriter treeReader, Func`2<FunctionUID, CallFrameInfo> callFrameInfoMapper, Func`2<FunctionUID, Nullable`1<ModuleInfo>> moduleInfoMapper);
    public void AppendCallStack(StringBuilder sb, CallStackPtr ptr, int emptySpaces);
    public void AppendCallFrames(StringBuilder sb, CallStackPtr ptr, Func`3<CallTreeWithStoragesWriter, CallStackPtr, IEnumerable`1<UInt32>> getPtrs, int emptySpaces);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Processing.Timeline.Layers.Base.CallStackLoggerEx : object {
    [ExtensionAttribute]
public static string PrintCallStack(CallStackLogger this, CallStackPtr ptr, int emptySpaces);
}
public static class JetBrains.DotTrace.Features.Processing.Timeline.Layers.Base.CallStackSample : object {
    public static EventTypeDescriptor CreateSampleDescriptor(KnownEventTypes eventType);
}
public static class JetBrains.DotTrace.Features.Processing.Timeline.Layers.Base.LayerDescriptors : object {
    public static LayerDescriptor CreateStatesForEnum(KnownLayers id);
}
public enum JetBrains.DotTrace.Features.Processing.Timeline.Layers.Base.RuntimeSuspendStates : Enum {
    public int value__;
    public static RuntimeSuspendStates Running;
    public static RuntimeSuspendStates GCSuspend;
    public static RuntimeSuspendStates OtherSuspend;
}
public enum JetBrains.DotTrace.Features.Processing.Timeline.Layers.Base.SubmitterId : Enum {
    public int value__;
    public static SubmitterId AsyncAwaitAPI;
    public static SubmitterId TaskAPI;
}
public class JetBrains.DotTrace.Features.Processing.Timeline.Layers.CallTreeWithStoragesWriter : object {
    private ChunkListCompactTreeWriter myTreeWriter;
    private ChunkList`1<StaticNodeFlags> myInfoBytesMemory;
    private ChunkList`1<NodeTruncatedInfo> myTruncationInfoMemory;
    public UInt32 NullPtr { get; }
    public UInt32 RootPtr { get; }
    private CallTreeWithStoragesWriter(ChunkListCompactTreeWriter treeWriter, ChunkList`1<StaticNodeFlags> infoBytesMemory, ChunkList`1<NodeTruncatedInfo> truncationInfoMemory);
    public StaticNodeFlags GetStaticFlags(UInt32 ptr);
    public NodeTruncatedInfo GetTruncatedInfo(UInt32 ptr);
    public sealed virtual UInt32 GetParent(UInt32 treeNodePtr);
    public sealed virtual UInt32 GetNextSibling(UInt32 treeNodePtr);
    public sealed virtual UInt32 GetFirstChild(UInt32 treeNodePtr);
    public sealed virtual UInt32 get_NullPtr();
    public sealed virtual ulong ReadKey(UInt32 treeNodePtr);
    public sealed virtual UInt32 ReadPayload(UInt32 treeNodePtr, int index);
    public sealed virtual UInt32 get_RootPtr();
    public sealed virtual IEnumerable`1<UInt32> EnumerateAllNodes(UInt32 nodeSize);
    public UInt32 AddChild(UInt32 parentPtr, ulong key);
    private UInt32 CreateDefaultData(UInt32 parentPtr, UInt32 newPtr);
    private void CreateDefaultTruncatedInfo(UInt32 parent, UInt32 node);
    private void CreateDefaultNodeFlags(UInt32 parent, UInt32 node);
    public static CallTreeWithStoragesWriter Create(CallTreeData callTreeData);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Processing.Timeline.Layers.CallTreeWithStoragesWriterEx : object {
    [ExtensionAttribute]
public static bool AddKeyIfNotExist(CallTreeWithStoragesWriter writer, UInt32 parentIndex, ulong key, UInt32& nodeIndex);
    [ExtensionAttribute]
private static Nullable`1<UInt32> FindExistingChildByKey(CallTreeWithStoragesWriter tree, UInt32 parentIndex, ulong targetKey);
    [ExtensionAttribute]
public static UInt32 AddBranch(CallTreeWithStoragesWriter writer, UInt32 parentIndex, Span`1<ulong> fuidsToWrite, List`1<UInt32> newIndices);
    [ExtensionAttribute]
public static UInt32 AddBranch(CallTreeWithStoragesWriter writer, UInt32 parentIndex, Span`1<ulong> fuidsToWrite);
    [ExtensionAttribute]
public static UInt32 AddBranch(CallTreeWithStoragesWriter writer, UInt32 parentIndex, List`1<ulong> fuidsToWrite);
    [ExtensionAttribute]
public static List`1<ulong> GetFuidsPathToRoot(CallTreeWithStoragesWriter tree, UInt32 ptr, List`1<ulong> result);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.Layers.CallTreeWithStoragesWriterEx/<GetPathToRoot>d__6")]
[ExtensionAttribute]
public static IEnumerable`1<UInt32> GetPathToRoot(CallTreeWithStoragesWriter tree, UInt32 ptr);
    [ExtensionAttribute]
public static FunctionUID ReadKey(CallTreeWithStoragesWriter reader, CallStackPtr callStack);
}
public static class JetBrains.DotTrace.Features.Processing.Timeline.Layers.EventTypeSummaryLayerDef : object {
    private static int MinTracedStatesNum;
    private static int MaxTracedStatesNum;
    public static int CreateEventType(int trackedStatesNum);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.Layers.EventTypeSummaryLayerDef/<GetEvents>d__3")]
public static IEnumerable`1<EventTypeDescriptor> GetEvents();
    public static EventTypeDescriptor GetEvents(int trackedStatesNum);
    public static LayerDescriptor GetLayer(KnownLayers layerId, KnownEventTypes[] eventTypes);
}
public enum JetBrains.DotTrace.Features.Processing.Timeline.Layers.RunWait : Enum {
    public int value__;
    public static RunWait Run;
    public static RunWait Wait;
    public static RunWait Dead;
}
public class JetBrains.DotTrace.Features.Processing.Timeline.LocalizedDescriptionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <ResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TextResourceName>k__BackingField;
    public Type ResourceType { get; }
    public string TextResourceName { get; }
    public LocalizedDescriptionAttribute(Type resourceType, string textResourceName);
    [CompilerGeneratedAttribute]
public Type get_ResourceType();
    [CompilerGeneratedAttribute]
public string get_TextResourceName();
}
[IsReadOnlyAttribute]
public class JetBrains.DotTrace.Features.Processing.Timeline.ProcessId : ValueType {
    [CompilerGeneratedAttribute]
private UInt32 <Raw>k__BackingField;
    public UInt32 Raw { get; public set; }
    public ProcessId(UInt32 Raw);
    [CompilerGeneratedAttribute]
public UInt32 get_Raw();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Raw(UInt32 value);
    public static ProcessId op_Explicit(UInt32 value);
    public sealed virtual int CompareTo(ProcessId other);
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(object obj);
    public static bool op_LessThan(ProcessId left, ProcessId right);
    public static bool op_GreaterThan(ProcessId left, ProcessId right);
    public static bool op_LessThanOrEqual(ProcessId left, ProcessId right);
    public static bool op_GreaterThanOrEqual(ProcessId left, ProcessId right);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ProcessId left, ProcessId right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ProcessId left, ProcessId right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ProcessId other);
    [CompilerGeneratedAttribute]
public void Deconstruct(UInt32& Raw);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.Features.Processing.Timeline.SnapshotProcessingException : Exception {
    public SnapshotProcessingException(string message);
    protected SnapshotProcessingException(SerializationInfo info, StreamingContext context);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.SnapshotProcessingPipe : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<string> <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private IListEvents`1<Message> <Messages>k__BackingField;
    [CompilerGeneratedAttribute]
private ProgressProvider <Progress>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<ConvertedSnapshot> <ConvertedSnapshot>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <ReadyToActivateConverted>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <HasWarnings>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <FinishedNoErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataController`1<bool> <ActivateDespiteWarnings>k__BackingField;
    public IDataProvider`1<string> Header { get; private set; }
    public IListEvents`1<Message> Messages { get; }
    public ProgressProvider Progress { get; }
    public IDataProvider`1<ConvertedSnapshot> ConvertedSnapshot { get; }
    public IDataProvider`1<bool> ReadyToActivateConverted { get; }
    public IDataProvider`1<bool> HasWarnings { get; }
    public IDataProvider`1<bool> FinishedNoErrors { get; }
    public IDataController`1<bool> ActivateDespiteWarnings { get; }
    public SnapshotProcessingPipe(Lifetime lifetime, ProcessingContext`1<ConvertedSnapshot> processingContext);
    [CompilerGeneratedAttribute]
public IDataProvider`1<string> get_Header();
    [CompilerGeneratedAttribute]
private void set_Header(IDataProvider`1<string> value);
    [CompilerGeneratedAttribute]
public IListEvents`1<Message> get_Messages();
    [CompilerGeneratedAttribute]
public ProgressProvider get_Progress();
    [CompilerGeneratedAttribute]
public IDataProvider`1<ConvertedSnapshot> get_ConvertedSnapshot();
    [CompilerGeneratedAttribute]
public IDataProvider`1<bool> get_ReadyToActivateConverted();
    [CompilerGeneratedAttribute]
public IDataProvider`1<bool> get_HasWarnings();
    [CompilerGeneratedAttribute]
public IDataProvider`1<bool> get_FinishedNoErrors();
    [CompilerGeneratedAttribute]
public IDataController`1<bool> get_ActivateDespiteWarnings();
}
public class JetBrains.DotTrace.Features.Processing.Timeline.SnapshotVersionException : Exception {
    [CompilerGeneratedAttribute]
private VersionCheckVerdict <Verdict>k__BackingField;
    public VersionCheckVerdict Verdict { get; }
    public SnapshotVersionException(VersionCheckVerdict verdict);
    [NullableContextAttribute("1")]
protected SnapshotVersionException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public VersionCheckVerdict get_Verdict();
}
public static class JetBrains.DotTrace.Features.Processing.Timeline.TestSnapshotUtils : object {
    public static ISnapshotStorage ReadRawSnapshot(Lifetime lifetime, string path);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.ActivatingThread : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Tick>k__BackingField;
    [CompilerGeneratedAttribute]
private ThreadId <ActivatingThreadId>k__BackingField;
    public ulong Tick { get; public set; }
    public ThreadId ActivatingThreadId { get; public set; }
    public ActivatingThread(ulong Tick, ThreadId ActivatingThreadId);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual ulong get_Tick();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tick(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ThreadId get_ActivatingThreadId();
    [CompilerGeneratedAttribute]
public void set_ActivatingThreadId(ThreadId value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ActivatingThread left, ActivatingThread right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ActivatingThread left, ActivatingThread right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ActivatingThread other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(UInt64& Tick, ThreadId& ActivatingThreadId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.AwaitEventsLayer : object {
    private static ILogger ourLog;
    private static AwaitEventsLayer();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.AwaitEventsLayer/<Write>d__1")]
public static Task`1<WrittenLayerInfo> Write(Lifetime lifetime, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<ReattachResult> tplReattachTask, Task`1<CallTreePtrToDfsNodePtr> mapTask, FileSystemPath convertedPath, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.AwaitEventsLayer/<WriteOrThrow>d__2")]
public static Task`1<WrittenLayerInfo> WriteOrThrow(Lifetime lifetime, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<ReattachResult> tplReattachTask, Task`1<CallTreePtrToDfsNodePtr> mapTask, FileSystemPath convertedPath);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.AwaitEventsLayer/<GetPropertyDescriptors>d__3")]
private static IEnumerable`1<EventPropertyDescriptor> GetPropertyDescriptors();
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.AwaitInfo : ValueType {
    [CompilerGeneratedAttribute]
private TaskId <AwaitedTaskId>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <SubmitTick>k__BackingField;
    [CompilerGeneratedAttribute]
private ThreadId <SubmitThread>k__BackingField;
    [CompilerGeneratedAttribute]
private SubmitterId <SubmitterId>k__BackingField;
    public TaskId AwaitedTaskId { get; public set; }
    public ulong SubmitTick { get; public set; }
    public ThreadId SubmitThread { get; public set; }
    public SubmitterId SubmitterId { get; public set; }
    public AwaitInfo(TaskId AwaitedTaskId, ulong SubmitTick, ThreadId SubmitThread, SubmitterId SubmitterId);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public TaskId get_AwaitedTaskId();
    [CompilerGeneratedAttribute]
public void set_AwaitedTaskId(TaskId value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_SubmitTick();
    [CompilerGeneratedAttribute]
public void set_SubmitTick(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ThreadId get_SubmitThread();
    [CompilerGeneratedAttribute]
public void set_SubmitThread(ThreadId value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public SubmitterId get_SubmitterId();
    [CompilerGeneratedAttribute]
public void set_SubmitterId(SubmitterId value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(AwaitInfo left, AwaitInfo right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(AwaitInfo left, AwaitInfo right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(AwaitInfo other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(TaskId& AwaitedTaskId, UInt64& SubmitTick, ThreadId& SubmitThread, SubmitterId& SubmitterId);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.BinaryWriterEx : object {
    [ExtensionAttribute]
public static IDisposable Mark(BinaryWriter writer);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.CallStackEvent : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Tick>k__BackingField;
    [CompilerGeneratedAttribute]
private CallStackPtr <Ptr>k__BackingField;
    public ulong Tick { get; public set; }
    public CallStackPtr Ptr { get; public set; }
    public CallStackEvent(ulong Tick, CallStackPtr Ptr);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual ulong get_Tick();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tick(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public CallStackPtr get_Ptr();
    [CompilerGeneratedAttribute]
public void set_Ptr(CallStackPtr value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(CallStackEvent left, CallStackEvent right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(CallStackEvent left, CallStackEvent right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(CallStackEvent other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(UInt64& Tick, CallStackPtr& Ptr);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.CallStacksAndTree : ValueType {
    [CompilerGeneratedAttribute]
private Dictionary`2<ThreadId, ChunkList`1<CallStackEvent>> <CallStacks>k__BackingField;
    [CompilerGeneratedAttribute]
private CallTreeData <CallTree>k__BackingField;
    public Dictionary`2<ThreadId, ChunkList`1<CallStackEvent>> CallStacks { get; public set; }
    public CallTreeData CallTree { get; public set; }
    public CallStacksAndTree(Dictionary`2<ThreadId, ChunkList`1<CallStackEvent>> CallStacks, CallTreeData CallTree);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Dictionary`2<ThreadId, ChunkList`1<CallStackEvent>> get_CallStacks();
    [CompilerGeneratedAttribute]
public void set_CallStacks(Dictionary`2<ThreadId, ChunkList`1<CallStackEvent>> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public CallTreeData get_CallTree();
    [CompilerGeneratedAttribute]
public void set_CallTree(CallTreeData value);
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(CallStacksAndTree left, CallStacksAndTree right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(CallStacksAndTree left, CallStacksAndTree right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(CallStacksAndTree other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(Dictionary`2& CallStacks, CallTreeData& CallTree);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.CallStacksEx : object {
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.CallStacksEx/<MapDistinctOrThrow>d__0")]
public static Task`1<Dictionary`2<ThreadId, ChunkList`1<DfsCallStackEvent>>> MapDistinctOrThrow(Task`1<Dictionary`2<ThreadId, ChunkList`1<CallStackEvent>>> inputTask, Task`1<CallTreePtrToDfsNodePtr> mapTask);
    private static DfsCallStackEvent ToDfsEvent(CallStackEvent callStackEvent, CallTreePtrToDfsNodePtr map);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.CallStacksExpander : object {
    private static ILogger ourLog;
    private static CallStacksExpander();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.CallStacksExpander/<ProcessOrThrow>d__1")]
public static Task`1<Dictionary`2<ThreadId, ChunkList`1<CallStackEvent>>> ProcessOrThrow(Task`1<Dictionary`2<ThreadId, Chunks`1<Expand>>> cutOffByThreadsRanges, Task`1<Dictionary`2<ThreadId, ChunkList`1<CallStackEvent>>> kernelConvertCallStacksTask);
    private static Dictionary`2<ThreadId, ChunkList`1<CallStackEvent>> ExpandCallStacksStage(Dictionary`2<ThreadId, ChunkList`1<CallStackEvent>> stacksMap, Dictionary`2<ThreadId, Chunks`1<Expand>> expandInfoMap, Int32& totalIterations);
    [ConditionalAttribute("JET_MODE_ASSERT")]
private static void ReportLostStacks(ThreadId threadId, ChunkList`1<CallStackEvent> threadStacks);
    private static ChunkList`1<CallStackEvent> ExpanderProcessThread(ThreadId threadId, Chunks`1<Expand> expandInfo, ChunkList`1<CallStackEvent> rawStacks, Int32& iterations);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.CallStacksRepairer : object {
    private static ILogger ourLog;
    private static CallStacksRepairer();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.CallStacksRepairer/<Process>d__1")]
public static Task`1<CallStacksAndTree> Process(Task`1<CallStacksAndTree> callStacksTask, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.CallStacksRepairer/<ProcessOrThrow>d__2")]
public static Task`1<CallStacksAndTree> ProcessOrThrow(Task`1<CallStacksAndTree> callStacksTask);
    private static bool IsGood(CallTreeWithStoragesWriter treeWriter, CallStackPtr cs);
    private static ulong CallStackCommonAncestor(CallTreeWithStoragesWriter treeWriter, ulong ptr1, ulong ptr2);
}
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.CallStacksRootsFixer : object {
    [NullableAttribute("1")]
private static LengthDescPositionAscRelationalComparer ourIntervalComparer;
    private static CallStacksRootsFixer();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.CallStacksRootsFixer/<Process>d__0")]
public static Task`1<CallStacksAndTree> Process(Task`1<CallStacksAndTree> callStacksAndTree, Task`1<bool> allowOneFrameCallstacksTask, Action`1<Message> onMessage);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.CallStacksRootsFixer/<ProcessOrThrow>d__2")]
public static Task`1<CallStacksAndTree> ProcessOrThrow(Task`1<CallStacksAndTree> callStacksAndTree, Task`1<bool> allowOneFrameCallstacksTask);
    [NullableContextAttribute("1")]
private static void GetBranch(CallTreeWithStoragesWriter treeWriter, UInt32 uintCs, NodeTruncatedInfo truncationInfo, bool takeWholeBranch, Branch output);
    private static bool IsMatchAcceptable(Interval best, Interval secondBest);
    private static void TwoBestMatches(Span`1<ulong> leftFuids, Span`1<ulong> rightFuids, List`1<Interval> intervals, Interval& firstBest, Interval& secondBest);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.CallTreePreprocessor : object {
    private static ILogger ourLog;
    private static CallTreePreprocessor();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.CallTreePreprocessor/<PreprocessCallTreeOrThrow>d__2")]
public static Task`1<Result> PreprocessCallTreeOrThrow(Lifetime lifetime, ISnapshotStorage snapshotStorage, Task`1<Dictionary`2<ThreadId, UInt32>> threadRootsTask, IProgressIndicator controller);
    private static Result Process(Lifetime lifetime, CompactTreeReader callTreeReader, int sourceTreeNodesCount, HashSet`1<UInt32> threadRoots, IProgressIndicator controller);
    private static bool UnderABadRoot(HashSet`1<UInt32> threadRoots, Frame frame, FunctionUID fuid);
    private static CompactTreeNodeReference ComposeReference(CompactTreeReader tree, ICompactTreePtrToIndexConverter ptrToIndexConverter, UInt32 treePtr);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.CallTreePtrToDfsNodePtr : object {
    [CompilerGeneratedAttribute]
private ChunkList`1<DfsNodePtr> <ptrToDfsMap>P;
    [CompilerGeneratedAttribute]
private Dictionary`2<UInt32, DfsNodePtr> <fakeLeafPtrToDfsMap>P;
    public DfsNodePtr Item { get; }
    public CallTreePtrToDfsNodePtr(ChunkList`1<DfsNodePtr> ptrToDfsMap, Dictionary`2<UInt32, DfsNodePtr> fakeLeafPtrToDfsMap);
    public DfsNodePtr get_Item(CallStackPtr ptr);
}
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.CallTreeWriter : object {
    [NullableAttribute("1")]
private static ILogger ourLog;
    private static CallTreeWriter();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.CallTreeWriter/<ProcessOrThrow>d__2")]
public static Task`1<WriteResult> ProcessOrThrow(Task`1<CallTreeData> callTreeTask, FileSystemPath convertedDir);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.ClrThreadsDetector : object {
    private static ILogger ourLog;
    private static ClrThreadsDetector();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ClrThreadsDetector/<Process>d__1")]
public static Task`1<HashSet`1<ThreadId>> Process(Task`1<CallStacksAndTree> callStacksAndTree, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ClrThreadsDetector/<ProcessOrThrow>d__2")]
public static Task`1<HashSet`1<ThreadId>> ProcessOrThrow(Task`1<CallStacksAndTree> callStacksAndTree);
}
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.ContentionsLayer : object {
    public static void HandleContentionStart(ThreadId threadId, ulong tick, Dictionary`2<ThreadId, Chunks`1<Expand>> expandInfo, HashSet`1<ThreadId> stopContentionExpectingThreads, Dictionary`2<ThreadId, ChunkList`1<SubsystemOnOffEvent>> contentionSubsystemEvents);
    public static void HandleContentionStop(ThreadId threadId, ulong tick, Dictionary`2<ThreadId, Chunks`1<Expand>> expandInfo, HashSet`1<ThreadId> stopContentionExpectingThreads, Dictionary`2<ThreadId, ChunkList`1<SubsystemOnOffEvent>> contentionSubsystemEvents);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.CpuDispatcherLayer : object {
    private static EventTypeDescriptor WaitDescriptor;
    private static int ourRelatedThreadIndex;
    private static EventPropertyDescriptor ourWaitReasonProperty;
    private static CpuDispatcherLayer();
    public static LayerDescriptor GetLayer();
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.CpuDispatcherLayer/<GetEvents>d__6")]
public static IEnumerable`1<EventTypeDescriptor> GetEvents();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.CutOffEvents : object {
    private static ILogger ourLog;
    private static CutOffEvents();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.CutOffEvents/<ThreadStates>d__1")]
public static Task`1<Dictionary`2<ThreadId, ThreadStateChangeInfo>> ThreadStates(Task`1<Dictionary`2<ThreadId, ThreadStateChangeInfo>> kernelThreadStateInfo, Task`1<Dictionary`2<ThreadId, ChunkList`1<ThreadLifetimeChange>>> threadLifetimesTask, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.CutOffEvents/<ThreadStatesOrThrow>d__2")]
private static Task`1<Dictionary`2<ThreadId, ThreadStateChangeInfo>> ThreadStatesOrThrow(Task`1<Dictionary`2<ThreadId, ThreadStateChangeInfo>> kernelThreadStateInfo, Task`1<Dictionary`2<ThreadId, ChunkList`1<ThreadLifetimeChange>>> threadLifetimesTask);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.CutOffEvents/<ExpandEventsOrThrow>d__3")]
public static Task`1<Dictionary`2<ThreadId, Chunks`1<Expand>>> ExpandEventsOrThrow(Task`1<Dictionary`2<ThreadId, Chunks`1<Expand>>> kernelAndRundownEvents, Task`1<Result> threadLifetimesTask, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.CutOffEvents/<ExpandEventsOrThrow>d__4")]
private static Task`1<Dictionary`2<ThreadId, Chunks`1<Expand>>> ExpandEventsOrThrow(Task`1<Dictionary`2<ThreadId, Chunks`1<Expand>>> kernelAndRundownEvents, Task`1<Result> threadLifetimesTask);
    [NullableContextAttribute("0")]
private static ValueTuple`2<Nullable`1<ulong>, Nullable`1<ulong>> GetStartAndStopTick(ChunkList`1<ThreadLifetimeChange> threadLifetime);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.CutOffEvents/<GCEvents>d__6")]
public static Task`1<Dictionary`2<ThreadId, GCInfo>> GCEvents(Task`1<Dictionary`2<ThreadId, GCInfo>> gcEvents, Task`1<Dictionary`2<ThreadId, ChunkList`1<ThreadLifetimeChange>>> threadLifetimesTask, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.CutOffEvents/<GCEventsOrThrow>d__7")]
public static Task`1<Dictionary`2<ThreadId, GCInfo>> GCEventsOrThrow(Task`1<Dictionary`2<ThreadId, GCInfo>> gcEvents, Task`1<Dictionary`2<ThreadId, ChunkList`1<ThreadLifetimeChange>>> threadLifetimesTask);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.CutOffEvents/<CallStacks>d__8")]
public static Task`1<Dictionary`2<ThreadId, Chunks`1<RawCallStack>>> CallStacks(Task`1<Dictionary`2<ThreadId, Chunks`1<RawCallStack>>> mergedCallStacks, Task`1<Dictionary`2<ThreadId, ChunkList`1<ThreadLifetimeChange>>> threadLifetimesTask, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.CutOffEvents/<CallStacksOrThrow>d__9")]
public static Task`1<Dictionary`2<ThreadId, Chunks`1<RawCallStack>>> CallStacksOrThrow(Task`1<Dictionary`2<ThreadId, Chunks`1<RawCallStack>>> mergedCallStacks, Task`1<Dictionary`2<ThreadId, ChunkList`1<ThreadLifetimeChange>>> threadLifetimesTask);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.DebugEx : object {
    [ExtensionAttribute]
public static void LogInterval(ILogger logger, T entity, ThreadId threadId, Func`1<bool> predicate, ulong tickFromIncluded, ulong endTickIncluded, Func`2<T, ChunkList`1<F1>> f1);
    [ExtensionAttribute]
public static void LogInterval(ILogger logger, ChunkList`1<T> list, ThreadId threadId, Func`1<bool> predicate, ulong tickFromIncluded, ulong endTickIncluded, Func`2<T, F1> f1);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.DebugOutput : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Tick>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Message>k__BackingField;
    public ulong Tick { get; public set; }
    public ulong Message { get; public set; }
    public DebugOutput(ulong Tick, ulong Message);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual ulong get_Tick();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tick(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(DebugOutput left, DebugOutput right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(DebugOutput left, DebugOutput right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(DebugOutput other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(UInt64& Tick, UInt64& Message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.DebugOutputData : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<ThreadId, Chunks`1<DebugOutput>> <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private MemoryStream <MessageStream>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public Dictionary`2<ThreadId, Chunks`1<DebugOutput>> Events { get; public set; }
    public MemoryStream MessageStream { get; public set; }
    public DebugOutputData(Dictionary`2<ThreadId, Chunks`1<DebugOutput>> Events, MemoryStream MessageStream);
    [CompilerGeneratedAttribute]
protected DebugOutputData(DebugOutputData original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Dictionary`2<ThreadId, Chunks`1<DebugOutput>> get_Events();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Events(Dictionary`2<ThreadId, Chunks`1<DebugOutput>> value);
    [CompilerGeneratedAttribute]
public MemoryStream get_MessageStream();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MessageStream(MemoryStream value);
    public sealed virtual long MemoryUsage();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(DebugOutputData left, DebugOutputData right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(DebugOutputData left, DebugOutputData right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(DebugOutputData other);
    [CompilerGeneratedAttribute]
public virtual DebugOutputData <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Dictionary`2& Events, MemoryStream& MessageStream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.DebugOutputLayer : object {
    private static ILogger ourLog;
    private static DebugOutputLayer();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.DebugOutputLayer/<Read>d__2")]
public static Task`1<ReadResult> Read(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.DebugOutputLayer/<ReadOrThrow>d__3")]
public static Task`1<ReadResult> ReadOrThrow(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.DebugOutputLayer/<WriteOrThrow>d__4")]
public static Task`1<WrittenLayerInfo> WriteOrThrow(Lifetime lifetime, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<DebugOutputData> dataTask, FileSystemPath convertedPath);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.DebugOutputLayer/<GetPropertyDescriptors>d__5")]
private static IEnumerable`1<EventPropertyDescriptor> GetPropertyDescriptors();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.DebugOutputWriter : object {
    public Dictionary`2<ThreadId, Chunks`1<DebugOutput>> Events;
    private MemoryStringWriter myMessageWriter;
    public void Add(Chunks`1<DebugOutput> chunks, ulong tick, string message);
    public void Add(ulong tick, ThreadId threadId, string message);
    public DebugOutputData GetData();
    public sealed virtual void Dispose();
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.DfsCallStackEvent : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Tick>k__BackingField;
    [CompilerGeneratedAttribute]
private DfsNodePtr <Ptr>k__BackingField;
    public ulong Tick { get; public set; }
    public DfsNodePtr Ptr { get; public set; }
    public DfsCallStackEvent(ulong Tick, DfsNodePtr Ptr);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual ulong get_Tick();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tick(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public DfsNodePtr get_Ptr();
    [CompilerGeneratedAttribute]
public void set_Ptr(DfsNodePtr value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(DfsCallStackEvent left, DfsCallStackEvent right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(DfsCallStackEvent left, DfsCallStackEvent right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(DfsCallStackEvent other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(UInt64& Tick, DfsNodePtr& Ptr);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.DictionaryEx : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ChunkList`1<TValue> GetOrCreateList(IDictionary`2<TKey, ChunkList`1<TValue>> dictionary, TKey key, int capacity);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Chunks`1<TValue> GetOrCreateChunks(IDictionary`2<TKey, Chunks`1<TValue>> dictionary, TKey key);
    public static Dictionary`2<ThreadId, List`1<T>> Merge(Dictionary`2<ThreadId, List`1<T>> left, Dictionary`2<ThreadId, List`1<T>> right, Int64& itemsProcessed);
    public static void Merge(Dictionary`2<ThreadId, List`1<T>> left, Dictionary`2<ThreadId, List`1<T>> right, Dictionary`2<ThreadId, List`1<T>> result, Int64& itemsProcessed);
    public static Dictionary`2<ThreadId, ChunkList`1<T>> Merge(Dictionary`2<ThreadId, ChunkList`1<T>> left, Dictionary`2<ThreadId, ChunkList`1<T>> right, Int64& itemsProcessed);
    private static void Merge(Dictionary`2<ThreadId, ChunkList`1<T>> left, Dictionary`2<ThreadId, ChunkList`1<T>> right, Dictionary`2<ThreadId, ChunkList`1<T>> result, Int64& itemsProcessed);
    [PureAttribute]
public static Dictionary`2<ThreadId, T> Merge(Dictionary`2<ThreadId, T> left, Dictionary`2<ThreadId, T> right, Int64& itemsProcessed);
    public static Dictionary`2<ThreadId, T> Merge(Int64& itemsProcessed, Dictionary`2[] dics);
    public static Dictionary`2<ThreadId, ChunkList`1<T>> Merge(Int64& itemsProcessed, Dictionary`2[] dics);
    public static Dictionary`2<ThreadId, Chunks`1<T>> Merge(Int64& itemsProcessed, Dictionary`2[] dics);
    [NullableContextAttribute("1")]
[ConditionalAttribute("JET_MODE_ASSERT")]
public static void AssertSorted(Dictionary`2<ThreadId, Chunks`1<HttpRaw>> events);
}
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.EntityEx : object {
    public static T Merge(Int64& itemsProcessed, T[] entities);
    public static T Merge(T leftEntity, T rightEntity, T resultEntity, Int64& itemsProcessed);
    public static T NarrowEntityEventsToStartAndEnd(T original, ulong startTick, Nullable`1<ulong> endTick, Func`2<Nullable`1<EventRef`1<T>>, Nullable`1<EventRef`1<T>>> createStartEvent, Func`2<Nullable`1<EventRef`1<T>>, Nullable`1<EventRef`1<T>>> createEndEvent, Int64& counter);
    private static int LastEventIndexNotAboveTick(T original, ulong tick);
    public static void AssertSorted(T entity);
    public static void AssertSorted(Dictionary`2<ThreadId, T> entity);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.ErrorHandling : object {
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ErrorHandling/<CatchWarn>d__0`1")]
public static Task`1<T> CatchWarn(Task`1<T> action, Action`1<Message> onMessage, T fallback, UserArea userArea);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ErrorHandling/<CatchWarn>d__1`1")]
public static Task`1<T> CatchWarn(Task`1<T> action, Action`1<Message> onMessage, Task`1<T> fallback, UserArea userArea);
    public static T CatchWarn(Func`1<T> action, Action`1<Message> onMessage, T fallback, UserArea userArea);
    [ExtensionAttribute]
public static void LogProcessingWarning(ILogger logger, string message, IEnumerable`1<Pair`2<string, string>> warningData);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.EventRef`1 : ValueType {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private T <Entity>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [NullableAttribute("1")]
public T Entity { get; public set; }
    public int Index { get; public set; }
    [NullableContextAttribute("1")]
public EventRef`1(T Entity, int Index);
    [IsReadOnlyAttribute]
[NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public T get_Entity();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Entity(T value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(EventRef`1<T> left, EventRef`1<T> right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(EventRef`1<T> left, EventRef`1<T> right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(EventRef`1<T> other);
    [IsReadOnlyAttribute]
[NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void Deconstruct(T& Entity, Int32& Index);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.EventsEx : object {
    private static ILogger ourLog;
    private static EventsEx();
    [ExtensionAttribute]
public static void AddExpand(Chunks`1<Expand> expands, ulong tick, Expand expand);
    [ExtensionAttribute]
public static void AddCallStack(Chunks`1<RawCallStack> callStacks, ulong tick, UInt32 ptr);
    private static void ThrowOutOfOrder(string eventName, ulong lastTick, T lastData, ulong tick, T data);
    [ExtensionAttribute]
public static void AddCallStack(ChunkList`1<CallStackEvent> callStacks, ulong tick, CallStackPtr ptr);
    [ExtensionAttribute]
public static void AddAssertOrder(ChunkList`1<T> target, T next);
    [ExtensionAttribute]
public static void AddSubsystemEvent(ChunkList`1<SubsystemEvent> result, ulong tick, SubsystemEventType type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.EventTreesSection : object {
    private static ILogger ourLog;
    private static EventTreesSection();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.EventTreesSection/<WriteThreadLifetimesLayerOrThrow>d__3")]
public static Task`1<WrittenLayerInfo> WriteThreadLifetimesLayerOrThrow(Lifetime lifetime, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<Result> threadLifetimesTask, FileSystemPath convertedPath);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.EventTreesSection/<WriteCallStacksLayerOrThrow>d__4")]
public static Task`1<WrittenLayerInfo> WriteCallStacksLayerOrThrow(Lifetime lifetime, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<Dictionary`2<ThreadId, ChunkList`1<DfsCallStackEvent>>> kernelCallstacksExpander, Task`1<CallTreePtrToDfsNodePtr> mapTask, FileSystemPath convertedPath, IProgressIndicator progress);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.EventTreesSection/<WriteThreadStatesLayerOrThrow>d__5")]
public static Task`1<WrittenLayerInfo> WriteThreadStatesLayerOrThrow(Lifetime lifetime, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<Dictionary`2<ThreadId, ThreadStateChangeInfo>> kernelStatesTask, FileSystemPath convertedPath);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.EventTreesSection/<WriteRunWaitLayerOrThrow>d__6")]
public static Task`1<WrittenLayerInfo> WriteRunWaitLayerOrThrow(Lifetime lifetime, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<Dictionary`2<ThreadId, ThreadStateChangeInfo>> kernelStatesTask, FileSystemPath convertedPath);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.EventTreesSection/<WriteOrThrow>d__8")]
public static Task`1<ImmutableList`1<SectionInfo>> WriteOrThrow(Task`1<Result> threadDescriptorsTask, Task`1<ServiceSectionInfo> serviceSectionReader, FileSystemPath convertedDir, Task`1[] allWriteTasks);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.EventTreesSectionEx : object {
    public static WrittenLayerInfo WriteOnOffLayer(Lifetime lifetime, string layerName, ILogger log, Task`1<ServiceSectionInfo> serviceSectionReader, FileSystemPath convertedPath, Dictionary`2<ThreadId, ChunkList`1<T>> eventsMap, KnownEventTypes onState, IEnumerable`1<EventPropertyDescriptor> propertyDescriptors, Func`2<T, ValueTuple`2<WriteEvent, UInt64[]>> write);
    public static WrittenLayerInfo WriteOnOffLayer(Lifetime lifetime, string layerName, ILogger log, Task`1<ServiceSectionInfo> serviceSectionReader, FileSystemPath convertedPath, Dictionary`2<ThreadId, Chunks`1<T>> eventsChunks, KnownEventTypes onState, IEnumerable`1<EventPropertyDescriptor> propertyDescriptors, Func`2<T, ValueTuple`2<WriteEvent, UInt64[]>> write);
    public static WrittenLayerInfo WriteOnOffLayer(Lifetime lifetime, LayerDescriptor layer, string layerName, ILogger log, Task`1<ServiceSectionInfo> serviceSectionReader, FileSystemPath convertedPath, Dictionary`2<ThreadId, Chunks`1<T>> eventsChunks, KnownEventTypes onState, IEnumerable`1<EventPropertyDescriptor> propertyDescriptors, Func`2<T, ValueTuple`2<WriteEvent, UInt64[]>> write);
    public static WrittenLayerInfo WriteOnOffLayer(Lifetime lifetime, string layerName, ILogger log, Task`1<ServiceSectionInfo> serviceSectionReader, FileSystemPath convertedPath, Dictionary`2<ThreadId, T> eventsMap, KnownEventTypes onState, IEnumerable`1<EventPropertyDescriptor> propertyDescriptors, Func`3<T, int, ValueTuple`2<WriteEvent, UInt64[]>> write);
    public static WrittenLayerInfo WriteOnOffLayer(Lifetime lifetime, LayerDescriptor layer, string layerName, ILogger log, Task`1<ServiceSectionInfo> serviceSectionReader, FileSystemPath convertedPath, Dictionary`2<ThreadId, T> eventsMap, KnownEventTypes onState, IEnumerable`1<EventPropertyDescriptor> propertyDescriptors, Func`3<T, int, ValueTuple`2<WriteEvent, UInt64[]>> write);
    public static WrittenLayerInfo WriteLayer(Lifetime lifetime, string layerName, ILogger logger, IEnumerable`1<EventTypeDescriptor> eventsDescriptors, LayerDescriptor layerDescriptor, ServiceSectionInfo serviceSectionInfo, FileSystemPath convertedPath, LayerWriter layerWriter);
    private static ValueTuple`2<BinaryWriter, SectionInfo> CreateFileForLayer(Lifetime lt, int layerId, FileSystemPath convertedDir);
    public static ValueTuple`2<BinaryWriter, SectionInfo> CreateStringsForProperty(Lifetime lt, int propertyId, FileSystemPath convertedDir);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.ExceptionEvent : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Tick>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Message>k__BackingField;
    public ulong Tick { get; public set; }
    public ulong Type { get; public set; }
    public ulong Message { get; public set; }
    public ExceptionEvent(ulong Tick, ulong Type, ulong Message);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual ulong get_Tick();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tick(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ExceptionEvent left, ExceptionEvent right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ExceptionEvent left, ExceptionEvent right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ExceptionEvent other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(UInt64& Tick, UInt64& Type, UInt64& Message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.ExceptionEventData : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<ThreadId, Chunks`1<ExceptionEvent>> <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private MemoryStream <TypeStream>k__BackingField;
    [CompilerGeneratedAttribute]
private MemoryStream <MessageStream>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public Dictionary`2<ThreadId, Chunks`1<ExceptionEvent>> Events { get; public set; }
    public MemoryStream TypeStream { get; public set; }
    public MemoryStream MessageStream { get; public set; }
    public ExceptionEventData(Dictionary`2<ThreadId, Chunks`1<ExceptionEvent>> Events, MemoryStream TypeStream, MemoryStream MessageStream);
    [CompilerGeneratedAttribute]
protected ExceptionEventData(ExceptionEventData original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Dictionary`2<ThreadId, Chunks`1<ExceptionEvent>> get_Events();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Events(Dictionary`2<ThreadId, Chunks`1<ExceptionEvent>> value);
    [CompilerGeneratedAttribute]
public MemoryStream get_TypeStream();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TypeStream(MemoryStream value);
    [CompilerGeneratedAttribute]
public MemoryStream get_MessageStream();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MessageStream(MemoryStream value);
    public sealed virtual long MemoryUsage();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ExceptionEventData left, ExceptionEventData right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ExceptionEventData left, ExceptionEventData right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ExceptionEventData other);
    [CompilerGeneratedAttribute]
public virtual ExceptionEventData <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Dictionary`2& Events, MemoryStream& TypeStream, MemoryStream& MessageStream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.ExceptionEventWriter : object {
    public Dictionary`2<ThreadId, Chunks`1<ExceptionEvent>> Events;
    private MemoryStringWriter myTypeWriter;
    private MemoryStringWriter myMessageWriter;
    public void Add(Chunks`1<ExceptionEvent> chunks, ulong tick, string type, string message);
    public void Add(ulong tick, ThreadId threadId, string type, string message);
    public ExceptionEventData GetData();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.ExceptionLayer : object {
    private static ILogger ourLog;
    private static ExceptionLayer();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ExceptionLayer/<Write>d__1")]
public static Task`1<WrittenLayerInfo> Write(Lifetime lifetime, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<ExceptionEventData> eventsTask, FileSystemPath convertedPath, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ExceptionLayer/<WriteOrThrow>d__2")]
public static Task`1<WrittenLayerInfo> WriteOrThrow(Lifetime lifetime, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<ExceptionEventData> dataTask, FileSystemPath convertedPath);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ExceptionLayer/<GetPropertyDescriptors>d__3")]
private static IEnumerable`1<EventPropertyDescriptor> GetPropertyDescriptors();
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.Expand : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Tick>k__BackingField;
    [CompilerGeneratedAttribute]
private Expand <Type>k__BackingField;
    public ulong Tick { get; public set; }
    public Expand Type { get; public set; }
    public Expand(ulong Tick, Expand Type);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual ulong get_Tick();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tick(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Expand get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Expand value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(Expand left, Expand right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(Expand left, Expand right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(Expand other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(UInt64& Tick, Expand& Type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.FileIoCollector : object {
    private FileIoInfo myFileIoInfo;
    private Dictionary`2<ulong, ThreadId> myIrpToThreadId;
    private int myErroneousFileIoCount;
    [NullableAttribute("0")]
private FrugalLocalList`1<ulong> myErroneousFileIoTicks;
    public void AddName(ulong tick, FileKey fileObject, string name);
    public void Create(ulong tick, ThreadId threadId, ulong irp, FileObject fileObject, string openPath);
    public void CleanupOrClose(ulong tick, ThreadId threadId, ulong irp, FileObject fileObject);
    public void ReadWrite(bool isRead, ulong tick, ThreadId threadId, ulong irp, FileObject fileObject, FileKey fileKey, UInt32 ioSize, Dictionary`2<ThreadId, Chunks`1<Expand>> expandInfo);
    public void OpEnd(ulong tick, ulong irp, Dictionary`2<ThreadId, Chunks`1<Expand>> expandInfo);
    private void StartIrp(ulong tick, ThreadId threadId, ulong irpPtr);
    public FileIoInfo GetData(Action`1<Message> onMessage);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.FileIoEvent : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Tick>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRead>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <FileName>k__BackingField;
    public ulong Tick { get; public set; }
    public bool IsOn { get; public set; }
    public bool IsRead { get; public set; }
    public UInt32 Size { get; public set; }
    public ulong FileName { get; public set; }
    public FileIoEvent(ulong Tick, bool IsOn, bool IsRead, UInt32 Size, ulong FileName);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual ulong get_Tick();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tick(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsOn();
    [CompilerGeneratedAttribute]
public void set_IsOn(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsRead();
    [CompilerGeneratedAttribute]
public void set_IsRead(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(UInt32 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(FileIoEvent left, FileIoEvent right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(FileIoEvent left, FileIoEvent right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(FileIoEvent other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(UInt64& Tick, Boolean& IsOn, Boolean& IsRead, UInt32& Size, UInt64& FileName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.FileIoInfo : ValueType {
    [CompilerGeneratedAttribute]
private ChunkList`1<ulong> <Tick>k__BackingField;
    [CompilerGeneratedAttribute]
private ChunkList`1<ThreadId> <ThreadId>k__BackingField;
    [CompilerGeneratedAttribute]
private ChunkList`1<IoEvent> <EventType>k__BackingField;
    public ChunkList`1<FileKey> FileKey;
    public ChunkList`1<FileObject> FileObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ChunkList`1<string> Name;
    public ChunkList`1<bool> IsRead;
    public ChunkList`1<UInt32> Size;
    public ChunkList`1<ulong> Tick { get; }
    public ChunkList`1<ThreadId> ThreadId { get; }
    public ChunkList`1<IoEvent> EventType { get; }
    public int Count { get; }
    public FileIoInfo(int count);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual ChunkList`1<ulong> get_Tick();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ChunkList`1<ThreadId> get_ThreadId();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ChunkList`1<IoEvent> get_EventType();
    public void AddName(IoName name);
    public IoName GetName(int index);
    public void AddOpStarted(OpStarted opStarted);
    public OpStarted GetOpStarted(int index);
    public void AddClose(Close close);
    public Close GetClose(int index);
    public void AddReadWrite(ReadWrite readWrite);
    public ReadWrite GetReadWrite(int index);
    public void AddOpEnd(OpEnd opEnd);
    public OpEnd GetOpEnd(int index);
    public sealed virtual int get_Count();
    public sealed virtual FileIoInfo CreateEmptyEntity(int count);
    public sealed virtual void AddFromOther(FileIoInfo source, int sourceIndex);
    public sealed virtual long MemoryUsage();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(FileIoInfo left, FileIoInfo right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(FileIoInfo left, FileIoInfo right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(FileIoInfo other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.FileIoLayer : object {
    private static ILogger ourLog;
    private static FileIoLayer();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.FileIoLayer/<Process>d__2")]
public static Task`1<Result> Process(Task`1<FileIoInfo> fileIoTask, Task`1<Dictionary`2<ThreadId, ChunkList`1<ThreadLifetimeChange>>> threadLifetimesTask, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.FileIoLayer/<ProcessOrThrow>d__3")]
public static Task`1<Result> ProcessOrThrow(Task`1<FileIoInfo> fileIoTask, Task`1<Dictionary`2<ThreadId, ChunkList`1<ThreadLifetimeChange>>> threadLifetimesTask);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.FileIoLayer/<Write>d__4")]
public static Task`1<WrittenLayerInfo> Write(Lifetime lifetime, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<Result> fileProcessingTask, FileSystemPath convertedPath, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.FileIoLayer/<WriteOrThrow>d__5")]
public static Task`1<WrittenLayerInfo> WriteOrThrow(Lifetime lifetime, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<Result> fileProcessingTask, FileSystemPath convertedPath);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.FileIoLayer/<GetPropertyDescriptors>d__6")]
private static IEnumerable`1<EventPropertyDescriptor> GetPropertyDescriptors();
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.FinalizerBegin : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Tick>k__BackingField;
    public ulong Tick { get; public set; }
    public FinalizerBegin(ulong Tick);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual ulong get_Tick();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tick(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(FinalizerBegin left, FinalizerBegin right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(FinalizerBegin left, FinalizerBegin right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(FinalizerBegin other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(UInt64& Tick);
}
public enum JetBrains.DotTrace.Features.Processing.Timeline.V2.GcCount : Enum {
    public UInt32 value__;
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.GcEvent : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Tick>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOn>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private GCType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Depth>k__BackingField;
    public ulong Tick { get; public set; }
    public bool IsOn { get; public set; }
    public UInt32 Reason { get; public set; }
    public GCType Type { get; public set; }
    public UInt32 Depth { get; public set; }
    public GcEvent(ulong Tick, bool IsOn, UInt32 Reason, GCType Type, UInt32 Depth);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual ulong get_Tick();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tick(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsOn();
    [CompilerGeneratedAttribute]
public void set_IsOn(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_Reason();
    [CompilerGeneratedAttribute]
public void set_Reason(UInt32 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public GCType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(GCType value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_Depth();
    [CompilerGeneratedAttribute]
public void set_Depth(UInt32 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(GcEvent left, GcEvent right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(GcEvent left, GcEvent right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(GcEvent other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(UInt64& Tick, Boolean& IsOn, UInt32& Reason, GCType& Type, UInt32& Depth);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.GCInfo : ValueType {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private ChunkList`1<ulong> <Tick>k__BackingField;
    [NullableAttribute("1")]
public ChunkList`1<bool> IsOn;
    [NullableAttribute("1")]
public ChunkList`1<UInt32> Reason;
    [NullableAttribute("1")]
public ChunkList`1<GCType> Type;
    [NullableAttribute("1")]
public ChunkList`1<UInt32> Depth;
    [NullableAttribute("1")]
public ChunkList`1<ulong> Tick { get; }
    public int Count { get; }
    public GCInfo(int count);
    [IsReadOnlyAttribute]
[NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual ChunkList`1<ulong> get_Tick();
    private void Add(ulong tick, bool isOn, UInt32 reason, GCType type, UInt32 depth);
    public void AddOn(ulong tick, UInt32 reason, GCType type, UInt32 depth);
    public void AddOff(ulong tick);
    public sealed virtual GCInfo CreateEmptyEntity(int count);
    public sealed virtual void AddFromOther(GCInfo source, int sourceIndex);
    public sealed virtual int get_Count();
    public sealed virtual long MemoryUsage();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(GCInfo left, GCInfo right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(GCInfo left, GCInfo right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(GCInfo other);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.GetProcessInfo : MulticastDelegate {
    public GetProcessInfo(object object, IntPtr method);
    public virtual Nullable`1<ProcessStartAndStop> Invoke(ProcessId threadId, ulong tick);
    public virtual IAsyncResult BeginInvoke(ProcessId threadId, ulong tick, AsyncCallback callback, object object);
    public virtual Nullable`1<ProcessStartAndStop> EndInvoke(IAsyncResult result);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.GetThreadName : MulticastDelegate {
    public GetThreadName(object object, IntPtr method);
    [NullableContextAttribute("2")]
public virtual string Invoke(ThreadId threadId, ulong tick);
    public virtual IAsyncResult BeginInvoke(ThreadId threadId, ulong tick, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.GetThreadProcessId : MulticastDelegate {
    public GetThreadProcessId(object object, IntPtr method);
    public virtual Nullable`1<ProcessId> Invoke(ThreadId threadId, ulong tick);
    public virtual IAsyncResult BeginInvoke(ThreadId threadId, ulong tick, AsyncCallback callback, object object);
    public virtual Nullable`1<ProcessId> EndInvoke(IAsyncResult result);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.GlobalRuntimeSuspend : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Tick>k__BackingField;
    [CompilerGeneratedAttribute]
private ThreadId <ThreadId>k__BackingField;
    [CompilerGeneratedAttribute]
private RuntimeSuspendStates <State>k__BackingField;
    public ulong Tick { get; public set; }
    public ThreadId ThreadId { get; public set; }
    public RuntimeSuspendStates State { get; public set; }
    public GlobalRuntimeSuspend(ulong Tick, ThreadId ThreadId, RuntimeSuspendStates State);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_Tick();
    [CompilerGeneratedAttribute]
public void set_Tick(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ThreadId get_ThreadId();
    [CompilerGeneratedAttribute]
public void set_ThreadId(ThreadId value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public RuntimeSuspendStates get_State();
    [CompilerGeneratedAttribute]
public void set_State(RuntimeSuspendStates value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(GlobalRuntimeSuspend left, GlobalRuntimeSuspend right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(GlobalRuntimeSuspend left, GlobalRuntimeSuspend right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(GlobalRuntimeSuspend other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(UInt64& Tick, ThreadId& ThreadId, RuntimeSuspendStates& State);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.Http.Http : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Tick>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOn>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Verb>k__BackingField;
    public ulong Tick { get; public set; }
    public bool IsOn { get; public set; }
    public ulong Url { get; public set; }
    public ulong Verb { get; public set; }
    public Http(ulong Tick, bool IsOn, ulong Url, ulong Verb);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual ulong get_Tick();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tick(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsOn();
    [CompilerGeneratedAttribute]
public void set_IsOn(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_Verb();
    [CompilerGeneratedAttribute]
public void set_Verb(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(Http left, Http right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(Http left, Http right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(Http other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(UInt64& Tick, Boolean& IsOn, UInt64& Url, UInt64& Verb);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.Http.HttpData : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<ThreadId, Chunks`1<Http>> <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private MemoryStream <UrlStream>k__BackingField;
    [CompilerGeneratedAttribute]
private MemoryStream <VerbStream>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public Dictionary`2<ThreadId, Chunks`1<Http>> Events { get; public set; }
    public MemoryStream UrlStream { get; public set; }
    public MemoryStream VerbStream { get; public set; }
    public HttpData(Dictionary`2<ThreadId, Chunks`1<Http>> Events, MemoryStream UrlStream, MemoryStream VerbStream);
    [CompilerGeneratedAttribute]
protected HttpData(HttpData original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Dictionary`2<ThreadId, Chunks`1<Http>> get_Events();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Events(Dictionary`2<ThreadId, Chunks`1<Http>> value);
    [CompilerGeneratedAttribute]
public MemoryStream get_UrlStream();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UrlStream(MemoryStream value);
    [CompilerGeneratedAttribute]
public MemoryStream get_VerbStream();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_VerbStream(MemoryStream value);
    public sealed virtual long MemoryUsage();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(HttpData left, HttpData right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(HttpData left, HttpData right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(HttpData other);
    [CompilerGeneratedAttribute]
public virtual HttpData <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Dictionary`2& Events, MemoryStream& UrlStream, MemoryStream& VerbStream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[LocalizableAttribute("False")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.Http.HttpLayer : object {
    private static ILogger ourLog;
    private static HttpLayer();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.Http.HttpLayer/<Merge>d__3")]
public static Task`1<HttpData> Merge(Lifetime lifetime, Task`1<ReadResult> httpProviderTask, Task`1<ReadResult> diagnosticSourceTask, Task`1<ReadResult> kestrelEvents, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.Http.HttpLayer/<MergeOrThrow>d__4")]
public static Task`1<HttpData> MergeOrThrow(Lifetime lifetime, Task`1<ReadResult> httpProviderTask, Task`1<ReadResult> diagnosticSourceTask, Task`1<ReadResult> kestrelEvents);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.Http.HttpLayer/<WriteOrThrow>d__5")]
public static Task`1<WrittenLayerInfo> WriteOrThrow(Lifetime lifetime, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<HttpData> eventsTask, FileSystemPath convertedPath);
    private static void ProcessResponse(ulong tick, ThreadId threadId, Dictionary`2<T, DeliverEvent> deliverEvents, T dataRequestId, string dataVerb, Dictionary`2<ThreadId, Chunks`1<HttpRaw>> httpRawEvents, Int32& overlapErrorCounter, IList`1& firstOverlapError);
    private static void ProcessOverlapErrors(int overlapErrorCount, IEnumerable`1<Pair`2<string, string>> firstOverlapError, string section, Action`1<Message> onMessage);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.Http.HttpLayer/<GetPropertyDescriptors>d__8")]
private static IEnumerable`1<EventPropertyDescriptor> GetPropertyDescriptors();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.Http.HttpLayer/<ReadDiagnosticSource>d__9")]
public static Task`1<ReadResult> ReadDiagnosticSource(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.Http.HttpLayer/<ReadDiagnosticSourceOrThrow>d__10")]
public static Task`1<ReadResult> ReadDiagnosticSourceOrThrow(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.Http.HttpLayer/<ReadHttpProvider>d__11")]
public static Task`1<ReadResult> ReadHttpProvider(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.Http.HttpLayer/<ReadHttpProviderOrThrow>d__12")]
public static Task`1<ReadResult> ReadHttpProviderOrThrow(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.Http.HttpLayer/<ReadKestrel>d__13")]
public static Task`1<ReadResult> ReadKestrel(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.Http.HttpLayer/<ReadKestrelOrThrow>d__14")]
public static Task`1<ReadResult> ReadKestrelOrThrow(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller, Action`1<Message> onMessage);
    [CompilerGeneratedAttribute]
internal static void <MergeOrThrow>g__Write|4_0(Chunks`1<HttpRaw> httpRawInfo, Chunks`1<Http> httpInfo, <>c__DisplayClass4_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.Http.HttpRaw : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Tick>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Verb>k__BackingField;
    public ulong Tick { get; public set; }
    public bool IsOn { get; public set; }
    public string Url { get; public set; }
    public string Verb { get; public set; }
    public HttpRaw(ulong Tick, bool IsOn, string Url, string Verb);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual ulong get_Tick();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tick(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsOn();
    [CompilerGeneratedAttribute]
public void set_IsOn(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Verb();
    [CompilerGeneratedAttribute]
public void set_Verb(string value);
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(HttpRaw left, HttpRaw right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(HttpRaw left, HttpRaw right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(HttpRaw other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(UInt64& Tick, Boolean& IsOn, String& Url, String& Verb);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.Http.HttpWriter : object {
    public Dictionary`2<ThreadId, Chunks`1<Http>> Events;
    private MemoryStringWriter myUrlWriter;
    private MemoryStringWriter myVerbWriter;
    public void Add(Chunks`1<Http> chunks, ulong tick, bool isOn, string url, string verb);
    public HttpData GetData();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.IlToNativeMapData : ValueType {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ChunkList`1<ValueTuple`3<FunctionUID, UInt32[], UInt32[]>> <Mappings>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<ulong, FunctionUID> <MethodIdToFuid>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<ulong> <MethodIdsWithoutFuid>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ChunkList`1<ValueTuple`3<FunctionUID, UInt32[], UInt32[]>> Mappings { get; public set; }
    public Dictionary`2<ulong, FunctionUID> MethodIdToFuid { get; public set; }
    public HashSet`1<ulong> MethodIdsWithoutFuid { get; public set; }
    public IlToNativeMapData(ChunkList`1<ValueTuple`3<FunctionUID, UInt32[], UInt32[]>> Mappings, Dictionary`2<ulong, FunctionUID> MethodIdToFuid, HashSet`1<ulong> MethodIdsWithoutFuid);
    [CompilerGeneratedAttribute]
public ChunkList`1<ValueTuple`3<FunctionUID, UInt32[], UInt32[]>> get_Mappings();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Mappings(ChunkList`1<ValueTuple`3<FunctionUID, UInt32[], UInt32[]>> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<ulong, FunctionUID> get_MethodIdToFuid();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MethodIdToFuid(Dictionary`2<ulong, FunctionUID> value);
    [CompilerGeneratedAttribute]
public HashSet`1<ulong> get_MethodIdsWithoutFuid();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MethodIdsWithoutFuid(HashSet`1<ulong> value);
    public sealed virtual long MemoryUsage();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(IlToNativeMapData left, IlToNativeMapData right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(IlToNativeMapData left, IlToNativeMapData right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(IlToNativeMapData other);
    [CompilerGeneratedAttribute]
public void Deconstruct(ChunkList`1& Mappings, Dictionary`2& MethodIdToFuid, HashSet`1& MethodIdsWithoutFuid);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.IlToNativeMapProcessor : object {
    private Dictionary`2<ulong, FunctionUID> myMethodIdToFuid;
    private HashSet`1<ulong> myMethodIdsWithoutFuid;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ChunkList`1<ValueTuple`3<FunctionUID, UInt32[], UInt32[]>> myMappings;
    private static ILogger ourLog;
    [NullableContextAttribute("2")]
public IlToNativeMapProcessor(Dictionary`2<ulong, FunctionUID> methodIdToFuid, HashSet`1<ulong> methodIdsWithoutFuid);
    private static IlToNativeMapProcessor();
    public IlToNativeMapData GetData();
    public void HandleMethodLoadVerbose(ulong methodID, ulong rawFuid);
    public void HandleMethodILToNativeMap(ulong methodID, UInt32[] iLOffsets, UInt32[] nativeOffsets);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.IlToNativeMapProcessor/<Write>d__8")]
public static Task`1<SectionInfo> Write(Task`1<IlToNativeMapData> ilToNativeMapTask, FileSystemPath convertedDir, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.IlToNativeMapProcessor/<WriteOrThrow>d__9")]
public static Task`1<SectionInfo> WriteOrThrow(Task`1<IlToNativeMapData> ilToNativeMapTask, FileSystemPath convertedDir);
}
public interface JetBrains.DotTrace.Features.Processing.Timeline.V2.IMergeable`1 {
    public abstract virtual T CreateEmptyEntity(int count);
    public abstract virtual void AddFromOther(T source, int sourceIndex);
}
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.IntervalMapEx : object {
    public static bool TryGetIntervalValue(List`1<ValueTuple`3<TEntity, ulong, TValue>> intervalMap, TEntity id, ulong tick, TValue& result);
}
public interface JetBrains.DotTrace.Features.Processing.Timeline.V2.IWithTicks {
    public ChunkList`1<ulong> Tick { get; }
    public int Count { get; }
    public abstract virtual ChunkList`1<ulong> get_Tick();
    public abstract virtual int get_Count();
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.JitInfo : ValueType {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private ChunkList`1<ulong> <Tick>k__BackingField;
    [NullableAttribute("1")]
public ChunkList`1<bool> IsOn;
    [NullableAttribute("1")]
public ChunkList`1<ulong> MethodId;
    [NullableAttribute("1")]
public ChunkList`1<FunctionUID> Fuid;
    [NullableAttribute("1")]
public ChunkList`1<ulong> Tick { get; }
    public int Count { get; }
    public JitInfo(int count);
    [IsReadOnlyAttribute]
[NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual ChunkList`1<ulong> get_Tick();
    private void Add(ulong tick, bool isOn, ulong methodId, FunctionUID fuid);
    public void AddOn(ulong tick, ulong methodId, FunctionUID fuid);
    public void AddOff(ulong tick, ulong methodId, FunctionUID fuid);
    public sealed virtual JitInfo CreateEmptyEntity(int count);
    public sealed virtual void AddFromOther(JitInfo source, int sourceIndex);
    public sealed virtual int get_Count();
    public sealed virtual long MemoryUsage();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(JitInfo left, JitInfo right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(JitInfo left, JitInfo right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(JitInfo other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.JitLayer : object {
    private static ILogger ourLog;
    private static JitLayer();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.JitLayer/<Write>d__1")]
public static Task`1<WrittenLayerInfo> Write(Lifetime lifetime, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<Dictionary`2<ThreadId, JitInfo>> eventsTask, FileSystemPath convertedPath, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.JitLayer/<WriteOrThrow>d__2")]
public static Task`1<WrittenLayerInfo> WriteOrThrow(Lifetime lifetime, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<Dictionary`2<ThreadId, JitInfo>> jitEventsTask, FileSystemPath convertedPath);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.JitLayer/<GetPropertyDescriptors>d__3")]
private static IEnumerable`1<EventPropertyDescriptor> GetPropertyDescriptors();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.KernelCallStacks : object {
    private static ILogger ourLog;
    private static KernelCallStacks();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.KernelCallStacks/<Process>d__1")]
public static Task`1<Dictionary`2<ThreadId, Chunks`1<RawCallStack>>> Process(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.KernelCallStacks/<ProcessOrThrow>d__2")]
public static Task`1<Dictionary`2<ThreadId, Chunks`1<RawCallStack>>> ProcessOrThrow(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller);
    private static Dictionary`2<ThreadId, Chunks`1<RawCallStack>> ReadKernelUnsortedCallstacks(Lifetime lifetime, SnapshotStorageSection callTreeSection, IProgressIndicator controller, Int64& counter);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.KernelCallStacks/<WriteKernelSamplingLayer>d__4")]
public static Task`1<WrittenLayerInfo> WriteKernelSamplingLayer(Lifetime lifetime, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<Dictionary`2<ThreadId, Chunks`1<Expand>>> cutOffKernelExpandEvents, Task`1<Dictionary`2<ThreadId, ChunkList`1<CallStackEvent>>> convertCallStacksTask, Task`1<CallTreePtrToDfsNodePtr> mapTask, FileSystemPath convertedPath, ProcessingFlags flags, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.KernelCallStacks/<WriteKernelSamplingLayerOrThrow>d__5")]
private static Task`1<WrittenLayerInfo> WriteKernelSamplingLayerOrThrow(Lifetime lifetime, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<Dictionary`2<ThreadId, Chunks`1<Expand>>> cutOffKernelExpandEvents, Task`1<Dictionary`2<ThreadId, ChunkList`1<CallStackEvent>>> convertCallStacksTask, Task`1<CallTreePtrToDfsNodePtr> mapTask, FileSystemPath convertedPath, ProcessingFlags flags);
    private static LayerDescriptor GetLayer();
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.KernelCallStacks/<GetEvents>d__7")]
private static IEnumerable`1<EventTypeDescriptor> GetEvents();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.KernelSetActivatedBy : object {
    private static ILogger ourLog;
    private static KernelSetActivatedBy();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.KernelSetActivatedBy/<Process>d__2")]
public static Task`1<Result> Process(Task`1<Dictionary`2<ThreadId, ThreadStateChangeInfo>> cutOffByThreadsRanges, Task`1<Dictionary`2<ThreadId, ChunkList`1<ActivatingThread>>> activatingInfoTask, Task`1<GetThreadProcessId> processIdGetterTask, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<GetProcessInfo> processStartAndStopGetterTask, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.KernelSetActivatedBy/<ProcessOrThrow>d__3")]
public static Task`1<Result> ProcessOrThrow(Task`1<Dictionary`2<ThreadId, ThreadStateChangeInfo>> cutOffByThreadsRanges, Task`1<Dictionary`2<ThreadId, ChunkList`1<ActivatingThread>>> activatingInfoTask, Task`1<GetThreadProcessId> processIdGetterTask, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<GetProcessInfo> processStartAndStopGetterTask);
    [CompilerGeneratedAttribute]
internal static Nullable`1<UniqueProcessId> <ProcessOrThrow>g__GetUniqueProcessId|3_0(ProcessId processId, ulong tick, <>c__DisplayClass3_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.KernelStatesSummary : object {
    private static ILogger ourLog;
    private static KernelStatesSummary();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.KernelStatesSummary/<Process>d__1")]
public static Task`1<Chunks`1<SummaryEvent>> Process(Task`1<Dictionary`2<ThreadId, ThreadStateChangeInfo>> kernelStatesTask, Task`1<ServiceSectionInfo> serviceSectionReader, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.KernelStatesSummary/<ProcessOrThrow>d__2")]
public static Task`1<Chunks`1<SummaryEvent>> ProcessOrThrow(Task`1<Dictionary`2<ThreadId, ThreadStateChangeInfo>> kernelStatesTask, Task`1<ServiceSectionInfo> serviceSectionReader);
    private static void UpdateLastEvent(Chunks`1<SummaryEvent> result, ulong weightedSum, ulong lengthsSum);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.KernelStatesSummary/<WriteOrThrow>d__4")]
public static Task`1<WrittenLayerInfo> WriteOrThrow(Lifetime lifetime, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<Chunks`1<SummaryEvent>> summaryTask, FileSystemPath convertedPath);
}
public enum JetBrains.DotTrace.Features.Processing.Timeline.V2.Lifecycle : Enum {
    public byte value__;
    public static Lifecycle Start;
    public static Lifecycle RundownStart;
    public static Lifecycle Stop;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.ManifestFileIo : object {
    private static ILogger ourLog;
    private static ManifestFileIo();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ManifestFileIo/<Read>d__2")]
public static Task`1<ReadResult> Read(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ManifestFileIo/<ReadOrThrow>d__3")]
private static Task`1<ReadResult> ReadOrThrow(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller, Action`1<Message> onMessage);
    private static void WarnIfOutOfOrder(UInt64& prevTick, EventId& prevEventId, ThreadId& prevThreadId, ulong tick, EventId eventId, ThreadId threadId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.ManifestKernelCallStacks : object {
    private static ILogger ourLog;
    private static ManifestKernelCallStacks();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ManifestKernelCallStacks/<Read>d__2")]
public static Task`1<ReadResult> Read(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ManifestKernelCallStacks/<ReadOrThrow>d__3")]
private static Task`1<ReadResult> ReadOrThrow(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller, Action`1<Message> onMessage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.ManifestPerfInfo : object {
    private static ILogger ourLog;
    private static ManifestPerfInfo();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ManifestPerfInfo/<Read>d__2")]
public static Task`1<ReadResult> Read(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ManifestPerfInfo/<ReadOrThrow>d__3")]
private static Task`1<ReadResult> ReadOrThrow(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller, Action`1<Message> onMessage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.ManifestProcess : object {
    private static ILogger ourLog;
    private static ManifestProcess();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ManifestProcess/<Read>d__2")]
public static Task`1<ReadResult> Read(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ManifestProcess/<ReadOrThrow>d__3")]
private static Task`1<ReadResult> ReadOrThrow(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.ManifestThread : object {
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ManifestThread/<Read>d__1")]
public static Task`1<ReadResult> Read(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ManifestThread/<ReadOrThrow>d__2")]
private static Task`1<ReadResult> ReadOrThrow(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.MemorySampler : object {
    private static ILogger ourLog;
    public ImmutableList`1<ProcMemSample> Samples;
    public MemorySampler(Lifetime lifetime, TaskScheduler scheduler, ILogger logger);
    private static MemorySampler();
    [LocalizableAttribute("False")]
private void TraceMemory();
    [LocalizableAttribute("False")]
private static void LogMemory(ILogger logger);
    [CompilerGeneratedAttribute]
internal static string <LogMemory>g__FormatSize|4_0(UIntPtr val);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.MemoryStringWriter : object {
    private MemoryStream myStream;
    private BinaryWriter myBinaryWriter;
    private CachingStringWriter myCachedStringWriter;
    [NullableContextAttribute("2")]
public ulong Write(string s);
    public sealed virtual void Dispose();
    public MemoryStream GetStream();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.Movable`1 : object {
    private object myLock;
    [NullableAttribute("2")]
private T myValue;
    private bool myIsMoved;
    public Movable`1(T value);
    public T Move();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.MovableEx : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Movable`1<T> AsMovable(T value);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.NativeAllocationEvents : ValueType {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private ChunkList`1<ulong> <Tick>k__BackingField;
    [NullableAttribute("1")]
public ChunkList`1<bool> IsFreed;
    [NullableAttribute("1")]
public ChunkList`1<ulong> Size;
    public bool HasFreeEvents;
    [NullableAttribute("1")]
public ChunkList`1<ulong> Tick { get; }
    public int Count { get; }
    [IsReadOnlyAttribute]
[NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual ChunkList`1<ulong> get_Tick();
    public void Add(ulong tick, bool isFreed, ulong size);
    public sealed virtual int get_Count();
    public sealed virtual long MemoryUsage();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(NativeAllocationEvents left, NativeAllocationEvents right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(NativeAllocationEvents left, NativeAllocationEvents right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(NativeAllocationEvents other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.NativeAllocations : object {
    private static ILogger ourLog;
    private static NativeAllocations();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.NativeAllocations/<Read>d__2")]
public static Task`1<ReadResult> Read(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.NativeAllocations/<ReadOrThrow>d__3")]
public static Task`1<ReadResult> ReadOrThrow(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.NativeAllocations/<ExtractUnreleasedCallStacks>d__5")]
public static Task`1<ExtractResult> ExtractUnreleasedCallStacks(Lifetime lifetime, Task`1<Dictionary`2<ThreadId, NativeAllocationEvents>> eventsTask, Task`1<Dictionary`2<ThreadId, Chunks`1<RawCallStack>>> rawStacksTask, IProgressIndicator controller, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.NativeAllocations/<ExtractUnreleasedCallStacksOrThrow>d__6")]
public static Task`1<ExtractResult> ExtractUnreleasedCallStacksOrThrow(Lifetime lifetime, Task`1<Dictionary`2<ThreadId, NativeAllocationEvents>> eventsTask, Task`1<Dictionary`2<ThreadId, Chunks`1<RawCallStack>>> rawStacksTask, IProgressIndicator controller);
    private static void FillExpands(Chunks`1<RawCallStack> stacks, Chunks`1<Expand> threadExpandInfo);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.NativeAllocations/<GetEvents>d__8")]
public static IEnumerable`1<EventTypeDescriptor> GetEvents();
    public static LayerDescriptor GetLayer();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.NativeAllocations/<WriteOrThrow>d__10")]
public static Task`1<WrittenLayerInfo> WriteOrThrow(Lifetime lifetime, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<Dictionary`2<ThreadId, NativeAllocationEvents>> nativeAllocationsReadTask, FileSystemPath convertedPath);
    [CompilerGeneratedAttribute]
internal static void <ReadOrThrow>g__Alloc|3_0(NativeAllocationEvents& nativeAllocationEvents, Dictionary`2<ulong, ValueTuple`2<NativeAllocationEvents, int>> addressToAllocEventIndex, ulong tick, ulong allocAddress, ulong allocSize);
    [CompilerGeneratedAttribute]
internal static void <ReadOrThrow>g__Free|3_1(Dictionary`2<ulong, ValueTuple`2<NativeAllocationEvents, int>> addressToAllocEventIndex, ulong freeAddress);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.NetAllocation : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Tick>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Amount>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <HeapKind>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Type>k__BackingField;
    public ulong Tick { get; public set; }
    public UInt32 Amount { get; public set; }
    public UInt32 HeapKind { get; public set; }
    public ulong Type { get; public set; }
    public NetAllocation(ulong Tick, UInt32 Amount, UInt32 HeapKind, ulong Type);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual ulong get_Tick();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tick(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_Amount();
    [CompilerGeneratedAttribute]
public void set_Amount(UInt32 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_HeapKind();
    [CompilerGeneratedAttribute]
public void set_HeapKind(UInt32 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(NetAllocation left, NetAllocation right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(NetAllocation left, NetAllocation right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(NetAllocation other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(UInt64& Tick, UInt32& Amount, UInt32& HeapKind, UInt64& Type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.NetAllocationData : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<ThreadId, Chunks`1<NetAllocation>> <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private MemoryStream <TypeStream>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public Dictionary`2<ThreadId, Chunks`1<NetAllocation>> Events { get; public set; }
    public MemoryStream TypeStream { get; public set; }
    public NetAllocationData(Dictionary`2<ThreadId, Chunks`1<NetAllocation>> Events, MemoryStream TypeStream);
    [CompilerGeneratedAttribute]
protected NetAllocationData(NetAllocationData original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Dictionary`2<ThreadId, Chunks`1<NetAllocation>> get_Events();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Events(Dictionary`2<ThreadId, Chunks`1<NetAllocation>> value);
    [CompilerGeneratedAttribute]
public MemoryStream get_TypeStream();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TypeStream(MemoryStream value);
    public sealed virtual long MemoryUsage();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(NetAllocationData left, NetAllocationData right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(NetAllocationData left, NetAllocationData right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(NetAllocationData other);
    [CompilerGeneratedAttribute]
public virtual NetAllocationData <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Dictionary`2& Events, MemoryStream& TypeStream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.NetAllocationLayer : object {
    private static ILogger ourLog;
    private static NetAllocationLayer();
    private static Heap ToHeap(UInt32 allocationKind);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.NetAllocationLayer/<Write>d__3")]
public static Task`1<WrittenLayerInfo> Write(Lifetime lifetime, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<NetAllocationData> eventsTask, FileSystemPath convertedPath, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.NetAllocationLayer/<WriteOrThrow>d__4")]
public static Task`1<WrittenLayerInfo> WriteOrThrow(Lifetime lifetime, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<NetAllocationData> dataTask, FileSystemPath convertedPath);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.NetAllocationLayer/<GetPropertyDescriptors>d__5")]
private static IEnumerable`1<EventPropertyDescriptor> GetPropertyDescriptors();
    private static LayerDescriptor GetLayer();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.NetAllocationWriter : object {
    public Dictionary`2<ThreadId, Chunks`1<NetAllocation>> Events;
    private MemoryStringWriter myTypeWriter;
    public void Add(Chunks`1<NetAllocation> chunks, ulong tick, UInt32 amount, UInt32 heapKind, string type);
    public void Add(ulong tick, ThreadId threadId, UInt32 amount, UInt32 heapKind, string type);
    public NetAllocationData GetData();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.NetRundownEvents : object {
    private static ILogger ourLog;
    private static NetRundownEvents();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.NetRundownEvents/<Read>d__2")]
public static Task`1<ReadResult> Read(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.NetRundownEvents/<ReadOrThrow>d__3")]
public static Task`1<ReadResult> ReadOrThrow(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.NetRuntimeEvents : object {
    private static ILogger ourLog;
    private static NetRuntimeEvents();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.NetRuntimeEvents/<Read>d__2")]
public static Task`1<ReadResult> Read(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller, Task`1<IlToNativeMapData> rundownIlToNativeMapTask, Task`1<ServiceSectionInfo> serviceSectionInfoTask, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.NetRuntimeEvents/<ReadOrThrow>d__3")]
public static Task`1<ReadResult> ReadOrThrow(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller, Task`1<IlToNativeMapData> rundownIlToNativeMapTask, Task`1<ServiceSectionInfo> serviceSectionInfoTask);
    [AsyncIteratorStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.NetRuntimeEvents/<ProcessObsoleteProtobufEvents>d__4")]
public static IAsyncEnumerable`1<ValueTuple`2<EventsBuffer, int>> ProcessObsoleteProtobufEvents(Lifetime lifetime, SnapshotStorageSection section, SnapshotStorageSection callStacks, IProgressIndicator controller);
    private static void HandleGCSuspendEE(ulong tick, ThreadId threadId, UInt32 reason, ChunkList`1<GlobalRuntimeSuspend> globalRuntimeSuspends, Chunks`1<Expand> expandInfo);
    private static void HandleGCRestartEE(EventsBuffer buffer, int i, ChunkList`1<GlobalRuntimeSuspend> globalRuntimeSuspends);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.NetRuntimeEvents/<WriteGC>d__7")]
public static Task`1<WrittenLayerInfo> WriteGC(Lifetime lifetime, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<Dictionary`2<ThreadId, GCInfo>> gcEventsTask, FileSystemPath convertedPath, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.NetRuntimeEvents/<WriteGC>d__8")]
public static Task`1<WrittenLayerInfo> WriteGC(Lifetime lifetime, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<Dictionary`2<ThreadId, GCInfo>> gcEventsTask, FileSystemPath convertedPath);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.NetRuntimeEvents/<GetPropertyDescriptorsForBlockingGC>d__9")]
private static IEnumerable`1<EventPropertyDescriptor> GetPropertyDescriptorsForBlockingGC();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.NetRuntimeEvents/<WriteRuntimeSuspendsWithGC>d__10")]
public static Task`1<WrittenLayerInfo> WriteRuntimeSuspendsWithGC(Lifetime lifetime, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<ChunkList`1<GlobalRuntimeSuspend>> eventsTask, FileSystemPath convertedPath, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.NetRuntimeEvents/<WriteRuntimeSuspendsWithGCOrThrow>d__11")]
public static Task`1<WrittenLayerInfo> WriteRuntimeSuspendsWithGCOrThrow(Lifetime lifetime, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<ChunkList`1<GlobalRuntimeSuspend>> suspendsTask, FileSystemPath convertedPath);
    [CompilerGeneratedAttribute]
internal static bool <ReadOrThrow>g__TryStopBlockingGC|3_3(<>c__DisplayClass3_0& , <>c__DisplayClass3_1& );
    [CompilerGeneratedAttribute]
internal static void <ReadOrThrow>g__TryStopBackgroundGC|3_4(<>c__DisplayClass3_0& , <>c__DisplayClass3_1& );
    [CompilerGeneratedAttribute]
internal static LayerDescriptor <WriteRuntimeSuspendsWithGCOrThrow>g__GetLayer|11_0();
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.NetRuntimeEvents/<<WriteRuntimeSuspendsWithGCOrThrow>g__GetEvents|11_1>d")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<EventTypeDescriptor> <WriteRuntimeSuspendsWithGCOrThrow>g__GetEvents|11_1();
}
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.NetTraceToRawMultifile : object {
    public static void Convert(Lifetime lifetime, FileSystemPath netTracePath, FileSystemPath unpackedIndexPath, IProgressIndicator progress);
    public static Guid CalculateHashAndCreateGuid(PerfStatCookie parentCookie, FileSystemPath snapshotPath);
    private static OWORD GetHashFromStream(Stream stream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.ProcessDescriptors : object {
    private static ILogger ourLog;
    private static ProcessDescriptors();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ProcessDescriptors/<Write>d__1")]
public static Task`1<ImmutableList`1<SectionInfo>> Write(Task`1<List`1<ProcessStartAndStop>> processesToWriteTask, FileSystemPath convertedDir, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ProcessDescriptors/<WriteOrThrow>d__2")]
public static Task`1<ImmutableList`1<SectionInfo>> WriteOrThrow(Task`1<List`1<ProcessStartAndStop>> processesToWriteTask, FileSystemPath convertedDir);
    public static string ExtractFullPathFromCommandLine(string commandLine);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.ProcessIdMap : object {
    private static ILogger ourLog;
    private static ProcessIdMap();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ProcessIdMap/<CreateOrThrow>d__1")]
public static Task`1<GetThreadProcessId> CreateOrThrow(Task`1<Dictionary`2<ThreadId, ChunkList`1<ThreadLifecycleChange>>> threadLifecycleInfoTask);
    private static bool TryGetProcessId(List`1<ValueTuple`3<ThreadId, ulong, ProcessId>> intervalMap, ThreadId threadId, ulong tick, ProcessId& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.ProcessingPipeline : object {
    protected Lifetime Lifetime;
    private ISnapshotsSettingsProvider mySnapshotsSettingsProvider;
    private IShellLocks myShellLocks;
    private static ILogger ourLog;
    public ProcessingPipeline(Lifetime lifetime, IShellLocks shellLocks, ISnapshotsSettingsProvider snapshotsSettingsProvider);
    private static ProcessingPipeline();
    public ProcessingContext`1<ConvertedSnapshot> Process(SnapshotProcessingInput pipeInput);
    private ResultOrError`1<ConvertedSnapshot> ResultOrError(Lifetime lifetime, SnapshotProcessingInput input, ProcessingLogger processingLogger, string header, ProgressIndicator progress);
    private static void AddTestWarningsIfVariableIsSet(Action`1<Message> logMessage);
    private static void AddTestExceptionsIfVariableIsSet(Action`1<Message> logMessage);
    public static FileSystemPath ProcessSnapshot(Lifetime lifetime, TaskScheduler scheduler, FileSystemPath originalSnapshotPath, ProcessingMode mode, ProcessingFlags flags, UnpackingPaths unpackingPaths, ProcessingStats& stats, Action`1<Message> onMessage, ProgressIndicator progress);
    private static void LogPerformanceMetrics(FileSystemPath originalSnapshotPath, MemorySampler memorySampler);
    private static bool HaveAllMandatorySections(FileSystemPath snapshotPath);
    private static FileSystemPath WriteChromeTraceToLogsFolder(ChromeTrace chromeTrace, string filePrefix);
    private static EnvironmentSection TryReadEnvironmentSection(Lifetime lt, ISnapshotStorage snapshotStorage);
    [NullableContextAttribute("0")]
private static ValueTuple`2<Guid, Guid> GetSnapshotIds(ISnapshotStorage snapshotStorage);
    private static List`1<Task> RunProcessingTasks(Lifetime lifetime, TaskScheduler scheduler, FileSystemPath snapshotPath, IProgressIndicator progress, FileSystemPath convertedDir, ProcessingFlags flags, Action`1<Message> onMessage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.ProcessLifecycleEvent : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Tick>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessId <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private Lifecycle <Lifecycle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandLine>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageName>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessId <ParentId>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ExitCode>k__BackingField;
    public ulong Tick { get; public set; }
    public ProcessId ProcessId { get; public set; }
    public Lifecycle Lifecycle { get; public set; }
    public string CommandLine { get; public set; }
    public string ImageName { get; public set; }
    public ProcessId ParentId { get; public set; }
    public UInt32 ExitCode { get; public set; }
    public ProcessLifecycleEvent(ulong Tick, ProcessId ProcessId, Lifecycle Lifecycle, string CommandLine, string ImageName, ProcessId ParentId, UInt32 ExitCode);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual ulong get_Tick();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tick(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ProcessId get_ProcessId();
    [CompilerGeneratedAttribute]
public void set_ProcessId(ProcessId value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Lifecycle get_Lifecycle();
    [CompilerGeneratedAttribute]
public void set_Lifecycle(Lifecycle value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_CommandLine();
    [CompilerGeneratedAttribute]
public void set_CommandLine(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_ImageName();
    [CompilerGeneratedAttribute]
public void set_ImageName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ProcessId get_ParentId();
    [CompilerGeneratedAttribute]
public void set_ParentId(ProcessId value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_ExitCode();
    [CompilerGeneratedAttribute]
public void set_ExitCode(UInt32 value);
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ProcessLifecycleEvent left, ProcessLifecycleEvent right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ProcessLifecycleEvent left, ProcessLifecycleEvent right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ProcessLifecycleEvent other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(UInt64& Tick, ProcessId& ProcessId, Lifecycle& Lifecycle, String& CommandLine, String& ImageName, ProcessId& ParentId, UInt32& ExitCode);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.ProcessStartAndStop : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Tick>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessId <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandLine>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageName>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <EndTick>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ExitCode>k__BackingField;
    public ulong Tick { get; public set; }
    public ProcessId ProcessId { get; public set; }
    public string CommandLine { get; public set; }
    public string ImageName { get; public set; }
    public ulong EndTick { get; public set; }
    public UInt32 ExitCode { get; public set; }
    public ProcessStartAndStop(ulong Tick, ProcessId ProcessId, string CommandLine, string ImageName, ulong EndTick, UInt32 ExitCode);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_Tick();
    [CompilerGeneratedAttribute]
public void set_Tick(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ProcessId get_ProcessId();
    [CompilerGeneratedAttribute]
public void set_ProcessId(ProcessId value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_CommandLine();
    [CompilerGeneratedAttribute]
public void set_CommandLine(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_ImageName();
    [CompilerGeneratedAttribute]
public void set_ImageName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_EndTick();
    [CompilerGeneratedAttribute]
public void set_EndTick(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_ExitCode();
    [CompilerGeneratedAttribute]
public void set_ExitCode(UInt32 value);
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ProcessStartAndStop left, ProcessStartAndStop right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ProcessStartAndStop left, ProcessStartAndStop right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ProcessStartAndStop other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(UInt64& Tick, ProcessId& ProcessId, String& CommandLine, String& ImageName, UInt64& EndTick, UInt32& ExitCode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.ProcessStartAndStopMap : object {
    private static ILogger ourLog;
    private static ProcessStartAndStopMap();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ProcessStartAndStopMap/<CreateOrThrow>d__1")]
public static Task`1<GetProcessInfo> CreateOrThrow(Task`1<ChunkList`1<ProcessLifecycleEvent>> kernelProcessEventsTask);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.ProtobufKernelEvents : object {
    private static ILogger ourLog;
    private static ProtobufKernelEvents();
    public static Result ProcessKernelProtobufEvents(Lifetime lifetime, SnapshotStorageSection section, IProgressIndicator controller, Int32& counter, bool checkIfKernelSamplesExist, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ProtobufKernelEvents/<KernelOrThrow>d__3")]
public static Task`1<Result> KernelOrThrow(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator executionController, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ProtobufKernelEvents/<KernelRundownOrThrow>d__4")]
public static Task`1<Result> KernelRundownOrThrow(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ProtobufKernelEvents/<MergeOrThrow>d__5")]
public static Task`1<Result> MergeOrThrow(Task`1<Result> readEventsTask, Task`1<Result> readRundownEventsTask);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.RandomEx : object {
    [NullableAttribute("1")]
private static Random ourRandom;
    private static RandomEx();
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<TKey, TValue>> RandomOrder(IDictionary`2<TKey, TValue> dic);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.RawCallStack : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Tick>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Ptr>k__BackingField;
    public ulong Tick { get; public set; }
    public UInt32 Ptr { get; public set; }
    public RawCallStack(ulong Tick, UInt32 Ptr);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual ulong get_Tick();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tick(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_Ptr();
    [CompilerGeneratedAttribute]
public void set_Ptr(UInt32 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(RawCallStack left, RawCallStack right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(RawCallStack left, RawCallStack right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(RawCallStack other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(UInt64& Tick, UInt32& Ptr);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.RawToIndexedCallTree : object {
    private static ILogger ourLog;
    private static RawToIndexedCallTree();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.RawToIndexedCallTree/<ProcessOrThrow>d__1")]
public static Task`1<Dictionary`2<ThreadId, ChunkList`1<CallStackEvent>>> ProcessOrThrow(Task`1<Dictionary`2<ThreadId, Chunks`1<RawCallStack>>> callstacksTask, Task`1<Result> callTreePreprocessingTask);
    private static ChunkList`1<CallStackEvent> ConvertRawToIndexed(Chunks`1<RawCallStack> rawCallStackInfo, CompactTreePtrToIndexConverter ptrIndexer, Int64& counter);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.ReattachEvent : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Tick>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskRunInfo <TaskRunInfo>k__BackingField;
    public ulong Tick { get; public set; }
    public TaskRunInfo TaskRunInfo { get; public set; }
    public ReattachEvent(ulong Tick, TaskRunInfo TaskRunInfo);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual ulong get_Tick();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tick(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public TaskRunInfo get_TaskRunInfo();
    [CompilerGeneratedAttribute]
public void set_TaskRunInfo(TaskRunInfo value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ReattachEvent left, ReattachEvent right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ReattachEvent left, ReattachEvent right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ReattachEvent other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(UInt64& Tick, TaskRunInfo& TaskRunInfo);
}
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.RunWaitLayer : object {
    [NullableContextAttribute("1")]
public static LayerDescriptor GetLayer();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.SampleProvider : object {
    private static ILogger ourLog;
    private static SampleProvider();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.SampleProvider/<ReadOrThrow>d__3")]
public static Task`1<ReadResult> ReadOrThrow(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller, Task`1<ServiceSectionInfo> serviceSectionInfoTask);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.ServiceSection : object {
    private static ILogger ourLog;
    private static ServiceSection();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ServiceSection/<ReadOrThrow>d__2")]
public static Task`1<ServiceSectionInfo> ReadOrThrow(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ServiceSection/<ProcessManifestServiceSection>d__3")]
private static Task`1<ServiceSectionInfo> ProcessManifestServiceSection(Lifetime lifetime, ManifestSection section, Action`1<Message> onMessage, IProgressIndicator controller);
    private static Nullable`1<ThreadId> CheckMainThreadId(Nullable`1<ThreadId> mainThreadId, Action`1<Message> onMessage);
    public static ServiceSectionInfo ProcessProtobufServiceSection(Lifetime lifetime, SnapshotStorageSection section, Action`1<Message> onMessage, IProgressIndicator controller);
    private static void LogServiceMessage(ServiceLogSeverity sev, string message, Action`1<Message> onMessage);
    private static void LogSessionsInterrupted(List`1<EventLogSessionIntersepted> interuptedSessions, Action`1<Message> onMessage);
    private static void LogSessionsInterrupted(List`1<SessionInterruptedId2> interuptedSessions, Action`1<Message> onMessage);
    private static void LogLosts(Dictionary`2<Provider, UInt32> losts, Dictionary`2<Provider, List`1<EventLogProviderInUse>> prsInUse, Action`1<Message> onMessage);
    private static void LogLosts(Dictionary`2<string, UInt32> losts, List`1<ProviderInUseId10> prsInUse, Action`1<Message> onMessage);
    private static void IgnoreTplLosts(Dictionary`2<Provider, UInt32> lostProviderToCount);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.ServiceSectionInfo : object {
    [CompilerGeneratedAttribute]
private ulong <StartTick>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <TicksPerSecond>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <StopTick>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ThreadId> <MainThreadId>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<ThreadId, UInt32> <ThreadRoots>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<ThreadId, ChunkList`1<ThreadNameEvent>> <ThreadNameEvents>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public ulong StartTick { get; public set; }
    public ulong TicksPerSecond { get; public set; }
    public UInt32 ProcessId { get; public set; }
    public ulong StopTick { get; public set; }
    public Nullable`1<ThreadId> MainThreadId { get; public set; }
    public Dictionary`2<ThreadId, UInt32> ThreadRoots { get; public set; }
    public Dictionary`2<ThreadId, ChunkList`1<ThreadNameEvent>> ThreadNameEvents { get; public set; }
    public ServiceSectionInfo(ulong StartTick, ulong TicksPerSecond, UInt32 ProcessId, ulong StopTick, Nullable`1<ThreadId> MainThreadId, Dictionary`2<ThreadId, UInt32> ThreadRoots, Dictionary`2<ThreadId, ChunkList`1<ThreadNameEvent>> ThreadNameEvents);
    [CompilerGeneratedAttribute]
protected ServiceSectionInfo(ServiceSectionInfo original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ulong get_StartTick();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_StartTick(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_TicksPerSecond();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TicksPerSecond(ulong value);
    [CompilerGeneratedAttribute]
public UInt32 get_ProcessId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ProcessId(UInt32 value);
    [CompilerGeneratedAttribute]
public ulong get_StopTick();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_StopTick(ulong value);
    [CompilerGeneratedAttribute]
public Nullable`1<ThreadId> get_MainThreadId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MainThreadId(Nullable`1<ThreadId> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<ThreadId, UInt32> get_ThreadRoots();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ThreadRoots(Dictionary`2<ThreadId, UInt32> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<ThreadId, ChunkList`1<ThreadNameEvent>> get_ThreadNameEvents();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ThreadNameEvents(Dictionary`2<ThreadId, ChunkList`1<ThreadNameEvent>> value);
    public sealed virtual long MemoryUsage();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ServiceSectionInfo left, ServiceSectionInfo right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ServiceSectionInfo left, ServiceSectionInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ServiceSectionInfo other);
    [CompilerGeneratedAttribute]
public virtual ServiceSectionInfo <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(UInt64& StartTick, UInt64& TicksPerSecond, UInt32& ProcessId, UInt64& StopTick, Nullable`1& MainThreadId, Dictionary`2& ThreadRoots, Dictionary`2& ThreadNameEvents);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.Sql.CombinedSqlLayer : OnOffEventSource {
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.Sql.EFCoreProcessor : SqlProcessorBase {
    private Stack`1<ScopeData> myScopes;
    public EFCoreProcessor(CombinedSqlLayer combinedSqlLayer, SqlObjectsTracker objectsTracker, SqlConstants sqlConstants);
    public void HandleSqlConnectionOpening(ulong tick, string connectionId, string connectionString);
    public void HandleSqlConnectionOpened(ulong tick, string connectionId, string connectionString);
    public void HandleSqlConnectionClosing(ulong tick, string connectionId);
    public void HandleSqlConnectionClosed(ulong tick, string connectionId);
    public void HandleSqlConnectionError(ulong tick, string connectionId);
    public void HandleSqlCommandExecuting(ulong tick, string commandId, string commandText, string connectionId);
    public void HandleSqlCommandExecuted(ulong tick, string commandId, string duration);
    public void HandleSqlCommandError(ulong tick, string commandId);
    public void HandleSqlCommandDataReaderDisposing(ulong tick, string commandId, string readCount);
    private static bool AreEqualScopes(ScopeData s1, ScopeData s2);
    private void EnterScope(ScopeData data, Func`1<IEventDetails> func);
    private void ExitScope(ScopeData data, Action`1<ScopeData> func);
    private Guid TryParseGuid(string guid);
    public Chunks`1<Event> GetData();
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.Sql.Event : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Tick>k__BackingField;
    [CompilerGeneratedAttribute]
private OnOffStates <State>k__BackingField;
    [CompilerGeneratedAttribute]
private IEventDetails <Details>k__BackingField;
    public ulong Tick { get; public set; }
    public OnOffStates State { get; public set; }
    public IEventDetails Details { get; public set; }
    public Event(ulong Tick, OnOffStates State, IEventDetails Details);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual ulong get_Tick();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tick(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public OnOffStates get_State();
    [CompilerGeneratedAttribute]
public void set_State(OnOffStates value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IEventDetails get_Details();
    [CompilerGeneratedAttribute]
public void set_Details(IEventDetails value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(Event left, Event right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(Event left, Event right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(Event other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(UInt64& Tick, OnOffStates& State, IEventDetails& Details);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.Sql.EventDetails : object {
    private UInt64[] myValues;
    private byte myPendingProperties;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public ulong Item { get; public set; }
    private byte PendingProperties { get; private set; }
    public bool HasPendingProperties { get; }
    public EventDetails(UInt64[] values);
    [CompilerGeneratedAttribute]
protected EventDetails(EventDetails original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    public sealed virtual ulong get_Item(int index);
    public sealed virtual void set_Item(int index, ulong value);
    private byte get_PendingProperties();
    private void set_PendingProperties(byte value);
    public sealed virtual bool get_HasPendingProperties();
    public sealed virtual void StartPendingProperty();
    public sealed virtual void StopPendingProperty();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(EventDetails left, EventDetails right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(EventDetails left, EventDetails right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(EventDetails other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual EventDetails <Clone>$();
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.DotTrace.Features.Processing.Timeline.V2.Sql.IEventDetails {
    public ulong Item { get; public set; }
    public bool HasPendingProperties { get; }
    public abstract virtual ulong get_Item(int index);
    public abstract virtual void set_Item(int index, ulong value);
    public abstract virtual bool get_HasPendingProperties();
    public abstract virtual void StartPendingProperty();
    public abstract virtual void StopPendingProperty();
}
public interface JetBrains.DotTrace.Features.Processing.Timeline.V2.Sql.ISqlEventConsumer {
    public abstract virtual bool TryProcess(ulong tick, string sqlMessage);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.Sql.NetCoreSqlProcessor : SqlProcessorBase {
    private static Regex ourRSetConnectionString;
    private static Regex ourRConnectionOpen;
    private static Regex ourRConnectionOpenFw;
    private static Regex ourRConnectionOpenAsync;
    private static Regex ourRConnectionOpenAsyncFw;
    private static Regex ourRConnectionClose;
    private static Regex ourRConnectionCloseFw;
    private static Regex ourRConnectionCloseCorrelation;
    private static Regex ourRSendPreLoginHandshake;
    private static Regex ourRSetConnection;
    private static Regex ourRSetConnectionFw;
    private static Regex ourRSetCommandText;
    private static Regex ourRSetCommandTextFw;
    private static Regex ourRExecuteCommand;
    private static Regex ourRExecuteCommandFw;
    private static Regex ourRCommandCorrelation;
    private static Regex ourRCommandCorrelationAsyncFw;
    private static Regex ourRBeginTransaction;
    private static Regex ourRBeginTransactionFw;
    private static Regex ourREndTransaction;
    private static Regex ourREndTransactionFw;
    private static Regex ourRSqlTransactionCorrelation;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, int> <ConnectionGuidToConnectionId>k__BackingField;
    private bool myAsyncOperationStarted;
    private Stack`1<ScopeData> myScopes;
    private Dictionary`2<string, int> ConnectionGuidToConnectionId { get; }
    public NetCoreSqlProcessor(CombinedSqlLayer combinedSqlLayer, SqlObjectsTracker objectsTracker, SqlConstants sqlConstants);
    private static NetCoreSqlProcessor();
    [CompilerGeneratedAttribute]
private Dictionary`2<string, int> get_ConnectionGuidToConnectionId();
    public void TryProcessScopeEnter(ulong tick, string message);
    public void ProcessCorrelation(ulong tick, string message);
    public void TryProcess(ulong tick, string message);
    public void ProcessScopeLeave(ulong tick);
    private void OnBeforeEvent(ulong tick);
    private bool TryMatchSetConnectionString(string message);
    private bool TryMatchConnectionOpenAsync(ulong tick, string message);
    [CanBeNullAttribute]
private ScopeData CurrentScope();
    private bool TryMatchConnectionOpen(ulong tick, string message);
    private bool TryMatchConnectionClose(ulong tick, string message);
    private bool TryMatchConnectionCloseCorrelation(string message);
    private bool TryMatchSendPreLoginHandshake(string message);
    private bool TryMatchSetConnection(string message);
    private bool TryMatchSetCommandText(string message);
    private bool TryMatchExecuteCommand(ulong tick, string message);
    private bool TryMatchCommandCorrelation(ulong tick, string message);
    private bool TryMatchCommandCorrelationAsyncFw(ulong tick, string message);
    private void ProcessCommandCorrelation(ulong tick, Match match);
    private void ProcessInternalExecuteReaderAsync(ulong tick, Match match);
    private static void ResetDetails(IEventDetails details);
    private bool TryMatchBeginTransaction(ulong tick, string message);
    private bool TryMatchEndTransaction(ulong tick, string message);
    private bool TryMatchTransactionCorrelation(ulong tick, string message);
    public Chunks`1<Event> GetData();
}
internal class JetBrains.DotTrace.Features.Processing.Timeline.V2.Sql.NetFrameworkSqlCommandParser : ScopedSqlCommandParser {
    private static Regex ourRSetConnection;
    private static Regex ourRSetCommandText;
    private static Regex ourRSetConnectionString;
    private static Regex ourRInternalExecuteReader;
    private static Regex ourRExecuteReader;
    private static Regex ourRExecuteScalar;
    private static Regex ourRExecuteNonQuery;
    private static Regex ourRExecuteXmlReader;
    private static Regex ourRConnectionOpen;
    private static Regex ourRConnectionOpenAsync;
    private static Regex ourRConnectionClose;
    private static Regex ourRBeginTransaction;
    private static Regex ourRCommitTransaction;
    private static Regex ourRRollbackTransaction;
    private int mySetCommandTextId;
    private bool myInternalExecuteReaderActivated;
    protected Regex SetCommandText { get; }
    protected Regex ExecuteReader { get; }
    protected Regex ExecuteScalar { get; }
    protected Regex ExecuteNonQuery { get; }
    protected Regex BeginTransaction { get; }
    protected Regex CommitTransaction { get; }
    protected Regex RollbackTransaction { get; }
    public NetFrameworkSqlCommandParser(CombinedSqlLayer sqlLayer, SqlObjectsTracker objectsTracker, SqlConstants sqlConstants);
    private static NetFrameworkSqlCommandParser();
    protected virtual Regex get_SetCommandText();
    protected virtual Regex get_ExecuteReader();
    protected virtual Regex get_ExecuteScalar();
    protected virtual Regex get_ExecuteNonQuery();
    protected virtual Regex get_BeginTransaction();
    protected virtual Regex get_CommitTransaction();
    protected virtual Regex get_RollbackTransaction();
    public virtual bool TryProcess(ulong tick, string message);
    protected virtual bool TryMatchSetConnectionString(string message);
    private bool TryMatchSetCommandText(string message);
    protected virtual bool TryMatchInternalExecuteReader(ulong tick, string message);
    private bool TryMatchExecuteReader(ulong tick, string message);
    private bool TryMatchExecuteScalar(ulong tick, string message);
    private bool TryMatchExecuteNonQuery(ulong tick, string message);
    protected virtual bool TryMatchExecuteXmlReader(ulong tick, string message);
    private bool TryMatchBeginTransaction(ulong tick, string message);
    private bool TryMatchCommitTransaction(ulong tick, string message);
    private bool TryMatchRollbackTransaction(ulong tick, string message);
    protected virtual bool TryMatchSetConnection(string message);
    protected virtual bool TryMatchConnectionOpen(ulong tick, string message);
    private bool TryMatchConnectionClose(ulong tick, string message);
    [CompilerGeneratedAttribute]
private IEventDetails <TryMatchBeginTransaction>b__39_0(int connectionId);
    [CompilerGeneratedAttribute]
private IEventDetails <TryMatchCommitTransaction>b__40_0(int _);
    [CompilerGeneratedAttribute]
private IEventDetails <TryMatchRollbackTransaction>b__41_0(int _);
    [CompilerGeneratedAttribute]
private IEventDetails <TryMatchConnectionOpen>g__ObjectIdToDetails|43_0(int connectionId);
    [CompilerGeneratedAttribute]
private IEventDetails <TryMatchConnectionClose>b__44_0(int connectionId);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.Sql.NetFrameworkSqlProcessor : object {
    private CombinedSqlLayer mySqlLayer;
    private IList`1<ISqlEventConsumer> mySqlConsumers;
    public NetFrameworkSqlProcessor(CombinedSqlLayer sqlLayer, SqlObjectsTracker objectsTracker, SqlConstants sqlConstants);
    public void ProcessEvent(ulong tick, string message);
    public Chunks`1<Event> GetData();
}
internal class JetBrains.DotTrace.Features.Processing.Timeline.V2.Sql.OdbcCommandParser : ScopedSqlCommandParser {
    private static Regex ourRConnectionOpen;
    private static Regex ourRConnectionString;
    private static Regex ourRExecute;
    private static Regex ourRConnectionClose;
    private ConnectionDetails myOpeningConnection;
    public OdbcCommandParser(CombinedSqlLayer sqlLayer, SqlObjectsTracker objectsTracker, SqlConstants sqlConstants);
    private static OdbcCommandParser();
    public sealed virtual bool TryProcess(ulong tick, string message);
    private bool TryMatchConnectionString(string message);
    private bool TryMatchExecuteQuery(ulong tick, string message);
    private bool TryMatchConnectionOpen(ulong tick, string message);
    private bool TryMatchConnectionClose(ulong tick, string message);
    [CompilerGeneratedAttribute]
private IEventDetails <TryMatchExecuteQuery>b__9_0(Match match);
    [CompilerGeneratedAttribute]
private IEventDetails <TryMatchConnectionOpen>b__10_0(int id);
    [CompilerGeneratedAttribute]
private IEventDetails <TryMatchConnectionClose>b__11_0(int id);
}
internal class JetBrains.DotTrace.Features.Processing.Timeline.V2.Sql.OleDbSqlCommandParser : NetFrameworkSqlCommandParser {
    private static Regex ourRSetCommandText;
    private static Regex ourRLocalTransactionStart;
    private static Regex ourRExecuteReader;
    private static Regex ourRExecuteScalar;
    private static Regex ourRExecuteNonQuery;
    private static Regex ourRBeginTransaction;
    private static Regex ourRCommitTransaction;
    private static Regex ourRRollbackTransaction;
    private bool myLocalTransactionStartActivated;
    protected Regex SetCommandText { get; }
    protected Regex ExecuteReader { get; }
    protected Regex ExecuteScalar { get; }
    protected Regex ExecuteNonQuery { get; }
    protected Regex BeginTransaction { get; }
    protected Regex CommitTransaction { get; }
    protected Regex RollbackTransaction { get; }
    public OleDbSqlCommandParser(CombinedSqlLayer sqlLayer, SqlObjectsTracker objectsTracker, SqlConstants sqlConstants);
    private static OleDbSqlCommandParser();
    public virtual bool TryProcess(ulong tick, string message);
    protected virtual Regex get_SetCommandText();
    protected virtual Regex get_ExecuteReader();
    protected virtual Regex get_ExecuteScalar();
    protected virtual Regex get_ExecuteNonQuery();
    protected virtual Regex get_BeginTransaction();
    protected virtual Regex get_CommitTransaction();
    protected virtual Regex get_RollbackTransaction();
    protected virtual bool TryMatchSetConnectionString(string message);
    protected virtual bool TryMatchSetConnection(string message);
    protected virtual bool TryMatchConnectionOpen(ulong tick, string message);
    protected virtual bool TryMatchInternalExecuteReader(ulong tick, string message);
    protected virtual bool TryMatchExecuteXmlReader(ulong tick, string message);
    private bool TryMatchLocalTransactionStart(ulong tick, string message);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.Sql.OnOffEventSource : object {
    public Chunks`1<Event> Data;
    public bool IsOn { get; }
    public void On(ulong tick, IEventDetails details);
    public void Off(ulong tick, IEventDetails details);
    public bool get_IsOn();
}
public abstract class JetBrains.DotTrace.Features.Processing.Timeline.V2.Sql.ScopedSqlCommandParser : SqlProcessorBase {
    private static Regex ourRLeave;
    private Stack`1<string> myScopes;
    protected ScopedSqlCommandParser(CombinedSqlLayer combinedSqlLayer, SqlObjectsTracker objectsTracker, SqlConstants sqlConstants);
    private static ScopedSqlCommandParser();
    protected bool IsInsideScopeNow();
    protected bool TryMatchScopeEnter(Regex regex, ulong tick, string message, Func`2<int, IEventDetails> objectIdToDetails);
    protected bool TryMatchScopeEnter(Regex regex, ulong tick, string message, Func`2<Match, IEventDetails> matchToDetails);
    protected bool TryMatchScopeLeave(ulong tick, string message);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.Sql.SqlConstants : object {
    private IStringWriter myMessageWriter;
    private IStringWriter myConnectionStringWriter;
    private Nullable`1<ulong> myOpenConnectionTextId;
    private Nullable`1<ulong> myBeginTransactionTextId;
    private Nullable`1<ulong> myCommitTransactionTextId;
    private Nullable`1<ulong> myRollbackTransactionTextId;
    private Nullable`1<ulong> myUnknownTextId;
    private Nullable`1<ulong> myUnknownConnectionId;
    private Nullable`1<ulong> myCloseConnectionTextId;
    private Nullable`1<ulong> myEmptyTextId;
    private Nullable`1<ulong> myEmptyConnectionId;
    public ulong OpenConnectionTextId { get; }
    public ulong BeginTransactionTextId { get; }
    public ulong CommitTransactionTextId { get; }
    public ulong RollbackTransactionTextId { get; }
    public ulong UnknownTextId { get; }
    public ulong UnknownConnectionId { get; }
    public ulong CloseConnectionTextId { get; }
    public ulong EmptyTextId { get; }
    public ulong EmptyConnectionId { get; }
    public SqlConstants(IStringWriter messageWriter, IStringWriter connectionStringWriter);
    public ulong get_OpenConnectionTextId();
    public ulong get_BeginTransactionTextId();
    public ulong get_CommitTransactionTextId();
    public ulong get_RollbackTransactionTextId();
    public ulong get_UnknownTextId();
    public ulong get_UnknownConnectionId();
    public ulong get_CloseConnectionTextId();
    public ulong get_EmptyTextId();
    public ulong get_EmptyConnectionId();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.Sql.SqlLayer : object {
    private static ILogger ourLog;
    private static SqlLayer();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.Sql.SqlLayer/<Read>d__3")]
public static Task`1<Result> Read(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.Sql.SqlLayer/<ReadOrThrow>d__4")]
public static Task`1<Result> ReadOrThrow(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller);
    [ExtensionAttribute]
private static void ExpectCallStack(ProviderEvents result, ThreadId threadId, ulong tick, Expand expand);
    private static void AddCallStack(ProviderEvents result, ThreadId threadId, StackWalk callStack);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.Sql.SqlLayer/<WriteOrThrow>d__7")]
public static Task`1<WrittenLayerInfo> WriteOrThrow(Lifetime lifetime, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<Result> dataTask, FileSystemPath convertedPath);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.Sql.SqlLayer/<GetPropertyDescriptors>d__8")]
private static IEnumerable`1<EventPropertyDescriptor> GetPropertyDescriptors();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.Sql.SqlLayer/<ReadEfCoreSql>d__9")]
private static Task`1<ProviderEvents> ReadEfCoreSql(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller, SqlObjectsTracker sqlObjectsTracker, SqlConstants sqlConstants);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.Sql.SqlLayer/<ReadMicrosoftDataSql>d__10")]
private static Task`1<ProviderEvents> ReadMicrosoftDataSql(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller, SqlObjectsTracker sqlObjectsTracker, SqlConstants sqlConstants);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.Sql.SqlLayer/<ReadNetFrameworkSql>d__11")]
private static Task`1<Dictionary`2<ThreadId, Chunks`1<Event>>> ReadNetFrameworkSql(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller, SqlObjectsTracker sqlObjectsTracker, SqlConstants sqlConstants);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.Sql.SqlLayer/<ReadOdbcSql>d__12")]
private static Task`1<Dictionary`2<ThreadId, Chunks`1<Event>>> ReadOdbcSql(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller, SqlObjectsTracker sqlObjectsTracker, SqlConstants sqlConstants);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.Sql.SqlObjectsTracker : object {
    private IStringWriter myMessageWriter;
    private CachingStringWriter myConnectionStringWriter;
    private SqlConstants mySqlConstants;
    private Dictionary`2<int, SqlCommandInfo> myCommands;
    private Dictionary`2<int, SqlTransactionInfo> myTransactions;
    private Dictionary`2<int, SqlConnectionInfo> myConnections;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, int> <ConnectionGuidToConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<int> <HandshakeWaitList>k__BackingField;
    public Dictionary`2<string, int> ConnectionGuidToConnectionId { get; }
    public List`1<int> HandshakeWaitList { get; }
    public SqlObjectsTracker(IStringWriter messageWriter, CachingStringWriter connectionStringWriter, SqlConstants sqlConstants);
    private ulong WriteMessage(string text);
    private ulong WriteConnectionString(string text);
    public void SetCommandText(int commandId, string text);
    public void SetConnectionString(int connectionId, string text);
    public bool HasCommandTextId(int commandId);
    public ulong GetCommandTextId(int commandId);
    public ulong GetConnectionStringId(int connectionId);
    public bool HasConnectionIdForCommand(int commandId);
    public ulong GetConnectionStringIdForCommand(int commandId);
    public void SetConnectionIdForCommand(int commandId, int connectionId);
    public bool HasConnectionIdForTransaction(int transactionId);
    public ulong GetConnectionStringIdForTransaction(int transactionId);
    public void SetConnectionIdForTransaction(int transactionId, int connectionId);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, int> get_ConnectionGuidToConnectionId();
    [CompilerGeneratedAttribute]
public List`1<int> get_HandshakeWaitList();
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.Sql.SqlProcessorBase : object {
    protected CombinedSqlLayer CombinedSqlLayer;
    protected SqlObjectsTracker ObjectsTracker;
    protected SqlConstants SqlConstants;
    protected SqlProcessorBase(CombinedSqlLayer combinedSqlLayer, SqlObjectsTracker objectsTracker, SqlConstants sqlConstants);
    protected IEventDetails CreateCommandDetails(int commandId);
    protected IEventDetails CreateConnectionDetails(ulong commandFilterTextId, int connectionId);
    protected IEventDetails CreateServiceEventDetails(ulong commandFilterTextId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.SubsystemEvents : object {
    private static ILogger ourLog;
    private static SubsystemEvents();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.SubsystemEvents/<Process>d__2")]
public static Task`1<Dictionary`2<ThreadId, ChunkList`1<SubsystemEvent>>> Process(Task`1<ChunkList`1<GlobalRuntimeSuspend>> globalSuspendsTask, Task`1<Dictionary`2<ThreadId, ThreadStateChangeInfo>> cutOffByThreadStateEvents, Task`1<Dictionary`2<ThreadId, GCInfo>> gcEventsCutOffByThreadLifetime, Task`1<Dictionary`2<ThreadId, ChunkList`1<FileIoEvent>>> fileIoTask, Task`1<Dictionary`2<ThreadId, JitInfo>> jitTask, Task`1<Dictionary`2<ThreadId, ChunkList`1<SubsystemOnOffEvent>>> contentionsTask, Task`1<Dictionary`2<ThreadId, Chunks`1<Event>>> sqlTask, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.SubsystemEvents/<ProcessOrThrow>d__3")]
public static Task`1<Dictionary`2<ThreadId, ChunkList`1<SubsystemEvent>>> ProcessOrThrow(Task`1<ChunkList`1<GlobalRuntimeSuspend>> globalSuspendsTask, Task`1<Dictionary`2<ThreadId, ThreadStateChangeInfo>> cutOffByThreadStateEvents, Task`1<Dictionary`2<ThreadId, GCInfo>> gcEventsCutOffByThreadLifetime, Task`1<Dictionary`2<ThreadId, ChunkList`1<FileIoEvent>>> fileIoTask, Task`1<Dictionary`2<ThreadId, JitInfo>> jitTask, Task`1<Dictionary`2<ThreadId, ChunkList`1<SubsystemOnOffEvent>>> contentionsTask, Task`1<Dictionary`2<ThreadId, Chunks`1<Event>>> sqlTask);
    private static ChunkList`1<SubsystemOnOffEvent> MergeGCEventsWithOverlapCounter(ChunkList`1<SubsystemOnOffEvent> threadGCsSubsystems, ChunkList`1<SubsystemOnOffEvent> globalGCsSubsystemsForThisThread);
    private static ChunkList`1<SubsystemOnOffEvent> SubsystemsFromSqlEvents(Chunks`1<Event> events);
    private static ChunkList`1<SubsystemOnOffEvent> SubsystemsFromJitEvents(JitInfo jitInfo);
    private static ChunkList`1<SubsystemOnOffEvent> SubsystemsFromGlobalGCEvents(ChunkList`1<GlobalRuntimeSuspend> globalSuspends, ulong startTick, ulong endTick);
    private static ChunkList`1<SubsystemOnOffEvent> SubsystemsFromThreadGCEvents(GCInfo threadGCs);
    private static ChunkList`1<SubsystemOnOffEvent> SubsystemsFromFileIoEvents(ChunkList`1<FileIoEvent> fileIo);
    private static ChunkList`1<SubsystemOnOffEvent> SubsystemsFromThreadsStatesEvent(ThreadStateChangeInfo threadStates);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.SubsystemEvents/<AttachSubsystemNodes>d__11")]
public static Task`1<CallStacksAndTree> AttachSubsystemNodes(Task`1<CallStacksAndTree> callStacksAndTreeTask, Task`1<Dictionary`2<ThreadId, ChunkList`1<SubsystemEvent>>> subsystemEventsTask, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.SubsystemEvents/<AttachSubsystemNodesOrThrow>d__12")]
public static Task`1<CallStacksAndTree> AttachSubsystemNodesOrThrow(Task`1<CallStacksAndTree> callStacksAndTreeTask, Task`1<Dictionary`2<ThreadId, ChunkList`1<SubsystemEvent>>> subsystemEventsTask);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.SubsystemOnOffEvent : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Tick>k__BackingField;
    [CompilerGeneratedAttribute]
private SubsystemEventType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOn>k__BackingField;
    public ulong Tick { get; public set; }
    public SubsystemEventType Type { get; public set; }
    public bool IsOn { get; public set; }
    public SubsystemOnOffEvent(ulong Tick, SubsystemEventType Type, bool IsOn);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual ulong get_Tick();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tick(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public SubsystemEventType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(SubsystemEventType value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsOn();
    [CompilerGeneratedAttribute]
public void set_IsOn(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(SubsystemOnOffEvent left, SubsystemOnOffEvent right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(SubsystemOnOffEvent left, SubsystemOnOffEvent right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(SubsystemOnOffEvent other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(UInt64& Tick, SubsystemEventType& Type, Boolean& IsOn);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.SummaryEvent : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Tick>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <RunningThreadsCount>k__BackingField;
    public ulong Tick { get; public set; }
    public ushort RunningThreadsCount { get; public set; }
    public SummaryEvent(ulong Tick, ushort RunningThreadsCount);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual ulong get_Tick();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tick(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ushort get_RunningThreadsCount();
    [CompilerGeneratedAttribute]
public void set_RunningThreadsCount(ushort value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(SummaryEvent left, SummaryEvent right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(SummaryEvent left, SummaryEvent right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(SummaryEvent other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(UInt64& Tick, UInt16& RunningThreadsCount);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.TaskRunInfo : ValueType {
    [CompilerGeneratedAttribute]
private TaskId <TaskId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TaskRunId>k__BackingField;
    [CompilerGeneratedAttribute]
private AwaitInfo <AwaitInfo>k__BackingField;
    public TaskId TaskId { get; public set; }
    public int TaskRunId { get; public set; }
    public AwaitInfo AwaitInfo { get; public set; }
    public TaskRunInfo(TaskId TaskId, int TaskRunId, AwaitInfo AwaitInfo);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public TaskId get_TaskId();
    [CompilerGeneratedAttribute]
public void set_TaskId(TaskId value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_TaskRunId();
    [CompilerGeneratedAttribute]
public void set_TaskRunId(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public AwaitInfo get_AwaitInfo();
    [CompilerGeneratedAttribute]
public void set_AwaitInfo(AwaitInfo value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(TaskRunInfo left, TaskRunInfo right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(TaskRunInfo left, TaskRunInfo right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(TaskRunInfo other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(TaskId& TaskId, Int32& TaskRunId, AwaitInfo& AwaitInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.TasksLayer : object {
    private static ILogger ourLog;
    private static TasksLayer();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.TasksLayer/<WriteOrThrow>d__1")]
public static Task`1<WrittenLayerInfo> WriteOrThrow(Lifetime lifetime, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<ReadResult> tplReadTask, FileSystemPath convertedPath);
}
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.ThreadDescriptorBuilder : object {
    private static ILogger ourLog;
    private static ThreadDescriptorBuilder();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ThreadDescriptorBuilder/<CollectThreadDescriptorsOrThrow>d__2")]
public static Task`1<Result> CollectThreadDescriptorsOrThrow(Lifetime lifetime, FileSystemPath convertedDir, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<Dictionary`2<ThreadId, ThreadStateChangeInfo>> kernelStatesTask, Task`1<GetThreadName> threadNameGetterTask, Task`1<ReadResult> netRuntimeReadTask, Task`1<Dictionary`2<ThreadId, Chunks`1<Expand>>> sampleProviderEvents, Task`1<HashSet`1<ThreadId>> clrThreadsDetectorTask, Task`1[] clrWorkerStacks);
    private static void TrySetThreadType(HashSet`1<ThreadId> nonTypedThreads, ulong startTick, ulong stopTick, Dictionary`2<ThreadId, T> layer, Func`3<T, int, bool> predicate, ThreadTypes threadType, Dictionary`2<ThreadId, ThreadTypes> threadToType);
    private static void TrySetThreadType(HashSet`1<ThreadId> nonTypedThreads, ulong startTick, ulong stopTick, Dictionary`2<ThreadId, Chunks`1<T>> layer, Func`2<T, bool> predicate, ThreadTypes threadType, Dictionary`2<ThreadId, ThreadTypes> threadToType);
    private static void TrySetThreadType(HashSet`1<ThreadId> nonTypedThreads, ulong startTick, ulong stopTick, Dictionary`2<ThreadId, ChunkList`1<T>> layer, Func`2<T, bool> predicate, ThreadTypes threadType, Dictionary`2<ThreadId, ThreadTypes> threadToType);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.ThreadLifecycleChange : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Tick>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessId <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private Lifecycle <Type>k__BackingField;
    public ulong Tick { get; public set; }
    public ProcessId ProcessId { get; public set; }
    public Lifecycle Type { get; public set; }
    public ThreadLifecycleChange(ulong Tick, ProcessId ProcessId, Lifecycle Type);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual ulong get_Tick();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tick(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ProcessId get_ProcessId();
    [CompilerGeneratedAttribute]
public void set_ProcessId(ProcessId value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Lifecycle get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Lifecycle value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ThreadLifecycleChange left, ThreadLifecycleChange right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ThreadLifecycleChange left, ThreadLifecycleChange right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ThreadLifecycleChange other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(UInt64& Tick, ProcessId& ProcessId, Lifecycle& Type);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.ThreadLifetimeChange : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Tick>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOn>k__BackingField;
    public ulong Tick { get; public set; }
    public bool IsOn { get; public set; }
    public ThreadLifetimeChange(ulong Tick, bool IsOn);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual ulong get_Tick();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tick(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsOn();
    [CompilerGeneratedAttribute]
public void set_IsOn(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ThreadLifetimeChange left, ThreadLifetimeChange right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ThreadLifetimeChange left, ThreadLifetimeChange right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ThreadLifetimeChange other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(UInt64& Tick, Boolean& IsOn);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.ThreadLifetimeInfo : object {
    private static ILogger ourLog;
    private static ThreadLifetimeInfo();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ThreadLifetimeInfo/<CreateOrThrow>d__2")]
public static Task`1<Result> CreateOrThrow(Task`1<Dictionary`2<ThreadId, ChunkList`1<ThreadLifecycleChange>>> threadLifecycleInfoTask, Task`1<Dictionary`2<ThreadId, ChunkList`1<TickEvent>>> terminatedEventsTask, Task`1<ServiceSectionInfo> sectionReader);
    private static Result GenerateThreadLifetimeInfo(Dictionary`2<ThreadId, ChunkList`1<ThreadLifecycleChange>> threadLifecycleInfo, ServiceSectionInfo serviceSectionInfo, Dictionary`2<ThreadId, ChunkList`1<TickEvent>> terminatedEvents, Int64& counter);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ThreadLifetimeInfo/<SinglePairPerThreadOrThrow>d__4")]
public static Task`1<Result> SinglePairPerThreadOrThrow(Task`1<Result> allThreadLifetimeEventsTask, Action`1<Message> onMessage);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.ThreadNameEvent : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Tick>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public ulong Tick { get; public set; }
    [NullableAttribute("1")]
public string Name { get; public set; }
    [NullableContextAttribute("1")]
public ThreadNameEvent(ulong Tick, string Name);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual ulong get_Tick();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tick(ulong value);
    [IsReadOnlyAttribute]
[NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Name(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ThreadNameEvent left, ThreadNameEvent right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ThreadNameEvent left, ThreadNameEvent right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ThreadNameEvent other);
    [IsReadOnlyAttribute]
[NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void Deconstruct(UInt64& Tick, String& Name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.ThreadNameMap : object {
    private static ILogger ourLog;
    private static ThreadNameMap();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ThreadNameMap/<CreateOrThrow>d__1")]
public static Task`1<GetThreadName> CreateOrThrow(Task`1<Dictionary`2<ThreadId, ChunkList`1<ThreadNameEvent>>> mergedThreadNameEvents);
    private static bool TryGetThreadName(List`1<ValueTuple`3<ThreadId, ulong, string>> intervalMap, ThreadId threadId, ulong tick, String& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.ThreadNames : object {
    private static ILogger ourLog;
    private static ThreadNames();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ThreadNames/<Merge>d__1")]
public static Task`1<Dictionary`2<ThreadId, ChunkList`1<ThreadNameEvent>>> Merge(Task`1<Dictionary`2<ThreadId, ChunkList`1<ThreadNameEvent>>> kernelThreadNameEventsTask, Task`1<Dictionary`2<ThreadId, ChunkList`1<ThreadNameEvent>>> serviceSectionThreadNameEventsTask, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.ThreadNames/<MergeOrThrow>d__2")]
public static Task`1<Dictionary`2<ThreadId, ChunkList`1<ThreadNameEvent>>> MergeOrThrow(Task`1<Dictionary`2<ThreadId, ChunkList`1<ThreadNameEvent>>> kernelThreadNameEventsTask, Task`1<Dictionary`2<ThreadId, ChunkList`1<ThreadNameEvent>>> serviceSectionThreadNameEventsTask);
}
public enum JetBrains.DotTrace.Features.Processing.Timeline.V2.ThreadState : Enum {
    public byte value__;
    public static ThreadState Running;
    public static ThreadState Waiting;
    public static ThreadState Ready;
    public static ThreadState Dead;
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.ThreadStateChangeInfo : ValueType {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private ChunkList`1<ulong> <Tick>k__BackingField;
    [NullableAttribute("1")]
public ChunkList`1<ThreadState> ThreadStates;
    [NullableAttribute("1")]
public ChunkList`1<Running> RunningDetails;
    [NullableAttribute("1")]
public ChunkList`1<Waiting> WaitingDetails;
    [NullableAttribute("1")]
public ChunkList`1<ulong> Tick { get; }
    public int Count { get; }
    public ThreadStateChangeInfo(int count);
    [IsReadOnlyAttribute]
[NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual ChunkList`1<ulong> get_Tick();
    public void AddRunning(ulong tick, Running details);
    public void AddWaiting(ulong tick, Waiting details);
    public void AddWaiting(ulong tick);
    public void AddReady(ulong tick);
    public void AddDead(ulong tick);
    public sealed virtual int get_Count();
    public sealed virtual ThreadStateChangeInfo CreateEmptyEntity(int count);
    public sealed virtual void AddFromOther(ThreadStateChangeInfo source, int sourceIndex);
    public sealed virtual long MemoryUsage();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ThreadStateChangeInfo left, ThreadStateChangeInfo right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ThreadStateChangeInfo left, ThreadStateChangeInfo right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ThreadStateChangeInfo other);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.ThreadStatesCollector : object {
    [CompilerGeneratedAttribute]
private bool <readyThreadCallStacksEnabled>P;
    public Dictionary`2<ThreadId, ThreadStateChangeInfo> StateChangeInfo;
    public Dictionary`2<ThreadId, ChunkList`1<ActivatingThread>> ActivatingInfo;
    public Dictionary`2<ThreadId, ChunkList`1<TickEvent>> TerminatedEvents;
    public ThreadStatesCollector(bool readyThreadCallStacksEnabled);
    public void ReadyThread(ulong tick, ThreadId sourceThreadId, ThreadId targetThreadId, Dictionary`2<ThreadId, Chunks`1<Expand>> expandInfo);
    public void CSwitch(ulong tick, ThreadId oldThreadId, State oldThreadState, Reason oldThreadWaitReason, ThreadId newThreadId, UInt32 core, Dictionary`2<ThreadId, Chunks`1<Expand>> expandInfo);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.TickEvent : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Tick>k__BackingField;
    public ulong Tick { get; public set; }
    public TickEvent(ulong Tick);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual ulong get_Tick();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tick(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(TickEvent left, TickEvent right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(TickEvent left, TickEvent right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(TickEvent other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(UInt64& Tick);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.TplEvents : object {
    private static ILogger ourLog;
    private static int MaxTaskRecursionDepth;
    private static TplEvents();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.TplEvents/<Read>d__3")]
public static Task`1<ReadResult> Read(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.TplEvents/<ReadOrThrow>d__4")]
public static Task`1<ReadResult> ReadOrThrow(Lifetime lifetime, ISnapshotStorage snapshotStorage, IProgressIndicator controller, Action`1<Message> onMessage);
    private static SubmittedTaskNode TryGetParentExecutingNode(Dictionary`2<ThreadId, ReattachState> threadToReattachState, ThreadId threadId);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.TplEvents/<ReattachCallStacks>d__13")]
public static Task`1<ReattachResult> ReattachCallStacks(Task`1<CallStacksAndTree> callStacksAndCallTree, Task`1<ReadResult> tplReadTask, IProgressIndicator controller, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.TplEvents/<ReattachCallStacksOrThrow>d__14")]
public static Task`1<ReattachResult> ReattachCallStacksOrThrow(Task`1<CallStacksAndTree> callStacksAndCallTree, Task`1<ReadResult> tplReadTask, IProgressIndicator controller);
    [LocalizableAttribute("False")]
private static string PrintRatio(long hit, long total);
    private static CallStackPtr ResolveContinuationPtr(Dictionary`2<ThreadId, ChunkList`1<ReattachEvent>> reattachInfo, Dictionary`2<ThreadId, ChunkList`1<CallStackEvent>> callStacks, CallTreeWithStoragesWriter callTreeWithStoragesWriter, Dictionary`2<ValueTuple`2<TaskId, AwaitInfo>, ReattachData> awaitInfoToDataCache, ValueTuple`2<TaskId, AwaitInfo> taskRunInfo, Func`2<TaskId, ulong> getTaskNameId, List`1<ulong> fuidsBuffer, HashSet`1<ValueTuple`2<ThreadId, ulong>> resultRecursivelyFoldedSubmitPtrRefs, int recursionDepthGuard);
    private static ReattachData BuildResult(SubmitterId submittedId, CallStackPtr targetPtr, ulong taskNameId, CallTreeWithStoragesWriter callTreeWithStoragesWriter, bool addRecursionFoldedNode);
    [NullableContextAttribute("0")]
private static ValueTuple`2<CallStackPtr, CallStackPtr> AddAdditionalNodes(SubmitterId submittedId, CallStackPtr targetPtr, ulong taskNameId, CallTreeWithStoragesWriter callTreeWithStoragesWriter, bool addRecursionFoldedNode);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static void <ReadOrThrow>g__RegisterTask|4_0(ThreadId threadId, ulong tick, TaskId continuationTaskId, SubmittedTaskNode parentNode, <>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
internal static void <ReadOrThrow>g__RegisterContinuation|4_1(ThreadId threadId, ulong tick, TaskId awaitedTaskId, TaskId continuationTaskId, SubmittedTaskNode parentInfo, Dictionary`2<TaskId, SubmittedTaskPointer> taskToNode, <>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
internal static bool <ReadOrThrow>g__PopAwaitInfoByContinuation|4_2(TaskId continuationTaskId, ValueTuple`2& awaitInfoAndParent, <>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
internal static void <ReadOrThrow>g__HandleTaskScheduledSend|4_3(ThreadId threadId, ulong tick, TaskId taskID, <>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
internal static void <ReattachCallStacksOrThrow>g__Off|14_3(ulong tick, <>c__DisplayClass14_3& );
    [CompilerGeneratedAttribute]
internal static void <ReattachCallStacksOrThrow>g__On|14_4(ulong tick, CallStackPtr callStack, ulong duration, ulong taskNameId, <>c__DisplayClass14_3& );
    [CompilerGeneratedAttribute]
internal static bool <ReattachCallStacksOrThrow>g__IsOn|14_5(<>c__DisplayClass14_3& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.UIFreezeEvents : object {
    private static ILogger ourLog;
    private static UIFreezeEvents();
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.UIFreezeEvents/<Read>d__3")]
public static Task`1<ReadResult> Read(Lifetime lifetime, ISnapshotStorage snapshotStorage, Task`1<ServiceSectionInfo> serviceSectionReader, IProgressIndicator controller, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.UIFreezeEvents/<ReadOrThrow>d__4")]
public static Task`1<ReadResult> ReadOrThrow(Lifetime lifetime, ISnapshotStorage snapshotStorage, Task`1<ServiceSectionInfo> serviceSectionReader, IProgressIndicator controller);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.UIFreezeEvents/<Write>d__5")]
public static Task`1<WrittenLayerInfo> Write(Lifetime lifetime, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<Dictionary`2<ThreadId, Chunks`1<UIFreezeInfo>>> eventsTask, FileSystemPath convertedPath, Action`1<Message> onMessage);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.UIFreezeEvents/<WriteOrThrow>d__6")]
public static Task`1<WrittenLayerInfo> WriteOrThrow(Lifetime lifetime, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<Dictionary`2<ThreadId, Chunks`1<UIFreezeInfo>>> eventsTask, FileSystemPath convertedPath);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.UIFreezeEvents/<GetPropertyDescriptors>d__7")]
private static IEnumerable`1<EventPropertyDescriptor> GetPropertyDescriptors();
    [CompilerGeneratedAttribute]
internal static void <ReadOrThrow>g__OnStop|4_0(Chunks`1<UIFreezeInfo> events, ulong delayEnd);
    [CompilerGeneratedAttribute]
internal static void <ReadOrThrow>g__Process|4_1(Chunks`1<UIFreezeInfo> events, UInt32 messageCheckDelayMs, UInt32 timeSinceOldestInput, ulong tick, UInt64& delayEnd, <>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
internal static void <ReadOrThrow>g__ProcessInputProcessDelay|4_2(Chunks`1<UIFreezeInfo> events, UInt32 timeSinceOldestInputMs, ulong tick, UInt64& delayEnd, <>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
internal static void <ReadOrThrow>g__ProcessMessageCheckDelay|4_3(Chunks`1<UIFreezeInfo> events, UInt32 delayTimeMs, UInt32 timeSinceOldestInputMs, ulong tick, UInt64& delayEnd, <>c__DisplayClass4_0& );
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.UIFreezeInfo : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Tick>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOn>k__BackingField;
    public ulong Tick { get; public set; }
    public bool IsOn { get; public set; }
    public UIFreezeInfo(ulong Tick, bool IsOn);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual ulong get_Tick();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tick(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsOn();
    [CompilerGeneratedAttribute]
public void set_IsOn(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(UIFreezeInfo left, UIFreezeInfo right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(UIFreezeInfo left, UIFreezeInfo right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(UIFreezeInfo other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(UInt64& Tick, Boolean& IsOn);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.UIFreezeInfoEx : object {
    [ExtensionAttribute]
public static void AddOff(Chunks`1<UIFreezeInfo> chunks, ulong tick);
    [ExtensionAttribute]
public static void AddOn(Chunks`1<UIFreezeInfo> chunks, ulong tick);
}
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.UnpackingPaths : object {
    [CompilerGeneratedAttribute]
private FileSystemPath <CurrentPath>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath[] <OldPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <TempPath>k__BackingField;
    public static UnpackingPaths Temp;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public FileSystemPath CurrentPath { get; public set; }
    public FileSystemPath[] OldPaths { get; public set; }
    public FileSystemPath TempPath { get; public set; }
    public UnpackingPaths(FileSystemPath CurrentPath, FileSystemPath[] OldPaths, FileSystemPath TempPath);
    [CompilerGeneratedAttribute]
protected UnpackingPaths(UnpackingPaths original);
    private static UnpackingPaths();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public FileSystemPath get_CurrentPath();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CurrentPath(FileSystemPath value);
    [CompilerGeneratedAttribute]
public FileSystemPath[] get_OldPaths();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_OldPaths(FileSystemPath[] value);
    [CompilerGeneratedAttribute]
public FileSystemPath get_TempPath();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TempPath(FileSystemPath value);
    public static UnpackingPaths FromSnapshotSettings(ISnapshotsSettingsProvider snapshotsSettingsProvider);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(UnpackingPaths left, UnpackingPaths right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(UnpackingPaths left, UnpackingPaths right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(UnpackingPaths other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual UnpackingPaths <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(FileSystemPath& CurrentPath, FileSystemPath[]& OldPaths, FileSystemPath& TempPath);
}
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.UnpackingPipeline : object {
    private static ILogger ourLog;
    private static UnpackingPipeline();
    public static FileSystemPath UnpackInputFileIfNecessary(Lifetime lifetime, FileSystemPath snapshotPath, TimelineInputFileType type, UnpackingPaths unpackingPaths, bool removePreviouslyUnpackedData, IProgressIndicator progress);
    private static void CopyUnpackedStateFileIfOriginalNotExist(FileSystemPath originalSnapshotPath, FileSystemPath unpackedSnapshotPath);
    private static Guid CalculateInputFileGuid(FileSystemPath snapshotPath, Boolean& oneTimeGuid);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.Utils : object {
    [ExtensionAttribute]
public static Task WriteStringSectionAsync(MemoryStream stringStream, Lifetime lifetime, FileSystemPath convertedPath, int knownProperty);
    [AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.Utils/<Select>d__1`2")]
[ExtensionAttribute]
public static Task`1<TDst> Select(Task`1<TSrc> task, Func`2<TSrc, TDst> selector);
}
public enum JetBrains.DotTrace.Features.Processing.Timeline.V2.WriteEvent : Enum {
    public int value__;
    public static WriteEvent On;
    public static WriteEvent Off;
    public static WriteEvent OnOff;
    public static WriteEvent Skip;
}
public static class JetBrains.DotTrace.Features.Processing.Timeline.V2.Writer : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("JetBrains.DotTrace.Features.Processing.Timeline.V2.Writer/<Catch>d__1`1")]
public static Task`1<WrittenLayerInfo> Catch(CreateWriter`1<T> writeOrThrow, Lifetime lifetime, Task`1<ServiceSectionInfo> serviceSectionReader, Task`1<T> eventsTask, FileSystemPath convertedPath, Action`1<Message> onMessage, UserArea userArea);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.Features.Processing.Timeline.V2.WriteResult : object {
    [CompilerGeneratedAttribute]
private ImmutableList`1<SectionInfo> <Sections>k__BackingField;
    [CompilerGeneratedAttribute]
private CallTreePtrToDfsNodePtr <Map>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public ImmutableList`1<SectionInfo> Sections { get; public set; }
    public CallTreePtrToDfsNodePtr Map { get; public set; }
    public WriteResult(ImmutableList`1<SectionInfo> Sections, CallTreePtrToDfsNodePtr Map);
    [CompilerGeneratedAttribute]
protected WriteResult(WriteResult original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ImmutableList`1<SectionInfo> get_Sections();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Sections(ImmutableList`1<SectionInfo> value);
    [CompilerGeneratedAttribute]
public CallTreePtrToDfsNodePtr get_Map();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Map(CallTreePtrToDfsNodePtr value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(WriteResult left, WriteResult right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(WriteResult left, WriteResult right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(WriteResult other);
    [CompilerGeneratedAttribute]
public virtual WriteResult <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(ImmutableList`1& Sections, CallTreePtrToDfsNodePtr& Map);
}
public interface JetBrains.DotTrace.Features.RecentSnapshots.IRecentSnapshotProviderGetter {
    public abstract virtual ILiveRecentSnapshot GetCurrent();
}
public interface JetBrains.DotTrace.Features.RecentSnapshots.ISnapshotContainerProvider {
    public abstract virtual bool SnapshotSupported(FileSystemPath originalInputFile);
    public abstract virtual SnapshotSectionsContainer GetSections(Lifetime lifetime, FileSystemPath originalInputFile);
}
public abstract class JetBrains.DotTrace.Features.RecentSnapshots.RecentSnapshotsContainerBase : object {
    protected ILiveRecentSnapshot ReadRecentSnapshotFromContainer(Lifetime lifetime, IComponentContainer container, IRecentSnapshotsStorage storage);
    private ILiveRecentSnapshot ReadRecentSnapshot(Lifetime lifetime, ISnapshotInfo snapshotInfo, IRecentSnapshotsStorage storage, IRecentSnapshotInfoReader recentSnapshotInfoReader);
}
public class JetBrains.DotTrace.Features.RecentSnapshots.SnapshotSectionsContainer : object {
    [CompilerGeneratedAttribute]
private IAccessor`1<IFullEnvironmentSection> <EnvironmentSection>k__BackingField;
    [CompilerGeneratedAttribute]
private ISectionAccessor`1<IModulePathSection> <ModulePathSection>k__BackingField;
    public IAccessor`1<IFullEnvironmentSection> EnvironmentSection { get; }
    public ISectionAccessor`1<IModulePathSection> ModulePathSection { get; }
    public SnapshotSectionsContainer(IAccessor`1<IFullEnvironmentSection> environmentSection, ISectionAccessor`1<IModulePathSection> modulePathSection);
    [CompilerGeneratedAttribute]
public IAccessor`1<IFullEnvironmentSection> get_EnvironmentSection();
    [CompilerGeneratedAttribute]
public ISectionAccessor`1<IModulePathSection> get_ModulePathSection();
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.RemoteEnvironmentActivator.ZoneMarker : object {
}
public class JetBrains.DotTrace.Features.Remoting.Helpers.ActiveSnapshotZonesList : object {
    public Type SnapshotTypeZone;
    public bool IsSingleProcess;
    public IEnumerable`1<Type> Zones { get; }
    public ActiveSnapshotZonesList(Type snapshotTypeZone, bool isSingleProcess);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Remoting.Helpers.ActiveSnapshotZonesList/<get_Zones>d__4")]
public IEnumerable`1<Type> get_Zones();
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Remoting.Helpers.ActiveSnapshotZonesList/<GetAllZones>d__5")]
private IEnumerable`1<Type> GetAllZones(Type zone);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Remoting.Helpers.ActiveSnapshotZonesListEx : object {
    [ExtensionAttribute]
public static Type[] GetZonesToRun(ActiveSnapshotZonesList zonesList, Type[] extrazones);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Remoting.Helpers.PropertyRegistratorHelper : object {
    [ExtensionAttribute]
public static void RegisterSnapshotRemoteProperties(IDataProvider`1<IComponentContainer> containerProvider, Lifetime snapshotLifetime);
}
public static class JetBrains.DotTrace.Features.Remoting.Helpers.SnapshotComponentContainerBuilderHelpers : object {
    public static ComponentContainer CreateSnapshotComponentContainer(Lifetime lifetime, IComponentContainer parentContainer, object snapshotOrigin, IValueResolver resolver, bool forceLoadingRemoteZone);
}
public class JetBrains.DotTrace.Features.Remoting.Helpers.SnapshotParentContainer : object {
    public IComponentContainer ParentContainer;
    public SnapshotParentContainer(IComponentContainer parentContainer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Remoting.Interfaces.BuildContainerResultEx : object {
    [ExtensionAttribute]
public static IComponentContainer GetContainerSafe(ContainerBuildResult result);
    [ExtensionAttribute]
public static bool HasError(ContainerBuildResult result);
    [ExtensionAttribute]
[LocalizableAttribute("True")]
public static string GetErrorText(ContainerBuildResult result, FileSystemPath snapshotPath, string downloadNewLink);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DotTrace.Features.Remoting.Interfaces.ContainerBuildResult : object {
    [NullableAttribute("2")]
private IComponentContainer myComponentContainer;
    public ContainerResult Result;
    [NullableAttribute("2")]
public string ExtraErrorText;
    public bool HasContainer { get; }
    public IComponentContainer Container { get; }
    [NullableContextAttribute("2")]
private ContainerBuildResult(IComponentContainer componentContainer, ContainerResult result, string extraErrorText);
    public bool get_HasContainer();
    public IComponentContainer get_Container();
    public static ContainerBuildResult Error(ContainerResult error, string errorText);
    public static ContainerBuildResult FromComponentContainer(IComponentContainer componentContainer);
}
public enum JetBrains.DotTrace.Features.Remoting.Interfaces.ContainerResult : Enum {
    public int value__;
    public static ContainerResult BuildSuccessfully;
    public static ContainerResult SnapshotAlreadyOpened;
    public static ContainerResult DataWasDeletedOrMoved;
    public static ContainerResult UnsupportedFormat;
    public static ContainerResult UnsupportedCpuType;
    public static ContainerResult UnsupportedLinuxLibC;
    public static ContainerResult SnapshotNewerThanViewer;
    public static ContainerResult MultiFileContainerError;
    public static ContainerResult BrokenSnapshot;
    public static ContainerResult InternalError;
}
public interface JetBrains.DotTrace.Features.Remoting.Interfaces.IConverterComponentContainerFactory {
    public abstract virtual IComponentContainer CreateConverterComponentContainer(Lifetime lifetime, IComponentContainer parentComponentContainer, SnapshotProcessingInput processingInput);
}
[NullableContextAttribute("1")]
public interface JetBrains.DotTrace.Features.Remoting.Interfaces.ISingleSnapshotComponentContainerBuilder {
    public abstract virtual bool IsSnapshotSupported(FileSystemPath indexFile);
    public abstract virtual IDataProvider`1<ContainerBuildResult> BuildComponentContainer(Lifetime lt, FileSystemPath path, string artefactName, SnapshotOpeningScenario scenario, IComponentContainer parentComponentContainer);
}
[NullableContextAttribute("1")]
public interface JetBrains.DotTrace.Features.Remoting.Interfaces.ISnapshotComponentContainerBuilder {
    public abstract virtual bool IsSnapshotSignatureSupported(FileSystemPath path);
    public abstract virtual IDataProvider`1<ContainerBuildResult> BuildSnapshotComponentContainer(Lifetime lt, FileSystemPath path, string artefactName, SnapshotOpeningScenario scenario, IComponentContainer parentComponentContainer);
}
public interface JetBrains.DotTrace.Features.Remoting.Interfaces.ISnapshotComponentContainerFactory {
    public abstract virtual IComponentContainer CreateSnapshotComponentContainer(Lifetime lifetime, IComponentContainer parentComponentContainer, SnapshotOrigin origin);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.DotTrace.Features.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string AppBrowserSnapshotsStoreSettingsSettingDescription { get; }
    public static string AppBrowserStoreSettingsSettingDescription { get; }
    public static string AsyncSupportSettingDescription { get; }
    public static string CallTreeHistoryActiveItemIndexSettingDescription { get; }
    public static string CallTreeHistorySettingDescription { get; }
    public static string CallTreeVisualStateSettingDescription { get; }
    public static string CallTreeGroupedByThreadVisualStateSettingDescription { get; }
    public static string CopyRawSectionsIntoConvertedSettingDescription { get; }
    public static string CopySignatureToClipboardActionText { get; }
    public static string CopyToClipboardActionText { get; }
    public static string CoreSettingsSettingDescription { get; }
    public static string CurrentStoreSettingDescription { get; }
    public static string ExcludedNodesSettingDescription { get; }
    public static string ExcludeFilterOfSubsystemsSettingDescription { get; }
    public static string FilterByMethodsOwnTimeActionText { get; }
    public static string IncludeFilterOfSubsystemsSettingDescription { get; }
    public static string KeepRawSnapshotAfterConversionSettingDescription { get; }
    public static string ListOfManuallyHiddenThreadsDoesNotIncludeThreadsHiddenByDefaultLikeNativeOnesSettingDescription { get; }
    public static string ListOfManuallyUnhiddenThreadsWhenUserMakesVisibleAThreadHiddenByDefaultSettingDescription { get; }
    public static string LogETWBridgeSettingDescription { get; }
    public static string MarkAllFunctionsFromAssemblyAsSystemActionText { get; }
    public static string MarkModuleAsSystemActionText { get; }
    public static string MarkModuleAsUserActionText { get; }
    public static string MetadataPresentationSettingsSettingDescription { get; }
    public static string NavigateBackActionDescription { get; }
    public static string NavigateBackActionText { get; }
    public static string NavigateForwardActionDescription { get; }
    public static string NavigateForwardActionText { get; }
    public static string NextImportantCallActionText { get; }
    public static string OldsCountSettingDescription { get; }
    public static string OldStoresSettingDescription { get; }
    public static string PinnedThreadsInAThreadsListSettingDescription { get; }
    public static string PlainListShowNodeActionText { get; }
    public static string ResetCallTreeFilterActionText { get; }
    public static string ReturnToPreviousScopeActionDescription { get; }
    public static string ReturnToPreviousScopeActionText { get; }
    public static string SavedStateOfAllEnumFiltersSettingDescription { get; }
    public static string SavedStateOfAllToggleFiltersSettingDescription { get; }
    public static string SavedStateOfAllYesNoFiltersSettingDescription { get; }
    public static string ScopeToThisActionText { get; }
    public static string SelectedAnalysisSubjectSettingDescription { get; }
    public static string SelectedRangeSettingDescription { get; }
    public static string ShowFuidsSettingDescription { get; }
    public static string ShowSnapshotCacheFolderActionText { get; }
    public static string SnapshotSettingsSettingDescription { get; }
    public static string SnapshotStateSettingDescription { get; }
    public static string SortingModeOfAThreadsListPayloadByDefaultNoneWhenUserRearrangesThreadsSettingDescription { get; }
    public static string SortingOrderOfAThreadsListSettingDescription { get; }
    public static string TimelineLayoutSettingsSettingDescription { get; }
    public static string TopMethodsHeightSettingDescription { get; }
    public static string PlainListTableStarHeightSettingDescription { get; }
    public static string VisibleRangeSettingDescription { get; }
    public static string CallTreeScopeToAsync_ActionText { get; }
    public static string CallTreeRestoreNodeAction_Text { get; }
    public static string CallTreeRestoreAllAction_Text { get; }
    public static string CallTreeOpenCurrentMethodInstanceAction_ActionText { get; }
    public static string CallTreeOpenAllMethodInstancesAction_ActionText { get; }
    public static string CallTreeFoldUnfoldDefaultAction_Folding_ActionName { get; }
    public static string CallTreeFoldUnfoldDefaultAction_SystemFolding_ActionName { get; }
    public static string CallTreeFoldUnfoldDefaultAction_RecursiveFolding_ActionName { get; }
    public static string CallTreeExcludeMethodAction_ActionText { get; }
    public static string CallTreeExcludeCurrentPathAction_ActionText { get; }
    public static string CopySubtreeLogic_ActionText { get; }
    public static string CallTreeCopySubtreeAction_ActionText { get; }
    public static string CallTreeShowProperties_ActionText { get; }
    public static string PlainListDetailsStarHeightSettingDescription { get; }
    public static string DontShowViewerMigrationWarningSettingDescription { get; }
    public static string EnumFilterHeights { get; }
    public static string OpenSnapshot_FileDialogError_Title { get; }
    public static string OpenSnapshot_FileDialog_Title { get; }
    public static string OpenSnapshot_FileDialogError_Comparison_TheSameSnapshot { get; }
    public static string OpenSnapshot_FileDialogError_Comparison_CannotCompareTimelineSnapshots { get; }
    public static string OpenSnapshot_FileDialogError_BrokenOrUnsupportedSnapshot { get; }
    public static string OpenSnapshot_FileDialogError_Comparison_SnapshotTypeMismatch { get; }
    public static string OpenSnapshot_FileDialog_AllSnapshotsFilesDescription { get; }
    public static string OpenSnapshot_FileDialog_AllFilesDescription { get; }
    public static string SnapshotProcessing_NoRuntimeEvents { get; }
    public static string EventTableShiftLeftTickAction_ActionText { get; }
    public static string EventTableShiftRightTickAction_ActionText { get; }
    public static string EventTableShiftLeftAndRightTickAction_ActionText { get; }
    public static string EventTableSelectThreadsAction_ActionText { get; }
    public static string ModulesAssemblyNamePresentationBuilder_NoAssemblyName_Text { get; }
    public static string ModulesAssemblyNamePresentationBuilder_Unknown_Text { get; }
    public static string ProcessingWarning_NoKernelSampling { get; }
    public static string ProcessingWarning_MainThreadNotDetected { get; }
    public static string ProcessingWarning_NoRundownEvents { get; }
    public static string ProcessingWarning_IgnoredThreadLifetimesBecauseOfThreadIdReuse { get; }
    public static string ProcessingWarning_ErroneousFileIO { get; }
    public static string ProcessingWarning_TooManyTplEvents { get; }
    public static string ProcessingException_HTTP { get; }
    public static string ProcessingException_SQL { get; }
    public static string ProcessingException_KernelCallStacks { get; }
    public static string ProcessingException_CallStacksProcessing { get; }
    public static string ProcessingException_ThreadTypes { get; }
    public static string ProcessingException_ThreadStates { get; }
    public static string ProcessingException_GC { get; }
    public static string ProcessingException_DebugOutput { get; }
    public static string ProcessingException_Exceptions { get; }
    public static string ProcessingException_FileIO { get; }
    public static string ProcessingException_LineInformation { get; }
    public static string ProcessingException_JIT { get; }
    public static string ProcessingException_ActivatedByFilter { get; }
    public static string ProcessingException_NativeAllocations { get; }
    public static string ProcessingException_ManagedAllocations { get; }
    public static string ProcessingException_Subsystems { get; }
    public static string ProcessingException_ThreadNames { get; }
    public static string ProcessingException_AsyncAwaitAndTasks { get; }
    public static string ProcessingException_UIFreeze { get; }
    public static string ProcessingException_ManagedEvents { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_AppBrowserSnapshotsStoreSettingsSettingDescription();
    public static string get_AppBrowserStoreSettingsSettingDescription();
    public static string get_AsyncSupportSettingDescription();
    public static string get_CallTreeHistoryActiveItemIndexSettingDescription();
    public static string get_CallTreeHistorySettingDescription();
    public static string get_CallTreeVisualStateSettingDescription();
    public static string get_CallTreeGroupedByThreadVisualStateSettingDescription();
    public static string get_CopyRawSectionsIntoConvertedSettingDescription();
    public static string get_CopySignatureToClipboardActionText();
    public static string get_CopyToClipboardActionText();
    public static string get_CoreSettingsSettingDescription();
    public static string get_CurrentStoreSettingDescription();
    public static string get_ExcludedNodesSettingDescription();
    public static string get_ExcludeFilterOfSubsystemsSettingDescription();
    public static string get_FilterByMethodsOwnTimeActionText();
    public static string get_IncludeFilterOfSubsystemsSettingDescription();
    public static string get_KeepRawSnapshotAfterConversionSettingDescription();
    public static string get_ListOfManuallyHiddenThreadsDoesNotIncludeThreadsHiddenByDefaultLikeNativeOnesSettingDescription();
    public static string get_ListOfManuallyUnhiddenThreadsWhenUserMakesVisibleAThreadHiddenByDefaultSettingDescription();
    public static string get_LogETWBridgeSettingDescription();
    public static string get_MarkAllFunctionsFromAssemblyAsSystemActionText();
    public static string get_MarkModuleAsSystemActionText();
    public static string get_MarkModuleAsUserActionText();
    public static string get_MetadataPresentationSettingsSettingDescription();
    public static string get_NavigateBackActionDescription();
    public static string get_NavigateBackActionText();
    public static string get_NavigateForwardActionDescription();
    public static string get_NavigateForwardActionText();
    public static string get_NextImportantCallActionText();
    public static string get_OldsCountSettingDescription();
    public static string get_OldStoresSettingDescription();
    public static string get_PinnedThreadsInAThreadsListSettingDescription();
    public static string get_PlainListShowNodeActionText();
    public static string get_ResetCallTreeFilterActionText();
    public static string get_ReturnToPreviousScopeActionDescription();
    public static string get_ReturnToPreviousScopeActionText();
    public static string get_SavedStateOfAllEnumFiltersSettingDescription();
    public static string get_SavedStateOfAllToggleFiltersSettingDescription();
    public static string get_SavedStateOfAllYesNoFiltersSettingDescription();
    public static string get_ScopeToThisActionText();
    public static string get_SelectedAnalysisSubjectSettingDescription();
    public static string get_SelectedRangeSettingDescription();
    public static string get_ShowFuidsSettingDescription();
    public static string get_ShowSnapshotCacheFolderActionText();
    public static string get_SnapshotSettingsSettingDescription();
    public static string get_SnapshotStateSettingDescription();
    public static string get_SortingModeOfAThreadsListPayloadByDefaultNoneWhenUserRearrangesThreadsSettingDescription();
    public static string get_SortingOrderOfAThreadsListSettingDescription();
    public static string get_TimelineLayoutSettingsSettingDescription();
    public static string get_TopMethodsHeightSettingDescription();
    public static string get_PlainListTableStarHeightSettingDescription();
    public static string get_VisibleRangeSettingDescription();
    public static string get_CallTreeScopeToAsync_ActionText();
    public static string get_CallTreeRestoreNodeAction_Text();
    public static string get_CallTreeRestoreAllAction_Text();
    public static string get_CallTreeOpenCurrentMethodInstanceAction_ActionText();
    public static string get_CallTreeOpenAllMethodInstancesAction_ActionText();
    public static string get_CallTreeFoldUnfoldDefaultAction_Folding_ActionName();
    public static string get_CallTreeFoldUnfoldDefaultAction_SystemFolding_ActionName();
    public static string get_CallTreeFoldUnfoldDefaultAction_RecursiveFolding_ActionName();
    public static string get_CallTreeExcludeMethodAction_ActionText();
    public static string get_CallTreeExcludeCurrentPathAction_ActionText();
    public static string get_CopySubtreeLogic_ActionText();
    public static string get_CallTreeCopySubtreeAction_ActionText();
    public static string get_CallTreeShowProperties_ActionText();
    public static string get_PlainListDetailsStarHeightSettingDescription();
    public static string get_DontShowViewerMigrationWarningSettingDescription();
    public static string get_EnumFilterHeights();
    public static string get_OpenSnapshot_FileDialogError_Title();
    public static string get_OpenSnapshot_FileDialog_Title();
    public static string get_OpenSnapshot_FileDialogError_Comparison_TheSameSnapshot();
    public static string get_OpenSnapshot_FileDialogError_Comparison_CannotCompareTimelineSnapshots();
    public static string get_OpenSnapshot_FileDialogError_BrokenOrUnsupportedSnapshot();
    public static string get_OpenSnapshot_FileDialogError_Comparison_SnapshotTypeMismatch();
    public static string get_OpenSnapshot_FileDialog_AllSnapshotsFilesDescription();
    public static string get_OpenSnapshot_FileDialog_AllFilesDescription();
    public static string get_SnapshotProcessing_NoRuntimeEvents();
    public static string get_EventTableShiftLeftTickAction_ActionText();
    public static string get_EventTableShiftRightTickAction_ActionText();
    public static string get_EventTableShiftLeftAndRightTickAction_ActionText();
    public static string get_EventTableSelectThreadsAction_ActionText();
    public static string get_ModulesAssemblyNamePresentationBuilder_NoAssemblyName_Text();
    public static string get_ModulesAssemblyNamePresentationBuilder_Unknown_Text();
    public static string get_ProcessingWarning_NoKernelSampling();
    public static string get_ProcessingWarning_MainThreadNotDetected();
    public static string get_ProcessingWarning_NoRundownEvents();
    public static string get_ProcessingWarning_IgnoredThreadLifetimesBecauseOfThreadIdReuse();
    public static string get_ProcessingWarning_ErroneousFileIO();
    public static string get_ProcessingWarning_TooManyTplEvents();
    public static string get_ProcessingException_HTTP();
    public static string get_ProcessingException_SQL();
    public static string get_ProcessingException_KernelCallStacks();
    public static string get_ProcessingException_CallStacksProcessing();
    public static string get_ProcessingException_ThreadTypes();
    public static string get_ProcessingException_ThreadStates();
    public static string get_ProcessingException_GC();
    public static string get_ProcessingException_DebugOutput();
    public static string get_ProcessingException_Exceptions();
    public static string get_ProcessingException_FileIO();
    public static string get_ProcessingException_LineInformation();
    public static string get_ProcessingException_JIT();
    public static string get_ProcessingException_ActivatedByFilter();
    public static string get_ProcessingException_NativeAllocations();
    public static string get_ProcessingException_ManagedAllocations();
    public static string get_ProcessingException_Subsystems();
    public static string get_ProcessingException_ThreadNames();
    public static string get_ProcessingException_AsyncAwaitAndTasks();
    public static string get_ProcessingException_UIFreeze();
    public static string get_ProcessingException_ManagedEvents();
}
public interface JetBrains.DotTrace.Features.SavedState.IIndexedValueEntry`2 {
    public abstract virtual Maybe`1<TState> Read(TIndex index);
    public abstract virtual void Write(TIndex index, TState value);
    public abstract virtual void ResetValue(TIndex index);
}
public class JetBrains.DotTrace.Features.SavedState.IndexedJsonValueEntry`3 : object {
    [NotNullAttribute]
private IContextBoundSettingsStore myContext;
    [NotNullAttribute]
private Expression`1<Func`2<TSettingsKey, IIndexedEntry`2<TIndex, string>>> myLambda;
    private JsonSerializerSettings mySettings;
    public IndexedJsonValueEntry`3(IContextBoundSettingsStore context, Expression`1<Func`2<TSettingsKey, IIndexedEntry`2<TIndex, string>>> lambda, JsonSerializerSettings settings);
    public sealed virtual Maybe`1<T> Read(TIndex index);
    public sealed virtual void Write(TIndex index, T value);
    public sealed virtual void ResetValue(TIndex index);
}
public class JetBrains.DotTrace.Features.SavedState.IndexedValueEntry`3 : object {
    [NotNullAttribute]
private IContextBoundSettingsStore myContext;
    [NotNullAttribute]
private Expression`1<Func`2<TSettingsKey, IIndexedEntry`2<TIndex, T>>> myLambda;
    public IndexedValueEntry`3(IContextBoundSettingsStore context, Expression`1<Func`2<TSettingsKey, IIndexedEntry`2<TIndex, T>>> lambda);
    private sealed virtual override Maybe`1<T> JetBrains.DotTrace.Features.SavedState.IIndexedValueEntry<TIndex,T>.Read(TIndex index);
    public T Read(TIndex index);
    public sealed virtual void Write(TIndex index, T value);
    public sealed virtual void ResetValue(TIndex index);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.SavedState.IndexedValueEntryEx : object {
    [ExtensionAttribute]
public static IValueEntry`1<TState> ToValueEntry(IIndexedValueEntry`2<TIndex, TState> indexedEntry, TIndex index);
}
public interface JetBrains.DotTrace.Features.SavedState.ISavedStateValueAccessor`1 {
    public IDataProvider`1<TProvider> Provider { get; }
    public abstract virtual void Write(Maybe`1<TProvider> state);
    public abstract virtual TProvider Read();
    public abstract virtual IDataProvider`1<TProvider> get_Provider();
}
public interface JetBrains.DotTrace.Features.SavedState.ISavedStateValueConverter`2 {
    public TProvider ProviderDefaultValue { get; }
    public TStorage StorageDefaultValue { get; }
    public abstract virtual TProvider ProviderFilter(TStorage input);
    public abstract virtual TStorage StorageFilter(TProvider input);
    public abstract virtual TProvider get_ProviderDefaultValue();
    public abstract virtual TStorage get_StorageDefaultValue();
    public abstract virtual bool IsStorageDefault(TStorage input);
    public abstract virtual bool IsProviderDefault(TProvider input);
}
public interface JetBrains.DotTrace.Features.SavedState.ISnapshotStateAccessor {
    public abstract virtual IValueEntry`1<T> GetJsonValueEntry(Expression`1<Func`2<SnapshotState, string>> lambda, JsonSerializerSettings settings);
    public abstract virtual IValueEntry`1<T> GetValueEntry(Expression`1<Func`2<SnapshotState, T>> lambda);
    public abstract virtual IIndexedValueEntry`2<TIndex, T> GetIndexedJsonValueEntry(Expression`1<Func`2<SnapshotState, IIndexedEntry`2<TIndex, string>>> lambda, JsonSerializerSettings settings);
    public abstract virtual IIndexedValueEntry`2<TIndex, T> GetIndexedValueEntry(Expression`1<Func`2<SnapshotState, IIndexedEntry`2<TIndex, T>>> lambda);
}
public interface JetBrains.DotTrace.Features.SavedState.ISnapshotStateAccessorFactory {
    public abstract virtual ISnapshotStateAccessor GetAccessor(MountPath mountPath);
}
public interface JetBrains.DotTrace.Features.SavedState.ISnapshotStateStorageProvider {
}
public interface JetBrains.DotTrace.Features.SavedState.IValueEntry`1 {
    public abstract virtual Maybe`1<T> Read();
    public abstract virtual void Write(T value);
    public abstract virtual void ResetValue();
}
public class JetBrains.DotTrace.Features.SavedState.JsonValueEntry`2 : object {
    [NotNullAttribute]
private IContextBoundSettingsStore myContext;
    [NotNullAttribute]
private Expression`1<Func`2<TSettingsKey, string>> myLambda;
    private JsonSerializerSettings mySettings;
    public JsonValueEntry`2(IContextBoundSettingsStore context, Expression`1<Func`2<TSettingsKey, string>> lambda, JsonSerializerSettings settings);
    public sealed virtual Maybe`1<T> Read();
    public sealed virtual void Write(T value);
    public sealed virtual void ResetValue();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.SavedState.JsonValueEntryEx : object {
    [ExtensionAttribute]
public static void WriteAndAssert(IIndexedValueEntry`2<TIndex, T> entry, TIndex index, T value, Func`3<T, T, bool> equals);
    [ExtensionAttribute]
public static void WriteAndAssert(IValueEntry`1<T> entry, T value, Func`3<T, T, bool> equals);
}
public class JetBrains.DotTrace.Features.SavedState.SavedStateDataControllerContainer`1 : object {
    [CanBeNullAttribute]
private IProviderContainerMonitor`1<TProvider> myIntentionalStateChangeMonitor;
    private IDataSink`1<ISavedStateValueAccessor`1<TProvider>> mySink;
    [CompilerGeneratedAttribute]
private IDataProvider`1<TProvider> <Provider>k__BackingField;
    public TProvider Value { get; public set; }
    public IDataProvider`1<TProvider> Provider { get; }
    public SavedStateDataControllerContainer`1(Lifetime lifetime, IDataProvider`1<ISavedStateValueAccessor`1<TProvider>> accessorProvider, IProviderContainerMonitor`1<TProvider> intentionalStateChangeMonitor);
    public sealed virtual TProvider get_Value();
    public sealed virtual void set_Value(TProvider value);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<TProvider> get_Provider();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.SavedState.SavedStateDataControllerContainerEx : object {
    [ExtensionAttribute]
public static IDataControllerContainer`1<TProvider> BuildSavedStateControllerContainer(ISnapshotStateStorageProvider storageProvider, Lifetime lifetime, IProviderContainerMonitor`1<TProvider> intentionalStateChangeMonitor, Expression`1<Func`2<SnapshotState, TProvider>> lambda, TProvider providerDefaultValue, TProvider storageDefaultValue);
    [ExtensionAttribute]
public static IDataControllerContainer`1<TProvider> BuildSavedStateControllerContainer(ISnapshotStateStorageProvider storageProvider, Lifetime lifetime, IProviderContainerMonitor`1<TProvider> intentionalStateChangeMonitor, Expression`1<Func`2<SnapshotState, TProvider>> lambda, ISavedStateValueConverter`2<TProvider, TProvider> converter);
    [ExtensionAttribute]
public static IDataControllerContainer`1<TProvider> BuildSavedStateControllerContainer(ISnapshotStateStorageProvider storageProvider, Lifetime lifetime, IProviderContainerMonitor`1<TProvider> intentionalStateChangeMonitor, Expression`1<Func`2<SnapshotState, IIndexedEntry`2<TIndex, TStorage>>> lambda, TIndex index, ISavedStateValueConverter`2<TStorage, TProvider> converter);
    [ExtensionAttribute]
public static IDataControllerContainer`1<TState> BuildSavedStateControllerContainer(ISnapshotStateStorageProvider storageProvider, Lifetime lifetime, IProviderContainerMonitor`1<TState> intentionalStateChangeMonitor, Expression`1<Func`2<SnapshotState, IIndexedEntry`2<TIndex, TState>>> lambda, TIndex index, ISavedStateValueConverter`2<TState, TState> converter);
}
public class JetBrains.DotTrace.Features.SavedState.SavedStateListValueConverter`1 : object {
    public static SavedStateListValueConverter`1<TState> Instance;
    [CanBeNullAttribute]
private Func`2<IReadOnlyCollection`1<TState>, JetHashSet`1<TState>> myProviderFilter;
    [CanBeNullAttribute]
private Func`2<JetHashSet`1<TState>, IReadOnlyCollection`1<TState>> myStorageFilter;
    public JetHashSet`1<TState> ProviderDefaultValue { get; }
    public IReadOnlyCollection`1<TState> StorageDefaultValue { get; }
    public SavedStateListValueConverter`1(Func`2<IReadOnlyCollection`1<TState>, JetHashSet`1<TState>> providerFilter, Func`2<JetHashSet`1<TState>, IReadOnlyCollection`1<TState>> storageFilter);
    private static SavedStateListValueConverter`1();
    public sealed virtual JetHashSet`1<TState> ProviderFilter(IReadOnlyCollection`1<TState> input);
    public sealed virtual IReadOnlyCollection`1<TState> StorageFilter(JetHashSet`1<TState> input);
    public sealed virtual JetHashSet`1<TState> get_ProviderDefaultValue();
    public sealed virtual IReadOnlyCollection`1<TState> get_StorageDefaultValue();
    public sealed virtual bool IsStorageDefault(IReadOnlyCollection`1<TState> input);
    public sealed virtual bool IsProviderDefault(JetHashSet`1<TState> input);
}
public class JetBrains.DotTrace.Features.SavedState.SavedStateListValueProvider`1 : object {
    [CanBeNullAttribute]
private ISavedStateListValueMonitor`1<TState> myStateListValueMonitor;
    private ISavedStateValueAccessor`1<JetHashSet`1<TState>> myLastValueAccessor;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<NotifySetChangedEventArgs`1<TState>> Changed;
    [CompilerGeneratedAttribute]
private IDataProvider`1<IReadOnlyCollection`1<TState>> <Provider>k__BackingField;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public IDataProvider`1<IReadOnlyCollection`1<TState>> Provider { get; }
    public SavedStateListValueProvider`1(Lifetime lifetime, IDataProvider`1<ISavedStateValueAccessor`1<JetHashSet`1<TState>>> accessorProvider, ISavedStateListValueMonitor`1<TState> stateListValueMonitor, bool minimizeUpdates);
    public SavedStateListValueProvider`1(Lifetime lifetime, ISnapshotStateStorageProvider snapshotStateProvider, ISavedStateListValueMonitor`1<TState> stateListValueMonitor, Expression`1<Func`2<SnapshotState, string>> lambda, SavedStateListValueConverter`1<TState> converter, bool minimizeUpdates);
    private void AccessorChanged(ISavedStateValueAccessor`1<JetHashSet`1<TState>> newValue);
    public sealed virtual IEnumerator`1<TState> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(TState item);
    public sealed virtual bool Remove(TState item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(TState item);
    public sealed virtual void CopyTo(TState[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Changed(EventHandler`1<NotifySetChangedEventArgs`1<TState>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Changed(EventHandler`1<NotifySetChangedEventArgs`1<TState>> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IReadOnlyCollection`1<TState>> get_Provider();
    public sealed virtual bool SetEquals(IEnumerable`1<TState> other);
    private void NotifyAdded(TState item);
    private void NotifyRemoved(TState item);
    private void NotifyCleared();
}
public class JetBrains.DotTrace.Features.SavedState.SavedStateValueAccessor`2 : SavedStateValueAccessorBase`1<TProvider> {
    private IValueEntry`1<TStorage> myEntry;
    private ISavedStateValueConverter`2<TStorage, TProvider> myConverter;
    public SavedStateValueAccessor`2(IValueEntry`1<TStorage> entry, ISavedStateValueConverter`2<TStorage, TProvider> converter);
    protected virtual TProvider ReadCore();
    protected virtual TProvider WriteCore(TProvider state);
    protected virtual TProvider ResetCore();
}
public abstract class JetBrains.DotTrace.Features.SavedState.SavedStateValueAccessorBase`1 : object {
    private IDataController`1<T> myController;
    public IDataProvider`1<T> Provider { get; }
    private IDataController`1<T> GetController();
    private void SetControllerValue(T state);
    protected abstract virtual T ReadCore();
    protected abstract virtual T WriteCore(T state);
    protected abstract virtual T ResetCore();
    public sealed virtual void Write(Maybe`1<T> state);
    public sealed virtual T Read();
    public sealed virtual IDataProvider`1<T> get_Provider();
}
public class JetBrains.DotTrace.Features.SavedState.StructValueConverter`1 : object {
    public static StructValueConverter`1<TState> Instance;
    public Nullable`1<TState> ProviderDefaultValue { get; }
    public TState StorageDefaultValue { get; }
    private static StructValueConverter`1();
    public sealed virtual Nullable`1<TState> ProviderFilter(TState input);
    public sealed virtual TState StorageFilter(Nullable`1<TState> input);
    public sealed virtual Nullable`1<TState> get_ProviderDefaultValue();
    public sealed virtual TState get_StorageDefaultValue();
    public sealed virtual bool IsStorageDefault(TState input);
    public sealed virtual bool IsProviderDefault(Nullable`1<TState> input);
}
public class JetBrains.DotTrace.Features.SavedState.TransparentValueConverter`1 : object {
    public static TransparentValueConverter`1<TState> Instance;
    private TState myProvideDefaultValue;
    private TState myStorageDefaultValue;
    public TState ProviderDefaultValue { get; }
    public TState StorageDefaultValue { get; }
    public TransparentValueConverter`1(TState provideDefaultValue, TState storageDefaultValue);
    private static TransparentValueConverter`1();
    public sealed virtual TState ProviderFilter(TState input);
    public sealed virtual TState StorageFilter(TState input);
    public sealed virtual TState get_ProviderDefaultValue();
    public sealed virtual TState get_StorageDefaultValue();
    public sealed virtual bool IsStorageDefault(TState input);
    public sealed virtual bool IsProviderDefault(TState input);
}
public class JetBrains.DotTrace.Features.SavedState.ValueEntry`2 : object {
    [NotNullAttribute]
private IContextBoundSettingsStore myContext;
    [NotNullAttribute]
private Expression`1<Func`2<TSettingsKey, T>> myLambda;
    public ValueEntry`2(IContextBoundSettingsStore context, Expression`1<Func`2<TSettingsKey, T>> lambda);
    private sealed virtual override Maybe`1<T> JetBrains.DotTrace.Features.SavedState.IValueEntry<T>.Read();
    public T Read();
    public sealed virtual void Write(T value);
    public sealed virtual void ResetValue();
}
public class JetBrains.DotTrace.Features.Search.AggregatedPayloads`1 : object {
    private FunctionPayloadsMap`2<FunctionUIDm, TPayload> myFunctionPayloadsMap;
    private IPayloadPresenters`1<TPayload> myPayloadPresenters;
    public AggregatedPayloads`1(FunctionPayloadsMap`2<FunctionUIDm, TPayload> functionPayloadsMap, IPayloadPresenters`1<TPayload> payloadPresenters);
    public sealed virtual SearchPayload GetAggregatedPayload(FunctionUIDm fuid);
}
public static class JetBrains.DotTrace.Features.Search.AggregatedPayloadsHelpers : object {
    public static FindFunctionDataContainer BuildFindFunctionData(Lifetime lifetime, IDataProvider`1<IAggregatedPayloads> aggregatedPayloadsContainer);
}
public abstract class JetBrains.DotTrace.Features.Search.AggregatedPayloadsProviderBase`2 : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<IAggregatedPayloads> <Data>k__BackingField;
    public IDataProvider`1<IAggregatedPayloads> Data { get; }
    protected AggregatedPayloadsProviderBase`2(IRemotableReference`1<FlatPayloadsComponent`2<TOffset, TPayload>> flatPayloadsComponent, IPayloadPresentersProvider`1<TPayload> payloadsPresenterProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IAggregatedPayloads> get_Data();
}
public class JetBrains.DotTrace.Features.Search.FindFunctionDataContainer : object {
    [CanBeNullAttribute]
private IAggregatedPayloads modreq(System.Runtime.CompilerServices.IsVolatile) myAggregatedPayloads;
    [CanBeNullAttribute]
private FindFunctionController modreq(System.Runtime.CompilerServices.IsVolatile) myCurrentController;
    [CanBeNullAttribute]
public FindFunctionController GetController();
    public void SetController(FindFunctionController currentController);
    [CanBeNullAttribute]
public IAggregatedPayloads GetPayload();
    public void SetPayload(IAggregatedPayloads payload);
}
public interface JetBrains.DotTrace.Features.Search.IAggregatedPayloads {
    public abstract virtual SearchPayload GetAggregatedPayload(FunctionUIDm fuid);
}
public interface JetBrains.DotTrace.Features.Search.IAggregatedPayloadsProviderContainer {
}
public class JetBrains.DotTrace.Features.Search.SearchPayload : object {
    [CompilerGeneratedAttribute]
private Nullable`1<Percents> <Percent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MainPayload>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public Nullable`1<Percents> Percent { get; public set; }
    public string MainPayload { get; public set; }
    public SearchPayload(Nullable`1<Percents> Percent, string MainPayload);
    [CompilerGeneratedAttribute]
protected SearchPayload(SearchPayload original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Nullable`1<Percents> get_Percent();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Percent(Nullable`1<Percents> value);
    [CompilerGeneratedAttribute]
public string get_MainPayload();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MainPayload(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SearchPayload left, SearchPayload right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SearchPayload left, SearchPayload right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(SearchPayload other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual SearchPayload <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Nullable`1& Percent, String& MainPayload);
}
[SettingsKeyAttribute("System.Reflection.Missing", "JetBrains.DotTrace.Features.Resources.Strings", "SnapshotStateSettingDescription")]
public class JetBrains.DotTrace.Features.Settings.SnapshotState : object {
    public static SortMode DefaultSortMode;
    [CanBeNullAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.Features.Resources.Strings", "SelectedAnalysisSubjectSettingDescription")]
public FilterId AnalysisSubject;
    [SettingsIndexedEntryAttribute("JetBrains.DotTrace.Features.Resources.Strings", "SavedStateOfAllEnumFiltersSettingDescription")]
public IIndexedEntry`2<FilterId, string> EnumFilters;
    [SettingsIndexedEntryAttribute("JetBrains.DotTrace.Features.Resources.Strings", "SavedStateOfAllToggleFiltersSettingDescription")]
public IIndexedEntry`2<FilterId, bool> ToggleFilters;
    [SettingsIndexedEntryAttribute("JetBrains.DotTrace.Features.Resources.Strings", "SavedStateOfAllYesNoFiltersSettingDescription")]
public IIndexedEntry`2<FilterId, sbyte> YesNoFilters;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.Features.Resources.Strings", "ExcludedNodesSettingDescription")]
public string ExcludedNodes;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.Features.Resources.Strings", "IncludeFilterOfSubsystemsSettingDescription")]
public string IncludedSubsystems;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.Features.Resources.Strings", "ExcludeFilterOfSubsystemsSettingDescription")]
public string ExcludedSubsystems;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.Features.Resources.Strings", "CallTreeHistorySettingDescription")]
public string CallTreeHistoryV3;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.Features.Resources.Strings", "CallTreeHistoryActiveItemIndexSettingDescription")]
public int CallTreeHistoryIndex;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.Features.Resources.Strings", "CallTreeVisualStateSettingDescription")]
public string CallTreeVisualState;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.Features.Resources.Strings", "CallTreeGroupedByThreadVisualStateSettingDescription")]
public string CallTreeGroupedByThreadVisualState;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.Features.Resources.Strings", "VisibleRangeSettingDescription")]
public ModelRangeDouble VisibleRange;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.Features.Resources.Strings", "SelectedRangeSettingDescription")]
public ModelRange SelectedRange;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.Features.Resources.Strings", "ListOfManuallyHiddenThreadsDoesNotIncludeThreadsHiddenByDefaultLikeNativeOnesSettingDescription")]
public string HiddenThreads;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.Features.Resources.Strings", "ListOfManuallyUnhiddenThreadsWhenUserMakesVisibleAThreadHiddenByDefaultSettingDescription")]
public string UnhiddenThreads;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.Features.Resources.Strings", "SortingModeOfAThreadsListPayloadByDefaultNoneWhenUserRearrangesThreadsSettingDescription")]
public SortMode ThreadsSortMode;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.Features.Resources.Strings", "SortingOrderOfAThreadsListSettingDescription")]
public string ThreadsSortOrder;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.Features.Resources.Strings", "PinnedThreadsInAThreadsListSettingDescription")]
public string PinnedThreads;
}
public class JetBrains.DotTrace.Features.Settings.SnapshotStateAccessor : object {
    private IContextBoundSettingsStore myContext;
    public SnapshotStateAccessor(Lifetime lifetime, ISettingsStore settingsStore, XmlFileSettingsStorage xmlFileSettingsStorage, MountPath mountPath);
    public sealed virtual IValueEntry`1<T> GetJsonValueEntry(Expression`1<Func`2<SnapshotState, string>> lambda, JsonSerializerSettings settings);
    public sealed virtual IValueEntry`1<T> GetValueEntry(Expression`1<Func`2<SnapshotState, T>> lambda);
    public sealed virtual IIndexedValueEntry`2<TIndex, T> GetIndexedJsonValueEntry(Expression`1<Func`2<SnapshotState, IIndexedEntry`2<TIndex, string>>> lambda, JsonSerializerSettings settings);
    public sealed virtual IIndexedValueEntry`2<TIndex, T> GetIndexedValueEntry(Expression`1<Func`2<SnapshotState, IIndexedEntry`2<TIndex, T>>> lambda);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Settings.SnapshotStateEx : object {
    [ExtensionAttribute]
public static IDataProvider`1<IValueEntry`1<T>> GetJsonValueEntry(IDataProvider`1<ISnapshotStateAccessor> provider, Expression`1<Func`2<SnapshotState, string>> lambda, JsonSerializerSettings settings);
    [ExtensionAttribute]
public static IDataProvider`1<IValueEntry`1<T>> GetValueEntry(IDataProvider`1<ISnapshotStateAccessor> provider, Expression`1<Func`2<SnapshotState, T>> lambda, JsonSerializerSettings settings);
    [ExtensionAttribute]
public static IDataProvider`1<IValueEntry`1<TState>> GetJsonIndexedValueEntry(IDataProvider`1<ISnapshotStateAccessor> provider, Expression`1<Func`2<SnapshotState, IIndexedEntry`2<TIndex, string>>> lambda, TIndex index, JsonSerializerSettings settings);
    [ExtensionAttribute]
public static IDataProvider`1<IValueEntry`1<TState>> GetIndexedValueEntry(IDataProvider`1<ISnapshotStateAccessor> provider, Expression`1<Func`2<SnapshotState, IIndexedEntry`2<TIndex, TState>>> lambda, TIndex index);
    [ExtensionAttribute]
public static IObservableSet`1<TState> BuildEnumFilterObservableSet(IDataProvider`1<ISnapshotStateAccessor> provider, Lifetime lifetime, FilterId id, ISavedStateListValueMonitor`1<TState> intentionalStateChangeMonitor, bool minimizeUpdates);
    [ExtensionAttribute]
public static IDataProvider`1<ISavedStateValueAccessor`1<TProvider>> GetValueAccessor(IDataProvider`1<ISnapshotStateAccessor> provider, Expression`1<Func`2<SnapshotState, IIndexedEntry`2<TIndex, string>>> lambda, TIndex index, ISavedStateValueConverter`2<TStorage, TProvider> converter, JsonSerializerSettings settings);
    [ExtensionAttribute]
public static IDataProvider`1<ISavedStateValueAccessor`1<TProvider>> GetValueAccessor(IDataProvider`1<ISnapshotStateAccessor> provider, Expression`1<Func`2<SnapshotState, IIndexedEntry`2<TIndex, TStorage>>> lambda, TIndex index, ISavedStateValueConverter`2<TStorage, TProvider> converter);
    [ExtensionAttribute]
public static IDataProvider`1<ISavedStateValueAccessor`1<TProvider>> GetValueAccessor(IDataProvider`1<ISnapshotStateAccessor> provider, Expression`1<Func`2<SnapshotState, string>> lambda, ISavedStateValueConverter`2<TStorage, TProvider> converter);
    [ExtensionAttribute]
public static IDataProvider`1<ISavedStateValueAccessor`1<TProvider>> GetValueAccessor(IDataProvider`1<ISnapshotStateAccessor> provider, Expression`1<Func`2<SnapshotState, TStorage>> lambda, ISavedStateValueConverter`2<TStorage, TProvider> converter);
}
[SettingsKeyAttribute("System.Reflection.Missing", "JetBrains.DotTrace.Features.Resources.Strings", "TimelineLayoutSettingsSettingDescription")]
public class JetBrains.DotTrace.Features.Settings.TimelineLayoutSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.Features.Resources.Strings", "TopMethodsHeightSettingDescription")]
public double MethodsPanelHeight;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.Features.Resources.Strings", "PlainListTableStarHeightSettingDescription")]
public double PlainListTableStarHeight;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.Features.Resources.Strings", "PlainListDetailsStarHeightSettingDescription")]
public double PlainListDetailsStarHeight;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.Features.Resources.Strings", "DontShowViewerMigrationWarningSettingDescription")]
public bool DontShowViewerMigrationWarning;
    [SettingsIndexedEntryAttribute("JetBrains.DotTrace.Features.Resources.Strings", "EnumFilterHeights")]
public IIndexedEntry`2<FilterId, double> EnumFilterHeights;
    public static Expression`1<Func`2<TimelineLayoutSettings, IIndexedEntry`2<FilterId, double>>> EnumFilterHeightsExpr;
    private static TimelineLayoutSettings();
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.Settings.ZoneMarker : object {
}
[ShellComponentAttribute("10")]
public class JetBrains.DotTrace.Features.ShellComponents.BothSides.CacheStorageDir : object {
    private IProperty`1<int> myCleanupThreshold;
    [CompilerGeneratedAttribute]
private FileSystemPath <Path>k__BackingField;
    [NotNullAttribute]
public FileSystemPath Path { get; }
    public TimeSpan LifeSpan { get; }
    public CacheStorageDir(IAnyProductSettingsLocation location, ISnapshotsSettingsProvider dotTraceSettings);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_Path();
    public sealed virtual TimeSpan get_LifeSpan();
}
[ShellComponentAttribute("16")]
public class JetBrains.DotTrace.Features.ShellComponents.BothSides.Processing.Timeline.TimelineSnapshotStorageReader : object {
    public sealed virtual IConvertedTimelineSnapshot Open(Lifetime lifetime, FileSystemPath convertedSnapshotPath);
}
[ShellComponentAttribute("10")]
public class JetBrains.DotTrace.Features.ShellComponents.BothSides.Settings.DotTraceProductSettings : object {
    private SettingsFileLiveWithMountPoints myLiveSettings;
    private static string SettingsFileName;
    private static string DotTraceSettingsFolder;
    public SettingsFileLive LiveSettings { get; }
    public ILiveMountPointsInContext MountPoints { get; }
    public DotTraceProductSettings(Lifetime lifetime, HostInfo hostInfo, ISettingsFactory settingsFactory);
    public SettingsFileLive get_LiveSettings();
    public ILiveMountPointsInContext get_MountPoints();
    private static FileSystemPath GetSettingsFilePath(HostInfo hostInfo);
    public IContextBoundSettingsStore BindToContextTransient();
    public IContextBoundSettingsStoreLive BindToContextLive(Lifetime lifetime);
}
[ShellComponentAttribute("10")]
public class JetBrains.DotTrace.Features.ShellComponents.BothSides.Settings.SnapshotsSettingsProvider : object {
    private Lifetime myLifetime;
    private WorkspaceDir myHomeDir;
    private IThreading myThreading;
    private Property`1<FileSystemPath[]> myOldSnapshotStores;
    private bool mySuppressUpdate;
    private IContextBoundSettingsStoreLive mySettings;
    private IProperty`1<string> mySnapshotsStore;
    [CompilerGeneratedAttribute]
private IProperty`1<FileSystemPath> <CurrentSnapshotsStore>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsAutoSaveEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsAutoCleanupByDateEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsAutoCleanupBySizeEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<int> <CleanupByDateThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<int> <CleanupBySizeThreshold>k__BackingField;
    public IProperty`1<FileSystemPath> CurrentSnapshotsStore { get; }
    public IProperty`1<FileSystemPath[]> OldStorePaths { get; }
    public IProperty`1<bool> IsAutoSaveEnabled { get; private set; }
    public IProperty`1<bool> IsAutoCleanupByDateEnabled { get; private set; }
    public IProperty`1<bool> IsAutoCleanupBySizeEnabled { get; private set; }
    public IProperty`1<int> CleanupByDateThreshold { get; private set; }
    public IProperty`1<int> CleanupBySizeThreshold { get; private set; }
    public SnapshotsSettingsProvider(Lifetime lifetime, DotTraceProductSettings productSharedSettings, WorkspaceDir homeDir, IThreading threading);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<FileSystemPath> get_CurrentSnapshotsStore();
    public sealed virtual IProperty`1<FileSystemPath[]> get_OldStorePaths();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsAutoSaveEnabled();
    [CompilerGeneratedAttribute]
private void set_IsAutoSaveEnabled(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsAutoCleanupByDateEnabled();
    [CompilerGeneratedAttribute]
private void set_IsAutoCleanupByDateEnabled(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsAutoCleanupBySizeEnabled();
    [CompilerGeneratedAttribute]
private void set_IsAutoCleanupBySizeEnabled(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<int> get_CleanupByDateThreshold();
    [CompilerGeneratedAttribute]
private void set_CleanupByDateThreshold(IProperty`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<int> get_CleanupBySizeThreshold();
    [CompilerGeneratedAttribute]
private void set_CleanupBySizeThreshold(IProperty`1<int> value);
    private void OnSnapshotStoreChanged(PropertyChangedEventArgs`1<FileSystemPath> args);
    private void UpdateStore(Maybe`1<string> storeToChange, String[] oldStorePathsToAdd);
    private void LoadSnapshotsStoreSettings();
    private String[] LoadStoreHistory(IContextBoundSettingsStore settings);
    private void MigrateSettings();
    [CompilerGeneratedAttribute]
private FileSystemPath[] <LoadSnapshotsStoreSettings>b__35_0();
    [CompilerGeneratedAttribute]
private FileSystemPath[] <LoadSnapshotsStoreSettings>b__35_1(Task`1<FileSystemPath[]> task);
}
[SettingsKeyAttribute("System.Reflection.Missing", "JetBrains.DotTrace.Features.Resources.Strings", "AppBrowserSnapshotsStoreSettingsSettingDescription")]
internal class JetBrains.DotTrace.Features.ShellComponents.BothSides.Settings.SnapshotsStoreSettingsV2 : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.Features.Resources.Strings", "CurrentStoreSettingDescription")]
public string CurrentStore;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.Features.Resources.Strings", "OldsCountSettingDescription")]
public int OldStoresCount;
    [SettingsIndexedEntryAttribute("JetBrains.DotTrace.Features.Resources.Strings", "OldStoresSettingDescription")]
public IIndexedEntry`2<int, string> OldStores;
}
[ShellComponentAttribute("16")]
public class JetBrains.DotTrace.Features.ShellComponents.BothSides.Settings.WorkspaceDir : object {
    private static string SnapshotsFolder;
    [CompilerGeneratedAttribute]
private FileSystemPath <ProductDir>k__BackingField;
    public FileSystemPath ProductDir { get; }
    [CompilerGeneratedAttribute]
public FileSystemPath get_ProductDir();
}
[ShellComponentAttribute("16")]
public class JetBrains.DotTrace.Features.ShellComponents.Local.DotTraceSnapshotUtilsComponent : object {
    public sealed virtual FileSystemPath GetUniqueSnapshotDirectory(FileSystemPath storageDir, string snapshotName, DateTime snapshotCreationDate);
    public sealed virtual FileSystemPath RenameSnapshot(FileSystemPath srcIndexFile, DateTime snapshotCreationDate, string dstIndexFileNameWithoutExt, bool renameDirectory, IProgressIndicator progress);
    public sealed virtual void Delete(IProgressIndicator progress, FileSystemPath srcIndexFile, bool tryDeleteDirectoryIfEmpty);
    public sealed virtual IEnumerable`1<FileSystemPath> Locked(FileSystemPath indexFile);
}
[ShellComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.DotTrace.Features.ShellComponents.Local.Filters.FiltersMonitor : object {
    public virtual IProviderContainerMonitor`1<FilterId> GetRadioGroupFilterMonitor(FilterRadioGroupId instanceRadioGroupId);
    public virtual IProviderContainerMonitor`1<Nullable`1<ModelRange>> GetSelectedRangeFilterMonitor();
    public virtual IProviderContainerMonitor`1<ModelRangeDouble> GetViewportRangeMonitor(ModelRangeDouble defaultValue);
    public virtual IProviderContainerMonitor`1<Nullable`1<bool>> GetYesNoNestedFilter(int eventId, IEventPropertyDescriptor property, Func`2<bool, FilterPresentationModel> presenter);
    public virtual IProviderContainerMonitor`1<Nullable`1<bool>> GetThreadStateFilterMonitor();
    public virtual IProviderContainerMonitor`1<bool> GetToggleFilterMonitor(KnownEventTypes eventType);
    public virtual ISavedStateListValueMonitor`1<CallTreePath> GetExcludedNodesListMonitor();
    public virtual ISavedStateListValueMonitor`1<SubsystemKey> GetIncludedSubsystemListMonitor();
    public virtual ISavedStateListValueMonitor`1<SubsystemKey> GetExcludedSubsystemListMonitor();
    public virtual ISavedStateListValueMonitor`1<ThreadId> GetThreadFilterListMonitor(Func`2<ThreadOrProcessId, FilterPresentationModel> keyPresenter);
    public virtual ISavedStateListValueMonitor`1<ThreadName> GetThreadNameFilterListMonitor();
    public virtual ISavedStateListValueMonitor`1<ThreadOrProcessId> GetThreadOrProcessListNestedFilter(int eventId, IEventPropertyDescriptor property, IThreadOrProcessNameProvider threadNameProvider);
    public virtual ISavedStateListValueMonitor`1<ulong> GetCommonListNestedFilter(int eventId, IEventPropertyDescriptor property, Func`2<ulong, FilterPresentationModel> keyPresenter);
    public virtual ISavedStateListValueMonitor`1<ulong> GetCommonListNestedFilter(int eventId, IEventPropertyDescriptor property, Func`2<ulong, string> keyPresenter);
    public virtual ISavedStateListValueMonitor`1<ThreadId> GetThreadScopeFilterListMonitor();
}
public enum JetBrains.DotTrace.Features.ShellComponents.Local.FUS.ClassifiedStringValues : Enum {
    public int value__;
    public static ClassifiedStringValues Unknown;
    public static ClassifiedStringValues Empty;
    public static ClassifiedStringValues Main;
    public static ClassifiedStringValues ClrWorkerThread;
    public static ClassifiedStringValues Thread;
    public static ClassifiedStringValues Finalizer;
    public static ClassifiedStringValues ReflectionKey;
    public static ClassifiedStringValues RemotingKey;
    public static ClassifiedStringValues CollectionsKey;
    public static ClassifiedStringValues LinqKey;
    public static ClassifiedStringValues WinformsKey;
    public static ClassifiedStringValues StringKey;
    public static ClassifiedStringValues WPFKey;
    public static ClassifiedStringValues SleepKey;
    public static ClassifiedStringValues WaitKey;
    public static ClassifiedStringValues EventAwaitingTimeKey;
    public static ClassifiedStringValues EventWaitingForCPUKey;
    public static ClassifiedStringValues EventFileIOKey;
    public static ClassifiedStringValues EventJitKey;
    public static ClassifiedStringValues EventGcWaitKey;
    public static ClassifiedStringValues EventLockContentionKey;
    public static ClassifiedStringValues EventSqlQueryKey;
    public static ClassifiedStringValues SystemCodeKey;
    public static ClassifiedStringValues UserCodeKey;
    public static ClassifiedStringValues NativeCodeKey;
    public static ClassifiedStringValues SpecialKey;
}
[CounterUsagesCollectorAttribute("16")]
public class JetBrains.DotTrace.Features.ShellComponents.Local.FUS.FiltersCollector : CounterUsagesCollector {
    protected EventLogGroup Group;
    protected EventLogConfiguration EventLogConfiguration;
    private VarargEventId myRadioGroupFilterChangedEvent;
    private EventId3`3<FilterType, int, YesNoFilterValue> myYesNoFilterChangedEvent;
    private EventId3`3<FilterType, int, bool> myToggleFilterChangedEvent;
    private EventId2`2<RangeFilterType, RangeFilterValue> myRangeFilterChangedEvent;
    private VarargEventId myCommonListChangedEvent;
    private EventId3`3<SubsystemFilterType, SavedStateListChangeType, ClassifiedStringValues> mySubsystemsListChangedEvent;
    private EnumEventField`1<WellKnownRadioGroups> myRadioGroupTypeField;
    private IntEventField myRadioGroupIdField;
    private EnumEventField`1<FilterType> myFilterTypeField;
    private IntEventField myFilterTypeRawValueField;
    private EnumEventField`1<YesNoFilterValue> myYesNoFilterValueField;
    private BooleanEventField myToggleFilterValueField;
    private EnumEventField`1<RangeFilterType> myRangeFilterTypeField;
    private EnumEventField`1<RangeFilterValue> myRangeFilterValueField;
    private EnumEventField`1<SavedStateListChangeType> myChangeTypeField;
    private EnumEventField`1<ClassifiedStringValues> myStringValueField;
    private EnumEventField`1<SubsystemFilterType> mySubsystemFilterTypeField;
    private static ILogger ourLogger;
    private static Dictionary`2<string, ClassifiedStringValues> ourSubsystemsMap;
    public FiltersCollector(FeatureUsageLogger featureUsageLogger, EventLogConfiguration eventLogConfiguration);
    private static FiltersCollector();
    public virtual EventLogGroup GetGroup();
    private void RadioGroupFilterChanged(WellKnownRadioGroups radioGroupType, int radioGroupId, FilterType filterType, int filterTypeRawValue);
    private void YesNoFilterChanged(FilterType filterType, int filterTypeRawValue, YesNoFilterValue yesNoFilterValue);
    private void ToggleFilterChanged(FilterType filterType, int filterTypeRawValue, bool toggleFilterValue);
    private void RangeFilterChanged(RangeFilterType rangeFilterType, RangeFilterValue rangeFilterValue);
    private void CommonListChanged(FilterType filterType, int filterTypeRawValue, SavedStateListChangeType changeType, ClassifiedStringValues stringValue);
    private void SubsystemsListChanged(SubsystemFilterType subsystemFilterType, SavedStateListChangeType changeType, ClassifiedStringValues stringValue);
    public sealed virtual void RadioGroupFilterChanged(FilterId filterId);
    public sealed virtual void GetYesNoNestedFilterChanged(Nullable`1<bool> value, int eventId, IEventPropertyDescriptor property, Func`2<bool, FilterPresentationModel> presenter);
    private static YesNoFilterValue GetYesNoFilterValue(Nullable`1<bool> value);
    public sealed virtual void ThreadStateFilterChanged(Nullable`1<bool> state);
    public sealed virtual void ToggleFilterChanged(bool value, KnownEventTypes eventType);
    public sealed virtual void ViewportRangeChanged(ModelRangeDouble modelRange, ModelRangeDouble defaultValue);
    private static RangeFilterValue GetRangeFilterValue(ModelRangeDouble modelRange, ModelRangeDouble defaultValue);
    public sealed virtual void SelectedRangeChanged(Nullable`1<ModelRange> modelRange);
    public sealed virtual void CommonListChanged(int eventId, SavedStateListChangeType mode, string value);
    public sealed virtual void ThreadScopeFilterListChanged(SavedStateListChangeType mode, ThreadId threadId);
    public sealed virtual void ThreadFilterListChanged(SavedStateListChangeType mode, string threadName);
    public sealed virtual void SubsystemExcludeFilterListChanged(SavedStateListChangeType mode, SubsystemKey subsystemKey);
    public sealed virtual void SubsystemIncludeFilterListChanged(SavedStateListChangeType mode, SubsystemKey subsystemKey);
    private static ClassifiedStringValues ClassifyStringValue(string value);
    private static FilterIdParameters GetFilterIdParameters(FilterId state);
    private static FilterIdParameters GetEventIdParameters(KnownEventTypes rawEventId, int knownRawValue);
    private static FilterType GetKnownLayer(KnownLayers rawLayerId);
    private static FilterType GetKnownEventType(KnownEventTypes eventRawValue);
    [CompilerGeneratedAttribute]
internal static double <GetRangeFilterValue>g__CalcDeviation|35_0(double v1, double v2);
}
public enum JetBrains.DotTrace.Features.ShellComponents.Local.FUS.FilterType : Enum {
    public int value__;
    public static FilterType TimeSubject;
    public static FilterType Compare;
    public static FilterType Subsystem;
    public static FilterType Thread;
    public static FilterType ThreadScope;
    public static FilterType EventPreemption;
    public static FilterType EventRunning;
    public static FilterType EventBlockingGC;
    public static FilterType EventGC;
    public static FilterType EventRuntimeRunning;
    public static FilterType EventOtherSuspends;
    public static FilterType EventFileIO;
    public static FilterType EventException;
    public static FilterType EventDiskIO;
    public static FilterType EventIdle;
    public static FilterType EventUiFreezeInterval;
    public static FilterType EventUiFreezeTick;
    public static FilterType EventCustomEvent;
    public static FilterType EventApiEvent;
    public static FilterType EventMemoryManagement;
    public static FilterType EventContention;
    public static FilterType EventSqlCommand;
    public static FilterType EventEtwEventCallStack;
    public static FilterType EventJitting;
    public static FilterType EventEtwSample;
    public static FilterType EventCallStackInversion;
    public static FilterType EventConversionErrors;
    public static FilterType EventMemoryAllocations;
    public static FilterType EventHttpRequest;
    public static FilterType EventNativeAllocation;
    public static FilterType EventDebugOutput;
    public static FilterType EventTasks;
    public static FilterType EventAwaitInfo;
    public static FilterType EventUnknown;
    public static FilterType LayerThreadStates;
    public static FilterType LayerIO;
    public static FilterType LayerCPU;
    public static FilterType LayerKernelStates;
    public static FilterType LayerMemory;
    public static FilterType LayerWPFLayout;
    public static FilterType LayerProcessSummary;
    public static FilterType LayerRuntimeSuspendsWithGC;
    public static FilterType LayerUiFreezeChart;
    public static FilterType LayerAdditionalKernelStates;
    public static FilterType LayerKernelStatesSummary;
    public static FilterType LayerContentionsSummary;
    public static FilterType LayerFileIOSummary;
    public static FilterType LayerClrStates;
    public static FilterType LayerGCSummary;
    public static FilterType LayerRunWait;
    public static FilterType LayerFirstApiLayer;
    public static FilterType LayerUnknown;
    public static FilterType Unknown;
}
public interface JetBrains.DotTrace.Features.ShellComponents.Local.FUS.IFiltersCollector {
    public abstract virtual void RadioGroupFilterChanged(FilterId filterId);
    public abstract virtual void GetYesNoNestedFilterChanged(Nullable`1<bool> value, int eventId, IEventPropertyDescriptor property, Func`2<bool, FilterPresentationModel> presenter);
    public abstract virtual void ThreadStateFilterChanged(Nullable`1<bool> b);
    public abstract virtual void ToggleFilterChanged(bool value, KnownEventTypes eventType);
    public abstract virtual void ViewportRangeChanged(ModelRangeDouble modelRange, ModelRangeDouble defaultValue);
    public abstract virtual void SelectedRangeChanged(Nullable`1<ModelRange> modelRange);
    public abstract virtual void CommonListChanged(int eventId, SavedStateListChangeType mode, string keyPresenter);
    public abstract virtual void ThreadScopeFilterListChanged(SavedStateListChangeType mode, ThreadId threadId);
    public abstract virtual void ThreadFilterListChanged(SavedStateListChangeType mode, string threadName);
    public abstract virtual void SubsystemExcludeFilterListChanged(SavedStateListChangeType mode, SubsystemKey subsystemKey);
    public abstract virtual void SubsystemIncludeFilterListChanged(SavedStateListChangeType mode, SubsystemKey subsystemKey);
}
public enum JetBrains.DotTrace.Features.ShellComponents.Local.FUS.RangeFilterType : Enum {
    public int value__;
    public static RangeFilterType Viewport;
    public static RangeFilterType SelectedRange;
}
public enum JetBrains.DotTrace.Features.ShellComponents.Local.FUS.RangeFilterValue : Enum {
    public int value__;
    public static RangeFilterValue Everything;
    public static RangeFilterValue Custom;
}
public enum JetBrains.DotTrace.Features.ShellComponents.Local.FUS.SavedStateListChangeType : Enum {
    public int value__;
    public static SavedStateListChangeType Added;
    public static SavedStateListChangeType Removed;
    public static SavedStateListChangeType Cleared;
}
[ShellComponentAttribute("16")]
public class JetBrains.DotTrace.Features.ShellComponents.Local.FUS.StatisticsFiltersMonitor : FiltersMonitor {
    private static ILogger ourLogger;
    private IFiltersCollector myFiltersCollector;
    public StatisticsFiltersMonitor(IFiltersCollector filtersCollector);
    private static StatisticsFiltersMonitor();
    public virtual IProviderContainerMonitor`1<FilterId> GetRadioGroupFilterMonitor(FilterRadioGroupId instanceRadioGroupId);
    public virtual IProviderContainerMonitor`1<Nullable`1<bool>> GetYesNoNestedFilter(int eventId, IEventPropertyDescriptor property, Func`2<bool, FilterPresentationModel> presenter);
    public virtual IProviderContainerMonitor`1<Nullable`1<bool>> GetThreadStateFilterMonitor();
    public virtual IProviderContainerMonitor`1<bool> GetToggleFilterMonitor(KnownEventTypes eventType);
    public virtual IProviderContainerMonitor`1<ModelRangeDouble> GetViewportRangeMonitor(ModelRangeDouble defaultValue);
    public virtual IProviderContainerMonitor`1<Nullable`1<ModelRange>> GetSelectedRangeFilterMonitor();
    public virtual ISavedStateListValueMonitor`1<ulong> GetCommonListNestedFilter(int eventId, IEventPropertyDescriptor property, Func`2<ulong, FilterPresentationModel> keyPresenter);
    public virtual ISavedStateListValueMonitor`1<ulong> GetCommonListNestedFilter(int eventId, IEventPropertyDescriptor property, Func`2<ulong, string> keyPresenter);
    public virtual ISavedStateListValueMonitor`1<ThreadId> GetThreadScopeFilterListMonitor();
    public virtual ISavedStateListValueMonitor`1<ThreadId> GetThreadFilterListMonitor(Func`2<ThreadOrProcessId, FilterPresentationModel> keyPresenter);
    public virtual ISavedStateListValueMonitor`1<ThreadName> GetThreadNameFilterListMonitor();
    public virtual ISavedStateListValueMonitor`1<SubsystemKey> GetExcludedSubsystemListMonitor();
    public virtual ISavedStateListValueMonitor`1<SubsystemKey> GetIncludedSubsystemListMonitor();
    public virtual ISavedStateListValueMonitor`1<ThreadOrProcessId> GetThreadOrProcessListNestedFilter(int eventId, IEventPropertyDescriptor property, IThreadOrProcessNameProvider threadNameProvider);
    [CompilerGeneratedAttribute]
private void <GetThreadStateFilterMonitor>b__7_0(Nullable`1<bool> t);
    [CompilerGeneratedAttribute]
private void <GetSelectedRangeFilterMonitor>b__10_0(Nullable`1<ModelRange> t);
    [CompilerGeneratedAttribute]
private void <GetThreadScopeFilterListMonitor>b__13_0(SavedStateListChangeType mode, ThreadId threadId);
    [CompilerGeneratedAttribute]
private void <GetThreadNameFilterListMonitor>b__15_0(SavedStateListChangeType mode, ThreadName threadName);
    [CompilerGeneratedAttribute]
private void <GetExcludedSubsystemListMonitor>b__16_0(SavedStateListChangeType mode, SubsystemKey subsystemKey);
    [CompilerGeneratedAttribute]
private void <GetIncludedSubsystemListMonitor>b__17_0(SavedStateListChangeType mode, SubsystemKey subsystemKey);
}
public enum JetBrains.DotTrace.Features.ShellComponents.Local.FUS.SubsystemFilterType : Enum {
    public int value__;
    public static SubsystemFilterType Include;
    public static SubsystemFilterType Exclude;
}
public enum JetBrains.DotTrace.Features.ShellComponents.Local.FUS.WellKnownRadioGroups : Enum {
    public int value__;
    public static WellKnownRadioGroups Subject;
    public static WellKnownRadioGroups Custom;
}
public enum JetBrains.DotTrace.Features.ShellComponents.Local.FUS.YesNoFilterValue : Enum {
    public int value__;
    public static YesNoFilterValue Empty;
    public static YesNoFilterValue Yes;
    public static YesNoFilterValue No;
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.ShellComponents.Local.FUS.ZoneMarker : object {
}
[ShellComponentAttribute("16")]
public class JetBrains.DotTrace.Features.ShellComponents.Local.Icicle.IcicleWindowActionComponent : object {
    public IDataProvider`1<bool> IsFlameChartAvailable { get; }
    public virtual IDataProvider`1<bool> get_IsFlameChartAvailable();
    public virtual void OpenToolWindow(IDataContext context);
}
[ShellComponentAttribute("16")]
public class JetBrains.DotTrace.Features.ShellComponents.Local.ModulesWindowActionComponent : object {
    public IDataProvider`1<bool> IsViewAvailable { get; }
    public virtual IDataProvider`1<bool> get_IsViewAvailable();
    public virtual void OpenToolWindow(IDataContext context);
}
[ShellComponentAttribute("0")]
public class JetBrains.DotTrace.Features.ShellComponents.Local.OpenDialog.OpenTimelineSnapshotDialog : object {
    private static ILogger ourLogger;
    private IPersistentPathDialogs myPersistentPathDialogs;
    private ConfigurationDeserializer myConfigurationDeserializer;
    public OpenTimelineSnapshotDialog(IPersistentPathDialogs persistentPathDialogs, ConfigurationDeserializer configurationDeserializer);
    private static OpenTimelineSnapshotDialog();
    public virtual FileSystemPath Show(IDataSink`1<SnapshotFilter> filterProvider);
    private static SupportedSnapshotType GetSnapshotType(FileSystemPath indexFile);
    private static void ShowErrorMessage(string text);
    private static EnvironmentSectionContainer ReadEnvironmentSectionSection(Lifetime lifetime, FileSystemPath snapshotStorageFile);
    private ProfileConfiguration ExtractProfileConfiguration(FileSystemPath snapshotPath);
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.ShellComponents.Local.OpenDialog.ZoneMarker : object {
}
[ShellComponentAttribute("10")]
public class JetBrains.DotTrace.Features.ShellComponents.Local.PersistentPathDialogs : object {
    private ICommonFileDialogs myDialogs;
    private IProperty`1<string> myOpenDirectory;
    private IProperty`1<string> mySaveDirectory;
    public PersistentPathDialogs(Lifetime lifetime, ISettingsStore settings, ICommonFileDialogs dialogs);
    public sealed virtual FileSystemPath OpenFileDialog(string title, ChooseFileType[] filters);
    public ICollection`1<FileSystemPath> OpenFilesDialog(string title, ChooseFileType[] filters);
    public sealed virtual FileSystemPath SaveFileDialog(string title, ChooseFileType[] filters, string fileName);
}
[ShellComponentAttribute("16")]
public class JetBrains.DotTrace.Features.ShellComponents.Local.PlainListWindowActionComponent : object {
    public IDataProvider`1<bool> IsPlainListAvailable { get; }
    public virtual IDataProvider`1<bool> get_IsPlainListAvailable();
    public virtual void OpenToolWindow(IDataContext context);
}
[ShellComponentAttribute("16")]
public class JetBrains.DotTrace.Features.ShellComponents.Local.Processing.Timeline.TimelineExternalStoragePool : ExternalStoragePool {
    public TimelineExternalStoragePool(IUseExternalStorage settings, Lifetime lifetime, IThreading threading);
    protected virtual Type EnvironmentZone();
}
public static class JetBrains.DotTrace.Features.ShellComponents.Local.Processing.Timeline.TimelineSnapshotVersionChecker : object {
    private static ILogger ourLog;
    private static TimelineSnapshotVersionChecker();
    private static VersionCheckVerdict CheckRawSections(IDictionary`2<TimelineSectionTypes, RawSectionAttribute> supportedVersions, List`1<TypeAndVersion> sectionList);
    public static VersionCheckVerdict CheckRawSnapshot(ISnapshotStorage storage);
    private static bool ReturnTestVersionCheckVerdictIfVariableIsSet(VersionCheckVerdict& versionCheckVerdict);
    private static bool HaveAllMandatorySections(IEnumerable`1<KeyValuePair`2<TimelineSectionTypes, T>> supportedSections, IEnumerable`1<TypeAndVersion> sectionList);
    public static bool ConvertedSnapshotHaveAllMandatorySections(ISnapshotStorage storage);
}
[ShellComponentAttribute("16")]
public class JetBrains.DotTrace.Features.ShellComponents.Local.RecentSnapshots.DefaultRecentSnapshotInfoReader : object {
    private IEnumerable`1<ISnapshotContainerProvider> mySnapshotContainerInfos;
    public DefaultRecentSnapshotInfoReader(IImmutableList`1<ISnapshotContainerProvider> snapshotContainerInfos);
    public sealed virtual RecentSnapshotInfo Read(FileSystemPath snapshotPath);
}
[ShellComponentAttribute("16")]
public class JetBrains.DotTrace.Features.ShellComponents.Local.RecentSnapshots.MemoryMappedSnapshotContainerProvider : object {
    private IMemoryMappedSnapshotManager myMemoryMappedSnapshotManager;
    public MemoryMappedSnapshotContainerProvider(IMemoryMappedSnapshotManager memoryMappedSnapshotManager);
    public sealed virtual bool SnapshotSupported(FileSystemPath originalInputFile);
    public sealed virtual SnapshotSectionsContainer GetSections(Lifetime lifetime, FileSystemPath originalInputFile);
}
[ShellComponentAttribute("16")]
public class JetBrains.DotTrace.Features.ShellComponents.Local.RecentSnapshots.ProfilerSnapshotStorageContainerProvider : object {
    private ILogger myLogger;
    public ProfilerSnapshotStorageContainerProvider(ILogger logger);
    public sealed virtual bool SnapshotSupported(FileSystemPath originalInputFile);
    public sealed virtual SnapshotSectionsContainer GetSections(Lifetime lifetime, FileSystemPath originalInputFile);
}
[ShellComponentAttribute("10")]
public class JetBrains.DotTrace.Features.ShellComponents.Local.SilentCleanupComponent : object {
    private static ILogger ourLog;
    public SilentCleanupComponent(IEnumerable`1<ISilentCleanupLocation> cleanupLocations);
    private static SilentCleanupComponent();
    private static void CleanUpLocation(ISilentCleanupLocation cleanupLocation);
    private static void CleanUpDirectory(FileSystemPath directory, DateTime deleteOlderThan);
    private static void TryToDelete(FileSystemPath directory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("10")]
public class JetBrains.DotTrace.Features.ShellComponents.Local.SnapshotContainer.Builders.PerformanceSnapshotContainerBuilder : object {
    private ISnapshotComponentContainerFactory myFactory;
    private PerformanceSnapshotVersionChecker myVersionChecker;
    public PerformanceSnapshotContainerBuilder(ISnapshotComponentContainerFactory factory, PerformanceSnapshotVersionChecker versionChecker);
    public sealed virtual bool IsSnapshotSupported(FileSystemPath indexFile);
    public sealed virtual IDataProvider`1<ContainerBuildResult> BuildComponentContainer(Lifetime lt, FileSystemPath snapshotPath, string artefactName, SnapshotOpeningScenario scenario, IComponentContainer parentComponentContainer);
    private IComponentContainer BuildFeaturesComponentContainer(Lifetime lt, FileSystemPath snapshotPath, string artefactName, IComponentContainer parentComponentContainer);
    private static IDataProvider`1<ContainerBuildResult> CreateErrorComponentContainer(ContainerResult errorResult);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("0")]
public class JetBrains.DotTrace.Features.ShellComponents.Local.SnapshotContainer.Builders.TimelineSnapshotContainerBuilder : object {
    private ISnapshotComponentContainerFactory mySnapshotComponentContainerFactory;
    private IRemoteInstanceManager myRemoteInstancesManager;
    private ISnapshotStatistics mySnapshotStatistics;
    private IShellLocks myLocks;
    private IConverterComponentContainerFactory myConverterComponentContainerFactory;
    private ProcessingFlags myProcessingFlags;
    public TimelineSnapshotContainerBuilder(ISnapshotComponentContainerFactory snapshotComponentContainerFactory, IConverterComponentContainerFactory converterComponentContainerFactory, IRemoteInstanceManager remoteInstancesManager, ISnapshotStatistics snapshotStatistics, IShellLocks locks, ProductConfigurations productConfigurations);
    public sealed virtual bool IsSnapshotSupported(FileSystemPath file);
    public sealed virtual IDataProvider`1<ContainerBuildResult> BuildComponentContainer(Lifetime lt, FileSystemPath path, string artefactName, SnapshotOpeningScenario scenario, IComponentContainer parentComponentContainer);
    private static IDataProvider`1<ContainerBuildResult> CreateErrorComponentContainer(ContainerResult errorResult);
    private IDataProvider`1<ContainerBuildResult> CreateComponentContainer(Lifetime lifetime, FileSystemPath originalInputFile, string artefactName, SnapshotOpeningScenario scenario, IComponentContainer parentComponentContainer);
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.ShellComponents.Local.SnapshotContainer.Builders.ZoneMarker : object {
}
[ShellComponentAttribute("0")]
public class JetBrains.DotTrace.Features.ShellComponents.Local.SnapshotContainer.ConverterComponentContainerFactory : LocalAndRemoteComponentContainerFactory {
    public ConverterComponentContainerFactory(IUseExternalStorage useExternalStorage, IExternalStoragePool externalStoragePool, IThreading threading);
    public sealed virtual IComponentContainer CreateConverterComponentContainer(Lifetime lifetime, IComponentContainer parentComponentContainer, SnapshotProcessingInput processingInput);
}
public abstract class JetBrains.DotTrace.Features.ShellComponents.Local.SnapshotContainer.LocalAndRemoteComponentContainerFactory : object {
    private IExternalStoragePool myExternalStoragePool;
    private IUseExternalStorage myUseExternalStorage;
    private IThreading myThreading;
    protected LocalAndRemoteComponentContainerFactory(IUseExternalStorage useExternalStorage, IExternalStoragePool externalStoragePool, IThreading threading);
    public ComponentContainer CreateComponentContainer(Lifetime lifetime, IComponentContainer parentComponentContainer, BuildOneSideOfTheContainer oneSideCreator);
    private ComponentContainer CreateWholeComponentContainer(Lifetime lifetime, IComponentContainer parentComponentContainer, BuildOneSideOfTheContainer buildOneSideOfTheContainer, BuildWholeContainer buildWholeContainer);
    private ComponentContainer BuildFullLocalWorkspace(DataPipeLifetime localLifetime, IComponentContainer parentComponentContainer, BuildOneSideOfTheContainer buildOneSideOfTheContainer);
    private ComponentContainer BuildLocalAndRemoteWorkspace(DataPipeLifetime localLifetime, IComponentContainer parentComponentContainer, BuildOneSideOfTheContainer buildOneSideOfTheContainer);
}
[ShellComponentAttribute("0")]
public class JetBrains.DotTrace.Features.ShellComponents.Local.SnapshotContainer.SnapshotComponentContainerBuilder : object {
    private ILogger myLogger;
    private IEnumerable`1<ISingleSnapshotComponentContainerBuilder> myContextBuilders;
    private IComponentContainer myShellComponentContainer;
    public SnapshotComponentContainerBuilder(ILogger logger, IEnumerable`1<ISingleSnapshotComponentContainerBuilder> contextBuilders, IComponentContainer shellComponentContainer);
    public sealed virtual IDataProvider`1<ContainerBuildResult> BuildSnapshotComponentContainer(Lifetime lt, FileSystemPath path, string artefactName, SnapshotOpeningScenario scenario, IComponentContainer parentComponentContainer);
    public sealed virtual bool IsSnapshotSignatureSupported(FileSystemPath path);
    private ISingleSnapshotComponentContainerBuilder GetBuilderForSnapshotFile(FileSystemPath path);
}
[ShellComponentAttribute("0")]
public class JetBrains.DotTrace.Features.ShellComponents.Local.SnapshotContainer.SnapshotComponentContainerFactory : LocalAndRemoteComponentContainerFactory {
    public SnapshotComponentContainerFactory(IUseExternalStorage useExternalStorage, IExternalStoragePool externalStoragePool, IThreading threading);
    public sealed virtual IComponentContainer CreateSnapshotComponentContainer(Lifetime lifetime, IComponentContainer parentComponentContainer, SnapshotOrigin origin);
}
public class JetBrains.DotTrace.Features.ShellComponents.Local.SnapshotContainer.SnapshotScopeLifetime : object {
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    public Lifetime Lifetime { get; }
    public SnapshotScopeLifetime(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
}
[ShellComponentAttribute("18")]
public class JetBrains.DotTrace.Features.ShellComponents.Local.SnapshotContainerForFactoringRegistrator : object {
    public SnapshotContainerForFactoringRegistrator(Lifetime lifetime, IActiveSnapshotComponentTracker tracker, DataContexts context);
}
[ShellComponentAttribute("10")]
public class JetBrains.DotTrace.Features.ShellComponents.Local.SourceView.SelectedSourceNodeProvider : SelectedSourceNodeProviderBase {
    private IDataProvider`1<Nullable`1<DateTime>> mySnapshotTakenDate;
    private IDataProvider`1<TreeNodeInfo> myCurrentNode;
    public SelectedSourceNodeProvider(IActiveSnapshotComponentTracker componentTracker);
    protected virtual IDataProvider`1<Nullable`1<DateTime>> GetSnapshotTakenDateProvider();
    protected virtual IDataProvider`1<TreeNodeInfo> GetCurrentNodeProvider();
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.ShellComponents.Local.SourceView.ZoneMarker : object {
}
[ShellComponentAttribute("0")]
public class JetBrains.DotTrace.Features.ShellComponents.Local.StatusBarExportProgressSubmitter : object {
    private IThreading myThreading;
    private IStatusBar myStatusBar;
    public StatusBarExportProgressSubmitter(IStatusBar statusBar, IThreading threading);
    public sealed virtual bool CanAddProgress();
    public sealed virtual void AddProgress(Lifetime lifetime, IProgressIndicatorModel progressModel);
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.ShellComponents.Local.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.ShellComponents.ZoneMarker : object {
}
public enum JetBrains.DotTrace.Features.ShellComponentsViewerOpener.CanOpenSnapshotVerdict : Enum {
    public int value__;
    public static CanOpenSnapshotVerdict CompatibleSnapshot;
    public static CanOpenSnapshotVerdict FileNotFound;
    public static CanOpenSnapshotVerdict UnknownFormat;
    public static CanOpenSnapshotVerdict NewerSnapshot;
}
[ShellComponentAttribute("16")]
public class JetBrains.DotTrace.Features.ShellComponentsViewerOpener.PerformanceSnapshotVersionChecker : object {
    private static ILogger ourLogger;
    private IDictionary`2<ushort, ushort> mySupportedSections;
    private static PerformanceSnapshotVersionChecker();
    public VersionCheckVerdict CheckSnapshotVersion(FileSystemPath snapshotPath);
    public CanOpenSnapshotVerdict CheckSnapshotStatus(FileSystemPath path);
    [LocalizableAttribute("False")]
public string GenerateSupportedSectionCode(FileSystemPath snapshotPath);
    private static IEnumerable`1<SectionData> GetUniqSections(FileSystemPath snapshotPath);
    private static VersionCheckVerdict CheckVersion(IDictionary`2<ushort, ushort> supportedVersions, IEnumerable`1<SectionData> sectionList);
}
[ShellComponentAttribute("16")]
public class JetBrains.DotTrace.Features.ShellComponentsViewerOpener.PerformanceSnapshotViewer : SnapshotViewerBase {
    protected string HostName { get; }
    public double Priority { get; }
    public PerformanceSnapshotViewer(Lifetime lifetime, ParamsForInheritedSnapshotViewerComponent parameter, InstalledProductsDiscoveryComponent installedProducts, IRemoteInstanceManager remoteInstancesManager, IApplicationHost applicationHost);
    protected virtual IReadOnlyCollection`1<ActiveViewer> GetConflictingViewersBySnapshot(FileSystemPath path);
    public static bool IsOpenedInStandaloneLegacyViewer(IRemoteInstanceManager remoteInstancesManager, FileSystemPath path);
    private static IReadOnlyCollection`1<int> GetLegacyStandaloneViewers(IRemoteInstanceManager remoteInstancesManager, FileSystemPath path);
    protected virtual bool SnapshotSupportedCore(FileSystemPath path);
    public virtual ValueTuple`2<string, string> ExportSnapshotExtensionAndDescription(FileSystemPath path);
    protected virtual string get_HostName();
    public virtual double get_Priority();
}
[ShellComponentAttribute("16")]
public class JetBrains.DotTrace.Features.ShellComponentsViewerOpener.TimelineAvaloniaSnapshotViewer : TimelineSnapshotViewerBase {
    public double Priority { get; }
    protected string HostName { get; }
    public TimelineAvaloniaSnapshotViewer(Lifetime lifetime, ParamsForInheritedSnapshotViewerComponent parameter, InstalledProductsDiscoveryComponent installedProducts, IRemoteInstanceManager remoteInstancesManager, IApplicationHost applicationHost);
    public virtual double get_Priority();
    protected virtual string get_HostName();
}
public abstract class JetBrains.DotTrace.Features.ShellComponentsViewerOpener.TimelineSnapshotViewerBase : SnapshotViewerBase {
    private static ILogger ourLogger;
    protected TimelineSnapshotViewerBase(Lifetime lifetime, ParamsForInheritedSnapshotViewerComponent parameter, InstalledProductsDiscoveryComponent installedProducts, IRemoteInstanceManager remoteInstancesManager, IApplicationHost applicationHost);
    private static TimelineSnapshotViewerBase();
    protected virtual IReadOnlyCollection`1<ActiveViewer> GetConflictingViewersBySnapshot(FileSystemPath path);
    protected virtual bool SnapshotSupportedCore(FileSystemPath path);
    public virtual ValueTuple`2<string, string> ExportSnapshotExtensionAndDescription(FileSystemPath path);
}
[ShellComponentAttribute("16")]
public class JetBrains.DotTrace.Features.ShellComponentsViewerOpener.TimelineWpfSnapshotViewer : TimelineSnapshotViewerBase {
    private ILazy`1<ISettingsStore> mySettingsStore;
    public double Priority { get; }
    protected string HostName { get; }
    public TimelineWpfSnapshotViewer(Lifetime lifetime, ParamsForInheritedSnapshotViewerComponent parameter, InstalledProductsDiscoveryComponent installedProducts, IRemoteInstanceManager remoteInstancesManager, IApplicationHost applicationHost, ILazy`1<ISettingsStore> settingsStore);
    public virtual double get_Priority();
    private bool UseCrossPlatformViewerSettingEnabled();
    protected virtual bool SnapshotSupportedCore(FileSystemPath path);
    protected virtual string get_HostName();
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.ShellComponentsViewerOpener.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotComponents.BothSides.Performance.ZoneMarker : object {
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.BothSides.Timeline.Comparison.TimelineMetadataReaderWrapper : object {
    [CompilerGeneratedAttribute]
private IAccessor`1<IMetadataReader> <Data>k__BackingField;
    public IAccessor`1<IMetadataReader> Data { get; }
    public TimelineMetadataReaderWrapper(IDataContainer`1<IAccessor`1<IMetadataManager>> manager);
    [CompilerGeneratedAttribute]
public sealed virtual IAccessor`1<IMetadataReader> get_Data();
}
[SnapshotComponentAttribute("0")]
public class JetBrains.DotTrace.Features.SnapshotComponents.BothSides.Timeline.Comparison.TimelineNavigationInfoProvider : object {
    private IAccessor`1<INavigationInfoProvider> myNavigationInfoProvider;
    public TimelineNavigationInfoProvider(IAccessor`1<INavigationInfoProvider> navigationInfoProvider);
    public sealed virtual INavigationInfoProviderMerged Get(Lifetime lifetime);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.BothSides.Timeline.Comparison.TimelineTransparentMetadataManagerAccessor : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<IAccessor`1<IMetadataManagerMerged>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<IAccessor`1<IMetadataManagerMerged>>> Data { get; }
    public TimelineTransparentMetadataManagerAccessor(Lifetime lifetime, IDataContainer`1<IAccessor`1<IMetadataManager>> rawMetadataManagerContainer);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<IAccessor`1<IMetadataManagerMerged>>> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.BothSides.Timeline.TimelinePayloadPresentersProvider : object {
    private IDataProvider`1<TimelinePayloadPresenters> myCombinedPresenter;
    private IDataProvider`1<IPayloadPresenters`1<LongPayload>> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.DataStructures.Other.Payloads.IPayloadPresenters<JetBrains.DotTrace.DataStructures.CallTree.LongPayload>>>.Data { get; }
    private IDataProvider`1<IPayloadNormalizer`1<LongPayload>> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.DataStructures.Other.Payloads.IPayloadNormalizer<JetBrains.DotTrace.DataStructures.CallTree.LongPayload>>>.Data { get; }
    public TimelinePayloadPresentersProvider(IProviderContainer`1<ITickTimeConverterContainer> tickTimeConverterProviderContainer);
    private sealed virtual override IDataProvider`1<IPayloadPresenters`1<LongPayload>> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.DataStructures.Other.Payloads.IPayloadPresenters<JetBrains.DotTrace.DataStructures.CallTree.LongPayload>>>.get_Data();
    private sealed virtual override IDataProvider`1<IPayloadNormalizer`1<LongPayload>> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.DataStructures.Other.Payloads.IPayloadNormalizer<JetBrains.DotTrace.DataStructures.CallTree.LongPayload>>>.get_Data();
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotComponents.BothSides.Timeline.ZoneMarker : object {
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.CallTree.CallTreePanelModel : CallTreePanelModelBase {
    public CallTreePanelModel(IDataContainer`1<ICallTreeModel> callTreeModelContainer, IDataContainer`1<ICallTreeRootsStack> rootStack, IRemotableReference`1<IProviderContainer`1<IAsyncMethodService>> asyncMethodService, IRemotableReference`1<ICacheProviderContainer`1<IFuidsMatcher>> fuidsMatcher, ICacheProviderContainer`1<IAccessor`1<IMetadataReaderMerged>> metadataProviderContainer, IMethodPrinter methodPrinter, IcicleWindowActionComponent icicleWindowActionComponent, SnapshotTypeComponent snapshotTypeComponent);
}
[LocalizableAttribute("False")]
[SnapshotComponentAttribute("0")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.CallTree.DfsTreeDumpBuilder : object {
    private IRemotableReference`1<IDfsTreeDump> myDfsTreeDumper;
    private Clipboard myClipboard;
    public DfsTreeDumpBuilder(IRemotableReference`1<IDfsTreeDump> dfsTreeDumper, Clipboard clipboard);
    public sealed virtual void RequestDumpAndShowDialogOnFinish();
    [CompilerGeneratedAttribute]
private void <RequestDumpAndShowDialogOnFinish>b__3_1(FileSystemPath path);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.CallTree.ExcludedNodesProvider : object {
    [CompilerGeneratedAttribute]
private IObservableSet`1<CallTreePath> <Nodes>k__BackingField;
    public IObservableSet`1<CallTreePath> Nodes { get; }
    public ExcludedNodesProvider(Lifetime lifetime, ISnapshotStateStorageProvider snapshotStateProvider, IFiltersMonitor monitor);
    [CompilerGeneratedAttribute]
public sealed virtual IObservableSet`1<CallTreePath> get_Nodes();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.CallTree.SourceViewNavigationDataController : object {
    private IDataController`1<NavigationPath> myInput;
    [CompilerGeneratedAttribute]
private IDataProvider`1<NavigationInfoData> <Data>k__BackingField;
    public IDataProvider`1<NavigationInfoData> Data { get; }
    public SourceViewNavigationDataController(IRemotablePairContainer`1<DataPipeLifetime> lifetimeContainer, IRemotableReference`1<IProviderContainer`1<IAsyncMethodService>> asyncMethodServiceContainer, IRemotableReference`1<ICacheProviderContainer`1<IFuidsMatcher>> fuidsMatcherContainer, IRemotableReference`1<IProviderContainer`1<IMeasureNodeStorage>> remoteMeasureNodeProviderContainer);
    private static IRemotableReference`1<IAsyncDataProvider`1<NavigationInfoData>> UpdateAsyncFuids(IRemotableReference`1<IAsyncDataProvider`1<NavigationInfoData>> remoteProcessedDataProvider, IRemotableReference`1<IDataProvider`1<IAsyncMethodService>> remoteAsyncService, IRemotableReference`1<IDataProvider`1<IFuidsMatcher>> remoteFuidsMatcher);
    private static IRemotableReference`1<IAsyncDataProvider`1<NavigationInfoData>> BuildProcessedDataProvider(IRemotablePair`1<DataPipeLifetime> pipeLifetime, IDataProvider`1<NavigationPath> deferredNavigationInfoData, IRemotableReference`1<IProviderContainer`1<IMeasureNodeStorage>> remoteMeasureNodeProviderContainer);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<NavigationInfoData> get_Data();
    public sealed virtual void Navigate(NavigationPath navigationPath);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.CallTree.SourceViewTreeNodeInfoComponent : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<TreeNodeInfo> <Data>k__BackingField;
    public IDataProvider`1<TreeNodeInfo> Data { get; }
    public SourceViewTreeNodeInfoComponent(TreeNodeInfoMapper treeNodeInfoProvider, ISourceViewNavigationDataProviderContainer navigationDataProviderContainer);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<TreeNodeInfo> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.CallTree.TreeNodeInfoMapper : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<FuncDataMapper`2<NavigationInfoData, TreeNodeInfo>> <Data>k__BackingField;
    public IDataProvider`1<FuncDataMapper`2<NavigationInfoData, TreeNodeInfo>> Data { get; }
    public TreeNodeInfoMapper(Lifetime lifetime, ICacheProviderContainer`1<IAccessor`1<IMetadataManagerMerged>> metadataAccessor);
    private static TreeNodeInfo BuildTreeNode(NavigationInfoData data, IAccessor`1<IMetadataManagerMerged> accessor);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<FuncDataMapper`2<NavigationInfoData, TreeNodeInfo>> get_Data();
}
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.CallTreeRootsHistory : object {
    private static CallTreeRootPrefix ourDefaultRootPrefix;
    private List`1<CallTreeHistoryItem> myHistory;
    private IDataController`1<int> myCurrentPrefixIndex;
    private DeferUpdateManager myUpdateManager;
    private IValueEntry`1<List`1<CallTreeHistoryItem>> myHistoryList;
    private IValueEntry`1<int> myHistoryIndex;
    [CompilerGeneratedAttribute]
private IDataProvider`1<CallTreeRootPrefixAndSelection> <CurrentRootProvider>k__BackingField;
    public IDataProvider`1<CallTreeRootPrefixAndSelection> CurrentRootProvider { get; }
    public CallTreeRootsHistory(Lifetime lifetime, IThreading threading, ISnapshotStateAccessor snapshotState, ISnapshotMasksComponent masks, SnapshotDataId id);
    private static CallTreeRootsHistory();
    private void Load();
    private CallTreeHistoryItem BuildRootNode();
    private void Save();
    private void RemoveRootsSince(int index);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<CallTreeRootPrefixAndSelection> get_CurrentRootProvider();
    public sealed virtual void PushNewRoot(CallTreeRootPrefix rootPath, bool deleteHistory);
    public sealed virtual void ChangeIndex(Func`2<int, int> changeIndexFunc, bool deleteHistory);
    public sealed virtual bool CanChangeIndex(Func`2<int, int> changeIndexFunc);
    public sealed virtual void ChangeCurrentRoot(Func`2<ICallTreeHistoryItem, bool> changeFunc);
    public sealed virtual T GetCurrentRoot(Func`2<ICallTreeHistoryItem, T> getFunc);
    [CompilerGeneratedAttribute]
private CallTreeRootPrefixAndSelection <.ctor>b__7_2(int currentIndex);
}
[SnapshotComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.Filters.AnalysisSubjectContainer : object {
    public FilterRadioGroup AnalysisSubjectGroup { get; }
    public virtual FilterRadioGroup get_AnalysisSubjectGroup();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.Filters.ClearFiltersModelBuilder : object {
    private List`1<IDataProvider`1<IEnumerable`1<Action>>> myClearFilterValueActions;
    private IDataContainer`1<InstantiatedFilters> myFilters;
    private TimeFilterControllerContainer myTimeFilterControllerContainer;
    private bool myTimeFilterAdded;
    [CompilerGeneratedAttribute]
private IDataProvider`1<int> <NumberOfAppliedFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<Action> <ClearAllActionProvider>k__BackingField;
    public IDataProvider`1<int> NumberOfAppliedFilters { get; private set; }
    public IDataProvider`1<Action> ClearAllActionProvider { get; private set; }
    public ClearFiltersModelBuilder(IDataContainer`1<InstantiatedFilters> filters, TimeFilterControllerContainer timeFilterControllerContainer);
    [CompilerGeneratedAttribute]
public IDataProvider`1<int> get_NumberOfAppliedFilters();
    [CompilerGeneratedAttribute]
private void set_NumberOfAppliedFilters(IDataProvider`1<int> value);
    [CompilerGeneratedAttribute]
public IDataProvider`1<Action> get_ClearAllActionProvider();
    [CompilerGeneratedAttribute]
private void set_ClearAllActionProvider(IDataProvider`1<Action> value);
    private void Build();
    private void AddFilter(IInstantiatedFilter filter);
    public sealed virtual void EnumFilter(IInstantiatedEnumFilter`2<TKey, TPayload> instantiated);
    public sealed virtual void RadioGroupFilter(IInstantiatedRadioGroupFilter`2<TKey, TPayload> instantiated);
    public sealed virtual void CallTreeFilter(InstantiatedCallTreeFilter`1<TPayload> instantiated);
    public sealed virtual void ToggleFilter(IInstantiatedToggleFilter`1<TPayload> instantiated);
    public sealed virtual void RadioButtonFilter(IInstantiatedRadioButtonFilter`1<TPayload> instantiated);
    public sealed virtual void YesNoFilter(IInstantiatedYesNoFilter`1<TPayload> instantiated);
    public sealed virtual void ClearableFilter(IInstantiatedClearableFilter instantiated);
}
[SnapshotComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.Filters.DefaultInitialThreadsVisibility : object {
    public IDataProvider`1<bool> ShowNativeThreads { get; }
    public virtual IDataProvider`1<bool> get_ShowNativeThreads();
}
[SnapshotComponentAttribute("16")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.Filters.ThreadFilterModeContainer : object {
    public FilterPresentationMode Data { get; }
    public virtual FilterPresentationMode get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.Inject.MeasureNodeProviderContainerProvidersSetter : object {
    public MeasureNodeProviderContainerProvidersSetter(IRemotableReference`1<IMeasureNodeProviderContainer> remote, IExcludedNodesProvider excludedNodesProvider, CallTreePresentationSettingsComponent callTreePresentationSettings);
}
public interface JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.ITopMethodsRemoteSettings {
    public IDataProxy`1<bool> FollowSelection { get; }
    public IDataProxy`1<bool> ShowSystemFunctions { get; }
    public IDataProxy`1<bool> ShowSystemFunctionsInPlainList { get; }
    public IDataProxy`1<bool> SortByTotal { get; }
    public IDataProxy`1<bool> AutoShowSystemFunctions { get; }
    public abstract virtual IDataProxy`1<bool> get_FollowSelection();
    public abstract virtual IDataProxy`1<bool> get_ShowSystemFunctions();
    public abstract virtual IDataProxy`1<bool> get_ShowSystemFunctionsInPlainList();
    public abstract virtual IDataProxy`1<bool> get_SortByTotal();
    public abstract virtual IDataProxy`1<bool> get_AutoShowSystemFunctions();
}
[LocalizableAttribute("False")]
[SnapshotComponentAttribute("10")]
[ThreadSafeAttribute]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.Metadada.MethodPrinter : object {
    private Lifetime myLifetime;
    private ConcurrentDictionary`2<FunctionUIDm, MetadataCache> myCallFrameCache;
    [CanBeNullAttribute]
private IStringReader myStringReader;
    private bool myIsInternalMode;
    private IProperty`1<bool> myShowFuids;
    private ObjectPool`1<FormattedTextBuilder> myTextBuilders;
    public MethodPrinter(Lifetime lifetime, ISettingsStore settings, ProductConfigurations configurations, IStringReader stringReader);
    private FormattedText AttachKeyToTooltip(FormattedText text, FunctionUIDm fuid);
    private FormattedTextBuilder GetTextBuilder();
    public sealed virtual NamePair Print(FunctionUIDm key, Func`2<Lifetime, IMetadataReaderMerged> metadataReaderAccessor, Boolean& matchFound, IdentifierMatcher matcher);
    private static Union`2<string, FormattedTextBuilder> AppendSignature(Union`2<string, FormattedTextBuilder> fullName, string metadataCacheSignature);
    private MetadataCache GetMetadata(FunctionUIDm key, Func`2<Lifetime, IMetadataReaderMerged> metadataReaderAccessor);
    private Union`2<string, FormattedTextBuilder> HighlightMatches(string input, IdentifierMatcher matcher, Boolean& matchFound);
    private Union`2<string, FormattedTextBuilder> HighlightMatches(FormattedTextBuilder input, IdentifierMatcher matcher, Boolean& matchFound);
    private Union`2<string, FormattedTextBuilder> HighlightMatches(Union`2<string, FormattedTextBuilder> input, IdentifierMatcher matcher, Boolean& matchFound);
    private Union`2<string, FormattedTextBuilder> AddFuid(Union`2<string, FormattedTextBuilder> highlightedText, FunctionUIDm fuid);
    private FormattedTextBuilder AddFuid(FormattedTextBuilder highlightedText, FunctionUIDm fuid);
    private string AddFuid(string name, FunctionUIDm fuid);
    private Union`2<string, FormattedTextBuilder> NameForSynthetic(FunctionUIDm fuid, Union`2<string, FormattedTextBuilder> text);
    private Union`2<string, FormattedTextBuilder> ShortNameWithAsync(ClrFunctionInfo info, FunctionUIDm key);
    private static string ShortName(ClrFunctionInfo info);
    private FormattedText ToFormattedText(Union`2<string, FormattedTextBuilder> this);
    [CompilerGeneratedAttribute]
private FormattedTextBuilder <HighlightMatches>b__15_2(string s);
    [CompilerGeneratedAttribute]
private FormattedText <ToFormattedText>b__22_1(FormattedTextBuilder format);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.MetadataWrappers.AdvancedMethodInfoAccessor : object {
    private IDataSink`1<IAccessor`1<IAdvancedMethodInfoProvider>> myMetadataManagerAccessor;
    public IAccessor`1<IAdvancedMethodInfoProvider> Data { get; }
    public AdvancedMethodInfoAccessor(Lifetime lifetime, ICacheProviderContainer`1<IAccessor`1<IAdvancedMethodInfoProvider>> advancedMethodInfoAccessorDataProvider);
    public sealed virtual IAccessor`1<IAdvancedMethodInfoProvider> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.MetadataWrappers.AdvancedMethodInfoAccessorDataProvider : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<IAccessor`1<IAdvancedMethodInfoProvider>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<IAccessor`1<IAdvancedMethodInfoProvider>>> Data { get; }
    public AdvancedMethodInfoAccessorDataProvider(ICacheProviderContainer`1<IAccessor`1<IMetadataManagerMerged>> metadataAccessor);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<IAccessor`1<IAdvancedMethodInfoProvider>>> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.MetadataWrappers.MetadataAccessorMerged : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<IAccessor`1<IMetadataReaderMerged>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<IAccessor`1<IMetadataReaderMerged>>> Data { get; protected set; }
    public MetadataAccessorMerged(ICacheProviderContainer`1<IAccessor`1<IMetadataManagerMerged>> managerAccessor);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<IAccessor`1<IMetadataReaderMerged>>> get_Data();
    [CompilerGeneratedAttribute]
protected void set_Data(IDataProvider`1<ICacheSource`1<IAccessor`1<IMetadataReaderMerged>>> value);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.NamespaceTree.NamespaceTreeBuildingManager : object {
    private IForegroundProgressPresenter myForegroundProgressPresenter;
    private IThreading myThreading;
    private IDataSink`1<ISnapshotNamespaceTree> myTreeSink;
    private ProgressProvider myProgress;
    private SequentialLifetimes myLifetimeRow;
    public ISnapshotNamespaceTree Tree { get; }
    public NamespaceTreeBuildingManager(Lifetime lifetime, IRemotablePairContainer`1<DataPipeLifetime> pipeLifetime, IRemotableReference`1<SnapshotNamespaceTreeProvider> nsTreeProvider, IForegroundProgressPresenter progressPresenter, IThreading threading);
    public sealed virtual void ExecuteWithNamespaceTree(Action`1<ISnapshotNamespaceTree> action);
    public sealed virtual ISnapshotNamespaceTree get_Tree();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.RecentSnapshotProviderGetter : object {
    private IDataSink`1<ILiveRecentSnapshot> mySink;
    public RecentSnapshotProviderGetter(Lifetime lifetime, IProviderContainer`1<ILiveRecentSnapshot> recentSnapshotProviderContainer);
    [CanBeNullAttribute]
public sealed virtual ILiveRecentSnapshot GetCurrent();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.SnapshotSaver.TimelineSnapshotSaver : object {
    private ILogger myLogger;
    private Lifetime myLifetime;
    private IPersistentPathDialogs myPersistentPathDialogs;
    private IEnumerable`1<ISnapshotViewer> mySnapshotViewer;
    private IRecentSnapshotsStorage mySnapshotsInfoStorage;
    private IDataSink`1<ISnapshotInfo> mySnapshotSink;
    private UITaskExecutor myUITaskExecutor;
    private SnapshotScopeLifetime mySnapshotScopeLifetime;
    private static ILogger ourLog;
    public TimelineSnapshotSaver(Lifetime lifetime, IPersistentPathDialogs persistentPathDialogs, IEnumerable`1<ISnapshotViewer> snapshotViewer, IRecentSnapshotsStorage snapshotsInfoStorage, IProviderContainer`1<ISnapshotInfo> snapshotInfoProvider, UITaskExecutor uiTaskExecutor, SnapshotScopeLifetime snapshotScopeLifetime);
    private static TimelineSnapshotSaver();
    public bool SaveSnapshot(IRecentSnapshot recentSnapshotItem);
    private void DeleteSnapshot(FileSystemPath snapshotIndexFilePath);
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.SnapshotSaver.ZoneMarker : object {
}
[SnapshotComponentAttribute("16")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.SnapshotTypeComponent : object {
    public bool IsTimeline { get; }
    public virtual bool get_IsTimeline();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.Subsystems.SubsystemKeysSource : object {
    [CompilerGeneratedAttribute]
private IObservableSet`1<SubsystemKey> <IncludedSubsystems>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservableSet`1<SubsystemKey> <ExcludedSubsystems>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <FilterEnabled>k__BackingField;
    public IObservableSet`1<SubsystemKey> IncludedSubsystems { get; }
    public IObservableSet`1<SubsystemKey> ExcludedSubsystems { get; }
    public IDataProvider`1<bool> FilterEnabled { get; }
    public SubsystemKeysSource(Lifetime lifetime, ISubsystemSettingsProvider subsystemSettingsProvider, ISnapshotStateStorageProvider snapshotStateStorageProvider, IRemotableReference`1<SubsystemKeysSetComponent> remoteProxy, IFiltersMonitor filtersMonitor);
    [CompilerGeneratedAttribute]
public IObservableSet`1<SubsystemKey> get_IncludedSubsystems();
    [CompilerGeneratedAttribute]
public IObservableSet`1<SubsystemKey> get_ExcludedSubsystems();
    [CompilerGeneratedAttribute]
public IDataProvider`1<bool> get_FilterEnabled();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.Subsystems.SubsystemsFilterAllItemsProvider : SubsystemsFilterAllItemsProviderBase {
    public SubsystemsFilterAllItemsProvider(ISubsystemSettingsProvider timelineSubsystemSettings, IRemotableReference`1<ISubsystemMappingProviderContainer> subsystemsCacheProvider);
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.Subsystems.ZoneMarker : object {
}
[SnapshotComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.TimeRange.FilteredRangeProvider : object {
    public IDataProvider`1<ModelRange> Range { get; }
    public virtual IDataProvider`1<ModelRange> get_Range();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.TimeRange.IsTimestampModeProvider : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <IsTimestampMode>k__BackingField;
    public IDataProvider`1<bool> IsTimestampMode { get; }
    public IsTimestampModeProvider(ISelectedRangeContainer selectedRangeContainer);
    [CompilerGeneratedAttribute]
public IDataProvider`1<bool> get_IsTimestampMode();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.TimeRange.SelectedRangeContainer : SavedStateDataControllerContainer`1<Nullable`1<ModelRange>> {
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <HasSelectedRange>k__BackingField;
    public IDataProvider`1<bool> HasSelectedRange { get; }
    public SelectedRangeContainer(Lifetime lifetime, ISnapshotStateStorageProvider snapshotStateStorageProvider, IFiltersMonitor filtersMonitor);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<bool> get_HasSelectedRange();
}
[SnapshotComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.TimeRange.TimeFilterControllerContainer : object {
    [CompilerGeneratedAttribute]
private TimeFilterController <Data>k__BackingField;
    public TimeFilterController Data { get; }
    [CompilerGeneratedAttribute]
public virtual TimeFilterController get_Data();
}
[SnapshotComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.TimeRange.ViewportRangesComponent : object {
    public IDataControllerContainer`1<ModelRangeDouble> VisibleRange { get; }
    public IDataController`1<ModelRangeDouble> TotalRange { get; }
    public IDataProvider`1<ModelRange> VisibleModelRange { get; }
    public IDataProvider`1<bool> IsTotalRangeVisible { get; }
    public ulong MinimumVisibleModelRangeLength { get; }
    public virtual IDataControllerContainer`1<ModelRangeDouble> get_VisibleRange();
    public virtual IDataController`1<ModelRangeDouble> get_TotalRange();
    public virtual IDataProvider`1<ModelRange> get_VisibleModelRange();
    public virtual IDataProvider`1<bool> get_IsTotalRangeVisible();
    public virtual ulong get_MinimumVisibleModelRangeLength();
}
[SnapshotComponentAttribute("10")]
[UsedImplicitlyAttribute("2")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.TopMethodsRemoteSettingsSetter : object {
    public TopMethodsRemoteSettingsSetter(TopMethodsSettingsComponent topMethodsSettingsShellComponent, IDataContainer`1<IRemoteCommunicator> remoteComm, IRemotableReference`1<ITopMethodsRemoteSettings> remote);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Common.TopMethodsSettingsComponent : object {
    public IDataController`1<bool> FollowSelection;
    public IDataController`1<bool> ShowSystemFunctions;
    public IDataController`1<bool> ShowSystemFunctionsInPlainList;
    public IDataController`1<bool> SortByTotal;
    public IDataController`1<bool> AutoShowSystemFunctions;
    public IDataController`1<bool> SearchAutoHide;
    public TopMethodsSettingsComponent(Lifetime lifetime, ISettingsStore settings);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Performance.CallTree.PerformanceCallTreeBaseModelBuilder : CallTreeBaseModelBuilder`2<DotTracePayload, CallTreeSectionOffset> {
    public PerformanceCallTreeBaseModelBuilder(ICacheProviderContainer`1<IAccessor`1<IMetadataReaderMerged>> metadataProviderContainer, IMethodPrinter methodPrinter, ICallTreeHistoryManager`1<DotTracePayload> historyManager, IRemotablePairContainer`1<DataPipeLifetime> lifetimeContainer, IPayloadPresentersProvider`1<DotTracePayload> payloadPresenter, IProviderContainer`1<IPayloadPresenters`1<DotTracePayload>> payloadPresenterContainer, IProviderContainer`1<IPayloadNormalizer`1<DotTracePayload>> payloadNormalizerContainer, IDataContainer`1<ICallTreeRootsStack> rootsStack, IRemotableReference`1<ICallTreePayloadsSource`2<CallTreeSectionOffset, DotTracePayload>> callTreePayloadsComponent, CallTreePresentationSettingsComponent callTreePresentationSettings, IRemotableReference`1<IProviderContainer`1<ICallTreeAccessors`1<CallTreeSectionOffset>>> treeAccessorsContainer, IRemotableReference`1<PerformanceCallTreeFilterInputComponents> components, IRemotableReference`1<ICallTreeRootProvider`1<CallTreeSectionOffset>> callTreeRootProvider, IExcludedNodesProvider excludedNodesProvider, ISnapshotStateStorageProvider snapshotStateAccessorContainerProvider, IRemotableReference`1<IProviderContainer`1<IRootsSplitter`1<CallTreeSectionOffset>>> rootsSplitter, IRemotableReference`1<IProviderContainer`1<ThreadPowersInfo`1<CallTreeSectionOffset>>> threadPowersProvider);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Performance.CallTree.PerformanceCallTreeFilterBuilder : CallTreeFilterBuilderBase`2<DotTracePayload, CallTreeSectionOffset> {
    public PerformanceCallTreeFilterBuilder(CallTreeBaseModelBuilder`2<DotTracePayload, CallTreeSectionOffset> callTreeBaseModelBuilder, ICacheProviderContainer`1<IAccessor`1<IMetadataReaderMerged>> metadataProviderContainer, IMethodPrinter methodPrinter, IRemotablePairContainer`1<DataPipeLifetime> lifetimeContainer, IPayloadPresentersProvider`1<DotTracePayload> payloadPresenter, IProviderContainer`1<IPayloadNormalizer`1<DotTracePayload>> payloadNormalizerContainer, IDataContainer`1<IRemoteCommunicator> commContainer, IDataContainer`1<ICallTreeRootsStack> rootsStack, TopMethodsSettingsComponent topMethodSettingsComponent, IExcludedNodesProvider excludedNodesProvider, CallTreePresentationSettingsComponent settings, IRemotableReference`1<FlatPayloadsComponent`2<CallTreeSectionOffset, DotTracePayload>> flatPayloadsComponent);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Performance.CallTree.PerformanceInstantiatedFiltersBuilder : object {
    [CompilerGeneratedAttribute]
private InstantiatedFilters <Data>k__BackingField;
    public InstantiatedFilters Data { get; }
    public PerformanceInstantiatedFiltersBuilder(Lifetime lifetime, IRemotablePairContainer`1<DataPipeLifetime> lifetimeContainer, ISelectedSnapshotController selectedSnapshot, ISnapshotOrderProvider snapshotOrderProvider, IDataContainer`1<InstantiatedCallTreeFilter`1<DotTracePayload>> instantiatedCallTreeFilter, IRemotableReference`1<IDataContainer`1<DataPipeLifetime>> remoteDataPipeLifetime, IDataContainer`1<InstantiatedSubsystemsFilter`1<DotTracePayload>> instantiatedSubsystemsFilter, IRemotableReference`1<IRootAccessDataProvider`1<CallTreeSectionOffset>> allRoots, IRemotableReference`1<IProviderContainer`1<ICallTreeAccessors`1<CallTreeSectionOffset>>> treeAccessorsContainer, CallTreePresentationSettingsComponent callTreePresentationSettings, IRemotableReference`1<CallTreeFilterInputComponents`1<CallTreeSectionOffset>> remoteComponents, IExcludedNodesProvider excludedNodesProvider, IDataContainer`1<ICallTreeRootsStack> rootStacksContainer, IRemoteProviderContainer`1<CallTreePayloads`2<CallTreeSectionOffset, DotTracePayload>> payloadCalculator, IProviderContainer`1<IPayloadPresenters`1<DotTracePayload>> payloadPresenter, IRemotableReference`1<IThreadsMapper`1<CallTreeSectionOffset>> ptrToThreadMapper, IRemotableReference`1<ISnapshotsInfoProviders`1<CallTreeSectionOffset>> snapshotsInfoProviders, IAllSnapshotsPresentationProvider snapshotsPresentation, IProviderContainer`1<IPayloadPresenterFactory`1<DotTracePayload>> snapshotsPayloadPresenters, IRemotableReference`1<ICallTreeThreadFilter> callTreeThreadFilter, IOpenTimelineSnapshotDialog dialog, ISnapshotDataContainerManager snapshotManager, ISnapshotStateStorageProvider snapshotStateStorageProvider, IProviderContainer`1<SnapshotConfiguration> snapshotConfiguration, IRemotableReference`1<IProviderContainer`1<IRootsSplitter`1<CallTreeSectionOffset>>> byThreadSplitterContainer, IRemotableReference`1<IProviderContainer`1<ThreadPowersInfo`1<CallTreeSectionOffset>>> threadPowersProvider, IFiltersMonitor filtersMonitor);
    private static IRemotableReference`1<IAsyncDataProvider`1<PrecalculatedAccessData>> BuildRemotePrecalculatedAccessDataProvider(IRemotableReference`1<IDataContainer`1<DataPipeLifetime>> remoteDataPipeLifetime, IRemotableReference`1<IDataProvider`1<CallTreePayloads`2<CallTreeSectionOffset, DotTracePayload>>> payloadCalculator, IRemotableReference`1<IDataProvider`1<CallTreeNodesAccessor`1<CallTreeSectionOffset>>> allRootsCallTreeAccessor, IDataProvider`1<CallTreePath> callTreePathProvider);
    private static IRemotableReference`1<IDataProvider`1<CallTreeNodesAccessors`1<CallTreeSectionOffset>>> BuildCallTreeAccessor(IRemotableReference`1<IDataContainer`1<DataPipeLifetime>> remoteDataPipeLifetime, IRemotableReference`1<IRootAccessDataProvider`1<CallTreeSectionOffset>> allRoots, IRemotableReference`1<IProviderContainer`1<ICallTreeAccessors`1<CallTreeSectionOffset>>> treeAccessorsContainer, IRemotableReference`1<CallTreeFilterInputComponents`1<CallTreeSectionOffset>> remoteComponents, IExcludedNodesProvider excludedNodesProvider, IDataProvider`1<bool> isAsyncSupportedProvider, IRemotableReference`1<IProviderContainer`1<IRootsSplitter`1<CallTreeSectionOffset>>> rootsSplitterContainer);
    private static IDataProvider`1<PayloadsMap`2<SingleSnapshotInfo, DotTracePayload>> BuildPrecalculatedAccessDataMap(IRemotableReference`1<ISnapshotsInfoProviders`1<CallTreeSectionOffset>> snapshotsInfoProviders, IRemotableReference`1<IDataContainer`1<DataPipeLifetime>> remoteDataPipeLifetime, IRemotableReference`1<IProviderContainer`1<ICallTreeAccessors`1<CallTreeSectionOffset>>> treeAccessorsContainer, IRemotableReference`1<IDataProvider`1<IOffsetFilter>> remoteThreadsOffsetFilterProvider, IRemotableReference`1<CallTreeFilterInputComponents`1<CallTreeSectionOffset>> remoteComponents, IRemotableReference`1<IDataProvider`1<CallTreePayloads`2<CallTreeSectionOffset, DotTracePayload>>> payloadsCalculator, IExcludedNodesProvider excludedNodesProvider, IDataProvider`1<bool> isAsyncSupportedProvider, IRemotableReference`1<IProviderContainer`1<IRootsSplitter`1<CallTreeSectionOffset>>> byThreadSplitterContainer);
    private static void AttachBuildOffsetsFilterToCallTree(IRemotableReference`1<ICallTreeThreadFilter> callTreeThreadFilter, IRemotableReference`1<IDataProvider`1<IOffsetFilter>> threadsOffsetFilter, IRemotableReference`1<IDataProvider`1<IOffsetFilter>> comparisonOffsetFilter);
    private static IRemotableReference`1<IDataProvider`1<IOffsetFilter>> BuildComparisonOffsetFilter(IRemotableReference`1<IThreadsMapper`1<CallTreeSectionOffset>> ptrToThreadMapper, IDataProvider`1<SingleSnapshotInfo> selectedSnapshot);
    private static IRemotableReference`1<IDataProvider`1<IOffsetFilter>> BuildThreadsOffsetFilter(IRemotableReference`1<IThreadsMapper`1<CallTreeSectionOffset>> ptrToThreadMapper, IDataProvider`1<ThreadName[]> selectedThreadsProvider);
    private static IDataProvider`1<Dictionary`2<T, double>> BuildAllValues(IRemotableReference`1<IRootAccessDataProvider`1<CallTreeSectionOffset>> allRoots, IRemotableReference`1<IDataProvider`1<IDataMapper`2<CallTreeSectionOffset, T>>> mapper, IRemotableReference`1<IProviderContainer`1<ThreadPowersInfo`1<CallTreeSectionOffset>>> threadPowersProvider);
    private static IDataProvider`1<PayloadsMap`2<T, DotTracePayload>> BuildPayloadsMap(IRemotableReference`1<IAsyncDataProvider`1<PrecalculatedAccessData>> precalculatedAccessDataProvider, IRemotableReference`1<IDataProvider`1<IOffsetFilter>> threadsOffsetFilter, IRemotableReference`1<IDataProvider`1<IDataMapper`2<CallTreeSectionOffset, T>>> ptrToThreadMapper, Action`1<IDictionary`2<T, DotTracePayload>> postProcessFunc);
    [CompilerGeneratedAttribute]
public sealed virtual InstantiatedFilters get_Data();
    private static IAsyncDataProvider`1<PrecalculatedAccessData> BuildPrecalculatedCallTreeAccessData(IDataProvider`1<CallTreeNodesAccessor`1<CallTreeSectionOffset>> accessorProvider, IDataContainer`1<DataPipeLifetime> dataPipeLifetime, IDataProvider`1<CallTreePath> callTreePathProvider, IDataProvider`1<CallTreePayloads`2<CallTreeSectionOffset, DotTracePayload>> callTreePayloads);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Performance.CallTree.PerformanceSubsystemsFilterBuilder : SubsystemsFilterBuilderBase`2<CallTreeSectionOffset, DotTracePayload> {
    public PerformanceSubsystemsFilterBuilder(SubsystemKeysSource subsystemKeysSource, IRemotableReference`1<FlatPayloadsComponent`2<CallTreeSectionOffset, DotTracePayload>> flatPayloadsComponent, IProviderContainer`1<IEnumerable`1<SubsystemFilterItem>> allSubsystemFilterItemsContainer, IProviderContainer`1<IPayloadPresenters`1<DotTracePayload>> payloadPresenterContainer, IProviderContainer`1<IPayloadNormalizer`1<DotTracePayload>> payloadNormalizerContainer);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Performance.CallTree.PerformanceTopMethodsModelBuilder : TopMethodsModelBuilderBase`1<DotTracePayload> {
    public PerformanceTopMethodsModelBuilder(IDataContainer`1<DataPipeLifetime> lifetimeContainer, ICacheProviderContainer`1<IAccessor`1<IMetadataReaderMerged>> metadataProviderContainer, IMethodPrinter methodPrinter, IProviderContainer`1<IPayloadPresenters`1<DotTracePayload>> payloadPresentersContainer, IRemotableReference`1<IProviderContainer`1<ITopMethodsMap`1<DotTracePayload>>> topMethodsMapContainer, TopMethodsSettingsComponent topMethodsSettingsComponent);
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Performance.CallTree.ZoneMarker : object {
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Performance.PerformanceCallTreeHistoryManager : CallTreeHistoryManager`1<DotTracePayload> {
    public PerformanceCallTreeHistoryManager(Lifetime lt, IMethodPrinter methodPrinter);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Performance.Properties.PerformancePropertiesModelBuilder : PropertiesModelBuilderBase`2<CallTreeSectionOffset, DotTracePayload> {
    public PerformancePropertiesModelBuilder(ICacheProviderContainer`1<IAccessor`1<IMetadataReaderMerged>> metadataProviderContainer, IMethodPrinter methodPrinter, IProviderContainer`1<IPayloadPresenters`1<DotTracePayload>> payloadPresentersContainer, IRemotableReference`1<FlatPayloadsComponent`2<CallTreeSectionOffset, DotTracePayload>> flatPayloadsComponent);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Performance.Search.PerformanceAggregatedPayloadsProvider : AggregatedPayloadsProviderBase`2<CallTreeSectionOffset, DotTracePayload> {
    public PerformanceAggregatedPayloadsProvider(IRemotableReference`1<PerformanceFlatPayloadsComponent> flatPayloadsComponent, IPayloadPresentersProvider`1<DotTracePayload> payloadsPresenterProvider);
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Performance.ZoneMarker : object {
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.CallTree.CallTreeStateAndPredicateProviderComponent : object {
    [CompilerGeneratedAttribute]
private IRemotableReference`1<IDataProvider`1<CallTreeStateAndPredicate`1<DfsNodePtr>>> <Data>k__BackingField;
    public IRemotableReference`1<IDataProvider`1<CallTreeStateAndPredicate`1<DfsNodePtr>>> Data { get; }
    public CallTreeStateAndPredicateProviderComponent(IRemotableReference`1<ICallTreeFiltration`1<DfsNodePtr>> callTreeFiltration, IRemotableReference`1<IProviderContainer`1<SubsystemKeysSet>> subsystemKeysSetContainer, IRemotablePairContainer`1<DataPipeLifetime> lifetimeContainer, IRemoteProviderContainer`1<CallTreePathWithAccessData`1<DfsNodePtr>> rootWithAccessDataContainer);
    private static IRemotableReference`1<IDataProvider`1<CallTreeStateAndPredicate`1<DfsNodePtr>>> Build(IRemotableReference`1<ICallTreeFiltration`1<DfsNodePtr>> callTreeFiltration, IRemotableReference`1<IProviderContainer`1<SubsystemKeysSet>> subsystemKeysSetContainer, IRemotablePair`1<DataPipeLifetime> lifetimePair, IRemotableReference`1<IDataProvider`1<CallTreePathWithAccessData`1<DfsNodePtr>>> rootWithAccessData);
    [CompilerGeneratedAttribute]
public sealed virtual IRemotableReference`1<IDataProvider`1<CallTreeStateAndPredicate`1<DfsNodePtr>>> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.CallTree.TimelineCallTreeBaseModelBuilder : CallTreeBaseModelBuilder`2<LongPayload, DfsNodePtr> {
    public TimelineCallTreeBaseModelBuilder(ICacheProviderContainer`1<IAccessor`1<IMetadataReaderMerged>> metadataProviderContainer, IMethodPrinter methodPrinter, ICallTreeHistoryManager`1<LongPayload> historyManager, IRemotablePairContainer`1<DataPipeLifetime> lifetimeContainer, IPayloadPresentersProvider`1<LongPayload> payloadPresenter, IProviderContainer`1<IPayloadPresenters`1<LongPayload>> payloadPresenterContainer, IProviderContainer`1<IPayloadNormalizer`1<LongPayload>> payloadNormalizerContainer, IDataContainer`1<ICallTreeRootsStack> rootsStack, IRemotableReference`1<ICallTreePayloadsSource`2<DfsNodePtr, LongPayload>> callTreePayloadsComponent, CallTreePresentationSettingsComponent callTreePresentationSettings, IRemotableReference`1<IProviderContainer`1<ICallTreeAccessors`1<DfsNodePtr>>> treeAccessorsContainer, IRemotableReference`1<TimelineCallTreeFilterInputComponents> components, IRemotableReference`1<ICallTreeRootProvider`1<DfsNodePtr>> callTreeRootProvider, IExcludedNodesProvider excludedNodesProvider, ISnapshotStateStorageProvider snapshotStateAccessorContainerProvider, IRemotableReference`1<IProviderContainer`1<IRootsSplitter`1<DfsNodePtr>>> rootsSplitter);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.CallTree.TimelineCallTreeFilterBuilder : CallTreeFilterBuilderBase`2<LongPayload, DfsNodePtr> {
    public TimelineCallTreeFilterBuilder(CallTreeBaseModelBuilder`2<LongPayload, DfsNodePtr> callTreeBaseModelBuilder, ICacheProviderContainer`1<IAccessor`1<IMetadataReaderMerged>> metadataProviderContainer, IMethodPrinter methodPrinter, IRemotablePairContainer`1<DataPipeLifetime> lifetimeContainer, IPayloadPresentersProvider`1<LongPayload> payloadPresenter, IProviderContainer`1<IPayloadNormalizer`1<LongPayload>> payloadNormalizerContainer, IDataContainer`1<ICallTreeRootsStack> rootsStack, TopMethodsSettingsComponent topMethodSettingsComponent, IRemotableReference`1<TimelineCallTreeFilterInputComponents> components, IExcludedNodesProvider excludedNodesProvider, CallTreePresentationSettingsComponent settings, IRemotableReference`1<FlatPayloadsComponent`2<DfsNodePtr, LongPayload>> flatPayloadsComponent);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.CallTree.TimelineDfsExtrasComponent : object {
    [CompilerGeneratedAttribute]
private IRemotableReference`1<IDataProvider`1<ITimelineDfsExtras>> <Data>k__BackingField;
    public IRemotableReference`1<IDataProvider`1<ITimelineDfsExtras>> Data { get; }
    public TimelineDfsExtrasComponent(IRemotableReference`1<ICacheProviderContainer`1<ITimelineDfsExtras>> readersProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IRemotableReference`1<IDataProvider`1<ITimelineDfsExtras>> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.CallTree.TimelineSubsystemsFilterBuilder : SubsystemsFilterBuilderBase`2<DfsNodePtr, LongPayload> {
    public TimelineSubsystemsFilterBuilder(SubsystemKeysSource subsystemKeysSource, IRemotableReference`1<FlatPayloadsComponent`2<DfsNodePtr, LongPayload>> flatPayloadsComponent, IProviderContainer`1<IEnumerable`1<SubsystemFilterItem>> allSubsystemFilterItemsContainer, IProviderContainer`1<IPayloadPresenters`1<LongPayload>> payloadPresenterContainer, IProviderContainer`1<IPayloadNormalizer`1<LongPayload>> payloadNormalizerContainer);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.CallTree.TimelineTopMethodsModelBuilder : TopMethodsModelBuilderBase`1<LongPayload> {
    public TimelineTopMethodsModelBuilder(IDataContainer`1<DataPipeLifetime> lifetimeContainer, ICacheProviderContainer`1<IAccessor`1<IMetadataReaderMerged>> metadataProviderContainer, IMethodPrinter methodPrinter, IProviderContainer`1<IPayloadPresenters`1<LongPayload>> payloadPresentersContainer, IRemotableReference`1<IProviderContainer`1<ITopMethodsMap`1<LongPayload>>> topMethodsMapContainer, TopMethodsSettingsComponent topMethodsSettingsComponent);
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.CallTree.ZoneMarker : object {
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.Filtration.FiltrationDescriptorBuilder : object {
    [CompilerGeneratedAttribute]
private FiltrationModelDescriptor <Data>k__BackingField;
    public FiltrationModelDescriptor Data { get; }
    public FiltrationDescriptorBuilder(Lifetime lifetime, IDataContainer`1<ILogStorage> storage, PropertyResolvers resolvers, IProviderContainer`1<IPayloadPresenters`1<LongPayload>> payloadPresenterContainer, IProviderContainer`1<ITickTimeConverterContainer> tickTimeConverterContainer, ISnapshotStateStorageProvider snapshotStateStorageProvider, IFiltersMonitor filtersMonitor);
    [CompilerGeneratedAttribute]
public sealed virtual FiltrationModelDescriptor get_Data();
    private static void AddIntervalFilter(ICollection`1<LayerFiltersDescriptor> list, ILogStorage storage, KnownEventTypes eventType, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadPresenter, IProviderContainerMonitor`1<bool> intentionalStateChangeMonitor, FilterRadioGroup radioGroup, PayloadDescriptor payload);
    private static void AddPointFilter(ICollection`1<LayerFiltersDescriptor> layers, ILogStorage storage, FilterRadioGroup radioGroup, KnownEventTypes eventType, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadPresenter);
    private static FiltrationModelDescriptor CreateFiltrationDescriptor(Lifetime lifetime, ILogStorage storage, PropertyResolvers pr, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadPresenter, IDataProvider`1<ITickTimeConverter> tickTimeConverter, ISnapshotStateStorageProvider snapshotStateStorageProvider, IFiltersMonitor filtersMonitor);
    private static void AddAnalysisSubjects(ICollection`1<LayerFiltersDescriptor> layers, ILogStorage storage, FilterRadioGroup radioGroup, bool advancedFilters, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadPresenter, IDataProvider`1<ITickTimeConverter> tickTimeConverter, IFiltersMonitor filtersMonitor);
    private static void AddIntervalFilters(ICollection`1<LayerFiltersDescriptor> layers, ILogStorage storage, bool advancedFilters, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadPresenter, IFiltersMonitor filtersMonitor);
    private static void AddNestedFilters(List`1<LayerFiltersDescriptor> layers, ILogStorage storage, PropertyResolvers pr, bool advancedFilters, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadsPresenter, IFiltersMonitor filtersMonitor);
    private static void AddThreadStatesFilter(ICollection`1<LayerFiltersDescriptor> layers, ILogStorage storage, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadsPresenter, IProviderContainerMonitor`1<Nullable`1<bool>> threadStateChangeMonitor);
    private static void AddCustomEvents(ICollection`1<LayerFiltersDescriptor> layers, ILogStorage logStorage, FilterRadioGroup radioGroup, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadPresenter);
    private static void AddAllocationsFilter(ICollection`1<LayerFiltersDescriptor> layers, ILogStorage storage, FilterRadioGroup radioGroup, KnownEventTypes eventType, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadPresenter, IFiltersMonitor filtersMonitor);
    private static void AddDefaultAnalysisSubject(ICollection`1<LayerFiltersDescriptor> layers, ILogStorage storage, FilterRadioGroup radioGroup, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadPresenter, IDataProvider`1<ITickTimeConverter> tickTimeConverter);
    private static void AddAllocationsFilter(ICollection`1<LayerFiltersDescriptor> layers, ILogStorage storage, FilterRadioGroup radioGroup, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadPresenter);
    [CompilerGeneratedAttribute]
internal static string <AddAllocationsFilter>g__KeyPresenter|12_1(ulong v);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.Filtration.FiltrationEngineBuilder : object {
    [CompilerGeneratedAttribute]
private FiltrationBuilderResult <Data>k__BackingField;
    private InstantiatedFilters myInstantiatedFilters;
    private IDataProvider`1<Int32[]> myEnabledEventTypes;
    private IObservableSet`1<ThreadId> myThreadSelection;
    private IRemotableReference`1<IAsyncDataProvider`1<IDictionary`2<ThreadId, SortedModelRangeSet>>> myComputedFilteredThreadRanges;
    private IDataProvider`1<EventFiltrationState> myFiltrationState;
    public FiltrationBuilderResult Data { get; }
    private InstantiatedFilters JetBrains.Common.Util.IDataContainer<JetBrains.DotTrace.Features.Filtration.InstantiatedFilters.InstantiatedFilters>.Data { get; }
    private IObservableSet`1<ThreadId> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.IObservableSet<JetBrains.Common.Timeline.EventLog.Interface.ThreadId>>.Data { get; }
    public IDataProvider`1<Int32[]> EnabledEventTypes { get; }
    private IRemotableReference`1<IAsyncDataProvider`1<IDictionary`2<ThreadId, SortedModelRangeSet>>> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.Remoting.IRemotableReference<JetBrains.Common.Util.DataPipes.IAsyncDataProvider<System.Collections.Generic.IDictionary<JetBrains.Common.Timeline.EventLog.Interface.ThreadId,JetBrains.DotTrace.Features.Timeline.Collections.SortedModelRangeSet>>>>.Data { get; }
    private IDataProvider`1<EventFiltrationState> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.Features.Timeline.CommonStructures.EventFiltrationState>>.Data { get; }
    public FiltrationEngineBuilder(IFilteredRangeProvider filteredRangeProvider, IDataContainer`1<FiltrationModelDescriptor> descriptorContainer, IThreadOrProcessNameProvider threadNameProvider, IThreadsVisibleViewportContainer viewportContainer, IThreadsScope threadsScope, IDataContainer`1<IRemoteCommunicator> comm, ITimelineChannelsModel threadChannelsModel, ThreadSortModeContainer threadSortModeContainer, IRemotablePairContainer`1<ILogStorage> logStorageContainer, IRemotablePairContainer`1<DataPipeLifetime> lifetimeContainer, IsTimestampModeProvider isTimestampModeProvider, IProviderContainer`1<IPayloadPresenters`1<LongPayload>> payloadPresenterContainer, IRemotableReference`1<EventLogTableBackend> eventDataProcessor, IDataContainer`1<IEnumerable`1<EventLayerDescriptor>> eventLayers, IRemotableReference`1<TimelineCallTreeFilterInputComponents> callTreeFilterInputComponents, IRemoteProviderContainer`1<CallTreeStateAndPredicate`1<DfsNodePtr>> callTreeStateAndPredicate, IRemotableReference`1<ISetTimelineCallTreePayloads> setTimelineCallTreePayloads, IDataContainer`1<InstantiatedCallTreeFilter`1<LongPayload>> instantiatedCallTreeFilter, IDataContainer`1<InstantiatedSubsystemsFilter`1<LongPayload>> instantiatedSubsystemsFilter, SubsystemKeysSource subsystemKeysSetProvider, IDataContainer`1<ICallTreeRootsStack> callTreeRootsStack, ISnapshotStateStorageProvider stateStorageProvider, IFiltersMonitor filtersMonitor);
    private static bool AreAwaitsDisabled(IFiltrationState state);
    private static Func`1<List`1<EventLayerDescriptor>> CreateEventCollectorLayerLambda(List`1<EventLayerDescriptor> layerDescriptors);
    private RemoteListenerWithLocalSwitch`3<TItem, TArg, TResult> CreateRemoteListenerWithThreadSwitch(IRemoteCommunicator comm, Func`1<IFiltrationListenerProviderWithResult`3<TItem, TArg, TResult>> create);
    private static Predicate`1<EventInfo> IsApplicable(List`1<int> eventTypesFromLayer);
    private static Func`2<EventInfo, DfsNodePtr> CreateCallStackExtractor(int index);
    [CanBeNullAttribute]
private static Func`2<EventInfo, AwaitPayload> CreateAwaitPayloadExtractor(int callStackIndex, int payloadIndex);
    private static PredicateAndListenerEx`1[] SplitPredicateAndListener(PredicateAndListenerEx`1<T> p);
    private static RemotableLayerFilterInfo CreateRemotableLayerFilterInfo(LayerDataFilterInfo filter);
    private static IAsyncDataProvider`1<Nullable`1<PredicateAndListenerEx`1<T>>> ToPredicateAndListener(FilterModel`1<T> ff, IDataProvider`1<IFiltrationState> filtrationStateProvider, IAsyncDataProvider`1<IFiltrationState> asyncFiltrationStateProvider);
    private static IAsyncDataProvider`1<IEventTimeFilter> CreateEventTimeFilter(RemotableLayerFilterInfo f, FilterModel`1[] layerAdditionalFilters, IDataProvider`1<IFiltrationState> filtrationStateProvider, IAsyncDataProvider`1<IFiltrationState> asyncFiltrationStateProvider, ILogStorage storage);
    private static IEventTimeFilter CreateRadioButtonTimeFilter(ValueWithAttribute`2<IEventTimeFilter[], Marker> filters);
    private static BuildPipelineOutput BuildPipeline(BuildPipelineInput input);
    private static Func`2<PayloadItemsListener`1<TVoid>, ITimeFilter> ConverterForOutputListener();
    private static Pair`2<TimelineStatistics, EventFiltrationState> GetTimelineStatistics(KnownStatistics statistics, ILogStorage logStorage, EventFiltrationState state);
    private static IDataProvider`1<string> ComposeSummary(IDataProvider`1<bool> hasPointTimePayload, IDataProvider`1<SummaryInfo> info, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadPresenters, IDataProvider`1<bool> intervalPayload);
    [CompilerGeneratedAttribute]
public sealed virtual FiltrationBuilderResult get_Data();
    private sealed virtual override InstantiatedFilters JetBrains.Common.Util.IDataContainer<JetBrains.DotTrace.Features.Filtration.InstantiatedFilters.InstantiatedFilters>.get_Data();
    private sealed virtual override IObservableSet`1<ThreadId> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.IObservableSet<JetBrains.Common.Timeline.EventLog.Interface.ThreadId>>.get_Data();
    public sealed virtual IDataProvider`1<Int32[]> get_EnabledEventTypes();
    private sealed virtual override IRemotableReference`1<IAsyncDataProvider`1<IDictionary`2<ThreadId, SortedModelRangeSet>>> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.Remoting.IRemotableReference<JetBrains.Common.Util.DataPipes.IAsyncDataProvider<System.Collections.Generic.IDictionary<JetBrains.Common.Timeline.EventLog.Interface.ThreadId,JetBrains.DotTrace.Features.Timeline.Collections.SortedModelRangeSet>>>>.get_Data();
    private sealed virtual override IDataProvider`1<EventFiltrationState> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.Features.Timeline.CommonStructures.EventFiltrationState>>.get_Data();
}
[ExtensionAttribute]
internal static class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.Filtration.FiltrationStateHelpers : object {
    [ExtensionAttribute]
public static WithFiltrationState`1<T> AddFiltrationState(T data, IFiltrationState state);
}
internal class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.Filtration.FiltrationStateMarkerFactory : object {
    private int myUpdateNo;
    public Marker BuildState(IFiltrationState arg);
}
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.Filtration.RemoteListenerWithLocalSwitch`3 : ValueType {
    public IRemotableReference`1<IFiltrationListenerProvider`2<TItem, TArg>> Listener;
    public IThreadSwitch`1<TResult> Switch;
}
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.Filtration.SummaryInfo : object {
    public int Intervals;
    public LongPayload Payload;
    public int Threads;
    public PayloadType PayloadType;
    public void Clear();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.Filtration.TimelineFilteredRangeProvider : FilteredRangeProvider {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ModelRange> <Range>k__BackingField;
    public IDataProvider`1<ModelRange> Range { get; }
    public TimelineFilteredRangeProvider(ISelectedRangeContainer selectedRange, IViewportRanges viewportRanges);
    [CompilerGeneratedAttribute]
public virtual IDataProvider`1<ModelRange> get_Range();
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.Filtration.ZoneMarker : object {
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.Model.ChannelsContainer : object {
    private IDataController`1<IReadOnlyCollection`1<IChannelModel>> myOriginalListProvider;
    private IDataController`1<int> myFilteredItemsCount;
    private IDataController`1<GetIndex`1<ThreadId>> myController;
    private List`1<IChannelModel> myBuffer;
    private ChannelsList myFilteredList;
    private Dictionary`2<ThreadId, int> mySearchIndex;
    private IDataControllerContainer`1<SortState> mySortStateProviderContainer;
    [CompilerGeneratedAttribute]
private IDataProvider`1<GetIsPinned`1<ThreadId>> <PinnedStateProvider>k__BackingField;
    public IDataProvider`1<GetIndex`1<ThreadId>> IndexProvider { get; }
    public IDataProvider`1<GetIsPinned`1<ThreadId>> PinnedStateProvider { get; }
    public IDataProvider`1<Comparison`1<WithPayload`2<ThreadId, LongPayload>>> ComparisonProvider { get; }
    public IReadOnlyList`1<IChannelModel> Channels { get; }
    public IDataProvider`1<int> ItemsCount { get; }
    public ChannelsContainer(Lifetime lifetime, IThreadsScope threadsScope, ThreadSortStateContainer sortStateContainer);
    private void FilterChannels(Pair`2<IReadOnlyCollection`1<ThreadId>, IReadOnlyCollection`1<IChannelModel>> pair);
    private void SaveSortOrder();
    private void UpdateSearchIndexes();
    private void UpdateIndexCore(Dictionary`2<ThreadId, int> index);
    private int GetSortOrder(IChannelModel channel);
    private int IndexOf(ThreadId id);
    public sealed virtual void SetUnfilteredList(IReadOnlyCollection`1<IChannelModel> list);
    public sealed virtual void ChangeCollection(Action`1<List`1<IChannelModel>> action, bool notifyChanged);
    public sealed virtual void ChangeCollection(Func`2<List`1<IChannelModel>, bool> action, bool notifyChanged);
    public sealed virtual IDataProvider`1<GetIndex`1<ThreadId>> get_IndexProvider();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<GetIsPinned`1<ThreadId>> get_PinnedStateProvider();
    public sealed virtual IDataProvider`1<Comparison`1<WithPayload`2<ThreadId, LongPayload>>> get_ComparisonProvider();
    public sealed virtual IReadOnlyList`1<IChannelModel> get_Channels();
    public sealed virtual IDataProvider`1<int> get_ItemsCount();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.Model.PropertyResolvers : object {
    public IStringReader StringProvider;
    public IThreadOrProcessNameProvider ThreadNameProvider;
    public Func`2<ulong, string> PrintTime;
    public PropertyResolvers(Lifetime lifetime, IStringReader stringProvider, IThreadOrProcessNameProvider threadNameProvider, IProviderContainer`1<ITickTimeConverterContainer> tickTimeConverterContainer);
}
[DefaultMemberAttribute("Item")]
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.Model.ThreadDescriptorProvider : object {
    private Dictionary`2<ThreadId, IThreadDescriptor> myThreadToName;
    private IReadOnlyCollection`1<ThreadId> myThreads;
    public IThreadDescriptor Item { get; }
    public int Count { get; }
    private ThreadTypes JetBrains.Common.Util.IDataMapper<JetBrains.Common.Timeline.EventLog.Interface.ThreadId,JetBrains.Common.Timeline.EventLog.Interface.ThreadTypes>.Item { get; }
    public ThreadDescriptorProvider(IDataContainer`1<ILogStorage> logStorage);
    public sealed virtual IThreadDescriptor get_Item(ThreadId value);
    public sealed virtual IEnumerator`1<ThreadId> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    private sealed virtual override ThreadTypes JetBrains.Common.Util.IDataMapper<JetBrains.Common.Timeline.EventLog.Interface.ThreadId,JetBrains.Common.Timeline.EventLog.Interface.ThreadTypes>.get_Item(ThreadId value);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.Model.ThreadSortModeContainer : object {
    private ThreadSortStateContainer mySortStateContainer;
    [CompilerGeneratedAttribute]
private IDataProvider`1<PreviewSortDescriptor`2<ThreadId, LongPayload>> <SortDescriptorProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<SortMode> <Provider>k__BackingField;
    public IDataProvider`1<PreviewSortDescriptor`2<ThreadId, LongPayload>> SortDescriptorProvider { get; }
    public IDataProvider`1<SortMode> Provider { get; }
    public SortMode Value { get; public set; }
    public ISet`1<ThreadId> PinnedThreads { get; public set; }
    public ThreadSortModeContainer(ThreadSortStateContainer sortStateContainer, IThreadOrProcessNameProvider threadNameProvider);
    [CompilerGeneratedAttribute]
public IDataProvider`1<PreviewSortDescriptor`2<ThreadId, LongPayload>> get_SortDescriptorProvider();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<SortMode> get_Provider();
    public sealed virtual SortMode get_Value();
    public sealed virtual void set_Value(SortMode value);
    public ISet`1<ThreadId> get_PinnedThreads();
    public void set_PinnedThreads(ISet`1<ThreadId> value);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.Model.ThreadSortStateContainer : SavedStateDataControllerContainer`1<SortState> {
    public ThreadSortStateContainer(Lifetime lifetime, ISnapshotStateStorageProvider snapshotStateStorageProvider, IFiltersMonitor filtersMonitor);
}
[SnapshotComponentAttribute("10")]
internal class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.Model.ThreadsScope : ThreadsSet {
    public ThreadsScope(Lifetime lifetime, IKeyEnumerator`1<ThreadId> allThreadIds, IThreadDescriptorProvider threadDescriptorProvider, IInitialThreadsVisibility initialThreadsVisibility, ISnapshotStateStorageProvider snapshotStateStorageProvider, IFiltersMonitor filtersMonitor);
    private static IObservableSet`1<ThreadId> BuildThreadsSet(Lifetime lifetime, IKeyEnumerator`1<ThreadId> allThreadIds, IThreadDescriptorProvider threadDescriptorProvider, IInitialThreadsVisibility initialThreadsVisibility, ISnapshotStateStorageProvider snapshotStateStorageProvider, IFiltersMonitor filtersMonitor);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.Properties.TimelinePropertiesModelBuilder : PropertiesModelBuilderBase`2<DfsNodePtr, LongPayload> {
    public TimelinePropertiesModelBuilder(ICacheProviderContainer`1<IAccessor`1<IMetadataReaderMerged>> metadataProviderContainer, IMethodPrinter methodPrinter, IProviderContainer`1<IPayloadPresenters`1<LongPayload>> payloadPresentersContainer, IRemotableReference`1<FlatPayloadsComponent`2<DfsNodePtr, LongPayload>> flatPayloadsComponent);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.Search.TimelineAggregatedPayloadsProvider : AggregatedPayloadsProviderBase`2<DfsNodePtr, LongPayload> {
    public TimelineAggregatedPayloadsProvider(IRemotableReference`1<TimelineFlatPayloadsComponent> flatPayloadsComponent, IPayloadPresentersProvider`1<LongPayload> payloadsPresenterProvider);
}
[SnapshotComponentAttribute("9")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.SnapshotComponentFileLocker : object {
    private static ILogger ourLog;
    public SnapshotComponentFileLocker(Lifetime lifetime, SnapshotOrigin origin);
    private static SnapshotComponentFileLocker();
}
[DefaultMemberAttribute("Item")]
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.Threads.ProcessNameBuilder : object {
    private static string UnknownProcessName;
    private ThreadOrProcessNameModel[] myProcessNames;
    public ThreadOrProcessNameModel Item { get; }
    public ProcessNameBuilder(ISectionAccessor`1<IProcessDescriptorsSection> descriptors, ISectionAccessor`1<IProcessDataSection> processDataAccessor);
    public sealed virtual ThreadOrProcessNameModel get_Item(UniqueProcessId value);
    public sealed virtual bool HasValueFor(UniqueProcessId value);
}
[DefaultMemberAttribute("Item")]
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.Threads.ThreadNameProvider : object {
    private Dictionary`2<ThreadId, ThreadOrProcessNameModel> myThreadToName;
    public ThreadOrProcessNameModel Item { get; }
    public ThreadNameProvider(IKeyEnumerator`1<ThreadId> threadIdsEnumerator, IThreadDescriptorProvider threadDescriptorProvider, IStringReader stringProvider);
    public sealed virtual ThreadOrProcessNameModel get_Item(ThreadId value);
}
[DefaultMemberAttribute("Item")]
[SnapshotComponentAttribute("0")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.Threads.ThreadOrProcessNameProvider : object {
    private IThreadNameProvider myThreadNameProvider;
    private IProcessNameProvider myProcessNameProvider;
    public ThreadOrProcessNameModel Item { get; }
    public ThreadOrProcessNameProvider(IThreadNameProvider threadNameProvider, IProcessNameProvider processNameProvider);
    public sealed virtual ThreadOrProcessNameModel get_Item(ThreadOrProcessId value);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.TimelineCallTreeHistoryManager : CallTreeHistoryManager`1<LongPayload> {
    public TimelineCallTreeHistoryManager(Lifetime lifetime, IMethodPrinter methodPrinter);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.TimelineRecentSnapshotsContainer : RecentSnapshotsContainerBase {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ILiveRecentSnapshot> <Data>k__BackingField;
    public IDataProvider`1<ILiveRecentSnapshot> Data { get; }
    public TimelineRecentSnapshotsContainer(Lifetime lifetime, IComponentContainer container, IRecentSnapshotsStorage storage);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ILiveRecentSnapshot> get_Data();
}
[SnapshotComponentAttribute("16")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.TimelineSnapshotTypeComponent : SnapshotTypeComponent {
    public bool IsTimeline { get; }
    public virtual bool get_IsTimeline();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.TimelineTimeFilterControllerContainer : TimeFilterControllerContainer {
    [CompilerGeneratedAttribute]
private TimeFilterController <Data>k__BackingField;
    public TimeFilterController Data { get; }
    public TimelineTimeFilterControllerContainer(ISelectedRangeContainer selectedRangeContainer, IViewportRanges viewportRanges);
    [CompilerGeneratedAttribute]
public virtual TimeFilterController get_Data();
}
[SnapshotComponentAttribute("10")]
internal class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.Viewports.SummaryTotalViewportContainer : ViewportContainer {
    public SummaryTotalViewportContainer(IViewportRanges ranges);
}
[SnapshotComponentAttribute("10")]
internal class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.Viewports.SummaryVisibleViewportContainer : ViewportContainer {
    public SummaryVisibleViewportContainer(IDataContainer`1<ILogStorage> logStorage, IViewportRanges ranges);
}
[SnapshotComponentAttribute("10")]
internal class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.Viewports.ThreadsTotalViewportContainer : ViewportContainer {
    public ThreadsTotalViewportContainer(IViewportRanges ranges);
}
[SnapshotComponentAttribute("10")]
internal class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.Viewports.ThreadsVisibleViewportContainer : ViewportContainer {
    public ThreadsVisibleViewportContainer(IDataContainer`1<ILogStorage> logStorage, IViewportRanges ranges);
}
[SnapshotComponentAttribute("10")]
internal class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.Viewports.TimelineSharedViewportRangesComponent : ViewportRangesComponent {
    [CompilerGeneratedAttribute]
private IDataControllerContainer`1<ModelRangeDouble> <VisibleRange>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataController`1<ModelRangeDouble> <TotalRange>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<ModelRange> <VisibleModelRange>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <MinimumVisibleModelRangeLength>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <IsTotalRangeVisible>k__BackingField;
    public IDataControllerContainer`1<ModelRangeDouble> VisibleRange { get; }
    public IDataController`1<ModelRangeDouble> TotalRange { get; }
    public IDataProvider`1<ModelRange> VisibleModelRange { get; }
    public ulong MinimumVisibleModelRangeLength { get; }
    public IDataProvider`1<bool> IsTotalRangeVisible { get; }
    public TimelineSharedViewportRangesComponent(Lifetime lifetime, ISnapshotStateStorageProvider stateStorageProvider, IDataContainer`1<ILogStorage> logStorage, IVisibleRangeContainer visibleRangeControllerContainer);
    [CompilerGeneratedAttribute]
public virtual IDataControllerContainer`1<ModelRangeDouble> get_VisibleRange();
    [CompilerGeneratedAttribute]
public virtual IDataController`1<ModelRangeDouble> get_TotalRange();
    [CompilerGeneratedAttribute]
public virtual IDataProvider`1<ModelRange> get_VisibleModelRange();
    [CompilerGeneratedAttribute]
public virtual ulong get_MinimumVisibleModelRangeLength();
    [CompilerGeneratedAttribute]
public virtual IDataProvider`1<bool> get_IsTotalRangeVisible();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.Viewports.VisibleRangeContainer : SavedStateDataControllerContainer`1<ModelRangeDouble> {
    public VisibleRangeContainer(Lifetime lifetime, ISnapshotStateStorageProvider stateStorageProvider, IDataContainer`1<ILogStorage> logStorage, IFiltersMonitor filtersMonitor);
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.Timeline.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotComponents.Local.ZoneMarker : object {
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Common.MetadataWrappers.AllMergedFuidsContainer : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<JetHashSet`1<FunctionUIDm>>> <MergedFuids>k__BackingField;
    public IDataProvider`1<ICacheSource`1<JetHashSet`1<FunctionUIDm>>> MergedFuids { get; }
    public AllMergedFuidsContainer(IAllFuidsContainer allFuidsContainer, IAllFuidsFilterProvider allFuidsFilter, ICacheProviderContainer`1<IFuidsMatcher> fuidsMatcher);
    [CompilerGeneratedAttribute]
public IDataProvider`1<ICacheSource`1<JetHashSet`1<FunctionUIDm>>> get_MergedFuids();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Common.MetadataWrappers.SnapshotNamespaceTreeBuilder : object {
    private static ILogger ourLog;
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<Func`2<IExecutionController, SnapshotNamespaceTree>>> <Result>k__BackingField;
    public IDataProvider`1<ICacheSource`1<Func`2<IExecutionController, SnapshotNamespaceTree>>> Result { get; }
    public SnapshotNamespaceTreeBuilder(AllMergedFuidsContainer allFuidsContainer, IMethodViewDataProvider methodViewProvider);
    private static SnapshotNamespaceTreeBuilder();
    private static void TraceFullMethodNames(IEnumerable`1<FullMethodName> methods);
    private static void TraceAllFuids(JetHashSet`1<FunctionUIDm> allFuids);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<Func`2<IExecutionController, SnapshotNamespaceTree>>> get_Result();
    private static FullMethodName ConstructFullMethodName(MethodViewData methodViewData);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Common.Modules.CommonModulesCommonTreeBackend : ModulesCommonTreeBackendBase {
    public CommonModulesCommonTreeBackend(IDataContainer`1<DataPipeLifetime> pipeLifetime, IProviderContainer`1<ModulesData> modulesContainer);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Common.NamespaceTree.SnapshotNamespaceTreeProvider : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<ISnapshotNamespaceTree>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<ISnapshotNamespaceTree>> Data { get; }
    public SnapshotNamespaceTreeProvider(Lifetime lifetime, IDataContainer`1<DataPipeLifetime> dataPipeLifetimeContainer, ISnapshotNamespaceTreeBuilder treeBuilder);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<ISnapshotNamespaceTree>> get_Data();
}
[SnapshotComponentAttribute("16")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Common.PlainList.PlainListGroupBySource : object {
    [CompilerGeneratedAttribute]
private IDataProxy`1<PlainListNodeType> <GroupBy>k__BackingField;
    public IDataProxy`1<PlainListNodeType> GroupBy { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IDataProxy`1<PlainListNodeType> get_GroupBy();
}
[SnapshotComponentAttribute("16")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Common.Subsystems.SubsystemKeysSetComponent : ProxyContainer`1<SubsystemKeysSet> {
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Common.Systemness.ZoneMarker : object {
}
[SnapshotComponentAttribute("16")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Common.TopMethodsSettingsRemoteComponent : object {
    [CompilerGeneratedAttribute]
private IDataProxy`1<bool> <FollowSelection>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProxy`1<bool> <ShowSystemFunctions>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProxy`1<bool> <ShowSystemFunctionsInPlainList>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProxy`1<bool> <SortByTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProxy`1<bool> <AutoShowSystemFunctions>k__BackingField;
    public IDataProxy`1<bool> FollowSelection { get; }
    public IDataProxy`1<bool> ShowSystemFunctions { get; }
    public IDataProxy`1<bool> ShowSystemFunctionsInPlainList { get; }
    public IDataProxy`1<bool> SortByTotal { get; }
    public IDataProxy`1<bool> AutoShowSystemFunctions { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IDataProxy`1<bool> get_FollowSelection();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProxy`1<bool> get_ShowSystemFunctions();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProxy`1<bool> get_ShowSystemFunctionsInPlainList();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProxy`1<bool> get_SortByTotal();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProxy`1<bool> get_AutoShowSystemFunctions();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Performance.CallTree.PerformanceCommonDfsLogicContainer : PerformanceCommonDfsLogicContainer {
    public PerformanceCommonDfsLogicContainer(ICacheProviderContainer`1<IDfsReaders`1<CallTreeSectionOffset>> dfsReaders);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Performance.CallTree.PerformanceDfsAlgorithmsContainer : PerformanceDfsAlgorithmsContainer {
    public PerformanceDfsAlgorithmsContainer(ICacheProviderContainer`1<CommonDfsLogic`2<CallTreeSectionOffset, FunctionUID>> logicContainer);
}
public interface JetBrains.DotTrace.Features.SnapshotComponents.Remote.Performance.Dfs.ICallTreeThreadFilter {
    public abstract virtual void SetFilterProvider(IDataProvider`1<IOffsetFilter> selectedThreadsProvider);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Performance.Dfs.PerformanceCallTreeComponentsProvider : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICallTreeAccessors`1<CallTreeSectionOffset>> <Data>k__BackingField;
    public IDataProvider`1<ICallTreeAccessors`1<CallTreeSectionOffset>> Data { get; }
    public PerformanceCallTreeComponentsProvider(ICacheProviderContainer`1<IDfsReaders`1<CallTreeSectionOffset>> dfsReaders, ICacheProviderContainer`1<CommonDfsLogic`2<CallTreeSectionOffset, FunctionUID>> commonDfsLogicContainer, IFunctionSystemness functionSystemness, IAccessorProviderContainer`1<ICallTreeReader`1<CallTreeSectionOffset>> treeReaderAccessor, IProviderContainer`1<IAsyncMethodCallTreeService`1<CallTreeSectionOffset>> asyncMethodCallTreeService, IProviderContainer`1<ISkipBlocksOfSystemMethods`1<CallTreeSectionOffset>> blocksOfSystemMethodsProvider, ICacheProviderContainer`1<IFuidsMatcher> fuidsMatcherProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICallTreeAccessors`1<CallTreeSectionOffset>> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Performance.Dfs.PerformanceCallTreeFilterInputComponents : CallTreeFilterInputComponents`1<CallTreeSectionOffset> {
    public PerformanceCallTreeFilterInputComponents(IFunctionSystemness functionSystemness, IProviderContainer`1<IAsyncMethodService> asyncMethodInfoProvider, IProviderContainer`1<IAsyncMethodCallTreeService`1<CallTreeSectionOffset>> asyncMethodCallTreeService);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Performance.Dfs.PerformanceCallTreeReaderContainer : CallTreeReaderContainer`1<CallTreeSectionOffset> {
    public PerformanceCallTreeReaderContainer(ICacheProviderContainer`1<IDfsReaders`1<CallTreeSectionOffset>> dfsReaders, ICacheProviderContainer`1<CommonDfsLogic`2<CallTreeSectionOffset, FunctionUID>> commonDfsLogicContainer);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Performance.Dfs.PerformanceCallTreeRootsProvider : object {
    private IDataProvider`1<RootAccessData`1<CallTreeSectionOffset>> mySortedRootNodes;
    private IDataProxy`1<IOffsetFilter> myFilteredThreads;
    public IDataProvider`1<RootAccessData`1<CallTreeSectionOffset>> Data { get; }
    public PerformanceCallTreeRootsProvider(IRootAccessDataProvider`1<CallTreeSectionOffset> allRootsProvider);
    public sealed virtual void SetFilterProvider(IDataProvider`1<IOffsetFilter> selectedThreadsProvider);
    public sealed virtual IDataProvider`1<RootAccessData`1<CallTreeSectionOffset>> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Performance.Dfs.PerformanceDfsTreeDump : DfsTreeDump`1<CallTreeSectionOffset> {
    public PerformanceDfsTreeDump(IFunctionSystemness functionSystemness, IRootAccessDataProvider`1<CallTreeSectionOffset> rawRootsProviderContainer, ICacheProviderContainer`1<IDfsReaders`1<CallTreeSectionOffset>> dfsReadersProvider, IDataContainer`1<DataPipeLifetime> dataPipeLifetimeContainer, ICacheProviderContainer`1<IAccessor`1<IMetadataManagerMerged>> metadataManagerAccessor, ICacheProviderContainer`1<IFuidsMatcher> fuidsMatcher);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Performance.Dfs.PerformanceRootsSplitterProvider : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<IRootsSplitter`1<CallTreeSectionOffset>> <Data>k__BackingField;
    public IDataProvider`1<IRootsSplitter`1<CallTreeSectionOffset>> Data { get; }
    public PerformanceRootsSplitterProvider(ICacheProviderContainer`1<IFuidsMatcher> fuidsMatcherProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IRootsSplitter`1<CallTreeSectionOffset>> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Performance.Dfs.PerformanceThreadPowers : ThreadPowersBase`1<CallTreeSectionOffset> {
    public PerformanceThreadPowers(IRootAccessDataProvider`1<CallTreeSectionOffset> rootProvider, IProviderContainer`1<ICallTreeAccessors`1<CallTreeSectionOffset>> treeAccessorsContainer);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Performance.Inject.PerformanceMeasureNodeProviderContainer : object {
    [CompilerGeneratedAttribute]
private IDataProxy`1<CallTreePath[]> <ExcludedNodesProxy>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProxy`1<bool> <AsyncSupportedProxy>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<IMeasureNodeStorage> <Data>k__BackingField;
    public IDataProxy`1<CallTreePath[]> ExcludedNodesProxy { get; }
    public IDataProxy`1<bool> AsyncSupportedProxy { get; }
    public IDataProvider`1<IMeasureNodeStorage> Data { get; }
    public PerformanceMeasureNodeProviderContainer(IDataContainer`1<DataPipeLifetime> pipeLifetime, ICallTreeRootProvider`1<CallTreeSectionOffset> callTreeRoots, IProviderContainer`1<ICallTreeAccessors`1<CallTreeSectionOffset>> treeAccessorsContainer, CallTreeFilterInputComponents`1<CallTreeSectionOffset> remoteComponents, ICallTreeMeasureDataReader`2<CallTreeSectionOffset, DotTraceFullPayload> measureDataReader, IProviderContainer`1<IPayloadNormalizer`1<DotTracePayload>> normalizer, IProviderContainer`1<IRootsSplitter`1<CallTreeSectionOffset>> rootsSplitterContainer);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProxy`1<CallTreePath[]> get_ExcludedNodesProxy();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProxy`1<bool> get_AsyncSupportedProxy();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IMeasureNodeStorage> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Performance.PayloadsWrappers.PerformanceFlatPayloadsComponent : FlatPayloadsComponent`2<CallTreeSectionOffset, DotTracePayload> {
    public PerformanceFlatPayloadsComponent(IDataContainer`1<DataPipeLifetime> dataPipeLifetimeContainer, ICallTreePayloadsSource`2<CallTreeSectionOffset, DotTracePayload> callTreePayloadsComponent, SubsystemKeysSetComponent subsystemKeysSetComponent, ITopMethodsRemoteSettings topMethodsSettingsComponent, ICallTreePresentationRemoteSettings callTreePresentationSettings, IProviderContainer`1<ICallTreeAccessors`1<CallTreeSectionOffset>> treeAccessorsContainer, IFlatPayloadsBuilder`3<CallTreeSectionOffset, FunctionUIDm, DotTracePayload> flatPayloadsBuilder, CallTreeFilterInputComponents`1<CallTreeSectionOffset> remoteComponents, ICallTreeRootProvider`1<CallTreeSectionOffset> callTreeRootProvider, IPlainListGroupBySource plainListGroupBySource, IProviderContainer`1<IRootsSplitter`1<CallTreeSectionOffset>> rootsSplitterContainer);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Performance.PlainList.PerformancePlainListCommonTreeBackend : PlainListCommonTreeBackendBase`2<CallTreeSectionOffset, DotTracePayload> {
    public PerformancePlainListCommonTreeBackend(IDataContainer`1<DataPipeLifetime> pipeLifetime, IMethodViewDataProvider methodViewDataAccessorProvider, ICacheProviderContainer`1<IAccessor`1<IMetadataManagerMerged>> metadataManagerAccessorProvider, IPlainListGroupBySource plainListGroupBySource, FlatPayloadsComponent`2<CallTreeSectionOffset, DotTracePayload> flatPayloadsComponent, ICacheProviderContainer`1<IFuidsMatcher> fuidsMatcherProvider, IProviderContainer`1<ICallTreeAccessors`1<CallTreeSectionOffset>> callTreeAccessorsProvider, IFlatPayloadsBuilder`3<CallTreeSectionOffset, FunctionUIDm, DotTracePayload> flatPayloadsBuilder, IMethodViewDataProvider methodViewDataProvider, ITopMethodsRemoteSettings topMethodsSettingsComponent);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Performance.Subsystems.PerformanceSubsystemMapping : SubsystemMappingBase`1<CallTreeSectionOffset> {
    public PerformanceSubsystemMapping(ICacheProviderContainer`1<SubsystemsCache`1<CallTreeSectionOffset>> subsystemCacheProvider);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Performance.Subsystems.PerformanceSubsystemsKeysToSelector : object {
    public PerformanceSubsystemsKeysToSelector(PerformanceSubsystemsKeysToDal payloadsSectionBuilder, SubsystemKeysSetComponent subsystemKeysSet);
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Performance.Subsystems.ZoneMarker : object {
}
[SnapshotComponentAttribute("16")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Performance.SystemMethods.PerformanceSyntheticMethods : object {
    private static IEnumerable`1<FunctionUIDm> ourSyntheticMethods;
    public IEnumerable`1<FunctionUIDm> Data { get; }
    private static PerformanceSyntheticMethods();
    public sealed virtual IEnumerable`1<FunctionUIDm> get_Data();
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Performance.ZoneMarker : object {
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Timeline.Async.AsyncMethodsServiceContainer : object {
    private static string NamespaceFilterPrefix;
    private static ILogger ourLog;
    private List`1<FunctionUID> myEmptyList;
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<IAsyncMethodService>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<IAsyncMethodService>> Data { get; }
    public AsyncMethodsServiceContainer(Lifetime lifetime, IAllRootsProvider`1<DfsNodePtr> rawRootsProviderContainer, ICacheProviderContainer`1<CommonDfsLogic`2<DfsNodePtr, FunctionUID>> dfsLogicProvider, ICacheProviderContainer`1<IAccessor`1<IMetadataManagerMerged>> metadataManagerAccessor, IAllFuidsContainer allFuidsComponent, ICacheProviderContainer`1<IFuidsMatcher> fuidsMatcher, IConvertedTimelineSnapshot storage);
    private static AsyncMethodsServiceContainer();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<IAsyncMethodService>> get_Data();
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<string, EtwMethodFlags> <.ctor>g__GetGenericSubstitutionsAndFlags|5_5(FunctionUID functionUID, <>c__DisplayClass5_1& );
    [CompilerGeneratedAttribute]
internal static string <.ctor>g__FlagsMatchLog|5_2(FunctionUID async, FunctionUID moveNext);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Timeline.Async.TimelineAsyncToContinuationCache : AsyncPtrToContinuationPtrCache`1<DfsNodePtr> {
    public TimelineAsyncToContinuationCache(IAllRootsProvider`1<DfsNodePtr> rawRootsProviderContainer, ICacheProviderContainer`1<CommonDfsLogic`2<DfsNodePtr, FunctionUID>> dfsLogicProvider, ICacheProviderContainer`1<IAsyncMethodService> asyncMethodServiceCacheProvider, IDataContainer`1<DataPipeLifetime> dataPipeLifetimeContainer, IMemoryMappedStorageManager cacheStorage, IProviderContainer`1<ICacheStorageManager> cacheStorageManager);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Timeline.Async.TimelineContinuationPtrAnalyzer : ContinuationPtrAnalyzer`1<DfsNodePtr> {
    public TimelineContinuationPtrAnalyzer(Lifetime lifetime, IAllRootsProvider`1<DfsNodePtr> rawRootsProviderContainer, IAccessorProviderContainer`1<ICallTreeReader`1<DfsNodePtr>> callTreeReader, ICacheProviderContainer`1<IAsyncMethodService> asyncMethodServiceCacheProvider, IDataContainer`1<IAccessor`1<IMetadataManager>> metadataManager);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Timeline.CallTree.CallTreeRootProviderComponent : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<RootAccessData`1<DfsNodePtr>> <Data>k__BackingField;
    public IDataProvider`1<RootAccessData`1<DfsNodePtr>> Data { get; }
    public CallTreeRootProviderComponent(IAllRootsProvider`1<DfsNodePtr> allRootsProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<RootAccessData`1<DfsNodePtr>> get_Data();
}
[SnapshotComponentAttribute("16")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Timeline.Comparison.TimelineTransparentFuidsMatcher : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<IFuidsMatcher>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<IFuidsMatcher>> Data { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<IFuidsMatcher>> get_Data();
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Timeline.Dal.ZoneMarker : object {
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Timeline.Dfs.TimelineCallTreeFilterInputComponents : CallTreeFilterInputComponents`1<DfsNodePtr> {
    [CompilerGeneratedAttribute]
private IDataProxy`1<bool> <DisableAwaits>k__BackingField;
    public IDataProxy`1<bool> DisableAwaits { get; }
    public TimelineCallTreeFilterInputComponents(IFunctionSystemness functionSystemness, ICacheProviderContainer`1<IAsyncMethodService> asyncMethodInfoProvider, ICacheProviderContainer`1<IAsyncMethodCallTreeService`1<DfsNodePtr>> asyncMethodCallTreeService);
    [CompilerGeneratedAttribute]
public IDataProxy`1<bool> get_DisableAwaits();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Timeline.Dfs.TimelineCallTreeReaderContainer : CallTreeReaderContainer`1<DfsNodePtr> {
    public TimelineCallTreeReaderContainer(ICacheProviderContainer`1<IDfsReaders`1<DfsNodePtr>> dfsReaders, ICacheProviderContainer`1<CommonDfsLogic`2<DfsNodePtr, FunctionUID>> commonDfsLogicContainer);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Timeline.Dfs.TimelineDfsTreeDump : DfsTreeDump`1<DfsNodePtr> {
    public TimelineDfsTreeDump(IFunctionSystemness functionSystemness, IRootAccessDataProvider`1<DfsNodePtr> rawRootsProviderContainer, ICacheProviderContainer`1<IDfsReaders`1<DfsNodePtr>> dfsReadersProvider, IDataContainer`1<DataPipeLifetime> dataPipeLifetimeContainer, ICacheProviderContainer`1<IAccessor`1<IMetadataManagerMerged>> metadataManagerAccessor, ICacheProviderContainer`1<IFuidsMatcher> fuidsMatcher);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Timeline.Dfs.TimelineDfsTreeStructures : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICallTreeAccessors`1<DfsNodePtr>> <Data>k__BackingField;
    public IDataProvider`1<ICallTreeAccessors`1<DfsNodePtr>> Data { get; }
    public TimelineDfsTreeStructures(ICacheProviderContainer`1<IDfsReaders`1<DfsNodePtr>> dfsReaders, TimelineCommonDfsLogicProvider commonLogicProvider, IFunctionSystemness functionSystemness, IAccessorProviderContainer`1<ICallTreeReader`1<DfsNodePtr>> treeReaderAccessor, IProviderContainer`1<IAsyncMethodCallTreeService`1<DfsNodePtr>> asyncMethodCallTreeService, IProviderContainer`1<ISkipBlocksOfSystemMethods`1<DfsNodePtr>> blocksOfSystemMethodsProvider, ICacheProviderContainer`1<IFuidsMatcher> fuidsMatcherProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICallTreeAccessors`1<DfsNodePtr>> get_Data();
}
[SnapshotComponentAttribute("16")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Timeline.Dfs.TimelineRootsSplitter : object {
    private IDataProvider`1<IRootsSplitter`1<DfsNodePtr>> myData;
    private IDataProvider`1<IRootsSplitter`1<DfsNodePtr>> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.IRootsSplitter<JetBrains.DotTrace.DalInterface.Timeline.CallTree.DfsNodePtr>>>.Data { get; }
    private sealed virtual override IDataProvider`1<IRootsSplitter`1<DfsNodePtr>> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.Features.CallTree.CallTreeBuilder.Reader.IRootsSplitter<JetBrains.DotTrace.DalInterface.Timeline.CallTree.DfsNodePtr>>>.get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Timeline.EventCollector.EventLogListenerFactory : object {
    private ListPropertyWriter myPropertyWriter;
    [CompilerGeneratedAttribute]
private EnumerationListenerWithThreadSwitch`2<WithThread`1<EventInfo>, EventNodesWithData> <Data>k__BackingField;
    public EnumerationListenerWithThreadSwitch`2<WithThread`1<EventInfo>, EventNodesWithData> Data { get; }
    public EventLogListenerFactory(IDataContainer`1<LogStoragePropertyExtractor> extractor, PropertyOrders orders);
    private void AddNode(WithThread`1<EventInfo> withThread, EventNodesWithData accumulator);
    [CompilerGeneratedAttribute]
public sealed virtual EnumerationListenerWithThreadSwitch`2<WithThread`1<EventInfo>, EventNodesWithData> get_Data();
    private void Init(EventNodesWithData accumulator);
    private static EventNodesWithData GetResult(EventNodesWithData accumulator);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Timeline.EventCollector.EventLogTableBackend : TableBackendBase`3<EventNodeData, EventCollectionInfo, Nullable`1<EventNodeExtendedData>> {
    private EventNodeDataExtractor myNodeExtractor;
    private ILogger myLogger;
    private IThreadSwitchEx`1<CollectionPart`2<EventNodeData, EventCollectionInfo>> myProvidedNodes;
    [CompilerGeneratedAttribute]
private IFiltrationListenerProvider`2<WithThread`1<EventInfo>, IFiltrationState> <EventListener>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProxy`1<bool> <IsActive>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProxy`1<IReadOnlyCollection`1<KnownEventTypes>> <SelectedEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private IThreadSwitch`1<Nullable`1<EventNodeExtendedData>> <ProvidedSelectedNode>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProviderBase`1<object> <ProviderForProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProxy`1<NodeListDescriptor> <RequestedSelectedNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private IThreadSwitch`1<EventsListProperties> <ProvidedSelectedNodesProperties>k__BackingField;
    public IFiltrationListenerProvider`2<WithThread`1<EventInfo>, IFiltrationState> EventListener { get; }
    public IDataProxy`1<bool> IsActive { get; }
    public IDataProxy`1<IReadOnlyCollection`1<KnownEventTypes>> SelectedEvents { get; }
    public IThreadSwitch`1<CollectionPart`2<EventNodeData, EventCollectionInfo>> ProvidedNodes { get; }
    public IThreadSwitch`1<Nullable`1<EventNodeExtendedData>> ProvidedSelectedNode { get; }
    public IDataProviderBase`1<object> ProviderForProgress { get; }
    public IDataProxy`1<NodeListDescriptor> RequestedSelectedNodes { get; }
    public IThreadSwitch`1<EventsListProperties> ProvidedSelectedNodesProperties { get; }
    public EventLogTableBackend(EventLogListenerFactory eventLogListenerFactory, IAccessorProviderContainer`1<CallFunctionInfoProvider> callFunctionInfoProviderAccessorContainer, IDataContainer`1<DataPipeLifetime> pipeLifetime, EventNodeDataExtractor nodeExtractor);
    private Func`3<EventNodesWithData, IExecutionController, ChunkList`1<EventNodeData>> ExtractNodesData();
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.SnapshotComponents.Remote.Timeline.EventCollector.EventLogTableBackend/<CreateFilters>d__5")]
private IEnumerable`1<IThreadSwitch`1<Predicate`1<EventNodeData>>> CreateFilters();
    private static Predicate`1<EventNodeData> ContainsEvent(IReadOnlyCollection`1<KnownEventTypes> eventTypes);
    private static Predicate`1<EventNodeData> MatchesPattern(string pattern);
    private static TableBackendInput`2<EventNodeData, EventCollectionInfo> AddCollectionInfo(ChunkList`1<EventNodeData> nodes);
    private static IDictionary`2<KnownEventTypes, int> CalculateEventStatistics(ChunkList`1<EventNodeData> nodes);
    private Nullable`1<EventNodeExtendedData> CreateExtendedInfo(Pair`2<Nullable`1<EventNodeData>, NodeDescriptor> dataAndDescriptor, IAccessor`1<CallFunctionInfoProvider> callFunctionInfoProviderAccessor);
    private static bool IsSameModuleOnly(FunctionInfo info1, FunctionInfo info2);
    private Pair`2<Nullable`1<EventNodeData>, NodeDescriptor> GetSelectedNode(VersionedContainer`1<TableProcessingData`2<EventNodeData, EventCollectionInfo>> data, NodeDescriptor descriptor);
    private static EventsListProperties GetSelectedNodesProperties(VersionedContainer`1<TableProcessingData`2<EventNodeData, EventCollectionInfo>> data, NodeListDescriptor selectedNodes, IExecutionController controller);
    private static IAsyncDataProvider`1<CollectionPart`2<EventNodeData, EventCollectionInfo>> UpdateCallStackInfo(IAsyncDataProvider`1<CollectionPart`2<EventNodeData, EventCollectionInfo>> input, IThreadSwitch`1<IAccessor`1<CallFunctionInfoProvider>> callFunctionInfoProviderAccessor);
    private static string CreateCallInfoString(FunctionInfo info);
    [CompilerGeneratedAttribute]
public IFiltrationListenerProvider`2<WithThread`1<EventInfo>, IFiltrationState> get_EventListener();
    [CompilerGeneratedAttribute]
public IDataProxy`1<bool> get_IsActive();
    [CompilerGeneratedAttribute]
public IDataProxy`1<IReadOnlyCollection`1<KnownEventTypes>> get_SelectedEvents();
    public virtual IThreadSwitch`1<CollectionPart`2<EventNodeData, EventCollectionInfo>> get_ProvidedNodes();
    [CompilerGeneratedAttribute]
public virtual IThreadSwitch`1<Nullable`1<EventNodeExtendedData>> get_ProvidedSelectedNode();
    [CompilerGeneratedAttribute]
public virtual IDataProviderBase`1<object> get_ProviderForProgress();
    [CompilerGeneratedAttribute]
public IDataProxy`1<NodeListDescriptor> get_RequestedSelectedNodes();
    [CompilerGeneratedAttribute]
public IThreadSwitch`1<EventsListProperties> get_ProvidedSelectedNodesProperties();
}
[SnapshotComponentAttribute("0")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Timeline.EventCollector.EventNodeDataExtractor : object {
    private IStringReader myStringReader;
    private CallStackPointProvider myCallStackProvider;
    private PropertyOrders myOrders;
    private IDataContainer`1<IAccessor`1<IMetadataManager>> myMetadataAccessor;
    public EventNodeDataExtractor(Lifetime lifetime, IStringReader stringReader, CallStackPointProvider callStackProvider, PropertyOrders orders, IDataContainer`1<IAccessor`1<IMetadataManager>> metadataAccessor);
    public void Extract(EventNodesWithData source, ChunkList`1<EventNodeData> list, MetadataInfoCache cache, IExecutionController executionController);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Timeline.EventCollector.LogStoragePropertyExtractorContainer : object {
    [CompilerGeneratedAttribute]
private LogStoragePropertyExtractor <Data>k__BackingField;
    public LogStoragePropertyExtractor Data { get; }
    public LogStoragePropertyExtractorContainer(IDataContainer`1<ILogStorage> storageContainer, IStringReader reader);
    [CompilerGeneratedAttribute]
public sealed virtual LogStoragePropertyExtractor get_Data();
}
[SnapshotComponentAttribute("16")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Timeline.EventCollector.PropertyOrders : object {
    private Int32[] myOffset;
    private IDictionary`2<KnownEventTypes, IReadOnlyList`1<EventProperties>> myOrder;
    private void Register(KnownEventTypes eventType, EventProperties[] properties);
    public int GetOffset(EventProperties property);
    public IReadOnlyList`1<EventProperties> GetOrder(KnownEventTypes eventType);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Timeline.Filtration.TimelineCallTreeFiltration : CallTreeFiltrationComponent`2<DfsNodePtr, FunctionUID> {
    public TimelineCallTreeFiltration(IDfsAlgorithmsProviderContainer`1<DfsNodePtr> commonLogicProvider, ICacheProviderContainer`1<SubsystemsCache`1<DfsNodePtr>> subsystemCacheProviderContainer, ICallTreeRootProvider`1<DfsNodePtr> rootProvider);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Timeline.Inject.TimelineMeasureNodeProviderContainer : object {
    [CompilerGeneratedAttribute]
private IDataProxy`1<CallTreePath[]> <ExcludedNodesProxy>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProxy`1<bool> <AsyncSupportedProxy>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<IMeasureNodeStorage> <Data>k__BackingField;
    public IDataProxy`1<CallTreePath[]> ExcludedNodesProxy { get; }
    public IDataProxy`1<bool> AsyncSupportedProxy { get; }
    public IDataProvider`1<IMeasureNodeStorage> Data { get; }
    public TimelineMeasureNodeProviderContainer(IDataContainer`1<DataPipeLifetime> pipeLifetime, ICallTreeRootProvider`1<DfsNodePtr> callTreeRoots, IProviderContainer`1<ICallTreeAccessors`1<DfsNodePtr>> treeAccessorsContainer, CallTreeFilterInputComponents`1<DfsNodePtr> remoteComponents, IProviderContainer`1<IPayloadNormalizer`1<LongPayload>> normalizer, IProviderContainer`1<IRootsSplitter`1<DfsNodePtr>> rootsSplitterContainer, ISectionAccessor`1<IIlToNativeMapSection> ilToNativeSectionAccessor, ICallTreePayloadsSource`2<DfsNodePtr, LongPayload> payloadsSource);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProxy`1<CallTreePath[]> get_ExcludedNodesProxy();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProxy`1<bool> get_AsyncSupportedProxy();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IMeasureNodeStorage> get_Data();
}
public interface JetBrains.DotTrace.Features.SnapshotComponents.Remote.Timeline.Payloads.ISetTimelineCallTreePayloads {
    unknown IThreadSwitch`1<TimelineCallTreePayloads`1<DfsNodePtr>> Payloads {public set; }
    public abstract virtual void set_Payloads(IThreadSwitch`1<TimelineCallTreePayloads`1<DfsNodePtr>> value);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Timeline.Payloads.TimelineCallTreePayloadsComponent : object {
    private IThreadSwitchProxy`1<TimelineCallTreePayloads`1<DfsNodePtr>> mySourcePayloads;
    [CompilerGeneratedAttribute]
private IThreadSwitch`1<CallTreePayloadsData`2<DfsNodePtr, LongPayload>> <PayloadsWithSubsystemFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IThreadSwitch`1<CallTreePayloadsData`2<DfsNodePtr, LongPayload>> <PayloadsWithoutSubsystemFilter>k__BackingField;
    public IThreadSwitch`1<CallTreePayloadsData`2<DfsNodePtr, LongPayload>> PayloadsWithSubsystemFilter { get; }
    public IThreadSwitch`1<CallTreePayloadsData`2<DfsNodePtr, LongPayload>> PayloadsWithoutSubsystemFilter { get; }
    unknown IThreadSwitch`1<TimelineCallTreePayloads`1<DfsNodePtr>> Payloads {public set; }
    public TimelineCallTreePayloadsComponent(IDataContainer`1<DataPipeLifetime> lifetimeContainer, IProviderContainer`1<ICallTreeAccessors`1<DfsNodePtr>> treeAccessorsProvider, IProviderContainer`1<SubsystemKeysSet> subsystemKeysSet, ICallTreeFiltration`1<DfsNodePtr> callTreeFiltration);
    private static CallTreePayloadsData`2<DfsNodePtr, LongPayload> CalculatePayloads(TimelineCallTreePayloads`1<DfsNodePtr> ownPayloads, IAccessor`1<ICallTreeReader`1<DfsNodePtr>> treeReader, IExecutionController controller, Predicate`1<DfsNodePtr> additionalFilter);
    [CompilerGeneratedAttribute]
public sealed virtual IThreadSwitch`1<CallTreePayloadsData`2<DfsNodePtr, LongPayload>> get_PayloadsWithSubsystemFilter();
    [CompilerGeneratedAttribute]
public sealed virtual IThreadSwitch`1<CallTreePayloadsData`2<DfsNodePtr, LongPayload>> get_PayloadsWithoutSubsystemFilter();
    public sealed virtual void set_Payloads(IThreadSwitch`1<TimelineCallTreePayloads`1<DfsNodePtr>> value);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Timeline.Payloads.TimelineFlatPayloadsComponent : FlatPayloadsComponent`2<DfsNodePtr, LongPayload> {
    public TimelineFlatPayloadsComponent(IDataContainer`1<DataPipeLifetime> dataPipeLifetimeContainer, ICallTreePayloadsSource`2<DfsNodePtr, LongPayload> callTreePayloadsComponent, SubsystemKeysSetComponent subsystemKeysSetComponent, ITopMethodsRemoteSettings topMethodsSettingsComponent, ICallTreePresentationRemoteSettings callTreePresentationSettings, IProviderContainer`1<ICallTreeAccessors`1<DfsNodePtr>> treeAccessorsContainer, IFlatPayloadsBuilder`3<DfsNodePtr, FunctionUIDm, LongPayload> flatPayloadsBuilder, CallTreeFilterInputComponents`1<DfsNodePtr> remoteComponents, ICallTreeRootProvider`1<DfsNodePtr> callTreeRootProvider, IPlainListGroupBySource plainListGroupBySource, IProviderContainer`1<IRootsSplitter`1<DfsNodePtr>> rootsSplitterContainer);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Timeline.Payloads.TimelineSubsystemMapping : SubsystemMappingBase`1<DfsNodePtr> {
    public TimelineSubsystemMapping(ICacheProviderContainer`1<SubsystemsCache`1<DfsNodePtr>> subsystemCacheProvider);
}
[SnapshotComponentAttribute("10")]
internal class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Timeline.Payloads.TimelineTransparentFlatPayloadsBuilder : object {
    private IFlatPayloadsBuilder`3<DfsNodePtr, FunctionUID, LongPayload> myFlatPayloadsBuilder;
    [CompilerGeneratedAttribute]
private IDataProxy`1<bool> <CalculateClassIdPayloads>k__BackingField;
    public IDataProxy`1<bool> CalculateClassIdPayloads { get; }
    public TimelineTransparentFlatPayloadsBuilder(Lifetime lifetime, IFlatPayloadsBuilder`3<DfsNodePtr, FunctionUID, LongPayload> flatPayloadsBuilder);
    public sealed virtual IThreadSwitch`1<FlatPayloads`2<FunctionUIDm, LongPayload>> BuildPipeline(DataPipeLifetime lifetime, CalculationTargets calculationTargets, IThreadSwitch`1<OwnPayloadsData`2<DfsNodePtr, LongPayload>> payloadsProvider, IThreadSwitch`1<InterruptibleLazy`1<Nullable`1<AccessData`1<DfsNodePtr>>>> accessDataProvider, bool disableKeyRemapping);
    public sealed virtual IThreadSwitch`1<FunctionPayloadsMap`2<FunctionUIDm, LongPayload>> BuildCalledFunctionsPayloads(DataPipeLifetime lifetime, IThreadSwitch`1<OwnPayloadsData`2<DfsNodePtr, LongPayload>> payloadsProvider, IThreadSwitch`1<Nullable`1<AccessData`1<DfsNodePtr>>> accessDataProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProxy`1<bool> get_CalculateClassIdPayloads();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Timeline.PlainList.TimelinePlainListCommonTreeBackend : PlainListCommonTreeBackendBase`2<DfsNodePtr, LongPayload> {
    public TimelinePlainListCommonTreeBackend(IDataContainer`1<DataPipeLifetime> pipeLifetime, IMethodViewDataProvider methodViewDataAccessorProvider, ICacheProviderContainer`1<IAccessor`1<IMetadataManagerMerged>> metadataManagerAccessorProvider, IPlainListGroupBySource plainListGroupBySource, FlatPayloadsComponent`2<DfsNodePtr, LongPayload> flatPayloadsComponent, ICacheProviderContainer`1<IFuidsMatcher> fuidsMatcherProvider, IProviderContainer`1<ICallTreeAccessors`1<DfsNodePtr>> callTreeAccessorsProvider, IFlatPayloadsBuilder`3<DfsNodePtr, FunctionUIDm, LongPayload> flatPayloadsBuilder, IMethodViewDataProvider methodViewDataProvider, ITopMethodsRemoteSettings topMethodsSettingsComponent);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Timeline.Subsystems.CallFunctionInfoFactory : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<IAccessor`1<CallFunctionInfoProvider>> <Data>k__BackingField;
    public IDataProvider`1<IAccessor`1<CallFunctionInfoProvider>> Data { get; }
    public CallFunctionInfoFactory(IDataContainer`1<IDfsReaders`1<DfsNodePtr>> callTreeAccessor, IDataContainer`1<ILogStorage> logStorageContainer, IDataContainer`1<IAccessor`1<IMetadataReader>> metadataAccessor, IPtrToIsSystemProviderContainer ptrToIsSystemProviderContainer);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IAccessor`1<CallFunctionInfoProvider>> get_Data();
}
public interface JetBrains.DotTrace.Features.SnapshotComponents.Remote.Timeline.Subsystems.IPtrToIsSystemProviderContainer {
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Timeline.Subsystems.PtrToIsSystemProviderContainer : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<IAccessor`1<Func`2<DfsNodePtr, bool>>> <Data>k__BackingField;
    public IDataProvider`1<IAccessor`1<Func`2<DfsNodePtr, bool>>> Data { get; }
    public PtrToIsSystemProviderContainer(ICacheProviderContainer`1<IDfsReaders`1<DfsNodePtr>> offsetToFuidContainer, IFunctionSystemness systemnessAccessorContainer);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IAccessor`1<Func`2<DfsNodePtr, bool>>> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Timeline.SystemMethods.TimelineBlocksOfSystemMethods : BlocksOfSystemMethodsCache`1<DfsNodePtr> {
    public TimelineBlocksOfSystemMethods(IFunctionSystemness functionSystemness, IAllRootsProvider`1<DfsNodePtr> rawRootsProviderContainer, ICacheProviderContainer`1<IDfsReaders`1<DfsNodePtr>> dfsReaders, IDataContainer`1<DataPipeLifetime> dataPipeLifetimeContainer, IMemoryMappedStorageManager cacheStorage, IProviderContainer`1<ICacheStorageManager> cacheStorageManager, ICacheProviderContainer`1<IOffsetToIndexConverter`1<DfsNodePtr>> convertor, ICacheProviderContainer`1<IFuidsMatcher> fuidsMatcher);
}
[SnapshotComponentAttribute("16")]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Timeline.SystemMethods.TimelineSyntheticMethods : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<FunctionUIDm> <Data>k__BackingField;
    public IEnumerable`1<FunctionUIDm> Data { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<FunctionUIDm> get_Data();
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.Timeline.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotComponents.Remote.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotComponents.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotDalComponents.Local.Performance.ZoneMarker : object {
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotDalComponents.Local.SnapshotStateAccessorFactory : object {
    private Lifetime myLifetime;
    [NotNullAttribute]
private ISettingsStore mySettingsStore;
    private Dictionary`2<MountPath, ISnapshotStateAccessor> myAccessors;
    private XmlFileSettingsStorage myXmlFileSettingsStorage;
    public SnapshotStateAccessorFactory(Lifetime lifetime, InternKeyPathComponent internKeyPathComponent, IFileSystemTracker fileSystemTracker, ISettingsStore settingsStore, ILazy`1<ISettingsLogger> logger, IThreading uiThreading, SnapshotOrigin snapshotOrigin);
    public sealed virtual ISnapshotStateAccessor GetAccessor(MountPath mountPath);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotDalComponents.Local.Timeline.SingleCallTreeRootsStackContainer : object {
    [CompilerGeneratedAttribute]
private ICallTreeRootsStack <Data>k__BackingField;
    public ICallTreeRootsStack Data { get; }
    public SingleCallTreeRootsStackContainer(Lifetime lifetime, IThreading threading, ISnapshotStateStorageProvider snapshotStateStorageProvider);
    [CompilerGeneratedAttribute]
public sealed virtual ICallTreeRootsStack get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotDalComponents.Local.Timeline.SingleSnapshotStateStorageProvider : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ISnapshotStateAccessor> <Data>k__BackingField;
    public IDataProvider`1<ISnapshotStateAccessor> Data { get; }
    public SingleSnapshotStateStorageProvider(ISnapshotStateAccessorFactory factory);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ISnapshotStateAccessor> get_Data();
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotDalComponents.Local.Timeline.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotDalComponents.Local.ZoneMarker : object {
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotDalComponents.Remote.Performance.CallTreeAccessor.DalAllRootsCallTreeAccessor : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<CallTreeNodesAccessors`1<CallTreeSectionOffset>> <AccessorsProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<RootAccessData`1<CallTreeSectionOffset>> <RootAccessData>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<IComparer`1<CallTreeSectionOffset>> <Comparer>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<IAccessor`1<IDataMapper`2<FunctionUID, bool>>> <Systemness>k__BackingField;
    public IDataProvider`1<CallTreeNodesAccessors`1<CallTreeSectionOffset>> AccessorsProvider { get; }
    public IDataProvider`1<RootAccessData`1<CallTreeSectionOffset>> RootAccessData { get; }
    public IDataProvider`1<IComparer`1<CallTreeSectionOffset>> Comparer { get; }
    public IDataProvider`1<IAccessor`1<IDataMapper`2<FunctionUID, bool>>> Systemness { get; }
    public DalAllRootsCallTreeAccessor(IAllRootsProvider`1<CallTreeSectionOffset> allRoots, IDataContainer`1<DataPipeLifetime> pipeLifetimeContainer, IProviderContainer`1<ICallTreeAccessors`1<CallTreeSectionOffset>> treeAccessorsContainer, ICacheProviderContainer`1<IDfsReaders`1<CallTreeSectionOffset>> dfsReaders, CallTreeFilterInputComponents`1<CallTreeSectionOffset> remoteComponents, IFunctionSystemnessDal systemness, DalPerformanceRootsSplitter dalPerformanceRootsSplitter);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<CallTreeNodesAccessors`1<CallTreeSectionOffset>> get_AccessorsProvider();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<RootAccessData`1<CallTreeSectionOffset>> get_RootAccessData();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IComparer`1<CallTreeSectionOffset>> get_Comparer();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IAccessor`1<IDataMapper`2<FunctionUID, bool>>> get_Systemness();
}
[SnapshotComponentAttribute("16")]
public class JetBrains.DotTrace.Features.SnapshotDalComponents.Remote.Performance.CallTreeAccessor.DalPerformanceAsyncMethodsServiceContainer : DisabledDalAsyncMethodsServiceContainer {
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotDalComponents.Remote.Performance.CallTreeAccessor.DalPerformanceAsyncToContinuationCache : AsyncPtrToContinuationPtrCache`1<CallTreeSectionOffset> {
    public DalPerformanceAsyncToContinuationCache(IDataContainer`1<DataPipeLifetime> dataPipeLifetimeContainer, IAllRootsProvider`1<CallTreeSectionOffset> rawRootsProviderContainer, ICacheProviderContainer`1<CommonDfsLogic`2<CallTreeSectionOffset, FunctionUID>> dfsLogicProvider, IMemoryMappedStorageManager cacheStorage, IProviderContainer`1<ICacheStorageManager> cacheStorageManager, ICacheProviderContainer`1<IAsyncMethodService> asyncMethodServiceCacheProvider);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotDalComponents.Remote.Performance.CallTreeAccessor.DalPerformanceBlocksOfSystemMethods : BlocksOfSystemMethodsCache`1<CallTreeSectionOffset> {
    public DalPerformanceBlocksOfSystemMethods(IFunctionSystemnessDal functionSystemness, IAllRootsProvider`1<CallTreeSectionOffset> allRoots, ICacheProviderContainer`1<IDfsReaders`1<CallTreeSectionOffset>> dfsReaders, IDataContainer`1<DataPipeLifetime> dataPipeLifetimeContainer, IMemoryMappedStorageManager cacheStorage, IProviderContainer`1<ICacheStorageManager> cacheStorageManager, ICacheProviderContainer`1<IOffsetToIndexConverter`1<CallTreeSectionOffset>> convertor);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotDalComponents.Remote.Performance.CallTreeAccessor.DalPerformanceCallTreeComponentsProvider : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICallTreeAccessors`1<CallTreeSectionOffset>> <Data>k__BackingField;
    public IDataProvider`1<ICallTreeAccessors`1<CallTreeSectionOffset>> Data { get; }
    public DalPerformanceCallTreeComponentsProvider(IDataContainer`1<DataPipeLifetime> pipeLifetimeContainer, ICacheProviderContainer`1<IDfsReaders`1<CallTreeSectionOffset>> dfsReaders, ICacheProviderContainer`1<CommonDfsLogic`2<CallTreeSectionOffset, FunctionUID>> commonDfsLogicContainer, IFunctionSystemnessDal functionSystemness, IAccessorProviderContainer`1<ICallTreeReader`1<CallTreeSectionOffset>> treeReaderAccessor, ICacheProviderContainer`1<IAsyncMethodCallTreeService`1<CallTreeSectionOffset>> asyncMethodCallTreeService, IProviderContainer`1<ISkipBlocksOfSystemMethods`1<CallTreeSectionOffset>> blocksOfSystemMethodsProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICallTreeAccessors`1<CallTreeSectionOffset>> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotDalComponents.Remote.Performance.CallTreeAccessor.DalPerformanceCallTreeFilterInputComponents : CallTreeFilterInputComponents`1<CallTreeSectionOffset> {
    public DalPerformanceCallTreeFilterInputComponents(IFunctionSystemnessDal functionSystemness, ICacheProviderContainer`1<IAsyncMethodService> asyncMethodInfoProvider, ICacheProviderContainer`1<IAsyncMethodCallTreeService`1<CallTreeSectionOffset>> asyncMethodCallTreeService);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotDalComponents.Remote.Performance.CallTreeAccessor.DalPerformanceCallTreeReaderContainer : CallTreeReaderContainer`1<CallTreeSectionOffset> {
    public DalPerformanceCallTreeReaderContainer(ICacheProviderContainer`1<IDfsReaders`1<CallTreeSectionOffset>> dfsReaders, ICacheProviderContainer`1<CommonDfsLogic`2<CallTreeSectionOffset, FunctionUID>> commonDfsLogicContainer);
}
[SnapshotComponentAttribute("16")]
public class JetBrains.DotTrace.Features.SnapshotDalComponents.Remote.Performance.CallTreeAccessor.DalPerformanceRootsSplitter : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<IRootsSplitter`1<CallTreeSectionOffset>> <Data>k__BackingField;
    public IDataProvider`1<IRootsSplitter`1<CallTreeSectionOffset>> Data { get; }
    [CompilerGeneratedAttribute]
public IDataProvider`1<IRootsSplitter`1<CallTreeSectionOffset>> get_Data();
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotDalComponents.Remote.Performance.ZoneMarker : object {
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotDalComponents.Remote.Timeline.Async.SingleTimelineAsyncMethodsServiceContainer : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<IAsyncMethodService> <Data>k__BackingField;
    public IDataProvider`1<IAsyncMethodService> Data { get; }
    public SingleTimelineAsyncMethodsServiceContainer(ICacheProviderContainer`1<IAsyncMethodService> dalService);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IAsyncMethodService> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotDalComponents.Remote.Timeline.Async.SingleTimelineAsyncToContinuationCache : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<IAsyncMethodCallTreeService`1<DfsNodePtr>> <Data>k__BackingField;
    public IDataProvider`1<IAsyncMethodCallTreeService`1<DfsNodePtr>> Data { get; }
    public SingleTimelineAsyncToContinuationCache(ICacheProviderContainer`1<IAsyncMethodCallTreeService`1<DfsNodePtr>> dalCache);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IAsyncMethodCallTreeService`1<DfsNodePtr>> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotDalComponents.Remote.Timeline.SingleTimelineRootAccessDataProvider : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<RootAccessData`1<DfsNodePtr>> <Data>k__BackingField;
    public IDataProvider`1<RootAccessData`1<DfsNodePtr>> Data { get; }
    public SingleTimelineRootAccessDataProvider(IAllRootsProvider`1<DfsNodePtr> allRoots);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<RootAccessData`1<DfsNodePtr>> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotDalComponents.Remote.Timeline.TimelineFunctionSystemness : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<IAccessor`1<IDataMapper`2<FunctionUIDm, bool>>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<IAccessor`1<IDataMapper`2<FunctionUIDm, bool>>>> Data { get; }
    public TimelineFunctionSystemness(FunctionSystemnessDal functionSystemnessDal);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<IAccessor`1<IDataMapper`2<FunctionUIDm, bool>>>> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotDalComponents.Remote.Timeline.TimelineMethodViewDataProvider : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<IAccessor`1<IDataMapper`2<FunctionUIDm, Nullable`1<MethodViewData>>>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<IAccessor`1<IDataMapper`2<FunctionUIDm, Nullable`1<MethodViewData>>>>> Data { get; }
    public TimelineMethodViewDataProvider(MethodViewDataProvider methodViewDataProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<IAccessor`1<IDataMapper`2<FunctionUIDm, Nullable`1<MethodViewData>>>>> get_Data();
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotDalComponents.Remote.Timeline.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotDalComponents.Remote.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotDalComponents.ZoneMarker : object {
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.SnapshotSelector.ContainerHelpers : object {
    [ExtensionAttribute]
public static IValueResolver BuildRemoteResolver(IComponentContainer parentContainer, bool isSingleProcess, Func`2<T, IComponentContainer> getContainerFunc);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.DalContainers : object {
    private IComponentContainer[] myContainers;
    public IComponentContainer First { get; }
    public IComponentContainer Second { get; }
    public DalContainers(IComponentContainer[] containers);
    public IComponentContainer get_First();
    public IComponentContainer get_Second();
    [LocalizableAttribute("False")]
private static string GetSnapshotId(IComponentContainer container);
    public string GetMoniker();
    public virtual string ToString();
}
public interface JetBrains.DotTrace.Features.SnapshotSelector.IAllFuidsFilterProvider {
    public IDataProvider`1<IDataMapper`2<FunctionUID, bool>> Provider { get; }
    public abstract virtual IDataProvider`1<IDataMapper`2<FunctionUID, bool>> get_Provider();
}
public interface JetBrains.DotTrace.Features.SnapshotSelector.IDataComponentContainers {
    public IDataProvider`1<DalContainers> Data { get; }
    public abstract virtual IDataProvider`1<DalContainers> get_Data();
}
public interface JetBrains.DotTrace.Features.SnapshotSelector.IFeaturesComponentContainer {
    public IComponentContainer FeatureContainer { get; }
    public abstract virtual IComponentContainer get_FeatureContainer();
}
public interface JetBrains.DotTrace.Features.SnapshotSelector.ISelectorSnapshotFactory`1 {
    public abstract virtual T BuildEntity(SnapshotDataId id);
}
public interface JetBrains.DotTrace.Features.SnapshotSelector.ISnapshotDataContainerManager {
    public abstract virtual void OpenExtraSnapshot(FileSystemPath fileSystemPath);
    public abstract virtual void CloseExtraSnapshot();
    public abstract virtual void ChangeSnapshotsOrder();
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Payloads.DotTracePayloadPresentersFactory : object {
    private Dictionary`2<SnapshotDataId, Dictionary`2<SnapshotOrder, IPayloadPresenters`1<DotTracePayload>>> myPresenters;
    public DotTracePayloadPresentersFactory(ITickTimeConverter tickTimeConverter, SnapshotConfiguration configuration);
    public DotTracePayloadPresentersFactory(ITickTimeConverter tickTimeConverter1, SnapshotConfiguration configuration1, ITickTimeConverter tickTimeConverter2, SnapshotConfiguration configuration2);
    private void AddPresenter(SnapshotDataId id, IPayloadPresenters`1<DotTracePayload> defaultPresenter, IPayloadPresenters`1<DotTracePayload> reversedPresenter);
    private void AddPresenter(SnapshotDataId id, IPayloadPresenters`1<DotTracePayload> presenter);
    public sealed virtual IPayloadPresenters`1<DotTracePayload> BuildSnapshotPresenter(SnapshotDataId id, SnapshotOrder order);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Payloads.DotTracePayloadPresentersFactoryBuilder : object {
    public static IPayloadPresenterFactoryBuilder`1<DotTracePayload> Instance;
    private static DotTracePayloadPresentersFactoryBuilder();
    public sealed virtual IPayloadPresenterFactory`1<DotTracePayload> BuildForSingleSnapshot(ITickTimeConverter tickTimeConverter, SnapshotConfiguration configuration);
    public sealed virtual IPayloadPresenterFactory`1<DotTracePayload> BuildForTwoSnapshots(ITickTimeConverter tickTimeConverter1, SnapshotConfiguration configuration1, ITickTimeConverter tickTimeConverter2, SnapshotConfiguration configuration2);
}
public interface JetBrains.DotTrace.Features.SnapshotSelector.Payloads.IPayloadPresenterFactory`1 {
    public abstract virtual IPayloadPresenters`1<TPayload> BuildSnapshotPresenter(SnapshotDataId id, SnapshotOrder order);
}
public interface JetBrains.DotTrace.Features.SnapshotSelector.Payloads.IPayloadPresenterFactoryBuilder`1 {
    public abstract virtual IPayloadPresenterFactory`1<TPayload> BuildForSingleSnapshot(ITickTimeConverter tickTimeConverter, SnapshotConfiguration configuration);
    public abstract virtual IPayloadPresenterFactory`1<TPayload> BuildForTwoSnapshots(ITickTimeConverter tickTimeConverter1, SnapshotConfiguration configuration1, ITickTimeConverter tickTimeConverter2, SnapshotConfiguration configuration2);
}
public interface JetBrains.DotTrace.Features.SnapshotSelector.RootAccessData.ISelectorRootAccessDataFactory`1 {
}
public interface JetBrains.DotTrace.Features.SnapshotSelector.RootAccessData.ISelectorRootAccessDataFactoryBuilder`1 {
    public abstract virtual ISelectorRootAccessDataFactory`1<TPtr> BuildForSingleSnapshot(IDalAllRootsCallTreeAccessor`1<TPtr> single);
    public abstract virtual ISelectorRootAccessDataFactory`1<TPtr> BuildForTwoSnapshots(DataPipeLifetime pipeLifetime, IDalAllRootsCallTreeAccessor`1<TPtr> first, IDalAllRootsCallTreeAccessor`1<TPtr> second, IDataProvider`1<PathProvidersData[]> pathProvider, IDataProvider`1<IFuidsMatcher> fuidsMathcher);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.RootAccessData.PathProvidersData : object {
    public SingleSnapshotInfo Info;
    public CallTreePath Path;
    public PathProvidersData(SingleSnapshotInfo info, CallTreePath path);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.RootAccessData.SingleSnapshotsRootAccessDataFactory`1 : object {
    private IDataProvider`1<RootAccessData`1<TPtr>> mySingle;
    public SingleSnapshotsRootAccessDataFactory`1(IDalAllRootsCallTreeAccessor`1<TPtr> single);
    public sealed virtual IDataProvider`1<RootAccessData`1<TPtr>> BuildEntity(SnapshotDataId id);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.RootAccessData.TwoSnapshotsRootAccessDataFactory`1 : object {
    private Dictionary`2<SnapshotDataId, IDataProvider`1<RootAccessData`1<TPtr>>> myAccessors;
    public TwoSnapshotsRootAccessDataFactory`1(DataPipeLifetime pipeLifetime, IDalAllRootsCallTreeAccessor`1<TPtr> firstAccessor, IDalAllRootsCallTreeAccessor`1<TPtr> secondAccessor, IDataProvider`1<PathProvidersData[]> pathsProvider, IDataProvider`1<IFuidsMatcher> fuidsMathcher);
    private static IAsyncDataProvider`1<AccessData`1<TPtr>> BuildAccessData(DataPipeLifetime pipeLifetime, IDalAllRootsCallTreeAccessor`1<TPtr> accessorProvider, IDataProvider`1<CallTreePath> pathProvider);
    public sealed virtual IDataProvider`1<RootAccessData`1<TPtr>> BuildEntity(SnapshotDataId id);
}
public interface JetBrains.DotTrace.Features.SnapshotSelector.RootStack.ISelectorSnapshotCallTreeRootsHistoryFactory {
}
public interface JetBrains.DotTrace.Features.SnapshotSelector.RootStack.ISelectorSnapshotDalCallTreeRootsHistoryFactory {
}
public interface JetBrains.DotTrace.Features.SnapshotSelector.RootStack.ISelectorSnapshotRootFuidsFactory {
}
public interface JetBrains.DotTrace.Features.SnapshotSelector.RootStack.ISnapshotRootFuids {
    public FrugalLocalList`1<FunctionUIDm> Fuids { get; }
    public abstract virtual FrugalLocalList`1<FunctionUIDm> get_Fuids();
}
public class JetBrains.DotTrace.Features.SnapshotSelector.RootStack.Proxies.ProxyCallTreeHistoryItem : object {
    private ICallTreeHistoryItem myDalEntity;
    private ISnapshotMasksComponent myMasks;
    private IFuidsMatcher myMatcher;
    public CallTreeRootPrefix Prefix { get; }
    public ProxyCallTreeHistoryItem(ICallTreeHistoryItem dalEntity, ISnapshotMasksComponent masks, IFuidsMatcher matcher);
    public sealed virtual CallTreeRootPrefix get_Prefix();
    public sealed virtual bool ChangeExcludeChildrenMode(PayloadMode payloadMode);
    public sealed virtual bool ChangeAsyncContinuationAggregation(bool aggregate);
    public sealed virtual bool IsAsyncContinuationAggregated();
    public sealed virtual bool IsAsyncAwaitsAggregated();
    public sealed virtual bool ChangeAsyncAwaitsAggregation(bool aggregate);
    public sealed virtual bool ChangeDirection(bool isBackTrace);
    public sealed virtual CallTreeRootPrefixAndSelection GetCurrentState();
}
public class JetBrains.DotTrace.Features.SnapshotSelector.RootStack.Proxies.ProxyCallTreeSelection : object {
    private ICallTreeSelection`1<CallTreeNodeId> myDalEntity;
    private ISnapshotMasksComponent myMasks;
    private IFuidsMatcher myMatcher;
    public ProxyCallTreeSelection(ICallTreeSelection`1<CallTreeNodeId> dalEntity, ISnapshotMasksComponent masks, IFuidsMatcher matcher);
    public sealed virtual void UpdateSelection(IEnumerable`1<CallTreeNodeId> path);
    public sealed virtual IEnumerable`1<CallTreeNodeId> GetLastSelection();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
private CallTreeNodeId <UpdateSelection>b__4_0(CallTreeNodeId id);
    [CompilerGeneratedAttribute]
private CallTreeNodeId <GetLastSelection>b__5_0(CallTreeNodeId id);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.RootStack.Proxies.ProxyRootsHistory : object {
    private ICallTreeRootsHistory myDalRootsHistory;
    private ISnapshotMasksComponent myMasks;
    private IFuidsMatcher myMatcher;
    [CompilerGeneratedAttribute]
private IDataProvider`1<CallTreeRootPrefixAndSelection> <CurrentRootProvider>k__BackingField;
    public IDataProvider`1<CallTreeRootPrefixAndSelection> CurrentRootProvider { get; }
    public ProxyRootsHistory(ICallTreeRootsHistory dalRootsHistory, ISnapshotMasksComponent masks, IFuidsMatcher matcher);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<CallTreeRootPrefixAndSelection> get_CurrentRootProvider();
    public sealed virtual void PushNewRoot(CallTreeRootPrefix rootPath, bool deleteHistory);
    public sealed virtual void ChangeIndex(Func`2<int, int> changeIndexFunc, bool deleteHistory);
    public sealed virtual bool CanChangeIndex(Func`2<int, int> changeIndexFunc);
    public sealed virtual void ChangeCurrentRoot(Func`2<ICallTreeHistoryItem, bool> changeFunc);
    public sealed virtual T GetCurrentRoot(Func`2<ICallTreeHistoryItem, T> getFunc);
    private ICallTreeHistoryItem DalToFeatureConverter(ICallTreeHistoryItem dalEntity);
    private CallTreeRootPrefixAndSelection DalToFeatureConverter(CallTreeRootPrefixAndSelection dalEntity);
    private CallTreeRootPrefix FeatureToDalConverter(CallTreeRootPrefix featureEntity);
    private CallTreePath FeatureToDalConverter(CallTreePath featureEntity);
    private CallTreeNodeId FeatureToDalConverter(CallTreeNodeId featureEntity);
}
public static class JetBrains.DotTrace.Features.SnapshotSelector.RootStack.Proxies.ProxyRootsHistoryHelpers : object {
    public static CallTreeRootPrefixAndSelection DalToFeatureConverter(CallTreeRootPrefixAndSelection dalEntity, ISnapshotMasksComponent masks, IFuidsMatcher matcher);
    public static CallTreeRootPrefix DalToFeatureConverter(CallTreeRootPrefix dalEntity, ISnapshotMasksComponent masks, IFuidsMatcher matcher);
    private static CallTreePath DalToFeatureConverter(CallTreePath dalEntity, ISnapshotMasksComponent masks, IFuidsMatcher matcher);
    public static CallTreeNodeId DalToFeatureConverter(CallTreeNodeId dalEntity, ISnapshotMasksComponent masks, IFuidsMatcher matcher);
    public static CallTreeNodeId FeatureToDalConverter(CallTreeNodeId featureEntity, ISnapshotMasksComponent masks, IFuidsMatcher matcher);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.SnapshotSelector.RootStack.RootStackEx : object {
    [ExtensionAttribute]
public static IDataProvider`1<CallTreePath> BuildPathProvider(ICallTreeRootsHistory rootsHistory);
    [ExtensionAttribute]
public static IDataProvider`1<CallTreePath> BuildPathProvider(IDataProvider`1<PathProvidersData[]> pathsProvider, SnapshotDataId id);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.RootStack.SelectorSnapshotCallTreeRootsHistoryFactory : object {
    private ISelectorSnapshotDalCallTreeRootsHistoryFactory myFactory;
    private ISelectorSnapshotMasksFactory mySelectorSnapshotMasksFactory;
    private IFuidsMatcher myMatcher;
    private Dictionary`2<SnapshotDataId, ICallTreeRootsHistory> myRootsHistory;
    public SelectorSnapshotCallTreeRootsHistoryFactory(ISelectorSnapshotDalCallTreeRootsHistoryFactory factory, ISelectorSnapshotMasksFactory selectorSnapshotMasksFactory, IFuidsMatcher matcher);
    public sealed virtual ICallTreeRootsHistory BuildEntity(SnapshotDataId id);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.RootStack.SelectorSnapshotDalCallTreeRootsHistoryFactory : object {
    private Lifetime myLifetime;
    private IThreading myThreading;
    private ISelectorSnapshotStateAccessorFactory myFactory;
    private ISelectorSnapshotMasksFactory myMasksFactory;
    private Dictionary`2<SnapshotDataId, ICallTreeRootsHistory> myDalRootsHistory;
    public SelectorSnapshotDalCallTreeRootsHistoryFactory(Lifetime lifetime, IThreading threading, ISelectorSnapshotStateAccessorFactory factory, ISelectorSnapshotMasksFactory masksFactory);
    public sealed virtual ICallTreeRootsHistory BuildEntity(SnapshotDataId id);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.RootStack.SelectorSnapshotRootFuidsFactory : object {
    private static SnapshotRootFuids ourDefaultFuids;
    private SnapshotRootFuids myComparisonRootFuids;
    public SelectorSnapshotRootFuidsFactory(IEnumerable`1<PathProvidersData> pathData);
    private static SelectorSnapshotRootFuidsFactory();
    public sealed virtual ISnapshotRootFuids BuildEntity(SnapshotDataId id);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.RootStack.SnapshotRootFuids : object {
    [CompilerGeneratedAttribute]
private FrugalLocalList`1<FunctionUIDm> <Fuids>k__BackingField;
    public FrugalLocalList`1<FunctionUIDm> Fuids { get; }
    public SnapshotRootFuids(FunctionUIDm single);
    public SnapshotRootFuids(ISet`1<FunctionUIDm> list);
    [CompilerGeneratedAttribute]
public sealed virtual FrugalLocalList`1<FunctionUIDm> get_Fuids();
}
public class JetBrains.DotTrace.Features.SnapshotSelector.SavedState.CombinedSnapshotStateAccessor : object {
    private static HashSet`1<MemberInfo> ourExternalStorageEntries;
    private ISnapshotStateAccessor myMain;
    private ISnapshotStateAccessor mySecond;
    public CombinedSnapshotStateAccessor(ISnapshotStateAccessor main, ISnapshotStateAccessor second);
    private static CombinedSnapshotStateAccessor();
    private static MemberInfo GetMemberInfo(Expression`1<Func`2<SnapshotState, T>> lambda);
    private static MemberInfo GetMemberInfo(Expression`1<Func`2<SnapshotState, IIndexedEntry`2<TIndex, T>>> lambda);
    private ISnapshotStateAccessor GetAccessor(MemberInfo memberInfo);
    public sealed virtual IValueEntry`1<T> GetJsonValueEntry(Expression`1<Func`2<SnapshotState, string>> lambda, JsonSerializerSettings settings);
    public sealed virtual IValueEntry`1<T> GetValueEntry(Expression`1<Func`2<SnapshotState, T>> lambda);
    public sealed virtual IIndexedValueEntry`2<TIndex, T> GetIndexedJsonValueEntry(Expression`1<Func`2<SnapshotState, IIndexedEntry`2<TIndex, string>>> lambda, JsonSerializerSettings settings);
    public sealed virtual IIndexedValueEntry`2<TIndex, T> GetIndexedValueEntry(Expression`1<Func`2<SnapshotState, IIndexedEntry`2<TIndex, T>>> lambda);
}
public interface JetBrains.DotTrace.Features.SnapshotSelector.SavedState.ISelectorSnapshotStateAccessorFactory {
}
public interface JetBrains.DotTrace.Features.SnapshotSelector.SavedState.ISelectorSnapshotStateAccessorFactoryBuilder {
    public abstract virtual ISelectorSnapshotStateAccessorFactory BuildForSingleSnapshot(ISnapshotStateAccessorFactory single);
    public abstract virtual ISelectorSnapshotStateAccessorFactory BuildForTwoSnapshots(ISnapshotStateAccessorFactory main, ISnapshotStateAccessorFactory second);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.SavedState.SingleSnapshotStateAccessorFactory : object {
    private ISnapshotStateAccessor mySingle;
    public SingleSnapshotStateAccessorFactory(ISnapshotStateAccessorFactory single);
    public sealed virtual ISnapshotStateAccessor BuildEntity(SnapshotDataId id);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.SavedState.TwoSnapshotsStateAccessorFactory : object {
    private static MountPath ourComparisonMountPath;
    private Dictionary`2<SnapshotDataId, ISnapshotStateAccessor> myAccessors;
    public TwoSnapshotsStateAccessorFactory(ISnapshotStateAccessorFactory main, ISnapshotStateAccessorFactory second);
    private static TwoSnapshotsStateAccessorFactory();
    public sealed virtual ISnapshotStateAccessor BuildEntity(SnapshotDataId id);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.Async.SelectorAsyncMethodsServiceContainerBase : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<IAsyncMethodService> <Data>k__BackingField;
    public IDataProvider`1<IAsyncMethodService> Data { get; }
    protected SelectorAsyncMethodsServiceContainerBase(IDataComponentContainers dataContainer);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IAsyncMethodService> get_Data();
    private static IDataProvider`1<TO> BuildRawFuidsComparisonProvider(IComponentContainer container1, IComponentContainer container2, Func`2<IComponentContainer, IDataProvider`1<T>> getProvider, Func`2<SelectorEntities`1<T>, TO> mergeComponents);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.Async.SelectorAsyncToContinuationCacheBase`1 : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<IAsyncMethodCallTreeService`1<T>> <Data>k__BackingField;
    public IDataProvider`1<IAsyncMethodCallTreeService`1<T>> Data { get; }
    protected SelectorAsyncToContinuationCacheBase`1(IDataComponentContainers dataContainer, Func`2<T, int> getOffsetGroup);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IAsyncMethodCallTreeService`1<T>> get_Data();
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.DalAdapters.CompareBatchReaderAdaptor`2 : object {
    private OffsetMatchingContainer`2<IBatchReader`2<T, TPayload>, T> myNormal;
    private OffsetMatchingContainer`2<IBatchReader`2<T, TPayload>, T> myMasked;
    private IComparisonSnapshotsOffsetsRanges`1<T> myOffsetsRanges;
    public CompareBatchReaderAdaptor`2(OffsetMatchingContainer`2<IBatchReader`2<T, TPayload>, T> normal, OffsetMatchingContainer`2<IBatchReader`2<T, TPayload>, T> masked, IComparisonSnapshotsOffsetsRanges`1<T> offsetsRanges);
    public sealed virtual int ReadBackwardOffsetsAscending(T to, int count, TPayload[] nodes, int destEndIndex);
    public sealed virtual int ReadForwardOffsetsAscending(T from, int count, TPayload[] nodes, int destStartIndex);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.DalAdapters.CompareOffsetToIndexConverter`1 : object {
    private OffsetMatchingContainer`2<IOffsetToIndexConverter`1<T>, T> myNormal;
    private OffsetMatchingContainer`2<IOffsetToIndexConverter`1<T>, T> myMasked;
    private int myNormalSnapshotOffsetsCount;
    public CompareOffsetToIndexConverter`1(OffsetMatchingContainer`2<IOffsetToIndexConverter`1<T>, T> normal, OffsetMatchingContainer`2<IOffsetToIndexConverter`1<T>, T> masked, IComparisonSnapshotsOffsetsRanges`1<T> comparisonSnapshotsOffsetsRanges);
    public sealed virtual T IndexToOffset(int index);
    public sealed virtual int OffsetToIndex(T offset);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.DalAdapters.CompareTryFillArray`2 : object {
    private OffsetMatchingContainer`2<ITryFillArray`2<TIn, TOut>, TIn> myNormal;
    private OffsetMatchingContainer`2<ITryFillArray`2<TIn, TOut>, TIn> myMasked;
    public CompareTryFillArray`2(OffsetMatchingContainer`2<ITryFillArray`2<TIn, TOut>, TIn> normal, OffsetMatchingContainer`2<ITryFillArray`2<TIn, TOut>, TIn> masked);
    public sealed virtual bool TryFillArray(TIn offset, ArrayBuffer`1<TOut> value);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.DalAdapters.CompareTryGetValue`2 : object {
    private OffsetMatchingContainer`2<ITryGetValue`2<TIn, TOut>, TIn> myNormal;
    private OffsetMatchingContainer`2<ITryGetValue`2<TIn, TOut>, TIn> myMasked;
    public CompareTryGetValue`2(OffsetMatchingContainer`2<ITryGetValue`2<TIn, TOut>, TIn> normal, OffsetMatchingContainer`2<ITryGetValue`2<TIn, TOut>, TIn> masked);
    public sealed virtual bool TryGetValue(TIn offset, TOut& value);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.DalAdapters.ComparisonBatchHeaderReader`1 : object {
    private IBatchHeadersReader`1<T> myNormalComponent;
    private IBatchHeadersReader`1<T> myMaskedComponent;
    private OffsetMatchingContainer`2<IDfsReaders`1<T>, T> myNormalContainer;
    private OffsetMatchingContainer`2<IDfsReaders`1<T>, T> myMaskedContainer;
    private T myNormalSnapshotMaxOffset;
    public ComparisonBatchHeaderReader`1(Lifetime lt, IComparisonSnapshotsOffsetsRanges`1<T> offsetsRanges, OffsetMatchingContainer`2<IDfsReaders`1<T>, T> normal, OffsetMatchingContainer`2<IDfsReaders`1<T>, T> masked);
    public sealed virtual int ReadHeadersOffsetsDescending(FunctionUID key, T fromOffset, int count, T[] offsets);
    public sealed virtual int ReadHeadersOffsetsDescending(FunctionUID key, T from, int count, int arrayLength, T[] offsets);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.DalAdapters.ComparisonBatchNodeReader`1 : object {
    private IComparisonSnapshotsOffsetsRanges`1<T> myOffsetsRanges;
    private OffsetMatchingContainer`2<IDfsReaders`1<T>, T> myNormalContainer;
    private OffsetMatchingContainer`2<IDfsReaders`1<T>, T> myMaskedContainer;
    private IBatchNodesReader`1<T> myNormalComponent;
    private IBatchNodesReader`1<T> myMaskedComponent;
    public ComparisonBatchNodeReader`1(Lifetime lt, IComparisonSnapshotsOffsetsRanges`1<T> offsetsRanges, OffsetMatchingContainer`2<IDfsReaders`1<T>, T> normal, OffsetMatchingContainer`2<IDfsReaders`1<T>, T> masked);
    public sealed virtual int ReadBackwardOffsetsAscending(T toOffset, int count, DfsNode`2[] nodes, int destEndIndex);
    public sealed virtual int ReadForwardOffsetsAscending(T fromOffset, int count, DfsNode`2[] nodes, int destStartIndex);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.DalAdapters.ComparisonCallTreePayloadsSource`2 : object {
    [CompilerGeneratedAttribute]
private IThreadSwitch`1<CallTreePayloadsData`2<T, TPayload>> <PayloadsWithSubsystemFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IThreadSwitch`1<CallTreePayloadsData`2<T, TPayload>> <PayloadsWithoutSubsystemFilter>k__BackingField;
    public IThreadSwitch`1<CallTreePayloadsData`2<T, TPayload>> PayloadsWithSubsystemFilter { get; }
    public IThreadSwitch`1<CallTreePayloadsData`2<T, TPayload>> PayloadsWithoutSubsystemFilter { get; }
    public ComparisonCallTreePayloadsSource`2(DataPipeLifetime lt, IDataProvider`1<IComparisonSnapshotsOffsetsRanges`1<T>> offsetsRangesProvider, OffsetMatchingContainer`2<ICallTreePayloadsSource`2<T, TPayload>, T> normal, OffsetMatchingContainer`2<ICallTreePayloadsSource`2<T, TPayload>, T> masked);
    private static CallTreePayloadsData`2<T, TPayload> CombinePayloads(IComparisonSnapshotsOffsetsRanges`1<T> offsetsRanges, OffsetMatchingContainer`2<CallTreePayloadsData`2<T, TPayload>, T> normal, OffsetMatchingContainer`2<CallTreePayloadsData`2<T, TPayload>, T> masked);
    [CompilerGeneratedAttribute]
public sealed virtual IThreadSwitch`1<CallTreePayloadsData`2<T, TPayload>> get_PayloadsWithSubsystemFilter();
    [CompilerGeneratedAttribute]
public sealed virtual IThreadSwitch`1<CallTreePayloadsData`2<T, TPayload>> get_PayloadsWithoutSubsystemFilter();
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.DalAdapters.ComparisonDfsTreeReader`1 : object {
    private OffsetMatchingContainer`2<IDfsReaders`1<T>, T> myNormal;
    private OffsetMatchingContainer`2<IDfsReaders`1<T>, T> myMasked;
    private IComparisonSnapshotsOffsetsRanges`1<T> myOffsetsRanges;
    public SubtractOffset`1<T> Subtractor { get; }
    public T InvalidOffset { get; }
    public IComparer`1<T> Comparer { get; }
    public T MinOffset { get; }
    public ComparisonDfsTreeReader`1(OffsetMatchingContainer`2<IDfsReaders`1<T>, T> normal, OffsetMatchingContainer`2<IDfsReaders`1<T>, T> masked, IComparisonSnapshotsOffsetsRanges`1<T> offsetsRanges);
    public sealed virtual IBatchNodesReader`1<T> GetNodesReaders(Lifetime lt);
    public sealed virtual IBatchHeadersReader`1<T> GetHeadersReaders(Lifetime lt);
    public sealed virtual IDataMapper`2<T, FunctionUID> GetIndexToFuidMap(Lifetime lt);
    public sealed virtual IDataMapper`2<T, T> GetIndexToParentMap(Lifetime lt);
    public sealed virtual IDataMapper`2<T, bool> GetIsRootPointer();
    public sealed virtual SubtractOffset`1<T> get_Subtractor();
    public sealed virtual T get_InvalidOffset();
    public sealed virtual IComparer`1<T> get_Comparer();
    public sealed virtual T get_MinOffset();
    private IDataMapper`2<T, T2> BuildComparisonMapper(Func`2<IDfsReaders`1<T>, IDataMapper`2<T, T2>> convert);
    private SubtractResult SubtractorFunc(T minuend, T subtrahend);
    private static Nullable`1<SubtractResult> GetSubtractorResult(OffsetMatchingContainer`2<IDfsReaders`1<T>, T> container, T minuend, T subtrahend);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.DalAdapters.ComparisonFuidsMatcher : object {
    private Dictionary`2<FunctionUID, FunctionUIDm> myForwardMap;
    private Dictionary`2<FunctionUIDm, FrugalLocalList`1<FunctionUID>> myBackMap;
    public ComparisonFuidsMatcher(Dictionary`2<FunctionUID, FunctionUIDm> forwardMap, Dictionary`2<FunctionUIDm, FrugalLocalList`1<FunctionUID>> backMap);
    public sealed virtual FunctionUIDm Convert(FunctionUID fuid);
    public sealed virtual FrugalLocalList`1<FunctionUID> ConvertBack(FunctionUIDm fuid);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.DalAdapters.ComparisonFuidsMatcherBuilder : object {
    private static ILogger ourLogger;
    private static ComparisonFuidsMatcherBuilder();
    [ExtensionAttribute]
private static void AddNewElement(IDictionary`2<TKey, FrugalLocalList`1<TValue>> dictionary, TKey key, TValue value);
    private static void BuildMetadataMatcherPayload(IReadOnlyCollection`1<FunctionUID> allFunctionUIDs, IThreadFuidToNameDictionary threadFuidToNameDictionary, INavigationInfoProvider metadata, IDictionary`2<MetadataMatcherPayload, FrugalLocalList`1<FunctionUID>> result, MetadataMatcherErrorsCollector errorsCollector);
    private static MetadataMatcherPayload BuildComparisonPayload(FunctionUID functionUID, INavigationInfoProvider metadata, MetadataMatcherErrorsCollector errorsCollector);
    public static IFuidsMatcher Build(INavigationInfoProvider normalNavigationInfo, INavigationInfoProvider maskedNavigationInfo, IReadOnlyCollection`1<FunctionUID> normalAllFunctionUIDs, IReadOnlyCollection`1<FunctionUID> maskedAllFunctionUIDs, IThreadFuidToNameDictionary normalThreadFuidToNameDictionary, IThreadFuidToNameDictionary maskedThreadFuidToNameDictionary);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.DalAdapters.ComparisonMetadataManager : object {
    private FuidsSelectorContainer`1<IMetadataManager> myComparisonContainer;
    public ComparisonMetadataManager(FuidsSelectorContainer`1<IMetadataManager> comparisonContainer);
    public sealed virtual CallFrameInfo GetCallFrameInfo(FunctionUIDm fuid);
    public sealed virtual Nullable`1<ModuleUID> GetModuleUID(FunctionUIDm fuid);
    public sealed virtual Nullable`1<ModuleInfo> GetModuleInfo(FunctionUIDm fuid);
    public sealed virtual string GetPresentableSignature(FunctionUIDm fuid);
    public sealed virtual SourceViewNavigationInfo GetSourceViewNavigationInfo(FunctionUIDm fuid);
    private T RunOnMetadataManager(FunctionUIDm fuid, Func`3<IMetadataManager, FunctionUID, T> func);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.DalAdapters.ComparisonNavigationInfoProvider : object {
    private FuidsSelectorContainer`1<INavigationInfoProvider> myComparisonContainer;
    public ComparisonNavigationInfoProvider(FuidsSelectorContainer`1<INavigationInfoProvider> comparisonContainer);
    public sealed virtual CallTreeNavigationInfo GetNavigationInfo(FunctionUIDm fuid);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.DalAdapters.ComparisonOffsetToSubsystem`1 : SubsystemsCache`1<T> {
    public ComparisonOffsetToSubsystem`1(OffsetMatchingContainer`2<SubsystemsCache`1<T>, T> normal, OffsetMatchingContainer`2<SubsystemsCache`1<T>, T> masked, IComparisonSnapshotsOffsetsRanges`1<T> offsetsRanges);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.DalAdapters.ComparisonSnapshotConfiguration : SnapshotConfiguration {
    public ComparisonSnapshotConfiguration(SnapshotConfiguration f, SnapshotConfiguration s);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.DalAdapters.ComparisonSnapshotsOffsetsRanges`1 : object {
    [CompilerGeneratedAttribute]
private bool <NormalSnapshotEmpty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MaskedSnapshotEmpty>k__BackingField;
    [CompilerGeneratedAttribute]
private T <NormalSnapshotMinOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private T <MaskedSnapshotMinOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private T <NormalSnapshotMaxOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private T <MaskedSnapshotMaxOffset>k__BackingField;
    public bool NormalSnapshotEmpty { get; }
    public bool MaskedSnapshotEmpty { get; }
    public T NormalSnapshotMinOffset { get; }
    public T MaskedSnapshotMinOffset { get; }
    public T NormalSnapshotMaxOffset { get; }
    public T MaskedSnapshotMaxOffset { get; }
    public ComparisonSnapshotsOffsetsRanges`1(IDfsRawRoots`1<T> normalComponent, IDfsRawRoots`1<T> maskedComponent, IDfsReaders`1<T> normalReadersComponent, IDfsReaders`1<T> maskedReadersComponent);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_NormalSnapshotEmpty();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_MaskedSnapshotEmpty();
    [CompilerGeneratedAttribute]
public sealed virtual T get_NormalSnapshotMinOffset();
    [CompilerGeneratedAttribute]
public sealed virtual T get_MaskedSnapshotMinOffset();
    [CompilerGeneratedAttribute]
public sealed virtual T get_NormalSnapshotMaxOffset();
    [CompilerGeneratedAttribute]
public sealed virtual T get_MaskedSnapshotMaxOffset();
}
public interface JetBrains.DotTrace.Features.SnapshotSelector.Selectors.DalAdapters.IComparisonSnapshotsOffsetsRanges`1 {
    public bool NormalSnapshotEmpty { get; }
    public bool MaskedSnapshotEmpty { get; }
    public T NormalSnapshotMaxOffset { get; }
    public T MaskedSnapshotMaxOffset { get; }
    public T MaskedSnapshotMinOffset { get; }
    public T NormalSnapshotMinOffset { get; }
    public abstract virtual bool get_NormalSnapshotEmpty();
    public abstract virtual bool get_MaskedSnapshotEmpty();
    public abstract virtual T get_NormalSnapshotMaxOffset();
    public abstract virtual T get_MaskedSnapshotMaxOffset();
    public abstract virtual T get_MaskedSnapshotMinOffset();
    public abstract virtual T get_NormalSnapshotMinOffset();
}
public interface JetBrains.DotTrace.Features.SnapshotSelector.Selectors.DalAdapters.IFuidsMatcher {
}
public interface JetBrains.DotTrace.Features.SnapshotSelector.Selectors.DalAdapters.IFuidsMatcher`2 {
    public abstract virtual TMerged Convert(TRaw fuid);
    public abstract virtual FrugalLocalList`1<TRaw> ConvertBack(TMerged fuid);
}
public interface JetBrains.DotTrace.Features.SnapshotSelector.Selectors.DalAdapters.IMetadataManagerMerged {
    public abstract virtual Nullable`1<ModuleUID> GetModuleUID(FunctionUIDm fuid);
    public abstract virtual SourceViewNavigationInfo GetSourceViewNavigationInfo(FunctionUIDm fuid);
}
public interface JetBrains.DotTrace.Features.SnapshotSelector.Selectors.DalAdapters.IMetadataReaderMerged {
    public abstract virtual CallFrameInfo GetCallFrameInfo(FunctionUIDm fuid);
    [NotNullAttribute]
public abstract virtual string GetPresentableSignature(FunctionUIDm fuid);
    public abstract virtual Nullable`1<ModuleInfo> GetModuleInfo(FunctionUIDm fuid);
}
public interface JetBrains.DotTrace.Features.SnapshotSelector.Selectors.DalAdapters.INavigationInfoProviderMerged {
    public abstract virtual CallTreeNavigationInfo GetNavigationInfo(FunctionUIDm fuid);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.DalAdapters.MetadataManagerWithCustomRoots : object {
    private IMetadataManagerMerged mySourceManager;
    private ISnapshotRootFuids myFuids;
    public MetadataManagerWithCustomRoots(IMetadataManagerMerged sourceManager, ISnapshotRootFuids fuids);
    public sealed virtual CallFrameInfo GetCallFrameInfo(FunctionUIDm fuid);
    private static string ExtractShortName(CallFrameInfo info);
    public sealed virtual string GetPresentableSignature(FunctionUIDm fuid);
    public sealed virtual Nullable`1<ModuleInfo> GetModuleInfo(FunctionUIDm fuid);
    public sealed virtual Nullable`1<ModuleUID> GetModuleUID(FunctionUIDm fuid);
    public sealed virtual SourceViewNavigationInfo GetSourceViewNavigationInfo(FunctionUIDm fuid);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.DalAdapters.MetadataMatcherPayload : object {
    [CanBeNullAttribute]
private CallTreeNavigationInfo myNavigationInfo;
    [CanBeNullAttribute]
private string myThreadRootName;
    private FunctionUID mySpecificFunctionUID;
    public MetadataMatcherPayload(CallTreeNavigationInfo navigationInfo);
    public MetadataMatcherPayload(string threadRootName);
    public MetadataMatcherPayload(FunctionUID specificFunctionUID);
    public sealed virtual bool Equals(MetadataMatcherPayload other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.DalAdapters.NavigationInfoDefaultMatcherComparer : object {
    public static IEqualityComparer`1<CallTreeNavigationInfo> Instance;
    private static NavigationInfoDefaultMatcherComparer();
    public sealed virtual bool Equals(CallTreeNavigationInfo x, CallTreeNavigationInfo y);
    public sealed virtual int GetHashCode(CallTreeNavigationInfo obj);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.DalAdapters.NavigationInfoFullComparer : object {
    public static IEqualityComparer`1<CallTreeNavigationInfo> Instance;
    private static NavigationInfoFullComparer();
    public sealed virtual bool Equals(CallTreeNavigationInfo x, CallTreeNavigationInfo y);
    public sealed virtual int GetHashCode(CallTreeNavigationInfo obj);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.DalAdapters.TransparentFuidMatcher : object {
    public static TransparentFuidMatcher Instance;
    private static TransparentFuidMatcher();
    public sealed virtual FunctionUIDm Convert(FunctionUID fuid);
    public sealed virtual FrugalLocalList`1<FunctionUID> ConvertBack(FunctionUIDm fuid);
    public static FunctionUID ConvertBackSingle(FunctionUIDm fuid);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.DalAdapters.TransparentMetadataManager : object {
    private IMetadataManager myManager;
    public TransparentMetadataManager(IMetadataManager manager);
    public sealed virtual CallFrameInfo GetCallFrameInfo(FunctionUIDm fuid);
    public sealed virtual Nullable`1<ModuleUID> GetModuleUID(FunctionUIDm fuid);
    public sealed virtual Nullable`1<ModuleInfo> GetModuleInfo(FunctionUIDm fuid);
    public sealed virtual string GetPresentableSignature(FunctionUIDm fuid);
    public sealed virtual SourceViewNavigationInfo GetSourceViewNavigationInfo(FunctionUIDm fuid);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.DalAdapters.TransparentNavigationInfoProvider : object {
    private INavigationInfoProvider myProvider;
    public TransparentNavigationInfoProvider(INavigationInfoProvider provider);
    public sealed virtual CallTreeNavigationInfo GetNavigationInfo(FunctionUIDm fuid);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.Helpers.ActiveDataConverterEx : object {
    [ExtensionAttribute]
public static IDataProvider`1<T> BuildDataProvider(IDataComponentContainers container, Func`2<IComponentContainer, T> singleInstanceFactory, Func`3<IComponentContainer, IComponentContainer, T> compareInstanceFactory);
    [ExtensionAttribute]
public static IDataProvider`1<T> BuildDataProviderWithLifetime(IDataComponentContainers container, Lifetime lifetime, Func`3<Lifetime, IComponentContainer, T> singleInstanceFactory, Func`4<Lifetime, IComponentContainer, IComponentContainer, T> compareInstanceFactory);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.Helpers.FuidsSelectorContainer`1 : object {
    private TC myNormal;
    private TC myMasked;
    private IFuidsMatcher myMatcher;
    private ulong myIdentityMask;
    public FuidsSelectorContainer`1(TC normal, TC masked, IFuidsMatcher matcher, ulong identityMask);
    public TR RunOnProperComponent(FunctionUIDm key, Func`3<TC, FunctionUID, TR> func);
    public IAccessor`1<FuidsSelectorContainer`1<TO>> ExtractAccessor(Func`3<Lifetime, TC, TO> convert);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.Helpers.OffsetMatchingContainer`2 : object {
    private int myOffsetMask;
    private Func`2<TOffset, int> myGetOffsetGroup;
    [CompilerGeneratedAttribute]
private T <Component>k__BackingField;
    public T Component { get; }
    public OffsetMatchingContainer`2(int offsetMask, Func`2<TOffset, int> getOffsetGroup, T component);
    [CompilerGeneratedAttribute]
public T get_Component();
    public OffsetMatchingContainer`2<TO, TOffset> CreateNew(TO container);
    public bool IsOffsetOwner(TOffset offset);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.Helpers.OffsetMatchingContainerEx : object {
    [ExtensionAttribute]
public static OffsetMatchingContainer`2<TO, TOffset> Extract(OffsetMatchingContainer`2<T, TOffset> input, Func`2<T, TO> convert);
    [ExtensionAttribute]
public static IThreadSwitch`1<OffsetMatchingContainer`2<TO, TOffset>> ExtractThreadSwitch(OffsetMatchingContainer`2<T, TOffset> input, Func`2<T, IThreadSwitch`1<TO>> convert);
    [ExtensionAttribute]
public static IDataProvider`1<ICacheSource`1<OffsetMatchingContainer`2<TO, TOffset>>> ExtractProviderWithCache(OffsetMatchingContainer`2<T, TOffset> input, Func`2<T, IDataProvider`1<ICacheSource`1<TO>>> convert);
    [ExtensionAttribute]
public static IDataProvider`1<OffsetMatchingContainer`2<T, TOffset>> ExtractProvider(OffsetMatchingContainer`2<IDataProvider`1<T>, TOffset> input);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.Helpers.OffsetSelectorContainer`2 : object {
    private TC myNormal;
    private TC myMasked;
    private int myOffsetMask;
    private Func`2<TOffset, int> myGetOffsetGroup;
    public OffsetSelectorContainer`2(TC normal, TC masked, int offsetMask, Func`2<TOffset, int> getOffsetGroup);
    public TR RunOnProperComponent(TOffset key, Func`3<TC, TOffset, TR> func);
}
public static class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.Helpers.SnapshotSelectorHelpers : object {
    public static IDataProvider`1<ICacheSource`1<TO>> BuildMergedFuidsComparisonProvider(IComponentContainer container1, IComponentContainer container2, Func`2<IComponentContainer, IDataProvider`1<ICacheSource`1<T>>> getProvider, Func`3<T, T, TO> mergeComponents);
    public static IDataProvider`1<ICacheSource`1<FuidsSelectorContainer`1<T>>> BuildFuidsComparisonProvider(IComponentContainer container1, IComponentContainer container2, Func`2<IComponentContainer, IDataProvider`1<ICacheSource`1<T>>> getProvider, ICacheProviderContainer`1<IFuidsMatcher> matcherContainer);
    public static IDataProvider`1<ICacheSource`1<TO>> BuildMergedOffsetComparisonProvider(IComponentContainer container1, IComponentContainer container2, Func`2<IComponentContainer, IDataProvider`1<ICacheSource`1<T>>> getProvider, Func`3<T, T, TO> mergeComponents);
    public static IDataProvider`1<ICacheSource`1<TOutput>> BuildMergedOffsetComparisonCacheProvider(IComponentContainer container1, IComponentContainer container2, Func`2<IComponentContainer, IDataProvider`1<ICacheSource`1<T>>> getProvider, Func`2<TOffset, int> getOffsetGroup, Func`3<OffsetMatchingContainer`2<T, TOffset>, OffsetMatchingContainer`2<T, TOffset>, TOutput> mergeComponents);
    public static IDataProvider`1<TOutput> BuildMergedOffsetComparisonProvider(IComponentContainer container1, IComponentContainer container2, Func`2<IComponentContainer, IDataProvider`1<T>> getProvider, Func`2<TOffset, int> getOffsetGroup, Func`3<OffsetMatchingContainer`2<T, TOffset>, OffsetMatchingContainer`2<T, TOffset>, TOutput> mergeComponents);
    public static TOutput BuildMergedOffsetComparisonComponent(IComponentContainer container1, IComponentContainer container2, Func`2<IComponentContainer, T> getComponent, Func`2<TOffset, int> getOffsetGroup, Func`3<OffsetMatchingContainer`2<T, TOffset>, OffsetMatchingContainer`2<T, TOffset>, TOutput> mergeComponents);
    public static IDataProvider`1<ICacheSource`1<OffsetSelectorContainer`2<T, TOffset>>> BuildOffsetComparisonProvider(IComponentContainer container1, IComponentContainer container2, Func`2<IComponentContainer, IDataProvider`1<ICacheSource`1<T>>> getProvider, Func`2<TOffset, int> getOffsetGroup);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.SelectorCallTreeMeasureDataReaderBase`2 : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICallTreeMeasureNodesAccessor`2<T, TPayload>> <Data>k__BackingField;
    public IDataProvider`1<ICallTreeMeasureNodesAccessor`2<T, TPayload>> Data { get; }
    protected SelectorCallTreeMeasureDataReaderBase`2(IDataComponentContainers dataContainer, Func`2<T, int> getOffsetGroup);
    private static ICallTreeMeasureNodesAccessor`2<T, TPayload> ComparisonMeasureInfoReader(OffsetMatchingContainer`2<ICallTreeMeasureNodesAccessor`2<T, TPayload>, T> normal, OffsetMatchingContainer`2<ICallTreeMeasureNodesAccessor`2<T, TPayload>, T> masked);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICallTreeMeasureNodesAccessor`2<T, TPayload>> get_Data();
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.SelectorCallTreePayloadSourceBase`2 : object {
    private IThreadSwitch`1<CallTreePayloadsData`2<T, TPayload>> myPayloadsWithoutSubsystemFilter;
    private IThreadSwitch`1<CallTreePayloadsData`2<T, TPayload>> myPayloadsWithSubsystemFilter;
    public IThreadSwitch`1<CallTreePayloadsData`2<T, TPayload>> PayloadsWithSubsystemFilter { get; }
    public IThreadSwitch`1<CallTreePayloadsData`2<T, TPayload>> PayloadsWithoutSubsystemFilter { get; }
    protected SelectorCallTreePayloadSourceBase`2(IDataComponentContainers dataContainer, IDataContainer`1<DataPipeLifetime> lifetimeContainer, SelectorSnapshotsOffsetsRanges`1<T> selectorSnapshotOffsetsRanges, Func`2<T, int> getOffsetGroup);
    public sealed virtual IThreadSwitch`1<CallTreePayloadsData`2<T, TPayload>> get_PayloadsWithSubsystemFilter();
    public sealed virtual IThreadSwitch`1<CallTreePayloadsData`2<T, TPayload>> get_PayloadsWithoutSubsystemFilter();
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.SelectorDfsReaders`1 : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<IDfsReaders`1<T>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<IDfsReaders`1<T>>> Data { get; }
    protected SelectorDfsReaders`1(IDataComponentContainers dataContainer, SelectorSnapshotsOffsetsRanges`1<T> offsetsRangesProviderContainer, Func`2<T, int> getOffsetGroup);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<IDfsReaders`1<T>>> get_Data();
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.SelectorFlatPayloadsBuilder`2 : object {
    private IDataComponentContainers myDataContainer;
    private Func`2<TOffset, int> myGetOffsetGroup;
    private IDataProvider`1<IFuidsMatcher> myFuidsMatcher;
    [CompilerGeneratedAttribute]
private IDataProxy`1<bool> <CalculateClassIdPayloads>k__BackingField;
    public IDataProxy`1<bool> CalculateClassIdPayloads { get; }
    protected SelectorFlatPayloadsBuilder`2(Lifetime lifetime, IDataComponentContainers dataContainer, ICacheProviderContainer`1<IFuidsMatcher> fuidsMatcher, Func`2<TOffset, int> getOffsetGroup);
    public sealed virtual IThreadSwitch`1<FlatPayloads`2<FunctionUIDm, TPayload>> BuildPipeline(DataPipeLifetime lifetime, CalculationTargets calculationTargets, IThreadSwitch`1<OwnPayloadsData`2<TOffset, TPayload>> payloadsProvider, IThreadSwitch`1<InterruptibleLazy`1<Nullable`1<AccessData`1<TOffset>>>> accessDataProvider, bool disableKeyRemapping);
    public static IThreadSwitch`1<FlatPayloads`2<FunctionUIDm, TPayload>> BuildPipelineTransparent(IFlatPayloadsBuilder`3<TOffset, FunctionUID, TPayload> builder, DataPipeLifetime lifetime, CalculationTargets calculationTargets, IThreadSwitch`1<OwnPayloadsData`2<TOffset, TPayload>> payloadsProvider, IThreadSwitch`1<InterruptibleLazy`1<Nullable`1<AccessData`1<TOffset>>>> accessDataProvider, bool disableKeyRemapping);
    private static ValueTuple`2<AccessData`1<TOffset>, AccessData`1<TOffset>> SplitAccessData(AccessData`1<TOffset> data, Func`2<TOffset, bool> isMaskedOffset, IExecutionController controller);
    private static SimpleSubsystemsCalculation`1<TPayload> MergeSimpleSubsystemsCalculation(IExecutionController controller, SimpleSubsystemsCalculation`1<TPayload> subsystems1, SimpleSubsystemsCalculation`1<TPayload> subsystems2);
    private static FunctionPayloadsMap`2<FunctionUIDm, TPayload> MergeFunctionPayloadsMaps(IFuidsMatcher fuidsMatcher, FunctionPayloadsMap`2<FunctionUID, TPayload> payloads1, FunctionPayloadsMap`2<FunctionUID, TPayload> payloads2, IExecutionController controller);
    public sealed virtual IThreadSwitch`1<FunctionPayloadsMap`2<FunctionUIDm, TPayload>> BuildCalledFunctionsPayloads(DataPipeLifetime lifetime, IThreadSwitch`1<OwnPayloadsData`2<TOffset, TPayload>> payloadsProvider, IThreadSwitch`1<Nullable`1<AccessData`1<TOffset>>> accessDataProvider);
    public static IThreadSwitch`1<FunctionPayloadsMap`2<FunctionUIDm, TPayload>> BuildCalledFunctionsPayloadsTransparent(IFlatPayloadsBuilder`3<TOffset, FunctionUID, TPayload> builder, DataPipeLifetime lifetime, IThreadSwitch`1<OwnPayloadsData`2<TOffset, TPayload>> payloadsProvider, IThreadSwitch`1<Nullable`1<AccessData`1<TOffset>>> accessDataProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProxy`1<bool> get_CalculateClassIdPayloads();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0(DalContainers containers);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.SelectorOffsetToIndexConverter`1 : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<IOffsetToIndexConverter`1<T>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<IOffsetToIndexConverter`1<T>>> Data { get; }
    protected SelectorOffsetToIndexConverter`1(IDataComponentContainers dataContainer, SelectorSnapshotsOffsetsRanges`1<T> offsetsRangesProviderContainer, Func`2<T, int> getOffsetGroup);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<IOffsetToIndexConverter`1<T>>> get_Data();
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.SelectorOffsetToSubsystemBase`1 : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<SubsystemsCache`1<T>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<SubsystemsCache`1<T>>> Data { get; }
    protected SelectorOffsetToSubsystemBase`1(IDataComponentContainers dataContainer, SelectorSnapshotsOffsetsRanges`1<T> offsetsRangesProviderContainer, Func`2<T, int> getOffsetGroup);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<SubsystemsCache`1<T>>> get_Data();
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.SelectorPayloadPresenterBase`1 : object {
    private IDataProvider`1<IPayloadPresenters`1<TPayload>> myPresenterProvider;
    private IDataProvider`1<IPayloadPresenterFactory`1<TPayload>> myPresenterFactory;
    private IDataProvider`1<IPayloadPresenters`1<TPayload>> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.DataStructures.Other.Payloads.IPayloadPresenters<TPayload>>>.Data { get; }
    private IDataProvider`1<IPayloadPresenterFactory`1<TPayload>> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.Features.SnapshotSelector.Payloads.IPayloadPresenterFactory<TPayload>>>.Data { get; }
    protected SelectorPayloadPresenterBase`1(IDataComponentContainers container, ISelectedSnapshotController selectedSnapshotController, ISnapshotOrderProvider snapshotOrderProvider, IPayloadPresenterFactoryBuilder`1<TPayload> presentersFactoryBuilder, IProxyContainer`1<IPayloadNormalizer`1<TPayload>> localNormalizerProxy, IRemotableReference`1<IProxyContainer`1<IPayloadNormalizer`1<TPayload>>> remoteNormalizerProxy);
    private sealed virtual override IDataProvider`1<IPayloadPresenters`1<TPayload>> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.DataStructures.Other.Payloads.IPayloadPresenters<TPayload>>>.get_Data();
    private sealed virtual override IDataProvider`1<IPayloadPresenterFactory`1<TPayload>> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.Features.SnapshotSelector.Payloads.IPayloadPresenterFactory<TPayload>>>.get_Data();
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.SelectorRootAccessDataProviderBase`1 : object {
    private IDataProvider`1<ISelectorRootAccessDataFactory`1<T>> myFactoryProvider;
    private IDataProvider`1<RootAccessData`1<T>> myRootAccessDataProvider;
    private IDataProvider`1<RootAccessData`1<T>> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.DataStructures.Metadata.RootAccessData<T>>>.Data { get; }
    private IDataProvider`1<ISelectorRootAccessDataFactory`1<T>> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.Features.SnapshotSelector.RootAccessData.ISelectorRootAccessDataFactory<T>>>.Data { get; }
    protected SelectorRootAccessDataProviderBase`1(IDataContainer`1<DataPipeLifetime> pipeLifetimeContainer, IDataComponentContainers container, IDataProvider`1<SingleSnapshotInfo> selectedSnapshotProvider, ISelectorRootAccessDataFactoryBuilder`1<T> factoryBuilder, IDataProvider`1<PathProvidersData[]> pathProvider, IDataProvider`1<IFuidsMatcher> fuidsMathcher);
    private sealed virtual override IDataProvider`1<RootAccessData`1<T>> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.DataStructures.Metadata.RootAccessData<T>>>.get_Data();
    private sealed virtual override IDataProvider`1<ISelectorRootAccessDataFactory`1<T>> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.Features.SnapshotSelector.RootAccessData.ISelectorRootAccessDataFactory<T>>>.get_Data();
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.SelectorSnapshotsOffsetsRanges`1 : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<IComparisonSnapshotsOffsetsRanges`1<T>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<IComparisonSnapshotsOffsetsRanges`1<T>>> Data { get; }
    protected SelectorSnapshotsOffsetsRanges`1(IDataComponentContainers dataContainer, Func`2<T, int> getOffsetGroup);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<IComparisonSnapshotsOffsetsRanges`1<T>>> get_Data();
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.SelectorThreadsMapper`1 : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<IDataMapper`2<T, ThreadName>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<IDataMapper`2<T, ThreadName>>> Data { get; }
    protected SelectorThreadsMapper`1(IDataComponentContainers container, Func`2<T, int> getOffsetGroup);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<IDataMapper`2<T, ThreadName>>> get_Data();
}
public interface JetBrains.DotTrace.Features.SnapshotSelector.Selectors.SnapshotSelector.ISelectedSnapshotController {
    public IDataProvider`1<SingleSnapshotInfo> Provider { get; }
    public abstract virtual IDataProvider`1<SingleSnapshotInfo> get_Provider();
    public abstract virtual void SetSnapshotInfo(SingleSnapshotInfo snapshotInfo);
}
public interface JetBrains.DotTrace.Features.SnapshotSelector.Selectors.SnapshotSelector.ISelectedSnapshotProvider {
    public IDataProvider`1<SingleSnapshotInfo> Provider { get; }
    public abstract virtual IDataProvider`1<SingleSnapshotInfo> get_Provider();
}
public interface JetBrains.DotTrace.Features.SnapshotSelector.Selectors.SnapshotSelector.ISnapshotOrderController {
    public IDataProvider`1<SnapshotOrder> Provider { get; }
    public abstract virtual IDataProvider`1<SnapshotOrder> get_Provider();
    public abstract virtual void SetSnapshotInfo(SnapshotOrder order);
    public abstract virtual void ToggleOrder();
}
public interface JetBrains.DotTrace.Features.SnapshotSelector.Selectors.SnapshotSelector.ISnapshotOrderProvider {
    public IDataProvider`1<SnapshotOrder> Provider { get; }
    public abstract virtual IDataProvider`1<SnapshotOrder> get_Provider();
}
public enum JetBrains.DotTrace.Features.SnapshotSelector.Selectors.SnapshotSelector.SnapshotOrder : Enum {
    public int value__;
    public static SnapshotOrder Default;
    public static SnapshotOrder Reversed;
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.SnapshotSelector.SnapshotOrderEx : object {
    [ExtensionAttribute]
public static SnapshotOrder Toggle(SnapshotOrder order);
    [ExtensionAttribute]
public static string PresentOrder(SnapshotOrder order, string format, string firstId, string secondId);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.Selectors.SystemMethods.SelectorBlocksOfSystemMethodsBase`1 : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ISkipBlocksOfSystemMethods`1<TPtr>> <Data>k__BackingField;
    public IDataProvider`1<ISkipBlocksOfSystemMethods`1<TPtr>> Data { get; }
    protected SelectorBlocksOfSystemMethodsBase`1(IDataComponentContainers dataContainer, Func`2<TPtr, int> getOffsetGroup);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ISkipBlocksOfSystemMethods`1<TPtr>> get_Data();
}
public class JetBrains.DotTrace.Features.SnapshotSelector.SnapshotFeaturesContainerBase : object {
    [CompilerGeneratedAttribute]
private IComponentContainer <FeatureContainer>k__BackingField;
    public IComponentContainer FeatureContainer { get; }
    protected SnapshotFeaturesContainerBase(Lifetime lifetime, FullPartCatalogSet fullPartCatalogSet, IComponentContainer parentContainer, ActiveSnapshotZonesList zonesList, ISnapshotDataContainerManager dataContainerManager, bool isLocalSide);
    [CompilerGeneratedAttribute]
public sealed virtual IComponentContainer get_FeatureContainer();
}
public interface JetBrains.DotTrace.Features.SnapshotSelector.SnapshotsMask.ISelectorSnapshotMasksFactory {
}
public class JetBrains.DotTrace.Features.SnapshotSelector.SnapshotsMask.SingleSnapshotMasksFactory : object {
    private ISnapshotMasksComponent mySingle;
    public SingleSnapshotMasksFactory(ISnapshotMasksComponent single);
    public sealed virtual ISnapshotMasksComponent BuildEntity(SnapshotDataId id);
}
public static class JetBrains.DotTrace.Features.SnapshotSelector.SnapshotsMask.SnapshotMasksFactoryBuilder : object {
    public static ISelectorSnapshotMasksFactory BuildForSingleSnapshot(ISnapshotMasksComponent single);
    public static ISelectorSnapshotMasksFactory BuildForTwoSnapshots(ISnapshotMasksComponent main, ISnapshotMasksComponent second);
}
public class JetBrains.DotTrace.Features.SnapshotSelector.SnapshotsMask.TwoSnapshotsMasksFactory : object {
    private ISnapshotMasksComponent myMain;
    private ISnapshotMasksComponent mySecond;
    public TwoSnapshotsMasksFactory(ISnapshotMasksComponent main, ISnapshotMasksComponent second);
    public sealed virtual ISnapshotMasksComponent BuildEntity(SnapshotDataId id);
}
[SnapshotComponentAttribute("16")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.BothSides.Common.MustBeCommon.SelectedSnapshotProvider : ProxyContainer`1<SingleSnapshotInfo> {
    public IDataProvider`1<SingleSnapshotInfo> Provider { get; }
    public sealed virtual IDataProvider`1<SingleSnapshotInfo> get_Provider();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.BothSides.Common.MustBeCommon.SelectorMetadataManagerAccessor : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<IAccessor`1<IMetadataManagerMerged>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<IAccessor`1<IMetadataManagerMerged>>> Data { get; }
    public SelectorMetadataManagerAccessor(Lifetime lifetime, IDataComponentContainers dataContainer, ICacheProviderContainer`1<IFuidsMatcher> fuidsMatcher, IDataContainer`1<IDataProvider`1<ISnapshotRootFuids>> rootFuids);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<IAccessor`1<IMetadataManagerMerged>>> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.BothSides.Common.MustBeCommon.SelectorNavigationInfoProvider : object {
    private IDataSink`1<IAccessor`1<INavigationInfoProviderMerged>> myAccessorSink;
    public SelectorNavigationInfoProvider(Lifetime lifetime, IDataComponentContainers container, ICacheProviderContainer`1<IFuidsMatcher> fuidsMatcher);
    public sealed virtual INavigationInfoProviderMerged Get(Lifetime lifetime);
}
[SnapshotComponentAttribute("16")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.BothSides.Common.MustBeCommon.SelectorPathProviderContainer : ProxyContainer`1<PathProvidersData[]> {
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.BothSides.Common.MustBeCommon.SelectorSnapshotRootFuidsFactoryProvider : object {
    private IDataProvider`1<ISelectorSnapshotRootFuidsFactory> myFactoryProvider;
    private IDataProvider`1<ISnapshotRootFuids> myRootFuids;
    private IDataProvider`1<ISelectorSnapshotRootFuidsFactory> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.Features.SnapshotSelector.RootStack.ISelectorSnapshotRootFuidsFactory>>.Data { get; }
    private IDataProvider`1<ISnapshotRootFuids> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.Features.SnapshotSelector.RootStack.ISnapshotRootFuids>>.Data { get; }
    public SelectorSnapshotRootFuidsFactoryProvider(SelectorPathProviderContainer pathProviderContainer, ISelectedSnapshotProvider selectedSnapshotProvider);
    private sealed virtual override IDataProvider`1<ISelectorSnapshotRootFuidsFactory> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.Features.SnapshotSelector.RootStack.ISelectorSnapshotRootFuidsFactory>>.get_Data();
    private sealed virtual override IDataProvider`1<ISnapshotRootFuids> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.Features.SnapshotSelector.RootStack.ISnapshotRootFuids>>.get_Data();
}
[SnapshotComponentAttribute("16")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.BothSides.Common.MustBeCommon.SnapshotOrderProvider : ProxyContainer`1<SnapshotOrder> {
    public IDataProvider`1<SnapshotOrder> Provider { get; }
    public sealed virtual IDataProvider`1<SnapshotOrder> get_Provider();
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.BothSides.Common.MustBeCommon.ZoneMarker : object {
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.BothSides.Common.SnapshotDataComponentContainerHost : object {
    public static int ContainersSize;
    private IComponentContainer myParentContainer;
    private IDataController`1[] myDataContainers;
    private FullPartCatalogSet myFullPartCatalogSet;
    private ActiveSnapshotZonesList myZonesList;
    [CompilerGeneratedAttribute]
private IDataProvider`1<DalContainers> <Data>k__BackingField;
    public IDataProvider`1<DalContainers> Data { get; }
    public SnapshotDataComponentContainerHost(SnapshotParentContainer snapshotParentContainer, FullPartCatalogSet fullPartCatalogSet, ActiveSnapshotZonesList zonesList);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<DalContainers> get_Data();
    public IComponentContainer BuildContainerCore(IDataContainer`1<DataPipeLifetime> dataPipeLifetimeContainer, int snapshotSlotIndex, SnapshotOrigin data, IRemotableReference`1<IComponentContainer> remoteContainer);
    public void DetachContainer(int snapshotSlotIndex);
}
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.BothSides.Common.SnapshotMasksProvider : object {
    [CompilerGeneratedAttribute]
private int <GroupMask>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <IdentityMask>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNegative>k__BackingField;
    public int GroupMask { get; }
    public ulong IdentityMask { get; }
    public bool IsNegative { get; }
    public SnapshotMasksProvider(bool isSecondSnapshot);
    [CompilerGeneratedAttribute]
public sealed virtual int get_GroupMask();
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_IdentityMask();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsNegative();
}
[SnapshotComponentAttribute("16")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.BothSides.Performance.PerformancePayloadNormalizerComponent : ProxyContainer`1<IPayloadNormalizer`1<DotTracePayload>> {
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.BothSides.Performance.SelectorSnapshotConfiguration : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<SnapshotConfiguration> <Data>k__BackingField;
    public IDataProvider`1<SnapshotConfiguration> Data { get; }
    public SelectorSnapshotConfiguration(Lifetime lifetime, ILogger logger, IDataComponentContainers dataContainer);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<SnapshotConfiguration> get_Data();
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.BothSides.Performance.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.BothSides.Timeline.ZoneMarker : object {
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Local.Common.LocalSnapshotFeaturesContainer : SnapshotFeaturesContainerBase {
    public LocalSnapshotFeaturesContainer(Lifetime lifetime, FullPartCatalogSet fullPartCatalogSet, IComponentContainer parentContainer, IDataComponentContainers dataComponentContainers, ActiveSnapshotZonesList zonesList, ISnapshotDataContainerManager dataContainerManager);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Local.Common.MustBeCommon.AllSnapshotsPresentationProvider : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<AllSnapshotsPresentation> <AllSnapshotsPresentation>k__BackingField;
    public IDataProvider`1<AllSnapshotsPresentation> AllSnapshotsPresentation { get; }
    public AllSnapshotsPresentationProvider(IDataComponentContainers dataContainer);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<AllSnapshotsPresentation> get_AllSnapshotsPresentation();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Local.Common.MustBeCommon.RecentSnapshotsContainer : RecentSnapshotsContainerBase {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ILiveRecentSnapshot> <Data>k__BackingField;
    public IDataProvider`1<ILiveRecentSnapshot> Data { get; }
    public RecentSnapshotsContainer(Lifetime lifetime, IDataComponentContainers container, ISelectedSnapshotController selectedSnapshotController, IRecentSnapshotsStorage storage);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ILiveRecentSnapshot> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Local.Common.MustBeCommon.SelectedSnapshotController : object {
    private IDataController`1<SingleSnapshotInfo> myData;
    [CompilerGeneratedAttribute]
private IDataProvider`1<SingleSnapshotInfo> <Provider>k__BackingField;
    public IDataProvider`1<SingleSnapshotInfo> Provider { get; }
    public SelectedSnapshotController(IRemotableReference`1<SelectedSnapshotProvider> remote, SelectedSnapshotProvider local);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<SingleSnapshotInfo> get_Provider();
    public sealed virtual void SetSnapshotInfo(SingleSnapshotInfo snapshotInfo);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Local.Common.MustBeCommon.SelectorCacheStorageManager : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheStorageManager> <Data>k__BackingField;
    public IDataProvider`1<ICacheStorageManager> Data { get; }
    public SelectorCacheStorageManager(IDataComponentContainers dataContainer);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheStorageManager> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Local.Common.MustBeCommon.SelectorClearCacheAfterClosing : object {
    private IDataProvider`1<IClearCacheAfterClosing> myClearCacheAfterClosing;
    public SelectorClearCacheAfterClosing(Lifetime lifetime, IDataComponentContainers dataContainer);
    public sealed virtual void RegisterClearing();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Local.Common.MustBeCommon.SelectorDalPathProvidersSetter : object {
    public SelectorDalPathProvidersSetter(IProviderContainer`1<ISelectorSnapshotDalCallTreeRootsHistoryFactory> factory, IRemotableReference`1<IAllSnapshotsProviders> allSnapshots, IRemotableReference`1<RemoteSelectorDalPathProviderContainer> remote);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Local.Common.MustBeCommon.SelectorFuidsMatcherComponentLocal : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<IFuidsMatcher>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<IFuidsMatcher>> Data { get; }
    public SelectorFuidsMatcherComponentLocal(IRemotableReference`1<SelectorFuidsMatcherComponent> remoteMatcher);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<IFuidsMatcher>> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Local.Common.MustBeCommon.SelectorPathProvidersSetter : object {
    public SelectorPathProvidersSetter(IProviderContainer`1<ISelectorSnapshotCallTreeRootsHistoryFactory> factory, IRemotableReference`1<IAllSnapshotsProviders> allSnapshots, IRemotableReference`1<SelectorPathProviderContainer> remote, SelectorPathProviderContainer local);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Local.Common.MustBeCommon.SelectorSnapshotCallTreeRootsStackProvider : object {
    private IDataProvider`1<SelectorSnapshotCallTreeRootsHistoryFactory> myFactoryProvider;
    private ICallTreeRootsStack myCallTreeRootsStack;
    private IDataProvider`1<ISelectorSnapshotCallTreeRootsHistoryFactory> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.Features.SnapshotSelector.RootStack.ISelectorSnapshotCallTreeRootsHistoryFactory>>.Data { get; }
    private ICallTreeRootsStack JetBrains.Common.Util.IDataContainer<JetBrains.DotTrace.Features.CallTree.Roots.ICallTreeRootsStack>.Data { get; }
    public SelectorSnapshotCallTreeRootsStackProvider(Lifetime lifetime, IProviderContainer`1<ISelectorSnapshotDalCallTreeRootsHistoryFactory> dalRootsHistoryFactoryContainer, IProviderContainer`1<ISelectorSnapshotMasksFactory> masksFactoryContainer, ISelectedSnapshotController selectedSnapshotController, ICacheProviderContainer`1<IFuidsMatcher> matcherContainer);
    private sealed virtual override IDataProvider`1<ISelectorSnapshotCallTreeRootsHistoryFactory> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.Features.SnapshotSelector.RootStack.ISelectorSnapshotCallTreeRootsHistoryFactory>>.get_Data();
    private sealed virtual override ICallTreeRootsStack JetBrains.Common.Util.IDataContainer<JetBrains.DotTrace.Features.CallTree.Roots.ICallTreeRootsStack>.get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Local.Common.MustBeCommon.SelectorSnapshotCreatedDateTimeForSourceView : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<Nullable`1<DateTime>> <DateTime>k__BackingField;
    public IDataProvider`1<Nullable`1<DateTime>> DateTime { get; }
    public SelectorSnapshotCreatedDateTimeForSourceView(Lifetime lifetime, IDataComponentContainers dataContainer);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<Nullable`1<DateTime>> get_DateTime();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Local.Common.MustBeCommon.SelectorSnapshotDalCallTreeRootsStackProvider : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ISelectorSnapshotDalCallTreeRootsHistoryFactory> <Data>k__BackingField;
    public IDataProvider`1<ISelectorSnapshotDalCallTreeRootsHistoryFactory> Data { get; }
    public SelectorSnapshotDalCallTreeRootsStackProvider(Lifetime lifetime, IThreading threading, IProviderContainer`1<ISelectorSnapshotStateAccessorFactory> accessorFactory, ISelectedSnapshotController selectedSnapshotController, IProviderContainer`1<ISelectorSnapshotMasksFactory> masksFactoryContainer);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ISelectorSnapshotDalCallTreeRootsHistoryFactory> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Local.Common.MustBeCommon.SelectorSnapshotMasksFactoryProvider : object {
    private IDataProvider`1<ISelectorSnapshotMasksFactory> myFactoryProvider;
    private IDataProvider`1<ISelectorSnapshotMasksFactory> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.Features.SnapshotSelector.SnapshotsMask.ISelectorSnapshotMasksFactory>>.Data { get; }
    public SelectorSnapshotMasksFactoryProvider(IDataComponentContainers container, ISelectedSnapshotController selectedSnapshotController, ISelectorSnapshotStateAccessorFactoryBuilder factoryBuilder);
    private sealed virtual override IDataProvider`1<ISelectorSnapshotMasksFactory> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.Features.SnapshotSelector.SnapshotsMask.ISelectorSnapshotMasksFactory>>.get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Local.Common.MustBeCommon.SelectorSnapshotOverviewContainer : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<IEnumerable`1<InformationBlock>> <OverviewInfoProvider>k__BackingField;
    public IDataProvider`1<IEnumerable`1<InformationBlock>> OverviewInfoProvider { get; }
    public SelectorSnapshotOverviewContainer(Lifetime lifetime, IDataComponentContainers dataContainer);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IEnumerable`1<InformationBlock>> get_OverviewInfoProvider();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Local.Common.MustBeCommon.SelectorSnapshotPresentation : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<SnapshotPresentationData> <PresentationData>k__BackingField;
    public IDataProvider`1<bool> SnapshotIsLocked { get; }
    public IDataProvider`1<SnapshotPresentationData> PresentationData { get; }
    public SelectorSnapshotPresentation(IAllSnapshotsPresentationProvider allSnapshots);
    public IDataProvider`1<bool> get_SnapshotIsLocked();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<SnapshotPresentationData> get_PresentationData();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Local.Common.MustBeCommon.SelectorSnapshotStateStorageProvider : object {
    private IDataProvider`1<ISelectorSnapshotStateAccessorFactory> myFactoryProvider;
    private IDataProvider`1<ISnapshotStateAccessor> myAccessorProvider;
    private IDataProvider`1<ISnapshotStateAccessor> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.Features.SavedState.ISnapshotStateAccessor>>.Data { get; }
    private IDataProvider`1<ISelectorSnapshotStateAccessorFactory> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.Features.SnapshotSelector.SavedState.ISelectorSnapshotStateAccessorFactory>>.Data { get; }
    public SelectorSnapshotStateStorageProvider(IDataComponentContainers container, ISelectedSnapshotController selectedSnapshotController, ISelectorSnapshotStateAccessorFactoryBuilder factoryBuilder);
    private sealed virtual override IDataProvider`1<ISnapshotStateAccessor> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.Features.SavedState.ISnapshotStateAccessor>>.get_Data();
    private sealed virtual override IDataProvider`1<ISelectorSnapshotStateAccessorFactory> JetBrains.Common.Util.IDataContainer<JetBrains.Common.Util.DataPipes.IDataProvider<JetBrains.DotTrace.Features.SnapshotSelector.SavedState.ISelectorSnapshotStateAccessorFactory>>.get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Local.Common.MustBeCommon.SelectorSubsystemSettingsProvider : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ISubsystemProfile> <CurrentProfileAndUpdates>k__BackingField;
    public IDataProvider`1<ISubsystemProfile> CurrentProfileAndUpdates { get; }
    public SelectorSubsystemSettingsProvider(IDataComponentContainers dataContainer);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ISubsystemProfile> get_CurrentProfileAndUpdates();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Local.Common.MustBeCommon.SnapshotDataContainerManager : object {
    private SnapshotDataComponentBuilder myDataComponentBuilder;
    private ISelectedSnapshotController mySelectedSnapshotController;
    private ISnapshotOrderController mySnapshotOrderController;
    public SnapshotDataContainerManager(IThreading threading, SnapshotDataComponentBuilder dataComponentBuilder, SnapshotOrigin initialSnapshotFile, ISelectedSnapshotController selectedSnapshotController, ISnapshotOrderController snapshotOrderController);
    public sealed virtual void OpenExtraSnapshot(FileSystemPath fileSystemPath);
    public sealed virtual void CloseExtraSnapshot();
    public sealed virtual void ChangeSnapshotsOrder();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Local.Common.MustBeCommon.SnapshotInfoSelector : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ISnapshotInfo> <Data>k__BackingField;
    public IDataProvider`1<ISnapshotInfo> Data { get; }
    public SnapshotInfoSelector(IDataComponentContainers container);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ISnapshotInfo> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Local.Common.MustBeCommon.SnapshotOrderController : object {
    private IDataController`1<SnapshotOrder> myData;
    [CompilerGeneratedAttribute]
private IDataProvider`1<SnapshotOrder> <Provider>k__BackingField;
    public IDataProvider`1<SnapshotOrder> Provider { get; }
    public SnapshotOrderController(IRemotableReference`1<SnapshotOrderProvider> remote, SnapshotOrderProvider local);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<SnapshotOrder> get_Provider();
    public sealed virtual void SetSnapshotInfo(SnapshotOrder order);
    public sealed virtual void ToggleOrder();
}
[SnapshotComponentAttribute("16")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Local.Common.MustBeCommon.SnapshotStateAccessorFactoryBuilder : object {
    public sealed virtual ISelectorSnapshotStateAccessorFactory BuildForSingleSnapshot(ISnapshotStateAccessorFactory single);
    public sealed virtual ISelectorSnapshotStateAccessorFactory BuildForTwoSnapshots(ISnapshotStateAccessorFactory main, ISnapshotStateAccessorFactory second);
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Local.Common.MustBeCommon.ZoneMarker : object {
}
[SnapshotComponentAttribute("0")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Local.Common.SnapshotDataComponentBuilder : object {
    private Lifetime myLifetime;
    private SnapshotDataComponentContainerHost myLocalHost;
    private IRemotableReference`1<SnapshotDataComponentContainerHost> myRemoteHost;
    private LifetimeDefinition[] myContainerLifetimes;
    public SnapshotDataComponentBuilder(Lifetime lifetime, IRemotableReference`1<SnapshotDataComponentContainerHost> remoteHost, SnapshotDataComponentContainerHost localHost);
    public void BuildContainer(int snapshotSlotIndex, SnapshotOrigin data);
    public void CloseContainer(int snapshotSlotIndex);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Local.Performance.PerformanceSelectorPayloadPresenter : SelectorPayloadPresenterBase`1<DotTracePayload> {
    public PerformanceSelectorPayloadPresenter(IDataComponentContainers container, ISelectedSnapshotController selectedSnapshotController, ISnapshotOrderProvider snapshotOrderProvider, PerformancePayloadNormalizerComponent normalizerComponent, IRemotableReference`1<PerformancePayloadNormalizerComponent> remoteNormalizerComponent);
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Local.Performance.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Local.Timeline.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Local.ZoneMarker : object {
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Remote.Common.MustBeCommon.Async.SelectorAsyncMethodsServiceContainer : SelectorAsyncMethodsServiceContainerBase {
    public SelectorAsyncMethodsServiceContainer(IDataComponentContainers dataContainer);
}
[SnapshotComponentAttribute("16")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Remote.Common.MustBeCommon.RemoteSelectorDalPathProviderContainer : ProxyContainer`1<PathProvidersData[]> {
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Remote.Common.MustBeCommon.SelectorAllFuidsContainer : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<IReadOnlyCollection`1<FunctionUID>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<IReadOnlyCollection`1<FunctionUID>>> Data { get; }
    public SelectorAllFuidsContainer(Lifetime lifetime, IDataComponentContainers dataContainer);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<IReadOnlyCollection`1<FunctionUID>>> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Remote.Common.MustBeCommon.SelectorCallTreePresentationSettings : object {
    [CompilerGeneratedAttribute]
private IDataProxy`1<bool> <ShowUnresolvedCallFrames>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProxy`1<bool> <AsyncSupport>k__BackingField;
    public IDataProxy`1<bool> ShowUnresolvedCallFrames { get; }
    public IDataProxy`1<bool> AsyncSupport { get; }
    public SelectorCallTreePresentationSettings(Lifetime lifetime, IDataComponentContainers dataContainer);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProxy`1<bool> get_ShowUnresolvedCallFrames();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProxy`1<bool> get_AsyncSupport();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Remote.Common.MustBeCommon.SelectorFuidsMatcherComponent : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<IFuidsMatcher>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<IFuidsMatcher>> Data { get; }
    public SelectorFuidsMatcherComponent(Lifetime lifetime, IDataComponentContainers dataContainer);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<IFuidsMatcher>> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Remote.Common.MustBeCommon.SelectorFunctionSystemness : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<IAccessor`1<IDataMapper`2<FunctionUIDm, bool>>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<IAccessor`1<IDataMapper`2<FunctionUIDm, bool>>>> Data { get; }
    public SelectorFunctionSystemness(IDataComponentContainers dataContainer, ICacheProviderContainer`1<IFuidsMatcher> fuidsMatcher);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<IAccessor`1<IDataMapper`2<FunctionUIDm, bool>>>> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Remote.Common.MustBeCommon.SelectorMethodViewDataProvider : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<IAccessor`1<IDataMapper`2<FunctionUIDm, Nullable`1<MethodViewData>>>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<IAccessor`1<IDataMapper`2<FunctionUIDm, Nullable`1<MethodViewData>>>>> Data { get; }
    public SelectorMethodViewDataProvider(IDataComponentContainers dataContainer, ICacheProviderContainer`1<IFuidsMatcher> fuidsMatcher);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<IAccessor`1<IDataMapper`2<FunctionUIDm, Nullable`1<MethodViewData>>>>> get_Data();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Remote.Common.MustBeCommon.SelectorModulesDataComponent : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<ModulesData> <Data>k__BackingField;
    public IDataProvider`1<ModulesData> Data { get; }
    public SelectorModulesDataComponent(Lifetime lifetime, IDataComponentContainers dataContainer);
    private static ModulesData CombineModules(ModulesData dal1, ModulesData dal2);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ModulesData> get_Data();
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Remote.Common.MustBeCommon.ZoneMarker : object {
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Remote.Common.RemoteSnapshotFeaturesContainer : SnapshotFeaturesContainerBase {
    public RemoteSnapshotFeaturesContainer(Lifetime lifetime, FullPartCatalogSet fullPartCatalogSet, IComponentContainer parentContainer, ActiveSnapshotZonesList zonesList, ISnapshotDataContainerManager dataContainerManager);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Remote.Performance.Async.PerformanceSelectorAsyncToContinuationCache : SelectorAsyncToContinuationCacheBase`1<CallTreeSectionOffset> {
    public PerformanceSelectorAsyncToContinuationCache(IDataComponentContainers dataContainer);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Remote.Performance.PerformanceAllFuidsFilterProvider : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<IDataMapper`2<FunctionUID, bool>> <Provider>k__BackingField;
    public IDataProvider`1<IDataMapper`2<FunctionUID, bool>> Provider { get; }
    public PerformanceAllFuidsFilterProvider(IDataComponentContainers containers, ISelectedSnapshotProvider selectedSnapshotProvider);
    private static FuncDataMapper`2<FunctionUID, bool> BuildFilter(FuncDataMapper`2<SnapshotDataId, SnapshotMatcher> mapper, SingleSnapshotInfo snapshotInfo);
    private static FuncDataMapper`2<SnapshotDataId, SnapshotMatcher> BuildMasksList(DalContainers data);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IDataMapper`2<FunctionUID, bool>> get_Provider();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Remote.Performance.PerformanceOffsetToSubsystem : SelectorOffsetToSubsystemBase`1<CallTreeSectionOffset> {
    public PerformanceOffsetToSubsystem(IDataComponentContainers dataContainer, SelectorSnapshotsOffsetsRanges`1<CallTreeSectionOffset> converter);
}
[SnapshotComponentAttribute("16")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Remote.Performance.PerformanceRootAccessDataFactoryBuilder : object {
    public sealed virtual ISelectorRootAccessDataFactory`1<CallTreeSectionOffset> BuildForSingleSnapshot(IDalAllRootsCallTreeAccessor`1<CallTreeSectionOffset> single);
    public sealed virtual ISelectorRootAccessDataFactory`1<CallTreeSectionOffset> BuildForTwoSnapshots(DataPipeLifetime pipeLifetime, IDalAllRootsCallTreeAccessor`1<CallTreeSectionOffset> first, IDalAllRootsCallTreeAccessor`1<CallTreeSectionOffset> second, IDataProvider`1<PathProvidersData[]> pathProvider, IDataProvider`1<IFuidsMatcher> fuidsMathcher);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Remote.Performance.PerformanceSelectorCallTreeMeasureDataReader : SelectorCallTreeMeasureDataReaderBase`2<CallTreeSectionOffset, DotTraceFullPayload> {
    public PerformanceSelectorCallTreeMeasureDataReader(IDataComponentContainers dataContainer, SelectorSnapshotsOffsetsRanges`1<CallTreeSectionOffset> converter, IDataContainer`1<DataPipeLifetime> lifetimeContainer);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Remote.Performance.PerformanceSelectorCallTreePayloadSource : SelectorCallTreePayloadSourceBase`2<CallTreeSectionOffset, DotTracePayload> {
    public PerformanceSelectorCallTreePayloadSource(IDataComponentContainers dataContainer, SelectorSnapshotsOffsetsRanges`1<CallTreeSectionOffset> converter, IDataContainer`1<DataPipeLifetime> lifetimeContainer);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Remote.Performance.PerformanceSelectorDfsReaders : SelectorDfsReaders`1<CallTreeSectionOffset> {
    public PerformanceSelectorDfsReaders(IDataComponentContainers dataContainer, SelectorSnapshotsOffsetsRanges`1<CallTreeSectionOffset> offsetsRanges);
}
[SnapshotComponentAttribute("10")]
internal class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Remote.Performance.PerformanceSelectorFlatPayloadsBuilder : SelectorFlatPayloadsBuilder`2<CallTreeSectionOffset, DotTracePayload> {
    public PerformanceSelectorFlatPayloadsBuilder(Lifetime lifetime, IDataComponentContainers dataContainer, ICacheProviderContainer`1<IFuidsMatcher> fuidsMatcher);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Remote.Performance.PerformanceSelectorOffsetToIndexConverter : SelectorOffsetToIndexConverter`1<CallTreeSectionOffset> {
    public PerformanceSelectorOffsetToIndexConverter(IDataComponentContainers dataContainer, SelectorSnapshotsOffsetsRanges`1<CallTreeSectionOffset> offsetsRanges);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Remote.Performance.PerformanceSelectorRootAccessDataProvider : SelectorRootAccessDataProviderBase`1<CallTreeSectionOffset> {
    public PerformanceSelectorRootAccessDataProvider(IDataContainer`1<DataPipeLifetime> pipeLifetimeContainer, IDataComponentContainers container, SelectedSnapshotProvider selectedSnapshotComponent, ISelectorRootAccessDataFactoryBuilder`1<CallTreeSectionOffset> factoryBuilder, RemoteSelectorDalPathProviderContainer pathsProvider, ICacheProviderContainer`1<IFuidsMatcher> fuidsMatcherContainer);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Remote.Performance.PerformanceSnapshotsInfoProviders : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<CallTreeAccessDataInfo`1[]> <AccessDataInfos>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<SingleSnapshotInfo[]> <AllSnapshots>k__BackingField;
    public IDataProvider`1<CallTreeAccessDataInfo`1[]> AccessDataInfos { get; }
    public IDataProvider`1<SingleSnapshotInfo[]> AllSnapshots { get; }
    public PerformanceSnapshotsInfoProviders(IDataComponentContainers container, IProviderContainer`1<ISelectorRootAccessDataFactory`1<CallTreeSectionOffset>> rootAccessData, SelectorPathProviderContainer pathsContainer);
    private static IDataProvider`1<CallTreeAccessDataInfo`1[]> BuildAccessDataInfos(IDataProvider`1<ISelectorRootAccessDataFactory`1<CallTreeSectionOffset>> rootAccessData, IDataProvider`1<PathProvidersData[]> pathsProvider);
    private static IDataProvider`1<SingleSnapshotInfo[]> BuildSnapshotsListProvider(IDataComponentContainers dataContainer);
    private static SingleSnapshotInfo[] BuildSnapshotsList(DalContainers data);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<CallTreeAccessDataInfo`1[]> get_AccessDataInfos();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<SingleSnapshotInfo[]> get_AllSnapshots();
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Remote.Performance.PerformanceSnapshotsOffsetsRanges : SelectorSnapshotsOffsetsRanges`1<CallTreeSectionOffset> {
    public PerformanceSnapshotsOffsetsRanges(IDataComponentContainers dataContainer);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Remote.Performance.PerformanceSubsystemsKeysToDal : object {
    [CompilerGeneratedAttribute]
private IDataProxy`1<SubsystemKeysSet> <SubsystemKeysSet>k__BackingField;
    public IDataProxy`1<SubsystemKeysSet> SubsystemKeysSet { get; }
    public PerformanceSubsystemsKeysToDal(IDataContainer`1<DataPipeLifetime> lifetime, IDataComponentContainers dataContainer);
    [CompilerGeneratedAttribute]
public IDataProxy`1<SubsystemKeysSet> get_SubsystemKeysSet();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0(DalContainers value);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Remote.Performance.PerformanceThreadsMapper : SelectorThreadsMapper`1<CallTreeSectionOffset> {
    public PerformanceThreadsMapper(IDataComponentContainers container);
}
[SnapshotComponentAttribute("10")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Remote.Performance.SystemMethods.PerformanceSelectorBlocksOfSystemMethods : SelectorBlocksOfSystemMethodsBase`1<CallTreeSectionOffset> {
    public PerformanceSelectorBlocksOfSystemMethods(IDataComponentContainers dataContainer);
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Remote.Performance.ZoneMarker : object {
}
[SnapshotComponentAttribute("16")]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Remote.Timeline.TimelineSnapshotMasksProvider : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<IDataMapper`2<FunctionUID, bool>> <Provider>k__BackingField;
    public IDataProvider`1<IDataMapper`2<FunctionUID, bool>> Provider { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IDataMapper`2<FunctionUID, bool>> get_Provider();
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Remote.Timeline.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.Remote.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.DotTrace.Features.SnapshotSelectorComponents.ZoneMarker : object {
}
public interface JetBrains.DotTrace.Features.SourceView.IMeasureNodeProviderContainer {
    public IDataProxy`1<CallTreePath[]> ExcludedNodesProxy { get; }
    public IDataProxy`1<bool> AsyncSupportedProxy { get; }
    public abstract virtual IDataProxy`1<CallTreePath[]> get_ExcludedNodesProxy();
    public abstract virtual IDataProxy`1<bool> get_AsyncSupportedProxy();
}
public interface JetBrains.DotTrace.Features.SourceView.ISourceViewNavigationDataProviderContainer {
}
public class JetBrains.DotTrace.Features.Subsystems.CallTreeFiltrationComponent`2 : object {
    private IDataProvider`1<IDfsAlgorithms`2<TOffset, TKey>> myDfsAlgorithmsProvider;
    private IDataProvider`1<SubsystemsCache`1<TOffset>> mySubsystemCache;
    private ICallTreeRootProvider`1<TOffset> myRootProvider;
    protected CallTreeFiltrationComponent`2(IDataProvider`1<IDfsAlgorithms`2<TOffset, TKey>> dfsAlgorithmsAccessorProvider, IDataProvider`1<SubsystemsCache`1<TOffset>> subsystemCache, ICallTreeRootProvider`1<TOffset> rootProvider);
    public sealed virtual IDataProvider`1<CallTreeStateAndPredicate`1<TOffset>> BuildCallTreeAndSubsystemsPredicate(DataPipeLifetime lifetime, IThreadSwitch`1<CallTreePathWithAccessData`1<TOffset>> callTreeInputAndAccessDataProvider, IThreadSwitch`1<SubsystemKeysSet> subsystemKeysSet);
    public sealed virtual IDataProvider`1<InterruptibleLazy`1<Predicate`1<TOffset>>> BuildSubsystemsPredicate(DataPipeLifetime lifetime, IThreadSwitch`1<SubsystemKeysSet> subsystemKeysSet);
}
public class JetBrains.DotTrace.Features.Subsystems.CallTreeStateAndPredicate`1 : object {
    public CallTreePathState Path;
    public SubsystemKeysSet SubsystemKeys;
    public CallTreePath[] ExcludedPaths;
    public InterruptibleLazy`1<Predicate`1<TOffset>> Predicate;
}
public class JetBrains.DotTrace.Features.Subsystems.Dfs.SubsystemFilterItem : object {
    public SubsystemKey Key;
    public string DisplayName;
    public Color Color;
    public SubsystemFilterItem(SubsystemKey key, string displayName, Color color);
}
public abstract class JetBrains.DotTrace.Features.Subsystems.Dfs.SubsystemsFilterAllItemsProviderBase : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<IEnumerable`1<SubsystemFilterItem>> <Data>k__BackingField;
    public IDataProvider`1<IEnumerable`1<SubsystemFilterItem>> Data { get; }
    protected SubsystemsFilterAllItemsProviderBase(ISubsystemSettingsProvider timelineSubsystemSettings, IDataProvider`1<IReadOnlyDictionary`2<SubsystemIndex, SubsystemUsageInfoData>> subsystemMappingProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IEnumerable`1<SubsystemFilterItem>> get_Data();
}
public interface JetBrains.DotTrace.Features.Subsystems.ICallTreeFiltration`1 {
    public abstract virtual IDataProvider`1<CallTreeStateAndPredicate`1<TOffset>> BuildCallTreeAndSubsystemsPredicate(DataPipeLifetime lifetime, IThreadSwitch`1<CallTreePathWithAccessData`1<TOffset>> callTreeInputAndAccessDataProvider, IThreadSwitch`1<SubsystemKeysSet> subsystemKeysSet);
    public abstract virtual IDataProvider`1<InterruptibleLazy`1<Predicate`1<TOffset>>> BuildSubsystemsPredicate(DataPipeLifetime lifetime, IThreadSwitch`1<SubsystemKeysSet> subsystemKeysSet);
}
public interface JetBrains.DotTrace.Features.Subsystems.ISubsystemMappingProviderContainer {
}
public interface JetBrains.DotTrace.Features.Subsystems.ISubsystemModel {
    public IObservableSet`1<SubsystemKey> ExcludedSubsystems { get; }
    public IObservableSet`1<SubsystemKey> SelectedKeys { get; }
    public abstract virtual IDataProvider`1<ISubsystemProfileResult> BuildSubsystemsFilterNotAppliedResult(IDataProvider`1<ISubsystemProfile> currentProfile);
    public abstract virtual IObservableSet`1<SubsystemKey> get_ExcludedSubsystems();
    public abstract virtual IObservableSet`1<SubsystemKey> get_SelectedKeys();
    public abstract virtual NameWithPayloadAndPercentsModel MergedItemModelGenerator(SubsystemKey key);
}
public class JetBrains.DotTrace.Features.Subsystems.SimpleSubsystemCore.SimpleSubsystemProfileResult`1 : object {
    [CompilerGeneratedAttribute]
private ISubsystemProfile <Profile>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProfileId>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ISubsystemMeasureResult> <Subsystems>k__BackingField;
    [CompilerGeneratedAttribute]
private IItemPayloadBuilder <PayloadBuilder>k__BackingField;
    public ISubsystemProfile Profile { get; }
    public int ProfileId { get; }
    public IEnumerable`1<ISubsystemMeasureResult> Subsystems { get; }
    public IItemPayloadBuilder PayloadBuilder { get; }
    public SimpleSubsystemProfileResult`1(ISubsystemProfile profile, IEnumerable`1<ISimpleSubsystemMeasureResult`1<TPayload>> results, TPayload totalPayload, PayloadType payloadType, IPayloadNormalizer`1<TPayload> normalizer);
    private static ISubsystemMeasureResult NormalizeResult(ISimpleSubsystemMeasureResult`1<TPayload> simpleResult, PayloadType payloadType, IPayloadNormalizer`1<TPayload> payloadNormalizer);
    [CompilerGeneratedAttribute]
public sealed virtual ISubsystemProfile get_Profile();
    [CompilerGeneratedAttribute]
public sealed virtual int get_ProfileId();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<ISubsystemMeasureResult> get_Subsystems();
    [CompilerGeneratedAttribute]
public sealed virtual IItemPayloadBuilder get_PayloadBuilder();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Subsystems.SimpleSubsystemCore.SimpleSubsystemsCalculationEx : object {
    [ExtensionAttribute]
public static PresentablePayloads`2<SubsystemKey, TPayload> ToPresentablePayloads(SimpleSubsystemsCalculation`1<TPayload> calc, IPayloadNormalizer`1<TPayload> payloadNormalizer);
    [ExtensionAttribute]
private static PayloadsMap`2<SubsystemKey, TPayload> ToPayloadsMap(SimpleSubsystemMeasureResultData`1<TPayload> data, IPayloadNormalizer`1<TPayload> payloadNormalizer, PayloadType payloadType);
}
public abstract class JetBrains.DotTrace.Features.Subsystems.SubsystemMappingBase`1 : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<IReadOnlyDictionary`2<SubsystemIndex, SubsystemUsageInfoData>> <Data>k__BackingField;
    public IDataProvider`1<IReadOnlyDictionary`2<SubsystemIndex, SubsystemUsageInfoData>> Data { get; }
    protected SubsystemMappingBase`1(ICacheProviderContainer`1<SubsystemsCache`1<TOffset>> subsystemCacheProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IReadOnlyDictionary`2<SubsystemIndex, SubsystemUsageInfoData>> get_Data();
}
public class JetBrains.DotTrace.Features.SystemMethods.AsyncMethodCallTreeService`1 : object {
    private Dictionary`2<TPtr, TPtr> myContinuationOrAwaitToAsyncMap;
    private OneToListMap`2<TPtr, TPtr> myAsyncToAwaitMap;
    private OneToListMap`2<TPtr, TPtr> myAsyncToContinuationMap;
    public void AddAsyncToContinuation(TPtr asyncMethodPtr, TPtr continuationPtr);
    public void AddAsyncToAwait(TPtr asyncMethodPtr, TPtr awaitPtr);
    public sealed virtual IEnumerable`1<TPtr> GetContinuationPtrs(TPtr asyncMethodPtr);
    public sealed virtual IEnumerable`1<TPtr> GetAwaitPtrs(TPtr asyncMethodPtr);
    public sealed virtual Nullable`1<TPtr> GetAsyncMethodPtr(TPtr continuationOrAwaitPtr);
}
public class JetBrains.DotTrace.Features.SystemMethods.AsyncPtrToContinuationPtrCache`1 : object {
    private static ILogger Log;
    private static ConditionalLog CLog;
    [CompilerGeneratedAttribute]
private IDataProvider`1<ICacheSource`1<IAsyncMethodCallTreeService`1<TOffset>>> <Data>k__BackingField;
    public IDataProvider`1<ICacheSource`1<IAsyncMethodCallTreeService`1<TOffset>>> Data { get; }
    protected AsyncPtrToContinuationPtrCache`1(IDataContainer`1<DataPipeLifetime> dataPipeLifetimeContainer, IDataProvider`1<ICacheSource`1<CommonDfsLogic`2<TOffset, FunctionUID>>> commonDfsLogicCacheSource, IDataProvider`1<ICacheSource`1<IEnumerable`1<TOffset>>> rawRootsPointersCacheSource, IDataProvider`1<ICacheSource`1<IAsyncMethodService>> asyncMethodServiceCacheSource, IProviderContainer`1<ICacheStorageManager> cacheStorageManager, IMemoryMappedStorageManager cacheStorage);
    private static AsyncPtrToContinuationPtrCache`1();
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.SystemMethods.AsyncPtrToContinuationPtrCache`1/<FindAllAsyncPairs>d__3")]
private static IEnumerable`1<AsyncContinuationAwaitTrio<TOffset>> FindAllAsyncPairs(IEnumerable`1<TOffset> roots, CommonDfsLogic`2<TOffset, FunctionUID> commonDfsLogic, IAsyncMethodService asyncService);
    private static IEnumerable`1<Pair`2<OffsetAndKey`2<TOffset, FunctionUID>, OffsetAndKey`2<TOffset, FunctionUID>>> FindFuidToAsyncPtrPairs(CommonDfsLogic`2<TOffset, FunctionUID> commonDfsLogic, IEnumerable`1<TOffset> roots, Predicate`1<FunctionUID> isAsync, FunctionUID functionUid);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ICacheSource`1<IAsyncMethodCallTreeService`1<TOffset>>> get_Data();
}
public class JetBrains.DotTrace.Features.SystemMethods.BlocksOfSystemMethodsCache`1 : object {
    private static ConditionalLog ourConditionalLog;
    private static int BlockSize;
    [CompilerGeneratedAttribute]
private IDataProvider`1<ISkipBlocksOfSystemMethods`1<TOffset>> <Data>k__BackingField;
    public IDataProvider`1<ISkipBlocksOfSystemMethods`1<TOffset>> Data { get; }
    protected BlocksOfSystemMethodsCache`1(IDataContainer`1<DataPipeLifetime> dataPipeLifetimeContainer, IDataProvider`1<ICacheSource`1<IAccessor`1<IDataMapper`2<FunctionUID, bool>>>> functionSystemness, IDataProvider`1<ICacheSource`1<IDfsReaders`1<TOffset>>> dfsReadersCacheSource, IDataProvider`1<ICacheSource`1<IEnumerable`1<TOffset>>> rawRootsCacheSource, IDataProvider`1<ICacheSource`1<IOffsetToIndexConverter`1<TOffset>>> converterProvider, IProviderContainer`1<ICacheStorageManager> cacheStorageManager, IMemoryMappedStorageManager cacheStorage);
    private static BlocksOfSystemMethodsCache`1();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ISkipBlocksOfSystemMethods`1<TOffset>> get_Data();
}
[LocalizableAttribute("False")]
public class JetBrains.DotTrace.Features.SystemMethods.ContinuationPtrAnalyzer`1 : object {
    private static ILogger Log;
    private bool IsEnabled { get; }
    protected ContinuationPtrAnalyzer`1(Lifetime lifetime, IDataProvider`1<ICacheSource`1<IDfsRawRoots`1<TOffset>>> rawRootsCacheSource, IDataProvider`1<ICacheSource`1<IAsyncMethodService>> asyncMethodServiceCacheSource, IDataProvider`1<IAccessor`1<ICallTreeReader`1<TOffset>>> callTreeReaderContainer, IAccessor`1<IMetadataManager> metadataAccessor);
    private static ContinuationPtrAnalyzer`1();
    private bool get_IsEnabled();
    private static void PrintCallStack(StringBuilder sb, ICallTreeReader`1<TOffset> reader, TOffset c, IMetadataManager metadata);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.SystemMethods.SystemnessHelper : object {
    [ExtensionAttribute]
public static IAccessor`1<IDataMapper`2<FunctionUID, bool>> BuildSystemnessAccessor(IAccessor`1<IDataMapper`2<FunctionUIDm, bool>> accessorMapper, IFuidsMatcher matcher);
    [ExtensionAttribute]
public static IAccessor`1<IDataMapper`2<FunctionUIDm, bool>> BuildTransparent(IAccessor`1<IDataMapper`2<FunctionUID, bool>> input);
}
[IsReadOnlyAttribute]
public class JetBrains.DotTrace.Features.TableDescriptor.PreviewSortDescriptor`2 : ValueType {
    public IComparer`1<WithPayload`2<TKey, TPayload>> Comparer;
    public PreviewSortDescriptor`2(Comparison`1<WithPayload`2<TKey, TPayload>> comparison);
}
public class JetBrains.DotTrace.Features.TableDescriptor.PreviewTableDescriptor`2 : object {
    public IDataProvider`1<PreviewSortDescriptor`2<TKey, TPayload>> Comparer;
    public Func`2<IDataProvider`1<PayloadType>, ColumnHeadersViewModel> CreateColumnHeaders;
    public Func`2<TKey, IDataProvider`1<FilterPresentationModel>> KeyPresenter;
}
public class JetBrains.DotTrace.Features.Timeline.CallStacks.EventScanner : object {
    private static ILogger ourLog;
    private IEventTreeExplorer myExplorer;
    private ulong myRecreateLimitTimestamp;
    private ulong myRequestedTimestamp;
    private IEnumerator`1<EventOrChunk> myEnumerator;
    private bool myEndReached;
    private Predicate`1<ChunkInfo> myEnterChunk;
    private bool myHasStarted;
    private int myEnumeratorRecreations;
    private int myEnumeratorMoves;
    private object System.Collections.IEnumerator.Current { get; }
    public EventOrChunk Current { get; }
    public bool BeforeStart { get; }
    public bool AtEnd { get; }
    public EventScanner(IEventTreeExplorer explorer, Predicate`1<ChunkInfo> enterChunk);
    private static EventScanner();
    private void RecreateEnumerator(ulong timestamp);
    private void Move();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual EventOrChunk get_Current();
    public sealed virtual void GoTo(ulong tick);
    public sealed virtual bool get_BeforeStart();
    public sealed virtual void Dispose();
    public sealed virtual bool get_AtEnd();
}
public interface JetBrains.DotTrace.Features.Timeline.CallStacks.IEventScanner {
    public bool BeforeStart { get; }
    public abstract virtual void GoTo(ulong tick);
    public abstract virtual bool get_BeforeStart();
}
public static class JetBrains.DotTrace.Features.Timeline.CallTreeAggregation : object {
    private static ILogger ourLogger;
    private static CallTreeAggregation();
    public static void AggregateTotalPayloads(PayloadsMap`2<T, TPayload> presentablePayloads, IAccessor`1<ICallTreeReader`1<T>> treeReader, IComparer`1<T> comparer, IDataStorage`2<T, TPayload> ownPayloadsStorage, IDataStorage`2<T, TPayload> totalPayloadsStorage, IExecutionController controller, Predicate`1<T> additionalFilter);
    private static void AggregateTotalPayloads(IExecutionController controller, PayloadsMap`2<TOffset, TPayload> ownPayloads, Func`2<TOffset, TOffset> getParent, Predicate`1<TOffset> isRootPointer, IComparer`1<TOffset> comparer, IDataStorage`2<TOffset, TPayload> ownResult, IDataStorage`2<TOffset, TPayload> totalResult, Predicate`1<TOffset> additionalFilter);
}
public class JetBrains.DotTrace.Features.Timeline.Collections.SortedModelRangeSet : object {
    private List`1<List`1<ModelRange>> myLists;
    private List`1<ModelRange> myCurrentList;
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Timeline.Collections.SortedModelRangeSet/<Enumerate>d__3")]
private IEnumerable`1<ModelRange> Enumerate(IList`1<ModelRange> list, ulong startPoint);
    private static int Find(IList`1<ModelRange> list, ModelRange target);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Timeline.Collections.SortedModelRangeSet/<GetRanges>d__5")]
public IEnumerable`1<ModelRange> GetRanges(ModelRange range);
    public IEnumerable`1<ModelRange> EnumerateRanges(ulong startTick);
    public void Find(ulong point, IList`1<ModelRange> result);
    public void Add(ModelRange range);
    public void Clear();
    private IEnumerable`1<ModelRange> EnumerateSourceRanges();
    public sealed virtual IEnumerator`1<ModelRange> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class JetBrains.DotTrace.Features.Timeline.CommonStructures.EventFiltrationState : ValueType {
    public FiltrationMode Mode;
    public EventTypeUID EventTypeUID;
    public bool Global { get; }
    public static EventFiltrationState NoFilters { get; }
    public LayerEvent LayerEvent { get; }
    public int LayerId { get; }
    public int EventId { get; }
    public static EventFiltrationState Complex { get; }
    public EventFiltrationState(FiltrationMode mode, EventTypeUID eventTypeUid);
    public bool get_Global();
    public static EventFiltrationState get_NoFilters();
    public LayerEvent get_LayerEvent();
    public int get_LayerId();
    public int get_EventId();
    public static EventFiltrationState get_Complex();
    public static bool op_Equality(EventFiltrationState left, EventFiltrationState right);
    public static bool op_Inequality(EventFiltrationState left, EventFiltrationState right);
    public sealed virtual bool Equals(EventFiltrationState other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.DotTrace.Features.Timeline.CommonStructures.FiltrationBuilderResult : object {
    public IDataProvider`1<string> FiltrationSummary;
    public ProgressProvider FiltrationOperation;
    public IDataProvider`1<PresentablePayloads`2<ThreadId, LongPayload>> ThreadPayloads;
}
public enum JetBrains.DotTrace.Features.Timeline.CommonStructures.FiltrationMode : Enum {
    public int value__;
    public static FiltrationMode NoFilters;
    public static FiltrationMode EventType;
    public static FiltrationMode Complex;
}
[DebuggerDisplayAttribute("{Thread} {Item}")]
public class JetBrains.DotTrace.Features.Timeline.CommonStructures.WithThread`1 : ValueType {
    public ThreadId Thread;
    public T Item;
    public WithThread`1(ThreadId thread, T item);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.DotTrace.Features.Timeline.DfsNodeDataStorage`1 : object {
    private T myNotInitializedValue;
    private ChunkList`1<T> myData;
    private IEqualityComparer`1<T> myComparer;
    public T Item { get; public set; }
    public DfsNodeDataStorage`1(IEqualityComparer`1<T> equalityComparer, T notInitializedValue);
    public sealed virtual T get_Item(DfsNodePtr id);
    public sealed virtual void set_Item(DfsNodePtr id, T value);
    public sealed virtual bool TryGetValue(DfsNodePtr id, T& value);
    public sealed virtual void Clear();
    public IBatchReader`2<DfsNodePtr, T> BatchReader();
}
public static class JetBrains.DotTrace.Features.Timeline.EventCollector.EventLogSorter : object {
    public static IDataProvider`1<Comparison`1<EventNodeData>> Create(IDataProvider`1<int> index, IDataProvider`1<ListSortDirection> direction);
    private static Comparison`1<EventNodeData> GetSortComparison(int index);
    private static Comparison`1<EventNodeData> CreateEventDataComparison();
    private static int CompareBuffers(Char[] buffer1, int length1, Char[] buffer2, int length2);
}
public class JetBrains.DotTrace.Features.Timeline.EventCollector.EventTableDetailsPresenter : EventPresenterBase`2<FormattedEventDetails, int> {
    private DirectMappedCache`2<string, string> myPayloadCache;
    private IMetadataReader myMetadataReader;
    private StringBuilder myStringBuilder;
    public EventTableDetailsPresenter(IEventDetailsParser`1<int> detailsParser, IMetadataReader metadataReader);
    private string InternString(string s);
    protected virtual FormattedEventDetails FileIo(FileIoDetails details);
    protected virtual FormattedEventDetails HttpRequest(HttpRequestDetails details);
    protected virtual FormattedEventDetails SqlRequest(SqlRequestDetails details);
    protected virtual FormattedEventDetails Exception(ExceptionDetails details);
    protected virtual FormattedEventDetails Jit(JitDetails e);
    protected virtual FormattedEventDetails CustomEvent(CustomEventDetails details);
    protected virtual FormattedEventDetails DebugOutput(DebugOutputDetails details);
    private string ToMethodWithParams(FunctionInfo info);
}
public class JetBrains.DotTrace.Features.Timeline.EventCollector.FormattedEventDetails : ValueType {
    public string Payload;
    public string MainProperty;
    public string SecondaryProperty;
}
public interface JetBrains.DotTrace.Features.Timeline.EventCollector.IEventTableDetailsPresenter {
}
public class JetBrains.DotTrace.Features.Timeline.EventCollector.ListPropertyReader : object {
    private IList`1<ulong> myData;
    private IList`1<StringId> myStrings;
    private PropertyOrders myOrders;
    public ListPropertyReader(IList`1<ulong> data, IList`1<StringId> strings, PropertyOrders orders);
    public sealed virtual ulong GetValue(int values, EventProperties property);
    public sealed virtual StringId GetStringValue(int values, EventProperties property);
    public sealed virtual String[] GetEnumValues(EventProperties property);
}
public class JetBrains.DotTrace.Features.Timeline.EventCollector.ListPropertyWriter : object {
    private LogStoragePropertyExtractor myExtractor;
    private PropertyOrders myOrders;
    public ListPropertyWriter(LogStoragePropertyExtractor extractor, PropertyOrders orders);
    public int Add(EventInfo info, IList`1<ulong> data, IList`1<StringId> strings);
}
public class JetBrains.DotTrace.Features.Timeline.EventDetails.Parsers.AllocationTickDetails : ValueType {
    public ulong SizeBytes;
    public int HeapId;
    public String[] AllHeaps;
    public string Heap { get; }
    public UnitValue`1<SizeUnits> Size { get; }
    public string get_Heap();
    public UnitValue`1<SizeUnits> get_Size();
}
public class JetBrains.DotTrace.Features.Timeline.EventDetails.Parsers.CustomEventDetails : ValueType {
    public StringId EventNamePtr;
    public StringId RelatedObjectPtr;
    public IStringReader Reader;
    public string EventName { get; }
    public string RelatedObject { get; }
    public string get_EventName();
    public string get_RelatedObject();
}
public class JetBrains.DotTrace.Features.Timeline.EventDetails.Parsers.DebugOutputDetails : ValueType {
    public StringId StringPtr;
    public IStringReader Reader;
    public string DebugOutputString { get; }
    public string get_DebugOutputString();
}
public class JetBrains.DotTrace.Features.Timeline.EventDetails.Parsers.EventDetailsParser`1 : object {
    private IPropertyExtractor`1<T> myExtractor;
    private IStringReader myReader;
    public EventDetailsParser`1(IPropertyExtractor`1<T> extractor, IStringReader reader);
    private String[] GetEnumValues(EventProperties property);
    private StringId GetStringValue(T values, EventProperties property);
    private ulong GetValue(T values, EventProperties property);
    public sealed virtual FileIoDetails FileIo(T values);
    public sealed virtual ExceptionDetails Exception(T values);
    public sealed virtual GcDetails Gc(T values);
    public sealed virtual RunningDetails Running(T values);
    public sealed virtual AllocationTickDetails AllocationTick(T values);
    public sealed virtual HttpRequestDetails HttpRequest(T values);
    public sealed virtual SqlRequestDetails SqlRequest(T values);
    public sealed virtual DebugOutputDetails DebugOutput(T values);
    public sealed virtual JitDetails Jit(T values);
    public sealed virtual CustomEventDetails CustomEvent(T values);
    public sealed virtual NativeAllocationDetails NativeAllocation(T values);
}
public abstract class JetBrains.DotTrace.Features.Timeline.EventDetails.Parsers.EventPresenterBase`2 : object {
    private IEventDetailsParser`1<TData> myDetailsParser;
    public EventPresenterBase`2(IEventDetailsParser`1<TData> detailsParser);
    protected virtual TResult FileIo(FileIoDetails details);
    protected virtual TResult Exception(ExceptionDetails details);
    protected virtual TResult SqlRequest(SqlRequestDetails details);
    protected virtual TResult HttpRequest(HttpRequestDetails details);
    protected virtual TResult AllocationTick(AllocationTickDetails details);
    protected virtual TResult Running(RunningDetails details);
    protected virtual TResult Gc(GcDetails details);
    protected virtual TResult DebugOutput(DebugOutputDetails details);
    protected virtual TResult CustomEvent(CustomEventDetails details);
    protected virtual TResult Jit(JitDetails e);
    protected virtual TResult NativeAllocation(NativeAllocationDetails e);
    protected virtual TResult Default(KnownEventTypes eventType);
    public sealed virtual TResult Get(KnownEventTypes eventType, TData data);
}
public enum JetBrains.DotTrace.Features.Timeline.EventDetails.Parsers.EventProperties : Enum {
    public int value__;
    public static EventProperties FileName;
    public static EventProperties FileOpSize;
    public static EventProperties FileDirection;
    public static EventProperties ExceptionType;
    public static EventProperties ExceptionMessage;
    public static EventProperties GcDepth;
    public static EventProperties AllocationSize;
    public static EventProperties AllocationHeap;
    public static EventProperties RunningCpuCore;
    public static EventProperties HttpRequestMethod;
    public static EventProperties HttpRequestUrl;
    public static EventProperties SqlCommandText;
    public static EventProperties SqlConnectionString;
    public static EventProperties JitMethod;
    public static EventProperties DebugOutputString;
    public static EventProperties NativeAllocationSize;
    public static EventProperties CustomEventName;
    public static EventProperties CustomEventRelatedObject;
}
public class JetBrains.DotTrace.Features.Timeline.EventDetails.Parsers.ExceptionDetails : ValueType {
    public StringId TypePtr;
    public StringId MessagePtr;
    public IStringReader Reader;
    public string Type { get; }
    public string Message { get; }
    public string ShortTypeName { get; }
    public string get_Type();
    public string get_Message();
    public string get_ShortTypeName();
}
public class JetBrains.DotTrace.Features.Timeline.EventDetails.Parsers.FileIoDetails : ValueType {
    public StringId PathPtr;
    public IODirection Direction;
    public ulong OperationSizeBytes;
    public IStringReader Reader;
    public string Path { get; }
    public string FileName { get; }
    public UnitValue`1<SizeUnits> OperationSize { get; }
    public string get_Path();
    public string get_FileName();
    public UnitValue`1<SizeUnits> get_OperationSize();
}
public class JetBrains.DotTrace.Features.Timeline.EventDetails.Parsers.GcDetails : ValueType {
    public int Depth;
}
public class JetBrains.DotTrace.Features.Timeline.EventDetails.Parsers.HttpRequestDetails : ValueType {
    public StringId MethodPtr;
    public StringId UrlPtr;
    public IStringReader Reader;
    public string Method { get; }
    public string Url { get; }
    public string get_Method();
    public string get_Url();
}
public interface JetBrains.DotTrace.Features.Timeline.EventDetails.Parsers.IEventDetailsParser`1 {
    public abstract virtual FileIoDetails FileIo(T values);
    public abstract virtual ExceptionDetails Exception(T values);
    public abstract virtual GcDetails Gc(T values);
    public abstract virtual RunningDetails Running(T values);
    public abstract virtual NativeAllocationDetails NativeAllocation(T values);
    public abstract virtual AllocationTickDetails AllocationTick(T values);
    public abstract virtual HttpRequestDetails HttpRequest(T values);
    public abstract virtual SqlRequestDetails SqlRequest(T values);
    public abstract virtual DebugOutputDetails DebugOutput(T values);
    public abstract virtual JitDetails Jit(T values);
    public abstract virtual CustomEventDetails CustomEvent(T values);
}
public interface JetBrains.DotTrace.Features.Timeline.EventDetails.Parsers.IEventPresenter`2 {
    public abstract virtual TResult Get(KnownEventTypes eventType, TData data);
}
public enum JetBrains.DotTrace.Features.Timeline.EventDetails.Parsers.IODirection : Enum {
    public int value__;
    public static IODirection Read;
    public static IODirection Write;
}
public interface JetBrains.DotTrace.Features.Timeline.EventDetails.Parsers.IPropertyExtractor`1 {
    public abstract virtual ulong GetValue(T values, EventProperties property);
    public abstract virtual StringId GetStringValue(T values, EventProperties property);
    public abstract virtual String[] GetEnumValues(EventProperties property);
}
public class JetBrains.DotTrace.Features.Timeline.EventDetails.Parsers.JitDetails : ValueType {
    public FunctionUID Fuid;
}
public class JetBrains.DotTrace.Features.Timeline.EventDetails.Parsers.LogStoragePropertyExtractor : object {
    private Func`2[] myReaders;
    private Func`2[] myStringReaders;
    private String[][] myEnumValues;
    private Boolean[] myIsStringProperty;
    private ILogStorage myLogStorage;
    public LogStoragePropertyExtractor(ILogStorage logStorage);
    private void Register(EventProperties property, KnownEventTypes eventType, int propertyId);
    private void RegisterEnum(EventProperties property, KnownEventTypes eventType, int propertyId);
    private void RegisterString(EventProperties property, KnownEventTypes eventType, int propertyId);
    public sealed virtual StringId GetStringValue(UInt64[] values, EventProperties property);
    public sealed virtual String[] GetEnumValues(EventProperties property);
    public sealed virtual ulong GetValue(UInt64[] values, EventProperties property);
    public bool IsStringProperty(EventProperties property);
}
public class JetBrains.DotTrace.Features.Timeline.EventDetails.Parsers.NativeAllocationDetails : ValueType {
    public ulong SizeBytes;
    public UnitValue`1<SizeUnits> Size { get; }
    public UnitValue`1<SizeUnits> get_Size();
}
public class JetBrains.DotTrace.Features.Timeline.EventDetails.Parsers.RunningDetails : ValueType {
    public int CpuCore;
}
public class JetBrains.DotTrace.Features.Timeline.EventDetails.Parsers.SqlRequestDetails : ValueType {
    public StringId CommandTextPtr;
    public StringId ConnectionStringPtr;
    public IStringReader Reader;
    public string CommandText { get; }
    public string ConnectionString { get; }
    public string get_CommandText();
    public string get_ConnectionString();
}
public interface JetBrains.DotTrace.Features.Timeline.EventDetails.ThreadBar.IFilteredRangesMap {
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Timeline.EventEnumerationEx : object {
    [ExtensionAttribute]
public static IEnumerable`1<CroppedEvent> GetEvents(IEnumerable`1<ThreadRange> threadRanges, Func`2<ThreadId, IEventLog> logProvider);
    [ExtensionAttribute]
public static IEnumerable`1<CroppedEvent> GetEvents(IEnumerable`1<ThreadRange> threadRanges, Func`2<ThreadId, IEventLog> logProvider, TimelineStatistics statisticsToCheck);
    [ExtensionAttribute]
public static IEnumerable`1<CroppedEvent> GetEventsOfType(ILogStorage logStorage, IEnumerable`1<ThreadRange> threadRanges, int layerId, TimelineStatistics statistics);
    [ExtensionAttribute]
public static IEnumerable`1<CroppedEvent> GetEventsOfType(IEventLog log, ModelRange range, TimelineStatistics statistics);
    [ExtensionAttribute]
public static IEnumerable`1<CroppedEvent> GetEventsOfType(IEnumerable`1<ThreadRange> threadRanges, Func`2<ThreadId, IEventLog> logProvider, TimelineStatistics statisticsToCheck);
    [ExtensionAttribute]
public static IEnumerable`1<CroppedEvent> GetEvents(IEnumerable`1<ThreadRange> threadRanges, Func`2<ThreadId, IEventLog> logProvider, Accumulator statisticsToCheck);
    [ExtensionAttribute]
private static IEnumerable`1<CroppedEvent> GetEventsCore(IEnumerable`1<ThreadRange> threadRanges, Func`2<ThreadId, IEventLog> logProvider, Predicate`1<ChunkInfo> skipChunk);
    [ExtensionAttribute]
public static EnumerationListener`1<TB> Convert(EnumerationListener`1<TA> l, Func`2<TB, TA> converter);
    [ExtensionAttribute]
public static EnumerationListener`2<TB, TArg> Convert(EnumerationListener`2<TA, TArg> l, Func`2<TB, TA> converter);
    [ExtensionAttribute]
public static IEnumerable`1<CroppedEventOrChunk> GetChunksOrEvents(IEnumerable`1<ThreadRange> threadRanges, Func`2<ThreadId, IEventLog> logProvider);
    [ExtensionAttribute]
public static IEnumerable`1<CroppedEventOrChunk> GetChunksOrEvents(IEnumerable`1<ThreadRange> threadRanges, Func`2<ThreadId, IEventLog> logProvider, TimelineStatistics statisticsToCheck);
    [ExtensionAttribute]
public static IEnumerable`1<CroppedEventOrChunk> GetChunksOrEvents(IEnumerable`1<ThreadRange> threadRanges, Func`2<ThreadId, IEventLog> logProvider, Accumulator statisticsToCheck);
    [ExtensionAttribute]
public static IEnumerable`1<CroppedEventOrChunk> GetChunksOrEvents(IEnumerable`1<ThreadRange> threadRanges, Func`2<ThreadId, IEventLog> logProvider, Predicate`1<ChunkInfo> skipChunk);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Timeline.EventEnumerationEx/<GetChunksOrEventsCore>d__13")]
[ExtensionAttribute]
private static IEnumerable`1<CroppedEventOrChunk> GetChunksOrEventsCore(IEnumerable`1<ThreadRange> threadRanges, Func`2<ThreadId, IEventLog> logProvider, bool onlyEvents, Predicate`1<ChunkInfo> skipChunkPredicate);
    [ExtensionAttribute]
public static void SubscribeEnumerate(IDataProvider`1<IEnumerable`1<T>> itemsProvider, Lifetime lifetime);
    private static void OnEnumerate(IEnumerable`1<T> value);
    [ExtensionAttribute]
public static IDataProvider`1<IEnumerable`1<ScreenRangeInt>> Invert(IDataProvider`1<IEnumerable`1<ScreenRangeInt>> provider, IViewport viewport);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Timeline.EventEnumerationEx/<Invert>d__17")]
[ExtensionAttribute]
public static IEnumerable`1<ScreenRangeInt> Invert(IEnumerable`1<ScreenRangeInt> value, ScreenRangeInt total);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Timeline.EventEnumerationEx/<Invert>d__18")]
[ExtensionAttribute]
public static IEnumerable`1<ModelRange> Invert(IEnumerable`1<ModelRange> value, ModelRange total);
    public static IEnumerable`1<ScreenRangeInt> Union(IEnumerable`1<ScreenRangeInt> src1, IEnumerable`1<ScreenRangeInt> src2);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Timeline.EventEnumerationEx/<EnumerateUnion>d__20")]
private static IEnumerable`1<ScreenRangeInt> EnumerateUnion(IEnumerable`1<ScreenRangeInt> src1, IEnumerable`1<ScreenRangeInt> src2);
    [ExtensionAttribute]
public static IDataProvider`1<IEnumerable`1<MarkerScreenRange>> MergeRanges(IDataProvider`1<IEnumerable`1<MarkerScreenRange>> ranges, int threshold, IViewport viewport);
    [ExtensionAttribute]
private static void MergeInto(MarkerScreenRange range, MarkerScreenRange& target);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Timeline.EventEnumerationEx/<GetBorders>d__23")]
[ExtensionAttribute]
public static IEnumerable`1<int> GetBorders(IEnumerable`1<ScreenRangeInt> ranges);
    [ExtensionAttribute]
public static IEnumerable`1<ScreenRangeInt> Intersect(IEnumerable`1<ScreenRangeInt> src1, ScreenRangeInt src2);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Timeline.EventEnumerationEx/<Intersect>d__25")]
[ExtensionAttribute]
public static IEnumerable`1<ScreenRangeInt> Intersect(IEnumerable`1<ScreenRangeInt> src1, IEnumerable`1<ScreenRangeInt> src2);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Timeline.EventEnumerationEx/<MergeRanges>d__26")]
[ExtensionAttribute]
public static IEnumerable`1<MarkerScreenRange> MergeRanges(IEnumerable`1<MarkerScreenRange> ranges, int threshold, IViewport viewport);
    [ExtensionAttribute]
public static IEnumerable`1<ThreadRange> MergeRanges(IEnumerable`1<CroppedEvent> events);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Timeline.EventEnumerationEx/<MergeRanges>d__28")]
[ExtensionAttribute]
public static IEnumerable`1<ScreenRangeInt> MergeRanges(IEnumerable`1<ScreenRangeInt> ranges);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Timeline.EventEnumerationEx/<MergeRanges>d__29")]
[ExtensionAttribute]
public static IEnumerable`1<ThreadRange> MergeRanges(IEnumerable`1<ThreadRange> events);
    [ExtensionAttribute]
public static bool HasStatistics(ILogStorage logStorage, int layerId, TimelineStatistics statistics);
    [ExtensionAttribute]
public static ulong ComputeStatistics(ILogStorage logStorage, int layerId, TimelineStatistics statistics, IEnumerable`1<ThreadId> threads, ModelRange range, IExecutionController controller);
    [ExtensionAttribute]
public static ulong ComputeStatistics(ILogStorage logStorage, int layerId, TimelineStatistics statistics, IEnumerable`1<ThreadRange> ranges, IExecutionController controller);
    [ExtensionAttribute]
public static UInt64[] ComputeStatistics(ILogStorage logStorage, int layerId, TimelineStatistics[] statistics, IEnumerable`1<ThreadRange> ranges, IExecutionController controller);
    private static ulong ComputeStatisticsCore(Func`2<ThreadId, IEventLog> getLog, TimelineStatistics statistics, IEnumerable`1<ThreadRange> ranges, IExecutionController controller);
    private static UInt64[] ComputeStatisticsCore(Func`2<ThreadId, IEventLog> getLog, TimelineStatistics[] statistics, IEnumerable`1<ThreadRange> ranges, IExecutionController controller);
    private static void AccumulateStatisticsCore(Func`2<ThreadId, IEventLog> getLog, Accumulator[] accumulators, IEnumerable`1<ThreadRange> ranges, IExecutionController controller);
    private static void AccumulateStatisticsCore(Func`2<ThreadId, IEventLog> getLog, Accumulator accumulator, IEnumerable`1<ThreadRange> ranges, IExecutionController controller);
    [ExtensionAttribute]
public static void AccumulateStatistics(IEventLog eventLog, ModelRange range, Accumulator accumulator, IExecutionController controller);
    [ExtensionAttribute]
public static ulong ComputeStatistics(IEventLog log, ModelRange range, TimelineStatistics statistics, IExecutionController controller);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Timeline.EventEnumerationEx/<ExcludeEvents>d__40")]
private static IEnumerable`1<ThreadRange> ExcludeEvents(ILogStorage logStorage, IEnumerable`1<ThreadId> threads, ModelRange range, int layerId, TimelineStatistics stats, IExecutionController controller);
    [ExtensionAttribute]
public static IEnumerable`1<ThreadRange> GetThreadLifetimeRanges(ILogStorage logStorage, IEnumerable`1<ThreadId> threads, ModelRange range, IExecutionController controller);
    [ExtensionAttribute]
public static ulong GetThreadLifetimes(ILogStorage logStorage, IEnumerable`1<ThreadRange> ranges, IExecutionController controller);
    [ExtensionAttribute]
public static void AccumulateStatistics(ILogStorage logStorage, int layerId, ThreadId thread, ModelRange range, Accumulator accumulator, IExecutionController controller);
}
public static class JetBrains.DotTrace.Features.Timeline.Filtration.Builders.ThreadPayloadsBuilder : object {
    private static RecycledInputData FillRecycledInput(InputData input, RecycledInputData recycled);
    public static IDataProvider`1<PresentablePayloads`2<ThreadId, LongPayload>> Build(DataPipeLifetime lifetime, IDataProvider`1<Pair`2<TimelineStatistics, EventFiltrationState>> statisticsWithState, IDataProvider`1<PayloadType> payloadPresenter, IDataProvider`1<ModelRange> rangeProvider, IDataProvider`1<IEnumerable`1<ThreadId>> allThreadsProvider, ILogStorage logStorage, IDataProvider`1<PresentablePayloads`2<ThreadId, LongPayload>> outputThreadPayloadsProvider);
    private static void CalculateThreadPayloads(ModelRange range, EventFiltrationState state, IEnumerable`1<ThreadId> allThreads, ILogStorage logStorage, TimelineStatistics statistics, PayloadAggregationResult`2<ThreadId, LongPayload> payloads, IExecutionController controller);
    private static void CalculateThreadPayloads(IEnumerable`1<ThreadId> allThreads, TimelineStatistics statistics, ILogStorage logStorage, PayloadAggregationResult`2<ThreadId, LongPayload> payloads, ModelRange range, int layerId, bool invert, IExecutionController executionController);
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.FilterDefinitions.AdditionalFilterDefinitionData`1 : object {
    public IFilterDefinition`1<TItem> ParentFilter;
    public ExpanderKey ExpanderKey;
    public Int32[] EventTypeDependencies;
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.FilterDefinitions.AwaitPayload : ValueType {
    public DfsNodePtr CallStack;
    public LongPayload Payload;
}
public static class JetBrains.DotTrace.Features.Timeline.Filtration.FilterDefinitions.CallTreeFilterDefinition : object {
    private static CallStackFiltrationPipelineOutputs BuildLocal(DataPipeLifetime lifetime, Func`2<EventInfo, DfsNodePtr> callStackExtractor, Func`2<EventInfo, AwaitPayload> awaitExtractor, IDataProvider`1<CallTreeStateAndPredicate`1<DfsNodePtr>> combinedStateAndPredicateProvider, ILogStorage logStorage, IDataProvider`1<bool> areAwaitsEnabled, IDataProvider`1<bool> readFromSamples);
    private static PayloadsMap`2<TKey, LongPayload> Merge(PayloadsMap`2<TKey, LongPayload> m1, PayloadsMap`2<TKey, LongPayload> m2);
    private static IReadOnlyCollection`1<T> MergeDistinct(IReadOnlyCollection`1<T> k1, IReadOnlyCollection`1<T> k2);
    private static IFiltrationListenerProvider`2<FiltrationItem`1<EventInfo>, StartFiltrationArgs> ConvertToReadFromSamples(IFiltrationListenerProvider`2<FiltrationItem`1<DfsNodePtr>, StartFiltrationArgs> listenerProvider, Func`2<EventInfo, DfsNodePtr> callStackExtractor, ILogStorage logStorage);
    private static IFiltrationListenerProvider`2<FiltrationItem`1<EventInfo>, StartFiltrationArgs> Converter(IFiltrationListenerProvider`2<FiltrationItem`1<DfsNodePtr>, StartFiltrationArgs> listenerProvider, Func`2<EventInfo, AwaitPayload> awaitExtractor, ILogStorage logStorage);
    private static IRemotableReference`1<CallStackFiltrationPipelineOutputs> BuildLocalOrRemote(IRemotableReference`1<IDataProvider`1<CallTreeStateAndPredicate`1<DfsNodePtr>>> callTreeStateAndPredicate, IRemotablePair`1<DataPipeLifetime> remoteLifetime, IRemotableReference`1<ILogStorage> logStorage, Func`2<EventInfo, DfsNodePtr> remoteCallStackExtractor, Func`2<EventInfo, AwaitPayload> remoteAwaitExtractor, IRemotableReference`1<IDataProvider`1<bool>> areAwaitsAvailable, IRemotableReference`1<IDataProvider`1<bool>> readFromSamples);
    public static DataFilter`1<EventInfo> Instantiate(FilterInput input, FilterInstantiationContext context, Predicate`1<EventInfo> isApplicable);
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.FilterDefinitions.EnumFilterDefinition`2 : object {
    private Func`2<TItem, TKey> myKeyExtractor;
    private Func`2<TKey, FilterPresentationModel> myFilteredValuePresenter;
    public PreviewTableDescriptor`2<TKey, LongPayload> PreviewTableDescriptor;
    private Nullable`1<EventTypeFilterContext`1<TKey>> myEventTypeFilterContext;
    private IDataProvider`1<IPayloadPresenters`1<LongPayload>> myPresenter;
    [CanBeNullAttribute]
private ISavedStateListValueMonitor`1<TKey> myIntentionalStateChangeMonitor;
    [CompilerGeneratedAttribute]
private IDataProvider`1<IEnumerable`1<TKey>> <AlwaysVisibleKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterId <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private AdditionalFilterDefinitionData`1<TItem> <AdditionalData>k__BackingField;
    public IDataProvider`1<IEnumerable`1<TKey>> AlwaysVisibleKeys { get; public set; }
    public FilterType FilterType { get; }
    public FilterId Id { get; }
    public AdditionalFilterDefinitionData`1<TItem> AdditionalData { get; public set; }
    public EnumFilterDefinition`2(FilterId filterId, Func`2<TItem, TKey> keyExtractor, Nullable`1<EventTypeFilterContext`1<TKey>> eventTypeFilterContext, IDataProvider`1<IPayloadPresenters`1<LongPayload>> presenter, ISavedStateListValueMonitor`1<TKey> intentionalStateChangeMonitor);
    [CompilerGeneratedAttribute]
public IDataProvider`1<IEnumerable`1<TKey>> get_AlwaysVisibleKeys();
    [CompilerGeneratedAttribute]
public void set_AlwaysVisibleKeys(IDataProvider`1<IEnumerable`1<TKey>> value);
    public void SetFilteredValuePresenter(Func`2<TKey, string> func);
    public void SetFilteredValuePresenter(Func`2<TKey, FilterPresentationModel> func);
    public sealed virtual FilterType get_FilterType();
    [CompilerGeneratedAttribute]
public sealed virtual FilterId get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual AdditionalFilterDefinitionData`1<TItem> get_AdditionalData();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AdditionalData(AdditionalFilterDefinitionData`1<TItem> value);
    public sealed virtual ITimelineInstantiatedFilter`1<TItem> Instantiate(FilterInstantiationContext context, Predicate`1<TItem> isApplicable, IDataProvider`1<bool> isAvailable);
    [CompilerGeneratedAttribute]
private void <Instantiate>b__22_0(bool active);
}
public static class JetBrains.DotTrace.Features.Timeline.Filtration.FilterDefinitions.EnumFilters : object {
    public static EnumFilterDefinition`2<TKey, TItem> Create(FilterId filterId, Func`2<TItem, TKey> keyExtractor, IDataProvider`1<IPayloadPresenters`1<LongPayload>> presenter, ISavedStateListValueMonitor`1<TKey> intentionalStateChangeMonitor, Nullable`1<EventTypeFilterContext`1<TKey>> keyToEventType);
    public static EnumFilterDefinition`2<int, EventInfo> CreateForEventType(int layerId, bool global, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadPresenter, ISavedStateListValueMonitor`1<int> intentionalStateChangeMonitor);
    public static EnumFilterDefinition`2<ulong, EventInfo> FromProperty(int eventId, IEventPropertyDescriptor property, Func`2<ulong, string> namePresenter, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadPresenter, ISavedStateListValueMonitor`1<ulong> intentionalStateChangeMonitor, Func`2<ulong, ulong> keyConverter);
    public static EnumFilterDefinition`2<ulong, EventInfo> FromProperty(int eventId, IEventPropertyDescriptor property, Func`2<ulong, FilterPresentationModel> namePresenter, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadPresenter, ISavedStateListValueMonitor`1<ulong> intentionalStateChangeMonitor, Func`2<ulong, ulong> keyConverter);
    private static Func`2<EventInfo, TKey> CreateKeyExtractor(Func`2<ulong, TKey> keyConverter, int propertyIndex);
    public static EnumFilterDefinition`2<TKey, EventInfo> FromProperty(int eventId, IEventPropertyDescriptor property, Func`2<ulong, TKey> keyConverter, Func`2<TKey, FilterPresentationModel> namePresenter, IDataProvider`1<IPayloadPresenters`1<LongPayload>> presenter, ISavedStateListValueMonitor`1<TKey> intentionalStateChangeMonitor);
    public static IFilterDefinition`1<EventInfo> CreateYesNoForProperty(int eventId, IEventPropertyDescriptor property, Func`2<bool, FilterPresentationModel> namePresenter, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadsPresenter, IProviderContainerMonitor`1<Nullable`1<bool>> intentionalStateChangeMonitor);
    public static IFilterDefinition`1<EventInfo> CreateYesNo(int yesEventId, Nullable`1<int> noEventId, int layerId, bool global, Func`2<bool, string> namePresenter, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadsPresenter, IProviderContainerMonitor`1<Nullable`1<bool>> intentionalStateChangeMonitor);
    public static IFilterDefinition`1<EventInfo> CreateYesNo(int yesEventId, Nullable`1<int> noEventId, int layerId, bool global, Func`2<bool, FilterPresentationModel> namePresenter, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadsPresenter, IProviderContainerMonitor`1<Nullable`1<bool>> intentionalStateChangeMonitor);
    public static IFilterDefinition`1<TItem> CreateYesNo(FilterId filterId, Predicate`1<TItem> predicate, Func`2<bool, FilterPresentationModel> namePresenter, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadsPresenter, Nullable`1<EventTypeUID> yesEventData, Nullable`1<EventTypeUID> noEventData, IProviderContainerMonitor`1<Nullable`1<bool>> intentionalStateChangeMonitor);
}
public static class JetBrains.DotTrace.Features.Timeline.Filtration.FilterDefinitions.FilterDefinition : object {
    public static ToggleFilterDefinition`1<EventInfo> CreateToggle(string name, EventTypeUID eventTypeUid, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadPresenter, IProviderContainerMonitor`1<bool> intentionalStateChangeMonitor);
    public static RadioButtonFilterDefinition`1<EventInfo> CreateRadioButton(string name, EventTypeUID eventTypeUid, FilterRadioGroup radioGroup, PayloadDescriptor payloadDescriptor, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadPresenter);
    public static RadioButtonFilterDefinition`1<EventInfo> CreateDefaultRadioButton(string name, FilterRadioGroup radioGroup, Nullable`1<EventTypeUID> eventUid, Predicate`1<EventInfo> predicate, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadPresenter, IDataProvider`1<ITickTimeConverter> tickTimeConverter);
    public static IFilterDefinition`1<EventInfo> CreateFromProperty(int eventId, IEventPropertyDescriptor property, PropertyResolvers pr, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadsPresenter, Func`2<ulong, FilterPresentationModel> namePresenter, IFiltersMonitor filtersMonitor);
    private static IFilterDefinition`1<EventInfo> EnumFilterFromProperty(int eventId, IEventPropertyDescriptor property, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadPresenter, IFiltersMonitor filtersMonitor);
    private static Func`2<bool, FilterPresentationModel> CreateBooleanPropertyPresenter(string yesText, string noText);
    private static Func`2<bool, FilterPresentationModel> CreateBooleanPropertyPresenter(IEventPropertyDescriptor property);
    private static Func`2<ulong, FilterPresentationModel> CreatePropertyValuePresenter(IEventPropertyDescriptor property, PropertyResolvers pr);
    private static string PresentCpuCore(ulong a);
    private static FilterPresentationModel CreateFileNameViewModel(PropertyResolvers propertyResolvers, StringId pathStringId);
    private static FilterPresentationModel CreateUrlViewModel(PropertyResolvers propertyResolvers, StringId urlStringId);
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.FilterDefinitions.FilterInstantiationContext : ValueType {
    public IRemotablePair`1<DataPipeLifetime> Lifetime;
    public IRemoteCommunicator Comm;
    public IRemotableReference`1<ILogStorage> LogStorage;
    public ISnapshotStateStorageProvider StateStorageProvider;
}
public enum JetBrains.DotTrace.Features.Timeline.Filtration.FilterDefinitions.FilterType : Enum {
    public int value__;
    public static FilterType Enum;
    public static FilterType CallTree;
    public static FilterType AnalysisSubject;
    public static FilterType Intervals;
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Timeline.Filtration.FilterDefinitions.Helpers : object {
    [ExtensionAttribute]
public static IRemotableReference`1<EventTypeContextForToggleFilter> CreateQuickLoadingContextForToggle(FilterInstantiationContext context, EventTypeUID eventTypeUid, PayloadDescriptor payloadDescriptor);
    [ExtensionAttribute]
public static IRemotableReference`1<EventTypeContextForEnumFilter`1<TKey>> CreateQuickLoadingContextForEnum(FilterInstantiationContext context, EventTypeFilterContext`1<TKey> filterContext);
}
public interface JetBrains.DotTrace.Features.Timeline.Filtration.FilterDefinitions.IFilterDefinition`1 {
    public AdditionalFilterDefinitionData`1<TItem> AdditionalData { get; public set; }
    public FilterType FilterType { get; }
    public FilterId Id { get; }
    public abstract virtual AdditionalFilterDefinitionData`1<TItem> get_AdditionalData();
    public abstract virtual void set_AdditionalData(AdditionalFilterDefinitionData`1<TItem> value);
    public abstract virtual ITimelineInstantiatedFilter`1<TItem> Instantiate(FilterInstantiationContext context, Predicate`1<TItem> isApplicable, IDataProvider`1<bool> isAvailable);
    public abstract virtual FilterType get_FilterType();
    public abstract virtual FilterId get_Id();
}
internal abstract class JetBrains.DotTrace.Features.Timeline.Filtration.FilterDefinitions.InstantiatedBase`1 : object {
    private IFilterDefinition`1<TItem> myDefinition;
    private ClearableDataFilter`1<TItem> myFilter;
    [CompilerGeneratedAttribute]
private IDataSignal <ProgressSource>k__BackingField;
    public Int32[] EventTypeDependencies { get; }
    public FilterId Id { get; }
    public FilterId ParentFilterId { get; }
    public ExpanderKey ExpanderKey { get; }
    public IDataProvider`1<IEnumerable`1<AppliedFilterValueModel>> FilteredValues { get; }
    public IDataProvider`1<bool> IsAvailable { get; }
    public IDataSignal ProgressSource { get; protected set; }
    public DataFilter`1<TItem> Filter { get; }
    protected InstantiatedBase`1(IFilterDefinition`1<TItem> definition, ClearableDataFilter`1<TItem> filter);
    public sealed virtual Int32[] get_EventTypeDependencies();
    public sealed virtual FilterId get_Id();
    public sealed virtual FilterId get_ParentFilterId();
    public sealed virtual ExpanderKey get_ExpanderKey();
    public sealed virtual IDataProvider`1<IEnumerable`1<AppliedFilterValueModel>> get_FilteredValues();
    public sealed virtual IDataProvider`1<bool> get_IsAvailable();
    [CompilerGeneratedAttribute]
public sealed virtual IDataSignal get_ProgressSource();
    [CompilerGeneratedAttribute]
protected void set_ProgressSource(IDataSignal value);
    public abstract virtual void AcceptVisitor(IInstantiatedFilterVisitor builder);
    public sealed virtual DataFilter`1<TItem> get_Filter();
    public sealed virtual void Clear();
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.FilterDefinitions.InstantiatedThreadsFilter : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<IEnumerable`1<AppliedFilterValueModel>> <FilteredValues>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataSignal <ProgressSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<PresentablePayloads`2<ThreadId, LongPayload>> <Payloads>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<IPayloadPresenters`1<LongPayload>> <PayloadPresenter>k__BackingField;
    [CompilerGeneratedAttribute]
private IRemotableReference`1<IThreadSwitch`1<PresentablePayloads`2<ThreadId, LongPayload>>> <PayloadSwitch>k__BackingField;
    [CompilerGeneratedAttribute]
private PreviewTableDescriptor`2<ThreadId, LongPayload> <TableDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservableSet`1<ThreadId> <SelectedKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<IEnumerable`1<ThreadId>> <AllKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<ThreadId, IDataProvider`1<FilterPresentationModel>> <FilteredValuePresenter>k__BackingField;
    [CompilerGeneratedAttribute]
private IRemotableReference`1<IDataProvider`1<IFiltrationListenerProvider`2<FiltrationItem`1<ThreadId>, StartFiltrationArgs>>> <PayloadListener>k__BackingField;
    public FilterId Id { get; }
    public FilterId ParentFilterId { get; }
    public ExpanderKey ExpanderKey { get; }
    public IDataProvider`1<bool> IsAvailable { get; }
    public Int32[] EventTypeDependencies { get; }
    public IDataProvider`1<IEnumerable`1<AppliedFilterValueModel>> FilteredValues { get; }
    public IDataSignal ProgressSource { get; private set; }
    public IDataProvider`1<PresentablePayloads`2<ThreadId, LongPayload>> Payloads { get; private set; }
    public IDataProvider`1<IPayloadPresenters`1<LongPayload>> PayloadPresenter { get; }
    public IRemotableReference`1<IThreadSwitch`1<PresentablePayloads`2<ThreadId, LongPayload>>> PayloadSwitch { get; }
    public PreviewTableDescriptor`2<ThreadId, LongPayload> TableDescriptor { get; }
    public IObservableSet`1<ThreadId> SelectedKeys { get; }
    public IDataProvider`1<IEnumerable`1<ThreadId>> AllKeys { get; }
    public Func`2<ThreadId, IDataProvider`1<FilterPresentationModel>> FilteredValuePresenter { get; }
    public IRemotableReference`1<IDataProvider`1<IFiltrationListenerProvider`2<FiltrationItem`1<ThreadId>, StartFiltrationArgs>>> PayloadListener { get; }
    public InstantiatedThreadsFilter(FilterInstantiationContext context, IDataProvider`1<IEnumerable`1<ThreadId>> allThreads, IObservableSet`1<ThreadId> selectedThreads, PreviewTableDescriptor`2<ThreadId, LongPayload> threadsPreviewTableDescriptor, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadPresenter, Func`2<ThreadId, FilterPresentationModel> filteredValuePresenter);
    public sealed virtual FilterId get_Id();
    public sealed virtual FilterId get_ParentFilterId();
    public sealed virtual ExpanderKey get_ExpanderKey();
    public sealed virtual IDataProvider`1<bool> get_IsAvailable();
    public sealed virtual void Clear();
    public sealed virtual void AcceptVisitor(IInstantiatedFilterVisitor builder);
    public sealed virtual Int32[] get_EventTypeDependencies();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IEnumerable`1<AppliedFilterValueModel>> get_FilteredValues();
    [CompilerGeneratedAttribute]
public sealed virtual IDataSignal get_ProgressSource();
    [CompilerGeneratedAttribute]
private void set_ProgressSource(IDataSignal value);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<PresentablePayloads`2<ThreadId, LongPayload>> get_Payloads();
    [CompilerGeneratedAttribute]
private void set_Payloads(IDataProvider`1<PresentablePayloads`2<ThreadId, LongPayload>> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IPayloadPresenters`1<LongPayload>> get_PayloadPresenter();
    [CompilerGeneratedAttribute]
public sealed virtual IRemotableReference`1<IThreadSwitch`1<PresentablePayloads`2<ThreadId, LongPayload>>> get_PayloadSwitch();
    [CompilerGeneratedAttribute]
public sealed virtual PreviewTableDescriptor`2<ThreadId, LongPayload> get_TableDescriptor();
    [CompilerGeneratedAttribute]
public sealed virtual IObservableSet`1<ThreadId> get_SelectedKeys();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IEnumerable`1<ThreadId>> get_AllKeys();
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<ThreadId, IDataProvider`1<FilterPresentationModel>> get_FilteredValuePresenter();
    [CompilerGeneratedAttribute]
public IRemotableReference`1<IDataProvider`1<IFiltrationListenerProvider`2<FiltrationItem`1<ThreadId>, StartFiltrationArgs>>> get_PayloadListener();
    public void SetPayloadsProvider(IDataProvider`1<PresentablePayloads`2<ThreadId, LongPayload>> payloads);
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.FilterDefinitions.RadioButtonFilterDefinition`1 : object {
    private string myName;
    [NotNullAttribute]
private Predicate`1<TItem> myPredicate;
    private Nullable`1<EventTypeUID> myEventTypeUid;
    private KnownEventTypes myEnablingEventTypes;
    private FilterRadioGroup myRadioGroup;
    private PayloadDescriptor myPayloadDescriptor;
    private IDataProvider`1<IPayloadPresenters`1<LongPayload>> myPayloadPresenter;
    [CanBeNullAttribute]
private IDataProvider`1<ITickTimeConverter> myTickTimeConverter;
    [CompilerGeneratedAttribute]
private bool <HighlightCheckedState>k__BackingField;
    [CompilerGeneratedAttribute]
private AdditionalFilterDefinitionData`1<TItem> <AdditionalData>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterId <Id>k__BackingField;
    public bool HighlightCheckedState { get; public set; }
    public AdditionalFilterDefinitionData`1<TItem> AdditionalData { get; public set; }
    public FilterType FilterType { get; }
    public FilterId Id { get; }
    public RadioButtonFilterDefinition`1(string name, Predicate`1<TItem> predicate, Nullable`1<EventTypeUID> eventTypeUid, FilterRadioGroup radioGroup, FilterId id, PayloadDescriptor payloadDescriptor, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadPresenter, IDataProvider`1<ITickTimeConverter> tickTimeConverter);
    [CompilerGeneratedAttribute]
public bool get_HighlightCheckedState();
    [CompilerGeneratedAttribute]
public void set_HighlightCheckedState(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual AdditionalFilterDefinitionData`1<TItem> get_AdditionalData();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AdditionalData(AdditionalFilterDefinitionData`1<TItem> value);
    public sealed virtual ITimelineInstantiatedFilter`1<TItem> Instantiate(FilterInstantiationContext context, Predicate`1<TItem> isApplicable, IDataProvider`1<bool> isAvailable);
    public sealed virtual FilterType get_FilterType();
    [CompilerGeneratedAttribute]
public sealed virtual FilterId get_Id();
    [CompilerGeneratedAttribute]
private bool <Instantiate>b__17_0(FilterId v);
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.FilterDefinitions.ToggleDataFilter`1 : ClearableDataFilter`1<TItem> {
    public IThreadSwitch`1<PresentablePayload`1<LongPayload>> Payload;
    public ToggleDataFilter`1(IThreadSwitch`1<PresentablePayload`1<LongPayload>> payload, IDataProvider`1<IEnumerable`1<AppliedFilterValueModel>> filteredValues, IDataProvider`1<bool> isAvailable, IDataProvider`1<bool> isEnabled, FilterId id, IRemotableReference`1<FilterModel`1<TItem>> filterModel);
}
public static class JetBrains.DotTrace.Features.Timeline.Filtration.FilterDefinitions.ToggleDataFilters : object {
    private static IRemotableReference`1<FilterModelWithSwitch`2<TItem, PresentablePayload`1<LongPayload>>> CreateRemoteFilterModelForToggle(Predicate`1<TItem> itemPredicate, Predicate`1<TItem> isApplicable, IDataProvider`1<bool> isAvailable, IDataProvider`1<bool> isEnabled, FilterId filterId, IRemoteCommunicator comm, IRemotableReference`1<EventTypeContextForToggleFilter> quickLoadingContext);
    private static FilterModelWithSwitch`2<TItem, PresentablePayload`1<LongPayload>> CreateLocalFilterModelForToggle(Predicate`1<TItem> itemPredicate, Predicate`1<TItem> isApplicable, IDataProvider`1<bool> isAvailable, IDataProvider`1<bool> isEnabled, EventTypeContextForToggleFilter eventTypeContext, FilterId filterId);
    public static ToggleDataFilter`1<TItem> Create(Predicate`1<TItem> itemPredicate, IRemoteCommunicator comm, IDataProvider`1<bool> isAvailable, Predicate`1<TItem> isApplicable, IDataProvider`1<bool> isEnabled, Action clear, string filteredValueHeader, FilterId id, IRemotableReference`1<EventTypeContextForToggleFilter> quickLoadingContext);
    public static ToggleDataFilter`1<TItem> Create(Predicate`1<TItem> itemPredicate, IRemoteCommunicator comm, IDataProvider`1<bool> isAvailable, Predicate`1<TItem> isApplicable, IDataProvider`1<bool> isEnabled, Action clear, FilterPresentationModel filteredValueHeader, FilterId id, IRemotableReference`1<EventTypeContextForToggleFilter> quickLoadingContext);
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.FilterDefinitions.ToggleFilterDefinition`1 : object {
    private string myName;
    [NotNullAttribute]
private Predicate`1<TItem> myPredicate;
    private IReadOnlyCollection`1<int> myEnablingEventTypes;
    private EventTypeUID myEventTypeUid;
    private IDataProvider`1<IPayloadPresenters`1<LongPayload>> myPayloadPresenter;
    private IProviderContainerMonitor`1<bool> myIntentionalStateChangeMonitor;
    [CompilerGeneratedAttribute]
private AdditionalFilterDefinitionData`1<TItem> <AdditionalData>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterId <Id>k__BackingField;
    public AdditionalFilterDefinitionData`1<TItem> AdditionalData { get; public set; }
    public FilterType FilterType { get; }
    public FilterId Id { get; }
    public ToggleFilterDefinition`1(string name, Predicate`1<TItem> predicate, EventTypeUID eventTypeUid, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadPresenter, IProviderContainerMonitor`1<bool> intentionalStateChangeMonitor);
    [CompilerGeneratedAttribute]
public sealed virtual AdditionalFilterDefinitionData`1<TItem> get_AdditionalData();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AdditionalData(AdditionalFilterDefinitionData`1<TItem> value);
    public sealed virtual ITimelineInstantiatedFilter`1<TItem> Instantiate(FilterInstantiationContext context, Predicate`1<TItem> isApplicable, IDataProvider`1<bool> isAvailable);
    public sealed virtual FilterType get_FilterType();
    [CompilerGeneratedAttribute]
public sealed virtual FilterId get_Id();
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.FilterDefinitions.YesNoRadioFilterDefinition`1 : object {
    private Predicate`1<TItem> myPredicate;
    private Func`2<bool, FilterPresentationModel> myNamePresenter;
    private Nullable`1<EventTypeUID> myYesEvent;
    private Nullable`1<EventTypeUID> myNoEvent;
    private IDataProvider`1<IPayloadPresenters`1<LongPayload>> myPayloadsPresenter;
    private IProviderContainerMonitor`1<Nullable`1<bool>> myIntentionalStateChangeMonitor;
    [CompilerGeneratedAttribute]
private AdditionalFilterDefinitionData`1<TItem> <AdditionalData>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterId <Id>k__BackingField;
    public AdditionalFilterDefinitionData`1<TItem> AdditionalData { get; public set; }
    public FilterType FilterType { get; }
    public FilterId Id { get; }
    public YesNoRadioFilterDefinition`1(FilterId filterId, Predicate`1<TItem> predicate, Func`2<bool, FilterPresentationModel> namePresenter, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadsPresenter, Nullable`1<EventTypeUID> yesEvent, Nullable`1<EventTypeUID> noEvent, IProviderContainerMonitor`1<Nullable`1<bool>> intentionalStateChangeMonitor);
    [CompilerGeneratedAttribute]
public sealed virtual AdditionalFilterDefinitionData`1<TItem> get_AdditionalData();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AdditionalData(AdditionalFilterDefinitionData`1<TItem> value);
    private IRemotableReference`1<EventTypeContextForEnumFilter`1<bool>> CreateEventTypeContext(FilterInstantiationContext context);
    private static Func`2<bool, Nullable`1<int>> CreateKeyToEventType(Nullable`1<EventTypeUID> yes, Nullable`1<EventTypeUID> no);
    private static Func`2<int, bool> CreateEventTypeToKey(Nullable`1<EventTypeUID> yes);
    public sealed virtual ITimelineInstantiatedFilter`1<TItem> Instantiate(FilterInstantiationContext context, Predicate`1<TItem> isApplicable, IDataProvider`1<bool> isAvailable);
    private Func`2<TItem, bool> CreateKeyExtractor();
    public sealed virtual FilterType get_FilterType();
    [CompilerGeneratedAttribute]
public sealed virtual FilterId get_Id();
}
public interface JetBrains.DotTrace.Features.Timeline.Filtration.IComputedFilteredThreadRangesProvider {
}
public interface JetBrains.DotTrace.Features.Timeline.Filtration.IEnabledEventTypesProvider {
    public IDataProvider`1<Int32[]> EnabledEventTypes { get; }
    public abstract virtual IDataProvider`1<Int32[]> get_EnabledEventTypes();
}
public interface JetBrains.DotTrace.Features.Timeline.Filtration.IFiltrationStateProvider {
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.CachedFiltrationListenerProvider`3 : object {
    private IDataProxy`1<IFiltrationState> myFiltrationState;
    [CompilerGeneratedAttribute]
private IThreadSwitch`1<TResult> <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<EnumerationListener`2<TItem, TArg>> <ListenerProvider>k__BackingField;
    public IThreadSwitch`1<TResult> Result { get; }
    public IDataProvider`1<EnumerationListener`2<TItem, TArg>> ListenerProvider { get; }
    public CachedFiltrationListenerProvider`3(IFilterCache`1<TResult> cache, EnumerationListenerWithThreadSwitch`3<TItem, TArg, WithFiltrationState`1<TResult>> listenerWithSwitch, Func`2<IFiltrationState, IFiltrationState> stateReducer, DirectFilterLoader`1<TResult> directFilterLoader);
    [CompilerGeneratedAttribute]
public sealed virtual IThreadSwitch`1<TResult> get_Result();
    public sealed virtual void SetFiltrationStateProvider(IDataProvider`1<IFiltrationState> provider);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<EnumerationListener`2<TItem, TArg>> get_ListenerProvider();
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.ClearableDataFilter`1 : DataFilter`1<T> {
    public IDataProvider`1<IEnumerable`1<AppliedFilterValueModel>> FilteredValues;
    public IDataProvider`1<bool> IsAvailable;
    public ClearableDataFilter`1(IDataProvider`1<IEnumerable`1<AppliedFilterValueModel>> filteredValues, IDataProvider`1<bool> isAvailable, FilterId id, IDataProvider`1<bool> isEnabled, IRemotableReference`1<FilterModel`1<T>> filterModel);
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.DataFilter`1 : object {
    public IRemotableReference`1<FilterModel`1<T>> FilterModel;
    public FilterId Id;
    public IDataProvider`1<bool> IsEnabled;
    public DataFilter`1(FilterId id, IDataProvider`1<bool> isEnabled, IRemotableReference`1<FilterModel`1<T>> filterModel);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.DataFilterEx : object {
    [ExtensionAttribute]
private static IDataProvider`1<PredicateAndListener`1<T>> ToCombinedProvider(IDataProvider`1<Predicate`1<T>> predicate, IDataProvider`1<PayloadItemsListener`1<T>> listener, Predicate`1<T> isApplicable);
    [ExtensionAttribute]
public static IDataProvider`1<Predicate`1<TB>> TransformPredicate(IDataProvider`1<Predicate`1<TA>> provider, Func`2<TB, TA> converter);
    [ExtensionAttribute]
public static IDataProvider`1<Predicate`1<TB>> TransformPredicate(IDataProvider`1<Predicate`1<TA>> provider, IDataProvider`1<Func`2<TB, TA>> converter);
    [ExtensionAttribute]
public static IRemotableReference`1<IDataProvider`1<IFiltrationListenerProvider`2<FiltrationItem`1<T>, StartFiltrationArgs>>> GetListener(IRemotableReference`1<FilterModel`1<T>> model);
    [ExtensionAttribute]
[NotNullAttribute]
public static IDataProvider`1<Predicate`1<T>> ToFilter(IDataProvider`1<IReadOnlyCollection`1<T>> provider);
    [ExtensionAttribute]
public static IDataProvider`1<IEnumerable`1<T>> Filter(IDataProvider`1<IEnumerable`1<T>> valuesProvider, IDataProvider`1[] filterProviders);
    [ExtensionAttribute]
public static void Clear(ClearableDataFilter`1<T> filter);
    [ExtensionAttribute]
public static RemoteFilterModelWithLocalSwitch`2<TItem, TResult> ToLocal(IRemotableReference`1<FilterModelWithSwitch`2<TItem, TResult>> value);
    [ExtensionAttribute]
public static RemoteFilterModelWithLocalSwitch`2<TItem, TResult> CastToRemote(FilterModelWithSwitch`2<TItem, TResult> value);
    [ExtensionAttribute]
public static RemoteFilterModelWithLocalSwitch`2<TItem, TResult> SwitchLocal(IRemotableReference`1<FilterModelWithSwitch`2<TItem, TResult>> remote);
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.DelegatedFiltrationListenerProvider`2 : object {
    [NotNullAttribute]
private Action`1<IDataProvider`1<IFiltrationState>> mySetState;
    [CompilerGeneratedAttribute]
private IDataProvider`1<EnumerationListener`2<TItem, TArg>> <ListenerProvider>k__BackingField;
    public IDataProvider`1<EnumerationListener`2<TItem, TArg>> ListenerProvider { get; }
    public DelegatedFiltrationListenerProvider`2(Action`1<IDataProvider`1<IFiltrationState>> setState, IDataProvider`1<EnumerationListener`2<TItem, TArg>> listenerProvider);
    public sealed virtual void SetFiltrationStateProvider(IDataProvider`1<IFiltrationState> provider);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<EnumerationListener`2<TItem, TArg>> get_ListenerProvider();
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.DirectFilterLoader`1 : MulticastDelegate {
    public DirectFilterLoader`1(object object, IntPtr method);
    public virtual IAsyncDataProvider`1<WithFiltrationState`1<TResult>> Invoke(IFiltrationState state);
    public virtual IAsyncResult BeginInvoke(IFiltrationState state, AsyncCallback callback, object object);
    public virtual IAsyncDataProvider`1<WithFiltrationState`1<TResult>> EndInvoke(IAsyncResult result);
}
public static class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.DirectFilterLoaders : object {
    public static DirectFilterLoader`1<PresentablePayloads`2<TKey, LongPayload>> ForEnum(EventTypeContextForEnumFilter`1<TKey> eventTypeContext);
    [CanBeNullAttribute]
public static DirectFilterLoader`1<PresentablePayload`1<LongPayload>> ForToggle(EventTypeContextForToggleFilter eventTypeContext);
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.EnumDataFilter`2 : ClearableDataFilter`1<TItem> {
    public IObservableSet`1<TKey> SelectedKeys;
    public IRemotableReference`1<IThreadSwitch`1<PresentablePayloads`2<TKey, LongPayload>>> PayloadSwitch;
    public EnumDataFilter`2(IObservableSet`1<TKey> selectedKeys, IDataProvider`1<IEnumerable`1<AppliedFilterValueModel>> filteredValues, IDataProvider`1<bool> isAvailable, FilterId id, IDataProvider`1<bool> isEnabled, IRemotableReference`1<FilterModel`1<TItem>> filterModel, IRemotableReference`1<IThreadSwitch`1<PresentablePayloads`2<TKey, LongPayload>>> payloadSwitch);
}
public static class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.EnumDataFilters : object {
    public static EnumDataFilter`2<TKey, TItem> CreateEnumDataFilter(Predicate`1<TItem> isApplicable, IDataProvider`1<bool> isAvailable, IObservableSet`1<TKey> selectedKeys, Func`2<TItem, TKey> keyExtractor, Func`2<TKey, FilterPresentationModel> filteredValuePresenter, IRemoteCommunicator comm, FilterId id, IRemotableReference`1<EventTypeContextForEnumFilter`1<TKey>> eventTypeAccessor);
    public static FilterModelWithSwitch`2<TItem, PresentablePayloads`2<TKey, LongPayload>> CreateLocalFilterModelForEnum(Predicate`1<TItem> isApplicable, IDataProvider`1<bool> isAvailable, IDataProvider`1<IReadOnlyCollection`1<TKey>> selectedKeysProvider, Func`2<TItem, TKey> keyExtractor, FilterId filterId, EventTypeContextForEnumFilter`1<TKey> loadingEventTypeContext);
    private static IRemotableReference`1<FilterModelWithSwitch`2<TItem, PresentablePayloads`2<TKey, LongPayload>>> CreateRemoteFilterModelForEnum(Predicate`1<TItem> isApplicable, IDataProvider`1<bool> isAvailable, IDataProvider`1<IReadOnlyCollection`1<TKey>> selectedKeysProvider, Func`2<TItem, TKey> keyExtractor, FilterId filterId, IRemotableReference`1<EventTypeContextForEnumFilter`1<TKey>> eventTypeAccessor, IRemoteCommunicator comm);
    public static IRemotableReference`1<FilterModelWithSwitch`2<TItem, PresentablePayloads`2<TKey, LongPayload>>> CreateEnumFilterModelAndSwitch(Predicate`1<TItem> isApplicable, IDataProvider`1<bool> isAvailable, IDataProvider`1<IReadOnlyCollection`1<TKey>> selectedKeysProvider, Func`2<TItem, TKey> keyExtractor, FilterId filterId, IRemotableReference`1<EventTypeContextForEnumFilter`1<TKey>> eventTypeAccessor, IRemoteCommunicator comm);
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.EventTypeContextForEnumFilter`1 : object {
    public ILogStorage LogStorage;
    public Func`2<int, TKey> EventTypeToKey;
    public Func`2<TKey, Nullable`1<int>> KeyToEventType;
    public int LayerId;
    public DataPipeLifetime Lifetime;
    public bool IsGlobal;
    public EventTypeContextForEnumFilter`1(Func`2<int, TKey> eventTypeToKey, ILogStorage logStorage, DataPipeLifetime lifetime, int layerId, bool isGlobal, Func`2<TKey, Nullable`1<int>> keyToEventType);
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.EventTypeContextForToggleFilter : object {
    public ILogStorage LogStorage;
    public EventTypeUID EventType;
    public DataPipeLifetime Lifetime;
    public PayloadDescriptor PayloadDescriptor;
    public EventTypeContextForToggleFilter(EventTypeUID eventType, ILogStorage logStorage, DataPipeLifetime lifetime, PayloadDescriptor payloadDescriptor);
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.EventTypeFilterContext`1 : ValueType {
    private SerializableDelegate`1<Func`2<TKey, Nullable`1<int>>> myKeyToEventType;
    private SerializableDelegate`1<Func`2<int, TKey>> myEventTypeToKey;
    public int LayerId;
    public bool IsGlobal;
    public EventTypeFilterContext`1(int layerId, bool isGlobal, Func`2<TKey, Nullable`1<int>> keyToEventType, Func`2<int, TKey> eventTypeToKey);
    public Nullable`1<int> KeyToEventType(TKey key);
    public TKey EventTypeToKey(int eventType);
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.FilterCache`1 : object {
    private int myCacheLimit;
    private int myCurrentTime;
    private IDictionary`2<IFiltrationState, CacheEntry<T>> myCache;
    private IDataSignalController myUpdateSignal;
    [CompilerGeneratedAttribute]
private IDataSignal <ValueAdded>k__BackingField;
    public IDataSignal ValueAdded { get; }
    public FilterCache`1(int cacheLimit);
    public sealed virtual bool TryGetValue(IFiltrationState state, T& result);
    private void PopOneValue();
    public sealed virtual void Add(IFiltrationState state, T value);
    [CompilerGeneratedAttribute]
public sealed virtual IDataSignal get_ValueAdded();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.FilterCacheEx : object {
    [ExtensionAttribute]
public static T GetValueSafe(IFilterCache`1<T> cache, IFiltrationState state);
}
public static class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.FilterCacheSizes : object {
    public static int CallTreeCacheSize;
    public static int MarkersCacheSize;
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.FilterModel`1 : ValueType {
    [NotNullAttribute]
public IDataProvider`1<IFilterState`1<T>> FilterState;
    [CanBeNullAttribute]
public IDataProvider`1<IFiltrationListenerProvider`2<FiltrationItem`1<T>, StartFiltrationArgs>> FiltrationListener;
    [CanBeNullAttribute]
public Predicate`1<T> IsApplicable;
    public FilterId Id;
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.FilterModelWithSwitch`2 : ValueType {
    public FilterModel`1<TItem> Model;
    public IThreadSwitch`1<TResult> Switch;
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.FiltrationItem`1 : ValueType {
    public LongPayload Payload;
    public ModelRange Range;
    public ThreadId Thread;
    public T Item;
    public ThreadRange ThreadRange { get; }
    public ThreadRange get_ThreadRange();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.FiltrationListenerProviderEx : object {
    [ExtensionAttribute]
public static IFiltrationListenerProvider`2<TItem, TArg> Combine(IFiltrationListenerProvider`2<TItem, TArg> p1, IFiltrationListenerProvider`2<TItem, TArg> p2);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.FiltrationListeners : object {
    [ExtensionAttribute]
public static IFiltrationListenerProviderWithResult`3<TItem, TArg, TResult> Track(IFiltrationListenerProviderWithResult`3<TItem, TArg, TResult> listener, ValueUpdatedHandler`1<EnumerationListener`2<TItem, TArg>> onListenerUpdated, Action onResultUpdated);
    public static IFiltrationListenerProviderWithResult`3<TItem, TArg, TResult> CreateCached(Func`2<IFiltrationState, IFiltrationState> filtrationStateReducer, EnumerationListenerWithThreadSwitch`3<TItem, TArg, WithFiltrationState`1<TResult>> listenerWithProvider, DirectFilterLoader`1<TResult> directFilterLoader, int cacheLimit);
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.FiltrationState : object {
    private int myHash;
    private IDictionary`2<FilterId, IFilterState> myFilterStates;
    [CompilerGeneratedAttribute]
private ModelRange <FilteredRange>k__BackingField;
    [CompilerGeneratedAttribute]
private FiltrationMode <FiltrationMode>k__BackingField;
    [CompilerGeneratedAttribute]
private JetHashSet`1<ThreadId> <Threads>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterId[] <AppliedFiltersSorted>k__BackingField;
    [CompilerGeneratedAttribute]
private EventTypeUID[] <EventTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelRange <VisibleRange>k__BackingField;
    public ModelRange FilteredRange { get; }
    public FiltrationMode FiltrationMode { get; }
    public JetHashSet`1<ThreadId> Threads { get; }
    public FilterId[] AppliedFiltersSorted { get; }
    public EventTypeUID[] EventTypes { get; }
    public ModelRange VisibleRange { get; }
    public FiltrationState(ModelRange filteredRange, ModelRange visibleRange, IEnumerable`1<ThreadId> threads, IEnumerable`1<KeyValuePair`2<FilterId, IFilterState>> filtrationStates);
    protected bool Equals(FiltrationState other);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(IFiltrationState other);
    [CompilerGeneratedAttribute]
public sealed virtual ModelRange get_FilteredRange();
    [CompilerGeneratedAttribute]
public sealed virtual FiltrationMode get_FiltrationMode();
    [CompilerGeneratedAttribute]
public sealed virtual JetHashSet`1<ThreadId> get_Threads();
    public sealed virtual IFiltrationState ExcludeFilter(FilterId filterId);
    public sealed virtual IFiltrationState ExcludeThreads();
    [CompilerGeneratedAttribute]
public sealed virtual FilterId[] get_AppliedFiltersSorted();
    public sealed virtual IFiltrationState ExcludeFilteredRange();
    public sealed virtual IFilterState`1<T> GetFilterState(FilterId filterId);
    public sealed virtual bool IsFilterApplied(FilterId filterId);
    public virtual int GetHashCode();
    [LocalizableAttribute("False")]
public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual EventTypeUID[] get_EventTypes();
    [CompilerGeneratedAttribute]
public sealed virtual ModelRange get_VisibleRange();
    public sealed virtual IFiltrationState ExcludeVisibleRange();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.FiltrationStateEx : object {
    [ExtensionAttribute]
public static EventFiltrationState ToEventFiltrationState(IFiltrationState state);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.FiltrationStateHelper : object {
    [ExtensionAttribute]
public static int GetHashCodeForSet(IReadOnlyCollection`1<T> set);
    [ExtensionAttribute]
public static int GetHashCodeForDictionary(IDictionary`2<TKey, TValue> dic);
    [ExtensionAttribute]
public static bool IsTimestampMode(IFiltrationState state);
}
public static class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.FiltrationStateReducers : object {
    public static Func`2<IFiltrationState, IFiltrationState> ForFiltrationOutput;
    public static Func`2<IFiltrationState, IFiltrationState> ForMarkers;
    public static Func`2<IFiltrationState, IFiltrationState> ForThreads;
    private static FiltrationStateReducers();
    public static Func`2<IFiltrationState, IFiltrationState> ForFilterId(FilterId id);
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.HandleNewValue`1 : MulticastDelegate {
    public HandleNewValue`1(object object, IntPtr method);
    public virtual void Invoke(T value, IFiltrationState state);
    public virtual IAsyncResult BeginInvoke(T value, IFiltrationState state, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public interface JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.IFilterCache`1 {
    public IDataSignal ValueAdded { get; }
    public abstract virtual bool TryGetValue(IFiltrationState state, T& result);
    public abstract virtual void Add(IFiltrationState state, T value);
    public abstract virtual IDataSignal get_ValueAdded();
}
public interface JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.IFilterState {
    public Nullable`1<EventTypeUID> FilteredEventType { get; }
    public abstract virtual Nullable`1<EventTypeUID> get_FilteredEventType();
}
public interface JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.IFilterState`1 {
    public abstract virtual Predicate`1<T> GetPredicate(IExecutionController controller);
}
public interface JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.IFiltrationListenerProvider`2 {
    [NotNullAttribute]
public IDataProvider`1<EnumerationListener`2<TItem, TArg>> ListenerProvider { get; }
    public abstract virtual void SetFiltrationStateProvider(IDataProvider`1<IFiltrationState> provider);
    public abstract virtual IDataProvider`1<EnumerationListener`2<TItem, TArg>> get_ListenerProvider();
}
public interface JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.IFiltrationListenerProviderWithResult`3 {
    public IThreadSwitch`1<TResult> Result { get; }
    public abstract virtual IThreadSwitch`1<TResult> get_Result();
}
public interface JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.IFiltrationState {
    public EventTypeUID[] EventTypes { get; }
    public ModelRange FilteredRange { get; }
    public ModelRange VisibleRange { get; }
    public FiltrationMode FiltrationMode { get; }
    public JetHashSet`1<ThreadId> Threads { get; }
    public FilterId[] AppliedFiltersSorted { get; }
    public abstract virtual EventTypeUID[] get_EventTypes();
    public abstract virtual ModelRange get_FilteredRange();
    public abstract virtual ModelRange get_VisibleRange();
    public abstract virtual FiltrationMode get_FiltrationMode();
    public abstract virtual JetHashSet`1<ThreadId> get_Threads();
    public abstract virtual IFiltrationState ExcludeFilter(FilterId filterId);
    public abstract virtual IFiltrationState ExcludeThreads();
    public abstract virtual FilterId[] get_AppliedFiltersSorted();
    public abstract virtual IFiltrationState ExcludeFilteredRange();
    public abstract virtual IFiltrationState ExcludeVisibleRange();
    public abstract virtual IFilterState`1<T> GetFilterState(FilterId filterId);
    public abstract virtual bool IsFilterApplied(FilterId filterId);
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.PayloadItemsListener`1 : object {
    [NotNullAttribute]
public EnumerationListener`2<FiltrationItem`1<T>, StartFiltrationArgs> Listener;
    public PayloadItemsListener`1(EnumerationListener`2<FiltrationItem`1<T>, StartFiltrationArgs> listener);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.PayloadItemsListenerEx : object {
    [ExtensionAttribute]
public static PayloadItemsListener`1<T> ToPayloadItemsListener(EnumerationListener`2<FiltrationItem`1<T>, StartFiltrationArgs> l);
}
public static class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.PayloadListeners : object {
    public static EnumerationListenerWithThreadSwitch`3<FiltrationItem`1<TItem>, StartFiltrationArgs, WithFiltrationState`1<PresentablePayloads`2<TKey, LongPayload>>> CreateForEnum(Func`2<TItem, TKey> keyExtractor);
    public static EnumerationListenerWithThreadSwitch`3<FiltrationItem`1<TItem>, StartFiltrationArgs, WithFiltrationState`1<PresentablePayload`1<LongPayload>>> CreateForToggle(Predicate`1<TItem> includeFilter);
    public static EnumerationListenerWithThreadSwitch`3<FiltrationItem`1<TVoid>, StartFiltrationArgs, WithFiltrationState`1<SummaryInfo>> CreateForSummary();
    public static EnumerationListenerWithThreadSwitch`3<FiltrationItem`1<TVoid>, StartFiltrationArgs, WithFiltrationState`1<IDictionary`2<ThreadId, SortedModelRangeSet>>> CreateForThreadMarkers();
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.PredicateAndListener`1 : ValueType {
    [CanBeNullAttribute]
public Predicate`1<T> Filter;
    [CanBeNullAttribute]
public PayloadItemsListener`1<T> Listener;
    [CanBeNullAttribute]
public Predicate`1<T> IsApplicable;
    public bool IsNull { get; }
    public PredicateAndListener`1(Predicate`1<T> filter, EnumerationListener`2<FiltrationItem`1<T>, StartFiltrationArgs> listener, Predicate`1<T> isApplicable);
    public PredicateAndListener`1(PayloadItemsListener`1<T> listener, Predicate`1<T> filter, Predicate`1<T> isApplicable);
    public bool get_IsNull();
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.RemoteFilterModelWithLocalSwitch`2 : ValueType {
    public IRemotableReference`1<FilterModel`1<TItem>> Model;
    public IThreadSwitch`1<TResult> Switch;
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.StartFiltrationArgs : ValueType {
    public PayloadType PayloadType;
    public IFiltrationState FiltrationState;
    public StartFiltrationArgs(PayloadType type, IFiltrationState state);
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.InstantiatedFilters.WithFiltrationState`1 : ValueType {
    public IFiltrationState FiltrationState;
    public T Data;
    public sealed virtual bool Equals(WithFiltrationState`1<T> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.LayerDataFilterInfo : ValueType {
    public DataFilter`1<EventInfo> Filter;
    public int LayerId;
    public bool Global;
    public bool Interval;
    [CanBeNullAttribute]
public PayloadDescriptor PayloadDescriptor;
    public bool ListenToSkippedEvents;
    public LayerDataFilterInfo(DataFilter`1<EventInfo> filter, int layerId, bool global, bool interval, PayloadDescriptor payloadDescriptor, bool listenToSkippedEvents);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Timeline.Filtration.ListenerConverters : object {
    [ExtensionAttribute]
public static EnumerationListener`2<TItem, TSrcArg> ConvertStartArg(EnumerationListener`2<TItem, TDstArg> listener, Func`2<TSrcArg, TDstArg> converter);
    [ExtensionAttribute]
[NotNullAttribute]
public static EnumerationListener`2<TSrcItem, TArg> ConvertWithEvents(EnumerationListener`2<TDstItem, TArg> listener, Func`2<TSrcItem, ThreadRange> getThreadRange, Func`3<TSrcItem, EventInfo, TDstItem> convertItem, ILogStorage logStorage, int layerId, int eventTypeId);
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.ModelDescriptor.FiltrationModelDescriptor : ValueType {
    public LayerFiltersDescriptor[] Filters;
    public FilterRadioGroup AnalysisSubjectGroup;
    public FiltrationModelDescriptor(LayerFiltersDescriptor[] filters, FilterRadioGroup analysisSubjectGroup);
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.ModelDescriptor.LayerFiltersDescriptor : object {
    public List`1<int> EventTypeDependencies;
    [NotNullAttribute]
public ExpanderKey ExpanderKey;
    public IFilterDefinition`1<EventInfo> Filter;
    public bool Global;
    public bool Intervals;
    public int LayerId;
    [CanBeNullAttribute]
public PayloadDescriptor Payload;
    public IFilterDefinition`1<EventInfo> ParentFilter;
    public Predicate`1<EventInfo> PreFilterPredicate;
    public bool IsDependent { get; }
    public LayerFiltersDescriptor(int layerId, bool intervals, PayloadDescriptor payload, bool global, IFilterDefinition`1<EventInfo> mainFilter, ExpanderKey expanderKey);
    public bool get_IsDependent();
    public LayerFiltersDescriptor CreateDependentFilter(IFilterDefinition`1<EventInfo> filter, ExpanderKey expanderKey, KnownEventTypes[] eventTypes);
    public LayerFiltersDescriptor DependsOn(IFilterDefinition`1<EventInfo> parentFilter);
    public LayerFiltersDescriptor DependsOn(KnownEventTypes eventType);
    private static string FilterName(KnownEventTypes eventType);
    private static LayerFiltersDescriptor CreateIntervals(KnownEventTypes eventType, int layerId, bool global, PayloadDescriptor payload, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadPresenter, IProviderContainerMonitor`1<bool> intentionalStateChangeMonitor);
    private static LayerFiltersDescriptor CreateIntervals(KnownEventTypes eventType, int layerId, bool global, FilterRadioGroup radioGroup, PayloadDescriptor payload, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadPresenter);
    public static LayerFiltersDescriptor CreateYesNo(KnownLayers layer, KnownEventTypes yesEventType, Nullable`1<KnownEventTypes> noEventType, bool global, string yesValue, string noValue, ExpanderKey expanderKey, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadsPresenter, IProviderContainerMonitor`1<Nullable`1<bool>> intentionalStateChangeMonitor);
    public static LayerFiltersDescriptor CreateIntervals(KnownEventTypes eventType, bool global, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadPresenter, IProviderContainerMonitor`1<bool> intentionalStateChangeMonitor, FilterRadioGroup radioGroup, PayloadDescriptor payload);
    public static LayerFiltersDescriptor CreatePoints(KnownEventTypes eventType, bool global, FilterRadioGroup radioGroup, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadPresenter, PayloadDescriptor payloads);
    public static LayerFiltersDescriptor CreatePoints(int layerId, KnownEventTypes eventId, string name, bool global, FilterRadioGroup radioGroup, IDataProvider`1<IPayloadPresenters`1<LongPayload>> payloadPresenter, PayloadDescriptor payload);
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.ModelDescriptor.PayloadDescriptor : object {
    public PayloadExtractor Extractor;
    public KnownStatistics Statistics;
    public static PayloadDescriptor CounterPayload;
    public PayloadDescriptor(PayloadExtractor extractor, KnownStatistics statistics);
    private static PayloadDescriptor();
    public static PayloadDescriptor CreateTimePayload();
}
public interface JetBrains.DotTrace.Features.Timeline.Filtration.Models.ITimelineInstantiatedFilter {
}
public interface JetBrains.DotTrace.Features.Timeline.Filtration.Models.ITimelineInstantiatedFilter`1 {
    public DataFilter`1<TItem> Filter { get; }
    public abstract virtual DataFilter`1<TItem> get_Filter();
}
public static class JetBrains.DotTrace.Features.Timeline.Filtration.Models.ModelUtils : object {
    public static FilterPresentationModel GetPathAndQuery(string url);
    public static bool SplitUrl(string url, String& host, String& pathAndQuery);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Timeline.Filtration.Models.PreviewTableDescriptors : object {
    public static PreviewTableDescriptor`2<TKey, LongPayload> CreateForThreads(IThreadOrProcessNameProvider threadNameProvider, Func`2<TKey, ThreadOrProcessId> getThreadId);
    [ExtensionAttribute]
public static IDataProvider`1<PreviewSortDescriptor`2<TKey, LongPayload>> ApplyPinSorting(IDataProvider`1<PreviewSortDescriptor`2<TKey, LongPayload>> originDescriptor, IDataProvider`1<ISet`1<TKey>> pinnedKeys);
    public static IDataProvider`1<PreviewSortDescriptor`2<TKey, LongPayload>> CreateThreadSortDescriptorProvider(IDataProvider`1<SortMode> sortModeProvider, IThreadOrProcessNameProvider threadNameProvider, Func`2<TKey, ThreadOrProcessId> getThreadId, bool useKeyForCompare);
    public static PreviewSortDescriptor`2<TKey, LongPayload> CreateThreadNameSortDescriptor(IThreadOrProcessNameProvider threadNameProvider, Func`2<TKey, ThreadOrProcessId> getThreadId);
    private static int GetKeyForIdCompare(ThreadOrProcessNameModel name);
    public static PreviewSortDescriptor`2<TKey, LongPayload> CreateThreadIdSortDescriptor(IThreadOrProcessNameProvider nameProvider, Func`2<TKey, ThreadOrProcessId> getThreadId);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Timeline.Filtration.Models.ThreadNameViewModelHelper : object {
    public static string PrintCompactName(ThreadOrProcessNameModel name);
    public static string CreateCompactNameTooltip(ThreadOrProcessNameModel name);
    [ExtensionAttribute]
public static Func`2<ThreadOrProcessId, FilterPresentationModel> ToCompactViewModelBuilder(IThreadOrProcessNameProvider nameProvider);
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.Processing.AsyncProgressContainer : object {
    private IAsyncDataController`1<int> myValueController;
    private IAsyncDataController`1<AsyncComputationState> myStateController;
    public ProgressProvider ProgressProvider;
    [ThreadSafetyAttribute("4294967295", "1")]
public void Start();
    [ThreadSafetyAttribute("4294967295", "1")]
public void SetValue(int value);
    [ThreadSafetyAttribute("4294967295", "1")]
public void Stop();
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.Processing.DelegatedListenerTimeFilter : object {
    [CanBeNullAttribute]
private EnumerationListener`2<FiltrationItem`1<TVoid>, StartFiltrationArgs> myListener;
    private string myID;
    private ThreadId myCurrentThread;
    private ulong myCurrentTick;
    [CompilerGeneratedAttribute]
private LongPayload <CurrentRangePayloadDensity>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PayloadType> <PayloadType>k__BackingField;
    [CompilerGeneratedAttribute]
private PayloadProviderType <PayloadProviderType>k__BackingField;
    public ulong NextAcceptanceTick { get; }
    public ulong NextListeningTick { get; }
    public bool AcceptsCurrentRange { get; }
    public LongPayload CurrentRangePayloadDensity { get; }
    public Nullable`1<PayloadType> PayloadType { get; }
    public PayloadProviderType PayloadProviderType { get; }
    public bool ListensToCurrentRange { get; }
    public bool HasListeners { get; }
    public DelegatedListenerTimeFilter(EnumerationListener`2<FiltrationItem`1<TVoid>, StartFiltrationArgs> listener, LongPayload payloadDensity, Nullable`1<PayloadType> payloadType, PayloadProviderType payloadProviderType, string id);
    public sealed virtual void OnStarted(ProgressProvider progress, StartFiltrationArgs args);
    public sealed virtual void OnFinished(bool cancel);
    public sealed virtual void StartThread(ThreadId thread, ulong tick);
    public sealed virtual ulong get_NextAcceptanceTick();
    public sealed virtual ulong get_NextListeningTick();
    public sealed virtual bool get_AcceptsCurrentRange();
    [CompilerGeneratedAttribute]
public sealed virtual LongPayload get_CurrentRangePayloadDensity();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<PayloadType> get_PayloadType();
    [CompilerGeneratedAttribute]
public sealed virtual PayloadProviderType get_PayloadProviderType();
    public sealed virtual bool get_ListensToCurrentRange();
    public sealed virtual bool get_HasListeners();
    public sealed virtual void Accept(ulong tick, LongPayload payloadDensity);
    public sealed virtual void Skip(ulong tick);
    public virtual string ToString();
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.Processing.EventTimeFilter : object {
    private PredicateAndListener`1[] myItems;
    private PayloadExtractor myPayloadExtractor;
    private Int32[] myListenerIndices;
    private Boolean[] myApplicable;
    private int myRejectCount;
    private bool myListensToCurrentRange;
    private Func`2<ThreadId, IEventLog> myLogAccessor;
    private IEventScanner myScanner;
    private ulong myCurrentTick;
    private bool myHasAnyFiltersApplied;
    private int mySingleRejectedIndex;
    private ThreadId myCurrentThread;
    [CompilerGeneratedAttribute]
private ulong <NextAcceptanceTick>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AcceptsCurrentRange>k__BackingField;
    [CompilerGeneratedAttribute]
private LongPayload <CurrentRangePayloadDensity>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PayloadType> <PayloadType>k__BackingField;
    [CompilerGeneratedAttribute]
private PayloadProviderType <PayloadProviderType>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterId <MainFilterId>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterId[] <AppliedFilters>k__BackingField;
    private bool myScannerAtEnd;
    private EventInfo myCurrentEvent;
    private int Num { get; }
    public ulong NextAcceptanceTick { get; private set; }
    public ulong NextListeningTick { get; }
    public bool AcceptsCurrentRange { get; private set; }
    public LongPayload CurrentRangePayloadDensity { get; private set; }
    public Nullable`1<PayloadType> PayloadType { get; }
    public PayloadProviderType PayloadProviderType { get; }
    public bool ListensToCurrentRange { get; }
    public bool HasListeners { get; }
    public FilterId MainFilterId { get; }
    public FilterId[] AppliedFilters { get; }
    public EventTimeFilter(Pair`2[] items, Func`2<ThreadId, IEventLog> logAccessor, PayloadExtractor payloadExtractor);
    private int get_Num();
    public static IEventTimeFilter Create(Pair`2[] filters, ILogStorage storage, int layerId, bool global, PayloadExtractor extractor);
    public static IEventTimeFilter Create(Pair`2[] filters, ILogStorage storage, int layerId, PayloadExtractor payloadExtractor, bool global);
    public sealed virtual void OnStarted(ProgressProvider progress, StartFiltrationArgs args);
    public sealed virtual void OnFinished(bool cancel);
    public sealed virtual void StartThread(ThreadId thread, ulong tick);
    private void UpdateNextTick();
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_NextAcceptanceTick();
    [CompilerGeneratedAttribute]
private void set_NextAcceptanceTick(ulong value);
    public sealed virtual ulong get_NextListeningTick();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AcceptsCurrentRange();
    [CompilerGeneratedAttribute]
private void set_AcceptsCurrentRange(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual LongPayload get_CurrentRangePayloadDensity();
    [CompilerGeneratedAttribute]
private void set_CurrentRangePayloadDensity(LongPayload value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<PayloadType> get_PayloadType();
    [CompilerGeneratedAttribute]
public sealed virtual PayloadProviderType get_PayloadProviderType();
    public sealed virtual bool get_ListensToCurrentRange();
    public sealed virtual bool get_HasListeners();
    [CompilerGeneratedAttribute]
public sealed virtual FilterId get_MainFilterId();
    [CompilerGeneratedAttribute]
public sealed virtual FilterId[] get_AppliedFilters();
    public sealed virtual void Accept(ulong tick, LongPayload payloadDensity);
    private void UpdateCurrentEvent();
    public sealed virtual void Skip(ulong tick);
    [LocalizableAttribute("False")]
public virtual string ToString();
}
public interface JetBrains.DotTrace.Features.Timeline.Filtration.Processing.IEventTimeFilter {
    public FilterId MainFilterId { get; }
    public FilterId[] AppliedFilters { get; }
    public abstract virtual FilterId get_MainFilterId();
    public abstract virtual FilterId[] get_AppliedFilters();
}
public interface JetBrains.DotTrace.Features.Timeline.Filtration.Processing.ITimeFilter {
    public ulong NextAcceptanceTick { get; }
    public ulong NextListeningTick { get; }
    public bool AcceptsCurrentRange { get; }
    public LongPayload CurrentRangePayloadDensity { get; }
    public Nullable`1<PayloadType> PayloadType { get; }
    public PayloadProviderType PayloadProviderType { get; }
    public bool ListensToCurrentRange { get; }
    public bool HasListeners { get; }
    public abstract virtual void OnStarted(ProgressProvider progress, StartFiltrationArgs args);
    public abstract virtual void OnFinished(bool cancel);
    public abstract virtual void StartThread(ThreadId thread, ulong tick);
    public abstract virtual ulong get_NextAcceptanceTick();
    public abstract virtual ulong get_NextListeningTick();
    public abstract virtual bool get_AcceptsCurrentRange();
    public abstract virtual LongPayload get_CurrentRangePayloadDensity();
    public abstract virtual Nullable`1<PayloadType> get_PayloadType();
    public abstract virtual PayloadProviderType get_PayloadProviderType();
    public abstract virtual bool get_ListensToCurrentRange();
    public abstract virtual bool get_HasListeners();
    public abstract virtual void Accept(ulong tick, LongPayload payloadDensity);
    public abstract virtual void Skip(ulong tick);
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.Processing.PayloadExtractor : object {
    private SerializableDelegate`1<Func`2<EventInfo, LongPayload>> myGetPayloadDensity;
    public PayloadType PayloadType;
    public PayloadExtractor(PayloadType type, Func`2<EventInfo, LongPayload> getPayloadDensity);
    public LongPayload GetPayloadDensity(EventInfo eventInfo);
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.Processing.PayloadExtractorFactory : object {
    public static PayloadExtractor ForAllocationSize(int allocationSizePropertyIndex);
    public static PayloadExtractor Main(PayloadType payloadType);
    public static PayloadExtractor ForEventProperty(int eventType, int propertyIndex, PayloadType payloadType);
}
public enum JetBrains.DotTrace.Features.Timeline.Filtration.Processing.PayloadProviderType : Enum {
    public int value__;
    public static PayloadProviderType NoPayload;
    public static PayloadProviderType OwnPayload;
    public static PayloadProviderType MainPayload;
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.Processing.RadioButtonTimeFilter : object {
    private IEventTimeFilter mySelectedOption;
    private ReadOnlyListSlice`1<IEventTimeFilter> myOtherOptions;
    private IReadOnlyList`1<IEventTimeFilter> myAllOptions;
    [CompilerGeneratedAttribute]
private ulong <NextListeningTick>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ListensToCurrentRange>k__BackingField;
    public ulong NextAcceptanceTick { get; }
    public ulong NextListeningTick { get; private set; }
    public bool AcceptsCurrentRange { get; }
    public LongPayload CurrentRangePayloadDensity { get; }
    public Nullable`1<PayloadType> PayloadType { get; }
    public PayloadProviderType PayloadProviderType { get; }
    public bool ListensToCurrentRange { get; public set; }
    public bool HasListeners { get; }
    public FilterId MainFilterId { get; }
    public FilterId[] AppliedFilters { get; }
    public RadioButtonTimeFilter(IEventTimeFilter selectedOption, IEnumerable`1<IEventTimeFilter> otherOptions);
    public sealed virtual void OnStarted(ProgressProvider progress, StartFiltrationArgs args);
    public sealed virtual void OnFinished(bool cancel);
    public sealed virtual void StartThread(ThreadId thread, ulong tick);
    public sealed virtual ulong get_NextAcceptanceTick();
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_NextListeningTick();
    [CompilerGeneratedAttribute]
private void set_NextListeningTick(ulong value);
    public sealed virtual bool get_AcceptsCurrentRange();
    public sealed virtual LongPayload get_CurrentRangePayloadDensity();
    public sealed virtual Nullable`1<PayloadType> get_PayloadType();
    private void UpdateNextTick();
    public sealed virtual PayloadProviderType get_PayloadProviderType();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ListensToCurrentRange();
    [CompilerGeneratedAttribute]
public void set_ListensToCurrentRange(bool value);
    public sealed virtual bool get_HasListeners();
    private void AcceptCore(ITimeFilter filter, ulong tick, LongPayload defaultPayload);
    public sealed virtual void Accept(ulong tick, LongPayload payloadDensity);
    public sealed virtual void Skip(ulong tick);
    [LocalizableAttribute("False")]
public virtual string ToString();
    public sealed virtual FilterId get_MainFilterId();
    public sealed virtual FilterId[] get_AppliedFilters();
}
public class JetBrains.DotTrace.Features.Timeline.Filtration.Processing.ThreadRangeTimeFilter : object {
    private Predicate`1<ThreadId> myThreadFilter;
    private PayloadItemsListener`1<ThreadId> myThreadListener;
    private ModelRange mySelectedRange;
    private PayloadItemsListener`1<TVoid> myOutputListener;
    private bool myThreadAccepted;
    private ThreadId myThread;
    private bool myRangeAccepted;
    private ulong myCurrentTick;
    [CompilerGeneratedAttribute]
private ulong <NextAcceptanceTick>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AcceptsCurrentRange>k__BackingField;
    public ulong NextAcceptanceTick { get; private set; }
    public ulong NextListeningTick { get; }
    public bool AcceptsCurrentRange { get; private set; }
    public LongPayload CurrentRangePayloadDensity { get; }
    public Nullable`1<PayloadType> PayloadType { get; }
    public PayloadProviderType PayloadProviderType { get; }
    public bool ListensToCurrentRange { get; }
    public bool HasListeners { get; }
    public ThreadRangeTimeFilter(Predicate`1<ThreadId> threadFilter, ModelRange selectedRange, PayloadItemsListener`1<TVoid> outputListener, PayloadItemsListener`1<ThreadId> threadListener);
    public sealed virtual void OnStarted(ProgressProvider progress, StartFiltrationArgs args);
    public sealed virtual void OnFinished(bool cancel);
    public sealed virtual void StartThread(ThreadId thread, ulong tick);
    private void UpdateNextTick();
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_NextAcceptanceTick();
    [CompilerGeneratedAttribute]
private void set_NextAcceptanceTick(ulong value);
    public sealed virtual ulong get_NextListeningTick();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AcceptsCurrentRange();
    [CompilerGeneratedAttribute]
private void set_AcceptsCurrentRange(bool value);
    public sealed virtual LongPayload get_CurrentRangePayloadDensity();
    public sealed virtual Nullable`1<PayloadType> get_PayloadType();
    public sealed virtual PayloadProviderType get_PayloadProviderType();
    public sealed virtual bool get_ListensToCurrentRange();
    public sealed virtual bool get_HasListeners();
    public sealed virtual void Accept(ulong tick, LongPayload payloadDensity);
    public sealed virtual void Skip(ulong tick);
    [LocalizableAttribute("False")]
public virtual string ToString();
}
public static class JetBrains.DotTrace.Features.Timeline.Filtration.Processing.TimeFilterProcessor : object {
    private static ILogger ourLogger;
    private static TimeFilterProcessor();
    private static void Swap(IList`1<T> array, int i, int j);
    public static void Process(IEnumerable`1<ITimeFilter> allFilters, ModelRange range, IReadOnlyCollection`1<ThreadId> threads, IFiltrationState state, AsyncProgressContainer progress, IExecutionController controller);
    [CompilerGeneratedAttribute]
internal static void <Process>g__PrintTimingsMap|2_2(Dictionary`2<ITimeFilter, long> filterToTicks);
}
public class JetBrains.DotTrace.Features.Timeline.Inject.TimelineMeasureNodeStorage : object {
    private static ILogger ourLog;
    private CallTreeNodesAccessors`1<DfsNodePtr> myCallTreeAccessors;
    private IPayloadNormalizer`1<LongPayload> myNormalizer;
    private ISectionAccessor`1<IIlToNativeMapSection> myILToNativeSectionAccessor;
    private CallTreePayloadsData`2<DfsNodePtr, LongPayload> myCallTreePayloads;
    private static int ourStatusesCount;
    public TimelineMeasureNodeStorage(CallTreeNodesAccessors`1<DfsNodePtr> callTreeAccessors, IPayloadNormalizer`1<LongPayload> normalizer, ISectionAccessor`1<IIlToNativeMapSection> ilToNativeSectionAccessor, CallTreePayloadsData`2<DfsNodePtr, LongPayload> callTreePayloads);
    private static TimelineMeasureNodeStorage();
    public sealed virtual LineMeasures GetMeasureNodes(NavigationPath path, IExecutionController controller);
}
[SettingsKeyAttribute("System.Reflection.Missing", "JetBrains.DotTrace.Features.Resources.Strings", "CoreSettingsSettingDescription")]
public class JetBrains.DotTrace.Features.Timeline.Options.CoreSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.DotTrace.Features.Resources.Strings", "LogETWBridgeSettingDescription")]
public bool LogETWBridge;
}
public static class JetBrains.DotTrace.Features.Timeline.Options.TimelineViewOptions : object {
    public static bool ShowUnresolvedCallFrames;
    public static bool ShowAdvancedFilters;
    public static bool ShowMyProcessForAttach;
}
public static class JetBrains.DotTrace.Features.Timeline.PropertyToExpanderKey : object {
    public static ExpanderKey Map(IEventTypeDescriptor event, IEventPropertyDescriptor property);
}
public interface JetBrains.DotTrace.Features.Timeline.RemotableTable.API.Fetching.INodeFetcher {
    public int Count { get; }
    public int Version { get; }
    public INotifyCollectionChanged ChangeProvider { get; }
    public abstract virtual object Fetch(int index);
    public abstract virtual int get_Count();
    public abstract virtual int get_Version();
    public abstract virtual INotifyCollectionChanged get_ChangeProvider();
}
public class JetBrains.DotTrace.Features.Timeline.RemotableTable.API.Fetching.ManualCollectionNotifier : object {
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public void RaiseReset();
    public void RaiseRangeChanged(IList newItems, IList oldItems, int index);
    private void Raise(NotifyCollectionChangedEventArgs args);
}
public class JetBrains.DotTrace.Features.Timeline.RemotableTable.API.Fetching.NodeFetchCollection : object {
    private INodeFetcher myFetcher;
    private int myIndex;
    private int myCount;
    public NodeFetchCollection(INodeFetcher fetcher, int index, int count);
    public sealed virtual IEnumerator`1<object> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class JetBrains.DotTrace.Features.Timeline.RemotableTable.API.Fetching.NodeFetchEnumerator : object {
    private INodeFetcher myFetcher;
    private int myCurrentIndex;
    private int myStartIndex;
    private int myLastIndex;
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private object <Current>k__BackingField;
    public object Current { get; private set; }
    private object System.Collections.IEnumerator.Current { get; }
    public NodeFetchEnumerator(INodeFetcher fetcher, int startIndex, int count);
    private static int GetLastIndex(int startIndex, int count, int collectionSize);
    public sealed virtual void Dispose();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    [CompilerGeneratedAttribute]
public sealed virtual object get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(object value);
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
}
public class JetBrains.DotTrace.Features.Timeline.RemotableTable.API.Fetching.NodeFetcher`2 : object {
    private IDataController`1<CollectionRange> myRangeController;
    private Func`2<NodeDescriptor, object> myFCreateLoading;
    private Func`4<T, NodeDescriptor, TInfo, object> myFCreateLoaded;
    private ManualCollectionNotifier myNotifier;
    private int myFetchCount;
    private CollectionPart`2<IRemotableTableNode, TInfo> myLoaded;
    private CollectionPart`2<IRemotableTableNode, TInfo> myLoading;
    private ILogger myLogger;
    public int Version { get; }
    public int Count { get; }
    public INotifyCollectionChanged ChangeProvider { get; }
    public NodeFetcher`2(Lifetime lifetime, IBasicTableAPI`2<T, TInfo> api, Func`2<NodeDescriptor, IRemotableTableNode> fCreateLoading, Func`4<T, NodeDescriptor, TInfo, IRemotableTableNode> fCreateLoaded, int fetchCount);
    private void OnNewVersionNodesLoaded(CollectionPart`2<IRemotableTableNode, TInfo> newLoaded);
    private void OnSameVersionNodesLoaded(CollectionPart`2<IRemotableTableNode, TInfo> newLoaded);
    private void ResetLoading(CollectionPart`2<IRemotableTableNode, TInfo> newLoaded);
    private CollectionPart`2<IRemotableTableNode, TInfo> MergeCollections(CollectionPart`2<IRemotableTableNode, TInfo> oldLoaded, CollectionPart`2<IRemotableTableNode, TInfo> newLoaded);
    private ChunkList`1<IRemotableTableNode> CreateLoaded(CollectionPart`2<T, TInfo> part);
    private void FetchToCache(int index);
    public sealed virtual int get_Version();
    public sealed virtual int get_Count();
    public sealed virtual object Fetch(int index);
    private void FetchToCache(CollectionRange range);
    public sealed virtual INotifyCollectionChanged get_ChangeProvider();
    [CompilerGeneratedAttribute]
private void <.ctor>b__8_0(CollectionPart`2<T, TInfo> part);
}
public interface JetBrains.DotTrace.Features.Timeline.RemotableTable.API.IBasicTableAPI`2 {
    public IDataProvider`1<CollectionPart`2<TNode, TCollectionInfo>> ProvidedNodes { get; }
    public IDataController`1<CollectionRange> RequestedRange { get; }
    public abstract virtual IDataProvider`1<CollectionPart`2<TNode, TCollectionInfo>> get_ProvidedNodes();
    public abstract virtual IDataController`1<CollectionRange> get_RequestedRange();
}
public interface JetBrains.DotTrace.Features.Timeline.RemotableTable.API.IRemotableTableNode {
    public int Index { get; }
    public int Version { get; }
    public NodeState State { get; public set; }
    public abstract virtual int get_Index();
    public abstract virtual int get_Version();
    public abstract virtual NodeState get_State();
    public abstract virtual void set_State(NodeState value);
}
public interface JetBrains.DotTrace.Features.Timeline.RemotableTable.API.ITableAPI`3 {
    public IDataProxy`1<NodeDescriptor> RequestedSelectedNode { get; }
    public IDataProvider`1<TSelectedNode> ProvidedSelectedNode { get; }
    public IDataController`1<int> SortColumnIndex { get; }
    public IDataController`1<ListSortDirection> SortDirection { get; }
    public IDataController`1<string> SearchText { get; }
    public IDataProvider`1<object> ProviderForProgress { get; }
    public abstract virtual IDataProxy`1<NodeDescriptor> get_RequestedSelectedNode();
    public abstract virtual IDataProvider`1<TSelectedNode> get_ProvidedSelectedNode();
    public abstract virtual IDataController`1<int> get_SortColumnIndex();
    public abstract virtual IDataController`1<ListSortDirection> get_SortDirection();
    public abstract virtual IDataController`1<string> get_SearchText();
    public abstract virtual IDataProvider`1<object> get_ProviderForProgress();
}
public enum JetBrains.DotTrace.Features.Timeline.RemotableTable.API.NodeState : Enum {
    public int value__;
    public static NodeState Loading;
    public static NodeState Loaded;
    public static NodeState Replaced;
}
public class JetBrains.DotTrace.Features.Timeline.RemotableTable.API.PayloadCollectionInfo`1 : object {
    public PayloadType PayloadType;
    public TPayload Total;
    private IPayloadPresenters`1<TPayload> myRawPresenters;
    private IPayloadPresenter`1<TPayload> myPresenter;
    public IPayloadPresenter`1<TPayload> Presenter { get; }
    public PayloadCollectionInfo`1(PayloadType payloadType, TPayload total, IPayloadPresenters`1<TPayload> rawPresenters);
    public IPayloadPresenter`1<TPayload> get_Presenter();
    public double CalculatePercent(TPayload payload);
}
public class JetBrains.DotTrace.Features.Timeline.RemotableTable.API.TableAPI`3 : TableAPI`4<TNode, TCollectionInfo, TSelectedNode, ITableBackend`3<TNode, TCollectionInfo, TSelectedNode>> {
    public TableAPI`3(IRemotableReference`1<ITableBackend`3<TNode, TCollectionInfo, TSelectedNode>> backend);
}
public class JetBrains.DotTrace.Features.Timeline.RemotableTable.API.TableAPI`4 : object {
    private IRemotableReference`1<TBackend> myBackend;
    [CompilerGeneratedAttribute]
private IDataProvider`1<CollectionPart`2<TNode, TCollectionInfo>> <ProvidedNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataController`1<CollectionRange> <RequestedRange>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProxy`1<NodeDescriptor> <RequestedSelectedNode>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<TSelectedNode> <ProvidedSelectedNode>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataController`1<int> <SortColumnIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataController`1<ListSortDirection> <SortDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataController`1<string> <SearchText>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<object> <ProviderForProgress>k__BackingField;
    public IDataProvider`1<CollectionPart`2<TNode, TCollectionInfo>> ProvidedNodes { get; }
    public IDataController`1<CollectionRange> RequestedRange { get; }
    public IDataProxy`1<NodeDescriptor> RequestedSelectedNode { get; }
    public IDataProvider`1<TSelectedNode> ProvidedSelectedNode { get; }
    public IDataController`1<int> SortColumnIndex { get; }
    public IDataController`1<ListSortDirection> SortDirection { get; }
    public IDataController`1<string> SearchText { get; }
    public IDataProvider`1<object> ProviderForProgress { get; }
    public TableAPI`4(IRemotableReference`1<TBackend> backend);
    protected IDataController`1<T> ToLocalController(Func`2<TBackend, IDataProxy`1<T>> getter, T defaultValue);
    protected IDataProxy`1<T> ToLocalProxy(Func`2<TBackend, IDataProxy`1<T>> getter);
    protected IDataProvider`1<T> ToLocalProvider(Func`2<TBackend, IThreadSwitch`1<T>> getter);
    protected IDataProvider`1<T> ToLocalProvider(Func`2<TBackend, IDataProviderBase`1<T>> getter);
    protected IDataProxy`1<IReadOnlyCollection`1<T>> ToLocalCollectionController(Func`2<TBackend, IDataProxy`1<IReadOnlyCollection`1<T>>> getter);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<CollectionPart`2<TNode, TCollectionInfo>> get_ProvidedNodes();
    [CompilerGeneratedAttribute]
public sealed virtual IDataController`1<CollectionRange> get_RequestedRange();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProxy`1<NodeDescriptor> get_RequestedSelectedNode();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<TSelectedNode> get_ProvidedSelectedNode();
    [CompilerGeneratedAttribute]
public sealed virtual IDataController`1<int> get_SortColumnIndex();
    [CompilerGeneratedAttribute]
public sealed virtual IDataController`1<ListSortDirection> get_SortDirection();
    [CompilerGeneratedAttribute]
public sealed virtual IDataController`1<string> get_SearchText();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<object> get_ProviderForProgress();
}
public interface JetBrains.DotTrace.Features.Timeline.RemotableTable.Backend.ITableBackend`3 {
    public IThreadSwitch`1<CollectionPart`2<TNode, TInfo>> ProvidedNodes { get; }
    public IDataProxy`1<CollectionRange> RequestedRange { get; }
    public IDataProxy`1<NodeDescriptor> RequestedSelectedNode { get; }
    public IThreadSwitch`1<TSelectedNode> ProvidedSelectedNode { get; }
    public IDataProxy`1<int> SortColumnIndex { get; }
    public IDataProxy`1<ListSortDirection> SortDirection { get; }
    public IDataProxy`1<string> SearchText { get; }
    public IDataProviderBase`1<object> ProviderForProgress { get; }
    public abstract virtual IThreadSwitch`1<CollectionPart`2<TNode, TInfo>> get_ProvidedNodes();
    public abstract virtual IDataProxy`1<CollectionRange> get_RequestedRange();
    public abstract virtual IDataProxy`1<NodeDescriptor> get_RequestedSelectedNode();
    public abstract virtual IThreadSwitch`1<TSelectedNode> get_ProvidedSelectedNode();
    public abstract virtual IDataProxy`1<int> get_SortColumnIndex();
    public abstract virtual IDataProxy`1<ListSortDirection> get_SortDirection();
    public abstract virtual IDataProxy`1<string> get_SearchText();
    public abstract virtual IDataProviderBase`1<object> get_ProviderForProgress();
}
public class JetBrains.DotTrace.Features.Timeline.RemotableTable.Backend.NoInfo : object {
    public static NoInfo Instance;
    private static NoInfo();
}
public static class JetBrains.DotTrace.Features.Timeline.RemotableTable.Backend.SorterHelper`1 : object {
    public static IDataProvider`1<Comparison`1<TNode>> Create(IDataProvider`1<int> index, IDataProvider`1<ListSortDirection> direction, Func`2<int, Comparison`1<TNode>> fCreateColumnSorter);
    internal static Comparison`1<TNode> AddSortDirection(Comparison`1<TNode> cmp, ListSortDirection direction);
}
public class JetBrains.DotTrace.Features.Timeline.RemotableTable.Backend.TableBackend`2 : TableBackendBase`3<TNode, TCollectionInfo, Nullable`1<TNode>> {
    private IThreadSwitchEx`1<CollectionPart`2<TNode, TCollectionInfo>> myProvidedNodes;
    [CompilerGeneratedAttribute]
private IThreadSwitch`1<Nullable`1<TNode>> <ProvidedSelectedNode>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProviderBase`1<object> <ProviderForProgress>k__BackingField;
    public IThreadSwitch`1<CollectionPart`2<TNode, TCollectionInfo>> ProvidedNodes { get; }
    public IThreadSwitch`1<Nullable`1<TNode>> ProvidedSelectedNode { get; }
    public IDataProviderBase`1<object> ProviderForProgress { get; }
    public TableBackend`2(IAsyncDataProvider`1<TableBackendInput`2<TNode, TCollectionInfo>> input, Func`2<int, Comparison`1<TNode>> fCreateColumnSorter, Func`2<string, Predicate`1<TNode>> fCreateStringMatcher);
    private IDataProvider`1<Comparison`1<TNode>> CreateSorter(Func`2<int, Comparison`1<TNode>> fCreateColumnSorter);
    [IteratorStateMachineAttribute("JetBrains.DotTrace.Features.Timeline.RemotableTable.Backend.TableBackend`2/<CreateFilters>d__3")]
private static IEnumerable`1<IThreadSwitch`1<Predicate`1<TNode>>> CreateFilters(IDataProvider`1<string> searchText, Func`2<string, Predicate`1<TNode>> fCreateStringMatcher);
    private static Nullable`1<TNode> GetSelectedNode(VersionedContainer`1<TableProcessingData`2<TNode, TCollectionInfo>> data, NodeDescriptor nodeDescriptor);
    public virtual IThreadSwitch`1<CollectionPart`2<TNode, TCollectionInfo>> get_ProvidedNodes();
    [CompilerGeneratedAttribute]
public virtual IThreadSwitch`1<Nullable`1<TNode>> get_ProvidedSelectedNode();
    [CompilerGeneratedAttribute]
public virtual IDataProviderBase`1<object> get_ProviderForProgress();
}
public abstract class JetBrains.DotTrace.Features.Timeline.RemotableTable.Backend.TableBackendBase`3 : object {
    [CompilerGeneratedAttribute]
private IDataProxy`1<CollectionRange> <RequestedRange>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProxy`1<NodeDescriptor> <RequestedSelectedNode>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProxy`1<int> <SortColumnIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProxy`1<ListSortDirection> <SortDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProxy`1<string> <SearchText>k__BackingField;
    public IThreadSwitch`1<CollectionPart`2<TNode, TInfo>> ProvidedNodes { get; }
    public IThreadSwitch`1<TSelectedNode> ProvidedSelectedNode { get; }
    public IDataProviderBase`1<object> ProviderForProgress { get; }
    public IDataProxy`1<CollectionRange> RequestedRange { get; }
    public IDataProxy`1<NodeDescriptor> RequestedSelectedNode { get; }
    public IDataProxy`1<int> SortColumnIndex { get; }
    public IDataProxy`1<ListSortDirection> SortDirection { get; }
    public IDataProxy`1<string> SearchText { get; }
    public abstract virtual IThreadSwitch`1<CollectionPart`2<TNode, TInfo>> get_ProvidedNodes();
    public abstract virtual IThreadSwitch`1<TSelectedNode> get_ProvidedSelectedNode();
    public abstract virtual IDataProviderBase`1<object> get_ProviderForProgress();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProxy`1<CollectionRange> get_RequestedRange();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProxy`1<NodeDescriptor> get_RequestedSelectedNode();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProxy`1<int> get_SortColumnIndex();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProxy`1<ListSortDirection> get_SortDirection();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProxy`1<string> get_SearchText();
}
public class JetBrains.DotTrace.Features.Timeline.RemotableTable.Backend.TableBackendInput`2 : ValueType {
    public ChunkList`1<TNode> Nodes;
    public TCollectionInfo CollectionInfo;
    public TableBackendInput`2(ChunkList`1<TNode> nodes, TCollectionInfo collectionInfo);
}
public class JetBrains.DotTrace.Features.Timeline.RemotableTable.Backend.TableBackendPipe`2 : object {
    [CompilerGeneratedAttribute]
private IAsyncDataProvider`1<TableProcessingData`2<TNode, TCollectionInfo>> <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private IAsyncDataProvider`1<TableProcessingData`2<TNode, TCollectionInfo>> <Sorted>k__BackingField;
    [CompilerGeneratedAttribute]
private IAsyncDataProvider`1<TableProcessingData`2<TNode, TCollectionInfo>> <Filtered>k__BackingField;
    [CompilerGeneratedAttribute]
private IAsyncDataProvider`1<VersionedContainer`1<TableProcessingData`2<TNode, TCollectionInfo>>> <Versioned>k__BackingField;
    [CompilerGeneratedAttribute]
private IAsyncDataProvider`1<CollectionPart`2<TNode, TCollectionInfo>> <Ranged>k__BackingField;
    [CompilerGeneratedAttribute]
private IAsyncDataProvider`1<object> <ProviderForProgress>k__BackingField;
    public IAsyncDataProvider`1<TableProcessingData`2<TNode, TCollectionInfo>> Data { get; }
    public IAsyncDataProvider`1<TableProcessingData`2<TNode, TCollectionInfo>> Sorted { get; }
    public IAsyncDataProvider`1<TableProcessingData`2<TNode, TCollectionInfo>> Filtered { get; }
    public IAsyncDataProvider`1<VersionedContainer`1<TableProcessingData`2<TNode, TCollectionInfo>>> Versioned { get; }
    public IAsyncDataProvider`1<CollectionPart`2<TNode, TCollectionInfo>> Ranged { get; }
    public IAsyncDataProvider`1<object> ProviderForProgress { get; }
    public TableBackendPipe`2(IAsyncDataProvider`1<TableBackendInput`2<TNode, TCollectionInfo>> input, IThreadSwitch`1<CollectionRange> range, IEnumerable`1<IThreadSwitch`1<Predicate`1<TNode>>> filters, IThreadSwitch`1<Comparison`1<TNode>> sorter);
    [CompilerGeneratedAttribute]
public IAsyncDataProvider`1<TableProcessingData`2<TNode, TCollectionInfo>> get_Data();
    [CompilerGeneratedAttribute]
public IAsyncDataProvider`1<TableProcessingData`2<TNode, TCollectionInfo>> get_Sorted();
    [CompilerGeneratedAttribute]
public IAsyncDataProvider`1<TableProcessingData`2<TNode, TCollectionInfo>> get_Filtered();
    [CompilerGeneratedAttribute]
public IAsyncDataProvider`1<VersionedContainer`1<TableProcessingData`2<TNode, TCollectionInfo>>> get_Versioned();
    [CompilerGeneratedAttribute]
public IAsyncDataProvider`1<CollectionPart`2<TNode, TCollectionInfo>> get_Ranged();
    [CompilerGeneratedAttribute]
public IAsyncDataProvider`1<object> get_ProviderForProgress();
    private static IAsyncDataProvider`1<CollectionPart`2<TNode, TCollectionInfo>> CutRange(IAsyncDataProvider`1<VersionedContainer`1<TableProcessingData`2<TNode, TCollectionInfo>>> inputData, IThreadSwitch`1<CollectionRange> rangeSwitch);
    private static IAsyncDataProvider`1<VersionedContainer`1<TableProcessingData`2<TNode, TCollectionInfo>>> AddVersioning(IAsyncDataProvider`1<TableProcessingData`2<TNode, TCollectionInfo>> input);
    private static IAsyncDataProvider`1<TableProcessingData`2<TNode, TCollectionInfo>> Filter(IAsyncDataProvider`1<TableProcessingData`2<TNode, TCollectionInfo>> input, IEnumerable`1<IThreadSwitch`1<Predicate`1<TNode>>> filters);
    private static IAsyncDataProvider`1<TableProcessingData`2<TNode, TCollectionInfo>> CreateData(IAsyncDataProvider`1<TableBackendInput`2<TNode, TCollectionInfo>> input);
    private static IAsyncDataProvider`1<TableProcessingData`2<TNode, TCollectionInfo>> Sort(IAsyncDataProvider`1<TableProcessingData`2<TNode, TCollectionInfo>> input, IThreadSwitch`1<Comparison`1<TNode>> comparer);
    private static IAsyncDataProvider`1<TableProcessingData`2<TNode, TCollectionInfo>> Filter(IAsyncDataProvider`1<TableProcessingData`2<TNode, TCollectionInfo>> input, IThreadSwitch`1<Predicate`1<TNode>> filter);
}
public class JetBrains.DotTrace.Features.Timeline.RemotableTable.Backend.TableProcessingData`2 : ValueType {
    public IReadOnlyList`1<TNode> Nodes;
    public ChunkList`1<int> Indices;
    public TCollectionInfo CollectionInfo;
    public TableProcessingData`2(IReadOnlyList`1<TNode> nodes, ChunkList`1<int> indices, TCollectionInfo collectionInfo);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Timeline.RemotableTable.Backend.TableUtil : object {
    [ExtensionAttribute]
public static IThreadSwitchEx`1<CollectionPart`2<T, TInfo>> SwitchRecycle(IAsyncDataProvider`1<CollectionPart`2<T, TInfo>> input);
    private static CollectionPart`2<T, TInfo> CreateEmptyCollectionPart();
    private static CollectionPart`2<T, TInfo> CopyCollectionPart(CollectionPart`2<T, TInfo> source, CollectionPart`2<T, TInfo> dest);
    [ExtensionAttribute]
public static IThreadSwitch`1<Predicate`1<TNode>> ToPredicate(IDataProvider`1<TInput> provider, Func`2<TInput, Predicate`1<TNode>> fCreate);
    [ExtensionAttribute]
public static IThreadSwitch`1<Predicate`1<TNode>> ToPredicate(IAsyncDataProvider`1<TInput> provider, Func`2<TInput, Predicate`1<TNode>> fCreate);
}
public class JetBrains.DotTrace.Features.Timeline.Threads.GetIndex`1 : MulticastDelegate {
    public GetIndex`1(object object, IntPtr method);
    public virtual int Invoke(T value);
    public virtual IAsyncResult BeginInvoke(T value, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
public class JetBrains.DotTrace.Features.Timeline.Threads.GetIsPinned`1 : MulticastDelegate {
    public GetIsPinned`1(object object, IntPtr method);
    public virtual bool Invoke(T value);
    public virtual IAsyncResult BeginInvoke(T value, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public interface JetBrains.DotTrace.Features.Timeline.Threads.IKeyEnumerator`1 {
}
public interface JetBrains.DotTrace.Features.Timeline.Threads.IProcessNameProvider {
    public abstract virtual bool HasValueFor(UniqueProcessId processId);
}
public interface JetBrains.DotTrace.Features.Timeline.Threads.IThreadDescriptorProvider {
}
public interface JetBrains.DotTrace.Features.Timeline.Threads.IThreadNameProvider {
}
public interface JetBrains.DotTrace.Features.Timeline.Threads.IThreadSelection {
}
public interface JetBrains.DotTrace.Features.Timeline.Threads.IThreadsScope {
}
public interface JetBrains.DotTrace.Features.Timeline.Threads.IThreadsSet {
}
public interface JetBrains.DotTrace.Features.Timeline.Threads.IThreadTypeProvider {
}
public interface JetBrains.DotTrace.Features.Timeline.Threads.ITimelineChannels {
    public IDataProvider`1<GetIndex`1<ThreadId>> IndexProvider { get; }
    public IDataProvider`1<GetIsPinned`1<ThreadId>> PinnedStateProvider { get; }
    public IReadOnlyList`1<IChannelModel> Channels { get; }
    public IDataProvider`1<int> ItemsCount { get; }
    public abstract virtual void SetUnfilteredList(IReadOnlyCollection`1<IChannelModel> list);
    public abstract virtual void ChangeCollection(Action`1<List`1<IChannelModel>> action, bool notifyChanged);
    public abstract virtual void ChangeCollection(Func`2<List`1<IChannelModel>, bool> action, bool notifyChanged);
    public abstract virtual IDataProvider`1<GetIndex`1<ThreadId>> get_IndexProvider();
    public abstract virtual IDataProvider`1<GetIsPinned`1<ThreadId>> get_PinnedStateProvider();
    public abstract virtual IReadOnlyList`1<IChannelModel> get_Channels();
    public abstract virtual IDataProvider`1<int> get_ItemsCount();
}
public interface JetBrains.DotTrace.Features.Timeline.Threads.ITimelineChannelsModel {
    public IDataProvider`1<Comparison`1<WithPayload`2<ThreadId, LongPayload>>> ComparisonProvider { get; }
    public abstract virtual IDataProvider`1<Comparison`1<WithPayload`2<ThreadId, LongPayload>>> get_ComparisonProvider();
}
public class JetBrains.DotTrace.Features.Timeline.Threads.ThreadsSet : object {
    [CompilerGeneratedAttribute]
private IObservableSet`1<ThreadId> <Data>k__BackingField;
    public IObservableSet`1<ThreadId> Data { get; }
    public ThreadsSet(IObservableSet`1<ThreadId> set);
    [CompilerGeneratedAttribute]
public sealed virtual IObservableSet`1<ThreadId> get_Data();
}
public class JetBrains.DotTrace.Features.Timeline.TimelineCallTreePayloads`1 : object {
    public PayloadsMap`2<TPtr, LongPayload> Payloads;
    public PayloadType PayloadType;
    public TimelineCallTreePayloads`1(PayloadsMap`2<TPtr, LongPayload> payloads, PayloadType payloadType);
}
public class JetBrains.DotTrace.Features.Timeline.Viewports.DelegateTotalViewportContainer : object {
    [CompilerGeneratedAttribute]
private IViewport <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<IViewport> <ChangeProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<RangeAndResolution> <RangeAndResolution>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<ModelRangeDouble> <VisibleRange>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<ModelRange> <VisibleModelRange>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <IsTotalRangeVisible>k__BackingField;
    public IViewport Data { get; }
    public IDataProvider`1<IViewport> ChangeProvider { get; }
    public IDataProvider`1<RangeAndResolution> RangeAndResolution { get; }
    public IDataProvider`1<ModelRangeDouble> VisibleRange { get; }
    public IDataProvider`1<ModelRange> VisibleModelRange { get; }
    public IDataProvider`1<bool> IsTotalRangeVisible { get; }
    public DelegateTotalViewportContainer(IViewportContainer container);
    [CompilerGeneratedAttribute]
public sealed virtual IViewport get_Data();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IViewport> get_ChangeProvider();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<RangeAndResolution> get_RangeAndResolution();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ModelRangeDouble> get_VisibleRange();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ModelRange> get_VisibleModelRange();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<bool> get_IsTotalRangeVisible();
}
public class JetBrains.DotTrace.Features.Timeline.Viewports.DelegateVisibleViewportContainer : object {
    [CompilerGeneratedAttribute]
private IViewport <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<IViewport> <ChangeProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<RangeAndResolution> <RangeAndResolution>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<ModelRangeDouble> <VisibleRange>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<ModelRange> <VisibleModelRange>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <IsTotalRangeVisible>k__BackingField;
    public IViewport Data { get; }
    public IDataProvider`1<IViewport> ChangeProvider { get; }
    public IDataProvider`1<RangeAndResolution> RangeAndResolution { get; }
    public IDataProvider`1<ModelRangeDouble> VisibleRange { get; }
    public IDataProvider`1<ModelRange> VisibleModelRange { get; }
    public IDataProvider`1<bool> IsTotalRangeVisible { get; }
    public DelegateVisibleViewportContainer(IViewportContainer container);
    [CompilerGeneratedAttribute]
public sealed virtual IViewport get_Data();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IViewport> get_ChangeProvider();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<RangeAndResolution> get_RangeAndResolution();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ModelRangeDouble> get_VisibleRange();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ModelRange> get_VisibleModelRange();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<bool> get_IsTotalRangeVisible();
}
public interface JetBrains.DotTrace.Features.Timeline.Viewports.ISummaryTotalViewportContainer {
}
public interface JetBrains.DotTrace.Features.Timeline.Viewports.ISummaryVisibleViewportContainer {
}
public interface JetBrains.DotTrace.Features.Timeline.Viewports.IThreadsTotalViewportContainer {
}
public interface JetBrains.DotTrace.Features.Timeline.Viewports.IThreadsVisibleViewportContainer {
}
public interface JetBrains.DotTrace.Features.Timeline.Viewports.ITotalViewportContainer {
}
public interface JetBrains.DotTrace.Features.Timeline.Viewports.IViewportContainer {
    public IDataProvider`1<IViewport> ChangeProvider { get; }
    public IDataProvider`1<RangeAndResolution> RangeAndResolution { get; }
    public IDataProvider`1<ModelRangeDouble> VisibleRange { get; }
    public IDataProvider`1<ModelRange> VisibleModelRange { get; }
    public IDataProvider`1<bool> IsTotalRangeVisible { get; }
    public abstract virtual IDataProvider`1<IViewport> get_ChangeProvider();
    public abstract virtual IDataProvider`1<RangeAndResolution> get_RangeAndResolution();
    public abstract virtual IDataProvider`1<ModelRangeDouble> get_VisibleRange();
    public abstract virtual IDataProvider`1<ModelRange> get_VisibleModelRange();
    public abstract virtual IDataProvider`1<bool> get_IsTotalRangeVisible();
}
public interface JetBrains.DotTrace.Features.Timeline.Viewports.IVisibleViewportContainer {
}
public class JetBrains.DotTrace.Features.Timeline.Viewports.ViewportContainer : object {
    [CompilerGeneratedAttribute]
private IViewport <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<IViewport> <ChangeProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<RangeAndResolution> <RangeAndResolution>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<ModelRangeDouble> <VisibleRange>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<ModelRange> <VisibleModelRange>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <IsTotalRangeVisible>k__BackingField;
    public IViewport Data { get; public set; }
    public IDataProvider`1<IViewport> ChangeProvider { get; }
    public IDataProvider`1<RangeAndResolution> RangeAndResolution { get; }
    public IDataProvider`1<ModelRangeDouble> VisibleRange { get; }
    public IDataProvider`1<ModelRange> VisibleModelRange { get; }
    public IDataProvider`1<bool> IsTotalRangeVisible { get; }
    public ViewportContainer(IDataControllerContainer`1<ModelRangeDouble> visibleRange, IDataController`1<ModelRangeDouble> totalRange, double minUnitsPerPixel);
    [CompilerGeneratedAttribute]
public sealed virtual IViewport get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(IViewport value);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IViewport> get_ChangeProvider();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<RangeAndResolution> get_RangeAndResolution();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ModelRangeDouble> get_VisibleRange();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<ModelRange> get_VisibleModelRange();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<bool> get_IsTotalRangeVisible();
}
public interface JetBrains.DotTrace.Features.TopMethods.ITopMethodsModel {
    public IDataProvider`1<MethodListModel> MethodsListModel { get; }
    public Action`1<bool> HideSystemFunctionsButtonCallback { get; }
    public IDataProvider`1<bool> HideSystemFunctionsButtonState { get; }
    public IDataProvider`1<bool> HideSystemFunctionsButtonIsEnabled { get; }
    public IDataProvider`1<string> HideSystemFunctionsButtonTooltip { get; }
    public IDataSink`1<bool> AreSystemFunctionsShown { get; }
    public IDataController`1<string> Search { get; }
    public IDataController`1<bool> SearchAutoHide { get; }
    public IDataController`1<bool> FollowCallTree { get; }
    public IDataController`1<bool> SortByTotal { get; }
    public IDataProvider`1<string> NoItemsText { get; }
    public IDataProvider`1<bool> HasItems { get; }
    public IDataProvider`1<string> RootMethodName { get; }
    public IDataSink`1<CallTreePath> CallTreePrefix { get; }
    public ProgressAndTitleModel ProgressModel { get; }
    public abstract virtual IDataProvider`1<MethodListModel> get_MethodsListModel();
    public abstract virtual Action`1<bool> get_HideSystemFunctionsButtonCallback();
    public abstract virtual IDataProvider`1<bool> get_HideSystemFunctionsButtonState();
    public abstract virtual IDataProvider`1<bool> get_HideSystemFunctionsButtonIsEnabled();
    public abstract virtual IDataProvider`1<string> get_HideSystemFunctionsButtonTooltip();
    public abstract virtual IDataSink`1<bool> get_AreSystemFunctionsShown();
    public abstract virtual IDataController`1<string> get_Search();
    public abstract virtual IDataController`1<bool> get_SearchAutoHide();
    public abstract virtual IDataController`1<bool> get_FollowCallTree();
    public abstract virtual IDataController`1<bool> get_SortByTotal();
    public abstract virtual IDataProvider`1<string> get_NoItemsText();
    public abstract virtual IDataProvider`1<bool> get_HasItems();
    public abstract virtual IDataProvider`1<string> get_RootMethodName();
    public abstract virtual IDataSink`1<CallTreePath> get_CallTreePrefix();
    public abstract virtual ProgressAndTitleModel get_ProgressModel();
}
public class JetBrains.DotTrace.Features.TopMethods.MethodListModel : object {
    [CompilerGeneratedAttribute]
private PayloadType <PayloadType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PayloadTypeText>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MethodsListItemModel> <Items>k__BackingField;
    public PayloadType PayloadType { get; }
    public string PayloadTypeText { get; }
    public List`1<MethodsListItemModel> Items { get; }
    public MethodListModel(PayloadType payloadType, string payloadTypeText, List`1<MethodsListItemModel> items);
    [CompilerGeneratedAttribute]
public PayloadType get_PayloadType();
    [CompilerGeneratedAttribute]
public string get_PayloadTypeText();
    [CompilerGeneratedAttribute]
public List`1<MethodsListItemModel> get_Items();
}
public class JetBrains.DotTrace.Features.TreeListModel.TreeList`1 : object {
    public ChunkList`1<TModel> Nodes;
    public Nullable`1<int> SelectedNodeModelIndex;
    public int ItemsCount;
    public List`1<int> GetPathToRoot(Nullable`1<int> selectedModelIndex);
}
public static class JetBrains.DotTrace.Features.TreeListModel.TreeListSorter : object {
    public static Comparison`1<TModel> CreateTextComparison();
    private static int CompareBuffers(Char[] buffer1, int length1, Char[] buffer2, int length2);
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Util.ComponentContainerEx : object {
    [ExtensionAttribute]
public static ComponentContainer CreateProcessingComponentContainer(IComponentContainer container, Lifetime lifetime, SnapshotProcessingInput processingInput, IValueResolver resolver, bool forceLoadingRemoteZone);
}
public static class JetBrains.DotTrace.Features.Util.PathUtils : object {
    public static string GetFileNamePresentation(string path);
}
public class JetBrains.DotTrace.Features.Util.ProgressAndTitleModel : object {
    [CompilerGeneratedAttribute]
private IDataProviderBase`1<bool> <InProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProviderBase`1<bool> <DeferredInProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProviderBase`1<string> <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProviderBase`1<int> <Progress>k__BackingField;
    public IDataProviderBase`1<bool> InProgress { get; }
    public IDataProviderBase`1<bool> DeferredInProgress { get; }
    public IDataProviderBase`1<string> Title { get; }
    public IDataProviderBase`1<int> Progress { get; }
    public ProgressAndTitleModel(IDataProviderBase`1<int> progress, IDataProviderBase`1<string> title, IDataProviderBase`1<bool> inProgress, IDataProviderBase`1<bool> deferredInProgress);
    [CompilerGeneratedAttribute]
public IDataProviderBase`1<bool> get_InProgress();
    [CompilerGeneratedAttribute]
public IDataProviderBase`1<bool> get_DeferredInProgress();
    [CompilerGeneratedAttribute]
public IDataProviderBase`1<string> get_Title();
    [CompilerGeneratedAttribute]
public IDataProviderBase`1<int> get_Progress();
}
[ExtensionAttribute]
public static class JetBrains.DotTrace.Features.Util.ProgressAndTitleModelEx : object {
    [ExtensionAttribute]
public static ProgressAndTitleModel CreateProgressModel(IDataProvider`1<ProgressProvider[]> progresses, Nullable`1<TimeSpan> deferUpdateTime);
}
public class JetBrains.DotTrace.Features.Util.SnapshotFileTypes : object {
    public static string AnyFile;
    private static String[] ourSnapshotFilesExtensions;
    public static IReadOnlyList`1<ChooseFileType> SnapshotFileTypeFilters;
    private static SnapshotFileTypes();
}
public static class JetBrains.DotTrace.Features.Util.SnapshotFormatHelpers : object {
    public static bool IsPerformanceSnapshot(FileSystemPath path);
    public static bool IsTimelineSnapshot(FileSystemPath path);
}
public static class JetBrains.DotTrace.Features.Util.ViewerKind : object {
    public static string DefaultViewer;
    public static string LegacyViewer;
}
[ZoneDefinitionAttribute]
public interface JetBrains.DotTrace.Features.Zones.ITimelineViewerZone {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
