[GuidAttribute("CB2F6723-AB3A-11d2-9C40-00C04FA30A3E")]
public class JetBrains.Concurrency.CorRuntimeHost : object {
}
public static class JetBrains.Interop.Linux.Arm : object {
}
public static class JetBrains.Interop.Linux.Arm64 : object {
}
public class JetBrains.Interop.Linux.Atom : ValueType {
    private IntPtr data;
    public Atom(IntPtr data);
}
public static class JetBrains.Interop.Linux.Bitness32 : object {
}
public static class JetBrains.Interop.Linux.Bitness64 : object {
}
public class JetBrains.Interop.Linux.Colormap : ValueType {
    private IntPtr data;
}
public class JetBrains.Interop.Linux.Connection : ValueType {
    private ushort data;
}
public class JetBrains.Interop.Linux.Display : ValueType {
}
public class JetBrains.Interop.Linux.Drawable : ValueType {
    private IntPtr data;
}
public static class JetBrains.Interop.Linux.ERRNO : object {
    public static int EPERM;
    public static int ENOENT;
    public static int ESRCH;
    public static int EINTR;
    public static int EIO;
    public static int ENXIO;
    public static int E2BIG;
    public static int ENOEXEC;
    public static int EBADF;
    public static int ECHILD;
    public static int EAGAIN;
    public static int ENOMEM;
    public static int EACCES;
    public static int EFAULT;
    public static int EBUSY;
    public static int EEXIST;
    public static int EXDEV;
    public static int ENODEV;
    public static int ENOTDIR;
    public static int EISDIR;
    public static int EINVAL;
    public static int ENFILE;
    public static int EMFILE;
    public static int ENOTTY;
    public static int ETXTBSY;
    public static int EFBIG;
    public static int ENOSPC;
    public static int ESPIPE;
    public static int EROFS;
    public static int EMLINK;
    public static int EPIPE;
    public static int EDOM;
    public static int ERANGE;
    public static int EDEADLK;
    public static int ENAMETOOLONG;
    public static int ENOLCK;
    public static int ENOSYS;
    public static int ENOTEMPTY;
    public static int ELOOP;
    public static int EWOULDBLOCK;
    public static int ENOMSG;
    public static int EIDRM;
    public static int ENOSTR;
    public static int ENODATA;
    public static int ETIME;
    public static int ENOSR;
    public static int ENOLINK;
    public static int EPROTO;
    public static int EMULTIHOP;
    public static int EBADMSG;
    public static int EOVERFLOW;
    public static int EILSEQ;
    public static int ENOTSOCK;
    public static int EDESTADDRREQ;
    public static int EMSGSIZE;
    public static int EPROTOTYPE;
    public static int ENOPROTOOPT;
    public static int EPROTONOSUPPORT;
    public static int EOPNOTSUPP;
    public static int ENOTSUP;
    public static int EAFNOSUPPORT;
    public static int EADDRINUSE;
    public static int EADDRNOTAVAIL;
    public static int ENETDOWN;
    public static int ENETUNREACH;
    public static int ENETRESET;
    public static int ECONNABORTED;
    public static int ECONNRESET;
    public static int ENOBUFS;
    public static int EISCONN;
    public static int ENOTCONN;
    public static int ETIMEDOUT;
    public static int ECONNREFUSED;
    public static int EHOSTUNREACH;
    public static int EALREADY;
    public static int EINPROGRESS;
    public static int ESTALE;
    public static int EDQUOT;
    public static int ECANCELED;
    public static int EOWNERDEAD;
    public static int ENOTRECOVERABLE;
}
public enum JetBrains.Interop.Linux.Event : Enum {
    public int value__;
    public static Event FocusOut;
    public static Event KeymapNotify;
    public static Event Expose;
    public static Event GraphicsExpose;
    public static Event NoExpose;
    public static Event VisibilityNotify;
    public static Event CreateNotify;
    public static Event DestroyNotify;
    public static Event UnmapNotify;
    public static Event MapNotify;
    public static Event KeyPress;
    public static Event MapRequest;
    public static Event ReparentNotify;
    public static Event ConfigureNotify;
    public static Event ConfigureRequest;
    public static Event GravityNotify;
    public static Event ResizeRequest;
    public static Event CirculateNotify;
    public static Event CirculateRequest;
    public static Event PropertyNotify;
    public static Event SelectionClear;
    public static Event KeyRelease;
    public static Event SelectionRequest;
    public static Event SelectionNotify;
    public static Event ColormapNotify;
    public static Event ClientMessage;
    public static Event MappingNotify;
    public static Event Generic;
    public static Event LASTEvent;
    public static Event ButtonPress;
    public static Event ButtonRelease;
    public static Event MotionNotify;
    public static Event EnterNotify;
    public static Event LeaveNotify;
    public static Event FocusIn;
}
[FlagsAttribute]
public enum JetBrains.Interop.Linux.EventMask : Enum {
    public int value__;
    public static EventMask NoEventMask;
    public static EventMask KeyPressMask;
    public static EventMask KeyReleaseMask;
    public static EventMask ButtonPressMask;
    public static EventMask ButtonReleaseMask;
    public static EventMask EnterWindowMask;
    public static EventMask LeaveWindowMask;
    public static EventMask PointerMotionMask;
    public static EventMask PointerMotionHintMask;
    public static EventMask Button1MotionMask;
    public static EventMask Button2MotionMask;
    public static EventMask Button3MotionMask;
    public static EventMask Button4MotionMask;
    public static EventMask Button5MotionMask;
    public static EventMask ButtonMotionMask;
    public static EventMask KeymapStateMask;
    public static EventMask ExposureMask;
    public static EventMask VisibilityChangeMask;
    public static EventMask StructureNotifyMask;
    public static EventMask ResizeRedirectMask;
    public static EventMask SubstructureNotifyMask;
    public static EventMask SubstructureRedirectMask;
    public static EventMask FocusChangeMask;
    public static EventMask PropertyChangeMask;
    public static EventMask ColormapChangeMask;
    public static EventMask OwnerGrabButtonMask;
}
public class JetBrains.Interop.Linux.Font : ValueType {
    private IntPtr data;
}
public class JetBrains.Interop.Linux.GdkDisplay : ValueType {
}
public class JetBrains.Interop.Linux.GdkMonitor : ValueType {
}
public class JetBrains.Interop.Linux.GdkPixbuf : ValueType {
}
public class JetBrains.Interop.Linux.GdkRectangle : ValueType {
    public int x;
    public int y;
    public int width;
    public int height;
}
public class JetBrains.Interop.Linux.GdkScreen : ValueType {
}
public class JetBrains.Interop.Linux.GError : ValueType {
    public int domain;
    public int code;
    public Byte* message;
}
public class JetBrains.Interop.Linux.GIcon : ValueType {
}
public class JetBrains.Interop.Linux.GSettings : ValueType {
}
public class JetBrains.Interop.Linux.GSettingsSchema : ValueType {
}
public class JetBrains.Interop.Linux.GSettingsSchemaSource : ValueType {
}
public class JetBrains.Interop.Linux.GtkIconInfo : ValueType {
}
[FlagsAttribute]
public enum JetBrains.Interop.Linux.GtkIconLookupFlags : Enum {
    public int value__;
    public static GtkIconLookupFlags GTK_ICON_LOOKUP_NO_SVG;
    public static GtkIconLookupFlags GTK_ICON_LOOKUP_FORCE_SVG;
    public static GtkIconLookupFlags GTK_ICON_LOOKUP_USE_BUILTIN;
    public static GtkIconLookupFlags GTK_ICON_LOOKUP_GENERIC_FALLBACK;
    public static GtkIconLookupFlags GTK_ICON_LOOKUP_FORCE_SIZE;
    public static GtkIconLookupFlags GTK_ICON_LOOKUP_FORCE_REGULAR;
    public static GtkIconLookupFlags GTK_ICON_LOOKUP_FORCE_SYMBOLIC;
    public static GtkIconLookupFlags GTK_ICON_LOOKUP_DIR_LTR;
    public static GtkIconLookupFlags GTK_ICON_LOOKUP_DIR_RTL;
}
public class JetBrains.Interop.Linux.GtkIconTheme : ValueType {
}
public static class JetBrains.Interop.Linux.Helpers.LinuxWindowProperties : object {
    public static void SetPid(Display* display, Window window);
    public static void ActivatePid(int pid);
    private static void FindProcessWindows(int pid, Display* display, Window root, List`1<Window> result);
}
public class JetBrains.Interop.Linux.ipc_perm : ValueType {
    public int __key;
    public int uid;
    public int gid;
    public int cuid;
    public int cgid;
    public int mode;
    public short __seq;
    public short __pad2;
    public long __glibc_reserved1;
    public long __glibc_reserved2;
}
public class JetBrains.Interop.Linux.kde_output_device_mode_v2 : ValueType {
}
public class JetBrains.Interop.Linux.kde_output_device_mode_v2_listener : ValueType {
    public IntPtr size;
    public IntPtr refresh;
    public IntPtr preferred;
    public IntPtr removed;
    public kde_output_device_mode_v2_listener(size_callback size, refresh_callback refresh, preferred_callback preferred, removed_callback removed, Action& keepAlive);
}
public class JetBrains.Interop.Linux.kde_output_device_v2 : ValueType {
}
public class JetBrains.Interop.Linux.kde_output_device_v2_listener : ValueType {
    public IntPtr geometry;
    public IntPtr current_mode;
    public IntPtr mode;
    public IntPtr done;
    public IntPtr scale;
    public IntPtr edid;
    public IntPtr enabled;
    public IntPtr uuid;
    public IntPtr serial_number;
    public IntPtr eisa_id;
    public IntPtr capabilities;
    public IntPtr overscan;
    public IntPtr vrr_policy;
    public IntPtr rgb_range;
    public IntPtr name;
    public kde_output_device_v2_listener(geometry_callback geometry, current_mode_callback current_mode, mode_callback mode, done_callback done, scale_callback scale, edid_callback edid, enabled_callback enabled, uuid_callback uuid, serial_number_callback serial_number, eisa_id_callback eisa_id, capabilities_callback capabilities, overscan_callback overscan, vrr_policy_callback vrr_policy, rgb_range_callback rgb_range, name_callback name, Action& keepAlive);
}
public class JetBrains.Interop.Linux.KeyCode : ValueType {
    private byte data;
    public static byte op_Implicit(KeyCode value);
}
[FlagsAttribute]
public enum JetBrains.Interop.Linux.KeyMods : Enum {
    public byte value__;
    public static KeyMods Shift;
    public static KeyMods Lock;
    public static KeyMods Control;
    public static KeyMods Mod1;
    public static KeyMods Mod2;
    public static KeyMods Mod3;
    public static KeyMods Mod4;
    public static KeyMods Mod5;
}
public enum JetBrains.Interop.Linux.KeyStateBitIndex : Enum {
    public int value__;
    public static KeyStateBitIndex LCtrl;
    public static KeyStateBitIndex RCtrl;
    public static KeyStateBitIndex LShift;
    public static KeyStateBitIndex RShift;
    public static KeyStateBitIndex LAlt;
    public static KeyStateBitIndex RAlt;
}
public class JetBrains.Interop.Linux.KeySym : ValueType {
    public static KeySym XK_Shift_L;
    public static KeySym XK_Shift_R;
    public static KeySym XK_Control_L;
    public static KeySym XK_Control_R;
    public static KeySym XK_Caps_Lock;
    public static KeySym XK_Shift_Lock;
    public static KeySym XK_Meta_L;
    public static KeySym XK_Meta_R;
    public static KeySym XK_Alt_L;
    public static KeySym XK_Alt_R;
    private XID data;
    private static KeySym();
    public static KeySym op_Implicit(UInt32 value);
}
public static class JetBrains.Interop.Linux.LibC : object {
    private static string LibraryName;
    private static int open(string pathname, OpenFlags flags, UnixFileModes mode);
    private static int __xstat(int ver, string path, Void* stat);
    private static int __stat_time64(string path, Void* stat);
    private static int __xstat64(int ver, string path, Void* stat);
    private static int __fxstat(int ver, int fildes, Void* stat);
    private static int __fstat_time64(int fildes, Void* stat);
    private static int __fxstat64(int ver, int fildes, Void* stat);
    public static passwd* getpwuid(UInt32 uid);
}
public static class JetBrains.Interop.Linux.LibDlSo2 : object {
    private static string LibraryName;
    public static int RTLD_LAZY;
    public static int RTLD_NOW;
    public static int RTLD_BINDING_MASK;
    public static int RTLD_NOLOAD;
    public static int RTLD_DEEPBIND;
    public static int RTLD_GLOBAL;
    public static int RTLD_LOCAL;
    public static int RTLD_NODELETE;
    public static IntPtr dlopen(string fileName, int flags);
    public static IntPtr dlsym(IntPtr handle, string symbol);
    public static int dlclose(IntPtr handle);
    public static IntPtr dlerror();
    public static bool CanBeLoaded(string path);
}
public static class JetBrains.Interop.Linux.LibGdk : object {
    public static string Lib;
    public static bool Exists { get; }
    public static bool get_Exists();
    public static int gdk_monitor_get_scale_factor(GdkMonitor* monitor);
    public static GdkDisplay* gdk_display_get_default();
    public static int gdk_display_get_n_monitors(GdkDisplay* display);
    public static GdkMonitor* gdk_display_get_monitor(GdkDisplay* display, int monitorNum);
    public static void gdk_monitor_get_geometry(GdkMonitor* monitor, GdkRectangle& geometry);
    public static GdkScreen* gdk_display_get_default_screen(GdkDisplay* display);
    public static IntPtr gdk_x11_screen_get_monitor_output(GdkScreen* screen, int monitorNum);
    public static int gdk_monitor_get_width_mm(GdkMonitor* monitor);
    public static int gdk_monitor_get_height_mm(GdkMonitor* monitor);
    public static bool gdk_monitor_is_primary(GdkMonitor* monitor);
    public static string gdk_monitor_get_manufacturer(GdkMonitor* monitor);
    public static string gdk_monitor_get_model(GdkMonitor* monitor);
    public static bool gdk_pixbuf_save_to_bufferv(GdkPixbuf* pixbuf, Byte** buffer, Int32* buffer_size, string type, Byte** option_keys, Byte** option_values, GError** error);
    public static GSettingsSchemaSource* g_settings_schema_source_get_default();
    public static GSettingsSchema* g_settings_schema_source_lookup(GSettingsSchemaSource* source, string schemaId, bool recursive);
    public static GSettings* g_settings_new(string schemaId);
    public static IntPtr g_settings_get_strv(GSettings* settings, string key);
}
public static class JetBrains.Interop.Linux.LibGtk : object {
    private static string Lib;
    public static bool Exists { get; }
    public static bool get_Exists();
    public static bool gtk_init_check(int argc, IntPtr argv);
    public static string g_content_type_from_mime_type(string mime_type);
    public static GIcon* g_content_type_get_icon(string type);
    public static GtkIconTheme* gtk_icon_theme_get_for_screen(GdkScreen* screen);
    public static GtkIconInfo* gtk_icon_theme_lookup_by_gicon(GtkIconTheme* icon_theme, GIcon* icon, int size, GtkIconLookupFlags flags);
    public static GdkPixbuf* gtk_icon_info_load_icon(GtkIconInfo* icon_info, GError** error);
    public static void gtk_icon_info_free(GtkIconInfo* icon_info);
    public static string g_content_type_guess(string filename, Byte* data, int data_size, bool result_uncertain);
    public static bool g_content_type_can_be_executable(string type);
}
public static class JetBrains.Interop.Linux.LibRtSo1 : object {
    private static string LibraryName;
    public static IntPtr sem_open(string name, int oflag, UInt32 mode, UInt32 value);
    public static int sem_close(IntPtr sem);
    public static int sem_unlink(string name);
    public static int sem_wait(IntPtr sem);
    public static int sem_trywait(IntPtr sem);
    public static int sem_post(IntPtr sem);
    public static int sem_getvalue(IntPtr sem, Int32& sval);
}
public class JetBrains.Interop.Linux.LibWayland : object {
    public static string Lib;
    private static WaylandStaticInterfaces staticInterfaces;
    public static int WL_OUTPUT_MODE_CURRENT;
    public static int WL_MARSHAL_FLAG_DESTROY;
    public static int WL_DISPLAY_GET_REGISTRY;
    public static int WL_REGISTRY_BIND;
    public static int ZXDG_OUTPUT_MANAGER_V1_GET_XDG_OUTPUT;
    public static int ZXDG_OUTPUT_MANAGER_V1_DESTROY;
    public static int ZXDG_OUTPUT_V1_DESTROY;
    public static bool Exists { get; }
    public static wl_interface* wl_registry_interface { get; }
    public static wl_interface* wl_output_interface { get; }
    public static wl_interface* zxdg_output_v1_interface { get; }
    public static wl_interface* zxdg_output_manager_v1_interface { get; }
    public static wl_interface* kde_output_device_v2_interface { get; }
    public static wl_interface* kde_output_device_mode_v2_interface { get; }
    private static LibWayland();
    public static bool get_Exists();
    public static wl_interface* get_wl_registry_interface();
    public static wl_interface* get_wl_output_interface();
    public static wl_interface* get_zxdg_output_v1_interface();
    public static wl_interface* get_zxdg_output_manager_v1_interface();
    public static wl_interface* get_kde_output_device_v2_interface();
    public static wl_interface* get_kde_output_device_mode_v2_interface();
    public static wl_display* wl_display_connect(string name);
    public static void wl_display_disconnect(wl_display* display);
    private static UInt32 wl_proxy_get_version(wl_proxy* proxy);
    private static wl_proxy* wl_proxy_marshal_constructor(wl_proxy* proxy, UInt32 opcode, wl_interface* interface, Void* params);
    private static wl_proxy* wl_proxy_marshal_flags_0(wl_proxy* proxy, UInt32 opcode, wl_interface* interface, UInt32 version, UInt32 flags, Void* _);
    private static wl_proxy* wl_proxy_marshal_flags_1(wl_proxy* proxy, UInt32 opcode, wl_interface* interface, UInt32 version, UInt32 flags, Void* param0, Void* _);
    private static wl_proxy* wl_proxy_marshal_flags_2(wl_proxy* proxy, UInt32 opcode, wl_interface* interface, UInt32 version, UInt32 flags, Void* param0, Void* param1, Void* _);
    private static wl_proxy* wl_proxy_marshal_flags_3(wl_proxy* proxy, UInt32 opcode, wl_interface* interface, UInt32 version, UInt32 flags, Void* param0, Void* param1, Void* param2, Void* _);
    private static wl_proxy* wl_proxy_marshal_flags_4(wl_proxy* proxy, UInt32 opcode, wl_interface* interface, UInt32 version, UInt32 flags, Void* param0, Void* param1, Void* param2, Void* param3, Void* _);
    private static int wl_proxy_add_listener(wl_proxy* proxy, Void* implementation, Void* data);
    public static int wl_display_roundtrip(wl_display* display);
    public static void wl_proxy_destroy(wl_proxy* proxy);
    public static UInt32 wl_proxy_get_id(wl_proxy* proxy);
    public static wl_registry* wl_display_get_registry(wl_display* wl_display);
    public static int wl_registry_add_listener(wl_registry* wl_registry, wl_registry_listener* listener, Void* data);
    public static Void* wl_registry_bind(wl_registry* wl_registry, UInt32 name, wl_interface* interface, UInt32 version);
    public static int wl_output_add_listener(wl_output* wl_output, wl_output_listener* listener, Void* data);
    public static zxdg_output_v1* zxdg_output_manager_v1_get_xdg_output(zxdg_output_manager_v1* zxdg_output_manager_v1, wl_output* output);
    public static int zxdg_output_v1_add_listener(zxdg_output_v1* zxdg_output_v1, zxdg_output_v1_listener* listener, Void* data);
    public static void zxdg_output_manager_v1_destroy(zxdg_output_manager_v1* zxdg_output_manager_v1);
    public static void zxdg_output_v1_destroy(zxdg_output_v1* zxdg_output_v1);
    public static void wl_output_destroy(wl_output* wl_output);
    public static void wl_registry_destroy(wl_registry* wl_registry);
    public static int kde_output_device_v2_add_listener(kde_output_device_v2* kde_output_device_v2, kde_output_device_v2_listener* listener, Void* data);
    public static void kde_output_device_v2_destroy(kde_output_device_v2* kde_output_device_v2);
    public static int kde_output_device_mode_v2_add_listener(kde_output_device_mode_v2* kde_output_device_mode_v2, kde_output_device_mode_v2_listener* listener, Void* data);
    public static void kde_output_device_mode_v2_destroy(kde_output_device_mode_v2* kde_output_device_mode_v2);
}
public static class JetBrains.Interop.Linux.LibX11 : object {
    public static string Lib;
    private static Lazy`1<IntPtr> ourXDisplay;
    public static bool Exists { get; }
    public static Display* Display { get; }
    private static LibX11();
    public static bool get_Exists();
    public static Display* get_Display();
    private static Display* XOpenDisplay(string display);
    public static int XFlush(Display* display);
    public static IntPtr XSetErrorHandler(IntPtr handler);
    public static int XCloseDisplay(Display* display);
    public static SByte* XResourceManagerString(Display* display);
    public static SByte* XGetAtomName(Display* display, Atom atom);
    public static int XSetInputFocus(Display* display, Window focus, int revert_to, Time time);
    public static Atom XInternAtom(Display* display, string atom_name, bool only_if_exists);
    public static int XSendEvent(Display* display, Window w, bool propagate, EventMask event_mask, Void* event_send);
    public static int XMapRaised(Display* display, Window w);
    public static int XRaiseWindow(Display* display, Window w);
    public static int XGetTextProperty(Display* display, Window w, XTextProperty& text_prop_return, Atom property);
    public static int XGetWindowProperty(Display* display, Window w, Atom property, long long_offset, int long_length, bool delete, Atom req_type, Atom& actual_type_return, Int32& actual_format_return, Int32& nitems_return, Int32& bytes_after_return, Void*& prop_return);
    public static int XChangeProperty(Display* display, Window w, Atom property, Atom type, int format, int mode, Void* data, int nelements);
    public static int XFree(Void* data);
    public static Window XDefaultRootWindow(Display* display);
    public static int XQueryTree(Display* display, Window w, Window& root_return, Window& parent_return, Window*& children_return, Int32& nchildren_return);
    public static int XkbGetState(Display* display, UInt32 device_spec, XkbStateRec& state_return);
    public static int XInitThreads();
    public static bool XQueryPointer(Display* display, Window w, Window& root_return, Window& child_return, Int32& root_x_return, Int32& root_y_return, Int32& win_x_return, Int32& win_y_return, UInt32& mask_return);
    public static bool XQueryExtension(Display* display, string name, Int32& major_opcode_return, Int32& first_event_return, Int32& first_error_return);
    public static int XDefaultScreen(Display* display);
    public static Window XCreateSimpleWindow(Display* display, Window parent, int x, int y, UInt32 width, UInt32 height, UInt32 border_width, ulong border, ulong background);
    public static Window XRootWindow(Display* display, int screen_number);
    public static ulong XBlackPixel(Display* display, int screen_number);
    public static ulong XWhitePixel(Display* display, int screen_number);
    public static int XSelectInput(Display* display, Window w, EventMask event_mask);
    public static int XMapWindow(Display* display, Window w);
    public static int XSetWMProtocols(Display* display, Window w, Atom* protocols, int count);
    public static Font XLoadFont(Display* display, string name);
    public static XGC XCreateGC(Display* display, Drawable d, XGCFlags valuemask, XGCValues* values);
    public static int XUnmapWindow(Display* display, Window w);
    public static XFontSet XCreateFontSet(Display* display, string base_font_name_list, Byte*** missing_charset_list_return, Int32* missing_charset_count_return, Byte** def_string_return);
    public static void XFreeStringList(Byte** list);
    public static Colormap XDefaultColormap(Display* display, int screen_number);
    public static int XmbTextExtents(XFontSet font_set, string string, int num_wchars, XRectangle* overall_ink_return, XRectangle* overall_logical_return);
    public static void XmbDrawString(Display* display, Drawable d, XFontSet font_set, XGC gc, int x, int y, string string, int num_wchars);
    public static void XSetWMNormalHints(Display* display, Window w, XSizeHints* hints);
    public static int XAllocColor(Display* display, Colormap colormap, XColor* screen_in_out);
    public static int XSetForeground(Display* display, XGC gc, ulong foreground);
    public static int XDestroyWindow(Display* display, Window w);
    public static void XFreeFontSet(Display* display, XFontSet font_set);
    public static int XFreeColormap(Display* display, Colormap colormap);
    public static int XFreeGC(Display* display, XGC gc);
    public static int XNextEvent(Display* display, XEvent* event_return);
    public static int XFillRectangle(Display* display, Drawable d, XGC gc, int x, int y, UInt32 width, UInt32 height);
    public static int XMoveWindow(Display* display, Window w, int x, int y);
    public static int XQueryKeymap(Display* display, Byte[] keys_return);
    public static KeyCode XKeysymToKeycode(Display* display, KeySym keysym);
    public static int XGetEventData(Display* display, XGenericEventCookie* cookie);
    public static void XFreeEventData(Display* display, XGenericEventCookie* cookie);
}
public static class JetBrains.Interop.Linux.LibXi : object {
    public static string Lib;
    public static bool Exists { get; }
    public static bool get_Exists();
    public static XExtensionVersion* XGetExtensionVersion(Display* display, string name);
    public static XDeviceInfo* XListInputDevices(Display* display, Int32& ndevices);
    public static void XFreeDeviceList(XDeviceInfo* list);
    public static XDevice* XOpenDevice(Display* display, XID id);
    public static int XCloseDevice(Display* display, XDevice* device);
    public static XDeviceState* XQueryDeviceState(Display* display, XDevice* device);
    public static void XFreeDeviceState(XDeviceState* list);
}
public static class JetBrains.Interop.Linux.LibXRandr : object {
    public static string Lib;
    public static bool Exists { get; }
    public static bool get_Exists();
    public static XRRMonitorInfo* XRRGetMonitors(Display* dpy, Window window, bool getActive, Int32& nMonitors);
    public static void XRRFreeMonitors(XRRMonitorInfo* monitors);
    public static XRRScreenResources* XRRGetScreenResources(Display* dpy, Window window);
    public static XRROutputInfo* XRRGetOutputInfo(Display* dpy, XRRScreenResources* resources, RROutput output);
    public static int XRRGetCrtcTransform(Display* dpy, RRCrtc crtc, XRRCrtcTransformAttributes*& attributes);
    public static Atom* XRRListOutputProperties(Display* dpy, RROutput output, Int32& nprop);
    public static void XRRFreeOutputInfo(XRROutputInfo* outputInfo);
    public static void XRRFreeScreenResources(XRRScreenResources* resources);
}
[FlagsAttribute]
public enum JetBrains.Interop.Linux.OpenFlags : Enum {
    public int value__;
    public static OpenFlags O_RDONLY;
    public static OpenFlags O_WRONLY;
    public static OpenFlags O_RDWR;
    public static OpenFlags O_ACCMODE;
    public static OpenFlags O_CREAT;
    public static OpenFlags O_EXCL;
    public static OpenFlags O_NOCTTY;
    public static OpenFlags O_TRUNC;
    public static OpenFlags O_APPEND;
    public static OpenFlags O_NONBLOCK;
    public static OpenFlags O_SYNC;
    public static OpenFlags O_DSYNC;
    public static OpenFlags O_RSYNC;
    public static OpenFlags O_DIRECTORY;
    public static OpenFlags O_NOFOLLOW;
    public static OpenFlags O_CLOEXEC;
}
public class JetBrains.Interop.Linux.passwd : ValueType {
    public Byte* pw_name;
    public Byte* pw_passwd;
    public UInt32 pw_uid;
    public UInt32 pw_gid;
    public Byte* pw_gecos;
    public Byte* pw_dir;
    public Byte* pw_shell;
}
public class JetBrains.Interop.Linux.Pixmap : ValueType {
    private IntPtr data;
}
public class JetBrains.Interop.Linux.RRCrtc : ValueType {
    private XID data;
}
public class JetBrains.Interop.Linux.RRMode : ValueType {
    private XID data;
}
public class JetBrains.Interop.Linux.RROutput : ValueType {
    public XID xid;
}
public static class JetBrains.Interop.Linux.RTLD : object {
    public static int RTLD_LAZY;
    public static int RTLD_NOW;
    public static int RTLD_NOLOAD;
    public static int RTLD_DEEPBIND;
    public static int RTLD_LOCAL;
    public static int RTLD_GLOBAL;
    public static int RTLD_NODELETE;
    private static RTLD();
}
public class JetBrains.Interop.Linux.shmid_ds : ValueType {
    public ipc_perm shm_perm;
    public IntPtr shm_segsz;
    public int shm_lpid;
    public int shm_cpid;
    public ushort shm_nattch;
    public ulong shm_atime;
    public ulong shm_dtime;
    public ulong shm_ctime;
    public Void* shm_internal;
}
[FlagsAttribute]
public enum JetBrains.Interop.Linux.SizeHintFlags : Enum {
    public long value__;
    public static SizeHintFlags USPosition;
    public static SizeHintFlags USSize;
    public static SizeHintFlags PPosition;
    public static SizeHintFlags PSize;
    public static SizeHintFlags PMinSize;
    public static SizeHintFlags PMaxSize;
    public static SizeHintFlags PResizeInc;
    public static SizeHintFlags PAspect;
    public static SizeHintFlags PBaseSize;
    public static SizeHintFlags PWinGravity;
    public static SizeHintFlags PAllHints;
}
public class JetBrains.Interop.Linux.SubpixelOrder : ValueType {
    private ushort data;
}
public class JetBrains.Interop.Linux.Time : ValueType {
    private IntPtr data;
}
public class JetBrains.Interop.Linux.WaylandStaticInterfaces : object {
    private IntPtr libWayland;
    private Dictionary`2<string, IntPtr> allocatedStrings;
    private List`1<IntPtr> allocations;
    [CompilerGeneratedAttribute]
private wl_interface* <wl_registry_interface>k__BackingField;
    [CompilerGeneratedAttribute]
private wl_interface* <wl_output_interface>k__BackingField;
    [CompilerGeneratedAttribute]
private wl_interface* <zxdg_output_manager_v1_interface>k__BackingField;
    [CompilerGeneratedAttribute]
private wl_interface* <zxdg_output_v1_interface>k__BackingField;
    [CompilerGeneratedAttribute]
private wl_interface* <kde_output_device_v2_interface>k__BackingField;
    [CompilerGeneratedAttribute]
private wl_interface* <kde_output_device_mode_v2_interface>k__BackingField;
    public wl_interface* wl_registry_interface { get; }
    public wl_interface* wl_output_interface { get; }
    public wl_interface* zxdg_output_manager_v1_interface { get; }
    public wl_interface* zxdg_output_v1_interface { get; }
    public wl_interface* kde_output_device_v2_interface { get; }
    public wl_interface* kde_output_device_mode_v2_interface { get; }
    [CompilerGeneratedAttribute]
public wl_interface* get_wl_registry_interface();
    [CompilerGeneratedAttribute]
public wl_interface* get_wl_output_interface();
    [CompilerGeneratedAttribute]
public wl_interface* get_zxdg_output_manager_v1_interface();
    [CompilerGeneratedAttribute]
public wl_interface* get_zxdg_output_v1_interface();
    [CompilerGeneratedAttribute]
public wl_interface* get_kde_output_device_v2_interface();
    [CompilerGeneratedAttribute]
public wl_interface* get_kde_output_device_mode_v2_interface();
    private Void* AllocateArray(T[] values);
    private SByte* GetStringPtr(string text);
    private void ReleaseUnmanagedResources();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
}
public class JetBrains.Interop.Linux.Window : ValueType {
    private XID data;
    public Window(IntPtr handle);
}
public class JetBrains.Interop.Linux.wl_display : ValueType {
}
public class JetBrains.Interop.Linux.wl_fixed_t : ValueType {
    private int data;
    public static double op_Implicit(wl_fixed_t value);
    public static float op_Implicit(wl_fixed_t value);
}
public class JetBrains.Interop.Linux.wl_interface : ValueType {
    public SByte* name;
    public int version;
    public int method_count;
    public wl_message* methods;
    public int event_count;
    public wl_message* events;
}
public class JetBrains.Interop.Linux.wl_message : ValueType {
    public SByte* name;
    public SByte* signature;
    public wl_interface** types;
}
public class JetBrains.Interop.Linux.wl_output : ValueType {
}
public class JetBrains.Interop.Linux.wl_output_listener : ValueType {
    public IntPtr geometry;
    public IntPtr mode;
    public IntPtr done;
    public IntPtr scale;
    public wl_output_listener(geometry_callback geometry, mode_callback mode, done_callback done, scale_callback scale, Action& keepAlive);
}
public class JetBrains.Interop.Linux.wl_proxy : ValueType {
}
public class JetBrains.Interop.Linux.wl_registry : ValueType {
}
public class JetBrains.Interop.Linux.wl_registry_listener : ValueType {
    public IntPtr global;
    public IntPtr global_remove;
    public wl_registry_listener(global_callback global, global_revove_callback global_remove, Action& keepAlive);
}
public class JetBrains.Interop.Linux.X11 : object {
    public static int XkbUseCoreKbd;
    public static int RevertToParent;
    public static int PropModeAppend;
    public static int PropModePrepend;
    public static int PropModeReplace;
    public static int Button1;
    public static int Button2;
    public static int Button3;
    public static int Button4;
    public static int Button5;
    public static Atom XA_ATOM;
    private static X11();
}
public static class JetBrains.Interop.Linux.X64 : object {
}
public class JetBrains.Interop.Linux.XAnyClassinfo : ValueType {
    public XID class;
    public int length;
}
public class JetBrains.Interop.Linux.XAnyEvent : ValueType {
    public int type;
    public IntPtr serial;
    public int send_event;
    public Display* display;
    public Window window;
}
public class JetBrains.Interop.Linux.XButtonEvent : ValueType {
    public int type;
    public ulong serial;
    public int send_event;
    public Display* display;
    public Window window;
    public Window root;
    public Window subwindow;
    public Time time;
    public int x;
    public int y;
    public int x_root;
    public int y_root;
    public UInt32 state;
    public UInt32 button;
    public int same_screen;
}
public class JetBrains.Interop.Linux.XButtonState : ValueType {
    public XInputDeviceClass class;
    public byte length;
    public short num_buttons;
    [FixedBufferAttribute("System.Byte", "32")]
public <buttons>e__FixedBuffer buttons;
}
public class JetBrains.Interop.Linux.XClientMessageEvent : ValueType {
    public static int ClientMessage;
    public int type;
    public UInt32 serial;
    public int send_event;
    public Display* display;
    public Window window;
    public Atom message_type;
    public int format;
    public XClientMessageEventData data;
}
public class JetBrains.Interop.Linux.XColor : ValueType {
    public ulong pixel;
    public ushort red;
    public ushort green;
    public ushort blue;
    public XColorFlags flags;
    public byte pad;
}
[FlagsAttribute]
public enum JetBrains.Interop.Linux.XColorFlags : Enum {
    public byte value__;
    public static XColorFlags DoRed;
    public static XColorFlags DoGreen;
    public static XColorFlags DoBlue;
}
public class JetBrains.Interop.Linux.XDevice : ValueType {
    public XID device_id;
    public int num_classes;
    public XInputClassInfo* classes;
}
public class JetBrains.Interop.Linux.XDeviceInfo : ValueType {
    public XID id;
    public Atom type;
    public SByte* name;
    public int num_classes;
    public XInputDeviceUse use;
    public XAnyClassinfo* inputclassinfo;
}
public class JetBrains.Interop.Linux.XDeviceState : ValueType {
    public XID device_id;
    public int num_classes;
    public XInputClass* data;
}
public class JetBrains.Interop.Linux.XErrorEvent : ValueType {
    public int type;
    public Display* display;
    public int serial;
    public byte error_code;
    public byte request_code;
    public byte minor_code;
    public XID resourceid;
}
public class JetBrains.Interop.Linux.XErrorHandler : MulticastDelegate {
    public XErrorHandler(object object, IntPtr method);
    public virtual int Invoke(Display* display, XErrorEvent* errorEvent);
    public virtual IAsyncResult BeginInvoke(Display* display, XErrorEvent* errorEvent, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
public class JetBrains.Interop.Linux.XEvent : ValueType {
    public Event type;
    public XAnyEvent xany;
    public XButtonEvent xbutton;
    public XMotionEvent xmotion;
    public XClientMessageEvent xclient;
    public XGenericEventCookie GenericEventCookie;
    [FixedBufferAttribute("System.Int64", "24")]
public <pad>e__FixedBuffer pad;
}
public class JetBrains.Interop.Linux.XExtensionVersion : ValueType {
    public int present;
    public short major_version;
    public short minor_version;
}
public class JetBrains.Interop.Linux.XFixed : ValueType {
    private int data;
    public static double op_Implicit(XFixed value);
    public static float op_Implicit(XFixed value);
}
public class JetBrains.Interop.Linux.XFontSet : ValueType {
    private IntPtr data;
}
public class JetBrains.Interop.Linux.XGC : ValueType {
    private IntPtr data;
}
[FlagsAttribute]
public enum JetBrains.Interop.Linux.XGCFlags : Enum {
    public ulong value__;
    public static XGCFlags GCFunction;
    public static XGCFlags GCPlaneMask;
    public static XGCFlags GCForeground;
    public static XGCFlags GCBackground;
    public static XGCFlags GCLineWidth;
    public static XGCFlags GCLineStyle;
    public static XGCFlags GCCapStyle;
    public static XGCFlags GCJoinStyle;
    public static XGCFlags GCFillStyle;
    public static XGCFlags GCFillRule;
    public static XGCFlags GCTile;
    public static XGCFlags GCStipple;
    public static XGCFlags GCTileStipXOrigin;
    public static XGCFlags GCTileStipYOrigin;
    public static XGCFlags GCFont;
    public static XGCFlags GCSubwindowMode;
    public static XGCFlags GCGraphicsExposures;
    public static XGCFlags GCClipXOrigin;
    public static XGCFlags GCClipYOrigin;
    public static XGCFlags GCClipMask;
    public static XGCFlags GCDashOffset;
    public static XGCFlags GCDashList;
    public static XGCFlags GCArcMode;
}
public class JetBrains.Interop.Linux.XGCValues : ValueType {
    public int function;
    public ulong plane_mask;
    public ulong foreground;
    public ulong background;
    public int line_width;
    public int line_style;
    public int cap_style;
    public int join_style;
    public int fill_style;
    public int fill_rule;
    public int arc_mode;
    public Pixmap tile;
    public Pixmap stipple;
    public int ts_x_origin;
    public int ts_y_origin;
    public Font font;
    public int subwindow_mode;
    public int graphics_exposures;
    public int clip_x_origin;
    public int clip_y_origin;
    public Pixmap clip_mask;
    public int dash_offset;
    public byte dashes;
}
public class JetBrains.Interop.Linux.XGenericEventCookie : ValueType {
    public int type;
    public ulong serial;
    public int send_event;
    public Display* display;
    public int extension;
    public int evtype;
    public UInt32 cookie;
    public Void* data;
}
public static class JetBrains.Interop.Linux.Xi : object {
    public static string INAME;
    public static XExtensionVersion* NoSuchExtension { get; }
    public static XExtensionVersion* get_NoSuchExtension();
}
public class JetBrains.Interop.Linux.XIButtonState : ValueType {
    public int MaskLen;
    public Byte* Mask;
}
public class JetBrains.Interop.Linux.XID : ValueType {
    private IntPtr data;
    public static IntPtr op_Implicit(XID value);
    public static XID op_Implicit(IntPtr value);
}
public class JetBrains.Interop.Linux.XIDeviceEvent : ValueType {
    public int type;
    public IntPtr serial;
    public int send_event;
    public Display* display;
    public int extension;
    public XiEventType evtype;
    public IntPtr time;
    public int deviceid;
    public int sourceid;
    public int detail;
    public Window RootWindow;
    public Window EventWindow;
    public Window ChildWindow;
    public double root_x;
    public double root_y;
    public double event_x;
    public double event_y;
    public XiDeviceEventFlags flags;
    public XIButtonState buttons;
    public XIValuatorState valuators;
    public XIModifierState mods;
    public XIModifierState group;
}
[FlagsAttribute]
public enum JetBrains.Interop.Linux.XiDeviceEventFlags : Enum {
    public int value__;
    public static XiDeviceEventFlags None;
    public static XiDeviceEventFlags XIPointerEmulated;
}
public enum JetBrains.Interop.Linux.XiEnterLeaveDetail : Enum {
    public int value__;
    public static XiEnterLeaveDetail XINotifyAncestor;
    public static XiEnterLeaveDetail XINotifyVirtual;
    public static XiEnterLeaveDetail XINotifyInferior;
    public static XiEnterLeaveDetail XINotifyNonlinear;
    public static XiEnterLeaveDetail XINotifyNonlinearVirtual;
    public static XiEnterLeaveDetail XINotifyPointer;
    public static XiEnterLeaveDetail XINotifyPointerRoot;
    public static XiEnterLeaveDetail XINotifyDetailNone;
}
public class JetBrains.Interop.Linux.XIEnterLeaveEvent : ValueType {
    public int type;
    public IntPtr serial;
    public int send_event;
    public Display* display;
    public int extension;
    public XiEventType evtype;
    public IntPtr time;
    public int deviceid;
    public int sourceid;
    public XiEnterLeaveDetail detail;
    public Window RootWindow;
    public Window EventWindow;
    public Window ChildWindow;
    public double root_x;
    public double root_y;
    public double event_x;
    public double event_y;
    public int mode;
    public int focus;
    public int same_screen;
    public XIButtonState buttons;
    public XIModifierState mods;
    public XIModifierState group;
}
public class JetBrains.Interop.Linux.XIEvent : ValueType {
    public int type;
    public IntPtr serial;
    public int send_event;
    public Display* display;
    public int extension;
    public XiEventType evtype;
    public IntPtr time;
}
public enum JetBrains.Interop.Linux.XiEventType : Enum {
    public int value__;
    public static XiEventType XI_DeviceChanged;
    public static XiEventType XI_KeyPress;
    public static XiEventType XI_KeyRelease;
    public static XiEventType XI_ButtonPress;
    public static XiEventType XI_ButtonRelease;
    public static XiEventType XI_Motion;
    public static XiEventType XI_Enter;
    public static XiEventType XI_Leave;
    public static XiEventType XI_FocusIn;
    public static XiEventType XI_FocusOut;
    public static XiEventType XI_HierarchyChanged;
    public static XiEventType XI_PropertyEvent;
    public static XiEventType XI_RawKeyPress;
    public static XiEventType XI_RawKeyRelease;
    public static XiEventType XI_RawButtonPress;
    public static XiEventType XI_RawButtonRelease;
    public static XiEventType XI_RawMotion;
    public static XiEventType XI_TouchBegin;
    public static XiEventType XI_TouchUpdate;
    public static XiEventType XI_TouchEnd;
    public static XiEventType XI_TouchOwnership;
    public static XiEventType XI_RawTouchBegin;
    public static XiEventType XI_RawTouchUpdate;
    public static XiEventType XI_RawTouchEnd;
    public static XiEventType XI_BarrierHit;
    public static XiEventType XI_BarrierLeave;
    public static XiEventType XI_LASTEVENT;
}
public class JetBrains.Interop.Linux.XIModifierState : ValueType {
    public int Base;
    public int Latched;
    public int Locked;
    public int Effective;
}
public class JetBrains.Interop.Linux.XInputClass : ValueType {
    public XInputDeviceClass class;
    public byte length;
}
public class JetBrains.Interop.Linux.XInputClassInfo : ValueType {
    public byte input_class;
    public byte event_type_base;
}
public enum JetBrains.Interop.Linux.XInputDeviceClass : Enum {
    public byte value__;
    public static XInputDeviceClass KeyClass;
    public static XInputDeviceClass ButtonClass;
    public static XInputDeviceClass ValuatorClass;
    public static XInputDeviceClass FeedbackClass;
    public static XInputDeviceClass ProximityClass;
    public static XInputDeviceClass FocusClass;
    public static XInputDeviceClass OtherClass;
    public static XInputDeviceClass AttachClass;
}
public enum JetBrains.Interop.Linux.XInputDeviceUse : Enum {
    public int value__;
    public static XInputDeviceUse IsXPointer;
    public static XInputDeviceUse IsXKeyboard;
    public static XInputDeviceUse IsXExtensionDevice;
    public static XInputDeviceUse IsXExtensionKeyboard;
    public static XInputDeviceUse IsXExtensionPointer;
}
public class JetBrains.Interop.Linux.XIValuatorState : ValueType {
    public int MaskLen;
    public Byte* Mask;
    public Double* Values;
}
public class JetBrains.Interop.Linux.XkbStateRec : ValueType {
    public byte group;
    public byte base_group;
    public byte latched_group;
    public byte locked_group;
    public KeyMods mods;
    public KeyMods base_mods;
    public KeyMods latched_mods;
    public KeyMods locked_mods;
    public byte compat_state;
    public KeyMods grab_mods;
    public KeyMods compat_grab_mods;
    public KeyMods lookup_mods;
    public KeyMods compat_lookup_mods;
    public ushort ptr_buttons;
}
public class JetBrains.Interop.Linux.XKeyState : ValueType {
    public XInputDeviceClass class;
    public byte length;
    public short num_keys;
    [FixedBufferAttribute("System.Byte", "32")]
public <keys>e__FixedBuffer keys;
}
public class JetBrains.Interop.Linux.XMotionEvent : ValueType {
    public int type;
    public ulong serial;
    public int send_event;
    public Display* display;
    public Window window;
    public Window root;
    public Window subwindow;
    public Time time;
    public int x;
    public int y;
    public int x_root;
    public int y_root;
    public UInt32 state;
    public byte is_hint;
    public int same_screen;
}
public class JetBrains.Interop.Linux.XRectangle : ValueType {
    public short x;
    public short y;
    public ushort width;
    public ushort height;
}
public class JetBrains.Interop.Linux.XRRCrtcTransformAttributes : ValueType {
    public XTransform pendingTransform;
    public Byte* pendingFilter;
    public int pendingNparams;
    public XFixed* pendingParams;
    public XTransform currentTransform;
    public Byte* currentFilter;
    public int currentNparams;
    public XFixed* currentParams;
}
public class JetBrains.Interop.Linux.XRRModeFlags : ValueType {
    private IntPtr data;
}
public class JetBrains.Interop.Linux.XRRModeInfo : ValueType {
    public RRMode id;
    public UInt32 width;
    public UInt32 height;
    public IntPtr dotClock;
    public UInt32 hSyncStart;
    public UInt32 hSyncEnd;
    public UInt32 hTotal;
    public UInt32 hSkew;
    public UInt32 vSyncStart;
    public UInt32 vSyncEnd;
    public UInt32 vTotal;
    public Byte* name;
    public UInt32 nameLength;
    public XRRModeFlags modeFlags;
}
public class JetBrains.Interop.Linux.XRRMonitorInfo : ValueType {
    public Atom name;
    public int primary;
    public int automatic;
    public int noutput;
    public int x;
    public int y;
    public int width;
    public int height;
    public int mwidth;
    public int mheight;
    public RROutput* outputs;
}
public class JetBrains.Interop.Linux.XRROutputInfo : ValueType {
    public Time timestamp;
    public RRCrtc crtc;
    public Byte* name;
    public int nameLen;
    public IntPtr mm_width;
    public IntPtr mm_height;
    public Connection connection;
    public SubpixelOrder subpixel_order;
    public int ncrtc;
    public RRCrtc* crtcs;
    public int nclone;
    public RROutput* clones;
    public int nmode;
    public int npreferred;
    public RRMode* modes;
}
public class JetBrains.Interop.Linux.XRRScreenResources : ValueType {
    public Time timestamp;
    public Time configTimestamp;
    public int ncrtc;
    public RRCrtc* crtcs;
    public int noutput;
    public RROutput* outputs;
    public int nmode;
    public XRRModeInfo* modes;
}
public class JetBrains.Interop.Linux.XSizeHints : ValueType {
    public SizeHintFlags flags;
    public int x;
    public int y;
    public UInt32 width;
    public UInt32 height;
    public UInt32 min_width;
    public UInt32 min_height;
    public UInt32 max_width;
    public UInt32 max_height;
    public int width_inc;
    public int height_inc;
    public Aspect min_aspect;
    public Aspect max_aspect;
    public UInt32 base_width;
    public UInt32 base_height;
    public int win_gravity;
}
public class JetBrains.Interop.Linux.XTextProperty : ValueType {
    public SByte* value;
    public Atom encoding;
    public int format;
    public UInt32 nitems;
}
public class JetBrains.Interop.Linux.XTransform : ValueType {
    public XFixed M00;
    public XFixed M01;
    public XFixed M02;
    public XFixed M10;
    public XFixed M11;
    public XFixed M12;
    public XFixed M20;
    public XFixed M21;
    public XFixed M22;
}
public class JetBrains.Interop.Linux.zxdg_output_manager_v1 : ValueType {
}
public class JetBrains.Interop.Linux.zxdg_output_v1 : ValueType {
}
public class JetBrains.Interop.Linux.zxdg_output_v1_listener : ValueType {
    public IntPtr logical_position;
    public IntPtr logical_size;
    public IntPtr done;
    public IntPtr name;
    public IntPtr description;
    public zxdg_output_v1_listener(logical_position_callback logical_position, logical_size_callback logical_size, done_callback done, name_callback name, description_callback description, Action& keepAlive);
}
public class JetBrains.Interop.MacOsX._ucred : ValueType {
    public UInt32 cr_uid;
}
public static class JetBrains.Interop.MacOsX.ApplicationServices : object {
    private static string LibraryName;
    public static IntPtr LSCopyApplicationURLsForURL(IntPtr urlRef, LSRolesMask roleMask);
    public static int CFArrayGetCount(IntPtr theArray);
    public static IntPtr CFArrayGetValueAtIndex(IntPtr theArray, int idx);
}
public class JetBrains.Interop.MacOsX.BlockDelegate`1 : object {
    private IntPtr myLibHandle;
    private IntPtr myDescriptorAddress;
    private TDelegate myDelegate;
    [CompilerGeneratedAttribute]
private IntPtr <Address>k__BackingField;
    public IntPtr Address { get; private set; }
    public BlockDelegate`1(TDelegate d);
    [CompilerGeneratedAttribute]
public IntPtr get_Address();
    [CompilerGeneratedAttribute]
private void set_Address(IntPtr value);
    private void ReleaseUnmanagedResources();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
}
public class JetBrains.Interop.MacOsX.BlockLiteral : ValueType {
    public Void* isa;
    public BlockFlags flags;
    public int reserved;
    public IntPtr invoke;
    public BlockDescriptor* descriptor;
}
public enum JetBrains.Interop.MacOsX.CFOptionFlags : Enum {
    public int value__;
    public static CFOptionFlags kCFUserNotificationStopAlertLevel;
    public static CFOptionFlags kCFUserNotificationNoteAlertLevel;
    public static CFOptionFlags kCFUserNotificationCautionAlertLevel;
    public static CFOptionFlags kCFUserNotificationPlainAlertLevel;
    public static CFOptionFlags kCFUserNotificationDefaultResponse;
    public static CFOptionFlags kCFUserNotificationAlternateResponse;
    public static CFOptionFlags kCFUserNotificationOtherResponse;
    public static CFOptionFlags kCFUserNotificationCancelResponse;
    public static CFOptionFlags kCFUserNotificationNoDefaultButtonFlag;
    public static CFOptionFlags kCFUserNotificationUseRadioButtonsFlag;
}
public class JetBrains.Interop.MacOsX.CGDirectDisplayID : ValueType {
    private UInt32 data;
}
public class JetBrains.Interop.MacOsX.CGEvent : ValueType {
}
[FlagsAttribute]
public enum JetBrains.Interop.MacOsX.CGEventFlags : Enum {
    public long value__;
    public static CGEventFlags AlphaShift;
    public static CGEventFlags Shift;
    public static CGEventFlags Control;
    public static CGEventFlags Alternate;
    public static CGEventFlags Command;
    public static CGEventFlags NumericPad;
    public static CGEventFlags Help;
    public static CGEventFlags SecondaryFn;
    public static CGEventFlags AlphaShiftStateless;
    public static CGEventFlags NonCoalesced;
    public static CGEventFlags DeviceLeftControl;
    public static CGEventFlags DeviceLeftShift;
    public static CGEventFlags DeviceRightShift;
    public static CGEventFlags DeviceLeftCommand;
    public static CGEventFlags DeviceRightCommand;
    public static CGEventFlags DeviceLeftAlt;
    public static CGEventFlags DeviceRightAlt;
    public static CGEventFlags DeviceAlphaShiftStateless;
    public static CGEventFlags DeviceRightControl;
}
public class JetBrains.Interop.MacOsX.CGEventSource : ValueType {
}
public enum JetBrains.Interop.MacOsX.CGEventSourceStateID : Enum {
    public int value__;
    public static CGEventSourceStateID kCGEventSourceStateHIDSystemState;
}
public class JetBrains.Interop.MacOsX.CGPoint : ValueType {
    public double x;
    public double y;
}
public class JetBrains.Interop.MacOsX.CGRect : ValueType {
    public double x;
    public double y;
    public double width;
    public double height;
}
public static class JetBrains.Interop.MacOsX.CoreFoundationServices : object {
    private static string LibraryName;
    public static void CFRelease(Void* cf);
    public static void CFRelease(IntPtr cf);
    public static int CFUserNotificationDisplayAlert(double timeout, CFOptionFlags flags, IntPtr iconURL, IntPtr soundURL, IntPtr localizationURL, IntPtr alertHeader, IntPtr alertMessage, IntPtr defaultButtonTitle, IntPtr alternateButtonTitle, IntPtr otherButtonTitle, CFOptionFlags& responseFlags);
}
public static class JetBrains.Interop.MacOsX.CoreGraphicsServices : object {
    private static string LibraryName;
    public static CGEvent* CGEventCreate(CGEventSource* source);
    public static CGPoint CGEventGetLocation(CGEvent* evt);
    public static void CFRelease(Void* cf);
    public static int CGGetOnlineDisplayList(UInt32 maxDisplays, CGDirectDisplayID* onlineDisplays, UInt32& displayCount);
    public static CGRect CGDisplayBounds(CGDirectDisplayID display);
}
public static class JetBrains.Interop.MacOsX.CPU_ARCH : object {
    public static int CPU_ARCH_ABI64;
    public static int CPU_ARCH_ABI64_32;
}
public static class JetBrains.Interop.MacOsX.CPU_TYPE : object {
    public static int CPU_TYPE_ANY;
    public static int CPU_TYPE_VAX;
    public static int CPU_TYPE_MC680x0;
    public static int CPU_TYPE_X86;
    public static int CPU_TYPE_I386;
    public static int CPU_TYPE_X86_64;
    public static int CPU_TYPE_MC98000;
    public static int CPU_TYPE_HPPA;
    public static int CPU_TYPE_ARM;
    public static int CPU_TYPE_ARM64;
    public static int CPU_TYPE_ARM64_32;
    public static int CPU_TYPE_MC88000;
    public static int CPU_TYPE_SPARC;
    public static int CPU_TYPE_I860;
    public static int CPU_TYPE_POWERPC;
    public static int CPU_TYPE_POWERPC64;
}
public class JetBrains.Interop.MacOsX.eproc : ValueType {
    public _ucred e_ucred;
}
public static class JetBrains.Interop.MacOsX.ERRNO : object {
    public static int EPERM;
    public static int ENOENT;
    public static int ESRCH;
    public static int EINTR;
    public static int EIO;
    public static int ENXIO;
    public static int E2BIG;
    public static int ENOEXEC;
    public static int EBADF;
    public static int ECHILD;
    public static int EDEADLK;
    public static int ENOMEM;
    public static int EFAULT;
    public static int EBUSY;
    public static int EEXIST;
    public static int EXDEV;
    public static int ENODEV;
    public static int ENOTDIR;
    public static int EISDIR;
    public static int EINVAL;
    public static int ENFILE;
    public static int EMFILE;
    public static int ENOTTY;
    public static int ETXTBSY;
    public static int EFBIG;
    public static int ENOSPC;
    public static int ESPIPE;
    public static int EROFS;
    public static int EMLINK;
    public static int EPIPE;
    public static int EDOM;
    public static int ERANGE;
    public static int EAGAIN;
    public static int EWOULDBLOCK;
    public static int EINPROGRESS;
    public static int EALREADY;
    public static int ENOTSOCK;
    public static int EDESTADDRREQ;
    public static int EMSGSIZE;
    public static int EPROTOTYPE;
    public static int ENOPROTOOPT;
    public static int EPROTONOSUPPORT;
    public static int ENOTSUP;
    public static int EOPNOTSUPP;
    public static int EAFNOSUPPORT;
    public static int EADDRINUSE;
    public static int EADDRNOTAVAIL;
    public static int ENETDOWN;
    public static int ENETUNREACH;
    public static int ENETRESET;
    public static int ECONNABORTED;
    public static int ECONNRESET;
    public static int ENOBUFS;
    public static int EISCONN;
    public static int ENOTCONN;
    public static int ETIMEDOUT;
    public static int ECONNREFUSED;
    public static int ELOOP;
    public static int ENAMETOOLONG;
    public static int EHOSTUNREACH;
    public static int ENOTEMPTY;
    public static int EDQUOT;
    public static int ESTALE;
    public static int ENOLCK;
    public static int ENOSYS;
    public static int EOVERFLOW;
    public static int ECANCELED;
    public static int EIDRM;
    public static int ENOMSG;
    public static int EILSEQ;
    public static int EBADMSG;
    public static int EMULTIHOP;
    public static int ENODATA;
    public static int ENOLINK;
    public static int ENOSR;
    public static int ENOSTR;
    public static int EPROTO;
    public static int ETIME;
    public static int ENOTRECOVERABLE;
    public static int EOWNERDEAD;
}
public class JetBrains.Interop.MacOsX.extern_proc : ValueType {
    public int p_flag;
}
public enum JetBrains.Interop.MacOsX.HostInfo : Enum {
    public int value__;
    public static HostInfo HOST_LOAD_INFO;
    public static HostInfo HOST_VM_INFO;
    public static HostInfo HOST_CPU_LOAD_INFO;
    public static HostInfo HOST_VM_INFO64;
    public static HostInfo HOST_EXTMOD_INFO64;
    public static HostInfo HOST_EXPIRED_TASK_INFO;
}
public class JetBrains.Interop.MacOsX.ipc_perm : ValueType {
    public int uid;
    public int gid;
    public int cuid;
    public int cgid;
    public ushort mode;
    public ushort _seq;
    public int _key;
}
public static class JetBrains.Interop.MacOsX.KERN_RETURN_T : object {
    public static int KERN_SUCCESS;
}
public class JetBrains.Interop.MacOsX.kinfo_proc : ValueType {
    public extern_proc kp_proc;
    public eproc kp_eproc;
}
public static class JetBrains.Interop.MacOsX.LibDyldDylib : object {
    private static string LibraryName;
    public static IntPtr dlopen(string fileName, int flags);
    public static IntPtr dlsym(IntPtr handle, string symbol);
    public static int dlclose(IntPtr handle);
    public static IntPtr dlerror();
}
public static class JetBrains.Interop.MacOsX.LibObjC : object {
    private static string Lib;
    public static IntPtr objc_getClass(string name);
    public static Selector* sel_registerName(string name);
    public static IntPtr class_getInstanceMethod(IntPtr cls, Selector* name);
    public static IntPtr objc_allocateClassPair(IntPtr superclass, string name, int extraBytes);
    public static IntPtr objc_getMetaClass(string name);
    public static void objc_registerClassPair(IntPtr cls);
    public static IntPtr method_getTypeEncoding(IntPtr m);
    public static IntPtr imp_implementationWithBlock(BlockLiteral* block);
    public static IntPtr class_replaceMethod(IntPtr cls, Selector* name, IntPtr imp, string types);
    public static bool class_addMethod(IntPtr cls, Selector* name, IntPtr imp, string types);
    public static bool class_addMethod(IntPtr cls, Selector* name, IntPtr imp, IntPtr types);
    public static long objc_msgSend_long(IntPtr receiver, Selector* selector, IntPtr arg0);
    public static void objc_msgSend_void(IntPtr receiver, Selector* selector);
    public static void objc_msgSend_void(IntPtr receiver, Selector* selector, IntPtr arg0);
    public static void objc_msgSend_void(IntPtr receiver, Selector* selector, IntPtr arg0, IntPtr arg1, IntPtr arg2, int arg3);
    public static IntPtr objc_msgSend_ptr(IntPtr receiver, Selector* selector);
    public static int objc_msgSend_int(IntPtr receiver, Selector* selector);
    public static IntPtr objc_msgSend_ptr(IntPtr receiver, Selector* selector, IntPtr arg0, IntPtr arg1);
    public static IntPtr objc_msgSend_ptr(IntPtr receiver, Selector* selector, IntPtr arg0, IntPtr arg1, IntPtr arg2);
    public static bool objc_msgSend_ptr(IntPtr receiver, Selector* selector, IntPtr arg0, IntPtr arg1, UInt32 arg2);
    public static IntPtr objc_msgSend_ptr(IntPtr receiver, Selector* selector, IntPtr arg0, IntPtr arg1, IntPtr arg2, IntPtr arg3);
    public static IntPtr objc_msgSend_ptr(IntPtr receiver, Selector* selector, IntPtr arg);
    public static IntPtr objc_msgSend_ptr(IntPtr receiver, Selector* selector, int arg);
    public static IntPtr objc_msgSend_ptr(IntPtr receiver, Selector* selector, double arg);
    public static IntPtr objc_msgSend_ptr(IntPtr receiver, Selector* selector, UInt32 arg);
    public static IntPtr objc_msgSend_ptr(IntPtr receiver, Selector* selector, UInt32 arg0, IntPtr arg1, IntPtr arg2, UInt32 arg3);
    public static IntPtr objc_msgSend_ptr(IntPtr receiver, Selector* selector, ulong arg0, IntPtr arg1);
    public static IntPtr objc_msgSend_ptr(IntPtr receiver, Selector* selector, int arg0, IntPtr arg1);
}
public static class JetBrains.Interop.MacOsX.LibSystemCDylib : object {
    private static string LibraryName;
    public static int CTL_MAXNAME;
    public static int sysctl(Int32* name, UInt32 namelen, Void* oldp, UInt64* oldlenp, Void* newp, ulong newlen);
    public static int sysctlbyname(string name, Void* oldp, UInt64* oldlenp, Void* newp, ulong newlen);
    public static int sysctlnametomib(string name, Int32* mibp, UInt64* sizep);
    public static int getpagesize();
    public static int mach_timebase_info(mach_timebase_info_data_t* info);
}
public static class JetBrains.Interop.MacOsX.LibSystemInfoDylib : object {
    private static string LibraryName;
    public static passwd* getpwuid(UInt32 uid);
}
public static class JetBrains.Interop.MacOsX.LibSystemKernelDylib : object {
    private static string LibraryName;
    private static IntPtr sem_open_X86_64ABIVaList(string name, int oflag, ushort mode, UInt32 value);
    private static IntPtr sem_open_CharPtrVaList(string name, int oflag, ulong __x2, ulong __x3, ulong __x4, ulong __x5, ulong __x6, ulong __x7, ulong mode, UInt32 value);
    public static int sem_close(IntPtr sem);
    public static int sem_unlink(string name);
    public static int sem_wait(IntPtr sem);
    public static int sem_timedwait(IntPtr sem, timespec& abs_timeout);
    public static int sem_trywait(IntPtr sem);
    public static int sem_post(IntPtr sem);
    public static int sem_getvalue(IntPtr sem, Int32& sval);
    public static int proc_pidinfo(int pid, ProcPidInfoFlavor flavor, ulong arg, Void* buffer, int buffersize);
    private static int proc_pidpath(int pid, Byte* buffer, UInt32 bufferSize);
    private static int stat(string path, Void* stat);
    private static int stat_INODE64(string path, Void* stat);
    private static int fstat(int fildes, Void* stat);
    private static int fstat_INODE64(int fildes, Void* stat);
    private static UInt32 mach_task_self();
    private static UInt32 mach_host_self();
    private static int mach_port_deallocate(UInt32 task, UInt32 name);
    public static int mach_timebase_info(mach_timebase_info& info);
    private static int host_page_size(UInt32 host, UInt64* out_page_size);
    private static int host_statistics64(UInt32 host_priv, int flavor, Int32* host_info64_out, UInt32* host_info64_outCnt);
    public static IntPtr listxattr(string path, Byte* namebuf, IntPtr size, int options);
}
[FlagsAttribute]
public enum JetBrains.Interop.MacOsX.LSRolesMask : Enum {
    public UInt32 value__;
    public static LSRolesMask None;
    public static LSRolesMask Viewer;
    public static LSRolesMask Editor;
    public static LSRolesMask Shell;
    public static LSRolesMask All;
}
public class JetBrains.Interop.MacOsX.mach_timebase_info : ValueType {
    public UInt32 numer;
    public UInt32 denom;
}
public class JetBrains.Interop.MacOsX.mach_timebase_info_data_t : ValueType {
    public UInt32 numer;
    public UInt32 denom;
}
public class JetBrains.Interop.MacOsX.MacOsApplicationDelegateManager : object {
    private static BlockDelegate`1<ClickHandlerDelegate> ourReopenBlock;
    private static BlockDelegate`1<CloseHandlerDelegate> ourCloseBlock;
    [CompilerGeneratedAttribute]
private static EventHandler`1<ShouldHandleReopenEventArgs> ShouldHandleReopen;
    [CompilerGeneratedAttribute]
private static EventHandler`1<CancelEventArgs> ShouldHandleClose;
    private static MacOsApplicationDelegateManager();
    [CompilerGeneratedAttribute]
public static void add_ShouldHandleReopen(EventHandler`1<ShouldHandleReopenEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_ShouldHandleReopen(EventHandler`1<ShouldHandleReopenEventArgs> value);
    [CompilerGeneratedAttribute]
public static void add_ShouldHandleClose(EventHandler`1<CancelEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_ShouldHandleClose(EventHandler`1<CancelEventArgs> value);
    private static bool CloseHandler(IntPtr block, IntPtr self, IntPtr cmd, IntPtr nsapp);
    private static bool ReopenHandler(IntPtr block, IntPtr self, IntPtr cmd, IntPtr nsapp, bool flag);
    [CompilerGeneratedAttribute]
internal static void <.cctor>g__ReplaceMethod|10_0(string name, BlockDelegate`1<T> blockDelegate, <>c__DisplayClass10_0& );
}
public class JetBrains.Interop.MacOsX.MacOsNotificationCenterManager : object {
    public static void Send(string name, bool immediately);
    public static MacOsNotificationCenterSubscription Subscribe(string name);
}
public class JetBrains.Interop.MacOsX.MacOsNotificationCenterSubscription : object {
    private IntPtr myObserver;
    private BlockDelegate`1<DistributedNotificationHandlerDelegate> myBlock;
    [CompilerGeneratedAttribute]
private EventHandler`1<MacOsNotificationEventArgs> Notification;
    internal MacOsNotificationCenterSubscription(string notificationName);
    [CompilerGeneratedAttribute]
public void add_Notification(EventHandler`1<MacOsNotificationEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Notification(EventHandler`1<MacOsNotificationEventArgs> value);
    private void DistributedNotificationHandler(IntPtr block, IntPtr notification);
    private void ReleaseUnmanagedResources();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
}
public class JetBrains.Interop.MacOsX.MacOsNotificationEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <EventName>k__BackingField;
    public string EventName { get; }
    public MacOsNotificationEventArgs(string eventName);
    [CompilerGeneratedAttribute]
public string get_EventName();
}
[FlagsAttribute]
public enum JetBrains.Interop.MacOsX.NsActivityOptions : Enum {
    public ulong value__;
    public static NsActivityOptions IdleDisplaySleepDisabled;
    public static NsActivityOptions IdleSystemSleepDisabled;
    public static NsActivityOptions SuddenTerminationDisabled;
    public static NsActivityOptions AutomaticTerminationDisabled;
    public static NsActivityOptions UserInitiated;
    public static NsActivityOptions Background;
    public static NsActivityOptions LatencyCritical;
    public static NsActivityOptions InitiatedAllowingIdleSystemSleep;
}
public enum JetBrains.Interop.MacOsX.NSApplicationActivationPolicy : Enum {
    public int value__;
    public static NSApplicationActivationPolicy NSApplicationActivationPolicyRegular;
    public static NSApplicationActivationPolicy NSApplicationActivationPolicyAccessory;
    public static NSApplicationActivationPolicy NSApplicationActivationPolicyProhibited;
}
public enum JetBrains.Interop.MacOsX.NSBitmapImageFileType : Enum {
    public int value__;
    public static NSBitmapImageFileType TIFF;
    public static NSBitmapImageFileType BMP;
    public static NSBitmapImageFileType GIF;
    public static NSBitmapImageFileType JPEG;
    public static NSBitmapImageFileType PNG;
    public static NSBitmapImageFileType JPEG2000;
}
public class JetBrains.Interop.MacOsX.Obj : object {
    private IntPtr myHandle;
    [CompilerGeneratedAttribute]
private static ClassMap <Class>k__BackingField;
    [CompilerGeneratedAttribute]
private static SelectorMap <Selector>k__BackingField;
    public static ClassMap Class { get; }
    private static SelectorMap Selector { get; }
    public Obj(IntPtr handle);
    private static Obj();
    public sealed virtual void Dispose();
    public static Obj op_Implicit(IntPtr value);
    public static IntPtr op_Implicit(Obj value);
    [CompilerGeneratedAttribute]
public static ClassMap get_Class();
    [CompilerGeneratedAttribute]
private static SelectorMap get_Selector();
    public Obj Select(string selector);
    public Obj Select(string selector, IntPtr arg0);
    public Obj Select(string selector, IntPtr arg0, IntPtr arg1);
    public Obj Select(string selector, int arg0, IntPtr arg1);
    public Obj Select(string selector, IntPtr arg0, IntPtr arg1, IntPtr arg2);
    public bool SelectBool(string selector, IntPtr arg0, IntPtr arg1, UInt32 arg2);
    public Obj Select(string selector, IntPtr arg0, IntPtr arg1, IntPtr arg2, IntPtr arg3);
    public long SelectLong(string selector, IntPtr arg0);
    public Obj Select(string selector, int arg0);
    public Obj Select(string selector, double arg0);
    public Obj Select(string selector, UInt32 arg0);
    public Obj Select(string selector, UInt32 arg0, IntPtr arg1, IntPtr arg2, UInt32 arg3);
    public void SelectVoid(string selector);
    public void SelectVoid(string selector, IntPtr arg0);
    public void SelectVoid(string selector, IntPtr arg0, IntPtr arg1, IntPtr arg2, int arg3);
    public Obj Select(string selector, string arg0, Nullable`1<int> arg1);
    public int SelectInt(string selector);
    public IntPtr SelectPtr(string selector);
    public string SelectString(string selector);
}
[ExtensionAttribute]
public static class JetBrains.Interop.MacOsX.ObjcRuntime : object {
    [ExtensionAttribute]
public static IntPtr CreateNsString(string s);
}
[FlagsAttribute]
public enum JetBrains.Interop.MacOsX.OpenFlags : Enum {
    public int value__;
    public static OpenFlags O_RDWR;
    public static OpenFlags O_CREAT;
    public static OpenFlags O_EXCL;
}
public static class JetBrains.Interop.MacOsX.P_FLAG : object {
    public static int P_TRANSLATED;
}
public class JetBrains.Interop.MacOsX.passwd : ValueType {
    public Byte* pw_name;
    public Byte* pw_passwd;
    public UInt32 pw_uid;
    public UInt32 pw_gid;
    public ulong pw_change;
    public Byte* pw_class;
    public Byte* pw_gecos;
    public Byte* pw_dir;
    public Byte* pw_shell;
    public ulong pw_expire;
}
public class JetBrains.Interop.MacOsX.proc_bsdinfo : ValueType {
    private static int MAXCOMLEN;
    public UInt32 pbi_flags;
    public UInt32 pbi_status;
    public UInt32 pbi_xstatus;
    public UInt32 pbi_pid;
    public UInt32 pbi_ppid;
    public UInt32 pbi_uid;
    public UInt32 pbi_gid;
    public UInt32 pbi_ruid;
    public UInt32 pbi_rgid;
    public UInt32 pbi_svuid;
    public UInt32 pbi_svgid;
    private UInt32 rfu_1;
    [FixedBufferAttribute("System.Byte", "16")]
public <pbi_comm>e__FixedBuffer pbi_comm;
    [FixedBufferAttribute("System.Byte", "32")]
public <pbi_name>e__FixedBuffer pbi_name;
    public UInt32 pbi_nfiles;
    public UInt32 pbi_pgid;
    public UInt32 pbi_pjobc;
    public UInt32 e_tdev;
    public UInt32 e_tpgid;
    public int pbi_nice;
    public ulong pbi_start_tvsec;
    public ulong pbi_start_tvusec;
}
public class JetBrains.Interop.MacOsX.proc_regioninfo : ValueType {
    public UInt32 pri_protection;
    public UInt32 pri_max_protection;
    public UInt32 pri_inheritance;
    public UInt32 pri_flags;
    public ulong pri_offset;
    public UInt32 pri_behavior;
    public UInt32 pri_user_wired_count;
    public UInt32 pri_user_tag;
    public UInt32 pri_pages_resident;
    public UInt32 pri_pages_shared_now_private;
    public UInt32 pri_pages_swapped_out;
    public UInt32 pri_pages_dirtied;
    public UInt32 pri_ref_count;
    public UInt32 pri_shadow_depth;
    public UInt32 pri_share_mode;
    public UInt32 pri_private_pages_resident;
    public UInt32 pri_shared_pages_resident;
    public UInt32 pri_obj_id;
    public UInt32 pri_depth;
    public ulong pri_address;
    public ulong pri_size;
}
public class JetBrains.Interop.MacOsX.proc_regionwithpathinfo : ValueType {
    public proc_regioninfo prp_prinfo;
    public vnode_info_path prp_vip;
}
public enum JetBrains.Interop.MacOsX.ProcPidInfoFlavor : Enum {
    public int value__;
    public static ProcPidInfoFlavor PROC_PIDLISTFDS;
    public static ProcPidInfoFlavor PROC_PIDTASKALLINFO;
    public static ProcPidInfoFlavor PROC_PIDTBSDINFO;
    public static ProcPidInfoFlavor PROC_PIDTASKINFO;
    public static ProcPidInfoFlavor PROC_PIDTHREADINFO;
    public static ProcPidInfoFlavor PROC_PIDLISTTHREADS;
    public static ProcPidInfoFlavor PROC_PIDREGIONINFO;
    public static ProcPidInfoFlavor PROC_PIDREGIONPATHINFO;
    public static ProcPidInfoFlavor PROC_PIDVNODEPATHINFO;
    public static ProcPidInfoFlavor PROC_PIDTHREADPATHINFO;
    public static ProcPidInfoFlavor PROC_PIDPATHINFO;
    public static ProcPidInfoFlavor PROC_PIDWORKQUEUEINFO;
    public static ProcPidInfoFlavor PROC_PIDT_SHORTBSDINFO;
    public static ProcPidInfoFlavor PROC_PIDLISTFILEPORTS;
    public static ProcPidInfoFlavor PROC_PIDTHREADID64INFO;
    public static ProcPidInfoFlavor PROC_PID_RUSAGE;
    public static ProcPidInfoFlavor PROC_PIDREGIONPATHINFO2;
}
public static class JetBrains.Interop.MacOsX.ProcPidInfoSize : object {
    public static int PROC_PIDPATHINFO_MAXSIZE;
}
public static class JetBrains.Interop.MacOsX.QuartzEventServices : object {
    private static string LibraryName;
    public static CGEventFlags CGEventSourceFlagsState(CGEventSourceStateID keyCode);
}
public static class JetBrains.Interop.MacOsX.RTLD : object {
    public static int RTLD_LAZY;
    public static int RTLD_NOW;
    public static int RTLD_LOCAL;
    public static int RTLD_GLOBAL;
    public static int RTLD_NOLOAD;
    public static int RTLD_NODELETE;
    public static int RTLD_FIRST;
    private static RTLD();
}
public class JetBrains.Interop.MacOsX.Selector : ValueType {
}
public static class JetBrains.Interop.MacOsX.SHARE_MODE : object {
    public static int SM_COW;
    public static int SM_PRIVATE;
    public static int SM_EMPTY;
    public static int SM_SHARED;
    public static int SM_TRUESHARED;
    public static int SM_PRIVATE_ALIASED;
    public static int SM_SHARED_ALIASED;
    public static int SM_LARGE_PAGE;
}
public static class JetBrains.Interop.MacOsX.SHARED_REGION : object {
    public static ulong SHARED_REGION_BASE_I386;
    public static ulong SHARED_REGION_SIZE_I386;
    public static ulong SHARED_REGION_BASE_X86_64;
    public static ulong SHARED_REGION_SIZE_X86_64;
    public static ulong SHARED_REGION_BASE_PPC;
    public static ulong SHARED_REGION_SIZE_PPC;
    public static ulong SHARED_REGION_BASE_PPC64;
    public static ulong SHARED_REGION_SIZE_PPC64;
    public static ulong SHARED_REGION_BASE_ARM;
    public static ulong SHARED_REGION_SIZE_ARM;
    public static ulong SHARED_REGION_BASE_ARM64_32;
    public static ulong SHARED_REGION_SIZE_ARM64_32;
    public static ulong SHARED_REGION_BASE_ARM64;
    public static ulong SHARED_REGION_SIZE_ARM64;
}
public class JetBrains.Interop.MacOsX.shmid_ds : ValueType {
    public ipc_perm shm_perm;
    public IntPtr shm_segsz;
    public int shm_lpid;
    public int shm_cpid;
    public ushort shm_nattch;
    public ulong shm_atime;
    public ulong shm_dtime;
    public ulong shm_ctime;
    public Void* shm_internal;
}
public class JetBrains.Interop.MacOsX.ShouldHandleReopenEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private bool <HasVisibleWindows>k__BackingField;
    public bool HasVisibleWindows { get; }
    public ShouldHandleReopenEventArgs(bool hasVisibleWindows);
    [CompilerGeneratedAttribute]
public bool get_HasVisibleWindows();
}
internal class JetBrains.Interop.MacOsX.stat : ValueType {
    public int st_dev;
    public ushort st_mode;
    public ushort st_nlink;
    public ulong st_ino;
    public UInt32 st_uid;
    public UInt32 st_gid;
    public long st_rdev;
    public timespec st_atimespec;
    public timespec st_mtimespec;
    public timespec st_ctimespec;
    public timespec st_birthtimespec;
    public long st_size;
    public long st_blocks;
    public int st_blksize;
    public UInt32 st_flags;
    public UInt32 st_gen;
    private int st_lspare;
}
public static class JetBrains.Interop.MacOsX.SYSCTL : object {
    public static int CTL_KERN;
    public static int CTL_VM;
    public static int CTL_VFS;
    public static int CTL_NET;
    public static int CTL_DEBUG;
    public static int CTL_HW;
    public static int CTL_MACHDEP;
    public static int CTL_USER;
    public static int KERN_OSTYPE;
    public static int KERN_OSRELEASE;
    public static int KERN_OSREV;
    public static int KERN_VERSION;
    public static int KERN_MAXVNODES;
    public static int KERN_MAXPROC;
    public static int KERN_MAXFILES;
    public static int KERN_ARGMAX;
    public static int KERN_PROC;
    public static int KERN_PROCARGS;
    public static int KERN_PROCARGS2;
    public static int KERN_PROC_ALL;
    public static int KERN_PROC_PID;
    public static int KERN_PROC_PGRP;
    public static int KERN_PROC_SESSION;
    public static int KERN_PROC_TTY;
    public static int KERN_PROC_UID;
    public static int KERN_PROC_RUID;
    public static int KERN_PROC_LCID;
    public static int HW_MEMSIZE;
    public static int VM_SWAPUSAGE;
}
public class JetBrains.Interop.MacOsX.timespec : ValueType {
    public long tv_sec;
    public ulong tv_nsec;
}
public class JetBrains.Interop.MacOsX.vinfo_stat : ValueType {
    public UInt32 vst_dev;
    public ushort vst_mode;
    public ushort vst_nlink;
    public ulong vst_ino;
    public UInt32 vst_uid;
    public UInt32 vst_gid;
    public long vst_atime;
    public long vst_atimensec;
    public long vst_mtime;
    public long vst_mtimensec;
    public long vst_ctime;
    public long vst_ctimensec;
    public long vst_birthtime;
    public long vst_birthtimensec;
    public long vst_size;
    public long vst_blocks;
    public int vst_blksize;
    public UInt32 vst_flags;
    public UInt32 vst_gen;
    public UInt32 vst_rdev;
    private long __vst_qspare_0;
    private long __vst_qspare_1;
}
public class JetBrains.Interop.MacOsX.vm_statistics64 : ValueType {
    public UInt32 free_count;
    public UInt32 active_count;
    public UInt32 inactive_count;
    public UInt32 wire_count;
    public ulong zero_fill_count;
    public ulong reactivations;
    public ulong pageins;
    public ulong pageouts;
    public ulong faults;
    public ulong cow_faults;
    public ulong lookups;
    public ulong hits;
    public ulong purges;
    public UInt32 purgeable_count;
    public UInt32 speculative_count;
    public ulong decompressions;
    public ulong compressions;
    public ulong swapins;
    public ulong swapouts;
    public UInt32 compressor_page_count;
    public UInt32 throttled_count;
    public UInt32 external_page_count;
    public UInt32 internal_page_count;
    public ulong total_uncompressed_pages_in_compressor;
}
public class JetBrains.Interop.MacOsX.vnode_info : ValueType {
    public vinfo_stat vi_stat;
    public int vi_type;
    public int vi_pad;
    public ulong vi_fsid;
}
public class JetBrains.Interop.MacOsX.vnode_info_path : ValueType {
    private static int MAXPATHLEN;
    public vnode_info vip_vi;
    [FixedBufferAttribute("System.Byte", "1024")]
public <vip_path>e__FixedBuffer vip_path;
}
public class JetBrains.Interop.MacOsX.xsw_usage : ValueType {
    public ulong xsu_total;
    public ulong xsu_avail;
    public ulong xsu_used;
    public UInt32 xsu_pagesize;
    public int xsu_encrypted;
}
public static class JetBrains.Interop.Unix.FILENO : object {
    public static int STDIN_FILENO;
    public static int STDOUT_FILENO;
    public static int STDERR_FILENO;
}
public static class JetBrains.Interop.Unix.Helpers : object {
}
[FlagsAttribute]
public enum JetBrains.Interop.Unix.IpcControl : Enum {
    public UInt32 value__;
    public static IpcControl IPC_RMID;
    public static IpcControl IPC_SET;
    public static IpcControl IPC_STAT;
}
[FlagsAttribute]
public enum JetBrains.Interop.Unix.IpcMode : Enum {
    public UInt32 value__;
    public static IpcMode IPC_CREAT;
    public static IpcMode IPC_EXCL;
}
public static class JetBrains.Interop.Unix.LibC : object {
    private static string LibraryName;
    public static Void* memmove(Void* dest, Void* src, ulong n);
    public static UInt32 getuid();
    public static UInt32 geteuid();
    public static int mkdir(string pathname, UnixFileModes mode);
    public static int chmod(string pathname, UnixFileModes mode);
    public static int access(string pathname, LibcAccessModes mode);
    public static int symlink(string oldname, string newname);
    public static IntPtr readlink(string filename, StringBuilder buffer, UIntPtr size);
    public static IntPtr realpath(string path, StringBuilder resolved_path);
    public static int uname(IntPtr buf);
    public static int kill(int pid, int sig);
    public static IntPtr write(int fd, Void* buf, UIntPtr nbytes);
    public static int fsync(int fd);
    public static int flock(int fd, int operation);
    public static int shm_open(string name, UInt32 oflag, UnixFileModes mode);
    public static int shm_open_MacArm64(string name, UInt32 oflag, ulong __x2, ulong __x3, ulong __x4, ulong __x5, ulong __x6, ulong __x7, UnixFileModes mode);
    public static int shm_unlink(string name);
    public static void ftruncate(int fd, long length);
    public static Void* mmap(Void* addr, long length, MemoryProtection prot, MapFlags flags, int fd, long offset);
    public static int munmap(Void* addr, long length);
    public static int ftok(string path, int id);
    public static int shmget(int key, IntPtr size, UInt32 shmflg);
    public static Void* shmat(int shmid, Void* shmaddr, UInt32 shmflg);
    public static int shmdt(Void* shmaddr);
    public static int shmctl(int shmid, IpcControl cmd, Void* buf);
    public static int umask(int mask);
}
public static class JetBrains.Interop.Unix.LOCK : object {
    public static int LOCK_SH;
    public static int LOCK_EX;
    public static int LOCK_NB;
    public static int LOCK_UN;
}
[FlagsAttribute]
public enum JetBrains.Interop.Unix.MapFlags : Enum {
    public UInt32 value__;
    public static MapFlags MAP_SHARED;
}
[FlagsAttribute]
public enum JetBrains.Interop.Unix.MemoryProtection : Enum {
    public UInt32 value__;
    public static MemoryProtection PROT_READ;
    public static MemoryProtection PROT_WRITE;
}
public class JetBrains.Interop.Unix.TimeSpec : ValueType {
    public long tv_sec;
    public ulong tv_nsec;
}
[FlagsAttribute]
public enum JetBrains.Interop.Unix.UnixFileModes : Enum {
    public UInt32 value__;
    public static UnixFileModes S_ISUID;
    public static UnixFileModes S_ISGID;
    public static UnixFileModes S_ISVTX;
    public static UnixFileModes S_IRUSR;
    public static UnixFileModes S_IWUSR;
    public static UnixFileModes S_IXUSR;
    public static UnixFileModes S_IRGRP;
    public static UnixFileModes S_IWGRP;
    public static UnixFileModes S_IXGRP;
    public static UnixFileModes S_IROTH;
    public static UnixFileModes S_IWOTH;
    public static UnixFileModes S_IXOTH;
    public static UnixFileModes S_IRWXG;
    public static UnixFileModes S_IRWXU;
    public static UnixFileModes S_IRWXO;
    public static UnixFileModes ACCESSPERMS;
    public static UnixFileModes ALLPERMS;
    public static UnixFileModes DEFFILEMODE;
    public static UnixFileModes S_IFMT;
    public static UnixFileModes S_IFDIR;
    public static UnixFileModes S_IFCHR;
    public static UnixFileModes S_IFBLK;
    public static UnixFileModes S_IFREG;
    public static UnixFileModes S_IFIFO;
    public static UnixFileModes S_IFLNK;
    public static UnixFileModes S_IFSOCK;
    public static UnixFileModes rw_r__r__;
    public static UnixFileModes rwxr_xr_x;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.AccessRights : Enum {
    public UInt32 value__;
    public static AccessRights GENERIC_READ;
    public static AccessRights GENERIC_WRITE;
    public static AccessRights GENERIC_EXECUTE;
    public static AccessRights GENERIC_ALL;
    public static AccessRights ACCESS_SYSTEM_SECURITY;
    public static AccessRights DELETE;
    public static AccessRights READ_CONTROL;
    public static AccessRights WRITE_DAC;
    public static AccessRights WRITE_OWNER;
    public static AccessRights SYNCHRONIZE;
    public static AccessRights STANDARD_RIGHTS_READ;
    public static AccessRights STANDARD_RIGHTS_WRITE;
    public static AccessRights STANDARD_RIGHTS_EXECUTE;
    public static AccessRights STANDARD_RIGHTS_ALL;
    public static AccessRights SPECIFIC_RIGHTS_ALL;
    public static AccessRights MAXIMUM_ALLOWED;
    public static AccessRights STANDARD_RIGHTS_REQUIRED;
}
public static class JetBrains.Interop.WinApi.Advapi32Dll : object {
    public static int QueryServiceStatusEx(Void* hService, SC_STATUS_TYPE infoLevel, Void* lpBuffer, UInt32 cbBufSize, UInt32* pcbBytesNeeded);
    public static int RegCloseKey(Void* hKey);
    public static int RegCreateKeyExW(Void* hKey, string lpSubKey, UInt32 reserved, string lpClass, UInt32 dwOptions, UInt32 samDesired, Void* lpSecurityAttributes, Void** phkResult, UInt32* lpdwDisposition);
    public static int RegDeleteKeyExW(Void* hKey, string lpSubKey, UInt32 samDesired, UInt32 reserved);
    public static int RegDeleteValueW(Void* hKey, string lpValueName);
    public static int RegEnumKeyExW(Void* hKey, UInt32 index, StringBuilder lpName, UInt32* lpcName, UInt32* lpReserved, StringBuilder lpClass, UInt32* lpcClass, FILETIME* lpftLastWriteTime);
    public static int RegEnumValueW(Void* hKey, UInt32 index, StringBuilder lpValueName, UInt32* lpcValueName, UInt32* lpReserved, UInt32* lpType, Byte* lpData, UInt32* lpcbData);
    public static int RegOpenKeyExW(Void* hKey, string lpSubKey, UInt32 ulOptions, UInt32 samDesired, Void** phkResult);
    public static int RegQueryInfoKeyW(Void* hKey, StringBuilder lpClass, UInt32* lpcbClass, UInt32* lpReserved, UInt32* lpcSubKeys, UInt32* lpcbMaxSubKeyLen, UInt32* lpcbMaxClassLen, UInt32* lpcValues, UInt32* lpcbMaxValueNameLen, UInt32* lpcbMaxValueLen, UInt32* lpcbSecurityDescriptor, FILETIME* lpftLastWriteTime);
    public static int RegQueryValueExW(Void* hKey, string lpValueName, UInt32* lpReserved, UInt32* lpType, Byte* lpData, UInt32* lpcbData);
    public static int RegSetValueExW(Void* hKey, string lpValueName, UInt32 reserved, UInt32 dwType, Byte* lpData, UInt32 cbData);
    public static int RegLoadKeyW(Void* hKey, string lpSubKey, string lpFile);
    public static WinError RegLoadAppKeyW(string lpFile, Void** phkResult, UInt32 samDesired, UInt32 dwOptions, UInt32 Reserved);
    public static int RegUnLoadKeyW(Void* hKey, string lpSubKey);
    public static int LookupPrivilegeValueW(string lpSystemName, string lpName, LUID* lpLuid);
    public static int OpenProcessToken(Void* ProcessHandle, UInt32 DesiredAccess, Void** TokenHandle);
    public static int AdjustTokenPrivileges(Void* TokenHandle, int DisableAllPrivileges, TOKEN_PRIVILEGES* NewState, UInt32 BufferLength, TOKEN_PRIVILEGES* PreviousState, UInt32* ReturnLength);
    public static int GetTokenInformation(Void* TokenHandle, int TokenInformationClass, Void* TokenInformation, UInt32 TokenInformationLength, UInt32* ReturnLength);
    public static UInt32 SetNamedSecurityInfoW(string pObjectName, SE_OBJECT_TYPE ObjectType, UInt32 SecurityInfo, Void* psidOwner, Void* psidGroup, Void* pdacl, Void* psacl);
    public static bool CredRead(string target, CRED_TYPE type, int reservedFlag, IntPtr& credentialPtr);
    public static bool CredDelete(string target, CRED_TYPE type, int reservedFlag);
    public static bool CredWrite(CREDENTIAL& userCredential, UInt32 flags);
    public static bool CredFree(IntPtr cred);
    public static bool CredEnumerate(string filter, int flag, Int32& count, IntPtr& pCredentials);
    public static bool AllocateAndInitializeSid(SID_IDENTIFIER_AUTHORITY& pIdentifierAuthority, byte nSubAuthorityCount, UInt32 dwSubAuthority0, UInt32 dwSubAuthority1, UInt32 dwSubAuthority2, UInt32 dwSubAuthority3, UInt32 dwSubAuthority4, UInt32 dwSubAuthority5, UInt32 dwSubAuthority6, UInt32 dwSubAuthority7, SafeSidHandle& pSid);
    public static UInt32 GetLengthSid(SafeSidHandle pSid);
    public static IntPtr FreeSid(IntPtr pSid);
    public static bool InitializeAcl(ACL* pAcl, UInt32 nAclLength, UInt32 dwAclRevision);
    public static bool AddAccessAllowedAce(ACL* pAcl, UInt32 dwAceRevision, AccessRights AccessMask, SafeSidHandle pSid);
    public static bool AddMandatoryAce(ACL* pAcl, UInt32 dwAceRevision, UInt32 AceFlags, UInt32 MandatoryPolicy, SafeSidHandle pLabelSid);
    public static bool InitializeSecurityDescriptor(SECURITY_DESCRIPTOR* pSecurityDescriptor, UInt32 dwRevision);
    public static bool SetSecurityDescriptorDacl(SECURITY_DESCRIPTOR* pSecurityDescriptor, bool bDaclPresent, ACL* pDacl, bool bDaclDefaulted);
    public static bool SetSecurityDescriptorSacl(SECURITY_DESCRIPTOR* pSecurityDescriptor, bool bSaclPresent, ACL* pSacl, bool bSaclDefaulted);
    public static int StartTraceW(Int64& sessionHandle, string sessionName, Void* properties);
    public static int ControlTraceW(long sessionHandle, string sessionName, Void* properties, UInt32 controlCode);
    public static ulong OpenTraceW(Void* logfile);
    public static int ProcessTrace(UInt64[] traceHandles, UInt32 handleCount, IntPtr startTime, IntPtr endTime);
    public static int CloseTrace(ulong traceHandle);
    public static int EnableTrace(UInt32 isEnable, UInt32 enableFlag, UInt32 level, Guid& providerId, long sessionHandle);
    public static int EnableTraceEx(Guid& providerId, Guid& sourceId, long sessionHandle, UInt32 isEnabled, ushort level, ulong matchAnyKeyword, ulong matchAllKeyword, UInt32 enableProperty, Void* enableFilterDesc);
    public static int EnableTraceEx2(long sessionHandle, Guid& providerId, UInt32 controlCode, ushort level, ulong matchAnyKeyword, ulong matchAllkeyword, UInt32 timeout, Void* parameters);
    public static int EnumerateTraceGuids(Void** ppGuidPropArray, UInt32 arraySize, UInt32* guidCount);
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.BY_HANDLE_FILE_INFORMATION : ValueType {
    public UInt32 FileAttributes;
    public FILE_TIME CreationTime;
    public FILE_TIME LastAccessTime;
    public FILE_TIME LastWriteTime;
    public UInt32 VolumeSerialNumber;
    public UInt32 FileSizeHigh;
    public UInt32 FileSizeLow;
    public UInt32 NumberOfLinks;
    public UInt32 FileIndexHigh;
    public UInt32 FileIndexLow;
    public ulong FileIndex { get; }
    public ulong get_FileIndex();
}
public class JetBrains.Interop.WinApi.CallBack : MulticastDelegate {
    public CallBack(object object, IntPtr method);
    public virtual UIntPtr Invoke(IntPtr hwnd, WindowsMessages msg, IntPtr wParam, IntPtr lParam);
    public virtual IAsyncResult BeginInvoke(IntPtr hwnd, WindowsMessages msg, IntPtr wParam, IntPtr lParam, AsyncCallback callback, object object);
    public virtual UIntPtr EndInvoke(IAsyncResult result);
}
public enum JetBrains.Interop.WinApi.CombineRgnStyles : Enum {
    public int value__;
    public static CombineRgnStyles RGN_AND;
    public static CombineRgnStyles RGN_OR;
    public static CombineRgnStyles RGN_XOR;
    public static CombineRgnStyles RGN_DIFF;
    public static CombineRgnStyles RGN_COPY;
    public static CombineRgnStyles RGN_MIN;
    public static CombineRgnStyles RGN_MAX;
}
public static class JetBrains.Interop.WinApi.ConnectDll : object {
}
public static class JetBrains.Interop.WinApi.Constants.CLSCTX : object {
    public static UInt32 CLSCTX_INPROC_SERVER;
    public static UInt32 CLSCTX_INPROC_HANDLER;
    public static UInt32 CLSCTX_LOCAL_SERVER;
    public static UInt32 CLSCTX_INPROC_SERVER16;
    public static UInt32 CLSCTX_REMOTE_SERVER;
    public static UInt32 CLSCTX_INPROC_HANDLER16;
    public static UInt32 CLSCTX_RESERVED1;
    public static UInt32 CLSCTX_RESERVED2;
    public static UInt32 CLSCTX_RESERVED3;
    public static UInt32 CLSCTX_RESERVED4;
    public static UInt32 CLSCTX_NO_CODE_DOWNLOAD;
    public static UInt32 CLSCTX_RESERVED5;
    public static UInt32 CLSCTX_NO_CUSTOM_MARSHAL;
    public static UInt32 CLSCTX_ENABLE_CODE_DOWNLOAD;
    public static UInt32 CLSCTX_NO_FAILURE_LOG;
    public static UInt32 CLSCTX_DISABLE_AAA;
    public static UInt32 CLSCTX_ENABLE_AAA;
    public static UInt32 CLSCTX_FROM_DEFAULT_CONTEXT;
    public static UInt32 CLSCTX_ACTIVATE_32_BIT_SERVER;
    public static UInt32 CLSCTX_ACTIVATE_64_BIT_SERVER;
    public static UInt32 CLSCTX_ENABLE_CLOAKING;
    public static UInt32 CLSCTX_APPCONTAINER;
    public static UInt32 CLSCTX_ACTIVATE_AAA_AS_IU;
    public static UInt32 CLSCTX_PS_DLL;
    private static CLSCTX();
}
public enum JetBrains.Interop.WinApi.Constants.CompareStringReturnValues : Enum {
    public int value__;
    public static CompareStringReturnValues ERROR;
    public static CompareStringReturnValues CSTR_LESS_THAN;
    public static CompareStringReturnValues CSTR_EQUAL;
    public static CompareStringReturnValues CSTR_GREATER_THAN;
}
[NoReorderAttribute]
public static class JetBrains.Interop.WinApi.Constants.CompressionFormat : object {
    public static ushort COMPRESSION_FORMAT_NONE;
    public static ushort COMPRESSION_FORMAT_DEFAULT;
    public static ushort COMPRESSION_FORMAT_LZNT1;
    public static ushort COMPRESSION_FORMAT_XPRESS;
    public static ushort COMPRESSION_FORMAT_XPRESS_HUFF;
    private static CompressionFormat();
}
public static class JetBrains.Interop.WinApi.Constants.CorH : object {
    public static Guid IID_IMetaDataEmit;
    public static Guid IID_IMetaDataDispenser;
    public static Guid CLSID_CorMetaDataDispenser;
    private static CorH();
}
public static class JetBrains.Interop.WinApi.Constants.CorSym : object {
    public static Guid CLSID_CorSymWriter;
    private static CorSym();
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.Constants.CreationFlags : Enum {
    public UInt32 value__;
    public static CreationFlags DEBUG_PROCESS;
    public static CreationFlags DEBUG_ONLY_THIS_PROCESS;
    public static CreationFlags CREATE_SUSPENDED;
    public static CreationFlags DETACHED_PROCESS;
    public static CreationFlags CREATE_NEW_CONSOLE;
    public static CreationFlags NORMAL_PRIORITY_CLASS;
    public static CreationFlags IDLE_PRIORITY_CLASS;
    public static CreationFlags HIGH_PRIORITY_CLASS;
    public static CreationFlags REALTIME_PRIORITY_CLASS;
    public static CreationFlags CREATE_NEW_PROCESS_GROUP;
    public static CreationFlags CREATE_UNICODE_ENVIRONMENT;
    public static CreationFlags CREATE_SEPARATE_WOW_VDM;
    public static CreationFlags CREATE_SHARED_WOW_VDM;
    public static CreationFlags CREATE_FORCEDOS;
    public static CreationFlags BELOW_NORMAL_PRIORITY_CLASS;
    public static CreationFlags ABOVE_NORMAL_PRIORITY_CLASS;
    public static CreationFlags INHERIT_PARENT_AFFINITY;
    public static CreationFlags INHERIT_CALLER_PRIORITY;
    public static CreationFlags CREATE_PROTECTED_PROCESS;
    public static CreationFlags EXTENDED_STARTUPINFO_PRESENT;
    public static CreationFlags PROCESS_MODE_BACKGROUND_BEGIN;
    public static CreationFlags PROCESS_MODE_BACKGROUND_END;
    public static CreationFlags CREATE_BREAKAWAY_FROM_JOB;
    public static CreationFlags CREATE_PRESERVE_CODE_AUTHZ_LEVEL;
    public static CreationFlags CREATE_DEFAULT_ERROR_MODE;
    public static CreationFlags CREATE_NO_WINDOW;
    public static CreationFlags PROFILE_USER;
    public static CreationFlags PROFILE_KERNEL;
    public static CreationFlags PROFILE_SERVER;
    public static CreationFlags CREATE_IGNORE_SYSTEM_DEFAULT;
}
public enum JetBrains.Interop.WinApi.Constants.DebugContinueStatus : Enum {
    public UInt32 value__;
    public static DebugContinueStatus DBG_CONTINUE;
    public static DebugContinueStatus DBG_EXCEPTION_NOT_HANDLED;
    public static DebugContinueStatus DBG_REPLY_LATER;
}
public enum JetBrains.Interop.WinApi.Constants.DebugEventCode : Enum {
    public UInt32 value__;
    public static DebugEventCode EXCEPTION_DEBUG_EVENT;
    public static DebugEventCode CREATE_THREAD_DEBUG_EVENT;
    public static DebugEventCode CREATE_PROCESS_DEBUG_EVENT;
    public static DebugEventCode EXIT_THREAD_DEBUG_EVENT;
    public static DebugEventCode EXIT_PROCESS_DEBUG_EVENT;
    public static DebugEventCode LOAD_DLL_DEBUG_EVENT;
    public static DebugEventCode UNLOAD_DLL_DEBUG_EVENT;
    public static DebugEventCode OUTPUT_DEBUG_STRING_EVENT;
    public static DebugEventCode RIP_EVENT;
}
public static class JetBrains.Interop.WinApi.Constants.DUPLICATE : object {
    public static UInt32 DUPLICATE_CLOSE_SOURCE;
    public static UInt32 DUPLICATE_SAME_ACCESS;
    private static DUPLICATE();
}
public enum JetBrains.Interop.WinApi.Constants.EXTENDED_NAME_FORMAT : Enum {
    public int value__;
    public static EXTENDED_NAME_FORMAT NameUnknown;
    public static EXTENDED_NAME_FORMAT NameFullyQualifiedDN;
    public static EXTENDED_NAME_FORMAT NameSamCompatible;
    public static EXTENDED_NAME_FORMAT NameDisplay;
    public static EXTENDED_NAME_FORMAT NameUniqueId;
    public static EXTENDED_NAME_FORMAT NameCanonical;
    public static EXTENDED_NAME_FORMAT NameUserPrincipal;
    public static EXTENDED_NAME_FORMAT NameCanonicalEx;
    public static EXTENDED_NAME_FORMAT NameServicePrincipal;
    public static EXTENDED_NAME_FORMAT NameDnsDomain;
    public static EXTENDED_NAME_FORMAT NameGivenName;
    public static EXTENDED_NAME_FORMAT NameSurname;
}
public enum JetBrains.Interop.WinApi.Constants.FILE_INFO_BY_HANDLE_CLASS : Enum {
    public UInt32 value__;
    public static FILE_INFO_BY_HANDLE_CLASS FileBasicInfo;
    public static FILE_INFO_BY_HANDLE_CLASS FileStandardInfo;
    public static FILE_INFO_BY_HANDLE_CLASS FileNameInfo;
    public static FILE_INFO_BY_HANDLE_CLASS FileRenameInfo;
    public static FILE_INFO_BY_HANDLE_CLASS FileDispositionInfo;
    public static FILE_INFO_BY_HANDLE_CLASS FileAllocationInfo;
    public static FILE_INFO_BY_HANDLE_CLASS FileEndOfFileInfo;
    public static FILE_INFO_BY_HANDLE_CLASS FileStreamInfo;
    public static FILE_INFO_BY_HANDLE_CLASS FileCompressionInfo;
    public static FILE_INFO_BY_HANDLE_CLASS FileAttributeTagInfo;
    public static FILE_INFO_BY_HANDLE_CLASS FileIdBothDirectoryInfo;
    public static FILE_INFO_BY_HANDLE_CLASS FileIdBothDirectoryRestartInfo;
    public static FILE_INFO_BY_HANDLE_CLASS FileIoPriorityHintInfo;
    public static FILE_INFO_BY_HANDLE_CLASS FileRemoteProtocolInfo;
    public static FILE_INFO_BY_HANDLE_CLASS FileFullDirectoryInfo;
    public static FILE_INFO_BY_HANDLE_CLASS FileFullDirectoryRestartInfo;
    public static FILE_INFO_BY_HANDLE_CLASS FileStorageInfo;
    public static FILE_INFO_BY_HANDLE_CLASS FileAlignmentInfo;
    public static FILE_INFO_BY_HANDLE_CLASS FileIdInfo;
    public static FILE_INFO_BY_HANDLE_CLASS FileIdExtdDirectoryInfo;
    public static FILE_INFO_BY_HANDLE_CLASS FileIdExtdDirectoryRestartInfo;
    public static FILE_INFO_BY_HANDLE_CLASS MaximumFileInfoByHandlesClass;
}
public static class JetBrains.Interop.WinApi.Constants.FILE_SKIP : object {
    public static byte FILE_SKIP_COMPLETION_PORT_ON_SUCCESS;
    public static byte FILE_SKIP_SET_EVENT_ON_HANDLE;
    private static FILE_SKIP();
}
public static class JetBrains.Interop.WinApi.Constants.FileCreationDisposition : object {
    public static UInt32 CREATE_ALWAYS;
    public static UInt32 CREATE_NEW;
    public static UInt32 OPEN_ALWAYS;
    public static UInt32 OPEN_EXISTING;
    public static UInt32 TRUNCATE_EXISTING;
    private static FileCreationDisposition();
}
public static class JetBrains.Interop.WinApi.Constants.FileShareMode : object {
    public static UInt32 FILE_SHARE_NONE;
    public static UInt32 FILE_SHARE_READ;
    public static UInt32 FILE_SHARE_WRITE;
    public static UInt32 FILE_SHARE_DELETE;
    private static FileShareMode();
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.Constants.FileSystemFlags : Enum {
    public UInt32 value__;
    public static FileSystemFlags FILE_CASE_SENSITIVE_SEARCH;
    public static FileSystemFlags FILE_CASE_PRESERVED_NAMES;
    public static FileSystemFlags FILE_UNICODE_ON_DISK;
    public static FileSystemFlags FILE_PERSISTENT_ACLS;
    public static FileSystemFlags FILE_FILE_COMPRESSION;
    public static FileSystemFlags FILE_VOLUME_QUOTAS;
    public static FileSystemFlags FILE_SUPPORTS_SPARSE_FILES;
    public static FileSystemFlags FILE_SUPPORTS_REPARSE_POINTS;
    public static FileSystemFlags FILE_SUPPORTS_REMOTE_STORAGE;
    public static FileSystemFlags FILE_VOLUME_IS_COMPRESSED;
    public static FileSystemFlags FILE_SUPPORTS_OBJECT_IDS;
    public static FileSystemFlags FILE_SUPPORTS_ENCRYPTION;
    public static FileSystemFlags FILE_NAMED_STREAMS;
    public static FileSystemFlags FILE_READ_ONLY_VOLUME;
    public static FileSystemFlags FILE_SEQUENTIAL_WRITE_ONCE;
    public static FileSystemFlags FILE_SUPPORTS_TRANSACTIONS;
    public static FileSystemFlags FILE_SUPPORTS_HARD_LINKS;
    public static FileSystemFlags FILE_SUPPORTS_EXTENDED_ATTRIBUTES;
    public static FileSystemFlags FILE_SUPPORTS_OPEN_BY_FILE_ID;
    public static FileSystemFlags FILE_SUPPORTS_USN_JOURNAL;
    public static FileSystemFlags FILE_SUPPORTS_INTEGRITY_STREAMS;
}
public static class JetBrains.Interop.WinApi.Constants.FORMAT_MESSAGE : object {
    public static UInt32 FORMAT_MESSAGE_ALLOCATE_BUFFER;
    public static UInt32 FORMAT_MESSAGE_ARGUMENT_ARRAY;
    public static UInt32 FORMAT_MESSAGE_FROM_HMODULE;
    public static UInt32 FORMAT_MESSAGE_FROM_STRING;
    public static UInt32 FORMAT_MESSAGE_FROM_SYSTEM;
    public static UInt32 FORMAT_MESSAGE_IGNORE_INSERTS;
    public static UInt32 FORMAT_MESSAGE_MAX_WIDTH_MASK;
    private static FORMAT_MESSAGE();
}
public enum JetBrains.Interop.WinApi.Constants.FrameControlState : Enum {
    public UInt32 value__;
    public static FrameControlState DFCS_BUTTONPUSH;
}
public enum JetBrains.Interop.WinApi.Constants.FrameControlType : Enum {
    public UInt32 value__;
    public static FrameControlType DFC_BUTTON;
    public static FrameControlType DFC_CAPTION;
    public static FrameControlType DFC_MENU;
    public static FrameControlType DFC_POPUPMENU;
    public static FrameControlType DFC_SCROLL;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.Constants.GetFinalPathNameByHandleFlags : Enum {
    public UInt32 value__;
    public static GetFinalPathNameByHandleFlags VOLUME_NAME_DOS;
    public static GetFinalPathNameByHandleFlags VOLUME_NAME_GUID;
    public static GetFinalPathNameByHandleFlags VOLUME_NAME_NT;
    public static GetFinalPathNameByHandleFlags VOLUME_NAME_NONE;
    public static GetFinalPathNameByHandleFlags FILE_NAME_NORMALIZED;
    public static GetFinalPathNameByHandleFlags FILE_NAME_OPENED;
}
public enum JetBrains.Interop.WinApi.Constants.HitTestResult : Enum {
    public int value__;
    public static HitTestResult HTERROR;
    public static HitTestResult HTTRANSPARENT;
    public static HitTestResult HTNOWHERE;
    public static HitTestResult HTCLIENT;
    public static HitTestResult HTCAPTION;
    public static HitTestResult HTSYSMENU;
    public static HitTestResult HTGROWBOX;
    public static HitTestResult HTSIZE;
    public static HitTestResult HTMENU;
    public static HitTestResult HTHSCROLL;
    public static HitTestResult HTVSCROLL;
    public static HitTestResult HTMINBUTTON;
    public static HitTestResult HTMAXBUTTON;
    public static HitTestResult HTLEFT;
    public static HitTestResult HTRIGHT;
    public static HitTestResult HTTOP;
    public static HitTestResult HTTOPLEFT;
    public static HitTestResult HTTOPRIGHT;
    public static HitTestResult HTBOTTOM;
    public static HitTestResult HTBOTTOMLEFT;
    public static HitTestResult HTBOTTOMRIGHT;
    public static HitTestResult HTBORDER;
    public static HitTestResult HTREDUCE;
    public static HitTestResult HTZOOM;
    public static HitTestResult HTSIZEFIRST;
    public static HitTestResult HTSIZELAST;
    public static HitTestResult HTOBJECT;
    public static HitTestResult HTCLOSE;
    public static HitTestResult HTHELP;
}
public enum JetBrains.Interop.WinApi.Constants.HookType : Enum {
    public int value__;
    public static HookType WH_JOURNALRECORD;
    public static HookType WH_JOURNALPLAYBACK;
    public static HookType WH_KEYBOARD;
    public static HookType WH_GETMESSAGE;
    public static HookType WH_CALLWNDPROC;
    public static HookType WH_CBT;
    public static HookType WH_SYSMSGFILTER;
    public static HookType WH_MOUSE;
    public static HookType WH_HARDWARE;
    public static HookType WH_DEBUG;
    public static HookType WH_SHELL;
    public static HookType WH_FOREGROUNDIDLE;
    public static HookType WH_CALLWNDPROCRET;
    public static HookType WH_KEYBOARD_LL;
    public static HookType WH_MOUSE_LL;
}
public static class JetBrains.Interop.WinApi.Constants.ImagehlpH : object {
    public static ushort CERT_SECTION_TYPE_ANY;
    private static ImagehlpH();
}
[NoReorderAttribute]
public static class JetBrains.Interop.WinApi.Constants.IoControlCodes : object {
    public static UInt32 FILE_DEVICE_BEEP;
    public static UInt32 FILE_DEVICE_CD_ROM;
    public static UInt32 FILE_DEVICE_CD_ROM_FILE_SYSTEM;
    public static UInt32 FILE_DEVICE_CONTROLLER;
    public static UInt32 FILE_DEVICE_DATALINK;
    public static UInt32 FILE_DEVICE_DFS;
    public static UInt32 FILE_DEVICE_DISK;
    public static UInt32 FILE_DEVICE_DISK_FILE_SYSTEM;
    public static UInt32 FILE_DEVICE_FILE_SYSTEM;
    public static UInt32 FILE_DEVICE_INPORT_PORT;
    public static UInt32 FILE_DEVICE_KEYBOARD;
    public static UInt32 FILE_DEVICE_MAILSLOT;
    public static UInt32 FILE_DEVICE_MIDI_IN;
    public static UInt32 FILE_DEVICE_MIDI_OUT;
    public static UInt32 FILE_DEVICE_MOUSE;
    public static UInt32 FILE_DEVICE_MULTI_UNC_PROVIDER;
    public static UInt32 FILE_DEVICE_NAMED_PIPE;
    public static UInt32 FILE_DEVICE_NETWORK;
    public static UInt32 FILE_DEVICE_NETWORK_BROWSER;
    public static UInt32 FILE_DEVICE_NETWORK_FILE_SYSTEM;
    public static UInt32 FILE_DEVICE_NULL;
    public static UInt32 FILE_DEVICE_PARALLEL_PORT;
    public static UInt32 FILE_DEVICE_PHYSICAL_NETCARD;
    public static UInt32 FILE_DEVICE_PRINTER;
    public static UInt32 FILE_DEVICE_SCANNER;
    public static UInt32 FILE_DEVICE_SERIAL_MOUSE_PORT;
    public static UInt32 FILE_DEVICE_SERIAL_PORT;
    public static UInt32 FILE_DEVICE_SCREEN;
    public static UInt32 FILE_DEVICE_SOUND;
    public static UInt32 FILE_DEVICE_STREAMS;
    public static UInt32 FILE_DEVICE_TAPE;
    public static UInt32 FILE_DEVICE_TAPE_FILE_SYSTEM;
    public static UInt32 FILE_DEVICE_TRANSPORT;
    public static UInt32 FILE_DEVICE_UNKNOWN;
    public static UInt32 FILE_DEVICE_VIDEO;
    public static UInt32 FILE_DEVICE_VIRTUAL_DISK;
    public static UInt32 FILE_DEVICE_WAVE_IN;
    public static UInt32 FILE_DEVICE_WAVE_OUT;
    public static UInt32 FILE_DEVICE_8042_PORT;
    public static UInt32 FILE_DEVICE_NETWORK_REDIRECTOR;
    public static UInt32 FILE_DEVICE_BATTERY;
    public static UInt32 FILE_DEVICE_BUS_EXTENDER;
    public static UInt32 FILE_DEVICE_MODEM;
    public static UInt32 FILE_DEVICE_VDM;
    public static UInt32 FILE_DEVICE_MASS_STORAGE;
    public static UInt32 FILE_DEVICE_SMB;
    public static UInt32 FILE_DEVICE_KS;
    public static UInt32 FILE_DEVICE_CHANGER;
    public static UInt32 FILE_DEVICE_SMARTCARD;
    public static UInt32 FILE_DEVICE_ACPI;
    public static UInt32 FILE_DEVICE_DVD;
    public static UInt32 FILE_DEVICE_FULLSCREEN_VIDEO;
    public static UInt32 FILE_DEVICE_DFS_FILE_SYSTEM;
    public static UInt32 FILE_DEVICE_DFS_VOLUME;
    public static UInt32 FILE_DEVICE_SERENUM;
    public static UInt32 FILE_DEVICE_TERMSRV;
    public static UInt32 FILE_DEVICE_KSEC;
    public static UInt32 FILE_DEVICE_FIPS;
    public static UInt32 FILE_DEVICE_INFINIBAND;
    public static UInt32 FILE_DEVICE_VMBUS;
    public static UInt32 FILE_DEVICE_CRYPT_PROVIDER;
    public static UInt32 FILE_DEVICE_WPD;
    public static UInt32 FILE_DEVICE_BLUETOOTH;
    public static UInt32 FILE_DEVICE_MT_COMPOSITE;
    public static UInt32 FILE_DEVICE_MT_TRANSPORT;
    public static UInt32 FILE_DEVICE_BIOMETRIC;
    public static UInt32 FILE_DEVICE_PMI;
    public static UInt32 METHOD_BUFFERED;
    public static UInt32 METHOD_IN_DIRECT;
    public static UInt32 METHOD_OUT_DIRECT;
    public static UInt32 METHOD_NEITHER;
    public static UInt32 FILE_ANY_ACCESS;
    public static UInt32 FILE_SPECIAL_ACCESS;
    public static UInt32 FILE_READ_ACCESS;
    public static UInt32 FILE_WRITE_ACCESS;
    public static UInt32 FILE_READ_DATA;
    public static UInt32 FILE_WRITE_DATA;
    public static UInt32 FSCTL_REQUEST_OPLOCK_LEVEL_1;
    public static UInt32 FSCTL_REQUEST_OPLOCK_LEVEL_2;
    public static UInt32 FSCTL_REQUEST_BATCH_OPLOCK;
    public static UInt32 FSCTL_OPLOCK_BREAK_ACKNOWLEDGE;
    public static UInt32 FSCTL_OPBATCH_ACK_CLOSE_PENDING;
    public static UInt32 FSCTL_OPLOCK_BREAK_NOTIFY;
    public static UInt32 FSCTL_LOCK_VOLUME;
    public static UInt32 FSCTL_UNLOCK_VOLUME;
    public static UInt32 FSCTL_DISMOUNT_VOLUME;
    public static UInt32 FSCTL_IS_VOLUME_MOUNTED;
    public static UInt32 FSCTL_IS_PATHNAME_VALID;
    public static UInt32 FSCTL_MARK_VOLUME_DIRTY;
    public static UInt32 FSCTL_QUERY_RETRIEVAL_POINTERS;
    public static UInt32 FSCTL_GET_COMPRESSION;
    public static UInt32 FSCTL_SET_COMPRESSION;
    public static UInt32 FSCTL_SET_BOOTLOADER_ACCESSED;
    public static UInt32 FSCTL_OPLOCK_BREAK_ACK_NO_2;
    public static UInt32 FSCTL_INVALIDATE_VOLUMES;
    public static UInt32 FSCTL_QUERY_FAT_BPB;
    public static UInt32 FSCTL_REQUEST_FILTER_OPLOCK;
    public static UInt32 FSCTL_FILESYSTEM_GET_STATISTICS;
    public static UInt32 FSCTL_GET_NTFS_VOLUME_DATA;
    public static UInt32 FSCTL_GET_NTFS_FILE_RECORD;
    public static UInt32 FSCTL_GET_VOLUME_BITMAP;
    public static UInt32 FSCTL_GET_RETRIEVAL_POINTERS;
    public static UInt32 FSCTL_MOVE_FILE;
    public static UInt32 FSCTL_IS_VOLUME_DIRTY;
    public static UInt32 FSCTL_ALLOW_EXTENDED_DASD_IO;
    public static UInt32 FSCTL_FIND_FILES_BY_SID;
    public static UInt32 FSCTL_SET_OBJECT_ID;
    public static UInt32 FSCTL_GET_OBJECT_ID;
    public static UInt32 FSCTL_DELETE_OBJECT_ID;
    public static UInt32 FSCTL_SET_REPARSE_POINT;
    public static UInt32 FSCTL_GET_REPARSE_POINT;
    public static UInt32 FSCTL_DELETE_REPARSE_POINT;
    public static UInt32 FSCTL_ENUM_USN_DATA;
    public static UInt32 FSCTL_SECURITY_ID_CHECK;
    public static UInt32 FSCTL_READ_USN_JOURNAL;
    public static UInt32 FSCTL_SET_OBJECT_ID_EXTENDED;
    public static UInt32 FSCTL_CREATE_OR_GET_OBJECT_ID;
    public static UInt32 FSCTL_SET_SPARSE;
    public static UInt32 FSCTL_SET_ZERO_DATA;
    public static UInt32 FSCTL_QUERY_ALLOCATED_RANGES;
    public static UInt32 FSCTL_ENABLE_UPGRADE;
    public static UInt32 FSCTL_SET_ENCRYPTION;
    public static UInt32 FSCTL_ENCRYPTION_FSCTL_IO;
    public static UInt32 FSCTL_WRITE_RAW_ENCRYPTED;
    public static UInt32 FSCTL_READ_RAW_ENCRYPTED;
    public static UInt32 FSCTL_CREATE_USN_JOURNAL;
    public static UInt32 FSCTL_READ_FILE_USN_DATA;
    public static UInt32 FSCTL_WRITE_USN_CLOSE_RECORD;
    public static UInt32 FSCTL_EXTEND_VOLUME;
    public static UInt32 FSCTL_QUERY_USN_JOURNAL;
    public static UInt32 FSCTL_DELETE_USN_JOURNAL;
    public static UInt32 FSCTL_MARK_HANDLE;
    public static UInt32 FSCTL_SIS_COPYFILE;
    public static UInt32 FSCTL_SIS_LINK_FILES;
    public static UInt32 FSCTL_RECALL_FILE;
    public static UInt32 FSCTL_READ_FROM_PLEX;
    public static UInt32 FSCTL_FILE_PREFETCH;
    public static UInt32 FSCTL_MAKE_MEDIA_COMPATIBLE;
    public static UInt32 FSCTL_SET_DEFECT_MANAGEMENT;
    public static UInt32 FSCTL_QUERY_SPARING_INFO;
    public static UInt32 FSCTL_QUERY_ON_DISK_VOLUME_INFO;
    public static UInt32 FSCTL_SET_VOLUME_COMPRESSION_STATE;
    public static UInt32 FSCTL_TXFS_MODIFY_RM;
    public static UInt32 FSCTL_TXFS_QUERY_RM_INFORMATION;
    public static UInt32 FSCTL_TXFS_ROLLFORWARD_REDO;
    public static UInt32 FSCTL_TXFS_ROLLFORWARD_UNDO;
    public static UInt32 FSCTL_TXFS_START_RM;
    public static UInt32 FSCTL_TXFS_SHUTDOWN_RM;
    public static UInt32 FSCTL_TXFS_READ_BACKUP_INFORMATION;
    public static UInt32 FSCTL_TXFS_WRITE_BACKUP_INFORMATION;
    public static UInt32 FSCTL_TXFS_CREATE_SECONDARY_RM;
    public static UInt32 FSCTL_TXFS_GET_METADATA_INFO;
    public static UInt32 FSCTL_TXFS_GET_TRANSACTED_VERSION;
    public static UInt32 FSCTL_TXFS_SAVEPOINT_INFORMATION;
    public static UInt32 FSCTL_TXFS_CREATE_MINIVERSION;
    public static UInt32 FSCTL_TXFS_TRANSACTION_ACTIVE;
    public static UInt32 FSCTL_SET_ZERO_ON_DEALLOCATION;
    public static UInt32 FSCTL_SET_REPAIR;
    public static UInt32 FSCTL_GET_REPAIR;
    public static UInt32 FSCTL_WAIT_FOR_REPAIR;
    public static UInt32 FSCTL_INITIATE_REPAIR;
    public static UInt32 FSCTL_CSC_INTERNAL;
    public static UInt32 FSCTL_SHRINK_VOLUME;
    public static UInt32 FSCTL_SET_SHORT_NAME_BEHAVIOR;
    public static UInt32 FSCTL_DFSR_SET_GHOST_HANDLE_STATE;
    public static UInt32 FSCTL_TXFS_LIST_TRANSACTION_LOCKED_FILES;
    public static UInt32 FSCTL_TXFS_LIST_TRANSACTIONS;
    public static UInt32 FSCTL_QUERY_PAGEFILE_ENCRYPTION;
    public static UInt32 FSCTL_RESET_VOLUME_ALLOCATION_HINTS;
    public static UInt32 FSCTL_QUERY_DEPENDENT_VOLUME;
    public static UInt32 FSCTL_SD_GLOBAL_CHANGE;
    public static UInt32 FSCTL_TXFS_READ_BACKUP_INFORMATION2;
    public static UInt32 FSCTL_LOOKUP_STREAM_FROM_CLUSTER;
    public static UInt32 FSCTL_TXFS_WRITE_BACKUP_INFORMATION2;
    public static UInt32 FSCTL_FILE_TYPE_NOTIFICATION;
    public static UInt32 FSCTL_GET_BOOT_AREA_INFO;
    public static UInt32 FSCTL_GET_RETRIEVAL_POINTER_BASE;
    public static UInt32 FSCTL_SET_PERSISTENT_VOLUME_STATE;
    public static UInt32 FSCTL_QUERY_PERSISTENT_VOLUME_STATE;
    public static UInt32 FSCTL_REQUEST_OPLOCK;
    public static UInt32 FSCTL_CSV_TUNNEL_REQUEST;
    public static UInt32 FSCTL_IS_CSV_FILE;
    public static UInt32 FSCTL_QUERY_FILE_SYSTEM_RECOGNITION;
    public static UInt32 FSCTL_CSV_GET_VOLUME_PATH_NAME;
    public static UInt32 FSCTL_CSV_GET_VOLUME_NAME_FOR_VOLUME_MOUNT_POINT;
    public static UInt32 FSCTL_CSV_GET_VOLUME_PATH_NAMES_FOR_VOLUME_NAME;
    public static UInt32 FSCTL_IS_FILE_ON_CSV_VOLUME;
    public static UInt32 FSCTL_MARK_AS_SYSTEM_HIVE;
    private static IoControlCodes();
    public static UInt32 CTL_CODE(UInt32 DeviceType, UInt32 Function, UInt32 Method, UInt32 Access);
}
[NoReorderAttribute]
public static class JetBrains.Interop.WinApi.Constants.JOB_OBJECT_LIMIT : object {
    public static UInt32 JOB_OBJECT_LIMIT_WORKINGSET;
    public static UInt32 JOB_OBJECT_LIMIT_PROCESS_TIME;
    public static UInt32 JOB_OBJECT_LIMIT_JOB_TIME;
    public static UInt32 JOB_OBJECT_LIMIT_ACTIVE_PROCESS;
    public static UInt32 JOB_OBJECT_LIMIT_AFFINITY;
    public static UInt32 JOB_OBJECT_LIMIT_PRIORITY_CLASS;
    public static UInt32 JOB_OBJECT_LIMIT_PRESERVE_JOB_TIME;
    public static UInt32 JOB_OBJECT_LIMIT_SCHEDULING_CLASS;
    public static UInt32 JOB_OBJECT_LIMIT_PROCESS_MEMORY;
    public static UInt32 JOB_OBJECT_LIMIT_JOB_MEMORY;
    public static UInt32 JOB_OBJECT_LIMIT_DIE_ON_UNHANDLED_EXCEPTION;
    public static UInt32 JOB_OBJECT_LIMIT_BREAKAWAY_OK;
    public static UInt32 JOB_OBJECT_LIMIT_SILENT_BREAKAWAY_OK;
    public static UInt32 JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE;
    public static UInt32 JOB_OBJECT_LIMIT_SUBSET_AFFINITY;
    public static UInt32 JOB_OBJECT_LIMIT_RESERVED3;
    public static UInt32 JOB_OBJECT_LIMIT_RESERVED4;
    public static UInt32 JOB_OBJECT_LIMIT_RESERVED5;
    public static UInt32 JOB_OBJECT_LIMIT_RESERVED6;
    public static UInt32 JOB_OBJECT_LIMIT_VALID_FLAGS;
    public static UInt32 JOB_OBJECT_BASIC_LIMIT_VALID_FLAGS;
    public static UInt32 JOB_OBJECT_EXTENDED_LIMIT_VALID_FLAGS;
    public static UInt32 JOB_OBJECT_RESERVED_LIMIT_VALID_FLAGS;
    private static JOB_OBJECT_LIMIT();
}
public enum JetBrains.Interop.WinApi.Constants.JOBOBJECTINFOCLASS : Enum {
    public UInt32 value__;
    public static JOBOBJECTINFOCLASS JobObjectBasicAccountingInformation;
    public static JOBOBJECTINFOCLASS JobObjectBasicLimitInformation;
    public static JOBOBJECTINFOCLASS JobObjectBasicProcessIdList;
    public static JOBOBJECTINFOCLASS JobObjectBasicUIRestrictions;
    [ObsoleteAttribute("// deprecated")]
public static JOBOBJECTINFOCLASS JobObjectSecurityLimitInformation;
    public static JOBOBJECTINFOCLASS JobObjectEndOfJobTimeInformation;
    public static JOBOBJECTINFOCLASS JobObjectAssociateCompletionPortInformation;
    public static JOBOBJECTINFOCLASS JobObjectBasicAndIoAccountingInformation;
    public static JOBOBJECTINFOCLASS JobObjectExtendedLimitInformation;
    public static JOBOBJECTINFOCLASS JobObjectJobSetInformation;
    public static JOBOBJECTINFOCLASS JobObjectGroupInformation;
    public static JOBOBJECTINFOCLASS MaxJobObjectInfoClass;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.Constants.ListViewItemMask : Enum {
    public UInt32 value__;
    public static ListViewItemMask LVIF_TEXT;
    public static ListViewItemMask LVIF_IMAGE;
    public static ListViewItemMask LVIF_PARAM;
    public static ListViewItemMask LVIF_STATE;
    public static ListViewItemMask LVIF_INDENT;
    public static ListViewItemMask LVIF_NORECOMPUTE;
    public static ListViewItemMask LVIF_GROUPID;
    public static ListViewItemMask LVIF_COLUMNS;
    public static ListViewItemMask LVIF_DI_SETITEM;
    public static ListViewItemMask LVIF_COLFMT;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.Constants.ListViewNextItemFlags : Enum {
    public UInt32 value__;
    public static ListViewNextItemFlags LVNI_ALL;
    public static ListViewNextItemFlags LVNI_FOCUSED;
    public static ListViewNextItemFlags LVNI_SELECTED;
    public static ListViewNextItemFlags LVNI_CUT;
    public static ListViewNextItemFlags LVNI_DROPHILITED;
    public static ListViewNextItemFlags LVNI_STATEMASK;
    public static ListViewNextItemFlags LVNI_VISIBLEORDER;
    public static ListViewNextItemFlags LVNI_PREVIOUS;
    public static ListViewNextItemFlags LVNI_VISIBLEONLY;
    public static ListViewNextItemFlags LVNI_SAMEGROUPONLY;
    public static ListViewNextItemFlags LVNI_ABOVE;
    public static ListViewNextItemFlags LVNI_BELOW;
    public static ListViewNextItemFlags LVNI_TOLEFT;
    public static ListViewNextItemFlags LVNI_TORIGHT;
    public static ListViewNextItemFlags LVNI_DIRECTIONMASK;
}
public static class JetBrains.Interop.WinApi.Constants.Locale : object {
    public static UInt32 LOCALE_INVARIANT;
    public static string LOCALE_NAME_INVARIANT;
    public static int LOCALE_NAME_MAX_LENGTH;
    public static string LOCALE_NAME_SYSTEM_DEFAULT;
    [CanBeNullAttribute]
public static string LOCALE_NAME_USER_DEFAULT;
    private static Locale();
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.Constants.LocaleDependentMappingFlags : Enum {
    public UInt32 value__;
    public static LocaleDependentMappingFlags LCMAP_LOWERCASE;
    public static LocaleDependentMappingFlags LCMAP_UPPERCASE;
    public static LocaleDependentMappingFlags LCMAP_TITLECASE;
    public static LocaleDependentMappingFlags LCMAP_SORTKEY;
    public static LocaleDependentMappingFlags LCMAP_HASH;
    public static LocaleDependentMappingFlags LCMAP_BYTEREV;
    public static LocaleDependentMappingFlags LCMAP_HIRAGANA;
    public static LocaleDependentMappingFlags LCMAP_KATAKANA;
    public static LocaleDependentMappingFlags LCMAP_HALFWIDTH;
    public static LocaleDependentMappingFlags LCMAP_FULLWIDTH;
    public static LocaleDependentMappingFlags LCMAP_LINGUISTIC_CASING;
    public static LocaleDependentMappingFlags LCMAP_SIMPLIFIED_CHINESE;
    public static LocaleDependentMappingFlags LCMAP_TRADITIONAL_CHINESE;
}
public enum JetBrains.Interop.WinApi.Constants.MemoryMappingAttributes : Enum {
    public UInt32 value__;
    public static MemoryMappingAttributes SEC_FILE;
    public static MemoryMappingAttributes SEC_IMAGE;
    public static MemoryMappingAttributes SEC_PROTECTED_IMAGE;
    public static MemoryMappingAttributes SEC_RESERVE;
    public static MemoryMappingAttributes SEC_COMMIT;
    public static MemoryMappingAttributes SEC_NOCACHE;
    public static MemoryMappingAttributes SEC_WRITECOMBINE;
    public static MemoryMappingAttributes SEC_LARGE_PAGES;
    public static MemoryMappingAttributes SEC_IMAGE_NO_EXECUTE;
}
public static class JetBrains.Interop.WinApi.Constants.MetaHostH : object {
    public static Guid IID_ICLRMetaHost;
    public static Guid CLSID_CLRMetaHost;
    public static Guid IID_ICLRMetaHostPolicy;
    public static Guid CLSID_CLRMetaHostPolicy;
    public static Guid IID_ICLRDebugging;
    public static Guid CLSID_CLRDebugging;
    public static Guid IID_ICLRRuntimeInfo;
    public static Guid IID_ICLRStrongName;
    public static Guid CLSID_CLRStrongName;
    public static Guid IID_ICLRProfiling;
    public static Guid CLSID_CLRProfiling;
    public static Guid CLSID_CLRDebuggingLegacy;
    public static Guid IID_ICLRDebuggingLibraryProvider;
    private static MetaHostH();
}
public enum JetBrains.Interop.WinApi.Constants.MONITOR_DEFAULTTO : Enum {
    public UInt32 value__;
    public static MONITOR_DEFAULTTO MONITOR_DEFAULTTONEAREST;
    public static MONITOR_DEFAULTTO MONITOR_DEFAULTTONULL;
    public static MONITOR_DEFAULTTO MONITOR_DEFAULTTOPRIMARY;
}
public enum JetBrains.Interop.WinApi.Constants.MONITOR_DPI_TYPE : Enum {
    public int value__;
    public static MONITOR_DPI_TYPE MDT_EFFECTIVE_DPI;
    public static MONITOR_DPI_TYPE MDT_ANGULAR_DPI;
    public static MONITOR_DPI_TYPE MDT_RAW_DPI;
    public static MONITOR_DPI_TYPE MDT_DEFAULT;
}
public static class JetBrains.Interop.WinApi.Constants.PIPE_ACCESS : object {
    public static UInt32 PIPE_ACCESS_DUPLEX;
    public static UInt32 PIPE_ACCESS_INBOUND;
    public static UInt32 PIPE_ACCESS_OUTBOUND;
    private static PIPE_ACCESS();
}
public static class JetBrains.Interop.WinApi.Constants.PIPE_READMODE : object {
    public static UInt32 PIPE_READMODE_BYTE;
    public static UInt32 PIPE_READMODE_MESSAGE;
    private static PIPE_READMODE();
}
public static class JetBrains.Interop.WinApi.Constants.PIPE_TYPE : object {
    public static UInt32 PIPE_TYPE_BYTE;
    public static UInt32 PIPE_TYPE_MESSAGE;
    private static PIPE_TYPE();
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.Constants.PROCESS_ACCESS : Enum {
    public UInt32 value__;
    public static PROCESS_ACCESS PROCESS_TERMINATE;
    public static PROCESS_ACCESS PROCESS_CREATE_THREAD;
    public static PROCESS_ACCESS PROCESS_SET_SESSIONID;
    public static PROCESS_ACCESS PROCESS_VM_OPERATION;
    public static PROCESS_ACCESS PROCESS_VM_READ;
    public static PROCESS_ACCESS PROCESS_VM_WRITE;
    public static PROCESS_ACCESS PROCESS_DUP_HANDLE;
    public static PROCESS_ACCESS PROCESS_CREATE_PROCESS;
    public static PROCESS_ACCESS PROCESS_SET_QUOTA;
    public static PROCESS_ACCESS PROCESS_SET_INFORMATION;
    public static PROCESS_ACCESS PROCESS_QUERY_INFORMATION;
    public static PROCESS_ACCESS PROCESS_SUSPEND_RESUME;
    public static PROCESS_ACCESS PROCESS_QUERY_LIMITED_INFORMATION;
    public static PROCESS_ACCESS PROCESS_ALL_ACCESS;
    public static PROCESS_ACCESS DELETE;
    public static PROCESS_ACCESS READ_CONTROL;
    public static PROCESS_ACCESS WRITE_DAC;
    public static PROCESS_ACCESS WRITE_OWNER;
    public static PROCESS_ACCESS SYNCHRONIZE;
    public static PROCESS_ACCESS STANDARD_RIGHTS_REQUIRED;
    public static PROCESS_ACCESS STANDARD_RIGHTS_READ;
    public static PROCESS_ACCESS STANDARD_RIGHTS_WRITE;
    public static PROCESS_ACCESS STANDARD_RIGHTS_EXECUTE;
    public static PROCESS_ACCESS STANDARD_RIGHTS_ALL;
    public static PROCESS_ACCESS SPECIFIC_RIGHTS_ALL;
    public static PROCESS_ACCESS ACCESS_SYSTEM_SECURITY;
}
public enum JetBrains.Interop.WinApi.Constants.PROCESS_DPI_AWARENESS : Enum {
    public int value__;
    public static PROCESS_DPI_AWARENESS PROCESS_DPI_UNAWARE;
    public static PROCESS_DPI_AWARENESS PROCESS_SYSTEM_DPI_AWARE;
    public static PROCESS_DPI_AWARENESS PROCESS_PER_MONITOR_DPI_AWARE;
}
public enum JetBrains.Interop.WinApi.Constants.RegionResult : Enum {
    public int value__;
    public static RegionResult ERROR;
    public static RegionResult NULLREGION;
    public static RegionResult SIMPLEREGION;
    public static RegionResult COMPLEXREGION;
    public static RegionResult RGN_ERROR;
}
[NoReorderAttribute]
public static class JetBrains.Interop.WinApi.Constants.RegisterWaitForSingleObjectFlags : object {
    public static UInt32 WT_EXECUTEDEFAULT;
    [ObsoleteAttribute("This flag is not used.")]
public static UInt32 WT_EXECUTEINIOTHREAD;
    public static UInt32 WT_EXECUTEINPERSISTENTTHREAD;
    public static UInt32 WT_EXECUTEINWAITTHREAD;
    public static UInt32 WT_EXECUTELONGFUNCTION;
    public static UInt32 WT_EXECUTEONLYONCE;
    public static UInt32 WT_TRANSFER_IMPERSONATION;
    private static RegisterWaitForSingleObjectFlags();
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.Constants.RegLoadAppKeyFlags : Enum {
    public UInt32 value__;
    public static RegLoadAppKeyFlags REG_PROCESS_APPKEY;
}
[NoReorderAttribute]
public static class JetBrains.Interop.WinApi.Constants.ReparsePointConstants : object {
    public static UInt32 IO_REPARSE_TAG_MOUNT_POINT;
    public static UInt32 IO_REPARSE_TAG_HSM;
    public static UInt32 IO_REPARSE_TAG_HSM2;
    public static UInt32 IO_REPARSE_TAG_SIS;
    public static UInt32 IO_REPARSE_TAG_WIM;
    public static UInt32 IO_REPARSE_TAG_CSV;
    public static UInt32 IO_REPARSE_TAG_DFS;
    public static UInt32 IO_REPARSE_TAG_SYMLINK;
    public static UInt32 IO_REPARSE_TAG_DFSR;
    public static UInt32 IO_REPARSE_TAG_LX_SYMLINK;
    public static UInt32 MAXIMUM_REPARSE_DATA_BUFFER_SIZE;
    private static ReparsePointConstants();
    public static bool IsReparseTagMicrosoft(UInt32 _tag);
    public static bool IsReparseTagNameSurrogate(UInt32 _tag);
}
public static class JetBrains.Interop.WinApi.Constants.RestartManagerConstants : object {
    public static int CCH_RM_MAX_APP_NAME;
    public static int CCH_RM_MAX_SVC_NAME;
    public static int RM_SESSION_KEY_LEN;
    public static int CCH_RM_SESSION_KEY;
    public static int RM_INVALID_PROCESS;
    public static int RM_INVALID_TS_SESSION;
    private static RestartManagerConstants();
}
public enum JetBrains.Interop.WinApi.Constants.RM_APP_STATUS : Enum {
    public UInt32 value__;
    public static RM_APP_STATUS RmStatusUnknown;
    public static RM_APP_STATUS RmStatusRunning;
    public static RM_APP_STATUS RmStatusStopped;
    public static RM_APP_STATUS RmStatusStoppedOther;
    public static RM_APP_STATUS RmStatusRestarted;
    public static RM_APP_STATUS RmStatusErrorOnStop;
    public static RM_APP_STATUS RmStatusErrorOnRestart;
    public static RM_APP_STATUS RmStatusShutdownMasked;
    public static RM_APP_STATUS RmStatusRestartMasked;
}
public enum JetBrains.Interop.WinApi.Constants.RM_APP_TYPE : Enum {
    public int value__;
    public static RM_APP_TYPE RmUnknownApp;
    public static RM_APP_TYPE RmMainWindow;
    public static RM_APP_TYPE RmOtherWindow;
    public static RM_APP_TYPE RmService;
    public static RM_APP_TYPE RmExplorer;
    public static RM_APP_TYPE RmConsole;
    public static RM_APP_TYPE RmCritical;
}
public enum JetBrains.Interop.WinApi.Constants.RM_REBOOT_REASON : Enum {
    public UInt32 value__;
    public static RM_REBOOT_REASON RmRebootReasonNone;
    public static RM_REBOOT_REASON RmRebootReasonPermissionDenied;
    public static RM_REBOOT_REASON RmRebootReasonSessionMismatch;
    public static RM_REBOOT_REASON RmRebootReasonCriticalProcess;
    public static RM_REBOOT_REASON RmRebootReasonCriticalService;
    public static RM_REBOOT_REASON RmRebootReasonDetectedSelf;
}
public static class JetBrains.Interop.WinApi.Constants.SetFilePointer : object {
    public static UInt32 INVALID_SET_FILE_POINTER;
}
public class JetBrains.Interop.WinApi.Constants.SetHandleInformationFlags : object {
    public static UInt32 HANDLE_FLAG_INHERIT;
    public static UInt32 HANDLE_FLAG_PROTECT_FROM_CLOSE;
    private static SetHandleInformationFlags();
}
[PublicAPIAttribute]
public static class JetBrains.Interop.WinApi.Constants.SPI : object {
    public static UInt32 SPI_GETBEEP;
    public static UInt32 SPI_SETBEEP;
    public static UInt32 SPI_GETMOUSE;
    public static UInt32 SPI_SETMOUSE;
    public static UInt32 SPI_GETBORDER;
    public static UInt32 SPI_SETBORDER;
    public static UInt32 SPI_GETKEYBOARDSPEED;
    public static UInt32 SPI_SETKEYBOARDSPEED;
    public static UInt32 SPI_LANGDRIVER;
    public static UInt32 SPI_ICONHORIZONTALSPACING;
    public static UInt32 SPI_GETSCREENSAVETIMEOUT;
    public static UInt32 SPI_SETSCREENSAVETIMEOUT;
    public static UInt32 SPI_GETSCREENSAVEACTIVE;
    public static UInt32 SPI_SETSCREENSAVEACTIVE;
    public static UInt32 SPI_GETGRIDGRANULARITY;
    public static UInt32 SPI_SETGRIDGRANULARITY;
    public static UInt32 SPI_SETDESKWALLPAPER;
    public static UInt32 SPI_SETDESKPATTERN;
    public static UInt32 SPI_GETKEYBOARDDELAY;
    public static UInt32 SPI_SETKEYBOARDDELAY;
    public static UInt32 SPI_ICONVERTICALSPACING;
    public static UInt32 SPI_GETICONTITLEWRAP;
    public static UInt32 SPI_SETICONTITLEWRAP;
    public static UInt32 SPI_GETMENUDROPALIGNMENT;
    public static UInt32 SPI_SETMENUDROPALIGNMENT;
    public static UInt32 SPI_SETDOUBLECLKWIDTH;
    public static UInt32 SPI_SETDOUBLECLKHEIGHT;
    public static UInt32 SPI_GETICONTITLELOGFONT;
    public static UInt32 SPI_SETDOUBLECLICKTIME;
    public static UInt32 SPI_SETMOUSEBUTTONSWAP;
    public static UInt32 SPI_SETICONTITLELOGFONT;
    public static UInt32 SPI_GETFASTTASKSWITCH;
    public static UInt32 SPI_SETFASTTASKSWITCH;
    public static UInt32 SPI_SETDRAGFULLWINDOWS;
    public static UInt32 SPI_GETDRAGFULLWINDOWS;
    public static UInt32 SPI_GETNONCLIENTMETRICS;
    public static UInt32 SPI_SETNONCLIENTMETRICS;
    public static UInt32 SPI_GETMINIMIZEDMETRICS;
    public static UInt32 SPI_SETMINIMIZEDMETRICS;
    public static UInt32 SPI_GETICONMETRICS;
    public static UInt32 SPI_SETICONMETRICS;
    public static UInt32 SPI_SETWORKAREA;
    public static UInt32 SPI_GETWORKAREA;
    public static UInt32 SPI_SETPENWINDOWS;
    public static UInt32 SPI_GETHIGHCONTRAST;
    public static UInt32 SPI_SETHIGHCONTRAST;
    public static UInt32 SPI_GETKEYBOARDPREF;
    public static UInt32 SPI_SETKEYBOARDPREF;
    public static UInt32 SPI_GETSCREENREADER;
    public static UInt32 SPI_SETSCREENREADER;
    public static UInt32 SPI_GETANIMATION;
    public static UInt32 SPI_SETANIMATION;
    public static UInt32 SPI_GETFONTSMOOTHING;
    public static UInt32 SPI_SETFONTSMOOTHING;
    public static UInt32 SPI_SETDRAGWIDTH;
    public static UInt32 SPI_SETDRAGHEIGHT;
    public static UInt32 SPI_SETHANDHELD;
    public static UInt32 SPI_GETLOWPOWERTIMEOUT;
    public static UInt32 SPI_GETPOWEROFFTIMEOUT;
    public static UInt32 SPI_SETLOWPOWERTIMEOUT;
    public static UInt32 SPI_SETPOWEROFFTIMEOUT;
    public static UInt32 SPI_GETLOWPOWERACTIVE;
    public static UInt32 SPI_GETPOWEROFFACTIVE;
    public static UInt32 SPI_SETLOWPOWERACTIVE;
    public static UInt32 SPI_SETPOWEROFFACTIVE;
    public static UInt32 SPI_SETCURSORS;
    public static UInt32 SPI_SETICONS;
    public static UInt32 SPI_GETDEFAULTINPUTLANG;
    public static UInt32 SPI_SETDEFAULTINPUTLANG;
    public static UInt32 SPI_SETLANGTOGGLE;
    public static UInt32 SPI_GETWINDOWSEXTENSION;
    public static UInt32 SPI_SETMOUSETRAILS;
    public static UInt32 SPI_GETMOUSETRAILS;
    public static UInt32 SPI_SETSCREENSAVERRUNNING;
    public static UInt32 SPI_SCREENSAVERRUNNING;
    public static UInt32 SPI_GETFILTERKEYS;
    public static UInt32 SPI_SETFILTERKEYS;
    public static UInt32 SPI_GETTOGGLEKEYS;
    public static UInt32 SPI_SETTOGGLEKEYS;
    public static UInt32 SPI_GETMOUSEKEYS;
    public static UInt32 SPI_SETMOUSEKEYS;
    public static UInt32 SPI_GETSHOWSOUNDS;
    public static UInt32 SPI_SETSHOWSOUNDS;
    public static UInt32 SPI_GETSTICKYKEYS;
    public static UInt32 SPI_SETSTICKYKEYS;
    public static UInt32 SPI_GETACCESSTIMEOUT;
    public static UInt32 SPI_SETACCESSTIMEOUT;
    public static UInt32 SPI_GETSERIALKEYS;
    public static UInt32 SPI_SETSERIALKEYS;
    public static UInt32 SPI_GETSOUNDSENTRY;
    public static UInt32 SPI_SETSOUNDSENTRY;
    public static UInt32 SPI_GETSNAPTODEFBUTTON;
    public static UInt32 SPI_SETSNAPTODEFBUTTON;
    public static UInt32 SPI_GETMOUSEHOVERWIDTH;
    public static UInt32 SPI_SETMOUSEHOVERWIDTH;
    public static UInt32 SPI_GETMOUSEHOVERHEIGHT;
    public static UInt32 SPI_SETMOUSEHOVERHEIGHT;
    public static UInt32 SPI_GETMOUSEHOVERTIME;
    public static UInt32 SPI_SETMOUSEHOVERTIME;
    public static UInt32 SPI_GETWHEELSCROLLLINES;
    public static UInt32 SPI_SETWHEELSCROLLLINES;
    public static UInt32 SPI_GETMENUSHOWDELAY;
    public static UInt32 SPI_SETMENUSHOWDELAY;
    public static UInt32 SPI_GETWHEELSCROLLCHARS;
    public static UInt32 SPI_SETWHEELSCROLLCHARS;
    public static UInt32 SPI_GETSHOWIMEUI;
    public static UInt32 SPI_SETSHOWIMEUI;
    public static UInt32 SPI_GETMOUSESPEED;
    public static UInt32 SPI_SETMOUSESPEED;
    public static UInt32 SPI_GETSCREENSAVERRUNNING;
    public static UInt32 SPI_GETDESKWALLPAPER;
    public static UInt32 SPI_GETAUDIODESCRIPTION;
    public static UInt32 SPI_SETAUDIODESCRIPTION;
    public static UInt32 SPI_GETSCREENSAVESECURE;
    public static UInt32 SPI_SETSCREENSAVESECURE;
    public static UInt32 SPI_GETHUNGAPPTIMEOUT;
    public static UInt32 SPI_SETHUNGAPPTIMEOUT;
    public static UInt32 SPI_GETWAITTOKILLTIMEOUT;
    public static UInt32 SPI_SETWAITTOKILLTIMEOUT;
    public static UInt32 SPI_GETWAITTOKILLSERVICETIMEOUT;
    public static UInt32 SPI_SETWAITTOKILLSERVICETIMEOUT;
    public static UInt32 SPI_GETMOUSEDOCKTHRESHOLD;
    public static UInt32 SPI_SETMOUSEDOCKTHRESHOLD;
    public static UInt32 SPI_GETPENDOCKTHRESHOLD;
    public static UInt32 SPI_SETPENDOCKTHRESHOLD;
    public static UInt32 SPI_GETWINARRANGING;
    public static UInt32 SPI_SETWINARRANGING;
    public static UInt32 SPI_GETMOUSEDRAGOUTTHRESHOLD;
    public static UInt32 SPI_SETMOUSEDRAGOUTTHRESHOLD;
    public static UInt32 SPI_GETPENDRAGOUTTHRESHOLD;
    public static UInt32 SPI_SETPENDRAGOUTTHRESHOLD;
    public static UInt32 SPI_GETMOUSESIDEMOVETHRESHOLD;
    public static UInt32 SPI_SETMOUSESIDEMOVETHRESHOLD;
    public static UInt32 SPI_GETPENSIDEMOVETHRESHOLD;
    public static UInt32 SPI_SETPENSIDEMOVETHRESHOLD;
    public static UInt32 SPI_GETDRAGFROMMAXIMIZE;
    public static UInt32 SPI_SETDRAGFROMMAXIMIZE;
    public static UInt32 SPI_GETSNAPSIZING;
    public static UInt32 SPI_SETSNAPSIZING;
    public static UInt32 SPI_GETDOCKMOVING;
    public static UInt32 SPI_SETDOCKMOVING;
    public static UInt32 SPI_GETTOUCHPREDICTIONPARAMETERS;
    public static UInt32 SPI_SETTOUCHPREDICTIONPARAMETERS;
    public static UInt32 SPI_GETLOGICALDPIOVERRIDE;
    public static UInt32 SPI_SETLOGICALDPIOVERRIDE;
    public static UInt32 SPI_GETMOUSECORNERCLIPLENGTH;
    public static UInt32 SPI_SETMOUSECORNERCLIPLENGTH;
    public static UInt32 SPI_GETMENURECT;
    public static UInt32 SPI_SETMENURECT;
    public static UInt32 SPI_GETACTIVEWINDOWTRACKING;
    public static UInt32 SPI_SETACTIVEWINDOWTRACKING;
    public static UInt32 SPI_GETMENUANIMATION;
    public static UInt32 SPI_SETMENUANIMATION;
    public static UInt32 SPI_GETCOMBOBOXANIMATION;
    public static UInt32 SPI_SETCOMBOBOXANIMATION;
    public static UInt32 SPI_GETLISTBOXSMOOTHSCROLLING;
    public static UInt32 SPI_SETLISTBOXSMOOTHSCROLLING;
    public static UInt32 SPI_GETGRADIENTCAPTIONS;
    public static UInt32 SPI_SETGRADIENTCAPTIONS;
    public static UInt32 SPI_GETKEYBOARDCUES;
    public static UInt32 SPI_SETKEYBOARDCUES;
    public static UInt32 SPI_GETMENUUNDERLINES;
    public static UInt32 SPI_SETMENUUNDERLINES;
    public static UInt32 SPI_GETACTIVEWNDTRKZORDER;
    public static UInt32 SPI_SETACTIVEWNDTRKZORDER;
    public static UInt32 SPI_GETHOTTRACKING;
    public static UInt32 SPI_SETHOTTRACKING;
    public static UInt32 SPI_GETMENUFADE;
    public static UInt32 SPI_SETMENUFADE;
    public static UInt32 SPI_GETSELECTIONFADE;
    public static UInt32 SPI_SETSELECTIONFADE;
    public static UInt32 SPI_GETTOOLTIPANIMATION;
    public static UInt32 SPI_SETTOOLTIPANIMATION;
    public static UInt32 SPI_GETTOOLTIPFADE;
    public static UInt32 SPI_SETTOOLTIPFADE;
    public static UInt32 SPI_GETCURSORSHADOW;
    public static UInt32 SPI_SETCURSORSHADOW;
    public static UInt32 SPI_GETMOUSESONAR;
    public static UInt32 SPI_SETMOUSESONAR;
    public static UInt32 SPI_GETMOUSECLICKLOCK;
    public static UInt32 SPI_SETMOUSECLICKLOCK;
    public static UInt32 SPI_GETMOUSEVANISH;
    public static UInt32 SPI_SETMOUSEVANISH;
    public static UInt32 SPI_GETFLATMENU;
    public static UInt32 SPI_SETFLATMENU;
    public static UInt32 SPI_GETDROPSHADOW;
    public static UInt32 SPI_SETDROPSHADOW;
    public static UInt32 SPI_GETBLOCKSENDINPUTRESETS;
    public static UInt32 SPI_SETBLOCKSENDINPUTRESETS;
    public static UInt32 SPI_GETUIEFFECTS;
    public static UInt32 SPI_SETUIEFFECTS;
    public static UInt32 SPI_GETDISABLEOVERLAPPEDCONTENT;
    public static UInt32 SPI_SETDISABLEOVERLAPPEDCONTENT;
    public static UInt32 SPI_GETCLIENTAREAANIMATION;
    public static UInt32 SPI_SETCLIENTAREAANIMATION;
    public static UInt32 SPI_GETCLEARTYPE;
    public static UInt32 SPI_SETCLEARTYPE;
    public static UInt32 SPI_GETSPEECHRECOGNITION;
    public static UInt32 SPI_SETSPEECHRECOGNITION;
    public static UInt32 SPI_GETCARETBROWSING;
    public static UInt32 SPI_SETCARETBROWSING;
    public static UInt32 SPI_GETTHREADLOCALINPUTSETTINGS;
    public static UInt32 SPI_SETTHREADLOCALINPUTSETTINGS;
    public static UInt32 SPI_GETSYSTEMLANGUAGEBAR;
    public static UInt32 SPI_SETSYSTEMLANGUAGEBAR;
    public static UInt32 SPI_GETFOREGROUNDLOCKTIMEOUT;
    public static UInt32 SPI_SETFOREGROUNDLOCKTIMEOUT;
    public static UInt32 SPI_GETACTIVEWNDTRKTIMEOUT;
    public static UInt32 SPI_SETACTIVEWNDTRKTIMEOUT;
    public static UInt32 SPI_GETFOREGROUNDFLASHCOUNT;
    public static UInt32 SPI_SETFOREGROUNDFLASHCOUNT;
    public static UInt32 SPI_GETCARETWIDTH;
    public static UInt32 SPI_SETCARETWIDTH;
    public static UInt32 SPI_GETMOUSECLICKLOCKTIME;
    public static UInt32 SPI_SETMOUSECLICKLOCKTIME;
    public static UInt32 SPI_GETFONTSMOOTHINGTYPE;
    public static UInt32 SPI_SETFONTSMOOTHINGTYPE;
    public static UInt32 SPI_GETFONTSMOOTHINGCONTRAST;
    public static UInt32 SPI_SETFONTSMOOTHINGCONTRAST;
    public static UInt32 SPI_GETFOCUSBORDERWIDTH;
    public static UInt32 SPI_SETFOCUSBORDERWIDTH;
    public static UInt32 SPI_GETFOCUSBORDERHEIGHT;
    public static UInt32 SPI_SETFOCUSBORDERHEIGHT;
    public static UInt32 SPI_GETFONTSMOOTHINGORIENTATION;
    public static UInt32 SPI_SETFONTSMOOTHINGORIENTATION;
    public static UInt32 SPI_GETMINIMUMHITRADIUS;
    public static UInt32 SPI_SETMINIMUMHITRADIUS;
    public static UInt32 SPI_GETMESSAGEDURATION;
    public static UInt32 SPI_SETMESSAGEDURATION;
    public static UInt32 SPI_GETCONTACTVISUALIZATION;
    public static UInt32 SPI_SETCONTACTVISUALIZATION;
    public static UInt32 SPI_GETGESTUREVISUALIZATION;
    public static UInt32 SPI_SETGESTUREVISUALIZATION;
    public static UInt32 SPI_GETMOUSEWHEELROUTING;
    public static UInt32 SPI_SETMOUSEWHEELROUTING;
    public static UInt32 FE_FONTSMOOTHINGSTANDARD;
    public static UInt32 FE_FONTSMOOTHINGCLEARTYPE;
    private static SPI();
}
public enum JetBrains.Interop.WinApi.Constants.StandardClipboardFormats : Enum {
    public UInt32 value__;
    public static StandardClipboardFormats CF_TEXT;
    public static StandardClipboardFormats CF_BITMAP;
    public static StandardClipboardFormats CF_METAFILEPICT;
    public static StandardClipboardFormats CF_SYLK;
    public static StandardClipboardFormats CF_DIF;
    public static StandardClipboardFormats CF_TIFF;
    public static StandardClipboardFormats CF_OEMTEXT;
    public static StandardClipboardFormats CF_DIB;
    public static StandardClipboardFormats CF_PALETTE;
    public static StandardClipboardFormats CF_PENDATA;
    public static StandardClipboardFormats CF_RIFF;
    public static StandardClipboardFormats CF_WAVE;
    public static StandardClipboardFormats CF_UNICODETEXT;
    public static StandardClipboardFormats CF_ENHMETAFILE;
    public static StandardClipboardFormats CF_HDROP;
    public static StandardClipboardFormats CF_LOCALE;
    public static StandardClipboardFormats CF_DIBV5;
    public static StandardClipboardFormats CF_MAX;
    public static StandardClipboardFormats CF_OWNERDISPLAY;
    public static StandardClipboardFormats CF_DSPTEXT;
    public static StandardClipboardFormats CF_DSPBITMAP;
    public static StandardClipboardFormats CF_DSPMETAFILEPICT;
    public static StandardClipboardFormats CF_DSPENHMETAFILE;
    public static StandardClipboardFormats CF_PRIVATEFIRST;
    public static StandardClipboardFormats CF_PRIVATELAST;
    public static StandardClipboardFormats CF_GDIOBJFIRST;
    public static StandardClipboardFormats CF_GDIOBJLAST;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.Constants.StartFlags : Enum {
    public UInt32 value__;
    public static StartFlags STARTF_USESHOWWINDOW;
    public static StartFlags STARTF_USESIZE;
    public static StartFlags STARTF_USEPOSITION;
    public static StartFlags STARTF_USECOUNTCHARS;
    public static StartFlags STARTF_USEFILLATTRIBUTE;
    public static StartFlags STARTF_RUNFULLSCREEN;
    public static StartFlags STARTF_FORCEONFEEDBACK;
    public static StartFlags STARTF_FORCEOFFFEEDBACK;
    public static StartFlags STARTF_USESTDHANDLES;
    public static StartFlags STARTF_USEHOTKEY;
    public static StartFlags STARTF_TITLEISLINKNAME;
    public static StartFlags STARTF_TITLEISAPPID;
    public static StartFlags STARTF_PREVENTPINNING;
}
public enum JetBrains.Interop.WinApi.Constants.StdHandles : Enum {
    public UInt32 value__;
    public static StdHandles STD_INPUT_HANDLE;
    public static StdHandles STD_OUTPUT_HANDLE;
    public static StdHandles STD_ERROR_HANDLE;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.Constants.StringCompareFlags : Enum {
    public UInt32 value__;
    public static StringCompareFlags NORM_IGNORECASE;
    public static StringCompareFlags NORM_IGNORENONSPACE;
    public static StringCompareFlags NORM_IGNORESYMBOLS;
    public static StringCompareFlags LINGUISTIC_IGNORECASE;
    public static StringCompareFlags LINGUISTIC_IGNOREDIACRITIC;
    public static StringCompareFlags NORM_IGNOREKANATYPE;
    public static StringCompareFlags NORM_IGNOREWIDTH;
    public static StringCompareFlags NORM_LINGUISTIC_CASING;
    public static StringCompareFlags SORT_STRINGSORT;
    public static StringCompareFlags SORT_DIGITSASNUMBERS;
}
public enum JetBrains.Interop.WinApi.Constants.TernaryRasterOperations : Enum {
    public UInt32 value__;
    public static TernaryRasterOperations SRCCOPY;
    public static TernaryRasterOperations SRCPAINT;
    public static TernaryRasterOperations SRCAND;
    public static TernaryRasterOperations SRCINVERT;
    public static TernaryRasterOperations SRCERASE;
    public static TernaryRasterOperations NOTSRCCOPY;
    public static TernaryRasterOperations NOTSRCERASE;
    public static TernaryRasterOperations MERGECOPY;
    public static TernaryRasterOperations MERGEPAINT;
    public static TernaryRasterOperations PATCOPY;
    public static TernaryRasterOperations PATPAINT;
    public static TernaryRasterOperations PATINVERT;
    public static TernaryRasterOperations DSTINVERT;
    public static TernaryRasterOperations BLACKNESS;
    public static TernaryRasterOperations WHITENESS;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.Constants.ThreadAccessRights : Enum {
    public UInt32 value__;
    public static ThreadAccessRights THREAD_DIRECT_IMPERSONATION;
    public static ThreadAccessRights THREAD_GET_CONTEXT;
    public static ThreadAccessRights THREAD_IMPERSONATE;
    public static ThreadAccessRights THREAD_QUERY_INFORMATION;
    public static ThreadAccessRights THREAD_QUERY_LIMITED_INFORMATION;
    public static ThreadAccessRights THREAD_SET_CONTEXT;
    public static ThreadAccessRights THREAD_SET_INFORMATION;
    public static ThreadAccessRights THREAD_SET_LIMITED_INFORMATION;
    public static ThreadAccessRights THREAD_SET_THREAD_TOKEN;
    public static ThreadAccessRights THREAD_SUSPEND_RESUME;
    public static ThreadAccessRights THREAD_TERMINATE;
}
public static class JetBrains.Interop.WinApi.Constants.WinTrustDataConstants : object {
    public static Guid WINTRUST_ACTION_GENERIC_VERIFY_V2;
    public static UInt32 WTD_CACHE_ONLY_URL_RETRIEVAL;
    public static UInt32 WTD_CHOICE_BLOB;
    public static UInt32 WTD_CHOICE_CATALOG;
    public static UInt32 WTD_CHOICE_CERT;
    public static UInt32 WTD_CHOICE_FILE;
    public static UInt32 WTD_CHOICE_SIGNER;
    public static UInt32 WTD_HASH_ONLY_FLAG;
    public static UInt32 WTD_LIFETIME_SIGNING_FLAG;
    public static UInt32 WTD_NO_IE4_CHAIN_FLAG;
    public static UInt32 WTD_NO_POLICY_USAGE_FLAG;
    public static UInt32 WTD_PROV_FLAGS_MASK;
    public static UInt32 WTD_REVOCATION_CHECK_CHAIN;
    public static UInt32 WTD_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT;
    public static UInt32 WTD_REVOCATION_CHECK_END_CERT;
    public static UInt32 WTD_REVOCATION_CHECK_NONE;
    public static UInt32 WTD_REVOKE_NONE;
    public static UInt32 WTD_REVOKE_WHOLECHAIN;
    public static UInt32 WTD_SAFER_FLAG;
    public static UInt32 WTD_STATEACTION_AUTO_CACHE;
    public static UInt32 WTD_STATEACTION_AUTO_CACHE_FLUSH;
    public static UInt32 WTD_STATEACTION_CLOSE;
    public static UInt32 WTD_STATEACTION_IGNORE;
    public static UInt32 WTD_STATEACTION_VERIFY;
    public static UInt32 WTD_UI_ALL;
    public static UInt32 WTD_UI_NOBAD;
    public static UInt32 WTD_UI_NOGOOD;
    public static UInt32 WTD_UI_NONE;
    public static UInt32 WTD_UICONTEXT_EXECUTE;
    public static UInt32 WTD_UICONTEXT_INSTALL;
    public static UInt32 WTD_USE_DEFAULT_OSVER_CHECK;
    public static UInt32 WTD_USE_IE4_TRUST_FLAG;
    private static WinTrustDataConstants();
}
public enum JetBrains.Interop.WinApi.Constants.WmSizeFlags : Enum {
    public UInt32 value__;
    public static WmSizeFlags SIZE_RESTORED;
    public static WmSizeFlags SIZE_MINIMIZED;
    public static WmSizeFlags SIZE_MAXIMIZED;
    public static WmSizeFlags SIZE_MAXSHOW;
    public static WmSizeFlags SIZE_MAXHIDE;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.CorSymSearchPolicyAttributes : Enum {
    public UInt32 value__;
    public static CorSymSearchPolicyAttributes AllowRegistryAccess;
    public static CorSymSearchPolicyAttributes AllowSymbolServerAccess;
    public static CorSymSearchPolicyAttributes AllowOriginalPathAccess;
    public static CorSymSearchPolicyAttributes AllowReferencePathAccess;
}
public class JetBrains.Interop.WinApi.Crypt32Dll : object {
    public static UInt32 CERT_QUERY_OBJECT_FILE;
    public static UInt32 CERT_QUERY_OBJECT_BLOB;
    public static UInt32 CERT_QUERY_CONTENT_CRL;
    public static UInt32 CERT_QUERY_CONTENT_FLAG_CRL;
    public static UInt32 CERT_QUERY_FORMAT_BINARY;
    public static UInt32 CERT_QUERY_FORMAT_BASE64_ENCODED;
    public static UInt32 CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED;
    public static UInt32 CERT_QUERY_FORMAT_FLAG_BINARY;
    public static UInt32 CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED;
    public static UInt32 CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED;
    public static UInt32 CERT_QUERY_FORMAT_FLAG_ALL;
    public static UInt32 X509_ASN_ENCODING;
    public static UInt32 CERT_SIMPLE_NAME_STR;
    public static UInt32 CERT_OID_NAME_STR;
    public static UInt32 CERT_X500_NAME_STR;
    public static bool CryptQueryObject(UInt32 dwObjectType, Void* pvObject, UInt32 dwExpectedContentTypeFlags, UInt32 dwExpectedFormatTypeFlags, UInt32 dwFlags, UIntPtr pdwMsgAndCertEncodingType, UIntPtr pdwContentType, UIntPtr pdwFormatType, IntPtr phCertStore, IntPtr phMsg, IntPtr& ppvContext);
    public static UInt32 CertNameToStrW(UInt32 dwCertEncodingType, CRYPTOAPI_BLOB* pName, UInt32 dwStrType, Char* psz, UInt32 csz);
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.CSIDL : Enum {
    public int value__;
    public static CSIDL CSIDL_DESKTOP;
    public static CSIDL CSIDL_INTERNET;
    public static CSIDL CSIDL_PROGRAMS;
    public static CSIDL CSIDL_CONTROLS;
    public static CSIDL CSIDL_PRINTERS;
    public static CSIDL CSIDL_PERSONAL;
    public static CSIDL CSIDL_FAVORITES;
    public static CSIDL CSIDL_STARTUP;
    public static CSIDL CSIDL_RECENT;
    public static CSIDL CSIDL_SENDTO;
    public static CSIDL CSIDL_BITBUCKET;
    public static CSIDL CSIDL_STARTMENU;
    public static CSIDL CSIDL_MYDOCUMENTS;
    public static CSIDL CSIDL_MYMUSIC;
    public static CSIDL CSIDL_MYVIDEO;
    public static CSIDL CSIDL_DESKTOPDIRECTORY;
    public static CSIDL CSIDL_DRIVES;
    public static CSIDL CSIDL_NETWORK;
    public static CSIDL CSIDL_NETHOOD;
    public static CSIDL CSIDL_FONTS;
    public static CSIDL CSIDL_TEMPLATES;
    public static CSIDL CSIDL_COMMON_STARTMENU;
    public static CSIDL CSIDL_COMMON_PROGRAMS;
    public static CSIDL CSIDL_COMMON_STARTUP;
    public static CSIDL CSIDL_COMMON_DESKTOPDIRECTORY;
    public static CSIDL CSIDL_APPDATA;
    public static CSIDL CSIDL_PRINTHOOD;
    public static CSIDL CSIDL_LOCAL_APPDATA;
    public static CSIDL CSIDL_ALTSTARTUP;
    public static CSIDL CSIDL_COMMON_ALTSTARTUP;
    public static CSIDL CSIDL_COMMON_FAVORITES;
    public static CSIDL CSIDL_INTERNET_CACHE;
    public static CSIDL CSIDL_COOKIES;
    public static CSIDL CSIDL_HISTORY;
    public static CSIDL CSIDL_COMMON_APPDATA;
    public static CSIDL CSIDL_WINDOWS;
    public static CSIDL CSIDL_SYSTEM;
    public static CSIDL CSIDL_PROGRAM_FILES;
    public static CSIDL CSIDL_MYPICTURES;
    public static CSIDL CSIDL_PROFILE;
    public static CSIDL CSIDL_SYSTEMX86;
    public static CSIDL CSIDL_PROGRAM_FILESX86;
    public static CSIDL CSIDL_PROGRAM_FILES_COMMON;
    public static CSIDL CSIDL_PROGRAM_FILES_COMMONX86;
    public static CSIDL CSIDL_COMMON_TEMPLATES;
    public static CSIDL CSIDL_COMMON_DOCUMENTS;
    public static CSIDL CSIDL_COMMON_ADMINTOOLS;
    public static CSIDL CSIDL_ADMINTOOLS;
    public static CSIDL CSIDL_CONNECTIONS;
    public static CSIDL CSIDL_COMMON_MUSIC;
    public static CSIDL CSIDL_COMMON_PICTURES;
    public static CSIDL CSIDL_COMMON_VIDEO;
    public static CSIDL CSIDL_RESOURCES;
    public static CSIDL CSIDL_RESOURCES_LOCALIZED;
    public static CSIDL CSIDL_COMMON_OEM_LINKS;
    public static CSIDL CSIDL_CDBURN_AREA;
    public static CSIDL CSIDL_COMPUTERSNEARME;
    public static CSIDL CSIDL_FLAG_CREATE;
    public static CSIDL CSIDL_FLAG_DONT_VERIFY;
    public static CSIDL CSIDL_FLAG_DONT_UNEXPAND;
    public static CSIDL CSIDL_FLAG_NO_ALIAS;
    public static CSIDL CSIDL_FLAG_PER_USER_INIT;
    public static CSIDL CSIDL_FLAG_MASK;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.CWPRETSTRUCT : ValueType {
    public IntPtr lResult;
    public IntPtr lParam;
    public IntPtr wParam;
    public UInt32 message;
    public Void* hwnd;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.CWPSTRUCT : ValueType {
    public IntPtr lParam;
    public IntPtr wParam;
    public UInt32 message;
    public Void* hwnd;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.DEBUG_EVENT : ValueType {
    public UInt32 dwDebugEventCode;
    public UInt32 dwProcessId;
    public UInt32 dwThreadId;
    public DEBUG_EVENT_Union u;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.BiCompression : Enum {
    public UInt32 value__;
    public static BiCompression BI_RGB;
    public static BiCompression BI_RLE8;
    public static BiCompression BI_RLE4;
    public static BiCompression BI_BITFIELDS;
    public static BiCompression BI_JPEG;
    public static BiCompression BI_PNG;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.ClassLongFlags : Enum {
    public int value__;
    public static ClassLongFlags GCLP_MENUNAME;
    public static ClassLongFlags GCLP_HBRBACKGROUND;
    public static ClassLongFlags GCLP_HCURSOR;
    public static ClassLongFlags GCLP_HICON;
    public static ClassLongFlags GCLP_HMODULE;
    public static ClassLongFlags GCL_CBWNDEXTRA;
    public static ClassLongFlags GCL_CBCLSEXTRA;
    public static ClassLongFlags GCLP_WNDPROC;
    public static ClassLongFlags GCL_STYLE;
    public static ClassLongFlags GCLP_HICONSM;
    public static ClassLongFlags GCW_ATOM;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.CreationDisposition : Enum {
    public UInt32 value__;
    public static CreationDisposition New;
    public static CreationDisposition CreateAlways;
    public static CreationDisposition OpenExisting;
    public static CreationDisposition OpenAlways;
    public static CreationDisposition TruncateExisting;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.DeviceCapabilityIndex : Enum {
    public int value__;
    public static DeviceCapabilityIndex DRIVERVERSION;
    public static DeviceCapabilityIndex TECHNOLOGY;
    public static DeviceCapabilityIndex HORZSIZE;
    public static DeviceCapabilityIndex VERTSIZE;
    public static DeviceCapabilityIndex HORZRES;
    public static DeviceCapabilityIndex VERTRES;
    public static DeviceCapabilityIndex BITSPIXEL;
    public static DeviceCapabilityIndex PLANES;
    public static DeviceCapabilityIndex NUMBRUSHES;
    public static DeviceCapabilityIndex NUMPENS;
    public static DeviceCapabilityIndex NUMMARKERS;
    public static DeviceCapabilityIndex NUMFONTS;
    public static DeviceCapabilityIndex NUMCOLORS;
    public static DeviceCapabilityIndex PDEVICESIZE;
    public static DeviceCapabilityIndex CURVECAPS;
    public static DeviceCapabilityIndex LINECAPS;
    public static DeviceCapabilityIndex POLYGONALCAPS;
    public static DeviceCapabilityIndex TEXTCAPS;
    public static DeviceCapabilityIndex CLIPCAPS;
    public static DeviceCapabilityIndex RASTERCAPS;
    public static DeviceCapabilityIndex ASPECTX;
    public static DeviceCapabilityIndex ASPECTY;
    public static DeviceCapabilityIndex ASPECTXY;
    public static DeviceCapabilityIndex SHADEBLENDCAPS;
    public static DeviceCapabilityIndex LOGPIXELSX;
    public static DeviceCapabilityIndex LOGPIXELSY;
    public static DeviceCapabilityIndex SIZEPALETTE;
    public static DeviceCapabilityIndex NUMRESERVED;
    public static DeviceCapabilityIndex COLORRES;
    public static DeviceCapabilityIndex PHYSICALWIDTH;
    public static DeviceCapabilityIndex PHYSICALHEIGHT;
    public static DeviceCapabilityIndex PHYSICALOFFSETX;
    public static DeviceCapabilityIndex PHYSICALOFFSETY;
    public static DeviceCapabilityIndex SCALINGFACTORX;
    public static DeviceCapabilityIndex SCALINGFACTORY;
    public static DeviceCapabilityIndex VREFRESH;
    public static DeviceCapabilityIndex DESKTOPVERTRES;
    public static DeviceCapabilityIndex DESKTOPHORZRES;
    public static DeviceCapabilityIndex BLTALIGNMENT;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.DibColors : Enum {
    public UInt32 value__;
    public static DibColors DIB_RGB_COLORS;
    public static DibColors DIB_PAL_COLORS;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.DPI_AWARENESS : Enum {
    public int value__;
    public static DPI_AWARENESS DPI_AWARENESS_INVALID;
    public static DPI_AWARENESS DPI_AWARENESS_UNAWARE;
    public static DPI_AWARENESS DPI_AWARENESS_SYSTEM_AWARE;
    public static DPI_AWARENESS DPI_AWARENESS_PER_MONITOR_AWARE;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.DPI_HOSTING_BEHAVIOR : Enum {
    public int value__;
    public static DPI_HOSTING_BEHAVIOR DPI_HOSTING_BEHAVIOR_INVALID;
    public static DPI_HOSTING_BEHAVIOR DPI_HOSTING_BEHAVIOR_DEFAULT;
    public static DPI_HOSTING_BEHAVIOR DPI_HOSTING_BEHAVIOR_MIXED;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.EItsCompact : Enum {
    public int value__;
    public static EItsCompact ITS_COMPACT_DATA;
    public static EItsCompact ITS_COMPACT_DATA_AND_PATH;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.Declarations.Constants.ELEVATION_FLAGS : Enum {
    public UInt32 value__;
    public static ELEVATION_FLAGS ELEVATION_UAC_ENABLED;
    public static ELEVATION_FLAGS ELEVATION_VIRTUALIZATION_ENABLED;
    public static ELEVATION_FLAGS ELEVATION_INSTALLER_DETECTION_ENABLED;
}
public static class JetBrains.Interop.WinApi.Declarations.Constants.FILE_TYPE : object {
    public static UInt32 FILE_TYPE_UNKNOWN;
    public static UInt32 FILE_TYPE_DISK;
    public static UInt32 FILE_TYPE_CHAR;
    public static UInt32 FILE_TYPE_PIPE;
    public static UInt32 FILE_TYPE_REMOTE;
    private static FILE_TYPE();
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.Declarations.Constants.FileAttribute : Enum {
    public UInt32 value__;
    public static FileAttribute FILE_ATTRIBUTE_READONLY;
    public static FileAttribute FILE_ATTRIBUTE_HIDDEN;
    public static FileAttribute FILE_ATTRIBUTE_SYSTEM;
    public static FileAttribute FILE_ATTRIBUTE_DIRECTORY;
    public static FileAttribute FILE_ATTRIBUTE_ARCHIVE;
    public static FileAttribute FILE_ATTRIBUTE_DEVICE;
    public static FileAttribute FILE_ATTRIBUTE_NORMAL;
    public static FileAttribute FILE_ATTRIBUTE_TEMPORARY;
    public static FileAttribute FILE_ATTRIBUTE_SPARSE_FILE;
    public static FileAttribute FILE_ATTRIBUTE_REPARSE_POINT;
    public static FileAttribute FILE_ATTRIBUTE_COMPRESSED;
    public static FileAttribute FILE_ATTRIBUTE_OFFLINE;
    public static FileAttribute FILE_ATTRIBUTE_NOT_CONTENT_INDEXED;
    public static FileAttribute FILE_ATTRIBUTE_ENCRYPTED;
    public static FileAttribute FILE_ATTRIBUTE_VIRTUAL;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.Declarations.Constants.FileFlagsAndAttributes : Enum {
    public UInt32 value__;
    public static FileFlagsAndAttributes Readonly;
    public static FileFlagsAndAttributes Hidden;
    public static FileFlagsAndAttributes System;
    public static FileFlagsAndAttributes Directory;
    public static FileFlagsAndAttributes Archive;
    public static FileFlagsAndAttributes Device;
    public static FileFlagsAndAttributes Normal;
    public static FileFlagsAndAttributes Temporary;
    public static FileFlagsAndAttributes SparseFile;
    public static FileFlagsAndAttributes ReparsePoint;
    public static FileFlagsAndAttributes Compressed;
    public static FileFlagsAndAttributes Offline;
    public static FileFlagsAndAttributes NotContentIndexed;
    public static FileFlagsAndAttributes Encrypted;
    public static FileFlagsAndAttributes WriteThrough;
    public static FileFlagsAndAttributes Overlapped;
    public static FileFlagsAndAttributes NoBuffering;
    public static FileFlagsAndAttributes RandomAccess;
    public static FileFlagsAndAttributes SequentialScan;
    public static FileFlagsAndAttributes DeleteOnClose;
    public static FileFlagsAndAttributes BackupSemantics;
    public static FileFlagsAndAttributes PosixSemantics;
    public static FileFlagsAndAttributes OpenReparsePoint;
    public static FileFlagsAndAttributes OpenNoRecall;
    public static FileFlagsAndAttributes FirstPipeInstance;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.FileMapAccess : Enum {
    public UInt32 value__;
    public static FileMapAccess FILE_MAP_COPY;
    public static FileMapAccess FILE_MAP_WRITE;
    public static FileMapAccess FILE_MAP_READ;
    public static FileMapAccess FILE_MAP_ALL_ACCESS;
    public static FileMapAccess FILE_MAP_EXECUTE;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.FileNotifyAction : Enum {
    public int value__;
    public static FileNotifyAction Added;
    public static FileNotifyAction Removed;
    public static FileNotifyAction Modified;
    public static FileNotifyAction RenamedOldName;
    public static FileNotifyAction RenamedNewName;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.Declarations.Constants.FileShareFlags : Enum {
    public UInt32 value__;
    public static FileShareFlags None;
    public static FileShareFlags Read;
    public static FileShareFlags Write;
    public static FileShareFlags Delete;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.Declarations.Constants.FLASHWINFOFLAGS : Enum {
    public UInt32 value__;
    public static FLASHWINFOFLAGS FLASHW_STOP;
    public static FLASHWINFOFLAGS FLASHW_CAPTION;
    public static FLASHWINFOFLAGS FLASHW_TRAY;
    public static FLASHWINFOFLAGS FLASHW_ALL;
    public static FLASHWINFOFLAGS FLASHW_TIMER;
    public static FLASHWINFOFLAGS FLASHW_TIMERNOFG;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.GET_FILEEX_INFO_LEVELS : Enum {
    public int value__;
    public static GET_FILEEX_INFO_LEVELS GetFileExInfoStandard;
    public static GET_FILEEX_INFO_LEVELS GetFileExMaxInfoLevel;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.HeapFlags : Enum {
    public UInt32 value__;
    public static HeapFlags HEAP_NO_SERIALIZE;
    public static HeapFlags HEAP_GENERATE_EXCEPTIONS;
    public static HeapFlags HEAP_ZERO_MEMORY;
    public static HeapFlags HEAP_REALLOC_IN_PLACE_ONLY;
}
public static class JetBrains.Interop.WinApi.Declarations.Constants.HKEY : object {
    public static Void* HKEY_CLASSES_ROOT;
    public static Void* HKEY_CURRENT_USER;
    public static Void* HKEY_LOCAL_MACHINE;
    public static Void* HKEY_USERS;
    public static Void* HKEY_PERFORMANCE_DATA;
    public static Void* HKEY_CURRENT_CONFIG;
    public static Void* HKEY_PERFORMANCE_TEXT;
    public static Void* HKEY_PERFORMANCE_NLSTEXT;
    public static Void* HKEY_DYN_DATA;
    public static Void* HKEY_CURRENT_USER_LOCAL_SETTINGS;
    private static HKEY();
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.HookCode : Enum {
    public int value__;
    public static HookCode HC_ACTION;
    public static HookCode HC_NOREMOVE;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.HTTP_INITIALIZE_Flags : Enum {
    public int value__;
    public static HTTP_INITIALIZE_Flags HTTP_INITIALIZE_CONFIG;
    public static HTTP_INITIALIZE_Flags HTTP_INITIALIZE_SERVER;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.HTTP_SERVICE_CONFIG_ID : Enum {
    public int value__;
    public static HTTP_SERVICE_CONFIG_ID HttpServiceConfigIPListenList;
    public static HTTP_SERVICE_CONFIG_ID HttpServiceConfigSSLCertInfo;
    public static HTTP_SERVICE_CONFIG_ID HttpServiceConfigUrlAclInfo;
    public static HTTP_SERVICE_CONFIG_ID HttpServiceConfigTimeout;
    public static HTTP_SERVICE_CONFIG_ID HttpServiceConfigCache;
    public static HTTP_SERVICE_CONFIG_ID HttpServiceConfigSslSniCertInfo;
    public static HTTP_SERVICE_CONFIG_ID HttpServiceConfigSslCcsCertInfo;
    public static HTTP_SERVICE_CONFIG_ID HttpServiceConfigSetting;
    public static HTTP_SERVICE_CONFIG_ID HttpServiceConfigMax;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.HTTP_SERVICE_CONFIG_QUERY_TYPE : Enum {
    public int value__;
    public static HTTP_SERVICE_CONFIG_QUERY_TYPE HttpServiceConfigQueryExact;
    public static HTTP_SERVICE_CONFIG_QUERY_TYPE HttpServiceConfigQueryNext;
    public static HTTP_SERVICE_CONFIG_QUERY_TYPE HttpServiceConfigQueryMax;
}
public class JetBrains.Interop.WinApi.Declarations.Constants.HTTPAPI_VERSION : ValueType {
    public static HTTPAPI_VERSION HTTPAPI_VERSION_1;
    public ushort HttpApiMajorVersion;
    public ushort HttpApiMinorVersion;
    private static HTTPAPI_VERSION();
}
public static class JetBrains.Interop.WinApi.Declarations.Constants.KEYEVENTF : object {
    public static UInt32 KEYEVENTF_EXTENDEDKEY;
    public static UInt32 KEYEVENTF_KEYUP;
    private static KEYEVENTF();
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.Declarations.Constants.MemoryAllocationTypes : Enum {
    public UInt32 value__;
    public static MemoryAllocationTypes MEM_COMMIT;
    public static MemoryAllocationTypes MEM_RESERVE;
    public static MemoryAllocationTypes MEM_RESET;
    public static MemoryAllocationTypes MEM_FREE;
    public static MemoryAllocationTypes MEM_LARGE_PAGES;
    public static MemoryAllocationTypes MEM_PHYSICAL;
    public static MemoryAllocationTypes MEM_TOP_DOWN;
    public static MemoryAllocationTypes MEM_WRITE_WATCH;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.Declarations.Constants.MemoryPageTypes : Enum {
    public UInt32 value__;
    public static MemoryPageTypes MEM_IMAGE;
    public static MemoryPageTypes MEM_MAPPED;
    public static MemoryPageTypes MEM_PRIVATE;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.Declarations.Constants.MemoryProtectionConstants : Enum {
    public UInt32 value__;
    public static MemoryProtectionConstants PAGE_EXECUTE;
    public static MemoryProtectionConstants PAGE_EXECUTE_READ;
    public static MemoryProtectionConstants PAGE_EXECUTE_READWRITE;
    public static MemoryProtectionConstants PAGE_EXECUTE_WRITECOPY;
    public static MemoryProtectionConstants PAGE_NOACCESS;
    public static MemoryProtectionConstants PAGE_READONLY;
    public static MemoryProtectionConstants PAGE_READWRITE;
    public static MemoryProtectionConstants PAGE_WRITECOPY;
    public static MemoryProtectionConstants PAGE_GUARD;
    public static MemoryProtectionConstants PAGE_NOCACHE;
    public static MemoryProtectionConstants PAGE_WRITECOMBINE;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.MF : Enum {
    public UInt32 value__;
    public static MF MF_INSERT;
    public static MF MF_CHANGE;
    public static MF MF_APPEND;
    public static MF MF_DELETE;
    public static MF MF_REMOVE;
    public static MF MF_BYCOMMAND;
    public static MF MF_BYPOSITION;
    public static MF MF_SEPARATOR;
    public static MF MF_ENABLED;
    public static MF MF_GRAYED;
    public static MF MF_DISABLED;
    public static MF MF_UNCHECKED;
    public static MF MF_CHECKED;
    public static MF MF_USECHECKBITMAPS;
    public static MF MF_STRING;
    public static MF MF_BITMAP;
    public static MF MF_OWNERDRAW;
    public static MF MF_POPUP;
    public static MF MF_MENUBARBREAK;
    public static MF MF_MENUBREAK;
    public static MF MF_UNHILITE;
    public static MF MF_HILITE;
    public static MF MF_DEFAULT;
    public static MF MF_SYSMENU;
    public static MF MF_HELP;
    public static MF MF_RIGHTJUSTIFY;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.MIB_TCP_STATE : Enum {
    public UInt32 value__;
    public static MIB_TCP_STATE MIB_TCP_STATE_CLOSED;
    public static MIB_TCP_STATE MIB_TCP_STATE_LISTEN;
    public static MIB_TCP_STATE MIB_TCP_STATE_SYN_SENT;
    public static MIB_TCP_STATE MIB_TCP_STATE_SYN_RCVD;
    public static MIB_TCP_STATE MIB_TCP_STATE_ESTAB;
    public static MIB_TCP_STATE MIB_TCP_STATE_FIN_WAIT1;
    public static MIB_TCP_STATE MIB_TCP_STATE_FIN_WAIT2;
    public static MIB_TCP_STATE MIB_TCP_STATE_CLOSE_WAIT;
    public static MIB_TCP_STATE MIB_TCP_STATE_CLOSING;
    public static MIB_TCP_STATE MIB_TCP_STATE_LAST_ACK;
    public static MIB_TCP_STATE MIB_TCP_STATE_TIME_WAIT;
    public static MIB_TCP_STATE MIB_TCP_STATE_DELETE_TCB;
}
public static class JetBrains.Interop.WinApi.Declarations.Constants.MOUSEEVENTF : object {
    public static UInt32 MOUSEEVENTF_ABSOLUTE;
    public static UInt32 MOUSEEVENTF_HWHEEL;
    public static UInt32 MOUSEEVENTF_LEFTDOWN;
    public static UInt32 MOUSEEVENTF_LEFTUP;
    public static UInt32 MOUSEEVENTF_MIDDLEDOWN;
    public static UInt32 MOUSEEVENTF_MIDDLEUP;
    public static UInt32 MOUSEEVENTF_MOVE;
    public static UInt32 MOUSEEVENTF_MOVE_NOCOALESCE;
    public static UInt32 MOUSEEVENTF_RIGHTDOWN;
    public static UInt32 MOUSEEVENTF_RIGHTUP;
    public static UInt32 MOUSEEVENTF_VIRTUALDESK;
    public static UInt32 MOUSEEVENTF_WHEEL;
    public static UInt32 MOUSEEVENTF_XDOWN;
    public static UInt32 MOUSEEVENTF_XUP;
    private static MOUSEEVENTF();
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.MoveFileAttributes : Enum {
    public UInt32 value__;
    public static MoveFileAttributes MOVEFILE_REPLACE_EXISTING;
    public static MoveFileAttributes MOVEFILE_COPY_ALLOWED;
    public static MoveFileAttributes MOVEFILE_DELAY_UNTIL_REBOOT;
    public static MoveFileAttributes MOVEFILE_WRITE_THROUGH;
    public static MoveFileAttributes MOVEFILE_CREATE_HARDLINK;
    public static MoveFileAttributes MOVEFILE_FAIL_IF_NOT_TRACKABLE;
}
public static class JetBrains.Interop.WinApi.Declarations.Constants.MsoConstants : object {
    public static int msocrfNeedIdleTime;
    public static int msocrfNeedPeriodicIdleTime;
    public static int msocrfPreTranslateKeys;
    public static int msocrfPreTranslateAll;
    public static int msocrfNeedSpecActiveNotifs;
    public static int msocrfNeedAllActiveNotifs;
    public static int msocrfExclusiveBorderSpace;
    public static int msocrfExclusiveActivation;
    public static int msocrfNeedAllMacEvents;
    public static int msocrfMaster;
    public static int msocadvfModal;
    public static int msocadvfRedrawOff;
    public static int msocadvfWarningsOff;
    public static int msocadvfRecording;
    public static int msochostfExclusiveBorderSpace;
    public static int msoidlefPeriodic;
    public static int msoidlefNonPeriodic;
    public static int msoidlefPriority;
    public static int msoidlefAll;
    public static int msoloopDoEventsModal;
    public static int msoloopMain;
    public static int msoloopFocusWait;
    public static int msoloopDoEvents;
    public static int msoloopDebug;
    public static int msoloopModalForm;
    public static int msoloopModalAlert;
    public static int msocstateModal;
    public static int msocstateRedrawOff;
    public static int msocstateWarningsOff;
    public static int msocstateRecording;
    public static int msoccontextAll;
    public static int msoccontextMine;
    public static int msoccontextOthers;
    public static int msogacActive;
    public static int msogacTracking;
    public static int msogacTrackingOrActive;
    public static int msocWindowFrameToplevel;
    public static int msocWindowFrameOwner;
    public static int msocWindowComponent;
    public static int msocWindowDlgOwner;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.Declarations.Constants.MSOCRF : Enum {
    public UInt32 value__;
    public static MSOCRF msocrfNeedIdleTime;
    public static MSOCRF msocrfNeedPeriodicIdleTime;
    public static MSOCRF msocrfPreTranslateKeys;
    public static MSOCRF msocrfPreTranslateAll;
    public static MSOCRF msocrfNeedSpecActiveNotifs;
    public static MSOCRF msocrfNeedAllActiveNotifs;
    public static MSOCRF msocrfExclusiveBorderSpace;
    public static MSOCRF msocrfExclusiveActivation;
    public static MSOCRF msocrfNeedAllMacEvents;
    public static MSOCRF msocrfMaster;
}
public static class JetBrains.Interop.WinApi.Declarations.Constants.NTSTATUS : object {
    private static int STATUS_SEVERITY_SUCCESS;
    private static int STATUS_SEVERITY_INFORMATIONAL;
    private static int STATUS_SEVERITY_WARNING;
    private static int STATUS_SEVERITY_ERROR;
    public static int STATUS_SUCCESS;
    public static int STATUS_BUFFER_OVERFLOW;
    public static int STATUS_INFO_LENGTH_MISMATCH;
    public static int STATUS_BUFFER_TOO_SMALL;
    private static NTSTATUS();
    public static bool IsSeveritySuccess(int status);
    public static bool IsSeverityInformation(int status);
    public static bool IsSeverityWarning(int status);
    public static bool IsSeverityError(int status);
    public static bool Succeed(int status);
    public static bool Failed(int status);
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.OBJID : Enum {
    public int value__;
    public static OBJID OBJID_WINDOW;
    public static OBJID OBJID_SYSMENU;
    public static OBJID OBJID_TITLEBAR;
    public static OBJID OBJID_MENU;
    public static OBJID OBJID_CLIENT;
    public static OBJID OBJID_VSCROLL;
    public static OBJID OBJID_HSCROLL;
    public static OBJID OBJID_SIZEGRIP;
    public static OBJID OBJID_CARET;
    public static OBJID OBJID_CURSOR;
    public static OBJID OBJID_ALERT;
    public static OBJID OBJID_SOUND;
    public static OBJID OBJID_QUERYCLASSNAMEIDX;
    public static OBJID OBJID_NATIVEOM;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.Declarations.Constants.OLECADVF : Enum {
    public UInt32 value__;
    public static OLECADVF olecadvfModal;
    public static OLECADVF olecadvfRedrawOff;
    public static OLECADVF olecadvfWarningsOff;
    public static OLECADVF olecadvfRecording;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.Declarations.Constants.OLECMDF : Enum {
    public UInt32 value__;
    public static OLECMDF OLECMDF_SUPPORTED;
    public static OLECMDF OLECMDF_ENABLED;
    public static OLECMDF OLECMDF_LATCHED;
    public static OLECMDF OLECMDF_NINCHED;
    public static OLECMDF OLECMDF_INVISIBLE;
    public static OLECMDF OLECMDF_DEFHIDEONCTXTMENU;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.Declarations.Constants.OLECRF : Enum {
    public UInt32 value__;
    public static OLECRF olecrfNeedIdleTime;
    public static OLECRF olecrfNeedPeriodicIdleTime;
    public static OLECRF olecrfPreTranslateKeys;
    public static OLECRF olecrfPreTranslateAll;
    public static OLECRF olecrfNeedSpecActiveNotifs;
    public static OLECRF olecrfNeedAllActiveNotifs;
    public static OLECRF olecrfExclusiveBorderSpace;
    public static OLECRF olecrfExclusiveActivation;
    public static OLECRF msocrfNeedAllMacEvents;
    public static OLECRF msocrfMaster;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.PENDINGMSG : Enum {
    public UInt32 value__;
    public static PENDINGMSG PENDINGMSG_CANCELCALL;
    public static PENDINGMSG PENDINGMSG_WAITNOPROCESS;
    public static PENDINGMSG PENDINGMSG_WAITDEFPROCESS;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.PropSheetPageProcMsg : Enum {
    public UInt32 value__;
    public static PropSheetPageProcMsg PSPCB_ADDREF;
    public static PropSheetPageProcMsg PSPCB_CREATE;
    public static PropSheetPageProcMsg PSPCB_RELEASE;
}
public static class JetBrains.Interop.WinApi.Declarations.Constants.PRSPEC : object {
    public static UInt32 PRSPEC_LPWSTR;
    public static UInt32 PRSPEC_PROPID;
    private static PRSPEC();
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.Declarations.Constants.RasterOperations : Enum {
    public UInt32 value__;
    public static RasterOperations SRCCOPY;
    public static RasterOperations SRCPAINT;
    public static RasterOperations SRCAND;
    public static RasterOperations SRCINVERT;
    public static RasterOperations SRCERASE;
    public static RasterOperations NOTSRCCOPY;
    public static RasterOperations NOTSRCERASE;
    public static RasterOperations MERGECOPY;
    public static RasterOperations MERGEPAINT;
    public static RasterOperations PATCOPY;
    public static RasterOperations PATPAINT;
    public static RasterOperations PATINVERT;
    public static RasterOperations DSTINVERT;
    public static RasterOperations BLACKNESS;
    public static RasterOperations WHITENESS;
    public static RasterOperations NOMIRRORBITMAP;
    public static RasterOperations CAPTUREBLT;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.ResourceTypes : Enum {
    public UInt32 value__;
    public static ResourceTypes RT_ACCELERATOR;
    public static ResourceTypes RT_ANICURSOR;
    public static ResourceTypes RT_ANIICON;
    public static ResourceTypes RT_BITMAP;
    public static ResourceTypes RT_CURSOR;
    public static ResourceTypes RT_DIALOG;
    public static ResourceTypes RT_DLGINCLUDE;
    public static ResourceTypes RT_FONT;
    public static ResourceTypes RT_FONTDIR;
    public static ResourceTypes RT_GROUP_CURSOR;
    public static ResourceTypes RT_GROUP_ICON;
    public static ResourceTypes RT_HTML;
    public static ResourceTypes RT_ICON;
    public static ResourceTypes RT_MANIFEST;
    public static ResourceTypes RT_MENU;
    public static ResourceTypes RT_MESSAGETABLE;
    public static ResourceTypes RT_PLUGPLAY;
    public static ResourceTypes RT_RCDATA;
    public static ResourceTypes RT_STRING;
    public static ResourceTypes RT_VERSION;
    public static ResourceTypes RT_VXD;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.ROTFLAGS : Enum {
    public UInt32 value__;
    public static ROTFLAGS ROTFLAGS_REGISTRATIONKEEPSALIVE_Stub;
    public static ROTFLAGS ROTFLAGS_ALLOWANYCLIENT_Stub;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.SectionFlags : Enum {
    public UInt32 value__;
    public static SectionFlags SECTION_QUERY;
    public static SectionFlags SECTION_MAP_WRITE;
    public static SectionFlags SECTION_MAP_READ;
    public static SectionFlags SECTION_MAP_EXECUTE;
    public static SectionFlags SECTION_EXTEND_SIZE;
    public static SectionFlags SECTION_MAP_EXECUTE_EXPLICIT;
    public static SectionFlags SECTION_ALL_ACCESS;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.SECURITY_IMPERSONATION_LEVEL : Enum {
    public int value__;
    public static SECURITY_IMPERSONATION_LEVEL SecurityAnonymous;
    public static SECURITY_IMPERSONATION_LEVEL SecurityIdentification;
    public static SECURITY_IMPERSONATION_LEVEL SecurityImpersonation;
    public static SECURITY_IMPERSONATION_LEVEL SecurityDelegation;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.SERVERCALL : Enum {
    public UInt32 value__;
    public static SERVERCALL SERVERCALL_ISHANDLED;
    public static SERVERCALL SERVERCALL_REJECTED;
    public static SERVERCALL SERVERCALL_RETRYLATER;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.Declarations.Constants.SHGetFileInfoFlags : Enum {
    public UInt32 value__;
    public static SHGetFileInfoFlags SHGFI_ADDOVERLAYS;
    public static SHGetFileInfoFlags SHGFI_ATTR_SPECIFIED;
    public static SHGetFileInfoFlags SHGFI_ATTRIBUTES;
    public static SHGetFileInfoFlags SHGFI_DISPLAYNAME;
    public static SHGetFileInfoFlags SHGFI_EXETYPE;
    public static SHGetFileInfoFlags SHGFI_ICON;
    public static SHGetFileInfoFlags SHGFI_ICONLOCATION;
    public static SHGetFileInfoFlags SHGFI_LARGEICON;
    public static SHGetFileInfoFlags SHGFI_LINKOVERLAY;
    public static SHGetFileInfoFlags SHGFI_OPENICON;
    public static SHGetFileInfoFlags SHGFI_OVERLAYINDEX;
    public static SHGetFileInfoFlags SHGFI_PIDL;
    public static SHGetFileInfoFlags SHGFI_SELECTED;
    public static SHGetFileInfoFlags SHGFI_SHELLICONSIZE;
    public static SHGetFileInfoFlags SHGFI_SMALLICON;
    public static SHGetFileInfoFlags SHGFI_SYSICONINDEX;
    public static SHGetFileInfoFlags SHGFI_TYPENAME;
    public static SHGetFileInfoFlags SHGFI_USEFILEATTRIBUTES;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.Declarations.Constants.SMTO : Enum {
    public UInt32 value__;
    public static SMTO SMTO_NORMAL;
    public static SMTO SMTO_BLOCK;
    public static SMTO SMTO_ABORTIFHUNG;
    public static SMTO SMTO_NOTIMEOUTIFNOTHUNG;
    public static SMTO SMTO_ERRORONEXIT;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.STATFLAG : Enum {
    public UInt32 value__;
    public static STATFLAG STATFLAG_DEFAULT;
    public static STATFLAG STATFLAG_NONAME;
    [ObsoleteAttribute("Not implemented.")]
public static STATFLAG STATFLAG_NOOPEN;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.Declarations.Constants.STGC : Enum {
    public UInt32 value__;
    public static STGC STGC_DEFAULT;
    public static STGC STGC_OVERWRITE;
    public static STGC STGC_ONLYIFCURRENT;
    public static STGC STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE;
    public static STGC STGC_CONSOLIDATE;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.STGFMT : Enum {
    public UInt32 value__;
    public static STGFMT STGFMT_STORAGE;
    public static STGFMT STGFMT_NATIVE;
    public static STGFMT STGFMT_FILE;
    public static STGFMT STGFMT_ANY;
    public static STGFMT STGFMT_DOCFILE;
    public static STGFMT STGFMT_DOCUMENT;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.Declarations.Constants.STGM : Enum {
    public UInt32 value__;
    public static STGM STGM_DIRECT;
    public static STGM STGM_TRANSACTED;
    public static STGM STGM_SIMPLE;
    public static STGM STGM_READ;
    public static STGM STGM_WRITE;
    public static STGM STGM_READWRITE;
    public static STGM STGM_SHARE_DENY_NONE;
    public static STGM STGM_SHARE_DENY_READ;
    public static STGM STGM_SHARE_DENY_WRITE;
    public static STGM STGM_SHARE_EXCLUSIVE;
    public static STGM STGM_PRIORITY;
    public static STGM STGM_DELETEONRELEASE;
    public static STGM STGM_NOSCRATCH;
    public static STGM STGM_CREATE;
    public static STGM STGM_CONVERT;
    public static STGM STGM_FAILIFTHERE;
    public static STGM STGM_NOSNAPSHOT;
    public static STGM STGM_DIRECT_SWMR;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.STGTY : Enum {
    public UInt32 value__;
    public static STGTY STGTY_STORAGE;
    public static STGTY STGTY_STREAM;
    public static STGTY STGTY_LOCKBYTES;
    public static STGTY STGTY_PROPERTY;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.STREAM_SEEK : Enum {
    public UInt32 value__;
    public static STREAM_SEEK STREAM_SEEK_SET;
    public static STREAM_SEEK STREAM_SEEK_CUR;
    public static STREAM_SEEK STREAM_SEEK_END;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.SystemCommand : Enum {
    public ushort value__;
    public static SystemCommand SC_SIZE;
    public static SystemCommand SC_MOVE;
    public static SystemCommand SC_MINIMIZE;
    public static SystemCommand SC_MAXIMIZE;
    public static SystemCommand SC_NEXTWINDOW;
    public static SystemCommand SC_PREVWINDOW;
    public static SystemCommand SC_CLOSE;
    public static SystemCommand SC_VSCROLL;
    public static SystemCommand SC_HSCROLL;
    public static SystemCommand SC_MOUSEMENU;
    public static SystemCommand SC_KEYMENU;
    public static SystemCommand SC_ARRANGE;
    public static SystemCommand SC_RESTORE;
    public static SystemCommand SC_TASKLIST;
    public static SystemCommand SC_SCREENSAVE;
    public static SystemCommand SC_HOTKEY;
    public static SystemCommand SC_DEFAULT;
    public static SystemCommand SC_MONITORPOWER;
    public static SystemCommand SC_CONTEXTHELP;
    public static SystemCommand SC_SEPARATOR;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.TCP_TABLE_CLASS : Enum {
    public int value__;
    public static TCP_TABLE_CLASS TCP_TABLE_BASIC_LISTENER;
    public static TCP_TABLE_CLASS TCP_TABLE_BASIC_CONNECTIONS;
    public static TCP_TABLE_CLASS TCP_TABLE_BASIC_ALL;
    public static TCP_TABLE_CLASS TCP_TABLE_OWNER_PID_LISTENER;
    public static TCP_TABLE_CLASS TCP_TABLE_OWNER_PID_CONNECTIONS;
    public static TCP_TABLE_CLASS TCP_TABLE_OWNER_PID_ALL;
    public static TCP_TABLE_CLASS TCP_TABLE_OWNER_MODULE_LISTENER;
    public static TCP_TABLE_CLASS TCP_TABLE_OWNER_MODULE_CONNECTIONS;
    public static TCP_TABLE_CLASS TCP_TABLE_OWNER_MODULE_ALL;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.TOKEN_ELEVATION_TYPE : Enum {
    public int value__;
    public static TOKEN_ELEVATION_TYPE TokenElevationTypeDefault;
    public static TOKEN_ELEVATION_TYPE TokenElevationTypeFull;
    public static TOKEN_ELEVATION_TYPE TokenElevationTypeLimited;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.TOKEN_INFORMATION_CLASS : Enum {
    public int value__;
    public static TOKEN_INFORMATION_CLASS TokenUser;
    public static TOKEN_INFORMATION_CLASS TokenGroups;
    public static TOKEN_INFORMATION_CLASS TokenPrivileges;
    public static TOKEN_INFORMATION_CLASS TokenOwner;
    public static TOKEN_INFORMATION_CLASS TokenPrimaryGroup;
    public static TOKEN_INFORMATION_CLASS TokenDefaultDacl;
    public static TOKEN_INFORMATION_CLASS TokenSource;
    public static TOKEN_INFORMATION_CLASS TokenType;
    public static TOKEN_INFORMATION_CLASS TokenImpersonationLevel;
    public static TOKEN_INFORMATION_CLASS TokenStatistics;
    public static TOKEN_INFORMATION_CLASS TokenRestrictedSids;
    public static TOKEN_INFORMATION_CLASS TokenSessionId;
    public static TOKEN_INFORMATION_CLASS TokenGroupsAndPrivileges;
    public static TOKEN_INFORMATION_CLASS TokenSessionReference;
    public static TOKEN_INFORMATION_CLASS TokenSandBoxInert;
    public static TOKEN_INFORMATION_CLASS TokenAuditPolicy;
    public static TOKEN_INFORMATION_CLASS TokenOrigin;
    public static TOKEN_INFORMATION_CLASS TokenElevationType;
    public static TOKEN_INFORMATION_CLASS TokenLinkedToken;
    public static TOKEN_INFORMATION_CLASS TokenElevation;
    public static TOKEN_INFORMATION_CLASS TokenHasRestrictions;
    public static TOKEN_INFORMATION_CLASS TokenAccessInformation;
    public static TOKEN_INFORMATION_CLASS TokenVirtualizationAllowed;
    public static TOKEN_INFORMATION_CLASS TokenVirtualizationEnabled;
    public static TOKEN_INFORMATION_CLASS TokenIntegrityLevel;
    public static TOKEN_INFORMATION_CLASS TokenUIAccess;
    public static TOKEN_INFORMATION_CLASS TokenMandatoryPolicy;
    public static TOKEN_INFORMATION_CLASS TokenLogonSid;
    public static TOKEN_INFORMATION_CLASS TokenIsAppContainer;
    public static TOKEN_INFORMATION_CLASS TokenCapabilities;
    public static TOKEN_INFORMATION_CLASS TokenAppContainerSid;
    public static TOKEN_INFORMATION_CLASS TokenAppContainerNumber;
    public static TOKEN_INFORMATION_CLASS TokenUserClaimAttributes;
    public static TOKEN_INFORMATION_CLASS TokenDeviceClaimAttributes;
    public static TOKEN_INFORMATION_CLASS TokenRestrictedUserClaimAttributes;
    public static TOKEN_INFORMATION_CLASS TokenRestrictedDeviceClaimAttributes;
    public static TOKEN_INFORMATION_CLASS TokenDeviceGroups;
    public static TOKEN_INFORMATION_CLASS TokenRestrictedDeviceGroups;
    public static TOKEN_INFORMATION_CLASS TokenSecurityAttributes;
    public static TOKEN_INFORMATION_CLASS TokenIsRestricted;
    public static TOKEN_INFORMATION_CLASS MaxTokenInfoClass;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.TOKEN_TYPE : Enum {
    public int value__;
    public static TOKEN_TYPE TokenPrimary;
    public static TOKEN_TYPE TokenImpersonation;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.UpdateLayeredWindowFlags : Enum {
    public UInt32 value__;
    public static UpdateLayeredWindowFlags ULW_COLORKEY;
    public static UpdateLayeredWindowFlags ULW_ALPHA;
    public static UpdateLayeredWindowFlags ULW_OPAQUE;
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.UxThemeClasses : Enum {
    public int value__;
    public static UxThemeClasses AEROWIZARDSTYLE;
    public static UxThemeClasses AEROWIZARD;
    public static UxThemeClasses BUTTON;
    public static UxThemeClasses BUTTONSTYLE;
    public static UxThemeClasses CLOCK;
    public static UxThemeClasses COMBOBOX;
    public static UxThemeClasses COMMUNICATIONS;
    public static UxThemeClasses CONTROLPANEL;
    public static UxThemeClasses DATEPICKER;
    public static UxThemeClasses DRAGDROP;
    public static UxThemeClasses EDIT;
    public static UxThemeClasses EXPLORERBAR;
    public static UxThemeClasses FLYOUT;
    public static UxThemeClasses GLOBALS;
    public static UxThemeClasses HEADER;
    public static UxThemeClasses LISTBOX;
    public static UxThemeClasses LISTVIEW;
    public static UxThemeClasses MENU;
    public static UxThemeClasses MENUBAND;
    public static UxThemeClasses NAVIGATION;
    public static UxThemeClasses PAGE;
    public static UxThemeClasses PROGRESS;
    public static UxThemeClasses REBAR;
    public static UxThemeClasses SCROLLBAR;
    public static UxThemeClasses SPIN;
    public static UxThemeClasses STARTPANEL;
    public static UxThemeClasses STATUS;
    public static UxThemeClasses TAB;
    public static UxThemeClasses TASKBAND;
    public static UxThemeClasses TASKBAR;
    public static UxThemeClasses TASKDIALOG;
    public static UxThemeClasses TEXTSTYLE;
    public static UxThemeClasses TOOLBAR;
    public static UxThemeClasses TOOLTIP;
    public static UxThemeClasses TRACKBAR;
    public static UxThemeClasses TRAYNOTIFY;
    public static UxThemeClasses TREEVIEW;
    public static UxThemeClasses WINDOW;
}
public class JetBrains.Interop.WinApi.Declarations.Constants.UxThemeParts : object {
}
public enum JetBrains.Interop.WinApi.Declarations.Constants.WaitResult : Enum {
    public UInt32 value__;
    public static WaitResult WAIT_ABANDONED;
    public static WaitResult WAIT_OBJECT_0;
    public static WaitResult WAIT_TIMEOUT;
    public static WaitResult WAIT_FAILED;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.Declarations.Constants.Win32ErrorMode : Enum {
    public UInt32 value__;
    public static Win32ErrorMode SEM_FAILCRITICALERRORS;
    public static Win32ErrorMode SEM_NOGPFAULTERRORBOX;
    public static Win32ErrorMode SEM_NOALIGNMENTFAULTEXCEPT;
    public static Win32ErrorMode SEM_NOOPENFILEERRORBOX;
}
[GuidAttribute("00021401-0000-0000-C000-000000000046")]
public class JetBrains.Interop.WinApi.Declarations.Interfaces.CLSID_ShellLink : object {
}
[GuidAttribute("CB2F6722-AB3A-11d2-9C40-00C04FA30A3E")]
[InterfaceTypeAttribute("1")]
[NoReorderAttribute]
public interface JetBrains.Interop.WinApi.Declarations.Interfaces.ICorRuntimeHost {
    public abstract virtual int CreateLogicalThreadState();
    public abstract virtual int DeleteLogicalThreadState();
    public abstract virtual int SwitchInLogicalThreadState(UInt32& pFiberCookie);
    public abstract virtual int SwitchOutLogicalThreadState(UInt32& FiberCookie);
    public abstract virtual int LocksHeldByLogicalThread(UInt32& pCount);
    public abstract virtual int MapFile(IntPtr hFile, IntPtr& hMapAddress);
    public abstract virtual int GetConfiguration(Object& pConfiguration);
    public abstract virtual int Start();
    public abstract virtual int Stop();
    public abstract virtual int CreateDomain(string pwzFriendlyName, object pIdentityArray, Object& pAppDomain);
    public abstract virtual int GetDefaultDomain(Object& pAppDomain);
    public abstract virtual int EnumDomains(IntPtr& hEnum);
    public abstract virtual int NextDomain(IntPtr hEnum, Object& pAppDomain);
    public abstract virtual int CloseEnum(IntPtr hEnum);
    public abstract virtual int CreateDomainEx(string pwzFriendlyName, object pSetup, object pEvidence, Object& pAppDomain);
    public abstract virtual int CreateDomainSetup(Object& pAppDomainSetup);
    public abstract virtual int CreateEvidence(Object& pEvidence);
    public abstract virtual int UnloadDomain(object pAppDomain);
    public abstract virtual int CurrentDomain(Object& pAppDomain);
}
[GuidAttribute("0000013B-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
[NoReorderAttribute]
public interface JetBrains.Interop.WinApi.Declarations.Interfaces.IEnumSTATPROPSETSTG {
    public abstract virtual int Next(UInt32 celt, STATPROPSETSTG* rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IEnumSTATPROPSETSTG& ppEnum);
}
[GuidAttribute("00000139-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
[NoReorderAttribute]
public interface JetBrains.Interop.WinApi.Declarations.Interfaces.IEnumSTATPROPSTG {
    public abstract virtual int Next(UInt32 celt, STATPROPSTG* rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IEnumSTATPROPSTG& ppEnum);
}
[GuidAttribute("0000000D-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface JetBrains.Interop.WinApi.Declarations.Interfaces.IEnumSTATSTG {
    public abstract virtual int Next(UInt32 celt, STATSTG* rgelt, UInt32& pceltFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual void Clone(IEnumSTATSTG& ppEnum);
}
[GuidAttribute("88CC31DE-27AB-11D0-9DF9-00A0C922E6EC")]
[InterfaceTypeAttribute("1")]
[CoClassAttribute("JetBrains.Interop.WinApi.Declarations.Interfaces.ITStorageClass")]
public interface JetBrains.Interop.WinApi.Declarations.Interfaces.IITStorage {
    public abstract virtual int StgCreateDocfile(string name, UInt32 grfMode, UInt32 reserved, IStorage& storage);
    public abstract virtual int StgCreateDocfileOnILockBytes(ILockBytes plkbyt, UInt32 grfMode, UInt32 reserved, IStorage& storage);
    public abstract virtual int StgIsStorageFile(string name);
    public abstract virtual int StgIsStorageILockBytes(ILockBytes plkbyt);
    public abstract virtual int StgOpenStorage(string name, IStorage pstgPriority, UInt32 grfMode, Void* snbExclude, UInt32 reserved, IStorage& storage);
    public abstract virtual int StgOpenStorageOnILockBytes(ILockBytes plkbyt, IStorage pStgPriority, UInt32 grfMode, Void* snbExclude, UInt32 reserved, IStorage& storage);
    public abstract virtual int StgSetTimes(string lpszName, FILETIME* cTime, FILETIME* aTime, FILETIME* mTime);
    public abstract virtual int SetControlData(CItsControlData* controlData);
    public abstract virtual int DefaultControlData(CItsControlData** controlData);
    public abstract virtual int Compact(string name, EItsCompact compact);
}
[GuidAttribute("0000000A-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
[NoReorderAttribute]
public interface JetBrains.Interop.WinApi.Declarations.Interfaces.ILockBytes {
    public abstract virtual int ReadAt(ulong ulOffset, Void* pv, UInt32 cb, UInt32* pcbRead);
    public abstract virtual int WriteAt(ulong ulOffset, Void* pv, UInt32 cb, UInt32* pcbWritten);
    public abstract virtual int Flush();
    public abstract virtual int SetSize(ulong cb);
    public abstract virtual int LockRegion(ulong libOffset, ulong cb, UInt32 dwLockType);
    public abstract virtual int UnlockRegion(ulong libOffset, ulong cb, UInt32 dwLockType);
    public abstract virtual int Stat(STATSTG* pstatstg, UInt32 grfStatFlag);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0000013A-0000-0000-C000-000000000046")]
[NoReorderAttribute]
public interface JetBrains.Interop.WinApi.Declarations.Interfaces.IPropertySetStorage {
    public abstract virtual int Create(Guid* rfmtid, Guid* pclsid, UInt32 grfFlags, UInt32 grfMode, IPropertyStorage& ppprstg);
    public abstract virtual int Open(Guid* rfmtid, UInt32 grfMode, IPropertyStorage& ppprstg);
    public abstract virtual int Delete(Guid* rfmtid);
    public abstract virtual int Enum(IEnumSTATPROPSETSTG& ppenum);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000138-0000-0000-C000-000000000046")]
[NoReorderAttribute]
public interface JetBrains.Interop.WinApi.Declarations.Interfaces.IPropertyStorage {
    public abstract virtual int ReadMultiple(UInt32 cpspec, PROPSPEC* rgpspec, PROPVARIANT* rgpropvar);
    public abstract virtual int WriteMultiple(UInt32 cpspec, PROPSPEC* rgpspec, PROPVARIANT* rgpropvar, PROPID propidNameFirst);
    public abstract virtual int DeleteMultiple(UInt32 cpspec, PROPSPEC* rgpspec);
    public abstract virtual int ReadPropertyNames(UInt32 cpropid, PROPID[] rgpropid, String[] rglpwstrName);
    public abstract virtual int WritePropertyNames(UInt32 cpropid, PROPID[] rgpropid, String[] rglpwstrName);
    public abstract virtual int DeletePropertyNames(UInt32 cpropid, PROPID[] rgpropid);
    public abstract virtual int Commit(UInt32 grfCommitFlags);
    public abstract virtual int Revert();
    public abstract virtual int Enum(IEnumSTATPROPSTG& ppEnum);
    public abstract virtual int SetTimes(FILETIME* pctime, FILETIME* patime, FILETIME* pmtime);
    public abstract virtual int SetClass(Guid* clsid);
    public abstract virtual int Stat(STATPROPSETSTG* pstatpsstg);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6D5140C1-7436-11CE-8034-00AA006009FA")]
public interface JetBrains.Interop.WinApi.Declarations.Interfaces.IServiceProvider {
    public abstract virtual object QueryService(Guid* guidService, Guid* riid);
}
[NoReorderAttribute]
[InterfaceTypeAttribute("1")]
[GuidAttribute("000214F9-0000-0000-C000-000000000046")]
public interface JetBrains.Interop.WinApi.Declarations.Interfaces.IShellLinkW {
    public abstract virtual HResults GetPath(Char* pszFile, int cch, Void* pfd, UInt32 fFlags);
    public abstract virtual HResults GetIDList(Void** ppidl);
    public abstract virtual HResults SetIDList(Void* pidl);
    public abstract virtual HResults GetDescription(Char* pszName, int cch);
    public abstract virtual HResults SetDescription(Char* pszName);
    public abstract virtual HResults GetWorkingDirectory(Char* pszDir, int cch);
    public abstract virtual HResults SetWorkingDirectory(Char* pszDir);
    public abstract virtual HResults GetArguments(Char* pszArgs, int cch);
    public abstract virtual HResults SetArguments(Char* pszArgs);
    public abstract virtual HResults GetHotkey(UInt16* pwHotkey);
    public abstract virtual HResults SetHotkey(ushort wHotkey);
    public abstract virtual HResults GetShowCmd(Int32* piShowCmd);
    public abstract virtual HResults SetShowCmd(int iShowCmd);
    public abstract virtual HResults GetIconLocation(Char* pszIconPath, int cch, Int32* piIcon);
    public abstract virtual HResults SetIconLocation(Char* pszIconPath, int iIcon);
    public abstract virtual HResults SetRelativePath(Char* pszPathRel, UInt32 dwReserved);
    public abstract virtual HResults Resolve(Void* hwnd, UInt32 fFlags);
    public abstract virtual HResults SetPath(Char* pszFile);
}
[GuidAttribute("0000000B-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface JetBrains.Interop.WinApi.Declarations.Interfaces.IStorage {
    public abstract virtual int CreateStream(string pwcsName, UInt32 grfMode, UInt32 reserved1, UInt32 reserved2, IStream& ppstm);
    public abstract virtual int OpenStream(string pwcsName, Void* reserved1, UInt32 grfMode, UInt32 reserved2, IStream& ppstm);
    public abstract virtual int CreateStorage(string pwcsName, UInt32 grfMode, UInt32 reserved1, UInt32 reserved2, IStorage& ppstg);
    public abstract virtual int OpenStorage(string pwcsName, IStorage pstgPriority, UInt32 grfMode, Char** snbExclude, UInt32 reserved, IStorage& ppstg);
    public abstract virtual int CopyTo(UInt32 ciidExclude, Guid* pIIDExclude, Char** snbExclude, IStorage stgDest);
    public abstract virtual int MoveElementTo(string pwcsName, IStorage stgDest, string pwcsNewName, UInt32 grfFlags);
    public abstract virtual int Commit(UInt32 grfCommitFlags);
    public abstract virtual int Revert();
    public abstract virtual int EnumElements(UInt32 reserved1, Void* reserved2, UInt32 reserved3, IEnumSTATSTG& ppVal);
    public abstract virtual int DestroyElement(string pwcsName);
    public abstract virtual int RenameElement(string pwcsOldName, string pwcsNewName);
    public abstract virtual int SetElementTimes(string pwcsName, FILETIME* pctime, FILETIME* patime, FILETIME* pmtime);
    public abstract virtual int SetClass(Guid* clsid);
    public abstract virtual int SetStateBits(UInt32 grfStateBits, UInt32 grfMask);
    public abstract virtual int Stat(STATSTG& pStatStg, UInt32 grfStatFlag);
}
[SuppressUnmanagedCodeSecurityAttribute]
[GuidAttribute("0000000C-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface JetBrains.Interop.WinApi.Declarations.Interfaces.IStream {
    public abstract virtual int Read(Void* pv, UInt32 cb, UInt32& pcbRead);
    public abstract virtual int Write(Void* pv, UInt32 cb, UInt32& pcbWritten);
    public abstract virtual int Seek(long dlibMove, UInt32 dwOrigin, UInt64& plibNewPosition);
    public abstract virtual int SetSize(ulong libNewSize);
    public abstract virtual int CopyTo(IStream pstm, ulong cb, UInt64* pcbRead, UInt64* pcbWritten);
    public abstract virtual int Commit(UInt32 grfCommitFlags);
    public abstract virtual int Revert();
    public abstract virtual int LockRegion(ulong libOffset, ulong cb, UInt32 dwLockType);
    public abstract virtual int UnlockRegion(ulong libOffset, ulong cb, UInt32 dwLockType);
    public abstract virtual int Stat(STATSTG* pStatstg, UInt32 grfStatFlag);
    public abstract virtual int Clone(IStream& ppstm);
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("5D02926A-212E-11D0-9DF9-00A0C922E6EC")]
public class JetBrains.Interop.WinApi.Declarations.Interfaces.ITStorageClass : object {
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.Declarations.Structures.BITMAP : ValueType {
    public int bmType;
    public int bmWidth;
    public int bmHeight;
    public int bmWidthBytes;
    public ushort bmPlanes;
    public ushort bmBitsPixel;
    public Void* bmBits;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.Declarations.Structures.BITMAPFILEHEADER : ValueType {
    public ushort bfType;
    public UInt32 bfSize;
    public ushort bfReserved1;
    public ushort bfReserved2;
    public UInt32 bfOffBits;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.Declarations.Structures.BITMAPINFO : ValueType {
    public BITMAPINFOHEADER bmiHeader;
    public UInt32* bmiColors;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.Declarations.Structures.BITMAPINFOHEADER : ValueType {
    public UInt32 biSize;
    public int biWidth;
    public int biHeight;
    public ushort biPlanes;
    public ushort biBitCount;
    public UInt32 biCompression;
    public UInt32 biSizeImage;
    public int biXPelsPerMeter;
    public int biYPelsPerMeter;
    public UInt32 biClrUsed;
    public UInt32 biClrImportant;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.Declarations.Structures.BLENDFUNCTION : ValueType {
    public byte BlendOp;
    public byte BlendFlags;
    public byte SourceConstantAlpha;
    public byte AlphaFormat;
    public static int AC_SRC_OVER;
    public static int AC_SRC_ALPHA;
    public static BLENDFUNCTION GetPerPixelBlender(byte constantalpha);
    public static BLENDFUNCTION GetPerPixelBlender();
    public static BLENDFUNCTION GetUniformBlender(byte constantalpha);
    public static BLENDFUNCTION GetUniformBlender();
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.Declarations.Structures.CItsControlData : ValueType {
    public UInt32 Num;
    [FixedBufferAttribute("System.UInt32", "1")]
public <Data>e__FixedBuffer Data;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.Declarations.Structures.CURSORINFO : ValueType {
    public UInt32 cbSize;
    public UInt32 flags;
    public Void* hCursor;
    public POINT ptScreenPos;
    public static CURSORINFO NewWithSize();
}
public class JetBrains.Interop.WinApi.Declarations.Structures.DPI_AWARENESS_CONTEXT : ValueType {
    public Void* HandleValue;
    public static DPI_AWARENESS_CONTEXT DPI_AWARENESS_CONTEXT_UNAWARE { get; }
    public static DPI_AWARENESS_CONTEXT DPI_AWARENESS_CONTEXT_SYSTEM_AWARE { get; }
    public static DPI_AWARENESS_CONTEXT DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE { get; }
    public static DPI_AWARENESS_CONTEXT DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2 { get; }
    public static DPI_AWARENESS_CONTEXT DPI_AWARENESS_CONTEXT_UNAWARE_GDISCALED { get; }
    public static DPI_AWARENESS_CONTEXT get_DPI_AWARENESS_CONTEXT_UNAWARE();
    public static DPI_AWARENESS_CONTEXT get_DPI_AWARENESS_CONTEXT_SYSTEM_AWARE();
    public static DPI_AWARENESS_CONTEXT get_DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE();
    public static DPI_AWARENESS_CONTEXT get_DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2();
    public static DPI_AWARENESS_CONTEXT get_DPI_AWARENESS_CONTEXT_UNAWARE_GDISCALED();
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.Declarations.Structures.FILE_TIME : ValueType {
    public UInt32 ftTimeLow;
    public UInt32 ftTimeHigh;
    public FILE_TIME(long fileTime);
    public long ToTicks();
    public DateTime ToDateTimeUtc();
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.Declarations.Structures.FLASHWINFO : ValueType {
    public UInt32 cbSize;
    public Void* hwnd;
    public UInt32 dwFlags;
    public UInt32 uCount;
    public UInt32 dwTimeout;
}
public class JetBrains.Interop.WinApi.Declarations.Structures.HTTP_SERVICE_CONFIG_SSL_KEY : ValueType {
    public Void* pIpPort;
}
public class JetBrains.Interop.WinApi.Declarations.Structures.HTTP_SERVICE_CONFIG_SSL_PARAM : ValueType {
    public UInt32 SslHashLength;
    public Void* pSslHash;
    public Guid AppId;
    public Char* pSslCertStoreName;
    public UInt32 DefaultCertCheckMode;
    public UInt32 DefaultRevocationFreshnessTime;
    public UInt32 DefaultRevocationUrlRetrievalTimeout;
    public Char* pDefaultSslCtlIdentifier;
    public Char* pDefaultSslCtlStoreName;
    public UInt32 DefaultFlags;
}
public class JetBrains.Interop.WinApi.Declarations.Structures.HTTP_SERVICE_CONFIG_SSL_QUERY : ValueType {
    public HTTP_SERVICE_CONFIG_QUERY_TYPE QueryDesc;
    public HTTP_SERVICE_CONFIG_SSL_KEY KeyDesc;
    public UInt32 dwToken;
}
public class JetBrains.Interop.WinApi.Declarations.Structures.HTTP_SERVICE_CONFIG_SSL_SET : ValueType {
    public HTTP_SERVICE_CONFIG_SSL_KEY KeyDesc;
    public HTTP_SERVICE_CONFIG_SSL_PARAM ParamDesc;
}
public class JetBrains.Interop.WinApi.Declarations.Structures.IntOrStringResourceId : ValueType {
    public ushort IntResource;
    public string StringResource;
    public IntOrStringResourceId(string stringResource);
    public IntOrStringResourceId(ushort intResource);
    public IntOrStringResourceId(ResourceTypes rc);
    public IntOrStringResourceId AssertValid();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(IntOrStringResourceId other);
    public virtual int GetHashCode();
    public static bool op_Equality(IntOrStringResourceId left, IntOrStringResourceId right);
    public static bool op_Inequality(IntOrStringResourceId left, IntOrStringResourceId right);
    public static IntOrStringResourceId Parse(string text);
    public virtual string ToString();
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.Declarations.Structures.LOGFONT : ValueType {
    public int lfHeight;
    public int lfWidth;
    public int lfEscapement;
    public int lfOrientation;
    public int lfWeight;
    public byte lfItalic;
    public byte lfUnderline;
    public byte lfStrikeOut;
    public byte lfCharSet;
    public byte lfOutPrecision;
    public byte lfClipPrecision;
    public byte lfQuality;
    public byte lfPitchAndFamily;
    [FixedBufferAttribute("System.UInt16", "32")]
public <lfFaceName>e__FixedBuffer lfFaceName;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.Declarations.Structures.MEMORY_BASIC_INFORMATION : ValueType {
    public Void* BaseAddress;
    public Void* AllocationBase;
    public UInt32 AllocationProtect;
    public IntPtr RegionSize;
    public UInt32 State;
    public UInt32 Protect;
    public UInt32 Type;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.Declarations.Structures.MEMORY_BASIC_INFORMATION_WOW64 : ValueType {
    public long BaseAddress;
    public long AllocationBase;
    public int AllocationProtect;
    public long RegionSize;
    public int State;
    public int Protect;
    public int Type;
}
public class JetBrains.Interop.WinApi.Declarations.Structures.MIB_TCP6ROW : ValueType {
    public MIB_TCP_STATE dwState;
    [FixedBufferAttribute("System.Byte", "16")]
public <ucLocalAddr>e__FixedBuffer ucLocalAddr;
    public UInt32 dwLocalScopeId;
    public UInt32 dwLocalPort;
    [FixedBufferAttribute("System.Byte", "16")]
public <ucRemoteAddr>e__FixedBuffer ucRemoteAddr;
    public UInt32 dwRemoteScopeId;
    public UInt32 dwRemotePort;
}
public class JetBrains.Interop.WinApi.Declarations.Structures.MIB_TCP6ROW_OWNER_PID : ValueType {
    [FixedBufferAttribute("System.Byte", "16")]
public <ucLocalAddr>e__FixedBuffer ucLocalAddr;
    public UInt32 dwLocalScopeId;
    public UInt32 dwLocalPort;
    [FixedBufferAttribute("System.Byte", "16")]
public <ucRemoteAddr>e__FixedBuffer ucRemoteAddr;
    public UInt32 dwRemoteScopeId;
    public UInt32 dwRemotePort;
    public MIB_TCP_STATE dwState;
    public UInt32 dwOwningPid;
}
public class JetBrains.Interop.WinApi.Declarations.Structures.MIB_TCPROW : ValueType {
    public MIB_TCP_STATE dwState;
    public UInt32 dwLocalAddr;
    public UInt32 dwLocalPort;
    public UInt32 dwRemoteAddr;
    public UInt32 dwRemotePort;
}
public class JetBrains.Interop.WinApi.Declarations.Structures.MIB_TCPROW_OWNER_PID : ValueType {
    public MIB_TCP_STATE dwState;
    public UInt32 dwLocalAddr;
    public UInt32 dwLocalPort;
    public UInt32 dwRemoteAddr;
    public UInt32 dwRemotePort;
    public UInt32 dwOwningPid;
}
public class JetBrains.Interop.WinApi.Declarations.Structures.NativeResourceTypeAndName : ValueType {
    public IntOrStringResourceId Name;
    public IntOrStringResourceId Type;
    public NativeResourceTypeAndName(IntOrStringResourceId type, IntOrStringResourceId name);
    public NativeResourceTypeAndName(ResourceTypes rc, ushort intResource);
    public NativeResourceTypeAndName(ResourceTypes rc, string sResName);
    public void AssertValid();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(NativeResourceTypeAndName left, NativeResourceTypeAndName right);
    public static bool op_Inequality(NativeResourceTypeAndName left, NativeResourceTypeAndName right);
    public virtual string ToString();
    [PureAttribute]
public void WithMakeIntResource(WithMakeIntResourceDelegate F);
    public sealed virtual bool Equals(NativeResourceTypeAndName other);
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.Declarations.Structures.PROCESS_INFORMATION : ValueType {
    public Void* hProcess;
    public Void* hThread;
    public UInt32 dwProcessId;
    public UInt32 dwThreadId;
}
public class JetBrains.Interop.WinApi.Declarations.Structures.PROPID : ValueType {
    public UInt32 Value;
}
public class JetBrains.Interop.WinApi.Declarations.Structures.PROPSHEETPAGE : ValueType {
    public UInt32 dwSize;
    public UInt32 dwFlags;
    public Void* hInstance;
    public UnionTemplateOrResource pszTemplate_pResource;
    public UnionIconHandleOrString hIcon_pszIcon;
    public Char* pszTitle;
    public Void* pfnDlgProc;
    public IntPtr lParam;
    public Void* pfnCallback;
    public UInt32* pcRefParent;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.Declarations.Structures.PROPSPEC : ValueType {
    public UInt32 ulKind;
    public Union union;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.Declarations.Structures.PROPVARIANT : ValueType {
    public VARTYPE vt;
    public ushort wReserved1;
    public ushort wReserved2;
    public ushort wReserved3;
    public Void* pdata1;
    public Void* pdata2;
}
public enum JetBrains.Interop.WinApi.Declarations.Structures.SE_OBJECT_TYPE : Enum {
    public int value__;
    public static SE_OBJECT_TYPE SE_UNKNOWN_OBJECT_TYPE;
    public static SE_OBJECT_TYPE SE_FILE_OBJECT;
    public static SE_OBJECT_TYPE SE_SERVICE;
    public static SE_OBJECT_TYPE SE_PRINTER;
    public static SE_OBJECT_TYPE SE_REGISTRY_KEY;
    public static SE_OBJECT_TYPE SE_LMSHARE;
    public static SE_OBJECT_TYPE SE_KERNEL_OBJECT;
    public static SE_OBJECT_TYPE SE_WINDOW_OBJECT;
    public static SE_OBJECT_TYPE SE_DS_OBJECT;
    public static SE_OBJECT_TYPE SE_DS_OBJECT_ALL;
    public static SE_OBJECT_TYPE SE_PROVIDER_DEFINED_OBJECT;
    public static SE_OBJECT_TYPE SE_WMIGUID_OBJECT;
    public static SE_OBJECT_TYPE SE_REGISTRY_WOW64_32KEY;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.Declarations.Structures.SECURITY_INFORMATION : Enum {
    public UInt32 value__;
    public static SECURITY_INFORMATION OWNER_SECURITY_INFORMATION;
    public static SECURITY_INFORMATION GROUP_SECURITY_INFORMATION;
    public static SECURITY_INFORMATION DACL_SECURITY_INFORMATION;
    public static SECURITY_INFORMATION SACL_SECURITY_INFORMATION;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.Declarations.Structures.SIZE : ValueType {
    public int cx;
    public int cy;
    public int Width { get; }
    public int Height { get; }
    public SIZE(int CX, int CY);
    public int get_Width();
    public int get_Height();
    public sealed virtual bool Equals(SIZE other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(SIZE left, SIZE right);
    public static bool op_Inequality(SIZE left, SIZE right);
    public virtual string ToString();
    public static POINT op_Explicit(SIZE size);
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.Declarations.Structures.STATPROPSETSTG : ValueType {
    public Guid fmtid;
    public Guid clsid;
    public UInt32 grfFlags;
    public FILETIME mtime;
    public FILETIME ctime;
    public FILETIME atime;
    public UInt32 dwOSVersion;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.Declarations.Structures.STATPROPSTG : ValueType {
    public Char* lpwstrName;
    public PROPID propid;
    public VARTYPE vt;
}
public class JetBrains.Interop.WinApi.Declarations.Structures.STATSTG : ValueType {
    public UInt16* pwcsName;
    public UInt32 type;
    public ulong cbSize;
    public FILETIME mtime;
    public FILETIME ctime;
    public FILETIME atime;
    public UInt32 grfMode;
    public UInt32 grfLocksSupported;
    public Guid clsid;
    public UInt32 grfStateBits;
    public UInt32 reserved;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.Declarations.Structures.STGOPTIONS : ValueType {
    public ushort usVersion;
    public ushort reserved;
    public UInt32 ulSectorSize;
    public Char* pwcsTemplateFile;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.Declarations.Structures.SYSTEM_HANDLE_INFORMATION : ValueType {
    public UInt32 NumberOfHandles;
    private SYSTEM_HANDLE_TABLE_ENTRY_INFO Handles;
    public static SYSTEM_HANDLE_TABLE_ENTRY_INFO* GetHandlesPtr(SYSTEM_HANDLE_INFORMATION* ptr);
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.Declarations.Structures.SYSTEM_HANDLE_TABLE_ENTRY_INFO : ValueType {
    public UInt32 dwProcessId;
    public byte ObjectTypeIndex;
    public byte HandleAttributes;
    public ushort HandleValue;
    public Void* Object;
    public UInt32 GrantedAccess;
}
public class JetBrains.Interop.WinApi.Declarations.Structures.TOKEN_ELEVATION : ValueType {
    public UInt32 TokenIsElevated;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.Declarations.Structures.TOKEN_ORIGIN : ValueType {
    public LUID OriginatingLogonSession;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.Declarations.Structures.TOKEN_STATISTICS : ValueType {
    public LUID TokenId;
    public LUID AuthenticationId;
    public long ExpirationTime;
    public TOKEN_TYPE TokenType;
    public SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    public UInt32 DynamicCharged;
    public UInt32 DynamicAvailable;
    public UInt32 GroupCount;
    public UInt32 PrivilegeCount;
    public LUID ModifiedId;
}
public class JetBrains.Interop.WinApi.Declarations.Structures.VARTYPE : ValueType {
    public ushort Value;
    public static VARTYPE op_Implicit(VarEnum value);
    public static VARTYPE op_Implicit(ushort value);
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.Declarations.Structures.WIN32_FILE_ATTRIBUTE_DATA : ValueType {
    public UInt32 dwFileAttributes;
    public FILE_TIME ftCreationTime;
    public FILE_TIME ftLastAccessTime;
    public FILE_TIME ftLastWriteTime;
    public UInt32 nFileSizeHigh;
    public UInt32 nFileSizeLow;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.Declarations.Structures.WIN32_FIND_DATA : ValueType {
    public UInt32 dwFileAttributes;
    public FILE_TIME ftCreationTime;
    public FILE_TIME ftLastAccessTime;
    public FILE_TIME ftLastWriteTime;
    public UInt32 nFileSizeHigh;
    public UInt32 nFileSizeLow;
    public UInt32 dwReserved0;
    public UInt32 dwReserved1;
    public CFileName cFileName;
    public CAlternateFileName cAlternateFileName;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.Declarations.Structures.WINDOWPOS : ValueType {
    public Void* hwnd;
    public Void* hwndInsertAfter;
    public int x;
    public int y;
    public int cx;
    public int cy;
    public UInt32 flags;
    public RECT ToRectangle();
    public void SetRectangle(RECT rect);
}
public enum JetBrains.Interop.WinApi.DialogBoxCommandId : Enum {
    public ushort value__;
    public static DialogBoxCommandId IDOK;
    public static DialogBoxCommandId IDCANCEL;
    public static DialogBoxCommandId IDABORT;
    public static DialogBoxCommandId IDRETRY;
    public static DialogBoxCommandId IDIGNORE;
    public static DialogBoxCommandId IDYES;
    public static DialogBoxCommandId IDNO;
    public static DialogBoxCommandId IDCLOSE;
    public static DialogBoxCommandId IDHELP;
    public static DialogBoxCommandId IDTRYAGAIN;
    public static DialogBoxCommandId IDCONTINUE;
    public static DialogBoxCommandId IDTIMEOUT;
}
public enum JetBrains.Interop.WinApi.DialogCodes : Enum {
    public int value__;
    public static DialogCodes DLGC_WANTARROWS;
    public static DialogCodes DLGC_WANTTAB;
    public static DialogCodes DLGC_WANTALLKEYS;
    public static DialogCodes DLGC_WANTMESSAGE;
    public static DialogCodes DLGC_HASSETSEL;
    public static DialogCodes DLGC_DEFPUSHBUTTON;
    public static DialogCodes DLGC_UNDEFPUSHBUTTON;
    public static DialogCodes DLGC_RADIOBUTTON;
    public static DialogCodes DLGC_WANTCHARS;
    public static DialogCodes DLGC_STATIC;
    public static DialogCodes DLGC_BUTTON;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.DLGITEMTEMPLATE : ValueType {
    public WindowStyles style;
    public WindowExStyles dwExtendedStyle;
    public short x;
    public short y;
    public short cx;
    public short cy;
    public ushort id;
    public ushort atom;
    public ushort _static;
    public ushort _r1;
    public ushort _r2;
    public ushort _r3;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.DLGTEMPLATE : ValueType {
    public WindowStyles style;
    public WindowExStyles dwExtendedStyle;
    public ushort cdit;
    public short x;
    public short y;
    public short cx;
    public short cy;
    public ushort menu;
    public ushort dialog;
    public ushort font;
    public DLGITEMTEMPLATE pannel;
}
public static class JetBrains.Interop.WinApi.DwmApiDll : object {
    public static int DwmDefWindowProc(Void* hwnd, UInt32 msg, IntPtr wParam, IntPtr lParam, IntPtr* plResult);
    public static int DwmExtendFrameIntoClientArea(Void* hWnd, MARGINS* pMarInset);
    public static int DwmIsCompositionEnabled(Int32* pfEnabled);
    public static int DwmSetWindowAttribute(IntPtr hwnd, int attr, Int32& attrValue, int attrSize);
}
public enum JetBrains.Interop.WinApi.EditBoxControlMargins : Enum {
    public short value__;
    public static EditBoxControlMargins EC_LEFTMARGIN;
    public static EditBoxControlMargins EC_RIGHTMARGIN;
    public static EditBoxControlMargins EC_USEFONTINFO;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.EVENT_RECORD : ValueType {
    public EVENT_HEADER EventHeader;
    public ETW_BUFFER_CONTEXT BufferContext;
    public ushort ExtendedDataCount;
    public ushort UserDataLength;
    public Void* ExtendedData;
    public Void* UserData;
    public Void* UserContext;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.EVENT_TRACE : ValueType {
    public EVENT_TRACE_HEADER Header;
    public UInt32 InstanceId;
    public UInt32 ParentInstanceId;
    public Guid ParentGuid;
    public Void* MofData;
    public UInt32 MofLength;
    public UInt32 ClientContext;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.EVENT_TRACE_LOGFILE : ValueType {
    public string LogFileName;
    public string LoggerName;
    public long CurrentTime;
    public UInt32 BuffersRead;
    public UInt32 ProcessTraceMode;
    public EVENT_TRACE CurrentEvent;
    public TRACE_LOGFILE_HEADER LogfileHeader;
    public EventTraceBufferCallback BufferCallback;
    public UInt32 BufferSize;
    public UInt32 Filled;
    public UInt32 EventsLost;
    public EventRecordCallback EventRecordCallback;
    public UInt32 IsKernelTrace;
    public Void* Context;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.EVENT_TRACE_PROPERTIES : ValueType {
    public WNODE_HEADER Wnode;
    public UInt32 BufferSize;
    public UInt32 MinimumBuffers;
    public UInt32 MaximumBuffers;
    public UInt32 MaximumFileSize;
    public UInt32 LogFileMode;
    public UInt32 FlushTimer;
    public UInt32 EnableFlags;
    public int AgeLimit;
    public UInt32 NumberOfBuffers;
    public UInt32 FreeBuffers;
    public UInt32 EventsLost;
    public UInt32 BuffersWritten;
    public UInt32 LogBuffersLost;
    public UInt32 RealTimeBuffersLost;
    public IntPtr LoggerThreadId;
    public UInt32 LogFileNameOffset;
    public UInt32 LoggerNameOffset;
}
public class JetBrains.Interop.WinApi.EventRecordCallback : MulticastDelegate {
    public EventRecordCallback(object object, IntPtr method);
    public virtual void Invoke(EVENT_RECORD& eventRecord);
    public virtual IAsyncResult BeginInvoke(EVENT_RECORD& eventRecord, AsyncCallback callback, object object);
    public virtual void EndInvoke(EVENT_RECORD& eventRecord, IAsyncResult result);
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.EventTrace_LogFileMode : Enum {
    public UInt32 value__;
    public static EventTrace_LogFileMode EVENT_TRACE_FILE_MODE_NONE;
    public static EventTrace_LogFileMode EVENT_TRACE_FILE_MODE_SEQUENTIAL;
    public static EventTrace_LogFileMode EVENT_TRACE_FILE_MODE_CIRCULAR;
    public static EventTrace_LogFileMode EVENT_TRACE_FILE_MODE_APPEND;
    public static EventTrace_LogFileMode EVENT_TRACE_REAL_TIME_MODE;
    public static EventTrace_LogFileMode EVENT_TRACE_DELAY_OPEN_FILE_MODE;
    public static EventTrace_LogFileMode EVENT_TRACE_BUFFERING_MODE;
    public static EventTrace_LogFileMode EVENT_TRACE_PRIVATE_LOGGER_MODE;
    public static EventTrace_LogFileMode EVENT_TRACE_ADD_HEADER_MODE;
    public static EventTrace_LogFileMode EVENT_TRACE_USE_GLOBAL_SEQUENCE;
    public static EventTrace_LogFileMode EVENT_TRACE_USE_LOCAL_SEQUENCE;
    public static EventTrace_LogFileMode EVENT_TRACE_RELOG_MODE;
    public static EventTrace_LogFileMode EVENT_TRACE_USE_PAGED_MEMORY;
    public static EventTrace_LogFileMode EVENT_TRACE_FILE_MODE_NEWFILE;
    public static EventTrace_LogFileMode EVENT_TRACE_FILE_MODE_PREALLOCATE;
    public static EventTrace_LogFileMode EVENT_TRACE_NONSTOPPABLE_MODE;
    public static EventTrace_LogFileMode EVENT_TRACE_SECURE_MODE;
    public static EventTrace_LogFileMode EVENT_TRACE_USE_KBYTES_FOR_SIZE;
    public static EventTrace_LogFileMode EVENT_TRACE_PRIVATE_IN_PROC;
    public static EventTrace_LogFileMode EVENT_TRACE_MODE_RESERVED;
    public static EventTrace_LogFileMode EVENT_TRACE_NO_PER_PROCESSOR_BUFFERING;
}
public class JetBrains.Interop.WinApi.EventTraceBufferCallback : MulticastDelegate {
    public EventTraceBufferCallback(object object, IntPtr method);
    public virtual int Invoke(EVENT_TRACE_LOGFILE& logfile);
    public virtual IAsyncResult BeginInvoke(EVENT_TRACE_LOGFILE& logfile, AsyncCallback callback, object object);
    public virtual int EndInvoke(EVENT_TRACE_LOGFILE& logfile, IAsyncResult result);
}
public class JetBrains.Interop.WinApi.FILE_DISPOSITION_INFORMATION : ValueType {
    public bool DeleteFile;
}
public class JetBrains.Interop.WinApi.Functions.HOOKPROC : MulticastDelegate {
    public HOOKPROC(object object, IntPtr method);
    public virtual IntPtr Invoke(int code, IntPtr wParam, IntPtr lParam);
    public virtual IAsyncResult BeginInvoke(int code, IntPtr wParam, IntPtr lParam, AsyncCallback callback, object object);
    public virtual IntPtr EndInvoke(IAsyncResult result);
}
public class JetBrains.Interop.WinApi.Functions.IoCompletionCallback : MulticastDelegate {
    public IoCompletionCallback(object object, IntPtr method);
    public virtual void Invoke(Void* Instance, Void* Context, Void* Overlapped, UInt32 IoResult, UIntPtr NumberOfBytesTransferred, Void* Io);
    public virtual IAsyncResult BeginInvoke(Void* Instance, Void* Context, Void* Overlapped, UInt32 IoResult, UIntPtr NumberOfBytesTransferred, Void* Io, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class JetBrains.Interop.WinApi.Functions.LPFNPSPCALLBACK : MulticastDelegate {
    public LPFNPSPCALLBACK(object object, IntPtr method);
    public virtual UInt32 Invoke(Void* hwnd, UInt32 nMsg, PROPSHEETPAGE* ppsp);
    public virtual IAsyncResult BeginInvoke(Void* hwnd, UInt32 nMsg, PROPSHEETPAGE* ppsp, AsyncCallback callback, object object);
    public virtual UInt32 EndInvoke(IAsyncResult result);
}
public class JetBrains.Interop.WinApi.Functions.SendAsyncProc : MulticastDelegate {
    public SendAsyncProc(object object, IntPtr method);
    public virtual void Invoke(Void* hwnd, UInt32 msg, UInt32* pdwData, IntPtr lResult);
    public virtual IAsyncResult BeginInvoke(Void* hwnd, UInt32 msg, UInt32* pdwData, IntPtr lResult, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class JetBrains.Interop.WinApi.Functions.WAITORTIMERCALLBACK : MulticastDelegate {
    public WAITORTIMERCALLBACK(object object, IntPtr method);
    public virtual void Invoke(Void* lpParameter, byte TimerOrWaitFired);
    public virtual IAsyncResult BeginInvoke(Void* lpParameter, byte TimerOrWaitFired, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class JetBrains.Interop.WinApi.Functions.WNDPROC : MulticastDelegate {
    public WNDPROC(object object, IntPtr method);
    public virtual IntPtr Invoke(Void* hwnd, UInt32 msg, IntPtr wParam, IntPtr lParam);
    public virtual IAsyncResult BeginInvoke(Void* hwnd, UInt32 msg, IntPtr wParam, IntPtr lParam, AsyncCallback callback, object object);
    public virtual IntPtr EndInvoke(IAsyncResult result);
}
public static class JetBrains.Interop.WinApi.Gdi32Dll : object {
    public static int BitBlt(Void* hdcDest, int nXDest, int nYDest, int nWidth, int nHeight, Void* hdcSrc, int nXSrc, int nYSrc, UInt32 dwRop);
    public static Void* CreateCompatibleDC(Void* hdc);
    public static Void* CreateDCW(string lpszDriver, string lpszDevice, string lpszOutput, Void* lpInitData);
    public static int GetDeviceCaps(Void* hdc, int capindex);
    public static Void* CreateDIBSection(Void* hdc, BITMAPINFO* pbmi, UInt32 iUsage, Void** ppvBits, Void* hSection, int dwOffset);
    public static Void* CreateDIBitmap(Void* hdc, BITMAPINFOHEADER* lpbmih, UInt32 fdwInit, Void* lpbInit, BITMAPINFO* lpbmi, UInt32 fuUsage);
    public static Void* CreatePen(int fnPenStyle, int nWidth, UInt32 crColor);
    public static Void* CreateRoundRectRgn(int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nWidthEllipse, int nHeightEllipse);
    public static int DeleteDC(Void* hDC);
    public static int DeleteObject(Void* hGDIObj);
    public static int GdiFlush();
    public static Void* GetStockObject(int fnObject);
    public static Void* SelectObject(Void* hDC, Void* hGDIObj);
    public static int StretchBlt(Void* hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest, int nHeightDest, Void* hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, UInt32 dwRop);
    public static Void* CreateSolidBrush(UInt32 crColor);
    public static int Rectangle(Void* hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect);
    public static Void* CreateRectRgn(int nLeftRect, int nTopRect, int nRightRect, int nBottomRect);
    public static int CombineRgn(Void* hrgnDest, Void* hrgnSrc1, Void* hrgnSrc2, int fnCombineMode);
    public static UInt32 SetDCBrushColor(Void* hdc, UInt32 colorref);
    public static Void* CreateCompatibleBitmap(Void* hdc, int cx, int cy);
    public static int GetObject(Void* hgdiobj, int cbBuffer, Void* lpvObject);
}
public enum JetBrains.Interop.WinApi.GetAncestorFlags : Enum {
    public UInt32 value__;
    public static GetAncestorFlags GA_PARENT;
    public static GetAncestorFlags GA_ROOT;
    public static GetAncestorFlags GA_ROOTOWNER;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.GUITHREADINFO : ValueType {
    [UsedImplicitlyAttribute]
public UInt32 cbSize;
    [UsedImplicitlyAttribute]
public UInt32 flags;
    [UsedImplicitlyAttribute]
public Void* hwndActive;
    [UsedImplicitlyAttribute]
public Void* hwndFocus;
    [UsedImplicitlyAttribute]
public Void* hwndCapture;
    [UsedImplicitlyAttribute]
public Void* hwndMenuOwner;
    [UsedImplicitlyAttribute]
public Void* hwndMoveSize;
    [UsedImplicitlyAttribute]
public Void* hwndCaret;
    [UsedImplicitlyAttribute]
public RECT rcCaret;
    public static GUITHREADINFO NewWithSize();
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.HDITEM : ValueType {
    public HeaderItemMask mask;
    public int cxy;
    public IntPtr pszText;
    public IntPtr hbm;
    public int cchTextMax;
    public HeaderItemFlag fmt;
    public IntPtr lParam;
    public int iImage;
    public int iOrder;
    public UInt32 type;
    public IntPtr pvFilter;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.HeaderItemFlag : Enum {
    public int value__;
    public static HeaderItemFlag HDF_LEFT;
    public static HeaderItemFlag HDF_RIGHT;
    public static HeaderItemFlag HDF_CENTER;
    public static HeaderItemFlag HDF_JUSTIFYMASK;
    public static HeaderItemFlag HDF_RTLREADING;
    public static HeaderItemFlag HDF_OWNERDRAW;
    public static HeaderItemFlag HDF_STRING;
    public static HeaderItemFlag HDF_BITMAP;
    public static HeaderItemFlag HDF_BITMAP_ON_RIGHT;
    public static HeaderItemFlag HDF_IMAGE;
    public static HeaderItemFlag HDF_SORTUP;
    public static HeaderItemFlag HDF_SORTDOWN;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.HeaderItemMask : Enum {
    public UInt32 value__;
    public static HeaderItemMask HDI_WIDTH;
    public static HeaderItemMask HDI_HEIGHT;
    public static HeaderItemMask HDI_TEXT;
    public static HeaderItemMask HDI_FORMAT;
    public static HeaderItemMask HDI_LPARAM;
    public static HeaderItemMask HDI_BITMAP;
    public static HeaderItemMask HDI_IMAGE;
    public static HeaderItemMask HDI_DI_SETITEM;
    public static HeaderItemMask HDI_ORDER;
    public static HeaderItemMask HDI_FILTER;
}
public static class JetBrains.Interop.WinApi.HResultHelpers : object {
    private static HResults myCachedCanUseRecordedMessages;
    [CanBeNullAttribute]
private static List`1<KeyValuePair`2<int, string>> myCachedRecordedMessages;
    [CanBeNullAttribute]
private static Dictionary`2<int, String[]> myMapHResultValueToName;
    private static HResultHelpers();
    public static void Assert(int hresult, Int32[] expectedHRFailure);
    public static void Assert(int hresult);
    public static void Assert(HResults hresult);
    public static void Assert(int hresult, string comment);
    public static void Assert(HResults hresult, string comment);
    public static void Assert(HResults hresult, Action`1<Exception> FComment);
    public static bool FAILED(HResults hresult);
    public static bool FAILED(int hresult);
    public static void GetDisplayTextForHr(HResults hr, StringBuilder sb);
    [CanBeNullAttribute]
public static Exception GetExceptionIfFailed(int hresult);
    [CanBeNullAttribute]
public static Exception GetExceptionIfFailed(int hresult, string comment);
    [NotNullAttribute]
public static string GetFullMessageForHr(HResults hr);
    public static void GetNamesAndIntsForHResult(HResults hr, StringBuilder sb);
    [NotNullAttribute]
public static IReadOnlyList`1<string> GetNamesForHResult(HResults hr);
    public static HResults HResultFromWin32(WinError winError);
    public static bool SUCCEEDED(HResults hresult);
    public static bool SUCCEEDED(int hresult);
    public static void ThrowExceptionIfFailed(int hresult);
    public static void ThrowExceptionIfFailed(int hresult, string comment);
    [CanBeNullAttribute]
public static string TryGetOnlySystemMessageForHr(HResults hr);
    private static string GetDummyOnlySystemLikeMessageForHr(HResults hr);
}
public static class JetBrains.Interop.WinApi.HResultMessageHelpers : object {
    public static UInt64[] myMessageData;
    private static HResultMessageHelpers();
    [NotNullAttribute]
public static List`1<KeyValuePair`2<int, string>> LoadMessageData();
    public static void RenderMessageData();
}
public enum JetBrains.Interop.WinApi.HResults : Enum {
    public int value__;
    public static HResults S_OK;
    public static HResults S_FALSE;
    public static HResults E_UNEXPECTED;
    public static HResults E_NOTIMPL;
    public static HResults E_OUTOFMEMORY;
    public static HResults E_INVALIDARG;
    public static HResults E_NOINTERFACE;
    public static HResults E_POINTER;
    public static HResults E_HANDLE;
    public static HResults E_ABORT;
    public static HResults E_FAIL;
    public static HResults E_ACCESSDENIED;
    public static HResults E_PENDING;
    public static HResults CO_E_INIT_TLS;
    public static HResults CO_E_INIT_SHARED_ALLOCATOR;
    public static HResults CO_E_INIT_MEMORY_ALLOCATOR;
    public static HResults CO_E_INIT_CLASS_CACHE;
    public static HResults CO_E_INIT_RPC_CHANNEL;
    public static HResults CO_E_INIT_TLS_SET_CHANNEL_CONTROL;
    public static HResults CO_E_INIT_TLS_CHANNEL_CONTROL;
    public static HResults CO_E_INIT_UNACCEPTED_USER_ALLOCATOR;
    public static HResults CO_E_INIT_SCM_MUTEX_EXISTS;
    public static HResults CO_E_INIT_SCM_FILE_MAPPING_EXISTS;
    public static HResults CO_E_INIT_SCM_MAP_VIEW_OF_FILE;
    public static HResults CO_E_INIT_SCM_EXEC_FAILURE;
    public static HResults CO_E_INIT_ONLY_SINGLE_THREADED;
    public static HResults CO_E_CANT_REMOTE;
    public static HResults CO_E_BAD_SERVER_NAME;
    public static HResults CO_E_WRONG_SERVER_IDENTITY;
    public static HResults CO_E_OLE1DDE_DISABLED;
    public static HResults CO_E_RUNAS_SYNTAX;
    public static HResults CO_E_CREATEPROCESS_FAILURE;
    public static HResults CO_E_RUNAS_CREATEPROCESS_FAILURE;
    public static HResults CO_E_RUNAS_LOGON_FAILURE;
    public static HResults CO_E_LAUNCH_PERMSSION_DENIED;
    public static HResults CO_E_START_SERVICE_FAILURE;
    public static HResults CO_E_REMOTE_COMMUNICATION_FAILURE;
    public static HResults CO_E_SERVER_START_TIMEOUT;
    public static HResults CO_E_CLSREG_INCONSISTENT;
    public static HResults CO_E_IIDREG_INCONSISTENT;
    public static HResults CO_E_NOT_SUPPORTED;
    public static HResults CO_E_RELOAD_DLL;
    public static HResults CO_E_MSI_ERROR;
    public static HResults CO_E_ATTEMPT_TO_CREATE_OUTSIDE_CLIENT_CONTEXT;
    public static HResults CO_E_SERVER_PAUSED;
    public static HResults CO_E_SERVER_NOT_PAUSED;
    public static HResults CO_E_CLASS_DISABLED;
    public static HResults CO_E_CLRNOTAVAILABLE;
    public static HResults CO_E_ASYNC_WORK_REJECTED;
    public static HResults CO_E_SERVER_INIT_TIMEOUT;
    public static HResults CO_E_NO_SECCTX_IN_ACTIVATE;
    public static HResults CO_E_TRACKER_CONFIG;
    public static HResults CO_E_THREADPOOL_CONFIG;
    public static HResults CO_E_SXS_CONFIG;
    public static HResults CO_E_MALFORMED_SPN;
    public static HResults OLE_E_FIRST;
    public static HResults OLE_E_LAST;
    public static HResults OLE_S_FIRST;
    public static HResults OLE_S_LAST;
    public static HResults OLE_E_OLEVERB;
    public static HResults OLE_E_ADVF;
    public static HResults OLE_E_ENUM_NOMORE;
    public static HResults OLE_E_ADVISENOTSUPPORTED;
    public static HResults OLE_E_NOCONNECTION;
    public static HResults OLE_E_NOTRUNNING;
    public static HResults OLE_E_NOCACHE;
    public static HResults OLE_E_BLANK;
    public static HResults OLE_E_CLASSDIFF;
    public static HResults OLE_E_CANT_GETMONIKER;
    public static HResults OLE_E_CANT_BINDTOSOURCE;
    public static HResults OLE_E_STATIC;
    public static HResults OLE_E_PROMPTSAVECANCELLED;
    public static HResults OLE_E_INVALIDRECT;
    public static HResults OLE_E_WRONGCOMPOBJ;
    public static HResults OLE_E_INVALIDHWND;
    public static HResults OLE_E_NOT_INPLACEACTIVE;
    public static HResults OLE_E_CANTCONVERT;
    public static HResults OLE_E_NOSTORAGE;
    public static HResults DV_E_FORMATETC;
    public static HResults DV_E_DVTARGETDEVICE;
    public static HResults DV_E_STGMEDIUM;
    public static HResults DV_E_STATDATA;
    public static HResults DV_E_LINDEX;
    public static HResults DV_E_TYMED;
    public static HResults DV_E_CLIPFORMAT;
    public static HResults DV_E_DVASPECT;
    public static HResults DV_E_DVTARGETDEVICE_SIZE;
    public static HResults DV_E_NOIVIEWOBJECT;
    public static HResults DRAGDROP_E_FIRST;
    public static HResults DRAGDROP_E_LAST;
    public static HResults DRAGDROP_S_FIRST;
    public static HResults DRAGDROP_S_LAST;
    public static HResults DRAGDROP_E_NOTREGISTERED;
    public static HResults DRAGDROP_E_ALREADYREGISTERED;
    public static HResults DRAGDROP_E_INVALIDHWND;
    public static HResults CLASSFACTORY_E_FIRST;
    public static HResults CLASSFACTORY_E_LAST;
    public static HResults CLASSFACTORY_S_FIRST;
    public static HResults CLASSFACTORY_S_LAST;
    public static HResults CLASS_E_NOAGGREGATION;
    public static HResults CLASS_E_CLASSNOTAVAILABLE;
    public static HResults CLASS_E_NOTLICENSED;
    public static HResults MARSHAL_E_FIRST;
    public static HResults MARSHAL_E_LAST;
    public static HResults MARSHAL_S_FIRST;
    public static HResults MARSHAL_S_LAST;
    public static HResults DATA_E_FIRST;
    public static HResults DATA_E_LAST;
    public static HResults DATA_S_FIRST;
    public static HResults DATA_S_LAST;
    public static HResults VIEW_E_FIRST;
    public static HResults VIEW_E_LAST;
    public static HResults VIEW_S_FIRST;
    public static HResults VIEW_S_LAST;
    public static HResults VIEW_E_DRAW;
    public static HResults REGDB_E_FIRST;
    public static HResults REGDB_E_LAST;
    public static HResults REGDB_S_FIRST;
    public static HResults REGDB_S_LAST;
    public static HResults REGDB_E_READREGDB;
    public static HResults REGDB_E_WRITEREGDB;
    public static HResults REGDB_E_KEYMISSING;
    public static HResults REGDB_E_INVALIDVALUE;
    public static HResults REGDB_E_CLASSNOTREG;
    public static HResults REGDB_E_IIDNOTREG;
    public static HResults REGDB_E_BADTHREADINGMODEL;
    public static HResults CAT_E_FIRST;
    public static HResults CAT_E_LAST;
    public static HResults CAT_E_CATIDNOEXIST;
    public static HResults CAT_E_NODESCRIPTION;
    public static HResults CS_E_FIRST;
    public static HResults CS_E_LAST;
    public static HResults CS_E_PACKAGE_NOTFOUND;
    public static HResults CS_E_NOT_DELETABLE;
    public static HResults CS_E_CLASS_NOTFOUND;
    public static HResults CS_E_INVALID_VERSION;
    public static HResults CS_E_NO_CLASSSTORE;
    public static HResults CS_E_OBJECT_NOTFOUND;
    public static HResults CS_E_OBJECT_ALREADY_EXISTS;
    public static HResults CS_E_INVALID_PATH;
    public static HResults CS_E_NETWORK_ERROR;
    public static HResults CS_E_ADMIN_LIMIT_EXCEEDED;
    public static HResults CS_E_SCHEMA_MISMATCH;
    public static HResults CS_E_INTERNAL_ERROR;
    public static HResults CACHE_E_FIRST;
    public static HResults CACHE_E_LAST;
    public static HResults CACHE_S_FIRST;
    public static HResults CACHE_S_LAST;
    public static HResults CACHE_E_NOCACHE_UPDATED;
    public static HResults OLEOBJ_E_FIRST;
    public static HResults OLEOBJ_E_LAST;
    public static HResults OLEOBJ_S_FIRST;
    public static HResults OLEOBJ_S_LAST;
    public static HResults OLEOBJ_E_NOVERBS;
    public static HResults OLEOBJ_E_INVALIDVERB;
    public static HResults CLIENTSITE_E_FIRST;
    public static HResults CLIENTSITE_E_LAST;
    public static HResults CLIENTSITE_S_FIRST;
    public static HResults CLIENTSITE_S_LAST;
    public static HResults INPLACE_E_NOTUNDOABLE;
    public static HResults INPLACE_E_NOTOOLSPACE;
    public static HResults INPLACE_E_FIRST;
    public static HResults INPLACE_E_LAST;
    public static HResults INPLACE_S_FIRST;
    public static HResults INPLACE_S_LAST;
    public static HResults ENUM_E_FIRST;
    public static HResults ENUM_E_LAST;
    public static HResults ENUM_S_FIRST;
    public static HResults ENUM_S_LAST;
    public static HResults CONVERT10_E_FIRST;
    public static HResults CONVERT10_E_LAST;
    public static HResults CONVERT10_S_FIRST;
    public static HResults CONVERT10_S_LAST;
    public static HResults CONVERT10_E_OLESTREAM_GET;
    public static HResults CONVERT10_E_OLESTREAM_PUT;
    public static HResults CONVERT10_E_OLESTREAM_FMT;
    public static HResults CONVERT10_E_OLESTREAM_BITMAP_TO_DIB;
    public static HResults CONVERT10_E_STG_FMT;
    public static HResults CONVERT10_E_STG_NO_STD_STREAM;
    public static HResults CONVERT10_E_STG_DIB_TO_BITMAP;
    public static HResults CLIPBRD_E_FIRST;
    public static HResults CLIPBRD_E_LAST;
    public static HResults CLIPBRD_S_FIRST;
    public static HResults CLIPBRD_S_LAST;
    public static HResults CLIPBRD_E_CANT_OPEN;
    public static HResults CLIPBRD_E_CANT_EMPTY;
    public static HResults CLIPBRD_E_CANT_SET;
    public static HResults CLIPBRD_E_BAD_DATA;
    public static HResults CLIPBRD_E_CANT_CLOSE;
    public static HResults MK_E_FIRST;
    public static HResults MK_E_LAST;
    public static HResults MK_S_FIRST;
    public static HResults MK_S_LAST;
    public static HResults MK_E_CONNECTMANUALLY;
    public static HResults MK_E_EXCEEDEDDEADLINE;
    public static HResults MK_E_NEEDGENERIC;
    public static HResults MK_E_UNAVAILABLE;
    public static HResults MK_E_SYNTAX;
    public static HResults MK_E_NOOBJECT;
    public static HResults MK_E_INVALIDEXTENSION;
    public static HResults MK_E_INTERMEDIATEINTERFACENOTSUPPORTED;
    public static HResults MK_E_NOTBINDABLE;
    public static HResults MK_E_NOTBOUND;
    public static HResults MK_E_CANTOPENFILE;
    public static HResults MK_E_MUSTBOTHERUSER;
    public static HResults MK_E_NOINVERSE;
    public static HResults MK_E_NOSTORAGE;
    public static HResults MK_E_NOPREFIX;
    public static HResults MK_E_ENUMERATION_FAILED;
    public static HResults CO_E_FIRST;
    public static HResults CO_E_LAST;
    public static HResults CO_S_FIRST;
    public static HResults CO_S_LAST;
    public static HResults CO_E_NOTINITIALIZED;
    public static HResults CO_E_ALREADYINITIALIZED;
    public static HResults CO_E_CANTDETERMINECLASS;
    public static HResults CO_E_CLASSSTRING;
    public static HResults CO_E_IIDSTRING;
    public static HResults CO_E_APPNOTFOUND;
    public static HResults CO_E_APPSINGLEUSE;
    public static HResults CO_E_ERRORINAPP;
    public static HResults CO_E_DLLNOTFOUND;
    public static HResults CO_E_ERRORINDLL;
    public static HResults CO_E_WRONGOSFORAPP;
    public static HResults CO_E_OBJNOTREG;
    public static HResults CO_E_OBJISREG;
    public static HResults CO_E_OBJNOTCONNECTED;
    public static HResults CO_E_APPDIDNTREG;
    public static HResults CO_E_RELEASED;
    public static HResults EVENT_E_FIRST;
    public static HResults EVENT_E_LAST;
    public static HResults EVENT_S_FIRST;
    public static HResults EVENT_S_LAST;
    public static HResults EVENT_S_SOME_SUBSCRIBERS_FAILED;
    public static HResults EVENT_E_ALL_SUBSCRIBERS_FAILED;
    public static HResults EVENT_S_NOSUBSCRIBERS;
    public static HResults EVENT_E_QUERYSYNTAX;
    public static HResults EVENT_E_QUERYFIELD;
    public static HResults EVENT_E_INTERNALEXCEPTION;
    public static HResults EVENT_E_INTERNALERROR;
    public static HResults EVENT_E_INVALID_PER_USER_SID;
    public static HResults EVENT_E_USER_EXCEPTION;
    public static HResults EVENT_E_TOO_MANY_METHODS;
    public static HResults EVENT_E_MISSING_EVENTCLASS;
    public static HResults EVENT_E_NOT_ALL_REMOVED;
    public static HResults EVENT_E_COMPLUS_NOT_INSTALLED;
    public static HResults EVENT_E_CANT_MODIFY_OR_DELETE_UNCONFIGURED_OBJECT;
    public static HResults EVENT_E_CANT_MODIFY_OR_DELETE_CONFIGURED_OBJECT;
    public static HResults EVENT_E_INVALID_EVENT_CLASS_PARTITION;
    public static HResults EVENT_E_PER_USER_SID_NOT_LOGGED_ON;
    public static HResults XACT_E_FIRST;
    public static HResults XACT_E_LAST;
    public static HResults XACT_S_FIRST;
    public static HResults XACT_S_LAST;
    public static HResults XACT_E_ALREADYOTHERSINGLEPHASE;
    public static HResults XACT_E_CANTRETAIN;
    public static HResults XACT_E_COMMITFAILED;
    public static HResults XACT_E_COMMITPREVENTED;
    public static HResults XACT_E_HEURISTICABORT;
    public static HResults XACT_E_HEURISTICCOMMIT;
    public static HResults XACT_E_HEURISTICDAMAGE;
    public static HResults XACT_E_HEURISTICDANGER;
    public static HResults XACT_E_ISOLATIONLEVEL;
    public static HResults XACT_E_NOASYNC;
    public static HResults XACT_E_NOENLIST;
    public static HResults XACT_E_NOISORETAIN;
    public static HResults XACT_E_NORESOURCE;
    public static HResults XACT_E_NOTCURRENT;
    public static HResults XACT_E_NOTRANSACTION;
    public static HResults XACT_E_NOTSUPPORTED;
    public static HResults XACT_E_UNKNOWNRMGRID;
    public static HResults XACT_E_WRONGSTATE;
    public static HResults XACT_E_WRONGUOW;
    public static HResults XACT_E_XTIONEXISTS;
    public static HResults XACT_E_NOIMPORTOBJECT;
    public static HResults XACT_E_INVALIDCOOKIE;
    public static HResults XACT_E_INDOUBT;
    public static HResults XACT_E_NOTIMEOUT;
    public static HResults XACT_E_ALREADYINPROGRESS;
    public static HResults XACT_E_ABORTED;
    public static HResults XACT_E_LOGFULL;
    public static HResults XACT_E_TMNOTAVAILABLE;
    public static HResults XACT_E_CONNECTION_DOWN;
    public static HResults XACT_E_CONNECTION_DENIED;
    public static HResults XACT_E_REENLISTTIMEOUT;
    public static HResults XACT_E_TIP_CONNECT_FAILED;
    public static HResults XACT_E_TIP_PROTOCOL_ERROR;
    public static HResults XACT_E_TIP_PULL_FAILED;
    public static HResults XACT_E_DEST_TMNOTAVAILABLE;
    public static HResults XACT_E_TIP_DISABLED;
    public static HResults XACT_E_NETWORK_TX_DISABLED;
    public static HResults XACT_E_PARTNER_NETWORK_TX_DISABLED;
    public static HResults XACT_E_XA_TX_DISABLED;
    public static HResults XACT_E_UNABLE_TO_READ_DTC_CONFIG;
    public static HResults XACT_E_UNABLE_TO_LOAD_DTC_PROXY;
    public static HResults XACT_E_ABORTING;
    public static HResults XACT_E_CLERKNOTFOUND;
    public static HResults XACT_E_CLERKEXISTS;
    public static HResults XACT_E_RECOVERYINPROGRESS;
    public static HResults XACT_E_TRANSACTIONCLOSED;
    public static HResults XACT_E_INVALIDLSN;
    public static HResults XACT_E_REPLAYREQUEST;
    public static HResults XACT_S_ASYNC;
    public static HResults XACT_S_DEFECT;
    public static HResults XACT_S_READONLY;
    public static HResults XACT_S_SOMENORETAIN;
    public static HResults XACT_S_OKINFORM;
    public static HResults XACT_S_MADECHANGESCONTENT;
    public static HResults XACT_S_MADECHANGESINFORM;
    public static HResults XACT_S_ALLNORETAIN;
    public static HResults XACT_S_ABORTING;
    public static HResults XACT_S_SINGLEPHASE;
    public static HResults XACT_S_LOCALLY_OK;
    public static HResults XACT_S_LASTRESOURCEMANAGER;
    public static HResults CONTEXT_E_FIRST;
    public static HResults CONTEXT_E_LAST;
    public static HResults CONTEXT_S_FIRST;
    public static HResults CONTEXT_S_LAST;
    public static HResults CONTEXT_E_ABORTED;
    public static HResults CONTEXT_E_ABORTING;
    public static HResults CONTEXT_E_NOCONTEXT;
    public static HResults CONTEXT_E_WOULD_DEADLOCK;
    public static HResults CONTEXT_E_SYNCH_TIMEOUT;
    public static HResults CONTEXT_E_OLDREF;
    public static HResults CONTEXT_E_ROLENOTFOUND;
    public static HResults CONTEXT_E_TMNOTAVAILABLE;
    public static HResults CO_E_ACTIVATIONFAILED;
    public static HResults CO_E_ACTIVATIONFAILED_EVENTLOGGED;
    public static HResults CO_E_ACTIVATIONFAILED_CATALOGERROR;
    public static HResults CO_E_ACTIVATIONFAILED_TIMEOUT;
    public static HResults CO_E_INITIALIZATIONFAILED;
    public static HResults CONTEXT_E_NOJIT;
    public static HResults CONTEXT_E_NOTRANSACTION;
    public static HResults CO_E_THREADINGMODEL_CHANGED;
    public static HResults CO_E_NOIISINTRINSICS;
    public static HResults CO_E_NOCOOKIES;
    public static HResults CO_E_DBERROR;
    public static HResults CO_E_NOTPOOLED;
    public static HResults CO_E_NOTCONSTRUCTED;
    public static HResults CO_E_NOSYNCHRONIZATION;
    public static HResults CO_E_ISOLEVELMISMATCH;
    public static HResults OLE_S_USEREG;
    public static HResults OLE_S_STATIC;
    public static HResults OLE_S_MAC_CLIPFORMAT;
    public static HResults DRAGDROP_S_DROP;
    public static HResults DRAGDROP_S_CANCEL;
    public static HResults DRAGDROP_S_USEDEFAULTCURSORS;
    public static HResults DATA_S_SAMEFORMATETC;
    public static HResults VIEW_S_ALREADY_FROZEN;
    public static HResults CACHE_S_FORMATETC_NOTSUPPORTED;
    public static HResults CACHE_S_SAMECACHE;
    public static HResults CACHE_S_SOMECACHES_NOTUPDATED;
    public static HResults OLEOBJ_S_INVALIDVERB;
    public static HResults OLEOBJ_S_CANNOT_DOVERB_NOW;
    public static HResults OLEOBJ_S_INVALIDHWND;
    public static HResults INPLACE_S_TRUNCATED;
    public static HResults CONVERT10_S_NO_PRESENTATION;
    public static HResults MK_S_REDUCED_TO_SELF;
    public static HResults MK_S_ME;
    public static HResults MK_S_HIM;
    public static HResults MK_S_US;
    public static HResults MK_S_MONIKERALREADYREGISTERED;
    public static HResults SCHED_S_TASK_READY;
    public static HResults SCHED_S_TASK_RUNNING;
    public static HResults SCHED_S_TASK_DISABLED;
    public static HResults SCHED_S_TASK_HAS_NOT_RUN;
    public static HResults SCHED_S_TASK_NO_MORE_RUNS;
    public static HResults SCHED_S_TASK_NOT_SCHEDULED;
    public static HResults SCHED_S_TASK_TERMINATED;
    public static HResults SCHED_S_TASK_NO_VALID_TRIGGERS;
    public static HResults SCHED_S_EVENT_TRIGGER;
    public static HResults SCHED_E_TRIGGER_NOT_FOUND;
    public static HResults SCHED_E_TASK_NOT_READY;
    public static HResults SCHED_E_TASK_NOT_RUNNING;
    public static HResults SCHED_E_SERVICE_NOT_INSTALLED;
    public static HResults SCHED_E_CANNOT_OPEN_TASK;
    public static HResults SCHED_E_INVALID_TASK;
    public static HResults SCHED_E_ACCOUNT_INFORMATION_NOT_SET;
    public static HResults SCHED_E_ACCOUNT_NAME_NOT_FOUND;
    public static HResults SCHED_E_ACCOUNT_DBASE_CORRUPT;
    public static HResults SCHED_E_NO_SECURITY_SERVICES;
    public static HResults SCHED_E_UNKNOWN_OBJECT_VERSION;
    public static HResults SCHED_E_UNSUPPORTED_ACCOUNT_OPTION;
    public static HResults SCHED_E_SERVICE_NOT_RUNNING;
    public static HResults CO_E_CLASS_CREATE_FAILED;
    public static HResults CO_E_SCM_ERROR;
    public static HResults CO_E_SCM_RPC_FAILURE;
    public static HResults CO_E_BAD_PATH;
    public static HResults CO_E_SERVER_EXEC_FAILURE;
    public static HResults CO_E_OBJSRV_RPC_FAILURE;
    public static HResults MK_E_NO_NORMALIZED;
    public static HResults CO_E_SERVER_STOPPING;
    public static HResults MEM_E_INVALID_ROOT;
    public static HResults MEM_E_INVALID_LINK;
    public static HResults MEM_E_INVALID_SIZE;
    public static HResults CO_S_NOTALLINTERFACES;
    public static HResults CO_S_MACHINENAMENOTFOUND;
    public static HResults DISP_E_UNKNOWNINTERFACE;
    public static HResults DISP_E_MEMBERNOTFOUND;
    public static HResults DISP_E_PARAMNOTFOUND;
    public static HResults DISP_E_TYPEMISMATCH;
    public static HResults DISP_E_UNKNOWNNAME;
    public static HResults DISP_E_NONAMEDARGS;
    public static HResults DISP_E_BADVARTYPE;
    public static HResults DISP_E_EXCEPTION;
    public static HResults DISP_E_OVERFLOW;
    public static HResults DISP_E_BADINDEX;
    public static HResults DISP_E_UNKNOWNLCID;
    public static HResults DISP_E_ARRAYISLOCKED;
    public static HResults DISP_E_BADPARAMCOUNT;
    public static HResults DISP_E_PARAMNOTOPTIONAL;
    public static HResults DISP_E_BADCALLEE;
    public static HResults DISP_E_NOTACOLLECTION;
    public static HResults DISP_E_DIVBYZERO;
    public static HResults DISP_E_BUFFERTOOSMALL;
    public static HResults TYPE_E_BUFFERTOOSMALL;
    public static HResults TYPE_E_FIELDNOTFOUND;
    public static HResults TYPE_E_INVDATAREAD;
    public static HResults TYPE_E_UNSUPFORMAT;
    public static HResults TYPE_E_REGISTRYACCESS;
    public static HResults TYPE_E_LIBNOTREGISTERED;
    public static HResults TYPE_E_UNDEFINEDTYPE;
    public static HResults TYPE_E_QUALIFIEDNAMEDISALLOWED;
    public static HResults TYPE_E_INVALIDSTATE;
    public static HResults TYPE_E_WRONGTYPEKIND;
    public static HResults TYPE_E_ELEMENTNOTFOUND;
    public static HResults TYPE_E_AMBIGUOUSNAME;
    public static HResults TYPE_E_NAMECONFLICT;
    public static HResults TYPE_E_UNKNOWNLCID;
    public static HResults TYPE_E_DLLFUNCTIONNOTFOUND;
    public static HResults TYPE_E_BADMODULEKIND;
    public static HResults TYPE_E_SIZETOOBIG;
    public static HResults TYPE_E_DUPLICATEID;
    public static HResults TYPE_E_INVALIDID;
    public static HResults TYPE_E_TYPEMISMATCH;
    public static HResults TYPE_E_OUTOFBOUNDS;
    public static HResults TYPE_E_IOERROR;
    public static HResults TYPE_E_CANTCREATETMPFILE;
    public static HResults TYPE_E_CANTLOADLIBRARY;
    public static HResults TYPE_E_INCONSISTENTPROPFUNCS;
    public static HResults TYPE_E_CIRCULARTYPE;
    public static HResults STG_E_INVALIDFUNCTION;
    public static HResults STG_E_FILENOTFOUND;
    public static HResults STG_E_PATHNOTFOUND;
    public static HResults STG_E_TOOMANYOPENFILES;
    public static HResults STG_E_ACCESSDENIED;
    public static HResults STG_E_INVALIDHANDLE;
    public static HResults STG_E_INSUFFICIENTMEMORY;
    public static HResults STG_E_INVALIDPOINTER;
    public static HResults STG_E_NOMOREFILES;
    public static HResults STG_E_DISKISWRITEPROTECTED;
    public static HResults STG_E_SEEKERROR;
    public static HResults STG_E_WRITEFAULT;
    public static HResults STG_E_READFAULT;
    public static HResults STG_E_SHAREVIOLATION;
    public static HResults STG_E_LOCKVIOLATION;
    public static HResults STG_E_FILEALREADYEXISTS;
    public static HResults STG_E_INVALIDPARAMETER;
    public static HResults STG_E_MEDIUMFULL;
    public static HResults STG_E_PROPSETMISMATCHED;
    public static HResults STG_E_ABNORMALAPIEXIT;
    public static HResults STG_E_INVALIDHEADER;
    public static HResults STG_E_INVALIDNAME;
    public static HResults STG_E_UNKNOWN;
    public static HResults STG_E_UNIMPLEMENTEDFUNCTION;
    public static HResults STG_E_INVALIDFLAG;
    public static HResults STG_E_INUSE;
    public static HResults STG_E_NOTCURRENT;
    public static HResults STG_E_REVERTED;
    public static HResults STG_E_CANTSAVE;
    public static HResults STG_E_OLDFORMAT;
    public static HResults STG_E_OLDDLL;
    public static HResults STG_E_SHAREREQUIRED;
    public static HResults STG_E_NOTFILEBASEDSTORAGE;
    public static HResults STG_E_EXTANTMARSHALLINGS;
    public static HResults STG_E_DOCFILECORRUPT;
    public static HResults STG_E_BADBASEADDRESS;
    public static HResults STG_E_DOCFILETOOLARGE;
    public static HResults STG_E_NOTSIMPLEFORMAT;
    public static HResults STG_E_INCOMPLETE;
    public static HResults STG_E_TERMINATED;
    public static HResults STG_S_CONVERTED;
    public static HResults STG_S_BLOCK;
    public static HResults STG_S_RETRYNOW;
    public static HResults STG_S_MONITORING;
    public static HResults STG_S_MULTIPLEOPENS;
    public static HResults STG_S_CONSOLIDATIONFAILED;
    public static HResults STG_S_CANNOTCONSOLIDATE;
    public static HResults STG_E_STATUS_COPY_PROTECTION_FAILURE;
    public static HResults STG_E_CSS_AUTHENTICATION_FAILURE;
    public static HResults STG_E_CSS_KEY_NOT_PRESENT;
    public static HResults STG_E_CSS_KEY_NOT_ESTABLISHED;
    public static HResults STG_E_CSS_SCRAMBLED_SECTOR;
    public static HResults STG_E_CSS_REGION_MISMATCH;
    public static HResults STG_E_RESETS_EXHAUSTED;
    public static HResults SEC_E_BADTRUSTEEID;
    public static HResults SEC_E_INVALIDACCESSENTRY;
    public static HResults SEC_E_INVALIDACCESSENTRYLIST;
    public static HResults SEC_E_INVALIDOBJECT;
    public static HResults SEC_E_INVALIDOWNER;
    public static HResults SEC_E_NOMEMBERSHIPSUPPORT;
    public static HResults SEC_E_NOOWNER;
    public static HResults SEC_E_NOTRUSTEEID;
    public static HResults RPC_E_CALL_REJECTED;
    public static HResults RPC_E_CALL_CANCELED;
    public static HResults RPC_E_CANTPOST_INSENDCALL;
    public static HResults RPC_E_CANTCALLOUT_INASYNCCALL;
    public static HResults RPC_E_CANTCALLOUT_INEXTERNALCALL;
    public static HResults RPC_E_CONNECTION_TERMINATED;
    public static HResults RPC_E_SERVER_DIED;
    public static HResults RPC_E_CLIENT_DIED;
    public static HResults RPC_E_INVALID_DATAPACKET;
    public static HResults RPC_E_CANTTRANSMIT_CALL;
    public static HResults RPC_E_CLIENT_CANTMARSHAL_DATA;
    public static HResults RPC_E_CLIENT_CANTUNMARSHAL_DATA;
    public static HResults RPC_E_SERVER_CANTMARSHAL_DATA;
    public static HResults RPC_E_SERVER_CANTUNMARSHAL_DATA;
    public static HResults RPC_E_INVALID_DATA;
    public static HResults RPC_E_INVALID_PARAMETER;
    public static HResults RPC_E_CANTCALLOUT_AGAIN;
    public static HResults RPC_E_SERVER_DIED_DNE;
    public static HResults RPC_E_SYS_CALL_FAILED;
    public static HResults RPC_E_OUT_OF_RESOURCES;
    public static HResults RPC_E_ATTEMPTED_MULTITHREAD;
    public static HResults RPC_E_NOT_REGISTERED;
    public static HResults RPC_E_FAULT;
    public static HResults RPC_E_SERVERFAULT;
    public static HResults RPC_E_CHANGED_MODE;
    public static HResults RPC_E_INVALIDMETHOD;
    public static HResults RPC_E_DISCONNECTED;
    public static HResults RPC_E_RETRY;
    public static HResults RPC_E_SERVERCALL_RETRYLATER;
    public static HResults RPC_E_SERVERCALL_REJECTED;
    public static HResults RPC_E_INVALID_CALLDATA;
    public static HResults RPC_E_CANTCALLOUT_ININPUTSYNCCALL;
    public static HResults RPC_E_WRONG_THREAD;
    public static HResults RPC_E_THREAD_NOT_INIT;
    public static HResults RPC_E_VERSION_MISMATCH;
    public static HResults RPC_E_INVALID_HEADER;
    public static HResults RPC_E_INVALID_EXTENSION;
    public static HResults RPC_E_INVALID_IPID;
    public static HResults RPC_E_INVALID_OBJECT;
    public static HResults RPC_S_CALLPENDING;
    public static HResults RPC_S_WAITONTIMER;
    public static HResults RPC_E_CALL_COMPLETE;
    public static HResults RPC_E_UNSECURE_CALL;
    public static HResults RPC_E_TOO_LATE;
    public static HResults RPC_E_NO_GOOD_SECURITY_PACKAGES;
    public static HResults RPC_E_ACCESS_DENIED;
    public static HResults RPC_E_REMOTE_DISABLED;
    public static HResults RPC_E_INVALID_OBJREF;
    public static HResults RPC_E_NO_CONTEXT;
    public static HResults RPC_E_TIMEOUT;
    public static HResults RPC_E_NO_SYNC;
    public static HResults RPC_E_FULLSIC_REQUIRED;
    public static HResults RPC_E_INVALID_STD_NAME;
    public static HResults CO_E_FAILEDTOIMPERSONATE;
    public static HResults CO_E_FAILEDTOGETSECCTX;
    public static HResults CO_E_FAILEDTOOPENTHREADTOKEN;
    public static HResults CO_E_FAILEDTOGETTOKENINFO;
    public static HResults CO_E_TRUSTEEDOESNTMATCHCLIENT;
    public static HResults CO_E_FAILEDTOQUERYCLIENTBLANKET;
    public static HResults CO_E_FAILEDTOSETDACL;
    public static HResults CO_E_ACCESSCHECKFAILED;
    public static HResults CO_E_NETACCESSAPIFAILED;
    public static HResults CO_E_WRONGTRUSTEENAMESYNTAX;
    public static HResults CO_E_INVALIDSID;
    public static HResults CO_E_CONVERSIONFAILED;
    public static HResults CO_E_NOMATCHINGSIDFOUND;
    public static HResults CO_E_LOOKUPACCSIDFAILED;
    public static HResults CO_E_NOMATCHINGNAMEFOUND;
    public static HResults CO_E_LOOKUPACCNAMEFAILED;
    public static HResults CO_E_SETSERLHNDLFAILED;
    public static HResults CO_E_FAILEDTOGETWINDIR;
    public static HResults CO_E_PATHTOOLONG;
    public static HResults CO_E_FAILEDTOGENUUID;
    public static HResults CO_E_FAILEDTOCREATEFILE;
    public static HResults CO_E_FAILEDTOCLOSEHANDLE;
    public static HResults CO_E_EXCEEDSYSACLLIMIT;
    public static HResults CO_E_ACESINWRONGORDER;
    public static HResults CO_E_INCOMPATIBLESTREAMVERSION;
    public static HResults CO_E_FAILEDTOOPENPROCESSTOKEN;
    public static HResults CO_E_DECODEFAILED;
    public static HResults CO_E_ACNOTINITIALIZED;
    public static HResults CO_E_CANCEL_DISABLED;
    public static HResults RPC_E_UNEXPECTED;
    public static HResults ERROR_AUDITING_DISABLED;
    public static HResults ERROR_ALL_SIDS_FILTERED;
    public static HResults NTE_BAD_UID;
    public static HResults NTE_BAD_HASH;
    public static HResults NTE_BAD_KEY;
    public static HResults NTE_BAD_LEN;
    public static HResults NTE_BAD_DATA;
    public static HResults NTE_BAD_SIGNATURE;
    public static HResults NTE_BAD_VER;
    public static HResults NTE_BAD_ALGID;
    public static HResults NTE_BAD_FLAGS;
    public static HResults NTE_BAD_TYPE;
    public static HResults NTE_BAD_KEY_STATE;
    public static HResults NTE_BAD_HASH_STATE;
    public static HResults NTE_NO_KEY;
    public static HResults NTE_NO_MEMORY;
    public static HResults NTE_EXISTS;
    public static HResults NTE_PERM;
    public static HResults NTE_NOT_FOUND;
    public static HResults NTE_DOUBLE_ENCRYPT;
    public static HResults NTE_BAD_PROVIDER;
    public static HResults NTE_BAD_PROV_TYPE;
    public static HResults NTE_BAD_PUBLIC_KEY;
    public static HResults NTE_BAD_KEYSET;
    public static HResults NTE_PROV_TYPE_NOT_DEF;
    public static HResults NTE_PROV_TYPE_ENTRY_BAD;
    public static HResults NTE_KEYSET_NOT_DEF;
    public static HResults NTE_KEYSET_ENTRY_BAD;
    public static HResults NTE_PROV_TYPE_NO_MATCH;
    public static HResults NTE_SIGNATURE_FILE_BAD;
    public static HResults NTE_PROVIDER_DLL_FAIL;
    public static HResults NTE_PROV_DLL_NOT_FOUND;
    public static HResults NTE_BAD_KEYSET_PARAM;
    public static HResults NTE_FAIL;
    public static HResults NTE_SYS_ERR;
    public static HResults NTE_SILENT_CONTEXT;
    public static HResults NTE_TOKEN_KEYSET_STORAGE_FULL;
    public static HResults NTE_TEMPORARY_PROFILE;
    public static HResults NTE_FIXEDPARAMETER;
    public static HResults SEC_E_INSUFFICIENT_MEMORY;
    public static HResults SEC_E_INVALID_HANDLE;
    public static HResults SEC_E_UNSUPPORTED_FUNCTION;
    public static HResults SEC_E_TARGET_UNKNOWN;
    public static HResults SEC_E_INTERNAL_ERROR;
    public static HResults SEC_E_SECPKG_NOT_FOUND;
    public static HResults SEC_E_NOT_OWNER;
    public static HResults SEC_E_CANNOT_INSTALL;
    public static HResults SEC_E_INVALID_TOKEN;
    public static HResults SEC_E_CANNOT_PACK;
    public static HResults SEC_E_QOP_NOT_SUPPORTED;
    public static HResults SEC_E_NO_IMPERSONATION;
    public static HResults SEC_E_LOGON_DENIED;
    public static HResults SEC_E_UNKNOWN_CREDENTIALS;
    public static HResults SEC_E_NO_CREDENTIALS;
    public static HResults SEC_E_MESSAGE_ALTERED;
    public static HResults SEC_E_OUT_OF_SEQUENCE;
    public static HResults SEC_E_NO_AUTHENTICATING_AUTHORITY;
    public static HResults SEC_I_CONTINUE_NEEDED;
    public static HResults SEC_I_COMPLETE_NEEDED;
    public static HResults SEC_I_COMPLETE_AND_CONTINUE;
    public static HResults SEC_I_LOCAL_LOGON;
    public static HResults SEC_E_BAD_PKGID;
    public static HResults SEC_E_CONTEXT_EXPIRED;
    public static HResults SEC_I_CONTEXT_EXPIRED;
    public static HResults SEC_E_INCOMPLETE_MESSAGE;
    public static HResults SEC_E_INCOMPLETE_CREDENTIALS;
    public static HResults SEC_E_BUFFER_TOO_SMALL;
    public static HResults SEC_I_INCOMPLETE_CREDENTIALS;
    public static HResults SEC_I_RENEGOTIATE;
    public static HResults SEC_E_WRONG_PRINCIPAL;
    public static HResults SEC_I_NO_LSA_CONTEXT;
    public static HResults SEC_E_TIME_SKEW;
    public static HResults SEC_E_UNTRUSTED_ROOT;
    public static HResults SEC_E_ILLEGAL_MESSAGE;
    public static HResults SEC_E_CERT_UNKNOWN;
    public static HResults SEC_E_CERT_EXPIRED;
    public static HResults SEC_E_ENCRYPT_FAILURE;
    public static HResults SEC_E_DECRYPT_FAILURE;
    public static HResults SEC_E_ALGORITHM_MISMATCH;
    public static HResults SEC_E_SECURITY_QOS_FAILED;
    public static HResults SEC_E_UNFINISHED_CONTEXT_DELETED;
    public static HResults SEC_E_NO_TGT_REPLY;
    public static HResults SEC_E_NO_IP_ADDRESSES;
    public static HResults SEC_E_WRONG_CREDENTIAL_HANDLE;
    public static HResults SEC_E_CRYPTO_SYSTEM_INVALID;
    public static HResults SEC_E_MAX_REFERRALS_EXCEEDED;
    public static HResults SEC_E_MUST_BE_KDC;
    public static HResults SEC_E_STRONG_CRYPTO_NOT_SUPPORTED;
    public static HResults SEC_E_TOO_MANY_PRINCIPALS;
    public static HResults SEC_E_NO_PA_DATA;
    public static HResults SEC_E_PKINIT_NAME_MISMATCH;
    public static HResults SEC_E_SMARTCARD_LOGON_REQUIRED;
    public static HResults SEC_E_SHUTDOWN_IN_PROGRESS;
    public static HResults SEC_E_KDC_INVALID_REQUEST;
    public static HResults SEC_E_KDC_UNABLE_TO_REFER;
    public static HResults SEC_E_KDC_UNKNOWN_ETYPE;
    public static HResults SEC_E_UNSUPPORTED_PREAUTH;
    public static HResults SEC_E_DELEGATION_REQUIRED;
    public static HResults SEC_E_BAD_BINDINGS;
    public static HResults SEC_E_MULTIPLE_ACCOUNTS;
    public static HResults SEC_E_NO_KERB_KEY;
    public static HResults SEC_E_CERT_WRONG_USAGE;
    public static HResults SEC_E_DOWNGRADE_DETECTED;
    public static HResults SEC_E_SMARTCARD_CERT_REVOKED;
    public static HResults SEC_E_ISSUING_CA_UNTRUSTED;
    public static HResults SEC_E_REVOCATION_OFFLINE_C;
    public static HResults SEC_E_PKINIT_CLIENT_FAILURE;
    public static HResults SEC_E_SMARTCARD_CERT_EXPIRED;
    public static HResults SEC_E_NO_S4U_PROT_SUPPORT;
    public static HResults SEC_E_CROSSREALM_DELEGATION_FAILURE;
    public static HResults SEC_E_REVOCATION_OFFLINE_KDC;
    public static HResults SEC_E_ISSUING_CA_UNTRUSTED_KDC;
    public static HResults SEC_E_KDC_CERT_EXPIRED;
    public static HResults SEC_E_KDC_CERT_REVOKED;
    public static HResults SEC_E_NO_SPM;
    public static HResults SEC_E_NOT_SUPPORTED;
    public static HResults CRYPT_E_MSG_ERROR;
    public static HResults CRYPT_E_UNKNOWN_ALGO;
    public static HResults CRYPT_E_OID_FORMAT;
    public static HResults CRYPT_E_INVALID_MSG_TYPE;
    public static HResults CRYPT_E_UNEXPECTED_ENCODING;
    public static HResults CRYPT_E_AUTH_ATTR_MISSING;
    public static HResults CRYPT_E_HASH_VALUE;
    public static HResults CRYPT_E_INVALID_INDEX;
    public static HResults CRYPT_E_ALREADY_DECRYPTED;
    public static HResults CRYPT_E_NOT_DECRYPTED;
    public static HResults CRYPT_E_RECIPIENT_NOT_FOUND;
    public static HResults CRYPT_E_CONTROL_TYPE;
    public static HResults CRYPT_E_ISSUER_SERIALNUMBER;
    public static HResults CRYPT_E_SIGNER_NOT_FOUND;
    public static HResults CRYPT_E_ATTRIBUTES_MISSING;
    public static HResults CRYPT_E_STREAM_MSG_NOT_READY;
    public static HResults CRYPT_E_STREAM_INSUFFICIENT_DATA;
    public static HResults CRYPT_I_NEW_PROTECTION_REQUIRED;
    public static HResults CRYPT_E_BAD_LEN;
    public static HResults CRYPT_E_BAD_ENCODE;
    public static HResults CRYPT_E_FILE_ERROR;
    public static HResults CRYPT_E_NOT_FOUND;
    public static HResults CRYPT_E_EXISTS;
    public static HResults CRYPT_E_NO_PROVIDER;
    public static HResults CRYPT_E_SELF_SIGNED;
    public static HResults CRYPT_E_DELETED_PREV;
    public static HResults CRYPT_E_NO_MATCH;
    public static HResults CRYPT_E_UNEXPECTED_MSG_TYPE;
    public static HResults CRYPT_E_NO_KEY_PROPERTY;
    public static HResults CRYPT_E_NO_DECRYPT_CERT;
    public static HResults CRYPT_E_BAD_MSG;
    public static HResults CRYPT_E_NO_SIGNER;
    public static HResults CRYPT_E_PENDING_CLOSE;
    public static HResults CRYPT_E_REVOKED;
    public static HResults CRYPT_E_NO_REVOCATION_DLL;
    public static HResults CRYPT_E_NO_REVOCATION_CHECK;
    public static HResults CRYPT_E_REVOCATION_OFFLINE;
    public static HResults CRYPT_E_NOT_IN_REVOCATION_DATABASE;
    public static HResults CRYPT_E_INVALID_NUMERIC_STRING;
    public static HResults CRYPT_E_INVALID_PRINTABLE_STRING;
    public static HResults CRYPT_E_INVALID_IA5_STRING;
    public static HResults CRYPT_E_INVALID_X500_STRING;
    public static HResults CRYPT_E_NOT_CHAR_STRING;
    public static HResults CRYPT_E_FILERESIZED;
    public static HResults CRYPT_E_SECURITY_SETTINGS;
    public static HResults CRYPT_E_NO_VERIFY_USAGE_DLL;
    public static HResults CRYPT_E_NO_VERIFY_USAGE_CHECK;
    public static HResults CRYPT_E_VERIFY_USAGE_OFFLINE;
    public static HResults CRYPT_E_NOT_IN_CTL;
    public static HResults CRYPT_E_NO_TRUSTED_SIGNER;
    public static HResults CRYPT_E_MISSING_PUBKEY_PARA;
    public static HResults CRYPT_E_OSS_ERROR;
    public static HResults OSS_MORE_BUF;
    public static HResults OSS_NEGATIVE_UINTEGER;
    public static HResults OSS_PDU_RANGE;
    public static HResults OSS_MORE_INPUT;
    public static HResults OSS_DATA_ERROR;
    public static HResults OSS_BAD_ARG;
    public static HResults OSS_BAD_VERSION;
    public static HResults OSS_OUT_MEMORY;
    public static HResults OSS_PDU_MISMATCH;
    public static HResults OSS_LIMITED;
    public static HResults OSS_BAD_PTR;
    public static HResults OSS_BAD_TIME;
    public static HResults OSS_INDEFINITE_NOT_SUPPORTED;
    public static HResults OSS_MEM_ERROR;
    public static HResults OSS_BAD_TABLE;
    public static HResults OSS_TOO_LONG;
    public static HResults OSS_CONSTRAINT_VIOLATED;
    public static HResults OSS_FATAL_ERROR;
    public static HResults OSS_ACCESS_SERIALIZATION_ERROR;
    public static HResults OSS_NULL_TBL;
    public static HResults OSS_NULL_FCN;
    public static HResults OSS_BAD_ENCRULES;
    public static HResults OSS_UNAVAIL_ENCRULES;
    public static HResults OSS_CANT_OPEN_TRACE_WINDOW;
    public static HResults OSS_UNIMPLEMENTED;
    public static HResults OSS_OID_DLL_NOT_LINKED;
    public static HResults OSS_CANT_OPEN_TRACE_FILE;
    public static HResults OSS_TRACE_FILE_ALREADY_OPEN;
    public static HResults OSS_TABLE_MISMATCH;
    public static HResults OSS_TYPE_NOT_SUPPORTED;
    public static HResults OSS_REAL_DLL_NOT_LINKED;
    public static HResults OSS_REAL_CODE_NOT_LINKED;
    public static HResults OSS_OUT_OF_RANGE;
    public static HResults OSS_COPIER_DLL_NOT_LINKED;
    public static HResults OSS_CONSTRAINT_DLL_NOT_LINKED;
    public static HResults OSS_COMPARATOR_DLL_NOT_LINKED;
    public static HResults OSS_COMPARATOR_CODE_NOT_LINKED;
    public static HResults OSS_MEM_MGR_DLL_NOT_LINKED;
    public static HResults OSS_PDV_DLL_NOT_LINKED;
    public static HResults OSS_PDV_CODE_NOT_LINKED;
    public static HResults OSS_API_DLL_NOT_LINKED;
    public static HResults OSS_BERDER_DLL_NOT_LINKED;
    public static HResults OSS_PER_DLL_NOT_LINKED;
    public static HResults OSS_OPEN_TYPE_ERROR;
    public static HResults OSS_MUTEX_NOT_CREATED;
    public static HResults OSS_CANT_CLOSE_TRACE_FILE;
    public static HResults CRYPT_E_ASN1_ERROR;
    public static HResults CRYPT_E_ASN1_INTERNAL;
    public static HResults CRYPT_E_ASN1_EOD;
    public static HResults CRYPT_E_ASN1_CORRUPT;
    public static HResults CRYPT_E_ASN1_LARGE;
    public static HResults CRYPT_E_ASN1_CONSTRAINT;
    public static HResults CRYPT_E_ASN1_MEMORY;
    public static HResults CRYPT_E_ASN1_OVERFLOW;
    public static HResults CRYPT_E_ASN1_BADPDU;
    public static HResults CRYPT_E_ASN1_BADARGS;
    public static HResults CRYPT_E_ASN1_BADREAL;
    public static HResults CRYPT_E_ASN1_BADTAG;
    public static HResults CRYPT_E_ASN1_CHOICE;
    public static HResults CRYPT_E_ASN1_RULE;
    public static HResults CRYPT_E_ASN1_UTF8;
    public static HResults CRYPT_E_ASN1_PDU_TYPE;
    public static HResults CRYPT_E_ASN1_NYI;
    public static HResults CRYPT_E_ASN1_EXTENDED;
    public static HResults CRYPT_E_ASN1_NOEOD;
    public static HResults CERTSRV_E_BAD_REQUESTSUBJECT;
    public static HResults CERTSRV_E_NO_REQUEST;
    public static HResults CERTSRV_E_BAD_REQUESTSTATUS;
    public static HResults CERTSRV_E_PROPERTY_EMPTY;
    public static HResults CERTSRV_E_INVALID_CA_CERTIFICATE;
    public static HResults CERTSRV_E_SERVER_SUSPENDED;
    public static HResults CERTSRV_E_ENCODING_LENGTH;
    public static HResults CERTSRV_E_ROLECONFLICT;
    public static HResults CERTSRV_E_RESTRICTEDOFFICER;
    public static HResults CERTSRV_E_KEY_ARCHIVAL_NOT_CONFIGURED;
    public static HResults CERTSRV_E_NO_VALID_KRA;
    public static HResults CERTSRV_E_BAD_REQUEST_KEY_ARCHIVAL;
    public static HResults CERTSRV_E_NO_CAADMIN_DEFINED;
    public static HResults CERTSRV_E_BAD_RENEWAL_CERT_ATTRIBUTE;
    public static HResults CERTSRV_E_NO_DB_SESSIONS;
    public static HResults CERTSRV_E_ALIGNMENT_FAULT;
    public static HResults CERTSRV_E_ENROLL_DENIED;
    public static HResults CERTSRV_E_TEMPLATE_DENIED;
    public static HResults CERTSRV_E_DOWNLEVEL_DC_SSL_OR_UPGRADE;
    public static HResults CERTSRV_E_UNSUPPORTED_CERT_TYPE;
    public static HResults CERTSRV_E_NO_CERT_TYPE;
    public static HResults CERTSRV_E_TEMPLATE_CONFLICT;
    public static HResults CERTSRV_E_SUBJECT_ALT_NAME_REQUIRED;
    public static HResults CERTSRV_E_ARCHIVED_KEY_REQUIRED;
    public static HResults CERTSRV_E_SMIME_REQUIRED;
    public static HResults CERTSRV_E_BAD_RENEWAL_SUBJECT;
    public static HResults CERTSRV_E_BAD_TEMPLATE_VERSION;
    public static HResults CERTSRV_E_TEMPLATE_POLICY_REQUIRED;
    public static HResults CERTSRV_E_SIGNATURE_POLICY_REQUIRED;
    public static HResults CERTSRV_E_SIGNATURE_COUNT;
    public static HResults CERTSRV_E_SIGNATURE_REJECTED;
    public static HResults CERTSRV_E_ISSUANCE_POLICY_REQUIRED;
    public static HResults CERTSRV_E_SUBJECT_UPN_REQUIRED;
    public static HResults CERTSRV_E_SUBJECT_DIRECTORY_GUID_REQUIRED;
    public static HResults CERTSRV_E_SUBJECT_DNS_REQUIRED;
    public static HResults CERTSRV_E_ARCHIVED_KEY_UNEXPECTED;
    public static HResults CERTSRV_E_KEY_LENGTH;
    public static HResults CERTSRV_E_SUBJECT_EMAIL_REQUIRED;
    public static HResults CERTSRV_E_UNKNOWN_CERT_TYPE;
    public static HResults CERTSRV_E_CERT_TYPE_OVERLAP;
    public static HResults XENROLL_E_KEY_NOT_EXPORTABLE;
    public static HResults XENROLL_E_CANNOT_ADD_ROOT_CERT;
    public static HResults XENROLL_E_RESPONSE_KA_HASH_NOT_FOUND;
    public static HResults XENROLL_E_RESPONSE_UNEXPECTED_KA_HASH;
    public static HResults XENROLL_E_RESPONSE_KA_HASH_MISMATCH;
    public static HResults XENROLL_E_KEYSPEC_SMIME_MISMATCH;
    public static HResults TRUST_E_SYSTEM_ERROR;
    public static HResults TRUST_E_NO_SIGNER_CERT;
    public static HResults TRUST_E_COUNTER_SIGNER;
    public static HResults TRUST_E_CERT_SIGNATURE;
    public static HResults TRUST_E_TIME_STAMP;
    public static HResults TRUST_E_BAD_DIGEST;
    public static HResults TRUST_E_BASIC_CONSTRAINTS;
    public static HResults TRUST_E_FINANCIAL_CRITERIA;
    public static HResults MSSIPOTF_E_OUTOFMEMRANGE;
    public static HResults MSSIPOTF_E_CANTGETOBJECT;
    public static HResults MSSIPOTF_E_NOHEADTABLE;
    public static HResults MSSIPOTF_E_BAD_MAGICNUMBER;
    public static HResults MSSIPOTF_E_BAD_OFFSET_TABLE;
    public static HResults MSSIPOTF_E_TABLE_TAGORDER;
    public static HResults MSSIPOTF_E_TABLE_LONGWORD;
    public static HResults MSSIPOTF_E_BAD_FIRST_TABLE_PLACEMENT;
    public static HResults MSSIPOTF_E_TABLES_OVERLAP;
    public static HResults MSSIPOTF_E_TABLE_PADBYTES;
    public static HResults MSSIPOTF_E_FILETOOSMALL;
    public static HResults MSSIPOTF_E_TABLE_CHECKSUM;
    public static HResults MSSIPOTF_E_FILE_CHECKSUM;
    public static HResults MSSIPOTF_E_FAILED_POLICY;
    public static HResults MSSIPOTF_E_FAILED_HINTS_CHECK;
    public static HResults MSSIPOTF_E_NOT_OPENTYPE;
    public static HResults MSSIPOTF_E_FILE;
    public static HResults MSSIPOTF_E_CRYPT;
    public static HResults MSSIPOTF_E_BADVERSION;
    public static HResults MSSIPOTF_E_DSIG_STRUCTURE;
    public static HResults MSSIPOTF_E_PCONST_CHECK;
    public static HResults MSSIPOTF_E_STRUCTURE;
    public static HResults NTE_OP_OK;
    public static HResults TRUST_E_PROVIDER_UNKNOWN;
    public static HResults TRUST_E_ACTION_UNKNOWN;
    public static HResults TRUST_E_SUBJECT_FORM_UNKNOWN;
    public static HResults TRUST_E_SUBJECT_NOT_TRUSTED;
    public static HResults DIGSIG_E_ENCODE;
    public static HResults DIGSIG_E_DECODE;
    public static HResults DIGSIG_E_EXTENSIBILITY;
    public static HResults DIGSIG_E_CRYPTO;
    public static HResults PERSIST_E_SIZEDEFINITE;
    public static HResults PERSIST_E_SIZEINDEFINITE;
    public static HResults PERSIST_E_NOTSELFSIZING;
    public static HResults TRUST_E_NOSIGNATURE;
    public static HResults CERT_E_EXPIRED;
    public static HResults CERT_E_VALIDITYPERIODNESTING;
    public static HResults CERT_E_ROLE;
    public static HResults CERT_E_PATHLENCONST;
    public static HResults CERT_E_CRITICAL;
    public static HResults CERT_E_PURPOSE;
    public static HResults CERT_E_ISSUERCHAINING;
    public static HResults CERT_E_MALFORMED;
    public static HResults CERT_E_UNTRUSTEDROOT;
    public static HResults CERT_E_CHAINING;
    public static HResults TRUST_E_FAIL;
    public static HResults CERT_E_REVOKED;
    public static HResults CERT_E_UNTRUSTEDTESTROOT;
    public static HResults CERT_E_REVOCATION_FAILURE;
    public static HResults CERT_E_CN_NO_MATCH;
    public static HResults CERT_E_WRONG_USAGE;
    public static HResults TRUST_E_EXPLICIT_DISTRUST;
    public static HResults CERT_E_UNTRUSTEDCA;
    public static HResults CERT_E_INVALID_POLICY;
    public static HResults CERT_E_INVALID_NAME;
    public static HResults SPAPI_E_EXPECTED_SECTION_NAME;
    public static HResults SPAPI_E_BAD_SECTION_NAME_LINE;
    public static HResults SPAPI_E_SECTION_NAME_TOO_LONG;
    public static HResults SPAPI_E_GENERAL_SYNTAX;
    public static HResults SPAPI_E_WRONG_INF_STYLE;
    public static HResults SPAPI_E_SECTION_NOT_FOUND;
    public static HResults SPAPI_E_LINE_NOT_FOUND;
    public static HResults SPAPI_E_NO_BACKUP;
    public static HResults SPAPI_E_NO_ASSOCIATED_CLASS;
    public static HResults SPAPI_E_CLASS_MISMATCH;
    public static HResults SPAPI_E_DUPLICATE_FOUND;
    public static HResults SPAPI_E_NO_DRIVER_SELECTED;
    public static HResults SPAPI_E_KEY_DOES_NOT_EXIST;
    public static HResults SPAPI_E_INVALID_DEVINST_NAME;
    public static HResults SPAPI_E_INVALID_CLASS;
    public static HResults SPAPI_E_DEVINST_ALREADY_EXISTS;
    public static HResults SPAPI_E_DEVINFO_NOT_REGISTERED;
    public static HResults SPAPI_E_INVALID_REG_PROPERTY;
    public static HResults SPAPI_E_NO_INF;
    public static HResults SPAPI_E_NO_SUCH_DEVINST;
    public static HResults SPAPI_E_CANT_LOAD_CLASS_ICON;
    public static HResults SPAPI_E_INVALID_CLASS_INSTALLER;
    public static HResults SPAPI_E_DI_DO_DEFAULT;
    public static HResults SPAPI_E_DI_NOFILECOPY;
    public static HResults SPAPI_E_INVALID_HWPROFILE;
    public static HResults SPAPI_E_NO_DEVICE_SELECTED;
    public static HResults SPAPI_E_DEVINFO_LIST_LOCKED;
    public static HResults SPAPI_E_DEVINFO_DATA_LOCKED;
    public static HResults SPAPI_E_DI_BAD_PATH;
    public static HResults SPAPI_E_NO_CLASSINSTALL_PARAMS;
    public static HResults SPAPI_E_FILEQUEUE_LOCKED;
    public static HResults SPAPI_E_BAD_SERVICE_INSTALLSECT;
    public static HResults SPAPI_E_NO_CLASS_DRIVER_LIST;
    public static HResults SPAPI_E_NO_ASSOCIATED_SERVICE;
    public static HResults SPAPI_E_NO_DEFAULT_DEVICE_INTERFACE;
    public static HResults SPAPI_E_DEVICE_INTERFACE_ACTIVE;
    public static HResults SPAPI_E_DEVICE_INTERFACE_REMOVED;
    public static HResults SPAPI_E_BAD_INTERFACE_INSTALLSECT;
    public static HResults SPAPI_E_NO_SUCH_INTERFACE_CLASS;
    public static HResults SPAPI_E_INVALID_REFERENCE_STRING;
    public static HResults SPAPI_E_INVALID_MACHINENAME;
    public static HResults SPAPI_E_REMOTE_COMM_FAILURE;
    public static HResults SPAPI_E_MACHINE_UNAVAILABLE;
    public static HResults SPAPI_E_NO_CONFIGMGR_SERVICES;
    public static HResults SPAPI_E_INVALID_PROPPAGE_PROVIDER;
    public static HResults SPAPI_E_NO_SUCH_DEVICE_INTERFACE;
    public static HResults SPAPI_E_DI_POSTPROCESSING_REQUIRED;
    public static HResults SPAPI_E_INVALID_COINSTALLER;
    public static HResults SPAPI_E_NO_COMPAT_DRIVERS;
    public static HResults SPAPI_E_NO_DEVICE_ICON;
    public static HResults SPAPI_E_INVALID_INF_LOGCONFIG;
    public static HResults SPAPI_E_DI_DONT_INSTALL;
    public static HResults SPAPI_E_INVALID_FILTER_DRIVER;
    public static HResults SPAPI_E_NON_WINDOWS_NT_DRIVER;
    public static HResults SPAPI_E_NON_WINDOWS_DRIVER;
    public static HResults SPAPI_E_NO_CATALOG_FOR_OEM_INF;
    public static HResults SPAPI_E_DEVINSTALL_QUEUE_NONNATIVE;
    public static HResults SPAPI_E_NOT_DISABLEABLE;
    public static HResults SPAPI_E_CANT_REMOVE_DEVINST;
    public static HResults SPAPI_E_INVALID_TARGET;
    public static HResults SPAPI_E_DRIVER_NONNATIVE;
    public static HResults SPAPI_E_IN_WOW64;
    public static HResults SPAPI_E_SET_SYSTEM_RESTORE_POINT;
    public static HResults SPAPI_E_INCORRECTLY_COPIED_INF;
    public static HResults SPAPI_E_SCE_DISABLED;
    public static HResults SPAPI_E_UNKNOWN_EXCEPTION;
    public static HResults SPAPI_E_PNP_REGISTRY_ERROR;
    public static HResults SPAPI_E_REMOTE_REQUEST_UNSUPPORTED;
    public static HResults SPAPI_E_NOT_AN_INSTALLED_OEM_INF;
    public static HResults SPAPI_E_INF_IN_USE_BY_DEVICES;
    public static HResults SPAPI_E_DI_FUNCTION_OBSOLETE;
    public static HResults SPAPI_E_NO_AUTHENTICODE_CATALOG;
    public static HResults SPAPI_E_AUTHENTICODE_DISALLOWED;
    public static HResults SPAPI_E_AUTHENTICODE_TRUSTED_PUBLISHER;
    public static HResults SPAPI_E_AUTHENTICODE_TRUST_NOT_ESTABLISHED;
    public static HResults SPAPI_E_AUTHENTICODE_PUBLISHER_NOT_TRUSTED;
    public static HResults SPAPI_E_SIGNATURE_OSATTRIBUTE_MISMATCH;
    public static HResults SPAPI_E_ONLY_VALIDATE_VIA_AUTHENTICODE;
    public static HResults SPAPI_E_UNRECOVERABLE_STACK_OVERFLOW;
    public static HResults SPAPI_E_ERROR_NOT_INSTALLED;
    public static HResults SCARD_S_SUCCESS;
    public static HResults SCARD_F_INTERNAL_ERROR;
    public static HResults SCARD_E_CANCELLED;
    public static HResults SCARD_E_INVALID_HANDLE;
    public static HResults SCARD_E_INVALID_PARAMETER;
    public static HResults SCARD_E_INVALID_TARGET;
    public static HResults SCARD_E_NO_MEMORY;
    public static HResults SCARD_F_WAITED_TOO_LONG;
    public static HResults SCARD_E_INSUFFICIENT_BUFFER;
    public static HResults SCARD_E_UNKNOWN_READER;
    public static HResults SCARD_E_TIMEOUT;
    public static HResults SCARD_E_SHARING_VIOLATION;
    public static HResults SCARD_E_NO_SMARTCARD;
    public static HResults SCARD_E_UNKNOWN_CARD;
    public static HResults SCARD_E_CANT_DISPOSE;
    public static HResults SCARD_E_PROTO_MISMATCH;
    public static HResults SCARD_E_NOT_READY;
    public static HResults SCARD_E_INVALID_VALUE;
    public static HResults SCARD_E_SYSTEM_CANCELLED;
    public static HResults SCARD_F_COMM_ERROR;
    public static HResults SCARD_F_UNKNOWN_ERROR;
    public static HResults SCARD_E_INVALID_ATR;
    public static HResults SCARD_E_NOT_TRANSACTED;
    public static HResults SCARD_E_READER_UNAVAILABLE;
    public static HResults SCARD_P_SHUTDOWN;
    public static HResults SCARD_E_PCI_TOO_SMALL;
    public static HResults SCARD_E_READER_UNSUPPORTED;
    public static HResults SCARD_E_DUPLICATE_READER;
    public static HResults SCARD_E_CARD_UNSUPPORTED;
    public static HResults SCARD_E_NO_SERVICE;
    public static HResults SCARD_E_SERVICE_STOPPED;
    public static HResults SCARD_E_UNEXPECTED;
    public static HResults SCARD_E_ICC_INSTALLATION;
    public static HResults SCARD_E_ICC_CREATEORDER;
    public static HResults SCARD_E_UNSUPPORTED_FEATURE;
    public static HResults SCARD_E_DIR_NOT_FOUND;
    public static HResults SCARD_E_FILE_NOT_FOUND;
    public static HResults SCARD_E_NO_DIR;
    public static HResults SCARD_E_NO_FILE;
    public static HResults SCARD_E_NO_ACCESS;
    public static HResults SCARD_E_WRITE_TOO_MANY;
    public static HResults SCARD_E_BAD_SEEK;
    public static HResults SCARD_E_INVALID_CHV;
    public static HResults SCARD_E_UNKNOWN_RES_MNG;
    public static HResults SCARD_E_NO_SUCH_CERTIFICATE;
    public static HResults SCARD_E_CERTIFICATE_UNAVAILABLE;
    public static HResults SCARD_E_NO_READERS_AVAILABLE;
    public static HResults SCARD_E_COMM_DATA_LOST;
    public static HResults SCARD_E_NO_KEY_CONTAINER;
    public static HResults SCARD_E_SERVER_TOO_BUSY;
    public static HResults SCARD_W_UNSUPPORTED_CARD;
    public static HResults SCARD_W_UNRESPONSIVE_CARD;
    public static HResults SCARD_W_UNPOWERED_CARD;
    public static HResults SCARD_W_RESET_CARD;
    public static HResults SCARD_W_REMOVED_CARD;
    public static HResults SCARD_W_SECURITY_VIOLATION;
    public static HResults SCARD_W_WRONG_CHV;
    public static HResults SCARD_W_CHV_BLOCKED;
    public static HResults SCARD_W_EOF;
    public static HResults SCARD_W_CANCELLED_BY_USER;
    public static HResults SCARD_W_CARD_NOT_AUTHENTICATED;
    public static HResults COMADMIN_E_OBJECTERRORS;
    public static HResults COMADMIN_E_OBJECTINVALID;
    public static HResults COMADMIN_E_KEYMISSING;
    public static HResults COMADMIN_E_ALREADYINSTALLED;
    public static HResults COMADMIN_E_APP_FILE_WRITEFAIL;
    public static HResults COMADMIN_E_APP_FILE_READFAIL;
    public static HResults COMADMIN_E_APP_FILE_VERSION;
    public static HResults COMADMIN_E_BADPATH;
    public static HResults COMADMIN_E_APPLICATIONEXISTS;
    public static HResults COMADMIN_E_ROLEEXISTS;
    public static HResults COMADMIN_E_CANTCOPYFILE;
    public static HResults COMADMIN_E_NOUSER;
    public static HResults COMADMIN_E_INVALIDUSERIDS;
    public static HResults COMADMIN_E_NOREGISTRYCLSID;
    public static HResults COMADMIN_E_BADREGISTRYPROGID;
    public static HResults COMADMIN_E_AUTHENTICATIONLEVEL;
    public static HResults COMADMIN_E_USERPASSWDNOTVALID;
    public static HResults COMADMIN_E_CLSIDORIIDMISMATCH;
    public static HResults COMADMIN_E_REMOTEINTERFACE;
    public static HResults COMADMIN_E_DLLREGISTERSERVER;
    public static HResults COMADMIN_E_NOSERVERSHARE;
    public static HResults COMADMIN_E_DLLLOADFAILED;
    public static HResults COMADMIN_E_BADREGISTRYLIBID;
    public static HResults COMADMIN_E_APPDIRNOTFOUND;
    public static HResults COMADMIN_E_REGISTRARFAILED;
    public static HResults COMADMIN_E_COMPFILE_DOESNOTEXIST;
    public static HResults COMADMIN_E_COMPFILE_LOADDLLFAIL;
    public static HResults COMADMIN_E_COMPFILE_GETCLASSOBJ;
    public static HResults COMADMIN_E_COMPFILE_CLASSNOTAVAIL;
    public static HResults COMADMIN_E_COMPFILE_BADTLB;
    public static HResults COMADMIN_E_COMPFILE_NOTINSTALLABLE;
    public static HResults COMADMIN_E_NOTCHANGEABLE;
    public static HResults COMADMIN_E_NOTDELETEABLE;
    public static HResults COMADMIN_E_SESSION;
    public static HResults COMADMIN_E_COMP_MOVE_LOCKED;
    public static HResults COMADMIN_E_COMP_MOVE_BAD_DEST;
    public static HResults COMADMIN_E_REGISTERTLB;
    public static HResults COMADMIN_E_SYSTEMAPP;
    public static HResults COMADMIN_E_COMPFILE_NOREGISTRAR;
    public static HResults COMADMIN_E_COREQCOMPINSTALLED;
    public static HResults COMADMIN_E_SERVICENOTINSTALLED;
    public static HResults COMADMIN_E_PROPERTYSAVEFAILED;
    public static HResults COMADMIN_E_OBJECTEXISTS;
    public static HResults COMADMIN_E_COMPONENTEXISTS;
    public static HResults COMADMIN_E_REGFILE_CORRUPT;
    public static HResults COMADMIN_E_PROPERTY_OVERFLOW;
    public static HResults COMADMIN_E_NOTINREGISTRY;
    public static HResults COMADMIN_E_OBJECTNOTPOOLABLE;
    public static HResults COMADMIN_E_APPLID_MATCHES_CLSID;
    public static HResults COMADMIN_E_ROLE_DOES_NOT_EXIST;
    public static HResults COMADMIN_E_START_APP_NEEDS_COMPONENTS;
    public static HResults COMADMIN_E_REQUIRES_DIFFERENT_PLATFORM;
    public static HResults COMADMIN_E_CAN_NOT_EXPORT_APP_PROXY;
    public static HResults COMADMIN_E_CAN_NOT_START_APP;
    public static HResults COMADMIN_E_CAN_NOT_EXPORT_SYS_APP;
    public static HResults COMADMIN_E_CANT_SUBSCRIBE_TO_COMPONENT;
    public static HResults COMADMIN_E_EVENTCLASS_CANT_BE_SUBSCRIBER;
    public static HResults COMADMIN_E_LIB_APP_PROXY_INCOMPATIBLE;
    public static HResults COMADMIN_E_BASE_PARTITION_ONLY;
    public static HResults COMADMIN_E_START_APP_DISABLED;
    public static HResults COMADMIN_E_CAT_DUPLICATE_PARTITION_NAME;
    public static HResults COMADMIN_E_CAT_INVALID_PARTITION_NAME;
    public static HResults COMADMIN_E_CAT_PARTITION_IN_USE;
    public static HResults COMADMIN_E_FILE_PARTITION_DUPLICATE_FILES;
    public static HResults COMADMIN_E_CAT_IMPORTED_COMPONENTS_NOT_ALLOWED;
    public static HResults COMADMIN_E_AMBIGUOUS_APPLICATION_NAME;
    public static HResults COMADMIN_E_AMBIGUOUS_PARTITION_NAME;
    public static HResults COMADMIN_E_REGDB_NOTINITIALIZED;
    public static HResults COMADMIN_E_REGDB_NOTOPEN;
    public static HResults COMADMIN_E_REGDB_SYSTEMERR;
    public static HResults COMADMIN_E_REGDB_ALREADYRUNNING;
    public static HResults COMADMIN_E_MIG_VERSIONNOTSUPPORTED;
    public static HResults COMADMIN_E_MIG_SCHEMANOTFOUND;
    public static HResults COMADMIN_E_CAT_BITNESSMISMATCH;
    public static HResults COMADMIN_E_CAT_UNACCEPTABLEBITNESS;
    public static HResults COMADMIN_E_CAT_WRONGAPPBITNESS;
    public static HResults COMADMIN_E_CAT_PAUSE_RESUME_NOT_SUPPORTED;
    public static HResults COMADMIN_E_CAT_SERVERFAULT;
    public static HResults COMQC_E_APPLICATION_NOT_QUEUED;
    public static HResults COMQC_E_NO_QUEUEABLE_INTERFACES;
    public static HResults COMQC_E_QUEUING_SERVICE_NOT_AVAILABLE;
    public static HResults COMQC_E_NO_IPERSISTSTREAM;
    public static HResults COMQC_E_BAD_MESSAGE;
    public static HResults COMQC_E_UNAUTHENTICATED;
    public static HResults COMQC_E_UNTRUSTED_ENQUEUER;
    public static HResults MSDTC_E_DUPLICATE_RESOURCE;
    public static HResults COMADMIN_E_OBJECT_PARENT_MISSING;
    public static HResults COMADMIN_E_OBJECT_DOES_NOT_EXIST;
    public static HResults COMADMIN_E_APP_NOT_RUNNING;
    public static HResults COMADMIN_E_INVALID_PARTITION;
    public static HResults COMADMIN_E_SVCAPP_NOT_POOLABLE_OR_RECYCLABLE;
    public static HResults COMADMIN_E_USER_IN_SET;
    public static HResults COMADMIN_E_CANTRECYCLELIBRARYAPPS;
    public static HResults COMADMIN_E_CANTRECYCLESERVICEAPPS;
    public static HResults COMADMIN_E_PROCESSALREADYRECYCLED;
    public static HResults COMADMIN_E_PAUSEDPROCESSMAYNOTBERECYCLED;
    public static HResults COMADMIN_E_CANTMAKEINPROCSERVICE;
    public static HResults COMADMIN_E_PROGIDINUSEBYCLSID;
    public static HResults COMADMIN_E_DEFAULT_PARTITION_NOT_IN_SET;
    public static HResults COMADMIN_E_RECYCLEDPROCESSMAYNOTBEPAUSED;
    public static HResults COMADMIN_E_PARTITION_ACCESSDENIED;
    public static HResults COMADMIN_E_PARTITION_MSI_ONLY;
    public static HResults COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_1_0_FORMAT;
    public static HResults COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_NONBASE_PARTITIONS;
    public static HResults COMADMIN_E_COMP_MOVE_SOURCE;
    public static HResults COMADMIN_E_COMP_MOVE_DEST;
    public static HResults COMADMIN_E_COMP_MOVE_PRIVATE;
    public static HResults COMADMIN_E_BASEPARTITION_REQUIRED_IN_SET;
    public static HResults COMADMIN_E_CANNOT_ALIAS_EVENTCLASS;
    public static HResults COMADMIN_E_PRIVATE_ACCESSDENIED;
    public static HResults COMADMIN_E_SAFERINVALID;
    public static HResults COMADMIN_E_REGISTRY_ACCESSDENIED;
    public static HResults COMADMIN_E_PARTITIONS_DISABLED;
    public static HResults CEE_E_ENTRYPOINT;
    public static HResults CEE_E_CVTRES_NOT_FOUND;
    public static HResults MSEE_E_LOADLIBFAILED;
    public static HResults MSEE_E_GETPROCFAILED;
    public static HResults MSEE_E_MULTCOPIESLOADED;
    public static HResults COR_E_APPDOMAINUNLOADED;
    public static HResults COR_E_CANNOTUNLOADAPPDOMAIN;
    public static HResults MSEE_E_ASSEMBLYLOADINPROGRESS;
    public static HResults MSEE_E_CANNOTCREATEAPPDOMAIN;
    public static HResults COR_E_FIXUPSINEXE;
    public static HResults COR_E_NO_LOADLIBRARY_ALLOWED;
    public static HResults COR_E_NEWER_RUNTIME;
    public static HResults COR_E_MULTIMODULEASSEMBLIESDIALLOWED;
    public static HResults HOST_E_DEADLOCK;
    public static HResults HOST_E_INTERRUPTED;
    public static HResults HOST_E_INVALIDOPERATION;
    public static HResults HOST_E_CLRNOTAVAILABLE;
    public static HResults HOST_E_TIMEOUT;
    public static HResults HOST_E_NOT_OWNER;
    public static HResults HOST_E_ABANDONED;
    public static HResults HOST_E_EXITPROCESS_THREADABORT;
    public static HResults HOST_E_EXITPROCESS_ADUNLOAD;
    public static HResults HOST_E_EXITPROCESS_TIMEOUT;
    public static HResults HOST_E_EXITPROCESS_OUTOFMEMORY;
    public static HResults HOST_E_EXITPROCESS_STACKOVERFLOW;
    public static HResults COR_E_MODULE_HASH_CHECK_FAILED;
    public static HResults FUSION_E_REF_DEF_MISMATCH;
    public static HResults FUSION_E_INVALID_PRIVATE_ASM_LOCATION;
    public static HResults FUSION_E_ASM_MODULE_MISSING;
    public static HResults FUSION_E_UNEXPECTED_MODULE_FOUND;
    public static HResults FUSION_E_PRIVATE_ASM_DISALLOWED;
    public static HResults FUSION_E_SIGNATURE_CHECK_FAILED;
    public static HResults FUSION_E_DATABASE_ERROR;
    public static HResults FUSION_E_INVALID_NAME;
    public static HResults FUSION_E_CODE_DOWNLOAD_DISABLED;
    public static HResults FUSION_E_UNINSTALL_DISALLOWED;
    public static HResults FUSION_E_HOST_GAC_ASM_MISMATCH;
    public static HResults FUSION_E_LOADFROM_BLOCKED;
    public static HResults FUSION_E_CACHEFILE_FAILED;
    public static HResults FUSION_E_APP_DOMAIN_LOCKED;
    public static HResults FUSION_E_CONFIGURATION_ERROR;
    public static HResults FUSION_E_MANIFEST_PARSE_ERROR;
    public static HResults FUSION_E_INVALID_ASSEMBLY_REFERENCE;
    public static HResults COR_E_ASSEMBLY_NOT_EXPECTED;
    public static HResults COR_E_LOADING_REFERENCE_ASSEMBLY;
    public static HResults COR_E_NI_AND_RUNTIME_VERSION_MISMATCH;
    public static HResults COR_E_LOADING_WINMD_REFERENCE_ASSEMBLY;
    public static HResults CLDB_E_FILE_BADREAD;
    public static HResults CLDB_E_FILE_BADWRITE;
    public static HResults CLDB_E_FILE_READONLY;
    public static HResults CLDB_E_NAME_ERROR;
    public static HResults CLDB_S_TRUNCATION;
    public static HResults CLDB_E_TRUNCATION;
    public static HResults CLDB_E_FILE_OLDVER;
    public static HResults CLDB_E_RELOCATED;
    public static HResults CLDB_S_NULL;
    public static HResults CLDB_E_SMDUPLICATE;
    public static HResults CLDB_E_NO_DATA;
    public static HResults CLDB_E_READONLY;
    public static HResults CLDB_E_INCOMPATIBLE;
    public static HResults CLDB_E_FILE_CORRUPT;
    public static HResults CLDB_E_SCHEMA_VERNOTFOUND;
    public static HResults CLDB_E_BADUPDATEMODE;
    public static HResults CLDB_E_INDEX_NONULLKEYS;
    public static HResults CLDB_E_INDEX_DUPLICATE;
    public static HResults CLDB_E_INDEX_BADTYPE;
    public static HResults CLDB_E_INDEX_NOTFOUND;
    public static HResults CLDB_S_INDEX_TABLESCANREQUIRED;
    public static HResults CLDB_E_RECORD_NOTFOUND;
    public static HResults CLDB_E_RECORD_OVERFLOW;
    public static HResults CLDB_E_RECORD_DUPLICATE;
    public static HResults CLDB_E_RECORD_PKREQUIRED;
    public static HResults CLDB_E_RECORD_DELETED;
    public static HResults CLDB_E_RECORD_OUTOFORDER;
    public static HResults CLDB_E_COLUMN_OVERFLOW;
    public static HResults CLDB_E_COLUMN_READONLY;
    public static HResults CLDB_E_COLUMN_SPECIALCOL;
    public static HResults CLDB_E_COLUMN_PKNONULLS;
    public static HResults CLDB_E_TABLE_CANTDROP;
    public static HResults CLDB_E_OBJECT_NOTFOUND;
    public static HResults CLDB_E_OBJECT_COLNOTFOUND;
    public static HResults CLDB_E_VECTOR_BADINDEX;
    public static HResults CLDB_E_TOO_BIG;
    public static HResults META_E_INVALID_TOKEN_TYPE;
    public static HResults TLBX_E_INVALID_TYPEINFO;
    public static HResults TLBX_E_INVALID_TYPEINFO_UNNAMED;
    public static HResults TLBX_E_CTX_NESTED;
    public static HResults TLBX_E_ERROR_MESSAGE;
    public static HResults TLBX_E_CANT_SAVE;
    public static HResults TLBX_W_LIBNOTREGISTERED;
    public static HResults TLBX_E_CANTLOADLIBRARY;
    public static HResults TLBX_E_BAD_VT_TYPE;
    public static HResults TLBX_E_NO_MSCOREE_TLB;
    public static HResults TLBX_E_BAD_MSCOREE_TLB;
    public static HResults TLBX_E_TLB_EXCEPTION;
    public static HResults TLBX_E_MULTIPLE_LCIDS;
    public static HResults TLBX_I_TYPEINFO_IMPORTED;
    public static HResults TLBX_E_AMBIGUOUS_RETURN;
    public static HResults TLBX_E_DUPLICATE_TYPE_NAME;
    public static HResults TLBX_I_USEIUNKNOWN;
    public static HResults TLBX_I_UNCONVERTABLE_ARGS;
    public static HResults TLBX_I_UNCONVERTABLE_FIELD;
    public static HResults TLBX_I_NONSEQUENTIALSTRUCT;
    public static HResults TLBX_W_WARNING_MESSAGE;
    public static HResults TLBX_I_RESOLVEREFFAILED;
    public static HResults TLBX_E_ASANY;
    public static HResults TLBX_E_INVALIDLCIDPARAM;
    public static HResults TLBX_E_LCIDONDISPONLYITF;
    public static HResults TLBX_E_NONPUBLIC_FIELD;
    public static HResults TLBX_I_TYPE_EXPORTED;
    public static HResults TLBX_I_DUPLICATE_DISPID;
    public static HResults TLBX_E_BAD_NAMES;
    public static HResults TLBX_I_REF_TYPE_AS_STRUCT;
    public static HResults TLBX_E_GENERICINST_SIGNATURE;
    public static HResults TLBX_E_GENERICPAR_SIGNATURE;
    public static HResults TLBX_I_GENERIC_TYPE;
    public static HResults META_E_DUPLICATE;
    public static HResults META_E_GUID_REQUIRED;
    public static HResults META_E_TYPEDEF_MISMATCH;
    public static HResults META_E_MERGE_COLLISION;
    public static HResults TLBX_W_NON_INTEGRAL_CA_TYPE;
    public static HResults TLBX_W_IENUM_CA_ON_IUNK;
    public static HResults TLBX_E_NO_SAFEHANDLE_ARRAYS;
    public static HResults META_E_METHD_NOT_FOUND;
    public static HResults META_E_FIELD_NOT_FOUND;
    public static HResults META_S_PARAM_MISMATCH;
    public static HResults META_E_PARAM_MISMATCH;
    public static HResults META_E_BADMETADATA;
    public static HResults META_E_INTFCEIMPL_NOT_FOUND;
    public static HResults TLBX_E_NO_CRITICALHANDLE_ARRAYS;
    public static HResults META_E_CLASS_LAYOUT_INCONSISTENT;
    public static HResults META_E_FIELD_MARSHAL_NOT_FOUND;
    public static HResults META_E_METHODSEM_NOT_FOUND;
    public static HResults META_E_EVENT_NOT_FOUND;
    public static HResults META_E_PROP_NOT_FOUND;
    public static HResults META_E_BAD_SIGNATURE;
    public static HResults META_E_BAD_INPUT_PARAMETER;
    public static HResults META_E_METHDIMPL_INCONSISTENT;
    public static HResults META_E_MD_INCONSISTENCY;
    public static HResults META_E_CANNOTRESOLVETYPEREF;
    public static HResults META_S_DUPLICATE;
    public static HResults META_E_STRINGSPACE_FULL;
    public static HResults META_E_UNEXPECTED_REMAP;
    public static HResults META_E_HAS_UNMARKALL;
    public static HResults META_E_MUST_CALL_UNMARKALL;
    public static HResults META_E_GENERICPARAM_INCONSISTENT;
    public static HResults META_E_EVENT_COUNTS;
    public static HResults META_E_PROPERTY_COUNTS;
    public static HResults META_E_TYPEDEF_MISSING;
    public static HResults TLBX_E_CANT_LOAD_MODULE;
    public static HResults TLBX_E_CANT_LOAD_CLASS;
    public static HResults TLBX_E_NULL_MODULE;
    public static HResults TLBX_E_NO_CLSID_KEY;
    public static HResults TLBX_E_CIRCULAR_EXPORT;
    public static HResults TLBX_E_CIRCULAR_IMPORT;
    public static HResults TLBX_E_BAD_NATIVETYPE;
    public static HResults TLBX_E_BAD_VTABLE;
    public static HResults TLBX_E_CRM_NON_STATIC;
    public static HResults TLBX_E_CRM_INVALID_SIG;
    public static HResults TLBX_E_CLASS_LOAD_EXCEPTION;
    public static HResults TLBX_E_UNKNOWN_SIGNATURE;
    public static HResults TLBX_E_REFERENCED_TYPELIB;
    public static HResults TLBX_S_REFERENCED_TYPELIB;
    public static HResults TLBX_E_INVALID_NAMESPACE;
    public static HResults TLBX_E_LAYOUT_ERROR;
    public static HResults TLBX_E_NOTIUNKNOWN;
    public static HResults TLBX_E_NONVISIBLEVALUECLASS;
    public static HResults TLBX_E_LPTSTR_NOT_ALLOWED;
    public static HResults TLBX_E_AUTO_CS_NOT_ALLOWED;
    public static HResults TLBX_S_NOSTDINTERFACE;
    public static HResults TLBX_S_DUPLICATE_DISPID;
    public static HResults TLBX_E_ENUM_VALUE_INVALID;
    public static HResults TLBX_E_DUPLICATE_IID;
    public static HResults TLBX_E_NO_NESTED_ARRAYS;
    public static HResults TLBX_E_PARAM_ERROR_NAMED;
    public static HResults TLBX_E_PARAM_ERROR_UNNAMED;
    public static HResults TLBX_E_AGNOST_SIGNATURE;
    public static HResults TLBX_E_CONVERT_FAIL;
    public static HResults TLBX_W_DUAL_NOT_DISPATCH;
    public static HResults TLBX_E_BAD_SIGNATURE;
    public static HResults TLBX_E_ARRAY_NEEDS_NT_FIXED;
    public static HResults TLBX_E_CLASS_NEEDS_NT_INTF;
    public static HResults META_E_CA_INVALID_TARGET;
    public static HResults META_E_CA_INVALID_VALUE;
    public static HResults META_E_CA_INVALID_BLOB;
    public static HResults META_E_CA_REPEATED_ARG;
    public static HResults META_E_CA_UNKNOWN_ARGUMENT;
    public static HResults META_E_CA_VARIANT_NYI;
    public static HResults META_E_CA_ARRAY_NYI;
    public static HResults META_E_CA_UNEXPECTED_TYPE;
    public static HResults META_E_CA_INVALID_ARGTYPE;
    public static HResults META_E_CA_INVALID_ARG_FOR_TYPE;
    public static HResults META_E_CA_INVALID_UUID;
    public static HResults META_E_CA_INVALID_MARSHALAS_FIELDS;
    public static HResults META_E_CA_NT_FIELDONLY;
    public static HResults META_E_CA_NEGATIVE_PARAMINDEX;
    public static HResults META_E_CA_NEGATIVE_MULTIPLIER;
    public static HResults META_E_CA_NEGATIVE_CONSTSIZE;
    public static HResults META_E_CA_FIXEDSTR_SIZE_REQUIRED;
    public static HResults META_E_CA_CUSTMARSH_TYPE_REQUIRED;
    public static HResults META_E_CA_FILENAME_REQUIRED;
    public static HResults TLBX_W_NO_PROPS_IN_EVENTS;
    public static HResults META_E_NOT_IN_ENC_MODE;
    public static HResults META_E_CA_BAD_FRIENDS_ARGS;
    public static HResults TLBX_W_ENUM_VALUE_TOOBIG;
    public static HResults META_E_METHOD_COUNTS;
    public static HResults META_E_FIELD_COUNTS;
    public static HResults META_E_PARAM_COUNTS;
    public static HResults TLBX_W_EXPORTING_AUTO_LAYOUT;
    public static HResults TLBX_E_TYPED_REF;
    public static HResults TLBX_W_DEFAULT_INTF_NOT_VISIBLE;
    public static HResults TLBX_W_BAD_SAFEARRAYFIELD_NO_ELEMENTVT;
    public static HResults TLBX_W_LAYOUTCLASS_AS_INTERFACE;
    public static HResults TLBX_I_GENERIC_BASE_TYPE;
    public static HResults TLBX_E_BITNESS_MISMATCH;
    public static HResults VLDTR_S_WRN;
    public static HResults VLDTR_S_ERR;
    public static HResults VLDTR_S_WRNERR;
    public static HResults VLDTR_E_RID_OUTOFRANGE;
    public static HResults VLDTR_E_CDTKN_OUTOFRANGE;
    public static HResults VLDTR_E_CDRID_OUTOFRANGE;
    public static HResults VLDTR_E_STRING_INVALID;
    public static HResults VLDTR_E_GUID_INVALID;
    public static HResults VLDTR_E_BLOB_INVALID;
    public static HResults VLDTR_E_MOD_MULTI;
    public static HResults VLDTR_E_MOD_NULLMVID;
    public static HResults VLDTR_E_TR_NAMENULL;
    public static HResults VLDTR_E_TR_DUP;
    public static HResults VLDTR_E_TD_NAMENULL;
    public static HResults VLDTR_E_TD_DUPNAME;
    public static HResults VLDTR_E_TD_DUPGUID;
    public static HResults VLDTR_E_TD_NOTIFACEOBJEXTNULL;
    public static HResults VLDTR_E_TD_OBJEXTENDSNONNULL;
    public static HResults VLDTR_E_TD_EXTENDSSEALED;
    public static HResults VLDTR_E_TD_DLTNORTSPCL;
    public static HResults VLDTR_E_TD_RTSPCLNOTDLT;
    public static HResults VLDTR_E_MI_DECLPRIV;
    public static HResults VLDTR_E_AS_BADNAME;
    public static HResults VLDTR_E_FILE_SYSNAME;
    public static HResults VLDTR_E_MI_BODYSTATIC;
    public static HResults VLDTR_E_TD_IFACENOTABS;
    public static HResults VLDTR_E_TD_IFACEPARNOTNIL;
    public static HResults VLDTR_E_TD_IFACEGUIDNULL;
    public static HResults VLDTR_E_MI_DECLFINAL;
    public static HResults VLDTR_E_TD_VTNOTSEAL;
    public static HResults VLDTR_E_PD_BADFLAGS;
    public static HResults VLDTR_E_IFACE_DUP;
    public static HResults VLDTR_E_MR_NAMENULL;
    public static HResults VLDTR_E_MR_VTBLNAME;
    public static HResults VLDTR_E_MR_DELNAME;
    public static HResults VLDTR_E_MR_PARNIL;
    public static HResults VLDTR_E_MR_BADCALLINGCONV;
    public static HResults VLDTR_E_MR_NOTVARARG;
    public static HResults VLDTR_E_MR_NAMEDIFF;
    public static HResults VLDTR_E_MR_SIGDIFF;
    public static HResults VLDTR_E_MR_DUP;
    public static HResults VLDTR_E_CL_TDAUTO;
    public static HResults VLDTR_E_CL_BADPCKSZ;
    public static HResults VLDTR_E_CL_DUP;
    public static HResults VLDTR_E_FL_BADOFFSET;
    public static HResults VLDTR_E_FL_TDNIL;
    public static HResults VLDTR_E_FL_NOCL;
    public static HResults VLDTR_E_FL_TDNOTEXPLCT;
    public static HResults VLDTR_E_FL_FLDSTATIC;
    public static HResults VLDTR_E_FL_DUP;
    public static HResults VLDTR_E_MODREF_NAMENULL;
    public static HResults VLDTR_E_MODREF_DUP;
    public static HResults VLDTR_E_TR_BADSCOPE;
    public static HResults VLDTR_E_TD_NESTEDNOENCL;
    public static HResults VLDTR_E_TD_EXTTRRES;
    public static HResults VLDTR_E_SIGNULL;
    public static HResults VLDTR_E_SIGNODATA;
    public static HResults VLDTR_E_MD_BADCALLINGCONV;
    public static HResults VLDTR_E_MD_THISSTATIC;
    public static HResults VLDTR_E_MD_NOTTHISNOTSTATIC;
    public static HResults VLDTR_E_MD_NOARGCNT;
    public static HResults VLDTR_E_SIG_MISSELTYPE;
    public static HResults VLDTR_E_SIG_MISSTKN;
    public static HResults VLDTR_E_SIG_TKNBAD;
    public static HResults VLDTR_E_SIG_MISSFPTR;
    public static HResults VLDTR_E_SIG_MISSFPTRARGCNT;
    public static HResults VLDTR_E_SIG_MISSRANK;
    public static HResults VLDTR_E_SIG_MISSNSIZE;
    public static HResults VLDTR_E_SIG_MISSSIZE;
    public static HResults VLDTR_E_SIG_MISSNLBND;
    public static HResults VLDTR_E_SIG_MISSLBND;
    public static HResults VLDTR_E_SIG_BADELTYPE;
    public static HResults VLDTR_E_SIG_MISSVASIZE;
    public static HResults VLDTR_E_FD_BADCALLINGCONV;
    public static HResults VLDTR_E_MD_NAMENULL;
    public static HResults VLDTR_E_MD_PARNIL;
    public static HResults VLDTR_E_MD_DUP;
    public static HResults VLDTR_E_FD_NAMENULL;
    public static HResults VLDTR_E_FD_PARNIL;
    public static HResults VLDTR_E_FD_DUP;
    public static HResults VLDTR_E_AS_MULTI;
    public static HResults VLDTR_E_AS_NAMENULL;
    public static HResults VLDTR_E_SIG_TOKTYPEMISMATCH;
    public static HResults VLDTR_E_CL_TDINTF;
    public static HResults VLDTR_E_ASOS_OSPLTFRMIDINVAL;
    public static HResults VLDTR_E_AR_NAMENULL;
    public static HResults VLDTR_E_TD_ENCLNOTNESTED;
    public static HResults VLDTR_E_AROS_OSPLTFRMIDINVAL;
    public static HResults VLDTR_E_FILE_NAMENULL;
    public static HResults VLDTR_E_CT_NAMENULL;
    public static HResults VLDTR_E_TD_EXTENDSCHILD;
    public static HResults VLDTR_E_MAR_NAMENULL;
    public static HResults VLDTR_E_FILE_DUP;
    public static HResults VLDTR_E_FILE_NAMEFULLQLFD;
    public static HResults VLDTR_E_CT_DUP;
    public static HResults VLDTR_E_MAR_DUP;
    public static HResults VLDTR_E_MAR_NOTPUBPRIV;
    public static HResults VLDTR_E_TD_ENUMNOVALUE;
    public static HResults VLDTR_E_TD_ENUMVALSTATIC;
    public static HResults VLDTR_E_TD_ENUMVALNOTSN;
    public static HResults VLDTR_E_TD_ENUMFLDNOTST;
    public static HResults VLDTR_E_TD_ENUMFLDNOTLIT;
    public static HResults VLDTR_E_TD_ENUMNOLITFLDS;
    public static HResults VLDTR_E_TD_ENUMFLDSIGMISMATCH;
    public static HResults VLDTR_E_TD_ENUMVALNOT1ST;
    public static HResults VLDTR_E_FD_NOTVALUERTSN;
    public static HResults VLDTR_E_FD_VALUEPARNOTENUM;
    public static HResults VLDTR_E_FD_INSTINIFACE;
    public static HResults VLDTR_E_FD_NOTPUBINIFACE;
    public static HResults VLDTR_E_FMD_GLOBALNOTPUBPRIVSC;
    public static HResults VLDTR_E_FMD_GLOBALNOTSTATIC;
    public static HResults VLDTR_E_FD_GLOBALNORVA;
    public static HResults VLDTR_E_MD_CTORZERORVA;
    public static HResults VLDTR_E_FD_MARKEDNOMARSHAL;
    public static HResults VLDTR_E_FD_MARSHALNOTMARKED;
    public static HResults VLDTR_E_FD_MARKEDNODEFLT;
    public static HResults VLDTR_E_FD_DEFLTNOTMARKED;
    public static HResults VLDTR_E_FMD_MARKEDNOSECUR;
    public static HResults VLDTR_E_FMD_SECURNOTMARKED;
    public static HResults VLDTR_E_FMD_PINVOKENOTSTATIC;
    public static HResults VLDTR_E_FMD_MARKEDNOPINVOKE;
    public static HResults VLDTR_E_FMD_PINVOKENOTMARKED;
    public static HResults VLDTR_E_FMD_BADIMPLMAP;
    public static HResults VLDTR_E_IMAP_BADMODREF;
    public static HResults VLDTR_E_IMAP_BADMEMBER;
    public static HResults VLDTR_E_IMAP_BADIMPORTNAME;
    public static HResults VLDTR_E_IMAP_BADCALLCONV;
    public static HResults VLDTR_E_FMD_BADACCESSFLAG;
    public static HResults VLDTR_E_FD_INITONLYANDLITERAL;
    public static HResults VLDTR_E_FD_LITERALNOTSTATIC;
    public static HResults VLDTR_E_FMD_RTSNNOTSN;
    public static HResults VLDTR_E_MD_ABSTPARNOTABST;
    public static HResults VLDTR_E_MD_NOTSTATABSTININTF;
    public static HResults VLDTR_E_MD_NOTPUBININTF;
    public static HResults VLDTR_E_MD_CTORININTF;
    public static HResults VLDTR_E_MD_GLOBALCTORCCTOR;
    public static HResults VLDTR_E_MD_CTORSTATIC;
    public static HResults VLDTR_E_MD_CTORNOTSNRTSN;
    public static HResults VLDTR_E_MD_CTORVIRT;
    public static HResults VLDTR_E_MD_CTORABST;
    public static HResults VLDTR_E_MD_CCTORNOTSTATIC;
    public static HResults VLDTR_E_MD_ZERORVA;
    public static HResults VLDTR_E_MD_FINNOTVIRT;
    public static HResults VLDTR_E_MD_STATANDFINORVIRT;
    public static HResults VLDTR_E_MD_ABSTANDFINAL;
    public static HResults VLDTR_E_MD_ABSTANDIMPL;
    public static HResults VLDTR_E_MD_ABSTANDPINVOKE;
    public static HResults VLDTR_E_MD_ABSTNOTVIRT;
    public static HResults VLDTR_E_MD_NOTABSTNOTIMPL;
    public static HResults VLDTR_E_MD_NOTABSTBADFLAGSRVA;
    public static HResults VLDTR_E_MD_PRIVSCOPENORVA;
    public static HResults VLDTR_E_MD_GLOBALABSTORVIRT;
    public static HResults VLDTR_E_SIG_LONGFORM;
    public static HResults VLDTR_E_MD_MULTIPLESEMANTICS;
    public static HResults VLDTR_E_MD_INVALIDSEMANTICS;
    public static HResults VLDTR_E_MD_SEMANTICSNOTEXIST;
    public static HResults VLDTR_E_MI_DECLNOTVIRT;
    public static HResults VLDTR_E_FMD_GLOBALITEM;
    public static HResults VLDTR_E_MD_MULTSEMANTICFLAGS;
    public static HResults VLDTR_E_MD_NOSEMANTICFLAGS;
    public static HResults VLDTR_E_FD_FLDINIFACE;
    public static HResults VLDTR_E_AS_HASHALGID;
    public static HResults VLDTR_E_AS_PROCID;
    public static HResults VLDTR_E_AR_PROCID;
    public static HResults VLDTR_E_CN_PARENTRANGE;
    public static HResults VLDTR_E_AS_BADFLAGS;
    public static HResults VLDTR_E_TR_HASTYPEDEF;
    public static HResults VLDTR_E_IFACE_BADIMPL;
    public static HResults VLDTR_E_IFACE_BADIFACE;
    public static HResults VLDTR_E_TD_SECURNOTMARKED;
    public static HResults VLDTR_E_TD_MARKEDNOSECUR;
    public static HResults VLDTR_E_MD_CCTORHASARGS;
    public static HResults VLDTR_E_CT_BADIMPL;
    public static HResults VLDTR_E_MI_ALIENBODY;
    public static HResults VLDTR_E_MD_CCTORCALLCONV;
    public static HResults VLDTR_E_MI_BADCLASS;
    public static HResults VLDTR_E_MI_CLASSISINTF;
    public static HResults VLDTR_E_MI_BADDECL;
    public static HResults VLDTR_E_MI_BADBODY;
    public static HResults VLDTR_E_MI_DUP;
    public static HResults VLDTR_E_FD_BADPARENT;
    public static HResults VLDTR_E_MD_PARAMOUTOFSEQ;
    public static HResults VLDTR_E_MD_PARASEQTOOBIG;
    public static HResults VLDTR_E_MD_PARMMARKEDNOMARSHAL;
    public static HResults VLDTR_E_MD_PARMMARSHALNOTMARKED;
    public static HResults VLDTR_E_MD_PARMMARKEDNODEFLT;
    public static HResults VLDTR_E_MD_PARMDEFLTNOTMARKED;
    public static HResults VLDTR_E_PR_BADSCOPE;
    public static HResults VLDTR_E_PR_NONAME;
    public static HResults VLDTR_E_PR_NOSIG;
    public static HResults VLDTR_E_PR_DUP;
    public static HResults VLDTR_E_PR_BADCALLINGCONV;
    public static HResults VLDTR_E_PR_MARKEDNODEFLT;
    public static HResults VLDTR_E_PR_DEFLTNOTMARKED;
    public static HResults VLDTR_E_PR_BADSEMANTICS;
    public static HResults VLDTR_E_PR_BADMETHOD;
    public static HResults VLDTR_E_PR_ALIENMETHOD;
    public static HResults VLDTR_E_CN_BLOBNOTNULL;
    public static HResults VLDTR_E_CN_BLOBNULL;
    public static HResults VLDTR_E_EV_BADSCOPE;
    public static HResults VLDTR_E_EV_NONAME;
    public static HResults VLDTR_E_EV_DUP;
    public static HResults VLDTR_E_EV_BADEVTYPE;
    public static HResults VLDTR_E_EV_EVTYPENOTCLASS;
    public static HResults VLDTR_E_EV_BADSEMANTICS;
    public static HResults VLDTR_E_EV_BADMETHOD;
    public static HResults VLDTR_E_EV_ALIENMETHOD;
    public static HResults VLDTR_E_EV_NOADDON;
    public static HResults VLDTR_E_EV_NOREMOVEON;
    public static HResults VLDTR_E_CT_DUPTDNAME;
    public static HResults VLDTR_E_MAR_BADOFFSET;
    public static HResults VLDTR_E_DS_BADOWNER;
    public static HResults VLDTR_E_DS_BADFLAGS;
    public static HResults VLDTR_E_DS_NOBLOB;
    public static HResults VLDTR_E_MAR_BADIMPL;
    public static HResults VLDTR_E_MR_VARARGCALLINGCONV;
    public static HResults VLDTR_E_MD_CTORNOTVOID;
    public static HResults VLDTR_E_EV_FIRENOTVOID;
    public static HResults VLDTR_E_AS_BADLOCALE;
    public static HResults VLDTR_E_CN_PARENTTYPE;
    public static HResults VLDTR_E_SIG_SENTINMETHODDEF;
    public static HResults VLDTR_E_SIG_SENTMUSTVARARG;
    public static HResults VLDTR_E_SIG_MULTSENTINELS;
    public static HResults VLDTR_E_SIG_LASTSENTINEL;
    public static HResults VLDTR_E_SIG_MISSARG;
    public static HResults VLDTR_E_SIG_BYREFINFIELD;
    public static HResults VLDTR_E_MD_SYNCMETHODINVTYPE;
    public static HResults VLDTR_E_TD_NAMETOOLONG;
    public static HResults VLDTR_E_AS_PROCDUP;
    public static HResults VLDTR_E_ASOS_DUP;
    public static HResults VLDTR_E_MAR_BADFLAGS;
    public static HResults VLDTR_E_CT_NOTYPEDEFID;
    public static HResults VLDTR_E_FILE_BADFLAGS;
    public static HResults VLDTR_E_FILE_NULLHASH;
    public static HResults VLDTR_E_MOD_NONAME;
    public static HResults VLDTR_E_MOD_NAMEFULLQLFD;
    public static HResults VLDTR_E_TD_RTSPCLNOTSPCL;
    public static HResults VLDTR_E_TD_EXTENDSIFACE;
    public static HResults VLDTR_E_MD_CTORPINVOKE;
    public static HResults VLDTR_E_TD_SYSENUMNOTCLASS;
    public static HResults VLDTR_E_TD_SYSENUMNOTEXTVTYPE;
    public static HResults VLDTR_E_MI_SIGMISMATCH;
    public static HResults VLDTR_E_TD_ENUMHASMETHODS;
    public static HResults VLDTR_E_TD_ENUMIMPLIFACE;
    public static HResults VLDTR_E_TD_ENUMHASPROP;
    public static HResults VLDTR_E_TD_ENUMHASEVENT;
    public static HResults VLDTR_E_TD_BADMETHODLST;
    public static HResults VLDTR_E_TD_BADFIELDLST;
    public static HResults VLDTR_E_CN_BADTYPE;
    public static HResults VLDTR_E_TD_ENUMNOINSTFLD;
    public static HResults VLDTR_E_TD_ENUMMULINSTFLD;
    public static HResults VLDTR_E_INTERRUPTED;
    public static HResults VLDTR_E_NOTINIT;
    public static HResults VLDTR_E_IFACE_NOTIFACE;
    public static HResults VLDTR_E_FD_RVAHASNORVA;
    public static HResults VLDTR_E_FD_RVAHASZERORVA;
    public static HResults VLDTR_E_MD_RVAANDIMPLMAP;
    public static HResults VLDTR_E_TD_EXTRAFLAGS;
    public static HResults VLDTR_E_TD_EXTENDSITSELF;
    public static HResults VLDTR_E_TD_SYSVTNOTEXTOBJ;
    public static HResults VLDTR_E_TD_EXTTYPESPEC;
    public static HResults VLDTR_E_TD_VTNOSIZE;
    public static HResults VLDTR_E_TD_IFACESEALED;
    public static HResults VLDTR_E_NC_BADNESTED;
    public static HResults VLDTR_E_NC_BADENCLOSER;
    public static HResults VLDTR_E_NC_DUP;
    public static HResults VLDTR_E_NC_DUPENCLOSER;
    public static HResults VLDTR_E_FRVA_ZERORVA;
    public static HResults VLDTR_E_FRVA_BADFIELD;
    public static HResults VLDTR_E_FRVA_DUPRVA;
    public static HResults VLDTR_E_FRVA_DUPFIELD;
    public static HResults VLDTR_E_EP_BADTOKEN;
    public static HResults VLDTR_E_EP_INSTANCE;
    public static HResults VLDTR_E_TD_ENUMFLDBADTYPE;
    public static HResults VLDTR_E_MD_BADRVA;
    public static HResults VLDTR_E_FD_LITERALNODEFAULT;
    public static HResults VLDTR_E_IFACE_METHNOTIMPL;
    public static HResults VLDTR_E_CA_BADPARENT;
    public static HResults VLDTR_E_CA_BADTYPE;
    public static HResults VLDTR_E_CA_NOTCTOR;
    public static HResults VLDTR_E_CA_BADSIG;
    public static HResults VLDTR_E_CA_NOSIG;
    public static HResults VLDTR_E_CA_BADPROLOG;
    public static HResults VLDTR_E_MD_BADLOCALSIGTOK;
    public static HResults VLDTR_E_MD_BADHEADER;
    public static HResults VLDTR_E_EP_TOOMANYARGS;
    public static HResults VLDTR_E_EP_BADRET;
    public static HResults VLDTR_E_EP_BADARG;
    public static HResults VLDTR_E_SIG_BADVOID;
    public static HResults VLDTR_E_IFACE_METHMULTIMPL;
    public static HResults VLDTR_E_GP_NAMENULL;
    public static HResults VLDTR_E_GP_OWNERNIL;
    public static HResults VLDTR_E_GP_DUPNAME;
    public static HResults VLDTR_E_GP_DUPNUMBER;
    public static HResults VLDTR_E_GP_NONSEQ_BY_OWNER;
    public static HResults VLDTR_E_GP_NONSEQ_BY_NUMBER;
    public static HResults VLDTR_E_GP_UNEXPECTED_OWNER_FOR_VARIANT_VAR;
    public static HResults VLDTR_E_GP_ILLEGAL_VARIANT_MVAR;
    public static HResults VLDTR_E_GP_ILLEGAL_VARIANCE_FLAGS;
    public static HResults VLDTR_E_GP_REFANDVALUETYPE;
    public static HResults VLDTR_E_GPC_OWNERNIL;
    public static HResults VLDTR_E_GPC_DUP;
    public static HResults VLDTR_E_GPC_NONCONTIGUOUS;
    public static HResults VLDTR_E_MS_METHODNIL;
    public static HResults VLDTR_E_MS_DUP;
    public static HResults VLDTR_E_MS_BADCALLINGCONV;
    public static HResults VLDTR_E_MS_MISSARITY;
    public static HResults VLDTR_E_MS_MISSARG;
    public static HResults VLDTR_E_MS_ARITYMISMATCH;
    public static HResults VLDTR_E_MS_METHODNOTGENERIC;
    public static HResults VLDTR_E_SIG_MISSARITY;
    public static HResults VLDTR_E_SIG_ARITYMISMATCH;
    public static HResults VLDTR_E_MD_GENERIC_CCTOR;
    public static HResults VLDTR_E_MD_GENERIC_CTOR;
    public static HResults VLDTR_E_MD_GENERIC_IMPORT;
    public static HResults VLDTR_E_MD_GENERIC_BADCALLCONV;
    public static HResults VLDTR_E_MD_GENERIC_GLOBAL;
    public static HResults VLDTR_E_EP_GENERIC_METHOD;
    public static HResults VLDTR_E_MD_MISSARITY;
    public static HResults VLDTR_E_MD_ARITYZERO;
    public static HResults VLDTR_E_SIG_ARITYZERO;
    public static HResults VLDTR_E_MS_ARITYZERO;
    public static HResults VLDTR_E_MD_GPMISMATCH;
    public static HResults VLDTR_E_EP_GENERIC_TYPE;
    public static HResults VLDTR_E_MI_DECLNOTGENERIC;
    public static HResults VLDTR_E_MI_IMPLNOTGENERIC;
    public static HResults VLDTR_E_MI_ARITYMISMATCH;
    public static HResults VLDTR_E_TD_EXTBADTYPESPEC;
    public static HResults VLDTR_E_SIG_BYREFINST;
    public static HResults VLDTR_E_MS_BYREFINST;
    public static HResults VLDTR_E_TS_EMPTY;
    public static HResults VLDTR_E_TS_HASSENTINALS;
    public static HResults VLDTR_E_TD_GENERICHASEXPLAYOUT;
    public static HResults VLDTR_E_SIG_BADTOKTYPE;
    public static HResults VLDTR_E_IFACE_METHNOTIMPLTHISMOD;
    public static HResults CORDBG_E_UNRECOVERABLE_ERROR;
    public static HResults CORDBG_E_PROCESS_TERMINATED;
    public static HResults CORDBG_E_PROCESS_NOT_SYNCHRONIZED;
    public static HResults CORDBG_E_CLASS_NOT_LOADED;
    public static HResults CORDBG_E_IL_VAR_NOT_AVAILABLE;
    public static HResults CORDBG_E_BAD_REFERENCE_VALUE;
    public static HResults CORDBG_E_FIELD_NOT_AVAILABLE;
    public static HResults CORDBG_E_NON_NATIVE_FRAME;
    public static HResults CORDBG_E_NONCONTINUABLE_EXCEPTION;
    public static HResults CORDBG_E_CODE_NOT_AVAILABLE;
    public static HResults CORDBG_E_FUNCTION_NOT_IL;
    public static HResults CORDBG_S_BAD_START_SEQUENCE_POINT;
    public static HResults CORDBG_S_BAD_END_SEQUENCE_POINT;
    public static HResults CORDBG_S_INSUFFICIENT_INFO_FOR_SET_IP;
    public static HResults CORDBG_E_CANT_SET_IP_INTO_FINALLY;
    public static HResults CORDBG_E_CANT_SET_IP_OUT_OF_FINALLY;
    public static HResults CORDBG_E_CANT_SET_IP_INTO_CATCH;
    public static HResults CORDBG_E_SET_IP_NOT_ALLOWED_ON_NONLEAF_FRAME;
    public static HResults CORDBG_E_SET_IP_IMPOSSIBLE;
    public static HResults CORDBG_E_FUNC_EVAL_BAD_START_POINT;
    public static HResults CORDBG_E_INVALID_OBJECT;
    public static HResults CORDBG_E_FUNC_EVAL_NOT_COMPLETE;
    public static HResults CORDBG_S_FUNC_EVAL_HAS_NO_RESULT;
    public static HResults CORDBG_S_VALUE_POINTS_TO_VOID;
    public static HResults CORDBG_E_INPROC_NOT_IMPL;
    public static HResults CORDBG_S_FUNC_EVAL_ABORTED;
    public static HResults CORDBG_E_STATIC_VAR_NOT_AVAILABLE;
    public static HResults CORDBG_E_OBJECT_IS_NOT_COPYABLE_VALUE_CLASS;
    public static HResults CORDBG_E_CANT_SETIP_INTO_OR_OUT_OF_FILTER;
    public static HResults CORDBG_E_CANT_CHANGE_JIT_SETTING_FOR_ZAP_MODULE;
    public static HResults CORDBG_E_CANT_SET_IP_OUT_OF_FINALLY_ON_WIN64;
    public static HResults CORDBG_E_CANT_SET_IP_OUT_OF_CATCH_ON_WIN64;
    public static HResults CORDBG_E_REMOTE_CONNECTION_CONN_RESET;
    public static HResults CORDBG_E_REMOTE_CONNECTION_KEEP_ALIVE;
    public static HResults CORDBG_E_REMOTE_CONNECTION_FATAL_ERROR;
    public static HResults CORDBG_E_CANT_SET_TO_JMC;
    public static HResults CORDBG_E_NO_CONTEXT_FOR_INTERNAL_FRAME;
    public static HResults CORDBG_E_NOT_CHILD_FRAME;
    public static HResults CORDBG_E_NON_MATCHING_CONTEXT;
    public static HResults CORDBG_E_PAST_END_OF_STACK;
    public static HResults CORDBG_E_FUNC_EVAL_CANNOT_UPDATE_REGISTER_IN_NONLEAF_FRAME;
    public static HResults CORDBG_E_BAD_THREAD_STATE;
    public static HResults CORDBG_E_DEBUGGER_ALREADY_ATTACHED;
    public static HResults CORDBG_E_SUPERFLOUS_CONTINUE;
    public static HResults CORDBG_E_SET_VALUE_NOT_ALLOWED_ON_NONLEAF_FRAME;
    public static HResults CORDBG_E_ENC_EH_MAX_NESTING_LEVEL_CANT_INCREASE;
    public static HResults CORDBG_E_ENC_MODULE_NOT_ENC_ENABLED;
    public static HResults CORDBG_E_SET_IP_NOT_ALLOWED_ON_EXCEPTION;
    public static HResults CORDBG_E_VARIABLE_IS_ACTUALLY_LITERAL;
    public static HResults CORDBG_E_PROCESS_DETACHED;
    public static HResults CORDBG_E_ENC_METHOD_SIG_CHANGED;
    public static HResults CORDBG_E_ENC_METHOD_NO_LOCAL_SIG;
    public static HResults CORDBG_E_ENC_CANT_ADD_FIELD_TO_VALUE_OR_LAYOUT_CLASS;
    public static HResults CORDBG_E_ENC_CANT_CHANGE_FIELD;
    public static HResults CORDBG_E_ENC_CANT_ADD_NON_PRIVATE_MEMBER;
    public static HResults CORDBG_E_FIELD_NOT_STATIC;
    public static HResults CORDBG_E_FIELD_NOT_INSTANCE;
    public static HResults CORDBG_E_ENC_ZAPPED_WITHOUT_ENC;
    public static HResults CORDBG_E_ENC_BAD_METHOD_INFO;
    public static HResults CORDBG_E_ENC_JIT_CANT_UPDATE;
    public static HResults CORDBG_E_ENC_MISSING_CLASS;
    public static HResults CORDBG_E_ENC_INTERNAL_ERROR;
    public static HResults CORDBG_E_ENC_HANGING_FIELD;
    public static HResults CORDBG_E_MODULE_NOT_LOADED;
    public static HResults CORDBG_E_ENC_CANT_CHANGE_SUPERCLASS;
    public static HResults CORDBG_E_UNABLE_TO_SET_BREAKPOINT;
    public static HResults CORDBG_E_DEBUGGING_NOT_POSSIBLE;
    public static HResults CORDBG_E_KERNEL_DEBUGGER_ENABLED;
    public static HResults CORDBG_E_KERNEL_DEBUGGER_PRESENT;
    public static HResults CORDBG_E_HELPER_THREAD_DEAD;
    public static HResults CORDBG_E_INTERFACE_INHERITANCE_CANT_CHANGE;
    public static HResults CORDBG_E_INCOMPATIBLE_PROTOCOL;
    public static HResults CORDBG_E_TOO_MANY_PROCESSES;
    public static HResults CORDBG_E_INTEROP_NOT_SUPPORTED;
    public static HResults CORDBG_E_NO_REMAP_BREAKPIONT;
    public static HResults CORDBG_E_OBJECT_NEUTERED;
    public static HResults CORPROF_E_FUNCTION_NOT_COMPILED;
    public static HResults CORPROF_E_DATAINCOMPLETE;
    public static HResults CORPROF_E_NOT_REJITABLE_METHODS;
    public static HResults CORPROF_E_CANNOT_UPDATE_METHOD;
    public static HResults CORPROF_E_FUNCTION_NOT_IL;
    public static HResults CORPROF_E_NOT_MANAGED_THREAD;
    public static HResults CORPROF_E_CALL_ONLY_FROM_INIT;
    public static HResults CORPROF_E_INPROC_NOT_ENABLED;
    public static HResults CORPROF_E_JITMAPS_NOT_ENABLED;
    public static HResults CORPROF_E_INPROC_ALREADY_BEGUN;
    public static HResults CORPROF_E_INPROC_NOT_AVAILABLE;
    public static HResults CORPROF_E_NOT_YET_AVAILABLE;
    public static HResults CORPROF_E_TYPE_IS_PARAMETERIZED;
    public static HResults CORPROF_E_FUNCTION_IS_PARAMETERIZED;
    public static HResults SECURITY_E_XML_TO_ASN_ENCODING;
    public static HResults SECURITY_E_INCOMPATIBLE_SHARE;
    public static HResults SECURITY_E_UNVERIFIABLE;
    public static HResults SECURITY_E_INCOMPATIBLE_EVIDENCE;
    public static HResults CLDB_E_INTERNALERROR;
    public static HResults CORSEC_E_DECODE_SET;
    public static HResults CORSEC_E_ENCODE_SET;
    public static HResults CORSEC_E_UNSUPPORTED_FORMAT;
    public static HResults SN_CRYPTOAPI_CALL_FAILED;
    public static HResults CORSEC_E_CRYPTOAPI_CALL_FAILED;
    public static HResults SN_NO_SUITABLE_CSP;
    public static HResults CORSEC_E_NO_SUITABLE_CSP;
    public static HResults CORSEC_E_INVALID_ATTR;
    public static HResults CORSEC_E_POLICY_EXCEPTION;
    public static HResults CORSEC_E_MIN_GRANT_FAIL;
    public static HResults CORSEC_E_NO_EXEC_PERM;
    public static HResults CORSEC_E_XMLSYNTAX;
    public static HResults CORSEC_E_INVALID_STRONGNAME;
    public static HResults CORSEC_E_MISSING_STRONGNAME;
    public static HResults CORSEC_E_CONTAINER_NOT_FOUND;
    public static HResults CORSEC_E_INVALID_IMAGE_FORMAT;
    public static HResults CORSEC_E_INVALID_PUBLICKEY;
    public static HResults CORSEC_E_SIGNATURE_MISMATCH;
    public static HResults CORSEC_E_CRYPTO;
    public static HResults CORSEC_E_CRYPTO_UNEX_OPER;
    public static HResults CORSECATTR_E_BAD_ATTRIBUTE;
    public static HResults CORSECATTR_E_MISSING_CONSTRUCTOR;
    public static HResults CORSECATTR_E_FAILED_TO_CREATE_PERM;
    public static HResults CORSECATTR_E_BAD_ACTION_ASM;
    public static HResults CORSECATTR_E_BAD_ACTION_OTHER;
    public static HResults CORSECATTR_E_BAD_PARENT;
    public static HResults CORSECATTR_E_TRUNCATED;
    public static HResults CORSECATTR_E_BAD_VERSION;
    public static HResults CORSECATTR_E_BAD_ACTION;
    public static HResults CORSECATTR_E_NO_SELF_REF;
    public static HResults CORSECATTR_E_BAD_NONCAS;
    public static HResults CORSECATTR_E_ASSEMBLY_LOAD_FAILED;
    public static HResults CORSECATTR_E_ASSEMBLY_LOAD_FAILED_EX;
    public static HResults CORSECATTR_E_TYPE_LOAD_FAILED;
    public static HResults CORSECATTR_E_TYPE_LOAD_FAILED_EX;
    public static HResults CORSECATTR_E_ABSTRACT;
    public static HResults CORSECATTR_E_UNSUPPORTED_TYPE;
    public static HResults CORSECATTR_E_UNSUPPORTED_ENUM_TYPE;
    public static HResults CORSECATTR_E_NO_FIELD;
    public static HResults CORSECATTR_E_NO_PROPERTY;
    public static HResults CORSECATTR_E_EXCEPTION;
    public static HResults CORSECATTR_E_EXCEPTION_HR;
    public static HResults ISS_E_ISOSTORE;
    public static HResults ISS_E_OPEN_STORE_FILE;
    public static HResults ISS_E_OPEN_FILE_MAPPING;
    public static HResults ISS_E_MAP_VIEW_OF_FILE;
    public static HResults ISS_E_GET_FILE_SIZE;
    public static HResults ISS_E_CREATE_MUTEX;
    public static HResults ISS_E_LOCK_FAILED;
    public static HResults ISS_E_FILE_WRITE;
    public static HResults ISS_E_SET_FILE_POINTER;
    public static HResults ISS_E_CREATE_DIR;
    public static HResults ISS_E_STORE_NOT_OPEN;
    public static HResults ISS_E_CORRUPTED_STORE_FILE;
    public static HResults ISS_E_STORE_VERSION;
    public static HResults ISS_E_FILE_NOT_MAPPED;
    public static HResults ISS_E_BLOCK_SIZE_TOO_SMALL;
    public static HResults ISS_E_ALLOC_TOO_LARGE;
    public static HResults ISS_E_USAGE_WILL_EXCEED_QUOTA;
    public static HResults ISS_E_TABLE_ROW_NOT_FOUND;
    public static HResults ISS_E_DEPRECATE;
    public static HResults ISS_E_CALLER;
    public static HResults ISS_E_PATH_LENGTH;
    public static HResults ISS_E_MACHINE;
    public static HResults ISS_E_MACHINE_DACL;
    public static HResults ISS_E_ISOSTORE_START;
    public static HResults ISS_E_ISOSTORE_END;
    public static HResults COR_E_APPLICATION;
    public static HResults COR_E_ARGUMENT;
    public static HResults COR_E_ARGUMENTOUTOFRANGE;
    public static HResults COR_E_ARITHMETIC;
    public static HResults COR_E_ARRAYTYPEMISMATCH;
    public static HResults COR_E_CONTEXTMARSHAL;
    public static HResults COR_E_TIMEOUT;
    public static HResults COR_E_KEYNOTFOUND;
    public static HResults COR_E_DEVICESNOTSUPPORTED;
    public static HResults COR_E_DIVIDEBYZERO;
    public static HResults COR_E_EXCEPTION;
    public static HResults COR_E_EXECUTIONENGINE;
    public static HResults COR_E_ELEVATIONREQUIRED;
    public static HResults COR_E_FIELDACCESS;
    public static HResults COR_E_FORMAT;
    public static HResults COR_E_BADIMAGEFORMAT;
    public static HResults COR_E_ASSEMBLYEXPECTED;
    public static HResults COR_E_TYPEUNLOADED;
    public static HResults COR_E_INDEXOUTOFRANGE;
    public static HResults COR_E_INVALIDCAST;
    public static HResults COR_E_INVALIDOPERATION;
    public static HResults COR_E_INVALIDPROGRAM;
    public static HResults COR_E_MEMBERACCESS;
    public static HResults COR_E_METHODACCESS;
    public static HResults COR_E_MISSINGFIELD;
    public static HResults COR_E_MISSINGMANIFESTRESOURCE;
    public static HResults COR_E_MISSINGMEMBER;
    public static HResults COR_E_MISSINGMETHOD;
    public static HResults COR_E_MISSINGSATELLITEASSEMBLY;
    public static HResults COR_E_MULTICASTNOTSUPPORTED;
    public static HResults COR_E_NOTFINITENUMBER;
    public static HResults COR_E_DUPLICATEWAITOBJECT;
    public static HResults COR_E_PLATFORMNOTSUPPORTED;
    public static HResults COR_E_NOTSUPPORTED;
    public static HResults COR_E_NULLREFERENCE;
    public static HResults COR_E_OUTOFMEMORY;
    public static HResults COR_E_OVERFLOW;
    public static HResults COR_E_RANK;
    public static HResults COR_E_REMOTING;
    public static HResults COR_E_SERVER;
    public static HResults COR_E_SERVICEDCOMPONENT;
    public static HResults COR_E_SECURITY;
    public static HResults COR_E_SERIALIZATION;
    public static HResults COR_E_STACKOVERFLOW;
    public static HResults COR_E_SYNCHRONIZATIONLOCK;
    public static HResults COR_E_SYSTEM;
    public static HResults COR_E_THREADABORTED;
    public static HResults COR_E_OPERATIONCANCELED;
    public static HResults COR_E_NOTCANCELABLE;
    public static HResults COR_E_THREADINTERRUPTED;
    public static HResults COR_E_THREADSTATE;
    public static HResults COR_E_THREADSTOP;
    public static HResults COR_E_TYPEINITIALIZATION;
    public static HResults COR_E_TYPELOAD;
    public static HResults COR_E_ENTRYPOINTNOTFOUND;
    public static HResults COR_E_DLLNOTFOUND;
    public static HResults COR_E_UNAUTHORIZEDACCESS;
    public static HResults COR_E_VERIFICATION;
    public static HResults COR_E_INVALIDCOMOBJECT;
    public static HResults COR_E_COMOBJECTINUSE;
    public static HResults COR_E_SEMAPHOREFULL;
    public static HResults COR_E_WAITHANDLECANNOTBEOPENED;
    public static HResults COR_E_ABANDONEDMUTEX;
    public static HResults COR_E_MARSHALDIRECTIVE;
    public static HResults COR_E_INVALIDOLEVARIANTTYPE;
    public static HResults COR_E_SAFEARRAYTYPEMISMATCH;
    public static HResults COR_E_SAFEARRAYRANKMISMATCH;
    public static HResults COR_E_DATAMISALIGNED;
    public static HResults COR_E_CODECONTRACTFAILED;
    public static HResults COR_E_TYPEACCESS;
    public static HResults COR_E_ACCESSING_CCW;
    public static HResults COR_E_MAXMETHODSIZE;
    public static HResults COR_E_INSUFFICIENTEXECUTIONSTACK;
    public static HResults COR_E_TARGETPARAMCOUNT;
    public static HResults COR_E_AMBIGUOUSMATCH;
    public static HResults COR_E_INVALIDFILTERCRITERIA;
    public static HResults COR_E_REFLECTIONTYPELOAD;
    public static HResults COR_E_TARGET;
    public static HResults COR_E_TARGETINVOCATION;
    public static HResults COR_E_CUSTOMATTRIBUTEFORMAT;
    public static HResults COR_E_FILELOAD;
    public static HResults COR_E_IO;
    public static HResults COR_E_OBJECTDISPOSED;
    public static HResults COR_E_HOSTPROTECTION;
    public static HResults COR_E_ILLEGAL_REENTRANCY;
    public static HResults COR_E_FAILFAST;
    public static HResults CLR_E_SHIM_RUNTIMELOAD;
    public static HResults CLR_E_SHIM_LEGACYRUNTIMEALREADYBOUND;
    public static HResults CLR_E_SHIM_RUNTIMEEXPORT;
    public static HResults CLR_E_SHIM_INSTALLROOT;
    public static HResults CLR_E_SHIM_INSTALLCOMP;
    public static HResults VER_E_HRESULT;
    public static HResults VER_E_OFFSET;
    public static HResults VER_E_OPCODE;
    public static HResults VER_E_OPERAND;
    public static HResults VER_E_TOKEN;
    public static HResults VER_E_EXCEPT;
    public static HResults VER_E_STACK_SLOT;
    public static HResults VER_E_LOC;
    public static HResults VER_E_ARG;
    public static HResults VER_E_FOUND;
    public static HResults VER_E_EXPECTED;
    public static HResults VER_E_LOC_BYNAME;
    public static HResults VER_E_UNKNOWN_OPCODE;
    public static HResults VER_E_SIG_CALLCONV;
    public static HResults VER_E_SIG_ELEMTYPE;
    public static HResults VER_E_RET_SIG;
    public static HResults VER_E_FIELD_SIG;
    public static HResults VER_E_INTERNAL;
    public static HResults VER_E_STACK_TOO_LARGE;
    public static HResults VER_E_ARRAY_NAME_LONG;
    public static HResults VER_E_FALLTHRU;
    public static HResults VER_E_TRY_GTEQ_END;
    public static HResults VER_E_TRYEND_GT_CS;
    public static HResults VER_E_HND_GTEQ_END;
    public static HResults VER_E_HNDEND_GT_CS;
    public static HResults VER_E_FLT_GTEQ_CS;
    public static HResults VER_E_TRY_START;
    public static HResults VER_E_HND_START;
    public static HResults VER_E_FLT_START;
    public static HResults VER_E_TRY_OVERLAP;
    public static HResults VER_E_TRY_EQ_HND_FIL;
    public static HResults VER_E_TRY_SHARE_FIN_FAL;
    public static HResults VER_E_HND_OVERLAP;
    public static HResults VER_E_HND_EQ;
    public static HResults VER_E_FIL_OVERLAP;
    public static HResults VER_E_FIL_EQ;
    public static HResults VER_E_FIL_CONT_TRY;
    public static HResults VER_E_FIL_CONT_HND;
    public static HResults VER_E_FIL_CONT_FIL;
    public static HResults VER_E_FIL_GTEQ_CS;
    public static HResults VER_E_FIL_START;
    public static HResults VER_E_FALLTHRU_EXCEP;
    public static HResults VER_E_FALLTHRU_INTO_HND;
    public static HResults VER_E_FALLTHRU_INTO_FIL;
    public static HResults VER_E_LEAVE;
    public static HResults VER_E_RETHROW;
    public static HResults VER_E_ENDFINALLY;
    public static HResults VER_E_ENDFILTER;
    public static HResults VER_E_ENDFILTER_MISSING;
    public static HResults VER_E_BR_INTO_TRY;
    public static HResults VER_E_BR_INTO_HND;
    public static HResults VER_E_BR_INTO_FIL;
    public static HResults VER_E_BR_OUTOF_TRY;
    public static HResults VER_E_BR_OUTOF_HND;
    public static HResults VER_E_BR_OUTOF_FIL;
    public static HResults VER_E_BR_OUTOF_FIN;
    public static HResults VER_E_RET_FROM_TRY;
    public static HResults VER_E_RET_FROM_HND;
    public static HResults VER_E_RET_FROM_FIL;
    public static HResults VER_E_BAD_JMP_TARGET;
    public static HResults VER_E_PATH_LOC;
    public static HResults VER_E_PATH_THIS;
    public static HResults VER_E_PATH_STACK;
    public static HResults VER_E_PATH_STACK_DEPTH;
    public static HResults VER_E_THIS;
    public static HResults VER_E_THIS_UNINIT_EXCEP;
    public static HResults VER_E_THIS_UNINIT_STORE;
    public static HResults VER_E_THIS_UNINIT_RET;
    public static HResults VER_E_THIS_UNINIT_V_RET;
    public static HResults VER_E_THIS_UNINIT_BR;
    public static HResults VER_E_LDFTN_CTOR;
    public static HResults VER_E_STACK_NOT_EQ;
    public static HResults VER_E_STACK_UNEXPECTED;
    public static HResults VER_E_STACK_EXCEPTION;
    public static HResults VER_E_STACK_OVERFLOW;
    public static HResults VER_E_STACK_UNDERFLOW;
    public static HResults VER_E_STACK_EMPTY;
    public static HResults VER_E_STACK_UNINIT;
    public static HResults VER_E_STACK_I_I4_I8;
    public static HResults VER_E_STACK_R_R4_R8;
    public static HResults VER_E_STACK_NO_R_I8;
    public static HResults VER_E_STACK_NUMERIC;
    public static HResults VER_E_STACK_OBJREF;
    public static HResults VER_E_STACK_P_OBJREF;
    public static HResults VER_E_STACK_BYREF;
    public static HResults VER_E_STACK_METHOD;
    public static HResults VER_E_STACK_ARRAY_SD;
    public static HResults VER_E_STACK_VALCLASS;
    public static HResults VER_E_STACK_P_VALCLASS;
    public static HResults VER_E_STACK_NO_VALCLASS;
    public static HResults VER_E_LOC_DEAD;
    public static HResults VER_E_LOC_NUM;
    public static HResults VER_E_ARG_NUM;
    public static HResults VER_E_TOKEN_RESOLVE;
    public static HResults VER_E_TOKEN_TYPE;
    public static HResults VER_E_TOKEN_TYPE_MEMBER;
    public static HResults VER_E_TOKEN_TYPE_FIELD;
    public static HResults VER_E_TOKEN_TYPE_SIG;
    public static HResults VER_E_UNVERIFIABLE;
    public static HResults VER_E_LDSTR_OPERAND;
    public static HResults VER_E_RET_PTR_TO_STACK;
    public static HResults VER_E_RET_VOID;
    public static HResults VER_E_RET_MISSING;
    public static HResults VER_E_RET_EMPTY;
    public static HResults VER_E_RET_UNINIT;
    public static HResults VER_E_ARRAY_ACCESS;
    public static HResults VER_E_ARRAY_V_STORE;
    public static HResults VER_E_ARRAY_SD;
    public static HResults VER_E_ARRAY_SD_PTR;
    public static HResults VER_E_ARRAY_FIELD;
    public static HResults VER_E_ARGLIST;
    public static HResults VER_E_VALCLASS;
    public static HResults VER_E_METHOD_ACCESS;
    public static HResults VER_E_FIELD_ACCESS;
    public static HResults VER_E_DEAD;
    public static HResults VER_E_FIELD_STATIC;
    public static HResults VER_E_FIELD_NO_STATIC;
    public static HResults VER_E_ADDR;
    public static HResults VER_E_ADDR_BYREF;
    public static HResults VER_E_ADDR_LITERAL;
    public static HResults VER_E_INITONLY;
    public static HResults VER_E_THROW;
    public static HResults VER_E_CALLVIRT_VALCLASS;
    public static HResults VER_E_CALL_SIG;
    public static HResults VER_E_CALL_STATIC;
    public static HResults VER_E_CTOR;
    public static HResults VER_E_CTOR_VIRT;
    public static HResults VER_E_CTOR_OR_SUPER;
    public static HResults VER_E_CTOR_MUL_INIT;
    public static HResults VER_E_SIG;
    public static HResults VER_E_SIG_ARRAY;
    public static HResults VER_E_SIG_ARRAY_PTR;
    public static HResults VER_E_SIG_ARRAY_BYREF;
    public static HResults VER_E_SIG_ELEM_PTR;
    public static HResults VER_E_SIG_VARARG;
    public static HResults VER_E_SIG_VOID;
    public static HResults VER_E_SIG_BYREF_BYREF;
    public static HResults VER_E_CODE_SIZE_ZERO;
    public static HResults VER_E_BAD_VARARG;
    public static HResults VER_E_TAIL_CALL;
    public static HResults VER_E_TAIL_BYREF;
    public static HResults VER_E_TAIL_RET;
    public static HResults VER_E_TAIL_RET_VOID;
    public static HResults VER_E_TAIL_RET_TYPE;
    public static HResults VER_E_TAIL_STACK_EMPTY;
    public static HResults VER_E_METHOD_END;
    public static HResults VER_E_BAD_BRANCH;
    public static HResults VER_E_FIN_OVERLAP;
    public static HResults VER_E_LEXICAL_NESTING;
    public static HResults VER_E_VOLATILE;
    public static HResults VER_E_UNALIGNED;
    public static HResults VER_E_INNERMOST_FIRST;
    public static HResults VER_E_CALLI_VIRTUAL;
    public static HResults VER_E_CALL_ABSTRACT;
    public static HResults VER_E_STACK_UNEXP_ARRAY;
    public static HResults VER_E_NOT_IN_GC_HEAP;
    public static HResults VER_E_TRY_N_EMPTY_STACK;
    public static HResults VER_E_DLGT_CTOR;
    public static HResults VER_E_DLGT_BB;
    public static HResults VER_E_DLGT_PATTERN;
    public static HResults VER_E_DLGT_LDFTN;
    public static HResults VER_E_FTN_ABSTRACT;
    public static HResults VER_E_SIG_C_VC;
    public static HResults VER_E_SIG_VC_C;
    public static HResults VER_E_BOX_PTR_TO_STACK;
    public static HResults VER_E_SIG_BYREF_TB_AH;
    public static HResults VER_E_SIG_ARRAY_TB_AH;
    public static HResults VER_E_ENDFILTER_STACK;
    public static HResults VER_E_DLGT_SIG_I;
    public static HResults VER_E_DLGT_SIG_O;
    public static HResults VER_E_RA_PTR_TO_STACK;
    public static HResults VER_E_CATCH_VALUE_TYPE;
    public static HResults VER_E_CATCH_BYREF;
    public static HResults VER_E_FIL_PRECEED_HND;
    public static HResults VER_E_LDVIRTFTN_STATIC;
    public static HResults VER_E_CALLVIRT_STATIC;
    public static HResults VER_E_INITLOCALS;
    public static HResults VER_E_BR_TO_EXCEPTION;
    public static HResults VER_E_CALL_CTOR;
    public static HResults VER_E_VALCLASS_OBJREF_VAR;
    public static HResults VER_E_STACK_P_VALCLASS_OBJREF_VAR;
    public static HResults VER_E_SIG_VAR_PARAM;
    public static HResults VER_E_SIG_MVAR_PARAM;
    public static HResults VER_E_SIG_VAR_ARG;
    public static HResults VER_E_SIG_MVAR_ARG;
    public static HResults VER_E_SIG_GENERICINST;
    public static HResults VER_E_SIG_METHOD_INST;
    public static HResults VER_E_SIG_METHOD_PARENT_INST;
    public static HResults VER_E_SIG_FIELD_PARENT_INST;
    public static HResults VER_E_CALLCONV_NOT_GENERICINST;
    public static HResults VER_E_TOKEN_BAD_METHOD_SPEC;
    public static HResults VER_E_BAD_READONLY_PREFIX;
    public static HResults VER_E_BAD_CONSTRAINED_PREFIX;
    public static HResults VER_E_CIRCULAR_VAR_CONSTRAINTS;
    public static HResults VER_E_CIRCULAR_MVAR_CONSTRAINTS;
    public static HResults VER_E_UNSATISFIED_METHOD_INST;
    public static HResults VER_E_UNSATISFIED_METHOD_PARENT_INST;
    public static HResults VER_E_UNSATISFIED_FIELD_PARENT_INST;
    public static HResults VER_E_UNSATISFIED_BOX_OPERAND;
    public static HResults VER_E_CONSTRAINED_CALL_WITH_NON_BYREF_THIS;
    public static HResults VER_E_CONSTRAINED_OF_NON_VARIABLE_TYPE;
    public static HResults VER_E_READONLY_UNEXPECTED_CALLEE;
    public static HResults VER_E_READONLY_ILLEGAL_WRITE;
    public static HResults VER_E_READONLY_IN_MKREFANY;
    public static HResults VER_E_UNALIGNED_ALIGNMENT;
    public static HResults VER_E_TAILCALL_INSIDE_EH;
    public static HResults VER_E_BACKWARD_BRANCH;
    public static HResults VER_E_CALL_TO_VTYPE_BASE;
    public static HResults VER_E_NEWOBJ_OF_ABSTRACT_CLASS;
    public static HResults VER_E_FIELD_OVERLAP;
    public static HResults VER_E_BAD_PE;
    public static HResults VER_E_BAD_MD;
    public static HResults VER_E_BAD_APPDOMAIN;
    public static HResults VER_E_TYPELOAD;
    public static HResults VER_E_PE_LOAD;
    public static HResults VER_E_WRITE_RVA_STATIC;
    public static HResults CORDBG_S_AT_END_OF_STACK;
    public static HResults CORDBG_E_THREAD_NOT_SCHEDULED;
    public static HResults CORDBG_E_HANDLE_HAS_BEEN_DISPOSED;
    public static HResults CORDBG_E_NONINTERCEPTABLE_EXCEPTION;
    public static HResults CORDBG_E_CANT_UNWIND_ABOVE_CALLBACK;
    public static HResults CORDBG_E_INTERCEPT_FRAME_ALREADY_SET;
    public static HResults CORDBG_E_NO_NATIVE_PATCH_AT_ADDR;
    public static HResults CORDBG_E_MUST_BE_INTEROP_DEBUGGING;
    public static HResults CORDBG_E_NATIVE_PATCH_ALREADY_AT_ADDR;
    public static HResults CORDBG_E_TIMEOUT;
    public static HResults CORDBG_E_CANT_CALL_ON_THIS_THREAD;
    public static HResults CORDBG_E_ENC_INFOLESS_METHOD;
    public static HResults CORDBG_E_ENC_NESTED_HANLDERS;
    public static HResults CORDBG_E_ENC_IN_FUNCLET;
    public static HResults CORDBG_E_ENC_LOCALLOC;
    public static HResults CORDBG_E_ENC_EDIT_NOT_SUPPORTED;
    public static HResults CORDBG_E_FEABORT_DELAYED_UNTIL_THREAD_RESUMED;
    public static HResults CORDBG_E_NOTREADY;
    public static HResults CORDBG_E_CANNOT_RESOLVE_ASSEMBLY;
    public static HResults CORDBG_E_MUST_BE_IN_LOAD_MODULE;
    public static HResults CORDBG_E_CANNOT_BE_ON_ATTACH;
    public static HResults CORDBG_S_NOT_ALL_BITS_SET;
    public static HResults CORDBG_E_NGEN_NOT_SUPPORTED;
    public static HResults CORDBG_E_ILLEGAL_SHUTDOWN_ORDER;
    public static HResults CORDBG_E_CANNOT_DEBUG_FIBER_PROCESS;
    public static HResults CORDBG_E_MUST_BE_IN_CREATE_PROCESS;
    public static HResults CORDBG_E_DETACH_FAILED_OUTSTANDING_EVALS;
    public static HResults CORDBG_E_DETACH_FAILED_OUTSTANDING_STEPPERS;
    public static HResults CORDBG_E_CANT_INTEROP_STEP_OUT;
    public static HResults CORDBG_E_DETACH_FAILED_OUTSTANDING_BREAKPOINTS;
    public static HResults CORDBG_E_ILLEGAL_IN_STACK_OVERFLOW;
    public static HResults CORDBG_E_ILLEGAL_AT_GC_UNSAFE_POINT;
    public static HResults CORDBG_E_ILLEGAL_IN_PROLOG;
    public static HResults CORDBG_E_ILLEGAL_IN_NATIVE_CODE;
    public static HResults CORDBG_E_ILLEGAL_IN_OPTIMIZED_CODE;
    public static HResults CORDBG_E_APPDOMAIN_MISMATCH;
    public static HResults CORDBG_E_CONTEXT_UNVAILABLE;
    public static HResults CORDBG_E_UNCOMPATIBLE_PLATFORMS;
    public static HResults CORDBG_E_DEBUGGING_DISABLED;
    public static HResults CORDBG_E_DETACH_FAILED_ON_ENC;
    public static HResults CORDBG_E_CURRENT_EXCEPTION_IS_OUTSIDE_CURRENT_EXECUTION_SCOPE;
    public static HResults CORDBG_E_HELPER_MAY_DEADLOCK;
    public static HResults CORDBG_E_MISSING_METADATA;
    public static HResults CORDBG_E_TARGET_INCONSISTENT;
    public static HResults CORDBG_E_DETACH_FAILED_OUTSTANDING_TARGET_RESOURCES;
    public static HResults CORDBG_E_TARGET_READONLY;
    public static HResults CORDBG_E_MISMATCHED_CORWKS_AND_DACWKS_DLLS;
    public static HResults CORDBG_E_MODULE_LOADED_FROM_DISK;
    public static HResults CORDBG_E_SYMBOLS_NOT_AVAILABLE;
    public static HResults CORDBG_E_DEBUG_COMPONENT_MISSING;
    public static HResults CORDBG_E_REMOTE_MISMATCHED_CERTS;
    public static HResults CORDBG_E_REMOTE_NETWORK_FAILURE;
    public static HResults CORDBG_E_REMOTE_NO_LISTENER;
    public static HResults CORDBG_E_REMOTE_UNKNOWN_TARGET;
    public static HResults CORDBG_E_REMOTE_INVALID_CONFIG;
    public static HResults CORDBG_E_REMOTE_MISMATCHED_PROTOCOLS;
    public static HResults CORDBG_E_LIBRARY_PROVIDER_ERROR;
    public static HResults CORDBG_E_NOT_CLR;
    public static HResults CORDBG_E_MISSING_DATA_TARGET_INTERFACE;
    public static HResults CORDBG_E_UNSUPPORTED_DEBUGGING_MODEL;
    public static HResults CORDBG_E_UNSUPPORTED_FORWARD_COMPAT;
    public static HResults CORDBG_E_UNSUPPORTED_VERSION_STRUCT;
    public static HResults CORDBG_E_READVIRTUAL_FAILURE;
    public static HResults CORDBG_E_VALUE_POINTS_TO_FUNCTION;
    public static HResults CORDBG_E_CORRUPT_OBJECT;
    public static HResults CORDBG_E_GC_STRUCTURES_INVALID;
    public static HResults CORDBG_E_INVALID_OPCODE;
    public static HResults CORDBG_E_UNSUPPORTED;
    public static HResults CORDBG_E_MISSING_DEBUGGER_EXPORTS;
    public static HResults CORDBG_E_DATA_TARGET_ERROR;
    public static HResults CORDBG_E_CODE_HAS_NO_METADATA;
    public static HResults CORDBG_E_CODE_UNRECOGNIZED;
    public static HResults CORDBG_E_NO_IMAGE_AVAILABLE;
    public static HResults CORDBG_E_TYPE_NOT_FOUND;
    public static HResults CORDBG_E_VTABLE_HAS_NO_METADATA;
    public static HResults CORDBG_E_NO_GENERIC_INFO;
    public static HResults PEFMT_E_NO_CONTENTS;
    public static HResults PEFMT_E_NO_NTHEADERS;
    public static HResults PEFMT_E_64BIT;
    public static HResults PEFMT_E_32BIT;
    public static HResults PEFMT_E_NO_CORHEADER;
    public static HResults PEFMT_E_NOT_ILONLY;
    public static HResults PEFMT_E_IMPORT_DLLS;
    public static HResults PEFMT_E_EXE_NOENTRYPOINT;
    public static HResults PEFMT_E_BASE_RELOCS;
    public static HResults PEFMT_E_ENTRYPOINT;
    public static HResults PEFMT_E_ZERO_SIZEOFCODE;
    public static HResults PEFMT_E_BAD_CORHEADER;
    public static HResults NGEN_E_SYS_ASM_NI_MISSING;
    public static HResults NGEN_E_EXE_MACHINE_TYPE_MISMATCH;
    public static HResults NGEN_E_ASSEMBLY_EXCLUSION_FILE_PARSE_ERROR;
    public static HResults NGEN_E_HARDBOUND_DEPENDENCY_MISSING;
    public static HResults NGEN_E_NOT_RUNNING_IN_EXPECTED_PACKAGE;
    public static HResults NGEN_E_FILE_NOT_ASSEMBLY;
    public static HResults CLR_E_BIND_ASSEMBLY_VERSION_TOO_LOW;
    public static HResults CLR_E_BIND_ASSEMBLY_PUBLIC_KEY_MISMATCH;
    public static HResults CLR_E_BIND_IMAGE_UNAVAILABLE;
    public static HResults CLR_E_BIND_UNRECOGNIZED_IDENTITY_FORMAT;
    public static HResults CLR_E_BIND_ASSEMBLY_NOT_FOUND;
    public static HResults CLR_E_BIND_TYPE_NOT_FOUND;
    public static HResults CLR_E_BIND_SYS_ASM_NI_MISSING;
    public static HResults CLR_E_BIND_NI_SECURITY_FAILURE;
    public static HResults CLR_E_BIND_NI_DEP_IDENTITY_MISMATCH;
    public static HResults CLR_E_GC_OOM;
    public static HResults COR_E_COMEMULATE;
    public static HResults COR_E_INSUFFICIENTMEMORY;
    public static HResults COR_E_RUNTIMEWRAPPED;
    public static HResults COR_E_SAFEHANDLEMISSINGATTRIBUTE;
    public static HResults COR_E_THREADSTART;
    public static HResults COR_E_UNSUPPORTEDFORMAT;
    public static HResults DB_E_ABORTLIMITREACHED;
    public static HResults DB_E_ALREADYINITIALIZED;
    public static HResults DB_E_ASYNCNOTSUPPORTED;
    public static HResults DB_E_BADACCESSORFLAGS;
    public static HResults DB_E_BADACCESSORHANDLE;
    public static HResults DB_E_BADACCESSORTYPE;
    public static HResults DB_E_BADBINDINFO;
    public static HResults DB_E_BADBOOKMARK;
    public static HResults DB_E_BADCHAPTER;
    public static HResults DB_E_BADCOLUMNID;
    public static HResults DB_E_BADCOMMANDFLAGS;
    public static HResults DB_E_BADCOMMANDID;
    public static HResults DB_E_BADCOMPAREOP;
    public static HResults DB_E_BADCONSTRAINTFORM;
    public static HResults DB_E_BADCONSTRAINTID;
    public static HResults DB_E_BADCONSTRAINTTYPE;
    public static HResults DB_E_BADCONVERTFLAG;
    public static HResults DB_E_BADCOPY;
    public static HResults DB_E_BADDEFERRABILITY;
    public static HResults DB_E_BADDYNAMICERRORID;
    public static HResults DB_E_BADHRESULT;
    public static HResults DB_E_BADINDEXID;
    public static HResults DB_E_BADINITSTRING;
    public static HResults DB_E_BADLOCKMODE;
    public static HResults DB_E_BADLOOKUPID;
    public static HResults DB_E_BADMATCHTYPE;
    public static HResults DB_E_BADORDINAL;
    public static HResults DB_E_BADPARAMETERNAME;
    public static HResults DB_E_BADPRECISION;
    public static HResults DB_E_BADPROPERTYVALUE;
    public static HResults DB_E_BADRATIO;
    public static HResults DB_E_BADRECORDNUM;
    public static HResults DB_E_BADREGIONHANDLE;
    public static HResults DB_E_BADROWHANDLE;
    public static HResults DB_E_BADSCALE;
    public static HResults DB_E_BADSOURCEHANDLE;
    public static HResults DB_E_BADSTARTPOSITION;
    public static HResults DB_E_BADSTATUSVALUE;
    public static HResults DB_E_BADSTORAGEFLAG;
    public static HResults DB_E_BADSTORAGEFLAGS;
    public static HResults DB_E_BADTABLEID;
    public static HResults DB_E_BADTYPE;
    public static HResults DB_E_BADTYPENAME;
    public static HResults DB_E_BADUPDATEDELETERULE;
    public static HResults DB_E_BADVALUES;
    public static HResults DB_E_BOOKMARKSKIPPED;
    public static HResults DB_E_BYREFACCESSORNOTSUPPORTED;
    public static HResults DB_E_CANCELED;
    public static HResults DB_E_CANNOTCONNECT;
    public static HResults DB_E_CANNOTFREE;
    public static HResults DB_E_CANNOTRESTART;
    public static HResults DB_E_CANTCANCEL;
    public static HResults DB_E_CANTCONVERTVALUE;
    public static HResults DB_E_CANTFETCHBACKWARDS;
    public static HResults DB_E_CANTFILTER;
    public static HResults DB_E_CANTORDER;
    public static HResults DB_E_CANTSCROLLBACKWARDS;
    public static HResults DB_E_CANTTRANSLATE;
    public static HResults DB_E_CHAPTERNOTRELEASED;
    public static HResults DB_E_COMMANDNOTPERSISTED;
    public static HResults DB_E_CONCURRENCYVIOLATION;
    public static HResults DB_E_COSTLIMIT;
    public static HResults DB_E_DATAOVERFLOW;
    public static HResults DB_E_DELETEDROW;
    public static HResults DB_E_DIALECTNOTSUPPORTED;
    public static HResults DB_E_DROPRESTRICTED;
    public static HResults DB_E_DUPLICATECOLUMNID;
    public static HResults DB_E_DUPLICATECONSTRAINTID;
    public static HResults DB_E_DUPLICATEDATASOURCE;
    public static HResults DB_E_DUPLICATEID;
    public static HResults DB_E_DUPLICATEINDEXID;
    public static HResults DB_E_DUPLICATETABLEID;
    public static HResults DB_E_ERRORSINCOMMAND;
    public static HResults DB_E_ERRORSOCCURRED;
    public static HResults DB_E_GOALREJECTED;
    public static HResults DB_E_INDEXINUSE;
    public static HResults DB_E_INTEGRITYVIOLATION;
    public static HResults DB_E_INVALID;
    public static HResults DB_E_INVALIDTRANSITION;
    public static HResults DB_E_LIMITREJECTED;
    public static HResults DB_E_MAXPENDCHANGESEXCEEDED;
    public static HResults DB_E_MISMATCHEDPROVIDER;
    public static HResults DB_E_MULTIPLESTATEMENTS;
    public static HResults DB_E_MULTIPLESTORAGE;
    public static HResults DB_E_NEWLYINSERTED;
    public static HResults DB_E_NOAGGREGATION;
    public static HResults DB_E_NOCOLUMN;
    public static HResults DB_E_NOCOMMAND;
    public static HResults DB_E_NOINDEX;
    public static HResults DB_E_NOLOCALE;
    public static HResults DB_E_NONCONTIGUOUSRANGE;
    public static HResults DB_E_NOPROVIDERSREGISTERED;
    public static HResults DB_E_NOQUERY;
    public static HResults DB_E_NOSOURCEOBJECT;
    public static HResults DB_E_NOTABLE;
    public static HResults DB_E_NOTAREFERENCECOLUMN;
    public static HResults DB_E_NOTASUBREGION;
    public static HResults DB_E_NOTCOLLECTION;
    public static HResults DB_E_NOTFOUND;
    public static HResults DB_E_NOTPREPARED;
    public static HResults DB_E_NOTREENTRANT;
    public static HResults DB_E_NOTSUPPORTED;
    public static HResults DB_E_NULLACCESSORNOTSUPPORTED;
    public static HResults DB_E_OBJECTCREATIONLIMITREACHED;
    public static HResults DB_E_OBJECTMISMATCH;
    public static HResults DB_E_OBJECTOPEN;
    public static HResults DB_E_OUTOFSPACE;
    public static HResults DB_E_PARAMNOTOPTIONAL;
    public static HResults DB_E_PARAMUNAVAILABLE;
    public static HResults DB_E_PENDINGCHANGES;
    public static HResults DB_E_PENDINGINSERT;
    public static HResults DB_E_REOLEDBNLY;
    public static HResults DB_E_REOLEDBNLYACCESSOR;
    public static HResults DB_E_RESOURCEEXISTS;
    public static HResults DB_E_RESOURCELOCKED;
    public static HResults DB_E_RESOURCEOUTOFSCOPE;
    public static HResults DB_E_ROWLIMITEXCEEDED;
    public static HResults DB_E_ROWSETINCOMMAND;
    public static HResults DB_E_ROWSNOTRELEASED;
    public static HResults DB_E_SCHEMAVIOLATION;
    public static HResults DB_E_TABLEINUSE;
    public static HResults DB_E_TIMEOUT;
    public static HResults DB_E_UNSUPPORTEDCONVERSION;
    public static HResults DB_E_WRITEONLYACCESSOR;
    public static HResults DB_S_ASYNCHRONOUS;
    public static HResults DB_S_BADROWHANDLE;
    public static HResults DB_S_BOOKMARKSKIPPED;
    public static HResults DB_S_BUFFERFULL;
    public static HResults DB_S_CANTRELEASE;
    public static HResults DB_S_COLUMNSCHANGED;
    public static HResults DB_S_COLUMNTYPEMISMATCH;
    public static HResults DB_S_COMMANDREEXECUTED;
    public static HResults DB_S_DELETEDROW;
    public static HResults DB_S_DIALECTIGNORED;
    public static HResults DB_S_ENDOFROWSET;
    public static HResults DB_S_ERRORSOCCURRED;
    public static HResults DB_S_ERRORSRETURNED;
    public static HResults DB_S_GOALCHANGED;
    public static HResults DB_S_LOCKUPGRADED;
    public static HResults DB_S_MULTIPLECHANGES;
    public static HResults DB_S_NONEXTROWSET;
    public static HResults DB_S_NORESULT;
    public static HResults DB_S_NOROWSPECIFICCOLUMNS;
    public static HResults DB_S_NOTSINGLETON;
    public static HResults DB_S_PARAMUNAVAILABLE;
    public static HResults DB_S_PROPERTIESCHANGED;
    public static HResults DB_S_ROWLIMITEXCEEDED;
    public static HResults DB_S_STOPLIMITREACHED;
    public static HResults DB_S_TOOMANYCHANGES;
    public static HResults DB_S_TYPEINFOOVERRIDDEN;
    public static HResults DB_S_UNWANTEDOPERATION;
    public static HResults DB_S_UNWANTEDPHASE;
    public static HResults DB_S_UNWANTEDREASON;
    public static HResults DB_SEC_E_AUTH_FAILED;
    public static HResults DB_SEC_E_PERMISSIONDENIED;
    public static HResults DB_SEC_E_SAFEMODE_DENIED;
    public static HResults MD_E_BADCOORDINATE;
    public static HResults MD_E_BADTUPLE;
    public static HResults MD_E_INVALIDAXIS;
    public static HResults MD_E_INVALIDCELLRANGE;
    public static HResults BUFFER_E_DEST_TOO_SMALL;
    public static HResults BUFFER_E_LOCKED;
    public static HResults BUFFER_E_READONLY;
    public static HResults BUFFER_E_READONLY_REGION;
    public static HResults BUFFER_E_SCC_READONLY;
    public static HResults BUFFER_E_TIMEOUT;
    public static HResults MARKER_E_BUFFERDESTROYED;
    public static HResults MARKER_E_INVALIDATED;
    public static HResults VIEW_E_LOCATION_HIDDEN;
    public static HResults VIEW_E_NO_BOOKMARKS;
    public static HResults VIEW_E_NO_DEBUGGER;
    public static HResults VIEW_E_USERREADONLY;
    public static HResults LINKEDUNDO_E_INTERVENING_ACTION;
    public static HResults UNDO_E_CLIENTABORT;
    public static HResults TIP_S_ONLYIFNOMARKER;
    public static HResults STG_E_INVALIDCODEPAGE;
    public static HResults STG_E_NOTTEXT;
    public static HResults STG_S_DATALOSS;
    public static HResults COR_E_DIRECTORYNOTFOUND;
    public static HResults COR_E_ENDOFSTREAM;
    public static HResults COR_E_FILENOTFOUND;
    public static HResults COR_E_PATHTOOLONG;
    public static HResults COR_E_ISOSTORE;
    public static HResults AdapterMapping;
    public static HResults Configuration;
    public static HResults Data;
    public static HResults DataAdapter;
    public static HResults DataConstraint;
    public static HResults DataDeletedRowInaccessible;
    public static HResults DataDuplicateName;
    public static HResults DataInRowChangingEvent;
    public static HResults DataInvalidConstraint;
    public static HResults DataMissingPrimaryKey;
    public static HResults DataNoNullAllowed;
    public static HResults DataReadOnly;
    public static HResults DataRowNotInTable;
    public static HResults DataVersionNotFound;
    public static HResults DBConcurrency;
    public static HResults EFail;
    public static HResults Install;
    public static HResults InternalBufferOverflow;
    public static HResults InvalidUdt;
    public static HResults License;
    public static HResults NteBadKeySet;
    public static HResults OdbcException;
    public static HResults OperationAborted;
    public static HResults OracleException;
    public static HResults ServiceControllerTimeout;
    public static HResults SqlException;
    public static HResults SqlNullValue;
    public static HResults SqlTruncate;
    public static HResults SqlType;
    public static HResults StrongTyping;
    public static HResults Win32AccessDenied;
    public static HResults Win32InvalidHandle;
    public static HResults Xml;
    public static HResults XmlSchema;
    public static HResults XmlXPath;
    public static HResults XmlXslt;
    public static HResults E_FILENOTFOUND;
    public static HResults E_INSUFFICIENT_BUFFER;
    public static HResults E_INVALID_DATA;
    public static HResults E_PATHNOTFOUND;
    public static HResults ERROR_NOT_SUPPORTED;
    public static HResults ERROR_TOO_MANY_CMDS;
    public static HResults WSAECONNABORTED;
    public static HResults WSAECONNRESET;
    public static HResults FACILITY_NT_BIT;
    public static HResults FACILITY_MASK;
    public static HResults FACILITY_WINCODEC_ERROR;
    public static HResults COMPONENT_MASK;
    public static HResults COMPONENT_WINCODEC_ERROR;
    public static HResults D3DERR_OUTOFVIDEOMEMORY;
    public static HResults HRESULT_ERROR_REVISION_MISMATCH;
    public static HResults OLECMDERR_E_FIRST;
    public static HResults OLECMDERR_E_NOTSUPPORTED;
    public static HResults OLECMDERR_E_DISABLED;
    public static HResults OLECMDERR_E_NOHELP;
    public static HResults OLECMDERR_E_CANCELED;
    public static HResults OLECMDERR_E_UNKNOWNGROUP;
    public static HResults E_PDB_OK;
    public static HResults E_PDB_USAGE;
    public static HResults E_PDB_OUT_OF_MEMORY;
    public static HResults E_PDB_FILE_SYSTEM;
    public static HResults E_PDB_NOT_FOUND;
    public static HResults E_PDB_INVALID_SIG;
    public static HResults E_PDB_INVALID_AGE;
    public static HResults E_PDB_PRECOMP_REQUIRED;
    public static HResults E_PDB_OUT_OF_TI;
    public static HResults E_PDB_NOT_IMPLEMENTED;
    public static HResults E_PDB_V1_PDB;
    public static HResults E_PDB_FORMAT;
    public static HResults E_PDB_LIMIT;
    public static HResults E_PDB_CORRUPT;
    public static HResults E_PDB_TI16;
    public static HResults E_PDB_ACCESS_DENIED;
    public static HResults E_PDB_ILLEGAL_TYPE_EDIT;
    public static HResults E_PDB_INVALID_EXECUTABLE;
    public static HResults E_PDB_DBG_NOT_FOUND;
    public static HResults E_PDB_NO_DEBUG_INFO;
    public static HResults E_PDB_INVALID_EXE_TIMESTAMP;
    public static HResults E_PDB_RESERVED;
    public static HResults E_PDB_DEBUG_INFO_NOT_IN_PDB;
    public static HResults E_PDB_SYMSRV_BAD_CACHE_PATH;
    public static HResults E_PDB_SYMSRV_CACHE_FULL;
    public static HResults E_PDB_MAX;
    public static HResults WIN32_ERROR_INVALID_FUNCTION;
    public static HResults WIN32_ERROR_FILE_NOT_FOUND;
    public static HResults WIN32_ERROR_PATH_NOT_FOUND;
    public static HResults WIN32_ERROR_TOO_MANY_OPEN_FILES;
    public static HResults WIN32_ERROR_ACCESS_DENIED;
    public static HResults WIN32_ERROR_INVALID_HANDLE;
    public static HResults WIN32_ERROR_ARENA_TRASHED;
    public static HResults WIN32_ERROR_NOT_ENOUGH_MEMORY;
    public static HResults WIN32_ERROR_INVALID_BLOCK;
    public static HResults WIN32_ERROR_BAD_ENVIRONMENT;
    public static HResults WIN32_ERROR_BAD_FORMAT;
    public static HResults WIN32_ERROR_INVALID_ACCESS;
    public static HResults WIN32_ERROR_INVALID_DATA;
    public static HResults WIN32_ERROR_OUTOFMEMORY;
    public static HResults WIN32_ERROR_INVALID_DRIVE;
    public static HResults WIN32_ERROR_CURRENT_DIRECTORY;
    public static HResults WIN32_ERROR_NOT_SAME_DEVICE;
    public static HResults WIN32_ERROR_NO_MORE_FILES;
    public static HResults WIN32_ERROR_WRITE_PROTECT;
    public static HResults WIN32_ERROR_BAD_UNIT;
    public static HResults WIN32_ERROR_NOT_READY;
    public static HResults WIN32_ERROR_BAD_COMMAND;
    public static HResults WIN32_ERROR_CRC;
    public static HResults WIN32_ERROR_BAD_LENGTH;
    public static HResults WIN32_ERROR_SEEK;
    public static HResults WIN32_ERROR_NOT_DOS_DISK;
    public static HResults WIN32_ERROR_SECTOR_NOT_FOUND;
    public static HResults WIN32_ERROR_OUT_OF_PAPER;
    public static HResults WIN32_ERROR_WRITE_FAULT;
    public static HResults WIN32_ERROR_READ_FAULT;
    public static HResults WIN32_ERROR_GEN_FAILURE;
    public static HResults WIN32_ERROR_SHARING_VIOLATION;
    public static HResults WIN32_ERROR_LOCK_VIOLATION;
    public static HResults WIN32_ERROR_WRONG_DISK;
    public static HResults WIN32_ERROR_SHARING_BUFFER_EXCEEDED;
    public static HResults WIN32_ERROR_HANDLE_EOF;
    public static HResults WIN32_ERROR_HANDLE_DISK_FULL;
    public static HResults WIN32_ERROR_NOT_SUPPORTED;
    public static HResults WIN32_ERROR_REM_NOT_LIST;
    public static HResults WIN32_ERROR_DUP_NAME;
    public static HResults WIN32_ERROR_BAD_NETPATH;
    public static HResults WIN32_ERROR_NETWORK_BUSY;
    public static HResults WIN32_ERROR_DEV_NOT_EXIST;
    public static HResults WIN32_ERROR_TOO_MANY_CMDS;
    public static HResults WIN32_ERROR_ADAP_HDW_ERR;
    public static HResults WIN32_ERROR_BAD_NET_RESP;
    public static HResults WIN32_ERROR_UNEXP_NET_ERR;
    public static HResults WIN32_ERROR_BAD_REM_ADAP;
    public static HResults WIN32_ERROR_PRINTQ_FULL;
    public static HResults WIN32_ERROR_NO_SPOOL_SPACE;
    public static HResults WIN32_ERROR_PRINT_CANCELLED;
    public static HResults WIN32_ERROR_NETNAME_DELETED;
    public static HResults WIN32_ERROR_NETWORK_ACCESS_DENIED;
    public static HResults WIN32_ERROR_BAD_DEV_TYPE;
    public static HResults WIN32_ERROR_BAD_NET_NAME;
    public static HResults WIN32_ERROR_TOO_MANY_NAMES;
    public static HResults WIN32_ERROR_TOO_MANY_SESS;
    public static HResults WIN32_ERROR_SHARING_PAUSED;
    public static HResults WIN32_ERROR_REQ_NOT_ACCEP;
    public static HResults WIN32_ERROR_REDIR_PAUSED;
    public static HResults WIN32_ERROR_FILE_EXISTS;
    public static HResults WIN32_ERROR_CANNOT_MAKE;
    public static HResults WIN32_ERROR_FAIL_I24;
    public static HResults WIN32_ERROR_OUT_OF_STRUCTURES;
    public static HResults WIN32_ERROR_ALREADY_ASSIGNED;
    public static HResults WIN32_ERROR_INVALID_PASSWORD;
    public static HResults WIN32_ERROR_INVALID_PARAMETER;
    public static HResults WIN32_ERROR_NET_WRITE_FAULT;
    public static HResults WIN32_ERROR_NO_PROC_SLOTS;
    public static HResults WIN32_ERROR_TOO_MANY_SEMAPHORES;
    public static HResults WIN32_ERROR_EXCL_SEM_ALREADY_OWNED;
    public static HResults WIN32_ERROR_SEM_IS_SET;
    public static HResults WIN32_ERROR_TOO_MANY_SEM_REQUESTS;
    public static HResults WIN32_ERROR_INVALID_AT_INTERRUPT_TIME;
    public static HResults WIN32_ERROR_SEM_OWNER_DIED;
    public static HResults WIN32_ERROR_SEM_USER_LIMIT;
    public static HResults WIN32_ERROR_DISK_CHANGE;
    public static HResults WIN32_ERROR_DRIVE_LOCKED;
    public static HResults WIN32_ERROR_BROKEN_PIPE;
    public static HResults WIN32_ERROR_OPEN_FAILED;
    public static HResults WIN32_ERROR_BUFFER_OVERFLOW;
    public static HResults WIN32_ERROR_DISK_FULL;
    public static HResults WIN32_ERROR_NO_MORE_SEARCH_HANDLES;
    public static HResults WIN32_ERROR_INVALID_TARGET_HANDLE;
    public static HResults WIN32_ERROR_INVALID_CATEGORY;
    public static HResults WIN32_ERROR_INVALID_VERIFY_SWITCH;
    public static HResults WIN32_ERROR_BAD_DRIVER_LEVEL;
    public static HResults WIN32_ERROR_CALL_NOT_IMPLEMENTED;
    public static HResults WIN32_ERROR_SEM_TIMEOUT;
    public static HResults WIN32_ERROR_INSUFFICIENT_BUFFER;
    public static HResults WIN32_ERROR_INVALID_NAME;
    public static HResults WIN32_ERROR_INVALID_LEVEL;
    public static HResults WIN32_ERROR_NO_VOLUME_LABEL;
    public static HResults WIN32_ERROR_MOD_NOT_FOUND;
    public static HResults WIN32_ERROR_PROC_NOT_FOUND;
    public static HResults WIN32_ERROR_WAIT_NO_CHILDREN;
    public static HResults WIN32_ERROR_CHILD_NOT_COMPLETE;
    public static HResults WIN32_ERROR_DIRECT_ACCESS_HANDLE;
    public static HResults WIN32_ERROR_NEGATIVE_SEEK;
    public static HResults WIN32_ERROR_SEEK_ON_DEVICE;
    public static HResults WIN32_ERROR_IS_JOIN_TARGET;
    public static HResults WIN32_ERROR_IS_JOINED;
    public static HResults WIN32_ERROR_IS_SUBSTED;
    public static HResults WIN32_ERROR_NOT_JOINED;
    public static HResults WIN32_ERROR_NOT_SUBSTED;
    public static HResults WIN32_ERROR_JOIN_TO_JOIN;
    public static HResults WIN32_ERROR_SUBST_TO_SUBST;
    public static HResults WIN32_ERROR_JOIN_TO_SUBST;
    public static HResults WIN32_ERROR_SUBST_TO_JOIN;
    public static HResults WIN32_ERROR_BUSY_DRIVE;
    public static HResults WIN32_ERROR_SAME_DRIVE;
    public static HResults WIN32_ERROR_DIR_NOT_ROOT;
    public static HResults WIN32_ERROR_DIR_NOT_EMPTY;
    public static HResults WIN32_ERROR_IS_SUBST_PATH;
    public static HResults WIN32_ERROR_IS_JOIN_PATH;
    public static HResults WIN32_ERROR_PATH_BUSY;
    public static HResults WIN32_ERROR_IS_SUBST_TARGET;
    public static HResults WIN32_ERROR_SYSTEM_TRACE;
    public static HResults WIN32_ERROR_INVALID_EVENT_COUNT;
    public static HResults WIN32_ERROR_TOO_MANY_MUXWAITERS;
    public static HResults WIN32_ERROR_INVALID_LIST_FORMAT;
    public static HResults WIN32_ERROR_LABEL_TOO_LONG;
    public static HResults WIN32_ERROR_TOO_MANY_TCBS;
    public static HResults WIN32_ERROR_SIGNAL_REFUSED;
    public static HResults WIN32_ERROR_DISCARDED;
    public static HResults WIN32_ERROR_NOT_LOCKED;
    public static HResults WIN32_ERROR_BAD_THREADID_ADDR;
    public static HResults WIN32_ERROR_BAD_ARGUMENTS;
    public static HResults WIN32_ERROR_BAD_PATHNAME;
    public static HResults WIN32_ERROR_SIGNAL_PENDING;
    public static HResults WIN32_ERROR_MAX_THRDS_REACHED;
    public static HResults WIN32_ERROR_LOCK_FAILED;
    public static HResults WIN32_ERROR_BUSY;
    public static HResults WIN32_ERROR_CANCEL_VIOLATION;
    public static HResults WIN32_ERROR_ATOMIC_LOCKS_NOT_SUPPORTED;
    public static HResults WIN32_ERROR_INVALID_SEGMENT_NUMBER;
    public static HResults WIN32_ERROR_INVALID_ORDINAL;
    public static HResults WIN32_ERROR_ALREADY_EXISTS;
    public static HResults WIN32_ERROR_INVALID_FLAG_NUMBER;
    public static HResults WIN32_ERROR_SEM_NOT_FOUND;
    public static HResults WIN32_ERROR_INVALID_STARTING_CODESEG;
    public static HResults WIN32_ERROR_INVALID_STACKSEG;
    public static HResults WIN32_ERROR_INVALID_MODULETYPE;
    public static HResults WIN32_ERROR_INVALID_EXE_SIGNATURE;
    public static HResults WIN32_ERROR_EXE_MARKED_INVALID;
    public static HResults WIN32_ERROR_BAD_EXE_FORMAT;
    public static HResults WIN32_ERROR_ITERATED_DATA_EXCEEDS_64k;
    public static HResults WIN32_ERROR_INVALID_MINALLOCSIZE;
    public static HResults WIN32_ERROR_DYNLINK_FROM_INVALID_RING;
    public static HResults WIN32_ERROR_IOPL_NOT_ENABLED;
    public static HResults WIN32_ERROR_INVALID_SEGDPL;
    public static HResults WIN32_ERROR_AUTODATASEG_EXCEEDS_64k;
    public static HResults WIN32_ERROR_RING2SEG_MUST_BE_MOVABLE;
    public static HResults WIN32_ERROR_RELOC_CHAIN_XEEDS_SEGLIM;
    public static HResults WIN32_ERROR_INFLOOP_IN_RELOC_CHAIN;
    public static HResults WIN32_ERROR_ENVVAR_NOT_FOUND;
    public static HResults WIN32_ERROR_NO_SIGNAL_SENT;
    public static HResults WIN32_ERROR_FILENAME_EXCED_RANGE;
    public static HResults WIN32_ERROR_RING2_STACK_IN_USE;
    public static HResults WIN32_ERROR_META_EXPANSION_TOO_LONG;
    public static HResults WIN32_ERROR_INVALID_SIGNAL_NUMBER;
    public static HResults WIN32_ERROR_THREAD_1_INACTIVE;
    public static HResults WIN32_ERROR_LOCKED;
    public static HResults WIN32_ERROR_TOO_MANY_MODULES;
    public static HResults WIN32_ERROR_NESTING_NOT_ALLOWED;
    public static HResults WIN32_ERROR_EXE_MACHINE_TYPE_MISMATCH;
    public static HResults WIN32_ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY;
    public static HResults WIN32_ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY;
    public static HResults WIN32_ERROR_BAD_PIPE;
    public static HResults WIN32_ERROR_PIPE_BUSY;
    public static HResults WIN32_ERROR_NO_DATA;
    public static HResults WIN32_ERROR_PIPE_NOT_CONNECTED;
    public static HResults WIN32_ERROR_MORE_DATA;
    public static HResults WIN32_ERROR_VC_DISCONNECTED;
    public static HResults WIN32_ERROR_INVALID_EA_NAME;
    public static HResults WIN32_ERROR_EA_LIST_INCONSISTENT;
    public static HResults WIN32_WAIT_TIMEOUT;
    public static HResults WIN32_ERROR_NO_MORE_ITEMS;
    public static HResults WIN32_ERROR_CANNOT_COPY;
    public static HResults WIN32_ERROR_DIRECTORY;
    public static HResults WIN32_ERROR_EAS_DIDNT_FIT;
    public static HResults WIN32_ERROR_EA_FILE_CORRUPT;
    public static HResults WIN32_ERROR_EA_TABLE_FULL;
    public static HResults WIN32_ERROR_INVALID_EA_HANDLE;
    public static HResults WIN32_ERROR_EAS_NOT_SUPPORTED;
    public static HResults WIN32_ERROR_NOT_OWNER;
    public static HResults WIN32_ERROR_TOO_MANY_POSTS;
    public static HResults WIN32_ERROR_PARTIAL_COPY;
    public static HResults WIN32_ERROR_OPLOCK_NOT_GRANTED;
    public static HResults WIN32_ERROR_INVALID_OPLOCK_PROTOCOL;
    public static HResults WIN32_ERROR_DISK_TOO_FRAGMENTED;
    public static HResults WIN32_ERROR_DELETE_PENDING;
    public static HResults WIN32_ERROR_MR_MID_NOT_FOUND;
    public static HResults WIN32_ERROR_SCOPE_NOT_FOUND;
    public static HResults WIN32_ERROR_INVALID_ADDRESS;
    public static HResults WIN32_ERROR_ARITHMETIC_OVERFLOW;
    public static HResults WIN32_ERROR_PIPE_CONNECTED;
    public static HResults WIN32_ERROR_PIPE_LISTENING;
    public static HResults WIN32_ERROR_EA_ACCESS_DENIED;
    public static HResults WIN32_ERROR_OPERATION_ABORTED;
    public static HResults WIN32_ERROR_IO_INCOMPLETE;
    public static HResults WIN32_ERROR_IO_PENDING;
    public static HResults WIN32_ERROR_NOACCESS;
    public static HResults WIN32_ERROR_SWAPERROR;
    public static HResults WIN32_ERROR_STACK_OVERFLOW;
    public static HResults WIN32_ERROR_INVALID_MESSAGE;
    public static HResults WIN32_ERROR_CAN_NOT_COMPLETE;
    public static HResults WIN32_ERROR_INVALID_FLAGS;
    public static HResults WIN32_ERROR_UNRECOGNIZED_VOLUME;
    public static HResults WIN32_ERROR_FILE_INVALID;
    public static HResults WIN32_ERROR_FULLSCREEN_MODE;
    public static HResults WIN32_ERROR_NO_TOKEN;
    public static HResults WIN32_ERROR_BADDB;
    public static HResults WIN32_ERROR_BADKEY;
    public static HResults WIN32_ERROR_CANTOPEN;
    public static HResults WIN32_ERROR_CANTREAD;
    public static HResults WIN32_ERROR_CANTWRITE;
    public static HResults WIN32_ERROR_REGISTRY_RECOVERED;
    public static HResults WIN32_ERROR_REGISTRY_CORRUPT;
    public static HResults WIN32_ERROR_REGISTRY_IO_FAILED;
    public static HResults WIN32_ERROR_NOT_REGISTRY_FILE;
    public static HResults WIN32_ERROR_KEY_DELETED;
    public static HResults WIN32_ERROR_NO_LOG_SPACE;
    public static HResults WIN32_ERROR_KEY_HAS_CHILDREN;
    public static HResults WIN32_ERROR_CHILD_MUST_BE_VOLATILE;
    public static HResults WIN32_ERROR_NOTIFY_ENUM_DIR;
    public static HResults WIN32_ERROR_DEPENDENT_SERVICES_RUNNING;
    public static HResults WIN32_ERROR_INVALID_SERVICE_CONTROL;
    public static HResults WIN32_ERROR_SERVICE_REQUEST_TIMEOUT;
    public static HResults WIN32_ERROR_SERVICE_NO_THREAD;
    public static HResults WIN32_ERROR_SERVICE_DATABASE_LOCKED;
    public static HResults WIN32_ERROR_SERVICE_ALREADY_RUNNING;
    public static HResults WIN32_ERROR_INVALID_SERVICE_ACCOUNT;
    public static HResults WIN32_ERROR_SERVICE_DISABLED;
    public static HResults WIN32_ERROR_CIRCULAR_DEPENDENCY;
    public static HResults WIN32_ERROR_SERVICE_DOES_NOT_EXIST;
    public static HResults WIN32_ERROR_SERVICE_CANNOT_ACCEPT_CTRL;
    public static HResults WIN32_ERROR_SERVICE_NOT_ACTIVE;
    public static HResults WIN32_ERROR_FAILED_SERVICE_CONTROLLER_CONNECT;
    public static HResults WIN32_ERROR_EXCEPTION_IN_SERVICE;
    public static HResults WIN32_ERROR_DATABASE_DOES_NOT_EXIST;
    public static HResults WIN32_ERROR_SERVICE_SPECIFIC_ERROR;
    public static HResults WIN32_ERROR_PROCESS_ABORTED;
    public static HResults WIN32_ERROR_SERVICE_DEPENDENCY_FAIL;
    public static HResults WIN32_ERROR_SERVICE_LOGON_FAILED;
    public static HResults WIN32_ERROR_SERVICE_START_HANG;
    public static HResults WIN32_ERROR_INVALID_SERVICE_LOCK;
    public static HResults WIN32_ERROR_SERVICE_MARKED_FOR_DELETE;
    public static HResults WIN32_ERROR_SERVICE_EXISTS;
    public static HResults WIN32_ERROR_ALREADY_RUNNING_LKG;
    public static HResults WIN32_ERROR_SERVICE_DEPENDENCY_DELETED;
    public static HResults WIN32_ERROR_BOOT_ALREADY_ACCEPTED;
    public static HResults WIN32_ERROR_SERVICE_NEVER_STARTED;
    public static HResults WIN32_ERROR_DUPLICATE_SERVICE_NAME;
    public static HResults WIN32_ERROR_DIFFERENT_SERVICE_ACCOUNT;
    public static HResults WIN32_ERROR_CANNOT_DETECT_DRIVER_FAILURE;
    public static HResults WIN32_ERROR_CANNOT_DETECT_PROCESS_ABORT;
    public static HResults WIN32_ERROR_NO_RECOVERY_PROGRAM;
    public static HResults WIN32_ERROR_SERVICE_NOT_IN_EXE;
    public static HResults WIN32_ERROR_NOT_SAFEBOOT_SERVICE;
    public static HResults WIN32_ERROR_END_OF_MEDIA;
    public static HResults WIN32_ERROR_FILEMARK_DETECTED;
    public static HResults WIN32_ERROR_BEGINNING_OF_MEDIA;
    public static HResults WIN32_ERROR_SETMARK_DETECTED;
    public static HResults WIN32_ERROR_NO_DATA_DETECTED;
    public static HResults WIN32_ERROR_PARTITION_FAILURE;
    public static HResults WIN32_ERROR_INVALID_BLOCK_LENGTH;
    public static HResults WIN32_ERROR_DEVICE_NOT_PARTITIONED;
    public static HResults WIN32_ERROR_UNABLE_TO_LOCK_MEDIA;
    public static HResults WIN32_ERROR_UNABLE_TO_UNLOAD_MEDIA;
    public static HResults WIN32_ERROR_MEDIA_CHANGED;
    public static HResults WIN32_ERROR_BUS_RESET;
    public static HResults WIN32_ERROR_NO_MEDIA_IN_DRIVE;
    public static HResults WIN32_ERROR_NO_UNICODE_TRANSLATION;
    public static HResults WIN32_ERROR_DLL_INIT_FAILED;
    public static HResults WIN32_ERROR_SHUTDOWN_IN_PROGRESS;
    public static HResults WIN32_ERROR_NO_SHUTDOWN_IN_PROGRESS;
    public static HResults WIN32_ERROR_IO_DEVICE;
    public static HResults WIN32_ERROR_SERIAL_NO_DEVICE;
    public static HResults WIN32_ERROR_IRQ_BUSY;
    public static HResults WIN32_ERROR_MORE_WRITES;
    public static HResults WIN32_ERROR_COUNTER_TIMEOUT;
    public static HResults WIN32_ERROR_FLOPPY_ID_MARK_NOT_FOUND;
    public static HResults WIN32_ERROR_FLOPPY_WRONG_CYLINDER;
    public static HResults WIN32_ERROR_FLOPPY_UNKNOWN_ERROR;
    public static HResults WIN32_ERROR_FLOPPY_BAD_REGISTERS;
    public static HResults WIN32_ERROR_DISK_RECALIBRATE_FAILED;
    public static HResults WIN32_ERROR_DISK_OPERATION_FAILED;
    public static HResults WIN32_ERROR_DISK_RESET_FAILED;
    public static HResults WIN32_ERROR_EOM_OVERFLOW;
    public static HResults WIN32_ERROR_NOT_ENOUGH_SERVER_MEMORY;
    public static HResults WIN32_ERROR_POSSIBLE_DEADLOCK;
    public static HResults WIN32_ERROR_MAPPED_ALIGNMENT;
    public static HResults WIN32_ERROR_SET_POWER_STATE_VETOED;
    public static HResults WIN32_ERROR_SET_POWER_STATE_FAILED;
    public static HResults WIN32_ERROR_TOO_MANY_LINKS;
    public static HResults WIN32_ERROR_OLD_WIN_VERSION;
    public static HResults WIN32_ERROR_APP_WRONG_OS;
    public static HResults WIN32_ERROR_SINGLE_INSTANCE_APP;
    public static HResults WIN32_ERROR_RMODE_APP;
    public static HResults WIN32_ERROR_INVALID_DLL;
    public static HResults WIN32_ERROR_NO_ASSOCIATION;
    public static HResults WIN32_ERROR_DDE_FAIL;
    public static HResults WIN32_ERROR_DLL_NOT_FOUND;
    public static HResults WIN32_ERROR_NO_MORE_USER_HANDLES;
    public static HResults WIN32_ERROR_MESSAGE_SYNC_ONLY;
    public static HResults WIN32_ERROR_SOURCE_ELEMENT_EMPTY;
    public static HResults WIN32_ERROR_DESTINATION_ELEMENT_FULL;
    public static HResults WIN32_ERROR_ILLEGAL_ELEMENT_ADDRESS;
    public static HResults WIN32_ERROR_MAGAZINE_NOT_PRESENT;
    public static HResults WIN32_ERROR_DEVICE_REINITIALIZATION_NEEDED;
    public static HResults WIN32_ERROR_DEVICE_REQUIRES_CLEANING;
    public static HResults WIN32_ERROR_DEVICE_DOOR_OPEN;
    public static HResults WIN32_ERROR_DEVICE_NOT_CONNECTED;
    public static HResults WIN32_ERROR_NOT_FOUND;
    public static HResults WIN32_ERROR_NO_MATCH;
    public static HResults WIN32_ERROR_SET_NOT_FOUND;
    public static HResults WIN32_ERROR_POINT_NOT_FOUND;
    public static HResults WIN32_ERROR_NO_TRACKING_SERVICE;
    public static HResults WIN32_ERROR_NO_VOLUME_ID;
    public static HResults WIN32_ERROR_UNABLE_TO_REMOVE_REPLACED;
    public static HResults WIN32_ERROR_UNABLE_TO_MOVE_REPLACEMENT;
    public static HResults WIN32_ERROR_UNABLE_TO_MOVE_REPLACEMENT_2;
    public static HResults WIN32_ERROR_JOURNAL_DELETE_IN_PROGRESS;
    public static HResults WIN32_ERROR_JOURNAL_NOT_ACTIVE;
    public static HResults WIN32_ERROR_POTENTIAL_FILE_FOUND;
    public static HResults WIN32_ERROR_JOURNAL_ENTRY_DELETED;
    public static HResults WIN32_ERROR_BAD_DEVICE;
    public static HResults WIN32_ERROR_CONNECTION_UNAVAIL;
    public static HResults WIN32_ERROR_DEVICE_ALREADY_REMEMBERED;
    public static HResults WIN32_ERROR_NO_NET_OR_BAD_PATH;
    public static HResults WIN32_ERROR_BAD_PROVIDER;
    public static HResults WIN32_ERROR_CANNOT_OPEN_PROFILE;
    public static HResults WIN32_ERROR_BAD_PROFILE;
    public static HResults WIN32_ERROR_NOT_CONTAINER;
    public static HResults WIN32_ERROR_EXTENDED_ERROR;
    public static HResults WIN32_ERROR_INVALID_GROUPNAME;
    public static HResults WIN32_ERROR_INVALID_COMPUTERNAME;
    public static HResults WIN32_ERROR_INVALID_EVENTNAME;
    public static HResults WIN32_ERROR_INVALID_DOMAINNAME;
    public static HResults WIN32_ERROR_INVALID_SERVICENAME;
    public static HResults WIN32_ERROR_INVALID_NETNAME;
    public static HResults WIN32_ERROR_INVALID_SHARENAME;
    public static HResults WIN32_ERROR_INVALID_PASSWORDNAME;
    public static HResults WIN32_ERROR_INVALID_MESSAGENAME;
    public static HResults WIN32_ERROR_INVALID_MESSAGEDEST;
    public static HResults WIN32_ERROR_SESSION_CREDENTIAL_CONFLICT;
    public static HResults WIN32_ERROR_REMOTE_SESSION_LIMIT_EXCEEDED;
    public static HResults WIN32_ERROR_DUP_DOMAINNAME;
    public static HResults WIN32_ERROR_NO_NETWORK;
    public static HResults WIN32_ERROR_CANCELLED;
    public static HResults WIN32_ERROR_USER_MAPPED_FILE;
    public static HResults WIN32_ERROR_CONNECTION_REFUSED;
    public static HResults WIN32_ERROR_GRACEFUL_DISCONNECT;
    public static HResults WIN32_ERROR_ADDRESS_ALREADY_ASSOCIATED;
    public static HResults WIN32_ERROR_ADDRESS_NOT_ASSOCIATED;
    public static HResults WIN32_ERROR_CONNECTION_INVALID;
    public static HResults WIN32_ERROR_CONNECTION_ACTIVE;
    public static HResults WIN32_ERROR_NETWORK_UNREACHABLE;
    public static HResults WIN32_ERROR_HOST_UNREACHABLE;
    public static HResults WIN32_ERROR_PROTOCOL_UNREACHABLE;
    public static HResults WIN32_ERROR_PORT_UNREACHABLE;
    public static HResults WIN32_ERROR_REQUEST_ABORTED;
    public static HResults WIN32_ERROR_CONNECTION_ABORTED;
    public static HResults WIN32_ERROR_RETRY;
    public static HResults WIN32_ERROR_CONNECTION_COUNT_LIMIT;
    public static HResults WIN32_ERROR_LOGIN_TIME_RESTRICTION;
    public static HResults WIN32_ERROR_LOGIN_WKSTA_RESTRICTION;
    public static HResults WIN32_ERROR_INCORRECT_ADDRESS;
    public static HResults WIN32_ERROR_ALREADY_REGISTERED;
    public static HResults WIN32_ERROR_SERVICE_NOT_FOUND;
    public static HResults WIN32_ERROR_NOT_AUTHENTICATED;
    public static HResults WIN32_ERROR_NOT_LOGGED_ON;
    public static HResults WIN32_ERROR_CONTINUE;
    public static HResults WIN32_ERROR_ALREADY_INITIALIZED;
    public static HResults WIN32_ERROR_NO_MORE_DEVICES;
    public static HResults WIN32_ERROR_NO_SUCH_SITE;
    public static HResults WIN32_ERROR_DOMAIN_CONTROLLER_EXISTS;
    public static HResults WIN32_ERROR_ONLY_IF_CONNECTED;
    public static HResults WIN32_ERROR_OVERRIDE_NOCHANGES;
    public static HResults WIN32_ERROR_BAD_USER_PROFILE;
    public static HResults WIN32_ERROR_NOT_SUPPORTED_ON_SBS;
    public static HResults WIN32_ERROR_SERVER_SHUTDOWN_IN_PROGRESS;
    public static HResults WIN32_ERROR_HOST_DOWN;
    public static HResults WIN32_ERROR_NON_ACCOUNT_SID;
    public static HResults WIN32_ERROR_NON_DOMAIN_SID;
    public static HResults WIN32_ERROR_APPHELP_BLOCK;
    public static HResults WIN32_ERROR_ACCESS_DISABLED_BY_POLICY;
    public static HResults WIN32_ERROR_REG_NAT_CONSUMPTION;
    public static HResults WIN32_ERROR_CSCSHARE_OFFLINE;
    public static HResults WIN32_ERROR_PKINIT_FAILURE;
    public static HResults WIN32_ERROR_SMARTCARD_SUBSYSTEM_FAILURE;
    public static HResults WIN32_ERROR_DOWNGRADE_DETECTED;
    public static HResults WIN32_ERROR_MACHINE_LOCKED;
    public static HResults WIN32_ERROR_CALLBACK_SUPPLIED_INVALID_DATA;
    public static HResults WIN32_ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED;
    public static HResults WIN32_ERROR_DRIVER_BLOCKED;
    public static HResults WIN32_ERROR_INVALID_IMPORT_OF_NON_DLL;
    public static HResults WIN32_ERROR_ACCESS_DISABLED_WEBBLADE;
    public static HResults WIN32_ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER;
    public static HResults WIN32_ERROR_RECOVERY_FAILURE;
    public static HResults WIN32_ERROR_ALREADY_FIBER;
    public static HResults WIN32_ERROR_ALREADY_THREAD;
    public static HResults WIN32_ERROR_STACK_BUFFER_OVERRUN;
    public static HResults WIN32_ERROR_PARAMETER_QUOTA_EXCEEDED;
    public static HResults WIN32_ERROR_DEBUGGER_INACTIVE;
    public static HResults WIN32_ERROR_DELAY_LOAD_FAILED;
    public static HResults WIN32_ERROR_VDM_DISALLOWED;
    public static HResults WIN32_ERROR_UNIDENTIFIED_ERROR;
    public static HResults WIN32_ERROR_NOT_ALL_ASSIGNED;
    public static HResults WIN32_ERROR_SOME_NOT_MAPPED;
    public static HResults WIN32_ERROR_NO_QUOTAS_FOR_ACCOUNT;
    public static HResults WIN32_ERROR_LOCAL_USER_SESSION_KEY;
    public static HResults WIN32_ERROR_NULL_LM_PASSWORD;
    public static HResults WIN32_ERROR_UNKNOWN_REVISION;
    public static HResults WIN32_ERROR_REVISION_MISMATCH;
    public static HResults WIN32_ERROR_INVALID_OWNER;
    public static HResults WIN32_ERROR_INVALID_PRIMARY_GROUP;
    public static HResults WIN32_ERROR_NO_IMPERSONATION_TOKEN;
    public static HResults WIN32_ERROR_CANT_DISABLE_MANDATORY;
    public static HResults WIN32_ERROR_NO_LOGON_SERVERS;
    public static HResults WIN32_ERROR_NO_SUCH_LOGON_SESSION;
    public static HResults WIN32_ERROR_NO_SUCH_PRIVILEGE;
    public static HResults WIN32_ERROR_PRIVILEGE_NOT_HELD;
    public static HResults WIN32_ERROR_INVALID_ACCOUNT_NAME;
    public static HResults WIN32_ERROR_USER_EXISTS;
    public static HResults WIN32_ERROR_NO_SUCH_USER;
    public static HResults WIN32_ERROR_GROUP_EXISTS;
    public static HResults WIN32_ERROR_NO_SUCH_GROUP;
    public static HResults WIN32_ERROR_MEMBER_IN_GROUP;
    public static HResults WIN32_ERROR_MEMBER_NOT_IN_GROUP;
    public static HResults WIN32_ERROR_LAST_ADMIN;
    public static HResults WIN32_ERROR_WRONG_PASSWORD;
    public static HResults WIN32_ERROR_ILL_FORMED_PASSWORD;
    public static HResults WIN32_ERROR_PASSWORD_RESTRICTION;
    public static HResults WIN32_ERROR_LOGON_FAILURE;
    public static HResults WIN32_ERROR_ACCOUNT_RESTRICTION;
    public static HResults WIN32_ERROR_INVALID_LOGON_HOURS;
    public static HResults WIN32_ERROR_INVALID_WORKSTATION;
    public static HResults WIN32_ERROR_PASSWORD_EXPIRED;
    public static HResults WIN32_ERROR_ACCOUNT_DISABLED;
    public static HResults WIN32_ERROR_NONE_MAPPED;
    public static HResults WIN32_ERROR_TOO_MANY_LUIDS_REQUESTED;
    public static HResults WIN32_ERROR_LUIDS_EXHAUSTED;
    public static HResults WIN32_ERROR_INVALID_SUB_AUTHORITY;
    public static HResults WIN32_ERROR_INVALID_ACL;
    public static HResults WIN32_ERROR_INVALID_SID;
    public static HResults WIN32_ERROR_INVALID_SECURITY_DESCR;
    public static HResults WIN32_ERROR_BAD_INHERITANCE_ACL;
    public static HResults WIN32_ERROR_SERVER_DISABLED;
    public static HResults WIN32_ERROR_SERVER_NOT_DISABLED;
    public static HResults WIN32_ERROR_INVALID_ID_AUTHORITY;
    public static HResults WIN32_ERROR_ALLOTTED_SPACE_EXCEEDED;
    public static HResults WIN32_ERROR_INVALID_GROUP_ATTRIBUTES;
    public static HResults WIN32_ERROR_BAD_IMPERSONATION_LEVEL;
    public static HResults WIN32_ERROR_CANT_OPEN_ANONYMOUS;
    public static HResults WIN32_ERROR_BAD_VALIDATION_CLASS;
    public static HResults WIN32_ERROR_BAD_TOKEN_TYPE;
    public static HResults WIN32_ERROR_NO_SECURITY_ON_OBJECT;
    public static HResults WIN32_ERROR_CANT_ACCESS_DOMAIN_INFO;
    public static HResults WIN32_ERROR_INVALID_SERVER_STATE;
    public static HResults WIN32_ERROR_INVALID_DOMAIN_STATE;
    public static HResults WIN32_ERROR_INVALID_DOMAIN_ROLE;
    public static HResults WIN32_ERROR_NO_SUCH_DOMAIN;
    public static HResults WIN32_ERROR_DOMAIN_EXISTS;
    public static HResults WIN32_ERROR_DOMAIN_LIMIT_EXCEEDED;
    public static HResults WIN32_ERROR_INTERNAL_DB_CORRUPTION;
    public static HResults WIN32_ERROR_INTERNAL_ERROR;
    public static HResults WIN32_ERROR_GENERIC_NOT_MAPPED;
    public static HResults WIN32_ERROR_BAD_DESCRIPTOR_FORMAT;
    public static HResults WIN32_ERROR_NOT_LOGON_PROCESS;
    public static HResults WIN32_ERROR_LOGON_SESSION_EXISTS;
    public static HResults WIN32_ERROR_NO_SUCH_PACKAGE;
    public static HResults WIN32_ERROR_BAD_LOGON_SESSION_STATE;
    public static HResults WIN32_ERROR_LOGON_SESSION_COLLISION;
    public static HResults WIN32_ERROR_INVALID_LOGON_TYPE;
    public static HResults WIN32_ERROR_CANNOT_IMPERSONATE;
    public static HResults WIN32_ERROR_RXACT_INVALID_STATE;
    public static HResults WIN32_ERROR_RXACT_COMMIT_FAILURE;
    public static HResults WIN32_ERROR_SPECIAL_ACCOUNT;
    public static HResults WIN32_ERROR_SPECIAL_GROUP;
    public static HResults WIN32_ERROR_SPECIAL_USER;
    public static HResults WIN32_ERROR_MEMBERS_PRIMARY_GROUP;
    public static HResults WIN32_ERROR_TOKEN_ALREADY_IN_USE;
    public static HResults WIN32_ERROR_NO_SUCH_ALIAS;
    public static HResults WIN32_ERROR_MEMBER_NOT_IN_ALIAS;
    public static HResults WIN32_ERROR_MEMBER_IN_ALIAS;
    public static HResults WIN32_ERROR_ALIAS_EXISTS;
    public static HResults WIN32_ERROR_LOGON_NOT_GRANTED;
    public static HResults WIN32_ERROR_TOO_MANY_SECRETS;
    public static HResults WIN32_ERROR_SECRET_TOO_LONG;
    public static HResults WIN32_ERROR_INTERNAL_DB_ERROR;
    public static HResults WIN32_ERROR_TOO_MANY_CONTEXT_IDS;
    public static HResults WIN32_ERROR_LOGON_TYPE_NOT_GRANTED;
    public static HResults WIN32_ERROR_NT_CROSS_ENCRYPTION_REQUIRED;
    public static HResults WIN32_ERROR_NO_SUCH_MEMBER;
    public static HResults WIN32_ERROR_INVALID_MEMBER;
    public static HResults WIN32_ERROR_TOO_MANY_SIDS;
    public static HResults WIN32_ERROR_LM_CROSS_ENCRYPTION_REQUIRED;
    public static HResults WIN32_ERROR_NO_INHERITANCE;
    public static HResults WIN32_ERROR_FILE_CORRUPT;
    public static HResults WIN32_ERROR_DISK_CORRUPT;
    public static HResults WIN32_ERROR_NO_USER_SESSION_KEY;
    public static HResults WIN32_ERROR_LICENSE_QUOTA_EXCEEDED;
    public static HResults WIN32_ERROR_WRONG_TARGET_NAME;
    public static HResults WIN32_ERROR_MUTUAL_AUTH_FAILED;
    public static HResults WIN32_ERROR_TIME_SKEW;
    public static HResults WIN32_ERROR_CURRENT_DOMAIN_NOT_ALLOWED;
    public static HResults WIN32_ERROR_INVALID_WINDOW_HANDLE;
    public static HResults WIN32_ERROR_INVALID_MENU_HANDLE;
    public static HResults WIN32_ERROR_INVALID_CURSOR_HANDLE;
    public static HResults WIN32_ERROR_INVALID_ACCEL_HANDLE;
    public static HResults WIN32_ERROR_INVALID_HOOK_HANDLE;
    public static HResults WIN32_ERROR_INVALID_DWP_HANDLE;
    public static HResults WIN32_ERROR_TLW_WITH_WSCHILD;
    public static HResults WIN32_ERROR_CANNOT_FIND_WND_CLASS;
    public static HResults WIN32_ERROR_WINDOW_OF_OTHER_THREAD;
    public static HResults WIN32_ERROR_HOTKEY_ALREADY_REGISTERED;
    public static HResults WIN32_ERROR_CLASS_ALREADY_EXISTS;
    public static HResults WIN32_ERROR_CLASS_DOES_NOT_EXIST;
    public static HResults WIN32_ERROR_CLASS_HAS_WINDOWS;
    public static HResults WIN32_ERROR_INVALID_INDEX;
    public static HResults WIN32_ERROR_INVALID_ICON_HANDLE;
    public static HResults WIN32_ERROR_PRIVATE_DIALOG_INDEX;
    public static HResults WIN32_ERROR_LISTBOX_ID_NOT_FOUND;
    public static HResults WIN32_ERROR_NO_WILDCARD_CHARACTERS;
    public static HResults WIN32_ERROR_CLIPBOARD_NOT_OPEN;
    public static HResults WIN32_ERROR_HOTKEY_NOT_REGISTERED;
    public static HResults WIN32_ERROR_WINDOW_NOT_DIALOG;
    public static HResults WIN32_ERROR_CONTROL_ID_NOT_FOUND;
    public static HResults WIN32_ERROR_INVALID_COMBOBOX_MESSAGE;
    public static HResults WIN32_ERROR_WINDOW_NOT_COMBOBOX;
    public static HResults WIN32_ERROR_INVALID_EDIT_HEIGHT;
    public static HResults WIN32_ERROR_DC_NOT_FOUND;
    public static HResults WIN32_ERROR_INVALID_HOOK_FILTER;
    public static HResults WIN32_ERROR_INVALID_FILTER_PROC;
    public static HResults WIN32_ERROR_HOOK_NEEDS_HMOD;
    public static HResults WIN32_ERROR_GLOBAL_ONLY_HOOK;
    public static HResults WIN32_ERROR_JOURNAL_HOOK_SET;
    public static HResults WIN32_ERROR_HOOK_NOT_INSTALLED;
    public static HResults WIN32_ERROR_INVALID_LB_MESSAGE;
    public static HResults WIN32_ERROR_SETCOUNT_ON_BAD_LB;
    public static HResults WIN32_ERROR_LB_WITHOUT_TABSTOPS;
    public static HResults WIN32_ERROR_DESTROY_OBJECT_OF_OTHER_THREAD;
    public static HResults WIN32_ERROR_CHILD_WINDOW_MENU;
    public static HResults WIN32_ERROR_NO_SYSTEM_MENU;
    public static HResults WIN32_ERROR_INVALID_MSGBOX_STYLE;
    public static HResults WIN32_ERROR_INVALID_SPI_VALUE;
    public static HResults WIN32_ERROR_SCREEN_ALREADY_LOCKED;
    public static HResults WIN32_ERROR_HWNDS_HAVE_DIFF_PARENT;
    public static HResults WIN32_ERROR_NOT_CHILD_WINDOW;
    public static HResults WIN32_ERROR_INVALID_GW_COMMAND;
    public static HResults WIN32_ERROR_INVALID_THREAD_ID;
    public static HResults WIN32_ERROR_NON_MDICHILD_WINDOW;
    public static HResults WIN32_ERROR_POPUP_ALREADY_ACTIVE;
    public static HResults WIN32_ERROR_NO_SCROLLBARS;
    public static HResults WIN32_ERROR_INVALID_SCROLLBAR_RANGE;
    public static HResults WIN32_ERROR_INVALID_SHOWWIN_COMMAND;
    public static HResults WIN32_ERROR_NO_SYSTEM_RESOURCES;
    public static HResults WIN32_ERROR_NONPAGED_SYSTEM_RESOURCES;
    public static HResults WIN32_ERROR_PAGED_SYSTEM_RESOURCES;
    public static HResults WIN32_ERROR_WORKING_SET_QUOTA;
    public static HResults WIN32_ERROR_PAGEFILE_QUOTA;
    public static HResults WIN32_ERROR_COMMITMENT_LIMIT;
    public static HResults WIN32_ERROR_MENU_ITEM_NOT_FOUND;
    public static HResults WIN32_ERROR_INVALID_KEYBOARD_HANDLE;
    public static HResults WIN32_ERROR_HOOK_TYPE_NOT_ALLOWED;
    public static HResults WIN32_ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION;
    public static HResults WIN32_ERROR_TIMEOUT;
    public static HResults WIN32_ERROR_INVALID_MONITOR_HANDLE;
    public static HResults WIN32_ERROR_INCORRECT_SIZE;
    public static HResults WIN32_ERROR_EVENTLOG_FILE_CORRUPT;
    public static HResults WIN32_ERROR_EVENTLOG_CANT_START;
    public static HResults WIN32_ERROR_LOG_FILE_FULL;
    public static HResults WIN32_ERROR_EVENTLOG_FILE_CHANGED;
    public static HResults WIN32_ERROR_INSTALL_SERVICE_FAILURE;
    public static HResults WIN32_ERROR_INSTALL_USEREXIT;
    public static HResults WIN32_ERROR_INSTALL_FAILURE;
    public static HResults WIN32_ERROR_INSTALL_SUSPEND;
    public static HResults WIN32_ERROR_UNKNOWN_PRODUCT;
    public static HResults WIN32_ERROR_UNKNOWN_FEATURE;
    public static HResults WIN32_ERROR_UNKNOWN_COMPONENT;
    public static HResults WIN32_ERROR_UNKNOWN_PROPERTY;
    public static HResults WIN32_ERROR_INVALID_HANDLE_STATE;
    public static HResults WIN32_ERROR_BAD_CONFIGURATION;
    public static HResults WIN32_ERROR_INDEX_ABSENT;
    public static HResults WIN32_ERROR_INSTALL_SOURCE_ABSENT;
    public static HResults WIN32_ERROR_INSTALL_PACKAGE_VERSION;
    public static HResults WIN32_ERROR_PRODUCT_UNINSTALLED;
    public static HResults WIN32_ERROR_BAD_QUERY_SYNTAX;
    public static HResults WIN32_ERROR_INVALID_FIELD;
    public static HResults WIN32_ERROR_DEVICE_REMOVED;
    public static HResults WIN32_ERROR_INSTALL_ALREADY_RUNNING;
    public static HResults WIN32_ERROR_INSTALL_PACKAGE_OPEN_FAILED;
    public static HResults WIN32_ERROR_INSTALL_PACKAGE_INVALID;
    public static HResults WIN32_ERROR_INSTALL_UI_FAILURE;
    public static HResults WIN32_ERROR_INSTALL_LOG_FAILURE;
    public static HResults WIN32_ERROR_INSTALL_LANGUAGE_UNSUPPORTED;
    public static HResults WIN32_ERROR_INSTALL_TRANSFORM_FAILURE;
    public static HResults WIN32_ERROR_INSTALL_PACKAGE_REJECTED;
    public static HResults WIN32_ERROR_FUNCTION_NOT_CALLED;
    public static HResults WIN32_ERROR_FUNCTION_FAILED;
    public static HResults WIN32_ERROR_INVALID_TABLE;
    public static HResults WIN32_ERROR_DATATYPE_MISMATCH;
    public static HResults WIN32_ERROR_UNSUPPORTED_TYPE;
    public static HResults WIN32_ERROR_CREATE_FAILED;
    public static HResults WIN32_ERROR_INSTALL_TEMP_UNWRITABLE;
    public static HResults WIN32_ERROR_INSTALL_PLATFORM_UNSUPPORTED;
    public static HResults WIN32_ERROR_INSTALL_NOTUSED;
    public static HResults WIN32_ERROR_PATCH_PACKAGE_OPEN_FAILED;
    public static HResults WIN32_ERROR_PATCH_PACKAGE_INVALID;
    public static HResults WIN32_ERROR_PATCH_PACKAGE_UNSUPPORTED;
    public static HResults WIN32_ERROR_PRODUCT_VERSION;
    public static HResults WIN32_ERROR_INVALID_COMMAND_LINE;
    public static HResults WIN32_ERROR_INSTALL_REMOTE_DISALLOWED;
    public static HResults WIN32_ERROR_SUCCESS_REBOOT_INITIATED;
    public static HResults WIN32_ERROR_PATCH_TARGET_NOT_FOUND;
    public static HResults WIN32_ERROR_PATCH_PACKAGE_REJECTED;
    public static HResults WIN32_ERROR_INSTALL_TRANSFORM_REJECTED;
    public static HResults WIN32_ERROR_INSTALL_REMOTE_PROHIBITED;
    public static HResults WIN32_RPC_S_INVALID_STRING_BINDING;
    public static HResults WIN32_RPC_S_WRONG_KIND_OF_BINDING;
    public static HResults WIN32_RPC_S_INVALID_BINDING;
    public static HResults WIN32_RPC_S_PROTSEQ_NOT_SUPPORTED;
    public static HResults WIN32_RPC_S_INVALID_RPC_PROTSEQ;
    public static HResults WIN32_RPC_S_INVALID_STRING_UUID;
    public static HResults WIN32_RPC_S_INVALID_ENDPOINT_FORMAT;
    public static HResults WIN32_RPC_S_INVALID_NET_ADDR;
    public static HResults WIN32_RPC_S_NO_ENDPOINT_FOUND;
    public static HResults WIN32_RPC_S_INVALID_TIMEOUT;
    public static HResults WIN32_RPC_S_OBJECT_NOT_FOUND;
    public static HResults WIN32_RPC_S_ALREADY_REGISTERED;
    public static HResults WIN32_RPC_S_TYPE_ALREADY_REGISTERED;
    public static HResults WIN32_RPC_S_ALREADY_LISTENING;
    public static HResults WIN32_RPC_S_NO_PROTSEQS_REGISTERED;
    public static HResults WIN32_RPC_S_NOT_LISTENING;
    public static HResults WIN32_RPC_S_UNKNOWN_MGR_TYPE;
    public static HResults WIN32_RPC_S_UNKNOWN_IF;
    public static HResults WIN32_RPC_S_NO_BINDINGS;
    public static HResults WIN32_RPC_S_NO_PROTSEQS;
    public static HResults WIN32_RPC_S_CANT_CREATE_ENDPOINT;
    public static HResults WIN32_RPC_S_OUT_OF_RESOURCES;
    public static HResults WIN32_RPC_S_SERVER_UNAVAILABLE;
    public static HResults WIN32_RPC_S_SERVER_TOO_BUSY;
    public static HResults WIN32_RPC_S_INVALID_NETWORK_OPTIONS;
    public static HResults WIN32_RPC_S_NO_CALL_ACTIVE;
    public static HResults WIN32_RPC_S_CALL_FAILED;
    public static HResults WIN32_RPC_S_CALL_FAILED_DNE;
    public static HResults WIN32_RPC_S_PROTOCOL_ERROR;
    public static HResults WIN32_RPC_S_UNSUPPORTED_TRANS_SYN;
    public static HResults WIN32_RPC_S_UNSUPPORTED_TYPE;
    public static HResults WIN32_RPC_S_INVALID_TAG;
    public static HResults WIN32_RPC_S_INVALID_BOUND;
    public static HResults WIN32_RPC_S_NO_ENTRY_NAME;
    public static HResults WIN32_RPC_S_INVALID_NAME_SYNTAX;
    public static HResults WIN32_RPC_S_UNSUPPORTED_NAME_SYNTAX;
    public static HResults WIN32_RPC_S_UUID_NO_ADDRESS;
    public static HResults WIN32_RPC_S_DUPLICATE_ENDPOINT;
    public static HResults WIN32_RPC_S_UNKNOWN_AUTHN_TYPE;
    public static HResults WIN32_RPC_S_MAX_CALLS_TOO_SMALL;
    public static HResults WIN32_RPC_S_STRING_TOO_LONG;
    public static HResults WIN32_RPC_S_PROTSEQ_NOT_FOUND;
    public static HResults WIN32_RPC_S_PROCNUM_OUT_OF_RANGE;
    public static HResults WIN32_RPC_S_BINDING_HAS_NO_AUTH;
    public static HResults WIN32_RPC_S_UNKNOWN_AUTHN_SERVICE;
    public static HResults WIN32_RPC_S_UNKNOWN_AUTHN_LEVEL;
    public static HResults WIN32_RPC_S_INVALID_AUTH_IDENTITY;
    public static HResults WIN32_RPC_S_UNKNOWN_AUTHZ_SERVICE;
    public static HResults WIN32_EPT_S_INVALID_ENTRY;
    public static HResults WIN32_EPT_S_CANT_PERFORM_OP;
    public static HResults WIN32_EPT_S_NOT_REGISTERED;
    public static HResults WIN32_RPC_S_NOTHING_TO_EXPORT;
    public static HResults WIN32_RPC_S_INCOMPLETE_NAME;
    public static HResults WIN32_RPC_S_INVALID_VERS_OPTION;
    public static HResults WIN32_RPC_S_NO_MORE_MEMBERS;
    public static HResults WIN32_RPC_S_NOT_ALL_OBJS_UNEXPORTED;
    public static HResults WIN32_RPC_S_INTERFACE_NOT_FOUND;
    public static HResults WIN32_RPC_S_ENTRY_ALREADY_EXISTS;
    public static HResults WIN32_RPC_S_ENTRY_NOT_FOUND;
    public static HResults WIN32_RPC_S_NAME_SERVICE_UNAVAILABLE;
    public static HResults WIN32_RPC_S_INVALID_NAF_ID;
    public static HResults WIN32_RPC_S_CANNOT_SUPPORT;
    public static HResults WIN32_RPC_S_NO_CONTEXT_AVAILABLE;
    public static HResults WIN32_RPC_S_INTERNAL_ERROR;
    public static HResults WIN32_RPC_S_ZERO_DIVIDE;
    public static HResults WIN32_RPC_S_ADDRESS_ERROR;
    public static HResults WIN32_RPC_S_FP_DIV_ZERO;
    public static HResults WIN32_RPC_S_FP_UNDERFLOW;
    public static HResults WIN32_RPC_S_FP_OVERFLOW;
    public static HResults WIN32_RPC_X_NO_MORE_ENTRIES;
    public static HResults WIN32_RPC_X_SS_CHAR_TRANS_OPEN_FAIL;
    public static HResults WIN32_RPC_X_SS_CHAR_TRANS_SHORT_FILE;
    public static HResults WIN32_RPC_X_SS_IN_NULL_CONTEXT;
    public static HResults WIN32_RPC_X_SS_CONTEXT_DAMAGED;
    public static HResults WIN32_RPC_X_SS_HANDLES_MISMATCH;
    public static HResults WIN32_RPC_X_SS_CANNOT_GET_CALL_HANDLE;
    public static HResults WIN32_RPC_X_NULL_REF_POINTER;
    public static HResults WIN32_RPC_X_ENUM_VALUE_OUT_OF_RANGE;
    public static HResults WIN32_RPC_X_BYTE_COUNT_TOO_SMALL;
    public static HResults WIN32_RPC_X_BAD_STUB_DATA;
    public static HResults WIN32_ERROR_INVALID_USER_BUFFER;
    public static HResults WIN32_ERROR_UNRECOGNIZED_MEDIA;
    public static HResults WIN32_ERROR_NO_TRUST_LSA_SECRET;
    public static HResults WIN32_ERROR_NO_TRUST_SAM_ACCOUNT;
    public static HResults WIN32_ERROR_TRUSTED_DOMAIN_FAILURE;
    public static HResults WIN32_ERROR_TRUSTED_RELATIONSHIP_FAILURE;
    public static HResults WIN32_ERROR_TRUST_FAILURE;
    public static HResults WIN32_RPC_S_CALL_IN_PROGRESS;
    public static HResults WIN32_ERROR_NETLOGON_NOT_STARTED;
    public static HResults WIN32_ERROR_ACCOUNT_EXPIRED;
    public static HResults WIN32_ERROR_REDIRECTOR_HAS_OPEN_HANDLES;
    public static HResults WIN32_ERROR_PRINTER_DRIVER_ALREADY_INSTALLED;
    public static HResults WIN32_ERROR_UNKNOWN_PORT;
    public static HResults WIN32_ERROR_UNKNOWN_PRINTER_DRIVER;
    public static HResults WIN32_ERROR_UNKNOWN_PRINTPROCESSOR;
    public static HResults WIN32_ERROR_INVALID_SEPARATOR_FILE;
    public static HResults WIN32_ERROR_INVALID_PRIORITY;
    public static HResults WIN32_ERROR_INVALID_PRINTER_NAME;
    public static HResults WIN32_ERROR_PRINTER_ALREADY_EXISTS;
    public static HResults WIN32_ERROR_INVALID_PRINTER_COMMAND;
    public static HResults WIN32_ERROR_INVALID_DATATYPE;
    public static HResults WIN32_ERROR_INVALID_ENVIRONMENT;
    public static HResults WIN32_RPC_S_NO_MORE_BINDINGS;
    public static HResults WIN32_ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT;
    public static HResults WIN32_ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT;
    public static HResults WIN32_ERROR_NOLOGON_SERVER_TRUST_ACCOUNT;
    public static HResults WIN32_ERROR_DOMAIN_TRUST_INCONSISTENT;
    public static HResults WIN32_ERROR_SERVER_HAS_OPEN_HANDLES;
    public static HResults WIN32_ERROR_RESOURCE_DATA_NOT_FOUND;
    public static HResults WIN32_ERROR_RESOURCE_TYPE_NOT_FOUND;
    public static HResults WIN32_ERROR_RESOURCE_NAME_NOT_FOUND;
    public static HResults WIN32_ERROR_RESOURCE_LANG_NOT_FOUND;
    public static HResults WIN32_ERROR_NOT_ENOUGH_QUOTA;
    public static HResults WIN32_RPC_S_NO_INTERFACES;
    public static HResults WIN32_RPC_S_CALL_CANCELLED;
    public static HResults WIN32_RPC_S_BINDING_INCOMPLETE;
    public static HResults WIN32_RPC_S_COMM_FAILURE;
    public static HResults WIN32_RPC_S_UNSUPPORTED_AUTHN_LEVEL;
    public static HResults WIN32_RPC_S_NO_PRINC_NAME;
    public static HResults WIN32_RPC_S_NOT_RPC_ERROR;
    public static HResults WIN32_RPC_S_UUID_LOCAL_ONLY;
    public static HResults WIN32_RPC_S_SEC_PKG_ERROR;
    public static HResults WIN32_RPC_S_NOT_CANCELLED;
    public static HResults WIN32_RPC_X_INVALID_ES_ACTION;
    public static HResults WIN32_RPC_X_WRONG_ES_VERSION;
    public static HResults WIN32_RPC_X_WRONG_STUB_VERSION;
    public static HResults WIN32_RPC_X_INVALID_PIPE_OBJECT;
    public static HResults WIN32_RPC_X_WRONG_PIPE_ORDER;
    public static HResults WIN32_RPC_X_WRONG_PIPE_VERSION;
    public static HResults WIN32_RPC_S_GROUP_MEMBER_NOT_FOUND;
    public static HResults WIN32_EPT_S_CANT_CREATE;
    public static HResults WIN32_RPC_S_INVALID_OBJECT;
    public static HResults WIN32_ERROR_INVALID_TIME;
    public static HResults WIN32_ERROR_INVALID_FORM_NAME;
    public static HResults WIN32_ERROR_INVALID_FORM_SIZE;
    public static HResults WIN32_ERROR_ALREADY_WAITING;
    public static HResults WIN32_ERROR_PRINTER_DELETED;
    public static HResults WIN32_ERROR_INVALID_PRINTER_STATE;
    public static HResults WIN32_ERROR_PASSWORD_MUST_CHANGE;
    public static HResults WIN32_ERROR_DOMAIN_CONTROLLER_NOT_FOUND;
    public static HResults WIN32_ERROR_ACCOUNT_LOCKED_OUT;
    public static HResults WIN32_OR_INVALID_OXID;
    public static HResults WIN32_OR_INVALID_OID;
    public static HResults WIN32_OR_INVALID_SET;
    public static HResults WIN32_RPC_S_SEND_INCOMPLETE;
    public static HResults WIN32_RPC_S_INVALID_ASYNC_HANDLE;
    public static HResults WIN32_RPC_S_INVALID_ASYNC_CALL;
    public static HResults WIN32_RPC_X_PIPE_CLOSED;
    public static HResults WIN32_RPC_X_PIPE_DISCIPLINE_ERROR;
    public static HResults WIN32_RPC_X_PIPE_EMPTY;
    public static HResults WIN32_ERROR_NO_SITENAME;
    public static HResults WIN32_ERROR_CANT_ACCESS_FILE;
    public static HResults WIN32_ERROR_CANT_RESOLVE_FILENAME;
    public static HResults WIN32_RPC_S_ENTRY_TYPE_MISMATCH;
    public static HResults WIN32_RPC_S_NOT_ALL_OBJS_EXPORTED;
    public static HResults WIN32_RPC_S_INTERFACE_NOT_EXPORTED;
    public static HResults WIN32_RPC_S_PROFILE_NOT_ADDED;
    public static HResults WIN32_RPC_S_PRF_ELT_NOT_ADDED;
    public static HResults WIN32_RPC_S_PRF_ELT_NOT_REMOVED;
    public static HResults WIN32_RPC_S_GRP_ELT_NOT_ADDED;
    public static HResults WIN32_RPC_S_GRP_ELT_NOT_REMOVED;
    public static HResults WIN32_ERROR_KM_DRIVER_BLOCKED;
    public static HResults WIN32_ERROR_CONTEXT_EXPIRED;
    public static HResults WIN32_ERROR_PER_USER_TRUST_QUOTA_EXCEEDED;
    public static HResults WIN32_ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED;
    public static HResults WIN32_ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED;
    public static HResults WIN32_ERROR_AUTHENTICATION_FIREWALL_FAILED;
    public static HResults WIN32_ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED;
    public static HResults WIN32_ERROR_INVALID_PIXEL_FORMAT;
    public static HResults WIN32_ERROR_BAD_DRIVER;
    public static HResults WIN32_ERROR_INVALID_WINDOW_STYLE;
    public static HResults WIN32_ERROR_METAFILE_NOT_SUPPORTED;
    public static HResults WIN32_ERROR_TRANSFORM_NOT_SUPPORTED;
    public static HResults WIN32_ERROR_CLIPPING_NOT_SUPPORTED;
    public static HResults WIN32_ERROR_INVALID_CMM;
    public static HResults WIN32_ERROR_INVALID_PROFILE;
    public static HResults WIN32_ERROR_TAG_NOT_FOUND;
    public static HResults WIN32_ERROR_TAG_NOT_PRESENT;
    public static HResults WIN32_ERROR_DUPLICATE_TAG;
    public static HResults WIN32_ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE;
    public static HResults WIN32_ERROR_PROFILE_NOT_FOUND;
    public static HResults WIN32_ERROR_INVALID_COLORSPACE;
    public static HResults WIN32_ERROR_ICM_NOT_ENABLED;
    public static HResults WIN32_ERROR_DELETING_ICM_XFORM;
    public static HResults WIN32_ERROR_INVALID_TRANSFORM;
    public static HResults WIN32_ERROR_COLORSPACE_MISMATCH;
    public static HResults WIN32_ERROR_INVALID_COLORINDEX;
    public static HResults WIN32_ERROR_CONNECTED_OTHER_PASSWORD;
    public static HResults WIN32_ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT;
    public static HResults WIN32_ERROR_BAD_USERNAME;
    public static HResults WIN32_ERROR_NOT_CONNECTED;
    public static HResults WIN32_ERROR_OPEN_FILES;
    public static HResults WIN32_ERROR_ACTIVE_CONNECTIONS;
    public static HResults WIN32_ERROR_DEVICE_IN_USE;
    public static HResults WIN32_ERROR_UNKNOWN_PRINT_MONITOR;
    public static HResults WIN32_ERROR_PRINTER_DRIVER_IN_USE;
    public static HResults WIN32_ERROR_SPOOL_FILE_NOT_FOUND;
    public static HResults WIN32_ERROR_SPL_NO_STARTDOC;
    public static HResults WIN32_ERROR_SPL_NO_ADDJOB;
    public static HResults WIN32_ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED;
    public static HResults WIN32_ERROR_PRINT_MONITOR_ALREADY_INSTALLED;
    public static HResults WIN32_ERROR_INVALID_PRINT_MONITOR;
    public static HResults WIN32_ERROR_PRINT_MONITOR_IN_USE;
    public static HResults WIN32_ERROR_PRINTER_HAS_JOBS_QUEUED;
    public static HResults WIN32_ERROR_SUCCESS_REBOOT_REQUIRED;
    public static HResults WIN32_ERROR_SUCCESS_RESTART_REQUIRED;
    public static HResults WIN32_ERROR_PRINTER_NOT_FOUND;
    public static HResults WIN32_ERROR_PRINTER_DRIVER_WARNED;
    public static HResults WIN32_ERROR_PRINTER_DRIVER_BLOCKED;
    public static HResults WIN32_ERROR_WINS_INTERNAL;
    public static HResults WIN32_ERROR_CAN_NOT_DEL_LOCAL_WINS;
    public static HResults WIN32_ERROR_STATIC_INIT;
    public static HResults WIN32_ERROR_INC_BACKUP;
    public static HResults WIN32_ERROR_FULL_BACKUP;
    public static HResults WIN32_ERROR_REC_NON_EXISTENT;
    public static HResults WIN32_ERROR_RPL_NOT_ALLOWED;
    public static HResults WIN32_ERROR_DHCP_ADDRESS_CONFLICT;
    public static HResults WIN32_ERROR_WMI_GUID_NOT_FOUND;
    public static HResults WIN32_ERROR_WMI_INSTANCE_NOT_FOUND;
    public static HResults WIN32_ERROR_WMI_ITEMID_NOT_FOUND;
    public static HResults WIN32_ERROR_WMI_TRY_AGAIN;
    public static HResults WIN32_ERROR_WMI_DP_NOT_FOUND;
    public static HResults WIN32_ERROR_WMI_UNRESOLVED_INSTANCE_REF;
    public static HResults WIN32_ERROR_WMI_ALREADY_ENABLED;
    public static HResults WIN32_ERROR_WMI_GUID_DISCONNECTED;
    public static HResults WIN32_ERROR_WMI_SERVER_UNAVAILABLE;
    public static HResults WIN32_ERROR_WMI_DP_FAILED;
    public static HResults WIN32_ERROR_WMI_INVALID_MOF;
    public static HResults WIN32_ERROR_WMI_INVALID_REGINFO;
    public static HResults WIN32_ERROR_WMI_ALREADY_DISABLED;
    public static HResults WIN32_ERROR_WMI_READ_ONLY;
    public static HResults WIN32_ERROR_WMI_SET_FAILURE;
    public static HResults WIN32_ERROR_INVALID_MEDIA;
    public static HResults WIN32_ERROR_INVALID_LIBRARY;
    public static HResults WIN32_ERROR_INVALID_MEDIA_POOL;
    public static HResults WIN32_ERROR_DRIVE_MEDIA_MISMATCH;
    public static HResults WIN32_ERROR_MEDIA_OFFLINE;
    public static HResults WIN32_ERROR_LIBRARY_OFFLINE;
    public static HResults WIN32_ERROR_EMPTY;
    public static HResults WIN32_ERROR_NOT_EMPTY;
    public static HResults WIN32_ERROR_MEDIA_UNAVAILABLE;
    public static HResults WIN32_ERROR_RESOURCE_DISABLED;
    public static HResults WIN32_ERROR_INVALID_CLEANER;
    public static HResults WIN32_ERROR_UNABLE_TO_CLEAN;
    public static HResults WIN32_ERROR_OBJECT_NOT_FOUND;
    public static HResults WIN32_ERROR_DATABASE_FAILURE;
    public static HResults WIN32_ERROR_DATABASE_FULL;
    public static HResults WIN32_ERROR_MEDIA_INCOMPATIBLE;
    public static HResults WIN32_ERROR_RESOURCE_NOT_PRESENT;
    public static HResults WIN32_ERROR_INVALID_OPERATION;
    public static HResults WIN32_ERROR_MEDIA_NOT_AVAILABLE;
    public static HResults WIN32_ERROR_DEVICE_NOT_AVAILABLE;
    public static HResults WIN32_ERROR_REQUEST_REFUSED;
    public static HResults WIN32_ERROR_INVALID_DRIVE_OBJECT;
    public static HResults WIN32_ERROR_LIBRARY_FULL;
    public static HResults WIN32_ERROR_MEDIUM_NOT_ACCESSIBLE;
    public static HResults WIN32_ERROR_UNABLE_TO_LOAD_MEDIUM;
    public static HResults WIN32_ERROR_UNABLE_TO_INVENTORY_DRIVE;
    public static HResults WIN32_ERROR_UNABLE_TO_INVENTORY_SLOT;
    public static HResults WIN32_ERROR_UNABLE_TO_INVENTORY_TRANSPORT;
    public static HResults WIN32_ERROR_TRANSPORT_FULL;
    public static HResults WIN32_ERROR_CONTROLLING_IEPORT;
    public static HResults WIN32_ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA;
    public static HResults WIN32_ERROR_CLEANER_SLOT_SET;
    public static HResults WIN32_ERROR_CLEANER_SLOT_NOT_SET;
    public static HResults WIN32_ERROR_CLEANER_CARTRIDGE_SPENT;
    public static HResults WIN32_ERROR_UNEXPECTED_OMID;
    public static HResults WIN32_ERROR_CANT_DELETE_LAST_ITEM;
    public static HResults WIN32_ERROR_MESSAGE_EXCEEDS_MAX_SIZE;
    public static HResults WIN32_ERROR_VOLUME_CONTAINS_SYS_FILES;
    public static HResults WIN32_ERROR_INDIGENOUS_TYPE;
    public static HResults WIN32_ERROR_NO_SUPPORTING_DRIVES;
    public static HResults WIN32_ERROR_CLEANER_CARTRIDGE_INSTALLED;
    public static HResults WIN32_ERROR_IEPORT_FULL;
    public static HResults WIN32_ERROR_FILE_OFFLINE;
    public static HResults WIN32_ERROR_REMOTE_STORAGE_NOT_ACTIVE;
    public static HResults WIN32_ERROR_REMOTE_STORAGE_MEDIA_ERROR;
    public static HResults WIN32_ERROR_NOT_A_REPARSE_POINT;
    public static HResults WIN32_ERROR_REPARSE_ATTRIBUTE_CONFLICT;
    public static HResults WIN32_ERROR_INVALID_REPARSE_DATA;
    public static HResults WIN32_ERROR_REPARSE_TAG_INVALID;
    public static HResults WIN32_ERROR_REPARSE_TAG_MISMATCH;
    public static HResults WIN32_ERROR_VOLUME_NOT_SIS_ENABLED;
    public static HResults WIN32_ERROR_DEPENDENT_RESOURCE_EXISTS;
    public static HResults WIN32_ERROR_DEPENDENCY_NOT_FOUND;
    public static HResults WIN32_ERROR_DEPENDENCY_ALREADY_EXISTS;
    public static HResults WIN32_ERROR_RESOURCE_NOT_ONLINE;
    public static HResults WIN32_ERROR_HOST_NODE_NOT_AVAILABLE;
    public static HResults WIN32_ERROR_RESOURCE_NOT_AVAILABLE;
    public static HResults WIN32_ERROR_RESOURCE_NOT_FOUND;
    public static HResults WIN32_ERROR_SHUTDOWN_CLUSTER;
    public static HResults WIN32_ERROR_CANT_EVICT_ACTIVE_NODE;
    public static HResults WIN32_ERROR_OBJECT_ALREADY_EXISTS;
    public static HResults WIN32_ERROR_OBJECT_IN_LIST;
    public static HResults WIN32_ERROR_GROUP_NOT_AVAILABLE;
    public static HResults WIN32_ERROR_GROUP_NOT_FOUND;
    public static HResults WIN32_ERROR_GROUP_NOT_ONLINE;
    public static HResults WIN32_ERROR_HOST_NODE_NOT_RESOURCE_OWNER;
    public static HResults WIN32_ERROR_HOST_NODE_NOT_GROUP_OWNER;
    public static HResults WIN32_ERROR_RESMON_CREATE_FAILED;
    public static HResults WIN32_ERROR_RESMON_ONLINE_FAILED;
    public static HResults WIN32_ERROR_RESOURCE_ONLINE;
    public static HResults WIN32_ERROR_QUORUM_RESOURCE;
    public static HResults WIN32_ERROR_NOT_QUORUM_CAPABLE;
    public static HResults WIN32_ERROR_CLUSTER_SHUTTING_DOWN;
    public static HResults WIN32_ERROR_INVALID_STATE;
    public static HResults WIN32_ERROR_RESOURCE_PROPERTIES_STORED;
    public static HResults WIN32_ERROR_NOT_QUORUM_CLASS;
    public static HResults WIN32_ERROR_CORE_RESOURCE;
    public static HResults WIN32_ERROR_QUORUM_RESOURCE_ONLINE_FAILED;
    public static HResults WIN32_ERROR_QUORUMLOG_OPEN_FAILED;
    public static HResults WIN32_ERROR_CLUSTERLOG_CORRUPT;
    public static HResults WIN32_ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE;
    public static HResults WIN32_ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE;
    public static HResults WIN32_ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND;
    public static HResults WIN32_ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE;
    public static HResults WIN32_ERROR_QUORUM_OWNER_ALIVE;
    public static HResults WIN32_ERROR_NETWORK_NOT_AVAILABLE;
    public static HResults WIN32_ERROR_NODE_NOT_AVAILABLE;
    public static HResults WIN32_ERROR_ALL_NODES_NOT_AVAILABLE;
    public static HResults WIN32_ERROR_RESOURCE_FAILED;
    public static HResults WIN32_ERROR_CLUSTER_INVALID_NODE;
    public static HResults WIN32_ERROR_CLUSTER_NODE_EXISTS;
    public static HResults WIN32_ERROR_CLUSTER_JOIN_IN_PROGRESS;
    public static HResults WIN32_ERROR_CLUSTER_NODE_NOT_FOUND;
    public static HResults WIN32_ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND;
    public static HResults WIN32_ERROR_CLUSTER_NETWORK_EXISTS;
    public static HResults WIN32_ERROR_CLUSTER_NETWORK_NOT_FOUND;
    public static HResults WIN32_ERROR_CLUSTER_NETINTERFACE_EXISTS;
    public static HResults WIN32_ERROR_CLUSTER_NETINTERFACE_NOT_FOUND;
    public static HResults WIN32_ERROR_CLUSTER_INVALID_REQUEST;
    public static HResults WIN32_ERROR_CLUSTER_INVALID_NETWORK_PROVIDER;
    public static HResults WIN32_ERROR_CLUSTER_NODE_DOWN;
    public static HResults WIN32_ERROR_CLUSTER_NODE_UNREACHABLE;
    public static HResults WIN32_ERROR_CLUSTER_NODE_NOT_MEMBER;
    public static HResults WIN32_ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS;
    public static HResults WIN32_ERROR_CLUSTER_INVALID_NETWORK;
    public static HResults WIN32_ERROR_CLUSTER_NODE_UP;
    public static HResults WIN32_ERROR_CLUSTER_IPADDR_IN_USE;
    public static HResults WIN32_ERROR_CLUSTER_NODE_NOT_PAUSED;
    public static HResults WIN32_ERROR_CLUSTER_NO_SECURITY_CONTEXT;
    public static HResults WIN32_ERROR_CLUSTER_NETWORK_NOT_INTERNAL;
    public static HResults WIN32_ERROR_CLUSTER_NODE_ALREADY_UP;
    public static HResults WIN32_ERROR_CLUSTER_NODE_ALREADY_DOWN;
    public static HResults WIN32_ERROR_CLUSTER_NETWORK_ALREADY_ONLINE;
    public static HResults WIN32_ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE;
    public static HResults WIN32_ERROR_CLUSTER_NODE_ALREADY_MEMBER;
    public static HResults WIN32_ERROR_CLUSTER_LAST_INTERNAL_NETWORK;
    public static HResults WIN32_ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS;
    public static HResults WIN32_ERROR_INVALID_OPERATION_ON_QUORUM;
    public static HResults WIN32_ERROR_DEPENDENCY_NOT_ALLOWED;
    public static HResults WIN32_ERROR_CLUSTER_NODE_PAUSED;
    public static HResults WIN32_ERROR_NODE_CANT_HOST_RESOURCE;
    public static HResults WIN32_ERROR_CLUSTER_NODE_NOT_READY;
    public static HResults WIN32_ERROR_CLUSTER_NODE_SHUTTING_DOWN;
    public static HResults WIN32_ERROR_CLUSTER_JOIN_ABORTED;
    public static HResults WIN32_ERROR_CLUSTER_INCOMPATIBLE_VERSIONS;
    public static HResults WIN32_ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED;
    public static HResults WIN32_ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED;
    public static HResults WIN32_ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND;
    public static HResults WIN32_ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED;
    public static HResults WIN32_ERROR_CLUSTER_RESNAME_NOT_FOUND;
    public static HResults WIN32_ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED;
    public static HResults WIN32_ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST;
    public static HResults WIN32_ERROR_CLUSTER_DATABASE_SEQMISMATCH;
    public static HResults WIN32_ERROR_RESMON_INVALID_STATE;
    public static HResults WIN32_ERROR_CLUSTER_GUM_NOT_LOCKER;
    public static HResults WIN32_ERROR_QUORUM_DISK_NOT_FOUND;
    public static HResults WIN32_ERROR_DATABASE_BACKUP_CORRUPT;
    public static HResults WIN32_ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT;
    public static HResults WIN32_ERROR_RESOURCE_PROPERTY_UNCHANGEABLE;
    public static HResults WIN32_ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE;
    public static HResults WIN32_ERROR_CLUSTER_QUORUMLOG_NOT_FOUND;
    public static HResults WIN32_ERROR_CLUSTER_MEMBERSHIP_HALT;
    public static HResults WIN32_ERROR_CLUSTER_INSTANCE_ID_MISMATCH;
    public static HResults WIN32_ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP;
    public static HResults WIN32_ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH;
    public static HResults WIN32_ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP;
    public static HResults WIN32_ERROR_CLUSTER_PARAMETER_MISMATCH;
    public static HResults WIN32_ERROR_NODE_CANNOT_BE_CLUSTERED;
    public static HResults WIN32_ERROR_CLUSTER_WRONG_OS_VERSION;
    public static HResults WIN32_ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME;
    public static HResults WIN32_ERROR_CLUSCFG_ALREADY_COMMITTED;
    public static HResults WIN32_ERROR_CLUSCFG_ROLLBACK_FAILED;
    public static HResults WIN32_ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT;
    public static HResults WIN32_ERROR_CLUSTER_OLD_VERSION;
    public static HResults WIN32_ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME;
    public static HResults WIN32_ERROR_ENCRYPTION_FAILED;
    public static HResults WIN32_ERROR_DECRYPTION_FAILED;
    public static HResults WIN32_ERROR_FILE_ENCRYPTED;
    public static HResults WIN32_ERROR_NO_RECOVERY_POLICY;
    public static HResults WIN32_ERROR_NO_EFS;
    public static HResults WIN32_ERROR_WRONG_EFS;
    public static HResults WIN32_ERROR_NO_USER_KEYS;
    public static HResults WIN32_ERROR_FILE_NOT_ENCRYPTED;
    public static HResults WIN32_ERROR_NOT_EXPORT_FORMAT;
    public static HResults WIN32_ERROR_FILE_READ_ONLY;
    public static HResults WIN32_ERROR_DIR_EFS_DISALLOWED;
    public static HResults WIN32_ERROR_EFS_SERVER_NOT_TRUSTED;
    public static HResults WIN32_ERROR_BAD_RECOVERY_POLICY;
    public static HResults WIN32_ERROR_EFS_ALG_BLOB_TOO_BIG;
    public static HResults WIN32_ERROR_VOLUME_NOT_SUPPORT_EFS;
    public static HResults WIN32_ERROR_EFS_DISABLED;
    public static HResults WIN32_ERROR_EFS_VERSION_NOT_SUPPORT;
    public static HResults WIN32_ERROR_NO_BROWSER_SERVERS_FOUND;
    public static HResults WIN32_SCHED_E_SERVICE_NOT_LOCALSYSTEM;
    public static HResults WIN32_ERROR_CTX_WINSTATION_NAME_INVALID;
    public static HResults WIN32_ERROR_CTX_INVALID_PD;
    public static HResults WIN32_ERROR_CTX_PD_NOT_FOUND;
    public static HResults WIN32_ERROR_CTX_WD_NOT_FOUND;
    public static HResults WIN32_ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY;
    public static HResults WIN32_ERROR_CTX_SERVICE_NAME_COLLISION;
    public static HResults WIN32_ERROR_CTX_CLOSE_PENDING;
    public static HResults WIN32_ERROR_CTX_NO_OUTBUF;
    public static HResults WIN32_ERROR_CTX_MODEM_INF_NOT_FOUND;
    public static HResults WIN32_ERROR_CTX_INVALID_MODEMNAME;
    public static HResults WIN32_ERROR_CTX_MODEM_RESPONSE_ERROR;
    public static HResults WIN32_ERROR_CTX_MODEM_RESPONSE_TIMEOUT;
    public static HResults WIN32_ERROR_CTX_MODEM_RESPONSE_NO_CARRIER;
    public static HResults WIN32_ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE;
    public static HResults WIN32_ERROR_CTX_MODEM_RESPONSE_BUSY;
    public static HResults WIN32_ERROR_CTX_MODEM_RESPONSE_VOICE;
    public static HResults WIN32_ERROR_CTX_TD_ERROR;
    public static HResults WIN32_ERROR_CTX_WINSTATION_NOT_FOUND;
    public static HResults WIN32_ERROR_CTX_WINSTATION_ALREADY_EXISTS;
    public static HResults WIN32_ERROR_CTX_WINSTATION_BUSY;
    public static HResults WIN32_ERROR_CTX_BAD_VIDEO_MODE;
    public static HResults WIN32_ERROR_CTX_GRAPHICS_INVALID;
    public static HResults WIN32_ERROR_CTX_LOGON_DISABLED;
    public static HResults WIN32_ERROR_CTX_NOT_CONSOLE;
    public static HResults WIN32_ERROR_CTX_CLIENT_QUERY_TIMEOUT;
    public static HResults WIN32_ERROR_CTX_CONSOLE_DISCONNECT;
    public static HResults WIN32_ERROR_CTX_CONSOLE_CONNECT;
    public static HResults WIN32_ERROR_CTX_SHADOW_DENIED;
    public static HResults WIN32_ERROR_CTX_WINSTATION_ACCESS_DENIED;
    public static HResults WIN32_ERROR_CTX_INVALID_WD;
    public static HResults WIN32_ERROR_CTX_SHADOW_INVALID;
    public static HResults WIN32_ERROR_CTX_SHADOW_DISABLED;
    public static HResults WIN32_ERROR_CTX_CLIENT_LICENSE_IN_USE;
    public static HResults WIN32_ERROR_CTX_CLIENT_LICENSE_NOT_SET;
    public static HResults WIN32_ERROR_CTX_LICENSE_NOT_AVAILABLE;
    public static HResults WIN32_ERROR_CTX_LICENSE_CLIENT_INVALID;
    public static HResults WIN32_ERROR_CTX_LICENSE_EXPIRED;
    public static HResults WIN32_ERROR_CTX_SHADOW_NOT_RUNNING;
    public static HResults WIN32_ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE;
    public static HResults WIN32_ERROR_ACTIVATION_COUNT_EXCEEDED;
    public static HResults WIN32_FRS_ERR_INVALID_API_SEQUENCE;
    public static HResults WIN32_FRS_ERR_STARTING_SERVICE;
    public static HResults WIN32_FRS_ERR_STOPPING_SERVICE;
    public static HResults WIN32_FRS_ERR_INTERNAL_API;
    public static HResults WIN32_FRS_ERR_INTERNAL;
    public static HResults WIN32_FRS_ERR_SERVICE_COMM;
    public static HResults WIN32_FRS_ERR_INSUFFICIENT_PRIV;
    public static HResults WIN32_FRS_ERR_AUTHENTICATION;
    public static HResults WIN32_FRS_ERR_PARENT_INSUFFICIENT_PRIV;
    public static HResults WIN32_FRS_ERR_PARENT_AUTHENTICATION;
    public static HResults WIN32_FRS_ERR_CHILD_TO_PARENT_COMM;
    public static HResults WIN32_FRS_ERR_PARENT_TO_CHILD_COMM;
    public static HResults WIN32_FRS_ERR_SYSVOL_POPULATE;
    public static HResults WIN32_FRS_ERR_SYSVOL_POPULATE_TIMEOUT;
    public static HResults WIN32_FRS_ERR_SYSVOL_IS_BUSY;
    public static HResults WIN32_FRS_ERR_SYSVOL_DEMOTE;
    public static HResults WIN32_FRS_ERR_INVALID_SERVICE_PARAMETER;
    public static HResults WIN32_ERROR_DS_NOT_INSTALLED;
    public static HResults WIN32_ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY;
    public static HResults WIN32_ERROR_DS_NO_ATTRIBUTE_OR_VALUE;
    public static HResults WIN32_ERROR_DS_INVALID_ATTRIBUTE_SYNTAX;
    public static HResults WIN32_ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED;
    public static HResults WIN32_ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS;
    public static HResults WIN32_ERROR_DS_BUSY;
    public static HResults WIN32_ERROR_DS_UNAVAILABLE;
    public static HResults WIN32_ERROR_DS_NO_RIDS_ALLOCATED;
    public static HResults WIN32_ERROR_DS_NO_MORE_RIDS;
    public static HResults WIN32_ERROR_DS_INCORRECT_ROLE_OWNER;
    public static HResults WIN32_ERROR_DS_RIDMGR_INIT_ERROR;
    public static HResults WIN32_ERROR_DS_OBJ_CLASS_VIOLATION;
    public static HResults WIN32_ERROR_DS_CANT_ON_NON_LEAF;
    public static HResults WIN32_ERROR_DS_CANT_ON_RDN;
    public static HResults WIN32_ERROR_DS_CANT_MOD_OBJ_CLASS;
    public static HResults WIN32_ERROR_DS_CROSS_DOM_MOVE_ERROR;
    public static HResults WIN32_ERROR_DS_GC_NOT_AVAILABLE;
    public static HResults WIN32_ERROR_SHARED_POLICY;
    public static HResults WIN32_ERROR_POLICY_OBJECT_NOT_FOUND;
    public static HResults WIN32_ERROR_POLICY_ONLY_IN_DS;
    public static HResults WIN32_ERROR_PROMOTION_ACTIVE;
    public static HResults WIN32_ERROR_NO_PROMOTION_ACTIVE;
    public static HResults WIN32_ERROR_DS_OPERATIONS_ERROR;
    public static HResults WIN32_ERROR_DS_PROTOCOL_ERROR;
    public static HResults WIN32_ERROR_DS_TIMELIMIT_EXCEEDED;
    public static HResults WIN32_ERROR_DS_SIZELIMIT_EXCEEDED;
    public static HResults WIN32_ERROR_DS_ADMIN_LIMIT_EXCEEDED;
    public static HResults WIN32_ERROR_DS_COMPARE_FALSE;
    public static HResults WIN32_ERROR_DS_COMPARE_TRUE;
    public static HResults WIN32_ERROR_DS_AUTH_METHOD_NOT_SUPPORTED;
    public static HResults WIN32_ERROR_DS_STRONG_AUTH_REQUIRED;
    public static HResults WIN32_ERROR_DS_INAPPROPRIATE_AUTH;
    public static HResults WIN32_ERROR_DS_AUTH_UNKNOWN;
    public static HResults WIN32_ERROR_DS_REFERRAL;
    public static HResults WIN32_ERROR_DS_UNAVAILABLE_CRIT_EXTENSION;
    public static HResults WIN32_ERROR_DS_CONFIDENTIALITY_REQUIRED;
    public static HResults WIN32_ERROR_DS_INAPPROPRIATE_MATCHING;
    public static HResults WIN32_ERROR_DS_CONSTRAINT_VIOLATION;
    public static HResults WIN32_ERROR_DS_NO_SUCH_OBJECT;
    public static HResults WIN32_ERROR_DS_ALIAS_PROBLEM;
    public static HResults WIN32_ERROR_DS_INVALID_DN_SYNTAX;
    public static HResults WIN32_ERROR_DS_IS_LEAF;
    public static HResults WIN32_ERROR_DS_ALIAS_DEREF_PROBLEM;
    public static HResults WIN32_ERROR_DS_UNWILLING_TO_PERFORM;
    public static HResults WIN32_ERROR_DS_LOOP_DETECT;
    public static HResults WIN32_ERROR_DS_NAMING_VIOLATION;
    public static HResults WIN32_ERROR_DS_OBJECT_RESULTS_TOO_LARGE;
    public static HResults WIN32_ERROR_DS_AFFECTS_MULTIPLE_DSAS;
    public static HResults WIN32_ERROR_DS_SERVER_DOWN;
    public static HResults WIN32_ERROR_DS_LOCAL_ERROR;
    public static HResults WIN32_ERROR_DS_ENCODING_ERROR;
    public static HResults WIN32_ERROR_DS_DECODING_ERROR;
    public static HResults WIN32_ERROR_DS_FILTER_UNKNOWN;
    public static HResults WIN32_ERROR_DS_PARAM_ERROR;
    public static HResults WIN32_ERROR_DS_NOT_SUPPORTED;
    public static HResults WIN32_ERROR_DS_NO_RESULTS_RETURNED;
    public static HResults WIN32_ERROR_DS_CONTROL_NOT_FOUND;
    public static HResults WIN32_ERROR_DS_CLIENT_LOOP;
    public static HResults WIN32_ERROR_DS_REFERRAL_LIMIT_EXCEEDED;
    public static HResults WIN32_ERROR_DS_SORT_CONTROL_MISSING;
    public static HResults WIN32_ERROR_DS_OFFSET_RANGE_ERROR;
    public static HResults WIN32_ERROR_DS_ROOT_MUST_BE_NC;
    public static HResults WIN32_ERROR_DS_ADD_REPLICA_INHIBITED;
    public static HResults WIN32_ERROR_DS_ATT_NOT_DEF_IN_SCHEMA;
    public static HResults WIN32_ERROR_DS_MAX_OBJ_SIZE_EXCEEDED;
    public static HResults WIN32_ERROR_DS_OBJ_STRING_NAME_EXISTS;
    public static HResults WIN32_ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA;
    public static HResults WIN32_ERROR_DS_RDN_DOESNT_MATCH_SCHEMA;
    public static HResults WIN32_ERROR_DS_NO_REQUESTED_ATTS_FOUND;
    public static HResults WIN32_ERROR_DS_USER_BUFFER_TO_SMALL;
    public static HResults WIN32_ERROR_DS_ATT_IS_NOT_ON_OBJ;
    public static HResults WIN32_ERROR_DS_ILLEGAL_MOD_OPERATION;
    public static HResults WIN32_ERROR_DS_OBJ_TOO_LARGE;
    public static HResults WIN32_ERROR_DS_BAD_INSTANCE_TYPE;
    public static HResults WIN32_ERROR_DS_MASTERDSA_REQUIRED;
    public static HResults WIN32_ERROR_DS_OBJECT_CLASS_REQUIRED;
    public static HResults WIN32_ERROR_DS_MISSING_REQUIRED_ATT;
    public static HResults WIN32_ERROR_DS_ATT_NOT_DEF_FOR_CLASS;
    public static HResults WIN32_ERROR_DS_ATT_ALREADY_EXISTS;
    public static HResults WIN32_ERROR_DS_CANT_ADD_ATT_VALUES;
    public static HResults WIN32_ERROR_DS_SINGLE_VALUE_CONSTRAINT;
    public static HResults WIN32_ERROR_DS_RANGE_CONSTRAINT;
    public static HResults WIN32_ERROR_DS_ATT_VAL_ALREADY_EXISTS;
    public static HResults WIN32_ERROR_DS_CANT_REM_MISSING_ATT;
    public static HResults WIN32_ERROR_DS_CANT_REM_MISSING_ATT_VAL;
    public static HResults WIN32_ERROR_DS_ROOT_CANT_BE_SUBREF;
    public static HResults WIN32_ERROR_DS_NO_CHAINING;
    public static HResults WIN32_ERROR_DS_NO_CHAINED_EVAL;
    public static HResults WIN32_ERROR_DS_NO_PARENT_OBJECT;
    public static HResults WIN32_ERROR_DS_PARENT_IS_AN_ALIAS;
    public static HResults WIN32_ERROR_DS_CANT_MIX_MASTER_AND_REPS;
    public static HResults WIN32_ERROR_DS_CHILDREN_EXIST;
    public static HResults WIN32_ERROR_DS_OBJ_NOT_FOUND;
    public static HResults WIN32_ERROR_DS_ALIASED_OBJ_MISSING;
    public static HResults WIN32_ERROR_DS_BAD_NAME_SYNTAX;
    public static HResults WIN32_ERROR_DS_ALIAS_POINTS_TO_ALIAS;
    public static HResults WIN32_ERROR_DS_CANT_DEREF_ALIAS;
    public static HResults WIN32_ERROR_DS_OUT_OF_SCOPE;
    public static HResults WIN32_ERROR_DS_OBJECT_BEING_REMOVED;
    public static HResults WIN32_ERROR_DS_CANT_DELETE_DSA_OBJ;
    public static HResults WIN32_ERROR_DS_GENERIC_ERROR;
    public static HResults WIN32_ERROR_DS_DSA_MUST_BE_INT_MASTER;
    public static HResults WIN32_ERROR_DS_CLASS_NOT_DSA;
    public static HResults WIN32_ERROR_DS_INSUFF_ACCESS_RIGHTS;
    public static HResults WIN32_ERROR_DS_ILLEGAL_SUPERIOR;
    public static HResults WIN32_ERROR_DS_ATTRIBUTE_OWNED_BY_SAM;
    public static HResults WIN32_ERROR_DS_NAME_TOO_MANY_PARTS;
    public static HResults WIN32_ERROR_DS_NAME_TOO_LONG;
    public static HResults WIN32_ERROR_DS_NAME_VALUE_TOO_LONG;
    public static HResults WIN32_ERROR_DS_NAME_UNPARSEABLE;
    public static HResults WIN32_ERROR_DS_NAME_TYPE_UNKNOWN;
    public static HResults WIN32_ERROR_DS_NOT_AN_OBJECT;
    public static HResults WIN32_ERROR_DS_SEC_DESC_TOO_SHORT;
    public static HResults WIN32_ERROR_DS_SEC_DESC_INVALID;
    public static HResults WIN32_ERROR_DS_NO_DELETED_NAME;
    public static HResults WIN32_ERROR_DS_SUBREF_MUST_HAVE_PARENT;
    public static HResults WIN32_ERROR_DS_NCNAME_MUST_BE_NC;
    public static HResults WIN32_ERROR_DS_CANT_ADD_SYSTEM_ONLY;
    public static HResults WIN32_ERROR_DS_CLASS_MUST_BE_CONCRETE;
    public static HResults WIN32_ERROR_DS_INVALID_DMD;
    public static HResults WIN32_ERROR_DS_OBJ_GUID_EXISTS;
    public static HResults WIN32_ERROR_DS_NOT_ON_BACKLINK;
    public static HResults WIN32_ERROR_DS_NO_CROSSREF_FOR_NC;
    public static HResults WIN32_ERROR_DS_SHUTTING_DOWN;
    public static HResults WIN32_ERROR_DS_UNKNOWN_OPERATION;
    public static HResults WIN32_ERROR_DS_INVALID_ROLE_OWNER;
    public static HResults WIN32_ERROR_DS_COULDNT_CONTACT_FSMO;
    public static HResults WIN32_ERROR_DS_CROSS_NC_DN_RENAME;
    public static HResults WIN32_ERROR_DS_CANT_MOD_SYSTEM_ONLY;
    public static HResults WIN32_ERROR_DS_REPLICATOR_ONLY;
    public static HResults WIN32_ERROR_DS_OBJ_CLASS_NOT_DEFINED;
    public static HResults WIN32_ERROR_DS_OBJ_CLASS_NOT_SUBCLASS;
    public static HResults WIN32_ERROR_DS_NAME_REFERENCE_INVALID;
    public static HResults WIN32_ERROR_DS_CROSS_REF_EXISTS;
    public static HResults WIN32_ERROR_DS_CANT_DEL_MASTER_CROSSREF;
    public static HResults WIN32_ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD;
    public static HResults WIN32_ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX;
    public static HResults WIN32_ERROR_DS_DUP_RDN;
    public static HResults WIN32_ERROR_DS_DUP_OID;
    public static HResults WIN32_ERROR_DS_DUP_MAPI_ID;
    public static HResults WIN32_ERROR_DS_DUP_SCHEMA_ID_GUID;
    public static HResults WIN32_ERROR_DS_DUP_LDAP_DISPLAY_NAME;
    public static HResults WIN32_ERROR_DS_SEMANTIC_ATT_TEST;
    public static HResults WIN32_ERROR_DS_SYNTAX_MISMATCH;
    public static HResults WIN32_ERROR_DS_EXISTS_IN_MUST_HAVE;
    public static HResults WIN32_ERROR_DS_EXISTS_IN_MAY_HAVE;
    public static HResults WIN32_ERROR_DS_NONEXISTENT_MAY_HAVE;
    public static HResults WIN32_ERROR_DS_NONEXISTENT_MUST_HAVE;
    public static HResults WIN32_ERROR_DS_AUX_CLS_TEST_FAIL;
    public static HResults WIN32_ERROR_DS_NONEXISTENT_POSS_SUP;
    public static HResults WIN32_ERROR_DS_SUB_CLS_TEST_FAIL;
    public static HResults WIN32_ERROR_DS_BAD_RDN_ATT_ID_SYNTAX;
    public static HResults WIN32_ERROR_DS_EXISTS_IN_AUX_CLS;
    public static HResults WIN32_ERROR_DS_EXISTS_IN_SUB_CLS;
    public static HResults WIN32_ERROR_DS_EXISTS_IN_POSS_SUP;
    public static HResults WIN32_ERROR_DS_RECALCSCHEMA_FAILED;
    public static HResults WIN32_ERROR_DS_TREE_DELETE_NOT_FINISHED;
    public static HResults WIN32_ERROR_DS_CANT_DELETE;
    public static HResults WIN32_ERROR_DS_ATT_SCHEMA_REQ_ID;
    public static HResults WIN32_ERROR_DS_BAD_ATT_SCHEMA_SYNTAX;
    public static HResults WIN32_ERROR_DS_CANT_CACHE_ATT;
    public static HResults WIN32_ERROR_DS_CANT_CACHE_CLASS;
    public static HResults WIN32_ERROR_DS_CANT_REMOVE_ATT_CACHE;
    public static HResults WIN32_ERROR_DS_CANT_REMOVE_CLASS_CACHE;
    public static HResults WIN32_ERROR_DS_CANT_RETRIEVE_DN;
    public static HResults WIN32_ERROR_DS_MISSING_SUPREF;
    public static HResults WIN32_ERROR_DS_CANT_RETRIEVE_INSTANCE;
    public static HResults WIN32_ERROR_DS_CODE_INCONSISTENCY;
    public static HResults WIN32_ERROR_DS_DATABASE_ERROR;
    public static HResults WIN32_ERROR_DS_GOVERNSID_MISSING;
    public static HResults WIN32_ERROR_DS_MISSING_EXPECTED_ATT;
    public static HResults WIN32_ERROR_DS_NCNAME_MISSING_CR_REF;
    public static HResults WIN32_ERROR_DS_SECURITY_CHECKING_ERROR;
    public static HResults WIN32_ERROR_DS_SCHEMA_NOT_LOADED;
    public static HResults WIN32_ERROR_DS_SCHEMA_ALLOC_FAILED;
    public static HResults WIN32_ERROR_DS_ATT_SCHEMA_REQ_SYNTAX;
    public static HResults WIN32_ERROR_DS_GCVERIFY_ERROR;
    public static HResults WIN32_ERROR_DS_DRA_SCHEMA_MISMATCH;
    public static HResults WIN32_ERROR_DS_CANT_FIND_DSA_OBJ;
    public static HResults WIN32_ERROR_DS_CANT_FIND_EXPECTED_NC;
    public static HResults WIN32_ERROR_DS_CANT_FIND_NC_IN_CACHE;
    public static HResults WIN32_ERROR_DS_CANT_RETRIEVE_CHILD;
    public static HResults WIN32_ERROR_DS_SECURITY_ILLEGAL_MODIFY;
    public static HResults WIN32_ERROR_DS_CANT_REPLACE_HIDDEN_REC;
    public static HResults WIN32_ERROR_DS_BAD_HIERARCHY_FILE;
    public static HResults WIN32_ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED;
    public static HResults WIN32_ERROR_DS_CONFIG_PARAM_MISSING;
    public static HResults WIN32_ERROR_DS_COUNTING_AB_INDICES_FAILED;
    public static HResults WIN32_ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED;
    public static HResults WIN32_ERROR_DS_INTERNAL_FAILURE;
    public static HResults WIN32_ERROR_DS_UNKNOWN_ERROR;
    public static HResults WIN32_ERROR_DS_ROOT_REQUIRES_CLASS_TOP;
    public static HResults WIN32_ERROR_DS_REFUSING_FSMO_ROLES;
    public static HResults WIN32_ERROR_DS_MISSING_FSMO_SETTINGS;
    public static HResults WIN32_ERROR_DS_UNABLE_TO_SURRENDER_ROLES;
    public static HResults WIN32_ERROR_DS_DRA_GENERIC;
    public static HResults WIN32_ERROR_DS_DRA_INVALID_PARAMETER;
    public static HResults WIN32_ERROR_DS_DRA_BUSY;
    public static HResults WIN32_ERROR_DS_DRA_BAD_DN;
    public static HResults WIN32_ERROR_DS_DRA_BAD_NC;
    public static HResults WIN32_ERROR_DS_DRA_DN_EXISTS;
    public static HResults WIN32_ERROR_DS_DRA_INTERNAL_ERROR;
    public static HResults WIN32_ERROR_DS_DRA_INCONSISTENT_DIT;
    public static HResults WIN32_ERROR_DS_DRA_CONNECTION_FAILED;
    public static HResults WIN32_ERROR_DS_DRA_BAD_INSTANCE_TYPE;
    public static HResults WIN32_ERROR_DS_DRA_OUT_OF_MEM;
    public static HResults WIN32_ERROR_DS_DRA_MAIL_PROBLEM;
    public static HResults WIN32_ERROR_DS_DRA_REF_ALREADY_EXISTS;
    public static HResults WIN32_ERROR_DS_DRA_REF_NOT_FOUND;
    public static HResults WIN32_ERROR_DS_DRA_OBJ_IS_REP_SOURCE;
    public static HResults WIN32_ERROR_DS_DRA_DB_ERROR;
    public static HResults WIN32_ERROR_DS_DRA_NO_REPLICA;
    public static HResults WIN32_ERROR_DS_DRA_ACCESS_DENIED;
    public static HResults WIN32_ERROR_DS_DRA_NOT_SUPPORTED;
    public static HResults WIN32_ERROR_DS_DRA_RPC_CANCELLED;
    public static HResults WIN32_ERROR_DS_DRA_SOURCE_DISABLED;
    public static HResults WIN32_ERROR_DS_DRA_SINK_DISABLED;
    public static HResults WIN32_ERROR_DS_DRA_NAME_COLLISION;
    public static HResults WIN32_ERROR_DS_DRA_SOURCE_REINSTALLED;
    public static HResults WIN32_ERROR_DS_DRA_MISSING_PARENT;
    public static HResults WIN32_ERROR_DS_DRA_PREEMPTED;
    public static HResults WIN32_ERROR_DS_DRA_ABANDON_SYNC;
    public static HResults WIN32_ERROR_DS_DRA_SHUTDOWN;
    public static HResults WIN32_ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET;
    public static HResults WIN32_ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA;
    public static HResults WIN32_ERROR_DS_DRA_EXTN_CONNECTION_FAILED;
    public static HResults WIN32_ERROR_DS_INSTALL_SCHEMA_MISMATCH;
    public static HResults WIN32_ERROR_DS_DUP_LINK_ID;
    public static HResults WIN32_ERROR_DS_NAME_ERROR_RESOLVING;
    public static HResults WIN32_ERROR_DS_NAME_ERROR_NOT_FOUND;
    public static HResults WIN32_ERROR_DS_NAME_ERROR_NOT_UNIQUE;
    public static HResults WIN32_ERROR_DS_NAME_ERROR_NO_MAPPING;
    public static HResults WIN32_ERROR_DS_NAME_ERROR_DOMAIN_ONLY;
    public static HResults WIN32_ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING;
    public static HResults WIN32_ERROR_DS_CONSTRUCTED_ATT_MOD;
    public static HResults WIN32_ERROR_DS_WRONG_OM_OBJ_CLASS;
    public static HResults WIN32_ERROR_DS_DRA_REPL_PENDING;
    public static HResults WIN32_ERROR_DS_DS_REQUIRED;
    public static HResults WIN32_ERROR_DS_INVALID_LDAP_DISPLAY_NAME;
    public static HResults WIN32_ERROR_DS_NON_BASE_SEARCH;
    public static HResults WIN32_ERROR_DS_CANT_RETRIEVE_ATTS;
    public static HResults WIN32_ERROR_DS_BACKLINK_WITHOUT_LINK;
    public static HResults WIN32_ERROR_DS_EPOCH_MISMATCH;
    public static HResults WIN32_ERROR_DS_SRC_NAME_MISMATCH;
    public static HResults WIN32_ERROR_DS_SRC_AND_DST_NC_IDENTICAL;
    public static HResults WIN32_ERROR_DS_DST_NC_MISMATCH;
    public static HResults WIN32_ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC;
    public static HResults WIN32_ERROR_DS_SRC_GUID_MISMATCH;
    public static HResults WIN32_ERROR_DS_CANT_MOVE_DELETED_OBJECT;
    public static HResults WIN32_ERROR_DS_PDC_OPERATION_IN_PROGRESS;
    public static HResults WIN32_ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD;
    public static HResults WIN32_ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION;
    public static HResults WIN32_ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS;
    public static HResults WIN32_ERROR_DS_NC_MUST_HAVE_NC_PARENT;
    public static HResults WIN32_ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE;
    public static HResults WIN32_ERROR_DS_DST_DOMAIN_NOT_NATIVE;
    public static HResults WIN32_ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER;
    public static HResults WIN32_ERROR_DS_CANT_MOVE_ACCOUNT_GROUP;
    public static HResults WIN32_ERROR_DS_CANT_MOVE_RESOURCE_GROUP;
    public static HResults WIN32_ERROR_DS_INVALID_SEARCH_FLAG;
    public static HResults WIN32_ERROR_DS_NO_TREE_DELETE_ABOVE_NC;
    public static HResults WIN32_ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE;
    public static HResults WIN32_ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE;
    public static HResults WIN32_ERROR_DS_SAM_INIT_FAILURE;
    public static HResults WIN32_ERROR_DS_SENSITIVE_GROUP_VIOLATION;
    public static HResults WIN32_ERROR_DS_CANT_MOD_PRIMARYGROUPID;
    public static HResults WIN32_ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD;
    public static HResults WIN32_ERROR_DS_NONSAFE_SCHEMA_CHANGE;
    public static HResults WIN32_ERROR_DS_SCHEMA_UPDATE_DISALLOWED;
    public static HResults WIN32_ERROR_DS_CANT_CREATE_UNDER_SCHEMA;
    public static HResults WIN32_ERROR_DS_INSTALL_NO_SRC_SCH_VERSION;
    public static HResults WIN32_ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE;
    public static HResults WIN32_ERROR_DS_INVALID_GROUP_TYPE;
    public static HResults WIN32_ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN;
    public static HResults WIN32_ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN;
    public static HResults WIN32_ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER;
    public static HResults WIN32_ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER;
    public static HResults WIN32_ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER;
    public static HResults WIN32_ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER;
    public static HResults WIN32_ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER;
    public static HResults WIN32_ERROR_DS_HAVE_PRIMARY_MEMBERS;
    public static HResults WIN32_ERROR_DS_STRING_SD_CONVERSION_FAILED;
    public static HResults WIN32_ERROR_DS_NAMING_MASTER_GC;
    public static HResults WIN32_ERROR_DS_DNS_LOOKUP_FAILURE;
    public static HResults WIN32_ERROR_DS_COULDNT_UPDATE_SPNS;
    public static HResults WIN32_ERROR_DS_CANT_RETRIEVE_SD;
    public static HResults WIN32_ERROR_DS_KEY_NOT_UNIQUE;
    public static HResults WIN32_ERROR_DS_WRONG_LINKED_ATT_SYNTAX;
    public static HResults WIN32_ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD;
    public static HResults WIN32_ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY;
    public static HResults WIN32_ERROR_DS_CANT_START;
    public static HResults WIN32_ERROR_DS_INIT_FAILURE;
    public static HResults WIN32_ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION;
    public static HResults WIN32_ERROR_DS_SOURCE_DOMAIN_IN_FOREST;
    public static HResults WIN32_ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST;
    public static HResults WIN32_ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED;
    public static HResults WIN32_ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN;
    public static HResults WIN32_ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER;
    public static HResults WIN32_ERROR_DS_SRC_SID_EXISTS_IN_FOREST;
    public static HResults WIN32_ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH;
    public static HResults WIN32_ERROR_SAM_INIT_FAILURE;
    public static HResults WIN32_ERROR_DS_DRA_SCHEMA_INFO_SHIP;
    public static HResults WIN32_ERROR_DS_DRA_SCHEMA_CONFLICT;
    public static HResults WIN32_ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT;
    public static HResults WIN32_ERROR_DS_DRA_OBJ_NC_MISMATCH;
    public static HResults WIN32_ERROR_DS_NC_STILL_HAS_DSAS;
    public static HResults WIN32_ERROR_DS_GC_REQUIRED;
    public static HResults WIN32_ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY;
    public static HResults WIN32_ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS;
    public static HResults WIN32_ERROR_DS_CANT_ADD_TO_GC;
    public static HResults WIN32_ERROR_DS_NO_CHECKPOINT_WITH_PDC;
    public static HResults WIN32_ERROR_DS_SOURCE_AUDITING_NOT_ENABLED;
    public static HResults WIN32_ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC;
    public static HResults WIN32_ERROR_DS_INVALID_NAME_FOR_SPN;
    public static HResults WIN32_ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS;
    public static HResults WIN32_ERROR_DS_UNICODEPWD_NOT_IN_QUOTES;
    public static HResults WIN32_ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED;
    public static HResults WIN32_ERROR_DS_MUST_BE_RUN_ON_DST_DC;
    public static HResults WIN32_ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER;
    public static HResults WIN32_ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ;
    public static HResults WIN32_ERROR_DS_INIT_FAILURE_CONSOLE;
    public static HResults WIN32_ERROR_DS_SAM_INIT_FAILURE_CONSOLE;
    public static HResults WIN32_ERROR_DS_FOREST_VERSION_TOO_HIGH;
    public static HResults WIN32_ERROR_DS_DOMAIN_VERSION_TOO_HIGH;
    public static HResults WIN32_ERROR_DS_FOREST_VERSION_TOO_LOW;
    public static HResults WIN32_ERROR_DS_DOMAIN_VERSION_TOO_LOW;
    public static HResults WIN32_ERROR_DS_INCOMPATIBLE_VERSION;
    public static HResults WIN32_ERROR_DS_LOW_DSA_VERSION;
    public static HResults WIN32_ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN;
    public static HResults WIN32_ERROR_DS_NOT_SUPPORTED_SORT_ORDER;
    public static HResults WIN32_ERROR_DS_NAME_NOT_UNIQUE;
    public static HResults WIN32_ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4;
    public static HResults WIN32_ERROR_DS_OUT_OF_VERSION_STORE;
    public static HResults WIN32_ERROR_DS_INCOMPATIBLE_CONTROLS_USED;
    public static HResults WIN32_ERROR_DS_NO_REF_DOMAIN;
    public static HResults WIN32_ERROR_DS_RESERVED_LINK_ID;
    public static HResults WIN32_ERROR_DS_LINK_ID_NOT_AVAILABLE;
    public static HResults WIN32_ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER;
    public static HResults WIN32_ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE;
    public static HResults WIN32_ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC;
    public static HResults WIN32_ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG;
    public static HResults WIN32_ERROR_DS_MODIFYDN_WRONG_GRANDPARENT;
    public static HResults WIN32_ERROR_DS_NAME_ERROR_TRUST_REFERRAL;
    public static HResults WIN32_ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER;
    public static HResults WIN32_ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD;
    public static HResults WIN32_ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2;
    public static HResults WIN32_ERROR_DS_THREAD_LIMIT_EXCEEDED;
    public static HResults WIN32_ERROR_DS_NOT_CLOSEST;
    public static HResults WIN32_ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF;
    public static HResults WIN32_ERROR_DS_SINGLE_USER_MODE_FAILED;
    public static HResults WIN32_ERROR_DS_NTDSCRIPT_SYNTAX_ERROR;
    public static HResults WIN32_ERROR_DS_NTDSCRIPT_PROCESS_ERROR;
    public static HResults WIN32_ERROR_DS_DIFFERENT_REPL_EPOCHS;
    public static HResults WIN32_ERROR_DS_DRS_EXTENSIONS_CHANGED;
    public static HResults WIN32_ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR;
    public static HResults WIN32_ERROR_DS_NO_MSDS_INTID;
    public static HResults WIN32_ERROR_DS_DUP_MSDS_INTID;
    public static HResults WIN32_ERROR_DS_EXISTS_IN_RDNATTID;
    public static HResults WIN32_ERROR_DS_AUTHORIZATION_FAILED;
    public static HResults WIN32_ERROR_DS_INVALID_SCRIPT;
    public static HResults WIN32_ERROR_DS_REMOTE_CROSSREF_OP_FAILED;
    public static HResults WIN32_ERROR_DS_CROSS_REF_BUSY;
    public static HResults WIN32_ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN;
    public static HResults WIN32_ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC;
    public static HResults WIN32_ERROR_DS_DUPLICATE_ID_FOUND;
    public static HResults WIN32_ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT;
    public static HResults WIN32_ERROR_DS_GROUP_CONVERSION_ERROR;
    public static HResults WIN32_ERROR_DS_CANT_MOVE_APP_BASIC_GROUP;
    public static HResults WIN32_ERROR_DS_CANT_MOVE_APP_QUERY_GROUP;
    public static HResults WIN32_ERROR_DS_ROLE_NOT_VERIFIED;
    public static HResults WIN32_ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL;
    public static HResults WIN32_ERROR_DS_DOMAIN_RENAME_IN_PROGRESS;
    public static HResults WIN32_ERROR_DS_EXISTING_AD_CHILD_NC;
    public static HResults WIN32_ERROR_DS_REPL_LIFETIME_EXCEEDED;
    public static HResults WIN32_ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER;
    public static HResults WIN32_ERROR_DS_LDAP_SEND_QUEUE_FULL;
    public static HResults WIN32_ERROR_DS_DRA_OUT_SCHEDULE_WINDOW;
    public static HResults WIN32_DNS_ERROR_RCODE_FORMAT_ERROR;
    public static HResults WIN32_DNS_ERROR_RCODE_SERVER_FAILURE;
    public static HResults WIN32_DNS_ERROR_RCODE_NAME_ERROR;
    public static HResults WIN32_DNS_ERROR_RCODE_NOT_IMPLEMENTED;
    public static HResults WIN32_DNS_ERROR_RCODE_REFUSED;
    public static HResults WIN32_DNS_ERROR_RCODE_YXDOMAIN;
    public static HResults WIN32_DNS_ERROR_RCODE_YXRRSET;
    public static HResults WIN32_DNS_ERROR_RCODE_NXRRSET;
    public static HResults WIN32_DNS_ERROR_RCODE_NOTAUTH;
    public static HResults WIN32_DNS_ERROR_RCODE_NOTZONE;
    public static HResults WIN32_DNS_ERROR_RCODE_BADSIG;
    public static HResults WIN32_DNS_ERROR_RCODE_BADKEY;
    public static HResults WIN32_DNS_ERROR_RCODE_BADTIME;
    public static HResults WIN32_DNS_ERROR_PACKET_FMT_BASE;
    public static HResults WIN32_DNS_INFO_NO_RECORDS;
    public static HResults WIN32_DNS_ERROR_BAD_PACKET;
    public static HResults WIN32_DNS_ERROR_NO_PACKET;
    public static HResults WIN32_DNS_ERROR_RCODE;
    public static HResults WIN32_DNS_ERROR_UNSECURE_PACKET;
    public static HResults WIN32_DNS_ERROR_INVALID_TYPE;
    public static HResults WIN32_DNS_ERROR_INVALID_IP_ADDRESS;
    public static HResults WIN32_DNS_ERROR_INVALID_PROPERTY;
    public static HResults WIN32_DNS_ERROR_TRY_AGAIN_LATER;
    public static HResults WIN32_DNS_ERROR_NOT_UNIQUE;
    public static HResults WIN32_DNS_ERROR_NON_RFC_NAME;
    public static HResults WIN32_DNS_STATUS_FQDN;
    public static HResults WIN32_DNS_STATUS_DOTTED_NAME;
    public static HResults WIN32_DNS_STATUS_SINGLE_PART_NAME;
    public static HResults WIN32_DNS_ERROR_INVALID_NAME_CHAR;
    public static HResults WIN32_DNS_ERROR_NUMERIC_NAME;
    public static HResults WIN32_DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER;
    public static HResults WIN32_DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION;
    public static HResults WIN32_DNS_ERROR_CANNOT_FIND_ROOT_HINTS;
    public static HResults WIN32_DNS_ERROR_INCONSISTENT_ROOT_HINTS;
    public static HResults WIN32_DNS_ERROR_ZONE_BASE;
    public static HResults WIN32_DNS_ERROR_ZONE_DOES_NOT_EXIST;
    public static HResults WIN32_DNS_ERROR_NO_ZONE_INFO;
    public static HResults WIN32_DNS_ERROR_INVALID_ZONE_OPERATION;
    public static HResults WIN32_DNS_ERROR_ZONE_CONFIGURATION_ERROR;
    public static HResults WIN32_DNS_ERROR_ZONE_HAS_NO_SOA_RECORD;
    public static HResults WIN32_DNS_ERROR_ZONE_HAS_NO_NS_RECORDS;
    public static HResults WIN32_DNS_ERROR_ZONE_LOCKED;
    public static HResults WIN32_DNS_ERROR_ZONE_CREATION_FAILED;
    public static HResults WIN32_DNS_ERROR_ZONE_ALREADY_EXISTS;
    public static HResults WIN32_DNS_ERROR_AUTOZONE_ALREADY_EXISTS;
    public static HResults WIN32_DNS_ERROR_INVALID_ZONE_TYPE;
    public static HResults WIN32_DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP;
    public static HResults WIN32_DNS_ERROR_ZONE_NOT_SECONDARY;
    public static HResults WIN32_DNS_ERROR_NEED_SECONDARY_ADDRESSES;
    public static HResults WIN32_DNS_ERROR_WINS_INIT_FAILED;
    public static HResults WIN32_DNS_ERROR_NEED_WINS_SERVERS;
    public static HResults WIN32_DNS_ERROR_NBSTAT_INIT_FAILED;
    public static HResults WIN32_DNS_ERROR_SOA_DELETE_INVALID;
    public static HResults WIN32_DNS_ERROR_FORWARDER_ALREADY_EXISTS;
    public static HResults WIN32_DNS_ERROR_ZONE_REQUIRES_MASTER_IP;
    public static HResults WIN32_DNS_ERROR_ZONE_IS_SHUTDOWN;
    public static HResults WIN32_DNS_ERROR_DATAFILE_BASE;
    public static HResults WIN32_DNS_ERROR_PRIMARY_REQUIRES_DATAFILE;
    public static HResults WIN32_DNS_ERROR_INVALID_DATAFILE_NAME;
    public static HResults WIN32_DNS_ERROR_DATAFILE_OPEN_FAILURE;
    public static HResults WIN32_DNS_ERROR_FILE_WRITEBACK_FAILED;
    public static HResults WIN32_DNS_ERROR_DATAFILE_PARSING;
    public static HResults WIN32_DNS_ERROR_DATABASE_BASE;
    public static HResults WIN32_DNS_ERROR_RECORD_DOES_NOT_EXIST;
    public static HResults WIN32_DNS_ERROR_RECORD_FORMAT;
    public static HResults WIN32_DNS_ERROR_NODE_CREATION_FAILED;
    public static HResults WIN32_DNS_ERROR_UNKNOWN_RECORD_TYPE;
    public static HResults WIN32_DNS_ERROR_RECORD_TIMED_OUT;
    public static HResults WIN32_DNS_ERROR_NAME_NOT_IN_ZONE;
    public static HResults WIN32_DNS_ERROR_CNAME_LOOP;
    public static HResults WIN32_DNS_ERROR_NODE_IS_CNAME;
    public static HResults WIN32_DNS_ERROR_CNAME_COLLISION;
    public static HResults WIN32_DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT;
    public static HResults WIN32_DNS_ERROR_RECORD_ALREADY_EXISTS;
    public static HResults WIN32_DNS_ERROR_SECONDARY_DATA;
    public static HResults WIN32_DNS_ERROR_NO_CREATE_CACHE_DATA;
    public static HResults WIN32_DNS_ERROR_NAME_DOES_NOT_EXIST;
    public static HResults WIN32_DNS_WARNING_PTR_CREATE_FAILED;
    public static HResults WIN32_DNS_WARNING_DOMAIN_UNDELETED;
    public static HResults WIN32_DNS_ERROR_DS_UNAVAILABLE;
    public static HResults WIN32_DNS_ERROR_DS_ZONE_ALREADY_EXISTS;
    public static HResults WIN32_DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE;
    public static HResults WIN32_DNS_ERROR_OPERATION_BASE;
    public static HResults WIN32_DNS_INFO_AXFR_COMPLETE;
    public static HResults WIN32_DNS_ERROR_AXFR;
    public static HResults WIN32_DNS_INFO_ADDED_LOCAL_WINS;
    public static HResults WIN32_DNS_ERROR_SECURE_BASE;
    public static HResults WIN32_DNS_STATUS_CONTINUE_NEEDED;
    public static HResults WIN32_DNS_ERROR_SETUP_BASE;
    public static HResults WIN32_DNS_ERROR_NO_TCPIP;
    public static HResults WIN32_DNS_ERROR_NO_DNS_SERVERS;
    public static HResults WIN32_DNS_ERROR_DP_BASE;
    public static HResults WIN32_DNS_ERROR_DP_DOES_NOT_EXIST;
    public static HResults WIN32_DNS_ERROR_DP_ALREADY_EXISTS;
    public static HResults WIN32_DNS_ERROR_DP_NOT_ENLISTED;
    public static HResults WIN32_DNS_ERROR_DP_ALREADY_ENLISTED;
    public static HResults WIN32_DNS_ERROR_DP_NOT_AVAILABLE;
    public static HResults WIN32_DNS_ERROR_DP_FSMO_ERROR;
    public static HResults WIN32_WSAEINTR;
    public static HResults WIN32_WSAEBADF;
    public static HResults WIN32_WSAEACCES;
    public static HResults WIN32_WSAEFAULT;
    public static HResults WIN32_WSAEINVAL;
    public static HResults WIN32_WSAEMFILE;
    public static HResults WIN32_WSAEWOULDBLOCK;
    public static HResults WIN32_WSAEINPROGRESS;
    public static HResults WIN32_WSAEALREADY;
    public static HResults WIN32_WSAENOTSOCK;
    public static HResults WIN32_WSAEDESTADDRREQ;
    public static HResults WIN32_WSAEMSGSIZE;
    public static HResults WIN32_WSAEPROTOTYPE;
    public static HResults WIN32_WSAENOPROTOOPT;
    public static HResults WIN32_WSAEPROTONOSUPPORT;
    public static HResults WIN32_WSAESOCKTNOSUPPORT;
    public static HResults WIN32_WSAEOPNOTSUPP;
    public static HResults WIN32_WSAEPFNOSUPPORT;
    public static HResults WIN32_WSAEAFNOSUPPORT;
    public static HResults WIN32_WSAEADDRINUSE;
    public static HResults WIN32_WSAEADDRNOTAVAIL;
    public static HResults WIN32_WSAENETDOWN;
    public static HResults WIN32_WSAENETUNREACH;
    public static HResults WIN32_WSAENETRESET;
    public static HResults WIN32_WSAECONNABORTED;
    public static HResults WIN32_WSAECONNRESET;
    public static HResults WIN32_WSAENOBUFS;
    public static HResults WIN32_WSAEISCONN;
    public static HResults WIN32_WSAENOTCONN;
    public static HResults WIN32_WSAESHUTDOWN;
    public static HResults WIN32_WSAETOOMANYREFS;
    public static HResults WIN32_WSAETIMEDOUT;
    public static HResults WIN32_WSAECONNREFUSED;
    public static HResults WIN32_WSAELOOP;
    public static HResults WIN32_WSAENAMETOOLONG;
    public static HResults WIN32_WSAEHOSTDOWN;
    public static HResults WIN32_WSAEHOSTUNREACH;
    public static HResults WIN32_WSAENOTEMPTY;
    public static HResults WIN32_WSAEPROCLIM;
    public static HResults WIN32_WSAEUSERS;
    public static HResults WIN32_WSAEDQUOT;
    public static HResults WIN32_WSAESTALE;
    public static HResults WIN32_WSAEREMOTE;
    public static HResults WIN32_WSASYSNOTREADY;
    public static HResults WIN32_WSAVERNOTSUPPORTED;
    public static HResults WIN32_WSANOTINITIALISED;
    public static HResults WIN32_WSAEDISCON;
    public static HResults WIN32_WSAENOMORE;
    public static HResults WIN32_WSAECANCELLED;
    public static HResults WIN32_WSAEINVALIDPROCTABLE;
    public static HResults WIN32_WSAEINVALIDPROVIDER;
    public static HResults WIN32_WSAEPROVIDERFAILEDINIT;
    public static HResults WIN32_WSASYSCALLFAILURE;
    public static HResults WIN32_WSASERVICE_NOT_FOUND;
    public static HResults WIN32_WSATYPE_NOT_FOUND;
    public static HResults WIN32_WSA_E_NO_MORE;
    public static HResults WIN32_WSA_E_CANCELLED;
    public static HResults WIN32_WSAEREFUSED;
    public static HResults WIN32_WSAHOST_NOT_FOUND;
    public static HResults WIN32_WSATRY_AGAIN;
    public static HResults WIN32_WSANO_RECOVERY;
    public static HResults WIN32_WSANO_DATA;
    public static HResults WIN32_WSA_QOS_RECEIVERS;
    public static HResults WIN32_WSA_QOS_SENDERS;
    public static HResults WIN32_WSA_QOS_NO_SENDERS;
    public static HResults WIN32_WSA_QOS_NO_RECEIVERS;
    public static HResults WIN32_WSA_QOS_REQUEST_CONFIRMED;
    public static HResults WIN32_WSA_QOS_ADMISSION_FAILURE;
    public static HResults WIN32_WSA_QOS_POLICY_FAILURE;
    public static HResults WIN32_WSA_QOS_BAD_STYLE;
    public static HResults WIN32_WSA_QOS_BAD_OBJECT;
    public static HResults WIN32_WSA_QOS_TRAFFIC_CTRL_ERROR;
    public static HResults WIN32_WSA_QOS_GENERIC_ERROR;
    public static HResults WIN32_WSA_QOS_ESERVICETYPE;
    public static HResults WIN32_WSA_QOS_EFLOWSPEC;
    public static HResults WIN32_WSA_QOS_EPROVSPECBUF;
    public static HResults WIN32_WSA_QOS_EFILTERSTYLE;
    public static HResults WIN32_WSA_QOS_EFILTERTYPE;
    public static HResults WIN32_WSA_QOS_EFILTERCOUNT;
    public static HResults WIN32_WSA_QOS_EOBJLENGTH;
    public static HResults WIN32_WSA_QOS_EFLOWCOUNT;
    public static HResults WIN32_WSA_QOS_EUNKOWNPSOBJ;
    public static HResults WIN32_WSA_QOS_EPOLICYOBJ;
    public static HResults WIN32_WSA_QOS_EFLOWDESC;
    public static HResults WIN32_WSA_QOS_EPSFLOWSPEC;
    public static HResults WIN32_WSA_QOS_EPSFILTERSPEC;
    public static HResults WIN32_WSA_QOS_ESDMODEOBJ;
    public static HResults WIN32_WSA_QOS_ESHAPERATEOBJ;
    public static HResults WIN32_WSA_QOS_RESERVED_PETYPE;
    public static HResults WIN32_ERROR_SXS_SECTION_NOT_FOUND;
    public static HResults WIN32_ERROR_SXS_CANT_GEN_ACTCTX;
    public static HResults WIN32_ERROR_SXS_INVALID_ACTCTXDATA_FORMAT;
    public static HResults WIN32_ERROR_SXS_ASSEMBLY_NOT_FOUND;
    public static HResults WIN32_ERROR_SXS_MANIFEST_FORMAT_ERROR;
    public static HResults WIN32_ERROR_SXS_MANIFEST_PARSE_ERROR;
    public static HResults WIN32_ERROR_SXS_ACTIVATION_CONTEXT_DISABLED;
    public static HResults WIN32_ERROR_SXS_KEY_NOT_FOUND;
    public static HResults WIN32_ERROR_SXS_VERSION_CONFLICT;
    public static HResults WIN32_ERROR_SXS_WRONG_SECTION_TYPE;
    public static HResults WIN32_ERROR_SXS_THREAD_QUERIES_DISABLED;
    public static HResults WIN32_ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET;
    public static HResults WIN32_ERROR_SXS_UNKNOWN_ENCODING_GROUP;
    public static HResults WIN32_ERROR_SXS_UNKNOWN_ENCODING;
    public static HResults WIN32_ERROR_SXS_INVALID_XML_NAMESPACE_URI;
    public static HResults WIN32_ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED;
    public static HResults WIN32_ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED;
    public static HResults WIN32_ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE;
    public static HResults WIN32_ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE;
    public static HResults WIN32_ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE;
    public static HResults WIN32_ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT;
    public static HResults WIN32_ERROR_SXS_DUPLICATE_DLL_NAME;
    public static HResults WIN32_ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME;
    public static HResults WIN32_ERROR_SXS_DUPLICATE_CLSID;
    public static HResults WIN32_ERROR_SXS_DUPLICATE_IID;
    public static HResults WIN32_ERROR_SXS_DUPLICATE_TLBID;
    public static HResults WIN32_ERROR_SXS_DUPLICATE_PROGID;
    public static HResults WIN32_ERROR_SXS_DUPLICATE_ASSEMBLY_NAME;
    public static HResults WIN32_ERROR_SXS_FILE_HASH_MISMATCH;
    public static HResults WIN32_ERROR_SXS_POLICY_PARSE_ERROR;
    public static HResults WIN32_ERROR_SXS_XML_E_MISSINGQUOTE;
    public static HResults WIN32_ERROR_SXS_XML_E_COMMENTSYNTAX;
    public static HResults WIN32_ERROR_SXS_XML_E_BADSTARTNAMECHAR;
    public static HResults WIN32_ERROR_SXS_XML_E_BADNAMECHAR;
    public static HResults WIN32_ERROR_SXS_XML_E_BADCHARINSTRING;
    public static HResults WIN32_ERROR_SXS_XML_E_XMLDECLSYNTAX;
    public static HResults WIN32_ERROR_SXS_XML_E_BADCHARDATA;
    public static HResults WIN32_ERROR_SXS_XML_E_MISSINGWHITESPACE;
    public static HResults WIN32_ERROR_SXS_XML_E_EXPECTINGTAGEND;
    public static HResults WIN32_ERROR_SXS_XML_E_MISSINGSEMICOLON;
    public static HResults WIN32_ERROR_SXS_XML_E_UNBALANCEDPAREN;
    public static HResults WIN32_ERROR_SXS_XML_E_INTERNALERROR;
    public static HResults WIN32_ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE;
    public static HResults WIN32_ERROR_SXS_XML_E_INCOMPLETE_ENCODING;
    public static HResults WIN32_ERROR_SXS_XML_E_MISSING_PAREN;
    public static HResults WIN32_ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE;
    public static HResults WIN32_ERROR_SXS_XML_E_MULTIPLE_COLONS;
    public static HResults WIN32_ERROR_SXS_XML_E_INVALID_DECIMAL;
    public static HResults WIN32_ERROR_SXS_XML_E_INVALID_HEXIDECIMAL;
    public static HResults WIN32_ERROR_SXS_XML_E_INVALID_UNICODE;
    public static HResults WIN32_ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK;
    public static HResults WIN32_ERROR_SXS_XML_E_UNEXPECTEDENDTAG;
    public static HResults WIN32_ERROR_SXS_XML_E_UNCLOSEDTAG;
    public static HResults WIN32_ERROR_SXS_XML_E_DUPLICATEATTRIBUTE;
    public static HResults WIN32_ERROR_SXS_XML_E_MULTIPLEROOTS;
    public static HResults WIN32_ERROR_SXS_XML_E_INVALIDATROOTLEVEL;
    public static HResults WIN32_ERROR_SXS_XML_E_BADXMLDECL;
    public static HResults WIN32_ERROR_SXS_XML_E_MISSINGROOT;
    public static HResults WIN32_ERROR_SXS_XML_E_UNEXPECTEDEOF;
    public static HResults WIN32_ERROR_SXS_XML_E_BADPEREFINSUBSET;
    public static HResults WIN32_ERROR_SXS_XML_E_UNCLOSEDSTARTTAG;
    public static HResults WIN32_ERROR_SXS_XML_E_UNCLOSEDENDTAG;
    public static HResults WIN32_ERROR_SXS_XML_E_UNCLOSEDSTRING;
    public static HResults WIN32_ERROR_SXS_XML_E_UNCLOSEDCOMMENT;
    public static HResults WIN32_ERROR_SXS_XML_E_UNCLOSEDDECL;
    public static HResults WIN32_ERROR_SXS_XML_E_UNCLOSEDCDATA;
    public static HResults WIN32_ERROR_SXS_XML_E_RESERVEDNAMESPACE;
    public static HResults WIN32_ERROR_SXS_XML_E_INVALIDENCODING;
    public static HResults WIN32_ERROR_SXS_XML_E_INVALIDSWITCH;
    public static HResults WIN32_ERROR_SXS_XML_E_BADXMLCASE;
    public static HResults WIN32_ERROR_SXS_XML_E_INVALID_STANDALONE;
    public static HResults WIN32_ERROR_SXS_XML_E_UNEXPECTED_STANDALONE;
    public static HResults WIN32_ERROR_SXS_XML_E_INVALID_VERSION;
    public static HResults WIN32_ERROR_SXS_XML_E_MISSINGEQUALS;
    public static HResults WIN32_ERROR_SXS_PROTECTION_RECOVERY_FAILED;
    public static HResults WIN32_ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT;
    public static HResults WIN32_ERROR_SXS_PROTECTION_CATALOG_NOT_VALID;
    public static HResults WIN32_ERROR_SXS_UNTRANSLATABLE_HRESULT;
    public static HResults WIN32_ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING;
    public static HResults WIN32_ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE;
    public static HResults WIN32_ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME;
    public static HResults WIN32_ERROR_IPSEC_QM_POLICY_EXISTS;
    public static HResults WIN32_ERROR_IPSEC_QM_POLICY_NOT_FOUND;
    public static HResults WIN32_ERROR_IPSEC_QM_POLICY_IN_USE;
    public static HResults WIN32_ERROR_IPSEC_MM_POLICY_EXISTS;
    public static HResults WIN32_ERROR_IPSEC_MM_POLICY_NOT_FOUND;
    public static HResults WIN32_ERROR_IPSEC_MM_POLICY_IN_USE;
    public static HResults WIN32_ERROR_IPSEC_MM_FILTER_EXISTS;
    public static HResults WIN32_ERROR_IPSEC_MM_FILTER_NOT_FOUND;
    public static HResults WIN32_ERROR_IPSEC_TRANSPORT_FILTER_EXISTS;
    public static HResults WIN32_ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND;
    public static HResults WIN32_ERROR_IPSEC_MM_AUTH_EXISTS;
    public static HResults WIN32_ERROR_IPSEC_MM_AUTH_NOT_FOUND;
    public static HResults WIN32_ERROR_IPSEC_MM_AUTH_IN_USE;
    public static HResults WIN32_ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND;
    public static HResults WIN32_ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND;
    public static HResults WIN32_ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND;
    public static HResults WIN32_ERROR_IPSEC_TUNNEL_FILTER_EXISTS;
    public static HResults WIN32_ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND;
    public static HResults WIN32_ERROR_IPSEC_MM_FILTER_PENDING_DELETION;
    public static HResults WIN32_ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION;
    public static HResults WIN32_ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION;
    public static HResults WIN32_ERROR_IPSEC_MM_POLICY_PENDING_DELETION;
    public static HResults WIN32_ERROR_IPSEC_MM_AUTH_PENDING_DELETION;
    public static HResults WIN32_ERROR_IPSEC_QM_POLICY_PENDING_DELETION;
    public static HResults WIN32_WARNING_IPSEC_MM_POLICY_PRUNED;
    public static HResults WIN32_WARNING_IPSEC_QM_POLICY_PRUNED;
    public static HResults WIN32_ERROR_IPSEC_IKE_NEG_STATUS_BEGIN;
    public static HResults WIN32_ERROR_IPSEC_IKE_AUTH_FAIL;
    public static HResults WIN32_ERROR_IPSEC_IKE_ATTRIB_FAIL;
    public static HResults WIN32_ERROR_IPSEC_IKE_NEGOTIATION_PENDING;
    public static HResults WIN32_ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR;
    public static HResults WIN32_ERROR_IPSEC_IKE_TIMED_OUT;
    public static HResults WIN32_ERROR_IPSEC_IKE_NO_CERT;
    public static HResults WIN32_ERROR_IPSEC_IKE_SA_DELETED;
    public static HResults WIN32_ERROR_IPSEC_IKE_SA_REAPED;
    public static HResults WIN32_ERROR_IPSEC_IKE_MM_ACQUIRE_DROP;
    public static HResults WIN32_ERROR_IPSEC_IKE_QM_ACQUIRE_DROP;
    public static HResults WIN32_ERROR_IPSEC_IKE_QUEUE_DROP_MM;
    public static HResults WIN32_ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM;
    public static HResults WIN32_ERROR_IPSEC_IKE_DROP_NO_RESPONSE;
    public static HResults WIN32_ERROR_IPSEC_IKE_MM_DELAY_DROP;
    public static HResults WIN32_ERROR_IPSEC_IKE_QM_DELAY_DROP;
    public static HResults WIN32_ERROR_IPSEC_IKE_ERROR;
    public static HResults WIN32_ERROR_IPSEC_IKE_CRL_FAILED;
    public static HResults WIN32_ERROR_IPSEC_IKE_INVALID_KEY_USAGE;
    public static HResults WIN32_ERROR_IPSEC_IKE_INVALID_CERT_TYPE;
    public static HResults WIN32_ERROR_IPSEC_IKE_NO_PRIVATE_KEY;
    public static HResults WIN32_ERROR_IPSEC_IKE_DH_FAIL;
    public static HResults WIN32_ERROR_IPSEC_IKE_INVALID_HEADER;
    public static HResults WIN32_ERROR_IPSEC_IKE_NO_POLICY;
    public static HResults WIN32_ERROR_IPSEC_IKE_INVALID_SIGNATURE;
    public static HResults WIN32_ERROR_IPSEC_IKE_KERBEROS_ERROR;
    public static HResults WIN32_ERROR_IPSEC_IKE_NO_PUBLIC_KEY;
    public static HResults WIN32_ERROR_IPSEC_IKE_PROCESS_ERR;
    public static HResults WIN32_ERROR_IPSEC_IKE_PROCESS_ERR_SA;
    public static HResults WIN32_ERROR_IPSEC_IKE_PROCESS_ERR_PROP;
    public static HResults WIN32_ERROR_IPSEC_IKE_PROCESS_ERR_TRANS;
    public static HResults WIN32_ERROR_IPSEC_IKE_PROCESS_ERR_KE;
    public static HResults WIN32_ERROR_IPSEC_IKE_PROCESS_ERR_ID;
    public static HResults WIN32_ERROR_IPSEC_IKE_PROCESS_ERR_CERT;
    public static HResults WIN32_ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ;
    public static HResults WIN32_ERROR_IPSEC_IKE_PROCESS_ERR_HASH;
    public static HResults WIN32_ERROR_IPSEC_IKE_PROCESS_ERR_SIG;
    public static HResults WIN32_ERROR_IPSEC_IKE_PROCESS_ERR_NONCE;
    public static HResults WIN32_ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY;
    public static HResults WIN32_ERROR_IPSEC_IKE_PROCESS_ERR_DELETE;
    public static HResults WIN32_ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR;
    public static HResults WIN32_ERROR_IPSEC_IKE_INVALID_PAYLOAD;
    public static HResults WIN32_ERROR_IPSEC_IKE_LOAD_SOFT_SA;
    public static HResults WIN32_ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN;
    public static HResults WIN32_ERROR_IPSEC_IKE_INVALID_COOKIE;
    public static HResults WIN32_ERROR_IPSEC_IKE_NO_PEER_CERT;
    public static HResults WIN32_ERROR_IPSEC_IKE_PEER_CRL_FAILED;
    public static HResults WIN32_ERROR_IPSEC_IKE_POLICY_CHANGE;
    public static HResults WIN32_ERROR_IPSEC_IKE_NO_MM_POLICY;
    public static HResults WIN32_ERROR_IPSEC_IKE_NOTCBPRIV;
    public static HResults WIN32_ERROR_IPSEC_IKE_SECLOADFAIL;
    public static HResults WIN32_ERROR_IPSEC_IKE_FAILSSPINIT;
    public static HResults WIN32_ERROR_IPSEC_IKE_FAILQUERYSSP;
    public static HResults WIN32_ERROR_IPSEC_IKE_SRVACQFAIL;
    public static HResults WIN32_ERROR_IPSEC_IKE_SRVQUERYCRED;
    public static HResults WIN32_ERROR_IPSEC_IKE_GETSPIFAIL;
    public static HResults WIN32_ERROR_IPSEC_IKE_INVALID_FILTER;
    public static HResults WIN32_ERROR_IPSEC_IKE_OUT_OF_MEMORY;
    public static HResults WIN32_ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED;
    public static HResults WIN32_ERROR_IPSEC_IKE_INVALID_POLICY;
    public static HResults WIN32_ERROR_IPSEC_IKE_UNKNOWN_DOI;
    public static HResults WIN32_ERROR_IPSEC_IKE_INVALID_SITUATION;
    public static HResults WIN32_ERROR_IPSEC_IKE_DH_FAILURE;
    public static HResults WIN32_ERROR_IPSEC_IKE_INVALID_GROUP;
    public static HResults WIN32_ERROR_IPSEC_IKE_ENCRYPT;
    public static HResults WIN32_ERROR_IPSEC_IKE_DECRYPT;
    public static HResults WIN32_ERROR_IPSEC_IKE_POLICY_MATCH;
    public static HResults WIN32_ERROR_IPSEC_IKE_UNSUPPORTED_ID;
    public static HResults WIN32_ERROR_IPSEC_IKE_INVALID_HASH;
    public static HResults WIN32_ERROR_IPSEC_IKE_INVALID_HASH_ALG;
    public static HResults WIN32_ERROR_IPSEC_IKE_INVALID_HASH_SIZE;
    public static HResults WIN32_ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG;
    public static HResults WIN32_ERROR_IPSEC_IKE_INVALID_AUTH_ALG;
    public static HResults WIN32_ERROR_IPSEC_IKE_INVALID_SIG;
    public static HResults WIN32_ERROR_IPSEC_IKE_LOAD_FAILED;
    public static HResults WIN32_ERROR_IPSEC_IKE_RPC_DELETE;
    public static HResults WIN32_ERROR_IPSEC_IKE_BENIGN_REINIT;
    public static HResults WIN32_ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY;
    public static HResults WIN32_ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN;
    public static HResults WIN32_ERROR_IPSEC_IKE_MM_LIMIT;
    public static HResults WIN32_ERROR_IPSEC_IKE_NEGOTIATION_DISABLED;
    public static HResults WIN32_ERROR_IPSEC_IKE_NEG_STATUS_END;
    public static HResults WIN32_APPMODEL_ERROR_NO_PACKAGE;
    public static HResults WIN32_APPMODEL_ERROR_PACKAGE_RUNTIME_CORRUPT;
    public static HResults WIN32_APPMODEL_ERROR_PACKAGE_IDENTITY_CORRUPT;
    public static HResults WIN32_APPMODEL_ERROR_NO_APPLICATION;
    public static HResults STATUS_UNSUCCESSFUL;
    public static HResults STATUS_NOT_IMPLEMENTED;
    public static HResults STATUS_INVALID_INFO_CLASS;
    public static HResults STATUS_INFO_LENGTH_MISMATCH;
    public static HResults STATUS_ACCESS_VIOLATION;
    public static HResults STATUS_IN_PAGE_ERROR;
    public static HResults STATUS_PAGEFILE_QUOTA;
    public static HResults STATUS_INVALID_HANDLE;
    public static HResults STATUS_BAD_INITIAL_STACK;
    public static HResults STATUS_BAD_INITIAL_PC;
    public static HResults STATUS_INVALID_CID;
    public static HResults STATUS_TIMER_NOT_CANCELED;
    public static HResults STATUS_INVALID_PARAMETER;
    public static HResults STATUS_NO_SUCH_DEVICE;
    public static HResults STATUS_NO_SUCH_FILE;
    public static HResults STATUS_INVALID_DEVICE_REQUEST;
    public static HResults STATUS_END_OF_FILE;
    public static HResults STATUS_WRONG_VOLUME;
    public static HResults STATUS_NO_MEDIA_IN_DEVICE;
    public static HResults STATUS_UNRECOGNIZED_MEDIA;
    public static HResults STATUS_NONEXISTENT_SECTOR;
    public static HResults STATUS_MORE_PROCESSING_REQUIRED;
    public static HResults STATUS_NO_MEMORY;
    public static HResults STATUS_CONFLICTING_ADDRESSES;
    public static HResults STATUS_NOT_MAPPED_VIEW;
    public static HResults STATUS_UNABLE_TO_FREE_VM;
    public static HResults STATUS_UNABLE_TO_DELETE_SECTION;
    public static HResults STATUS_INVALID_SYSTEM_SERVICE;
    public static HResults STATUS_ILLEGAL_INSTRUCTION;
    public static HResults STATUS_INVALID_LOCK_SEQUENCE;
    public static HResults STATUS_INVALID_VIEW_SIZE;
    public static HResults STATUS_INVALID_FILE_FOR_SECTION;
    public static HResults STATUS_ALREADY_COMMITTED;
    public static HResults STATUS_ACCESS_DENIED;
    public static HResults STATUS_BUFFER_TOO_SMALL;
    public static HResults STATUS_OBJECT_TYPE_MISMATCH;
    public static HResults STATUS_NONCONTINUABLE_EXCEPTION;
    public static HResults STATUS_INVALID_DISPOSITION;
    public static HResults STATUS_UNWIND;
    public static HResults STATUS_BAD_STACK;
    public static HResults STATUS_INVALID_UNWIND_TARGET;
    public static HResults STATUS_NOT_LOCKED;
    public static HResults STATUS_PARITY_ERROR;
    public static HResults STATUS_UNABLE_TO_DECOMMIT_VM;
    public static HResults STATUS_NOT_COMMITTED;
    public static HResults STATUS_INVALID_PORT_ATTRIBUTES;
    public static HResults STATUS_PORT_MESSAGE_TOO_LONG;
    public static HResults STATUS_INVALID_PARAMETER_MIX;
    public static HResults STATUS_INVALID_QUOTA_LOWER;
    public static HResults STATUS_DISK_CORRUPT_ERROR;
    public static HResults STATUS_OBJECT_NAME_INVALID;
    public static HResults STATUS_OBJECT_NAME_NOT_FOUND;
    public static HResults STATUS_OBJECT_NAME_COLLISION;
    public static HResults STATUS_PORT_DO_NOT_DISTURB;
    public static HResults STATUS_PORT_DISCONNECTED;
    public static HResults STATUS_DEVICE_ALREADY_ATTACHED;
    public static HResults STATUS_OBJECT_PATH_INVALID;
    public static HResults STATUS_OBJECT_PATH_NOT_FOUND;
    public static HResults STATUS_OBJECT_PATH_SYNTAX_BAD;
    public static HResults STATUS_DATA_OVERRUN;
    public static HResults STATUS_DATA_LATE_ERROR;
    public static HResults STATUS_DATA_ERROR;
    public static HResults STATUS_CRC_ERROR;
    public static HResults STATUS_SECTION_TOO_BIG;
    public static HResults STATUS_PORT_CONNECTION_REFUSED;
    public static HResults STATUS_INVALID_PORT_HANDLE;
    public static HResults STATUS_SHARING_VIOLATION;
    public static HResults STATUS_QUOTA_EXCEEDED;
    public static HResults STATUS_INVALID_PAGE_PROTECTION;
    public static HResults STATUS_MUTANT_NOT_OWNED;
    public static HResults STATUS_SEMAPHORE_LIMIT_EXCEEDED;
    public static HResults STATUS_PORT_ALREADY_SET;
    public static HResults STATUS_SECTION_NOT_IMAGE;
    public static HResults STATUS_SUSPEND_COUNT_EXCEEDED;
    public static HResults STATUS_THREAD_IS_TERMINATING;
    public static HResults STATUS_BAD_WORKING_SET_LIMIT;
    public static HResults STATUS_INCOMPATIBLE_FILE_MAP;
    public static HResults STATUS_SECTION_PROTECTION;
    public static HResults STATUS_EAS_NOT_SUPPORTED;
    public static HResults STATUS_EA_TOO_LARGE;
    public static HResults STATUS_NONEXISTENT_EA_ENTRY;
    public static HResults STATUS_NO_EAS_ON_FILE;
    public static HResults STATUS_EA_CORRUPT_ERROR;
    public static HResults STATUS_FILE_LOCK_CONFLICT;
    public static HResults STATUS_LOCK_NOT_GRANTED;
    public static HResults STATUS_DELETE_PENDING;
    public static HResults STATUS_CTL_FILE_NOT_SUPPORTED;
    public static HResults STATUS_UNKNOWN_REVISION;
    public static HResults STATUS_REVISION_MISMATCH;
    public static HResults STATUS_INVALID_OWNER;
    public static HResults STATUS_INVALID_PRIMARY_GROUP;
    public static HResults STATUS_NO_IMPERSONATION_TOKEN;
    public static HResults STATUS_CANT_DISABLE_MANDATORY;
    public static HResults STATUS_NO_LOGON_SERVERS;
    public static HResults STATUS_NO_SUCH_LOGON_SESSION;
    public static HResults STATUS_NO_SUCH_PRIVILEGE;
    public static HResults STATUS_PRIVILEGE_NOT_HELD;
    public static HResults STATUS_INVALID_ACCOUNT_NAME;
    public static HResults STATUS_USER_EXISTS;
    public static HResults STATUS_NO_SUCH_USER;
    public static HResults STATUS_GROUP_EXISTS;
    public static HResults STATUS_NO_SUCH_GROUP;
    public static HResults STATUS_MEMBER_IN_GROUP;
    public static HResults STATUS_MEMBER_NOT_IN_GROUP;
    public static HResults STATUS_LAST_ADMIN;
    public static HResults STATUS_WRONG_PASSWORD;
    public static HResults STATUS_ILL_FORMED_PASSWORD;
    public static HResults STATUS_PASSWORD_RESTRICTION;
    public static HResults STATUS_LOGON_FAILURE;
    public static HResults STATUS_ACCOUNT_RESTRICTION;
    public static HResults STATUS_INVALID_LOGON_HOURS;
    public static HResults STATUS_INVALID_WORKSTATION;
    public static HResults STATUS_PASSWORD_EXPIRED;
    public static HResults STATUS_ACCOUNT_DISABLED;
    public static HResults STATUS_NONE_MAPPED;
    public static HResults STATUS_TOO_MANY_LUIDS_REQUESTED;
    public static HResults STATUS_LUIDS_EXHAUSTED;
    public static HResults STATUS_INVALID_SUB_AUTHORITY;
    public static HResults STATUS_INVALID_ACL;
    public static HResults STATUS_INVALID_SID;
    public static HResults STATUS_INVALID_SECURITY_DESCR;
    public static HResults STATUS_PROCEDURE_NOT_FOUND;
    public static HResults STATUS_INVALID_IMAGE_FORMAT;
    public static HResults STATUS_NO_TOKEN;
    public static HResults STATUS_BAD_INHERITANCE_ACL;
    public static HResults STATUS_RANGE_NOT_LOCKED;
    public static HResults STATUS_DISK_FULL;
    public static HResults STATUS_SERVER_DISABLED;
    public static HResults STATUS_SERVER_NOT_DISABLED;
    public static HResults STATUS_TOO_MANY_GUIDS_REQUESTED;
    public static HResults STATUS_GUIDS_EXHAUSTED;
    public static HResults STATUS_INVALID_ID_AUTHORITY;
    public static HResults STATUS_AGENTS_EXHAUSTED;
    public static HResults STATUS_INVALID_VOLUME_LABEL;
    public static HResults STATUS_SECTION_NOT_EXTENDED;
    public static HResults STATUS_NOT_MAPPED_DATA;
    public static HResults STATUS_RESOURCE_DATA_NOT_FOUND;
    public static HResults STATUS_RESOURCE_TYPE_NOT_FOUND;
    public static HResults STATUS_RESOURCE_NAME_NOT_FOUND;
    public static HResults STATUS_ARRAY_BOUNDS_EXCEEDED;
    public static HResults STATUS_FLOAT_DENORMAL_OPERAND;
    public static HResults STATUS_FLOAT_DIVIDE_BY_ZERO;
    public static HResults STATUS_FLOAT_INEXACT_RESULT;
    public static HResults STATUS_FLOAT_INVALID_OPERATION;
    public static HResults STATUS_FLOAT_OVERFLOW;
    public static HResults STATUS_FLOAT_STACK_CHECK;
    public static HResults STATUS_FLOAT_UNDERFLOW;
    public static HResults STATUS_INTEGER_DIVIDE_BY_ZERO;
    public static HResults STATUS_INTEGER_OVERFLOW;
    public static HResults STATUS_PRIVILEGED_INSTRUCTION;
    public static HResults STATUS_TOO_MANY_PAGING_FILES;
    public static HResults STATUS_FILE_INVALID;
    public static HResults STATUS_ALLOTTED_SPACE_EXCEEDED;
    public static HResults STATUS_INSUFFICIENT_RESOURCES;
    public static HResults STATUS_DFS_EXIT_PATH_FOUND;
    public static HResults STATUS_DEVICE_DATA_ERROR;
    public static HResults STATUS_DEVICE_NOT_CONNECTED;
    public static HResults STATUS_DEVICE_POWER_FAILURE;
    public static HResults STATUS_FREE_VM_NOT_AT_BASE;
    public static HResults STATUS_MEMORY_NOT_ALLOCATED;
    public static HResults STATUS_WORKING_SET_QUOTA;
    public static HResults STATUS_MEDIA_WRITE_PROTECTED;
    public static HResults STATUS_DEVICE_NOT_READY;
    public static HResults STATUS_INVALID_GROUP_ATTRIBUTES;
    public static HResults STATUS_BAD_IMPERSONATION_LEVEL;
    public static HResults STATUS_CANT_OPEN_ANONYMOUS;
    public static HResults STATUS_BAD_VALIDATION_CLASS;
    public static HResults STATUS_BAD_TOKEN_TYPE;
    public static HResults STATUS_BAD_MASTER_BOOT_RECORD;
    public static HResults STATUS_INSTRUCTION_MISALIGNMENT;
    public static HResults STATUS_INSTANCE_NOT_AVAILABLE;
    public static HResults STATUS_PIPE_NOT_AVAILABLE;
    public static HResults STATUS_INVALID_PIPE_STATE;
    public static HResults STATUS_PIPE_BUSY;
    public static HResults STATUS_ILLEGAL_FUNCTION;
    public static HResults STATUS_PIPE_DISCONNECTED;
    public static HResults STATUS_PIPE_CLOSING;
    public static HResults STATUS_PIPE_CONNECTED;
    public static HResults STATUS_PIPE_LISTENING;
    public static HResults STATUS_INVALID_READ_MODE;
    public static HResults STATUS_IO_TIMEOUT;
    public static HResults STATUS_FILE_FORCED_CLOSED;
    public static HResults STATUS_PROFILING_NOT_STARTED;
    public static HResults STATUS_PROFILING_NOT_STOPPED;
    public static HResults STATUS_COULD_NOT_INTERPRET;
    public static HResults STATUS_FILE_IS_A_DIRECTORY;
    public static HResults STATUS_NOT_SUPPORTED;
    public static HResults STATUS_REMOTE_NOT_LISTENING;
    public static HResults STATUS_DUPLICATE_NAME;
    public static HResults STATUS_BAD_NETWORK_PATH;
    public static HResults STATUS_NETWORK_BUSY;
    public static HResults STATUS_DEVICE_DOES_NOT_EXIST;
    public static HResults STATUS_TOO_MANY_COMMANDS;
    public static HResults STATUS_ADAPTER_HARDWARE_ERROR;
    public static HResults STATUS_INVALID_NETWORK_RESPONSE;
    public static HResults STATUS_UNEXPECTED_NETWORK_ERROR;
    public static HResults STATUS_BAD_REMOTE_ADAPTER;
    public static HResults STATUS_PRINT_QUEUE_FULL;
    public static HResults STATUS_NO_SPOOL_SPACE;
    public static HResults STATUS_PRINT_CANCELLED;
    public static HResults STATUS_NETWORK_NAME_DELETED;
    public static HResults STATUS_NETWORK_ACCESS_DENIED;
    public static HResults STATUS_BAD_DEVICE_TYPE;
    public static HResults STATUS_BAD_NETWORK_NAME;
    public static HResults STATUS_TOO_MANY_NAMES;
    public static HResults STATUS_TOO_MANY_SESSIONS;
    public static HResults STATUS_SHARING_PAUSED;
    public static HResults STATUS_REQUEST_NOT_ACCEPTED;
    public static HResults STATUS_REDIRECTOR_PAUSED;
    public static HResults STATUS_NET_WRITE_FAULT;
    public static HResults STATUS_PROFILING_AT_LIMIT;
    public static HResults STATUS_NOT_SAME_DEVICE;
    public static HResults STATUS_FILE_RENAMED;
    public static HResults STATUS_VIRTUAL_CIRCUIT_CLOSED;
    public static HResults STATUS_NO_SECURITY_ON_OBJECT;
    public static HResults STATUS_CANT_WAIT;
    public static HResults STATUS_PIPE_EMPTY;
    public static HResults STATUS_CANT_ACCESS_DOMAIN_INFO;
    public static HResults STATUS_CANT_TERMINATE_SELF;
    public static HResults STATUS_INVALID_SERVER_STATE;
    public static HResults STATUS_INVALID_DOMAIN_STATE;
    public static HResults STATUS_INVALID_DOMAIN_ROLE;
    public static HResults STATUS_NO_SUCH_DOMAIN;
    public static HResults STATUS_DOMAIN_EXISTS;
    public static HResults STATUS_DOMAIN_LIMIT_EXCEEDED;
    public static HResults STATUS_OPLOCK_NOT_GRANTED;
    public static HResults STATUS_INVALID_OPLOCK_PROTOCOL;
    public static HResults STATUS_INTERNAL_DB_CORRUPTION;
    public static HResults STATUS_INTERNAL_ERROR;
    public static HResults STATUS_GENERIC_NOT_MAPPED;
    public static HResults STATUS_BAD_DESCRIPTOR_FORMAT;
    public static HResults STATUS_INVALID_USER_BUFFER;
    public static HResults STATUS_UNEXPECTED_IO_ERROR;
    public static HResults STATUS_UNEXPECTED_MM_CREATE_ERR;
    public static HResults STATUS_UNEXPECTED_MM_MAP_ERROR;
    public static HResults STATUS_UNEXPECTED_MM_EXTEND_ERR;
    public static HResults STATUS_NOT_LOGON_PROCESS;
    public static HResults STATUS_LOGON_SESSION_EXISTS;
    public static HResults STATUS_INVALID_PARAMETER_1;
    public static HResults STATUS_INVALID_PARAMETER_2;
    public static HResults STATUS_INVALID_PARAMETER_3;
    public static HResults STATUS_INVALID_PARAMETER_4;
    public static HResults STATUS_INVALID_PARAMETER_5;
    public static HResults STATUS_INVALID_PARAMETER_6;
    public static HResults STATUS_INVALID_PARAMETER_7;
    public static HResults STATUS_INVALID_PARAMETER_8;
    public static HResults STATUS_INVALID_PARAMETER_9;
    public static HResults STATUS_INVALID_PARAMETER_10;
    public static HResults STATUS_INVALID_PARAMETER_11;
    public static HResults STATUS_INVALID_PARAMETER_12;
    public static HResults STATUS_REDIRECTOR_NOT_STARTED;
    public static HResults STATUS_REDIRECTOR_STARTED;
    public static HResults STATUS_STACK_OVERFLOW;
    public static HResults STATUS_NO_SUCH_PACKAGE;
    public static HResults STATUS_BAD_FUNCTION_TABLE;
    public static HResults STATUS_VARIABLE_NOT_FOUND;
    public static HResults STATUS_DIRECTORY_NOT_EMPTY;
    public static HResults STATUS_FILE_CORRUPT_ERROR;
    public static HResults STATUS_NOT_A_DIRECTORY;
    public static HResults STATUS_BAD_LOGON_SESSION_STATE;
    public static HResults STATUS_LOGON_SESSION_COLLISION;
    public static HResults STATUS_NAME_TOO_LONG;
    public static HResults STATUS_FILES_OPEN;
    public static HResults STATUS_CONNECTION_IN_USE;
    public static HResults STATUS_MESSAGE_NOT_FOUND;
    public static HResults STATUS_PROCESS_IS_TERMINATING;
    public static HResults STATUS_INVALID_LOGON_TYPE;
    public static HResults STATUS_NO_GUID_TRANSLATION;
    public static HResults STATUS_CANNOT_IMPERSONATE;
    public static HResults STATUS_IMAGE_ALREADY_LOADED;
    public static HResults STATUS_ABIOS_NOT_PRESENT;
    public static HResults STATUS_ABIOS_LID_NOT_EXIST;
    public static HResults STATUS_ABIOS_LID_ALREADY_OWNED;
    public static HResults STATUS_ABIOS_NOT_LID_OWNER;
    public static HResults STATUS_ABIOS_INVALID_COMMAND;
    public static HResults STATUS_ABIOS_INVALID_LID;
    public static HResults STATUS_ABIOS_SELECTOR_NOT_AVAILABLE;
    public static HResults STATUS_ABIOS_INVALID_SELECTOR;
    public static HResults STATUS_NO_LDT;
    public static HResults STATUS_INVALID_LDT_SIZE;
    public static HResults STATUS_INVALID_LDT_OFFSET;
    public static HResults STATUS_INVALID_LDT_DESCRIPTOR;
    public static HResults STATUS_INVALID_IMAGE_NE_FORMAT;
    public static HResults STATUS_RXACT_INVALID_STATE;
    public static HResults STATUS_RXACT_COMMIT_FAILURE;
    public static HResults STATUS_MAPPED_FILE_SIZE_ZERO;
    public static HResults STATUS_TOO_MANY_OPENED_FILES;
    public static HResults STATUS_CANCELLED;
    public static HResults STATUS_CANNOT_DELETE;
    public static HResults STATUS_INVALID_COMPUTER_NAME;
    public static HResults STATUS_FILE_DELETED;
    public static HResults STATUS_SPECIAL_ACCOUNT;
    public static HResults STATUS_SPECIAL_GROUP;
    public static HResults STATUS_SPECIAL_USER;
    public static HResults STATUS_MEMBERS_PRIMARY_GROUP;
    public static HResults STATUS_FILE_CLOSED;
    public static HResults STATUS_TOO_MANY_THREADS;
    public static HResults STATUS_THREAD_NOT_IN_PROCESS;
    public static HResults STATUS_TOKEN_ALREADY_IN_USE;
    public static HResults STATUS_PAGEFILE_QUOTA_EXCEEDED;
    public static HResults STATUS_COMMITMENT_LIMIT;
    public static HResults STATUS_INVALID_IMAGE_LE_FORMAT;
    public static HResults STATUS_INVALID_IMAGE_NOT_MZ;
    public static HResults STATUS_INVALID_IMAGE_PROTECT;
    public static HResults STATUS_INVALID_IMAGE_WIN_16;
    public static HResults STATUS_LOGON_SERVER_CONFLICT;
    public static HResults STATUS_TIME_DIFFERENCE_AT_DC;
    public static HResults STATUS_SYNCHRONIZATION_REQUIRED;
    public static HResults STATUS_DLL_NOT_FOUND;
    public static HResults STATUS_OPEN_FAILED;
    public static HResults STATUS_IO_PRIVILEGE_FAILED;
    public static HResults STATUS_ORDINAL_NOT_FOUND;
    public static HResults STATUS_ENTRYPOINT_NOT_FOUND;
    public static HResults STATUS_CONTROL_C_EXIT;
    public static HResults STATUS_LOCAL_DISCONNECT;
    public static HResults STATUS_REMOTE_DISCONNECT;
    public static HResults STATUS_REMOTE_RESOURCES;
    public static HResults STATUS_LINK_FAILED;
    public static HResults STATUS_LINK_TIMEOUT;
    public static HResults STATUS_INVALID_CONNECTION;
    public static HResults STATUS_INVALID_ADDRESS;
    public static HResults STATUS_DLL_INIT_FAILED;
    public static HResults STATUS_MISSING_SYSTEMFILE;
    public static HResults STATUS_UNHANDLED_EXCEPTION;
    public static HResults STATUS_APP_INIT_FAILURE;
    public static HResults STATUS_PAGEFILE_CREATE_FAILED;
    public static HResults STATUS_NO_PAGEFILE;
    public static HResults STATUS_INVALID_LEVEL;
    public static HResults STATUS_WRONG_PASSWORD_CORE;
    public static HResults STATUS_ILLEGAL_FLOAT_CONTEXT;
    public static HResults STATUS_PIPE_BROKEN;
    public static HResults STATUS_REGISTRY_CORRUPT;
    public static HResults STATUS_REGISTRY_IO_FAILED;
    public static HResults STATUS_NO_EVENT_PAIR;
    public static HResults STATUS_UNRECOGNIZED_VOLUME;
    public static HResults STATUS_SERIAL_NO_DEVICE_INITED;
    public static HResults STATUS_NO_SUCH_ALIAS;
    public static HResults STATUS_MEMBER_NOT_IN_ALIAS;
    public static HResults STATUS_MEMBER_IN_ALIAS;
    public static HResults STATUS_ALIAS_EXISTS;
    public static HResults STATUS_LOGON_NOT_GRANTED;
    public static HResults STATUS_TOO_MANY_SECRETS;
    public static HResults STATUS_SECRET_TOO_LONG;
    public static HResults STATUS_INTERNAL_DB_ERROR;
    public static HResults STATUS_FULLSCREEN_MODE;
    public static HResults STATUS_TOO_MANY_CONTEXT_IDS;
    public static HResults STATUS_LOGON_TYPE_NOT_GRANTED;
    public static HResults STATUS_NOT_REGISTRY_FILE;
    public static HResults STATUS_NT_CROSS_ENCRYPTION_REQUIRED;
    public static HResults STATUS_DOMAIN_CTRLR_CONFIG_ERROR;
    public static HResults STATUS_FT_MISSING_MEMBER;
    public static HResults STATUS_ILL_FORMED_SERVICE_ENTRY;
    public static HResults STATUS_ILLEGAL_CHARACTER;
    public static HResults STATUS_UNMAPPABLE_CHARACTER;
    public static HResults STATUS_UNDEFINED_CHARACTER;
    public static HResults STATUS_FLOPPY_VOLUME;
    public static HResults STATUS_FLOPPY_ID_MARK_NOT_FOUND;
    public static HResults STATUS_FLOPPY_WRONG_CYLINDER;
    public static HResults STATUS_FLOPPY_UNKNOWN_ERROR;
    public static HResults STATUS_FLOPPY_BAD_REGISTERS;
    public static HResults STATUS_DISK_RECALIBRATE_FAILED;
    public static HResults STATUS_DISK_OPERATION_FAILED;
    public static HResults STATUS_DISK_RESET_FAILED;
    public static HResults STATUS_SHARED_IRQ_BUSY;
    public static HResults STATUS_FT_ORPHANING;
    public static HResults STATUS_BIOS_FAILED_TO_CONNECT_INTERRUPT;
    public static HResults STATUS_PARTITION_FAILURE;
    public static HResults STATUS_INVALID_BLOCK_LENGTH;
    public static HResults STATUS_DEVICE_NOT_PARTITIONED;
    public static HResults STATUS_UNABLE_TO_LOCK_MEDIA;
    public static HResults STATUS_UNABLE_TO_UNLOAD_MEDIA;
    public static HResults STATUS_EOM_OVERFLOW;
    public static HResults STATUS_NO_MEDIA;
    public static HResults STATUS_NO_SUCH_MEMBER;
    public static HResults STATUS_INVALID_MEMBER;
    public static HResults STATUS_KEY_DELETED;
    public static HResults STATUS_NO_LOG_SPACE;
    public static HResults STATUS_TOO_MANY_SIDS;
    public static HResults STATUS_LM_CROSS_ENCRYPTION_REQUIRED;
    public static HResults STATUS_KEY_HAS_CHILDREN;
    public static HResults STATUS_CHILD_MUST_BE_VOLATILE;
    public static HResults STATUS_DEVICE_CONFIGURATION_ERROR;
    public static HResults STATUS_DRIVER_INTERNAL_ERROR;
    public static HResults STATUS_INVALID_DEVICE_STATE;
    public static HResults STATUS_IO_DEVICE_ERROR;
    public static HResults STATUS_DEVICE_PROTOCOL_ERROR;
    public static HResults STATUS_BACKUP_CONTROLLER;
    public static HResults STATUS_LOG_FILE_FULL;
    public static HResults STATUS_TOO_LATE;
    public static HResults STATUS_NO_TRUST_LSA_SECRET;
    public static HResults STATUS_NO_TRUST_SAM_ACCOUNT;
    public static HResults STATUS_TRUSTED_DOMAIN_FAILURE;
    public static HResults STATUS_TRUSTED_RELATIONSHIP_FAILURE;
    public static HResults STATUS_EVENTLOG_FILE_CORRUPT;
    public static HResults STATUS_EVENTLOG_CANT_START;
    public static HResults STATUS_TRUST_FAILURE;
    public static HResults STATUS_MUTANT_LIMIT_EXCEEDED;
    public static HResults STATUS_NETLOGON_NOT_STARTED;
    public static HResults STATUS_ACCOUNT_EXPIRED;
    public static HResults STATUS_POSSIBLE_DEADLOCK;
    public static HResults STATUS_NETWORK_CREDENTIAL_CONFLICT;
    public static HResults STATUS_REMOTE_SESSION_LIMIT;
    public static HResults STATUS_EVENTLOG_FILE_CHANGED;
    public static HResults STATUS_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT;
    public static HResults STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT;
    public static HResults STATUS_NOLOGON_SERVER_TRUST_ACCOUNT;
    public static HResults STATUS_DOMAIN_TRUST_INCONSISTENT;
    public static HResults STATUS_FS_DRIVER_REQUIRED;
    public static HResults STATUS_IMAGE_ALREADY_LOADED_AS_DLL;
    public static HResults STATUS_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING;
    public static HResults STATUS_SHORT_NAMES_NOT_ENABLED_ON_VOLUME;
    public static HResults STATUS_SECURITY_STREAM_IS_INCONSISTENT;
    public static HResults STATUS_INVALID_LOCK_RANGE;
    public static HResults STATUS_INVALID_ACE_CONDITION;
    public static HResults STATUS_IMAGE_SUBSYSTEM_NOT_PRESENT;
    public static HResults STATUS_NOTIFICATION_GUID_ALREADY_DEFINED;
    public static HResults STATUS_INVALID_EXCEPTION_HANDLER;
    public static HResults STATUS_DUPLICATE_PRIVILEGES;
    public static HResults STATUS_NOT_ALLOWED_ON_SYSTEM_FILE;
    public static HResults STATUS_REPAIR_NEEDED;
    public static HResults STATUS_QUOTA_NOT_ENABLED;
    public static HResults STATUS_NO_APPLICATION_PACKAGE;
    public static HResults STATUS_FILE_METADATA_OPTIMIZATION_IN_PROGRESS;
    public static HResults STATUS_NOT_SAME_OBJECT;
    public static HResults STATUS_FATAL_MEMORY_EXHAUSTION;
    public static HResults STATUS_ERROR_PROCESS_NOT_IN_JOB;
    public static HResults STATUS_CPU_SET_INVALID;
    public static HResults STATUS_NETWORK_OPEN_RESTRICTION;
    public static HResults STATUS_NO_USER_SESSION_KEY;
    public static HResults STATUS_USER_SESSION_DELETED;
    public static HResults STATUS_RESOURCE_LANG_NOT_FOUND;
    public static HResults STATUS_INSUFF_SERVER_RESOURCES;
    public static HResults STATUS_INVALID_BUFFER_SIZE;
    public static HResults STATUS_INVALID_ADDRESS_COMPONENT;
    public static HResults STATUS_INVALID_ADDRESS_WILDCARD;
    public static HResults STATUS_TOO_MANY_ADDRESSES;
    public static HResults STATUS_ADDRESS_ALREADY_EXISTS;
    public static HResults STATUS_ADDRESS_CLOSED;
    public static HResults STATUS_CONNECTION_DISCONNECTED;
    public static HResults STATUS_CONNECTION_RESET;
    public static HResults STATUS_TOO_MANY_NODES;
    public static HResults STATUS_TRANSACTION_ABORTED;
    public static HResults STATUS_TRANSACTION_TIMED_OUT;
    public static HResults STATUS_TRANSACTION_NO_RELEASE;
    public static HResults STATUS_TRANSACTION_NO_MATCH;
    public static HResults STATUS_TRANSACTION_RESPONDED;
    public static HResults STATUS_TRANSACTION_INVALID_ID;
    public static HResults STATUS_TRANSACTION_INVALID_TYPE;
    public static HResults STATUS_NOT_SERVER_SESSION;
    public static HResults STATUS_NOT_CLIENT_SESSION;
    public static HResults STATUS_CANNOT_LOAD_REGISTRY_FILE;
    public static HResults STATUS_DEBUG_ATTACH_FAILED;
    public static HResults STATUS_SYSTEM_PROCESS_TERMINATED;
    public static HResults STATUS_DATA_NOT_ACCEPTED;
    public static HResults STATUS_NO_BROWSER_SERVERS_FOUND;
    public static HResults STATUS_VDM_HARD_ERROR;
    public static HResults STATUS_DRIVER_CANCEL_TIMEOUT;
    public static HResults STATUS_REPLY_MESSAGE_MISMATCH;
    public static HResults STATUS_MAPPED_ALIGNMENT;
    public static HResults STATUS_IMAGE_CHECKSUM_MISMATCH;
    public static HResults STATUS_LOST_WRITEBEHIND_DATA;
    public static HResults STATUS_CLIENT_SERVER_PARAMETERS_INVALID;
    public static HResults STATUS_PASSWORD_MUST_CHANGE;
    public static HResults STATUS_NOT_FOUND;
    public static HResults STATUS_NOT_TINY_STREAM;
    public static HResults STATUS_RECOVERY_FAILURE;
    public static HResults STATUS_STACK_OVERFLOW_READ;
    public static HResults STATUS_FAIL_CHECK;
    public static HResults STATUS_DUPLICATE_OBJECTID;
    public static HResults STATUS_OBJECTID_EXISTS;
    public static HResults STATUS_CONVERT_TO_LARGE;
    public static HResults STATUS_RETRY;
    public static HResults STATUS_FOUND_OUT_OF_SCOPE;
    public static HResults STATUS_ALLOCATE_BUCKET;
    public static HResults STATUS_PROPSET_NOT_FOUND;
    public static HResults STATUS_MARSHALL_OVERFLOW;
    public static HResults STATUS_INVALID_VARIANT;
    public static HResults STATUS_DOMAIN_CONTROLLER_NOT_FOUND;
    public static HResults STATUS_ACCOUNT_LOCKED_OUT;
    public static HResults STATUS_HANDLE_NOT_CLOSABLE;
    public static HResults STATUS_CONNECTION_REFUSED;
    public static HResults STATUS_GRACEFUL_DISCONNECT;
    public static HResults STATUS_ADDRESS_ALREADY_ASSOCIATED;
    public static HResults STATUS_ADDRESS_NOT_ASSOCIATED;
    public static HResults STATUS_CONNECTION_INVALID;
    public static HResults STATUS_CONNECTION_ACTIVE;
    public static HResults STATUS_NETWORK_UNREACHABLE;
    public static HResults STATUS_HOST_UNREACHABLE;
    public static HResults STATUS_PROTOCOL_UNREACHABLE;
    public static HResults STATUS_PORT_UNREACHABLE;
    public static HResults STATUS_REQUEST_ABORTED;
    public static HResults STATUS_CONNECTION_ABORTED;
    public static HResults STATUS_BAD_COMPRESSION_BUFFER;
    public static HResults STATUS_USER_MAPPED_FILE;
    public static HResults STATUS_AUDIT_FAILED;
    public static HResults STATUS_TIMER_RESOLUTION_NOT_SET;
    public static HResults STATUS_CONNECTION_COUNT_LIMIT;
    public static HResults STATUS_LOGIN_TIME_RESTRICTION;
    public static HResults STATUS_LOGIN_WKSTA_RESTRICTION;
    public static HResults STATUS_IMAGE_MP_UP_MISMATCH;
    public static HResults STATUS_INSUFFICIENT_LOGON_INFO;
    public static HResults STATUS_BAD_DLL_ENTRYPOINT;
    public static HResults STATUS_BAD_SERVICE_ENTRYPOINT;
    public static HResults STATUS_LPC_REPLY_LOST;
    public static HResults STATUS_IP_ADDRESS_CONFLICT1;
    public static HResults STATUS_IP_ADDRESS_CONFLICT2;
    public static HResults STATUS_REGISTRY_QUOTA_LIMIT;
    public static HResults STATUS_PATH_NOT_COVERED;
    public static HResults STATUS_NO_CALLBACK_ACTIVE;
    public static HResults STATUS_LICENSE_QUOTA_EXCEEDED;
    public static HResults STATUS_PWD_TOO_SHORT;
    public static HResults STATUS_PWD_TOO_RECENT;
    public static HResults STATUS_PWD_HISTORY_CONFLICT;
    public static HResults STATUS_PLUGPLAY_NO_DEVICE;
    public static HResults STATUS_UNSUPPORTED_COMPRESSION;
    public static HResults STATUS_INVALID_HW_PROFILE;
    public static HResults STATUS_INVALID_PLUGPLAY_DEVICE_PATH;
    public static HResults STATUS_DRIVER_ORDINAL_NOT_FOUND;
    public static HResults STATUS_DRIVER_ENTRYPOINT_NOT_FOUND;
    public static HResults STATUS_RESOURCE_NOT_OWNED;
    public static HResults STATUS_TOO_MANY_LINKS;
    public static HResults STATUS_QUOTA_LIST_INCONSISTENT;
    public static HResults STATUS_FILE_IS_OFFLINE;
    public static HResults STATUS_EVALUATION_EXPIRATION;
    public static HResults STATUS_ILLEGAL_DLL_RELOCATION;
    public static HResults STATUS_LICENSE_VIOLATION;
    public static HResults STATUS_DLL_INIT_FAILED_LOGOFF;
    public static HResults STATUS_DRIVER_UNABLE_TO_LOAD;
    public static HResults STATUS_DFS_UNAVAILABLE;
    public static HResults STATUS_VOLUME_DISMOUNTED;
    public static HResults STATUS_WX86_INTERNAL_ERROR;
    public static HResults STATUS_WX86_FLOAT_STACK_CHECK;
    public static HResults STATUS_VALIDATE_CONTINUE;
    public static HResults STATUS_NO_MATCH;
    public static HResults STATUS_NO_MORE_MATCHES;
    public static HResults STATUS_NOT_A_REPARSE_POINT;
    public static HResults STATUS_IO_REPARSE_TAG_INVALID;
    public static HResults STATUS_IO_REPARSE_TAG_MISMATCH;
    public static HResults STATUS_IO_REPARSE_DATA_INVALID;
    public static HResults STATUS_IO_REPARSE_TAG_NOT_HANDLED;
    public static HResults STATUS_PWD_TOO_LONG;
    public static HResults STATUS_STOWED_EXCEPTION;
    public static HResults STATUS_CONTEXT_STOWED_EXCEPTION;
    public static HResults STATUS_REPARSE_POINT_NOT_RESOLVED;
    public static HResults STATUS_DIRECTORY_IS_A_REPARSE_POINT;
    public static HResults STATUS_RANGE_LIST_CONFLICT;
    public static HResults STATUS_SOURCE_ELEMENT_EMPTY;
    public static HResults STATUS_DESTINATION_ELEMENT_FULL;
    public static HResults STATUS_ILLEGAL_ELEMENT_ADDRESS;
    public static HResults STATUS_MAGAZINE_NOT_PRESENT;
    public static HResults STATUS_REINITIALIZATION_NEEDED;
    public static HResults STATUS_DEVICE_REQUIRES_CLEANING;
    public static HResults STATUS_DEVICE_DOOR_OPEN;
    public static HResults STATUS_ENCRYPTION_FAILED;
    public static HResults STATUS_DECRYPTION_FAILED;
    public static HResults STATUS_RANGE_NOT_FOUND;
    public static HResults STATUS_NO_RECOVERY_POLICY;
    public static HResults STATUS_NO_EFS;
    public static HResults STATUS_WRONG_EFS;
    public static HResults STATUS_NO_USER_KEYS;
    public static HResults STATUS_FILE_NOT_ENCRYPTED;
    public static HResults STATUS_NOT_EXPORT_FORMAT;
    public static HResults STATUS_FILE_ENCRYPTED;
    public static HResults STATUS_WAKE_SYSTEM;
    public static HResults STATUS_WMI_GUID_NOT_FOUND;
    public static HResults STATUS_WMI_INSTANCE_NOT_FOUND;
    public static HResults STATUS_WMI_ITEMID_NOT_FOUND;
    public static HResults STATUS_WMI_TRY_AGAIN;
    public static HResults STATUS_SHARED_POLICY;
    public static HResults STATUS_POLICY_OBJECT_NOT_FOUND;
    public static HResults STATUS_POLICY_ONLY_IN_DS;
    public static HResults STATUS_VOLUME_NOT_UPGRADED;
    public static HResults STATUS_REMOTE_STORAGE_NOT_ACTIVE;
    public static HResults STATUS_REMOTE_STORAGE_MEDIA_ERROR;
    public static HResults STATUS_NO_TRACKING_SERVICE;
    public static HResults STATUS_SERVER_SID_MISMATCH;
    public static HResults STATUS_DS_NO_ATTRIBUTE_OR_VALUE;
    public static HResults STATUS_DS_INVALID_ATTRIBUTE_SYNTAX;
    public static HResults STATUS_DS_ATTRIBUTE_TYPE_UNDEFINED;
    public static HResults STATUS_DS_ATTRIBUTE_OR_VALUE_EXISTS;
    public static HResults STATUS_DS_BUSY;
    public static HResults STATUS_DS_UNAVAILABLE;
    public static HResults STATUS_DS_NO_RIDS_ALLOCATED;
    public static HResults STATUS_DS_NO_MORE_RIDS;
    public static HResults STATUS_DS_INCORRECT_ROLE_OWNER;
    public static HResults STATUS_DS_RIDMGR_INIT_ERROR;
    public static HResults STATUS_DS_OBJ_CLASS_VIOLATION;
    public static HResults STATUS_DS_CANT_ON_NON_LEAF;
    public static HResults STATUS_DS_CANT_ON_RDN;
    public static HResults STATUS_DS_CANT_MOD_OBJ_CLASS;
    public static HResults STATUS_DS_CROSS_DOM_MOVE_FAILED;
    public static HResults STATUS_DS_GC_NOT_AVAILABLE;
    public static HResults STATUS_DIRECTORY_SERVICE_REQUIRED;
    public static HResults STATUS_REPARSE_ATTRIBUTE_CONFLICT;
    public static HResults STATUS_CANT_ENABLE_DENY_ONLY;
    public static HResults STATUS_FLOAT_MULTIPLE_FAULTS;
    public static HResults STATUS_FLOAT_MULTIPLE_TRAPS;
    public static HResults STATUS_DEVICE_REMOVED;
    public static HResults STATUS_JOURNAL_DELETE_IN_PROGRESS;
    public static HResults STATUS_JOURNAL_NOT_ACTIVE;
    public static HResults STATUS_NOINTERFACE;
    public static HResults STATUS_DS_RIDMGR_DISABLED;
    public static HResults STATUS_DS_ADMIN_LIMIT_EXCEEDED;
    public static HResults STATUS_DRIVER_FAILED_SLEEP;
    public static HResults STATUS_MUTUAL_AUTHENTICATION_FAILED;
    public static HResults STATUS_CORRUPT_SYSTEM_FILE;
    public static HResults STATUS_DATATYPE_MISALIGNMENT_ERROR;
    public static HResults STATUS_WMI_READ_ONLY;
    public static HResults STATUS_WMI_SET_FAILURE;
    public static HResults STATUS_COMMITMENT_MINIMUM;
    public static HResults STATUS_REG_NAT_CONSUMPTION;
    public static HResults STATUS_TRANSPORT_FULL;
    public static HResults STATUS_DS_SAM_INIT_FAILURE;
    public static HResults STATUS_ONLY_IF_CONNECTED;
    public static HResults STATUS_DS_SENSITIVE_GROUP_VIOLATION;
    public static HResults STATUS_PNP_RESTART_ENUMERATION;
    public static HResults STATUS_JOURNAL_ENTRY_DELETED;
    public static HResults STATUS_DS_CANT_MOD_PRIMARYGROUPID;
    public static HResults STATUS_SYSTEM_IMAGE_BAD_SIGNATURE;
    public static HResults STATUS_PNP_REBOOT_REQUIRED;
    public static HResults STATUS_POWER_STATE_INVALID;
    public static HResults STATUS_DS_INVALID_GROUP_TYPE;
    public static HResults STATUS_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN;
    public static HResults STATUS_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN;
    public static HResults STATUS_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER;
    public static HResults STATUS_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER;
    public static HResults STATUS_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER;
    public static HResults STATUS_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER;
    public static HResults STATUS_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER;
    public static HResults STATUS_DS_HAVE_PRIMARY_MEMBERS;
    public static HResults STATUS_WMI_NOT_SUPPORTED;
    public static HResults STATUS_INSUFFICIENT_POWER;
    public static HResults STATUS_SAM_NEED_BOOTKEY_PASSWORD;
    public static HResults STATUS_SAM_NEED_BOOTKEY_FLOPPY;
    public static HResults STATUS_DS_CANT_START;
    public static HResults STATUS_DS_INIT_FAILURE;
    public static HResults STATUS_SAM_INIT_FAILURE;
    public static HResults STATUS_DS_GC_REQUIRED;
    public static HResults STATUS_DS_LOCAL_MEMBER_OF_LOCAL_ONLY;
    public static HResults STATUS_DS_NO_FPO_IN_UNIVERSAL_GROUPS;
    public static HResults STATUS_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED;
    public static HResults STATUS_MULTIPLE_FAULT_VIOLATION;
    public static HResults STATUS_CURRENT_DOMAIN_NOT_ALLOWED;
    public static HResults STATUS_CANNOT_MAKE;
    public static HResults STATUS_SYSTEM_SHUTDOWN;
    public static HResults STATUS_DS_INIT_FAILURE_CONSOLE;
    public static HResults STATUS_DS_SAM_INIT_FAILURE_CONSOLE;
    public static HResults STATUS_UNFINISHED_CONTEXT_DELETED;
    public static HResults STATUS_NO_TGT_REPLY;
    public static HResults STATUS_OBJECTID_NOT_FOUND;
    public static HResults STATUS_NO_IP_ADDRESSES;
    public static HResults STATUS_WRONG_CREDENTIAL_HANDLE;
    public static HResults STATUS_CRYPTO_SYSTEM_INVALID;
    public static HResults STATUS_MAX_REFERRALS_EXCEEDED;
    public static HResults STATUS_MUST_BE_KDC;
    public static HResults STATUS_STRONG_CRYPTO_NOT_SUPPORTED;
    public static HResults STATUS_TOO_MANY_PRINCIPALS;
    public static HResults STATUS_NO_PA_DATA;
    public static HResults STATUS_PKINIT_NAME_MISMATCH;
    public static HResults STATUS_SMARTCARD_LOGON_REQUIRED;
    public static HResults STATUS_KDC_INVALID_REQUEST;
    public static HResults STATUS_KDC_UNABLE_TO_REFER;
    public static HResults STATUS_KDC_UNKNOWN_ETYPE;
    public static HResults STATUS_SHUTDOWN_IN_PROGRESS;
    public static HResults STATUS_SERVER_SHUTDOWN_IN_PROGRESS;
    public static HResults STATUS_NOT_SUPPORTED_ON_SBS;
    public static HResults STATUS_WMI_GUID_DISCONNECTED;
    public static HResults STATUS_WMI_ALREADY_DISABLED;
    public static HResults STATUS_WMI_ALREADY_ENABLED;
    public static HResults STATUS_MFT_TOO_FRAGMENTED;
    public static HResults STATUS_COPY_PROTECTION_FAILURE;
    public static HResults STATUS_CSS_AUTHENTICATION_FAILURE;
    public static HResults STATUS_CSS_KEY_NOT_PRESENT;
    public static HResults STATUS_CSS_KEY_NOT_ESTABLISHED;
    public static HResults STATUS_CSS_SCRAMBLED_SECTOR;
    public static HResults STATUS_CSS_REGION_MISMATCH;
    public static HResults STATUS_CSS_RESETS_EXHAUSTED;
    public static HResults STATUS_PASSWORD_CHANGE_REQUIRED;
    public static HResults STATUS_LOST_MODE_LOGON_RESTRICTION;
    public static HResults STATUS_PKINIT_FAILURE;
    public static HResults STATUS_SMARTCARD_SUBSYSTEM_FAILURE;
    public static HResults STATUS_NO_KERB_KEY;
    public static HResults STATUS_HOST_DOWN;
    public static HResults STATUS_UNSUPPORTED_PREAUTH;
    public static HResults STATUS_EFS_ALG_BLOB_TOO_BIG;
    public static HResults STATUS_PORT_NOT_SET;
    public static HResults STATUS_DEBUGGER_INACTIVE;
    public static HResults STATUS_DS_VERSION_CHECK_FAILURE;
    public static HResults STATUS_AUDITING_DISABLED;
    public static HResults STATUS_PRENT4_MACHINE_ACCOUNT;
    public static HResults STATUS_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER;
    public static HResults STATUS_INVALID_IMAGE_WIN_32;
    public static HResults STATUS_INVALID_IMAGE_WIN_64;
    public static HResults STATUS_BAD_BINDINGS;
    public static HResults STATUS_NETWORK_SESSION_EXPIRED;
    public static HResults STATUS_APPHELP_BLOCK;
    public static HResults STATUS_ALL_SIDS_FILTERED;
    public static HResults STATUS_NOT_SAFE_MODE_DRIVER;
    public static HResults STATUS_ACCESS_DISABLED_BY_POLICY_DEFAULT;
    public static HResults STATUS_ACCESS_DISABLED_BY_POLICY_PATH;
    public static HResults STATUS_ACCESS_DISABLED_BY_POLICY_PUBLISHER;
    public static HResults STATUS_ACCESS_DISABLED_BY_POLICY_OTHER;
    public static HResults STATUS_FAILED_DRIVER_ENTRY;
    public static HResults STATUS_DEVICE_ENUMERATION_ERROR;
    public static HResults STATUS_MOUNT_POINT_NOT_RESOLVED;
    public static HResults STATUS_INVALID_DEVICE_OBJECT_PARAMETER;
    public static HResults STATUS_MCA_OCCURED;
    public static HResults STATUS_DRIVER_BLOCKED_CRITICAL;
    public static HResults STATUS_DRIVER_BLOCKED;
    public static HResults STATUS_DRIVER_DATABASE_ERROR;
    public static HResults STATUS_SYSTEM_HIVE_TOO_LARGE;
    public static HResults STATUS_INVALID_IMPORT_OF_NON_DLL;
    public static HResults STATUS_DS_SHUTTING_DOWN;
    public static HResults STATUS_NO_SECRETS;
    public static HResults STATUS_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY;
    public static HResults STATUS_FAILED_STACK_SWITCH;
    public static HResults STATUS_HEAP_CORRUPTION;
    public static HResults STATUS_SMARTCARD_WRONG_PIN;
    public static HResults STATUS_SMARTCARD_CARD_BLOCKED;
    public static HResults STATUS_SMARTCARD_CARD_NOT_AUTHENTICATED;
    public static HResults STATUS_SMARTCARD_NO_CARD;
    public static HResults STATUS_SMARTCARD_NO_KEY_CONTAINER;
    public static HResults STATUS_SMARTCARD_NO_CERTIFICATE;
    public static HResults STATUS_SMARTCARD_NO_KEYSET;
    public static HResults STATUS_SMARTCARD_IO_ERROR;
    public static HResults STATUS_DOWNGRADE_DETECTED;
    public static HResults STATUS_SMARTCARD_CERT_REVOKED;
    public static HResults STATUS_ISSUING_CA_UNTRUSTED;
    public static HResults STATUS_REVOCATION_OFFLINE_C;
    public static HResults STATUS_PKINIT_CLIENT_FAILURE;
    public static HResults STATUS_SMARTCARD_CERT_EXPIRED;
    public static HResults STATUS_DRIVER_FAILED_PRIOR_UNLOAD;
    public static HResults STATUS_SMARTCARD_SILENT_CONTEXT;
    public static HResults STATUS_PER_USER_TRUST_QUOTA_EXCEEDED;
    public static HResults STATUS_ALL_USER_TRUST_QUOTA_EXCEEDED;
    public static HResults STATUS_USER_DELETE_TRUST_QUOTA_EXCEEDED;
    public static HResults STATUS_DS_NAME_NOT_UNIQUE;
    public static HResults STATUS_DS_DUPLICATE_ID_FOUND;
    public static HResults STATUS_DS_GROUP_CONVERSION_ERROR;
    public static HResults STATUS_VOLSNAP_PREPARE_HIBERNATE;
    public static HResults STATUS_USER2USER_REQUIRED;
    public static HResults STATUS_STACK_BUFFER_OVERRUN;
    public static HResults STATUS_NO_S4U_PROT_SUPPORT;
    public static HResults STATUS_CROSSREALM_DELEGATION_FAILURE;
    public static HResults STATUS_REVOCATION_OFFLINE_KDC;
    public static HResults STATUS_ISSUING_CA_UNTRUSTED_KDC;
    public static HResults STATUS_KDC_CERT_EXPIRED;
    public static HResults STATUS_KDC_CERT_REVOKED;
    public static HResults STATUS_PARAMETER_QUOTA_EXCEEDED;
    public static HResults STATUS_HIBERNATION_FAILURE;
    public static HResults STATUS_DELAY_LOAD_FAILED;
    public static HResults STATUS_AUTHENTICATION_FIREWALL_FAILED;
    public static HResults STATUS_VDM_DISALLOWED;
    public static HResults STATUS_HUNG_DISPLAY_DRIVER_THREAD;
    public static HResults STATUS_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE;
    public static HResults STATUS_INVALID_CRUNTIME_PARAMETER;
    public static HResults STATUS_NTLM_BLOCKED;
    public static HResults STATUS_DS_SRC_SID_EXISTS_IN_FOREST;
    public static HResults STATUS_DS_DOMAIN_NAME_EXISTS_IN_FOREST;
    public static HResults STATUS_DS_FLAT_NAME_EXISTS_IN_FOREST;
    public static HResults STATUS_INVALID_USER_PRINCIPAL_NAME;
    public static HResults STATUS_FATAL_USER_CALLBACK_EXCEPTION;
    public static HResults STATUS_ASSERTION_FAILURE;
    public static HResults STATUS_VERIFIER_STOP;
    public static HResults STATUS_CALLBACK_POP_STACK;
    public static HResults STATUS_INCOMPATIBLE_DRIVER_BLOCKED;
    public static HResults STATUS_HIVE_UNLOADED;
    public static HResults STATUS_COMPRESSION_DISABLED;
    public static HResults STATUS_FILE_SYSTEM_LIMITATION;
    public static HResults STATUS_INVALID_IMAGE_HASH;
    public static HResults STATUS_NOT_CAPABLE;
    public static HResults STATUS_REQUEST_OUT_OF_SEQUENCE;
    public static HResults STATUS_IMPLEMENTATION_LIMIT;
    public static HResults STATUS_ELEVATION_REQUIRED;
    public static HResults STATUS_NO_SECURITY_CONTEXT;
    public static HResults STATUS_PKU2U_CERT_FAILURE;
    public static HResults STATUS_BEYOND_VDL;
    public static HResults STATUS_ENCOUNTERED_WRITE_IN_PROGRESS;
    public static HResults STATUS_PTE_CHANGED;
    public static HResults STATUS_PURGE_FAILED;
    public static HResults STATUS_CRED_REQUIRES_CONFIRMATION;
    public static HResults STATUS_CS_ENCRYPTION_INVALID_SERVER_RESPONSE;
    public static HResults STATUS_CS_ENCRYPTION_UNSUPPORTED_SERVER;
    public static HResults STATUS_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE;
    public static HResults STATUS_CS_ENCRYPTION_NEW_ENCRYPTED_FILE;
    public static HResults STATUS_CS_ENCRYPTION_FILE_NOT_CSE;
    public static HResults STATUS_INVALID_LABEL;
    public static HResults STATUS_DRIVER_PROCESS_TERMINATED;
    public static HResults STATUS_AMBIGUOUS_SYSTEM_DEVICE;
    public static HResults STATUS_SYSTEM_DEVICE_NOT_FOUND;
    public static HResults STATUS_RESTART_BOOT_APPLICATION;
    public static HResults STATUS_INSUFFICIENT_NVRAM_RESOURCES;
    public static HResults STATUS_INVALID_SESSION;
    public static HResults STATUS_THREAD_ALREADY_IN_SESSION;
    public static HResults STATUS_THREAD_NOT_IN_SESSION;
    public static HResults STATUS_INVALID_WEIGHT;
    public static HResults STATUS_REQUEST_PAUSED;
    public static HResults STATUS_NO_RANGES_PROCESSED;
    public static HResults STATUS_DISK_RESOURCES_EXHAUSTED;
    public static HResults STATUS_NEEDS_REMEDIATION;
    public static HResults STATUS_DEVICE_FEATURE_NOT_SUPPORTED;
    public static HResults STATUS_DEVICE_UNREACHABLE;
    public static HResults STATUS_INVALID_TOKEN;
    public static HResults STATUS_SERVER_UNAVAILABLE;
    public static HResults STATUS_FILE_NOT_AVAILABLE;
    public static HResults STATUS_DEVICE_INSUFFICIENT_RESOURCES;
    public static HResults STATUS_PACKAGE_UPDATING;
    public static HResults STATUS_NOT_READ_FROM_COPY;
    public static HResults STATUS_FT_WRITE_FAILURE;
    public static HResults STATUS_FT_DI_SCAN_REQUIRED;
    public static HResults STATUS_OBJECT_NOT_EXTERNALLY_BACKED;
    public static HResults STATUS_EXTERNAL_BACKING_PROVIDER_UNKNOWN;
    public static HResults STATUS_COMPRESSION_NOT_BENEFICIAL;
    public static HResults STATUS_DATA_CHECKSUM_ERROR;
    public static HResults STATUS_INTERMIXED_KERNEL_EA_OPERATION;
    public static HResults STATUS_TRIM_READ_ZERO_NOT_SUPPORTED;
    public static HResults STATUS_TOO_MANY_SEGMENT_DESCRIPTORS;
    public static HResults STATUS_INVALID_OFFSET_ALIGNMENT;
    public static HResults STATUS_INVALID_FIELD_IN_PARAMETER_LIST;
    public static HResults STATUS_OPERATION_IN_PROGRESS;
    public static HResults STATUS_INVALID_INITIATOR_TARGET_PATH;
    public static HResults STATUS_SCRUB_DATA_DISABLED;
    public static HResults STATUS_NOT_REDUNDANT_STORAGE;
    public static HResults STATUS_RESIDENT_FILE_NOT_SUPPORTED;
    public static HResults STATUS_COMPRESSED_FILE_NOT_SUPPORTED;
    public static HResults STATUS_DIRECTORY_NOT_SUPPORTED;
    public static HResults STATUS_IO_OPERATION_TIMEOUT;
    public static HResults STATUS_SYSTEM_NEEDS_REMEDIATION;
    public static HResults STATUS_APPX_INTEGRITY_FAILURE_CLR_NGEN;
    public static HResults STATUS_SHARE_UNAVAILABLE;
    public static HResults STATUS_APISET_NOT_HOSTED;
    public static HResults STATUS_APISET_NOT_PRESENT;
    public static HResults STATUS_DEVICE_HARDWARE_ERROR;
    public static HResults STATUS_FIRMWARE_SLOT_INVALID;
    public static HResults STATUS_FIRMWARE_IMAGE_INVALID;
    public static HResults STATUS_STORAGE_TOPOLOGY_ID_MISMATCH;
    public static HResults STATUS_WIM_NOT_BOOTABLE;
    public static HResults STATUS_BLOCKED_BY_PARENTAL_CONTROLS;
    public static HResults STATUS_NEEDS_REGISTRATION;
    public static HResults STATUS_QUOTA_ACTIVITY;
    public static HResults STATUS_CALLBACK_INVOKE_INLINE;
    public static HResults STATUS_BLOCK_TOO_MANY_REFERENCES;
    public static HResults STATUS_MARKED_TO_DISALLOW_WRITES;
    public static HResults STATUS_NETWORK_ACCESS_DENIED_EDP;
    public static HResults STATUS_ENCLAVE_FAILURE;
    public static HResults STATUS_PNP_NO_COMPAT_DRIVERS;
    public static HResults STATUS_PNP_DRIVER_PACKAGE_NOT_FOUND;
    public static HResults STATUS_PNP_DRIVER_CONFIGURATION_NOT_FOUND;
    public static HResults STATUS_PNP_DRIVER_CONFIGURATION_INCOMPLETE;
    public static HResults STATUS_PNP_FUNCTION_DRIVER_REQUIRED;
    public static HResults STATUS_PNP_DEVICE_CONFIGURATION_PENDING;
    public static HResults STATUS_DEVICE_HINT_NAME_BUFFER_TOO_SMALL;
    public static HResults STATUS_PACKAGE_NOT_AVAILABLE;
    public static HResults STATUS_DEVICE_IN_MAINTENANCE;
    public static HResults STATUS_NOT_SUPPORTED_ON_DAX;
    public static HResults STATUS_FREE_SPACE_TOO_FRAGMENTED;
    public static HResults STATUS_DAX_MAPPING_EXISTS;
    public static HResults STATUS_CHILD_PROCESS_BLOCKED;
    public static HResults STATUS_STORAGE_LOST_DATA_PERSISTENCE;
    public static HResults STATUS_VRF_CFG_ENABLED;
    public static HResults STATUS_PARTITION_TERMINATING;
    public static HResults STATUS_EXTERNAL_SYSKEY_NOT_SUPPORTED;
    public static HResults STATUS_ENCLAVE_VIOLATION;
    public static HResults STATUS_FILE_PROTECTED_UNDER_DPL;
    public static HResults STATUS_VOLUME_NOT_CLUSTER_ALIGNED;
    public static HResults STATUS_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND;
    public static HResults STATUS_APPX_FILE_NOT_ENCRYPTED;
    public static HResults STATUS_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED;
    public static HResults STATUS_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET;
    public static HResults STATUS_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE;
    public static HResults STATUS_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER;
    public static HResults STATUS_INVALID_TASK_NAME;
    public static HResults STATUS_INVALID_TASK_INDEX;
    public static HResults STATUS_THREAD_ALREADY_IN_TASK;
    public static HResults STATUS_CALLBACK_BYPASS;
    public static HResults STATUS_UNDEFINED_SCOPE;
    public static HResults STATUS_INVALID_CAP;
    public static HResults STATUS_NOT_GUI_PROCESS;
    public static HResults STATUS_DEVICE_HUNG;
    public static HResults STATUS_CONTAINER_ASSIGNED;
    public static HResults STATUS_JOB_NO_CONTAINER;
    public static HResults STATUS_DEVICE_UNRESPONSIVE;
    public static HResults STATUS_REPARSE_POINT_ENCOUNTERED;
    public static HResults STATUS_ATTRIBUTE_NOT_PRESENT;
    public static HResults STATUS_NOT_A_TIERED_VOLUME;
    public static HResults STATUS_ALREADY_HAS_STREAM_ID;
    public static HResults STATUS_JOB_NOT_EMPTY;
    public static HResults STATUS_ALREADY_INITIALIZED;
    public static HResults STATUS_ENCLAVE_NOT_TERMINATED;
    public static HResults STATUS_ENCLAVE_IS_TERMINATING;
    public static HResults STATUS_SMB1_NOT_AVAILABLE;
    public static HResults STATUS_SMR_GARBAGE_COLLECTION_REQUIRED;
    public static HResults STATUS_FAIL_FAST_EXCEPTION;
    public static HResults STATUS_IMAGE_CERT_REVOKED;
    public static HResults STATUS_DYNAMIC_CODE_BLOCKED;
    public static HResults STATUS_IMAGE_CERT_EXPIRED;
    public static HResults STATUS_STRICT_CFG_VIOLATION;
    public static HResults STATUS_SET_CONTEXT_DENIED;
    public static HResults STATUS_CROSS_PARTITION_VIOLATION;
    public static HResults STATUS_PORT_CLOSED;
    public static HResults STATUS_MESSAGE_LOST;
    public static HResults STATUS_INVALID_MESSAGE;
    public static HResults STATUS_REQUEST_CANCELED;
    public static HResults STATUS_RECURSIVE_DISPATCH;
    public static HResults STATUS_LPC_RECEIVE_BUFFER_EXPECTED;
    public static HResults STATUS_LPC_INVALID_CONNECTION_USAGE;
    public static HResults STATUS_LPC_REQUESTS_NOT_ALLOWED;
    public static HResults STATUS_RESOURCE_IN_USE;
    public static HResults STATUS_HARDWARE_MEMORY_ERROR;
    public static HResults STATUS_THREADPOOL_HANDLE_EXCEPTION;
    public static HResults STATUS_THREADPOOL_SET_EVENT_ON_COMPLETION_FAILED;
    public static HResults STATUS_THREADPOOL_RELEASE_SEMAPHORE_ON_COMPLETION_FAILED;
    public static HResults STATUS_THREADPOOL_RELEASE_MUTEX_ON_COMPLETION_FAILED;
    public static HResults STATUS_THREADPOOL_FREE_LIBRARY_ON_COMPLETION_FAILED;
    public static HResults STATUS_THREADPOOL_RELEASED_DURING_OPERATION;
    public static HResults STATUS_CALLBACK_RETURNED_WHILE_IMPERSONATING;
    public static HResults STATUS_APC_RETURNED_WHILE_IMPERSONATING;
    public static HResults STATUS_PROCESS_IS_PROTECTED;
    public static HResults STATUS_MCA_EXCEPTION;
    public static HResults STATUS_CERTIFICATE_MAPPING_NOT_UNIQUE;
    public static HResults STATUS_SYMLINK_CLASS_DISABLED;
    public static HResults STATUS_INVALID_IDN_NORMALIZATION;
    public static HResults STATUS_NO_UNICODE_TRANSLATION;
    public static HResults STATUS_ALREADY_REGISTERED;
    public static HResults STATUS_CONTEXT_MISMATCH;
    public static HResults STATUS_PORT_ALREADY_HAS_COMPLETION_LIST;
    public static HResults STATUS_CALLBACK_RETURNED_THREAD_PRIORITY;
    public static HResults STATUS_INVALID_THREAD;
    public static HResults STATUS_CALLBACK_RETURNED_TRANSACTION;
    public static HResults STATUS_CALLBACK_RETURNED_LDR_LOCK;
    public static HResults STATUS_CALLBACK_RETURNED_LANG;
    public static HResults STATUS_CALLBACK_RETURNED_PRI_BACK;
    public static HResults STATUS_CALLBACK_RETURNED_THREAD_AFFINITY;
    public static HResults STATUS_LPC_HANDLE_COUNT_EXCEEDED;
    public static HResults STATUS_EXECUTABLE_MEMORY_WRITE;
    public static HResults STATUS_KERNEL_EXECUTABLE_MEMORY_WRITE;
    public static HResults STATUS_ATTACHED_EXECUTABLE_MEMORY_WRITE;
    public static HResults STATUS_TRIGGERED_EXECUTABLE_MEMORY_WRITE;
    public static HResults STATUS_DISK_REPAIR_DISABLED;
    public static HResults STATUS_DS_DOMAIN_RENAME_IN_PROGRESS;
    public static HResults STATUS_DISK_QUOTA_EXCEEDED;
    public static HResults STATUS_DATA_LOST_REPAIR;
    public static HResults STATUS_CONTENT_BLOCKED;
    public static HResults STATUS_BAD_CLUSTERS;
    public static HResults STATUS_VOLUME_DIRTY;
    public static HResults STATUS_DISK_REPAIR_REDIRECTED;
    public static HResults STATUS_DISK_REPAIR_UNSUCCESSFUL;
    public static HResults STATUS_CORRUPT_LOG_OVERFULL;
    public static HResults STATUS_CORRUPT_LOG_CORRUPTED;
    public static HResults STATUS_CORRUPT_LOG_UNAVAILABLE;
    public static HResults STATUS_CORRUPT_LOG_DELETED_FULL;
    public static HResults STATUS_CORRUPT_LOG_CLEARED;
    public static HResults STATUS_ORPHAN_NAME_EXHAUSTED;
    public static HResults STATUS_PROACTIVE_SCAN_IN_PROGRESS;
    public static HResults STATUS_ENCRYPTED_IO_NOT_POSSIBLE;
    public static HResults STATUS_CORRUPT_LOG_UPLEVEL_RECORDS;
    public static HResults STATUS_FILE_CHECKED_OUT;
    public static HResults STATUS_CHECKOUT_REQUIRED;
    public static HResults STATUS_BAD_FILE_TYPE;
    public static HResults STATUS_FILE_TOO_LARGE;
    public static HResults STATUS_FORMS_AUTH_REQUIRED;
    public static HResults STATUS_VIRUS_INFECTED;
    public static HResults STATUS_VIRUS_DELETED;
    public static HResults STATUS_BAD_MCFG_TABLE;
    public static HResults STATUS_CANNOT_BREAK_OPLOCK;
    public static HResults STATUS_BAD_KEY;
    public static HResults STATUS_BAD_DATA;
    public static HResults STATUS_NO_KEY;
    public static HResults STATUS_FILE_HANDLE_REVOKED;
    public static HResults STATUS_WOW_ASSERTION;
    public static HResults STATUS_INVALID_SIGNATURE;
    public static HResults STATUS_HMAC_NOT_SUPPORTED;
    public static HResults STATUS_AUTH_TAG_MISMATCH;
    public static HResults STATUS_INVALID_STATE_TRANSITION;
    public static HResults STATUS_INVALID_KERNEL_INFO_VERSION;
    public static HResults STATUS_INVALID_PEP_INFO_VERSION;
    public static HResults STATUS_HANDLE_REVOKED;
    public static HResults STATUS_EOF_ON_GHOSTED_RANGE;
    public static HResults STATUS_IPSEC_QUEUE_OVERFLOW;
    public static HResults STATUS_ND_QUEUE_OVERFLOW;
    public static HResults STATUS_HOPLIMIT_EXCEEDED;
    public static HResults STATUS_PROTOCOL_NOT_SUPPORTED;
    public static HResults STATUS_FASTPATH_REJECTED;
    public static HResults STATUS_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED;
    public static HResults STATUS_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR;
    public static HResults STATUS_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR;
    public static HResults STATUS_XML_PARSE_ERROR;
    public static HResults STATUS_XMLDSIG_ERROR;
    public static HResults STATUS_WRONG_COMPARTMENT;
    public static HResults STATUS_AUTHIP_FAILURE;
    public static HResults STATUS_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS;
    public static HResults STATUS_DS_OID_NOT_FOUND;
    public static HResults STATUS_INCORRECT_ACCOUNT_TYPE;
    public static HResults STATUS_HASH_NOT_SUPPORTED;
    public static HResults STATUS_HASH_NOT_PRESENT;
    public static HResults STATUS_SECONDARY_IC_PROVIDER_NOT_REGISTERED;
    public static HResults STATUS_GPIO_CLIENT_INFORMATION_INVALID;
    public static HResults STATUS_GPIO_VERSION_NOT_SUPPORTED;
    public static HResults STATUS_GPIO_INVALID_REGISTRATION_PACKET;
    public static HResults STATUS_GPIO_OPERATION_DENIED;
    public static HResults STATUS_GPIO_INCOMPATIBLE_CONNECT_MODE;
    public static HResults STATUS_GPIO_INTERRUPT_ALREADY_UNMASKED;
    public static HResults STATUS_CANNOT_SWITCH_RUNLEVEL;
    public static HResults STATUS_INVALID_RUNLEVEL_SETTING;
    public static HResults STATUS_RUNLEVEL_SWITCH_TIMEOUT;
    public static HResults STATUS_SERVICES_FAILED_AUTOSTART;
    public static HResults STATUS_RUNLEVEL_SWITCH_AGENT_TIMEOUT;
    public static HResults STATUS_RUNLEVEL_SWITCH_IN_PROGRESS;
    public static HResults STATUS_NOT_APPCONTAINER;
    public static HResults STATUS_NOT_SUPPORTED_IN_APPCONTAINER;
    public static HResults STATUS_INVALID_PACKAGE_SID_LENGTH;
    public static HResults STATUS_LPAC_ACCESS_DENIED;
    public static HResults STATUS_ADMINLESS_ACCESS_DENIED;
    public static HResults STATUS_APP_DATA_NOT_FOUND;
    public static HResults STATUS_APP_DATA_EXPIRED;
    public static HResults STATUS_APP_DATA_CORRUPT;
    public static HResults STATUS_APP_DATA_LIMIT_EXCEEDED;
    public static HResults STATUS_APP_DATA_REBOOT_REQUIRED;
    public static HResults STATUS_OFFLOAD_READ_FLT_NOT_SUPPORTED;
    public static HResults STATUS_OFFLOAD_WRITE_FLT_NOT_SUPPORTED;
    public static HResults STATUS_OFFLOAD_READ_FILE_NOT_SUPPORTED;
    public static HResults STATUS_OFFLOAD_WRITE_FILE_NOT_SUPPORTED;
    public static HResults STATUS_WOF_WIM_HEADER_CORRUPT;
    public static HResults STATUS_WOF_WIM_RESOURCE_TABLE_CORRUPT;
    public static HResults STATUS_WOF_FILE_RESOURCE_TABLE_CORRUPT;
    public static HResults STATUS_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE;
    public static HResults STATUS_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT;
    public static HResults STATUS_FILE_SYSTEM_VIRTUALIZATION_BUSY;
    public static HResults STATUS_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN;
    public static HResults STATUS_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION;
    public static HResults STATUS_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT;
    public static HResults STATUS_CLOUD_FILE_PROVIDER_NOT_RUNNING;
    public static HResults STATUS_CLOUD_FILE_METADATA_CORRUPT;
    public static HResults STATUS_CLOUD_FILE_METADATA_TOO_LARGE;
    public static HResults STATUS_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE;
    public static HResults STATUS_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS;
    public static HResults STATUS_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED;
    public static HResults STATUS_NOT_A_CLOUD_FILE;
    public static HResults STATUS_CLOUD_FILE_NOT_IN_SYNC;
    public static HResults STATUS_CLOUD_FILE_ALREADY_CONNECTED;
    public static HResults STATUS_CLOUD_FILE_NOT_SUPPORTED;
    public static HResults STATUS_CLOUD_FILE_INVALID_REQUEST;
    public static HResults STATUS_CLOUD_FILE_READ_ONLY_VOLUME;
    public static HResults STATUS_CLOUD_FILE_CONNECTED_PROVIDER_ONLY;
    public static HResults STATUS_CLOUD_FILE_VALIDATION_FAILED;
    public static HResults STATUS_CLOUD_FILE_AUTHENTICATION_FAILED;
    public static HResults STATUS_CLOUD_FILE_INSUFFICIENT_RESOURCES;
    public static HResults STATUS_CLOUD_FILE_NETWORK_UNAVAILABLE;
    public static HResults STATUS_CLOUD_FILE_UNSUCCESSFUL;
    public static HResults STATUS_CLOUD_FILE_NOT_UNDER_SYNC_ROOT;
    public static HResults STATUS_CLOUD_FILE_IN_USE;
    public static HResults STATUS_CLOUD_FILE_PINNED;
    public static HResults STATUS_CLOUD_FILE_REQUEST_ABORTED;
    public static HResults STATUS_CLOUD_FILE_PROPERTY_CORRUPT;
    public static HResults STATUS_CLOUD_FILE_ACCESS_DENIED;
    public static HResults STATUS_CLOUD_FILE_INCOMPATIBLE_HARDLINKS;
    public static HResults STATUS_CLOUD_FILE_PROPERTY_LOCK_CONFLICT;
    public static HResults STATUS_CLOUD_FILE_REQUEST_CANCELED;
    public static HResults STATUS_CLOUD_FILE_PROVIDER_TERMINATED;
    public static HResults STATUS_NOT_A_CLOUD_SYNC_ROOT;
    public static HResults DBG_NO_STATE_CHANGE;
    public static HResults DBG_APP_NOT_IDLE;
    public static HResults RPC_NT_INVALID_STRING_BINDING;
    public static HResults RPC_NT_WRONG_KIND_OF_BINDING;
    public static HResults RPC_NT_INVALID_BINDING;
    public static HResults RPC_NT_PROTSEQ_NOT_SUPPORTED;
    public static HResults RPC_NT_INVALID_RPC_PROTSEQ;
    public static HResults RPC_NT_INVALID_STRING_UUID;
    public static HResults RPC_NT_INVALID_ENDPOINT_FORMAT;
    public static HResults RPC_NT_INVALID_NET_ADDR;
    public static HResults RPC_NT_NO_ENDPOINT_FOUND;
    public static HResults RPC_NT_INVALID_TIMEOUT;
    public static HResults RPC_NT_OBJECT_NOT_FOUND;
    public static HResults RPC_NT_ALREADY_REGISTERED;
    public static HResults RPC_NT_TYPE_ALREADY_REGISTERED;
    public static HResults RPC_NT_ALREADY_LISTENING;
    public static HResults RPC_NT_NO_PROTSEQS_REGISTERED;
    public static HResults RPC_NT_NOT_LISTENING;
    public static HResults RPC_NT_UNKNOWN_MGR_TYPE;
    public static HResults RPC_NT_UNKNOWN_IF;
    public static HResults RPC_NT_NO_BINDINGS;
    public static HResults RPC_NT_NO_PROTSEQS;
    public static HResults RPC_NT_CANT_CREATE_ENDPOINT;
    public static HResults RPC_NT_OUT_OF_RESOURCES;
    public static HResults RPC_NT_SERVER_UNAVAILABLE;
    public static HResults RPC_NT_SERVER_TOO_BUSY;
    public static HResults RPC_NT_INVALID_NETWORK_OPTIONS;
    public static HResults RPC_NT_NO_CALL_ACTIVE;
    public static HResults RPC_NT_CALL_FAILED;
    public static HResults RPC_NT_CALL_FAILED_DNE;
    public static HResults RPC_NT_PROTOCOL_ERROR;
    public static HResults RPC_NT_UNSUPPORTED_TRANS_SYN;
    public static HResults RPC_NT_UNSUPPORTED_TYPE;
    public static HResults RPC_NT_INVALID_TAG;
    public static HResults RPC_NT_INVALID_BOUND;
    public static HResults RPC_NT_NO_ENTRY_NAME;
    public static HResults RPC_NT_INVALID_NAME_SYNTAX;
    public static HResults RPC_NT_UNSUPPORTED_NAME_SYNTAX;
    public static HResults RPC_NT_UUID_NO_ADDRESS;
    public static HResults RPC_NT_DUPLICATE_ENDPOINT;
    public static HResults RPC_NT_UNKNOWN_AUTHN_TYPE;
    public static HResults RPC_NT_MAX_CALLS_TOO_SMALL;
    public static HResults RPC_NT_STRING_TOO_LONG;
    public static HResults RPC_NT_PROTSEQ_NOT_FOUND;
    public static HResults RPC_NT_PROCNUM_OUT_OF_RANGE;
    public static HResults RPC_NT_BINDING_HAS_NO_AUTH;
    public static HResults RPC_NT_UNKNOWN_AUTHN_SERVICE;
    public static HResults RPC_NT_UNKNOWN_AUTHN_LEVEL;
    public static HResults RPC_NT_INVALID_AUTH_IDENTITY;
    public static HResults RPC_NT_UNKNOWN_AUTHZ_SERVICE;
    public static HResults EPT_NT_INVALID_ENTRY;
    public static HResults EPT_NT_CANT_PERFORM_OP;
    public static HResults EPT_NT_NOT_REGISTERED;
    public static HResults RPC_NT_NOTHING_TO_EXPORT;
    public static HResults RPC_NT_INCOMPLETE_NAME;
    public static HResults RPC_NT_INVALID_VERS_OPTION;
    public static HResults RPC_NT_NO_MORE_MEMBERS;
    public static HResults RPC_NT_NOT_ALL_OBJS_UNEXPORTED;
    public static HResults RPC_NT_INTERFACE_NOT_FOUND;
    public static HResults RPC_NT_ENTRY_ALREADY_EXISTS;
    public static HResults RPC_NT_ENTRY_NOT_FOUND;
    public static HResults RPC_NT_NAME_SERVICE_UNAVAILABLE;
    public static HResults RPC_NT_INVALID_NAF_ID;
    public static HResults RPC_NT_CANNOT_SUPPORT;
    public static HResults RPC_NT_NO_CONTEXT_AVAILABLE;
    public static HResults RPC_NT_INTERNAL_ERROR;
    public static HResults RPC_NT_ZERO_DIVIDE;
    public static HResults RPC_NT_ADDRESS_ERROR;
    public static HResults RPC_NT_FP_DIV_ZERO;
    public static HResults RPC_NT_FP_UNDERFLOW;
    public static HResults RPC_NT_FP_OVERFLOW;
    public static HResults RPC_NT_NO_MORE_ENTRIES;
    public static HResults RPC_NT_SS_CHAR_TRANS_OPEN_FAIL;
    public static HResults RPC_NT_SS_CHAR_TRANS_SHORT_FILE;
    public static HResults RPC_NT_SS_IN_NULL_CONTEXT;
    public static HResults RPC_NT_SS_CONTEXT_MISMATCH;
    public static HResults RPC_NT_SS_CONTEXT_DAMAGED;
    public static HResults RPC_NT_SS_HANDLES_MISMATCH;
    public static HResults RPC_NT_SS_CANNOT_GET_CALL_HANDLE;
    public static HResults RPC_NT_NULL_REF_POINTER;
    public static HResults RPC_NT_ENUM_VALUE_OUT_OF_RANGE;
    public static HResults RPC_NT_BYTE_COUNT_TOO_SMALL;
    public static HResults RPC_NT_BAD_STUB_DATA;
    public static HResults RPC_NT_CALL_IN_PROGRESS;
    public static HResults RPC_NT_NO_MORE_BINDINGS;
    public static HResults RPC_NT_GROUP_MEMBER_NOT_FOUND;
    public static HResults EPT_NT_CANT_CREATE;
    public static HResults RPC_NT_INVALID_OBJECT;
    public static HResults RPC_NT_NO_INTERFACES;
    public static HResults RPC_NT_CALL_CANCELLED;
    public static HResults RPC_NT_BINDING_INCOMPLETE;
    public static HResults RPC_NT_COMM_FAILURE;
    public static HResults RPC_NT_UNSUPPORTED_AUTHN_LEVEL;
    public static HResults RPC_NT_NO_PRINC_NAME;
    public static HResults RPC_NT_NOT_RPC_ERROR;
    public static HResults RPC_NT_UUID_LOCAL_ONLY;
    public static HResults RPC_NT_SEC_PKG_ERROR;
    public static HResults RPC_NT_NOT_CANCELLED;
    public static HResults RPC_NT_INVALID_ES_ACTION;
    public static HResults RPC_NT_WRONG_ES_VERSION;
    public static HResults RPC_NT_WRONG_STUB_VERSION;
    public static HResults RPC_NT_INVALID_PIPE_OBJECT;
    public static HResults RPC_NT_INVALID_PIPE_OPERATION;
    public static HResults RPC_NT_WRONG_PIPE_VERSION;
    public static HResults RPC_NT_PIPE_CLOSED;
    public static HResults RPC_NT_PIPE_DISCIPLINE_ERROR;
    public static HResults RPC_NT_PIPE_EMPTY;
    public static HResults RPC_NT_INVALID_ASYNC_HANDLE;
    public static HResults RPC_NT_INVALID_ASYNC_CALL;
    public static HResults RPC_NT_PROXY_ACCESS_DENIED;
    public static HResults RPC_NT_COOKIE_AUTH_FAILED;
    public static HResults RPC_NT_SEND_INCOMPLETE;
    public static HResults STATUS_ACPI_INVALID_OPCODE;
    public static HResults STATUS_ACPI_STACK_OVERFLOW;
    public static HResults STATUS_ACPI_ASSERT_FAILED;
    public static HResults STATUS_ACPI_INVALID_INDEX;
    public static HResults STATUS_ACPI_INVALID_ARGUMENT;
    public static HResults STATUS_ACPI_FATAL;
    public static HResults STATUS_ACPI_INVALID_SUPERNAME;
    public static HResults STATUS_ACPI_INVALID_ARGTYPE;
    public static HResults STATUS_ACPI_INVALID_OBJTYPE;
    public static HResults STATUS_ACPI_INVALID_TARGETTYPE;
    public static HResults STATUS_ACPI_INCORRECT_ARGUMENT_COUNT;
    public static HResults STATUS_ACPI_ADDRESS_NOT_MAPPED;
    public static HResults STATUS_ACPI_INVALID_EVENTTYPE;
    public static HResults STATUS_ACPI_HANDLER_COLLISION;
    public static HResults STATUS_ACPI_INVALID_DATA;
    public static HResults STATUS_ACPI_INVALID_REGION;
    public static HResults STATUS_ACPI_INVALID_ACCESS_SIZE;
    public static HResults STATUS_ACPI_ACQUIRE_GLOBAL_LOCK;
    public static HResults STATUS_ACPI_ALREADY_INITIALIZED;
    public static HResults STATUS_ACPI_NOT_INITIALIZED;
    public static HResults STATUS_ACPI_INVALID_MUTEX_LEVEL;
    public static HResults STATUS_ACPI_MUTEX_NOT_OWNED;
    public static HResults STATUS_ACPI_MUTEX_NOT_OWNER;
    public static HResults STATUS_ACPI_RS_ACCESS;
    public static HResults STATUS_ACPI_INVALID_TABLE;
    public static HResults STATUS_ACPI_REG_HANDLER_FAILED;
    public static HResults STATUS_ACPI_POWER_REQUEST_FAILED;
    public static HResults STATUS_CTX_WINSTATION_NAME_INVALID;
    public static HResults STATUS_CTX_INVALID_PD;
    public static HResults STATUS_CTX_PD_NOT_FOUND;
    public static HResults STATUS_CTX_CDM_CONNECT;
    public static HResults STATUS_CTX_CDM_DISCONNECT;
    public static HResults STATUS_CTX_CLOSE_PENDING;
    public static HResults STATUS_CTX_NO_OUTBUF;
    public static HResults STATUS_CTX_MODEM_INF_NOT_FOUND;
    public static HResults STATUS_CTX_INVALID_MODEMNAME;
    public static HResults STATUS_CTX_RESPONSE_ERROR;
    public static HResults STATUS_CTX_MODEM_RESPONSE_TIMEOUT;
    public static HResults STATUS_CTX_MODEM_RESPONSE_NO_CARRIER;
    public static HResults STATUS_CTX_MODEM_RESPONSE_NO_DIALTONE;
    public static HResults STATUS_CTX_MODEM_RESPONSE_BUSY;
    public static HResults STATUS_CTX_MODEM_RESPONSE_VOICE;
    public static HResults STATUS_CTX_TD_ERROR;
    public static HResults STATUS_CTX_LICENSE_CLIENT_INVALID;
    public static HResults STATUS_CTX_LICENSE_NOT_AVAILABLE;
    public static HResults STATUS_CTX_LICENSE_EXPIRED;
    public static HResults STATUS_CTX_WINSTATION_NOT_FOUND;
    public static HResults STATUS_CTX_WINSTATION_NAME_COLLISION;
    public static HResults STATUS_CTX_WINSTATION_BUSY;
    public static HResults STATUS_CTX_BAD_VIDEO_MODE;
    public static HResults STATUS_CTX_GRAPHICS_INVALID;
    public static HResults STATUS_CTX_NOT_CONSOLE;
    public static HResults STATUS_CTX_CLIENT_QUERY_TIMEOUT;
    public static HResults STATUS_CTX_CONSOLE_DISCONNECT;
    public static HResults STATUS_CTX_CONSOLE_CONNECT;
    public static HResults STATUS_CTX_SHADOW_DENIED;
    public static HResults STATUS_CTX_WINSTATION_ACCESS_DENIED;
    public static HResults STATUS_CTX_INVALID_WD;
    public static HResults STATUS_CTX_WD_NOT_FOUND;
    public static HResults STATUS_CTX_SHADOW_INVALID;
    public static HResults STATUS_CTX_SHADOW_DISABLED;
    public static HResults STATUS_RDP_PROTOCOL_ERROR;
    public static HResults STATUS_CTX_CLIENT_LICENSE_NOT_SET;
    public static HResults STATUS_CTX_CLIENT_LICENSE_IN_USE;
    public static HResults STATUS_CTX_SHADOW_ENDED_BY_MODE_CHANGE;
    public static HResults STATUS_CTX_SHADOW_NOT_RUNNING;
    public static HResults STATUS_CTX_LOGON_DISABLED;
    public static HResults STATUS_CTX_SECURITY_LAYER_ERROR;
    public static HResults STATUS_TS_INCOMPATIBLE_SESSIONS;
    public static HResults STATUS_TS_VIDEO_SUBSYSTEM_ERROR;
    public static HResults STATUS_PNP_BAD_MPS_TABLE;
    public static HResults STATUS_PNP_TRANSLATION_FAILED;
    public static HResults STATUS_PNP_IRQ_TRANSLATION_FAILED;
    public static HResults STATUS_PNP_INVALID_ID;
    public static HResults STATUS_IO_REISSUE_AS_CACHED;
    public static HResults STATUS_MUI_FILE_NOT_FOUND;
    public static HResults STATUS_MUI_INVALID_FILE;
    public static HResults STATUS_MUI_INVALID_RC_CONFIG;
    public static HResults STATUS_MUI_INVALID_LOCALE_NAME;
    public static HResults STATUS_MUI_INVALID_ULTIMATEFALLBACK_NAME;
    public static HResults STATUS_MUI_FILE_NOT_LOADED;
    public static HResults STATUS_RESOURCE_ENUM_USER_STOP;
    public static HResults STATUS_FLT_NO_HANDLER_DEFINED;
    public static HResults STATUS_FLT_CONTEXT_ALREADY_DEFINED;
    public static HResults STATUS_FLT_INVALID_ASYNCHRONOUS_REQUEST;
    public static HResults STATUS_FLT_DISALLOW_FAST_IO;
    public static HResults STATUS_FLT_DISALLOW_FSFILTER_IO;
    public static HResults STATUS_FLT_INVALID_NAME_REQUEST;
    public static HResults STATUS_FLT_NOT_SAFE_TO_POST_OPERATION;
    public static HResults STATUS_FLT_NOT_INITIALIZED;
    public static HResults STATUS_FLT_FILTER_NOT_READY;
    public static HResults STATUS_FLT_POST_OPERATION_CLEANUP;
    public static HResults STATUS_FLT_INTERNAL_ERROR;
    public static HResults STATUS_FLT_DELETING_OBJECT;
    public static HResults STATUS_FLT_MUST_BE_NONPAGED_POOL;
    public static HResults STATUS_FLT_DUPLICATE_ENTRY;
    public static HResults STATUS_FLT_CBDQ_DISABLED;
    public static HResults STATUS_FLT_DO_NOT_ATTACH;
    public static HResults STATUS_FLT_DO_NOT_DETACH;
    public static HResults STATUS_FLT_INSTANCE_ALTITUDE_COLLISION;
    public static HResults STATUS_FLT_INSTANCE_NAME_COLLISION;
    public static HResults STATUS_FLT_FILTER_NOT_FOUND;
    public static HResults STATUS_FLT_VOLUME_NOT_FOUND;
    public static HResults STATUS_FLT_INSTANCE_NOT_FOUND;
    public static HResults STATUS_FLT_CONTEXT_ALLOCATION_NOT_FOUND;
    public static HResults STATUS_FLT_INVALID_CONTEXT_REGISTRATION;
    public static HResults STATUS_FLT_NAME_CACHE_MISS;
    public static HResults STATUS_FLT_NO_DEVICE_OBJECT;
    public static HResults STATUS_FLT_VOLUME_ALREADY_MOUNTED;
    public static HResults STATUS_FLT_ALREADY_ENLISTED;
    public static HResults STATUS_FLT_CONTEXT_ALREADY_LINKED;
    public static HResults STATUS_FLT_NO_WAITER_FOR_REPLY;
    public static HResults STATUS_FLT_REGISTRATION_BUSY;
    public static HResults STATUS_SXS_SECTION_NOT_FOUND;
    public static HResults STATUS_SXS_CANT_GEN_ACTCTX;
    public static HResults STATUS_SXS_INVALID_ACTCTXDATA_FORMAT;
    public static HResults STATUS_SXS_ASSEMBLY_NOT_FOUND;
    public static HResults STATUS_SXS_MANIFEST_FORMAT_ERROR;
    public static HResults STATUS_SXS_MANIFEST_PARSE_ERROR;
    public static HResults STATUS_SXS_ACTIVATION_CONTEXT_DISABLED;
    public static HResults STATUS_SXS_KEY_NOT_FOUND;
    public static HResults STATUS_SXS_VERSION_CONFLICT;
    public static HResults STATUS_SXS_WRONG_SECTION_TYPE;
    public static HResults STATUS_SXS_THREAD_QUERIES_DISABLED;
    public static HResults STATUS_SXS_ASSEMBLY_MISSING;
    public static HResults STATUS_SXS_RELEASE_ACTIVATION_CONTEXT;
    public static HResults STATUS_SXS_PROCESS_DEFAULT_ALREADY_SET;
    public static HResults STATUS_SXS_EARLY_DEACTIVATION;
    public static HResults STATUS_SXS_INVALID_DEACTIVATION;
    public static HResults STATUS_SXS_MULTIPLE_DEACTIVATION;
    public static HResults STATUS_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY;
    public static HResults STATUS_SXS_PROCESS_TERMINATION_REQUESTED;
    public static HResults STATUS_SXS_CORRUPT_ACTIVATION_STACK;
    public static HResults STATUS_SXS_CORRUPTION;
    public static HResults STATUS_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE;
    public static HResults STATUS_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME;
    public static HResults STATUS_SXS_IDENTITY_DUPLICATE_ATTRIBUTE;
    public static HResults STATUS_SXS_IDENTITY_PARSE_ERROR;
    public static HResults STATUS_SXS_COMPONENT_STORE_CORRUPT;
    public static HResults STATUS_SXS_FILE_HASH_MISMATCH;
    public static HResults STATUS_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT;
    public static HResults STATUS_SXS_IDENTITIES_DIFFERENT;
    public static HResults STATUS_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT;
    public static HResults STATUS_SXS_FILE_NOT_PART_OF_ASSEMBLY;
    public static HResults STATUS_ADVANCED_INSTALLER_FAILED;
    public static HResults STATUS_XML_ENCODING_MISMATCH;
    public static HResults STATUS_SXS_MANIFEST_TOO_BIG;
    public static HResults STATUS_SXS_SETTING_NOT_REGISTERED;
    public static HResults STATUS_SXS_TRANSACTION_CLOSURE_INCOMPLETE;
    public static HResults STATUS_SMI_PRIMITIVE_INSTALLER_FAILED;
    public static HResults STATUS_GENERIC_COMMAND_FAILED;
    public static HResults STATUS_SXS_FILE_HASH_MISSING;
    public static HResults STATUS_CLUSTER_INVALID_NODE;
    public static HResults STATUS_CLUSTER_NODE_EXISTS;
    public static HResults STATUS_CLUSTER_JOIN_IN_PROGRESS;
    public static HResults STATUS_CLUSTER_NODE_NOT_FOUND;
    public static HResults STATUS_CLUSTER_LOCAL_NODE_NOT_FOUND;
    public static HResults STATUS_CLUSTER_NETWORK_EXISTS;
    public static HResults STATUS_CLUSTER_NETWORK_NOT_FOUND;
    public static HResults STATUS_CLUSTER_NETINTERFACE_EXISTS;
    public static HResults STATUS_CLUSTER_NETINTERFACE_NOT_FOUND;
    public static HResults STATUS_CLUSTER_INVALID_REQUEST;
    public static HResults STATUS_CLUSTER_INVALID_NETWORK_PROVIDER;
    public static HResults STATUS_CLUSTER_NODE_DOWN;
    public static HResults STATUS_CLUSTER_NODE_UNREACHABLE;
    public static HResults STATUS_CLUSTER_NODE_NOT_MEMBER;
    public static HResults STATUS_CLUSTER_JOIN_NOT_IN_PROGRESS;
    public static HResults STATUS_CLUSTER_INVALID_NETWORK;
    public static HResults STATUS_CLUSTER_NO_NET_ADAPTERS;
    public static HResults STATUS_CLUSTER_NODE_UP;
    public static HResults STATUS_CLUSTER_NODE_PAUSED;
    public static HResults STATUS_CLUSTER_NODE_NOT_PAUSED;
    public static HResults STATUS_CLUSTER_NO_SECURITY_CONTEXT;
    public static HResults STATUS_CLUSTER_NETWORK_NOT_INTERNAL;
    public static HResults STATUS_CLUSTER_POISONED;
    public static HResults STATUS_CLUSTER_NON_CSV_PATH;
    public static HResults STATUS_CLUSTER_CSV_VOLUME_NOT_LOCAL;
    public static HResults STATUS_CLUSTER_CSV_READ_OPLOCK_BREAK_IN_PROGRESS;
    public static HResults STATUS_CLUSTER_CSV_AUTO_PAUSE_ERROR;
    public static HResults STATUS_CLUSTER_CSV_REDIRECTED;
    public static HResults STATUS_CLUSTER_CSV_NOT_REDIRECTED;
    public static HResults STATUS_CLUSTER_CSV_VOLUME_DRAINING;
    public static HResults STATUS_CLUSTER_CSV_SNAPSHOT_CREATION_IN_PROGRESS;
    public static HResults STATUS_CLUSTER_CSV_VOLUME_DRAINING_SUCCEEDED_DOWNLEVEL;
    public static HResults STATUS_CLUSTER_CSV_NO_SNAPSHOTS;
    public static HResults STATUS_CSV_IO_PAUSE_TIMEOUT;
    public static HResults STATUS_CLUSTER_CSV_INVALID_HANDLE;
    public static HResults STATUS_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR;
    public static HResults STATUS_CLUSTER_CAM_TICKET_REPLAY_DETECTED;
    public static HResults STATUS_TRANSACTIONAL_CONFLICT;
    public static HResults STATUS_INVALID_TRANSACTION;
    public static HResults STATUS_TRANSACTION_NOT_ACTIVE;
    public static HResults STATUS_TM_INITIALIZATION_FAILED;
    public static HResults STATUS_RM_NOT_ACTIVE;
    public static HResults STATUS_RM_METADATA_CORRUPT;
    public static HResults STATUS_TRANSACTION_NOT_JOINED;
    public static HResults STATUS_DIRECTORY_NOT_RM;
    public static HResults STATUS_COULD_NOT_RESIZE_LOG;
    public static HResults STATUS_TRANSACTIONS_UNSUPPORTED_REMOTE;
    public static HResults STATUS_LOG_RESIZE_INVALID_SIZE;
    public static HResults STATUS_REMOTE_FILE_VERSION_MISMATCH;
    public static HResults STATUS_CRM_PROTOCOL_ALREADY_EXISTS;
    public static HResults STATUS_TRANSACTION_PROPAGATION_FAILED;
    public static HResults STATUS_CRM_PROTOCOL_NOT_FOUND;
    public static HResults STATUS_TRANSACTION_SUPERIOR_EXISTS;
    public static HResults STATUS_TRANSACTION_REQUEST_NOT_VALID;
    public static HResults STATUS_TRANSACTION_NOT_REQUESTED;
    public static HResults STATUS_TRANSACTION_ALREADY_ABORTED;
    public static HResults STATUS_TRANSACTION_ALREADY_COMMITTED;
    public static HResults STATUS_TRANSACTION_INVALID_MARSHALL_BUFFER;
    public static HResults STATUS_CURRENT_TRANSACTION_NOT_VALID;
    public static HResults STATUS_LOG_GROWTH_FAILED;
    public static HResults STATUS_OBJECT_NO_LONGER_EXISTS;
    public static HResults STATUS_STREAM_MINIVERSION_NOT_FOUND;
    public static HResults STATUS_STREAM_MINIVERSION_NOT_VALID;
    public static HResults STATUS_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION;
    public static HResults STATUS_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT;
    public static HResults STATUS_CANT_CREATE_MORE_STREAM_MINIVERSIONS;
    public static HResults STATUS_HANDLE_NO_LONGER_VALID;
    public static HResults STATUS_NO_TXF_METADATA;
    public static HResults STATUS_LOG_CORRUPTION_DETECTED;
    public static HResults STATUS_CANT_RECOVER_WITH_HANDLE_OPEN;
    public static HResults STATUS_RM_DISCONNECTED;
    public static HResults STATUS_ENLISTMENT_NOT_SUPERIOR;
    public static HResults STATUS_RECOVERY_NOT_NEEDED;
    public static HResults STATUS_RM_ALREADY_STARTED;
    public static HResults STATUS_FILE_IDENTITY_NOT_PERSISTENT;
    public static HResults STATUS_CANT_BREAK_TRANSACTIONAL_DEPENDENCY;
    public static HResults STATUS_CANT_CROSS_RM_BOUNDARY;
    public static HResults STATUS_TXF_DIR_NOT_EMPTY;
    public static HResults STATUS_INDOUBT_TRANSACTIONS_EXIST;
    public static HResults STATUS_TM_VOLATILE;
    public static HResults STATUS_ROLLBACK_TIMER_EXPIRED;
    public static HResults STATUS_TXF_ATTRIBUTE_CORRUPT;
    public static HResults STATUS_EFS_NOT_ALLOWED_IN_TRANSACTION;
    public static HResults STATUS_TRANSACTIONAL_OPEN_NOT_ALLOWED;
    public static HResults STATUS_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE;
    public static HResults STATUS_TXF_METADATA_ALREADY_PRESENT;
    public static HResults STATUS_TRANSACTION_SCOPE_CALLBACKS_NOT_SET;
    public static HResults STATUS_TRANSACTION_REQUIRED_PROMOTION;
    public static HResults STATUS_CANNOT_EXECUTE_FILE_IN_TRANSACTION;
    public static HResults STATUS_TRANSACTIONS_NOT_FROZEN;
    public static HResults STATUS_TRANSACTION_FREEZE_IN_PROGRESS;
    public static HResults STATUS_NOT_SNAPSHOT_VOLUME;
    public static HResults STATUS_NO_SAVEPOINT_WITH_OPEN_FILES;
    public static HResults STATUS_SPARSE_NOT_ALLOWED_IN_TRANSACTION;
    public static HResults STATUS_TM_IDENTITY_MISMATCH;
    public static HResults STATUS_FLOATED_SECTION;
    public static HResults STATUS_CANNOT_ACCEPT_TRANSACTED_WORK;
    public static HResults STATUS_CANNOT_ABORT_TRANSACTIONS;
    public static HResults STATUS_TRANSACTION_NOT_FOUND;
    public static HResults STATUS_RESOURCEMANAGER_NOT_FOUND;
    public static HResults STATUS_ENLISTMENT_NOT_FOUND;
    public static HResults STATUS_TRANSACTIONMANAGER_NOT_FOUND;
    public static HResults STATUS_TRANSACTIONMANAGER_NOT_ONLINE;
    public static HResults STATUS_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION;
    public static HResults STATUS_TRANSACTION_NOT_ROOT;
    public static HResults STATUS_TRANSACTION_OBJECT_EXPIRED;
    public static HResults STATUS_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION;
    public static HResults STATUS_TRANSACTION_RESPONSE_NOT_ENLISTED;
    public static HResults STATUS_TRANSACTION_RECORD_TOO_LONG;
    public static HResults STATUS_NO_LINK_TRACKING_IN_TRANSACTION;
    public static HResults STATUS_OPERATION_NOT_SUPPORTED_IN_TRANSACTION;
    public static HResults STATUS_TRANSACTION_INTEGRITY_VIOLATED;
    public static HResults STATUS_TRANSACTIONMANAGER_IDENTITY_MISMATCH;
    public static HResults STATUS_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT;
    public static HResults STATUS_TRANSACTION_MUST_WRITETHROUGH;
    public static HResults STATUS_TRANSACTION_NO_SUPERIOR;
    public static HResults STATUS_EXPIRED_HANDLE;
    public static HResults STATUS_TRANSACTION_NOT_ENLISTED;
    public static HResults STATUS_LOG_SECTOR_INVALID;
    public static HResults STATUS_LOG_SECTOR_PARITY_INVALID;
    public static HResults STATUS_LOG_SECTOR_REMAPPED;
    public static HResults STATUS_LOG_BLOCK_INCOMPLETE;
    public static HResults STATUS_LOG_INVALID_RANGE;
    public static HResults STATUS_LOG_BLOCKS_EXHAUSTED;
    public static HResults STATUS_LOG_READ_CONTEXT_INVALID;
    public static HResults STATUS_LOG_RESTART_INVALID;
    public static HResults STATUS_LOG_BLOCK_VERSION;
    public static HResults STATUS_LOG_BLOCK_INVALID;
    public static HResults STATUS_LOG_READ_MODE_INVALID;
    public static HResults STATUS_LOG_NO_RESTART;
    public static HResults STATUS_LOG_METADATA_CORRUPT;
    public static HResults STATUS_LOG_METADATA_INVALID;
    public static HResults STATUS_LOG_METADATA_INCONSISTENT;
    public static HResults STATUS_LOG_RESERVATION_INVALID;
    public static HResults STATUS_LOG_CANT_DELETE;
    public static HResults STATUS_LOG_CONTAINER_LIMIT_EXCEEDED;
    public static HResults STATUS_LOG_START_OF_LOG;
    public static HResults STATUS_LOG_POLICY_ALREADY_INSTALLED;
    public static HResults STATUS_LOG_POLICY_NOT_INSTALLED;
    public static HResults STATUS_LOG_POLICY_INVALID;
    public static HResults STATUS_LOG_POLICY_CONFLICT;
    public static HResults STATUS_LOG_PINNED_ARCHIVE_TAIL;
    public static HResults STATUS_LOG_RECORD_NONEXISTENT;
    public static HResults STATUS_LOG_RECORDS_RESERVED_INVALID;
    public static HResults STATUS_LOG_SPACE_RESERVED_INVALID;
    public static HResults STATUS_LOG_TAIL_INVALID;
    public static HResults STATUS_LOG_FULL;
    public static HResults STATUS_LOG_MULTIPLEXED;
    public static HResults STATUS_LOG_DEDICATED;
    public static HResults STATUS_LOG_ARCHIVE_NOT_IN_PROGRESS;
    public static HResults STATUS_LOG_ARCHIVE_IN_PROGRESS;
    public static HResults STATUS_LOG_EPHEMERAL;
    public static HResults STATUS_LOG_NOT_ENOUGH_CONTAINERS;
    public static HResults STATUS_LOG_CLIENT_ALREADY_REGISTERED;
    public static HResults STATUS_LOG_CLIENT_NOT_REGISTERED;
    public static HResults STATUS_LOG_FULL_HANDLER_IN_PROGRESS;
    public static HResults STATUS_LOG_CONTAINER_READ_FAILED;
    public static HResults STATUS_LOG_CONTAINER_WRITE_FAILED;
    public static HResults STATUS_LOG_CONTAINER_OPEN_FAILED;
    public static HResults STATUS_LOG_CONTAINER_STATE_INVALID;
    public static HResults STATUS_LOG_STATE_INVALID;
    public static HResults STATUS_LOG_PINNED;
    public static HResults STATUS_LOG_METADATA_FLUSH_FAILED;
    public static HResults STATUS_LOG_INCONSISTENT_SECURITY;
    public static HResults STATUS_LOG_APPENDED_FLUSH_FAILED;
    public static HResults STATUS_LOG_PINNED_RESERVATION;
    public static HResults STATUS_VIDEO_HUNG_DISPLAY_DRIVER_THREAD;
    public static HResults STATUS_VIDEO_HUNG_DISPLAY_DRIVER_THREAD_RECOVERED;
    public static HResults STATUS_VIDEO_DRIVER_DEBUG_REPORT_REQUEST;
    public static HResults STATUS_MONITOR_NO_DESCRIPTOR;
    public static HResults STATUS_MONITOR_UNKNOWN_DESCRIPTOR_FORMAT;
    public static HResults STATUS_MONITOR_INVALID_DESCRIPTOR_CHECKSUM;
    public static HResults STATUS_MONITOR_INVALID_STANDARD_TIMING_BLOCK;
    public static HResults STATUS_MONITOR_WMI_DATABLOCK_REGISTRATION_FAILED;
    public static HResults STATUS_MONITOR_INVALID_SERIAL_NUMBER_MONDSC_BLOCK;
    public static HResults STATUS_MONITOR_INVALID_USER_FRIENDLY_MONDSC_BLOCK;
    public static HResults STATUS_MONITOR_NO_MORE_DESCRIPTOR_DATA;
    public static HResults STATUS_MONITOR_INVALID_DETAILED_TIMING_BLOCK;
    public static HResults STATUS_MONITOR_INVALID_MANUFACTURE_DATE;
    public static HResults STATUS_GRAPHICS_NOT_EXCLUSIVE_MODE_OWNER;
    public static HResults STATUS_GRAPHICS_INSUFFICIENT_DMA_BUFFER;
    public static HResults STATUS_GRAPHICS_INVALID_DISPLAY_ADAPTER;
    public static HResults STATUS_GRAPHICS_ADAPTER_WAS_RESET;
    public static HResults STATUS_GRAPHICS_INVALID_DRIVER_MODEL;
    public static HResults STATUS_GRAPHICS_PRESENT_MODE_CHANGED;
    public static HResults STATUS_GRAPHICS_PRESENT_OCCLUDED;
    public static HResults STATUS_GRAPHICS_PRESENT_DENIED;
    public static HResults STATUS_GRAPHICS_CANNOTCOLORCONVERT;
    public static HResults STATUS_GRAPHICS_DRIVER_MISMATCH;
    public static HResults STATUS_GRAPHICS_PARTIAL_DATA_POPULATED;
    public static HResults STATUS_GRAPHICS_PRESENT_REDIRECTION_DISABLED;
    public static HResults STATUS_GRAPHICS_PRESENT_UNOCCLUDED;
    public static HResults STATUS_GRAPHICS_WINDOWDC_NOT_AVAILABLE;
    public static HResults STATUS_GRAPHICS_WINDOWLESS_PRESENT_DISABLED;
    public static HResults STATUS_GRAPHICS_NO_VIDEO_MEMORY;
    public static HResults STATUS_GRAPHICS_CANT_LOCK_MEMORY;
    public static HResults STATUS_GRAPHICS_ALLOCATION_BUSY;
    public static HResults STATUS_GRAPHICS_TOO_MANY_REFERENCES;
    public static HResults STATUS_GRAPHICS_TRY_AGAIN_LATER;
    public static HResults STATUS_GRAPHICS_TRY_AGAIN_NOW;
    public static HResults STATUS_GRAPHICS_ALLOCATION_INVALID;
    public static HResults STATUS_GRAPHICS_UNSWIZZLING_APERTURE_UNAVAILABLE;
    public static HResults STATUS_GRAPHICS_UNSWIZZLING_APERTURE_UNSUPPORTED;
    public static HResults STATUS_GRAPHICS_CANT_EVICT_PINNED_ALLOCATION;
    public static HResults STATUS_GRAPHICS_INVALID_ALLOCATION_USAGE;
    public static HResults STATUS_GRAPHICS_CANT_RENDER_LOCKED_ALLOCATION;
    public static HResults STATUS_GRAPHICS_ALLOCATION_CLOSED;
    public static HResults STATUS_GRAPHICS_INVALID_ALLOCATION_INSTANCE;
    public static HResults STATUS_GRAPHICS_INVALID_ALLOCATION_HANDLE;
    public static HResults STATUS_GRAPHICS_WRONG_ALLOCATION_DEVICE;
    public static HResults STATUS_GRAPHICS_ALLOCATION_CONTENT_LOST;
    public static HResults STATUS_GRAPHICS_GPU_EXCEPTION_ON_DEVICE;
    public static HResults STATUS_GRAPHICS_SKIP_ALLOCATION_PREPARATION;
    public static HResults STATUS_GRAPHICS_INVALID_VIDPN_TOPOLOGY;
    public static HResults STATUS_GRAPHICS_VIDPN_TOPOLOGY_NOT_SUPPORTED;
    public static HResults STATUS_GRAPHICS_VIDPN_TOPOLOGY_CURRENTLY_NOT_SUPPORTED;
    public static HResults STATUS_GRAPHICS_INVALID_VIDPN;
    public static HResults STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE;
    public static HResults STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET;
    public static HResults STATUS_GRAPHICS_VIDPN_MODALITY_NOT_SUPPORTED;
    public static HResults STATUS_GRAPHICS_MODE_NOT_PINNED;
    public static HResults STATUS_GRAPHICS_INVALID_VIDPN_SOURCEMODESET;
    public static HResults STATUS_GRAPHICS_INVALID_VIDPN_TARGETMODESET;
    public static HResults STATUS_GRAPHICS_INVALID_FREQUENCY;
    public static HResults STATUS_GRAPHICS_INVALID_ACTIVE_REGION;
    public static HResults STATUS_GRAPHICS_INVALID_TOTAL_REGION;
    public static HResults STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE_MODE;
    public static HResults STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET_MODE;
    public static HResults STATUS_GRAPHICS_PINNED_MODE_MUST_REMAIN_IN_SET;
    public static HResults STATUS_GRAPHICS_PATH_ALREADY_IN_TOPOLOGY;
    public static HResults STATUS_GRAPHICS_MODE_ALREADY_IN_MODESET;
    public static HResults STATUS_GRAPHICS_INVALID_VIDEOPRESENTSOURCESET;
    public static HResults STATUS_GRAPHICS_INVALID_VIDEOPRESENTTARGETSET;
    public static HResults STATUS_GRAPHICS_SOURCE_ALREADY_IN_SET;
    public static HResults STATUS_GRAPHICS_TARGET_ALREADY_IN_SET;
    public static HResults STATUS_GRAPHICS_INVALID_VIDPN_PRESENT_PATH;
    public static HResults STATUS_GRAPHICS_NO_RECOMMENDED_VIDPN_TOPOLOGY;
    public static HResults STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGESET;
    public static HResults STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE;
    public static HResults STATUS_GRAPHICS_FREQUENCYRANGE_NOT_IN_SET;
    public static HResults STATUS_GRAPHICS_NO_PREFERRED_MODE;
    public static HResults STATUS_GRAPHICS_FREQUENCYRANGE_ALREADY_IN_SET;
    public static HResults STATUS_GRAPHICS_STALE_MODESET;
    public static HResults STATUS_GRAPHICS_INVALID_MONITOR_SOURCEMODESET;
    public static HResults STATUS_GRAPHICS_INVALID_MONITOR_SOURCE_MODE;
    public static HResults STATUS_GRAPHICS_NO_RECOMMENDED_FUNCTIONAL_VIDPN;
    public static HResults STATUS_GRAPHICS_MODE_ID_MUST_BE_UNIQUE;
    public static HResults STATUS_GRAPHICS_EMPTY_ADAPTER_MONITOR_MODE_SUPPORT_INTERSECTION;
    public static HResults STATUS_GRAPHICS_VIDEO_PRESENT_TARGETS_LESS_THAN_SOURCES;
    public static HResults STATUS_GRAPHICS_PATH_NOT_IN_TOPOLOGY;
    public static HResults STATUS_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_SOURCE;
    public static HResults STATUS_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_TARGET;
    public static HResults STATUS_GRAPHICS_INVALID_MONITORDESCRIPTORSET;
    public static HResults STATUS_GRAPHICS_INVALID_MONITORDESCRIPTOR;
    public static HResults STATUS_GRAPHICS_MONITORDESCRIPTOR_NOT_IN_SET;
    public static HResults STATUS_GRAPHICS_MONITORDESCRIPTOR_ALREADY_IN_SET;
    public static HResults STATUS_GRAPHICS_MONITORDESCRIPTOR_ID_MUST_BE_UNIQUE;
    public static HResults STATUS_GRAPHICS_INVALID_VIDPN_TARGET_SUBSET_TYPE;
    public static HResults STATUS_GRAPHICS_RESOURCES_NOT_RELATED;
    public static HResults STATUS_GRAPHICS_SOURCE_ID_MUST_BE_UNIQUE;
    public static HResults STATUS_GRAPHICS_TARGET_ID_MUST_BE_UNIQUE;
    public static HResults STATUS_GRAPHICS_NO_AVAILABLE_VIDPN_TARGET;
    public static HResults STATUS_GRAPHICS_MONITOR_COULD_NOT_BE_ASSOCIATED_WITH_ADAPTER;
    public static HResults STATUS_GRAPHICS_NO_VIDPNMGR;
    public static HResults STATUS_GRAPHICS_NO_ACTIVE_VIDPN;
    public static HResults STATUS_GRAPHICS_STALE_VIDPN_TOPOLOGY;
    public static HResults STATUS_GRAPHICS_MONITOR_NOT_CONNECTED;
    public static HResults STATUS_GRAPHICS_SOURCE_NOT_IN_TOPOLOGY;
    public static HResults STATUS_GRAPHICS_INVALID_PRIMARYSURFACE_SIZE;
    public static HResults STATUS_GRAPHICS_INVALID_VISIBLEREGION_SIZE;
    public static HResults STATUS_GRAPHICS_INVALID_STRIDE;
    public static HResults STATUS_GRAPHICS_INVALID_PIXELFORMAT;
    public static HResults STATUS_GRAPHICS_INVALID_COLORBASIS;
    public static HResults STATUS_GRAPHICS_INVALID_PIXELVALUEACCESSMODE;
    public static HResults STATUS_GRAPHICS_TARGET_NOT_IN_TOPOLOGY;
    public static HResults STATUS_GRAPHICS_NO_DISPLAY_MODE_MANAGEMENT_SUPPORT;
    public static HResults STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE;
    public static HResults STATUS_GRAPHICS_CANT_ACCESS_ACTIVE_VIDPN;
    public static HResults STATUS_GRAPHICS_INVALID_PATH_IMPORTANCE_ORDINAL;
    public static HResults STATUS_GRAPHICS_INVALID_PATH_CONTENT_GEOMETRY_TRANSFORMATION;
    public static HResults STATUS_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_SUPPORTED;
    public static HResults STATUS_GRAPHICS_INVALID_GAMMA_RAMP;
    public static HResults STATUS_GRAPHICS_GAMMA_RAMP_NOT_SUPPORTED;
    public static HResults STATUS_GRAPHICS_MULTISAMPLING_NOT_SUPPORTED;
    public static HResults STATUS_GRAPHICS_MODE_NOT_IN_MODESET;
    public static HResults STATUS_GRAPHICS_DATASET_IS_EMPTY;
    public static HResults STATUS_GRAPHICS_NO_MORE_ELEMENTS_IN_DATASET;
    public static HResults STATUS_GRAPHICS_INVALID_VIDPN_TOPOLOGY_RECOMMENDATION_REASON;
    public static HResults STATUS_GRAPHICS_INVALID_PATH_CONTENT_TYPE;
    public static HResults STATUS_GRAPHICS_INVALID_COPYPROTECTION_TYPE;
    public static HResults STATUS_GRAPHICS_UNASSIGNED_MODESET_ALREADY_EXISTS;
    public static HResults STATUS_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_PINNED;
    public static HResults STATUS_GRAPHICS_INVALID_SCANLINE_ORDERING;
    public static HResults STATUS_GRAPHICS_TOPOLOGY_CHANGES_NOT_ALLOWED;
    public static HResults STATUS_GRAPHICS_NO_AVAILABLE_IMPORTANCE_ORDINALS;
    public static HResults STATUS_GRAPHICS_INCOMPATIBLE_PRIVATE_FORMAT;
    public static HResults STATUS_GRAPHICS_INVALID_MODE_PRUNING_ALGORITHM;
    public static HResults STATUS_GRAPHICS_INVALID_MONITOR_CAPABILITY_ORIGIN;
    public static HResults STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE_CONSTRAINT;
    public static HResults STATUS_GRAPHICS_MAX_NUM_PATHS_REACHED;
    public static HResults STATUS_GRAPHICS_CANCEL_VIDPN_TOPOLOGY_AUGMENTATION;
    public static HResults STATUS_GRAPHICS_INVALID_CLIENT_TYPE;
    public static HResults STATUS_GRAPHICS_CLIENTVIDPN_NOT_SET;
    public static HResults STATUS_GRAPHICS_SPECIFIED_CHILD_ALREADY_CONNECTED;
    public static HResults STATUS_GRAPHICS_CHILD_DESCRIPTOR_NOT_SUPPORTED;
    public static HResults STATUS_GRAPHICS_UNKNOWN_CHILD_STATUS;
    public static HResults STATUS_GRAPHICS_NOT_A_LINKED_ADAPTER;
    public static HResults STATUS_GRAPHICS_LEADLINK_NOT_ENUMERATED;
    public static HResults STATUS_GRAPHICS_CHAINLINKS_NOT_ENUMERATED;
    public static HResults STATUS_GRAPHICS_ADAPTER_CHAIN_NOT_READY;
    public static HResults STATUS_GRAPHICS_CHAINLINKS_NOT_STARTED;
    public static HResults STATUS_GRAPHICS_CHAINLINKS_NOT_POWERED_ON;
    public static HResults STATUS_GRAPHICS_INCONSISTENT_DEVICE_LINK_STATE;
    public static HResults STATUS_GRAPHICS_LEADLINK_START_DEFERRED;
    public static HResults STATUS_GRAPHICS_NOT_POST_DEVICE_DRIVER;
    public static HResults STATUS_GRAPHICS_POLLING_TOO_FREQUENTLY;
    public static HResults STATUS_GRAPHICS_START_DEFERRED;
    public static HResults STATUS_GRAPHICS_ADAPTER_ACCESS_NOT_EXCLUDED;
    public static HResults STATUS_GRAPHICS_DEPENDABLE_CHILD_STATUS;
    public static HResults STATUS_GRAPHICS_OPM_NOT_SUPPORTED;
    public static HResults STATUS_GRAPHICS_COPP_NOT_SUPPORTED;
    public static HResults STATUS_GRAPHICS_UAB_NOT_SUPPORTED;
    public static HResults STATUS_GRAPHICS_OPM_INVALID_ENCRYPTED_PARAMETERS;
    public static HResults STATUS_GRAPHICS_OPM_NO_PROTECTED_OUTPUTS_EXIST;
    public static HResults STATUS_GRAPHICS_OPM_INTERNAL_ERROR;
    public static HResults STATUS_GRAPHICS_OPM_INVALID_HANDLE;
    public static HResults STATUS_GRAPHICS_PVP_INVALID_CERTIFICATE_LENGTH;
    public static HResults STATUS_GRAPHICS_OPM_SPANNING_MODE_ENABLED;
    public static HResults STATUS_GRAPHICS_OPM_THEATER_MODE_ENABLED;
    public static HResults STATUS_GRAPHICS_PVP_HFS_FAILED;
    public static HResults STATUS_GRAPHICS_OPM_INVALID_SRM;
    public static HResults STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_HDCP;
    public static HResults STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_ACP;
    public static HResults STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_CGMSA;
    public static HResults STATUS_GRAPHICS_OPM_HDCP_SRM_NEVER_SET;
    public static HResults STATUS_GRAPHICS_OPM_RESOLUTION_TOO_HIGH;
    public static HResults STATUS_GRAPHICS_OPM_ALL_HDCP_HARDWARE_ALREADY_IN_USE;
    public static HResults STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_NO_LONGER_EXISTS;
    public static HResults STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_DOES_NOT_HAVE_COPP_SEMANTICS;
    public static HResults STATUS_GRAPHICS_OPM_INVALID_INFORMATION_REQUEST;
    public static HResults STATUS_GRAPHICS_OPM_DRIVER_INTERNAL_ERROR;
    public static HResults STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_DOES_NOT_HAVE_OPM_SEMANTICS;
    public static HResults STATUS_GRAPHICS_OPM_SIGNALING_NOT_SUPPORTED;
    public static HResults STATUS_GRAPHICS_OPM_INVALID_CONFIGURATION_REQUEST;
    public static HResults STATUS_GRAPHICS_I2C_NOT_SUPPORTED;
    public static HResults STATUS_GRAPHICS_I2C_DEVICE_DOES_NOT_EXIST;
    public static HResults STATUS_GRAPHICS_I2C_ERROR_TRANSMITTING_DATA;
    public static HResults STATUS_GRAPHICS_I2C_ERROR_RECEIVING_DATA;
    public static HResults STATUS_GRAPHICS_DDCCI_VCP_NOT_SUPPORTED;
    public static HResults STATUS_GRAPHICS_DDCCI_INVALID_DATA;
    public static HResults STATUS_GRAPHICS_DDCCI_MONITOR_RETURNED_INVALID_TIMING_STATUS_BYTE;
    public static HResults STATUS_GRAPHICS_DDCCI_INVALID_CAPABILITIES_STRING;
    public static HResults STATUS_GRAPHICS_MCA_INTERNAL_ERROR;
    public static HResults STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_COMMAND;
    public static HResults STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_LENGTH;
    public static HResults STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_CHECKSUM;
    public static HResults STATUS_GRAPHICS_INVALID_PHYSICAL_MONITOR_HANDLE;
    public static HResults STATUS_GRAPHICS_MONITOR_NO_LONGER_EXISTS;
    public static HResults STATUS_GRAPHICS_ONLY_CONSOLE_SESSION_SUPPORTED;
    public static HResults STATUS_GRAPHICS_NO_DISPLAY_DEVICE_CORRESPONDS_TO_NAME;
    public static HResults STATUS_GRAPHICS_DISPLAY_DEVICE_NOT_ATTACHED_TO_DESKTOP;
    public static HResults STATUS_GRAPHICS_MIRRORING_DEVICES_NOT_SUPPORTED;
    public static HResults STATUS_GRAPHICS_INVALID_POINTER;
    public static HResults STATUS_GRAPHICS_NO_MONITORS_CORRESPOND_TO_DISPLAY_DEVICE;
    public static HResults STATUS_GRAPHICS_PARAMETER_ARRAY_TOO_SMALL;
    public static HResults STATUS_GRAPHICS_INTERNAL_ERROR;
    public static HResults STATUS_GRAPHICS_SESSION_TYPE_CHANGE_IN_PROGRESS;
    public static HResults STATUS_FVE_LOCKED_VOLUME;
    public static HResults STATUS_FVE_NOT_ENCRYPTED;
    public static HResults STATUS_FVE_BAD_INFORMATION;
    public static HResults STATUS_FVE_TOO_SMALL;
    public static HResults STATUS_FVE_FAILED_WRONG_FS;
    public static HResults STATUS_FVE_BAD_PARTITION_SIZE;
    public static HResults STATUS_FVE_FS_NOT_EXTENDED;
    public static HResults STATUS_FVE_FS_MOUNTED;
    public static HResults STATUS_FVE_NO_LICENSE;
    public static HResults STATUS_FVE_ACTION_NOT_ALLOWED;
    public static HResults STATUS_FVE_BAD_DATA;
    public static HResults STATUS_FVE_VOLUME_NOT_BOUND;
    public static HResults STATUS_FVE_NOT_DATA_VOLUME;
    public static HResults STATUS_FVE_CONV_READ_ERROR;
    public static HResults STATUS_FVE_CONV_WRITE_ERROR;
    public static HResults STATUS_FVE_OVERLAPPED_UPDATE;
    public static HResults STATUS_FVE_FAILED_SECTOR_SIZE;
    public static HResults STATUS_FVE_FAILED_AUTHENTICATION;
    public static HResults STATUS_FVE_NOT_OS_VOLUME;
    public static HResults STATUS_FVE_KEYFILE_NOT_FOUND;
    public static HResults STATUS_FVE_KEYFILE_INVALID;
    public static HResults STATUS_FVE_KEYFILE_NO_VMK;
    public static HResults STATUS_FVE_TPM_DISABLED;
    public static HResults STATUS_FVE_TPM_SRK_AUTH_NOT_ZERO;
    public static HResults STATUS_FVE_TPM_INVALID_PCR;
    public static HResults STATUS_FVE_TPM_NO_VMK;
    public static HResults STATUS_FVE_PIN_INVALID;
    public static HResults STATUS_FVE_AUTH_INVALID_APPLICATION;
    public static HResults STATUS_FVE_AUTH_INVALID_CONFIG;
    public static HResults STATUS_FVE_DEBUGGER_ENABLED;
    public static HResults STATUS_FVE_DRY_RUN_FAILED;
    public static HResults STATUS_FVE_BAD_METADATA_POINTER;
    public static HResults STATUS_FVE_OLD_METADATA_COPY;
    public static HResults STATUS_FVE_REBOOT_REQUIRED;
    public static HResults STATUS_FVE_RAW_ACCESS;
    public static HResults STATUS_FVE_RAW_BLOCKED;
    public static HResults STATUS_FVE_NO_AUTOUNLOCK_MASTER_KEY;
    public static HResults STATUS_FVE_MOR_FAILED;
    public static HResults STATUS_FVE_NO_FEATURE_LICENSE;
    public static HResults STATUS_FVE_POLICY_USER_DISABLE_RDV_NOT_ALLOWED;
    public static HResults STATUS_FVE_CONV_RECOVERY_FAILED;
    public static HResults STATUS_FVE_VIRTUALIZED_SPACE_TOO_BIG;
    public static HResults STATUS_FVE_INVALID_DATUM_TYPE;
    public static HResults STATUS_FVE_VOLUME_TOO_SMALL;
    public static HResults STATUS_FVE_ENH_PIN_INVALID;
    public static HResults STATUS_FVE_FULL_ENCRYPTION_NOT_ALLOWED_ON_TP_STORAGE;
    public static HResults STATUS_FVE_WIPE_NOT_ALLOWED_ON_TP_STORAGE;
    public static HResults STATUS_FVE_NOT_ALLOWED_ON_CSV_STACK;
    public static HResults STATUS_FVE_NOT_ALLOWED_ON_CLUSTER;
    public static HResults STATUS_FVE_NOT_ALLOWED_TO_UPGRADE_WHILE_CONVERTING;
    public static HResults STATUS_FVE_WIPE_CANCEL_NOT_APPLICABLE;
    public static HResults STATUS_FVE_EDRIVE_DRY_RUN_FAILED;
    public static HResults STATUS_FVE_SECUREBOOT_DISABLED;
    public static HResults STATUS_FVE_SECUREBOOT_CONFIG_CHANGE;
    public static HResults STATUS_FVE_DEVICE_LOCKEDOUT;
    public static HResults STATUS_FVE_VOLUME_EXTEND_PREVENTS_EOW_DECRYPT;
    public static HResults STATUS_FVE_NOT_DE_VOLUME;
    public static HResults STATUS_FVE_PROTECTION_DISABLED;
    public static HResults STATUS_FVE_PROTECTION_CANNOT_BE_DISABLED;
    public static HResults STATUS_FVE_OSV_KSR_NOT_ALLOWED;
    public static HResults STATUS_FWP_CALLOUT_NOT_FOUND;
    public static HResults STATUS_FWP_CONDITION_NOT_FOUND;
    public static HResults STATUS_FWP_FILTER_NOT_FOUND;
    public static HResults STATUS_FWP_LAYER_NOT_FOUND;
    public static HResults STATUS_FWP_PROVIDER_NOT_FOUND;
    public static HResults STATUS_FWP_PROVIDER_CONTEXT_NOT_FOUND;
    public static HResults STATUS_FWP_SUBLAYER_NOT_FOUND;
    public static HResults STATUS_FWP_NOT_FOUND;
    public static HResults STATUS_FWP_ALREADY_EXISTS;
    public static HResults STATUS_FWP_IN_USE;
    public static HResults STATUS_FWP_DYNAMIC_SESSION_IN_PROGRESS;
    public static HResults STATUS_FWP_WRONG_SESSION;
    public static HResults STATUS_FWP_NO_TXN_IN_PROGRESS;
    public static HResults STATUS_FWP_TXN_IN_PROGRESS;
    public static HResults STATUS_FWP_TXN_ABORTED;
    public static HResults STATUS_FWP_SESSION_ABORTED;
    public static HResults STATUS_FWP_INCOMPATIBLE_TXN;
    public static HResults STATUS_FWP_TIMEOUT;
    public static HResults STATUS_FWP_NET_EVENTS_DISABLED;
    public static HResults STATUS_FWP_INCOMPATIBLE_LAYER;
    public static HResults STATUS_FWP_KM_CLIENTS_ONLY;
    public static HResults STATUS_FWP_LIFETIME_MISMATCH;
    public static HResults STATUS_FWP_BUILTIN_OBJECT;
    public static HResults STATUS_FWP_TOO_MANY_CALLOUTS;
    public static HResults STATUS_FWP_NOTIFICATION_DROPPED;
    public static HResults STATUS_FWP_TRAFFIC_MISMATCH;
    public static HResults STATUS_FWP_INCOMPATIBLE_SA_STATE;
    public static HResults STATUS_FWP_NULL_POINTER;
    public static HResults STATUS_FWP_INVALID_ENUMERATOR;
    public static HResults STATUS_FWP_INVALID_FLAGS;
    public static HResults STATUS_FWP_INVALID_NET_MASK;
    public static HResults STATUS_FWP_INVALID_RANGE;
    public static HResults STATUS_FWP_INVALID_INTERVAL;
    public static HResults STATUS_FWP_ZERO_LENGTH_ARRAY;
    public static HResults STATUS_FWP_NULL_DISPLAY_NAME;
    public static HResults STATUS_FWP_INVALID_ACTION_TYPE;
    public static HResults STATUS_FWP_INVALID_WEIGHT;
    public static HResults STATUS_FWP_MATCH_TYPE_MISMATCH;
    public static HResults STATUS_FWP_TYPE_MISMATCH;
    public static HResults STATUS_FWP_OUT_OF_BOUNDS;
    public static HResults STATUS_FWP_RESERVED;
    public static HResults STATUS_FWP_DUPLICATE_CONDITION;
    public static HResults STATUS_FWP_DUPLICATE_KEYMOD;
    public static HResults STATUS_FWP_ACTION_INCOMPATIBLE_WITH_LAYER;
    public static HResults STATUS_FWP_ACTION_INCOMPATIBLE_WITH_SUBLAYER;
    public static HResults STATUS_FWP_CONTEXT_INCOMPATIBLE_WITH_LAYER;
    public static HResults STATUS_FWP_CONTEXT_INCOMPATIBLE_WITH_CALLOUT;
    public static HResults STATUS_FWP_INCOMPATIBLE_AUTH_METHOD;
    public static HResults STATUS_FWP_INCOMPATIBLE_DH_GROUP;
    public static HResults STATUS_FWP_EM_NOT_SUPPORTED;
    public static HResults STATUS_FWP_NEVER_MATCH;
    public static HResults STATUS_FWP_PROVIDER_CONTEXT_MISMATCH;
    public static HResults STATUS_FWP_INVALID_PARAMETER;
    public static HResults STATUS_FWP_TOO_MANY_SUBLAYERS;
    public static HResults STATUS_FWP_CALLOUT_NOTIFICATION_FAILED;
    public static HResults STATUS_FWP_INVALID_AUTH_TRANSFORM;
    public static HResults STATUS_FWP_INVALID_CIPHER_TRANSFORM;
    public static HResults STATUS_FWP_INCOMPATIBLE_CIPHER_TRANSFORM;
    public static HResults STATUS_FWP_INVALID_TRANSFORM_COMBINATION;
    public static HResults STATUS_FWP_DUPLICATE_AUTH_METHOD;
    public static HResults STATUS_FWP_INVALID_TUNNEL_ENDPOINT;
    public static HResults STATUS_FWP_L2_DRIVER_NOT_READY;
    public static HResults STATUS_FWP_KEY_DICTATOR_ALREADY_REGISTERED;
    public static HResults STATUS_FWP_KEY_DICTATION_INVALID_KEYING_MATERIAL;
    public static HResults STATUS_FWP_CONNECTIONS_DISABLED;
    public static HResults STATUS_FWP_INVALID_DNS_NAME;
    public static HResults STATUS_FWP_STILL_ON;
    public static HResults STATUS_FWP_IKEEXT_NOT_RUNNING;
    public static HResults STATUS_FWP_TCPIP_NOT_READY;
    public static HResults STATUS_FWP_INJECT_HANDLE_CLOSING;
    public static HResults STATUS_FWP_INJECT_HANDLE_STALE;
    public static HResults STATUS_FWP_CANNOT_PEND;
    public static HResults STATUS_FWP_DROP_NOICMP;
    public static HResults STATUS_NDIS_CLOSING;
    public static HResults STATUS_NDIS_BAD_VERSION;
    public static HResults STATUS_NDIS_BAD_CHARACTERISTICS;
    public static HResults STATUS_NDIS_ADAPTER_NOT_FOUND;
    public static HResults STATUS_NDIS_OPEN_FAILED;
    public static HResults STATUS_NDIS_DEVICE_FAILED;
    public static HResults STATUS_NDIS_MULTICAST_FULL;
    public static HResults STATUS_NDIS_MULTICAST_EXISTS;
    public static HResults STATUS_NDIS_MULTICAST_NOT_FOUND;
    public static HResults STATUS_NDIS_REQUEST_ABORTED;
    public static HResults STATUS_NDIS_RESET_IN_PROGRESS;
    public static HResults STATUS_NDIS_NOT_SUPPORTED;
    public static HResults STATUS_NDIS_INVALID_PACKET;
    public static HResults STATUS_NDIS_ADAPTER_NOT_READY;
    public static HResults STATUS_NDIS_INVALID_LENGTH;
    public static HResults STATUS_NDIS_INVALID_DATA;
    public static HResults STATUS_NDIS_BUFFER_TOO_SHORT;
    public static HResults STATUS_NDIS_INVALID_OID;
    public static HResults STATUS_NDIS_ADAPTER_REMOVED;
    public static HResults STATUS_NDIS_UNSUPPORTED_MEDIA;
    public static HResults STATUS_NDIS_GROUP_ADDRESS_IN_USE;
    public static HResults STATUS_NDIS_FILE_NOT_FOUND;
    public static HResults STATUS_NDIS_ERROR_READING_FILE;
    public static HResults STATUS_NDIS_ALREADY_MAPPED;
    public static HResults STATUS_NDIS_RESOURCE_CONFLICT;
    public static HResults STATUS_NDIS_MEDIA_DISCONNECTED;
    public static HResults STATUS_NDIS_INVALID_ADDRESS;
    public static HResults STATUS_NDIS_INVALID_DEVICE_REQUEST;
    public static HResults STATUS_NDIS_PAUSED;
    public static HResults STATUS_NDIS_INTERFACE_NOT_FOUND;
    public static HResults STATUS_NDIS_UNSUPPORTED_REVISION;
    public static HResults STATUS_NDIS_INVALID_PORT;
    public static HResults STATUS_NDIS_INVALID_PORT_STATE;
    public static HResults STATUS_NDIS_LOW_POWER_STATE;
    public static HResults STATUS_NDIS_REINIT_REQUIRED;
    public static HResults STATUS_NDIS_DOT11_AUTO_CONFIG_ENABLED;
    public static HResults STATUS_NDIS_DOT11_MEDIA_IN_USE;
    public static HResults STATUS_NDIS_DOT11_POWER_STATE_INVALID;
    public static HResults STATUS_NDIS_PM_WOL_PATTERN_LIST_FULL;
    public static HResults STATUS_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL;
    public static HResults STATUS_NDIS_DOT11_AP_CHANNEL_CURRENTLY_NOT_AVAILABLE;
    public static HResults STATUS_NDIS_DOT11_AP_BAND_CURRENTLY_NOT_AVAILABLE;
    public static HResults STATUS_NDIS_DOT11_AP_CHANNEL_NOT_ALLOWED;
    public static HResults STATUS_NDIS_DOT11_AP_BAND_NOT_ALLOWED;
    public static HResults STATUS_NDIS_INDICATION_REQUIRED;
    public static HResults STATUS_NDIS_OFFLOAD_POLICY;
    public static HResults STATUS_NDIS_OFFLOAD_CONNECTION_REJECTED;
    public static HResults STATUS_NDIS_OFFLOAD_PATH_REJECTED;
    public static HResults STATUS_TPM_ERROR_MASK;
    public static HResults STATUS_TPM_AUTHFAIL;
    public static HResults STATUS_TPM_BADINDEX;
    public static HResults STATUS_TPM_BAD_PARAMETER;
    public static HResults STATUS_TPM_AUDITFAILURE;
    public static HResults STATUS_TPM_CLEAR_DISABLED;
    public static HResults STATUS_TPM_DEACTIVATED;
    public static HResults STATUS_TPM_DISABLED;
    public static HResults STATUS_TPM_DISABLED_CMD;
    public static HResults STATUS_TPM_FAIL;
    public static HResults STATUS_TPM_BAD_ORDINAL;
    public static HResults STATUS_TPM_INSTALL_DISABLED;
    public static HResults STATUS_TPM_INVALID_KEYHANDLE;
    public static HResults STATUS_TPM_KEYNOTFOUND;
    public static HResults STATUS_TPM_INAPPROPRIATE_ENC;
    public static HResults STATUS_TPM_MIGRATEFAIL;
    public static HResults STATUS_TPM_INVALID_PCR_INFO;
    public static HResults STATUS_TPM_NOSPACE;
    public static HResults STATUS_TPM_NOSRK;
    public static HResults STATUS_TPM_NOTSEALED_BLOB;
    public static HResults STATUS_TPM_OWNER_SET;
    public static HResults STATUS_TPM_RESOURCES;
    public static HResults STATUS_TPM_SHORTRANDOM;
    public static HResults STATUS_TPM_SIZE;
    public static HResults STATUS_TPM_WRONGPCRVAL;
    public static HResults STATUS_TPM_BAD_PARAM_SIZE;
    public static HResults STATUS_TPM_SHA_THREAD;
    public static HResults STATUS_TPM_SHA_ERROR;
    public static HResults STATUS_TPM_FAILEDSELFTEST;
    public static HResults STATUS_TPM_AUTH2FAIL;
    public static HResults STATUS_TPM_BADTAG;
    public static HResults STATUS_TPM_IOERROR;
    public static HResults STATUS_TPM_ENCRYPT_ERROR;
    public static HResults STATUS_TPM_DECRYPT_ERROR;
    public static HResults STATUS_TPM_INVALID_AUTHHANDLE;
    public static HResults STATUS_TPM_NO_ENDORSEMENT;
    public static HResults STATUS_TPM_INVALID_KEYUSAGE;
    public static HResults STATUS_TPM_WRONG_ENTITYTYPE;
    public static HResults STATUS_TPM_INVALID_POSTINIT;
    public static HResults STATUS_TPM_INAPPROPRIATE_SIG;
    public static HResults STATUS_TPM_BAD_KEY_PROPERTY;
    public static HResults STATUS_TPM_BAD_MIGRATION;
    public static HResults STATUS_TPM_BAD_SCHEME;
    public static HResults STATUS_TPM_BAD_DATASIZE;
    public static HResults STATUS_TPM_BAD_MODE;
    public static HResults STATUS_TPM_BAD_PRESENCE;
    public static HResults STATUS_TPM_BAD_VERSION;
    public static HResults STATUS_TPM_NO_WRAP_TRANSPORT;
    public static HResults STATUS_TPM_AUDITFAIL_UNSUCCESSFUL;
    public static HResults STATUS_TPM_AUDITFAIL_SUCCESSFUL;
    public static HResults STATUS_TPM_NOTRESETABLE;
    public static HResults STATUS_TPM_NOTLOCAL;
    public static HResults STATUS_TPM_BAD_TYPE;
    public static HResults STATUS_TPM_INVALID_RESOURCE;
    public static HResults STATUS_TPM_NOTFIPS;
    public static HResults STATUS_TPM_INVALID_FAMILY;
    public static HResults STATUS_TPM_NO_NV_PERMISSION;
    public static HResults STATUS_TPM_REQUIRES_SIGN;
    public static HResults STATUS_TPM_KEY_NOTSUPPORTED;
    public static HResults STATUS_TPM_AUTH_CONFLICT;
    public static HResults STATUS_TPM_AREA_LOCKED;
    public static HResults STATUS_TPM_BAD_LOCALITY;
    public static HResults STATUS_TPM_READ_ONLY;
    public static HResults STATUS_TPM_PER_NOWRITE;
    public static HResults STATUS_TPM_FAMILYCOUNT;
    public static HResults STATUS_TPM_WRITE_LOCKED;
    public static HResults STATUS_TPM_BAD_ATTRIBUTES;
    public static HResults STATUS_TPM_INVALID_STRUCTURE;
    public static HResults STATUS_TPM_KEY_OWNER_CONTROL;
    public static HResults STATUS_TPM_BAD_COUNTER;
    public static HResults STATUS_TPM_NOT_FULLWRITE;
    public static HResults STATUS_TPM_CONTEXT_GAP;
    public static HResults STATUS_TPM_MAXNVWRITES;
    public static HResults STATUS_TPM_NOOPERATOR;
    public static HResults STATUS_TPM_RESOURCEMISSING;
    public static HResults STATUS_TPM_DELEGATE_LOCK;
    public static HResults STATUS_TPM_DELEGATE_FAMILY;
    public static HResults STATUS_TPM_DELEGATE_ADMIN;
    public static HResults STATUS_TPM_TRANSPORT_NOTEXCLUSIVE;
    public static HResults STATUS_TPM_OWNER_CONTROL;
    public static HResults STATUS_TPM_DAA_RESOURCES;
    public static HResults STATUS_TPM_DAA_INPUT_DATA0;
    public static HResults STATUS_TPM_DAA_INPUT_DATA1;
    public static HResults STATUS_TPM_DAA_ISSUER_SETTINGS;
    public static HResults STATUS_TPM_DAA_TPM_SETTINGS;
    public static HResults STATUS_TPM_DAA_STAGE;
    public static HResults STATUS_TPM_DAA_ISSUER_VALIDITY;
    public static HResults STATUS_TPM_DAA_WRONG_W;
    public static HResults STATUS_TPM_BAD_HANDLE;
    public static HResults STATUS_TPM_BAD_DELEGATE;
    public static HResults STATUS_TPM_BADCONTEXT;
    public static HResults STATUS_TPM_TOOMANYCONTEXTS;
    public static HResults STATUS_TPM_MA_TICKET_SIGNATURE;
    public static HResults STATUS_TPM_MA_DESTINATION;
    public static HResults STATUS_TPM_MA_SOURCE;
    public static HResults STATUS_TPM_MA_AUTHORITY;
    public static HResults STATUS_TPM_PERMANENTEK;
    public static HResults STATUS_TPM_BAD_SIGNATURE;
    public static HResults STATUS_TPM_NOCONTEXTSPACE;
    public static HResults STATUS_TPM_COMMAND_BLOCKED;
    public static HResults STATUS_TPM_INVALID_HANDLE;
    public static HResults STATUS_TPM_DUPLICATE_VHANDLE;
    public static HResults STATUS_TPM_EMBEDDED_COMMAND_BLOCKED;
    public static HResults STATUS_TPM_EMBEDDED_COMMAND_UNSUPPORTED;
    public static HResults STATUS_TPM_RETRY;
    public static HResults STATUS_TPM_NEEDS_SELFTEST;
    public static HResults STATUS_TPM_DOING_SELFTEST;
    public static HResults STATUS_TPM_DEFEND_LOCK_RUNNING;
    public static HResults STATUS_TPM_COMMAND_CANCELED;
    public static HResults STATUS_TPM_TOO_MANY_CONTEXTS;
    public static HResults STATUS_TPM_NOT_FOUND;
    public static HResults STATUS_TPM_ACCESS_DENIED;
    public static HResults STATUS_TPM_INSUFFICIENT_BUFFER;
    public static HResults STATUS_TPM_PPI_FUNCTION_UNSUPPORTED;
    public static HResults STATUS_PCP_ERROR_MASK;
    public static HResults STATUS_PCP_DEVICE_NOT_READY;
    public static HResults STATUS_PCP_INVALID_HANDLE;
    public static HResults STATUS_PCP_INVALID_PARAMETER;
    public static HResults STATUS_PCP_FLAG_NOT_SUPPORTED;
    public static HResults STATUS_PCP_NOT_SUPPORTED;
    public static HResults STATUS_PCP_BUFFER_TOO_SMALL;
    public static HResults STATUS_PCP_INTERNAL_ERROR;
    public static HResults STATUS_PCP_AUTHENTICATION_FAILED;
    public static HResults STATUS_PCP_AUTHENTICATION_IGNORED;
    public static HResults STATUS_PCP_POLICY_NOT_FOUND;
    public static HResults STATUS_PCP_PROFILE_NOT_FOUND;
    public static HResults STATUS_PCP_VALIDATION_FAILED;
    public static HResults STATUS_PCP_DEVICE_NOT_FOUND;
    public static HResults STATUS_PCP_WRONG_PARENT;
    public static HResults STATUS_PCP_KEY_NOT_LOADED;
    public static HResults STATUS_PCP_NO_KEY_CERTIFICATION;
    public static HResults STATUS_PCP_KEY_NOT_FINALIZED;
    public static HResults STATUS_PCP_ATTESTATION_CHALLENGE_NOT_SET;
    public static HResults STATUS_PCP_NOT_PCR_BOUND;
    public static HResults STATUS_PCP_KEY_ALREADY_FINALIZED;
    public static HResults STATUS_PCP_KEY_USAGE_POLICY_NOT_SUPPORTED;
    public static HResults STATUS_PCP_KEY_USAGE_POLICY_INVALID;
    public static HResults STATUS_PCP_SOFT_KEY_ERROR;
    public static HResults STATUS_PCP_KEY_NOT_AUTHENTICATED;
    public static HResults STATUS_PCP_KEY_NOT_AIK;
    public static HResults STATUS_PCP_KEY_NOT_SIGNING_KEY;
    public static HResults STATUS_PCP_LOCKED_OUT;
    public static HResults STATUS_PCP_CLAIM_TYPE_NOT_SUPPORTED;
    public static HResults STATUS_PCP_TPM_VERSION_NOT_SUPPORTED;
    public static HResults STATUS_PCP_BUFFER_LENGTH_MISMATCH;
    public static HResults STATUS_PCP_IFX_RSA_KEY_CREATION_BLOCKED;
    public static HResults STATUS_PCP_TICKET_MISSING;
    public static HResults STATUS_PCP_RAW_POLICY_NOT_SUPPORTED;
    public static HResults STATUS_RTPM_CONTEXT_CONTINUE;
    public static HResults STATUS_RTPM_CONTEXT_COMPLETE;
    public static HResults STATUS_RTPM_NO_RESULT;
    public static HResults STATUS_RTPM_PCR_READ_INCOMPLETE;
    public static HResults STATUS_RTPM_INVALID_CONTEXT;
    public static HResults STATUS_RTPM_UNSUPPORTED_CMD;
    public static HResults STATUS_TPM_ZERO_EXHAUST_ENABLED;
    public static HResults STATUS_HV_INVALID_HYPERCALL_CODE;
    public static HResults STATUS_HV_INVALID_HYPERCALL_INPUT;
    public static HResults STATUS_HV_INVALID_ALIGNMENT;
    public static HResults STATUS_HV_INVALID_PARAMETER;
    public static HResults STATUS_HV_ACCESS_DENIED;
    public static HResults STATUS_HV_INVALID_PARTITION_STATE;
    public static HResults STATUS_HV_OPERATION_DENIED;
    public static HResults STATUS_HV_UNKNOWN_PROPERTY;
    public static HResults STATUS_HV_PROPERTY_VALUE_OUT_OF_RANGE;
    public static HResults STATUS_HV_INSUFFICIENT_MEMORY;
    public static HResults STATUS_HV_PARTITION_TOO_DEEP;
    public static HResults STATUS_HV_INVALID_PARTITION_ID;
    public static HResults STATUS_HV_INVALID_VP_INDEX;
    public static HResults STATUS_HV_INVALID_PORT_ID;
    public static HResults STATUS_HV_INVALID_CONNECTION_ID;
    public static HResults STATUS_HV_INSUFFICIENT_BUFFERS;
    public static HResults STATUS_HV_NOT_ACKNOWLEDGED;
    public static HResults STATUS_HV_INVALID_VP_STATE;
    public static HResults STATUS_HV_ACKNOWLEDGED;
    public static HResults STATUS_HV_INVALID_SAVE_RESTORE_STATE;
    public static HResults STATUS_HV_INVALID_SYNIC_STATE;
    public static HResults STATUS_HV_OBJECT_IN_USE;
    public static HResults STATUS_HV_INVALID_PROXIMITY_DOMAIN_INFO;
    public static HResults STATUS_HV_NO_DATA;
    public static HResults STATUS_HV_INACTIVE;
    public static HResults STATUS_HV_NO_RESOURCES;
    public static HResults STATUS_HV_FEATURE_UNAVAILABLE;
    public static HResults STATUS_HV_INSUFFICIENT_BUFFER;
    public static HResults STATUS_HV_INSUFFICIENT_DEVICE_DOMAINS;
    public static HResults STATUS_HV_CPUID_FEATURE_VALIDATION_ERROR;
    public static HResults STATUS_HV_CPUID_XSAVE_FEATURE_VALIDATION_ERROR;
    public static HResults STATUS_HV_PROCESSOR_STARTUP_TIMEOUT;
    public static HResults STATUS_HV_SMX_ENABLED;
    public static HResults STATUS_HV_INVALID_LP_INDEX;
    public static HResults STATUS_HV_INVALID_REGISTER_VALUE;
    public static HResults STATUS_HV_INVALID_VTL_STATE;
    public static HResults STATUS_HV_NX_NOT_DETECTED;
    public static HResults STATUS_HV_INVALID_DEVICE_ID;
    public static HResults STATUS_HV_INVALID_DEVICE_STATE;
    public static HResults STATUS_HV_PENDING_PAGE_REQUESTS;
    public static HResults STATUS_HV_PAGE_REQUEST_INVALID;
    public static HResults STATUS_HV_INVALID_CPU_GROUP_ID;
    public static HResults STATUS_HV_INVALID_CPU_GROUP_STATE;
    public static HResults STATUS_HV_OPERATION_FAILED;
    public static HResults STATUS_HV_NOT_ALLOWED_WITH_NESTED_VIRT_ACTIVE;
    public static HResults STATUS_HV_NOT_PRESENT;
    public static HResults STATUS_VID_DUPLICATE_HANDLER;
    public static HResults STATUS_VID_TOO_MANY_HANDLERS;
    public static HResults STATUS_VID_QUEUE_FULL;
    public static HResults STATUS_VID_HANDLER_NOT_PRESENT;
    public static HResults STATUS_VID_INVALID_OBJECT_NAME;
    public static HResults STATUS_VID_PARTITION_NAME_TOO_LONG;
    public static HResults STATUS_VID_MESSAGE_QUEUE_NAME_TOO_LONG;
    public static HResults STATUS_VID_PARTITION_ALREADY_EXISTS;
    public static HResults STATUS_VID_PARTITION_DOES_NOT_EXIST;
    public static HResults STATUS_VID_PARTITION_NAME_NOT_FOUND;
    public static HResults STATUS_VID_MESSAGE_QUEUE_ALREADY_EXISTS;
    public static HResults STATUS_VID_EXCEEDED_MBP_ENTRY_MAP_LIMIT;
    public static HResults STATUS_VID_MB_STILL_REFERENCED;
    public static HResults STATUS_VID_CHILD_GPA_PAGE_SET_CORRUPTED;
    public static HResults STATUS_VID_INVALID_NUMA_SETTINGS;
    public static HResults STATUS_VID_INVALID_NUMA_NODE_INDEX;
    public static HResults STATUS_VID_NOTIFICATION_QUEUE_ALREADY_ASSOCIATED;
    public static HResults STATUS_VID_INVALID_MEMORY_BLOCK_HANDLE;
    public static HResults STATUS_VID_PAGE_RANGE_OVERFLOW;
    public static HResults STATUS_VID_INVALID_MESSAGE_QUEUE_HANDLE;
    public static HResults STATUS_VID_INVALID_GPA_RANGE_HANDLE;
    public static HResults STATUS_VID_NO_MEMORY_BLOCK_NOTIFICATION_QUEUE;
    public static HResults STATUS_VID_MEMORY_BLOCK_LOCK_COUNT_EXCEEDED;
    public static HResults STATUS_VID_INVALID_PPM_HANDLE;
    public static HResults STATUS_VID_MBPS_ARE_LOCKED;
    public static HResults STATUS_VID_MESSAGE_QUEUE_CLOSED;
    public static HResults STATUS_VID_VIRTUAL_PROCESSOR_LIMIT_EXCEEDED;
    public static HResults STATUS_VID_STOP_PENDING;
    public static HResults STATUS_VID_INVALID_PROCESSOR_STATE;
    public static HResults STATUS_VID_EXCEEDED_KM_CONTEXT_COUNT_LIMIT;
    public static HResults STATUS_VID_KM_INTERFACE_ALREADY_INITIALIZED;
    public static HResults STATUS_VID_MB_PROPERTY_ALREADY_SET_RESET;
    public static HResults STATUS_VID_MMIO_RANGE_DESTROYED;
    public static HResults STATUS_VID_INVALID_CHILD_GPA_PAGE_SET;
    public static HResults STATUS_VID_RESERVE_PAGE_SET_IS_BEING_USED;
    public static HResults STATUS_VID_RESERVE_PAGE_SET_TOO_SMALL;
    public static HResults STATUS_VID_MBP_ALREADY_LOCKED_USING_RESERVED_PAGE;
    public static HResults STATUS_VID_MBP_COUNT_EXCEEDED_LIMIT;
    public static HResults STATUS_VID_SAVED_STATE_CORRUPT;
    public static HResults STATUS_VID_SAVED_STATE_UNRECOGNIZED_ITEM;
    public static HResults STATUS_VID_SAVED_STATE_INCOMPATIBLE;
    public static HResults STATUS_VID_VTL_ACCESS_DENIED;
    public static HResults STATUS_VID_REMOTE_NODE_PARENT_GPA_PAGES_USED;
    public static HResults STATUS_IPSEC_BAD_SPI;
    public static HResults STATUS_IPSEC_SA_LIFETIME_EXPIRED;
    public static HResults STATUS_IPSEC_WRONG_SA;
    public static HResults STATUS_IPSEC_REPLAY_CHECK_FAILED;
    public static HResults STATUS_IPSEC_INVALID_PACKET;
    public static HResults STATUS_IPSEC_INTEGRITY_CHECK_FAILED;
    public static HResults STATUS_IPSEC_CLEAR_TEXT_DROP;
    public static HResults STATUS_IPSEC_AUTH_FIREWALL_DROP;
    public static HResults STATUS_IPSEC_THROTTLE_DROP;
    public static HResults STATUS_IPSEC_DOSP_BLOCK;
    public static HResults STATUS_IPSEC_DOSP_RECEIVED_MULTICAST;
    public static HResults STATUS_IPSEC_DOSP_INVALID_PACKET;
    public static HResults STATUS_IPSEC_DOSP_STATE_LOOKUP_FAILED;
    public static HResults STATUS_IPSEC_DOSP_MAX_ENTRIES;
    public static HResults STATUS_IPSEC_DOSP_KEYMOD_NOT_ALLOWED;
    public static HResults STATUS_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES;
    public static HResults STATUS_VOLMGR_INCOMPLETE_REGENERATION;
    public static HResults STATUS_VOLMGR_INCOMPLETE_DISK_MIGRATION;
    public static HResults STATUS_VOLMGR_DATABASE_FULL;
    public static HResults STATUS_VOLMGR_DISK_CONFIGURATION_CORRUPTED;
    public static HResults STATUS_VOLMGR_DISK_CONFIGURATION_NOT_IN_SYNC;
    public static HResults STATUS_VOLMGR_PACK_CONFIG_UPDATE_FAILED;
    public static HResults STATUS_VOLMGR_DISK_CONTAINS_NON_SIMPLE_VOLUME;
    public static HResults STATUS_VOLMGR_DISK_DUPLICATE;
    public static HResults STATUS_VOLMGR_DISK_DYNAMIC;
    public static HResults STATUS_VOLMGR_DISK_ID_INVALID;
    public static HResults STATUS_VOLMGR_DISK_INVALID;
    public static HResults STATUS_VOLMGR_DISK_LAST_VOTER;
    public static HResults STATUS_VOLMGR_DISK_LAYOUT_INVALID;
    public static HResults STATUS_VOLMGR_DISK_LAYOUT_NON_BASIC_BETWEEN_BASIC_PARTITIONS;
    public static HResults STATUS_VOLMGR_DISK_LAYOUT_NOT_CYLINDER_ALIGNED;
    public static HResults STATUS_VOLMGR_DISK_LAYOUT_PARTITIONS_TOO_SMALL;
    public static HResults STATUS_VOLMGR_DISK_LAYOUT_PRIMARY_BETWEEN_LOGICAL_PARTITIONS;
    public static HResults STATUS_VOLMGR_DISK_LAYOUT_TOO_MANY_PARTITIONS;
    public static HResults STATUS_VOLMGR_DISK_MISSING;
    public static HResults STATUS_VOLMGR_DISK_NOT_EMPTY;
    public static HResults STATUS_VOLMGR_DISK_NOT_ENOUGH_SPACE;
    public static HResults STATUS_VOLMGR_DISK_REVECTORING_FAILED;
    public static HResults STATUS_VOLMGR_DISK_SECTOR_SIZE_INVALID;
    public static HResults STATUS_VOLMGR_DISK_SET_NOT_CONTAINED;
    public static HResults STATUS_VOLMGR_DISK_USED_BY_MULTIPLE_MEMBERS;
    public static HResults STATUS_VOLMGR_DISK_USED_BY_MULTIPLE_PLEXES;
    public static HResults STATUS_VOLMGR_DYNAMIC_DISK_NOT_SUPPORTED;
    public static HResults STATUS_VOLMGR_EXTENT_ALREADY_USED;
    public static HResults STATUS_VOLMGR_EXTENT_NOT_CONTIGUOUS;
    public static HResults STATUS_VOLMGR_EXTENT_NOT_IN_PUBLIC_REGION;
    public static HResults STATUS_VOLMGR_EXTENT_NOT_SECTOR_ALIGNED;
    public static HResults STATUS_VOLMGR_EXTENT_OVERLAPS_EBR_PARTITION;
    public static HResults STATUS_VOLMGR_EXTENT_VOLUME_LENGTHS_DO_NOT_MATCH;
    public static HResults STATUS_VOLMGR_FAULT_TOLERANT_NOT_SUPPORTED;
    public static HResults STATUS_VOLMGR_INTERLEAVE_LENGTH_INVALID;
    public static HResults STATUS_VOLMGR_MAXIMUM_REGISTERED_USERS;
    public static HResults STATUS_VOLMGR_MEMBER_IN_SYNC;
    public static HResults STATUS_VOLMGR_MEMBER_INDEX_DUPLICATE;
    public static HResults STATUS_VOLMGR_MEMBER_INDEX_INVALID;
    public static HResults STATUS_VOLMGR_MEMBER_MISSING;
    public static HResults STATUS_VOLMGR_MEMBER_NOT_DETACHED;
    public static HResults STATUS_VOLMGR_MEMBER_REGENERATING;
    public static HResults STATUS_VOLMGR_ALL_DISKS_FAILED;
    public static HResults STATUS_VOLMGR_NO_REGISTERED_USERS;
    public static HResults STATUS_VOLMGR_NO_SUCH_USER;
    public static HResults STATUS_VOLMGR_NOTIFICATION_RESET;
    public static HResults STATUS_VOLMGR_NUMBER_OF_MEMBERS_INVALID;
    public static HResults STATUS_VOLMGR_NUMBER_OF_PLEXES_INVALID;
    public static HResults STATUS_VOLMGR_PACK_DUPLICATE;
    public static HResults STATUS_VOLMGR_PACK_ID_INVALID;
    public static HResults STATUS_VOLMGR_PACK_INVALID;
    public static HResults STATUS_VOLMGR_PACK_NAME_INVALID;
    public static HResults STATUS_VOLMGR_PACK_OFFLINE;
    public static HResults STATUS_VOLMGR_PACK_HAS_QUORUM;
    public static HResults STATUS_VOLMGR_PACK_WITHOUT_QUORUM;
    public static HResults STATUS_VOLMGR_PARTITION_STYLE_INVALID;
    public static HResults STATUS_VOLMGR_PARTITION_UPDATE_FAILED;
    public static HResults STATUS_VOLMGR_PLEX_IN_SYNC;
    public static HResults STATUS_VOLMGR_PLEX_INDEX_DUPLICATE;
    public static HResults STATUS_VOLMGR_PLEX_INDEX_INVALID;
    public static HResults STATUS_VOLMGR_PLEX_LAST_ACTIVE;
    public static HResults STATUS_VOLMGR_PLEX_MISSING;
    public static HResults STATUS_VOLMGR_PLEX_REGENERATING;
    public static HResults STATUS_VOLMGR_PLEX_TYPE_INVALID;
    public static HResults STATUS_VOLMGR_PLEX_NOT_RAID5;
    public static HResults STATUS_VOLMGR_PLEX_NOT_SIMPLE;
    public static HResults STATUS_VOLMGR_STRUCTURE_SIZE_INVALID;
    public static HResults STATUS_VOLMGR_TOO_MANY_NOTIFICATION_REQUESTS;
    public static HResults STATUS_VOLMGR_TRANSACTION_IN_PROGRESS;
    public static HResults STATUS_VOLMGR_UNEXPECTED_DISK_LAYOUT_CHANGE;
    public static HResults STATUS_VOLMGR_VOLUME_CONTAINS_MISSING_DISK;
    public static HResults STATUS_VOLMGR_VOLUME_ID_INVALID;
    public static HResults STATUS_VOLMGR_VOLUME_LENGTH_INVALID;
    public static HResults STATUS_VOLMGR_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE;
    public static HResults STATUS_VOLMGR_VOLUME_NOT_MIRRORED;
    public static HResults STATUS_VOLMGR_VOLUME_NOT_RETAINED;
    public static HResults STATUS_VOLMGR_VOLUME_OFFLINE;
    public static HResults STATUS_VOLMGR_VOLUME_RETAINED;
    public static HResults STATUS_VOLMGR_NUMBER_OF_EXTENTS_INVALID;
    public static HResults STATUS_VOLMGR_DIFFERENT_SECTOR_SIZE;
    public static HResults STATUS_VOLMGR_BAD_BOOT_DISK;
    public static HResults STATUS_VOLMGR_PACK_CONFIG_OFFLINE;
    public static HResults STATUS_VOLMGR_PACK_CONFIG_ONLINE;
    public static HResults STATUS_VOLMGR_NOT_PRIMARY_PACK;
    public static HResults STATUS_VOLMGR_PACK_LOG_UPDATE_FAILED;
    public static HResults STATUS_VOLMGR_NUMBER_OF_DISKS_IN_PLEX_INVALID;
    public static HResults STATUS_VOLMGR_NUMBER_OF_DISKS_IN_MEMBER_INVALID;
    public static HResults STATUS_VOLMGR_VOLUME_MIRRORED;
    public static HResults STATUS_VOLMGR_PLEX_NOT_SIMPLE_SPANNED;
    public static HResults STATUS_VOLMGR_NO_VALID_LOG_COPIES;
    public static HResults STATUS_VOLMGR_PRIMARY_PACK_PRESENT;
    public static HResults STATUS_VOLMGR_NUMBER_OF_DISKS_INVALID;
    public static HResults STATUS_VOLMGR_MIRROR_NOT_SUPPORTED;
    public static HResults STATUS_VOLMGR_RAID5_NOT_SUPPORTED;
    public static HResults STATUS_BCD_NOT_ALL_ENTRIES_IMPORTED;
    public static HResults STATUS_BCD_TOO_MANY_ELEMENTS;
    public static HResults STATUS_BCD_NOT_ALL_ENTRIES_SYNCHRONIZED;
    public static HResults STATUS_VHD_DRIVE_FOOTER_MISSING;
    public static HResults STATUS_VHD_DRIVE_FOOTER_CHECKSUM_MISMATCH;
    public static HResults STATUS_VHD_DRIVE_FOOTER_CORRUPT;
    public static HResults STATUS_VHD_FORMAT_UNKNOWN;
    public static HResults STATUS_VHD_FORMAT_UNSUPPORTED_VERSION;
    public static HResults STATUS_VHD_SPARSE_HEADER_CHECKSUM_MISMATCH;
    public static HResults STATUS_VHD_SPARSE_HEADER_UNSUPPORTED_VERSION;
    public static HResults STATUS_VHD_SPARSE_HEADER_CORRUPT;
    public static HResults STATUS_VHD_BLOCK_ALLOCATION_FAILURE;
    public static HResults STATUS_VHD_BLOCK_ALLOCATION_TABLE_CORRUPT;
    public static HResults STATUS_VHD_INVALID_BLOCK_SIZE;
    public static HResults STATUS_VHD_BITMAP_MISMATCH;
    public static HResults STATUS_VHD_PARENT_VHD_NOT_FOUND;
    public static HResults STATUS_VHD_CHILD_PARENT_ID_MISMATCH;
    public static HResults STATUS_VHD_CHILD_PARENT_TIMESTAMP_MISMATCH;
    public static HResults STATUS_VHD_METADATA_READ_FAILURE;
    public static HResults STATUS_VHD_METADATA_WRITE_FAILURE;
    public static HResults STATUS_VHD_INVALID_SIZE;
    public static HResults STATUS_VHD_INVALID_FILE_SIZE;
    public static HResults STATUS_VIRTDISK_PROVIDER_NOT_FOUND;
    public static HResults STATUS_VIRTDISK_NOT_VIRTUAL_DISK;
    public static HResults STATUS_VHD_PARENT_VHD_ACCESS_DENIED;
    public static HResults STATUS_VHD_CHILD_PARENT_SIZE_MISMATCH;
    public static HResults STATUS_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED;
    public static HResults STATUS_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT;
    public static HResults STATUS_VIRTUAL_DISK_LIMITATION;
    public static HResults STATUS_VHD_INVALID_TYPE;
    public static HResults STATUS_VHD_INVALID_STATE;
    public static HResults STATUS_VIRTDISK_UNSUPPORTED_DISK_SECTOR_SIZE;
    public static HResults STATUS_VIRTDISK_DISK_ALREADY_OWNED;
    public static HResults STATUS_VIRTDISK_DISK_ONLINE_AND_WRITABLE;
    public static HResults STATUS_CTLOG_TRACKING_NOT_INITIALIZED;
    public static HResults STATUS_CTLOG_LOGFILE_SIZE_EXCEEDED_MAXSIZE;
    public static HResults STATUS_CTLOG_VHD_CHANGED_OFFLINE;
    public static HResults STATUS_CTLOG_INVALID_TRACKING_STATE;
    public static HResults STATUS_CTLOG_INCONSISTENT_TRACKING_FILE;
    public static HResults STATUS_VHD_METADATA_FULL;
    public static HResults STATUS_VHD_INVALID_CHANGE_TRACKING_ID;
    public static HResults STATUS_VHD_CHANGE_TRACKING_DISABLED;
    public static HResults STATUS_VHD_MISSING_CHANGE_TRACKING_INFORMATION;
    public static HResults STATUS_VHD_RESIZE_WOULD_TRUNCATE_DATA;
    public static HResults STATUS_VHD_COULD_NOT_COMPUTE_MINIMUM_VIRTUAL_SIZE;
    public static HResults STATUS_VHD_ALREADY_AT_OR_BELOW_MINIMUM_VIRTUAL_SIZE;
    public static HResults STATUS_QUERY_STORAGE_ERROR;
    public static HResults STATUS_GDI_HANDLE_LEAK;
    public static HResults STATUS_RKF_KEY_NOT_FOUND;
    public static HResults STATUS_RKF_DUPLICATE_KEY;
    public static HResults STATUS_RKF_BLOB_FULL;
    public static HResults STATUS_RKF_STORE_FULL;
    public static HResults STATUS_RKF_FILE_BLOCKED;
    public static HResults STATUS_RKF_ACTIVE_KEY;
    public static HResults STATUS_RDBSS_RESTART_OPERATION;
    public static HResults STATUS_RDBSS_CONTINUE_OPERATION;
    public static HResults STATUS_RDBSS_POST_OPERATION;
    public static HResults STATUS_RDBSS_RETRY_LOOKUP;
    public static HResults STATUS_BTH_ATT_INVALID_HANDLE;
    public static HResults STATUS_BTH_ATT_READ_NOT_PERMITTED;
    public static HResults STATUS_BTH_ATT_WRITE_NOT_PERMITTED;
    public static HResults STATUS_BTH_ATT_INVALID_PDU;
    public static HResults STATUS_BTH_ATT_INSUFFICIENT_AUTHENTICATION;
    public static HResults STATUS_BTH_ATT_REQUEST_NOT_SUPPORTED;
    public static HResults STATUS_BTH_ATT_INVALID_OFFSET;
    public static HResults STATUS_BTH_ATT_INSUFFICIENT_AUTHORIZATION;
    public static HResults STATUS_BTH_ATT_PREPARE_QUEUE_FULL;
    public static HResults STATUS_BTH_ATT_ATTRIBUTE_NOT_FOUND;
    public static HResults STATUS_BTH_ATT_ATTRIBUTE_NOT_LONG;
    public static HResults STATUS_BTH_ATT_INSUFFICIENT_ENCRYPTION_KEY_SIZE;
    public static HResults STATUS_BTH_ATT_INVALID_ATTRIBUTE_VALUE_LENGTH;
    public static HResults STATUS_BTH_ATT_UNLIKELY;
    public static HResults STATUS_BTH_ATT_INSUFFICIENT_ENCRYPTION;
    public static HResults STATUS_BTH_ATT_UNSUPPORTED_GROUP_TYPE;
    public static HResults STATUS_BTH_ATT_INSUFFICIENT_RESOURCES;
    public static HResults STATUS_BTH_ATT_UNKNOWN_ERROR;
    public static HResults STATUS_SECUREBOOT_ROLLBACK_DETECTED;
    public static HResults STATUS_SECUREBOOT_POLICY_VIOLATION;
    public static HResults STATUS_SECUREBOOT_INVALID_POLICY;
    public static HResults STATUS_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND;
    public static HResults STATUS_SECUREBOOT_POLICY_NOT_SIGNED;
    public static HResults STATUS_SECUREBOOT_NOT_ENABLED;
    public static HResults STATUS_SECUREBOOT_FILE_REPLACED;
    public static HResults STATUS_SECUREBOOT_POLICY_NOT_AUTHORIZED;
    public static HResults STATUS_SECUREBOOT_POLICY_UNKNOWN;
    public static HResults STATUS_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION;
    public static HResults STATUS_SECUREBOOT_PLATFORM_ID_MISMATCH;
    public static HResults STATUS_SECUREBOOT_POLICY_ROLLBACK_DETECTED;
    public static HResults STATUS_SECUREBOOT_POLICY_UPGRADE_MISMATCH;
    public static HResults STATUS_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING;
    public static HResults STATUS_SECUREBOOT_NOT_BASE_POLICY;
    public static HResults STATUS_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY;
    public static HResults STATUS_PLATFORM_MANIFEST_NOT_AUTHORIZED;
    public static HResults STATUS_PLATFORM_MANIFEST_INVALID;
    public static HResults STATUS_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED;
    public static HResults STATUS_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED;
    public static HResults STATUS_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND;
    public static HResults STATUS_PLATFORM_MANIFEST_NOT_ACTIVE;
    public static HResults STATUS_PLATFORM_MANIFEST_NOT_SIGNED;
    public static HResults STATUS_SYSTEM_INTEGRITY_ROLLBACK_DETECTED;
    public static HResults STATUS_SYSTEM_INTEGRITY_POLICY_VIOLATION;
    public static HResults STATUS_SYSTEM_INTEGRITY_INVALID_POLICY;
    public static HResults STATUS_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED;
    public static HResults STATUS_NO_APPLICABLE_APP_LICENSES_FOUND;
    public static HResults STATUS_CLIP_LICENSE_NOT_FOUND;
    public static HResults STATUS_CLIP_DEVICE_LICENSE_MISSING;
    public static HResults STATUS_CLIP_LICENSE_INVALID_SIGNATURE;
    public static HResults STATUS_CLIP_KEYHOLDER_LICENSE_MISSING_OR_INVALID;
    public static HResults STATUS_CLIP_LICENSE_EXPIRED;
    public static HResults STATUS_CLIP_LICENSE_SIGNED_BY_UNKNOWN_SOURCE;
    public static HResults STATUS_CLIP_LICENSE_NOT_SIGNED;
    public static HResults STATUS_CLIP_LICENSE_HARDWARE_ID_OUT_OF_TOLERANCE;
    public static HResults STATUS_CLIP_LICENSE_DEVICE_ID_MISMATCH;
    public static HResults STATUS_AUDIO_ENGINE_NODE_NOT_FOUND;
    public static HResults STATUS_HDAUDIO_EMPTY_CONNECTION_LIST;
    public static HResults STATUS_HDAUDIO_CONNECTION_LIST_NOT_SUPPORTED;
    public static HResults STATUS_HDAUDIO_NO_LOGICAL_DEVICES_CREATED;
    public static HResults STATUS_HDAUDIO_NULL_LINKED_LIST_ENTRY;
    public static HResults STATUS_SPACES_REPAIRED;
    public static HResults STATUS_SPACES_PAUSE;
    public static HResults STATUS_SPACES_COMPLETE;
    public static HResults STATUS_SPACES_REDIRECT;
    public static HResults STATUS_SPACES_FAULT_DOMAIN_TYPE_INVALID;
    public static HResults STATUS_SPACES_RESILIENCY_TYPE_INVALID;
    public static HResults STATUS_SPACES_DRIVE_SECTOR_SIZE_INVALID;
    public static HResults STATUS_SPACES_DRIVE_REDUNDANCY_INVALID;
    public static HResults STATUS_SPACES_NUMBER_OF_DATA_COPIES_INVALID;
    public static HResults STATUS_SPACES_INTERLEAVE_LENGTH_INVALID;
    public static HResults STATUS_SPACES_NUMBER_OF_COLUMNS_INVALID;
    public static HResults STATUS_SPACES_NOT_ENOUGH_DRIVES;
    public static HResults STATUS_SPACES_EXTENDED_ERROR;
    public static HResults STATUS_SPACES_PROVISIONING_TYPE_INVALID;
    public static HResults STATUS_SPACES_ALLOCATION_SIZE_INVALID;
    public static HResults STATUS_SPACES_ENCLOSURE_AWARE_INVALID;
    public static HResults STATUS_SPACES_WRITE_CACHE_SIZE_INVALID;
    public static HResults STATUS_SPACES_NUMBER_OF_GROUPS_INVALID;
    public static HResults STATUS_SPACES_DRIVE_OPERATIONAL_STATE_INVALID;
    public static HResults STATUS_SPACES_UPDATE_COLUMN_STATE;
    public static HResults STATUS_SPACES_MAP_REQUIRED;
    public static HResults STATUS_SPACES_UNSUPPORTED_VERSION;
    public static HResults STATUS_SPACES_CORRUPT_METADATA;
    public static HResults STATUS_SPACES_DRT_FULL;
    public static HResults STATUS_SPACES_INCONSISTENCY;
    public static HResults STATUS_SPACES_LOG_NOT_READY;
    public static HResults STATUS_SPACES_NO_REDUNDANCY;
    public static HResults STATUS_SPACES_DRIVE_NOT_READY;
    public static HResults STATUS_SPACES_DRIVE_SPLIT;
    public static HResults STATUS_SPACES_DRIVE_LOST_DATA;
    public static HResults STATUS_VOLSNAP_BOOTFILE_NOT_VALID;
    public static HResults STATUS_VOLSNAP_ACTIVATION_TIMEOUT;
    public static HResults STATUS_IO_PREEMPTED;
    public static HResults STATUS_SVHDX_ERROR_STORED;
    public static HResults STATUS_SVHDX_ERROR_NOT_AVAILABLE;
    public static HResults STATUS_SVHDX_UNIT_ATTENTION_AVAILABLE;
    public static HResults STATUS_SVHDX_UNIT_ATTENTION_CAPACITY_DATA_CHANGED;
    public static HResults STATUS_SVHDX_UNIT_ATTENTION_RESERVATIONS_PREEMPTED;
    public static HResults STATUS_SVHDX_UNIT_ATTENTION_RESERVATIONS_RELEASED;
    public static HResults STATUS_SVHDX_UNIT_ATTENTION_REGISTRATIONS_PREEMPTED;
    public static HResults STATUS_SVHDX_UNIT_ATTENTION_OPERATING_DEFINITION_CHANGED;
    public static HResults STATUS_SVHDX_RESERVATION_CONFLICT;
    public static HResults STATUS_SVHDX_WRONG_FILE_TYPE;
    public static HResults STATUS_SVHDX_VERSION_MISMATCH;
    public static HResults STATUS_VHD_SHARED;
    public static HResults STATUS_SVHDX_NO_INITIATOR;
    public static HResults STATUS_VHDSET_BACKING_STORAGE_NOT_FOUND;
    public static HResults STATUS_SMB_NO_PREAUTH_INTEGRITY_HASH_OVERLAP;
    public static HResults STATUS_SMB_BAD_CLUSTER_DIALECT;
    public static HResults STATUS_SMB_GUEST_LOGON_BLOCKED;
    public static HResults STATUS_SECCORE_INVALID_COMMAND;
    public static HResults STATUS_VSM_NOT_INITIALIZED;
    public static HResults STATUS_VSM_DMA_PROTECTION_NOT_IN_USE;
    public static HResults STATUS_APPEXEC_CONDITION_NOT_SATISFIED;
    public static HResults STATUS_APPEXEC_HANDLE_INVALIDATED;
    public static HResults STATUS_APPEXEC_INVALID_HOST_GENERATION;
    public static HResults STATUS_APPEXEC_UNEXPECTED_PROCESS_REGISTRATION;
    public static HResults STATUS_APPEXEC_INVALID_HOST_STATE;
    public static HResults STATUS_APPEXEC_NO_DONOR;
    public static HResults STATUS_APPEXEC_HOST_ID_MISMATCH;
}
public static class JetBrains.Interop.WinApi.HttpapiDll : object {
    public static UInt32 HttpInitialize(HTTPAPI_VERSION Version, UInt32 Flags, Void* pReserved);
    public static UInt32 HttpTerminate(UInt32 Flags, Void* pReserved);
    public static UInt32 HttpQueryServiceConfiguration(Void* ServiceHandle, HTTP_SERVICE_CONFIG_ID ConfigId, Void* pInput, UInt32 InputLength, Void* pOutput, UInt32 OutputLength, UInt32* pReturnLength, Void* pOverlapped);
}
[NoReorderAttribute]
public static class JetBrains.Interop.WinApi.HwndSpecial : object {
    public static Void* HWND_TOP;
    public static Void* HWND_BOTTOM;
    public static Void* HWND_TOPMOST;
    public static Void* HWND_NOTOPMOST;
    public static Void* HWND_MESSAGE;
    public static Void* HWND_BROADCAST;
    private static HwndSpecial();
}
[ExtensionAttribute]
public static class JetBrains.Interop.WinApi.IEnumUnknownEx : object {
    [IteratorStateMachineAttribute("JetBrains.Interop.WinApi.IEnumUnknownEx/<OfType>d__0`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> OfType(IEnumUnknown enumerator);
}
public static class JetBrains.Interop.WinApi.ImagehlpDll : object {
    public static int ImageEnumerateCertificates(Void* FileHandle, ushort TypeFilter, UInt32* CertificateCount, UInt32* Indices, UInt32 IndexCount);
    public static int ImageRemoveCertificate(Void* FileHandle, UInt32 Index);
}
[ComVisibleAttribute("False")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000001-0000-0000-C000-000000000046")]
public interface JetBrains.Interop.WinApi.Interfaces.IClassFactory {
    public abstract virtual void CreateInstance(object pUnkOuter, Guid riid, Object& ppvObject);
    public abstract virtual void LockServer(bool fLock);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D332DB9E-B9B3-4125-8207-A14884F53216")]
public interface JetBrains.Interop.WinApi.Interfaces.IClrMetaHost {
    public abstract virtual int GetRuntime(string version, Guid interfaceId, Object& ppRuntime);
    public abstract virtual int GetVersionFromFile(string filePath, StringBuilder buffer, UInt32& bufferLength);
    public abstract virtual int EnumerateInstalledRuntimes(IEnumUnknown& ppEnumerator);
    public abstract virtual int EnumerateLoadedRuntimes(Void* processHandle, IEnumUnknown& ppEnumerator);
    public abstract virtual int RequestRuntimeLoadedNotification(Void* pCallbackFunction);
    public abstract virtual int QueryLegacyV2RuntimeBinding(Guid riid, Object& ppUnk);
    public abstract virtual int ExitProcess(int iExitCode);
}
[GuidAttribute("BD39D1D2-BA2F-486A-89B0-B4B0CB466891")]
[InterfaceTypeAttribute("1")]
public interface JetBrains.Interop.WinApi.Interfaces.IClrRuntimeInfo {
    public abstract virtual int GetVersionString(StringBuilder buffer, UInt32& bufferLength);
    public abstract virtual int GetRuntimeDirectory(StringBuilder buffer, UInt32& bufferLength);
    public abstract virtual int IsLoaded(Void* processHandle, Boolean& isLoaded);
    [LCIDConversionAttribute("3")]
public abstract virtual int LoadErrorString(int resourceId, StringBuilder buffer, UInt32& bufferLength);
    public abstract virtual int LoadLibrary(string dllName, Void*& hModule);
    public abstract virtual int GetProcAddress(string procName, Void*& pProc);
    public abstract virtual int GetInterface(Guid clsid, Guid iid, Object& ppUnk);
    public abstract virtual int IsLoadable(Boolean& isLoaded);
    public abstract virtual int SetDefaultStartupFlags(UInt32 dwStartupFlags, string pwzHostConfigFile);
    public abstract virtual int GetDefaultStartupFlags(UInt32& dwStartupFlags, StringBuilder pwzHostConfigFile, UInt32& pcchHostConfigFile);
    public abstract virtual int BindAsLegacyV2Runtime();
    public abstract virtual int IsStarted(Boolean& isStarted, UInt32& dwStartupFlags);
}
[GuidAttribute("9FD93CCF-3280-4391-B3A9-96E1CDE77C8D")]
[InterfaceTypeAttribute("1")]
[NoReorderAttribute]
public interface JetBrains.Interop.WinApi.Interfaces.ICLRStrongName {
    public abstract virtual int GetHashFromAssemblyFile(Byte* pszFilePath, UInt32* piHashAlg, Byte* pbHash, UInt32 cchHash, UInt32* pchHash);
    public abstract virtual int GetHashFromAssemblyFileW(string pwzFilePath, UInt32* piHashAlg, Byte* pbHash, UInt32 cchHash, UInt32* pchHash);
    public abstract virtual int GetHashFromBlob(Byte* pbBlob, UInt32 cchBlob, UInt32* piHashAlg, Byte* pbHash, UInt32 cchHash, UInt32* pchHash);
    public abstract virtual int GetHashFromFile(Byte* pszFilePath, UInt32* piHashAlg, Byte* pbHash, UInt32 cchHash, UInt32* pchHash);
    public abstract virtual int GetHashFromFileW(string pwzFilePath, UInt32* piHashAlg, Byte* pbHash, UInt32 cchHash, UInt32* pchHash);
    public abstract virtual int GetHashFromHandle(Void* hFile, UInt32* piHashAlg, Byte* pbHash, UInt32 cchHash, UInt32* pchHash);
    public abstract virtual int StrongNameCompareAssemblies(string pwzAssembly1, string pwzAssembly2, UInt32* pdwResult);
    public abstract virtual int StrongNameFreeBuffer(Byte* pbMemory);
    public abstract virtual int StrongNameGetBlob(string pwzFilePath, Byte* pbBlob, UInt32* pcbBlob);
    public abstract virtual int StrongNameGetBlobFromImage(Byte* pbBase, UInt32 dwLength, Byte* pbBlob, UInt32* pcbBlob);
    public abstract virtual int StrongNameGetPublicKey(string pwzKeyContainer, Byte* pbKeyBlob, UInt32 cbKeyBlob, Byte** ppbPublicKeyBlob, UInt32* pcbPublicKeyBlob);
    public abstract virtual int StrongNameHashSize(UInt32 ulHashAlg, UInt32* pcbSize);
    public abstract virtual int StrongNameKeyDelete(string pwzKeyContainer);
    public abstract virtual int StrongNameKeyGen(string pwzKeyContainer, UInt32 dwFlags, Byte** ppbKeyBlob, UInt32* pcbKeyBlob);
    public abstract virtual int StrongNameKeyGenEx(string pwzKeyContainer, UInt32 dwFlags, UInt32 dwKeySize, Byte** ppbKeyBlob, UInt32* pcbKeyBlob);
    public abstract virtual int StrongNameKeyInstall(string pwzKeyContainer, Byte* pbKeyBlob, UInt32 cbKeyBlob);
    public abstract virtual int StrongNameSignatureGeneration(string pwzFilePath, string pwzKeyContainer, Byte* pbKeyBlob, UInt32 cbKeyBlob, Byte** ppbSignatureBlob, UInt32* pcbSignatureBlob);
    public abstract virtual int StrongNameSignatureGenerationEx(string wszFilePath, string wszKeyContainer, Byte* pbKeyBlob, UInt32 cbKeyBlob, Byte** ppbSignatureBlob, UInt32* pcbSignatureBlob, UInt32 dwFlags);
    public abstract virtual int StrongNameSignatureSize(Byte* pbPublicKeyBlob, UInt32 cbPublicKeyBlob, UInt32* pcbSize);
    public abstract virtual int StrongNameSignatureVerification(string pwzFilePath, UInt32 dwInFlags, UInt32* pdwOutFlags);
    public abstract virtual int StrongNameSignatureVerificationEx(string pwzFilePath, byte fForceVerification, Byte* pfWasVerified);
    public abstract virtual int StrongNameSignatureVerificationFromImage(Byte* pbBase, UInt32 dwLength, UInt32 dwInFlags, UInt32* pdwOutFlags);
    public abstract virtual int StrongNameTokenFromAssembly(string pwzFilePath, Byte** ppbStrongNameToken, UInt32* pcbStrongNameToken);
    public abstract virtual int StrongNameTokenFromAssemblyEx(string pwzFilePath, Byte** ppbStrongNameToken, UInt32* pcbStrongNameToken, Byte** ppbPublicKeyBlob, UInt32* pcbPublicKeyBlob);
    public abstract virtual int StrongNameTokenFromPublicKey(Byte* pbPublicKeyBlob, UInt32 cbPublicKeyBlob, Byte** ppbStrongNameToken, UInt32* pcbStrongNameToken);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000100-0000-0000-C000-000000000046")]
public interface JetBrains.Interop.WinApi.Interfaces.IEnumUnknown {
    public abstract virtual int Next(UInt32 elementArrayLength, Object[] elementArray, UInt32& fetchedElementCount);
    public abstract virtual int Skip(UInt32 count);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IEnumUnknown& enumerator);
}
[ComConversionLossAttribute]
[GuidAttribute("000C0600-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface JetBrains.Interop.WinApi.Interfaces.IMsoComponent {
    public abstract virtual int FDebugMessage(IntPtr hInst, UInt32 msg, IntPtr wParam, IntPtr lParam);
    public abstract virtual int FPreTranslateMessage(MSG[] msg);
    public abstract virtual void OnEnterState(UInt32 uStateId, int fEnter);
    public abstract virtual void OnAppActivate(int fActive, UInt32 dwOtherThreadId);
    public abstract virtual void OnLoseActivation();
    public abstract virtual void OnActivationChange(object component, int fSameComponent, MSOCRINFO* pcrinfo, int fHostIsActivating, MSOCHOSTINFO* pchostinfo, UInt32 dwReserved);
    public abstract virtual int FDoIdle(UInt32 grfidlef);
    public abstract virtual int FContinueMessageLoop(UInt32 uReason, Void* pvLoopData, MSG[] pMsgPeeked);
    public abstract virtual int FQueryTerminate(int fPromptUser);
    public abstract virtual void Terminate();
    public abstract virtual Void* HwndGetWindow(UInt32 dwWhich, UInt32 dwReserved);
}
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
[GuidAttribute("000C0601-0000-0000-C000-000000000046")]
public interface JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager {
    public abstract virtual int QueryService(Guid& guidService, Guid& iid, Object& ppvObj);
    public abstract virtual int FDebugMessage(IntPtr hInst, UInt32 msg, IntPtr wParam, IntPtr lParam);
    public abstract virtual int FRegisterComponent(IMsoComponent component, MSOCRINFO[] pcrinfo, IntPtr& dwComponentId);
    public abstract virtual int FRevokeComponent(IntPtr dwComponentId);
    public abstract virtual int FUpdateComponentRegistration(IntPtr dwComponentId, MSOCRINFO[] pcrinfo);
    public abstract virtual int FOnComponentActivate(IntPtr dwComponentId);
    public abstract virtual int FSetTrackingComponent(IntPtr dwComponentId, int fTrack);
    public abstract virtual void OnComponentEnterState(IntPtr dwComponentId, UInt32 uStateId, UInt32 uContext, UInt32 cpicmExclude, Void** rgpicmExclude, UInt32 dwReserved);
    public abstract virtual int FOnComponentExitState(IntPtr dwComponentId, UInt32 uStateId, UInt32 uContext, UInt32 cpicmExclude, Void** rgpicmExclude);
    public abstract virtual int FInState(UInt32 uStateId, IntPtr pvoid);
    public abstract virtual int FContinueIdle();
    public abstract virtual int FPushMessageLoop(IntPtr dwComponentId, int uReason, Void* pvLoopData);
    public abstract virtual int FCreateSubComponentManager(object punkOuter, object punkServProv, Guid& riid, IntPtr& ppvObj);
    public abstract virtual int FGetParentComponentManager(Object& ppicm);
    public abstract virtual int FGetActiveComponent(UInt32 dwgac, Object[] ppic, MSOCRINFO[] pcrinfo, UInt32 dwReserved);
}
[GuidAttribute("00000016-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
[NoReorderAttribute]
public interface JetBrains.Interop.WinApi.Interfaces.IOleMessageFilter {
    public abstract virtual UInt32 HandleInComingCall(UInt32 dwCallType, Void* hTaskCaller, UInt32 dwTickCount, Void* lpInterfaceInfo);
    public abstract virtual UInt32 RetryRejectedCall(Void* hTaskCallee, UInt32 dwTickCount, UInt32 dwRejectType);
    public abstract virtual UInt32 MessagePending(Void* hTaskCallee, UInt32 dwTickCount, UInt32 dwPendingType);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6D5140C1-7436-11CE-8034-00AA006009FA")]
public interface JetBrains.Interop.WinApi.Interfaces.IOleServiceProvider {
    public abstract virtual int QueryService(Guid& guidService, Guid& riid, IntPtr& ppvObject);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000114-0000-0000-C000-000000000046")]
[NoReorderAttribute]
public interface JetBrains.Interop.WinApi.Interfaces.IOleWindow {
    public abstract virtual IntPtr GetWindow();
    public abstract virtual void ContextSensitiveHelp(int fEnterMode);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("EBBC7C04-315E-11D2-B62F-006097DF5BD4")]
[NoReorderAttribute]
public interface JetBrains.Interop.WinApi.Interfaces.IProgressDialog {
    public abstract virtual void StartProgressDialog(IntPtr hwndParent, object punkEnableModless, PROGDLG_FLAGS dwFlags, IntPtr pvResevered);
    public abstract virtual void StopProgressDialog();
    public abstract virtual void SetTitle(string pwzTitle);
    public abstract virtual void SetAnimation(IntPtr hInstAnimation, int idAnimation);
    public abstract virtual int HasUserCancelled();
    public abstract virtual void SetProgress(int dwCompleted, int dwTotal);
    public abstract virtual void SetProgress64(decimal ullCompleted, decimal ullTotal);
    public abstract virtual void SetLine(int dwLineNum, string pwzString, int fCompactPath, IntPtr pvResevered);
    public abstract virtual void SetCancelMsg(string pwzCancelMsg, IntPtr pvResevered);
    public abstract virtual void Timer(PDTIMER_FLAGS dwTimerAction, IntPtr pvResevered);
}
[GuidAttribute("AA544d42-28CB-11d3-bd22-0000f80849bd")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface JetBrains.Interop.WinApi.Interfaces.SymbolReader.ISymUnmanagedBinder {
    public abstract virtual int GetReaderForFile(IntPtr importer, string filename, string searchPath, ISymUnmanagedReader& retVal);
    public abstract virtual int GetReaderFromStream(IntPtr importer, IStream stream, ISymUnmanagedReader& retVal);
}
[GuidAttribute("48B25ED8-5BAD-41bc-9CEE-CD62FABC74E9")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface JetBrains.Interop.WinApi.Interfaces.SymbolReader.ISymUnmanagedConstant {
    public abstract virtual void GetName(int cchName, Int32& pcchName, StringBuilder name);
    public abstract virtual void GetValue(Object& pValue);
    public abstract virtual void GetSignature(int cSig, Int32& pcSig, Byte[] sig);
}
[GuidAttribute("40DE4037-7C81-3E1E-B022-AE1ABFF2CA08")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface JetBrains.Interop.WinApi.Interfaces.SymbolReader.ISymUnmanagedDocument {
    public abstract virtual void GetURL(int cchUrl, Int32& pcchUrl, StringBuilder szUrl);
    public abstract virtual void GetDocumentType(Guid& pRetVal);
    public abstract virtual void GetLanguage(Guid& pRetVal);
    public abstract virtual void GetLanguageVendor(Guid& pRetVal);
    public abstract virtual void GetCheckSumAlgorithmId(Guid& pRetVal);
    public abstract virtual void GetCheckSum(int cData, Int32& pcData, Byte[] data);
    public abstract virtual void FindClosestLine(int line, Int32& pRetVal);
    public abstract virtual void HasEmbeddedSource(Boolean& pRetVal);
    public abstract virtual void GetSourceLength(Int32& pRetVal);
    public abstract virtual void GetSourceRange(int startLine, int startColumn, int endLine, int endColumn, int cSourceBytes, Int32& pcSourceBytes, Byte[] source);
}
[GuidAttribute("B62B923C-B500-3158-A543-24F307A8B7E1")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface JetBrains.Interop.WinApi.Interfaces.SymbolReader.ISymUnmanagedMethod {
    public abstract virtual void GetToken(SymbolToken& pToken);
    public abstract virtual void GetSequencePointCount(Int32& retVal);
    public abstract virtual void GetRootScope(ISymUnmanagedScope& retVal);
    public abstract virtual void GetScopeFromOffset(int offset, ISymUnmanagedScope& retVal);
    public abstract virtual void GetOffset(ISymUnmanagedDocument document, int line, int column, Int32& retVal);
    public abstract virtual void GetRanges(ISymUnmanagedDocument document, int line, int column, int cRanges, Int32& pcRanges, Int32[] ranges);
    public abstract virtual void GetParameters(int cParams, Int32& pcParams, ISymUnmanagedVariable[] parms);
    public abstract virtual void GetNamespace(ISymUnmanagedNamespace& retVal);
    public abstract virtual void GetSourceStartEnd(ISymUnmanagedDocument[] docs, Int32[] lines, Int32[] columns, Boolean& retVal);
    public abstract virtual void GetSequencePoints(int cPoints, Int32& pcPoints, Int32[] offsets, ISymUnmanagedDocument[] documents, Int32[] lines, Int32[] columns, Int32[] endLines, Int32[] endColumns);
}
[GuidAttribute("0DFF7289-54F8-11d3-BD28-0000F80849BD")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface JetBrains.Interop.WinApi.Interfaces.SymbolReader.ISymUnmanagedNamespace {
    public abstract virtual void GetName(int cchName, Int32& pcchName, StringBuilder szName);
    public abstract virtual void GetNamespaces(int cNameSpaces, Int32& pcNameSpaces, ISymUnmanagedNamespace[] namespaces);
    public abstract virtual void GetVariables(int cVars, Int32& pcVars, ISymUnmanagedVariable[] pVars);
}
[GuidAttribute("B4CE6286-2A6B-3712-A3B7-1EE1DAD467B5")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface JetBrains.Interop.WinApi.Interfaces.SymbolReader.ISymUnmanagedReader {
    public abstract virtual void GetDocument(string url, Guid language, Guid languageVendor, Guid documentType, ISymUnmanagedDocument& retVal);
    public abstract virtual void GetDocuments(int cDocs, Int32& pcDocs, ISymUnmanagedDocument[] pDocs);
    public abstract virtual int GetUserEntryPoint(SymbolToken& entryPoint);
    public abstract virtual int GetMethod(SymbolToken methodToken, ISymUnmanagedMethod& retVal);
    public abstract virtual int GetMethodByVersion(SymbolToken methodToken, int version, ISymUnmanagedMethod& retVal);
    public abstract virtual void GetVariables(SymbolToken parent, int cVars, Int32& pcVars, ISymUnmanagedVariable[] vars);
    public abstract virtual void GetGlobalVariables(int cVars, Int32& pcVars, ISymUnmanagedVariable[] vars);
    public abstract virtual void GetMethodFromDocumentPosition(ISymUnmanagedDocument document, int line, int column, ISymUnmanagedMethod& retVal);
    public abstract virtual void GetSymAttribute(SymbolToken parent, string name, int sizeBuffer, Int32& lengthBuffer, Byte[] buffer);
    public abstract virtual void GetNamespaces(int cNameSpaces, Int32& pcNameSpaces, ISymUnmanagedNamespace[] namespaces);
    public abstract virtual void Initialize(IntPtr importer, string filename, string searchPath, IStream stream);
    public abstract virtual void UpdateSymbolStore(string filename, IStream stream);
    public abstract virtual void ReplaceSymbolStore(string filename, IStream stream);
    public abstract virtual void GetSymbolStoreFileName(int cchName, Int32& pcchName, StringBuilder szName);
    public abstract virtual void GetMethodsFromDocumentPosition(ISymUnmanagedDocument document, int line, int column, int cMethod, Int32& pcMethod, ISymUnmanagedMethod[] pRetVal);
    public abstract virtual void GetDocumentVersion(ISymUnmanagedDocument pDoc, Int32& version, Boolean& pbCurrent);
    public abstract virtual void GetMethodVersion(ISymUnmanagedMethod pMethod, Int32& version);
}
[GuidAttribute("68005D0F-B8E0-3B01-84D5-A11A94154942")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface JetBrains.Interop.WinApi.Interfaces.SymbolReader.ISymUnmanagedScope {
    public abstract virtual void GetMethod(ISymUnmanagedMethod& pRetVal);
    public abstract virtual void GetParent(ISymUnmanagedScope& pRetVal);
    public abstract virtual void GetChildren(int cChildren, Int32& pcChildren, ISymUnmanagedScope[] children);
    public abstract virtual void GetStartOffset(Int32& pRetVal);
    public abstract virtual void GetEndOffset(Int32& pRetVal);
    public abstract virtual void GetLocalCount(Int32& pRetVal);
    public abstract virtual void GetLocals(int cLocals, Int32& pcLocals, ISymUnmanagedVariable[] locals);
    public abstract virtual void GetNamespaces(int cNameSpaces, Int32& pcNameSpaces, ISymUnmanagedNamespace[] namespaces);
}
[GuidAttribute("AE932FBA-3FD8-4dba-8232-30A2309B02DB")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface JetBrains.Interop.WinApi.Interfaces.SymbolReader.ISymUnmanagedScope2 {
    public abstract virtual void GetMethod(ISymUnmanagedMethod& pRetVal);
    public abstract virtual void GetParent(ISymUnmanagedScope& pRetVal);
    public abstract virtual void GetChildren(int cChildren, Int32& pcChildren, ISymUnmanagedScope[] children);
    public abstract virtual void GetStartOffset(Int32& pRetVal);
    public abstract virtual void GetEndOffset(Int32& pRetVal);
    public abstract virtual void GetLocalCount(Int32& pRetVal);
    public abstract virtual void GetLocals(int cLocals, Int32& pcLocals, ISymUnmanagedVariable[] locals);
    public abstract virtual void GetNamespaces(int cNameSpaces, Int32& pcNameSpaces, ISymUnmanagedNamespace[] namespaces);
    public abstract virtual void GetConstantCount(Int32& pRetVal);
    public abstract virtual void GetConstants(int cConstants, Int32& pcConstants, ISymUnmanagedConstant[] constants);
}
[GuidAttribute("9F60EEBE-2D9A-3F7C-BF58-80BC991C60BB")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface JetBrains.Interop.WinApi.Interfaces.SymbolReader.ISymUnmanagedVariable {
    public abstract virtual void GetName(int cchName, Int32& pcchName, StringBuilder szName);
    public abstract virtual void GetAttributes(Int32& pRetVal);
    public abstract virtual void GetSignature(int cSig, Int32& pcSig, Byte[] sig);
    public abstract virtual void GetAddressKind(Int32& pRetVal);
    public abstract virtual void GetAddressField1(Int32& pRetVal);
    public abstract virtual void GetAddressField2(Int32& pRetVal);
    public abstract virtual void GetAddressField3(Int32& pRetVal);
    public abstract virtual void GetStartOffset(Int32& pRetVal);
    public abstract virtual void GetEndOffset(Int32& pRetVal);
}
public class JetBrains.Interop.WinApi.Interfaces.SymbolWriter.ImageDebugDirectory : ValueType {
    public int Characteristics;
    public int TimeDateStamp;
    public short MajorVersion;
    public short MinorVersion;
    public int Type;
    public int SizeOfData;
    public int AddressOfRawData;
    public int PointerToRawData;
}
[GuidAttribute("809c652e-7396-11d2-9771-00a0c9b4d50c")]
[InterfaceTypeAttribute("1")]
public interface JetBrains.Interop.WinApi.Interfaces.SymbolWriter.IMetaDataDispenser {
    public abstract virtual UInt32 DefineScope(Guid& rclsid, UInt32 dwCreateFlags, Guid& riid, Object& ppIUnk);
    public abstract virtual UInt32 OpenScope(string szScope, int dwOpenFlags, Guid& riid, Object& ppIUnk);
    public abstract virtual UInt32 OpenScopeOnMemory(IntPtr pData, UInt32 cbData, UInt32 dwOpenFlags, Guid& riid, Object& ppIUnk);
}
[GuidAttribute("BA3FEE4C-ECB9-4e41-83B7-183FA41CD859")]
[InterfaceTypeAttribute("1")]
public interface JetBrains.Interop.WinApi.Interfaces.SymbolWriter.IMetaDataEmit {
    public abstract virtual void SetModuleProps(string szName);
    public abstract virtual void Save(string szFile, UInt32 dwSaveFlags);
    public abstract virtual void SaveToStream(IntPtr pIStream, UInt32 dwSaveFlags);
    public abstract virtual UInt32 GetSaveSize(UInt32 fSave);
    public abstract virtual UInt32 DefineTypeDef(IntPtr szTypeDef, UInt32 dwTypeDefFlags, UInt32 tkExtends, IntPtr rtkImplements);
    public abstract virtual UInt32 DefineNestedType(IntPtr szTypeDef, UInt32 dwTypeDefFlags, UInt32 tkExtends, IntPtr rtkImplements, UInt32 tdEncloser);
    public abstract virtual void SetHandler(object pUnk);
    public abstract virtual UInt32 DefineMethod(UInt32 td, IntPtr zName, UInt32 dwMethodFlags, IntPtr pvSigBlob, UInt32 cbSigBlob, UInt32 ulCodeRva, UInt32 dwImplFlags);
    public abstract virtual void DefineMethodImpl(UInt32 td, UInt32 tkBody, UInt32 tkDecl);
    public abstract virtual UInt32 DefineTypeRefByName(UInt32 tkResolutionScope, IntPtr szName);
    public abstract virtual UInt32 DefineImportType(IntPtr pAssemImport, IntPtr pbHashValue, UInt32 cbHashValue, IMetaDataImport pImport, UInt32 tdImport, IntPtr pAssemEmit);
    public abstract virtual UInt32 DefineMemberRef(UInt32 tkImport, string szName, IntPtr pvSigBlob, UInt32 cbSigBlob);
    public abstract virtual UInt32 DefineImportMember(IntPtr pAssemImport, IntPtr pbHashValue, UInt32 cbHashValue, IMetaDataImport pImport, UInt32 mbMember, IntPtr pAssemEmit, UInt32 tkParent);
    public abstract virtual UInt32 DefineEvent(UInt32 td, string szEvent, UInt32 dwEventFlags, UInt32 tkEventType, UInt32 mdAddOn, UInt32 mdRemoveOn, UInt32 mdFire, IntPtr rmdOtherMethods);
    public abstract virtual void SetClassLayout(UInt32 td, UInt32 dwPackSize, IntPtr rFieldOffsets, UInt32 ulClassSize);
    public abstract virtual void DeleteClassLayout(UInt32 td);
    public abstract virtual void SetFieldMarshal(UInt32 tk, IntPtr pvNativeType, UInt32 cbNativeType);
    public abstract virtual void DeleteFieldMarshal(UInt32 tk);
    public abstract virtual UInt32 DefinePermissionSet(UInt32 tk, UInt32 dwAction, IntPtr pvPermission, UInt32 cbPermission);
    public abstract virtual void SetRVA(UInt32 md, UInt32 ulRva);
    public abstract virtual UInt32 GetTokenFromSig(IntPtr pvSig, UInt32 cbSig);
    public abstract virtual UInt32 DefineModuleRef(string szName);
    public abstract virtual void SetParent(UInt32 mr, UInt32 tk);
    public abstract virtual UInt32 GetTokenFromTypeSpec(IntPtr pvSig, UInt32 cbSig);
    public abstract virtual void SaveToMemory(IntPtr pbData, UInt32 cbData);
    public abstract virtual UInt32 DefineUserString(string szString, UInt32 cchString);
    public abstract virtual void DeleteToken(UInt32 tkObj);
    public abstract virtual void SetMethodProps(UInt32 md, UInt32 dwMethodFlags, UInt32 ulCodeRva, UInt32 dwImplFlags);
    public abstract virtual void SetTypeDefProps(UInt32 td, UInt32 dwTypeDefFlags, UInt32 tkExtends, IntPtr rtkImplements);
    public abstract virtual void SetEventProps(UInt32 ev, UInt32 dwEventFlags, UInt32 tkEventType, UInt32 mdAddOn, UInt32 mdRemoveOn, UInt32 mdFire, IntPtr rmdOtherMethods);
    public abstract virtual UInt32 SetPermissionSetProps(UInt32 tk, UInt32 dwAction, IntPtr pvPermission, UInt32 cbPermission);
    public abstract virtual void DefinePinvokeMap(UInt32 tk, UInt32 dwMappingFlags, string szImportName, UInt32 mrImportDll);
    public abstract virtual void SetPinvokeMap(UInt32 tk, UInt32 dwMappingFlags, string szImportName, UInt32 mrImportDll);
    public abstract virtual void DeletePinvokeMap(UInt32 tk);
    public abstract virtual UInt32 DefineCustomAttribute(UInt32 tkObj, UInt32 tkType, IntPtr pCustomAttribute, UInt32 cbCustomAttribute);
    public abstract virtual void SetCustomAttributeValue(UInt32 pcv, IntPtr pCustomAttribute, UInt32 cbCustomAttribute);
    public abstract virtual UInt32 DefineField(UInt32 td, string szName, UInt32 dwFieldFlags, IntPtr pvSigBlob, UInt32 cbSigBlob, UInt32 dwCPlusTypeFlag, IntPtr pValue, UInt32 cchValue);
    public abstract virtual UInt32 DefineProperty(UInt32 td, string szProperty, UInt32 dwPropFlags, IntPtr pvSig, UInt32 cbSig, UInt32 dwCPlusTypeFlag, IntPtr pValue, UInt32 cchValue, UInt32 mdSetter, UInt32 mdGetter, IntPtr rmdOtherMethods);
    public abstract virtual UInt32 DefineParam(UInt32 md, UInt32 ulParamSeq, string szName, UInt32 dwParamFlags, UInt32 dwCPlusTypeFlag, IntPtr pValue, UInt32 cchValue);
    public abstract virtual void SetFieldProps(UInt32 fd, UInt32 dwFieldFlags, UInt32 dwCPlusTypeFlag, IntPtr pValue, UInt32 cchValue);
    public abstract virtual void SetPropertyProps(UInt32 pr, UInt32 dwPropFlags, UInt32 dwCPlusTypeFlag, IntPtr pValue, UInt32 cchValue, UInt32 mdSetter, UInt32 mdGetter, IntPtr rmdOtherMethods);
    public abstract virtual void SetParamProps(UInt32 pd, string szName, UInt32 dwParamFlags, UInt32 dwCPlusTypeFlag, IntPtr pValue, UInt32 cchValue);
    public abstract virtual UInt32 DefineSecurityAttributeSet(UInt32 tkObj, IntPtr rSecAttrs, UInt32 cSecAttrs);
    public abstract virtual void ApplyEditAndContinue(object pImport);
    public abstract virtual UInt32 TranslateSigWithScope(IntPtr pAssemImport, IntPtr pbHashValue, UInt32 cbHashValue, IMetaDataImport import, IntPtr pbSigBlob, UInt32 cbSigBlob, IntPtr pAssemEmit, IMetaDataEmit emit, IntPtr pvTranslatedSig, UInt32 cbTranslatedSigMax);
    public abstract virtual void SetMethodImplFlags(UInt32 md, UInt32 dwImplFlags);
    public abstract virtual void SetFieldRVA(UInt32 fd, UInt32 ulRva);
    public abstract virtual void Merge(IMetaDataImport pImport, IntPtr pHostMapToken, object pHandler);
    public abstract virtual void MergeEnd();
}
[GuidAttribute("7DAC8207-D3AE-4c75-9B67-92801A497D44")]
[InterfaceTypeAttribute("1")]
public interface JetBrains.Interop.WinApi.Interfaces.SymbolWriter.IMetaDataImport {
    public abstract virtual void CloseEnum(UInt32 hEnum);
    public abstract virtual UInt32 CountEnum(UInt32 hEnum);
    public abstract virtual void ResetEnum(UInt32 hEnum, UInt32 ulPos);
    public abstract virtual UInt32 EnumTypeDefs(UInt32& phEnum, UInt32[] rTypeDefs, UInt32 cMax);
    public abstract virtual UInt32 EnumInterfaceImpls(UInt32& phEnum, UInt32 td, UInt32[] rImpls, UInt32 cMax);
    public abstract virtual UInt32 EnumTypeRefs(UInt32& phEnum, UInt32[] rTypeRefs, UInt32 cMax);
    public abstract virtual UInt32 FindTypeDefByName(string szTypeDef, UInt32 tkEnclosingClass);
    public abstract virtual Guid GetScopeProps(StringBuilder szName, UInt32 cchName, UInt32& pchName);
    public abstract virtual UInt32 GetModuleFromScope();
    public abstract virtual UInt32 GetTypeDefProps(UInt32 td, IntPtr szTypeDef, UInt32 cchTypeDef, UInt32& pchTypeDef, IntPtr pdwTypeDefFlags);
    public abstract virtual UInt32 GetInterfaceImplProps(UInt32 iiImpl, UInt32& pClass);
    public abstract virtual UInt32 GetTypeRefProps(UInt32 tr, UInt32& ptkResolutionScope, StringBuilder szName, UInt32 cchName);
    public abstract virtual UInt32 ResolveTypeRef(UInt32 tr, Guid& riid, Object& ppIScope);
    public abstract virtual UInt32 EnumMembers(UInt32& phEnum, UInt32 cl, UInt32[] rMembers, UInt32 cMax);
    public abstract virtual UInt32 EnumMembersWithName(UInt32& phEnum, UInt32 cl, string szName, UInt32[] rMembers, UInt32 cMax);
    public abstract virtual UInt32 EnumMethods(UInt32& phEnum, UInt32 cl, IntPtr rMethods, UInt32 cMax);
    public abstract virtual UInt32 EnumMethodsWithName(UInt32& phEnum, UInt32 cl, string szName, UInt32[] rMethods, UInt32 cMax);
    public abstract virtual UInt32 EnumFields(UInt32& phEnum, UInt32 cl, IntPtr rFields, UInt32 cMax);
    public abstract virtual UInt32 EnumFieldsWithName(UInt32& phEnum, UInt32 cl, string szName, UInt32[] rFields, UInt32 cMax);
    public abstract virtual UInt32 EnumParams(UInt32& phEnum, UInt32 mb, UInt32[] rParams, UInt32 cMax);
    public abstract virtual UInt32 EnumMemberRefs(UInt32& phEnum, UInt32 tkParent, UInt32[] rMemberRefs, UInt32 cMax);
    public abstract virtual UInt32 EnumMethodImpls(UInt32& phEnum, UInt32 td, UInt32[] rMethodBody, UInt32[] rMethodDecl, UInt32 cMax);
    public abstract virtual UInt32 EnumPermissionSets(UInt32& phEnum, UInt32 tk, UInt32 dwActions, UInt32[] rPermission, UInt32 cMax);
    public abstract virtual UInt32 FindMember(UInt32 td, string szName, Byte[] pvSigBlob, UInt32 cbSigBlob);
    public abstract virtual UInt32 FindMethod(UInt32 td, string szName, Byte[] pvSigBlob, UInt32 cbSigBlob);
    public abstract virtual UInt32 FindField(UInt32 td, string szName, Byte[] pvSigBlob, UInt32 cbSigBlob);
    public abstract virtual UInt32 FindMemberRef(UInt32 td, string szName, Byte[] pvSigBlob, UInt32 cbSigBlob);
    public abstract virtual UInt32 GetMethodProps(UInt32 mb, UInt32& pClass, IntPtr szMethod, UInt32 cchMethod, UInt32& pchMethod, IntPtr pdwAttr, IntPtr ppvSigBlob, IntPtr pcbSigBlob, IntPtr pulCodeRva);
    public abstract virtual UInt32 GetMemberRefProps(UInt32 mr, UInt32& ptk, StringBuilder szMember, UInt32 cchMember, UInt32& pchMember, IntPtr& ppvSigBlob);
    public abstract virtual UInt32 EnumProperties(UInt32& phEnum, UInt32 td, IntPtr rProperties, UInt32 cMax);
    public abstract virtual UInt32 EnumEvents(UInt32& phEnum, UInt32 td, IntPtr rEvents, UInt32 cMax);
    public abstract virtual UInt32 GetEventProps(UInt32 ev, UInt32& pClass, StringBuilder szEvent, UInt32 cchEvent, UInt32& pchEvent, UInt32& pdwEventFlags, UInt32& ptkEventType, UInt32& pmdAddOn, UInt32& pmdRemoveOn, UInt32& pmdFire, UInt32[] rmdOtherMethod, UInt32 cMax);
    public abstract virtual UInt32 EnumMethodSemantics(UInt32& phEnum, UInt32 mb, UInt32[] rEventProp, UInt32 cMax);
    public abstract virtual UInt32 GetMethodSemantics(UInt32 mb, UInt32 tkEventProp);
    public abstract virtual UInt32 GetClassLayout(UInt32 td, UInt32& pdwPackSize, IntPtr rFieldOffset, UInt32 cMax, UInt32& pcFieldOffset);
    public abstract virtual UInt32 GetFieldMarshal(UInt32 tk, IntPtr& ppvNativeType);
    public abstract virtual UInt32 GetRVA(UInt32 tk, UInt32& pulCodeRva);
    public abstract virtual UInt32 GetPermissionSetProps(UInt32 pm, UInt32& pdwAction, IntPtr& ppvPermission);
    public abstract virtual UInt32 GetSigFromToken(UInt32 mdSig, IntPtr& ppvSig);
    public abstract virtual UInt32 GetModuleRefProps(UInt32 mur, StringBuilder szName, UInt32 cchName);
    public abstract virtual UInt32 EnumModuleRefs(UInt32& phEnum, UInt32[] rModuleRefs, UInt32 cmax);
    public abstract virtual UInt32 GetTypeSpecFromToken(UInt32 typespec, IntPtr& ppvSig);
    public abstract virtual UInt32 GetNameFromToken(UInt32 tk);
    public abstract virtual UInt32 EnumUnresolvedMethods(UInt32& phEnum, UInt32[] rMethods, UInt32 cMax);
    public abstract virtual UInt32 GetUserString(UInt32 stk, StringBuilder szString, UInt32 cchString);
    public abstract virtual UInt32 GetPinvokeMap(UInt32 tk, UInt32& pdwMappingFlags, StringBuilder szImportName, UInt32 cchImportName, UInt32& pchImportName);
    public abstract virtual UInt32 EnumSignatures(UInt32& phEnum, UInt32[] rSignatures, UInt32 cmax);
    public abstract virtual UInt32 EnumTypeSpecs(UInt32& phEnum, UInt32[] rTypeSpecs, UInt32 cmax);
    public abstract virtual UInt32 EnumUserStrings(UInt32& phEnum, UInt32[] rStrings, UInt32 cmax);
    public abstract virtual int GetParamForMethodIndex(UInt32 md, UInt32 ulParamSeq, UInt32& pParam);
    public abstract virtual UInt32 EnumCustomAttributes(UInt32& phEnum, UInt32 tk, UInt32 tkType, UInt32[] rCustomAttributes, UInt32 cMax);
    public abstract virtual UInt32 GetCustomAttributeProps(UInt32 cv, UInt32& ptkObj, UInt32& ptkType, IntPtr& ppBlob);
    public abstract virtual UInt32 FindTypeRef(UInt32 tkResolutionScope, string szName);
    public abstract virtual UInt32 GetMemberProps(UInt32 mb, UInt32& pClass, StringBuilder szMember, UInt32 cchMember, UInt32& pchMember, UInt32& pdwAttr, IntPtr& ppvSigBlob, UInt32& pcbSigBlob, UInt32& pulCodeRva, UInt32& pdwImplFlags, UInt32& pdwCPlusTypeFlag, IntPtr& ppValue);
    public abstract virtual UInt32 GetFieldProps(UInt32 mb, UInt32& pClass, StringBuilder szField, UInt32 cchField, UInt32& pchField, UInt32& pdwAttr, IntPtr& ppvSigBlob, UInt32& pcbSigBlob, UInt32& pdwCPlusTypeFlag, IntPtr& ppValue);
    public abstract virtual UInt32 GetPropertyProps(UInt32 prop, UInt32& pClass, StringBuilder szProperty, UInt32 cchProperty, UInt32& pchProperty, UInt32& pdwPropFlags, IntPtr& ppvSig, UInt32& pbSig, UInt32& pdwCPlusTypeFlag, IntPtr& ppDefaultValue, UInt32& pcchDefaultValue, UInt32& pmdSetter, UInt32& pmdGetter, UInt32[] rmdOtherMethod, UInt32 cMax);
    public abstract virtual UInt32 GetParamProps(UInt32 tk, UInt32& pmd, UInt32& pulSequence, StringBuilder szName, UInt32 cchName, UInt32& pchName, UInt32& pdwAttr, UInt32& pdwCPlusTypeFlag, IntPtr& ppValue);
    public abstract virtual UInt32 GetCustomAttributeByName(UInt32 tkObj, string szName, IntPtr& ppData);
    public abstract virtual bool IsValidToken(UInt32 tk);
    public abstract virtual UInt32 GetNestedClassProps(UInt32 tdNestedClass);
    public abstract virtual UInt32 GetNativeCallConvFromSig(IntPtr pvSig, UInt32 cbSig);
    public abstract virtual int IsGlobal(UInt32 pd);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("FC073774-1739-4232-BD56-A027294BEC15")]
[SuppressUnmanagedCodeSecurityAttribute]
public interface JetBrains.Interop.WinApi.Interfaces.SymbolWriter.ISymUnmanagedAsyncMethodPropertiesWriter {
    public abstract virtual void DefineKickoffMethod(SymbolToken kickoffMethod);
    public abstract virtual void DefineCatchHandlerILOffset(UInt32 catchHandlerOffset);
    public abstract virtual void DefineAsyncStepInfo(UInt32 count, UInt32[] yieldOffsets, UInt32[] breakpointOffset, UInt32[] breakpointMethod);
}
[GuidAttribute("969708D2-05E5-4861-A3B0-96E473CDF63F")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface JetBrains.Interop.WinApi.Interfaces.SymbolWriter.ISymUnmanagedDispose {
    public abstract virtual void Destroy();
}
[GuidAttribute("B01FAFEB-C450-3A4D-BEEC-B4CEEC01E006")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface JetBrains.Interop.WinApi.Interfaces.SymbolWriter.ISymUnmanagedDocumentWriter {
    public abstract virtual void SetSource(int sourceSize, Byte[] source);
    public abstract virtual void SetCheckSum(Guid algorithmId, int checkSumSize, Byte[] checkSum);
}
[GuidAttribute("ED14AA72-78E2-4884-84E2-334293AE5214")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface JetBrains.Interop.WinApi.Interfaces.SymbolWriter.ISymUnmanagedWriter {
    public abstract virtual void DefineDocument(string url, Guid& language, Guid& languageVendor, Guid& documentType, ISymUnmanagedDocumentWriter& documentWriter);
    public abstract virtual void SetUserEntryPoint(SymbolToken entryMethod);
    public abstract virtual void OpenMethod(SymbolToken method);
    public abstract virtual void CloseMethod();
    public abstract virtual void OpenScope(int startOffset, Int32& scopeId);
    public abstract virtual void CloseScope(int endOffset);
    public abstract virtual void SetScopeRange(int scopeId, int startOffset, int endOffset);
    public abstract virtual void DefineLocalVariable(string name, int attributes, int cSig, Byte[] signature, int addressKind, int addr1, int addr2, int addr3, int startOffset, int endOffset);
    public abstract virtual void DefineParameter(string name, int attributes, int sequence, int addressKind, int addr1, int addr2, int addr3);
    public abstract virtual void DefineField(SymbolToken parent, string name, int attributes, int cSig, Byte[] signature, int addressKind, int addr1, int addr2, int addr3);
    public abstract virtual void DefineGlobalVariable(string name, int attributes, int cSig, Byte[] signature, int addressKind, int addr1, int addr2, int addr3);
    public abstract virtual void Close();
    public abstract virtual void SetSymAttribute(SymbolToken parent, string name, int cData, Byte[] data);
    public abstract virtual void OpenNamespace(string name);
    public abstract virtual void CloseNamespace();
    public abstract virtual void UsingNamespace(string fullName);
    public abstract virtual void SetMethodSourceRange(ISymUnmanagedDocumentWriter startDoc, int startLine, int startColumn, ISymUnmanagedDocumentWriter endDoc, int endLine, int endColumn);
    public abstract virtual void Initialize(IntPtr emitter, string filename, IStream stream, bool fullBuild);
    public abstract virtual void GetDebugInfo(ImageDebugDirectory& imageDebugDirectory, int cData, Int32& pcData, Byte[] data);
    public abstract virtual void DefineSequencePoints(ISymUnmanagedDocumentWriter document, int spCount, Int32[] offsets, Int32[] lines, Int32[] columns, Int32[] endLines, Int32[] endColumns);
    public abstract virtual void RemapToken(SymbolToken oldToken, SymbolToken newToken);
    public abstract virtual void Initialize2(IntPtr emitter, string tempfilename, IStream stream, bool fullBuild, string finalfilename);
    public abstract virtual void DefineConstant(string name, object value, int cSig, Byte[] signature);
    public abstract virtual void Abort();
}
[GuidAttribute("0B97726E-9E6D-4f05-9A26-424022093CAA")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface JetBrains.Interop.WinApi.Interfaces.SymbolWriter.ISymUnmanagedWriter2 {
    public abstract virtual void DefineDocument(string url, Guid& language, Guid& languageVendor, Guid& documentType, ISymUnmanagedDocumentWriter& documentWriter);
    public abstract virtual void SetUserEntryPoint(SymbolToken entryMethod);
    public abstract virtual void OpenMethod(SymbolToken method);
    public abstract virtual void CloseMethod();
    public abstract virtual void OpenScope(int startOffset, Int32& scopeId);
    public abstract virtual void CloseScope(int endOffset);
    public abstract virtual void SetScopeRange(int scopeId, int startOffset, int endOffset);
    public abstract virtual void DefineLocalVariable(string name, int attributes, int cSig, Byte[] signature, int addressKind, int addr1, int addr2, int addr3, int startOffset, int endOffset);
    public abstract virtual void DefineParameter(string name, int attributes, int sequence, int addressKind, int addr1, int addr2, int addr3);
    public abstract virtual void DefineField(SymbolToken parent, string name, int attributes, int cSig, Byte[] signature, int addressKind, int addr1, int addr2, int addr3);
    public abstract virtual void DefineGlobalVariable(string name, int attributes, int cSig, Byte[] signature, int addressKind, int addr1, int addr2, int addr3);
    public abstract virtual void Close();
    public abstract virtual void SetSymAttribute(SymbolToken parent, string name, int cData, Byte[] data);
    public abstract virtual void OpenNamespace(string name);
    public abstract virtual void CloseNamespace();
    public abstract virtual void UsingNamespace(string fullName);
    public abstract virtual void SetMethodSourceRange(ISymUnmanagedDocumentWriter startDoc, int startLine, int startColumn, ISymUnmanagedDocumentWriter endDoc, int endLine, int endColumn);
    public abstract virtual void Initialize(IntPtr emitter, string filename, IStream stream, bool fullBuild);
    public abstract virtual void GetDebugInfo(ImageDebugDirectory& imageDebugDirectory, int cData, Int32& pcData, Byte[] data);
    public abstract virtual void DefineSequencePoints(ISymUnmanagedDocumentWriter document, int spCount, Int32[] offsets, Int32[] lines, Int32[] columns, Int32[] endLines, Int32[] endColumns);
    public abstract virtual void RemapToken(SymbolToken oldToken, SymbolToken newToken);
    public abstract virtual void Initialize2(IntPtr emitter, string tempfilename, IStream stream, bool fullBuild, string finalfilename);
    public abstract virtual void DefineConstant(string name, object value, int cSig, Byte[] signature);
    public abstract virtual void Abort();
    public abstract virtual void DefineLocalVariable2(string name, int attributes, SymbolToken sigToken, int addressKind, int addr1, int addr2, int addr3, int startOffset, int endOffset);
    public abstract virtual void DefineGlobalVariable2(string name, int attributes, SymbolToken sigToken, int addressKind, int addr1, int addr2, int addr3);
    public abstract virtual void DefineConstant2(string name, object value, SymbolToken sigToken);
}
[GuidAttribute("12F1E02C-1E05-4B0E-9468-EBC9D1BB040F")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface JetBrains.Interop.WinApi.Interfaces.SymbolWriter.ISymUnmanagedWriter3 {
    public abstract virtual void DefineDocument(string url, Guid& language, Guid& languageVendor, Guid& documentType, ISymUnmanagedDocumentWriter& documentWriter);
    public abstract virtual void SetUserEntryPoint(SymbolToken entryMethod);
    public abstract virtual void OpenMethod(SymbolToken method);
    public abstract virtual void CloseMethod();
    public abstract virtual void OpenScope(int startOffset, Int32& scopeId);
    public abstract virtual void CloseScope(int endOffset);
    public abstract virtual void SetScopeRange(int scopeId, int startOffset, int endOffset);
    public abstract virtual void DefineLocalVariable(string name, int attributes, int cSig, Byte[] signature, int addressKind, int addr1, int addr2, int addr3, int startOffset, int endOffset);
    public abstract virtual void DefineParameter(string name, int attributes, int sequence, int addressKind, int addr1, int addr2, int addr3);
    public abstract virtual void DefineField(SymbolToken parent, string name, int attributes, int cSig, Byte[] signature, int addressKind, int addr1, int addr2, int addr3);
    public abstract virtual void DefineGlobalVariable(string name, int attributes, int cSig, Byte[] signature, int addressKind, int addr1, int addr2, int addr3);
    public abstract virtual void Close();
    public abstract virtual void SetSymAttribute(SymbolToken parent, string name, int cData, Byte[] data);
    public abstract virtual void OpenNamespace(string name);
    public abstract virtual void CloseNamespace();
    public abstract virtual void UsingNamespace(string fullName);
    public abstract virtual void SetMethodSourceRange(ISymUnmanagedDocumentWriter startDoc, int startLine, int startColumn, ISymUnmanagedDocumentWriter endDoc, int endLine, int endColumn);
    public abstract virtual void Initialize(IntPtr emitter, string filename, IStream stream, bool fullBuild);
    public abstract virtual void GetDebugInfo(ImageDebugDirectory& imageDebugDirectory, int cData, Int32& pcData, Byte[] data);
    public abstract virtual void DefineSequencePoints(ISymUnmanagedDocumentWriter document, int spCount, Int32[] offsets, Int32[] lines, Int32[] columns, Int32[] endLines, Int32[] endColumns);
    public abstract virtual void RemapToken(SymbolToken oldToken, SymbolToken newToken);
    public abstract virtual void Initialize2(IntPtr emitter, string tempfilename, IStream stream, bool fullBuild, string finalfilename);
    public abstract virtual void DefineConstant(string name, object value, int cSig, Byte[] signature);
    public abstract virtual void Abort();
    public abstract virtual void DefineLocalVariable2(string name, int attributes, SymbolToken sigToken, int addressKind, int addr1, int addr2, int addr3, int startOffset, int endOffset);
    public abstract virtual void DefineGlobalVariable2(string name, int attributes, SymbolToken sigToken, int addressKind, int addr1, int addr2, int addr3);
    public abstract virtual void DefineConstant2(string name, object value, SymbolToken sigToken);
    public abstract virtual void OpenMethod2(SymbolToken method, int isect, int offset);
    public abstract virtual void Commit();
}
[GuidAttribute("BC7E3F53-F458-4C23-9DBD-A189E6E96594")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
public interface JetBrains.Interop.WinApi.Interfaces.SymbolWriter.ISymUnmanagedWriter4 {
    public abstract virtual void DefineDocument(string url, Guid& language, Guid& languageVendor, Guid& documentType, ISymUnmanagedDocumentWriter& documentWriter);
    public abstract virtual void SetUserEntryPoint(SymbolToken entryMethod);
    public abstract virtual void OpenMethod(SymbolToken method);
    public abstract virtual void CloseMethod();
    public abstract virtual void OpenScope(int startOffset, Int32& scopeId);
    public abstract virtual void CloseScope(int endOffset);
    public abstract virtual void SetScopeRange(int scopeId, int startOffset, int endOffset);
    public abstract virtual void DefineLocalVariable(string name, int attributes, int cSig, Byte[] signature, int addressKind, int addr1, int addr2, int addr3, int startOffset, int endOffset);
    public abstract virtual void DefineParameter(string name, int attributes, int sequence, int addressKind, int addr1, int addr2, int addr3);
    public abstract virtual void DefineField(SymbolToken parent, string name, int attributes, int cSig, Byte[] signature, int addressKind, int addr1, int addr2, int addr3);
    public abstract virtual void DefineGlobalVariable(string name, int attributes, int cSig, Byte[] signature, int addressKind, int addr1, int addr2, int addr3);
    public abstract virtual void Close();
    public abstract virtual void SetSymAttribute(SymbolToken parent, string name, int cData, Byte[] data);
    public abstract virtual void OpenNamespace(string name);
    public abstract virtual void CloseNamespace();
    public abstract virtual void UsingNamespace(string fullName);
    public abstract virtual void SetMethodSourceRange(ISymUnmanagedDocumentWriter startDoc, int startLine, int startColumn, ISymUnmanagedDocumentWriter endDoc, int endLine, int endColumn);
    public abstract virtual void Initialize(IntPtr emitter, string filename, IStream stream, bool fullBuild);
    public abstract virtual void GetDebugInfo(ImageDebugDirectory& imageDebugDirectory, int cData, Int32& pcData, Byte[] data);
    public abstract virtual void DefineSequencePoints(ISymUnmanagedDocumentWriter document, int spCount, Int32[] offsets, Int32[] lines, Int32[] columns, Int32[] endLines, Int32[] endColumns);
    public abstract virtual void RemapToken(SymbolToken oldToken, SymbolToken newToken);
    public abstract virtual void Initialize2(IntPtr emitter, string tempfilename, IStream stream, bool fullBuild, string finalfilename);
    public abstract virtual void DefineConstant(string name, object value, int cSig, Byte[] signature);
    public abstract virtual void Abort();
    public abstract virtual void DefineLocalVariable2(string name, int attributes, SymbolToken sigToken, int addressKind, int addr1, int addr2, int addr3, int startOffset, int endOffset);
    public abstract virtual void DefineGlobalVariable2(string name, int attributes, SymbolToken sigToken, int addressKind, int addr1, int addr2, int addr3);
    public abstract virtual void DefineConstant2(string name, object value, SymbolToken sigToken);
    public abstract virtual void OpenMethod2(SymbolToken method, int isect, int offset);
    public abstract virtual void Commit();
    public abstract virtual void GetDebugInfoWithPadding(ImageDebugDirectory& debugDirectory, UInt32 dataCount, UInt32& dataCountPtr, IntPtr data);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("DCF7780D-BDE9-45DF-ACFE-21731A32000C")]
[SuppressUnmanagedCodeSecurityAttribute]
public interface JetBrains.Interop.WinApi.Interfaces.SymbolWriter.ISymUnmanagedWriter5 {
    public abstract virtual void DefineDocument(string url, Guid& language, Guid& languageVendor, Guid& documentType, ISymUnmanagedDocumentWriter& documentWriter);
    public abstract virtual void SetUserEntryPoint(SymbolToken entryMethod);
    public abstract virtual void OpenMethod(SymbolToken method);
    public abstract virtual void CloseMethod();
    public abstract virtual void OpenScope(int startOffset, Int32& scopeId);
    public abstract virtual void CloseScope(int endOffset);
    public abstract virtual void SetScopeRange(int scopeId, int startOffset, int endOffset);
    public abstract virtual void DefineLocalVariable(string name, int attributes, int cSig, Byte[] signature, int addressKind, int addr1, int addr2, int addr3, int startOffset, int endOffset);
    public abstract virtual void DefineParameter(string name, int attributes, int sequence, int addressKind, int addr1, int addr2, int addr3);
    public abstract virtual void DefineField(SymbolToken parent, string name, int attributes, int cSig, Byte[] signature, int addressKind, int addr1, int addr2, int addr3);
    public abstract virtual void DefineGlobalVariable(string name, int attributes, int cSig, Byte[] signature, int addressKind, int addr1, int addr2, int addr3);
    public abstract virtual void Close();
    public abstract virtual void SetSymAttribute(SymbolToken parent, string name, int cData, Byte[] data);
    public abstract virtual void OpenNamespace(string name);
    public abstract virtual void CloseNamespace();
    public abstract virtual void UsingNamespace(string fullName);
    public abstract virtual void SetMethodSourceRange(ISymUnmanagedDocumentWriter startDoc, int startLine, int startColumn, ISymUnmanagedDocumentWriter endDoc, int endLine, int endColumn);
    public abstract virtual void Initialize(IntPtr emitter, string filename, IStream stream, bool fullBuild);
    public abstract virtual void GetDebugInfo(ImageDebugDirectory& imageDebugDirectory, int cData, Int32& pcData, Byte[] data);
    public abstract virtual void DefineSequencePoints(ISymUnmanagedDocumentWriter document, int spCount, Int32[] offsets, Int32[] lines, Int32[] columns, Int32[] endLines, Int32[] endColumns);
    public abstract virtual void RemapToken(SymbolToken oldToken, SymbolToken newToken);
    public abstract virtual void Initialize2(IntPtr emitter, string tempfilename, IStream stream, bool fullBuild, string finalfilename);
    public abstract virtual void DefineConstant(string name, object value, int cSig, Byte[] signature);
    public abstract virtual void Abort();
    public abstract virtual void DefineLocalVariable2(string name, int attributes, SymbolToken sigToken, int addressKind, int addr1, int addr2, int addr3, int startOffset, int endOffset);
    public abstract virtual void DefineGlobalVariable2(string name, int attributes, SymbolToken sigToken, int addressKind, int addr1, int addr2, int addr3);
    public abstract virtual void DefineConstant2(string name, object value, SymbolToken sigToken);
    public abstract virtual void OpenMethod2(SymbolToken method, int isect, int offset);
    public abstract virtual void Commit();
    public abstract virtual void GetDebugInfoWithPadding(ImageDebugDirectory& debugDirectory, UInt32 dataCount, UInt32& dataCountPtr, IntPtr data);
    public abstract virtual void OpenMapTokensToSourceSpans();
    public abstract virtual void CloseMapTokensToSourceSpans();
    public abstract virtual void MapTokenToSourceSpan(UInt32 token, ISymUnmanagedDocumentWriter document, UInt32 startLine, UInt32 startColumn, UInt32 endLine, UInt32 endColumn);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5ba52f3b-6bf8-40fc-b476-d39c529b331e")]
[SuppressUnmanagedCodeSecurityAttribute]
public interface JetBrains.Interop.WinApi.Interfaces.SymbolWriter.ISymUnmanagedWriter8 {
    public abstract virtual void _VtblGap1_33();
    public abstract virtual void InitializeDeterministic(object emitter, object stream);
    public abstract virtual void UpdateSignatureByHashingContent(Byte* buffer, int size);
    public abstract virtual void UpdateSignature(Guid pdbId, UInt32 stamp, int age);
    public abstract virtual void SetSourceServerData(Byte* data, int size);
    public abstract virtual void SetSourceLinkData(Byte* data, int size);
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.IO_COUNTERS : ValueType {
    private ulong ReadOperationCount;
    private ulong WriteOperationCount;
    private ulong OtherOperationCount;
    private ulong ReadTransferCount;
    private ulong WriteTransferCount;
    private ulong OtherTransferCount;
}
public static class JetBrains.Interop.WinApi.IpHlpApiDll : object {
    public static int GetExtendedTcpTable(Void* pTcpTable, UInt32* pdwSize, bool bOrder, UInt32 ulAf, TCP_TABLE_CLASS tableClass, UInt32 reserved);
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.JOBOBJECT_BASIC_LIMIT_INFORMATION : ValueType {
    public long PerProcessUserTimeLimit;
    public long PerJobUserTimeLimit;
    public UInt32 LimitFlags;
    public UIntPtr MinimumWorkingSetSize;
    public UIntPtr MaximumWorkingSetSize;
    public UInt32 ActiveProcessLimit;
    public UIntPtr Affinity;
    public UInt32 PriorityClass;
    public UInt32 SchedulingClass;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.JOBOBJECT_BASIC_PROCESS_ID_LIST : ValueType {
    public UInt32 NumberOfAssignedProcesses;
    public UInt32 NumberOfProcessIdsInList;
    public UIntPtr ProcessIdList_Item0;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.JOBOBJECT_EXTENDED_LIMIT_INFORMATION : ValueType {
    public JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
    public IO_COUNTERS IoInfo;
    public UIntPtr ProcessMemoryLimit;
    public UIntPtr JobMemoryLimit;
    public UIntPtr PeakProcessMemoryUsed;
    public UIntPtr PeakJobMemoryUsed;
}
public static class JetBrains.Interop.WinApi.Kernel32Dll : object {
    public static int CloseHandle(Void* hObject);
    public static Void* ConvertThreadToFiber(Void* lpParameter);
    public static Void* CreateFiber(IntPtr dwStackSize, Void* lpStartAddress, Void* lpParameter);
    public static Void* CreateToolhelp32Snapshot(UInt32 dwFlags, UInt32 th32ProcessID);
    public static void DeleteFiber(Void* lpFiber);
    [ObsoleteAttribute("The correct overload is the one with char*, otherwise it can't handle all cases, like MAKEINTRESOURCE. See NativeResourceTypeAndName for examples.")]
public static Void* FindResourceW(Void* hModule, string lpName, string lpType);
    public static Void* FindResourceW(Void* hModule, Char* lpName, Char* lpType);
    [ObsoleteAttribute("This function is normally implemented either in inline ASM or as a compiler intrinsic that ")]
public static Void* GetCurrentFiber();
    public static Void* GetCurrentProcess();
    public static UInt32 GetCurrentProcessId();
    public static Void* OpenProcess(UInt32 dwDesiredAccess, int bInheritHandle, UInt32 dwProcessId);
    public static Void* OpenThread(UInt32 dwDesiredAccess, UInt32 bInheritHandle, UInt32 dwThreadId);
    public static UInt32 GetCurrentThreadId();
    public static UInt32 GetFileAttributesW(string lpFileName);
    public static UInt32 GetFileAttributesExW(string lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, WIN32_FILE_ATTRIBUTE_DATA& lpFileInformation);
    [ObsoleteAttribute("Does not work in .NET, because reports interop/marshalling error status rather than WinAPI one.")]
public static UInt32 GetLastError();
    public static UInt32 GetModuleFileNameW(Void* hModule, UInt16* lpFilename, UInt32 nSize);
    public static Void* GetModuleHandleW(string lpModuleName);
    public static void GetNativeSystemInfo(SYSTEM_INFO* lpSystemInfo);
    public static UInt32 GetPrivateProfileIntW(string lpAppName, string lpKeyName, int nDefault, string lpFileName);
    public static UInt32 GetPrivateProfileStringW(string lpAppName, string lpKeyName, string lpDefault, UInt16* lpReturnedString, UInt32 nSize, string lpFileName);
    public static Void* GetProcAddress(Void* hModule, string lpProcName);
    public static void GetSystemInfo(SYSTEM_INFO* lpSystemInfo);
    public static UInt32 GetTickCount();
    public static int GlobalMemoryStatusEx(MEMORYSTATUSEX* lpBuffer);
    public static Void* LoadLibraryW(string lpFileName);
    public static int FreeLibrary(Void* hModule);
    public static int SetDllDirectoryW(string lpPathName);
    public static Void* LoadResource(Void* hModule, Void* hResInfo);
    public static Void* LockResource(Void* hResData);
    public static void OutputDebugStringW(string lpOutputString);
    public static int Process32FirstW(Void* hSnapshot, Void* lppe);
    public static int Process32NextW(Void* hSnapshot, Void* lppe);
    public static int Module32FirstW(Void* hSnapshot, Void* lpme);
    public static int Module32NextW(Void* hSnapshot, Void* lpme);
    public static int QueryPerformanceCounter(UInt64* lpPerformanceCount);
    public static int QueryPerformanceFrequency(UInt64* lpFrequency);
    public static void RtlCopyMemory(Void* Destination, Void* Source, UIntPtr Length);
    public static void RtlMoveMemory(Void* Destination, Void* Source, UIntPtr Length);
    public static UInt32 SizeofResource(Void* hModule, Void* hResInfo);
    public static void SwitchToFiber(Void* lpFiber);
    public static Void* VirtualAlloc(Void* lpAddress, IntPtr dwSize, UInt32 flAllocationType, UInt32 flProtect);
    public static int VirtualProtect(Void* lpAddress, IntPtr dwSize, UInt32 flNewProtect, UInt32* lpflOldProtect);
    public static IntPtr VirtualQuery(Void* lpAddress, MEMORY_BASIC_INFORMATION* lpBuffer, IntPtr dwLength);
    public static int VirtualQueryEx(IntPtr hProcess, IntPtr lpAddress, MEMORY_BASIC_INFORMATION& lpBuffer, int dwLength);
    public static UInt32 WaitForMultipleObjects(UInt32 nCount, Void* lpHandles, int bWaitAll, UInt32 dwMilliseconds);
    public static UInt32 WaitForMultipleObjectsEx(UInt32 nCount, Void** lpHandles, int bWaitAll, UInt32 dwMilliseconds, int bAlertable);
    public static UInt32 WaitForSingleObject(Void* hHandle, UInt32 dwMilliseconds);
    public static int WritePrivateProfileStringW(string lpAppName, string lpKeyName, string lpString, string lpFileName);
    public static Void* CreateFileW(string lpFileName, UInt32 dwDesiredAccess, UInt32 dwShareMode, SECURITY_ATTRIBUTES* lpSecurityAttributes, UInt32 dwCreationDisposition, UInt32 dwFlagsAndAttributes, Void* hTemplateFile);
    public static int WriteFile(Void* hFile, Void* lpBuffer, UInt32 nNumberOfBytesToWrite, UInt32* lpNumberOfBytesWritten, OVERLAPPED* lpOverlapped);
    public static int FlushFileBuffers(Void* hFile);
    public static int LockFile(Void* hFile, UInt32 dwFileOffsetLow, UInt32 dwFileOffsetHigh, UInt32 nNumberOfBytesToLockLow, UInt32 nNumberOfBytesToLockHigh);
    public static int UnlockFile(Void* hFile, UInt32 dwFileOffsetLow, UInt32 dwFileOffsetHigh, UInt32 nNumberOfBytesToUnlockLow, UInt32 nNumberOfBytesToUnlockHigh);
    public static UInt32 ReadDirectoryChangesW(SafeFileHandle hDirectory, HandleRef lpBuffer, UInt32 nBufferLength, UInt32 bWatchSubtree, NotifyFilters dwNotifyFilter, UInt32& lpBytesReturned, NativeOverlapped* overlappedPointer, HandleRef lpCompletionRoutine);
    public static int CreateDirectoryW(string lpPathName, SECURITY_ATTRIBUTES* lpSecurityAttributes);
    public static int GetFileSizeEx(Void* hFile, Int64* lpFileSize);
    public static int SetFileAttributesW(string lpFileName, UInt32 dwFileAttributes);
    public static UInt32 SetFilePointer(Void* hFile, int lDistanceToMove, Int32* lpDistanceToMoveHigh, MoveMethod dwMoveMethod);
    public static int CopyFileW(string lpExistingFileName, string lpNewFileName, int bFailIfExists);
    public static int MoveFileW(string lpExistingFileName, string lpNewFileName);
    public static int DeleteFileW(string lpFileName);
    public static UInt32 GetLongPathNameW(string lpszShortPath, StringBuilder lpszLongPath, UInt32 cchBuffer);
    public static UInt32 GetShortPathNameW(string lpszLongPath, StringBuilder lpszShortPath, UInt32 cchBuffer);
    public static int RemoveDirectoryW(string lpPathName);
    public static int SetFileTime(Void* hFile, FILE_TIME* lpCreationTime, FILE_TIME* lpLastAccessTime, FILE_TIME* lpLastWriteTime);
    public static int GetFileTime(Void* hFile, FILE_TIME* lpCreationTime, FILE_TIME* lpLastAccessTime, FILE_TIME* lpLastWriteTime);
    public static SafeFindHandle FindFirstFileW(string lpFileName, WIN32_FIND_DATA* lpFindFileData);
    public static int FindNextFileW(SafeFindHandle hFindFile, WIN32_FIND_DATA* lpFindFileData);
    public static int FindClose(Void* handle);
    public static Win32ErrorMode SetErrorMode(Win32ErrorMode uMode);
    public static int GetProcessInformation(Void* hProcess, PROCESS_INFORMATION_CLASS ProcessInformationClass, Void* ProcessInformation, UInt32 ProcessInformationSize);
    public static int IsWow64Process(Void* hProcess, Int32* Wow64Process);
    public static int IsWow64Process2(Void* hProcess, MachineId* pProcessMachine, MachineId* pNativeMachine);
    public static int GetPackageFullName(Void* hProcess, UInt32* packageFullNameLength, Char* packageFullName);
    public static int GetFileInformationByHandle(Void* hFile, BY_HANDLE_FILE_INFORMATION* lpFileInformation);
    public static Void* CreateFileMappingW(Void* hFile, SECURITY_ATTRIBUTES* lpAttributes, UInt32 flProtect, UInt32 dwMaximumSizeHigh, UInt32 dwMaximumSizeLow, string lpName);
    public static Void* MapViewOfFile(Void* hFileMappingObject, UInt32 dwDesiredAccess, UInt32 dwFileOffsetHigh, UInt32 dwFileOffsetLow, UIntPtr dwNumberOfBytesToMap);
    public static int UnmapViewOfFile(Void* lpBaseAddress);
    public static byte Wow64EnableWow64FsRedirection(byte Wow64FsEnableRedirection);
    public static int MoveFileExW(string lpExistingFileName, string lpNewFileName, UInt32 dwFlags);
    public static int QueryFullProcessImageNameW(Void* hProcess, UInt32 flags, Char* lpExeName, UInt32* lpdwSize);
    public static Void* BeginUpdateResourceW(string pFileName, int bDeleteExistingResources);
    public static int EndUpdateResourceW(Void* hUpdate, int fDiscard);
    public static int UpdateResourceW(Void* hUpdate, Char* lpType, Char* lpName, ushort wLanguage, Void* lpData, UInt32 cbData);
    public static Void* GetProcessHeap();
    public static Void* HeapCreate(UInt32 flOptions, IntPtr fwInitialSize, IntPtr dwMazimumSize);
    public static int HeapDestroy(Void* hHeap);
    public static Void* HeapAlloc(Void* hHeap, UInt32 dwFlags, IntPtr dwBytes);
    public static Void* HeapReAlloc(Void* hHeap, UInt32 dwFlags, Void* lpMem, IntPtr dwBytes);
    public static int HeapFree(Void* hHeap, UInt32 dwFlags, Void* lpMem);
    public static int CreateProcessW(UInt16* lpApplicationName, UInt16* lpCommandLine, SECURITY_ATTRIBUTES* lpProcessAttributes, SECURITY_ATTRIBUTES* lpThreadAttributes, int bInheritHandles, UInt32 dwCreationFlags, Void* lpEnvironment, UInt16* lpCurrentDirectory, STARTUPINFO* lpStartupInfo, PROCESS_INFORMATION* lpProcessInformation);
    public static int GetExitCodeProcess(Void* hProcess, UInt32& lpExitCode);
    public static UInt32 ResumeThread(Void* hThread);
    public static UInt32 SuspendThread(Void* hThread);
    public static Void* GetStdHandle(UInt32 nStdHandle);
    public static int SetStdHandle(UInt32 nStdHandle, Void* hHandle);
    public static int GetVolumeInformationW(Char* drive, Char* volumeName, UInt32 volumeNameBufLen, UInt32* volSerialNumber, UInt32* maxFileNameLen, UInt32* fileSystemFlags, Char* fileSystemName, UInt32 fileSystemNameBufLen);
    public static int GetVolumeInformationByHandleW(Void* hFile, Char* lpVolumeNameBuffer, UInt32 nVolumeNameSize, UInt32* lpVolumeSerialNumber, UInt32* lpMaximumComponentLength, UInt32* lpFileSystemFlags, Char* lpFileSystemNameBuffer, UInt32 nFileSystemNameSize);
    public static int CreatePipe(Void** hReadPipe, Void** hWritePipe, SECURITY_ATTRIBUTES* lpPipeAttributes, UInt32 nSize);
    public static int DuplicateHandle(Void* hSourceProcessHandle, Void* hSourceHandle, Void* hTargetProcessHandle, Void** lpTargetHandle, UInt32 dwDesiredAccess, int bInheritHandle, UInt32 dwOptions);
    public static int SetHandleInformation(Void* hObject, UInt32 dwMask, UInt32 dwFlags);
    public static int CompareStringW(UInt32 Locale, UInt32 dwCmpFlags, Char* lpString1, int cchCount1, Char* lpString2, int cchCount2);
    public static int CompareStringExW(string lpLocaleName, UInt32 dwCmpFlags, Char* lpString1, int cchCount1, Char* lpString2, int cchCount2, Void* lpVersionInformation, Void* lpReserved, IntPtr lParam);
    public static int LCMapStringW(UInt32 Locale, UInt32 dwMapFlags, Char* lpSrcStr, int cchSrc, Char* lpDestStr, int cchDest);
    public static int LCMapStringEx(Char* lpLocaleName, UInt32 dwMapFlags, Char* lpSrcStr, int cchSrc, Char* lpDestStr, int cchDest, Void* lpVersionInformation, Void* lpReserved, Void* sortHandle);
    public static int DeviceIoControl(Void* hDevice, UInt32 dwIoControlCode, Void* lpInBuffer, UInt32 nInBufferSize, Void* lpOutBuffer, UInt32 nOutBufferSize, UInt32* lpBytesReturned, Void* lpOverlapped);
    public static int GetVolumeNameForVolumeMountPointW(Char* lpszVolumeMountPoint, Char* lpszVolumeName, UInt32 cchBufferLength);
    public static int ReadFile(Void* hFile, Void* lpBuffer, UInt32 nNumberOfBytesToRead, UInt32* lpNumberOfBytesRead, OVERLAPPED* lpOverlapped);
    public static int CancelIoEx(Void* hFile, OVERLAPPED* lpOverlapped);
    public static int TerminateProcess(Void* hProcess, UInt32 uExitCode);
    public static Void* CreateNamedPipeW(string lpName, UInt32 dwOpenMode, UInt32 dwPipeMode, UInt32 nMaxInstances, UInt32 nOutBufferSize, UInt32 nInBufferSize, UInt32 nDefaultTimeOut, SECURITY_ATTRIBUTES* lpSecurityAttributes);
    public static int SetNamedPipeHandleState(Void* hNamedPipe, UInt32* lpMode, UInt32* lpMaxCollectionCount, UInt32* lpCollectDataTimeout);
    public static int ConnectNamedPipe(Void* hNamedPipe, OVERLAPPED* lpOverlapped);
    public static int DisconnectNamedPipe(Void* hNamedPipe);
    public static int PeekNamedPipe(Void* hNamedPipe, Void* lpBuffer, UInt32 nBufferSize, UInt32* lpBytesRead, UInt32* lpTotalBytesAvail, UInt32* lpBytesLeftThisMessage);
    public static Void* CreateThreadpoolIo(Void* fl, Void* pfnio, Void* pv, Void* pcbe);
    public static void StartThreadpoolIo(Void* pio);
    public static void CloseThreadpoolIo(Void* pio);
    public static void CancelThreadpoolIo(Void* pio);
    public static void WaitForThreadpoolIoCallbacks(Void* pio, int fCancelPendingCallbacks);
    public static int GetOverlappedResult(Void* hFile, OVERLAPPED* lpOverlapped, UInt32* lpNumberOfBytesTransferred, int bWait);
    public static int SetFileCompletionNotificationModes(Void* FileHandle, byte Flags);
    public static Void* CreateJobObjectW(SECURITY_ATTRIBUTES* lpJobAttributes, string lpName);
    public static int SetInformationJobObject(Void* hJob, UInt32 JobObjectInfoClass, Void* lpJobObjectInfo, UInt32 cbJobObjectInfoLength);
    public static int AssignProcessToJobObject(Void* hJob, Void* hProcess);
    public static int TerminateJobObject(Void* hJob, UInt32 uExitCode);
    public static int RegisterWaitForSingleObject(Void** phNewWaitObject, Void* hObject, Void* Callback, Void* Context, UInt32 dwMilliseconds, UInt32 dwFlags);
    public static int UnregisterWait(Void* WaitHandle);
    public static int UnregisterWaitEx(Void* WaitHandle, Void* CompletionEvent);
    public static Void* GlobalLock(Void* hMem);
    public static int GlobalUnlock(Void* hMem);
    public static UIntPtr GlobalSize(Void* hMem);
    public static int QueryInformationJobObject(Void* hJob, JOBOBJECTINFOCLASS JobObjectInfoClass, Void* lpJobObjectInfo, UInt32 cbJobObjectInfoLength, UInt32* lpReturnLength);
    public static Void* CreateEventW(SECURITY_ATTRIBUTES* lpEventAttributes, int bManualReset, int bInitialState, Char* lpName);
    public static int SetProcessAffinityMask(Void* hProcess, UIntPtr dwProcessAffinityMask);
    public static int ResetEvent(Void* hEvent);
    public static int SetEvent(Void* hEvent);
    public static UInt32 FormatMessageW(UInt32 dwFlags, Void* lpSource, UInt32 dwMessageId, UInt32 dwLanguageId, UInt16* lpBuffer, UInt32 nSize, Void* Arguments);
    public static int GetDiskFreeSpaceExW(string lpDirectoryName, UInt64* lpFreeBytesAvailable, UInt64* lpTotalNumberOfBytes, UInt64* lpTotalNumberOfFreeBytes);
    public static UInt32 SetFileInformationByHandle(Void* fileHandle, FILE_INFO_BY_HANDLE_CLASS fileInformationClass, Void* lpFileInformation, UInt32 fileInformationLength);
    public static UInt32 GetFinalPathNameByHandleW(Void* fileHandle, StringBuilder filePath, UInt32 filePathLength, UInt32 dwFlags);
    public static int GetSystemDefaultLCID();
    public static int GetUserDefaultLCID();
    public static Void* GetConsoleWindow();
    public static int GetConsoleMode(Void* hConsoleHandle, UInt32* lpMode);
    public static int FlushConsoleInputBuffer(Void* hConsoleInput);
    public static int PeekConsoleInputW(Void* hConsoleInput, Void* lpBuffer, UInt32 nLength, UInt32* lpNumberOfEventsRead);
    public static int ReadConsoleInputW(Void* hConsoleInput, Void* lpBuffer, UInt32 nLength, UInt32* lpNumberOfEventsRead);
    public static int WriteConsoleW(Void* hConsoleOutput, Void* lpBuffer, UInt32 nNumberOfCharsToWrite, UInt32* lpNumberOfCharsWritten, Void* lpReserved);
    public static UInt32 GetFileType(Void* hFile);
    public static UInt32 DebugActiveProcess(UInt32 dwProcessId);
    public static UInt32 DebugActiveProcessStop(UInt32 dwProcessId);
    public static UInt32 WaitForDebugEvent(DEBUG_EVENT* lpDebugEvent, UInt32 dwMilliseconds);
    public static UInt32 ContinueDebugEvent(UInt32 dwProcessId, UInt32 dwThreadId, UInt32 dwContinueStatus);
    public static UInt32 ReadProcessMemory(Void* hProcess, Void* lpBaseAddress, Void* lpBuffer, UIntPtr nSize, UIntPtr* lpNumberOfBytesRead);
    public static UInt32 GetProcessId(Void* hProcess);
    public static UInt32 GetThreadId(Void* hThread);
    public static Void* FindFirstVolumeW(StringBuilder lpszVolumeName, UInt32 cchBufferLength);
    public static UInt32 FindNextVolumeW(Void* hFindVolume, StringBuilder lpszVolumeName, UInt32 cchBufferLength);
    public static UInt32 FindVolumeClose(Void* hFindVolume);
    public static UInt32 QueryDosDeviceW(string lpDeviceName, Char* lpTargetPath, UInt32 ucchMax);
    public static UInt32 GetVolumePathNamesForVolumeNameW(string lpszVolumeName, Char* lpszVolumePathNames, UInt32 cchBufferLength, UInt32& lpcchReturnLength);
    public static int GetProcessAffinityMask(Void* hProcess, UIntPtr& lpProcessAffinityMask, UIntPtr& lpSystemAffinityMask);
    public static UInt32 AllocConsole();
    public static UInt32 AttachConsole(UInt32 dwProcessId);
    public static UInt32 FreeConsole();
    public static int InitializeProcThreadAttributeList(Void* lpAttributeList, UInt32 dwAttributeCount, UInt32 dwFlags, UIntPtr& lpSize);
    public static int UpdateProcThreadAttribute(Void* lpAttributeList, UInt32 dwFlags, UIntPtr attribute, Void* lpValue, UIntPtr cbSize, Void* lpPreviousValue, Void* lpReturnSize);
    public static void DeleteProcThreadAttributeList(Void* lpAttributeList);
    public static UInt32 GetACP();
    public static int GetProcessTimes(Void* hProcess, FILE_TIME* lpCreationTime, FILE_TIME* lpExitTime, FILE_TIME* lpKernelTime, FILE_TIME* lpUserTime);
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.KeyAccessRights : Enum {
    public UInt32 value__;
    public static KeyAccessRights KEY_QUERY_VALUE;
    public static KeyAccessRights KEY_SET_VALUE;
    public static KeyAccessRights KEY_CREATE_SUB_KEY;
    public static KeyAccessRights KEY_ENUMERATE_SUB_KEYS;
    public static KeyAccessRights KEY_NOTIFY;
    public static KeyAccessRights KEY_CREATE_LINK;
    public static KeyAccessRights KEY_WOW64_32KEY;
    public static KeyAccessRights KEY_WOW64_64KEY;
    public static KeyAccessRights KEY_WOW64_RES;
    public static KeyAccessRights KEY_READ;
    public static KeyAccessRights KEY_WRITE;
    public static KeyAccessRights KEY_EXECUTE;
    public static KeyAccessRights KEY_ALL_ACCESS;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.KeyStateMasks : Enum {
    public int value__;
    public static KeyStateMasks LeftButton;
    public static KeyStateMasks RightButton;
    public static KeyStateMasks ShiftKey;
    public static KeyStateMasks ControlKey;
    public static KeyStateMasks MiddleButton;
    public static KeyStateMasks XButton1;
    public static KeyStateMasks XButton2;
    public static KeyStateMasks AltKey;
    public static KeyStateMasks MaskKeyboard;
    public static KeyStateMasks MaskMouse;
}
public enum JetBrains.Interop.WinApi.KF_FLAG : Enum {
    public UInt32 value__;
    public static KF_FLAG KF_FLAG_CREATE;
    public static KF_FLAG KF_FLAG_DONT_VERIFY;
    public static KF_FLAG KF_FLAG_DONT_UNEXPAND;
    public static KF_FLAG KF_FLAG_NO_ALIAS;
    public static KF_FLAG KF_FLAG_INIT;
    public static KF_FLAG KF_FLAG_DEFAULT_PATH;
    public static KF_FLAG KF_FLAG_NOT_PARENT_RELATIVE;
    public static KF_FLAG KF_FLAG_SIMPLE_IDLIST;
}
public static class JetBrains.Interop.WinApi.KNOWNFOLDERID : object {
    public static Guid FOLDERID_AddNewPrograms;
    public static Guid FOLDERID_AdminTools;
    public static Guid FOLDERID_AppUpdates;
    public static Guid FOLDERID_CDBurning;
    public static Guid FOLDERID_ChangeRemovePrograms;
    public static Guid FOLDERID_CommonAdminTools;
    public static Guid FOLDERID_CommonOEMLinks;
    public static Guid FOLDERID_CommonPrograms;
    public static Guid FOLDERID_CommonStartMenu;
    public static Guid FOLDERID_CommonStartup;
    public static Guid FOLDERID_CommonTemplates;
    public static Guid FOLDERID_ComputerFolder;
    public static Guid FOLDERID_ConflictFolder;
    public static Guid FOLDERID_ConnectionsFolder;
    public static Guid FOLDERID_Contacts;
    public static Guid FOLDERID_ControlPanelFolder;
    public static Guid FOLDERID_Cookies;
    public static Guid FOLDERID_Desktop;
    public static Guid FOLDERID_Documents;
    public static Guid FOLDERID_Downloads;
    public static Guid FOLDERID_Favorites;
    public static Guid FOLDERID_Fonts;
    public static Guid FOLDERID_Games;
    public static Guid FOLDERID_GameTasks;
    public static Guid FOLDERID_History;
    public static Guid FOLDERID_InternetCache;
    public static Guid FOLDERID_InternetFolder;
    public static Guid FOLDERID_Links;
    public static Guid FOLDERID_LocalAppData;
    public static Guid FOLDERID_LocalAppDataLow;
    public static Guid FOLDERID_LocalizedResourcesDir;
    public static Guid FOLDERID_Music;
    public static Guid FOLDERID_NetHood;
    public static Guid FOLDERID_NetworkFolder;
    public static Guid FOLDERID_OriginalImages;
    public static Guid FOLDERID_PhotoAlbums;
    public static Guid FOLDERID_Pictures;
    public static Guid FOLDERID_Playlists;
    public static Guid FOLDERID_PrintersFolder;
    public static Guid FOLDERID_PrintHood;
    public static Guid FOLDERID_Profile;
    public static Guid FOLDERID_ProgramData;
    public static Guid FOLDERID_ProgramFiles;
    public static Guid FOLDERID_ProgramFilesCommon;
    public static Guid FOLDERID_ProgramFilesCommonX64;
    public static Guid FOLDERID_ProgramFilesCommonX86;
    public static Guid FOLDERID_ProgramFilesX64;
    public static Guid FOLDERID_ProgramFilesX86;
    public static Guid FOLDERID_Programs;
    public static Guid FOLDERID_Public;
    public static Guid FOLDERID_PublicDesktop;
    public static Guid FOLDERID_PublicDocuments;
    public static Guid FOLDERID_PublicDownloads;
    public static Guid FOLDERID_PublicGameTasks;
    public static Guid FOLDERID_PublicMusic;
    public static Guid FOLDERID_PublicPictures;
    public static Guid FOLDERID_PublicVideos;
    public static Guid FOLDERID_QuickLaunch;
    public static Guid FOLDERID_Recent;
    public static Guid FOLDERID_RecordedTV;
    public static Guid FOLDERID_RecycleBinFolder;
    public static Guid FOLDERID_ResourceDir;
    public static Guid FOLDERID_RoamingAppData;
    public static Guid FOLDERID_SampleMusic;
    public static Guid FOLDERID_SamplePictures;
    public static Guid FOLDERID_SamplePlaylists;
    public static Guid FOLDERID_SampleVideos;
    public static Guid FOLDERID_SavedGames;
    public static Guid FOLDERID_SavedSearches;
    public static Guid FOLDERID_SEARCH_CSC;
    public static Guid FOLDERID_SEARCH_MAPI;
    public static Guid FOLDERID_SearchHome;
    public static Guid FOLDERID_SendTo;
    public static Guid FOLDERID_SidebarDefaultParts;
    public static Guid FOLDERID_SidebarParts;
    public static Guid FOLDERID_StartMenu;
    public static Guid FOLDERID_Startup;
    public static Guid FOLDERID_SyncManagerFolder;
    public static Guid FOLDERID_SyncResultsFolder;
    public static Guid FOLDERID_SyncSetupFolder;
    public static Guid FOLDERID_System;
    public static Guid FOLDERID_SystemX86;
    public static Guid FOLDERID_Templates;
    public static Guid FOLDERID_TreeProperties;
    public static Guid FOLDERID_UserProfiles;
    public static Guid FOLDERID_UsersFiles;
    public static Guid FOLDERID_Videos;
    public static Guid FOLDERID_Windows;
    private static KNOWNFOLDERID();
}
public class JetBrains.Interop.WinApi.LARGE_INTEGER : ValueType {
    public long QuadPart;
}
public enum JetBrains.Interop.WinApi.ListBoxStyles : Enum {
    public int value__;
    public static ListBoxStyles LBS_NOTIFY;
    public static ListBoxStyles LBS_SORT;
    public static ListBoxStyles LBS_MULTIPLESEL;
    public static ListBoxStyles LBS_OWNERDRAWFIXED;
    public static ListBoxStyles LBS_OWNERDRAWVARIABLE;
    public static ListBoxStyles LBS_HASSTRINGS;
    public static ListBoxStyles LBS_USETABSTOPS;
    public static ListBoxStyles LBS_NOINTEGRALHEIGHT;
    public static ListBoxStyles LBS_MULTICOLUMN;
    public static ListBoxStyles LBS_WANTKEYBOARDINPUT;
    public static ListBoxStyles LBS_EXTENDEDSEL;
    public static ListBoxStyles LBS_DISABLENOSCROLL;
    public static ListBoxStyles LBS_NODATA;
    public static ListBoxStyles LBS_NOSEL;
    public static ListBoxStyles LBS_COMBOBOX;
    public static ListBoxStyles LBS_STANDARD;
}
public static class JetBrains.Interop.WinApi.ListViewUtil : object {
    public static int GetSelectedCount(Void* hWnd);
    public static int GetNextSelectedItemIndex(Void* hWnd, int currentIndex);
    [CanBeNullAttribute]
public static string GetText(Void* hWnd, int line, int column);
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.LogoutOptions : Enum {
    public UInt32 value__;
    public static LogoutOptions ENDSESSION_CLOSEAPP;
    public static LogoutOptions ENDSESSION_CRITICAL;
    public static LogoutOptions ENDSESSION_LOGOFF;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.LUID : ValueType {
    public UInt32 LowPart;
    public int HighPart;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.LUID_AND_ATTRIBUTES : ValueType {
    public LUID Luid;
    public SePrivilege Attributes;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.LVITEM : ValueType {
    public ListViewItemMask mask;
    public int iItem;
    public int iSubItem;
    public UInt32 state;
    public UInt32 stateMask;
    public Char* pszText;
    public int cchTextMax;
    public int iImage;
    public IntPtr lParam;
    public int iIndent;
    public int iGroupId;
    public UInt32 cColumns;
    public UInt32* puColumns;
    public Int32* piColFmt;
    public int iGroup;
}
public enum JetBrains.Interop.WinApi.MachineId : Enum {
    public ushort value__;
    public static MachineId IMAGE_FILE_MACHINE_UNKNOWN;
    public static MachineId IMAGE_FILE_MACHINE_TARGET_HOST;
    public static MachineId IMAGE_FILE_MACHINE_I386;
    public static MachineId IMAGE_FILE_MACHINE_R3000;
    public static MachineId IMAGE_FILE_MACHINE_R4000;
    public static MachineId IMAGE_FILE_MACHINE_R10000;
    public static MachineId IMAGE_FILE_MACHINE_WCEMIPSV2;
    public static MachineId IMAGE_FILE_MACHINE_ALPHA;
    public static MachineId IMAGE_FILE_MACHINE_SH3;
    public static MachineId IMAGE_FILE_MACHINE_SH3DSP;
    public static MachineId IMAGE_FILE_MACHINE_SH3E;
    public static MachineId IMAGE_FILE_MACHINE_SH4;
    public static MachineId IMAGE_FILE_MACHINE_SH5;
    public static MachineId IMAGE_FILE_MACHINE_ARM;
    public static MachineId IMAGE_FILE_MACHINE_THUMB;
    public static MachineId IMAGE_FILE_MACHINE_ARMNT;
    public static MachineId IMAGE_FILE_MACHINE_AM33;
    public static MachineId IMAGE_FILE_MACHINE_POWERPC;
    public static MachineId IMAGE_FILE_MACHINE_POWERPCFP;
    public static MachineId IMAGE_FILE_MACHINE_IA64;
    public static MachineId IMAGE_FILE_MACHINE_MIPS16;
    public static MachineId IMAGE_FILE_MACHINE_ALPHA64;
    public static MachineId IMAGE_FILE_MACHINE_MIPSFPU;
    public static MachineId IMAGE_FILE_MACHINE_MIPSFPU16;
    public static MachineId IMAGE_FILE_MACHINE_TRICORE;
    public static MachineId IMAGE_FILE_MACHINE_CEF;
    public static MachineId IMAGE_FILE_MACHINE_EBC;
    public static MachineId IMAGE_FILE_MACHINE_AMD64;
    public static MachineId IMAGE_FILE_MACHINE_M32R;
    public static MachineId IMAGE_FILE_MACHINE_ARM64;
    public static MachineId IMAGE_FILE_MACHINE_CEE;
    public static MachineId IMAGE_FILE_MACHINE_RISCV32;
    public static MachineId IMAGE_FILE_MACHINE_RISCV64;
    public static MachineId IMAGE_FILE_MACHINE_RISCV128;
    public static MachineId IMAGE_FILE_MACHINE_LOONGARCH32;
    public static MachineId IMAGE_FILE_MACHINE_LOONGARCH64;
    public static MachineId IMAGE_FILE_MACHINE_I486;
    public static MachineId IMAGE_FILE_MACHINE_PENTIUM;
    public static MachineId IMAGE_FILE_MACHINE_R3000_BE;
    public static MachineId IMAGE_FILE_MACHINE_POWERPC_BE;
    public static MachineId IMAGE_FILE_MACHINE_SPARC;
}
[ExtensionAttribute]
public static class JetBrains.Interop.WinApi.MachineIdNi : object {
    public static MachineId IMAGE_FILE_MACHINE_AMD64_MACOS_NI;
    public static MachineId IMAGE_FILE_MACHINE_AMD64_LINUX_NI;
    [ExtensionAttribute]
public static ValueTuple`2<MachineId, MachineIdOsOverride> ToIdAndOs(MachineId machineIdNi);
}
public enum JetBrains.Interop.WinApi.MachineIdOsOverride : Enum {
    public ushort value__;
    public static MachineIdOsOverride Windows;
    public static MachineIdOsOverride MacOS;
    public static MachineIdOsOverride Linux;
    public static MachineIdOsOverride SunOS;
    public static MachineIdOsOverride NetBsd;
    public static MachineIdOsOverride FreeBsd;
}
public static class JetBrains.Interop.WinApi.Macros : object {
    public static int GET_X_LPARAM(IntPtr lParam);
    public static int GET_Y_LPARAM(IntPtr lParam);
    public static UInt32 HIDWORD(ulong qw);
    public static ushort HIWORD(UInt32 l);
    public static ushort HIWORD(IntPtr l);
    public static UInt32 LODWORD(ulong qw);
    public static ushort LOWORD(UInt32 l);
    public static ushort LOWORD(IntPtr l);
    public static UInt32 MAKEDWORD(ushort loword, ushort hiword);
    public static ulong MAKEQWORD(UInt32 lodword, UInt32 hidword);
    public static UInt32 ColorToCOLORREF(byte r, byte g, byte b);
    public static void ColorFromCOLORREF(UInt32 colorref, Byte& r, Byte& g, Byte& b);
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.MARGINS : ValueType {
    public int cxLeftWidth;
    public int cxRightWidth;
    public int cyTopHeight;
    public int cyBottomHeight;
    public static MARGINS WholeSurface { get; }
    public static MARGINS Null { get; }
    public MARGINS(int uniformvalue);
    public static MARGINS get_WholeSurface();
    public static MARGINS get_Null();
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.MEMORYSTATUSEX : ValueType {
    public UInt32 dwLength;
    public UInt32 dwMemoryLoad;
    public ulong ullTotalPhys;
    public ulong ullAvailPhys;
    public ulong ullTotalPageFile;
    public ulong ullAvailPageFile;
    public ulong ullTotalVirtual;
    public ulong ullAvailVirtual;
    public ulong ullAvailExtendedVirtual;
    public static MEMORYSTATUSEX NewWithSize();
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.MessageBoxFlags : Enum {
    public UInt32 value__;
    public static MessageBoxFlags MB_OK;
    public static MessageBoxFlags MB_OKCANCEL;
    public static MessageBoxFlags MB_ABORTRETRYIGNORE;
    public static MessageBoxFlags MB_YESNOCANCEL;
    public static MessageBoxFlags MB_YESNO;
    public static MessageBoxFlags MB_RETRYCANCEL;
    public static MessageBoxFlags MB_CANCELTRYCONTINUE;
    public static MessageBoxFlags MB_ICONHAND;
    public static MessageBoxFlags MB_ICONQUESTION;
    public static MessageBoxFlags MB_ICONEXCLAMATION;
    public static MessageBoxFlags MB_ICONASTERISK;
    public static MessageBoxFlags MB_USERICON;
    public static MessageBoxFlags MB_ICONWARNING;
    public static MessageBoxFlags MB_ICONERROR;
    public static MessageBoxFlags MB_ICONINFORMATION;
    public static MessageBoxFlags MB_ICONSTOP;
    public static MessageBoxFlags MB_DEFBUTTON1;
    public static MessageBoxFlags MB_DEFBUTTON2;
    public static MessageBoxFlags MB_DEFBUTTON3;
    public static MessageBoxFlags MB_DEFBUTTON4;
    public static MessageBoxFlags MB_APPLMODAL;
    public static MessageBoxFlags MB_SYSTEMMODAL;
    public static MessageBoxFlags MB_TASKMODAL;
    public static MessageBoxFlags MB_HELP;
    public static MessageBoxFlags MB_NOFOCUS;
    public static MessageBoxFlags MB_SETFOREGROUND;
    public static MessageBoxFlags MB_DEFAULT_DESKTOP_ONLY;
    public static MessageBoxFlags MB_TOPMOST;
    public static MessageBoxFlags MB_RIGHT;
    public static MessageBoxFlags MB_RTLREADING;
    public static MessageBoxFlags MB_SERVICE_NOTIFICATION;
    public static MessageBoxFlags MB_TYPEMASK;
    public static MessageBoxFlags MB_ICONMASK;
    public static MessageBoxFlags MB_DEFMASK;
    public static MessageBoxFlags MB_MODEMASK;
    public static MessageBoxFlags MB_MISCMASK;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.MODULEENTRY32 : ValueType {
    public UInt32 dwSize;
    public UInt32 th32ModuleID;
    public UInt32 th32ProcessID;
    public UInt32 GlblcntUsage;
    public UInt32 ProccntUsage;
    public Byte* modBaseAddr;
    public UInt32 modBaseSize;
    public Void* hModule;
    [FixedBufferAttribute("System.Char", "256")]
public <szModule>e__FixedBuffer szModule;
    [FixedBufferAttribute("System.Char", "260")]
public <szExePath>e__FixedBuffer szExePath;
    public static MODULEENTRY32 NewWithSize();
}
public static class JetBrains.Interop.WinApi.Modules.UI.ControlPaintUnsafe : object {
    public static bool DrawThemeBackground(Void* hwnd, Void* hdc, string sThemeClassList, int nThemePartId, int nThemeStateId, RECT rcArea, RECT rcClip);
    public static bool PaintStatusBarBackgroundTheme(IntPtr hwnd, Void* hdc, RECT rcArea, RECT rcClip);
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.MONITORINFO : ValueType {
    public UInt32 cbSize;
    public RECT rcMonitor;
    public RECT rcWork;
    public UInt32 dwFlags;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.MONITORINFOEX : ValueType {
    public UInt32 cbSize;
    public RECT rcMonitor;
    public RECT rcWork;
    public UInt32 dwFlags;
    [FixedBufferAttribute("System.Char", "32")]
public <szDevice>e__FixedBuffer szDevice;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.MOUSEHOOKSTRUCT : ValueType {
    public POINT pt;
    public Void* hwnd;
    public UInt32 wHitTestCode;
    public UIntPtr dwExtraInfo;
}
public static class JetBrains.Interop.WinApi.MscoreeDll : object {
    public static int CLRCreateInstance(Guid clsid, Guid riid, Object& pInterface);
    public static int GetVersionFromProcess(Void* hProcess, StringBuilder buffer, UInt32 bufferSize, UInt32& bufferLength);
    public static int GetFileVersion(string fileName, StringBuilder buffer, UInt32 bufferSize, UInt32& bufferLength);
    public static int GetRequestedRuntimeVersion(string filePath, StringBuilder buffer, UInt32 bufferSize, UInt32& bufferLength);
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.MSG : ValueType {
    public Void* hwnd;
    public UInt32 message;
    public IntPtr wParam;
    public IntPtr lParam;
    public UInt32 time;
    public POINT pt;
    public virtual string ToString();
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.MsgWaitForMultipleObjectsFlags : Enum {
    public UInt32 value__;
    public static MsgWaitForMultipleObjectsFlags MWMO_WAITALL;
    public static MsgWaitForMultipleObjectsFlags MWMO_ALERTABLE;
    public static MsgWaitForMultipleObjectsFlags MWMO_INPUTAVAILABLE;
}
public static class JetBrains.Interop.WinApi.MsiDll : object {
    public static UInt32 MsiCloseHandle(Void* hAny);
    public static UInt32 MsiGetProductPropertyW(Void* hProduct, string szProperty, Char* lpValueBuf, UInt32* pcchValueBuf);
    public static UInt32 MsiOpenPackageExW(string szPackagePath, UInt32 dwOptions, Void** hProduct);
}
public static class JetBrains.Interop.WinApi.MsImg32Dll : object {
    public static int AlphaBlend(Void* hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest, int nHeightDest, Void* hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, BLENDFUNCTION blendFunction);
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.MSLLHOOKSTRUCT : ValueType {
    private POINT pt;
    private UInt32 mouseData;
    private UInt32 flags;
    private UInt32 time;
    private UIntPtr dwExtraInfo;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.MSOCHOSTINFO : ValueType {
    public UInt32 cbSize;
    public UInt32 grfchostf;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.MSOCRINFO : ValueType {
    public UInt32 cbSize;
    public UInt32 uIdleTimeInterval;
    public UInt32 grfcrf;
    public UInt32 grfcadvf;
    public static MSOCRINFO NewWithSize();
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.NMHDR : ValueType {
    public Void* hwndFrom;
    public UIntPtr idFrom;
    public UInt32 code;
}
public static class JetBrains.Interop.WinApi.NtDllDll : object {
    public static int RtlQueryElevationFlags(ELEVATION_FLAGS* pFlags);
    public static int NtOpenSection(Void** sectionHandle, UInt32 desiredAccess, Void* pObjectAttributes);
    public static int NtClose(Void* handle);
    public static int NtQuerySystemInformation(UInt32 systemInfoClass, Void* pInfo, UInt32 cbInfoSize, UInt32* cbReturnSize);
    public static int NtQueryInformationProcess(IntPtr hProcess, int pic, PROCESS_BASIC_INFORMATION& pbi, int cb, Int32& pSize);
    public static int NtQueryInformationProcess(IntPtr hProcess, int pic, IntPtr& pi, int cb, Int32& pSize);
    public static int NtWow64QueryInformationProcess64(IntPtr hProcess, int pic, PROCESS_BASIC_INFORMATION_WOW64& pbi, int cb, Int32& pSize);
    public static int NtWow64QueryVirtualMemory64(IntPtr hProcess, long lpAddress, MEMORY_INFORMATION_CLASS memoryInformationClass, IntPtr lpBuffer, long memoryInformationLength, Int64& returnLength);
    public static int NtWow64ReadVirtualMemory64(IntPtr hProcess, long lpBaseAddress, IntPtr lpBuffer, long dwSize, Int64& lpNumberOfBytesRead);
    public static int NtWow64ReadVirtualMemory64(IntPtr hProcess, long lpBaseAddress, Byte[] lpBuffer, long dwSize, Int64& lpNumberOfBytesRead);
    public static int NtQueryObject(Void* handle, UInt32 infoClass, Void* pInfo, UInt32 cbInfoSize, UInt32* cbReturnSize);
    public static int RtlGetVersion(RTL_OSVERSIONINFOEXW* lpVersionInformation);
    public static UInt32 NtSuspendProcess(Void* hProcess);
    public static UInt32 NtResumeProcess(Void* hProcess);
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.OBJECT_ATTRIBUTES : ValueType {
    public UInt32 Length;
    public Void* RootDirectory;
    public Void* ObjectName;
    public UInt32 Attributes;
    public Void* SecurityDescriptor;
    public Void* SecurityQualityOfService;
    public static OBJECT_ATTRIBUTES NewWithLength();
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.OFN : Enum {
    public UInt32 value__;
    public static OFN OFN_READONLY;
    public static OFN OFN_OVERWRITEPROMPT;
    public static OFN OFN_HIDEREADONLY;
    public static OFN OFN_NOCHANGEDIR;
    public static OFN OFN_SHOWHELP;
    public static OFN OFN_ENABLEHOOK;
    public static OFN OFN_ENABLETEMPLATE;
    public static OFN OFN_ENABLETEMPLATEHANDLE;
    public static OFN OFN_NOVALIDATE;
    public static OFN OFN_ALLOWMULTISELECT;
    public static OFN OFN_EXTENSIONDIFFERENT;
    public static OFN OFN_PATHMUSTEXIST;
    public static OFN OFN_FILEMUSTEXIST;
    public static OFN OFN_CREATEPROMPT;
    public static OFN OFN_SHAREAWARE;
    public static OFN OFN_NOREADONLYRETURN;
    public static OFN OFN_NOTESTFILECREATE;
    public static OFN OFN_NONETWORKBUTTON;
    public static OFN OFN_NOLONGNAMES;
    public static OFN OFN_EXPLORER;
    public static OFN OFN_NODEREFERENCELINKS;
    public static OFN OFN_LONGNAMES;
    public static OFN OFN_ENABLEINCLUDENOTIFY;
    public static OFN OFN_ENABLESIZING;
    public static OFN OFN_DONTADDTORECENT;
    public static OFN OFN_FORCESHOWHIDDEN;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.OFNOTIFYEX : ValueType {
    public NMHDR hdr;
    public OPENFILENAME* lpOFN;
    public Void* psf;
    public Void* pidl;
}
public static class JetBrains.Interop.WinApi.Ole32Dll : object {
    public static int OleInitialize(int pvReserved);
    public static int CoRegisterMessageFilter(IOleMessageFilter newFilter, IOleMessageFilter& oldFilter);
    public static int CreateBindCtx(UInt32 reserved, IBindCtx& ppbc);
    public static int GetRunningObjectTable(UInt32 reserved, IRunningObjectTable& pprot);
    public static int RegisterActiveObject(object punk, Guid& rclsid, UInt32 dwFlags, UInt32& pdwRegister);
    public static int CreateItemMoniker(string lpszDelim, string lpszItem, IMoniker& moniker);
    public static int StgCreateDocfile(string pwcsName, UInt32 grfMode, UInt32 reserved, Void** ppstgOpen);
    public static int StgCreateStorageEx(string pwcsName, UInt32 grfMode, UInt32 stgfmt, UInt32 grfAttrs, STGOPTIONS* pStgOptions, Void* pSecurityDescriptor, Guid* riid, Void** ppObjectOpen);
    public static int StgOpenStorageEx(string pwcsName, UInt32 grfMode, UInt32 stgfmt, UInt32 grfAttrs, STGOPTIONS* pStgOptions, Void* reserved2, Guid* riid, Void** ppObjectOpen);
    public static int StgOpenStorage(string pwcsName, IStorage pstgPriority, UInt32 grfMode, Void* snbExclude, UInt32 reserved, IStorage& ppstgOpen);
    public static int PropVariantClear(PROPVARIANT* pvar);
    public static int StgCreateDocfileOnILockBytes(ILockBytes plkbyt, UInt32 grfMode, UInt32 reserved, IStorage& ppstgOpen);
    public static int StgOpenStorageOnILockBytes(ILockBytes plkbyt, IStorage pStgPriority, UInt32 grfMode, Void* snbExclude, UInt32 reserved, IStorage& ppstgOpen);
    public static int CreateILockBytesOnHGlobal(Void* hGlobal, int fDeleteOnRelease, ILockBytes& ppLkbyt);
    public static int CreateILockBytesOnHGlobal(Void* hGlobal, int fDeleteOnRelease, Void** ppLkbyt);
    [MustUseReturnValueAttribute]
public static int CoCreateInstance(Guid& rclsid, object pUnkOuter, UInt32 dwClsContext, Guid& riid, Object& ppv);
}
public static class JetBrains.Interop.WinApi.OleAut32Dll : object {
    public static UInt32 VariantClear(Void* pvarg);
    public static void VariantInit(Void* pvarg);
    public static int VarR8FromStr(string strIn, UInt32 lcid, UInt32 dwFlags, Double* pdblOut);
    public static int VarR8FromStr(Char* strIn, UInt32 lcid, UInt32 dwFlags, Double* pdblOut);
    public static int LoadTypeLib(string szFile, ITypeLib& pptlib);
}
public enum JetBrains.Interop.WinApi.OleCmdErr : Enum {
    public int value__;
    public static OleCmdErr OLECMDERR_E_FIRST;
    public static OleCmdErr OLECMDERR_E_NOTSUPPORTED;
    public static OleCmdErr OLECMDERR_E_DISABLED;
    public static OleCmdErr OLECMDERR_E_NOHELP;
    public static OleCmdErr OLECMDERR_E_CANCELED;
    public static OleCmdErr OLECMDERR_E_UNKNOWNGROUP;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.OPENFILENAME : ValueType {
    public UInt32 lStructSize;
    public IntPtr hwndOwner;
    public IntPtr hInstance;
    public IntPtr lpstrFilter;
    public IntPtr lpstrCustomFilter;
    public UInt32 nMaxCustFilter;
    public UInt32 nFilterIndex;
    public IntPtr lpstrFile;
    public UInt32 nMaxFile;
    public IntPtr lpstrFileTitle;
    public UInt32 nMaxFileTitle;
    public IntPtr lpstrInitialDir;
    public IntPtr lpstrTitle;
    public OFN Flags;
    public ushort nFileOffset;
    public ushort nFileExtension;
    public IntPtr lpstrDefExt;
    public IntPtr lCustData;
    public Void* lpfnHook;
    public IntPtr lpTemplateName;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.OVERLAPPED : ValueType {
    public UIntPtr Internal;
    public UIntPtr InternalHigh;
    public ulong PointerOrOffset;
    public Void* hEvent;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.PAINTSTRUCT : ValueType {
    public Void* hdc;
    public int fErase;
    public RECT rcPaint;
    public int fRestore;
    public int fIncUpdate;
    [FixedBufferAttribute("System.Byte", "32")]
public <rgbReserved>e__FixedBuffer rgbReserved;
}
public enum JetBrains.Interop.WinApi.PDTIMER_FLAGS : Enum {
    public int value__;
    public static PDTIMER_FLAGS PDTIMER_RESET;
    public static PDTIMER_FLAGS PDTIMER_PAUSE;
    public static PDTIMER_FLAGS PDTIMER_RESUME;
}
public enum JetBrains.Interop.WinApi.PeekMessageOptions : Enum {
    public UInt32 value__;
    public static PeekMessageOptions PM_NOREMOVE;
    public static PeekMessageOptions PM_REMOVE;
    public static PeekMessageOptions PM_NOYIELD;
    public static PeekMessageOptions PM_QS_INPUT;
    public static PeekMessageOptions PM_QS_POSTMESSAGE;
    public static PeekMessageOptions PM_QS_PAINT;
    public static PeekMessageOptions PM_QS_SENDMESSAGE;
}
public enum JetBrains.Interop.WinApi.PenStyles : Enum {
    public int value__;
    public static PenStyles PS_SOLID;
    public static PenStyles PS_DASH;
    public static PenStyles PS_DOT;
    public static PenStyles PS_DASHDOT;
    public static PenStyles PS_DASHDOTDOT;
    public static PenStyles PS_NULL;
    public static PenStyles PS_INSIDEFRAME;
    public static PenStyles PS_USERSTYLE;
    public static PenStyles PS_ALTERNATE;
    public static PenStyles PS_STYLE_MASK;
    public static PenStyles PS_ENDCAP_ROUND;
    public static PenStyles PS_ENDCAP_SQUARE;
    public static PenStyles PS_ENDCAP_FLAT;
    public static PenStyles PS_ENDCAP_MASK;
    public static PenStyles PS_JOIN_ROUND;
    public static PenStyles PS_JOIN_BEVEL;
    public static PenStyles PS_JOIN_MITER;
    public static PenStyles PS_JOIN_MASK;
    public static PenStyles PS_COSMETIC;
    public static PenStyles PS_GEOMETRIC;
    public static PenStyles PS_TYPE_MASK;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.POINT : ValueType {
    public int x;
    public int y;
    public static POINT Empty;
    public int X { get; }
    public int Y { get; }
    public POINT(int x, int y);
    public POINT(int dw);
    public POINT(IntPtr lParam);
    private static POINT();
    public int get_X();
    public int get_Y();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static POINT op_Explicit(IntPtr lParam);
    public static bool op_Equality(POINT one, POINT two);
    public static bool op_Inequality(POINT one, POINT two);
    public static IntPtr op_Explicit(POINT point);
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.PrintWindowFlags : Enum {
    public UInt32 value__;
    public static PrintWindowFlags PRF_CHECKVISIBLE;
    public static PrintWindowFlags PRF_NONCLIENT;
    public static PrintWindowFlags PRF_CLIENT;
    public static PrintWindowFlags PRF_ERASEBKGND;
    public static PrintWindowFlags PRF_CHILDREN;
    public static PrintWindowFlags PRF_OWNED;
}
public static class JetBrains.Interop.WinApi.Privileges : object {
    public static void Adjust(Process process, NameAndAttributes[] data, bool throwIfNotAllAssigned);
    private static LUID GetLUID(string seName);
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.PROCESSENTRY32 : ValueType {
    public UInt32 dwSize;
    public UInt32 cntUsage;
    public UInt32 th32ProcessID;
    public IntPtr th32DefaultHeapID;
    public UInt32 th32ModuleID;
    public UInt32 cntThreads;
    public UInt32 th32ParentProcessID;
    public int pcPriClassBase;
    public UInt32 dwFlags;
    [FixedBufferAttribute("System.Char", "260")]
public <szExeFile>e__FixedBuffer szExeFile;
    public static PROCESSENTRY32 NewWithSize();
}
public enum JetBrains.Interop.WinApi.ProcessorArchitecture : Enum {
    public ushort value__;
    public static ProcessorArchitecture PROCESSOR_ARCHITECTURE_INTEL;
    public static ProcessorArchitecture PROCESSOR_ARCHITECTURE_MIPS;
    public static ProcessorArchitecture PROCESSOR_ARCHITECTURE_ALPHA;
    public static ProcessorArchitecture PROCESSOR_ARCHITECTURE_PPC;
    public static ProcessorArchitecture PROCESSOR_ARCHITECTURE_SHX;
    public static ProcessorArchitecture PROCESSOR_ARCHITECTURE_ARM;
    public static ProcessorArchitecture PROCESSOR_ARCHITECTURE_IA64;
    public static ProcessorArchitecture PROCESSOR_ARCHITECTURE_ALPHA64;
    public static ProcessorArchitecture PROCESSOR_ARCHITECTURE_MSIL;
    public static ProcessorArchitecture PROCESSOR_ARCHITECTURE_AMD64;
    public static ProcessorArchitecture PROCESSOR_ARCHITECTURE_IA32_ON_WIN64;
    public static ProcessorArchitecture PROCESSOR_ARCHITECTURE_NEUTRAL;
    public static ProcessorArchitecture PROCESSOR_ARCHITECTURE_ARM64;
    public static ProcessorArchitecture PROCESSOR_ARCHITECTURE_UNKNOWN;
}
public enum JetBrains.Interop.WinApi.Product : Enum {
    public UInt32 value__;
    public static Product PRODUCT_UNDEFINED;
    public static Product PRODUCT_ULTIMATE;
    public static Product PRODUCT_HOME_BASIC;
    public static Product PRODUCT_HOME_PREMIUM;
    public static Product PRODUCT_ENTERPRISE;
    public static Product PRODUCT_HOME_BASIC_N;
    public static Product PRODUCT_BUSINESS;
    public static Product PRODUCT_STANDARD_SERVER;
    public static Product PRODUCT_DATACENTER_SERVER;
    public static Product PRODUCT_SMALLBUSINESS_SERVER;
    public static Product PRODUCT_ENTERPRISE_SERVER;
    public static Product PRODUCT_STARTER;
    public static Product PRODUCT_DATACENTER_SERVER_CORE;
    public static Product PRODUCT_STANDARD_SERVER_CORE;
    public static Product PRODUCT_ENTERPRISE_SERVER_CORE;
    public static Product PRODUCT_ENTERPRISE_SERVER_IA64;
    public static Product PRODUCT_BUSINESS_N;
    public static Product PRODUCT_WEB_SERVER;
    public static Product PRODUCT_CLUSTER_SERVER;
    public static Product PRODUCT_HOME_SERVER;
    public static Product PRODUCT_STORAGE_EXPRESS_SERVER;
    public static Product PRODUCT_STORAGE_STANDARD_SERVER;
    public static Product PRODUCT_STORAGE_WORKGROUP_SERVER;
    public static Product PRODUCT_STORAGE_ENTERPRISE_SERVER;
    public static Product PRODUCT_SERVER_FOR_SMALLBUSINESS;
    public static Product PRODUCT_SMALLBUSINESS_SERVER_PREMIUM;
    public static Product PRODUCT_HOME_PREMIUM_N;
    public static Product PRODUCT_ENTERPRISE_N;
    public static Product PRODUCT_ULTIMATE_N;
    public static Product PRODUCT_WEB_SERVER_CORE;
    public static Product PRODUCT_MEDIUMBUSINESS_SERVER_MANAGEMENT;
    public static Product PRODUCT_MEDIUMBUSINESS_SERVER_SECURITY;
    public static Product PRODUCT_MEDIUMBUSINESS_SERVER_MESSAGING;
    public static Product PRODUCT_SMALLBUSINESS_SERVER_PRIME;
    public static Product PRODUCT_HOME_PREMIUM_SERVER;
    public static Product PRODUCT_SERVER_FOR_SMALLBUSINESS_V;
    public static Product PRODUCT_STANDARD_SERVER_V;
    public static Product PRODUCT_DATACENTER_SERVER_V;
    public static Product PRODUCT_ENTERPRISE_SERVER_V;
    public static Product PRODUCT_DATACENTER_SERVER_CORE_V;
    public static Product PRODUCT_STANDARD_SERVER_CORE_V;
    public static Product PRODUCT_ENTERPRISE_SERVER_CORE_V;
    public static Product PRODUCT_HYPERV;
    public static Product PRODUCT_STORAGE_EXPRESS_SERVER_CORE;
    public static Product PRODUCT_STORAGE_STANDARD_SERVER_CORE;
    public static Product PRODUCT_STORAGE_WORKGROUP_SERVER_CORE;
    public static Product PRODUCT_STORAGE_ENTERPRISE_SERVER_CORE;
    public static Product PRODUCT_STARTER_N;
    public static Product PRODUCT_PROFESSIONAL;
    public static Product PRODUCT_PROFESSIONAL_N;
    public static Product PRODUCT_SB_SOLUTION_SERVER;
    public static Product PRODUCT_SERVER_FOR_SB_SOLUTIONS;
    public static Product PRODUCT_STANDARD_SERVER_SOLUTIONS;
    public static Product PRODUCT_STANDARD_SERVER_SOLUTIONS_CORE;
    public static Product PRODUCT_SB_SOLUTION_SERVER_EM;
    public static Product PRODUCT_SERVER_FOR_SB_SOLUTIONS_EM;
    public static Product PRODUCT_SOLUTION_EMBEDDEDSERVER;
    public static Product PRODUCT_SOLUTION_EMBEDDEDSERVER_CORE;
    public static Product PRODUCT_ESSENTIALBUSINESS_SERVER_MGMT;
    public static Product PRODUCT_ESSENTIALBUSINESS_SERVER_ADDL;
    public static Product PRODUCT_ESSENTIALBUSINESS_SERVER_MGMTSVC;
    public static Product PRODUCT_ESSENTIALBUSINESS_SERVER_ADDLSVC;
    public static Product PRODUCT_SMALLBUSINESS_SERVER_PREMIUM_CORE;
    public static Product PRODUCT_CLUSTER_SERVER_V;
    public static Product PRODUCT_EMBEDDED;
    public static Product PRODUCT_STARTER_E;
    public static Product PRODUCT_HOME_BASIC_E;
    public static Product PRODUCT_HOME_PREMIUM_E;
    public static Product PRODUCT_PROFESSIONAL_E;
    public static Product PRODUCT_ENTERPRISE_E;
    public static Product PRODUCT_ULTIMATE_E;
    public static Product PRODUCT_ENTERPRISE_EVALUATION;
    public static Product PRODUCT_PRERELEASE;
    public static Product PRODUCT_MULTIPOINT_STANDARD_SERVER;
    public static Product PRODUCT_MULTIPOINT_PREMIUM_SERVER;
    public static Product PRODUCT_STANDARD_EVALUATION_SERVER;
    public static Product PRODUCT_DATACENTER_EVALUATION_SERVER;
    public static Product PRODUCT_PRERELEASE_ARM;
    public static Product PRODUCT_PRERELEASE_N;
    public static Product PRODUCT_ENTERPRISE_N_EVALUATION;
    public static Product PRODUCT_EMBEDDEDINDUSTRY;
    public static Product PRODUCT_EMBEDDEDA;
    public static Product PRODUCT_EMBEDDEDINDUSTRYA;
    public static Product PRODUCT_EMBEDDEDAUTOMOTIVE;
    public static Product PRODUCT_EMBEDDEDE;
    public static Product PRODUCT_EMBEDDEDINDUSTRYAE;
    public static Product PRODUCT_EMBEDDEDINDUSTRYE;
    public static Product PRODUCT_THINPC;
    public static Product PRODUCT_PROFESSIONAL_PLUS;
    public static Product PRODUCT_STORAGE_WORKGROUP_EVALUATION_SERVER;
    public static Product PRODUCT_STORAGE_STANDARD_EVALUATION_SERVER;
    public static Product PRODUCT_UNLICENSED;
}
public enum JetBrains.Interop.WinApi.ProductType : Enum {
    public ushort value__;
    public static ProductType VER_NT_WORKSTATION;
    public static ProductType VER_NT_DOMAIN_CONTROLLER;
    public static ProductType VER_NT_SERVER;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.PROGDLG_FLAGS : Enum {
    public int value__;
    public static PROGDLG_FLAGS PROGDLG_NORMAL;
    public static PROGDLG_FLAGS PROGDLG_MODAL;
    public static PROGDLG_FLAGS PROGDLG_AUTOTIME;
    public static PROGDLG_FLAGS PROGDLG_NOTIME;
    public static PROGDLG_FLAGS PROGDLG_NOMINIMIZE;
    public static PROGDLG_FLAGS PROGDLG_NOPROGRESSBAR;
    public static PROGDLG_FLAGS PROGDLG_MARQUEEPROGRESS;
    public static PROGDLG_FLAGS PROGDLG_NOCANCEL;
}
public static class JetBrains.Interop.WinApi.PsApiDll : object {
    public static int EnumProcessModules(Void* hProcess, Void** lphModule, UInt32 cb, UInt32* lpcbNeeded);
    public static UInt32 GetModuleFileNameExW(Void* hProcess, Void* hModule, StringBuilder lpFilename, UInt32 size);
    public static UInt32 GetProcessImageFileNameW(Void* hProcess, StringBuilder lpFilename, UInt32 size);
    public static int GetProcessMemoryInfo(Void* hProcess, PROCESS_MEMORY_COUNTERS_EX* pCounters, UInt32 cb);
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.QueueStatusFlags : Enum {
    public UInt32 value__;
    public static QueueStatusFlags QS_KEY;
    public static QueueStatusFlags QS_MOUSEMOVE;
    public static QueueStatusFlags QS_MOUSEBUTTON;
    public static QueueStatusFlags QS_POSTMESSAGE;
    public static QueueStatusFlags QS_TIMER;
    public static QueueStatusFlags QS_PAINT;
    public static QueueStatusFlags QS_SENDMESSAGE;
    public static QueueStatusFlags QS_HOTKEY;
    public static QueueStatusFlags QS_ALLPOSTMESSAGE;
    public static QueueStatusFlags QS_RAWINPUT;
    public static QueueStatusFlags QS_MOUSE;
    public static QueueStatusFlags QS_INPUT;
    public static QueueStatusFlags QS_ALLEVENTS;
    public static QueueStatusFlags QS_ALLINPUT;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.RECT : ValueType {
    public int left;
    public int top;
    public int right;
    public int bottom;
    public static RECT Empty;
    public int Width { get; }
    public int Height { get; }
    public int Left { get; }
    public int Top { get; }
    public SIZE Size { get; }
    public int Right { get; }
    public int Bottom { get; }
    public RECT(int left, int top, int right, int bottom);
    private static RECT();
    public int get_Width();
    public int get_Height();
    public int get_Left();
    public int get_Top();
    public SIZE get_Size();
    public int get_Right();
    public int get_Bottom();
    public virtual string ToString();
    public static RECT FromSize(int left, int top, int width, int height);
    public static RECT FromSize(POINT location, SIZE size);
    public sealed virtual bool Equals(RECT other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(RECT left, RECT right);
    public static bool op_Inequality(RECT left, RECT right);
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.RegOpenCreateDisposition : Enum {
    public UInt32 value__;
    public static RegOpenCreateDisposition REG_CREATED_NEW_KEY;
    public static RegOpenCreateDisposition REG_OPENED_EXISTING_KEY;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.RegOpenCreateOptions : Enum {
    public UInt32 value__;
    public static RegOpenCreateOptions REG_OPTION_RESERVED;
    public static RegOpenCreateOptions REG_OPTION_NON_VOLATILE;
    public static RegOpenCreateOptions REG_OPTION_VOLATILE;
    public static RegOpenCreateOptions REG_OPTION_CREATE_LINK;
    public static RegOpenCreateOptions REG_OPTION_BACKUP_RESTORE;
    public static RegOpenCreateOptions REG_OPTION_OPEN_LINK;
    public static RegOpenCreateOptions REG_LEGAL_OPTION;
}
public enum JetBrains.Interop.WinApi.RegValueType : Enum {
    public UInt32 value__;
    public static RegValueType REG_NONE;
    public static RegValueType REG_SZ;
    public static RegValueType REG_EXPAND_SZ;
    public static RegValueType REG_BINARY;
    public static RegValueType REG_DWORD;
    public static RegValueType REG_DWORD_LITTLE_ENDIAN;
    public static RegValueType REG_DWORD_BIG_ENDIAN;
    public static RegValueType REG_LINK;
    public static RegValueType REG_MULTI_SZ;
    public static RegValueType REG_RESOURCE_LIST;
    public static RegValueType REG_FULL_RESOURCE_DESCRIPTOR;
    public static RegValueType REG_RESOURCE_REQUIREMENTS_LIST;
    public static RegValueType REG_QWORD;
    public static RegValueType REG_QWORD_LITTLE_ENDIAN;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.REPARSE_DATA_BUFFER_HEADER : ValueType {
    public UInt32 ReparseTag;
    public ushort ReparseDataLength;
    public ushort Reserved;
    [FixedBufferAttribute("System.Byte", "1")]
public <ReparseData>e__FixedBuffer ReparseData;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.REPARSE_DATA_MOUNT_POINT : ValueType {
    public ushort SubstituteNameOffset;
    public ushort SubstituteNameLength;
    public ushort PrintNameOffset;
    public ushort PrintNameLength;
    [FixedBufferAttribute("System.UInt16", "1")]
public <PathBuffer>e__FixedBuffer PathBuffer;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.REPARSE_GUID_DATA_BUFFER : ValueType {
    public UInt32 ReparseTag;
    public ushort ReparseDataLength;
    public ushort Reserved;
    public Guid ReparseGuid;
    [FixedBufferAttribute("System.Byte", "1")]
public <DataBuffer>e__FixedBuffer DataBuffer;
}
public class JetBrains.Interop.WinApi.RM_PROCESS_INFO : ValueType {
    public RM_UNIQUE_PROCESS Process;
    [FixedBufferAttribute("System.Char", "256")]
public <strAppName>e__FixedBuffer strAppName;
    [FixedBufferAttribute("System.Char", "64")]
public <strServiceShortName>e__FixedBuffer strServiceShortName;
    public RM_APP_TYPE ApplicationType;
    public UInt32 AppStatus;
    public UInt32 TSSessionId;
    public int bRestartable;
}
public class JetBrains.Interop.WinApi.RM_UNIQUE_PROCESS : ValueType {
    public UInt32 dwProcessId;
    public FILE_TIME ProcessStartTime;
}
public static class JetBrains.Interop.WinApi.RstrtmgrDll : object {
    public static UInt32 RmEndSession(UInt32 dwSessionHandle);
    public static UInt32 RmGetList(UInt32 dwSessionHandle, UInt32* pnProcInfoNeeded, UInt32* pnProcInfo, RM_PROCESS_INFO* rgAffectedApps, UInt32* lpdwRebootReasons);
    public static UInt32 RmRegisterResources(UInt32 dwSessionHandle, UInt32 nFiles, Char** rgsFilenames, UInt32 nApplications, RM_UNIQUE_PROCESS* rgApplications, UInt32 nServices, Char** rgsServiceNames);
    public static UInt32 RmStartSession(UInt32* pSessionHandle, UInt32 dwSessionFlags, Char* strSessionKey);
}
public enum JetBrains.Interop.WinApi.SC_STATUS_TYPE : Enum {
    public int value__;
    public static SC_STATUS_TYPE SC_STATUS_PROCESS_INFO;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.ScrollWindowFlags : Enum {
    public UInt32 value__;
    public static ScrollWindowFlags SW_ERASE;
    public static ScrollWindowFlags SW_INVALIDATE;
    public static ScrollWindowFlags SW_SCROLLCHILDREN;
    public static ScrollWindowFlags SW_SMOOTHSCROLL;
}
public static class JetBrains.Interop.WinApi.Secur32Dll : object {
    public static byte GetUserNameExW(EXTENDED_NAME_FORMAT NameFormat, Char* lpNameBuffer, UInt32* lpnSize);
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.SECURITY_ATTRIBUTES : ValueType {
    public UInt32 nLength;
    public Void* lpSecurityDescriptor;
    public int bInheritHandle;
}
public static class JetBrains.Interop.WinApi.SeName : object {
    public static string SE_CREATE_TOKEN_NAME;
    public static string SE_ASSIGNPRIMARYTOKEN_NAME;
    public static string SE_LOCK_MEMORY_NAME;
    public static string SE_INCREASE_QUOTA_NAME;
    public static string SE_UNSOLICITED_INPUT_NAME;
    public static string SE_MACHINE_ACCOUNT_NAME;
    public static string SE_TCB_NAME;
    public static string SE_SECURITY_NAME;
    public static string SE_TAKE_OWNERSHIP_NAME;
    public static string SE_LOAD_DRIVER_NAME;
    public static string SE_SYSTEM_PROFILE_NAME;
    public static string SE_SYSTEMTIME_NAME;
    public static string SE_PROF_SINGLE_PROCESS_NAME;
    public static string SE_INC_BASE_PRIORITY_NAME;
    public static string SE_CREATE_PAGEFILE_NAME;
    public static string SE_CREATE_PERMANENT_NAME;
    public static string SE_BACKUP_NAME;
    public static string SE_RESTORE_NAME;
    public static string SE_SHUTDOWN_NAME;
    public static string SE_DEBUG_NAME;
    public static string SE_AUDIT_NAME;
    public static string SE_SYSTEM_ENVIRONMENT_NAME;
    public static string SE_CHANGE_NOTIFY_NAME;
    public static string SE_REMOTE_SHUTDOWN_NAME;
    public static string SE_UNDOCK_NAME;
    public static string SE_SYNC_AGENT_NAME;
    public static string SE_ENABLE_DELEGATION_NAME;
    public static string SE_MANAGE_VOLUME_NAME;
    public static string SE_IMPERSONATE_NAME;
    public static string SE_CREATE_GLOBAL_NAME;
    public static string SE_TRUSTED_CREDMAN_ACCESS_NAME;
    public static string SE_RELABEL_NAME;
    public static string SE_INC_WORKING_SET_NAME;
    public static string SE_TIME_ZONE_NAME;
    public static string SE_CREATE_SYMBOLIC_LINK_NAME;
    private static SeName();
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.SePrivilege : Enum {
    public UInt32 value__;
    public static SePrivilege SE_PRIVILEGE_ENABLED_BY_DEFAULT;
    public static SePrivilege SE_PRIVILEGE_ENABLED;
    public static SePrivilege SE_PRIVILEGE_REMOVED;
    public static SePrivilege SE_PRIVILEGE_USED_FOR_ACCESS;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.SERVICE_STATUS_PROCESS : ValueType {
    public UInt32 dwServiceType;
    public UInt32 dwCurrentState;
    public UInt32 dwControlsAccepted;
    public UInt32 dwWin32ExitCode;
    public UInt32 dwServiceSpecificExitCode;
    public UInt32 dwCheckPoint;
    public UInt32 dwWaitHint;
    public UInt32 dwProcessId;
    public UInt32 dwServiceFlags;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.ServiceAccept : Enum {
    public UInt32 value__;
    public static ServiceAccept SERVICE_ACCEPT_STOP;
    public static ServiceAccept SERVICE_ACCEPT_PAUSE_CONTINUE;
    public static ServiceAccept SERVICE_ACCEPT_SHUTDOWN;
    public static ServiceAccept SERVICE_ACCEPT_PARAMCHANGE;
    public static ServiceAccept SERVICE_ACCEPT_NETBINDCHANGE;
    public static ServiceAccept SERVICE_ACCEPT_HARDWAREPROFILECHANGE;
    public static ServiceAccept SERVICE_ACCEPT_POWEREVENT;
    public static ServiceAccept SERVICE_ACCEPT_SESSIONCHANGE;
    public static ServiceAccept SERVICE_ACCEPT_PRESHUTDOWN;
}
public enum JetBrains.Interop.WinApi.ServiceFlags : Enum {
    public UInt32 value__;
    public static ServiceFlags SERVICE_RUNS_IN_SYSTEM_PROCESS;
}
public enum JetBrains.Interop.WinApi.ServiceState : Enum {
    public UInt32 value__;
    public static ServiceState SERVICE_STOPPED;
    public static ServiceState SERVICE_START_PENDING;
    public static ServiceState SERVICE_STOP_PENDING;
    public static ServiceState SERVICE_RUNNING;
    public static ServiceState SERVICE_CONTINUE_PENDING;
    public static ServiceState SERVICE_PAUSE_PENDING;
    public static ServiceState SERVICE_PAUSED;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.ServiceType : Enum {
    public UInt32 value__;
    public static ServiceType SERVICE_KERNEL_DRIVER;
    public static ServiceType SERVICE_FILE_SYSTEM_DRIVER;
    public static ServiceType SERVICE_ADAPTER;
    public static ServiceType SERVICE_RECOGNIZER_DRIVER;
    public static ServiceType SERVICE_DRIVER;
    public static ServiceType SERVICE_WIN32_OWN_PROCESS;
    public static ServiceType SERVICE_WIN32_SHARE_PROCESS;
    public static ServiceType SERVICE_WIN32;
    public static ServiceType SERVICE_INTERACTIVE_PROCESS;
    public static ServiceType SERVICE_TYPE_ALL;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.SetLayeredWindowAttributesFlags : Enum {
    public UInt32 value__;
    public static SetLayeredWindowAttributesFlags LWA_COLORKEY;
    public static SetLayeredWindowAttributesFlags LWA_ALPHA;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.SetWindowPosFlags : Enum {
    public UInt32 value__;
    public static SetWindowPosFlags SWP_NOSIZE;
    public static SetWindowPosFlags SWP_NOMOVE;
    public static SetWindowPosFlags SWP_NOZORDER;
    public static SetWindowPosFlags SWP_NOREDRAW;
    public static SetWindowPosFlags SWP_NOACTIVATE;
    public static SetWindowPosFlags SWP_FRAMECHANGED;
    public static SetWindowPosFlags SWP_SHOWWINDOW;
    public static SetWindowPosFlags SWP_HIDEWINDOW;
    public static SetWindowPosFlags SWP_NOCOPYBITS;
    public static SetWindowPosFlags SWP_NOOWNERZORDER;
    public static SetWindowPosFlags SWP_NOSENDCHANGING;
    public static SetWindowPosFlags SWP_DEFERERASE;
    public static SetWindowPosFlags SWP_ASYNCWINDOWPOS;
    public static SetWindowPosFlags SWP_NOREPOSITION;
    public static SetWindowPosFlags SWP_DRAWFRAME;
}
public static class JetBrains.Interop.WinApi.ShcoreDll : object {
    public static int GetDpiForMonitor(Void* hmonitor, int dpiType, UInt32* dpiX, UInt32* dpiY);
    public static int GetProcessDpiAwareness(Void* hprocess, PROCESS_DPI_AWARENESS* value);
    public static int SetProcessDpiAwareness(int value);
}
public static class JetBrains.Interop.WinApi.Shell32Dll : object {
    public static int SHGetKnownFolderPath(Guid* rfid, UInt32 dwFlags, Void* hToken, Char** ppszPath);
    public static int Shell_NotifyIconW(UInt32 message, Void* pnid);
    public static int ShellExecuteExW(SHELLEXECUTEINFO* lpExecInfo);
    public static UIntPtr SHGetFileInfoW(string pszPath, UInt32 dwFileAttributes, SHFILEINFO* psfi, UInt32 cbFileInfo, UInt32 uFlags);
    public static void SHChangeNotify(SHChangeNotifyEvents wEventId, SHChangeNotifyFlags uFlags, Void* dwItem1, Void* dwItem2);
    public static UInt32 DragQueryFile(Void* hDrop, UInt32 iFile, Char* lpszFile, UInt32 cch);
    public static UInt32 RegisterClipboardFormat(string format);
    public static int SHOpenFolderAndSelectItems(IntPtr pidlFolder, UInt32 cidl, IntPtr[] apidl, UInt32 dwFlags);
    public static int SHParseDisplayName(string name, IntPtr bindingContext, IntPtr& pidl, UInt32 sfgaoIn, UInt32& psfgaoOut);
}
public class JetBrains.Interop.WinApi.SHELLEXECUTEINFO : ValueType {
    public UInt32 cbSize;
    public UInt32 fMask;
    public Void* hwnd;
    public Char* lpVerb;
    public Char* lpFile;
    public Char* lpParameters;
    public Char* lpDirectory;
    public int nShow;
    public Void* hInstApp;
    public Void* lpIDList;
    public Void* lpClass;
    public Void* hkeyClass;
    public UInt32 dwHotKey;
    public Void* hIconOrhMonitor;
    public Void* hProcess;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.SHELLEXECUTEINFO_MASK : Enum {
    public UInt32 value__;
    public static SHELLEXECUTEINFO_MASK SEE_MASK_DEFAULT;
    public static SHELLEXECUTEINFO_MASK SEE_MASK_CLASSNAME;
    public static SHELLEXECUTEINFO_MASK SEE_MASK_CLASSKEY;
    public static SHELLEXECUTEINFO_MASK SEE_MASK_IDLIST;
    public static SHELLEXECUTEINFO_MASK SEE_MASK_INVOKEIDLIST;
    public static SHELLEXECUTEINFO_MASK SEE_MASK_ICON;
    public static SHELLEXECUTEINFO_MASK SEE_MASK_HOTKEY;
    public static SHELLEXECUTEINFO_MASK SEE_MASK_NOCLOSEPROCESS;
    public static SHELLEXECUTEINFO_MASK SEE_MASK_CONNECTNETDRV;
    public static SHELLEXECUTEINFO_MASK SEE_MASK_NOASYNC;
    public static SHELLEXECUTEINFO_MASK SEE_MASK_FLAG_DDEWAIT;
    public static SHELLEXECUTEINFO_MASK SEE_MASK_DOENVSUBST;
    public static SHELLEXECUTEINFO_MASK SEE_MASK_FLAG_NO_UI;
    public static SHELLEXECUTEINFO_MASK SEE_MASK_UNICODE;
    public static SHELLEXECUTEINFO_MASK SEE_MASK_NO_CONSOLE;
    public static SHELLEXECUTEINFO_MASK SEE_MASK_ASYNCOK;
    public static SHELLEXECUTEINFO_MASK SEE_MASK_NOQUERYCLASSSTORE;
    public static SHELLEXECUTEINFO_MASK SEE_MASK_HMONITOR;
    public static SHELLEXECUTEINFO_MASK SEE_MASK_NOZONECHECKS;
    public static SHELLEXECUTEINFO_MASK SEE_MASK_WAITFORINPUTIDLE;
    public static SHELLEXECUTEINFO_MASK SEE_MASK_FLAG_LOG_USAGE;
}
public class JetBrains.Interop.WinApi.SHFILEINFO : ValueType {
    public Void* hIcon;
    public int iIcon;
    public UInt32 dwAttributes;
    [FixedBufferAttribute("System.UInt16", "260")]
public <szDisplayName>e__FixedBuffer szDisplayName;
    [FixedBufferAttribute("System.UInt16", "80")]
public <szTypeName>e__FixedBuffer szTypeName;
}
public static class JetBrains.Interop.WinApi.SHFolderDll : object {
    public static int SHGetFolderPathW(Void* hwndOwner, int nFolder, Void* hToken, UInt32 dwFlags, StringBuilder lpszPath);
}
public enum JetBrains.Interop.WinApi.SHGFP_TYPE : Enum {
    public int value__;
    public static SHGFP_TYPE SHGFP_TYPE_CURRENT;
    public static SHGFP_TYPE SHGFP_TYPE_DEFAULT;
}
public static class JetBrains.Interop.WinApi.ShlwapiDll : object {
    public static int SHLoadIndirectString(string pszSource, Char* pszOutBuf, UInt32 cchOutBuf, Void** ppvReserved);
    public static int SHDeleteKeyW(Void* hkey, string pszSubKey);
    public static Byte* StrFormatByteSize64A(long qdw, Byte* pszBuf, UInt32 cchBuf);
    public static Byte* StrFormatByteSizeW(long qdw, Char* pszBuf, UInt32 cchBuf);
}
public enum JetBrains.Interop.WinApi.ShowWindowCommands : Enum {
    public int value__;
    public static ShowWindowCommands SW_HIDE;
    public static ShowWindowCommands SW_SHOWNORMAL;
    public static ShowWindowCommands SW_NORMAL;
    public static ShowWindowCommands SW_SHOWMINIMIZED;
    public static ShowWindowCommands SW_SHOWMAXIMIZED;
    public static ShowWindowCommands SW_MAXIMIZE;
    public static ShowWindowCommands SW_SHOWNOACTIVATE;
    public static ShowWindowCommands SW_SHOW;
    public static ShowWindowCommands SW_MINIMIZE;
    public static ShowWindowCommands SW_SHOWMINNOACTIVE;
    public static ShowWindowCommands SW_SHOWNA;
    public static ShowWindowCommands SW_RESTORE;
    public static ShowWindowCommands SW_SHOWDEFAULT;
    public static ShowWindowCommands SW_FORCEMINIMIZE;
    public static ShowWindowCommands SW_MAX;
}
public enum JetBrains.Interop.WinApi.StockCursors : Enum {
    public int value__;
    public static StockCursors IDC_APPSTARTING;
    public static StockCursors IDC_ARROW;
    public static StockCursors IDC_CROSS;
    public static StockCursors IDC_HAND;
    public static StockCursors IDC_HELP;
    public static StockCursors IDC_IBEAM;
    public static StockCursors IDC_ICON;
    public static StockCursors IDC_NO;
    public static StockCursors IDC_SIZE;
    public static StockCursors IDC_SIZEALL;
    public static StockCursors IDC_SIZENESW;
    public static StockCursors IDC_SIZENS;
    public static StockCursors IDC_SIZENWSE;
    public static StockCursors IDC_SIZEWE;
    public static StockCursors IDC_UPARROW;
    public static StockCursors IDC_WAIT;
}
public enum JetBrains.Interop.WinApi.StockLogicalObjects : Enum {
    public int value__;
    public static StockLogicalObjects BLACK_BRUSH;
    public static StockLogicalObjects DKGRAY_BRUSH;
    public static StockLogicalObjects DC_BRUSH;
    public static StockLogicalObjects GRAY_BRUSH;
    public static StockLogicalObjects HOLLOW_BRUSH;
    public static StockLogicalObjects LTGRAY_BRUSH;
    public static StockLogicalObjects NULL_BRUSH;
    public static StockLogicalObjects WHITE_BRUSH;
    public static StockLogicalObjects BLACK_PEN;
    public static StockLogicalObjects DC_PEN;
    public static StockLogicalObjects WHITE_PEN;
    public static StockLogicalObjects ANSI_FIXED_FONT;
    public static StockLogicalObjects ANSI_VAR_FONT;
    public static StockLogicalObjects DEVICE_DEFAULT_FONT;
    public static StockLogicalObjects DEFAULT_GUI_FONT;
    public static StockLogicalObjects OEM_FIXED_FONT;
    public static StockLogicalObjects SYSTEM_FONT;
    public static StockLogicalObjects SYSTEM_FIXED_FONT;
    public static StockLogicalObjects DEFAULT_PALETTE;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.SuiteMask : Enum {
    public ushort value__;
    public static SuiteMask VER_SUITE_SMALLBUSINESS;
    public static SuiteMask VER_SUITE_ENTERPRISE;
    public static SuiteMask VER_SUITE_BACKOFFICE;
    public static SuiteMask VER_SUITE_COMMUNICATIONS;
    public static SuiteMask VER_SUITE_TERMINAL;
    public static SuiteMask VER_SUITE_SMALLBUSINESS_RESTRICTED;
    public static SuiteMask VER_SUITE_EMBEDDEDNT;
    public static SuiteMask VER_SUITE_DATACENTER;
    public static SuiteMask VER_SUITE_SINGLEUSERTS;
    public static SuiteMask VER_SUITE_PERSONAL;
    public static SuiteMask VER_SUITE_BLADE;
    public static SuiteMask VER_SUITE_EMBEDDED_RESTRICTED;
    public static SuiteMask VER_SUITE_SECURITY_APPLIANCE;
    public static SuiteMask VER_SUITE_STORAGE_SERVER;
    public static SuiteMask VER_SUITE_COMPUTE_SERVER;
    public static SuiteMask VER_SUITE_WH_SERVER;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.SYSTEM_INFO : ValueType {
    public ushort wProcessorArchitecture;
    public ushort wReserved;
    public UInt32 dwPageSize;
    public IntPtr lpMinimumApplicationAddress;
    public IntPtr lpMaximumApplicationAddress;
    public UIntPtr dwActiveProcessorMask;
    public UInt32 dwNumberOfProcessors;
    public UInt32 dwProcessorType;
    public UInt32 dwAllocationGranularity;
    public ushort wProcessorLevel;
    public ushort wProcessorRevision;
}
public enum JetBrains.Interop.WinApi.SystemMetricsCodes : Enum {
    public int value__;
    public static SystemMetricsCodes SM_CXSCREEN;
    public static SystemMetricsCodes SM_CYSCREEN;
    public static SystemMetricsCodes SM_CXVSCROLL;
    public static SystemMetricsCodes SM_CYHSCROLL;
    public static SystemMetricsCodes SM_CYCAPTION;
    public static SystemMetricsCodes SM_CXBORDER;
    public static SystemMetricsCodes SM_CYBORDER;
    public static SystemMetricsCodes SM_CXDLGFRAME;
    public static SystemMetricsCodes SM_CYDLGFRAME;
    public static SystemMetricsCodes SM_CYVTHUMB;
    public static SystemMetricsCodes SM_CXHTHUMB;
    public static SystemMetricsCodes SM_CXICON;
    public static SystemMetricsCodes SM_CYICON;
    public static SystemMetricsCodes SM_CXCURSOR;
    public static SystemMetricsCodes SM_CYCURSOR;
    public static SystemMetricsCodes SM_CYMENU;
    public static SystemMetricsCodes SM_CXFULLSCREEN;
    public static SystemMetricsCodes SM_CYFULLSCREEN;
    public static SystemMetricsCodes SM_CYKANJIWINDOW;
    public static SystemMetricsCodes SM_MOUSEPRESENT;
    public static SystemMetricsCodes SM_CYVSCROLL;
    public static SystemMetricsCodes SM_CXHSCROLL;
    public static SystemMetricsCodes SM_DEBUG;
    public static SystemMetricsCodes SM_SWAPBUTTON;
    public static SystemMetricsCodes SM_RESERVED1;
    public static SystemMetricsCodes SM_RESERVED2;
    public static SystemMetricsCodes SM_RESERVED3;
    public static SystemMetricsCodes SM_RESERVED4;
    public static SystemMetricsCodes SM_CXMIN;
    public static SystemMetricsCodes SM_CYMIN;
    public static SystemMetricsCodes SM_CXSIZE;
    public static SystemMetricsCodes SM_CYSIZE;
    public static SystemMetricsCodes SM_CXFRAME;
    public static SystemMetricsCodes SM_CYFRAME;
    public static SystemMetricsCodes SM_CXMINTRACK;
    public static SystemMetricsCodes SM_CYMINTRACK;
    public static SystemMetricsCodes SM_CXDOUBLECLK;
    public static SystemMetricsCodes SM_CYDOUBLECLK;
    public static SystemMetricsCodes SM_CXICONSPACING;
    public static SystemMetricsCodes SM_CYICONSPACING;
    public static SystemMetricsCodes SM_MENUDROPALIGNMENT;
    public static SystemMetricsCodes SM_PENWINDOWS;
    public static SystemMetricsCodes SM_DBCSENABLED;
    public static SystemMetricsCodes SM_CMOUSEBUTTONS;
    public static SystemMetricsCodes SM_CXFIXEDFRAME;
    public static SystemMetricsCodes SM_CYFIXEDFRAME;
    public static SystemMetricsCodes SM_CXSIZEFRAME;
    public static SystemMetricsCodes SM_CYSIZEFRAME;
    public static SystemMetricsCodes SM_SECURE;
    public static SystemMetricsCodes SM_CXEDGE;
    public static SystemMetricsCodes SM_CYEDGE;
    public static SystemMetricsCodes SM_CXMINSPACING;
    public static SystemMetricsCodes SM_CYMINSPACING;
    public static SystemMetricsCodes SM_CXSMICON;
    public static SystemMetricsCodes SM_CYSMICON;
    public static SystemMetricsCodes SM_CYSMCAPTION;
    public static SystemMetricsCodes SM_CXSMSIZE;
    public static SystemMetricsCodes SM_CYSMSIZE;
    public static SystemMetricsCodes SM_CXMENUSIZE;
    public static SystemMetricsCodes SM_CYMENUSIZE;
    public static SystemMetricsCodes SM_ARRANGE;
    public static SystemMetricsCodes SM_CXMINIMIZED;
    public static SystemMetricsCodes SM_CYMINIMIZED;
    public static SystemMetricsCodes SM_CXMAXTRACK;
    public static SystemMetricsCodes SM_CYMAXTRACK;
    public static SystemMetricsCodes SM_CXMAXIMIZED;
    public static SystemMetricsCodes SM_CYMAXIMIZED;
    public static SystemMetricsCodes SM_NETWORK;
    public static SystemMetricsCodes SM_CLEANBOOT;
    public static SystemMetricsCodes SM_CXDRAG;
    public static SystemMetricsCodes SM_CYDRAG;
    public static SystemMetricsCodes SM_SHOWSOUNDS;
    public static SystemMetricsCodes SM_CXMENUCHECK;
    public static SystemMetricsCodes SM_CYMENUCHECK;
    public static SystemMetricsCodes SM_SLOWMACHINE;
    public static SystemMetricsCodes SM_MIDEASTENABLED;
    public static SystemMetricsCodes SM_MOUSEWHEELPRESENT;
    public static SystemMetricsCodes SM_XVIRTUALSCREEN;
    public static SystemMetricsCodes SM_YVIRTUALSCREEN;
    public static SystemMetricsCodes SM_CXVIRTUALSCREEN;
    public static SystemMetricsCodes SM_CYVIRTUALSCREEN;
    public static SystemMetricsCodes SM_CMONITORS;
    public static SystemMetricsCodes SM_SAMEDISPLAYFORMAT;
    public static SystemMetricsCodes SM_IMMENABLED;
    public static SystemMetricsCodes SM_CXFOCUSBORDER;
    public static SystemMetricsCodes SM_CYFOCUSBORDER;
    public static SystemMetricsCodes SM_TABLETPC;
    public static SystemMetricsCodes SM_MEDIACENTER;
    public static SystemMetricsCodes SM_STARTER;
    public static SystemMetricsCodes SM_SERVERR2;
    public static SystemMetricsCodes SM_MOUSEHORIZONTALWHEELPRESENT;
    public static SystemMetricsCodes SM_CXPADDEDBORDER;
    public static SystemMetricsCodes SM_CMETRICS;
    public static SystemMetricsCodes SM_REMOTESESSION;
    public static SystemMetricsCodes SM_SHUTTINGDOWN;
    public static SystemMetricsCodes SM_REMOTECONTROL;
    public static SystemMetricsCodes SM_CARETBLINKINGENABLED;
    public static SystemMetricsCodes SM_CONVERTIBLESLATEMODE;
    public static SystemMetricsCodes SM_SYSTEMDOCKED;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.SYSTEMTIME : ValueType {
    public ushort Year;
    public ushort Month;
    public ushort DayOfWeek;
    public ushort Day;
    public ushort Hour;
    public ushort Minute;
    public ushort Second;
    public ushort Milliseconds;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.TH32CS : Enum {
    public UInt32 value__;
    public static TH32CS TH32CS_SNAPHEAPLIST;
    public static TH32CS TH32CS_SNAPPROCESS;
    public static TH32CS TH32CS_SNAPTHREAD;
    public static TH32CS TH32CS_SNAPMODULE;
    public static TH32CS TH32CS_SNAPMODULE32;
    public static TH32CS TH32CS_SNAPALL;
    public static TH32CS TH32CS_INHERIT;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.TIME_ZONE_INFORMATION : ValueType {
    public int Bias;
    public Char[] StandardName;
    public SYSTEMTIME StandardDate;
    public int StandardBias;
    public Char[] DaylightName;
    public SYSTEMTIME DaylightDate;
    public int DaylightBias;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.TOKEN_PRIVILEGES : ValueType {
    public UInt32 PrivilegeCount;
    public LUID_AND_ATTRIBUTES Privileges;
    public static UInt32 SizeOf(int nPrivileges);
    public static void StructureToPtr(TOKEN_PRIVILEGES* pTokenPrivileges, IEnumerable`1<LUID_AND_ATTRIBUTES> privileges);
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.TokenSpecificAccessRights : Enum {
    public UInt32 value__;
    public static TokenSpecificAccessRights TOKEN_ASSIGN_PRIMARY;
    public static TokenSpecificAccessRights TOKEN_DUPLICATE;
    public static TokenSpecificAccessRights TOKEN_IMPERSONATE;
    public static TokenSpecificAccessRights TOKEN_QUERY;
    public static TokenSpecificAccessRights TOKEN_QUERY_SOURCE;
    public static TokenSpecificAccessRights TOKEN_ADJUST_PRIVILEGES;
    public static TokenSpecificAccessRights TOKEN_ADJUST_GROUPS;
    public static TokenSpecificAccessRights TOKEN_ADJUST_DEFAULT;
    public static TokenSpecificAccessRights TOKEN_ADJUST_SESSIONID;
    public static TokenSpecificAccessRights TOKEN_ALL_ACCESS_P;
    public static TokenSpecificAccessRights TOKEN_ALL_ACCESS;
    public static TokenSpecificAccessRights TOKEN_READ;
    public static TokenSpecificAccessRights TOKEN_WRITE;
    public static TokenSpecificAccessRights TOKEN_EXECUTE;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.TRACE_GUID_PROPERTIES : ValueType {
    public Guid Guid;
    public UInt32 GuidType;
    public UInt32 LoggerId;
    public UInt32 EnableLevel;
    public UInt32 EnableFlags;
    public byte IsEnable;
    private byte padding1;
    private byte padding2;
    private byte padding3;
}
public class JetBrains.Interop.WinApi.ULARGE_INTEGER : ValueType {
    public ulong QuadPart;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.UNICODE_STRING : ValueType {
    public ushort Length;
    public ushort MaximumLength;
    public UInt16* Buffer;
    [CanBeNullAttribute]
public string GetString();
    public static UNICODE_STRING* AllocAndInit(string source);
}
public static class JetBrains.Interop.WinApi.User32Dll : object {
    public static ushort RegisterClassExW(WNDCLASSEXW* lpwcx);
    public static Void* CreateWindowExW(UInt32 dwExStyle, Char* lpClassName, Char* lpWindowName, UInt32 dwStyle, int x, int y, int nWidth, int nHeight, Void* hWndParent, Void* hMenu, Void* hInstance, Void* lpParam);
    public static IntPtr DefWindowProcW(Void* hwnd, UInt32 msg, IntPtr wParam, IntPtr lParam);
    public static UInt32 BringWindowToTop(Void* hWnd);
    public static IntPtr CallWindowProcW(Void* lpPrevWndFunc, Void* hWnd, UInt32 Msg, IntPtr wParam, IntPtr lParam);
    public static int ClientToScreen(Void* hWnd, POINT* lpPoint);
    public static Void* CreateDesktopW(string lpszDesktop, string lpszDevice, Void* pDevmode, UInt32 dwFlags, UInt32 dwDesiredAccess, Void* lpsa);
    public static int DestroyIcon(Void* hIcon);
    public static int DestroyWindow(Void* hWnd);
    public static IntPtr DispatchMessageW(MSG* lpmsg);
    public static int EnableWindow(Void* hWnd, int bEnable);
    public static int EnumChildWindows(Void* hWndParent, Void* lpEnumFunc, IntPtr lParam);
    public static int EnumThreadWindows(UInt32 dwThreadId, Void* lpfn, IntPtr lParam);
    public static int EnumWindows(Void* lpEnumFunc, IntPtr lParam);
    public static int FillRect(Void* hDC, RECT* lprc, Void* hbr);
    public static UInt32 FlashWindowEx(FLASHWINFO* pfwi);
    public static Void* GetActiveWindow();
    public static Void* GetAncestor(Void* hwnd, UInt32 gaFlags);
    public static int GetClassNameW(Void* hWnd, Char* lpClassName, int nMaxCount);
    public static int GetClientRect(Void* hWnd, RECT* lpRect);
    public static int GetCursorInfo(CURSORINFO* pci);
    [ObsoleteAttribute("Use GetCursorInfo instead. This function fails in 32-bit apps on 64-bit systems up to NT 6.0 when lpPoint is above 2GB.")]
public static int GetCursorPos(POINT* lpPoint);
    public static Void* GetDlgItem(Void* hDlg, int nIDDlgItem);
    public static Void* GetFocus();
    public static Void* GetForegroundWindow();
    public static int GetGUIThreadInfo(UInt32 idThread, GUITHREADINFO* lpgui);
    public static short GetKeyState(int nVirtKey);
    public static int GetKeyboardState(Byte[] lpKeyState);
    public static int GetMessageW(MSG* lpMsg, Void* hWnd, UInt32 wMsgFilterMin, UInt32 wMsgFilterMax);
    public static Void* GetParent(Void* hWnd);
    public static int GetSystemMetrics(int nIndex);
    public static Void* GetThreadDesktop(UInt32 dwThreadId);
    public static Void* GetWindowLongPtrW(Void* hWnd, int nIndex);
    public static int GetWindowRect(Void* hWnd, RECT* lpRect);
    public static int GetWindowTextW(Void* hWnd, Char* lpString, int nMaxCount);
    public static UInt32 GetWindowThreadProcessId(Void* hWnd, UInt32* lpdwProcessId);
    public static int InvalidateRect(Void* hWnd, RECT* lpRect, int bErase);
    public static int IsChild(Void* hWndParent, Void* hWnd);
    public static int IsIconic(Void* hWnd);
    public static int IsWindow(Void* hWnd);
    public static int IsWindowEnabled(Void* hWnd);
    public static int IsWindowVisible(Void* hWnd);
    public static UInt32 IsZoomed(Void* hWnd);
    public static UInt32 IsWindowUnicode(Void* hWnd);
    public static Void* LoadCursorW(Void* hInstance, Char* lpCursorName);
    public static int LoadStringW(Void* hInstance, UInt32 uID, UInt16* lpBuffer, int nBufferMax);
    public static int MapWindowPoints(Void* hWndFrom, Void* hWndTo, POINT* lpPoints, UInt32 cPoints);
    public static int MessageBoxW(Void* hWnd, string lpText, string lpCaption, UInt32 uType);
    public static UInt32 MsgWaitForMultipleObjects(UInt32 nCount, Void** pHandles, int bWaitAll, UInt32 dwMilliseconds, UInt32 dwWakeMask);
    public static UInt32 MsgWaitForMultipleObjectsEx(UInt32 nCount, Void** pHandles, UInt32 dwMilliseconds, UInt32 dwWakeMask, UInt32 dwFlags);
    public static Void* OpenDesktopW(string lpszDesktop, UInt32 dwFlags, int fInherit, UInt32 dwDesiredAccess);
    public static Void* OpenWindowStationW(string lpszWinSta, int fInherit, UInt32 dwDesiredAccess);
    public static int PeekMessageW(MSG* lpMsg, Void* hWnd, UInt32 wMsgFilterMin, UInt32 wMsgFilterMax, UInt32 wRemoveMsg);
    public static int PostMessageW(Void* hWnd, UInt32 Msg, IntPtr wParam, IntPtr lParam);
    public static int PostThreadMessageW(UInt32 idThread, UInt32 Msg, IntPtr wParam, IntPtr lParam);
    public static void PostQuitMessage(int exitCode);
    public static int WaitMessage();
    public static int PrintWindow(Void* hwnd, Void* hdcBlt, UInt32 nFlags);
    public static int ScreenToClient(Void* hWnd, POINT* lpPoint);
    public static IntPtr SendMessageW(Void* hWnd, UInt32 Msg, IntPtr wParam, IntPtr lParam);
    public static UInt32 InSendMessage();
    public static IntPtr SendMessageTimeoutW(Void* hWnd, UInt32 Msg, IntPtr wParam, IntPtr lParam, UInt32 fuFlags, UInt32 uTimeout, UInt32* lpdwResult);
    public static int SendNotifyMessageW(Void* hwnd, UInt32 msg, IntPtr wParam, IntPtr lParam);
    public static IntPtr SendMessageCallbackW(Void* hwnd, UInt32 msg, IntPtr wParam, IntPtr lParam, Void* lpCallBack, UInt32* pdwData);
    public static Void* SetActiveWindow(Void* hWnd);
    public static Void* SetCursor(Void* hCursor);
    public static UInt32 SetCursorPos(int x, int y);
    public static Void* SetFocus(Void* hWnd);
    public static int SetForegroundWindow(Void* hWnd);
    public static int AllowSetForegroundWindow(UInt32 dwProcessId);
    public static int SetLayeredWindowAttributes(Void* hwnd, UInt32 crKey, byte bAlpha, UInt32 dwFlags);
    public static Void* SetParent(Void* hWndChild, Void* hWndNewParent);
    public static int SetProcessWindowStation(Void* hWinSta);
    public static int SetThreadDesktop(Void* hDesktop);
    public static Void* SetWindowLongPtrW(Void* hWnd, int nIndex, Void* dwNewLong);
    public static UInt32 ShowWindow(Void* hWnd, int nCmdShow);
    public static void SwitchToThisWindow(Void* hWnd, UInt32 fAltTab);
    public static int TranslateMessage(MSG* lpMsg);
    public static int UpdateLayeredWindow(Void* hwnd, Void* hdcDst, POINT* pptDst, SIZE* psize, Void* hdcSrc, POINT* pptSrc, UInt32 crKey, BLENDFUNCTION* pblend, UInt32 dwFlags);
    public static int ValidateRect(Void* hWnd, RECT* lpRect);
    public static Void* WindowFromPoint(POINT Point);
    public static Void* GetSystemMenu(Void* hWnd, int bRevert);
    public static int EnableMenuItem(Void* hMenu, UInt32 uIDEnableItem, UInt32 uEnable);
    public static UInt32 RegisterWindowMessageW(string lpString);
    public static Void* GetDesktopWindow();
    [ObsoleteAttribute("Note  This function has been superseded. Use SendInput instead. ©MSDN")]
public static void mouse_event(UInt32 dwFlags, UInt32 dx, UInt32 dy, UInt32 dwData, UIntPtr dwExtraInfo);
    [ObsoleteAttribute("Note  This function has been superseded. Use SendInput instead. ©MSDN")]
public static void keybd_event(byte bVk, byte bScan, UInt32 dwFlags, UIntPtr dwExtraInfo);
    public static short VkKeyScanW(char ch);
    public static short GetAsyncKeyState(int vKey);
    public static int HideCaret(Void* hWnd);
    public static int ShowCaret(Void* hWnd);
    public static int SetWindowRgn(Void* hWnd, Void* hRgn, int bRedraw);
    public static int SetWindowPos(Void* hWnd, Void* hWndInsertAfter, int X, int Y, int cx, int cy, UInt32 uFlags);
    public static Void* GetCapture();
    public static Void* SetCapture(Void* hWnd);
    public static int ReleaseCapture();
    public static int MoveWindow(Void* hWnd, int X, int Y, int nWidth, int nHeight, int bRepaint);
    public static Void* BeginPaint(Void* hwnd, PAINTSTRUCT* lpPaint);
    public static int EndPaint(Void* hWnd, PAINTSTRUCT* lpPaint);
    public static int ScrollWindowEx(Void* hWnd, int dx, int dy, RECT* prcScroll, RECT* prcClip, Void* hrgnUpdate, RECT* prcUpdate, UInt32 flags);
    public static UInt32 GetCaretBlinkTime();
    public static int AdjustWindowRectEx(RECT* lpRect, UInt32 dwStyle, int bMenu, UInt32 dwExStyle);
    public static Void* GetDC(Void* hWnd);
    public static int ReleaseDC(Void* hWnd, Void* hDC);
    public static int DrawFrameControl(Void* hdc, RECT* lprc, UInt32 uType, UInt32 uState);
    public static IntPtr CallNextHookEx(Void* hhook, int code, IntPtr wParam, IntPtr lParam);
    public static int UnhookWindowsHookEx(Void* hhook);
    public static Void* SetWindowsHookExW(int idHook, HOOKPROC lpfn, Void* hMod, UInt32 dwThreadId);
    public static int SetPropW(Void* hWnd, string lpString, Void* hData);
    public static Void* RemovePropW(Void* hWnd, string lpString);
    public static int SystemParametersInfoW(UInt32 uiAction, UInt32 uiParam, Void* pvParam, UInt32 fWinIni);
    public static Void* FindWindowW(string lpClassName, string lpWindowName);
    public static int OpenClipboard(Void* hWndNewOwner);
    public static int CloseClipboard();
    public static int IsClipboardFormatAvailable(UInt32 format);
    public static Void* GetClipboardData(UInt32 uFormat);
    public static int EnumDisplayMonitors(Void* hdc, RECT* lprcClip, Void* lpfnEnum, IntPtr dwData);
    public static Void* MonitorFromPoint(POINT pt, UInt32 dwFlags);
    public static Void* MonitorFromRect(RECT* lprc, UInt32 dwFlags);
    public static int SetProcessDPIAware();
    public static Void* MonitorFromWindow(Void* hwnd, UInt32 dwFlags);
    public static int GetMonitorInfoW(Void* hMonitor, MONITORINFO* lpmi);
    public static int EnableNonClientDpiScaling(Void* hwnd);
    public static Void* WindowFromDC(Void* hDC);
    public static int GetSystemMetricsForDpi(int nIndex, UInt32 dpi);
    public static UInt32 GetDpiForWindow(Void* hwnd);
    public static UInt32 GetDpiForSystem();
    public static UInt32 GetSystemDpiForProcess(Void* hProcess);
    public static int SystemParametersInfoForDpi(UInt32 uiAction, UInt32 uiParam, Void* pvParam, UInt32 fWinIni, UInt32 dpi);
    public static int GetDlgCtrlID(Void* hwnd);
}
public static class JetBrains.Interop.WinApi.UxThemeDll : object {
    public static int CloseThemeData(Void* hTheme);
    public static int DrawThemeBackground(Void* hTheme, Void* hdc, int iPartId, int iStateId, RECT* pRect, RECT* pClipRect);
    public static Void* OpenThemeData(Void* hwnd, string pszClassList);
}
public static class JetBrains.Interop.WinApi.VersionDll : object {
    public static UInt32 GetFileVersionInfoSizeW(string lptstrFilename, UInt32* lpdwHandle);
    public static int GetFileVersionInfoW(string lptstrFilename, UInt32 dwHandle, UInt32 dwLen, Void* lpData);
    public static int VerQueryValueW(Void* pBlock, string lpSubBlock, Void** lplpBuffer, UInt32* puLen);
}
public enum JetBrains.Interop.WinApi.VirtualKey : Enum {
    public int value__;
    public static VirtualKey VK_LBUTTON;
    public static VirtualKey VK_RBUTTON;
    public static VirtualKey VK_CANCEL;
    public static VirtualKey VK_MBUTTON;
    public static VirtualKey VK_XBUTTON1;
    public static VirtualKey VK_XBUTTON2;
    public static VirtualKey VK_BACK;
    public static VirtualKey VK_TAB;
    public static VirtualKey VK_CLEAR;
    public static VirtualKey VK_RETURN;
    public static VirtualKey VK_SHIFT;
    public static VirtualKey VK_CONTROL;
    public static VirtualKey VK_MENU;
    public static VirtualKey VK_PAUSE;
    public static VirtualKey VK_CAPITAL;
    public static VirtualKey VK_KANA;
    public static VirtualKey VK_HANGEUL;
    public static VirtualKey VK_HANGUL;
    public static VirtualKey VK_JUNJA;
    public static VirtualKey VK_FINAL;
    public static VirtualKey VK_HANJA;
    public static VirtualKey VK_KANJI;
    public static VirtualKey VK_ESCAPE;
    public static VirtualKey VK_CONVERT;
    public static VirtualKey VK_NONCONVERT;
    public static VirtualKey VK_ACCEPT;
    public static VirtualKey VK_MODECHANGE;
    public static VirtualKey VK_SPACE;
    public static VirtualKey VK_PRIOR;
    public static VirtualKey VK_NEXT;
    public static VirtualKey VK_END;
    public static VirtualKey VK_HOME;
    public static VirtualKey VK_LEFT;
    public static VirtualKey VK_UP;
    public static VirtualKey VK_RIGHT;
    public static VirtualKey VK_DOWN;
    public static VirtualKey VK_SELECT;
    public static VirtualKey VK_PRINT;
    public static VirtualKey VK_EXECUTE;
    public static VirtualKey VK_SNAPSHOT;
    public static VirtualKey VK_INSERT;
    public static VirtualKey VK_DELETE;
    public static VirtualKey VK_HELP;
    public static VirtualKey VK_0;
    public static VirtualKey VK_1;
    public static VirtualKey VK_2;
    public static VirtualKey VK_3;
    public static VirtualKey VK_4;
    public static VirtualKey VK_5;
    public static VirtualKey VK_6;
    public static VirtualKey VK_7;
    public static VirtualKey VK_8;
    public static VirtualKey VK_9;
    public static VirtualKey VK_A;
    public static VirtualKey VK_B;
    public static VirtualKey VK_C;
    public static VirtualKey VK_D;
    public static VirtualKey VK_E;
    public static VirtualKey VK_F;
    public static VirtualKey VK_G;
    public static VirtualKey VK_H;
    public static VirtualKey VK_I;
    public static VirtualKey VK_J;
    public static VirtualKey VK_K;
    public static VirtualKey VK_L;
    public static VirtualKey VK_M;
    public static VirtualKey VK_N;
    public static VirtualKey VK_O;
    public static VirtualKey VK_P;
    public static VirtualKey VK_Q;
    public static VirtualKey VK_R;
    public static VirtualKey VK_S;
    public static VirtualKey VK_T;
    public static VirtualKey VK_U;
    public static VirtualKey VK_V;
    public static VirtualKey VK_W;
    public static VirtualKey VK_X;
    public static VirtualKey VK_Y;
    public static VirtualKey VK_Z;
    public static VirtualKey VK_LWIN;
    public static VirtualKey VK_RWIN;
    public static VirtualKey VK_APPS;
    public static VirtualKey VK_SLEEP;
    public static VirtualKey VK_NUMPAD0;
    public static VirtualKey VK_NUMPAD1;
    public static VirtualKey VK_NUMPAD2;
    public static VirtualKey VK_NUMPAD3;
    public static VirtualKey VK_NUMPAD4;
    public static VirtualKey VK_NUMPAD5;
    public static VirtualKey VK_NUMPAD6;
    public static VirtualKey VK_NUMPAD7;
    public static VirtualKey VK_NUMPAD8;
    public static VirtualKey VK_NUMPAD9;
    public static VirtualKey VK_MULTIPLY;
    public static VirtualKey VK_ADD;
    public static VirtualKey VK_SEPARATOR;
    public static VirtualKey VK_SUBTRACT;
    public static VirtualKey VK_DECIMAL;
    public static VirtualKey VK_DIVIDE;
    public static VirtualKey VK_F1;
    public static VirtualKey VK_F2;
    public static VirtualKey VK_F3;
    public static VirtualKey VK_F4;
    public static VirtualKey VK_F5;
    public static VirtualKey VK_F6;
    public static VirtualKey VK_F7;
    public static VirtualKey VK_F8;
    public static VirtualKey VK_F9;
    public static VirtualKey VK_F10;
    public static VirtualKey VK_F11;
    public static VirtualKey VK_F12;
    public static VirtualKey VK_F13;
    public static VirtualKey VK_F14;
    public static VirtualKey VK_F15;
    public static VirtualKey VK_F16;
    public static VirtualKey VK_F17;
    public static VirtualKey VK_F18;
    public static VirtualKey VK_F19;
    public static VirtualKey VK_F20;
    public static VirtualKey VK_F21;
    public static VirtualKey VK_F22;
    public static VirtualKey VK_F23;
    public static VirtualKey VK_F24;
    public static VirtualKey VK_NUMLOCK;
    public static VirtualKey VK_SCROLL;
    public static VirtualKey VK_OEM_NEC_EQUAL;
    public static VirtualKey VK_OEM_FJ_JISHO;
    public static VirtualKey VK_OEM_FJ_MASSHOU;
    public static VirtualKey VK_OEM_FJ_TOUROKU;
    public static VirtualKey VK_OEM_FJ_LOYA;
    public static VirtualKey VK_OEM_FJ_ROYA;
    public static VirtualKey VK_LSHIFT;
    public static VirtualKey VK_RSHIFT;
    public static VirtualKey VK_LCONTROL;
    public static VirtualKey VK_RCONTROL;
    public static VirtualKey VK_LMENU;
    public static VirtualKey VK_RMENU;
    public static VirtualKey VK_BROWSER_BACK;
    public static VirtualKey VK_BROWSER_FORWARD;
    public static VirtualKey VK_BROWSER_REFRESH;
    public static VirtualKey VK_BROWSER_STOP;
    public static VirtualKey VK_BROWSER_SEARCH;
    public static VirtualKey VK_BROWSER_FAVORITES;
    public static VirtualKey VK_BROWSER_HOME;
    public static VirtualKey VK_VOLUME_MUTE;
    public static VirtualKey VK_VOLUME_DOWN;
    public static VirtualKey VK_VOLUME_UP;
    public static VirtualKey VK_MEDIA_NEXT_TRACK;
    public static VirtualKey VK_MEDIA_PREV_TRACK;
    public static VirtualKey VK_MEDIA_STOP;
    public static VirtualKey VK_MEDIA_PLAY_PAUSE;
    public static VirtualKey VK_LAUNCH_MAIL;
    public static VirtualKey VK_LAUNCH_MEDIA_SELECT;
    public static VirtualKey VK_LAUNCH_APP1;
    public static VirtualKey VK_LAUNCH_APP2;
    public static VirtualKey VK_OEM_1;
    public static VirtualKey VK_OEM_PLUS;
    public static VirtualKey VK_OEM_COMMA;
    public static VirtualKey VK_OEM_MINUS;
    public static VirtualKey VK_OEM_PERIOD;
    public static VirtualKey VK_OEM_2;
    public static VirtualKey VK_OEM_3;
    public static VirtualKey VK_OEM_4;
    public static VirtualKey VK_OEM_5;
    public static VirtualKey VK_OEM_6;
    public static VirtualKey VK_OEM_7;
    public static VirtualKey VK_OEM_8;
    public static VirtualKey VK_OEM_AX;
    public static VirtualKey VK_OEM_102;
    public static VirtualKey VK_ICO_HELP;
    public static VirtualKey VK_ICO_00;
    public static VirtualKey VK_PROCESSKEY;
    public static VirtualKey VK_ICO_CLEAR;
    public static VirtualKey VK_PACKET;
    public static VirtualKey VK_OEM_RESET;
    public static VirtualKey VK_OEM_JUMP;
    public static VirtualKey VK_OEM_PA1;
    public static VirtualKey VK_OEM_PA2;
    public static VirtualKey VK_OEM_PA3;
    public static VirtualKey VK_OEM_WSCTRL;
    public static VirtualKey VK_OEM_CUSEL;
    public static VirtualKey VK_OEM_ATTN;
    public static VirtualKey VK_OEM_FINISH;
    public static VirtualKey VK_OEM_COPY;
    public static VirtualKey VK_OEM_AUTO;
    public static VirtualKey VK_OEM_ENLW;
    public static VirtualKey VK_OEM_BACKTAB;
    public static VirtualKey VK_ATTN;
    public static VirtualKey VK_CRSEL;
    public static VirtualKey VK_EXSEL;
    public static VirtualKey VK_EREOF;
    public static VirtualKey VK_PLAY;
    public static VirtualKey VK_ZOOM;
    public static VirtualKey VK_NONAME;
    public static VirtualKey VK_PA1;
    public static VirtualKey VK_OEM_CLEAR;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.VS_FIXEDFILEINFO : ValueType {
    public UInt32 dwSignature;
    public UInt32 dwStrucVersion;
    public UInt32 dwFileVersionMS;
    public UInt32 dwFileVersionLS;
    public UInt32 dwProductVersionMS;
    public UInt32 dwProductVersionLS;
    public UInt32 dwFileFlagsMask;
    public UInt32 dwFileFlags;
    public UInt32 dwFileOS;
    public UInt32 dwFileType;
    public UInt32 dwFileSubtype;
    public UInt32 dwFileDateMS;
    public UInt32 dwFileDateLS;
    public Version FileVersion { get; }
    public Version ProductVersion { get; }
    public Version get_FileVersion();
    public Version get_ProductVersion();
}
public class JetBrains.Interop.WinApi.Win32InteropException : ApplicationException {
    public Win32InteropException(string message, Exception innerException);
    public Win32InteropException(string message);
}
public static class JetBrains.Interop.WinApi.WinDef : object {
    public static UInt32 CBM_INIT;
    public static UInt32 CCHDEVICENAME;
    public static UInt32 CCHFORMNAME;
    public static string DesktopDefault;
    public static UInt32 INFINITE;
    public static Void* INVALID_HANDLE_VALUE;
    public static int MAX_MODULE_NAME32;
    public static int MAX_PATH;
    public static UInt32 PIPE_UNLIMITED_INSTANCES;
    public static int MAXIMUM_WAIT_OBJECTS;
    public static int SizeOfVariant;
    public static int USER_TIMER_MAXIMUM;
    public static int USER_TIMER_MINIMUM;
    public static string WinSta0;
    public static string DLGWINDOWCLASS;
    private static WinDef();
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.WindowClassStyles : Enum {
    public UInt32 value__;
    public static WindowClassStyles CS_BYTEALIGNCLIENT;
    public static WindowClassStyles CS_BYTEALIGNWINDOW;
    public static WindowClassStyles CS_CLASSDC;
    public static WindowClassStyles CS_DBLCLKS;
    public static WindowClassStyles CS_DROPSHADOW;
    public static WindowClassStyles CS_GLOBALCLASS;
    public static WindowClassStyles CS_HREDRAW;
    public static WindowClassStyles CS_NOCLOSE;
    public static WindowClassStyles CS_OWNDC;
    public static WindowClassStyles CS_PARENTDC;
    public static WindowClassStyles CS_SAVEBITS;
    public static WindowClassStyles CS_VREDRAW;
    public static WindowClassStyles CS_IME;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.WindowExStyles : Enum {
    public UInt32 value__;
    public static WindowExStyles WS_EX_DLGMODALFRAME;
    public static WindowExStyles WS_EX_NOPARENTNOTIFY;
    public static WindowExStyles WS_EX_TOPMOST;
    public static WindowExStyles WS_EX_ACCEPTFILES;
    public static WindowExStyles WS_EX_TRANSPARENT;
    public static WindowExStyles WS_EX_MDICHILD;
    public static WindowExStyles WS_EX_TOOLWINDOW;
    public static WindowExStyles WS_EX_WINDOWEDGE;
    public static WindowExStyles WS_EX_CLIENTEDGE;
    public static WindowExStyles WS_EX_CONTEXTHELP;
    public static WindowExStyles WS_EX_RIGHT;
    public static WindowExStyles WS_EX_LEFT;
    public static WindowExStyles WS_EX_RTLREADING;
    public static WindowExStyles WS_EX_LTRREADING;
    public static WindowExStyles WS_EX_LEFTSCROLLBAR;
    public static WindowExStyles WS_EX_RIGHTSCROLLBAR;
    public static WindowExStyles WS_EX_CONTROLPARENT;
    public static WindowExStyles WS_EX_STATICEDGE;
    public static WindowExStyles WS_EX_APPWINDOW;
    public static WindowExStyles WS_EX_OVERLAPPEDWINDOW;
    public static WindowExStyles WS_EX_PALETTEWINDOW;
    public static WindowExStyles WS_EX_LAYERED;
    public static WindowExStyles WS_EX_NOINHERITLAYOUT;
    public static WindowExStyles WS_EX_LAYOUTRTL;
    public static WindowExStyles WS_EX_COMPOSITED;
    public static WindowExStyles WS_EX_NOACTIVATE;
}
public enum JetBrains.Interop.WinApi.WindowLongPtrIndex : Enum {
    public int value__;
    public static WindowLongPtrIndex GWL_EXSTYLE;
    public static WindowLongPtrIndex GWL_STYLE;
    public static WindowLongPtrIndex GWLP_WNDPROC;
    public static WindowLongPtrIndex GWLP_HINSTANCE;
    public static WindowLongPtrIndex GWLP_HWNDPARENT;
    public static WindowLongPtrIndex GWLP_ID;
    public static WindowLongPtrIndex GWLP_USERDATA;
    public static WindowLongPtrIndex DWLP_DLGPROC;
    public static WindowLongPtrIndex DWLP_MSGRESULT;
    public static WindowLongPtrIndex DWLP_USER;
}
public enum JetBrains.Interop.WinApi.WindowsMessages : Enum {
    public UInt32 value__;
    public static WindowsMessages WM_NULL;
    public static WindowsMessages WM_MOVE;
    public static WindowsMessages WM_SIZE;
    public static WindowsMessages WM_ACTIVATE;
    public static WindowsMessages WM_SETFOCUS;
    public static WindowsMessages WM_KILLFOCUS;
    public static WindowsMessages WM_ENABLE;
    public static WindowsMessages WM_GETTEXT;
    public static WindowsMessages WM_GETTEXTLENGTH;
    public static WindowsMessages WM_QUIT;
    public static WindowsMessages WM_QUERYOPEN;
    public static WindowsMessages WM_SYSCOLORCHANGE;
    public static WindowsMessages WM_ACTIVATEAPP;
    public static WindowsMessages WM_FONTCHANGE;
    public static WindowsMessages WM_TIMECHANGE;
    public static WindowsMessages WM_CANCELMODE;
    public static WindowsMessages WM_SETCURSOR;
    public static WindowsMessages WM_GETICON;
    public static WindowsMessages WM_SETICON;
    public static WindowsMessages WM_NCCREATE;
    public static WindowsMessages WM_NCDESTROY;
    public static WindowsMessages WM_NCCALCSIZE;
    public static WindowsMessages WM_NCHITTEST;
    public static WindowsMessages WM_NCPAINT;
    public static WindowsMessages WM_NCACTIVATE;
    public static WindowsMessages WM_NCMOUSEFIRST;
    public static WindowsMessages WM_NCMOUSEMOVE;
    public static WindowsMessages WM_NCLBUTTONDOWN;
    public static WindowsMessages WM_NCLBUTTONUP;
    public static WindowsMessages WM_NCLBUTTONDBLCLK;
    public static WindowsMessages WM_NCRBUTTONDOWN;
    public static WindowsMessages WM_NCRBUTTONUP;
    public static WindowsMessages WM_NCRBUTTONDBLCLK;
    public static WindowsMessages WM_NCMBUTTONDOWN;
    public static WindowsMessages WM_NCMBUTTONUP;
    public static WindowsMessages WM_NCMBUTTONDBLCLK;
    public static WindowsMessages WM_NCMOUSELAST;
    public static WindowsMessages WM_NCXBUTTONDOWN;
    public static WindowsMessages WM_NCXBUTTONUP;
    public static WindowsMessages WM_NCXBUTTONDBLCLK;
    public static WindowsMessages WM_INPUT_DEVICE_CHANGE;
    public static WindowsMessages WM_INPUT;
    public static WindowsMessages WM_NOTIFY;
    public static WindowsMessages WM_INPUTLANGCHANGEREQUEST;
    public static WindowsMessages WM_INPUTLANGCHANGE;
    public static WindowsMessages WM_TCARD;
    public static WindowsMessages WM_HELP;
    public static WindowsMessages WM_USERCHANGED;
    public static WindowsMessages WM_NOTIFYFORMAT;
    public static WindowsMessages WM_USER;
    public static WindowsMessages WM_APP;
    public static WindowsMessages WM_HSCROLL;
    public static WindowsMessages WM_VSCROLL;
    public static WindowsMessages WM_INITMENU;
    public static WindowsMessages WM_INITMENUPOPUP;
    public static WindowsMessages WM_GESTURE;
    public static WindowsMessages WM_GESTURENOTIFY;
    public static WindowsMessages WM_MENUSELECT;
    public static WindowsMessages WM_MENUCHAR;
    public static WindowsMessages WM_PAINT;
    public static WindowsMessages WM_PRINT;
    public static WindowsMessages WM_PRINTCLIENT;
    public static WindowsMessages WM_APPCOMMAND;
    public static WindowsMessages WM_SETREDRAW;
    public static WindowsMessages WM_SETTEXT;
    public static WindowsMessages WM_SHOWWINDOW;
    public static WindowsMessages WM_CONTEXTMENU;
    public static WindowsMessages WM_STYLECHANGING;
    public static WindowsMessages WM_STYLECHANGED;
    public static WindowsMessages WM_DISPLAYCHANGE;
    public static WindowsMessages WM_CREATE;
    public static WindowsMessages WM_DESTROY;
    public static WindowsMessages WM_ERASEBKGND;
    public static WindowsMessages WM_INITDIALOG;
    public static WindowsMessages WM_COMMAND;
    public static WindowsMessages WM_SYSCOMMAND;
    public static WindowsMessages WM_TIMER;
    public static WindowsMessages WM_ENTERIDLE;
    public static WindowsMessages WM_MENURBUTTONUP;
    public static WindowsMessages WM_MENUDRAG;
    public static WindowsMessages WM_MENUGETOBJECT;
    public static WindowsMessages WM_UNINITMENUPOPUP;
    public static WindowsMessages WM_MENUCOMMAND;
    public static WindowsMessages WM_CHANGEUISTATE;
    public static WindowsMessages WM_UPDATEUISTATE;
    public static WindowsMessages WM_QUERYUISTATE;
    public static WindowsMessages WM_CTLCOLORMSGBOX;
    public static WindowsMessages WM_CTLCOLOREDIT;
    public static WindowsMessages WM_CTLCOLORLISTBOX;
    public static WindowsMessages WM_CTLCOLORBTN;
    public static WindowsMessages WM_CTLCOLORDLG;
    public static WindowsMessages WM_CTLCOLORSCROLLBAR;
    public static WindowsMessages WM_CTLCOLORSTATIC;
    public static WindowsMessages WM_MOUSEACTIVATE;
    public static WindowsMessages WM_CHILDACTIVATE;
    public static WindowsMessages WM_QUEUESYNC;
    public static WindowsMessages WM_GETMINMAXINFO;
    public static WindowsMessages WM_PAINTICON;
    public static WindowsMessages WM_ICONERASEBKGND;
    public static WindowsMessages WM_NEXTDLGCTL;
    public static WindowsMessages WM_SPOOLERSTATUS;
    public static WindowsMessages WM_DRAWITEM;
    public static WindowsMessages WM_MEASUREITEM;
    public static WindowsMessages WM_DELETEITEM;
    public static WindowsMessages WM_VKEYTOITEM;
    public static WindowsMessages WM_CHARTOITEM;
    public static WindowsMessages WM_SETFONT;
    public static WindowsMessages WM_GETFONT;
    public static WindowsMessages WM_SETHOTKEY;
    public static WindowsMessages WM_GETHOTKEY;
    public static WindowsMessages WM_QUERYDRAGICON;
    public static WindowsMessages WM_COMPAREITEM;
    public static WindowsMessages WM_WINDOWPOSCHANGING;
    public static WindowsMessages WM_WINDOWPOSCHANGED;
    public static WindowsMessages WM_ENTERMENULOOP;
    public static WindowsMessages WM_EXITMENULOOP;
    public static WindowsMessages WM_NEXTMENU;
    public static WindowsMessages WM_CAPTURECHANGED;
    public static WindowsMessages WM_POWERBROADCAST;
    public static WindowsMessages WM_DEVICECHANGE;
    public static WindowsMessages WM_MDICREATE;
    public static WindowsMessages WM_MDIDESTROY;
    public static WindowsMessages WM_MDIACTIVATE;
    public static WindowsMessages WM_MDIRESTORE;
    public static WindowsMessages WM_MDINEXT;
    public static WindowsMessages WM_MDIMAXIMIZE;
    public static WindowsMessages WM_MDITILE;
    public static WindowsMessages WM_MDICASCADE;
    public static WindowsMessages WM_MDIICONARRANGE;
    public static WindowsMessages WM_MDIGETACTIVE;
    public static WindowsMessages WM_MDISETMENU;
    public static WindowsMessages WM_ENTERSIZEMOVE;
    public static WindowsMessages WM_EXITSIZEMOVE;
    public static WindowsMessages WM_DROPFILES;
    public static WindowsMessages WM_MDIREFRESHMENU;
    public static WindowsMessages WM_POINTERDEVICECHANGE;
    public static WindowsMessages WM_POINTERDEVICEINRANGE;
    public static WindowsMessages WM_POINTERDEVICEOUTOFRANGE;
    public static WindowsMessages WM_TOUCH;
    public static WindowsMessages WM_NCPOINTERUPDATE;
    public static WindowsMessages WM_NCPOINTERDOWN;
    public static WindowsMessages WM_NCPOINTERUP;
    public static WindowsMessages WM_POINTERUPDATE;
    public static WindowsMessages WM_POINTERDOWN;
    public static WindowsMessages WM_POINTERUP;
    public static WindowsMessages WM_POINTERENTER;
    public static WindowsMessages WM_POINTERLEAVE;
    public static WindowsMessages WM_POINTERACTIVATE;
    public static WindowsMessages WM_POINTERCAPTURECHANGED;
    public static WindowsMessages WM_TOUCHHITTESTING;
    public static WindowsMessages WM_POINTERWHEEL;
    public static WindowsMessages WM_POINTERHWHEEL;
    public static WindowsMessages WM_POINTERROUTEDTO;
    public static WindowsMessages WM_POINTERROUTEDAWAY;
    public static WindowsMessages WM_POINTERROUTEDRELEASED;
    public static WindowsMessages WM_IME_SETCONTEXT;
    public static WindowsMessages WM_IME_CONTROL;
    public static WindowsMessages WM_IME_COMPOSITIONFULL;
    public static WindowsMessages WM_IME_SELECT;
    public static WindowsMessages WM_IME_CHAR;
    public static WindowsMessages WM_IME_REQUEST;
    public static WindowsMessages WM_IME_KEYDOWN;
    public static WindowsMessages WM_IME_KEYUP;
    public static WindowsMessages WM_NCMOUSEHOVER;
    public static WindowsMessages WM_THEMECHANGED;
    public static WindowsMessages WM_CLIPBOARDUPDATE;
    public static WindowsMessages WM_CLOSE;
    public static WindowsMessages WM_QUERYENDSESSION;
    public static WindowsMessages WM_ENDSESSION;
    public static WindowsMessages WM_GETDLGCODE;
    public static WindowsMessages WM_SYNCPAINT;
    public static WindowsMessages WM_KEYFIRST;
    public static WindowsMessages WM_KEYDOWN;
    public static WindowsMessages WM_KEYUP;
    public static WindowsMessages WM_CHAR;
    public static WindowsMessages WM_DEADCHAR;
    public static WindowsMessages WM_SYSKEYDOWN;
    public static WindowsMessages WM_SYSKEYUP;
    public static WindowsMessages WM_SYSCHAR;
    public static WindowsMessages WM_SYSDEADCHAR;
    public static WindowsMessages WM_UNICHAR;
    public static WindowsMessages WM_KEYLAST;
    public static WindowsMessages WM_MOUSEFIRST;
    public static WindowsMessages WM_MOUSEMOVE;
    public static WindowsMessages WM_LBUTTONDOWN;
    public static WindowsMessages WM_LBUTTONUP;
    public static WindowsMessages WM_LBUTTONDBLCLK;
    public static WindowsMessages WM_RBUTTONDOWN;
    public static WindowsMessages WM_RBUTTONUP;
    public static WindowsMessages WM_RBUTTONDBLCLK;
    public static WindowsMessages WM_MBUTTONDOWN;
    public static WindowsMessages WM_MBUTTONUP;
    public static WindowsMessages WM_MBUTTONDBLCLK;
    public static WindowsMessages WM_MOUSEWHEEL;
    public static WindowsMessages WM_XBUTTONDOWN;
    public static WindowsMessages WM_XBUTTONUP;
    public static WindowsMessages WM_XBUTTONDBLCLK;
    public static WindowsMessages WM_MOUSELAST;
    public static WindowsMessages WM_MOUSEHWHEEL;
    public static WindowsMessages WM_MOUSEHOVER;
    public static WindowsMessages WM_NCMOUSELEAVE;
    public static WindowsMessages WM_MOUSELEAVE;
    public static WindowsMessages WM_WTSSESSION_CHANGE;
    public static WindowsMessages WM_TABLET_FIRST;
    public static WindowsMessages WM_TABLET_LAST;
    public static WindowsMessages WM_SIZING;
    public static WindowsMessages WM_MOVING;
    public static WindowsMessages WM_IME_STARTCOMPOSITION;
    public static WindowsMessages WM_IME_ENDCOMPOSITION;
    public static WindowsMessages WM_IME_COMPOSITION;
    public static WindowsMessages WM_IME_KEYLAST;
    public static WindowsMessages WM_IME_NOTIFY;
    public static WindowsMessages WM_PARENTNOTIFY;
    public static WindowsMessages WM_REFLECT;
    public static WindowsMessages CCM_FIRST;
    public static WindowsMessages CCM_LAST;
    public static WindowsMessages CCM_SETBKCOLOR;
    public static WindowsMessages CCM_SETCOLORSCHEME;
    public static WindowsMessages CCM_GETCOLORSCHEME;
    public static WindowsMessages CCM_GETDROPTARGET;
    public static WindowsMessages CCM_SETUNICODEFORMAT;
    public static WindowsMessages CCM_GETUNICODEFORMAT;
    public static WindowsMessages CCM_SETVERSION;
    public static WindowsMessages CCM_GETVERSION;
    public static WindowsMessages CCM_SETNOTIFYWINDOW;
    public static WindowsMessages CCM_SETWINDOWTHEME;
    public static WindowsMessages CCM_DPISCALE;
    public static WindowsMessages SB_SETPARTS;
    public static WindowsMessages SB_GETPARTS;
    public static WindowsMessages SB_GETBORDERS;
    public static WindowsMessages SB_SETMINHEIGHT;
    public static WindowsMessages SB_SIMPLE;
    public static WindowsMessages SB_GETRECT;
    public static WindowsMessages SB_ISSIMPLE;
    public static WindowsMessages SB_SETICON;
    public static WindowsMessages SB_SETTIPTEXTA;
    public static WindowsMessages SB_SETTIPTEXTW;
    public static WindowsMessages SB_GETTIPTEXTA;
    public static WindowsMessages SB_GETTIPTEXTW;
    public static WindowsMessages SB_GETICON;
    public static WindowsMessages SB_SETUNICODEFORMAT;
    public static WindowsMessages SB_GETUNICODEFORMAT;
    public static WindowsMessages SB_SETTEXTA;
    public static WindowsMessages SB_SETTEXTW;
    public static WindowsMessages SB_GETTEXTA;
    public static WindowsMessages SB_GETTEXTW;
    public static WindowsMessages SB_GETTEXTLENGTHA;
    public static WindowsMessages SB_GETTEXTLENGTHW;
    public static WindowsMessages SB_SETBKCOLOR;
    public static WindowsMessages SB_SIMPLEID;
    public static WindowsMessages WM_DWMCOMPOSITIONCHANGED;
    public static WindowsMessages WM_DWMNCRENDERINGCHANGED;
    public static WindowsMessages WM_DWMCOLORIZATIONCOLORCHANGED;
    public static WindowsMessages WM_DWMWINDOWMAXIMIZEDCHANGE;
    public static WindowsMessages WM_DWMSENDICONICTHUMBNAIL;
    public static WindowsMessages WM_DWMSENDICONICLIVEPREVIEWBITMAP;
    public static WindowsMessages WM_GETTITLEBARINFOEX;
    public static WindowsMessages WM_HANDHELDFIRST;
    public static WindowsMessages WM_HANDHELDLAST;
    public static WindowsMessages WM_AFXFIRST;
    public static WindowsMessages WM_AFXLAST;
    public static WindowsMessages WM_PENWINFIRST;
    public static WindowsMessages WM_PENWINLAST;
    public static WindowsMessages WM_SETTINGCHANGE;
    public static WindowsMessages WM_WININICHANGE;
    public static WindowsMessages WM_DEVMODECHANGE;
    public static WindowsMessages WM_GETOBJECT;
    public static WindowsMessages WM_COMPACTING;
    public static WindowsMessages WM_COMMNOTIFY;
    public static WindowsMessages WM_POWER;
    public static WindowsMessages WM_COPYDATA;
    public static WindowsMessages WM_CANCELJOURNAL;
    public static WindowsMessages WM_DPICHANGED;
    public static WindowsMessages WM_DPICHANGED_BEFOREPARENT;
    public static WindowsMessages WM_DPICHANGED_AFTERPARENT;
    public static WindowsMessages WM_GETDPISCALEDSIZE;
    public static WindowsMessages WM_CUT;
    public static WindowsMessages WM_COPY;
    public static WindowsMessages WM_PASTE;
    public static WindowsMessages WM_CLEAR;
    public static WindowsMessages WM_UNDO;
    public static WindowsMessages WM_RENDERFORMAT;
    public static WindowsMessages WM_RENDERALLFORMATS;
    public static WindowsMessages WM_DESTROYCLIPBOARD;
    public static WindowsMessages WM_DRAWCLIPBOARD;
    public static WindowsMessages WM_PAINTCLIPBOARD;
    public static WindowsMessages WM_VSCROLLCLIPBOARD;
    public static WindowsMessages WM_SIZECLIPBOARD;
    public static WindowsMessages WM_ASKCBFORMATNAME;
    public static WindowsMessages WM_CHANGECBCHAIN;
    public static WindowsMessages WM_HSCROLLCLIPBOARD;
    public static WindowsMessages WM_QUERYNEWPALETTE;
    public static WindowsMessages WM_PALETTEISCHANGING;
    public static WindowsMessages WM_PALETTECHANGED;
    public static WindowsMessages WM_HOTKEY;
    public static WindowsMessages EM_GETSEL;
    public static WindowsMessages EM_SETSEL;
    public static WindowsMessages EM_GETRECT;
    public static WindowsMessages EM_SETRECT;
    public static WindowsMessages EM_SETRECTNP;
    public static WindowsMessages EM_SCROLL;
    public static WindowsMessages EM_LINESCROLL;
    public static WindowsMessages EM_SCROLLCARET;
    public static WindowsMessages EM_GETMODIFY;
    public static WindowsMessages EM_SETMODIFY;
    public static WindowsMessages EM_GETLINECOUNT;
    public static WindowsMessages EM_LINEINDEX;
    public static WindowsMessages EM_SETHANDLE;
    public static WindowsMessages EM_GETHANDLE;
    public static WindowsMessages EM_GETTHUMB;
    public static WindowsMessages EM_LINELENGTH;
    public static WindowsMessages EM_REPLACESEL;
    public static WindowsMessages EM_GETLINE;
    public static WindowsMessages EM_LIMITTEXT;
    public static WindowsMessages EM_CANUNDO;
    public static WindowsMessages EM_UNDO;
    public static WindowsMessages EM_FMTLINES;
    public static WindowsMessages EM_LINEFROMCHAR;
    public static WindowsMessages EM_SETTABSTOPS;
    public static WindowsMessages EM_SETPASSWORDCHAR;
    public static WindowsMessages EM_EMPTYUNDOBUFFER;
    public static WindowsMessages EM_GETFIRSTVISIBLELINE;
    public static WindowsMessages EM_SETREADONLY;
    public static WindowsMessages EM_SETWORDBREAKPROC;
    public static WindowsMessages EM_GETWORDBREAKPROC;
    public static WindowsMessages EM_GETPASSWORDCHAR;
    public static WindowsMessages EM_SETMARGINS;
    public static WindowsMessages EM_GETMARGINS;
    public static WindowsMessages EM_SETLIMITTEXT;
    public static WindowsMessages EM_GETLIMITTEXT;
    public static WindowsMessages EM_POSFROMCHAR;
    public static WindowsMessages EM_CHARFROMPOS;
    public static WindowsMessages EM_SETIMESTATUS;
    public static WindowsMessages EM_GETIMESTATUS;
    public static WindowsMessages EM_SETCUEBANNER;
    public static WindowsMessages HDM_FIRST;
    public static WindowsMessages HDM_SETITEMA;
    public static WindowsMessages HDM_SETITEMW;
    public static WindowsMessages HDM_GETITEMA;
    public static WindowsMessages HDM_GETITEMW;
    public static WindowsMessages HDM_GETIMAGELIST;
    public static WindowsMessages HDM_SETIMAGELIST;
    public static WindowsMessages LVM_FIRST;
    public static WindowsMessages LVM_GETHEADER;
    public static WindowsMessages LVM_GETITEMW;
    public static WindowsMessages LVM_GETNEXTITEM;
    public static WindowsMessages LVM_GETSELECTEDCOUNT;
    public static WindowsMessages CDM_FIRST;
    public static WindowsMessages CDM_LAST;
    public static WindowsMessages CDM_GETFILEPATH;
    public static WindowsMessages CDM_GETFOLDERPATH;
    public static WindowsMessages CDM_SETCONTROLTEXT;
    public static WindowsMessages CDM_HIDECONTROL;
    public static WindowsMessages LB_INITSTORAGE;
    public static WindowsMessages BM_GETCHECK;
}
public enum JetBrains.Interop.WinApi.WindowsNotify : Enum {
    public int value__;
    public static WindowsNotify CDN_FIRST;
    public static WindowsNotify CDN_LAST;
    public static WindowsNotify CDN_INITDONE;
    public static WindowsNotify CDN_SELCHANGE;
    public static WindowsNotify CDN_FOLDERCHANGE;
    public static WindowsNotify CDN_SHAREVIOLATION;
    public static WindowsNotify CDN_HELP;
    public static WindowsNotify CDN_FILEOK;
    public static WindowsNotify CDN_TYPECHANGE;
    public static WindowsNotify CDN_INCLUDEITEM;
}
[FlagsAttribute]
public enum JetBrains.Interop.WinApi.WindowStyles : Enum {
    public UInt32 value__;
    public static WindowStyles DS_3DLOOK;
    public static WindowStyles DS_FIXEDSYS;
    public static WindowStyles DS_NOFAILCREATE;
    public static WindowStyles DS_CONTROL;
    public static WindowStyles DS_CENTER;
    public static WindowStyles DS_CENTERMOUSE;
    public static WindowStyles DS_CONTEXTHELP;
    public static WindowStyles WS_OVERLAPPED;
    public static WindowStyles WS_POPUP;
    public static WindowStyles WS_CHILD;
    public static WindowStyles WS_MINIMIZE;
    public static WindowStyles WS_VISIBLE;
    public static WindowStyles WS_DISABLED;
    public static WindowStyles WS_CLIPSIBLINGS;
    public static WindowStyles WS_CLIPCHILDREN;
    public static WindowStyles WS_MAXIMIZE;
    public static WindowStyles WS_CAPTION;
    public static WindowStyles WS_BORDER;
    public static WindowStyles WS_DLGFRAME;
    public static WindowStyles WS_VSCROLL;
    public static WindowStyles WS_HSCROLL;
    public static WindowStyles WS_SYSMENU;
    public static WindowStyles WS_THICKFRAME;
    public static WindowStyles WS_GROUP;
    public static WindowStyles WS_TABSTOP;
    public static WindowStyles WS_MINIMIZEBOX;
    public static WindowStyles WS_MAXIMIZEBOX;
    public static WindowStyles WS_TILED;
    public static WindowStyles WS_ICONIC;
    public static WindowStyles WS_SIZEBOX;
    public static WindowStyles WS_TILEDWINDOW;
    public static WindowStyles WS_OVERLAPPEDWINDOW;
    public static WindowStyles WS_POPUPWINDOW;
    public static WindowStyles WS_CHILDWINDOW;
}
[NoReorderAttribute]
public enum JetBrains.Interop.WinApi.WinError : Enum {
    public int value__;
    public static WinError FACILITY_WINRM;
    public static WinError FACILITY_WINDOWSUPDATE;
    public static WinError FACILITY_WINDOWS_DEFENDER;
    public static WinError FACILITY_WINDOWS_CE;
    public static WinError FACILITY_WINDOWS;
    public static WinError FACILITY_URT;
    public static WinError FACILITY_UMI;
    public static WinError FACILITY_TPM_SOFTWARE;
    public static WinError FACILITY_TPM_SERVICES;
    public static WinError FACILITY_SXS;
    public static WinError FACILITY_STORAGE;
    public static WinError FACILITY_STATE_MANAGEMENT;
    public static WinError FACILITY_SSPI;
    public static WinError FACILITY_SCARD;
    public static WinError FACILITY_SHELL;
    public static WinError FACILITY_SETUPAPI;
    public static WinError FACILITY_SECURITY;
    public static WinError FACILITY_RPC;
    public static WinError FACILITY_PLA;
    public static WinError FACILITY_WIN32;
    public static WinError FACILITY_CONTROL;
    public static WinError FACILITY_NULL;
    public static WinError FACILITY_NDIS;
    public static WinError FACILITY_METADIRECTORY;
    public static WinError FACILITY_MSMQ;
    public static WinError FACILITY_MEDIASERVER;
    public static WinError FACILITY_INTERNET;
    public static WinError FACILITY_ITF;
    public static WinError FACILITY_USERMODE_HYPERVISOR;
    public static WinError FACILITY_HTTP;
    public static WinError FACILITY_GRAPHICS;
    public static WinError FACILITY_FWP;
    public static WinError FACILITY_FVE;
    public static WinError FACILITY_USERMODE_FILTER_MANAGER;
    public static WinError FACILITY_DPLAY;
    public static WinError FACILITY_DISPATCH;
    public static WinError FACILITY_DIRECTORYSERVICE;
    public static WinError FACILITY_CONFIGURATION;
    public static WinError FACILITY_COMPLUS;
    public static WinError FACILITY_USERMODE_COMMONLOG;
    public static WinError FACILITY_CMI;
    public static WinError FACILITY_CERT;
    public static WinError FACILITY_BACKGROUNDCOPY;
    public static WinError FACILITY_ACS;
    public static WinError FACILITY_AAF;
    public static WinError ERROR_SUCCESS;
    public static WinError NO_ERROR;
    public static WinError SEC_E_OK;
    public static WinError ERROR_INVALID_FUNCTION;
    public static WinError ERROR_FILE_NOT_FOUND;
    public static WinError ERROR_PATH_NOT_FOUND;
    public static WinError ERROR_TOO_MANY_OPEN_FILES;
    public static WinError ERROR_ACCESS_DENIED;
    public static WinError ERROR_INVALID_HANDLE;
    public static WinError ERROR_ARENA_TRASHED;
    public static WinError ERROR_NOT_ENOUGH_MEMORY;
    public static WinError ERROR_INVALID_BLOCK;
    public static WinError ERROR_BAD_ENVIRONMENT;
    public static WinError ERROR_BAD_FORMAT;
    public static WinError ERROR_INVALID_ACCESS;
    public static WinError ERROR_INVALID_DATA;
    public static WinError ERROR_OUTOFMEMORY;
    public static WinError ERROR_INVALID_DRIVE;
    public static WinError ERROR_CURRENT_DIRECTORY;
    public static WinError ERROR_NOT_SAME_DEVICE;
    public static WinError ERROR_NO_MORE_FILES;
    public static WinError ERROR_WRITE_PROTECT;
    public static WinError ERROR_BAD_UNIT;
    public static WinError ERROR_NOT_READY;
    public static WinError ERROR_BAD_COMMAND;
    public static WinError ERROR_CRC;
    public static WinError ERROR_BAD_LENGTH;
    public static WinError ERROR_SEEK;
    public static WinError ERROR_NOT_DOS_DISK;
    public static WinError ERROR_SECTOR_NOT_FOUND;
    public static WinError ERROR_OUT_OF_PAPER;
    public static WinError ERROR_WRITE_FAULT;
    public static WinError ERROR_READ_FAULT;
    public static WinError ERROR_GEN_FAILURE;
    public static WinError ERROR_SHARING_VIOLATION;
    public static WinError ERROR_LOCK_VIOLATION;
    public static WinError ERROR_WRONG_DISK;
    public static WinError ERROR_SHARING_BUFFER_EXCEEDED;
    public static WinError ERROR_HANDLE_EOF;
    public static WinError ERROR_HANDLE_DISK_FULL;
    public static WinError ERROR_NOT_SUPPORTED;
    public static WinError ERROR_REM_NOT_LIST;
    public static WinError ERROR_DUP_NAME;
    public static WinError ERROR_BAD_NETPATH;
    public static WinError ERROR_NETWORK_BUSY;
    public static WinError ERROR_DEV_NOT_EXIST;
    public static WinError ERROR_TOO_MANY_CMDS;
    public static WinError ERROR_ADAP_HDW_ERR;
    public static WinError ERROR_BAD_NET_RESP;
    public static WinError ERROR_UNEXP_NET_ERR;
    public static WinError ERROR_BAD_REM_ADAP;
    public static WinError ERROR_PRINTQ_FULL;
    public static WinError ERROR_NO_SPOOL_SPACE;
    public static WinError ERROR_PRINT_CANCELLED;
    public static WinError ERROR_NETNAME_DELETED;
    public static WinError ERROR_NETWORK_ACCESS_DENIED;
    public static WinError ERROR_BAD_DEV_TYPE;
    public static WinError ERROR_BAD_NET_NAME;
    public static WinError ERROR_TOO_MANY_NAMES;
    public static WinError ERROR_TOO_MANY_SESS;
    public static WinError ERROR_SHARING_PAUSED;
    public static WinError ERROR_REQ_NOT_ACCEP;
    public static WinError ERROR_REDIR_PAUSED;
    public static WinError ERROR_FILE_EXISTS;
    public static WinError ERROR_CANNOT_MAKE;
    public static WinError ERROR_FAIL_I24;
    public static WinError ERROR_OUT_OF_STRUCTURES;
    public static WinError ERROR_ALREADY_ASSIGNED;
    public static WinError ERROR_INVALID_PASSWORD;
    public static WinError ERROR_INVALID_PARAMETER;
    public static WinError ERROR_NET_WRITE_FAULT;
    public static WinError ERROR_NO_PROC_SLOTS;
    public static WinError ERROR_TOO_MANY_SEMAPHORES;
    public static WinError ERROR_EXCL_SEM_ALREADY_OWNED;
    public static WinError ERROR_SEM_IS_SET;
    public static WinError ERROR_TOO_MANY_SEM_REQUESTS;
    public static WinError ERROR_INVALID_AT_INTERRUPT_TIME;
    public static WinError ERROR_SEM_OWNER_DIED;
    public static WinError ERROR_SEM_USER_LIMIT;
    public static WinError ERROR_DISK_CHANGE;
    public static WinError ERROR_DRIVE_LOCKED;
    public static WinError ERROR_BROKEN_PIPE;
    public static WinError ERROR_OPEN_FAILED;
    public static WinError ERROR_BUFFER_OVERFLOW;
    public static WinError ERROR_DISK_FULL;
    public static WinError ERROR_NO_MORE_SEARCH_HANDLES;
    public static WinError ERROR_INVALID_TARGET_HANDLE;
    public static WinError ERROR_INVALID_CATEGORY;
    public static WinError ERROR_INVALID_VERIFY_SWITCH;
    public static WinError ERROR_BAD_DRIVER_LEVEL;
    public static WinError ERROR_CALL_NOT_IMPLEMENTED;
    public static WinError ERROR_SEM_TIMEOUT;
    public static WinError ERROR_INSUFFICIENT_BUFFER;
    public static WinError ERROR_INVALID_NAME;
    public static WinError ERROR_INVALID_LEVEL;
    public static WinError ERROR_NO_VOLUME_LABEL;
    public static WinError ERROR_MOD_NOT_FOUND;
    public static WinError ERROR_PROC_NOT_FOUND;
    public static WinError ERROR_WAIT_NO_CHILDREN;
    public static WinError ERROR_CHILD_NOT_COMPLETE;
    public static WinError ERROR_DIRECT_ACCESS_HANDLE;
    public static WinError ERROR_NEGATIVE_SEEK;
    public static WinError ERROR_SEEK_ON_DEVICE;
    public static WinError ERROR_IS_JOIN_TARGET;
    public static WinError ERROR_IS_JOINED;
    public static WinError ERROR_IS_SUBSTED;
    public static WinError ERROR_NOT_JOINED;
    public static WinError ERROR_NOT_SUBSTED;
    public static WinError ERROR_JOIN_TO_JOIN;
    public static WinError ERROR_SUBST_TO_SUBST;
    public static WinError ERROR_JOIN_TO_SUBST;
    public static WinError ERROR_SUBST_TO_JOIN;
    public static WinError ERROR_BUSY_DRIVE;
    public static WinError ERROR_SAME_DRIVE;
    public static WinError ERROR_DIR_NOT_ROOT;
    public static WinError ERROR_DIR_NOT_EMPTY;
    public static WinError ERROR_IS_SUBST_PATH;
    public static WinError ERROR_IS_JOIN_PATH;
    public static WinError ERROR_PATH_BUSY;
    public static WinError ERROR_IS_SUBST_TARGET;
    public static WinError ERROR_SYSTEM_TRACE;
    public static WinError ERROR_INVALID_EVENT_COUNT;
    public static WinError ERROR_TOO_MANY_MUXWAITERS;
    public static WinError ERROR_INVALID_LIST_FORMAT;
    public static WinError ERROR_LABEL_TOO_LONG;
    public static WinError ERROR_TOO_MANY_TCBS;
    public static WinError ERROR_SIGNAL_REFUSED;
    public static WinError ERROR_DISCARDED;
    public static WinError ERROR_NOT_LOCKED;
    public static WinError ERROR_BAD_THREADID_ADDR;
    public static WinError ERROR_BAD_ARGUMENTS;
    public static WinError ERROR_BAD_PATHNAME;
    public static WinError ERROR_SIGNAL_PENDING;
    public static WinError ERROR_MAX_THRDS_REACHED;
    public static WinError ERROR_LOCK_FAILED;
    public static WinError ERROR_BUSY;
    public static WinError ERROR_CANCEL_VIOLATION;
    public static WinError ERROR_ATOMIC_LOCKS_NOT_SUPPORTED;
    public static WinError ERROR_INVALID_SEGMENT_NUMBER;
    public static WinError ERROR_INVALID_ORDINAL;
    public static WinError ERROR_ALREADY_EXISTS;
    public static WinError ERROR_INVALID_FLAG_NUMBER;
    public static WinError ERROR_SEM_NOT_FOUND;
    public static WinError ERROR_INVALID_STARTING_CODESEG;
    public static WinError ERROR_INVALID_STACKSEG;
    public static WinError ERROR_INVALID_MODULETYPE;
    public static WinError ERROR_INVALID_EXE_SIGNATURE;
    public static WinError ERROR_EXE_MARKED_INVALID;
    public static WinError ERROR_BAD_EXE_FORMAT;
    public static WinError ERROR_ITERATED_DATA_EXCEEDS_64k;
    public static WinError ERROR_INVALID_MINALLOCSIZE;
    public static WinError ERROR_DYNLINK_FROM_INVALID_RING;
    public static WinError ERROR_IOPL_NOT_ENABLED;
    public static WinError ERROR_INVALID_SEGDPL;
    public static WinError ERROR_AUTODATASEG_EXCEEDS_64k;
    public static WinError ERROR_RING2SEG_MUST_BE_MOVABLE;
    public static WinError ERROR_RELOC_CHAIN_XEEDS_SEGLIM;
    public static WinError ERROR_INFLOOP_IN_RELOC_CHAIN;
    public static WinError ERROR_ENVVAR_NOT_FOUND;
    public static WinError ERROR_NO_SIGNAL_SENT;
    public static WinError ERROR_FILENAME_EXCED_RANGE;
    public static WinError ERROR_RING2_STACK_IN_USE;
    public static WinError ERROR_META_EXPANSION_TOO_LONG;
    public static WinError ERROR_INVALID_SIGNAL_NUMBER;
    public static WinError ERROR_THREAD_1_INACTIVE;
    public static WinError ERROR_LOCKED;
    public static WinError ERROR_TOO_MANY_MODULES;
    public static WinError ERROR_NESTING_NOT_ALLOWED;
    public static WinError ERROR_EXE_MACHINE_TYPE_MISMATCH;
    public static WinError ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY;
    public static WinError ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY;
    public static WinError ERROR_BAD_PIPE;
    public static WinError ERROR_PIPE_BUSY;
    public static WinError ERROR_NO_DATA;
    public static WinError ERROR_PIPE_NOT_CONNECTED;
    public static WinError ERROR_MORE_DATA;
    public static WinError ERROR_VC_DISCONNECTED;
    public static WinError ERROR_INVALID_EA_NAME;
    public static WinError ERROR_EA_LIST_INCONSISTENT;
    public static WinError WAIT_TIMEOUT;
    public static WinError ERROR_NO_MORE_ITEMS;
    public static WinError ERROR_CANNOT_COPY;
    public static WinError ERROR_DIRECTORY;
    public static WinError ERROR_EAS_DIDNT_FIT;
    public static WinError ERROR_EA_FILE_CORRUPT;
    public static WinError ERROR_EA_TABLE_FULL;
    public static WinError ERROR_INVALID_EA_HANDLE;
    public static WinError ERROR_EAS_NOT_SUPPORTED;
    public static WinError ERROR_NOT_OWNER;
    public static WinError ERROR_TOO_MANY_POSTS;
    public static WinError ERROR_PARTIAL_COPY;
    public static WinError ERROR_OPLOCK_NOT_GRANTED;
    public static WinError ERROR_INVALID_OPLOCK_PROTOCOL;
    public static WinError ERROR_DISK_TOO_FRAGMENTED;
    public static WinError ERROR_DELETE_PENDING;
    public static WinError ERROR_MR_MID_NOT_FOUND;
    public static WinError ERROR_SCOPE_NOT_FOUND;
    public static WinError ERROR_INVALID_ADDRESS;
    public static WinError ERROR_ARITHMETIC_OVERFLOW;
    public static WinError ERROR_PIPE_CONNECTED;
    public static WinError ERROR_PIPE_LISTENING;
    public static WinError ERROR_ELEVATION_REQUIRED;
    public static WinError ERROR_EA_ACCESS_DENIED;
    public static WinError ERROR_OPERATION_ABORTED;
    public static WinError ERROR_IO_INCOMPLETE;
    public static WinError ERROR_IO_PENDING;
    public static WinError ERROR_NOACCESS;
    public static WinError ERROR_SWAPERROR;
    public static WinError ERROR_STACK_OVERFLOW;
    public static WinError ERROR_INVALID_MESSAGE;
    public static WinError ERROR_CAN_NOT_COMPLETE;
    public static WinError ERROR_INVALID_FLAGS;
    public static WinError ERROR_UNRECOGNIZED_VOLUME;
    public static WinError ERROR_FILE_INVALID;
    public static WinError ERROR_FULLSCREEN_MODE;
    public static WinError ERROR_NO_TOKEN;
    public static WinError ERROR_BADDB;
    public static WinError ERROR_BADKEY;
    public static WinError ERROR_CANTOPEN;
    public static WinError ERROR_CANTREAD;
    public static WinError ERROR_CANTWRITE;
    public static WinError ERROR_REGISTRY_RECOVERED;
    public static WinError ERROR_REGISTRY_CORRUPT;
    public static WinError ERROR_REGISTRY_IO_FAILED;
    public static WinError ERROR_NOT_REGISTRY_FILE;
    public static WinError ERROR_KEY_DELETED;
    public static WinError ERROR_NO_LOG_SPACE;
    public static WinError ERROR_KEY_HAS_CHILDREN;
    public static WinError ERROR_CHILD_MUST_BE_VOLATILE;
    public static WinError ERROR_NOTIFY_ENUM_DIR;
    public static WinError ERROR_DEPENDENT_SERVICES_RUNNING;
    public static WinError ERROR_INVALID_SERVICE_CONTROL;
    public static WinError ERROR_SERVICE_REQUEST_TIMEOUT;
    public static WinError ERROR_SERVICE_NO_THREAD;
    public static WinError ERROR_SERVICE_DATABASE_LOCKED;
    public static WinError ERROR_SERVICE_ALREADY_RUNNING;
    public static WinError ERROR_INVALID_SERVICE_ACCOUNT;
    public static WinError ERROR_SERVICE_DISABLED;
    public static WinError ERROR_CIRCULAR_DEPENDENCY;
    public static WinError ERROR_SERVICE_DOES_NOT_EXIST;
    public static WinError ERROR_SERVICE_CANNOT_ACCEPT_CTRL;
    public static WinError ERROR_SERVICE_NOT_ACTIVE;
    public static WinError ERROR_FAILED_SERVICE_CONTROLLER_CONNECT;
    public static WinError ERROR_EXCEPTION_IN_SERVICE;
    public static WinError ERROR_DATABASE_DOES_NOT_EXIST;
    public static WinError ERROR_SERVICE_SPECIFIC_ERROR;
    public static WinError ERROR_PROCESS_ABORTED;
    public static WinError ERROR_SERVICE_DEPENDENCY_FAIL;
    public static WinError ERROR_SERVICE_LOGON_FAILED;
    public static WinError ERROR_SERVICE_START_HANG;
    public static WinError ERROR_INVALID_SERVICE_LOCK;
    public static WinError ERROR_SERVICE_MARKED_FOR_DELETE;
    public static WinError ERROR_SERVICE_EXISTS;
    public static WinError ERROR_ALREADY_RUNNING_LKG;
    public static WinError ERROR_SERVICE_DEPENDENCY_DELETED;
    public static WinError ERROR_BOOT_ALREADY_ACCEPTED;
    public static WinError ERROR_SERVICE_NEVER_STARTED;
    public static WinError ERROR_DUPLICATE_SERVICE_NAME;
    public static WinError ERROR_DIFFERENT_SERVICE_ACCOUNT;
    public static WinError ERROR_CANNOT_DETECT_DRIVER_FAILURE;
    public static WinError ERROR_CANNOT_DETECT_PROCESS_ABORT;
    public static WinError ERROR_NO_RECOVERY_PROGRAM;
    public static WinError ERROR_SERVICE_NOT_IN_EXE;
    public static WinError ERROR_NOT_SAFEBOOT_SERVICE;
    public static WinError ERROR_END_OF_MEDIA;
    public static WinError ERROR_FILEMARK_DETECTED;
    public static WinError ERROR_BEGINNING_OF_MEDIA;
    public static WinError ERROR_SETMARK_DETECTED;
    public static WinError ERROR_NO_DATA_DETECTED;
    public static WinError ERROR_PARTITION_FAILURE;
    public static WinError ERROR_INVALID_BLOCK_LENGTH;
    public static WinError ERROR_DEVICE_NOT_PARTITIONED;
    public static WinError ERROR_UNABLE_TO_LOCK_MEDIA;
    public static WinError ERROR_UNABLE_TO_UNLOAD_MEDIA;
    public static WinError ERROR_MEDIA_CHANGED;
    public static WinError ERROR_BUS_RESET;
    public static WinError ERROR_NO_MEDIA_IN_DRIVE;
    public static WinError ERROR_NO_UNICODE_TRANSLATION;
    public static WinError ERROR_DLL_INIT_FAILED;
    public static WinError ERROR_SHUTDOWN_IN_PROGRESS;
    public static WinError ERROR_NO_SHUTDOWN_IN_PROGRESS;
    public static WinError ERROR_IO_DEVICE;
    public static WinError ERROR_SERIAL_NO_DEVICE;
    public static WinError ERROR_IRQ_BUSY;
    public static WinError ERROR_MORE_WRITES;
    public static WinError ERROR_COUNTER_TIMEOUT;
    public static WinError ERROR_FLOPPY_ID_MARK_NOT_FOUND;
    public static WinError ERROR_FLOPPY_WRONG_CYLINDER;
    public static WinError ERROR_FLOPPY_UNKNOWN_ERROR;
    public static WinError ERROR_FLOPPY_BAD_REGISTERS;
    public static WinError ERROR_DISK_RECALIBRATE_FAILED;
    public static WinError ERROR_DISK_OPERATION_FAILED;
    public static WinError ERROR_DISK_RESET_FAILED;
    public static WinError ERROR_EOM_OVERFLOW;
    public static WinError ERROR_NOT_ENOUGH_SERVER_MEMORY;
    public static WinError ERROR_POSSIBLE_DEADLOCK;
    public static WinError ERROR_MAPPED_ALIGNMENT;
    public static WinError ERROR_SET_POWER_STATE_VETOED;
    public static WinError ERROR_SET_POWER_STATE_FAILED;
    public static WinError ERROR_TOO_MANY_LINKS;
    public static WinError ERROR_OLD_WIN_VERSION;
    public static WinError ERROR_APP_WRONG_OS;
    public static WinError ERROR_SINGLE_INSTANCE_APP;
    public static WinError ERROR_RMODE_APP;
    public static WinError ERROR_INVALID_DLL;
    public static WinError ERROR_NO_ASSOCIATION;
    public static WinError ERROR_DDE_FAIL;
    public static WinError ERROR_DLL_NOT_FOUND;
    public static WinError ERROR_NO_MORE_USER_HANDLES;
    public static WinError ERROR_MESSAGE_SYNC_ONLY;
    public static WinError ERROR_SOURCE_ELEMENT_EMPTY;
    public static WinError ERROR_DESTINATION_ELEMENT_FULL;
    public static WinError ERROR_ILLEGAL_ELEMENT_ADDRESS;
    public static WinError ERROR_MAGAZINE_NOT_PRESENT;
    public static WinError ERROR_DEVICE_REINITIALIZATION_NEEDED;
    public static WinError ERROR_DEVICE_REQUIRES_CLEANING;
    public static WinError ERROR_DEVICE_DOOR_OPEN;
    public static WinError ERROR_DEVICE_NOT_CONNECTED;
    public static WinError ERROR_NOT_FOUND;
    public static WinError ERROR_NO_MATCH;
    public static WinError ERROR_SET_NOT_FOUND;
    public static WinError ERROR_POINT_NOT_FOUND;
    public static WinError ERROR_NO_TRACKING_SERVICE;
    public static WinError ERROR_NO_VOLUME_ID;
    public static WinError ERROR_UNABLE_TO_REMOVE_REPLACED;
    public static WinError ERROR_UNABLE_TO_MOVE_REPLACEMENT;
    public static WinError ERROR_UNABLE_TO_MOVE_REPLACEMENT_2;
    public static WinError ERROR_JOURNAL_DELETE_IN_PROGRESS;
    public static WinError ERROR_JOURNAL_NOT_ACTIVE;
    public static WinError ERROR_POTENTIAL_FILE_FOUND;
    public static WinError ERROR_JOURNAL_ENTRY_DELETED;
    public static WinError ERROR_BAD_DEVICE;
    public static WinError ERROR_CONNECTION_UNAVAIL;
    public static WinError ERROR_DEVICE_ALREADY_REMEMBERED;
    public static WinError ERROR_NO_NET_OR_BAD_PATH;
    public static WinError ERROR_BAD_PROVIDER;
    public static WinError ERROR_CANNOT_OPEN_PROFILE;
    public static WinError ERROR_BAD_PROFILE;
    public static WinError ERROR_NOT_CONTAINER;
    public static WinError ERROR_EXTENDED_ERROR;
    public static WinError ERROR_INVALID_GROUPNAME;
    public static WinError ERROR_INVALID_COMPUTERNAME;
    public static WinError ERROR_INVALID_EVENTNAME;
    public static WinError ERROR_INVALID_DOMAINNAME;
    public static WinError ERROR_INVALID_SERVICENAME;
    public static WinError ERROR_INVALID_NETNAME;
    public static WinError ERROR_INVALID_SHARENAME;
    public static WinError ERROR_INVALID_PASSWORDNAME;
    public static WinError ERROR_INVALID_MESSAGENAME;
    public static WinError ERROR_INVALID_MESSAGEDEST;
    public static WinError ERROR_SESSION_CREDENTIAL_CONFLICT;
    public static WinError ERROR_REMOTE_SESSION_LIMIT_EXCEEDED;
    public static WinError ERROR_DUP_DOMAINNAME;
    public static WinError ERROR_NO_NETWORK;
    public static WinError ERROR_CANCELLED;
    public static WinError ERROR_USER_MAPPED_FILE;
    public static WinError ERROR_CONNECTION_REFUSED;
    public static WinError ERROR_GRACEFUL_DISCONNECT;
    public static WinError ERROR_ADDRESS_ALREADY_ASSOCIATED;
    public static WinError ERROR_ADDRESS_NOT_ASSOCIATED;
    public static WinError ERROR_CONNECTION_INVALID;
    public static WinError ERROR_CONNECTION_ACTIVE;
    public static WinError ERROR_NETWORK_UNREACHABLE;
    public static WinError ERROR_HOST_UNREACHABLE;
    public static WinError ERROR_PROTOCOL_UNREACHABLE;
    public static WinError ERROR_PORT_UNREACHABLE;
    public static WinError ERROR_REQUEST_ABORTED;
    public static WinError ERROR_CONNECTION_ABORTED;
    public static WinError ERROR_RETRY;
    public static WinError ERROR_CONNECTION_COUNT_LIMIT;
    public static WinError ERROR_LOGIN_TIME_RESTRICTION;
    public static WinError ERROR_LOGIN_WKSTA_RESTRICTION;
    public static WinError ERROR_INCORRECT_ADDRESS;
    public static WinError ERROR_ALREADY_REGISTERED;
    public static WinError ERROR_SERVICE_NOT_FOUND;
    public static WinError ERROR_NOT_AUTHENTICATED;
    public static WinError ERROR_NOT_LOGGED_ON;
    public static WinError ERROR_CONTINUE;
    public static WinError ERROR_ALREADY_INITIALIZED;
    public static WinError ERROR_NO_MORE_DEVICES;
    public static WinError ERROR_NO_SUCH_SITE;
    public static WinError ERROR_DOMAIN_CONTROLLER_EXISTS;
    public static WinError ERROR_ONLY_IF_CONNECTED;
    public static WinError ERROR_OVERRIDE_NOCHANGES;
    public static WinError ERROR_BAD_USER_PROFILE;
    public static WinError ERROR_NOT_SUPPORTED_ON_SBS;
    public static WinError ERROR_SERVER_SHUTDOWN_IN_PROGRESS;
    public static WinError ERROR_HOST_DOWN;
    public static WinError ERROR_NON_ACCOUNT_SID;
    public static WinError ERROR_NON_DOMAIN_SID;
    public static WinError ERROR_APPHELP_BLOCK;
    public static WinError ERROR_ACCESS_DISABLED_BY_POLICY;
    public static WinError ERROR_REG_NAT_CONSUMPTION;
    public static WinError ERROR_CSCSHARE_OFFLINE;
    public static WinError ERROR_PKINIT_FAILURE;
    public static WinError ERROR_SMARTCARD_SUBSYSTEM_FAILURE;
    public static WinError ERROR_DOWNGRADE_DETECTED;
    public static WinError ERROR_MACHINE_LOCKED;
    public static WinError ERROR_CALLBACK_SUPPLIED_INVALID_DATA;
    public static WinError ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED;
    public static WinError ERROR_DRIVER_BLOCKED;
    public static WinError ERROR_INVALID_IMPORT_OF_NON_DLL;
    public static WinError ERROR_ACCESS_DISABLED_WEBBLADE;
    public static WinError ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER;
    public static WinError ERROR_RECOVERY_FAILURE;
    public static WinError ERROR_ALREADY_FIBER;
    public static WinError ERROR_ALREADY_THREAD;
    public static WinError ERROR_STACK_BUFFER_OVERRUN;
    public static WinError ERROR_PARAMETER_QUOTA_EXCEEDED;
    public static WinError ERROR_DEBUGGER_INACTIVE;
    public static WinError ERROR_DELAY_LOAD_FAILED;
    public static WinError ERROR_VDM_DISALLOWED;
    public static WinError ERROR_UNIDENTIFIED_ERROR;
    public static WinError ERROR_NOT_ALL_ASSIGNED;
    public static WinError ERROR_SOME_NOT_MAPPED;
    public static WinError ERROR_NO_QUOTAS_FOR_ACCOUNT;
    public static WinError ERROR_LOCAL_USER_SESSION_KEY;
    public static WinError ERROR_NULL_LM_PASSWORD;
    public static WinError ERROR_UNKNOWN_REVISION;
    public static WinError ERROR_REVISION_MISMATCH;
    public static WinError ERROR_INVALID_OWNER;
    public static WinError ERROR_INVALID_PRIMARY_GROUP;
    public static WinError ERROR_NO_IMPERSONATION_TOKEN;
    public static WinError ERROR_CANT_DISABLE_MANDATORY;
    public static WinError ERROR_NO_LOGON_SERVERS;
    public static WinError ERROR_NO_SUCH_LOGON_SESSION;
    public static WinError ERROR_NO_SUCH_PRIVILEGE;
    public static WinError ERROR_PRIVILEGE_NOT_HELD;
    public static WinError ERROR_INVALID_ACCOUNT_NAME;
    public static WinError ERROR_USER_EXISTS;
    public static WinError ERROR_NO_SUCH_USER;
    public static WinError ERROR_GROUP_EXISTS;
    public static WinError ERROR_NO_SUCH_GROUP;
    public static WinError ERROR_MEMBER_IN_GROUP;
    public static WinError ERROR_MEMBER_NOT_IN_GROUP;
    public static WinError ERROR_LAST_ADMIN;
    public static WinError ERROR_WRONG_PASSWORD;
    public static WinError ERROR_ILL_FORMED_PASSWORD;
    public static WinError ERROR_PASSWORD_RESTRICTION;
    public static WinError ERROR_LOGON_FAILURE;
    public static WinError ERROR_ACCOUNT_RESTRICTION;
    public static WinError ERROR_INVALID_LOGON_HOURS;
    public static WinError ERROR_INVALID_WORKSTATION;
    public static WinError ERROR_PASSWORD_EXPIRED;
    public static WinError ERROR_ACCOUNT_DISABLED;
    public static WinError ERROR_NONE_MAPPED;
    public static WinError ERROR_TOO_MANY_LUIDS_REQUESTED;
    public static WinError ERROR_LUIDS_EXHAUSTED;
    public static WinError ERROR_INVALID_SUB_AUTHORITY;
    public static WinError ERROR_INVALID_ACL;
    public static WinError ERROR_INVALID_SID;
    public static WinError ERROR_INVALID_SECURITY_DESCR;
    public static WinError ERROR_BAD_INHERITANCE_ACL;
    public static WinError ERROR_SERVER_DISABLED;
    public static WinError ERROR_SERVER_NOT_DISABLED;
    public static WinError ERROR_INVALID_ID_AUTHORITY;
    public static WinError ERROR_ALLOTTED_SPACE_EXCEEDED;
    public static WinError ERROR_INVALID_GROUP_ATTRIBUTES;
    public static WinError ERROR_BAD_IMPERSONATION_LEVEL;
    public static WinError ERROR_CANT_OPEN_ANONYMOUS;
    public static WinError ERROR_BAD_VALIDATION_CLASS;
    public static WinError ERROR_BAD_TOKEN_TYPE;
    public static WinError ERROR_NO_SECURITY_ON_OBJECT;
    public static WinError ERROR_CANT_ACCESS_DOMAIN_INFO;
    public static WinError ERROR_INVALID_SERVER_STATE;
    public static WinError ERROR_INVALID_DOMAIN_STATE;
    public static WinError ERROR_INVALID_DOMAIN_ROLE;
    public static WinError ERROR_NO_SUCH_DOMAIN;
    public static WinError ERROR_DOMAIN_EXISTS;
    public static WinError ERROR_DOMAIN_LIMIT_EXCEEDED;
    public static WinError ERROR_INTERNAL_DB_CORRUPTION;
    public static WinError ERROR_INTERNAL_ERROR;
    public static WinError ERROR_GENERIC_NOT_MAPPED;
    public static WinError ERROR_BAD_DESCRIPTOR_FORMAT;
    public static WinError ERROR_NOT_LOGON_PROCESS;
    public static WinError ERROR_LOGON_SESSION_EXISTS;
    public static WinError ERROR_NO_SUCH_PACKAGE;
    public static WinError ERROR_BAD_LOGON_SESSION_STATE;
    public static WinError ERROR_LOGON_SESSION_COLLISION;
    public static WinError ERROR_INVALID_LOGON_TYPE;
    public static WinError ERROR_CANNOT_IMPERSONATE;
    public static WinError ERROR_RXACT_INVALID_STATE;
    public static WinError ERROR_RXACT_COMMIT_FAILURE;
    public static WinError ERROR_SPECIAL_ACCOUNT;
    public static WinError ERROR_SPECIAL_GROUP;
    public static WinError ERROR_SPECIAL_USER;
    public static WinError ERROR_MEMBERS_PRIMARY_GROUP;
    public static WinError ERROR_TOKEN_ALREADY_IN_USE;
    public static WinError ERROR_NO_SUCH_ALIAS;
    public static WinError ERROR_MEMBER_NOT_IN_ALIAS;
    public static WinError ERROR_MEMBER_IN_ALIAS;
    public static WinError ERROR_ALIAS_EXISTS;
    public static WinError ERROR_LOGON_NOT_GRANTED;
    public static WinError ERROR_TOO_MANY_SECRETS;
    public static WinError ERROR_SECRET_TOO_LONG;
    public static WinError ERROR_INTERNAL_DB_ERROR;
    public static WinError ERROR_TOO_MANY_CONTEXT_IDS;
    public static WinError ERROR_LOGON_TYPE_NOT_GRANTED;
    public static WinError ERROR_NT_CROSS_ENCRYPTION_REQUIRED;
    public static WinError ERROR_NO_SUCH_MEMBER;
    public static WinError ERROR_INVALID_MEMBER;
    public static WinError ERROR_TOO_MANY_SIDS;
    public static WinError ERROR_LM_CROSS_ENCRYPTION_REQUIRED;
    public static WinError ERROR_NO_INHERITANCE;
    public static WinError ERROR_FILE_CORRUPT;
    public static WinError ERROR_DISK_CORRUPT;
    public static WinError ERROR_NO_USER_SESSION_KEY;
    public static WinError ERROR_LICENSE_QUOTA_EXCEEDED;
    public static WinError ERROR_WRONG_TARGET_NAME;
    public static WinError ERROR_MUTUAL_AUTH_FAILED;
    public static WinError ERROR_TIME_SKEW;
    public static WinError ERROR_CURRENT_DOMAIN_NOT_ALLOWED;
    public static WinError ERROR_INVALID_WINDOW_HANDLE;
    public static WinError ERROR_INVALID_MENU_HANDLE;
    public static WinError ERROR_INVALID_CURSOR_HANDLE;
    public static WinError ERROR_INVALID_ACCEL_HANDLE;
    public static WinError ERROR_INVALID_HOOK_HANDLE;
    public static WinError ERROR_INVALID_DWP_HANDLE;
    public static WinError ERROR_TLW_WITH_WSCHILD;
    public static WinError ERROR_CANNOT_FIND_WND_CLASS;
    public static WinError ERROR_WINDOW_OF_OTHER_THREAD;
    public static WinError ERROR_HOTKEY_ALREADY_REGISTERED;
    public static WinError ERROR_CLASS_ALREADY_EXISTS;
    public static WinError ERROR_CLASS_DOES_NOT_EXIST;
    public static WinError ERROR_CLASS_HAS_WINDOWS;
    public static WinError ERROR_INVALID_INDEX;
    public static WinError ERROR_INVALID_ICON_HANDLE;
    public static WinError ERROR_PRIVATE_DIALOG_INDEX;
    public static WinError ERROR_LISTBOX_ID_NOT_FOUND;
    public static WinError ERROR_NO_WILDCARD_CHARACTERS;
    public static WinError ERROR_CLIPBOARD_NOT_OPEN;
    public static WinError ERROR_HOTKEY_NOT_REGISTERED;
    public static WinError ERROR_WINDOW_NOT_DIALOG;
    public static WinError ERROR_CONTROL_ID_NOT_FOUND;
    public static WinError ERROR_INVALID_COMBOBOX_MESSAGE;
    public static WinError ERROR_WINDOW_NOT_COMBOBOX;
    public static WinError ERROR_INVALID_EDIT_HEIGHT;
    public static WinError ERROR_DC_NOT_FOUND;
    public static WinError ERROR_INVALID_HOOK_FILTER;
    public static WinError ERROR_INVALID_FILTER_PROC;
    public static WinError ERROR_HOOK_NEEDS_HMOD;
    public static WinError ERROR_GLOBAL_ONLY_HOOK;
    public static WinError ERROR_JOURNAL_HOOK_SET;
    public static WinError ERROR_HOOK_NOT_INSTALLED;
    public static WinError ERROR_INVALID_LB_MESSAGE;
    public static WinError ERROR_SETCOUNT_ON_BAD_LB;
    public static WinError ERROR_LB_WITHOUT_TABSTOPS;
    public static WinError ERROR_DESTROY_OBJECT_OF_OTHER_THREAD;
    public static WinError ERROR_CHILD_WINDOW_MENU;
    public static WinError ERROR_NO_SYSTEM_MENU;
    public static WinError ERROR_INVALID_MSGBOX_STYLE;
    public static WinError ERROR_INVALID_SPI_VALUE;
    public static WinError ERROR_SCREEN_ALREADY_LOCKED;
    public static WinError ERROR_HWNDS_HAVE_DIFF_PARENT;
    public static WinError ERROR_NOT_CHILD_WINDOW;
    public static WinError ERROR_INVALID_GW_COMMAND;
    public static WinError ERROR_INVALID_THREAD_ID;
    public static WinError ERROR_NON_MDICHILD_WINDOW;
    public static WinError ERROR_POPUP_ALREADY_ACTIVE;
    public static WinError ERROR_NO_SCROLLBARS;
    public static WinError ERROR_INVALID_SCROLLBAR_RANGE;
    public static WinError ERROR_INVALID_SHOWWIN_COMMAND;
    public static WinError ERROR_NO_SYSTEM_RESOURCES;
    public static WinError ERROR_NONPAGED_SYSTEM_RESOURCES;
    public static WinError ERROR_PAGED_SYSTEM_RESOURCES;
    public static WinError ERROR_WORKING_SET_QUOTA;
    public static WinError ERROR_PAGEFILE_QUOTA;
    public static WinError ERROR_COMMITMENT_LIMIT;
    public static WinError ERROR_MENU_ITEM_NOT_FOUND;
    public static WinError ERROR_INVALID_KEYBOARD_HANDLE;
    public static WinError ERROR_HOOK_TYPE_NOT_ALLOWED;
    public static WinError ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION;
    public static WinError ERROR_TIMEOUT;
    public static WinError ERROR_INVALID_MONITOR_HANDLE;
    public static WinError ERROR_INCORRECT_SIZE;
    public static WinError ERROR_EVENTLOG_FILE_CORRUPT;
    public static WinError ERROR_EVENTLOG_CANT_START;
    public static WinError ERROR_LOG_FILE_FULL;
    public static WinError ERROR_EVENTLOG_FILE_CHANGED;
    public static WinError ERROR_INSTALL_SERVICE_FAILURE;
    public static WinError ERROR_INSTALL_USEREXIT;
    public static WinError ERROR_INSTALL_FAILURE;
    public static WinError ERROR_INSTALL_SUSPEND;
    public static WinError ERROR_UNKNOWN_PRODUCT;
    public static WinError ERROR_UNKNOWN_FEATURE;
    public static WinError ERROR_UNKNOWN_COMPONENT;
    public static WinError ERROR_UNKNOWN_PROPERTY;
    public static WinError ERROR_INVALID_HANDLE_STATE;
    public static WinError ERROR_BAD_CONFIGURATION;
    public static WinError ERROR_INDEX_ABSENT;
    public static WinError ERROR_INSTALL_SOURCE_ABSENT;
    public static WinError ERROR_INSTALL_PACKAGE_VERSION;
    public static WinError ERROR_PRODUCT_UNINSTALLED;
    public static WinError ERROR_BAD_QUERY_SYNTAX;
    public static WinError ERROR_INVALID_FIELD;
    public static WinError ERROR_DEVICE_REMOVED;
    public static WinError ERROR_INSTALL_ALREADY_RUNNING;
    public static WinError ERROR_INSTALL_PACKAGE_OPEN_FAILED;
    public static WinError ERROR_INSTALL_PACKAGE_INVALID;
    public static WinError ERROR_INSTALL_UI_FAILURE;
    public static WinError ERROR_INSTALL_LOG_FAILURE;
    public static WinError ERROR_INSTALL_LANGUAGE_UNSUPPORTED;
    public static WinError ERROR_INSTALL_TRANSFORM_FAILURE;
    public static WinError ERROR_INSTALL_PACKAGE_REJECTED;
    public static WinError ERROR_FUNCTION_NOT_CALLED;
    public static WinError ERROR_FUNCTION_FAILED;
    public static WinError ERROR_INVALID_TABLE;
    public static WinError ERROR_DATATYPE_MISMATCH;
    public static WinError ERROR_UNSUPPORTED_TYPE;
    public static WinError ERROR_CREATE_FAILED;
    public static WinError ERROR_INSTALL_TEMP_UNWRITABLE;
    public static WinError ERROR_INSTALL_PLATFORM_UNSUPPORTED;
    public static WinError ERROR_INSTALL_NOTUSED;
    public static WinError ERROR_PATCH_PACKAGE_OPEN_FAILED;
    public static WinError ERROR_PATCH_PACKAGE_INVALID;
    public static WinError ERROR_PATCH_PACKAGE_UNSUPPORTED;
    public static WinError ERROR_PRODUCT_VERSION;
    public static WinError ERROR_INVALID_COMMAND_LINE;
    public static WinError ERROR_INSTALL_REMOTE_DISALLOWED;
    public static WinError ERROR_SUCCESS_REBOOT_INITIATED;
    public static WinError ERROR_PATCH_TARGET_NOT_FOUND;
    public static WinError ERROR_PATCH_PACKAGE_REJECTED;
    public static WinError ERROR_INSTALL_TRANSFORM_REJECTED;
    public static WinError ERROR_INSTALL_REMOTE_PROHIBITED;
    public static WinError RPC_S_INVALID_STRING_BINDING;
    public static WinError RPC_S_WRONG_KIND_OF_BINDING;
    public static WinError RPC_S_INVALID_BINDING;
    public static WinError RPC_S_PROTSEQ_NOT_SUPPORTED;
    public static WinError RPC_S_INVALID_RPC_PROTSEQ;
    public static WinError RPC_S_INVALID_STRING_UUID;
    public static WinError RPC_S_INVALID_ENDPOINT_FORMAT;
    public static WinError RPC_S_INVALID_NET_ADDR;
    public static WinError RPC_S_NO_ENDPOINT_FOUND;
    public static WinError RPC_S_INVALID_TIMEOUT;
    public static WinError RPC_S_OBJECT_NOT_FOUND;
    public static WinError RPC_S_ALREADY_REGISTERED;
    public static WinError RPC_S_TYPE_ALREADY_REGISTERED;
    public static WinError RPC_S_ALREADY_LISTENING;
    public static WinError RPC_S_NO_PROTSEQS_REGISTERED;
    public static WinError RPC_S_NOT_LISTENING;
    public static WinError RPC_S_UNKNOWN_MGR_TYPE;
    public static WinError RPC_S_UNKNOWN_IF;
    public static WinError RPC_S_NO_BINDINGS;
    public static WinError RPC_S_NO_PROTSEQS;
    public static WinError RPC_S_CANT_CREATE_ENDPOINT;
    public static WinError RPC_S_OUT_OF_RESOURCES;
    public static WinError RPC_S_SERVER_UNAVAILABLE;
    public static WinError RPC_S_SERVER_TOO_BUSY;
    public static WinError RPC_S_INVALID_NETWORK_OPTIONS;
    public static WinError RPC_S_NO_CALL_ACTIVE;
    public static WinError RPC_S_CALL_FAILED;
    public static WinError RPC_S_CALL_FAILED_DNE;
    public static WinError RPC_S_PROTOCOL_ERROR;
    public static WinError RPC_S_UNSUPPORTED_TRANS_SYN;
    public static WinError RPC_S_UNSUPPORTED_TYPE;
    public static WinError RPC_S_INVALID_TAG;
    public static WinError RPC_S_INVALID_BOUND;
    public static WinError RPC_S_NO_ENTRY_NAME;
    public static WinError RPC_S_INVALID_NAME_SYNTAX;
    public static WinError RPC_S_UNSUPPORTED_NAME_SYNTAX;
    public static WinError RPC_S_UUID_NO_ADDRESS;
    public static WinError RPC_S_DUPLICATE_ENDPOINT;
    public static WinError RPC_S_UNKNOWN_AUTHN_TYPE;
    public static WinError RPC_S_MAX_CALLS_TOO_SMALL;
    public static WinError RPC_S_STRING_TOO_LONG;
    public static WinError RPC_S_PROTSEQ_NOT_FOUND;
    public static WinError RPC_S_PROCNUM_OUT_OF_RANGE;
    public static WinError RPC_S_BINDING_HAS_NO_AUTH;
    public static WinError RPC_S_UNKNOWN_AUTHN_SERVICE;
    public static WinError RPC_S_UNKNOWN_AUTHN_LEVEL;
    public static WinError RPC_S_INVALID_AUTH_IDENTITY;
    public static WinError RPC_S_UNKNOWN_AUTHZ_SERVICE;
    public static WinError EPT_S_INVALID_ENTRY;
    public static WinError EPT_S_CANT_PERFORM_OP;
    public static WinError EPT_S_NOT_REGISTERED;
    public static WinError RPC_S_NOTHING_TO_EXPORT;
    public static WinError RPC_S_INCOMPLETE_NAME;
    public static WinError RPC_S_INVALID_VERS_OPTION;
    public static WinError RPC_S_NO_MORE_MEMBERS;
    public static WinError RPC_S_NOT_ALL_OBJS_UNEXPORTED;
    public static WinError RPC_S_INTERFACE_NOT_FOUND;
    public static WinError RPC_S_ENTRY_ALREADY_EXISTS;
    public static WinError RPC_S_ENTRY_NOT_FOUND;
    public static WinError RPC_S_NAME_SERVICE_UNAVAILABLE;
    public static WinError RPC_S_INVALID_NAF_ID;
    public static WinError RPC_S_CANNOT_SUPPORT;
    public static WinError RPC_S_NO_CONTEXT_AVAILABLE;
    public static WinError RPC_S_INTERNAL_ERROR;
    public static WinError RPC_S_ZERO_DIVIDE;
    public static WinError RPC_S_ADDRESS_ERROR;
    public static WinError RPC_S_FP_DIV_ZERO;
    public static WinError RPC_S_FP_UNDERFLOW;
    public static WinError RPC_S_FP_OVERFLOW;
    public static WinError RPC_X_NO_MORE_ENTRIES;
    public static WinError RPC_X_SS_CHAR_TRANS_OPEN_FAIL;
    public static WinError RPC_X_SS_CHAR_TRANS_SHORT_FILE;
    public static WinError RPC_X_SS_IN_NULL_CONTEXT;
    public static WinError RPC_X_SS_CONTEXT_DAMAGED;
    public static WinError RPC_X_SS_HANDLES_MISMATCH;
    public static WinError RPC_X_SS_CANNOT_GET_CALL_HANDLE;
    public static WinError RPC_X_NULL_REF_POINTER;
    public static WinError RPC_X_ENUM_VALUE_OUT_OF_RANGE;
    public static WinError RPC_X_BYTE_COUNT_TOO_SMALL;
    public static WinError RPC_X_BAD_STUB_DATA;
    public static WinError ERROR_INVALID_USER_BUFFER;
    public static WinError ERROR_UNRECOGNIZED_MEDIA;
    public static WinError ERROR_NO_TRUST_LSA_SECRET;
    public static WinError ERROR_NO_TRUST_SAM_ACCOUNT;
    public static WinError ERROR_TRUSTED_DOMAIN_FAILURE;
    public static WinError ERROR_TRUSTED_RELATIONSHIP_FAILURE;
    public static WinError ERROR_TRUST_FAILURE;
    public static WinError RPC_S_CALL_IN_PROGRESS;
    public static WinError ERROR_NETLOGON_NOT_STARTED;
    public static WinError ERROR_ACCOUNT_EXPIRED;
    public static WinError ERROR_REDIRECTOR_HAS_OPEN_HANDLES;
    public static WinError ERROR_PRINTER_DRIVER_ALREADY_INSTALLED;
    public static WinError ERROR_UNKNOWN_PORT;
    public static WinError ERROR_UNKNOWN_PRINTER_DRIVER;
    public static WinError ERROR_UNKNOWN_PRINTPROCESSOR;
    public static WinError ERROR_INVALID_SEPARATOR_FILE;
    public static WinError ERROR_INVALID_PRIORITY;
    public static WinError ERROR_INVALID_PRINTER_NAME;
    public static WinError ERROR_PRINTER_ALREADY_EXISTS;
    public static WinError ERROR_INVALID_PRINTER_COMMAND;
    public static WinError ERROR_INVALID_DATATYPE;
    public static WinError ERROR_INVALID_ENVIRONMENT;
    public static WinError RPC_S_NO_MORE_BINDINGS;
    public static WinError ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT;
    public static WinError ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT;
    public static WinError ERROR_NOLOGON_SERVER_TRUST_ACCOUNT;
    public static WinError ERROR_DOMAIN_TRUST_INCONSISTENT;
    public static WinError ERROR_SERVER_HAS_OPEN_HANDLES;
    public static WinError ERROR_RESOURCE_DATA_NOT_FOUND;
    public static WinError ERROR_RESOURCE_TYPE_NOT_FOUND;
    public static WinError ERROR_RESOURCE_NAME_NOT_FOUND;
    public static WinError ERROR_RESOURCE_LANG_NOT_FOUND;
    public static WinError ERROR_NOT_ENOUGH_QUOTA;
    public static WinError RPC_S_NO_INTERFACES;
    public static WinError RPC_S_CALL_CANCELLED;
    public static WinError RPC_S_BINDING_INCOMPLETE;
    public static WinError RPC_S_COMM_FAILURE;
    public static WinError RPC_S_UNSUPPORTED_AUTHN_LEVEL;
    public static WinError RPC_S_NO_PRINC_NAME;
    public static WinError RPC_S_NOT_RPC_ERROR;
    public static WinError RPC_S_UUID_LOCAL_ONLY;
    public static WinError RPC_S_SEC_PKG_ERROR;
    public static WinError RPC_S_NOT_CANCELLED;
    public static WinError RPC_X_INVALID_ES_ACTION;
    public static WinError RPC_X_WRONG_ES_VERSION;
    public static WinError RPC_X_WRONG_STUB_VERSION;
    public static WinError RPC_X_INVALID_PIPE_OBJECT;
    public static WinError RPC_X_WRONG_PIPE_ORDER;
    public static WinError RPC_X_WRONG_PIPE_VERSION;
    public static WinError RPC_S_GROUP_MEMBER_NOT_FOUND;
    public static WinError EPT_S_CANT_CREATE;
    public static WinError RPC_S_INVALID_OBJECT;
    public static WinError ERROR_INVALID_TIME;
    public static WinError ERROR_INVALID_FORM_NAME;
    public static WinError ERROR_INVALID_FORM_SIZE;
    public static WinError ERROR_ALREADY_WAITING;
    public static WinError ERROR_PRINTER_DELETED;
    public static WinError ERROR_INVALID_PRINTER_STATE;
    public static WinError ERROR_PASSWORD_MUST_CHANGE;
    public static WinError ERROR_DOMAIN_CONTROLLER_NOT_FOUND;
    public static WinError ERROR_ACCOUNT_LOCKED_OUT;
    public static WinError OR_INVALID_OXID;
    public static WinError OR_INVALID_OID;
    public static WinError OR_INVALID_SET;
    public static WinError RPC_S_SEND_INCOMPLETE;
    public static WinError RPC_S_INVALID_ASYNC_HANDLE;
    public static WinError RPC_S_INVALID_ASYNC_CALL;
    public static WinError RPC_X_PIPE_CLOSED;
    public static WinError RPC_X_PIPE_DISCIPLINE_ERROR;
    public static WinError RPC_X_PIPE_EMPTY;
    public static WinError ERROR_NO_SITENAME;
    public static WinError ERROR_CANT_ACCESS_FILE;
    public static WinError ERROR_CANT_RESOLVE_FILENAME;
    public static WinError RPC_S_ENTRY_TYPE_MISMATCH;
    public static WinError RPC_S_NOT_ALL_OBJS_EXPORTED;
    public static WinError RPC_S_INTERFACE_NOT_EXPORTED;
    public static WinError RPC_S_PROFILE_NOT_ADDED;
    public static WinError RPC_S_PRF_ELT_NOT_ADDED;
    public static WinError RPC_S_PRF_ELT_NOT_REMOVED;
    public static WinError RPC_S_GRP_ELT_NOT_ADDED;
    public static WinError RPC_S_GRP_ELT_NOT_REMOVED;
    public static WinError ERROR_KM_DRIVER_BLOCKED;
    public static WinError ERROR_CONTEXT_EXPIRED;
    public static WinError ERROR_PER_USER_TRUST_QUOTA_EXCEEDED;
    public static WinError ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED;
    public static WinError ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED;
    public static WinError ERROR_AUTHENTICATION_FIREWALL_FAILED;
    public static WinError ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED;
    public static WinError ERROR_INVALID_PIXEL_FORMAT;
    public static WinError ERROR_BAD_DRIVER;
    public static WinError ERROR_INVALID_WINDOW_STYLE;
    public static WinError ERROR_METAFILE_NOT_SUPPORTED;
    public static WinError ERROR_TRANSFORM_NOT_SUPPORTED;
    public static WinError ERROR_CLIPPING_NOT_SUPPORTED;
    public static WinError ERROR_INVALID_CMM;
    public static WinError ERROR_INVALID_PROFILE;
    public static WinError ERROR_TAG_NOT_FOUND;
    public static WinError ERROR_TAG_NOT_PRESENT;
    public static WinError ERROR_DUPLICATE_TAG;
    public static WinError ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE;
    public static WinError ERROR_PROFILE_NOT_FOUND;
    public static WinError ERROR_INVALID_COLORSPACE;
    public static WinError ERROR_ICM_NOT_ENABLED;
    public static WinError ERROR_DELETING_ICM_XFORM;
    public static WinError ERROR_INVALID_TRANSFORM;
    public static WinError ERROR_COLORSPACE_MISMATCH;
    public static WinError ERROR_INVALID_COLORINDEX;
    public static WinError ERROR_CONNECTED_OTHER_PASSWORD;
    public static WinError ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT;
    public static WinError ERROR_BAD_USERNAME;
    public static WinError ERROR_NOT_CONNECTED;
    public static WinError ERROR_OPEN_FILES;
    public static WinError ERROR_ACTIVE_CONNECTIONS;
    public static WinError ERROR_DEVICE_IN_USE;
    public static WinError ERROR_UNKNOWN_PRINT_MONITOR;
    public static WinError ERROR_PRINTER_DRIVER_IN_USE;
    public static WinError ERROR_SPOOL_FILE_NOT_FOUND;
    public static WinError ERROR_SPL_NO_STARTDOC;
    public static WinError ERROR_SPL_NO_ADDJOB;
    public static WinError ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED;
    public static WinError ERROR_PRINT_MONITOR_ALREADY_INSTALLED;
    public static WinError ERROR_INVALID_PRINT_MONITOR;
    public static WinError ERROR_PRINT_MONITOR_IN_USE;
    public static WinError ERROR_PRINTER_HAS_JOBS_QUEUED;
    public static WinError ERROR_SUCCESS_REBOOT_REQUIRED;
    public static WinError ERROR_SUCCESS_RESTART_REQUIRED;
    public static WinError ERROR_PRINTER_NOT_FOUND;
    public static WinError ERROR_PRINTER_DRIVER_WARNED;
    public static WinError ERROR_PRINTER_DRIVER_BLOCKED;
    public static WinError ERROR_WINS_INTERNAL;
    public static WinError ERROR_CAN_NOT_DEL_LOCAL_WINS;
    public static WinError ERROR_STATIC_INIT;
    public static WinError ERROR_INC_BACKUP;
    public static WinError ERROR_FULL_BACKUP;
    public static WinError ERROR_REC_NON_EXISTENT;
    public static WinError ERROR_RPL_NOT_ALLOWED;
    public static WinError ERROR_DHCP_ADDRESS_CONFLICT;
    public static WinError ERROR_WMI_GUID_NOT_FOUND;
    public static WinError ERROR_WMI_INSTANCE_NOT_FOUND;
    public static WinError ERROR_WMI_ITEMID_NOT_FOUND;
    public static WinError ERROR_WMI_TRY_AGAIN;
    public static WinError ERROR_WMI_DP_NOT_FOUND;
    public static WinError ERROR_WMI_UNRESOLVED_INSTANCE_REF;
    public static WinError ERROR_WMI_ALREADY_ENABLED;
    public static WinError ERROR_WMI_GUID_DISCONNECTED;
    public static WinError ERROR_WMI_SERVER_UNAVAILABLE;
    public static WinError ERROR_WMI_DP_FAILED;
    public static WinError ERROR_WMI_INVALID_MOF;
    public static WinError ERROR_WMI_INVALID_REGINFO;
    public static WinError ERROR_WMI_ALREADY_DISABLED;
    public static WinError ERROR_WMI_READ_ONLY;
    public static WinError ERROR_WMI_SET_FAILURE;
    public static WinError ERROR_INVALID_MEDIA;
    public static WinError ERROR_INVALID_LIBRARY;
    public static WinError ERROR_INVALID_MEDIA_POOL;
    public static WinError ERROR_DRIVE_MEDIA_MISMATCH;
    public static WinError ERROR_MEDIA_OFFLINE;
    public static WinError ERROR_LIBRARY_OFFLINE;
    public static WinError ERROR_EMPTY;
    public static WinError ERROR_NOT_EMPTY;
    public static WinError ERROR_MEDIA_UNAVAILABLE;
    public static WinError ERROR_RESOURCE_DISABLED;
    public static WinError ERROR_INVALID_CLEANER;
    public static WinError ERROR_UNABLE_TO_CLEAN;
    public static WinError ERROR_OBJECT_NOT_FOUND;
    public static WinError ERROR_DATABASE_FAILURE;
    public static WinError ERROR_DATABASE_FULL;
    public static WinError ERROR_MEDIA_INCOMPATIBLE;
    public static WinError ERROR_RESOURCE_NOT_PRESENT;
    public static WinError ERROR_INVALID_OPERATION;
    public static WinError ERROR_MEDIA_NOT_AVAILABLE;
    public static WinError ERROR_DEVICE_NOT_AVAILABLE;
    public static WinError ERROR_REQUEST_REFUSED;
    public static WinError ERROR_INVALID_DRIVE_OBJECT;
    public static WinError ERROR_LIBRARY_FULL;
    public static WinError ERROR_MEDIUM_NOT_ACCESSIBLE;
    public static WinError ERROR_UNABLE_TO_LOAD_MEDIUM;
    public static WinError ERROR_UNABLE_TO_INVENTORY_DRIVE;
    public static WinError ERROR_UNABLE_TO_INVENTORY_SLOT;
    public static WinError ERROR_UNABLE_TO_INVENTORY_TRANSPORT;
    public static WinError ERROR_TRANSPORT_FULL;
    public static WinError ERROR_CONTROLLING_IEPORT;
    public static WinError ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA;
    public static WinError ERROR_CLEANER_SLOT_SET;
    public static WinError ERROR_CLEANER_SLOT_NOT_SET;
    public static WinError ERROR_CLEANER_CARTRIDGE_SPENT;
    public static WinError ERROR_UNEXPECTED_OMID;
    public static WinError ERROR_CANT_DELETE_LAST_ITEM;
    public static WinError ERROR_MESSAGE_EXCEEDS_MAX_SIZE;
    public static WinError ERROR_VOLUME_CONTAINS_SYS_FILES;
    public static WinError ERROR_INDIGENOUS_TYPE;
    public static WinError ERROR_NO_SUPPORTING_DRIVES;
    public static WinError ERROR_CLEANER_CARTRIDGE_INSTALLED;
    public static WinError ERROR_IEPORT_FULL;
    public static WinError ERROR_FILE_OFFLINE;
    public static WinError ERROR_REMOTE_STORAGE_NOT_ACTIVE;
    public static WinError ERROR_REMOTE_STORAGE_MEDIA_ERROR;
    public static WinError ERROR_NOT_A_REPARSE_POINT;
    public static WinError ERROR_REPARSE_ATTRIBUTE_CONFLICT;
    public static WinError ERROR_INVALID_REPARSE_DATA;
    public static WinError ERROR_REPARSE_TAG_INVALID;
    public static WinError ERROR_REPARSE_TAG_MISMATCH;
    public static WinError ERROR_VOLUME_NOT_SIS_ENABLED;
    public static WinError ERROR_DEPENDENT_RESOURCE_EXISTS;
    public static WinError ERROR_DEPENDENCY_NOT_FOUND;
    public static WinError ERROR_DEPENDENCY_ALREADY_EXISTS;
    public static WinError ERROR_RESOURCE_NOT_ONLINE;
    public static WinError ERROR_HOST_NODE_NOT_AVAILABLE;
    public static WinError ERROR_RESOURCE_NOT_AVAILABLE;
    public static WinError ERROR_RESOURCE_NOT_FOUND;
    public static WinError ERROR_SHUTDOWN_CLUSTER;
    public static WinError ERROR_CANT_EVICT_ACTIVE_NODE;
    public static WinError ERROR_OBJECT_ALREADY_EXISTS;
    public static WinError ERROR_OBJECT_IN_LIST;
    public static WinError ERROR_GROUP_NOT_AVAILABLE;
    public static WinError ERROR_GROUP_NOT_FOUND;
    public static WinError ERROR_GROUP_NOT_ONLINE;
    public static WinError ERROR_HOST_NODE_NOT_RESOURCE_OWNER;
    public static WinError ERROR_HOST_NODE_NOT_GROUP_OWNER;
    public static WinError ERROR_RESMON_CREATE_FAILED;
    public static WinError ERROR_RESMON_ONLINE_FAILED;
    public static WinError ERROR_RESOURCE_ONLINE;
    public static WinError ERROR_QUORUM_RESOURCE;
    public static WinError ERROR_NOT_QUORUM_CAPABLE;
    public static WinError ERROR_CLUSTER_SHUTTING_DOWN;
    public static WinError ERROR_INVALID_STATE;
    public static WinError ERROR_RESOURCE_PROPERTIES_STORED;
    public static WinError ERROR_NOT_QUORUM_CLASS;
    public static WinError ERROR_CORE_RESOURCE;
    public static WinError ERROR_QUORUM_RESOURCE_ONLINE_FAILED;
    public static WinError ERROR_QUORUMLOG_OPEN_FAILED;
    public static WinError ERROR_CLUSTERLOG_CORRUPT;
    public static WinError ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE;
    public static WinError ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE;
    public static WinError ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND;
    public static WinError ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE;
    public static WinError ERROR_QUORUM_OWNER_ALIVE;
    public static WinError ERROR_NETWORK_NOT_AVAILABLE;
    public static WinError ERROR_NODE_NOT_AVAILABLE;
    public static WinError ERROR_ALL_NODES_NOT_AVAILABLE;
    public static WinError ERROR_RESOURCE_FAILED;
    public static WinError ERROR_CLUSTER_INVALID_NODE;
    public static WinError ERROR_CLUSTER_NODE_EXISTS;
    public static WinError ERROR_CLUSTER_JOIN_IN_PROGRESS;
    public static WinError ERROR_CLUSTER_NODE_NOT_FOUND;
    public static WinError ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND;
    public static WinError ERROR_CLUSTER_NETWORK_EXISTS;
    public static WinError ERROR_CLUSTER_NETWORK_NOT_FOUND;
    public static WinError ERROR_CLUSTER_NETINTERFACE_EXISTS;
    public static WinError ERROR_CLUSTER_NETINTERFACE_NOT_FOUND;
    public static WinError ERROR_CLUSTER_INVALID_REQUEST;
    public static WinError ERROR_CLUSTER_INVALID_NETWORK_PROVIDER;
    public static WinError ERROR_CLUSTER_NODE_DOWN;
    public static WinError ERROR_CLUSTER_NODE_UNREACHABLE;
    public static WinError ERROR_CLUSTER_NODE_NOT_MEMBER;
    public static WinError ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS;
    public static WinError ERROR_CLUSTER_INVALID_NETWORK;
    public static WinError ERROR_CLUSTER_NODE_UP;
    public static WinError ERROR_CLUSTER_IPADDR_IN_USE;
    public static WinError ERROR_CLUSTER_NODE_NOT_PAUSED;
    public static WinError ERROR_CLUSTER_NO_SECURITY_CONTEXT;
    public static WinError ERROR_CLUSTER_NETWORK_NOT_INTERNAL;
    public static WinError ERROR_CLUSTER_NODE_ALREADY_UP;
    public static WinError ERROR_CLUSTER_NODE_ALREADY_DOWN;
    public static WinError ERROR_CLUSTER_NETWORK_ALREADY_ONLINE;
    public static WinError ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE;
    public static WinError ERROR_CLUSTER_NODE_ALREADY_MEMBER;
    public static WinError ERROR_CLUSTER_LAST_INTERNAL_NETWORK;
    public static WinError ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS;
    public static WinError ERROR_INVALID_OPERATION_ON_QUORUM;
    public static WinError ERROR_DEPENDENCY_NOT_ALLOWED;
    public static WinError ERROR_CLUSTER_NODE_PAUSED;
    public static WinError ERROR_NODE_CANT_HOST_RESOURCE;
    public static WinError ERROR_CLUSTER_NODE_NOT_READY;
    public static WinError ERROR_CLUSTER_NODE_SHUTTING_DOWN;
    public static WinError ERROR_CLUSTER_JOIN_ABORTED;
    public static WinError ERROR_CLUSTER_INCOMPATIBLE_VERSIONS;
    public static WinError ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED;
    public static WinError ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED;
    public static WinError ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND;
    public static WinError ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED;
    public static WinError ERROR_CLUSTER_RESNAME_NOT_FOUND;
    public static WinError ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED;
    public static WinError ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST;
    public static WinError ERROR_CLUSTER_DATABASE_SEQMISMATCH;
    public static WinError ERROR_RESMON_INVALID_STATE;
    public static WinError ERROR_CLUSTER_GUM_NOT_LOCKER;
    public static WinError ERROR_QUORUM_DISK_NOT_FOUND;
    public static WinError ERROR_DATABASE_BACKUP_CORRUPT;
    public static WinError ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT;
    public static WinError ERROR_RESOURCE_PROPERTY_UNCHANGEABLE;
    public static WinError ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE;
    public static WinError ERROR_CLUSTER_QUORUMLOG_NOT_FOUND;
    public static WinError ERROR_CLUSTER_MEMBERSHIP_HALT;
    public static WinError ERROR_CLUSTER_INSTANCE_ID_MISMATCH;
    public static WinError ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP;
    public static WinError ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH;
    public static WinError ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP;
    public static WinError ERROR_CLUSTER_PARAMETER_MISMATCH;
    public static WinError ERROR_NODE_CANNOT_BE_CLUSTERED;
    public static WinError ERROR_CLUSTER_WRONG_OS_VERSION;
    public static WinError ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME;
    public static WinError ERROR_CLUSCFG_ALREADY_COMMITTED;
    public static WinError ERROR_CLUSCFG_ROLLBACK_FAILED;
    public static WinError ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT;
    public static WinError ERROR_CLUSTER_OLD_VERSION;
    public static WinError ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME;
    public static WinError ERROR_ENCRYPTION_FAILED;
    public static WinError ERROR_DECRYPTION_FAILED;
    public static WinError ERROR_FILE_ENCRYPTED;
    public static WinError ERROR_NO_RECOVERY_POLICY;
    public static WinError ERROR_NO_EFS;
    public static WinError ERROR_WRONG_EFS;
    public static WinError ERROR_NO_USER_KEYS;
    public static WinError ERROR_FILE_NOT_ENCRYPTED;
    public static WinError ERROR_NOT_EXPORT_FORMAT;
    public static WinError ERROR_FILE_READ_ONLY;
    public static WinError ERROR_DIR_EFS_DISALLOWED;
    public static WinError ERROR_EFS_SERVER_NOT_TRUSTED;
    public static WinError ERROR_BAD_RECOVERY_POLICY;
    public static WinError ERROR_EFS_ALG_BLOB_TOO_BIG;
    public static WinError ERROR_VOLUME_NOT_SUPPORT_EFS;
    public static WinError ERROR_EFS_DISABLED;
    public static WinError ERROR_EFS_VERSION_NOT_SUPPORT;
    public static WinError ERROR_NO_BROWSER_SERVERS_FOUND;
    public static WinError SCHED_E_SERVICE_NOT_LOCALSYSTEM;
    public static WinError ERROR_CTX_WINSTATION_NAME_INVALID;
    public static WinError ERROR_CTX_INVALID_PD;
    public static WinError ERROR_CTX_PD_NOT_FOUND;
    public static WinError ERROR_CTX_WD_NOT_FOUND;
    public static WinError ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY;
    public static WinError ERROR_CTX_SERVICE_NAME_COLLISION;
    public static WinError ERROR_CTX_CLOSE_PENDING;
    public static WinError ERROR_CTX_NO_OUTBUF;
    public static WinError ERROR_CTX_MODEM_INF_NOT_FOUND;
    public static WinError ERROR_CTX_INVALID_MODEMNAME;
    public static WinError ERROR_CTX_MODEM_RESPONSE_ERROR;
    public static WinError ERROR_CTX_MODEM_RESPONSE_TIMEOUT;
    public static WinError ERROR_CTX_MODEM_RESPONSE_NO_CARRIER;
    public static WinError ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE;
    public static WinError ERROR_CTX_MODEM_RESPONSE_BUSY;
    public static WinError ERROR_CTX_MODEM_RESPONSE_VOICE;
    public static WinError ERROR_CTX_TD_ERROR;
    public static WinError ERROR_CTX_WINSTATION_NOT_FOUND;
    public static WinError ERROR_CTX_WINSTATION_ALREADY_EXISTS;
    public static WinError ERROR_CTX_WINSTATION_BUSY;
    public static WinError ERROR_CTX_BAD_VIDEO_MODE;
    public static WinError ERROR_CTX_GRAPHICS_INVALID;
    public static WinError ERROR_CTX_LOGON_DISABLED;
    public static WinError ERROR_CTX_NOT_CONSOLE;
    public static WinError ERROR_CTX_CLIENT_QUERY_TIMEOUT;
    public static WinError ERROR_CTX_CONSOLE_DISCONNECT;
    public static WinError ERROR_CTX_CONSOLE_CONNECT;
    public static WinError ERROR_CTX_SHADOW_DENIED;
    public static WinError ERROR_CTX_WINSTATION_ACCESS_DENIED;
    public static WinError ERROR_CTX_INVALID_WD;
    public static WinError ERROR_CTX_SHADOW_INVALID;
    public static WinError ERROR_CTX_SHADOW_DISABLED;
    public static WinError ERROR_CTX_CLIENT_LICENSE_IN_USE;
    public static WinError ERROR_CTX_CLIENT_LICENSE_NOT_SET;
    public static WinError ERROR_CTX_LICENSE_NOT_AVAILABLE;
    public static WinError ERROR_CTX_LICENSE_CLIENT_INVALID;
    public static WinError ERROR_CTX_LICENSE_EXPIRED;
    public static WinError ERROR_CTX_SHADOW_NOT_RUNNING;
    public static WinError ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE;
    public static WinError ERROR_ACTIVATION_COUNT_EXCEEDED;
    public static WinError FRS_ERR_INVALID_API_SEQUENCE;
    public static WinError FRS_ERR_STARTING_SERVICE;
    public static WinError FRS_ERR_STOPPING_SERVICE;
    public static WinError FRS_ERR_INTERNAL_API;
    public static WinError FRS_ERR_INTERNAL;
    public static WinError FRS_ERR_SERVICE_COMM;
    public static WinError FRS_ERR_INSUFFICIENT_PRIV;
    public static WinError FRS_ERR_AUTHENTICATION;
    public static WinError FRS_ERR_PARENT_INSUFFICIENT_PRIV;
    public static WinError FRS_ERR_PARENT_AUTHENTICATION;
    public static WinError FRS_ERR_CHILD_TO_PARENT_COMM;
    public static WinError FRS_ERR_PARENT_TO_CHILD_COMM;
    public static WinError FRS_ERR_SYSVOL_POPULATE;
    public static WinError FRS_ERR_SYSVOL_POPULATE_TIMEOUT;
    public static WinError FRS_ERR_SYSVOL_IS_BUSY;
    public static WinError FRS_ERR_SYSVOL_DEMOTE;
    public static WinError FRS_ERR_INVALID_SERVICE_PARAMETER;
    public static WinError DS_S_SUCCESS;
    public static WinError ERROR_DS_NOT_INSTALLED;
    public static WinError ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY;
    public static WinError ERROR_DS_NO_ATTRIBUTE_OR_VALUE;
    public static WinError ERROR_DS_INVALID_ATTRIBUTE_SYNTAX;
    public static WinError ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED;
    public static WinError ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS;
    public static WinError ERROR_DS_BUSY;
    public static WinError ERROR_DS_UNAVAILABLE;
    public static WinError ERROR_DS_NO_RIDS_ALLOCATED;
    public static WinError ERROR_DS_NO_MORE_RIDS;
    public static WinError ERROR_DS_INCORRECT_ROLE_OWNER;
    public static WinError ERROR_DS_RIDMGR_INIT_ERROR;
    public static WinError ERROR_DS_OBJ_CLASS_VIOLATION;
    public static WinError ERROR_DS_CANT_ON_NON_LEAF;
    public static WinError ERROR_DS_CANT_ON_RDN;
    public static WinError ERROR_DS_CANT_MOD_OBJ_CLASS;
    public static WinError ERROR_DS_CROSS_DOM_MOVE_ERROR;
    public static WinError ERROR_DS_GC_NOT_AVAILABLE;
    public static WinError ERROR_SHARED_POLICY;
    public static WinError ERROR_POLICY_OBJECT_NOT_FOUND;
    public static WinError ERROR_POLICY_ONLY_IN_DS;
    public static WinError ERROR_PROMOTION_ACTIVE;
    public static WinError ERROR_NO_PROMOTION_ACTIVE;
    public static WinError ERROR_DS_OPERATIONS_ERROR;
    public static WinError ERROR_DS_PROTOCOL_ERROR;
    public static WinError ERROR_DS_TIMELIMIT_EXCEEDED;
    public static WinError ERROR_DS_SIZELIMIT_EXCEEDED;
    public static WinError ERROR_DS_ADMIN_LIMIT_EXCEEDED;
    public static WinError ERROR_DS_COMPARE_FALSE;
    public static WinError ERROR_DS_COMPARE_TRUE;
    public static WinError ERROR_DS_AUTH_METHOD_NOT_SUPPORTED;
    public static WinError ERROR_DS_STRONG_AUTH_REQUIRED;
    public static WinError ERROR_DS_INAPPROPRIATE_AUTH;
    public static WinError ERROR_DS_AUTH_UNKNOWN;
    public static WinError ERROR_DS_REFERRAL;
    public static WinError ERROR_DS_UNAVAILABLE_CRIT_EXTENSION;
    public static WinError ERROR_DS_CONFIDENTIALITY_REQUIRED;
    public static WinError ERROR_DS_INAPPROPRIATE_MATCHING;
    public static WinError ERROR_DS_CONSTRAINT_VIOLATION;
    public static WinError ERROR_DS_NO_SUCH_OBJECT;
    public static WinError ERROR_DS_ALIAS_PROBLEM;
    public static WinError ERROR_DS_INVALID_DN_SYNTAX;
    public static WinError ERROR_DS_IS_LEAF;
    public static WinError ERROR_DS_ALIAS_DEREF_PROBLEM;
    public static WinError ERROR_DS_UNWILLING_TO_PERFORM;
    public static WinError ERROR_DS_LOOP_DETECT;
    public static WinError ERROR_DS_NAMING_VIOLATION;
    public static WinError ERROR_DS_OBJECT_RESULTS_TOO_LARGE;
    public static WinError ERROR_DS_AFFECTS_MULTIPLE_DSAS;
    public static WinError ERROR_DS_SERVER_DOWN;
    public static WinError ERROR_DS_LOCAL_ERROR;
    public static WinError ERROR_DS_ENCODING_ERROR;
    public static WinError ERROR_DS_DECODING_ERROR;
    public static WinError ERROR_DS_FILTER_UNKNOWN;
    public static WinError ERROR_DS_PARAM_ERROR;
    public static WinError ERROR_DS_NOT_SUPPORTED;
    public static WinError ERROR_DS_NO_RESULTS_RETURNED;
    public static WinError ERROR_DS_CONTROL_NOT_FOUND;
    public static WinError ERROR_DS_CLIENT_LOOP;
    public static WinError ERROR_DS_REFERRAL_LIMIT_EXCEEDED;
    public static WinError ERROR_DS_SORT_CONTROL_MISSING;
    public static WinError ERROR_DS_OFFSET_RANGE_ERROR;
    public static WinError ERROR_DS_ROOT_MUST_BE_NC;
    public static WinError ERROR_DS_ADD_REPLICA_INHIBITED;
    public static WinError ERROR_DS_ATT_NOT_DEF_IN_SCHEMA;
    public static WinError ERROR_DS_MAX_OBJ_SIZE_EXCEEDED;
    public static WinError ERROR_DS_OBJ_STRING_NAME_EXISTS;
    public static WinError ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA;
    public static WinError ERROR_DS_RDN_DOESNT_MATCH_SCHEMA;
    public static WinError ERROR_DS_NO_REQUESTED_ATTS_FOUND;
    public static WinError ERROR_DS_USER_BUFFER_TO_SMALL;
    public static WinError ERROR_DS_ATT_IS_NOT_ON_OBJ;
    public static WinError ERROR_DS_ILLEGAL_MOD_OPERATION;
    public static WinError ERROR_DS_OBJ_TOO_LARGE;
    public static WinError ERROR_DS_BAD_INSTANCE_TYPE;
    public static WinError ERROR_DS_MASTERDSA_REQUIRED;
    public static WinError ERROR_DS_OBJECT_CLASS_REQUIRED;
    public static WinError ERROR_DS_MISSING_REQUIRED_ATT;
    public static WinError ERROR_DS_ATT_NOT_DEF_FOR_CLASS;
    public static WinError ERROR_DS_ATT_ALREADY_EXISTS;
    public static WinError ERROR_DS_CANT_ADD_ATT_VALUES;
    public static WinError ERROR_DS_SINGLE_VALUE_CONSTRAINT;
    public static WinError ERROR_DS_RANGE_CONSTRAINT;
    public static WinError ERROR_DS_ATT_VAL_ALREADY_EXISTS;
    public static WinError ERROR_DS_CANT_REM_MISSING_ATT;
    public static WinError ERROR_DS_CANT_REM_MISSING_ATT_VAL;
    public static WinError ERROR_DS_ROOT_CANT_BE_SUBREF;
    public static WinError ERROR_DS_NO_CHAINING;
    public static WinError ERROR_DS_NO_CHAINED_EVAL;
    public static WinError ERROR_DS_NO_PARENT_OBJECT;
    public static WinError ERROR_DS_PARENT_IS_AN_ALIAS;
    public static WinError ERROR_DS_CANT_MIX_MASTER_AND_REPS;
    public static WinError ERROR_DS_CHILDREN_EXIST;
    public static WinError ERROR_DS_OBJ_NOT_FOUND;
    public static WinError ERROR_DS_ALIASED_OBJ_MISSING;
    public static WinError ERROR_DS_BAD_NAME_SYNTAX;
    public static WinError ERROR_DS_ALIAS_POINTS_TO_ALIAS;
    public static WinError ERROR_DS_CANT_DEREF_ALIAS;
    public static WinError ERROR_DS_OUT_OF_SCOPE;
    public static WinError ERROR_DS_OBJECT_BEING_REMOVED;
    public static WinError ERROR_DS_CANT_DELETE_DSA_OBJ;
    public static WinError ERROR_DS_GENERIC_ERROR;
    public static WinError ERROR_DS_DSA_MUST_BE_INT_MASTER;
    public static WinError ERROR_DS_CLASS_NOT_DSA;
    public static WinError ERROR_DS_INSUFF_ACCESS_RIGHTS;
    public static WinError ERROR_DS_ILLEGAL_SUPERIOR;
    public static WinError ERROR_DS_ATTRIBUTE_OWNED_BY_SAM;
    public static WinError ERROR_DS_NAME_TOO_MANY_PARTS;
    public static WinError ERROR_DS_NAME_TOO_LONG;
    public static WinError ERROR_DS_NAME_VALUE_TOO_LONG;
    public static WinError ERROR_DS_NAME_UNPARSEABLE;
    public static WinError ERROR_DS_NAME_TYPE_UNKNOWN;
    public static WinError ERROR_DS_NOT_AN_OBJECT;
    public static WinError ERROR_DS_SEC_DESC_TOO_SHORT;
    public static WinError ERROR_DS_SEC_DESC_INVALID;
    public static WinError ERROR_DS_NO_DELETED_NAME;
    public static WinError ERROR_DS_SUBREF_MUST_HAVE_PARENT;
    public static WinError ERROR_DS_NCNAME_MUST_BE_NC;
    public static WinError ERROR_DS_CANT_ADD_SYSTEM_ONLY;
    public static WinError ERROR_DS_CLASS_MUST_BE_CONCRETE;
    public static WinError ERROR_DS_INVALID_DMD;
    public static WinError ERROR_DS_OBJ_GUID_EXISTS;
    public static WinError ERROR_DS_NOT_ON_BACKLINK;
    public static WinError ERROR_DS_NO_CROSSREF_FOR_NC;
    public static WinError ERROR_DS_SHUTTING_DOWN;
    public static WinError ERROR_DS_UNKNOWN_OPERATION;
    public static WinError ERROR_DS_INVALID_ROLE_OWNER;
    public static WinError ERROR_DS_COULDNT_CONTACT_FSMO;
    public static WinError ERROR_DS_CROSS_NC_DN_RENAME;
    public static WinError ERROR_DS_CANT_MOD_SYSTEM_ONLY;
    public static WinError ERROR_DS_REPLICATOR_ONLY;
    public static WinError ERROR_DS_OBJ_CLASS_NOT_DEFINED;
    public static WinError ERROR_DS_OBJ_CLASS_NOT_SUBCLASS;
    public static WinError ERROR_DS_NAME_REFERENCE_INVALID;
    public static WinError ERROR_DS_CROSS_REF_EXISTS;
    public static WinError ERROR_DS_CANT_DEL_MASTER_CROSSREF;
    public static WinError ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD;
    public static WinError ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX;
    public static WinError ERROR_DS_DUP_RDN;
    public static WinError ERROR_DS_DUP_OID;
    public static WinError ERROR_DS_DUP_MAPI_ID;
    public static WinError ERROR_DS_DUP_SCHEMA_ID_GUID;
    public static WinError ERROR_DS_DUP_LDAP_DISPLAY_NAME;
    public static WinError ERROR_DS_SEMANTIC_ATT_TEST;
    public static WinError ERROR_DS_SYNTAX_MISMATCH;
    public static WinError ERROR_DS_EXISTS_IN_MUST_HAVE;
    public static WinError ERROR_DS_EXISTS_IN_MAY_HAVE;
    public static WinError ERROR_DS_NONEXISTENT_MAY_HAVE;
    public static WinError ERROR_DS_NONEXISTENT_MUST_HAVE;
    public static WinError ERROR_DS_AUX_CLS_TEST_FAIL;
    public static WinError ERROR_DS_NONEXISTENT_POSS_SUP;
    public static WinError ERROR_DS_SUB_CLS_TEST_FAIL;
    public static WinError ERROR_DS_BAD_RDN_ATT_ID_SYNTAX;
    public static WinError ERROR_DS_EXISTS_IN_AUX_CLS;
    public static WinError ERROR_DS_EXISTS_IN_SUB_CLS;
    public static WinError ERROR_DS_EXISTS_IN_POSS_SUP;
    public static WinError ERROR_DS_RECALCSCHEMA_FAILED;
    public static WinError ERROR_DS_TREE_DELETE_NOT_FINISHED;
    public static WinError ERROR_DS_CANT_DELETE;
    public static WinError ERROR_DS_ATT_SCHEMA_REQ_ID;
    public static WinError ERROR_DS_BAD_ATT_SCHEMA_SYNTAX;
    public static WinError ERROR_DS_CANT_CACHE_ATT;
    public static WinError ERROR_DS_CANT_CACHE_CLASS;
    public static WinError ERROR_DS_CANT_REMOVE_ATT_CACHE;
    public static WinError ERROR_DS_CANT_REMOVE_CLASS_CACHE;
    public static WinError ERROR_DS_CANT_RETRIEVE_DN;
    public static WinError ERROR_DS_MISSING_SUPREF;
    public static WinError ERROR_DS_CANT_RETRIEVE_INSTANCE;
    public static WinError ERROR_DS_CODE_INCONSISTENCY;
    public static WinError ERROR_DS_DATABASE_ERROR;
    public static WinError ERROR_DS_GOVERNSID_MISSING;
    public static WinError ERROR_DS_MISSING_EXPECTED_ATT;
    public static WinError ERROR_DS_NCNAME_MISSING_CR_REF;
    public static WinError ERROR_DS_SECURITY_CHECKING_ERROR;
    public static WinError ERROR_DS_SCHEMA_NOT_LOADED;
    public static WinError ERROR_DS_SCHEMA_ALLOC_FAILED;
    public static WinError ERROR_DS_ATT_SCHEMA_REQ_SYNTAX;
    public static WinError ERROR_DS_GCVERIFY_ERROR;
    public static WinError ERROR_DS_DRA_SCHEMA_MISMATCH;
    public static WinError ERROR_DS_CANT_FIND_DSA_OBJ;
    public static WinError ERROR_DS_CANT_FIND_EXPECTED_NC;
    public static WinError ERROR_DS_CANT_FIND_NC_IN_CACHE;
    public static WinError ERROR_DS_CANT_RETRIEVE_CHILD;
    public static WinError ERROR_DS_SECURITY_ILLEGAL_MODIFY;
    public static WinError ERROR_DS_CANT_REPLACE_HIDDEN_REC;
    public static WinError ERROR_DS_BAD_HIERARCHY_FILE;
    public static WinError ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED;
    public static WinError ERROR_DS_CONFIG_PARAM_MISSING;
    public static WinError ERROR_DS_COUNTING_AB_INDICES_FAILED;
    public static WinError ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED;
    public static WinError ERROR_DS_INTERNAL_FAILURE;
    public static WinError ERROR_DS_UNKNOWN_ERROR;
    public static WinError ERROR_DS_ROOT_REQUIRES_CLASS_TOP;
    public static WinError ERROR_DS_REFUSING_FSMO_ROLES;
    public static WinError ERROR_DS_MISSING_FSMO_SETTINGS;
    public static WinError ERROR_DS_UNABLE_TO_SURRENDER_ROLES;
    public static WinError ERROR_DS_DRA_GENERIC;
    public static WinError ERROR_DS_DRA_INVALID_PARAMETER;
    public static WinError ERROR_DS_DRA_BUSY;
    public static WinError ERROR_DS_DRA_BAD_DN;
    public static WinError ERROR_DS_DRA_BAD_NC;
    public static WinError ERROR_DS_DRA_DN_EXISTS;
    public static WinError ERROR_DS_DRA_INTERNAL_ERROR;
    public static WinError ERROR_DS_DRA_INCONSISTENT_DIT;
    public static WinError ERROR_DS_DRA_CONNECTION_FAILED;
    public static WinError ERROR_DS_DRA_BAD_INSTANCE_TYPE;
    public static WinError ERROR_DS_DRA_OUT_OF_MEM;
    public static WinError ERROR_DS_DRA_MAIL_PROBLEM;
    public static WinError ERROR_DS_DRA_REF_ALREADY_EXISTS;
    public static WinError ERROR_DS_DRA_REF_NOT_FOUND;
    public static WinError ERROR_DS_DRA_OBJ_IS_REP_SOURCE;
    public static WinError ERROR_DS_DRA_DB_ERROR;
    public static WinError ERROR_DS_DRA_NO_REPLICA;
    public static WinError ERROR_DS_DRA_ACCESS_DENIED;
    public static WinError ERROR_DS_DRA_NOT_SUPPORTED;
    public static WinError ERROR_DS_DRA_RPC_CANCELLED;
    public static WinError ERROR_DS_DRA_SOURCE_DISABLED;
    public static WinError ERROR_DS_DRA_SINK_DISABLED;
    public static WinError ERROR_DS_DRA_NAME_COLLISION;
    public static WinError ERROR_DS_DRA_SOURCE_REINSTALLED;
    public static WinError ERROR_DS_DRA_MISSING_PARENT;
    public static WinError ERROR_DS_DRA_PREEMPTED;
    public static WinError ERROR_DS_DRA_ABANDON_SYNC;
    public static WinError ERROR_DS_DRA_SHUTDOWN;
    public static WinError ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET;
    public static WinError ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA;
    public static WinError ERROR_DS_DRA_EXTN_CONNECTION_FAILED;
    public static WinError ERROR_DS_INSTALL_SCHEMA_MISMATCH;
    public static WinError ERROR_DS_DUP_LINK_ID;
    public static WinError ERROR_DS_NAME_ERROR_RESOLVING;
    public static WinError ERROR_DS_NAME_ERROR_NOT_FOUND;
    public static WinError ERROR_DS_NAME_ERROR_NOT_UNIQUE;
    public static WinError ERROR_DS_NAME_ERROR_NO_MAPPING;
    public static WinError ERROR_DS_NAME_ERROR_DOMAIN_ONLY;
    public static WinError ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING;
    public static WinError ERROR_DS_CONSTRUCTED_ATT_MOD;
    public static WinError ERROR_DS_WRONG_OM_OBJ_CLASS;
    public static WinError ERROR_DS_DRA_REPL_PENDING;
    public static WinError ERROR_DS_DS_REQUIRED;
    public static WinError ERROR_DS_INVALID_LDAP_DISPLAY_NAME;
    public static WinError ERROR_DS_NON_BASE_SEARCH;
    public static WinError ERROR_DS_CANT_RETRIEVE_ATTS;
    public static WinError ERROR_DS_BACKLINK_WITHOUT_LINK;
    public static WinError ERROR_DS_EPOCH_MISMATCH;
    public static WinError ERROR_DS_SRC_NAME_MISMATCH;
    public static WinError ERROR_DS_SRC_AND_DST_NC_IDENTICAL;
    public static WinError ERROR_DS_DST_NC_MISMATCH;
    public static WinError ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC;
    public static WinError ERROR_DS_SRC_GUID_MISMATCH;
    public static WinError ERROR_DS_CANT_MOVE_DELETED_OBJECT;
    public static WinError ERROR_DS_PDC_OPERATION_IN_PROGRESS;
    public static WinError ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD;
    public static WinError ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION;
    public static WinError ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS;
    public static WinError ERROR_DS_NC_MUST_HAVE_NC_PARENT;
    public static WinError ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE;
    public static WinError ERROR_DS_DST_DOMAIN_NOT_NATIVE;
    public static WinError ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER;
    public static WinError ERROR_DS_CANT_MOVE_ACCOUNT_GROUP;
    public static WinError ERROR_DS_CANT_MOVE_RESOURCE_GROUP;
    public static WinError ERROR_DS_INVALID_SEARCH_FLAG;
    public static WinError ERROR_DS_NO_TREE_DELETE_ABOVE_NC;
    public static WinError ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE;
    public static WinError ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE;
    public static WinError ERROR_DS_SAM_INIT_FAILURE;
    public static WinError ERROR_DS_SENSITIVE_GROUP_VIOLATION;
    public static WinError ERROR_DS_CANT_MOD_PRIMARYGROUPID;
    public static WinError ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD;
    public static WinError ERROR_DS_NONSAFE_SCHEMA_CHANGE;
    public static WinError ERROR_DS_SCHEMA_UPDATE_DISALLOWED;
    public static WinError ERROR_DS_CANT_CREATE_UNDER_SCHEMA;
    public static WinError ERROR_DS_INSTALL_NO_SRC_SCH_VERSION;
    public static WinError ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE;
    public static WinError ERROR_DS_INVALID_GROUP_TYPE;
    public static WinError ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN;
    public static WinError ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN;
    public static WinError ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER;
    public static WinError ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER;
    public static WinError ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER;
    public static WinError ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER;
    public static WinError ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER;
    public static WinError ERROR_DS_HAVE_PRIMARY_MEMBERS;
    public static WinError ERROR_DS_STRING_SD_CONVERSION_FAILED;
    public static WinError ERROR_DS_NAMING_MASTER_GC;
    public static WinError ERROR_DS_DNS_LOOKUP_FAILURE;
    public static WinError ERROR_DS_COULDNT_UPDATE_SPNS;
    public static WinError ERROR_DS_CANT_RETRIEVE_SD;
    public static WinError ERROR_DS_KEY_NOT_UNIQUE;
    public static WinError ERROR_DS_WRONG_LINKED_ATT_SYNTAX;
    public static WinError ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD;
    public static WinError ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY;
    public static WinError ERROR_DS_CANT_START;
    public static WinError ERROR_DS_INIT_FAILURE;
    public static WinError ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION;
    public static WinError ERROR_DS_SOURCE_DOMAIN_IN_FOREST;
    public static WinError ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST;
    public static WinError ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED;
    public static WinError ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN;
    public static WinError ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER;
    public static WinError ERROR_DS_SRC_SID_EXISTS_IN_FOREST;
    public static WinError ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH;
    public static WinError ERROR_SAM_INIT_FAILURE;
    public static WinError ERROR_DS_DRA_SCHEMA_INFO_SHIP;
    public static WinError ERROR_DS_DRA_SCHEMA_CONFLICT;
    public static WinError ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT;
    public static WinError ERROR_DS_DRA_OBJ_NC_MISMATCH;
    public static WinError ERROR_DS_NC_STILL_HAS_DSAS;
    public static WinError ERROR_DS_GC_REQUIRED;
    public static WinError ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY;
    public static WinError ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS;
    public static WinError ERROR_DS_CANT_ADD_TO_GC;
    public static WinError ERROR_DS_NO_CHECKPOINT_WITH_PDC;
    public static WinError ERROR_DS_SOURCE_AUDITING_NOT_ENABLED;
    public static WinError ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC;
    public static WinError ERROR_DS_INVALID_NAME_FOR_SPN;
    public static WinError ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS;
    public static WinError ERROR_DS_UNICODEPWD_NOT_IN_QUOTES;
    public static WinError ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED;
    public static WinError ERROR_DS_MUST_BE_RUN_ON_DST_DC;
    public static WinError ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER;
    public static WinError ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ;
    public static WinError ERROR_DS_INIT_FAILURE_CONSOLE;
    public static WinError ERROR_DS_SAM_INIT_FAILURE_CONSOLE;
    public static WinError ERROR_DS_FOREST_VERSION_TOO_HIGH;
    public static WinError ERROR_DS_DOMAIN_VERSION_TOO_HIGH;
    public static WinError ERROR_DS_FOREST_VERSION_TOO_LOW;
    public static WinError ERROR_DS_DOMAIN_VERSION_TOO_LOW;
    public static WinError ERROR_DS_INCOMPATIBLE_VERSION;
    public static WinError ERROR_DS_LOW_DSA_VERSION;
    public static WinError ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN;
    public static WinError ERROR_DS_NOT_SUPPORTED_SORT_ORDER;
    public static WinError ERROR_DS_NAME_NOT_UNIQUE;
    public static WinError ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4;
    public static WinError ERROR_DS_OUT_OF_VERSION_STORE;
    public static WinError ERROR_DS_INCOMPATIBLE_CONTROLS_USED;
    public static WinError ERROR_DS_NO_REF_DOMAIN;
    public static WinError ERROR_DS_RESERVED_LINK_ID;
    public static WinError ERROR_DS_LINK_ID_NOT_AVAILABLE;
    public static WinError ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER;
    public static WinError ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE;
    public static WinError ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC;
    public static WinError ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG;
    public static WinError ERROR_DS_MODIFYDN_WRONG_GRANDPARENT;
    public static WinError ERROR_DS_NAME_ERROR_TRUST_REFERRAL;
    public static WinError ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER;
    public static WinError ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD;
    public static WinError ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2;
    public static WinError ERROR_DS_THREAD_LIMIT_EXCEEDED;
    public static WinError ERROR_DS_NOT_CLOSEST;
    public static WinError ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF;
    public static WinError ERROR_DS_SINGLE_USER_MODE_FAILED;
    public static WinError ERROR_DS_NTDSCRIPT_SYNTAX_ERROR;
    public static WinError ERROR_DS_NTDSCRIPT_PROCESS_ERROR;
    public static WinError ERROR_DS_DIFFERENT_REPL_EPOCHS;
    public static WinError ERROR_DS_DRS_EXTENSIONS_CHANGED;
    public static WinError ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR;
    public static WinError ERROR_DS_NO_MSDS_INTID;
    public static WinError ERROR_DS_DUP_MSDS_INTID;
    public static WinError ERROR_DS_EXISTS_IN_RDNATTID;
    public static WinError ERROR_DS_AUTHORIZATION_FAILED;
    public static WinError ERROR_DS_INVALID_SCRIPT;
    public static WinError ERROR_DS_REMOTE_CROSSREF_OP_FAILED;
    public static WinError ERROR_DS_CROSS_REF_BUSY;
    public static WinError ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN;
    public static WinError ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC;
    public static WinError ERROR_DS_DUPLICATE_ID_FOUND;
    public static WinError ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT;
    public static WinError ERROR_DS_GROUP_CONVERSION_ERROR;
    public static WinError ERROR_DS_CANT_MOVE_APP_BASIC_GROUP;
    public static WinError ERROR_DS_CANT_MOVE_APP_QUERY_GROUP;
    public static WinError ERROR_DS_ROLE_NOT_VERIFIED;
    public static WinError ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL;
    public static WinError ERROR_DS_DOMAIN_RENAME_IN_PROGRESS;
    public static WinError ERROR_DS_EXISTING_AD_CHILD_NC;
    public static WinError ERROR_DS_REPL_LIFETIME_EXCEEDED;
    public static WinError ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER;
    public static WinError ERROR_DS_LDAP_SEND_QUEUE_FULL;
    public static WinError ERROR_DS_DRA_OUT_SCHEDULE_WINDOW;
    public static WinError DNS_ERROR_RESPONSE_CODES_BASE;
    public static WinError DNS_ERROR_RCODE_NO_ERROR;
    public static WinError DNS_ERROR_MASK;
    public static WinError DNS_ERROR_RCODE_FORMAT_ERROR;
    public static WinError DNS_ERROR_RCODE_SERVER_FAILURE;
    public static WinError DNS_ERROR_RCODE_NAME_ERROR;
    public static WinError DNS_ERROR_RCODE_NOT_IMPLEMENTED;
    public static WinError DNS_ERROR_RCODE_REFUSED;
    public static WinError DNS_ERROR_RCODE_YXDOMAIN;
    public static WinError DNS_ERROR_RCODE_YXRRSET;
    public static WinError DNS_ERROR_RCODE_NXRRSET;
    public static WinError DNS_ERROR_RCODE_NOTAUTH;
    public static WinError DNS_ERROR_RCODE_NOTZONE;
    public static WinError DNS_ERROR_RCODE_BADSIG;
    public static WinError DNS_ERROR_RCODE_BADKEY;
    public static WinError DNS_ERROR_RCODE_BADTIME;
    public static WinError DNS_ERROR_RCODE_LAST;
    public static WinError DNS_ERROR_PACKET_FMT_BASE;
    public static WinError DNS_INFO_NO_RECORDS;
    public static WinError DNS_ERROR_BAD_PACKET;
    public static WinError DNS_ERROR_NO_PACKET;
    public static WinError DNS_ERROR_RCODE;
    public static WinError DNS_ERROR_UNSECURE_PACKET;
    public static WinError DNS_STATUS_PACKET_UNSECURE;
    public static WinError DNS_ERROR_NO_MEMORY;
    public static WinError DNS_ERROR_INVALID_NAME;
    public static WinError DNS_ERROR_INVALID_DATA;
    public static WinError DNS_ERROR_GENERAL_API_BASE;
    public static WinError DNS_ERROR_INVALID_TYPE;
    public static WinError DNS_ERROR_INVALID_IP_ADDRESS;
    public static WinError DNS_ERROR_INVALID_PROPERTY;
    public static WinError DNS_ERROR_TRY_AGAIN_LATER;
    public static WinError DNS_ERROR_NOT_UNIQUE;
    public static WinError DNS_ERROR_NON_RFC_NAME;
    public static WinError DNS_STATUS_FQDN;
    public static WinError DNS_STATUS_DOTTED_NAME;
    public static WinError DNS_STATUS_SINGLE_PART_NAME;
    public static WinError DNS_ERROR_INVALID_NAME_CHAR;
    public static WinError DNS_ERROR_NUMERIC_NAME;
    public static WinError DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER;
    public static WinError DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION;
    public static WinError DNS_ERROR_CANNOT_FIND_ROOT_HINTS;
    public static WinError DNS_ERROR_INCONSISTENT_ROOT_HINTS;
    public static WinError DNS_ERROR_ZONE_BASE;
    public static WinError DNS_ERROR_ZONE_DOES_NOT_EXIST;
    public static WinError DNS_ERROR_NO_ZONE_INFO;
    public static WinError DNS_ERROR_INVALID_ZONE_OPERATION;
    public static WinError DNS_ERROR_ZONE_CONFIGURATION_ERROR;
    public static WinError DNS_ERROR_ZONE_HAS_NO_SOA_RECORD;
    public static WinError DNS_ERROR_ZONE_HAS_NO_NS_RECORDS;
    public static WinError DNS_ERROR_ZONE_LOCKED;
    public static WinError DNS_ERROR_ZONE_CREATION_FAILED;
    public static WinError DNS_ERROR_ZONE_ALREADY_EXISTS;
    public static WinError DNS_ERROR_AUTOZONE_ALREADY_EXISTS;
    public static WinError DNS_ERROR_INVALID_ZONE_TYPE;
    public static WinError DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP;
    public static WinError DNS_ERROR_ZONE_NOT_SECONDARY;
    public static WinError DNS_ERROR_NEED_SECONDARY_ADDRESSES;
    public static WinError DNS_ERROR_WINS_INIT_FAILED;
    public static WinError DNS_ERROR_NEED_WINS_SERVERS;
    public static WinError DNS_ERROR_NBSTAT_INIT_FAILED;
    public static WinError DNS_ERROR_SOA_DELETE_INVALID;
    public static WinError DNS_ERROR_FORWARDER_ALREADY_EXISTS;
    public static WinError DNS_ERROR_ZONE_REQUIRES_MASTER_IP;
    public static WinError DNS_ERROR_ZONE_IS_SHUTDOWN;
    public static WinError DNS_ERROR_DATAFILE_BASE;
    public static WinError DNS_ERROR_PRIMARY_REQUIRES_DATAFILE;
    public static WinError DNS_ERROR_INVALID_DATAFILE_NAME;
    public static WinError DNS_ERROR_DATAFILE_OPEN_FAILURE;
    public static WinError DNS_ERROR_FILE_WRITEBACK_FAILED;
    public static WinError DNS_ERROR_DATAFILE_PARSING;
    public static WinError DNS_ERROR_DATABASE_BASE;
    public static WinError DNS_ERROR_RECORD_DOES_NOT_EXIST;
    public static WinError DNS_ERROR_RECORD_FORMAT;
    public static WinError DNS_ERROR_NODE_CREATION_FAILED;
    public static WinError DNS_ERROR_UNKNOWN_RECORD_TYPE;
    public static WinError DNS_ERROR_RECORD_TIMED_OUT;
    public static WinError DNS_ERROR_NAME_NOT_IN_ZONE;
    public static WinError DNS_ERROR_CNAME_LOOP;
    public static WinError DNS_ERROR_NODE_IS_CNAME;
    public static WinError DNS_ERROR_CNAME_COLLISION;
    public static WinError DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT;
    public static WinError DNS_ERROR_RECORD_ALREADY_EXISTS;
    public static WinError DNS_ERROR_SECONDARY_DATA;
    public static WinError DNS_ERROR_NO_CREATE_CACHE_DATA;
    public static WinError DNS_ERROR_NAME_DOES_NOT_EXIST;
    public static WinError DNS_WARNING_PTR_CREATE_FAILED;
    public static WinError DNS_WARNING_DOMAIN_UNDELETED;
    public static WinError DNS_ERROR_DS_UNAVAILABLE;
    public static WinError DNS_ERROR_DS_ZONE_ALREADY_EXISTS;
    public static WinError DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE;
    public static WinError DNS_ERROR_OPERATION_BASE;
    public static WinError DNS_INFO_AXFR_COMPLETE;
    public static WinError DNS_ERROR_AXFR;
    public static WinError DNS_INFO_ADDED_LOCAL_WINS;
    public static WinError DNS_ERROR_SECURE_BASE;
    public static WinError DNS_STATUS_CONTINUE_NEEDED;
    public static WinError DNS_ERROR_SETUP_BASE;
    public static WinError DNS_ERROR_NO_TCPIP;
    public static WinError DNS_ERROR_NO_DNS_SERVERS;
    public static WinError DNS_ERROR_DP_BASE;
    public static WinError DNS_ERROR_DP_DOES_NOT_EXIST;
    public static WinError DNS_ERROR_DP_ALREADY_EXISTS;
    public static WinError DNS_ERROR_DP_NOT_ENLISTED;
    public static WinError DNS_ERROR_DP_ALREADY_ENLISTED;
    public static WinError DNS_ERROR_DP_NOT_AVAILABLE;
    public static WinError DNS_ERROR_DP_FSMO_ERROR;
    public static WinError WSAEINTR;
    public static WinError WSAEBADF;
    public static WinError WSAEACCES;
    public static WinError WSAEFAULT;
    public static WinError WSAEINVAL;
    public static WinError WSAEMFILE;
    public static WinError WSAEWOULDBLOCK;
    public static WinError WSAEINPROGRESS;
    public static WinError WSAEALREADY;
    public static WinError WSAENOTSOCK;
    public static WinError WSAEDESTADDRREQ;
    public static WinError WSAEMSGSIZE;
    public static WinError WSAEPROTOTYPE;
    public static WinError WSAENOPROTOOPT;
    public static WinError WSAEPROTONOSUPPORT;
    public static WinError WSAESOCKTNOSUPPORT;
    public static WinError WSAEOPNOTSUPP;
    public static WinError WSAEPFNOSUPPORT;
    public static WinError WSAEAFNOSUPPORT;
    public static WinError WSAEADDRINUSE;
    public static WinError WSAEADDRNOTAVAIL;
    public static WinError WSAENETDOWN;
    public static WinError WSAENETUNREACH;
    public static WinError WSAENETRESET;
    public static WinError WSAECONNABORTED;
    public static WinError WSAECONNRESET;
    public static WinError WSAENOBUFS;
    public static WinError WSAEISCONN;
    public static WinError WSAENOTCONN;
    public static WinError WSAESHUTDOWN;
    public static WinError WSAETOOMANYREFS;
    public static WinError WSAETIMEDOUT;
    public static WinError WSAECONNREFUSED;
    public static WinError WSAELOOP;
    public static WinError WSAENAMETOOLONG;
    public static WinError WSAEHOSTDOWN;
    public static WinError WSAEHOSTUNREACH;
    public static WinError WSAENOTEMPTY;
    public static WinError WSAEPROCLIM;
    public static WinError WSAEUSERS;
    public static WinError WSAEDQUOT;
    public static WinError WSAESTALE;
    public static WinError WSAEREMOTE;
    public static WinError WSASYSNOTREADY;
    public static WinError WSAVERNOTSUPPORTED;
    public static WinError WSANOTINITIALISED;
    public static WinError WSAEDISCON;
    public static WinError WSAENOMORE;
    public static WinError WSAECANCELLED;
    public static WinError WSAEINVALIDPROCTABLE;
    public static WinError WSAEINVALIDPROVIDER;
    public static WinError WSAEPROVIDERFAILEDINIT;
    public static WinError WSASYSCALLFAILURE;
    public static WinError WSASERVICE_NOT_FOUND;
    public static WinError WSATYPE_NOT_FOUND;
    public static WinError WSA_E_NO_MORE;
    public static WinError WSA_E_CANCELLED;
    public static WinError WSAEREFUSED;
    public static WinError WSAHOST_NOT_FOUND;
    public static WinError WSATRY_AGAIN;
    public static WinError WSANO_RECOVERY;
    public static WinError WSANO_DATA;
    public static WinError WSA_QOS_RECEIVERS;
    public static WinError WSA_QOS_SENDERS;
    public static WinError WSA_QOS_NO_SENDERS;
    public static WinError WSA_QOS_NO_RECEIVERS;
    public static WinError WSA_QOS_REQUEST_CONFIRMED;
    public static WinError WSA_QOS_ADMISSION_FAILURE;
    public static WinError WSA_QOS_POLICY_FAILURE;
    public static WinError WSA_QOS_BAD_STYLE;
    public static WinError WSA_QOS_BAD_OBJECT;
    public static WinError WSA_QOS_TRAFFIC_CTRL_ERROR;
    public static WinError WSA_QOS_GENERIC_ERROR;
    public static WinError WSA_QOS_ESERVICETYPE;
    public static WinError WSA_QOS_EFLOWSPEC;
    public static WinError WSA_QOS_EPROVSPECBUF;
    public static WinError WSA_QOS_EFILTERSTYLE;
    public static WinError WSA_QOS_EFILTERTYPE;
    public static WinError WSA_QOS_EFILTERCOUNT;
    public static WinError WSA_QOS_EOBJLENGTH;
    public static WinError WSA_QOS_EFLOWCOUNT;
    public static WinError WSA_QOS_EUNKOWNPSOBJ;
    public static WinError WSA_QOS_EPOLICYOBJ;
    public static WinError WSA_QOS_EFLOWDESC;
    public static WinError WSA_QOS_EPSFLOWSPEC;
    public static WinError WSA_QOS_EPSFILTERSPEC;
    public static WinError WSA_QOS_ESDMODEOBJ;
    public static WinError WSA_QOS_ESHAPERATEOBJ;
    public static WinError WSA_QOS_RESERVED_PETYPE;
    public static WinError ERROR_SXS_SECTION_NOT_FOUND;
    public static WinError ERROR_SXS_CANT_GEN_ACTCTX;
    public static WinError ERROR_SXS_INVALID_ACTCTXDATA_FORMAT;
    public static WinError ERROR_SXS_ASSEMBLY_NOT_FOUND;
    public static WinError ERROR_SXS_MANIFEST_FORMAT_ERROR;
    public static WinError ERROR_SXS_MANIFEST_PARSE_ERROR;
    public static WinError ERROR_SXS_ACTIVATION_CONTEXT_DISABLED;
    public static WinError ERROR_SXS_KEY_NOT_FOUND;
    public static WinError ERROR_SXS_VERSION_CONFLICT;
    public static WinError ERROR_SXS_WRONG_SECTION_TYPE;
    public static WinError ERROR_SXS_THREAD_QUERIES_DISABLED;
    public static WinError ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET;
    public static WinError ERROR_SXS_UNKNOWN_ENCODING_GROUP;
    public static WinError ERROR_SXS_UNKNOWN_ENCODING;
    public static WinError ERROR_SXS_INVALID_XML_NAMESPACE_URI;
    public static WinError ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED;
    public static WinError ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED;
    public static WinError ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE;
    public static WinError ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE;
    public static WinError ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE;
    public static WinError ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT;
    public static WinError ERROR_SXS_DUPLICATE_DLL_NAME;
    public static WinError ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME;
    public static WinError ERROR_SXS_DUPLICATE_CLSID;
    public static WinError ERROR_SXS_DUPLICATE_IID;
    public static WinError ERROR_SXS_DUPLICATE_TLBID;
    public static WinError ERROR_SXS_DUPLICATE_PROGID;
    public static WinError ERROR_SXS_DUPLICATE_ASSEMBLY_NAME;
    public static WinError ERROR_SXS_FILE_HASH_MISMATCH;
    public static WinError ERROR_SXS_POLICY_PARSE_ERROR;
    public static WinError ERROR_SXS_XML_E_MISSINGQUOTE;
    public static WinError ERROR_SXS_XML_E_COMMENTSYNTAX;
    public static WinError ERROR_SXS_XML_E_BADSTARTNAMECHAR;
    public static WinError ERROR_SXS_XML_E_BADNAMECHAR;
    public static WinError ERROR_SXS_XML_E_BADCHARINSTRING;
    public static WinError ERROR_SXS_XML_E_XMLDECLSYNTAX;
    public static WinError ERROR_SXS_XML_E_BADCHARDATA;
    public static WinError ERROR_SXS_XML_E_MISSINGWHITESPACE;
    public static WinError ERROR_SXS_XML_E_EXPECTINGTAGEND;
    public static WinError ERROR_SXS_XML_E_MISSINGSEMICOLON;
    public static WinError ERROR_SXS_XML_E_UNBALANCEDPAREN;
    public static WinError ERROR_SXS_XML_E_INTERNALERROR;
    public static WinError ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE;
    public static WinError ERROR_SXS_XML_E_INCOMPLETE_ENCODING;
    public static WinError ERROR_SXS_XML_E_MISSING_PAREN;
    public static WinError ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE;
    public static WinError ERROR_SXS_XML_E_MULTIPLE_COLONS;
    public static WinError ERROR_SXS_XML_E_INVALID_DECIMAL;
    public static WinError ERROR_SXS_XML_E_INVALID_HEXIDECIMAL;
    public static WinError ERROR_SXS_XML_E_INVALID_UNICODE;
    public static WinError ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK;
    public static WinError ERROR_SXS_XML_E_UNEXPECTEDENDTAG;
    public static WinError ERROR_SXS_XML_E_UNCLOSEDTAG;
    public static WinError ERROR_SXS_XML_E_DUPLICATEATTRIBUTE;
    public static WinError ERROR_SXS_XML_E_MULTIPLEROOTS;
    public static WinError ERROR_SXS_XML_E_INVALIDATROOTLEVEL;
    public static WinError ERROR_SXS_XML_E_BADXMLDECL;
    public static WinError ERROR_SXS_XML_E_MISSINGROOT;
    public static WinError ERROR_SXS_XML_E_UNEXPECTEDEOF;
    public static WinError ERROR_SXS_XML_E_BADPEREFINSUBSET;
    public static WinError ERROR_SXS_XML_E_UNCLOSEDSTARTTAG;
    public static WinError ERROR_SXS_XML_E_UNCLOSEDENDTAG;
    public static WinError ERROR_SXS_XML_E_UNCLOSEDSTRING;
    public static WinError ERROR_SXS_XML_E_UNCLOSEDCOMMENT;
    public static WinError ERROR_SXS_XML_E_UNCLOSEDDECL;
    public static WinError ERROR_SXS_XML_E_UNCLOSEDCDATA;
    public static WinError ERROR_SXS_XML_E_RESERVEDNAMESPACE;
    public static WinError ERROR_SXS_XML_E_INVALIDENCODING;
    public static WinError ERROR_SXS_XML_E_INVALIDSWITCH;
    public static WinError ERROR_SXS_XML_E_BADXMLCASE;
    public static WinError ERROR_SXS_XML_E_INVALID_STANDALONE;
    public static WinError ERROR_SXS_XML_E_UNEXPECTED_STANDALONE;
    public static WinError ERROR_SXS_XML_E_INVALID_VERSION;
    public static WinError ERROR_SXS_XML_E_MISSINGEQUALS;
    public static WinError ERROR_SXS_PROTECTION_RECOVERY_FAILED;
    public static WinError ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT;
    public static WinError ERROR_SXS_PROTECTION_CATALOG_NOT_VALID;
    public static WinError ERROR_SXS_UNTRANSLATABLE_HRESULT;
    public static WinError ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING;
    public static WinError ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE;
    public static WinError ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME;
    public static WinError ERROR_IPSEC_QM_POLICY_EXISTS;
    public static WinError ERROR_IPSEC_QM_POLICY_NOT_FOUND;
    public static WinError ERROR_IPSEC_QM_POLICY_IN_USE;
    public static WinError ERROR_IPSEC_MM_POLICY_EXISTS;
    public static WinError ERROR_IPSEC_MM_POLICY_NOT_FOUND;
    public static WinError ERROR_IPSEC_MM_POLICY_IN_USE;
    public static WinError ERROR_IPSEC_MM_FILTER_EXISTS;
    public static WinError ERROR_IPSEC_MM_FILTER_NOT_FOUND;
    public static WinError ERROR_IPSEC_TRANSPORT_FILTER_EXISTS;
    public static WinError ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND;
    public static WinError ERROR_IPSEC_MM_AUTH_EXISTS;
    public static WinError ERROR_IPSEC_MM_AUTH_NOT_FOUND;
    public static WinError ERROR_IPSEC_MM_AUTH_IN_USE;
    public static WinError ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND;
    public static WinError ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND;
    public static WinError ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND;
    public static WinError ERROR_IPSEC_TUNNEL_FILTER_EXISTS;
    public static WinError ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND;
    public static WinError ERROR_IPSEC_MM_FILTER_PENDING_DELETION;
    public static WinError ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION;
    public static WinError ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION;
    public static WinError ERROR_IPSEC_MM_POLICY_PENDING_DELETION;
    public static WinError ERROR_IPSEC_MM_AUTH_PENDING_DELETION;
    public static WinError ERROR_IPSEC_QM_POLICY_PENDING_DELETION;
    public static WinError WARNING_IPSEC_MM_POLICY_PRUNED;
    public static WinError WARNING_IPSEC_QM_POLICY_PRUNED;
    public static WinError ERROR_IPSEC_IKE_NEG_STATUS_BEGIN;
    public static WinError ERROR_IPSEC_IKE_AUTH_FAIL;
    public static WinError ERROR_IPSEC_IKE_ATTRIB_FAIL;
    public static WinError ERROR_IPSEC_IKE_NEGOTIATION_PENDING;
    public static WinError ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR;
    public static WinError ERROR_IPSEC_IKE_TIMED_OUT;
    public static WinError ERROR_IPSEC_IKE_NO_CERT;
    public static WinError ERROR_IPSEC_IKE_SA_DELETED;
    public static WinError ERROR_IPSEC_IKE_SA_REAPED;
    public static WinError ERROR_IPSEC_IKE_MM_ACQUIRE_DROP;
    public static WinError ERROR_IPSEC_IKE_QM_ACQUIRE_DROP;
    public static WinError ERROR_IPSEC_IKE_QUEUE_DROP_MM;
    public static WinError ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM;
    public static WinError ERROR_IPSEC_IKE_DROP_NO_RESPONSE;
    public static WinError ERROR_IPSEC_IKE_MM_DELAY_DROP;
    public static WinError ERROR_IPSEC_IKE_QM_DELAY_DROP;
    public static WinError ERROR_IPSEC_IKE_ERROR;
    public static WinError ERROR_IPSEC_IKE_CRL_FAILED;
    public static WinError ERROR_IPSEC_IKE_INVALID_KEY_USAGE;
    public static WinError ERROR_IPSEC_IKE_INVALID_CERT_TYPE;
    public static WinError ERROR_IPSEC_IKE_NO_PRIVATE_KEY;
    public static WinError ERROR_IPSEC_IKE_DH_FAIL;
    public static WinError ERROR_IPSEC_IKE_INVALID_HEADER;
    public static WinError ERROR_IPSEC_IKE_NO_POLICY;
    public static WinError ERROR_IPSEC_IKE_INVALID_SIGNATURE;
    public static WinError ERROR_IPSEC_IKE_KERBEROS_ERROR;
    public static WinError ERROR_IPSEC_IKE_NO_PUBLIC_KEY;
    public static WinError ERROR_IPSEC_IKE_PROCESS_ERR;
    public static WinError ERROR_IPSEC_IKE_PROCESS_ERR_SA;
    public static WinError ERROR_IPSEC_IKE_PROCESS_ERR_PROP;
    public static WinError ERROR_IPSEC_IKE_PROCESS_ERR_TRANS;
    public static WinError ERROR_IPSEC_IKE_PROCESS_ERR_KE;
    public static WinError ERROR_IPSEC_IKE_PROCESS_ERR_ID;
    public static WinError ERROR_IPSEC_IKE_PROCESS_ERR_CERT;
    public static WinError ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ;
    public static WinError ERROR_IPSEC_IKE_PROCESS_ERR_HASH;
    public static WinError ERROR_IPSEC_IKE_PROCESS_ERR_SIG;
    public static WinError ERROR_IPSEC_IKE_PROCESS_ERR_NONCE;
    public static WinError ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY;
    public static WinError ERROR_IPSEC_IKE_PROCESS_ERR_DELETE;
    public static WinError ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR;
    public static WinError ERROR_IPSEC_IKE_INVALID_PAYLOAD;
    public static WinError ERROR_IPSEC_IKE_LOAD_SOFT_SA;
    public static WinError ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN;
    public static WinError ERROR_IPSEC_IKE_INVALID_COOKIE;
    public static WinError ERROR_IPSEC_IKE_NO_PEER_CERT;
    public static WinError ERROR_IPSEC_IKE_PEER_CRL_FAILED;
    public static WinError ERROR_IPSEC_IKE_POLICY_CHANGE;
    public static WinError ERROR_IPSEC_IKE_NO_MM_POLICY;
    public static WinError ERROR_IPSEC_IKE_NOTCBPRIV;
    public static WinError ERROR_IPSEC_IKE_SECLOADFAIL;
    public static WinError ERROR_IPSEC_IKE_FAILSSPINIT;
    public static WinError ERROR_IPSEC_IKE_FAILQUERYSSP;
    public static WinError ERROR_IPSEC_IKE_SRVACQFAIL;
    public static WinError ERROR_IPSEC_IKE_SRVQUERYCRED;
    public static WinError ERROR_IPSEC_IKE_GETSPIFAIL;
    public static WinError ERROR_IPSEC_IKE_INVALID_FILTER;
    public static WinError ERROR_IPSEC_IKE_OUT_OF_MEMORY;
    public static WinError ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED;
    public static WinError ERROR_IPSEC_IKE_INVALID_POLICY;
    public static WinError ERROR_IPSEC_IKE_UNKNOWN_DOI;
    public static WinError ERROR_IPSEC_IKE_INVALID_SITUATION;
    public static WinError ERROR_IPSEC_IKE_DH_FAILURE;
    public static WinError ERROR_IPSEC_IKE_INVALID_GROUP;
    public static WinError ERROR_IPSEC_IKE_ENCRYPT;
    public static WinError ERROR_IPSEC_IKE_DECRYPT;
    public static WinError ERROR_IPSEC_IKE_POLICY_MATCH;
    public static WinError ERROR_IPSEC_IKE_UNSUPPORTED_ID;
    public static WinError ERROR_IPSEC_IKE_INVALID_HASH;
    public static WinError ERROR_IPSEC_IKE_INVALID_HASH_ALG;
    public static WinError ERROR_IPSEC_IKE_INVALID_HASH_SIZE;
    public static WinError ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG;
    public static WinError ERROR_IPSEC_IKE_INVALID_AUTH_ALG;
    public static WinError ERROR_IPSEC_IKE_INVALID_SIG;
    public static WinError ERROR_IPSEC_IKE_LOAD_FAILED;
    public static WinError ERROR_IPSEC_IKE_RPC_DELETE;
    public static WinError ERROR_IPSEC_IKE_BENIGN_REINIT;
    public static WinError ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY;
    public static WinError ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN;
    public static WinError ERROR_IPSEC_IKE_MM_LIMIT;
    public static WinError ERROR_IPSEC_IKE_NEGOTIATION_DISABLED;
    public static WinError ERROR_IPSEC_IKE_NEG_STATUS_END;
    public static WinError APPMODEL_ERROR_NO_PACKAGE;
    public static WinError APPMODEL_ERROR_PACKAGE_RUNTIME_CORRUPT;
    public static WinError APPMODEL_ERROR_PACKAGE_IDENTITY_CORRUPT;
    public static WinError APPMODEL_ERROR_NO_APPLICATION;
    public static WinError SEVERITY_SUCCESS;
    public static WinError SEVERITY_ERROR;
    public static WinError NOERROR;
}
public static class JetBrains.Interop.WinApi.WinInetDll : object {
    public static string DllName;
    public static int InternetGetCookieW(string lpszUrl, string lpszCookieName, Char* lpszCookieData, UInt32* lpdwSize);
    public static int InternetSetCookieW(string lpszUrl, string lpszCookieName, string lpszCookieData);
}
public class JetBrains.Interop.WinApi.WINTRUST_DATA : ValueType {
    public UInt32 cbStruct;
    public Void* pPolicyCallbackData;
    public Void* pSIPClientData;
    public UInt32 dwUIChoice;
    public UInt32 fdwRevocationChecks;
    public UInt32 dwUnionChoice;
    public WINTRUST_FILE_INFO* pFile;
    public UInt32 dwStateAction;
    public Void* hWVTStateData;
    public Char* pwszURLReference;
    public UInt32 dwProvFlags;
    public UInt32 dwUIContext;
    public WINTRUST_SIGNATURE_SETTINGS* pSignatureSettings;
}
public class JetBrains.Interop.WinApi.WINTRUST_FILE_INFO : ValueType {
    public UInt32 cbStruct;
    public Char* pcwszFilePath;
    public Void* hFile;
    public Guid* pgKnownSubject;
}
public class JetBrains.Interop.WinApi.WINTRUST_SIGNATURE_SETTINGS : ValueType {
    public UInt32* cbStruct;
    public UInt32* dwIndex;
    public UInt32* dwFlags;
    public UInt32* cSecondarySigs;
    public UInt32* dwVerifiedSigIndex;
    public Void* pCryptoPolicy;
}
public static class JetBrains.Interop.WinApi.WintrustDll : object {
    public static int WinVerifyTrust(Void* hWnd, Guid* pgActionID, Void* pWVTData);
}
public enum JetBrains.Interop.WinApi.WmActivateCodes : Enum {
    public UInt32 value__;
    public static WmActivateCodes Inactive;
    public static WmActivateCodes Active;
    public static WmActivateCodes ClickActive;
}
public enum JetBrains.Interop.WinApi.WmMouseActivateReturnCodes : Enum {
    public int value__;
    public static WmMouseActivateReturnCodes MA_ACTIVATE;
    public static WmMouseActivateReturnCodes MA_ACTIVATEANDEAT;
    public static WmMouseActivateReturnCodes MA_NOACTIVATE;
    public static WmMouseActivateReturnCodes MA_NOACTIVATEANDEAT;
}
[NoReorderAttribute]
public class JetBrains.Interop.WinApi.WNDCLASSEXW : ValueType {
    public UInt32 cbSize;
    public UInt32 style;
    public Void* lpfnWndProc;
    public int cbClsExtra;
    public int cbWndExtra;
    public Void* hInstance;
    public Void* hIcon;
    public Void* hCursor;
    public Void* hbrBackground;
    public UInt16* lpszMenuName;
    public UInt16* lpszClassName;
    public Void* hIconSm;
}
public static class JetBrains.Interop.WinApi.Wrappers.AuthenticodeHelpers : object {
    public static void StripEmbeddedSignatures(string sFilePath);
    public static void VerifyEmbeddedSignature(string sFilePath);
}
public class JetBrains.Interop.WinApi.Wrappers.ComStreamStream : Stream {
    private FileAccess myOverrideFileAccess;
    private IStream myStream;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public ComStreamStream(IStream stream, FileAccess overrideFileAccess);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
}
public static class JetBrains.Interop.WinApi.Wrappers.Elevations : object {
    private static bool ourIsWindowsVistaAndHigher;
    private static Elevations();
    public static TOKEN_ELEVATION_TYPE GetElevationType(Process process);
    public static ELEVATION_FLAGS GetElevationFlags();
    public static bool IsUacEnabled();
    public static bool IsVirtualizationEnabled();
    public static bool IsInstallerDetectionEnabled();
}
public class JetBrains.Interop.WinApi.Wrappers.JetSystemInformation : object {
    public static bool IsActiveWindowTracking { get; }
    public static bool get_IsActiveWindowTracking();
}
public class JetBrains.Interop.WinApi.Wrappers.LockBytesOnHGlobal : object {
    private static ulong SizeIncrementLimit;
    private ILockBytes myLockBytes;
    public ILockBytes Row { get; }
    public LockBytesOnHGlobal(Void* hGlobal, bool fDeleteOnRelease);
    public ILockBytes get_Row();
    public sealed virtual int ReadAt(ulong ulOffset, Void* pv, UInt32 cb, UInt32* pcbRead);
    public sealed virtual int WriteAt(ulong ulOffset, Void* pv, UInt32 cb, UInt32* pcbWritten);
    public sealed virtual int Flush();
    public sealed virtual int SetSize(ulong cb);
    public sealed virtual int LockRegion(ulong libOffset, ulong cb, UInt32 dwLockType);
    public sealed virtual int UnlockRegion(ulong libOffset, ulong cb, UInt32 dwLockType);
    public sealed virtual int Stat(STATSTG* pstatstg, UInt32 grfStatFlag);
}
public class JetBrains.Interop.WinApi.Wrappers.LockBytesWithGrowthStrategy : object {
    private ILockBytes myLockBytes;
    [NotNullAttribute]
public ILockBytes Raw { get; }
    public LockBytesWithGrowthStrategy(ILockBytes lockbytes);
    public ILockBytes get_Raw();
    private static ulong ApplySizeStrategy(ulong cb);
    public sealed virtual int ReadAt(ulong ulOffset, Void* pv, UInt32 cb, UInt32* pcbRead);
    public sealed virtual int WriteAt(ulong ulOffset, Void* pv, UInt32 cb, UInt32* pcbWritten);
    public sealed virtual int Flush();
    public sealed virtual int SetSize(ulong cb);
    public sealed virtual int LockRegion(ulong libOffset, ulong cb, UInt32 dwLockType);
    public sealed virtual int UnlockRegion(ulong libOffset, ulong cb, UInt32 dwLockType);
    public sealed virtual int Stat(STATSTG* pstatstg, UInt32 grfStatFlag);
}
public static class JetBrains.Interop.WinApi.Wrappers.LUIDs : object {
    public static long ConvertToLong(LUID data);
    public static LUID GetAuthenticationId(Process process);
}
public static class JetBrains.Interop.WinApi.Wrappers.NativeThunksForDelegates : object {
    [NotNullAttribute]
private static ConcurrentDictionary`2<object, string> myPinnedThunkedDelegates;
    private static NativeThunksForDelegates();
    public static Undo Pin(object instance, string name);
}
public static class JetBrains.Interop.WinApi.Wrappers.RunningObjectTable : object {
    [NotNullAttribute]
public static ICollection`1<BoundObject`1<TObject>> GetRunningObjects();
    [NotNullAttribute]
public static ICollection`1<BoundObject`1<TObject>> GetRunningObjects(Func`2<string, bool> filter);
    [NotNullAttribute]
public static ICollection`1<BoundObject`1<TObject>> GetRunningObjects(Func`4<IBindCtx, IMoniker, string, bool> filter);
    [NotNullAttribute]
public static IDisposable RegisterObject(object o, string name);
    [NotNullAttribute]
private static IMoniker CreateItemMoniker(string name);
    [NotNullAttribute]
public static TObject GetRunningObject(string name);
    [CanBeNullAttribute]
public static TObject TryGetRunningObject(string name);
}
public class JetBrains.Interop.WinApi.Wrappers.SafeFindHandle : SafeHandleZeroOrMinusOneIsInvalid {
    protected virtual bool ReleaseHandle();
}
public class JetBrains.Interop.WinApi.Wrappers.ShellExecuteExHelper : object {
    private SHELLEXECUTEINFO* myExecuteInfo;
    private WinError myErrorCode;
    public WinError ErrorCode { get; }
    public ShellExecuteExHelper(SHELLEXECUTEINFO* executeInfo);
    public WinError get_ErrorCode();
    private void Execute();
    public bool RunOnStaThread();
}
[ComVisibleAttribute("True")]
public class JetBrains.Interop.WinApi.Wrappers.StreamLockBytes : object {
    private Byte[] myBuffer;
    private Stream myStream;
    public StreamLockBytes(Stream stream);
    private sealed virtual override int JetBrains.Interop.WinApi.Declarations.Interfaces.ILockBytes.Flush();
    private sealed virtual override int JetBrains.Interop.WinApi.Declarations.Interfaces.ILockBytes.LockRegion(ulong libOffset, ulong cb, UInt32 dwLockType);
    private sealed virtual override int JetBrains.Interop.WinApi.Declarations.Interfaces.ILockBytes.ReadAt(ulong ulOffset, Void* pv, UInt32 cb, UInt32* pcbRead);
    private sealed virtual override int JetBrains.Interop.WinApi.Declarations.Interfaces.ILockBytes.SetSize(ulong cb);
    private sealed virtual override int JetBrains.Interop.WinApi.Declarations.Interfaces.ILockBytes.Stat(STATSTG* pstatstg, UInt32 grfStatFlag);
    private sealed virtual override int JetBrains.Interop.WinApi.Declarations.Interfaces.ILockBytes.UnlockRegion(ulong libOffset, ulong cb, UInt32 dwLockType);
    private sealed virtual override int JetBrains.Interop.WinApi.Declarations.Interfaces.ILockBytes.WriteAt(ulong ulOffset, Void* pv, UInt32 cb, UInt32* pcbWritten);
}
[IsReadOnlyAttribute]
public class JetBrains.Interop.WinApi.Wrappers.Win32Handle : ValueType {
    private IntPtr myHandle;
    public IntPtr Handle { get; }
    public bool IsNull { get; }
    public bool IsNotNull { get; }
    public Win32Handle(Void* handle);
    public Win32Handle(IntPtr handle);
    public IntPtr get_Handle();
    public bool get_IsNull();
    public bool get_IsNotNull();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool Equals(Win32Handle other);
    public static bool op_Equality(Win32Handle left, Win32Handle right);
    public static bool op_Inequality(Win32Handle left, Win32Handle right);
}
public enum JetBrains.Interop.Windows.Declarations.Constants.ControlNotificationCodes : Enum {
    public ushort value__;
    public static ControlNotificationCodes EN_SETFOCUS;
    public static ControlNotificationCodes EN_KILLFOCUS;
    public static ControlNotificationCodes EN_CHANGE;
    public static ControlNotificationCodes EN_UPDATE;
    public static ControlNotificationCodes EN_ERRSPACE;
    public static ControlNotificationCodes EN_MAXTEXT;
    public static ControlNotificationCodes EN_HSCROLL;
    public static ControlNotificationCodes EN_VSCROLL;
    public static ControlNotificationCodes EN_ALIGN_LTR_EC;
    public static ControlNotificationCodes EN_ALIGN_RTL_EC;
    public static ControlNotificationCodes EN_BEFORE_PASTE;
    public static ControlNotificationCodes EN_AFTER_PASTE;
    public static ControlNotificationCodes BN_CLICKED;
    public static ControlNotificationCodes BN_PAINT;
    public static ControlNotificationCodes BN_HILITE;
    public static ControlNotificationCodes BN_UNHILITE;
    public static ControlNotificationCodes BN_DISABLE;
    public static ControlNotificationCodes BN_DOUBLECLICKED;
    public static ControlNotificationCodes BN_PUSHED;
    public static ControlNotificationCodes BN_UNPUSHED;
    public static ControlNotificationCodes BN_DBLCLK;
    public static ControlNotificationCodes BN_SETFOCUS;
    public static ControlNotificationCodes BN_KILLFOCUS;
}
public enum JetBrains.Interop.Windows.Declarations.Constants.DebugExceptionCode : Enum {
    public UInt32 value__;
    public static DebugExceptionCode EXCEPTION_ACCESS_VIOLATION;
    public static DebugExceptionCode EXCEPTION_ARRAY_BOUNDS_EXCEEDED;
    public static DebugExceptionCode EXCEPTION_BREAKPOINT;
    public static DebugExceptionCode EXCEPTION_DATATYPE_MISALIGNMENT;
    public static DebugExceptionCode EXCEPTION_FLT_DENORMAL_OPERAND;
    public static DebugExceptionCode EXCEPTION_FLT_DIVIDE_BY_ZERO;
    public static DebugExceptionCode EXCEPTION_FLT_INEXACT_RESULT;
    public static DebugExceptionCode EXCEPTION_FLT_INVALID_OPERATION;
    public static DebugExceptionCode EXCEPTION_FLT_OVERFLOW;
    public static DebugExceptionCode EXCEPTION_FLT_STACK_CHECK;
    public static DebugExceptionCode EXCEPTION_FLT_UNDERFLOW;
    public static DebugExceptionCode EXCEPTION_ILLEGAL_INSTRUCTION;
    public static DebugExceptionCode EXCEPTION_IN_PAGE_ERROR;
    public static DebugExceptionCode EXCEPTION_INT_DIVIDE_BY_ZERO;
    public static DebugExceptionCode EXCEPTION_INT_OVERFLOW;
    public static DebugExceptionCode EXCEPTION_INVALID_DISPOSITION;
    public static DebugExceptionCode EXCEPTION_NONCONTINUABLE_EXCEPTION;
    public static DebugExceptionCode EXCEPTION_PRIV_INSTRUCTION;
    public static DebugExceptionCode EXCEPTION_SINGLE_STEP;
    public static DebugExceptionCode EXCEPTION_STACK_OVERFLOW;
}
[FlagsAttribute]
public enum JetBrains.Interop.Windows.Declarations.Constants.MACHINE_ATTRIBUTES : Enum {
    public int value__;
    public static MACHINE_ATTRIBUTES UserEnabled;
    public static MACHINE_ATTRIBUTES KernelEnabled;
    public static MACHINE_ATTRIBUTES Wow64Container;
}
[FlagsAttribute]
public enum JetBrains.Interop.Windows.Declarations.Constants.MandatoryPolicy : Enum {
    public UInt32 value__;
    public static MandatoryPolicy SYSTEM_MANDATORY_LABEL_NO_WRITE_UP;
    public static MandatoryPolicy SYSTEM_MANDATORY_LABEL_NO_READ_UP;
    public static MandatoryPolicy SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP;
}
public enum JetBrains.Interop.Windows.Declarations.Constants.OBJECT_INFORMATION_CLASS : Enum {
    public UInt32 value__;
    public static OBJECT_INFORMATION_CLASS ObjectBasicInformation;
    public static OBJECT_INFORMATION_CLASS ObjectNameInformation;
    public static OBJECT_INFORMATION_CLASS ObjectTypeInformation;
    public static OBJECT_INFORMATION_CLASS ObjectAllTypesInformation;
    public static OBJECT_INFORMATION_CLASS ObjectHandleInformation;
}
public enum JetBrains.Interop.Windows.Declarations.Constants.PROCESS_INFORMATION_CLASS : Enum {
    public int value__;
    public static PROCESS_INFORMATION_CLASS ProcessMemoryPriority;
    public static PROCESS_INFORMATION_CLASS ProcessMemoryExhaustionInfo;
    public static PROCESS_INFORMATION_CLASS ProcessAppMemoryInfo;
    public static PROCESS_INFORMATION_CLASS ProcessInPrivateInfo;
    public static PROCESS_INFORMATION_CLASS ProcessPowerThrottling;
    public static PROCESS_INFORMATION_CLASS ProcessReservedValue1;
    public static PROCESS_INFORMATION_CLASS ProcessTelemetryCoverageInfo;
    public static PROCESS_INFORMATION_CLASS ProcessProtectionLevelInfo;
    public static PROCESS_INFORMATION_CLASS ProcessLeapSecondInfo;
    public static PROCESS_INFORMATION_CLASS ProcessMachineTypeInfo;
    public static PROCESS_INFORMATION_CLASS ProcessInformationClassMax;
}
public static class JetBrains.Interop.Windows.Declarations.Constants.ProcessExitCode : object {
    public static UInt32 STILL_ACTIVE;
}
public static class JetBrains.Interop.Windows.Declarations.Constants.ProcThreadAttribute : object {
    public static int PROC_THREAD_ATTRIBUTE_NUMBER;
    public static int PROC_THREAD_ATTRIBUTE_THREAD;
    public static int PROC_THREAD_ATTRIBUTE_INPUT;
    public static int PROC_THREAD_ATTRIBUTE_ADDITIVE;
    public static int PROC_THREAD_ATTRIBUTE_PARENT_PROCESS;
    public static int PROC_THREAD_ATTRIBUTE_HANDLE_LIST;
    public static int PROC_THREAD_ATTRIBUTE_GROUP_AFFINITY;
    public static int PROC_THREAD_ATTRIBUTE_PREFERRED_NODE;
    public static int PROC_THREAD_ATTRIBUTE_IDEAL_PROCESSOR;
    public static int PROC_THREAD_ATTRIBUTE_UMS_THREAD;
    public static int PROC_THREAD_ATTRIBUTE_MITIGATION_POLICY;
    public static int PROC_THREAD_ATTRIBUTE_SECURITY_CAPABILITIES;
    public static int PROC_THREAD_ATTRIBUTE_PROTECTION_LEVEL;
    public static int PROC_THREAD_ATTRIBUTE_JOB_LIST;
    public static int PROC_THREAD_ATTRIBUTE_CHILD_PROCESS_POLICY;
    public static int PROC_THREAD_ATTRIBUTE_ALL_APPLICATION_PACKAGES_POLICY;
    public static int PROC_THREAD_ATTRIBUTE_WIN32K_FILTER;
    public static int PROC_THREAD_ATTRIBUTE_DESKTOP_APP_POLICY;
    public static int PROC_THREAD_ATTRIBUTE_PSEUDOCONSOLE;
    public static int PROC_THREAD_ATTRIBUTE_MITIGATION_AUDIT_POLICY;
    public static int PROC_THREAD_ATTRIBUTE_MACHINE_TYPE;
    public static int PROC_THREAD_ATTRIBUTE_COMPONENT_FILTER;
    public static int PROC_THREAD_ATTRIBUTE_ENABLE_OPTIONAL_XSTATE_FEATURES;
    public static int PROC_THREAD_ATTRIBUTE_TRUSTED_APP;
    private static ProcThreadAttribute();
    public static int ProcThreadAttributeValue(int number, bool thread, bool input, bool additive);
}
public enum JetBrains.Interop.Windows.Declarations.Constants.RTL_OSVERSIONINFOEXW_PRODUCT_TYPE : Enum {
    public int value__;
    public static RTL_OSVERSIONINFOEXW_PRODUCT_TYPE VER_NT_WORKSTATION;
    public static RTL_OSVERSIONINFOEXW_PRODUCT_TYPE VER_NT_DOMAIN_CONTROLLER;
    public static RTL_OSVERSIONINFOEXW_PRODUCT_TYPE VER_NT_SERVER;
}
public enum JetBrains.Interop.Windows.Declarations.Constants.RTL_OSVERSIONINFOEXW_SUITE_MASK : Enum {
    public UInt32 value__;
    public static RTL_OSVERSIONINFOEXW_SUITE_MASK VER_SUITE_SMALLBUSINESS;
    public static RTL_OSVERSIONINFOEXW_SUITE_MASK VER_SUITE_ENTERPRISE;
    public static RTL_OSVERSIONINFOEXW_SUITE_MASK VER_SUITE_BACKOFFICE;
    public static RTL_OSVERSIONINFOEXW_SUITE_MASK VER_SUITE_COMMUNICATIONS;
    public static RTL_OSVERSIONINFOEXW_SUITE_MASK VER_SUITE_TERMINAL;
    public static RTL_OSVERSIONINFOEXW_SUITE_MASK VER_SUITE_SMALLBUSINESS_RESTRICTED;
    public static RTL_OSVERSIONINFOEXW_SUITE_MASK VER_SUITE_EMBEDDEDNT;
    public static RTL_OSVERSIONINFOEXW_SUITE_MASK VER_SUITE_DATACENTER;
    public static RTL_OSVERSIONINFOEXW_SUITE_MASK VER_SUITE_SINGLEUSERTS;
    public static RTL_OSVERSIONINFOEXW_SUITE_MASK VER_SUITE_PERSONAL;
    public static RTL_OSVERSIONINFOEXW_SUITE_MASK VER_SUITE_BLADE;
    public static RTL_OSVERSIONINFOEXW_SUITE_MASK VER_SUITE_EMBEDDED_RESTRICTED;
    public static RTL_OSVERSIONINFOEXW_SUITE_MASK VER_SUITE_SECURITY_APPLIANCE;
    public static RTL_OSVERSIONINFOEXW_SUITE_MASK VER_SUITE_STORAGE_SERVER;
    public static RTL_OSVERSIONINFOEXW_SUITE_MASK VER_SUITE_COMPUTE_SERVER;
    public static RTL_OSVERSIONINFOEXW_SUITE_MASK VER_SUITE_WH_SERVER;
    public static RTL_OSVERSIONINFOEXW_SUITE_MASK VER_SUITE_MULTIUSERTS;
}
public static class JetBrains.Interop.Windows.Declarations.Constants.SecuritySubAuthority : object {
    public static int SECURITY_NULL_RID;
    public static int SECURITY_WORLD_RID;
    public static int SECURITY_LOCAL_RID;
    public static int SECURITY_LOCAL_LOGON_RID;
    public static int SECURITY_CREATOR_OWNER_RID;
    public static int SECURITY_CREATOR_GROUP_RID;
    public static int SECURITY_DIALUP_RID;
    public static int SECURITY_NETWORK_RID;
    public static int SECURITY_BATCH_RID;
    public static int SECURITY_INTERACTIVE_RID;
    public static int SECURITY_LOGON_IDS_RID;
    public static int SECURITY_SERVICE_RID;
    public static int SECURITY_ANONYMOUS_LOGON_RID;
    public static int SECURITY_PROXY_RID;
    public static int SECURITY_ENTERPRISE_CONTROLLERS_RID;
    public static int SECURITY_PRINCIPAL_SELF_RID;
    public static int SECURITY_AUTHENTICATED_USER_RID;
    public static int SECURITY_RESTRICTED_CODE_RID;
    public static int SECURITY_TERMINAL_SERVER_RID;
    public static int SECURITY_REMOTE_LOGON_RID;
    public static int SECURITY_THIS_ORGANIZATION_RID;
    public static int SECURITY_IUSER_RID;
    public static int SECURITY_LOCAL_SYSTEM_RID;
    public static int SECURITY_LOCAL_SERVICE_RID;
    public static int SECURITY_NETWORK_SERVICE_RID;
    public static int SECURITY_BUILTIN_DOMAIN_RID;
    public static int DOMAIN_ALIAS_RID_ADMINS;
    public static int DOMAIN_ALIAS_RID_USERS;
    public static int DOMAIN_ALIAS_RID_GUESTS;
    public static int DOMAIN_ALIAS_RID_POWER_USERS;
    public static int SECURITY_APP_PACKAGE_BASE_RID;
    public static int SECURITY_CAPABILITY_BASE_RID;
    public static int SECURITY_CAPABILITY_APP_RID;
    public static int SECURITY_BUILTIN_PACKAGE_ANY_PACKAGE;
    public static int SECURITY_BUILTIN_PACKAGE_ANY_RESTRICTED_PACKAGE;
    public static int SECURITY_MANDATORY_UNTRUSTED_RID;
    public static int SECURITY_MANDATORY_LOW_RID;
    public static int SECURITY_MANDATORY_MEDIUM_RID;
    public static int SECURITY_MANDATORY_MEDIUM_PLUS_RID;
    public static int SECURITY_MANDATORY_HIGH_RID;
    public static int SECURITY_MANDATORY_SYSTEM_RID;
    public static int SECURITY_MANDATORY_PROTECTED_PROCESS_RID;
}
[FlagsAttribute]
public enum JetBrains.Interop.Windows.Declarations.Constants.SHChangeNotifyEvents : Enum {
    public int value__;
    public static SHChangeNotifyEvents SHCNE_ALLEVENTS;
    public static SHChangeNotifyEvents SHCNE_ASSOCCHANGED;
    public static SHChangeNotifyEvents SHCNE_ATTRIBUTES;
    public static SHChangeNotifyEvents SHCNE_CREATE;
    public static SHChangeNotifyEvents SHCNE_DELETE;
    public static SHChangeNotifyEvents SHCNE_DRIVEADD;
    public static SHChangeNotifyEvents SHCNE_DRIVEADDGUI;
    public static SHChangeNotifyEvents SHCNE_DRIVEREMOVED;
    public static SHChangeNotifyEvents SHCNE_EXTENDED_EVENT;
    public static SHChangeNotifyEvents SHCNE_FREESPACE;
    public static SHChangeNotifyEvents SHCNE_MEDIAINSERTED;
    public static SHChangeNotifyEvents SHCNE_MEDIAREMOVED;
    public static SHChangeNotifyEvents SHCNE_MKDIR;
    public static SHChangeNotifyEvents SHCNE_NETSHARE;
    public static SHChangeNotifyEvents SHCNE_NETUNSHARE;
    public static SHChangeNotifyEvents SHCNE_RENAMEFOLDER;
    public static SHChangeNotifyEvents SHCNE_RENAMEITEM;
    public static SHChangeNotifyEvents SHCNE_RMDIR;
    public static SHChangeNotifyEvents SHCNE_SERVERDISCONNECT;
    public static SHChangeNotifyEvents SHCNE_UPDATEDIR;
    public static SHChangeNotifyEvents SHCNE_UPDATEIMAGE;
}
[FlagsAttribute]
public enum JetBrains.Interop.Windows.Declarations.Constants.SHChangeNotifyFlags : Enum {
    public int value__;
    public static SHChangeNotifyFlags SHCNF_TYPE;
    public static SHChangeNotifyFlags SHCNF_IDLIST;
    public static SHChangeNotifyFlags SHCNF_PATHA;
    public static SHChangeNotifyFlags SHCNF_PRINTERA;
    public static SHChangeNotifyFlags SHCNF_DWORD;
    public static SHChangeNotifyFlags SHCNF_PATHW;
    public static SHChangeNotifyFlags SHCNF_PRINTERW;
    public static SHChangeNotifyFlags SHCNF_FLUSH;
    public static SHChangeNotifyFlags SHCNF_FLUSHNOWAIT;
}
public enum JetBrains.Interop.Windows.Declarations.Constants.SYSTEM_INFORMATION_CLASS : Enum {
    public UInt32 value__;
    public static SYSTEM_INFORMATION_CLASS SystemBasicInformation;
    public static SYSTEM_INFORMATION_CLASS SystemHandleInformation;
    public static SYSTEM_INFORMATION_CLASS SystemExtendedHandleInformation;
    public static SYSTEM_INFORMATION_CLASS SystemProcessIdInformation;
}
[ObsoleteAttribute("The origin is uncertain, use with care. winternl.h has only 9 entries, and their names only approximately match these.")]
public enum JetBrains.Interop.Windows.Declarations.Constants.SYSTEM_INFORMATION_CLASS_ : Enum {
    public int value__;
    public static SYSTEM_INFORMATION_CLASS_ SystemBasicInformation;
    public static SYSTEM_INFORMATION_CLASS_ SystemProcessorInformation;
    public static SYSTEM_INFORMATION_CLASS_ SystemPerformanceInformation;
    public static SYSTEM_INFORMATION_CLASS_ SystemTimeOfDayInformation;
    public static SYSTEM_INFORMATION_CLASS_ SystemNotImplemented1;
    public static SYSTEM_INFORMATION_CLASS_ SystemProcessesAndThreadsInformation;
    public static SYSTEM_INFORMATION_CLASS_ SystemCallCounts;
    public static SYSTEM_INFORMATION_CLASS_ SystemConfigurationInformation;
    public static SYSTEM_INFORMATION_CLASS_ SystemProcessorTimes;
    public static SYSTEM_INFORMATION_CLASS_ SystemGlobalFlag;
    public static SYSTEM_INFORMATION_CLASS_ SystemNotImplemented2;
    public static SYSTEM_INFORMATION_CLASS_ SystemModuleInformation;
    public static SYSTEM_INFORMATION_CLASS_ SystemLockInformation;
    public static SYSTEM_INFORMATION_CLASS_ SystemNotImplemented3;
    public static SYSTEM_INFORMATION_CLASS_ SystemNotImplemented4;
    public static SYSTEM_INFORMATION_CLASS_ SystemNotImplemented5;
    public static SYSTEM_INFORMATION_CLASS_ SystemHandleInformation;
    public static SYSTEM_INFORMATION_CLASS_ SystemObjectInformation;
    public static SYSTEM_INFORMATION_CLASS_ SystemPagefileInformation;
    public static SYSTEM_INFORMATION_CLASS_ SystemInstructionEmulationCounts;
    public static SYSTEM_INFORMATION_CLASS_ SystemInvalidInfoClass1;
    public static SYSTEM_INFORMATION_CLASS_ SystemCacheInformation;
    public static SYSTEM_INFORMATION_CLASS_ SystemPoolTagInformation;
    public static SYSTEM_INFORMATION_CLASS_ SystemProcessorStatistics;
    public static SYSTEM_INFORMATION_CLASS_ SystemDpcInformation;
    public static SYSTEM_INFORMATION_CLASS_ SystemNotImplemented6;
    public static SYSTEM_INFORMATION_CLASS_ SystemLoadImage;
    public static SYSTEM_INFORMATION_CLASS_ SystemUnloadImage;
    public static SYSTEM_INFORMATION_CLASS_ SystemTimeAdjustment;
    public static SYSTEM_INFORMATION_CLASS_ SystemNotImplemented7;
    public static SYSTEM_INFORMATION_CLASS_ SystemNotImplemented8;
    public static SYSTEM_INFORMATION_CLASS_ SystemNotImplemented9;
    public static SYSTEM_INFORMATION_CLASS_ SystemCrashDumpInformation;
    public static SYSTEM_INFORMATION_CLASS_ SystemExceptionInformation;
    public static SYSTEM_INFORMATION_CLASS_ SystemCrashDumpStateInformation;
    public static SYSTEM_INFORMATION_CLASS_ SystemKernelDebuggerInformation;
    public static SYSTEM_INFORMATION_CLASS_ SystemContextSwitchInformation;
    public static SYSTEM_INFORMATION_CLASS_ SystemRegistryQuotaInformation;
    public static SYSTEM_INFORMATION_CLASS_ SystemLoadAndCallImage;
    public static SYSTEM_INFORMATION_CLASS_ SystemPrioritySeparation;
    public static SYSTEM_INFORMATION_CLASS_ SystemNotImplemented10;
    public static SYSTEM_INFORMATION_CLASS_ SystemNotImplemented11;
    public static SYSTEM_INFORMATION_CLASS_ SystemInvalidInfoClass2;
    public static SYSTEM_INFORMATION_CLASS_ SystemInvalidInfoClass3;
    public static SYSTEM_INFORMATION_CLASS_ SystemTimeZoneInformation;
    public static SYSTEM_INFORMATION_CLASS_ SystemLookasideInformation;
    public static SYSTEM_INFORMATION_CLASS_ SystemSetTimeSlipEvent;
    public static SYSTEM_INFORMATION_CLASS_ SystemCreateSession;
    public static SYSTEM_INFORMATION_CLASS_ SystemDeleteSession;
    public static SYSTEM_INFORMATION_CLASS_ SystemInvalidInfoClass4;
    public static SYSTEM_INFORMATION_CLASS_ SystemRangeStartInformation;
    public static SYSTEM_INFORMATION_CLASS_ SystemVerifierInformation;
    public static SYSTEM_INFORMATION_CLASS_ SystemAddVerifier;
    public static SYSTEM_INFORMATION_CLASS_ SystemSessionProcessesInformation;
}
public class JetBrains.Interop.Windows.Declarations.Structures.ACCESS_ALLOWED_ACE : ValueType {
    public ACE_HEADER Header;
    public AccessRights Mask;
    public UInt32 SidStart;
}
public class JetBrains.Interop.Windows.Declarations.Structures.ACE_HEADER : ValueType {
    public byte AceType;
    public byte AceFlags;
    public ushort AceSize;
}
public class JetBrains.Interop.Windows.Declarations.Structures.ACL : ValueType {
    public byte AclRevision;
    public byte Sbz1;
    public ushort AclSize;
    public ushort AceCount;
    public ushort Sbz2;
    public static int ACL_REVISION;
    public static int ACL_REVISION_DS;
}
public enum JetBrains.Interop.Windows.Declarations.Structures.CRED_PERSIST : Enum {
    public UInt32 value__;
    public static CRED_PERSIST SESSION;
    public static CRED_PERSIST LOCAL_MACHINE;
    public static CRED_PERSIST ENTERPRISE;
}
public enum JetBrains.Interop.Windows.Declarations.Structures.CRED_TYPE : Enum {
    public UInt32 value__;
    public static CRED_TYPE GENERIC;
    public static CRED_TYPE DOMAIN_PASSWORD;
    public static CRED_TYPE DOMAIN_CERTIFICATE;
    [ObsoleteAttribute("This value is no longer supported", "True")]
public static CRED_TYPE DOMAIN_VISIBLE_PASSWORD;
    public static CRED_TYPE GENERIC_CERTIFICATE;
    public static CRED_TYPE DOMAIN_EXTENDED;
    public static CRED_TYPE MAXIMUM;
    public static CRED_TYPE MAXIMUM_EX;
}
public class JetBrains.Interop.Windows.Declarations.Structures.CREDENTIAL : ValueType {
    internal static int ATTRIBUTE_MAX_LENGTH;
    internal static int PASSWORD_MAX_LENGTH;
    internal static int STRING_MAX_LENGTH;
    internal static int USERNAME_MAX_LENGTH;
    public CREDENTIAL_FLAGS Flags;
    public CRED_TYPE Type;
    public string TargetName;
    public string Comment;
    public FILETIME LastWritten;
    public int CredentialBlobSize;
    public IntPtr CredentialBlob;
    public CRED_PERSIST Persist;
    public UInt32 AttributeCount;
    public IntPtr Attributes;
    public string TargetAlias;
    public string UserName;
}
[FlagsAttribute]
public enum JetBrains.Interop.Windows.Declarations.Structures.CREDENTIAL_FLAGS : Enum {
    public UInt32 value__;
    public static CREDENTIAL_FLAGS PromptNow;
    public static CREDENTIAL_FLAGS UsernameTarget;
}
[NoReorderAttribute]
[PublicAPIAttribute]
public class JetBrains.Interop.Windows.Declarations.Structures.ICONDIR : ValueType {
    public ushort idReserved;
    public ushort idType;
    public ushort idCount;
}
[NoReorderAttribute]
[PublicAPIAttribute]
public class JetBrains.Interop.Windows.Declarations.Structures.ICONDIRENTRY : ValueType {
    public byte bWidth;
    public byte bHeight;
    public byte bColorCount;
    public byte bReserved;
    public ushort wPlanes;
    public ushort wBitCount;
    public UInt32 dwBytesInRes;
    public UInt32 dwImageOffset;
}
[NoReorderAttribute]
[PublicAPIAttribute]
public class JetBrains.Interop.Windows.Declarations.Structures.ICONRESDIR : ValueType {
    public byte Width;
    public byte Height;
    public byte ColorCount;
    public byte reserved;
    public ushort Planes;
    public ushort BitCount;
    public UInt32 BytesInRes;
    public ushort IconId;
    public static ICONRESDIR FromICONDIRENTRY(ICONDIRENTRY ide, ushort IconId);
}
public enum JetBrains.Interop.Windows.Declarations.Structures.MEMORY_INFORMATION_CLASS : Enum {
    public int value__;
    public static MEMORY_INFORMATION_CLASS MemoryBasicInformation;
}
[NoReorderAttribute]
public class JetBrains.Interop.Windows.Declarations.Structures.NONCLIENTMETRICS : ValueType {
    public UInt32 cbSize;
    public int iBorderWidth;
    public int iScrollWidth;
    public int iScrollHeight;
    public int iCaptionWidth;
    public int iCaptionHeight;
    public LOGFONT lfCaptionFont;
    public int iSmCaptionWidth;
    public int iSmCaptionHeight;
    public LOGFONT lfSmCaptionFont;
    public int iMenuWidth;
    public int iMenuHeight;
    public LOGFONT lfMenuFont;
    public LOGFONT lfStatusFont;
    public LOGFONT lfMessageFont;
    public int iPaddedBorderWidth;
}
public class JetBrains.Interop.Windows.Declarations.Structures.PROCESS_BASIC_INFORMATION : ValueType {
    public IntPtr Reserved1;
    public IntPtr PebBaseAddress;
    public IntPtr[] Reserved2;
    public IntPtr UniqueProcessId;
    public IntPtr Reserved3;
}
public class JetBrains.Interop.Windows.Declarations.Structures.PROCESS_BASIC_INFORMATION_WOW64 : ValueType {
    public long Reserved1;
    public long PebBaseAddress;
    public Int64[] Reserved2;
    public long UniqueProcessId;
    public long Reserved3;
}
public class JetBrains.Interop.Windows.Declarations.Structures.PROCESS_MACHINE_INFORMATION : ValueType {
    public MachineId ProcessMachine;
    public ushort Res0;
    public MACHINE_ATTRIBUTES MachineAttributes;
}
[NoReorderAttribute]
public class JetBrains.Interop.Windows.Declarations.Structures.PROCESS_MEMORY_COUNTERS_EX : ValueType {
    public UInt32 cb;
    public UInt32 PageFaultCount;
    public UIntPtr PeakWorkingSetSize;
    public UIntPtr WorkingSetSize;
    public UIntPtr QuotaPeakPagedPoolUsage;
    public UIntPtr QuotaPagedPoolUsage;
    public UIntPtr QuotaPeakNonPagedPoolUsage;
    public UIntPtr QuotaNonPagedPoolUsage;
    public UIntPtr PagefileUsage;
    public UIntPtr PeakPagefileUsage;
    public UIntPtr PrivateUsage;
}
[NoReorderAttribute]
public class JetBrains.Interop.Windows.Declarations.Structures.RTL_OSVERSIONINFOEXW : ValueType {
    public UInt32 dwOSVersionInfoSize;
    public UInt32 dwMajorVersion;
    public UInt32 dwMinorVersion;
    public UInt32 dwBuildNumber;
    public UInt32 dwPlatformId;
    [FixedBufferAttribute("System.UInt16", "128")]
public <szCSDVersion>e__FixedBuffer szCSDVersion;
    public ushort wServicePackMajor;
    public ushort wServicePackMinor;
    public ushort wSuiteMask;
    public ushort wProductType;
    public ushort wReserved;
}
public class JetBrains.Interop.Windows.Declarations.Structures.SECURITY_DESCRIPTOR : ValueType {
    public byte Revision;
    public byte Sbz1;
    public ushort Control;
    public Void* Owner;
    public Void* Group;
    public ACL* Sacl;
    public ACL* Dacl;
    public static int SECURITY_DESCRIPTOR_REVISION;
    public static int SECURITY_DESCRIPTOR_MIN_LENGTH { get; }
    public static int get_SECURITY_DESCRIPTOR_MIN_LENGTH();
}
public class JetBrains.Interop.Windows.Declarations.Structures.SID_IDENTIFIER_AUTHORITY : ValueType {
    public Byte[] Value;
    public static SID_IDENTIFIER_AUTHORITY SECURITY_NULL_SID_AUTHORITY { get; }
    public static SID_IDENTIFIER_AUTHORITY SECURITY_WORLD_SID_AUTHORITY { get; }
    public static SID_IDENTIFIER_AUTHORITY SECURITY_LOCAL_SID_AUTHORITY { get; }
    public static SID_IDENTIFIER_AUTHORITY SECURITY_CREATOR_SID_AUTHORITY { get; }
    public static SID_IDENTIFIER_AUTHORITY SECURITY_NON_UNIQUE_AUTHORITY { get; }
    public static SID_IDENTIFIER_AUTHORITY SECURITY_NT_AUTHORITY { get; }
    public static SID_IDENTIFIER_AUTHORITY SECURITY_RESOURCE_MANAGER_AUTHORITY { get; }
    public static SID_IDENTIFIER_AUTHORITY SECURITY_APP_PACKAGE_AUTHORITY { get; }
    public static SID_IDENTIFIER_AUTHORITY SECURITY_MANDATORY_LABEL_AUTHORITY { get; }
    public static SID_IDENTIFIER_AUTHORITY SECURITY_SCOPED_POLICY_ID_AUTHORITY { get; }
    public static SID_IDENTIFIER_AUTHORITY SECURITY_AUTHENTICATION_AUTHORITY { get; }
    public static SID_IDENTIFIER_AUTHORITY SECURITY_PROCESS_TRUST_AUTHORITY { get; }
    public static SID_IDENTIFIER_AUTHORITY get_SECURITY_NULL_SID_AUTHORITY();
    public static SID_IDENTIFIER_AUTHORITY get_SECURITY_WORLD_SID_AUTHORITY();
    public static SID_IDENTIFIER_AUTHORITY get_SECURITY_LOCAL_SID_AUTHORITY();
    public static SID_IDENTIFIER_AUTHORITY get_SECURITY_CREATOR_SID_AUTHORITY();
    public static SID_IDENTIFIER_AUTHORITY get_SECURITY_NON_UNIQUE_AUTHORITY();
    public static SID_IDENTIFIER_AUTHORITY get_SECURITY_NT_AUTHORITY();
    public static SID_IDENTIFIER_AUTHORITY get_SECURITY_RESOURCE_MANAGER_AUTHORITY();
    public static SID_IDENTIFIER_AUTHORITY get_SECURITY_APP_PACKAGE_AUTHORITY();
    public static SID_IDENTIFIER_AUTHORITY get_SECURITY_MANDATORY_LABEL_AUTHORITY();
    public static SID_IDENTIFIER_AUTHORITY get_SECURITY_SCOPED_POLICY_ID_AUTHORITY();
    public static SID_IDENTIFIER_AUTHORITY get_SECURITY_AUTHENTICATION_AUTHORITY();
    public static SID_IDENTIFIER_AUTHORITY get_SECURITY_PROCESS_TRUST_AUTHORITY();
}
public class JetBrains.Interop.Windows.Declarations.Structures.STARTUPINFO : ValueType {
    public UInt32 cb;
    private Char* lpReserved;
    public Char* lpDesktop;
    public Char* lpTitle;
    public UInt32 dwX;
    public UInt32 dwY;
    public UInt32 dwXSize;
    public UInt32 dwYSize;
    public UInt32 dwXCountChars;
    public UInt32 dwYCountChars;
    public UInt32 dwFillAttribute;
    public UInt32 dwFlags;
    public ushort wShowWindow;
    private ushort cbReserved2;
    private Byte* lpReserved2;
    public Void* hStdInput;
    public Void* hStdOutput;
    public Void* hStdError;
}
public class JetBrains.Interop.Windows.Declarations.Structures.STARTUPINFOEX : ValueType {
    public STARTUPINFO StartupInfo;
    public Void* lpAttributeList;
}
public class JetBrains.Interop.Windows.Declarations.Structures.SYSTEM_PROCESS_ID_INFORMATION : ValueType {
    public IntPtr ProcessId;
    public UNICODE_STRING ImageName;
}
[IsReadOnlyAttribute]
public class JetBrains.Interop.Windows.Wrappers.MaybeLResult : ValueType {
    public bool IsHandled;
    [NativeIntegerAttribute]
public IntPtr LResult;
    public static MaybeLResult NotHandled { get; }
    public MaybeLResult(bool isHandled, IntPtr lResult);
    public static MaybeLResult get_NotHandled();
    public static MaybeLResult Handled(IntPtr lResult);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
public class JetBrains.Interop.Windows.Wrappers.NativeWin32Window : object {
    [NativeIntegerAttribute]
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Lazy`1<ValueTuple`2<WNDPROC, IntPtr>> myWndProc;
    [NullableAttribute("1")]
private static Dictionary`2<WindowClassInputParameters, RegisteredWindowClass> myRegisteredWindowClasses;
    private static int GWLP_InstanceGCHandle;
    private Void* myHwnd;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ImmutableArray`1<WndProcHook> myWndProcHooks;
    [NullableAttribute("1")]
private object myLockWndProcHooks;
    [NativeIntegerAttribute]
public IntPtr RawHandle { get; }
    [NativeIntegerAttribute]
public IntPtr ValidHandle { get; }
    public Void* RawHWnd { get; }
    public Void* ValidHWnd { get; }
    public bool IsValidWindow { get; }
    public NativeWin32Window(Params& pars);
    private static NativeWin32Window();
    public IntPtr get_RawHandle();
    public IntPtr get_ValidHandle();
    public Void* get_RawHWnd();
    public Void* get_ValidHWnd();
    public bool get_IsValidWindow();
    public void Destroy();
    [NullableContextAttribute("1")]
public UndoRegisterHook RegisterWndProcHook(WndProcHook hook);
    private static IntPtr WndProc(Void* hwnd, UInt32 msg, IntPtr wParam, IntPtr lParam);
    private static RegisteredWindowClass RegisterOrReuseWndClass(WindowClassStyles classstyle);
    private static ValueTuple`2<WNDPROC, IntPtr> LazyInitWndProcThunk();
}
public class JetBrains.Interop.Windows.Wrappers.SafeSidHandle : SafeHandleZeroOrMinusOneIsInvalid {
    protected virtual bool ReleaseHandle();
}
public class JetBrains.Interop.Windows.Wrappers.WindowsCredential : object {
    private static string OVERFLOW_BLOCK_SUFFIX;
    [CompilerGeneratedAttribute]
private CRED_TYPE <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Secret>k__BackingField;
    public CRED_TYPE Type { get; }
    public string ApplicationName { get; }
    [NotNullAttribute]
public string UserName { get; }
    [NotNullAttribute]
public string Secret { get; }
    public WindowsCredential(string applicationName, string userName, string secret, CRED_TYPE type);
    [CompilerGeneratedAttribute]
public CRED_TYPE get_Type();
    [CompilerGeneratedAttribute]
public string get_ApplicationName();
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public string get_Secret();
    public static WindowsCredential Read(string applicationName);
    public static WindowsCredential ReadWithOverflow(string applicationName);
    [CanBeNullAttribute]
private static WindowsCredential ReadImpl(string applicationName, bool withOverflow);
    public int TryGetOverflowBlockNumber();
    private static WindowsCredential ReadCredential(CREDENTIAL credential);
    public void Save(CRED_PERSIST persist);
    [ObsoleteAttribute("Do not use WindowsCredential with overflow")]
public void SaveWithOverflow(CRED_PERSIST persist);
    public static bool TryDelete(string applicationName, CRED_TYPE credType);
    public static bool TryDeleteWithOverflow(string applicationName, CRED_TYPE credType);
    public static IList`1<WindowsCredential> EnumerateCredentials(string prefixFilter);
    private static int GetMaxSecretBytes();
    private static void WriteCredential(CRED_PERSIST credPersist, CRED_TYPE type, string applicationName, string userName, string secret);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NativeIntegerAttribute : Attribute {
    public Boolean[] TransformFlags;
    public NativeIntegerAttribute(Boolean[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
