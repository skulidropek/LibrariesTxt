public class JetBrains.DotTrace.Ide.Rider.SnapshotsDownloadEvents : object {
    private object myLock;
    private ICollection`1<ICoreHostProfile> mySelectedProgressors;
    [CompilerGeneratedAttribute]
private CoreChangedDelegate QueueEnded;
    [CompilerGeneratedAttribute]
private SnapshotDownloadStartedDelegate SnapshotStarted;
    [CompilerGeneratedAttribute]
private SnapshotDownloadFinishedDelegate SnapshotFinished;
    [CompilerGeneratedAttribute]
private SnapshotStateChangedDelegate SnapshotStateChanged;
    public SnapshotsDownloadEvents(Lifetime lifetime, IHostProfileSubscription host);
    [CompilerGeneratedAttribute]
public void add_QueueEnded(CoreChangedDelegate value);
    [CompilerGeneratedAttribute]
public void remove_QueueEnded(CoreChangedDelegate value);
    [CompilerGeneratedAttribute]
public void add_SnapshotStarted(SnapshotDownloadStartedDelegate value);
    [CompilerGeneratedAttribute]
public void remove_SnapshotStarted(SnapshotDownloadStartedDelegate value);
    [CompilerGeneratedAttribute]
public void add_SnapshotFinished(SnapshotDownloadFinishedDelegate value);
    [CompilerGeneratedAttribute]
public void remove_SnapshotFinished(SnapshotDownloadFinishedDelegate value);
    [CompilerGeneratedAttribute]
public void add_SnapshotStateChanged(SnapshotStateChangedDelegate value);
    [CompilerGeneratedAttribute]
public void remove_SnapshotStateChanged(SnapshotStateChangedDelegate value);
    private void AddProgressor(int processId, ICoreHostProfile core);
    private void RemoveProgressor(ICoreHostProfile core);
    private void UpdateProgressor(ICoreHostProfile id, IProgressStatus status);
    [CompilerGeneratedAttribute]
private void <.ctor>b__18_0(Lifetime lifetime1, ICoreHostProfile bridge);
}
[SettingsKeyAttribute("System.Reflection.Missing", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "DotTraceCleanupSettingsSettingDescription")]
public class JetBrains.Profiler.ProfilingSessions.Cleanup.DotTraceCleanupSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "EnableAutoCleanupOfTemporaryStorageByExpirationDateSettingDescription")]
public bool IsAutoCleanupByDateEnabled;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "DaysBeforeSessionWillBeDeletedSettingDescription")]
public int CleanupByDateThresholdV2;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "EnableAutoCleanupOfTemporaryStorageBySizeLimitSettingDescription")]
public bool IsAutoCleanupBySizeEnabled;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "InternalStorageSizeToNotExceedSettingDescription")]
public int CleanupBySizeThresholdV2;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "EnableAutoSaveSettingDescription")]
public bool IsAutoSaveEnabled;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "DaysBeforeSessionWillBeDeletedSettingDescription")]
public int CleanupThreshhold;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "InternalStorageSizeToNotExceedSettingDescription")]
public int CleanupSizeThreshhold;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "LastTimeWhenUserCleanedUpSessionsSettingDescription")]
public long LastManualCleanupDate;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "CleanupModeSettingDescription")]
public int CleanupMode;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "InternalSettingDescription")]
public int MigratedToVersion;
    public static int CurrentVersion;
}
public enum JetBrains.Profiler.ProfilingSessions.Cleanup.SessionCleanupMode : Enum {
    public int value__;
    public static SessionCleanupMode Disable;
    public static SessionCleanupMode AskUser;
    public static SessionCleanupMode AutoDelete;
}
public class JetBrains.Profiler.ProfilingSessions.Core.SelectedCoreContainer : object {
    private IThreading myThreading;
    private IMeasureCoreHostProfile myCurrentCore;
    private Dictionary`2<IMeasureCoreHostProfile, MeasureCoreHostProfileStates> myLiveCores;
    private static ILogger ourLogger;
    [CompilerGeneratedAttribute]
private CoreStateChangedDelegate CurrentCoreStateChanged;
    [CompilerGeneratedAttribute]
private CoreChangedDelegate CurrentCoreChanged;
    private IDataController`1<Dictionary`2<IMeasureCoreHostProfile, MeasureCoreHostProfileStates>> myLiveCoresController;
    [CompilerGeneratedAttribute]
private IDataProvider`1<IEnumerable`1<IMeasureCoreHostProfile>> <Processes>k__BackingField;
    public bool HaveAnyConnection { get; }
    public int Count { get; }
    public bool AnyApiControl { get; }
    public IDataProvider`1<IEnumerable`1<IMeasureCoreHostProfile>> Processes { get; }
    public IMeasureCoreHostProfile Current { get; public set; }
    public SelectedCoreContainer(ConnectionsManager connections, IThreading threading);
    private static SelectedCoreContainer();
    [CompilerGeneratedAttribute]
public void add_CurrentCoreStateChanged(CoreStateChangedDelegate value);
    [CompilerGeneratedAttribute]
public void remove_CurrentCoreStateChanged(CoreStateChangedDelegate value);
    [CompilerGeneratedAttribute]
public void add_CurrentCoreChanged(CoreChangedDelegate value);
    [CompilerGeneratedAttribute]
public void remove_CurrentCoreChanged(CoreChangedDelegate value);
    public bool get_HaveAnyConnection();
    public int get_Count();
    public bool get_AnyApiControl();
    public bool IsActiveCore(IMeasureCoreHostProfile core);
    public bool IsActiveCore(CoreIdentity id);
    [CompilerGeneratedAttribute]
public IDataProvider`1<IEnumerable`1<IMeasureCoreHostProfile>> get_Processes();
    public MeasureCoreHostProfileStates GetState(IMeasureCoreHostProfile core);
    public MeasureCoreHostProfileStates GetState(CoreIdentity id);
    public IMeasureCoreHostProfile get_Current();
    public void set_Current(IMeasureCoreHostProfile value);
    public void SetCore(CoreIdentity id);
    private void OnCoreAdded(ICoreHostProfile core);
    private void OnCoreRemoved(ICoreHostProfile core);
    private void ConnectionsOnCoreStateChanged(ICoreHostProfile core, MeasureCoreHostProfileStates _, MeasureCoreHostProfileStates newState);
}
public enum JetBrains.Profiler.ProfilingSessions.FUS.ControlType : Enum {
    public int value__;
    public static ControlType Manually;
    public static ControlType Api;
}
public enum JetBrains.Profiler.ProfilingSessions.FUS.EntryPoint : Enum {
    public int value__;
    public static EntryPoint NotApplicable;
    public static EntryPoint Unknown;
    public static EntryPoint NotSelected;
    public static EntryPoint General;
    public static EntryPoint Unity;
    public static EntryPoint Unreal;
}
public interface JetBrains.Profiler.ProfilingSessions.FUS.IProfilingSessionCollector {
    public abstract virtual ICustomProfilingViewer SessionStarted(ProfileConfiguration configuration);
}
public interface JetBrains.Profiler.ProfilingSessions.FUS.ISessionEventsCollector {
    public abstract virtual void SessionStopped(Guid sessionId, int collectedSnapshots, int profiledProcesses, int profiledCores);
}
public interface JetBrains.Profiler.ProfilingSessions.FUS.ISessionStartCollector {
    public abstract virtual void SessionStarted(ProfileConfiguration configuration, Guid sessionId, EntryPoint entryPointMode, Type profilingTemplate);
}
public enum JetBrains.Profiler.ProfilingSessions.FUS.ProcessFilter : Enum {
    public int value__;
    public static ProcessFilter NotApplicable;
    public static ProcessFilter Default;
    public static ProcessFilter EntireTree;
    public static ProcessFilter Custom;
}
[ShellComponentAttribute("16")]
public class JetBrains.Profiler.ProfilingSessions.FUS.ProfilingSessionCollector : object {
    private static ILogger ourLogger;
    private ISessionStartCollector myStartCollector;
    private ISessionEventsCollector myEventsCollector;
    private ProfilingSessionExtraInfoProvider myExtraInfoProvider;
    public ProfilingSessionCollector(ISessionStartCollector startCollector, ISessionEventsCollector eventsCollector, ProfilingSessionExtraInfoProvider extraInfoProvider);
    private static ProfilingSessionCollector();
    public sealed virtual ICustomProfilingViewer SessionStarted(ProfileConfiguration configuration);
}
public class JetBrains.Profiler.ProfilingSessions.FUS.ProfilingSessionCollectorController : object {
    private static ILogger ourLogger;
    private ISessionEventsCollector myEventsCollector;
    private CollectedSessionData mySessionData;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    public Guid Id { get; }
    public ProfilingSessionCollectorController(ISessionEventsCollector eventsCollector);
    private static ProfilingSessionCollectorController();
    public sealed virtual void BeforeProfilingStarted(Lifetime profilerLifetime, IHostProfileSubscription hostProfileSubscription);
    private void OnSessionStopped();
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
private void <BeforeProfilingStarted>b__5_0(Lifetime _, ICoreHostProfile core);
    [CompilerGeneratedAttribute]
private void <BeforeProfilingStarted>b__5_1(ResponsibilityEventArgs`1<SnapshotDoneEventArgs> args);
    [CompilerGeneratedAttribute]
private void <OnSessionStopped>b__6_0();
}
[ShellComponentAttribute("16")]
public class JetBrains.Profiler.ProfilingSessions.FUS.ProfilingSessionExtraInfoProvider : object {
    public virtual EntryPoint GetEntryPoint();
    public virtual Type GetUsedTemplate();
}
[CounterUsagesCollectorAttribute("16")]
public class JetBrains.Profiler.ProfilingSessions.FUS.SessionCollector : CounterUsagesCollector {
    protected EventLogGroup Group;
    protected EventLogConfiguration EventLogConfiguration;
    private VarargEventId myTimelineSessionStartedEvent;
    private VarargEventId mySamplingSessionStartedEvent;
    private VarargEventId myTracingSessionStartedEvent;
    private VarargEventId myLineByLineSessionStartedEvent;
    private VarargEventId mySessionStoppedEvent;
    private AnonymizedIdField mySessionIdField;
    private EnumEventField`1<ProfilingConfigType> myProfilingConfigTypeField;
    private EnumEventField`1<ControlType> myControlTypeField;
    private EnumEventField`1<ProcessFilter> myProcessFilterField;
    private BooleanEventField myCollectDataFromStartField;
    private EnumEventField`1<EntryPoint> myEntryPointModeField;
    private TypeEventField myProfilingTemplateField;
    private BooleanEventField myCollectNativeAllocationsField;
    private BooleanEventField myCollectTplEventsField;
    private BooleanEventField myCollectDebugOutputField;
    private BooleanEventField myDownloadSymbolFilesField;
    private EnumEventField`1<TimeMeasurement> myTimeMeasurementField;
    private BooleanEventField myEnableInliningField;
    private BooleanEventField myHighAccuracyField;
    private IntEventField myLineByLineFiltersCountField;
    private IntEventField myCollectedSnapshotsField;
    private IntEventField myProfiledProcessesField;
    private IntEventField myProfiledCoresField;
    public SessionCollector(FeatureUsageLogger featureUsageLogger, EventLogConfiguration eventLogConfiguration);
    public virtual EventLogGroup GetGroup();
    private void TimelineSessionStarted(Guid sessionId, ProfilingConfigType profilingConfigType, ControlType controlType, ProcessFilter processFilter, bool collectDataFromStart, EntryPoint entryPointMode, Type profilingTemplate, bool collectNativeAllocations, bool collectTplEvents, bool collectDebugOutput, bool downloadSymbolFiles);
    private void SamplingSessionStarted(Guid sessionId, ProfilingConfigType profilingConfigType, ControlType controlType, ProcessFilter processFilter, bool collectDataFromStart, EntryPoint entryPointMode, Type profilingTemplate, TimeMeasurement timeMeasurement);
    private void TracingSessionStarted(Guid sessionId, ProfilingConfigType profilingConfigType, ControlType controlType, ProcessFilter processFilter, bool collectDataFromStart, EntryPoint entryPointMode, Type profilingTemplate, TimeMeasurement timeMeasurement, bool enableInlining, bool highAccuracy);
    private void LineByLineSessionStarted(Guid sessionId, ProfilingConfigType profilingConfigType, ControlType controlType, ProcessFilter processFilter, bool collectDataFromStart, EntryPoint entryPointMode, Type profilingTemplate, TimeMeasurement timeMeasurement, bool enableInlining, bool highAccuracy, int lineByLineFiltersCount);
    public sealed virtual void SessionStopped(Guid sessionId, int collectedSnapshots, int profiledProcesses, int profiledCores);
    private static string TransformationHelperAnonymousId(Guid value);
    public sealed virtual void SessionStarted(ProfileConfiguration configuration, Guid sessionId, EntryPoint entryPointMode, Type profilingTemplate);
    private static int GetLineByLineFiltersCount(InjectInfo injectInfo);
    private static TimeMeasurement GetTimeMeasurement(MeterKind measureType);
    private static ProcessFilter GetProcessFilter(IArgument argument);
    private static ProcessFilter GetFilterValue(Nullable`1<bool> profileChildProcesses, ScopeArgument scope);
    private static ControlType GetControlType(ICoreOptions coreOptions);
}
public enum JetBrains.Profiler.ProfilingSessions.FUS.TimeMeasurement : Enum {
    public int value__;
    public static TimeMeasurement None;
    public static TimeMeasurement CpuInstructions;
    public static TimeMeasurement PerfCounters;
    public static TimeMeasurement ThreadCycleTime;
    public static TimeMeasurement ThreadTime;
}
[ZoneMarkerAttribute]
public class JetBrains.Profiler.ProfilingSessions.FUS.ZoneMarker : object {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Profiler.ProfilingSessions.IPerformanceSnapshotManagementZone {
}
public interface JetBrains.Profiler.ProfilingSessions.RecentSnapshots.ILiveRecentSnapshot {
    public Lifetime Lifetime { get; }
    public IProperty`1<bool> IsInitialized { get; }
    public IProperty`1<long> Size { get; }
    public IProperty`1<bool> IsIndexFileExists { get; }
    public abstract virtual Lifetime get_Lifetime();
    public abstract virtual IProperty`1<bool> get_IsInitialized();
    public abstract virtual IProperty`1<long> get_Size();
    public abstract virtual IProperty`1<bool> get_IsIndexFileExists();
}
public interface JetBrains.Profiler.ProfilingSessions.RecentSnapshots.IOnSnapshotDoneOpener {
    public abstract virtual void Open(IRecentSnapshot snapshot, SnapshotOpenReason snapshotOpenReason);
}
public interface JetBrains.Profiler.ProfilingSessions.RecentSnapshots.IRecentSnapshot {
    public string Id { get; }
    public IProperty`1<FileSystemPath> IndexFilePath { get; }
    public IProperty`1<FileSystemPath> UnpackedIndexFilePath { get; }
    public IProperty`1<string> Name { get; }
    public IProperty`1<bool> IsFavorite { get; }
    public IProperty`1<DateTime> LastAccessDate { get; }
    public IProperty`1<bool> ShowInList { get; }
    public IProperty`1<bool> ShouldBeRemoved { get; }
    public DateTime StartTimeUtc { get; }
    public DateTime EndTimeUtc { get; }
    public IProperty`1<bool> IsTemporary { get; }
    public string ProcessName { get; }
    public string CommandLine { get; }
    public ProfileConfiguration Configuration { get; }
    public abstract virtual string get_Id();
    public abstract virtual IProperty`1<FileSystemPath> get_IndexFilePath();
    public abstract virtual IProperty`1<FileSystemPath> get_UnpackedIndexFilePath();
    public abstract virtual IProperty`1<string> get_Name();
    public abstract virtual IProperty`1<bool> get_IsFavorite();
    public abstract virtual IProperty`1<DateTime> get_LastAccessDate();
    public abstract virtual IProperty`1<bool> get_ShowInList();
    public abstract virtual IProperty`1<bool> get_ShouldBeRemoved();
    public abstract virtual DateTime get_StartTimeUtc();
    public abstract virtual DateTime get_EndTimeUtc();
    public abstract virtual IProperty`1<bool> get_IsTemporary();
    public abstract virtual string get_ProcessName();
    public abstract virtual string get_CommandLine();
    public abstract virtual ProfileConfiguration get_Configuration();
    public abstract virtual IEnumerable`1<string> EnumerateModules();
    public abstract virtual long CalculateSize();
    public abstract virtual bool IndexFileExists();
}
public interface JetBrains.Profiler.ProfilingSessions.RecentSnapshots.IRecentSnapshotsCollection {
    public ICollectionEvents`1<ILiveRecentSnapshot> TempSnapshots { get; }
    public ICollectionEvents`1<ILiveRecentSnapshot> Snapshots { get; }
    public abstract virtual ICollectionEvents`1<ILiveRecentSnapshot> get_TempSnapshots();
    public abstract virtual ICollectionEvents`1<ILiveRecentSnapshot> get_Snapshots();
    public abstract virtual bool TryRemoveSnapshot(IRecentSnapshot snapshot, bool removeFromDisk, bool throwOnFail);
    public abstract virtual Task ForceInitializeAsync();
    public abstract virtual void RefreshSnapshot(IRecentSnapshot snapshot);
    public abstract virtual bool TryRenameSnapshot(IRecentSnapshot snapshot, FileSystemPath newIndexFileName, bool throwOnFail);
    public abstract virtual bool TrySetSnapshotAsSaved(IRecentSnapshot tempSnapshot, FileSystemPath savedSnapshotPath, bool throwOnFail);
}
public interface JetBrains.Profiler.ProfilingSessions.RecentSnapshots.IRecentSnapshotsStorage {
    public abstract virtual IRecentSnapshot AddSnapshot(FileSystemPath snapshotPath, string snapshotName, RecentSnapshotInfo recentSnapshotInfo, ProfileConfiguration profileConfiguration);
    public abstract virtual bool TryRemoveSnapshot(IRecentSnapshot snapshot);
    public abstract virtual bool TryHideSnapshotAndMarkRemoved(IRecentSnapshot snapshot);
    public abstract virtual bool TryRenameSnapshot(IRecentSnapshot snapshot, FileSystemPath newIndexFilePath, string newName);
    public abstract virtual bool TryLoadReadonlySnapshot(FileSystemPath snapshotPath, IRecentSnapshot& recentSnapshot);
    public abstract virtual bool TryLoadLiveSnapshot(Lifetime snapshotLifetime, FileSystemPath snapshotPath, ILiveRecentSnapshot& recentSnapshot);
    public abstract virtual bool TrySetSnapshotAsSaved(IRecentSnapshot tempSnapshot, FileSystemPath savedSnapshotPath);
    public abstract virtual IEnumerable`1<ILiveRecentSnapshot> LoadStoredSnapshots();
}
public class JetBrains.Profiler.ProfilingSessions.RecentSnapshots.LiveRecentSnapshot : RecentSnapshot {
    private IDataSignalController myRefreshSignal;
    [CompilerGeneratedAttribute]
private LifetimeDefinition <LifetimeDef>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsInitialized>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<long> <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsIndexFileExists>k__BackingField;
    internal LifetimeDefinition LifetimeDef { get; }
    public Lifetime Lifetime { get; }
    public IProperty`1<bool> IsInitialized { get; }
    public IProperty`1<long> Size { get; internal set; }
    public IProperty`1<bool> IsIndexFileExists { get; internal set; }
    internal LiveRecentSnapshot(LifetimeDefinition lifetimeDef, Func`1<IEnumerable`1<string>> readModules, IDataSignalController refreshSignal, IProperty`1<bool> isInitialized);
    [CompilerGeneratedAttribute]
internal LifetimeDefinition get_LifetimeDef();
    public sealed virtual Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsInitialized();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<long> get_Size();
    [CompilerGeneratedAttribute]
internal void set_Size(IProperty`1<long> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsIndexFileExists();
    [CompilerGeneratedAttribute]
internal void set_IsIndexFileExists(IProperty`1<bool> value);
    internal void Refresh();
}
public class JetBrains.Profiler.ProfilingSessions.RecentSnapshots.RecentSnapshot : object {
    private static ILogger ourLogger;
    private Func`1<IEnumerable`1<string>> myReadModules;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<FileSystemPath> <IndexFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<FileSystemPath> <UnpackedIndexFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsFavorite>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<DateTime> <LastAccessDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ShowInList>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ShouldBeRemoved>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EndTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsTemporary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProcessName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandLine>k__BackingField;
    [CompilerGeneratedAttribute]
private ProfileConfiguration <Configuration>k__BackingField;
    public string Id { get; public set; }
    public IProperty`1<FileSystemPath> IndexFilePath { get; public set; }
    public IProperty`1<FileSystemPath> UnpackedIndexFilePath { get; public set; }
    public IProperty`1<string> Name { get; internal set; }
    public IProperty`1<bool> IsFavorite { get; internal set; }
    public IProperty`1<DateTime> LastAccessDate { get; internal set; }
    public IProperty`1<bool> ShowInList { get; internal set; }
    public IProperty`1<bool> ShouldBeRemoved { get; internal set; }
    public DateTime StartTimeUtc { get; internal set; }
    public DateTime EndTimeUtc { get; internal set; }
    public IProperty`1<bool> IsTemporary { get; public set; }
    public string ProcessName { get; internal set; }
    public string CommandLine { get; internal set; }
    public ProfileConfiguration Configuration { get; internal set; }
    internal RecentSnapshot(Func`1<IEnumerable`1<string>> readModules);
    private static RecentSnapshot();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<FileSystemPath> get_IndexFilePath();
    [CompilerGeneratedAttribute]
public void set_IndexFilePath(IProperty`1<FileSystemPath> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<FileSystemPath> get_UnpackedIndexFilePath();
    [CompilerGeneratedAttribute]
public void set_UnpackedIndexFilePath(IProperty`1<FileSystemPath> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<string> get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsFavorite();
    [CompilerGeneratedAttribute]
internal void set_IsFavorite(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<DateTime> get_LastAccessDate();
    [CompilerGeneratedAttribute]
internal void set_LastAccessDate(IProperty`1<DateTime> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_ShowInList();
    [CompilerGeneratedAttribute]
internal void set_ShowInList(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_ShouldBeRemoved();
    [CompilerGeneratedAttribute]
internal void set_ShouldBeRemoved(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_StartTimeUtc();
    [CompilerGeneratedAttribute]
internal void set_StartTimeUtc(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_EndTimeUtc();
    [CompilerGeneratedAttribute]
internal void set_EndTimeUtc(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsTemporary();
    [CompilerGeneratedAttribute]
public void set_IsTemporary(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProcessName();
    [CompilerGeneratedAttribute]
internal void set_ProcessName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CommandLine();
    [CompilerGeneratedAttribute]
internal void set_CommandLine(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ProfileConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
internal void set_Configuration(ProfileConfiguration value);
    public sealed virtual IEnumerable`1<string> EnumerateModules();
    public sealed virtual long CalculateSize();
    public sealed virtual bool IndexFileExists();
    internal static long CalculateSize(FileSystemPath filePath);
    internal static bool IndexFileExists(FileSystemPath filePath);
    [CompilerGeneratedAttribute]
private bool <IndexFileExists>b__61_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.Profiler.ProfilingSessions.RecentSnapshots.RecentSnapshotExt : object {
    [ExtensionAttribute]
public static bool ContainsModuleFrom(IRecentSnapshot snapshotInfo, IReadOnlySet`1<string> moduleNames);
    [ExtensionAttribute]
public static string CreateExportFileName(IRecentSnapshot snapshotInfo);
    [ExtensionAttribute]
public static string CreateExportFileName(RecentSnapshotInfo snapshotInfo);
    [LocalizableAttribute("False")]
private static string CreateExportFileName(string processName, DateTime startTimeUtc);
    [ExtensionAttribute]
[LocalizableAttribute("False")]
private static string ToSnapshotNameFormat(DateTime dateTime);
    [ExtensionAttribute]
public static string GetPresentableName(RecentSnapshotInfo snapshotInfo, ProfileConfiguration configuration);
    [LocalizableAttribute("False")]
private static string GetPresentableName(string processName, ProfileConfiguration configuration, string commandLine);
    [ExtensionAttribute]
public static bool IsBroken(IRecentSnapshot recentSnapshot);
    private static string GetPresentableName(IArgument argument);
    [NullableContextAttribute("2")]
private static bool IsUnitTest(ProfileConfiguration configuration);
    [ExtensionAttribute]
public static string GetProfilingTypeString(IRecentSnapshot snapshot);
    [ExtensionAttribute]
public static IconId GetSmallAppTypeIcon(IRecentSnapshot snapshot);
    [ExtensionAttribute]
public static IconId GetSmallAppTypeIcon(ProfileConfiguration profileConfiguration);
    [ExtensionAttribute]
public static bool IsTimeline(IRecentSnapshot snapshot);
    [ExtensionAttribute]
public static string PresentableAppName(string processName, string cmdLine, ProfileConfiguration profileConfiguration);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.Profiler.ProfilingSessions.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string CleanupModeSettingDescription { get; }
    public static string CommandLineSettingDescription { get; }
    public static string ConfigurationXmlSettingDescription { get; }
    public static string DaysBeforeSessionWillBeDeletedSettingDescription { get; }
    public static string DotTraceCleanupSettingsSettingDescription { get; }
    public static string EnableAutoCleanupOfTemporaryStorageByExpirationDateSettingDescription { get; }
    public static string EnableAutoCleanupOfTemporaryStorageBySizeLimitSettingDescription { get; }
    public static string EnableAutoSaveSettingDescription { get; }
    public static string EndTimeUtcSettingDescription { get; }
    public static string IdSettingDescription { get; }
    public static string IndexFilePathSettingDescription { get; }
    public static string UnpackedIndexFilePathSettingDescription { get; }
    public static string InternalSettingDescription { get; }
    public static string InternalStorageSizeToNotExceedSettingDescription { get; }
    public static string IsFavoriteSettingDescription { get; }
    public static string LastAccessDateUtcSettingDescription { get; }
    public static string LastTimeWhenUserCleanedUpSessionsSettingDescription { get; }
    public static string ModuleSettingDescription { get; }
    public static string ModulesSettingDescription { get; }
    public static string NameSettingDescription { get; }
    public static string ProcessNameSettingDescription { get; }
    public static string RecentSnapshotIndexFilePathIdMappingSettingDescription { get; }
    public static string RecentSnapshotInfoSettingDescription { get; }
    public static string RecentSnapshotModuleInfoSettingDescription { get; }
    public static string ShouldBeRemovedSettingDescription { get; }
    public static string ShowInListSettingDescription { get; }
    public static string StartTimeUtcSettingDescription { get; }
    public static string StateSettingDescription { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_CleanupModeSettingDescription();
    public static string get_CommandLineSettingDescription();
    public static string get_ConfigurationXmlSettingDescription();
    public static string get_DaysBeforeSessionWillBeDeletedSettingDescription();
    public static string get_DotTraceCleanupSettingsSettingDescription();
    public static string get_EnableAutoCleanupOfTemporaryStorageByExpirationDateSettingDescription();
    public static string get_EnableAutoCleanupOfTemporaryStorageBySizeLimitSettingDescription();
    public static string get_EnableAutoSaveSettingDescription();
    public static string get_EndTimeUtcSettingDescription();
    public static string get_IdSettingDescription();
    public static string get_IndexFilePathSettingDescription();
    public static string get_UnpackedIndexFilePathSettingDescription();
    public static string get_InternalSettingDescription();
    public static string get_InternalStorageSizeToNotExceedSettingDescription();
    public static string get_IsFavoriteSettingDescription();
    public static string get_LastAccessDateUtcSettingDescription();
    public static string get_LastTimeWhenUserCleanedUpSessionsSettingDescription();
    public static string get_ModuleSettingDescription();
    public static string get_ModulesSettingDescription();
    public static string get_NameSettingDescription();
    public static string get_ProcessNameSettingDescription();
    public static string get_RecentSnapshotIndexFilePathIdMappingSettingDescription();
    public static string get_RecentSnapshotInfoSettingDescription();
    public static string get_RecentSnapshotModuleInfoSettingDescription();
    public static string get_ShouldBeRemovedSettingDescription();
    public static string get_ShowInListSettingDescription();
    public static string get_StartTimeUtcSettingDescription();
    public static string get_StateSettingDescription();
}
public enum JetBrains.Profiler.ProfilingSessions.Sessions.ApplicationKind : Enum {
    public int value__;
    public static ApplicationKind StandaloneApp;
    public static ApplicationKind CoreClr;
    public static ApplicationKind MetroApp;
    public static ApplicationKind IISServer;
    public static ApplicationKind IISExpressApp;
    public static ApplicationKind WindowsService;
    public static ApplicationKind WcfLibrary;
    public static ApplicationKind AnyProcess;
    public static ApplicationKind Attach;
    public static ApplicationKind UnitTests;
    public static ApplicationKind Mono;
    public static ApplicationKind Unity;
    public static ApplicationKind Obsolete;
}
[ExtensionAttribute]
public static class JetBrains.Profiler.ProfilingSessions.Sessions.ApplicationKinds : object {
    [ExtensionAttribute]
public static string GetName(ApplicationKind appKind);
    [ExtensionAttribute]
public static bool IsEditable(ApplicationKind appKind);
    public static ApplicationKind GuessKind(string configSignature);
}
public class JetBrains.Profiler.ProfilingSessions.Sessions.ConnectionsManager : object {
    private Lifetime myLifetime;
    private IThreading myThreading;
    private static ILogger Logger;
    private Dictionary`2<IMeasureCoreHostProfile, MeasureCoreHostProfileStates> myLiveCoresStates;
    [CompilerGeneratedAttribute]
private Action ConnectionsChanged;
    [CompilerGeneratedAttribute]
private CoreAddedOrRemovedDelegate ProfileStarted;
    [CompilerGeneratedAttribute]
private CoreAddedOrRemovedDelegate ProfileFinished;
    [CompilerGeneratedAttribute]
private CoreAddedOrRemovedDelegate ProfileDropped;
    [CompilerGeneratedAttribute]
private CoreAddedOrRemovedDelegate ConnectionAdded;
    [CompilerGeneratedAttribute]
private CoreAddedOrRemovedDelegate ConnectionRemoved;
    [CompilerGeneratedAttribute]
private CoreStateChangedDelegate CoreStateChanged;
    [CompilerGeneratedAttribute]
private CoreRuntimeChangedDelegate CoreRuntimeChanged;
    [CompilerGeneratedAttribute]
private CoreCommandlineChangedDelegate CoreCommandlineChanged;
    public ConnectionsManager(Lifetime lifetime, IThreading threading, IHostProfileSubscription subscription);
    private static ConnectionsManager();
    [CompilerGeneratedAttribute]
public void add_ConnectionsChanged(Action value);
    [CompilerGeneratedAttribute]
public void remove_ConnectionsChanged(Action value);
    [CompilerGeneratedAttribute]
public void add_ProfileStarted(CoreAddedOrRemovedDelegate value);
    [CompilerGeneratedAttribute]
public void remove_ProfileStarted(CoreAddedOrRemovedDelegate value);
    [CompilerGeneratedAttribute]
public void add_ProfileFinished(CoreAddedOrRemovedDelegate value);
    [CompilerGeneratedAttribute]
public void remove_ProfileFinished(CoreAddedOrRemovedDelegate value);
    [CompilerGeneratedAttribute]
public void add_ProfileDropped(CoreAddedOrRemovedDelegate value);
    [CompilerGeneratedAttribute]
public void remove_ProfileDropped(CoreAddedOrRemovedDelegate value);
    [CompilerGeneratedAttribute]
public void add_ConnectionAdded(CoreAddedOrRemovedDelegate value);
    [CompilerGeneratedAttribute]
public void remove_ConnectionAdded(CoreAddedOrRemovedDelegate value);
    [CompilerGeneratedAttribute]
public void add_ConnectionRemoved(CoreAddedOrRemovedDelegate value);
    [CompilerGeneratedAttribute]
public void remove_ConnectionRemoved(CoreAddedOrRemovedDelegate value);
    [CompilerGeneratedAttribute]
public void add_CoreStateChanged(CoreStateChangedDelegate value);
    [CompilerGeneratedAttribute]
public void remove_CoreStateChanged(CoreStateChangedDelegate value);
    [CompilerGeneratedAttribute]
public void add_CoreRuntimeChanged(CoreRuntimeChangedDelegate value);
    [CompilerGeneratedAttribute]
public void remove_CoreRuntimeChanged(CoreRuntimeChangedDelegate value);
    [CompilerGeneratedAttribute]
public void add_CoreCommandlineChanged(CoreCommandlineChangedDelegate value);
    [CompilerGeneratedAttribute]
public void remove_CoreCommandlineChanged(CoreCommandlineChangedDelegate value);
    public bool AllCoresStates(Predicate`1<MeasureCoreHostProfileStates> what);
    public bool AllCores(Predicate`1<IMeasureCoreHostProfile> what);
    public bool ContainsCore(int processId);
    public Nullable`1<Guid> GetCoreGuid(int processId);
    private void OnCoreAdded(ICoreHostProfile core);
    private void OnCoreRemoved(ICoreHostProfile core);
    private void OnCoreStateChanged(ICoreHostProfile core, MeasureCoreHostProfileStates oldState, MeasureCoreHostProfileStates newState);
    private void OnCoreRuntimeChanged(ICoreHostProfile core, RuntimeInfo runtime);
    private void OnCoreCommandlineChanged(ICoreHostProfile core, string commandLine);
    [CompilerGeneratedAttribute]
private void <.ctor>b__35_0(Lifetime x, ICoreHostProfile y);
}
public class JetBrains.Profiler.ProfilingSessions.Sessions.CoreEventsControlled : object {
    private ILogger myLogger;
    private CurrentSessionTracker myTracker;
    private ProfileConfiguration myConfig;
    [CompilerGeneratedAttribute]
private ISignal`1<IProfilingSession> <SessionCreated>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<IProfilingSession> <SessionFinished>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<Pair`2<IRecentSnapshot, ProfileeProcessInfo>> <SnapshotDone>k__BackingField;
    public ISignal`1<IProfilingSession> SessionCreated { get; }
    public ISignal`1<IProfilingSession> SessionFinished { get; }
    public ISignal`1<Pair`2<IRecentSnapshot, ProfileeProcessInfo>> SnapshotDone { get; }
    public IProfilingSession Data { get; }
    public CoreEventsControlled(CurrentSessionTracker tracker, ProfileConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IProfilingSession> get_SessionCreated();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IProfilingSession> get_SessionFinished();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<Pair`2<IRecentSnapshot, ProfileeProcessInfo>> get_SnapshotDone();
    public sealed virtual IProfilingSession get_Data();
    public sealed virtual void OnHostAlert(AlertEventArgs args);
    public sealed virtual void OnCoreAlert(AlertEventArgs args, int processId, string executable);
    public sealed virtual void OnLogDone(LogDoneEventArgs args, ProfileeProcessInfo processInfo);
    public sealed virtual void OnSnapshotDone(SnapshotDoneEventArgs args, ProfileeProcessInfo profileeProcessInfo);
    public sealed virtual void StartNewSession();
    public sealed virtual void OnCoreConnected(CoreIdentity coreIdentity, ProfileeProcessInfo profileeProcessInfo);
    public virtual void OnProfilingFinished(ExitCodeGetter exitCodeGetter);
}
[ThreadUnsafeAttribute]
public class JetBrains.Profiler.ProfilingSessions.Sessions.CurrentSessionTracker : object {
    private FileSystemPath mySessionFolder;
    private IProfilingSession mySessionData;
    private ISessionErrorsHandler myErrorsHandler;
    private IRecentSnapshotsStorage mySnapshotsCollection;
    private IRecentSnapshotInfoReader myRecentSnapshotInfoReader;
    private ISnapshotsSettingsProvider mySettingsProvider;
    private ISnapshotUtils mySnapshotUtils;
    private static ILogger ourLog;
    public bool HasActiveSession { get; }
    public IProfilingSession Data { get; }
    public CurrentSessionTracker(FileSystemPath sessionFolder, ISessionErrorsHandler sessionErrorsHandler, IRecentSnapshotsStorage snapshotsCollection, IRecentSnapshotInfoReader recentSnapshotInfoReader, ISnapshotsSettingsProvider settingsProvider, ISnapshotUtils snapshotUtils);
    private static CurrentSessionTracker();
    public void AddProfiledProcess(Guid coreIdentityCoreGuid, string profileeExecutable);
    public IProfilingSession StartNewSession(ProfileConfiguration config);
    public bool get_HasActiveSession();
    public IProfilingSession get_Data();
    public IRecentSnapshot CreateArtefact(SnapshotDoneEventArgs args, ProfileeProcessInfo profilee);
    [CanBeNullAttribute]
public IProfilingSession FinishCurrentSession();
}
[UsedImplicitlyAttribute]
public class JetBrains.Profiler.ProfilingSessions.Sessions.EtwJustModulePathReader : object {
    private static int NativeModuleSectionType;
    private static int ManagedModuleSectionType;
    private static int ModuleSectionType;
    private ISnapshotStorage myStorage;
    public EtwJustModulePathReader(Lifetime lifetime, FileSystemPath indexFile);
    [NotNullAttribute]
public IEnumerable`1<string> ReadModulePath();
    private void ReadModulePath(ICollection`1<string> paths, bool native);
    [NotNullAttribute]
private IList`1<long> GetNativeOffsets(int sectionType, int offset);
    [CompilerGeneratedAttribute]
private object <.ctor>b__4_0();
}
public enum JetBrains.Profiler.ProfilingSessions.Sessions.HostType : Enum {
    public int value__;
    public static HostType Local;
    public static HostType Remote;
}
public interface JetBrains.Profiler.ProfilingSessions.Sessions.IAppIconExtractor {
    public abstract virtual ImageSource GetAppIcon(FileSystemPath path);
}
public interface JetBrains.Profiler.ProfilingSessions.Sessions.ICurrentSessionController {
    public ISignal`1<IProfilingSession> SessionCreated { get; }
    public ISignal`1<IProfilingSession> SessionFinished { get; }
    public ISignal`1<Pair`2<IRecentSnapshot, ProfileeProcessInfo>> SnapshotDone { get; }
    public IProfilingSession Data { get; }
    public abstract virtual void StartNewSession();
    public abstract virtual ISignal`1<IProfilingSession> get_SessionCreated();
    public abstract virtual ISignal`1<IProfilingSession> get_SessionFinished();
    public abstract virtual ISignal`1<Pair`2<IRecentSnapshot, ProfileeProcessInfo>> get_SnapshotDone();
    public abstract virtual IProfilingSession get_Data();
}
public interface JetBrains.Profiler.ProfilingSessions.Sessions.ILauncherUI {
    [NotNullAttribute]
public abstract virtual IProgressIndicator GetProgressor(Lifetime lifetime);
}
public interface JetBrains.Profiler.ProfilingSessions.Sessions.ILogKeeper {
    public IEnumerable`1<MessageInfo> Messages { get; }
    public bool HasMessages { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_MessageAdded(Action`1<MessageInfo> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MessageAdded(Action`1<MessageInfo> value);
    public abstract virtual IEnumerable`1<MessageInfo> get_Messages();
    public abstract virtual bool get_HasMessages();
    public abstract virtual void AddMessage(MessageInfo message);
}
public interface JetBrains.Profiler.ProfilingSessions.Sessions.IPerformElevation {
    public abstract virtual ProfileConfiguration IfNecessary(ProfileConfiguration config);
}
public interface JetBrains.Profiler.ProfilingSessions.Sessions.IProfilingSession {
    public FileSystemPath SessionFolder { get; }
    public ProfileConfiguration Configuration { get; }
    public abstract virtual FileSystemPath get_SessionFolder();
    public abstract virtual ProfileConfiguration get_Configuration();
}
public interface JetBrains.Profiler.ProfilingSessions.Sessions.ISessionErrorsHandler {
    public abstract virtual void FailedProfile(Exception e);
    public abstract virtual void MoveToStorageFailed(string originalPath);
}
public interface JetBrains.Profiler.ProfilingSessions.Sessions.ISessionsCollection {
    public ICollectionEvents`1<IProfilingSession> ActiveSessions { get; }
    public IDataProvider`1<bool> HasProfilingSession { get; }
    public abstract virtual ICollectionEvents`1<IProfilingSession> get_ActiveSessions();
    public abstract virtual IDataProvider`1<bool> get_HasProfilingSession();
}
public interface JetBrains.Profiler.ProfilingSessions.Sessions.ISnapshotsSettingsProvider {
    public IProperty`1<FileSystemPath> CurrentSnapshotsStore { get; }
    public IProperty`1<FileSystemPath[]> OldStorePaths { get; }
    public IProperty`1<bool> IsAutoSaveEnabled { get; }
    public IProperty`1<bool> IsAutoCleanupByDateEnabled { get; }
    public IProperty`1<bool> IsAutoCleanupBySizeEnabled { get; }
    public IProperty`1<int> CleanupByDateThreshold { get; }
    public IProperty`1<int> CleanupBySizeThreshold { get; }
    public abstract virtual IProperty`1<FileSystemPath> get_CurrentSnapshotsStore();
    public abstract virtual IProperty`1<FileSystemPath[]> get_OldStorePaths();
    public abstract virtual IProperty`1<bool> get_IsAutoSaveEnabled();
    public abstract virtual IProperty`1<bool> get_IsAutoCleanupByDateEnabled();
    public abstract virtual IProperty`1<bool> get_IsAutoCleanupBySizeEnabled();
    public abstract virtual IProperty`1<int> get_CleanupByDateThreshold();
    public abstract virtual IProperty`1<int> get_CleanupBySizeThreshold();
}
[NullableContextAttribute("1")]
public interface JetBrains.Profiler.ProfilingSessions.Sessions.ISnapshotUtils {
    public abstract virtual FileSystemPath GetUniqueSnapshotDirectory(FileSystemPath storageDir, string snapshotName, DateTime snapshotCreationDate);
    public abstract virtual FileSystemPath RenameSnapshot(FileSystemPath srcIndexFile, DateTime snapshotCreationDate, string dstIndexFileNameWithoutExt, bool renameDirectory, IProgressIndicator progress);
    public abstract virtual void Delete(IProgressIndicator progress, FileSystemPath srcIndexFile, bool tryDeleteDirectoryIfEmpty);
    public abstract virtual IEnumerable`1<FileSystemPath> Locked(FileSystemPath indexFile);
}
public interface JetBrains.Profiler.ProfilingSessions.Sessions.IUIComponentsBuilder {
    public abstract virtual UIComponents Build();
}
public class JetBrains.Profiler.ProfilingSessions.Sessions.LifetimeControlled : object {
    private ILogger myLogger;
    protected CurrentSessionTracker myTracker;
    protected ProfileConfiguration myConfig;
    [CompilerGeneratedAttribute]
private ISignal`1<IProfilingSession> <SessionCreated>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<IProfilingSession> <SessionFinished>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<Pair`2<IRecentSnapshot, ProfileeProcessInfo>> <SnapshotDone>k__BackingField;
    public ISignal`1<IProfilingSession> SessionCreated { get; }
    public ISignal`1<IProfilingSession> SessionFinished { get; }
    public ISignal`1<Pair`2<IRecentSnapshot, ProfileeProcessInfo>> SnapshotDone { get; }
    public IProfilingSession Data { get; }
    public LifetimeControlled(Lifetime lifetime, CurrentSessionTracker tracker);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IProfilingSession> get_SessionCreated();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IProfilingSession> get_SessionFinished();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<Pair`2<IRecentSnapshot, ProfileeProcessInfo>> get_SnapshotDone();
    public sealed virtual IProfilingSession get_Data();
    public void SetProfileConfiguration(ProfileConfiguration config);
    public sealed virtual void OnSnapshotDone(SnapshotDoneEventArgs args, ProfileeProcessInfo profileeProcessInfo);
    public sealed virtual void StartNewSession();
    public sealed virtual void OnCoreConnected(CoreIdentity coreIdentity, ProfileeProcessInfo profileeProcessInfo);
    public virtual void OnProfilingFinished(ExitCodeGetter exitCodeGetter);
    public sealed virtual void OnHostAlert(AlertEventArgs args);
    public sealed virtual void OnCoreAlert(AlertEventArgs args, int processId, string executable);
    public sealed virtual void OnLogDone(LogDoneEventArgs args, ProfileeProcessInfo processInfo);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0();
}
public class JetBrains.Profiler.ProfilingSessions.Sessions.LifetimeTerminator : object {
    private LifetimeDefinition myLifetimeDef;
    private IThreading myThreading;
    public LifetimeTerminator(LifetimeDefinition lifetimeDef, IThreading threading);
    public sealed virtual void BeforeProfilingStarted(Lifetime profilerLifetime, IHostProfileSubscription hostProfileSubscription);
    [CompilerGeneratedAttribute]
private void <BeforeProfilingStarted>b__3_0();
    [CompilerGeneratedAttribute]
private void <BeforeProfilingStarted>b__3_1();
}
public class JetBrains.Profiler.ProfilingSessions.Sessions.LogKeeper : object {
    private static string ModMessage;
    private List`1<MessageInfo> myMessages;
    private static ILogger ourLogger;
    [CompilerGeneratedAttribute]
private Action`1<MessageInfo> MessageAdded;
    public IEnumerable`1<MessageInfo> Messages { get; }
    public bool HasMessages { get; }
    private static LogKeeper();
    [CompilerGeneratedAttribute]
public sealed virtual void add_MessageAdded(Action`1<MessageInfo> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MessageAdded(Action`1<MessageInfo> value);
    public sealed virtual IEnumerable`1<MessageInfo> get_Messages();
    public sealed virtual bool get_HasMessages();
    public sealed virtual void AddMessage(MessageInfo message);
    private static void DecodeMessage(MessageInfo message);
}
[ExtensionAttribute]
public static class JetBrains.Profiler.ProfilingSessions.Sessions.LogKeeperToFileWriter : object {
    [ExtensionAttribute]
public static void StreamMessagesToLog(ILogKeeper logKeeper, Lifetime lifetime);
}
internal class JetBrains.Profiler.ProfilingSessions.Sessions.MainThreadResultHandler : object {
    private IThreading myThreading;
    private IProfilerResultsHandler myHandler;
    public MainThreadResultHandler(IThreading threading, IProfilerResultsHandler handler);
    public sealed virtual void OnHostAlert(AlertEventArgs args);
    public sealed virtual void OnCoreAlert(AlertEventArgs args, int processId, string executable);
    public sealed virtual void OnCoreConnected(CoreIdentity coreIdentity, ProfileeProcessInfo profileeProcessInfo);
    public sealed virtual void OnLogDone(LogDoneEventArgs args, ProfileeProcessInfo processInfo);
    public sealed virtual void OnSnapshotDone(SnapshotDoneEventArgs args, ProfileeProcessInfo processInfo);
    public sealed virtual void OnProfilingFinished(ExitCodeGetter exitCodeGetter);
}
public class JetBrains.Profiler.ProfilingSessions.Sessions.NoUiLauncher : object {
    public static ILauncherUI Instance;
    private IProgressIndicator myProgress;
    private static NoUiLauncher();
    public sealed virtual IProgressIndicator GetProgressor(Lifetime lifetime);
}
public class JetBrains.Profiler.ProfilingSessions.Sessions.PerformanceJustModulePathReader : SnapshotReader {
    private ISnapshotStorage myStorage;
    private static UInt32 Magic;
    public PerformanceJustModulePathReader(Lifetime lifetime, FileSystemPath indexFile);
    [NotNullAttribute]
public IEnumerable`1<string> ReadModulePath();
    private static bool SnapshotHasValidMagic(UInt32 snapshotMagic);
    [NotNullAttribute]
private static IEnumerable`1<string> GetModulePaths(IModulePathSection section);
}
public class JetBrains.Profiler.ProfilingSessions.Sessions.ProfileInstanceOptions : object {
    private object myLockObject;
    private JetHashSet`1<CoreIdentity> myDroppedSnapshots;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) myAutoOpenProcessByPid;
    private IDataController`1<Nullable`1<int>> myCurrentProcessId;
    [CompilerGeneratedAttribute]
private bool <IsInternalMode>k__BackingField;
    public bool IsInternalMode { get; public set; }
    public IDataProvider`1<Nullable`1<int>> CurrentProcessId { get; }
    public bool AutoOpenViewForPid(int pid);
    [CompilerGeneratedAttribute]
public bool get_IsInternalMode();
    [CompilerGeneratedAttribute]
public void set_IsInternalMode(bool value);
    public void DisableAutoOpen();
    public void AutoOpenAnyProcess();
    public void AutoOpenProcessWithPid(int pid);
    public void AddDroppedSnapshot(CoreIdentity coreIdentity);
    public bool IsSnapshotDropped(CoreIdentity coreIdentity);
    public void SwitchProcess(int pId);
    public IDataProvider`1<Nullable`1<int>> get_CurrentProcessId();
}
[ExtensionAttribute]
public static class JetBrains.Profiler.ProfilingSessions.Sessions.ProfilerResultsHandlerEx : object {
    [ExtensionAttribute]
public static IProfilerResultsHandler ToMainThread(IProfilerResultsHandler handler, IThreading threading);
}
public class JetBrains.Profiler.ProfilingSessions.Sessions.ProfilingOptions : object {
    [CompilerGeneratedAttribute]
private ProfilingType <ProfilingType>k__BackingField;
    [CompilerGeneratedAttribute]
private MeasureType <MeasureType>k__BackingField;
    [CompilerGeneratedAttribute]
private MeterKind <MeterKind>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StartImmediately>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableInlining>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HighAccuracy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseProfilerApi>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableNativeProfile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableNativeAllocations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableTpl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDebugOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LoadPdb>k__BackingField;
    public ProfilingType ProfilingType { get; internal set; }
    public MeasureType MeasureType { get; internal set; }
    public MeterKind MeterKind { get; internal set; }
    public bool StartImmediately { get; internal set; }
    public bool EnableInlining { get; internal set; }
    public bool HighAccuracy { get; internal set; }
    public bool UseProfilerApi { get; internal set; }
    public bool EnableNativeProfile { get; internal set; }
    public bool EnableNativeAllocations { get; internal set; }
    public bool EnableTpl { get; internal set; }
    public bool EnableDebugOutput { get; internal set; }
    public bool LoadPdb { get; internal set; }
    [CompilerGeneratedAttribute]
public ProfilingType get_ProfilingType();
    [CompilerGeneratedAttribute]
internal void set_ProfilingType(ProfilingType value);
    [CompilerGeneratedAttribute]
public MeasureType get_MeasureType();
    [CompilerGeneratedAttribute]
internal void set_MeasureType(MeasureType value);
    [CompilerGeneratedAttribute]
public MeterKind get_MeterKind();
    [CompilerGeneratedAttribute]
internal void set_MeterKind(MeterKind value);
    [CompilerGeneratedAttribute]
public bool get_StartImmediately();
    [CompilerGeneratedAttribute]
internal void set_StartImmediately(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableInlining();
    [CompilerGeneratedAttribute]
internal void set_EnableInlining(bool value);
    [CompilerGeneratedAttribute]
public bool get_HighAccuracy();
    [CompilerGeneratedAttribute]
internal void set_HighAccuracy(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseProfilerApi();
    [CompilerGeneratedAttribute]
internal void set_UseProfilerApi(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableNativeProfile();
    [CompilerGeneratedAttribute]
internal void set_EnableNativeProfile(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableNativeAllocations();
    [CompilerGeneratedAttribute]
internal void set_EnableNativeAllocations(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableTpl();
    [CompilerGeneratedAttribute]
internal void set_EnableTpl(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableDebugOutput();
    [CompilerGeneratedAttribute]
internal void set_EnableDebugOutput(bool value);
    [CompilerGeneratedAttribute]
public bool get_LoadPdb();
    [CompilerGeneratedAttribute]
internal void set_LoadPdb(bool value);
    public sealed virtual bool Equals(ProfilingOptions other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.Profiler.ProfilingSessions.Sessions.ProfilingSession : object {
    [CompilerGeneratedAttribute]
private FileSystemPath <SessionFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private ProfileConfiguration <Configuration>k__BackingField;
    public FileSystemPath SessionFolder { get; }
    public ProfileConfiguration Configuration { get; }
    public ProfilingSession(ProfileConfiguration configuration, FileSystemPath sessionFolder);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_SessionFolder();
    [CompilerGeneratedAttribute]
public sealed virtual ProfileConfiguration get_Configuration();
}
public enum JetBrains.Profiler.ProfilingSessions.Sessions.ProfilingType : Enum {
    public byte value__;
    public static ProfilingType Performance;
    public static ProfilingType Timeline;
}
public class JetBrains.Profiler.ProfilingSessions.Sessions.SessionDirectoryDoesNotExistException : SessionStartProfilingException {
}
public class JetBrains.Profiler.ProfilingSessions.Sessions.SessionNoWritePermissionsException : SessionStartProfilingException {
}
public class JetBrains.Profiler.ProfilingSessions.Sessions.SessionsCollectionStub : object {
    [CompilerGeneratedAttribute]
private ICollectionEvents`1<IProfilingSession> <ActiveSessions>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <HasProfilingSession>k__BackingField;
    public ICollectionEvents`1<IProfilingSession> ActiveSessions { get; }
    public IDataProvider`1<bool> HasProfilingSession { get; }
    [CompilerGeneratedAttribute]
public sealed virtual ICollectionEvents`1<IProfilingSession> get_ActiveSessions();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<bool> get_HasProfilingSession();
    public void OnSessionStarted(IProfilingSession session);
    public void OnSessionFinished(IProfilingSession session);
}
public abstract class JetBrains.Profiler.ProfilingSessions.Sessions.SessionStartProfilingException : Exception {
}
public class JetBrains.Profiler.ProfilingSessions.Sessions.UIComponents : ValueType {
    [CompilerGeneratedAttribute]
private ILauncherUI <LauncherUI>k__BackingField;
    [CompilerGeneratedAttribute]
private IHostUI <HostUI>k__BackingField;
    [NotNullAttribute]
public ILauncherUI LauncherUI { get; }
    [NotNullAttribute]
public IHostUI HostUI { get; }
    public UIComponents(ILauncherUI launcherUI, IHostUI hostUI);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ILauncherUI get_LauncherUI();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IHostUI get_HostUI();
}
[ShellComponentAttribute("10")]
public class JetBrains.Profiler.ProfilingSessions.ShellComponents.RecentSnapshots.LiveCollection.RecentSnapshotsCollection : object {
    private static ILogger ourLogger;
    private static ReadonlyToken ourReadonlyToken;
    private Lifetime myLifetime;
    private Dictionary`2<string, ILiveRecentSnapshot> myAllSnapshots;
    private ListEvents`1<ILiveRecentSnapshot> mySnapshots;
    private Dictionary`2<string, ILiveRecentSnapshot> mySnapshotsLookup;
    private ListEvents`1<ILiveRecentSnapshot> myTempSnapshots;
    private Dictionary`2<string, ILiveRecentSnapshot> myTempSnapshotsLookup;
    private LiveSettingsRecentSnapshotsStorage mySnapshotsStorage;
    private ISnapshotUtils mySnapshotUtils;
    private IThreading myThreading;
    private bool myIsInitializeForced;
    public ICollectionEvents`1<ILiveRecentSnapshot> TempSnapshots { get; }
    public ICollectionEvents`1<ILiveRecentSnapshot> Snapshots { get; }
    public RecentSnapshotsCollection(Lifetime lifetime, IThreading threading, LiveSettingsRecentSnapshotsStorage snapshotsStorage, ISnapshotUtils snapshotUtils, IIsApplicationActiveState applicationActiveState);
    private static RecentSnapshotsCollection();
    public sealed virtual ICollectionEvents`1<ILiveRecentSnapshot> get_TempSnapshots();
    public sealed virtual ICollectionEvents`1<ILiveRecentSnapshot> get_Snapshots();
    public sealed virtual Task ForceInitializeAsync();
    private void LoadSnapshots();
    private void OnSnapshotsChanged(RecentSnapshotStorageChange args);
    public sealed virtual void RefreshSnapshot(IRecentSnapshot snapshot);
    public sealed virtual bool TryRemoveSnapshot(IRecentSnapshot snapshot, bool removeFromDisk, bool throwOnFail);
    public sealed virtual bool TryRenameSnapshot(IRecentSnapshot snapshot, FileSystemPath newIndexFileName, bool throwOnFail);
    public sealed virtual bool TrySetSnapshotAsSaved(IRecentSnapshot tempSnapshot, FileSystemPath savedSnapshotPath, bool throwOnFail);
    private void ProcessAddedSnapshot(ILiveRecentSnapshot snapshot);
    private void ProcessChangedSnapshot(IRecentSnapshot snapshotInfo);
    private void ProcessRemovedSnapshot(string snapshotId);
    private bool TryRemoveSnapshotFiles(FileSystemPath indexFile);
    [CompilerGeneratedAttribute]
private void <.ctor>b__12_0(bool isActive);
    [CompilerGeneratedAttribute]
private void <ProcessChangedSnapshot>g__Process|25_0(IRecentSnapshot recentSnapshotInfo, bool shouldBeAdded, bool shouldBeRemoved, ListEvents`1<ILiveRecentSnapshot> snapshots, Dictionary`2<string, ILiveRecentSnapshot> snapshotsLookup);
}
[ShellComponentAttribute("10")]
public class JetBrains.Profiler.ProfilingSessions.ShellComponents.RecentSnapshots.LiveCollection.TempStorageCleanupComponent : object {
    private ILogger myLogger;
    public TempStorageCleanupComponent(Lifetime lifetime, ISnapshotsSettingsProvider settingsProvider, IRecentSnapshotsCollection recentSnapshotsCollection);
    public static void DeleteExpiredSnapshots(IRecentSnapshotsCollection recentSnapshotsCollection, ISnapshotsSettingsProvider snapshotsSettingsProvider, ILogger logger);
    private static void DeleteTemporarySnapshots(IEnumerable`1<IRecentSnapshot> snapshotsToDelete, IRecentSnapshotsCollection recentSnapshotsCollection, ILogger logger);
}
[ZoneMarkerAttribute]
public class JetBrains.Profiler.ProfilingSessions.ShellComponents.RecentSnapshots.LiveCollection.ZoneMarker : object {
}
[ShellComponentAttribute("16")]
public class JetBrains.Profiler.ProfilingSessions.ShellComponents.RecentSnapshots.Storage.ConfigurationDeserializer : object {
    private ILogger myLogger;
    [NotNullAttribute]
private IHostXmlResurrector myHostXmlResurrector;
    public ConfigurationDeserializer(ILogger logger, IHostXmlResurrector hostXmlResurrector);
    [CanBeNullAttribute]
public ProfileConfiguration TryDeserializeProfileConfiguration(string xml);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Profiler.ProfilingSessions.ShellComponents.RecentSnapshots.Storage.LiveSettingsRecentSnapshotsStorage : object {
    private static string ModelFileRelativePath;
    private static ReadonlyToken ourReadonlyToken;
    private Lifetime myLifetime;
    private ILogger myLogger;
    private IThreading myThreading;
    private ConfigurationDeserializer myConfigurationDeserializer;
    private ISnapshotsSettingsProvider myStorageSettings;
    private SettingsFileLive mySnapshotsLiveFile;
    private IRemoteInstanceManager myRemoteInstancesManager;
    private MultipleSnapshotViewersTracker myViewersTracker;
    private ISignal`1<RecentSnapshotStorageChange> myChangedSignal;
    public ISignal`1<RecentSnapshotStorageChange> Changed { get; }
    public LiveSettingsRecentSnapshotsStorage(Lifetime lifetime, HostInfo hostInfo, ISettingsFactory settingsFactory, ILogger logger, IThreading threading, ConfigurationDeserializer configurationDeserializer, IRemoteInstanceManager remoteInstancesManager, ISnapshotsSettingsProvider storageSettings);
    private static LiveSettingsRecentSnapshotsStorage();
    public ISignal`1<RecentSnapshotStorageChange> get_Changed();
    private ISignal`1<RecentSnapshotStorageChange> InitializeChangeTracking();
    public sealed virtual IEnumerable`1<ILiveRecentSnapshot> LoadStoredSnapshots();
    public sealed virtual bool ContainsSnapshot(FileSystemPath snapshotPath);
    private bool ContainsSnapshotById(string snapshotId);
    public sealed virtual IRecentSnapshot AddSnapshot(FileSystemPath snapshotPath, string snapshotName, RecentSnapshotInfo recentSnapshotInfo, ProfileConfiguration profileConfiguration);
    private sealed virtual override void JetBrains.Common.Util.Snapshot.Recent.IRecentSnapshotsLightweightStorage.AddOrUpdateSnapshot(FileSystemPath snapshotPath, IRecentSnapshotInfoReader reader, bool isTemporary, string name, Nullable`1<DateTime> creationDate, Nullable`1<DateTime> lastOpenedDate, FileSystemPath unpackedSnapshotPath);
    public sealed virtual bool TryHideSnapshotAndMarkRemoved(IRecentSnapshot snapshot);
    public sealed virtual bool TryRemoveSnapshot(IRecentSnapshot snapshot);
    public sealed virtual bool TryRenameSnapshot(IRecentSnapshot snapshot, FileSystemPath newIndexFilePath, string newName);
    public sealed virtual bool TryLoadReadonlySnapshot(FileSystemPath snapshotPath, IRecentSnapshot& recentSnapshot);
    public sealed virtual bool TryLoadLiveSnapshot(Lifetime snapshotLifetime, FileSystemPath snapshotPath, ILiveRecentSnapshot& recentSnapshot);
    internal bool TryLoadLiveSnapshotById(Lifetime snapshotLifetime, string snapshotId, ILiveRecentSnapshot& recentSnapshot);
    public sealed virtual bool TrySetSnapshotAsSaved(IRecentSnapshot tempSnapshot, FileSystemPath savedSnapshotPath);
    public void EnqueueRefreshSnapshot(IRecentSnapshot snapshot);
    private RecentSnapshotSettingsKey AddSnapshot(FileSystemPath snapshotPath, string name, RecentSnapshotInfo recentSnapshotInfo, bool isTemporary, Nullable`1<DateTime> creationDate, Nullable`1<DateTime> lastOpenedDate, FileSystemPath unpackedSnapshotPath);
    private void UpdateSnapshotProperties(FileSystemPath snapshotPath, Nullable`1<DateTime> lastOpenedDate, FileSystemPath unpackedSnapshotPath);
    private bool TryLoadSnapshotSettings(FileSystemPath snapshotPath, IIndexedKey`1& snapshotKey, RecentSnapshotSettingsKey& snapshotEntry);
    private bool TryLoadSnapshotSettingsById(string snapshotId, IIndexedKey`1& snapshotKey, RecentSnapshotSettingsKey& snapshotEntry);
    private LiveRecentSnapshot TryReadLiveSnapshot(IIndexedKey`1<RecentSnapshotSettingsKey> indexedKey, RecentSnapshotSettingsKey settingsKey, ProfileConfiguration configuration);
    private RecentSnapshot ReadSnapshot(RecentSnapshotSettingsKey settingsKey, ProfileConfiguration configuration);
    private LiveRecentSnapshot ReadLiveSnapshot(Lifetime snapshotLifetime, IIndexedKey`1<RecentSnapshotSettingsKey> indexedKey, RecentSnapshotSettingsKey settingsKey, ProfileConfiguration configuration);
    private IEnumerable`1<string> ReadModules(RecentSnapshotSettingsKey settingsKey);
    [IteratorStateMachineAttribute("JetBrains.Profiler.ProfilingSessions.ShellComponents.RecentSnapshots.Storage.LiveSettingsRecentSnapshotsStorage/<ReadModules>d__36")]
private IEnumerable`1<string> ReadModules(string recentSnapshotId);
    [NullableContextAttribute("2")]
private bool IsTemporary(FileSystemPath filePath, RecentSnapshotState state);
    private bool IsFileInFolder(FileSystemPath filePath, FileSystemPath folderPath);
    private bool HasInterestedChange(SettingsKeyInstance arg);
    private ProfileConfiguration TryReadProfileConfiguration(string xml);
    private static FileSystemPath GetModelFilePath(HostInfo hostInfo, string fileName, string namePrefix);
    private void FixRecentSnapshotId(RecentSnapshotSettingsKey snapshotSettingsKey);
    private bool CleanupRecentSnapshot(IIndexedKey`1<RecentSnapshotSettingsKey> indexedKey, RecentSnapshotSettingsKey entry);
    private void CleanupRecentSnapshots(List`1<ValueTuple`3<IIndexedKey`1<RecentSnapshotSettingsKey>, RecentSnapshotSettingsKey, ProfileConfiguration>> snapshotInfos, HashSet`1<string> recentSnapshotIndexFilePathSettingsKeys);
    private static void FixUnpackedIndexFilePath(IIndexedKey`1<RecentSnapshotSettingsKey> snapshotKey, RecentSnapshotSettingsKey settingsKey);
    private void FixModules(IIndexedKey`1<RecentSnapshotSettingsKey> snapshotKey, RecentSnapshotSettingsKey settingsKey);
    private void FixModules2(RecentSnapshotSettingsKey snapshotEntry);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <InitializeChangeTracking>b__14_0(SettingsStoreChangeArgs args);
    [CompilerGeneratedAttribute]
private void <AddSnapshot>b__28_0();
}
[SettingsIndexedKeyAttribute("System.Reflection.Missing", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "RecentSnapshotIndexFilePathIdMappingSettingDescription", "System.String")]
public class JetBrains.Profiler.ProfilingSessions.ShellComponents.RecentSnapshots.Storage.RecentSnapshotIndexFilePathSettingsKey : object {
    [CompilerGeneratedAttribute]
private string <RecentSnapshotId>k__BackingField;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "IdSettingDescription")]
public string RecentSnapshotId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RecentSnapshotId();
    [CompilerGeneratedAttribute]
public void set_RecentSnapshotId(string value);
}
[ObsoleteAttribute("Use RecentSnapshotModulesKey2 instead.")]
[SettingsIndexedKeyAttribute("JetBrains.Profiler.ProfilingSessions.ShellComponents.RecentSnapshots.Storage.RecentSnapshotSettingsKey", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "RecentSnapshotModuleInfoSettingDescription", "JetBrains.Application.Settings.GuidIndex")]
public class JetBrains.Profiler.ProfilingSessions.ShellComponents.RecentSnapshots.Storage.RecentSnapshotModulesKey : object {
    [CompilerGeneratedAttribute]
private string <Module>k__BackingField;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "ModuleSettingDescription")]
public string Module { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Module();
    [CompilerGeneratedAttribute]
public void set_Module(string value);
}
[SettingsIndexedKeyAttribute("JetBrains.Profiler.ProfilingSessions.ShellComponents.RecentSnapshots.Storage.RecentSnapshotSettingsKey", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "RecentSnapshotModuleInfoSettingDescription", "JetBrains.Application.Settings.GuidIndex")]
public class JetBrains.Profiler.ProfilingSessions.ShellComponents.RecentSnapshots.Storage.RecentSnapshotModulesKey2 : object {
    [CompilerGeneratedAttribute]
private string <Modules>k__BackingField;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "ModuleSettingDescription")]
public string Modules { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Modules();
    [CompilerGeneratedAttribute]
public void set_Modules(string value);
}
[SettingsIndexedKeyAttribute("System.Reflection.Missing", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "RecentSnapshotInfoSettingDescription", "System.String")]
public class JetBrains.Profiler.ProfilingSessions.ShellComponents.RecentSnapshots.Storage.RecentSnapshotSettingsKey : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <IndexFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFavorite>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastAccessDateUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EndTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private RecentSnapshotState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowInList>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldBeRemoved>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProcessName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandLine>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigurationXml>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Modules>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <UnpackedIndexFilePath>k__BackingField;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "IdSettingDescription")]
public string Id { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "IndexFilePathSettingDescription")]
public FileSystemPath IndexFilePath { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "NameSettingDescription")]
public string Name { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "IsFavoriteSettingDescription")]
public bool IsFavorite { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "LastAccessDateUtcSettingDescription")]
public DateTime LastAccessDateUtc { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "StartTimeUtcSettingDescription")]
public DateTime StartTimeUtc { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "EndTimeUtcSettingDescription")]
public DateTime EndTimeUtc { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "StateSettingDescription")]
public RecentSnapshotState State { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "ShowInListSettingDescription")]
public bool ShowInList { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "ShouldBeRemovedSettingDescription")]
public bool ShouldBeRemoved { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "ProcessNameSettingDescription")]
public string ProcessName { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "CommandLineSettingDescription")]
public string CommandLine { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "ConfigurationXmlSettingDescription")]
public string ConfigurationXml { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "ModulesSettingDescription")]
[ObsoleteAttribute("Use RecentSnapshotModulesKey indexed key")]
public string Modules { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Profiler.ProfilingSessions.Resources.Strings", "UnpackedIndexFilePathSettingDescription")]
public FileSystemPath UnpackedIndexFilePath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public FileSystemPath get_IndexFilePath();
    [CompilerGeneratedAttribute]
public void set_IndexFilePath(FileSystemPath value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_IsFavorite();
    [CompilerGeneratedAttribute]
public void set_IsFavorite(bool value);
    [CompilerGeneratedAttribute]
public DateTime get_LastAccessDateUtc();
    [CompilerGeneratedAttribute]
public void set_LastAccessDateUtc(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_StartTimeUtc();
    [CompilerGeneratedAttribute]
public void set_StartTimeUtc(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_EndTimeUtc();
    [CompilerGeneratedAttribute]
public void set_EndTimeUtc(DateTime value);
    [CompilerGeneratedAttribute]
public RecentSnapshotState get_State();
    [CompilerGeneratedAttribute]
public void set_State(RecentSnapshotState value);
    [CompilerGeneratedAttribute]
public bool get_ShowInList();
    [CompilerGeneratedAttribute]
public void set_ShowInList(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShouldBeRemoved();
    [CompilerGeneratedAttribute]
public void set_ShouldBeRemoved(bool value);
    [CompilerGeneratedAttribute]
public string get_ProcessName();
    [CompilerGeneratedAttribute]
public void set_ProcessName(string value);
    [CompilerGeneratedAttribute]
public string get_CommandLine();
    [CompilerGeneratedAttribute]
public void set_CommandLine(string value);
    [CompilerGeneratedAttribute]
public string get_ConfigurationXml();
    [CompilerGeneratedAttribute]
public void set_ConfigurationXml(string value);
    [CompilerGeneratedAttribute]
public string get_Modules();
    [CompilerGeneratedAttribute]
public void set_Modules(string value);
    [CompilerGeneratedAttribute]
public FileSystemPath get_UnpackedIndexFilePath();
    [CompilerGeneratedAttribute]
public void set_UnpackedIndexFilePath(FileSystemPath value);
}
public enum JetBrains.Profiler.ProfilingSessions.ShellComponents.RecentSnapshots.Storage.RecentSnapshotState : Enum {
    public int value__;
    public static RecentSnapshotState None;
    public static RecentSnapshotState Temporary;
    public static RecentSnapshotState Saved;
}
public class JetBrains.Profiler.ProfilingSessions.ShellComponents.RecentSnapshots.Storage.RecentSnapshotStorageChange : object {
    public static RecentSnapshotStorageChange Empty;
    [CompilerGeneratedAttribute]
private IEnumerable`1<RecentSnapshot> <Changed>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<LiveRecentSnapshot> <Added>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Removed>k__BackingField;
    public IEnumerable`1<RecentSnapshot> Changed { get; }
    public IEnumerable`1<LiveRecentSnapshot> Added { get; }
    public IEnumerable`1<string> Removed { get; }
    public RecentSnapshotStorageChange(IEnumerable`1<RecentSnapshot> changed, IEnumerable`1<LiveRecentSnapshot> added, IEnumerable`1<string> removed);
    private static RecentSnapshotStorageChange();
    [CompilerGeneratedAttribute]
public IEnumerable`1<RecentSnapshot> get_Changed();
    [CompilerGeneratedAttribute]
public IEnumerable`1<LiveRecentSnapshot> get_Added();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Removed();
    public bool IsEmpty();
}
[ZoneMarkerAttribute]
public class JetBrains.Profiler.ProfilingSessions.ShellComponents.RecentSnapshots.Storage.ZoneMarker : object {
}
[ShellComponentAttribute("16")]
public class JetBrains.Profiler.ProfilingSessions.ShellComponents.Sessions.BaseAppIconExtractorComponent : object {
    public virtual ImageSource GetAppIcon(FileSystemPath path);
}
[ShellComponentAttribute("0")]
public class JetBrains.Profiler.ProfilingSessions.ShellComponents.Sessions.CurrentSessionTrackerBuilder : object {
    private ISessionErrorsHandler mySessionErrorsHandler;
    private IRecentSnapshotsStorage mySnapshotsCollection;
    private IRecentSnapshotInfoReader myRecentSnapshotInfoReader;
    private ISnapshotsSettingsProvider mySettingsProvider;
    [NotNullAttribute]
private ISnapshotUtils mySnapshotUtils;
    public CurrentSessionTrackerBuilder(ISessionErrorsHandler sessionErrorsHandler, IRecentSnapshotsStorage snapshotsCollection, IRecentSnapshotInfoReader recentSnapshotInfoReader, ISnapshotsSettingsProvider settingsProvider, ISnapshotUtils snapshotUtils);
    public CurrentSessionTracker Build(FileSystemPath sessionFolder);
}
[ShellComponentAttribute("0")]
public class JetBrains.Profiler.ProfilingSessions.ShellComponents.Sessions.DotTraceSessionProfilingViewers : object {
    [NotNullAttribute]
private IThreading myThreading;
    [NotNullAttribute]
private SessionStorage mySessionStorage;
    [NotNullAttribute]
private SessionsCollection mySessionsCollection;
    [NotNullAttribute]
private ISessionErrorsHandler mySessionErrorsHandler;
    [NotNullAttribute]
private IResultsHandlersModifier myModifier;
    public DotTraceSessionProfilingViewers(IThreading threading, SessionStorage sessionStorage, SessionsCollection sessionsCollection, ISessionErrorsHandler sessionErrorsHandler, IResultsHandlersModifier modifier);
    public ICustomProfilingViewer CustomViewerToHandlersAdapter(Lifetime lifetime, IProfilerResultsHandler[] handlers);
    public IProfilerResultsHandler SessionController(Lifetime lifetime, ProfileInstanceOptions options, ICurrentSessionController currentSessionController, Action`1<IRecentSnapshot> openSnapshot);
    public IProfilerResultsHandler ErrorsHandler(Lifetime lifetime, LogKeeper logKeeper, FileSystemPath sessionFolder);
    [NotNullAttribute]
public FileSystemPath CreateSessionFolder();
    public ICustomProfilingViewer ProfilingLifetime(Lifetime& lifetime);
    public ICustomProfilingViewer ProfilingLifetime(Lifetime outerLifetime, Lifetime& lifetime);
}
[ShellComponentAttribute("10")]
public class JetBrains.Profiler.ProfilingSessions.ShellComponents.Sessions.ListOfFilesToPreventConnecting : object {
    private static HashSet`1<string> ourFilteredProcesses;
    private static HashSet`1<string> ourInternalOnlyFilteredProcesses;
    private Lazy`1<List`1<string>> myLazyFullPaths;
    public IEnumerable`1<string> FullPaths { get; }
    public ListOfFilesToPreventConnecting(OpenSnapshotUtil openSnapshotUtil, ProductConfigurations configs);
    private static ListOfFilesToPreventConnecting();
    public IEnumerable`1<string> get_FullPaths();
    private static void AddExecutables2List(List`1<string> files, FileSystemPath folder, HashSet`1<string> processes);
}
[ShellComponentAttribute("16")]
public class JetBrains.Profiler.ProfilingSessions.ShellComponents.Sessions.MessageBoxErrorsHandler : object {
    private IWindowBranding myWindowBranding;
    public MessageBoxErrorsHandler(IWindowBranding windowBranding);
    private static string ExtractMessage(Exception exception);
    public sealed virtual void FailedProfile(Exception exception);
    protected virtual void OnStartProfilingFailed(string message);
    public sealed virtual void MoveToStorageFailed(string originalPath);
}
[ShellComponentAttribute("16")]
public class JetBrains.Profiler.ProfilingSessions.ShellComponents.Sessions.PerformElevation : object {
    public sealed virtual ProfileConfiguration IfNecessary(ProfileConfiguration config);
}
[ShellComponentAttribute("16")]
public class JetBrains.Profiler.ProfilingSessions.ShellComponents.Sessions.ProfilingInstanceFactory : object {
    private ILogger myLogger;
    private IThreading myThreading;
    private IHostManager myHostManager;
    [NotNullAttribute]
private IUIComponentsBuilder myUIComponentsBuilder;
    [NotNullAttribute]
private IResultsHandlersModifier myModifier;
    [NotNullAttribute]
private IProfilingSessionCollector myProfilingSessionCollector;
    public ProfilingInstanceFactory(IThreading threading, IHostManager hostManager, IUIComponentsBuilder uiComponentsBuilder, IProfilingSessionCollector profilingSessionCollector, IResultsHandlersModifier modifier);
    [NotNullAttribute]
public IMeasureProfilingInstance StartProfile(ProfileConfiguration config, ICustomProfilingViewer[] customProfilingViewers);
}
[ShellComponentAttribute("16")]
public class JetBrains.Profiler.ProfilingSessions.ShellComponents.Sessions.SessionResultsHandlersModifier : ResultsHandlersModifierBase {
    private static Dictionary`2<HResults, string> ourOverridenMessages;
    private static SessionResultsHandlersModifier();
}
[ShellComponentAttribute("16")]
public class JetBrains.Profiler.ProfilingSessions.ShellComponents.Sessions.SessionsCollection : object {
    private IThreading myThreading;
    [CompilerGeneratedAttribute]
private ICollectionEvents`1<IProfilingSession> <ActiveSessions>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <HasProfilingSession>k__BackingField;
    public ICollectionEvents`1<IProfilingSession> ActiveSessions { get; }
    public IDataProvider`1<bool> HasProfilingSession { get; }
    public SessionsCollection(Lifetime lifetime, IThreading threading);
    [CompilerGeneratedAttribute]
public sealed virtual ICollectionEvents`1<IProfilingSession> get_ActiveSessions();
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<bool> get_HasProfilingSession();
    public void OnSessionStarted(IProfilingSession session);
    public void OnSessionFinished(IProfilingSession session);
}
[ShellComponentAttribute("10")]
public class JetBrains.Profiler.ProfilingSessions.ShellComponents.Sessions.SessionStorage : object {
    private static string SessionsTempFolder;
    private ISnapshotsSettingsProvider mySettingsProvider;
    [CompilerGeneratedAttribute]
private IProperty`1<FileSystemPath> <SnapshotStorageFolder>k__BackingField;
    public IProperty`1<FileSystemPath> SnapshotStorageFolder { get; }
    public SessionStorage(ISnapshotsSettingsProvider settingsProvider);
    [CompilerGeneratedAttribute]
public IProperty`1<FileSystemPath> get_SnapshotStorageFolder();
    public IEnumerable`1<FileSystemPath> GetAllStorePaths();
    [NotNullAttribute]
public FileSystemPath CreateSessionFolder(ISessionErrorsHandler errorsHandler);
}
[ShellComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.Profiler.ProfilingSessions.ShellComponents.Sessions.UIComponentsBuilderBase : object {
    public virtual UIComponents Build();
}
[ZoneMarkerAttribute]
public class JetBrains.Profiler.ProfilingSessions.ShellComponents.Sessions.ZoneMarker : object {
}
[ExtensionAttribute]
public static class JetBrains.Profiler.ProfilingSessions.Statistics.SessionStatisticEx : object {
    [ExtensionAttribute]
[LocalizableAttribute("False")]
public static string GetName(ProfilingType profilingType);
    [ExtensionAttribute]
[LocalizableAttribute("False")]
public static string GetName(HostType hostType);
    [ExtensionAttribute]
[LocalizableAttribute("False")]
public static string GetName(MeterKind profilingType);
    [ExtensionAttribute]
[LocalizableAttribute("False")]
public static string GetName(MeasureType profilingType);
}
public class JetBrains.Profiler.ProfilingSessions.Statistics.SnapshotOpenReason : object {
    public static SnapshotOpenReason Unknown;
    public static SnapshotOpenReason AbOpenDialog;
    public static SnapshotOpenReason AbDragNDrop;
    public static SnapshotOpenReason AbFromSession;
    public static SnapshotOpenReason AbAfterProfiling;
    public static SnapshotOpenReason VSSnapshotList;
    public static SnapshotOpenReason VSAfterProfiling;
    public static SnapshotOpenReason VSOpenDialog;
    public static SnapshotOpenReason VS;
    public static SnapshotOpenReason RiderSnapshotList;
    public static SnapshotOpenReason RiderOpenFromController;
    public static SnapshotOpenReason RiderOpenDialog;
    public static SnapshotOpenReason Rider;
    public static SnapshotOpenReason ViewerOpenDialog;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    private static Dictionary`2<string, SnapshotOpenReason> ourCodeToObj;
    private static ILogger ourLog;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    private string Code { get; }
    private SnapshotOpenReason(string code);
    [CompilerGeneratedAttribute]
protected SnapshotOpenReason(SnapshotOpenReason original);
    private static SnapshotOpenReason();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
private string get_Code();
    public virtual string ToString();
    public static SnapshotOpenReason Parse(string code);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SnapshotOpenReason left, SnapshotOpenReason right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SnapshotOpenReason left, SnapshotOpenReason right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(SnapshotOpenReason other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual SnapshotOpenReason <Clone>$();
}
public static class JetBrains.Profiler.ProfilingSessions.Util.ApplicationKindHelper : object {
    public static IconId GetSmallIcon(ApplicationKind applicationKind);
    public static IconId GetIcon(ApplicationKind applicationKind);
    public static string GetName(ApplicationKind applicationKind);
}
public static class JetBrains.Profiler.ProfilingSessions.Util.DateTimeUtil : object {
    private static CultureInfo myCulture;
    private static string myFormat;
    private static DateTimeUtil();
    public static string DateToString(DateTime dateTime);
    public static DateTime StringToDate(string str);
}
public static class JetBrains.Profiler.ProfilingSessions.Util.DirectoryUtil : object {
    public static bool HasWritePermissionOnDir(string path);
}
public static class JetBrains.Profiler.ProfilingSessions.Util.SessionsUtil : object {
    public static FileSystemPath CreateSessionDirectory(FileSystemPath storage);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
