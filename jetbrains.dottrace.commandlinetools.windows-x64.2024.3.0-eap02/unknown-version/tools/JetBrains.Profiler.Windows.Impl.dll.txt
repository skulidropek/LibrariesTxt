internal static class JetBrains.Profiler.BuildScript.ProfilerNativeFiles : object {
    [NotNullAttribute]
public static RelativePath GetBenchmarks(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static RelativePath GetCoreTransparent(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static RelativePath GetCore(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static RelativePath GetCoreApi(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static RelativePath GetAttachHelper(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static RelativePath GetProcessHelper(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static RelativePath GetWinRTHelper(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static RelativePath GetWinRTFakeDebugger(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static RelativePath GetPdbServer(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static RelativePath GetTests(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static RelativePath GetRpcStub(JetRuntimeId runtimeId, bool debug);
}
internal static class JetBrains.Profiler.BuildScript.ProfilerNativeNames : object {
    public static string GetBenchmarks(JetPlatform platform);
    public static string GetCore(JetPlatform platform);
    public static string GetCoreApi(JetPlatform platform);
    public static string GetCoreTransparent(JetPlatform platform);
    public static string GetAttachHelper(JetPlatform platform);
    public static string GetProcessHelper(JetPlatform platform);
    public static string GetWinRTHelper(JetPlatform platform);
    public static string GetWinRTFakeDebugger(JetPlatform platform);
    public static string GetPdbServer(JetPlatform platform);
    public static string GetTests(JetPlatform platform);
    public static string GetRpcStub(JetPlatform platform);
}
internal static class JetBrains.Profiler.BuildScript.ProfilerNativeTargets : object {
    private static string Prefix;
    public static string Benchmarks;
    public static string Core;
    public static string CoreApi;
    public static string CoreTransparent;
    public static string AttachHelper;
    public static string ProcessHelper;
    public static string WinRTHelper;
    public static string WinRTFakeDebugger;
    public static string PdbServer;
    public static string Tests;
    public static string RpcStub;
}
public class JetBrains.Profiler.Windows.BuildScript.RequestAppConfigInstall : object {
    [BuildStepAttribute]
public static InstallAppConfig[] Run(AllAssembliesOnEverything allass, ProductHomeDirArtifact homedir);
}
[ZoneMarkerAttribute]
[ArgumentFactoryAttribute("100000", "16")]
internal class JetBrains.Profiler.Windows.Impl.Argument.AttachArgumentFactory : ArgumentFactoryBase`1<AttachArgument> {
}
[ZoneMarkerAttribute]
[ArgumentFactoryAttribute("1500", "16")]
internal class JetBrains.Profiler.Windows.Impl.Argument.CoreClrArgumentFactory : ArgumentFactoryBase`1<CoreClrArgument> {
}
[ZoneMarkerAttribute]
[ArgumentFactoryAttribute("90000", "16")]
internal class JetBrains.Profiler.Windows.Impl.Argument.EverythingArgumentFactory : ArgumentFactoryBase`1<EverythingArgument> {
}
[ZoneMarkerAttribute]
[ArgumentFactoryAttribute("90000", "16")]
internal class JetBrains.Profiler.Windows.Impl.Argument.EverythingTransparentArgumentFactory : ArgumentFactoryBase`1<EverythingTransparentArgument> {
}
[ZoneMarkerAttribute]
[ArgumentFactoryAttribute("5000", "16")]
public class JetBrains.Profiler.Windows.Impl.Argument.IISArgumentFactory : ArgumentFactoryBase`1<IISArgument> {
}
[ZoneMarkerAttribute]
[ArgumentFactoryAttribute("5500", "16")]
internal class JetBrains.Profiler.Windows.Impl.Argument.IISExpressArgumentFactory : ArgumentFactoryBase`1<IISExpressArgument> {
}
[ZoneMarkerAttribute]
[ArgumentFactoryAttribute("20000", "16")]
internal class JetBrains.Profiler.Windows.Impl.Argument.MetroArgumentFactory : ArgumentFactoryBase`1<MetroArgument> {
}
[ZoneMarkerAttribute]
[ArgumentFactoryAttribute("90000", "16")]
internal class JetBrains.Profiler.Windows.Impl.Argument.MonoArgumentFactory : ArgumentFactoryBase`1<MonoArgument> {
}
[ZoneMarkerAttribute]
[ArgumentFactoryAttribute("110000", "16")]
internal class JetBrains.Profiler.Windows.Impl.Argument.NettraceArgumentFactory : ArgumentFactoryBase`1<NettraceArgument> {
}
[ZoneMarkerAttribute]
[ArgumentFactoryAttribute("20000", "16")]
internal class JetBrains.Profiler.Windows.Impl.Argument.SilverlightArgumentFactory : ArgumentFactoryBase`1<SilverlightArgument> {
}
[ZoneMarkerAttribute]
[ArgumentFactoryAttribute("1000", "16")]
internal class JetBrains.Profiler.Windows.Impl.Argument.StandaloneArgumentFactory : ArgumentFactoryBase`1<StandaloneArgument> {
}
[ZoneMarkerAttribute]
[ArgumentFactoryAttribute("90000", "16")]
internal class JetBrains.Profiler.Windows.Impl.Argument.UnityArgumentFactory : ArgumentFactoryBase`1<UnityArgument> {
}
[ZoneMarkerAttribute]
[ArgumentFactoryAttribute("6100", "16")]
internal class JetBrains.Profiler.Windows.Impl.Argument.WcfHostArgumentFactory : ArgumentFactoryBase`1<WcfHostArgument> {
}
[ZoneMarkerAttribute]
[ArgumentFactoryAttribute("6000", "16")]
internal class JetBrains.Profiler.Windows.Impl.Argument.WindowsServiceArgumentFactory : ArgumentFactoryBase`1<WindowsServiceArgument> {
}
internal static class JetBrains.Profiler.Windows.Impl.ArgumentsUtil : object {
    [NotNullAttribute]
public static String[] BuildPdbServer(string pipeName, string eventName, string logFile, Nullable`1<PdbServerLogMask> pdbServerLogMask, string symSrvPath);
    [NotNullAttribute]
public static String[] BuildDevelopmentServer(string physicalPath, string virtualPath, Nullable`1<ushort> port);
    [NotNullAttribute]
public static String[] BuildIISExpressArgs_Config(string configFilePath, string site, Nullable`1<UInt32> siteId, Nullable`1<bool> sysTray);
    [NotNullAttribute]
public static String[] BuildIISExpressArgs_ApplicationPath(string applicationPath, Nullable`1<ushort> port, Version2 runtimeVersion, Nullable`1<bool> sysTray);
    [NotNullAttribute]
public static String[] BuildWcfHost(string libraryPath, string configPath, string clientPath, string clientArgs);
}
internal abstract class JetBrains.Profiler.Windows.Impl.BaseCoreFilesManager : object {
    protected static ILogger Logger;
    [NotNullAttribute]
protected EffectiveCoreDirs CoreDirs;
    protected int CoreProcessId;
    [NotNullAttribute]
protected IDownloadRequests DownloadRequests;
    [NotNullAttribute]
protected SysTools SysTools;
    protected BaseCoreFilesManager(SysTools sysTools, IDownloadRequests downloadRequests, EffectiveCoreDirs coreDirs, int coreProcessId);
    private static BaseCoreFilesManager();
    public abstract virtual Tuple`2<SafeFileHandle, FileSystemPath> CreateTemporaryFile();
    public abstract virtual Tuple`3<Guid, SafeFileHandle, FileSystemPath> CreateDiagnosticFile();
    public abstract virtual Tuple`3<Guid, SafeFileHandle, FileSystemPath> CreateSnapshotFile();
    public abstract virtual Tuple`3<Guid, SafeFileHandle, FileSystemPath> CreateStreamingFile();
    public abstract virtual bool CanStartStreaming();
    public abstract virtual Tuple`2<SafeFileHandle, FileSystemPath> TakeStreaming(Guid id);
    public sealed virtual void DeleteSnapshotFile(Guid id);
    public sealed virtual void ProcessSnapshot(SnapshotIdentity snapshotIdentity, Guid indexId, Guid[] dataIds);
    public sealed virtual void ProcessCoreLog(CoreIdentity coreIdentity, string remoteLog);
}
internal class JetBrains.Profiler.Windows.Impl.Bridge : BaseBridge {
    private BridgeThread myBridgeThread;
    [CanBeNullAttribute]
private BridgeThread myBridgeThreadForNamedPipe;
    [NotNullAttribute]
public string EndPoint { get; }
    [CanBeNullAttribute]
public string EndPointForNamedPipe { get; }
    public Bridge(BaseBridgeParam param, Action`2<IListenerProxy, Lifetime> listenerInitializer, IServiceAgent`1<SysTools> profilingAgent, bool forceTcpOnWindows);
    public string get_EndPoint();
    public string get_EndPointForNamedPipe();
    public virtual void Start();
    protected virtual void Stop();
}
internal class JetBrains.Profiler.Windows.Impl.DeployResult : object {
    [CanBeNullAttribute]
public ClrActivation ClrActivation;
    [NotNullAttribute]
public UpdateEnvironmentProperty[] EnvironmentProperties;
    [CanBeNullAttribute]
public MonoActivation MonoActivation;
    [CanBeNullAttribute]
public EventPipeActivation EventPipeActivation;
    [CanBeNullAttribute]
public EtwActivation EtwActivation;
    public DeployResult(UpdateEnvironmentProperty[] environmentProperties, ClrActivation clrActivation, MonoActivation monoActivation, EventPipeActivation eventPipeActivation, EtwActivation etwActivation);
}
[ExtensionAttribute]
internal static class JetBrains.Profiler.Windows.Impl.DeployUtil : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static Tuple`2[] Deploy(Tuple`3[] descriptions, IServiceAgent`1<SysTools> agent, IProgressIndicator progressIndicator);
    [ExtensionAttribute]
[NotNullAttribute]
public static TPath WithMarker(IEnumerable`1<Tuple`2<TPath, TMarker>> descriptions, TMarker marker);
    [ExtensionAttribute]
[NotNullAttribute]
public static FileSystemPath WithMarker(IEnumerable`1<Tuple`3<FileSystemPath, RelativePath, TMarker>> descriptions, TMarker marker);
}
internal class JetBrains.Profiler.Windows.Impl.EffectiveCoreDirs : object {
    [NotNullAttribute]
public FileSystemPath DiagnosticsDir;
    [NotNullAttribute]
public FileSystemPath TemporaryDir;
    [NotNullAttribute]
public FileSystemPath SnapshotsDir;
    [NotNullAttribute]
public FileSystemPath StreamingDir;
    public EffectiveCoreDirs(FileSystemPath defaultTemporaryDir, CoreDirs coreDirs);
    public virtual string ToString();
}
[ExtensionAttribute]
internal static class JetBrains.Profiler.Windows.Impl.Features.ArgumentFactoryHelpers : object {
    private static MessageResult Do(IInfo info, Func`2<TInfo, MessageResult> func);
    [ExtensionAttribute]
public static MessageResult AlwaysSupported(IInfo info);
    [ExtensionAttribute]
public static MessageResult IsDetachSupported(IInfo info);
}
public class JetBrains.Profiler.Windows.Impl.Features.ArgumentFeatures : object {
    private IServiceAgent`1<SysTools> myAgent;
    public ArgumentFeatures(IServiceAgent`1<SysTools> agent);
    public sealed virtual MessageResult IsSupported(T features, HostCompatibilityOptions options);
}
internal class JetBrains.Profiler.Windows.Impl.Features.AttachToProcessInfoFactoryFeatures : object {
    public static AttachToProcessInfoFactoryFeatures Instance;
    private static MessageResult ourMessageResultNoPrecisionMode;
    private static MessageResult ourMessageResultNoEnableJitInlining;
    private static MessageResult ourMessageResultNoEnableTpl;
    private static MessageResult ourMessageResultNoMeasureTypeTracing;
    private static MessageResult ourMessageResultNoMeasureTypeTracingInject;
    private bool JetBrains.Profiler.Windows.Info.FactoryFeatures.IMemoryInfoFactoryFeatures.IsCollectAllocationsSupported { get; }
    private static AttachToProcessInfoFactoryFeatures();
    private sealed virtual override MessageResult JetBrains.Profiler.Features.IInfoFactoryFeatures.IsProfileSupported(IInfo info);
    private sealed virtual override MessageResult JetBrains.Profiler.Features.IInfoFactoryFeatures.IsDetachSupported(IInfo info);
    private sealed virtual override bool JetBrains.Profiler.Windows.Info.FactoryFeatures.IMemoryInfoFactoryFeatures.get_IsCollectAllocationsSupported();
    private sealed virtual override MessageResult JetBrains.Profiler.Windows.Info.FactoryFeatures.IPerformanceInfoFactoryFeatures.IsMeasureTypeSupported(MeasureType measureType);
    private sealed virtual override MessageResult JetBrains.Profiler.Windows.Info.FactoryFeatures.IPerformanceInfoFactoryFeatures.IsPrecisionModeSupported(MeasureType measureType);
    private sealed virtual override MessageResult JetBrains.Profiler.Windows.Info.FactoryFeatures.IPerformanceInfoFactoryFeatures.IsEnableJitInliningSupported(MeasureType measureType);
    private sealed virtual override MessageResult JetBrains.Profiler.Windows.Info.FactoryFeatures.IPerformanceInfoFactoryFeatures.IsEnableTplSupported(MeasureType measureType);
}
internal class JetBrains.Profiler.Windows.Impl.Features.AttachToProcessInfoFeatures : object {
    private static MessageResult ourMessageResultNone;
    private static MessageResult ourMessageResultNoThreadCycleTime;
    private static MessageResult ourMessageResultNoRdtsc;
    private static MessageResult ourMessageResultNoMeasureTypeTracing;
    private static MessageResult ourMessageResultNoMeasureTypeTracingInject;
    private static MessageResult ourMessageResultNoEtwHost;
    private FeaturesParams myFeaturesParams;
    private IArgumentFactory myArgumentFactory;
    private IMemoryInfoFactoryFeatures JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.MemoryInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.IMemoryInfoFactoryFeatures>.FactoryFeatures { get; }
    private MemoryInfo JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.MemoryInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.IMemoryInfoFactoryFeatures>.Default { get; }
    private IPerformanceInfoFactoryFeatures JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.PerformanceInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.IPerformanceInfoFactoryFeatures>.FactoryFeatures { get; }
    private PerformanceInfo JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.PerformanceInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.IPerformanceInfoFactoryFeatures>.Default { get; }
    private ITimelineInfoFactoryFeatures JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.TimelineInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.ITimelineInfoFactoryFeatures>.FactoryFeatures { get; }
    private TimelineInfo JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.TimelineInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.ITimelineInfoFactoryFeatures>.Default { get; }
    public MessageResult IsActive { get; }
    public AttachToProcessInfoFeatures(FeaturesParams featuresParams, IArgumentFactory argumentFactory);
    private static AttachToProcessInfoFeatures();
    private sealed virtual override IMemoryInfoFactoryFeatures JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.MemoryInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.IMemoryInfoFactoryFeatures>.get_FactoryFeatures();
    private sealed virtual override MemoryInfo JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.MemoryInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.IMemoryInfoFactoryFeatures>.get_Default();
    private sealed virtual override IPerformanceInfoFactoryFeatures JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.PerformanceInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.IPerformanceInfoFactoryFeatures>.get_FactoryFeatures();
    private sealed virtual override PerformanceInfo JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.PerformanceInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.IPerformanceInfoFactoryFeatures>.get_Default();
    private sealed virtual override MessageResult JetBrains.Profiler.Windows.Info.Features.IPerformanceInfoFeatures.IsMeterKindSupported(MeasureType measureType, MeterKind meterKind);
    private sealed virtual override ITimelineInfoFactoryFeatures JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.TimelineInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.ITimelineInfoFactoryFeatures>.get_FactoryFeatures();
    private sealed virtual override TimelineInfo JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.TimelineInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.ITimelineInfoFactoryFeatures>.get_Default();
    public sealed virtual MessageResult get_IsActive();
    public sealed virtual NativeProvider GetSupportedNativeProviders();
    public sealed virtual bool ProfileNativeControlSupported();
}
internal class JetBrains.Profiler.Windows.Impl.Features.FeaturesParams : object {
    [NotNullAttribute]
public IHostParametersFactory HostParametersFactory;
    public bool IsEtwHostSupported;
    public bool IsRdtscSupported;
    public bool IsThreadCycleTimeSupported;
    public bool IsTimelineInfoSupported;
    public FeaturesParams(IHostParametersFactory hostParametersFactory, bool isRdtscSupported, bool isThreadCycleTimeSupported, bool isTimelineInfoSupported, bool isEtwHostSupported);
}
internal class JetBrains.Profiler.Windows.Impl.Features.StartProcessInfoFactoryFeatures : object {
    private bool myPerformanceIsSupported;
    public static StartProcessInfoFactoryFeatures AllTypesInstance;
    public static StartProcessInfoFactoryFeatures EmptyInstance;
    private static MessageResult ourMessageResultNoPrecisionMode;
    private static MessageResult ourMessageResultNoEnableJitInlining;
    private static MessageResult ourMessageResultNoEnableTpl;
    private bool JetBrains.Profiler.Windows.Info.FactoryFeatures.IMemoryInfoFactoryFeatures.IsCollectAllocationsSupported { get; }
    private StartProcessInfoFactoryFeatures(bool performanceIsSupported);
    private static StartProcessInfoFactoryFeatures();
    private sealed virtual override MessageResult JetBrains.Profiler.Features.IInfoFactoryFeatures.IsProfileSupported(IInfo info);
    private sealed virtual override MessageResult JetBrains.Profiler.Features.IInfoFactoryFeatures.IsDetachSupported(IInfo info);
    private sealed virtual override bool JetBrains.Profiler.Windows.Info.FactoryFeatures.IMemoryInfoFactoryFeatures.get_IsCollectAllocationsSupported();
    private sealed virtual override MessageResult JetBrains.Profiler.Windows.Info.FactoryFeatures.IPerformanceInfoFactoryFeatures.IsMeasureTypeSupported(MeasureType measureType);
    private sealed virtual override MessageResult JetBrains.Profiler.Windows.Info.FactoryFeatures.IPerformanceInfoFactoryFeatures.IsPrecisionModeSupported(MeasureType measureType);
    private sealed virtual override MessageResult JetBrains.Profiler.Windows.Info.FactoryFeatures.IPerformanceInfoFactoryFeatures.IsEnableJitInliningSupported(MeasureType measureType);
    private sealed virtual override MessageResult JetBrains.Profiler.Windows.Info.FactoryFeatures.IPerformanceInfoFactoryFeatures.IsEnableTplSupported(MeasureType measureType);
}
internal class JetBrains.Profiler.Windows.Impl.Features.StartProcessInfoFeatures : object {
    private static MessageResult ourMessageResultNone;
    private static MessageResult ourMessageResultNoThreadCycleTime;
    private static MessageResult ourMessageResultNoRdtsc;
    private static MessageResult ourMessageResultNoThreadTimeForTracing;
    private static MessageResult ourMessageResultNoThreadTimeForTracingInject;
    private static MessageResult ourMessageResultTimelineInfoNotSupported;
    private FeaturesParams myFeaturesParams;
    private IArgumentFactory myArgumentFactory;
    private ICoverageInfoFactoryFeatures JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.CoverageInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.ICoverageInfoFactoryFeatures>.FactoryFeatures { get; }
    private CoverageInfo JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.CoverageInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.ICoverageInfoFactoryFeatures>.Default { get; }
    private IMemoryInfoFactoryFeatures JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.MemoryInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.IMemoryInfoFactoryFeatures>.FactoryFeatures { get; }
    private MemoryInfo JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.MemoryInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.IMemoryInfoFactoryFeatures>.Default { get; }
    private IPerformanceInfoFactoryFeatures JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.PerformanceInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.IPerformanceInfoFactoryFeatures>.FactoryFeatures { get; }
    private PerformanceInfo JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.PerformanceInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.IPerformanceInfoFactoryFeatures>.Default { get; }
    private ITimelineInfoFactoryFeatures JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.TimelineInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.ITimelineInfoFactoryFeatures>.FactoryFeatures { get; }
    private TimelineInfo JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.TimelineInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.ITimelineInfoFactoryFeatures>.Default { get; }
    public MessageResult IsActive { get; }
    public StartProcessInfoFeatures(FeaturesParams featuresParams, IArgumentFactory argumentFactory);
    private static StartProcessInfoFeatures();
    private sealed virtual override ICoverageInfoFactoryFeatures JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.CoverageInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.ICoverageInfoFactoryFeatures>.get_FactoryFeatures();
    private sealed virtual override CoverageInfo JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.CoverageInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.ICoverageInfoFactoryFeatures>.get_Default();
    private sealed virtual override IMemoryInfoFactoryFeatures JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.MemoryInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.IMemoryInfoFactoryFeatures>.get_FactoryFeatures();
    private sealed virtual override MemoryInfo JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.MemoryInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.IMemoryInfoFactoryFeatures>.get_Default();
    private sealed virtual override IPerformanceInfoFactoryFeatures JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.PerformanceInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.IPerformanceInfoFactoryFeatures>.get_FactoryFeatures();
    private sealed virtual override PerformanceInfo JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.PerformanceInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.IPerformanceInfoFactoryFeatures>.get_Default();
    private sealed virtual override MessageResult JetBrains.Profiler.Windows.Info.Features.IPerformanceInfoFeatures.IsMeterKindSupported(MeasureType measureType, MeterKind meterKind);
    private sealed virtual override ITimelineInfoFactoryFeatures JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.TimelineInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.ITimelineInfoFactoryFeatures>.get_FactoryFeatures();
    private sealed virtual override TimelineInfo JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.TimelineInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.ITimelineInfoFactoryFeatures>.get_Default();
    public sealed virtual MessageResult get_IsActive();
    public sealed virtual NativeProvider GetSupportedNativeProviders();
    public sealed virtual bool ProfileNativeControlSupported();
}
internal abstract class JetBrains.Profiler.Windows.Impl.HostParameters.BaseHost : BaseSystemHost {
    private static int TimeoutListen;
    private static int TimeoutCloseEvent;
    private static int TimeoutExit;
    private IHostManager myHostManager;
    private IHostParameters myHostParameters;
    private IHostParametersFactory myHostParametersFactory;
    private Lifetime myLifetime;
    private IThreading myThreading;
    private ArgumentFeatures myArgumentFeatures;
    private Configuration myConfiguration;
    private FeaturesParams myFeaturesParams;
    private Lazy`1<IEnumerable`1<string>> myUtilityProcessNames;
    [NotNullAttribute]
protected BaseSystemHost LocalSystemHost { get; }
    public ISystemHost Local { get; }
    public IHostParameters HostParameters { get; }
    public bool AcceptLocalFileSystem { get; }
    public CoreRegistration[] SupportedAdditionalCoreRegistrations { get; }
    protected bool CanRequestElevation { get; }
    protected BaseHost(Lifetime lifetime, IThreading threading, IHostManager hostManager, IHostParameters hostParameters);
    protected abstract virtual BaseSystemHost get_LocalSystemHost();
    public abstract virtual ISystemHost get_Local();
    public sealed virtual IHostParameters get_HostParameters();
    public sealed virtual bool get_AcceptLocalFileSystem();
    public sealed virtual CoreRegistration[] get_SupportedAdditionalCoreRegistrations();
    protected virtual bool get_CanRequestElevation();
    public sealed virtual IArgumentFeatures GetArgumentFeatures();
    public sealed virtual TFeature GetInfoFeatures(IArgumentFactory argumentFactory);
    public sealed virtual IArgument UpdateDisplayFields(IArgument argument);
    public sealed virtual IHostProfileSubscription Profile(Lifetime lifetime, IArgument argument, IInfo info, ICoreOptions coreOptionsExt, IHostOptions hostOptionsExt);
    private void AddExternalEnvironmentVariables(IDictionary`2<string, string> environment, IInfo info);
    public sealed virtual void CleanUp(IProgressIndicator progress, HostCleanUpFlags hostCleanUpFlags);
    public sealed virtual IEnumerable`1<ProcessInfo> GetProcessesToAttach(bool includeNative, bool includeMonoVm);
    public sealed virtual IEnumerable`1<IISExpressInfo> GetIISExpresses();
    public sealed virtual IEnumerable`1<IISSiteInfo> GetIISExpressSites(string configurationFile);
    public sealed virtual IEnumerable`1<WcfHostInfo> GetWcfHosts();
    public sealed virtual IEnumerable`1<PackageInfo> GetMetroPackages(bool forceUpdate);
    public sealed virtual IEnumerable`1<MonoInfo> GetMonoRuntimes();
    private void PatchArgumentWithNoCoreOption(IArgument argument);
    private void ValidateInfo(IInfo info, IArgumentFactory argumentFactory);
    private bool IsValidProcessName(string processName);
    private static IList`1<EvProvider> GetDisabledProviders(IInfo info);
    [CanBeNullAttribute]
private static string GetPdbServerId(IArgument argument, IInfo info);
    private static bool GetPossibleDetach(IHostParametersFactory hostParametersFactory, IArgumentFactory argumentFactory, IInfo info, ControlKind controlKind);
    [NotNullAttribute]
private static IEnumerable`1<CoreCloseWay> GetSupportedCoreCloseWays(bool enableKill, bool possibleDetach);
    [NotNullAttribute]
private static IEnumerable`1<CoreCommand> GetSupportedCoreCommands(IInfoFactory infoFactory, IInfo info, ControlKind controlKind);
    protected void InitializeWithAgent();
    [NotNullAttribute]
private static CleanBridgeEnvironment[] GetCleanBridgeEnvironment(JetPlatform platform, IArgument argument);
    [CanBeNullAttribute]
private static IArgument TryUpdateDisplayField(IArgument argument, Action`1<TArgument> update);
    [CanBeNullAttribute]
private static Func`2<HostProfileParam, BaseHostProfile> TryCreateHostProfile(IArgument argument, Func`3<HostProfileParam, TArgument, BaseHostProfile> create);
    private EventPipeActivation DeployEventPipeCollector(Lifetime lifetime, Lifetime profilingLifetime, IProgressIndicator progressIndicator, IDownloadRequests downloadRequests, Bridge bridge, FileSystemPath diagnosticPortsPath, bool enableTpl, bool useTestProfiler);
    private Tuple`2<EtwActivation, string> DeployAndRunEtwServer(Lifetime lifetime, Lifetime profilingLifetime, IProgressIndicator progressIndicator, HostOptions hostOptions, IDownloadRequests downloadRequests, IList`1<EvProvider> disabledProviders, Bridge bridge, CollectorMode profMode, bool isJavaProcessExpected);
    private void DeployAndRunPdbServer(Lifetime lifetime, Lifetime profilingLifetime, IProgressIndicator progressIndicator, HostOptions hostOptions, string id, IDownloadRequests downloadRequests);
    protected void DeployMetroHelper(IProgressIndicator progressIndicator);
    private void DeployProcessHelper(IProgressIndicator progress, JetArchitecture arch);
    protected void DeployAttachHelper(IProgressIndicator progressIndicator);
    private static void TrackErrors(int maxCount, IHostUI ui, Action`1<Action`1<string>> action);
    private void UnderCore(Action`1<string> addError, Func`1<string> message, Action action);
    private TResult UnderCore(Action`1<string> addError, Func`1<string> message, Func`1<TResult> action);
    [NotNullAttribute]
private MonoActivation DeployMonoCores(Lifetime profilingLifetime, IProgressIndicator progressIndicator, IReadOnlyCollection`1<JetArchitecture> architectures, ProfilerActivationFlags profilerActivationFlags, CoreOptions coreOptions, IHostUI ui);
    private Pair`2<ClrActivation, ClrActivation> DeployClrCores(Lifetime lifetime, IProgressIndicator progressIndicator, IReadOnlyCollection`1<JetArchitecture> architectures, IntegrationCoreInfo integrationCoreInfo, ProfilerActivationFlags profilerActivationFlags, bool deployProbe, CoreOptions coreOptions, IHostUI ui);
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <.ctor>b__12_0();
    [CompilerGeneratedAttribute]
internal static string <Profile>g__TryGetMessageForHr|28_0(HResults hr);
    [CompilerGeneratedAttribute]
internal static void <AddExternalEnvironmentVariables>g__Update|29_0(InfoConfiguration section, <>c__DisplayClass29_0& );
    [CompilerGeneratedAttribute]
private bool <GetProcessesToAttach>b__31_0(ProcessInfo p);
}
internal abstract class JetBrains.Profiler.Windows.Impl.HostParameters.BaseHostParametersFactory : object {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <RelatedType>k__BackingField;
    public Type CoreOptionsType { get; }
    public Type HostOptionsType { get; }
    public string Description { get; }
    public string DisplayName { get; }
    public Type RelatedType { get; }
    public MessageResult IsActive { get; }
    public IHostParameters AutoConnectHostParameters { get; }
    protected BaseHostParametersFactory(Lifetime lifetime, string name, string description, Type type);
    public sealed virtual Type get_CoreOptionsType();
    public sealed virtual Type get_HostOptionsType();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_RelatedType();
    public sealed virtual MessageResult get_IsActive();
    public virtual IHostParameters get_AutoConnectHostParameters();
    public sealed virtual TFactoryFeatures GetInfoFactoryFeatures(IArgumentFactory argumentFactory);
    public virtual IHostParameters UpdateDisplayFields(IHostParameters hostParameters);
    public abstract virtual IHost CreateHost(Lifetime lifetime, IHostParameters hostParameters);
    public abstract virtual IHostParameters CreateEmpty();
    public abstract virtual IEnumerable`1<DescriptionProperty> CreateDefaultPresentation(IHostParameters obj);
}
public abstract class JetBrains.Profiler.Windows.Impl.HostParameters.BaseSystemHost : object {
    [NotNullAttribute]
protected string LoggerId;
    [NotNullAttribute]
protected ILogger Logger;
    internal IServiceAgent`1<SysTools> ProfilingAgent { get; }
    public OperatingSystem OSVersion { get; }
    public JetPlatform RuntimePlatform { get; }
    public bool IsElevatedProcess { get; }
    public bool IsNetCoreInstalled { get; }
    public IReadOnlyCollection`1<JetArchitecture> Architectures { get; }
    public IProperty`1<bool> HasCommunicationError { get; }
    internal abstract virtual IServiceAgent`1<SysTools> get_ProfilingAgent();
    private sealed virtual override string JetBrains.Profiler.Host.IHostBrowser.GetDefaultInternetBrowser();
    private sealed virtual override IEnumerable`1<InternetBrowserInfo> JetBrains.Profiler.Host.IHostBrowser.GetInternetBrowsers();
    public sealed virtual string CreateGlobalTempDirectory(Lifetime lifetime, string prefix);
    public sealed virtual string CreateUserTempDirectory(Lifetime lifetime, string prefix);
    public sealed virtual bool ExistsDirectory(string remotePath);
    public sealed virtual void CreateDirectory(string remotePath);
    public sealed virtual void DeleteDirectory(string remotePath);
    public sealed virtual String[] GetChildDirectories(string remotePath, string searchPattern);
    public sealed virtual String[] GetChildFiles(string remotePath, string searchPattern);
    public sealed virtual string CreateGlobalTempFile(Lifetime lifetime, string prefix);
    public sealed virtual string CreateUserTempFile(Lifetime lifetime, string prefix);
    public sealed virtual long GetFileLength(string remoteFile);
    public sealed virtual bool ExistsFile(string remoteFile);
    public sealed virtual void PutFile(IProgressIndicator progress, string localFile, string remoteFile);
    public sealed virtual void GetFile(IProgressIndicator progress, string localFile, string remoteFile);
    public sealed virtual void DeleteFile(string remoteFile);
    public sealed virtual void CopyFile(IProgressIndicator progress, string remoteSourceFile, string remoteDestinationFile, CopyFileMode mode);
    public sealed virtual void MoveFile(IProgressIndicator progress, string remoteSourceFile, string remoteDestinationFile, MoveFileMode mode);
    private sealed virtual override IEnumerable`1<WindowsServiceInfo> JetBrains.Profiler.Host.IHostService.GetServices();
    public sealed virtual OperatingSystem get_OSVersion();
    public sealed virtual JetPlatform get_RuntimePlatform();
    public sealed virtual bool get_IsElevatedProcess();
    public sealed virtual bool get_IsNetCoreInstalled();
    public sealed virtual IReadOnlyCollection`1<JetArchitecture> get_Architectures();
    public sealed virtual IReadOnlyCollection`1<Version> GetInstalledRuntimeVersions(JetArchitecture architecture);
    public sealed virtual IReadOnlyCollection`1<Version> GetInstalledFrameworkVersions(JetArchitecture architecture, Version runtimeVersion);
    public sealed virtual string GetRuntimeDirectory(JetArchitecture architecture, Version runtimeVersion);
    public sealed virtual string GetFolderPath(Nullable`1<JetArchitecture> architecture, SpecialFolder specialFolder);
    public sealed virtual string Expand(Nullable`1<JetArchitecture> architecture, string str);
    public sealed virtual string GetSymbolPaths();
    public sealed virtual IProperty`1<bool> get_HasCommunicationError();
    public sealed virtual bool IsValidExecutable(string path, FileSystemPath& resultingPath);
    public sealed virtual FileSystemPath GetPathToExecutable(string path);
}
[ZoneMarkerAttribute]
[HostParametersFactoryGroupAttribute("1000", "16")]
internal class JetBrains.Profiler.Windows.Impl.HostParameters.DesktopHostParametersFactoryGroup : object {
    public Type[] RelatedTypes { get; }
    public sealed virtual Type[] get_RelatedTypes();
}
public class JetBrains.Profiler.Windows.Impl.HostParameters.EnvironmentVariable : ConfigurationElement {
    private static string NameKey;
    private static string NameValue;
    [ConfigurationPropertyAttribute("key")]
[NotNullAttribute]
public string Key { get; public set; }
    [NotNullAttribute]
[ConfigurationPropertyAttribute("value")]
public string Value { get; public set; }
    public string get_Key();
    public void set_Key(string value);
    public string get_Value();
    public void set_Value(string value);
}
public class JetBrains.Profiler.Windows.Impl.HostParameters.EnvironmentVariableCollection : ConfigurationElementCollection {
    private static string NameEnvironmentVariable;
    public ConfigurationElementCollectionType CollectionType { get; }
    protected string ElementName { get; }
    public virtual ConfigurationElementCollectionType get_CollectionType();
    protected virtual string get_ElementName();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
}
internal class JetBrains.Profiler.Windows.Impl.HostParameters.ExtendableLife : object {
    [NullableAttribute("1")]
private LifetimeDefinition myLife;
    private long myRefCount;
    public Lifetime Time { get; }
    public ExtendableLife(Lifetime life);
    public Lifetime get_Time();
    public void Extend(Lifetime otherLife);
    [CompilerGeneratedAttribute]
private void <Extend>b__3_0();
}
public class JetBrains.Profiler.Windows.Impl.HostParameters.InfoConfiguration : ConfigurationElement {
    private static string NameEnvironmentVariables;
    [ConfigurationPropertyAttribute("environmentVariables")]
[NotNullAttribute]
public EnvironmentVariableCollection EnvironmentVariables { get; public set; }
    public EnvironmentVariableCollection get_EnvironmentVariables();
    public void set_EnvironmentVariables(EnvironmentVariableCollection value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.Profiler.Windows.Impl.HostParameters.LazyValue`1 : object {
    private Func`1<T> myInit;
    private object myGuard;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Boxed<T> myBoxed;
    public T Value { get; }
    public bool IsValueCreated { get; }
    public LazyValue`1(Func`1<T> init);
    public T get_Value();
    public bool get_IsValueCreated();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.Profiler.Windows.Impl.HostParameters.LocalHost : BaseHost {
    private IServiceAgent`1<SysTools> myServiceAgent;
    [CompilerGeneratedAttribute]
private bool <CanRequestElevation>k__BackingField;
    protected bool CanRequestElevation { get; }
    protected BaseSystemHost LocalSystemHost { get; }
    internal IServiceAgent`1<SysTools> ProfilingAgent { get; }
    [NullableAttribute("2")]
public ISystemHost Local { get; }
    public LocalHost(Lifetime lifetime, IThreading threading, IHostManager hostManager, LocalHostParameters hostParameters, ServiceAgentProvider agentProvider);
    private void InitializeTools(LocalHostParameters lhp, FeatureFlags feat);
    [CompilerGeneratedAttribute]
protected virtual bool get_CanRequestElevation();
    protected virtual BaseSystemHost get_LocalSystemHost();
    internal virtual IServiceAgent`1<SysTools> get_ProfilingAgent();
    [NullableContextAttribute("2")]
public virtual ISystemHost get_Local();
}
[ZoneMarkerAttribute]
[HostParametersFactoryAttribute("1000", "16")]
internal class JetBrains.Profiler.Windows.Impl.HostParameters.LocalHostParametersFactory : BaseHostParametersFactory {
    private Func`1<IHostManager> myHostManagerFunc;
    private Lifetime myLifetime;
    private IThreading myThreading;
    private ServiceAgentProvider myAgentProvider;
    public IHostParameters AutoConnectHostParameters { get; }
    public LocalHostParametersFactory(Lifetime lifetime, IThreading threading, IComponentContainer componentContainer);
    private LocalHostParametersFactory(Lifetime lifetime, IThreading threading, Func`1<IHostManager> hostManagerFunc);
    public static LocalHostParametersFactory Create(Lifetime lifetime, IThreading threading, IHostManager hostManager);
    public virtual IHostParameters get_AutoConnectHostParameters();
    public virtual IHostParameters CreateEmpty();
    public virtual IEnumerable`1<DescriptionProperty> CreateDefaultPresentation(IHostParameters obj);
    public virtual IHost CreateHost(Lifetime lifetime, IHostParameters hostParameters);
}
public class JetBrains.Profiler.Windows.Impl.HostParameters.ProfilerConfigurationSection : ConfigurationSection {
    private static string NameEnvironmentVariables;
    private static string NameCoverage;
    private static string NameMemory;
    private static string NamePerformanceSampling;
    private static string NamePerformanceTracing;
    private static string NamePerformanceTracingInject;
    private static string NameTimeline;
    [ConfigurationPropertyAttribute("environmentVariables")]
[NotNullAttribute]
public EnvironmentVariableCollection EnvironmentVariables { get; public set; }
    [ConfigurationPropertyAttribute("coverage")]
[CanBeNullAttribute]
public InfoConfiguration Coverage { get; public set; }
    [ConfigurationPropertyAttribute("memory")]
[CanBeNullAttribute]
public InfoConfiguration Memory { get; public set; }
    [ConfigurationPropertyAttribute("performanceSampling")]
[CanBeNullAttribute]
public InfoConfiguration PerformanceSampling { get; public set; }
    [ConfigurationPropertyAttribute("performanceTracing")]
[CanBeNullAttribute]
public InfoConfiguration PerformanceTracing { get; public set; }
    [ConfigurationPropertyAttribute("performanceTracingInject")]
[CanBeNullAttribute]
public InfoConfiguration PerformanceTracingInject { get; public set; }
    [ConfigurationPropertyAttribute("timeline")]
[CanBeNullAttribute]
public InfoConfiguration Timeline { get; public set; }
    public EnvironmentVariableCollection get_EnvironmentVariables();
    public void set_EnvironmentVariables(EnvironmentVariableCollection value);
    public InfoConfiguration get_Coverage();
    public void set_Coverage(InfoConfiguration value);
    public InfoConfiguration get_Memory();
    public void set_Memory(InfoConfiguration value);
    public InfoConfiguration get_PerformanceSampling();
    public void set_PerformanceSampling(InfoConfiguration value);
    public InfoConfiguration get_PerformanceTracing();
    public void set_PerformanceTracing(InfoConfiguration value);
    public InfoConfiguration get_PerformanceTracingInject();
    public void set_PerformanceTracingInject(InfoConfiguration value);
    public InfoConfiguration get_Timeline();
    public void set_Timeline(InfoConfiguration value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.Profiler.Windows.Impl.HostParameters.ServiceAgentProvider : object {
    public FeatureFlags Features;
    private static ILogger ourLogger;
    private ExtendableLife myLocalLife;
    private LazyValue`1<LocalServiceAgent`1<SysTools>> myLocalAgent;
    private ExtendableLife myElevatedLife;
    private LazyValue`1<ElevationServiceAgent> myElevatedAgent;
    public ServiceAgentProvider(Lifetime lifetime);
    private static ServiceAgentProvider();
    public LocalServiceAgent`1<SysTools> GetLocal(Lifetime lifetime, Boolean& made);
    public ElevationServiceAgent GetElevated(Lifetime lifetime, Boolean& made);
    private T WithInit(T agent);
    [CompilerGeneratedAttribute]
private LocalServiceAgent`1<SysTools> <.ctor>b__4_0();
    [CompilerGeneratedAttribute]
private ElevationServiceAgent <.ctor>b__4_1();
}
internal class JetBrains.Profiler.Windows.Impl.HostProfile.AttachHostProfile : BaseHostProfile {
    private static int TimeoutAcquireProfilingEvent;
    private static ILogger ourLogger;
    private AttachArgument myArgument;
    public AttachHostProfile(HostProfileParam param, AttachArgument argument);
    private static AttachHostProfile();
    private static bool IsClrSupportAttach(Version version);
    protected virtual void OnStart(InternalHostProfileParam param);
}
internal abstract class JetBrains.Profiler.Windows.Impl.HostProfile.BaseGlobalHostProfile : BaseHostProfile {
    private static ILogger ourLogger;
    private UpdateEnvironmentProperty[] myEnvironmentProperties;
    protected BaseGlobalHostProfile(HostProfileParam param, Behavior mode);
    private static BaseGlobalHostProfile();
    protected void SetEnvironmentProperties(UpdateEnvironmentProperty[] environmentProperties);
    protected virtual void OnStart(InternalHostProfileParam param);
}
internal abstract class JetBrains.Profiler.Windows.Impl.HostProfile.BaseHostProfile : object {
    private static ILogger ourLogger;
    private static ReadonlyToken ourReadonly;
    private Action myActivateShutdownTracker;
    private ISignal`1<AlertEventArgs> myAlert;
    private IProperty`1<bool> myCloseAllRequest;
    [CanBeNullAttribute]
private IProperty`1<bool> myEnableAutomaticShutdownExternally;
    private Behavior myMode;
    private HostProfileParam myParam;
    private LifetimeDefinition myProfilingLtDef;
    private Action myShutdown;
    private IProperty`1<bool> myShutdownStarted;
    private IProperty`1<bool> myShutdownFinished;
    private int myStartState;
    private int myUserActionWait;
    private ISignal`1<EventArgs> myStartPreparationFinished;
    private HostBridgeType JetBrains.Profiler.Profile.IHostProfile.HostBridgeType { get; }
    private bool JetBrains.Profiler.Profile.IHostProfile.IsConnectionFilterRequired { get; }
    private bool JetBrains.Profiler.Profile.IHostProfile.UseTransparentIntegration { get; }
    private IProperty`1<bool> JetBrains.Profiler.Profile.IHostProfile.Finished { get; }
    private ISignal`1<AlertEventArgs> JetBrains.Profiler.Profile.IHostProfileSubscription.Alert { get; }
    private ISignal`1<ConnectingEventArgs> JetBrains.Profiler.Profile.IHostProfileSubscription.Connecting { get; }
    private ICollectionEvents`1<ICoreHostProfile> JetBrains.Profiler.Profile.IHostProfileSubscription.Connections { get; }
    private ISignal`1<HostScopeEventArgs> JetBrains.Profiler.Profile.IHostProfileSubscription.Scope { get; }
    private ISignal`1<HostOperationEventArgs> JetBrains.Profiler.Profile.IHostProfileSubscription.Operation { get; }
    private ISignal`1<ResponsibilityEventArgs`1<SnapshotDoneEventArgs>> JetBrains.Profiler.Profile.IHostProfileSubscription.SnapshotDone { get; }
    private ISignal`1<ResponsibilityEventArgs`1<LogDoneEventArgs>> JetBrains.Profiler.Profile.IHostProfileSubscription.LogDone { get; }
    private ISignal`1<EventArgs> JetBrains.Profiler.Profile.IHostProfileSubscription.StartPreparationFinished { get; }
    public IEnumerable`1<MainCloseWay> SupportedMainCloseWays { get; }
    private IEnumerable`1<CoreCloseWay> JetBrains.Profiler.Profile.IHostProfile.SupportedCoreCloseWays { get; }
    private IEnumerable`1<CoreCommand> JetBrains.Profiler.Profile.IHostProfile.SupportedCoreCommands { get; }
    protected BaseHostProfile(HostProfileParam param, Behavior mode);
    private static BaseHostProfile();
    private static int GetRealFinishProfilingAutomaticallyTimeout(Nullable`1<int> timeout, Behavior mode);
    private sealed virtual override HostBridgeType JetBrains.Profiler.Profile.IHostProfile.get_HostBridgeType();
    private sealed virtual override bool JetBrains.Profiler.Profile.IHostProfile.get_IsConnectionFilterRequired();
    private sealed virtual override bool JetBrains.Profiler.Profile.IHostProfile.get_UseTransparentIntegration();
    private sealed virtual override IProperty`1<bool> JetBrains.Profiler.Profile.IHostProfile.get_Finished();
    private sealed virtual override ISignal`1<AlertEventArgs> JetBrains.Profiler.Profile.IHostProfileSubscription.get_Alert();
    private sealed virtual override ISignal`1<ConnectingEventArgs> JetBrains.Profiler.Profile.IHostProfileSubscription.get_Connecting();
    private sealed virtual override ICollectionEvents`1<ICoreHostProfile> JetBrains.Profiler.Profile.IHostProfileSubscription.get_Connections();
    private sealed virtual override ISignal`1<HostScopeEventArgs> JetBrains.Profiler.Profile.IHostProfileSubscription.get_Scope();
    private sealed virtual override ISignal`1<HostOperationEventArgs> JetBrains.Profiler.Profile.IHostProfileSubscription.get_Operation();
    private sealed virtual override ISignal`1<ResponsibilityEventArgs`1<SnapshotDoneEventArgs>> JetBrains.Profiler.Profile.IHostProfileSubscription.get_SnapshotDone();
    private sealed virtual override ISignal`1<ResponsibilityEventArgs`1<LogDoneEventArgs>> JetBrains.Profiler.Profile.IHostProfileSubscription.get_LogDone();
    private sealed virtual override ISignal`1<EventArgs> JetBrains.Profiler.Profile.IHostProfileSubscription.get_StartPreparationFinished();
    public virtual IEnumerable`1<MainCloseWay> get_SupportedMainCloseWays();
    private sealed virtual override IEnumerable`1<CoreCloseWay> JetBrains.Profiler.Profile.IHostProfile.get_SupportedCoreCloseWays();
    private sealed virtual override IEnumerable`1<CoreCommand> JetBrains.Profiler.Profile.IHostProfile.get_SupportedCoreCommands();
    private sealed virtual override void JetBrains.Profiler.Profile.IHostProfileSubscription.Start(IProgressIndicator progressIndicator, IHostUI ui);
    private sealed virtual override IDisposable JetBrains.Profiler.Profile.IHostProfile.TryUserActionWait();
    private sealed virtual override bool JetBrains.Profiler.Profile.IHostProfile.CloseAll(CoreCloseWay[] sequenceCoreCloseWays);
    public virtual bool CanCloseMain(MainCloseWay mainCloseWay);
    public virtual void CloseMain(MainCloseWay mainCloseWay);
    protected void EnableAutomaticShutdownExternally();
    protected virtual void OnStart(InternalHostProfileParam param);
    protected void SetValidExecutablesFilter(String[] executables);
    protected void SetInvalidExecutablesFilter(String[] executables);
    private void SubscribeForProcessesFiltering(String[] executables, bool shouldFind, string subject);
    protected void SetProcessFilter(ProcessFilterArgument[] processFilterArguments);
    private static string TakeStringForMatch(bool hasSlash, ConnectingEventArgs x);
    [NotNullAttribute]
private static IProperty`1<bool> CreateCloseAllRequest(Lifetime lifetime, Bridge bridge);
    [NotNullAttribute]
private static IProperty`1<bool> CreateDelayedNoConnectionsAndOperations(Lifetime lifetime, IProperty`1<bool> noConnectionsAndOperations, int milliseconds);
    [NotNullAttribute]
private static IProperty`1<bool> CreateEnableAutomaticShutdownWhenNoConnectionsLeft(Lifetime lifetime, IProperty`1<bool> noConnections);
    [NotNullAttribute]
private static IProperty`1<bool> CreateEnableAutomaticShutdownExternally(Lifetime lifetime);
    [NotNullAttribute]
private static IProperty`1<bool> CreateNoConnections(Lifetime lifetime, Bridge bridge);
    [NotNullAttribute]
private static IProperty`1<bool> CreateNoOperations(Lifetime lifetime, Bridge bridge, IDownloader downloadRequests);
    [NotNullAttribute]
private static IProperty`1<bool> CreateNoConnectionsAndOperations(Lifetime lifetime, IProperty`1<bool> noConnections, Bridge bridge, IDownloader downloadRequests);
    [NotNullAttribute]
private IProperty`1<bool> CreateInternalFinishRequest(Lifetime lifetime, IProperty`1<bool> noConnectionsAndOperations);
    [CompilerGeneratedAttribute]
private void <JetBrains.Profiler.Profile.IHostProfile.TryUserActionWait>b__50_0();
}
internal abstract class JetBrains.Profiler.Windows.Impl.HostProfile.BaseProcessHostProfile : BaseHostProfile {
    private static ILogger ourLogger;
    private IProcessProxy myProcess;
    private Action myBeforeResume;
    private IThreading myThreading;
    private bool myProfileWhileRootAlive;
    public int ProcessId { get; }
    private bool JetBrains.Profiler.Profile.IStandaloneHostProfile.HasExited { get; }
    private Nullable`1<int> JetBrains.Profiler.Profile.IStandaloneHostProfile.ExitCode { get; }
    protected BaseProcessHostProfile(HostProfileParam param);
    private static BaseProcessHostProfile();
    public sealed virtual int get_ProcessId();
    private sealed virtual override bool JetBrains.Profiler.Profile.IStandaloneHostProfile.get_HasExited();
    private sealed virtual override Nullable`1<int> JetBrains.Profiler.Profile.IStandaloneHostProfile.get_ExitCode();
    private sealed virtual override bool JetBrains.Profiler.Profile.IStandaloneHostProfile.CloseMainWindow();
    public virtual void Kill();
    public virtual void KillTree();
    private sealed virtual override bool JetBrains.Profiler.Profile.IStandaloneHostProfile.WaitForExit(TimeSpan timeout);
    private sealed virtual override bool JetBrains.Profiler.Profile.IStandaloneHostProfile.WaitForExit(int timeout);
    private sealed virtual override bool JetBrains.Profiler.Profile.IStandaloneHostProfile.WaitForExit();
    protected void SetLaunchedByUserOnlyFilter(Lifetime lifetime, string launchedExecutable, bool underExternalConsole);
    protected void SetProcess(IProcessProxy process, Action beforeResume);
    protected static void CheckIfSandboxedApplication(ExecutableTools executableTools, string executable);
    protected virtual void OnStart(InternalHostProfileParam param);
}
internal abstract class JetBrains.Profiler.Windows.Impl.HostProfile.BaseWindowsServiceHostProfile : BaseHostProfile {
    private static int TimeoutOperation;
    private static int LongTimeoutOperation;
    private static string ServiceSvcHostText;
    private static string ServiceSharedText;
    private static ILogger ourLogger;
    private static JetHashSet`1<string> ourSafeGroupNames;
    private IServiceAgent`1<SysTools> myAgent;
    private String[] myArguments;
    private UpdateEnvironmentProperty[] myEnvironmentProperties;
    private IProcessProxy myProcess;
    private IServiceProxy myService;
    private bool myStartDependentServices;
    private bool JetBrains.Profiler.Profile.IServiceHostProfile.CanStop { get; }
    public IEnumerable`1<MainCloseWay> SupportedMainCloseWays { get; }
    protected BaseWindowsServiceHostProfile(HostProfileParam param);
    private static BaseWindowsServiceHostProfile();
    private sealed virtual override bool JetBrains.Profiler.Profile.IServiceHostProfile.get_CanStop();
    private sealed virtual override void JetBrains.Profiler.Profile.IServiceHostProfile.Stop();
    private sealed virtual override bool JetBrains.Profiler.Profile.IServiceHostProfile.WaitForStop(TimeSpan timeout);
    private sealed virtual override bool JetBrains.Profiler.Profile.IServiceHostProfile.WaitForStop(int timeout);
    public virtual IEnumerable`1<MainCloseWay> get_SupportedMainCloseWays();
    public virtual bool CanCloseMain(MainCloseWay mainCloseWay);
    public virtual void CloseMain(MainCloseWay mainCloseWay);
    protected void SetEnvironmentProperties(UpdateEnvironmentProperty[] environmentProperties);
    protected void SetService(IServiceProxy service, bool startDependentServices, String[] arguments);
    protected virtual void OnStart(InternalHostProfileParam param);
    private void ApplyLock(Lifetime lifetime, IServiceProxy[] services);
    private static void ApplyEnvironment(Lifetime lifetime, IServiceAgent`1<SysTools> agent, IServiceProxy[] services, UpdateEnvironmentProperty[] environmentProperties);
    [NotNullAttribute]
private static IServiceProxy[] GetDependentServices(Lifetime lifetime, IServiceAgent`1<SysTools> agent, IServiceProxy service);
    private static Result GetSameProcessServices(Lifetime lifetime, IServiceAgent`1<SysTools> agent, IServiceProxy service);
    private void ParallelStart(IReadOnlyCollection`1<IServiceProxy> roots, Action checkCanceled, bool waitForRunning);
    private void ParallelStop(IReadOnlyCollection`1<IServiceProxy> roots, Action checkCanceled, bool waitForStopping);
    [CompilerGeneratedAttribute]
private bool <JetBrains.Profiler.Profile.IServiceHostProfile.get_CanStop>b__14_0(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private void <JetBrains.Profiler.Profile.IServiceHostProfile.Stop>b__15_0(Lifetime lifetime);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(InternalHostProfileParam param);
}
internal class JetBrains.Profiler.Windows.Impl.HostProfile.CoreClrHostProfile : BaseProcessHostProfile {
    private static ILogger ourLogger;
    private CoreClrArgument myArgument;
    public CoreClrHostProfile(HostProfileParam param, CoreClrArgument argument);
    private static CoreClrHostProfile();
    protected virtual void OnStart(InternalHostProfileParam param);
    private void RunBrowserFromArg(InternalHostProfileParam param, bool isRemote);
    private RemotableProcessStartInfo CreateProcessStartInfo(string fileName, string args, string workingDir, UpdateEnvironmentProperty[] envVars, bool noWindow, bool newProcessGroup, bool newConsole);
}
internal class JetBrains.Profiler.Windows.Impl.HostProfile.EverythingHostProfile : BaseGlobalHostProfile {
    private static ILogger ourLogger;
    private EverythingArgument myArgument;
    public EverythingHostProfile(HostProfileParam param, EverythingArgument argument);
    private static EverythingHostProfile();
    protected virtual void OnStart(InternalHostProfileParam param);
}
internal class JetBrains.Profiler.Windows.Impl.HostProfile.EverythingTransparentHostProfile : BaseHostProfile {
    private static ILogger ourLogger;
    private EverythingTransparentArgument myArgument;
    public EverythingTransparentHostProfile(HostProfileParam param, EverythingTransparentArgument argument);
    private static EverythingTransparentHostProfile();
    protected virtual void OnStart(InternalHostProfileParam param);
}
internal class JetBrains.Profiler.Windows.Impl.HostProfile.IISExpressHostProfile : BaseProcessHostProfile {
    private static int TimeoutWaitForListen;
    private static string DotNetExecutable;
    private static string DotNetExecutableLauncher;
    private static string IISExpressProcessName;
    private static int PidSystem;
    private IISExpressArgument myArgument;
    private static ILogger ourLogger;
    public IISExpressHostProfile(HostProfileParam param, IISExpressArgument argument);
    private static IISExpressHostProfile();
    protected virtual void OnStart(InternalHostProfileParam param);
    private void RunBrowserFromArg(InternalHostProfileParam param, bool isRemote, Uri url);
}
internal class JetBrains.Profiler.Windows.Impl.HostProfile.IISHostProfile : BaseWindowsServiceHostProfile {
    private static string DotNetExecutableLauncher;
    private static ILogger ourLogger;
    private IISArgument myArgument;
    public IISHostProfile(HostProfileParam param, IISArgument argument);
    private static IISHostProfile();
    protected virtual void OnStart(InternalHostProfileParam param);
    private void RunBrowserFromArg(InternalHostProfileParam param, bool isRemote);
}
internal class JetBrains.Profiler.Windows.Impl.HostProfile.InternalHostProfileParam : object {
    [NotNullAttribute]
public Action CheckCanceled;
    private Func`5<IReadOnlyCollection`1<JetArchitecture>, ClrEngine, ProfilerActivationFlags, IReadOnlyCollection`1<KeyValuePair`2<string, string>>, DeployResult> myDeploy;
    [NotNullAttribute]
public ImmutableHostProfileParam ImmutableParam;
    public Lifetime ProfilingLifetime;
    [NotNullAttribute]
public IHostUI UI;
    public InternalHostProfileParam(ImmutableHostProfileParam immutableParam, Lifetime profilingLifetime, Action checkCanceled, Func`5<IReadOnlyCollection`1<JetArchitecture>, ClrEngine, ProfilerActivationFlags, IReadOnlyCollection`1<KeyValuePair`2<string, string>>, DeployResult> deploy, IHostUI ui);
    [NotNullAttribute]
public DeployResult Deploy(IReadOnlyCollection`1<JetArchitecture> architectures, ClrEngine clrEngine);
    [NotNullAttribute]
public DeployResult Deploy(IReadOnlyCollection`1<JetArchitecture> architectures, ClrEngine clrEngine, ProfilerActivationFlags profilerActivationFlags);
    [NotNullAttribute]
public DeployResult Deploy(IReadOnlyCollection`1<JetArchitecture> architectures, ClrEngine clrEngine, ProfilerActivationFlags profilerActivationFlags, IReadOnlyCollection`1<KeyValuePair`2<string, string>> environmentVariables);
}
internal class JetBrains.Profiler.Windows.Impl.HostProfile.MetroHostProfile : BaseHostProfile {
    private static ILogger ourLogger;
    private MetroArgument myArgument;
    public MetroHostProfile(HostProfileParam param, MetroArgument argument);
    private static MetroHostProfile();
    protected virtual void OnStart(InternalHostProfileParam param);
}
internal class JetBrains.Profiler.Windows.Impl.HostProfile.MonoHostProfile : BaseProcessHostProfile {
    private static ILogger ourLogger;
    private MonoArgument myArgument;
    public MonoHostProfile(HostProfileParam param, MonoArgument argument);
    private static MonoHostProfile();
    protected virtual void OnStart(InternalHostProfileParam param);
}
[ExtensionAttribute]
internal static class JetBrains.Profiler.Windows.Impl.HostProfile.ServiceControlUtil : object {
    private static int TimeoutStatus;
    private static ILogger ourLogger;
    private static ServiceControlUtil();
    [ExtensionAttribute]
public static void StartEx(IServiceProxy service, String[] args);
    [ExtensionAttribute]
public static void StopEx(IServiceProxy service);
    [ExtensionAttribute]
public static bool WaitForStopped(IServiceProxy service, Action checkCanceled, TimeSpan timeout);
    [ExtensionAttribute]
public static bool WaitForStopped(IServiceProxy service, Action checkCanceled, TimeSpan timeout, DateTime startUtcTime);
    [ExtensionAttribute]
public static bool WaitForRunning(IServiceProxy service, Action checkCanceled, TimeSpan timeout);
    [ExtensionAttribute]
public static bool WaitForRunning(IServiceProxy service, Action checkCanceled, TimeSpan timeout, DateTime startUtcTime);
}
internal class JetBrains.Profiler.Windows.Impl.HostProfile.StandaloneHostProfile : BaseProcessHostProfile {
    private static ILogger ourLogger;
    private StandaloneArgument myArgument;
    public StandaloneHostProfile(HostProfileParam param, StandaloneArgument argument);
    private static StandaloneHostProfile();
    protected virtual void OnStart(InternalHostProfileParam param);
}
internal class JetBrains.Profiler.Windows.Impl.HostProfile.UnityHostProfile : BaseProcessHostProfile {
    private static ILogger ourLogger;
    private UnityArgument myArgument;
    private HostProfileParam myParam;
    public UnityHostProfile(HostProfileParam param, UnityArgument argument);
    private static UnityHostProfile();
    protected virtual void OnStart(InternalHostProfileParam param);
}
internal class JetBrains.Profiler.Windows.Impl.HostProfile.WcfHostHostProfile : BaseProcessHostProfile {
    private static ILogger ourLogger;
    private WcfHostArgument myArgument;
    public WcfHostHostProfile(HostProfileParam param, WcfHostArgument argument);
    private static WcfHostHostProfile();
    protected virtual void OnStart(InternalHostProfileParam param);
}
internal class JetBrains.Profiler.Windows.Impl.HostProfile.WildcardEx : Wildcard {
    private string myPattern;
    public bool HasSlashesInPattern { get; }
    public WildcardEx(string pattern, bool isCaseSensitive);
    public bool get_HasSlashesInPattern();
}
internal class JetBrains.Profiler.Windows.Impl.HostProfile.WindowsServiceHostProfile : BaseWindowsServiceHostProfile {
    private static ILogger ourLogger;
    private WindowsServiceArgument myArgument;
    public WindowsServiceHostProfile(HostProfileParam param, WindowsServiceArgument argument);
    private static WindowsServiceHostProfile();
    protected virtual void OnStart(InternalHostProfileParam param);
}
internal class JetBrains.Profiler.Windows.Impl.HostProfileParam : object {
    [NotNullAttribute]
public Bridge Bridge;
    [NotNullAttribute]
public DeployDelegate Deploy;
    [NotNullAttribute]
public IDownloader Downloader;
    public bool AutomaticShutdownEnabledByDefault;
    public Nullable`1<int> FinishProfilingAutomaticallyTimeout;
    [NotNullAttribute]
public ImmutableHostProfileParam ImmutableParam;
    [NotNullAttribute]
public IEnumerable`1<CoreCloseWay> SupportedCoreCloseWays;
    [NotNullAttribute]
public IEnumerable`1<CoreCommand> SupportedCoreCommands;
    [NotNullAttribute]
public IThreading Threading;
    [NotNullAttribute]
public Func`2<HResults, string> TryGetMessageForHr;
    public HostProfileParam(ImmutableHostProfileParam immutableParam, IThreading threading, DeployDelegate deploy, Bridge bridge, IDownloader downloader, bool automaticShutdownEnabledByDefault, Nullable`1<int> finishProfilingAutomaticallyTimeout, IEnumerable`1<CoreCloseWay> supportedCoreCloseWays, IEnumerable`1<CoreCommand> supportedCoreCommands, Func`2<HResults, string> tryGetMessageForHr);
}
[ExtensionAttribute]
internal static class JetBrains.Profiler.Windows.Impl.HostProfileUtil : object {
    private static int TimeoutKill;
    private static int TimeoutGracefulTermination;
    private static int PidSystem;
    public static Nullable`1<bool> AskAndTerminate(int pid, IPEndPoint endPoint, ProcessTools processTools, IHostUI ui, Predicate`1<IProcessProxy> gracefulTerminationCondition);
    [ExtensionAttribute]
public static ushort SelectPort(SysTools sysTools, IPEndPoint endPoint, IHostUI ui, Predicate`1<IProcessProxy> gracefulTerminationCondition);
}
internal class JetBrains.Profiler.Windows.Impl.ImmutableHostProfileParam : object {
    [NotNullAttribute]
public IReadOnlyCollection`1<JetArchitecture> Architectures;
    public Lifetime Lifetime;
    [NotNullAttribute]
public IServiceAgent`1<SysTools> LocalProfilingAgent;
    [NotNullAttribute]
public string ProfilerName;
    [NotNullAttribute]
public IServiceAgent`1<SysTools> ProfilingAgent;
    public bool UseTransparentIntegration;
    public ImmutableHostProfileParam(Lifetime lifetime, IReadOnlyCollection`1<JetArchitecture> architectures, IServiceAgent`1<SysTools> profilingAgent, IServiceAgent`1<SysTools> localProfilingAgent, string profilerName, bool useTransparentIntegration);
}
[ZoneMarkerAttribute]
[InfoFactoryAttribute("3000", "16")]
internal class JetBrains.Profiler.Windows.Impl.Info.CoverageInfoFactory : InfoFactoryBase`2<CoverageInfo, ICoverageInfoFactoryFeatures> {
    public CoverageInfoFactory(IComponentContainer componentContainer);
    private CoverageInfoFactory(Lazy`1<IHostManager> mgr);
    public static CoverageInfoFactory Create(IHostManager mgr);
}
internal abstract class JetBrains.Profiler.Windows.Impl.Info.InfoFactoryBase`2 : object {
    protected string myDisplayName;
    private string myBaseName;
    protected HostBridgeType myDefaultBridge;
    protected Lazy`1<IHostManager> myHostManager;
    protected MessageResult ourMessageResultNotSupported;
    public HostBridgeType HostBridgeType { get; }
    public Type RelatedType { get; }
    public string DisplayName { get; }
    protected InfoFactoryBase`2(Lazy`1<IHostManager> hostManager, string displayName, string baseName, HostBridgeType defaultBridge);
    public sealed virtual HostBridgeType get_HostBridgeType();
    public virtual Type get_RelatedType();
    public sealed virtual string get_DisplayName();
    public virtual string GetProfiler(IInfo info, CoreConfiguration configuration);
    public virtual IEnumerable`1<CoreCommand> GetSupportedCoreCommands(IInfo info);
    public sealed virtual MessageResult IsCompatible(IHostParametersFactory factory, IArgumentFactory argumentFactory);
    public virtual MessageResult IsCompatible(IHost host, IArgumentFactory argumentFactory);
    public sealed virtual IInfo CreateEmpty();
}
[ZoneMarkerAttribute]
[InfoFactoryAttribute("2000", "16")]
internal class JetBrains.Profiler.Windows.Impl.Info.MemoryInfoFactory : InfoFactoryBase`2<MemoryInfo, IMemoryInfoFactoryFeatures> {
    public MemoryInfoFactory(IComponentContainer componentContainer);
    private MemoryInfoFactory(Lazy`1<IHostManager> mgr);
    public static MemoryInfoFactory Create(IHostManager mgr);
    public virtual IEnumerable`1<CoreCommand> GetSupportedCoreCommands(IInfo info);
}
[ZoneMarkerAttribute]
[InfoFactoryAttribute("1000", "16")]
internal class JetBrains.Profiler.Windows.Impl.Info.PerformanceInfoFactory : InfoFactoryBase`2<PerformanceInfo, IPerformanceInfoFactoryFeatures> {
    public PerformanceInfoFactory(IComponentContainer componentContainer);
    private PerformanceInfoFactory(Lazy`1<IHostManager> mgr);
    public static PerformanceInfoFactory Create(IHostManager mgr);
    public virtual string GetProfiler(IInfo info, CoreConfiguration configuration);
}
[ZoneMarkerAttribute]
[InfoFactoryAttribute("100000", "16")]
internal class JetBrains.Profiler.Windows.Impl.Info.TimelineInfoFactory : InfoFactoryBase`2<TimelineInfo, ITimelineInfoFactoryFeatures> {
    public TimelineInfoFactory(IComponentContainer componentContainer);
    private TimelineInfoFactory(Lazy`1<IHostManager> mgr);
    public static TimelineInfoFactory Create(IHostManager mgr);
    public virtual MessageResult IsCompatible(IHost host, IArgumentFactory argumentFactory);
}
internal class JetBrains.Profiler.Windows.Impl.LocalCoreFilesManager : BaseCoreFilesManager {
    private ILifetimeIdentity myListenerLifetimeIdentity;
    private IDictionary`2<Guid, Tuple`2<SafeFileHandle, FileSystemPath>> myStreamingFiles;
    public LocalCoreFilesManager(SysTools sysTools, IDownloadRequests downloadRequests, EffectiveCoreDirs coreDirs, int coreProcessId, ILifetimeIdentity listenerLifetimeIdentity, Lifetime lifetime);
    private void Cleanup();
    public virtual Tuple`2<SafeFileHandle, FileSystemPath> CreateTemporaryFile();
    public virtual Tuple`3<Guid, SafeFileHandle, FileSystemPath> CreateDiagnosticFile();
    public virtual Tuple`3<Guid, SafeFileHandle, FileSystemPath> CreateStreamingFile();
    public virtual bool CanStartStreaming();
    public virtual Tuple`2<SafeFileHandle, FileSystemPath> TakeStreaming(Guid id);
    public virtual Tuple`3<Guid, SafeFileHandle, FileSystemPath> CreateSnapshotFile();
}
[ZoneMarkerAttribute]
[CoreOptionsFactoryAttribute("16")]
internal class JetBrains.Profiler.Windows.Impl.Options.CoreOptionsFactory : object {
    public Type RelatedType { get; }
    public string DisplayName { get; }
    public sealed virtual Type get_RelatedType();
    public sealed virtual string get_DisplayName();
    public sealed virtual ICoreOptions CreateEmpty();
}
[ZoneMarkerAttribute]
[HostOptionsFactoryAttribute("16")]
internal class JetBrains.Profiler.Windows.Impl.Options.HostOptionsFactory : object {
    public Type RelatedType { get; }
    public string DisplayName { get; }
    public sealed virtual Type get_RelatedType();
    public sealed virtual string get_DisplayName();
    public sealed virtual IHostOptions CreateEmpty();
}
internal class JetBrains.Profiler.Windows.Impl.PacketReader : object {
    private IChannelProxy myChannelProxy;
    public PacketReader(IChannelProxy channelProxy);
    public sealed virtual void Receive(Action`2<byte, BinaryReader> dataReader);
    public sealed virtual TResult Receive(Func`3<byte, BinaryReader, TResult> dataReader);
}
internal class JetBrains.Profiler.Windows.Impl.PacketWriter : object {
    private IChannelProxy myChannelProxy;
    public PacketWriter(IChannelProxy channelProxy);
    public sealed virtual void Send(byte command, Action`1<BinaryWriter> writerAction);
}
[FlagsAttribute]
internal enum JetBrains.Profiler.Windows.Impl.ProfilerActivationFlags : Enum {
    public UInt32 value__;
    public static ProfilerActivationFlags Default;
    public static ProfilerActivationFlags GrantedRegistryFreeArchitecture;
    public static ProfilerActivationFlags GrantedRegistryFree;
    public static ProfilerActivationFlags DeployAttachHelper;
    public static ProfilerActivationFlags DeployMetroHelper;
    public static ProfilerActivationFlags CheckWindowsBuiltinUsersAccessRights;
    public static ProfilerActivationFlags CheckWindowsMetroAccessRights;
    public static ProfilerActivationFlags DisableEnvironmentActivation;
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Windows.Impl.ProfilerFiles : object {
    private static FileSystemPath ourThisDirectory;
    private static FileSystemPath ourSymSrvDirectory;
    private static ProfilerFiles();
    [NotNullAttribute]
public static String[] GetHostManagedProcessNames(JetRuntimeId runtimeId);
    [NotNullAttribute]
public static String[] GetUtilityProcessNames(JetRuntimeId runtimeId);
    [ExtensionAttribute]
public static bool ConvertToDebug(CoreConfiguration configuration);
    private static bool IsIncludePdb(bool includePdb);
    [NotNullAttribute]
public static Tuple`3[] GetCoreTransparentFiles(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static Tuple`3[] GetRpcStubFile(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static Tuple`3[] GetCoreFiles(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static Tuple`3[] GetAttachHelperFiles(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static Tuple`3[] GetProcessHelperFiles(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static Tuple`3[] GetWinRTHelperFiles(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static Tuple`3[] GetPdbServerFiles(JetRuntimeId runtimeId, bool debug);
}
internal class JetBrains.Profiler.Windows.Impl.RemoteCoreFilesManager : BaseCoreFilesManager {
    private static InvalidOperationException ourInvalidOperationException;
    public RemoteCoreFilesManager(SysTools sysTools, IDownloadRequests downloadRequests, EffectiveCoreDirs coreDirs, int coreProcessId);
    private static RemoteCoreFilesManager();
    public virtual Tuple`2<SafeFileHandle, FileSystemPath> CreateTemporaryFile();
    public virtual Tuple`3<Guid, SafeFileHandle, FileSystemPath> CreateDiagnosticFile();
    public virtual Tuple`3<Guid, SafeFileHandle, FileSystemPath> CreateStreamingFile();
    public virtual bool CanStartStreaming();
    public virtual Tuple`2<SafeFileHandle, FileSystemPath> TakeStreaming(Guid id);
    public virtual Tuple`3<Guid, SafeFileHandle, FileSystemPath> CreateSnapshotFile();
}
public class JetBrains.Profiler.Windows.Impl.SessionFilesManager : object {
    private static ILogger ourLogger;
    private FileSystemPath myDefaultLocalTemporaryDir;
    private IDownloadRequests myDownloadRequests;
    [NotNullAttribute]
private Lifetime mySessionLifetime;
    [NotNullAttribute]
private ILifetimeIdentity mySessionLifetimeIdentity;
    private bool myIsLocal;
    private SysTools mySysTools;
    public SessionFilesManager(SysTools sysTools, IDownloadRequests downloadRequests, FileSystemPath defaultLocalTemporaryDir, Lifetime sessionLifetime, bool isLocal);
    private static SessionFilesManager();
    public sealed virtual ICoreFilesManager CreateCoreFilesManager(int coreProcessId, CoreDirs coreDirs);
    [CanBeNullAttribute]
public Action`2<IListenerProxy, Lifetime> GetListenerProxyCreator();
    [CompilerGeneratedAttribute]
private void <GetListenerProxyCreator>b__9_0(IListenerProxy listener, Lifetime connectionLifetime);
}
public static class JetBrains.Profiler.Windows.Impl.TerminalLaunchUtil : object {
    public static ValueTuple`3<string, string, UpdateEnvironmentProperty[]> GetTerminalLaunchCommand(Lifetime lifetime, string executable, string arguments, string workingDir, UpdateEnvironmentProperty[] environmentProperties);
    [NotNullAttribute]
private static string GetScriptContent(string executable, string arguments, string workingDir, UpdateEnvironmentProperty[] environmentProperties);
}
public class JetBrains.Profiler.Windows.Impl.WindowsHostManager : HostManagerBase {
    public WindowsHostManager(Lifetime lifetime, IThreading threading);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class JetBrains.Profiler.Windows.Resources.Strings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string HostProfiles_ProcessWithKnownNameUsingPort { get; }
    internal static string HostProfiles_ProcessWithUnknownNameUsingPort { get; }
    internal static string HostProfiles_SystemUsingPort { get; }
    internal static string HostProfiles_UnknownProcessUsingPort { get; }
    internal static string HostProfiles_TerminateGracefully { get; }
    internal static string HostProfiles_FailedAttemptToTerminate { get; }
    internal static string HostProfiles_KillAndContinue { get; }
    internal static string HostProfiler_NoFreePort { get; }
    internal static string HostProfiles_IISExpressConfigurationNotFound { get; }
    internal static string HostProfiles_PortsDiffer { get; }
    internal static string HostProfiles_IISExpressResponseTimeout { get; }
    internal static string HostProfiles_CannotTerminate { get; }
    internal static string HostProfiles_FailedToTerminate { get; }
    internal static string HostProfiles_ApplicationSandboxed { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_HostProfiles_ProcessWithKnownNameUsingPort();
    internal static string get_HostProfiles_ProcessWithUnknownNameUsingPort();
    internal static string get_HostProfiles_SystemUsingPort();
    internal static string get_HostProfiles_UnknownProcessUsingPort();
    internal static string get_HostProfiles_TerminateGracefully();
    internal static string get_HostProfiles_FailedAttemptToTerminate();
    internal static string get_HostProfiles_KillAndContinue();
    internal static string get_HostProfiler_NoFreePort();
    internal static string get_HostProfiles_IISExpressConfigurationNotFound();
    internal static string get_HostProfiles_PortsDiffer();
    internal static string get_HostProfiles_IISExpressResponseTimeout();
    internal static string get_HostProfiles_CannotTerminate();
    internal static string get_HostProfiles_FailedToTerminate();
    internal static string get_HostProfiles_ApplicationSandboxed();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
