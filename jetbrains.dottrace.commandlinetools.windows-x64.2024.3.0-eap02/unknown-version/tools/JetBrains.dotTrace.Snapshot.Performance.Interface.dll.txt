public interface JetBrains.dotTrace.Snapshot.Performance.Interface.IAsyncTaskRunner {
    public IAsyncTaskDispatcher CpuTaskDispatcher { get; }
    public IAsyncTaskDispatcher DiskTaskDispatcher { get; }
    public abstract virtual IAsyncTaskDispatcher get_CpuTaskDispatcher();
    public abstract virtual IAsyncTaskDispatcher get_DiskTaskDispatcher();
}
[ZoneDefinitionAttribute]
public interface JetBrains.dotTrace.Snapshot.Performance.Interface.IDotTraceSnapshotReadersZone {
}
public interface JetBrains.dotTrace.Snapshot.Performance.Interface.IPerformanceSnapshot {
    [NotNullAttribute]
public IFullEnvironmentSection FullEnvironmentSection { get; }
    [NotNullAttribute]
public IMetadataSection MetadataSection { get; }
    [NotNullAttribute]
public IModulePathSection ModulePathSection { get; }
    [CanBeNullAttribute]
public IModuleStatSection ModuleStatSection { get; }
    [NotNullAttribute]
public IPerformanceEnvironmentSection PerformanceEnvironmentSection { get; }
    [CanBeNullAttribute]
public IExternalDataSection ExternalDataSection { get; }
    [NotNullAttribute]
public SectionGroup[] Groups { get; }
    [NotNullAttribute]
public IFuidToMetadataIdConverter FuidConvertor { get; }
    public abstract virtual IFullEnvironmentSection get_FullEnvironmentSection();
    public abstract virtual IMetadataSection get_MetadataSection();
    public abstract virtual IModulePathSection get_ModulePathSection();
    public abstract virtual IModuleStatSection get_ModuleStatSection();
    public abstract virtual IPerformanceEnvironmentSection get_PerformanceEnvironmentSection();
    public abstract virtual IExternalDataSection get_ExternalDataSection();
    public abstract virtual SectionGroup[] get_Groups();
    public abstract virtual IFuidToMetadataIdConverter get_FuidConvertor();
}
[ExtensionAttribute]
public static class JetBrains.dotTrace.Snapshot.Performance.Interface.Section.CallTree.CallTreeSectionHelper : object {
    [ExtensionAttribute]
public static void EnumerateBatch(ICallTreeSection section, CallTreeSectionNode node, CallTreeSectionNode[] buf, ProcessBatchDirectDelegate`1<CallTreeSectionNode> actor);
    [ExtensionAttribute]
public static void EnumerateBatch(ICallTreeSection section, CallTreeSectionNode node, CallTreeSectionNodeSimple[] buf, ProcessBatchDirectDelegate`1<CallTreeSectionNodeSimple> actor);
    [ExtensionAttribute]
public static void EnumerateBatch(ICallTreeSection section, CallTreeSectionOffset left, CallTreeSectionOffset right, CallTreeSectionNodeSimple[] buf, ProcessBatchDirectDelegate`1<CallTreeSectionNodeSimple> actor);
    [ExtensionAttribute]
public static void EnumerateBatch(ICallTreeSection section, CallTreeSectionOffset left, CallTreeSectionOffset right, FunctionId[] buf, ProcessBatchDirectDelegate`1<FunctionId> actor);
    [ExtensionAttribute]
public static void EnumerateBatchReverse(ICallTreeSection section, CallTreeSectionOffset left, CallTreeSectionOffset right, FunctionId[] buf, ProcessBatchReverseDelegate`1<FunctionId> actor);
    [ExtensionAttribute]
public static void EnumerateBatchReverse(ICallTreeSection section, CallTreeSectionOffset left, CallTreeSectionOffset right, CallTreeSectionNode[] buf, ProcessBatchReverseDelegate`1<CallTreeSectionNode> actor);
    [ExtensionAttribute]
private static void EnumerateBatch(ICallTreeSection section, CallTreeSectionNode node, T[] buf, ProcessBatchDirectDelegate`1<T> actor, ReadBatchDelegate`1<T> readActor);
    [ExtensionAttribute]
private static void EnumerateBatchCore(ICallTreeSection section, int groupId, CallTreeSectionOffset left, CallTreeSectionOffset right, T[] buf, ProcessBatchDirectDelegate`1<T> actor, ReadBatchDelegate`1<T> readActor);
    [ExtensionAttribute]
private static void EnumerateBatchReverseCore(ICallTreeSection section, int groupId, CallTreeSectionOffset left, CallTreeSectionOffset right, T[] buf, ProcessBatchReverseDelegate`1<T> actor, ReadBatchDelegate`1<T> readActor);
}
[ExtensionAttribute]
public static class JetBrains.dotTrace.Snapshot.Performance.Interface.Section.CallTree.CallTreeSectionNodeHelpers : object {
    [ExtensionAttribute]
public static SectionOffset`1<ICallTreeInjectSection> GetInjectOffset(CallTreeSectionNode node);
    [ExtensionAttribute]
public static bool HasInjectInfo(CallTreeSectionNode node);
    [ExtensionAttribute]
public static bool IsInsideYourTree(CallTreeSectionNode currentNode, CallTreeSectionNode node);
    [ExtensionAttribute]
public static bool IsInsideYourTree(CallTreeSectionNode node, CallTreeSectionOffset offset);
    [ExtensionAttribute]
public static bool IsInsideYourTreeInclusive(CallTreeSectionNode node, CallTreeSectionOffset offset);
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.dotTrace.Snapshot.Performance.Interface.Section.CallTree.ICallTreeInjectSection {
    public MeasureNode[] Item { get; }
    public abstract virtual MeasureNode[] get_Item(SectionOffset`1<ICallTreeInjectSection> offset);
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.dotTrace.Snapshot.Performance.Interface.Section.CallTree.ICallTreeSection {
    public long Size { get; }
    public int Key { get; }
    public int RecordSize { get; }
    public UInt32 Id { get; }
    public ThreadFlags Flags { get; }
    [NotNullAttribute]
public string Name { get; }
    public CallTreeSectionOffset Root { get; }
    public UInt32 ThreadCount { get; }
    public bool UseCache { get; public set; }
    public CallTreeHeaderFull Header { get; }
    public CallTreeSectionNode Item { get; }
    public IFastSectionAsStreamReader FastReader { get; }
    public abstract virtual long get_Size();
    public abstract virtual int get_Key();
    public abstract virtual int get_RecordSize();
    public abstract virtual UInt32 get_Id();
    public abstract virtual ThreadFlags get_Flags();
    public abstract virtual string get_Name();
    public abstract virtual CallTreeSectionOffset get_Root();
    public abstract virtual IEnumerable`1<CallTreeSectionNode> GetChildren(CallTreeSectionNode node);
    public abstract virtual UInt32 get_ThreadCount();
    public abstract virtual bool get_UseCache();
    public abstract virtual void set_UseCache(bool value);
    public abstract virtual CallTreeHeaderFull get_Header();
    public abstract virtual CallTreeSectionNode get_Item(CallTreeSectionOffset offset);
    public abstract virtual int NodeIndex(CallTreeSectionOffset offset);
    public abstract virtual CallTreeSectionOffset NodeOffset(int index);
    public abstract virtual bool IndexExists(int index);
    public abstract virtual int ReadNodes(CallTreeSectionNode[] buffer, CallTreeSectionOffset leftOffset, CallTreeSectionOffset offset, int maxRead);
    public abstract virtual IFastSectionAsStreamReader get_FastReader();
}
public interface JetBrains.dotTrace.Snapshot.Performance.Interface.Section.CallTree.IFastSectionAsStreamReader {
    public abstract virtual int ReadNodesFast(CallTreeSectionNode[] buffer, CallTreeSectionOffset leftOffset, CallTreeSectionOffset offset, int maxRead);
    public abstract virtual int ReadNodesFast(CallTreeSectionNodeSimple[] buffer, CallTreeSectionOffset leftOffset, CallTreeSectionOffset offset, int count);
    public abstract virtual int ReadNodesFast(FunctionId[] buffer, CallTreeSectionOffset leftOffset, CallTreeSectionOffset offset, int count);
    public abstract virtual int ReadNodesReverseFast(FunctionId[] buffer, CallTreeSectionOffset leftOffset, CallTreeSectionOffset offset, int count);
    public abstract virtual int ReadNodesReverseFast(CallTreeSectionNode[] buffer, CallTreeSectionOffset leftOffset, CallTreeSectionOffset offset, int count);
    public abstract virtual int ReadNodesReverseFastI(CallTreeSectionNode[] buffer, CallTreeSectionOffset offset, int count);
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.dotTrace.Snapshot.Performance.Interface.Section.CallTreeHeaderIndex.IHeaderAccess {
    public IHeaderIndexEntry Item { get; }
    public abstract virtual IHeaderIndexEntry get_Item(FunctionId fid);
    [CanBeNullAttribute]
public abstract virtual IHeaderDataNode GetHeader(FunctionId fid);
    public abstract virtual IEnumerable`1<FunctionId> FIds();
    public abstract virtual bool Contains(FunctionId fid);
}
public interface JetBrains.dotTrace.Snapshot.Performance.Interface.Section.CallTreeHeaderIndex.IHeaderIndexEntry {
    public int GroupIndex { get; }
    public ulong OwnTimeSum { get; }
    public ulong TotalTimeSum { get; }
    public ulong CallCountSum { get; }
    public Flags Flags { get; }
    public CallTreeSectionOffset MinCallTreeOffset { get; }
    public CallTreeSectionOffset MaxCallTreeOffset { get; }
    public SectionOffset`1<IHeaderDataSection> HeaderOffset { get; }
    public abstract virtual int get_GroupIndex();
    public abstract virtual ulong get_OwnTimeSum();
    public abstract virtual ulong get_TotalTimeSum();
    public abstract virtual ulong get_CallCountSum();
    public abstract virtual Flags get_Flags();
    public abstract virtual CallTreeSectionOffset get_MinCallTreeOffset();
    public abstract virtual CallTreeSectionOffset get_MaxCallTreeOffset();
    public abstract virtual SectionOffset`1<IHeaderDataSection> get_HeaderOffset();
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.dotTrace.Snapshot.Performance.Interface.Section.CallTreeHeaderIndex.IHeaderIndexSection {
    public long Size { get; }
    [NotNullAttribute]
public IHeaderIndexEntry Item { get; }
    public IEnumerable`1<KeyValuePair`2<FunctionId, IHeaderIndexEntry>> Entries { get; }
    public abstract virtual long get_Size();
    public abstract virtual bool Contains(FunctionId fid);
    public abstract virtual bool TryGetValue(FunctionId fid, IHeaderIndexEntry& entry);
    public abstract virtual IHeaderIndexEntry get_Item(FunctionId fid);
    public abstract virtual IEnumerable`1<KeyValuePair`2<FunctionId, IHeaderIndexEntry>> get_Entries();
}
public interface JetBrains.dotTrace.Snapshot.Performance.Interface.Section.CallTreeHeaderIndex.IHeaderSinglesSection {
    public long Size { get; }
    public IEnumerable`1<KeyValuePair`2<FunctionId, CallTreeSectionOffset>> Entries { get; }
    public abstract virtual long get_Size();
    public abstract virtual bool Contains(FunctionId fid);
    public abstract virtual bool TryGetValue(FunctionId fid, CallTreeSectionOffset& callTreeOffset);
    public abstract virtual IEnumerable`1<KeyValuePair`2<FunctionId, CallTreeSectionOffset>> get_Entries();
}
public interface JetBrains.dotTrace.Snapshot.Performance.Interface.Section.PerformanceEnvironment.IPerformanceEnvironmentSection {
    public ulong TimeResolution { get; }
    public abstract virtual ulong get_TimeResolution();
}
public class JetBrains.dotTrace.Snapshot.Performance.Interface.Section.SectionGroup : object {
    [NotNullAttribute]
public ICallTreeSection CallTreeSection;
    [NotNullAttribute]
public IHeaderSinglesSection HeaderSinglesSection;
    [NotNullAttribute]
public IHeaderIndexSection HeaderIndexSection;
    [NotNullAttribute]
public IHeaderDataSection HeaderDataSection;
    [NotNullAttribute]
public IHeaderAccess HeaderAccess;
    [CanBeNullAttribute]
public ICallTreeInjectSection CallTreeInjectSection;
    public SectionGroup(ICallTreeSection callTreeSection, IHeaderSinglesSection headerSinglesSection, IHeaderIndexSection headerIndexSection, IHeaderDataSection headerDataSection, ICallTreeInjectSection callTreeInjectSection, IHeaderAccess headerAccess);
}
[ZoneMarkerAttribute]
public class JetBrains.dotTrace.Snapshot.Performance.Interface.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
