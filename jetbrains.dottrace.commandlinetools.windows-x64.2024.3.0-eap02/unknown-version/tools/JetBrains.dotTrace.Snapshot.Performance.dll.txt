[ShellComponentAttribute("10")]
public class JetBrains.dotTrace.Snapshot.Performance.Components.AsyncTaskRunner : object {
    [CompilerGeneratedAttribute]
private IAsyncTaskDispatcher <CpuTaskDispatcher>k__BackingField;
    [CompilerGeneratedAttribute]
private IAsyncTaskDispatcher <DiskTaskDispatcher>k__BackingField;
    public IAsyncTaskDispatcher CpuTaskDispatcher { get; }
    public IAsyncTaskDispatcher DiskTaskDispatcher { get; }
    public AsyncTaskRunner(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public sealed virtual IAsyncTaskDispatcher get_CpuTaskDispatcher();
    [CompilerGeneratedAttribute]
public sealed virtual IAsyncTaskDispatcher get_DiskTaskDispatcher();
}
[ZoneMarkerAttribute]
public class JetBrains.dotTrace.Snapshot.Performance.Components.ZoneMarker : object {
}
public class JetBrains.dotTrace.Snapshot.Performance.EnvironmentOnlySnapshotReader : SnapshotReader {
    [CompilerGeneratedAttribute]
private IPerformanceEnvironmentSection <PerformanceEnvironmentSection>k__BackingField;
    [CompilerGeneratedAttribute]
private IFullEnvironmentSection <FullEnvironmentSection>k__BackingField;
    [CompilerGeneratedAttribute]
private ProfileConfiguration <Config>k__BackingField;
    public IPerformanceEnvironmentSection PerformanceEnvironmentSection { get; private set; }
    public IFullEnvironmentSection FullEnvironmentSection { get; }
    public ProfileConfiguration Config { get; private set; }
    public EnvironmentOnlySnapshotReader(IWriteableSnapshotStorage storage, IHostManager hostManager);
    [CompilerGeneratedAttribute]
public IPerformanceEnvironmentSection get_PerformanceEnvironmentSection();
    [CompilerGeneratedAttribute]
private void set_PerformanceEnvironmentSection(IPerformanceEnvironmentSection value);
    [CompilerGeneratedAttribute]
public IFullEnvironmentSection get_FullEnvironmentSection();
    [CompilerGeneratedAttribute]
public ProfileConfiguration get_Config();
    [CompilerGeneratedAttribute]
private void set_Config(ProfileConfiguration value);
    private void ExtractDataFromEnvSection(IHostManager hostManager);
}
public class JetBrains.dotTrace.Snapshot.Performance.PerformanceAdvancedMethodInfoProvider : object {
    private static ILogger ourLogger;
    private IModulePathSection myProfilerModulePathSection;
    private IFuidToMetadataIdConverter myFuidToMetadataConverter;
    private IMetadataSection myMetadataSection;
    private SignaturePresenter mySignaturePresenter;
    public PerformanceAdvancedMethodInfoProvider(IModulePathSection modulePathSection, IFuidToMetadataIdConverter fuidToMetadataIdConverter, IMetadataSection metadataSection);
    private static PerformanceAdvancedMethodInfoProvider();
    public sealed virtual IAdvancedMethodInfoProvider Get(Lifetime lifetime);
    private CoreMetadataInfoProvider BuildInfoProvider(IMetadataSectionAssemblyProvider metadataProvider);
    private bool TryGetMetadataId(FunctionUIDm fuid, MetadataId& metadataId);
    private string GetSignature(FunctionUIDm fuid, IMetadataSectionAssemblyProvider assemblyProvider);
}
public class JetBrains.dotTrace.Snapshot.Performance.PerformanceSnapshotReader : SnapshotReader {
    public static UInt32 Magic;
    public ISnapshotStorage Storage;
    [CompilerGeneratedAttribute]
private ProfileConfiguration <Config>k__BackingField;
    private FuidToMetadataIdConverter myFuidConvertor;
    [CompilerGeneratedAttribute]
private SectionGroup[] <Groups>k__BackingField;
    [CompilerGeneratedAttribute]
private IModulePathSection <ModulePathSection>k__BackingField;
    [CompilerGeneratedAttribute]
private IModuleStatSection <ModuleStatSection>k__BackingField;
    [CompilerGeneratedAttribute]
private IFullEnvironmentSection <FullEnvironmentSection>k__BackingField;
    [CompilerGeneratedAttribute]
private IMetadataSection <MetadataSection>k__BackingField;
    [CompilerGeneratedAttribute]
private IExternalDataSection <ExternalDataSection>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceEnvironmentSection <PerformanceEnvironmentSection>k__BackingField;
    [CompilerGeneratedAttribute]
private RealtimeDataSection <RealtimeChartSection>k__BackingField;
    [CompilerGeneratedAttribute]
private IAdvancedMethodInfoProviderAccessor <AdvancedMethodInfoProviderAccessor>k__BackingField;
    public ProfileConfiguration Config { get; private set; }
    public SectionGroup[] Groups { get; }
    public IModulePathSection ModulePathSection { get; private set; }
    public IModuleStatSection ModuleStatSection { get; private set; }
    public IFullEnvironmentSection FullEnvironmentSection { get; }
    public IMetadataSection MetadataSection { get; private set; }
    public IExternalDataSection ExternalDataSection { get; private set; }
    public IPerformanceEnvironmentSection PerformanceEnvironmentSection { get; private set; }
    public IFuidToMetadataIdConverter FuidConvertor { get; }
    public RealtimeDataSection RealtimeChartSection { get; }
    public IAdvancedMethodInfoProviderAccessor AdvancedMethodInfoProviderAccessor { get; }
    public PerformanceSnapshotReader(IWriteableSnapshotStorage storage);
    public PerformanceSnapshotReader(IWriteableSnapshotStorage storage, IProgressIndicator progress, IHostManager hostManager);
    [CompilerGeneratedAttribute]
public ProfileConfiguration get_Config();
    [CompilerGeneratedAttribute]
private void set_Config(ProfileConfiguration value);
    private void ExtractDataFromEnvSection(IHostManager hostManager);
    private void AddCompleteGroup(List`1<SectionGroup> groups, CallTreeSection& callTree, HeaderSinglesSection& headerSingles, HeaderIndexSection& headerIndex, HeaderDataSection& headerData, CallTreeInjectSection& inject);
    private static void AssertInvariant(HeaderIndexSection headerIndex, HeaderSinglesSection headerSingles, HeaderDataSection headerData, CallTreeInjectSection injects);
    private void AssertInvariantSingles(FuidToMetadataIdSection fuidSection);
    [CompilerGeneratedAttribute]
public sealed virtual SectionGroup[] get_Groups();
    [CompilerGeneratedAttribute]
public sealed virtual IModulePathSection get_ModulePathSection();
    [CompilerGeneratedAttribute]
private void set_ModulePathSection(IModulePathSection value);
    [CompilerGeneratedAttribute]
public sealed virtual IModuleStatSection get_ModuleStatSection();
    [CompilerGeneratedAttribute]
private void set_ModuleStatSection(IModuleStatSection value);
    [CompilerGeneratedAttribute]
public sealed virtual IFullEnvironmentSection get_FullEnvironmentSection();
    [CompilerGeneratedAttribute]
public sealed virtual IMetadataSection get_MetadataSection();
    [CompilerGeneratedAttribute]
private void set_MetadataSection(IMetadataSection value);
    [CompilerGeneratedAttribute]
public sealed virtual IExternalDataSection get_ExternalDataSection();
    [CompilerGeneratedAttribute]
private void set_ExternalDataSection(IExternalDataSection value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceEnvironmentSection get_PerformanceEnvironmentSection();
    [CompilerGeneratedAttribute]
private void set_PerformanceEnvironmentSection(IPerformanceEnvironmentSection value);
    public sealed virtual IFuidToMetadataIdConverter get_FuidConvertor();
    [CompilerGeneratedAttribute]
public RealtimeDataSection get_RealtimeChartSection();
    [CompilerGeneratedAttribute]
public IAdvancedMethodInfoProviderAccessor get_AdvancedMethodInfoProviderAccessor();
}
[DefaultMemberAttribute("Item")]
public class JetBrains.dotTrace.Snapshot.Performance.Section.CallTreeInjectSection : BaseSection`1<ISectionReader> {
    private int myKey;
    public static ushort Type;
    private Int64Reader myInt64Reader;
    [NotNullAttribute]
public MeasureNode[] Item { get; }
    public CallTreeInjectSection(SnapshotStorageSection section, int key);
    public sealed virtual MeasureNode[] get_Item(SectionOffset`1<ICallTreeInjectSection> offset);
    public sealed virtual void Dispose();
}
[DefaultMemberAttribute("Item")]
public class JetBrains.dotTrace.Snapshot.Performance.Section.CallTreeSection : BaseSection`1<ISectionReader> {
    public static ushort Type;
    private CallTreeOffsetReader myCallTreeOffsetReader;
    private SectionOffsetReader`1<ICallTreeInjectSection> myInjectOffsetReader;
    private UInt64Reader myUInt64Reader;
    private Dictionary`2<CallTreeSectionOffset, CallTreeSectionNode> myCache;
    private SectionByStreamReader myFastReader;
    [CompilerGeneratedAttribute]
private int <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ThreadFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private CallTreeSectionOffset <Root>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ThreadCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCache>k__BackingField;
    [CompilerGeneratedAttribute]
private CallTreeHeaderFull <Header>k__BackingField;
    public int RecordSize { get; }
    private int HeaderSize { get; }
    private int MaxIndex { get; }
    public int Key { get; }
    public string Group { get; private set; }
    public UInt32 Id { get; private set; }
    public string Name { get; private set; }
    public ThreadFlags Flags { get; private set; }
    public CallTreeSectionOffset Root { get; private set; }
    public UInt32 ThreadCount { get; private set; }
    public bool UseCache { get; public set; }
    public CallTreeHeaderFull Header { get; private set; }
    public IFastSectionAsStreamReader FastReader { get; }
    public CallTreeSectionNode Item { get; }
    public CallTreeSection(SnapshotStorageSection section, int key);
    public sealed virtual void Dispose();
    public sealed virtual int get_RecordSize();
    private int get_HeaderSize();
    private int get_MaxIndex();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Key();
    [CompilerGeneratedAttribute]
public string get_Group();
    [CompilerGeneratedAttribute]
private void set_Group(string value);
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(UInt32 value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ThreadFlags get_Flags();
    [CompilerGeneratedAttribute]
private void set_Flags(ThreadFlags value);
    [CompilerGeneratedAttribute]
public sealed virtual CallTreeSectionOffset get_Root();
    [CompilerGeneratedAttribute]
private void set_Root(CallTreeSectionOffset value);
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_ThreadCount();
    [CompilerGeneratedAttribute]
private void set_ThreadCount(UInt32 value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseCache();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseCache(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual CallTreeHeaderFull get_Header();
    [CompilerGeneratedAttribute]
private void set_Header(CallTreeHeaderFull value);
    public sealed virtual IFastSectionAsStreamReader get_FastReader();
    public BinaryReader GetReader();
    public sealed virtual CallTreeSectionNode get_Item(CallTreeSectionOffset offset);
    public sealed virtual int ReadNodes(CallTreeSectionNode[] buf, CallTreeSectionOffset leftOffset, CallTreeSectionOffset offset, int maxRead);
    public sealed virtual IEnumerable`1<CallTreeSectionNode> GetChildren(CallTreeSectionNode node);
    public sealed virtual int NodeIndex(CallTreeSectionOffset offset);
    public sealed virtual CallTreeSectionOffset NodeOffset(int index);
    public sealed virtual bool IndexExists(int index);
    private bool IsInside(CallTreeSectionOffset offset);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.dotTrace.Snapshot.Performance.Section.HeaderAccess : object {
    private CallTreeSection CallTree;
    private HeaderIndexSection HeaderIndexSection;
    private HeaderSinglesSection HeaderOptSection;
    private HeaderDataSection HeaderDataSection;
    public IHeaderIndexEntry Item { get; }
    public HeaderAccess(CallTreeSection callTree, HeaderIndexSection headerIndexSection, HeaderSinglesSection headerOptSection, HeaderDataSection headerDataSection);
    public sealed virtual bool Contains(FunctionId fid);
    public sealed virtual IHeaderIndexEntry get_Item(FunctionId fid);
    public sealed virtual IHeaderDataNode GetHeader(FunctionId fid);
    [IteratorStateMachineAttribute("JetBrains.dotTrace.Snapshot.Performance.Section.HeaderAccess/<FIds>d__11")]
public sealed virtual IEnumerable`1<FunctionId> FIds();
}
[DefaultMemberAttribute("Item")]
public class JetBrains.dotTrace.Snapshot.Performance.Section.HeaderDataSection : BaseSection`1<IHeaderSectionReader> {
    public static ushort Type;
    [NotNullAttribute]
private CallTreeOffsetReader myCallTreeOffsetReader;
    public IHeaderDataNode Item { get; }
    public HeaderDataSection(SnapshotStorageSection section, int key);
    public sealed virtual IHeaderDataNode get_Item(FunctionId fid, SectionOffset`1<IHeaderDataSection> offset, Flags flags);
    public BinaryReader GetReader();
}
[DefaultMemberAttribute("Item")]
public class JetBrains.dotTrace.Snapshot.Performance.Section.HeaderIndexSection : BaseSection`1<IBaseSectionReader> {
    public static ushort Type;
    private SnapshotStorageSection Section;
    private Dictionary`2<FunctionId, IHeaderIndexEntry> myPrimaryIndices;
    public IHeaderIndexEntry Item { get; }
    public IEnumerable`1<KeyValuePair`2<FunctionId, IHeaderIndexEntry>> Entries { get; }
    public HeaderIndexSection(SnapshotStorageSection section, int key);
    public sealed virtual void Dispose();
    public sealed virtual IHeaderIndexEntry get_Item(FunctionId fid);
    public sealed virtual bool Contains(FunctionId fid);
    public sealed virtual bool TryGetValue(FunctionId fid, IHeaderIndexEntry& entry);
    public sealed virtual IEnumerable`1<KeyValuePair`2<FunctionId, IHeaderIndexEntry>> get_Entries();
}
public class JetBrains.dotTrace.Snapshot.Performance.Section.HeaderSinglesSection : BaseSection`1<IBaseSectionReader> {
    public static ushort Type;
    private Dictionary`2<FunctionId, CallTreeSectionOffset> myPrimaryIndices;
    public IEnumerable`1<KeyValuePair`2<FunctionId, CallTreeSectionOffset>> Entries { get; }
    public HeaderSinglesSection(SnapshotStorageSection section, int sectionKey);
    public sealed virtual void Dispose();
    public sealed virtual bool Contains(FunctionId fid);
    public sealed virtual IEnumerable`1<KeyValuePair`2<FunctionId, CallTreeSectionOffset>> get_Entries();
    public sealed virtual bool TryGetValue(FunctionId fid, CallTreeSectionOffset& callTreeOffset);
}
public interface JetBrains.dotTrace.Snapshot.Performance.Section.IHeaderSectionReader {
    public abstract virtual IHeaderDataNode ReadNode(BinaryReader reader, SectionOffset`1<IHeaderDataSection> offset, FunctionId fid, Flags flags);
}
public class JetBrains.dotTrace.Snapshot.Performance.Section.Node : NodeBase {
    public int GroupId;
    public int CalltreeOffsetSize;
    private IHeaderNodeRefsProvider myNodeRefsProvider;
    public IEnumerable`1<HeaderNodeRef> Nodes { get; }
    private Node(FunctionId methodId, int groupId, Flags flags, UInt32 nodesCount, long firstHeaderOffset, int calltreeOffsetSize, IHeaderNodeRefsProvider nodeRefsProvider);
    public virtual IEnumerable`1<HeaderNodeRef> get_Nodes();
    public virtual UInt32 GetNodesCount(CallTreeSectionOffset left, CallTreeSectionOffset right);
    public virtual IEnumerable`1<HeaderNodeRef> GetNodes(CallTreeSectionOffset left, CallTreeSectionOffset right);
    public virtual int ReadNodeRefsFast(int startIndexInHeader, HeaderNodeRef[] buffer);
    [NotNullAttribute]
internal static Node Create(FunctionId methodId, int groupId, Flags flags, UInt32 nodesCount, long firstHeaderOffset, int calltreeOffsetSize, IHeaderNodeRefsProvider nodeRefsProvider);
}
public abstract class JetBrains.dotTrace.Snapshot.Performance.Section.NodeBase : object {
    [CompilerGeneratedAttribute]
private FunctionId <MethodId>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <NodesCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <FirstHeaderOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private Flags <Flags>k__BackingField;
    public FunctionId MethodId { get; }
    public UInt32 NodesCount { get; protected set; }
    public long FirstHeaderOffset { get; public set; }
    public IEnumerable`1<HeaderNodeRef> Nodes { get; }
    protected Flags Flags { get; protected set; }
    public bool IsNoRecursion { get; }
    public bool HasNoChildren { get; }
    protected NodeBase(FunctionId methodId, Flags flags);
    [CompilerGeneratedAttribute]
public sealed virtual FunctionId get_MethodId();
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_NodesCount();
    [CompilerGeneratedAttribute]
protected void set_NodesCount(UInt32 value);
    [CompilerGeneratedAttribute]
public long get_FirstHeaderOffset();
    [CompilerGeneratedAttribute]
public void set_FirstHeaderOffset(long value);
    public abstract virtual IEnumerable`1<HeaderNodeRef> get_Nodes();
    public abstract virtual UInt32 GetNodesCount(CallTreeSectionOffset left, CallTreeSectionOffset right);
    public abstract virtual IEnumerable`1<HeaderNodeRef> GetNodes(CallTreeSectionOffset left, CallTreeSectionOffset right);
    public abstract virtual int ReadNodeRefsFast(int startIndexInHeader, HeaderNodeRef[] buffer);
    [CompilerGeneratedAttribute]
protected Flags get_Flags();
    [CompilerGeneratedAttribute]
protected void set_Flags(Flags value);
    public sealed virtual bool get_IsNoRecursion();
    public sealed virtual bool get_HasNoChildren();
}
public class JetBrains.dotTrace.Snapshot.Performance.Section.PerformanceEnvironmentSection : BaseSection`1<IBaseSectionReader> {
    public static ushort Type;
    [CompilerGeneratedAttribute]
private ulong <TimeResolution>k__BackingField;
    public ulong TimeResolution { get; private set; }
    public PerformanceEnvironmentSection(SnapshotStorageSection section);
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_TimeResolution();
    [CompilerGeneratedAttribute]
private void set_TimeResolution(ulong value);
}
public class JetBrains.dotTrace.Snapshot.Performance.Section.SectionByStreamReader : object {
    private CallTreeHeaderFull mySectionHeader;
    private Func`1<BinaryReader> myGetReader;
    public SectionByStreamReader(CallTreeHeaderFull sectionHeader, Func`1<BinaryReader> getReaderF);
    public sealed virtual int ReadNodesFast(CallTreeSectionNode[] buffer, CallTreeSectionOffset leftOffset, CallTreeSectionOffset offset, int count);
    public sealed virtual int ReadNodesFast(CallTreeSectionNodeSimple[] buffer, CallTreeSectionOffset leftOffset, CallTreeSectionOffset offset, int count);
    public sealed virtual int ReadNodesFast(FunctionId[] buffer, CallTreeSectionOffset leftOffset, CallTreeSectionOffset offset, int count);
    public sealed virtual int ReadNodesReverseFast(FunctionId[] buffer, CallTreeSectionOffset leftOffset, CallTreeSectionOffset offset, int count);
    public sealed virtual int ReadNodesReverseFast(CallTreeSectionNode[] buffer, CallTreeSectionOffset leftOffset, CallTreeSectionOffset offset, int count);
    public sealed virtual int ReadNodesReverseFastI(CallTreeSectionNode[] buffer, CallTreeSectionOffset offset, int count);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
