[ExtensionAttribute]
public static class JetBrains.dotTrace.SnapshotsManagement.DotTraceRemoteInstanceHelper : object {
    public static string SnapshotRemotePropertyName;
    public static string SnapshotType;
    [ExtensionAttribute]
public static string GetRemoteSnapshotName(IRemoteInstance remoteInstance);
    [ExtensionAttribute]
public static string GetRemoteSnapshotType(IRemoteInstance remoteInstance);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.dotTrace.SnapshotsManagement.ISnapshotManager {
    public bool HasSnapshot { get; }
    public IProperty`1<ISnapshot> CurrentSnapshot { get; }
    public abstract virtual bool get_HasSnapshot();
    public abstract virtual IProperty`1<ISnapshot> get_CurrentSnapshot();
    public abstract virtual bool SaveSnapshotAs(ISnapshot snapshot, Action`1<FileSystemPath> onSuccessAction, string presentableSnapshotName);
    public abstract virtual void Open(FileSystemPath indexFile, string presentableSnapshotName, string reason);
    [CanBeNullAttribute]
public abstract virtual ISnapshot OpenAside(Lifetime lifetime, FileSystemPath indexFile);
    public abstract virtual void Close();
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.dotTrace.SnapshotsManagement.ISnapshotManagerUi {
    public abstract virtual Nullable`1<bool> CanCloseSnapshotRequest();
    public abstract virtual FileSystemPath SaveSnapshotDialog(string preferredName);
    public abstract virtual T ExecuteUiTask(string taskName, TaskCancelable taskType, UiTaskDelegate`1<T> uiTask);
    public abstract virtual void ShowError(string errorStr, string description);
    public abstract virtual FileSystemPath OpenSnapshotDialog();
}
[ShellComponentAttribute("16")]
public class JetBrains.dotTrace.SnapshotsManagement.LegacySnapshotComponentTracker : object {
    private IDataSink`1<IComponentContainer> mySink;
    [CompilerGeneratedAttribute]
private IDataProvider`1<IComponentContainer> <Provider>k__BackingField;
    public IDataProvider`1<IComponentContainer> Provider { get; }
    public IComponentContainer Value { get; }
    public LegacySnapshotComponentTracker(Lifetime lifetime, ISnapshotManager snapshotManager);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<IComponentContainer> get_Provider();
    public sealed virtual IComponentContainer get_Value();
}
[ShellComponentAttribute("10")]
public class JetBrains.dotTrace.SnapshotsManagement.RecentSnapshots.ActiveRecentSnapshotTracker : object {
    private static ReadonlyToken ourReadonlyCookie;
    [NotNullAttribute]
private IRecentSnapshotsStorage myRecentSnapshotsStorage;
    [CompilerGeneratedAttribute]
private IProperty`1<ILiveRecentSnapshot> <CurrentRecentSnapshot>k__BackingField;
    public IProperty`1<ILiveRecentSnapshot> CurrentRecentSnapshot { get; }
    public ActiveRecentSnapshotTracker(Lifetime lifetime, ISnapshotManager snapshotManager, IRecentSnapshotsStorage recentSnapshotsStorage);
    private static ActiveRecentSnapshotTracker();
    [CompilerGeneratedAttribute]
public IProperty`1<ILiveRecentSnapshot> get_CurrentRecentSnapshot();
    private ILiveRecentSnapshot ReadRecentSnapshot(ISnapshot snapshot, Lifetime lifetime);
}
[ZoneMarkerAttribute]
public class JetBrains.dotTrace.SnapshotsManagement.RecentSnapshots.ZoneMarker : object {
}
[ShellComponentAttribute("16")]
public class JetBrains.dotTrace.SnapshotsManagement.SnapshotManager : object {
    private static string CantSaveMessage;
    private ILogger myLogger;
    private Lifetime myLifetime;
    private IComponentContainer myComponentContainer;
    private ISnapshotManagerUi mySnapshotManagerUi;
    private IPartCatalogSet myCatalogueSet;
    private IHostManager myHostMgr;
    private ProductConfigurations myConfigs;
    private static ReadonlyToken ReadonlyCookie;
    private List`1<SideSnapshotData> myOpenSideSnapshots;
    private bool myStartedToLoadSnapshot;
    private SequentialLifetimes myMainSnapshotLifetime;
    private IRemotePropertyRegistrator myRemotePropertyRegistrator;
    private Nullable`1<Lifetime> myCurrentSnapshotLifetime;
    [CompilerGeneratedAttribute]
private IProperty`1<ISnapshot> <CurrentSnapshot>k__BackingField;
    public bool HasSnapshot { get; }
    public IProperty`1<ISnapshot> CurrentSnapshot { get; }
    public SnapshotManager(Lifetime lifetime, IComponentContainer componentContainer, ISnapshotManagerUi snapshotManagerUi, ShellPartCatalogSet catalogueSet, IHostManager hostMgr, IRemotePropertyRegistrator propertyRegistrator, ProductConfigurations configs);
    private static SnapshotManager();
    public sealed virtual bool get_HasSnapshot();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<ISnapshot> get_CurrentSnapshot();
    public sealed virtual void Open(FileSystemPath indexFile, string presentableName, string reason);
    public sealed virtual ISnapshot OpenAside(Lifetime lifetime, FileSystemPath indexFile);
    private ISnapshot OpenSnapshotInternal(Lifetime lifetime, FileSystemPath indexFile, bool initializeComponents, string presentableName, string reason);
    private ISnapshot Load(Lifetime lifetime, FileSystemPath indexFile, IProgressIndicator progress, string presentableName, string reason);
    public sealed virtual bool SaveSnapshotAs(ISnapshot snapshot, Action`1<FileSystemPath> onSuccessAction, string presentableSnapshotName);
    private void DeleteSnapshot(FileSystemPath snapshotIndexFilePath);
    private static void SaveSnapshotImpl(PerformanceSnapshot snapshot, IProgressIndicator progress, FileSystemPath path);
    public sealed virtual void Close();
}
[ShellComponentAttribute("16")]
public class JetBrains.dotTrace.SnapshotsManagement.SnapshotManagerUiBase : object {
    private ILogger myLogger;
    public virtual Nullable`1<bool> CanCloseSnapshotRequest();
    public virtual FileSystemPath SaveSnapshotDialog(string preferredName);
    public virtual FileSystemPath OpenSnapshotDialog();
    protected virtual UiTaskResult`1<T> RunTask(Lifetime lifetime, UiTaskDelegate`1<T> uiTask, string taskName, TaskCancelable taskType);
    public virtual void ShowError(string errorStr, string description);
    public sealed virtual T ExecuteUiTask(string taskName, TaskCancelable taskType, UiTaskDelegate`1<T> uiTask);
}
[SnapshotComponentAttribute("", "10")]
public class JetBrains.dotTrace.SnapshotsManagement.SnapshotStructureValidator : object {
    [CompilerGeneratedAttribute]
private bool <IsSnapshotValid>k__BackingField;
    [CompilerGeneratedAttribute]
private SnapshotStructureError <Error>k__BackingField;
    public bool IsSnapshotValid { get; private set; }
    public SnapshotStructureError Error { get; private set; }
    public SnapshotStructureValidator(PerformanceSnapshot snapshot);
    public sealed virtual void InvalidateSnapshot(SnapshotStructureError reason);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSnapshotValid();
    [CompilerGeneratedAttribute]
private void set_IsSnapshotValid(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual SnapshotStructureError get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(SnapshotStructureError value);
}
public class JetBrains.dotTrace.SnapshotsManagement.UiTaskDelegate`1 : MulticastDelegate {
    public UiTaskDelegate`1(object object, IntPtr method);
    public virtual UiTaskResult`1<T> Invoke(Lifetime lifetime, IProgressIndicator progressIndicator, IForegroundProgressPresenter foregroundProgressPresenter);
    public virtual IAsyncResult BeginInvoke(Lifetime lifetime, IProgressIndicator progressIndicator, IForegroundProgressPresenter foregroundProgressPresenter, AsyncCallback callback, object object);
    public virtual UiTaskResult`1<T> EndInvoke(IAsyncResult result);
}
public class JetBrains.dotTrace.SnapshotsManagement.UiTaskResult`1 : object {
    public T Result;
    public string OptionalErrorMessage;
    private UiTaskResult`1(T result, string optionalErrorMessage);
    public static UiTaskResult`1<T> Ok(T result);
    public static UiTaskResult`1<T> Error(string optionalErrorMessage);
}
[ZoneMarkerAttribute]
public class JetBrains.dotTrace.SnapshotsManagement.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
