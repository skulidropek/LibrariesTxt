[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
internal static class Microsoft.Diagnostics.NETCore.Client.BinaryWriterExtensions : object {
    [ExtensionAttribute]
public static void WriteString(BinaryWriter this, string value);
}
public class Microsoft.Diagnostics.NETCore.Client.DiagnosticsClient : object {
    private IpcEndpoint _endpoint;
    public DiagnosticsClient(int processId);
    internal DiagnosticsClient(IpcEndpoint endpoint);
    internal void WaitForConnection(TimeSpan timeout);
    internal Task WaitForConnectionAsync(CancellationToken token);
    public EventPipeSession StartEventPipeSession(IEnumerable`1<EventPipeProvider> providers, bool requestRundown, int circularBufferMB);
    public EventPipeSession StartEventPipeSession(EventPipeProvider provider, bool requestRundown, int circularBufferMB);
    public void WriteDump(DumpType dumpType, string dumpPath, bool logDumpGeneration);
    public void AttachProfiler(TimeSpan attachTimeout, Guid profilerGuid, string profilerPath, Byte[] additionalData);
    internal void ResumeRuntime();
    internal void ResumeRuntimeFallback();
    internal ProcessInfo GetProcessInfo();
    public Dictionary`2<string, string> GetProcessEnvironment();
    public static IEnumerable`1<int> GetPublishedProcesses();
    private static Byte[] SerializeCoreDump(string dumpName, DumpType dumpType, bool diagnostics);
    private static Byte[] SerializeProfilerAttach(UInt32 attachTimeout, Guid profilerGuid, string profilerPath, Byte[] additionalData);
    [IteratorStateMachineAttribute("Microsoft.Diagnostics.NETCore.Client.DiagnosticsClient/<<GetPublishedProcesses>g__GetAllPublishedProcesses|13_0>d")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<int> <GetPublishedProcesses>g__GetAllPublishedProcesses|13_0();
}
public class Microsoft.Diagnostics.NETCore.Client.DiagnosticsClientException : Exception {
    public DiagnosticsClientException(string msg);
}
internal enum Microsoft.Diagnostics.NETCore.Client.DiagnosticServerCommandId : Enum {
    public byte value__;
    public static DiagnosticServerCommandId ResumeRuntime;
}
internal enum Microsoft.Diagnostics.NETCore.Client.DiagnosticsIpcError : Enum {
    public UInt32 value__;
    public static DiagnosticsIpcError ProfilerAlreadyActive;
    public static DiagnosticsIpcError BadEncoding;
    public static DiagnosticsIpcError UnknownCommand;
    public static DiagnosticsIpcError UnknownMagic;
    public static DiagnosticsIpcError UnknownError;
}
internal enum Microsoft.Diagnostics.NETCore.Client.DiagnosticsMessageType : Enum {
    public UInt32 value__;
    public static DiagnosticsMessageType GenerateCoreDump;
    public static DiagnosticsMessageType StartEventPipeTracing;
    public static DiagnosticsMessageType StopEventPipeTracing;
    public static DiagnosticsMessageType CollectEventPipeTracing;
    public static DiagnosticsMessageType AttachProfiler;
}
internal enum Microsoft.Diagnostics.NETCore.Client.DiagnosticsServerCommandSet : Enum {
    public byte value__;
    public static DiagnosticsServerCommandSet Dump;
    public static DiagnosticsServerCommandSet EventPipe;
    public static DiagnosticsServerCommandSet Profiler;
    public static DiagnosticsServerCommandSet Process;
    public static DiagnosticsServerCommandSet Server;
}
internal enum Microsoft.Diagnostics.NETCore.Client.DiagnosticsServerResponseId : Enum {
    public byte value__;
    public static DiagnosticsServerResponseId OK;
    public static DiagnosticsServerResponseId Error;
}
internal enum Microsoft.Diagnostics.NETCore.Client.DumpCommandId : Enum {
    public byte value__;
    public static DumpCommandId GenerateCoreDump;
}
public enum Microsoft.Diagnostics.NETCore.Client.DumpType : Enum {
    public int value__;
    public static DumpType Normal;
    public static DumpType WithHeap;
    public static DumpType Triage;
    public static DumpType Full;
}
internal enum Microsoft.Diagnostics.NETCore.Client.EventPipeCommandId : Enum {
    public byte value__;
    public static EventPipeCommandId StopTracing;
    public static EventPipeCommandId CollectTracing;
    public static EventPipeCommandId CollectTracing2;
}
public class Microsoft.Diagnostics.NETCore.Client.EventPipeProvider : object {
    [CompilerGeneratedAttribute]
private long <Keywords>k__BackingField;
    [CompilerGeneratedAttribute]
private EventLevel <EventLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Arguments>k__BackingField;
    public long Keywords { get; }
    public EventLevel EventLevel { get; }
    public string Name { get; }
    public IDictionary`2<string, string> Arguments { get; }
    public EventPipeProvider(string name, EventLevel eventLevel, long keywords, IDictionary`2<string, string> arguments);
    [CompilerGeneratedAttribute]
public long get_Keywords();
    [CompilerGeneratedAttribute]
public EventLevel get_EventLevel();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Arguments();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(EventPipeProvider left, EventPipeProvider right);
    public static bool op_Inequality(EventPipeProvider left, EventPipeProvider right);
    internal string GetArgumentString();
}
internal enum Microsoft.Diagnostics.NETCore.Client.EventPipeSerializationFormat : Enum {
    public int value__;
    public static EventPipeSerializationFormat NetPerf;
    public static EventPipeSerializationFormat NetTrace;
}
public class Microsoft.Diagnostics.NETCore.Client.EventPipeSession : object {
    private IEnumerable`1<EventPipeProvider> _providers;
    private bool _requestRundown;
    private int _circularBufferMB;
    private long _sessionId;
    private IpcEndpoint _endpoint;
    private bool disposedValue;
    [CompilerGeneratedAttribute]
private Stream <EventStream>k__BackingField;
    public Stream EventStream { get; }
    internal EventPipeSession(IpcEndpoint endpoint, IEnumerable`1<EventPipeProvider> providers, bool requestRundown, int circularBufferMB);
    [CompilerGeneratedAttribute]
public Stream get_EventStream();
    public void Stop();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal class Microsoft.Diagnostics.NETCore.Client.EventPipeSessionConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <RequestRundown>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CircularBufferSizeInMB>k__BackingField;
    [CompilerGeneratedAttribute]
private EventPipeSerializationFormat <Format>k__BackingField;
    private List`1<EventPipeProvider> _providers;
    public bool RequestRundown { get; }
    public int CircularBufferSizeInMB { get; }
    public EventPipeSerializationFormat Format { get; }
    public IReadOnlyCollection`1<EventPipeProvider> Providers { get; }
    public EventPipeSessionConfiguration(int circularBufferSizeMB, EventPipeSerializationFormat format, IEnumerable`1<EventPipeProvider> providers, bool requestRundown);
    [CompilerGeneratedAttribute]
public bool get_RequestRundown();
    [CompilerGeneratedAttribute]
public int get_CircularBufferSizeInMB();
    [CompilerGeneratedAttribute]
public EventPipeSerializationFormat get_Format();
    public IReadOnlyCollection`1<EventPipeProvider> get_Providers();
    public Byte[] SerializeV2();
}
internal class Microsoft.Diagnostics.NETCore.Client.ExposedSocketNetworkStream : NetworkStream {
    public Socket Socket { get; }
    public ExposedSocketNetworkStream(Socket socket, bool ownsSocket);
    public Socket get_Socket();
}
internal class Microsoft.Diagnostics.NETCore.Client.HandleableCollection`1 : object {
    private static Handler<T> DefaultHandler;
    private List`1<T> _items;
    private List`1<Tuple`2<TaskCompletionSource`1<T>, Handler<T>>> _handlers;
    private bool _disposed;
    private static HandleableCollection`1();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    public sealed virtual void Dispose();
    public void Add(T& item);
    public T Handle(TimeSpan timeout);
    public T Handle(Handler<T> handler, TimeSpan timeout);
    public Task`1<T> HandleAsync(CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Diagnostics.NETCore.Client.HandleableCollection`1/<HandleAsync>d__12")]
public Task`1<T> HandleAsync(Handler<T> handler, CancellationToken token);
    private void RunOrQueueHandler(Handler<T> handler, TaskCompletionSource`1<T> completionSource);
    private static bool TryHandler(T& item, Handler<T> handler, TaskCompletionSource`1<T> completionSource, Boolean& removeItem);
    public void ClearItems();
    private void RemoveAndDisposeItems();
    private void VerifyNotDisposed();
    protected virtual void OnHandlerBegin();
}
internal interface Microsoft.Diagnostics.NETCore.Client.IIpcServerTransportCallbackInternal {
    public abstract virtual void CreatedNewServer();
}
internal class Microsoft.Diagnostics.NETCore.Client.IpcAdvertise : object {
    private static int IpcAdvertiseV1SizeInBytes;
    [CompilerGeneratedAttribute]
private ushort <Future>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Magic>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <RuntimeInstanceCookie>k__BackingField;
    private static Byte[] Magic_V1 { get; }
    private ushort Future { get; }
    public Byte[] Magic { get; }
    public ulong ProcessId { get; }
    public Guid RuntimeInstanceCookie { get; }
    private IpcAdvertise(Byte[] magic, Guid cookie, ulong pid, ushort future);
    private static IpcAdvertise();
    private static Byte[] get_Magic_V1();
    [AsyncStateMachineAttribute("Microsoft.Diagnostics.NETCore.Client.IpcAdvertise/<ParseAsync>d__4")]
public static Task`1<IpcAdvertise> ParseAsync(Stream stream, CancellationToken token);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private ushort get_Future();
    [CompilerGeneratedAttribute]
public Byte[] get_Magic();
    [CompilerGeneratedAttribute]
public ulong get_ProcessId();
    [CompilerGeneratedAttribute]
public Guid get_RuntimeInstanceCookie();
}
internal class Microsoft.Diagnostics.NETCore.Client.IpcClient : object {
    private static TimeSpan ConnectTimeout;
    private static IpcClient();
    public static IpcMessage SendMessage(IpcEndpoint endpoint, IpcMessage message);
    public static Stream SendMessage(IpcEndpoint endpoint, IpcMessage message, IpcMessage& response);
    private static void Write(Stream stream, Byte[] buffer);
    private static void Write(Stream stream, IpcMessage message);
    private static IpcMessage Read(Stream stream);
}
internal abstract class Microsoft.Diagnostics.NETCore.Client.IpcEndpoint : object {
    public abstract virtual Stream Connect(TimeSpan timeout);
    public abstract virtual Task`1<Stream> ConnectAsync(CancellationToken token);
    public abstract virtual void WaitForConnection(TimeSpan timeout);
    public abstract virtual Task WaitForConnectionAsync(CancellationToken token);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
internal class Microsoft.Diagnostics.NETCore.Client.IpcEndpointInfo : ValueType {
    [CompilerGeneratedAttribute]
private IpcEndpoint <Endpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <RuntimeInstanceCookie>k__BackingField;
    public IpcEndpoint Endpoint { get; }
    public int ProcessId { get; }
    public Guid RuntimeInstanceCookie { get; }
    internal string DebuggerDisplay { get; }
    internal IpcEndpointInfo(IpcEndpoint endpoint, int processId, Guid runtimeInstanceCookie);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IpcEndpoint get_Endpoint();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_ProcessId();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Guid get_RuntimeInstanceCookie();
    internal string get_DebuggerDisplay();
}
internal class Microsoft.Diagnostics.NETCore.Client.IpcHeader : object {
    public static ushort HeaderSizeInBytes;
    private static ushort MagicSizeInBytes;
    public Byte[] Magic;
    public ushort Size;
    public byte CommandSet;
    public byte CommandId;
    public ushort Reserved;
    public static Byte[] DotnetIpcV1 { get; }
    public IpcHeader(DiagnosticsServerCommandSet commandSet, byte commandId);
    private static IpcHeader();
    public static Byte[] get_DotnetIpcV1();
    public Byte[] Serialize();
    public static IpcHeader TryParse(BinaryReader reader);
    public virtual string ToString();
}
internal class Microsoft.Diagnostics.NETCore.Client.IpcMessage : object {
    [CompilerGeneratedAttribute]
private Byte[] <Payload>k__BackingField;
    [CompilerGeneratedAttribute]
private IpcHeader <Header>k__BackingField;
    public Byte[] Payload { get; private set; }
    public IpcHeader Header { get; private set; }
    public IpcMessage(IpcHeader header, Byte[] payload);
    public IpcMessage(DiagnosticsServerCommandSet commandSet, byte commandId, Byte[] payload);
    [CompilerGeneratedAttribute]
public Byte[] get_Payload();
    [CompilerGeneratedAttribute]
private void set_Payload(Byte[] value);
    [CompilerGeneratedAttribute]
public IpcHeader get_Header();
    [CompilerGeneratedAttribute]
private void set_Header(IpcHeader value);
    public Byte[] Serialize();
    public static IpcMessage Parse(Stream stream);
}
internal abstract class Microsoft.Diagnostics.NETCore.Client.IpcServerTransport : object {
    private IIpcServerTransportCallbackInternal _callback;
    private bool _disposed;
    public static int MaxAllowedConnections { get; }
    public static IpcServerTransport Create(string transportPath, int maxConnections);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public abstract virtual Task`1<Stream> AcceptAsync(CancellationToken token);
    public static int get_MaxAllowedConnections();
    protected void VerifyNotDisposed();
    internal void SetCallback(IIpcServerTransportCallbackInternal callback);
    protected void OnCreateNewServer();
}
internal class Microsoft.Diagnostics.NETCore.Client.MessageHeader : ValueType {
    public DiagnosticsMessageType RequestType;
    public UInt32 Pid;
}
internal class Microsoft.Diagnostics.NETCore.Client.NativeMethods : object {
    internal static bool PeekNamedPipe(SafePipeHandle hNamedPipe, Byte[] lpBuffer, int bufferSize, IntPtr lpBytesRead, IntPtr lpTotalBytesAvail, IntPtr lpBytesLeftThisMessage);
}
internal class Microsoft.Diagnostics.NETCore.Client.PidIpcEndpoint : IpcEndpoint {
    [CompilerGeneratedAttribute]
private static string <IpcRootPath>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <DiagnosticsPortPattern>k__BackingField;
    private int _pid;
    public static string IpcRootPath { get; }
    public static string DiagnosticsPortPattern { get; }
    public PidIpcEndpoint(int pid);
    private static PidIpcEndpoint();
    [CompilerGeneratedAttribute]
public static string get_IpcRootPath();
    [CompilerGeneratedAttribute]
public static string get_DiagnosticsPortPattern();
    public virtual Stream Connect(TimeSpan timeout);
    [AsyncStateMachineAttribute("Microsoft.Diagnostics.NETCore.Client.PidIpcEndpoint/<ConnectAsync>d__9")]
public virtual Task`1<Stream> ConnectAsync(CancellationToken token);
    public virtual void WaitForConnection(TimeSpan timeout);
    [AsyncStateMachineAttribute("Microsoft.Diagnostics.NETCore.Client.PidIpcEndpoint/<WaitForConnectionAsync>d__11")]
public virtual Task WaitForConnectionAsync(CancellationToken token);
    private string GetDefaultAddress();
    private static bool TryGetDefaultAddress(int pid, String& defaultAddress);
    public virtual bool Equals(object obj);
    public bool Equals(PidIpcEndpoint other);
    public virtual int GetHashCode();
}
internal enum Microsoft.Diagnostics.NETCore.Client.ProcessCommandId : Enum {
    public byte value__;
    public static ProcessCommandId GetProcessInfo;
    public static ProcessCommandId ResumeRuntime;
    public static ProcessCommandId GetProcessEnvironment;
}
internal class Microsoft.Diagnostics.NETCore.Client.ProcessEnvironmentHelper : object {
    [CompilerGeneratedAttribute]
private UInt32 <ExpectedSizeInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <Future>k__BackingField;
    private UInt32 ExpectedSizeInBytes { get; private set; }
    private ushort Future { get; private set; }
    public static ProcessEnvironmentHelper Parse(Byte[] payload);
    [AsyncStateMachineAttribute("Microsoft.Diagnostics.NETCore.Client.ProcessEnvironmentHelper/<ReadEnvironmentAsync>d__2")]
public Task`1<Dictionary`2<string, string>> ReadEnvironmentAsync(Stream continuation, CancellationToken token);
    private static string ReadString(Byte[] buffer, Int32& index);
    [CompilerGeneratedAttribute]
private UInt32 get_ExpectedSizeInBytes();
    [CompilerGeneratedAttribute]
private void set_ExpectedSizeInBytes(UInt32 value);
    [CompilerGeneratedAttribute]
private ushort get_Future();
    [CompilerGeneratedAttribute]
private void set_Future(ushort value);
}
internal class Microsoft.Diagnostics.NETCore.Client.ProcessInfo : object {
    private static int GuidSizeInBytes;
    [CompilerGeneratedAttribute]
private ulong <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <RuntimeInstanceCookie>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandLine>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperatingSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProcessArchitecture>k__BackingField;
    public ulong ProcessId { get; private set; }
    public Guid RuntimeInstanceCookie { get; private set; }
    public string CommandLine { get; private set; }
    public string OperatingSystem { get; private set; }
    public string ProcessArchitecture { get; private set; }
    private static ProcessInfo();
    public static ProcessInfo Parse(Byte[] payload);
    private static string ReadString(Byte[] buffer, Int32& index);
    [CompilerGeneratedAttribute]
public ulong get_ProcessId();
    [CompilerGeneratedAttribute]
private void set_ProcessId(ulong value);
    [CompilerGeneratedAttribute]
public Guid get_RuntimeInstanceCookie();
    [CompilerGeneratedAttribute]
private void set_RuntimeInstanceCookie(Guid value);
    [CompilerGeneratedAttribute]
public string get_CommandLine();
    [CompilerGeneratedAttribute]
private void set_CommandLine(string value);
    [CompilerGeneratedAttribute]
public string get_OperatingSystem();
    [CompilerGeneratedAttribute]
private void set_OperatingSystem(string value);
    [CompilerGeneratedAttribute]
public string get_ProcessArchitecture();
    [CompilerGeneratedAttribute]
private void set_ProcessArchitecture(string value);
}
public class Microsoft.Diagnostics.NETCore.Client.ProfilerAlreadyActiveException : ServerErrorException {
    public ProfilerAlreadyActiveException(string msg);
}
internal enum Microsoft.Diagnostics.NETCore.Client.ProfilerCommandId : Enum {
    public byte value__;
    public static ProfilerCommandId AttachProfiler;
}
internal class Microsoft.Diagnostics.NETCore.Client.ReversedDiagnosticsServer : object {
    private static TimeSpan ParseAdvertiseTimeout;
    private CancellationTokenSource _disposalSource;
    private HandleableCollection`1<IpcEndpointInfo> _endpointInfos;
    private ConcurrentDictionary`2<Guid, HandleableCollection`1<Stream>> _streamCollections;
    private string _transportPath;
    private bool _disposed;
    private Task _listenTask;
    public static int MaxAllowedConnections;
    [CompilerGeneratedAttribute]
private IIpcServerTransportCallbackInternal <TransportCallback>k__BackingField;
    private bool IsStarted { get; }
    internal IIpcServerTransportCallbackInternal TransportCallback { get; internal set; }
    public ReversedDiagnosticsServer(string transportPath);
    private static ReversedDiagnosticsServer();
    [AsyncStateMachineAttribute("Microsoft.Diagnostics.NETCore.Client.ReversedDiagnosticsServer/<DisposeAsync>d__8")]
public sealed virtual ValueTask DisposeAsync();
    public void Start();
    public void Start(int maxConnections);
    public IpcEndpointInfo Accept(TimeSpan timeout);
    public Task`1<IpcEndpointInfo> AcceptAsync(CancellationToken token);
    public bool RemoveConnection(Guid runtimeCookie);
    private void VerifyNotDisposed();
    private void VerifyIsStarted();
    [AsyncStateMachineAttribute("Microsoft.Diagnostics.NETCore.Client.ReversedDiagnosticsServer/<ListenAsync>d__16")]
private Task ListenAsync(int maxConnections, CancellationToken token);
    private HandleableCollection`1<Stream> GetStreams(Guid runtimeCookie);
    internal Stream Connect(Guid runtimeInstanceCookie, TimeSpan timeout);
    internal Task`1<Stream> ConnectAsync(Guid runtimeInstanceCookie, CancellationToken token);
    internal void WaitForConnection(Guid runtimeInstanceCookie, TimeSpan timeout);
    [AsyncStateMachineAttribute("Microsoft.Diagnostics.NETCore.Client.ReversedDiagnosticsServer/<WaitForConnectionAsync>d__21")]
internal Task WaitForConnectionAsync(Guid runtimeInstanceCookie, CancellationToken token);
    private static bool WaitForConnectionHandler(Stream item, Boolean& removeItem);
    private static bool TestStream(Stream stream);
    private bool get_IsStarted();
    [CompilerGeneratedAttribute]
internal IIpcServerTransportCallbackInternal get_TransportCallback();
    [CompilerGeneratedAttribute]
internal void set_TransportCallback(IIpcServerTransportCallbackInternal value);
}
public class Microsoft.Diagnostics.NETCore.Client.ServerErrorException : DiagnosticsClientException {
    public ServerErrorException(string msg);
}
internal class Microsoft.Diagnostics.NETCore.Client.ServerIpcEndpoint : IpcEndpoint {
    private Guid _runtimeId;
    private ReversedDiagnosticsServer _server;
    public ServerIpcEndpoint(ReversedDiagnosticsServer server, Guid runtimeId);
    public virtual Stream Connect(TimeSpan timeout);
    public virtual Task`1<Stream> ConnectAsync(CancellationToken token);
    public virtual void WaitForConnection(TimeSpan timeout);
    public virtual Task WaitForConnectionAsync(CancellationToken token);
    public virtual bool Equals(object obj);
    public bool Equals(ServerIpcEndpoint other);
    public virtual int GetHashCode();
}
public class Microsoft.Diagnostics.NETCore.Client.ServerNotAvailableException : DiagnosticsClientException {
    public ServerNotAvailableException(string msg);
}
internal class Microsoft.Diagnostics.NETCore.Client.UnixDomainSocket : Socket {
    private bool _ownsSocketFile;
    private string _path;
    [AsyncStateMachineAttribute("Microsoft.Diagnostics.NETCore.Client.UnixDomainSocket/<AcceptAsync>d__3")]
public Task`1<Socket> AcceptAsync(CancellationToken token);
    public void Bind(string path);
    public void Connect(string path, TimeSpan timeout);
    [AsyncStateMachineAttribute("Microsoft.Diagnostics.NETCore.Client.UnixDomainSocket/<ConnectAsync>d__6")]
public Task ConnectAsync(string path, CancellationToken token);
    protected virtual void Dispose(bool disposing);
    private static EndPoint CreateUnixDomainSocketEndPoint(string path);
    [CompilerGeneratedAttribute]
private void <AcceptAsync>b__3_0();
}
internal class Microsoft.Diagnostics.NETCore.Client.UnixDomainSocketServerTransport : IpcServerTransport {
    private CancellationTokenSource _cancellation;
    private int _backlog;
    private string _path;
    private UnixDomainSocket _socket;
    public UnixDomainSocketServerTransport(string path, int backlog);
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Microsoft.Diagnostics.NETCore.Client.UnixDomainSocketServerTransport/<AcceptAsync>d__6")]
public virtual Task`1<Stream> AcceptAsync(CancellationToken token);
    private void CreateNewSocketServer();
}
public class Microsoft.Diagnostics.NETCore.Client.UnsupportedCommandException : ServerErrorException {
    public UnsupportedCommandException(string msg);
}
public class Microsoft.Diagnostics.NETCore.Client.UnsupportedProtocolException : DiagnosticsClientException {
    public UnsupportedProtocolException(string msg);
}
internal class Microsoft.Diagnostics.NETCore.Client.WindowsPipeServerTransport : IpcServerTransport {
    private static string PipePrefix;
    private NamedPipeServerStream _stream;
    private CancellationTokenSource _cancellation;
    private string _pipeName;
    private int _maxInstances;
    public WindowsPipeServerTransport(string pipeName, int maxInstances);
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Microsoft.Diagnostics.NETCore.Client.WindowsPipeServerTransport/<AcceptAsync>d__7")]
public virtual Task`1<Stream> AcceptAsync(CancellationToken token);
    private void CreateNewPipeServer();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
