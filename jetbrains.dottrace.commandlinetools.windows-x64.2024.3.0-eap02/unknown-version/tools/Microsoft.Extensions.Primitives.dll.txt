internal static class FxResources.Microsoft.Extensions.Primitives.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.Extensions.Primitives.CancellationChangeToken : object {
    [CompilerGeneratedAttribute]
private bool <ActiveChangeCallbacks>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <Token>k__BackingField;
    public bool ActiveChangeCallbacks { get; private set; }
    public bool HasChanged { get; }
    private CancellationToken Token { get; }
    public CancellationChangeToken(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ActiveChangeCallbacks();
    [CompilerGeneratedAttribute]
private void set_ActiveChangeCallbacks(bool value);
    public sealed virtual bool get_HasChanged();
    [CompilerGeneratedAttribute]
private CancellationToken get_Token();
    [NullableContextAttribute("1")]
public sealed virtual IDisposable RegisterChangeCallback(Action`1<object> callback, object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Extensions.Primitives.ChangeToken : object {
    public static IDisposable OnChange(Func`1<IChangeToken> changeTokenProducer, Action changeTokenConsumer);
    public static IDisposable OnChange(Func`1<IChangeToken> changeTokenProducer, Action`1<TState> changeTokenConsumer, TState state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Primitives.CompositeChangeToken : object {
    private static Action`1<object> _onChangeDelegate;
    private object _callbackLock;
    private CancellationTokenSource _cancellationTokenSource;
    private List`1<IDisposable> _disposables;
    [CompilerGeneratedAttribute]
private bool <RegisteredCallbackProxy>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IChangeToken> <ChangeTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ActiveChangeCallbacks>k__BackingField;
    [MemberNotNullWhenAttribute("True", "_cancellationTokenSource")]
[MemberNotNullWhenAttribute("True", "_disposables")]
private bool RegisteredCallbackProxy { get; private set; }
    public IReadOnlyList`1<IChangeToken> ChangeTokens { get; }
    public bool HasChanged { get; }
    public bool ActiveChangeCallbacks { get; }
    public CompositeChangeToken(IReadOnlyList`1<IChangeToken> changeTokens);
    private static CompositeChangeToken();
    [CompilerGeneratedAttribute]
[MemberNotNullWhenAttribute("True", "_cancellationTokenSource")]
[MemberNotNullWhenAttribute("True", "_disposables")]
private bool get_RegisteredCallbackProxy();
    [CompilerGeneratedAttribute]
[MemberNotNullWhenAttribute("True", "_cancellationTokenSource")]
[MemberNotNullWhenAttribute("True", "_disposables")]
private void set_RegisteredCallbackProxy(bool value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<IChangeToken> get_ChangeTokens();
    public sealed virtual IDisposable RegisterChangeCallback(Action`1<object> callback, object state);
    public sealed virtual bool get_HasChanged();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ActiveChangeCallbacks();
    [MemberNotNullAttribute("_cancellationTokenSource")]
[MemberNotNullAttribute("_disposables")]
private void EnsureCallbacksInitialized();
    private static void OnChange(object state);
}
internal enum Microsoft.Extensions.Primitives.ExceptionArgument : Enum {
    public int value__;
    public static ExceptionArgument buffer;
    public static ExceptionArgument offset;
    public static ExceptionArgument length;
    public static ExceptionArgument text;
    public static ExceptionArgument start;
    public static ExceptionArgument count;
    public static ExceptionArgument index;
    public static ExceptionArgument value;
    public static ExceptionArgument capacity;
    public static ExceptionArgument separators;
    public static ExceptionArgument comparisonType;
    public static ExceptionArgument changeTokens;
    public static ExceptionArgument changeTokenProducer;
    public static ExceptionArgument changeTokenConsumer;
    public static ExceptionArgument array;
}
internal enum Microsoft.Extensions.Primitives.ExceptionResource : Enum {
    public int value__;
    public static ExceptionResource Argument_InvalidOffsetLength;
    public static ExceptionResource Argument_InvalidOffsetLengthStringSegment;
    public static ExceptionResource Capacity_CannotChangeAfterWriteStarted;
    public static ExceptionResource Capacity_NotEnough;
    public static ExceptionResource Capacity_NotUsedEntirely;
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Primitives.Extensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static StringBuilder Append(StringBuilder builder, StringSegment segment);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Primitives.IChangeToken {
    public bool HasChanged { get; }
    public bool ActiveChangeCallbacks { get; }
    public abstract virtual bool get_HasChanged();
    public abstract virtual bool get_ActiveChangeCallbacks();
    public abstract virtual IDisposable RegisterChangeCallback(Action`1<object> callback, object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
public class Microsoft.Extensions.Primitives.StringSegment : ValueType {
    public static StringSegment Empty;
    [CompilerGeneratedAttribute]
private string <Buffer>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [NullableAttribute("2")]
public string Buffer { get; }
    public int Offset { get; }
    public int Length { get; }
    [NullableAttribute("2")]
public string Value { get; }
    [MemberNotNullWhenAttribute("True", "Buffer")]
[MemberNotNullWhenAttribute("True", "Value")]
public bool HasValue { get; }
    public char Item { get; }
    [NullableContextAttribute("2")]
public StringSegment(string buffer);
    public StringSegment(string buffer, int offset, int length);
    private static StringSegment();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Buffer();
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
public int get_Length();
    [NullableContextAttribute("2")]
public string get_Value();
    [MemberNotNullWhenAttribute("True", "Buffer")]
[MemberNotNullWhenAttribute("True", "Value")]
public bool get_HasValue();
    public char get_Item(int index);
    [NullableContextAttribute("0")]
public ReadOnlySpan`1<char> AsSpan();
    [NullableContextAttribute("0")]
public ReadOnlySpan`1<char> AsSpan(int start);
    [NullableContextAttribute("0")]
public ReadOnlySpan`1<char> AsSpan(int start, int length);
    [NullableContextAttribute("0")]
public ReadOnlyMemory`1<char> AsMemory();
    public static int Compare(StringSegment a, StringSegment b, StringComparison comparisonType);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(StringSegment other);
    public bool Equals(StringSegment other, StringComparison comparisonType);
    public static bool Equals(StringSegment a, StringSegment b, StringComparison comparisonType);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(string text);
    [NullableContextAttribute("2")]
public bool Equals(string text, StringComparison comparisonType);
    public virtual int GetHashCode();
    public static bool op_Equality(StringSegment left, StringSegment right);
    public static bool op_Inequality(StringSegment left, StringSegment right);
    [NullableContextAttribute("2")]
public static StringSegment op_Implicit(string value);
    [NullableContextAttribute("0")]
public static ReadOnlySpan`1<char> op_Implicit(StringSegment segment);
    [NullableContextAttribute("0")]
public static ReadOnlyMemory`1<char> op_Implicit(StringSegment segment);
    public bool StartsWith(string text, StringComparison comparisonType);
    public bool EndsWith(string text, StringComparison comparisonType);
    public string Substring(int offset);
    public string Substring(int offset, int length);
    public StringSegment Subsegment(int offset);
    public StringSegment Subsegment(int offset, int length);
    public int IndexOf(char c, int start, int count);
    public int IndexOf(char c, int start);
    public int IndexOf(char c);
    public int IndexOfAny(Char[] anyOf, int startIndex, int count);
    public int IndexOfAny(Char[] anyOf, int startIndex);
    public int IndexOfAny(Char[] anyOf);
    public int LastIndexOf(char value);
    public StringSegment Trim();
    public StringSegment TrimStart();
    public StringSegment TrimEnd();
    public StringTokenizer Split(Char[] chars);
    public static bool IsNullOrEmpty(StringSegment value);
    public virtual string ToString();
    private static void CheckStringComparison(StringComparison comparisonType);
    [DoesNotReturnAttribute]
private static void ThrowInvalidArguments(string buffer, int offset, int length);
    [DoesNotReturnAttribute]
private void ThrowInvalidArguments(int offset, int length, ExceptionArgument offsetOrStart);
    [CompilerGeneratedAttribute]
internal static Exception <ThrowInvalidArguments>g__GetInvalidArgumentsException|55_0(<>c__DisplayClass55_0& );
    [CompilerGeneratedAttribute]
internal static Exception <ThrowInvalidArguments>g__GetInvalidArgumentsException|56_0(bool hasValue, <>c__DisplayClass56_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Primitives.StringSegmentComparer : object {
    [CompilerGeneratedAttribute]
private static StringSegmentComparer <Ordinal>k__BackingField;
    [CompilerGeneratedAttribute]
private static StringSegmentComparer <OrdinalIgnoreCase>k__BackingField;
    [CompilerGeneratedAttribute]
private StringComparison <Comparison>k__BackingField;
    [CompilerGeneratedAttribute]
private StringComparer <Comparer>k__BackingField;
    public static StringSegmentComparer Ordinal { get; }
    public static StringSegmentComparer OrdinalIgnoreCase { get; }
    private StringComparison Comparison { get; }
    private StringComparer Comparer { get; }
    private StringSegmentComparer(StringComparison comparison, StringComparer comparer);
    private static StringSegmentComparer();
    [CompilerGeneratedAttribute]
public static StringSegmentComparer get_Ordinal();
    [CompilerGeneratedAttribute]
public static StringSegmentComparer get_OrdinalIgnoreCase();
    [CompilerGeneratedAttribute]
private StringComparison get_Comparison();
    [CompilerGeneratedAttribute]
private StringComparer get_Comparer();
    public sealed virtual int Compare(StringSegment x, StringSegment y);
    public sealed virtual bool Equals(StringSegment x, StringSegment y);
    public sealed virtual int GetHashCode(StringSegment obj);
}
[IsReadOnlyAttribute]
public class Microsoft.Extensions.Primitives.StringTokenizer : ValueType {
    private StringSegment _value;
    private Char[] _separators;
    [NullableContextAttribute("1")]
public StringTokenizer(string value, Char[] separators);
    [NullableContextAttribute("1")]
public StringTokenizer(StringSegment value, Char[] separators);
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<StringSegment> System.Collections.Generic.IEnumerable<Microsoft.Extensions.Primitives.StringSegment>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
public class Microsoft.Extensions.Primitives.StringValues : ValueType {
    public static StringValues Empty;
    private object _values;
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<System.String>.IsReadOnly { get; }
    private string System.Collections.Generic.IList<System.String>.Item { get; private set; }
    public string Item { get; }
    public StringValues(string value);
    public StringValues(String[] values);
    private static StringValues();
    public static StringValues op_Implicit(string value);
    public static StringValues op_Implicit(String[] values);
    public static string op_Implicit(StringValues values);
    public static String[] op_Implicit(StringValues value);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.String>.get_IsReadOnly();
    private sealed virtual override string System.Collections.Generic.IList<System.String>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<System.String>.set_Item(int index, string value);
    public sealed virtual string get_Item(int index);
    private static string OutOfBounds();
    [NullableContextAttribute("1")]
public virtual string ToString();
    private string GetStringValue();
    public String[] ToArray();
    private String[] GetArrayValue();
    private sealed virtual override int System.Collections.Generic.IList<System.String>.IndexOf(string item);
    private int IndexOf(string item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.String>.Contains(string item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.String>.CopyTo(String[] array, int arrayIndex);
    private void CopyTo(String[] array, int arrayIndex);
    private sealed virtual override void System.Collections.Generic.ICollection<System.String>.Add(string item);
    private sealed virtual override void System.Collections.Generic.IList<System.String>.Insert(int index, string item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.String>.Remove(string item);
    private sealed virtual override void System.Collections.Generic.IList<System.String>.RemoveAt(int index);
    private sealed virtual override void System.Collections.Generic.ICollection<System.String>.Clear();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<string> System.Collections.Generic.IEnumerable<System.String>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public static bool IsNullOrEmpty(StringValues value);
    public static StringValues Concat(StringValues values1, StringValues values2);
    public static StringValues Concat(StringValues& values, string value);
    public static StringValues Concat(string value, StringValues& values);
    public static bool Equals(StringValues left, StringValues right);
    public static bool op_Equality(StringValues left, StringValues right);
    public static bool op_Inequality(StringValues left, StringValues right);
    public sealed virtual bool Equals(StringValues other);
    public static bool Equals(string left, StringValues right);
    public static bool Equals(StringValues left, string right);
    public sealed virtual bool Equals(string other);
    public static bool Equals(String[] left, StringValues right);
    public static bool Equals(StringValues left, String[] right);
    public sealed virtual bool Equals(String[] other);
    public static bool op_Equality(StringValues left, string right);
    public static bool op_Inequality(StringValues left, string right);
    public static bool op_Equality(string left, StringValues right);
    public static bool op_Inequality(string left, StringValues right);
    public static bool op_Equality(StringValues left, String[] right);
    public static bool op_Inequality(StringValues left, String[] right);
    public static bool op_Equality(String[] left, StringValues right);
    public static bool op_Inequality(String[] left, StringValues right);
    public static bool op_Equality(StringValues left, object right);
    public static bool op_Inequality(StringValues left, object right);
    public static bool op_Equality(object left, StringValues right);
    public static bool op_Inequality(object left, StringValues right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
internal static string <GetStringValue>g__GetStringValueFromArray|19_0(object value);
    [CompilerGeneratedAttribute]
internal static string <GetStringValue>g__GetJoinedStringValueFromArray|19_1(String[] values);
}
internal static class Microsoft.Extensions.Primitives.ThrowHelper : object {
    [DoesNotReturnAttribute]
internal static void ThrowArgumentNullException(ExceptionArgument argument);
    [DoesNotReturnAttribute]
internal static void ThrowArgumentOutOfRangeException(ExceptionArgument argument);
    [DoesNotReturnAttribute]
internal static void ThrowArgumentException(ExceptionResource resource);
    [DoesNotReturnAttribute]
internal static void ThrowInvalidOperationException(ExceptionResource resource);
    [DoesNotReturnAttribute]
internal static void ThrowInvalidOperationException(ExceptionResource resource, Object[] args);
    internal static ArgumentNullException GetArgumentNullException(ExceptionArgument argument);
    internal static ArgumentOutOfRangeException GetArgumentOutOfRangeException(ExceptionArgument argument);
    internal static ArgumentException GetArgumentException(ExceptionResource resource);
    private static string GetResourceText(ExceptionResource resource);
    private static string GetArgumentName(ExceptionArgument argument);
    private static string GetResourceName(ExceptionResource resource);
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
internal static class System.Numerics.Hashing.HashHelpers : object {
    public static int Combine(int h1, int h2);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsByRefLikeAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("64")]
internal class System.Runtime.InteropServices.LibraryImportAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <LibraryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMarshalling <StringMarshalling>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StringMarshallingCustomType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetLastError>k__BackingField;
    public string LibraryName { get; }
    public string EntryPoint { get; public set; }
    public StringMarshalling StringMarshalling { get; public set; }
    public Type StringMarshallingCustomType { get; public set; }
    public bool SetLastError { get; public set; }
    public LibraryImportAttribute(string libraryName);
    [CompilerGeneratedAttribute]
public string get_LibraryName();
    [CompilerGeneratedAttribute]
public string get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(string value);
    [CompilerGeneratedAttribute]
public StringMarshalling get_StringMarshalling();
    [CompilerGeneratedAttribute]
public void set_StringMarshalling(StringMarshalling value);
    [CompilerGeneratedAttribute]
public Type get_StringMarshallingCustomType();
    [CompilerGeneratedAttribute]
public void set_StringMarshallingCustomType(Type value);
    [CompilerGeneratedAttribute]
public bool get_SetLastError();
    [CompilerGeneratedAttribute]
public void set_SetLastError(bool value);
}
internal enum System.Runtime.InteropServices.StringMarshalling : Enum {
    public int value__;
    public static StringMarshalling Custom;
    public static StringMarshalling Utf8;
    public static StringMarshalling Utf16;
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string Argument_InvalidOffsetLength { get; }
    internal static string Argument_InvalidOffsetLengthStringSegment { get; }
    internal static string Capacity_CannotChangeAfterWriteStarted { get; }
    internal static string Capacity_NotEnough { get; }
    internal static string Capacity_NotUsedEntirely { get; }
    private static SR();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Argument_InvalidOffsetLength();
    internal static string get_Argument_InvalidOffsetLengthStringSegment();
    internal static string get_Capacity_CannotChangeAfterWriteStarted();
    internal static string get_Capacity_NotEnough();
    internal static string get_Capacity_NotUsedEntirely();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[DefaultMemberAttribute("Item")]
internal class System.Text.ValueStringBuilder : ValueType {
    private Char[] _arrayToReturnToPool;
    private Span`1<char> _chars;
    private int _pos;
    public int Length { get; public set; }
    public int Capacity { get; }
    public Char& Item { get; }
    public Span`1<char> RawChars { get; }
    public ValueStringBuilder(Span`1<char> initialBuffer);
    public ValueStringBuilder(int initialCapacity);
    public int get_Length();
    public void set_Length(int value);
    public int get_Capacity();
    public void EnsureCapacity(int capacity);
    public Char& GetPinnableReference();
    public Char& GetPinnableReference(bool terminate);
    public Char& get_Item(int index);
    public virtual string ToString();
    public Span`1<char> get_RawChars();
    public ReadOnlySpan`1<char> AsSpan(bool terminate);
    public ReadOnlySpan`1<char> AsSpan();
    public ReadOnlySpan`1<char> AsSpan(int start);
    public ReadOnlySpan`1<char> AsSpan(int start, int length);
    public bool TryCopyTo(Span`1<char> destination, Int32& charsWritten);
    public void Insert(int index, char value, int count);
    public void Insert(int index, string s);
    public void Append(char c);
    public void Append(string s);
    private void AppendSlow(string s);
    public void Append(char c, int count);
    public void Append(Char* value, int length);
    public void Append(ReadOnlySpan`1<char> value);
    public Span`1<char> AppendSpan(int length);
    private void GrowAndAppend(char c);
    private void Grow(int additionalCapacityBeyondPos);
    public void Dispose();
}
