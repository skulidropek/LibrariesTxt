public class AzureDevOps.Authentication.AadAuthentication : Authentication {
    public AadAuthentication(RuntimeContext context, Guid tenantId, TokenScope tokenScope, ICredentialStore personalAccessTokenStore);
    internal AadAuthentication(RuntimeContext context, ICredentialStore personalAccessTokenStore, ITokenStore vsIdeTokenCache, IAuthority devopsAuthority);
    [AsyncStateMachineAttribute("AzureDevOps.Authentication.AadAuthentication/<InteractiveLogon>d__2")]
public sealed virtual Task`1<Credential> InteractiveLogon(TargetUri targetUri, PersonalAccessTokenOptions options);
    [AsyncStateMachineAttribute("AzureDevOps.Authentication.AadAuthentication/<InteractiveLogon>d__3")]
[ObsoleteAttribute("Please use Task<Credential> InteractiveLogon(TargetUri targetUri, PersonalAccessTokenOptions options) instead.", "False")]
public sealed virtual Task`1<Credential> InteractiveLogon(TargetUri targetUri, bool requestCompactToken);
    [AsyncStateMachineAttribute("AzureDevOps.Authentication.AadAuthentication/<NoninteractiveLogon>d__4")]
public sealed virtual Task`1<Credential> NoninteractiveLogon(TargetUri targetUri, PersonalAccessTokenOptions options);
    [AsyncStateMachineAttribute("AzureDevOps.Authentication.AadAuthentication/<NoninteractiveLogon>d__5")]
[ObsoleteAttribute("Use Task<Credential> NoninteractiveLogon(TargetUri targetUri, PersonalAccessTokenOptions options) instead.", "False")]
public sealed virtual Task`1<Credential> NoninteractiveLogon(TargetUri targetUri, bool requestCompactToken);
    public virtual Task`1<bool> SetCredentials(TargetUri targetUri, Credential credentials);
}
internal class AzureDevOps.Authentication.Adal : Base {
    private TokenCache _cache;
    public Type ServiceType { get; }
    public Adal(RuntimeContext context);
    public sealed virtual Type get_ServiceType();
    [AsyncStateMachineAttribute("AzureDevOps.Authentication.Adal/<AcquireTokenAsync>d__4")]
public sealed virtual Task`1<IAdalResult> AcquireTokenAsync(string authorityHostUrl, string resource, string clientId, Uri redirectUri, string extraQueryParameters);
    [AsyncStateMachineAttribute("AzureDevOps.Authentication.Adal/<AcquireTokenAsync>d__5")]
public sealed virtual Task`1<IAdalResult> AcquireTokenAsync(string authorityHostUrl, string resource, string clientId);
}
internal class AzureDevOps.Authentication.AdalTokenCache : TokenCache {
    private static IReadOnlyList`1<IReadOnlyList`1<string>> AdalCachePaths;
    private string _cacheFilePath;
    private RuntimeContext _context;
    private object _syncpoint;
    public AdalTokenCache(RuntimeContext context);
    private static AdalTokenCache();
    private void AfterAccessNotification(TokenCacheNotificationArgs args);
    private void BeforeAccessNotification(TokenCacheNotificationArgs args);
}
public abstract class AzureDevOps.Authentication.Authentication : BaseAuthentication {
    public static string DefaultResource;
    public static string DefaultClientId;
    public static string RedirectUrl;
    protected static string AdalRefreshPrefix;
    internal static string AzureBaseUrlHost;
    internal static string VstsBaseUrlHost;
    private static char CachePairSeperator;
    private static char CachePairTerminator;
    private static string CachePathDirectory;
    private static string CachePathFileName;
    public string ClientId;
    public string Resource;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public TokenScope TokenScope;
    [CompilerGeneratedAttribute]
private ITokenStore <IdeTokenCache>k__BackingField;
    [CompilerGeneratedAttribute]
private ICredentialStore <PersonalAccessTokenStore>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthority <Authority>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <TenantId>k__BackingField;
    public static UriNameConversionDelegate UriNameConversion { get; }
    internal ITokenStore IdeTokenCache { get; private set; }
    internal ICredentialStore PersonalAccessTokenStore { get; internal set; }
    internal IAuthority Authority { get; internal set; }
    internal Guid TenantId { get; internal set; }
    protected Authentication(RuntimeContext context, TokenScope tokenScope, ICredentialStore personalAccessTokenStore);
    internal Authentication(RuntimeContext context, ICredentialStore personalAccessTokenStore, ITokenStore ideTokenCache, IAuthority authority);
    public static UriNameConversionDelegate get_UriNameConversion();
    [CompilerGeneratedAttribute]
internal ITokenStore get_IdeTokenCache();
    [CompilerGeneratedAttribute]
private void set_IdeTokenCache(ITokenStore value);
    [CompilerGeneratedAttribute]
internal ICredentialStore get_PersonalAccessTokenStore();
    [CompilerGeneratedAttribute]
internal void set_PersonalAccessTokenStore(ICredentialStore value);
    [CompilerGeneratedAttribute]
internal IAuthority get_Authority();
    [CompilerGeneratedAttribute]
internal void set_Authority(IAuthority value);
    [CompilerGeneratedAttribute]
internal Guid get_TenantId();
    [CompilerGeneratedAttribute]
internal void set_TenantId(Guid value);
    [AsyncStateMachineAttribute("AzureDevOps.Authentication.Authentication/<DeleteCredentials>d__33")]
public virtual Task`1<bool> DeleteCredentials(TargetUri targetUri);
    [AsyncStateMachineAttribute("AzureDevOps.Authentication.Authentication/<DetectAuthority>d__34")]
[SuppressMessageAttribute("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")]
[SuppressMessageAttribute("Microsoft.Design", "CA1062:Validate arguments of public methods")]
public static Task`1<Nullable`1<Guid>> DetectAuthority(RuntimeContext context, TargetUri targetUri);
    [AsyncStateMachineAttribute("AzureDevOps.Authentication.Authentication/<GetAuthentication>d__35")]
public static Task`1<BaseAuthentication> GetAuthentication(RuntimeContext context, TargetUri targetUri, TokenScope scope, ICredentialStore personalAccessTokenStore);
    [AsyncStateMachineAttribute("AzureDevOps.Authentication.Authentication/<GetCredentials>d__36")]
public virtual Task`1<Credential> GetCredentials(TargetUri targetUri);
    [AsyncStateMachineAttribute("AzureDevOps.Authentication.Authentication/<ValidateCredentials>d__37")]
public Task`1<bool> ValidateCredentials(TargetUri targetUri, Credential credentials);
    [AsyncStateMachineAttribute("AzureDevOps.Authentication.Authentication/<GeneratePersonalAccessToken>d__38")]
protected Task`1<Credential> GeneratePersonalAccessToken(TargetUri targetUri, Token accessToken, PersonalAccessTokenOptions options);
    [AsyncStateMachineAttribute("AzureDevOps.Authentication.Authentication/<GeneratePersonalAccessToken>d__39")]
protected Task`1<Credential> GeneratePersonalAccessToken(TargetUri targetUri, Token accessToken, bool requestCompactToken);
    internal static string GetSecretKey(TargetUri targetUri, string prefix);
    [AsyncStateMachineAttribute("AzureDevOps.Authentication.Authentication/<DeserializeTenantCache>d__41")]
private static Task`1<Dictionary`2<string, Guid>> DeserializeTenantCache(RuntimeContext context);
    private static string GetCachePath(RuntimeContext context);
    [AsyncStateMachineAttribute("AzureDevOps.Authentication.Authentication/<SerializeTenantCache>d__43")]
private static Task SerializeTenantCache(RuntimeContext context, Dictionary`2<string, Guid> cache);
}
public class AzureDevOps.Authentication.AuthenticationException : Exception {
    internal AuthenticationException(string message);
    internal AuthenticationException(string message, Exception innerException);
    internal AuthenticationException(Exception adalException);
    internal AuthenticationException(SerializationInfo info, StreamingContext context);
}
internal class AzureDevOps.Authentication.Authority : Base {
    public static string AuthorityHostUrlBase;
    public static string AzureBaseUrlHost;
    public static string DefaultAuthorityHostUrl;
    public static string VstsBaseUrlHost;
    [CompilerGeneratedAttribute]
private string <AuthorityHostUrl>k__BackingField;
    public string AuthorityHostUrl { get; protected set; }
    public Authority(RuntimeContext context, string authorityHostUrl);
    public Authority(RuntimeContext context);
    [CompilerGeneratedAttribute]
public string get_AuthorityHostUrl();
    [CompilerGeneratedAttribute]
protected void set_AuthorityHostUrl(string value);
    [AsyncStateMachineAttribute("AzureDevOps.Authentication.Authority/<GeneratePersonalAccessToken>d__10")]
public sealed virtual Task`1<Token> GeneratePersonalAccessToken(TargetUri targetUri, Token authorization, TokenScope tokenScope, bool requireCompactToken, Nullable`1<TimeSpan> tokenDuration);
    public sealed virtual Task`1<Token> GeneratePersonalAccessToken(TargetUri targetUri, Token authorization, TokenScope tokenScope, bool requireCompactToken);
    public static string GetAuthorityUrl(Guid tenantId);
    [AsyncStateMachineAttribute("AzureDevOps.Authentication.Authority/<InteractiveAcquireToken>d__13")]
public sealed virtual Task`1<Token> InteractiveAcquireToken(TargetUri targetUri, string clientId, string resource, Uri redirectUri, string queryParameters);
    [AsyncStateMachineAttribute("AzureDevOps.Authentication.Authority/<NoninteractiveAcquireToken>d__14")]
public sealed virtual Task`1<Token> NoninteractiveAcquireToken(TargetUri targetUri, string clientId, string resource, Uri redirectUri);
    [AsyncStateMachineAttribute("AzureDevOps.Authentication.Authority/<PopulateTokenTargetId>d__15")]
public Task`1<bool> PopulateTokenTargetId(TargetUri targetUri, Token authorization);
    [AsyncStateMachineAttribute("AzureDevOps.Authentication.Authority/<ValidateCredentials>d__16")]
public sealed virtual Task`1<bool> ValidateCredentials(TargetUri targetUri, Credential credentials);
    [AsyncStateMachineAttribute("AzureDevOps.Authentication.Authority/<ValidateToken>d__17")]
public sealed virtual Task`1<bool> ValidateToken(TargetUri targetUri, Token token);
    internal static TargetUri GetConnectionDataUri(TargetUri targetUri);
    [AsyncStateMachineAttribute("AzureDevOps.Authentication.Authority/<GetIdentityServiceUri>d__19")]
internal Task`1<TargetUri> GetIdentityServiceUri(TargetUri targetUri, Secret authorization);
    internal static string GetTargetUrl(TargetUri targetUri, bool keepUsername);
    internal static bool IsAzureDevOpsUrl(TargetUri targetUri);
    [AsyncStateMachineAttribute("AzureDevOps.Authentication.Authority/<ValidateSecret>d__22")]
internal Task`1<bool> ValidateSecret(TargetUri targetUri, Secret secret);
    [AsyncStateMachineAttribute("AzureDevOps.Authentication.Authority/<CreatePersonalAccessTokenRequestUri>d__23")]
private Task`1<TargetUri> CreatePersonalAccessTokenRequestUri(TargetUri targetUri, Secret authorization, bool requireCompactToken);
    private StringContent GetAccessTokenRequestBody(TargetUri targetUri, TokenScope tokenScope, Nullable`1<TimeSpan> duration);
}
public abstract class AzureDevOps.Authentication.Base : Base {
    protected IAdal Adal { get; }
    protected Base(RuntimeContext context);
    protected IAdal get_Adal();
}
public interface AzureDevOps.Authentication.IAadAuthentication {
    public abstract virtual Task`1<Credential> InteractiveLogon(TargetUri targetUri, PersonalAccessTokenOptions options);
    [ObsoleteAttribute("Please use Task<Credential> InteractiveLogon(TargetUri targetUri, PersonalAccessTokenOptions options) instead.", "False")]
public abstract virtual Task`1<Credential> InteractiveLogon(TargetUri targetUri, bool requestCompactToken);
    public abstract virtual Task`1<Credential> NoninteractiveLogon(TargetUri targetUri, PersonalAccessTokenOptions options);
    [ObsoleteAttribute("Please use Task<Credential> NoninteractiveLogon(TargetUri targetUri, PersonalAccessTokenOptions options) instead.", "False")]
public abstract virtual Task`1<Credential> NoninteractiveLogon(TargetUri targetUri, bool requestCompactToken);
}
public interface AzureDevOps.Authentication.IAdal {
    public abstract virtual Task`1<IAdalResult> AcquireTokenAsync(string authorityHostUrl, string resource, string clientId, Uri redirectUri, string extraQueryParameters);
    public abstract virtual Task`1<IAdalResult> AcquireTokenAsync(string authorityHostUrl, string resource, string client);
}
public interface AzureDevOps.Authentication.IAdalResult {
    public string AccessToken { get; }
    public string AccessTokenType { get; }
    public string Authority { get; }
    public string TenantId { get; }
    public abstract virtual string get_AccessToken();
    public abstract virtual string get_AccessTokenType();
    public abstract virtual string get_Authority();
    public abstract virtual string get_TenantId();
}
public interface AzureDevOps.Authentication.IAuthority {
    public abstract virtual Task`1<Token> GeneratePersonalAccessToken(TargetUri targetUri, Token accessToken, TokenScope tokenScope, bool requireCompactToken, Nullable`1<TimeSpan> tokenDuration);
    public abstract virtual Task`1<Token> GeneratePersonalAccessToken(TargetUri targetUri, Token accessToken, TokenScope tokenScope, bool requireCompactToken);
    public abstract virtual Task`1<Token> InteractiveAcquireToken(TargetUri targetUri, string clientId, string resource, Uri redirectUri, string queryParameters);
    public abstract virtual Task`1<Token> NoninteractiveAcquireToken(TargetUri targetUri, string clientId, string resource, Uri redirectUri);
    public abstract virtual Task`1<bool> ValidateCredentials(TargetUri targetUri, Credential credentials);
    public abstract virtual Task`1<bool> ValidateToken(TargetUri targetUri, Token token);
}
public interface AzureDevOps.Authentication.IMsaAuthentication {
    public abstract virtual Task`1<Credential> InteractiveLogon(TargetUri targetUri, PersonalAccessTokenOptions options);
    public abstract virtual Task`1<Credential> InteractiveLogon(TargetUri targetUri, bool requestCompactToken);
}
public class AzureDevOps.Authentication.LocationServiceException : Exception {
    internal LocationServiceException(string message);
    internal LocationServiceException(string message, Exception innerException);
    internal LocationServiceException(SerializationInfo info, StreamingContext context);
}
public class AzureDevOps.Authentication.MsaAuthentication : Authentication {
    public MsaAuthentication(RuntimeContext context, TokenScope tokenScope, ICredentialStore personalAccessTokenStore);
    internal MsaAuthentication(RuntimeContext context, ICredentialStore personalAccessTokenStore, ITokenStore ideTokenCache, IAuthority msaAuthority);
    [AsyncStateMachineAttribute("AzureDevOps.Authentication.MsaAuthentication/<InteractiveLogon>d__2")]
public sealed virtual Task`1<Credential> InteractiveLogon(TargetUri targetUri, PersonalAccessTokenOptions options);
    [AsyncStateMachineAttribute("AzureDevOps.Authentication.MsaAuthentication/<InteractiveLogon>d__3")]
public sealed virtual Task`1<Credential> InteractiveLogon(TargetUri targetUri, bool requestCompactToken);
    public virtual Task`1<bool> SetCredentials(TargetUri targetUri, Credential credentials);
}
[DebuggerDisplayAttribute("{DebuggerDisplay, nq}")]
public class AzureDevOps.Authentication.PersonalAccessTokenOptions : ValueType {
    private bool _compact;
    private Nullable`1<TimeSpan> _duration;
    private TokenScope _scope;
    public bool RequireCompactToken { get; public set; }
    public Nullable`1<TimeSpan> TokenDuration { get; public set; }
    public TokenScope TokenScope { get; public set; }
    internal string DebuggerDisplay { get; }
    public bool get_RequireCompactToken();
    public void set_RequireCompactToken(bool value);
    public Nullable`1<TimeSpan> get_TokenDuration();
    public void set_TokenDuration(Nullable`1<TimeSpan> value);
    public TokenScope get_TokenScope();
    public void set_TokenScope(TokenScope value);
    internal string get_DebuggerDisplay();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static bool op_Equality(PersonalAccessTokenOptions left, PersonalAccessTokenOptions right);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static bool op_Inequality(PersonalAccessTokenOptions left, PersonalAccessTokenOptions right);
}
public class AzureDevOps.Authentication.TokenRegistry : Base {
    private static string RegistryTokenKey;
    private static string RegistryTypeKey;
    private static string RegistryUrlKey;
    private static string RegistryPathFormat;
    private static String[] Versions;
    private UriNameConversionDelegate Microsoft.Alm.Authentication.ISecretStore.UriNameConversion { get; private set; }
    private string Microsoft.Alm.Authentication.ISecretStore.Namespace { get; }
    public TokenRegistry(RuntimeContext context);
    private static TokenRegistry();
    private sealed virtual override UriNameConversionDelegate Microsoft.Alm.Authentication.ISecretStore.get_UriNameConversion();
    private sealed virtual override void Microsoft.Alm.Authentication.ISecretStore.set_UriNameConversion(UriNameConversionDelegate value);
    private sealed virtual override string Microsoft.Alm.Authentication.ISecretStore.get_Namespace();
    public Task`1<Token> ReadToken(TargetUri targetUri);
    [SuppressMessageAttribute("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public Task`1<bool> WriteToken(TargetUri targetUri, Token token);
    private sealed virtual override Task`1<bool> Microsoft.Alm.Authentication.ITokenStore.DeleteToken(TargetUri targetUri);
    private sealed virtual override Task`1<Token> Microsoft.Alm.Authentication.ITokenStore.ReadToken(TargetUri targetUri);
    private sealed virtual override Task`1<bool> Microsoft.Alm.Authentication.ITokenStore.WriteToken(TargetUri targetUri, Token token);
    [IteratorStateMachineAttribute("AzureDevOps.Authentication.TokenRegistry/<EnumerateKeys>d__16")]
private static IEnumerable`1<RegistryKey> EnumerateKeys(RuntimeContext context, bool writeable);
    [SuppressMessageAttribute("Microsoft.Usage", "CA2201:DoNotRaiseReservedExceptionTypes")]
private static bool KeyIsValid(RegistryKey registryKey, String& url, String& type, String& value);
    [IteratorStateMachineAttribute("AzureDevOps.Authentication.TokenRegistry/<EnumerateRootKeys>d__18")]
private static IEnumerable`1<RegistryKey> EnumerateRootKeys(RuntimeContext context);
}
public class AzureDevOps.Authentication.TokenScope : TokenScope {
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static TokenScope None;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static TokenScope BuildAccess;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static TokenScope BuildExecute;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static TokenScope ChatManage;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static TokenScope ChatWrite;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static TokenScope CodeManage;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static TokenScope CodeRead;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static TokenScope CodeWrite;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static TokenScope PackagingManage;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static TokenScope PackagingRead;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static TokenScope PackagingWrite;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static TokenScope ProfileRead;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static TokenScope ReleaseAccess;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static TokenScope ReleaseExecute;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static TokenScope ReleaseManage;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static TokenScope ServiceHookRead;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static TokenScope ServiceHookWrite;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static TokenScope TestRead;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static TokenScope TestWrite;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static TokenScope WorkRead;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static TokenScope WorkWrite;
    private TokenScope(string value);
    private TokenScope(HashSet`1<string> set);
    private static TokenScope();
    [IteratorStateMachineAttribute("AzureDevOps.Authentication.TokenScope/<EnumerateValues>d__23")]
public static IEnumerable`1<TokenScope> EnumerateValues();
    public virtual bool Equals(object obj);
    [SuppressMessageAttribute("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
public bool Equals(TokenScope other);
    public static bool Find(string value, TokenScope& devopsScope);
    public virtual int GetHashCode();
    public static bool op_Equality(TokenScope left, TokenScope right);
    public static bool op_Inequality(TokenScope left, TokenScope right);
    public static TokenScope op_Addition(TokenScope left, TokenScope right);
    public static TokenScope op_Subtraction(TokenScope left, TokenScope right);
    public static TokenScope op_BitwiseOr(TokenScope left, TokenScope right);
    public static TokenScope op_BitwiseAnd(TokenScope left, TokenScope right);
    public static TokenScope op_ExclusiveOr(TokenScope left, TokenScope right);
}
