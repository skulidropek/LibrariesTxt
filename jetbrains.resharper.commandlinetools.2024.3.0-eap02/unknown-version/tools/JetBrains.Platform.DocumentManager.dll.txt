public class JetBrains.DocumentManagers.BeforeProjectFileBasedDocumentReloadedEventArgs : BeforeDocumentReloadedEventArgs {
    [CompilerGeneratedAttribute]
private IProjectFile <ProjectFile>k__BackingField;
    public IProjectFile ProjectFile { get; }
    public BeforeProjectFileBasedDocumentReloadedEventArgs(IDocument document, IProjectFile projectFile, bool isConflict);
    [CompilerGeneratedAttribute]
public IProjectFile get_ProjectFile();
}
public class JetBrains.DocumentManagers.BeforeProjectFileBasedDocumentSavedEventArgs : BeforeDocumentSavedEventArgs {
    [CompilerGeneratedAttribute]
private IProjectFile <ProjectFile>k__BackingField;
    public IProjectFile ProjectFile { get; }
    public BeforeProjectFileBasedDocumentSavedEventArgs(IDocument document, IProjectFile projectFile, bool differWithPersistentFile);
    [CompilerGeneratedAttribute]
public IProjectFile get_ProjectFile();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("0")]
public class JetBrains.DocumentManagers.DocumentManager : object {
    [CompilerGeneratedAttribute]
private IEnsureWritableHandler <ensureWritableHandler>P;
    [CompilerGeneratedAttribute]
private DocumentToProjectFileMappingStorage <mapping>P;
    [CompilerGeneratedAttribute]
private DocumentsOnProjectFiles <documentsOnProjectFiles>P;
    [CompilerGeneratedAttribute]
private ForkedDocumentsManager <forkedDocumentsManager>P;
    [CompilerGeneratedAttribute]
private SolutionDocumentChangeEventsAggregator <solutionDocumentChangeEventsAggregator>P;
    [CompilerGeneratedAttribute]
private SolutionDocumentChangeProvider <solutionDocumentChangeProvider>P;
    [CompilerGeneratedAttribute]
private ProjectModelAwareRangeMarkerManager <projectModelAwareRangeMarkerManager>P;
    public static bool OptionDontAssertNonVsDocumentModifications;
    private static Key`1<DocumentManager> ourInstanceKey;
    public DocumentToProjectFileMappingStorage Mapping { get; }
    public ISignal`1<DocumentChange> BeforeAnyDocumentChanged { get; }
    public ISignal`1<DocumentChange> BeforeAnyDocumentCopyChanged { get; }
    public SolutionDocumentChangeProvider ChangeProvider { get; }
    public DocumentManager(IEnsureWritableHandler ensureWritableHandler, DocumentToProjectFileMappingStorage mapping, DocumentsOnProjectFiles documentsOnProjectFiles, ForkedDocumentsManager forkedDocumentsManager, SolutionDocumentChangeEventsAggregator solutionDocumentChangeEventsAggregator, SolutionDocumentChangeProvider solutionDocumentChangeProvider, ProjectModelAwareRangeMarkerManager projectModelAwareRangeMarkerManager);
    private static DocumentManager();
    public DocumentToProjectFileMappingStorage get_Mapping();
    [DebuggerStepThroughAttribute]
[ObsoleteAttribute("Inject me!")]
public static DocumentManager GetInstance(ISolution solution);
    public IDocument GetOrCreateDocument(IProjectFile projectFile);
    public IDocument TryGetDocument(IProjectFile projectFile);
    public IDocument GetOrCreateDocument(VirtualFileSystemPath path);
    public IProjectFile TryGetProjectFile(IDocument document);
    public VirtualFileSystemPath TryGetDocumentFilePath(IDocument document);
    public IProjectFile GetProjectFile(IDocument document);
    public void EnsureWritable(IDocument document, Action`1<ModificationCookie> withCookie);
    public ISignal`1<DocumentChange> get_BeforeAnyDocumentChanged();
    public ISignal`1<DocumentChange> get_BeforeAnyDocumentCopyChanged();
    public SolutionDocumentChangeProvider get_ChangeProvider();
    public IRangeMarker CreateRangeMarker(DocumentRange documentRange);
    [PureAttribute]
public IList`1<IDocument> GetSharedDocuments(IDocument document);
}
[ExtensionAttribute]
public static class JetBrains.DocumentManagers.DocumentManagerExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IDocument GetDocument(IProjectFile projectFile);
    [ExtensionAttribute]
public static IEnsureWritableCollection AddDocument(IEnsureWritableCollection collection, DocumentManager documentManager, IDocument document);
    [ExtensionAttribute]
public static void AddDocuments(IEnsureWritableCollection collection, DocumentManager documentManager, IEnumerable`1<IDocument> documents);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static ISolution TryGetSolution(IDocument document);
    [ExtensionAttribute]
[NotNullAttribute]
public static VirtualFileSystemPath TryGetFilePath(IDocument document);
}
[SolutionComponentAttribute("10")]
public class JetBrains.DocumentManagers.DocumentsOnProjectFiles : object {
    [NotNullAttribute]
private IDocumentManagerDocumentFactory myDocumentFactory;
    [NotNullAttribute]
private Func`3<VirtualFileSystemPath, IDocumentOwner, IDocument> myDocumentCreator;
    [NotNullAttribute]
private Func`2<IProjectFile, IDocument> myDocumentCreatorFromFile;
    [NotNullAttribute]
private CountingSet`1<IProjectFile> myTemporaryCachedValidProjectFiles;
    [CompilerGeneratedAttribute]
private DocumentToProjectFileMappingStorage <Storage>k__BackingField;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [NotNullAttribute]
public DocumentToProjectFileMappingStorage Storage { get; }
    public ISolution Solution { get; }
    public DocumentsOnProjectFiles(ISolution solution, DocumentToProjectFileMappingStorage storage, IDocumentManagerDocumentFactory documentFactory);
    [CompilerGeneratedAttribute]
public DocumentToProjectFileMappingStorage get_Storage();
    [CompilerGeneratedAttribute]
public sealed virtual ISolution get_Solution();
    public IDocument GetOrCreateDocument(VirtualFileSystemPath path);
    private void AssertProjectFileIsValid(IProjectFile projectFile);
    private bool IsProjectFileValid(IProjectFile projectFile);
    [CanBeNullAttribute]
private IDocument TryGetOrCreateDocument(IProjectFile projectFile);
    [NotNullAttribute]
public IDocument GetOrCreateDocument(IProjectFile projectFile);
    [CanBeNullAttribute]
public IDocument TryGetDocument(IProjectFile projectFile);
    [NotNullAttribute]
public IProjectFile GetProjectFile(IDocument document);
    public bool TryGetProjectFile(IDocument document, IProjectFile& projectFile);
    [CanBeNullAttribute]
public VirtualFileSystemPath TryGetDocumentFilePath(IDocument document);
    [ObsoleteAttribute("Even in tests think 239 times before using this API. It will break invariant that PSI file always holds the document. Consider using SynchronizeAllDocumentContentsWithDiskFiles instead when files are changed")]
public void ClearDocuments();
    public void SynchronizeAllDocumentContentsWithDiskFiles(IDocumentStorageHelpers documentStorageHelpers);
    [NotNullAttribute]
private IDocument CreateDocument(IProjectFile projectFile);
    public sealed virtual IDocumentPointer CreateDocumentPointer(IDocument document);
    public sealed virtual void EnableDocumentPointerCaching(Lifetime lifetime, IDocument document);
    [CanBeNullAttribute]
private IDocumentPointer TryCreatePointerFromPath(IDocument document);
    [CompilerGeneratedAttribute]
private IDocument <.ctor>b__10_0(VirtualFileSystemPath path, IDocumentOwner owner);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("18")]
public class JetBrains.DocumentManagers.DocumentToProjectFileMappingStorage : object {
    private Key`1<IProjectFile> myProjectItemKey;
    private Key`1<VirtualFileSystemPath> myDocumentFilePathKey;
    private WeakToWeakDictionary`2<IProjectFile, IDocument> myFileToDocumentMap;
    private WeakToWeakDictionary`2<VirtualFileSystemPath, IDocument> myFilePathToDocumentMap;
    private ILogger myLogger;
    private ISolution mySolution;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<IProjectFile, ValueTuple`2<IDocument, int>> myCachedProjectFileToDocuments;
    private object myLock;
    public ISignal`1<Tuple`3<IProjectFile, IDocument, bool>> Added;
    public Signal`1<Tuple`3<IProjectFile, IDocument, VirtualFileSystemPath>> AddedExplicitly;
    public Signal`1<Tuple`3<IProjectFile, IDocument, VirtualFileSystemPath>> RemovedExplicitly;
    public DocumentToProjectFileMappingStorage(Lifetime lifetime, ILogger logger, ISolution solution, ChangeManager changeManager);
    internal void ClearDocuments();
    public IDocument TryGetDocumentByProjectFile(IProjectFile projectFile);
    private IDocument TryGetDocumentByProjectFileNoValidityCheck(IProjectFile projectFile);
    public IDocument TryGetDocumentByPath(VirtualFileSystemPath filePath);
    public IList`1<IDocument> GetAllDocuments();
    private void AddProjectFile(IProjectFile projectFile);
    private void RemoveProjectFile(IProjectFile projectFile, VirtualFileSystemPath oldPath);
    private void MoveProjectFile(IProjectFile projectFile, IProjectFolder oldParentFolder, VirtualFileSystemPath oldPath);
    private void SetMapping(VirtualFileSystemPath path, IDocument document);
    public void CleanMapping(VirtualFileSystemPath path, IDocument document);
    private void SetMapping(IProjectFile projectFile, IDocument document, bool isNewDocument);
    [PureAttribute]
public IProjectFile TryGetProjectFile(IDocument document);
    [ObsoleteAttribute("Using only in Rider. TBR 241")]
public bool IsThereMultipleDocumentOnThePath(IDocument document);
    public VirtualFileSystemPath TryGetDocumentFilePath(IDocument document);
    public IProjectFile TryGetInvalidProjectFile(IDocument document);
    internal IDocument GetOrCreateDocument(VirtualFileSystemPath path, IDocumentOwner owner, Func`3<VirtualFileSystemPath, IDocumentOwner, IDocument> create);
    internal void EnableProjectFileToDocumentCaching(Lifetime lifetime, IProjectFile projectFile, IDocument document);
    internal IDocument GetOrCreateDocument(IProjectFile projectFile, Func`2<IProjectFile, IDocument> create);
    private IDocument GetOrCreateDocumentImpl(IProjectFile projectFile, Func`2<IProjectFile, IDocument> create);
    private IDocument DocumentByPath(IProjectFile projectFile);
    [NullableContextAttribute("2")]
private static bool CanBeFilesPathBased(IProject project);
    [NullableContextAttribute("2")]
private string DumpDocument(IDocument document);
    public IDocument TryGetDocument(IProjectFile projectFile);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.DocumentManagers.Forks.ForkedDocument : ManagedDocumentBase {
    [CompilerGeneratedAttribute]
private IDocument <SourceDocument>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Moniker>k__BackingField;
    public IDocument SourceDocument { get; }
    public string Moniker { get; }
    public ForkedDocument(IDocument sourceDocument, IDocumentTransactionManager documentTransactionManager, IShellLocks locks, DocumentChangeManager documentChangeManager, IDocumentOwner owner);
    [CompilerGeneratedAttribute]
public IDocument get_SourceDocument();
    private static ModificationCookie EnsureWritableHandler(IDocument document);
    [CompilerGeneratedAttribute]
public virtual string get_Moniker();
    public bool HasRealChanges();
    public virtual bool ContainsReadOnlyRegions();
    public virtual void MakeReadonly(Lifetime lifetime, TextRange range);
    protected virtual LineIndex GetOrCreateLineIndex();
    protected virtual void AssertOnDocumentModification();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DocumentManagers.Forks.ForkedDocumentDiff : object {
    private ForkedDocument myForkedDocument;
    public IDocument SourceDocument { get; }
    public IDocument ForkedDocument { get; }
    internal ForkedDocumentDiff(ForkedDocument forkedDocument);
    public IDocument get_SourceDocument();
    public IDocument get_ForkedDocument();
    [PureAttribute]
public bool HasChanges();
    public IList`1<DiffText> Fragments();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("0")]
public class JetBrains.DocumentManagers.Forks.ForkedDocumentsManager : object {
    [CompilerGeneratedAttribute]
private ISolution <solution>P;
    [CompilerGeneratedAttribute]
private IDocumentTransactionManager <documentTransactionManager>P;
    [CompilerGeneratedAttribute]
private IShellLocks <locks>P;
    [CompilerGeneratedAttribute]
private DocumentChangeManager <documentChangeManager>P;
    private LazyForkedContentModelData`1<Dictionary`2<IDocument, ForkedDocument>> myForkedDocuments;
    private ISolution JetBrains.DocumentManagers.ISolutionDocumentOwner.Solution { get; }
    public ForkedDocumentsManager(ISolution solution, IDocumentTransactionManager documentTransactionManager, IShellLocks locks, DocumentChangeManager documentChangeManager);
    private sealed virtual override ISolution JetBrains.DocumentManagers.ISolutionDocumentOwner.get_Solution();
    private sealed virtual override IDocumentPointer JetBrains.DocumentModel.IDocumentOwner.CreateDocumentPointer(IDocument document);
    private sealed virtual override void JetBrains.DocumentModel.IDocumentOwner.EnableDocumentPointerCaching(Lifetime lifetime, IDocument document);
    [MustUseReturnValueAttribute]
public IDocument GetForkedDocument(IDocument originalDocument);
    [NullableContextAttribute("2")]
[PureAttribute]
public static bool IsForkedDocument(IDocument document);
    [NullableContextAttribute("2")]
[PureAttribute]
public static IDocument UnwrapDocumentIfForked(IDocument document);
    [MustUseReturnValueAttribute]
public IReadOnlyList`1<ForkedDocumentDiff> GetDiffs();
}
[NullableContextAttribute("1")]
public interface JetBrains.DocumentManagers.IDocumentManagerDocumentFactory {
    public abstract virtual IDocument CreateDocument(IProjectFile projectFile, IDocumentOwner owner);
    public abstract virtual IDocument CreateDocument(VirtualFileSystemPath filePath, IDocumentOwner owner);
}
public interface JetBrains.DocumentManagers.IIsFileOpenedProvider {
    public abstract virtual bool IsOpened(IProjectFile file);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.DocumentManagers.impl.DocumentManagerInMemoryChangeTracker : object {
    private DocumentOperationsImpl myDocumentOperations;
    private DocumentToProjectFileMappingStorage myDocumentToProjectFileMappingStorage;
    public DocumentManagerInMemoryChangeTracker(Lifetime lifetime, DocumentOperationsImpl documentOperations, DocumentToProjectFileMappingStorage documentToProjectFileMappingStorage);
    private sealed virtual override void JetBrains.ProjectModel.IInMemoryFileChangeTracker.SaveFile(IProjectFile file);
}
[SolutionComponentAttribute("10")]
public class JetBrains.DocumentManagers.impl.DocumentOperationsImpl : object {
    protected ISolution Solution;
    protected IShellLocks Locks;
    protected DocumentToProjectFileMappingStorage DocumentToProjectFileMappingStorage;
    private IFileSystemTracker myFileSystemTracker;
    private ILogger myLogger;
    private Reasons`1<string> myPauseSyncReasons;
    [CompilerGeneratedAttribute]
private IFileEncodingProvider <FileEncodingProvider>k__BackingField;
    private CountingSet`1<VirtualFileSystemPath> myOpenDocumentPaths;
    [CompilerGeneratedAttribute]
private ISignal`1<DocumentSavedEventArgs> <AfterDocumentSaved>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<UnknownDocumentSavedEventArgs> <AfterUnknownDocumentSaved>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<BeforeDocumentSavedEventArgs> <BeforeDocumentSaved>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<BeforeDocumentReloadedEventArgs> <BeforeDocumentReloaded>k__BackingField;
    [CanBeNullAttribute]
public IFileEncodingProvider FileEncodingProvider { get; protected set; }
    public ISignal`1<DocumentSavedEventArgs> AfterDocumentSaved { get; }
    public ISignal`1<UnknownDocumentSavedEventArgs> AfterUnknownDocumentSaved { get; }
    public ISignal`1<BeforeDocumentSavedEventArgs> BeforeDocumentSaved { get; }
    public ISignal`1<BeforeDocumentReloadedEventArgs> BeforeDocumentReloaded { get; }
    public DocumentOperationsImpl(Lifetime lifetime, ISolution solution, IShellLocks locks, ChangeManager changeManager, DocumentToProjectFileMappingStorage documentToProjectFileMappingStorage, IFileSystemTracker fileSystemTracker, RunningDocuments runningDocuments);
    [CompilerGeneratedAttribute]
public IFileEncodingProvider get_FileEncodingProvider();
    [CompilerGeneratedAttribute]
protected Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_FileEncodingProvider(IFileEncodingProvider value);
    protected virtual bool IsDocumentWithCorrespondingPathOpenInTheEditorAndWillBeHandledByTheEditor(VirtualFileSystemPath documentPath);
    protected virtual bool IsDocumentWithCorrespondingPathOpenInTheEditor(VirtualFileSystemPath documentPath);
    public void PauseSyncDocuments(Lifetime lifetime, string reason);
    private void Init_ScheduleReloadOnProjectFileExternalChange(Lifetime lifetime, IProperty`1<bool> syncAllowedProperty, IShellLocks locks, ChangeManager changeManager, ISolution solution, DocumentToProjectFileMappingStorage documentToProjectFileMappingStorage);
    private void SynchronizeProjectFiles(HashSet`1<IProjectFile> projectFilesToSync, IShellLocks locks, ISolution solution, DocumentToProjectFileMappingStorage documentToProjectFileMappingStorage);
    private void Init_ScheduleReloadOnFileExternalChange(Lifetime lifetime, IProperty`1<bool> syncAllowedProperty, IShellLocks locks, ChangeManager changeManager, DocumentToProjectFileMappingStorage documentToProjectFileMappingStorage, IFileSystemTracker fileSystemTracker);
    private void SynchronizeDocumentsByPath(ConcurrentDictionary`2<VirtualFileSystemPath, VirtualFileSystemPath> pathsToSync, IShellLocks locks, DocumentToProjectFileMappingStorage documentToProjectFileMappingStorage);
    public virtual void SaveDocument(IDocument document);
    protected static void AssertNoDocumentTransaction(IDocument document);
    protected void SaveDocumentInternal(IDocument document);
    protected virtual void SaveToStream(IDocument document, Func`2<Lifetime, Stream> createWriteStream, VirtualFileSystemPath projectFileLocation);
    protected virtual void OnSaveException(IDocument document, Exception e);
    public virtual void SaveDocumentAfterModification(IDocument document, bool forceSaveOpenDocuments);
    public virtual void SynchronizeDocumentContentsWithStorage(IDocument document, VirtualFileSystemPath documentPath);
    public virtual string GetDocumentTextFromFile(VirtualFileSystemPath documentPath, Encoding& newEncoding);
    public virtual IEnumerable`1<IDocument> GetUnsavedDocuments();
    public virtual bool IsDocumentUnsaved(IDocument document);
    public virtual void SaveAllDocuments();
    private void OnBeforeDocumentSaved(BeforeDocumentSavedEventArgs args);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<DocumentSavedEventArgs> get_AfterDocumentSaved();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<UnknownDocumentSavedEventArgs> get_AfterUnknownDocumentSaved();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<BeforeDocumentSavedEventArgs> get_BeforeDocumentSaved();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<BeforeDocumentReloadedEventArgs> get_BeforeDocumentReloaded();
    public sealed virtual void SynchronizeDocumentContentsWithDiskFile(IDocument document, VirtualFileSystemPath documentPath);
    public sealed virtual void MarkReconciledWithExternalVersion(IDocument document, string onlyIfTextOnDiskEquals);
    public sealed virtual void CommitFileSystemTrackerChanges(IDocument document);
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_0(Lifetime documentLifetime, ValueTuple`2<IDocument, RunningDocumentId> pair);
}
public class JetBrains.DocumentManagers.impl.ProjectFileDocumentChange : DocumentChange {
    private IProjectFile myProjectFile;
    [NotNullAttribute]
public IProjectFile ProjectFile { get; }
    public ProjectFileDocumentChange(DocumentChange documentChange, IProjectFile projectFile);
    public IProjectFile get_ProjectFile();
}
public class JetBrains.DocumentManagers.impl.ProjectFileDocumentCopyChange : DocumentChange {
    private IProjectFile myProjectFile;
    [NotNullAttribute]
public IProjectFile ProjectFile { get; }
    public ProjectFileDocumentCopyChange(DocumentChange documentChange, IProjectFile projectFile);
    public IProjectFile get_ProjectFile();
}
[ExtensionAttribute]
public static class JetBrains.DocumentManagers.impl.ProjectFileUtil : object {
    public static string ReadTextFromFile(IProjectFile file, Encoding& detectedEncoding, IFileEncodingProvider encodingProvider);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectFolder GetOrCreateProjectFolder(IProjectFolder baseFolder, VirtualFileSystemPath path, IProjectModelTransactionCookie cookie, IFolderCreationContext context);
}
[NullableContextAttribute("1")]
public interface JetBrains.DocumentManagers.ISolutionDocumentOwner {
    public ISolution Solution { get; }
    public abstract virtual ISolution get_Solution();
}
[SolutionComponentAttribute("10")]
public class JetBrains.DocumentManagers.LiveTracking.FileSystemWildcardChangeTracker : object {
    protected Lifetime Lifetime;
    protected ISolution Solution;
    protected IShellLocks Locks;
    protected ILogger Logger;
    private IProjectModelEditorOperations myProjectModelEditorOperations;
    private SynchronizationPoint mySyncPoint;
    private SingleThreadExecutor myExecutor;
    private LiveWildcardContainer myWildcardContainer;
    [CompilerGeneratedAttribute]
private IProperty`1<IComponentContainer> <ProjectsHostContainer>k__BackingField;
    public IProperty`1<IComponentContainer> ProjectsHostContainer { get; protected set; }
    public FileSystemWildcardChangeTracker(Lifetime lifetime, ISolution solution, ILogger logger, IFileSystemTracker fileSystemTracker, IProjectModelEditorOperations projectModelEditorOperations, SynchronizationPoints synchronizationPoints);
    [CompilerGeneratedAttribute]
public IProperty`1<IComponentContainer> get_ProjectsHostContainer();
    [CompilerGeneratedAttribute]
protected void set_ProjectsHostContainer(IProperty`1<IComponentContainer> value);
    [CanBeNullAttribute]
protected virtual IProject TryFindProject(IProjectMark projectMark);
    protected virtual bool IgnorePathEvent(VirtualFileSystemPath path);
    protected virtual void OnProjectMarksToReloadOnSubtreeChanged(ICollection`1<IProjectMark> projectMarks);
    private void OnFileSystemChange(FileSystemChange change);
    private void OnFileSystemChangeBackground(FileSystemChange change, Action onFinish);
    private void OnFileSystemChangeBackground(FileSystemChangeDelta delta, List`1<IAffectedItemAction> affectedItems);
    [CanBeNullAttribute]
public static RelativePath GetLinkDirectory(IProject project, IWildcardItemDescriptor descriptor, VirtualFileSystemPath filePath, string recursiveDir);
}
public interface JetBrains.DocumentManagers.LiveTracking.IProjectMarkChangeProvider {
    public abstract virtual IEnumerable`1<IProjectMark> GetProjectChanges(VirtualFileSystemPath path);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.DocumentManagers.LiveTracking.LiveWildcardContainer : WildcardContainer {
    private Lifetime myLifetime;
    private IShellLocks myShellLocks;
    private ViewableCollection`1<VirtualFileSystemPath> myDirectoriesToWatch;
    public IViewable`1<VirtualFileSystemPath> DirectoriesToWatch { get; }
    public LiveWildcardContainer(Lifetime lifetime, IShellLocks shellLocks);
    public IViewable`1<VirtualFileSystemPath> get_DirectoriesToWatch();
    protected virtual void OnFoldersToWatchChange(HashSet`1<VirtualFileSystemPath> addedPaths, HashSet`1<VirtualFileSystemPath> removedPaths);
}
public abstract class JetBrains.DocumentManagers.LiveTracking.ProjectHostFileSystemChangeTrackerBase : object {
    private Lifetime myLifetime;
    private IShellLocks myLocks;
    private FileContentTracker myFileContentTracker;
    private IReadOnlyCollection`1<IProjectMarkChangeProvider> myProviders;
    private IReadOnlyCollection`1<VirtualFileSystemPath> mySolutionPaths;
    private List`1<string> myNuGetGeneratedFilePatterns;
    protected ILogger Logger;
    [CompilerGeneratedAttribute]
private ISignal`1<FileSystemChange> <Change>k__BackingField;
    [NotNullAttribute]
public ISignal`1<FileSystemChange> Change { get; }
    protected ProjectHostFileSystemChangeTrackerBase(Lifetime lifetime, ILogger logger, IShellLocks locks, ISolutionMark solutionMark, IFileSystemTracker fileSystemTracker, FileContentTracker fileContentTracker, IImmutableList`1<IProjectMarkChangeProvider> providers);
    [CompilerGeneratedAttribute]
public ISignal`1<FileSystemChange> get_Change();
    private void OnFileSystemChange(FileSystemChange change);
    protected abstract virtual void ReloadProjects(HashSet`1<IProjectMark> projectChanges);
    protected abstract virtual void ReloadSolutionAndProjects(HashSet`1<IProjectMark> projectChanges);
    private void CollectChanges(FileSystemChangeDelta delta, HashSet`1<IProjectMark> projectChanges, Boolean& solutionChange);
    private bool OnNuGetGeneratedFileChange(FileSystemChangeDelta delta);
    private bool IsNuGetGeneratedFile(VirtualFileSystemPath path);
    protected virtual void OnChange(FileSystemChange change);
}
[ProjectsHostComponentAttribute("10")]
public class JetBrains.DocumentManagers.LiveTracking.Providers.ProjectMarkChangeProvider : ProjectMarkChangeProviderBase {
    public ProjectMarkChangeProvider(Lifetime lifetime, ISolutionMark solutionMark, ISolutionStructureContainer solutionStructureContainer, FileContentTracker fileContentTracker);
    private void ProjectMarkOnUpdated(ProjectMarkChange change);
    private void ProjectMarkOnUpdated(IProjectMark projectMark);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <.ctor>b__0_0(Lifetime projectMarkLifetime, int _, IProjectMark projectMark);
}
public abstract class JetBrains.DocumentManagers.LiveTracking.Providers.ProjectMarkChangeProviderBase : object {
    private Lifetime myLifetime;
    private FileContentTracker myFileContentTracker;
    private Dictionary`2<IProjectMark, LifetimeDefinition> mySubscriptions;
    private OneToSetMap`2<VirtualFileSystemPath, IProjectMark> myProjectPaths;
    protected ProjectMarkChangeProviderBase(Lifetime lifetime, FileContentTracker fileContentTracker);
    protected void Update(IProjectMark projectMark, IEnumerable`1<VirtualFileSystemPath> paths);
    private void Unsubscribe(IProjectMark projectMark);
    private sealed virtual override IEnumerable`1<IProjectMark> JetBrains.DocumentManagers.LiveTracking.IProjectMarkChangeProvider.GetProjectChanges(VirtualFileSystemPath path);
}
[ProjectsHostComponentAttribute("0")]
public class JetBrains.DocumentManagers.LiveTracking.Providers.ProjectMarkImportsChangeProvider : ProjectMarkChangeProviderBase {
    public ProjectMarkImportsChangeProvider(Lifetime lifetime, FileContentTracker fileContentTracker);
    public sealed virtual void OnProjectLoaded(IProjectMark projectMark, IProjectDescriptor projectDescriptor, MsBuildProject msBuildProject);
    private void AddPossibleDirectoryImports(IProjectMark projectMark, HashSet`1<VirtualFileSystemPath> paths, string importName);
}
[SolutionComponentAttribute("10")]
public class JetBrains.DocumentManagers.LiveTracking.UnresolvedAssemblyReferenceMonitor : object {
    private Lifetime myLifetime;
    private ISolution mySolution;
    private ILogger myLogger;
    private IFileSystemTracker myFileSystemTracker;
    private IModuleReferenceResolveManager myModuleReferenceResolveManager;
    private OneToListMap`2<IProjectToModuleReference, LifetimeDefinition> myTrackingLifetimes;
    public UnresolvedAssemblyReferenceMonitor(Lifetime lifetime, ISolution solution, ILogger logger, ChangeManager changeManager, IFileSystemTracker fileSystemTracker, IModuleReferenceResolveManager moduleReferenceResolveManager);
    [CanBeNullAttribute]
public static VirtualFileSystemPath GetMismatchingHintPath(IProjectToAssemblyReference reference);
    private void ProcessChange(ChangeEventArgs obj);
    private void ProcessChange(ProjectModelChange projectModelChange);
    private void TrackAssemblyFileLocation(IProjectToModuleReference reference, VirtualFileSystemPath location, string description);
    private void ExecuteOnDispatcherThread(Action action);
    private void OnReferenceFileAdded(IProjectToModuleReference referenceToUpgrade, VirtualFileSystemPath location, string description);
}
[ZoneMarkerAttribute]
public class JetBrains.DocumentManagers.LiveTracking.ZoneMarker : object {
}
[ShellComponentAttribute("16")]
internal class JetBrains.DocumentManagers.ProjectDocumentsFakeSolutionZoneProvider : object {
    public IEnumerable`1<FakeSolutionZoneFilter> Zones { get; }
    public sealed virtual IEnumerable`1<FakeSolutionZoneFilter> get_Zones();
}
[SolutionComponentAttribute("10")]
public class JetBrains.DocumentManagers.ProjectFilesRemovedOnDocumentTransactionCommit : object {
    public ISignal`1<IProjectFile> ProjectFileRemoved;
    private Stack`1<List`1<IProjectFile>> myFilesToRemoveAfterTransaction;
    private bool myIsDocumentTransactionCommitInProgress;
    public ProjectFilesRemovedOnDocumentTransactionCommit(Lifetime lifetime, DocumentTransactionManager documentTransactionManager, ChangeManager changeManager, ISolution solution, ILogger logger);
    private bool IsUnderTransaction();
}
[SolutionComponentAttribute("16")]
public class JetBrains.DocumentManagers.ProjectModelAwareRangeMarkerManager : object {
    [NotNullAttribute]
private DocumentToProjectFileMappingStorage myDocumentToProjectFileMappingStorage;
    [NotNullAttribute]
private IShellLocks myLocks;
    public ProjectModelAwareRangeMarkerManager(IShellLocks locks, DocumentToProjectFileMappingStorage documentToProjectFileMappingStorage);
    [NotNullAttribute]
public IRangeMarker CreateRangeMarker(DocumentRange documentRange);
}
[SolutionComponentAttribute("16")]
public class JetBrains.DocumentManagers.PropertiesExtender.BuildActionPropertiesExtenderProvider : object {
    private Lifetime myLifetime;
    private IShellLocks myLocks;
    private ISolution mySolution;
    public BuildActionPropertiesExtenderProvider(Lifetime lifetime, IShellLocks locks, ISolution solution);
    public sealed virtual bool CanExtend(IProjectItem projectItem, PropertiesLocation location);
    [IteratorStateMachineAttribute("JetBrains.DocumentManagers.PropertiesExtender.BuildActionPropertiesExtenderProvider/<GetPropertyDescriptors>d__5")]
public sealed virtual IEnumerable`1<PropertyDescriptor> GetPropertyDescriptors(IProjectItem projectItem);
}
[SolutionComponentAttribute("0")]
public class JetBrains.DocumentManagers.PropertyModifiers.AllowUnsafeCodePropertyModifier : ProjectPropertyModifierBase`1<bool> {
    protected string MsBuildPropertyName { get; }
    public AllowUnsafeCodePropertyModifier(ILogger logger, IProjectModelEditor projectModelEditor, IProjectConfigurationsProvider projectConfigurationsProvider);
    protected virtual string get_MsBuildPropertyName();
    protected virtual string ConvertToMsBuildPropertyValue(bool value);
    public virtual bool CanModify(bool allowUnsafeCode, IProject project);
}
[SolutionComponentAttribute("0")]
public class JetBrains.DocumentManagers.PropertyModifiers.CSharpLanguageVersionModifier : LanguageVersionModifierBase`1<CSharpLanguageVersion> {
    public CSharpLanguageVersionModifier(ILogger logger, IProjectModelEditor projectModelEditor, IProjectConfigurationsProvider projectConfigurationsProvider, ILanguageVersionProjectProperty`1<CSharpLanguageVersion> projectProperty);
}
[SolutionComponentAttribute("0")]
public class JetBrains.DocumentManagers.PropertyModifiers.EnablePreviewFeaturesPropertyModifier : ProjectPropertyModifierBase`1<bool> {
    public static string ProjectPropertyName;
    protected string MsBuildPropertyName { get; }
    public EnablePreviewFeaturesPropertyModifier(ILogger logger, IProjectModelEditor projectModelEditor, IProjectConfigurationsProvider projectConfigurationsProvider);
    protected virtual string get_MsBuildPropertyName();
    protected virtual string ConvertToMsBuildPropertyValue(bool value);
}
[SolutionComponentAttribute("0")]
public class JetBrains.DocumentManagers.PropertyModifiers.ImplicitUsingsPropertyModifier : ProjectPropertyModifierBase`1<ImplicitUsingsKind> {
    protected string MsBuildPropertyName { get; }
    public ImplicitUsingsPropertyModifier(ILogger logger, IProjectModelEditor projectModelEditor, IProjectConfigurationsProvider projectConfigurationsProvider);
    protected virtual string get_MsBuildPropertyName();
    protected virtual string ConvertToMsBuildPropertyValue(ImplicitUsingsKind implicitUsingsKind);
    public virtual bool CanModify(ImplicitUsingsKind implicitUsingsKind, IProject project);
}
public abstract class JetBrains.DocumentManagers.PropertyModifiers.LanguageVersionModifierBase`1 : ProjectPropertyModifierBase`1<TLanguageVersion> {
    [CompilerGeneratedAttribute]
private ILanguageVersionProjectProperty`1<TLanguageVersion> <ProjectProperty>k__BackingField;
    [CanBeNullAttribute]
protected ILanguageVersionProjectProperty`1<TLanguageVersion> ProjectProperty { get; }
    protected string MsBuildPropertyName { get; }
    protected LanguageVersionModifierBase`1(ILogger logger, IProjectModelEditor projectModelEditor, IProjectConfigurationsProvider projectConfigurationsProvider, ILanguageVersionProjectProperty`1<TLanguageVersion> projectProperty);
    [CompilerGeneratedAttribute]
protected ILanguageVersionProjectProperty`1<TLanguageVersion> get_ProjectProperty();
    protected virtual string get_MsBuildPropertyName();
    protected virtual string ConvertToMsBuildPropertyValue(TLanguageVersion value);
    [PureAttribute]
protected virtual bool IsApplicable(IProject project);
    public virtual bool CanModify(TLanguageVersion value, IProject project);
    [PureAttribute]
private bool CheckLanguageVersionAgainstAllTargetFrameworks(TLanguageVersion newLanguageVersion, IProject project);
}
[SolutionComponentAttribute("0")]
public class JetBrains.DocumentManagers.PropertyModifiers.NullableContextPropertyModifier : ProjectPropertyModifierBase`1<NullableContextKind> {
    protected string MsBuildPropertyName { get; }
    public NullableContextPropertyModifier(ILogger logger, IProjectModelEditor projectModelEditor, IProjectConfigurationsProvider projectConfigurationsProvider);
    protected virtual string get_MsBuildPropertyName();
    protected virtual string ConvertToMsBuildPropertyValue(NullableContextKind nullableContextKind);
    public virtual bool CanModify(NullableContextKind nullableContextKind, IProject project);
}
public abstract class JetBrains.DocumentManagers.PropertyModifiers.ProjectPropertyModifierBase`1 : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectModelEditor <ProjectModelEditor>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectConfigurationsProvider <ProjectConfigurationsProvider>k__BackingField;
    [NotNullAttribute]
protected ILogger Logger { get; }
    [CanBeNullAttribute]
protected IProjectModelEditor ProjectModelEditor { get; }
    [CanBeNullAttribute]
protected IProjectConfigurationsProvider ProjectConfigurationsProvider { get; }
    [NotNullAttribute]
protected string MsBuildPropertyName { get; }
    protected ProjectPropertyModifierBase`1(ILogger logger, IProjectModelEditor projectModelEditor, IProjectConfigurationsProvider projectConfigurationsProvider);
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
protected IProjectModelEditor get_ProjectModelEditor();
    [CompilerGeneratedAttribute]
protected IProjectConfigurationsProvider get_ProjectConfigurationsProvider();
    protected abstract virtual string get_MsBuildPropertyName();
    [NotNullAttribute]
[PureAttribute]
protected abstract virtual string ConvertToMsBuildPropertyValue(TProperty value);
    [PureAttribute]
protected virtual bool ShouldModifyPropertyForEveryConfiguration(IProject project);
    public virtual bool CanModify(TProperty value, IProject project);
    public virtual void Modify(TProperty value, IProject project);
    private void RemoveProperty(IProject project, string configurationName, string platformName);
    protected virtual bool TryRemoveProperty(IProject project, string configurationName, string platformName);
    private void ModifyProperty(string propertyValue, IProject project, string configurationName, string platformName);
    protected virtual bool TryModifyProperty(string propertyValue, IProject project, string configurationName, string platformName);
}
[SolutionComponentAttribute("0")]
public class JetBrains.DocumentManagers.PropertyModifiers.VBLanguageVersionModifier : LanguageVersionModifierBase`1<VBLanguageVersion> {
    public VBLanguageVersionModifier(ILogger logger, IProjectModelEditor projectModelEditor, IProjectConfigurationsProvider projectConfigurationsProvider, ILanguageVersionProjectProperty`1<VBLanguageVersion> projectProperty);
}
[ExtensionAttribute]
public static class JetBrains.DocumentManagers.RangeMarkerExtentions : object {
    [ExtensionAttribute]
[CodeTemplateAttribute("$expr{Expression,'JetBrains.DocumentModel.DocumentRange'}$.CreateRangeMarker(DocumentManager.GetInstance($solution$))")]
[NotNullAttribute]
[PureAttribute]
public static IRangeMarker CreateRangeMarker(DocumentRange documentRange, DocumentManager documentManager);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static IRangeMarker CreateProjectAwareRangeMarker(DocumentRange documentRange, ISolution solution);
    [ExtensionAttribute]
[CanBeNullAttribute]
[PureAttribute]
public static IProjectFile TryGetProjectFile(IRangeMarker rangeMarker, DocumentManager documentManager);
}
[SolutionComponentAttribute("10")]
public class JetBrains.DocumentManagers.RangeMarkersManager_InvalidateFileMarkersOnProjectModelChange : object {
    public RangeMarkersManager_InvalidateFileMarkersOnProjectModelChange(Lifetime lifetime, ProjectFilesRemovedOnDocumentTransactionCommit projectFilesRemovedOnDocumentTransactionCommit, ChangeManager changeManager, ISolution solution, DocumentToProjectFileMappingStorage documentToProjectFileMappingStorage, IShellLocks locks);
    private static void InvalidateProjectFileRangeMarkers(IProjectFile projectFile, IShellLocks locks);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.DocumentManagers.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string CannotSetEmptyTargetFrameworkIdsList_Text { get; }
    public static string Folder_AlreadyExistsIn__Text { get; }
    public static string FileNameContainsInvalidCharacters_Text { get; }
    public static string InvalidFileName__Text { get; }
    public static string FileNamesEndingWithSpacesAreNotSupported_Text { get; }
    public static string CreationOfASubfolderInNullProjectIs_Text { get; }
    public static string CreationOfASubfolderInMiscFilesProject_Text { get; }
    public static string CreationOfASubfolderInSolutionFolder_Text { get; }
    public static string CreationOfASubfolderInSolutionProject_Text { get; }
    public static string FileAlreadyHasRequestedName_Text { get; }
    public static string RenameOfTheSolutionProjectIsProhibited_Text { get; }
    public static string RenameOfTheProjectFileIsProhibited_Text { get; }
    public static string RenameOfLinkedFilesIsProhibited_Text { get; }
    public static string RenameOfAFileFromALinkedFolderIsProhibited_Text { get; }
    public static string Argument_IsNull_Text { get; }
    public static string AttemptingToPerformOperationOnElement_Text { get; }
    public static string CopyOfTheSolutionProjectIsProhibited_Text { get; }
    public static string CopyOfTheProjectFileIsProhibited_Text { get; }
    public static string CopyOfProjectIfProhibited_Text { get; }
    public static string ItemWithTheSameName_AlreadyExistsIn_Text { get; }
    public static string CannotCreateCopyOfALinkedFileInTheSame_Text { get; }
    public static string MoveOfTheSolutionProjectIsProhibited_Text { get; }
    public static string MoveOfTheProjectFileIsProhibited_Text { get; }
    public static string ProjectCanBeMovedOnlyToSolutionFolder_Text { get; }
    public static string CanTToMoveFolderIntoItself_Text { get; }
    public static string CannotRemoveItemWithoutProject_Text { get; }
    public static string RemoveOfTheProjectFileIsProhibited_Text { get; }
    public static string RemoveOfTheProjectIsProhibited_Text { get; }
    public static string EditingOfMsBuildPropertiesIsNotSupported_Text { get; }
    public static string ApplyingProjectModelChanges_Text { get; }
    public static string UnableToEditProjectPropertiesForThis_Text { get; }
    public static string CanTModifyFile___Text { get; }
    public static string CanTModifyReference___Text { get; }
    public static string Folder_ContainsItemsWhichCanTBeModified_Text { get; }
    public static string Move_Text { get; }
    public static string PathToTheProjectFileMustBeAbsolute_Text { get; }
    public static string ParentProjectMustBeASolutionFolder_Text { get; }
    public static string Project_AlreadyExistsInTheSolution_Text { get; }
    public static string NotImplemented_Text { get; }
    public static string SolutionFileMustExist_Text { get; }
    public static string BuildActionDisplayName_Text { get; }
    public static string BuildActionDescription_Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_CannotSetEmptyTargetFrameworkIdsList_Text();
    public static string get_Folder_AlreadyExistsIn__Text();
    public static string get_FileNameContainsInvalidCharacters_Text();
    public static string get_InvalidFileName__Text();
    public static string get_FileNamesEndingWithSpacesAreNotSupported_Text();
    public static string get_CreationOfASubfolderInNullProjectIs_Text();
    public static string get_CreationOfASubfolderInMiscFilesProject_Text();
    public static string get_CreationOfASubfolderInSolutionFolder_Text();
    public static string get_CreationOfASubfolderInSolutionProject_Text();
    public static string get_FileAlreadyHasRequestedName_Text();
    public static string get_RenameOfTheSolutionProjectIsProhibited_Text();
    public static string get_RenameOfTheProjectFileIsProhibited_Text();
    public static string get_RenameOfLinkedFilesIsProhibited_Text();
    public static string get_RenameOfAFileFromALinkedFolderIsProhibited_Text();
    public static string get_Argument_IsNull_Text();
    public static string get_AttemptingToPerformOperationOnElement_Text();
    public static string get_CopyOfTheSolutionProjectIsProhibited_Text();
    public static string get_CopyOfTheProjectFileIsProhibited_Text();
    public static string get_CopyOfProjectIfProhibited_Text();
    public static string get_ItemWithTheSameName_AlreadyExistsIn_Text();
    public static string get_CannotCreateCopyOfALinkedFileInTheSame_Text();
    public static string get_MoveOfTheSolutionProjectIsProhibited_Text();
    public static string get_MoveOfTheProjectFileIsProhibited_Text();
    public static string get_ProjectCanBeMovedOnlyToSolutionFolder_Text();
    public static string get_CanTToMoveFolderIntoItself_Text();
    public static string get_CannotRemoveItemWithoutProject_Text();
    public static string get_RemoveOfTheProjectFileIsProhibited_Text();
    public static string get_RemoveOfTheProjectIsProhibited_Text();
    public static string get_EditingOfMsBuildPropertiesIsNotSupported_Text();
    public static string get_ApplyingProjectModelChanges_Text();
    public static string get_UnableToEditProjectPropertiesForThis_Text();
    public static string get_CanTModifyFile___Text();
    public static string get_CanTModifyReference___Text();
    public static string get_Folder_ContainsItemsWhichCanTBeModified_Text();
    public static string get_Move_Text();
    public static string get_PathToTheProjectFileMustBeAbsolute_Text();
    public static string get_ParentProjectMustBeASolutionFolder_Text();
    public static string get_Project_AlreadyExistsInTheSolution_Text();
    public static string get_NotImplemented_Text();
    public static string get_SolutionFileMustExist_Text();
    public static string get_BuildActionDisplayName_Text();
    public static string get_BuildActionDescription_Text();
}
[SolutionComponentAttribute("10")]
public class JetBrains.DocumentManagers.SharedDocumentsSynchronizer : object {
    private static Key`1<Boxed`1<ModificationStamp>> ourSyncTimestampKey;
    private Lifetime myLifetime;
    private ISolution mySolution;
    private DocumentsOnProjectFiles myDocumentsOnProjectFiles;
    private DocumentTransactionManager myDocumentTransactionManager;
    private ILogger myLogger;
    private ChangeManager myChangeManager;
    private IDocumentStorageHelpers myDocumentStorageHelpers;
    private Dictionary`2<VirtualFileSystemPath, SharedEntry> myEntries;
    private HashSet`1<VirtualFileSystemPath> myCreateEntryInProgress;
    private SequentialLifetimes mySyncLifetimes;
    private Dictionary`2<VirtualFileSystemPath, SyncRequest> myPendingChanges;
    private SynchronizationPoint mySyncPoint;
    private Dictionary`2<VirtualFileSystemPath, CountingSet`1<IDocument>> myOpenDocuments;
    [CompilerGeneratedAttribute]
private ISignal`1<HashSet`1<VirtualFileSystemPath>> <InconsistentModificationsWhileSync>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SyncInProgress>k__BackingField;
    public ISignal`1<HashSet`1<VirtualFileSystemPath>> InconsistentModificationsWhileSync { get; }
    public bool SyncInProgress { get; private set; }
    public SharedDocumentsSynchronizer(Lifetime lifetime, ISolution solution, DocumentsOnProjectFiles documentsOnProjectFiles, DocumentTransactionManager documentTransactionManager, ILogger logger, ChangeManager changeManager, ISolutionLoadTasksScheduler solutionLoadTasksScheduler, SynchronizationPoints synchronizationPoints, IDocumentStorageHelpers documentStorageHelpers);
    private static SharedDocumentsSynchronizer();
    [CompilerGeneratedAttribute]
public ISignal`1<HashSet`1<VirtualFileSystemPath>> get_InconsistentModificationsWhileSync();
    [CompilerGeneratedAttribute]
public bool get_SyncInProgress();
    [CompilerGeneratedAttribute]
private void set_SyncInProgress(bool value);
    private void EnqueueSyncDocuments(string reason, VirtualFileSystemPath location, OneToListMap`2<IDocument, DocumentChange> documentChangesMap, bool executeSyncIfPossible);
    private void DoSyncDocuments();
    private void ReleaseDocumentsIfNoOpenDocumentsLeft();
    private void InitOnDocumentChange(Lifetime lifetime, ISolution solution, ChangeManager changeManager);
    private void InitOnProjectModelChange(Lifetime lifetime, ISolution solution, ChangeManager changeManager, ISolutionLoadTasksScheduler solutionLoadTasksScheduler);
    private void InitOnDocumentCreated(Lifetime lifetime, ISolution solution, DocumentsOnProjectFiles documentsOnProjectFiles);
    [CanBeNullAttribute]
private SharedEntry UpdateSharedEntry(VirtualFileSystemPath projectFilePath);
    private void TryRemoveSharedDocumentsEntry(VirtualFileSystemPath location);
    [CanBeNullAttribute]
private SharedEntry CreateSharedDocumentsEntryIfNecessary(Lifetime lifetime, ISolution solution, VirtualFileSystemPath projectFileLocation);
    private void InitAfterTransactionCommitted(Lifetime lifetime, DocumentTransactionManager documentTransactionManager, DocumentsOnProjectFiles documentsOnProjectFiles);
    [NotNullAttribute]
public IList`1<IDocument> TryGetOpenDocumentsForPath(VirtualFileSystemPath location);
    public void SetOpenDocument(Lifetime lifetime, IDocument document);
    public void Dump(TextWriter writer, VirtualFileSystemPath basePath);
    public void ForceSyncDocuments();
    [CompilerGeneratedAttribute]
private void <EnqueueSyncDocuments>b__23_1();
    [CompilerGeneratedAttribute]
private void <EnqueueSyncDocuments>b__23_2();
    [CompilerGeneratedAttribute]
private void <EnqueueSyncDocuments>b__23_3();
    [CompilerGeneratedAttribute]
private void <DoSyncDocuments>b__24_0();
    [CompilerGeneratedAttribute]
private void <DoSyncDocuments>b__24_1();
    [CompilerGeneratedAttribute]
private void <.ctor>b__26_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__26_1();
    [CompilerGeneratedAttribute]
private void <ForceSyncDocuments>b__37_0();
}
[SolutionComponentAttribute("10")]
public class JetBrains.DocumentManagers.SolutionDocumentChangeEventsAggregator : object {
    private WeakHashSet`1<IDocument> mySubscribedDocuments;
    public ISignal`1<DocumentChange> BeforeAnyDocumentChanged;
    public ISignal`1<DocumentChange> BeforeAnyDocumentCopyChanged;
    public SolutionDocumentChangeEventsAggregator(Lifetime lifetime, DocumentToProjectFileMappingStorage storage);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <.ctor>b__1_0(Tuple`3<IProjectFile, IDocument, bool> tuple);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_1(object _, EventArgs`1<DocumentChange> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_2(object _, EventArgs`1<DocumentChange> args);
}
[SolutionComponentAttribute("10")]
public class JetBrains.DocumentManagers.SolutionDocumentChangeProvider : object {
    private IEnsureWritableHandler myEnsureWritableHandler;
    private ICommandProcessor myCommandProcessor;
    private DocumentToProjectFileMappingStorage myDocumentToProjectFileMappingStorage;
    private DocumentChangeManager myDocumentChangeManager;
    public SolutionDocumentChangeProvider(Lifetime lifetime, IEnsureWritableHandler ensureWritableHandler, ICommandProcessor commandProcessor, DocumentToProjectFileMappingStorage documentToProjectFileMappingStorage, DocumentChangeManager documentChangeManager, ChangeManager changeManager);
    private sealed virtual override object JetBrains.Application.changes.IChangeProvider.Execute(IChangeMap changeMap);
    private void AssertOnFileBasedDocumentModification(DocumentBase document, IProjectFile projectFile);
}
[SolutionComponentAttribute("10")]
public class JetBrains.DocumentManagers.StandaloneDocumentManagerDocumentFactory : object {
    protected IEnsureWritableHandler myEnsureWritableHandler;
    protected IShellLocks myLocks;
    protected DocumentChangeManager myDocumentChangeManager;
    protected SolutionDocumentTransactionManager myDocumentTransactionManager;
    private DocumentToProjectFileMappingStorage myDocumentToProjectFileMappingStorage;
    [NotNullAttribute]
protected ILogger myLogger;
    private Func`2<IDocument, ModificationCookie> myEnsureDocumentWritableFunc;
    public StandaloneDocumentManagerDocumentFactory(IEnsureWritableHandler ensureWritableHandler, IShellLocks locks, DocumentChangeManager documentChangeManager, SolutionDocumentTransactionManager documentTransactionManager, DocumentToProjectFileMappingStorage documentToProjectFileMappingStorage, ILogger logger);
    [MustDisposeResourceAttribute]
private ModificationCookie EnsureDocumentWritable(IDocument document);
    public virtual IDocument CreateDocument(IProjectFile projectFile, IDocumentOwner owner);
    public virtual IDocument CreateDocument(VirtualFileSystemPath filePath, IDocumentOwner owner);
}
public abstract class JetBrains.DocumentManagers.Transactions.Actions.AddFileAction : TransactionActionBase {
    private IProjectFile myAddedFile;
    [NotNullAttribute]
protected IProject Project;
    [NotNullAttribute]
protected IProjectFolder ParentFolder;
    [NotNullAttribute]
protected VirtualFileSystemPath Location;
    [NotNullAttribute]
protected FileCreationParameters Parameters;
    [NotNullAttribute]
protected ISolution Solution;
    [NotNullAttribute]
protected IProjectModelEditorOperations Operations;
    [UsedImplicitlyAttribute]
private IDocument myDocument;
    public IProjectFile AddedFile { get; }
    public IEnumerable`1<IProjectFile> AffectedProjectFiles { get; }
    protected AddFileAction(IProjectFolder parentFolder, VirtualFileSystemPath location, FileCreationParameters parameters);
    public IProjectFile get_AddedFile();
    [IteratorStateMachineAttribute("JetBrains.DocumentManagers.Transactions.Actions.AddFileAction/<get_AffectedProjectFiles>d__12")]
public sealed virtual IEnumerable`1<IProjectFile> get_AffectedProjectFiles();
    public sealed virtual void Commit();
    protected abstract virtual void DoCommit();
    public sealed virtual void Rollback();
    [NotNullAttribute]
public virtual IProjectFile Prepare();
    protected virtual IProjectElementOrigin CreateProjectFileOrigin(BuildAction buildAction);
    protected virtual BuildAction GetBuildAction();
}
public abstract class JetBrains.DocumentManagers.Transactions.Actions.AddFolderAction : TransactionActionBase {
    [NotNullAttribute]
protected IProjectFolder ParentFolder;
    [NotNullAttribute]
protected string FolderName;
    [CanBeNullAttribute]
protected VirtualFileSystemPath FolderPath;
    [NotNullAttribute]
protected VirtualFileSystemPath AddedFolderPath;
    [NotNullAttribute]
protected ISolution Solution;
    [NotNullAttribute]
protected IProjectModelEditorOperations Operations;
    private IProjectFolder myAddedProjectFolder;
    private bool myDirectoryWasCreated;
    protected IProjectFolder AddedProjectFolder { get; }
    public IEnumerable`1<IProjectFile> AffectedProjectFiles { get; }
    protected AddFolderAction(IProjectFolder parentFolder, string folderName, VirtualFileSystemPath folderPath, IShellLocks locks);
    protected IProjectFolder get_AddedProjectFolder();
    [IteratorStateMachineAttribute("JetBrains.DocumentManagers.Transactions.Actions.AddFolderAction/<get_AffectedProjectFiles>d__12")]
public sealed virtual IEnumerable`1<IProjectFile> get_AffectedProjectFiles();
    public abstract virtual void Commit();
    public sealed virtual void Rollback();
    public IProjectFolder Prepare();
}
public abstract class JetBrains.DocumentManagers.Transactions.Actions.AddReferenceAction : TransactionActionBase {
    private IModuleReferenceResolveManager myModuleReferenceResolveManager;
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private IModule <ModuleToReference>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectToModuleReference <AddedReference>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFrameworkId>k__BackingField;
    [NotNullAttribute]
protected IProject Project { get; }
    [NotNullAttribute]
protected IModule ModuleToReference { get; }
    [NotNullAttribute]
protected IProjectToModuleReference AddedReference { get; private set; }
    [NotNullAttribute]
protected TargetFrameworkId TargetFrameworkId { get; }
    public IEnumerable`1<IProjectFile> AffectedProjectFiles { get; }
    protected AddReferenceAction(IProject project, IModule moduleToReference, TargetFrameworkId targetFrameworkId, IShellLocks locks, IModuleReferenceResolveManager moduleReferenceResolveManager);
    [CompilerGeneratedAttribute]
protected IProject get_Project();
    [CompilerGeneratedAttribute]
protected IModule get_ModuleToReference();
    [CompilerGeneratedAttribute]
protected IProjectToModuleReference get_AddedReference();
    [CompilerGeneratedAttribute]
private void set_AddedReference(IProjectToModuleReference value);
    [CompilerGeneratedAttribute]
protected TargetFrameworkId get_TargetFrameworkId();
    [IteratorStateMachineAttribute("JetBrains.DocumentManagers.Transactions.Actions.AddReferenceAction/<get_AffectedProjectFiles>d__16")]
public sealed virtual IEnumerable`1<IProjectFile> get_AffectedProjectFiles();
    public abstract virtual void Commit();
    public sealed virtual void Rollback();
    public IProjectToModuleReference Prepare();
    protected virtual VirtualFileSystemPath GuessLocalPath();
}
public abstract class JetBrains.DocumentManagers.Transactions.Actions.AddReferenceAction2 : TransactionActionBase {
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFrameworkId>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <FullPathToReferencedAssembly>k__BackingField;
    private IModuleReferenceResolveManager myModuleReferenceResolveManager;
    private IProjectToAssemblyReference myAddedReference;
    [NotNullAttribute]
protected IProject Project { get; }
    [NotNullAttribute]
protected TargetFrameworkId TargetFrameworkId { get; }
    [NotNullAttribute]
public VirtualFileSystemPath FullPathToReferencedAssembly { get; }
    [NotNullAttribute]
protected IProjectToModuleReference AddedReference { get; }
    public IEnumerable`1<IProjectFile> AffectedProjectFiles { get; }
    protected AddReferenceAction2(IProject project, VirtualFileSystemPath fullPathToReferencedAssembly, TargetFrameworkId targetFrameworkId, IShellLocks locks, IModuleReferenceResolveManager moduleReferenceResolveManager);
    [CompilerGeneratedAttribute]
protected IProject get_Project();
    [CompilerGeneratedAttribute]
protected TargetFrameworkId get_TargetFrameworkId();
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_FullPathToReferencedAssembly();
    protected IProjectToModuleReference get_AddedReference();
    [IteratorStateMachineAttribute("JetBrains.DocumentManagers.Transactions.Actions.AddReferenceAction2/<get_AffectedProjectFiles>d__15")]
public sealed virtual IEnumerable`1<IProjectFile> get_AffectedProjectFiles();
    public abstract virtual void Commit();
    public sealed virtual void Rollback();
    public IProjectToAssemblyReference Prepare();
}
[SolutionComponentAttribute("16")]
public class JetBrains.DocumentManagers.Transactions.Actions.AffectedProjectChecker : object {
    public virtual bool IsProjectAffectedByChange(IProject parentProject, IProjectItem changedItem);
}
[SolutionComponentAttribute("16")]
public class JetBrains.DocumentManagers.Transactions.Actions.AssemblyReferencesHelper : object {
    private ISolution mySolution;
    private AssemblyInfoDatabase myAssemblyInfoDataBase;
    public AssemblyReferencesHelper(ISolution solution, AssemblyInfoDatabase assemblyInfoDataBase);
    public static AssemblyReferencesHelper GetInstance(ISolution solution);
    public VirtualFileSystemPath GuessBestAssemblyToAddLocation(IProject priorityProject, IAssembly assemblyToReference);
    [CanBeNullAttribute]
private VirtualFileSystemPath ProcessProject(IProject project, IAssembly toReference);
    private bool IsBinFolder(VirtualFileSystemPath path);
    [CompilerGeneratedAttribute]
private int <ProcessProject>b__5_0(VirtualFileSystemPath path1, VirtualFileSystemPath path2);
}
public abstract class JetBrains.DocumentManagers.Transactions.Actions.CopyAction : TransactionActionBase {
    [CanBeNullAttribute]
protected IProjectFolder NewParentItem;
    [NotNullAttribute]
protected IProjectItem ProjectItem;
    [NotNullAttribute]
protected VirtualFileSystemPath SourceLocation;
    [NotNullAttribute]
protected IProject SourceProject;
    [NotNullAttribute]
protected IProjectModelEditorOperations Operations;
    private Dictionary`2<IProjectItem, IProjectItem> myCreatedItems;
    [CompilerGeneratedAttribute]
private string <CustomSourceItemName>k__BackingField;
    [CanBeNullAttribute]
public string CustomSourceItemName { get; public set; }
    public ICollection`1<IProjectItem> CreatedItems { get; }
    public IDictionary`2<IProjectItem, IProjectItem> CreatedItemsMapping { get; }
    public IEnumerable`1<IProjectFile> AffectedProjectFiles { get; }
    protected CopyAction(IProjectItem projectItem, IProjectFolder newParentItem, IShellLocks locks);
    [CompilerGeneratedAttribute]
public string get_CustomSourceItemName();
    [CompilerGeneratedAttribute]
public void set_CustomSourceItemName(string value);
    public ICollection`1<IProjectItem> get_CreatedItems();
    public IDictionary`2<IProjectItem, IProjectItem> get_CreatedItemsMapping();
    [IteratorStateMachineAttribute("JetBrains.DocumentManagers.Transactions.Actions.CopyAction/<get_AffectedProjectFiles>d__16")]
public sealed virtual IEnumerable`1<IProjectFile> get_AffectedProjectFiles();
    public sealed virtual void Commit();
    protected abstract virtual void DoCommit();
    public sealed virtual void Rollback();
    public virtual IProjectItem Prepare();
    protected abstract virtual void CopyDocument(IProjectFile oldProjectFile, IProjectFile newProjectFile);
}
public abstract class JetBrains.DocumentManagers.Transactions.Actions.EditFilePropertiesAction : TransactionActionBase {
    [CompilerGeneratedAttribute]
private IProjectFile <ProjectFile>k__BackingField;
    [NotNullAttribute]
private Action`1<IProjectFileProperties> myEditPropertiesAction;
    private IProjectFileProperties myClonedProperties;
    [NotNullAttribute]
protected IProjectFile ProjectFile { get; }
    public IEnumerable`1<IProjectFile> AffectedProjectFiles { get; }
    protected EditFilePropertiesAction(IProjectFile projectFile, Action`1<IProjectFileProperties> editPropertiesAction, IShellLocks locks);
    [CompilerGeneratedAttribute]
protected IProjectFile get_ProjectFile();
    public void Prepare();
    public abstract virtual void Commit();
    public sealed virtual void Rollback();
    [IteratorStateMachineAttribute("JetBrains.DocumentManagers.Transactions.Actions.EditFilePropertiesAction/<get_AffectedProjectFiles>d__10")]
public sealed virtual IEnumerable`1<IProjectFile> get_AffectedProjectFiles();
    [CompilerGeneratedAttribute]
private void <Prepare>b__6_0();
    [CompilerGeneratedAttribute]
private void <Rollback>b__8_0();
}
public abstract class JetBrains.DocumentManagers.Transactions.Actions.EditMsBuildPropertiesAction : object {
    public IEnumerable`1<IProjectFile> AffectedProjectFiles { get; }
    public virtual void Commit();
    public virtual void Rollback();
    public sealed virtual IEnumerable`1<IProjectFile> get_AffectedProjectFiles();
    public abstract virtual string TryGetValue(string propertyName);
    public abstract virtual bool TryRemoveProperty(string propertyName);
    public abstract virtual bool SetProperty(string propertyName, string propertyValue);
}
public abstract class JetBrains.DocumentManagers.Transactions.Actions.MoveAction : TransactionActionBase {
    [NotNullAttribute]
protected IProjectItem InitialProjectItem;
    [NotNullAttribute]
protected IProjectModelEditorOperations Operations;
    [CanBeNullAttribute]
protected IProjectFolder NewParentItem;
    private IList`1<IProjectFile> myMovedFiles;
    protected Dictionary`2<IProjectItem, VirtualFileSystemPath> myProjectItem2OldLocation;
    [CompilerGeneratedAttribute]
private IProjectFolder <OldParentItem>k__BackingField;
    public IEnumerable`1<IProjectFile> MovedFiles { get; }
    protected IProjectFolder OldParentItem { get; private set; }
    public IEnumerable`1<IProjectFile> AffectedProjectFiles { get; }
    protected MoveAction(IProjectItem projectItem, IProjectFolder newParentItem, IShellLocks locks);
    public IEnumerable`1<IProjectFile> get_MovedFiles();
    [CompilerGeneratedAttribute]
protected IProjectFolder get_OldParentItem();
    [CompilerGeneratedAttribute]
private void set_OldParentItem(IProjectFolder value);
    public virtual void Prepare();
    protected virtual void PrepareBeforeMove(IProjectItem projectItem);
    [IteratorStateMachineAttribute("JetBrains.DocumentManagers.Transactions.Actions.MoveAction/<get_AffectedProjectFiles>d__16")]
public sealed virtual IEnumerable`1<IProjectFile> get_AffectedProjectFiles();
    public abstract virtual void Commit();
    public sealed virtual void Rollback();
}
public abstract class JetBrains.DocumentManagers.Transactions.Actions.RemoveAction : TransactionActionBase {
    [NotNullAttribute]
protected Dictionary`2<IProjectItem, IProject> ItemsAndProjects;
    [NotNullAttribute]
protected IProjectItem ProjectItem;
    [NotNullAttribute]
protected IProject Project;
    [NotNullAttribute]
protected IProjectFolder ParentFolder;
    [NotNullAttribute]
protected VirtualFileSystemPath Location;
    protected bool DoRemoveSharedFiles;
    [NotNullAttribute]
protected ISolution Solution;
    [NotNullAttribute]
protected IProjectModelEditorOperations Operations;
    protected IReadOnlyCollection`1<IProjectFile> myDependentFiles;
    public IList`1<IProjectFile> AllRemovedFiles { get; }
    protected IEnumerable`1<IProjectFile> DependentFiles { get; }
    public IEnumerable`1<IProjectFile> AffectedProjectFiles { get; }
    protected RemoveAction(IProjectItem projectItem, IShellLocks locks, bool doRemoveSharedFiles);
    public IList`1<IProjectFile> get_AllRemovedFiles();
    protected IEnumerable`1<IProjectFile> get_DependentFiles();
    [IteratorStateMachineAttribute("JetBrains.DocumentManagers.Transactions.Actions.RemoveAction/<get_AffectedProjectFiles>d__15")]
public sealed virtual IEnumerable`1<IProjectFile> get_AffectedProjectFiles();
    public abstract virtual void Commit();
    public virtual void Rollback();
    public virtual void Prepare();
    protected virtual void BeforeRemoveItems();
}
public abstract class JetBrains.DocumentManagers.Transactions.Actions.RemovePackageAction : TransactionActionBase {
    public IEnumerable`1<IProjectFile> AffectedProjectFiles { get; }
    public RemovePackageAction(IShellLocks locks);
    public abstract virtual void Commit();
    public virtual void Rollback();
    public virtual IEnumerable`1<IProjectFile> get_AffectedProjectFiles();
}
public abstract class JetBrains.DocumentManagers.Transactions.Actions.RemoveReferenceAction : TransactionActionBase {
    private IProjectToModuleReference myReferenceToRemove;
    private IModuleReferenceResolveManager myModuleReferenceResolveManager;
    private IProject myProject;
    protected IProjectToModuleReference ReferenceToRemove { get; }
    protected IProject Project { get; }
    public IEnumerable`1<IProjectFile> AffectedProjectFiles { get; }
    protected RemoveReferenceAction(IProjectToModuleReference referenceToRemove, IShellLocks locks, IModuleReferenceResolveManager moduleReferenceResolveManager);
    protected IProjectToModuleReference get_ReferenceToRemove();
    protected IProject get_Project();
    [IteratorStateMachineAttribute("JetBrains.DocumentManagers.Transactions.Actions.RemoveReferenceAction/<get_AffectedProjectFiles>d__9")]
public sealed virtual IEnumerable`1<IProjectFile> get_AffectedProjectFiles();
    public abstract virtual void Commit();
    public sealed virtual void Rollback();
    public void Prepare();
}
public abstract class JetBrains.DocumentManagers.Transactions.Actions.RenameAction : TransactionActionBase {
    [NotNullAttribute]
protected IProjectModelEditorOperations Operations;
    [NotNullAttribute]
protected Dictionary`2<IProjectItem, RenameItemData> ProjectItemData;
    [NotNullAttribute]
protected IProjectItem RootProjectItem;
    public IEnumerable`1<IProjectFile> AffectedProjectFiles { get; }
    protected RenameAction(IProjectItem projectItem, string newName, bool renameDependant);
    public sealed virtual IEnumerable`1<IProjectFile> get_AffectedProjectFiles();
    public abstract virtual void Commit();
    public virtual void Prepare();
    public virtual void Rollback();
    private static void UpdateProjectItemProperties(IProjectItem projectItem, string oldName, string newName);
    [CanBeNullAttribute]
public static string GetNestedFileName(string nestedName, string oldParentName, string newParentName);
}
public abstract class JetBrains.DocumentManagers.Transactions.Actions.TransactionActionBase : object {
    [CompilerGeneratedAttribute]
private IShellLocks <Locks>k__BackingField;
    public IShellLocks Locks { get; }
    protected TransactionActionBase(IShellLocks locks);
    [CompilerGeneratedAttribute]
public IShellLocks get_Locks();
    protected IProjectFile GetAffectedProject(IProjectItem item);
    protected IProjectFile GetAffectedSolution(IProjectItem item);
}
public class JetBrains.DocumentManagers.Transactions.FileCreationParameters : object {
    [CompilerGeneratedAttribute]
private BuildAction <BuildAction>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Metadata>k__BackingField;
    [NotNullAttribute]
public BuildAction BuildAction { get; public set; }
    [NotNullAttribute]
public Dictionary`2<string, string> Metadata { get; }
    public FileCreationParameters(BuildAction buildAction);
    public FileCreationParameters(Dictionary`2<string, string> metadata);
    public FileCreationParameters(BuildAction buildAction, Dictionary`2<string, string> metadata);
    [CompilerGeneratedAttribute]
public BuildAction get_BuildAction();
    [CompilerGeneratedAttribute]
public void set_BuildAction(BuildAction value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Metadata();
    public static FileCreationParameters CreateEmpty();
    public void SetDependentUpon(string fileName);
}
public interface JetBrains.DocumentManagers.Transactions.IFileCreationContext {
}
public interface JetBrains.DocumentManagers.Transactions.IFolderCreationContext {
}
public interface JetBrains.DocumentManagers.Transactions.IItemModificationContext {
}
public interface JetBrains.DocumentManagers.Transactions.IMsBuildPropertiesEditor {
    [CanBeNullAttribute]
public abstract virtual string TryGetValue(string propertyName);
    public abstract virtual bool TryRemoveProperty(string propertyName);
    public abstract virtual bool SetProperty(string propertyName, string propertyValue);
}
public interface JetBrains.DocumentManagers.Transactions.IProjectModelEditor {
    [NotNullAttribute]
public abstract virtual IProjectFile AddFile(IProjectFolder parentFolder, VirtualFileSystemPath location, FileCreationParameters parameters, IFileCreationContext context);
    public abstract virtual bool CanAddFile(IProjectFolder parentFolder, VirtualFileSystemPath location, String& reason);
    public abstract virtual bool EditFileProperties(IProjectFile projectFile, Action`1<IProjectFileProperties> editPropertiesAction);
    public abstract virtual IProjectFolder AddFolder(IProjectFolder parentFolder, string name, VirtualFileSystemPath folderPath, IFolderCreationContext context);
    public abstract virtual bool CanAddFolder(IProjectFolder parentFolder, string name, VirtualFileSystemPath folderPath, String& reason);
    public abstract virtual void Rename(IProjectItem projectItem, string newName, bool renameDependant);
    public abstract virtual bool CanRename(IProjectItem projectItem, string newName, String& reason);
    public abstract virtual void Move(IProjectItem projectItem, IProjectFolder newParentItem, IItemModificationContext context);
    public abstract virtual bool CanMove(IProjectItem projectItem, IProjectFolder newParentItem, String& reason);
    public abstract virtual IProjectItem Copy(IProjectItem projectItem, IProjectFolder newParentItem, string customItemName, IItemModificationContext context);
    public abstract virtual bool CanCopy(IProjectItem projectItem, IProjectFolder newParentItem, String& reason, string customItemName);
    public abstract virtual void Remove(IProjectItem projectItem, bool doRemoveSharedFiles);
    public abstract virtual bool CanRemove(IProjectItem projectItem, String& reason, bool doRemoveSharedFiles);
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual Task`1<IProject> AddProjectFromExistingFile(VirtualFileSystemPath projectFilePath, IProject parentProject);
    public abstract virtual bool CanAddProjectFromExistingFile(VirtualFileSystemPath projectFilePath, IProject parentProject, String& reason);
    public abstract virtual IProjectToModuleReference AddModuleReference(IProject project, IModule referenceToAdd, TargetFrameworkId targetFrameworkId, IReferenceCreationContext context);
    public abstract virtual IProjectToAssemblyReference AddAssemblyReference(IProject project, VirtualFileSystemPath fullPathToReferencedLibrary, TargetFrameworkId targetFrameworkId, IReferenceCreationContext context);
    public abstract virtual void RemoveModuleReference(IProjectToModuleReference referenceToRemove, IReferenceRemovingContext context);
    public abstract virtual bool CanRemoveModuleReference(IProjectToModuleReference referenceToRemove, String& reason);
    public abstract virtual void RemoveNugetPackage(IProjectToPackageReference reference);
    public abstract virtual void EditProjectMsBuildProperties(IProject project, string configurationName, Action`1<IMsBuildPropertiesEditor> editFunc);
    public abstract virtual bool CanEditProjectMsBuildProperties(IProject project, String& reason);
}
public interface JetBrains.DocumentManagers.Transactions.IProjectModelEditorOperations {
    [NotNullAttribute]
public abstract virtual IProjectFile DoCreateFile(IProjectFolder parentFolder, string name, VirtualFileSystemPath location, CompactList`1<Pair`2<TargetFrameworkId, BuildAction>> buildAction, IProjectElementOrigin origin);
    public abstract virtual void CommitCreateFile(IProjectFile projectFile);
    [NotNullAttribute]
public abstract virtual IProjectFolder DoCreateFolder(IProjectFolder parentFolder, string name, VirtualFileSystemPath referencedFolderPath);
    public abstract virtual void DoRemove(IProjectItem projectItem);
    public abstract virtual void DoRename(IProjectItem projectItem, string newName);
    public abstract virtual void DoMove(IProjectItem projectItem, IProjectFolder newParent);
}
public interface JetBrains.DocumentManagers.Transactions.IProjectModelTransactionCookie {
}
public interface JetBrains.DocumentManagers.Transactions.IProjectModelTransactionFactory {
    [NotNullAttribute]
public abstract virtual IProjectModelTransactionCookie CreateTransactionCookie(DefaultAction defaultAction, string commandName, bool optimizeChangesOnCommit, IProgressIndicator progressIndicator);
}
public interface JetBrains.DocumentManagers.Transactions.IProjectModelTransactionHandler {
    public abstract virtual void RegisterNewChange(ITransactionAction transactionAction);
}
[NullableContextAttribute("1")]
public interface JetBrains.DocumentManagers.Transactions.IProjectModelTransactionManager {
    public IProjectModelTransactionHandler CurrentTransactionHandler { get; }
    public abstract virtual IProjectModelTransactionHandler get_CurrentTransactionHandler();
    [NullableContextAttribute("2")]
public abstract virtual void SetCurrentTransactionHandler(IProjectModelTransactionHandler transactionHandler);
}
public interface JetBrains.DocumentManagers.Transactions.IReferenceCreationContext {
}
public interface JetBrains.DocumentManagers.Transactions.IReferenceRemovingContext {
}
public interface JetBrains.DocumentManagers.Transactions.ITransactionAction {
    public IEnumerable`1<IProjectFile> AffectedProjectFiles { get; }
    public abstract virtual void Commit();
    public abstract virtual void Rollback();
    public abstract virtual IEnumerable`1<IProjectFile> get_AffectedProjectFiles();
}
[ExtensionAttribute]
public static class JetBrains.DocumentManagers.Transactions.ProjectFileEx : object {
    private static Key`1<IProjectFileSearchDescriptor> ourProjectFileSearchDescriptorBeforeTransactionStartedKey;
    private static ProjectFileEx();
    [ExtensionAttribute]
[NotNullAttribute]
public static IProjectFileSearchDescriptor CreateAndStoreProjectFileSearchDescriptorBeforeTransactionStarted(IProjectFile projectFile);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectFileSearchDescriptor TryGetProjectFileSearchDescriptorBeforeTransactionStarted(IProjectFile projectFile);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectFileSearchDescriptor TryGetAndClearProjectFileSearchDescriptorBeforeTransactionStarted(IProjectFile projectFile);
}
public static class JetBrains.DocumentManagers.Transactions.ProjectFileRenameUtil : object {
    public static CanRenameResult CanRenameFile(IProjectFile projectFile);
    public static Pair`2<IProjectFile, CanRenameResult> TryGetProjectFileToRename(IProjectFile projectFile);
    private static CanRenameResult GetRenameResult(IProjectFile projectFile);
}
public class JetBrains.DocumentManagers.Transactions.ProjectHostActions.HostAddFileAction : StandaloneAddFileAction {
    [NotNullAttribute]
private ISolutionHost mySolutionHost;
    [CanBeNullAttribute]
private IProjectHostItemDescriptor myItemDescriptor;
    [CanBeNullAttribute]
private RelativeTo myRelativeItem;
    public HostAddFileAction(IProjectFolder parentFolder, VirtualFileSystemPath location, IDocumentStorageHelpers documentOperations, FileCreationParameters parameters, IFileCreationContext context, ISolutionHost solutionHost, LiveWildcardContainer wildcardContainer);
    [CanBeNullAttribute]
private IWildcardItemDescriptor GetItemDescriptor(LiveWildcardContainer wildcardContainer, IProjectMark projectMark, VirtualFileSystemPath location);
    private static bool IsMatchingBuildActions(BuildAction a1, BuildAction a2);
    protected virtual BuildAction GetBuildAction();
    [NotNullAttribute]
public static BuildAction GuessDefaultBuildAction(IPath location);
    protected virtual IProjectElementOrigin CreateProjectFileOrigin(BuildAction buildAction);
    protected virtual void DoCommit();
    [CompilerGeneratedAttribute]
private void <DoCommit>b__9_0(IProjectHost projectHost, IProjectMark projectMark, IProjectFile projectItem);
}
public class JetBrains.DocumentManagers.Transactions.ProjectHostActions.HostAddFolderAction : StandaloneAddFolderAction {
    [NotNullAttribute]
private ISolutionHost mySolutionHost;
    [CanBeNullAttribute]
private RelativeTo myRelativeItem;
    public HostAddFolderAction(IProjectFolder parentFolder, string name, VirtualFileSystemPath folderPath, IShellLocks locks, ISolutionHost solutionHost, IFolderCreationContext context);
    public virtual void Commit();
    [CompilerGeneratedAttribute]
private void <Commit>b__3_0(IProjectHost projectHost, IProjectMark projectMark, IProjectFolder projectItem);
}
public class JetBrains.DocumentManagers.Transactions.ProjectHostActions.HostAddReferenceAction : StandaloneAddReferenceAction {
    private ISolutionHost mySolutionHost;
    private IReferenceCreationContext myContext;
    public HostAddReferenceAction(IProject project, IModule moduleToReference, IShellLocks locks, IModuleReferenceResolveManager moduleReferenceResolveManager, ISolutionHost solutionHost, TargetFrameworkId targetFrameworkId, IReferenceCreationContext context);
    public virtual void Commit();
    public static void CommitInSolutionHost(ISolutionHost solutionHost, IProject project, IProjectToModuleReference reference, IReferenceCreationContext context);
}
public class JetBrains.DocumentManagers.Transactions.ProjectHostActions.HostAddReferenceAction2 : StandaloneAddReferenceAction2 {
    private ISolutionHost mySolutionHost;
    private IReferenceCreationContext myContext;
    public HostAddReferenceAction2(IProject project, VirtualFileSystemPath fullPathToReferencedAssembly, IShellLocks locks, IModuleReferenceResolveManager moduleReferenceResolveManager, ISolutionHost solutionHost, TargetFrameworkId targetFrameworkId, IReferenceCreationContext context);
    public virtual void Commit();
}
[SolutionComponentAttribute("16")]
public class JetBrains.DocumentManagers.Transactions.ProjectHostActions.HostAffectedProjectChecker : AffectedProjectChecker {
    private ISolution mySolution;
    private ILogger myLogger;
    public HostAffectedProjectChecker(ISolution solution, ILogger logger);
    public virtual bool IsProjectAffectedByChange(IProject parentProject, IProjectItem changedItem);
}
public class JetBrains.DocumentManagers.Transactions.ProjectHostActions.HostCopyAction : StandaloneCopyAction {
    private ISolutionHost mySolutionHost;
    [CanBeNullAttribute]
private RelativeTo myRelativeItem;
    public HostCopyAction(IProjectItem projectItem, IProjectFolder newParentItem, IItemModificationContext context, DocumentManager documentManager, IDocumentStorageHelpers documentOperations, IShellLocks locks, ISolutionHost solutionHost);
    public virtual IProjectItem Prepare();
    protected virtual void DoCommit();
    [CompilerGeneratedAttribute]
private void <DoCommit>b__4_0(IProjectHost projectHost, IProjectMark projectMark, IProjectItem projectItem);
}
public class JetBrains.DocumentManagers.Transactions.ProjectHostActions.HostEditFilePropertiesAction : StandaloneEditFilePropertiesAction {
    [NotNullAttribute]
private ISolutionHost mySolutionHost;
    [NotNullAttribute]
private Dictionary`2<string, string> myProperties;
    public HostEditFilePropertiesAction(IProjectFile projectFile, Action`1<IProjectFileProperties> editPropertiesAction, IShellLocks locks, ISolutionHost solutionHost);
    public virtual void Commit();
    [CompilerGeneratedAttribute]
private void <Commit>b__3_0(IProjectHost host, IProjectMark mark, IProjectFile item);
}
public class JetBrains.DocumentManagers.Transactions.ProjectHostActions.HostMoveAction : StandaloneMoveAction {
    [NotNullAttribute]
private ISolutionHost mySolutionHost;
    [NotNullAttribute]
private Dictionary`2<IProjectItem, IProjectHostItemDescriptor> myItemDescriptors;
    [NotNullAttribute]
private List`1<IProjectHostEditItemSession> myRemoveItemSessions;
    [CanBeNullAttribute]
private IProject myInitialProject;
    [CanBeNullAttribute]
private RelativeTo myRelativeItem;
    public HostMoveAction(IProjectItem projectItem, IProjectFolder newParentItem, IItemModificationContext context, IShellLocks locks, ISolutionHost solutionHost);
    protected virtual void PrepareBeforeMove(IProjectItem projectItem);
    public virtual void Commit();
    [CompilerGeneratedAttribute]
private void <PrepareBeforeMove>b__6_0(IProjectHost projectHost, IProjectMark projectMark, IProjectItem projectItem1);
    [CompilerGeneratedAttribute]
private void <Commit>b__7_1(IProjectHost projectHost, IProjectMark projectMark, IProjectFile projectItem);
    [CompilerGeneratedAttribute]
private void <Commit>b__7_0(IProjectHost projectHost, IProjectMark projectMark, IProjectItem projectItem);
}
public class JetBrains.DocumentManagers.Transactions.ProjectHostActions.HostMsBuildPropertiesEditor : EditMsBuildPropertiesAction {
    private MsBuildProjectHost myHost;
    private IProjectMark myProjectMark;
    private RdCalculatePropertiesResult myProperties;
    [CanBeNullAttribute]
private RdCalculateConfigurationPropertiesResult myConfigurationProperties;
    [NotNullAttribute]
private Dictionary`2<string, string> myPropertyNameToValueActions;
    private HostMsBuildPropertiesEditor(MsBuildProjectHost host, IProjectMark projectMark, RdCalculatePropertiesResult properties, RdCalculateConfigurationPropertiesResult configurationProperties);
    public static bool IsAvailable(ISolutionHost solutionHost, IProject project, IProjectMark& projectMark, MsBuildProjectHost& host);
    public static EditMsBuildPropertiesAction Create(ISolutionHost solutionHost, IProject project, string configurationName);
    public virtual string TryGetValue(string propertyName);
    public virtual bool TryRemoveProperty(string propertyName);
    public virtual bool SetProperty(string propertyName, string propertyValue);
    public virtual void Commit();
}
[SolutionComponentAttribute("10")]
public class JetBrains.DocumentManagers.Transactions.ProjectHostActions.HostProjectModelEditor : StandaloneProjectModelEditor {
    private ISolutionHost mySolutionHost;
    private LiveWildcardContainer myWildcardContainer;
    private List`1<ISharedProjectOperations> mySharedProjectOperations;
    public HostProjectModelEditor(ISolution solution, DocumentManager documentManager, LiveWildcardContainer wildcardContainer, IDocumentStorageHelpers documentOperations, IProjectModelTransactionManager projectModelTransactionManager, IModuleReferenceResolveManager moduleReferenceResolveManager, IProjectModelUpdater projectModelUpdater, IEnumerable`1<ISharedProjectOperations> sharedProjectOperations);
    public virtual IProjectFile AddFile(IProjectFolder parentFolder, VirtualFileSystemPath location, FileCreationParameters parameters, IFileCreationContext context);
    public virtual bool CanAddFile(IProjectFolder parentFolder, VirtualFileSystemPath location, String& reason);
    public virtual IProjectFolder AddFolder(IProjectFolder parentFolder, string name, VirtualFileSystemPath folderPath, IFolderCreationContext context);
    public virtual bool CanAddFolder(IProjectFolder parentFolder, string name, VirtualFileSystemPath folderPath, String& reason);
    private IProjectFolder FixProjectFolder(IProjectFolder parentFolder);
    protected virtual AddFileAction CreateAddFileAction(IProjectFolder parentFolder, VirtualFileSystemPath location, FileCreationParameters parameters, IFileCreationContext context);
    protected virtual AddFolderAction CreateAddFolderAction(IProjectFolder parentFolder, string name, VirtualFileSystemPath folderPath, IFolderCreationContext context);
    public virtual void Rename(IProjectItem projectItem, string newName, bool renameDependant);
    public virtual bool CanRename(IProjectItem projectItem, string newName, String& reason);
    protected virtual CanRenameResult CanRenameProjectFile(IProjectFile projectFile);
    public virtual bool CanMove(IProjectItem projectItem, IProjectFolder newParentItem, String& reason);
    public virtual bool CanCopy(IProjectItem projectItem, IProjectFolder newParentItem, String& reason, string customItemName);
    public virtual bool CanEditProjectMsBuildProperties(IProject project, String& reason);
    public void Exclude(IProjectItem projectItem, bool doRemoveSharedFiles);
    protected virtual RemoveAction CreateRemoveAction(IProjectItem projectItem, bool doRemoveSharedFiles);
    protected RemoveAction CreateExcludeAction(IProjectItem projectItem, bool doRemoveSharedFiles);
    protected virtual RenameAction CreateRenameAction(IProjectItem projectItem, string newName, bool renameDependant);
    protected virtual CopyAction CreateCopyAction(IProjectItem projectItem, IProjectFolder newParentItem, IItemModificationContext context);
    protected virtual MoveAction CreateMoveAction(IProjectItem projectItem, IProjectFolder newParentItem, IItemModificationContext context);
    protected virtual AddReferenceAction CreateAddReferenceAction(IProject project, IModule referenceToAdd, TargetFrameworkId targetFrameworkId, IReferenceCreationContext context);
    protected virtual AddReferenceAction2 CreateAddReferenceAction2(IProject project, VirtualFileSystemPath fullPathToReferencedLibrary, TargetFrameworkId targetFrameworkId, IReferenceCreationContext context);
    protected virtual RemoveReferenceAction CreateRemoveReferenceAction(IProjectToModuleReference referenceToRemove, IReferenceRemovingContext context);
    protected virtual EditMsBuildPropertiesAction CreateEditMsBuildPropertiesAction(Lifetime lifetime, IProject project, string configurationName);
    protected virtual EditFilePropertiesAction CreateEditFilePropertiesAction(IProjectFile projectFile, Action`1<IProjectFileProperties> editPropertiesAction);
    protected virtual bool CanModify(IProjectElement projectElement, String& reason);
    private bool CanModify(IProjectFile projectFile, String& reason);
    private bool CanModify(IProjectFolder projectFolder, String& reason);
    private bool CanModify(IProjectToModuleReference projectToModuleReference, String& reason);
    private void FindAllUnmodifiedSubFiles(IProjectFolder projectFolder, List`1<string> result);
    private bool CanModifyExternalProjectFile(IProjectFile projectFile);
    private List`1<T> GetProjectItemInSharedProjects(T projectItem);
}
[ExtensionAttribute]
public static class JetBrains.DocumentManagers.Transactions.ProjectHostActions.HostProjectModelEditorExtension : object {
    [ExtensionAttribute]
public static void ExecuteHost(ISolutionHost solutionHost, TProjectItem projectItem, Action`3<IProjectHost, IProjectMark, TProjectItem> action);
    [ExtensionAttribute]
public static void ExecuteHost(ISolutionHost solutionHost, TProjectItem projectItem, IProject project, Action`3<IProjectHost, IProjectMark, TProjectItem> action);
}
[SolutionComponentAttribute("10")]
public class JetBrains.DocumentManagers.Transactions.ProjectHostActions.HostProjectModelEditorOperations : ProjectModelEditorOperations {
    private ILogger myLogger;
    private List`1<ISharedProjectOperations> mySharedProjectOperations;
    private List`1<IReloadProjectOnChangePolicy> myReloadProjectOnChangePolicies;
    public HostProjectModelEditorOperations(ILogger logger, ISolution solution, IEnumerable`1<ISharedProjectOperations> sharedProjectOperations, IEnumerable`1<IReloadProjectOnChangePolicy> reloadProjectOnChangePolicies);
    public virtual IProjectFile DoCreateFile(IProjectFolder parentFolder, string name, VirtualFileSystemPath location, CompactList`1<Pair`2<TargetFrameworkId, BuildAction>> buildAction, IProjectElementOrigin origin);
    public virtual void CommitCreateFile(IProjectFile projectFile);
    public virtual IProjectFolder DoCreateFolder(IProjectFolder parentFolder, string name, VirtualFileSystemPath referencedFolderPath);
    public virtual void DoRemove(IProjectItem projectItem);
    public virtual void DoRename(IProjectItem projectItem, string newName);
    public virtual void DoMove(IProjectItem projectItem, IProjectFolder newParent);
    private void CreateSharedProjectItemsRecursively(IProjectItem projectItem, IProjectFolder parent);
    private void ScheduleProjectReloadingIfNeeded(IProjectItem projectItem);
    private void FixBuildActionAfterRename(IProjectItem projectItem, string oldName, string newName);
    [NotNullAttribute]
private static BuildAction FindBestBuildActionAfterRename(IProject project, IProjectFile projectFile);
    private static IEnumerable`1<TargetFrameworkId> GetTargetFrameworks(IProjectItem projectItem);
    private void CleanupMiscProjectFilesIfNeeded(IProjectFolder parentFolder, VirtualFileSystemPath location);
    private List`1<IProjectFolder> GetOrCreateParentSharedFoldersInReferencedProjects(IProjectFolder projectFolder, VirtualFileSystemPath location, bool isFolder);
    private List`1<T> GetSharedProjectItemsInReferencedProjects(T projectItem);
    [NotNullAttribute]
private static IReadOnlyCollection`1<IProjectItem> GetUnitedProjectItems(IProjectItem projectItem);
}
public class JetBrains.DocumentManagers.Transactions.ProjectHostActions.HostReferenceCreationContext : object {
    [NotNullAttribute]
public Dictionary`2<string, string> Metadata;
    public HostReferenceCreationContext(Dictionary`2<string, string> metadata);
    [NotNullAttribute]
public IProjectElementOriginWithMetadata ToOrigin();
}
public class JetBrains.DocumentManagers.Transactions.ProjectHostActions.HostRemoveAction : StandaloneRemoveAction {
    private bool myRemoveFromDisk;
    [NotNullAttribute]
private ISolutionHost mySolutionHost;
    [NotNullAttribute]
private List`1<IProjectHostEditItemSession> mySessions;
    public HostRemoveAction(IProjectItem projectItem, IShellLocks locks, bool removeFromDisk, bool doRemoveSharedFiles, ISolutionHost solutionHost);
    public virtual void Rollback();
    public virtual void Commit();
    protected virtual void BeforeRemoveItems();
    protected void CreateSession(IProjectItem projectItem);
}
public class JetBrains.DocumentManagers.Transactions.ProjectHostActions.HostRemoveReferenceAction : StandaloneRemoveReferenceAction {
    private ISolutionHost mySolutionHost;
    private IReferenceRemovingContext myReferenceRemovingContext;
    public HostRemoveReferenceAction(IProjectToModuleReference referenceToRemove, IReferenceRemovingContext referenceRemovingContext, IShellLocks locks, IModuleReferenceResolveManager moduleReferenceResolveManager, ISolutionHost solutionHost);
    public virtual void Commit();
    [CompilerGeneratedAttribute]
private void <Commit>b__3_0(IProjectHost projectHost, IProjectMark projectMark, IProjectToModuleReference reference);
}
public class JetBrains.DocumentManagers.Transactions.ProjectHostActions.HostRenameAction : StandaloneRenameAction {
    [NotNullAttribute]
private ISolutionHost mySolutionHost;
    [NotNullAttribute]
private IWildcardContainer myWildcardContainer;
    [NotNullAttribute]
private List`1<IProjectHostEditItemSession> mySessions;
    public HostRenameAction(IProjectItem projectItem, string newName, bool renameDependant, ISolutionHost solutionHost, IWildcardContainer wildcardContainer);
    public virtual void Prepare();
    public virtual void Commit();
}
[ZoneDefinitionAttribute]
public interface JetBrains.DocumentManagers.Transactions.ProjectHostActions.IProjectHostActionsZone {
}
public interface JetBrains.DocumentManagers.Transactions.ProjectHostActions.IReloadProjectOnChangePolicy {
    public abstract virtual bool ShouldReload(IProjectItem projectItem);
}
public class JetBrains.DocumentManagers.Transactions.ProjectHostActions.Modifications.AddItemAsLinkTaskAction : AddItemTaskAction {
    private bool myIncludeContent;
    public AddItemAsLinkTaskAction(Lifetime lifetime, IProjectModelTransactionCookie cookie, IProjectFolder projectFolder, VirtualFileSystemPath location, IFileCreationContext fileCreationContext, IProgressIndicator progressIndicator, bool includeContent);
    protected virtual IProjectItem CreateDirectory();
    protected virtual IProjectItem CreateFile();
}
public class JetBrains.DocumentManagers.Transactions.ProjectHostActions.Modifications.AddItemInSolutionFolder : AddItemTaskAction {
    public AddItemInSolutionFolder(Lifetime lifetime, IProjectModelTransactionCookie cookie, IProjectFolder projectFolder, VirtualFileSystemPath location, IFileCreationContext fileCreationContext, IProgressIndicator progressIndicator);
    protected virtual IProjectItem CreateDirectory();
    private void AddItemsFromDirectory(VirtualFileSystemPath folderLocation, List`1<IProjectFile> createdFiles);
    protected virtual IProjectItem CreateFile();
}
public class JetBrains.DocumentManagers.Transactions.ProjectHostActions.Modifications.AddItemPreserveDirectoriesTaskAction : AddItemTaskAction {
    private bool myIncludeContent;
    public AddItemPreserveDirectoriesTaskAction(Lifetime lifetime, IProjectModelTransactionCookie cookie, IProjectFolder projectFolder, VirtualFileSystemPath location, IFileCreationContext fileCreationContext, IProgressIndicator progressIndicator, bool includeContent);
    protected virtual IProjectItem CreateFile();
    protected virtual IProjectItem CreateDirectory();
}
public abstract class JetBrains.DocumentManagers.Transactions.ProjectHostActions.Modifications.AddItemTaskAction : object {
    private Lifetime myLifetime;
    [NotNullAttribute]
private EnsureWritableHandler myEnsureWritableHandler;
    [NotNullAttribute]
private IProgressIndicator myProgressIndicator;
    [NotNullAttribute]
protected IProjectModelTransactionCookie Cookie;
    [NotNullAttribute]
protected IProjectFolder ProjectFolder;
    [NotNullAttribute]
protected VirtualFileSystemPath Location;
    [CanBeNullAttribute]
protected IFileCreationContext FileCreationContext;
    public FileCreationParameters Parameters;
    protected AddItemTaskAction(Lifetime lifetime, IProjectModelTransactionCookie cookie, IProjectFolder projectFolder, VirtualFileSystemPath location, IFileCreationContext fileCreationContext, IProgressIndicator progressIndicator);
    [CanBeNullAttribute]
public IProjectItem Execute();
    [CanBeNullAttribute]
protected abstract virtual IProjectItem CreateDirectory();
    [CanBeNullAttribute]
protected abstract virtual IProjectItem CreateFile();
    protected IProjectFile DoCreateFile(VirtualFileSystemPath f, IProjectFolder parent);
    protected void AddExistingItemRecursive(IProjectFolder parent);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.DocumentManagers.Transactions.ProjectHostActions.NewFileBuildActionProvider : object {
    public virtual bool IsApplicable(IProject project);
    [CanBeNullAttribute]
public virtual BuildAction GetBuildAction(IProjectFolder parentFolder, VirtualFileSystemPath location);
}
public class JetBrains.DocumentManagers.Transactions.ProjectHostActions.Ordering.OrderingContext : object {
    [NotNullAttribute]
public RelativeTo RelativeTo;
    public OrderingContext(RelativeTo relativeTo);
}
public interface JetBrains.DocumentManagers.Transactions.ProjectHostActions.SharedProjects.ISharedProjectOperations {
    [NotNullAttribute]
[ItemNotNullAttribute]
[PureAttribute]
public abstract virtual IList`1<IProjectItem> GetProjectItemInSharedProjects(IProjectItem projectItem);
    [NotNullAttribute]
[ItemNotNullAttribute]
[PureAttribute]
public abstract virtual IList`1<IProjectFolder> GetOrCreateParentSharedFoldersInReferencedProjects(IProjectFolder projectFolder, VirtualFileSystemPath virtualFileSystemPath, bool isFolder);
    [NotNullAttribute]
[ItemNotNullAttribute]
[PureAttribute]
public abstract virtual IList`1<IProjectItem> GetSharedProjectItemsInReferencedProjects(IProjectItem projectItem);
}
[ShellComponentAttribute("16")]
public class JetBrains.DocumentManagers.Transactions.ProjectHostActions.SharedProjects.SharedProjectOperationsImpl : object {
    public sealed virtual IList`1<IProjectItem> GetProjectItemInSharedProjects(IProjectItem projectItem);
    public sealed virtual IList`1<IProjectItem> GetSharedProjectItemsInReferencedProjects(IProjectItem projectItem);
    public sealed virtual IList`1<IProjectFolder> GetOrCreateParentSharedFoldersInReferencedProjects(IProjectFolder projectFolder, VirtualFileSystemPath location, bool isFolder);
}
[ZoneMarkerAttribute]
public class JetBrains.DocumentManagers.Transactions.ProjectHostActions.ZoneMarker : object {
}
public abstract class JetBrains.DocumentManagers.Transactions.ProjectModelEditorBase : object {
    private ISolution mySolution;
    private IProjectModelTransactionManager myProjectModelTransactionManager;
    protected IModuleReferenceResolveManager ModuleReferenceResolveManager;
    private IProjectModelUpdater myProjectModelUpdater;
    protected IShellLocks Locks { get; }
    protected IProjectModelTransactionHandler CurrentTransactionHandler { get; }
    protected ProjectModelEditorBase(ISolution solution, IProjectModelTransactionManager projectModelTransactionManager, IModuleReferenceResolveManager moduleReferenceResolveManager, IProjectModelUpdater projectModelUpdater);
    protected IShellLocks get_Locks();
    protected IProjectModelTransactionHandler get_CurrentTransactionHandler();
    public virtual IProjectFile AddFile(IProjectFolder parentFolder, VirtualFileSystemPath location, FileCreationParameters parameters, IFileCreationContext context);
    public virtual bool CanAddFile(IProjectFolder parentFolder, VirtualFileSystemPath location, String& reason);
    public sealed virtual bool EditFileProperties(IProjectFile projectFile, Action`1<IProjectFileProperties> editPropertiesAction);
    private static bool CheckFolderName(IProjectFolder parentFolder, string name, VirtualFileSystemPath folderPath, bool allowNamesWithDifferentCase, String& reason);
    private static bool CheckFileName(string name, String& reason);
    public virtual IProjectFolder AddFolder(IProjectFolder parentFolder, string name, VirtualFileSystemPath folderPath, IFolderCreationContext context);
    public virtual bool CanAddFolder(IProjectFolder parentFolder, string name, VirtualFileSystemPath folderPath, String& reason);
    public virtual void Rename(IProjectItem projectItem, string newName, bool renameDependant);
    public virtual bool CanRename(IProjectItem projectItem, string newName, String& reason);
    protected virtual CanRenameResult CanRenameProjectFile(IProjectFile projectFile);
    private bool CheckArgumentForNull(object arg, string argName, String& reason);
    private bool CheckSolution(ISolution solution, String& reason);
    public virtual IProjectItem Copy(IProjectItem projectItem, IProjectFolder newParentItem, string customItemName, IItemModificationContext context);
    public virtual bool CanCopy(IProjectItem projectItem, IProjectFolder newParentItem, String& reason, string customItemName);
    public virtual void Move(IProjectItem projectItem, IProjectFolder newParentItem, IItemModificationContext context);
    public virtual bool CanMove(IProjectItem projectItem, IProjectFolder newParentItem, String& reason);
    public virtual void Remove(IProjectItem projectItem, bool doRemoveSharedFiles);
    public virtual bool CanRemove(IProjectItem projectItem, String& reason, bool doRemoveSharedFiles);
    public virtual bool CanAddProjectFromExistingFile(VirtualFileSystemPath projectFilePath, IProject parentProject, String& reason);
    public virtual Task`1<IProject> AddProjectFromExistingFile(VirtualFileSystemPath projectFilePath, IProject parentProject);
    protected virtual string AddProjectFromExistingFileImpl(VirtualFileSystemPath projectFilePath, IProjectSearchDescriptor parentProjectSearchDescriptor);
    public sealed virtual IProjectToModuleReference AddModuleReference(IProject project, IModule referenceToAdd, TargetFrameworkId targetFrameworkId, IReferenceCreationContext context);
    public sealed virtual IProjectToAssemblyReference AddAssemblyReference(IProject project, VirtualFileSystemPath fullPathToReferencedLibrary, TargetFrameworkId targetFrameworkId, IReferenceCreationContext context);
    public sealed virtual void RemoveModuleReference(IProjectToModuleReference referenceToRemove, IReferenceRemovingContext context);
    public virtual bool CanRemoveModuleReference(IProjectToModuleReference referenceToRemove, String& reason);
    public sealed virtual void RemoveNugetPackage(IProjectToPackageReference reference);
    public sealed virtual void EditProjectMsBuildProperties(IProject project, string configurationName, Action`1<IMsBuildPropertiesEditor> editFunc);
    public virtual bool CanEditProjectMsBuildProperties(IProject project, String& reason);
    protected virtual bool CanModify(IProjectElement projectElement, String& reason);
    protected abstract virtual AddFileAction CreateAddFileAction(IProjectFolder parentFolder, VirtualFileSystemPath location, FileCreationParameters parameters, IFileCreationContext context);
    protected abstract virtual AddFolderAction CreateAddFolderAction(IProjectFolder parentFolder, string name, VirtualFileSystemPath folderPath, IFolderCreationContext context);
    protected abstract virtual RenameAction CreateRenameAction(IProjectItem projectItem, string newName, bool renameDependant);
    protected abstract virtual CopyAction CreateCopyAction(IProjectItem projectItem, IProjectFolder newParentItem, IItemModificationContext context);
    protected abstract virtual MoveAction CreateMoveAction(IProjectItem projectItem, IProjectFolder newParentItem, IItemModificationContext context);
    protected abstract virtual RemoveAction CreateRemoveAction(IProjectItem projectItem, bool doRemoveSharedFiles);
    protected abstract virtual AddReferenceAction CreateAddReferenceAction(IProject project, IModule referenceToAdd, TargetFrameworkId targetFrameworkId, IReferenceCreationContext context);
    protected abstract virtual AddReferenceAction2 CreateAddReferenceAction2(IProject project, VirtualFileSystemPath fullPathToReferencedLibrary, TargetFrameworkId targetFrameworkId, IReferenceCreationContext context);
    protected abstract virtual RemoveReferenceAction CreateRemoveReferenceAction(IProjectToModuleReference referenceToRemove, IReferenceRemovingContext context);
    protected abstract virtual RemovePackageAction CreateRemoveNugetAction(IProjectToPackageReferenceSearchDescriptor referenceToRemove);
    protected abstract virtual EditFilePropertiesAction CreateEditFilePropertiesAction(IProjectFile projectFile, Action`1<IProjectFileProperties> editPropertiesAction);
    protected abstract virtual EditMsBuildPropertiesAction CreateEditMsBuildPropertiesAction(Lifetime lifetime, IProject project, string configurationName);
    public static void MoveDiskEntity(VirtualFileSystemPath oldLocation, VirtualFileSystemPath newLocation);
    public static void RemoveDiskEntity(VirtualFileSystemPath location);
}
[ExtensionAttribute]
public static class JetBrains.DocumentManagers.Transactions.ProjectModelEditorEx : object {
    [ExtensionAttribute]
public static bool TrySetProjectTargetFrameworks(IProjectModelEditor projectModelEditor, IProject project, String& reason, TargetFrameworkId[] targetFrameworkIds);
}
public class JetBrains.DocumentManagers.Transactions.ProjectModelEditorException : Exception {
    public ProjectModelEditorException(string message);
    [StringFormatMethodAttribute("format")]
public ProjectModelEditorException(string format, Object[] args);
}
[SolutionComponentAttribute("0")]
public class JetBrains.DocumentManagers.Transactions.ProjectModelEditorOperations : object {
    protected ISolution Solution;
    public ProjectModelEditorOperations(ISolution solution);
    public virtual void DoRemove(IProjectItem projectItem);
    public virtual void DoRename(IProjectItem projectItem, string newName);
    public virtual void DoMove(IProjectItem projectItem, IProjectFolder newParent);
    public virtual IProjectFile DoCreateFile(IProjectFolder parentFolder, string name, VirtualFileSystemPath location, CompactList`1<Pair`2<TargetFrameworkId, BuildAction>> buildActions, IProjectElementOrigin origin);
    public virtual IProjectFolder DoCreateFolder(IProjectFolder parentFolder, string name, VirtualFileSystemPath referencedFolderPath);
    public virtual void CommitCreateFile(IProjectFile projectFile);
}
[SolutionComponentAttribute("0")]
public class JetBrains.DocumentManagers.Transactions.ProjectModelTransactionFactory : object {
    [CompilerGeneratedAttribute]
private SolutionDocumentTransactionManager <DocumentTransactionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectModelEditor <ProjectModelEditor>k__BackingField;
    [NotNullAttribute]
protected SolutionDocumentTransactionManager DocumentTransactionManager { get; }
    [NotNullAttribute]
protected IProjectModelEditor ProjectModelEditor { get; }
    public ProjectModelTransactionFactory(SolutionDocumentTransactionManager documentTransactionManager, IProjectModelEditor projectModelEditor);
    [CompilerGeneratedAttribute]
protected SolutionDocumentTransactionManager get_DocumentTransactionManager();
    [CompilerGeneratedAttribute]
protected IProjectModelEditor get_ProjectModelEditor();
    public virtual IProjectModelTransactionCookie CreateTransactionCookie(DefaultAction defaultAction, string commandName, bool optimizeChangesOnCommit, IProgressIndicator progressIndicator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("10")]
public class JetBrains.DocumentManagers.Transactions.ProjectModelTransactionManager : object {
    [CompilerGeneratedAttribute]
private IShellLocks <shellLocks>P;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ForkedContentModelData`1<IProjectModelTransactionHandler> myCurrentTransactionHandler;
    private IProjectModelTransactionHandler myDefaultTransactionHandler;
    public IProjectModelTransactionHandler CurrentTransactionHandler { get; }
    public ProjectModelTransactionManager(IEnsureWritableHandler ensureWritableHandler, IShellLocks shellLocks);
    public sealed virtual IProjectModelTransactionHandler get_CurrentTransactionHandler();
    [NullableContextAttribute("2")]
public sealed virtual void SetCurrentTransactionHandler(IProjectModelTransactionHandler transactionHandler);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DocumentManagers.Transactions.RangeMarkerUnderTransaction : RangeMarker {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private DocumentTransaction <OwnerTransaction>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ActionsCountWhenCreated>k__BackingField;
    [NullableAttribute("2")]
private DocumentTransaction OwnerTransaction { get; private set; }
    private int ActionsCountWhenCreated { get; private set; }
    public bool IsValid { get; }
    public TextRange Range { get; }
    public RangeMarkerUnderTransaction(DocumentTransaction ownerTransaction, int actionsCountWhenCreated, IDocument document, TextRange range);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private DocumentTransaction get_OwnerTransaction();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_OwnerTransaction(DocumentTransaction value);
    [CompilerGeneratedAttribute]
private int get_ActionsCountWhenCreated();
    [CompilerGeneratedAttribute]
private void set_ActionsCountWhenCreated(int value);
    protected virtual void UpdateRangeToCurrentDocumentTimestamp(IDocument document);
    public virtual bool get_IsValid();
    public virtual void NotifyDocumentChanged(DocumentChangeData documentChangeData);
    public sealed virtual void MoveToTransaction(DocumentTransaction fromTransaction, DocumentTransaction toTransaction, int changesCountToAdd);
    public virtual TextRange get_Range();
    public sealed virtual void MoveFromTransaction(DocumentTransaction documentTransaction);
    public sealed virtual void ResetTransaction(DocumentTransaction documentTransaction);
    public sealed virtual void PlayChangesBack(DocumentTransaction documentTransaction, DocumentChange rollbackChange, int index, int newDocumentLength);
    public sealed virtual void AssertIsMovedFrom(DocumentTransaction documentTransaction);
    public sealed virtual void AssertIsInTransaction(DocumentTransaction documentTransaction);
    public sealed virtual void Unregister();
}
[SolutionComponentAttribute("10")]
public class JetBrains.DocumentManagers.Transactions.SolutionDocumentTransactionManager : DocumentTransactionManager {
    private IProjectModelTransactionManager myProjectModelTransactionManager;
    protected IDocumentStorageHelpers DocumentOperations;
    protected DocumentChangeManager DocumentChangeManager;
    protected IEnsureWritableHandler EnsureWritableHandler;
    protected DocumentToProjectFileMappingStorage DocumentToProjectFileMappingStorage;
    protected ICommandProcessor CommandProcessor;
    protected DocumentCommandProcessor DocumentCommandProcessor;
    protected IRunningDocuments RunningDocuments;
    public SolutionDocumentTransactionManager(Lifetime lifetime, IDocumentStorageHelpers documentOperations, ISolution solution, DocumentSettings documentSettings, UITaskExecutor uiTaskExecutor, IProjectModelTransactionManager projectModelTransactionManager, DocumentChangeManager documentChangeManager, IEnsureWritableHandler ensureWritableHandler, DocumentToProjectFileMappingStorage documentToProjectFileMappingStorage, ICommandProcessor commandProcessor, DocumentCommandProcessor documentCommandProcessor, IRunningDocuments runningDocuments);
    private void AssertEnsureWritableCookie(object sender, BeforeMadeWritableEventArgs args);
    protected virtual DocumentTransaction CreateTransaction(DocumentTransaction parentTransaction, string commandName, bool optimizeChangesOnCommit);
    protected virtual void SaveDocumentsAfterModification(DocumentTransactionCommitResult documentTransactionCommitResult);
    protected virtual void SaveDocumentAfterModification(IDocument document, bool forceSaveOpenDocuments);
    protected virtual bool ShouldSaveProjectFile(IProjectFile projectFile);
    protected virtual void SetActiveTransaction(DocumentTransaction transaction);
    public virtual IRangeMarker CreateRangeMarker(ManagedDocumentBase document, TextRange range);
    [CompilerGeneratedAttribute]
private void <.ctor>b__8_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__8_1();
}
[ExtensionAttribute]
public static class JetBrains.DocumentManagers.Transactions.SolutionEx : object {
    [ExtensionAttribute]
public static IProjectModelTransactionCookie CreateTransactionCookie(ISolution solution, DefaultAction defaultAction, string commandName, IProgressIndicator progressIndicator, bool optimizeChangesOnCommit);
    [ExtensionAttribute]
public static IProjectModelTransactionCookie CreateTransactionCookie(ISolution solution, DefaultAction defaultAction, string commandName);
    [ExtensionAttribute]
public static IProjectModelTransactionCookie CreateTransactionCookie(ISolution solution, DefaultAction defaultAction, string commandName, IProgressIndicator progressIndicator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.DocumentManagers.Transactions.SolutionProjectDocumentTransaction : DocumentTransaction {
    private List`1<ITransactionAction> myProjectModelChanges;
    private IEnsureWritableHandler myEnsureWritableHandler;
    protected DocumentToProjectFileMappingStorage DocumentToProjectFileMappingStorage;
    private HashSet`1<IDocument> myDocumentsWithRemovedProjectFiles;
    private bool myCommitingProjectModelChange;
    protected IEnumerable`1<ITransactionAction> ProjectModelChanges { get; }
    public SolutionProjectDocumentTransaction(DocumentTransactionManager manager, DocumentTransaction parentTransaction, IShellLocks locks, DocumentSettings documentSettings, UITaskExecutor uiTaskExecutor, string commandName, bool optimizeChangesOnCommit, DocumentChangeManager documentChangeManager, IEnsureWritableHandler ensureWritableHandler, DocumentToProjectFileMappingStorage documentToProjectFileMappingStorage, ICommandProcessor commandProcessor, IRunningDocuments runningDocuments);
    protected IEnumerable`1<ITransactionAction> get_ProjectModelChanges();
    public sealed virtual void RegisterNewChange(ITransactionAction transactionAction);
    protected virtual ModificationCookie CreateEnsureWritableCookie(IList`1& affectedDocuments);
    protected virtual void MergeChanges(DocumentTransaction childTransaction);
    protected virtual DocumentTransactionRollbackResult DoRollback();
    protected virtual IReadOnlyCollection`1<DocumentChange> DoCommit(IDictionary`2<ManagedDocumentBase, DocumentChangeInfo> dirtyDocuments, IProgressIndicator progressIndicator);
    public virtual IRangeMarker CreateRangeMarker(TextRange range, ManagedDocumentBase document);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0(Tuple`3<IProjectFile, IDocument, VirtualFileSystemPath> pair);
}
public class JetBrains.DocumentManagers.Transactions.StandaloneActions.StandaloneAddFileAction : AddFileAction {
    [NotNullAttribute]
private IDocumentStorageHelpers myDocumentOperations;
    public StandaloneAddFileAction(IProjectFolder parentFolder, VirtualFileSystemPath location, IDocumentStorageHelpers documentOperations, FileCreationParameters parameters);
    protected virtual void DoCommit();
}
public class JetBrains.DocumentManagers.Transactions.StandaloneActions.StandaloneAddFolderAction : AddFolderAction {
    public StandaloneAddFolderAction(IProjectFolder parentFolder, string name, VirtualFileSystemPath folderPath, IShellLocks locks);
    public virtual void Commit();
}
public class JetBrains.DocumentManagers.Transactions.StandaloneActions.StandaloneAddReferenceAction : AddReferenceAction {
    public StandaloneAddReferenceAction(IProject project, IModule moduleToReference, IShellLocks locks, IModuleReferenceResolveManager moduleReferenceResolveManager, TargetFrameworkId targetFrameworkId);
    public virtual void Commit();
}
public class JetBrains.DocumentManagers.Transactions.StandaloneActions.StandaloneAddReferenceAction2 : AddReferenceAction2 {
    public StandaloneAddReferenceAction2(IProject project, VirtualFileSystemPath fullPathToReferencedAssembly, IShellLocks locks, IModuleReferenceResolveManager moduleReferenceResolveManager, TargetFrameworkId targetFrameworkId);
    public virtual void Commit();
}
public class JetBrains.DocumentManagers.Transactions.StandaloneActions.StandaloneCopyAction : CopyAction {
    private DocumentManager myDocumentManager;
    private IDocumentStorageHelpers myDocumentOperations;
    public StandaloneCopyAction(IProjectItem projectItem, IProjectFolder newParentItem, DocumentManager documentManager, IDocumentStorageHelpers documentOperations, IShellLocks locks);
    protected virtual void DoCommit();
    protected virtual void CopyDocument(IProjectFile oldProjectFile, IProjectFile newProjectFile);
}
public class JetBrains.DocumentManagers.Transactions.StandaloneActions.StandaloneEditFilePropertiesAction : EditFilePropertiesAction {
    public StandaloneEditFilePropertiesAction(IProjectFile projectFile, Action`1<IProjectFileProperties> editPropertiesAction, IShellLocks locks);
    public virtual void Commit();
}
public class JetBrains.DocumentManagers.Transactions.StandaloneActions.StandaloneMoveAction : MoveAction {
    public StandaloneMoveAction(IProjectItem projectItem, IProjectFolder newParentItem, IShellLocks locks);
    public virtual void Commit();
}
public class JetBrains.DocumentManagers.Transactions.StandaloneActions.StandaloneRemoveAction : RemoveAction {
    private List`1<VirtualFileSystemPath> myDependentFilePaths;
    private bool myRemoveFromDisk;
    private VirtualFileSystemPath myFileLocation;
    public StandaloneRemoveAction(IProjectItem projectItem, IShellLocks locks, bool doRemoveSharedFiles);
    public StandaloneRemoveAction(IProjectItem projectItem, IShellLocks locks, bool removeFromDisk, bool doRemoveSharedFiles);
    public virtual void Prepare();
    public virtual void Commit();
}
public class JetBrains.DocumentManagers.Transactions.StandaloneActions.StandaloneRemoveReferenceAction : RemoveReferenceAction {
    public StandaloneRemoveReferenceAction(IProjectToModuleReference referenceToRemove, IShellLocks locks, IModuleReferenceResolveManager moduleReferenceResolveManager);
    public virtual void Commit();
}
public class JetBrains.DocumentManagers.Transactions.StandaloneActions.StandaloneRenameAction : RenameAction {
    public StandaloneRenameAction(IProjectItem projectItem, string newName, bool renameDependant);
    public virtual void Commit();
    public virtual void Prepare();
    public virtual void Rollback();
    private void IterateItemsToRenameInFileSystem(Action`1<RenameItemData> action);
}
[SolutionComponentAttribute("0")]
public class JetBrains.DocumentManagers.Transactions.StandaloneProjectModelEditor : ProjectModelEditorBase {
    private DocumentManager myDocumentManager;
    private IDocumentStorageHelpers myDocumentOperations;
    protected DocumentManager Manager { get; }
    protected IDocumentStorageHelpers DocumentOperations { get; }
    public StandaloneProjectModelEditor(ISolution solution, DocumentManager documentManager, IDocumentStorageHelpers documentOperations, IProjectModelTransactionManager projectModelTransactionManager, IModuleReferenceResolveManager moduleReferenceResolveManager, IProjectModelUpdater projectModelUpdater);
    protected DocumentManager get_Manager();
    protected IDocumentStorageHelpers get_DocumentOperations();
    protected virtual AddFolderAction CreateAddFolderAction(IProjectFolder parentFolder, string name, VirtualFileSystemPath folderPath, IFolderCreationContext context);
    protected virtual RenameAction CreateRenameAction(IProjectItem projectItem, string newName, bool renameDependant);
    protected virtual CopyAction CreateCopyAction(IProjectItem projectItem, IProjectFolder newParentItem, IItemModificationContext context);
    protected virtual AddFileAction CreateAddFileAction(IProjectFolder parentFolder, VirtualFileSystemPath location, FileCreationParameters parameters, IFileCreationContext context);
    protected virtual RemoveAction CreateRemoveAction(IProjectItem projectItem, bool doRemoveSharedFiles);
    protected virtual MoveAction CreateMoveAction(IProjectItem projectItem, IProjectFolder newParentItem, IItemModificationContext context);
    protected virtual AddReferenceAction CreateAddReferenceAction(IProject project, IModule referenceToAdd, TargetFrameworkId targetFrameworkId, IReferenceCreationContext context);
    protected virtual AddReferenceAction2 CreateAddReferenceAction2(IProject project, VirtualFileSystemPath fullPathToReferencedLibrary, TargetFrameworkId targetFrameworkId, IReferenceCreationContext context);
    protected virtual RemoveReferenceAction CreateRemoveReferenceAction(IProjectToModuleReference referenceToRemove, IReferenceRemovingContext context);
    protected virtual RemovePackageAction CreateRemoveNugetAction(IProjectToPackageReferenceSearchDescriptor referenceToRemove);
    protected virtual EditFilePropertiesAction CreateEditFilePropertiesAction(IProjectFile projectFile, Action`1<IProjectFileProperties> editPropertiesAction);
    protected virtual EditMsBuildPropertiesAction CreateEditMsBuildPropertiesAction(Lifetime lifetime, IProject project, string configurationName);
}
[ExtensionAttribute]
public static class JetBrains.DocumentManagers.Transactions.TextRangeExtensions : object {
    [ExtensionAttribute]
public static DocumentRange CreateDocumentRange(TextRange textRange, IProjectFile projectFile);
}
public class JetBrains.DocumentManagers.Transactions.UpdateReferenceContext : object {
    [CompilerGeneratedAttribute]
private IProjectToModuleReference <Original>k__BackingField;
    [NotNullAttribute]
public IProjectToModuleReference Original { get; }
    public UpdateReferenceContext(IProjectToModuleReference original);
    [CompilerGeneratedAttribute]
public IProjectToModuleReference get_Original();
}
[ZoneMarkerAttribute]
public class JetBrains.DocumentManagers.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
