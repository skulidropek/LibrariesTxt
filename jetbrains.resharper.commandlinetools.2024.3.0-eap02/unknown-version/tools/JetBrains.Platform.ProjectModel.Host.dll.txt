[RdTypeAttribute]
public class JetBrains.ProjectModel.ProjectsHost.AddFileOrigin : object {
    [NotNullAttribute]
public BuildAction BuildAction;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Metadata>k__BackingField;
    public string ItemType { get; }
    public Dictionary`2<string, string> Metadata { get; }
    public AddFileOrigin(BuildAction buildAction, Dictionary`2<string, string> metadata);
    public sealed virtual string get_ItemType();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Metadata();
    public sealed virtual bool CanModify(String& reason);
}
public class JetBrains.ProjectModel.ProjectsHost.AggregateUpdateProjectsPolicy : object {
    [NotNullAttribute]
[ItemNotNullAttribute]
private ICollection`1<IForceUpdateProjectsPolicy> myInnerPolicies;
    public AggregateUpdateProjectsPolicy(ICollection`1<IForceUpdateProjectsPolicy> innerPolicies);
    public sealed virtual bool ShouldUpdate(IProjectMark projectMark);
}
public class JetBrains.ProjectModel.ProjectsHost.AllUpdateProjectsPolicy : object {
    public static IForceUpdateProjectsPolicy Instance;
    private static AllUpdateProjectsPolicy();
    public sealed virtual bool ShouldUpdate(IProjectMark projectMark);
}
public class JetBrains.ProjectModel.ProjectsHost.BuildScript.CheckMsBuildEventLoggerPresence : object {
    public static RelativePath MsBuildEventLoggerOutputName;
    private static CheckMsBuildEventLoggerPresence();
    [BuildStepAttribute]
public static SubplatformFileForPackagingFast[] Run(AllAssembliesOnEverything allAssembliesOnEverything, ILogger logger);
}
public class JetBrains.ProjectModel.ProjectsHost.CompositeProjectLoadRequester : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IProjectLoadRequester> <Requesters>k__BackingField;
    [NotNullAttribute]
public IReadOnlyCollection`1<IProjectLoadRequester> Requesters { get; }
    public CompositeProjectLoadRequester(IReadOnlyCollection`1<IProjectLoadRequester> requesters);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<IProjectLoadRequester> get_Requesters();
}
public class JetBrains.ProjectModel.ProjectsHost.DefaultUpdateProjectsPolicy : object {
    public static IForceUpdateProjectsPolicy Instance;
    private static DefaultUpdateProjectsPolicy();
    public sealed virtual bool ShouldUpdate(IProjectMark projectMark);
}
public interface JetBrains.ProjectModel.ProjectsHost.Dependencies.IProjectDependenciesDescriptor {
    [NotNullAttribute]
[ItemNotNullAttribute]
public IReadOnlyCollection`1<IProjectDependency> RootDependencies { get; }
    public abstract virtual IReadOnlyCollection`1<IProjectDependency> get_RootDependencies();
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IReadOnlyCollection`1<IProjectDependency> GetChildren(IProjectDependency projectDependency);
}
public interface JetBrains.ProjectModel.ProjectsHost.Dependencies.IProjectDependency {
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public TargetFrameworkId FrameworkId { get; }
    [NotNullAttribute]
public VirtualFileSystemPath Location { get; }
    public ProjectDependencyType Type { get; }
    [CanBeNullAttribute]
public string Version { get; }
    [NotNullAttribute]
public IList`1<string> Errors { get; }
    public abstract virtual string get_Name();
    public abstract virtual TargetFrameworkId get_FrameworkId();
    public abstract virtual VirtualFileSystemPath get_Location();
    public abstract virtual ProjectDependencyType get_Type();
    public abstract virtual string get_Version();
    public abstract virtual IList`1<string> get_Errors();
}
public class JetBrains.ProjectModel.ProjectsHost.Dependencies.ProjectDependenciesChange : object {
    [NotNullAttribute]
public IProject Project;
    [NotNullAttribute]
public IProjectDependenciesDescriptor DependenciesDescriptor;
    public ProjectDependenciesChange(IProject project, IProjectDependenciesDescriptor dependenciesDescriptor);
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.ProjectsHost.Dependencies.ProjectDependenciesManager : object {
    private ChangeManager myChangeManager;
    private Dictionary`2<IProjectMark, IProjectDependenciesDescriptor> myDependencies;
    private Comparer myComparer;
    public ProjectDependenciesManager(Lifetime lifetime, ChangeManager changeManager);
    [CanBeNullAttribute]
public IProjectDependenciesDescriptor GetDescriptor(IProject project);
    private sealed virtual override object JetBrains.Application.changes.IChangeProvider.Execute(IChangeMap changeMap);
    public void UpdateProjectDependencies(IProject project, IProjectDependenciesDescriptor dependenciesDescriptor);
    public IEnumerable`1<IProjectDependency> GetChildren(IProjectMark projectMark, IProjectDependency projectDependency);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.ProjectsHost.Dependencies.ProjectDependencyExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetPackageName(IProjectDependency projectDependency);
    [NotNullAttribute]
public static string GetPackageName(string projectDependencyName);
}
public enum JetBrains.ProjectModel.ProjectsHost.Dependencies.ProjectDependencyType : Enum {
    public int value__;
    public static ProjectDependencyType Package;
    public static ProjectDependencyType UnresolvedPackage;
    public static ProjectDependencyType Project;
    public static ProjectDependencyType SDK;
    public static ProjectDependencyType UnresolvedSDK;
    public static ProjectDependencyType FrameworkReference;
    public static ProjectDependencyType PrivateFrameworkReference;
    public static ProjectDependencyType UnresolvedFrameworkReference;
}
public interface JetBrains.ProjectModel.ProjectsHost.Diagnostic.IProjectExcludedFromBuild {
}
public interface JetBrains.ProjectModel.ProjectsHost.Diagnostic.IProjectWithInvalidConfiguration {
}
public abstract class JetBrains.ProjectModel.ProjectsHost.Diagnostic.MissingComponentDiagnostic : ProjectEnvironmentLoadDiagnostic {
    protected MissingComponentDiagnostic(IProjectMark projectMark, string component);
}
public class JetBrains.ProjectModel.ProjectsHost.Diagnostic.NuGetDiffVersionPackageReferenceDiagnostic : ProjectLoadDiagnostic {
    public NuGetDiffVersionPackageReferenceDiagnostic(IProjectMark projectMark, string title, string text, DiagnosticAttentionKind kind);
}
public class JetBrains.ProjectModel.ProjectsHost.Diagnostic.NuGetDuplicatePackageReferencesDiagnostic : ProjectLoadDiagnostic {
    public NuGetDuplicatePackageReferencesDiagnostic(IProjectMark projectMark, string title, string text, DiagnosticAttentionKind kind);
}
public abstract class JetBrains.ProjectModel.ProjectsHost.Diagnostic.ProjectEnvironmentLoadDiagnostic : ProjectLoadDiagnostic {
    protected ProjectEnvironmentLoadDiagnostic(IProjectMark projectMark, string title, string text);
}
public abstract class JetBrains.ProjectModel.ProjectsHost.Diagnostic.ProjectLoadDiagnostic : Diagnostic {
    [CompilerGeneratedAttribute]
private IProjectMark <ProjectMark>k__BackingField;
    [NotNullAttribute]
public IProjectMark ProjectMark { get; }
    protected ProjectLoadDiagnostic(IProjectMark projectMark, string title, string text, DiagnosticAttentionKind kind);
    [CompilerGeneratedAttribute]
public IProjectMark get_ProjectMark();
}
public class JetBrains.ProjectModel.ProjectsHost.Diagnostic.ProjectLoadError : ProjectLoadDiagnostic {
    public ProjectLoadError(IProjectMark projectMark, string text);
    [NotNullAttribute]
public static string MakeTitle(IProjectMark projectMark);
}
public class JetBrains.ProjectModel.ProjectsHost.Diagnostic.ProjectLoadWarning : ProjectLoadDiagnostic {
    public ProjectLoadWarning(IProjectMark projectMark, string text);
    [NotNullAttribute]
public static string MakeTitle(IProjectMark projectMark);
}
public abstract class JetBrains.ProjectModel.ProjectsHost.Diagnostic.SolutionLoadDiagnostic : Diagnostic {
    [CompilerGeneratedAttribute]
private ISolutionMark <SolutionMark>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Line>k__BackingField;
    [NotNullAttribute]
public ISolutionMark SolutionMark { get; }
    public Nullable`1<int> Line { get; }
    protected SolutionLoadDiagnostic(ISolutionMark solutionMark, string title, string text, DiagnosticAttentionKind kind, Nullable`1<int> line);
    [CompilerGeneratedAttribute]
public ISolutionMark get_SolutionMark();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Line();
}
public class JetBrains.ProjectModel.ProjectsHost.Diagnostic.SolutionLoadError : SolutionLoadDiagnostic {
    public SolutionLoadError(ISolutionMark solutionMark, string text, Nullable`1<int> line);
    [NotNullAttribute]
public static string MakeTitle(ISolutionMark solutionMark);
}
public class JetBrains.ProjectModel.ProjectsHost.Diagnostic.SolutionLoadWarning : SolutionLoadDiagnostic {
    public SolutionLoadWarning(ISolutionMark solutionMark, string text, Nullable`1<int> line);
    [NotNullAttribute]
public static string MakeTitle(ISolutionMark solutionMark);
}
[SolutionInstanceComponentAttribute("2")]
public class JetBrains.ProjectModel.ProjectsHost.Diagnostic.SolutionToolsetDiagnostic : object {
    private ILogger myLogger;
    private ISolution mySolution;
    private IDiagnosticCollector myDiagnosticCollector;
    private SequentialLifetimes myLifetimes;
    public SolutionToolsetDiagnostic(Lifetime lifetime, ILogger logger, ISolution solution, IDiagnosticCollector diagnosticCollector, IFileSystemTracker fileSystemTracker, SolutionFileLocationLive solutionFileLocationLive);
    private void ValidateToolset(RuntimeAndToolset runtimeAndToolset);
    private void ValidateGlobalJson();
    [CanBeNullAttribute]
private IDiagnostic CheckDotNetSdkVersion(RuntimeAndToolset runtimeAndToolset);
    [CanBeNullAttribute]
private IDiagnostic CheckMsBuildAgainstDotNetSdk(RuntimeAndToolset runtimeAndToolset);
    private sealed virtual override void JetBrains.ProjectModel.ISolutionToolsetListener.Changed(RuntimeAndToolset runtimeAndToolset);
}
public class JetBrains.ProjectModel.ProjectsHost.Diagnostic.UnloadedProjectReason : ProjectLoadDiagnostic {
    [CompilerGeneratedAttribute]
private UnloadReason <Reason>k__BackingField;
    public UnloadReason Reason { get; }
    public UnloadedProjectReason(IProjectMark projectMark, string reasonText, UnloadReason reason);
    [NotNullAttribute]
public static string MakeTitle(IProjectMark projectMark, UnloadReason reason);
    [CompilerGeneratedAttribute]
public UnloadReason get_Reason();
}
public enum JetBrains.ProjectModel.ProjectsHost.Diagnostic.UnloadReason : Enum {
    public int value__;
    public static UnloadReason Skipped;
    public static UnloadReason NotSupported;
    public static UnloadReason Filtered;
}
public class JetBrains.ProjectModel.ProjectsHost.EmptyProjectHostEditItemSession : object {
    public static IProjectHostEditItemSession Instance;
    private static EmptyProjectHostEditItemSession();
    public sealed virtual void Commit();
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.ProjectsHost.EmptyProjectHostItemDescriptor : object {
    public static IProjectHostItemDescriptor Instance;
    public BuildAction BuildAction { get; }
    public Dictionary`2<string, string> Metadata { get; }
    private static EmptyProjectHostItemDescriptor();
    public sealed virtual BuildAction get_BuildAction();
    public sealed virtual Dictionary`2<string, string> get_Metadata();
}
public class JetBrains.ProjectModel.ProjectsHost.EmptyReloadEventsConsumer : object {
    public static IReloadEventsConsumer Instance;
    private static EmptyReloadEventsConsumer();
    private sealed virtual override void JetBrains.ProjectModel.ProjectsHost.IReloadEventsConsumer.OnStart(IProjectMark projectMark);
    private sealed virtual override void JetBrains.ProjectModel.ProjectsHost.IReloadEventsConsumer.OnFinish(IProjectMark projectMark);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.Features.RuleSets.DefaultTargetRequest : object {
    public sealed virtual bool IsApplicable(IProjectMark projectMark);
    public sealed virtual void ModifyTargets(List`1<string> targets);
    public sealed virtual void ModifyProperties(IDictionary`2<string, string> properties);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.Features.RuleSets.LegacyTargetRequest : object {
    public sealed virtual bool IsApplicable(IProjectMark projectMark);
    public sealed virtual void ModifyTargets(List`1<string> targets);
    public sealed virtual void ModifyProperties(IDictionary`2<string, string> properties);
}
[ZoneMarkerAttribute]
public class JetBrains.ProjectModel.ProjectsHost.Features.RuleSets.ZoneMarker : object {
}
[SolutionComponentAttribute("18")]
public class JetBrains.ProjectModel.ProjectsHost.Features.SolutionBuilders.SolutionConfigurationAccessibilityChecker : SolutionConfigurationAccessibilityCheckerStub {
    private Property`1<bool> myAccessGranted;
    public IProperty`1<bool> AccessGranted { get; }
    public SolutionConfigurationAccessibilityChecker(Lifetime lifetime, ISolutionLoadTasksScheduler solutionLoadTasksScheduler);
    public virtual IProperty`1<bool> get_AccessGranted();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0();
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.ProjectsHost.Features.SolutionBuilders.SolutionConfigurationChangeProvider : SolutionHostSyncListener {
    [CompilerGeneratedAttribute]
private ISimpleSignal <ConfigurationChanged>k__BackingField;
    public ISimpleSignal ConfigurationChanged { get; }
    public SolutionConfigurationChangeProvider(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_ConfigurationChanged();
    public virtual void AfterUpdateSolution(SolutionStructureChange change);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ProjectModel.ProjectsHost.Features.SolutionBuilders.SolutionConfigurationHolder : SolutionConfigurationHolderStub {
    [NotNullAttribute]
private ISolution mySolution;
    [CanBeNullAttribute]
private ISolutionMark mySolutionMark;
    public SolutionConfigurationHolder(Lifetime lifetime, ISolution solution, ISolutionMark solutionMark);
    public virtual ProjectCollectionActiveConfiguration GetProjectsConfiguration(IEnumerable`1<ProjectWithData> projects);
    public virtual ISolutionConfigurationAndPlatform GetSolutionActiveConfiguration();
    public virtual SolutionBuildDependencies GetSolutionBuildDependencies();
    private static string ToProjectId(IProjectMark projectMark);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.Features.SolutionBuilders.SolutionFileChangingTracker : SolutionFileChangingTrackerStub {
    private ISimpleSignal mySolutionFileChanged;
    public ISimpleSignal SolutionFileChanged { get; }
    public SolutionFileChangingTracker(Lifetime lifetime);
    public virtual ISimpleSignal get_SolutionFileChanged();
}
[ZoneMarkerAttribute]
public class JetBrains.ProjectModel.ProjectsHost.Features.SolutionBuilders.ZoneMarker : object {
}
public class JetBrains.ProjectModel.ProjectsHost.FilteredUpdateProjectsPolicy : object {
    [NotNullAttribute]
private Func`2<IProjectMark, bool> myFilterProjectsToUpdate;
    public FilteredUpdateProjectsPolicy(Func`2<IProjectMark, bool> filterProjectsToUpdate);
    public sealed virtual bool ShouldUpdate(IProjectMark projectMark);
}
[NullableContextAttribute("1")]
public interface JetBrains.ProjectModel.ProjectsHost.ICustomProjectMarkProvider {
    public abstract virtual IEnumerable`1<IProjectMark> GetCustomProjectMarks(IReadOnlyCollection`1<IProjectMark> projectMarks);
}
public interface JetBrains.ProjectModel.ProjectsHost.IForceUpdateProjectsPolicy {
    public abstract virtual bool ShouldUpdate(IProjectMark projectMark);
}
public class JetBrains.ProjectModel.ProjectsHost.Impl.CompositeFolderFilter : object {
    private ICollection`1<IFolderFilter> myFilters;
    public CompositeFolderFilter(IFolderFilter[] filters);
    public sealed virtual bool Filter(VirtualFileSystemPath path);
}
public class JetBrains.ProjectModel.ProjectsHost.Impl.DummyProjectMark : ProjectMarkBase {
    [CompilerGeneratedAttribute]
private IProjectConfigurationAndPlatform <configurationAndPlatform>P;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <TypeGuid>k__BackingField;
    public IProjectConfigurationAndPlatform ActiveConfigurationAndPlatform { get; }
    public bool IsSolutionFolder { get; }
    public bool IsModifiable { get; }
    public string Name { get; }
    public VirtualFileSystemPath Location { get; }
    public Guid Guid { get; }
    public Guid TypeGuid { get; }
    public DummyProjectMark(ISolutionMark solutionMark, string name, Guid guid, VirtualFileSystemPath location, IProjectConfigurationAndPlatform configurationAndPlatform);
    public virtual IProjectConfigurationAndPlatform get_ActiveConfigurationAndPlatform();
    public virtual bool get_IsSolutionFolder();
    public virtual bool get_IsModifiable();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual VirtualFileSystemPath get_Location();
    [CompilerGeneratedAttribute]
public virtual Guid get_Guid();
    [CompilerGeneratedAttribute]
public virtual Guid get_TypeGuid();
    public sealed virtual bool Equals(DummyProjectMark other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.ProjectModel.ProjectsHost.Impl.DummySolutionMark : object {
    [NotNullAttribute]
private VirtualFileSystemPath myProjectFilePath;
    public string Name { get; }
    public VirtualFileSystemPath Location { get; }
    public string Content { get; }
    public ISolutionConfigurationAndPlatform ActiveConfigurationAndPlatform { get; }
    public ISolutionConfigurationAndPlatformStore ConfigurationAndPlatformStore { get; }
    internal DummySolutionMark(VirtualFileSystemPath projectFilePath);
    public sealed virtual string get_Name();
    public sealed virtual VirtualFileSystemPath get_Location();
    public string get_Content();
    public sealed virtual SolutionStructureChange Update(SolutionMarkUpdateRequest request);
    public sealed virtual SolutionFormatVersion GetPlatformVersion();
    public sealed virtual IReadOnlyCollection`1<VirtualFileSystemPath> GetProjectLocations();
    public sealed virtual IReadOnlyCollection`1<VirtualFileSystemPath> GetSolutionRelatedLocations();
    public sealed virtual ISolutionConfigurationAndPlatform get_ActiveConfigurationAndPlatform();
    public sealed virtual ISolutionConfigurationAndPlatformStore get_ConfigurationAndPlatformStore();
    public sealed virtual IProjectMark AddProject(ProjectDefinitionDescriptor descriptor, IProjectMark parent);
    public sealed virtual IProjectMark RenameProject(IProjectMark project, string name, string path);
    public sealed virtual void RemoveProject(IProjectMark project);
    public sealed virtual void MoveProject(IProjectMark project, IProjectMark parent);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.Impl.FileSystem.FileSystemStructureBuilder : object {
    private ProjectFilePropertiesFactory myProjectFilePropertiesFactory;
    public FileSystemStructureBuilder(ProjectFilePropertiesFactory projectFilePropertiesFactory);
    public void Build(ProjectDescriptor descriptor, IFolderFilter filter);
    private void BuildInternal(IProjectFolderDescriptor parent, IProjectProperties projectProperties, IFolderFilter filter);
    private bool Filter(VirtualFileSystemPath path);
}
public static class JetBrains.ProjectModel.ProjectsHost.Impl.FileSystem.FileSystemWellKnownFilter : object {
    public static List`1<string> WellKnownSpecialDirectories;
    public static List`1<string> WellKnownExcludeDirectories;
    private static FileSystemWellKnownFilter();
    public static bool IsWellKnownExcludeFiles(string fileName);
}
[ProjectsHostComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.Impl.FileSystem.FileSystemWildcardService : object {
    private WildcardContainer myWildcardContainer;
    public FileSystemWildcardService(WildcardContainer wildcardContainer);
    public void RegisterDirectory(IProjectMark projectMark, VirtualFileSystemPath directory, TargetFrameworkId targetFrameworkId, IFolderFilter filter);
}
[ProjectsHostComponentAttribute("0")]
internal class JetBrains.ProjectModel.ProjectsHost.Impl.Hosts.ExecutableProjectHost : SolutionFileProjectHostBase {
    public ExecutableProjectHost(ISolutionMark solutionMark, FileContentTracker fileContentTracker);
    public virtual bool IsApplicable(IProjectMark projectMark);
    protected virtual void Reload(ProjectHostReloadChange change, FileSystemPath logPath);
}
[ProjectsHostComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.Impl.Hosts.LegacyInstallerProjectHost : ProjectHostBase {
    private static string Extension;
    public virtual bool IsApplicable(IProjectMark projectMark);
    public virtual void Reload(Lifetime lifetime, IReadOnlyCollection`1<ProjectHostReloadChange> changes, IReloadEventsConsumer reloadEventsConsumer, FileSystemPath logPath);
}
[ProjectsHostComponentAttribute("0")]
internal class JetBrains.ProjectModel.ProjectsHost.Impl.Hosts.SolutionFolderHost : SolutionFileProjectHostBase {
    private ProjectPropertiesFactory myProjectPropertiesFactory;
    private ProjectFilePropertiesFactory myProjectFilePropertiesFactory;
    public SolutionFolderHost(ProjectPropertiesFactory projectPropertiesFactory, ProjectFilePropertiesFactory projectFilePropertiesFactory, ISolutionMark solutionMark, FileContentTracker fileContentTracker);
    public virtual bool IsApplicable(IProjectMark projectMark);
    protected virtual void Reload(ProjectHostReloadChange change, FileSystemPath logPath);
    public virtual void AddItem(IProjectMark projectMark, IProjectItem projectItem, RelativeTo relativeTo);
    public virtual IProjectHostEditItemSession RemoveItem(IProjectMark projectMark, IProjectItem projectItem);
    public virtual IProjectHostEditItemSession RemoveAndExcludeItem(IProjectMark projectMark, IProjectItem projectItem);
    public virtual IProjectHostEditItemSession UpdateItem(IProjectMark projectMark, IProjectItem projectItem);
    public virtual void AddReference(IProjectMark projectMark, IProjectToModuleReference reference);
    public virtual void RemoveReference(IProjectMark projectMark, IProjectToModuleReference reference);
    public virtual IProjectHostEditItemSession UpdateReference(IProjectMark projectMark, IProjectToModuleReference reference);
    private static string GetSolutionItemName(IProjectMark projectMark, VirtualFileSystemPath location);
}
[ProjectsHostComponentAttribute("0")]
internal class JetBrains.ProjectModel.ProjectsHost.Impl.Hosts.WebSiteProjectHost : SolutionFileProjectHostBase {
    private IPlatformManager myPlatformManager;
    private FileSystemStructureBuilder myStructureBuilder;
    private FileSystemWildcardService myWildcardService;
    private static Regex ourReTargetFrameworkMoniker;
    public WebSiteProjectHost(IPlatformManager platformManager, FileSystemStructureBuilder structureBuilder, FileSystemWildcardService wildcardService, ISolutionMark solutionMark, FileContentTracker fileContentTracker);
    private static WebSiteProjectHost();
    public virtual bool IsApplicable(IProjectMark projectMark);
    protected virtual void Reload(ProjectHostReloadChange change, FileSystemPath logPath);
    public virtual void AddReference(IProjectMark projectMark, IProjectToModuleReference reference);
    public virtual void RemoveReference(IProjectMark projectMark, IProjectToModuleReference reference);
    private static ProjectReferencesDescriptor BuildReferences(TargetFrameworkId targetFrameworkId, OneToListMap`2<string, string> websiteProperties);
    [NotNullAttribute]
private static VirtualFileSystemPath GetWebSiteProjectLocation(IProjectMark projectMark, OneToListMap`2<string, string> websiteProperties);
    private static ProjectLanguage DefaultWebSiteLanguage(OneToListMap`2<string, string> websiteProperties);
    [CanBeNullAttribute]
private static TargetFrameworkId TryGetTargetFramework(OneToListMap`2<string, string> websiteProperties);
}
public class JetBrains.ProjectModel.ProjectsHost.Impl.Hosts.WebSiteReferenceData : object {
    [CompilerGeneratedAttribute]
private Guid <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public Guid Guid { get; }
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public string NameWithoutExtension { get; }
    public WebSiteReferenceData(Guid guid, string name);
    [CompilerGeneratedAttribute]
public Guid get_Guid();
    [CompilerGeneratedAttribute]
public string get_Name();
    public string get_NameWithoutExtension();
    [NotNullAttribute]
public string Present();
    [CanBeNullAttribute]
public static WebSiteReferenceData Parse(string value);
    public sealed virtual bool Equals(WebSiteReferenceData other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public static class JetBrains.ProjectModel.ProjectsHost.Impl.Hosts.WebSiteReferences : object {
    public static string ProjectReferencesProperty;
    public static string WebsiteProperties;
    [NotNullAttribute]
public static List`1<WebSiteReferenceData> Parse(string property);
    [NotNullAttribute]
private static string Build(WebSiteReferenceData reference);
    [NotNullAttribute]
private static string Build(IEnumerable`1<WebSiteReferenceData> references);
    public static bool AddProjectReference(IProjectMark projectMark, IProjectToProjectReference reference);
    public static bool RemoveProjectReference(IProjectMark projectMark, IProjectToProjectReference projectReference);
    [NotNullAttribute]
public static VirtualFileSystemPath GetReferenceOutputFilePath(IProject project);
}
public interface JetBrains.ProjectModel.ProjectsHost.Impl.IFolderFilter {
    public abstract virtual bool Filter(VirtualFileSystemPath path);
}
public interface JetBrains.ProjectModel.ProjectsHost.Impl.IProjectMarkWithDefinition {
    public IProjectDefinition Definition { get; }
    public abstract virtual IProjectDefinition get_Definition();
}
public interface JetBrains.ProjectModel.ProjectsHost.Impl.ISolutionConfigurationDefaults {
    public int PriorityAsc { get; }
    [NotNullAttribute]
public IReadOnlyList`1<string> DefaultConfigurations { get; }
    [NotNullAttribute]
public IReadOnlyList`1<string> DefaultPlatforms { get; }
    public abstract virtual int get_PriorityAsc();
    public abstract virtual IReadOnlyList`1<string> get_DefaultConfigurations();
    public abstract virtual IReadOnlyList`1<string> get_DefaultPlatforms();
}
public abstract class JetBrains.ProjectModel.ProjectsHost.Impl.ProjectHostBase : object {
    public abstract virtual bool IsApplicable(IProjectMark projectMark);
    public abstract virtual void Reload(Lifetime lifetime, IReadOnlyCollection`1<ProjectHostReloadChange> changes, IReloadEventsConsumer reloadEventsConsumer, FileSystemPath logPath);
    public virtual void BeforeLoad(IProjectMark projectMark);
    public virtual void Unload(IProjectMark projectMark);
    public virtual bool IsProjectAffectedByChange(IProjectMark parentProject, IProjectItem changedItem);
    public virtual void AddItem(IProjectMark projectMark, IProjectItem projectItem, RelativeTo relativeTo);
    public virtual IProjectHostEditItemSession RemoveItem(IProjectMark projectMark, IProjectItem projectItem);
    public virtual IProjectHostEditItemSession RemoveAndExcludeItem(IProjectMark projectMark, IProjectItem projectItem);
    public virtual IProjectHostEditItemSession UpdateItem(IProjectMark projectMark, IProjectItem projectItem);
    public virtual void AddReference(IProjectMark projectMark, IProjectToModuleReference reference);
    public virtual void RemoveReference(IProjectMark projectMark, IProjectToModuleReference reference);
    public virtual void RebindReference(IProjectMark projectMark, IProjectToModuleReference oldReference, IProjectToModuleReference newReference);
    public virtual IProjectHostEditItemSession UpdateReference(IProjectMark projectMark, IProjectToModuleReference reference);
    public sealed virtual IProjectHostItemDescriptor Describe(IProjectMark projectMark, IProjectItem projectItem);
    public virtual void ClearCaches();
}
public abstract class JetBrains.ProjectModel.ProjectsHost.Impl.ProjectHostChange : ProjectHostTreeBase`1<ProjectHostChange> {
    [CompilerGeneratedAttribute]
private IProjectMark <ProjectMark>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ProjectLoadDiagnostic> <Diagnostics>k__BackingField;
    [NotNullAttribute]
public IProjectMark ProjectMark { get; }
    [NotNullAttribute]
public List`1<ProjectLoadDiagnostic> Diagnostics { get; }
    protected ProjectHostChange(IProjectMark projectMark);
    [CompilerGeneratedAttribute]
public IProjectMark get_ProjectMark();
    [CompilerGeneratedAttribute]
public List`1<ProjectLoadDiagnostic> get_Diagnostics();
}
public class JetBrains.ProjectModel.ProjectsHost.Impl.ProjectHostChangeDescriptors : ProjectHostTreeBase`1<ProjectHostChangeDescriptors> {
    [CompilerGeneratedAttribute]
private IProjectDescriptor <ProjectDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectReferencesDescriptor <ProjectReferencesDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectDependenciesDescriptor <ProjectDependenciesDescriptor>k__BackingField;
    [NotNullAttribute]
public IProjectDescriptor ProjectDescriptor { get; }
    [CanBeNullAttribute]
public IProjectReferencesDescriptor ProjectReferencesDescriptor { get; public set; }
    [CanBeNullAttribute]
public IProjectDependenciesDescriptor ProjectDependenciesDescriptor { get; public set; }
    public ProjectHostChangeDescriptors(IProjectDescriptor projectDescriptor);
    [CompilerGeneratedAttribute]
public IProjectDescriptor get_ProjectDescriptor();
    [CompilerGeneratedAttribute]
public IProjectReferencesDescriptor get_ProjectReferencesDescriptor();
    [CompilerGeneratedAttribute]
public void set_ProjectReferencesDescriptor(IProjectReferencesDescriptor value);
    [CompilerGeneratedAttribute]
public IProjectDependenciesDescriptor get_ProjectDependenciesDescriptor();
    [CompilerGeneratedAttribute]
public void set_ProjectDependenciesDescriptor(IProjectDependenciesDescriptor value);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.ProjectsHost.Impl.ProjectHostChangeExtensions : object {
    [ExtensionAttribute]
public static void CreateStructure(ICollection`1<ProjectHostChange> changes);
    [ExtensionAttribute]
[NotNullAttribute]
public static ICollection`1<ProjectHostChange> GetRootChanges(ICollection`1<ProjectHostChange> changes);
}
[ProjectsHostComponentAttribute("0")]
public class JetBrains.ProjectModel.ProjectsHost.Impl.ProjectHostLoader : object {
    private IImmutableList`1<IProjectHost> myProjectHosts;
    private SequentialLifetimes myLifetimes;
    private Lifetime myCurrentStateLifetime;
    public ProjectHostLoader(Lifetime lifetime, IImmutableList`1<IProjectHost> projectHosts);
    [NotNullAttribute]
public IProjectHost GetProjectHost(IProjectMark projectMark);
    public ProjectStructureStamp GetStateStamp();
    public void ResetState();
}
[SolutionInstanceComponentAttribute("0")]
public class JetBrains.ProjectModel.ProjectsHost.Impl.ProjectHostLoggerService : object {
    private ILogger myLogger;
    private IMsBuildUserProfile myUserProfile;
    private GlobalService myGlobalService;
    public ProjectHostLoggerService(ILogger logger, IMsBuildUserProfile userProfile, GlobalService globalService);
    [CanBeNullAttribute]
public FileSystemPath GetLogPath(IReadOnlyCollection`1<IProjectMark> projectMarks, ProjectHostLogRequest logRequest);
}
public static class JetBrains.ProjectModel.ProjectsHost.Impl.ProjectHostModifications : object {
    private static ThreadLocal`1<bool> ourHasCookie;
    private static ProjectHostModifications();
    public static IDisposable UsePreventModificationsCookie();
    public static bool PreventModifications();
}
public class JetBrains.ProjectModel.ProjectsHost.Impl.ProjectHostReloadChange : ProjectHostChange {
    [CompilerGeneratedAttribute]
private ProjectHostChangeDescriptors <Descriptors>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectHost <ProjectHost>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectLoadRequester <Requester>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCancelled>k__BackingField;
    [CanBeNullAttribute]
public ProjectHostChangeDescriptors Descriptors { get; public set; }
    [NotNullAttribute]
public IProjectHost ProjectHost { get; }
    [CanBeNullAttribute]
public IProjectLoadRequester Requester { get; }
    public bool IsCancelled { get; private set; }
    public ProjectHostReloadChange(IProjectMark projectMark, IProjectHost projectHost, IProjectLoadRequester requester);
    [CompilerGeneratedAttribute]
public ProjectHostChangeDescriptors get_Descriptors();
    [CompilerGeneratedAttribute]
public void set_Descriptors(ProjectHostChangeDescriptors value);
    [CompilerGeneratedAttribute]
public IProjectHost get_ProjectHost();
    [CompilerGeneratedAttribute]
public IProjectLoadRequester get_Requester();
    [CompilerGeneratedAttribute]
public bool get_IsCancelled();
    [CompilerGeneratedAttribute]
private void set_IsCancelled(bool value);
    public void MarkCancelled();
}
public class JetBrains.ProjectModel.ProjectsHost.Impl.ProjectHostStructureChange : ProjectHostChange {
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    public IProject Project { get; }
    public ProjectHostStructureChange(IProjectMark projectMark, IProject project);
    [CompilerGeneratedAttribute]
public IProject get_Project();
}
public abstract class JetBrains.ProjectModel.ProjectsHost.Impl.ProjectHostTreeBase`1 : object {
    [CanBeNullAttribute]
private List`1<T> myChildren;
    [CanBeNullAttribute]
private T myParent;
    [CanBeNullAttribute]
public T Parent { get; }
    [NotNullAttribute]
public IReadOnlyCollection`1<T> Children { get; }
    [NotNullAttribute]
public IReadOnlyCollection`1<T> Descendants { get; }
    public T get_Parent();
    public IReadOnlyCollection`1<T> get_Children();
    public IReadOnlyCollection`1<T> get_Descendants();
    public void AssignParent(T parent);
    public void DeleteChange();
    private void AddChild(T child);
}
public class JetBrains.ProjectModel.ProjectsHost.Impl.ProjectMark : ProjectMarkBase {
    [CanBeNullAttribute]
private IProjectDefinition myProjectDefinition;
    [CanBeNullAttribute]
private IProjectConfigurationAndPlatform myActiveConfigurationAndPlatform;
    public string Name { get; }
    public VirtualFileSystemPath Location { get; }
    public Guid Guid { get; }
    public Guid TypeGuid { get; }
    public IProjectConfigurationAndPlatform ActiveConfigurationAndPlatform { get; }
    public bool IsSolutionFolder { get; }
    [NotNullAttribute]
public IProjectDefinition Definition { get; }
    public ProjectMark(ISolutionMark solutionMark, IProjectDefinition projectDefinition, IProjectConfigurationAndPlatform activeConfigurationAndPlatform);
    public virtual string get_Name();
    public virtual VirtualFileSystemPath get_Location();
    public virtual Guid get_Guid();
    public virtual Guid get_TypeGuid();
    public virtual IProjectConfigurationAndPlatform get_ActiveConfigurationAndPlatform();
    public virtual bool get_IsSolutionFolder();
    public sealed virtual IProjectDefinition get_Definition();
    public void Update(IProjectDefinition projectDefinition, IProjectConfigurationAndPlatform activeConfigurationAndPlatform);
    private VirtualFileSystemPath CalculateLocation();
    [NotNullAttribute]
public IReadOnlyCollection`1<OneToListMap`2<string, string>> GetProjectProperties(string propertiesName);
    public void AddProjectProperty(string propertiesName, string propertyName, string propertyValue);
    public void UpdateProjectProperty(string propertiesName, string propertyName, string propertyValue);
    [NotNullAttribute]
public IReadOnlyCollection`1<VirtualFileSystemPath> GetSolutionItemsLocations();
    public void AddSolutionItem(string solutionItemName);
    public void UpdateSolutionItem(string oldName, string newName);
    public void RemoveSolutionItem(string name);
    [NotNullAttribute]
public IReadOnlyCollection`1<Guid> GetProjectDependencies();
    public void RemoveProjectDependency(IProjectDefinition dependencyProjectDefinition);
    public void AddProjectDependency(IProjectDefinition dependencyProjectDefinition);
}
[ProjectsHostComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.Impl.ProjectMarkDependencies : object {
    [CompilerGeneratedAttribute]
private ILogger <logger>P;
    [CompilerGeneratedAttribute]
private IImmutableList`1<IProjectMarkDependencyProvider> <providers>P;
    public ProjectMarkDependencies(ILogger logger, IImmutableList`1<IProjectMarkDependencyProvider> providers);
    [NotNullAttribute]
public IReadOnlyCollection`1<IProjectMark> GetDependantProjects(IReadOnlyCollection`1<IProjectMark> projectMarks, HashSet`1<IProjectMark> allProjectMarks);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.ProjectsHost.Impl.ProjectMarkExtensions : object {
    [ExtensionAttribute]
public static bool IsRegularProject(IProjectMark projectMark);
    [ExtensionAttribute]
public static bool IsSharedProject(IProjectMark projectMark);
    [ExtensionAttribute]
public static bool IsWebSite(IProjectMark projectMark);
    [ExtensionAttribute]
public static bool IsVCXProject(IProjectMark projectMark);
    [ExtensionAttribute]
public static bool IsSqlProject(IProjectMark projectMark);
    [ExtensionAttribute]
[NotNullAttribute]
public static IProjectMark GetRootProjectMark(IProjectMark projectMark);
    [ExtensionAttribute]
public static CollectionSource`1<IProjectMark> GetAllChildren(IProjectMark projectMark);
    [ExtensionAttribute]
public static CollectionSource`1<IProjectMark> GetAllChildrenAndThis(IProjectMark projectMark);
    private static void FillAllChildren(List`1<IProjectMark> result, IProjectMark parent);
    [ExtensionAttribute]
[NotNullAttribute]
public static IProjectSearchDescriptor ToProjectSearchDescriptor(IProjectMark projectMark);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.Impl.ProjectMarkTypeGuidProvider : object {
    public virtual bool IsApplicable(IProjectMark projectMark);
    public virtual Guid GetActualTypeGuid(IProjectMark projectMark);
}
public class JetBrains.ProjectModel.ProjectsHost.Impl.ProjectStructureChange : object {
    [NotNullAttribute]
public ISolutionMark SolutionMark;
    [NotNullAttribute]
public ICollection`1<ProjectHostChange> AddedProjects;
    [NotNullAttribute]
public ICollection`1<ProjectHostChange> UpdatedProjects;
    [NotNullAttribute]
public ICollection`1<ProjectHostChange> RemovedProjects;
    [CompilerGeneratedAttribute]
private ProjectStructureStamp <Stamp>k__BackingField;
    public ProjectStructureStamp Stamp { get; }
    [NotNullAttribute]
public ICollection`1<ProjectHostChange> AddedOrUpdatedProjects { get; }
    [NotNullAttribute]
public ICollection`1<ProjectHostChange> AllChangedProjects { get; }
    public ProjectStructureChange(ISolutionMark solutionMark, ICollection`1<ProjectHostChange> changesToAdd, ICollection`1<ProjectHostChange> changesToUpdate, ICollection`1<ProjectHostChange> changesToRemove, ProjectStructureStamp stamp);
    [CompilerGeneratedAttribute]
public ProjectStructureStamp get_Stamp();
    public ICollection`1<ProjectHostChange> get_AddedOrUpdatedProjects();
    public ICollection`1<ProjectHostChange> get_AllChangedProjects();
}
public class JetBrains.ProjectModel.ProjectsHost.Impl.ProjectStructureStamp : ValueType {
    private Lifetime myLifetime;
    public bool IsExpired { get; }
    public ProjectStructureStamp(Lifetime lifetime);
    public bool get_IsExpired();
}
public class JetBrains.ProjectModel.ProjectsHost.Impl.SolutionConfigurationAndPlatformStore : object {
    public static ISolutionConfigurationAndPlatformStore Empty;
    [NotNullAttribute]
private IReadOnlyList`1<ISolutionConfigurationDefaults> mySolutionConfigurationDefaultsSet;
    [CompilerGeneratedAttribute]
private ICollection`1<SolutionConfigurationAndPlatform> <ConfigurationsAndPlatforms>k__BackingField;
    private Dictionary`2<IProjectDefinition, IDictionary`2<ISolutionConfigurationAndPlatform, IProjectConfigurationAndPlatform>> mySolutionToProjectConfigMap;
    private string myContentCache;
    public ICollection`1<SolutionConfigurationAndPlatform> ConfigurationsAndPlatforms { get; }
    public SolutionConfigurationAndPlatformStore(IReadOnlyList`1<ISolutionConfigurationDefaults> solutionConfigurationDefaultsSet);
    private static SolutionConfigurationAndPlatformStore();
    [CompilerGeneratedAttribute]
public sealed virtual ICollection`1<SolutionConfigurationAndPlatform> get_ConfigurationsAndPlatforms();
    public sealed virtual IProjectConfigurationAndPlatform GetForProject(IProjectDefinition projectDefinition, ISolutionConfigurationAndPlatform solutionConfiguration);
    public sealed virtual ICollection`1<IProjectConfigurationAndPlatform> GetAllForProject(IProjectDefinition projectDefinition);
    public sealed virtual ISolutionConfigurationAndPlatform Fix(ISolutionConfigurationAndPlatform solutionConfigurationAndPlatform);
    private IReadOnlyList`1<string> GetDefaultsByPriority(Func`2<ISolutionConfigurationDefaults, IEnumerable`1<string>> selector);
    public sealed virtual void Update(ISolutionMark solutionMark, ISolutionDefinition solutionDefinition, ICollection`1<SolutionLoadDiagnostic> diagnostics);
    public sealed virtual string GetContent(ISolutionConfigurationAndPlatform solutionConfiguration);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.Impl.SolutionConfigurationDefaults : object {
    public static string AnyCpuPlatform;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <DefaultConfigurations>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <DefaultPlatforms>k__BackingField;
    public int PriorityAsc { get; }
    public IReadOnlyList`1<string> DefaultConfigurations { get; }
    public IReadOnlyList`1<string> DefaultPlatforms { get; }
    public sealed virtual int get_PriorityAsc();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<string> get_DefaultConfigurations();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<string> get_DefaultPlatforms();
    private static IReadOnlyList`1<string> CreateDefaultPlatforms();
}
public abstract class JetBrains.ProjectModel.ProjectsHost.Impl.SolutionFileProjectHostBase : ProjectHostBase {
    [NotNullAttribute]
private FileContentTracker myFileContentTracker;
    [CompilerGeneratedAttribute]
private ISolutionMark <SolutionMark>k__BackingField;
    [NotNullAttribute]
public ISolutionMark SolutionMark { get; }
    protected SolutionFileProjectHostBase(ISolutionMark solutionMark, FileContentTracker fileContentTracker);
    [CompilerGeneratedAttribute]
public ISolutionMark get_SolutionMark();
    public sealed virtual void Reload(Lifetime lifetime, IReadOnlyCollection`1<ProjectHostReloadChange> changes, IReloadEventsConsumer reloadEventsConsumer, FileSystemPath logPath);
    protected abstract virtual void Reload(ProjectHostReloadChange change, FileSystemPath logPath);
    protected void Persist();
}
public class JetBrains.ProjectModel.ProjectsHost.Impl.SolutionFilterMark : SolutionMark {
    private SolutionFilterDefinition mySolutionFilter;
    public SolutionFilterDefinition FilterDefinition { get; }
    public IReadOnlyCollection`1<SolutionMarkContent> Content { get; }
    public SolutionFilterMark(SolutionFilterDefinition solutionFilterDefinition, IReadOnlyList`1<ISolutionConfigurationDefaults> solutionConfigurationDefaultsSet);
    public SolutionFilterDefinition get_FilterDefinition();
    public virtual SolutionStructureChange Update(SolutionMarkUpdateRequest request);
    public virtual IReadOnlyCollection`1<VirtualFileSystemPath> GetSolutionRelatedLocations();
    public virtual IReadOnlyCollection`1<VirtualFileSystemPath> GetProjectLocations();
    public virtual IReadOnlyCollection`1<SolutionMarkContent> get_Content();
    public virtual IProjectMark AddProject(ProjectDefinitionDescriptor descriptor, IProjectMark parent);
    public virtual IProjectMark RenameProject(IProjectMark project, string name, string path);
    public virtual void RemoveProject(IProjectMark project);
    public void AddProjectToFilter(IProjectMark projectMark);
    public void RemoveProjectFromFilter(IProjectMark projectMark);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool <GetProjectLocations>b__6_0(VirtualFileSystemPath x);
}
public class JetBrains.ProjectModel.ProjectsHost.Impl.SolutionMark : object {
    [NotNullAttribute]
private ISolutionConfigurationAndPlatformStore myConfigurationAndPlatformStore;
    [NotNullAttribute]
private VirtualFileSystemPath mySolutionFilePath;
    [NotNullAttribute]
private ISolutionDefinition mySolutionDefinition;
    [NotNullAttribute]
private ISolutionConfigurationAndPlatform myActiveConfigurationAndPlatform;
    public ISolutionDefinition Definition { get; }
    public string Name { get; }
    public VirtualFileSystemPath Location { get; }
    public ISolutionConfigurationAndPlatform ActiveConfigurationAndPlatform { get; }
    public ISolutionConfigurationAndPlatformStore ConfigurationAndPlatformStore { get; }
    public IReadOnlyCollection`1<SolutionMarkContent> Content { get; }
    public SolutionMark(VirtualFileSystemPath solutionFilePath, IReadOnlyList`1<ISolutionConfigurationDefaults> solutionConfigurationDefaultsSet);
    private ISolutionDefinition ReadSolutionDefinition();
    public sealed virtual ISolutionDefinition get_Definition();
    public sealed virtual string get_Name();
    public sealed virtual VirtualFileSystemPath get_Location();
    public sealed virtual ISolutionConfigurationAndPlatform get_ActiveConfigurationAndPlatform();
    public sealed virtual ISolutionConfigurationAndPlatformStore get_ConfigurationAndPlatformStore();
    public virtual IReadOnlyCollection`1<VirtualFileSystemPath> GetProjectLocations();
    public virtual IReadOnlyCollection`1<VirtualFileSystemPath> GetSolutionRelatedLocations();
    public virtual IReadOnlyCollection`1<SolutionMarkContent> get_Content();
    public virtual SolutionStructureChange Update(SolutionMarkUpdateRequest request);
    public void RenameSolution(string solutionName);
    public SolutionStructureChange Update(SolutionMarkUpdateRequest request, IForceUpdateProjectsPolicy additionalForceUpdateProjectsPolicy);
    public sealed virtual SolutionFormatVersion GetPlatformVersion();
    public virtual IProjectMark AddProject(ProjectDefinitionDescriptor descriptor, IProjectMark parent);
    public virtual IProjectMark RenameProject(IProjectMark project, string name, string path);
    public virtual void MoveProject(IProjectMark project, IProjectMark parent);
    public virtual void RemoveProject(IProjectMark project);
    private void RebuildSolutionConfigurationAndPlatformStore(ICollection`1<SolutionLoadDiagnostic> diagnostics);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private SolutionLoadError <Update>b__22_0(SolutionDefinitionError error);
    [CompilerGeneratedAttribute]
private SolutionLoadWarning <Update>b__22_1(SolutionDefinitionError warning);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.Impl.SolutionMarkFactory : object {
    private IReadOnlyList`1<ISolutionConfigurationDefaults> mySolutionConfigurationDefaultsSet;
    public SolutionMarkFactory(IReadOnlyList`1<ISolutionConfigurationDefaults> solutionConfigurationDefaultsSet);
    public virtual ISolutionMark Create(VirtualFileSystemPath location);
}
[ProjectsHostComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.Impl.SolutionStructureBuilder : object {
    [CompilerGeneratedAttribute]
private IImmutableList`1<ICustomProjectMarkProvider> <customProjectMarkProviders>P;
    public SolutionStructureBuilder(IImmutableList`1<ICustomProjectMarkProvider> customProjectMarkProviders);
    public SolutionStructureChange Update(ISolutionMark solutionMark, ISolutionDefinition solutionDefinition, ICollection`1<IProjectMark> existingProjectMarks, IForceUpdateProjectsPolicy forceUpdateProjectsPolicy, ICollection`1<SolutionLoadDiagnostic> diagnostics);
    private static bool IsProjectDefinitionChanged(IProjectDefinition oldProjectDefinition, IProjectDefinition newProjectDefinition);
    [NotNullAttribute]
private static Dictionary`2<Guid, Guid> GetNestedProjectMapping(ISolutionMark solutionMark, ISolutionDefinition solutionDefinition, List`1<SolutionLoadDiagnostic> diagnostics);
    [CompilerGeneratedAttribute]
internal static void <Update>g__AddStructureChange|2_0(IProjectMark projectMark, <>c__DisplayClass2_0& );
}
public class JetBrains.ProjectModel.ProjectsHost.Impl.SolutionStructureChange : object {
    [NotNullAttribute]
public ISolutionMark SolutionMark;
    [NotNullAttribute]
public ICollection`1<IProjectMark> AddedProjects;
    [NotNullAttribute]
public ICollection`1<IProjectMark> RemovedProjects;
    [NotNullAttribute]
public ICollection`1<IProjectMark> UpdatedProjects;
    [NotNullAttribute]
public ICollection`1<IProjectMark> UpdatedProjectsWithOnlyStructureChanges;
    [NotNullAttribute]
public ICollection`1<SolutionLoadDiagnostic> Diagnostics;
    public SolutionStructureChange(ISolutionMark solutionMark, ICollection`1<IProjectMark> addedProjects, ICollection`1<IProjectMark> removedProjects, ICollection`1<IProjectMark> updatedProjects, ICollection`1<IProjectMark> updatedProjectsWithOnlyStructureChanges, ICollection`1<SolutionLoadDiagnostic> diagnostics);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.ProjectsHost.Impl.SolutionStructureChangeExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IProjectMark FindOrCreateMark(SolutionStructureChange change, ICollection`1<IProjectMark> existingProjectMarks, Func`2<T, bool> finder, Func`2<ISolutionMark, T> constructor);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.Impl.SolutionStructureContainer : object {
    [NotNullAttribute]
private OneToListMap`2<Guid, IProjectMark> myProjectsGuidMap;
    [NotNullAttribute]
private OneToListMap`2<VirtualFileSystemPath, IProjectMark> myProjectsLocationMap;
    [NotNullAttribute]
private OneToListMap`2<string, IProjectMark> myProjectsNameMap;
    [NotNullAttribute]
private Dictionary`2<IProjectMark, ProjectMarkState> myStates;
    [NotNullAttribute]
private ViewableList`1<IProjectMark> myProjectMarks;
    [NotNullAttribute]
private Signal`1<IProjectMark> myProjectMarkStateChanged;
    public IViewableList`1<IProjectMark> ProjectMarks { get; }
    public ISource`1<IProjectMark> ProjectMarkStateChanged { get; }
    public SolutionStructureContainer(Lifetime lifetime);
    public sealed virtual IViewableList`1<IProjectMark> get_ProjectMarks();
    public sealed virtual ISource`1<IProjectMark> get_ProjectMarkStateChanged();
    public sealed virtual IReadOnlyList`1<IProjectMark> GetProjectsByGuid(Guid guid);
    public sealed virtual IReadOnlyList`1<IProjectMark> GetProjectsByLocation(VirtualFileSystemPath location);
    public sealed virtual IReadOnlyList`1<IProjectMark> GetProjectsByName(string name);
    public sealed virtual Nullable`1<ProjectMarkState> GetProjectState(IProjectMark project);
    public void Add(IProjectMark projectMark);
    public void Remove(IProjectMark projectMark);
    private void ProjectMarkOnUpdated(ProjectMarkChange change);
    public void SetState(IProjectMark projectMark, ProjectMarkState state);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <.ctor>b__6_0(Lifetime projectMarkLifetime, int _, IProjectMark projectMark);
}
public class JetBrains.ProjectModel.ProjectsHost.Impl.VirtualProjectMark : VirtualProjectMarkBase {
    private VirtualFileSystemPath myProjectFilePath;
    public string Name { get; }
    public VirtualFileSystemPath Location { get; }
    public Guid TypeGuid { get; }
    public bool IsSolutionFolder { get; }
    public VirtualProjectMark(ISolutionMark solutionMark, VirtualFileSystemPath projectFilePath);
    public virtual string get_Name();
    public virtual VirtualFileSystemPath get_Location();
    public virtual Guid get_TypeGuid();
    public virtual bool get_IsSolutionFolder();
}
public class JetBrains.ProjectModel.ProjectsHost.Impl.VirtualSolutionFolderMark : VirtualProjectMarkBase {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <Location>k__BackingField;
    public string Name { get; }
    public VirtualFileSystemPath Location { get; }
    public Guid TypeGuid { get; }
    public bool IsSolutionFolder { get; }
    public VirtualSolutionFolderMark(ISolutionMark solutionMark, string name, VirtualFileSystemPath location);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual VirtualFileSystemPath get_Location();
    public virtual Guid get_TypeGuid();
    public virtual bool get_IsSolutionFolder();
}
public class JetBrains.ProjectModel.ProjectsHost.Impl.VirtualSolutionMark : object {
    private VirtualFileSystemPath mySolutionDirectory;
    private List`1<VirtualFileSystemPath> myProjectFiles;
    [NotNullAttribute]
public IReadOnlyCollection`1<VirtualFileSystemPath> ProjectFiles { get; }
    public string Name { get; }
    public VirtualFileSystemPath Location { get; }
    public ISolutionConfigurationAndPlatform ActiveConfigurationAndPlatform { get; }
    public ISolutionConfigurationAndPlatformStore ConfigurationAndPlatformStore { get; }
    public VirtualSolutionMark(VirtualFileSystemPath solutionDirectory, IEnumerable`1<VirtualFileSystemPath> projectFiles);
    public IReadOnlyCollection`1<VirtualFileSystemPath> get_ProjectFiles();
    public sealed virtual string get_Name();
    public sealed virtual VirtualFileSystemPath get_Location();
    public sealed virtual IReadOnlyCollection`1<VirtualFileSystemPath> GetProjectLocations();
    public sealed virtual IReadOnlyCollection`1<VirtualFileSystemPath> GetSolutionRelatedLocations();
    public sealed virtual ISolutionConfigurationAndPlatform get_ActiveConfigurationAndPlatform();
    public sealed virtual ISolutionConfigurationAndPlatformStore get_ConfigurationAndPlatformStore();
    public sealed virtual SolutionFormatVersion GetPlatformVersion();
    public sealed virtual SolutionStructureChange Update(SolutionMarkUpdateRequest request);
    public sealed virtual IProjectMark AddProject(ProjectDefinitionDescriptor descriptor, IProjectMark parent);
    public sealed virtual IProjectMark RenameProject(IProjectMark project, string name, string path);
    private IProjectMark CreateVirtualProjectMark(string path);
    public sealed virtual void MoveProject(IProjectMark project, IProjectMark parent);
    public sealed virtual void RemoveProject(IProjectMark project);
    public virtual string ToString();
}
public interface JetBrains.ProjectModel.ProjectsHost.Impl.Wildcards.IWildcardContainer {
    public abstract virtual ICollection`1<IWildcardItemDescriptor> FindDescriptors(IProjectMark projectMark, VirtualFileSystemPath path, bool assumeNoExcludeByName);
    public abstract virtual ICollection`1<IWildcardItemDescriptor> FindDescriptorsByFolder(IProjectMark projectMark, VirtualFileSystemPath path);
}
public interface JetBrains.ProjectModel.ProjectsHost.Impl.Wildcards.IWildcardItemDescriptor {
}
public class JetBrains.ProjectModel.ProjectsHost.Impl.Wildcards.MatchResult : object {
    public static MatchResult FailResult;
    public bool Success;
    [CanBeNullAttribute]
public string RecursiveDir;
    private MatchResult(bool success, string recursiveDir);
    private static MatchResult();
    public static MatchResult AsSuccess(string recursiveDir);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.Impl.Wildcards.WildcardContainer : object {
    private object myLocker;
    private Dictionary`2<WildcardPattern, OneToListMap`2<IProjectMark, WildcardExcludeAndItem>> myStore;
    private OneToSetMap`2<VirtualFileSystemPath, IProjectMark> myFoldersToWatch;
    private Dictionary`2<IProjectMark, IFolderFilter> myFolderFilters;
    public void Register(IProjectMark projectMark, List`1<WildcardData> dataList, IFolderFilter folderFilter);
    public void Register(IProjectMark projectMark, VirtualFileSystemPath projectDirectory, List`1<WildcardData> dataList, IFolderFilter folderFilter);
    public void Cleanup(IProjectMark projectMark);
    public void CleanupExclude(IProjectMark projectMark, VirtualFileSystemPath path);
    private void FireOnFoldersToWatchChange(HashSet`1<VirtualFileSystemPath> addedPaths, HashSet`1<VirtualFileSystemPath> removedPaths);
    protected virtual void OnFoldersToWatchChange(HashSet`1<VirtualFileSystemPath> addedPaths, HashSet`1<VirtualFileSystemPath> removedPaths);
    public sealed virtual ICollection`1<IWildcardItemDescriptor> FindDescriptors(IProjectMark projectMark, VirtualFileSystemPath path, bool assumeNoExcludeByName);
    public sealed virtual ICollection`1<IWildcardItemDescriptor> FindDescriptorsByFolder(IProjectMark projectMark, VirtualFileSystemPath path);
    public ICollection`1<WildcardItemDescriptor> GetAffectedItems(IProjectMark projectMark, VirtualFileSystemPath path, bool assumeNoExcludeByName);
    public ICollection`1<WildcardItemDescriptor> GetAffectedItems(VirtualFileSystemPath path, bool assumeNoExcludeByName);
    private ICollection`1<WildcardItemDescriptor> GetAffectedItemsUnderLock(VirtualFileSystemPath path, bool assumeNoExcludeByName);
    public void Dump(StreamWriter writer);
    public ICollection`1<IProjectMark> GetProjectMarksToReloadBecauseOfMassiveChangesInFolder(VirtualFileSystemPath rootFolder);
    [CompilerGeneratedAttribute]
internal static int <Register>g__GetBuildActionPriority|5_0(BuildAction buildAction);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.ProjectsHost.Impl.Wildcards.WildcardContainerExtensions : object {
    [ExtensionAttribute]
public static bool Contains(IWildcardContainer wildcardContainer, IProjectMark projectMark, VirtualFileSystemPath path);
    [ExtensionAttribute]
public static bool Contains(IWildcardContainer wildcardContainer, IProjectItem projectItem);
    [ExtensionAttribute]
public static ICollection`1<IWildcardItemDescriptor> FindDescriptorsFor(IWildcardContainer wildcardContainer, IProjectMark projectMark, VirtualFileSystemPath path, BuildAction buildAction, bool assumeNoExcludeByName);
}
public class JetBrains.ProjectModel.ProjectsHost.Impl.Wildcards.WildcardData : object {
    [NotNullAttribute]
public WildcardPattern Include;
    [NotNullAttribute]
public IList`1<WildcardPattern> Excludes;
    [NotNullAttribute]
public IWildcardItemDescriptor Descriptor;
    [NotNullAttribute]
public TargetFrameworkId TargetFrameworkId;
    public WildcardData(WildcardPattern include, IList`1<WildcardPattern> excludes, IWildcardItemDescriptor descriptor, TargetFrameworkId targetFrameworkId);
}
public class JetBrains.ProjectModel.ProjectsHost.Impl.Wildcards.WildcardExcludeAndItem : object {
    [NotNullAttribute]
public IWildcardItemDescriptor Descriptor;
    [NotNullAttribute]
public ICollection`1<WildcardPattern> ExcludePatterns;
    public int Order;
    public WildcardExcludeAndItem(IWildcardItemDescriptor descriptor, ICollection`1<WildcardPattern> excludes, int order);
    public bool MatchWith(VirtualFileSystemPath path, bool assumeNoExcludeByName);
}
public class JetBrains.ProjectModel.ProjectsHost.Impl.Wildcards.WildcardItemDescriptor : object {
    [NotNullAttribute]
public IProjectMark ProjectMark;
    [NotNullAttribute]
public IWildcardItemDescriptor Descriptor;
    [CanBeNullAttribute]
public string RecursiveDir;
    public bool AcceptAnyExtension;
    public int Order;
    public WildcardItemDescriptor(IProjectMark projectMark, IWildcardItemDescriptor descriptor, string recursiveDir, bool acceptAnyExtension, int order);
}
public abstract class JetBrains.ProjectModel.ProjectsHost.Impl.Wildcards.WildcardPattern : object {
    public string ShortName { get; }
    public bool AcceptAnyExtension { get; }
    public abstract virtual string get_ShortName();
    public abstract virtual bool get_AcceptAnyExtension();
    public abstract virtual string GetLongestPrefixBeforeWildCard();
    public abstract virtual MatchResult MatchWith(VirtualFileSystemPath path);
    public abstract virtual bool Equals(object other);
    public abstract virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.ProjectModel.ProjectsHost.Impl.Wildcards.WildcardWellKnownFolderFilter : object {
    [NotNullAttribute]
protected VirtualFileSystemPath BaseDirectory;
    public WildcardWellKnownFolderFilter(VirtualFileSystemPath baseDirectory);
    public virtual bool Filter(VirtualFileSystemPath path);
    public bool FilterWellKnown(VirtualFileSystemPath path);
    private bool FilterByDirectoryName(VirtualFileSystemPath path, List`1<string> directories);
}
public interface JetBrains.ProjectModel.ProjectsHost.IProjectHost {
    public abstract virtual bool IsApplicable(IProjectMark projectMark);
    public abstract virtual void Reload(Lifetime lifetime, IReadOnlyCollection`1<ProjectHostReloadChange> changes, IReloadEventsConsumer reloadEventsConsumer, FileSystemPath logPath);
    public abstract virtual void Unload(IProjectMark projectMark);
    public abstract virtual void BeforeLoad(IProjectMark projectMark);
    public abstract virtual bool IsProjectAffectedByChange(IProjectMark parentProject, IProjectItem changedItem);
    public abstract virtual void AddItem(IProjectMark projectMark, IProjectItem projectItem, RelativeTo relativeTo);
    [NotNullAttribute]
public abstract virtual IProjectHostEditItemSession RemoveItem(IProjectMark projectMark, IProjectItem projectItem);
    [NotNullAttribute]
public abstract virtual IProjectHostEditItemSession RemoveAndExcludeItem(IProjectMark projectMark, IProjectItem projectItem);
    [NotNullAttribute]
public abstract virtual IProjectHostEditItemSession UpdateItem(IProjectMark projectMark, IProjectItem projectItem);
    public abstract virtual void AddReference(IProjectMark projectMark, IProjectToModuleReference reference);
    public abstract virtual void RemoveReference(IProjectMark projectMark, IProjectToModuleReference reference);
    public abstract virtual void RebindReference(IProjectMark projectMark, IProjectToModuleReference oldReference, IProjectToModuleReference newReference);
    [NotNullAttribute]
public abstract virtual IProjectHostEditItemSession UpdateReference(IProjectMark projectMark, IProjectToModuleReference reference);
    [NotNullAttribute]
public abstract virtual IProjectHostItemDescriptor Describe(IProjectMark projectMark, IProjectItem projectItem);
    public abstract virtual void ClearCaches();
}
public interface JetBrains.ProjectModel.ProjectsHost.IProjectHostEditItemSession {
    public abstract virtual void Commit();
}
public interface JetBrains.ProjectModel.ProjectsHost.IProjectHostItemDescriptor {
    public BuildAction BuildAction { get; }
    public Dictionary`2<string, string> Metadata { get; }
    public abstract virtual BuildAction get_BuildAction();
    public abstract virtual Dictionary`2<string, string> get_Metadata();
}
public interface JetBrains.ProjectModel.ProjectsHost.IProjectLoadRequester {
}
public interface JetBrains.ProjectModel.ProjectsHost.IProjectMark {
    [NotNullAttribute]
public ISolutionMark SolutionMark { get; }
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public VirtualFileSystemPath Location { get; }
    public Guid Guid { get; }
    public Guid TypeGuid { get; }
    [NotNullAttribute]
public string UniqueProjectName { get; }
    [CanBeNullAttribute]
public IProjectMark Parent { get; }
    [NotNullAttribute]
public IEnumerable`1<IProjectMark> Children { get; }
    [NotNullAttribute]
public IProjectConfigurationAndPlatform ActiveConfigurationAndPlatform { get; }
    public bool IsSolutionFolder { get; }
    public bool IsModifiable { get; }
    public ISource`1<ProjectMarkChange> Updated { get; }
    public abstract virtual ISolutionMark get_SolutionMark();
    public abstract virtual string get_Name();
    public abstract virtual VirtualFileSystemPath get_Location();
    public abstract virtual Guid get_Guid();
    public abstract virtual Guid get_TypeGuid();
    public abstract virtual string get_UniqueProjectName();
    public abstract virtual IProjectMark get_Parent();
    public abstract virtual IEnumerable`1<IProjectMark> get_Children();
    public abstract virtual IProjectConfigurationAndPlatform get_ActiveConfigurationAndPlatform();
    public abstract virtual bool get_IsSolutionFolder();
    public abstract virtual bool get_IsModifiable();
    public abstract virtual ISource`1<ProjectMarkChange> get_Updated();
    public abstract virtual void UpdateParent(IProjectMark parent);
    public abstract virtual void Detach();
    public abstract virtual void IterateChildren(TContext context, Action`2<IProjectMark, TContext> childProcessor);
}
public interface JetBrains.ProjectModel.ProjectsHost.IProjectMarkDependencyProvider {
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<IProjectMark> GetDependantProjects(IProjectMark projectMark);
}
[ZoneDefinitionAttribute]
public interface JetBrains.ProjectModel.ProjectsHost.IProjectsHostLiveTrackingZone {
}
public interface JetBrains.ProjectModel.ProjectsHost.IReloadEventsConsumer {
    public abstract virtual void OnStart(IProjectMark projectMark);
    public abstract virtual void OnFinish(IProjectMark projectMark);
}
public interface JetBrains.ProjectModel.ProjectsHost.ISolutionConfigurationAndPlatformStore {
    [NotNullAttribute]
public ICollection`1<SolutionConfigurationAndPlatform> ConfigurationsAndPlatforms { get; }
    public abstract virtual ICollection`1<SolutionConfigurationAndPlatform> get_ConfigurationsAndPlatforms();
    [NotNullAttribute]
public abstract virtual IProjectConfigurationAndPlatform GetForProject(IProjectDefinition projectDefinition, ISolutionConfigurationAndPlatform solutionConfiguration);
    [NotNullAttribute]
public abstract virtual ICollection`1<IProjectConfigurationAndPlatform> GetAllForProject(IProjectDefinition projectDefinition);
    [NotNullAttribute]
public abstract virtual ISolutionConfigurationAndPlatform Fix(ISolutionConfigurationAndPlatform configurationAndPlatform);
    public abstract virtual void Update(ISolutionMark solutionMark, ISolutionDefinition solutionDefinition, ICollection`1<SolutionLoadDiagnostic> diagnostics);
    [CanBeNullAttribute]
public abstract virtual string GetContent(ISolutionConfigurationAndPlatform solutionConfiguration);
}
public interface JetBrains.ProjectModel.ProjectsHost.ISolutionMark {
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public VirtualFileSystemPath Location { get; }
    [NotNullAttribute]
public ISolutionConfigurationAndPlatform ActiveConfigurationAndPlatform { get; }
    [NotNullAttribute]
public ISolutionConfigurationAndPlatformStore ConfigurationAndPlatformStore { get; }
    public abstract virtual string get_Name();
    public abstract virtual VirtualFileSystemPath get_Location();
    [NotNullAttribute]
public abstract virtual SolutionStructureChange Update(SolutionMarkUpdateRequest request);
    public abstract virtual SolutionFormatVersion GetPlatformVersion();
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<VirtualFileSystemPath> GetProjectLocations();
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<VirtualFileSystemPath> GetSolutionRelatedLocations();
    public abstract virtual ISolutionConfigurationAndPlatform get_ActiveConfigurationAndPlatform();
    public abstract virtual ISolutionConfigurationAndPlatformStore get_ConfigurationAndPlatformStore();
    [NotNullAttribute]
public abstract virtual IProjectMark AddProject(ProjectDefinitionDescriptor descriptor, IProjectMark parent);
    [NotNullAttribute]
public abstract virtual IProjectMark RenameProject(IProjectMark project, string name, string path);
    public abstract virtual void RemoveProject(IProjectMark project);
    public abstract virtual void MoveProject(IProjectMark project, IProjectMark parent);
}
public interface JetBrains.ProjectModel.ProjectsHost.ISolutionMarkWithContent {
    [NotNullAttribute]
public IReadOnlyCollection`1<SolutionMarkContent> Content { get; }
    public abstract virtual IReadOnlyCollection`1<SolutionMarkContent> get_Content();
}
public interface JetBrains.ProjectModel.ProjectsHost.ISolutionMarkWithDefinition {
    [NotNullAttribute]
public ISolutionDefinition Definition { get; }
    public abstract virtual ISolutionDefinition get_Definition();
}
public interface JetBrains.ProjectModel.ProjectsHost.ISolutionStructureContainer {
    [NotNullAttribute]
public IViewableList`1<IProjectMark> ProjectMarks { get; }
    [NotNullAttribute]
public ISource`1<IProjectMark> ProjectMarkStateChanged { get; }
    public abstract virtual IViewableList`1<IProjectMark> get_ProjectMarks();
    public abstract virtual ISource`1<IProjectMark> get_ProjectMarkStateChanged();
    [NotNullAttribute]
[PureAttribute]
public abstract virtual IReadOnlyList`1<IProjectMark> GetProjectsByGuid(Guid guid);
    [NotNullAttribute]
[PureAttribute]
public abstract virtual IReadOnlyList`1<IProjectMark> GetProjectsByLocation(VirtualFileSystemPath location);
    [NotNullAttribute]
[PureAttribute]
public abstract virtual IReadOnlyList`1<IProjectMark> GetProjectsByName(string name);
    [CanBeNullAttribute]
[PureAttribute]
public abstract virtual Nullable`1<ProjectMarkState> GetProjectState(IProjectMark project);
}
[ProjectsHostComponentAttribute("0")]
public class JetBrains.ProjectModel.ProjectsHost.LiveTracking.FileContentTracker : object {
    private static int CalculatingHash;
    protected static int MissingFileHash;
    protected static int EmptyFileHash;
    [NotNullAttribute]
private IFileSystemTracker myFileSystemTracker;
    [NotNullAttribute]
private Dictionary`2<VirtualFileSystemPath, int> myHashes;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    protected Lifetime Lifetime { get; }
    [NotNullAttribute]
protected ILogger Logger { get; }
    [NotNullAttribute]
protected ISolution Solution { get; }
    public FileContentTracker(Lifetime lifetime, ILogger logger, ISolution solution, IFileSystemTracker fileSystemTracker);
    [CompilerGeneratedAttribute]
protected Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
protected ISolution get_Solution();
    public virtual void Write(VirtualFileSystemPath location, string content);
    public virtual void ApplyChange(VirtualFileSystemPath location, SimpleTextDiff diff, Action`1<SimpleTextDiffConflictException> onError);
    public void AdviseFileChanges(Lifetime lifetime, VirtualFileSystemPath directoryToWatch, IReadOnlyCollection`1<VirtualFileSystemPath> locations);
    public bool OnChange(FileSystemChangeDelta delta);
    protected virtual void OnStartAsyncHashCalculating();
    protected virtual void OnFinishAsyncHashCalculating();
    private bool HandleChangeInLocation(VirtualFileSystemPath location, Func`2<VirtualFileSystemPath, int> hashFunc);
    protected bool IsContentHashChanged(VirtualFileSystemPath location, Func`2<VirtualFileSystemPath, int> hashFunc, Int32& oldHash, Nullable`1& newHash);
    protected void UpdateModificationStamp(VirtualFileSystemPath location, Func`2<VirtualFileSystemPath, int> hashFunc);
    private static int GetMissingFileHash(VirtualFileSystemPath location);
    protected static int CalculateFileContentHash(VirtualFileSystemPath location);
    protected static Tuple`2<LineEnding, Encoding> ReadLineEnding(VirtualFileSystemPath location);
    private static TValue SafeRead(VirtualFileSystemPath location, Func`2<VirtualFileSystemPath, TValue> func, TValue defaultValue);
}
[ProjectsHostComponentAttribute("0")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ProjectModel.ProjectsHost.LiveTracking.FileContentTrackerSolutionHost : FileContentTracker {
    private static string OperationName;
    private IProjectModelMonitor myProjectModelMonitor;
    private object myLocker;
    private int myCounter;
    public FileContentTrackerSolutionHost(Lifetime lifetime, ILogger logger, ISolution solution, IFileSystemTracker fileSystemTracker, IProjectModelMonitor projectModelMonitor);
    protected virtual void OnStartAsyncHashCalculating();
    protected virtual void OnFinishAsyncHashCalculating();
    [CompilerGeneratedAttribute]
private void <OnStartAsyncHashCalculating>b__5_0();
    [CompilerGeneratedAttribute]
private void <OnFinishAsyncHashCalculating>b__6_0();
}
public static class JetBrains.ProjectModel.ProjectsHost.Misc.WebProjectPropertyPaths : object {
    public static string ProjectPropertyGroupPath;
    public static string WebProjectPropertiesPath;
    public static string UseIISExpressServerPath;
    public static string UseIISServerPath;
    public static string UseCustomServerPath;
    public static string IISExpressSSLPortPath;
    public static string IISExpressAnonymousAuthenticationPath;
    public static string IISExpressWindowsAuthenticationPath;
    public static string IISExpressUseClassicPipelineModePath;
    public static string IISUrlPath;
    public static string OverrideIISAppRootUrlPath;
    public static string IISAppRootUrlPath;
    public static string NTLMAuthenticationPath;
    public static string DevelopmentServerPort;
    public static string CustomServerUrlPath;
    private static WebProjectPropertyPaths();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.ProjectsHost.Misc.XDocumentUtils : object {
    public static string CreatePath(String[] path);
    public static string AppendPath(string basePath, String[] path);
    public static string ParentPath(string path);
    public static string Name(string path);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static XElement FindElement(XDocument document, string path);
    [ExtensionAttribute]
[NotNullAttribute]
public static XElement FindOrCreateElement(XDocument document, string path, XElement element);
    private static XElement FindOrCreateElement(XDocument document, string path, bool create, XElement element);
    [ExtensionAttribute]
[NotNullAttribute]
public static XElement FindOrCreateElementWithAttribute(XDocument document, string path, string attributeName, string attributeValue, XElement context);
    private static XElement FindOrCreateElement(XContainer current, XNamespace namespace, String[] components, int index, bool create, string lineEnding);
    [ExtensionAttribute]
public static string GetValue(XDocument document, string path, string defaultValue);
    [ExtensionAttribute]
public static bool GetBoolValue(XDocument document, string path, string trueString);
    [ExtensionAttribute]
public static bool HasValue(XDocument document, string path);
    [CompilerGeneratedAttribute]
internal static XElement <FindOrCreateElement>g__MakeStep|8_0(XElement element, bool shouldCreate, <>c__DisplayClass8_0& );
}
public interface JetBrains.ProjectModel.ProjectsHost.MsBuild.Actions.IMsBuildUpdateMetadataSession {
    [CanBeNullAttribute]
public IDictionary`2<string, string> Metadata { get; public set; }
    public abstract virtual IDictionary`2<string, string> get_Metadata();
    public abstract virtual void set_Metadata(IDictionary`2<string, string> value);
}
public abstract class JetBrains.ProjectModel.ProjectsHost.MsBuild.Actions.MsBuildActionBase : object {
    [NotNullAttribute]
public MsBuildProjectHost Host;
    [NotNullAttribute]
public IProjectMark ProjectMark;
    [NotNullAttribute]
public MsBuildProjectModelSession Session { get; }
    protected MsBuildActionBase(MsBuildProjectHost host, IProjectMark projectMark);
    public MsBuildProjectModelSession get_Session();
    public sealed virtual void Commit();
    protected abstract virtual void DoCommit();
    [CompilerGeneratedAttribute]
private void <Commit>b__5_0(MsBuildProjectModelSession _);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.ProjectsHost.MsBuild.Actions.MsBuildActionExtensions : object {
    public static string SharedProjectItemPrefix;
    public static HashSet`1<string> WellKnownMetadata;
    private static HashSet`1<string> ourCanBeEmptyMetadata;
    private static MsBuildActionExtensions();
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetActualEvaluatedInclude(IProjectItem projectItem);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetActualUnevaluatedInclude(IProjectItem projectFile);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetActualItemType(IProjectItem projectItem);
    [ExtensionAttribute]
[NotNullAttribute]
public static List`1<RdItemMetadata> GetActualMetadata(IProjectItem projectItem);
    private static bool ShouldAttachLinkMetadata(IProjectItem projectItem);
    [ExtensionAttribute]
[NotNullAttribute]
public static RdProjectItemIdentity GetProjectItemIdentity(IProjectItem projectItem);
    [ExtensionAttribute]
[NotNullAttribute]
public static RdProjectItemIdentity GetProjectItemIdentity(IProjectToModuleReference reference);
    [ExtensionAttribute]
public static void IterateAllUnder(MsBuildProjectModelSession session, IProjectMark projectMark, string evaluatedInclude, Action`1<RdProjectItem> processor);
    [ExtensionAttribute]
public static void IterateAllUnder(IEnumerable`1<RdProjectItem> items, string evaluatedInclude, Action`1<RdProjectItem> processor);
    [ExtensionAttribute]
public static bool AnyProjectItem(MsBuildProjectModelSession session, IProjectMark projectMark, string itemType, string evaluatedInclude);
    [ExtensionAttribute]
public static bool AnyProjectItem(IEnumerable`1<RdProjectItem> items, string itemType, string evaluatedInclude);
    [ExtensionAttribute]
public static bool EqualsEvaluatedInclude(RdProjectItem item, string evaluatedInclude, bool ignoreCase);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static string RemoveDirectory(RdProjectItem item, string directory);
    [ExtensionAttribute]
public static bool LocatesInDirectory(RdProjectItem item, string directory);
    [ExtensionAttribute]
public static string NormalizePathSeparators(string value);
    [ExtensionAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
public static List`1<string> GetWildcardItemTypesAffectedByFolder(MsBuildProjectHost host, IProjectMark projectMark, VirtualFileSystemPath folderLocation);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static RdRelativeToContext GetRelativeTo(RelativeTo relativeTo);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static RdProjectWildcardItem GetWildcardItem(MsBuildProjectHost host, IProjectFile projectFile);
    public static bool ShouldFilterMetadata(RdItemMetadata metadata, Dictionary`2<string, string> defaultMetadataMap);
    [CompilerGeneratedAttribute]
[CanBeNullAttribute]
internal static RdProjectWildcardItem <GetWildcardItem>g__FindWildcardItemDescriptor|20_0(BuildAction buildAction, <>c__DisplayClass20_0& );
}
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Actions.MsBuildAddFileAction : MsBuildAddItemActionBase {
    [NotNullAttribute]
private IProject myProject;
    [NotNullAttribute]
private IProjectFile myProjectFile;
    [CanBeNullAttribute]
private RelativeTo myRelativeTo;
    public MsBuildAddFileAction(MsBuildProjectHost host, IProjectMark projectMark, IProjectFile projectFile, RelativeTo relativeTo);
    protected virtual void AddItem();
    private void FilterMetadata(RdProjectWildcardItem wildcardItem, List`1<RdItemMetadata> metadata);
}
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Actions.MsBuildAddFolderAction : MsBuildAddItemActionBase {
    [NotNullAttribute]
private IProjectFolder myProjectFolder;
    [CanBeNullAttribute]
private RelativeTo myRelativeTo;
    public MsBuildAddFolderAction(MsBuildProjectHost host, IProjectMark projectMark, IProjectFolder projectFolder, RelativeTo relativeTo);
    protected virtual void AddItem();
    [CompilerGeneratedAttribute]
private void <AddItem>b__3_0(IMsBuildProjectModificationListener x);
}
public abstract class JetBrains.ProjectModel.ProjectsHost.MsBuild.Actions.MsBuildAddItemActionBase : MsBuildActionBase {
    [CanBeNullAttribute]
private IProjectFolder myParentFolder;
    protected MsBuildAddItemActionBase(MsBuildProjectHost host, IProjectMark projectMark, IProjectItem projectItem);
    protected sealed virtual void DoCommit();
    protected abstract virtual void AddItem();
}
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Actions.MsBuildAddOrUpdateReference : object {
    private static Func`3<VirtualFileSystemPath, AssemblyNameInfo, string> ourDefaultAssemblyReferenceName;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private IProject myProject;
    [NotNullAttribute]
private IReadOnlyCollection`1<RdItemMetadata> myRequestedMetadata;
    [NotNullAttribute]
private IProjectMark myProjectMark;
    [NotNullAttribute]
private MsBuildProjectModelSession mySession;
    [NotNullAttribute]
private Func`3<VirtualFileSystemPath, AssemblyNameInfo, string> myAssemblyNameFunc;
    [NotNullAttribute]
private Action`2<string, string> myOnReferenceAdd;
    [CanBeNullAttribute]
private RdProjectItemIdentity myOriginalIdentity;
    [NotNullAttribute]
private VirtualFileSystemPath ProjectFolderLocation { get; }
    public MsBuildAddOrUpdateReference(ISolution solution, IProject project, IReadOnlyCollection`1<RdItemMetadata> requestedMetadata, MsBuildProjectModelSession session, Func`3<VirtualFileSystemPath, AssemblyNameInfo, string> assemblyNameFunc, Action`2<string, string> onReferenceAdd, RdProjectItemIdentity originalIdentity);
    private static MsBuildAddOrUpdateReference();
    private VirtualFileSystemPath get_ProjectFolderLocation();
    public void AddAssemblyReference(AssemblyNameInfo assemblyName, VirtualFileSystemPath location, string condition);
    public void AddProjectReference(IProject referencedProject);
    public void AddComReference(string name, Guid guid, int majorVersion, int minorVersion, int lcid);
    private void AddOrUpdateItem(string itemType, string unevaluatedInclude, List`1<RdItemMetadata> metadata, string condition);
}
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Actions.MsBuildAddOrUpdateReferenceAction : MsBuildActionBase {
    [NotNullAttribute]
private IProjectToModuleReference myReference;
    [CanBeNullAttribute]
private RdProjectItemIdentity myOriginalReferenceIdentity;
    public MsBuildAddOrUpdateReferenceAction(MsBuildProjectHost host, IProjectMark projectMark, IProjectToModuleReference reference, RdProjectItemIdentity originalReferenceIdentity);
    protected virtual void DoCommit();
    private List`1<RdItemMetadata> GetRequestedMetadata();
    [CompilerGeneratedAttribute]
internal static void <GetRequestedMetadata>g__AddMetadata|4_0(KeyValuePair`2<string, string> metadataPair, <>c__DisplayClass4_0& );
}
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Actions.MsBuildReferenceMatcher : object {
    [NotNullAttribute]
private IProjectMark myProjectMark;
    [NotNullAttribute]
private MsBuildProjectModelSession mySession;
    public MsBuildReferenceMatcher(IProjectMark projectMark, MsBuildProjectModelSession session);
    public IReadOnlyCollection`1<RdProjectItemIdentity> MatchByAssemblyName(string name);
}
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Actions.MsBuildRemoveFileAction : MsBuildRemoveItemActionBase {
    [NotNullAttribute]
private RdProjectItemIdentity myOriginalIdentity;
    [NotNullAttribute]
private VirtualFileSystemPath myOriginalLocation;
    private bool myExcludeWildcard;
    public MsBuildRemoveFileAction(MsBuildProjectHost host, IProjectMark projectMark, IProjectFile projectFile, bool excludeWildcard);
    protected virtual void RemoveItem();
    [CompilerGeneratedAttribute]
private void <RemoveItem>b__4_0(IMsBuildProjectModificationListener x);
}
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Actions.MsBuildRemoveFolderAction : MsBuildRemoveItemActionBase {
    private bool myExcludeWildcard;
    private VirtualFileSystemPath myOriginalLocation;
    private VirtualFileSystemPath myProjectLocation;
    private RdProjectItemIdentity myOriginalIdentity;
    public MsBuildRemoveFolderAction(MsBuildProjectHost host, IProjectMark projectMark, IProjectFolder projectFolder, bool excludeWildcard);
    protected virtual void RemoveItem();
    [CompilerGeneratedAttribute]
private void <RemoveItem>b__5_0(IMsBuildProjectModificationListener x);
    [CompilerGeneratedAttribute]
private void <RemoveItem>b__5_1(RdProjectItem item);
}
public abstract class JetBrains.ProjectModel.ProjectsHost.MsBuild.Actions.MsBuildRemoveItemActionBase : MsBuildActionBase {
    [CanBeNullAttribute]
private ProjectFolderImpl myParentFolder;
    [NotNullAttribute]
private string myOriginalUnevaluatedInclude;
    [NotNullAttribute]
private HashSet`1<VirtualFileSystemPath> myIgnoreDirectories;
    protected MsBuildRemoveItemActionBase(MsBuildProjectHost host, IProjectMark projectMark, IProjectItem projectItem);
    protected virtual void DoCommit();
    protected abstract virtual void RemoveItem();
    protected bool ShouldTrackItem(VirtualFileSystemPath path);
}
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Actions.MsBuildRemoveReferenceAction : MsBuildActionBase {
    private IProjectToModuleReference myReference;
    public MsBuildRemoveReferenceAction(MsBuildProjectHost host, IProjectMark projectMark, IProjectToModuleReference reference);
    protected virtual void DoCommit();
}
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Actions.MsBuildUpdateFileAction : MsBuildActionBase {
    private static List`1<string> ourAutoUpdateMetadataNamesList;
    private IProjectFile myProjectFile;
    private RdProjectItemIdentity myOriginalIdentity;
    private string myOriginalName;
    private string myOriginalInclude;
    private VirtualFileSystemPath myOriginalLocation;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Metadata>k__BackingField;
    public IDictionary`2<string, string> Metadata { get; public set; }
    public MsBuildUpdateFileAction(MsBuildProjectHost host, IProjectMark projectMark, IProjectFile projectFile);
    private static MsBuildUpdateFileAction();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_Metadata();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Metadata(IDictionary`2<string, string> value);
    protected virtual void DoCommit();
}
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Actions.MsBuildUpdateFolderAction : MsBuildActionBase {
    private IProjectFolder myProjectFolder;
    private RdProjectItemIdentity myOriginalIdentity;
    private VirtualFileSystemPath myOriginalLocation;
    public MsBuildUpdateFolderAction(MsBuildProjectHost host, IProjectMark projectMark, IProjectFolder projectFolder);
    protected virtual void DoCommit();
}
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Actions.MsBuildUpdateReferenceMetadataAction : MsBuildActionBase {
    private RdProjectItemIdentity myOriginalIdentity;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Metadata>k__BackingField;
    public IDictionary`2<string, string> Metadata { get; public set; }
    public MsBuildUpdateReferenceMetadataAction(MsBuildProjectHost host, IProjectMark projectMark, IProjectToModuleReference reference);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_Metadata();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Metadata(IDictionary`2<string, string> value);
    protected virtual void DoCommit();
}
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.BuildActionFilteringRule : object {
    [CompilerGeneratedAttribute]
private BuildAction <FilteredBuildAction>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildAction <ExistingBuildAction>k__BackingField;
    [NotNullAttribute]
public BuildAction FilteredBuildAction { get; }
    [NotNullAttribute]
public BuildAction ExistingBuildAction { get; }
    public BuildActionFilteringRule(BuildAction filteredBuildAction, BuildAction existingBuildAction);
    [CompilerGeneratedAttribute]
public BuildAction get_FilteredBuildAction();
    [CompilerGeneratedAttribute]
public BuildAction get_ExistingBuildAction();
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Diagnostic.Components.ProjectConfigurationValidator : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IApplicableProvider> <applicableProviders>P;
    private static string TargetName;
    public ProjectConfigurationValidator(IEnumerable`1<IApplicableProvider> applicableProviders);
    public sealed virtual ICollection`1<ProjectLoadDiagnostic> CollectDiagnostic(IProjectMark projectMark, MsBuildProject msBuildProject);
    private bool IsApplicable(IProjectMark projectMark);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Diagnostic.Components.ProjectFileToolsetValidator : object {
    public sealed virtual ICollection`1<ProjectLoadDiagnostic> CollectDiagnostic(IProjectMark projectMark, MsBuildProject msBuildProject);
}
[ShellComponentAttribute("10")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Diagnostic.Components.ProjectImportsValidator : object {
    private IImmutableList`1<IAnalyzer> myAnalyzers;
    private Regex myPathMatcher;
    private static string ImportElementRef;
    public ProjectImportsValidator(IImmutableList`1<IAnalyzer> analyzers);
    public sealed virtual ICollection`1<ProjectLoadDiagnostic> CollectDiagnostic(IProjectMark projectMark, MsBuildProject msBuildProject);
}
[ShellComponentAttribute("10")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Diagnostic.Components.TargetFrameworkValidator : object {
    private IImmutableList`1<IAnalyzer> myAnalyzers;
    private Regex myTargetFrameworkParser;
    private static string TargetName;
    public TargetFrameworkValidator(IImmutableList`1<IAnalyzer> analyzers);
    public sealed virtual ICollection`1<ProjectLoadDiagnostic> CollectDiagnostic(IProjectMark projectMark, MsBuildProject msBuildProject);
    private void ProcessDiagnostics(IProjectMark projectMark, RdLoadError rdError, HashSet`1<ProjectLoadDiagnostic> diagnostics);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Diagnostic.Components.WorkloadsValidator : object {
    public sealed virtual ICollection`1<ProjectLoadDiagnostic> CollectDiagnostic(IProjectMark projectMark, MsBuildProject msBuildProject);
}
public interface JetBrains.ProjectModel.ProjectsHost.MsBuild.Diagnostic.IMsBuildConnectionDiagnostic {
    [NotNullAttribute]
public IBuildTool BuildTool { get; }
    [NotNullAttribute]
public RuntimeAndToolset RuntimeAndToolset { get; }
    public abstract virtual IBuildTool get_BuildTool();
    public abstract virtual RuntimeAndToolset get_RuntimeAndToolset();
}
public interface JetBrains.ProjectModel.ProjectsHost.MsBuild.Diagnostic.IMsBuildProjectLoadDiagnosticProvider {
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual ICollection`1<ProjectLoadDiagnostic> CollectDiagnostic(IProjectMark projectMark, MsBuildProject msBuildProject);
}
public interface JetBrains.ProjectModel.ProjectsHost.MsBuild.Diagnostic.IMsBuildToolDiagnostic {
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Diagnostic.MsBuildDiagnosticDecorator : GenericDiagnosticDecorator`1<MsBuildProjectLoadDiagnosticBase> {
    protected virtual void Process(MsBuildProjectLoadDiagnosticBase diagnostic);
    protected virtual string PresentErrorCode(string code);
}
public abstract class JetBrains.ProjectModel.ProjectsHost.MsBuild.Diagnostic.MsBuildProjectLoadDiagnosticBase : ProjectLoadDiagnostic {
    [CompilerGeneratedAttribute]
private RdLoadError <LoadError>k__BackingField;
    [NotNullAttribute]
public RdLoadError LoadError { get; }
    protected MsBuildProjectLoadDiagnosticBase(IProjectMark projectMark, RdLoadError rdLoadError, string title, DiagnosticAttentionKind kind);
    [CompilerGeneratedAttribute]
public RdLoadError get_LoadError();
    [NotNullAttribute]
private static string Present(RdLoadError error);
}
[SolutionInstanceComponentAttribute("0")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Diagnostic.MsBuildProjectLoadDiagnosticProvider : object {
    [CompilerGeneratedAttribute]
private ILogger <logger>P;
    [CompilerGeneratedAttribute]
private IImmutableList`1<IMsBuildProjectLoadDiagnosticProvider> <providers>P;
    public MsBuildProjectLoadDiagnosticProvider(ILogger logger, IImmutableList`1<IMsBuildProjectLoadDiagnosticProvider> providers);
    public ICollection`1<ProjectLoadDiagnostic> CollectDiagnostic(IProjectMark projectMark, MsBuildProject msBuildProject);
}
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Diagnostic.MsBuildProjectLoadError : MsBuildProjectLoadDiagnosticBase {
    public MsBuildProjectLoadError(IProjectMark projectMark, RdLoadError rdLoadError);
}
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Diagnostic.MsBuildProjectLoadWarning : MsBuildProjectLoadDiagnosticBase {
    public MsBuildProjectLoadWarning(IProjectMark projectMark, RdLoadError rdLoadError);
}
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Diagnostic.MsBuildProjectLoadWithMissingPackages : MsBuildProjectLoadDiagnosticBase {
    public MsBuildProjectLoadWithMissingPackages(IProjectMark projectMark, RdLoadError rdLoadError);
    [NotNullAttribute]
public static string MakeTitle(IProjectMark projectMark);
}
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Diagnostic.MsBuildProjectReferenceError : MsBuildProjectLoadError {
    public MsBuildProjectReferenceError(IProjectMark projectMark, RdLoadError rdLoadError);
}
public static class JetBrains.ProjectModel.ProjectsHost.MsBuild.Diagnostic.MsBuildTargetErrorAnalyzer : object {
    public static ISet`1<string> IncompatibleMSBuildCodes;
    private static MsBuildTargetErrorAnalyzer();
    [CanBeNullAttribute]
public static MsBuildProjectLoadDiagnosticBase AnalyzeTargetError(IProjectMark projectMark, MsBuildProjectPart projectPart, RdLoadError targetError, Regex criticalTargetRegExp);
    public static bool IsCriticalError(RdLoadError targetError);
    public static bool IsProjectReferenceError(RdLoadError targetError);
    public static bool IsMissingPackages(RdLoadError targetError);
    public static bool IsIgnorableError(MsBuildProjectPart projectPart, RdLoadError targetError);
    public static bool IsResolveComReferencesError(RdLoadError targetError);
    public static bool IsResolvedMissingPackage(MsBuildProjectPart projectPart, RdLoadError targetError);
}
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Diagnostic.MsBuildUnsupportedNetSdkDiagnostic : MsBuildProjectLoadError {
    public MsBuildUnsupportedNetSdkDiagnostic(IProjectMark projectMark, RdLoadError rdLoadError);
}
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Diagnostic.NoMsBuildConnectionError : ProjectEnvironmentLoadDiagnostic {
    [CompilerGeneratedAttribute]
private IBuildTool <BuildTool>k__BackingField;
    [CompilerGeneratedAttribute]
private RuntimeAndToolset <RuntimeAndToolset>k__BackingField;
    public IBuildTool BuildTool { get; }
    public RuntimeAndToolset RuntimeAndToolset { get; }
    public NoMsBuildConnectionError(IProjectMark projectMark, IBuildTool buildTool, RuntimeAndToolset runtimeAndToolset);
    [CompilerGeneratedAttribute]
public sealed virtual IBuildTool get_BuildTool();
    [CompilerGeneratedAttribute]
public sealed virtual RuntimeAndToolset get_RuntimeAndToolset();
}
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Diagnostic.NoMsBuildStartupError : ProjectEnvironmentLoadDiagnostic {
    [CompilerGeneratedAttribute]
private IBuildTool <BuildTool>k__BackingField;
    [CompilerGeneratedAttribute]
private RuntimeAndToolset <RuntimeAndToolset>k__BackingField;
    public IBuildTool BuildTool { get; }
    public RuntimeAndToolset RuntimeAndToolset { get; }
    public NoMsBuildStartupError(IProjectMark projectMark, IBuildTool buildTool, RuntimeAndToolset runtimeAndToolset);
    [CompilerGeneratedAttribute]
public sealed virtual IBuildTool get_BuildTool();
    [CompilerGeneratedAttribute]
public sealed virtual RuntimeAndToolset get_RuntimeAndToolset();
}
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Diagnostic.NoMsBuildToolsError : ProjectEnvironmentLoadDiagnostic {
    public NoMsBuildToolsError(IProjectMark projectMark);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.AvaloniaMsBuildActionFilter : object {
    public sealed virtual IEnumerable`1<BuildActionFilteringRule> CreateRules();
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.CSharpProjectPropertiesBuilder : ManagedProjectPropertiesBuilder {
    [NotNullAttribute]
private ConcurrentDictionary`2<VirtualFileSystemPath, Version2> myPathToRoslynVersion;
    [NotNullAttribute]
private static Version ourVersion3;
    [NotNullAttribute]
private static Version ourVersion2_1;
    [NotNullAttribute]
private static Version ourVersion5;
    [NotNullAttribute]
private static Version ourVersion6;
    [NotNullAttribute]
private static Version ourVersion7;
    public CSharpProjectPropertiesBuilder(ProjectPropertiesRequests projectPropertiesRequests);
    private static CSharpProjectPropertiesBuilder();
    public virtual bool IsApplicable(IProjectProperties projectProperties);
    protected virtual void BuildProjectConfiguration(IProjectMark projectMark, MsBuildProjectPart project, ManagedProjectConfigurationBase configuration);
    [CanBeNullAttribute]
[PureAttribute]
private string TryGetLangVersionOverrideByTargetFramework(CSharpProjectConfiguration configuration);
    [PureAttribute]
private bool IsCompilerSupportsCSharp8(ICSharpProjectConfiguration configuration);
    [PureAttribute]
private bool IsCompilerSupportsCSharp9(ICSharpProjectConfiguration configuration);
    [PureAttribute]
private bool IsCompilerSupportsCSharp10(ICSharpProjectConfiguration configuration);
    [PureAttribute]
private bool IsCompilerSupportsCSharp11(ICSharpProjectConfiguration configuration);
    [PureAttribute]
private bool IsCompilerSupportsCSharp12(ICSharpProjectConfiguration configuration);
    [CanBeNullAttribute]
[PureAttribute]
private Version2 TryGetRoslynVersion(ICSharpProjectConfiguration configuration);
}
[ShellComponentAttribute("16")]
internal class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.CSharpProjectTypeGuidProvider : object {
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.CSharpProjectTypeGuidProvider/<GetProjectTypeGuids>d__0")]
public sealed virtual IEnumerable`1<Guid> GetProjectTypeGuids(MsBuildProject msBuildProject);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.DefaultMsBuildActionFilter : object {
    public sealed virtual IEnumerable`1<BuildActionFilteringRule> CreateRules();
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.JavaScriptMetroStyleProjectPropertiesBuilder : MsBuildProjectPropertiesBuilderBase {
    public virtual bool IsApplicable(IProjectProperties projectProperties);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.LiveXamlBuildActionsProvider : MsBuildDefaultBuildActionsProvider {
    public IEnumerable`1<BuildAction> DefaultBuildActions { get; }
    public virtual bool IsApplicable(IProjectProperties projectProperties);
    public virtual IEnumerable`1<BuildAction> get_DefaultBuildActions();
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.LiveXamlDescriptorPatcher : object {
    private ILogger myLogger;
    public LiveXamlDescriptorPatcher(ILogger logger);
    public sealed virtual void Patch(IProjectDescriptor descriptor);
    private void FixupBuildActions(TargetFrameworkId targetFrameworkId, IProjectDescriptor descriptor, IEnumerable`1<string> generatedFiles);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.ManagedProjectFilePropertiesBuilder : MsBuildProjectFilePropertiesBuilderBase {
    private ProjectPropertiesRequests myRequests;
    public ManagedProjectFilePropertiesBuilder(ProjectPropertiesRequests requests);
    public virtual bool IsApplicable(IProjectProperties projectProperties);
    public virtual bool BuildProjectFileProperties(IProjectProperties projectProperties, IProjectFileProperties projectFileProperties, MsBuildProjectItem projectItem);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.ManagedProjectPropertiesBuilder : MsBuildProjectPropertiesBuilderBase {
    private ProjectPropertiesRequests myProjectPropertiesRequests;
    public ManagedProjectPropertiesBuilder(ProjectPropertiesRequests projectPropertiesRequests);
    public virtual bool IsApplicable(IProjectProperties projectProperties);
    public sealed virtual void BuildProjectProperties(IProjectMark projectMark, IProjectProperties projectProperties, MsBuildProject msBuildProject);
    protected virtual void BuildProjectBuildSettings(MsBuildProject project, ManagedProjectBuildSettings buildSettings);
    protected virtual void BuildProjectConfiguration(IProjectMark projectMark, MsBuildProjectPart project, ManagedProjectConfigurationBase configuration);
    private static void ReadWinMdPath(MsBuildProjectPart project, ManagedProjectConfigurationBase configuration, VirtualFileSystemPath projectRoot);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.MauiBuildActionsProvider : MsBuildDefaultBuildActionsProvider {
    public IEnumerable`1<BuildAction> DefaultBuildActions { get; }
    public virtual bool IsApplicable(IProjectProperties projectProperties);
    public virtual IEnumerable`1<BuildAction> get_DefaultBuildActions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.MauiPlatformServiceFromMsBuild : MauiPlatformService {
    [CompilerGeneratedAttribute]
private ILogger <logger>P;
    private object myLocker;
    private Dictionary`2<IProjectMark, OneToListMap`2<TargetFrameworkId, MauiPlatformInfo>> myPlatformInfos;
    private OneToSetMap`2<IProjectMark, VirtualFileSystemPath> myPlatformFolders;
    public MauiPlatformServiceFromMsBuild(ILogger logger);
    [NullableContextAttribute("2")]
public sealed virtual void OnProjectLoaded(IProjectMark projectMark, IProjectDescriptor projectDescriptor, MsBuildProject msBuildProject);
    protected virtual void OnPlatformFoldersChanged(IProjectMark projectMark, HashSet`1<VirtualFileSystemPath> platformFolders);
    public virtual MauiPlatformInfo GetTargetPlatformIdentifier(IProject project, VirtualFileSystemPath location, TargetFrameworkId targetFrameworkId);
    public virtual bool IsPlatformFolder(IProjectFolder projectFolder);
}
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.MsBuildProjectDependenciesBuilder : object {
    private MsBuildProject myMsBuildProject;
    public MsBuildProjectDependenciesBuilder(MsBuildProject msBuildProject);
    public IProjectDependenciesDescriptor BuildProjectDependencies();
    private static bool Filter(string packageName);
    private static Nullable`1<ProjectDependencyType> ParseProjectDependencyType(string value);
    private static String[] CollectTargetFrameworkPresentations(TargetFrameworkId targetFramework);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.MsBuildProjectExtensions : object {
    [ExtensionAttribute]
public static bool IsDotNetCoreProject(MsBuildProject msBuildProject);
    [ExtensionAttribute]
public static bool IsFromSharedProjectItemsFile(MsBuildProjectItem item);
    [ExtensionAttribute]
public static bool IsFromDotNetCoreSdk(MsBuildProjectItem item);
}
[ShellFeaturePartAttribute("16")]
internal class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.MsBuildProjectPropertiesFactoryBase : object {
    public virtual bool IsApplicable(Guid projectTypeGuid);
    public virtual IProjectProperties CreateProjectProperties(ProjectPropertiesFactory factory, MsBuildProject msBuildProject, ProjectPropertiesFactoryParameters parameters);
}
[ShellFeaturePartAttribute("16")]
internal class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.MsBuildSqlServerDatabaseProjectPropertiesFactory : MsBuildProjectPropertiesFactoryBase {
    public virtual bool IsApplicable(Guid projectTypeGuid);
    public virtual IProjectProperties CreateProjectProperties(ProjectPropertiesFactory factory, MsBuildProject msBuildProject, ProjectPropertiesFactoryParameters parameters);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.NodeJsProjectPropertiesBuilder : MsBuildProjectPropertiesBuilderBase {
    private ProjectPropertiesRequests myProjectPropertiesRequests;
    public NodeJsProjectPropertiesBuilder(ProjectPropertiesRequests projectPropertiesRequests);
    public virtual bool IsApplicable(IProjectProperties projectProperties);
    public virtual void BuildProjectProperties(IProjectMark projectMark, IProjectProperties projectProperties, MsBuildProject msBuildProject);
}
[ProjectsHostComponentAttribute("0")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.ProjectReferencesBuilder : object {
    private ILogger myLogger;
    private PlatformManager myPlatformManager;
    private AssemblyInfoDatabase myAssemblyInfoDatabase;
    public ProjectReferencesBuilder(PlatformManager platformManager, AssemblyInfoDatabase assemblyInfoDatabase, ILogger logger);
    public virtual bool IsApplicable(IProjectMark projectMark, IProjectProperties projectProperties);
    public sealed virtual IProjectReferencesDescriptor BuildProjectReferences(IProjectMark projectMark, IProjectProperties projectProperties, MsBuildProject msBuildProject, Action`1<ProjectLoadDiagnostic> onProjectLoadDiagnostic);
    private MsBuildProjectItem MatchToComReference(string comReferenceName, List`1<ReferenceItem> referenceItems);
    private MsBuildProjectItem MatchToReference(VirtualFileSystemPath referencePath, List`1<ReferenceItem> referenceItems);
    public static IProjectReferenceProperties GetProperties(MsBuildProjectItem item, bool isHidden, IProjectElementOrigin origin);
    private MsBuildProjectItem FindMatchingProjectReferences(MsBuildProjectItem item, IReadOnlyCollection`1<MsBuildProjectItem> projectReferenceItems);
    [CanBeNullAttribute]
private string GetOriginalComReferenceName(MsBuildProjectItem item);
    private void AddReference(VirtualFileSystemPath path, OneToListMap`2<string, Pair`2<IProjectReferenceDescriptor, IProjectReferenceProperties>> referencesByAssemblyNameIgnoreCase, IProjectReferenceProperties properties, TargetFrameworkId targetFrameworkId);
    private void AddSdkReference(VirtualFileSystemPath path, List`1<Pair`2<IProjectReferenceDescriptor, IProjectReferenceProperties>> sdkReferences, IProjectReferenceProperties properties, TargetFrameworkId targetFrameworkId);
    private static VirtualFileSystemPath ToPath(string pathPart, VirtualFileSystemPath directory);
    private VirtualFileSystemPath TryFindFrameworkAssembly(string assemblyName, List`1<VirtualFileSystemPath> targetFrameworkDirectories);
    protected virtual void ProcessNoStdLibProperty(bool noStdLibProperty, OneToListMap`2<string, Pair`2<IProjectReferenceDescriptor, IProjectReferenceProperties>> referencesByAssemblyNameIgnoreCase, IProjectProperties projectProperties, TargetFrameworkId targetFrameworkId, string targetFrameworkDirectoryProperty);
    protected void AddReferenceIfNotExists(VirtualFileSystemPath referencePath, OneToListMap`2<string, Pair`2<IProjectReferenceDescriptor, IProjectReferenceProperties>> referencesByAssemblyNameIgnoreCase, TargetFrameworkId targetFrameworkId);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.PyStructurePatcherFactory : MsBuildStructurePatcherFactory {
    public static string ProjectHomeProperty;
    public virtual bool IsApplicable(IProjectMark projectMark);
    public virtual MsBuildStructurePatcher Create(IProjectMark projectMark, MsBuildProjectPart projectPart);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.RazorBuildActionsProvider : MsBuildDefaultBuildActionsProvider {
    public IEnumerable`1<BuildAction> DefaultBuildActions { get; }
    public virtual bool IsApplicable(IProjectProperties projectProperties);
    public virtual IEnumerable`1<BuildAction> get_DefaultBuildActions();
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.SpecFlowBuildActionsProvider : MsBuildDefaultBuildActionsProvider {
    public IEnumerable`1<BuildAction> DefaultBuildActions { get; }
    public virtual bool IsApplicable(IProjectProperties projectProperties);
    public virtual IEnumerable`1<BuildAction> get_DefaultBuildActions();
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.VBProjectPropertiesBuilder : ManagedProjectPropertiesBuilder {
    public VBProjectPropertiesBuilder(ProjectPropertiesRequests projectPropertiesRequests);
    public virtual bool IsApplicable(IProjectProperties projectProperties);
    protected virtual void BuildProjectBuildSettings(MsBuildProject project, ManagedProjectBuildSettings buildSettings);
    protected virtual void BuildProjectConfiguration(IProjectMark projectMark, MsBuildProjectPart project, ManagedProjectConfigurationBase configuration);
}
[ShellComponentAttribute("16")]
internal class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.VBProjectTypeGuidProvider : object {
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.VBProjectTypeGuidProvider/<GetProjectTypeGuids>d__0")]
public sealed virtual IEnumerable`1<Guid> GetProjectTypeGuids(MsBuildProject msBuildProject);
}
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.VCXCompilerToolPropertiesProcessor : object {
    public static void ProcessCompilerToolProperties(T projectItemDefinition, VCCompilerToolProperties parentProperties, VCCompilerToolProperties compilerProperties, Func`3<T, string, string> evaluator);
    public static void ProcessFxCompilerToolProperties(T projectItemDefinition, VCCompilerToolProperties parentProperties, VCCompilerToolProperties compilerProperties, Func`3<T, string, string> evaluator);
    private static string InternAndCheckParent(string parent, string evaluated);
    private static RuntimeCheckOption ParseBasicRuntimeChecks(string value);
    private static VCXCompileAsOptions ParseCompileAsOption(string value);
    private static VCXCompileAsManagedOptions ParseCompileAsManagedOptions(string value);
    private static DefaultCallingConvention ParseCallingConvention(string value);
    private static CppExceptionHandling ParseExceptionHandling(string value);
    private static RuntimeLibraryOption ParseRuntimeLibrary(string value);
    private static PchOption ParseUsePrecompiledHeader(string value);
}
[SettingsKeyAttribute("JetBrains.ProjectModel.Settings.Schema.HierarchySettings", "JetBrains.ProjectModel.ProjectsHost.Resources.Strings", "ConfiguresVcxProjectFilterSettingsSettingDescription")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.VcxFilterSettings : object {
    [CompilerGeneratedAttribute]
private bool <UseFilters>k__BackingField;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.ProjectsHost.Resources.Strings", "UseVcsProjectFiltersSettingDescription")]
public bool UseFilters { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_UseFilters();
    [CompilerGeneratedAttribute]
public void set_UseFilters(bool value);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.VcxFiltersStructurePatcherFactory : MsBuildStructurePatcherFactory {
    private IContextBoundSettingsStoreLive myContextBoundSettingsStore;
    public VcxFiltersStructurePatcherFactory(Lifetime lifetime, ISettingsStore settingsStore);
    public virtual bool IsApplicable(IProjectMark projectMark);
    public virtual MsBuildStructurePatcher Create(IProjectMark projectMark, MsBuildProjectPart projectPart);
}
[ShellFeaturePartAttribute("16")]
internal class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.VCXProjectFilePropertiesBuilder : ManagedProjectFilePropertiesBuilder {
    public VCXProjectFilePropertiesBuilder(ProjectPropertiesRequests requests);
    public virtual bool IsApplicable(IProjectProperties projectProperties);
    public virtual bool BuildProjectFileProperties(IProjectProperties projectProperties, IProjectFileProperties projectFileProperties, MsBuildProjectItem projectItem);
}
public static class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.VCXProjectItemsUtil : object {
    public static string ConfigurationTypeProperty;
    public static string DefaultPlatformToolsetProperty;
    public static string CLRSupportProperty;
    public static string UseOfAtlProperty;
    public static string UseOfMfcProperty;
    public static string IncludePathProperty;
    public static string ConfigurationAndroidApiLevelProperty;
    public static string ConfigurationExecutablePathProperty;
    public static string ConfigurationPlatformToolsetProperty;
    public static string NMakeIncludeSearchPathProperty;
    public static string NMakePreprocessorDefinitionsProperty;
    public static string NMakeForcedIncludesProperty;
    public static string NMakeOutputProperty;
    public static string PublicIncludeDirectoriesProperty;
    public static string AllProjectIncludesArePublicProperty;
    public static string WinMDAssemblyProperty;
    public static string ClCompileItemDefinition;
    public static string LinkItemDefinition;
    public static string ClCommandLinesItem;
    public static string ClCompilePreprocessorDefinitionsAttr;
    public static string ClCompileUndefinePreprocessorDefinitionsAttr;
    public static string ClCompileAdditionalIncludeDirectivesAttr;
    public static string ClCompileBasicRuntimeChecksAttr;
    public static string ClCompileCompileAsAttr;
    public static string ClCompileCompileAsManagedAttr;
    public static string ClCompileCompileAsWinRTAttr;
    public static string ClCompileCallingConventionAttr;
    public static string ClCompileAdditionalOptionsAttr;
    public static string ClCompileDisableLanguageExtensionsAttr;
    public static string ClCompileExceptionHandlingAttr;
    public static string ClCompileForcedIncludeFilesAttr;
    public static string ClCompileOmitDefaultLibNameAttr;
    public static string ClCompilePrecompiledHeaderFileAttr;
    public static string ClCompilePrecompiledHeaderOutputFileAttr;
    public static string ClCompileTreatWChar_tAsBuiltInTypeAttr;
    public static string ClCompileRuntimeTypeInfoAttr;
    public static string ClCompileRuntimeLibraryAttr;
    public static string ClCompilePrecompiledHeaderAttr;
    public static string ClCompileLanguageStandardAttr;
    public static string ClCompileCLanguageStandardAttr;
    public static string ClCompileConformanceModeAttr;
    public static string ClCompileConformantPreprocessorAttr;
    public static string LinkTargetMachineAttr;
    public static string FilesAttr;
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.VCXProjectModificators : object {
    private ISolution mySolution;
    private IIntelliSenseInfoSettingAccessor myIntelliSenseInfoSettingAccessor;
    private IContextBoundSettingsStoreLive myLiveStore;
    private Nullable`1<bool> myIsUnrealCandidateCached;
    public VCXProjectModificators(Lifetime lifetime, ISolution solution, ISettingsStore settingsStore, IIntelliSenseInfoSettingAccessor intelliSenseInfoSettingAccessor);
    public sealed virtual bool IsApplicable(IProjectMark projectMark);
    public sealed virtual void ModifyTargets(List`1<string> targets);
    public sealed virtual void ModifyProperties(IDictionary`2<string, string> properties);
    private bool ShouldUseModificator();
    private bool IsUnreal();
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.VCXProjectPropertiesBuilder : ManagedProjectPropertiesBuilder {
    public VCXProjectPropertiesBuilder(ProjectPropertiesRequests projectPropertiesRequests);
    public virtual bool IsApplicable(IProjectProperties projectProperties);
    protected virtual void BuildProjectConfiguration(IProjectMark projectMark, MsBuildProjectPart project, ManagedProjectConfigurationBase configuration);
    private UseOfATL GetUseOfAtl(string value);
    private UseOfMfc GetUseOfMfc(string value);
    private VCXCompileAsManagedOptions GetClrSupport(string clrSupport);
    private ConfigurationTypes GetConfigurationType(string configurationTypeValue);
    private static TargetMachine ParseTargetMachine(string value);
    private static TargetMachine GuessTargetMachineFromPlatform(string platform);
}
[ShellComponentAttribute("16")]
internal class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.VCXProjectTypeGuidProvider : object {
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.VCXProjectTypeGuidProvider/<GetProjectTypeGuids>d__0")]
public sealed virtual IEnumerable`1<Guid> GetProjectTypeGuids(MsBuildProject msBuildProject);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.XamarinAndroidDefaultModificator : object {
    public sealed virtual bool IsApplicable(IProjectMark projectMark);
    public sealed virtual void ModifyTargets(List`1<string> targets);
    public sealed virtual void ModifyProperties(IDictionary`2<string, string> properties);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.XamarinAndroidLegacyModificator : object {
    private static String[] ourTargets;
    public static String[] ImportNames;
    private static XamarinAndroidLegacyModificator();
    public sealed virtual bool IsApplicable(IProjectMark projectMark);
    public sealed virtual void ModifyTargets(List`1<string> targets);
    public sealed virtual void ModifyProperties(IDictionary`2<string, string> properties);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.XamarinIOSModificator : object {
    private static String[] ourTargets;
    public static string ImportName;
    private static XamarinIOSModificator();
    public sealed virtual bool IsApplicable(IProjectMark projectMark);
    public sealed virtual void ModifyTargets(List`1<string> targets);
    public sealed virtual void ModifyProperties(IDictionary`2<string, string> properties);
}
public interface JetBrains.ProjectModel.ProjectsHost.MsBuild.IMsBuildActionFilter {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<BuildActionFilteringRule> CreateRules();
}
public interface JetBrains.ProjectModel.ProjectsHost.MsBuild.IMsBuildDescriptorBuilderService {
    [NotNullAttribute]
public abstract virtual IProjectDescriptor BuildProjectDescriptor(IProjectMark projectMark, MsBuildProject msBuildProject);
    [CanBeNullAttribute]
public abstract virtual IProjectReferencesDescriptor BuildProjectReferencesDescriptor(IProjectMark projectMark, IProjectDescriptor projectDescriptor, MsBuildProject msBuildProject, List`1<ProjectLoadDiagnostic> diagnostics);
    [CanBeNullAttribute]
public abstract virtual IProjectDependenciesDescriptor BuildProjectDependenciesDescriptor(IProjectMark projectMark, IProjectDescriptor projectDescriptor, MsBuildProject msBuildProject);
}
public interface JetBrains.ProjectModel.ProjectsHost.MsBuild.IMsBuildDescriptorPatcher {
    public abstract virtual void Patch(IProjectDescriptor descriptor);
}
public interface JetBrains.ProjectModel.ProjectsHost.MsBuild.IMsBuildDescriptorStructureModificator {
    public abstract virtual bool Filter(VirtualFileSystemPath physicalPath, VirtualFileSystemPath logicalPath);
}
public interface JetBrains.ProjectModel.ProjectsHost.MsBuild.IMsBuildModificationSettingsProvider {
    public IEnumerable`1<string> SmartModificationsFilter { get; }
    public abstract virtual IEnumerable`1<string> get_SmartModificationsFilter();
}
public interface JetBrains.ProjectModel.ProjectsHost.MsBuild.IMsBuildProjectBatchListener {
    public abstract virtual IMsBuildProjectBatchSession CreateSession();
}
public interface JetBrains.ProjectModel.ProjectsHost.MsBuild.IMsBuildProjectBatchSession {
}
public interface JetBrains.ProjectModel.ProjectsHost.MsBuild.IMsBuildProjectElementOrigin {
}
public interface JetBrains.ProjectModel.ProjectsHost.MsBuild.IMsBuildProjectFilePropertiesBuilder {
    public abstract virtual bool IsApplicable(IProjectProperties projectProperties);
    public abstract virtual bool BuildProjectFileProperties(IProjectProperties projectProperties, IProjectFileProperties projectFileProperties, MsBuildProjectItem projectItem);
}
public interface JetBrains.ProjectModel.ProjectsHost.MsBuild.IMsBuildProjectListener {
    public abstract virtual void OnProjectLoaded(IProjectMark projectMark, IProjectDescriptor projectDescriptor, MsBuildProject msBuildProject);
}
public interface JetBrains.ProjectModel.ProjectsHost.MsBuild.IMsBuildProjectListenerWithRequester {
    public abstract virtual void OnProjectLoaded(IProjectMark projectMark, IProjectDescriptor projectDescriptor, IProjectLoadRequester requester, MsBuildProject msBuildProject);
}
public interface JetBrains.ProjectModel.ProjectsHost.MsBuild.IMsBuildProjectModificationListener {
    public abstract virtual void OnAddFile(IProjectMark projectMark, string itemType, VirtualFileSystemPath location, VirtualFileSystemPath linkedPath, VirtualFileSystemPath relativeTo, Nullable`1<RelativeToType> relativeToType);
    public abstract virtual void OnRemoveFile(IProjectMark projectMark, string itemType, VirtualFileSystemPath location);
    public abstract virtual void OnUpdateFile(IProjectMark projectMark, string oldItemType, VirtualFileSystemPath oldLocation, string newItemType, VirtualFileSystemPath newLocation);
    public abstract virtual void OnAddFolder(IProjectMark projectMark, VirtualFileSystemPath location, VirtualFileSystemPath relativeTo, Nullable`1<RelativeToType> relativeToType);
    public abstract virtual void OnRemoveFolder(IProjectMark projectMark, VirtualFileSystemPath location);
    public abstract virtual void OnUpdateFolder(IProjectMark projectMark, VirtualFileSystemPath oldLocation, VirtualFileSystemPath newLocation);
}
public interface JetBrains.ProjectModel.ProjectsHost.MsBuild.IMsBuildProjectPropertiesBuilder {
    public abstract virtual bool IsApplicable(IProjectProperties projectProperties);
    public abstract virtual void BuildProjectProperties(IProjectMark projectMark, IProjectProperties projectProperties, MsBuildProject msBuildProject);
}
public interface JetBrains.ProjectModel.ProjectsHost.MsBuild.IMsBuildProjectReferencesBuilder {
    public abstract virtual bool IsApplicable(IProjectMark projectMark, IProjectProperties projectProperties);
    [CanBeNullAttribute]
public abstract virtual IProjectReferencesDescriptor BuildProjectReferences(IProjectMark projectMark, IProjectProperties projectProperties, MsBuildProject msBuildProject, Action`1<ProjectLoadDiagnostic> onProjectLoadDiagnostic);
}
public interface JetBrains.ProjectModel.ProjectsHost.MsBuild.IMsBuildProjectSchemeProvider {
    public abstract virtual void BuildScheme(MsBuildProjectScheme scheme);
}
public interface JetBrains.ProjectModel.ProjectsHost.MsBuild.IMsBuildProjectTargetRequest {
    public IEnumerable`1<string> TargetNames { get; }
    public abstract virtual IEnumerable`1<string> get_TargetNames();
}
public interface JetBrains.ProjectModel.ProjectsHost.MsBuild.IMsBuildProjectTypeGuidProvider {
    public abstract virtual IEnumerable`1<Guid> GetProjectTypeGuids(MsBuildProject msBuildProject);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Internal.AvailableItemNameElementBuildActionProvider : MsBuildDefaultBuildActionsProvider {
    public IEnumerable`1<BuildAction> DefaultBuildActions { get; }
    public virtual bool IsApplicable(IProjectProperties projectProperties);
    public virtual IEnumerable`1<BuildAction> get_DefaultBuildActions();
    public virtual BuildAction GetFromProjectItem(MsBuildProjectItem item);
}
[ShellComponentAttribute("10")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Internal.MsBuildActionFilterService : object {
    private OneToSetMap`2<BuildAction, BuildAction> myRules;
    public MsBuildActionFilterService(IEnumerable`1<IMsBuildActionFilter> filters);
    public bool IsFiltered(BuildAction filteredBuildAction, BuildAction existingBuildAction);
    [CanBeNullAttribute]
public BuildAction GetFilteredBuildAction(BuildAction existingBuildAction);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Internal.MsBuildCommonBuildActionsProvider : MsBuildDefaultBuildActionsProvider {
    private static IEnumerable`1<BuildAction> ourBuildActions;
    public IEnumerable`1<BuildAction> DefaultBuildActions { get; }
    private static MsBuildCommonBuildActionsProvider();
    public virtual bool IsApplicable(IProjectProperties projectProperties);
    public virtual IEnumerable`1<BuildAction> get_DefaultBuildActions();
    public virtual BuildAction GetFromProjectItem(MsBuildProjectItem item);
}
[ProjectsHostComponentAttribute("10")]
internal class JetBrains.ProjectModel.ProjectsHost.MsBuild.Internal.MsBuildDescriptorBuilderService : object {
    private MsBuildProjectTypeService myProjectTypeGuidsService;
    private MsBuildProjectPropertiesBuilderService myProjectPropertiesBuilder;
    private MsBuildProjectReferencesBuilder myProjectReferencesBuilder;
    private MsBuildProjectFilePropertiesBuilderService myProjectFilePropertiesBuilder;
    private MsBuildProjectPropertiesFactory myProjectPropertiesFactory;
    private MsBuildWildcardService myWildcardService;
    private IFeaturePartsContainer myFeaturePartsContainer;
    private ProjectFilePropertiesFactory myProjectFilePropertiesFactory;
    private MsBuildDefaultBuildActions myDefaultBuildActions;
    private MsBuildActionFilterService myBuildActionFilterService;
    private IImmutableList`1<IMsBuildDescriptorPatcher> myPatchers;
    private IImmutableList`1<IMsBuildDescriptorStructureModificator> myStructureModificators;
    public MsBuildDescriptorBuilderService(MsBuildProjectTypeService projectTypeGuidsService, MsBuildProjectPropertiesBuilderService projectPropertiesBuilder, MsBuildProjectReferencesBuilder projectReferencesBuilder, MsBuildProjectFilePropertiesBuilderService projectFilePropertiesBuilder, MsBuildProjectPropertiesFactory projectPropertiesFactory, MsBuildWildcardService wildcardService, IFeaturePartsContainer featurePartsContainer, ProjectFilePropertiesFactory projectFilePropertiesFactory, MsBuildDefaultBuildActions msBuildDefaultBuildActions, MsBuildActionFilterService buildActionFilterService, IImmutableList`1<IMsBuildDescriptorPatcher> patchers, IImmutableList`1<IMsBuildDescriptorStructureModificator> structureModificators);
    public sealed virtual IProjectDescriptor BuildProjectDescriptor(IProjectMark projectMark, MsBuildProject msBuildProject);
    public sealed virtual IProjectReferencesDescriptor BuildProjectReferencesDescriptor(IProjectMark projectMark, IProjectDescriptor projectDescriptor, MsBuildProject msBuildProject, List`1<ProjectLoadDiagnostic> diagnostics);
    public sealed virtual IProjectDependenciesDescriptor BuildProjectDependenciesDescriptor(IProjectMark projectMark, IProjectDescriptor projectDescriptor, MsBuildProject msBuildProject);
    [NotNullAttribute]
private IProjectProperties CreateProjectProperties(IProjectMark projectMark, MsBuildProject msBuildProject);
    [CanBeNullAttribute]
private static DotNetCorePlatformInfo GetDotNetCorePlatform(MsBuildProject msBuildProject);
}
[ProjectsHostComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Internal.MsBuildOutputAssemblyPathEvaluator : object {
    [CompilerGeneratedAttribute]
private ILogger <logger>P;
    [CompilerGeneratedAttribute]
private ILazy`1<MsBuildSessionHolder> <holder>P;
    [CompilerGeneratedAttribute]
private MsBuildProjectPropertiesProvider <propertiesProvider>P;
    public MsBuildOutputAssemblyPathEvaluator(ILogger logger, ILazy`1<MsBuildSessionHolder> holder, MsBuildProjectPropertiesProvider propertiesProvider);
    public sealed virtual bool IsApplicable(IProjectMark projectHost);
    public sealed virtual VirtualFileSystemPath Evaluate(IProjectMark projectMark, TargetFrameworkId targetFrameworkId);
    public static VirtualFileSystemPath EvaluateOutputPath(RdProjectPropertiesSet projectProperties, VirtualFileSystemPath projectLocation);
    [NotNullAttribute]
private static VirtualFileSystemPath TryEvaluateOutputPathByTargetPath(RdProjectPropertiesSet projectProperties, VirtualFileSystemPath projectLocation);
    [NotNullAttribute]
private static VirtualFileSystemPath TryEvaluateOutputPathByOutputProperties(RdProjectPropertiesSet projectProperties, VirtualFileSystemPath projectLocation);
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Internal.MsBuildProjectFileOrigin : MsBuildProjectItemOriginBase {
    public MsBuildProjectFileOrigin(RdProjectItemOrigin origin, string itemType);
    protected bool Equals(MsBuildProjectFileOrigin other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ProjectsHostComponentAttribute("0")]
internal class JetBrains.ProjectModel.ProjectsHost.MsBuild.Internal.MsBuildProjectFilePropertiesBuilderService : object {
    private IFeaturePartsContainer myContainer;
    public MsBuildProjectFilePropertiesBuilderService(IFeaturePartsContainer container);
    [CanBeNullAttribute]
public IMsBuildProjectFilePropertiesBuilder GetApplicableBuilder(IProjectProperties projectProperties);
}
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Internal.MsBuildProjectFileReader : object {
    public XmlDocument Document;
    public MsBuildProjectFileReader(IProjectMark projectMark);
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Internal.MsBuildProjectHostItemDescriptor : object {
    [NotNullAttribute]
public RdProjectItem Item;
    public BuildAction BuildAction { get; }
    public Dictionary`2<string, string> Metadata { get; }
    public MsBuildProjectHostItemDescriptor(RdProjectItem item);
    public sealed virtual BuildAction get_BuildAction();
    public sealed virtual Dictionary`2<string, string> get_Metadata();
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Internal.MsBuildProjectHostWildcardItemDescriptor : object {
    [NotNullAttribute]
public RdProjectWildcardItem Item;
    public BuildAction BuildAction { get; }
    public string ItemType { get; }
    public string UnevaluatedInclude { get; }
    public Dictionary`2<string, string> Metadata { get; }
    public MsBuildProjectHostWildcardItemDescriptor(RdProjectWildcardItem item);
    public sealed virtual BuildAction get_BuildAction();
    public string get_ItemType();
    public string get_UnevaluatedInclude();
    public sealed virtual Dictionary`2<string, string> get_Metadata();
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Internal.MsBuildProjectImportOrigin : object {
    [NotNullAttribute]
public RdProjectImportIdentity Identity;
    public MsBuildProjectImportOrigin(RdProjectImportIdentity identity);
    public sealed virtual bool CanModify(String& reason);
    protected bool Equals(MsBuildProjectImportOrigin other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Internal.MsBuildProjectItemOriginBase : object {
    protected RdProjectItemOrigin Origin;
    [CompilerGeneratedAttribute]
private string <ItemType>k__BackingField;
    public string ItemType { get; }
    public MsBuildProjectItemOriginBase(RdProjectItemOrigin origin, string itemType);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ItemType();
    public sealed virtual bool CanModify(String& reason);
}
[ProjectsHostComponentAttribute("0")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Internal.MsBuildProjectListenerService : object {
    private ILogger myLogger;
    private IImmutableList`1<IMsBuildProjectListener> myListeners;
    private IImmutableList`1<IMsBuildProjectBatchListener> myBatchListeners;
    private IImmutableList`1<IMsBuildProjectModificationListener> myModificationListeners;
    public MsBuildProjectListenerService(ILogger logger, IImmutableList`1<IMsBuildProjectListener> listeners, IImmutableList`1<IMsBuildProjectBatchListener> batchListeners, IImmutableList`1<IMsBuildProjectModificationListener> modificationListeners);
    public void OnMsBuildProjectLoaded(List`1<IMsBuildProjectBatchSession> sessions, IProjectMark projectMark, IProjectDescriptor projectDescriptor, IProjectLoadRequester requester, MsBuildProject msBuildProject);
    [NotNullAttribute]
public List`1<IMsBuildProjectBatchSession> BeforeMsBuildProjectsLoaded();
    public void OnMsbuildProjectModification(Action`1<IMsBuildProjectModificationListener> action);
    private void ProcessListeners(IEnumerable`1<T> listeners, Action`1<T> action);
}
[ProjectsHostComponentAttribute("0")]
internal class JetBrains.ProjectModel.ProjectsHost.MsBuild.Internal.MsBuildProjectPropertiesBuilderService : object {
    private IFeaturePartsContainer myContainer;
    public MsBuildProjectPropertiesBuilderService(IFeaturePartsContainer container);
    [CanBeNullAttribute]
private IMsBuildProjectPropertiesBuilder GetApplicableBuilder(IProjectProperties projectProperties);
    public void BuildProjectProperties(IProjectMark projectMark, IProjectProperties projectProperties, MsBuildProject msBuildProject);
}
[ProjectsHostComponentAttribute("0")]
internal class JetBrains.ProjectModel.ProjectsHost.MsBuild.Internal.MsBuildProjectPropertiesFactory : object {
    private IFeaturePartsContainer myContainer;
    private ProjectPropertiesFactory myProjectPropertiesFactory;
    public MsBuildProjectPropertiesFactory(IFeaturePartsContainer container, ProjectPropertiesFactory projectPropertiesFactory);
    public IProjectProperties CreateProjectProperties(MsBuildProject msBuildProject, ProjectPropertiesFactoryParameters parameters);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Internal.MsBuildProjectPropertiesProvider : object {
    private MsBuildProjectPropertiesBuilder myBuilder;
    public MsBuildProjectPropertiesProvider(MsBuildProjectPropertiesBuilder builder);
    public Dictionary`2<string, string> Build(IBuildTool buildTool, IProjectMark projectMark);
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Internal.MsBuildProjectReferenceOrigin : MsBuildProjectItemOriginBase {
    public MsBuildProjectItem Item;
    public RdProjectItemIdentity Identity { get; }
    public string HintPath { get; }
    public MsBuildProjectReferenceOrigin(MsBuildProjectItem item);
    public RdProjectItemIdentity get_Identity();
    public string get_HintPath();
    protected bool Equals(MsBuildProjectReferenceOrigin other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ProjectsHostComponentAttribute("0")]
internal class JetBrains.ProjectModel.ProjectsHost.MsBuild.Internal.MsBuildProjectReferencesBuilder : object {
    private Lifetime myLifetime;
    private IEnumerable`1<IMsBuildProjectReferencesBuilder> myServices;
    public MsBuildProjectReferencesBuilder(Lifetime lifetime, IEnumerable`1<IMsBuildProjectReferencesBuilder> services);
    [NotNullAttribute]
private IMsBuildProjectReferencesBuilder GetApplicableBuilder(IProjectMark projectMark, IProjectProperties projectProperties);
    [CanBeNullAttribute]
public IProjectReferencesDescriptor BuildProjectReferences(IProjectMark projectMark, IProjectProperties projectProperties, MsBuildProject msBuildProject, Action`1<ProjectLoadDiagnostic> onProjectLoadDiagnostic);
}
[ShellComponentAttribute("10")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Internal.MsBuildProjectSchemeCollector : object {
    private ProjectPropertiesRequests myPropertiesRequests;
    private IImmutableList`1<MsBuildDefaultBuildActionsProvider> myDefaultBuildActionsProviders;
    private IImmutableList`1<IMsBuildProjectSchemeProvider> myProjectSchemeProviders;
    public MsBuildProjectSchemeCollector(ProjectPropertiesRequests propertiesRequests, IImmutableList`1<MsBuildDefaultBuildActionsProvider> defaultBuildActionsProviders, IImmutableList`1<IMsBuildProjectSchemeProvider> projectSchemeProviders);
    [NotNullAttribute]
public MsBuildProjectScheme GetScheme();
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Internal.MsBuildProjectSchemeMainProvider : MsBuildProjectSchemeReflectionProvider {
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.ProjectsHost.MsBuild.Internal.MsBuildProjectSchemeMainProvider/<GetSchemaTypes>d__0")]
public virtual IEnumerable`1<Type> GetSchemaTypes();
}
[ProjectsHostComponentAttribute("0")]
internal class JetBrains.ProjectModel.ProjectsHost.MsBuild.Internal.MsBuildProjectTypeService : object {
    private IEnumerable`1<IMsBuildProjectTypeGuidProvider> myServices;
    private ProjectPropertiesFactory myProjectPropertiesFactory;
    private ShellFeaturePartsContainer myContainer;
    public MsBuildProjectTypeService(IEnumerable`1<IMsBuildProjectTypeGuidProvider> services, ProjectPropertiesFactory projectPropertiesFactory, ShellFeaturePartsContainer container);
    public Guid GetProjectTypeGuid(IProjectMark projectMark, MsBuildProject msBuildProject, IReadOnlyCollection`1& projectTypeGuids);
    private Guid GetActualTypeGuid(IProjectMark projectMark);
}
[ProjectsHostComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Internal.MsBuildSharedDependenciesProvider : object {
    private OneToListMap`2<IProjectMark, VirtualFileSystemPath> myImports;
    private OneToListMap`2<VirtualFileSystemPath, IProjectMark> myDependencies;
    public sealed virtual void OnProjectLoaded(IProjectMark projectMark, IProjectDescriptor projectDescriptor, MsBuildProject msBuildProject);
    public sealed virtual IReadOnlyCollection`1<IProjectMark> GetDependantProjects(IProjectMark projectMark);
    private static bool IsSharedImport(VirtualFileSystemPath path);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Internal.SharedProjectBuildActionsProvider : MsBuildDefaultBuildActionsProvider {
    public IEnumerable`1<BuildAction> DefaultBuildActions { get; }
    public virtual bool IsApplicable(IProjectProperties projectProperties);
    public virtual IEnumerable`1<BuildAction> get_DefaultBuildActions();
    public virtual BuildAction GetFromProjectItem(MsBuildProjectItem item);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.MsBuildDefaultBuildActions : object {
    [CompilerGeneratedAttribute]
private IImmutableList`1<MsBuildDefaultBuildActionsProvider> <providers>P;
    public MsBuildDefaultBuildActions(IImmutableList`1<MsBuildDefaultBuildActionsProvider> providers);
    [NotNullAttribute]
public ISet`1<BuildAction> GetBuildActions(IEnumerable`1<MsBuildProjectItem> projectItems, IProjectProperties projectProperties);
    public MsBuildItemTypeFilter CreateItemFilter(MsBuildProjectPart projectPart, IProjectDescriptor projectDescriptor);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public abstract class JetBrains.ProjectModel.ProjectsHost.MsBuild.MsBuildDefaultBuildActionsProvider : object {
    [NotNullAttribute]
public IEnumerable`1<BuildAction> DefaultBuildActions { get; }
    public abstract virtual bool IsApplicable(IProjectProperties projectProperties);
    public abstract virtual IEnumerable`1<BuildAction> get_DefaultBuildActions();
    [CanBeNullAttribute]
public virtual BuildAction GetFromProjectItem(MsBuildProjectItem item);
    [NotNullAttribute]
protected BuildAction FromItemType(MsBuildProjectItem item);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.MsBuildDefaultProjectTypeGuidProvider : object {
    public sealed virtual IEnumerable`1<Guid> GetProjectTypeGuids(MsBuildProject msBuildProject);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.ProjectsHost.MsBuild.MsBuildImportsAnalyzer : object {
    private static Key`1<ICollection`1<PossibleImport>> ourKey;
    private static MsBuildImportsAnalyzer();
    public static void UpdateInfo(IProjectMark projectMark);
    [ExtensionAttribute]
public static bool HasPossibleImport(IProjectMark projectMark, string importPart);
    private static ICollection`1<PossibleImport> ParseProjectFile(VirtualFileSystemPath location);
}
public enum JetBrains.ProjectModel.ProjectsHost.MsBuild.MSBuildIncompatibleReason : Enum {
    public int value__;
    public static MSBuildIncompatibleReason NoConnection;
    public static MSBuildIncompatibleReason NoStartup;
    public static MSBuildIncompatibleReason ErrorCode;
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.MsBuildProjectFilePropertiesBuilderBase : object {
    public virtual bool IsApplicable(IProjectProperties projectProperties);
    public virtual bool BuildProjectFileProperties(IProjectProperties projectProperties, IProjectFileProperties projectFileProperties, MsBuildProjectItem projectItem);
}
[ProjectsHostComponentAttribute("0")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.MsBuildProjectHost : object {
    private ILogger myLogger;
    private ISolution mySolution;
    private ISolutionToolset mySolutionToolset;
    private IMsBuildDescriptorBuilderService myDescriptorBuilderService;
    private UserNotifications myUserNotifications;
    private BuildToolInformation myBuildToolInformation;
    private MsBuildSessionHolder mySessionHolder;
    private MsBuildCustomPropertiesProvider myCustomPropertiesProvider;
    private MsBuildProjectLoadDiagnosticProvider myProjectLoadDiagnosticProvider;
    private MsBuildLoadStrategySelector myLoadStrategySelector;
    private MsBuildProjectPropertiesProvider myPropertiesProvider;
    private MsBuildProjectSchemeCollector mySchemeCollector;
    private MsBuildRestoreDesignTimeManager myRestoreDesignTimeManager;
    private MsBuildReloadSessionTypeProvider myReloadSessionTypeProvider;
    private MSBuildUsagesCollector myUsagesCollector;
    public IWildcardContainer WildcardContainer;
    public MsBuildDefaultBuildActions DefaultBuildActions;
    public MsBuildProjectPersister ProjectPersister;
    public MsBuildProjectListenerService ListenerService;
    [CompilerGeneratedAttribute]
private IMsBuildUserProfile <UserProfile>k__BackingField;
    public IMsBuildUserProfile UserProfile { get; }
    [NotNullAttribute]
public MsBuildProjectModelSession Session { get; }
    public MsBuildProjectHost(ILogger logger, ISolution solution, IWildcardContainer wildcardContainer, IMsBuildUserProfile userProfile, ISolutionToolset solutionToolset, IMsBuildDescriptorBuilderService descriptorBuilderService, UserNotifications userNotifications, BuildToolInformation buildToolInformation, MsBuildProjectPersister projectPersister, MsBuildSessionHolder sessionHolder, MsBuildCustomPropertiesProvider customPropertiesProvider, MsBuildProjectListenerService projectListenerService, MsBuildProjectLoadDiagnosticProvider projectLoadDiagnosticProvider, MsBuildDefaultBuildActions defaultBuildActions, MsBuildLoadStrategySelector loadStrategySelector, MsBuildProjectPropertiesProvider propertiesProvider, MsBuildProjectSchemeCollector schemeCollector, MsBuildRestoreDesignTimeManager restoreDesignTimeManager, MsBuildReloadSessionTypeProvider reloadSessionTypeProvider, MSBuildUsagesCollector usagesCollector);
    [CompilerGeneratedAttribute]
public IMsBuildUserProfile get_UserProfile();
    public MsBuildProjectModelSession get_Session();
    public sealed virtual void BeforeLoad(IProjectMark projectMark);
    public void EditProject(IProjectMark projectMark, Action`1<MsBuildProjectModelSession> action);
    public sealed virtual IProjectHostItemDescriptor Describe(IProjectMark projectMark, IProjectItem projectItem);
    [CanBeNullAttribute]
public RdProjectItemWithInfo GetProjectItem(IProjectMark projectMark, RdProjectItemIdentity identity, bool reevaluateIfMissing);
    [CanBeNullAttribute]
public RdProjectItemDefinition GetProjectItemDefinition(IProjectMark projectMark, RdProjectItemDefinitionIdentity identity);
    [NotNullAttribute]
public RdExecuteTargetResult ExecuteTarget(IProjectMark projectMark, string target, Dictionary`2<string, string> properties, bool diagnosticMode);
    public sealed virtual void ClearCaches();
    public sealed virtual bool IsApplicable(IProjectMark projectMark);
    public sealed virtual bool IsProjectAffectedByChange(IProjectMark parentProject, IProjectItem changedItem);
    public sealed virtual void AddItem(IProjectMark projectMark, IProjectItem projectItem, RelativeTo relativeTo);
    public sealed virtual IProjectHostEditItemSession RemoveItem(IProjectMark projectMark, IProjectItem projectItem);
    public sealed virtual IProjectHostEditItemSession RemoveAndExcludeItem(IProjectMark projectMark, IProjectItem projectItem);
    private IProjectHostEditItemSession RemoveItemInternal(IProjectMark projectMark, IProjectItem projectItem, bool force);
    public sealed virtual IProjectHostEditItemSession UpdateItem(IProjectMark projectMark, IProjectItem projectItem);
    public sealed virtual void AddReference(IProjectMark projectMark, IProjectToModuleReference reference);
    public sealed virtual void RemoveReference(IProjectMark projectMark, IProjectToModuleReference reference);
    public sealed virtual void RebindReference(IProjectMark projectMark, IProjectToModuleReference oldReference, IProjectToModuleReference newReference);
    public sealed virtual IProjectHostEditItemSession UpdateReference(IProjectMark projectMark, IProjectToModuleReference reference);
    public void SaveProperties(IProjectMark projectMark, List`1<RdSaveProperty> properties);
    public sealed virtual void Reload(Lifetime lifetime, IReadOnlyCollection`1<ProjectHostReloadChange> changes, IReloadEventsConsumer reloadEventsConsumer, FileSystemPath logPath);
    private void PerformReload(IReadOnlyCollection`1<ProjectHostReloadChange> changes, IReloadEventsConsumer reloadEventsConsumer, FileSystemPath logPath);
    [NotNullAttribute]
private MsBuildProjectReloadRequest`1<IProjectMark> CreateRequest(IProjectMark projectMark);
    private void HandleResult(ProjectHostReloadChange change, MsBuildProject project, List`1<IMsBuildProjectBatchSession> listenerSessions, IncompatibleMSBuildTracker incompatibleMSBuildTracker);
    private void BuildDescriptors(ProjectHostReloadChange change, MsBuildProject msBuildProject);
    public sealed virtual void Unload(IProjectMark projectMark);
    private RuntimeAndToolset GetRuntimeAndToolset();
    private IBuildTool GetBuildTool();
}
[ProjectsHostComponentAttribute("0")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.MsBuildProjectPersister : object {
    private FileContentTracker myFileContentTracker;
    private MsBuildSessionHolder mySessionHolder;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    protected ILogger Logger { get; }
    public MsBuildProjectPersister(FileContentTracker fileContentTracker, MsBuildSessionHolder sessionHolder, ILogger logger);
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    public void Persist(IProjectMark projectMark);
    public void PersistChange(IProjectMark projectMark, IReadOnlyCollection`1<RdProjectFileContent> oldContents, Action`1<SimpleTextDiffConflictException> onError);
    protected virtual void PersistImpl(VirtualFileSystemPath location, string content);
    protected virtual void PersistChangeImpl(VirtualFileSystemPath location, SimpleTextDiff diff, Action`1<SimpleTextDiffConflictException> onError);
}
public abstract class JetBrains.ProjectModel.ProjectsHost.MsBuild.MsBuildProjectPropertiesBuilderBase : object {
    public abstract virtual bool IsApplicable(IProjectProperties projectProperties);
    public virtual void BuildProjectProperties(IProjectMark projectMark, IProjectProperties projectProperties, MsBuildProject msBuildProject);
}
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.MsBuildProjectScheme : object {
    private IReadOnlyCollection`1<Type> myKnownSchemaTypes;
    private bool myReportErrors;
    private ILogger myLogger;
    [NotNullAttribute]
private HashSet`1<string> myProperties;
    [NotNullAttribute]
private HashSet`1<string> myItems;
    [NotNullAttribute]
private HashSet`1<string> myMetadata;
    public MsBuildProjectScheme(IReadOnlyCollection`1<Type> knownSchemaTypes, bool reportErrors);
    public void RegisterProperty(string name);
    public void RegisterItem(string name);
    public void RegisterItems(IEnumerable`1<string> names);
    public void RegisterMetadata(string name);
    public void RegisterMetadata(IEnumerable`1<string> names);
    public sealed virtual bool VerifyPropertyKnown(string propertyName);
    public sealed virtual bool VerifyItemTypeKnown(string itemType);
    public sealed virtual bool VerifyItemMetadataKnown(string metadataName);
    private void LogError(string subject, string name);
    public sealed virtual RdReloadProjectScheme ToProtocolModel();
}
public abstract class JetBrains.ProjectModel.ProjectsHost.MsBuild.MsBuildProjectSchemeReflectionProvider : object {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<Type> GetSchemaTypes();
    public sealed virtual void BuildScheme(MsBuildProjectScheme scheme);
    private static void BuildSchemeForType(Type schemaType, MsBuildProjectScheme scheme);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.MsBuildProjectTargetContainer : object {
    private static List`1<string> ourEmpty;
    private HashSet`1<string> myRequestedTargets;
    private OneToSetMap`2<IProjectMark, string> myProjectTargets;
    public MsBuildProjectTargetContainer(IReadyImmutableList`1<IMsBuildProjectTargetRequest> requests);
    private static MsBuildProjectTargetContainer();
    [PublicAPIAttribute]
public bool HasTarget(IProjectMark projectMark, string targetName);
    [PublicAPIAttribute]
[NotNullAttribute]
public List`1<string> GetKnownTargetsList(IProjectMark projectMark);
    private sealed virtual override void JetBrains.ProjectModel.ProjectsHost.MsBuild.IMsBuildProjectListener.OnProjectLoaded(IProjectMark projectMark, IProjectDescriptor projectDescriptor, MsBuildProject msBuildProject);
    private IEnumerable`1<string> GetProjectTargets(MsBuildProject msBuildProject);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.ProjectsHost.MsBuild.MsBuildProjectUtils : object {
    public static ISet`1<string> UnsupportedBuildActions;
    public static ISet`1<string> HiddenItems;
    private static MsBuildProjectUtils();
    [ExtensionAttribute]
public static VirtualFileSystemPath GetLink(MsBuildProjectItem projectItem);
    [ExtensionAttribute]
public static bool IsVisible(MsBuildProjectItem projectItem);
    [ExtensionAttribute]
public static string ToPresentableText(RdLoadError loadError);
    [ExtensionAttribute]
public static string ToPresentableText(RdUserMessage message);
    private static string FormatUserMessage(string message, List`1<string> arguments);
}
[SolutionInstanceComponentAttribute("0")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.MsBuildReloadSessionTypeProvider : object {
    private ProjectModelCaches myProjectModelCaches;
    private bool myInitialized;
    public MsBuildReloadSessionTypeProvider(ISolutionLoadTasksScheduler scheduler, ProjectModelCaches projectModelCaches);
    public RdReloadProjectsSessionType GetReloadSessionType();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0();
}
[SolutionInstanceComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.MsBuildRestoreDesignTimeManager : object {
    public virtual bool EnableRestoreDesignTimeBuild();
}
[ProjectsHostComponentAttribute("10")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.MsBuildSessionHolder : object {
    [NotNullAttribute]
private object mySessionLock;
    private Lifetime myLifetime;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private ISolutionToolset mySolutionToolset;
    [NotNullAttribute]
private MsBuildConnectionFactory myConnectionFactory;
    [NotNullAttribute]
private IMsBuildUserProfile myUserProfile;
    [NotNullAttribute]
private ISolutionProcessStartInfoPatcher myProcessStartInfoPatcher;
    [NotNullAttribute]
private IImmutableList`1<IMsBuildModificationSettingsProvider> myModificationSettingsProviders;
    [CanBeNullAttribute]
private MsBuildProjectModelSession mySession;
    [CanBeNullAttribute]
private StartupOutputWriter myOutputWriter;
    [CanBeNullAttribute]
private LifetimeDefinition mySessionLifetimeDef;
    [CompilerGeneratedAttribute]
private Property`1<MsBuildProjectModelSession> <SessionProperty>k__BackingField;
    [NotNullAttribute]
public Property`1<MsBuildProjectModelSession> SessionProperty { get; }
    [NotNullAttribute]
public MsBuildProjectModelSession Session { get; }
    public MsBuildSessionHolder(Lifetime lifetime, ILogger logger, IShellLocks locks, ISolutionToolset solutionToolset, MsBuildConnectionFactory connectionFactory, IMsBuildUserProfile userProfile, ISolutionProcessStartInfoPatcher processStartInfoPatcher, IImmutableList`1<IMsBuildModificationSettingsProvider> modificationSettingsProviders);
    [CompilerGeneratedAttribute]
public Property`1<MsBuildProjectModelSession> get_SessionProperty();
    public MsBuildProjectModelSession get_Session();
    public ExecutionResult TryExecute(Func`2<MsBuildProjectModelSession, T> executor, T& result);
    [NotNullAttribute]
public string GetStartupOutput();
    public void RefreshSession();
    [CanBeNullAttribute]
private MsBuildProjectModelSession CreateSession();
}
[CounterUsagesCollectorAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.MSBuildUsagesCollector : CounterUsagesCollector {
    private EventLogGroup myGroup;
    private EventId2`2<MSBuildIncompatibleReason, string> myIncompatibleMSBuildEvent;
    public MSBuildUsagesCollector(FeatureUsageLogger featureUsageLogger);
    public virtual EventLogGroup GetGroup();
    public void ReportMSBuildIncompatible(ISolution solution, MSBuildIncompatibleReason reason, string code);
}
[SolutionInstanceComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.MsBuildUserProfileBase : object {
    public IReadOnlyDictionary`2<string, string> GlobalProperties { get; }
    public IReadOnlyCollection`1<string> SolutionLoadingTargets { get; }
    public int SolutionLoadingNodesCount { get; }
    public bool SolutionLoadingOrderingEnabled { get; }
    public bool DiffBasedModificationsEnabled { get; }
    public virtual FileSystemPath GetLogPathFor(IBuildTool buildTool);
    public virtual IReadOnlyDictionary`2<string, string> get_GlobalProperties();
    public virtual IReadOnlyCollection`1<string> get_SolutionLoadingTargets();
    public virtual int get_SolutionLoadingNodesCount();
    public virtual bool get_SolutionLoadingOrderingEnabled();
    public virtual bool get_DiffBasedModificationsEnabled();
}
public abstract class JetBrains.ProjectModel.ProjectsHost.MsBuild.MsBuildUserProfileSettingsBase : MsBuildUserProfileBase {
    private IContextBoundSettingsStoreLive myLiveStore;
    public IReadOnlyDictionary`2<string, string> GlobalProperties { get; }
    public IReadOnlyCollection`1<string> SolutionLoadingTargets { get; }
    public int SolutionLoadingNodesCount { get; }
    public bool SolutionLoadingOrderingEnabled { get; }
    protected MsBuildUserProfileSettingsBase(Lifetime lifetime, ISolution solution, ISettingsStore settingsStore, SolutionSettingsReadyForSolutionInstanceComponent _);
    public virtual IReadOnlyDictionary`2<string, string> get_GlobalProperties();
    public virtual IReadOnlyCollection`1<string> get_SolutionLoadingTargets();
    public virtual int get_SolutionLoadingNodesCount();
    public virtual bool get_SolutionLoadingOrderingEnabled();
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.ProjectCapabilitiesProjectTypeGuidProvider : object {
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.ProjectsHost.MsBuild.ProjectCapabilitiesProjectTypeGuidProvider/<GetProjectTypeGuids>d__0")]
public sealed virtual IEnumerable`1<Guid> GetProjectTypeGuids(MsBuildProject msBuildProject);
}
public interface JetBrains.ProjectModel.ProjectsHost.MsBuild.Strategies.IMsBuildLoadModificator {
    public abstract virtual bool IsApplicable(IProjectMark projectMark);
    public abstract virtual void ModifyTargets(List`1<string> targets);
    public abstract virtual void ModifyProperties(IDictionary`2<string, string> properties);
}
public interface JetBrains.ProjectModel.ProjectsHost.MsBuild.Strategies.IMsBuildLoadStrategy {
    [NotNullAttribute]
public abstract virtual IReadOnlyList`1<string> GetRestoreTargets();
    [NotNullAttribute]
public abstract virtual IReadOnlyList`1<string> GetTargets(IProjectMark projectMark);
    [NotNullAttribute]
public abstract virtual IReadOnlyDictionary`2<string, string> GetProperties(IProjectMark projectMark);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Strategies.MsBuildDefaultLoadStrategy : MsBuildLoadStrategyBase {
    public static List`1<string> RestoreTargets;
    public static List`1<string> Targets;
    public static Dictionary`2<string, string> Properties;
    public MsBuildDefaultLoadStrategy(IEnumerable`1<IModificator> modificators);
    private static MsBuildDefaultLoadStrategy();
    protected virtual IReadOnlyList`1<string> GetTargetsInternal(IProjectMark projectMark);
    protected virtual IDictionary`2<string, string> GetPropertiesInternal(IProjectMark projectMark);
    public virtual IReadOnlyList`1<string> GetRestoreTargets();
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Strategies.MsBuildLegacyLoadStrategy : MsBuildLoadStrategyBase {
    private static List`1<string> ourTargets;
    public MsBuildLegacyLoadStrategy(IEnumerable`1<IModificator> modificators);
    private static MsBuildLegacyLoadStrategy();
    protected virtual IReadOnlyList`1<string> GetTargetsInternal(IProjectMark projectMark);
    protected virtual IDictionary`2<string, string> GetPropertiesInternal(IProjectMark projectMark);
    public virtual IReadOnlyList`1<string> GetRestoreTargets();
}
public abstract class JetBrains.ProjectModel.ProjectsHost.MsBuild.Strategies.MsBuildLoadStrategyBase : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IMsBuildLoadModificator> <modificatorList>P;
    protected MsBuildLoadStrategyBase(IEnumerable`1<IMsBuildLoadModificator> modificatorList);
    public abstract virtual IReadOnlyList`1<string> GetRestoreTargets();
    public sealed virtual IReadOnlyList`1<string> GetTargets(IProjectMark projectMark);
    [NotNullAttribute]
protected abstract virtual IReadOnlyList`1<string> GetTargetsInternal(IProjectMark projectMark);
    public sealed virtual IReadOnlyDictionary`2<string, string> GetProperties(IProjectMark projectMark);
    protected abstract virtual IDictionary`2<string, string> GetPropertiesInternal(IProjectMark projectMark);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Strategies.MsBuildLoadStrategySelector : object {
    [CompilerGeneratedAttribute]
private MsBuildDefaultLoadStrategy <defaultLoadStrategy>P;
    [CompilerGeneratedAttribute]
private MsBuildLegacyLoadStrategy <legacyLoadStrategy>P;
    public MsBuildLoadStrategySelector(MsBuildDefaultLoadStrategy defaultLoadStrategy, MsBuildLegacyLoadStrategy legacyLoadStrategy);
    [NotNullAttribute]
public IMsBuildLoadStrategy Select(IBuildTool buildTool, IProjectMark projectMark);
}
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Structure.MsBuildExcludeDirectoryFilter : WildcardWellKnownFolderFilter {
    private ISet`1<VirtualFileSystemPath> myExcludeDirectories;
    public MsBuildExcludeDirectoryFilter(IEnumerable`1<MsBuildProjectPart> projectParts, VirtualFileSystemPath projectDirectory);
    private void AddExcludeDirectory(MsBuildProjectPart project, string propertyName);
    public virtual bool Filter(VirtualFileSystemPath path);
}
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Structure.MsBuildItemTypeFilter : object {
    private ISet`1<BuildAction> myKnownBuildActions;
    public MsBuildItemTypeFilter(ISet`1<BuildAction> knownBuildActions);
    public bool FilterByItemType(string itemType, bool isImportedItem);
}
internal class JetBrains.ProjectModel.ProjectsHost.MsBuild.Structure.MsBuildProjectStructureBuilderForImports : ProjectStructureBuilderOperations`1<RdProjectImport> {
    private IProjectDescriptor myProjectDescriptor;
    private bool myIsApplicable;
    public MsBuildProjectStructureBuilderForImports(IProjectDescriptor projectDescriptor);
    public virtual bool FilterProjectFile(ProjectItemInfo`1<RdProjectImport> projectImportInfo, DuplicateProjectItemsFinder`1<RdProjectImport> duplicateFinder);
    public virtual VirtualFileSystemPath GetLogicalPath(RdProjectImport projectImport, VirtualFileSystemPath physicalPath);
    public virtual VirtualFileSystemPath GetPhysicalPath(RdProjectImport projectImport);
    public virtual BuildAction GetBuildAction(RdProjectImport projectItem);
    public virtual bool IsHidden(ProjectItemInfo`1<RdProjectImport> projectImportInfo, DuplicateProjectItemsFinder`1<RdProjectImport> duplicateFinder);
}
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Structure.MsBuildProjectStructureBuilderForItems : ProjectStructureBuilderOperations`1<MsBuildProjectItem> {
    private MsBuildStructurePatcher myStructurePatcher;
    private MsBuildExcludeDirectoryFilter myExcludeDirectoryFilter;
    private MsBuildActionFilterService myBuildActionFilterService;
    private MsBuildItemTypeFilter myItemTypeFilter;
    private bool myIsSharedProject;
    private HiddenChecker myHiddenChecker;
    private string myAppDesignerFolderName;
    private string myTargetFrameworkMonikerAssemblyAttributesPath;
    private VirtualFileSystemPath myIntermediateDirectory;
    private VirtualFileSystemPath myProjectDirectory;
    private static HashSet`1<BuildAction> ourXamlBuildActions;
    public MsBuildProjectStructureBuilderForItems(MsBuildStructurePatcher structurePatcher, IProjectDescriptor projectDescriptor, MsBuildProjectPart projectPart, MsBuildExcludeDirectoryFilter excludeDirectoryFilter, MsBuildActionFilterService buildActionFilterService, MsBuildDefaultBuildActions msBuildDefaultBuildActions);
    private static MsBuildProjectStructureBuilderForItems();
    public virtual VirtualFileSystemPath GetLogicalPath(MsBuildProjectItem projectItem, VirtualFileSystemPath physicalPath);
    public virtual VirtualFileSystemPath GetPhysicalPath(MsBuildProjectItem projectItem);
    public virtual BuildAction GetBuildAction(MsBuildProjectItem projectItem);
    public virtual bool IsHidden(ProjectItemInfo`1<MsBuildProjectItem> projectItemInfo, DuplicateProjectItemsFinder`1<MsBuildProjectItem> duplicateFinder);
    public virtual bool CanOmitExternalFolder(MsBuildProjectItem projectItem, VirtualFileSystemPath folderPath);
    public virtual bool IsProjectFile(MsBuildProjectItem projectItem);
    public virtual bool UsePhysicalFileName(MsBuildProjectItem projectItem);
    public virtual bool IsAppDesignerFolder(string name);
    public virtual bool FilterProjectFile(MsBuildProjectItem projectItem);
    public virtual bool FilterProjectFile(ProjectItemInfo`1<MsBuildProjectItem> projectItemInfo, DuplicateProjectItemsFinder`1<MsBuildProjectItem> duplicateFinder);
    public virtual bool SkipCodeAnalysis(MsBuildProjectItem projectItem);
}
internal class JetBrains.ProjectModel.ProjectsHost.MsBuild.Structure.MsBuildProjectStructureFileOperationsForImports : ProjectStructureFileOperations`1<RdProjectImport> {
    public MsBuildProjectStructureFileOperationsForImports(IProjectFilePropertiesProvider projectFilePropertiesProvider);
    public virtual IProjectElementOrigin GetOrigin(ProjectTrieNodeFile`1<RdProjectImport> file);
}
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Structure.MsBuildProjectStructureFileOperationsForItems : ProjectStructureFileOperations`1<MsBuildProjectItem> {
    [NotNullAttribute]
private IProjectProperties myProjectProperties;
    [CanBeNullAttribute]
private IMsBuildProjectFilePropertiesBuilder myProjectFilePropertiesBuilder;
    public MsBuildProjectStructureFileOperationsForItems(IProjectDescriptor projectDescriptor, IProjectFilePropertiesProvider projectFilePropertiesProvider, IMsBuildProjectFilePropertiesBuilder projectFilePropertiesBuilder);
    public virtual void BuildProjectFileProperties(ProjectTrieNodeFile`1<MsBuildProjectItem> file, IProjectFileProperties projectFileProperties);
    public virtual IProjectElementOrigin GetOrigin(ProjectTrieNodeFile`1<MsBuildProjectItem> file);
    public virtual bool FilterDuplicate(ProjectTrieNodeFile`1<MsBuildProjectItem> file, ICollection`1<ProjectTrieNodeFile`1<MsBuildProjectItem>> files);
}
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Structure.MsBuildStructurePatcher : object {
    public virtual VirtualFileSystemPath GetLogicalPath(MsBuildProjectItem projectItem, VirtualFileSystemPath path);
    public virtual VirtualFileSystemPath GetPhysicalPath(MsBuildProjectItem projectItem, VirtualFileSystemPath path);
}
[ShellFeaturePartAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Structure.MsBuildStructurePatcherFactory : object {
    public static MsBuildStructurePatcher Create(IFeaturePartsContainer container, IProjectMark projectMark, MsBuildProjectPart projectPart);
    public virtual bool IsApplicable(IProjectMark projectMark);
    [NotNullAttribute]
public virtual MsBuildStructurePatcher Create(IProjectMark projectMark, MsBuildProjectPart projectPart);
}
public static class JetBrains.ProjectModel.ProjectsHost.MsBuild.Wildcards.MsBuildWildcardConstants : object {
    public static Char[] WildcardCharacters;
    public static Char[] WildcardSeparateCharacters;
    public static Char[] DirectorySeparatorCharacters;
    public static string Dotdot;
    public static string AnyCharacterMatch;
    public static string RecursiveDirectoryMatch;
    private static MsBuildWildcardConstants();
}
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Wildcards.MsBuildWildcardPattern : WildcardPattern {
    private static string RecursiveDirGroup;
    private static string RecursiveDirPattern;
    [NotNullAttribute]
public VirtualFileSystemPath RootDirectory;
    [NotNullAttribute]
private string myOriginalPattern;
    [NotNullAttribute]
private Regex myRegex;
    private Nullable`1<bool> mySearchOutsideProjectDirectory;
    public string ShortName { get; }
    public bool AcceptAnyExtension { get; }
    private bool SearchOutsideProjectDirectory { get; }
    public MsBuildWildcardPattern(VirtualFileSystemPath rootDirectory, string originalPattern, string regexPattern, MsBuildWildcardPatternCache cache);
    public virtual string get_ShortName();
    public virtual bool get_AcceptAnyExtension();
    public virtual string GetLongestPrefixBeforeWildCard();
    public virtual MatchResult MatchWith(VirtualFileSystemPath path);
    public bool Equals(MsBuildWildcardPattern other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private bool get_SearchOutsideProjectDirectory();
}
internal static class JetBrains.ProjectModel.ProjectsHost.MsBuild.Wildcards.MsBuildWildcardPatternBuilder : object {
    private static string ourDirectorySeparator;
    private static MsBuildWildcardPatternBuilder();
    [NotNullAttribute]
public static string BuildPattern(VirtualFileSystemPath projectDirectory, string pattern, VirtualFileSystemPath& baseDirectory);
    private static void SplitFileSpec(string filespec, String& fixedDirectoryPart, String& wildcardDirectoryPart, String& filenamePart);
    private static string FixFilePath(string path);
    private static void PreprocessFileSpecForSplitting(string filespec, String& fixedDirectoryPart, String& wildcardDirectoryPart, String& filenamePart);
    private static string GetLongPathName(string path);
    private static string RegularExpressionFromFileSpec(string fixedDirectoryPart, string wildcardDirectoryPart, string filenamePart);
    private static bool IsLegalFileSpec(string wildcardDirectoryPart, string filenamePart);
    private static bool HasDotDot(string str);
    private static bool HasMisplacedRecursiveOperator(string str);
    private static void AppendRegularExpressionFromFixedDirectory(StringBuilder regex, string fixedDir);
    private static void AppendRegularExpressionFromWildcardDirectory(StringBuilder regex, string wildcardDir);
    private static void AppendRegularExpressionFromFilename(StringBuilder regex, string filename);
    private static void AppendRegularExpressionFromChar(StringBuilder regex, char ch);
    private static int LastIndexOfDirectoryOrRecursiveSequence(string str, int startIndex);
    private static int LastIndexOfDirectorySequence(string str, int startIndex);
    private static bool IsSpecialRegexCharacter(char ch);
    private static bool IsAnySlash(char c);
}
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Wildcards.MsBuildWildcardPatternCache : object {
    [NotNullAttribute]
private Dictionary`2<string, Regex> myCache;
    [NotNullAttribute]
public Regex GetOrCreate(string pattern);
}
[ProjectsHostComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.MsBuild.Wildcards.MsBuildWildcardService : object {
    private WildcardContainer myWildcardContainer;
    private MsBuildDefaultBuildActions myDefaultBuildActions;
    private MsBuildWildcardPatternCache myCache;
    public MsBuildWildcardService(WildcardContainer wildcardContainer, MsBuildDefaultBuildActions defaultBuildActions);
    public void BuildWildcardItems(IProjectMark projectMark, MsBuildProject msBuildProject, IProjectDescriptor projectDescriptor, IFolderFilter folderFilter);
    private void BuildWildcardItems(MsBuildProjectPart projectPart, List`1<WildcardData> wildcardDataList, IProjectDescriptor projectDescriptor);
    public static OneToListMap`2<WildcardPattern, WildcardPattern> CreatePatterns(VirtualFileSystemPath projectDirectory, string includes, string excludes, MsBuildWildcardPatternCache cache);
    private static IList`1<WildcardPattern> CreatePatterns(VirtualFileSystemPath projectDirectory, VirtualFileSystemPath rootDirectory, string value, MsBuildWildcardPatternCache cache);
}
[ExtensionAttribute]
internal static class JetBrains.ProjectModel.ProjectsHost.OutputAssemblies.Extensions : object {
    [ExtensionAttribute]
public static Pair`2<ProjectToProjectReferenceBySearchDescriptor, IProjectReferenceProperties> Describe(IProjectToProjectReference reference, IProject project);
    [NotNullAttribute]
public static string GetUnresolvedReason(string projectName);
    [NotNullAttribute]
public static ProjectToProjectReferenceBySearchDescriptor FixProjectReference(IProjectMark targetProject, ProjectToProjectReferenceBySearchDescriptor projectToProjectReference);
}
public interface JetBrains.ProjectModel.ProjectsHost.OutputAssemblies.IOutputAssemblyPathEvaluator {
    public abstract virtual bool IsApplicable(IProjectMark projectMark);
    [CanBeNullAttribute]
public abstract virtual VirtualFileSystemPath Evaluate(IProjectMark projectMark, TargetFrameworkId targetFrameworkId);
}
public class JetBrains.ProjectModel.ProjectsHost.OutputAssemblies.ProjectMarkLocator : ProjectLocatorBase`1<IProjectMark> {
    private Func`2<Guid, IEnumerable`1<IProjectMark>> myByGuid;
    private Func`2<VirtualFileSystemPath, IEnumerable`1<IProjectMark>> myByLocation;
    private Func`2<string, IEnumerable`1<IProjectMark>> myByName;
    public ProjectMarkLocator(ILogger logger, Func`2<Guid, IEnumerable`1<IProjectMark>> byGuid, Func`2<VirtualFileSystemPath, IEnumerable`1<IProjectMark>> byLocation, Func`2<string, IEnumerable`1<IProjectMark>> byName);
    protected virtual IProjectMark GetSolutionProject();
    protected virtual IProjectMark GetMiscFilesProject();
    protected virtual IProjectMark GetOpenFolderProject();
    protected virtual IEnumerable`1<Pair`2<IProjectSearchDescriptor, IProjectMark>> GetProjectsByGuid(Guid projectGuid);
    protected virtual IEnumerable`1<Pair`2<IProjectSearchDescriptor, IProjectMark>> GetProjectsByName(string projectName);
    protected virtual IEnumerable`1<Pair`2<IProjectSearchDescriptor, IProjectMark>> GetProjectsByLocation(VirtualFileSystemPath projectLocation);
    protected virtual IEnumerable`1<Pair`2<IProjectSearchDescriptor, IProjectMark>> GetProjectsByProjectFilePath(VirtualFileSystemPath projectFilePath);
}
[ProjectsHostComponentAttribute("0")]
public class JetBrains.ProjectModel.ProjectsHost.OutputAssemblies.ProjectToOutputAssemblyManager : object {
    private ISolution mySolution;
    private IShellLocks myLocks;
    private IModuleReferencesResolveStore myModuleReferencesResolveStore;
    private ProjectReferenceFactory myProjectReferenceFactory;
    private ProjectToOutputAssemblyStore myProjectToOutputAssemblyStore;
    public ProjectToOutputAssemblyManager(ISolution solution, IShellLocks locks, IModuleReferencesResolveStore moduleReferencesResolveStore, ProjectReferenceFactory projectReferenceFactory, ProjectToOutputAssemblyStore projectToOutputAssemblyStore);
    public void AfterProjectLoaded(IProject project);
    public void BeforeProjectUnloaded(IProject targetProject);
    [NotNullAttribute]
private IProjectToAssemblyReferenceDescriptor CreateDescriptor(IProjectToProjectReference projectReference, IProject originalProject, Dictionary`2<TargetFrameworkId, OutputAssemblyInfo> outputAssemblyInfos);
    [CanBeNullAttribute]
private OutputAssemblyInfo GetOutputAssemblyInfo(IProjectToProjectReference projectReference, IProject originalProject, Dictionary`2<TargetFrameworkId, OutputAssemblyInfo> outputAssemblyInfos);
}
[ProjectsHostComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.OutputAssemblies.ProjectToOutputAssemblyNotification : object {
    public virtual void Notify(IProjectMark projectMark, VirtualFileSystemPath outputAssemblyPath);
}
public class JetBrains.ProjectModel.ProjectsHost.OutputAssemblies.ProjectToOutputAssemblyReferenceData : object {
    [NotNullAttribute]
public IProjectMark OriginalProjectMark;
    [NotNullAttribute]
public ProjectToProjectReferenceBySearchDescriptor ProjectReferenceDescriptor;
    [NotNullAttribute]
public IProjectReferenceProperties ProjectReferenceProperties;
    [NotNullAttribute]
public IProjectToAssemblyReferenceDescriptor OutputAssemblyDescriptor;
    public ProjectToOutputAssemblyReferenceData(IProjectMark originalProjectMark, Pair`2<ProjectToProjectReferenceBySearchDescriptor, IProjectReferenceProperties> projectReferencePair, IProjectToAssemblyReferenceDescriptor outputAssemblyDescriptor);
}
[ProjectsHostComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.OutputAssemblies.ProjectToOutputAssemblyStore : object {
    private OneToListMap`2<IProjectMark, ProjectToOutputAssemblyReferenceData> myProjectToOutputAssemblies;
    private OneToSetMap`2<IProjectMark, IProjectMark> myProjectToDependenciesOutputAssemblies;
    private ProjectMarkLocator myProjectMarkLocator;
    public ProjectToOutputAssemblyStore(ILogger logger);
    public void Add(IProjectMark targetProjectMark, ProjectToOutputAssemblyReferenceData referenceData);
    [NotNullAttribute]
public ICollection`1<ProjectToOutputAssemblyReferenceData> Get(IProjectMark targetProjectMark);
    [NotNullAttribute]
public ICollection`1<IProjectMark> GetDependenciesOutputAssemblies(IProjectMark targetProjectMark);
    private ICollection`1<ProjectToOutputAssemblyReferenceData> TakeOut(IProjectMark targetProjectMark);
    [CompilerGeneratedAttribute]
private IEnumerable`1<IProjectMark> <.ctor>b__3_0(Guid guid);
    [CompilerGeneratedAttribute]
private IEnumerable`1<IProjectMark> <.ctor>b__3_1(VirtualFileSystemPath location);
    [CompilerGeneratedAttribute]
private IEnumerable`1<IProjectMark> <.ctor>b__3_2(string name);
}
[ProjectsHostComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.OutputAssemblies.ProjectToOutputAssemblySwitcher : object {
    private ILogger myLogger;
    private ISolutionMark mySolutionMark;
    private SolutionStructureContainer mySolutionStructureContainer;
    private ProjectToOutputAssemblyNotification myProjectReferenceNotifications;
    private ProjectToOutputAssemblyStore myProjectToOutputAssemblyStore;
    private IImmutableList`1<IOutputAssemblyPathEvaluator> myOutputAssemblyPathEvaluators;
    private ProjectMarkLocator myProjectMarkLocator;
    private IDictionary`2<ProjectTargetFrameworkKey, IProjectToAssemblyReferenceDescriptor> myCache;
    public ProjectToOutputAssemblySwitcher(ILogger logger, ISolutionMark solutionMark, SolutionStructureContainer solutionStructureContainer, ProjectToOutputAssemblyNotification projectReferenceNotifications, ProjectToOutputAssemblyStore projectToOutputAssemblyStore, IImmutableList`1<IOutputAssemblyPathEvaluator> outputAssemblyPathEvaluators);
    [CanBeNullAttribute]
public IProjectReferencesDescriptor Switch(IProjectMark projectMark, IProjectReferencesDescriptor projectReferencesDescriptor);
    [NotNullAttribute]
private SwitchResult SwitchToOutputAssembly(IProjectMark sourceProject, ProjectToProjectReferenceBySearchDescriptor projectToProjectReference, IProjectReferenceProperties properties);
    public void ResetCache();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IProjectMark> <.ctor>b__8_0(Guid guid);
    [CompilerGeneratedAttribute]
private IEnumerable`1<IProjectMark> <.ctor>b__8_1(VirtualFileSystemPath location);
    [CompilerGeneratedAttribute]
private IEnumerable`1<IProjectMark> <.ctor>b__8_2(string name);
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.ProjectsHost.ProjectHostItemOrigin : object {
    private Dictionary`2<string, string> myExplicitMetadata;
    [NotNullAttribute]
public IProjectHostItemDescriptor Descriptor;
    public string ItemType { get; }
    public Dictionary`2<string, string> Metadata { get; }
    public ProjectHostItemOrigin(IProjectHostItemDescriptor descriptor, Dictionary`2<string, string> explicitMetadata);
    public sealed virtual bool CanModify(String& reason);
    public sealed virtual string get_ItemType();
    public sealed virtual Dictionary`2<string, string> get_Metadata();
}
public class JetBrains.ProjectModel.ProjectsHost.ProjectHostLogRequest : object {
    private FileSystemPath myPath;
    [NotNullAttribute]
public FileSystemPath Path { get; public set; }
    public FileSystemPath get_Path();
    public void set_Path(FileSystemPath value);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.ProjectsHost.ProjectLoadRequesterExtensions : object {
    [ExtensionAttribute]
public static bool Is(IProjectLoadRequester requester);
}
public abstract class JetBrains.ProjectModel.ProjectsHost.ProjectMarkBase : UserDataHolder {
    [NotNullAttribute]
private Signal`1<ProjectMarkChange> myUpdateSignal;
    [NotNullAttribute]
private HashSet`1<IProjectMark> myChildren;
    [CanBeNullAttribute]
private ProjectMarkBase myParent;
    [CompilerGeneratedAttribute]
private ISolutionMark <SolutionMark>k__BackingField;
    public ISolutionMark SolutionMark { get; }
    public IProjectConfigurationAndPlatform ActiveConfigurationAndPlatform { get; }
    public bool IsSolutionFolder { get; }
    public bool IsModifiable { get; }
    public string Name { get; }
    public VirtualFileSystemPath Location { get; }
    public Guid Guid { get; }
    public Guid TypeGuid { get; }
    public string UniqueProjectName { get; }
    public IProjectMark Parent { get; }
    public IEnumerable`1<IProjectMark> Children { get; }
    public ISource`1<ProjectMarkChange> Updated { get; }
    protected ProjectMarkBase(ISolutionMark solutionMark);
    [CompilerGeneratedAttribute]
public sealed virtual ISolutionMark get_SolutionMark();
    public abstract virtual IProjectConfigurationAndPlatform get_ActiveConfigurationAndPlatform();
    public abstract virtual bool get_IsSolutionFolder();
    public virtual bool get_IsModifiable();
    public abstract virtual string get_Name();
    public abstract virtual VirtualFileSystemPath get_Location();
    public abstract virtual Guid get_Guid();
    public abstract virtual Guid get_TypeGuid();
    public virtual string get_UniqueProjectName();
    public sealed virtual IProjectMark get_Parent();
    public sealed virtual IEnumerable`1<IProjectMark> get_Children();
    public sealed virtual ISource`1<ProjectMarkChange> get_Updated();
    protected void OnUpdate(Action updateAction);
    public sealed virtual void UpdateParent(IProjectMark parent);
    public sealed virtual void Detach();
    public sealed virtual void IterateChildren(TContext context, Action`2<IProjectMark, TContext> childProcessor);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private void <Detach>b__31_0();
}
public class JetBrains.ProjectModel.ProjectsHost.ProjectMarkChange : object {
    [CompilerGeneratedAttribute]
private IProjectMark <Mark>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectMarkSnapshot <Old>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectMarkSnapshot <New>k__BackingField;
    [NotNullAttribute]
public IProjectMark Mark { get; }
    [NotNullAttribute]
public ProjectMarkSnapshot Old { get; }
    [NotNullAttribute]
public ProjectMarkSnapshot New { get; }
    public ProjectMarkChange(IProjectMark mark, ProjectMarkSnapshot old, ProjectMarkSnapshot new);
    [CompilerGeneratedAttribute]
public IProjectMark get_Mark();
    [CompilerGeneratedAttribute]
public ProjectMarkSnapshot get_Old();
    [CompilerGeneratedAttribute]
public ProjectMarkSnapshot get_New();
}
[CannotApplyEqualityOperatorAttribute]
public class JetBrains.ProjectModel.ProjectsHost.ProjectMarkSnapshot : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectMark <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <TypeGuid>k__BackingField;
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public VirtualFileSystemPath Location { get; }
    [CanBeNullAttribute]
public IProjectMark Parent { get; }
    public Guid Guid { get; }
    public Guid TypeGuid { get; }
    public ProjectMarkSnapshot(IProjectMark projectMark);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_Location();
    [CompilerGeneratedAttribute]
public IProjectMark get_Parent();
    [CompilerGeneratedAttribute]
public Guid get_Guid();
    [CompilerGeneratedAttribute]
public Guid get_TypeGuid();
    public sealed virtual bool Equals(ProjectMarkSnapshot other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum JetBrains.ProjectModel.ProjectsHost.ProjectMarkState : Enum {
    public int value__;
    public static ProjectMarkState Pending;
    public static ProjectMarkState Success;
    public static ProjectMarkState Error;
    public static ProjectMarkState Unloaded;
    public static ProjectMarkState Filtered;
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute("8")]
[ComponentInstantiationAttribute("-32758")]
public class JetBrains.ProjectModel.ProjectsHost.ProjectsHostComponentAttribute : ProductComponentAttribute {
    public ProjectsHostComponentAttribute(Instantiation instantiation);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.ProjectsHost.ProjectsHostExtensions : object {
    public static Key`1<ISolutionMark> SolutionMarkKey;
    public static Key`1<IProjectMark> ProjectMarkKey;
    public static Key ProjectMarkDependencyKey;
    private static ProjectsHostExtensions();
    [ExtensionAttribute]
[CanBeNullAttribute]
[PureAttribute]
public static ISolutionMark GetSolutionMark(ISolution solution);
    [ExtensionAttribute]
[CanBeNullAttribute]
[PureAttribute]
public static IProjectMark GetProjectMark(IProject project);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsDependantProjectMark(IProjectDescriptor projectDescriptor);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsDependantProjectMark(IProject project);
    [ExtensionAttribute]
[CanBeNullAttribute]
[PureAttribute]
public static IProjectMark GetProjectMark(IProjectDescriptor projectDescriptor);
    [ExtensionAttribute]
[CanBeNullAttribute]
[PureAttribute]
public static IProject GetProjectByMark(ISolution solution, IProjectMark projectMark);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static IReadOnlyCollection`1<IProject> GetProjectsByMark(ISolution solution, IProjectMark projectMark);
    [ExtensionAttribute]
public static string GetUniqueProjectName(IProject project);
    [ExtensionAttribute]
public static string GetUniqueProjectName(IProjectDefinition projectDefinition);
    public static string GetUniqueProjectName(string name, Guid guid);
    [ExtensionAttribute]
public static string GetActualProjectName(IProjectDefinition projectDefinition);
    [ExtensionAttribute]
public static IReadOnlyCollection`1<VirtualFileSystemPath> GetAllSolutionPaths(ISolutionMark solutionMark);
    [ExtensionAttribute]
[NotNullAttribute]
public static BuildAction GetBestBuildActionForProjectItem(IProjectFile projectFile);
    [ExtensionAttribute]
private static BuildAction GetBestBuildActionForProjectItemFromProjectModel(IProjectFile projectFile);
}
public class JetBrains.ProjectModel.ProjectsHost.ProjectStructure.DuplicateProjectItemsFinder`1 : object {
    private OneToListMap`2<VirtualFileSystemPath, ProjectItemInfo`1<TProjectItem>> myLogicalMapping;
    private OneToListMap`2<VirtualFileSystemPath, ProjectItemInfo`1<TProjectItem>> myPhysicalMapping;
    public DuplicateProjectItemsFinder`1(IEnumerable`1<ProjectItemInfo`1<TProjectItem>> projectItemInfos);
    public ICollection`1<TProjectItem> FindDuplicates(ProjectItemInfo`1<TProjectItem> projectItemInfo, bool filterDifferentPhysicalPaths);
}
public class JetBrains.ProjectModel.ProjectsHost.ProjectStructure.ProjectItemInfo`1 : ValueType {
    [CompilerGeneratedAttribute]
private TProjectItem <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <PhysicalPath>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <LogicalPath>k__BackingField;
    public TProjectItem Item { get; }
    public VirtualFileSystemPath PhysicalPath { get; }
    public VirtualFileSystemPath LogicalPath { get; }
    public ProjectItemInfo`1(TProjectItem item, VirtualFileSystemPath physicalPath, VirtualFileSystemPath logicalPath);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public TProjectItem get_Item();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public VirtualFileSystemPath get_PhysicalPath();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public VirtualFileSystemPath get_LogicalPath();
}
public class JetBrains.ProjectModel.ProjectsHost.ProjectStructure.ProjectStructureBuilder`1 : object {
    [NotNullAttribute]
public IProjectDescriptor ProjectDescriptor;
    [NotNullAttribute]
private IReadOnlyList`1<IMsBuildDescriptorStructureModificator> myModificators;
    private ProjectTrieNodeProject`1<TProjectItem> myProjectNode;
    private VirtualFileSystemPath myProjectDirectory;
    public ProjectStructureBuilder`1(IProjectDescriptor projectDescriptor, IReadOnlyList`1<IMsBuildDescriptorStructureModificator> modificators);
    public void Add(IEnumerable`1<TProjectItem> projectItems, TargetFrameworkId targetFramework, ProjectStructureBuilderOperations`1<TProjectItem> operations);
    public void Build(ProjectStructureFileOperations`1<TProjectItem> operations);
    [NotNullAttribute]
private VirtualFileSystemPath EnsureAbsolute(VirtualFileSystemPath path);
    [NotNullAttribute]
private VirtualFileSystemPath GetActualLogicalPath(TProjectItem projectItem, VirtualFileSystemPath physicalPath, ProjectStructureBuilderOperations`1<TProjectItem> operations);
    [NotNullAttribute]
private VirtualFileSystemPath GetActualPhysicalPath(TProjectItem projectItem, ProjectStructureBuilderOperations`1<TProjectItem> operations);
    private void AddItem(VirtualFileSystemPath physicalPath, VirtualFileSystemPath logicalPath, TProjectItem projectItem, TargetFrameworkId targetFramework, ProjectStructureBuilderOperations`1<TProjectItem> operations, bool isHidden);
    private void AddFile(ProjectTrieNodeFolder`1<TProjectItem> parent, string name, VirtualFileSystemPath physicalPath, TProjectItem projectItem, ProjectStructureBuilderOperations`1<TProjectItem> operations, TargetFrameworkId targetFramework, bool isHidden);
    private StringSlice FixRootName(StringSlice name);
    private ProjectTrieNodeFolder`1<TProjectItem> AddFolder(ProjectTrieNodeFolder`1<TProjectItem> parent, ProjectStructureBuilderOperations`1<TProjectItem> operations, string name, VirtualFileSystemPath physicalPath, bool allowsNonExistence, bool isExternalToProject, bool isOptional, bool isHidden);
}
public abstract class JetBrains.ProjectModel.ProjectsHost.ProjectStructure.ProjectStructureBuilderOperations`1 : object {
    [CanBeNullAttribute]
public abstract virtual VirtualFileSystemPath GetLogicalPath(TProjectItem projectItem, VirtualFileSystemPath physicalPath);
    [NotNullAttribute]
public abstract virtual VirtualFileSystemPath GetPhysicalPath(TProjectItem projectItem);
    public abstract virtual BuildAction GetBuildAction(TProjectItem projectItem);
    public abstract virtual bool IsHidden(ProjectItemInfo`1<TProjectItem> projectItemInfo, DuplicateProjectItemsFinder`1<TProjectItem> duplicateFinder);
    public virtual bool IsProjectFile(TProjectItem projectItem);
    public virtual bool UsePhysicalFileName(TProjectItem projectItem);
    public virtual bool FilterProjectFile(TProjectItem projectItem);
    public virtual bool SkipCodeAnalysis(TProjectItem projectItem);
    public virtual bool FilterProjectFile(ProjectItemInfo`1<TProjectItem> projectItemInfo, DuplicateProjectItemsFinder`1<TProjectItem> duplicateFinder);
    public virtual bool IsAppDesignerFolder(string name);
    public virtual bool CanOmitExternalFolder(TProjectItem projectItem, VirtualFileSystemPath folderPath);
}
public abstract class JetBrains.ProjectModel.ProjectsHost.ProjectStructure.ProjectStructureFileOperations`1 : object {
    [CompilerGeneratedAttribute]
private IProjectFilePropertiesProvider <ProjectFilePropertiesProvider>k__BackingField;
    [NotNullAttribute]
public IProjectFilePropertiesProvider ProjectFilePropertiesProvider { get; }
    public ProjectStructureFileOperations`1(IProjectFilePropertiesProvider projectFilePropertiesProvider);
    [CompilerGeneratedAttribute]
public IProjectFilePropertiesProvider get_ProjectFilePropertiesProvider();
    [NotNullAttribute]
public abstract virtual IProjectElementOrigin GetOrigin(ProjectTrieNodeFile`1<TProjectItem> file);
    public virtual void BuildProjectFileProperties(ProjectTrieNodeFile`1<TProjectItem> file, IProjectFileProperties projectFileProperties);
    public virtual bool FilterDuplicate(ProjectTrieNodeFile`1<TProjectItem> file, ICollection`1<ProjectTrieNodeFile`1<TProjectItem>> files);
}
public class JetBrains.ProjectModel.ProjectsHost.ProjectStructure.ProjectTrieNodeFile`1 : object {
    [NotNullAttribute]
public VirtualFileSystemPath PhysicalPath;
    [CanBeNullAttribute]
public string Name;
    public CompactList`1<Pair`2<TargetFrameworkId, BuildAction>> BuildActions;
    public CompactList`1<TProjectItem> ProjectItems;
    public bool IsHidden;
    public ProjectTrieNodeFile`1(VirtualFileSystemPath physicalPath, string name);
    public bool Contains(TargetFrameworkId targetFramework);
    public bool Contains(BuildAction buildAction);
    public void BuildDescriptors(IProjectFolderDescriptor parentFolderDescriptor, ProjectStructureFileOperations`1<TProjectItem> operations);
    private IProjectFileProperties CreateProjectFileProperties(ProjectStructureFileOperations`1<TProjectItem> operations);
}
public class JetBrains.ProjectModel.ProjectsHost.ProjectStructure.ProjectTrieNodeFileKey : object {
    [NotNullAttribute]
public VirtualFileSystemPath FileLocation;
    public ProjectTrieNodeFileKey(VirtualFileSystemPath fileLocation);
    public sealed virtual bool Equals(ProjectTrieNodeFileKey other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ProjectModel.ProjectsHost.ProjectStructure.ProjectTrieNodeFolder`1 : object {
    [NotNullAttribute]
public VirtualFileSystemPath ProjectPhysicalPath;
    [NotNullAttribute]
private HashSet`1<VirtualFileSystemPath> myPhysicalPaths;
    [NotNullAttribute]
private Dictionary`2<string, int> myCasingNames;
    public bool HasVisibleItems;
    public bool AllowsNonExistence;
    public bool IsExternalToProjectAndOptional;
    public bool IsAppDesigner;
    public Dictionary`2<ProjectTrieNodeFolderKey, ProjectTrieNodeFolder`1<TProjectItem>> ChildrenFolders;
    public OneToListMap`2<ProjectTrieNodeFileKey, ProjectTrieNodeFile`1<TProjectItem>> ChildrenFiles;
    public ProjectTrieNodeFolder`1(VirtualFileSystemPath projectPhysicalPath);
    public void WithName(string name);
    public void WithPhysicalPath(VirtualFileSystemPath physicalPath);
    public void BuildDescriptors(IProjectFolderDescriptor parentFolderDescriptor, ProjectStructureFileOperations`1<TProjectItem> operations, bool forceExpandingTree);
    public void BuildChildDescriptors(IProjectFolderDescriptor parentFolderDescriptor, ProjectStructureFileOperations`1<TProjectItem> operations);
    [NotNullAttribute]
private ProjectFolderDescriptor CreateDescriptor(IProjectFolderDescriptor parentFolderDescriptor);
    public VirtualFileSystemPath GetPhysicalPath();
    public string GetName();
}
public class JetBrains.ProjectModel.ProjectsHost.ProjectStructure.ProjectTrieNodeFolderKey : object {
    [NotNullAttribute]
public string FolderName;
    public ProjectTrieNodeFolderKey(string folderName);
    public ProjectTrieNodeFolderKey(ProjectFolderDescriptor projectFolderDescriptor);
    public sealed virtual bool Equals(ProjectTrieNodeFolderKey other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ProjectModel.ProjectsHost.ProjectStructure.ProjectTrieNodeProject`1 : ProjectTrieNodeFolder`1<TProjectItem> {
    [NotNullAttribute]
private IProjectDescriptor myProjectDescriptor;
    public ProjectTrieNodeProject`1(IProjectDescriptor projectDescriptor);
    public void BuildDescriptors(ProjectStructureFileOperations`1<TProjectItem> operations);
    private static void MergeFolders(IProjectFolderDescriptor descriptor, VirtualFileSystemPath projectDirectory);
    private static void RemoveExcessiveNestedness(IProjectDescriptor projectDescriptor, VirtualFileSystemPath projectDirectory);
}
public class JetBrains.ProjectModel.ProjectsHost.RelativeTo : object {
    public IProjectItem ReferenceItem;
    public RelativeToType Type;
    public RelativeTo(IProjectItem referenceItem, RelativeToType type);
}
public enum JetBrains.ProjectModel.ProjectsHost.RelativeToType : Enum {
    public int value__;
    public static RelativeToType After;
    public static RelativeToType Before;
    public static RelativeToType Inside;
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ProjectModel.ProjectsHost.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string ConfiguresVcxProjectFilterSettingsSettingDescription { get; }
    public static string UseVcsProjectFiltersSettingDescription { get; }
    public static string Solution_Text { get; }
    public static string Environment_Text { get; }
    public static string _IsRequiredToLoad_ButNotFound_Caption { get; }
    public static string _IsRequiredToLoadAndBuildTheProject_Text { get; }
    public static string _NotFound_Text { get; }
    public static string Project_ContainsDifferentVersionsOf_Text { get; }
    public static string Project_LoadFailed_Text { get; }
    public static string Project_LoadedWithUnsupportedNetSdk_Text { get; }
    public static string Project_LoadFinishedWithWarnings_Text { get; }
    public static string Solution_LoadFailed_Text { get; }
    public static string Solution_LoadFinishedWithWarnings_Text { get; }
    public static string Project_IsNotSupported_Text { get; }
    public static string Project_WasFiltered_Text { get; }
    public static string Project_WasNotLoaded_Text { get; }
    public static string Project_DoesNotHaveConfiguration__Caption { get; }
    public static string Configuration_IsDefinedInTheSolution_Text { get; }
    public static string InvalidProjectConfigurationFound_Text { get; }
    public static string Project_WillBeExcludedFromBuild_Text { get; }
    public static string TheSolutionDoesNotContainAnyProject_Text { get; }
    public static string TheSolutionDoesNotContainAnyProject_Text2 { get; }
    public static string Project_IsNotConfiguredFor_InTheCurrent_Text { get; }
    public static string ProjectIsNotConfiguredInTheCurrentSolution_Text { get; }
    public static string UnknownToolsetVersionSpecifiedInProject_Caption { get; }
    public static string ProjectToolsVersionIs_ThisToolsetMay_Text { get; }
    public static string UnknownToolsetVersionSpecifiedInProject_Text { get; }
    public static string MSBuildCanNotImport_RequiredForProject_Caption { get; }
    public static string MakeSureThatAllSDKsAndComponentsRequired_Text { get; }
    public static string MSBuildCanNotImportTargetsRequiredFor_Text { get; }
    public static string MissingWorkloadsFoundInProject__Caption { get; }
    public static string ToLoadAndBuild_ProjectTheFollowingWorkloads_Text { get; }
    public static string DotnetWorkloadInstall__Text { get; }
    public static string SudoDotnetWorkloadInstall__Text { get; }
    public static string MissingWorkloadsFound_Text { get; }
    public static string _ProjectLoadingError_Text { get; }
    public static string _ProjectLoadingWarning_Text { get; }
    public static string Project_HasMissingPackages_Text { get; }
    public static string MissingPackagesFound_Text { get; }
    public static string UnableToConnectToMSBuildProcessToLoad_Caption { get; }
    public static string MSBuildProcessWasStartedFrom_ButIDE_Text { get; }
    public static string UnableToConnectToMSBuildProcess_Text { get; }
    public static string CanNotStartMSBuildProcessToLoadProject_Caption { get; }
    public static string MSBuildProcessWasNotStarted__Text { get; }
    public static string CanNotStartMSBuildProcess_Text { get; }
    public static string MSBuildIsRequiredToLoadProject_ButNot_Caption { get; }
    public static string MSBuildMicrosoftBuildEngineIsRequired_Text { get; }
    public static string MSBuildNotFound_Text { get; }
    public static string DuplicateReferencesWereFoundInProject_Text { get; }
    public static string DuplicateReferencesWereFound_Text { get; }
    public static string ItCouldCauseBuildErrors_Text { get; }
    public static string CannotLoadProject_DebuggerProjectSystem_Text { get; }
    public static string CannotLoadProject_File_NotFound_Text { get; }
    public static string ProjectFileNotFound_Text { get; }
    public static string LegacyInstallerProject_IsNotSupported_Text { get; }
    public static string CannotLoadWebSite__Text { get; }
    public static string CannotLoadWebSite_WebSiteLocationNot_Text { get; }
    public static string WebSiteRootFolder_NotFound_Text { get; }
    public static string CanNotDetermineWebSiteTargetFramework_Text { get; }
    public static string DuplicateSolutionConfiguration_IsIgnored_Text { get; }
    public static string TheFollowingProjectsHaveTheSameProjectGuid_Text { get; }
    public static string IgnoreChildParentRelationshipBetween_Text { get; }
    public static string ProjectWithProjectGuid_AlreadyHasParent_Text { get; }
    public static string CanNotParseProjectFilePath_AsARelative_Text { get; }
    public static string ProjectFilePathIsEmpty_Text { get; }
    public static string UnexpectedErrorDuringProjectLoading_Text { get; }
    public static string Filtered_Text { get; }
    public static string CanTResolveReference___Text { get; }
    public static string ProjectReference_HasIncorrectPathNReference_Text { get; }
    public static string CanTResolveReferenceTo__Text { get; }
    public static string TargetFrameworkMismatchingCanTReference_Text { get; }
    public static string ReferenceWasnTResolvedByMsBuild_Text { get; }
    public static string Project_OrItsOutputAssemblyWasNotFound_Text { get; }
    public static string NHintPath__Text { get; }
    public static string Error_Presentation_Text { get; }
    public static string Process_Text { get; }
    public static string MSBuildIncompatibleWithNETSDK_Text { get; }
    public static string DotNetSDK_RequiresMsBuild_OrAboveCurrent_Text { get; }
    public static string InvalidGlobalJson_Title { get; }
    public static string InvalidGlobalJson_Text { get; }
    public static string RiderDoesNotSupportNETCoreSDK1XAnd2_Text { get; }
    public static string NETCore_SDKIsCurrentlyUsedToBuildAnd_Text { get; }
    public static string UnableToLocateNETSDK_Title { get; }
    public static string UnableToLocateNETSDK_WithVersion_Text { get; }
    public static string UnableToLocateNETSDK_Description { get; }
    public static string UnableToLocateNETSDK_WithVersion_Description { get; }
    public static string FailedToEditProjectFileConflictEncountered_Text { get; }
    public static string ProjectModificationFailed_Text { get; }
    public static string Duplicate_Reference_Message_Assemblies_Only { get; }
    public static string Duplicate_References_Message_Ass_And_Projs { get; }
    public static string Duplicate_References_Projects_Only { get; }
    public static string MSBuild_CannotStartBuildingProject { get; }
    public static string MSBuild_CannotLoadProject { get; }
    public static string MSBuild_CannotUnloadProject { get; }
    public static string MSBuild_ProjectFileNotFound { get; }
    public static string MSBuild_DuplicateInputParameters { get; }
    public static string MSBuild_ProjectFilePathTooLong { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_ConfiguresVcxProjectFilterSettingsSettingDescription();
    public static string get_UseVcsProjectFiltersSettingDescription();
    public static string get_Solution_Text();
    public static string get_Environment_Text();
    public static string get__IsRequiredToLoad_ButNotFound_Caption();
    public static string get__IsRequiredToLoadAndBuildTheProject_Text();
    public static string get__NotFound_Text();
    public static string get_Project_ContainsDifferentVersionsOf_Text();
    public static string get_Project_LoadFailed_Text();
    public static string get_Project_LoadedWithUnsupportedNetSdk_Text();
    public static string get_Project_LoadFinishedWithWarnings_Text();
    public static string get_Solution_LoadFailed_Text();
    public static string get_Solution_LoadFinishedWithWarnings_Text();
    public static string get_Project_IsNotSupported_Text();
    public static string get_Project_WasFiltered_Text();
    public static string get_Project_WasNotLoaded_Text();
    public static string get_Project_DoesNotHaveConfiguration__Caption();
    public static string get_Configuration_IsDefinedInTheSolution_Text();
    public static string get_InvalidProjectConfigurationFound_Text();
    public static string get_Project_WillBeExcludedFromBuild_Text();
    public static string get_TheSolutionDoesNotContainAnyProject_Text();
    public static string get_TheSolutionDoesNotContainAnyProject_Text2();
    public static string get_Project_IsNotConfiguredFor_InTheCurrent_Text();
    public static string get_ProjectIsNotConfiguredInTheCurrentSolution_Text();
    public static string get_UnknownToolsetVersionSpecifiedInProject_Caption();
    public static string get_ProjectToolsVersionIs_ThisToolsetMay_Text();
    public static string get_UnknownToolsetVersionSpecifiedInProject_Text();
    public static string get_MSBuildCanNotImport_RequiredForProject_Caption();
    public static string get_MakeSureThatAllSDKsAndComponentsRequired_Text();
    public static string get_MSBuildCanNotImportTargetsRequiredFor_Text();
    public static string get_MissingWorkloadsFoundInProject__Caption();
    public static string get_ToLoadAndBuild_ProjectTheFollowingWorkloads_Text();
    public static string get_DotnetWorkloadInstall__Text();
    public static string get_SudoDotnetWorkloadInstall__Text();
    public static string get_MissingWorkloadsFound_Text();
    public static string get__ProjectLoadingError_Text();
    public static string get__ProjectLoadingWarning_Text();
    public static string get_Project_HasMissingPackages_Text();
    public static string get_MissingPackagesFound_Text();
    public static string get_UnableToConnectToMSBuildProcessToLoad_Caption();
    public static string get_MSBuildProcessWasStartedFrom_ButIDE_Text();
    public static string get_UnableToConnectToMSBuildProcess_Text();
    public static string get_CanNotStartMSBuildProcessToLoadProject_Caption();
    public static string get_MSBuildProcessWasNotStarted__Text();
    public static string get_CanNotStartMSBuildProcess_Text();
    public static string get_MSBuildIsRequiredToLoadProject_ButNot_Caption();
    public static string get_MSBuildMicrosoftBuildEngineIsRequired_Text();
    public static string get_MSBuildNotFound_Text();
    public static string get_DuplicateReferencesWereFoundInProject_Text();
    public static string get_DuplicateReferencesWereFound_Text();
    public static string get_ItCouldCauseBuildErrors_Text();
    public static string get_CannotLoadProject_DebuggerProjectSystem_Text();
    public static string get_CannotLoadProject_File_NotFound_Text();
    public static string get_ProjectFileNotFound_Text();
    public static string get_LegacyInstallerProject_IsNotSupported_Text();
    public static string get_CannotLoadWebSite__Text();
    public static string get_CannotLoadWebSite_WebSiteLocationNot_Text();
    public static string get_WebSiteRootFolder_NotFound_Text();
    public static string get_CanNotDetermineWebSiteTargetFramework_Text();
    public static string get_DuplicateSolutionConfiguration_IsIgnored_Text();
    public static string get_TheFollowingProjectsHaveTheSameProjectGuid_Text();
    public static string get_IgnoreChildParentRelationshipBetween_Text();
    public static string get_ProjectWithProjectGuid_AlreadyHasParent_Text();
    public static string get_CanNotParseProjectFilePath_AsARelative_Text();
    public static string get_ProjectFilePathIsEmpty_Text();
    public static string get_UnexpectedErrorDuringProjectLoading_Text();
    public static string get_Filtered_Text();
    public static string get_CanTResolveReference___Text();
    public static string get_ProjectReference_HasIncorrectPathNReference_Text();
    public static string get_CanTResolveReferenceTo__Text();
    public static string get_TargetFrameworkMismatchingCanTReference_Text();
    public static string get_ReferenceWasnTResolvedByMsBuild_Text();
    public static string get_Project_OrItsOutputAssemblyWasNotFound_Text();
    public static string get_NHintPath__Text();
    public static string get_Error_Presentation_Text();
    public static string get_Process_Text();
    public static string get_MSBuildIncompatibleWithNETSDK_Text();
    public static string get_DotNetSDK_RequiresMsBuild_OrAboveCurrent_Text();
    public static string get_InvalidGlobalJson_Title();
    public static string get_InvalidGlobalJson_Text();
    public static string get_RiderDoesNotSupportNETCoreSDK1XAnd2_Text();
    public static string get_NETCore_SDKIsCurrentlyUsedToBuildAnd_Text();
    public static string get_UnableToLocateNETSDK_Title();
    public static string get_UnableToLocateNETSDK_WithVersion_Text();
    public static string get_UnableToLocateNETSDK_Description();
    public static string get_UnableToLocateNETSDK_WithVersion_Description();
    public static string get_FailedToEditProjectFileConflictEncountered_Text();
    public static string get_ProjectModificationFailed_Text();
    public static string get_Duplicate_Reference_Message_Assemblies_Only();
    public static string get_Duplicate_References_Message_Ass_And_Projs();
    public static string get_Duplicate_References_Projects_Only();
    public static string get_MSBuild_CannotStartBuildingProject();
    public static string get_MSBuild_CannotLoadProject();
    public static string get_MSBuild_CannotUnloadProject();
    public static string get_MSBuild_ProjectFileNotFound();
    public static string get_MSBuild_DuplicateInputParameters();
    public static string get_MSBuild_ProjectFilePathTooLong();
}
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.AddProjectRequest : object {
    [CompilerGeneratedAttribute]
private ProjectDefinitionDescriptor <Descriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectDefinitionDescriptor <ParentDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectMark <ParentMark>k__BackingField;
    [NotNullAttribute]
public ProjectDefinitionDescriptor Descriptor { get; }
    [CanBeNullAttribute]
public ProjectDefinitionDescriptor ParentDescriptor { get; }
    [CanBeNullAttribute]
public IProjectMark ParentMark { get; }
    public AddProjectRequest(ProjectDefinitionDescriptor descriptor, ProjectDefinitionDescriptor parentDescriptor, IProjectMark parentMark);
    [CompilerGeneratedAttribute]
public ProjectDefinitionDescriptor get_Descriptor();
    [CompilerGeneratedAttribute]
public ProjectDefinitionDescriptor get_ParentDescriptor();
    [CompilerGeneratedAttribute]
public IProjectMark get_ParentMark();
}
[ZoneDefinitionAttribute]
public interface JetBrains.ProjectModel.ProjectsHost.SolutionHost.IHostSolutionZone {
}
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.Impl.AsyncReloadQueue : object {
    private static string OperationName;
    [NotNullAttribute]
private ISolutionHost mySolutionHost;
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private IProjectModelMonitor myProjectModelMonitor;
    [NotNullAttribute]
private HashSet`1<IProjectMark> mySuspendAsyncReloadQueue;
    [NotNullAttribute]
private HashSet`1<IProjectLoadRequester> myRequesters;
    private int myPendingSuspendCookies;
    private ILogger myLogger;
    public AsyncReloadQueue(ISolutionHost solutionHost, IShellLocks locks, IProjectModelMonitor projectModelMonitor);
    public void Suspend(Lifetime lifetime);
    public bool Enqueue(IEnumerable`1<IProjectMark> projectMarksEnumerable, IProjectLoadRequester requester);
    private void TryReload();
}
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.Impl.AsyncSolution : object {
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private Task <InitializationTask>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public ISolution Solution { get; public set; }
    public Task InitializationTask { get; public set; }
    public AsyncSolution(ISolution Solution, Task InitializationTask);
    [CompilerGeneratedAttribute]
protected AsyncSolution(AsyncSolution original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ISolution get_Solution();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Solution(ISolution value);
    [CompilerGeneratedAttribute]
public Task get_InitializationTask();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_InitializationTask(Task value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(AsyncSolution left, AsyncSolution right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(AsyncSolution left, AsyncSolution right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(AsyncSolution other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual AsyncSolution <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(ISolution& Solution, Task& InitializationTask);
}
[SolutionInstanceComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.Impl.DefaultUnloadedProjectsManager : object {
    public virtual bool IsProjectUnloaded(IProjectMark projectMark);
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.Impl.DuplicateReferencesAnalyzer : SolutionHostSyncListener {
    private ISolution mySolution;
    private DiagnosticController`1<IProjectMark> myDiagnosticController;
    public DuplicateReferencesAnalyzer(Lifetime lifetime, ISolution solution, IDiagnosticCollector collector);
    public virtual void AfterUpdateProjects(ProjectStructureChange change);
    private IReadOnlyCollection`1<DuplicateReferenceData> GetDiagnosticMessages(IProjectMark projectMark);
}
[ProjectsHostComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.Impl.ProjectDependenciesCalculator : object {
    private static string SectionName;
    [NotNullAttribute]
private ISolutionStructureContainer myContainer;
    public ProjectDependenciesCalculator(ISolutionStructureContainer container);
    [NotNullAttribute]
public IDictionary`2<IProjectMark, ISet`1<IProjectMark>> GetDependencies();
    [NotNullAttribute]
public ISet`1<IProjectMark> GetDependencies(IProjectMark projectMark, bool transitive);
    private void GetDependenciesInternal(IProjectMark projectMark, HashSet`1<IProjectMark> result, HashSet`1<IProjectMark> visited, bool transitive);
}
[ProjectsHostComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.Impl.ProjectHostReloadTaskExecutor : object {
    public virtual bool IsReady(bool async);
    public virtual void Execute(Func`1<ProjectStructureChange> executeAction, Action`1<ProjectStructureChange> notifyAction, bool async);
    [AssertionMethodAttribute]
public void AssertIsReady(bool async);
}
[SolutionInstanceComponentAttribute("18")]
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.Impl.ProjectModelMonitor : SolutionHostSyncListener {
    private ILogger myLogger;
    private IShellLocks myLocks;
    private ISolutionHostLoadingQueue mySolutionHostLoadingQueue;
    private ViewableProperty`1<bool> myLoaded;
    private ViewableProperty`1<bool> mySyncProjects;
    private ViewableProperty`1<bool> myReady;
    private List`1<string> myAdditionalOperations;
    public IViewableProperty`1<bool> Loaded { get; }
    public IViewableProperty`1<bool> SyncProjects { get; }
    public IViewableProperty`1<bool> Ready { get; }
    public ProjectModelMonitor(Lifetime lifetime, ILogger logger, IShellLocks locks, ISolutionLoadTasksScheduler scheduler, ISolutionHostLoadingQueue solutionHostLoadingQueue);
    public sealed virtual IViewableProperty`1<bool> get_Loaded();
    public sealed virtual IViewableProperty`1<bool> get_SyncProjects();
    public sealed virtual IViewableProperty`1<bool> get_Ready();
    public sealed virtual void StartOperation(string operationName);
    public sealed virtual void FinishOperation(string operationName);
    public virtual void BeforeChangeSolution(ISolutionMark solutionMark);
    public virtual void BeforeChangeProjects(ICollection`1<IProjectMark> projectMarks);
    private void StartSyncProjects();
    private void FinishSyncProjects();
    private void UpdateReadyState();
    public sealed virtual string Dump();
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.Impl.ProjectModelUpdaterHost : ProjectModelUpdater {
    public ProjectModelUpdaterHost(SolutionElement solution, IShellLocks locks, ProjectReferenceFactory referenceFactory, IProjectModelBatchChangeManager batchChangeManager, SpecialFilesManager specialFilesManager, ILogger logger, IBackendProjectModelLocator locator);
    protected virtual IProject CreateProject(LateWriteLockCookie lateWriteLockCookie, IProjectDescriptor descriptor);
    protected virtual void OpenProject(IProject project, IProjectDescriptor descriptor);
    protected virtual bool UpdateProject(LateWriteLockCookie lateWriteLockCookie, IProject project, IProjectDescriptor descriptor, UpdateFlags flags);
}
[ProjectsHostComponentAttribute("10")]
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.Impl.SolutionHost : object {
    private Lifetime myLifetime;
    private ILogger myLogger;
    private ISolution mySolution;
    private SolutionStructureContainer mySolutionStructureContainer;
    private SolutionStructureBuilder mySolutionStructureBuilder;
    private IActiveConfigurationManager myActiveConfigurationManager;
    private ISolutionToolset mySolutionToolset;
    private IUnloadedProjectsManager myUnloadedProjectsManager;
    private ProjectHostLoader myProjectHostLoader;
    private ProjectHostLoggerService myProjectHostLoggerService;
    private ProjectMarkDependencies myProjectMarkDependencies;
    private IShellLocks myLocks;
    private ProjectHostReloadTaskExecutor myExecutor;
    private FileContentTracker myFileContentTracker;
    private IRemoteConfigurationManager myRemoteConfigurationManager;
    private IEnumerable`1<IPreSolutionLoadOperation> myPreSolutionLoadOperations;
    private ISolutionHostSync mySolutionHostSync;
    private IDiagnosticCollector myDiagnosticCollector;
    [NotNullAttribute]
private AsyncReloadQueue mySuspendAsyncReloadQueue;
    [NotNullAttribute]
private Dictionary`2<IProjectMark, IProjectHost> myProjectHostsMap;
    private SequentialLifetimes myReloadLifetimes;
    private int myReloadSolutionCounter;
    private TimeSpan myTotalReloadsTime;
    [NotNullAttribute]
public LoadEventsContainer LoadEvents;
    [NotNullAttribute]
public ModificationEventsContainer ModificationEvents;
    public ISolutionMark SolutionMark { get; }
    public int ReloadSolutionCounter { get; }
    public SolutionHost(Lifetime lifetime, ILogger logger, ISolution solution, SolutionStructureContainer solutionStructureContainer, SolutionStructureBuilder solutionStructureBuilder, IActiveConfigurationManager activeConfigurationManager, ISolutionToolset solutionToolset, IUnloadedProjectsManager unloadedProjectsManager, ISolutionHostSync solutionHostSync, IDiagnosticCollector diagnosticCollector, ProjectHostLoader projectHostLoader, ProjectHostLoggerService projectHostLoggerService, ProjectMarkDependencies projectMarkDependencies, IShellLocks locks, ProjectHostReloadTaskExecutor executor, FileContentTracker fileContentTracker, IRemoteConfigurationManager remoteConfigurationManager, IEnumerable`1<IPreSolutionLoadOperation> preSolutionLoadOperations, IProjectModelMonitor projectModelMonitor);
    public ISolutionMark get_SolutionMark();
    public int get_ReloadSolutionCounter();
    public sealed virtual void Init();
    public sealed virtual void ReloadSolution();
    public sealed virtual void ReloadSolutionAndProjects(ISet`1<IProjectMark> projectsToReload);
    public sealed virtual void ReloadSolutionAndAllProjects();
    private void ReloadSolutionInternal(IForceUpdateProjectsPolicy forceUpdateProjectsPolicy);
    private void BuildSolutionStructure(SolutionStructureChange solutionStructureChange);
    private void LoadAndSync(ICollection`1<ProjectHostChange> changesToAdd, ICollection`1<ProjectHostChange> changesToUpdate, ICollection`1<ProjectHostChange> changesToRemove, bool async, ProjectHostLogRequest logRequest);
    [NotNullAttribute]
private Task RunPreLoadOperation(IPreSolutionLoadOperation operation);
    private ProjectStructureChange Load(ICollection`1<ProjectHostChange> changesToAdd, ICollection`1<ProjectHostChange> changesToUpdate, ICollection`1<ProjectHostChange> changesToRemove, FileSystemPath logPath, ProjectStructureStamp stamp);
    private bool ProjectIsFiltered(ProjectHostChange change);
    private void AddDependantProjectsToUpdate(ICollection`1<ProjectHostChange> changesToAdd, ICollection`1<ProjectHostChange> changesToUpdate, ICollection`1<ProjectHostChange> changesToRemove);
    private IProjectHost RegisterProject(IProjectMark projectMark);
    private IProjectHost UnregisterProject(IProjectMark projectMark);
    public sealed virtual IProjectMark AddProject(ProjectDefinitionDescriptor descriptor, IProjectMark parent);
    public sealed virtual void RemoveProject(IProjectMark projectMark);
    public sealed virtual void AddAndRemoveProjects(IEnumerable`1<AddProjectRequest> addedProjects, IEnumerable`1<IProjectMark> removedProjects);
    public sealed virtual void SuspendAsyncProjectsReloading(Lifetime lifetime);
    public sealed virtual void ReloadProjectsSync(IEnumerable`1<IProjectMark> projectMarks, IProjectLoadRequester requester, ProjectHostLogRequest logRequest);
    public sealed virtual void ReloadProjectsAsync(IEnumerable`1<IProjectMark> projectMarks, IProjectLoadRequester requester);
    private void ReloadProjectsInternal(IEnumerable`1<IProjectMark> projectMarks, bool async, IProjectLoadRequester requester, ProjectHostLogRequest logRequest);
    public sealed virtual void MoveProject(IProjectMark projectMark, IProjectMark parentProjectMark);
    public sealed virtual IProjectMark RenameProject(IProjectMark projectMark, string name, string path);
    public sealed virtual IProjectHost GetProjectHost(IProjectMark projectMark);
    public sealed virtual TimeSpan GetTotalReloadsTime();
    public void Persist();
    [CompilerGeneratedAttribute]
private void <Init>b__30_0(ISolutionConfigurationAndPlatform x);
    [CompilerGeneratedAttribute]
private void <Init>b__30_1(RuntimeAndToolset _);
}
public abstract class JetBrains.ProjectModel.ProjectsHost.SolutionHost.Impl.SolutionHostCachingManager : SolutionHostManager {
    protected SolutionHostCachingManager(Lifetime lifetime, IShellLocks locks, ILogger logger, ShellPartCatalogSet catalogueSet, IComponentContainer componentContainer, SynchronizationPoints syncPoints, ChangeManager changeManager, IPlatformManager platformManager, SolutionMarkFactory solutionMarkFactory, SolutionLoadProgress solutionLoadProgress, ISolutionLoadTasksSchedulerProvider schedulerProvider, IEnumerable`1<IQuerySolutionCloseHandler> querySolutionCloseHandlers, IEnumerable`1<ISolutionInstanceComponentContainerExtender> solutionInstanceComponentContainerExtenders, IEnumerable`1<ISolutionComponentContainerExtender> solutionComponentContainerExtenders, IAsyncComposeManager asyncComposeManager);
    protected virtual void PrepareSolutionToOpen(Lifetime solutionLoadingLifetime, ISolutionMark solutionMark, SolutionElement solutionElement, SolutionInstance solutionInstance, object cookie);
    protected virtual void WaitForProjectModelLoad(SolutionElement solutionElement, ISolutionLoadTasksScheduler taskScheduler);
    private void RestoreProjectMarks(SolutionElement solution);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.Impl.SolutionHostLoadingQueue : SolutionHostSyncListener {
    private Lifetime myLifetime;
    private ILogger myLogger;
    private IShellLocks myLocks;
    private List`1<IProjectMark> myPendingProjects;
    private Queue`1<Action> myPendingActions;
    private int myChangesCount;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Idle>k__BackingField;
    public IProperty`1<bool> Idle { get; }
    public SolutionHostLoadingQueue(Lifetime lifetime, ILogger logger, IShellLocks locks);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_Idle();
    public virtual void BeforeChangeProjects(ICollection`1<IProjectMark> projectMarks);
    public virtual void AfterUpdateProjects(ProjectStructureChange change);
    public sealed virtual void ExecuteWhenQueueIsEmpty(Action action);
    private void CheckForQueueIsEmpty();
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.Impl.SolutionHostLoadTasksSchedulerProvider : SolutionLoadTasksSchedulerProviderImpl {
    public SolutionHostLoadTasksSchedulerProvider(IShellLocks locks);
    public virtual ISolutionLoadTasksScheduler GetTasksScheduler();
}
[ShellComponentAttribute("10")]
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.Impl.SolutionHostManager : SolutionManagerBase {
    private ChangeManager myChangeManager;
    private IPlatformManager myPlatformManager;
    private SolutionMarkFactory mySolutionMarkFactory;
    private SolutionLoadProgress mySolutionLoadProgress;
    private Signal`1<Unit> myBeforeSolutionClosingSignal;
    [CompilerGeneratedAttribute]
private IComponentContainer <ProjectsHostContainer>k__BackingField;
    [NotNullAttribute]
public ISource`1<Unit> BeforeSolutionClosing { get; }
    public bool IsRealSolutionOwner { get; }
    public IComponentContainer ProjectsHostContainer { get; private set; }
    public SolutionHostManager(Lifetime lifetime, ILogger logger, IShellLocks locks, ShellPartCatalogSet catalogSet, IComponentContainer componentContainer, SynchronizationPoints syncPoints, ChangeManager changeManager, IPlatformManager platformManager, ISolutionLoadTasksSchedulerProvider schedulerProvider, SolutionMarkFactory solutionMarkFactory, SolutionLoadProgress solutionLoadProgress, IEnumerable`1<IQuerySolutionCloseHandler> querySolutionCloseHandlers, IEnumerable`1<ISolutionInstanceComponentContainerExtender> solutionInstanceComponentContainerExtenders, IEnumerable`1<ISolutionComponentContainerExtender> solutionComponentContainerExtenders, IAsyncComposeManager asyncComposeManager);
    public ISource`1<Unit> get_BeforeSolutionClosing();
    public virtual bool get_IsRealSolutionOwner();
    [CanBeNullAttribute]
public ISolution OpenSolution(VirtualFileSystemPath location, object cookie);
    [CanBeNullAttribute]
public virtual ISolution OpenSolution(ISolutionMark solutionMark, object cookie);
    public AsyncSolution OpenSolutionAsync(ISolutionMark solutionMark, object cookie);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.ProjectsHost.SolutionHost.Impl.SolutionHostManager/<SolutionInstanceReadyAsync>d__13")]
protected virtual Task SolutionInstanceReadyAsync(SolutionInstance solutionInstance);
    [CompilerGeneratedAttribute]
public IComponentContainer get_ProjectsHostContainer();
    [CompilerGeneratedAttribute]
private void set_ProjectsHostContainer(IComponentContainer value);
    protected virtual void StartSolutionLoading(Lifetime solutionLoadingLifetime, SolutionElement solutionElement, SolutionInstance solutionInstance, object cookie);
    protected virtual void PrepareSolutionToOpen(Lifetime solutionLoadingLifetime, ISolutionMark solutionMark, SolutionElement solutionElement, SolutionInstance solutionInstance, object cookie);
    public virtual void CloseSolution();
    [CompilerGeneratedAttribute]
private void <CloseSolution>b__20_0();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.Impl.SolutionHostOperationsSuspender : object {
    public SolutionHostOperationsSuspender(Lifetime lifetime, IProjectModelMonitor monitor, SuspendHardOperationsManager suspendHardOperationsManager);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.Impl.SolutionHostStructureWaiter : object {
    [NotNullAttribute]
private object myLocker;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private ISolutionLoadTasksScheduler myScheduler;
    [CanBeNullAttribute]
private ISolutionLoadTasksBarrierCookie myTasksResumeCookie;
    private SolutionLoadTaskKinds myKind;
    private bool myAlreadyInitialized;
    public SolutionLoadTaskKinds Kind { get; }
    public SolutionHostStructureWaiter(ILogger logger, ISolutionLoadTasksScheduler scheduler);
    public SolutionLoadTaskKinds get_Kind();
    public void EnqueueWaitTask(bool initialLoading);
    public void ResumeWaitTask();
}
[ProjectsHostComponentAttribute("10")]
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.Impl.SolutionHostSync : object {
    protected static SolutionLoadTaskIdentifier UpdateProjectModel;
    protected static SolutionLoadTaskIdentifier FinishProjectModelUpdate;
    protected static SolutionLoadTaskIdentifier ValidateProjectModel;
    private SolutionElement mySolution;
    private SolutionHostStructureWaiter mySolutionHostStructureWaiter;
    private ISolutionStructureContainer mySolutionStructureContainer;
    private ILogger myLogger;
    private IShellLocks myLocks;
    private ISolutionLoadTasksScheduler myScheduler;
    private IProjectModelUpdater myProjectModelUpdater;
    private ProjectDependenciesManager myProjectDependenciesManager;
    private ProjectToOutputAssemblySwitcher myProjectToOutputAssemblySwitcher;
    private ProjectToOutputAssemblyManager myProjectToOutputAssemblyManager;
    private IEnumerable`1<SolutionHostSyncListener> myListeners;
    private CollectionEvents`1<UnloadedProject> myUnloadedProjects;
    private Dictionary`2<IProjectMark, UnloadedProject> myUnloadedProjectMap;
    private DiagnosticController`1<IProjectMark> myDiagnosticController;
    private bool myInitialized;
    public ICollectionEvents`1<UnloadedProject> UnloadedProjects { get; }
    public SolutionHostSync(Lifetime lifetime, SolutionElement solution, SolutionHostStructureWaiter solutionHostStructureWaiter, ISolutionStructureContainer solutionStructureContainer, ILogger logger, IShellLocks locks, ISolutionLoadTasksScheduler scheduler, IDiagnosticCollector diagnosticCollector, IEnumerable`1<SolutionHostSyncListener> listeners, IProjectModelUpdater projectModelUpdater, ProjectDependenciesManager projectDependenciesManager, ProjectToOutputAssemblySwitcher projectToOutputAssemblySwitcher, ProjectToOutputAssemblyManager projectToOutputAssemblyManager);
    private static SolutionHostSync();
    public ICollectionEvents`1<UnloadedProject> get_UnloadedProjects();
    public sealed virtual void BeforeChangeSolution(ISolutionMark mark);
    public sealed virtual void BeforeChangeProjects(ICollection`1<IProjectMark> marks);
    public sealed virtual void UpdateSolution(SolutionStructureChange change);
    public sealed virtual void UpdateProjects(ProjectStructureChange changes);
    public void UpdateProjectsImpl(ProjectStructureChange changes);
    private void AfterUpdateProjects(ProjectStructureChange changes);
    private void Validate();
    private void RemoveProject(ProjectHostChange change);
    private void DoRemoveProject(IProjectMark projectMark);
    private void AddOrUpdateProjectRecursively(ProjectHostChange change, bool initializing);
    private void AddOrUpdateProjectRecursively(ProjectHostChange change, IProject parentProject, bool initializing);
    [CanBeNullAttribute]
private IProject UpdateProject(ProjectHostReloadChange change, IProject parentProject);
    private IProject UpdateProject(ProjectHostChangeDescriptors descriptors, IProjectMark projectMark, IProject parentProject, bool dependantProjectMark);
    [CanBeNullAttribute]
private IProject UpdateProjectParent(ProjectHostStructureChange change, IProject parentProject);
}
[SolutionInstanceComponentAttribute("0")]
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.Impl.UnresolvedReferencesAnalyzer : SolutionHostSyncListener {
    protected ISolution Solution;
    public UnresolvedReferencesAnalyzer(ISolution solution);
    public virtual void AfterUpdateProjects(ProjectStructureChange change);
    protected virtual bool ShouldProcessReference(IProjectToModuleReference reference);
    protected virtual void OnProcessProject(IProject project);
    protected virtual void OnProcessReference(IProjectToModuleReference reference);
    protected virtual void OnProjectLoadWarning(IProjectToModuleReference reference);
    public static bool CheckProjectToProjectReference(IProjectToProjectReference reference, String& reason);
}
[ProjectsHostComponentAttribute("10")]
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.Impl.WildcardContainerCleaner : SolutionHostSyncListener {
    private WildcardContainer myWildcardContainer;
    public WildcardContainerCleaner(Lifetime lifetime, WildcardContainer wildcardContainer, ISolutionStructureContainer structureContainer);
    public virtual void BeforeUpdateProjects(ProjectStructureChange structureChange);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <.ctor>b__1_0(Lifetime projectMarkLifetime, int _, IProjectMark projectMark);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.Interop.HostProjectModelSynchronizePauser : ProjectModelSynchronizePauser {
    private ILogger myLogger;
    private ISolution mySolution;
    public HostProjectModelSynchronizePauser(ILogger logger, ISolution solution);
    public virtual Task PauseSyncAsync(Lifetime lifetime, string reason);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.Interop.ReferencePatcherServiceSuppressor : object {
}
public interface JetBrains.ProjectModel.ProjectsHost.SolutionHost.IPreSolutionLoadOperation {
    public int Priority { get; }
    public abstract virtual int get_Priority();
    public abstract virtual Task Execute();
}
public interface JetBrains.ProjectModel.ProjectsHost.SolutionHost.IProjectModelMonitor {
    [NotNullAttribute]
public IViewableProperty`1<bool> Loaded { get; }
    [NotNullAttribute]
public IViewableProperty`1<bool> SyncProjects { get; }
    public IViewableProperty`1<bool> Ready { get; }
    public abstract virtual IViewableProperty`1<bool> get_Loaded();
    public abstract virtual IViewableProperty`1<bool> get_SyncProjects();
    public abstract virtual IViewableProperty`1<bool> get_Ready();
    public abstract virtual void StartOperation(string operationName);
    public abstract virtual void FinishOperation(string operationName);
    [NotNullAttribute]
public abstract virtual string Dump();
}
public interface JetBrains.ProjectModel.ProjectsHost.SolutionHost.IRemoteConfigurationManager {
    public abstract virtual void UpdateRemoteActiveConfiguration(ISolutionConfigurationAndPlatformStore store, ISolutionConfigurationAndPlatform activeConfigurationAndPlatform);
}
public interface JetBrains.ProjectModel.ProjectsHost.SolutionHost.ISolutionHost {
    public abstract virtual void Init();
    public abstract virtual void ReloadSolution();
    public abstract virtual void ReloadSolutionAndProjects(ISet`1<IProjectMark> projectsToReload);
    public abstract virtual void ReloadSolutionAndAllProjects();
    public abstract virtual void ReloadProjectsSync(IEnumerable`1<IProjectMark> projectMarks, IProjectLoadRequester requester, ProjectHostLogRequest log);
    public abstract virtual void ReloadProjectsAsync(IEnumerable`1<IProjectMark> projectMarks, IProjectLoadRequester requester);
    public abstract virtual void SuspendAsyncProjectsReloading(Lifetime lifetime);
    [NotNullAttribute]
public abstract virtual IProjectMark AddProject(ProjectDefinitionDescriptor descriptor, IProjectMark parent);
    [NotNullAttribute]
public abstract virtual IProjectMark RenameProject(IProjectMark projectMark, string name, string path);
    public abstract virtual void RemoveProject(IProjectMark projectMark);
    public abstract virtual void MoveProject(IProjectMark projectMark, IProjectMark parentProjectMark);
    public abstract virtual void AddAndRemoveProjects(IEnumerable`1<AddProjectRequest> addedProjects, IEnumerable`1<IProjectMark> removedProjects);
    [CanBeNullAttribute]
public abstract virtual IProjectHost GetProjectHost(IProjectMark projectMark);
    public abstract virtual TimeSpan GetTotalReloadsTime();
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ProjectModel.ProjectsHost.SolutionHost.ISolutionHostLoadingQueue {
    [NotNullAttribute]
public IProperty`1<bool> Idle { get; }
    public abstract virtual IProperty`1<bool> get_Idle();
    public abstract virtual void ExecuteWhenQueueIsEmpty(Action action);
}
public interface JetBrains.ProjectModel.ProjectsHost.SolutionHost.ISolutionHostSync {
    public abstract virtual void BeforeChangeSolution(ISolutionMark mark);
    public abstract virtual void BeforeChangeProjects(ICollection`1<IProjectMark> marks);
    public abstract virtual void UpdateSolution(SolutionStructureChange change);
    public abstract virtual void UpdateProjects(ProjectStructureChange change);
}
public interface JetBrains.ProjectModel.ProjectsHost.SolutionHost.IUnloadedProjectsManager {
    public abstract virtual bool IsProjectUnloaded(IProjectMark projectMark);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.Persistence.ProjectMarshallerWithOrigin : ProjectMarshaller {
    protected virtual IProject UnmarshallImpl(UnsafeReader reader, ProjectModelCaches projectModelCaches);
    protected virtual void MarshallImpl(UnsafeWriter writer, IProject project, ProjectModelCaches projectModelCaches);
}
public static class JetBrains.ProjectModel.ProjectsHost.SolutionHost.Persistence.ProjectOrigin : object {
    public static Key`1<string> Key;
    private static ProjectOrigin();
}
[PlatformsProviderAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.Platforms.MsBuildNuGetPlatformProvider : NuGetPlatformProvider {
    private OneToListMap`2<PlatformsProjectKey, CompilePlatform> myProjectPlatforms;
    public int Priority { get; }
    public bool ImmutableAssembliesInFileSystem { get; }
    public MsBuildNuGetPlatformProvider(Lifetime lifetime);
    public virtual int get_Priority();
    public virtual bool get_ImmutableAssembliesInFileSystem();
    public sealed virtual OneToListMap`2<PlatformsProjectKey, CompilePlatform> GetPlatforms(ISolution solution);
    public sealed virtual IMsBuildProjectBatchSession CreateSession();
    private IEnumerable`1<CompilePlatform> GetNetCoreApp2Platforms(MsBuildProject msBuildProject);
    private IEnumerable`1<CompilePlatform> GetNetCoreApp3Platforms(MsBuildProject msBuildProject);
}
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.Progress.BackgroundProgress : object {
    protected Action CancelAction;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PermanentHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DescriptionFromProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PermanentDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<double> <Progress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIndeterminate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCancelable>k__BackingField;
    public string Id { get; protected set; }
    public string Title { get; protected set; }
    public IProperty`1<string> Header { get; protected set; }
    public string PermanentHeader { get; protected set; }
    public IProperty`1<string> Description { get; protected set; }
    public bool DescriptionFromProgress { get; protected set; }
    public string PermanentDescription { get; protected set; }
    public IProperty`1<double> Progress { get; protected set; }
    public bool IsIndeterminate { get; protected set; }
    public bool IsCancelable { get; protected set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Title();
    [CompilerGeneratedAttribute]
protected void set_Title(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<string> get_Header();
    [CompilerGeneratedAttribute]
protected void set_Header(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public string get_PermanentHeader();
    [CompilerGeneratedAttribute]
protected void set_PermanentHeader(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<string> get_Description();
    [CompilerGeneratedAttribute]
protected void set_Description(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_DescriptionFromProgress();
    [CompilerGeneratedAttribute]
protected void set_DescriptionFromProgress(bool value);
    [CompilerGeneratedAttribute]
public string get_PermanentDescription();
    [CompilerGeneratedAttribute]
protected void set_PermanentDescription(string value);
    [CompilerGeneratedAttribute]
public IProperty`1<double> get_Progress();
    [CompilerGeneratedAttribute]
protected void set_Progress(IProperty`1<double> value);
    [CompilerGeneratedAttribute]
public bool get_IsIndeterminate();
    [CompilerGeneratedAttribute]
protected void set_IsIndeterminate(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCancelable();
    [CompilerGeneratedAttribute]
protected void set_IsCancelable(bool value);
    public void Cancel();
}
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.Progress.BackgroundProgressBuilder : BackgroundProgress {
    public static BackgroundProgressBuilder Create();
    public static BackgroundProgressBuilder FromProgressIndicator(IProgressIndicatorModel indicator);
    public BackgroundProgress Build();
    public BackgroundProgressBuilder WithId(string id);
    public BackgroundProgressBuilder WithTitle(string title);
    public BackgroundProgressBuilder WithHeader(IProperty`1<string> header);
    public BackgroundProgressBuilder WithHeader(string header);
    public BackgroundProgressBuilder WithDescription(IProperty`1<string> description);
    public BackgroundProgressBuilder WithDescription(string description);
    public BackgroundProgressBuilder WithDescriptionFromProgress();
    public BackgroundProgressBuilder WithProgress(IProperty`1<double> progress);
    public BackgroundProgressBuilder AsIndeterminate();
    public BackgroundProgressBuilder AsCancelable(Action cancel);
    public BackgroundProgressBuilder AsNonCancelable();
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.Progress.BackgroundProgressManager : object {
    public static object ForceUpdate;
    public static string DefaultTaskTitle;
    [CompilerGeneratedAttribute]
private IShellLocks <Locks>k__BackingField;
    [CompilerGeneratedAttribute]
private IViewableList`1<BackgroundProgress> <BackgroundTasks>k__BackingField;
    [NotNullAttribute]
public IShellLocks Locks { get; }
    [NotNullAttribute]
public IViewableList`1<BackgroundProgress> BackgroundTasks { get; }
    public BackgroundProgressManager(IShellLocks locks);
    private static BackgroundProgressManager();
    [CompilerGeneratedAttribute]
public sealed virtual IShellLocks get_Locks();
    [CompilerGeneratedAttribute]
public IViewableList`1<BackgroundProgress> get_BackgroundTasks();
    public sealed virtual IBackgroundProgressIndicator CreateIndicator(Lifetime lifetime, bool isCancellable, bool hasProgress, string title);
    public void AddNewTask(Lifetime lifetime, BackgroundProgress backgroundProgress);
}
[ShellComponentAttribute("10")]
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.Progress.SolutionLoadProgress : object {
    private static Key`1<Events> ourKey;
    private Lifetime myLifetime;
    private IShellLocks myLocks;
    private BackgroundProgressManager myBackgroundProgressManager;
    public SolutionLoadProgress(Lifetime lifetime, BackgroundProgressManager backgroundProgressManager);
    private static SolutionLoadProgress();
    public void StartSolutionLoading(Lifetime solutionLoadingLifetime, ISolution solution);
    private void StartSolutionSync(Lifetime solutionSyncLifetime, ISolution solution);
    private void CreateProgress(Lifetime lifetime, ISolution solution, string title);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.ProjectModelReadySignal : object {
    private static ILogger ourPerformanceLogger;
    public ProjectModelReadySignal(Lifetime lifetime, IProjectModelMonitor projectModelMonitor);
    private static ProjectModelReadySignal();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.ProjectsHost.SolutionHost.SolutionHostExtensions : object {
    [ExtensionAttribute]
public static IComponentContainer ProjectsHostContainer(ISolution solution);
    [ExtensionAttribute]
public static void ReloadProjectSync(ISolutionHost host, IProjectMark projectMark, IProjectLoadRequester requester, ProjectHostLogRequest logRequest);
    [ExtensionAttribute]
public static void ReloadProjectAsync(ISolutionHost host, IProjectMark projectMark, IProjectLoadRequester requester);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.SolutionHostStartup : object {
    private ViewableProperty`1<Type> myStartupType;
    [NotNullAttribute]
public IReadonlyProperty`1<Type> StartupType { get; }
    public bool IsCold { get; }
    public bool IsWarm { get; }
    public IReadonlyProperty`1<Type> get_StartupType();
    public bool get_IsCold();
    public bool get_IsWarm();
    public void OnLoading(bool initialLoading);
}
public abstract class JetBrains.ProjectModel.ProjectsHost.SolutionHost.SolutionHostSyncListener : object {
    public virtual void BeforeChangeSolution(ISolutionMark solutionMark);
    public virtual void BeforeChangeProjects(ICollection`1<IProjectMark> projectMarks);
    public virtual void AfterUpdateSolution(SolutionStructureChange change);
    public virtual void BeforeUpdateProjects(ProjectStructureChange change);
    public virtual void AfterUpdateProject(ProjectHostChange change);
    public virtual void AfterRemoveProject(ProjectHostChange change);
    public virtual void AfterUpdateProjects(ProjectStructureChange change);
}
[SolutionInstanceComponentAttribute("0")]
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.State.ProjectModelStateContainer : object {
    private Dictionary`2<IProjectMark, ProjectState> myProjectStates;
    private SolutionState mySolutionState;
    public ProjectModelStateContainer(ISolution solution);
    public virtual void SetState(ISolutionMark solutionMark, SolutionState state);
    public virtual void RemoveState(ISolutionMark solutionMark, SolutionState state);
    public bool HasState(ISolutionMark solutionMark, SolutionState state);
    public virtual void SetState(IProjectMark projectMark, ProjectState state);
    public virtual void RemoveState(IProjectMark projectMark, ProjectState state);
    public bool HasState(IProjectMark projectMark, ProjectState state);
    public IReadOnlyCollection`1<IProjectMark> GetAllProjects(ProjectState state);
}
[FlagsAttribute]
public enum JetBrains.ProjectModel.ProjectsHost.SolutionHost.State.ProjectState : Enum {
    public int value__;
    public static ProjectState None;
    public static ProjectState Loading;
    public static ProjectState Unloading;
    public static ProjectState RestoringPackages;
    public static ProjectState WithErrors;
    public static ProjectState WithWarnings;
    public static ProjectState WithMissingPackages;
    public static ProjectState WithInvalidConfiguration;
    public static ProjectState ExcludedFromBuild;
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.State.ProjectsWithoutDesignTimeBuildHolder : object {
    private ISolution mySolution;
    private HashSet`1<IProjectMark> myProjectsWithoutDesignTimeBuild;
    public ProjectsWithoutDesignTimeBuildHolder(ISolution solution);
    [NotNullAttribute]
public ISet`1<IProject> TakeProjectsWithoutDesignTimeBuild();
    public sealed virtual void OnProjectLoaded(IProjectMark projectMark, IProjectDescriptor projectDescriptor, MsBuildProject msBuildProject);
}
[FlagsAttribute]
public enum JetBrains.ProjectModel.ProjectsHost.SolutionHost.State.SolutionState : Enum {
    public int value__;
    public static SolutionState None;
    public static SolutionState Sync;
    public static SolutionState WithErrors;
    public static SolutionState WithWarnings;
}
[SolutionInstanceComponentAttribute("0")]
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.State.StateWatcher : SolutionHostSyncListener {
    private ISolution mySolution;
    private ProjectModelStateContainer myProjectModelStateContainer;
    public StateWatcher(ISolution solution, ProjectModelStateContainer projectModelStateContainer);
    public virtual void AfterUpdateSolution(SolutionStructureChange change);
    public virtual void BeforeChangeProjects(ICollection`1<IProjectMark> projectMarks);
    protected virtual ProjectState GetProjectState(IProjectMark projectMark);
    public virtual void BeforeUpdateProjects(ProjectStructureChange change);
    public virtual void AfterUpdateProject(ProjectHostChange change);
    private bool IsMissingPackages(ProjectHostChange change);
}
[ZoneMarkerAttribute]
public class JetBrains.ProjectModel.ProjectsHost.SolutionHost.ZoneMarker : object {
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectsHost.SolutionLoader : object {
    private ShellPartCatalogSet myCatalogSet;
    private IShellLocks myLocks;
    public SolutionLoader(ShellPartCatalogSet catalogSet, IShellLocks locks);
    public void SyncExistingSolutionWithSlnFile(ISolution solutionToSync, VirtualFileSystemPath solutionFilePath);
    private void UpdateProject(ISolution solution, ProjectHostReloadChange change, IProject parentProject, JetHashSet`1<IProject> projectToRemove);
    [NotNullAttribute]
public static ICollection`1<ProjectHostChange> CreateProjectDescriptors(SolutionLoaderArgs args, ISolutionConfigurationAndPlatform activeConfigurationAndPlatform, FileSystemPath logFolderPath, Func`2<IProjectMark, bool> projectFilter);
    [NotNullAttribute]
public static SolutionStructureChange CreateSolutionStructureChange(SolutionLoaderArgs args, Func`2<IProjectMark, bool> projectFilter, ISolutionConfigurationAndPlatform activeConfigurationAndPlatform);
    [NotNullAttribute]
public ICollection`1<ProjectHostChange> CreateProjectDescriptors(VirtualFileSystemPath location, IComponentContainer solutionInstanceContainer);
}
public class JetBrains.ProjectModel.ProjectsHost.SolutionLoaderArgs : object {
    private Lazy`1<IDiagnosticCollector> myLoadDiagnosticConsumer;
    private Lazy`1<SolutionStructureContainer> mySolutionStructureContainer;
    private Lazy`1<SolutionStructureBuilder> mySolutionStructureBuilder;
    private Lazy`1<ProjectHostLoader> myProjectHostLoader;
    private Lazy`1<WildcardContainer> myWildcardContainer;
    private Lazy`1<ProjectToOutputAssemblySwitcher> myProjectToOutputAssemblySwitcher;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private ISolutionMark <SolutionMark>k__BackingField;
    [CompilerGeneratedAttribute]
private IComponentContainer <ProjectsHostContainer>k__BackingField;
    public Lifetime Lifetime { get; }
    public ISolutionMark SolutionMark { get; }
    public IDiagnosticCollector LoadDiagnosticConsumer { get; }
    public SolutionStructureContainer SolutionStructureContainer { get; }
    public SolutionStructureBuilder SolutionStructureBuilder { get; }
    public ProjectHostLoader ProjectHostLoader { get; }
    public WildcardContainer WildcardContainer { get; }
    public ProjectToOutputAssemblySwitcher ProjectToOutputAssemblySwitcher { get; }
    public IComponentContainer ProjectsHostContainer { get; }
    private SolutionLoaderArgs(Lifetime lifetime, ISolutionMark solutionMark, IComponentContainer projectsHostContainer);
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public ISolutionMark get_SolutionMark();
    public IDiagnosticCollector get_LoadDiagnosticConsumer();
    public SolutionStructureContainer get_SolutionStructureContainer();
    public SolutionStructureBuilder get_SolutionStructureBuilder();
    public ProjectHostLoader get_ProjectHostLoader();
    public WildcardContainer get_WildcardContainer();
    public ProjectToOutputAssemblySwitcher get_ProjectToOutputAssemblySwitcher();
    [CompilerGeneratedAttribute]
public IComponentContainer get_ProjectsHostContainer();
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.ProjectsHost.SolutionLoaderArgs/<CreateCoreAsync>d__28")]
private static Task`1<SolutionLoaderArgs> CreateCoreAsync(Lifetime lifetime, VirtualFileSystemPath solutionLocation, ShellPartCatalogSet shellPartCatalogSet, IComponentContainer solutionInstanceContainer, bool sync);
    public static Task`1<SolutionLoaderArgs> CreateAsync(Lifetime lifetime, VirtualFileSystemPath solutionLocation, ShellPartCatalogSet shellPartCatalogSet, IComponentContainer solutionInstanceContainer);
    public static SolutionLoaderArgs Create(Lifetime lifetime, VirtualFileSystemPath solutionLocation, ShellPartCatalogSet shellPartCatalogSet, IComponentContainer solutionInstanceContainer);
    public static SolutionLoaderArgs Create(Lifetime lifetime, ISolution solution, ShellPartCatalogSet shellPartCatalogSet);
    public static Task`1<SolutionLoaderArgs> CreateAsync(Lifetime lifetime, ISolution solution, ShellPartCatalogSet shellPartCatalogSet);
    public Pair`2<IProjectHost, IProjectMark> GetProjectHostAndMark(IProjectSearchDescriptor project, ISolutionConfigurationAndPlatform activeConfigurationAndPlatform);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.ProjectsHost.SolutionLoaderArgsEx : object {
    [ExtensionAttribute]
public static IList`1<Pair`2<IProjectDescriptor, IProjectReferencesDescriptor>> BuildProjectDescriptors(SolutionLoaderArgs solutionLoaderArgs, Lifetime lifetime, ICollection`1<ProjectHostChange> projectHostChanges, JetHashSet`1<Guid> unloadedProjectsGuids, ILogger logger);
    [CanBeNullAttribute]
private static IProjectDescriptor FillBuildDescriptorResult(ProjectHostReloadChange change, IProjectDescriptor parentProjectDescriptor, TempData tempData, JetHashSet`1<Guid> unloadedProjectsGuids, ILogger logger);
}
public class JetBrains.ProjectModel.ProjectsHost.SolutionMarkContent : object {
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [NotNullAttribute]
public VirtualFileSystemPath Location { get; }
    [NotNullAttribute]
public string Content { get; }
    public SolutionMarkContent(VirtualFileSystemPath location, string content);
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_Location();
    [CompilerGeneratedAttribute]
public string get_Content();
}
public class JetBrains.ProjectModel.ProjectsHost.SolutionMarkUpdateRequest : object {
    [NotNullAttribute]
public SolutionStructureBuilder StructureBuilder;
    [NotNullAttribute]
public SolutionStructureContainer StructureContainer;
    [NotNullAttribute]
public IForceUpdateProjectsPolicy ForceUpdateProjectsPolicy;
    [CanBeNullAttribute]
public ISolutionConfigurationAndPlatform ActiveConfigurationAndPlatform;
    public SolutionMarkUpdateRequest(SolutionStructureBuilder structureBuilder, SolutionStructureContainer structureContainer, IForceUpdateProjectsPolicy forceUpdateProjectsPolicy, ISolutionConfigurationAndPlatform activeConfigurationAndPlatform);
}
public class JetBrains.ProjectModel.ProjectsHost.SpecificUpdateProjectsPolicy : object {
    [NotNullAttribute]
private ISet`1<IProjectMark> myProjectsToUpdate;
    public SpecificUpdateProjectsPolicy(ISet`1<IProjectMark> projectsToUpdate);
    public sealed virtual bool ShouldUpdate(IProjectMark projectMark);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.ProjectsHost.Utils.ProjectReferencePropertiesUtils : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static ProjectReferenceProperties CreateReferenceProperties(MsBuildProjectItem item);
    [NotNullAttribute]
public static Dictionary`2<string, string> CreateMetadataFromReference(IProjectToModuleReference reference);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetAliases(MsBuildProjectItem item);
    [ExtensionAttribute]
public static bool GetCopyLocal(MsBuildProjectItem item);
    [ExtensionAttribute]
public static bool GetDefaultCopyLocal(MsBuildProjectItem item, RdProjectItemDefinition itemDefinition);
    [ExtensionAttribute]
private static bool IsNuGetSourceTypePackage(MsBuildProjectItem item);
    [ExtensionAttribute]
private static bool HasNuGetPackageId(MsBuildProjectItem item);
    [ExtensionAttribute]
[NotNullAttribute]
public static VirtualFileSystemPath GetProjectReferencePath(MsBuildProjectItem item, VirtualFileSystemPath projectDirectory);
    [ExtensionAttribute]
public static Guid GetProjectReferenceGuid(MsBuildProjectItem item);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetProjectReferenceName(MsBuildProjectItem item);
    [ExtensionAttribute]
[NotNullAttribute]
public static IProjectSearchDescriptor ToProjectSearchDescriptor(MsBuildProjectItem item, VirtualFileSystemPath projectDirectory, VirtualFileSystemPath projectFilePath, ILogger logger);
}
public static class JetBrains.ProjectModel.ProjectsHost.Utils.ProjectTypeGuidGuesser : object {
    public static Guid CalculateTypeGuid(VirtualFileSystemPath projectFilePath);
}
public abstract class JetBrains.ProjectModel.ProjectsHost.VirtualProjectMarkBase : ProjectMarkBase {
    public Guid Guid { get; }
    public IProjectConfigurationAndPlatform ActiveConfigurationAndPlatform { get; }
    protected VirtualProjectMarkBase(ISolutionMark solutionMark);
    public virtual Guid get_Guid();
    public virtual IProjectConfigurationAndPlatform get_ActiveConfigurationAndPlatform();
}
[ZoneMarkerAttribute]
public class JetBrains.ProjectModel.ProjectsHost.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
