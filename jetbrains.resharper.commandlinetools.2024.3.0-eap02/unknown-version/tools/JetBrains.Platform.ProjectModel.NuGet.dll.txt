[SolutionInstanceComponentAttribute("0")]
public class JetBrains.ProjectModel.NuGet.Cache.NuGetPackageSpecBuilder : object {
    [CompilerGeneratedAttribute]
private ILogger <logger>P;
    [CompilerGeneratedAttribute]
private NuGetOptionsProvider <options>P;
    [CompilerGeneratedAttribute]
private NuGetConfigManager <configManager>P;
    [CompilerGeneratedAttribute]
private ISolutionToolset <solutionToolset>P;
    [CompilerGeneratedAttribute]
private RiderNuGetRestoreOutputPathResolver <restoreOutputPathResolver>P;
    private int myPackageSpecCounter;
    private static string ReferenceAssembliesPackageName;
    public NuGetPackageSpecBuilder(ILogger logger, NuGetOptionsProvider options, NuGetConfigManager configManager, ISolutionToolset solutionToolset, RiderNuGetRestoreOutputPathResolver restoreOutputPathResolver);
    private int GetDotNetCoreSdkVersion();
    [CanBeNullAttribute]
public RiderNuGetMsBuildProjectData Build(MsBuildProject msBuildProject);
    private static LibraryDependency CreateReferenceAssembliesLibraryDependency(string version);
    [CanBeNullAttribute]
private NuGetFramework GetNuGetFramework(int sdkVersion, MsBuildProjectPart projectPart, VirtualFileSystemPath projectFilePath);
    private void AddPackageDownloads(TargetFrameworkInformation targetFrameworkInformation, MsBuildProjectPart projectPart);
    private static void AddFrameworkReferences(TargetFrameworkInformation targetFrameworkInformation, MsBuildProjectPart projectPart);
    [NotNullAttribute]
private VersionRange GetPackageDownloadVersionRange(string rangeString);
    private static IList`1<PackageSource> GetSources(INuGetDetailedConfig config, MsBuildProject project, string projectRoot);
    private static void ApplyIncludeFlags(MsBuildProjectItem projectItem, LibraryDependency dependency);
    private static void ApplyIncludeFlags(MsBuildProjectItem projectItem, ProjectRestoreReference dependency);
    private static NuGetVersionStoreStrategy GetVersionStoreStrategy(int attributeVersions, int elementVersions);
    private static bool HasValidShortFolderName(TargetFrameworkInformation tfi);
    private static bool HasValidShortFolderName(ProjectRestoreMetadataFrameworkInfo tfi);
    private static bool HasValidShortFolderName(NuGetFramework framework);
    private static string NiceTrim(string value);
    private static String[] NiceSplit(string value);
    private TValue GetNonEvaluatedPropertyOrNull(IReadOnlyCollection`1<MsBuildProjectPart> projects, string propertyName, Func`2<string, TValue> valueFactory);
    private bool DumpPackageSpec(FileSystemPath outputSystemPath, PackageSpec packageSpec);
    private static bool IsVcxProj(VirtualFileSystemPath projectPath);
}
public enum JetBrains.ProjectModel.NuGet.Cache.NuGetVersionStoreStrategy : Enum {
    public int value__;
    public static NuGetVersionStoreStrategy Unknown;
    public static NuGetVersionStoreStrategy Attibute;
    public static NuGetVersionStoreStrategy Element;
}
public class JetBrains.ProjectModel.NuGet.Cache.RiderNuGetMsBuildProjectData : object {
    [CompilerGeneratedAttribute]
private List`1<BuildIntegratedPackageReference> <packageReferences>P;
    [CompilerGeneratedAttribute]
private PackageSpec <packageSpec>P;
    [CompilerGeneratedAttribute]
private bool <HasChangesInPackageSpec>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetVersionStoreStrategy <VersionStoreStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, NuGetVersion> <ResolvedPackageVersions>k__BackingField;
    [NotNullAttribute]
public PackageSpec PackageSpec { get; }
    [NotNullAttribute]
public ICollection`1<BuildIntegratedPackageReference> PackageReferences { get; }
    public bool HasChangesInPackageSpec { get; }
    public NuGetVersionStoreStrategy VersionStoreStrategy { get; }
    public Dictionary`2<string, NuGetVersion> ResolvedPackageVersions { get; }
    public RiderNuGetMsBuildProjectData(List`1<BuildIntegratedPackageReference> packageReferences, PackageSpec packageSpec, bool hasChangesInPackageSpec, NuGetVersionStoreStrategy versionStoreStrategy, Dictionary`2<string, NuGetVersion> resolvedPackageVersions);
    public PackageSpec get_PackageSpec();
    public ICollection`1<BuildIntegratedPackageReference> get_PackageReferences();
    [CompilerGeneratedAttribute]
public bool get_HasChangesInPackageSpec();
    [CompilerGeneratedAttribute]
public NuGetVersionStoreStrategy get_VersionStoreStrategy();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, NuGetVersion> get_ResolvedPackageVersions();
    [CanBeNullAttribute]
public PackageReference PatchResolvedVersion(PackageReference reference);
}
[ZoneMarkerAttribute]
public class JetBrains.ProjectModel.NuGet.Cache.ZoneMarker : object {
}
[SolutionInstanceComponentAttribute("0")]
public class JetBrains.ProjectModel.NuGet.Common.FileTracking.NuGetFileTrackingRestoreMarkService : NuGetRestoreMarksServiceBase {
    public NuGetFileTrackingRestoreMarkService(NuGetRestoreOutputPathResolver restoreOutputPathResolver, ILogger logger);
}
public class JetBrains.ProjectModel.NuGet.Common.FileTracking.NuGetProjectModelFilesTracker : object {
    private ILogger myLogger;
    private Lifetime myLifetime;
    private ISolution mySolution;
    private IFileSystemTracker myFileSystemTracker;
    private NuGetFileTrackingRestoreMarkService myFileTrackingRestoreMarkService;
    private NuGetOperationsRestoreMarkService myOperationsRestoreMarkService;
    private NuGetRestoreOutputPathResolver myRestoreOutputPathResolver;
    private IShellLocks myLocks;
    private GroupingEvent myGroupingEvent;
    private ConcurrentDictionary`2<VirtualFileSystemPath, IProject> myFilesMap;
    private ConcurrentDictionary`2<IProject, SubscribedProjectInfo> mySubscribedProjectInfo;
    private object myLocker;
    private HashSet`1<IProjectMark> myProjectsToReload;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsReady>k__BackingField;
    public IProperty`1<bool> IsReady { get; }
    public NuGetProjectModelFilesTracker(ILogger logger, Lifetime lifetime, ISolution solution, IFileSystemTracker fileSystemTracker, NuGetFileTrackingRestoreMarkService fileTrackingRestoreMarkService, NuGetOperationsRestoreMarkService operationsRestoreMarkService, NuGetRestoreOutputPathResolver restoreOutputPathResolver, ISolutionLoadTasksScheduler scheduler, IShellLocks locks, NuGetOptionsProvider nuGetOptionsProvider, ChangeManager changeManager);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsReady();
    private void SubscribeForNuGetGeneratedFiles();
    private void OnNuGetFileChange(FileSystemChangeDelta delta);
    private void ScheduleProjectReloading(IProject project);
    private void ProcessChange(ProjectModelChange change);
    private void SubscribeForProject(IProject project);
    private static bool IsRelevantChange(FileSystemChangeDelta delta);
    [CompilerGeneratedAttribute]
private void <.ctor>b__16_3(Task task);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <.ctor>b__16_1(ChangeEventArgs args);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ProjectModel.NuGet.Common.RiderNuGetSupportStatus : NuGetSupportStatus {
    [CompilerGeneratedAttribute]
private ISolutionToolset <solutionToolset>P;
    public static int MaxSupportedNetCoreSdkMajorVersion;
    public static string UnsupportedNetSdkLink;
    public RiderNuGetSupportStatus(ISolutionToolset solutionToolset);
    [CanBeNullAttribute]
public NuGetVersion GetSdkVersion();
    public virtual bool IsEmbeddedRestoreFullySupported();
}
[ZoneMarkerAttribute]
public class JetBrains.ProjectModel.NuGet.Common.ZoneMarker : object {
}
public class JetBrains.ProjectModel.NuGet.ProjectDocuments.NuGetMsBuildProject : MSBuildNuGetProject {
    public NuGetMsBuildProject(NuGetMsBuildProjectSystem projectSystem, string folderNuGetProjectPath, string packagesConfigFolderPath);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.ProjectDocuments.NuGetMsBuildProjectProvider : object {
    protected IShellLocks Locks;
    protected NuGetFolderManager FolderManager;
    [CompilerGeneratedAttribute]
private SimpleSignal <Invalidated>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsReady>k__BackingField;
    public int Priority { get; }
    public SimpleSignal Invalidated { get; }
    public IProperty`1<bool> IsReady { get; }
    public NuGetMsBuildProjectProvider(IShellLocks locks, NuGetFolderManager folderManager, Lifetime lifetime);
    public sealed virtual int get_Priority();
    [CompilerGeneratedAttribute]
public sealed virtual SimpleSignal get_Invalidated();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsReady();
    public sealed virtual bool IsValid(IProject project);
    public virtual NuGetProject Create(IProject project);
}
public class JetBrains.ProjectModel.NuGet.ProjectDocuments.NuGetMsBuildProjectSystem : object {
    [CompilerGeneratedAttribute]
private IShellLocks <locks>P;
    [CompilerGeneratedAttribute]
private IProject <project>P;
    private int myIndent;
    [CompilerGeneratedAttribute]
private INuGetProjectContext <NuGetProjectContext>k__BackingField;
    private static Guid ourWixGuid;
    public INuGetProjectContext NuGetProjectContext { get; public set; }
    public IShellLocks Locks { get; }
    public NuGetFramework TargetFramework { get; }
    public string ProjectName { get; }
    public string ProjectUniqueName { get; }
    public string ProjectFullPath { get; }
    public string ProjectFileFullPath { get; }
    public IProject Project { get; }
    public NuGetMsBuildProjectSystem(IShellLocks locks, IProject project);
    private static NuGetMsBuildProjectSystem();
    [CompilerGeneratedAttribute]
public sealed virtual INuGetProjectContext get_NuGetProjectContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NuGetProjectContext(INuGetProjectContext value);
    public IShellLocks get_Locks();
    protected void Log(string message);
    private void NotImplementedLog(string message);
    private void EmptyImplementationLog(string message);
    public void SetNuGetProjectContext(INuGetProjectContext nuGetProjectContext);
    public sealed virtual void AddFile(string path, Stream stream);
    public virtual void AddExistingFile(string path);
    public virtual void RemoveFile(string path);
    public virtual bool FileExistsInProject(string path);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.ProjectDocuments.NuGetMsBuildProjectSystem/<AddReferenceAsync>d__18")]
public virtual Task AddReferenceAsync(string referencePath);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.ProjectDocuments.NuGetMsBuildProjectSystem/<RemoveReferenceAsync>d__19")]
public virtual Task RemoveReferenceAsync(string name);
    public virtual Task`1<bool> ReferenceExistsAsync(string name);
    public virtual Task AddFrameworkReferenceAsync(string name, string packageId);
    public virtual void AddImport(string targetFullPath, ImportLocation location);
    public virtual void RemoveImport(string targetFullPath);
    public sealed virtual object GetPropertyValue(string propertyName);
    public sealed virtual string ResolvePath(string path);
    public sealed virtual bool IsSupportedFile(string path);
    public virtual void AddBindingRedirects();
    public sealed virtual Task BeginProcessingAsync();
    public sealed virtual void RegisterProcessedFiles(IEnumerable`1<string> files);
    public sealed virtual Task EndProcessingAsync();
    public sealed virtual void DeleteDirectory(string path, bool recursive);
    public sealed virtual IEnumerable`1<string> GetFiles(string path, string filter, bool recursive);
    private static Regex GetFilterRegex(string wildcard);
    private static string GetPattern(string token);
    public sealed virtual IEnumerable`1<string> GetFullPaths(string fileName);
    public sealed virtual IEnumerable`1<string> GetDirectories(string path);
    public virtual Task ExecutePackageScriptAsync(PackageIdentity packageIdentity, string packageInstallPath, string scriptRelativePath);
    public virtual Task`1<bool> ExecutePackageInitScriptAsync(PackageIdentity packageIdentity, string packageInstallPath);
    public sealed virtual NuGetFramework get_TargetFramework();
    public static NuGetFramework GetFramework(IProject project);
    public sealed virtual string get_ProjectName();
    public sealed virtual string get_ProjectUniqueName();
    public sealed virtual string get_ProjectFullPath();
    public sealed virtual string get_ProjectFileFullPath();
    public IProject get_Project();
    private static string ToStr(IList`1<string> items);
    protected VirtualFileSystemPath GetSystemPath(string path);
    protected string GetFullPath(string path);
    private ICollection`1<IProjectToAssemblyReference> GetReferences(string name);
    public ICollection`1<IProjectToProjectReference> GetProjectReferences();
    private void Remove(string path, IProjectModelTransactionCookie cookie);
    private void InvokeUnderTransaction(Action`1<IProjectModelTransactionCookie> action);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.ProjectDocuments.NuGetMsBuildProjectSystem/<InvokeUnderTransactionAsync>d__60")]
private Task InvokeUnderTransactionAsync(Action`1<IProjectModelTransactionCookie> action);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ProjectModel.NuGet.ProjectModel.DefaultNuGetOperatorEvents : NuGetOperatorEvents {
    [CompilerGeneratedAttribute]
private Lifetime <lifetime>P;
    [CompilerGeneratedAttribute]
private IShellLocks <locks>P;
    [CompilerGeneratedAttribute]
private IProjectModelMonitor <monitor>P;
    private static string NuGetOperationName;
    private static string NuGetPackageReferencesOperationName;
    public DefaultNuGetOperatorEvents(Lifetime lifetime, IShellLocks locks, IProjectModelMonitor monitor);
    public virtual void BeforeUserRequestedOperation();
    public virtual void AfterUserRequestedOperation();
    public virtual void BeforePackageReferencesProcessed();
    public virtual void AfterPackageReferencesProcessed();
    private void ExecuteNowOrQueue(Action action);
    [CompilerGeneratedAttribute]
private void <BeforeUserRequestedOperation>b__6_0();
    [CompilerGeneratedAttribute]
private void <AfterUserRequestedOperation>b__7_0();
    [CompilerGeneratedAttribute]
private void <BeforePackageReferencesProcessed>b__8_0();
    [CompilerGeneratedAttribute]
private void <AfterPackageReferencesProcessed>b__9_0();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ProjectModel.NuGet.ProjectModel.DefaultNugetRestoreMonitor : object {
    [CompilerGeneratedAttribute]
private ILogger <logger>P;
    [CompilerGeneratedAttribute]
private IShellLocks <shellLocks>P;
    [CompilerGeneratedAttribute]
private IProjectModelMonitor <projectModelMonitor>P;
    private static string OperationName;
    private int myNuGetOperationsCount;
    public DefaultNugetRestoreMonitor(ILogger logger, IShellLocks shellLocks, IProjectModelMonitor projectModelMonitor);
    public void BeforeNuGetRestore();
    protected virtual void OnOperationStarted();
    public void AfterNuGetRestore();
    protected virtual void OnOperationFinished();
}
[SolutionInstanceComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ProjectModel.NuGet.ProjectModel.DefaultNugetStartupRestore : object {
    public bool RestorePackagesOnStartup { get; }
    public virtual bool get_RestorePackagesOnStartup();
}
[SolutionInstanceComponentAttribute("0")]
public class JetBrains.ProjectModel.NuGet.ProjectModel.DotnetToolsSolutionLoadOperation : object {
    [CompilerGeneratedAttribute]
private Lifetime <lifetime>P;
    [CompilerGeneratedAttribute]
private ILogger <logger>P;
    [CompilerGeneratedAttribute]
private SolutionDotnetToolsTracker <dotnetToolsTracker>P;
    [CompilerGeneratedAttribute]
private ISolutionToolset <solutionToolset>P;
    [CompilerGeneratedAttribute]
private DotNetToolsRestoreOperation <restoreOperation>P;
    public int Priority { get; }
    public DotnetToolsSolutionLoadOperation(Lifetime lifetime, ILogger logger, SolutionDotnetToolsTracker dotnetToolsTracker, ISolutionToolset solutionToolset, DotNetToolsRestoreOperation restoreOperation);
    public sealed virtual int get_Priority();
    public sealed virtual Task Execute();
}
public interface JetBrains.ProjectModel.NuGet.ProjectModel.INugetStartupRestore {
    public bool RestorePackagesOnStartup { get; }
    public abstract virtual bool get_RestorePackagesOnStartup();
}
public abstract class JetBrains.ProjectModel.NuGet.ProjectModel.NuGetLegacyPackageReferenceProjectProviderBase : object {
    private ILogger myLogger;
    private ProjectDependenciesManager myProjectDependenciesManager;
    private NuGetHost myNuGetHost;
    private NuGetOptionsProvider myOptionsProvider;
    private NuGetRestoreOutputPathResolver myRestoreOutputPathResolver;
    [CompilerGeneratedAttribute]
private SimpleSignal <Invalidated>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsReady>k__BackingField;
    public int Priority { get; }
    public SimpleSignal Invalidated { get; }
    public IProperty`1<bool> IsReady { get; }
    protected NuGetLegacyPackageReferenceProjectProviderBase(ILogger logger, ProjectDependenciesManager projectDependenciesManager, NuGetHost nuGetHost, NuGetOptionsProvider optionsProvider, NuGetRestoreOutputPathResolver restoreOutputPathResolver);
    public sealed virtual int get_Priority();
    [CompilerGeneratedAttribute]
public sealed virtual SimpleSignal get_Invalidated();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsReady();
    public sealed virtual bool IsValid(IProject project);
    public sealed virtual NuGetProject Create(IProject project);
    public NuGetProject Create(IProject project, bool force);
    protected abstract virtual NuGetProject CreateNuGetProject(IProject project, MsBuildProjectHost projectHost, NuGetHost nugetHost, NuGetRestoreOutputPathResolver nugetRestoreOutputPathResolver, ILogger logger);
    private static bool IsLegacyProject(IProject project);
    private static bool MsBuildIsModern();
    private bool HasPackageReferences(IProject project);
    private static bool HasPackagesConfig(IProject project);
    private static bool IsRestoreProjectStyle(IProject project, string style);
    private bool IsPackageManagementFormat(NuGetPackageManagementFormat format);
}
public class JetBrains.ProjectModel.NuGet.ProjectModel.NuGetListener : object {
    private Lifetime myLifetime;
    private ILogger myLogger;
    private IShellLocks myShellLocks;
    private NuGetConfigManager myConfigManager;
    private NuGetProjectModelOperations myNuGetProjectModelOperations;
    private ISolutionHost mySolutionHost;
    private JetHashSet`1<IProjectMark> myProjectsToRestore;
    private IViewableProperty`1<bool> myLoadedProperty;
    [CompilerGeneratedAttribute]
private ISignal`1<IProject> <BeforeReloadAffectedProject>k__BackingField;
    public IReadonlyProperty`1<bool> IsLoaded { get; }
    public ISignal`1<IProject> BeforeReloadAffectedProject { get; }
    public NuGetListener(Lifetime lifetime, ILogger logger, ISolution solution, IShellLocks shellLocks, ISolutionLoadTasksScheduler scheduler, ISolutionHostLoadingQueue solutionHostLoadingQueue, NuGetOperator nuGetOperator, RiderNuGetMsBuildProjectDataCache nuGetMsBuildProjectDataCache, NuGetPackageReferenceTracker packageReferenceTracker, INugetStartupRestore nugetStartupRestore, NuGetConfigManager configManager, NuGetSolutionManager nuGetSolutionManager, NuGetProjectModelOperations nuGetProjectModelOperations, ProjectsWithoutDesignTimeBuildHolder projectsWithoutDesignTimeBuildHolder);
    public IReadonlyProperty`1<bool> get_IsLoaded();
    [CompilerGeneratedAttribute]
public ISignal`1<IProject> get_BeforeReloadAffectedProject();
    protected virtual void OnFinishBeforeUpdateProjects(NuGetOperationAggregatedResult nuGetOperationAggregatedResult);
    private void RunRestore();
    private void ReloadAffectedProjects(IReadOnlyCollection`1<IProject> projects, NuGetNotificationContext context);
}
public abstract class JetBrains.ProjectModel.NuGet.ProjectModel.NuGetNetCorePackageReferenceProjectProviderBase : object {
    private ILogger myLogger;
    private IShellLocks myLocks;
    private NuGetHost myNuGetHost;
    [CompilerGeneratedAttribute]
private SimpleSignal <Invalidated>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsReady>k__BackingField;
    public int Priority { get; }
    public SimpleSignal Invalidated { get; }
    public IProperty`1<bool> IsReady { get; }
    protected NuGetNetCorePackageReferenceProjectProviderBase(ILogger logger, IShellLocks locks, NuGetHost nuGetHost);
    public sealed virtual int get_Priority();
    [CompilerGeneratedAttribute]
public sealed virtual SimpleSignal get_Invalidated();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsReady();
    public sealed virtual bool IsValid(IProject project);
    public sealed virtual NuGetProject Create(IProject project);
    protected abstract virtual NuGetProject CreateNuGetProject(IProject project, MsBuildProjectHost projectHost, NuGetRestoreOutputPathResolver restoreOutputPathResolver, NuGetHost nugetHost, ILogger logger);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.ProjectModel.NuGetProjectModelOperations : object {
    private Lifetime myLifetime;
    private IShellLocks myLocks;
    private ILogger myLogger;
    private NuGetHost myNuGetHost;
    private NuGetOperator myNuGetOperator;
    private ISolutionHostLoadingQueue mySolutionHostLoadingQueue;
    private ProjectModelStateContainer myProjectModelStateContainer;
    private DefaultNuGetBindingRedirectsManager myRedirectsManager;
    private DefaultNugetRestoreMonitor myNugetRestoreMonitor;
    public NuGetProjectModelOperations(Lifetime lifetime, IShellLocks locks, ILogger logger, NuGetHost nuGetHost, SuspendHardOperationsManager suspendHardOperationsManager, NuGetOperator nuGetOperator, ISolutionHostLoadingQueue solutionHostLoadingQueue, ProjectModelStateContainer projectModelStateContainer, DefaultNuGetBindingRedirectsManager redirectsManager, DefaultNugetRestoreMonitor nugetRestoreMonitor);
    public void Restore(string reason, Action callback, ISet`1<IProject> projectsToReload);
    public void Restore(IReadOnlyCollection`1<IProjectMark> projectMarks, string reason, bool showStateInProjectView, Action callback, ISet`1<IProject> projectsToReload);
    private void RestoreInternal(IReadOnlyCollection`1<IProjectMark> projectsWithMissingPackages, string reason, string targetName, Action callback, ISet`1<IProject> projectsToReload);
    protected virtual void OnProjectMarkStateChanged(IProjectMark projectMark);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.ProjectModel.NuGetProjectModelSuspender : object {
    public NuGetProjectModelSuspender(Lifetime lifetime, IProjectModelMonitor monitor, NuGetSoftOperationSuspender nuGetSoftOperationSuspender);
}
[ZoneMarkerAttribute]
public class JetBrains.ProjectModel.NuGet.ProjectModel.ZoneMarker : object {
}
[SolutionInstanceComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ProjectModel.NuGet.ProjectSystems.DefaultNuGetBindingRedirectsManager : object {
    public Signal`1<HashSet`1<int>> Finish { get; }
    public virtual Signal`1<HashSet`1<int>> get_Finish();
    public virtual void AddProject(IProject project);
    public virtual void Execute();
}
public interface JetBrains.ProjectModel.NuGet.ProjectSystems.INuGetBindingRedirectsManager {
    public Signal`1<HashSet`1<int>> Finish { get; }
    public abstract virtual Signal`1<HashSet`1<int>> get_Finish();
    public abstract virtual void AddProject(IProject project);
    public abstract virtual void Execute();
}
public class JetBrains.ProjectModel.NuGet.ProjectSystems.NuGetReloadProjectAfterRestoreRequester : object {
    public static IProjectLoadRequester Instance;
    private static NuGetReloadProjectAfterRestoreRequester();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.NuGet.ProjectSystems.PackageSpecExtensions : object {
    [ExtensionAttribute]
public static PackageSpec ApplyContext(PackageSpec packageSpec, DependencyGraphCacheContext context, ILogger logger);
}
public class JetBrains.ProjectModel.NuGet.ProjectSystems.RiderNuGetLegacyPackageReferenceProject : RiderNuGetNetCorePackageReferenceProject {
    public NuGetProjectType ProjectType { get; }
    public RiderNuGetLegacyPackageReferenceProject(IProject project, NuGetHost nuGetHost, MsBuildProjectHost projectHost, NuGetRestoreOutputPathResolver restoreOutputPathResolver, ILogger logger);
    public virtual NuGetProjectType get_ProjectType();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.ProjectSystems.RiderNuGetLegacyPackageReferenceProjectProvider : NuGetLegacyPackageReferenceProjectProviderBase {
    public RiderNuGetLegacyPackageReferenceProjectProvider(ILogger logger, ProjectDependenciesManager projectDependenciesManager, NuGetHost nuGetHost, NuGetOptionsProvider optionsProvider, NuGetRestoreOutputPathResolver restoreOutputPathResolver);
    protected virtual NuGetProject CreateNuGetProject(IProject project, MsBuildProjectHost projectHost, NuGetHost nugetHost, NuGetRestoreOutputPathResolver nugetRestoreOutputPathResolver, ILogger logger);
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.ProjectSystems.RiderNuGetMsBuildProjectDataCache : object {
    private ILogger myLogger;
    private NuGetPackageSpecBuilder myBuilder;
    private Dictionary`2<IProjectMark, RiderNuGetMsBuildProjectData> myCachedProjectData;
    private object myEarlyLock;
    private HashSet`1<IProjectMark> myEarlyProjectsLoaded;
    private HashSet`1<IProjectMark> myEarlyProjectsRestoreRequired;
    [CompilerGeneratedAttribute]
private Signal`1<ICollection`1<IProjectMark>> <ProjectsLoaded>k__BackingField;
    [CompilerGeneratedAttribute]
private Signal`1<ICollection`1<IProjectMark>> <ProjectsRestoreRequired>k__BackingField;
    public Signal`1<ICollection`1<IProjectMark>> ProjectsLoaded { get; }
    public Signal`1<ICollection`1<IProjectMark>> ProjectsRestoreRequired { get; }
    public RiderNuGetMsBuildProjectDataCache(ILogger logger, ISolutionLoadTasksScheduler scheduler, NuGetPackageSpecBuilder builder);
    [CompilerGeneratedAttribute]
public Signal`1<ICollection`1<IProjectMark>> get_ProjectsLoaded();
    [CompilerGeneratedAttribute]
public Signal`1<ICollection`1<IProjectMark>> get_ProjectsRestoreRequired();
    private void ProcessQueuedProjects();
    [CanBeNullAttribute]
public RiderNuGetMsBuildProjectData GetData(IProjectMark projectMark);
    [NotNullAttribute]
public IReadOnlyCollection`1<RiderNuGetMsBuildProjectData> GetAllData();
    private sealed virtual override IMsBuildProjectBatchSession JetBrains.ProjectModel.ProjectsHost.MsBuild.IMsBuildProjectBatchListener.CreateSession();
    private void SetData(IProjectMark projectMark, RiderNuGetMsBuildProjectData data);
    private void FireEventsIfPossible(ICollection`1<IProjectMark> projectsLoaded, ICollection`1<IProjectMark> projectsRestoreRequired);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.ProjectSystems.RiderNuGetMsBuildProjectProvider : NuGetMsBuildProjectProvider {
    [CompilerGeneratedAttribute]
private INuGetBindingRedirectsManager <riderNuGetBindingRedirectsManager>P;
    private Lifetime myLifetime;
    public RiderNuGetMsBuildProjectProvider(ISolution solution, NuGetFolderManager folderManager, INuGetBindingRedirectsManager riderNuGetBindingRedirectsManager, Lifetime lifetime);
    public virtual NuGetProject Create(IProject project);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private NuGetProject <>n__0(IProject project);
}
public class JetBrains.ProjectModel.NuGet.ProjectSystems.RiderNuGetMsBuildProjectSystem : NuGetMsBuildProjectSystem {
    [CompilerGeneratedAttribute]
private MsBuildProjectHost <projectHost>P;
    [CompilerGeneratedAttribute]
private INuGetBindingRedirectsManager <riderNuGetBindingRedirectsManager>P;
    private static string TargetName;
    private static string BeforeTargetName;
    private static string PropertyName;
    private static string PropertyTextValue;
    private static string TaskName;
    private static string TaskParameterName;
    [NotNullAttribute]
public IProjectMark ProjectMark { get; }
    public RiderNuGetMsBuildProjectSystem(IShellLocks locks, IProject project, MsBuildProjectHost projectHost, INuGetBindingRedirectsManager riderNuGetBindingRedirectsManager);
    public IProjectMark get_ProjectMark();
    public virtual void AddImport(string targetFullPath, ImportLocation importLocation);
    public virtual void RemoveImport(string targetFullPath);
    public virtual void AddBindingRedirects();
    public virtual void AddExistingFile(string path);
    public virtual void RemoveFile(string path);
    public virtual bool FileExistsInProject(string path);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.ProjectSystems.RiderNuGetMsBuildProjectSystem/<AddReferenceAsync>d__11")]
public virtual Task AddReferenceAsync(string referencePath);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.ProjectSystems.RiderNuGetMsBuildProjectSystem/<RemoveReferenceAsync>d__12")]
public virtual Task RemoveReferenceAsync(string name);
    public virtual Task`1<bool> ReferenceExistsAsync(string name);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.ProjectSystems.RiderNuGetMsBuildProjectSystem/<AddFrameworkReferenceAsync>d__14")]
public virtual Task AddFrameworkReferenceAsync(string name, string packageId);
    public virtual Task ExecutePackageScriptAsync(PackageIdentity packageIdentity, string packageInstallPath, string scriptRelativePath);
    private void ProcessRoslynAnalyzers(string packageInstallPath, string scriptRelativePath);
    private void AddAnalyzers(List`1<FileSystemPath> analyzers);
    private void RemoveAnalyzers(List`1<FileSystemPath> analyzers);
    private string GetLanguageFolder();
    private static void Scan(FileSystemPath directory, List`1<FileSystemPath> analyzers);
    private static Nullable`1<ScriptAction> GetScriptAction(string scriptRelativePath);
    private void AddEnsureImportedTarget(MsBuildProjectModelSession session, string importPath);
    private void RemoveEnsureImportedTarget(MsBuildProjectModelSession session, string importPath);
    private static string CreateTargetCondition(string importPath);
    private static string CreateErrorText(string importPath);
    private static bool Compare(RdProjectItem projectItem, RelativePath location);
    [NotNullAttribute]
private RelativePath PreparePath(string path);
    [NotNullAttribute]
public static string BuildNuGetAssemblyFullName(VirtualFileSystemPath path, AssemblyNameInfo name);
}
public class JetBrains.ProjectModel.NuGet.ProjectSystems.RiderNuGetNetCorePackageReferenceProject : NuGetNetCorePackageReferenceProjectBase {
    [CompilerGeneratedAttribute]
private NuGetHost <nuGetHost>P;
    [CompilerGeneratedAttribute]
private MsBuildProjectHost <projectHost>P;
    [CompilerGeneratedAttribute]
private ILogger <logger>P;
    private IProject myProject;
    private IProjectMark myProjectMark;
    private RiderNuGetMsBuildProjectDataCache myProjectDataCache;
    private static Regex ourTargetFrameworkMatcher;
    public RiderNuGetNetCorePackageReferenceProject(IProject project, NuGetHost nuGetHost, MsBuildProjectHost projectHost, NuGetRestoreOutputPathResolver restoreOutputPathResolver, ILogger logger);
    private static RiderNuGetNetCorePackageReferenceProject();
    [StringFormatMethodAttribute("message")]
private void Log(string message, Object[] args);
    public virtual Task`1<IEnumerable`1<PackageReference>> GetInstalledPackagesAsync(CancellationToken token);
    public sealed virtual Task`1<IEnumerable`1<PackageReference>> GetResolvedInstalledPackagesAsync(CancellationToken token);
    private static string PackageIdentityToString(PackageIdentity identity);
    public virtual Task`1<string> GetCacheFilePathAsync();
    public sealed virtual PackageSpec GetPackageSpec();
    public virtual Task`1<IReadOnlyList`1<PackageSpec>> GetPackageSpecsAsync(DependencyGraphCacheContext context);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.ProjectSystems.RiderNuGetNetCorePackageReferenceProject/<GetPackageSpecsAndAdditionalMessagesAsync>d__15")]
public virtual Task`1<ValueTuple`2<IReadOnlyList`1<PackageSpec>, IReadOnlyList`1<IAssetsLogMessage>>> GetPackageSpecsAndAdditionalMessagesAsync(DependencyGraphCacheContext context);
    public virtual Task`1<bool> InstallPackageAsync(string packageId, VersionRange range, INuGetProjectContext nuGetProjectContext, BuildIntegratedInstallationContext installationContext, CancellationToken token);
    public virtual Task`1<bool> UninstallPackageAsync(string packageId, BuildIntegratedInstallationContext installationContext, CancellationToken token);
    public virtual Task`1<bool> UninstallPackageAsync(PackageIdentity packageIdentity, INuGetProjectContext nuGetProjectContext, CancellationToken token);
    [NotNullAttribute]
private List`1<RdProjectItem> GetExistingPackageReferences(MsBuildProjectModelSession session, string packageId);
    private void AddPackageReference(MsBuildProjectModelSession session, string packageId, PackageReferenceMetadata metadata, string frameworkName);
    private void UpdatePackageReference(MsBuildProjectModelSession session, RdProjectItem package, PackageReferenceMetadata metadata);
    private void RemovePackageReferences(MsBuildProjectModelSession session, IEnumerable`1<RdProjectItem> packages);
    private static string GetPackageVersion(RdProjectItem package);
    private List`1<RdItemMetadata> CreatePackageMetadata(PackageReferenceMetadata metadata, RdProjectItem existingPackage);
    private List`1<RdItemMetadata> CreatePackageWithVersionOverrideMetadata(PackageReferenceMetadata metadata, RdProjectItem existingPackage);
    private List`1<RdItemMetadata> CreateCpmFilePackageMetadata(PackageReferenceMetadata metadata, RdProjectItem existingPackage);
    private List`1<RdItemMetadata> CreateCpmProjectPackageMetadata(PackageReferenceMetadata metadata, RdProjectItem existingPackage);
    [CanBeNullAttribute]
private RdItemMetadata CreatePackageMetadataItem(string metadataName, string metadataValue, RdProjectItem existingPackage, Nullable`1<bool> expressedAsAttributeDefault);
    private bool CalculcateExpressedAsAttributeVersion();
    [NotNullAttribute]
private static string TryParseFrameworkCondition(string condition);
    private static bool IsCentralPackageManaged(IProjectMark projectMark, MsBuildProjectModelSession session);
    [CompilerGeneratedAttribute]
private void <GetPackageSpecsAsync>b__14_0(PackageSpec packageSpec);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.ProjectSystems.RiderNuGetNetCorePackageReferenceProjectProvider : NuGetNetCorePackageReferenceProjectProviderBase {
    public RiderNuGetNetCorePackageReferenceProjectProvider(ILogger logger, IShellLocks locks, NuGetHost nuGetHost);
    protected virtual NuGetProject CreateNuGetProject(IProject project, MsBuildProjectHost projectHost, NuGetRestoreOutputPathResolver restoreOutputPathResolver, NuGetHost nugetHost, ILogger logger);
}
[ZoneMarkerAttribute]
public class JetBrains.ProjectModel.NuGet.ProjectSystems.ZoneMarker : object {
}
[ShellComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.TargetFrameworks.RiderTargetFrameworkProvider : object {
    private IPlatformManager myPlatformManager;
    private IReadOnlyCollection`1<TargetFrameworkId> myShellTargetFrameworksCache;
    public RiderTargetFrameworkProvider(Lifetime lifetime, IPlatformManager platformManager);
    [NotNullAttribute]
public IReadOnlyCollection`1<TargetFrameworkId> GetTargetFrameworks(bool shellOnly);
    public static string PresentVersion(Version version, FrameworkIdentifier frameworkIdentifier);
    [NotNullAttribute]
public IReadOnlyCollection`1<TargetFrameworkId> GetAvailableTargetFrameworks(bool shellOnly, FrameworkIdentifier frameworkIdentifier);
    [NotNullAttribute]
public IReadOnlyCollection`1<string> GetVersions(bool shellOnly, FrameworkIdentifier frameworkIdentifier, Version min, Version max);
    [NotNullAttribute]
public IReadOnlyCollection`1<string> GetVersions(bool shellOnly, FrameworkIdentifier frameworkIdentifier);
    [NotNullAttribute]
public IReadOnlyCollection`1<string> GetProfiles(bool shellOnly, FrameworkIdentifier frameworkIdentifier);
    [NotNullAttribute]
public IReadOnlyCollection`1<string> GetProfiles(bool shellOnly, FrameworkIdentifier frameworkIdentifier, string version);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0(bool _);
}
[ZoneMarkerAttribute]
public class JetBrains.ProjectModel.NuGet.TargetFrameworks.ZoneMarker : object {
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.NuGet.Utils.NuGetUtils : object {
    public static NuGetVersion NuGetVersionSafeParse(string version);
    public static VersionRange VersionRangeSafeParse(string version);
    [CanBeNullAttribute]
public static NuGetFramework NuGetFrameworkSafeParse(string framework);
    [ExtensionAttribute]
public static string PrepareNugetPath(VirtualFileSystemPath path);
    [CanBeNullAttribute]
public static NuGetFramework GetNuGetFramework(int sdkVersion, MsBuildProjectPart projectPart, string projectFilePath);
    [NotNullAttribute]
public static BuildAction GuessDefaultBuildAction(IPath location);
    private static bool HasValidShortFolderName(NuGetFramework framework);
}
[SolutionInstanceComponentAttribute("0")]
public class JetBrains.ProjectModel.NuGet.Utils.RiderNuGetRestoreOutputPathResolver : NuGetRestoreOutputPathResolver {
    public RiderNuGetRestoreOutputPathResolver(IMsBuildVersionResolver versionResolver);
    [NotNullAttribute]
[PublicAPIAttribute]
public VirtualFileSystemPath GetRestoreOutputSystemPath(MsBuildProject msBuildProject);
    [NotNullAttribute]
[PublicAPIAttribute]
public string GetRestoreOutputPathString(MsBuildProject msBuildProject);
}
[ZoneMarkerAttribute]
public class JetBrains.ProjectModel.NuGet.Utils.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ProjectModel.NuGet.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
