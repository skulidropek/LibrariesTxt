public class JetBrains.HLSLHack.HlslSupportHackForUnityPlugin : object {
    public static bool ENABLE_HLSL;
    public static bool ENABLE_NATIVE_CPP;
    private static HlslSupportHackForUnityPlugin();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Aot.AotExtensions : object {
    [ExtensionAttribute]
public static bool IsAotProject(IProject project);
    [ExtensionAttribute]
public static bool IsAotProject(IProjectProperties properties);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.Aot.AotProjectPropertiesRequest : object {
    public IEnumerable`1<string> RequestedProperties { get; }
    public sealed virtual IEnumerable`1<string> get_RequestedProperties();
}
[ProjectFileTypeDefinitionAttribute("AppxManifest")]
public class JetBrains.ProjectModel.AppxManifestProjectFileType : XmlProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static AppxManifestProjectFileType <Instance>k__BackingField;
    public static string APPX_MANIFEST_EXTENSION;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static AppxManifestProjectFileType Instance { get; private set; }
    protected AppxManifestProjectFileType(string name);
    protected AppxManifestProjectFileType(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static AppxManifestProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(AppxManifestProjectFileType value);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Aspire.AspireExtensions : object {
    [ExtensionAttribute]
public static bool IsAspireProject(IProject project);
    [ExtensionAttribute]
public static bool IsAspireProject(IProjectProperties properties);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.Aspire.AspireProjectPropertiesRequest : object {
    public IEnumerable`1<string> RequestedProperties { get; }
    public sealed virtual IEnumerable`1<string> get_RequestedProperties();
}
[ProjectFileTypeDefinitionAttribute("ASP")]
public class JetBrains.ProjectModel.AspProjectFileType : HtmlProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static AspProjectFileType <Instance>k__BackingField;
    public static string PAGE_EXTENSION;
    public static string CONTROL_EXTENSION;
    public static string MASTER_PAGE_EXTENSION;
    public static string ASAX_EXTENSION;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static AspProjectFileType Instance { get; private set; }
    protected AspProjectFileType(string name);
    protected AspProjectFileType(string name, string presentableName);
    protected AspProjectFileType(string name, string presentableName, IEnumerable`1<string> extensions);
    [CompilerGeneratedAttribute]
public static AspProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(AspProjectFileType value);
}
[AssemblyToAssemblyReferencesResolverAttribute("1", "16")]
[ProjectToAssemblyReferencesResolverAttribute("1", "16")]
public class JetBrains.ProjectModel.Assemblies.AssemblyFoldersAssemblyResolver : object {
    private IPlatformManager myPlatformManager;
    private AssemblyNamesInterner myInterner;
    private static String[] ourExtensions;
    private AssemblyInfoDatabase myAssemblyInfoDataBase;
    public AssemblyFoldersAssemblyResolver(IPlatformManager platformManager, AssemblyNamesInterner interner, AssemblyInfoDatabase assemblyInfoDataBase);
    private static AssemblyFoldersAssemblyResolver();
    public sealed virtual IEnumerable`1<VirtualFileSystemPath> ResolveReference(ICollection`1<VirtualFileSystemPath> sourceAssemblyFile, AssemblyNameInfo referenceName);
    public sealed virtual IEnumerable`1<VirtualFileSystemPath> ResolveReference(AssemblyReferenceTarget referenceTarget, IProject referenceSource, TargetFrameworkId targetFrameworkId);
    private IEnumerable`1<VirtualFileSystemPath> Resolve(AssemblyNameInfo referenceName, IEnumerable`1<CompilePlatform> compilePlatforms);
}
[SolutionInstanceComponentAttribute("0")]
public class JetBrains.ProjectModel.Assemblies.AssemblyToAssemblyResolvers.AssemblyToAssemblyReferencesResolveManager : object {
    private IEnumerable`1<IAssemblyToAssemblyReferencesResolver> myResolvers;
    private ILogger myLogger;
    private FrameworkAssemblyToAssemblyReferencesResolver myFrameworkResolver;
    private AssemblyInfoDatabase myAssemblyInfoDataBase;
    private IShellLocks myShellLocks;
    private AssemblyReferenceResolutionCache myResolutionCache;
    private AssemblyExistsService myAssemblyExistsService;
    public AssemblyToAssemblyReferencesResolveManager(ILogger logger, IOrderedImmutableList`2<IAssemblyToAssemblyReferencesResolver, AssemblyToAssemblyReferencesResolverAttribute> resolvers, FrameworkAssemblyToAssemblyReferencesResolver frameworkResolver, AssemblyInfoDatabase assemblyInfoDataBase, IShellLocks shellLocks, AssemblyReferenceResolutionCache resolutionCache, AssemblyExistsService assemblyExistsService);
    [CanBeNullAttribute]
public virtual IAssemblyLocation ResolveReference(ICollection`1<VirtualFileSystemPath> sourceAssemblyFile, AssemblyNameInfo referenceName);
    protected virtual int ChooseAssemblyNameIndex(AssemblyNameInfo referenceName, IList`1<AssemblyNameInfo> candidates);
    [ObsoleteAttribute("Use overload with IAssemblyLocation")]
public IAssemblyResolver CreateMetadataAssemblyResolver(VirtualFileSystemPath assemblyPath);
    public IAssemblyResolver CreateMetadataAssemblyResolver(IAssemblyLocation assemblyLocation);
}
public interface JetBrains.ProjectModel.Assemblies.AssemblyToAssemblyResolvers.IModuleReferenceResolveContextSpecific {
    [NotNullAttribute]
public IModule Module { get; }
    public abstract virtual IModule get_Module();
    public abstract virtual void Dump(TextWriter writer);
}
public class JetBrains.ProjectModel.Assemblies.AssemblyToAssemblyResolvers.ProjectResolveContext : ConcurrentUserDataHolder {
    [NotNullAttribute]
private IProject myProject;
    [NotNullAttribute]
private TargetFrameworkId myTargetFramework;
    public IModule Module { get; }
    public TargetFrameworkId TargetFramework { get; }
    public string UniqueName { get; }
    public AssemblyNameAndLocation Originator { get; }
    [ObsoleteAttribute("Use ResolveContextManager instead")]
public ProjectResolveContext(IProject project, TargetFrameworkId targetFramework);
    public sealed virtual IModule get_Module();
    public sealed virtual TargetFrameworkId get_TargetFramework();
    public sealed virtual void Write(BinaryWriter writer);
    public sealed virtual string get_UniqueName();
    public sealed virtual bool IsValid();
    public sealed virtual AssemblyNameAndLocation get_Originator();
    public sealed virtual void Dump(TextWriter writer);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Assemblies.AssemblyToAssemblyResolvers.ResolveContextExtensions : object {
    [ExtensionAttribute]
public static bool IsPortable(IModuleReferenceResolveContext moduleReferenceResolveContext);
}
[SolutionInstanceComponentAttribute("0")]
public class JetBrains.ProjectModel.Assemblies.Impl.AssemblyFactory : object {
    private IShellLocks myLocks;
    private ChangeManager myChangeManager;
    private AssemblyCollection myAssemblyCollection;
    private SolutionElement mySolution;
    private AssemblyInfoDatabase myAssemblyInfoDataBase;
    private ResolveContextManager myResolveContextManager;
    private IFileSystemTracker myFileSystemTracker;
    private AssemblyReferencesFactory myAssemblyReferencesFactory;
    public AssemblyFactory(IShellLocks locks, AssemblyCollection assemblyCollection, SolutionElement solution, ChangeManager changeManager, AssemblyInfoDatabase assemblyInfoDataBase, ResolveContextManager resolveContextManager, IFileSystemTracker fileSystemTracker, AssemblyReferencesFactory assemblyReferencesFactory, ISettingsStore settingsStore, Lifetime lifetime);
    [NotNullAttribute]
public IAssemblyCookie AddRef(IAssemblyLocation assemblyLocation, string holderId, IModuleReferenceResolveContext moduleReferenceResolveContext, TargetFrameworkId frameworkId);
    [NotNullAttribute]
public sealed virtual IAssemblyCookie AddRef(IAssemblyLocation assemblyLocation, string holderId, IModuleReferenceResolveContext moduleReferenceResolveContext);
    [NotNullAttribute]
public IAssemblyFile GetOrCreateAssemblyFile(IAssemblyLocation expectedLocation, IModuleReferenceResolveContext moduleReferenceResolveContext, TargetFrameworkId frameworkId, Lifetime cookieLifetime);
    private void CreateNewAssemblyFile(IAssemblyFile assemblyFile, Assembly assembly);
    internal void ReadAndResolveAssemblyReferences(IAssembly assembly, IModuleReferenceResolveContext moduleReferenceResolveContext, Lifetime cookieLifetime);
    private void CreateNewAssembly(AssemblyNameInfo assemblyName, IAssemblyFile assemblyFile, TargetFrameworkId frameworkId);
    private void CheckAndUpdateProjectOutput(IAssemblyFile assemblyFile);
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.Assemblies.Impl.AssemblyReferenceResolutionCache : object {
    private Dictionary`2<AssemblyReferenceResolveCacheEntry, IAssemblyLocation> myAssemblyReferencesResolveCache;
    private Dictionary`2<ProjectReferenceResolveCacheEntry, IAssemblyLocation> myProjectToAssemblyResolveCache;
    private Lifetime myLifetime;
    private SolutionCaches mySolutionCaches;
    private ISolution mySolution;
    private JetFastSemiReenterableRWLock myReenterableRwLock;
    private DataIntern`1<AssemblyNameInfo> myAssemblyNameInfoIntern;
    private DataIntern`1<VirtualFileSystemPath> myFileSystemPathIntern;
    private IShellLocks myLocks;
    protected Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myIsCacheReady;
    private ILogger myLogger;
    private IDictionary`2<string, IModuleReferenceResolveContextReader> myContextReaders;
    public AssemblyReferenceResolutionCache(Lifetime lifetime, SolutionCaches solutionCaches, ISolution solution, ISolutionLoadTasksScheduler scheduler, IShellLocks locks, IEnumerable`1<IModuleReferenceResolveContextReader> contextReaders);
    private void SaveCache(FileSystemPath path);
    private void ReadCache();
    private FileSystemPath GetCacheFilePath();
    [CanBeNullAttribute]
public virtual IAssemblyLocation GetOrCreateResolveResult(AssemblyReferenceTarget referenceTarget, IModule referenceSource, IModuleReferenceResolveContext moduleReferenceResolveContext, Func`5<AssemblyReferenceTarget, IModule, IModuleReferenceResolveContext, bool, IAssemblyLocation> resolutionFunc);
    [CanBeNullAttribute]
public virtual IAssemblyLocation GetOrCreateResolveResult(AssemblyNameInfo referenceTargetName, IAssemblyLocation sourceLocation, AssemblyId id, IModuleReferenceResolveContext moduleReferenceResolveContext, Func`4<AssemblyNameInfo, IAssemblyLocation, IModuleReferenceResolveContext, IAssemblyLocation> resolutionFunc);
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_0();
    [CompilerGeneratedAttribute]
private void <ReadCache>b__14_0();
}
public interface JetBrains.ProjectModel.Assemblies.Impl.IModuleReferenceResolveContextReader {
    public string ContextId { get; }
    public abstract virtual IModuleReferenceResolveContext Read(BinaryReader reader);
    public abstract virtual string get_ContextId();
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.Assemblies.Impl.ModuleReferenceResolveManager : object {
    private AssemblyReferenceResolutionCache myAssemblyNameResolutionCache;
    private AssemblyReferencesFactory myAssemblyReferencesFactory;
    private AssemblyExistsService myAssemblyExistsService;
    private IShellLocks myLocks;
    private AssemblyToAssemblyReferencesResolveManager myAssemblyToAssemblyReferencesResolveManager;
    private ProjectToAssemblyReferencesResolveManager myProjectToAssemblyReferencesResolveManager;
    private IProjectModelBatchChangeManager myBatchChangeManager;
    private IModuleReferencesResolveStore myReferencesResolveStore;
    private Func`5<AssemblyReferenceTarget, IModule, IModuleReferenceResolveContext, bool, IAssemblyLocation> myResolveFuncCached;
    private Dictionary`2<IAssemblyLocation, int> myExplicitlyObservedAssemblies;
    private AssemblyCollection myAssemblyCollection;
    public ModuleReferenceResolveManager(IShellLocks locks, AssemblyCollection assemblyCollection, IProjectModelBatchChangeManager batchChangeManager, IModuleReferencesResolveStore referencesResolveStore, AssemblyToAssemblyReferencesResolveManager assemblyToAssemblyReferencesResolveManager, ProjectToAssemblyReferencesResolveManager projectToAssemblyReferencesResolveManager, AssemblyReferenceResolutionCache assemblyNameResolutionCache, AssemblyReferencesFactory assemblyReferencesFactory, AssemblyExistsService assemblyExistsService);
    public sealed virtual void ResolveAndStoreAssemblyReferences(IEnumerable`1<IModuleToAssemblyReference> references, Lifetime cookieLifetime);
    public sealed virtual void RefreshAssemblyReferences(IAssembly assembly);
    public sealed virtual void RefreshProjectOutputAssemblyReferences(ProjectImpl project);
    public sealed virtual void RefreshProjectOutputAssemblyReferences(ProjectImpl project, TargetFrameworkId targetFrameworkId);
    public virtual IAssemblyLocation Resolve(AssemblyReferenceTarget referenceTarget, IModule referenceSource, IModuleReferenceResolveContext moduleReferenceResolveContext);
    private IAssemblyLocation ResolveInternal(AssemblyReferenceTarget referenceTarget, IModule referenceSource, IModuleReferenceResolveContext moduleReferenceResolveContext, bool skipRetarget);
    [CanBeNullAttribute]
private IAssemblyLocation ResolveFromContext(IModuleReferenceResolveContext moduleReferenceResolveContext, AssemblyReferenceTarget referenceTarget);
    public sealed virtual void WipeReferencesResolve(IEnumerable`1<IModuleToAssemblyReference> references);
    private void UpdateReferenceAndFire(IModuleToAssemblyReference reference, IAssemblyLocation resolveResult, Lifetime cookieLifetime);
    public sealed virtual void Observe(Lifetime lifetime, IAssemblyLocation assemblyLocation);
    public sealed virtual bool IsObserving(IAssemblyLocation assemblyLocation);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.Assemblies.Impl.ModuleReferenceResolveSync : object {
    private ChangeManager myChangeManager;
    private ModuleReferencesResolveStore myStore;
    private ISolution mySolution;
    private IModuleReferenceResolveManager myReferenceResolveManager;
    private IShellLocks myLocks;
    private OutputAssemblies myOutputAssemblies;
    private AssemblyCollection myAssemblyCollection;
    private ICollection`1<IModuleToAssemblyReference> myResolveQueue;
    private OneToSetMap`2<IProject, TargetFrameworkId> myOutputRefreshQueue;
    private ICollection`1<Assembly> myRefreshQueue;
    private AssemblyInfoDatabase myAssemblyInfoDataBase;
    private ILogger myLogger;
    private Property`1<bool> mySuspendResolve;
    private Lifetime mySolutionLifetime;
    public ModuleReferenceResolveSync(Lifetime lifetime, ChangeManager changeManager, ModuleReferencesResolveStore store, ISolution solution, IModuleReferenceResolveManager referenceResolveManager, IShellLocks locks, OutputAssemblies outputAssemblies, AssemblyCollection assemblyCollection, AssemblyInfoDatabase assemblyInfoDataBase, ProjectModelElementPointerManager projectModelElementPointerManager, SuspendHardOperationsManager suspendHardOperationsManager, ISolutionLoadTasksScheduler solutionLoadTasksScheduler);
    private void DoResolve();
    private void ReResolveSuspiciousAssemblyReferences(IEnumerable`1<IProject> projects);
    public void ReResolveUnresolvedReferences();
    public void ReResolveAllReferences(IEnumerable`1<IProject> projects);
    public sealed virtual object Execute(IChangeMap changeMap);
    public void ApplyExternalAssemblyChanges(List`1<IAssemblyFile> assemblyFiles, List`1<IProjectToAssemblyReference> assemblyReferences);
    private void InvalidateAffectedAssemblies(JetHashSet`1<IModuleToAssemblyReference> affectedReferences);
    private void QueueAssemblyRefresh(Assembly assembly);
    private void QueueOutputAssemblyReferencesResolve(OneToSetMap`2<IProject, TargetFrameworkId> affectedProjectToProject);
    private void QueueResolve(IReadOnlyCollection`1<IModuleToAssemblyReference> references);
    protected virtual void UpdateProjectStructure();
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.Assemblies.Impl.ModuleReferencesResolveStore : object {
    private Lifetime myLifetime;
    private IShellLocks myLocks;
    private AssemblyFactory myAssemblyFactory;
    private SdkReferencesManager mySDKReferencesManager;
    private ChunkHashSet`1<IModuleToAssemblyReference> myUnresolvedToAssemblyReferences;
    private Dictionary`2<IProjectToProjectReference, IProject> myProjectToProjectReferences;
    private ChunkHashSet`1<IProjectToProjectReference> myUnresolvedProjectToProjectReferences;
    private OneToSetMap`2<string, IProjectToProjectReference> myProjectToProjectDependenciesName;
    private OneToSetMap`2<Guid, IProjectToProjectReference> myProjectToProjectDependenciesGuid;
    private OneToSetMap`2<VirtualFileSystemPath, IProjectToProjectReference> myProjectToProjectDependenciesPath;
    private ResolveContextManager myResolveContextManager;
    private AssemblyInfoDatabase myAssemblyInfoDatabase;
    private IBackendProjectModelLocator myBackendProjectModelLocator;
    private IAssemblyCollection myAssemblyCollection;
    private static Key`1<Tuple`2<int, IModule>> ourCacheReferenceResolveResult;
    public ICollection`1<IModuleToAssemblyReference> UnresolvedToAssemblyReferences { get; }
    public ModuleReferencesResolveStore(Lifetime lifetime, IShellLocks locks, AssemblyFactory assemblyFactory, SdkReferencesManager sdkReferencesManager, ResolveContextManager resolveContextManager, AssemblyInfoDatabase assemblyInfoDatabase, IBackendProjectModelLocator projectModelLocator, IAssemblyCollection assemblyCollection);
    private static ModuleReferencesResolveStore();
    public sealed virtual void InvalidateResolveResult(IModuleToAssemblyReference reference);
    public void RemoveReferenceResolve(IModuleToAssemblyReference reference);
    public IAssemblyFile SetResolveResult(IModuleToAssemblyReference reference, IAssemblyLocation resolveResult, Lifetime cookieLifetime);
    public sealed virtual IAssemblyFile GetAssemblyFileResolveResult(IModuleToAssemblyReference reference);
    [CanBeNullAttribute]
public sealed virtual IAssembly GetResolveResult(IModuleToAssemblyReference reference);
    private sealed virtual override IModule JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IModuleReferencesResolveStore.GetResolveResult(IProjectToModuleReference reference);
    public sealed virtual IProject GetResolveResult(IProjectToProjectReference reference);
    public sealed virtual ICollection`1<IAssemblyToAssemblyReference> GetAssemblyReferences(IAssembly assembly, IModuleReferenceResolveContext moduleReferenceResolveContext);
    public IProject GetResolveResult(IProjectToSdkReference reference);
    private sealed virtual override IEnumerable`1<IModuleToAssemblyReference> JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IModuleReferencesResolveStoreEx.ProjectAssemblyReferences();
    public sealed virtual ICollection`1<IModuleToAssemblyReference> GetReferencesToAssemblyForAllContexts(IAssembly assembly);
    public sealed virtual ICollection`1<IModuleToAssemblyReference> GetAssemblyReferencesForAllContexts(IModule module);
    public sealed virtual ICollection`1<Tuple`2<AssemblyNameInfo, IAssembly>> GetReferencedAssemblies(IAssembly assembly, IModuleReferenceResolveContext resolveContext);
    public ICollection`1<IProjectToAssemblyReference> GetProjectToAssemblyReferencesByLocation(IAssemblyLocation location);
    public ICollection`1<IModuleToAssemblyReference> GetAssemblyToAssemblyReferencesByTargetName(AssemblyNameInfo info);
    public sealed virtual ICollection`1<IProjectToProjectReference> GetReferencesToProject(IProject target);
    public void FireProjectReferenceAdded(IProjectToProjectReference projectToProjectReference);
    public void FireProjectReferenceRemoved(IProjectToProjectReference projectToProjectReference);
    private void RegisterPtpDependency(IProjectToProjectReference projectToProjectReference);
    private void RemovePtpDependency(IProjectToProjectReference projectToProjectReference);
    public void FireProjectsAdded(IEnumerable`1<IProject> projects);
    public void FireProjectsRemoved(IEnumerable`1<IProject> projects);
    public void FireProjectsChanged(IList`1<IProject> projects);
    private ChunkHashSet`1<IProjectToProjectReference> GetPtpDependencies(IProject project);
    public ICollection`1<IModuleToAssemblyReference> get_UnresolvedToAssemblyReferences();
    private ICollection`1<IModuleToAssemblyReference> CreateReferencesToAssembly(TargetFrameworkScope scope, AssemblyNameInfo assemblyNameInfo);
    private void UpdateUnresolvedPtPReferences();
    private void AddResolve(IProjectToProjectReference projectToProjectReference, IProject resolveResult);
    private void UpdateResolvedPtPReferences(IProject project);
    private void RemoveResolve(IProjectToProjectReference projectToProjectReference);
    private ValueTuple`3<string, Guid, VirtualFileSystemPath> ExtractPtPDependencyKeys(IProjectToProjectReference projectToProjectReference);
    private IProject TryResolveProjectToProjectReference(IProjectToProjectReference projectToProjectReference);
    [CompilerGeneratedAttribute]
private void <.ctor>b__15_0();
    [CompilerGeneratedAttribute]
private <>f__AnonymousType0`2<IProjectToProjectReference, IProject> <UpdateUnresolvedPtPReferences>b__43_1(IProjectToProjectReference projectUnresolvedReference);
}
[DebuggerDisplayAttribute("{Id}:{VersionSpec}")]
public class JetBrains.ProjectModel.Assemblies.Impl.NuGetLegacyReferenceSpecImpl : object {
    [CompilerGeneratedAttribute]
private NugetId <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionSpec>k__BackingField;
    public NugetId Id { get; private set; }
    public string VersionSpec { get; private set; }
    public NuGetLegacyReferenceSpecImpl(string id, string version);
    public NuGetLegacyReferenceSpecImpl(NugetId id, string versionSpec);
    [CompilerGeneratedAttribute]
public sealed virtual NugetId get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(NugetId value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_VersionSpec();
    [CompilerGeneratedAttribute]
private void set_VersionSpec(string value);
    public virtual string ToString();
}
public class JetBrains.ProjectModel.Assemblies.Impl.NugetPackageNameImpl : object {
    [CompilerGeneratedAttribute]
private NugetId <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public NugetId Id { get; private set; }
    public string Version { get; private set; }
    public NugetPackageNameImpl(string id, string version);
    public NugetPackageNameImpl(NugetId id, string version);
    [CompilerGeneratedAttribute]
public sealed virtual NugetId get_Id();
    [CompilerGeneratedAttribute]
private Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Id(NugetId value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Version();
    [CompilerGeneratedAttribute]
private Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Version(string value);
    public virtual string ToString();
    protected bool Equals(INugetPackageName other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[SolutionInstanceComponentAttribute("0")]
public class JetBrains.ProjectModel.Assemblies.Impl.ProjectResolveContextReader : object {
    private ISolution mySolution;
    private ResolveContextManager myResolveContextManager;
    public string ContextId { get; }
    public ProjectResolveContextReader(ISolution solution, ResolveContextManager resolveContextManager);
    public sealed virtual IModuleReferenceResolveContext Read(BinaryReader reader);
    public sealed virtual string get_ContextId();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Assemblies.Impl.ReferenceExtensions : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IModuleReferenceResolveContext GetResolveContext(IModuleToAssemblyReference moduleToModuleReference);
    [ExtensionAttribute]
public static bool IsValid(IModuleToAssemblyReference moduleToAssemblyReference);
    [ExtensionAttribute]
[NotNullAttribute]
public static AssemblyReferenceTarget GetReferenceTarget(IModuleToAssemblyReference moduleToAssemblyReference);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IModule GetOwnerModule(IModuleToAssemblyReference moduleToAssemblyReference);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static ISolution GetSolution(IModuleToAssemblyReference moduleToAssemblyReference);
    [NotNullAttribute]
public static string FixReferenceName(string name);
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.Assemblies.Impl.ResolveContextManager : object {
    private ConcurrentDictionary`2<Pair`2<IProject, TargetFrameworkId>, IModuleReferenceResolveContext> myProjectResolveContexts;
    private ILogger myLogger;
    private IAssemblyCollection myAssemblyCollection;
    private AssemblyInfoDatabase myAssemblyInfoDatabase;
    private ISolution mySolution;
    private UniversalReferencesScope myUniversalTargetFrameworkScope;
    public ResolveContextManager(ILogger logger, IAssemblyCollection assemblyCollection, AssemblyInfoDatabase assemblyInfoDatabase, ISolution solution);
    [NotNullAttribute]
public TargetFrameworkScope GetTargetFrameworkScope(IModuleReferenceResolveContext context);
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.Assemblies.Impl.ResolveContextManager/<EnumerateAllScopes>d__8")]
public IEnumerable`1<TargetFrameworkScope> EnumerateAllScopes();
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.Assemblies.Impl.ResolveContextManager/<EnumerateAllProjectScopes>d__9")]
private IEnumerable`1<TargetFrameworkScope> EnumerateAllProjectScopes();
    public void DumpTargetFrameworkReferences(TextWriter to);
    private static bool CanGetContext(IProjectProperties projectProperties);
    public static bool CanGetContext(IProject project);
    [ConditionalAttribute("JET_MODE_ASSERT")]
public static void CheckProject(IProject project);
    [CanBeNullAttribute]
internal IAssemblyFile GetResolveResult(AssemblyNameInfo assemblyNameInfo, IModuleReferenceResolveContext context);
    [CanBeNullAttribute]
internal IAssemblyFile GetResolveResult(AssemblyNameInfo assemblyNameInfo, IProject project, TargetFrameworkId targetFrameworkId);
    [CanBeNullAttribute]
private IAssemblyFile TryFindAssemblyByLocation(TargetFrameworkId targetFrameworkId, IAssemblyLocation resolveAssemblyLocation);
    [CanBeNullAttribute]
public IAssemblyLocation GetFilePathResolveResult(AssemblyNameInfo assemblyNameInfo, IModuleReferenceResolveContext resolveContext);
    [CanBeNullAttribute]
private IAssemblyLocation GetFilePathResolveResult(AssemblyNameInfo assemblyNameInfo, IProject project, TargetFrameworkId targetFrameworkId);
    [NotNullAttribute]
public IModuleReferenceResolveContext GetOrCreateProjectResolveContext(IProject project, TargetFrameworkId targetFramework);
    public void OnProjectsRemoved(IEnumerable`1<IProject> projects);
    [CanBeNullAttribute]
private IModuleReferenceResolveContext TryGetProjectResolveContext(IProject project, TargetFrameworkId& targetFramework);
    [CanBeNullAttribute]
public IModuleReferenceResolveContext TryGetProjectResolveContext(IProject project, TargetFrameworkId targetFramework);
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.Assemblies.Impl.ResolveContextManager/<GetAllProjectResolveContexts>d__23")]
public IEnumerable`1<IModuleReferenceResolveContext> GetAllProjectResolveContexts(IProject project);
    [NotNullAttribute]
public virtual TargetFrameworkId GetCurrentTargetFramework(IProject project);
    [NotNullAttribute]
protected virtual IModuleReferenceResolveContext CreateResolveContext(IProject project, TargetFrameworkId targetFramework);
    [NotNullAttribute]
public AssemblyNameInfo AdjustAssemblyName(AssemblyNameInfo initialAssemblyNameInfo, IModuleReferenceResolveContext resolveContext);
    public void DumpAllContexts(TextWriter writer);
    public void AddAssemblyReferenceResolve(IModuleToAssemblyReference reference, IAssemblyLocation resolveResult);
    public void AddResolveForUniversalContext(AssemblyNameInfo assemblyNameInfo, IAssemblyLocation resolveResult);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.Assemblies.Impl.UniversalResolveContextReader : object {
    public string ContextId { get; }
    public sealed virtual IModuleReferenceResolveContext Read(BinaryReader reader);
    public sealed virtual string get_ContextId();
}
public interface JetBrains.ProjectModel.Assemblies.Interfaces.IInstalledNugetPackage {
    public bool HasContentFiles { get; }
    public abstract virtual bool get_HasContentFiles();
}
public interface JetBrains.ProjectModel.Assemblies.Interfaces.IInstalledNugetPackageInfo {
    public VirtualFileSystemPath InstallPath { get; }
    public abstract virtual VirtualFileSystemPath get_InstallPath();
}
public interface JetBrains.ProjectModel.Assemblies.Interfaces.INuGetFindParentPackageService {
    [CanBeNullAttribute]
public abstract virtual IInstalledNugetPackage FindParentPackage(IProject project, IAssembly assembly);
}
public interface JetBrains.ProjectModel.Assemblies.Interfaces.INugetInstalledPackageNamesProvider {
    public int Priority { get; }
    public abstract virtual int get_Priority();
    public abstract virtual IEnumerable`1<IProjectToPackageReference> GetPackagesReferences(IProject project);
    public abstract virtual IInstalledNugetPackage GetInstalledPackage(IProject project, NugetId id);
}
public interface JetBrains.ProjectModel.Assemblies.Interfaces.INugetPackage {
    public abstract virtual IEnumerable`1<INugetReferenceSpec> GetDependencySets();
}
public interface JetBrains.ProjectModel.Assemblies.Interfaces.INugetPackageName {
    public NugetId Id { get; }
    public string Version { get; }
    public abstract virtual NugetId get_Id();
    public abstract virtual string get_Version();
}
public interface JetBrains.ProjectModel.Assemblies.Interfaces.INugetReferenceSpec {
    [NotNullAttribute]
public NugetId Id { get; }
    [CanBeNullAttribute]
public string VersionSpec { get; }
    public abstract virtual NugetId get_Id();
    public abstract virtual string get_VersionSpec();
}
public class JetBrains.ProjectModel.Assemblies.Interfaces.NugetId : object {
    private string myID;
    [NotNullAttribute]
public string ID { get; }
    public NugetId(string id);
    public string get_ID();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(NugetId left, NugetId right);
    public static bool op_Inequality(NugetId left, NugetId right);
    public virtual string ToString();
    public static NugetId op_Implicit(string fromStr);
    public static string op_Implicit(NugetId toStr);
}
public class JetBrains.ProjectModel.AssemblyChange : ProjectModelChange {
    public IAssembly Assembly { get; }
    protected string ElementPath { get; }
    protected string ElementDescription { get; }
    public AssemblyChange(IList`1<ProjectModelChange> deltas, IAssembly assembly, ProjectModelChangeType changeType);
    public AssemblyChange(IAssembly assembly, ProjectModelChangeType changeType);
    public IAssembly get_Assembly();
    protected virtual string get_ElementPath();
    protected virtual string get_ElementDescription();
    public virtual void Accept(IProjectModelChangeDeltaVisitor visitor);
    public virtual ProjectModelChange Propagate();
    protected virtual ProjectModelChange Merge(ProjectModelChange other);
    protected virtual string GetExtendedDump();
}
public class JetBrains.ProjectModel.AssemblyFileChange : ProjectModelChange {
    [CompilerGeneratedAttribute]
private IAssembly <OldAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssemblyFileData <OldData>k__BackingField;
    public IAssembly OldAssembly { get; }
    public IAssemblyFileData OldData { get; }
    public IAssemblyFile AssemblyFile { get; }
    protected string ElementPath { get; }
    protected string ElementDescription { get; }
    public AssemblyFileChange(IAssemblyFile assemblyFile, ProjectModelChangeType changeType, IAssembly oldAssembly, IAssemblyFileData oldData);
    public AssemblyFileChange(IAssemblyFile assemblyFile, ProjectModelChangeType changeType);
    [CompilerGeneratedAttribute]
public IAssembly get_OldAssembly();
    [CompilerGeneratedAttribute]
public IAssemblyFileData get_OldData();
    public IAssemblyFile get_AssemblyFile();
    public virtual void Accept(IProjectModelChangeDeltaVisitor visitor);
    protected virtual string get_ElementPath();
    protected virtual string get_ElementDescription();
    public virtual ProjectModelChange Propagate();
    protected virtual string GetExtendedDump();
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.AssemblyNamesInterner : object {
    private DataIntern`1<string> myDataIntern;
    public string Intern(string value);
}
public class JetBrains.ProjectModel.AssemblyReferenceResolveResult : object {
    private VirtualFileSystemPath myPathToAssemblyFile;
    public VirtualFileSystemPath PathToAssemblyFile { get; }
    public AssemblyReferenceResolveResult(VirtualFileSystemPath pathToAssemblyFile);
    public VirtualFileSystemPath get_PathToAssemblyFile();
}
[ProjectFileTypeDefinitionAttribute("Asxx")]
public class JetBrains.ProjectModel.AsxxProjectFileType : KnownProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static AsxxProjectFileType <Instance>k__BackingField;
    public static string HANDLER_EXTENSION;
    public static string WEBSERVICE_EXTENSION;
    public static string WCFSERVICE_EXTENSION;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static AsxxProjectFileType Instance { get; private set; }
    protected AsxxProjectFileType(string name);
    protected AsxxProjectFileType(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static AsxxProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(AsxxProjectFileType value);
}
public class JetBrains.ProjectModel.BeforeMadeWritableEventArgs : EventArgs {
    [NotNullAttribute]
public ICollection`1<IProjectFile> FilesToMakeWritable;
    [NotNullAttribute]
public ICollection`1<VirtualFileSystemPath> PathsToMakeWritable;
    public ICollection`1<IProjectFile> SkipOpen;
    [CompilerGeneratedAttribute]
private EnsureWritableResult <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInMemoryEditsAllowed>k__BackingField;
    public bool IsEmpty { get; }
    public EnsureWritableResult Result { get; public set; }
    public string Message { get; public set; }
    public bool IsInMemoryEditsAllowed { get; public set; }
    public BeforeMadeWritableEventArgs(ICollection`1<IProjectFile> filesToMakeWritable, ICollection`1<VirtualFileSystemPath> pathsToMakeWritable, ICollection`1<IProjectFile> skipOpen);
    public bool get_IsEmpty();
    [CompilerGeneratedAttribute]
public EnsureWritableResult get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(EnsureWritableResult value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public bool get_IsInMemoryEditsAllowed();
    [CompilerGeneratedAttribute]
public void set_IsInMemoryEditsAllowed(bool value);
}
public class JetBrains.ProjectModel.BeforeMadeWritableEventHandler : MulticastDelegate {
    public BeforeMadeWritableEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BeforeMadeWritableEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, BeforeMadeWritableEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class JetBrains.ProjectModel.build.BuildOptions : object {
    [CompilerGeneratedAttribute]
private bool <TreatWarningsAsErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private JetHashSet`1<string> <NoWarn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XmlDoc>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EmitEntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputName>k__BackingField;
    public static BuildOptions Empty;
    public bool TreatWarningsAsErrors { get; internal set; }
    public JetHashSet`1<string> NoWarn { get; private set; }
    public bool XmlDoc { get; internal set; }
    public bool EmitEntryPoint { get; internal set; }
    [CanBeNullAttribute]
public string OutputName { get; internal set; }
    private static BuildOptions();
    [CompilerGeneratedAttribute]
public bool get_TreatWarningsAsErrors();
    [CompilerGeneratedAttribute]
internal void set_TreatWarningsAsErrors(bool value);
    [CompilerGeneratedAttribute]
public JetHashSet`1<string> get_NoWarn();
    [CompilerGeneratedAttribute]
private void set_NoWarn(JetHashSet`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_XmlDoc();
    [CompilerGeneratedAttribute]
internal void set_XmlDoc(bool value);
    [CompilerGeneratedAttribute]
public bool get_EmitEntryPoint();
    [CompilerGeneratedAttribute]
internal void set_EmitEntryPoint(bool value);
    [CompilerGeneratedAttribute]
public string get_OutputName();
    [CompilerGeneratedAttribute]
internal void set_OutputName(string value);
    public BuildOptions Clone();
    public void Write(BinaryWriter w);
    public static BuildOptions Read(BinaryReader r);
    protected bool Equals(BuildOptions other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(BuildOptions left, BuildOptions right);
    public static bool op_Inequality(BuildOptions left, BuildOptions right);
}
public class JetBrains.ProjectModel.build.BuildOptionsInAllConfigurations : object {
    [CompilerGeneratedAttribute]
private bool <FileExists>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildOptions <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, BuildOptions> <ConfigurationNameToOptions>k__BackingField;
    public static BuildOptionsInAllConfigurations Empty;
    public bool FileExists { get; }
    public BuildOptions Default { get; private set; }
    public IDictionary`2<string, BuildOptions> ConfigurationNameToOptions { get; private set; }
    public BuildOptionsInAllConfigurations(bool fileExists);
    private static BuildOptionsInAllConfigurations();
    [CompilerGeneratedAttribute]
public bool get_FileExists();
    [CompilerGeneratedAttribute]
public BuildOptions get_Default();
    [CompilerGeneratedAttribute]
private void set_Default(BuildOptions value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, BuildOptions> get_ConfigurationNameToOptions();
    [CompilerGeneratedAttribute]
private void set_ConfigurationNameToOptions(IDictionary`2<string, BuildOptions> value);
    public void Write(BinaryWriter w);
    public static BuildOptionsInAllConfigurations Read(BinaryReader r);
    public BuildOptions GetBuildOptionsForConfiguration(string configurationName);
    protected bool Equals(BuildOptionsInAllConfigurations other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(BuildOptionsInAllConfigurations left, BuildOptionsInAllConfigurations right);
    public static bool op_Inequality(BuildOptionsInAllConfigurations left, BuildOptionsInAllConfigurations right);
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.build.BuildOptionsInProjectJson : object {
    private IProjectJsonDataCache myCache;
    private BuildOptionsInProjectJsonDataProvider myDataProvider;
    [CompilerGeneratedAttribute]
private ISignal`1<VirtualFileSystemPath> <ProjectJsonDataChanged>k__BackingField;
    public ISignal`1<VirtualFileSystemPath> ProjectJsonDataChanged { get; }
    public BuildOptionsInProjectJson(Lifetime lifetime, IProjectJsonDataCache cache);
    [CompilerGeneratedAttribute]
public ISignal`1<VirtualFileSystemPath> get_ProjectJsonDataChanged();
    [NotNullAttribute]
public BuildOptionsInAllConfigurations GetAllBuildOptions(VirtualFileSystemPath projectFilePath);
    [CanBeNullAttribute]
public BuildOptions TryGetBuildOptionsForConfiguration(VirtualFileSystemPath projectFilePath, string configurationName);
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.Build.OutputAssemblies : object {
    private AssemblyFactory myAssemblyFactory;
    private IShellLocks myLocks;
    private ChangeManager myChangeManager;
    private ISolution mySolution;
    private IFileSystemTracker myFileSystemTracker;
    private Lifetime myLifetime;
    private AssemblyCollection myAssemblyCollection;
    private AssemblyInfoDatabase myAssemblyInfoDataBase;
    private ILogger myLogger;
    private object myLockObj;
    private ConcurrentDictionary`2<AssemblyId, Pair`2<IProject, TargetFrameworkId>> myOutputIdToProjectMap;
    private ConcurrentDictionary`2<Pair`2<IProject, TargetFrameworkId>, IAssemblyCookie> myOutputAssemblyCookies;
    private BidirectionalMapOnCompactMap`2<VirtualFileSystemPath, Pair`2<IProject, TargetFrameworkId>> myOutputPathsMap;
    private BidirectionalMapOnCompactMap`2<VirtualFileSystemPath, Pair`2<IProject, TargetFrameworkId>> myReferencePathsMap;
    private Dictionary`2<IProject, LifetimeDefinition> myFileSystemTrackerLifetimeMap;
    private AsyncItemsProcessor`1<Action> myUpdateOutputAssemblyIdProcessor;
    private SynchronizationPoint myUpdateOutputAssemblySyncPoint;
    private IDictionary`2<IAssembly, IProject> myProjectByOutputAssemblyCache;
    private IDictionary`2<IAssembly, IProject> myProjectByReferenceAssemblyCache;
    [CompilerGeneratedAttribute]
private ISignal`1<IProject> <ProjectOutputAssembliesChanged>k__BackingField;
    public ISignal`1<IProject> ProjectOutputAssembliesChanged { get; }
    public OutputAssemblies(Lifetime lifetime, ILogger logger, ISolution solution, IShellLocks locks, IViewableProjectsCollection projects, IFileSystemTracker fileSystemTracker, ChangeManager changeManager, AssemblyFactory assemblyFactory, AssemblyCollection assemblyCollection, AssemblyInfoDatabase assemblyInfoDataBase, SynchronizationPoints synchronizationPoints);
    [CompilerGeneratedAttribute]
public ISignal`1<IProject> get_ProjectOutputAssembliesChanged();
    private void FireProjectOutputAssembliesChanged(IProject project);
    private void FileSystemChange(FileSystemChange fileSystemChange);
    private sealed virtual override object JetBrains.Application.changes.IChangeProvider.Execute(IChangeMap changeMap);
    private void ClearCaches();
    [NotNullAttribute]
private IList`1<SimpleProjectOutputChange> OnProjectChange(ProjectItemChange projectItemChange);
    [NotNullAttribute]
private IList`1<SimpleProjectOutputChange> ProcessProjectRemoved(IProject project);
    private SimpleProjectOutputChange ProcessProjectRemoved(IProject project, Entry entry);
    private SimpleProjectOutputChange OnAssemblyChange(ProjectModelChange projectModelChange);
    private void ScheduleUpdateOutputAssemblyAndId(IProject project);
    private void UpdateOutputAssemblyId(IProject project, TargetFrameworkId targetFrameworkId, VirtualFileSystemPath outputPath, AssemblyNameInfo assemblyInfo, Nullable`1<AssemblyId> id);
    [CanBeNullAttribute]
private IAssemblyCookie UpdateOutputAssemblyCookie(IProject project, TargetFrameworkId targetFrameworkId, IAssemblyLocation newOutputLocation);
    [CanBeNullAttribute]
private IAssembly ForceUpdateOutputAssembly(IProject project, TargetFrameworkId targetFrameworkId);
    [CanBeNullAttribute]
public IProject GetProjectByOutputAssemblyId(AssemblyId id);
    public Pair`2<IProject, TargetFrameworkId> GetProjectAndTargetFrameworkIdByOutputAssemblyId(AssemblyId id);
    [CanBeNullAttribute]
public IProject TryGetProjectByOutputAssembly(IAssembly assembly);
    private IProject CalculateProjectByOutputAssembly(IAssembly assembly);
    [CanBeNullAttribute]
public IProject TryGetProjectByReferenceAssembly(IAssembly assembly);
    private IProject CalculateProjectByReferenceAssembly(IAssembly assembly);
    public bool TryGetProjectAndTargetFrameworkIdByOutputAssemblyLocation(VirtualFileSystemPath assemblyLocation, Pair`2& result);
    public bool TryGetProjectAndTargetFrameworkIdByReferenceAssemblyLocation(VirtualFileSystemPath assemblyLocation, Pair`2& result);
    [CanBeNullAttribute]
public Tuple`2<IProject, TargetFrameworkId> TryGetProjectAndTargetFrameworkIdByOutputAssemblyLocation(VirtualFileSystemPath assemblyLocation);
    [CanBeNullAttribute]
public Tuple`2<IProject, TargetFrameworkId> TryGetProjectAndTargetFrameworkIdByOutputAssemblyLocation(IAssemblyLocation assemblyLocation);
    [CanBeNullAttribute]
public Tuple`2<IProject, TargetFrameworkId> TryGetProjectAndTargetFrameworkIdByReferenceAssemblyLocation(VirtualFileSystemPath assemblyLocation);
    [CanBeNullAttribute]
public IProject TryGetProjectByOutputAssemblyLocation(VirtualFileSystemPath assemblyLocation);
    [CanBeNullAttribute]
public IProject TryGetProjectByReferenceAssemblyLocation(VirtualFileSystemPath assemblyLocation);
    private void BeforeComponentsDisposed(IProject leavingProject);
    protected virtual void AfterProjectOpenedInternal(IProject project);
    private bool UpdateReferencePathMap(Pair`2<IProject, TargetFrameworkId> pair);
    private bool OnOutputFilePathChanged(IProject project, bool targetFrameworkIdsMightHaveChanged);
    private void AdviseOutputAssemblyChanged(FileSystemChangeDelta fileSystemChangeDelta);
    public void Dump(StreamWriter writer, VirtualFileSystemPath basePath);
}
[SolutionInstanceComponentAttribute("10")]
internal class JetBrains.ProjectModel.Build.ProjectBuildSettingsInit : object {
    public ProjectBuildSettingsInit(IViewableProjectsCollection projects, Lifetime lifetime);
    private void BeforeComponentsDisposed(IProject project);
    private static void AfterComponentsCreated(IProject project);
}
[FlagsAttribute]
public enum JetBrains.ProjectModel.Build.ProjectOutputAssembliesChangeType : Enum {
    public int value__;
    public static ProjectOutputAssembliesChangeType NONE;
    public static ProjectOutputAssembliesChangeType OUTPUT_ASSEMBLY_PATH;
    public static ProjectOutputAssembliesChangeType OUTPUT_ASSEMBLY_MVID;
    public static ProjectOutputAssembliesChangeType REFERENCE_ASSEMBLY_PATH;
    public static ProjectOutputAssembliesChangeType REFERENCE_ASSEMBLY_MVID;
    public static ProjectOutputAssembliesChangeType REMOVED;
}
public class JetBrains.ProjectModel.Build.VBBuildSettings : ManagedProjectBuildSettings {
    private OptionCompare myOptionCompare;
    private OptionExplicit myOptionExplicit;
    private OptionInfer myOptionInfer;
    private OptionStrict myOptionStrict;
    public OptionCompare OptionCompare { get; public set; }
    public OptionExplicit OptionExplicit { get; public set; }
    public OptionInfer OptionInfer { get; public set; }
    public OptionStrict OptionStrict { get; public set; }
    public sealed virtual OptionCompare get_OptionCompare();
    public void set_OptionCompare(OptionCompare value);
    public sealed virtual OptionExplicit get_OptionExplicit();
    public void set_OptionExplicit(OptionExplicit value);
    public sealed virtual OptionInfer get_OptionInfer();
    public void set_OptionInfer(OptionInfer value);
    public sealed virtual OptionStrict get_OptionStrict();
    public void set_OptionStrict(OptionStrict value);
    public virtual bool UpdateFrom(IBuildSettings settings);
    public virtual void WriteBuildSettings(UnsafeWriter writer, IStringIntern stringIntern);
    public virtual void ReadBuildSettings(UnsafeReader reader, IStringIntern stringIntern);
    public virtual void Dump(TextWriter to, int indent);
}
public class JetBrains.ProjectModel.BuildAction : object {
    [NotNullAttribute]
private static StringComparer ourStringComparer;
    [NotNullAttribute]
private static Dictionary`2<string, BuildAction> myBuildActions;
    [NotNullAttribute]
public string Value;
    public static BuildAction NONE;
    public static BuildAction COMPILE;
    public static BuildAction CONTENT;
    public static BuildAction BUILD;
    public static BuildAction RESOURCE;
    public static BuildAction EMBEDDED_RESOURCE;
    public static BuildAction APPLICATION_DEFINITION;
    public static BuildAction INTERFACE_DEFINITION;
    public static BuildAction BUNDLE_RESOURCE;
    public static BuildAction PAGE;
    public static BuildAction TYPE_SCRIPT_COMPILE;
    public static BuildAction ADDITIONAL_FILES;
    public static BuildAction AVALONIA_RESOURCE;
    public static BuildAction AVALONIA_XAML;
    public static BuildAction GLOBAL_ANALYZER_CONFIG_FILES;
    public static BuildAction EDITOR_CONFIG_FILES;
    public static BuildAction ORIGINAL_XAML_RESOURCE;
    public static BuildAction SCRIPT;
    public static BuildAction RAZOR_COMPONENT;
    public static BuildAction CL_COMPILE;
    public static BuildAction CL_INCLUDE;
    public static BuildAction COMPILE_IF_NOT_EXCLUDED;
    public static BuildAction MAUI_XAML;
    public static BuildAction UNDEFINED;
    public bool IsUndefined { get; }
    private BuildAction(string value);
    private static BuildAction();
    [NotNullAttribute]
public static BuildAction GetOrCreate(string itemType);
    [CanBeNullAttribute]
public static BuildAction GetKnown(string itemType);
    public static IReadOnlyList`1<BuildAction> GetAllKnownBuildActions();
    public bool get_IsUndefined();
    public sealed virtual bool Equals(BuildAction other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(BuildAction left, BuildAction right);
    public static bool op_Inequality(BuildAction left, BuildAction right);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.BuildActionExtensions : object {
    [ExtensionAttribute]
public static bool IsNone(BuildAction buildAction);
    [ExtensionAttribute]
public static bool IsCompile(BuildAction buildAction);
    [ExtensionAttribute]
public static bool IsCompileNotClCompile(BuildAction buildAction);
    [ExtensionAttribute]
public static bool IsContent(BuildAction buildAction);
    [ExtensionAttribute]
public static bool IsResource(BuildAction buildAction);
    [ExtensionAttribute]
public static bool IsEmbeddedResource(BuildAction buildAction);
    [ExtensionAttribute]
public static bool IsXamlPage(BuildAction buildAction);
    [ExtensionAttribute]
public static bool IsXamlApplicationDefinition(BuildAction buildAction);
    [ExtensionAttribute]
public static bool IsXamlDesignData(BuildAction buildAction);
    [ExtensionAttribute]
public static bool IsXamlDesignDataWithTypes(BuildAction buildAction);
    [ExtensionAttribute]
public static bool IsAvaloniaResource(BuildAction buildAction);
    [ExtensionAttribute]
public static bool IsAvaloniaXaml(BuildAction buildAction);
    [ExtensionAttribute]
public static bool IsAdditionalFiles(BuildAction buildAction);
}
public static class JetBrains.ProjectModel.BuildActionModifierUtil : object {
    [NullableContextAttribute("1")]
public static BuildAction FixBuildAction(IProject project, VirtualFileSystemPath location, TargetFrameworkId targetFrameworkId, BuildAction buildAction);
}
[UsedImplicitlyAttribute]
public class JetBrains.ProjectModel.BuildActionTypeConverter : TypeConverterBase`1<BuildAction> {
    [NotNullAttribute]
public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
[ProjectFileTypeDefinitionAttribute("BuildScript")]
public class JetBrains.ProjectModel.BuildScriptProjectFileType : XmlProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static BuildScriptProjectFileType <Instance>k__BackingField;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static BuildScriptProjectFileType Instance { get; private set; }
    protected BuildScriptProjectFileType(string name);
    protected BuildScriptProjectFileType(string name, string presentableName);
    protected BuildScriptProjectFileType(string name, string presentableName, IEnumerable`1<string> extensions);
    [CompilerGeneratedAttribute]
public static BuildScriptProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(BuildScriptProjectFileType value);
}
public enum JetBrains.ProjectModel.BuildTools.AutoDownloadSdkPolicy : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("Always enable")]
public static AutoDownloadSdkPolicy Enable;
    [LocalizedDescriptionAttribute("Always disable")]
public static AutoDownloadSdkPolicy Disable;
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.BuildTools.BuildToolAutoDetector : object {
    public virtual IBuildTool Select(VirtualFileSystemPath solutionFilePath, IReadOnlyCollection`1<VirtualFileSystemPath> projectFiles, IReadOnlyCollection`1<IBuildTool> buildTools);
}
public abstract class JetBrains.ProjectModel.BuildTools.BuildToolBase : object {
    [CompilerGeneratedAttribute]
private Version2 <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <Directory>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <ExePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <EnvironmentVariables>k__BackingField;
    public Version2 Version { get; }
    public VirtualFileSystemPath Directory { get; }
    public VirtualFileSystemPath ExePath { get; }
    public Dictionary`2<string, string> EnvironmentVariables { get; }
    public int Priority { get; }
    public bool UseDotNetCoreForLaunch { get; }
    protected BuildToolBase(Version2 version, VirtualFileSystemPath directory, VirtualFileSystemPath exePath);
    [CompilerGeneratedAttribute]
public sealed virtual Version2 get_Version();
    [CompilerGeneratedAttribute]
public sealed virtual VirtualFileSystemPath get_Directory();
    [CompilerGeneratedAttribute]
public sealed virtual VirtualFileSystemPath get_ExePath();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_EnvironmentVariables();
    public abstract virtual int get_Priority();
    public abstract virtual bool get_UseDotNetCoreForLaunch();
    public sealed virtual bool Equals(BuildToolBase other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.BuildTools.BuildToolContainer : object {
    private bool myShouldSetNetCoreSdkToInvalidIfEmpty;
    public IBuildToolProvider[] Providers;
    private ILogger myLogger;
    private BuildToolAutoDetector myAutoDetector;
    private IReadOnlyList`1<IBuildToolPatcher> myPatchers;
    private object myLock;
    private BuildToolContainer(ILogger logger, BuildToolAutoDetector autoDetector, IReadOnlyList`1<IBuildToolPatcher> patchers, IReadOnlyList`1<ICustomBuildToolProvider> customBuildToolProviders, bool shouldSetNetCoreSdkToInvalidIfEmpty);
    public BuildToolContainer(ILogger logger, BuildToolAutoDetector autoDetector, IReadOnlyList`1<IBuildToolPatcher> patchers, INetCoreSdkEnvironmentResolvePatcher netCoreSdkEnvironmentResolvePatcher, IReadOnlyList`1<ICustomBuildToolProvider> customBuildToolProviders);
    public static BuildToolContainer GetStaticInstance(bool isRider);
    public IReadOnlyCollection`1<IBuildTool> Discover(BuildToolEnvironment env);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.BuildTools.BuildToolContainer/<DiscoverAsync>d__10")]
public Task`1<IReadOnlyCollection`1<IBuildTool>> DiscoverAsync(BuildToolEnvironment env);
    public virtual IReadOnlyCollection`1<IBuildTool> Discover(IReadOnlyCollection`1<IBuildToolProvider> providers, BuildToolEnvironment env);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.BuildTools.BuildToolContainer/<DiscoverAsync>d__12")]
public virtual Task`1<IReadOnlyCollection`1<IBuildTool>> DiscoverAsync(IReadOnlyCollection`1<IBuildToolProvider> providers, BuildToolEnvironment env);
    private void LogBuildTools(List`1<IBuildTool> buildTools);
    [CanBeNullAttribute]
public IBuildTool GetBuildToolBySettings(UInt32 versionKey, VirtualFileSystemPath customBuildToolPath, BuildToolEnvironment env);
    [CanBeNullAttribute]
public IBuildTool GetAutoDetected(BuildToolEnvironment env);
    [CanBeNullAttribute]
public IBuildTool GetHighest(BuildToolEnvironment env);
    [CanBeNullAttribute]
public static IBuildTool GetHighest(IReadOnlyCollection`1<IBuildTool> buildTools);
    [CanBeNullAttribute]
public IBuildTool FromToolsetVersion(Version2 version, VirtualFileSystemPath customBuildToolPath, BuildToolEnvironment env);
}
public class JetBrains.ProjectModel.BuildTools.BuildToolEnvironment : object {
    public static BuildToolEnvironment EmptyEnvironment;
    [NotNullAttribute]
public VirtualFileSystemPath SolutionFilePath;
    [NotNullAttribute]
public IReadOnlyCollection`1<VirtualFileSystemPath> ProjectFiles;
    [NotNullAttribute]
public IReadOnlyCollection`1<DotNetCoreToolset> DotNetCoreToolsets;
    [NotNullAttribute]
public IReadOnlyCollection`1<VirtualFileSystemPath> MonoRootPaths;
    public IInteractionContext Context { get; }
    private BuildToolEnvironment(VirtualFileSystemPath solutionFilePath, IReadOnlyCollection`1<VirtualFileSystemPath> projectFiles, IReadOnlyCollection`1<DotNetCoreToolset> dotNetCoreToolsets, IReadOnlyCollection`1<VirtualFileSystemPath> monoRootPaths);
    private static BuildToolEnvironment();
    public static BuildToolEnvironment Create(DotNetCoreToolset dotNetCoreToolset, VirtualFileSystemPath monoRootPath);
    public static BuildToolEnvironment Create(VirtualFileSystemPath solutionFilePath, IReadOnlyCollection`1<VirtualFileSystemPath> projectFiles, DotNetCoreToolset dotNetCoreToolset, MonoRuntime monoRuntime);
    public static BuildToolEnvironment Create(VirtualFileSystemPath solutionFilePath, IReadOnlyCollection`1<VirtualFileSystemPath> projectFiles, DotNetCoreToolset dotNetCoreToolset, VirtualFileSystemPath monoRootPath);
    public static BuildToolEnvironment Create(VirtualFileSystemPath solutionFilePath, IReadOnlyCollection`1<VirtualFileSystemPath> projectFiles, IReadOnlyCollection`1<DotNetCoreToolset> dotNetCoreToolsets, IReadOnlyCollection`1<VirtualFileSystemPath> monoRootPaths);
    public virtual string ToString();
    public IInteractionContext get_Context();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.BuildTools.BuildToolExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static string ShortPresentation(IBuildTool buildTool);
    [ExtensionAttribute]
[NotNullAttribute]
public static IReadOnlyList`1<VirtualFileSystemPath> GetPossibleFrameworkRoots(IBuildTool buildTool);
    [ExtensionAttribute]
[NotNullAttribute]
public static ProcessStartInfo CreateProcessStartInfo(IBuildTool buildTool);
    [ExtensionAttribute]
public static void AddEnvironmentVariables(IBuildTool buildTool, ProcessStartInfo info);
    [ExtensionAttribute]
public static bool IsLegacyBuildTool(IBuildTool buildTool);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.BuildTools.BuildToolHolder : object {
    [CompilerGeneratedAttribute]
private Lazy`1<IBuildTool> <BuildTool>k__BackingField;
    public Lazy`1<IBuildTool> BuildTool { get; protected set; }
    [CompilerGeneratedAttribute]
public sealed virtual Lazy`1<IBuildTool> get_BuildTool();
    [CompilerGeneratedAttribute]
protected void set_BuildTool(Lazy`1<IBuildTool> value);
}
public abstract class JetBrains.ProjectModel.BuildTools.BuildToolPlatformsProviderBase : LivePlatformsProviderBase {
    [NotNullAttribute]
private BuildToolContainer myBuildToolContainer;
    [NotNullAttribute]
private IContextBoundSettingsStoreLive myLiveStore;
    private BuildToolSettings modreq(System.Runtime.CompilerServices.IsVolatile) myBuildToolSettings;
    protected BuildToolPlatformsProviderBase(Lifetime lifetime, ISettingsStore settingsStore, BuildToolContainer buildToolContainer);
    public sealed virtual PlatformsResult`1<CompilePlatform> GetPlatforms(PlatformsContext context);
    public sealed virtual TargetFrameworkId DetectTargetFrameworkIdByReferences(AssemblyNameInfo corlibReference, IReadOnlyCollection`1<AssemblyNameInfo> otherReferences, IReadOnlyCollection`1<CompilePlatform> platforms);
    protected abstract virtual bool GetFromBuildTool(IBuildTool buildTool, List`1<CompilePlatform> result);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_1();
}
[SettingsKeyAttribute("JetBrains.ProjectModel.Settings.Schema.BuildSettings", "JetBrains.ProjectModel.Resources.Strings", "BuildToolSettingsSettingDescription")]
public class JetBrains.ProjectModel.BuildTools.BuildToolSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "VersionOfMSBuildToUseWhenBuildingMeansasTheRuntimeVersionOfTheApplicationInitiatingTheBuildInCaseOfVisualStudioThisIsTheSameMSBuildVSItselfUsesForBuildingFFFFFFFFMeansUseTheHighestVersionAvailableOnThisMachineAnyOtherNumberHIWORDIsTheMajorVersionNumberLOWORDIsTheMinorVersionNumberSettingDescription")]
public UInt32 MsbuildVersion;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "CustomPathForBuildToolSettingDescription")]
public string CustomBuildToolPath;
    [SettingsIndexedEntryAttribute("JetBrains.ProjectModel.Resources.Strings", "RecentCustomBuildToolPathsSettingDescription")]
public IIndexedEntry`2<string, bool> RecentBuildToolPaths;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "MonoExePathSettingDescription")]
public string MonoExePath;
    [SettingsIndexedEntryAttribute("JetBrains.ProjectModel.Resources.Strings", "RecentCustomMonoExecutablePathsSettingDescription")]
public IIndexedEntry`2<string, bool> RecentMonoExePaths;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "NETCLIExecutablePathSettingDescription")]
public string DotNetCliExePath;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "PolicyForAutomaticDownloadSDKPropertySettingDescription")]
public bool AutoDownloadSdk;
    [SettingsIndexedEntryAttribute("JetBrains.ProjectModel.Resources.Strings", "RecentCustomNETCLIExecutablePathsSettingDescription")]
public IIndexedEntry`2<string, bool> RecentDotNetCliExePaths;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "NumberOfProcessesRunningInParallelDuringSolutionLoadingSettingDescription")]
public int MsBuildSolutionLoadingNodeCount;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "MSBuildSolutionLoadingTargetsSettingDescription")]
public string MsBuildSolutionLoadingTargets;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "OrderProjectLoadingAccordingToDependenciesSettingDescription")]
public bool MsBuildSolutionLoadingOrderingEnabled;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "UseGetClCommandLinesTargetForCppProjectsDescription")]
public bool UseGetClCommandLinesTargetForCppProjects;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "NETCLIX86ExecutablePathSettingDescription")]
public string DotNetX86CliExePath;
    [SettingsIndexedEntryAttribute("JetBrains.ProjectModel.Resources.Strings", "RecentCustomNETCLIX86ExecutablePathsSettingDescription")]
public IIndexedEntry`2<string, bool> RecentDotNetX86CliExePaths;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "NETCLIX64ExecutablePathSettingDescription")]
public string DotNetX64CliExePath;
    [SettingsIndexedEntryAttribute("JetBrains.ProjectModel.Resources.Strings", "RecentCustomNETCLIX64ExecutablePathsSettingDescription")]
public IIndexedEntry`2<string, bool> RecentDotNetX64CliExePaths;
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.BuildTools.BuildToolUtils : object {
    private static ILogger ourLogger;
    private static SystemMemoryInfo ourMemoryInfo;
    private static ulong GB;
    private static BuildToolUtils();
    [ExtensionAttribute]
[CanBeNullAttribute]
public static Version GetAssemblyVersion(IMetadataEntity assembly, ILogger logger);
    public static int GetDefaultNodesCountForBuild();
    private static int GetDefaultNodesCountForBuildBasedOnRAM();
    private static int GetDefaultNodesCountBasedOnRAM(ulong memPerCore, int minimumCores);
    private static int GetDefaultNodesCountForBuildBasedOnNumberOfCores();
    public static int GetDefaultNodesCountForDesignTimeBuild(Version2 version);
    [CanBeNullAttribute]
public static DotNetCoreToolset GetDotNetCoreToolsetFromSettings(Lifetime lifetime, IContextBoundSettingsStore settingsStore, DotNetCoreInstallationsDetector dotNetCoreInstallationsDetector, VirtualFileSystemPath root);
    [CanBeNullAttribute]
public static DotNetCoreToolset GetDotNetCoreToolset(BuildToolSettings buildToolSettings, DotNetCoreInstallationsDetector dotNetCoreInstallationsDetector, VirtualFileSystemPath root);
    [CanBeNullAttribute]
public static DotNetCoreToolset GetDotNetCoreX86ToolsetFromSettings(Lifetime lifetime, IContextBoundSettingsStore settingsStore, DotNetCoreInstallationsDetector dotNetCoreInstallationsDetector, VirtualFileSystemPath root);
    [CanBeNullAttribute]
public static DotNetCoreToolset GetDotNetCoreX86Toolset(BuildToolSettings buildToolSettings, DotNetCoreInstallationsDetector dotNetCoreInstallationsDetector, VirtualFileSystemPath root);
    [CanBeNullAttribute]
public static DotNetCoreToolset GetDotNetCoreX64ToolsetFromSettings(Lifetime lifetime, IContextBoundSettingsStore settingsStore, DotNetCoreInstallationsDetector dotNetCoreInstallationsDetector, VirtualFileSystemPath root);
    [CanBeNullAttribute]
public static DotNetCoreToolset GetDotNetCoreX64Toolset(BuildToolSettings buildToolSettings, DotNetCoreInstallationsDetector dotNetCoreInstallationsDetector, VirtualFileSystemPath root);
    private static DotNetCoreToolset GetDotNetCoreToolsetFromSettings(Lifetime lifetime, IContextBoundSettingsStore settingsStore, VirtualFileSystemPath root, Func`2<BuildToolSettings, string> getPathFromSettings, Func`1<IDotNetCoreCli> getDefaultDotNetCoreCli);
    private static DotNetCoreToolset GetDotNetCoreToolset(BuildToolSettings buildToolSettings, VirtualFileSystemPath root, Func`2<BuildToolSettings, string> getPathFromSettings, Func`1<IDotNetCoreCli> getDefaultDotNetCoreCli);
    [CanBeNullAttribute]
public static MonoRuntime GetMonoRuntimeFromSettings(Lifetime lifetime, IContextBoundSettingsStore settingsStore, MonoRuntimeDetector monoRuntimeDetector);
    [CanBeNullAttribute]
public static MonoRuntime GetMonoRuntime(BuildToolSettings buildToolSettings, MonoRuntimeDetector monoRuntimeDetector);
    [CanBeNullAttribute]
public static IBuildTool GetBuildToolFromSettings(Lifetime lifetime, IContextBoundSettingsStore liveStore, BuildToolContainer container, BuildToolEnvironment buildToolEnvironment, Action onFallbackToolsetSelection, bool doNotFallback);
    [CanBeNullAttribute]
public static IBuildTool GetBuildTool(BuildToolSettings buildToolSettings, BuildToolContainer container, BuildToolEnvironment buildToolEnvironment, Action onFallbackToolsetSelection, bool doNotFallback);
    [CanBeNullAttribute]
private static BuildToolSettings ReadBuildToolSettings(Lifetime lifetime, IContextBoundSettingsStore settingsStore);
}
public static class JetBrains.ProjectModel.BuildTools.BuildToolVersionKeys : object {
    public static UInt32 SameAsEnvironment;
    public static UInt32 Custom;
    public static UInt32 AutoDetected;
    public static UInt32 LatestInstalled;
    public static UInt32 FromVersion(Version2 version);
    [CanBeNullAttribute]
public static Version2 ToVersion(UInt32 versionKey);
}
public class JetBrains.ProjectModel.BuildTools.CustomBuildTool : object {
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private Version2 <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <Directory>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <ExePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <EnvironmentVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDotNetCoreForLaunch>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <Targets>k__BackingField;
    public Version2 Version { get; }
    public VirtualFileSystemPath Directory { get; }
    public VirtualFileSystemPath ExePath { get; }
    public Dictionary`2<string, string> EnvironmentVariables { get; }
    public bool UseTaskEntryPointForRun { get; }
    public bool UseDotNetCoreForLaunch { get; }
    public ISet`1<string> Targets { get; public set; }
    public int Priority { get; }
    public CustomBuildTool(VirtualFileSystemPath exePath);
    [CompilerGeneratedAttribute]
public sealed virtual Version2 get_Version();
    [CompilerGeneratedAttribute]
public sealed virtual VirtualFileSystemPath get_Directory();
    [CompilerGeneratedAttribute]
public sealed virtual VirtualFileSystemPath get_ExePath();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_EnvironmentVariables();
    public bool get_UseTaskEntryPointForRun();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseDotNetCoreForLaunch();
    [CompilerGeneratedAttribute]
public ISet`1<string> get_Targets();
    [CompilerGeneratedAttribute]
public void set_Targets(ISet`1<string> value);
    public sealed virtual int get_Priority();
    private bool Equals(IBuildTool other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.BuildTools.DefaultNetCoreSdkEnvironmentResolvePatcher : object {
    public bool ShouldSetInvalidSdkPathIfEmpty { get; }
    public virtual bool get_ShouldSetInvalidSdkPathIfEmpty();
}
public class JetBrains.ProjectModel.BuildTools.DotNetCoreToolset : object {
    [CompilerGeneratedAttribute]
private IDotNetCoreCli <Cli>k__BackingField;
    [CompilerGeneratedAttribute]
private DotNetCoreSdk <Sdk>k__BackingField;
    [NotNullAttribute]
public IDotNetCoreCli Cli { get; }
    [CanBeNullAttribute]
public DotNetCoreSdk Sdk { get; }
    public bool IsValid { get; }
    public DotNetCoreToolset(IDotNetCoreCli cli, DotNetCoreSdk sdk);
    [CompilerGeneratedAttribute]
public IDotNetCoreCli get_Cli();
    [CompilerGeneratedAttribute]
public DotNetCoreSdk get_Sdk();
    public bool get_IsValid();
    protected bool Equals(DotNetCoreToolset other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public interface JetBrains.ProjectModel.BuildTools.IBuildTool {
    [NotNullAttribute]
public Version2 Version { get; }
    [NotNullAttribute]
public VirtualFileSystemPath Directory { get; }
    [NotNullAttribute]
public VirtualFileSystemPath ExePath { get; }
    [NotNullAttribute]
public Dictionary`2<string, string> EnvironmentVariables { get; }
    public int Priority { get; }
    public bool UseDotNetCoreForLaunch { get; }
    public abstract virtual Version2 get_Version();
    public abstract virtual VirtualFileSystemPath get_Directory();
    public abstract virtual VirtualFileSystemPath get_ExePath();
    public abstract virtual Dictionary`2<string, string> get_EnvironmentVariables();
    public abstract virtual int get_Priority();
    public abstract virtual bool get_UseDotNetCoreForLaunch();
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ProjectModel.BuildTools.IBuildToolPatcher {
    public abstract virtual void Patch(IBuildTool buildTool);
    public abstract virtual Task PatchAsync(IBuildTool buildTool);
}
public interface JetBrains.ProjectModel.BuildTools.IBuildToolProvider {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IBuildTool> Discover(BuildToolEnvironment env);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ProjectModel.BuildTools.IBuildToolSelector {
    [CanBeNullAttribute]
public abstract virtual IBuildTool Select(VirtualFileSystemPath solutionFilePath, IReadOnlyCollection`1<VirtualFileSystemPath> projectFiles, IReadOnlyCollection`1<IBuildTool> buildTools);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ProjectModel.BuildTools.ICustomBuildToolProvider {
}
public interface JetBrains.ProjectModel.BuildTools.IEnvironmentBuildToolHolder {
    [NotNullAttribute]
public Lazy`1<IBuildTool> BuildTool { get; }
    public abstract virtual Lazy`1<IBuildTool> get_BuildTool();
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ProjectModel.BuildTools.INetCoreSdkEnvironmentResolvePatcher {
    public bool ShouldSetInvalidSdkPathIfEmpty { get; }
    public abstract virtual bool get_ShouldSetInvalidSdkPathIfEmpty();
}
[PlatformsProviderAttribute("16")]
public class JetBrains.ProjectModel.BuildTools.ThirdPartyFrameworksFromBuildToolProvider : BuildToolPlatformsProviderBase {
    public int Priority { get; }
    public bool ImmutableAssembliesInFileSystem { get; }
    public ThirdPartyFrameworksFromBuildToolProvider(Lifetime lifetime, ISettingsStore settingsStore, BuildToolContainer buildToolContainer);
    public virtual int get_Priority();
    public virtual bool get_ImmutableAssembliesInFileSystem();
    protected virtual bool GetFromBuildTool(IBuildTool buildTool, List`1<CompilePlatform> result);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.Caches.AssemblyInfoInvalidator : object {
    public AssemblyInfoInvalidator(Lifetime lifetime, AssemblyInfoDatabase assemblyInfoDatabase);
}
public enum JetBrains.ProjectModel.Caches.CachesLocationType : Enum {
    public int value__;
    public static CachesLocationType SOLUTION_FOLDER;
    public static CachesLocationType TEMP_FOLDER;
    public static CachesLocationType LOCAL_APPDATA_FOLER;
    public static CachesLocationType CUSTOM_FOLDER;
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.Caches.IgnoreChangesFromCacheFolder : object {
    public IgnoreChangesFromCacheFolder(Lifetime lifetime, ISolutionCaches caches, IFileSystemTracker fileSystemTracker);
}
public interface JetBrains.ProjectModel.Caches.ILaunchSettingsJsonDataCache {
}
public interface JetBrains.ProjectModel.Caches.IProjectFileDataCache {
}
public interface JetBrains.ProjectModel.Caches.IProjectFileDataProvider {
    public int Version { get; }
    public abstract virtual int get_Version();
    public abstract virtual bool CanHandle(VirtualFileSystemPath projectFileLocation);
}
public interface JetBrains.ProjectModel.Caches.IProjectFileDataProvider`1 {
}
public interface JetBrains.ProjectModel.Caches.IProjectFileDataProvider`2 {
    [NotNullAttribute]
public abstract virtual TData Read(VirtualFileSystemPath projectFileLocation, BinaryReader reader);
    public abstract virtual void Write(VirtualFileSystemPath projectFileLocation, BinaryWriter writer, TData data);
    [NotNullAttribute]
public abstract virtual TData BuildData(VirtualFileSystemPath projectFileLocation, TRaw document);
    [CanBeNullAttribute]
public abstract virtual Action OnDataChanged(VirtualFileSystemPath projectFileLocation, TData oldData, TData newData);
}
public interface JetBrains.ProjectModel.Caches.IProjectFileDataProviderCache`1 {
    public abstract virtual IDictionary`2<VirtualFileSystemPath, TData> RegisterCache(Lifetime cachelifetime, IProjectFileDataProvider`2<TRaw, TData> cache);
    public abstract virtual TData GetData(IProjectFileDataProvider`2<TRaw, TData> cache, VirtualFileSystemPath projectFileLocation, TData defaultValue);
}
public interface JetBrains.ProjectModel.Caches.IProjectJsonDataCache {
}
public interface JetBrains.ProjectModel.Caches.IProjectJsonDataProvider`1 {
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ProjectModel.Caches.ISolutionCaches {
    public bool PersistCaches { get; }
    public IKeyValueDb Db { get; }
    public CachesLocationType CacheLocation { get; }
    public abstract virtual bool get_PersistCaches();
    public abstract virtual FileSystemPath GetCacheFolder();
    public abstract virtual FileSystemPath GetSharedCacheFolder();
    public abstract virtual IKeyValueDb get_Db();
    public abstract virtual CachesLocationType get_CacheLocation();
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.Caches.LaunchSettingsJsonDataCacheImpl : ProjectFileDataCacheBase`1<JObject> {
    public LaunchSettingsJsonDataCacheImpl(Lifetime lifetime, ISolution solution, ISolutionCaches caches, ChangeManager changeManager, IShellLocks locks);
    protected virtual JObject BuildRawData(VirtualFileSystemPath filePath);
    protected virtual bool ShouldProcessChangedFile(IProjectFile changedFile, IProject project);
}
public abstract class JetBrains.ProjectModel.Caches.ProjectFileDataCacheBase`1 : object {
    private static int EngineVersion;
    private Lifetime myLifetime;
    private ISolutionCaches myCaches;
    private ChangeManager myChangeManager;
    private IShellLocks myLocks;
    private object myLockObject;
    private Dictionary`2<IProjectFileDataProvider, ProviderEntry<TRaw>> myData;
    protected ProjectFileDataCacheBase`1(Lifetime lifetime, ISolution solution, ISolutionCaches caches, ChangeManager changeManager, IShellLocks locks);
    public sealed virtual IDictionary`2<VirtualFileSystemPath, TData> RegisterCache(Lifetime cachelifetime, IProjectFileDataProvider`2<TRaw, TData> cache);
    public sealed virtual TData GetData(IProjectFileDataProvider`2<TRaw, TData> cache, VirtualFileSystemPath projectFileLocation, TData defaultValue);
    protected abstract virtual TRaw BuildRawData(VirtualFileSystemPath path);
    protected abstract virtual bool ShouldProcessChangedFile(IProjectFile changedFile, IProject project);
    private void RebuildCaches(IEnumerable`1<VirtualFileSystemPath> filesToRebuild, bool afterChange);
    private void ExecutePostActions(List`1<Action> postActions, bool afterChange);
    [NotNullAttribute]
private ProviderEntry<TRaw> GetProviderEntry(IProjectFileDataProvider cache);
    [NotNullAttribute]
private Dictionary`2<VirtualFileSystemPath, Entry<TRaw>> GetCacheDictionary(IProjectFileDataProvider cache);
    private IDictionary`2<VirtualFileSystemPath, TData> LoadCache(IProjectFileDataProvider`2<TRaw, TData> cache);
    private static int GetCacheVersion(IProjectFileDataProvider`2<TRaw, TData> cache);
    private void SaveCache(IProjectFileDataProvider`2<TRaw, TData> cache);
    [NotNullAttribute]
private FileSystemPath GetFolderPath();
    private FileSystemPath GetCacheFilePath(IProjectFileDataProvider`2<TRaw, TData> cache);
    public void Dump(TextWriter writer);
    public void Dump(TextWriter writer, IProjectFileDataProvider provider);
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.Caches.ProjectFileDataCacheImpl : ProjectFileDataCacheBase`1<XmlDocument> {
    public ProjectFileDataCacheImpl(Lifetime lifetime, ISolution solution, ISolutionCaches caches, ChangeManager changeManager, IShellLocks locks);
    protected virtual XmlDocument BuildRawData(VirtualFileSystemPath filePath);
    protected virtual bool ShouldProcessChangedFile(IProjectFile changedFile, IProject project);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Caches.ProjectFileDataProviderCache : object {
    [ExtensionAttribute]
public static TData GetData(IProjectFileDataCache cache, IProjectFileDataProvider`1<TData> provider, IProject project, TData defaultValue);
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.Caches.ProjectJsonDataCacheImpl : ProjectFileDataCacheBase`1<JObject> {
    public ProjectJsonDataCacheImpl(Lifetime lifetime, ISolution solution, ISolutionCaches caches, ChangeManager changeManager, IShellLocks locks);
    protected virtual JObject BuildRawData(VirtualFileSystemPath filePath);
    protected virtual bool ShouldProcessChangedFile(IProjectFile changedFile, IProject project);
}
[ShellComponentAttribute("16")]
internal class JetBrains.ProjectModel.Caches.PsiConfigurationDefaultSettings : HaveDefaultSettings`1<PsiConfigurationSettingsKey> {
    [CompilerGeneratedAttribute]
private IApplicationHost <applicationHost>P;
    public string Name { get; }
    public PsiConfigurationDefaultSettings(ILogger logger, ISettingsSchema settingsSchema, IApplicationHost applicationHost);
    public virtual void InitDefaultSettings(ISettingsStorageMountPoint mountPoint);
    public virtual string get_Name();
}
[SettingsKeyAttribute("JetBrains.ProjectModel.Settings.Schema.HierarchySettings", "JetBrains.ProjectModel.Resources.Strings", "PSIConfigurationSettingsSettingDescription")]
public class JetBrains.ProjectModel.Caches.PsiConfigurationSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "CacheFolderLocationTypeSettingDescription")]
public CachesLocationType LocationType;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "CachesLocationIfLocationTypeCUSTOMFOLDERSettingDescription")]
public FileSystemPath CustomLocation;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "CacheFullTreeInStubTreeNodesCachesDescription")]
public bool CacheFullTreesInStubTreeNodesCache;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "CacheTokensAndBuffersDescription")]
public bool CacheTokensAndBuffers;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "PsiCachesRepairServiceEnabledDescription")]
public bool PsiCachesRepairServiceEnabled;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "AssertInterruptibleReadAccessDescription")]
public bool AssertInterruptibleReadAccess;
}
[ObsoleteAttribute]
public class JetBrains.ProjectModel.Caches.PsiConfigurationSettingsObsolete : object {
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
private CachesLocationType myLocation;
    public CachesLocationType Location { get; }
    public PsiConfigurationSettingsObsolete(IComponentSettingsProvider settings);
    public sealed virtual void ReadFromXml(XmlElement element);
    public CachesLocationType get_Location();
}
[GlobalSettingsUpgraderAttribute("16")]
public class JetBrains.ProjectModel.Caches.PsiConfigurationSettingsUpgrader : object {
    public sealed virtual void Upgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
}
[SolutionInstanceComponentAttribute("18")]
public class JetBrains.ProjectModel.Caches.SolutionCaches : object {
    private static int UnusedCachesLifetimeInDays;
    private static string SolutionCachesVersion;
    public static long SolutionCachesVersionsHash;
    protected static string CachesFolder;
    protected static string SharedCachesFolder;
    private static string SolutionLocatedCachesFolder;
    private object myLock;
    private Lifetime myLifetime;
    private ILogger myLogger;
    private ISolution mySolution;
    private IApplicationHost myApplicationHost;
    private FileSystemPath myActualCachesPath;
    private FileSystemPath myActualSharedCachesPath;
    private IKeyValueDb myDb;
    private IDictionary`2<string, string> myPersistentProperties;
    private DbDriverManager myDriverManager;
    private PolymorphicMarshallers myPolymorphicMarshallers;
    private ITaskHost myTaskHost;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myInitialized;
    [CompilerGeneratedAttribute]
private CachesLocationType <CacheLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <CustomLocation>k__BackingField;
    public string SolutionName { get; }
    public CachesLocationType CacheLocation { get; }
    protected FileSystemPath CustomLocation { get; }
    protected bool RespectLocationSetting { get; }
    public bool PersistCaches { get; }
    public IKeyValueDb Db { get; }
    public IDictionary`2<string, string> PersistentProperties { get; }
    [NotNullAttribute]
private FileSystemPath SolutionLocatedCachesPath { get; }
    public SolutionCaches(Lifetime lifetime, ILogger logger, ISettingsStore settingsStore, ISolution solution, IApplicationHost applicationHost, DbDriverManager driverManager, PolymorphicMarshallers polymorphicMarshallers, IShellLocks taskHost);
    private static SolutionCaches();
    public string get_SolutionName();
    [CompilerGeneratedAttribute]
public virtual CachesLocationType get_CacheLocation();
    [CompilerGeneratedAttribute]
protected virtual FileSystemPath get_CustomLocation();
    internal void StartClearStaleCaches(Lifetime lifetime);
    protected virtual bool get_RespectLocationSetting();
    public virtual bool get_PersistCaches();
    private void LazyInit();
    public sealed virtual IKeyValueDb get_Db();
    public IDictionary`2<string, string> get_PersistentProperties();
    public sealed virtual FileSystemPath GetSharedCacheFolder();
    [NotNullAttribute]
public virtual FileSystemPath GetCacheFolder();
    private void InitDb();
    [NotNullAttribute]
protected virtual FileSystemPath GetExpectedCachesPath(string solutionName);
    private FileSystemPath get_SolutionLocatedCachesPath();
    protected virtual FileSystemPath SolutionLocationToCachesLocation();
    [NotNullAttribute]
public static FileSystemPath LocalAppDataSolutionCachesFolder(IApplicationHost host);
    [NotNullAttribute]
public static FileSystemPath LocalAppDataSolutionSharedCachesFolder(IApplicationHost host);
    public string GetIdentifierForStatistics();
    [NotNullAttribute]
protected virtual string HashedFolderName(string solutionName);
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.Caches.SolutionCachesSizeEventRecordProvider : object {
    public SolutionCachesSizeEventRecordProvider(Lifetime lifetime, ISolutionCaches solutionCaches, EventRecordsProvider eventRecordsProvider);
}
public class JetBrains.ProjectModel.CollapseRequest : object {
    [CompilerGeneratedAttribute]
private IProjectModelElementSearchDescriptor <ProjectModelElement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CollapseSelf>k__BackingField;
    public IProjectModelElementSearchDescriptor ProjectModelElement { get; public set; }
    public bool CollapseSelf { get; public set; }
    public CollapseRequest(IProjectModelElementSearchDescriptor projectModelElement, bool collapseSelf);
    [CompilerGeneratedAttribute]
public IProjectModelElementSearchDescriptor get_ProjectModelElement();
    [CompilerGeneratedAttribute]
public void set_ProjectModelElement(IProjectModelElementSearchDescriptor value);
    [CompilerGeneratedAttribute]
public bool get_CollapseSelf();
    [CompilerGeneratedAttribute]
public void set_CollapseSelf(bool value);
}
[ObsoleteAttribute("Use settings store bound to a project instead. This class is used for settings migration only")]
public class JetBrains.ProjectModel.Configuration.ProjectSettingsComponent : SettingsComponentBase {
    private static XmlExternalizationScope[] ourValidXmlExternalizationScopes;
    private IProject myProject;
    protected ICollection`1<XmlExternalizationScope> ValidXmlExternalizationScopes { get; }
    public ProjectSettingsComponent(IProject project, ProductConfigurations productConfigurations);
    private static ProjectSettingsComponent();
    protected virtual bool OnLoadSettingsXmlBag(Action`2<XmlDocument, XmlExternalizationScope> funcDeserializeXmlBag);
    protected virtual ICollection`1<XmlExternalizationScope> get_ValidXmlExternalizationScopes();
    private XmlDocument GetSettingsDocument(XmlExternalizationScope scope);
}
[ObsoleteAttribute]
public class JetBrains.ProjectModel.Configuration.SolutionSettingsComponent : SettingsComponentBase {
    private ISolution mySolution;
    private static XmlExternalizationScope[] ourValidXmlExternalizationScopes;
    private IApplicationHost myApplicationHost;
    protected ICollection`1<XmlExternalizationScope> ValidXmlExternalizationScopes { get; }
    public SolutionSettingsComponent(ISolution solution, IApplicationHost applicationHost, ProductConfigurations productConfigurations);
    private static SolutionSettingsComponent();
    protected virtual bool OnLoadSettingsXmlBag(Action`2<XmlDocument, XmlExternalizationScope> funcDeserializeXmlBag);
    [CanBeNullAttribute]
private XmlDocument GetSettingsDocument(XmlExternalizationScope scope);
    [CanBeNullAttribute]
private XmlDocument GetSettingsDocument_LegacyVersion(XmlExternalizationScope scope);
    protected virtual ICollection`1<XmlExternalizationScope> get_ValidXmlExternalizationScopes();
}
[ProjectFileTypeDefinitionAttribute("CPP")]
public class JetBrains.ProjectModel.CppProjectFileType : KnownProjectFileType {
    public static string Name;
    public static string H_EXTENSION;
    public static string HH_EXTENSION;
    public static string HXX_EXTENSION;
    public static string HPP_EXTENSION;
    public static string HPLUS_EXTENSION;
    public static string HP_EXTENSION;
    public static string ICC_EXTENSION;
    public static string TCC_EXTENSION;
    public static string C_EXTENSION;
    public static string CPP_EXTENSION;
    public static string CP_EXTENSION;
    public static string CPLUS_EXTENSION;
    public static string CC_EXTENSION;
    public static string CXX_EXTENSION;
    public static string IXX_EXTENSION;
    public static string CPPM_EXTENSION;
    public static string MXX_EXTENSION;
    public static string CCM_EXTENSION;
    public static string CXXM_EXTENSION;
    public static string CPLUSPLUSM_EXTENSION;
    public static string INC_EXTENSION;
    public static string INL_EXTENSION;
    public static string CU_EXTENSION;
    public static string CUH_EXTENSION;
    public static string TPP_EXTENSION;
    public static string IPP_EXTENSION;
    public static string MPP_EXTENSION;
    public static string INO_EXTENSION;
    public static string MQH_EXTENSION;
    public static string MQ4_EXTENSION;
    public static string MQ5_EXTENSION;
    public static string CPP_EXPRESSION_EXTENSION;
    public static string HLSL_EXTENSION;
    public static string HLSLI_EXTENSION;
    public static string COMPUTE_EXTENSION;
    public static string URT_SHADER_EXTENSION;
    public static string HLSLINC_EXTENSION;
    public static string CG_EXTENSION;
    public static string CGINC_EXTENSION;
    public static string USF_EXTENSION;
    public static string USH_EXTENSION;
    public static string FX_EXTENSION;
    public static string FXH_EXTENSION;
    public static string BLOCK_SHADERS_EXTENSION;
    public static string BLOCK_SHADERS_ALT_EXTENSION;
    public static String[] HEADER_EXTENSIONS;
    public static String[] SOURCE_EXTENSIONS;
    public static String[] MODULE_INTERFACE_EXTENSIONS;
    public static String[] ALL_HLSL_EXTENSIONS;
    public static String[] ALL_GLSL_EXTENSIONS;
    [CompilerGeneratedAttribute]
private static CppProjectFileType <Instance>k__BackingField;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static CppProjectFileType Instance { get; private set; }
    protected CppProjectFileType(string name);
    protected CppProjectFileType(string name, string presentableName);
    protected CppProjectFileType(string name, string presentableName, String[] strings);
    private static CppProjectFileType();
    [CompilerGeneratedAttribute]
public static CppProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(CppProjectFileType value);
    private static String[] GetAllCppExtensions();
    public virtual BuildAction GetDefaultBuildAction(IProject project, string extension);
}
[ProjectFileTypeDefinitionAttribute("CSHARP")]
public class JetBrains.ProjectModel.CSharpProjectFileType : KnownProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static CSharpProjectFileType <Instance>k__BackingField;
    public static string CS_EXTENSION;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static CSharpProjectFileType Instance { get; private set; }
    protected CSharpProjectFileType(string name);
    protected CSharpProjectFileType(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static CSharpProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(CSharpProjectFileType value);
    public virtual BuildAction GetDefaultBuildAction(IProject project, string extension);
}
[ProjectFileTypeDefinitionAttribute("CSS")]
public class JetBrains.ProjectModel.CssProjectFileType : KnownProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static CssProjectFileType <Instance>k__BackingField;
    public static string CSS_EXTENSION;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static CssProjectFileType Instance { get; private set; }
    protected CssProjectFileType(string name);
    protected CssProjectFileType(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static CssProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(CssProjectFileType value);
    public virtual BuildAction GetDefaultBuildAction(IProject project, string extension);
}
[ShellComponentAttribute("16")]
internal class JetBrains.ProjectModel.DataContext.ProjectDataContextCopierProvider : object {
    public sealed virtual void ProvideConstantsToCopy(DataContextCopier copier);
}
public abstract class JetBrains.ProjectModel.DataContext.ProjectModelDataConstants : object {
    [NotNullAttribute]
public static DataConstant`1<ISolution> SOLUTION;
    [NotNullAttribute]
public static DataConstant`1<IProjectModelElement> PROJECT_MODEL_ELEMENT;
    [NotNullAttribute]
public static DataConstant`1<IProjectModelElement[]> PROJECT_MODEL_ELEMENTS;
    [NotNullAttribute]
public static DataConstant`1<IAssemblyToAssemblyReference[]> ASSEMBLY_TO_ASSEMBLY_REFERENCES;
    [NotNullAttribute]
public static DataConstant`1<ReferencesFolder> REFERENCES_FOLDER;
    [NotNullAttribute]
public static DataConstant`1<IProject> PROJECT;
    [ObsoleteAttribute("Use 'PROJECT' constant instead")]
[NotNullAttribute]
public static DataConstant`1<IProject> Project;
    [ObsoleteAttribute("Use 'ASSEMBLY_TO_ASSEMBLY_REFERENCES' constant instead")]
[NotNullAttribute]
public static DataConstant`1<IAssemblyToAssemblyReference[]> AssemblyToAssemblyReferences;
    private static ProjectModelDataConstants();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.DataContext.ProjectModelDataConstantsExtensions : object {
    [ExtensionAttribute]
[PureAttribute]
public static ProjectsContext Projects(IDataContext dataContext);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static Func`3<Lifetime, DataContexts, IDataContext> ToDataContext(IProjectModelElement projectModelElement);
    [ExtensionAttribute]
[ContractAnnotationAttribute("null => null; notnull => notnull")]
public static IProjectModelElement[] ToProjectModelElementsDataConstant(IProjectModelElement projectModelElement);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectModelElement[] ToProjectModelElementsDataConstant(IProjectModelElement[] projectModelElements);
}
[ShellComponentAttribute("10")]
public class JetBrains.ProjectModel.DataContext.ProjectModelDataRules : object {
    public ProjectModelDataRules(Lifetime lifetime, DataContexts contexts);
    private static IProjectModelElement[] ProjectElementToProjectElementsRule(IDataContext context);
    private static IProjectModelElement ProjectElementsToProjectElementRule(IDataContext context);
    private static ISolution ProjectElementsToSolution(IDataContext ctx);
    private static IProject ProjectElementsToProject(IDataContext ctx);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.DataContext.ProjectModelDataRulesValidator : object {
    private ISolution mySolution;
    public ProjectModelDataRulesValidator(Lifetime lifetime, DataContexts contexts, ISolution solution);
    private bool CheckProjectModelElementIsValid(DataContextState dataContextState, IProjectModelElement projectModelElement);
    private bool CheckProjectModelElementsAreValid(DataContextState dataContextState, IProjectModelElement[] projectModelElements);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.DataContext.ProjectModelPerSolutionDataRules : object {
    public ProjectModelPerSolutionDataRules(Lifetime lifetime, DataContexts contexts, ISolution solutionMy, ISolutionOwner solutionOwner, IComponentContainer containerSolution, ISolutionLoadTasksScheduler scheduler);
}
[ObsoleteAttribute("To be removed soon, use 'ProjectModelDataConstants' instead")]
public class JetBrains.ProjectModel.DataContext.ProjectsContext : ValueType {
    [NotNullAttribute]
private IDataContext myDataContext;
    [CanBeNullAttribute]
public ISolution Solution { get; }
    [CanBeNullAttribute]
public IProjectModelElement ProjectModelElement { get; }
    [NotNullAttribute]
public IProjectModelElement[] ProjectModelElements { get; }
    [CanBeNullAttribute]
public IProject Project { get; }
    public ProjectsContext(IDataContext dataContext);
    public ISolution get_Solution();
    public IProjectModelElement get_ProjectModelElement();
    public IProjectModelElement[] get_ProjectModelElements();
    public IProject get_Project();
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.DefaultSolutionToolset : object {
    [CanBeNullAttribute]
private RuntimeAndToolsetChangeNotifier myNotifier;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [NotNullAttribute]
private RuntimeAndToolset myRuntimeAndToolset;
    [CompilerGeneratedAttribute]
private ISignal`1<RuntimeAndToolset> <Changed>k__BackingField;
    [NotNullAttribute]
protected ILogger Logger { get; }
    public ISignal`1<RuntimeAndToolset> Changed { get; }
    public DefaultSolutionToolset(Lifetime lifetime, SolutionSettingsReadyForSolutionInstanceComponent settingsSync, ILogger logger, RuntimeAndToolsetChangeNotifier notifier);
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    public sealed virtual RuntimeAndToolset GetRuntimeAndToolset();
    public sealed virtual ValueTask`1<RuntimeAndToolset> GetRuntimeAndToolsetAsync();
    public sealed virtual void Refresh();
    public void UpdateBuildTool(IBuildTool buildTool, DotNetCoreToolset dotNetCoreToolset, MonoRuntime monoRuntime);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<RuntimeAndToolset> get_Changed();
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.DotNetCore.DefaultDotNetCoreRuntime : object {
    public string DotNetCliPath { get; }
    public sealed virtual string get_DotNetCliPath();
}
public class JetBrains.ProjectModel.DotNetCore.DotNetCoreFrameworkReference : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetVersion <Version>k__BackingField;
    public static DotNetCoreFrameworkReference Empty;
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public NuGetVersion Version { get; }
    public FrameworkIdentifier FrameworkIdentifier { get; }
    public DotNetCoreFrameworkReference(string name, NuGetVersion version);
    public DotNetCoreFrameworkReference(string name, string versionString);
    private static DotNetCoreFrameworkReference();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public NuGetVersion get_Version();
    public FrameworkIdentifier get_FrameworkIdentifier();
    public bool IsEmpty();
    private bool Equals(DotNetCoreFrameworkReference other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(DotNetCoreFrameworkReference left, DotNetCoreFrameworkReference right);
    public static bool op_Inequality(DotNetCoreFrameworkReference left, DotNetCoreFrameworkReference right);
    public virtual string ToString();
    public void Write(BinaryWriter writer);
    public void Write(UnsafeWriter writer);
    public static DotNetCoreFrameworkReference Read(BinaryReader reader);
    public static DotNetCoreFrameworkReference Read(UnsafeReader reader);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.DotNetCore.DotNetCoreLaunchSettingsJsonProfileProvider : object {
    private ILaunchSettingsJsonDataCache myCache;
    private DotNetCoreLaunchSettingsJsonUrlDataProvider myDotNetCoreLaunchSettingsJsonUrlDataProvider;
    public DotNetCoreLaunchSettingsJsonProfileProvider(Lifetime lifetime, ILaunchSettingsJsonDataCache cache, ChangeManager changeManager, ISolution solution);
    private VirtualFileSystemPath GetLaunchSettingsJsonFilePath(IProject project);
    public bool HasLaunchSettingsJson(IProject project);
    public LaunchSettingsJson TryGetLaunchJsonSettingsProfiles(IProject project);
    public sealed virtual object Execute(IChangeMap changeMap);
}
public static class JetBrains.ProjectModel.DotNetCore.DotNetCorePlatformDetectUtil : object {
    private static ILogger ourLogger;
    private static string RuntimeConfigExtension;
    private static string DepsJsonExtension;
    private static string RuntimePackPrefix;
    private static string RuntimeSuffix;
    private static DotNetCorePlatformDetectUtil();
    [CanBeNullAttribute]
public static RuntimePlatform GetBestPlatform(DotNetCoreFrameworkReference frameworkReference, List`1<RuntimePlatform> platforms, RollForwardPolicy rollForwardPolicy);
    private static RuntimePlatform GetFirstCompatiblePlatformVersion(List`1<RuntimePlatform> sameFrameworkPlatforms, NuGetVersion platformRangeMinVersion, RollForwardPolicy rollForwardPolicy);
    private static RuntimePlatform GetMajorRuntimePlatform(List`1<RuntimePlatform> sameFrameworkPlatforms, NuGetVersion platformRangeMinVersion);
    private static RuntimePlatform GetMinorRuntimePlatform(List`1<RuntimePlatform> sameFrameworkPlatforms, NuGetVersion platformRangeMinVersion);
    private static RuntimePlatform GetLatestPatchRuntimePlatform(List`1<RuntimePlatform> sameFrameworkPlatforms, NuGetVersion platformRangeMinVersion);
    private static RuntimePlatform GetFirstCompatiblePrereleasePlatformVersion(List`1<RuntimePlatform> sameFrameworkPlatforms, NuGetVersion platformRangeMinVersion, RollForwardPolicy rollForwardPolicy);
    [CanBeNullAttribute]
private static RuntimePlatform GetFirstCompatibleReleasePlatformVersion(List`1<RuntimePlatform> sameFrameworkPlatforms, NuGetVersion platformRangeMinVersion, RollForwardPolicy rollForwardPolicy);
    public static FrameworkIdentifier PlatformNameToFrameworkIdentifier(string platformName);
    public static bool IsDbgShimExists(FileSystemPath frameworkFolder);
    public static DotNetCoreFrameworkReference ParseRuntimeConfigJsonFile(JObject document);
    public static DotNetCoreFrameworkReference GetCoreFrameworkReferenceFromJson(FileSystemPath jsonPath);
    public static FileSystemPath GetJsonFileByLauncher(FileSystemPath launcherPath, string jsonFileExtensionWithoutDot);
    public static JObject GetJObjectFromDeps(FileSystemPath depsJsonPath);
    [NotNullAttribute]
private static DotNetCoreFrameworkReference GetPlatformRangeFromDepsJson(FileSystemPath depsFilePath);
    [CanBeNullAttribute]
private static DotNetCoreFrameworkReference TryGetPlatformRangeFromDependencyName(string dependencyName);
    private static string GetRuntimeInfo(string dependency, string platformIdentifier);
    private static string GetPortablePlatformIdentifier(string platformIdentifier);
    [CanBeNullAttribute]
public static string GetRuntimeIdUsingOutputStructure(FileSystemPath executePath);
    [CanBeNullAttribute]
public static string GetRuntimeIdUsingDepsJson(FileSystemPath depsJsonPath);
    public static FileSystemPath GetDbgShimDirectory(FileSystemPath executablePath, GetFrameworkReferenceFromRuntimeConfigJson getFrameworkReferenceFromRuntimeConfigJsonJson, FrameworkReferenceToRuntimePlatform frameworkReferenceToRuntimePlatformRangeToInfo);
    public static FileSystemPath GetRuntimeConfigFromAssemblyPath(FileSystemPath assemblyPath);
    public static FileSystemPath GetDepsJsonFromAssemblyPath(FileSystemPath assemblyPath);
    [CanBeNullAttribute]
public static FrameworkIdentifier PlatformLikeStringToFrameworkIdentifier(string platformName);
    [CompilerGeneratedAttribute]
internal static string <GetBestPlatform>g__PresentRuntimePlatform|5_0(RuntimePlatform platform);
    [CompilerGeneratedAttribute]
internal static DotNetCoreFrameworkReference <ParseRuntimeConfigJsonFile>g__GetPlatformRangeFromFrameworkSection|14_0(JObject jObject);
    [CompilerGeneratedAttribute]
internal static string <GetDbgShimDirectory>g__ReadFile|26_0(FileSystemPath path);
}
public class JetBrains.ProjectModel.DotNetCore.DotNetCorePlatformInfo : object {
    [NotNullAttribute]
public static DotNetCorePlatformInfo Empty;
    [CompilerGeneratedAttribute]
private string <Sdk>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<DotNetCoreFrameworkReference> <FrameworkReferences>k__BackingField;
    [CanBeNullAttribute]
public string Sdk { get; }
    [NotNullAttribute]
public IReadOnlyList`1<DotNetCoreFrameworkReference> FrameworkReferences { get; }
    public bool IsEmpty { get; }
    public DotNetCorePlatformInfo(string sdk, DotNetCoreFrameworkReference frameworkReference);
    public DotNetCorePlatformInfo(string sdk, IReadOnlyList`1<DotNetCoreFrameworkReference> frameworkReferences);
    private static DotNetCorePlatformInfo();
    [CompilerGeneratedAttribute]
public string get_Sdk();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<DotNetCoreFrameworkReference> get_FrameworkReferences();
    public bool get_IsEmpty();
    public void Write(UnsafeWriter writer);
    public bool EqualsTo(DotNetCorePlatformInfo other);
    public static DotNetCorePlatformInfo Read(UnsafeReader reader);
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.DotNetCore.DotNetCorePlatformsInRuntimeConfigJson : object {
    private IProjectJsonDataCache myCache;
    private DotNetCorePlatformsInRuntimeConfigJsonDataProvider myProvider;
    public DotNetCorePlatformsInRuntimeConfigJson(Lifetime lifetime, IProjectJsonDataCache cache, ILogger logger);
    [NotNullAttribute]
public DotNetCoreFrameworkReference TryGetDotNetCorePlatformRange(VirtualFileSystemPath assemblyLocation);
    [NotNullAttribute]
public DotNetCoreFrameworkReference TryGetDotNetCorePlatformRangeFromRuntimeConfig(VirtualFileSystemPath runtimeConfigJsonPath);
}
public static class JetBrains.ProjectModel.DotNetCore.DotNetCorePlatformsUtil : object {
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.DotNetCore.DotNetCorePlatformsUtil/<CollectRuntimePlatforms>d__0")]
[NotNullAttribute]
public static IEnumerable`1<RuntimePlatform> CollectRuntimePlatforms(VirtualFileSystemPath installationFolder);
    [NotNullAttribute]
public static IReadOnlyCollection`1<CompilePlatform> CollectCompilePlatforms(VirtualFileSystemPath installationFolder);
    [CanBeNullAttribute]
private static NuGetVersion FindMatchingVersion(IReadOnlyCollection`1<NuGetVersion> availableVersions, NuGetVersion version);
    private static bool CompareReleaseLabels(NuGetVersion x, NuGetVersion y);
}
public interface JetBrains.ProjectModel.DotNetCore.IDotNetCliPathProvider {
    public string DotNetCliPath { get; }
    public abstract virtual string get_DotNetCliPath();
}
public class JetBrains.ProjectModel.DotNetCore.LaunchSettingsJson : object {
    public static string ProjectCommand;
    public static string DockerCommand;
    [CompilerGeneratedAttribute]
private IisSettingsDescriptor <IisSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<ProfileContent> <Profiles>k__BackingField;
    public static LaunchSettingsJson Empty;
    public IisSettingsDescriptor IisSettings { get; }
    public IReadOnlyCollection`1<ProfileContent> Profiles { get; }
    public LaunchSettingsJson(IisSettingsDescriptor iisSettings, ImmutableArray`1<ProfileContent> profiles);
    private static LaunchSettingsJson();
    [CompilerGeneratedAttribute]
public IisSettingsDescriptor get_IisSettings();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<ProfileContent> get_Profiles();
    [CanBeNullAttribute]
private static IisBindingContent LoadIisBindingContent(JObject jObject);
    [CanBeNullAttribute]
private static ProfileContent LoadProfile(KeyValuePair`2<string, JToken> jsonProfile);
    public static LaunchSettingsJson LoadFrom(JObject document);
}
public class JetBrains.ProjectModel.DotNetCore.LaunchSettingsJsonChange : object {
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    public IProject Project { get; }
    public LaunchSettingsJsonChange(IProject project);
    [CompilerGeneratedAttribute]
public IProject get_Project();
}
[ProjectFileTypeDefinitionAttribute("DTD")]
public class JetBrains.ProjectModel.DtdProjectFileType : XmlProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static DtdProjectFileType <Instance>k__BackingField;
    public static string DTD_EXTENSION;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static DtdProjectFileType Instance { get; private set; }
    protected DtdProjectFileType(string name);
    protected DtdProjectFileType(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static DtdProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(DtdProjectFileType value);
}
[FlagsAttribute]
public enum JetBrains.ProjectModel.DumpFlags : Enum {
    public int value__;
    public static DumpFlags PROJECTS;
    public static DumpFlags PROJECT_PROPERTIES;
    public static DumpFlags PROJECT_REFERENCE_PROPERTIES;
    public static DumpFlags ASSEMBLIES;
    public static DumpFlags ASSEMBLY_FILES_FULL_PATH;
    public static DumpFlags HIDE_MISC_FILES_PROJECT_CONTENT;
    public static DumpFlags DEFAULT;
    public static DumpFlags FULL;
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.EmbeddedResourceHelpers : object {
    [ExtensionAttribute]
public static string GetEmbeddedResourceName(IProjectFile projectFile);
}
[FlagsAttribute]
public enum JetBrains.ProjectModel.ExternalChangeType : Enum {
    public int value__;
    public static ExternalChangeType NONE;
    public static ExternalChangeType TIMESTAMP;
    public static ExternalChangeType EXISTS;
    public static ExternalChangeType READONLY;
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.ExtraData.BinaryOutputInProjectJson : object {
    private IProjectJsonDataCache myCache;
    private BinaryOutputInProjectJsonDataProvider myDataProvider;
    [CompilerGeneratedAttribute]
private ISignal`1<VirtualFileSystemPath> <ProjectJsonDataChanged>k__BackingField;
    public ISignal`1<VirtualFileSystemPath> ProjectJsonDataChanged { get; }
    public BinaryOutputInProjectJson(Lifetime lifetime, IViewableProjectsCollection projects, IProjectJsonDataCache cache);
    [CompilerGeneratedAttribute]
public ISignal`1<VirtualFileSystemPath> get_ProjectJsonDataChanged();
    public IDictionary`2<TargetFrameworkId, VirtualFileSystemPath> GetBinaryOuput(IProject project);
}
public interface JetBrains.ProjectModel.ExtraData.FilesByMask.IFilesByMaskProvider {
    public ISignal`1<VirtualFileSystemPath> MasksChanged { get; }
    [NotNullAttribute]
public abstract virtual ProjectCompileEntries GetMasks(VirtualFileSystemPath projectFilePath);
    public abstract virtual ISignal`1<VirtualFileSystemPath> get_MasksChanged();
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.ExtraData.FilesByMask.IncludedExcludedFilesInProjectJson : object {
    private IProjectJsonDataCache myCache;
    private ILogger myLogger;
    private ExcludesByMaskInProjectJsonDataProvider myDataProvider;
    private OneToListMap`2<VirtualFileSystemPath, VirtualFileSystemPath> myProjectJsonToProjectPath;
    private OneToListMap`2<VirtualFileSystemPath, VirtualFileSystemPath> myProjectFilePathToProjectJson;
    [CompilerGeneratedAttribute]
private ISignal`1<VirtualFileSystemPath> <MasksChanged>k__BackingField;
    public ISignal`1<VirtualFileSystemPath> MasksChanged { get; }
    public IncludedExcludedFilesInProjectJson(Lifetime lifetime, IProjectJsonDataCache cache, IViewableProjectsCollection projects, ILogger logger);
    public sealed virtual ProjectCompileEntries GetMasks(VirtualFileSystemPath projectFilePath);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<VirtualFileSystemPath> get_MasksChanged();
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0(Lifetime projectLifetime, IProject project);
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.ExtraData.FilesByMask.IncludesByMaskMsbuildDataProvider : object {
    private Lifetime myLifetime;
    private IMsBuildDataStorage myStorage;
    private IThreading myThreading;
    private ILogger myLogger;
    private IFileSystemTracker myFileSystemTracker;
    private IEnumerable`1<IFilesByMaskProvider> myProviders;
    private JetHashSet`1<VirtualFileSystemPath> myProjectLocationsToRebuild;
    private OneToSetMap`2<VirtualFileSystemPath, FileSystemTrackerRequestCookie> myWatchedFolders;
    public bool IsEnabled { get; }
    public IncludesByMaskMsbuildDataProvider(Lifetime lifetime, IViewableProjectsCollection projects, IMsBuildDataStorage storage, IThreading threading, ILogger logger, IFileSystemTracker fileSystemTracker, IEnumerable`1<IFilesByMaskProvider> proviers);
    public virtual bool get_IsEnabled();
    private void EnqueueProjects(IEnumerable`1<VirtualFileSystemPath> projectFileLocations);
    private void BuildData();
    [CanBeNullAttribute]
private IMsBuildData TryBuildData(VirtualFileSystemPath projectFileLocation);
    [CanBeNullAttribute]
private IMsBuildFilesDataForTargetFrameworkId TryBuildDataForTargetFrameworkId(VirtualFileSystemPath projectFileLocation, IEnumerable`1<ProjectCompileEntry> compileEntries, JetHashSet`1<VirtualFileSystemPath> foldersToWatch);
    private void WatchFolders(VirtualFileSystemPath projectFileLocation, JetHashSet`1<VirtualFileSystemPath> foldersToWatch);
    private static StringSlice GetLongestPrefixBeforeWildCard(StringSlice slice);
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.ExtraData.FilesByMask.IncludesByMaskProjectFileDataProvider : object {
    private IProjectFileDataCache myCache;
    private static Regex[] ourTargetFrameworkEqualConditionRegexes;
    private static Regex[] ourTargetFrameworkNotEqualConditionRegexes;
    private static Regex[] ourTargetFrameworkIdentifierEqualConditionRegexes;
    private static Regex[] ourTargetFrameworkIdentifierNotEqualConditionRegexes;
    private static Regex ourTargetFrameworkStartsWithRegex;
    [CompilerGeneratedAttribute]
private ISignal`1<VirtualFileSystemPath> <MasksChanged>k__BackingField;
    public int Version { get; }
    public ISignal`1<VirtualFileSystemPath> MasksChanged { get; }
    public IncludesByMaskProjectFileDataProvider(Lifetime lifetime, IProjectFileDataCache cache);
    private static IncludesByMaskProjectFileDataProvider();
    public sealed virtual int get_Version();
    public sealed virtual ProjectCompileEntries Read(VirtualFileSystemPath projectFileLocation, BinaryReader reader);
    private static ICollection`1<Pair`2<ProjectCompileEntry, TargetFrameworkId>> ReadCompileEntries(BinaryReader reader);
    public sealed virtual void Write(VirtualFileSystemPath projectFileLocation, BinaryWriter writer, ProjectCompileEntries data);
    private static void WriteCompileEntries(BinaryWriter writer, ICollection`1<Pair`2<ProjectCompileEntry, TargetFrameworkId>> entries);
    public sealed virtual bool CanHandle(VirtualFileSystemPath projectFileLocation);
    [NotNullAttribute]
private static Pair`2<TargetFrameworkCondition, IEnumerable`1<TargetFrameworkId>> GetTargetFrameworkIdsFromCondition(XmlElement element, IList`1<TargetFrameworkId> knownTargetFrameworkIds);
    [CanBeNullAttribute]
private static IList`1<TargetFrameworkId> ProcessRegexes(string conditionValue, IEnumerable`1<Regex> regexes, Func`2<string, IEnumerable`1<TargetFrameworkId>> processMatchedValue);
    private IList`1<TargetFrameworkId> FetchTargetFrameworkIds(XmlElement documentElement);
    public sealed virtual ProjectCompileEntries BuildData(VirtualFileSystemPath path, XmlDocument document);
    private static bool IsEnableDefaultItems(XmlElement documentElement, string propertyName, bool defaultValue);
    [CanBeNullAttribute]
private static string GetCompilerGeneratedFilesOutputPath(XmlElement documentElement);
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.ExtraData.FilesByMask.IncludesByMaskProjectFileDataProvider/<TryGetPropertyValues>d__21")]
[NotNullAttribute]
private static IEnumerable`1<string> TryGetPropertyValues(XmlElement documentElement, string propertyName);
    private static bool IsEnableDefaultItems(XmlElement documentElement);
    private static bool IsEnableDefaultCompileItems(XmlElement documentElement);
    [CanBeNullAttribute]
private ProjectCompileEntry TryGetProjectCompileEntry(XmlElement compileNode, string compilerGeneratedFilesOutputPath);
    private static IList`1<StringSlice> StringToPatterns(string attribute, string compilerGeneratedFilesOutputPath);
    public sealed virtual Action OnDataChanged(VirtualFileSystemPath projectFileLocation, ProjectCompileEntries oldData, ProjectCompileEntries newData);
    public sealed virtual ProjectCompileEntries GetMasks(VirtualFileSystemPath projectFilePath);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<VirtualFileSystemPath> get_MasksChanged();
}
public class JetBrains.ProjectModel.ExtraData.FilesByMask.ProjectCompileEntries : object {
    [CompilerGeneratedAttribute]
private ICollection`1<Pair`2<ProjectCompileEntry, TargetFrameworkId>> <Entries>k__BackingField;
    public ICollection`1<Pair`2<ProjectCompileEntry, TargetFrameworkId>> Entries { get; }
    public ProjectCompileEntries(ICollection`1<Pair`2<ProjectCompileEntry, TargetFrameworkId>> entriesInAllTargetFrameworks);
    [CompilerGeneratedAttribute]
public ICollection`1<Pair`2<ProjectCompileEntry, TargetFrameworkId>> get_Entries();
    public IEnumerable`1<ProjectCompileEntry> GetEntriesForTargetFramework(TargetFrameworkId targetFrameworkId);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.ExtraData.FilesByMask.ProjectCompileEntriesEx : object {
    [ExtensionAttribute]
public static void Dump(ProjectCompileEntries entries, TextWriter writer);
    private static void WriteEntries(TextWriter w, IEnumerable`1<Pair`2<ProjectCompileEntry, TargetFrameworkId>> entries);
    private static string StringListToString(IEnumerable`1<StringSlice> strings);
}
public class JetBrains.ProjectModel.ExtraData.FilesByMask.ProjectCompileEntry : object {
    [CompilerGeneratedAttribute]
private bool <IsDefaultItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<StringSlice> <Includes>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<StringSlice> <Excludes>k__BackingField;
    public bool IsDefaultItems { get; }
    public IList`1<StringSlice> Includes { get; }
    public IList`1<StringSlice> Excludes { get; }
    public bool IsExplicitlyIncludedOnly { get; }
    public ProjectCompileEntry(IList`1<StringSlice> includes, IList`1<StringSlice> excludes, bool isDefaultItems);
    [CompilerGeneratedAttribute]
public bool get_IsDefaultItems();
    [CompilerGeneratedAttribute]
public IList`1<StringSlice> get_Includes();
    [CompilerGeneratedAttribute]
public IList`1<StringSlice> get_Excludes();
    public bool get_IsExplicitlyIncludedOnly();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.ExtraData.GeneratedFilesDataProvider : object {
    private ILogger myLogger;
    private IMsBuildDataStorage myMsBuildDataStorage;
    private IDictionary`2<VirtualFileSystemPath, WatchedFolders> myFoldersPerProject;
    private GroupingEvent myRebuildRequiredEvent;
    public GeneratedFilesDataProvider(Lifetime lifetime, IFileSystemTracker fileSystemTracker, IShellLocks locks, ILogger logger, IMsBuildDataStorage msBuildDataStorage);
    protected virtual void RequestRebuild();
    protected void RebuildItems();
    public static bool IsCsharpOrVbFile(VirtualFileSystemPath path, JetHashSet`1<VirtualFileSystemPath> allFiles);
    public void AddFolders(Lifetime lifetime, VirtualFileSystemPath projectFileLocation, JetHashSet`1<VirtualFileSystemPath> folders, Func`3<VirtualFileSystemPath, JetHashSet`1<VirtualFileSystemPath>, bool> acceptFileFunc);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.ExtraData.GeneratedFoldersProvider : object {
    private GeneratedFilesDataProvider myDataProvider;
    private Dictionary`2<IProject, ProjectEntry> myProjects;
    private IProperty`1<bool> myHaveProjects;
    public GeneratedFoldersProvider(Lifetime lifetime, ChangeManager changeManager, GeneratedFilesDataProvider dataProvider);
    public void AddProject(Lifetime lifetime, IProject project, Func`2<IProject, IEnumerable`1<VirtualFileSystemPath>> getFoldersFunc, Func`3<VirtualFileSystemPath, JetHashSet`1<VirtualFileSystemPath>, bool> acceptFileFunc);
}
public interface JetBrains.ProjectModel.ExtraData.IMsBuildData {
    public IDictionary`2<Pair`2<TargetFrameworkId, VirtualFileSystemPath>, IProjectReferenceProperties> ReferencedAssemblies { get; }
    public IDictionary`2<Pair`2<TargetFrameworkId, VirtualFileSystemPath>, IProjectReferenceProperties> ReferencedProjects { get; }
    public IMsBuildFilesData Files { get; }
    public abstract virtual IDictionary`2<Pair`2<TargetFrameworkId, VirtualFileSystemPath>, IProjectReferenceProperties> get_ReferencedAssemblies();
    public abstract virtual IDictionary`2<Pair`2<TargetFrameworkId, VirtualFileSystemPath>, IProjectReferenceProperties> get_ReferencedProjects();
    public abstract virtual IMsBuildFilesData get_Files();
}
public interface JetBrains.ProjectModel.ExtraData.IMsBuildDataProvider {
}
public interface JetBrains.ProjectModel.ExtraData.IMsBuildDataStorage {
    public ISignal`1<JetHashSet`1<VirtualFileSystemPath>> Changed { get; }
    [CanBeNullAttribute]
public abstract virtual IMsBuildData TryGetData(VirtualFileSystemPath projectFilePath);
    public abstract virtual ISignal`1<JetHashSet`1<VirtualFileSystemPath>> get_Changed();
    public abstract virtual void PerformBulkChange(Lifetime lifetime);
    public abstract virtual void SetData(IMsBuildDataProvider provider, VirtualFileSystemPath projectFilePath, IMsBuildData data);
    public abstract virtual void Clear(IMsBuildDataProvider provider);
    public abstract virtual void Clear(IMsBuildDataProvider provider, Func`2<VirtualFileSystemPath, bool> filter);
    public abstract virtual JetHashSet`1<VirtualFileSystemPath> GetExistingFiles();
}
public interface JetBrains.ProjectModel.ExtraData.IMsBuildFilesData {
    public IMsBuildFilesDataForTargetFrameworkId ItemsInAllTargetFrameworkIds { get; }
    public IDictionary`2<TargetFrameworkId, IMsBuildFilesDataForTargetFrameworkId> ItemsPerTargetFrameworkId { get; }
    public abstract virtual IMsBuildFilesDataForTargetFrameworkId get_ItemsInAllTargetFrameworkIds();
    public abstract virtual IDictionary`2<TargetFrameworkId, IMsBuildFilesDataForTargetFrameworkId> get_ItemsPerTargetFrameworkId();
}
public interface JetBrains.ProjectModel.ExtraData.IMsBuildFilesDataForTargetFrameworkId {
    public IDictionary`2<VirtualFileSystemPath, BuildAction> IncludedItems { get; }
    public JetHashSet`1<VirtualFileSystemPath> ExcludedItems { get; }
    public abstract virtual IDictionary`2<VirtualFileSystemPath, BuildAction> get_IncludedItems();
    public abstract virtual JetHashSet`1<VirtualFileSystemPath> get_ExcludedItems();
}
public class JetBrains.ProjectModel.ExtraData.MsBuildData : object {
    public static IMsBuildData Empty;
    [CompilerGeneratedAttribute]
private IDictionary`2<Pair`2<TargetFrameworkId, VirtualFileSystemPath>, IProjectReferenceProperties> <ReferencedAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<Pair`2<TargetFrameworkId, VirtualFileSystemPath>, IProjectReferenceProperties> <ReferencedProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private IMsBuildFilesData <Files>k__BackingField;
    private int myHashCode;
    public IDictionary`2<Pair`2<TargetFrameworkId, VirtualFileSystemPath>, IProjectReferenceProperties> ReferencedAssemblies { get; }
    public IDictionary`2<Pair`2<TargetFrameworkId, VirtualFileSystemPath>, IProjectReferenceProperties> ReferencedProjects { get; }
    public IMsBuildFilesData Files { get; }
    public MsBuildData(IMsBuildFilesData files);
    private static MsBuildData();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<Pair`2<TargetFrameworkId, VirtualFileSystemPath>, IProjectReferenceProperties> get_ReferencedAssemblies();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<Pair`2<TargetFrameworkId, VirtualFileSystemPath>, IProjectReferenceProperties> get_ReferencedProjects();
    [CompilerGeneratedAttribute]
public sealed virtual IMsBuildFilesData get_Files();
    public void Merge(IMsBuildData data);
    protected bool Equals(MsBuildData other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private int CalculateHash();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.ExtraData.MsBuildDataEx : object {
    [ExtensionAttribute]
public static bool IsEmpty(IMsBuildData data);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.ExtraData.MsBuildDataStorage : object {
    private ILogger myLogger;
    private Dictionary`2<IMsBuildDataProvider, Dictionary`2<VirtualFileSystemPath, IMsBuildData>> myProviderData;
    private Dictionary`2<VirtualFileSystemPath, IMsBuildData> myData;
    private ICollectionEvents`1<VirtualFileSystemPath> myChangedPaths;
    private GroupingEvent myFireChangedEvent;
    private int myBulkCount;
    [CompilerGeneratedAttribute]
private ISignal`1<JetHashSet`1<VirtualFileSystemPath>> <Changed>k__BackingField;
    public ISignal`1<JetHashSet`1<VirtualFileSystemPath>> Changed { get; }
    public MsBuildDataStorage(Lifetime lifetime, IShellLocks locks, ILogger logger);
    protected virtual void FireChangedEvent();
    protected virtual void FireChangedIncoming();
    public sealed virtual void PerformBulkChange(Lifetime lifetime);
    public sealed virtual void Clear(IMsBuildDataProvider provider);
    public sealed virtual void Clear(IMsBuildDataProvider provider, Func`2<VirtualFileSystemPath, bool> filter);
    public sealed virtual JetHashSet`1<VirtualFileSystemPath> GetExistingFiles();
    public sealed virtual IMsBuildData TryGetData(VirtualFileSystemPath projectFilePath);
    public sealed virtual void SetData(IMsBuildDataProvider provider, VirtualFileSystemPath projectFilePath, IMsBuildData data);
    private void UpdateData(VirtualFileSystemPath projectFilePath);
    private IMsBuildData BuildData(VirtualFileSystemPath projectFilePath);
    private void SetData(VirtualFileSystemPath projectFilePath, IMsBuildData data);
    private void TraceMsBuildData(string prefix, VirtualFileSystemPath projectFilePath, IMsBuildData data);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<JetHashSet`1<VirtualFileSystemPath>> get_Changed();
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0(AddRemoveEventArgs`1<VirtualFileSystemPath> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_1();
    [CompilerGeneratedAttribute]
private void <PerformBulkChange>b__9_0();
    [CompilerGeneratedAttribute]
private void <PerformBulkChange>b__9_1();
}
public class JetBrains.ProjectModel.ExtraData.MsBuildFilesData : object {
    private int myHashCode;
    [CompilerGeneratedAttribute]
private IMsBuildFilesDataForTargetFrameworkId <ItemsInAllTargetFrameworkIds>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<TargetFrameworkId, IMsBuildFilesDataForTargetFrameworkId> <ItemsPerTargetFrameworkId>k__BackingField;
    public IMsBuildFilesDataForTargetFrameworkId ItemsInAllTargetFrameworkIds { get; }
    public IDictionary`2<TargetFrameworkId, IMsBuildFilesDataForTargetFrameworkId> ItemsPerTargetFrameworkId { get; }
    public MsBuildFilesData(IMsBuildFilesDataForTargetFrameworkId itemsInAllTargetFrameworkIds, IDictionary`2<TargetFrameworkId, IMsBuildFilesDataForTargetFrameworkId> itemsPerTargetFrameworkId);
    [CompilerGeneratedAttribute]
public sealed virtual IMsBuildFilesDataForTargetFrameworkId get_ItemsInAllTargetFrameworkIds();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<TargetFrameworkId, IMsBuildFilesDataForTargetFrameworkId> get_ItemsPerTargetFrameworkId();
    public void Merge(IMsBuildFilesData data);
    protected bool Equals(MsBuildFilesData other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private int CalculateHash();
    public static bool op_Equality(MsBuildFilesData left, MsBuildFilesData right);
    public static bool op_Inequality(MsBuildFilesData left, MsBuildFilesData right);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.ExtraData.MsBuildFilesDataEx : object {
    [ExtensionAttribute]
public static bool IsEmpty(IMsBuildFilesData data);
    [ExtensionAttribute]
public static bool IsEmpty(IMsBuildFilesDataForTargetFrameworkId data);
    [ExtensionAttribute]
public static BuildAction GetBuildAction(IMsBuildFilesData msBuildFilesData, VirtualFileSystemPath filePath, TargetFrameworkId targetFrameworkId);
    [ExtensionAttribute]
public static JetHashSet`1<VirtualFileSystemPath> GetAllCompileItems(IMsBuildFilesData msBuildFilesData, TargetFrameworkId targetFrameworkId);
    [ExtensionAttribute]
public static void TraceMsbBuildFilesData(ILogger logger, string prefix, VirtualFileSystemPath projectFilePath, IMsBuildFilesData data);
}
public class JetBrains.ProjectModel.ExtraData.MsBuildFilesDataForTargetFrameworkId : object {
    private int myHashCode;
    [CompilerGeneratedAttribute]
private IDictionary`2<VirtualFileSystemPath, BuildAction> <IncludedItems>k__BackingField;
    [CompilerGeneratedAttribute]
private JetHashSet`1<VirtualFileSystemPath> <ExcludedItems>k__BackingField;
    public IDictionary`2<VirtualFileSystemPath, BuildAction> IncludedItems { get; }
    public JetHashSet`1<VirtualFileSystemPath> ExcludedItems { get; }
    public MsBuildFilesDataForTargetFrameworkId(IDictionary`2<VirtualFileSystemPath, BuildAction> includedItems, JetHashSet`1<VirtualFileSystemPath> excludedItems);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<VirtualFileSystemPath, BuildAction> get_IncludedItems();
    [CompilerGeneratedAttribute]
public sealed virtual JetHashSet`1<VirtualFileSystemPath> get_ExcludedItems();
    public void Merge(IMsBuildFilesDataForTargetFrameworkId data);
    protected bool Equals(MsBuildFilesDataForTargetFrameworkId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private int CalculateHash();
    public static bool op_Equality(MsBuildFilesDataForTargetFrameworkId left, MsBuildFilesDataForTargetFrameworkId right);
    public static bool op_Inequality(MsBuildFilesDataForTargetFrameworkId left, MsBuildFilesDataForTargetFrameworkId right);
}
public class JetBrains.ProjectModel.ExtraData.ProjectReferenceEntry : object {
    [CompilerGeneratedAttribute]
private Guid <ProjectGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativeOutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIgnored>k__BackingField;
    public Guid ProjectGuid { get; }
    public string ProjectName { get; }
    public string RelativeOutputPath { get; }
    public bool IsIgnored { get; public set; }
    public ProjectReferenceEntry(Guid projectGuid, string projectName, string relativeOutputPath, bool isIgnored);
    [CompilerGeneratedAttribute]
public Guid get_ProjectGuid();
    [CompilerGeneratedAttribute]
public string get_ProjectName();
    [CompilerGeneratedAttribute]
public string get_RelativeOutputPath();
    [CompilerGeneratedAttribute]
public bool get_IsIgnored();
    [CompilerGeneratedAttribute]
public void set_IsIgnored(bool value);
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.ExtraData.ProjectReferencesProvider : object {
    public int Version { get; }
    public ProjectReferencesProvider(Lifetime lifetime, IProjectFileDataCache cache);
    public sealed virtual int get_Version();
    public sealed virtual IList`1<ProjectReferenceEntry> Read(VirtualFileSystemPath projectFileLocation, BinaryReader reader);
    public sealed virtual void Write(VirtualFileSystemPath projectFileLocation, BinaryWriter writer, IList`1<ProjectReferenceEntry> data);
    public sealed virtual bool CanHandle(VirtualFileSystemPath projectFileLocation);
    public sealed virtual IList`1<ProjectReferenceEntry> BuildData(VirtualFileSystemPath path, XmlDocument document);
    [CanBeNullAttribute]
private static ProjectReferenceEntry GetProjectReferenceEntry(XmlElement projectReferenceNode);
    public sealed virtual Action OnDataChanged(VirtualFileSystemPath projectFileLocation, IList`1<ProjectReferenceEntry> oldData, IList`1<ProjectReferenceEntry> newData);
}
[ShellComponentAttribute("0")]
public class JetBrains.ProjectModel.FakeSolutionProvider : SolutionManagerBase {
    private ViewableCollection`1<object> mySolutionRequestors;
    private ISolution myFakeSolution;
    private Lifetime myLifetime;
    private ChangeManager myChangeManager;
    private IPlatformManager myPlatformManager;
    private IShellLocks myLocks;
    public bool IsRealSolutionOwner { get; }
    public FakeSolutionProvider(Lifetime lifetime, IShellLocks locks, ChangeManager changeManager, IPlatformManager platformManager, ShellPartCatalogSet catalogueSet, IComponentContainer componentContainer, SynchronizationPoints syncPoints, ISolutionLoadTasksSchedulerProvider schedulerProvider, IEnumerable`1<IQuerySolutionCloseHandler> querySolutionCloseHandlers, IImmutableList`1<ISolutionInstanceComponentContainerExtender> solutionInstanceComponentContainerExtenders, IImmutableList`1<ISolutionComponentContainerExtender> solutionComponentContainerExtenders, ILogger logger, IAsyncComposeManager asyncComposeManager, IEnumerable`1<IFakeSolutionZoneProvider> fakeSolutionZoneProviders);
    private static IPartCatalogSet PreparePartCatalogSet(IPartCatalogSet partCatalogSet, IEnumerable`1<IFakeSolutionZoneProvider> fakeSolutionZoneProviders);
    public ISolution GetOrCreateFakeSolution(Lifetime lifetime, object requestor);
    public virtual bool get_IsRealSolutionOwner();
    private ISolution CreateTemporarySolution(Lifetime lifetime);
    protected virtual ISolutionLoadTasksScheduler GetSolutionLoadTasksScheduler();
    protected virtual Task WaitForShellContainer();
}
public class JetBrains.ProjectModel.FakeSolutionZoneFilter : object {
    public Type Type;
    public FakeSolutionZoneFilterType FilterType;
    public FakeSolutionZoneFilter(Type type, FakeSolutionZoneFilterType filterType);
    public static FakeSolutionZoneFilter Self();
    public static FakeSolutionZoneFilter Base();
}
public enum JetBrains.ProjectModel.FakeSolutionZoneFilterType : Enum {
    public int value__;
    public static FakeSolutionZoneFilterType Self;
    public static FakeSolutionZoneFilterType Base;
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Features.AppConfigUtil : object {
    public static string FileName;
    [ExtensionAttribute]
[NotNullAttribute]
public static VirtualFileSystemPath GetDefaultAppConfigPath(IProject project);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectFile FindDefaultAppConfig(IProject project);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ProjectModel.Features.DefaultProjectModelAwaiter : object {
    public sealed virtual Task WaitForProjectModel(CancellationToken ct);
    public sealed virtual Task WaitForProjectModel(IProject project, CancellationToken ct);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.Features.Diagnostics.DefaultDiagnosticCollector : object {
    [CompilerGeneratedAttribute]
private IImmutableList`1<IDiagnosticDecorator> <decorators>P;
    public DefaultDiagnosticCollector(IImmutableList`1<IDiagnosticDecorator> decorators);
    public sealed virtual void Collect(Lifetime lifetime, IReadOnlyCollection`1<IDiagnostic> diagnostics);
    protected virtual void PerformCollect(Lifetime lifetime, IReadOnlyCollection`1<IDiagnostic> diagnostics);
}
public abstract class JetBrains.ProjectModel.Features.Diagnostics.Diagnostic : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PresentableText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subsystem>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticAttentionKind <AttentionKind>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IDiagnosticAction> <Actions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Class>k__BackingField;
    public string Title { get; public set; }
    public string PresentableText { get; public set; }
    public string Subsystem { get; public set; }
    public DiagnosticAttentionKind AttentionKind { get; public set; }
    public List`1<IDiagnosticAction> Actions { get; public set; }
    public string Class { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PresentableText();
    [CompilerGeneratedAttribute]
public void set_PresentableText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Subsystem();
    [CompilerGeneratedAttribute]
public void set_Subsystem(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DiagnosticAttentionKind get_AttentionKind();
    [CompilerGeneratedAttribute]
public void set_AttentionKind(DiagnosticAttentionKind value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<IDiagnosticAction> get_Actions();
    [CompilerGeneratedAttribute]
public void set_Actions(List`1<IDiagnosticAction> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Class();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Class(string value);
    public void AppendLine();
    public void AppendLine(string text);
}
public enum JetBrains.ProjectModel.Features.Diagnostics.DiagnosticAttentionKind : Enum {
    public int value__;
    public static DiagnosticAttentionKind Error;
    public static DiagnosticAttentionKind Warning;
    public static DiagnosticAttentionKind Info;
}
public class JetBrains.ProjectModel.Features.Diagnostics.DiagnosticController`1 : object {
    private Lifetime myLifetime;
    private IDiagnosticCollector myCollector;
    private Dictionary`2<T, LifetimeDefinition> myLifetimeDefinitions;
    public DiagnosticController`1(Lifetime lifetime, IDiagnosticCollector collector);
    public void Register(T key, IReadOnlyCollection`1<IDiagnostic> diagnostics);
}
public abstract class JetBrains.ProjectModel.Features.Diagnostics.GenericDiagnosticDecorator`1 : object {
    public sealed virtual void Process(IDiagnostic diagnostic);
    protected abstract virtual void Process(T diagnostic);
}
public interface JetBrains.ProjectModel.Features.Diagnostics.IDiagnostic {
    [NotNullAttribute]
public string Title { get; }
    [NotNullAttribute]
public string PresentableText { get; }
    [NotNullAttribute]
public string Subsystem { get; }
    public string Class { get; public set; }
    public DiagnosticAttentionKind AttentionKind { get; }
    public List`1<IDiagnosticAction> Actions { get; }
    public abstract virtual string get_Title();
    public abstract virtual string get_PresentableText();
    public abstract virtual string get_Subsystem();
    public abstract virtual string get_Class();
    public abstract virtual void set_Class(string value);
    public abstract virtual DiagnosticAttentionKind get_AttentionKind();
    public abstract virtual List`1<IDiagnosticAction> get_Actions();
}
public interface JetBrains.ProjectModel.Features.Diagnostics.IDiagnosticAction {
}
public interface JetBrains.ProjectModel.Features.Diagnostics.IDiagnosticCollector {
    public abstract virtual void Collect(Lifetime lifetime, IReadOnlyCollection`1<IDiagnostic> diagnostics);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ProjectModel.Features.Diagnostics.IDiagnosticDecorator {
    public abstract virtual void Process(IDiagnostic diagnostic);
}
public interface JetBrains.ProjectModel.Features.Diagnostics.IHiddenDiagnostic {
}
public interface JetBrains.ProjectModel.Features.Diagnostics.IUnrealBlueprintDiagnostic {
    public VirtualFileSystemPath Path { get; }
    public abstract virtual VirtualFileSystemPath get_Path();
}
[ShellComponentAttribute("10")]
public class JetBrains.ProjectModel.Features.ElementsCompilerSupport : object {
    public ElementsCompilerSupport(Lifetime lifetime, ProjectHasPsiService projectHasPsiService);
}
public interface JetBrains.ProjectModel.Features.IProjectModelAwaiter {
    [NotNullAttribute]
public abstract virtual Task WaitForProjectModel(CancellationToken ct);
    [NotNullAttribute]
public abstract virtual Task WaitForProjectModel(IProject project, CancellationToken ct);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.Features.PauseProjectModelSynchronizerWhileBuild : object {
    public PauseProjectModelSynchronizerWhileBuild(Lifetime lifetime, ProjectModelSynchronizePauser pmsPauser, BuildIsRunning buildIsRunning);
}
[SolutionInstanceComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ProjectModel.Features.ProjectModelSynchronizePauser : object {
    public virtual Task PauseSyncAsync(Lifetime lifetime, string reason);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.Features.RuleSets.ResolvedRuleSetPropertyRequest : object {
    public static string ResolvedCodeAnalysisRuleSet;
    public static string ResolveCodeAnalysisRuleSetTarget;
    public IEnumerable`1<string> RequestedProperties { get; }
    public sealed virtual IEnumerable`1<string> get_RequestedProperties();
    [CanBeNullAttribute]
public static VirtualFileSystemPath TryGetAbsoluteRuleSetPath(IProject project);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.Features.RuleSets.RuleSetPropertyRequest : object {
    public static string CodeAnalysisRuleSet;
    public IEnumerable`1<string> RequestedProperties { get; }
    public sealed virtual IEnumerable`1<string> get_RequestedProperties();
    [CanBeNullAttribute]
public static VirtualFileSystemPath TryGetAbsoluteRuleSetPath(IProject project);
}
[SettingsIndexedKeyAttribute("JetBrains.ProjectModel.Features.RunConfig.RunConfigsSettings", "JetBrains.ProjectModel.Resources.Strings", "SingleConfigurationSettingDescription", "JetBrains.Application.Settings.GuidIndex")]
public class JetBrains.ProjectModel.Features.RunConfig.ConfigSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "NameSettingDescription")]
public string Name;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "TypeSettingDescription")]
public string Type;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "ProjectGuidSettingDescription")]
public GuidIndex ProjectGuid;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "DefaultActionSettingDescription")]
public string DefaultAction;
}
public abstract class JetBrains.ProjectModel.Features.RunConfig.ExecutionProviderBase : object {
    public string Name { get; }
    public string Id { get; }
    public IconId Icon { get; }
    public IconId IconWithoutBuild { get; }
    public int Priority { get; }
    public string Caption { get; }
    public abstract virtual void Execute(ProcessStartInfo processStartInfo, RunConfigContext context, IRunConfig config);
    public abstract virtual void Execute(IProject project);
    public abstract virtual string get_Name();
    public abstract virtual string get_Id();
    public abstract virtual IconId get_Icon();
    public virtual IconId get_IconWithoutBuild();
    public virtual int get_Priority();
    public abstract virtual string get_Caption();
}
public interface JetBrains.ProjectModel.Features.RunConfig.IExecutionProvider {
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public string Id { get; }
    public IconId Icon { get; }
    public IconId IconWithoutBuild { get; }
    public int Priority { get; }
    [NotNullAttribute]
public string Caption { get; }
    public abstract virtual void Execute(ProcessStartInfo processStartInfo, RunConfigContext context, IRunConfig config);
    public abstract virtual void Execute(IProject project);
    public abstract virtual string get_Name();
    public abstract virtual string get_Id();
    public abstract virtual IconId get_Icon();
    public abstract virtual IconId get_IconWithoutBuild();
    public abstract virtual int get_Priority();
    public abstract virtual string get_Caption();
}
public interface JetBrains.ProjectModel.Features.RunConfig.IRunConfig {
    public Guid Uid { get; public set; }
    public string Name { get; public set; }
    public string Type { get; public set; }
    public string DefaultAction { get; public set; }
    public Guid ProjectGuid { get; public set; }
    [CanBeNullAttribute]
public IconId IconId { get; }
    public ICollection`1<Guid> ProjectGuidCollectionForBuild { get; }
    public abstract virtual Guid get_Uid();
    public abstract virtual void set_Uid(Guid value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_Type();
    public abstract virtual void set_Type(string value);
    public abstract virtual string get_DefaultAction();
    public abstract virtual void set_DefaultAction(string value);
    public abstract virtual Guid get_ProjectGuid();
    public abstract virtual void set_ProjectGuid(Guid value);
    public abstract virtual IconId get_IconId();
    public abstract virtual ICollection`1<Guid> get_ProjectGuidCollectionForBuild();
    public abstract virtual void Execute(RunConfigContext context);
    public abstract virtual IRunConfigEditorAutomation CreateEditor(Lifetime lifetime, IRunConfigCommonAutomation commonEditor, ISolution solution);
    public abstract virtual bool ReadFromStore(IContextBoundSettingsStore store);
    public abstract virtual void SaveToStore(IContextBoundSettingsStore store);
}
public interface JetBrains.ProjectModel.Features.RunConfig.IRunConfigBuilder {
    public abstract virtual void BuildRunConfigAndExecute(ISolution solution, RunConfigContext context, IRunConfig cfg);
    public abstract virtual void ExecuteRunConfig(IRunConfig cfg, RunConfigContext context, bool isBuildRequired);
}
public interface JetBrains.ProjectModel.Features.RunConfig.IRunConfigCommonAutomation {
    public Property`1<bool> IsWholeSolutionChecked { get; public set; }
    public Property`1<Visibility> NameErrorVisibility { get; public set; }
    public Property`1<Visibility> WholeSolutionVisibility { get; public set; }
    public Property`1<string> ConfigName { get; }
    public Property`1<string> NameError { get; public set; }
    public Property`1<bool> IsSpecificProjectChecked { get; public set; }
    public Property`1<IProject> SelectedProject { get; public set; }
    public ListEvents`1<IProject> AllProjects { get; public set; }
    public abstract virtual Property`1<bool> get_IsWholeSolutionChecked();
    public abstract virtual void set_IsWholeSolutionChecked(Property`1<bool> value);
    public abstract virtual Property`1<Visibility> get_NameErrorVisibility();
    public abstract virtual void set_NameErrorVisibility(Property`1<Visibility> value);
    public abstract virtual Property`1<Visibility> get_WholeSolutionVisibility();
    public abstract virtual void set_WholeSolutionVisibility(Property`1<Visibility> value);
    public abstract virtual Property`1<string> get_ConfigName();
    public abstract virtual Property`1<string> get_NameError();
    public abstract virtual void set_NameError(Property`1<string> value);
    public abstract virtual Property`1<bool> get_IsSpecificProjectChecked();
    public abstract virtual void set_IsSpecificProjectChecked(Property`1<bool> value);
    public abstract virtual Property`1<IProject> get_SelectedProject();
    public abstract virtual void set_SelectedProject(Property`1<IProject> value);
    public abstract virtual ListEvents`1<IProject> get_AllProjects();
    public abstract virtual void set_AllProjects(ListEvents`1<IProject> value);
}
public interface JetBrains.ProjectModel.Features.RunConfig.IRunConfigEditorAutomation {
    public IRunConfig Config { get; }
    public Property`1<bool> IsValid { get; }
    public abstract virtual IRunConfig get_Config();
    public abstract virtual Property`1<bool> get_IsValid();
    public abstract virtual void UpdateModel();
}
public interface JetBrains.ProjectModel.Features.RunConfig.IRunConfigManager {
    public IProperty`1<IRunConfig> ActiveConfig { get; }
    public ICollectionEvents`1<IRunConfig> AllConfigs { get; }
    public IProperty`1<bool> SkipBuildByPrimary { get; }
    public IProperty`1<string> CurrentVSStartupCaption { get; }
    public IProperty`1<bool> AutoAttach { get; }
    public abstract virtual IProperty`1<IRunConfig> get_ActiveConfig();
    public abstract virtual ICollectionEvents`1<IRunConfig> get_AllConfigs();
    public abstract virtual IProperty`1<bool> get_SkipBuildByPrimary();
    public abstract virtual IProperty`1<string> get_CurrentVSStartupCaption();
    public abstract virtual IProperty`1<bool> get_AutoAttach();
    public abstract virtual IEnumerable`1<IRunConfig> EnumeratePersonalConfigs();
    public abstract virtual IEnumerable`1<IRunConfig> EnumerateSharedConfigs();
    public abstract virtual void SaveConfig(IRunConfig config, bool isShared);
    public abstract virtual void SetActive(IRunConfig config);
    public abstract virtual void ExecuteRunConfig(IRunConfig cfg, RunConfigContext context);
    public abstract virtual void ShareConfig(IRunConfig config);
    public abstract virtual void UnShareConfig(IRunConfig config);
    public abstract virtual void Delete(IRunConfig config);
    public abstract virtual IEnumerable`1<IProject> GetDependentProjects(ISolution solution, IRunConfig cfg);
}
public interface JetBrains.ProjectModel.Features.RunConfig.IRunConfigProcessTracker {
    public abstract virtual void AcceptProcess(IRunConfig config, Process process);
    public abstract virtual ICollection`1<Process> GetActiveConfigProcesses(IRunConfig config);
    public abstract virtual void AdviseProcessStarted(Lifetime lifetime, Action`1<ProcessStartEventArg> handler);
}
public interface JetBrains.ProjectModel.Features.RunConfig.IRunConfigProvider {
    public string Name { get; }
    public string Type { get; }
    public IconId IconId { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Type();
    public abstract virtual IconId get_IconId();
    public abstract virtual IRunConfig CreateNew();
}
public class JetBrains.ProjectModel.Features.RunConfig.ProcessStartEventArg : ValueType {
    [CompilerGeneratedAttribute]
private int <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutablePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandLine>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Caption>k__BackingField;
    public int ProcessId { get; public set; }
    [CanBeNullAttribute]
public string Name { get; public set; }
    [CanBeNullAttribute]
public string ExecutablePath { get; public set; }
    [CanBeNullAttribute]
public string CommandLine { get; public set; }
    [CanBeNullAttribute]
public string Caption { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_ProcessId();
    [CompilerGeneratedAttribute]
public void set_ProcessId(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_ExecutablePath();
    [CompilerGeneratedAttribute]
public void set_ExecutablePath(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_CommandLine();
    [CompilerGeneratedAttribute]
public void set_CommandLine(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Caption();
    [CompilerGeneratedAttribute]
public void set_Caption(string value);
}
public abstract class JetBrains.ProjectModel.Features.RunConfig.RunConfigBase : object {
    [CompilerGeneratedAttribute]
private string <DefaultAction>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Uid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ProjectGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string DefaultAction { get; public set; }
    public Guid Uid { get; public set; }
    public string Type { get; public set; }
    public Guid ProjectGuid { get; public set; }
    public string Name { get; public set; }
    public ICollection`1<Guid> ProjectGuidCollectionForBuild { get; }
    public IconId IconId { get; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_DefaultAction();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultAction(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Uid();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Uid(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_ProjectGuid();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ProjectGuid(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    public virtual ICollection`1<Guid> get_ProjectGuidCollectionForBuild();
    public virtual IconId get_IconId();
    public abstract virtual void Execute(RunConfigContext context);
    public virtual IRunConfigEditorAutomation CreateEditor(Lifetime lifetime, IRunConfigCommonAutomation commonEditor, ISolution solution);
    public sealed virtual bool ReadFromStore(IContextBoundSettingsStore store);
    protected virtual bool ReadSpecific(IContextBoundSettingsStore store, Dictionary`2<SettingsKey, object> mapping);
    public sealed virtual void SaveToStore(IContextBoundSettingsStore store);
    protected virtual void SaveSpecific(IContextBoundSettingsStore store, Dictionary`2<SettingsKey, object> mapping);
}
public class JetBrains.ProjectModel.Features.RunConfig.RunConfigContext : ValueType {
    [CompilerGeneratedAttribute]
private IExecutionProvider <ExecutionProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BuildInExecution>k__BackingField;
    [CompilerGeneratedAttribute]
private IRunConfigProcessTracker <ProcessTracker>k__BackingField;
    [NotNullAttribute]
public IExecutionProvider ExecutionProvider { get; public set; }
    public ISolution Solution { get; public set; }
    public bool BuildInExecution { get; public set; }
    public IRunConfigProcessTracker ProcessTracker { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IExecutionProvider get_ExecutionProvider();
    [CompilerGeneratedAttribute]
public void set_ExecutionProvider(IExecutionProvider value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ISolution get_Solution();
    [CompilerGeneratedAttribute]
public void set_Solution(ISolution value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_BuildInExecution();
    [CompilerGeneratedAttribute]
public void set_BuildInExecution(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IRunConfigProcessTracker get_ProcessTracker();
    [CompilerGeneratedAttribute]
public void set_ProcessTracker(IRunConfigProcessTracker value);
}
public abstract class JetBrains.ProjectModel.Features.RunConfig.RunConfigProviderBase : object {
    public string Name { get; }
    public string Type { get; }
    public IconId IconId { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Type();
    public virtual IconId get_IconId();
    public abstract virtual IRunConfig CreateNew();
}
[SettingsKeyAttribute("System.Reflection.Missing", "JetBrains.ProjectModel.Resources.Strings", "RunConfigurationsSettingDescription")]
public class JetBrains.ProjectModel.Features.RunConfig.RunConfigsSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "ActiveSettingDescription")]
public GuidIndex Active;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "SwapDefaultActionToSkipBuildingSettingDescription")]
public bool SkipBuildByPrimary;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "AutoAttachSettingDescription")]
public bool AutoAttach;
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Features.RunConfig.StorageUtils : object {
    [ExtensionAttribute]
public static void SetIfChanged(IContextBoundSettingsStore store, Expression`1<Func`2<TKeyClass, TValueClass>> expression, TValueClass value, IDictionary`2<SettingsKey, object> mappingKeys);
}
public class JetBrains.ProjectModel.Features.SolutionBuilders.BuildEventMessageHolderStub : object {
    public static IBuildEventMessageHolder Instance;
    private static BuildEventMessageHolderStub();
    public sealed virtual string GetMessage();
}
public class JetBrains.ProjectModel.Features.SolutionBuilders.BuildEventPlainMessageHolder : object {
    private string myMsg;
    public BuildEventPlainMessageHolder(string msg);
    public sealed virtual string GetMessage();
}
public enum JetBrains.ProjectModel.Features.SolutionBuilders.BuildEventType : Enum {
    public int value__;
    public static BuildEventType None;
    public static BuildEventType Error;
    public static BuildEventType Warning;
    public static BuildEventType Message;
    public static BuildEventType Status;
    public static BuildEventType Console;
    public static BuildEventType Reference;
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.BuildIsRunning : object {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <BuildIsRunnning>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <BuildIsCancelling>k__BackingField;
    public IProperty`1<bool> BuildIsRunnning { get; private set; }
    public IProperty`1<bool> BuildIsCancelling { get; private set; }
    public BuildIsRunning(ISolutionBuilder solutionBuilder, Lifetime lifetime, SynchronizationPoints synchronizationPoints, SuspendHardOperationsManager suspendHardOperationsManager);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_BuildIsRunnning();
    [CompilerGeneratedAttribute]
private void set_BuildIsRunnning(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_BuildIsCancelling();
    [CompilerGeneratedAttribute]
private void set_BuildIsCancelling(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__8_0(Lifetime requestLt, SolutionBuilderRequest request);
    [CompilerGeneratedAttribute]
private void <.ctor>b__8_1(Lifetime lifetime1, BuildRunState state);
    [CompilerGeneratedAttribute]
private void <.ctor>b__8_2(Lifetime cancellingLt);
    [CompilerGeneratedAttribute]
private void <.ctor>b__8_3();
}
public abstract class JetBrains.ProjectModel.Features.SolutionBuilders.BuildRequestBase : object {
    [NotNullAttribute]
private List`1<BuildEventReference> myBuildWarnings;
    [CompilerGeneratedAttribute]
private IProperty`1<BuildRunState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <HasErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <HasWarnings>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <HasCancelled>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Suceeded>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<BuildEventReference> <BuildErrorSignal>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<BuildEventReference> <AllEventSignal>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<BuildEventReference> <BuildErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <AfterBuildCompleted>k__BackingField;
    [NotNullAttribute]
public IProperty`1<BuildRunState> State { get; }
    [NotNullAttribute]
public IProperty`1<bool> HasErrors { get; }
    [NotNullAttribute]
public IProperty`1<bool> HasWarnings { get; }
    [NotNullAttribute]
public IProperty`1<bool> HasCancelled { get; }
    [NotNullAttribute]
public IProperty`1<bool> Suceeded { get; }
    [NotNullAttribute]
public ISignal`1<BuildEventReference> BuildErrorSignal { get; }
    [NotNullAttribute]
public ISignal`1<BuildEventReference> AllEventSignal { get; }
    [NotNullAttribute]
public List`1<BuildEventReference> BuildErrors { get; }
    [NotNullAttribute]
public ISimpleSignal AfterBuildCompleted { get; }
    protected BuildRequestBase(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<BuildRunState> get_State();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_HasErrors();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_HasWarnings();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_HasCancelled();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_Suceeded();
    [CompilerGeneratedAttribute]
public ISignal`1<BuildEventReference> get_BuildErrorSignal();
    [CompilerGeneratedAttribute]
public ISignal`1<BuildEventReference> get_AllEventSignal();
    [CompilerGeneratedAttribute]
public List`1<BuildEventReference> get_BuildErrors();
    [CompilerGeneratedAttribute]
public ISimpleSignal get_AfterBuildCompleted();
    public virtual void AddBuildEvent(BuildEventReference reference);
    internal void CheckEvent(BuildEventReference reference);
    [NotNullAttribute]
public virtual IEnumerable`1<BuildEventReference> GetAllImportantEvents();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.BuildRequestFactory : object {
    private ILogger myLogger;
    private ILogger myPerfLogger;
    private IProjectCollectionHolder myProjectCollectionHolder;
    private ISolutionBuilderRequestDataStorage mySolutionBuilderRequestDataStorage;
    private BuildRequestProjectInformationProvider myBuildRequestProjectInformationProvider;
    [CanBeNullAttribute]
private IApplicableProjectsHolder myApplicableProjectsHolder;
    private SequentialLifetimes mySessionLifetimes;
    private UInt32 myNextSessionId;
    private IDisposable myBuilderStopwatchCookie;
    [NotNullAttribute]
private ISolutionCaches mySolutionCaches;
    private object mySessionIdLock;
    public UInt32 LastSessionId { get; }
    public BuildRequestFactory(Lifetime lifetime, ILogger logger, IProjectCollectionHolder projectCollectionHolder, ISolutionBuilderRequestDataStorage solutionBuilderRequestDataStorage, BuildRequestProjectInformationProvider buildRequestProjectInformationProvider, ISolutionCaches solutionCaches, IApplicableProjectsHolder applicableProjectsHolder);
    public UInt32 get_LastSessionId();
    [NotNullAttribute]
public SolutionBuilderRequest CreateBuildRequest(IBuildSessionTarget target, ISolutionBuilderRunner runner, IProject[] projectsToBuild, SolutionBuilderRequestSilentMode silentMode, SolutionBuilderRequestAdvancedSettings solutionBuilderRequestAdvancedSettings);
    private FileSystemPath GetSessionLocation(UInt32 sessionId);
    private void CleanupEventsStorage();
    private FileSystemPath GetCommonEventsLocation();
    public void TerminateCurrentRequest();
    [CompilerGeneratedAttribute]
private void <CreateBuildRequest>b__14_0(PropertyChangedEventArgs`1<BuildRunState> val);
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.BuildRequestProjectInformationProvider : object {
    public virtual bool HasUnloadedProject();
}
public class JetBrains.ProjectModel.Features.SolutionBuilders.BuildRequestStoringData : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    internal static IUnsafeMarshaller`1<BuildRequestStoringData> Marshaller;
    public string Message { get; }
    public BuildRequestStoringData(string message);
    private static BuildRequestStoringData();
    [CompilerGeneratedAttribute]
public string get_Message();
}
public class JetBrains.ProjectModel.Features.SolutionBuilders.BuildRequestStoringKey : object {
    [CompilerGeneratedAttribute]
private UInt32 <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <EventId>k__BackingField;
    internal static IUnsafeMarshaller`1<BuildRequestStoringKey> Marshaller;
    public UInt32 SessionId { get; }
    public UInt32 EventId { get; }
    public BuildRequestStoringKey(UInt32 sessionId, UInt32 eventId);
    private static BuildRequestStoringKey();
    [CompilerGeneratedAttribute]
public UInt32 get_SessionId();
    [CompilerGeneratedAttribute]
public UInt32 get_EventId();
}
[FlagsAttribute]
public enum JetBrains.ProjectModel.Features.SolutionBuilders.BuildRunState : Enum {
    public int value__;
    public static BuildRunState Submitted;
    public static BuildRunState Running;
    public static BuildRunState Completed;
    public static BuildRunState Skipped;
}
public class JetBrains.ProjectModel.Features.SolutionBuilders.BuildSession : object {
    [CompilerGeneratedAttribute]
private bool <Succeeded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasCancelled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSilent>k__BackingField;
    public IListEvents`1<SolBuildEvent> BuildEventsNonProject;
    public IBuildSessionTarget Target;
    public string ConfigurationName;
    public string PlatformName;
    public ListEvents`1<BuildSessionProject> Projects;
    public FileSystemPath[] ProjectsMustBeBuilt;
    public FileSystemPath SolutionFile;
    public ISolution Solution;
    public IProperty`1<BuildSessionState> State;
    public LifetimeDefinition LifetimeDefinition;
    public bool Succeeded { get; }
    public bool HasCancelled { get; }
    public bool IsSilent { get; public set; }
    public BuildSession(FileSystemPath solutionfile, ISolution solution, IBuildSessionTarget target, FileSystemPath[] pathProjectsMustBeBuilt, string sConfigurationName, string sPlatformName, bool succeeded, bool hasCancelled);
    [CompilerGeneratedAttribute]
public bool get_Succeeded();
    [CompilerGeneratedAttribute]
public bool get_HasCancelled();
    [CompilerGeneratedAttribute]
public bool get_IsSilent();
    [CompilerGeneratedAttribute]
public void set_IsSilent(bool value);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static ISignal`1<AddRemoveIndexEventArgs`1<SolBuildEvent>> CreateBuildEventsAddRemove(BuildSession session, Lifetime lifetime);
    [ExtensionAttribute]
[NotNullAttribute]
public static IProperty`1<BuildSessionProjectErrorStatus> CreateProjectErrorStatus(BuildSessionProject project, Lifetime lifetime);
    [ExtensionAttribute]
public static Func`2<FileSystemPath, BuildSessionProject> CreateProjectFullPathCache(BuildSession session);
    [ExtensionAttribute]
public static DictionaryEvents`2<FileSystemPath, BuildSessionProject> CreateProjectFullPathCache2(BuildSession session, Lifetime lifetime);
    [ExtensionAttribute]
[NotNullAttribute]
public static IProperty`1<BuildSessionProjectErrorStatus> CreateSessionErrorStatus(BuildSession session, Lifetime lifetime);
    [ExtensionAttribute]
public static IEnumerable`1<SolBuildEvent> GetAllBuildEvents(BuildSession session);
    [ExtensionAttribute]
public static bool IsSuccessful(BuildSessionProject project);
    [ExtensionAttribute]
public static bool IsSuccessful(BuildSession session);
    [ExtensionAttribute]
[NotNullAttribute]
private static IProperty`1<BuildSessionProjectErrorStatus> CreateCompositeErrorStatusInternal(ISignal`1<AddRemoveIndexEventArgs`1<SolBuildEvent>> sigAddRemove, Lifetime lifetime);
}
public class JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionProject : object {
    public IListEvents`1<SolBuildEvent> BuildEvents;
    [NotNullAttribute]
public Property`1<BuildSessionProjectBuildState> BuildState;
    [NotNullAttribute]
public FileSystemPath FullPath;
    [NotNullAttribute]
public string Name { get; }
    public BuildSessionProject(FileSystemPath fullpath);
    public string get_Name();
    private void InitDataFlow();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NotNullAttribute]
public virtual string ToString();
    public sealed virtual bool Equals(BuildSessionProject projectData);
}
public enum JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionProjectBuildState : Enum {
    public int value__;
    public static BuildSessionProjectBuildState Excluded;
    public static BuildSessionProjectBuildState Pending;
    public static BuildSessionProjectBuildState Running;
    public static BuildSessionProjectBuildState Completed;
}
public enum JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionProjectErrorStatus : Enum {
    public int value__;
    public static BuildSessionProjectErrorStatus Clean;
    public static BuildSessionProjectErrorStatus Warnings;
    public static BuildSessionProjectErrorStatus Errors;
}
public enum JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionState : Enum {
    public int value__;
    public static BuildSessionState Waiting;
    public static BuildSessionState Running;
    public static BuildSessionState Completed;
}
public static class JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionTarget : object {
    [NotNullAttribute]
public static IBuildSessionTarget Build;
    [NotNullAttribute]
public static IBuildSessionTarget Rebuild;
    [NotNullAttribute]
public static IBuildSessionTarget Clean;
    private static BuildSessionTarget();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionTargetEx : object {
    [ExtensionAttribute]
public static void SwitchOnTargets(IBuildSessionTarget target, Action forBuild, Action forRebuild, Action forClean, Action`1<CustomTarget> forCustom);
    [ExtensionAttribute]
public static bool IsBuilding(IBuildSessionTarget target);
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.Features.SolutionBuilders.BuildTarget : DefaultTarget {
    public static IBuildSessionTarget Instance;
    private static BuildTarget();
    public virtual string ToString();
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.Features.SolutionBuilders.CleanTarget : DefaultTarget {
    public static IBuildSessionTarget Instance;
    private static CleanTarget();
    public virtual string ToString();
}
[SolutionComponentAttribute("18")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.CurrentSolutionBuilderObsolete : object {
    private static ReadonlyToken ReadonlyToken;
    private Property`1<ISolutionBuilderObsolete> myActiveImplementation;
    private Property`1<BuildSession> myRunningSession;
    public ListEvents`1<Tuple`2<double, ISolutionBuilderObsolete>> Implementations;
    public IProperty`1<BuildSession> RunningSession { get; }
    public CurrentSolutionBuilderObsolete(Lifetime lifetime, IThreading threading);
    private static CurrentSolutionBuilderObsolete();
    public static VirtualFileSystemPath GetProjectFullPath(IProject project);
    private void InitImplementations(Lifetime lifetime);
    public sealed virtual void Abort();
    public sealed virtual void BeginRun(BuildSession session);
    [NotNullAttribute]
public sealed virtual BuildSession CreateSession(IBuildSessionTarget severity, IProject[] projectsToBuild);
    public sealed virtual IProperty`1<BuildSession> get_RunningSession();
    [CompilerGeneratedAttribute]
private void <InitImplementations>b__6_0(AddRemoveIndexEventArgs`1<Tuple`2<double, ISolutionBuilderObsolete>> args);
    [CompilerGeneratedAttribute]
private void <InitImplementations>b__6_1(Lifetime lifetimeBuilder, ISolutionBuilderObsolete builder);
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.Features.SolutionBuilders.CustomTarget : object {
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    public bool IsDefault { get; }
    [NotNullAttribute]
public string Target { get; }
    public CustomTarget(string target);
    public sealed virtual bool get_IsDefault();
    [CompilerGeneratedAttribute]
public string get_Target();
    public virtual string ToString();
}
public abstract class JetBrains.ProjectModel.Features.SolutionBuilders.DefaultTarget : object {
    public bool IsDefault { get; }
    public sealed virtual bool get_IsDefault();
}
public class JetBrains.ProjectModel.Features.SolutionBuilders.EmptySolutionBuilder : object {
    private IProperty`1<BuildSession> myRunningSession;
    public IProperty`1<BuildSession> RunningSession { get; }
    public sealed virtual void Abort();
    public sealed virtual void BeginRun(BuildSession session);
    public sealed virtual BuildSession CreateSession(IBuildSessionTarget severity, IProject[] projectsToBuild);
    public sealed virtual IProperty`1<BuildSession> get_RunningSession();
}
public class JetBrains.ProjectModel.Features.SolutionBuilders.GlobalProperty : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; }
    public string Value { get; }
    public GlobalProperty(string name, string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Value();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.IApplicableProjectsHolder {
    [CanBeNullAttribute]
public abstract virtual IEnumerable`1<IProject> GetCurrentProjects();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.IBuildEvent {
    public string Message { get; }
    public abstract virtual string get_Message();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.IBuildEventMessageHolder {
    public abstract virtual string GetMessage();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.IBuildEventOutputSink {
    public abstract virtual void AddOutputBuildMessage(OutputKind outputKind, string message, Nullable`1<int> projectId);
    public abstract virtual void RegisterProject(int projectId, IProject project);
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.IBuildSessionTarget {
    public bool IsDefault { get; }
    public abstract virtual bool get_IsDefault();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.INotIncrementalBuildTriggerer {
    public abstract virtual void TriggerBuild();
}
internal interface JetBrains.ProjectModel.Features.SolutionBuilders.IPreparingRequestHolder {
    [CanBeNullAttribute]
public SolutionBuilderRequest PreparingRequest { get; }
    public abstract virtual SolutionBuilderRequest get_PreparingRequest();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.IProjectCollectionHolder {
    public abstract virtual ICollection`1<IProject> GetAllProjects();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.ISolutionBuilder {
    public bool IsIncremental { get; }
    [NotNullAttribute]
public IProperty`1<SolutionBuilderRequest> RunningRequest { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsReady { get; }
    public abstract virtual bool get_IsIncremental();
    public abstract virtual bool IsDefault();
    public abstract virtual IProperty`1<SolutionBuilderRequest> get_RunningRequest();
    public abstract virtual IProperty`1<bool> get_IsReady();
    public abstract virtual void SetupBuildRequestCreatedExternal(SolutionBuilderRequest builderRequest);
    public abstract virtual void ExecuteBuildRequest(SolutionBuilderRequest builderRequest);
    public abstract virtual void Abort();
    public abstract virtual SolutionBuilderRequest CreateBuildRequest(IBuildSessionTarget target, IProject[] projectsToBuild, SolutionBuilderRequestSilentMode silentMode, SolutionBuilderRequestAdvancedSettings solutionBuilderRequestAdvancedSettings);
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.ISolutionBuilderDataKeeper {
    public abstract virtual void Subscribe(UInt32 sessionId, Lifetime lifetime);
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.ISolutionBuilderEvent {
    public BuildEventType BuildEventType { get; }
    public string Message { get; }
    [CanBeNullAttribute]
public IProject Project { get; }
    public string File { get; }
    public string Subcategory { get; }
    public int LineNumber { get; }
    public int EndLineNumber { get; }
    public int ColumnNumber { get; }
    public int EndColumnNumber { get; }
    public string Code { get; }
    public abstract virtual BuildEventType get_BuildEventType();
    public abstract virtual string get_Message();
    public abstract virtual IProject get_Project();
    public abstract virtual string get_File();
    public abstract virtual string get_Subcategory();
    public abstract virtual int get_LineNumber();
    public abstract virtual int get_EndLineNumber();
    public abstract virtual int get_ColumnNumber();
    public abstract virtual int get_EndColumnNumber();
    public abstract virtual string get_Code();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.ISolutionBuilderEventNavigationProvider {
    public abstract virtual bool Navigate(SolutionBuilderRequest request, BuildEventReference buildEventReference);
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.ISolutionBuilderEventNavigationService {
    public abstract virtual bool Navigate(SolutionBuilderRequest request, BuildEventReference buildEventReference);
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.ISolutionBuilderObsolete {
    public IProperty`1<BuildSession> RunningSession { get; }
    public abstract virtual IProperty`1<BuildSession> get_RunningSession();
    public abstract virtual void Abort();
    public abstract virtual void BeginRun(BuildSession session);
    [NotNullAttribute]
public abstract virtual BuildSession CreateSession(IBuildSessionTarget severity, IProject[] projectsToBuild);
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.ISolutionBuilderRequest {
    public bool BuildAllProjects { get; }
    public SolutionBuilderRequestSilentMode SilentMode { get; }
    public SolutionBuilderRequestAdvancedSettings SolutionBuilderRequestAdvancedSettings { get; }
    public Lifetime Lifetime { get; }
    public IBuildSessionTarget BuildSessionTarget { get; }
    public ICollectionEvents`1<SessionProjectBuildRequest> Projects { get; }
    public IList`1<SessionProjectBuildRequest> RequestedProjects { get; }
    public IList`1<IProject> AllProjectsInSolution { get; }
    public string EventsStoragePath { get; }
    public IProperty`1<bool> Skipped { get; }
    public ISolutionBuilderRunner Runner { get; }
    public Guid RequestId { get; }
    public IProperty`1<BuildRunState> State { get; }
    public IProperty`1<bool> HasErrors { get; }
    public IProperty`1<bool> HasWarnings { get; }
    public IProperty`1<bool> HasCancelled { get; }
    public IProperty`1<bool> Suceeded { get; }
    public IProperty`1<decimal> Progress { get; }
    public bool BuildWholeSolution { get; }
    public abstract virtual bool get_BuildAllProjects();
    public abstract virtual SolutionBuilderRequestSilentMode get_SilentMode();
    public abstract virtual SolutionBuilderRequestAdvancedSettings get_SolutionBuilderRequestAdvancedSettings();
    public abstract virtual Lifetime get_Lifetime();
    public abstract virtual IBuildSessionTarget get_BuildSessionTarget();
    public abstract virtual ICollectionEvents`1<SessionProjectBuildRequest> get_Projects();
    public abstract virtual IList`1<SessionProjectBuildRequest> get_RequestedProjects();
    public abstract virtual IList`1<IProject> get_AllProjectsInSolution();
    public abstract virtual string get_EventsStoragePath();
    public abstract virtual IProperty`1<bool> get_Skipped();
    public abstract virtual ISolutionBuilderRunner get_Runner();
    public abstract virtual Guid get_RequestId();
    public abstract virtual IProperty`1<BuildRunState> get_State();
    public abstract virtual IProperty`1<bool> get_HasErrors();
    public abstract virtual IProperty`1<bool> get_HasWarnings();
    public abstract virtual IProperty`1<bool> get_HasCancelled();
    public abstract virtual IProperty`1<bool> get_Suceeded();
    public abstract virtual IProperty`1<decimal> get_Progress();
    public abstract virtual void Abort();
    public abstract virtual SessionProjectBuildRequest GetOrCreateProject(IProject project);
    public abstract virtual SessionProjectBuildRequest GetProject(IProject project);
    public abstract virtual void AddBuildEvent(BuildEventReference reference);
    public abstract virtual IEnumerable`1<BuildEventReference> GetAllBuildErrors();
    public abstract virtual bool get_BuildWholeSolution();
    public abstract virtual void AddOutputBuildEventReference(OutputKind outputKind, long offset, Nullable`1<int> projectId, BuildEventKind eventKind, int linesCount);
    public abstract virtual IProject GetProjectById(Nullable`1<int> projectId);
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.ISolutionBuilderRequestDataStorage {
    public abstract virtual void StoreDataFromNextEvent(UInt32 sessionId, UInt32 eventId, BuildRequestStoringData data);
    [CanBeNullAttribute]
public abstract virtual BuildRequestStoringData GetDataForEvent(UInt32 sessionId, UInt32 eventId);
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.ISolutionBuilderRunner {
    public IProperty`1<bool> IsAvailable { get; }
    public double Priority { get; }
    public bool IsIncremental { get; }
    public IProperty`1<bool> IsReady { get; }
    public bool CanExecuteCustomTarget { get; }
    public abstract virtual IProperty`1<bool> get_IsAvailable();
    public abstract virtual bool IsDefault();
    public abstract virtual double get_Priority();
    public abstract virtual bool get_IsIncremental();
    public abstract virtual IProperty`1<bool> get_IsReady();
    public abstract virtual void ExecuteBuildRequest(SolutionBuilderRequest request);
    public abstract virtual void Abort(SolutionBuilderRequest request);
    public abstract virtual bool get_CanExecuteCustomTarget();
    public abstract virtual int GetSkippedProjectsCount(SolutionBuilderRequest request);
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.ISolutionConfigurationChangeProvider {
    [NotNullAttribute]
public ISimpleSignal ConfigurationChanged { get; }
    public abstract virtual ISimpleSignal get_ConfigurationChanged();
}
public enum JetBrains.ProjectModel.Features.SolutionBuilders.LoggerVerbosityLevel : Enum {
    public int value__;
    public static LoggerVerbosityLevel Quiet;
    public static LoggerVerbosityLevel Minimal;
    public static LoggerVerbosityLevel Normal;
    public static LoggerVerbosityLevel Detailed;
    public static LoggerVerbosityLevel Diagnostic;
}
[SolutionComponentAttribute("16")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.ProjectCollectionHolder : object {
    private ISolution mySolution;
    public ProjectCollectionHolder(ISolution solution);
    public sealed virtual ICollection`1<IProject> GetAllProjects();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Actions.IBuilderModeProvider {
    public int Priority { get; }
    [NotNullAttribute]
public string Title { get; }
    public UseMsbuildSolutionBuilderFlag Mode { get; }
    public abstract virtual int get_Priority();
    public abstract virtual string get_Title();
    public abstract virtual UseMsbuildSolutionBuilderFlag get_Mode();
    [NotNullAttribute]
public abstract virtual IActionDefWithId GetAction();
}
[ActionGroupAttribute("SolutionBuilderDashboardActions.ActionBar", "0", "10")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Actions.SolutionBuilderDashboardActions : object {
    public SolutionBuilderDashboardActions(SolutionBuilderDashboardBuildActions solutionBuilderDashboardBuildActions, Separator sep1, SolutionBuilderRunConfigActions solutionBuilderRunConfigActions, Separator sep2, SolutionBuilderOtherToolsActions solutionBuilderOtherToolsActions, Separator sep3, SolutionBuilderSwitchBuildModeActions switchBuilder);
}
[ActionGroupAttribute("SolutionBuilderDashboardActions.BuildActions", "0", "16")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Actions.SolutionBuilderDashboardBuildActions : object {
}
[ActionGroupAttribute("SolutionBuilderDashboardActions.OtherTools", "0", "16")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Actions.SolutionBuilderOtherToolsActions : object {
}
[ActionAttribute("JetBrains.ProjectModel.Resources.Strings", "SolutionBuilderDashboardActionsRestoreNugetActionText")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Actions.SolutionBuilderRestoreNugetActions : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private bool RestorerExists(IDataContext context);
}
[ActionGroupAttribute("SolutionBuilderDashboardActions.RunConfigActions", "0", "16")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Actions.SolutionBuilderRunConfigActions : object {
}
[ActionGroupAttribute("SolutionBuilderDashboardActions.SwitchBuildModeActions", "0", "16")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Actions.SolutionBuilderSwitchBuildModeActions : object {
}
[SettingsKeyAttribute("JetBrains.Application.UI.Settings.LayoutSettings", "JetBrains.ProjectModel.Resources.Strings", "BuildResultsBrowserSettingsSettingDescription")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.BuildResultsBrowserSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "EnableGroupingSolutionBuilderResultsByNamespacesTypesAndMembersSettingDescription")]
public bool GroupBuildResultsByMembers;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "MRUGroupingOfBuildResultsInBuildResultsViewSettingDescription")]
public int MruFindResultsGroupingIndex;
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.IIncrementalBuildTrigger {
    public abstract virtual void TriggerBuild();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.IReSharperBuildSettingsManager {
    [NotNullAttribute]
public IProperty`1<bool> ReSharperBuildIsUsed { get; }
    public abstract virtual IProperty`1<bool> get_ReSharperBuildIsUsed();
}
public class JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Model.ProjectBuildDependencies : object {
    [CompilerGeneratedAttribute]
private ISet`1<string> <Dependencies>k__BackingField;
    public ISet`1<string> Dependencies { get; }
    public ProjectBuildDependencies(ISet`1<string> dependencies);
    [CompilerGeneratedAttribute]
public ISet`1<string> get_Dependencies();
}
public class JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Model.ProjectCollectionActiveConfiguration : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<ProjectWithData, ProjectConfigurationAndPlatform> <Configurations>k__BackingField;
    public Dictionary`2<ProjectWithData, ProjectConfigurationAndPlatform> Configurations { get; }
    public ProjectCollectionActiveConfiguration(Dictionary`2<ProjectWithData, ProjectConfigurationAndPlatform> configurations);
    [CompilerGeneratedAttribute]
public Dictionary`2<ProjectWithData, ProjectConfigurationAndPlatform> get_Configurations();
    public virtual string ToString();
    public string GetContent();
    public ProjectConfigurationAndPlatform TryGetConfig(string projectFileLocation);
}
public class JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Model.ProjectWithData : object {
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ProjectGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectFileLocation>k__BackingField;
    [CanBeNullAttribute]
public IProject Project { get; }
    public Guid ProjectGuid { get; }
    [NotNullAttribute]
public string ProjectFileLocation { get; }
    public ProjectWithData(IProject project);
    public ProjectWithData(Guid projectGuid, string projectFileLocation);
    [CompilerGeneratedAttribute]
public IProject get_Project();
    [CompilerGeneratedAttribute]
public Guid get_ProjectGuid();
    [CompilerGeneratedAttribute]
public string get_ProjectFileLocation();
    protected bool Equals(ProjectWithData other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Model.SolutionBuildDependencies : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, ProjectBuildDependencies> <ProjectsDependencies>k__BackingField;
    public IDictionary`2<string, ProjectBuildDependencies> ProjectsDependencies { get; }
    public SolutionBuildDependencies(IDictionary`2<string, ProjectBuildDependencies> projectsDependencies);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, ProjectBuildDependencies> get_ProjectsDependencies();
    public virtual string ToString();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.ReSharperBuildSettingsManager : object {
    private IProperty`1<bool> myReSharperBuildIsUsed;
    public IProperty`1<bool> ReSharperBuildIsUsed { get; }
    public ReSharperBuildSettingsManager(ISettingsStore settingsStore, Lifetime lifetime, ISolution solution);
    protected virtual IProperty`1<UseMsbuildSolutionBuilderFlag> GetSetting(IContextBoundSettingsStoreLive context, Lifetime lifetime);
    public virtual IProperty`1<bool> get_ReSharperBuildIsUsed();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Execution.IBuildRunWrapper {
    public abstract virtual void BeforeBuild();
    public abstract virtual void AfterBuild();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Execution.IIncrementalRunnerProjectChecker {
    public abstract virtual bool IsApplicable(IProject project);
    public abstract virtual bool CanBuild(IProject project);
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Execution.INugetRestorer {
    public IProperty`1<bool> Restoring { get; }
    public bool CanRestore { get; }
    public abstract virtual IProperty`1<bool> get_Restoring();
    public abstract virtual bool get_CanRestore();
    public abstract virtual void BeginRestore(Lifetime lifetime, Action onRestore, bool isSilent);
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Execution.INugetRestorerFactory {
    [CanBeNullAttribute]
public abstract virtual INugetRestorer GetRestorer();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Execution.ISolutionApplicabilityChecker {
    public abstract virtual bool CanCheck();
    [NotNullAttribute]
public abstract virtual SolutionApplicabilityState Check();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Execution.ISolutionApplicabilityCheckingManager {
    [NotNullAttribute]
public IProperty`1<SolutionApplicabilityState> State { get; }
    [NotNullAttribute]
public IProperty`1<bool> Checked { get; }
    public abstract virtual IProperty`1<SolutionApplicabilityState> get_State();
    public abstract virtual IProperty`1<bool> get_Checked();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Execution.ISolutionConfigurationAccessibilityChecker {
    [NotNullAttribute]
public IProperty`1<bool> AccessGranted { get; }
    public abstract virtual IProperty`1<bool> get_AccessGranted();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Execution.ISolutionConfigurationHolder {
    public abstract virtual Task`1<bool> Recalculate();
    [NotNullAttribute]
public abstract virtual ProjectCollectionActiveConfiguration GetProjectsConfiguration(IEnumerable`1<ProjectWithData> projects);
    [NotNullAttribute]
public abstract virtual ISolutionConfigurationAndPlatform GetSolutionActiveConfiguration();
    [NotNullAttribute]
public abstract virtual SolutionBuildDependencies GetSolutionBuildDependencies();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Execution.ISolutionFileChangingTracker {
    [NotNullAttribute]
public ISimpleSignal SolutionFileChanged { get; }
    public abstract virtual ISimpleSignal get_SolutionFileChanged();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Execution.ISolutionSaver {
    public abstract virtual Task Save(Lifetime lifetime);
}
[SolutionComponentAttribute("0")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Execution.NuGetRestorerFactory : object {
    [CanBeNullAttribute]
private INugetRestorer myRestorer;
    public NuGetRestorerFactory(INugetRestorer restorer);
    public virtual INugetRestorer GetRestorer();
}
[SolutionInstanceComponentAttribute("10")]
internal class JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Execution.SolutionApplicabilityCheckingManager : object {
    private Lifetime myLifetime;
    [NotNullAttribute]
private ILogger myLogger;
    private IShellLocks myLocks;
    private IEnumerable`1<ISolutionApplicabilityChecker> myCheckers;
    [NotNullAttribute]
private GroupingEvent myRescanEvent;
    [CompilerGeneratedAttribute]
private IProperty`1<SolutionApplicabilityState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Checked>k__BackingField;
    public IProperty`1<SolutionApplicabilityState> State { get; }
    public IProperty`1<bool> Checked { get; }
    public SolutionApplicabilityCheckingManager(Lifetime lifetime, ILogger logger, IShellLocks locks, SolutionBuilderStartAnalyzeChecker solutionBuilderStartAnalyzeChecker, IEnumerable`1<ISolutionApplicabilityChecker> checkers);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<SolutionApplicabilityState> get_State();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_Checked();
    private void Check();
    private void CheckWithReadLock();
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0();
}
public class JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Execution.SolutionApplicabilityState : object {
    [CompilerGeneratedAttribute]
private bool <IsApplicable>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Comment>k__BackingField;
    public bool IsApplicable { get; private set; }
    [CanBeNullAttribute]
public RichText Comment { get; private set; }
    private SolutionApplicabilityState(bool isApplicable, string comment);
    [CompilerGeneratedAttribute]
public bool get_IsApplicable();
    [CompilerGeneratedAttribute]
private void set_IsApplicable(bool value);
    [CompilerGeneratedAttribute]
public RichText get_Comment();
    [CompilerGeneratedAttribute]
private void set_Comment(RichText value);
    [NotNullAttribute]
public static SolutionApplicabilityState GetState(RichText comment);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Execution.SolutionApplicabilityStateUtil : object {
    [ExtensionAttribute]
public static SolutionApplicabilityState Merge(SolutionApplicabilityState a, SolutionApplicabilityState b);
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Execution.SolutionBuilderStartAnalyzeChecker : object {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <CanTryCheck>k__BackingField;
    [NotNullAttribute]
public IProperty`1<bool> CanTryCheck { get; }
    public SolutionBuilderStartAnalyzeChecker(Lifetime lifetime, ILogger logger, ISolution solution, ISettingsStore store, ISolutionLoadTasksScheduler solutionLoadTasksScheduler);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_CanTryCheck();
}
[SolutionInstanceComponentAttribute("16")]
internal class JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Execution.SolutionFileExistenceApplicabilityChecker : object {
    [NotNullAttribute]
private ISolution mySolution;
    public SolutionFileExistenceApplicabilityChecker(ISolution solution);
    public sealed virtual bool CanCheck();
    public sealed virtual SolutionApplicabilityState Check();
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Execution.Stubs.BuildRunWrapperStub : object {
    public virtual void BeforeBuild();
    public virtual void AfterBuild();
}
[SolutionInstanceComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Execution.Stubs.SolutionConfigurationAccessibilityCheckerStub : object {
    public IProperty`1<bool> AccessGranted { get; }
    public virtual IProperty`1<bool> get_AccessGranted();
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Execution.Stubs.SolutionConfigurationHolderStub : object {
    public virtual Task`1<bool> Recalculate();
    public virtual ProjectCollectionActiveConfiguration GetProjectsConfiguration(IEnumerable`1<ProjectWithData> projects);
    public virtual ISolutionConfigurationAndPlatform GetSolutionActiveConfiguration();
    public virtual SolutionBuildDependencies GetSolutionBuildDependencies();
}
[SolutionComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Execution.Stubs.SolutionFileChangingTrackerStub : object {
    public ISimpleSignal SolutionFileChanged { get; }
    public virtual ISimpleSignal get_SolutionFileChanged();
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Execution.Stubs.SolutionSaverStub : object {
    public virtual Task Save(Lifetime lifetime);
}
[ShellComponentAttribute("16")]
internal class JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Interaction.DefaultLogFolderProvider : object {
    public virtual FileSystemPath GetLogFolder();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Interaction.IBuildAdditionalPropertiesProvider {
    [NotNullAttribute]
public abstract virtual IDictionary`2<string, string> GetProperties();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Interaction.IBuildCommandInvoker {
    public abstract virtual void InvokeBuildCommand();
    public abstract virtual void InvokeCancelCommand();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Interaction.IBuildOnRunModeProvider {
    public abstract virtual bool ShouldBuildStartupsOnlyOnRun();
    public abstract virtual string GetStartupProjectPath();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Interaction.IDebugModeChecker {
    public abstract virtual bool IsInDebugMode();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Interaction.IDefaultBuildingStateChecker {
    public abstract virtual bool CanCheckDefaultBuildingState();
    public abstract virtual bool DefaultBuildIsRunning();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Interaction.IExecutionProviderFactory {
    public abstract virtual IExecutionProvider GetRunExecutionProvider();
    public abstract virtual IExecutionProvider GetDebugExecutionProvider();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Interaction.ILogFolderProvider {
    public abstract virtual FileSystemPath GetLogFolder();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Interaction.ISolutionBuilderUnexpectedBehaviourHandler {
    public abstract virtual void Handle();
}
[SolutionComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Interaction.Stubs.DebugModeCheckerStub : object {
    public virtual bool IsInDebugMode();
}
[SolutionComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Interaction.Stubs.DefaultBuildingStateCheckerStub : object {
    public virtual bool CanCheckDefaultBuildingState();
    public virtual bool DefaultBuildIsRunning();
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Interaction.Stubs.ExecutionProviderFactoryStub : object {
    public virtual IExecutionProvider GetRunExecutionProvider();
    public virtual IExecutionProvider GetDebugExecutionProvider();
}
public enum JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.ShowBuildResultsMode : Enum {
    public int value__;
    public static ShowBuildResultsMode Always;
    public static ShowBuildResultsMode ForWarningsOrErrors;
    public static ShowBuildResultsMode ForErrors;
    public static ShowBuildResultsMode Never;
}
[SettingsKeyAttribute("JetBrains.ProjectModel.Settings.Schema.BuildSettings", "JetBrains.ProjectModel.Resources.Strings", "BuildWithSolBuilderDuoSettingDescription")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.SolBuilderDuoSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "TrackPublicAPIChangesAndOnlyRebuildDependenciesWhenPublicAPIIsChangedNotRecommendedForSolutionsThatIncludeNonMSBuildProjectsOrProjectsWithCustomBuildStepsSettingDescription")]
public UseMsbuildSolutionBuilderFlag UseMsbuildSolutionBuilder;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "WhetherToAvoidRebuildingUnchangedProjectsWhoseReferencesHaveOnlyHadInsignificantChangesSinceLastBuildSettingDescription")]
public bool UseApiSurfaceHeuristics;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "TheEventsAllowedIntoTheLoggerMustBeAtLeastThisImportantAllowingThroughLowerImportanceEventsSlowDownTheBuildProcessSettingDescription")]
public SolBuildEventImportance RequiredBuildEventImportance;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "PaintOutputLogSettingDescription")]
public bool PaintOutput;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "RunBuildAfterSolutionIsLoadedSettingDescription")]
public bool RunBuildOnSolutionLoaded;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "UseAllColorsForPaintingOutputMessagesOnlyForTestingSettingDescription")]
public bool RainbowColorsForOutput;
    [SettingsIndexedEntryAttribute("JetBrains.ProjectModel.Resources.Strings", "CustomGlobalPropertiesSettingDescription")]
public IIndexedEntry`2<string, string> CustomGlobalProperties;
}
[SettingsKeyAttribute("JetBrains.Application.UI.Settings.LayoutSettings", "JetBrains.ProjectModel.Resources.Strings", "PresentationAspectsOfTheSolutionBuilderSettingDescription")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.SolBuilderDuoViewSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "ShowBuildProgressInStatusBarWhenABuildIsRunningSettingDescription")]
public bool ShowBuildProgressInStatusBar;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "ShowBuildProgressInWindowsTaskBarWhenABuildIsRunningSettingDescription")]
public bool ShowBuildProgressInTaskBar;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "WhenBuildStartsOpenAToolWindowWithGraphicalPresentationOfTheBuildProgressSettingDescription")]
public bool ShowBuildProgressInToolWindow;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "WhenBuildStartsOpenAToolWindowWithGraphicalPresentationOfTheBuildDisableSmartnessProgressSettingDescription")]
public bool ShowBuildProgressInToolWindowDumb;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "AfterBuildFinishesSwitchToTreeViewModeIfAnyImportantEventsWereReportedDuringTheBuildSettingDescription")]
public bool SwitchToTreeViewForEvents;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "ShowFullPathInConsoleSettingDescription")]
public bool ShowFullPathsInConsole;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "ShowBuildResultsAfterBuildCompletedSettingDescription")]
public ShowBuildResultsMode ShowBuildResultsMode;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "UseNewPresentationBuildResultsTreeWithProjectsBuildStateSettingDescription")]
public bool ShowNewPresentation;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "ShowVerticalProgressBarWhenBuildStartedSettingDescription")]
public bool ShowVerticalProgressBar;
}
public enum JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.UseMsbuildSolutionBuilderFlag : Enum {
    public int value__;
    public static UseMsbuildSolutionBuilderFlag No;
    public static UseMsbuildSolutionBuilderFlag NewVersion;
}
[ShellComponentAttribute("10")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.ReasonsToDelayBuildStart : object {
    [CompilerGeneratedAttribute]
private Reasons`1<string> <Reasons>k__BackingField;
    public Reasons`1<string> Reasons { get; }
    public ReasonsToDelayBuildStart(Lifetime lifetime, ILogger logger);
    [CompilerGeneratedAttribute]
public Reasons`1<string> get_Reasons();
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.Features.SolutionBuilders.RebuildTarget : DefaultTarget {
    public static IBuildSessionTarget Instance;
    private static RebuildTarget();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Features.SolutionBuilders.SessionCompletionStateEx : object {
    [ExtensionAttribute]
public static List`1<IProject> BuiltProjects(SolutionBuilderRequest state, ISolution solution, Func`2<SessionProjectBuildRequest, bool> predicate);
}
public class JetBrains.ProjectModel.Features.SolutionBuilders.SessionProjectBuildRequest : BuildRequestBase {
    [CompilerGeneratedAttribute]
private Guid <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <ProjectFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private IBuildSessionLoader <SessionLoader>k__BackingField;
    public Guid Guid { get; }
    public VirtualFileSystemPath ProjectFilePath { get; }
    public IProject Project { get; }
    public IBuildSessionLoader SessionLoader { get; }
    public SessionProjectBuildRequest(Lifetime lifetime, IProject project, IBuildSessionLoader sessionLoader);
    [CompilerGeneratedAttribute]
public Guid get_Guid();
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_ProjectFilePath();
    [CompilerGeneratedAttribute]
public IProject get_Project();
    [CompilerGeneratedAttribute]
public IBuildSessionLoader get_SessionLoader();
}
public class JetBrains.ProjectModel.Features.SolutionBuilders.SolBuildEvent : object {
    private DateTime myMruTimeStamp;
    public string HelpKeyword;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    public SolBuildEventImportance Importance;
    public SolBuildEventKind Kind;
    private IBuildEventMessageHolder myBuildEventMessageHolder;
    [CompilerGeneratedAttribute]
private string <SenderName>k__BackingField;
    public DateTime TimeStamp;
    [CanBeNullAttribute]
public string TargetFramework { get; protected set; }
    public string Message { get; }
    public string SenderName { get; }
    public SolBuildEvent(SolBuildEventKind kind, IBuildEventMessageHolder buildEventMessageHolder, string senderName, Nullable`1<DateTime> timestamp, string helpKeyword, SolBuildEventImportance importance);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
protected void set_TargetFramework(string value);
    public string get_Message();
    [CompilerGeneratedAttribute]
public string get_SenderName();
    private DateTime GetCurrentUniqueTimestamp();
    public virtual string ToString();
}
public enum JetBrains.ProjectModel.Features.SolutionBuilders.SolBuildEventImportance : Enum {
    public int value__;
    public static SolBuildEventImportance High;
    public static SolBuildEventImportance Normal;
    public static SolBuildEventImportance Low;
}
public enum JetBrains.ProjectModel.Features.SolutionBuilders.SolBuildEventKind : Enum {
    public int value__;
    public static SolBuildEventKind Output;
    public static SolBuildEventKind Service;
    public static SolBuildEventKind Console;
    public static SolBuildEventKind Warning;
    public static SolBuildEventKind Error;
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.SolutionBuilder : object {
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private SequentialLifetimes myRunnerLifetime;
    [NotNullAttribute]
private BuildRequestFactory myRequestFactory;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private IShellLocks myThreading;
    [NotNullAttribute]
private List`1<ISolutionBuilderRunner> myAvailableBuilderRunners;
    [NotNullAttribute]
private IProperty`1<ISolutionBuilderRunner> myBuildRunner;
    [NotNullAttribute]
private ISolutionSaver mySolutionSaver;
    [NotNullAttribute]
private ReasonsToDelayBuildStart myReasonsToDelayBuildStart;
    [NotNullAttribute]
private ViewableCollection`1<ISolutionBuilderRunner> myCurrentRunners;
    [CanBeNullAttribute]
private SolutionBuilderRequest myPreparingRequest;
    [CanBeNullAttribute]
private INugetRestorer myRestorer;
    [CompilerGeneratedAttribute]
private IProperty`1<SolutionBuilderRequest> <RunningRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsReady>k__BackingField;
    [NotNullAttribute]
public IProperty`1<SolutionBuilderRequest> RunningRequest { get; }
    public IProperty`1<bool> IsReady { get; }
    public bool IsIncremental { get; }
    private IProperty`1<ISolutionBuilderRunner> JetBrains.ProjectModel.Features.SolutionBuilders.ViewModel.ICurrentBuildRunnerHolder.CurrentRunner { get; }
    private SolutionBuilderRequest JetBrains.ProjectModel.Features.SolutionBuilders.IPreparingRequestHolder.PreparingRequest { get; }
    public SolutionBuilder(Lifetime lifetime, ILogger logger, IEnumerable`1<ISolutionBuilderRunner> runners, BuildRequestFactory requestFactory, ISolution solution, IShellLocks threading, ISolutionSaver solutionSaver, INugetRestorerFactory nugetRestorerFactory, ReasonsToDelayBuildStart reasonsToDelayBuildStart);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<SolutionBuilderRequest> get_RunningRequest();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsReady();
    public sealed virtual bool get_IsIncremental();
    private sealed virtual override IProperty`1<ISolutionBuilderRunner> JetBrains.ProjectModel.Features.SolutionBuilders.ViewModel.ICurrentBuildRunnerHolder.get_CurrentRunner();
    private sealed virtual override SolutionBuilderRequest JetBrains.ProjectModel.Features.SolutionBuilders.IPreparingRequestHolder.get_PreparingRequest();
    public sealed virtual void SetupBuildRequestCreatedExternal(SolutionBuilderRequest builderRequest);
    public virtual void ExecuteBuildRequest(SolutionBuilderRequest builderRequest);
    public sealed virtual void Abort();
    public sealed virtual bool IsDefault();
    public sealed virtual SolutionBuilderRequest CreateBuildRequest(IBuildSessionTarget target, IProject[] projectsToBuild, SolutionBuilderRequestSilentMode silentMode, SolutionBuilderRequestAdvancedSettings solutionBuilderRequestAdvancedSettings);
    private void ConsiderAnotherRunner(ISolutionBuilderRunner runner, Lifetime isAvailableLifetime);
    private void UpdateState();
    private ISolutionBuilderRunner GetRunner(IBuildSessionTarget target);
    [CompilerGeneratedAttribute]
private bool <UpdateState>b__32_1(bool isReady);
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ProjectModel.Features.SolutionBuilders.SolutionBuilderEventNavigationService : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<ISolutionBuilderEventNavigationProvider> <providers>P;
    public SolutionBuilderEventNavigationService(IEnumerable`1<ISolutionBuilderEventNavigationProvider> providers);
    public sealed virtual bool Navigate(SolutionBuilderRequest request, BuildEventReference buildEventReference);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Features.SolutionBuilders.SolutionBuilderEx : object {
    [NotNullAttribute]
private static ILogger ourLogger;
    private static SolutionBuilderEx();
    [ExtensionAttribute]
public static void ContinueWith(SolutionBuilderRequest request, Lifetime lifetime, Action`1<SolutionBuilderRequest> withRequest);
    [ExtensionAttribute]
public static SolutionBuilderRequest GetOrCreateBuildRequestAndAskIfNotReady(ISolutionBuilder solutionBuilder, IBuildSessionTarget target, IProject[] projects, SolutionBuilderRequestSilentMode silentMode, string questionOnNotReadyState, SolutionBuilderRequestAdvancedSettings requestAdvancedSettings);
    [ExtensionAttribute]
public static SolutionBuilderRequest GetOrCreateBuildRequest(ISolutionBuilder solutionBuilder, IBuildSessionTarget target, IProject[] projects, SolutionBuilderRequestSilentMode silentMode, Action`1<SolutionBuilderRequest> beforeRun, SolutionBuilderRequestAdvancedSettings solutionBuilderRequestAdvancedSettings);
    [ExtensionAttribute]
public static bool IsRunning(ISolutionBuilder solutionBuilder);
    [ExtensionAttribute]
public static SolutionBuilderRequest TryGetCurrentRunningRequest(ISolutionBuilder solutionBuilder);
    [ExtensionAttribute]
public static void AssertNotRunning(ISolutionBuilder solutionBuilder);
    [ExtensionAttribute]
public static void Run(ISolutionBuilder solutionBuilder, Lifetime lifetime, IBuildSessionTarget sessionTarget, IEnumerable`1<IProject> selectedProjects, Action`1<SolutionBuilderRequest> onBuildSucceeded, SolutionBuilderRequestSilentMode silentMode);
}
public class JetBrains.ProjectModel.Features.SolutionBuilders.SolutionBuilderRequest : BuildRequestBase {
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private ISolutionBuilderRequestDataStorage mySolutionBuilderRequestDataStorage;
    [NotNullAttribute]
private Dictionary`2<IProject, SessionProjectBuildRequest> myProjectToSessionProject;
    [NotNullAttribute]
private SolutionBuilderRequestDataExtractor mySolutionBuilderRequestDataExtractor;
    private int mySkippedProjects;
    private Dictionary`2<int, IProject> myProjects;
    [CompilerGeneratedAttribute]
private InFileBuildSessionLoader <SessionLoader>k__BackingField;
    [CompilerGeneratedAttribute]
private SolutionBuilderRequestSilentMode <SilentMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BuildAllProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<OutputItemBase> <OutputItem>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<FileSystemPath> <LogFile>k__BackingField;
    [CompilerGeneratedAttribute]
private IBuildSessionTarget <BuildSessionTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollectionEvents`1<SessionProjectBuildRequest> <Projects>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SessionProjectBuildRequest> <RequestedProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IProject> <AllProjectsInSolution>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventsStoragePath>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Skipped>k__BackingField;
    [CompilerGeneratedAttribute]
private ISolutionBuilderRunner <Runner>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<decimal> <Progress>k__BackingField;
    [CompilerGeneratedAttribute]
private SolutionBuilderRequestAdvancedSettings <SolutionBuilderRequestAdvancedSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BuildWholeSolution>k__BackingField;
    public InFileBuildSessionLoader SessionLoader { get; }
    public SolutionBuilderRequestSilentMode SilentMode { get; }
    public Guid RequestId { get; }
    public UInt32 SessionId { get; }
    public bool BuildAllProjects { get; }
    [NotNullAttribute]
public Lifetime Lifetime { get; }
    [NotNullAttribute]
public ISignal`1<OutputItemBase> OutputItem { get; }
    [NotNullAttribute]
public IProperty`1<FileSystemPath> LogFile { get; }
    [NotNullAttribute]
public IBuildSessionTarget BuildSessionTarget { get; }
    [NotNullAttribute]
public ICollectionEvents`1<SessionProjectBuildRequest> Projects { get; }
    [ItemNotNullAttribute]
[NotNullAttribute]
public IList`1<SessionProjectBuildRequest> RequestedProjects { get; }
    [NotNullAttribute]
public IList`1<IProject> AllProjectsInSolution { get; }
    public string EventsStoragePath { get; }
    [NotNullAttribute]
public IProperty`1<bool> Skipped { get; }
    [NotNullAttribute]
public ISolutionBuilderRunner Runner { get; }
    [NotNullAttribute]
public IProperty`1<decimal> Progress { get; }
    [CanBeNullAttribute]
public SolutionBuilderRequestAdvancedSettings SolutionBuilderRequestAdvancedSettings { get; }
    public bool BuildWholeSolution { get; }
    internal SolutionBuilderRequest(Lifetime lifetime, UInt32 sessionId, IBuildSessionTarget target, ISolutionBuilderRunner runner, IProject[] requestedProjectsToBuild, IProject[] projectsToBuild, IEnumerable`1<IProject> allProjectsInSolution, bool buildAllProjects, SolutionBuilderRequestSilentMode silentMode, SolutionBuilderRequestAdvancedSettings solutionBuilderRequestAdvancedSettings, ISolutionBuilderRequestDataStorage solutionBuilderRequestDataStorage, bool buildWholeSolution, string eventsStoragePath);
    [CompilerGeneratedAttribute]
public InFileBuildSessionLoader get_SessionLoader();
    [CompilerGeneratedAttribute]
public sealed virtual SolutionBuilderRequestSilentMode get_SilentMode();
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_RequestId();
    [CompilerGeneratedAttribute]
public UInt32 get_SessionId();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_BuildAllProjects();
    [CompilerGeneratedAttribute]
public sealed virtual Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public ISignal`1<OutputItemBase> get_OutputItem();
    [CompilerGeneratedAttribute]
public IProperty`1<FileSystemPath> get_LogFile();
    [CompilerGeneratedAttribute]
public sealed virtual IBuildSessionTarget get_BuildSessionTarget();
    [CompilerGeneratedAttribute]
public sealed virtual ICollectionEvents`1<SessionProjectBuildRequest> get_Projects();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<SessionProjectBuildRequest> get_RequestedProjects();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IProject> get_AllProjectsInSolution();
    [CompilerGeneratedAttribute]
public sealed virtual string get_EventsStoragePath();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_Skipped();
    [CompilerGeneratedAttribute]
public sealed virtual ISolutionBuilderRunner get_Runner();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<decimal> get_Progress();
    [CompilerGeneratedAttribute]
public sealed virtual SolutionBuilderRequestAdvancedSettings get_SolutionBuilderRequestAdvancedSettings();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_BuildWholeSolution();
    public sealed virtual void AddOutputBuildEventReference(OutputKind outputKind, long offset, Nullable`1<int> projectId, BuildEventKind eventKind, int linesCount);
    public sealed virtual void AddOutputBuildMessage(OutputKind outputKind, string message, Nullable`1<int> projectId);
    public sealed virtual void Abort();
    [NotNullAttribute]
public sealed virtual SessionProjectBuildRequest GetOrCreateProject(IProject project);
    public sealed virtual SessionProjectBuildRequest GetProject(IProject project);
    public void AddBuildEventReference(BuildEventKind kind, long offset, Nullable`1<int> projectId, string targetFramework, SessionProjectBuildRequest sessionProjectBuildRequest);
    public void AddBuildEvent(BuildEventType buildEventType, string message, IProject project, string targetFramework, string file, string subcategory, int lineNumber, int endLineNumber, int columnNumber, int endColumnNumber, string code, SessionProjectBuildRequest sessionProjectBuildRequest);
    public sealed virtual IEnumerable`1<BuildEventReference> GetAllBuildErrors();
    public virtual IEnumerable`1<BuildEventReference> GetAllImportantEvents();
    public virtual string ToString();
    private void RecalculateProgress(bool shouldCalculateSkippedProjects);
    private int GetSkippedProjectsCount();
    [NotNullAttribute]
private SessionProjectBuildRequest NewSessionProject(Lifetime lifetime, IProject project);
    public sealed virtual void RegisterProject(int projectId, IProject project);
    public sealed virtual IProject GetProjectById(Nullable`1<int> projectId);
    [CanBeNullAttribute]
public IProject IdToProject(Nullable`1<int> projectId);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_1();
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_3(Lifetime lt);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_4(Lifetime lt, SessionProjectBuildRequest projRequest);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_6(PropertyChangedEventArgs`1<BuildRunState> stateArgs);
}
public class JetBrains.ProjectModel.Features.SolutionBuilders.SolutionBuilderRequestAdvancedSettings : object {
    [CompilerGeneratedAttribute]
private Version2 <MsbuildVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LogToOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<GlobalProperty> <GlobalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DiagnosticMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreProjectsWhichShouldNotBeBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private LoggerVerbosityLevel <VerbosityLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRestoreRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AlwaysHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ActivateBuildResultsWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WithoutDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DumbOpeningIsApplicable>k__BackingField;
    [CanBeNullAttribute]
public Version2 MsbuildVersion { get; }
    public bool LogToOutput { get; }
    [NotNullAttribute]
public IEnumerable`1<GlobalProperty> GlobalProperties { get; }
    public bool DiagnosticMode { get; }
    public bool IgnoreProjectsWhichShouldNotBeBuild { get; }
    public LoggerVerbosityLevel VerbosityLevel { get; }
    public bool IsRestoreRequest { get; }
    public bool AlwaysHidden { get; }
    public bool ActivateBuildResultsWindow { get; }
    public bool WithoutDependencies { get; }
    public bool DumbOpeningIsApplicable { get; }
    public SolutionBuilderRequestAdvancedSettings(Version2 msbuildVersion, bool logToOutput, bool diagnosticMode, IEnumerable`1<GlobalProperty> globalProperties, bool ignoreProjectsWhichShouldNotBeBuild, LoggerVerbosityLevel verbosityLevel, bool isRestoreRequest, bool alwaysHidden, bool activateBuildResultsWindow, bool withoutDependencies, bool dumbOpeningIsApplicable);
    [CompilerGeneratedAttribute]
public Version2 get_MsbuildVersion();
    [CompilerGeneratedAttribute]
public bool get_LogToOutput();
    [CompilerGeneratedAttribute]
public IEnumerable`1<GlobalProperty> get_GlobalProperties();
    [CompilerGeneratedAttribute]
public bool get_DiagnosticMode();
    [CompilerGeneratedAttribute]
public bool get_IgnoreProjectsWhichShouldNotBeBuild();
    [CompilerGeneratedAttribute]
public LoggerVerbosityLevel get_VerbosityLevel();
    [CompilerGeneratedAttribute]
public bool get_IsRestoreRequest();
    [CompilerGeneratedAttribute]
public bool get_AlwaysHidden();
    [CompilerGeneratedAttribute]
public bool get_ActivateBuildResultsWindow();
    [CompilerGeneratedAttribute]
public bool get_WithoutDependencies();
    [CompilerGeneratedAttribute]
public bool get_DumbOpeningIsApplicable();
}
internal class JetBrains.ProjectModel.Features.SolutionBuilders.SolutionBuilderRequestDataExtractor : object {
    private UInt32 mySessionId;
    private ISolutionBuilderRequestDataStorage myStorage;
    public SolutionBuilderRequestDataExtractor(UInt32 sessionId, ISolutionBuilderRequestDataStorage storage);
    [CanBeNullAttribute]
public BuildRequestStoringData GetDataForEvent(UInt32 eventId);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.SolutionBuilderRequestDataStorage : object {
    private OptimizedPersistentSortedMap`2<BuildRequestStoringKey, BuildRequestStoringData> myRequestMessagesMap;
    private Dictionary`2<UInt32, List`1<Lifetime>> mySubscribedLifetimes;
    private object mySubscibtionSyncObject;
    public SolutionBuilderRequestDataStorage(Lifetime lifetime, ISolutionCaches caches);
    public sealed virtual void Subscribe(UInt32 sessionId, Lifetime lifetime);
    public sealed virtual void StoreDataFromNextEvent(UInt32 sessionId, UInt32 eventId, BuildRequestStoringData data);
    public sealed virtual BuildRequestStoringData GetDataForEvent(UInt32 sessionId, UInt32 eventId);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Features.SolutionBuilders.SolutionBuilderRequestEx : object {
    [ExtensionAttribute]
public static void AddError(ISolutionBuilderRequest request, string message);
    [ExtensionAttribute]
public static void AddWarning(ISolutionBuilderRequest request, string message);
}
public enum JetBrains.ProjectModel.Features.SolutionBuilders.SolutionBuilderRequestSilentMode : Enum {
    public int value__;
    public static SolutionBuilderRequestSilentMode Default;
    public static SolutionBuilderRequestSilentMode ShowBuildResultsOnlyForErrors;
    public static SolutionBuilderRequestSilentMode Silent;
    public static SolutionBuilderRequestSilentMode Hidden;
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.SolutionBuilderStatusBarMessanger : object {
    private IStatusBar myStatusBar;
    public SolutionBuilderStatusBarMessanger(IStatusBar statusBar, IShellLocks locks, ISolutionBuilder solutionBuilder, Lifetime lifetime);
    private void SetText(string state);
}
[SolutionComponentAttribute("44")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.Statistics.SolutionBuilderResultReporter : object {
    private ILogger myLogger;
    private ISolution mySolution;
    private ISolutionToolset mySolutionToolset;
    private SolutionBuilderUsagesCollector myUsagesCollector;
    public SolutionBuilderResultReporter(Lifetime lifetime, ILogger logger, ISolution solution, ISolutionToolset solutionToolset, ISolutionBuilder solutionBuilder, SolutionBuilderUsagesCollector usagesCollector);
    private void HandleNewRequest(SolutionBuilderRequest request);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0(Lifetime _, SolutionBuilderRequest request);
}
[CounterUsagesCollectorAttribute("16")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.Statistics.SolutionBuilderUsagesCollector : CounterUsagesCollector {
    private EventLogGroup myGroup;
    private String[] myAllowedTargets;
    private EventId2`2<string, bool> myProcessStartedEvent;
    private VarargEventId myRequestCompletedEvent;
    private StringEventField myTargetField;
    private EnumEventField`1<SolutionBuilderRequestSilentMode> mySilentModeField;
    private EnumEventField`1<BuildResultKind> myResultKindField;
    private BooleanEventField myIsWholeSolutionField;
    private StringListEventField myErrorCodesField;
    private EventId3`3<string, bool, string> myRequestDiscoveredEvent;
    public SolutionBuilderUsagesCollector(FeatureUsageLogger featureUsageLogger);
    public virtual EventLogGroup GetGroup();
    public void LogProcessStarted(ISolution solution, IBuildSessionTarget sessionTarget, bool isWholeSolution);
    public void LogDiscoveredRequest(ISolution solution, IBuildSessionTarget sessionTarget, bool isWholeSolution, Version2 msbuildVersion);
    public void LogCompletedRequest(ISolution solution, IBuildSessionTarget sessionTarget, SolutionBuilderRequestSilentMode silentMode, BuildResultKind buildResultKind, bool isWholeSolution, IList`1<string> errorCodes);
}
public abstract class JetBrains.ProjectModel.Features.SolutionBuilders.ViewModel.BuildRequestViewModelBase : ObservableAutomation {
    [CompilerGeneratedAttribute]
private IProperty`1<Color> <BackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Color> <ForegroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private SequentialLifetimes <ColorSubscriptionLifetimes>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <ToolTip>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsRunning>k__BackingField;
    public IProperty`1<Color> BackgroundColor { get; }
    public IProperty`1<Color> ForegroundColor { get; }
    public SequentialLifetimes ColorSubscriptionLifetimes { get; }
    public IProperty`1<string> ToolTip { get; }
    public IProperty`1<string> Text { get; }
    public IProperty`1<bool> IsRunning { get; }
    protected string Prefix { get; }
    protected BuildRequestViewModelBase(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<Color> get_BackgroundColor();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<Color> get_ForegroundColor();
    [CompilerGeneratedAttribute]
public SequentialLifetimes get_ColorSubscriptionLifetimes();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<string> get_ToolTip();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<string> get_Text();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsRunning();
    protected abstract virtual string get_Prefix();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.ViewModel.IBuildRequestViewModelBase {
    public IProperty`1<Color> BackgroundColor { get; }
    public IProperty`1<Color> ForegroundColor { get; }
    public IProperty`1<string> ToolTip { get; }
    public IProperty`1<string> Text { get; }
    public IProperty`1<bool> IsRunning { get; }
    public abstract virtual IProperty`1<Color> get_BackgroundColor();
    public abstract virtual IProperty`1<Color> get_ForegroundColor();
    public abstract virtual IProperty`1<string> get_ToolTip();
    public abstract virtual IProperty`1<string> get_Text();
    public abstract virtual IProperty`1<bool> get_IsRunning();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.ViewModel.ICurrentBuildRunnerHolder {
    [NotNullAttribute]
public IProperty`1<ISolutionBuilderRunner> CurrentRunner { get; }
    public abstract virtual IProperty`1<ISolutionBuilderRunner> get_CurrentRunner();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.ViewModel.IProjectBuildRequestViewModel {
    public IProject Project { get; }
    public abstract virtual IProject get_Project();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.ViewModel.IRequestViewModelWithApplicableRunnerHolder {
    public Type ApplicableRunnerType { get; }
    public abstract virtual Type get_ApplicableRunnerType();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.ViewModel.ISolutionBuilderRequestViewModel {
    public ObservableCollection`1<IProjectBuildRequestViewModel> Projects { get; }
    public IProperty`1<decimal> Progress { get; }
    public IProperty`1<bool> HasErrors { get; }
    public IProperty`1<BuildRunState> State { get; }
    public IProperty`1<SolutionBuilderRequestSilentMode> SilentMode { get; }
    public IProperty`1<IBuildSessionTarget> Target { get; }
    public abstract virtual ObservableCollection`1<IProjectBuildRequestViewModel> get_Projects();
    public abstract virtual IProperty`1<decimal> get_Progress();
    public abstract virtual IProperty`1<bool> get_HasErrors();
    public abstract virtual IProperty`1<BuildRunState> get_State();
    public abstract virtual IProperty`1<SolutionBuilderRequestSilentMode> get_SilentMode();
    public abstract virtual IProperty`1<IBuildSessionTarget> get_Target();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.ViewModel.ISolutionBuilderRequestViewModelHolder {
    public IProperty`1<ISolutionBuilderRequestViewModel> Request { get; }
    public abstract virtual IProperty`1<ISolutionBuilderRequestViewModel> get_Request();
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.ViewModel.ISolutionBuilderRequestViewModelHolderFactory {
    public IProperty`1<ISolutionBuilderRequestViewModelHolder> CurrentHolder { get; }
    public abstract virtual IProperty`1<ISolutionBuilderRequestViewModelHolder> get_CurrentHolder();
}
public class JetBrains.ProjectModel.Features.SolutionBuilders.ViewModel.ProjectBuildRequestViewModel : BuildRequestViewModelBase {
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    public IProject Project { get; }
    protected string Prefix { get; }
    public ProjectBuildRequestViewModel(Lifetime lifetime, IProject project);
    [CompilerGeneratedAttribute]
public sealed virtual IProject get_Project();
    protected virtual string get_Prefix();
}
public class JetBrains.ProjectModel.Features.SolutionBuilders.ViewModel.SolutionBuilderRequestViewModel : BuildRequestViewModelBase {
    [CompilerGeneratedAttribute]
private ObservableRangeCollection`1<IProjectBuildRequestViewModel> <Projects>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<decimal> <Progress>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <HasErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<BuildRunState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<SolutionBuilderRequestSilentMode> <SilentMode>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IBuildSessionTarget> <Target>k__BackingField;
    private ObservableCollection`1<IProjectBuildRequestViewModel> JetBrains.ProjectModel.Features.SolutionBuilders.ViewModel.ISolutionBuilderRequestViewModel.Projects { get; }
    public ObservableRangeCollection`1<IProjectBuildRequestViewModel> Projects { get; }
    public IProperty`1<decimal> Progress { get; }
    public IProperty`1<bool> HasErrors { get; }
    public IProperty`1<BuildRunState> State { get; }
    public IProperty`1<SolutionBuilderRequestSilentMode> SilentMode { get; }
    public IProperty`1<IBuildSessionTarget> Target { get; }
    protected string Prefix { get; }
    public SolutionBuilderRequestViewModel(Lifetime lifetime);
    private sealed virtual override ObservableCollection`1<IProjectBuildRequestViewModel> JetBrains.ProjectModel.Features.SolutionBuilders.ViewModel.ISolutionBuilderRequestViewModel.get_Projects();
    [CompilerGeneratedAttribute]
public ObservableRangeCollection`1<IProjectBuildRequestViewModel> get_Projects();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<decimal> get_Progress();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_HasErrors();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<BuildRunState> get_State();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<SolutionBuilderRequestSilentMode> get_SilentMode();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<IBuildSessionTarget> get_Target();
    protected virtual string get_Prefix();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.ViewModel.SolutionBuilderRequestViewModelHolder : object {
    [CompilerGeneratedAttribute]
private IProperty`1<ISolutionBuilderRequestViewModel> <Request>k__BackingField;
    public IProperty`1<ISolutionBuilderRequestViewModel> Request { get; }
    public SolutionBuilderRequestViewModelHolder(Lifetime lifetime, SolutionBuilderRequestViewModelHolderFactory solutionBuilderRequestViewModelHolderFactory);
    [CompilerGeneratedAttribute]
public IProperty`1<ISolutionBuilderRequestViewModel> get_Request();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.Features.SolutionBuilders.ViewModel.SolutionBuilderRequestViewModelHolderFactory : object {
    [CompilerGeneratedAttribute]
private IProperty`1<ISolutionBuilderRequestViewModelHolder> <CurrentHolder>k__BackingField;
    public IProperty`1<ISolutionBuilderRequestViewModelHolder> CurrentHolder { get; }
    public SolutionBuilderRequestViewModelHolderFactory(Lifetime lifetime, ICurrentBuildRunnerHolder runnerHolder, IEnumerable`1<IRequestViewModelWithApplicableRunnerHolder> vmHolders);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<ISolutionBuilderRequestViewModelHolder> get_CurrentHolder();
}
[ShellComponentAttribute("0")]
public class JetBrains.ProjectModel.FeaturesStatistics.EnabledZonesCollector : ApplicationUsagesCollector {
    private ZoneUserPreferenceChecker myZoneUserPreferenceChecker;
    private EventLogGroup myGroup;
    private EventId2`2<string, bool> myComponentTimeEventId;
    public EnabledZonesCollector(FeatureUsageLogger featureUsageLogger, ZoneUserPreferenceChecker zoneUserPreferenceChecker);
    public virtual EventLogGroup GetGroup();
    public virtual Task`1<ISet`1<MetricEvent>> GetMetricsAsync(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private MetricEvent <GetMetricsAsync>b__5_0(CheckableZone zone);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.FeaturesStatistics.EventIdEx : object {
    [ExtensionAttribute]
public static void Log(EventId eventId, ISolution solution);
    [ExtensionAttribute]
public static void Log(EventId1`1<T1> eventId, ISolution solution, T1 value1);
    [ExtensionAttribute]
public static void Log(EventId2`2<T1, T2> eventId, ISolution solution, T1 value1, T2 value2);
    [ExtensionAttribute]
public static void Log(EventId3`3<T1, T2, T3> eventId, ISolution solution, T1 value1, T2 value2, T3 value3);
    [ExtensionAttribute]
public static void Log(VarargEventId eventId, ISolution solution, EventPair[] pairs);
    [ExtensionAttribute]
public static void Log(VarargEventId eventId, ISolution solution, IEnumerable`1<EventPair> pairs);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.FeaturesStatistics.FeatureUsageDataEx : object {
    [ExtensionAttribute]
public static FeatureUsageData AddSolution(FeatureUsageData fud, ISolution solution);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.FeaturesStatistics.FileExtensionValidationRule : CustomValidationRule {
    private ProjectFileExtensions myProjectFileExtensions;
    public static string Id;
    public FileExtensionValidationRule(ProjectFileExtensions projectFileExtensions);
    protected virtual ValidationResultType DoValidate(string data, EventContext context);
    public virtual bool AcceptRuleId(string ruleId);
}
public enum JetBrains.ProjectModel.FeaturesStatistics.PeriodType : Enum {
    public int value__;
    public static PeriodType EnvironmentContainer;
    public static PeriodType ShellContainer;
    public static PeriodType SolutionContainer;
    public static PeriodType SolutionOpen;
    public static PeriodType SolutionOpenWithSyncPoints;
    public static PeriodType FirstShellContainerFromStartup;
    public static PeriodType FirstSolutionOpenFromStartup;
    public static PeriodType FirstSolutionOpenWithSyncPointsFromStartup;
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.FeaturesStatistics.SolutionLoadTaskIdValidationRule : CustomValidationRule {
    public static PayloadKey`1<string> Key;
    private static SolutionLoadTaskIdValidationRule();
    protected virtual ValidationResultType DoValidate(string data, EventContext context);
    public virtual bool AcceptRuleId(string ruleId);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ProjectModel.FeaturesStatistics.SolutionStatisticsIdProvider : object {
    private EventLogConfiguration myConfiguration;
    private string myUniqueId;
    public SolutionStatisticsIdProvider(EventLogConfiguration configuration, SolutionCaches solutionCaches);
    public virtual void EnrichData(FeatureUsageData fud);
}
[CounterUsagesCollectorAttribute("16")]
public class JetBrains.ProjectModel.FeaturesStatistics.StartupPerformanceCollector : CounterUsagesCollector {
    private EventLogGroup myEventLogGroup;
    private VarargEventId myContainerStatsEventId;
    private EnumEventField`1<ContainerType> myContainerTypeEventField;
    private LongEventField myContainerTotalTimeEventField;
    private LongEventField myContainerCompositionTimeEventField;
    private LongEventField myContainerCompositionTimeOnPrimaryThreadEventField;
    private IntEventField myContainerComponentCountEventField;
    private VarargEventId myComponentTimeEventId;
    private StringEventField myComponentTypeEventField;
    private EnumEventField`1<ValueDescriptorKind> myComponentKindEventField;
    private LongEventField myComponentTimeEventField;
    private EnumListEventField`1<InstantiationRaw> myComponentInstantiationFlagsEventField;
    private BooleanEventField myComponentIsOnPrimaryThreadEventField;
    private EventId1`1<long> mySolutionOpenEventId;
    private EventId1`1<long> mySolutionCloseEventId;
    private EventId2`2<long, bool> mySolutionIsUsableEventId;
    private VarargEventId myPeriodTimeEventId;
    private EnumEventField`1<PeriodType> myPeriodTypeEventField;
    private LongEventField myPeriodTotalTimeEventField;
    private LongEventField myPeriodGuardedTimeEventField;
    private LongEventField myPeriodOffsetTimeEventField;
    private BooleanEventField myPeriodIsInstantStartEventField;
    private BooleanEventField myPeriodIsFirstEventField;
    private VarargEventId mySolutionLoadTaskEventId;
    private TypeEventField mySolutionLoadTaskSourceTypeEventField;
    private StringEventField mySolutionLoadTaskIdEventField;
    private EnumEventField`1<SolutionLoadTaskKinds> mySolutionLoadTaskKindEventField;
    private LongEventField mySolutionLoadTaskTimeEventField;
    public StartupPerformanceCollector(FeatureUsageLogger fusLogger);
    public virtual EventLogGroup GetGroup();
    public void ReportContainer(ContainerType containerType, IContainerInfo containerInfo, ISolution solution);
    private static IList`1<InstantiationRaw> GetInstantiationBits(Instantiation instantiation);
    public void ReportPeriod(PeriodType periodType, ReentrancyGuardPeriodStatistics reentrancyGuardPeriodStatistics, TimeSpan offset, bool instantStart, bool first, ISolution solution);
    public virtual void ReportSolutionIsUsable(ISolution solution, TimeSpan time, bool isWarmStart);
    public virtual void ReportSolutionOpen(ISolution solution, TimeSpan time);
    public virtual void ReportSolutionClose(TimeSpan time);
    public virtual void ReportSolutionLoadTask(ISolution solution, TaskData task);
}
[ShellComponentAttribute("20")]
public class JetBrains.ProjectModel.FeaturesStatistics.StartupPerformanceCollectorReporterShell : object {
    public StartupPerformanceCollectorReporterShell(Lifetime lifetime, StartupPerformanceCollector collector, IShellLocks locks, ILogger logger);
}
[SolutionComponentAttribute("20")]
public class JetBrains.ProjectModel.FeaturesStatistics.StartupPerformanceCollectorReporterSolution : object {
    private static int SolutionLoadTaskTimeThreshold;
    public StartupPerformanceCollectorReporterSolution(Lifetime lifetime, StartupPerformanceCollector collector, IShellLocks locks, ISolution solution, ISolutionLoadTasksScheduler solutionScheduler, ILogger logger);
}
public class JetBrains.ProjectModel.FeaturesStatistics.StartupPeriodStatistics : object {
    private LifetimeDefinition myLifetimeDefinition;
    private int myReported;
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private PeriodType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <First>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InstantStart>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<ReentrancyGuardPeriodStatistics> <Statistics>k__BackingField;
    public PeriodType Type { get; }
    public bool First { get; }
    public bool InstantStart { get; }
    public TimeSpan Offset { get; }
    public IProperty`1<ReentrancyGuardPeriodStatistics> Statistics { get; }
    public Lifetime Lifetime { get; }
    public StartupPeriodStatistics(PeriodType type, bool first, bool instantStart, TimeSpan offset, ReentrancyGuardStatistics reentrancyGuardStatistics, Lifetime lifetime);
    private StartupPeriodStatistics(PeriodType type, bool first, bool instantStart, TimeSpan offset, ReentrancyGuardStatistics reentrancyGuardStatistics, LifetimeDefinition activeLifeDef);
    public StartupPeriodStatistics(PeriodType type, bool first, bool instantStart, TimeSpan offset, LifetimeDefinition activeLifeDef, IProperty`1<ReentrancyGuardPeriodStatistics> statsProperty);
    [CompilerGeneratedAttribute]
public PeriodType get_Type();
    [CompilerGeneratedAttribute]
public bool get_First();
    [CompilerGeneratedAttribute]
public bool get_InstantStart();
    [CompilerGeneratedAttribute]
public TimeSpan get_Offset();
    [CompilerGeneratedAttribute]
public IProperty`1<ReentrancyGuardPeriodStatistics> get_Statistics();
    public Lifetime get_Lifetime();
    public void Collect(StartupPerformanceCollector collector, ISolution solution);
}
public class JetBrains.ProjectModel.FileSet : object {
    private Pattern myIncludePattern;
    private Pattern myExcludePattern;
    private BuildAction myBuildAction;
    public BuildAction BuildAction { get; }
    [NotNullAttribute]
public Pattern IncludePattern { get; }
    [CanBeNullAttribute]
public Pattern ExcludePattern { get; }
    public FileSet(Pattern includePattern, Pattern excludePattern, BuildAction buildAction);
    public BuildAction get_BuildAction();
    public Pattern get_IncludePattern();
    public Pattern get_ExcludePattern();
    public bool IsFileMemberOf(VirtualFileSystemPath path);
    public virtual string ToString();
    public void WriteFileSet(BinaryWriter writer);
}
public class JetBrains.ProjectModel.FileSetSet : object {
    private List`1<FileSet> myFileSets;
    public FileSetSet(FileSet fileSet);
    public FileSet[] GetFileSets();
    public void AddFileSet(FileSet fileSet);
    public FileSet IsMemberOf(VirtualFileSystemPath fsp);
    public VirtualFileSystemPath[] GetBasePaths();
    public virtual string ToString();
    public void WriteFileSet(BinaryWriter writer);
    public static FileSetSet ReadFileSet(BinaryReader binaryReader);
    public static void WriteFileSet(FileSetSet fileSetSet, BinaryWriter writer);
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.FileSystemPathAllowIntern : object {
    public FileSystemPathAllowIntern(Lifetime lifetime);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.FileSystemTrackerSolutionProxy : object {
    private IFileSystemTracker myFileSystemTracker;
    [CanBeNullAttribute]
private Dictionary`2<FileSystemTrackerRequestCookie, int> myCookies;
    public FileSystemTrackerSolutionProxy(IFileSystemTracker fileSystemTracker);
    internal void SetSolutionInstanceLifetime(Lifetime solutionInstanceLifetime);
    public sealed virtual FileSystemTrackerRequestCookie AdviseFileChanges(VirtualFileSystemPath filePath);
    public sealed virtual FileSystemTrackerRequestCookie AdviseDirectoryChanges(VirtualFileSystemPath directoryPath, bool watchRecursively);
    public sealed virtual FileSystemTrackerRequestCookie AdviseDirectoryChangesIfAllowedOrFileChangesOtherwise(VirtualFileSystemPath filePath);
    public sealed virtual void UnadviseChanges(FileSystemTrackerRequestCookie[] requestCookies);
    private void OnCookieAdd(FileSystemTrackerRequestCookie cookie);
    private void OnCookieRemove(FileSystemTrackerRequestCookie cookie);
    private void Flush();
    [CompilerGeneratedAttribute]
private void <SetSolutionInstanceLifetime>b__3_0();
    [CompilerGeneratedAttribute]
private void <SetSolutionInstanceLifetime>b__3_1();
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.FileSystemTrackerSolutionProxyHelper : object {
    public FileSystemTrackerSolutionProxyHelper(Lifetime lifetime, FileSystemTrackerSolutionProxy proxy);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.FileTypeDefinitionExtensionMapping : object {
    private OneToSetMap`2<string, ProjectFileType> myExtensionsToTypes;
    private OneToSetMap`2<ProjectFileType, string> myTypesToExtensions;
    [CompilerGeneratedAttribute]
private ISimpleSignal <Changed>k__BackingField;
    public ISimpleSignal Changed { get; }
    public FileTypeDefinitionExtensionMapping(Lifetime lifetime, IProjectFileTypes fileTypes);
    [CompilerGeneratedAttribute]
public ISimpleSignal get_Changed();
    public virtual IEnumerable`1<ProjectFileType> GetFileTypes(string extension);
    public virtual IEnumerable`1<string> GetExtensions(ProjectFileType projectFileType);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0(Lifetime typeLifetime, ProjectFileType fileType);
}
[ProjectFileTypeDefinitionAttribute("BINARY")]
public class JetBrains.ProjectModel.FileTypes.BinaryProjectFileType : KnownProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static BinaryProjectFileType <Instance>k__BackingField;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static BinaryProjectFileType Instance { get; private set; }
    protected BinaryProjectFileType(string name);
    protected BinaryProjectFileType(string name, string presentableName);
    protected BinaryProjectFileType(string name, string presentableName, IEnumerable`1<string> extensions);
    [CompilerGeneratedAttribute]
public static BinaryProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(BinaryProjectFileType value);
}
public class JetBrains.ProjectModel.FileTypes.CachingProjectFileTypeServicesAccess`1 : object {
    private ConcurrentDictionary`2<ProjectFileType, TService> myServiceByType;
    private ConcurrentDictionary`2<ProjectFileType, List`1<TService>> myServicesByType;
    private Func`2<ProjectFileType, TService> myProviderForService;
    private Func`2<ProjectFileType, List`1<TService>> myProviderForServices;
    public CachingProjectFileTypeServicesAccess`1(Lifetime lifetime, IProjectFileTypeServices services);
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public TService TryGetService(ProjectFileType fileType);
    [NotNullAttribute]
[UsedImplicitlyAttribute]
public TService GetService(ProjectFileType fileType);
    [NotNullAttribute]
[UsedImplicitlyAttribute]
public List`1<TService> GetServices(ProjectFileType fileType);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ProjectModel.FileTypes.IProjectFileTypeServices {
    [NotNullAttribute]
[UsedImplicitlyAttribute]
public abstract virtual T GetService(ProjectFileType fileType);
    [NotNullAttribute]
[UsedImplicitlyAttribute]
public abstract virtual IReadyImmutableList`1<T> GetServices(ProjectFileType fileType);
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public abstract virtual T TryGetService(ProjectFileType fileType);
    [NotNullAttribute]
[UsedImplicitlyAttribute]
public abstract virtual IEnumerable`1<T> GetServicesFromAll();
    [NotNullAttribute]
[UsedImplicitlyAttribute]
public abstract virtual IEnumerable`1<T> GetMultipleServicesFromAll();
}
[ProjectFileTypeDefinitionAttribute("Nuspec")]
public class JetBrains.ProjectModel.FileTypes.NuspecProjectFileType : XmlProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static NuspecProjectFileType <Instance>k__BackingField;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static NuspecProjectFileType Instance { get; private set; }
    protected NuspecProjectFileType(string name);
    protected NuspecProjectFileType(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static NuspecProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(NuspecProjectFileType value);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.FileTypes.ProjectFileTypeServices : SplittedComponentContainer`2<ProjectFileType, ProjectFileTypeAttribute> {
    public ProjectFileTypeServices(Lifetime lifetime, ShellPartCatalogSet catalogset, IComponentContainer parentContainer, IProjectFileTypes fileTypes);
    private sealed virtual override T JetBrains.ProjectModel.FileTypes.IProjectFileTypeServices.GetService(ProjectFileType fileType);
    private sealed virtual override IReadyImmutableList`1<T> JetBrains.ProjectModel.FileTypes.IProjectFileTypeServices.GetServices(ProjectFileType fileType);
    private sealed virtual override T JetBrains.ProjectModel.FileTypes.IProjectFileTypeServices.TryGetService(ProjectFileType fileType);
    private sealed virtual override IEnumerable`1<T> JetBrains.ProjectModel.FileTypes.IProjectFileTypeServices.GetServicesFromAll();
    private sealed virtual override IEnumerable`1<T> JetBrains.ProjectModel.FileTypes.IProjectFileTypeServices.GetMultipleServicesFromAll();
}
public abstract class JetBrains.ProjectModel.FileTypes.SqlProjectFileTypeBase : KnownProjectFileType {
    protected SqlProjectFileTypeBase(string name);
    protected SqlProjectFileTypeBase(string name, string presentableName);
    protected SqlProjectFileTypeBase(string name, string presentableName, IEnumerable`1<string> extensions);
}
public class JetBrains.ProjectModel.FrugalWeakCollection`1 : object {
    private FrugalLocalList`1<JetWeakReference`1<TItem>> myItems;
    private int myVersion;
    public sealed virtual IEnumerator`1<TItem> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void Add(TItem item);
    public void Clear();
    private void SweepSlow();
    private void CheckVersion(int localVersion, string operation);
    private void CheckVersionAndIncrement(int localVersion, string operation);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.GlobalUsings.GlobalUsingsEx : object {
    [ExtensionAttribute]
public static bool HasGlobalUsings(IProject project, TargetFrameworkId targetFramework);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.GlobalUsings.GlobalUsingsGeneratedFileDataProvider : object {
    public GlobalUsingsGeneratedFileDataProvider(Lifetime lifetime, ISolution solution, IShellLocks locks, IMsBuildDataStorage msBuildDataStorage, IViewableProjectsCollection viewableProjectsCollection, ChangeManager changeManager);
    private void UpdateProjectData(IProject project, IMsBuildDataStorage msBuildDataStorage);
    [NotNullAttribute]
private static IMsBuildData BuildDataForProject(IProject project);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.GlobalUsings.GlobalUsingsProjectPropertiesRequest : object {
    public static string ImplicitUsingsProperty;
    public static string DisableImplicitNamespaceImportsProperty;
    public IEnumerable`1<string> RequestedProperties { get; }
    private static GlobalUsingsProjectPropertiesRequest();
    public sealed virtual IEnumerable`1<string> get_RequestedProperties();
}
[ProjectFileTypeDefinitionAttribute("HTML")]
public class JetBrains.ProjectModel.HtmlProjectFileType : KnownProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static HtmlProjectFileType <Instance>k__BackingField;
    public static string HTML_EXTENSION;
    public static string HTM_EXTENSION;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static HtmlProjectFileType Instance { get; private set; }
    protected HtmlProjectFileType(string name);
    protected HtmlProjectFileType(string name, string presentableName);
    protected HtmlProjectFileType(string name, string presentableName, IEnumerable`1<string> extensions);
    [CompilerGeneratedAttribute]
public static HtmlProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(HtmlProjectFileType value);
    public virtual BuildAction GetDefaultBuildAction(IProject project, string extension);
}
[NullableContextAttribute("1")]
public interface JetBrains.ProjectModel.IBuildActionModifier {
    public abstract virtual BuildAction FixupForNewFile(IProject project, VirtualFileSystemPath location, TargetFrameworkId targetFrameworkId, BuildAction buildAction);
}
public interface JetBrains.ProjectModel.IFakeSolutionZoneProvider {
    public IEnumerable`1<FakeSolutionZoneFilter> Zones { get; }
    public abstract virtual IEnumerable`1<FakeSolutionZoneFilter> get_Zones();
}
public interface JetBrains.ProjectModel.IFileSystemTrackerSolutionProxy {
    public abstract virtual FileSystemTrackerRequestCookie AdviseFileChanges(VirtualFileSystemPath filePath);
    public abstract virtual FileSystemTrackerRequestCookie AdviseDirectoryChanges(VirtualFileSystemPath directoryPath, bool watchRecursively);
    public abstract virtual FileSystemTrackerRequestCookie AdviseDirectoryChangesIfAllowedOrFileChangesOtherwise(VirtualFileSystemPath filePath);
    public abstract virtual void UnadviseChanges(FileSystemTrackerRequestCookie[] requestCookies);
}
public interface JetBrains.ProjectModel.IInMemoryFileChangeTracker {
    public abstract virtual void SaveFile(IProjectFile file);
}
public interface JetBrains.ProjectModel.ILightweightSolutionLoadSettingsHolder {
    public bool IsLightweightSolutionLoad { get; }
    public abstract virtual bool get_IsLightweightSolutionLoad();
}
[ProjectFileTypeDefinitionAttribute("IL")]
public class JetBrains.ProjectModel.ILProjectFileType : KnownProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static ILProjectFileType <Instance>k__BackingField;
    public static string IL_EXTENSION;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static ILProjectFileType Instance { get; private set; }
    protected ILProjectFileType(string name);
    protected ILProjectFileType(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static ILProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(ILProjectFileType value);
}
public interface JetBrains.ProjectModel.IModule {
    public string Presentation { get; }
    public abstract virtual string get_Presentation();
}
public interface JetBrains.ProjectModel.IModuleToAssemblyReferenceResolver {
    public abstract virtual IEnumerable`1<AssemblyReferenceResolveResult> ResolveAssemblyReferences(AssemblyReferenceTarget referenceTarget, IModule referenceSource);
}
public class JetBrains.ProjectModel.Impl.Build.ManagedProjectConfiguration : ManagedProjectConfigurationBase {
    public virtual bool UpdateFrom(IProjectConfiguration configuration);
}
public abstract class JetBrains.ProjectModel.Impl.Build.ManagedProjectConfigurationBase : ProjectConfigurationBase {
    private bool myOptimize;
    private string myNoWarn;
    private bool myRemoveIntegerChecks;
    private bool myRegisterForCOMInterop;
    private string myDocumentationFile;
    private bool myTreatWarningsAsErrors;
    private string myDefineConstants;
    private int myWarningLevel;
    private bool myGenerateSerializationAssemblies;
    private ProjectOutputType myOutputType;
    private string myStartupObject;
    private string myOutputAssemblyName;
    private string myOutputAssemblyExtension;
    private bool myHasRunCommand;
    private bool myEnableUnmanagedCodeDebugging;
    private IDictionary`2<string, string> myCommands;
    public string DefineConstants { get; public set; }
    public bool TreatWarningsAsErrors { get; public set; }
    public string DocumentationFile { get; public set; }
    public bool RegisterForCOMInterop { get; public set; }
    public bool RemoveIntegerChecks { get; public set; }
    public string NoWarn { get; public set; }
    public bool Optimize { get; public set; }
    public IDictionary`2<string, string> Commands { get; public set; }
    public int WarningLevel { get; public set; }
    public bool GenerateSerializationAssemblies { get; public set; }
    public bool EnableUnmanagedCodeDebugging { get; public set; }
    public ProjectOutputType OutputType { get; public set; }
    public string StartupObject { get; public set; }
    public string OutputAssemblyName { get; public set; }
    public string OutputAssemblyExtension { get; public set; }
    public bool HasRunCommand { get; public set; }
    public virtual string get_DefineConstants();
    public virtual void set_DefineConstants(string value);
    public sealed virtual bool get_TreatWarningsAsErrors();
    public sealed virtual void set_TreatWarningsAsErrors(bool value);
    public sealed virtual string get_DocumentationFile();
    public sealed virtual void set_DocumentationFile(string value);
    public sealed virtual bool get_RegisterForCOMInterop();
    public sealed virtual void set_RegisterForCOMInterop(bool value);
    public sealed virtual bool get_RemoveIntegerChecks();
    public sealed virtual void set_RemoveIntegerChecks(bool value);
    public sealed virtual string get_NoWarn();
    public sealed virtual void set_NoWarn(string value);
    public sealed virtual bool get_Optimize();
    public sealed virtual void set_Optimize(bool value);
    public IDictionary`2<string, string> get_Commands();
    public void set_Commands(IDictionary`2<string, string> value);
    public sealed virtual int get_WarningLevel();
    public sealed virtual void set_WarningLevel(int value);
    public sealed virtual bool get_GenerateSerializationAssemblies();
    public sealed virtual void set_GenerateSerializationAssemblies(bool value);
    public sealed virtual bool get_EnableUnmanagedCodeDebugging();
    public sealed virtual void set_EnableUnmanagedCodeDebugging(bool value);
    public sealed virtual ProjectOutputType get_OutputType();
    public sealed virtual void set_OutputType(ProjectOutputType value);
    public sealed virtual string get_StartupObject();
    public sealed virtual void set_StartupObject(string value);
    public sealed virtual string get_OutputAssemblyName();
    public sealed virtual void set_OutputAssemblyName(string value);
    public sealed virtual string get_OutputAssemblyExtension();
    public sealed virtual void set_OutputAssemblyExtension(string value);
    public sealed virtual bool get_HasRunCommand();
    public sealed virtual void set_HasRunCommand(bool value);
    public virtual void WriteConfiguration(UnsafeWriter writer, IStringIntern stringIntern);
    public virtual void ReadConfiguration(UnsafeReader reader, IStringIntern stringIntern);
    public virtual bool UpdateFrom(IProjectConfiguration configuration);
    public virtual void Dump(TextWriter to, int indent);
}
public abstract class JetBrains.ProjectModel.Impl.Build.ProjectConfigurationBase : UserDataHolder {
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
private string myName;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
private string myRelativeOutputDirectory;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
private string myRelativeIntermediateDirectory;
    private IProject myProject;
    private IReadOnlyDictionary`2<string, string> myProperties;
    private IReadOnlyCollection`1<string> myCapabilities;
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFrameworkId>k__BackingField;
    public string Name { get; public set; }
    public TargetFrameworkId TargetFrameworkId { get; internal set; }
    public string RelativeOutputDirectory { get; public set; }
    public string RelativeIntermediateDirectory { get; public set; }
    public IReadOnlyDictionary`2<string, string> PropertiesCollection { get; public set; }
    public IReadOnlyCollection`1<string> CapabilitiesCollection { get; public set; }
    protected void OnPropertyChange();
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual TargetFrameworkId get_TargetFrameworkId();
    [CompilerGeneratedAttribute]
internal void set_TargetFrameworkId(TargetFrameworkId value);
    public sealed virtual string get_RelativeOutputDirectory();
    public sealed virtual void set_RelativeOutputDirectory(string value);
    public sealed virtual string get_RelativeIntermediateDirectory();
    public sealed virtual void set_RelativeIntermediateDirectory(string value);
    public sealed virtual IReadOnlyDictionary`2<string, string> get_PropertiesCollection();
    public sealed virtual void set_PropertiesCollection(IReadOnlyDictionary`2<string, string> value);
    public sealed virtual IReadOnlyCollection`1<string> get_CapabilitiesCollection();
    public sealed virtual void set_CapabilitiesCollection(IReadOnlyCollection`1<string> value);
    protected void SetPropertyInCollection(string name, string value);
    public sealed virtual void SetProject(IProject project);
    protected IProject GetProject();
    public virtual void WriteConfiguration(UnsafeWriter writer, IStringIntern stringIntern);
    public virtual void ReadConfiguration(UnsafeReader reader, IStringIntern stringIntern);
    private void WriteProperties(UnsafeWriter writer, IStringIntern stringIntern);
    private void ReadProperties(UnsafeReader reader, IStringIntern stringIntern);
    private void WriteCapabilities(UnsafeWriter writer, IStringIntern stringIntern);
    private void ReadCapabilities(UnsafeReader reader, IStringIntern stringIntern);
    public virtual bool UpdateFrom(IProjectConfiguration configuration);
    public virtual void Dump(TextWriter to, int indent);
}
public class JetBrains.ProjectModel.Impl.Build.VBProjectConfiguration : ManagedProjectConfigurationBase {
    private string myWarningsAsErrors;
    private bool myDefineTrace;
    private bool myDefineDebug;
    private DebugType myDebugType;
    private string myPlatform;
    private string myMyType;
    private VBLanguageVersion myLanguageVersion;
    public DebugType DebugType { get; public set; }
    public bool DefineDebug { get; public set; }
    public bool DefineTrace { get; public set; }
    public string WarningsAsErrors { get; public set; }
    public string Platform { get; public set; }
    public string MyType { get; public set; }
    public VBLanguageVersion LanguageVersion { get; public set; }
    public sealed virtual DebugType get_DebugType();
    public sealed virtual void set_DebugType(DebugType value);
    public sealed virtual bool get_DefineDebug();
    public sealed virtual void set_DefineDebug(bool value);
    public sealed virtual bool get_DefineTrace();
    public sealed virtual void set_DefineTrace(bool value);
    public sealed virtual string get_WarningsAsErrors();
    public sealed virtual void set_WarningsAsErrors(string value);
    public sealed virtual string get_Platform();
    public sealed virtual void set_Platform(string value);
    public string get_MyType();
    public void set_MyType(string value);
    public sealed virtual VBLanguageVersion get_LanguageVersion();
    public sealed virtual void set_LanguageVersion(VBLanguageVersion value);
    public sealed virtual string GetCompilerOptionsCommandLine(VirtualFileSystemPath location);
    private static void TriState(StringBuilder r, T param, T v1, string s1, T v2, string s2, string default);
    public virtual void WriteConfiguration(UnsafeWriter writer, IStringIntern stringIntern);
    public virtual void ReadConfiguration(UnsafeReader reader, IStringIntern stringIntern);
    public virtual bool UpdateFrom(IProjectConfiguration configuration);
    public virtual void Dump(TextWriter to, int indent);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Impl.CachedFileSystemDataEx : object {
    [ExtensionAttribute]
public static ExternalChangeType Refresh(CachedFileSystemData data, VirtualFileSystemPath path);
    [ExtensionAttribute]
public static ExternalChangeType CalculateExternalChangeType(CachedFileSystemData oldData, CachedFileSystemData newData, VirtualFileSystemPath path);
}
public class JetBrains.ProjectModel.Impl.CachedProjectFileType : CachedProjectItemValue`2<IProjectFile, ProjectFileType> {
    public CachedProjectFileType(IProjectModelTimestamps timestamps, IProjectFile projectFile, Func`2<IProjectFile, ProjectFileType> evaluateFunc);
    protected virtual int ModificationTimestamp();
}
public class JetBrains.ProjectModel.Impl.CachedProjectItemAnyChange`2 : CachedProjectItemValue`2<TProjectItem, TValue> {
    public CachedProjectItemAnyChange`2(IProjectModelTimestamps timestamps, TProjectItem projectItem, Func`2<TProjectItem, TValue> evaluateFunc);
    public CachedProjectItemAnyChange`2(IProjectModelTimestamps timestamps, TProjectItem projectItem, Func`2<TProjectItem, TValue> evaluateFunc, TValue initialValue);
    protected virtual int ModificationTimestamp();
}
public class JetBrains.ProjectModel.Impl.CachedProjectItemLocation`1 : CachedProjectItemValue`2<TProjectItem, VirtualFileSystemPath> {
    public CachedProjectItemLocation`1(IProjectModelTimestamps timestamps, TProjectItem projectItem, Func`2<TProjectItem, VirtualFileSystemPath> evaluateFunc);
    public CachedProjectItemLocation`1(IProjectModelTimestamps timestamps, TProjectItem projectItem, Func`2<TProjectItem, VirtualFileSystemPath> evaluateFunc, VirtualFileSystemPath initialValue);
    protected virtual int ModificationTimestamp();
}
public class JetBrains.ProjectModel.Impl.CachedProjectItemValue`2 : object {
    private TProjectItem myProjectItem;
    private IProjectModelTimestamps myTimestamps;
    private Func`2<TProjectItem, TValue> myEvaluateFunc;
    [NotNullAttribute]
private Box modreq(System.Runtime.CompilerServices.IsVolatile) myBox;
    protected IProjectModelTimestamps Timestamps { get; }
    public CachedProjectItemValue`2(IProjectModelTimestamps timestamps, TProjectItem projectItem, Func`2<TProjectItem, TValue> evaluateFunc);
    public CachedProjectItemValue`2(IProjectModelTimestamps timestamps, TProjectItem projectItem, Func`2<TProjectItem, TValue> evaluateFunc, TValue initialValue);
    protected virtual int ModificationTimestamp();
    protected IProjectModelTimestamps get_Timestamps();
    public TValue GetValue();
    public void ResetValue();
    [NotNullAttribute]
public static CachedProjectItemValue`2<TProjectItem, TValue> CreateInvalidatedOnAnyChange(TProjectItem projectItem, Func`2<TProjectItem, TValue> evaluateFunc);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.Impl.ExternalChangeProcessor : object {
    private Lifetime myLifetime;
    private LifetimeDefinition myActivityAllowedLifetimeDefinition;
    private ISolution mySolution;
    private bool myIsDisposed;
    public IProperty`1<int> myStatusBarIndicatorShouldBeVisible;
    public IProperty`1<bool> HasDeltasQueued;
    private List`1<FileSystemChangeDelta> myDeltas;
    private ProcessExternalChangeActivity myActivity;
    private ManualResetEvent myActivityFinished;
    private object myLock;
    private XStatus myStatus;
    private IShellLocks myShellLocks;
    private IProjectModelBatchChangeManager myProjectModelBatchChangeManager;
    private IModuleReferencesResolveStore myModuleReferencesResolveStore;
    private ModuleReferenceResolveSync myModuleReferenceResolveSync;
    private ChangeManager myChangeManager;
    private ILogger myLogger;
    public XStatus Status { get; public set; }
    public ExternalChangeProcessor(Lifetime lifetime, ISolution solution, IShellLocks shellLocks, IProjectModelBatchChangeManager projectModelBatchChangeManager, IModuleReferencesResolveStore moduleReferencesResolveStore, ModuleReferenceResolveSync moduleReferenceResolveSync, ChangeManager changeManager, IFileSystemTracker fileSystemTracker, ILogger logger, ISolutionLoadTasksScheduler solutionLoadTasksScheduler, IStatusBar statusBar);
    public XStatus get_Status();
    public void set_Status(XStatus value);
    public virtual void OnFileSystemChanged(FileSystemChange change);
    private bool IsProjectItemAffectedByTheChange(IProjectItem projectItem, FileSystemChangeDelta fileSystemChangeDelta);
    private void FindProjectElementsAffectedByExternalChangeImpl(FileSystemChangeDelta delta, IDictionary`2<IProjectModelElement, FileSystemChangeDelta> affectedElements);
    private void AddAffectedProjectItem(FileSystemChangeDelta delta, IDictionary`2<IProjectModelElement, FileSystemChangeDelta> affectedElements, IProjectItem projectItem);
    private IList`1<IProjectToAssemblyReference> CollectUnresolvedProjectToAssemblyReferences();
    private void FindElementsAffectedByExternalChange(FileSystemChangeDelta rootDelta, IDictionary`2<IProjectModelElement, FileSystemChangeDelta> affectedElements);
    private JetStatusBarIndicator MyStatusBarIndicator(Lifetime lifetime);
    private void ShowIndicator();
    private void HideIndicator();
    private ProjectModelChange ProcessElementsAffectedByExternalChange(IEnumerable`1<KeyValuePair`2<IProjectModelElement, FileSystemChangeDelta>> affectedElements, HashSet`1<IProjectFile> projectFilesNotToFireChangeIfNothingSeriousHappened, bool sync);
    protected virtual HashSet`1<IProjectFile> CalculateFilesNotToFireChangeIfNothingSeriousHappened(IReadOnlyCollection`1<IProjectModelElement> affectedFilesKeys);
    public sealed virtual void Dispose();
    private void OnActivityFinished(int lastProcessedDeltaIndex);
    private void OnActivityInterrupted();
    private int GetDeltasCount();
    private FileSystemChangeDelta GetDelta(int i);
    public void ForceSyncExternalChange(VirtualFileSystemPath path, FileSystemChangeType changeType, bool doSync);
    private void SpawnProcessExternalChangeActivity(IList`1<FileSystemChangeDelta> deltas, bool doSync);
    private Action GetFinished(bool doSync);
    private Action GetRunning(bool doSync);
    [CompilerGeneratedAttribute]
private void <ShowIndicator>b__30_0();
    [CompilerGeneratedAttribute]
private void <HideIndicator>b__31_0();
    [CompilerGeneratedAttribute]
private void <OnActivityFinished>b__36_0();
    [CompilerGeneratedAttribute]
private void <OnActivityInterrupted>b__37_0();
}
public class JetBrains.ProjectModel.Impl.GuidProjectReference : ProjectToModuleReferenceBase {
    private Guid myReferencedProjectGuid;
    [NotNullAttribute]
private string myReferencedProjectName;
    [NotNullAttribute]
private VirtualFileSystemPath myHintPath;
    [NotNullAttribute]
public VirtualFileSystemPath HintPath { get; }
    public Guid ReferencedProjectGuid { get; }
    public Type MarshallerType { get; }
    public string Name { get; }
    public string ReferencedProjectName { get; }
    public GuidProjectReference(IProject containingProject, Guid referencedProjectGuid, string referencedProjectName, VirtualFileSystemPath hintPath, TargetFrameworkId targetFrameworkId);
    public sealed virtual VirtualFileSystemPath get_HintPath();
    public Guid get_ReferencedProjectGuid();
    public virtual Type get_MarshallerType();
    public virtual string get_Name();
    public string get_ReferencedProjectName();
    public virtual void Accept(ProjectVisitor projectVisitor);
    public virtual string ToString();
    public void WriteReference(UnsafeWriter writer);
    public static GuidProjectReference ReadReference(UnsafeReader reader, ProjectImpl project);
    public sealed virtual IProjectSearchDescriptor GetTargetProjectSearchDescriptor();
}
internal static class JetBrains.ProjectModel.Impl.LocksUtil : object {
    internal static UndoUsingWriteLock WriteLockIfNeeded(ISolution solution);
    [ConditionalAttribute("JET_MODE_ASSERT")]
internal static void AssertWriteAccessIfNeeded(ISolution solution);
    [ConditionalAttribute("JET_MODE_ASSERT")]
internal static void AssertReadAccessIfNeeded(ISolution solution);
    [ConditionalAttribute("JET_MODE_ASSERT")]
internal static void AssertNotLoadingFromCache(ISolution solution);
}
public class JetBrains.ProjectModel.Impl.ProjectFileModificationCookie : ModificationCookie {
    [CompilerGeneratedAttribute]
private ICollection`1<IProjectFile> <ProjectFiles>k__BackingField;
    [NotNullAttribute]
public ICollection`1<IProjectFile> ProjectFiles { get; }
    public ProjectFileModificationCookie(EnsureWritableResult ensureWritableResult, ICollection`1<IProjectFile> projectFiles);
    public ProjectFileModificationCookie(EnsureWritableResult ensureWritableResult, ICollection`1<IProjectFile> projectFiles, string message);
    [CompilerGeneratedAttribute]
public ICollection`1<IProjectFile> get_ProjectFiles();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.Impl.ProjectFileSynchronizer : object {
    private ISolution mySolution;
    public ProjectFileSynchronizer(ISolution solution, ChangeManager changeManager, Lifetime lifetime);
    private static IProjectFileUpdater GetProjectFileUpdater(IProject project);
    private void OnChange(ChangeEventArgs eventArgs);
}
[ShellComponentAttribute("10")]
public class JetBrains.ProjectModel.Impl.ProjectImporterImpl : object {
    private IPlatformManager myPlatformManager;
    private List`1<ISpecificProjectImporter> myProjectImporters;
    public ProjectImporterImpl(IShellLocks locks, IPlatformManager platformManager, ProjectFilePropertiesFactory projectFilePropertiesFactory);
    public sealed virtual IProject AddProject(SolutionElement solution, VirtualFileSystemPath projectLocation, TargetFrameworkId defaultTargetFrameworkId);
    public sealed virtual bool ImportSolution(SolutionElement solution, VirtualFileSystemPath solutionFilePath);
    [CanBeNullAttribute]
private CompilePlatform GetCompilePlatform();
    [CanBeNullAttribute]
private IProject ImportProject(SolutionElement solutionElement, SlnFileProject slnProject, TargetFrameworkId defaultTargetFrameworkId);
}
public class JetBrains.ProjectModel.Impl.ProjectInstance : object {
    private IProject myProject;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    public IProject Project { get; }
    public Lifetime Lifetime { get; }
    public ProjectInstance(Lifetime lifetime, IComponentContainer parentContainer, IPartCatalogSet catalogueSet, IProject project);
    public IProject get_Project();
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
}
public class JetBrains.ProjectModel.Impl.ProjectModelBatchChange : object {
    [CompilerGeneratedAttribute]
private ProjectModelBatchChangeManager <manager>P;
    private IList`1<ProjectModelChange> myChangeDeltas;
    private int myNestingLevel;
    [CompilerGeneratedAttribute]
private bool <NotifyChangeManager>k__BackingField;
    public bool NotifyChangeManager { get; }
    public ProjectModelBatchChange(ProjectModelBatchChangeManager manager, bool notifyChangeManager);
    [CompilerGeneratedAttribute]
public bool get_NotifyChangeManager();
    public void AddDeltas(ICollection`1<ProjectModelChange> newDeltas);
    internal void BeginNestedBatchChange();
    public sealed virtual IList`1<ProjectModelChange> GetChanges();
    public IList`1<ProjectModelChange> GetChangesAndWipe();
    public sealed virtual void Commit(ITaskExecutor executor);
}
[SolutionInstanceComponentAttribute("10")]
internal class JetBrains.ProjectModel.Impl.ProjectModelElementPointerManagerImpl : ProjectModelElementPointerManager {
    private object myLockObject;
    private ISolution mySolution;
    private IShellLocks myShellLocks;
    private WeakToStrongDictionary`2<IProjectModelElementPointer, PointerData> myData;
    private WeakToStrongDictionary`2<IProjectModelElement, FrugalWeakCollection`1<IProjectModelElementPointer>> myElementToPointerMap;
    private WeakToStrongDictionary`2<string, FrugalWeakCollection`1<IProjectModelElementPointer>> myPersistentIdToPointerMap;
    private static string INVALID_PERSISTENT_ID;
    public ProjectModelElementPointerManagerImpl(Lifetime lifetime, ISolution solution, IShellLocks shellLocks, ChangeManager changeManager);
    public virtual object Execute(IChangeMap changeMap);
    [CanBeNullAttribute]
private PointerData GetData(IProjectModelElementPointer pointer);
    private IEnumerable`1<IProjectModelElementPointer> FindPointers(IProjectModelElement element);
    private void AddPointer(IProjectModelElement element, IProjectModelElementPointer pointer);
    private IEnumerable`1<IProjectModelElementPointer> FindPointers(string persistentId);
    private void AddPointer(string persistentId, IProjectModelElementPointer pointer);
    public virtual IProjectModelElementPointer CreatePointer(IProjectModelElement element);
    public virtual IProjectModelElementPointer CreatePointer(string persistentId);
    public virtual IProjectModelElement GetValidProjectModelElement(IProjectModelElementPointer pointer);
    public virtual string GetPersistentId(IProjectModelElementPointer pointer);
    public virtual IList`1<IProjectModelElementPointer> GetAllPointersToTheSameElement(IProjectModelElementPointer pointer);
    public virtual void Dump(TextWriter writer, VirtualFileSystemPath basePath);
    private static string GetElementName(IProjectModelElement element, VirtualFileSystemPath basePath);
    private void ElementRemoved(IProjectModelElement element, string oldPersistentId);
    private void ElementAdded(IProjectModelElement element, string oldPersistentId);
    private void SqeezePointerData(IList`1<IProjectModelElementPointer> pointers);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_0();
}
[ProjectModelElementPresenterAttribute("1", "16")]
public class JetBrains.ProjectModel.Impl.ProjectModelElementPresenter : object {
    private ProjectModelIcons myProjectModelIcons;
    public ProjectModelElementPresenter(ProjectModelIcons projectModelIcons);
    public sealed virtual IconId GetIcon(IProjectModelElement element);
    private IconId GetProjectImage(IProject project);
    private IconId GetFileImage(IProjectFile file);
    public sealed virtual string GetPresentableLocation(IProjectModelElement projectModelElement);
    private static string GetSolutionFolderItemLocation(IProjectItem item);
    private static string GetProjectItemLocation(IProjectItem projectItem);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Impl.ProjectReferenceExtension : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static string GetReferencedName(IProjectToProjectReference projectToProjectReference);
}
internal class JetBrains.ProjectModel.Impl.ProjectsCollection : object {
    private HashSet`1<IProject> myAllProjects;
    private OneToSetMap`2<string, IProject> myProjectsByName;
    private Dictionary`2<IProject, string> myNamesByProject;
    private OneToSetMap`2<Guid, IProject> myProjectsByGuid;
    private IProject myMiscFilesProject;
    private SolutionElement mySolutionElement;
    public ProjectsCollection(SolutionElement solutionElement);
    public void OnProjectNameChanged(IProject project);
    public IEnumerable`1<IProject> GetAllProjects();
    public IEnumerable`1<IProject> GetTopLevelProjects();
    public void AddProject(IProject project);
    public void RemoveProject(IProject project);
    public IEnumerable`1<IProject> GetProjectsByName(string name);
    public IEnumerable`1<IProject> GetProjectsByGuid(Guid guid);
    public void OnProjectModelChange(ProjectModelChange projectModelChange);
    public bool ContainsProject(IProject project);
}
public class JetBrains.ProjectModel.Impl.ProjectToAssemblyReference : ProjectToModuleReferenceBase {
    [NotNullAttribute]
private AssemblyReferenceTarget myReferenceTarget;
    public Type MarshallerType { get; }
    public string Name { get; }
    public AssemblyReferenceTarget ReferenceTarget { get; }
    public ProjectToAssemblyReference(IProject containingProject, AssemblyReferenceTarget referenceTarget, TargetFrameworkId targetFrameworkId);
    public virtual Type get_MarshallerType();
    public virtual string get_Name();
    public sealed virtual AssemblyReferenceTarget get_ReferenceTarget();
    public virtual void Accept(ProjectVisitor visitor);
    public static ProjectToAssemblyReference CreateFromLocation(IProject project, VirtualFileSystemPath location, TargetFrameworkId targetFramework);
    public static ProjectToAssemblyReference CreateFromName(IProject project, AssemblyNameInfo assemblyName, TargetFrameworkId targetFramework);
    public virtual string ToString();
    public virtual void WriteReference(UnsafeWriter writer);
    public static ProjectToAssemblyReference ReadReference(UnsafeReader reader, ProjectImpl project);
}
public class JetBrains.ProjectModel.Impl.ProjectToComAssemblyReference : ProjectToAssemblyReference {
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <ManifestFilePath>k__BackingField;
    public VirtualFileSystemPath ManifestFilePath { get; }
    public ProjectToComAssemblyReference(IProject containingProject, VirtualFileSystemPath manifestFilePath, TargetFrameworkId targetFrameworkId);
    [CompilerGeneratedAttribute]
public sealed virtual VirtualFileSystemPath get_ManifestFilePath();
    private static AssemblyReferenceTarget CreateTarget(VirtualFileSystemPath manifestFilePath, IProject project, TargetFrameworkId targetFrameworkId);
    public virtual void WriteReference(UnsafeWriter writer);
    public static ProjectToComAssemblyReference ReadReference(UnsafeReader reader, ProjectImpl project);
}
public abstract class JetBrains.ProjectModel.Impl.ProjectToModuleReferenceBase : UserDataHolder {
    [NotNullAttribute]
private IProject myContainingProject;
    [NotNullAttribute]
private TargetFrameworkId myTargetFrameworkId;
    [CanBeNullAttribute]
private IModuleReferenceResolveContext myModuleReferenceResolveContextCache;
    [CompilerGeneratedAttribute]
private bool <CopyLocal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AliasList>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EmbedInteropTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoReferenced>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOutputAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReferenceOutputAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectElementOrigin <Origin>k__BackingField;
    public IProject OwnerModule { get; }
    public TargetFrameworkId TargetFrameworkId { get; }
    public IModuleReferenceResolveContext ModuleReferenceResolveContext { get; }
    public bool CopyLocal { get; public set; }
    public bool IsHidden { get; public set; }
    public string AliasList { get; public set; }
    public bool EmbedInteropTypes { get; public set; }
    public bool AutoReferenced { get; public set; }
    public bool IsOutputAssembly { get; public set; }
    public bool ReferenceOutputAssembly { get; public set; }
    public IProjectElementOrigin Origin { get; public set; }
    public Type MarshallerType { get; }
    public string Name { get; }
    protected ProjectToModuleReferenceBase(IProject containingProject, TargetFrameworkId targetFrameworkId);
    public sealed virtual IProject get_OwnerModule();
    public sealed virtual TargetFrameworkId get_TargetFrameworkId();
    public sealed virtual IModuleReferenceResolveContext get_ModuleReferenceResolveContext();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CopyLocal();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CopyLocal(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsHidden();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsHidden(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AliasList();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AliasList(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EmbedInteropTypes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EmbedInteropTypes(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AutoReferenced();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AutoReferenced(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsOutputAssembly();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsOutputAssembly(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReferenceOutputAssembly();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReferenceOutputAssembly(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IProjectElementOrigin get_Origin();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Origin(IProjectElementOrigin value);
    public sealed virtual IProject GetProject();
    public sealed virtual string GetPersistentID();
    public sealed virtual bool IsValid();
    public sealed virtual bool IsValidAndAlive();
    public abstract virtual Type get_MarshallerType();
    public sealed virtual bool IsReallyValid();
    public abstract virtual string get_Name();
    public abstract virtual void Accept(ProjectVisitor projectVisitor);
    public sealed virtual ISolution GetSolution();
    public sealed virtual object GetProperty(Key propertyName);
    public sealed virtual void SetProperty(Key properyName, object propetyValue);
    public virtual void Dispose();
    protected void WriteReferenceProperties(UnsafeWriter writer);
    protected static void ReadReferenceProperties(UnsafeReader reader, ProjectToModuleReferenceBase reference);
}
public class JetBrains.ProjectModel.Impl.ProjectToUnresolvedAssemblyReference : ProjectToModuleReferenceBase {
    [NotNullAttribute]
private AssemblyReferenceTarget myReferenceTarget;
    [NotNullAttribute]
private string myReason;
    public Type MarshallerType { get; }
    public string Name { get; }
    public AssemblyReferenceTarget ReferenceTarget { get; }
    public string Reason { get; }
    public ProjectToUnresolvedAssemblyReference(IProject containingProject, AssemblyReferenceTarget referenceTarget, TargetFrameworkId targetFrameworkId, string reason);
    public virtual void Accept(ProjectVisitor projectVisitor);
    public virtual Type get_MarshallerType();
    public virtual string get_Name();
    public sealed virtual AssemblyReferenceTarget get_ReferenceTarget();
    public sealed virtual string get_Reason();
    public virtual string ToString();
    public void WriteReference(UnsafeWriter writer);
    public static ProjectToUnresolvedAssemblyReference ReadReference(UnsafeReader reader, ProjectImpl project);
}
public class JetBrains.ProjectModel.Impl.RoslynAnalyzerReference : ProjectToModuleReferenceBase {
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <Location>k__BackingField;
    public VirtualFileSystemPath Location { get; }
    public string Name { get; }
    public Type MarshallerType { get; }
    public RoslynAnalyzerReference(IProject containingProject, TargetFrameworkId targetFrameworkId, VirtualFileSystemPath location);
    [CompilerGeneratedAttribute]
public sealed virtual VirtualFileSystemPath get_Location();
    public virtual string get_Name();
    public virtual Type get_MarshallerType();
    public virtual void Accept(ProjectVisitor projectVisitor);
    public virtual string ToString();
    public void WriteReference(UnsafeWriter writer);
    public static RoslynAnalyzerReference ReadReference(UnsafeReader reader, ProjectImpl project);
}
public interface JetBrains.ProjectModel.Impl.Sdk.ISdkManager {
    public IReadOnlyCollection`1<SdkInfo> Kits { get; }
    public abstract virtual IReadOnlyCollection`1<SdkInfo> get_Kits();
    public abstract virtual void Dump(TextWriter writer);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Impl.Sdk.SdkManagerEx : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static VirtualFileSystemPath GetToolPath(ISdkManager sdkManager, string exeName);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.Impl.Sdk.SdkManagerImpl : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<SdkInfo> <Kits>k__BackingField;
    public IReadOnlyCollection`1<SdkInfo> Kits { get; private set; }
    public SdkManagerImpl(Lifetime lifetime, FrameworkLocationService frameworkLocationService);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<SdkInfo> get_Kits();
    [CompilerGeneratedAttribute]
private void set_Kits(IReadOnlyCollection`1<SdkInfo> value);
    public sealed virtual void Dump(TextWriter writer);
    private void DetectSdk(IFrameworkLocationHelper helper);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0(Lifetime lt, IFrameworkLocationHelper helper);
}
public class JetBrains.ProjectModel.Impl.SimpleProjectToProjectReference : ProjectToModuleReferenceBase {
    [CanBeNullAttribute]
private string myName;
    [CompilerGeneratedAttribute]
private IProjectSearchDescriptor <TargetProjectSearchDescriptor>k__BackingField;
    [NotNullAttribute]
public IProjectSearchDescriptor TargetProjectSearchDescriptor { get; }
    public Type MarshallerType { get; }
    public string Name { get; }
    public VirtualFileSystemPath HintPath { get; }
    public SimpleProjectToProjectReference(IProject containingProject, IProjectSearchDescriptor targetProjectSearchDescriptor, string name, TargetFrameworkId targetFrameworkId);
    public SimpleProjectToProjectReference(IProject containingProject, IProject referencedProject, TargetFrameworkId targetFrameworkId);
    [CompilerGeneratedAttribute]
public IProjectSearchDescriptor get_TargetProjectSearchDescriptor();
    public virtual Type get_MarshallerType();
    public virtual string get_Name();
    public sealed virtual VirtualFileSystemPath get_HintPath();
    public virtual void Accept(ProjectVisitor projectVisitor);
    public void WriteReference(UnsafeWriter writer);
    public static SimpleProjectToProjectReference ReadReference(UnsafeReader reader, ProjectImpl project);
    public virtual string ToString();
    public sealed virtual IProjectSearchDescriptor GetTargetProjectSearchDescriptor();
}
public class JetBrains.ProjectModel.Impl.SolutionElement : ConcurrentUserDataHolder {
    public static string SolutionProjectName;
    public static string MiscellaneousFiles;
    public static Guid SolutionProjectGuid;
    public static Guid MiscellaneousFilesProjectGuid;
    [CanBeNullAttribute]
private IProjectFile mySolutionFile;
    [NotNullAttribute]
private IProject mySolutionProject;
    [NotNullAttribute]
private IProject myMiscFilesProject;
    private bool myIsDisposed;
    private LifetimeDefinition myLifetimeDefinition;
    private SequentialLifetimes mySolutionPathLifetimes;
    private SolutionLocation mySolutionLocation;
    [CompilerGeneratedAttribute]
private ISolutionOwner <SolutionOwner>k__BackingField;
    private ChangeManager myChangeManager;
    [CompilerGeneratedAttribute]
private IProjectFileExtensions <ProjectFileExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private IShellLocks <Locks>k__BackingField;
    private UserDataHolder myProperties;
    private bool myOpenFinished;
    private SolutionInstance mySolutionInstance;
    public IProperty`1<bool> IsBeingLoadedFromCache;
    private ReadonlyToken myToken;
    [CompilerGeneratedAttribute]
private IPlatformManager <PlatformManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectManager <ProjectManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileSystemTracker <FileSystemTracker>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssemblyCollection <AssemblyCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectModelBatchChangeManager <BatchChangeManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectsCollection <ProjectsCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private SolutionStructure <Structure>k__BackingField;
    [CompilerGeneratedAttribute]
private IWritableProjectModelTimestamps <Timestamps>k__BackingField;
    public ISolutionOwner SolutionOwner { get; }
    public IProjectFileExtensions ProjectFileExtensions { get; }
    public IShellLocks Locks { get; }
    public IPlatformManager PlatformManager { get; }
    public ProjectManager ProjectManager { get; private set; }
    public IFileSystemTracker FileSystemTracker { get; private set; }
    public IAssemblyCollection AssemblyCollection { get; private set; }
    public IProjectModelBatchChangeManager BatchChangeManager { get; }
    public SolutionInstance SolutionInstance { get; public set; }
    internal ProjectsCollection ProjectsCollection { get; }
    public SolutionStructure Structure { get; }
    private IProjectModelTimestamps JetBrains.ProjectModel.ISolution.Timestamps { get; }
    public IWritableProjectModelTimestamps Timestamps { get; }
    public VirtualFileSystemPath SolutionFilePath { get; }
    public VirtualFileSystemPath SolutionDirectory { get; }
    public string SolutionFilterFileNameWithExtension { get; }
    public string Name { get; }
    public bool IsTemporary { get; }
    public IProject MiscFilesProject { get; }
    public IProjectFile SolutionFile { get; }
    public IProject SolutionProject { get; }
    public Type MarshallerType { get; }
    public SolutionElement(SolutionLocation solutionLocation, ISolutionOwner solutionOwner, ChangeManager changeManager, IShellLocks locks, IPlatformManager platformManager);
    private static SolutionElement();
    [CompilerGeneratedAttribute]
public sealed virtual ISolutionOwner get_SolutionOwner();
    [CompilerGeneratedAttribute]
public sealed virtual IProjectFileExtensions get_ProjectFileExtensions();
    [CompilerGeneratedAttribute]
public sealed virtual IShellLocks get_Locks();
    [CompilerGeneratedAttribute]
public sealed virtual IPlatformManager get_PlatformManager();
    [CompilerGeneratedAttribute]
public ProjectManager get_ProjectManager();
    [CompilerGeneratedAttribute]
private void set_ProjectManager(ProjectManager value);
    [CompilerGeneratedAttribute]
public IFileSystemTracker get_FileSystemTracker();
    [CompilerGeneratedAttribute]
private void set_FileSystemTracker(IFileSystemTracker value);
    [CompilerGeneratedAttribute]
public IAssemblyCollection get_AssemblyCollection();
    [CompilerGeneratedAttribute]
private void set_AssemblyCollection(IAssemblyCollection value);
    [CompilerGeneratedAttribute]
public sealed virtual IProjectModelBatchChangeManager get_BatchChangeManager();
    public SolutionInstance get_SolutionInstance();
    public void set_SolutionInstance(SolutionInstance value);
    [CompilerGeneratedAttribute]
internal ProjectsCollection get_ProjectsCollection();
    [CompilerGeneratedAttribute]
public SolutionStructure get_Structure();
    private sealed virtual override IProjectModelTimestamps JetBrains.ProjectModel.ISolution.get_Timestamps();
    [CompilerGeneratedAttribute]
public IWritableProjectModelTimestamps get_Timestamps();
    private void SetSolutionLocation(SolutionLocation solutionLocation);
    public sealed virtual VirtualFileSystemPath get_SolutionFilePath();
    public sealed virtual VirtualFileSystemPath get_SolutionDirectory();
    public sealed virtual string get_SolutionFilterFileNameWithExtension();
    public sealed virtual ISolution GetSolution();
    private void CreateSolutionProject();
    private void CreateMiscellaneousProject();
    public sealed virtual string get_Name();
    public sealed virtual bool get_IsTemporary();
    public sealed virtual IProject get_MiscFilesProject();
    public void BeforeTransactionCommits(BeforeChangesCommitsEventArgs beforeChangesCommitsEventArgs);
    public sealed virtual IEnumerable`1<IProject> GetProjectsByName(string name);
    public sealed virtual IEnumerable`1<IProject> GetProjectsByGuid(Guid projectGuid);
    public sealed virtual object Execute(IChangeMap changeMap);
    public sealed virtual IReadOnlyCollection`1<IAssembly> GetAllAssemblies();
    public sealed virtual object GetProperty(Key propertyName);
    public sealed virtual void SetProperty(Key propertyName, object propertyValue);
    public IProject GetProjectByName(string name);
    public sealed virtual ICollection`1<IProject> GetTopLevelProjects();
    public void RemoveProjectImpl(IProject project);
    public sealed virtual IProjectFile get_SolutionFile();
    public void UpdateOutputAssemblies();
    public sealed virtual IProject get_SolutionProject();
    public sealed virtual bool IsValid();
    public sealed virtual bool IsValidAndAlive();
    public sealed virtual Type get_MarshallerType();
    public sealed virtual bool IsReallyValid();
    public sealed virtual ICollection`1<IProjectItem> FindProjectItemsByLocation(VirtualFileSystemPath location);
    public sealed virtual ICollection`1<IProject> GetAllProjects();
    internal void RemoveTopLevelProject(IProject project);
    public void AddTopLevelProject(IProject project);
    public void RenameSolutionFile(SolutionLocation newSolutionLocation);
    public sealed virtual void Dispose();
    public virtual string ToString();
    public sealed virtual void Dump(TextWriter to, DumpFlags flags);
    public static IProperty`1<FileSystemPath> GetSolutionSettingsStoragePathObsolete(Lifetime lifetime, SolutionFileLocationLive location, XmlExternalizationScope scope);
    [NotNullAttribute]
public static IProperty`1<VirtualFileSystemPath> GetSolutionSettingsStoragePath(Lifetime lifetime, SolutionFileLocationLive location, XmlExternalizationScope scope);
    public static string GetSolutionOrProjectLegacySettingsFileSuffix(XmlExternalizationScope scope);
    public static string GetSolutionOrProjectSettingsStorageFileSuffix(XmlExternalizationScope scope);
    public sealed virtual void Accept(ProjectVisitor visitor);
    public sealed virtual IProjectElement FindElementByPersistentID(string persistentID);
    public void InitializationCompleted();
    private void IgnoreSpecificFolders();
    public IDisposable StartAsyncLoading();
    [CompilerGeneratedAttribute]
private void <set_SolutionInstance>b__46_0();
    [CompilerGeneratedAttribute]
private void <BeforeTransactionCommits>b__75_0(ProjectModelChange change);
    [CompilerGeneratedAttribute]
private bool <RenameSolutionFile>b__99_0(IProjectItem item);
    [CompilerGeneratedAttribute]
private void <StartAsyncLoading>b__111_0();
    [CompilerGeneratedAttribute]
private void <StartAsyncLoading>b__111_1();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Impl.SolutionExtentions : object {
    [ExtensionAttribute]
public static bool IsVirtualSolution(ISolution solution);
    [ExtensionAttribute]
public static IProject AddProjectFromLocation(SolutionElement solution, IProjectProperties projectProperties, Guid projectGuid, VirtualFileSystemPath projectLocation, VirtualFileSystemPath projectFileLocation, string projectName);
    [ExtensionAttribute]
public static IProject AddProject(SolutionElement solution, ProjectImpl projectImpl);
    [ExtensionAttribute]
public static IProject AddProjectFromLocation(SolutionElement solution, IProjectProperties projectProperties, VirtualFileSystemPath projectFileLocation, Guid projectGuid);
}
public class JetBrains.ProjectModel.Impl.SolutionFormatVersion : object {
    public static string VS_DEFAULT_TECH_VERSION;
    public static string VS_2011_TECH_VERSION;
    public static string VS_2010_TECH_VERSION;
    public static string VS_2008_TECH_VERSION;
    public static string VS_2005_TECH_VERSION;
    private static List`1<SolutionFormatVersion> ourKnownVersions;
    public static SolutionFormatVersion Unknown;
    public static SolutionFormatVersion Default;
    [CompilerGeneratedAttribute]
private string <VsTechVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <MaxPlatformVersion>k__BackingField;
    [NotNullAttribute]
public string VsTechVersion { get; }
    [CanBeNullAttribute]
public Version MaxPlatformVersion { get; }
    private SolutionFormatVersion(string vsTechVersion, Version platformVersion);
    private static SolutionFormatVersion();
    public static SolutionFormatVersion Get(string value);
    [CompilerGeneratedAttribute]
public string get_VsTechVersion();
    [CompilerGeneratedAttribute]
public Version get_MaxPlatformVersion();
}
[ShellComponentAttribute("0")]
public class JetBrains.ProjectModel.Impl.SolutionLoadTasksSchedulerProviderImpl : object {
    protected IShellLocks Locks;
    public SolutionLoadTasksSchedulerProviderImpl(IShellLocks locks);
    public virtual ISolutionLoadTasksScheduler GetTasksScheduler();
}
[IsReadOnlyAttribute]
public class JetBrains.ProjectModel.impl.SolutionLocation : ValueType {
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <SolutionDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <SolutionFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SolutionFilterFileNameWithExtension>k__BackingField;
    public static SolutionLocation Empty;
    [NotNullAttribute]
public VirtualFileSystemPath SolutionDirectory { get; }
    [NotNullAttribute]
public VirtualFileSystemPath SolutionFilePath { get; }
    [CanBeNullAttribute]
public string SolutionFilterFileNameWithExtension { get; }
    public SolutionLocation(VirtualFileSystemPath solutionDirectory, VirtualFileSystemPath solutionFilePath, string solutionFilterFileNameWithExtension);
    private static SolutionLocation();
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_SolutionDirectory();
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_SolutionFilePath();
    [CompilerGeneratedAttribute]
public string get_SolutionFilterFileNameWithExtension();
    public bool IsValid();
    public bool IsTemporary();
    public static SolutionLocation CreateBySolutionFilePath(VirtualFileSystemPath solutionFileSystemPath, string solutionFilterFileNameWithExtension);
    public static SolutionLocation CreateBySolutionDirectory(VirtualFileSystemPath solutionDirectory);
    public static SolutionLocation CreateByExistenceOrFileExtension(VirtualFileSystemPath fileOrFolderPath);
}
public class JetBrains.ProjectModel.impl.SolutionManagerEvents : object {
    public ISignal`1<SolutionLocation> BeforeSolutionOpen;
    public ISimpleSignal SolutionElementCreated;
    public ISimpleSignal BeforeSolutionClosed;
}
[ShellComponentAttribute("10")]
public class JetBrains.ProjectModel.Impl.SolutionManagerImpl : SolutionManagerBase {
    protected ChangeManager myChangeManager;
    private IPlatformManager myPlatformManager;
    [CompilerGeneratedAttribute]
private IProjectImporter <ProjectImporter>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectFileExtensions <ProjectFileExtensions>k__BackingField;
    public bool IsRealSolutionOwner { get; }
    public IProjectImporter ProjectImporter { get; }
    protected IPlatformManager PlatformManager { get; }
    protected ChangeManager ChangeManager { get; }
    protected IProjectFileExtensions ProjectFileExtensions { get; protected set; }
    public SolutionManagerImpl(Lifetime lifetime, ShellPartCatalogSet catalogueSet, IComponentContainer componentContainer, SynchronizationPoints syncPoints, ChangeManager changeManager, IProjectImporter projectImporter, IShellLocks locks, IPlatformManager platformManager, IProjectFileExtensions projectFileExtensions, ISolutionLoadTasksSchedulerProvider schedulerProvider, IEnumerable`1<IQuerySolutionCloseHandler> querySolutionCloseHandlers, IEnumerable`1<ISolutionInstanceComponentContainerExtender> solutionInstanceComponentContainerExtenders, IEnumerable`1<ISolutionComponentContainerExtender> solutionComponentContainerExtenders, ILogger logger, IAsyncComposeManager asyncComposeManager);
    public virtual bool get_IsRealSolutionOwner();
    [CompilerGeneratedAttribute]
public IProjectImporter get_ProjectImporter();
    protected IPlatformManager get_PlatformManager();
    protected ChangeManager get_ChangeManager();
    [CompilerGeneratedAttribute]
protected IProjectFileExtensions get_ProjectFileExtensions();
    [CompilerGeneratedAttribute]
protected void set_ProjectFileExtensions(IProjectFileExtensions value);
    public sealed virtual object Execute(IChangeMap changeMap);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.Impl.SolutionManagerImpl/<CreateSolutionAsync>d__17")]
public Task`1<SolutionElement> CreateSolutionAsync(SolutionLocation solutionLocation);
    public SolutionElement CreateSolution(SolutionLocation solutionLocation);
    public void StartOpenExistingSolution(VirtualFileSystemPath solutionFilePath, Action callback);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.Impl.SolutionManagerImpl/<OpenExistingSolutionAsync>d__20")]
[ItemCanBeNullAttribute]
public Task`1<SolutionElement> OpenExistingSolutionAsync(VirtualFileSystemPath solutionFilePath);
    [CanBeNullAttribute]
public SolutionElement OpenExistingSolution(VirtualFileSystemPath solutionFilePath);
    public SolutionElement ImportProjectsFromExistingSolution(SolutionElement solution, VirtualFileSystemPath solutionFilePath, bool doRemoveOldProjects);
    public SolutionElement CreateSolutionWithCustomProcess(SolutionLocation solutionLocation, Action`1<SolutionElement> creator);
    public bool CloseSolution(ISolution solution);
    public IProject OpenExistingProject(SolutionElement solution, VirtualFileSystemPath projectFilePath);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0();
}
public class JetBrains.ProjectModel.Impl.SolutionStructure : object {
    private IShellLocks myLocks;
    private OneToSetMap`2<VirtualFileSystemPath, IProjectItem> myProjectItems;
    [CompilerGeneratedAttribute]
private JetHashSet`1<VirtualFileSystemPath> <AffectedSharedProjectItemPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private JetHashSet`1<VirtualFileSystemPath> <AllAffectedProjectItemPaths>k__BackingField;
    private ILogger myLogger;
    private JetHashSet`1<VirtualFileSystemPath> AffectedSharedProjectItemPaths { get; }
    private JetHashSet`1<VirtualFileSystemPath> AllAffectedProjectItemPaths { get; }
    public SolutionStructure(IShellLocks locks);
    [CompilerGeneratedAttribute]
private JetHashSet`1<VirtualFileSystemPath> get_AffectedSharedProjectItemPaths();
    [CompilerGeneratedAttribute]
private JetHashSet`1<VirtualFileSystemPath> get_AllAffectedProjectItemPaths();
    public void ClearAffectedPaths();
    public Pair`2<JetHashSet`1<VirtualFileSystemPath>, JetHashSet`1<VirtualFileSystemPath>> GetAffectedPathsAndClear();
    public void OnProjectItemAdded(IProjectItem projectItem);
    public void OnProjectItemRemoved(IProjectItem projectItem);
    public void OnProjectItemMoved(IProjectItem projectItem, VirtualFileSystemPath oldLocation);
    public ICollection`1<IProjectItem> FindProjectItems(VirtualFileSystemPath path);
    private bool AddProjectItem(IProjectItem projectItem);
    private void RemoveProjectItem(IProjectItem projectItem, VirtualFileSystemPath location);
    public void Dump(TextWriter writer);
    public void CheckValidity();
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.impl.SpecialFiles.SpecialFilesManager : object {
    private static Key`1<object> ourKey;
    private static Key`1<object> ourSecondKey;
    private static object ourRemovalSentinel;
    private IShellLocks myLocks;
    private ISolution mySolution;
    public SpecialFilesManager(ISolution solution, IShellLocks locks);
    private static SpecialFilesManager();
    public IProjectFile GetSpecialFile(VirtualFileSystemPath path);
    public bool IsSpecialFile(IProjectItem projectItem);
    [CanBeNullAttribute]
public IProjectFile FindSpecialFile(VirtualFileSystemPath path);
    public void MoveSpecialFile(IProjectFile projectFile, IProjectFolder newParentFolder);
    public IProjectFile CreateSpecialFile(string name, VirtualFileSystemPath path);
    public void ReleaseSpecialFile(VirtualFileSystemPath path);
    public void ReleaseSpecialFile(IProjectFile item);
    public bool IsNonProjectItem(IProjectItem projectFile);
}
[SolutionInstanceComponentAttribute("10")]
internal class JetBrains.ProjectModel.Impl.UnloadedProjectSupportManagerImpl : UnloadedProjectSupportManager {
    private Lifetime myLifetime;
    private ISolution mySolution;
    private Dictionary`2<Guid, Dictionary`2<Guid, Pair`2<IProjectReferenceDescriptor, IProjectReferenceProperties>>> myCreatedDescriptors;
    private IShellLocks myLocks;
    private ProjectReferenceFactory myProjectReferenceFactory;
    private ISignal`1<IProject> myBeforeProjectUnloaded;
    private ISignal`1<Guid> myAfterProjectReloaded;
    [CompilerGeneratedAttribute]
private ISignal`1<Dictionary`2<Guid, Pair`2<IProjectReferenceDescriptor, IProjectReferenceProperties>>> <ReferencesToAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<Dictionary`2<Guid, Pair`2<IProjectReferenceDescriptor, IProjectReferenceProperties>>> <ReferencesToRemove>k__BackingField;
    public ISignal`1<Dictionary`2<Guid, Pair`2<IProjectReferenceDescriptor, IProjectReferenceProperties>>> ReferencesToAdd { get; }
    public ISignal`1<Dictionary`2<Guid, Pair`2<IProjectReferenceDescriptor, IProjectReferenceProperties>>> ReferencesToRemove { get; }
    public ISignal`1<IProject> BeforeProjectUnloadedSignal { get; }
    public ISignal`1<Guid> AfterProjectReloadedSignal { get; }
    public UnloadedProjectSupportManagerImpl(Lifetime lifetime, ISolution solution, IShellLocks locks, ProjectReferenceFactory projectReferenceFactory);
    public virtual void AfterProjectLoaded(IProject project);
    public virtual void BeforeProjectRemoved(IProject project);
    public virtual void AfterProjectReloaded(Guid projectGuid);
    public virtual void BeforeUnloadedProjectRemoved(Guid projectGuid);
    [CompilerGeneratedAttribute]
public virtual ISignal`1<Dictionary`2<Guid, Pair`2<IProjectReferenceDescriptor, IProjectReferenceProperties>>> get_ReferencesToAdd();
    [CompilerGeneratedAttribute]
public virtual ISignal`1<Dictionary`2<Guid, Pair`2<IProjectReferenceDescriptor, IProjectReferenceProperties>>> get_ReferencesToRemove();
    public virtual ISignal`1<IProject> get_BeforeProjectUnloadedSignal();
    public virtual ISignal`1<Guid> get_AfterProjectReloadedSignal();
    public virtual void BeforeProjectUnloaded(IProject unloadedProject);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_0();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.InitializationStrategyForNestedSolutionContainerProvider : object {
    [ExtensionAttribute]
public static IInitializationStrategy GetParallelInitializationStrategyForNestedContainer(ISolution solution, IAsyncComposeManager asyncComposeManager);
    [ExtensionAttribute]
public static IInitializationStrategy GetParallelInitializationStrategyForNestedContainer(SolutionInstance solutionInstance, IAsyncComposeManager asyncComposeManager);
}
public interface JetBrains.ProjectModel.Interfaces.IProjectContextProvider {
    [NotNullAttribute]
public ISignal`1<IProjectSearchDescriptor> ContextChanged { get; }
    public abstract virtual ISignal`1<IProjectSearchDescriptor> get_ContextChanged();
    [CanBeNullAttribute]
public abstract virtual TargetFrameworkId TryGetCurrentTargetFrameworkId(IProjectSearchDescriptor projectSearchDescriptor, Boolean& isAutomatic);
    public abstract virtual bool TrySetCurrentTargetFrameworkId(IProjectSearchDescriptor projectSearchDescriptor, TargetFrameworkId targetFrameworkId);
}
public interface JetBrains.ProjectModel.Interfaces.IProjectHasPsiService {
    public abstract virtual bool ProjectHasPsi(IProject project);
    public abstract virtual void RegisterProvider(Lifetime lifetime, Func`2<IProject, Nullable`1<bool>> checkProjectCrlFunc);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.Interfaces.ProjectContext : object {
    private ILogger myLogger;
    private HashSet`1<IProjectContextProvider> myProviders;
    [NullableAttribute("2")]
private IProjectContextProvider myLastChangedProvider;
    [CompilerGeneratedAttribute]
private ISignal`1<IProjectSearchDescriptor> <ContextChanged>k__BackingField;
    public ISignal`1<IProjectSearchDescriptor> ContextChanged { get; }
    public ProjectContext(Lifetime lifetime, ILogger logger, IEnumerable`1<IProjectContextProvider> providers);
    [CompilerGeneratedAttribute]
public ISignal`1<IProjectSearchDescriptor> get_ContextChanged();
    public void AddProvider(Lifetime lifetime, IProjectContextProvider provider);
    [PureAttribute]
public TargetFrameworkId GetCurrentTargetFrameworkId(IProject project);
    [PureAttribute]
public TargetFrameworkId GetCurrentTargetFrameworkId(IProject project, Boolean& isAutomatic);
    public bool TrySetCurrentTargetFrameworkId(IProject project, TargetFrameworkId targetFrameworkId);
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.Interop.BackendToVisualStudioInterop : object {
    [CompilerGeneratedAttribute]
private ISignal`1<Pair`2<JetHashSet`1<VirtualFileSystemPath>, JetHashSet`1<VirtualFileSystemPath>>> <AddedOrRemovedItemPaths>k__BackingField;
    public ISignal`1<Pair`2<JetHashSet`1<VirtualFileSystemPath>, JetHashSet`1<VirtualFileSystemPath>>> AddedOrRemovedItemPaths { get; }
    public BackendToVisualStudioInterop(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<Pair`2<JetHashSet`1<VirtualFileSystemPath>, JetHashSet`1<VirtualFileSystemPath>>> get_AddedOrRemovedItemPaths();
}
[SolutionInstanceComponentAttribute("16")]
internal class JetBrains.ProjectModel.Interop.FrontendChangeHandler : object {
    private Lifetime myLifetime;
    private IShellLocks myLocks;
    private ILogger myLogger;
    private IBackendProjectModelLocator myBackendProjectModelLocator;
    private ISolution mySolution;
    public FrontendChangeHandler(Lifetime lifetime, ISolution solution, ILogger logger, IShellLocks locks, IBackendProjectModelLocator projectModelLocator);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.Interop.FrontendChangeHandler/<HandleRenameAsync>d__6")]
public sealed virtual Task`1<IList`1<RenameRequest>> HandleRenameAsync(IList`1<RenameRequest> renames);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.Interop.FrontendChangeHandler/<HandleRemoveProjectAsync>d__7")]
public sealed virtual Task HandleRemoveProjectAsync(IProjectSearchDescriptor projectSearchDescriptor);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.Interop.FrontendChangeHandler/<HandleRemoveAsync>d__8")]
public sealed virtual Task HandleRemoveAsync(IList`1<IProjectFileOrFolderSearchDescriptor> removes);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.Interop.FrontendChangeHandler/<HandleUpdateProjectFilePropertiesAsync>d__9")]
public sealed virtual Task HandleUpdateProjectFilePropertiesAsync(List`1<Tuple`3<IProjectSearchDescriptor, VirtualFileSystemPath, IProjectFileProperties>> fileProperties);
    private static int GetPropertiesMatchScore(IProjectFile projectFile, IProjectFileProperties properties);
    private bool HandleRenameRequest(RenameRequest renameRequest);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.Interop.FrontendChangeHandler/<HandleMoveProjectAsync>d__12")]
public sealed virtual Task HandleMoveProjectAsync(IProjectSearchDescriptor projectSearchDescriptor, IProjectSearchDescriptor parentSearchDescriptor);
}
public interface JetBrains.ProjectModel.Interop.IBackendToVisualStudioInterop {
    public ISignal`1<Pair`2<JetHashSet`1<VirtualFileSystemPath>, JetHashSet`1<VirtualFileSystemPath>>> AddedOrRemovedItemPaths { get; }
    public abstract virtual ISignal`1<Pair`2<JetHashSet`1<VirtualFileSystemPath>, JetHashSet`1<VirtualFileSystemPath>>> get_AddedOrRemovedItemPaths();
}
public interface JetBrains.ProjectModel.Interop.IFrontendChangeHandler {
    public abstract virtual Task`1<IList`1<RenameRequest>> HandleRenameAsync(IList`1<RenameRequest> renames);
    public abstract virtual Task HandleRemoveProjectAsync(IProjectSearchDescriptor projectSearchDescriptor);
    public abstract virtual Task HandleRemoveAsync(IList`1<IProjectFileOrFolderSearchDescriptor> removes);
    public abstract virtual Task HandleUpdateProjectFilePropertiesAsync(List`1<Tuple`3<IProjectSearchDescriptor, VirtualFileSystemPath, IProjectFileProperties>> fileProperties);
    public abstract virtual Task HandleMoveProjectAsync(IProjectSearchDescriptor projectSearchDescriptor, IProjectSearchDescriptor parentSearchDescriptor);
}
public class JetBrains.ProjectModel.Interop.RenameRequest : object {
    [CompilerGeneratedAttribute]
private IProjectSearchDescriptor <ProjectSearchDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <OldPath>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <NewPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHitemForNewFileFound>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAlreadyOnDisk>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowTargetDirectoryCreation>k__BackingField;
    [CanBeNullAttribute]
public IProjectSearchDescriptor ProjectSearchDescriptor { get; }
    [NotNullAttribute]
public VirtualFileSystemPath OldPath { get; }
    [NotNullAttribute]
public VirtualFileSystemPath NewPath { get; }
    public bool IsHitemForNewFileFound { get; }
    public bool IsAlreadyOnDisk { get; }
    public bool AllowTargetDirectoryCreation { get; }
    public RenameRequest(IProjectSearchDescriptor projectSearchDescriptor, VirtualFileSystemPath oldPath, VirtualFileSystemPath newPath, bool isAlreadyOnDisk, bool isHitemForNewFileFound, bool allowTargetDirectoryCreation);
    [CompilerGeneratedAttribute]
public IProjectSearchDescriptor get_ProjectSearchDescriptor();
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_OldPath();
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_NewPath();
    [CompilerGeneratedAttribute]
public bool get_IsHitemForNewFileFound();
    [CompilerGeneratedAttribute]
public bool get_IsAlreadyOnDisk();
    [CompilerGeneratedAttribute]
public bool get_AllowTargetDirectoryCreation();
}
public interface JetBrains.ProjectModel.IProject {
    public IProperty`1<VirtualFileSystemPath> ProjectFileLocationLive { get; }
    public IProperty`1<VirtualFileSystemPath> ProjectLocationLive { get; }
    [NotNullAttribute]
public IReadOnlyList`1<TargetFrameworkId> TargetFrameworkIds { get; }
    [CanBeNullAttribute]
public IProjectFile ProjectFile { get; }
    public Guid Guid { get; }
    public bool IsOpened { get; public set; }
    [NotNullAttribute]
public IProjectProperties ProjectProperties { get; }
    public VirtualFileSystemPath ProjectFileLocation { get; }
    public abstract virtual IProperty`1<VirtualFileSystemPath> get_ProjectFileLocationLive();
    public abstract virtual IProperty`1<VirtualFileSystemPath> get_ProjectLocationLive();
    public abstract virtual IReadOnlyList`1<TargetFrameworkId> get_TargetFrameworkIds();
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<IProjectToModuleReference> GetModuleReferences(TargetFrameworkId targetFrameworkId);
    public abstract virtual IProjectFile get_ProjectFile();
    public abstract virtual Guid get_Guid();
    public abstract virtual bool get_IsOpened();
    public abstract virtual void set_IsOpened(bool value);
    public abstract virtual IProjectProperties get_ProjectProperties();
    public abstract virtual VirtualFileSystemPath get_ProjectFileLocation();
    [PureAttribute]
public abstract virtual bool HasFlavour();
    [NotNullAttribute]
public abstract virtual VirtualFileSystemPath GetOutputDirectory(TargetFrameworkId targetFrameworkId);
    [NotNullAttribute]
public abstract virtual VirtualFileSystemPath GetOutputFilePath(TargetFrameworkId targetFrameworkId);
    [NotNullAttribute]
public abstract virtual VirtualFileSystemPath GetIntermediateDirectory(TargetFrameworkId targetFrameworkId);
    [NotNullAttribute]
public abstract virtual VirtualFileSystemPath GetRefOutputFilePath(TargetFrameworkId targetFrameworkId);
    [NotNullAttribute]
public abstract virtual ICollection`1<VirtualFileSystemPath> GetOutputDirectories();
    [NotNullAttribute]
public abstract virtual ICollection`1<VirtualFileSystemPath> GetIntermediateDirectories();
    [NotNullAttribute]
public abstract virtual TComponent GetComponent();
    [CanBeNullAttribute]
public abstract virtual ProjectTargetFrameworkScope GetTargetFrameworkScope(TargetFrameworkId targetFrameworkId);
    public abstract virtual IEnumerable`1<TargetFrameworkScope> GetAllTargetFrameworks();
}
public interface JetBrains.ProjectModel.IProjectCollection {
    [NotNullAttribute]
public abstract virtual ICollection`1<IProject> GetAllProjects();
}
public interface JetBrains.ProjectModel.IProjectElement {
    [CanBeNullAttribute]
[PureAttribute]
public abstract virtual IProject GetProject();
    [NotNullAttribute]
[PureAttribute]
public abstract virtual string GetPersistentID();
}
public interface JetBrains.ProjectModel.IProjectFile {
    [NotNullAttribute]
public ProjectFileType LanguageType { get; }
    public ModificationStamp LastInMemoryModificationStamp { get; public set; }
    public ModificationStamp LastExternalModificationStamp { get; }
    public DateTime LastWriteTimeUtc { get; }
    public bool IsMissing { get; }
    public bool HasChangedExternallySinceLastReconciliation { get; }
    public bool HasChangedInMemorySinceLastReconciliation { get; }
    public bool IsFileSystemReadonly { get; }
    public IProjectFileProperties Properties { get; }
    [NotNullAttribute]
public IProjectElementOrigin Origin { get; public set; }
    public abstract virtual ProjectFileType get_LanguageType();
    public abstract virtual ModificationStamp get_LastInMemoryModificationStamp();
    public abstract virtual void set_LastInMemoryModificationStamp(ModificationStamp value);
    public abstract virtual ModificationStamp get_LastExternalModificationStamp();
    public abstract virtual DateTime get_LastWriteTimeUtc();
    public abstract virtual bool get_IsMissing();
    public abstract virtual void MarkReconciledWithInMemoryVersion();
    public abstract virtual void MarkReconciledWithExternalVersion();
    public abstract virtual bool get_HasChangedExternallySinceLastReconciliation();
    public abstract virtual bool get_HasChangedInMemorySinceLastReconciliation();
    public abstract virtual bool get_IsFileSystemReadonly();
    [CanBeNullAttribute]
public abstract virtual Stream CreateReadStream(Lifetime lifetime);
    [CanBeNullAttribute]
public abstract virtual Stream CreateWriteStream(Lifetime lifetime);
    public abstract virtual IProjectFileProperties get_Properties();
    public abstract virtual IProjectElementOrigin get_Origin();
    public abstract virtual void set_Origin(IProjectElementOrigin value);
    [CanBeNullAttribute]
public abstract virtual IProjectFile GetDependsUponFile();
    public abstract virtual ICollection`1<IProjectFile> GetDependentFiles();
    public abstract virtual void UpdatePropertiesFrom(IProjectFileProperties properties);
}
public interface JetBrains.ProjectModel.IProjectFileExtensions {
    public ISimpleSignal Changed { get; }
    [NotNullAttribute]
public abstract virtual ProjectFileType GetFileType(string extension);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<string> GetExtensions(ProjectFileType fileType);
    public abstract virtual ISimpleSignal get_Changed();
}
public interface JetBrains.ProjectModel.IProjectFileTypeFilter {
    public abstract virtual bool Supports(ProjectFileType fileType);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ProjectModel.IProjectFileTypes {
    [NotNullAttribute]
public IEnumerable`1<ProjectFileType> All { get; }
    [CanBeNullAttribute]
public abstract virtual ProjectFileType GetFileType(string fileTypeName);
    public abstract virtual IEnumerable`1<ProjectFileType> get_All();
}
public interface JetBrains.ProjectModel.IProjectFileUpdater {
    public abstract virtual void OnItemAdded(ProjectItemChange addChange);
    public abstract virtual void OnItemRemoved(ProjectItemChange changeDelta);
    public abstract virtual void OnItemMoved(ProjectItemChange moveChange);
    public abstract virtual void OnPropertyChanged(ProjectItemChange itemChange);
    public abstract virtual void OnReferenceAdded(ProjectReferenceChange projectRefChange);
    public abstract virtual void OnReferenceRemoved(ProjectReferenceChange modRefChange);
}
public interface JetBrains.ProjectModel.IProjectFolder {
    [CanBeNullAttribute]
public ProjectFolderPath Path { get; }
    [CanBeNullAttribute]
[ObsoleteAttribute("Use the method if and only if you're 100% sure there's only one project item expected. Use ProjectFolderEx.FindProjectItemsByLocation otherwise.")]
public abstract virtual IProjectItem FindProjectItemByLocation(VirtualFileSystemPath location);
    [ObsoleteAttribute("Use the method if and only if you're 100% sure there's only one project item expected. Use GetSubItems/GetSubFiles/GetSubFolders/GetNotLinkedSubFolder otherwise.")]
[CanBeNullAttribute]
public abstract virtual IProjectItem GetSubItem(string name);
    public abstract virtual ReadOnlyFrugalLocalList`1<IProjectItem> GetSubItems(string name);
    public abstract virtual IList`1<IProjectItem> GetSubItems();
    public abstract virtual ProjectFolderPath get_Path();
    [CanBeNullAttribute]
public abstract virtual IProjectFolder GetSubFolderByPath(ProjectFolderPath projectFolderPath);
}
internal interface JetBrains.ProjectModel.IProjectFolderActions {
    public abstract virtual void RemoveSubItem(ProjectItemBase child);
    public abstract virtual void OnSubItemMoved(IProjectItem subItem, string oldName);
}
public interface JetBrains.ProjectModel.IProjectItem {
    [CanBeNullAttribute]
public IProjectFolder ParentFolder { get; }
    public VirtualFileSystemPath Location { get; }
    public ProjectItemKind Kind { get; }
    public bool IsLinked { get; }
    public IShellLocks Locks { get; }
    public abstract virtual void Dump(TextWriter to, DumpFlags flags);
    public abstract virtual IProjectFolder get_ParentFolder();
    public abstract virtual VirtualFileSystemPath get_Location();
    public abstract virtual ProjectItemKind get_Kind();
    public abstract virtual string GetPresentableProjectPath();
    public abstract virtual bool get_IsLinked();
    public abstract virtual IShellLocks get_Locks();
}
internal interface JetBrains.ProjectModel.IProjectItemActions {
}
public interface JetBrains.ProjectModel.IProjectModelChangeDeltaVisitor {
    public abstract virtual void VisitDelta(ProjectModelChange changeDelta);
    public abstract virtual void VisitItemDelta(ProjectItemChange change);
    public abstract virtual void VisitProjectReferenceDelta(ProjectReferenceChange change);
    public abstract virtual void VisitSolutionDelta(SolutionChange change);
    public abstract virtual void VisitAssemblyDelta(AssemblyChange assemblyChange);
    public abstract virtual void VisitAssemblyFileDelta(AssemblyFileChange change);
    public abstract virtual void VisitSdkReferenceDelta(ProjectSdkReferenceChange projectSdkReferenceChange);
}
public interface JetBrains.ProjectModel.IProjectModelElement {
    [NotNullAttribute]
public string Name { get; }
    [CanBeNullAttribute]
public Type MarshallerType { get; }
    public abstract virtual void Accept(ProjectVisitor projectVisitor);
    [NotNullAttribute]
[PureAttribute]
public abstract virtual ISolution GetSolution();
    public abstract virtual object GetProperty(Key propertyName);
    public abstract virtual void SetProperty(Key propertyName, object propertyValue);
    public abstract virtual string get_Name();
    public abstract virtual bool IsValid();
    public abstract virtual bool IsValidAndAlive();
    public abstract virtual Type get_MarshallerType();
}
internal interface JetBrains.ProjectModel.IProjectModelElementInternal {
    public abstract virtual bool IsReallyValid();
}
public interface JetBrains.ProjectModel.IProjectModelElementPointer {
}
public interface JetBrains.ProjectModel.IProjectModelElementPresenter {
    [CanBeNullAttribute]
public abstract virtual IconId GetIcon(IProjectModelElement projectModelElement);
    [CanBeNullAttribute]
public abstract virtual string GetPresentableLocation(IProjectModelElement projectModelElement);
}
public interface JetBrains.ProjectModel.IProjectModelTimestamps {
    public int AnyChange { get; }
    public int ProjectItemLocations { get; }
    public int ProjectFileTypes { get; }
    public abstract virtual int get_AnyChange();
    public abstract virtual int get_ProjectItemLocations();
    public abstract virtual int get_ProjectFileTypes();
}
[ZoneDefinitionAttribute]
public interface JetBrains.ProjectModel.IProjectModelZone {
}
public interface JetBrains.ProjectModel.IProjectPresentablePathProvider {
    public abstract virtual string GetPresentableProjectPath(IProjectItem projectItem);
}
public interface JetBrains.ProjectModel.IProjectPropertiesUpdater {
    public abstract virtual void RequestProjectPropertiesUpdate(IProject project);
    public abstract virtual void RequestProjectPropertiesUpdate(IEnumerable`1<IProject> projects);
}
public interface JetBrains.ProjectModel.IProjectReferenceWithoutResolve {
}
public interface JetBrains.ProjectModel.IProjectToAssemblyReference {
}
public interface JetBrains.ProjectModel.IProjectToComAssemblyReference {
    [NotNullAttribute]
public VirtualFileSystemPath ManifestFilePath { get; }
    public abstract virtual VirtualFileSystemPath get_ManifestFilePath();
}
public interface JetBrains.ProjectModel.IProjectToModuleReference {
    public IProject OwnerModule { get; }
    public bool IsHidden { get; public set; }
    public bool CopyLocal { get; public set; }
    public bool EmbedInteropTypes { get; public set; }
    public bool AutoReferenced { get; public set; }
    public bool IsOutputAssembly { get; public set; }
    public bool ReferenceOutputAssembly { get; public set; }
    [NotNullAttribute]
public string AliasList { get; public set; }
    [NotNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; }
    [NotNullAttribute]
public IProjectElementOrigin Origin { get; public set; }
    public abstract virtual IProject get_OwnerModule();
    public abstract virtual bool get_IsHidden();
    public abstract virtual void set_IsHidden(bool value);
    public abstract virtual bool get_CopyLocal();
    public abstract virtual void set_CopyLocal(bool value);
    public abstract virtual bool get_EmbedInteropTypes();
    public abstract virtual void set_EmbedInteropTypes(bool value);
    public abstract virtual bool get_AutoReferenced();
    public abstract virtual void set_AutoReferenced(bool value);
    public abstract virtual bool get_IsOutputAssembly();
    public abstract virtual void set_IsOutputAssembly(bool value);
    public abstract virtual bool get_ReferenceOutputAssembly();
    public abstract virtual void set_ReferenceOutputAssembly(bool value);
    public abstract virtual string get_AliasList();
    public abstract virtual void set_AliasList(string value);
    public abstract virtual TargetFrameworkId get_TargetFrameworkId();
    public abstract virtual IProjectElementOrigin get_Origin();
    public abstract virtual void set_Origin(IProjectElementOrigin value);
}
public interface JetBrains.ProjectModel.IProjectToPackageReference {
    public IProject OwnerModule { get; }
    [CanBeNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; }
    [NotNullAttribute]
public INugetReferenceSpec ReferenceTargetSpec { get; }
    public abstract virtual IProject get_OwnerModule();
    public abstract virtual TargetFrameworkId get_TargetFrameworkId();
    public abstract virtual INugetReferenceSpec get_ReferenceTargetSpec();
}
public interface JetBrains.ProjectModel.IProjectToProjectReference {
    public VirtualFileSystemPath HintPath { get; }
    public abstract virtual VirtualFileSystemPath get_HintPath();
    public abstract virtual IProjectSearchDescriptor GetTargetProjectSearchDescriptor();
}
public interface JetBrains.ProjectModel.IProjectToUnresolvedAssemblyReference {
    [NotNullAttribute]
public AssemblyReferenceTarget ReferenceTarget { get; }
    [NotNullAttribute]
public string Reason { get; }
    public abstract virtual AssemblyReferenceTarget get_ReferenceTarget();
    public abstract virtual string get_Reason();
}
public interface JetBrains.ProjectModel.IQuerySolutionCloseHandler {
    public abstract virtual bool QuerySolutionClose(ISolution solution);
}
public interface JetBrains.ProjectModel.IRoslynAnalyzerReference {
    [NotNullAttribute]
public VirtualFileSystemPath Location { get; }
    public abstract virtual VirtualFileSystemPath get_Location();
}
public interface JetBrains.ProjectModel.ISdkModule {
    public VirtualFileSystemPath ContentRootFolder { get; }
    public ICollection`1<VirtualFileSystemPath> SdkContentFiles { get; }
    public string SdkIdentity { get; }
    public TargetPlatformData TargetPlatformData { get; }
    public SdkModuleInfo SDKModuleInfo { get; }
    public abstract virtual VirtualFileSystemPath get_ContentRootFolder();
    public abstract virtual ICollection`1<VirtualFileSystemPath> get_SdkContentFiles();
    public abstract virtual string get_SdkIdentity();
    public abstract virtual TargetPlatformData get_TargetPlatformData();
    public abstract virtual SdkModuleInfo get_SDKModuleInfo();
}
public interface JetBrains.ProjectModel.IShellComponentDependentFromSolutionComponent {
}
public interface JetBrains.ProjectModel.IShellComponentDependentFromSolutionComponent`1 {
    public IProperty`1<TSolutionComponent> SolutionComponent { get; }
    public abstract virtual IProperty`1<TSolutionComponent> get_SolutionComponent();
}
public interface JetBrains.ProjectModel.IShouldBeInstantiatedBeforeProjectFileTypes {
}
public interface JetBrains.ProjectModel.ISolution {
    [NotNullAttribute]
public IProjectModelBatchChangeManager BatchChangeManager { get; }
    [NotNullAttribute]
public IProjectModelTimestamps Timestamps { get; }
    [NotNullAttribute]
public IShellLocks Locks { get; }
    [NotNullAttribute]
public IPlatformManager PlatformManager { get; }
    [NotNullAttribute]
public VirtualFileSystemPath SolutionFilePath { get; }
    [NotNullAttribute]
public VirtualFileSystemPath SolutionDirectory { get; }
    [CanBeNullAttribute]
public string SolutionFilterFileNameWithExtension { get; }
    [CanBeNullAttribute]
public IProjectFile SolutionFile { get; }
    [NotNullAttribute]
public IProject SolutionProject { get; }
    [NotNullAttribute]
public IProject MiscFilesProject { get; }
    [NotNullAttribute]
public IProjectFileExtensions ProjectFileExtensions { get; }
    public bool IsTemporary { get; }
    public ISolutionOwner SolutionOwner { get; }
    public abstract virtual IProjectModelBatchChangeManager get_BatchChangeManager();
    public abstract virtual IProjectModelTimestamps get_Timestamps();
    public abstract virtual IShellLocks get_Locks();
    public abstract virtual IPlatformManager get_PlatformManager();
    public abstract virtual VirtualFileSystemPath get_SolutionFilePath();
    public abstract virtual VirtualFileSystemPath get_SolutionDirectory();
    public abstract virtual string get_SolutionFilterFileNameWithExtension();
    public abstract virtual IProjectFile get_SolutionFile();
    public abstract virtual IProject get_SolutionProject();
    public abstract virtual IProject get_MiscFilesProject();
    public abstract virtual IProjectFileExtensions get_ProjectFileExtensions();
    public abstract virtual bool get_IsTemporary();
    public abstract virtual ISolutionOwner get_SolutionOwner();
    public abstract virtual void Dump(TextWriter to, DumpFlags flags);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IProject> GetProjectsByName(string name);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IProject> GetProjectsByGuid(Guid projectGuid);
    [CanBeNullAttribute]
public abstract virtual IProjectElement FindElementByPersistentID(string persistentID);
    [NotNullAttribute]
public abstract virtual ICollection`1<IProjectItem> FindProjectItemsByLocation(VirtualFileSystemPath location);
    [NotNullAttribute]
public abstract virtual ICollection`1<IProject> GetTopLevelProjects();
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<IAssembly> GetAllAssemblies();
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ProjectModel.ISolutionComponentContainerExtender {
}
public interface JetBrains.ProjectModel.ISolutionExplorer {
    public abstract virtual bool ShowInSolutionExplorer(IProjectModelElementSearchDescriptor projectItem, bool activate);
    public abstract virtual bool CollapseInSolutionExplorer(IEnumerable`1<CollapseRequest> collapseRequests);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ProjectModel.ISolutionInstanceComponentContainerExtender {
}
public interface JetBrains.ProjectModel.ISolutionOwner {
    public bool IsRealSolutionOwner { get; }
    public SolutionManagerEvents SolutionManagerEvents { get; }
    public abstract virtual bool IsSolutionValid(ISolution solution);
    public abstract virtual bool get_IsRealSolutionOwner();
    public abstract virtual SolutionManagerEvents get_SolutionManagerEvents();
    public abstract virtual T GetComponent();
}
public interface JetBrains.ProjectModel.ISolutionToolset {
    [NotNullAttribute]
public ISignal`1<RuntimeAndToolset> Changed { get; }
    [NotNullAttribute]
public abstract virtual RuntimeAndToolset GetRuntimeAndToolset();
    [ItemNotNullAttribute]
public abstract virtual ValueTask`1<RuntimeAndToolset> GetRuntimeAndToolsetAsync();
    public abstract virtual void Refresh();
    public abstract virtual ISignal`1<RuntimeAndToolset> get_Changed();
}
public interface JetBrains.ProjectModel.ISolutionToolsetListener {
    public abstract virtual void Changed(RuntimeAndToolset runtimeAndToolset);
}
public interface JetBrains.ProjectModel.ISourceGeneratorMonitor {
    public Property`1<bool> IsUpToDate { get; }
    public Property`1<bool> Initialized { get; }
    public abstract virtual void OnOperation(Lifetime lifetime, string operationName);
    public abstract virtual Property`1<bool> get_IsUpToDate();
    public abstract virtual Property`1<bool> get_Initialized();
    public abstract virtual void OnRoslynResultWithoutSourceGenerators(VirtualFileSystemPath projectFilePath, TargetFrameworkId targetFrameworkId);
    public abstract virtual void OnRoslynResultRequested(VirtualFileSystemPath projectFilePath, TargetFrameworkId targetFrameworkId);
    public abstract virtual void OnRoslynResultReceived(VirtualFileSystemPath projectFilePath, TargetFrameworkId targetFrameworkId);
}
public interface JetBrains.ProjectModel.ITargetFrameworkIdDetector {
    public ISignal`1<VirtualFileSystemPath> TargetFrameworkIdsChanged { get; }
    public abstract virtual ISignal`1<VirtualFileSystemPath> get_TargetFrameworkIdsChanged();
    public abstract virtual IReadOnlyCollection`1<TargetFrameworkId> GetTargetFrameworkIds(VirtualFileSystemPath projectFilePath, Func`2<string, string> getPropertyValue, Func`1<IReadOnlyCollection`1<TargetFrameworkId>> getDefaultValue);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.ITargetFrameworkIdDetectorEx : object {
    [ExtensionAttribute]
public static IReadOnlyCollection`1<TargetFrameworkId> GetTargetFrameworkIds(ITargetFrameworkIdDetector detector, IProject project, Func`2<string, string> getPropertyValue, Func`1<IReadOnlyCollection`1<TargetFrameworkId>> getDefaultValue);
}
public interface JetBrains.ProjectModel.ITargetFrameworkIdProvider {
    public int Priority { get; }
    public ISignal`1<VirtualFileSystemPath> TargetFrameworkIdsChanged { get; }
    public abstract virtual int get_Priority();
    public abstract virtual ISignal`1<VirtualFileSystemPath> get_TargetFrameworkIdsChanged();
    public abstract virtual IReadOnlyCollection`1<TargetFrameworkId> GetTargetFrameworkIds(VirtualFileSystemPath projectFilePath);
}
public enum JetBrains.ProjectModel.ItemSubType : Enum {
    public byte value__;
    public static ItemSubType CODE;
    public static ItemSubType COMPONENT;
    public static ItemSubType DESIGNER;
    public static ItemSubType FORM;
    public static ItemSubType USER_CONTROL;
    public static ItemSubType UNKNOWN;
}
public static class JetBrains.ProjectModel.ItemTypesGuid : object {
    public static Guid PhysicalFile;
    public static Guid PhysicalFolder;
    public static Guid SubProject;
    public static Guid VirtualFolder;
    public static Guid SharedItemsNode;
    private static ItemTypesGuid();
}
public interface JetBrains.ProjectModel.IViewableProjectsCollection {
    public IViewable`1<IProject> Projects { get; }
    public abstract virtual IViewable`1<IProject> get_Projects();
}
public interface JetBrains.ProjectModel.IWritableProjectModelTimestamps {
    public abstract virtual int IncrementAnyChange();
    public abstract virtual int IncrementProjectItemLocations();
    public abstract virtual int IncrementProjectFileTypes();
}
[ProjectFileTypeDefinitionAttribute("JS")]
public class JetBrains.ProjectModel.JavaScriptProjectFileType : KnownProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static JavaScriptProjectFileType <Instance>k__BackingField;
    public static string JS_EXTENSION;
    public static string MIN_JS_EXTENSION;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static JavaScriptProjectFileType Instance { get; private set; }
    protected JavaScriptProjectFileType(string name);
    protected JavaScriptProjectFileType(string name, string presentableName);
    protected JavaScriptProjectFileType(string name, string presentableName, IEnumerable`1<string> strings);
    [CompilerGeneratedAttribute]
public static JavaScriptProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(JavaScriptProjectFileType value);
    public virtual BuildAction GetDefaultBuildAction(IProject project, string extension);
}
[ProjectFileTypeDefinitionAttribute("JSON")]
public class JetBrains.ProjectModel.JsonProjectFileType : KnownProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static JsonProjectFileType <Instance>k__BackingField;
    public static string JSON_EXTENSION;
    [UsedImplicitlyAttribute]
public static JsonProjectFileType Instance { get; private set; }
    protected JsonProjectFileType(string name);
    protected JsonProjectFileType(string name, string presentableName);
    protected JsonProjectFileType(string name, string presentableName, IEnumerable`1<string> strings);
    [CompilerGeneratedAttribute]
public static JsonProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(JsonProjectFileType value);
}
[ProjectFileTypeDefinitionAttribute("JSX")]
public class JetBrains.ProjectModel.JsxProjectFileType : JavaScriptProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static JsxProjectFileType <Instance>k__BackingField;
    public static string JSX_EXTENSION;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static JsxProjectFileType Instance { get; private set; }
    public JsxProjectFileType(string name);
    public JsxProjectFileType(string name, string presentableName);
    public JsxProjectFileType(string name, string presentableName, IEnumerable`1<string> extensions);
    [CompilerGeneratedAttribute]
public static JsxProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(JsxProjectFileType value);
}
[ProjectFileTypeDefinitionAttribute("ANY")]
public class JetBrains.ProjectModel.KnownProjectFileType : ProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static KnownProjectFileType <Instance>k__BackingField;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static KnownProjectFileType Instance { get; private set; }
    protected KnownProjectFileType(string name);
    protected KnownProjectFileType(string name, string presentableName);
    protected KnownProjectFileType(string name, string presentableName, IEnumerable`1<string> extensions);
    [CompilerGeneratedAttribute]
public static KnownProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(KnownProjectFileType value);
}
public class JetBrains.ProjectModel.MakingWritableEventArgs : BeforeMadeWritableEventArgs {
    public MakingWritableEventArgs(BeforeMadeWritableEventArgs e);
}
public class JetBrains.ProjectModel.MakingWritableEventHandler : MulticastDelegate {
    public MakingWritableEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MakingWritableEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, MakingWritableEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ProjectModel.Maui.MauiBuildActionModifier : object {
    [CompilerGeneratedAttribute]
private MauiPlatformService <service>P;
    public MauiBuildActionModifier(MauiPlatformService service);
    public sealed virtual BuildAction FixupForNewFile(IProject project, VirtualFileSystemPath location, TargetFrameworkId targetFrameworkId, BuildAction buildAction);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Maui.MauiExtensions : object {
    [ExtensionAttribute]
public static bool IsMauiProject(IProject project);
    [ExtensionAttribute]
public static bool IsMauiProject(IProjectProperties properties);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ProjectModel.Maui.MauiNamespaceFolderCustomizer : object {
    [CompilerGeneratedAttribute]
private MauiPlatformService <service>P;
    public MauiNamespaceFolderCustomizer(MauiPlatformService service);
    public sealed virtual Nullable`1<bool> GetNamespaceFolderDefaultValue(IProjectFolder projectFolder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ProjectModel.Maui.MauiPlatformInfo : object {
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <Folder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identity>k__BackingField;
    public VirtualFileSystemPath Folder { get; }
    public string Identity { get; }
    public MauiPlatformInfo(VirtualFileSystemPath folder, string identity);
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_Folder();
    [CompilerGeneratedAttribute]
public string get_Identity();
    public bool IsMatching(TargetFrameworkId targetFrameworkId);
    public sealed virtual bool Equals(MauiPlatformInfo other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.Maui.MauiPlatformService : object {
    public virtual MauiPlatformInfo GetTargetPlatformIdentifier(IProject project, VirtualFileSystemPath location, TargetFrameworkId targetFrameworkId);
    public virtual bool IsPlatformFolder(IProjectFolder projectFolder);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Maui.MauiPlatformServiceExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static MauiPlatformInfo GetTargetPlatformIdentifier(MauiPlatformService service, IProjectFile projectFile, TargetFrameworkId targetFrameworkId);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.Maui.MauiProjectPropertiesRequest : object {
    public IEnumerable`1<string> RequestedProperties { get; }
    public sealed virtual IEnumerable`1<string> get_RequestedProperties();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ProjectModel.model2.Assemblies.AssembliesDiagnostics : object {
    private ILogger myLogger;
    private ISolution mySolution;
    private IShellLocks myLocks;
    private ConcurrentDictionary`2<AssemblyId, Pair`2<long, string>> myAssemblyLoadBenchmarks;
    private ConcurrentDictionary`2<AssemblyId, Tuple`3<int, string, long>> myRecurrentLoadTimes;
    public AssembliesDiagnostics(ILogger logger, ISolution solution, IShellLocks locks);
    public void BenchmarkMetadataAssemblyLoad(string shortName, AssemblyId id, Action action);
    public ICollection`1<IAssembly> GetNonDirectAssemblies();
    public long GetOverallMetadataLoadTime();
    public ICollection`1<KeyValuePair`2<AssemblyId, Tuple`3<int, string, long>>> GetRecurrentLoads();
    public IDictionary`2<AssemblyId, Pair`2<long, string>> GetAllLoads();
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.model2.Assemblies.AssemblyReferencesFactory : object {
    public virtual ICollection`1<IAssemblyToAssemblyReference> CreateAssemblyToAssemblyReferences(IAssembly assembly, IModuleReferenceResolveContext inputContext);
}
public static class JetBrains.ProjectModel.model2.Assemblies.AssemblyToAssemblyResolvers.AssemblyReferencesResolverUtil : object {
    [CanBeNullAttribute]
public static VirtualFileSystemPath ResolveInDirectory(AssemblyNameInfo referenceName, VirtualFileSystemPath directory, AssemblyInfoDatabase assemblyInfoDataBase, AssemblyNamesInterner interner, String[] extensions);
    [NotNullAttribute]
public static IEnumerable`1<CompilePlatform> GetCompilePlatforms(IEnumerable`1<VirtualFileSystemPath> sourceAssemblyFile, IAssemblyInfoDatabase assemblyInfoDataBase, IPlatformManager platformManager);
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.ProjectModel.model2.Assemblies.AssemblyToAssemblyResolvers.IAssemblyToAssemblyReferencesResolver")]
[MeansImplicitUseAttribute]
public class JetBrains.ProjectModel.model2.Assemblies.AssemblyToAssemblyResolvers.AssemblyToAssemblyReferencesResolverAttribute : SolutionInstanceComponentAttribute {
    [CompilerGeneratedAttribute]
private double <Priority>k__BackingField;
    public double Priority { get; }
    public AssemblyToAssemblyReferencesResolverAttribute(double priority, Instantiation instantiation);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Priority();
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.model2.Assemblies.AssemblyToAssemblyResolvers.FrameworkAssemblyToAssemblyReferencesResolver : object {
    [NotNullAttribute]
private IPlatformManager myPlatformManager;
    [NotNullAttribute]
private AssemblyInfoDatabase myAssemblyInfoDataBase;
    [NotNullAttribute]
private AssemblyNamesInterner myInterner;
    [NotNullAttribute]
private static String[] ourExtensions;
    [NotNullAttribute]
private static String[] ourNetCoreExtensions;
    public FrameworkAssemblyToAssemblyReferencesResolver(IPlatformManager platformManager, AssemblyNamesInterner interner, AssemblyInfoDatabase assemblyInfoDatabase);
    private static FrameworkAssemblyToAssemblyReferencesResolver();
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.model2.Assemblies.AssemblyToAssemblyResolvers.FrameworkAssemblyToAssemblyReferencesResolver/<ResolveReference>d__6")]
public IEnumerable`1<VirtualFileSystemPath> ResolveReference(ICollection`1<VirtualFileSystemPath> sourceAssemblyFile, AssemblyNameInfo referenceName);
}
[AssemblyToAssemblyReferencesResolverAttribute("2", "16")]
public class JetBrains.ProjectModel.model2.Assemblies.AssemblyToAssemblyResolvers.GacAssemblyToAssemblyReferencesResolver : object {
    private FrameworkLocationService myFrameworkLocationService;
    private AssemblyInfoDatabase myAssemblyInfoDataBase;
    public GacAssemblyToAssemblyReferencesResolver(FrameworkLocationService frameworkLocationService, AssemblyInfoDatabase assemblyInfoDataBase);
    public sealed virtual IEnumerable`1<VirtualFileSystemPath> ResolveReference(ICollection`1<VirtualFileSystemPath> sourceAssemblyFile, AssemblyNameInfo referenceName);
}
[ProjectToAssemblyReferencesResolverAttribute("2", "16")]
public class JetBrains.ProjectModel.model2.Assemblies.AssemblyToAssemblyResolvers.GacProjectToAssemblyReferencesResolver : object {
    private FrameworkLocationService myFrameworkLocationService;
    public GacProjectToAssemblyReferencesResolver(FrameworkLocationService frameworkLocationService);
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.model2.Assemblies.AssemblyToAssemblyResolvers.GacProjectToAssemblyReferencesResolver/<ResolveReference>d__2")]
public sealed virtual IEnumerable`1<VirtualFileSystemPath> ResolveReference(AssemblyReferenceTarget referenceTarget, IProject referenceSource, TargetFrameworkId targetFrameworkId);
}
public interface JetBrains.ProjectModel.model2.Assemblies.AssemblyToAssemblyResolvers.IAssemblyToAssemblyLastChanceResolver {
}
public interface JetBrains.ProjectModel.model2.Assemblies.AssemblyToAssemblyResolvers.IAssemblyToAssemblyReferencesResolver {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<VirtualFileSystemPath> ResolveReference(ICollection`1<VirtualFileSystemPath> sourceAssemblyFile, AssemblyNameInfo referenceName);
}
[AssemblyToAssemblyReferencesResolverAttribute("3", "16")]
public class JetBrains.ProjectModel.model2.Assemblies.AssemblyToAssemblyResolvers.NearAssemblyToAssemblyAssemblyToAssemblyReferencesResolver : object {
    private AssemblyInfoDatabase myAssemblyInfoDataBase;
    private AssemblyNamesInterner myInterner;
    public NearAssemblyToAssemblyAssemblyToAssemblyReferencesResolver(AssemblyInfoDatabase assemblyInfoDataBase, AssemblyNamesInterner interner);
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.model2.Assemblies.AssemblyToAssemblyResolvers.NearAssemblyToAssemblyAssemblyToAssemblyReferencesResolver/<ResolveReference>d__3")]
public sealed virtual IEnumerable`1<VirtualFileSystemPath> ResolveReference(ICollection`1<VirtualFileSystemPath> sourceAssemblyFile, AssemblyNameInfo referenceName);
}
[AssemblyToAssemblyReferencesResolverAttribute("99", "0")]
public class JetBrains.ProjectModel.model2.Assemblies.AssemblyToAssemblyResolvers.OutputAssemblyToAssemblyReferencesResolver : object {
    private OutputAssemblies myOutputAssemblies;
    private AssemblyInfoDatabase myAssemblyInfoDataBase;
    public OutputAssemblyToAssemblyReferencesResolver(OutputAssemblies outputAssemblies, AssemblyInfoDatabase assemblyInfoDataBase);
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.model2.Assemblies.AssemblyToAssemblyResolvers.OutputAssemblyToAssemblyReferencesResolver/<ResolveReference>d__3")]
public sealed virtual IEnumerable`1<VirtualFileSystemPath> ResolveReference(ICollection`1<VirtualFileSystemPath> sourceAssemblyFile, AssemblyNameInfo referenceName);
}
[AssemblyToAssemblyReferencesResolverAttribute("4", "16")]
public class JetBrains.ProjectModel.model2.Assemblies.AssemblyToAssemblyResolvers.SolutionAssemblyToAssemblyReferencesResolver : object {
    private AssemblyCollection myAssemblyCollection;
    public SolutionAssemblyToAssemblyReferencesResolver(AssemblyCollection assemblyCollection);
    public sealed virtual IEnumerable`1<VirtualFileSystemPath> ResolveReference(ICollection`1<VirtualFileSystemPath> sourceAssemblyFile, AssemblyNameInfo referenceName);
}
public class JetBrains.ProjectModel.Model2.Assemblies.Impl.Assembly : UserDataHolder {
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFrameworkId>k__BackingField;
    private UserDataHolder myUserDataHolder;
    private AssemblyNameInfo myAssemblyIdentity;
    private ChangeManager myChangeManager;
    private AssemblyCollection myAssemblyCollection;
    private bool myHasStrongName;
    private ISolution mySolution;
    private List`1<IAssemblyFile> myAssemblyFiles;
    private string myCachedFullAssemblyName;
    private bool myIsRetargetable;
    private AssemblyId myCachedId;
    [CanBeNullAttribute]
private IAssemblyLocation myCachedLocation;
    private Lifetime myLifetime;
    private bool myIsDisposed;
    private IShellLocks myLocks;
    private LifetimeDefinition myLifetimeDefinition;
    private ICollection`1<AssemblyNameInfo> myReferencedAssemblyNames;
    private AssemblyInfoDatabase myAssemblyInfoDatabase;
    public TargetFrameworkId TargetFrameworkId { get; }
    public string Name { get; }
    public Type MarshallerType { get; }
    public bool HasStrongName { get; }
    public string Presentation { get; }
    public AssemblyNameInfo AssemblyName { get; }
    public AssemblyId Id { get; }
    [NotNullAttribute]
public IAssemblyLocation Location { get; }
    public string FullAssemblyName { get; }
    public bool IsRetargetable { get; }
    public bool IsMissing { get; }
    public List`1<IAssemblyFile> AssemblyFiles { get; }
    public Assembly(ISolution solution, AssemblyInfoDatabase assemblyInfoDatabase, AssemblyNameInfo assemblyIdentity, TargetFrameworkId targetFrameworkId, ChangeManager changeManager, IAssemblyFile assemblyFile, AssemblyCollection assemblyCollection, IShellLocks locks);
    [CompilerGeneratedAttribute]
public sealed virtual TargetFrameworkId get_TargetFrameworkId();
    public sealed virtual void Accept(ProjectVisitor projectVisitor);
    public sealed virtual ISolution GetSolution();
    public sealed virtual object GetProperty(Key propertyName);
    public sealed virtual void SetProperty(Key propertyName, object propertyValue);
    public sealed virtual ICollection`1<IAssemblyFile> GetFiles();
    public sealed virtual IAssemblyFile FindFileByLocation(IAssemblyLocation location);
    public sealed virtual void Dump(TextWriter to, DumpFlags flags);
    [NotNullAttribute]
public sealed virtual ICollection`1<AssemblyNameInfo> GetReferencedAssemblyNames();
    private void AssertDisposed();
    internal void AddAssemblyFile(IAssemblyFile assemblyFile, bool fireEvent);
    private void AddAssemblyFileInternal(IAssemblyFile assemblyFile, bool fireEvent);
    public bool CheckFileIsConsistent(IAssemblyFile assemblyFile);
    internal void RemoveAssemblyFile(IAssemblyFile assemblyFile, bool fireEvent);
    private void RemoveAssemblyFileInternal(IAssemblyFile assemblyFile, bool fireEvent);
    public sealed virtual string get_Name();
    public sealed virtual bool IsValid();
    public sealed virtual bool IsValidAndAlive();
    public sealed virtual Type get_MarshallerType();
    public sealed virtual bool IsReallyValid();
    public sealed virtual bool get_HasStrongName();
    public sealed virtual string get_Presentation();
    public sealed virtual AssemblyNameInfo get_AssemblyName();
    public sealed virtual AssemblyId get_Id();
    public sealed virtual IAssemblyLocation get_Location();
    public sealed virtual string get_FullAssemblyName();
    public sealed virtual bool get_IsRetargetable();
    public sealed virtual bool get_IsMissing();
    public List`1<IAssemblyFile> get_AssemblyFiles();
    public sealed virtual void Dispose();
    public virtual string ToString();
}
[SolutionInstanceComponentAttribute("18")]
public class JetBrains.ProjectModel.Model2.Assemblies.Impl.AssemblyCollection : object {
    private Lifetime myLifetime;
    private IShellLocks myLocks;
    private SolutionElement mySolution;
    private IProjectModelBatchChangeManager myBatchChangeManager;
    private HashSet`1<IAssembly> myAllAssemblies;
    private Dictionary`2<string, Dictionary`2<AssemblyNameInfo, Dictionary`2<AssemblyId, Assembly>>> myAssemblies;
    private Dictionary`2<AssemblyId, IAssembly> myIdMap;
    private BidirectionalMap`2<IAssemblyLocation, IAssemblyFile> myAssemblyFiles;
    private JetHashSet`1<string> myExtensionsCache;
    private IList`1<IAssemblyCookie> myCookies;
    private int myTimestamp;
    private LifetimeDefinition myBatchChangeLifetimeDef;
    private List`1<IAssembly> myPendingAssemblies;
    public IList`1<IAssemblyCookie> Cookies { get; }
    public int Timestamp { get; }
    public Lifetime Lifetime { get; }
    public IProjectModelBatchChangeManager BatchChangeManager { get; }
    public AssemblyCollection(Lifetime lifetime, SolutionElement solution, IShellLocks locks, IProjectModelBatchChangeManager batchChangeManager, ISolutionLoadTasksScheduler scheduler, ILogger logger);
    public IDisposable AddAssembliesInBatchCookie();
    private void FireAssemblyAddedChange(IAssembly assembly);
    public IList`1<IAssemblyCookie> get_Cookies();
    public int get_Timestamp();
    public Lifetime get_Lifetime();
    public IProjectModelBatchChangeManager get_BatchChangeManager();
    internal bool AddAssembly(Assembly assembly, bool ignoreMvidAsserting);
    internal void RemoveAssembly(Assembly assembly);
    [NotNullAttribute]
internal IDictionary`2<AssemblyId, Assembly> FindAssembliesByIdentity(string extensionWithDot, AssemblyNameInfo assemblyName);
    [CanBeNullAttribute]
internal Assembly FindAssemblyById(string extensionWithDot, AssemblyNameInfo assemblyName, AssemblyId id);
    [NotNullAttribute]
public sealed virtual IAssemblyCookie AddRef(IAssemblyFile assemblyFile, string holderId, LifetimeDefinition cookieLifetimeDef);
    public sealed virtual void Dump(TextWriter writer);
    private void MarkForDump(HashSet`1& unreachableAssemblies, HashSet`1& unreachableAssemblyFiles, OneToListMap`2& holders);
    public void ReleaseReference(AssemblyCookie assemblyCookie);
    public void OnAssemblyFileAdded(IAssembly assembly, IAssemblyFile assemblyFile, bool fireEvent);
    public void OnAssemblyFileRemoved(IAssembly assembly, IAssemblyFile assemblyFile, bool fireEvent);
    public sealed virtual IAssembly FindAssemblyById(AssemblyId id);
    public sealed virtual IReadOnlyCollection`1<IAssembly> GetAllAssemblies();
    public bool ContainsAssembly(IAssembly assembly);
    public ICollection`1<IAssemblyFile> GetAllAssemblyFiles();
    public void IncrementTimeStamp();
    [ObsoleteAttribute("Use overload with IAssemblyLocation")]
public sealed virtual IAssemblyFile GetFileByLocation(VirtualFileSystemPath path);
    public sealed virtual IAssemblyFile GetFileByLocation(IAssemblyLocation assemblyLocation);
    private string InternExtension(string extension);
    private string GetInternedExtension(IAssemblyLocation assemblyLocation);
    [CompilerGeneratedAttribute]
private void <AddAssembliesInBatchCookie>b__14_0();
}
[DebuggerDisplayAttribute("AssemblyFile: Assembly = {Assembly}, Path = {myData.Location}")]
internal class JetBrains.ProjectModel.Model2.Assemblies.Impl.AssemblyFile : UserDataHolder {
    private IShellLocks myLocks;
    private IAssemblyFileData myData;
    private UserDataHolder myProperties;
    private LifetimeDefinition myLifetimeDefinition;
    [CompilerGeneratedAttribute]
private IAssembly <Assembly>k__BackingField;
    public IAssembly Assembly { get; internal set; }
    public bool IsDisposed { get; }
    public IAssemblyFileData Data { get; public set; }
    public Type MarshallerType { get; }
    public IAssemblyLocation Location { get; }
    public bool IsMissing { get; }
    public DateTime LastWriteTimeUtc { get; }
    public AssemblyNameInfo AssemblyName { get; }
    public AssemblyId Id { get; }
    public TargetPlatform TargetPlatform { get; }
    public NativeImageType NativeImageType { get; }
    public FileAttributes FileAttributes { get; }
    public string Name { get; }
    public AssemblyFile(IAssemblyLocation location, IShellLocks locks, AssemblyInfoDatabase assemblyInfoDataBase, IFileSystemTracker fileSystemTracker, ISolution solution);
    [CompilerGeneratedAttribute]
public sealed virtual IAssembly get_Assembly();
    [CompilerGeneratedAttribute]
internal void set_Assembly(IAssembly value);
    public sealed virtual bool get_IsDisposed();
    public IAssemblyFileData get_Data();
    public void set_Data(IAssemblyFileData value);
    private void AssertDisposed();
    public sealed virtual void Dispose();
    public sealed virtual bool IsValid();
    public sealed virtual bool IsValidAndAlive();
    public sealed virtual Type get_MarshallerType();
    public sealed virtual bool IsReallyValid();
    public sealed virtual IAssemblyLocation get_Location();
    public sealed virtual bool get_IsMissing();
    public sealed virtual DateTime get_LastWriteTimeUtc();
    public sealed virtual AssemblyNameInfo get_AssemblyName();
    public sealed virtual AssemblyId get_Id();
    public sealed virtual TargetPlatform get_TargetPlatform();
    public sealed virtual NativeImageType get_NativeImageType();
    public sealed virtual FileAttributes get_FileAttributes();
    public sealed virtual string get_Name();
    public sealed virtual void Accept(ProjectVisitor projectVisitor);
    public sealed virtual ISolution GetSolution();
    public sealed virtual object GetProperty(Key propertyName);
    public sealed virtual void SetProperty(Key propertyName, object propertyValue);
}
internal class JetBrains.ProjectModel.Model2.Assemblies.Impl.AssemblyFileData : object {
    [CompilerGeneratedAttribute]
private IAssemblyLocation <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMissing>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastWriteTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private FileAttributes <FileAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private AssemblyNameInfo <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private AssemblyId <Id>k__BackingField;
    private Nullable`1<TargetPlatform> myTargetPlatform;
    private NativeImageType myNativeImageType;
    public IAssemblyLocation Location { get; }
    public bool IsMissing { get; }
    public DateTime LastWriteTimeUtc { get; }
    public FileAttributes FileAttributes { get; }
    public AssemblyNameInfo AssemblyName { get; }
    public AssemblyId Id { get; }
    public TargetPlatform TargetPlatform { get; }
    public NativeImageType NativeImageType { get; }
    public AssemblyFileData(IAssemblyFileData other);
    public AssemblyFileData(IAssemblyLocation location, AssemblyInfoDatabase assemblyInfoDataBase);
    [CompilerGeneratedAttribute]
public sealed virtual IAssemblyLocation get_Location();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsMissing();
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_LastWriteTimeUtc();
    [CompilerGeneratedAttribute]
public sealed virtual FileAttributes get_FileAttributes();
    [CompilerGeneratedAttribute]
public sealed virtual AssemblyNameInfo get_AssemblyName();
    [CompilerGeneratedAttribute]
public sealed virtual AssemblyId get_Id();
    public sealed virtual TargetPlatform get_TargetPlatform();
    public sealed virtual NativeImageType get_NativeImageType();
    private void EnsureTargetPlatformAndNativeImageType();
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.model2.Assemblies.Impl.AssemblyGC : object {
    private Lifetime myLifetime;
    private AssemblyCollection myAssemblyCollection;
    private ISolution mySolution;
    private IShellLocks myLocks;
    private GroupingEvent myGCEvent;
    private TimeSpan myGCInterval;
    private ResolveContextManager myResolveContextManager;
    private AssemblyInfoDatabase myAssemblyInfoDatabase;
    public AssemblyGC(Lifetime lifetime, AssemblyCollection assemblyCollection, ISolution solution, IShellLocks locks, ChangeManager changeManager, ResolveContextManager resolveContextManager, AssemblyInfoDatabase assemblyInfoDatabase);
    protected virtual void DisposeUnusedSubgraph(IShellLocks locks);
    private JetHashSet`1<AssemblyId> GetAllReferencedIds();
    protected JetHashSet`1<IAssembly> AssembliesClosureToSave();
    protected void RemoveAssemblies(JetHashSet`1<IAssembly> closureToSave);
    public void ForceGC();
}
[DebuggerDisplayAttribute("AssemblyToAssembly: Source = {myAssembly}, Target = {ReferenceTarget.AssemblyName}, Context = {ModuleReferenceResolveContext.UniqueName}")]
public class JetBrains.ProjectModel.Model2.Assemblies.Impl.AssemblyToAssemblyReference : object {
    private IAssembly myAssembly;
    private IModuleReferenceResolveContext myModuleReferenceResolveContext;
    private AssemblyReferenceTarget myReferenceTarget;
    public IAssembly OwnerModule { get; }
    public AssemblyReferenceTarget ReferenceTarget { get; }
    public IModuleReferenceResolveContext ModuleReferenceResolveContext { get; }
    public AssemblyToAssemblyReference(IAssembly assembly, AssemblyReferenceTarget referenceTarget, IModuleReferenceResolveContext moduleReferenceResolveContext);
    public sealed virtual IAssembly get_OwnerModule();
    public sealed virtual AssemblyReferenceTarget get_ReferenceTarget();
    public sealed virtual IModuleReferenceResolveContext get_ModuleReferenceResolveContext();
    public void Accept(ProjectVisitor projectVisitor);
    public bool IsValid();
    protected bool Equals(AssemblyToAssemblyReference other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void AssertIsValid();
}
public class JetBrains.ProjectModel.Model2.Assemblies.Interfaces.AssemblyCookie : object {
    private AssemblyCollection myAssemblyCollection;
    private IAssemblyFile myAssemblyFile;
    private string myHolderId;
    private LifetimeDefinition myCookieLifetimeDef;
    public IAssemblyFile AssemblyFile { get; }
    public IAssembly Assembly { get; }
    public string HolderId { get; }
    public AssemblyCookie(AssemblyCollection assemblyCollection, IAssemblyFile assemblyFile, string holderId, LifetimeDefinition cookieLifetimeDef);
    public sealed virtual void Dispose();
    public sealed virtual IAssemblyFile get_AssemblyFile();
    public sealed virtual IAssembly get_Assembly();
    public string get_HolderId();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Model2.Assemblies.Interfaces.AssemblyExtensions : object {
    [ExtensionAttribute]
public static bool PossiblyContainsPredefinedTypes(IAssembly assembly);
}
public interface JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssembly {
    public bool HasStrongName { get; }
    public AssemblyNameInfo AssemblyName { get; }
    public AssemblyId Id { get; }
    public string FullAssemblyName { get; }
    public IAssemblyLocation Location { get; }
    public bool IsRetargetable { get; }
    public bool IsMissing { get; }
    public TargetFrameworkId TargetFrameworkId { get; }
    public abstract virtual bool get_HasStrongName();
    public abstract virtual AssemblyNameInfo get_AssemblyName();
    public abstract virtual AssemblyId get_Id();
    public abstract virtual string get_FullAssemblyName();
    public abstract virtual IAssemblyLocation get_Location();
    public abstract virtual bool get_IsRetargetable();
    public abstract virtual bool get_IsMissing();
    public abstract virtual ICollection`1<IAssemblyFile> GetFiles();
    public abstract virtual IAssemblyFile FindFileByLocation(IAssemblyLocation location);
    public abstract virtual void Dump(TextWriter to, DumpFlags flags);
    [NotNullAttribute]
public abstract virtual ICollection`1<AssemblyNameInfo> GetReferencedAssemblyNames();
    public abstract virtual TargetFrameworkId get_TargetFrameworkId();
}
public interface JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssemblyCollection {
    public abstract virtual IReadOnlyCollection`1<IAssembly> GetAllAssemblies();
    public abstract virtual IAssemblyCookie AddRef(IAssemblyFile assemblyFile, string holderId, LifetimeDefinition cookieLifetimeDef);
    public abstract virtual void Dump(TextWriter writer);
    [ObsoleteAttribute("Use overload with IAssemblyLocation")]
[CanBeNullAttribute]
public abstract virtual IAssemblyFile GetFileByLocation(VirtualFileSystemPath runtimeAssemblyLocation);
    [CanBeNullAttribute]
public abstract virtual IAssemblyFile GetFileByLocation(IAssemblyLocation assemblyLocation);
    [CanBeNullAttribute]
public abstract virtual IAssembly FindAssemblyById(AssemblyId id);
}
public interface JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssemblyCookie {
    public IAssemblyFile AssemblyFile { get; }
    public IAssembly Assembly { get; }
    public abstract virtual IAssemblyFile get_AssemblyFile();
    public abstract virtual IAssembly get_Assembly();
}
public interface JetBrains.ProjectModel.model2.Assemblies.Interfaces.IAssemblyFactory {
    public abstract virtual IAssemblyCookie AddRef(IAssemblyLocation assemblyLocation, string holderId, IModuleReferenceResolveContext moduleReferenceResolveContext);
}
public interface JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssemblyFile {
    public IAssembly Assembly { get; }
    public bool IsDisposed { get; }
    public abstract virtual IAssembly get_Assembly();
    public abstract virtual bool get_IsDisposed();
}
public interface JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssemblyFileData {
    public IAssemblyLocation Location { get; }
    public bool IsMissing { get; }
    public DateTime LastWriteTimeUtc { get; }
    public FileAttributes FileAttributes { get; }
    [CanBeNullAttribute]
public AssemblyNameInfo AssemblyName { get; }
    public AssemblyId Id { get; }
    public TargetPlatform TargetPlatform { get; }
    public NativeImageType NativeImageType { get; }
    public abstract virtual IAssemblyLocation get_Location();
    public abstract virtual bool get_IsMissing();
    public abstract virtual DateTime get_LastWriteTimeUtc();
    public abstract virtual FileAttributes get_FileAttributes();
    public abstract virtual AssemblyNameInfo get_AssemblyName();
    public abstract virtual AssemblyId get_Id();
    public abstract virtual TargetPlatform get_TargetPlatform();
    public abstract virtual NativeImageType get_NativeImageType();
}
public interface JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssemblyToAssemblyReference {
    public IAssembly OwnerModule { get; }
    public abstract virtual IAssembly get_OwnerModule();
}
public interface JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IExplicitlyObservedAssemblies {
    public abstract virtual void Observe(Lifetime lifetime, IAssemblyLocation assemblyLocation);
    public abstract virtual bool IsObserving(IAssemblyLocation assemblyLocation);
}
public interface JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IModuleReferenceResolveManager {
    public abstract virtual void ResolveAndStoreAssemblyReferences(IEnumerable`1<IModuleToAssemblyReference> references, Lifetime cookieLifetime);
    public abstract virtual void RefreshAssemblyReferences(IAssembly assembly);
    [CanBeNullAttribute]
public abstract virtual IAssemblyLocation Resolve(AssemblyReferenceTarget referenceTarget, IModule referenceSource, IModuleReferenceResolveContext moduleReferenceResolveContext);
    public abstract virtual void WipeReferencesResolve(IEnumerable`1<IModuleToAssemblyReference> references);
    public abstract virtual void RefreshProjectOutputAssemblyReferences(ProjectImpl project);
    public abstract virtual void RefreshProjectOutputAssemblyReferences(ProjectImpl project, TargetFrameworkId targetFrameworkId);
}
public interface JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IModuleReferencesResolveStore {
    [CanBeNullAttribute]
public abstract virtual IAssemblyFile GetAssemblyFileResolveResult(IModuleToAssemblyReference reference);
    [CanBeNullAttribute]
public abstract virtual IAssembly GetResolveResult(IModuleToAssemblyReference reference);
    [CanBeNullAttribute]
public abstract virtual IModule GetResolveResult(IProjectToModuleReference reference);
    [CanBeNullAttribute]
public abstract virtual IProject GetResolveResult(IProjectToProjectReference reference);
    public abstract virtual void InvalidateResolveResult(IModuleToAssemblyReference reference);
    [NotNullAttribute]
public abstract virtual ICollection`1<IAssemblyToAssemblyReference> GetAssemblyReferences(IAssembly assembly, IModuleReferenceResolveContext moduleReferenceResolveContext);
    public abstract virtual ICollection`1<IModuleToAssemblyReference> GetAssemblyReferencesForAllContexts(IModule module);
    public abstract virtual ICollection`1<IModuleToAssemblyReference> GetReferencesToAssemblyForAllContexts(IAssembly assembly);
    [NotNullAttribute]
public abstract virtual ICollection`1<Tuple`2<AssemblyNameInfo, IAssembly>> GetReferencedAssemblies(IAssembly assembly, IModuleReferenceResolveContext resolveContext);
    public abstract virtual ICollection`1<IProjectToProjectReference> GetReferencesToProject(IProject target);
}
public interface JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IModuleReferencesResolveStoreEx {
    public abstract virtual IEnumerable`1<IModuleToAssemblyReference> ProjectAssemblyReferences();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Model2.Assemblies.Interfaces.ModuleReferencesResolveStoreEx : object {
    public static IModuleReferencesResolveStore GetInstance(ISolution solution);
    public static IModuleReferencesResolveStore GetInstance(IProject project);
    [ExtensionAttribute]
[CanBeNullAttribute]
[ObsoleteAttribute("Use the overload with IModuleReferencesResolveStore for performance reasons")]
public static IModule ResolveResult(IProjectToModuleReference reference);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IModule ResolveResult(IProjectToModuleReference reference, IModuleReferencesResolveStore moduleReferencesResolveStore);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IAssembly ResolveResult(IProjectToAssemblyReference reference, IModuleReferencesResolveStore moduleReferencesResolveStore);
    [ExtensionAttribute]
public static bool IsResolved(IProjectToModuleReference reference);
    [ExtensionAttribute]
[NotNullAttribute]
public static ICollection`1<IAssemblyToAssemblyReference> GetAssemblyReferences(IAssembly assembly, IModuleReferenceResolveContext moduleReferenceResolveContext);
    [ExtensionAttribute]
public static bool IsModuleToAssemblyReferenceResolved(IModuleToAssemblyReference reference);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IAssembly GetModuleToAssemblyResolveResult(IModuleToAssemblyReference reference);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProject ResolveResult(IProjectToProjectReference reference);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IAssemblyFile ResolveResultAssemblyFile(IModuleToAssemblyReference reference);
    [ExtensionAttribute]
public static bool IsReferences(IProject project, IModule module, TargetFrameworkId targetFrameworkId);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.model2.Assemblies.ProjectToAssemblyResolvers.FrameworkProjectToAssemblyReferencesResolver : object {
    [NotNullAttribute]
private IPlatformManager myPlatformManager;
    [NotNullAttribute]
private AssemblyInfoDatabase myAssemblyInfoDataBase;
    [NotNullAttribute]
private AssemblyNamesInterner myInterner;
    [NotNullAttribute]
private static String[] ourExtensions;
    public FrameworkProjectToAssemblyReferencesResolver(IPlatformManager platformManager, AssemblyInfoDatabase assemblyInfoDataBase, AssemblyNamesInterner interner);
    private static FrameworkProjectToAssemblyReferencesResolver();
    public IEnumerable`1<VirtualFileSystemPath> ResolveReference(AssemblyReferenceTarget referenceTarget, IProject referenceSource, TargetFrameworkId targetFrameworkId);
    [NotNullAttribute]
private IReadOnlyCollection`1<CompilePlatform> GetCompilePlatforms(IProject referenceSource, TargetFrameworkId targetFrameworkId);
}
public interface JetBrains.ProjectModel.model2.Assemblies.ProjectToAssemblyResolvers.IProjectToAssemblyReferencesResolver {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<VirtualFileSystemPath> ResolveReference(AssemblyReferenceTarget referenceTarget, IProject referenceSource, TargetFrameworkId targetFrameworkId);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.model2.Assemblies.ProjectToAssemblyResolvers.ProjectToAssemblyReferencesResolveManager : object {
    private IOrderedImmutableList`1<IProjectToAssemblyReferencesResolver> myResolvers;
    private ILogger myLogger;
    private AssemblyInfoDatabase myAssemblyInfoDataBase;
    private FrameworkProjectToAssemblyReferencesResolver myFrameworkResolver;
    public ProjectToAssemblyReferencesResolveManager(ILogger logger, IOrderedImmutableList`2<IProjectToAssemblyReferencesResolver, ProjectToAssemblyReferencesResolverAttribute> resolvers, AssemblyInfoDatabase assemblyInfoDataBase, FrameworkProjectToAssemblyReferencesResolver frameworkResolver);
    [CanBeNullAttribute]
public virtual IAssemblyLocation ResolveReference(AssemblyReferenceTarget referenceTarget, IProject referenceSource, TargetFrameworkId targetFrameworkId);
    [CompilerGeneratedAttribute]
private AssemblyNameInfo <ResolveReference>b__5_0(VirtualFileSystemPath candidate);
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.ProjectModel.model2.Assemblies.ProjectToAssemblyResolvers.IProjectToAssemblyReferencesResolver")]
[MeansImplicitUseAttribute]
public class JetBrains.ProjectModel.model2.Assemblies.ProjectToAssemblyResolvers.ProjectToAssemblyReferencesResolverAttribute : SolutionInstanceComponentAttribute {
    [CompilerGeneratedAttribute]
private double <Priority>k__BackingField;
    public double Priority { get; }
    public ProjectToAssemblyReferencesResolverAttribute(double priority, Instantiation instantiation);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Priority();
}
public class JetBrains.ProjectModel.model2.Assemblies.ProjectToAssemblyResolvers.SolutionProjectToAssemblyReferencesResolver : object {
    private AssemblyCollection myAssemblyCollection;
    public SolutionProjectToAssemblyReferencesResolver(AssemblyCollection assemblyCollection);
    public sealed virtual IEnumerable`1<VirtualFileSystemPath> ResolveReference(AssemblyReferenceTarget referenceTarget, IProject referenceSource, TargetFrameworkId targetFrameworkId);
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.model2.Interfaces.SharedProjectContext : object {
    private ISolution mySolution;
    private ILogger myLogger;
    private IDictionary`2<VirtualFileSystemPath, VirtualFileSystemPath> mySharedProjectContexts;
    [CompilerGeneratedAttribute]
private ISignal`1<Pair`2<VirtualFileSystemPath, VirtualFileSystemPath>> <ContextChanged>k__BackingField;
    public ISignal`1<Pair`2<VirtualFileSystemPath, VirtualFileSystemPath>> ContextChanged { get; }
    public SharedProjectContext(Lifetime lifetime, ISolution solution, ILogger logger);
    [CompilerGeneratedAttribute]
public ISignal`1<Pair`2<VirtualFileSystemPath, VirtualFileSystemPath>> get_ContextChanged();
    public void SetProjectContext(IProjectFile projectFile, IProject contextProject);
    [CanBeNullAttribute]
public IProject TryGetSharedContextProject(IProject sharedProject);
}
public class JetBrains.ProjectModel.Model2.References.AssemblyReferenceTarget : object {
    [NotNullAttribute]
private AssemblyNameInfo myAssemblyName;
    [CanBeNullAttribute]
private VirtualFileSystemPath myHintLocation;
    private string myAssemblyFileName;
    [NotNullAttribute]
public string AssemblyFileName { get; }
    [NotNullAttribute]
public AssemblyNameInfo AssemblyName { get; }
    [CanBeNullAttribute]
public VirtualFileSystemPath HintLocation { get; }
    [NotNullAttribute]
public string Name { get; }
    public AssemblyReferenceTarget(AssemblyNameInfo assemblyName, VirtualFileSystemPath hintLocation);
    public string get_AssemblyFileName();
    public AssemblyNameInfo get_AssemblyName();
    public VirtualFileSystemPath get_HintLocation();
    public string get_Name();
    public bool Equals(AssemblyReferenceTarget other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public void WriteReferenceTarget(UnsafeWriter writer);
    public static AssemblyReferenceTarget ReadAssemblyTarget(UnsafeReader reader);
}
public interface JetBrains.ProjectModel.Model2.References.IModuleToAssemblyReference {
    [NotNullAttribute]
public IModuleReferenceResolveContext ModuleReferenceResolveContext { get; }
    [NotNullAttribute]
public AssemblyReferenceTarget ReferenceTarget { get; }
    public abstract virtual IModuleReferenceResolveContext get_ModuleReferenceResolveContext();
    public abstract virtual AssemblyReferenceTarget get_ReferenceTarget();
}
public class JetBrains.ProjectModel.model2.References.ReferencesFolder : object {
    [CompilerGeneratedAttribute]
private IProject <OwnerProject>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferencesFolderKind <Kind>k__BackingField;
    [NotNullAttribute]
public IProject OwnerProject { get; }
    public ReferencesFolderKind Kind { get; }
    public ReferencesFolder(IProject ownerProject, ReferencesFolderKind kind);
    [CompilerGeneratedAttribute]
public IProject get_OwnerProject();
    [CompilerGeneratedAttribute]
public ReferencesFolderKind get_Kind();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ProjectModel.Model2.Transaction.EnsureWritableCollection : object {
    private EnsureWritableHandler myHandler;
    private ISolution mySolution;
    private IShellLocks myLocks;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ValueTuple`2<IProjectFile, VirtualFileSystemPath>> <Files>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<ValueTuple`2<IProjectFile, VirtualFileSystemPath>> Files { get; }
    public ISolution Solution { get; }
    internal EnsureWritableCollection(EnsureWritableHandler handler, IShellLocks locks);
    public sealed virtual ModificationCookie CreateCookie(ICollection`1<IProjectFile> doNotOpenOnBefore);
    [CompilerGeneratedAttribute]
public List`1<ValueTuple`2<IProjectFile, VirtualFileSystemPath>> get_Files();
    public ISolution get_Solution();
    public sealed virtual IEnsureWritableCollection AddProject(IProject project);
    public sealed virtual IEnsureWritableCollection AddSolution(ISolution solution);
    public sealed virtual IEnsureWritableCollection AddFiles(IProjectFile[] projectFiles);
    public sealed virtual IEnsureWritableCollection AddFile(IProjectFile projectFile);
    public sealed virtual IEnsureWritableCollection AddFiles(IEnumerable`1<IProjectFile> projectFiles);
    public sealed virtual IEnsureWritableCollection AddPaths(VirtualFileSystemPath[] paths);
    public sealed virtual IEnsureWritableCollection AddPaths(IEnumerable`1<VirtualFileSystemPath> paths);
    public sealed virtual IEnsureWritableCollection AddPath(VirtualFileSystemPath path);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ProjectModel.Model2.Transaction.EnsureWritableHandler : object {
    private ISolution mySolution;
    private OneToListMap`2<IProjectFile, ProjectFileModificationCookie> myProjectFileToModificationCookies;
    private IShellLocks myLocks;
    protected HashSet`1<VirtualFileSystemPath> IgnoredLocations;
    [CompilerGeneratedAttribute]
private ModificationFinishedEventHandler ModificationFinished;
    [CompilerGeneratedAttribute]
private BeforeMadeWritableEventHandler BeforeMadeWritable;
    [CompilerGeneratedAttribute]
private MakingWritableEventHandler MakingWritable;
    protected IShellLocks Locks { get; }
    public ISolution Solution { get; }
    public EnsureWritableHandler(ISolution solution, IShellLocks locks);
    public sealed virtual bool IsInModification(IProjectFile projectFile);
    protected IShellLocks get_Locks();
    public ISolution get_Solution();
    internal ModificationCookie CreateCookie(EnsureWritableCollection collection, ICollection`1<IProjectFile> doNotOpenOnBefore);
    protected virtual void OnModificationFinished(ModificationFinishedEventArgs args);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ModificationFinished(ModificationFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ModificationFinished(ModificationFinishedEventHandler value);
    public virtual IEnsureWritableCollection CreateCollection();
    [CompilerGeneratedAttribute]
public sealed virtual void add_BeforeMadeWritable(BeforeMadeWritableEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_BeforeMadeWritable(BeforeMadeWritableEventHandler value);
    protected virtual void OnBeforeMadeWritable(BeforeMadeWritableEventArgs args);
    [CompilerGeneratedAttribute]
public sealed virtual void add_MakingWritable(MakingWritableEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MakingWritable(MakingWritableEventHandler value);
    protected virtual void OnMakingWritable(MakingWritableEventArgs args);
    private void FilterOutIgnoredItems(List`1<IProjectFile> projectFiles, List`1<VirtualFileSystemPath> fileSystemPaths);
    protected virtual QueryIsWritableResult QueryIsWritable(IProjectFile projectFile);
    protected virtual bool IsProjectFileIgnored(IProjectFile projectFile);
    protected virtual bool IsFilePathIgnored(VirtualFileSystemPath fileSystemPath);
    public sealed virtual bool IsWritable(ISolution solution);
    public sealed virtual bool IsWritable(IProject project);
    public sealed virtual bool IsWritable(IProjectFile projectFile);
    public void SkipEnsureWritable(Lifetime lifetime, VirtualFileSystemPath location);
}
public interface JetBrains.ProjectModel.Model2.Transaction.IEnsureWritableCollection {
    [MustDisposeResourceAttribute]
public abstract virtual ModificationCookie CreateCookie(ICollection`1<IProjectFile> doNotOpenBefore);
    public abstract virtual IEnsureWritableCollection AddProject(IProject project);
    public abstract virtual IEnsureWritableCollection AddSolution(ISolution solution);
    public abstract virtual IEnsureWritableCollection AddFile(IProjectFile projectFile);
    public abstract virtual IEnsureWritableCollection AddFiles(IProjectFile[] projectFiles);
    public abstract virtual IEnsureWritableCollection AddFiles(IEnumerable`1<IProjectFile> projectFiles);
    public abstract virtual IEnsureWritableCollection AddPaths(VirtualFileSystemPath[] paths);
    public abstract virtual IEnsureWritableCollection AddPaths(IEnumerable`1<VirtualFileSystemPath> paths);
    public abstract virtual IEnsureWritableCollection AddPath(VirtualFileSystemPath path);
}
public interface JetBrains.ProjectModel.Model2.Transaction.IEnsureWritableHandler {
    public abstract virtual IEnsureWritableCollection CreateCollection();
    public abstract virtual bool IsInModification(IProjectFile projectFile);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MakingWritable(MakingWritableEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MakingWritable(MakingWritableEventHandler value);
    public abstract virtual bool IsWritable(ISolution solution);
    public abstract virtual bool IsWritable(IProject project);
    public abstract virtual bool IsWritable(IProjectFile projectFile);
    [CompilerGeneratedAttribute]
public abstract virtual void add_BeforeMadeWritable(BeforeMadeWritableEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BeforeMadeWritable(BeforeMadeWritableEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ModificationFinished(ModificationFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ModificationFinished(ModificationFinishedEventHandler value);
}
public class JetBrains.ProjectModel.Model2.Web.ProjectFilesTracker : RecursiveProjectModelChangeDeltaVisitor {
    private Action`2<IProjectFile, VirtualFileSystemPath> myDeletedDelegate;
    private Action`1<IProjectFile> myCreatedDelegate;
    private Action`1<IProjectFile> myExternalChangeDelegate;
    private Action`1<IProjectFile> myPropertiesChangeDelegate;
    public ProjectFilesTracker(Action`2<IProjectFile, VirtualFileSystemPath> deletedDelegate, Action`1<IProjectFile> createdDelegate, Action`1<IProjectFile> externalChangeDelegate, Action`1<IProjectFile> propertiesChangeDelegate);
    private static void Call(Action`1<IProjectFile> delegate, IProjectFile projectFile);
    private static void Call(Action`2<IProjectFile, VirtualFileSystemPath> delegate, IProjectFile projectFile, VirtualFileSystemPath oldPath);
    public virtual void VisitItemDelta(ProjectItemChange change);
    public static void ProcessChange(ProjectModelChange projectModelChange, Action`2<IProjectFile, VirtualFileSystemPath> deleteDelegate, Action`1<IProjectFile> createDelegate, Action`1<IProjectFile> externalChangeDelegate, Action`1<IProjectFile> propertiesChangeDelegate);
}
public class JetBrains.ProjectModel.ModificationFinishedEventArgs : EventArgs {
    [NotNullAttribute]
public ICollection`1<IProjectFile> FilesToMakeWritable;
    [NotNullAttribute]
public ICollection`1<VirtualFileSystemPath> PathsToMakeWritable;
    public bool IsEmpty { get; }
    public ModificationFinishedEventArgs(ICollection`1<IProjectFile> filesToMakeWritable, ICollection`1<VirtualFileSystemPath> pathsToMakeWritable);
    public bool get_IsEmpty();
}
public class JetBrains.ProjectModel.ModificationFinishedEventHandler : MulticastDelegate {
    public ModificationFinishedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ModificationFinishedEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, ModificationFinishedEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class JetBrains.ProjectModel.MSBuild.BuildTools.BundledMsBuildToolProvider : object {
    private bool myShouldSetNetCoreSdkToInvalidIfEmpty;
    public BundledMsBuildToolProvider(bool shouldSetNetCoreSdkToInvalidIfEmpty);
    public sealed virtual IEnumerable`1<IBuildTool> Discover(BuildToolEnvironment env);
}
public class JetBrains.ProjectModel.MSBuild.BuildTools.DotNetCoreMsBuild : BuildToolBase {
    private static string SdksDirectoryName;
    public int Priority { get; }
    public bool UseDotNetCoreForLaunch { get; }
    public DotNetCoreMsBuild(Version2 version, VirtualFileSystemPath directory, VirtualFileSystemPath exePath, DotNetCoreToolset dotNetCoreToolset);
    public virtual int get_Priority();
    public virtual bool get_UseDotNetCoreForLaunch();
    private static string GetRunVbcPath(VirtualFileSystemPath msBuildRootFolderPath);
    private static string GetRunCscPath(VirtualFileSystemPath msBuildRootFolderPath);
    private static string GetRunToolPath(string compilerName, VirtualFileSystemPath msBuildRootFolderPath);
}
public class JetBrains.ProjectModel.MSBuild.BuildTools.DotNetCoreMsBuildProvider : object {
    private ILogger myLogger;
    public sealed virtual IEnumerable`1<IBuildTool> Discover(BuildToolEnvironment env);
}
public static class JetBrains.ProjectModel.MSBuild.BuildTools.DotNetCoreSdkEnvironmentResolver : object {
    public static string DOTNET_MSBUILD_SDK_RESOLVER_CLI_DIR;
    private static string DOTNET_MSBUILD_SDK_RESOLVER_SDKS_DIR;
    public static string MSBuildSDKsPath;
    private static string InvalidSdkDir;
    public static string MSBuildSdkResolver;
    private static DotNetCoreSdkEnvironmentResolver();
    public static IDictionary`2<string, string> DetectSdkEnvironmentVariables(VirtualFileSystemPath buildToolFolder, BuildToolEnvironment env, bool shouldSetNetCoreSdkToInvalidIfEmpty, DotNetSdkPolicy dotNetSdkPolicy);
    [NotNullAttribute]
public static VirtualFileSystemPath TryGetSdksDirectory(IBuildTool buildTool);
}
public enum JetBrains.ProjectModel.MSBuild.BuildTools.DotNetSdkPolicy : Enum {
    public int value__;
    public static DotNetSdkPolicy PreferDotNetSdks;
    public static DotNetSdkPolicy PreferMSBuildBundledSdks;
}
public class JetBrains.ProjectModel.MSBuild.BuildTools.MonoMsBuildTool : BuildToolBase {
    public int Priority { get; }
    public bool UseDotNetCoreForLaunch { get; }
    public MonoMsBuildTool(Version2 version, VirtualFileSystemPath directory, VirtualFileSystemPath exePath);
    public virtual int get_Priority();
    public virtual bool get_UseDotNetCoreForLaunch();
}
public class JetBrains.ProjectModel.MSBuild.BuildTools.MonoMsBuildToolProvider : object {
    private bool myShouldSetNetCoreSdkToInvalidIfEmpty;
    private ILogger myLogger;
    public MonoMsBuildToolProvider(bool shouldSetNetCoreSdkToInvalidIfEmpty);
    public sealed virtual IEnumerable`1<IBuildTool> Discover(BuildToolEnvironment env);
}
public class JetBrains.ProjectModel.MSBuild.BuildTools.MsBuildTool : BuildToolBase {
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    public int Priority { get; }
    public bool UseDotNetCoreForLaunch { get; }
    public MsBuildTool(Version2 version, VirtualFileSystemPath directory, VirtualFileSystemPath exePath, int priority);
    [CompilerGeneratedAttribute]
public virtual int get_Priority();
    public virtual bool get_UseDotNetCoreForLaunch();
}
public class JetBrains.ProjectModel.MSBuild.BuildTools.RegistryMsBuildToolProvider : object {
    private bool myShouldSetNetCoreSdkToInvalidIfEmpty;
    private ILogger myLogger;
    public RegistryMsBuildToolProvider(bool shouldSetNetCoreSdkToInvalidIfEmpty);
    public sealed virtual IEnumerable`1<IBuildTool> Discover(BuildToolEnvironment env);
}
public class JetBrains.ProjectModel.MSBuild.BuildTools.VisualStudio15MsBuildToolProvider : object {
    private bool myShouldSetNetCoreSdkToInvalidIfEmpty;
    private static ILogger ourLogger;
    public VisualStudio15MsBuildToolProvider(bool shouldSetNetCoreSdkToInvalidIfEmpty);
    private static VisualStudio15MsBuildToolProvider();
    public sealed virtual IEnumerable`1<IBuildTool> Discover(BuildToolEnvironment env);
    public static void DiscoverFromFolder(BuildToolEnvironment env, VirtualFileSystemPath root, bool shouldSetNetCoreSdkToInvalidIfEmpty, bool shouldPrefer64Bits, List`1<MsBuildTool> result);
    [NotNullAttribute]
private static List`1<VirtualFileSystemPath> GetMSBuildExePaths(VirtualFileSystemPath msBuildRootFolder, bool shouldPrefer64Bits, VirtualFileSystemPath& preferredMSBuildExePath);
    private static JetArchitecture GetOSArchitecture();
    private static bool ShouldPrefer64Bits(BuildToolEnvironment env, InstalledVs installedVsDir);
    [CanBeNullAttribute]
private static Version2 TryReadMsBuildToolVersion(VirtualFileSystemPath msBuildExePath);
}
public class JetBrains.ProjectModel.MSBuild.BuildTools.VisualStudioForMacMsBuildToolProvider : object {
    private bool myShouldSetNetCoreSdkToInvalidIfEmpty;
    private ILogger myLogger;
    public VisualStudioForMacMsBuildToolProvider(bool shouldSetNetCoreSdkToInvalidIfEmpty);
    public sealed virtual IEnumerable`1<IBuildTool> Discover(BuildToolEnvironment env);
}
internal class JetBrains.ProjectModel.MSBuild.CSharpProjectConfigurationImporter : ManagedProjectConfigurationImporter {
    public CSharpProjectConfigurationImporter(XmlNamespaceManager namespaceManager);
    protected virtual void ImportInternal(IManagedProjectConfiguration config, XmlElement propertyGroupElement);
}
public interface JetBrains.ProjectModel.MSBuild.Extensibility.IMsBuildCustomPropertiesProvider {
    public abstract virtual IDictionary`2<string, string> GetProperties();
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.MSBuild.Extensibility.MsBuildCustomPropertiesProvider : object {
    [CompilerGeneratedAttribute]
private ILogger <logger>P;
    [CompilerGeneratedAttribute]
private IImmutableList`1<IMsBuildCustomPropertiesProvider> <services>P;
    public MsBuildCustomPropertiesProvider(ILogger logger, IImmutableList`1<IMsBuildCustomPropertiesProvider> services);
    public void AddCustomProperties(Dictionary`2<string, string> properties);
}
public interface JetBrains.ProjectModel.MSBuild.IMsBuildUserProfile {
    [NotNullAttribute]
public IReadOnlyDictionary`2<string, string> GlobalProperties { get; }
    [NotNullAttribute]
public IReadOnlyCollection`1<string> SolutionLoadingTargets { get; }
    public int SolutionLoadingNodesCount { get; }
    public bool SolutionLoadingOrderingEnabled { get; }
    public bool DiffBasedModificationsEnabled { get; }
    [NotNullAttribute]
public abstract virtual FileSystemPath GetLogPathFor(IBuildTool buildTool);
    public abstract virtual IReadOnlyDictionary`2<string, string> get_GlobalProperties();
    public abstract virtual IReadOnlyCollection`1<string> get_SolutionLoadingTargets();
    public abstract virtual int get_SolutionLoadingNodesCount();
    public abstract virtual bool get_SolutionLoadingOrderingEnabled();
    public abstract virtual bool get_DiffBasedModificationsEnabled();
}
public interface JetBrains.ProjectModel.MSBuild.IMsBuildVersionResolver {
    public abstract virtual Version GetMsBuildVersion();
}
internal class JetBrains.ProjectModel.MSBuild.ManagedProjectConfigurationImporter : object {
    private XmlNamespaceManager myNamespaceManager;
    protected ManagedProjectConfigurationImporter(XmlNamespaceManager namespaceManager);
    protected string GetChildValue(XmlElement parent, string childTag, string defaultValue);
    protected string GetChildValue(XmlElement parent, string childTag);
    protected virtual void ImportInternal(IManagedProjectConfiguration config, XmlElement propertyGroupElement);
    public void Import(IManagedProjectConfiguration newConfig, XmlElement propertyGroupElement);
}
internal class JetBrains.ProjectModel.MSBuild.MSBuildImporter : object {
    private IShellLocks myLocks;
    private ProjectFilePropertiesFactory myProjectFilePropertiesFactory;
    public MSBuildImporter(IShellLocks locks, ProjectFilePropertiesFactory projectFilePropertiesFactory);
    public sealed virtual IProject ImportProject(SolutionElement solutionElement, SlnFileProject project, TargetFrameworkId defaultTargetFrameworkId);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.MSBuild.MsBuildProjectFilePropertiesExtensions : object {
    [ExtensionAttribute]
public static void UpdatePropertiesFromMap(ProjectFileProperties properties, IDictionary`2<string, string> map);
    [ExtensionAttribute]
public static void UpdatePropertiesFromSource(ProjectFileProperties properties, TContext context, Func`3<TContext, string, ValueTuple`2<bool, string>> func);
    private static ItemSubType GetSubtype(string evaluatedValue);
    private static bool IsDesignTimeBuildInput(string evaluatedValue);
    [ExtensionAttribute]
public static void ExportToMap(ProjectFileProperties properties, IDictionary`2<string, string> map);
}
public class JetBrains.ProjectModel.MSBuild.MSBuildProjectFileUpdater : object {
    private static string PREFIX;
    private XmlDocument myXmlDocument;
    private XmlNamespaceManager myXmlNamespaceManager;
    public MSBuildProjectFileUpdater(XmlDocument xmlDocument);
    public sealed virtual void OnItemAdded(ProjectItemChange addChange);
    public sealed virtual void OnItemRemoved(ProjectItemChange changeDelta);
    public sealed virtual void OnItemMoved(ProjectItemChange moveChange);
    public sealed virtual void OnPropertyChanged(ProjectItemChange itemChange);
    private void EnsureProjectFileProperties(IProjectFile projectFile);
    public sealed virtual void OnReferenceAdded(ProjectReferenceChange projectRefChange);
    public sealed virtual void OnReferenceRemoved(ProjectReferenceChange modRefChange);
    private static string Qualify(string elementName);
    private static XmlElement CreateElement(XmlElement parentElement, string elementName, XmlNode insertBeforeNode);
    private static XmlElement CreateLeafElementWithValue(XmlElement parent, string tagName, string value);
    private XmlElement GetItemGroupElement(string containedElementName);
    private void OnRemove(IProjectModelElement projectModelElement);
    private static string GetPath(IProjectItem projectItem);
    private void SaveItem(XmlElement itemGroupElement, IProjectItem projectItem, XmlNode insertBeforeNode);
    private static void SetRelPathAndLink(XmlElement itemElement, IProjectItem projectItem);
    private void SaveAssemblyReference(XmlElement itemGroupElement, IProjectToAssemblyReference projectToAssemblyReference);
    private void SaveProjectReference(XmlElement itemGroupElement, IProjectToProjectReference projectToProjectReference);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.MSBuild.MsBuildProjectPropertiesBuilder : object {
    private VisualStudioVersionPropertyProvider myVisualStudioVersionPropertyProvider;
    public MsBuildProjectPropertiesBuilder(VisualStudioVersionPropertyProvider visualStudioVersionPropertyProvider);
    public Dictionary`2<string, string> Build(IBuildTool toolset, VirtualFileSystemPath solutionFilePath, string activeConfiguration, string activePlatform);
    [NotNullAttribute]
public Dictionary`2<string, string> Build(Version2 toolsetVersion, VirtualFileSystemPath solutionFilePath, VirtualFileSystemPath toolsetBinDirPath, string activeConfiguration, string activePlatform, bool isDotNetCoreBuildTool);
    public Dictionary`2<string, string> GetVisualStudioSpecificProperties(Version2 version, bool isDotNetCoreBuildTool, bool isConsoleBuild, bool alreadyHasBuildingInsideVisualStudioProperty);
    public static void PassSolutionProperties(Dictionary`2<string, string> properties, VirtualFileSystemPath solutionFilePath);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.MSBuild.MSBuildProjectUtil : object {
    public static string SDKAttribute;
    public static string MSBuildProjectExtensionsPathProperty;
    public static string MSBuildThisFileDirectoryProperty;
    public static string MSBuildAllProjectsProperty;
    public static string MSBuildSourceProjectFileAttr;
    public static string ReferencePathItem;
    public static string ReferencePathWithRefAssembliesItem;
    public static string ProjectReferenceItem;
    public static string PackageReferenceItem;
    public static string FrameworkReferenceItem;
    public static string FrameworkNameAttribute;
    public static string IsTransitiveFrameworkReferenceAttribute;
    public static string RuntimeFrameworkItem;
    public static string ManagePackageVersionsCentrallyItem;
    public static string VersionOverrideItem;
    public static string GlobalPackageReferenceItem;
    public static string FolderElement;
    public static string AfterTargetsAttr;
    public static string AssemblyFileAttr;
    public static string AssemblyNameAttr;
    public static string BeforeTargetsAttr;
    public static string CommandAttr;
    public static string ConditionAttr;
    public static string ContinueOnErrorAttr;
    public static string CustomToolNamespaceAttr;
    public static string DefaultTargetsAttr;
    public static string DependsOnTargetsAttr;
    public static string DependentUponAttr;
    public static string EvaluateAttr;
    public static string ExcludeAttr;
    public static string ExecuteTargetsAttr;
    public static string InitialTargetsAttr;
    public static string IncludeAttr;
    public static string InputsAttr;
    public static string ItemNameAttr;
    public static string IsImplicitlyDefinedAttr;
    public static string IsDesignTimeBuildInputAttr;
    public static string GeneratorAttr;
    public static string HintPathAttr;
    public static string KeepDuplicateOutputsAttr;
    public static string KeepDuplicatesAttr;
    public static string KeepMetadataAttr;
    public static string LastGenOutputAttr;
    public static string NameAttr;
    public static string NoWarnAttr;
    public static string OutputAttr;
    public static string OutputsAttr;
    public static string OriginalProjectReferenceItemSpecAttr;
    public static string OriginalItemSpecAttr;
    public static string ParameterTypeAttr;
    public static string ProjectAttr;
    public static string PropertyNameAttr;
    public static string RemoveAttr;
    public static string RemoveMetadataAttr;
    public static string RequiredAttr;
    public static string ReturnsAttr;
    public static string ResolvedFromAttr;
    public static string TaskFactoryAttr;
    public static string TaskNameAttr;
    public static string TaskParameterAttr;
    public static string TreatAsLocalPropertyAttr;
    public static string ToolsVersionAttr;
    public static string UpdateAttr;
    public static string XmlnsAttr;
    public static string VersionAttr;
    public static string AdditionalFilesElement;
    public static string AppDesignerElement;
    public static string ApplicationDefinitionElement;
    public static string ApplicationVersionElement;
    public static string AssemblyAttributeElement;
    public static string AssemblyMetadataElement;
    public static string ChooseElement;
    public static string CompileElement;
    public static string ContentElement;
    public static string BuildElement;
    public static string ClCompileElement;
    public static string ExecElement;
    public static string FxCompileElement;
    public static string ClIncludeElement;
    public static string NatvisElement;
    public static string EmbeddedResourceElement;
    public static string EntityDeployElement;
    public static string ImportElement;
    public static string ImportGroupElement;
    public static string InterfaceDefinitionElement;
    public static string BundleResourceElement;
    public static string ItemDefinitionGroupElement;
    public static string ItemGroupElement;
    public static string NameElement;
    public static string NoneElement;
    public static string NativeReferenceElement;
    public static string OnErrorElement;
    public static string OtherwiseElement;
    public static string OutputElement;
    public static string PageElement;
    public static string ParameterGroupElement;
    public static string ProductVersionElement;
    public static string ProjectExtensionsElement;
    public static string ProjectRootElement;
    public static string PropertyGroupElement;
    public static string ProjectCapabilityElement;
    public static string ReferenceElement;
    public static string ComReferenceElement;
    public static string ComFileReferenceElement;
    public static string ResourceElement;
    public static string SchemaVersionElement;
    public static string SDKReferenceElement;
    public static string SuggestedWorkloadElement;
    public static string ResolvedSDKReferenceElement;
    public static string SplashScreenElement;
    public static string TargetElement;
    public static string TaskBodyElement;
    public static string UsingTaskElement;
    public static string WhenElement;
    public static string AnalyzerElement;
    public static string WCFMetadataElement;
    public static string WCFMetadataStorageElement;
    public static string WixExtensionElement;
    public static string WinMDFullPathElement;
    public static string GlobalAnalyzerConfigFilesElement;
    public static string EditorConfigFilesElement;
    public static string AvailableItemNameElement;
    public static string DefineConstantsProperty;
    public static string AdditionalFileItemNamesProperty;
    public static string AllowUnsafeBlocksProperty;
    public static string AssemblyNameProperty;
    public static string AppDesignerFolderProperty;
    public static string BaseAddressProperty;
    public static string BaseDirectoryProperty;
    public static string ConfigurationProperty;
    public static string CheckForOverflowUnderflowProperty;
    public static string DebugSymbolsProperty;
    public static string DebugTypeProperty;
    public static string DefineDebugProperty;
    public static string DefineTraceProperty;
    public static string DocumentationFileProperty;
    public static string DefaultProjectTypeGuidProperty;
    public static string DefaultImplicitPackagesProperty;
    public static string DesignTimeCriticalTargetRegularExpressionProperty;
    public static string ErrorReportProperty;
    public static string EnableUnmanagedDebuggingProperty;
    public static string FileAlignmentProperty;
    public static string FriendlyTargetFrameworkProperty;
    public static string GenerateSerializationAssembliesProperty;
    public static string GenerateProgramFileProperty;
    public static string IntermediateOutputPathProperty;
    public static string BaseIntermediateOutputPathProperty;
    public static string LanguageProperty;
    public static string LanguageVersionProperty;
    public static string NullableProperty;
    public static string ImplicitUsingsProperty;
    public static string RoslynTargetsPathProperty;
    public static string RoslynToolPathProperty;
    public static string CSharpCoreTargetsPathProperty;
    public static string VisualBasicCoreTargetsPathProperty;
    public static string CscToolPathProperty;
    public static string CscToolExeProperty;
    public static string VbcToolPathProperty;
    public static string VbcToolExeProperty;
    public static string TargetLanguageProperty;
    public static string MyTypeProperty;
    public static string NoStdLibProperty;
    public static string NoWarnProperty;
    public static string OptimizeProperty;
    public static string OptionCompareProperty;
    public static string OptionExplicitProperty;
    public static string OptionInferProperty;
    public static string OptionStrictProperty;
    public static string OutDirProperty;
    public static string OutputPathProperty;
    public static string OutputTypeProperty;
    public static string ConfigurationType;
    public static string PlatformProperty;
    public static string PlatformTargetProperty;
    public static string Prefer32BitProperty;
    public static string ProjectGuidProperty;
    public static string ProjectReferenceProperty;
    public static string ProjectTypeGuidsProperty;
    public static string ProjectUISubcaptionProperty;
    public static string RegisterForComInteropProperty;
    public static string RootNamespaceProperty;
    public static string StartupObjectProperty;
    public static string TargetArchitectureProperty;
    public static string TargetFrameworkProperty;
    public static string TargetFrameworksProperty;
    public static string TargetFrameworkIdentifierProperty;
    public static string TargetFrameworkProfileProperty;
    public static string TargetFrameworkVersionProperty;
    public static string TargetFrameworkMonikerProperty;
    public static string TargetFrameworkMonikerAssemblyAttributesPathProperty;
    public static string TargetPlatformDisplayNameProperty;
    public static string TargetPlatformMonikerProperty;
    public static string TargetPlatformVersionProperty;
    public static string TargetPlatformMinVersionProperty;
    public static string TargetPlatformIdentifierAttribute;
    public static string TargetFrameworkDirectoryProperty;
    public static string TargetFrameworkRootPathProperty;
    public static string TargetNameProperty;
    public static string TargetExtProperty;
    public static string TargetPathProperty;
    public static string RuntimeIdentifierProperty;
    public static string RuntimeIdentifiersProperty;
    public static string TreatWarningsAsErrorsProperty;
    public static string WarningsAsErrorsProperty;
    public static string WarningsNotAsErrorsProperty;
    public static string WarningLevelProperty;
    public static string VBRuntime;
    public static string ApplicationIconProperty;
    public static string AutoGenerateBindingRedirectsProperty;
    public static string EmitLegacyAssetsFileItemsProperty;
    public static string InterceptorsPreviewNamespacesProperty;
    public static string NuGetTargetMonikerProperty;
    public static string PortableNuGetModeProperty;
    public static string PackageTargetFallbackProperty;
    public static string AssetTargetFallbackProperty;
    public static string PackageIdProperty;
    public static string VersionProperty;
    public static string PackageVersionProperty;
    public static string RestoreFallbackFoldersProperty;
    public static string RestoreAdditionalProjectFallbackFoldersProperty;
    public static string RestoreProjectStyleProperty;
    public static string RestorePackagesWithLockFileProperty;
    public static string NuGetLockFilePathProperty;
    public static string RestoreLockedModeProperty;
    public static string ProduceReferenceAssemblyProperty;
    public static string ResolvedTargetingPackItem;
    public static string PackageDirectoryAttribute;
    public static string TargetFrameworkAttribute;
    public static string ExcludeFromCurrentConfigurationAttribute;
    public static string AzureFunctionsVersionProperty;
    public static string NuGetPackageRootProperty;
    public static string RuntimeIdentifierGraphPathProperty;
    public static string PackageDownloadItem;
    public static string PackageVersionItem;
    public static string ResolvedCompileFileDefinitionsItem;
    public static string GeneratePathPropertyAttribute;
    public static string PrivateAssetsAttribute;
    public static string IncludeAssetsAttribute;
    public static string ExcludeAssetsAttribute;
    public static string NuGetPackageIdAttribute;
    public static string NuGetSourceTypeAttribute;
    public static string NuGetSourceTypePackage;
    public static string NuGetPackageVersionAttribute;
    public static string PackageIdAttribute;
    public static string Pack;
    public static string PackagePath;
    public static string DirectoryPackagesPropsFileName;
    public static string EnableDefaultItemsProperty;
    public static string EnableDefaultCompileItemsProperty;
    public static string EnableDefaultEmbeddedResourceItemsProperty;
    public static string DefaultLanguageSourceExtensionProperty;
    public static string DefaultItemExcludesProperty;
    public static string DefaultExcludesInProjectFolderProperty;
    public static string PackageDefinitionsItem;
    public static string TypeAttr;
    public static string ResolvedPathAttr;
    public static string PackageDependenciesItem;
    public static string ParentTargetAttr;
    public static string ParentPackageAttr;
    public static string PackageDependenciesDesignTimeItem;
    public static string PathAttr;
    public static string KnownFrameworkReferenceItem;
    public static string DefaultRuntimeFrameworkVersionAttr;
    public static string TargetingPackVersionAttr;
    public static string ResolvedFrameworkReferenceItem;
    public static string AvaloniaXamlElement;
    public static string AvaloniaResourceElement;
    public static string OriginalXamlResourceElement;
    public static string MauiIconElement;
    public static string MauiFontElement;
    public static string MauiImageElement;
    public static string MauiSplashScreenElement;
    public static string MauiAssetElement;
    public static string MauiCssElement;
    public static string MauiXamlElement;
    public static string MauiPlatformSpecificFolderElement;
    public static string PlatformsProjectFolderProperty;
    public static string UseMauiProperty;
    public static string IsAspireHostProperty;
    public static string IsAspireSharedProjectProperty;
    public static string PublishAotProperty;
    public static string OutputTypeExe;
    public static string OutputTypeLibrary;
    public static string OutputTypeDynamicLibrary;
    public static string OutputTypeWinExe;
    public static string OutputTypeWinMd;
    public static string OutputTypeAppContainerExe;
    public static string OutputTypeModule;
    public static string RunCommandProperty;
    public static string RunArgumentsProperty;
    public static string RunWorkingDirectoryProperty;
    public static string UseAppHostProperty;
    public static string StartActionProperty;
    public static string StartExternalUrlProperty;
    public static string StartProgramProperty;
    public static string StartArgumentsProperty;
    public static string StartWorkingDirectoryProperty;
    public static string StartPageUrlProperty;
    public static string XMLNS_URI;
    public static string CONTINUE_ON_ERROR_ATTR;
    public static string DEFAULT_TARGETS_ATTR;
    public static string DEPENDS_ON_TARGETS_ATTR;
    public static string EVALUATE_ATTR;
    public static string EXECUTE_TARGETS_ATTR;
    public static string INITIAL_TARGETS_ATTR;
    public static string INPUTS_ATTR;
    public static string ITEM_NAME_ATTR;
    public static string KEEP_DUPLICATE_OUTPUTS_ATTR;
    public static string NAME_ATTR;
    public static string OUTPUT_ATTR;
    public static string OUTPUTS_ATTR;
    public static string PARAMETER_TYPE_ATTR;
    public static string PROPERTY_NAME_ATTR;
    public static string REMOVE_ATTR;
    public static string REQUIRED_ATTR;
    public static string RETURNS_ATTR;
    public static string TASK_FACTORY_ATTR;
    public static string TASK_NAME_ATTR;
    public static string TASK_PARAMETER_ATTR;
    public static string TOOLS_VERSION_ATTR;
    public static string CHOOSE_ELEMENT;
    public static string IMPORT_GROUP_ELEMENT;
    public static string ITEM_DEFINITION_GROUP_ELEMENT;
    public static string ON_ERROR_ELEMENT;
    public static string OTHERWISE_ELEMENT;
    public static string OUTPUT_ELEMENT;
    public static string PARAMETER_GROUP_ELEMENT;
    public static string PROJECT_EXTENSIONS_ELEMENT;
    public static string TARGET_ELEMENT;
    public static string TASK_BODY_ELEMENT;
    public static string USING_TASK_ELEMENT;
    public static string WHEN_ELEMENT;
    public static string APPLICATION_VERSION_ELEMENT;
    public static string DEFAULT_TARGETS_ELEMENT;
    public static string MSBUILD_VERSION_ATTR;
    public static string PrivateAttribute;
    public static string VisibleAttribute;
    public static string InProjectAttribute;
    public static string AliasesAttribute;
    public static string ImplicitAttribute;
    public static string EmbedInteropTypesAttribute;
    public static string ReferenceOutputAssemblyAttribute;
    public static string ReferenceSourceTargetAttribute;
    public static string PLATFORM_FAMILY_NAME;
    public static string INCLUDE_PATTERN_ATTR;
    public static string EXCLUDE_PATTERN_ATTR;
    public static string SPECIFIC_VERSION_ATTR;
    public static string PROJECT_REFERENCE_PROJECT_GUID_ELEMENT;
    public static string BOOTSTRAPPER_FILE;
    public static string SubTypeAttribute;
    public static string LinkAttribute;
    public static string LinkBaseAttribute;
    public static string BASE_ADDRESS_ELEMENT;
    public static string CHECK_OVERFLOW_ELEMENT;
    public static string CONFIG_OVERRIDE_FILE_ELEMENT;
    public static string DOC_FILE_ELEMENT;
    public static string NOSTD_LIB_ELEMENT;
    public static string NOWARN_ELEMENT;
    public static string COM_INTEROP_ELEMENT;
    public static string REMOVE_INTEGER_ELEMENT;
    public static string TREAT_WARNINGS_AS_ERRORS_ELEMENT;
    public static string GENERATE_SERIALIZATION_ASSEMBLIES;
    public static string RESHARPER_EXTENSIONS;
    public static string UNIT_TEST;
    public static string XAML_APP_DEF;
    public static string XAML_DESIGN_DATA;
    public static string XAML_DESIGN_DATA_WITH_TYPES;
    public static string XAML_SILVERLIGHT_PAGE;
    public static string XAML_ACROPOLIS_COMPONENT;
    public static string APPX_MANIFEST_ELEMENT;
    public static string TypeScriptCompileElement;
    public static string ScriptElement;
    public static string RazorComponentElement;
    public static string PREFIX;
    public static string SharedProjectItemsExtension;
    public static string SharedVcxItemsExtension;
    public static string SharedProjectItemPrefix;
    public static string PathMap;
    public static string SUBTYPE_DESIGNER;
    public static string SUBTYPE_USERCONTROL;
    public static string SUBTYPE_FORM;
    public static string SUBTYPE_COMPONENT;
    public static string SUBTYPE_CODE;
    public static string GetGuidRepr(Guid guid);
    public static ItemSubType GetItemSubType(string itemSubType);
    public static string GetItemSubType(ItemSubType subType);
    public static string GetMSBuildItemType(IProjectFile file);
    [NotNullAttribute]
public static ICollection`1<Guid> GetProjectTypeGuids(string guidsString);
    [CanBeNullAttribute]
public static string GetProjectTypeGuidsString(VirtualFileSystemPath projectFileLocation);
    [CanBeNullAttribute]
private static Stream CreateReadStream(VirtualFileSystemPath location);
    public static string Qualify(string elementName);
    public static ProjectOutputType GetOutputType(string text);
    [ExtensionAttribute]
public static string GetOutputTypeValue(ProjectOutputType outputType);
    public static DebugType GetDebugType(string type);
    public static bool IsCentralPackageManaged(string propertyValue);
}
public class JetBrains.ProjectModel.MSBuild.MsBuildSolutionConfigBuilder : object {
    private StringBuilder myContent;
    public void AddProject(string location, Guid guid, ProjectConfigurationAndPlatform configurationAndPlatform);
    public void AddProject(VirtualFileSystemPath location, Guid guid, ProjectConfigurationAndPlatform configurationAndPlatform);
    public string Complete();
    public virtual string ToString();
}
public static class JetBrains.ProjectModel.MSBuild.MsBuildStructuredLogViewerUtility : object {
    public static bool Open(FileSystemPath binaryLog);
}
public static class JetBrains.ProjectModel.MSBuild.MsBuildTargetFrameworkUtils : object {
    [NotNullAttribute]
private static Regex ourNetTargetFrameworkPrefix;
    private static MsBuildTargetFrameworkUtils();
    public static IReadOnlyCollection`1<TargetFrameworkId> GetTargetFrameworkIdsFromProjectProperties(VirtualFileSystemPath projectFilePath, Func`2<string, string> getPropertyValue, Func`1<IReadOnlyCollection`1<TargetFrameworkId>> getDefaultValue);
    [CanBeNullAttribute]
public static TargetFrameworkId TryGetSingleTargetFrameworkIdFromProjectProperties(VirtualFileSystemPath projectFilePath, Func`2<string, string> getPropertyValue);
}
[SolutionInstanceComponentAttribute("0")]
public class JetBrains.ProjectModel.MSBuild.MsBuildVersionResolver : object {
    private ConcurrentDictionary`2<string, Version> myIsNewMsBuildDictionary;
    private ISolutionToolset mySolutionToolset;
    public MsBuildVersionResolver(ISolutionToolset solutionToolset);
    public sealed virtual Version GetMsBuildVersion();
}
public static class JetBrains.ProjectModel.MSBuild.ProjectConfigurationUtil : object {
    public static string RemoveSpaceFromAnyCpuPlatform(string platformName);
}
public class JetBrains.ProjectModel.MSBuild.ProjectImportHelper : object {
    private static Regex ourConfigRegex;
    private static string AddAdditionalExplicitAssemblyReferences;
    private static string AdditionalExplicitAssemblyReferences;
    private ProjectImpl myProject;
    private Dictionary`2<ProjectLanguage, ManagedProjectConfigurationImporter> myConfigImporters;
    private List`1<string> myImportedNamespaces;
    private XmlNamespaceManager myNamespaceManager;
    private XmlDocument myXmlDocument;
    private ProjectFilePropertiesFactory myProjectFilePropertiesFactory;
    private IShellLocks myLocks;
    private TargetFrameworkId myDefaultTargetFrameworkId;
    private SlnFileProject mySlnProject;
    private VirtualFileSystemPath myProjectHomeDirectory;
    private XmlElement myProjectElement;
    private SolutionElement mySolutionElement;
    public ProjectImportHelper(SolutionElement solutionElement, IShellLocks locks, TargetFrameworkId defaultTargetFrameworkId, SlnFileProject project, XmlDocument xmlDocument, ProjectFilePropertiesFactory projectFilePropertiesFactory);
    private static ProjectImportHelper();
    private bool IsPattern(string s, XmlElement itemElement);
    private void ProcessItemElement(XmlElement itemElement, Dictionary`2<IProjectFile, string> dependsUponSettings, VirtualFileSystemPath projectHomeDirectory, bool isSharedProject);
    private static string Trim(string s);
    private static AssemblyNameInfo GetAssemblyNameFromIncludeAttr(string includeAttr);
    private static void ProcessCopyLocalProperty(IProjectToModuleReference reference, XmlElement referenceElement);
    private void ProcessAssemblyReferenceElement(XmlElement assemblyReferenceElement);
    private void ProcessProjectReferenceElement(XmlElement projectReferenceElement);
    private void ProcessAliasesProperty(IProjectToModuleReference reference, XmlElement referenceElement);
    private static string ExtractConfigurationNameFromCondition(string condition);
    private string GetCommonPropertyValue(string propertyName);
    private string GetCommonPropertyValue(string propertyName, string defaultValue);
    public IProject Import();
    private TargetFrameworkId DetectPlatformId(ICollection`1<Guid> projectTypeGuids, IReadOnlyCollection`1& targetFrameworkIds);
    private ProjectLanguage DetectProjectLanguageType();
    public static ProjectLanguage GetLanguageTypeByProjectAttr(string project);
    private void ProcessImportElement(XmlElement element);
    private static ProjectFolderImpl EnsureFolderExists(ProjectImpl project, String[] splittedRelPath, int ignoreLastParts);
    private static String[] SplitRelativePath(string relativePath);
    private IProjectFile EnsureRelPathExists(ProjectImpl project, String[] splittedRelPath, string name, VirtualFileSystemPath filePath);
    [NotNullAttribute]
private static ProjectFileImpl CreateFileFromFileSystem(VirtualFileSystemPath location, ProjectFolderImpl folder, IProjectFileProperties projectFileProperties);
    [NotNullAttribute]
private static ProjectFolderImpl CreateFolderFromFileSystem(string shortName, ProjectFolderImpl folder);
    private static IProjectToProjectReference CreateProjectReferenceFromReferencedProjectGuid(IProject containingProject, string guid, string name);
    private static IProjectToAssemblyReference CreateAssemblyReference(IProject containingProject, AssemblyNameInfo assemblyName, VirtualFileSystemPath hintPath);
    private static IRoslynAnalyzerReference CreateAnalyzerReference(IProject containingProject, VirtualFileSystemPath location);
    private void AddImplicitReferenceToStdLib(IProject project);
    private static void AddImplicitReferenceToMicrosoftVisualBasicIfNeeded(IProject project);
    private void AddImplicitReferences(IProject project, TargetFrameworkId defaultTargetFrameworkId);
    private bool AddImplicitReferenceAllowed();
    private IEnumerable`1<string> GetImplicitAssemblyReferences();
    public void AddItemsFromFileSystem(ProjectFolderImpl folder, FileSetSet fileSetSet);
    public void BuildFromFileSystemNoEvents(ProjectFolderImpl projectFolderImpl, FileSetSet fileSetSet);
    private void BuildFromFileSystemInternal(ProjectFolderImpl folder, ITrieNode<VirtualFileSystemEntryInfo, VirtualFileSystemPath> trieNode, BuildAction buildAction);
    public static XmlDocument GetProjectXmlDocument(VirtualFileSystemPath projectLocation);
}
public static class JetBrains.ProjectModel.MSBuild.RoslynUtil : object {
    public static string CODE_ANALYSIS_ASSEMBLY_NAME;
    [CanBeNullAttribute]
[MustUseReturnValueAttribute]
public static Version GetRoslynVersion(VirtualFileSystemPath roslynDirectoryPath);
}
internal class JetBrains.ProjectModel.MSBuild.VBProjectConfigurationImporter : ManagedProjectConfigurationImporter {
    private static string DEBUG_TYPE_ELEMENT;
    private static string OPTION_STRICT_ELEMENT;
    private static string OPTION_COMPARE_ELEMENT;
    private static string OPTION_EXPLICIT_ELEMENT;
    private static string ROOT_NAMESPACE_ELEMENT;
    private static string MYTYPE_ELEMENT;
    public VBProjectConfigurationImporter(XmlNamespaceManager namespaceManager);
    protected virtual void ImportInternal(IManagedProjectConfiguration config, XmlElement propertyGroupElement);
}
internal class JetBrains.ProjectModel.MSBuild.VcxProjectConfigurationImporter : ManagedProjectConfigurationImporter {
    public VcxProjectConfigurationImporter(XmlNamespaceManager namespaceManager);
    protected virtual void ImportInternal(IManagedProjectConfiguration config, XmlElement propertyGroupElement);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.MSBuild.VisualStudioVersionPropertyProvider : object {
    [CanBeNullAttribute]
public string GetVisualStudioVersionForToolset(Version2 toolsetVersion);
    protected virtual string GuessForToolset4();
}
[ProjectFileTypeDefinitionAttribute("MSBuild")]
public class JetBrains.ProjectModel.MSBuildProjectFileType : BuildScriptProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static MSBuildProjectFileType <Instance>k__BackingField;
    public static string ProjExtension;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static MSBuildProjectFileType Instance { get; private set; }
    protected MSBuildProjectFileType(string name);
    protected MSBuildProjectFileType(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static MSBuildProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(MSBuildProjectFileType value);
}
[ProjectFileTypeDefinitionAttribute("MSTestAccessor")]
public class JetBrains.ProjectModel.MSTestAccessorProjectFileType : KnownProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static MSTestAccessorProjectFileType <Instance>k__BackingField;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static MSTestAccessorProjectFileType Instance { get; private set; }
    protected MSTestAccessorProjectFileType(string name);
    protected MSTestAccessorProjectFileType(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static MSTestAccessorProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(MSTestAccessorProjectFileType value);
}
[ProjectFileTypeDefinitionAttribute("NAnt")]
public class JetBrains.ProjectModel.NAntProjectFileType : BuildScriptProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static NAntProjectFileType <Instance>k__BackingField;
    public static string Extension;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static NAntProjectFileType Instance { get; private set; }
    protected NAntProjectFileType(string name);
    protected NAntProjectFileType(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static NAntProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(NAntProjectFileType value);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.Network.ShellCertificateManager : HttpClientHandlerPatcher {
    public ShellCertificateManager(ILogger logger);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.Network.SolutionCertificateManager : object {
    [NotNullAttribute]
private UriPool myAutoRejectUriPool;
    public SolutionCertificateManager(ILogger logger);
    public void AutoReject(Lifetime lifetime, Uri uri);
    protected bool ShouldBeAutoRejected(Uri uri);
    public virtual bool OnServerCertificateValidationCallback(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);
}
public class JetBrains.ProjectModel.NuGet.Common.NuGetInvalidVersion : NuGetVersion {
    public NuGetInvalidVersion(string version);
}
public static class JetBrains.ProjectModel.NuGet.Common.NuGetMetapackageHelper : object {
    private static String[] ourWellKnownMetapackages;
    private static NuGetMetapackageHelper();
    public static bool IsMetapackage(string packageId);
}
public abstract class JetBrains.ProjectModel.NuGet.Common.NuGetPackageMatcher : object {
    public int CurrentScore { get; }
    public bool FixedOrder { get; }
    public abstract virtual bool Matches(string text);
    public abstract virtual int get_CurrentScore();
    public virtual bool get_FixedOrder();
    public static NuGetPackageMatcher Create(string searchTerm, NuGetPackagePsiCache packagePsiCache);
}
public class JetBrains.ProjectModel.NuGet.Common.NuGetPathHelper : object {
    [NotNullAttribute]
public static string GetCorrectPath(VirtualFileSystemPath path);
}
[SolutionInstanceComponentAttribute("0")]
public class JetBrains.ProjectModel.NuGet.Common.NuGetRestoreCacheFileManager : object {
    [CompilerGeneratedAttribute]
private NuGetRestoreOutputPathResolver <restoreOutputPathResolver>P;
    private static string OldSdkCacheFilenamePattern;
    public NuGetRestoreCacheFileManager(NuGetRestoreOutputPathResolver restoreOutputPathResolver);
    [NotNullAttribute]
public VirtualFileSystemPath ResolveOldNuGetCacheFilePath(IProject project);
}
[SolutionInstanceComponentAttribute("0")]
public class JetBrains.ProjectModel.NuGet.Common.NuGetRestoreOutputPathResolver : object {
    [CompilerGeneratedAttribute]
private IMsBuildVersionResolver <msBuildVersionResolver>P;
    private static Version ourMsBuildPrimaryLockFileLocationVersion;
    public NuGetRestoreOutputPathResolver(IMsBuildVersionResolver msBuildVersionResolver);
    private static NuGetRestoreOutputPathResolver();
    [NotNullAttribute]
[PublicAPIAttribute]
public VirtualFileSystemPath GetRestoreOutputSystemPath(IProject project);
    protected virtual bool IsNewMsBuild();
}
[SolutionInstanceComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ProjectModel.NuGet.Common.NuGetRuntimeInformationDetector : object {
    [CanBeNullAttribute]
public virtual DotNetCoreToolset GetDotNetCoreToolset();
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ProjectModel.NuGet.Common.NuGetSupportStatus : object {
    public virtual bool IsEmbeddedRestoreFullySupported();
}
public interface JetBrains.ProjectModel.NuGet.Completion.INuGetBasicCompletionProvider {
    public int Priority { get; }
    public abstract virtual int get_Priority();
}
public interface JetBrains.ProjectModel.NuGet.Completion.INuGetCompletionProvider {
    public abstract virtual IReadOnlyList`1<string> CompleteIdInstantly(string idPrefix);
    public abstract virtual IReadOnlyList`1<NuGetVersion> CompleteVersionInstantly(string packageId, string versionPrefix);
    public abstract virtual Task`1<IReadOnlyList`1<string>> CompleteIdAsync(string idPrefix, CancellationToken token);
    public abstract virtual Task`1<IReadOnlyList`1<NuGetVersion>> CompleteVersionAsync(string packageId, string versionPrefix, CancellationToken token);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ProjectModel.NuGet.Completion.NuGetCompletionService : object {
    private INuGetBasicCompletionProvider[] myProviders;
    public NuGetCompletionService(IEnumerable`1<INuGetBasicCompletionProvider> providers);
    public sealed virtual IReadOnlyList`1<string> CompleteIdInstantly(string idPrefix);
    public sealed virtual IReadOnlyList`1<NuGetVersion> CompleteVersionInstantly(string packageId, string versionPrefix);
    public sealed virtual Task`1<IReadOnlyList`1<string>> CompleteIdAsync(string idPrefix, CancellationToken token);
    public sealed virtual Task`1<IReadOnlyList`1<NuGetVersion>> CompleteVersionAsync(string packageId, string versionPrefix, CancellationToken token);
    private IReadOnlyList`1<T> Aggregate(Func`2<INuGetCompletionProvider, IReadOnlyList`1<T>> calc);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Completion.NuGetCompletionService/<Aggregate>d__7`1")]
private Task`1<IReadOnlyList`1<T>> Aggregate(Func`2<INuGetCompletionProvider, Task`1<IReadOnlyList`1<T>>> calc);
    private static IReadOnlyList`1<T> RemoveDuplicates(IReadOnlyList`1<T> items);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ProjectModel.NuGet.Completion.NuGetInstalledCompletionProvider : object {
    [CompilerGeneratedAttribute]
private NuGetPackageReferenceTracker <packageReferenceTracker>P;
    public int Priority { get; }
    public NuGetInstalledCompletionProvider(NuGetPackageReferenceTracker packageReferenceTracker);
    public sealed virtual int get_Priority();
    public sealed virtual IReadOnlyList`1<string> CompleteIdInstantly(string idPrefix);
    public sealed virtual IReadOnlyList`1<NuGetVersion> CompleteVersionInstantly(string packageId, string versionPrefix);
    public sealed virtual Task`1<IReadOnlyList`1<string>> CompleteIdAsync(string idPrefix, CancellationToken token);
    public sealed virtual Task`1<IReadOnlyList`1<NuGetVersion>> CompleteVersionAsync(string packageId, string versionPrefix, CancellationToken token);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ProjectModel.NuGet.Completion.NuGetNativeCompletionProvider : object {
    [CompilerGeneratedAttribute]
private ILogger <logger>P;
    [CompilerGeneratedAttribute]
private NuGetConfigManager <configManager>P;
    [CompilerGeneratedAttribute]
private NuGetHost <nuGetHost>P;
    [CompilerGeneratedAttribute]
private NuGetSourceCacheContextProvider <sourceCacheContextProvider>P;
    public int Priority { get; }
    public NuGetNativeCompletionProvider(ILogger logger, NuGetConfigManager configManager, NuGetHost nuGetHost, NuGetSourceCacheContextProvider sourceCacheContextProvider);
    public sealed virtual int get_Priority();
    public sealed virtual IReadOnlyList`1<string> CompleteIdInstantly(string idPrefix);
    public sealed virtual IReadOnlyList`1<NuGetVersion> CompleteVersionInstantly(string packageId, string versionPrefix);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Completion.NuGetNativeCompletionProvider/<CompleteIdAsync>d__9")]
public sealed virtual Task`1<IReadOnlyList`1<string>> CompleteIdAsync(string idPrefix, CancellationToken token);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Completion.NuGetNativeCompletionProvider/<CompleteVersionAsync>d__10")]
public sealed virtual Task`1<IReadOnlyList`1<NuGetVersion>> CompleteVersionAsync(string packageId, string versionPrefix, CancellationToken token);
}
public interface JetBrains.ProjectModel.NuGet.Configs.INuGetCloneableSettings {
    public abstract virtual INuGetCloneableSettings Clone();
}
public interface JetBrains.ProjectModel.NuGet.Configs.INuGetConfig {
    public ISettings NativeSettings { get; }
    public abstract virtual ISettings get_NativeSettings();
}
public interface JetBrains.ProjectModel.NuGet.Configs.INuGetDetailedConfig {
    public NuGetSourceRepositoryProvider RepositoryProvider { get; }
    [NotNullAttribute]
public NuGetFeed[] AllFeeds { get; }
    public NuGetFeedContext AllFeedContext { get; }
    public NuGetFeed[] EnabledFeeds { get; }
    public NuGetFeedContext EnabledFeedContext { get; }
    public NuGetConfigFile[] ConfigFiles { get; }
    [NotNullAttribute]
public string ErrorMessage { get; public set; }
    public PackageRestoreConsent NativeRestoreConsent { get; }
    public NuGetUltraRestoreConsent EffectiveRestoreConsent { get; }
    public string Fingerprints { get; }
    public abstract virtual NuGetSourceRepositoryProvider get_RepositoryProvider();
    public abstract virtual NuGetFeed[] get_AllFeeds();
    public abstract virtual NuGetFeedContext get_AllFeedContext();
    public abstract virtual NuGetFeed[] get_EnabledFeeds();
    public abstract virtual NuGetFeedContext get_EnabledFeedContext();
    public abstract virtual NuGetConfigFile[] get_ConfigFiles();
    public abstract virtual string get_ErrorMessage();
    public abstract virtual void set_ErrorMessage(string value);
    public abstract virtual PackageRestoreConsent get_NativeRestoreConsent();
    public abstract virtual NuGetUltraRestoreConsent get_EffectiveRestoreConsent();
    public abstract virtual string get_Fingerprints();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.NuGet.Configs.NuGetConfigExtensions : object {
    [ExtensionAttribute]
[PublicAPIAttribute]
public static VirtualFileSystemPath GetPackagesFolderPath(INuGetConfig config, VirtualFileSystemPath solutionDirectory);
    [ExtensionAttribute]
[PublicAPIAttribute]
public static VirtualFileSystemPath GetGlobalPackagesFolder(INuGetConfig config);
    [ExtensionAttribute]
[PublicAPIAttribute]
public static NuGetPathContext GetPathContextSafe(INuGetConfig config);
    [ExtensionAttribute]
[PublicAPIAttribute]
[CanBeNullAttribute]
public static NuGetFallbackPackagePathResolver GetFallbackPackagePathResolver(INuGetConfig config);
}
public class JetBrains.ProjectModel.NuGet.Configs.NuGetConfigFile : object {
    private NuGetFeedManager myFeedManager;
    [CompilerGeneratedAttribute]
private ISettings <NativeSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetSourceRepositoryProvider <RepositoryProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <ConfigFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetFeed[] <Feeds>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DetailedInfoHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageRestoreConsent <RestoreConsent>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetPathContext <PathContext>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetConfigPathProperty <GlobalPackagesFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetConfigPathProperty <RepositoryPath>k__BackingField;
    public ISettings NativeSettings { get; }
    public NuGetSourceRepositoryProvider RepositoryProvider { get; }
    [CanBeNullAttribute]
public VirtualFileSystemPath ConfigFilePath { get; }
    [NotNullAttribute]
public string DisplayName { get; }
    public NuGetFeed[] Feeds { get; }
    public string DetailedInfoHeader { get; protected set; }
    [NotNullAttribute]
public PackageRestoreConsent RestoreConsent { get; }
    [NotNullAttribute]
public NuGetPathContext PathContext { get; }
    [NotNullAttribute]
protected IEnumerable`1<INuGetAdditionalFolderProvider> NuGetAdditionalFolderProvider { get; }
    [NotNullAttribute]
public NuGetConfigPathProperty GlobalPackagesFolder { get; }
    [NotNullAttribute]
public NuGetConfigPathProperty RepositoryPath { get; }
    public NuGetConfigFile(NuGetResourceProviderFactory resourceProviderFactory, ISettings nativeSettings, string configFilePath, NuGetFeedManager feedManager);
    protected NuGetConfigFile(NuGetResourceProviderFactory resourceProviderFactory, ISettings nativeSettings, NuGetFeedManager feedManager, string configFilePath, string displayName);
    [CompilerGeneratedAttribute]
public sealed virtual ISettings get_NativeSettings();
    [CompilerGeneratedAttribute]
public NuGetSourceRepositoryProvider get_RepositoryProvider();
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_ConfigFilePath();
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public NuGetFeed[] get_Feeds();
    [CompilerGeneratedAttribute]
public string get_DetailedInfoHeader();
    [CompilerGeneratedAttribute]
protected void set_DetailedInfoHeader(string value);
    [CompilerGeneratedAttribute]
public PackageRestoreConsent get_RestoreConsent();
    [CompilerGeneratedAttribute]
public NuGetPathContext get_PathContext();
    protected IEnumerable`1<INuGetAdditionalFolderProvider> get_NuGetAdditionalFolderProvider();
    [NotNullAttribute]
public virtual IEnumerable`1<string> GetFallbackFolders();
    [CompilerGeneratedAttribute]
public NuGetConfigPathProperty get_GlobalPackagesFolder();
    [CompilerGeneratedAttribute]
public NuGetConfigPathProperty get_RepositoryPath();
    private string GetDisplayName(string filePath, string displayName);
    [NotNullAttribute]
private NuGetConfigPathProperty GetGlobalPackagesFolder();
    [NotNullAttribute]
private NuGetConfigPathProperty GetRepositoryPath(VirtualFileSystemPath solutionDirectory);
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.Configs.NuGetConfigManager : object {
    private Lifetime myLifetime;
    private IDiagnosticCollector myCollector;
    private IShellLocks myLocks;
    private NuGetValidationManager myValidationManager;
    private NuGetFeedManager myFeedManager;
    private NuGetOptionsProvider myOptions;
    private SolutionFileLocationLive mySolutionFileLocationLive;
    private NuGetResourceProviderFactory myResourceProviderFactory;
    private ILogger myLogger;
    private SequentialLifetimes myConfigLifetimes;
    private SequentialLifetimes myFallbackLifetimes;
    private AsyncItemsProcessor`1<bool> myConfigReloadProcessor;
    private SingleThreadExecutor mySingleThreadExecutor;
    private ISettings myRawConfig;
    private string myLoadSettingsError;
    [CompilerGeneratedAttribute]
private Property`1<NuGetSmartConfig> <EffectiveConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private Signal`1<NuGetSmartConfig> <OnChangesInConfig>k__BackingField;
    private VirtualFileSystemPath SolutionDirectory { get; }
    public Property`1<NuGetSmartConfig> EffectiveConfig { get; }
    public Signal`1<NuGetSmartConfig> OnChangesInConfig { get; }
    public NuGetConfigManager(NuGetResourceProviderFactory resourceProviderFactory, NuGetFeedManager feedManager, NuGetOptionsProvider options, Lifetime lifetime, IDiagnosticCollector collector, IShellLocks locks, ILogger logger, SolutionFileLocationLive solutionFileLocationLive, IIsApplicationActiveState isApplicationActiveState);
    private VirtualFileSystemPath get_SolutionDirectory();
    [CompilerGeneratedAttribute]
public Property`1<NuGetSmartConfig> get_EffectiveConfig();
    [CompilerGeneratedAttribute]
public Signal`1<NuGetSmartConfig> get_OnChangesInConfig();
    public Task ReactOnFileChanges(string reason);
    public void EnqueueReload(string reason, string loadErrorMessage);
    private void Reload(string loadErrorMessage);
    private NuGetSmartConfig CreateSmartConfig(ISettings settings, string loadErrorMessage);
    private void QueueRefreshConfigFiles();
    private void QueueRevalidateFeedMetadata(NuGetSmartConfig config);
    private void RefreshFeedInfo(NuGetSmartConfig config);
    private void QueueValidateFallbackFolders(NuGetSmartConfig config);
    private void RefreshFallbackFolders(NuGetSmartConfig config);
    private void UpdateFeedMetadata(NuGetFeed feed);
    public void SetRepositoryPathRaw(string configFilePath, string value);
    public void SetGlobalPackagesFolderRaw(string configFilePath, string value);
    [CanBeNullAttribute]
public ISettings FindConfig(string configFilePath);
    private void ReportFileNotFound(string configFilePath);
    private SettingsLoadResult LoadSettings(VirtualFileSystemPath solutionFolderPath, NuGetFeedManager feedManager);
    private static INuGetLogMessage BuildLogEntry(ISettings settings, Exception e, VirtualFileSystemPath solutionFolderPath, VirtualFileSystemPath settingsFolder);
    private static string BuildNotificationText(ISettings settings, Exception e);
    [CanBeNullAttribute]
private static string GetConfigFilePath(ISettings settings);
    [NotNullAttribute]
private static IReadOnlyCollection`1<string> GetConfigFilePaths(ISettings settings);
    [CompilerGeneratedAttribute]
private void <.ctor>b__23_0(bool _);
    [CompilerGeneratedAttribute]
private void <.ctor>b__23_1(PropertyChangedEventArgs`1<NuGetSmartConfig> e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__23_2(bool _);
    [CompilerGeneratedAttribute]
private void <.ctor>b__23_3(bool _);
    [CompilerGeneratedAttribute]
private void <.ctor>b__23_4();
    [CompilerGeneratedAttribute]
private void <.ctor>b__23_5(PropertyChangedEventArgs`1<bool> _);
    [CompilerGeneratedAttribute]
private void <ReactOnFileChanges>b__24_0();
    [CompilerGeneratedAttribute]
private void <QueueRefreshConfigFiles>b__28_0();
    [CompilerGeneratedAttribute]
private bool <RefreshFallbackFolders>b__32_0(string x);
}
public class JetBrains.ProjectModel.NuGet.Configs.NuGetConfigPathProperty : object {
    [CompilerGeneratedAttribute]
private string <Raw>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <Effective>k__BackingField;
    [NotNullAttribute]
public string Raw { get; }
    [NotNullAttribute]
public VirtualFileSystemPath Effective { get; }
    public NuGetConfigPathProperty(string raw, VirtualFileSystemPath effective);
    [CompilerGeneratedAttribute]
public string get_Raw();
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_Effective();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.Configs.NuGetConfigWatcher : object {
    private Lifetime myLifetime;
    private IFileSystemTracker myTracker;
    private NuGetConfigManager myManager;
    private HashSet`1<VirtualFileSystemPath> myWatchedFiles;
    private object mySync;
    public NuGetConfigWatcher(Lifetime lifetime, IFileSystemTracker tracker, NuGetConfigManager manager, SolutionFileLocationLive solutionFileLocationLive);
    private void WatchFile(VirtualFileSystemPath file);
    private void OnReload(NuGetSmartConfig config);
    private void Invalidate(FileSystemChangeDelta delta);
    public sealed virtual void Dump(StreamWriter writer);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0(PropertyChangedEventArgs`1<NuGetSmartConfig> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_1(Lifetime _, VirtualFileSystemPath solutionDir);
}
public class JetBrains.ProjectModel.NuGet.Configs.NuGetEffectiveConfig : object {
    private NuGetResourceProviderFactory myResourceProviderFactory;
    [CompilerGeneratedAttribute]
private ISettings <NativeSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetSourceRepositoryProvider <RepositoryProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetFeed[] <AllFeeds>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetFeedContext <AllFeedContext>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetFeed[] <EnabledFeeds>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetFeedContext <EnabledFeedContext>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetConfigFile[] <ConfigFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageRestoreConsent <NativeRestoreConsent>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetUltraRestoreConsent <EffectiveRestoreConsent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fingerprints>k__BackingField;
    public ISettings NativeSettings { get; }
    public NuGetSourceRepositoryProvider RepositoryProvider { get; }
    public NuGetFeed[] AllFeeds { get; }
    public NuGetFeedContext AllFeedContext { get; }
    public NuGetFeed[] EnabledFeeds { get; }
    public NuGetFeedContext EnabledFeedContext { get; }
    public NuGetConfigFile[] ConfigFiles { get; }
    public string ErrorMessage { get; public set; }
    public PackageRestoreConsent NativeRestoreConsent { get; }
    public NuGetUltraRestoreConsent EffectiveRestoreConsent { get; }
    public string Fingerprints { get; }
    public NuGetEffectiveConfig(ISettings nativeSettings, NuGetFeedManager feedManager, NuGetOptionsProvider options, NuGetResourceProviderFactory resourceProviderFactory);
    [CompilerGeneratedAttribute]
public sealed virtual ISettings get_NativeSettings();
    [CompilerGeneratedAttribute]
public sealed virtual NuGetSourceRepositoryProvider get_RepositoryProvider();
    [CompilerGeneratedAttribute]
public sealed virtual NuGetFeed[] get_AllFeeds();
    [CompilerGeneratedAttribute]
public sealed virtual NuGetFeedContext get_AllFeedContext();
    [CompilerGeneratedAttribute]
public sealed virtual NuGetFeed[] get_EnabledFeeds();
    [CompilerGeneratedAttribute]
public sealed virtual NuGetFeedContext get_EnabledFeedContext();
    [CompilerGeneratedAttribute]
public sealed virtual NuGetConfigFile[] get_ConfigFiles();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public sealed virtual PackageRestoreConsent get_NativeRestoreConsent();
    [CompilerGeneratedAttribute]
public sealed virtual NuGetUltraRestoreConsent get_EffectiveRestoreConsent();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Fingerprints();
    [NotNullAttribute]
private string BuildFingerprints();
    private NuGetConfigFile[] BuildConfigFiles(ISettings settings, NuGetFeedManager feedManager);
    [CanBeNullAttribute]
private static T BuildConfigFile(Func`1<T> build, ISettings settings, NuGetHost host, StringBuilder notificationText);
    private static INuGetLogMessage BuildLogEntry(ISettings settings, Exception e, VirtualFileSystemPath solutionFolderPath, VirtualFileSystemPath settingsFolder);
    private static string BuildNotificationText(ISettings settings, Exception e);
    [CanBeNullAttribute]
private static string GetConfigFilePath(ISettings settings);
    [NotNullAttribute]
private static IReadOnlyCollection`1<string> GetConfigFilePaths(ISettings settings);
}
public class JetBrains.ProjectModel.NuGet.Configs.NuGetFallbackPackagePathResolver : object {
    private FallbackPackagePathResolver myNativeResolver;
    internal NuGetFallbackPackagePathResolver(FallbackPackagePathResolver nativeResolver);
    public string GetPackageDirectory(string packageId, string version);
}
public class JetBrains.ProjectModel.NuGet.Configs.NuGetFeed : object {
    private static Regex ourAzureBlobRegex;
    [CompilerGeneratedAttribute]
private PackageSource <NativeSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DetailedInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Warning>k__BackingField;
    public PackageSource NativeSource { get; public set; }
    public string Name { get; }
    [NotNullAttribute]
public string Url { get; }
    public bool IsEnabled { get; }
    public bool AllowInsecureConnections { get; }
    [CanBeNullAttribute]
public string Description { get; }
    public int ProtocolVersion { get; }
    [NotNullAttribute]
public string FeedId { get; }
    [NotNullAttribute]
public string DetailedInfo { get; private set; }
    public string Alias { get; }
    [CanBeNullAttribute]
public string Warning { get; public set; }
    public NuGetFeed(PackageSource nativeSource);
    private static NuGetFeed();
    [CompilerGeneratedAttribute]
public PackageSource get_NativeSource();
    [CompilerGeneratedAttribute]
public void set_NativeSource(PackageSource value);
    public string get_Name();
    public string get_Url();
    public bool get_IsEnabled();
    public bool get_AllowInsecureConnections();
    public string get_Description();
    public int get_ProtocolVersion();
    public string get_FeedId();
    public bool IsNuGetOrg();
    public bool IsAzureBlobs();
    [CompilerGeneratedAttribute]
public string get_DetailedInfo();
    [CompilerGeneratedAttribute]
private void set_DetailedInfo(string value);
    public string get_Alias();
    [CompilerGeneratedAttribute]
public string get_Warning();
    [CompilerGeneratedAttribute]
public void set_Warning(string value);
    public void InvalidateNativeFeed(PackageSource nativeSource);
    public void InvalidateCredentials(NuGetFeedManager feedManager);
    private string BuildDetailedInfo();
    [NotNullAttribute]
public string BuildFingerprints();
    public sealed virtual bool Equals(NuGetFeed other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.ProjectModel.NuGet.Configs.NuGetFeedContext : object {
    [CompilerGeneratedAttribute]
private SourceRepository[] <PrimaryFeeds>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceRepository[] <SecondaryFeeds>k__BackingField;
    public SourceRepository[] PrimaryFeeds { get; }
    public SourceRepository[] SecondaryFeeds { get; }
    public NuGetFeedContext(ISourceRepositoryProvider repositoryProvider, NuGetFeed[] primaryFeeds, NuGetFeed[] secondaryFeeds);
    [CompilerGeneratedAttribute]
public SourceRepository[] get_PrimaryFeeds();
    [CompilerGeneratedAttribute]
public SourceRepository[] get_SecondaryFeeds();
    public static NuGetFeedContext FromTargetFeed(ISourceRepositoryProvider repositoryProvider, NuGetFeed targetFeed, NuGetFeed[] allFeeds);
    public virtual string ToString();
    private static SourceRepository[] FeedsToReprositories(ISourceRepositoryProvider repositoryProvider, NuGetFeed[] feeds);
    private static string RepositoriesToString(IEnumerable`1<SourceRepository> repositories);
}
public class JetBrains.ProjectModel.NuGet.Configs.NuGetFeedCredentials : object {
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    public string User { get; public set; }
    public string Password { get; public set; }
    public NuGetFeedCredentials(string user, string password);
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
public void set_User(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
}
public class JetBrains.ProjectModel.NuGet.Configs.NuGetFeedCredentialsRepo : object {
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, NuGetFeedCredentials> <Credentials>k__BackingField;
    public ConcurrentDictionary`2<string, NuGetFeedCredentials> Credentials { get; }
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, NuGetFeedCredentials> get_Credentials();
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.Configs.NuGetFeedManager : object {
    private SolutionFileLocationLive mySolutionFileLocationLive;
    private ISolution mySolution;
    private ILogger myLogger;
    private Dictionary`2<string, NuGetFeed> myKnownFeeds;
    private JetFastSemiReenterableRWLock mySync;
    [CompilerGeneratedAttribute]
private NuGetFeedCredentialsRepo <CredentialsRepo>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<List`1<NuGetFeed>> <KnownFeeds>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetHost <NuGetHost>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<INuGetAdditionalFolderProvider> <AdditionalFolderProviders>k__BackingField;
    public NuGetFeedCredentialsRepo CredentialsRepo { get; }
    public Property`1<List`1<NuGetFeed>> KnownFeeds { get; }
    public NuGetHost NuGetHost { get; }
    [NotNullAttribute]
public IEnumerable`1<INuGetAdditionalFolderProvider> AdditionalFolderProviders { get; }
    public VirtualFileSystemPath SolutionDirectory { get; }
    private NuGetConfigManager ConfigManager { get; }
    public NuGetFeedManager(NuGetHost nuGetHost, SolutionFileLocationLive solutionFileLocationLive, ISolution solution, IEnumerable`1<INuGetAdditionalFolderProvider> additionalFolderProviders, ILogger logger);
    [CompilerGeneratedAttribute]
public NuGetFeedCredentialsRepo get_CredentialsRepo();
    [CompilerGeneratedAttribute]
public Property`1<List`1<NuGetFeed>> get_KnownFeeds();
    [CompilerGeneratedAttribute]
public NuGetHost get_NuGetHost();
    [CompilerGeneratedAttribute]
public IEnumerable`1<INuGetAdditionalFolderProvider> get_AdditionalFolderProviders();
    public VirtualFileSystemPath get_SolutionDirectory();
    private NuGetConfigManager get_ConfigManager();
    public NuGetFeed[] GetAllKnownFeeds();
    public NuGetFeed GetFeed(PackageSource packageSource);
    public NuGetFeed GetFeed(string feedId);
    public IEnumerable`1<NuGetFeed> GetFeeds(IEnumerable`1<PackageSource> packageSources);
    public IEnumerable`1<NuGetFeed> GetFeeds(IEnumerable`1<string> ids);
    public void UpdateFeed(NuGetFeedUpdateRequest update);
    public void DeleteFeed(string origin, NuGetFeedValue oldValue);
    public void AddFeed(string configFilePath, NuGetFeedValue value);
    public void StoreFeedCredentials(NuGetSmartConfig smartConfig);
    private void LogResult(Result`2<string, string> result);
    public void InvalidateKnownFeeds();
    [CompilerGeneratedAttribute]
private NuGetFeed <GetFeeds>b__26_0(string id);
}
public class JetBrains.ProjectModel.NuGet.Configs.NuGetFeedUpdateRequest : ValueType {
    [CanBeNullAttribute]
public string Origin;
    public NuGetFeedValue OldValue;
    public NuGetFeedValue NewValue;
    public NuGetFeedUpdateRequest(string origin, NuGetFeedValue oldValue, NuGetFeedValue newValue);
}
public class JetBrains.ProjectModel.NuGet.Configs.NuGetFeedValidationInfo : object {
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    public bool IsValid { get; }
    public string ErrorMessage { get; }
    public NuGetFeedValidationInfo(bool isValid, string errorMessage);
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
}
[IsReadOnlyAttribute]
public class JetBrains.ProjectModel.NuGet.Configs.NuGetFeedValue : ValueType {
    public string Name;
    public string Url;
    public bool IsEnabled;
    public bool AllowInsecureConnections;
    public NuGetFeedValue(string name, string url, bool isEnabled, bool allowInsecureConnections);
    public SourceItem ToSourceItem();
    public static NuGetFeedValue Extract(NuGetFeed feed);
    public bool Equals(NuGetFeedValue other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(NuGetFeedValue left, NuGetFeedValue right);
    public static bool op_Inequality(NuGetFeedValue left, NuGetFeedValue right);
    public bool IsEqualTo(SettingItem settingItem);
    public bool IsEqualTo(PackageSource packageSource);
}
public class JetBrains.ProjectModel.NuGet.Configs.NuGetFeedViewModel : object {
    [CompilerGeneratedAttribute]
private PackageSource <NativeSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsSelected>k__BackingField;
    public PackageSource NativeSource { get; public set; }
    public string Name { get; }
    public string Url { get; }
    public IProperty`1<bool> IsSelected { get; public set; }
    public NuGetFeedViewModel(Lifetime lifetime, PackageSource nativeSource, bool isSelected);
    [CompilerGeneratedAttribute]
public PackageSource get_NativeSource();
    [CompilerGeneratedAttribute]
public void set_NativeSource(PackageSource value);
    public string get_Name();
    public string get_Url();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsSelected();
    [CompilerGeneratedAttribute]
public void set_IsSelected(IProperty`1<bool> value);
}
public class JetBrains.ProjectModel.NuGet.Configs.NuGetPackageSourceController : object {
    [CompilerGeneratedAttribute]
private ISettings <settings>P;
    private IPackageSourceProvider myProvider;
    public NuGetPackageSourceController(ISettings settings);
    public Result`2<string, string> AddPackageSource(NuGetFeedValue value);
    public Result`2<string, string> RemovePackageSource(string name);
    public Result`2<string, string> UpdatePackageSource(NuGetFeedValue oldValue, NuGetFeedValue newValue);
    private Result`2<string, string> Execute(Func`1<Result`2<string, string>> action, string failMessage);
}
public static class JetBrains.ProjectModel.NuGet.Configs.NuGetPackageSourceValidator : object {
    public static Result`2<ValidationResult, ValidationResult> ValidatePackageSourceAdd(IPackageSourceProvider packageSourceProvider, NuGetFeedValue value);
    public static Result`2<ValidationResult, ValidationResult> ValidatePackageSourceUpdate(IPackageSourceProvider packageSourceProvider, Nullable`1<NuGetFeedValue> oldValue, NuGetFeedValue newValue);
    public static Result`2<ValidationResult, ValidationResult> ValidatePackageSourceRemove(IPackageSourceProvider packageSourceProvider, string name);
    public static Result`2<ValidationResult, ValidationResult> ValidateExistingPackageSource(string name, string source, bool isLocal);
}
public static class JetBrains.ProjectModel.NuGet.Configs.NuGetPathValidator : object {
    private static Char[] ourInvalidPathChars;
    private static Regex ourDriveLetter;
    private static Regex ourUncPathStart;
    private static Regex ourUrlStart;
    private static NuGetPathValidator();
    public static bool IsValidSource(string source);
    public static bool IsValidLocalPath(string path);
    public static bool IsValidUncPath(string path);
    public static bool IsValidUrl(string url);
    public static string GetCanonicalPath(string path);
}
public class JetBrains.ProjectModel.NuGet.Configs.NuGetSmartConfig : object {
    [CompilerGeneratedAttribute]
private INuGetDetailedConfig <Complete>k__BackingField;
    [CompilerGeneratedAttribute]
private INuGetDetailedConfig <Valid>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <InvalidFallbackFolders>k__BackingField;
    [NotNullAttribute]
public INuGetDetailedConfig Complete { get; }
    [NotNullAttribute]
public INuGetDetailedConfig Valid { get; }
    public ISet`1<string> InvalidFallbackFolders { get; public set; }
    public NuGetSmartConfig(ISettings rawSettings, ISettings validSettings, NuGetResourceProviderFactory resourceProviderFactory, NuGetFeedManager feedManager, NuGetOptionsProvider options, IEnumerable`1<string> invalidFallbackFolders, string errorMessage);
    [CompilerGeneratedAttribute]
public INuGetDetailedConfig get_Complete();
    [CompilerGeneratedAttribute]
public INuGetDetailedConfig get_Valid();
    [CompilerGeneratedAttribute]
public ISet`1<string> get_InvalidFallbackFolders();
    [CompilerGeneratedAttribute]
public void set_InvalidFallbackFolders(ISet`1<string> value);
    public bool IsEmpty();
}
public class JetBrains.ProjectModel.NuGet.Configs.NuGetUltraConfigFile : NuGetConfigFile {
    public static string FileName;
    public NuGetUltraConfigFile(NuGetResourceProviderFactory resourceProviderFactory, ISettings nativeSettings, NuGetFeedManager feedManager);
    private static NuGetUltraConfigFile();
    private string BuildIncludedFilesHeader();
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.NuGet.Configs.NuGetUltraConfigFile/<GetFallbackFolders>d__3")]
public virtual IEnumerable`1<string> GetFallbackFolders();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<string> <>n__0();
}
public class JetBrains.ProjectModel.NuGet.Configs.NuGetUltraRestoreConsent : object {
    [CompilerGeneratedAttribute]
private PackageRestoreConsent <nativeRestoreConsent>P;
    [CompilerGeneratedAttribute]
private NuGetOptionsProvider <options>P;
    public bool IsGranted { get; }
    public bool IsAutomatic { get; }
    public NuGetUltraRestoreConsent(PackageRestoreConsent nativeRestoreConsent, NuGetOptionsProvider options);
    public bool get_IsGranted();
    public bool get_IsAutomatic();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.NuGet.Configs.SettingsExtensions : object {
    [ExtensionAttribute]
public static bool IsEmpty(ISettings settings);
    [ExtensionAttribute]
public static void RemoveInvalidFallbackFolders(ISettings settings, ISet`1<string> invalidFallbacks);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetFallbackFolders(ISettings settings);
}
public class JetBrains.ProjectModel.NuGet.Configs.Validation.NuGetFeedInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLocal>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string Name { get; public set; }
    public string Source { get; public set; }
    public bool IsLocal { get; public set; }
    public NuGetFeedInfo(string Name, string Source, bool IsLocal);
    [CompilerGeneratedAttribute]
protected NuGetFeedInfo(NuGetFeedInfo original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Source(string value);
    [CompilerGeneratedAttribute]
public bool get_IsLocal();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsLocal(bool value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(NuGetFeedInfo left, NuGetFeedInfo right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(NuGetFeedInfo left, NuGetFeedInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(NuGetFeedInfo other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual NuGetFeedInfo <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Name, String& Source, Boolean& IsLocal);
}
public class JetBrains.ProjectModel.NuGet.Configs.Validation.NuGetSettingsValidationResult : object {
    [CompilerGeneratedAttribute]
private ISettings <ValidSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ValueTuple`2<string, VirtualFileSystemPath>> <InvalidFallbackFolders>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IDiagnostic> <Diagnostics>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public ISettings ValidSettings { get; public set; }
    public List`1<ValueTuple`2<string, VirtualFileSystemPath>> InvalidFallbackFolders { get; public set; }
    public List`1<IDiagnostic> Diagnostics { get; public set; }
    public NuGetSettingsValidationResult(ISettings ValidSettings, List`1<ValueTuple`2<string, VirtualFileSystemPath>> InvalidFallbackFolders, List`1<IDiagnostic> Diagnostics);
    [CompilerGeneratedAttribute]
protected NuGetSettingsValidationResult(NuGetSettingsValidationResult original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ISettings get_ValidSettings();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ValidSettings(ISettings value);
    [CompilerGeneratedAttribute]
public List`1<ValueTuple`2<string, VirtualFileSystemPath>> get_InvalidFallbackFolders();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_InvalidFallbackFolders(List`1<ValueTuple`2<string, VirtualFileSystemPath>> value);
    [CompilerGeneratedAttribute]
public List`1<IDiagnostic> get_Diagnostics();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Diagnostics(List`1<IDiagnostic> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(NuGetSettingsValidationResult left, NuGetSettingsValidationResult right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(NuGetSettingsValidationResult left, NuGetSettingsValidationResult right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(NuGetSettingsValidationResult other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual NuGetSettingsValidationResult <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(ISettings& ValidSettings, List`1& InvalidFallbackFolders, List`1& Diagnostics);
}
public class JetBrains.ProjectModel.NuGet.Configs.Validation.NuGetSettingsValidator : object {
    [CompilerGeneratedAttribute]
private JetPlatform <platform>P;
    public NuGetSettingsValidator(JetPlatform platform);
    public NuGetSettingsValidationResult Validate(ISettings settings);
    public NuGetFeedValidationInfo ValidateSource(string name, string source, bool isLocal);
    public List`1<IDiagnostic> ValidateRelativeSourcesPaths(ISettings settings);
    private ValueTuple`2<List`1<ValueTuple`2<string, VirtualFileSystemPath>>, List`1<IDiagnostic>> ValidateFallbackFolders(ISettings settings);
    public bool IsValidFallbackFolder(string path);
    [CompilerGeneratedAttribute]
private bool <ValidateFallbackFolders>b__5_1(ValueTuple`2<AddItem, string> itemWithPath);
}
public class JetBrains.ProjectModel.NuGet.Configs.Validation.NuGetValidationManager : object {
    private AsyncItemsProcessor`1<NuGetFeedInfo> myFeedProcessor;
    private AsyncItemsProcessor`1<string> myFallbackProcessor;
    private NuGetSettingsValidator myNuGetSettingsValidator;
    private Dictionary`2<string, NuGetFeedValidationInfo> myFeedValidationCache;
    private Dictionary`2<string, bool> myFallbackValidationCache;
    public SimpleSignal OnFeedChanged;
    public SimpleSignal OnFallbacksChanged;
    public NuGetValidationManager(Lifetime lifetime, IShellLocks locks, ILogger logger);
    public void RefreshFeed(NuGetFeedInfo feedInfo);
    public void RefreshFallbackFolder(string fallbackFolder);
    public NuGetFeedValidationInfo GetFeedValidationInfo(string url);
    public bool IsValidFallbackFolder(string fallback);
    public ValueTuple`2<ISettings, List`1<IDiagnostic>> ValidateLight(ISettings settings);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_0(NuGetFeedInfo feed);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_1(string fallback);
}
public interface JetBrains.ProjectModel.NuGet.Credentials.ITrackCredentialServiceSuccess {
    public abstract virtual void TrackCredentialsSuccessfullyUsed(Uri uri, ICredentials credentials);
}
public abstract class JetBrains.ProjectModel.NuGet.Diagnostics.NuGetDiagnostic : Diagnostic {
    public static string NuGetDiagnosticSubsystem;
    private static NuGetDiagnostic();
}
public class JetBrains.ProjectModel.NuGet.Diagnostics.NuGetInvalidFallbackFoldersDiagnostic : NuGetDiagnostic {
    public NuGetInvalidFallbackFoldersDiagnostic(string title, string presentableText);
}
public class JetBrains.ProjectModel.NuGet.Diagnostics.NuGetInvalidPathSeparatorsDiagnostic : NuGetDiagnostic {
    public NuGetInvalidPathSeparatorsDiagnostic(string title, string presentableText, List`1<IDiagnosticAction> actions);
}
public class JetBrains.ProjectModel.NuGet.DotNetTools.CliFolderPathCalculator : object {
    private static string ToolsResolverCacheFolderName;
    private static string ToolsShimFolderName;
    private static string NestedToolPackageFolderName;
    public static string DotnetHomeVariableName;
    public static string DotnetProfileDirectoryName;
    public static string DotConfigDirectoryName;
    public static string DotNetToolManifestFilename;
    public static int LocalToolResolverCacheVersion;
    public static string LockFileName;
    public static string ToolSettingsFileName;
    public static string PlatformHomeVariableName { get; }
    public static string DotnetUserProfileFolderPath { get; }
    public static string ToolsResolverCachePath { get; }
    public static VirtualFileSystemPath ToolsShimPath { get; }
    public static VirtualFileSystemPath ToolPackageFolderPath { get; }
    public static string get_PlatformHomeVariableName();
    public static string get_DotnetUserProfileFolderPath();
    public static string get_ToolsResolverCachePath();
    public static VirtualFileSystemPath get_ToolsShimPath();
    public static VirtualFileSystemPath get_ToolPackageFolderPath();
    private static string GetDotnetHomePath();
}
public class JetBrains.ProjectModel.NuGet.DotNetTools.CommandInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string Name { get; public set; }
    public CommandInfo(string Name);
    [CompilerGeneratedAttribute]
protected CommandInfo(CommandInfo original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(CommandInfo left, CommandInfo right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(CommandInfo left, CommandInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(CommandInfo other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual CommandInfo <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Name);
}
[XmlRootAttribute]
public class JetBrains.ProjectModel.NuGet.DotNetTools.DotNetCliTool : object {
    [CompilerGeneratedAttribute]
private DotNetCliToolCommand[] <Commands>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [XmlArrayItemAttribute("Command")]
public DotNetCliToolCommand[] Commands { get; public set; }
    [XmlAttributeAttribute]
public string Version { get; public set; }
    [CompilerGeneratedAttribute]
public DotNetCliToolCommand[] get_Commands();
    [CompilerGeneratedAttribute]
public void set_Commands(DotNetCliToolCommand[] value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
}
[XmlTypeAttribute]
public class JetBrains.ProjectModel.NuGet.DotNetTools.DotNetCliToolCommand : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Runner>k__BackingField;
    [XmlAttributeAttribute]
public string Name { get; public set; }
    [XmlAttributeAttribute]
public string EntryPoint { get; public set; }
    [XmlAttributeAttribute]
public string Runner { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(string value);
    [CompilerGeneratedAttribute]
public string get_Runner();
    [CompilerGeneratedAttribute]
public void set_Runner(string value);
}
public class JetBrains.ProjectModel.NuGet.DotNetTools.DotNetToolCache : object {
    public static DotNetToolCache Empty;
    [CompilerGeneratedAttribute]
private DotNetToolLocalCache <ToolLocalCache>k__BackingField;
    [CompilerGeneratedAttribute]
private DotNetToolGlobalCache <ToolGlobalCache>k__BackingField;
    public DotNetToolLocalCache ToolLocalCache { get; public set; }
    public DotNetToolGlobalCache ToolGlobalCache { get; public set; }
    private static DotNetToolCache();
    [CompilerGeneratedAttribute]
public DotNetToolLocalCache get_ToolLocalCache();
    [CompilerGeneratedAttribute]
public void set_ToolLocalCache(DotNetToolLocalCache value);
    [CompilerGeneratedAttribute]
public DotNetToolGlobalCache get_ToolGlobalCache();
    [CompilerGeneratedAttribute]
public void set_ToolGlobalCache(DotNetToolGlobalCache value);
}
public class JetBrains.ProjectModel.NuGet.DotNetTools.DotNetToolGlobalCache : object {
    public static DotNetToolGlobalCache Empty;
    private ILogger myLogger;
    private object myLocker;
    private Dictionary`2<string, List`1<GlobalToolCacheEntry>> myCache;
    protected DotNetToolGlobalCache(ILogger logger);
    private static DotNetToolGlobalCache();
    public static DotNetToolGlobalCache Build(ILogger logger);
    [PublicAPIAttribute]
public virtual void UpdateCache();
    [PublicAPIAttribute]
[CanBeNullAttribute]
public virtual List`1<GlobalToolCacheEntry> GetGlobalTool(string toolName);
    [CanBeNullAttribute]
private VirtualFileSystemPath GetToolEntryPoint(string toolName, string version);
    [NotNullAttribute]
private static VirtualFileSystemPath GetToolPackageDirectoryPath(string toolName, string version);
    private static LockFileTargetLibrary FindLibraryInLockFile(LockFile lockFile, string packageId);
    private static LockFileItem FindItemInTargetLibrary(LockFileTargetLibrary library, string targetRelativeFilePath);
    private static VirtualFileSystemPath GetToolLockFilePath(string toolName, string version);
    private static VirtualFileSystemPath GetToolFolderPath(string toolName, string version);
}
public class JetBrains.ProjectModel.NuGet.DotNetTools.DotNetToolLocalCache : object {
    public static DotNetToolLocalCache Empty;
    private VirtualFileSystemPath myToolsUsageDirectory;
    private ILogger myLogger;
    private object myCacheLocker;
    private Dictionary`2<string, List`1<LocalTool>> myCache;
    protected DotNetToolLocalCache(VirtualFileSystemPath toolsUsageDirectory, ILogger logger);
    private static DotNetToolLocalCache();
    public static DotNetToolLocalCache Build(VirtualFileSystemPath toolsDirectory, ILogger logger, string currentSdkVersion);
    private void UpdateCache(string currentSdkVersion);
    public virtual LocalTool GetLocalTool(string toolName, string version);
    public virtual List`1<LocalTool> GetAllLocalTools();
    public virtual VirtualFileSystemPath GetSolutionManifestPath();
    private static VirtualFileSystemPath GetToolResolverCachePath();
}
public class JetBrains.ProjectModel.NuGet.DotNetTools.DotNetToolsManifestReader : object {
    public static string JsonPropertyVersion;
    public static string JsonPropertyIsRoot;
    public static string JsonPropertyTools;
    public static string JsonCommands;
    public static LocalToolManifestInfo ReadLocalToolManifest(VirtualFileSystemPath path);
    public static ValueTuple`2<bool, ToolResolverCacheManifest[]> TryReadGlobalToolResolverCache(VirtualFileSystemPath path);
    private static LocalToolManifestInfo ParseLocalFromJson(string json);
    private static void ParseToken(JToken token, LocalToolManifestInfo result);
    private static List`1<LocalToolPackageManifestInfo> ParseTools(JProperty property);
}
[SolutionInstanceComponentAttribute("0")]
public class JetBrains.ProjectModel.NuGet.DotNetTools.DotNetToolsRestoreOperation : object {
    [CompilerGeneratedAttribute]
private SolutionDotnetToolsTracker <dotnetToolsTracker>P;
    [CompilerGeneratedAttribute]
private ILogger <logger>P;
    [CompilerGeneratedAttribute]
private ISolutionToolset <solutionToolset>P;
    [CompilerGeneratedAttribute]
private ISolution <solution>P;
    private static string DotnetToolCommand;
    private List`1<string> myRestoreCommand;
    public DotNetToolsRestoreOperation(SolutionDotnetToolsTracker dotnetToolsTracker, ILogger logger, ISolutionToolset solutionToolset, ISolution solution);
    public void RunIfNeeds();
    private static void CommandOutputHandler(DataReceivedEventArgs args, StringBuilder message);
}
internal class JetBrains.ProjectModel.NuGet.DotNetTools.EmptyDotNetToolGlobalCache : DotNetToolGlobalCache {
    public virtual void UpdateCache();
    public virtual List`1<GlobalToolCacheEntry> GetGlobalTool(string toolName);
}
internal class JetBrains.ProjectModel.NuGet.DotNetTools.EmptyDotNetToolLocalCache : DotNetToolLocalCache {
    public virtual LocalTool GetLocalTool(string toolName, string version);
    public virtual List`1<LocalTool> GetAllLocalTools();
    public virtual VirtualFileSystemPath GetSolutionManifestPath();
}
public class JetBrains.ProjectModel.NuGet.DotNetTools.GlobalToolCacheEntry : object {
    [CompilerGeneratedAttribute]
private string <ToolName>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <EntryPointPath>k__BackingField;
    public string ToolName { get; }
    public NuGetVersion Version { get; }
    public VirtualFileSystemPath EntryPointPath { get; }
    public GlobalToolCacheEntry(string toolName, NuGetVersion version, VirtualFileSystemPath entryPointPath);
    [CompilerGeneratedAttribute]
public string get_ToolName();
    [CompilerGeneratedAttribute]
public NuGetVersion get_Version();
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_EntryPointPath();
}
public class JetBrains.ProjectModel.NuGet.DotNetTools.LocalTool : object {
    [CompilerGeneratedAttribute]
private string <PackageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CommandInfo> <Commands>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <PathToExecutable>k__BackingField;
    public string PackageId { get; }
    public string Version { get; }
    public List`1<CommandInfo> Commands { get; }
    public VirtualFileSystemPath PathToExecutable { get; }
    public LocalTool(string packageId, string version, List`1<CommandInfo> commands, VirtualFileSystemPath pathToExecutable);
    [CompilerGeneratedAttribute]
public string get_PackageId();
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public List`1<CommandInfo> get_Commands();
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_PathToExecutable();
}
public class JetBrains.ProjectModel.NuGet.DotNetTools.LocalToolManifestInfo : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<LocalToolPackageManifestInfo> <Tools>k__BackingField;
    public Nullable`1<int> Version { get; public set; }
    public Nullable`1<bool> IsRoot { get; public set; }
    public List`1<LocalToolPackageManifestInfo> Tools { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsRoot();
    [CompilerGeneratedAttribute]
public void set_IsRoot(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public List`1<LocalToolPackageManifestInfo> get_Tools();
    [CompilerGeneratedAttribute]
public void set_Tools(List`1<LocalToolPackageManifestInfo> value);
}
public class JetBrains.ProjectModel.NuGet.DotNetTools.LocalToolPackageManifestInfo : object {
    [CompilerGeneratedAttribute]
private string <PackageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CommandInfo> <Commands>k__BackingField;
    public string PackageId { get; public set; }
    public string Version { get; public set; }
    public List`1<CommandInfo> Commands { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PackageId();
    [CompilerGeneratedAttribute]
public void set_PackageId(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public List`1<CommandInfo> get_Commands();
    [CompilerGeneratedAttribute]
public void set_Commands(List`1<CommandInfo> value);
}
public class JetBrains.ProjectModel.NuGet.DotNetTools.LockFileMatcher : object {
    internal static bool MatchesFile(LockFileItem lockFileItem, string targetRelativeFilePath);
    internal static bool MatchesDirectoryPath(LockFileItem lockFileItem, string targetRelativePath);
    private static bool SubPathMatchesTargetFilePath(String[] pathInLockFilePathInArray, String[] targetInArray);
    private static bool PathInLockFileDirectoriesStartWithToolsAndFollowsTwoSubFolder(String[] pathInLockFilePathInArray, String[] targetInArray);
    private static String[] SplitPathByDirectorySeparator(string path);
}
[PublicAPIAttribute]
public abstract class JetBrains.ProjectModel.NuGet.DotNetTools.NuGetDotnetToolsTrackerBase : object {
    private Lifetime myLifetime;
    private VirtualFileSystemPath myToolsUsageDirectory;
    private IFileSystemTracker myFileSystemTracker;
    private IShellLocks myLocks;
    private ILogger myLogger;
    private SingleThreadExecutor myManifestUpdateExecutor;
    private GroupingEvent myUpdateGroupingEvent;
    private ISolutionToolset mySolutionToolset;
    private IProperty`1<string> myCurrentSdkVersion;
    private IProperty`1<bool> myCurrentSdkVersionInitialized;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsInitialized>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<DotNetToolCache> <DotNetToolCache>k__BackingField;
    [PublicAPIAttribute]
public IProperty`1<bool> IsInitialized { get; }
    [PublicAPIAttribute]
public IProperty`1<DotNetToolCache> DotNetToolCache { get; }
    public bool IsLocalToolInstalled { get; }
    protected NuGetDotnetToolsTrackerBase(Lifetime lifetime, VirtualFileSystemPath toolsUsageDirectory, IFileSystemTracker fileSystemTracker, IShellLocks locks, ILogger logger, ISolutionToolset solutionToolset);
    [CompilerGeneratedAttribute]
public virtual IProperty`1<bool> get_IsInitialized();
    [CompilerGeneratedAttribute]
public IProperty`1<DotNetToolCache> get_DotNetToolCache();
    public VirtualFileSystemPath GetToolsManifestPath();
    public virtual bool get_IsLocalToolInstalled();
    protected virtual void WatchManifestLocations();
    protected virtual void UpdateCliTargetFrameworkAttribute(RuntimeAndToolset runtimeAndToolset);
    private void WatchLocalManifest();
    private void WatchToolResolverCache();
    private void WatchGlobalToolCache();
    public void QueueManifestUpdate();
    [PublicAPIAttribute]
public virtual bool IsToolsNeedRestore();
    private void UpdateManifestCache();
    private void QueueToolManifestCacheUpdate(DotNetToolCache cache);
    private VirtualFileSystemPath GetToolResolverCachePath();
    [CompilerGeneratedAttribute]
private void <.ctor>b__19_0();
    [CompilerGeneratedAttribute]
private void <UpdateCliTargetFrameworkAttribute>g__UpdateSdkVersion|21_0(string sdkVersion);
    [CompilerGeneratedAttribute]
private void <WatchLocalManifest>b__22_0(FileSystemChangeDelta _);
    [CompilerGeneratedAttribute]
private void <WatchToolResolverCache>b__23_0(FileSystemChangeDelta _);
    [CompilerGeneratedAttribute]
private void <WatchGlobalToolCache>b__24_0(FileSystemChangeDelta _);
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.DotNetTools.SolutionDotnetToolsTracker : NuGetDotnetToolsTrackerBase {
    public SolutionDotnetToolsTracker(Lifetime lifetime, ISolution solution, IFileSystemTracker fileSystemTracker, IShellLocks locks, ILogger logger, ISolutionToolset solutionToolset);
}
public class JetBrains.ProjectModel.NuGet.DotNetTools.ToolConfiguration : object {
    [CompilerGeneratedAttribute]
private string <CommandName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolAssemblyEntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Warnings>k__BackingField;
    public string CommandName { get; }
    public string ToolAssemblyEntryPoint { get; }
    public IEnumerable`1<string> Warnings { get; }
    public ToolConfiguration(string commandName, string toolAssemblyEntryPoint, IEnumerable`1<string> warnings);
    private static void EnsureNoInvalidFilenameCharacters(string commandName);
    private static void EnsureNoLeadingDot(string commandName);
    [CompilerGeneratedAttribute]
public string get_CommandName();
    [CompilerGeneratedAttribute]
public string get_ToolAssemblyEntryPoint();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Warnings();
}
public class JetBrains.ProjectModel.NuGet.DotNetTools.ToolConfigurationDeserializer : object {
    private static int SupportedVersion;
    public static ToolConfiguration Deserialize(string pathToXml);
    private static List`1<string> GenerateWarningAccordingToVersionAttribute(DotNetCliTool dotNetCliTool);
}
internal class JetBrains.ProjectModel.NuGet.DotNetTools.ToolConfigurationException : Exception {
    public ToolConfigurationException(string message);
    public ToolConfigurationException(string message, Exception innerException);
}
public class JetBrains.ProjectModel.NuGet.DotNetTools.ToolIdentifier : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string Name { get; public set; }
    public string Version { get; public set; }
    public string TargetFramework { get; public set; }
    public ToolIdentifier(string Name, string Version, string TargetFramework);
    [CompilerGeneratedAttribute]
protected ToolIdentifier(ToolIdentifier original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TargetFramework(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ToolIdentifier left, ToolIdentifier right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ToolIdentifier left, ToolIdentifier right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ToolIdentifier other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual ToolIdentifier <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Name, String& Version, String& TargetFramework);
}
public class JetBrains.ProjectModel.NuGet.DotNetTools.ToolResolverCacheManifest : object {
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuntimeIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Runner>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathToExecutable>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string Version { get; public set; }
    public string TargetFramework { get; public set; }
    public string RuntimeIdentifier { get; public set; }
    public string Name { get; public set; }
    public string Runner { get; public set; }
    public string PathToExecutable { get; public set; }
    public ToolResolverCacheManifest(string Version, string TargetFramework, string RuntimeIdentifier, string Name, string Runner, string PathToExecutable);
    [CompilerGeneratedAttribute]
protected ToolResolverCacheManifest(ToolResolverCacheManifest original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TargetFramework(string value);
    [CompilerGeneratedAttribute]
public string get_RuntimeIdentifier();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RuntimeIdentifier(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Runner();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Runner(string value);
    [CompilerGeneratedAttribute]
public string get_PathToExecutable();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PathToExecutable(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ToolResolverCacheManifest left, ToolResolverCacheManifest right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ToolResolverCacheManifest left, ToolResolverCacheManifest right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ToolResolverCacheManifest other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual ToolResolverCacheManifest <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Version, String& TargetFramework, String& RuntimeIdentifier, String& Name, String& Runner, String& PathToExecutable);
}
public class JetBrains.ProjectModel.NuGet.DotNetTools.ToolResolverInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<NuGetVersion> <Versions>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string Name { get; public set; }
    public List`1<NuGetVersion> Versions { get; public set; }
    public ToolResolverInfo(string Name, List`1<NuGetVersion> Versions);
    [CompilerGeneratedAttribute]
protected ToolResolverInfo(ToolResolverInfo original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
    [CompilerGeneratedAttribute]
public List`1<NuGetVersion> get_Versions();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Versions(List`1<NuGetVersion> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ToolResolverInfo left, ToolResolverInfo right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ToolResolverInfo left, ToolResolverInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ToolResolverInfo other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual ToolResolverInfo <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Name, List`1& Versions);
}
[SolutionInstanceComponentAttribute("0")]
public class JetBrains.ProjectModel.NuGet.FileTracking.NuGetOperationsRestoreMarkService : NuGetRestoreMarksServiceBase {
    public NuGetOperationsRestoreMarkService(NuGetRestoreOutputPathResolver restoreOutputPathResolver, ILogger logger);
}
public abstract class JetBrains.ProjectModel.NuGet.FileTracking.NuGetRestoreMarksServiceBase : object {
    private DateTime myUnixEpoch;
    private string myProjectRestoreTimeMark;
    public static String[] NuGetGeneratedFilePatterns;
    private NuGetRestoreOutputPathResolver myRestoreOutputPathResolver;
    private ILogger myLogger;
    protected NuGetRestoreMarksServiceBase(string filename, NuGetRestoreOutputPathResolver restoreOutputPathResolver, ILogger logger);
    private static NuGetRestoreMarksServiceBase();
    public Result`1<Unit> UpdateRestoredProjectTimeMark(IProject project);
    public List`1<IProject> GetDirtyProjects(List`1<IProject> projects);
    public bool ProjectMarkMissing(IProject project);
    public bool IsProjectDirty(IProject project);
    private Nullable`1<DateTime> ReadProjectRestoreTimeMark(VirtualFileSystemPath objFolderPath);
    private string ReadTimeMarkSafe(VirtualFileSystemPath path);
    private Result`1<Unit> WriteTimeMark(VirtualFileSystemPath path, DateTime mark);
    private DateTime FromUnixTimestamp(long stamp);
    private long ToUnixTimestamp(DateTime time);
    private ValueTuple`2<Nullable`1<DateTime>, string> GetLastModifiedNuGetFileTime(VirtualFileSystemPath objFolderPath, IProject project);
    public static JetHashSet`1<string> GetNuGetGeneratedFileNamesForProject(IProject project);
}
public interface JetBrains.ProjectModel.NuGet.Folders.INuGetAdditionalFolderProvider {
    public abstract virtual IEnumerable`1<VirtualFileSystemPath> GetAdditionalFallbackFolders();
}
public class JetBrains.ProjectModel.NuGet.Folders.NuGetFolder : object {
    public static string GroupSymbol;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetFolderKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <Path>k__BackingField;
    public string Title { get; }
    public NuGetFolderKind Kind { get; }
    public VirtualFileSystemPath Path { get; }
    public string TitleGroup { get; }
    public NuGetFolder(string title, NuGetFolderKind kind, VirtualFileSystemPath path);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public NuGetFolderKind get_Kind();
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_Path();
    public string get_TitleGroup();
    public sealed virtual bool Equals(NuGetFolder other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public enum JetBrains.ProjectModel.NuGet.Folders.NuGetFolderKind : Enum {
    public int value__;
    public static NuGetFolderKind LocalPackages;
    public static NuGetFolderKind GlobalPackages;
    public static NuGetFolderKind HttpCache;
    public static NuGetFolderKind PackageCache;
    public static NuGetFolderKind Temp;
    public static NuGetFolderKind MachineSettingsBaseDir;
    public static NuGetFolderKind MachineConfigDir;
    public static NuGetFolderKind UserSettings;
    public static NuGetFolderKind NuGetHome;
    public static NuGetFolderKind FallbackFolder;
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.NuGet.Folders.NuGetFolderKindExtensions : object {
    [ExtensionAttribute]
public static bool IsPackagesFolder(NuGetFolderKind kind);
    [ExtensionAttribute]
public static bool IsTempFolder(NuGetFolderKind kind);
    [ExtensionAttribute]
public static int GetMaxNupkgDepth(NuGetFolderKind kind);
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.Folders.NuGetFolderManager : object {
    private ILogger myLogger;
    private NuGetOptionsProvider myOptionsProvider;
    private FreeThreadedGroupingEvent myOnContentChangesEvent;
    private SynchronizedSet`1<NuGetFolder> myFoldersWithChanges;
    private ConcurrentDictionary`2<NuGetFolder, long> myFolderSizes;
    [CompilerGeneratedAttribute]
private Signal`1<NuGetFolder[]> <OnContentChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<NuGetFolders> <CurrentFoldersLive>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsInitialized>k__BackingField;
    public Signal`1<NuGetFolder[]> OnContentChanges { get; }
    public Property`1<NuGetFolders> CurrentFoldersLive { get; private set; }
    public NuGetFolders CurrentFolders { get; }
    [PublicAPIAttribute]
public IProperty`1<bool> IsInitialized { get; }
    public NuGetFolderManager(Lifetime lifetime, ILogger logger, IShellLocks locks, NuGetConfigManager configManager, ISolution solution, IFileSystemTracker fileSystemTracker, NuGetOptionsProvider optionsProvider, IEnumerable`1<INuGetAdditionalFolderProvider> additionalFolderProviders, ISolutionLoadTasksScheduler solutionLoadTasksScheduler);
    [CompilerGeneratedAttribute]
public Signal`1<NuGetFolder[]> get_OnContentChanges();
    [CompilerGeneratedAttribute]
public Property`1<NuGetFolders> get_CurrentFoldersLive();
    [CompilerGeneratedAttribute]
private Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CurrentFoldersLive(Property`1<NuGetFolders> value);
    public NuGetFolders get_CurrentFolders();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsInitialized();
    [PublicAPIAttribute]
[CanBeNullAttribute]
[PureAttribute]
public NuGetFolder GetFolderByTitle(string title);
    [PublicAPIAttribute]
public void UpdateFolderSize(NuGetFolder folder, long size);
    [PublicAPIAttribute]
[PureAttribute]
public long GetFolderSize(NuGetFolder folder);
    [PublicAPIAttribute]
[PureAttribute]
public bool GetFolderAutoClearMode(NuGetFolder folder);
    [PublicAPIAttribute]
public void GenerateReport();
    [PublicAPIAttribute]
public void Wait();
    [PublicAPIAttribute]
public sealed virtual void Dump(StreamWriter writer);
    private void CheckInitialized();
}
public class JetBrains.ProjectModel.NuGet.Folders.NuGetFolders : object {
    [CompilerGeneratedAttribute]
private NuGetFolder <LocalPackagesFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetFolder <GlobalPackagesFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetFolder <HttpCacheFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetFolder <PackageCacheFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetFolder <TempFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetFolder <MachineWideSettingsBaseFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetFolder <MachineWideConfigFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetFolder <UserSettingsFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetFolder <NuGetHomeFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<NuGetFolder> <FallbackFolders>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<NuGetFolder> <AllFolders>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<NuGetFolder> <AllPackageFolders>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<NuGetFolder> <RestorePackageFolders>k__BackingField;
    [NotNullAttribute]
private string myHash;
    [PublicAPIAttribute]
public NuGetFolder LocalPackagesFolder { get; }
    [PublicAPIAttribute]
public NuGetFolder GlobalPackagesFolder { get; }
    [PublicAPIAttribute]
public NuGetFolder HttpCacheFolder { get; }
    [PublicAPIAttribute]
public NuGetFolder PackageCacheFolder { get; }
    [PublicAPIAttribute]
public NuGetFolder TempFolder { get; }
    [PublicAPIAttribute]
public NuGetFolder MachineWideSettingsBaseFolder { get; }
    [PublicAPIAttribute]
public NuGetFolder MachineWideConfigFolder { get; }
    [PublicAPIAttribute]
public NuGetFolder UserSettingsFolder { get; }
    [PublicAPIAttribute]
public NuGetFolder NuGetHomeFolder { get; }
    [PublicAPIAttribute]
public IReadOnlyList`1<NuGetFolder> FallbackFolders { get; }
    [PublicAPIAttribute]
public IReadOnlyList`1<NuGetFolder> AllFolders { get; }
    [PublicAPIAttribute]
public IReadOnlyList`1<NuGetFolder> AllPackageFolders { get; }
    [PublicAPIAttribute]
public IReadOnlyList`1<NuGetFolder> RestorePackageFolders { get; }
    public NuGetFolders(INuGetConfig config, ISolution solution, IReadOnlyList`1<INuGetAdditionalFolderProvider> additionalFolderProviders);
    [CompilerGeneratedAttribute]
public NuGetFolder get_LocalPackagesFolder();
    [CompilerGeneratedAttribute]
public NuGetFolder get_GlobalPackagesFolder();
    [CompilerGeneratedAttribute]
public NuGetFolder get_HttpCacheFolder();
    [CompilerGeneratedAttribute]
public NuGetFolder get_PackageCacheFolder();
    [CompilerGeneratedAttribute]
public NuGetFolder get_TempFolder();
    [CompilerGeneratedAttribute]
public NuGetFolder get_MachineWideSettingsBaseFolder();
    [CompilerGeneratedAttribute]
public NuGetFolder get_MachineWideConfigFolder();
    [CompilerGeneratedAttribute]
public NuGetFolder get_UserSettingsFolder();
    [CompilerGeneratedAttribute]
public NuGetFolder get_NuGetHomeFolder();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<NuGetFolder> get_FallbackFolders();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<NuGetFolder> get_AllFolders();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<NuGetFolder> get_AllPackageFolders();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<NuGetFolder> get_RestorePackageFolders();
    public static VirtualFileSystemPath GetUltraCacheFolder();
    public sealed virtual bool Equals(NuGetFolders other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
internal static NuGetFolder <.ctor>g__Create|41_0(string title, NuGetFolderKind kind, NuGetFolderPath folderPath);
}
public static class JetBrains.ProjectModel.NuGet.FUS.NuGetFusUtil : object {
    public static IEnumerable`1<string> GetMetricRecords(NuGetLockFileTracker lockFileTracker, String[] allowedPackages);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ProjectModel.NuGet.FUS.NuGetStatisticsService : object {
    private static HashSet`1<string> ourNuGetWhitelist;
    private UsageStatistics myUsageStatistics;
    public NuGetStatisticsService(UsageStatistics usageStatistics);
    private static NuGetStatisticsService();
    public void SendStatistics(PackageReference[] packages);
}
[ZoneDefinitionAttribute]
public interface JetBrains.ProjectModel.NuGet.INuGetZone {
}
public class JetBrains.ProjectModel.NuGet.Licenses.NuGetLicenseLabel : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Link>k__BackingField;
    [NotNullAttribute]
public string Text { get; public set; }
    [CanBeNullAttribute]
public Uri Link { get; public set; }
    public NuGetLicenseLabel(string text, Uri link);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public Uri get_Link();
    [CompilerGeneratedAttribute]
public void set_Link(Uri value);
}
public static class JetBrains.ProjectModel.NuGet.Licenses.NuGetPackageLicenseUtilities : object {
    [NotNullAttribute]
[ItemNotNullAttribute]
public static IReadOnlyList`1<NuGetLicenseLabel> GenerateLicenseLinks(IPackageSearchMetadata metadata);
    private static IReadOnlyList`1<NuGetLicenseLabel> GenerateLicenseLinks(LicenseMetadata licenseMetadata, Uri licenseUrl, string licenseFileHeader, Func`2<string, string> loadFile);
    private static IReadOnlyList`1<NuGetLicenseLabel> GenerateLicenseLinks(LicenseMetadata metadata, string licenseFileHeader, Func`2<string, string> loadFile);
    private static void PopulateLicenseIdentifiers(NuGetLicenseExpression expression, IList`1<string> identifiers);
}
public interface JetBrains.ProjectModel.NuGet.Logging.INuGetLogMessage {
    public DateTimeOffset Timestamp { get; }
    public NuGetLogContext Context { get; }
    public NuGetLogLevel Level { get; }
    public string Text { get; }
    public abstract virtual DateTimeOffset get_Timestamp();
    public abstract virtual NuGetLogContext get_Context();
    public abstract virtual NuGetLogLevel get_Level();
    public abstract virtual string get_Text();
}
public static class JetBrains.ProjectModel.NuGet.Logging.NuGetActivity : object {
    public static string Current { get; }
    public static string get_Current();
    public static void StartNew();
    public static void Clear();
}
public enum JetBrains.ProjectModel.NuGet.Logging.NuGetLogContext : Enum {
    public int value__;
    public static NuGetLogContext NuGet;
    public static NuGetLogContext Ide;
    public static NuGetLogContext Build;
}
public class JetBrains.ProjectModel.NuGet.Logging.NuGetLoggerAdapter : LegacyLoggerAdapter {
    private static ILogger ourLogger;
    private string myName;
    private NuGetLoggerAdapter(string name);
    private static NuGetLoggerAdapter();
    public static ILogger Create(string name);
    private void Log(string level, string data);
    public virtual void LogDebug(string data);
    public virtual void LogVerbose(string data);
    public virtual void LogInformation(string data);
    public virtual void LogMinimal(string data);
    public virtual void LogWarning(string data);
    public virtual void LogError(string data);
    public virtual void LogInformationSummary(string data);
}
public enum JetBrains.ProjectModel.NuGet.Logging.NuGetLogLevel : Enum {
    public int value__;
    public static NuGetLogLevel Debug;
    public static NuGetLogLevel Verbose;
    public static NuGetLogLevel Information;
    public static NuGetLogLevel Minimal;
    public static NuGetLogLevel Warning;
    public static NuGetLogLevel Error;
}
public class JetBrains.ProjectModel.NuGet.Logging.NuGetLogMessage : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetLogContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetLogLevel <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public DateTimeOffset Timestamp { get; }
    public NuGetLogContext Context { get; }
    public NuGetLogLevel Level { get; }
    public string Text { get; }
    public NuGetLogMessage(DateTimeOffset timestamp, NuGetLogContext context, NuGetLogLevel level, string text);
    public NuGetLogMessage(ILogMessage message);
    public NuGetLogMessage(NuGetLogContext context, NuGetLogLevel level, string text);
    public NuGetLogMessage(MessageLevel level, string text);
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_Timestamp();
    [CompilerGeneratedAttribute]
public sealed virtual NuGetLogContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual NuGetLogLevel get_Level();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    public static INuGetLogMessage FileConflict(string text);
    public static INuGetLogMessage Exception(string text, Exception exception);
    public static INuGetLogMessage IdeProjectSystem(string text);
    public static INuGetLogMessage IdeDebug(string text);
    public static INuGetLogMessage IdeVerbose(string text);
    public static INuGetLogMessage IdeWarning(string text);
    public static INuGetLogMessage IdeInfo(string text);
    public static INuGetLogMessage IdeMinimal(string text);
    public static INuGetLogMessage IdeError(string text);
    private static NuGetLogLevel ConvertLevel(MessageLevel level);
    private static NuGetLogLevel Convert(LogLevel level);
}
public class JetBrains.ProjectModel.NuGet.Logging.NuGetNativeLogger : LoggerBase {
    private NuGetHost myHost;
    public NuGetNativeLogger(NuGetHost host);
    public virtual void Log(ILogMessage message);
    public virtual Task LogAsync(ILogMessage message);
}
public class JetBrains.ProjectModel.NuGet.Logging.NuGetNotification : object {
    public static NuGetNotificationButton[] EmptyButtonsArray;
    public static NuGetNotificationButton[] FullButtonsArray;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetNotificationStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetNotificationLevel <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetNotificationContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetNotificationButton[] <Buttons>k__BackingField;
    public string Title { get; }
    public string Message { get; }
    public NuGetNotificationStatus Status { get; }
    public NuGetNotificationLevel Level { get; }
    public NuGetNotificationContext Context { get; }
    public NuGetNotificationButton[] Buttons { get; }
    private NuGetNotification(string title, string message, NuGetNotificationStatus status, NuGetNotificationLevel level, NuGetNotificationContext context, NuGetNotificationButton[] buttons);
    private static NuGetNotification();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public NuGetNotificationStatus get_Status();
    [CompilerGeneratedAttribute]
public NuGetNotificationLevel get_Level();
    [CompilerGeneratedAttribute]
public NuGetNotificationContext get_Context();
    [CompilerGeneratedAttribute]
public NuGetNotificationButton[] get_Buttons();
    public bool ShouldBeShown(NuGetNotificationMode mode);
    public static NuGetNotification Create(string title, string message, NuGetNotificationStatus status, NuGetNotificationLevel level, NuGetNotificationContext context, NuGetNotificationButton[] buttons);
    public static NuGetNotification Create(string title, NuGetNotificationStatus status, NuGetNotificationLevel level, NuGetNotificationContext context, NuGetNotificationButton[] buttons);
    public static NuGetNotification Exception(string title, NuGetNotificationContext context, Exception e, NuGetNotificationButton[] buttons);
    [NotNullAttribute]
private static string DropMiddleIfLong(string text);
    public static NuGetNotification UninstallSuccess(string project, string package);
    public static NuGetNotification UninstallFailed(string project, string package, Exception e);
    public static NuGetNotification UninstallFailed(string project, string package, string message);
    public static NuGetNotification MigrateSuccess();
    public static NuGetNotification MigrateFailed(string project, string message, NuGetNotificationButton[] buttons);
    public static NuGetNotification MigrateFailed(string project, Exception e, NuGetNotificationButton[] buttons);
    public static NuGetNotification GenerateBindingRedirectsSuccess();
    public static NuGetNotification GenerateBindingRedirectsFailed(string project, string message, NuGetNotificationButton[] buttons);
    public static NuGetNotification GenerateBindingRedirectsFailed(string project, Exception e, NuGetNotificationButton[] buttons);
    public static NuGetNotification MultiInstallSuccess();
    public static NuGetNotification InstallSuccess(string project, string package);
    public static NuGetNotification MultiInstallFailed(Exception e);
    public static NuGetNotification UpdateAllSuccess();
    public static NuGetNotification UpdateAllFailed(Exception e);
    public static NuGetNotification InstallFailed(string project, string package, Exception e);
    public static NuGetNotification InstallFailed(string project, string package, string reason);
    public static NuGetNotification Restore(NuGetOperationAggregatedResult result, bool hasPackages);
    public static NuGetNotification RestoreSuccess(string message);
    public static NuGetNotification RestoreSkipped(string reason);
    public static NuGetNotification RestoreCancelled();
    public static NuGetNotification RestoreFailed(string message);
    public static NuGetNotification FolderForceClearSuccess();
    public static NuGetNotification FolderForceClearCancelled();
    public static NuGetNotification SearchHttpException(HttpRequestException e, string feedUrl);
    public static NuGetNotification SearchTimeoutException(TimeoutException e, string feedUrl);
}
public enum JetBrains.ProjectModel.NuGet.Logging.NuGetNotificationButton : Enum {
    public int value__;
    public static NuGetNotificationButton Log;
    public static NuGetNotificationButton Settings;
    public static NuGetNotificationButton Sources;
    public static NuGetNotificationButton PackagesFolder;
}
public enum JetBrains.ProjectModel.NuGet.Logging.NuGetNotificationContext : Enum {
    public int value__;
    public static NuGetNotificationContext Restore;
    public static NuGetNotificationContext Install;
    public static NuGetNotificationContext Uninstall;
    public static NuGetNotificationContext UpdateAll;
    public static NuGetNotificationContext Read;
    public static NuGetNotificationContext Search;
    public static NuGetNotificationContext Modify;
    public static NuGetNotificationContext Folders;
    public static NuGetNotificationContext Migrate;
    public static NuGetNotificationContext GenerateBindingRedirects;
}
public enum JetBrains.ProjectModel.NuGet.Logging.NuGetNotificationLevel : Enum {
    public int value__;
    public static NuGetNotificationLevel Info;
    public static NuGetNotificationLevel Warning;
    public static NuGetNotificationLevel Error;
    public static NuGetNotificationLevel Exception;
}
public enum JetBrains.ProjectModel.NuGet.Logging.NuGetNotificationMode : Enum {
    public int value__;
    public static NuGetNotificationMode Always;
    public static NuGetNotificationMode ErrorOnly;
    public static NuGetNotificationMode Silent;
}
public enum JetBrains.ProjectModel.NuGet.Logging.NuGetNotificationStatus : Enum {
    public int value__;
    public static NuGetNotificationStatus Fail;
    public static NuGetNotificationStatus Success;
    public static NuGetNotificationStatus Skip;
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.NuGet.NuGetExtensions : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static NuGetBriefMetadata ToBriefMetadata(IPackageSearchMetadata meta, NuGetFeed feed, SearchFilter searchFilter);
    [ExtensionAttribute]
public static SearchFilter GetSearchFilter(NuGetOptionsProvider options);
    [ExtensionAttribute]
[CanBeNullAttribute]
internal static string GetUniqueName(INuGetSolutionManager solutionManager, IProject project);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.NuGetExtensions/<GetPackageRestoreData>d__3")]
[ExtensionAttribute]
internal static Task`1<IEnumerable`1<PackageRestoreData>> GetPackageRestoreData(NuGetProject nuGetProject, CancellationToken token);
    [ExtensionAttribute]
public static IPackageSearchMetadata ToFull(NuGetBriefMetadata meta);
    [ExtensionAttribute]
public static string ToUserString(PackageIdentity identity);
    [ExtensionAttribute]
internal static NuGetVersion Max(IEnumerable`1<NuGetVersion> versions);
    [ExtensionAttribute]
internal static NuGetLogLevel ToLogLevel(NuGetNotificationLevel level);
    [ExtensionAttribute]
[NotNullAttribute]
internal static string GetTitle(PackageReference reference);
    [ExtensionAttribute]
public static NuGetProjectType GetProjectType(NuGetProject project);
    [ExtensionAttribute]
public static bool IsIntegratedProject(NuGetProject project);
    [ExtensionAttribute]
public static string GetFeedId(PackageSource packageSource);
    public static string NuGetSeverityToText(int severity);
    public static int CvssScoreToNuGetSeverity(double score);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.NuGet.NuGetFeaturesController : object {
    public bool FolderManagement { get; }
    public NuGetDisembowelMode Disembowel { get; }
    public virtual bool get_FolderManagement();
    public virtual NuGetDisembowelMode get_Disembowel();
}
public interface JetBrains.ProjectModel.NuGet.Operations.INuGetPostUninstallOperation {
    public abstract virtual Task Run(IProject project, string packageId, IDictionary`2<IProject, String[]> stateBeforeOperation);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ProjectModel.NuGet.Operations.NuGetDeleteStalePackagesOperation : NuGetOperation {
    public NuGetDeleteStalePackagesOperation(NuGetOperationContext context);
    public void Run();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.Operations.NuGetDisembowelOperation : NuGetFolderOperationBase {
    private List`1<NuGetNupkg> myNewNupkgs;
    private LifetimeDefinition myInitLifetime;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Finished>k__BackingField;
    public IProperty`1<bool> Finished { get; }
    public NuGetDisembowelOperation(Lifetime lifetime, ILogger logger, NuGetOperationContext context, SynchronizationPoints syncPoints);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_Finished();
    protected virtual NuGetOperationLevel GetLevel(NuGetFolder folder);
    protected virtual Task ProcessFolderAsync(NuGetFolder folder, CancellationToken token);
    protected void ProcessFolder(NuGetFolder folder, CancellationToken token);
    protected virtual void PostProcess(bool complete);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_1();
    [CompilerGeneratedAttribute]
private bool <ProcessFolder>b__8_0(VirtualFileSystemPath path);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ProjectModel.NuGet.Operations.NuGetFolderAutoClearOperation : NuGetFolderOperationBase {
    public NuGetFolderAutoClearOperation(Lifetime lifetime, ILogger logger, NuGetOperationContext context);
    protected virtual NuGetOperationLevel GetLevel(NuGetFolder folder);
    protected virtual Task ProcessFolderAsync(NuGetFolder folder, CancellationToken token);
    private void CleanTempFolder(NuGetFolder folder, CancellationToken token);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ProjectModel.NuGet.Operations.NuGetFolderForceClearOperation : NuGetOperation {
    private NuGetFolderSizeCalcOperation myFolderSizeCalcOperation;
    public NuGetFolderForceClearOperation(NuGetOperationContext context, NuGetFolderSizeCalcOperation folderSizeCalcOperation);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Operations.NuGetFolderForceClearOperation/<ClearAsync>d__2")]
public Task`1<NuGetOperationAggregatedResult> ClearAsync(IReadOnlyList`1<string> folderTitles, NuGetOperationReporter reporter);
}
public abstract class JetBrains.ProjectModel.NuGet.Operations.NuGetFolderOperationBase : NuGetOperation {
    private Lifetime myLifetime;
    protected ILogger Logger;
    private SynchronizedSet`1<NuGetFolder> myDirtyFolders;
    private bool myIsBusy;
    public NuGetFolderOperationBase(Lifetime lifetime, ILogger logger, NuGetOperationContext context);
    protected abstract virtual NuGetOperationLevel GetLevel(NuGetFolder folder);
    [PublicAPIAttribute]
[PureAttribute]
public virtual bool HasDirty();
    [PublicAPIAttribute]
[PureAttribute]
public bool IsClean();
    [PublicAPIAttribute]
public void MarkDirty(NuGetFolder folder);
    [PublicAPIAttribute]
public void MarkDirty(IEnumerable`1<NuGetFolder> folders);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Operations.NuGetFolderOperationBase/<RunAsync>d__10")]
[PublicAPIAttribute]
public Task`1<bool> RunAsync(string reason, CancellationToken token);
    protected abstract virtual Task ProcessFolderAsync(NuGetFolder folder, CancellationToken token);
    protected virtual void PostProcess(bool complete);
    [PublicAPIAttribute]
public void WaitForCleanState(int waitIntervalBetweenChecksMillis);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.Operations.NuGetFolderSizeCalcOperation : NuGetFolderOperationBase {
    private NuGetToolWindowObserver myToolWindowObserver;
    [CompilerGeneratedAttribute]
private SimpleSignal <OnFinished>k__BackingField;
    public SimpleSignal OnFinished { get; }
    public NuGetFolderSizeCalcOperation(Lifetime lifetime, ILogger logger, NuGetOperationContext context, NuGetToolWindowObserver toolWindowObserver);
    [CompilerGeneratedAttribute]
public SimpleSignal get_OnFinished();
    public virtual bool HasDirty();
    protected virtual NuGetOperationLevel GetLevel(NuGetFolder folder);
    protected virtual Task ProcessFolderAsync(NuGetFolder folder, CancellationToken token);
    protected virtual void PostProcess(bool complete);
    private static long GetSize(VirtualFileSystemPath path, CancellationToken token);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.Operations.NuGetInstallOperation : NuGetOperation {
    private ISolution mySolution;
    private NuGetRestoreOperation myRestoreOperation;
    private NuGetRuntimeInformationDetector myRuntimeInformationDetector;
    [CompilerGeneratedAttribute]
private SimpleSignal <ClassicInstallIsFinished>k__BackingField;
    public SimpleSignal ClassicInstallIsFinished { get; }
    public NuGetInstallOperation(Lifetime lifetime, ISolution solution, NuGetOperationContext context, NuGetRestoreOperation restoreOperation, NuGetRuntimeInformationDetector runtimeInformationDetector);
    [CompilerGeneratedAttribute]
public SimpleSignal get_ClassicInstallIsFinished();
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Operations.NuGetInstallOperation/<InstallAsync>d__7")]
public Task`1<NuGetOperationAggregatedResult> InstallAsync(IProject project, PackageIdentity packageIdentity, ResolutionContext resolutionContext, NuGetFeedContext feedContext, int nestedLevel, NuGetNotificationMode mode, NuGetOperationReporter reporter);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Operations.NuGetInstallOperation/<InstallAsync>d__8")]
public Task`1<NuGetOperationAggregatedResult> InstallAsync(IProject project, NuGetProject givenNuGetProject, PackageIdentity packageIdentity, ResolutionContext resolutionContext, NuGetFeedContext feedContext, int nestedLevel, NuGetNotificationMode mode, NuGetOperationReporter reporter);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Operations.NuGetInstallOperation/<InstallMultiAsync>d__9")]
public Task`1<NuGetOperationAggregatedResult> InstallMultiAsync(List`1<NuGetProjectWithIdentity> projectsWithIdentities, ResolutionContext resolutionContext, NuGetFeedContext feedContext, int nestedLevel, NuGetNotificationMode mode, NuGetOperationReporter reporter);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Operations.NuGetInstallOperation/<InstallLatestAsync>d__10")]
public Task`1<NuGetOperationAggregatedResult> InstallLatestAsync(IProject project, string packageId, ResolutionContext resolutionContext, NuGetFeedContext feedContext, int nestedLevel, NuGetNotificationMode mode, NuGetOperationReporter reporter);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Operations.NuGetInstallOperation/<InstallInternal>d__11")]
private Task`1<NuGetOperationAggregatedResult> InstallInternal(IProject project, string packageId, string packgeUserStr, NuGetFeedContext feedContext, int nestedLevel, NuGetNotificationMode mode, NuGetOperationReporter reporter, Func`3<NuGetProject, CancellationToken, Task> nativeInstall, NuGetProject givenNuGetProject);
}
public enum JetBrains.ProjectModel.NuGet.Operations.NuGetIntegratedRestoreEngine : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("Automatic")]
public static NuGetIntegratedRestoreEngine Automatic;
    [LocalizedDescriptionAttribute("Embedded")]
public static NuGetIntegratedRestoreEngine Embedded;
    [LocalizedDescriptionAttribute("MsBuild")]
public static NuGetIntegratedRestoreEngine MsBuild;
    [LocalizedDescriptionAttribute("Console")]
public static NuGetIntegratedRestoreEngine Console;
}
[SolutionInstanceComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ProjectModel.NuGet.Operations.NuGetLegacyRunningState : object {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsNugetRunning>k__BackingField;
    public IProperty`1<bool> IsNugetRunning { get; }
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsNugetRunning();
}
public abstract class JetBrains.ProjectModel.NuGet.Operations.NuGetOperation : object {
    internal NuGetOperationContext Context;
    public NuGetProjectContext ProjectContext { get; }
    public INuGetSolutionManager SolutionManager { get; }
    protected NuGetPackageManager PackageManager { get; }
    protected NuGetOperation(NuGetOperationContext context);
    protected void Log(INuGetLogMessage message);
    [StringFormatMethodAttribute("text")]
protected void LogDebug(string text, Object[] args);
    [StringFormatMethodAttribute("text")]
protected void LogVerbose(string text, Object[] args);
    [StringFormatMethodAttribute("text")]
protected void LogWarning(string text, Object[] args);
    [StringFormatMethodAttribute("text")]
protected void LogInfo(string text, Object[] args);
    [StringFormatMethodAttribute("text")]
protected void LogError(string text, Object[] args);
    protected void Notify(NuGetNotification notification, NuGetNotificationMode mode);
    protected void OnSuccess(NuGetNotification notification, NuGetNotificationMode mode, NuGetOperationAggregatedResult result);
    protected void OnException(Exception e, NuGetNotification notification, NuGetNotificationMode mode, NuGetOperationAggregatedResult result);
    protected void OnException(Exception e, NuGetNotification notification, NuGetNotificationMode mode, NuGetOperationAggregatedResult result, Lifetime lifetime, IDiagnosticCollector diagnosticCollector);
    protected void OnFail(NuGetNotification notification, NuGetNotificationMode mode, NuGetOperationAggregatedResult result);
    protected void OnFail(NuGetNotification notification, NuGetNotificationMode mode, NuGetOperationAggregatedResult result, NuGetOperationStatus status, Lifetime lifetime, IDiagnosticCollector diagnosticCollector);
    private void ReportErrorResult(Lifetime lifetime, IDiagnosticCollector diagnosticCollector, string title, NuGetOperationAggregatedResult result);
    public NuGetProjectContext get_ProjectContext();
    public INuGetSolutionManager get_SolutionManager();
    public void SetLevel(NuGetOperationLevel level);
    protected ISourceRepositoryProvider CreateSourceRepositoryProvider();
    protected PackageRestoreManager CreateRestoreManager();
    protected NuGetPackageManager get_PackageManager();
    protected void SetNuGetSpecValidationVersion(NuGetRuntimeInformationDetector nuGetRuntimeInformationDetector);
}
public class JetBrains.ProjectModel.NuGet.Operations.NuGetOperationAggregatedResult : object {
    [CompilerGeneratedAttribute]
private NuGetNotificationContext <RootOperationContext>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<IProject> <AffectedProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<VirtualFileSystemPath> <AffectedPackagesFolders>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<PackageReference, NuGetPackageReferenceRestoreResult> <PackageRestoreResults>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<NuGetNotification> <Notifications>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<NuGetOperationResult> <OperationResults>k__BackingField;
    public NuGetNotificationContext RootOperationContext { get; }
    public HashSet`1<IProject> AffectedProjects { get; }
    public HashSet`1<VirtualFileSystemPath> AffectedPackagesFolders { get; }
    public Dictionary`2<PackageReference, NuGetPackageReferenceRestoreResult> PackageRestoreResults { get; }
    public List`1<NuGetNotification> Notifications { get; }
    public List`1<string> Errors { get; }
    public List`1<NuGetOperationResult> OperationResults { get; }
    public NuGetOperationAggregatedResult(NuGetNotificationContext rootOperationContext);
    [CompilerGeneratedAttribute]
public NuGetNotificationContext get_RootOperationContext();
    [CompilerGeneratedAttribute]
public HashSet`1<IProject> get_AffectedProjects();
    [CompilerGeneratedAttribute]
public HashSet`1<VirtualFileSystemPath> get_AffectedPackagesFolders();
    [CompilerGeneratedAttribute]
public Dictionary`2<PackageReference, NuGetPackageReferenceRestoreResult> get_PackageRestoreResults();
    [CompilerGeneratedAttribute]
public List`1<NuGetNotification> get_Notifications();
    [CompilerGeneratedAttribute]
public List`1<string> get_Errors();
    [CompilerGeneratedAttribute]
public List`1<NuGetOperationResult> get_OperationResults();
    public virtual string ToString();
    public ICollection`1<PackageReference> GetPackages(NuGetPackageReferenceRestoreResult[] results);
    public void Add(NuGetOperationAggregatedResult result);
    public void Add(IProject project);
    public void Add(NuGetOperationResult operationResult);
    public void Add(IEnumerable`1<NuGetOperationResult> operationResults);
    public void Add(IEnumerable`1<IProject> projects);
    public void AddError(string error);
    public void Add(VirtualFileSystemPath path);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Operations.NuGetOperationAggregatedResult/<RefreshAffectedPackagesFoldersAsync>d__31")]
public Task RefreshAffectedPackagesFoldersAsync(NuGetFolderManager folderManager, INuGetSolutionManager solutionManager, Lifetime lifetime);
    public void Add(NuGetNotification notification);
    public void Add(IEnumerable`1<NuGetNotification> notifications);
    public void Add(List`1<Pair`2<PackageReference, NuGetPackageReferenceRestoreResult>> newPackageRestoreResults);
    public void Add(Dictionary`2<PackageReference, NuGetPackageReferenceRestoreResult> newPackageRestoreResults);
    private static NuGetPackageReferenceRestoreResult Max(NuGetPackageReferenceRestoreResult result1, NuGetPackageReferenceRestoreResult result2);
    [CompilerGeneratedAttribute]
internal static string <ToString>g__ToStr|22_0(HashSet`1<T> hashSet, Func`2<T, string> format);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.Operations.NuGetOperationContext : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    private Lifetime myLifetime;
    private ISolution mySolution;
    private NuGetFileConflictResolver myFileConflictResolver;
    [CompilerGeneratedAttribute]
private IShellLocks <Locks>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetHost <NuGetHost>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeleteOnRestartManager <DeleteOnRestartManager>k__BackingField;
    [CompilerGeneratedAttribute]
private INuGetSolutionManager <SolutionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetLegacyRunningState <NuGetLegacyRunningState>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <NativeLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetConfigManager <ConfigManager>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetOptionsProvider <OptionsProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private SolutionProcessStartInfoPatcher <ProcessStartInfoPatcher>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetNupkgStorage <NupkgStorage>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetFolderManager <FolderManager>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetSourceCacheContextProvider <SourceCacheContextProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetCommonOperations <CommonOperations>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetResourceProviderFactory <ResourceProviderFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetSupportStatus <SupportStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetFeaturesController <FeaturesController>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<NuGetOperationLevel> <CurrentLevel>k__BackingField;
    public ILogger Logger { get; }
    public IShellLocks Locks { get; }
    public NuGetHost NuGetHost { get; }
    public IDeleteOnRestartManager DeleteOnRestartManager { get; }
    public INuGetSolutionManager SolutionManager { get; }
    public NuGetLegacyRunningState NuGetLegacyRunningState { get; }
    public ILogger NativeLogger { get; }
    public NuGetConfigManager ConfigManager { get; }
    public NuGetOptionsProvider OptionsProvider { get; }
    public SolutionProcessStartInfoPatcher ProcessStartInfoPatcher { get; }
    public NuGetNupkgStorage NupkgStorage { get; }
    public NuGetFolderManager FolderManager { get; }
    public NuGetSourceCacheContextProvider SourceCacheContextProvider { get; }
    public NuGetCommonOperations CommonOperations { get; }
    public NuGetResourceProviderFactory ResourceProviderFactory { get; }
    public NuGetSupportStatus SupportStatus { get; }
    public ISolutionBuilder SolutionBuilder { get; }
    public NuGetPackageReferenceTracker PackageReferenceTracker { get; }
    public NuGetFeaturesController FeaturesController { get; }
    [NotNullAttribute]
public IProperty`1<NuGetOperationLevel> CurrentLevel { get; }
    public NuGetFeedContext EnabledFeedContext { get; }
    public ClientPolicyContext ClientPolicyContext { get; }
    public NuGetProjectContext ProjectContext { get; }
    public PackageDownloadContext PackageDownloadContext { get; }
    public NuGetOperationContext(Lifetime lifetime, IShellLocks locks, NuGetHost nuGetHost, ILogger logger, INuGetSolutionManager solutionManager, NuGetLegacyRunningState nuGetLegacyRunningState, NuGetConfigManager configManager, NuGetOptionsProvider options, IDeleteOnRestartManager deleteOnRestartManager, NuGetNupkgStorage nupkgStorage, SolutionProcessStartInfoPatcher processStartInfoPatcher, NuGetFolderManager folderManager, ISolution solution, NuGetFeaturesController featuresController, NuGetSourceCacheContextProvider sourceCacheContextProvider, NuGetFileConflictResolver fileConflictResolver, NuGetCommonOperations commonOperations, NuGetResourceProviderFactory resourceProviderFactory, NuGetSupportStatus supportStatus);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public IShellLocks get_Locks();
    [CompilerGeneratedAttribute]
public NuGetHost get_NuGetHost();
    [CompilerGeneratedAttribute]
public IDeleteOnRestartManager get_DeleteOnRestartManager();
    [CompilerGeneratedAttribute]
public INuGetSolutionManager get_SolutionManager();
    [CompilerGeneratedAttribute]
public NuGetLegacyRunningState get_NuGetLegacyRunningState();
    [CompilerGeneratedAttribute]
public ILogger get_NativeLogger();
    [CompilerGeneratedAttribute]
public NuGetConfigManager get_ConfigManager();
    [CompilerGeneratedAttribute]
public NuGetOptionsProvider get_OptionsProvider();
    [CompilerGeneratedAttribute]
public SolutionProcessStartInfoPatcher get_ProcessStartInfoPatcher();
    [CompilerGeneratedAttribute]
public NuGetNupkgStorage get_NupkgStorage();
    [CompilerGeneratedAttribute]
public NuGetFolderManager get_FolderManager();
    [CompilerGeneratedAttribute]
public NuGetSourceCacheContextProvider get_SourceCacheContextProvider();
    [CompilerGeneratedAttribute]
public NuGetCommonOperations get_CommonOperations();
    [CompilerGeneratedAttribute]
public NuGetResourceProviderFactory get_ResourceProviderFactory();
    [CompilerGeneratedAttribute]
public NuGetSupportStatus get_SupportStatus();
    public ISolutionBuilder get_SolutionBuilder();
    public NuGetPackageReferenceTracker get_PackageReferenceTracker();
    [CompilerGeneratedAttribute]
public NuGetFeaturesController get_FeaturesController();
    [CompilerGeneratedAttribute]
public IProperty`1<NuGetOperationLevel> get_CurrentLevel();
    public NuGetFeedContext get_EnabledFeedContext();
    public ClientPolicyContext get_ClientPolicyContext();
    public NuGetProjectContext get_ProjectContext();
    public PackageDownloadContext get_PackageDownloadContext();
}
public enum JetBrains.ProjectModel.NuGet.Operations.NuGetOperationLevel : Enum {
    public int value__;
    public static NuGetOperationLevel ProjectUpdating;
    public static NuGetOperationLevel ProjectItemPropertiesUpdating;
    public static NuGetOperationLevel NuGetModelUpdating;
    public static NuGetOperationLevel FileSystemUpdating;
    public static NuGetOperationLevel None;
}
public class JetBrains.ProjectModel.NuGet.Operations.NuGetOperationReporter : object {
    [NotNullAttribute]
private ReadonlyToken myReadonlyToken;
    [NotNullAttribute]
private LifetimeDefinition myLifetimeDef;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<string> <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<string> <Description>k__BackingField;
    [NotNullAttribute]
public string Title { get; }
    [NotNullAttribute]
public Property`1<string> Header { get; }
    [NotNullAttribute]
public Property`1<string> Description { get; }
    public CancellationToken CancellationToken { get; }
    public Lifetime OperationLifetime { get; }
    public NuGetOperationReporter(Lifetime lifetime, string title);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public Property`1<string> get_Header();
    [CompilerGeneratedAttribute]
public Property`1<string> get_Description();
    public CancellationToken get_CancellationToken();
    public Lifetime get_OperationLifetime();
    [StringFormatMethodAttribute("subTitle")]
public void UpdateHeader(string title);
    public void UpdateDescription(string logLine);
    public void DoCancel();
    [CompilerGeneratedAttribute]
internal static string <.ctor>g__Name|15_0(string s);
}
public class JetBrains.ProjectModel.NuGet.Operations.NuGetOperationRequest : object {
    private Func`2<CancellationToken, Task`1<NuGetOperationAggregatedResult>> myRequest;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetNotificationMode <Mode>k__BackingField;
    public string Title { get; }
    public NuGetNotificationMode Mode { get; }
    private NuGetOperationRequest(string title, NuGetNotificationMode mode, Func`2<CancellationToken, Task`1<NuGetOperationAggregatedResult>> request);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public NuGetNotificationMode get_Mode();
    public Task`1<NuGetOperationAggregatedResult> Run(CancellationToken token);
    [PureAttribute]
[NotNullAttribute]
public static NuGetOperationRequest Create(string title, NuGetNotificationMode mode, T operation, Func`3<T, CancellationToken, Task`1<NuGetOperationAggregatedResult>> action);
}
public class JetBrains.ProjectModel.NuGet.Operations.NuGetOperationResult : object {
    public static NuGetOperationResult Success;
    public static NuGetOperationResult Fail;
    public static NuGetOperationResult Skip;
    public static NuGetOperationResult Cancel;
    [CompilerGeneratedAttribute]
private NuGetOperationStatus <Status>k__BackingField;
    public NuGetOperationStatus Status { get; }
    public NuGetOperationResult(NuGetOperationStatus status);
    private static NuGetOperationResult();
    [CompilerGeneratedAttribute]
public NuGetOperationStatus get_Status();
    public static NuGetOperationResult FromRestoreResult(NuGetPackageReferenceRestoreResult restoreResult);
}
public enum JetBrains.ProjectModel.NuGet.Operations.NuGetOperationStatus : Enum {
    public int value__;
    public static NuGetOperationStatus Success;
    public static NuGetOperationStatus Fail;
    public static NuGetOperationStatus Skip;
    public static NuGetOperationStatus Cancel;
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.Operations.NuGetOperator : object {
    private Lifetime myLifetime;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private NuGetOperationContext myContext;
    [NotNullAttribute]
private NuGetRestoreOperation myRestoreOperation;
    [NotNullAttribute]
private NuGetInstallOperation myInstallOperation;
    [NotNullAttribute]
private NuGetUninstallOperation myUninstallOperation;
    [NotNullAttribute]
private NuGetUpdateAllOperation myUpdateAllOperation;
    [NotNullAttribute]
private NuGetDeleteStalePackagesOperation myDeleteStalePackagesOperation;
    [NotNullAttribute]
private NuGetDisembowelOperation myDisembowelOperation;
    [NotNullAttribute]
private NuGetFolderAutoClearOperation myFolderAutoClearOperation;
    [NotNullAttribute]
private NuGetFolderSizeCalcOperation myFolderSizeCalcOperation;
    [NotNullAttribute]
private NuGetFolderForceClearOperation myFolderForceClearOperation;
    [NotNullAttribute]
private NuGetFolderOperationBase[] mySoftOperations;
    [NotNullAttribute]
private NuGetOperationsRestoreMarkService myRestoreMarksServiceBase;
    [NotNullAttribute]
private NuGetSoftOperationSuspender mySoftOperationSuspender;
    [NotNullAttribute]
private NuGetOperatorEvents myEvents;
    [NotNullAttribute]
private UsageStatistics myUsageStatistics;
    [NotNullAttribute]
private SingleThreadExecutor myExecutor;
    [NotNullAttribute]
private SequentialLifetimes mySoftOperationsLifetimes;
    private int myLastSoftOperationsRequest;
    [CompilerGeneratedAttribute]
private IProperty`1<NuGetOperationReporter> <CurrentReporter>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ProjectUpdatingInProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ProjectItemPropertiesUpdatingInProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <NuGetModelUpdatingInProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private Signal`1<NuGetOperationAggregatedResult> <Finished>k__BackingField;
    [NotNullAttribute]
public IProperty`1<NuGetOperationReporter> CurrentReporter { get; }
    [PublicAPIAttribute]
[NotNullAttribute]
public IProperty`1<NuGetOperationLevel> CurrentLevel { get; }
    [NotNullAttribute]
public IProperty`1<bool> ProjectUpdatingInProgress { get; }
    [NotNullAttribute]
public IProperty`1<bool> ProjectItemPropertiesUpdatingInProgress { get; }
    [NotNullAttribute]
public IProperty`1<bool> NuGetModelUpdatingInProgress { get; }
    [NotNullAttribute]
public Signal`1<NuGetOperationAggregatedResult> Finished { get; }
    public NuGetOperator(Lifetime lifetime, IShellLocks locks, ILogger logger, NuGetOperationContext context, NuGetRestoreOperation restoreOperation, NuGetInstallOperation installOperation, NuGetUninstallOperation uninstallOperation, NuGetUpdateAllOperation updateAllOperation, NuGetDeleteStalePackagesOperation deleteStalePackagesOperation, NuGetDisembowelOperation disembowelOperation, NuGetFolderAutoClearOperation folderAutoClearOperation, NuGetLegacyRunningState legacyRunningState, NuGetFolderSizeCalcOperation folderSizeCalcOperation, NuGetFolderForceClearOperation folderForceClearOperation, NuGetToolWindowObserver toolWindowObserver, NuGetOperationsRestoreMarkService restoreMarksServiceBase, NuGetSoftOperationSuspender softOperationSuspender, NuGetOperatorEvents events, UsageStatistics usageStatistics);
    [CompilerGeneratedAttribute]
public IProperty`1<NuGetOperationReporter> get_CurrentReporter();
    public IProperty`1<NuGetOperationLevel> get_CurrentLevel();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ProjectUpdatingInProgress();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ProjectItemPropertiesUpdatingInProgress();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_NuGetModelUpdatingInProgress();
    [CompilerGeneratedAttribute]
public Signal`1<NuGetOperationAggregatedResult> get_Finished();
    private Task Queue(Action action);
    private Task`1<T> Queue(Func`1<T> action);
    private NuGetOperationAggregatedResult Run(string title, NuGetNotificationMode mode, NuGetNotificationContext context, Func`2<NuGetOperationReporter, Task`1<NuGetOperationAggregatedResult>> action, Action callback);
    [PublicAPIAttribute]
public Task`1<NuGetOperationAggregatedResult> RestoreAsync(NuGetNotificationMode mode, NuGetRestoreStrategy strategy, string reason, NuGetRestoreRequestSource source, Nullable`1<NuGetIntegratedRestoreEngine> specificEngine, Action callback, ISet`1<IProject> projectsToReload);
    [PublicAPIAttribute]
public Task`1<NuGetOperationAggregatedResult> RestoreIfNeededAsync(NuGetNotificationMode mode, NuGetRestoreStrategy strategy, string reason, NuGetRestoreRequestSource source, Nullable`1<NuGetIntegratedRestoreEngine> specificEngine, Action callback, ISet`1<IProject> projectsToReload);
    [PublicAPIAttribute]
public Task`1<NuGetOperationAggregatedResult> InstallAsync(IProject project, PackageIdentity packageIdentity, ResolutionContext resolutionContext, NuGetFeedContext feedContext);
    [PublicAPIAttribute]
public Task`1<NuGetOperationAggregatedResult> InstallMultiAsync(List`1<NuGetProjectWithIdentity> projectsWithIdentities, ResolutionContext resolutionContext, NuGetFeedContext feedContext);
    [PublicAPIAttribute]
public Task`1<NuGetOperationAggregatedResult> UpdateAllInProjectAsync(IProject project, ResolutionContext resolutionContext, NuGetFeedContext feedContext);
    [PublicAPIAttribute]
public Task`1<NuGetOperationAggregatedResult> UpdateAllInSolutionAsync(ResolutionContext resolutionContext, NuGetFeedContext feedContext);
    [PublicAPIAttribute]
public Task`1<NuGetOperationAggregatedResult> InstallLatestAsync(IProject project, string packageId, ResolutionContext resolutionContext, NuGetFeedContext feedContext);
    [PublicAPIAttribute]
public Task`1<NuGetOperationAggregatedResult> UninstallAsync(IProject project, string packageId, UninstallationContext uninstallationContext);
    [PublicAPIAttribute]
public Task`1<NuGetOperationAggregatedResult> FolderForceClearAsync(IReadOnlyList`1<string> folderTitles);
    [PublicAPIAttribute]
public Task`1<NuGetOperationAggregatedResult> RunCustomOperation(NuGetOperationLevel operationLevel, string title, NuGetNotificationContext context, Func`2<NuGetOperationReporter, Task`1<NuGetOperationAggregatedResult>> operation);
    [PublicAPIAttribute]
public Task DeleteStalePackagesRequest();
    [PublicAPIAttribute]
public Task DisembowelAll(string reason);
    [PublicAPIAttribute]
public Task DisembowelAndSizeCalc(IReadOnlyList`1<NuGetFolder> folders, string reason);
    [PublicAPIAttribute]
public Task Disembowel(NuGetFolder folder, string reason);
    public Task FolderCleanup(NuGetFolderKind kind, string reason);
    public Task FolderSizeCalc(NuGetFolder folder, string reason);
    public Task FolderSizeCalcAll(string reason);
    private Task NextSoftOperations(string reason);
    private Task SoftOperations(string reason, int request, int attempt);
    [PublicAPIAttribute]
public Task EnqueueCustom(Action action);
    private void Notify(NuGetNotificationMode mode, NuGetOperationAggregatedResult result);
    private Task ExecuteFolderManagementAction(Func`1<Task> action);
    [CompilerGeneratedAttribute]
internal static string <.ctor>g__Name|37_1(string s);
    [CompilerGeneratedAttribute]
private void <DeleteStalePackagesRequest>b__51_0();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ProjectModel.NuGet.Operations.NuGetOperatorEvents : object {
    public virtual void BeforeUserRequestedOperation();
    public virtual void AfterUserRequestedOperation();
    public virtual void BeforePackageReferencesProcessed();
    public virtual void AfterPackageReferencesProcessed();
}
public class JetBrains.ProjectModel.NuGet.Operations.NuGetPatchedInstallationCompatibility : object {
    private static NuGetPatchedInstallationCompatibility _instance;
    public static NuGetPatchedInstallationCompatibility Instance { get; }
    public static NuGetPatchedInstallationCompatibility get_Instance();
    public sealed virtual void EnsurePackageCompatibility(NuGetProject nuGetProject, INuGetPathContext pathContext, IEnumerable`1<NuGetProjectAction> nuGetProjectActions, RestoreResult restoreResult);
    public void EnsurePackageCompatibility(NuGetProject nuGetProject, PackageIdentity packageIdentity, DownloadResourceResult resourceResult);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Operations.NuGetPatchedInstallationCompatibility/<EnsurePackageCompatibilityAsync>d__5")]
public sealed virtual Task EnsurePackageCompatibilityAsync(NuGetProject nuGetProject, PackageIdentity packageIdentity, DownloadResourceResult resourceResult, CancellationToken cancellationToken);
    private static void EnsurePackageCompatibility(NuGetProject nuGetProject, PackageIdentity packageIdentity, NuspecReader nuspecReader);
}
public class JetBrains.ProjectModel.NuGet.Operations.NuGetRestoreFailedDiagnostic : Diagnostic {
    public NuGetRestoreFailedDiagnostic(string title, string presentableText);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.Operations.NuGetRestoreOperation : NuGetOperation {
    private NuGetOperationsRestoreMarkService myRestoreMarksServiceBase;
    private NuGetRestoreCacheFileManager myRestoreCacheFileManager;
    private NuGetRuntimeInformationDetector myRuntimeInformationDetector;
    private IMsBuildVersionResolver myVersionResolver;
    private SequentialLifetimes myRestoreLifetime;
    private IDiagnosticCollector myDiagnosticCollector;
    [CompilerGeneratedAttribute]
private SimpleSignal <ClassicRestoreIsFinished>k__BackingField;
    private Regex myMsBuildAffectedProjectPattern1;
    private Regex myMsBuildAffectedProjectPattern2;
    public SimpleSignal ClassicRestoreIsFinished { get; }
    public NuGetRestoreOperation(Lifetime lifetime, NuGetOperationContext context, NuGetOperationsRestoreMarkService restoreMarksServiceBase, NuGetRestoreCacheFileManager restoreCacheFileManager, NuGetRuntimeInformationDetector runtimeInformationDetector, IMsBuildVersionResolver versionResolver, IDiagnosticCollector diagnosticCollector);
    [CompilerGeneratedAttribute]
public SimpleSignal get_ClassicRestoreIsFinished();
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Operations.NuGetRestoreOperation/<RestoreSolutionAsync>d__10")]
public Task`1<NuGetOperationAggregatedResult> RestoreSolutionAsync(int nestedLevel, NuGetOperationReporter reporter, NuGetRestoreOperationRequest request);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Operations.NuGetRestoreOperation/<RestorePackagesConfig>d__11")]
private Task`1<List`1<PackageRestoreData>> RestorePackagesConfig(int nestedLevel, NuGetNotificationMode mode, NuGetOperationReporter reporter, PackageRestoreManager restoreManager, Messenger messenger, NuGetOperationAggregatedResult result, ICollection`1<IProject> allProjects);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Operations.NuGetRestoreOperation/<RestorePackageReferences>d__12")]
private Task`1<bool> RestorePackageReferences(NuGetNotificationMode mode, NuGetRestoreStrategy strategy, NuGetOperationReporter reporter, Messenger messenger, NuGetOperationAggregatedResult result, Nullable`1<NuGetIntegratedRestoreEngine> specificEngine, List`1<IProject> projects, Lifetime restoreLifetime);
    private NuGetIntegratedRestoreEngine ResolveAutomaticEngine(Messenger messenger);
    protected virtual void ProcessAffectedProjects(Messenger messenger, NuGetOperationAggregatedResult result, HashSet`1<string> affectedProjects);
    private void ProcessRestoreSummaries(Messenger messenger, NuGetOperationAggregatedResult result, IReadOnlyList`1<RestoreSummary> restoreSummaries);
    private static DependencyGraphSpec FilterValid(DependencyGraphSpec dgSpec, Messenger messenger, NuGetOperationAggregatedResult result, NuGetVersion sdkVersion);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Operations.NuGetRestoreOperation/<RestoreEmbedded>d__17")]
private Task`1<IReadOnlyList`1<RestoreSummary>> RestoreEmbedded(Messenger messenger, NuGetOperationReporter reporter, DependencyGraphSpec dgSpec, NuGetRestoreStrategy strategy, List`1<IProject> projects, NuGetVersion sdkVersion);
    private void DeleteOldSdkCacheFilesForProjects(List`1<IProject> projects, Messenger messenger);
    private void DeleteOldSdkCacheFileIfPresent(IProject project, Messenger messenger);
    private static string GetRestoreCompletePattern();
    private static string GetInstalledSummaryCountPattern();
    private static string GetNuGetRestoreDecisionMessage(List`1<IProject> dirtyProjects, NuGetRestoreStrategy restoreStrategy);
    private static string ExtractProjectName(Match match);
    private HashSet`1<string> RestoreMsBuild(Lifetime parentLifetime, List`1<IProject> projects);
    private bool IsStaticGraphMsBuildSupported();
    private static INuGetLogMessage Convert(OutputItemBase buildEvent, InFileBuildSessionLoader loader);
    public static HashSet`1<string> RestoreConsole(NuGetOperationContext context, IInteractionContext interactionContext);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Operations.NuGetRestoreOperation/<RestorePackageAsync>d__30")]
private Task`1<NuGetPackageReferenceRestoreResult> RestorePackageAsync(PackageRestoreData package, PackageRestoreManager restoreManager, NuGetPackageManager packageManager, int nestedLevel, NuGetNotificationMode mode, NuGetOperationAggregatedResult aggregatedResult, NuGetOperationReporter reporter);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Operations.NuGetRestoreOperation/<RestorePackagesAsync>d__31")]
private Task`1<List`1<Pair`2<PackageReference, NuGetPackageReferenceRestoreResult>>> RestorePackagesAsync(IEnumerable`1<PackageRestoreData> packages, PackageRestoreManager restoreManager, NuGetPackageManager packageManager, int nestedLevel, NuGetNotificationMode mode, NuGetOperationAggregatedResult opResult, NuGetOperationReporter reporter);
    private void OnSuccess(Messenger messenger, NuGetOperationAggregatedResult result, NuGetNotificationMode mode, bool hasPackages);
    private static string ToStr(IEnumerable`1<PackageRestoreData> list);
    private static string ToStr(ICollection`1<string> hashSet);
    private static string AreIsStr(int count, string noun);
}
public static class JetBrains.ProjectModel.NuGet.Operations.NuGetRestoreOperationConstants : object {
    public static string GetPackagesErrorMessage;
    public static Version MsBuildStaticGraphThresholdVersion;
    public static ImmutableHashSet`1<NuGetLogCode> CriticalRestoreErrorCodes;
    private static NuGetRestoreOperationConstants();
}
public class JetBrains.ProjectModel.NuGet.Operations.NuGetRestoreOperationRequest : object {
    [CompilerGeneratedAttribute]
private NuGetNotificationMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetRestoreStrategy <Strategy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NuGetIntegratedRestoreEngine> <Engine>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetRestoreRequestSource <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<IProject> <ProjectsToReload>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public NuGetNotificationMode Mode { get; public set; }
    public NuGetRestoreStrategy Strategy { get; public set; }
    public Nullable`1<NuGetIntegratedRestoreEngine> Engine { get; public set; }
    public NuGetRestoreRequestSource Source { get; public set; }
    public string Reason { get; public set; }
    public ISet`1<IProject> ProjectsToReload { get; public set; }
    public NuGetRestoreOperationRequest(NuGetNotificationMode Mode, NuGetRestoreStrategy Strategy, Nullable`1<NuGetIntegratedRestoreEngine> Engine, NuGetRestoreRequestSource Source, string Reason, ISet`1<IProject> ProjectsToReload);
    [CompilerGeneratedAttribute]
protected NuGetRestoreOperationRequest(NuGetRestoreOperationRequest original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public NuGetNotificationMode get_Mode();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Mode(NuGetNotificationMode value);
    [CompilerGeneratedAttribute]
public NuGetRestoreStrategy get_Strategy();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Strategy(NuGetRestoreStrategy value);
    [CompilerGeneratedAttribute]
public Nullable`1<NuGetIntegratedRestoreEngine> get_Engine();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Engine(Nullable`1<NuGetIntegratedRestoreEngine> value);
    [CompilerGeneratedAttribute]
public NuGetRestoreRequestSource get_Source();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Source(NuGetRestoreRequestSource value);
    [CompilerGeneratedAttribute]
public string get_Reason();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Reason(string value);
    [CompilerGeneratedAttribute]
public ISet`1<IProject> get_ProjectsToReload();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ProjectsToReload(ISet`1<IProject> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(NuGetRestoreOperationRequest left, NuGetRestoreOperationRequest right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(NuGetRestoreOperationRequest left, NuGetRestoreOperationRequest right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(NuGetRestoreOperationRequest other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual NuGetRestoreOperationRequest <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(NuGetNotificationMode& Mode, NuGetRestoreStrategy& Strategy, Nullable`1& Engine, NuGetRestoreRequestSource& Source, String& Reason, ISet`1& ProjectsToReload);
}
public enum JetBrains.ProjectModel.NuGet.Operations.NuGetRestoreRequestSource : Enum {
    public int value__;
    public static NuGetRestoreRequestSource Default;
    public static NuGetRestoreRequestSource Manual;
}
public enum JetBrains.ProjectModel.NuGet.Operations.NuGetRestoreStrategy : Enum {
    public int value__;
    public static NuGetRestoreStrategy Default;
    public static NuGetRestoreStrategy Force;
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.Operations.NuGetSoftOperationSuspender : object {
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private SynchronizationPoint mySynchronizationPoint;
    [CompilerGeneratedAttribute]
private SimpleSignal <Suspended>k__BackingField;
    [CompilerGeneratedAttribute]
private SimpleSignal <Resumed>k__BackingField;
    [NotNullAttribute]
public SimpleSignal Suspended { get; }
    [NotNullAttribute]
public SimpleSignal Resumed { get; }
    public bool OperationsAreSuspended { get; }
    public NuGetSoftOperationSuspender(Lifetime lifetime, ILogger logger, ISolutionLoadTasksScheduler solutionLoadTasksScheduler, SynchronizationPoints synchronizationPoints);
    [CompilerGeneratedAttribute]
public SimpleSignal get_Suspended();
    [CompilerGeneratedAttribute]
public SimpleSignal get_Resumed();
    public bool get_OperationsAreSuspended();
    [NotNullAttribute]
public string GetSuspendReasons();
    public void Suspend(Lifetime lifetime, string reason);
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_0(PropertyChangedEventArgs`1<bool> e);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ProjectModel.NuGet.Operations.NuGetUninstallOperation : NuGetOperation {
    private ISolution mySolution;
    private NuGetRestoreOperation myRestoreOperation;
    private NuGetRuntimeInformationDetector myRuntimeInformationDetector;
    private IEnumerable`1<INuGetPostUninstallOperation> myPostUninstallOperations;
    private NuGetPackageReferenceTracker NuGetPackageReferenceTracker { get; }
    public NuGetUninstallOperation(ISolution solution, NuGetOperationContext context, NuGetRestoreOperation restoreOperation, NuGetRuntimeInformationDetector runtimeInformationDetector, IEnumerable`1<INuGetPostUninstallOperation> postUninstallOperations);
    private NuGetPackageReferenceTracker get_NuGetPackageReferenceTracker();
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Operations.NuGetUninstallOperation/<UninstallAsync>d__7")]
public Task`1<NuGetOperationAggregatedResult> UninstallAsync(IProject project, string packageId, UninstallationContext uninstallationContext, int nestedLevel, NuGetNotificationMode mode, NuGetOperationReporter reporter);
    private static bool IsPackageUninstalled(string packageId, IProject project, NuGetOperationReporter reporter, NuGetPackageReferenceTracker packageReferenceTracker);
    private static string GetMessageForOperationStatus(NuGetOperationStatus status);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.Operations.NuGetUpdateAllOperation : NuGetOperation {
    [CompilerGeneratedAttribute]
private SimpleSignal <ClassicUpdateAllIsFinished>k__BackingField;
    private NuGetRuntimeInformationDetector myRuntimeInformationDetector;
    public SimpleSignal ClassicUpdateAllIsFinished { get; }
    public NuGetUpdateAllOperation(Lifetime lifetime, NuGetOperationContext context, NuGetRuntimeInformationDetector runtimeInformationDetector);
    [CompilerGeneratedAttribute]
public SimpleSignal get_ClassicUpdateAllIsFinished();
    public Task`1<NuGetOperationAggregatedResult> UpdateAllInSolutionAsync(ResolutionContext resolutionContext, NuGetFeedContext feedContext, int nestedLevel, NuGetNotificationMode mode, NuGetOperationReporter reporter);
    public Task`1<NuGetOperationAggregatedResult> UpdateAllInProjectAsync(IProject project, ResolutionContext resolutionContext, NuGetFeedContext feedContext, int nestedLevel, NuGetNotificationMode mode, NuGetOperationReporter reporter);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Operations.NuGetUpdateAllOperation/<UpdateAllInternalAsync>d__7")]
private Task`1<NuGetOperationAggregatedResult> UpdateAllInternalAsync(string targetName, IEnumerable`1<NuGetProject> projects, ResolutionContext resolutionContext, NuGetFeedContext feedContext, int nestedLevel, NuGetNotificationMode mode, NuGetOperationReporter reporter);
}
public enum JetBrains.ProjectModel.NuGet.Options.NuGetOptionConfigPolicy : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("Always use value from NuGet.Config")]
public static NuGetOptionConfigPolicy NuGetConfig;
    [LocalizedDescriptionAttribute("Always enable")]
public static NuGetOptionConfigPolicy Enable;
    [LocalizedDescriptionAttribute("Always disable")]
public static NuGetOptionConfigPolicy Disable;
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.NuGet.Options.NuGetOptionConfigPolicyExtensions : object {
    [ExtensionAttribute]
public static bool GetEffectiveEnabled(NuGetOptionConfigPolicy policy, bool configValue);
}
public enum JetBrains.ProjectModel.NuGet.Options.NuGetOptionCredentialProviderPreference : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("Rider integrated")]
public static NuGetOptionCredentialProviderPreference Rider;
    [LocalizedDescriptionAttribute("NuGet/.NET CLI plugins")]
public static NuGetOptionCredentialProviderPreference NuGetPlugins;
    [LocalizedDescriptionAttribute("NuGet/.NET CLI plugins, then Rider integrated")]
public static NuGetOptionCredentialProviderPreference NuGetPluginsThenRider;
    [LocalizedDescriptionAttribute("None")]
public static NuGetOptionCredentialProviderPreference None;
}
[SettingsKeyAttribute("JetBrains.ProjectModel.Settings.Schema.HierarchySettings", "JetBrains.ProjectModel.Resources.Strings", "NuGetSettingDescription")]
public class JetBrains.ProjectModel.NuGet.Options.NuGetOptions : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "IncludePrereleaseSettingDescription")]
public bool IncludePrerelease;
    [CompilerGeneratedAttribute]
private bool <IncludeUnlisted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SearchInAzureBlobs>k__BackingField;
    [CompilerGeneratedAttribute]
private DependencyBehavior <DependencyBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceRemove>k__BackingField;
    [CompilerGeneratedAttribute]
private FileConflictAction <FileConflictAction>k__BackingField;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "PolicyForautomaticNuGetConfigRestorePropertySettingDescription")]
public NuGetOptionConfigPolicy ConfigRestoreAuto;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "PolicyForenabledNuGetConfigRestorePropertySettingDescription")]
public NuGetOptionConfigPolicy ConfigRestoreEnabled;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "DefaultPackageManagementFormatSettingDescription")]
public NuGetPackageManagementFormat DefaultPackageManagementFormat;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "PackageSpecDumpStrategySettingDescription")]
public NuGetPackageSpecDumpStrategy PackageSpecDumpStrategy;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "UseAzureCredentialProviderV2Title")]
public bool UseAzureCredentialProviderV2;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "CredentialProvidersSettingDescription")]
public NuGetOptionCredentialProviderPreference CredentialProviderPreference;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "NETCoreRestoreEngineSettingDescription")]
public NuGetIntegratedRestoreEngine IntegratedRestoreEngine;
    [SettingsIndexedEntryAttribute("JetBrains.ProjectModel.Resources.Strings", "FolderAutoCleanModeSettingDescription")]
public IIndexedEntry`2<string, bool> FolderAutoCleanMode;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "SmartRestoreOnBuildSettingDescription")]
public bool SmartRestoreOnBuild;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "ReloadProjectsOnExternalRestore")]
public bool ReloadProjectsOnExternalRestore;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "IncludeUnlistedSettingDescription")]
public bool IncludeUnlisted { get; private set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "SearchInAzureBlobsSettingDescription")]
public bool SearchInAzureBlobs { get; private set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "DependencyBehaviorSettingDescription")]
public DependencyBehavior DependencyBehavior { get; private set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "RemoveDependenciesSettingDescription")]
public bool RemoveDependencies { get; private set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "ForceRemoveSettingDescription")]
public bool ForceRemove { get; private set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "FileConflictActionSettingDescription")]
public FileConflictAction FileConflictAction { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_IncludeUnlisted();
    [CompilerGeneratedAttribute]
private void set_IncludeUnlisted(bool value);
    [CompilerGeneratedAttribute]
public bool get_SearchInAzureBlobs();
    [CompilerGeneratedAttribute]
private void set_SearchInAzureBlobs(bool value);
    [CompilerGeneratedAttribute]
public DependencyBehavior get_DependencyBehavior();
    [CompilerGeneratedAttribute]
private void set_DependencyBehavior(DependencyBehavior value);
    [CompilerGeneratedAttribute]
public bool get_RemoveDependencies();
    [CompilerGeneratedAttribute]
private void set_RemoveDependencies(bool value);
    [CompilerGeneratedAttribute]
public bool get_ForceRemove();
    [CompilerGeneratedAttribute]
private void set_ForceRemove(bool value);
    [CompilerGeneratedAttribute]
public FileConflictAction get_FileConflictAction();
    [CompilerGeneratedAttribute]
private void set_FileConflictAction(FileConflictAction value);
}
[SolutionInstanceComponentAttribute("0")]
public class JetBrains.ProjectModel.NuGet.Options.NuGetOptionsProvider : object {
    private Lifetime myLifetime;
    private IContextBoundSettingsStoreLive myStore;
    private SettingsIndexedEntry myFolderAutoCleanModeEntry;
    [CompilerGeneratedAttribute]
private IProperty`1<DependencyBehavior> <DependencyBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IncludePrerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IncludeUnlisted>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <SearchInAzureBlobs>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <RemoveDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ForceRemove>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<FileConflictAction> <FileConflictAction>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<NuGetOptionConfigPolicy> <ConfigRestoreAuto>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<NuGetOptionConfigPolicy> <ConfigRestoreEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<NuGetPackageManagementFormat> <DefaultPackageManagementFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<NuGetPackageSpecDumpStrategy> <PackageSpecDumpStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <UseAzureCredentialProviderV2>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<NuGetOptionCredentialProviderPreference> <CredentialProviderPreference>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<NuGetIntegratedRestoreEngine> <IntegratedRestoreEngine>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <SmartRestoreOnBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ReloadProjectsOnExternalRestore>k__BackingField;
    public IProperty`1<DependencyBehavior> DependencyBehavior { get; }
    public IProperty`1<bool> IncludePrerelease { get; }
    public IProperty`1<bool> IncludeUnlisted { get; }
    public IProperty`1<bool> SearchInAzureBlobs { get; }
    public IProperty`1<bool> RemoveDependencies { get; }
    public IProperty`1<bool> ForceRemove { get; }
    public IProperty`1<FileConflictAction> FileConflictAction { get; }
    public IProperty`1<NuGetOptionConfigPolicy> ConfigRestoreAuto { get; }
    public IProperty`1<NuGetOptionConfigPolicy> ConfigRestoreEnabled { get; }
    public IProperty`1<NuGetPackageManagementFormat> DefaultPackageManagementFormat { get; }
    public IProperty`1<NuGetPackageSpecDumpStrategy> PackageSpecDumpStrategy { get; }
    public IProperty`1<bool> UseAzureCredentialProviderV2 { get; }
    public IProperty`1<NuGetOptionCredentialProviderPreference> CredentialProviderPreference { get; }
    public IProperty`1<NuGetIntegratedRestoreEngine> IntegratedRestoreEngine { get; }
    public IProperty`1<bool> SmartRestoreOnBuild { get; }
    public IProperty`1<bool> ReloadProjectsOnExternalRestore { get; }
    public NuGetOptionsProvider(Lifetime lifetime, IThreading threading, ISolution solution, ISettingsStore settingsStore, SolutionSettingsReadyForSolutionInstanceComponent ss);
    [CompilerGeneratedAttribute]
public IProperty`1<DependencyBehavior> get_DependencyBehavior();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IncludePrerelease();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IncludeUnlisted();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_SearchInAzureBlobs();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_RemoveDependencies();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ForceRemove();
    [CompilerGeneratedAttribute]
public IProperty`1<FileConflictAction> get_FileConflictAction();
    [CompilerGeneratedAttribute]
public IProperty`1<NuGetOptionConfigPolicy> get_ConfigRestoreAuto();
    [CompilerGeneratedAttribute]
public IProperty`1<NuGetOptionConfigPolicy> get_ConfigRestoreEnabled();
    [CompilerGeneratedAttribute]
public IProperty`1<NuGetPackageManagementFormat> get_DefaultPackageManagementFormat();
    [CompilerGeneratedAttribute]
public IProperty`1<NuGetPackageSpecDumpStrategy> get_PackageSpecDumpStrategy();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_UseAzureCredentialProviderV2();
    [CompilerGeneratedAttribute]
public IProperty`1<NuGetOptionCredentialProviderPreference> get_CredentialProviderPreference();
    [CompilerGeneratedAttribute]
public IProperty`1<NuGetIntegratedRestoreEngine> get_IntegratedRestoreEngine();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_SmartRestoreOnBuild();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ReloadProjectsOnExternalRestore();
    public ResolutionContext GetResolutionContext();
    public UninstallationContext GetUninstallationContext();
    [PublicAPIAttribute]
[PureAttribute]
public bool GetAutoClearMode(NuGetFolder folder);
    [PublicAPIAttribute]
public void SetAutoClearMode(NuGetFolder folder, bool value);
}
public enum JetBrains.ProjectModel.NuGet.Options.NuGetPackageManagementFormat : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("packages.config")]
public static NuGetPackageManagementFormat PackagesConfig;
    [LocalizedDescriptionAttribute("PackageReference")]
public static NuGetPackageManagementFormat PackageReference;
}
public enum JetBrains.ProjectModel.NuGet.Options.NuGetPackageSpecDumpStrategy : Enum {
    public int value__;
    public static NuGetPackageSpecDumpStrategy Overwrite;
    public static NuGetPackageSpecDumpStrategy OverwriteAndSnapshot;
}
public interface JetBrains.ProjectModel.NuGet.PackageManagement.INuGetProjectKnownType {
    public NuGetProjectType ProjectType { get; }
    public abstract virtual NuGetProjectType get_ProjectType();
}
public interface JetBrains.ProjectModel.NuGet.PackageManagement.INuGetSolutionManager {
    public abstract virtual IEnumerable`1<NuGetProject> GetNuGetProjects();
    [CanBeNullAttribute]
public abstract virtual NuGetProject GetNuGetProject(IProject project);
    [CanBeNullAttribute]
public abstract virtual IProject GetRealProject(NuGetProject nuGetProject);
}
public interface JetBrains.ProjectModel.NuGet.PackageManagement.INuGetSolutionManagerEx {
    public VirtualFileSystemPath SolutionFilePath { get; }
    public string SolutionName { get; }
    public SimpleSignal Invalidated { get; }
    public IProperty`1<bool> IsReady { get; }
    public bool IsSolutionBeingLoadedFromCache { get; }
    public abstract virtual VirtualFileSystemPath get_SolutionFilePath();
    public abstract virtual string get_SolutionName();
    public abstract virtual ICollection`1<IProject> GetAllProjects();
    public abstract virtual ICollection`1<IProject> GetAllValidNuGetProjects();
    public abstract virtual bool IsNuGetProject(IProject project);
    public abstract virtual bool IsNuGetPackagesConfigProject(IProject project);
    public abstract virtual SimpleSignal get_Invalidated();
    public abstract virtual IProperty`1<bool> get_IsReady();
    public abstract virtual bool get_IsSolutionBeingLoadedFromCache();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ProjectModel.NuGet.PackageManagement.NuGetAssemblyManager : object {
    private NuGetPackageReferenceTracker myPackageReferenceTracker;
    private NuGetNupkgStorage myNupkgStorage;
    private ISolution mySolution;
    public NuGetAssemblyManager(ISolution solution, NuGetPackageReferenceTracker packageReferenceTracker, NuGetNupkgStorage nupkgStorage);
    public NuGetNupkg GetPackageFromAssemblyLocations(IList`1<VirtualFileSystemPath> assemblyLocations, VirtualFileSystemPath& installedLocation);
    public NuGetNupkg GetPackageFromAssemblyLocation(VirtualFileSystemPath assemblyLocation);
    [ObsoleteAttribute("Don't use it if you don't want performance problems")]
public NuGetNupkg GetPackageFromAssemblyLocationVerySlow(VirtualFileSystemPath assemblyLocation);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.PackageManagement.NuGetDeleteOnRestartManager : object {
    private NuGetHost myHost;
    private IMarker myMarker;
    [CompilerGeneratedAttribute]
private EventHandler`1<PackagesMarkedForDeletionEventArgs> PackagesMarkedForDeletionFound;
    public NuGetDeleteOnRestartManager(Lifetime lifetime, NuGetFolderManager folderManager, NuGetHost host);
    private IMarker CreateMarker(VirtualFileSystemPath packagesFolderPath);
    public sealed virtual IReadOnlyList`1<string> GetPackageDirectoriesMarkedForDeletion();
    public sealed virtual void CheckAndRaisePackageDirectoriesMarkedForDeletion();
    public sealed virtual void MarkPackageDirectoryForDeletion(PackageIdentity package, string packageDirectory, INuGetProjectContext projectContext);
    public sealed virtual Task DeleteMarkedPackageDirectoriesAsync(INuGetProjectContext projectContext);
    public void DeleteMarkedPackageDirectories();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PackagesMarkedForDeletionFound(EventHandler`1<PackagesMarkedForDeletionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PackagesMarkedForDeletionFound(EventHandler`1<PackagesMarkedForDeletionEventArgs> value);
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ProjectModel.NuGet.PackageManagement.NuGetNativePackageManager : object {
    public bool IsAvailable { get; }
    public virtual bool get_IsAvailable();
    public virtual Task InstallPackage(IProject project, string packageId, string version);
    public virtual Task InstallLatestPackage(IProject project, string packageId, bool prerelease);
    public virtual bool InstallNuGetPackageFromAssemblyFiles(IList`1<VirtualFileSystemPath> assemblyLocations, IProject project, VirtualFileSystemPath& installedLocation);
}
public static class JetBrains.ProjectModel.NuGet.PackageManagement.NuGetPackageDeprecationMetadataHelper : object {
    [CanBeNullAttribute]
public static PackageDeprecationMetadata GetPackageDeprecationMetadata(IPackageSearchMetadata metadata);
    public static string ExplainPackageDeprecationReasons(IReadOnlyCollection`1<string> reasons);
}
public enum JetBrains.ProjectModel.NuGet.PackageManagement.NuGetProjectType : Enum {
    public int value__;
    public static NuGetProjectType Unsupported;
    public static NuGetProjectType Unknown;
    public static NuGetProjectType PackagesConfig;
    public static NuGetProjectType UwpProjectJson;
    public static NuGetProjectType XProjProjectJson;
    public static NuGetProjectType CpsBasedPackageRefs;
    public static NuGetProjectType LegacyProjectSystemWithPackageRefs;
}
public static class JetBrains.ProjectModel.NuGet.PackageManagement.NuGetResolutionContextFactory : object {
    public static ResolutionContext Create(DependencyBehavior dependencyBehavior, bool includePrerelease, bool includeUnlisted, VersionConstraints versionConstraints);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.PackageManagement.NuGetSolutionManager : object {
    private IShellLocks myLocks;
    private ISolution mySolution;
    private INuGetProjectSystemProvider[] myProviders;
    [CompilerGeneratedAttribute]
private SimpleSignal <Invalidated>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsReady>k__BackingField;
    [CompilerGeneratedAttribute]
private INuGetProjectContext <NuGetProjectContext>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler SolutionOpening;
    [CompilerGeneratedAttribute]
private EventHandler SolutionOpened;
    [CompilerGeneratedAttribute]
private EventHandler SolutionClosing;
    [CompilerGeneratedAttribute]
private EventHandler SolutionClosed;
    [CompilerGeneratedAttribute]
private EventHandler`1<NuGetEventArgs`1<string>> AfterNuGetCacheUpdated;
    [CompilerGeneratedAttribute]
private EventHandler`1<NuGetProjectEventArgs> NuGetProjectAdded;
    [CompilerGeneratedAttribute]
private EventHandler`1<NuGetProjectEventArgs> NuGetProjectRemoved;
    [CompilerGeneratedAttribute]
private EventHandler`1<NuGetProjectEventArgs> NuGetProjectRenamed;
    [CompilerGeneratedAttribute]
private EventHandler`1<NuGetProjectEventArgs> NuGetProjectUpdated;
    [CompilerGeneratedAttribute]
private EventHandler`1<NuGetProjectEventArgs> AfterNuGetProjectRenamed;
    [CompilerGeneratedAttribute]
private EventHandler`1<ActionsExecutedEventArgs> ActionsExecuted;
    public VirtualFileSystemPath SolutionFilePath { get; }
    public string SolutionName { get; }
    public SimpleSignal Invalidated { get; }
    public IProperty`1<bool> IsReady { get; }
    public string SolutionDirectory { get; }
    public bool IsSolutionOpen { get; }
    public bool IsSolutionAvailable { get; }
    public INuGetProjectContext NuGetProjectContext { get; public set; }
    public bool IsSolutionBeingLoadedFromCache { get; }
    public NuGetSolutionManager(Lifetime lifetime, IShellLocks locks, ISolution solution, IEnumerable`1<INuGetProjectSystemProvider> providers);
    public sealed virtual VirtualFileSystemPath get_SolutionFilePath();
    public sealed virtual string get_SolutionName();
    [CompilerGeneratedAttribute]
public sealed virtual SimpleSignal get_Invalidated();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsReady();
    private void UpdateIsReady();
    public static bool IsValidNuGetProject(IProject project);
    public sealed virtual ICollection`1<IProject> GetAllValidNuGetProjects();
    private void AssertNotLoadingFromCache();
    public ICollection`1<IProject> GetAllValidIntegratedNuGetProjects();
    public sealed virtual NuGetProject GetNuGetProject(IProject project);
    public sealed virtual IProject GetRealProject(NuGetProject nuGetProject);
    public sealed virtual bool IsNuGetProject(IProject project);
    public bool IsNuGetIntegratedProject(IProject project);
    public sealed virtual bool IsNuGetPackagesConfigProject(IProject project);
    public sealed virtual IEnumerable`1<NuGetProject> GetNuGetProjects();
    public sealed virtual Task`1<IEnumerable`1<NuGetProject>> GetNuGetProjectsAsync();
    public string GetNuGetProjectSafeName(NuGetProject nuGetProject);
    public sealed virtual Task`1<string> GetNuGetProjectSafeNameAsync(NuGetProject nuGetProject);
    public NuGetProject GetNuGetProject(string nuGetProjectSafeName);
    public sealed virtual Task`1<NuGetProject> GetNuGetProjectAsync(string nuGetProjectSafeName);
    public sealed virtual void OnActionsExecuted(IEnumerable`1<ResolvedAction> actions);
    public sealed virtual Task`1<bool> DoesNuGetSupportsAnyProjectAsync();
    public sealed virtual string get_SolutionDirectory();
    public sealed virtual bool get_IsSolutionOpen();
    public bool get_IsSolutionAvailable();
    public sealed virtual Task`1<bool> IsSolutionAvailableAsync();
    [CompilerGeneratedAttribute]
public sealed virtual INuGetProjectContext get_NuGetProjectContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NuGetProjectContext(INuGetProjectContext value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SolutionOpening(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SolutionOpening(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SolutionOpened(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SolutionOpened(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SolutionClosing(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SolutionClosing(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SolutionClosed(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SolutionClosed(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_AfterNuGetCacheUpdated(EventHandler`1<NuGetEventArgs`1<string>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_AfterNuGetCacheUpdated(EventHandler`1<NuGetEventArgs`1<string>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_NuGetProjectAdded(EventHandler`1<NuGetProjectEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_NuGetProjectAdded(EventHandler`1<NuGetProjectEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_NuGetProjectRemoved(EventHandler`1<NuGetProjectEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_NuGetProjectRemoved(EventHandler`1<NuGetProjectEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_NuGetProjectRenamed(EventHandler`1<NuGetProjectEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_NuGetProjectRenamed(EventHandler`1<NuGetProjectEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_NuGetProjectUpdated(EventHandler`1<NuGetProjectEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_NuGetProjectUpdated(EventHandler`1<NuGetProjectEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_AfterNuGetProjectRenamed(EventHandler`1<NuGetProjectEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_AfterNuGetProjectRenamed(EventHandler`1<NuGetProjectEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ActionsExecuted(EventHandler`1<ActionsExecutedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ActionsExecuted(EventHandler`1<ActionsExecutedEventArgs> value);
    public sealed virtual void EnsureSolutionIsLoaded();
    public sealed virtual ICollection`1<IProject> GetAllProjects();
    public sealed virtual bool get_IsSolutionBeingLoadedFromCache();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.Packaging.NuGetContentFilesCache : object {
    private Lifetime myLifetime;
    private NuGetNupkgStorage myNupkgStorage;
    private NuGetPackageReferenceTracker myPackageReferenceTracker;
    private ISolution mySolution;
    private static string PackageContentFilesCacheDbName;
    private ILogger myLogger;
    private AsyncItemsProcessor`1<IEnumerable`1<PackageIdentity>> myContentFilesProcessor;
    private JetFastSemiReenterableRWLock myPackageContentFilesMapLock;
    private Lazy`1<OptimizedPersistentSortedMap`2<string, ICollection`1<RelativePath>>> myLazyPackageContentFilesMap;
    private OptimizedPersistentSortedMap`2<string, ICollection`1<RelativePath>> PackageContentFilesMap { get; }
    private NuGetContentFileStorage NuGetContentFileStorage { get; }
    public NuGetContentFilesCache(Lifetime lifetime, NuGetNupkgStorage nupkgStorage, NuGetPackageReferenceTracker packageReferenceTracker, IShellLocks locks, ISolution solution, ILogger logger, ISolutionCaches solutionCaches, SynchronizationPoints syncPoints);
    private OptimizedPersistentSortedMap`2<string, ICollection`1<RelativePath>> get_PackageContentFilesMap();
    private NuGetContentFileStorage get_NuGetContentFileStorage();
    [PublicAPIAttribute]
[NotNullAttribute]
public ICollection`1<RelativePath> GetContentFiles(PackageIdentity packageIdentity);
    private void ProcessContentFile(PackageIdentity packageIdentity);
    private void ProcessContentFiles(IEnumerable`1<PackageIdentity> ids);
    private static string GetContentFilesMapKey(PackageIdentity packageIdentity);
    private void SetupSubs();
    [CompilerGeneratedAttribute]
private void <SetupSubs>b__18_0(NuGetProjectWithReferences[] array);
    [CompilerGeneratedAttribute]
private void <SetupSubs>b__18_1(NuGetProjectWithReferences[] array);
    [CompilerGeneratedAttribute]
private void <SetupSubs>b__18_2(List`1<NuGetNupkg> nupkgs);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.Packaging.NuGetContentFileStorage : object {
    private static string CacheDbName;
    private static ICollection`1<RelativePath> ourEmptyValue;
    private ILogger myLogger;
    private IShellLocks myLocks;
    private ISolution mySolution;
    private NuGetPackageReferenceTracker myPackageReferenceTracker;
    private NuGetNupkgStorage myNupkgStorage;
    private NuGetSolutionManager mySolutionManager;
    private Lazy`1<OptimizedPersistentSortedMap`2<string, ICollection`1<RelativePath>>> myLazyContentMap;
    private AsyncItemsProcessor`1<IProject> myItemProcessor;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsBusy>k__BackingField;
    private OptimizedPersistentSortedMap`2<string, ICollection`1<RelativePath>> ContentMap { get; }
    public IProperty`1<bool> IsBusy { get; }
    public NuGetContentFileStorage(Lifetime lifetime, ILogger logger, IShellLocks locks, ISolution solution, ISolutionCaches solutionCaches, NuGetPackageReferenceTracker packageReferenceTracker, NuGetOperator nuGetOperator, NuGetNupkgStorage nupkgStorage, NuGetSolutionManager solutionManager, ISolutionLoadTasksScheduler scheduler, SynchronizationPoints syncPoints);
    private static NuGetContentFileStorage();
    private OptimizedPersistentSortedMap`2<string, ICollection`1<RelativePath>> get_ContentMap();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsBusy();
    [PublicAPIAttribute]
public void EnqueueUpdate(IProject project);
    [PublicAPIAttribute]
public void EnqueueUpdate(IEnumerable`1<IProject> projects, string reason);
    [PublicAPIAttribute]
public void EnqueueUpdateAll(string reason);
    private void UpdateProjectInternal(IProject project);
    private void SaveNewContentFiles(IProject project, string projectId, List`1<RelativePath> newContent);
    [PublicAPIAttribute]
[NotNullAttribute]
public ICollection`1<RelativePath> GetContentFiles(IProject project);
    [PublicAPIAttribute]
public sealed virtual void Dump(StreamWriter writer);
    [NotNullAttribute]
private static ICollection`1<RelativePath> CalculateChangeLocations(ICollection`1<RelativePath> oldContent, ICollection`1<RelativePath> newContentHashSet);
    [NotNullAttribute]
private static ICollection`1<ProjectModelChange> CalculateChange(IProject project, ICollection`1<RelativePath> changeLocations);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.Packaging.NuGetInstalledPackageChecker : object {
    private IShellLocks myLocks;
    private NuGetPackageReferenceTracker myPackageReferenceTracker;
    private NuGetLockFileTracker myLockFileTracker;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsBusy>k__BackingField;
    public IProperty`1<bool> IsBusy { get; }
    public NuGetInstalledPackageChecker(Lifetime lifetime, IShellLocks locks, NuGetPackageReferenceTracker packageReferenceTracker, NuGetLockFileTracker lockFileTracker);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsBusy();
    [PublicAPIAttribute]
[PureAttribute]
public bool IsPackageInstalled(IProject project, TargetFrameworkId targetFrameworkId, string packageId, string version);
    [PublicAPIAttribute]
[PureAttribute]
public bool IsPackageInstalled(IProject project, string packageId, string version);
    private bool HasRootDependency(IProject project, TargetFrameworkId targetFrameworkId, string packageId, string version);
    private bool HasRootDependency(IProject project, string packageId, string version);
    private bool HasTransitiveDependency(IProject project, TargetFrameworkId targetFrameworkId, string packageId, string version);
    private bool HasTransitiveDependency(IProject project, string packageId, string version);
    private static bool AreSame(string name1, NuGetVersion version1, string name2, string version2);
    private static bool AreSame(string name1, string version1, string name2, string version2);
}
public class JetBrains.ProjectModel.NuGet.Packaging.NuGetLegacyInstalledPackage : object {
    private IList`1<INugetReferenceSpec> myDependencySets;
    [CompilerGeneratedAttribute]
private NugetId <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <InstallPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasContentFiles>k__BackingField;
    public NugetId Id { get; }
    public string Version { get; }
    public VirtualFileSystemPath InstallPath { get; }
    public bool HasContentFiles { get; }
    public NuGetLegacyInstalledPackage(NuGetNupkg nupkg);
    [CompilerGeneratedAttribute]
public sealed virtual NugetId get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Version();
    public sealed virtual IEnumerable`1<INugetReferenceSpec> GetDependencySets();
    [CompilerGeneratedAttribute]
public sealed virtual VirtualFileSystemPath get_InstallPath();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasContentFiles();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ProjectModel.NuGet.Packaging.NuGetLegacyInstalledPackageNamesProvider : object {
    private ISolution mySolution;
    private NuGetPackageReferenceTracker myPackageReferenceTracker;
    private static Regex ourHasVersionCheck;
    public int Priority { get; }
    public NuGetLegacyInstalledPackageNamesProvider(ISolution solution, NuGetPackageReferenceTracker packageReferenceTracker);
    private static NuGetLegacyInstalledPackageNamesProvider();
    public sealed virtual int get_Priority();
    public sealed virtual IEnumerable`1<IProjectToPackageReference> GetPackagesReferences(IProject project);
    public sealed virtual IInstalledNugetPackage GetInstalledPackage(IProject project, NugetId id);
    public virtual IInstalledNugetPackage FindParentPackage(IProject project, IAssembly assembly);
    private ProjectToPackageReferenceImpl CreateReference(IProject project, PackageReference package);
    [CanBeNullAttribute]
private static TargetFrameworkId ConvertTargetFrameworkId(NuGetFramework nugetId);
    private static NuGetLegacyReferenceSpecImpl CreateReferenceSpec(PackageReference package);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.Packaging.NuGetLockFileTracker : object {
    private Lifetime myLifetime;
    private IShellLocks myLocks;
    private ILogger myLogger;
    private ISolution mySolution;
    private IFileSystemTracker myFileSystemTracker;
    private NuGetPackageUsageTracker myPackageUsageTracker;
    private NuGetSolutionManager myNuGetSolutionManager;
    private NuGetRestoreOutputPathResolver myRestoreOutputPathResolver;
    private AsyncItemsProcessor`1<IProject> myItemProcessor;
    private Dictionary`2<IProject, SequentialLifetimes> mySubscriptionLifetimes;
    private ConcurrentDictionary`2<IProject, VirtualFileSystemPath> myLockFilePathCache;
    private ConcurrentDictionary`2<IProject, NuGetLockFileInfo> myLockFileInfos;
    private NuGetTargetLibraryInterner myNuGetTargetLibraryInterner;
    private object mySync;
    private bool myIsSolutionLoaded;
    [CompilerGeneratedAttribute]
private SimpleSignal <Invalidated>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<bool> <InvalidateQueued>k__BackingField;
    [NotNullAttribute]
public IProperty`1<bool> IsIdle { get; }
    [NotNullAttribute]
public SimpleSignal Invalidated { get; }
    public Property`1<bool> InvalidateQueued { get; }
    public NuGetLockFileTracker(Lifetime lifetime, IShellLocks locks, ILogger logger, IViewableProjectsCollection projectsCollection, ChangeManager changeManager, ISolution solution, IFileSystemTracker fileSystemTracker, NuGetPackageUsageTracker packageUsageTracker, NuGetSolutionManager nuGetSolutionManager, ISolutionLoadTasksScheduler solutionLoadTasksScheduler, NuGetRestoreOutputPathResolver restoreOutputPathResolver);
    public IProperty`1<bool> get_IsIdle();
    [CompilerGeneratedAttribute]
public SimpleSignal get_Invalidated();
    [CompilerGeneratedAttribute]
public Property`1<bool> get_InvalidateQueued();
    public void InvalidateAll();
    private void SubscribeForProject(Lifetime lifetime, IProject project);
    private void ProcessChange(ProjectModelChange change);
    public void InvalidateProject(IProject project);
    private void InvalidateAssets(IProject project);
    [PublicAPIAttribute]
[PureAttribute]
[CanBeNullAttribute]
public NuGetLockFileInfo GetLockFileInfoForProject(IProject project);
    [PublicAPIAttribute]
[PureAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
public IEnumerable`1<PackageIdentity> GetAllTransitiveLibrariesInSolution();
    public sealed virtual void Dump(StreamWriter writer);
    private static bool AreEqual(NuGetLockFileInfo lockFileInfo1, NuGetLockFileInfo lockFileInfo2);
    [NotNullAttribute]
public VirtualFileSystemPath GetObjFolder(IProject project);
    [CompilerGeneratedAttribute]
private void <InvalidateAll>b__24_0();
}
public class JetBrains.ProjectModel.NuGet.Packaging.NuGetNupkg : object {
    public static IUnsafeMarshaller`1<NuGetNupkg> Marshaller;
    public static IUnsafeMarshaller`1<List`1<NuGetNupkg>> ListMarshaller;
    public static NuGetNupkg Empty;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <NupkgPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetNuspecLight <Nuspec>k__BackingField;
    [NotNullAttribute]
public VirtualFileSystemPath NupkgPath { get; }
    [NotNullAttribute]
public string Id { get; }
    [NotNullAttribute]
private NugetId JetBrains.ProjectModel.Assemblies.Interfaces.INugetPackageName.Id { get; }
    [NotNullAttribute]
public string Version { get; }
    [NotNullAttribute]
public NuGetNuspecLight Nuspec { get; }
    [NotNullAttribute]
public VirtualFileSystemPath InstallationDirectory { get; }
    [NotNullAttribute]
public PackageIdentity PackageIdentity { get; }
    [PublicAPIAttribute]
public bool Exists { get; }
    public NuGetNupkg(VirtualFileSystemPath nupkgPath, string id, string version, NuGetNuspecLight nuspec);
    private static NuGetNupkg();
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_NupkgPath();
    [CompilerGeneratedAttribute]
public string get_Id();
    private sealed virtual override NugetId JetBrains.ProjectModel.Assemblies.Interfaces.INugetPackageName.get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Version();
    [CompilerGeneratedAttribute]
public NuGetNuspecLight get_Nuspec();
    public VirtualFileSystemPath get_InstallationDirectory();
    public PackageIdentity get_PackageIdentity();
    public bool get_Exists();
    [NotNullAttribute]
[ItemNotNullAttribute]
public String[] ReadAllFiles(PackageSaveMode packageSaveMode);
    private static NuGetNupkg Unmarshal(UnsafeReader reader);
    private static void Marshal(UnsafeWriter writer, NuGetNupkg meta);
    public static NuGetNupkgWithIdentity ReadFromNupkg(VirtualFileSystemPath nupkgPath);
    [PublicAPIAttribute]
public sealed virtual void Dump(StreamWriter writer);
    public virtual string ToString();
    public sealed virtual bool Equals(NuGetNupkg other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.NuGet.Packaging.NuGetNupkgHelper : object {
    private static string ourPpExtension;
    private static String[] ourKnownFolderPrefixes;
    private static NuGetNupkgHelper();
    [NotNullAttribute]
[ItemNotNullAttribute]
public static String[] ReadAllFiles(VirtualFileSystemPath nupkgPath, PackageSaveMode packageSaveMode);
    [ExtensionAttribute]
public static IEnumerable`1<RelativePath> GetAllContentFiles(NuGetNupkg nupkg);
    private static IEnumerable`1<string> FilterContentFiles(ICollection`1<string> files);
    private static RelativePath GetEffectivePath(string filePath);
    private static FrameworkName ParseFrameworkNameFromFilePathXplat(string filePath, String& effectivePath);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.NuGet.Packaging.NuGetNupkgMetaStorageExtensions : object {
    [ExtensionAttribute]
[PublicAPIAttribute]
[PureAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
public static IEnumerable`1<NuGetNupkg> GetAllNupkgs(NuGetNupkgStorage storage, PackageIdentity packageIdentity);
    [ExtensionAttribute]
[PublicAPIAttribute]
[PureAttribute]
[CanBeNullAttribute]
public static NuGetNupkg GetNupkg(NuGetNupkgStorage storage, PackageIdentity packageIdentity);
    [ExtensionAttribute]
[PublicAPIAttribute]
[PureAttribute]
[NotNullAttribute]
public static IEnumerable`1<RelativePath> GetAllContentFiles(NuGetNupkgStorage storage, PackageIdentity packageIdentity);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.Packaging.NuGetNupkgStorage : object {
    private static string CacheDbName;
    private static string KnownPathsCacheDbName;
    private Lifetime myLifetime;
    private ILogger myLogger;
    private ISolution mySolution;
    private JetFastSemiReenterableRWLock myMapLock;
    private Lazy`1<OptimizedPersistentSortedMap`2<string, List`1<NuGetNupkg>>> myLazyMap;
    private Lazy`1<OptimizedPersistentSortedMap`2<VirtualFileSystemPath, string>> myLazyKnownPaths;
    private TimeSpan myTotalReadTime;
    private TimeSpan myMaxReadTime;
    private int myReadPackageCount;
    [CompilerGeneratedAttribute]
private Signal`1<List`1<NuGetNupkg>> <NupkgAdded>k__BackingField;
    [CompilerGeneratedAttribute]
private SimpleSignal <Invalidated>k__BackingField;
    private FreeThreadedGroupingEvent myInvalidatedGroupingEvent;
    private OptimizedPersistentSortedMap`2<string, List`1<NuGetNupkg>> Map { get; }
    private OptimizedPersistentSortedMap`2<VirtualFileSystemPath, string> KnownPaths { get; }
    [CanBeNullAttribute]
private NuGetContentFilesCache ContentFilesCache { get; }
    public Signal`1<List`1<NuGetNupkg>> NupkgAdded { get; }
    public SimpleSignal Invalidated { get; }
    [PublicAPIAttribute]
public int TotalPackageCount { get; }
    public NuGetNupkgStorage(Lifetime lifetime, ILogger logger, IShellLocks locks, ISolutionCaches solutionCaches, ISolution solution);
    private OptimizedPersistentSortedMap`2<string, List`1<NuGetNupkg>> get_Map();
    private OptimizedPersistentSortedMap`2<VirtualFileSystemPath, string> get_KnownPaths();
    private NuGetContentFilesCache get_ContentFilesCache();
    [CompilerGeneratedAttribute]
public Signal`1<List`1<NuGetNupkg>> get_NupkgAdded();
    [CompilerGeneratedAttribute]
public SimpleSignal get_Invalidated();
    public VirtualFileSystemPath GetNuPkgPathByAssemblyPath(VirtualFileSystemPath assemblyPath);
    [PublicAPIAttribute]
public NuGetNupkg ReadMetaFromNupkg(VirtualFileSystemPath nupkgPath);
    public void DeleteNupkgInfo(VirtualFileSystemPath nupkgPath);
    [PublicAPIAttribute]
[PureAttribute]
public bool HasInformation(VirtualFileSystemPath path);
    [PublicAPIAttribute]
[PureAttribute]
[CanBeNullAttribute]
public NuGetNupkg GetNupkgByPath(VirtualFileSystemPath path);
    [PublicAPIAttribute]
[PureAttribute]
[NotNullAttribute]
public IReadOnlyList`1<NuGetNupkg> GetAllNupkgsByName(string packageName);
    [PublicAPIAttribute]
[PureAttribute]
[NotNullAttribute]
public IReadOnlyList`1<NuGetNupkg> GetAllNupkgsByNameAndVersion(string packageName, string packageVersion);
    [PublicAPIAttribute]
[PureAttribute]
[NotNullAttribute]
public IReadOnlyList`1<VirtualFileSystemPath> GetAllNupkgPathsInFolder(VirtualFileSystemPath rootFolderPath);
    public int get_TotalPackageCount();
    [PublicAPIAttribute]
public sealed virtual void Dump(StreamWriter writer);
    private void Save(PackageIdentity packageIdentity, NuGetNupkg meta);
    [PureAttribute]
[NotNullAttribute]
private static string NormalizeVersion(string name);
    public IEnumerable`1<RelativePath> GetContentFiles(PackageIdentity packageIdentity);
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <GetNuPkgPathByAssemblyPath>g__QueryPackagePath|25_0(bool reverseOrder, <>c__DisplayClass25_0& );
    [CompilerGeneratedAttribute]
private int <get_TotalPackageCount>b__34_0();
}
public class JetBrains.ProjectModel.NuGet.Packaging.NuGetNupkgWithIdentity : object {
    [CompilerGeneratedAttribute]
private NuGetNupkg <Nupkg>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageIdentity <Identity>k__BackingField;
    public NuGetNupkg Nupkg { get; }
    public PackageIdentity Identity { get; }
    public NuGetNupkgWithIdentity(NuGetNupkg nupkg, PackageIdentity identity);
    [CompilerGeneratedAttribute]
public NuGetNupkg get_Nupkg();
    [CompilerGeneratedAttribute]
public PackageIdentity get_Identity();
    public void Deconstruct(NuGetNupkg& nupkg, PackageIdentity& identity);
}
public class JetBrains.ProjectModel.NuGet.Packaging.NuGetNuspecLight : object {
    public static IUnsafeMarshaller`1<NuGetNuspecLight> Marshaller;
    public static NuGetNuspecLight Empty;
    [ItemNotNullAttribute]
[NotNullAttribute]
public NuGetPackageDependencyGroupLight[] DependencyGroups;
    public NuGetNuspecLight(NuGetPackageDependencyGroupLight[] dependencyGroups);
    private static NuGetNuspecLight();
    private static NuGetNuspecLight Unmarshal(UnsafeReader reader);
    private static void Marshal(UnsafeWriter writer, NuGetNuspecLight nuspecLight);
    [PublicAPIAttribute]
[PureAttribute]
[NotNullAttribute]
public static NuGetNuspecLight Read(NuspecReader reader);
}
public class JetBrains.ProjectModel.NuGet.Packaging.NuGetPackageDependencyGroupLight : object {
    public static IUnsafeMarshaller`1<NuGetPackageDependencyGroupLight> Marshaller;
    public static IUnsafeMarshaller`1<NuGetPackageDependencyGroupLight[]> ArrayMarshaller;
    [CompilerGeneratedAttribute]
private string <NuGetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetPackageDependencyLight[] <Packages>k__BackingField;
    [NotNullAttribute]
public string NuGetFramework { get; }
    [NotNullAttribute]
public NuGetPackageDependencyLight[] Packages { get; }
    public NuGetPackageDependencyGroupLight(string nuGetFramework, NuGetPackageDependencyLight[] packages);
    internal NuGetPackageDependencyGroupLight(PackageDependencyGroup packageDependencyGroup);
    private static NuGetPackageDependencyGroupLight();
    [CompilerGeneratedAttribute]
public string get_NuGetFramework();
    [CompilerGeneratedAttribute]
public NuGetPackageDependencyLight[] get_Packages();
    private static NuGetPackageDependencyGroupLight Unmarshal(UnsafeReader reader);
    private static void Marshal(UnsafeWriter writer, NuGetPackageDependencyGroupLight value);
}
public class JetBrains.ProjectModel.NuGet.Packaging.NuGetPackageDependencyInfo : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionRange <VersionRange>k__BackingField;
    public string Id { get; }
    public VersionRange VersionRange { get; }
    public NuGetPackageDependencyInfo(string id, VersionRange versionRange);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public VersionRange get_VersionRange();
}
public class JetBrains.ProjectModel.NuGet.Packaging.NuGetPackageDependencyLight : object {
    public static IUnsafeMarshaller`1<NuGetPackageDependencyLight> Marshaller;
    public static IUnsafeMarshaller`1<NuGetPackageDependencyLight[]> ArrayMarshaller;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionRange>k__BackingField;
    [NotNullAttribute]
public string Id { get; }
    [NotNullAttribute]
public string VersionRange { get; }
    public NuGetPackageDependencyLight(string id, string versionRange);
    internal NuGetPackageDependencyLight(PackageDependency packageDependency);
    private static NuGetPackageDependencyLight();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_VersionRange();
    private static NuGetPackageDependencyLight Unmarshal(UnsafeReader reader);
    private static void Marshal(UnsafeWriter writer, NuGetPackageDependencyLight value);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.Packaging.NuGetPackageReferenceTracker : object {
    private PackageReferenceComparer myPackageReferenceComparer;
    private Lifetime myLifetime;
    private IShellLocks myLocks;
    private NuGetHost myHost;
    private INuGetSolutionManager mySolutionManager;
    private ILogger myLogger;
    private NuGetNupkgStorage myNupkgStorage;
    private NuGetPackageUsageTracker myPackageUsageTracker;
    private NuGetStatisticsService myNuGetStatisticsService;
    private NuGetOperatorEvents myEvents;
    private int myProcessors;
    private FreeThreadedGroupingEvent myProcessGroupingEvent;
    private FreeThreadedGroupingEvent myNotifyGroupingEvent;
    private SynchronizedSet`1<IProject> myProjectsToProcess;
    private SynchronizedSet`1<IProject> myProjectsToNotify;
    private SynchronizedSet`1<IProject> myProjectsWithChangesToNotify;
    private ConcurrentDictionary`2<IProject, PackageReference[]> myInstalledCache;
    private object myProcessingLocker;
    private bool myIsProcessing;
    [CompilerGeneratedAttribute]
private Property`1<bool> <InitialProcessingIsCompleted>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsBusy>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<NuGetProjectWithReferences[]> <ProjectsUpdated>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<NuGetProjectWithReferences[]> <ProjectsUpdatedWithChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<NuGetProjectWithReferences[]> <ProjectsUpdatedInitial>k__BackingField;
    public Property`1<bool> InitialProcessingIsCompleted { get; }
    public IProperty`1<bool> IsBusy { get; }
    public ISignal`1<NuGetProjectWithReferences[]> ProjectsUpdated { get; }
    public ISignal`1<NuGetProjectWithReferences[]> ProjectsUpdatedWithChanges { get; }
    public ISignal`1<NuGetProjectWithReferences[]> ProjectsUpdatedInitial { get; }
    public NuGetPackageReferenceTracker(Lifetime lifetime, IShellLocks locks, NuGetHost host, NuGetSolutionManager solutionManager, IFileSystemTracker fileSystemTracker, ILogger logger, NuGetOperator nuGetOperator, NuGetFolderManager folderManager, NuGetNupkgStorage nupkgStorage, IViewableProjectsCollection projectsCollection, NuGetPackageUsageTracker packageUsageTracker, ISolutionLoadTasksScheduler scheduler, NuGetStatisticsService nuGetStatisticsService, NuGetOperatorEvents events);
    [CompilerGeneratedAttribute]
public Property`1<bool> get_InitialProcessingIsCompleted();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsBusy();
    [CompilerGeneratedAttribute]
public ISignal`1<NuGetProjectWithReferences[]> get_ProjectsUpdated();
    [CompilerGeneratedAttribute]
public ISignal`1<NuGetProjectWithReferences[]> get_ProjectsUpdatedWithChanges();
    [CompilerGeneratedAttribute]
public ISignal`1<NuGetProjectWithReferences[]> get_ProjectsUpdatedInitial();
    private void ProcessAllAsync(bool initialBuildCache);
    private void NotifyAll();
    private void BeforeProcessing();
    private void AfterProcessing();
    [NotNullAttribute]
private NuGetProjectWithReferences[] ExtractNotificationData(SynchronizedSet`1<IProject> projectSet);
    [PublicAPIAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
public IEnumerable`1<PackageReference> GetInstalledPackages(IProject project);
    [PublicAPIAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
public IEnumerable`1<NuGetNupkg> GetAllNupkgCandidatesForProject(IProject project);
    [PublicAPIAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
public IEnumerable`1<NuGetNupkg> GetNupkgsForProject(IProject project);
    [PublicAPIAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
public String[] GetOrderedNamesOfPackagesFromProject(IProject project);
    [PublicAPIAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
public IEnumerable`1<PackageReference> GetAllInstalledPackages();
    [PublicAPIAttribute]
[NotNullAttribute]
public IEnumerable`1<IProject> GetProjectsWithPackage(string id);
    [PublicAPIAttribute]
[NotNullAttribute]
public IEnumerable`1<IProject> GetProjectsWithPackage(string id, string version);
    [PublicAPIAttribute]
[NotNullAttribute]
public IDictionary`2<IProject, String[]> GetOrderedNamesOfInstalledPackagesFromSolution();
    [PublicAPIAttribute]
public void EnqueueUpdate(IProject project, string reason);
    [PublicAPIAttribute]
public bool HasInstalledPackage(IProject project, string packageId);
    protected virtual bool ShouldUpdateProject(IProject project);
    [PublicAPIAttribute]
public void EnqueueUpdate(IEnumerable`1<IProject> projects, string reason);
    [PublicAPIAttribute]
public void EnqueueUpdateAll(string reason);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Packaging.NuGetPackageReferenceTracker/<GetNativeInstalledPackagesAsync>d__54")]
private Task`1<IEnumerable`1<PackageReference>> GetNativeInstalledPackagesAsync(NuGetProject nuGetProject);
    private void InvalidateIsBusy();
    public sealed virtual void Dump(StreamWriter writer);
    private bool AreEqual(PackageReference[] references1, PackageReference[] references2);
    [CompilerGeneratedAttribute]
internal static string <.ctor>g__Name|34_1(string s);
    [CompilerGeneratedAttribute]
private bool <ProcessAllAsync>b__36_0();
    [CompilerGeneratedAttribute]
private ProjectPair <ProcessAllAsync>b__36_1(IProject p);
    [CompilerGeneratedAttribute]
private IEnumerable`1<NuGetNupkg> <GetAllNupkgCandidatesForProject>b__42_0(PackageReference p);
    [CompilerGeneratedAttribute]
private NuGetNupkg <GetNupkgsForProject>b__43_0(PackageReference p);
}
public class JetBrains.ProjectModel.NuGet.Packaging.NuGetPackagesConfigWriter : PackagesConfigWriter {
    public NuGetPackagesConfigWriter(string fullPath, bool createNew, IFrameworkNameProvider frameworkMappings);
    public NuGetPackagesConfigWriter(Stream stream, bool createNew, IFrameworkNameProvider frameworkMappings);
    public virtual void AddPackageEntry(PackageReference entry);
    public virtual void UpdateOrAddPackageEntry(XDocument originalConfig, PackageReference newEntry);
    private static string GetPackageId(XElement packageNode);
    private void InsertPackageNode(XElement packageNode);
    private void InsertPackageNode(XElement packageNode, IReadOnlySet`1<string> packagesToSkip);
}
[SolutionComponentAttribute("18")]
public class JetBrains.ProjectModel.NuGet.Packaging.NuGetPackagesConfigWriterFactory : object {
}
[ShellComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.Packaging.NuGetPackageUsageTracker : object {
    private static string CacheDbName;
    private IShellLocks myLocks;
    private ILogger myLogger;
    private Lazy`1<OptimizedPersistentSortedMap`2<string, long>> myLazyMap;
    private OptimizedPersistentSortedMap`2<string, long> Map { get; }
    public NuGetPackageUsageTracker(Lifetime lifetime, IShellLocks locks, ILogger logger, ShellCaches shellCaches);
    private OptimizedPersistentSortedMap`2<string, long> get_Map();
    [PublicAPIAttribute]
public void Touch(PackageIdentity identity);
    [PublicAPIAttribute]
public void Touch(LockFileLibrary library);
    public void Touch(NuGetLockFileLibraryInfo libraryInfo);
    [PublicAPIAttribute]
[PureAttribute]
public Nullable`1<DateTimeOffset> GetLastUsageTimestamp(PackageIdentity identity);
    [PublicAPIAttribute]
[PureAttribute]
public Nullable`1<DateTimeOffset> GetLastUsageTimestamp(NuGetNupkg nupkg);
    private void Touch(string key);
    private Nullable`1<DateTimeOffset> GetLastUsageTimestamp(string key);
    public sealed virtual void Dump(StreamWriter writer);
    private static string GetKey(PackageIdentity identity);
    private static string GetKey(LockFileLibrary library);
    private static string GetKey(NuGetLockFileLibraryInfo libraryInfo);
    private static string GetKey(NuGetNupkg nupkg);
}
public class JetBrains.ProjectModel.NuGet.Packaging.NuGetProjectWithIdentity : object {
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageIdentity <PackageIdentity>k__BackingField;
    public IProject Project { get; }
    public PackageIdentity PackageIdentity { get; }
    public NuGetProjectWithIdentity(IProject project, PackageIdentity packageIdentity);
    [CompilerGeneratedAttribute]
public IProject get_Project();
    [CompilerGeneratedAttribute]
public PackageIdentity get_PackageIdentity();
}
public class JetBrains.ProjectModel.NuGet.Packaging.NuGetProjectWithLockFile : object {
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private LockFile <LockFile>k__BackingField;
    public IProject Project { get; }
    public LockFile LockFile { get; }
    public NuGetProjectWithLockFile(IProject project, LockFile lockFile);
    [CompilerGeneratedAttribute]
public IProject get_Project();
    [CompilerGeneratedAttribute]
public LockFile get_LockFile();
}
public class JetBrains.ProjectModel.NuGet.Packaging.NuGetProjectWithReferences : object {
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageReference[] <PackageReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIntegratedProject>k__BackingField;
    [NotNullAttribute]
public IProject Project { get; }
    [NotNullAttribute]
public PackageReference[] PackageReferences { get; }
    public bool IsIntegratedProject { get; }
    public NuGetProjectWithReferences(IProject project, PackageReference[] packageReferences, bool isIntegratedProject);
    [CompilerGeneratedAttribute]
public IProject get_Project();
    [CompilerGeneratedAttribute]
public PackageReference[] get_PackageReferences();
    [CompilerGeneratedAttribute]
public bool get_IsIntegratedProject();
    public bool HasReferenceById(string id);
}
public class JetBrains.ProjectModel.NuGet.Packaging.NuGetTargetLibraryInterner : object {
    private Dictionary`2<NameVersionPair, NuGetLockFileTargetLibraryInfo> myInfos;
    public NuGetLockFileTargetLibraryInfo Intern(NuGetLockFileTargetLibraryInfo info);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.NuGet.Packaging.PackageIdentityUtils : object {
    [ExtensionAttribute]
public static string ToStrict4SectionsVersionString(PackageIdentity identity);
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ProjectModel.NuGet.ProjectManagement.NuGetFileConflictResolver : object {
    public virtual FileConflictAction ShowFileConflictResolution(string message);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.NuGet.ProjectManagement.NuGetMsBuildProjectPropertiesRequest : object {
    public IEnumerable`1<string> RequestedProperties { get; }
    public sealed virtual IEnumerable`1<string> get_RequestedProperties();
}
public class JetBrains.ProjectModel.NuGet.ProjectManagement.NuGetProjectContext : object {
    private Lifetimed`1<NuGetProjectContextState> myLifetimedState;
    [CompilerGeneratedAttribute]
private ISourceControlManagerProvider <SourceControlManagerProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private XDocument <OriginalPackagesConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetActionType <ActionType>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <OperationId>k__BackingField;
    [CanBeNullAttribute]
private NuGetProjectContextState State { get; }
    public PackageExtractionContext PackageExtractionContext { get; public set; }
    public ISourceControlManagerProvider SourceControlManagerProvider { get; private set; }
    public ExecutionContext ExecutionContext { get; }
    public XDocument OriginalPackagesConfig { get; public set; }
    public NuGetActionType ActionType { get; public set; }
    public Guid OperationId { get; public set; }
    public NuGetProjectContext(Lifetime lifetime, NuGetHost host, NuGetOptionsProvider options, NuGetFileConflictResolver fileConflictResolver, ClientPolicyContext clientPolicyContext, NuGetCommonOperations commonOperations);
    private NuGetProjectContextState get_State();
    public void Log(INuGetLogMessage message);
    public sealed virtual void Log(ILogMessage message);
    [StringFormatMethodAttribute("message")]
public sealed virtual void Log(MessageLevel level, string message, Object[] args);
    public sealed virtual void ReportError(string message);
    public sealed virtual void ReportError(ILogMessage message);
    public sealed virtual FileConflictAction ResolveFileConflict(string message);
    public sealed virtual PackageExtractionContext get_PackageExtractionContext();
    public sealed virtual void set_PackageExtractionContext(PackageExtractionContext value);
    [CompilerGeneratedAttribute]
public sealed virtual ISourceControlManagerProvider get_SourceControlManagerProvider();
    [CompilerGeneratedAttribute]
private void set_SourceControlManagerProvider(ISourceControlManagerProvider value);
    public sealed virtual ExecutionContext get_ExecutionContext();
    [CompilerGeneratedAttribute]
public sealed virtual XDocument get_OriginalPackagesConfig();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OriginalPackagesConfig(XDocument value);
    [CompilerGeneratedAttribute]
public sealed virtual NuGetActionType get_ActionType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ActionType(NuGetActionType value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_OperationId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OperationId(Guid value);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.NuGet.ProjectManagement.NuGetProjectExtensions : object {
    [ExtensionAttribute]
public static string GetName(NuGetProject project);
}
public abstract class JetBrains.ProjectModel.NuGet.ProjectManagement.NuGetProjectServicesBase : object {
    private IProjectBuildProperties NuGet.ProjectManagement.INuGetProjectServices.BuildProperties { get; }
    private IProjectSystemCapabilities NuGet.ProjectManagement.INuGetProjectServices.Capabilities { get; }
    private IProjectSystemReferencesReader NuGet.ProjectManagement.INuGetProjectServices.ReferencesReader { get; }
    private IProjectSystemService NuGet.ProjectManagement.INuGetProjectServices.ProjectSystem { get; }
    private IProjectSystemReferencesService NuGet.ProjectManagement.INuGetProjectServices.References { get; }
    private IProjectScriptHostService NuGet.ProjectManagement.INuGetProjectServices.ScriptService { get; }
    public bool SupportsPackageReferences { get; }
    public bool NominatesOnSolutionLoad { get; }
    private sealed virtual override IProjectBuildProperties NuGet.ProjectManagement.INuGetProjectServices.get_BuildProperties();
    private sealed virtual override IProjectSystemCapabilities NuGet.ProjectManagement.INuGetProjectServices.get_Capabilities();
    private sealed virtual override IProjectSystemReferencesReader NuGet.ProjectManagement.INuGetProjectServices.get_ReferencesReader();
    private sealed virtual override IProjectSystemService NuGet.ProjectManagement.INuGetProjectServices.get_ProjectSystem();
    private sealed virtual override IProjectSystemReferencesService NuGet.ProjectManagement.INuGetProjectServices.get_References();
    private sealed virtual override IProjectScriptHostService NuGet.ProjectManagement.INuGetProjectServices.get_ScriptService();
    public virtual bool get_SupportsPackageReferences();
    public sealed virtual bool get_NominatesOnSolutionLoad();
    public virtual T GetGlobalService();
    public virtual string GetPropertyValue(string propertyName);
    public virtual Task`1<string> GetPropertyValueAsync(string propertyName);
    public virtual Task ExecutePackageScriptAsync(PackageIdentity packageIdentity, string packageInstallPath, string scriptRelativePath, INuGetProjectContext projectContext, bool throwOnFailure, CancellationToken token);
    public virtual Task`1<bool> ExecutePackageInitScriptAsync(PackageIdentity packageIdentity, string packageInstallPath, INuGetProjectContext projectContext, bool throwOnFailure, CancellationToken token);
    public virtual Task`1<IEnumerable`1<LibraryDependency>> GetPackageReferencesAsync(NuGetFramework targetFramework, CancellationToken token);
    public virtual Task`1<IEnumerable`1<ProjectRestoreReference>> GetProjectReferencesAsync(ILogger logger, CancellationToken token);
    public sealed virtual Task`1<IReadOnlyList`1<ValueTuple`2<string, String[]>>> GetItemsAsync(string itemTypeName, String[] metadataNames);
    public virtual Task AddOrUpdatePackageReferenceAsync(LibraryDependency packageReference, CancellationToken token);
    public virtual Task RemovePackageReferenceAsync(string packageName);
    public virtual Task SaveProjectAsync(CancellationToken token);
}
internal class JetBrains.ProjectModel.NuGet.ProjectManagement.NuGetSpecValidationStrings : object {
    public static string MissingRequiredProperty;
    public static string MissingRequiredPropertyForProjectType;
    public static string InvalidRestoreInput;
    public static string ErrorXprojNotAllowed;
    public static string PropertyNotAllowedForProjectType;
    public static string SpecValidationInvalidFramework;
    public static string SpecValidationNoFrameworks;
    public static string SpecValidationDuplicateFrameworks;
    public static string SpecValidationUAPSingleFramework;
    public static string PropertyNotAllowed;
}
public static class JetBrains.ProjectModel.NuGet.ProjectManagement.NuGetSpecValidationUtility : object {
    public static void ValidateProjectSpec(PackageSpec spec, NuGetVersion sdkVersion);
}
public class JetBrains.ProjectModel.NuGet.ProjectManagement.NuGetSpecValidationUtilityV3 : object {
    public static void ValidateProjectSpec(PackageSpec spec);
    private static void ValidateProjectSpecOther(PackageSpec spec, IEnumerable`1<string> files);
    private static void ValidateProjectSpecUAP(PackageSpec spec, IEnumerable`1<string> files);
    private static void ValidateFrameworks(PackageSpec spec, IEnumerable`1<string> files);
    private static void ValidateProjectSpecPackageReference(PackageSpec spec, IEnumerable`1<string> files);
    private static void ValidateProjectMSBuildMetadata(PackageSpec spec, IEnumerable`1<string> files);
    private static void ValidateToolSpec(PackageSpec spec, IEnumerable`1<string> files);
    private static void ValidateStandaloneSpec(PackageSpec spec, IEnumerable`1<string> files);
    private static void ValidateProjectMetadata(PackageSpec spec, IEnumerable`1<string> files);
    private static IEnumerable`1<LibraryDependency> GetAllDependencies(PackageSpec spec);
}
public interface JetBrains.ProjectModel.NuGet.ProjectManagement.ProjectSystems.INuGetNetCorePackageReferenceProject {
    [CanBeNullAttribute]
public abstract virtual PackageSpec GetPackageSpec();
    public abstract virtual Task`1<string> GetAssetsFilePathOrNullAsync();
}
public interface JetBrains.ProjectModel.NuGet.ProjectManagement.ProjectSystems.INuGetProjectSystemProvider {
    public int Priority { get; }
    public SimpleSignal Invalidated { get; }
    public IProperty`1<bool> IsReady { get; }
    public abstract virtual int get_Priority();
    public abstract virtual SimpleSignal get_Invalidated();
    public abstract virtual IProperty`1<bool> get_IsReady();
    public abstract virtual bool IsValid(IProject project);
    [CanBeNullAttribute]
public abstract virtual NuGetProject Create(IProject project);
}
public interface JetBrains.ProjectModel.NuGet.ProjectManagement.ProjectSystems.INuGetProjectWithFloatVersions {
    public abstract virtual Task`1<IEnumerable`1<PackageReference>> GetResolvedInstalledPackagesAsync(CancellationToken token);
}
public abstract class JetBrains.ProjectModel.NuGet.ProjectManagement.ProjectSystems.NuGetNetCorePackageReferenceProjectBase : BuildIntegratedNuGetProject {
    private IProject myProject;
    private NuGetRestoreOutputPathResolver myRestoreOutputPathResolver;
    public string MSBuildProjectPath { get; }
    public string ProjectName { get; }
    public NuGetProjectType ProjectType { get; }
    public NuGetNetCorePackageReferenceProjectBase(IProject project, NuGetRestoreOutputPathResolver restoreOutputPathResolver);
    public virtual Task`1<string> GetAssetsFilePathAsync();
    public virtual Task`1<string> GetAssetsFilePathOrNullAsync();
    public virtual Task AddFileToProjectAsync(string filePath);
    public virtual string get_MSBuildProjectPath();
    public virtual string get_ProjectName();
    public virtual NuGetProjectType get_ProjectType();
}
public class JetBrains.ProjectModel.NuGet.ProjectManagement.ProjectSystems.NuGetWebSiteProject : PackagesConfigNuGetProject {
    public NuGetWebSiteProject(IProject project);
    private static Dictionary`2<string, object> BuildMetadata(IProject project);
    private static string GetRootPath(IProject project);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.ProjectManagement.ProjectSystems.NuGetWebSiteProjectProvider : object {
    [CompilerGeneratedAttribute]
private SimpleSignal <Invalidated>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsReady>k__BackingField;
    public int Priority { get; }
    public SimpleSignal Invalidated { get; }
    public IProperty`1<bool> IsReady { get; }
    public NuGetWebSiteProjectProvider(Lifetime lifetime);
    public sealed virtual int get_Priority();
    [CompilerGeneratedAttribute]
public sealed virtual SimpleSignal get_Invalidated();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsReady();
    public sealed virtual bool IsValid(IProject project);
    public virtual NuGetProject Create(IProject project);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.NuGet.ProjectModel.LockFileExtensions : object {
    [ExtensionAttribute]
public static NuGetLockFileInfo ToNuGetInfo(LockFile lockFile, NuGetTargetLibraryInterner nuGetTargetLibraryInterner);
    [ExtensionAttribute]
public static NuGetLockFileLibraryInfo ToNuGetInfo(LockFileLibrary library);
    [ExtensionAttribute]
public static NuGetLockFileTargetLibraryInfo ToNuGetInfo(LockFileTargetLibrary targetLibrary, NuGetTargetLibraryInterner nuGetTargetLibraryInterner);
    [ExtensionAttribute]
public static NuGetLockFileTargetInfo ToNuGetInfo(LockFileTarget target, NuGetTargetLibraryInterner nuGetTargetLibraryInterner);
    [ExtensionAttribute]
public static NuGetPackageDependencyInfo ToNuGetInfo(PackageDependency dependency);
    [ExtensionAttribute]
public static PackageIdentity ToPackageIdentity(LockFileTargetLibrary library);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.NuGet.ProjectModel.ManagePackageVersionCentrallyPropertyRequest : object {
    public static string ManagePackageVersionCentrally;
    public IEnumerable`1<string> RequestedProperties { get; }
    public sealed virtual IEnumerable`1<string> get_RequestedProperties();
}
public class JetBrains.ProjectModel.NuGet.ProjectModel.NuGetDependencyGraph : object {
    private static ILogger ourLog;
    private static NuGetDependencyGraph();
    [NotNullAttribute]
public static DirectedGraph`1<NuGetGraphNode> CreateDependencyGraphs(IProject project, TargetFrameworkId targetFramework);
    public static DirectedGraph`1<NuGetGraphNode> BuildPackagesConfig(IProject project);
    public static DirectedGraph`1<NuGetGraphNode> BuildDotnetCore(IProject project, TargetFrameworkId targetFrameworkId);
    private static NuGetLockFileTargetInfo FindBestTarget(NuGetLockFileInfo lockFileInfo, TargetFrameworkId targetFrameworkId);
}
public class JetBrains.ProjectModel.NuGet.ProjectModel.NuGetGraphNode : UserDataHolder {
    [CompilerGeneratedAttribute]
private NuGetVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private INugetPackageName <Package>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <RootPackage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SDK>k__BackingField;
    public NugetId Id { get; }
    [CanBeNullAttribute]
public NuGetVersion Version { get; }
    public INugetPackageName Package { get; }
    public Nullable`1<bool> RootPackage { get; public set; }
    public bool SDK { get; }
    public NuGetGraphNode(INugetPackageName package, NuGetVersion version, Nullable`1<bool> rootPackage, bool sdk);
    public NugetId get_Id();
    [CompilerGeneratedAttribute]
public NuGetVersion get_Version();
    [CompilerGeneratedAttribute]
public INugetPackageName get_Package();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_RootPackage();
    [CompilerGeneratedAttribute]
public void set_RootPackage(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_SDK();
    protected bool Equals(NuGetGraphNode other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ProjectModel.NuGet.ProjectModel.NuGetImplicitPackageIdentity : object {
    [CompilerGeneratedAttribute]
private PackageIdentity <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private JetHashSet`1<PackageIdentity> <Origins>k__BackingField;
    [NotNullAttribute]
public PackageIdentity Identity { get; }
    [NotNullAttribute]
public JetHashSet`1<PackageIdentity> Origins { get; }
    public NuGetImplicitPackageIdentity(PackageIdentity identity, JetHashSet`1<PackageIdentity> origins);
    [CompilerGeneratedAttribute]
public PackageIdentity get_Identity();
    [CompilerGeneratedAttribute]
public JetHashSet`1<PackageIdentity> get_Origins();
    public virtual string ToString();
}
public class JetBrains.ProjectModel.NuGet.ProjectModel.NuGetLockFileInfo : object {
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private JetHashSet`1<NuGetLockFileLibraryInfo> <Libraries>k__BackingField;
    [CompilerGeneratedAttribute]
private JetHashSet`1<NuGetLockFileTargetInfo> <Targets>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<NuGetLockFileTargetReverseDependencies> <TargetReverseDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <Path>k__BackingField;
    public int Version { get; }
    public JetHashSet`1<NuGetLockFileLibraryInfo> Libraries { get; }
    public JetHashSet`1<NuGetLockFileTargetInfo> Targets { get; }
    [NotNullAttribute]
public List`1<NuGetLockFileTargetReverseDependencies> TargetReverseDependencies { get; }
    public VirtualFileSystemPath Path { get; }
    public NuGetLockFileInfo(IEnumerable`1<NuGetLockFileLibraryInfo> libraries, IEnumerable`1<NuGetLockFileTargetInfo> targets, List`1<NuGetLockFileTargetReverseDependencies> targetReverseDependencies, int version, VirtualFileSystemPath path);
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
public JetHashSet`1<NuGetLockFileLibraryInfo> get_Libraries();
    [CompilerGeneratedAttribute]
public JetHashSet`1<NuGetLockFileTargetInfo> get_Targets();
    [CompilerGeneratedAttribute]
public List`1<NuGetLockFileTargetReverseDependencies> get_TargetReverseDependencies();
    [NotNullAttribute]
public List`1<NuGetImplicitPackageIdentity> GetJoinedReverseDependencies();
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_Path();
    public bool Equals(NuGetLockFileInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ProjectModel.NuGet.ProjectModel.NuGetLockFileLibraryInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetVersion <Version>k__BackingField;
    public string Name { get; }
    public NuGetVersion Version { get; }
    public NuGetLockFileLibraryInfo(string name, NuGetVersion version);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public NuGetVersion get_Version();
    public bool Equals(NuGetLockFileLibraryInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NotNullAttribute]
public PackageIdentity ToPackageIdentity();
}
public class JetBrains.ProjectModel.NuGet.ProjectModel.NuGetLockFileTargetInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetFramework <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<NuGetLockFileTargetLibraryInfo> <Libraries>k__BackingField;
    public string Name { get; }
    public NuGetFramework TargetFramework { get; }
    public List`1<NuGetLockFileTargetLibraryInfo> Libraries { get; }
    public NuGetLockFileTargetInfo(List`1<NuGetLockFileTargetLibraryInfo> libraries, string name, NuGetFramework targetFramework);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public NuGetFramework get_TargetFramework();
    [CompilerGeneratedAttribute]
public List`1<NuGetLockFileTargetLibraryInfo> get_Libraries();
    public bool Equals(NuGetLockFileTargetInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ProjectModel.NuGet.ProjectModel.NuGetLockFileTargetLibraryInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<NuGetPackageDependencyInfo> <Dependencies>k__BackingField;
    public string Name { get; }
    public NuGetVersion Version { get; }
    public List`1<NuGetPackageDependencyInfo> Dependencies { get; }
    public NuGetLockFileTargetLibraryInfo(string name, NuGetVersion version, List`1<NuGetPackageDependencyInfo> dependencies);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public NuGetVersion get_Version();
    [CompilerGeneratedAttribute]
public List`1<NuGetPackageDependencyInfo> get_Dependencies();
    [NotNullAttribute]
public PackageIdentity ToPackageIdentity();
}
public class JetBrains.ProjectModel.NuGet.ProjectModel.NuGetLockFileTargetReverseDependencies : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetFramework <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<PackageIdentity, List`1<PackageIdentity>> <ReverseDependencies>k__BackingField;
    public string Name { get; }
    public NuGetFramework TargetFramework { get; }
    public Dictionary`2<PackageIdentity, List`1<PackageIdentity>> ReverseDependencies { get; }
    public NuGetLockFileTargetReverseDependencies(PackageSpec packageSpec, LockFileTarget lockFileTarget);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public NuGetFramework get_TargetFramework();
    [CompilerGeneratedAttribute]
public Dictionary`2<PackageIdentity, List`1<PackageIdentity>> get_ReverseDependencies();
    [NotNullAttribute]
public static Dictionary`2<PackageIdentity, List`1<PackageIdentity>> BuildReverseDependencies(PackageSpec packageSpec, IList`1<LockFileTargetLibrary> libraries, NuGetFramework targetFramework);
    public sealed virtual bool Equals(NuGetLockFileTargetReverseDependencies other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ShellComponentAttribute("18")]
public class JetBrains.ProjectModel.NuGet.Protocol.NuGetResourceProviderFactory : NuGetCertificatePatcher {
    public NuGetResourceProviderFactory(ILogger logger, ShellCertificateManager certificateManager);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.NuGet.Protocol.NuGetSourceCacheContextProvider : object {
    private Nullable`1<DateTimeOffset> myMaxAge;
    private DateTimeOffset GetEffectiveMaxAge();
    public void Invalidate();
    public SourceCacheContext Create(bool noCache);
}
public class JetBrains.ProjectModel.NuGet.Protocol.NuGetSourceRepositoryProvider : object {
    private SourceRepositoryProvider myInternalProvider;
    public IPackageSourceProvider PackageSourceProvider { get; }
    public NuGetSourceRepositoryProvider(NuGetResourceProviderFactory resourceProviderFactory, ISettings settings);
    public sealed virtual IEnumerable`1<SourceRepository> GetRepositories();
    public sealed virtual SourceRepository CreateRepository(PackageSource source);
    public sealed virtual SourceRepository CreateRepository(PackageSource source, FeedType type);
    public sealed virtual IPackageSourceProvider get_PackageSourceProvider();
}
public enum JetBrains.ProjectModel.NuGet.PsiSearching.NuGetLookupMode : Enum {
    public int value__;
    public static NuGetLookupMode TypeName;
    public static NuGetLookupMode NamespaceName;
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.NuGet.PsiSearching.NuGetLookupModeExtensions : object {
    [ExtensionAttribute]
public static string ToSmartSearchTerm(NuGetLookupMode mode, string searchTerm);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.ProjectModel.Resources.Strings", "SettingsForNuGetBrowserSettingDescription")]
public class JetBrains.ProjectModel.NuGet.PsiSearching.Options.NuGetSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "NuGetBrowserSearchServiceUrlSettingDescription")]
public string SearchServiceUrl;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "InstallationSourceSettingDescription")]
public string InstallationSource;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "NuGetBrowserSearchServiceUrlForTestsSettingDescription")]
public string SearchTestServiceUrl;
}
[UsedImplicitlyAttribute("3")]
public class JetBrains.ProjectModel.NuGet.PsiSearching.Results.BrowseResult : object {
    [CompilerGeneratedAttribute]
private string <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Namespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <TypeNames>k__BackingField;
    [NotNullAttribute]
public string Parent { get; private set; }
    [NotNullAttribute]
public List`1<string> Namespaces { get; private set; }
    [NotNullAttribute]
public List`1<string> TypeNames { get; private set; }
    public BrowseResult(string parent);
    [CompilerGeneratedAttribute]
public string get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Namespaces();
    [CompilerGeneratedAttribute]
private void set_Namespaces(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_TypeNames();
    [CompilerGeneratedAttribute]
private void set_TypeNames(List`1<string> value);
}
[UsedImplicitlyAttribute("3")]
public class JetBrains.ProjectModel.NuGet.PsiSearching.Results.MatchResult : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Assemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Platforms>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TypeName> <TypeNames>k__BackingField;
    [NotNullAttribute]
public IEnumerable`1<string> Assemblies { get; public set; }
    [NotNullAttribute]
public IEnumerable`1<string> Platforms { get; public set; }
    [JsonPropertyAttribute]
[CanBeNullAttribute]
public IEnumerable`1<TypeName> TypeNames { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Assemblies();
    [CompilerGeneratedAttribute]
public void set_Assemblies(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Platforms();
    [CompilerGeneratedAttribute]
public void set_Platforms(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<TypeName> get_TypeNames();
    [CompilerGeneratedAttribute]
public void set_TypeNames(IEnumerable`1<TypeName> value);
}
[UsedImplicitlyAttribute("3")]
public class JetBrains.ProjectModel.NuGet.PsiSearching.Results.PackageDependency : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [NotNullAttribute]
public string Id { get; public set; }
    [JsonPropertyAttribute]
[CanBeNullAttribute]
public string Version { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    public virtual string ToString();
    [NotNullAttribute]
public static PackageDependency FromString(string value);
    [CanBeNullAttribute]
public static PackageDependency[] FromMergedString(string value);
}
[UsedImplicitlyAttribute("3")]
public class JetBrains.ProjectModel.NuGet.PsiSearching.Results.PackageResult : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VersionId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPrerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Published>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLastRelease>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLastPrerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Downloads>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Copyright>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Authors>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageDependency[] <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private MatchResult <Match>k__BackingField;
    public string Id { get; public set; }
    public string Version { get; public set; }
    public int VersionId { get; public set; }
    public bool IsPrerelease { get; public set; }
    public DateTime Published { get; public set; }
    public bool IsLastRelease { get; public set; }
    public bool IsLastPrerelease { get; public set; }
    [JsonPropertyAttribute]
[CanBeNullAttribute]
public string Title { get; public set; }
    [JsonPropertyAttribute]
[CanBeNullAttribute]
public string Summary { get; public set; }
    [JsonPropertyAttribute]
[CanBeNullAttribute]
public string Description { get; public set; }
    public int Downloads { get; public set; }
    [JsonPropertyAttribute]
[CanBeNullAttribute]
public string Copyright { get; public set; }
    public string Authors { get; public set; }
    public String[] Tags { get; public set; }
    [JsonPropertyAttribute]
[CanBeNullAttribute]
public string ProjectUrl { get; public set; }
    [JsonPropertyAttribute]
[CanBeNullAttribute]
public string IconUrl { get; public set; }
    [JsonPropertyAttribute]
[CanBeNullAttribute]
public string LicenseUrl { get; public set; }
    [JsonPropertyAttribute]
[CanBeNullAttribute]
public PackageDependency[] Dependencies { get; public set; }
    public MatchResult Match { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public int get_VersionId();
    [CompilerGeneratedAttribute]
public void set_VersionId(int value);
    [CompilerGeneratedAttribute]
public bool get_IsPrerelease();
    [CompilerGeneratedAttribute]
public void set_IsPrerelease(bool value);
    [CompilerGeneratedAttribute]
public DateTime get_Published();
    [CompilerGeneratedAttribute]
public void set_Published(DateTime value);
    [CompilerGeneratedAttribute]
public bool get_IsLastRelease();
    [CompilerGeneratedAttribute]
public void set_IsLastRelease(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsLastPrerelease();
    [CompilerGeneratedAttribute]
public void set_IsLastPrerelease(bool value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Summary();
    [CompilerGeneratedAttribute]
public void set_Summary(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public int get_Downloads();
    [CompilerGeneratedAttribute]
public void set_Downloads(int value);
    [CompilerGeneratedAttribute]
public string get_Copyright();
    [CompilerGeneratedAttribute]
public void set_Copyright(string value);
    [CompilerGeneratedAttribute]
public string get_Authors();
    [CompilerGeneratedAttribute]
public void set_Authors(string value);
    [CompilerGeneratedAttribute]
public String[] get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(String[] value);
    [CompilerGeneratedAttribute]
public string get_ProjectUrl();
    [CompilerGeneratedAttribute]
public void set_ProjectUrl(string value);
    [CompilerGeneratedAttribute]
public string get_IconUrl();
    [CompilerGeneratedAttribute]
public void set_IconUrl(string value);
    [CompilerGeneratedAttribute]
public string get_LicenseUrl();
    [CompilerGeneratedAttribute]
public void set_LicenseUrl(string value);
    [CompilerGeneratedAttribute]
public PackageDependency[] get_Dependencies();
    [CompilerGeneratedAttribute]
public void set_Dependencies(PackageDependency[] value);
    [CompilerGeneratedAttribute]
public MatchResult get_Match();
    [CompilerGeneratedAttribute]
public void set_Match(MatchResult value);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.NuGet.PsiSearching.Results.PackageResultUtil : object {
    private static Regex ourCleanRegexForRn;
    private static Regex ourCleanRegexForN;
    private static PackageResultUtil();
    [ExtensionAttribute]
public static RichText GetFullDescription(PackageResult packageResult);
    [ExtensionAttribute]
public static RichText GetShortDescription(PackageResult packageResult);
    [ExtensionAttribute]
public static string GetTitle(PackageResult packageResult);
    [NotNullAttribute]
private static string GetCleanText(string intput);
    [NotNullAttribute]
private static string SafeText(string text, string fallback);
}
[UsedImplicitlyAttribute("3")]
public class JetBrains.ProjectModel.NuGet.PsiSearching.Results.SearchQueryResult : object {
    [CompilerGeneratedAttribute]
private int <PageIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalResults>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalPages>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NuGetRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<PackageResult> <Packages>k__BackingField;
    public int PageIndex { get; public set; }
    public int PageSize { get; public set; }
    public int TotalResults { get; public set; }
    public int TotalPages { get; public set; }
    public string NuGetRoot { get; public set; }
    [NotNullAttribute]
public List`1<PackageResult> Packages { get; private set; }
    [CompilerGeneratedAttribute]
public int get_PageIndex();
    [CompilerGeneratedAttribute]
public void set_PageIndex(int value);
    [CompilerGeneratedAttribute]
public int get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(int value);
    [CompilerGeneratedAttribute]
public int get_TotalResults();
    [CompilerGeneratedAttribute]
public void set_TotalResults(int value);
    [CompilerGeneratedAttribute]
public int get_TotalPages();
    [CompilerGeneratedAttribute]
public void set_TotalPages(int value);
    [CompilerGeneratedAttribute]
public string get_NuGetRoot();
    [CompilerGeneratedAttribute]
public void set_NuGetRoot(string value);
    [CompilerGeneratedAttribute]
public List`1<PackageResult> get_Packages();
    [CompilerGeneratedAttribute]
private void set_Packages(List`1<PackageResult> value);
}
[UsedImplicitlyAttribute("3")]
public class JetBrains.ProjectModel.NuGet.PsiSearching.Results.TypeName : object {
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Parameters>k__BackingField;
    public string Namespace { get; public set; }
    public string Name { get; public set; }
    public string Parameters { get; public set; }
    public TypeName(string ns, string name, string parameters);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(string value);
    private bool Equals(TypeName other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface JetBrains.ProjectModel.NuGet.PsiSearching.Services.ILifetimeHolder {
    [NotNullAttribute]
public Lifetime Lifetime { get; }
    public abstract virtual Lifetime get_Lifetime();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.PsiSearching.Services.NugetSearchService : NugetServiceBase`3<SearchQueryParams, SearchServiceInvocationResult, SearchQueryResult> {
    public NugetSearchService(SearchUrlProvider searchUrlProvider, IThreading threading, WebProxySettingsReader webProxySettingsReader);
    protected virtual Uri GetQueryUri(SearchQueryParams searchQueryParams);
    protected virtual SearchServiceInvocationResult GetResultOnSucceded(SearchQueryParams queryParams, SearchQueryResult requestResult);
    protected virtual SearchServiceInvocationResult GetResultOnFailed(SearchQueryParams queryParams, string message);
}
public abstract class JetBrains.ProjectModel.NuGet.PsiSearching.Services.NugetServiceBase`3 : object {
    private IThreading myThreading;
    private WebProxySettingsReader myWebProxySettingsReader;
    [CompilerGeneratedAttribute]
private SearchUrlProvider <SearchUrlProvider>k__BackingField;
    protected SearchUrlProvider SearchUrlProvider { get; }
    protected NugetServiceBase`3(SearchUrlProvider searchUrlProvider, IThreading threading, WebProxySettingsReader webProxySettingsReader);
    [CompilerGeneratedAttribute]
protected SearchUrlProvider get_SearchUrlProvider();
    public void StartQuery(TQuery queryParams, Action`1<TResult> callback);
    protected abstract virtual Uri GetQueryUri(TQuery queryParams);
    [NotNullAttribute]
protected abstract virtual TResult GetResultOnSucceded(TQuery queryParams, TRequestResult requestResult);
    [NotNullAttribute]
protected abstract virtual TResult GetResultOnFailed(TQuery queryParams, string message);
    private TRequestResult Deserialize(Stream stream);
}
public class JetBrains.ProjectModel.NuGet.PsiSearching.Services.SearchQueryParams : object {
    [CompilerGeneratedAttribute]
private NuGetLookupMode <LookupMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowPrerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaseSensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AnyVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SearchQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PageIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    public NuGetLookupMode LookupMode { get; }
    public bool AllowPrerelease { get; }
    public bool CaseSensitive { get; }
    public bool AnyVersion { get; }
    public string SearchQuery { get; }
    public int PageIndex { get; }
    public Lifetime Lifetime { get; }
    public SearchQueryParams(Lifetime lifetime, NuGetLookupMode lookupMode, bool allowPrerelease, bool caseSensitive, bool anyVersion, string searchQuery, int pageIndex);
    [CompilerGeneratedAttribute]
public NuGetLookupMode get_LookupMode();
    [CompilerGeneratedAttribute]
public bool get_AllowPrerelease();
    [CompilerGeneratedAttribute]
public bool get_CaseSensitive();
    [CompilerGeneratedAttribute]
public bool get_AnyVersion();
    [CompilerGeneratedAttribute]
public string get_SearchQuery();
    [CompilerGeneratedAttribute]
public int get_PageIndex();
    [CompilerGeneratedAttribute]
public sealed virtual Lifetime get_Lifetime();
    public sealed virtual bool Equals(SearchQueryParams other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ProjectModel.NuGet.PsiSearching.Services.SearchServiceInvocationResult : object {
    [CompilerGeneratedAttribute]
private bool <IsSucceded>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionText>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchQueryResult <ResultOnSucceded>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchQueryParams <SearchQueryParams>k__BackingField;
    public bool IsSucceded { get; }
    [CanBeNullAttribute]
public string ExceptionText { get; }
    [CanBeNullAttribute]
public SearchQueryResult ResultOnSucceded { get; }
    [NotNullAttribute]
public SearchQueryParams SearchQueryParams { get; }
    public SearchServiceInvocationResult(bool isSucceded, string exceptionText, SearchQueryResult resultOnSucceded, SearchQueryParams searchQueryParams);
    [CompilerGeneratedAttribute]
public bool get_IsSucceded();
    [CompilerGeneratedAttribute]
public string get_ExceptionText();
    [CompilerGeneratedAttribute]
public SearchQueryResult get_ResultOnSucceded();
    [CompilerGeneratedAttribute]
public SearchQueryParams get_SearchQueryParams();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.PsiSearching.Services.SearchUrlProvider : object {
    [NotNullAttribute]
private IProperty`1<string> mySearchServiceUrlProperty;
    [NotNullAttribute]
private IProperty`1<string> mySearchTestServiceUrlProperty;
    public SearchUrlProvider(Lifetime lifetime, ISettingsStore settingsStore);
    public string GetSearchServiceUrl();
}
public interface JetBrains.ProjectModel.NuGet.Restoring.INugetRestoreWaiter {
    public bool ShouldSleep { get; }
    public abstract virtual bool get_ShouldSleep();
}
public class JetBrains.ProjectModel.NuGet.Restoring.NuGetDependencyGraphSpecRequestProviderV3 : object {
    private static bool DefaultRestoreLegacyPackagesDirectory;
    private DependencyGraphSpec myDgFile;
    private RestoreCommandProvidersCache myProviderCache;
    public NuGetDependencyGraphSpecRequestProviderV3(RestoreCommandProvidersCache providerCache, DependencyGraphSpec dgFile);
    public sealed virtual Task`1<IReadOnlyList`1<RestoreSummaryRequest>> CreateRequests(RestoreArgs restoreContext);
    private IReadOnlyList`1<RestoreSummaryRequest> GetRequestsFromItems(RestoreArgs restoreContext, DependencyGraphSpec dgFile);
    private static ExternalProjectReference GetExternalProject(PackageSpec rootProject);
    private RestoreSummaryRequest Create(string projectNameToRestore, ExternalProjectReference project, HashSet`1<ExternalProjectReference> projectReferenceClosure, RestoreArgs restoreArgs, DependencyGraphSpec projectDgSpec);
    private static string GetPackagesPath(RestoreArgs restoreArgs, PackageSpec project);
}
public enum JetBrains.ProjectModel.NuGet.Restoring.NuGetPackageReferenceRestoreResult : Enum {
    public int value__;
    public static NuGetPackageReferenceRestoreResult AlreadyRestored;
    public static NuGetPackageReferenceRestoreResult Complete;
    public static NuGetPackageReferenceRestoreResult Error;
}
[DefaultMemberAttribute("Item")]
internal class JetBrains.ProjectModel.NuGet.Searching.Fetching.Cache.BriefMap : object {
    private static string CacheDbName;
    private object mySync;
    private Lazy`1<OptimizedPersistentSortedMap`2<string, NuGetBriefMetadata>> myLazyMap;
    private IUnsafeMarshaller`1<NuGetBriefMetadata> myMarshaller;
    private Lifetime myLifetime;
    private OptimizedPersistentSortedMap`2<string, NuGetBriefMetadata> Map { get; }
    public NuGetBriefMetadata Item { get; public set; }
    public BriefMap(Lifetime lifetime, ShellCaches shellCaches);
    private OptimizedPersistentSortedMap`2<string, NuGetBriefMetadata> get_Map();
    [CanBeNullAttribute]
public NuGetBriefMetadata get_Item(string key);
    public void set_Item(string key, NuGetBriefMetadata value);
    public List`1<NuGetBriefMetadata> GetValues();
    public List`1<T> GetValuesAndTransform(Action`2<List`1<T>, NuGetBriefMetadata> transform);
    public void Clear();
    public IReadOnlyCollection`1<string> FilterUnknownIds(IEnumerable`1<string> ids);
    [CompilerGeneratedAttribute]
private bool <FilterUnknownIds>b__14_0(string id);
}
[ShellComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.Searching.Fetching.Cache.NuGetCache : object {
    private BriefMap myBriefMap;
    private ConcurrentDictionary`2<string, ConcurrentDictionary`2<NuGetVersion, IPackageSearchMetadata>> myFullMap;
    private ConcurrentDictionary`2<string, NuGetVersion[]> myVersionsMap;
    public Signal`1<IPackageSearchMetadata[]> Updated;
    public NuGetCache(Lifetime lifetime, ShellCaches shellCaches);
    public void Set(NuGetFeed feed, SearchFilter searchFilter, string id, IPackageSearchMetadata[] metas, bool overwrite);
    public void SetBrief(NuGetFeed feed, SearchFilter searchFilter, string id, IPackageSearchMetadata[] metas);
    [CanBeNullAttribute]
public NuGetBriefMetadata GetBrief(NuGetFeed feed, SearchFilter searchFilter, string id);
    [CanBeNullAttribute]
public NuGetBriefMetadata GetBrief(IEnumerable`1<NuGetFeed> feeds, SearchFilter searchFilter, string id);
    [CanBeNullAttribute]
public IPackageSearchMetadata GetFull(NuGetFeed feed, SearchFilter searchFilter, PackageIdentity packageIdentity);
    [NotNullAttribute]
public IPackageSearchMetadata[] GetFullAll(NuGetFeed feed, SearchFilter searchFilter, string packageId);
    [NotNullAttribute]
[ItemNotNullAttribute]
public List`1<NuGetBriefMetadata> Look(IEnumerable`1<NuGetFeed> feeds, SearchFilter searchFilter, string searchTerm, NuGetPackageMatcher matcher, NuGetCompletionRequestCache completionRequestCache);
    [CanBeNullAttribute]
public NuGetVersion[] GetVersions(NuGetFeed feed, SearchFilter searchFilter, string id);
    public bool HasVersions(NuGetFeed feed, SearchFilter searchFilter, string id);
    public void SetVersions(NuGetFeed feed, SearchFilter searchFilter, string packageId, NuGetVersion[] versions);
    public void Clear();
    public string CalcStatistics();
    [NotNullAttribute]
private static string GetKey(NuGetFeed feed, SearchFilter searchFilter, string packageId);
}
public interface JetBrains.ProjectModel.NuGet.Searching.Fetching.INuGetFetcher {
    public string Name { get; }
    public string SourceUrl { get; }
    public bool IsEnabled { get; public set; }
    public ISimpleSignal Updated { get; }
    public double Progress { get; }
    public bool IsActive { get; }
    public ProcessingQueueStats Stats { get; }
    public int QueueSize { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_SourceUrl();
    public abstract virtual bool get_IsEnabled();
    public abstract virtual void set_IsEnabled(bool value);
    public abstract virtual ISimpleSignal get_Updated();
    public abstract virtual double get_Progress();
    public abstract virtual bool get_IsActive();
    public abstract virtual ProcessingQueueStats get_Stats();
    public abstract virtual int get_QueueSize();
    public abstract virtual string GetStatus();
    public abstract virtual void ClearHistory();
    public abstract virtual void SafeInvalidate();
}
public class JetBrains.ProjectModel.NuGet.Searching.Fetching.NuGetBriefMetadata : object {
    public static NuGetVersion FakeVersion;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <DownloadCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <IconUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PrefixReserved>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FeedId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludePrerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeDelisted>k__BackingField;
    [NotNullAttribute]
public string Id { get; }
    [NotNullAttribute]
public string Summary { get; }
    [CanBeNullAttribute]
public Nullable`1<long> DownloadCount { get; }
    [CanBeNullAttribute]
public Uri IconUrl { get; }
    public bool PrefixReserved { get; }
    [NotNullAttribute]
public NuGetVersion Version { get; }
    [NotNullAttribute]
public string FeedId { get; }
    public bool IncludePrerelease { get; }
    public bool IncludeDelisted { get; }
    public NuGetBriefMetadata(string id, string summary, Nullable`1<long> downloadCount, Uri iconUrl, bool prefixReserved, NuGetVersion version, string feedId, bool includePrerelease, bool includeDelisted);
    private static NuGetBriefMetadata();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_Summary();
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_DownloadCount();
    [CompilerGeneratedAttribute]
public Uri get_IconUrl();
    [CompilerGeneratedAttribute]
public bool get_PrefixReserved();
    [CompilerGeneratedAttribute]
public NuGetVersion get_Version();
    [CompilerGeneratedAttribute]
public string get_FeedId();
    [CompilerGeneratedAttribute]
public bool get_IncludePrerelease();
    [CompilerGeneratedAttribute]
public bool get_IncludeDelisted();
    public static NuGetBriefMetadata FromId(string id, bool includePrerelase, bool includeDelisted, string feedId);
    public static NuGetBriefMetadata Read(UnsafeReader reader);
    public static void Write(UnsafeWriter writer, NuGetBriefMetadata value);
    public bool Equals(NuGetBriefMetadata other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public NuGetBriefMetadata WithAnotherDownloadCount(Nullable`1<long> newDownloadCount);
}
public class JetBrains.ProjectModel.NuGet.Searching.Fetching.NuGetBriefPackageRequest : NuGetPackageFetcherRequest {
    public bool IsBrief { get; }
    public NuGetBriefPackageRequest(NuGetHost host, NuGetOptionsProvider options, string packageId, int priority, bool isMain);
    public virtual bool get_IsBrief();
    public static NuGetBriefPackageRequest CreateBrief(NuGetHost host, NuGetOptionsProvider options, string packageId);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ProjectModel.NuGet.Searching.Fetching.NuGetCompletionRequestCache : object {
    private ConcurrentDictionary`2<string, FeedCache> myFeedCaches;
    private SynchronizedSet`1<string> GetIdSet(string feedId, bool includePrerelease);
    [PublicAPIAttribute]
public void AddPackageIds(string feedId, bool includePrerelease, IEnumerable`1<string> ids);
    [PublicAPIAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
public IReadOnlyCollection`1<string> GetAllPackageIds(string feedId, bool includePrerelease);
    public void Clear();
}
public abstract class JetBrains.ProjectModel.NuGet.Searching.Fetching.NuGetFetcherBase`1 : object {
    protected ILogger myLogger;
    protected NuGetHost myHost;
    protected NuGetCache myCache;
    protected NuGetFeed Feed;
    protected NuGetOptionsProvider myOptions;
    private NuGetFeedManager myFeedManager;
    private ProcessingQueue`1<TRequest> myQueue;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <Updated>k__BackingField;
    public string Name { get; }
    public string SourceUrl { get; }
    public bool IsEnabled { get; public set; }
    public ISimpleSignal Updated { get; }
    public double Progress { get; }
    public bool IsActive { get; }
    public ProcessingQueueStats Stats { get; }
    public int QueueSize { get; }
    protected NuGetFetcherBase`1(IShellLocks locks, Lifetime lifetime, ILogger logger, NuGetHost host, NuGetCache cache, NuGetFeed feed, NuGetOptionsProvider options, NuGetFeedManager feedManager);
    public sealed virtual string get_Name();
    public sealed virtual string get_SourceUrl();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_Updated();
    public sealed virtual void SafeInvalidate();
    protected void InvalidateFeedCredentials();
    protected abstract virtual string GetFetcherKind();
    protected abstract virtual Task`1<NuGetMetadataFetchResult> Process(TRequest request);
    protected abstract virtual void Invalidate();
    public abstract virtual double get_Progress();
    public sealed virtual bool get_IsActive();
    public sealed virtual ProcessingQueueStats get_Stats();
    public sealed virtual int get_QueueSize();
    protected void TerminateOthers(Predicate`1<TRequest> predicate);
    public void Enqueue(TRequest request);
    public void Enqueue(IEnumerable`1<TRequest> requests);
    public sealed virtual string GetStatus();
    public sealed virtual void ClearHistory();
    protected void Log(string message);
    protected void Warn(string message);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.Searching.Fetching.NuGetFetchManager : object {
    private IShellLocks myLocks;
    private Lifetime myLifetime;
    private ILogger myLogger;
    private NuGetHost myHost;
    private NuGetCache myCache;
    private NuGetOptionsProvider myOptions;
    private NuGetPackageReferenceTracker myPackageReferenceTracker;
    private NugetSearchService mySearchService;
    private NuGetPackagePsiCache myPackagePsiCache;
    private NuGetCompletionRequestCache myCompletionRequestCache;
    private NuGetFeedManager myFeedManager;
    private NuGetConfigManager myConfigManager;
    private NuGetPackageFetcher myPackageFetcher;
    private JetFastSemiReenterableRWLock mySync;
    private List`1<NuGetSearchFetcher> myShortSearchFetchers;
    private List`1<NuGetSearchFetcher> myFullSearchFetchers;
    private List`1<NuGetSearchFetcher> myCompletionSearchFetchers;
    private List`1<NuGetSearcherPackageFetcher> myPackageFetchers;
    private List`1<NuGetPsiFetcher> myPsiFetchers;
    private FreeThreadedGroupingEvent myUpdatedGroupingEvent;
    [CompilerGeneratedAttribute]
private Property`1<string> <SearchTerm>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <Updated>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<bool> <GlobalSearchIsEnabled>k__BackingField;
    public Property`1<string> SearchTerm { get; }
    public ISimpleSignal Updated { get; }
    public Property`1<bool> GlobalSearchIsEnabled { get; }
    private IEnumerable`1<INuGetFetcher> AllFetchers { get; }
    public double Progress { get; }
    public bool IsActive { get; }
    public int TotalCount { get; }
    public NuGetFetchManager(IShellLocks locks, Lifetime lifetime, ILogger logger, NuGetHost host, NuGetCache cache, NuGetFeedManager feedManager, NuGetOptionsProvider options, NuGetPackageReferenceTracker packageReferenceTracker, NugetSearchService searchService, NuGetPackagePsiCache packagePsiCache, NuGetCompletionRequestCache completionRequestCache, NuGetLockFileTracker lockFileTracker, NuGetConfigManager configManager, NuGetPackageFetcher packageFetcher);
    [CompilerGeneratedAttribute]
public Property`1<string> get_SearchTerm();
    [CompilerGeneratedAttribute]
public ISimpleSignal get_Updated();
    [CompilerGeneratedAttribute]
public Property`1<bool> get_GlobalSearchIsEnabled();
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.NuGet.Searching.Fetching.NuGetFetchManager/<get_AllFetchers>d__31")]
private IEnumerable`1<INuGetFetcher> get_AllFetchers();
    public void UpdateSourcesAndFetch(String[] packageIds, bool withoutSearch);
    public void UpdateSources(NuGetFeed[] feeds, bool forced);
    private void EnableFetchers(NuGetFeed feed);
    private void EnableFetcher(List`1<T> fetchers, NuGetFeed feed, Func`2<NuGetFeed, T> create);
    public void FetchMainPackage(string packageId);
    public void FetchBrief(string packageId);
    public void UpdateBackgroundPackages(String[] packageIds);
    public double get_Progress();
    public bool get_IsActive();
    public int get_TotalCount();
    public string GetStatus();
    public void ClearHistory();
    public void Invalidate();
    [CompilerGeneratedAttribute]
private NuGetSearchFetcher <EnableFetchers>b__34_0(NuGetFeed s);
    [CompilerGeneratedAttribute]
private NuGetSearchFetcher <EnableFetchers>b__34_1(NuGetFeed s);
    [CompilerGeneratedAttribute]
private NuGetSearcherPackageFetcher <EnableFetchers>b__34_2(NuGetFeed s);
    [CompilerGeneratedAttribute]
private NuGetSearchFetcher <EnableFetchers>b__34_3(NuGetFeed s);
    [CompilerGeneratedAttribute]
private NuGetPsiFetcher <EnableFetchers>b__34_4(NuGetFeed s);
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ProjectModel.NuGet.Searching.Fetching.NuGetPackageCheckerProvider : object {
    public SimpleSignal Update;
    public virtual void FetchPackageCheck(string id, string version);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ProjectModel.NuGet.Searching.Fetching.NuGetPackageFetcher : object {
    [CompilerGeneratedAttribute]
private NuGetHost <host>P;
    [CompilerGeneratedAttribute]
private NuGetCache <cache>P;
    [CompilerGeneratedAttribute]
private NuGetPackageCheckerProvider <packageCheckerProvider>P;
    [CompilerGeneratedAttribute]
private ILogger <logger>P;
    public NuGetPackageFetcher(NuGetHost host, NuGetCache cache, NuGetPackageCheckerProvider packageCheckerProvider, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Searching.Fetching.NuGetPackageFetcher/<FetchMetadataAsync>d__5")]
public Task`1<NuGetMetadataFetchResult> FetchMetadataAsync(string packageId, SearchFilter searchFilter, NuGetFeed feed, bool brief);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Searching.Fetching.NuGetPackageFetcher/<ProcessMetadata>d__6")]
private Task`1<NuGetMetadataFetchResult> ProcessMetadata(string packageId, SearchFilter searchFilter, NuGetFeed feed, Action`1<IPackageSearchMetadata[]> cacheSet);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Searching.Fetching.NuGetPackageFetcher/<FetchMetadata>d__7")]
private Task`1<MetadataFetchResult> FetchMetadata(string packageId, SearchFilter searchFilter, NuGetFeed Feed);
}
public class JetBrains.ProjectModel.NuGet.Searching.Fetching.NuGetPackageFetcherRequest : object {
    private NuGetHost myHost;
    private NuGetOptionsProvider myOptions;
    protected static int MainPriority;
    private static int BackgroundPriority;
    [CompilerGeneratedAttribute]
private string <PackageId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludePrerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeDelisted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMain>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    public string PackageId { get; }
    public bool IncludePrerelease { get; }
    public bool IncludeDelisted { get; }
    public bool IsMain { get; }
    public int Priority { get; }
    public bool IsBrief { get; }
    public bool IsActual { get; }
    public NuGetPackageFetcherRequest(NuGetHost host, NuGetOptionsProvider options, string packageId, int priority, bool isMain);
    [CompilerGeneratedAttribute]
public string get_PackageId();
    [CompilerGeneratedAttribute]
public bool get_IncludePrerelease();
    [CompilerGeneratedAttribute]
public bool get_IncludeDelisted();
    [CompilerGeneratedAttribute]
public bool get_IsMain();
    [CompilerGeneratedAttribute]
public int get_Priority();
    public virtual bool get_IsBrief();
    public static NuGetPackageFetcherRequest CreateBackground(NuGetHost host, NuGetOptionsProvider options, string packageId);
    public static NuGetPackageFetcherRequest CreateMain(NuGetHost host, NuGetOptionsProvider options, string packageId);
    public sealed virtual bool get_IsActual();
    public sealed virtual int Compare(NuGetPackageFetcherRequest x, NuGetPackageFetcherRequest y);
    public sealed virtual int CompareTo(NuGetPackageFetcherRequest other);
    public sealed virtual bool Equals(NuGetPackageFetcherRequest other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.ProjectModel.NuGet.Searching.Fetching.NuGetPsiFetcher : NuGetFetcherBase`1<NuGetPsiFetcherRequest> {
    private static bool CaseSensitive;
    private static bool AnyVersion;
    private Lifetime myLifetime;
    protected Property`1<string> SearchTermProperty;
    private NugetSearchService mySearchService;
    private NuGetPackagePsiCache myPackagePsiCache;
    public double Progress { get; }
    public NuGetPsiFetcher(IShellLocks locks, Lifetime lifetime, ILogger logger, NuGetHost host, NuGetCache cache, NuGetFeed feed, Property`1<string> searchTermProperty, NuGetOptionsProvider options, NuGetFeedManager feedManager, NugetSearchService searchService, NuGetPackagePsiCache packagePsiCache);
    protected virtual string GetFetcherKind();
    protected virtual Task`1<NuGetMetadataFetchResult> Process(NuGetPsiFetcherRequest request);
    protected virtual void Invalidate();
    [CanBeNullAttribute]
private SearchQueryParams GetCurrentSqParams();
    private SearchQueryParams CreateSearchQueryParams(NuGetLookupMode lookupMode, string searchTerm);
    public virtual double get_Progress();
}
public class JetBrains.ProjectModel.NuGet.Searching.Fetching.NuGetPsiFetcherRequest : object {
    private static int DefaultPriority;
    [NotNullAttribute]
private NuGetHost myHost;
    [NotNullAttribute]
private NuGetOptionsProvider myOptions;
    [NotNullAttribute]
private Property`1<string> mySearchTermProperty;
    [CompilerGeneratedAttribute]
private SearchQueryParams <SqParams>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [NotNullAttribute]
public SearchQueryParams SqParams { get; }
    public int Priority { get; }
    public bool IsActual { get; }
    public NuGetPsiFetcherRequest(NuGetHost host, NuGetOptionsProvider options, Property`1<string> searchTermProperty, SearchQueryParams sqParams, int priority);
    [CompilerGeneratedAttribute]
public SearchQueryParams get_SqParams();
    [CompilerGeneratedAttribute]
public int get_Priority();
    public static NuGetPsiFetcherRequest Create(NuGetHost host, NuGetOptionsProvider options, Property`1<string> searchTermProperty, SearchQueryParams sqParams);
    public string GetSearchTerm();
    public sealed virtual bool get_IsActual();
    public sealed virtual bool Equals(NuGetPsiFetcherRequest other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public int Compare(NuGetPsiFetcherRequest x, NuGetPsiFetcherRequest y);
    public sealed virtual int CompareTo(NuGetPsiFetcherRequest other);
}
public class JetBrains.ProjectModel.NuGet.Searching.Fetching.NuGetSearcherPackageFetcher : NuGetFetcherBase`1<NuGetPackageFetcherRequest> {
    [CompilerGeneratedAttribute]
private NuGetPackageFetcher <packageFetcher>P;
    public double Progress { get; }
    public NuGetSearcherPackageFetcher(IShellLocks locks, Lifetime lifetime, ILogger logger, NuGetHost host, NuGetCache cache, NuGetFeed feed, NuGetOptionsProvider options, NuGetFeedManager feedManager, NuGetPackageFetcher packageFetcher);
    protected virtual string GetFetcherKind();
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Searching.Fetching.NuGetSearcherPackageFetcher/<Process>d__3")]
[ItemCanBeNullAttribute]
protected virtual Task`1<NuGetMetadataFetchResult> Process(NuGetPackageFetcherRequest request);
    protected virtual void Invalidate();
    public void FetchMain(string packageId);
    public void FetchMainBrief(string packageId);
    public void FetchBackground(String[] packageIds);
    public virtual double get_Progress();
    [CompilerGeneratedAttribute]
private NuGetPackageFetcherRequest <FetchBackground>b__7_0(string packageId);
}
public class JetBrains.ProjectModel.NuGet.Searching.Fetching.NuGetSearchFetcher : NuGetFetcherBase`1<NuGetSearchFetcherRequest> {
    private static int PageCount;
    protected Property`1<string> SearchTermProperty;
    [CompilerGeneratedAttribute]
private int <PageSize>k__BackingField;
    public int PageSize { get; }
    public double Progress { get; }
    public NuGetSearchFetcher(IShellLocks locks, Lifetime lifetime, ILogger logger, NuGetHost host, NuGetCache cache, NuGetFeed feed, Property`1<string> searchTermProperty, int pageSize, NuGetOptionsProvider options, NuGetFeedManager feedManager);
    [CompilerGeneratedAttribute]
public int get_PageSize();
    protected virtual string GetFetcherKind();
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Searching.Fetching.NuGetSearchFetcher/<Process>d__7")]
protected virtual Task`1<NuGetMetadataFetchResult> Process(NuGetSearchFetcherRequest request);
    protected virtual void Invalidate();
    public virtual double get_Progress();
    [CompilerGeneratedAttribute]
private NuGetSearchFetcherRequest <Invalidate>b__8_0(int page);
}
public class JetBrains.ProjectModel.NuGet.Searching.Fetching.NuGetSearchFetcherRequest : object {
    private static int DefaultPriority;
    private NuGetHost myHost;
    private NuGetOptionsProvider myOptions;
    private Property`1<string> mySearchTermProperty;
    [CompilerGeneratedAttribute]
private string <SearchTerm>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludePrerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeDelisted>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Take>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    public string SearchTerm { get; }
    public bool IncludePrerelease { get; }
    public bool IncludeDelisted { get; }
    public int Skip { get; }
    public int Take { get; }
    public int Priority { get; }
    public bool IsActual { get; }
    private NuGetSearchFetcherRequest(NuGetHost host, NuGetOptionsProvider options, Property`1<string> searchTermProperty, int skip, int take, int priority);
    [CompilerGeneratedAttribute]
public string get_SearchTerm();
    [CompilerGeneratedAttribute]
public bool get_IncludePrerelease();
    [CompilerGeneratedAttribute]
public bool get_IncludeDelisted();
    [CompilerGeneratedAttribute]
public int get_Skip();
    [CompilerGeneratedAttribute]
public int get_Take();
    [CompilerGeneratedAttribute]
public int get_Priority();
    public static NuGetSearchFetcherRequest Create(NuGetHost host, NuGetOptionsProvider options, Property`1<string> searchTermProperty, int skip, int take);
    public sealed virtual bool get_IsActual();
    public sealed virtual int Compare(NuGetSearchFetcherRequest x, NuGetSearchFetcherRequest y);
    public sealed virtual int CompareTo(NuGetSearchFetcherRequest other);
    public sealed virtual bool Equals(NuGetSearchFetcherRequest other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.ProjectModel.NuGet.Searching.Fetching.NuGetSearchViaCompletionFetcher : NuGetSearchFetcher {
    private NuGetCompletionRequestCache myCompletionRequestCache;
    public NuGetSearchViaCompletionFetcher(IShellLocks locks, Lifetime lifetime, ILogger logger, NuGetHost host, NuGetCache cache, NuGetFeed feed, Property`1<string> searchTermProperty, NuGetOptionsProvider options, NuGetFeedManager feedManager, NuGetCompletionRequestCache completionRequestCache);
    protected virtual string GetFetcherKind();
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Searching.Fetching.NuGetSearchViaCompletionFetcher/<Process>d__3")]
protected virtual Task`1<NuGetMetadataFetchResult> Process(NuGetSearchFetcherRequest request);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ProjectModel.NuGet.Searching.Fetching.NuGetSecurityMetadataFetcher : object {
    [CompilerGeneratedAttribute]
private ILogger <logger>P;
    [CompilerGeneratedAttribute]
private NuGetOptionsProvider <options>P;
    [CompilerGeneratedAttribute]
private NuGetPackageFetcher <packageFetcher>P;
    [CompilerGeneratedAttribute]
private NuGetConfigManager <configManager>P;
    private SingleThreadExecutor mySte;
    public NuGetSecurityMetadataFetcher(ILogger logger, Lifetime lifetime, IShellLocks locks, NuGetOptionsProvider options, NuGetPackageFetcher packageFetcher, NuGetConfigManager configManager);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Searching.Fetching.NuGetSecurityMetadataFetcher/<FetchAsync>d__6")]
public Task FetchAsync(List`1<string> packageId);
    public void QueueFetchBackground(List`1<string> packageId);
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ProjectModel.NuGet.Searching.Fetching.NuGetVulnerablePackagesProvider : object {
    public virtual IEnumerable`1<VulnerabilityInfo> GetVulnerabilityInfo(string id, string version);
}
public class JetBrains.ProjectModel.NuGet.Searching.Fetching.VulnerabilityInfo : object {
    [CompilerGeneratedAttribute]
private Uri <AdvisoryUri>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public Uri AdvisoryUri { get; public set; }
    public int Severity { get; public set; }
    public string Title { get; public set; }
    public VulnerabilityInfo(Uri AdvisoryUri, int Severity, string Title);
    [CompilerGeneratedAttribute]
protected VulnerabilityInfo(VulnerabilityInfo original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Uri get_AdvisoryUri();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AdvisoryUri(Uri value);
    [CompilerGeneratedAttribute]
public int get_Severity();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Severity(int value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Title(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(VulnerabilityInfo left, VulnerabilityInfo right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(VulnerabilityInfo left, VulnerabilityInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(VulnerabilityInfo other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual VulnerabilityInfo <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Uri& AdvisoryUri, Int32& Severity, String& Title);
}
[ZoneDefinitionAttribute]
public interface JetBrains.ProjectModel.NuGet.Searching.INuGetSearchZone {
}
public class JetBrains.ProjectModel.NuGet.Searching.ManualPackageSearchMetadata : object {
    [CompilerGeneratedAttribute]
private string <Authors>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<PackageDependencyGroup> <DependencySets>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <DownloadCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <IconUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageIdentity <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <LicenseUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ProjectUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ReadmeUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ReportAbuseUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <PackageDetailsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <Published>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <OwnersList>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Owners>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireLicenseAcceptance>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsListed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PrefixReserved>k__BackingField;
    [CompilerGeneratedAttribute]
private LicenseMetadata <LicenseMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<PackageVulnerabilityMetadata> <Vulnerabilities>k__BackingField;
    private Func`1<Task`1<IEnumerable`1<VersionInfo>>> myGetVersionAsync;
    private Func`1<Task`1<PackageDeprecationMetadata>> myGetDeprecationMetadataAsync;
    public string Authors { get; }
    public IEnumerable`1<PackageDependencyGroup> DependencySets { get; }
    public string Description { get; }
    public Nullable`1<long> DownloadCount { get; }
    public Uri IconUrl { get; }
    public PackageIdentity Identity { get; }
    public Uri LicenseUrl { get; }
    public Uri ProjectUrl { get; }
    public Uri ReadmeUrl { get; }
    public Uri ReportAbuseUrl { get; }
    public Uri PackageDetailsUrl { get; }
    public Nullable`1<DateTimeOffset> Published { get; }
    public IReadOnlyList`1<string> OwnersList { get; }
    public string Owners { get; }
    public bool RequireLicenseAcceptance { get; }
    public string Summary { get; }
    public string Tags { get; }
    public string Title { get; }
    public bool IsListed { get; }
    public bool PrefixReserved { get; }
    [CanBeNullAttribute]
public LicenseMetadata LicenseMetadata { get; }
    public IEnumerable`1<PackageVulnerabilityMetadata> Vulnerabilities { get; }
    public ManualPackageSearchMetadata(string authors, IEnumerable`1<PackageDependencyGroup> dependencySets, string description, Nullable`1<long> downloadCount, Uri iconUrl, PackageIdentity identity, Uri licenseUrl, Uri projectUrl, Uri reportAbuseUrl, Uri packageDetailsUrl, Nullable`1<DateTimeOffset> published, string owners, bool requireLicenseAcceptance, string summary, string tags, string title, bool isListed, bool prefixReserved, LicenseMetadata licenseMetadata, Func`1<Task`1<IEnumerable`1<VersionInfo>>> getVersionAsync, Func`1<Task`1<PackageDeprecationMetadata>> getDeprecationMetadataAsync, IEnumerable`1<PackageVulnerabilityMetadata> vulnerabilities, Uri readmeUrl, IReadOnlyList`1<string> ownersList);
    public ManualPackageSearchMetadata(IPackageSearchMetadata meta, IReadOnlyList`1<string> ownersList);
    public ManualPackageSearchMetadata(PackageResult meta);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Authors();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<PackageDependencyGroup> get_DependencySets();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<long> get_DownloadCount();
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_IconUrl();
    [CompilerGeneratedAttribute]
public sealed virtual PackageIdentity get_Identity();
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_LicenseUrl();
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_ProjectUrl();
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_ReadmeUrl();
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_ReportAbuseUrl();
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_PackageDetailsUrl();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_Published();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<string> get_OwnersList();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Owners();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RequireLicenseAcceptance();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Summary();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Tags();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Title();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsListed();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_PrefixReserved();
    [CompilerGeneratedAttribute]
public sealed virtual LicenseMetadata get_LicenseMetadata();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<PackageVulnerabilityMetadata> get_Vulnerabilities();
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Searching.ManualPackageSearchMetadata/<GetDeprecationMetadataAsync>d__68")]
public sealed virtual Task`1<PackageDeprecationMetadata> GetDeprecationMetadataAsync();
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Searching.ManualPackageSearchMetadata/<GetVersionsAsync>d__69")]
public sealed virtual Task`1<IEnumerable`1<VersionInfo>> GetVersionsAsync();
    [CanBeNullAttribute]
private static Uri GetUri(string url);
    public virtual string ToString();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.Searching.NuGetIconLoader : object {
    [NotNullAttribute]
private CacheCodeDb myDb;
    [NotNullAttribute]
private Processor myProcessor;
    [NotNullAttribute]
private HashSet`1<string> myAlreadyRequested;
    [NotNullAttribute]
private object mySync;
    [NotNullAttribute]
private SingleThreadExecutor myCacheIconQueuer;
    [PublicAPIAttribute]
[NotNullAttribute]
public FileSystemPath CacheFolderLocation { get; }
    [PublicAPIAttribute]
[NotNullAttribute]
public ISimpleSignal Updated { get; }
    public NuGetIconLoader(Lifetime lifetime, ILogger logger, IShellLocks locks, ShellCaches shellCaches, SolutionCertificateManager certificateManager, IIsApplicationActiveState applicationActiveState);
    public FileSystemPath get_CacheFolderLocation();
    public ISimpleSignal get_Updated();
    [PublicAPIAttribute]
public void CacheIcon(NuGetFeed feed, IPackageSearchMetadata meta);
    private void CacheIconInternal(NuGetFeed feed, IPackageSearchMetadata meta);
    [PublicAPIAttribute]
public void ClearCachingQueue();
    [PublicAPIAttribute]
[NotNullAttribute]
public FileSystemPath GetCachedIconFilePath(NuGetFeed feed, string packageId);
    [PublicAPIAttribute]
[NotNullAttribute]
public FileSystemPath GetCachedIconFilePath(IEnumerable`1<NuGetFeed> feeds, string packageId);
    [PublicAPIAttribute]
public void Clear();
    private sealed virtual override void JetBrains.Application.UI.TreeModels.New.IDumpable.Dump(StreamWriter writer);
    [NotNullAttribute]
private static string GetKey(NuGetFeed feed, PackageIdentity identity);
    [NotNullAttribute]
private static string GetKey(NuGetFeed feed, string packageId);
}
public class JetBrains.ProjectModel.NuGet.Searching.NuGetImplicitVersion : object {
    [CompilerGeneratedAttribute]
private NuGetVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <Origins>k__BackingField;
    public NuGetVersion Version { get; }
    public IReadOnlyCollection`1<string> Origins { get; }
    public NuGetImplicitVersion(NuGetVersion version, IReadOnlyCollection`1<string> origins);
    [CompilerGeneratedAttribute]
public NuGetVersion get_Version();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<string> get_Origins();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ProjectModel.NuGet.Searching.NuGetKnownCompletionProvider : object {
    private static SearchFilter ourSearchFilter;
    private NuGetCache myCache;
    private NuGetConfigManager myConfigManager;
    private NuGetCompletionRequestCache myCompletionRequestCache;
    public int Priority { get; }
    public NuGetKnownCompletionProvider(NuGetCache cache, NuGetConfigManager configManager, NuGetCompletionRequestCache completionRequestCache);
    private static NuGetKnownCompletionProvider();
    public sealed virtual int get_Priority();
    public sealed virtual IReadOnlyList`1<string> CompleteIdInstantly(string idPrefix);
    public sealed virtual IReadOnlyList`1<NuGetVersion> CompleteVersionInstantly(string packageId, string versionPrefix);
    public sealed virtual Task`1<IReadOnlyList`1<string>> CompleteIdAsync(string idPrefix, CancellationToken token);
    public sealed virtual Task`1<IReadOnlyList`1<NuGetVersion>> CompleteVersionAsync(string packageId, string versionPrefix, CancellationToken token);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ProjectModel.NuGet.Searching.NuGetPackagePsiCache : object {
    private NuGetCache myCache;
    private Dictionary`2<string, HashMap`2<string, int>> myMaps;
    public NuGetPackagePsiCache(NuGetCache cache);
    public void Save(SearchQueryParams sqParams, SearchQueryResult sqResult, NuGetFeed feed);
    public NuGetPackageMatcher CreateMatcher(string searchTerm);
}
public class JetBrains.ProjectModel.NuGet.Searching.NuGetRemoteVersion : object {
    [CompilerGeneratedAttribute]
private string <FeedId>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <DownloadCount>k__BackingField;
    [NotNullAttribute]
public string FeedId { get; }
    [NotNullAttribute]
public NuGetVersion Version { get; }
    [CanBeNullAttribute]
public Nullable`1<long> DownloadCount { get; }
    public NuGetRemoteVersion(string feedId, NuGetVersion version, Nullable`1<long> downloadCount);
    public NuGetRemoteVersion(NuGetBriefMetadata brief);
    [CompilerGeneratedAttribute]
public string get_FeedId();
    [CompilerGeneratedAttribute]
public NuGetVersion get_Version();
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_DownloadCount();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.Searching.NuGetSearcher : object {
    private static double UpdateViewLongTimeMs;
    private NuGetHost myHost;
    private NuGetCache myCache;
    private NuGetFetchManager myFetchManager;
    private ISolution mySolution;
    private Lifetime myLifetime;
    private ILogger myLogger;
    private IShellLocks myLocks;
    private NuGetPackageReferenceTracker myPackageReferenceTracker;
    private NuGetConfigManager myConfigManager;
    private NuGetOptionsProvider myOptions;
    private INuGetSolutionManager myNuGetSolutionManager;
    private NuGetPackagePsiCache myPackagePsiCache;
    private NuGetCompletionRequestCache myCompletionRequestCache;
    private NuGetSourceCacheContextProvider mySourceCacheContextProvider;
    private NuGetNupkgStorage myNupkgStorage;
    private NuGetIconLoader myIconLoader;
    private NuGetLockFileTracker myLockFileTracker;
    private SingleThreadExecutor myFoundPackagesUpdateExecutor;
    private NuGetPackageCheckerProvider myPackageCheckerProvider;
    private FreeThreadedGroupingEvent myUpdateGroupingEvent;
    private FreeThreadedGroupingEvent myUpdateGroupingEventFast;
    private bool myIsSolutionLoaded;
    [CompilerGeneratedAttribute]
private IProperty`1<IProject> <ContextProject>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<NuGetSmartMetadata[]> <FoundPackages>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<NuGetFeed[]> <SelectedFeeds>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <TargetPackageId>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <TargetPackageVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<NuGetFeed> <TargetPackageFeed>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IPackageSearchMetadata> <TargetPackageMeta>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<NuGetVersionsInFeed[]> <TargetPackageVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<double> <Progress>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsFetching>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<int> <TotalFetched>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<string> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <ZeroLatencyUpdateFinished>k__BackingField;
    public IProperty`1<string> SearchTerm { get; }
    public IProperty`1<IProject> ContextProject { get; protected set; }
    public IProperty`1<NuGetSmartMetadata[]> FoundPackages { get; protected set; }
    public IProperty`1<NuGetFeed[]> SelectedFeeds { get; protected set; }
    public IProperty`1<string> TargetPackageId { get; protected set; }
    public IProperty`1<string> TargetPackageVersion { get; protected set; }
    public IProperty`1<NuGetFeed> TargetPackageFeed { get; protected set; }
    public IProperty`1<IPackageSearchMetadata> TargetPackageMeta { get; protected set; }
    public IProperty`1<NuGetVersionsInFeed[]> TargetPackageVersions { get; protected set; }
    public IProperty`1<double> Progress { get; protected set; }
    public IProperty`1<bool> IsFetching { get; protected set; }
    public IProperty`1<int> TotalFetched { get; protected set; }
    public ISignal`1<string> Status { get; protected set; }
    public ISimpleSignal ZeroLatencyUpdateFinished { get; protected set; }
    public NuGetSearcher(Lifetime lifetime, ILogger logger, IShellLocks locks, NuGetHost host, NuGetCache cache, NuGetFetchManager fetchManager, ISolution solution, NuGetPackageReferenceTracker packageReferenceTracker, NuGetConfigManager configManager, NuGetOptionsProvider options, INuGetSolutionManager nuGetSolutionManager, NuGetPackagePsiCache packagePsiCache, NuGetCompletionRequestCache completionRequestCache, NuGetSourceCacheContextProvider sourceCacheContextProvider, ISolutionLoadTasksScheduler solutionLoadTasksScheduler, IViewableProjectsCollection projectsCollection, NuGetNupkgStorage nupkgStorage, NuGetIconLoader iconLoader, NuGetLockFileTracker lockFileTracker, NuGetPackageCheckerProvider packageCheckerProvider);
    public IProperty`1<string> get_SearchTerm();
    [CompilerGeneratedAttribute]
public IProperty`1<IProject> get_ContextProject();
    [CompilerGeneratedAttribute]
protected void set_ContextProject(IProperty`1<IProject> value);
    [CompilerGeneratedAttribute]
public IProperty`1<NuGetSmartMetadata[]> get_FoundPackages();
    [CompilerGeneratedAttribute]
protected void set_FoundPackages(IProperty`1<NuGetSmartMetadata[]> value);
    [CompilerGeneratedAttribute]
public IProperty`1<NuGetFeed[]> get_SelectedFeeds();
    [CompilerGeneratedAttribute]
protected void set_SelectedFeeds(IProperty`1<NuGetFeed[]> value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_TargetPackageId();
    [CompilerGeneratedAttribute]
protected void set_TargetPackageId(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_TargetPackageVersion();
    [CompilerGeneratedAttribute]
protected void set_TargetPackageVersion(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public IProperty`1<NuGetFeed> get_TargetPackageFeed();
    [CompilerGeneratedAttribute]
protected void set_TargetPackageFeed(IProperty`1<NuGetFeed> value);
    [CompilerGeneratedAttribute]
public IProperty`1<IPackageSearchMetadata> get_TargetPackageMeta();
    [CompilerGeneratedAttribute]
protected void set_TargetPackageMeta(IProperty`1<IPackageSearchMetadata> value);
    [CompilerGeneratedAttribute]
public IProperty`1<NuGetVersionsInFeed[]> get_TargetPackageVersions();
    [CompilerGeneratedAttribute]
protected void set_TargetPackageVersions(IProperty`1<NuGetVersionsInFeed[]> value);
    [CompilerGeneratedAttribute]
public IProperty`1<double> get_Progress();
    [CompilerGeneratedAttribute]
protected void set_Progress(IProperty`1<double> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsFetching();
    [CompilerGeneratedAttribute]
protected void set_IsFetching(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public IProperty`1<int> get_TotalFetched();
    [CompilerGeneratedAttribute]
protected void set_TotalFetched(IProperty`1<int> value);
    [CompilerGeneratedAttribute]
public ISignal`1<string> get_Status();
    [CompilerGeneratedAttribute]
protected void set_Status(ISignal`1<string> value);
    [CompilerGeneratedAttribute]
public ISimpleSignal get_ZeroLatencyUpdateFinished();
    [CompilerGeneratedAttribute]
protected void set_ZeroLatencyUpdateFinished(ISimpleSignal value);
    public void ReloadSources();
    public void ClearCache();
    public NuGetFeedContext GetFeedContext();
    private void RunOnMainThread(Lifetime lifetime, Action action);
    private void UpdateView();
    private void UpdateChosenPackagesAndStatus();
    private void UpdateFoundPackages();
    private NuGetSmartMetadata[] ProcessFoundPackageMetadata();
    private void SetFoundPackagesProperties(NuGetSmartMetadata[] foundPackages);
    private static long GetSuperPopularDownloadsThreshold(List`1<RawFoundPackageStage2> packages);
    private void UpdateChosenPackage();
    private static bool AreSame(IReadOnlyList`1<NuGetVersionsInFeed> a, IReadOnlyList`1<NuGetVersionsInFeed> b);
    private void UpdateStatus();
    public void ZeroLatencyUpdate();
    private IReadOnlyList`1<IProject> GetContextProjects();
    private IEnumerable`1<PackageReference> GetInstalledPackages(IReadOnlyList`1<IProject> projects);
    [NotNullAttribute]
[ItemNotNullAttribute]
private IEnumerable`1<NuGetImplicitPackageIdentity> GetInstalledPackagesTransitive(IReadOnlyList`1<IProject> projects);
    private static bool IsDegenerateCase(PackageIdentity identity, List`1<PackageIdentity> origins);
    [CompilerGeneratedAttribute]
private bool <GetFeedContext>b__80_0(NuGetFeed f);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.NuGet.Searching.NuGetSearcherExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetContextProjectTitle(NuGetSearcher searcher);
}
public class JetBrains.ProjectModel.NuGet.Searching.NuGetSmartMetadata : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <IconUri>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <IconPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PrefixReserved>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetVersion[] <InstalledVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetImplicitVersion[] <ImplicitlyInstalledVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetRemoteVersion[] <AvailableVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionRange[] <AllowedVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Score>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSuperPopular>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoReferenced>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<NuGetLicenseLabel> <Licenses>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ProjectUri>k__BackingField;
    public string Id { get; }
    public Uri IconUri { get; }
    public FileSystemPath IconPath { get; }
    public bool PrefixReserved { get; }
    public NuGetVersion[] InstalledVersions { get; }
    public NuGetImplicitVersion[] ImplicitlyInstalledVersions { get; }
    public NuGetRemoteVersion[] AvailableVersions { get; }
    public VersionRange[] AllowedVersions { get; }
    public int Score { get; }
    public bool IsSuperPopular { get; public set; }
    public bool AutoReferenced { get; }
    public IReadOnlyCollection`1<NuGetLicenseLabel> Licenses { get; }
    public Uri ProjectUri { get; }
    public bool HasInstalled { get; }
    public NuGetSmartMetadata(string id, Uri iconUri, FileSystemPath iconPath, bool prefixReserved, NuGetVersion[] installedVersions, NuGetImplicitVersion[] implicitlyInstalledVersions, NuGetRemoteVersion[] availableVersions, int score, bool isSuperPopular, bool autoReferenced, IReadOnlyCollection`1<NuGetLicenseLabel> licenses, Uri projectUri, VersionRange[] allowedVersions);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public Uri get_IconUri();
    [CompilerGeneratedAttribute]
public FileSystemPath get_IconPath();
    [CompilerGeneratedAttribute]
public bool get_PrefixReserved();
    [CompilerGeneratedAttribute]
public NuGetVersion[] get_InstalledVersions();
    [CompilerGeneratedAttribute]
public NuGetImplicitVersion[] get_ImplicitlyInstalledVersions();
    [CompilerGeneratedAttribute]
public NuGetRemoteVersion[] get_AvailableVersions();
    [CompilerGeneratedAttribute]
public VersionRange[] get_AllowedVersions();
    [CompilerGeneratedAttribute]
public int get_Score();
    [CompilerGeneratedAttribute]
public bool get_IsSuperPopular();
    [CompilerGeneratedAttribute]
public void set_IsSuperPopular(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoReferenced();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<NuGetLicenseLabel> get_Licenses();
    [CompilerGeneratedAttribute]
public Uri get_ProjectUri();
    public bool get_HasInstalled();
    public long GetTotalDownloads();
    public bool CanBeUpdated();
}
public class JetBrains.ProjectModel.NuGet.Searching.NuGetVersionsInFeed : object {
    [CompilerGeneratedAttribute]
private NuGetFeed <Feed>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetVersion[] <Versions>k__BackingField;
    [NotNullAttribute]
public NuGetFeed Feed { get; }
    [NotNullAttribute]
public NuGetVersion[] Versions { get; }
    public NuGetVersionsInFeed(NuGetFeed feed, NuGetVersion[] versions);
    [CompilerGeneratedAttribute]
public NuGetFeed get_Feed();
    [CompilerGeneratedAttribute]
public NuGetVersion[] get_Versions();
}
[ZoneMarkerAttribute]
public class JetBrains.ProjectModel.NuGet.Searching.ZoneMarker : object {
}
public class JetBrains.ProjectModel.NuGet.Settings.NuGetAirborneSettings : object {
    private Dictionary`2<string, NuGetAirborneSettingSection> mySections;
    private List`1<string> myConfigsPaths;
    private List`1<string> myDirectoryPaths;
    public static NuGetAirborneSettings EmptyConfig;
    [CompilerGeneratedAttribute]
private EventHandler SettingsChanged;
    private NuGetAirborneSettings(Dictionary`2<string, NuGetAirborneSettingSection> sections, List`1<string> configsPaths, List`1<string> directoryPaths);
    private static NuGetAirborneSettings();
    public static NuGetAirborneSettings LoadFromSettings(ISettings settings);
    public static NuGetAirborneSettingSection FromVirtualSection(VirtualSettingSection virtSection);
    private static IReadOnlyDictionary`2<string, string> GetSectionAttributes(VirtualSettingSection virtSection);
    private static Dictionary`2<string, VirtualSettingSection> GetVirtualSections(ISettings settings);
    public sealed virtual SettingSection GetSection(string sectionName);
    public sealed virtual void AddOrUpdate(string sectionName, SettingItem item);
    public sealed virtual void Remove(string sectionName, SettingItem item);
    public sealed virtual void SaveToDisk();
    public sealed virtual INuGetCloneableSettings Clone();
    public sealed virtual IList`1<string> GetConfigFilePaths();
    public sealed virtual IList`1<string> GetConfigRoots();
    public bool IsEmpty();
    [CompilerGeneratedAttribute]
public sealed virtual void add_SettingsChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SettingsChanged(EventHandler value);
}
public class JetBrains.ProjectModel.NuGet.Settings.NuGetAirborneSettingSection : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SettingItem> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <Attributes>k__BackingField;
    public string Name { get; }
    public List`1<SettingItem> Items { get; }
    public IReadOnlyDictionary`2<string, string> Attributes { get; }
    public NuGetAirborneSettingSection(string name, IReadOnlyDictionary`2<string, string> attributes, SettingItem[] items);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public List`1<SettingItem> get_Items();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_Attributes();
    public NuGetSettingSection ToNuGetSettingSection();
    public void Clear();
    public NuGetAirborneSettingSection Clone();
    public void AddOrUpdateItem(SettingItem settingItem);
    private bool ReplaceIfExists(SettingItem replacement);
    public NuGetAirborneSettingSection Merge(NuGetAirborneSettingSection other);
    public void RemoveItem(SettingItem item);
    private bool TryGetChild(SettingItem expectedChild, SettingItem& currentChild);
    protected bool Equals(NuGetAirborneSettingSection other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public static class JetBrains.ProjectModel.NuGet.Settings.NuGetSettingConstants : object {
    public static string Add;
    public static string Clear;
    public static string Author;
    public static string Repository;
    public static string Key;
    public static string Value;
    public static string ProtocolVersion;
    public static string Name;
    public static string ServiceIndex;
    public static string Сertificate;
    public static string Owners;
    public static string Fingerprint;
    public static string HashAlgorithm;
    public static string AllowUntrustedRoot;
    public static string FallbackPackageFolders;
    public static string PackageSourcesSectionName;
}
public class JetBrains.ProjectModel.NuGet.Settings.NuGetSettingSection : SettingSection {
    private string myName;
    private IReadOnlyDictionary`2<string, string> myAttributes;
    private IEnumerable`1<SettingItem> myChildren;
    public NuGetSettingSection(string name, IReadOnlyDictionary`2<string, string> attributes, IEnumerable`1<SettingItem> children);
    public virtual SettingBase Clone();
}
public static class JetBrains.ProjectModel.NuGet.Settings.NuGetSettingsHelpers : object {
    public static IEnumerable`1<string> GetSettingsFilesFullPath(string root);
    public static Tuple`2<string, string> GetSettingFileNameAndItsRoot(string root, string settingsPath);
    private static bool IsPathAFile(string path);
    private static string GetSettingsFileNameFromDir(string directory);
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.NuGet.Settings.NuGetSettingsHelpers/<GetSettingsFilePaths>d__4")]
private static IEnumerable`1<string> GetSettingsFilePaths(string root);
}
public class JetBrains.ProjectModel.NuGet.Settings.NuGetSettingsInfo : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, NuGetAirborneSettingSection> <Sections>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigsPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DirectoryPaths>k__BackingField;
    public Dictionary`2<string, NuGetAirborneSettingSection> Sections { get; }
    public string ConfigsPaths { get; }
    public string DirectoryPaths { get; }
    public NuGetSettingsInfo(Dictionary`2<string, NuGetAirborneSettingSection> sections, string configsPaths, string directoryPaths);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, NuGetAirborneSettingSection> get_Sections();
    [CompilerGeneratedAttribute]
public string get_ConfigsPaths();
    [CompilerGeneratedAttribute]
public string get_DirectoryPaths();
}
internal static class JetBrains.ProjectModel.NuGet.Settings.NuGetXmlUtils : object {
    public static XDocument GetDocument(string fullPath);
    private static XDocument LoadSafe(Stream input, LoadOptions options);
    private static XmlReaderSettings CreateSafeSettings(bool ignoreWhiteSpace);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.NuGet.Shell.NuGetHost : object {
    private ILogger myLogger;
    private NuGetSourceCacheContextProvider mySourceCacheContextProvider;
    private NuGetResourceProviderFactory myResourceProviderFactory;
    private static TimeSpan ourResourceTimeout;
    private static HashSet`1<string> ourOurCachedExceptions;
    private ILogger myLoggerAdapter;
    [CompilerGeneratedAttribute]
private Property`1<bool> <IsLive>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<INuGetLogMessage> <Log>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<NuGetNotification> <Notify>k__BackingField;
    public ILogger InternalNuGetLoggerAdapter { get; }
    public Property`1<bool> IsLive { get; }
    public ISignal`1<INuGetLogMessage> Log { get; protected set; }
    public ISignal`1<NuGetNotification> Notify { get; protected set; }
    public NuGetHost(Lifetime lifetime, ILogger logger, NuGetSourceCacheContextProvider sourceCacheContextProvider, NuGetResourceProviderFactory resourceProviderFactory);
    private static NuGetHost();
    public ILogger get_InternalNuGetLoggerAdapter();
    [CompilerGeneratedAttribute]
public Property`1<bool> get_IsLive();
    [CompilerGeneratedAttribute]
public ISignal`1<INuGetLogMessage> get_Log();
    [CompilerGeneratedAttribute]
protected void set_Log(ISignal`1<INuGetLogMessage> value);
    [CompilerGeneratedAttribute]
public ISignal`1<NuGetNotification> get_Notify();
    [CompilerGeneratedAttribute]
protected void set_Notify(ISignal`1<NuGetNotification> value);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Shell.NuGetHost/<Search>d__20")]
public Task`1<IEnumerable`1<IPackageSearchMetadata>> Search(NuGetFeed feed, string searchTerm, SearchFilter filters, int skip, int take);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Shell.NuGetHost/<GetMetas>d__21")]
public Task`1<IEnumerable`1<IPackageSearchMetadata>> GetMetas(NuGetFeed feed, string packageId, SearchFilter filters, bool noCache);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Shell.NuGetHost/<Execute>d__22`2")]
public Task`1<TResult> Execute(NuGetFeed feed, Func`2<TResource, Task`1<TResult>> run, TResult emptyResult);
    private static string GetSummary(NuGetFeed feed);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Shell.NuGetHost/<GetReSharperResourceAsync>d__24`1")]
private Task`1<T> GetReSharperResourceAsync(NuGetFeed feed);
    public void RegisterNuGetCredentialService(Lifetime lifetime, ICredentialService credentialService);
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_0(INuGetLogMessage message);
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_1(NuGetNotification notification);
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ProjectModel.NuGet.ToolWindow.NuGetToolWindowAdapter : object {
    public bool IsAvailable { get; }
    public virtual bool get_IsAvailable();
    public virtual void ShowLookupTab(string searchQuery, NuGetLookupMode lookupMode, bool extendedSearch, IProject project);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.NuGet.ToolWindow.NuGetToolWindowObserver : object {
    [NotNullAttribute]
private ReadonlyToken myReadonlyToken;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <FolderTabIsActive>k__BackingField;
    public IProperty`1<bool> FolderTabIsActive { get; }
    public NuGetToolWindowObserver(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_FolderTabIsActive();
    [PublicAPIAttribute]
protected void SetFolderTabIsActive(bool value);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ProjectModel.NuGet.Unsorted.Implementation.NuGetRestoreProgressTracker : object {
    [CompilerGeneratedAttribute]
private IProperty`1<RestoreSession> <Session>k__BackingField;
    public IProperty`1<RestoreSession> Session { get; }
    public NuGetRestoreProgressTracker(Lifetime lifetime, SynchronizationPoints synchronizationPoints);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<RestoreSession> get_Session();
}
[SolutionComponentAttribute("10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ProjectModel.NuGet.Unsorted.Implementation.NuGetRestorer : object {
    private IShellLocks myShellLocks;
    private INuGetRestoreProgressTracker myNuGetRestoreProgressTracker;
    private NuGetOperator myNuGetOperator;
    private INugetRestoreWaiter myWaiter;
    private IList`1<CancellationTokenSource> myTokenSources;
    private object myTokenSync;
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Restoring>k__BackingField;
    public IProperty`1<bool> Restoring { get; }
    public bool CanRestore { get; }
    public NuGetRestorer(Lifetime lifetime, ILogger logger, ISettingsStore settingsStore, IShellLocks shellLocks, INuGetRestoreProgressTracker nuGetRestoreProgressTracker, NuGetOperator nuGetOperator, INugetRestoreWaiter waiter);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_Restoring();
    public virtual bool get_CanRestore();
    public virtual void BeginRestore(Lifetime lifetime, Action onRestore, bool isSilent);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_1();
}
public interface JetBrains.ProjectModel.NuGet.Unsorted.INuGetRestoreProgressTracker {
    public IProperty`1<RestoreSession> Session { get; }
    public abstract virtual IProperty`1<RestoreSession> get_Session();
}
[AssemblyToAssemblyReferencesResolverAttribute("100", "0")]
public class JetBrains.ProjectModel.NuGet.Unsorted.NuGetAssemblyToAssemblyResolverSimplified : object {
    private NuGetConfigManager myNuGetConfigManager;
    private AssemblyInfoDatabase myAssemblyInfoDataBase;
    private AssemblyNamesInterner myInterner;
    private IPlatformManager myPlatformManager;
    public NuGetAssemblyToAssemblyResolverSimplified(NuGetConfigManager nuGetConfigManager, AssemblyInfoDatabase assemblyInfoDataBase, AssemblyNamesInterner interner, IPlatformManager platformManager);
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.NuGet.Unsorted.NuGetAssemblyToAssemblyResolverSimplified/<ResolveReference>d__5")]
public sealed virtual IEnumerable`1<VirtualFileSystemPath> ResolveReference(ICollection`1<VirtualFileSystemPath> sourceAssemblyFile, AssemblyNameInfo referenceName);
}
[SettingsKeyAttribute("JetBrains.ProjectModel.Settings.Schema.HierarchySettings", "JetBrains.ProjectModel.Resources.Strings", "ConfiguresNuGetSettingDescription")]
public class JetBrains.ProjectModel.NuGet.Unsorted.NuGetSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "WriteLogToOutputSettingDescription")]
public OutputLogMode OutputLogMode;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "WaitTenSecondsBeforeRestoringPackagesShouldBeVisibleOnlyInInternalOnlyForManualTestingSettingDescription")]
public bool WaitTenSecondsBeforeRestoringPackages;
}
public enum JetBrains.ProjectModel.NuGet.Unsorted.OutputLogMode : Enum {
    public int value__;
    public static OutputLogMode None;
    public static OutputLogMode Notification;
    public static OutputLogMode Log;
}
public class JetBrains.ProjectModel.NuGet.Unsorted.RestoreSession : object {
    private Action myCancelAction;
    [CompilerGeneratedAttribute]
private IProperty`1<double> <Progress>k__BackingField;
    public IProperty`1<double> Progress { get; }
    public RestoreSession(Lifetime lifetime, Action cancelAction);
    [CompilerGeneratedAttribute]
public IProperty`1<double> get_Progress();
    public void Cancel();
}
public interface JetBrains.ProjectModel.NuGet.Util.IProcessingQueueRequest {
    public bool IsActual { get; }
    public abstract virtual bool get_IsActual();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.NuGet.Util.NuGetAsyncHelper : object {
    [ExtensionAttribute]
public static TimeoutLinkedTokenSource ToTimeoutTokenSource(CancellationToken origin, TimeSpan timeout);
    public static CancellationToken CreateTimeoutToken(TimeSpan timeout);
    [ExtensionAttribute]
public static CancellationToken AddTimeout(CancellationToken origin, TimeSpan timeout);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ProjectModel.NuGet.Util.NuGetCommonOperations : object {
    public virtual Task OpenFile(string fullPath);
    public virtual Task SaveSolutionExplorerNodeStates(ISolutionManager solutionManager);
    public virtual Task CollapseAllNodes(ISolutionManager solutionManager);
}
public class JetBrains.ProjectModel.NuGet.Util.NuGetMetadataFetchResult : object {
    [CompilerGeneratedAttribute]
private bool <IsSuccess>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSkipped>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public bool IsSuccess { get; }
    public bool IsSkipped { get; private set; }
    [NotNullAttribute]
public string Message { get; }
    private NuGetMetadataFetchResult(bool isSuccess, bool isSkipped, string message);
    [CompilerGeneratedAttribute]
public bool get_IsSuccess();
    [CompilerGeneratedAttribute]
public bool get_IsSkipped();
    [CompilerGeneratedAttribute]
private void set_IsSkipped(bool value);
    [CompilerGeneratedAttribute]
public string get_Message();
    public static NuGetMetadataFetchResult Success(string message);
    public static NuGetMetadataFetchResult Fail(string message);
    public static NuGetMetadataFetchResult Fail(Exception exception);
    public static NuGetMetadataFetchResult Skip(string message);
}
public class JetBrains.ProjectModel.NuGet.Util.NuGetPackageSearchMetadataBuilder : object {
    private IPackageSearchMetadata _metadata;
    private AsyncLazy`1<IEnumerable`1<VersionInfo>> _lazyVersionsFactory;
    private Nullable`1<bool> _prefixedReserved;
    private Nullable`1<long> _downloadsCount;
    private NuGetPackageSearchMetadataBuilder(IPackageSearchMetadata metadata);
    public NuGetPackageSearchMetadataBuilder WithVersions(AsyncLazy`1<IEnumerable`1<VersionInfo>> lazyVersionsFactory);
    public NuGetPackageSearchMetadataBuilder WithPrefixReserved(bool prefixReserved);
    public NuGetPackageSearchMetadataBuilder WithDownloadsCount(Nullable`1<long> downloadsCount);
    public IPackageSearchMetadata Build();
    public static NuGetPackageSearchMetadataBuilder FromMetadata(IPackageSearchMetadata metadata);
    public static NuGetPackageSearchMetadataBuilder FromIdentity(PackageIdentity identity);
    [CompilerGeneratedAttribute]
private Task`1<PackageDeprecationMetadata> <Build>b__9_0();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.NuGet.Util.NuGetPackageSearchMetadataExtensions : object {
    [ExtensionAttribute]
public static IPackageSearchMetadata WithVersions(IPackageSearchMetadata metadata, IEnumerable`1<VersionInfo> versions);
    [ExtensionAttribute]
public static IPackageSearchMetadata WithVersions(IPackageSearchMetadata metadata, Func`1<Task`1<IEnumerable`1<VersionInfo>>> asyncValueFactory);
    [ExtensionAttribute]
public static IPackageSearchMetadata WithVersions(IPackageSearchMetadata metadata, Func`1<IEnumerable`1<VersionInfo>> valueFactory);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IPackageSearchMetadata WithPrefixReserved(IPackageSearchMetadata metadata, bool prefixReserved);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IPackageSearchMetadata WithDownloadsCount(IPackageSearchMetadata metadata, Nullable`1<long> downloadsCount);
}
public class JetBrains.ProjectModel.NuGet.Util.NuGetVersionHelper : object {
    public static IUnsafeMarshaller`1<NuGetVersion> Marshaller;
    private static NuGetVersionHelper();
    public static NuGetVersion Read(UnsafeReader reader);
    public static void Write(UnsafeWriter writer, NuGetVersion value);
}
public class JetBrains.ProjectModel.NuGet.Util.ProcessingQueue`1 : object {
    private TimeSpan myOurObsoleteTimeSpan;
    private IShellLocks myLocks;
    private Lifetime myLifetime;
    private Func`2<T, Task`1<NuGetMetadataFetchResult>> myProcess;
    private JetFastSemiReenterableRWLock mySync;
    private FreeThreadedGroupingEvent myUpdatedGroupingEvent;
    private List`1<T> myElements;
    private Dictionary`2<T, DateTime> myFinishedElements;
    private int myEnqueueCounter;
    private int myActivationCounter;
    private int myProcessCounter;
    [CompilerGeneratedAttribute]
private ISimpleSignal <Updated>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessingQueueStats <Stats>k__BackingField;
    public ISimpleSignal Updated { get; private set; }
    public bool IsActive { get; private set; }
    public ProcessingQueueStats Stats { get; private set; }
    public int Size { get; }
    public ProcessingQueue`1(IShellLocks locks, Lifetime lifetime, Func`2<T, Task`1<NuGetMetadataFetchResult>> process);
    [CompilerGeneratedAttribute]
public ISimpleSignal get_Updated();
    [CompilerGeneratedAttribute]
private void set_Updated(ISimpleSignal value);
    [CompilerGeneratedAttribute]
public bool get_IsActive();
    [CompilerGeneratedAttribute]
private void set_IsActive(bool value);
    [CompilerGeneratedAttribute]
public ProcessingQueueStats get_Stats();
    [CompilerGeneratedAttribute]
private void set_Stats(ProcessingQueueStats value);
    private void Initialize();
    public void Enqueue(T request);
    public void Enqueue(IEnumerable`1<T> requests);
    public void Terminate(Predicate`1<T> predicate);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.NuGet.Util.ProcessingQueue`1/<ProcessAllAsync>d__28")]
private Task ProcessAllAsync();
    private void RemoveDuplicates();
    public int get_Size();
    public int Count(Func`2<T, bool> predicate);
    private bool IsAlreadyProcessed(T element);
    public string GetStatus();
    public void ClearHistory();
    [CompilerGeneratedAttribute]
private void <Initialize>b__24_0();
    [CompilerGeneratedAttribute]
private bool <ProcessAllAsync>b__28_0(T request);
}
public class JetBrains.ProjectModel.NuGet.Util.ProcessingQueueStats : object {
    [CompilerGeneratedAttribute]
private int <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SuccessCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FailCount>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <LastTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <TotalTime>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetMetadataFetchResult <LastResult>k__BackingField;
    public int TotalCount { get; private set; }
    public int SuccessCount { get; private set; }
    public int FailCount { get; private set; }
    public TimeSpan LastTime { get; private set; }
    public TimeSpan TotalTime { get; private set; }
    public TimeSpan AverageTime { get; }
    [NotNullAttribute]
public NuGetMetadataFetchResult LastResult { get; private set; }
    [NotNullAttribute]
public string LastMessage { get; }
    [CompilerGeneratedAttribute]
public int get_TotalCount();
    [CompilerGeneratedAttribute]
private void set_TotalCount(int value);
    [CompilerGeneratedAttribute]
public int get_SuccessCount();
    [CompilerGeneratedAttribute]
private void set_SuccessCount(int value);
    [CompilerGeneratedAttribute]
public int get_FailCount();
    [CompilerGeneratedAttribute]
private void set_FailCount(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_LastTime();
    [CompilerGeneratedAttribute]
private void set_LastTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_TotalTime();
    [CompilerGeneratedAttribute]
private void set_TotalTime(TimeSpan value);
    public TimeSpan get_AverageTime();
    [CompilerGeneratedAttribute]
public NuGetMetadataFetchResult get_LastResult();
    [CompilerGeneratedAttribute]
private void set_LastResult(NuGetMetadataFetchResult value);
    public string get_LastMessage();
    public void Add(NuGetMetadataFetchResult result, TimeSpan time);
    public virtual string ToString();
}
public class JetBrains.ProjectModel.NuGet.Util.TimeoutLinkedTokenSource : object {
    private CancellationTokenSource myLinkedTokenSource;
    private TimeoutTokenSource myTimeoutTokenSource;
    public bool IsExpired { get; }
    public TimeSpan Timeout { get; }
    public CancellationToken Token { get; }
    public TimeoutLinkedTokenSource(CancellationToken origin, TimeSpan timeout);
    public bool get_IsExpired();
    public TimeSpan get_Timeout();
    public CancellationToken get_Token();
}
[ZoneMarkerAttribute]
public class JetBrains.ProjectModel.NuGet.ZoneMarker : object {
}
public class JetBrains.ProjectModel.OperationFailedException : ApplicationException {
    public OperationFailedException(string message);
    public OperationFailedException(string message, Exception innerException);
}
public class JetBrains.ProjectModel.OutputAssemblyInfo : object {
    private AssemblyId myOutputAssemblyId;
    private AssemblyNameInfo myAssemblyNameInfo;
    private VirtualFileSystemPath myLocation;
    [NotNullAttribute]
public AssemblyNameInfo AssemblyNameInfo { get; }
    public AssemblyId OutputAssemblyId { get; }
    public VirtualFileSystemPath Location { get; }
    public OutputAssemblyInfo(AssemblyId outputAssemblyId, AssemblyNameInfo assemblyNameInfo, VirtualFileSystemPath location);
    public AssemblyNameInfo get_AssemblyNameInfo();
    public AssemblyId get_OutputAssemblyId();
    public VirtualFileSystemPath get_Location();
    protected bool Equals(OutputAssemblyInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.PathsUtil : object {
    [ExtensionAttribute]
public static PathMap TryGetPathMap(IProjectConfigurations configurations, TargetFrameworkId targetFrameworkId);
    [ExtensionAttribute]
public static PathMap TryGetPathMap(IProjectConfiguration configuration);
}
public class JetBrains.ProjectModel.Persistence.DbStringIntern : object {
    private OptimizedPersistentSortedMap`2<int, string> myMap;
    private object myLockObject;
    private Dictionary`2<int, string> myIntToString;
    private Dictionary`2<string, int> myStringToInt;
    private List`1<Pair`2<int, string>> myDataToSave;
    private int myMaxUsed;
    public DbStringIntern(Lifetime lifetime, IKeyValueDb db, string mapId);
    public void Load();
    public sealed virtual int Intern(string s);
    public sealed virtual bool TryGetInterned(int index, String& s);
    public void Save();
    public void Clear();
}
public class JetBrains.ProjectModel.Persistence.IntSlots : object {
    private List`1<int> mySlots;
    private int myNextIdx;
    private int myNextSlotAfterSlotsExhausted;
    public IntSlots(HashSet`1<int> taken);
    public int NextSlot();
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.Persistence.Marshallers.AssemblyFileMarshaller : ProjectModelElementMarshallerBase`1<IAssemblyFile> {
    private AssemblyInfoDatabase myAssemblyInfoDatabase;
    private IShellLocks myShellLocks;
    private IFileSystemTracker myFileSystemTracker;
    private ISolution mySolution;
    public AssemblyFileMarshaller(AssemblyInfoDatabase assemblyInfoDatabase, IShellLocks shellLocks, IFileSystemTracker fileSystemTracker, ISolution solution);
    protected virtual IAssemblyFile UnmarshallImpl(UnsafeReader reader, ProjectModelCaches projectModelCaches);
    protected virtual void MarshallImpl(UnsafeWriter writer, IAssemblyFile element, ProjectModelCaches projectModelCaches);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.Persistence.Marshallers.AssemblyMarshaller : ProjectModelElementMarshallerBase`1<Assembly> {
    private AssemblyCollection myAssemblyCollection;
    private ISolution mySolution;
    private AssemblyInfoDatabase myAssemblyInfoDatabase;
    private ChangeManager myChangeManager;
    private IShellLocks myLocks;
    public AssemblyMarshaller(AssemblyCollection assemblyCollection, ISolution solution, AssemblyInfoDatabase assemblyInfoDatabase, ChangeManager changeManager, IShellLocks locks);
    protected virtual Assembly UnmarshallImpl(UnsafeReader reader, ProjectModelCaches projectModelCaches);
    protected virtual void MarshallImpl(UnsafeWriter writer, Assembly element, ProjectModelCaches projectModelCaches);
    public static void UnmarshallSubItems(UnsafeReader reader, ProjectModelCaches projectModelCaches, Assembly assembly);
    private static void MarshallSubItems(UnsafeWriter writer, IAssembly element, ProjectModelCaches projectModelCaches);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.Persistence.Marshallers.GuidProjectReferenceMarshaller : ProjectModelElementMarshallerBase`1<GuidProjectReference> {
    protected virtual GuidProjectReference UnmarshallImpl(UnsafeReader reader, ProjectModelCaches projectModelCaches);
    protected virtual void MarshallImpl(UnsafeWriter writer, GuidProjectReference element, ProjectModelCaches projectModelCaches);
}
public interface JetBrains.ProjectModel.Persistence.Marshallers.IProjectModelElementMarshaller {
    public ProjectModelElementType ElementType { get; }
    public abstract virtual ProjectModelElementType get_ElementType();
    [CanBeNullAttribute]
public abstract virtual IProjectModelElement Unmarshall(UnsafeReader reader, ProjectModelCaches projectModelCaches);
    public abstract virtual void Marshall(UnsafeWriter writer, IProjectModelElement element, ProjectModelCaches projectModelCaches);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.Persistence.Marshallers.ProjectFileMarshaller : ProjectModelElementMarshallerBase`1<IProjectFile> {
    protected virtual IProjectFile UnmarshallImpl(UnsafeReader reader, ProjectModelCaches projectModelCaches);
    protected virtual void MarshallImpl(UnsafeWriter writer, IProjectFile projectFile, ProjectModelCaches projectModelCaches);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.Persistence.Marshallers.ProjectFolderMarshaller : ProjectModelElementMarshallerBase`1<IProjectFolder> {
    protected virtual bool IsApplicableImpl(IProjectFolder element);
    protected virtual IProjectFolder UnmarshallImpl(UnsafeReader reader, ProjectModelCaches projectModelCaches);
    protected virtual void MarshallImpl(UnsafeWriter writer, IProjectFolder element, ProjectModelCaches projectModelCaches);
    public static void UnmarshallSubItems(UnsafeReader reader, ProjectModelCaches projectModelCaches, ProjectFolderImpl folder);
    public static void MarshallSubItems(UnsafeWriter writer, ProjectFolderImpl projectFolder, ProjectModelCaches projectModelCaches);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.Persistence.Marshallers.ProjectMarshaller : ProjectModelElementMarshallerBase`1<IProject> {
    protected virtual IProject UnmarshallImpl(UnsafeReader reader, ProjectModelCaches projectModelCaches);
    protected virtual void MarshallImpl(UnsafeWriter writer, IProject project, ProjectModelCaches projectModelCaches);
}
public abstract class JetBrains.ProjectModel.Persistence.Marshallers.ProjectModelElementMarshallerBase : object {
    [CompilerGeneratedAttribute]
private ProjectModelElementType <ElementType>k__BackingField;
    public ProjectModelElementType ElementType { get; }
    protected ProjectModelElementMarshallerBase(ProjectModelElementType elementType);
    [CompilerGeneratedAttribute]
public sealed virtual ProjectModelElementType get_ElementType();
    [CanBeNullAttribute]
public abstract virtual IProjectModelElement Unmarshall(UnsafeReader reader, ProjectModelCaches projectModelCaches);
    public abstract virtual void Marshall(UnsafeWriter writer, IProjectModelElement element, ProjectModelCaches projectModelCaches);
}
public abstract class JetBrains.ProjectModel.Persistence.Marshallers.ProjectModelElementMarshallerBase`1 : ProjectModelElementMarshallerBase {
    protected ProjectModelElementMarshallerBase`1(ProjectModelElementType elementType);
    public sealed virtual IProjectModelElement Unmarshall(UnsafeReader reader, ProjectModelCaches projectModelCaches);
    public sealed virtual void Marshall(UnsafeWriter writer, IProjectModelElement element, ProjectModelCaches projectModelCaches);
    protected virtual bool IsApplicableImpl(T t);
    [CanBeNullAttribute]
protected abstract virtual T UnmarshallImpl(UnsafeReader reader, ProjectModelCaches projectModelCaches);
    protected abstract virtual void MarshallImpl(UnsafeWriter writer, T element, ProjectModelCaches projectModelCaches);
}
public enum JetBrains.ProjectModel.Persistence.Marshallers.ProjectModelElementType : Enum {
    public int value__;
    public static ProjectModelElementType PROJECT_FILE;
    public static ProjectModelElementType PROJECT_FOLDER;
    public static ProjectModelElementType PROJECT;
    public static ProjectModelElementType PROJECT_REFERENCE_GUID_PROJECT;
    public static ProjectModelElementType PROJECT_REFERENCE_SIMPLE_PROJECT;
    public static ProjectModelElementType PROJECT_REFERENCE_ASSEMBLY;
    public static ProjectModelElementType PROJECT_REFERENCE_SDK;
    public static ProjectModelElementType PROJECT_REFERENCE_UNRESOLVED;
    public static ProjectModelElementType PROJECT_REFERENCE_COM_ASSEMBLY;
    public static ProjectModelElementType PROJECT_REFERENCE_ROSLYN_ANALYZER;
    public static ProjectModelElementType ASSEMBLY;
    public static ProjectModelElementType ASSEMBLY_FILE;
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.Persistence.Marshallers.ProjectToAssemblyReferenceMarshaller : ProjectModelElementMarshallerBase`1<ProjectToAssemblyReference> {
    protected virtual bool IsApplicableImpl(ProjectToAssemblyReference t);
    protected virtual ProjectToAssemblyReference UnmarshallImpl(UnsafeReader reader, ProjectModelCaches projectModelCaches);
    protected virtual void MarshallImpl(UnsafeWriter writer, ProjectToAssemblyReference element, ProjectModelCaches projectModelCaches);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.Persistence.Marshallers.ProjectToComAssemblyReferenceMarshaller : ProjectModelElementMarshallerBase`1<ProjectToAssemblyReference> {
    protected virtual bool IsApplicableImpl(ProjectToAssemblyReference t);
    protected virtual ProjectToAssemblyReference UnmarshallImpl(UnsafeReader reader, ProjectModelCaches projectModelCaches);
    protected virtual void MarshallImpl(UnsafeWriter writer, ProjectToAssemblyReference element, ProjectModelCaches projectModelCaches);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.Persistence.Marshallers.ProjectToUnresolvedAssemblyReferenceMarshaller : ProjectModelElementMarshallerBase`1<ProjectToUnresolvedAssemblyReference> {
    protected virtual ProjectToUnresolvedAssemblyReference UnmarshallImpl(UnsafeReader reader, ProjectModelCaches projectModelCaches);
    protected virtual void MarshallImpl(UnsafeWriter writer, ProjectToUnresolvedAssemblyReference element, ProjectModelCaches projectModelCaches);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.Persistence.Marshallers.RoslynAnalyzerReferenceMarshaller : ProjectModelElementMarshallerBase`1<RoslynAnalyzerReference> {
    protected virtual RoslynAnalyzerReference UnmarshallImpl(UnsafeReader reader, ProjectModelCaches projectModelCaches);
    protected virtual void MarshallImpl(UnsafeWriter writer, RoslynAnalyzerReference element, ProjectModelCaches projectModelCaches);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.Persistence.Marshallers.SdkReferenceMarshaller : ProjectModelElementMarshallerBase`1<IProjectToSdkReference> {
    protected virtual IProjectToSdkReference UnmarshallImpl(UnsafeReader reader, ProjectModelCaches projectModelCaches);
    protected virtual void MarshallImpl(UnsafeWriter writer, IProjectToSdkReference element, ProjectModelCaches projectModelCaches);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.Persistence.Marshallers.SimpleProjectReferenceMarshaller : ProjectModelElementMarshallerBase`1<SimpleProjectToProjectReference> {
    protected virtual SimpleProjectToProjectReference UnmarshallImpl(UnsafeReader reader, ProjectModelCaches projectModelCaches);
    protected virtual void MarshallImpl(UnsafeWriter writer, SimpleProjectToProjectReference element, ProjectModelCaches projectModelCaches);
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.Persistence.PersistentProjectItemProperties : object {
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private ISolutionCaches mySolutionCaches;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private Dictionary`2<string, object> myMaps;
    [NotNullAttribute]
private Dictionary`2<string, Action`2<string, IProjectItem>> myMoveHandlers;
    public PersistentProjectItemProperties(Lifetime lifetime, ISolutionCaches solutionCaches, ISolution solution, ILogger logger, IShellLocks locks, ChangeManager changeManager);
    public void RegisterProperty(Lifetime lifetime, string propertyName, IUnsafeMarshaller`1<T> marshaller);
    public TValue GetProperty(IProjectItem element, string propertyName, TValue defaultValue);
    public TValue GetProperty(TProjectItem element, string propertyName, Func`2<TProjectItem, TValue> defaultValueFactory);
    public bool TryGetValue(TProjectItem element, string propertyName, TValue& value);
    public bool SetProperty(IProjectItem element, string propertyName, TValue newValue, TValue defaultValue, bool shouldNotifyPropertyChange);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <.ctor>b__7_0(ChangeEventArgs args);
}
[SolutionInstanceComponentAttribute("66")]
public class JetBrains.ProjectModel.Persistence.ProjectModelCaches : object {
    protected static Instantiation ProjectModelCachesInstantiation;
    private ISolution mySolution;
    private ISolutionCaches mySolutionCaches;
    private ILogger myLogger;
    private ProjectFilePropertiesFactory myProjectFilePropertiesFactory;
    private AssemblyCollection myAssemblyCollection;
    private ResolveContextManager myResolveContextManager;
    [CompilerGeneratedAttribute]
private ProjectModelElementIndices <Indices>k__BackingField;
    [CanBeNullAttribute]
private ProjectModelCacheUnmarshallState myUnmarshallState;
    private static int TopLevelProjectsIndex;
    private static int TopLevelAssembliesIndex;
    private OptimizedPersistentSortedMap`2<int, Int32[]> myTopLevelIndices;
    private OptimizedPersistentSortedMap`2<int, IProjectModelElement> myItemsMap;
    private OptimizedPersistentSortedMap`2<int, IProjectFileProperties> myProjectFilePropertiesMap;
    private OptimizedPersistentSortedMap`2<int, IProjectProperties> myProjectPropertiesMap;
    private DbStringIntern myStringIntern;
    public ProjectModelElementIndices Indices { get; }
    protected bool Enabled { get; }
    internal ISolution Solution { get; }
    [NotNullAttribute]
public ProjectModelCacheUnmarshallState UnmarshallState { get; }
    public VirtualFileSystemPath SolutionDirectory { get; }
    public ProjectModelCaches(Lifetime lifetime, ISolution solution, ISolutionCaches solutionCaches, ILogger logger, ProjectPropertiesFactory projectPropertiesFactory, ProjectFilePropertiesFactory projectFilePropertiesFactory, IEnumerable`1<IProjectModelElementMarshaller> elementMarshallers, ChangeManager changeManager, AssemblyCollection assemblyCollection, ResolveContextManager resolveContextManager, ISolutionLoadTasksScheduler tasksScheduler, ProjectModelCachesShellHelper1 helper);
    [CompilerGeneratedAttribute]
public ProjectModelElementIndices get_Indices();
    protected virtual bool get_Enabled();
    private void SaveTopLevelProjects();
    private void SaveAllAssemblies();
    private static bool ShouldSkipProject(IProject p);
    private bool ShouldSkipAssembly(IAssembly a);
    private bool ShouldSkipAssemblyFile(IAssemblyFile af);
    internal int Remove(IProjectModelElement removedElement);
    private void AddOrUpdate(IProjectModelElement element);
    internal ISolution get_Solution();
    public bool HasProjectModelCaches();
    public bool Load();
    private void ClearNotLoaded(HashSet`1<int> loadedItemIndices);
    private void ClearAll();
    public ProjectModelCacheUnmarshallState get_UnmarshallState();
    public IProjectFileProperties GetProjectFileProperties(int projectFileId);
    public void SetProjectFileProperties(int projectFileId, IProjectFileProperties properties);
    [CanBeNullAttribute]
public T TryGetProjectModelElement(int elementIndex);
    public void SetProjectModelElement(int elementIndex, IProjectModelElement element);
    public IProjectProperties GetProjectProperties(int projectIndex);
    public void SetProjectProperties(int projectIndex, IProjectProperties properties);
    public VirtualFileSystemPath get_SolutionDirectory();
    [CompilerGeneratedAttribute]
private int <SaveTopLevelProjects>b__21_1(IProject project);
    [CompilerGeneratedAttribute]
private bool <SaveAllAssemblies>b__22_0(IAssembly a);
    [CompilerGeneratedAttribute]
private int <SaveAllAssemblies>b__22_1(IAssembly a);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.Persistence.ProjectModelCachesShellHelper1 : object {
    [CompilerGeneratedAttribute]
private IViewableSet`1<ISolutionLoadTasksScheduler> <ReadyTasksSchedulers>k__BackingField;
    public IViewableSet`1<ISolutionLoadTasksScheduler> ReadyTasksSchedulers { get; }
    [CompilerGeneratedAttribute]
public IViewableSet`1<ISolutionLoadTasksScheduler> get_ReadyTasksSchedulers();
}
[ShellComponentAttribute("10")]
public class JetBrains.ProjectModel.Persistence.ProjectModelCachesShellHelper2 : object {
    private Dictionary`2<ISolutionLoadTasksScheduler, LifetimeDefinition> myTasksSchedulers;
    public ProjectModelCachesShellHelper2(Lifetime lifetime, IShellLocks shellLocks, IEnumerable`1<SolutionManagerBase> solutionManagers, ProjectModelCachesShellHelper1 helper1);
    private void SetTasksBarrier(Lifetime lifetime, ISolutionLoadTasksScheduler tasksScheduler);
}
public class JetBrains.ProjectModel.Persistence.ProjectModelCacheUnmarshallState : object {
    [NotNullAttribute]
public SolutionElement Solution;
    [NotNullAttribute]
private ProjectFilePropertiesFactory myProjectFilePropertiesFactory;
    [NotNullAttribute]
private IDictionary`2<Guid, IProjectFilePropertiesProvider> myProjectPropertiesFactories;
    private IList`1<IProjectModelElement> myProjectModelElements;
    public HashSet`1<int> LoadedItemIndices;
    public ProjectModelCacheUnmarshallState(SolutionElement solution, ProjectFilePropertiesFactory projectFilePropertiesFactory);
    public IProjectFilePropertiesProvider GetProjectPropertiesFactory(Guid guid);
    [CanBeNullAttribute]
public T Peek();
    public void Push(Lifetime lifetime, IProjectModelElement element);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Persistence.ProjectModelCacheUnmarshallStateEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static ProjectImpl GetProject(ProjectModelCacheUnmarshallState state);
    [ExtensionAttribute]
[NotNullAttribute]
public static ProjectFolderImpl GetFolder(ProjectModelCacheUnmarshallState state);
    [ExtensionAttribute]
[NotNullAttribute]
internal static Assembly GetAssembly(ProjectModelCacheUnmarshallState state);
}
public class JetBrains.ProjectModel.Persistence.ProjectModelElementIndices : object {
    [CompilerGeneratedAttribute]
private IntSlots <FreeSlots>k__BackingField;
    private ConcurrentDictionary`2<IProjectModelElement, Entry> myDictionary;
    public IntSlots FreeSlots { get; }
    public ProjectModelElementIndices(HashSet`1<int> keys);
    [CompilerGeneratedAttribute]
public IntSlots get_FreeSlots();
    public int GetOrCreatePersistentIndex(IProjectModelElement element);
    private int NextPersistentIndex();
    private int GetPersistentIndex(IProjectModelElement element);
    public void SetPersistentIndex(IProjectModelElement element, int index);
    public bool IsJustLoaded(IProjectModelElement element);
    public void SetJustLoaded(IProjectModelElement element);
    public void ClearJustLoaded(IProjectModelElement element);
    public int Remove(IProjectModelElement element);
}
public class JetBrains.ProjectModel.Persistence.UnsafeProjectModelElementMarshaller : object {
    private ProjectModelCaches myProjectModelCaches;
    private Dictionary`2<ProjectModelElementType, IProjectModelElementMarshaller> myMarshallers;
    private Dictionary`2<Type, IProjectModelElementMarshaller> myMarshallersByType;
    [CompilerGeneratedAttribute]
private IntSlots <FreeSlots>k__BackingField;
    private static byte NoMarshaller;
    [CanBeNullAttribute]
private IntSlots FreeSlots { get; public set; }
    public UnsafeProjectModelElementMarshaller(ProjectModelCaches projectModelCaches, IEnumerable`1<IProjectModelElementMarshaller> elementMarshallers);
    [CompilerGeneratedAttribute]
private IntSlots get_FreeSlots();
    [CompilerGeneratedAttribute]
public void set_FreeSlots(IntSlots value);
    private void Register(IProjectModelElementMarshaller marshaller);
    [NotNullAttribute]
private IProjectModelElementMarshaller GetMarshaller(ProjectModelElementType elementType);
    [CanBeNullAttribute]
public IProjectModelElementMarshaller TryGetMarshaller(IProjectModelElement element);
    public sealed virtual void Marshal(UnsafeWriter writer, IProjectModelElement value);
    public sealed virtual IProjectModelElement Unmarshal(UnsafeReader reader);
}
public class JetBrains.ProjectModel.Platforms.CompilePlatform : TargetPlatformBase {
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFrameworkId>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<VirtualFileSystemPath> <ReferenceAssembliesFolders>k__BackingField;
    [NotNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; }
    [NotNullAttribute]
public IReadOnlyCollection`1<VirtualFileSystemPath> ReferenceAssembliesFolders { get; }
    public CompilePlatform(TargetFrameworkId targetFrameworkId, VirtualFileSystemPath rootFolder, IReadOnlyCollection`1<VirtualFileSystemPath> referenceAssembliesFolders);
    [CompilerGeneratedAttribute]
public TargetFrameworkId get_TargetFrameworkId();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<VirtualFileSystemPath> get_ReferenceAssembliesFolders();
    [CanBeNullAttribute]
public VirtualFileSystemPath FindAssemblyByName(string assemblyName);
    public virtual string ToString();
}
[ShellComponentAttribute("10")]
public class JetBrains.ProjectModel.Platforms.DefaultPlatformConfigProvider : object {
    private Lifetime myLifetime;
    private ILogger myLogger;
    private IShellLocks myLocks;
    private IPlatformManager myPlatformManager;
    private Dictionary`2<TargetFrameworkId, VirtualFileSystemPath> myWebConfigPathsCache;
    [CompilerGeneratedAttribute]
private ISimpleSignal <Invalidated>k__BackingField;
    public ISimpleSignal Invalidated { get; }
    public DefaultPlatformConfigProvider(Lifetime lifetime, ILogger logger, IShellLocks locks, IPlatformManager platformManager);
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_Invalidated();
    public virtual VirtualFileSystemPath GetRootWebConfigPath(TargetFrameworkId targetFrameworkId);
    protected VirtualFileSystemPath GetOrCreate(TargetFrameworkId targetFrameworkId, Func`2<TargetFrameworkId, VirtualFileSystemPath> createAction);
    protected void Invalidate();
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0(bool _);
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <GetRootWebConfigPath>b__9_0(TargetFrameworkId id);
}
public abstract class JetBrains.ProjectModel.Platforms.FrameworkLocationHelperBase : object {
    [CompilerGeneratedAttribute]
private IInteractionContext <Context>k__BackingField;
    protected static IDictionary`2<string, FrameworkIdentifier> KnownFrameworks;
    public IInteractionContext Context { get; }
    public FrameworkLocationHelperBase(IInteractionContext context);
    private static FrameworkLocationHelperBase();
    [CompilerGeneratedAttribute]
public IInteractionContext get_Context();
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.Platforms.FrameworkLocationHelperBase/<GetFrameworksFromReferenceAssembliesFolder>d__5")]
protected IEnumerable`1<CompilePlatform> GetFrameworksFromReferenceAssembliesFolder(VirtualFileSystemPath path, Func`2<TargetFrameworkId, VirtualFileSystemPath> getRuntimeDir, Func`2<VirtualFileSystemPath, bool> checkFramework);
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.Platforms.FrameworkLocationHelperBase/<ProcessFrameworksFromReferenceAssembliesFolder>d__6")]
protected IEnumerable`1<CompilePlatform> ProcessFrameworksFromReferenceAssembliesFolder(TargetFrameworkId targetFrameworkId, VirtualFileSystemPath frameworkDir, Func`2<VirtualFileSystemPath, bool> checkFramework);
    [CanBeNullAttribute]
private CompilePlatform GetPlatformInfoFromFrameworkDir(VirtualFileSystemPath frameworkDir, TargetFrameworkId targetFrameworkId, Func`2<VirtualFileSystemPath, bool> checkFramework);
    protected VirtualFileSystemPath GetFrameworkListPath(VirtualFileSystemPath frameworkDir);
    protected bool CheckFrameworkListPath(VirtualFileSystemPath frameworkDir);
    protected bool CheckFrameworkMscorlibPath(VirtualFileSystemPath frameworkDir);
    [CanBeNullAttribute]
private VirtualFileSystemPath GetBaseFrameworkDir(VirtualFileSystemPath frameworkDir);
    protected abstract virtual IEnumerable`1<VirtualFileSystemPath> GetExtensionSdksFolders();
    protected IReadOnlyCollection`1<SdkInfo> GetExtensionSdks(VirtualFileSystemPath sdkRoot, string targetPlatformIdentifier, string targetPlatformVersion);
    protected IList`1<SdkInfo> GetExtensionSdks(VirtualFileSystemPath sdkRoot);
    public sealed virtual IReadOnlyCollection`1<CompilePlatform> GetClassicDotNetFrameworkCompilePlatforms();
    public sealed virtual IReadOnlyCollection`1<RuntimePlatform> GetClassicDotNetFrameworkRuntimePlatforms();
    protected virtual ILookup`2<Version, ReferenceAssemblyFolder> GetReferenceAssembliesLookup();
    [CanBeNullAttribute]
protected virtual VirtualFileSystemPath GetClassicDotNetFrameworkRuntimePath(NuGetVersion version);
    [NotNullAttribute]
protected virtual NuGetVersion GetClassicDotNetFramework4RuntimeVersion();
    public abstract virtual IReadOnlyCollection`1<CompilePlatform> GetSilverlightCompilePlatforms();
    public abstract virtual IReadOnlyCollection`1<RuntimePlatform> GetSilverlightRuntimePlatforms();
    public abstract virtual IReadOnlyCollection`1<CompilePlatform> GetMicroFrameworkCompilePlatforms();
    public abstract virtual IReadOnlyCollection`1<RuntimePlatform> GetMicroFrameworkRuntimePlatforms();
    public abstract virtual IReadOnlyCollection`1<CompilePlatform> GetThirdPartyCompilePlatforms();
    public abstract virtual IReadOnlyCollection`1<SdkInfo> GetWindowsSdk();
    public abstract virtual IReadOnlyCollection`1<SdkInfo> GetDotNetSdk();
    public abstract virtual VirtualFileSystemPath GetNetPortableReferenceAssembliesPath();
    public abstract virtual VirtualFileSystemPath GetReferenceAssembliesNetCoreFrameworkPath(Version netCoreVersion);
    public abstract virtual VirtualFileSystemPath GetWindows8PlatfromSdkFolder(Version version);
    public abstract virtual VirtualFileSystemPath GetSharepointFilesPath(JetHashSet`1& numberFolders);
    [ObsoleteAttribute]
public abstract virtual VirtualFileSystemPath GetNetFrameworkDirectory(Version version);
    public abstract virtual Version[] EnumerateInstalledNetFrameworks();
    public abstract virtual VirtualFileSystemPath GacPath40();
    public abstract virtual VirtualFileSystemPath GacPath();
    [CompilerGeneratedAttribute]
internal static void <GetClassicDotNetFrameworkCompilePlatforms>g__addCompilePlatforms|15_0(List`1<ReferenceAssemblyFolder> folders, Version version, bool isClient, <>c__DisplayClass15_0& );
    [CompilerGeneratedAttribute]
internal static void <GetClassicDotNetFrameworkRuntimePlatforms>g__addRuntimePlatform|16_0(NuGetVersion version, VirtualFileSystemPath rootFolder, VirtualFileSystemPath frameworkSpecificRootFolder, <>c__DisplayClass16_0& );
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.Platforms.FrameworkLocationService : object {
    private IProperty`1<IFrameworkLocationHelper> myHelper;
    public IProperty`1<IFrameworkLocationHelper> Current { get; }
    public FrameworkLocationService(Lifetime lifetime);
    public IProperty`1<IFrameworkLocationHelper> get_Current();
    public void SetHelper(IFrameworkLocationHelper value);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ProjectModel.Platforms.ICompilePlatformProvider {
    [CanBeNullAttribute]
public abstract virtual TargetFrameworkId DetectTargetFrameworkIdByReferences(AssemblyNameInfo corlibReference, IReadOnlyCollection`1<AssemblyNameInfo> otherReferences, IReadOnlyCollection`1<CompilePlatform> platforms);
}
public interface JetBrains.ProjectModel.Platforms.IFrameworkLocationHelper {
    public abstract virtual IReadOnlyCollection`1<CompilePlatform> GetClassicDotNetFrameworkCompilePlatforms();
    public abstract virtual IReadOnlyCollection`1<RuntimePlatform> GetClassicDotNetFrameworkRuntimePlatforms();
    public abstract virtual IReadOnlyCollection`1<CompilePlatform> GetSilverlightCompilePlatforms();
    public abstract virtual IReadOnlyCollection`1<RuntimePlatform> GetSilverlightRuntimePlatforms();
    public abstract virtual IReadOnlyCollection`1<CompilePlatform> GetMicroFrameworkCompilePlatforms();
    public abstract virtual IReadOnlyCollection`1<RuntimePlatform> GetMicroFrameworkRuntimePlatforms();
    public abstract virtual IReadOnlyCollection`1<CompilePlatform> GetThirdPartyCompilePlatforms();
    public abstract virtual IReadOnlyCollection`1<SdkInfo> GetWindowsSdk();
    public abstract virtual IReadOnlyCollection`1<SdkInfo> GetDotNetSdk();
    [CanBeNullAttribute]
public abstract virtual VirtualFileSystemPath GetReferenceAssembliesNetCoreFrameworkPath(Version netCoreVersion);
    [CanBeNullAttribute]
public abstract virtual VirtualFileSystemPath GetWindows8PlatfromSdkFolder(Version version);
    [CanBeNullAttribute]
public abstract virtual VirtualFileSystemPath GetNetFrameworkDirectory(Version version);
    [CanBeNullAttribute]
public abstract virtual VirtualFileSystemPath GetNetPortableReferenceAssembliesPath();
    [CanBeNullAttribute]
public abstract virtual VirtualFileSystemPath GetSharepointFilesPath(JetHashSet`1& numberFolders);
    public abstract virtual Version[] EnumerateInstalledNetFrameworks();
    public abstract virtual VirtualFileSystemPath GacPath();
    public abstract virtual VirtualFileSystemPath GacPath40();
}
public interface JetBrains.ProjectModel.Platforms.ILivePlatformsProvider {
    [NotNullAttribute]
public ISimpleSignal HasChanged { get; }
    public abstract virtual ISimpleSignal get_HasChanged();
}
public interface JetBrains.ProjectModel.Platforms.IPerProjectCompilePlatformProvider {
    [NotNullAttribute]
public abstract virtual OneToListMap`2<PlatformsProjectKey, CompilePlatform> GetPlatforms(ISolution solution);
}
public interface JetBrains.ProjectModel.Platforms.IPlatformConfigProvider {
    [NotNullAttribute]
public ISimpleSignal Invalidated { get; }
    [NotNullAttribute]
public abstract virtual VirtualFileSystemPath GetRootWebConfigPath(TargetFrameworkId targetFrameworkId);
    public abstract virtual ISimpleSignal get_Invalidated();
}
public interface JetBrains.ProjectModel.Platforms.IPlatformManager {
    public ISimpleSignal Invalidated { get; }
    public abstract virtual IReadOnlyCollection`1<CompilePlatform> GetCompilePlatforms(TargetFrameworkId id, IProject project);
    public abstract virtual IReadOnlyCollection`1<RuntimePlatform> GetRuntimePlatforms(TargetFrameworkId id, IProject project, IRuntimeContext context);
    public abstract virtual IReadOnlyCollection`1<CompilePlatform> GetAllCompilePlatforms();
    public abstract virtual IReadOnlyCollection`1<RuntimePlatform> GetAllRuntimePlatforms();
    public abstract virtual IReadOnlyCollection`1<CompilePlatform> ComputeShellCompilePlatforms();
    public abstract virtual bool IsPlatformFolder(VirtualFileSystemPath folder, bool includeRuntime);
    public abstract virtual bool IsPlatformAssembly(VirtualFileSystemPath assemblyPath, bool includeRuntime);
    public abstract virtual ISimpleSignal get_Invalidated();
    public abstract virtual void Invalidate();
    public abstract virtual void InvalidateProjectPlatforms();
    public abstract virtual void Dump(TextWriter writer, IProject project);
    public abstract virtual void Dump(TextWriter writer);
}
public interface JetBrains.ProjectModel.Platforms.IPlatformsProvider {
    public int Priority { get; }
    public bool ImmutableAssembliesInFileSystem { get; }
    public abstract virtual int get_Priority();
    public abstract virtual bool get_ImmutableAssembliesInFileSystem();
}
public interface JetBrains.ProjectModel.Platforms.IPlatformsProvider`1 {
    [NotNullAttribute]
public abstract virtual PlatformsResult`1<T> GetPlatforms(PlatformsContext context);
}
public interface JetBrains.ProjectModel.Platforms.IRuntimeContext {
}
public interface JetBrains.ProjectModel.Platforms.IRuntimePlatformProvider {
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ProjectModel.Platforms.IRuntimeSelector {
    public int Priority { get; }
    public abstract virtual int get_Priority();
    public abstract virtual bool IsApplicable(TargetFrameworkId id, IProject project, IRuntimeContext context);
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<RuntimePlatform> Select(TargetFrameworkId id, IProject project, IRuntimeContext context, IReadOnlyCollection`1<RuntimePlatform> knownRuntimePlatforms);
}
public abstract class JetBrains.ProjectModel.Platforms.LivePlatformsProviderBase : object {
    [CompilerGeneratedAttribute]
private ISimpleSignal <HasChanged>k__BackingField;
    public ISimpleSignal HasChanged { get; }
    public int Priority { get; }
    public bool ImmutableAssembliesInFileSystem { get; }
    protected LivePlatformsProviderBase(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_HasChanged();
    protected void OnChange();
    public abstract virtual int get_Priority();
    public abstract virtual bool get_ImmutableAssembliesInFileSystem();
}
public class JetBrains.ProjectModel.Platforms.NetPlatformsProviderUtil : object {
    public static Byte[] NetFrameworkPublicToken;
    private static PublicKeyToken NetFrameworkPublicToken2;
    private static NetPlatformsProviderUtil();
    public static TargetFrameworkId DetectPlatformIdByReferences(AssemblyNameInfo cr, IReadOnlyCollection`1<AssemblyNameInfo> otherReferences, IReadOnlyCollection`1<CompilePlatform> platforms);
    [CanBeNullAttribute]
public static VirtualFileSystemPath ParseTargetFolder(VirtualFileSystemPath child);
    private static TargetFrameworkId FindPlatformForCorlibReference(Version mscorlibVersion, IReadOnlyCollection`1<CompilePlatform> platforms);
}
public class JetBrains.ProjectModel.Platforms.PerProjectPlatformsStore : object {
    private IReadOnlyList`1<IPerProjectCompilePlatformProvider> myProviders;
    private Dictionary`2<IPerProjectCompilePlatformProvider, OneToListMap`2<PlatformsProjectKey, CompilePlatform>> myProjectCompilePlatforms;
    public PerProjectPlatformsStore(Lifetime lifetime, PlatformManager platformManager, IReadOnlyList`1<IPerProjectCompilePlatformProvider> providers);
    public void ReloadPlatforms(ISolution solution);
    [NotNullAttribute]
public IReadOnlyCollection`1<CompilePlatform> GetPlatformsForAllProjects();
    [NotNullAttribute]
public IReadOnlyCollection`1<CompilePlatform> GetPlatforms(IProject project);
    [NotNullAttribute]
public Dictionary`2<IPerProjectCompilePlatformProvider, OneToListMap`2<PlatformsProjectKey, CompilePlatform>> GetPlatformsByProvider();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Platforms.PlatformDetectionUtils : object {
    [ExtensionAttribute]
public static TargetFrameworkId FindPlatform(IEnumerable`1<CompilePlatform> platforms, FrameworkIdentifier identifier, Version version, ProfileIdentifier profile);
}
[ShellComponentAttribute("10")]
public class JetBrains.ProjectModel.Platforms.PlatformManager : object {
    private ILogger myLogger;
    private IShellLocks myShellLocks;
    private FrameworkLocationService myFrameworkLocationService;
    private IImmutableList`1<IRuntimeSelector> myRuntimeSelectors;
    [CanBeNullAttribute]
private ISolution myCurrentSolution;
    [CanBeNullAttribute]
private ISolutionToolset myCurrentSolutionToolset;
    [CanBeNullAttribute]
private CompilePlatform myLatestNetFramework1;
    [CanBeNullAttribute]
private CompilePlatform myLatestNetFramework2;
    [CanBeNullAttribute]
private CompilePlatform myLatestNetFramework4;
    [NotNullAttribute]
private OneToListMap`2<VirtualFileSystemPath, PrefixInfo> myCompilePlatformFoldersPrefixes;
    [NotNullAttribute]
private HashSet`1<VirtualFileSystemPath> myRuntimePlatformFolders;
    [NotNullAttribute]
private object myLocker;
    [NotNullAttribute]
private PlatformStore`1<CompilePlatform> myCompilePlatformsStore;
    [NotNullAttribute]
private PlatformStore`1<RuntimePlatform> myRuntimePlatformsStore;
    [NotNullAttribute]
private PerProjectPlatformsStore myPerProjectCompilePlatformsStore;
    private State myState;
    private ThreadLocal`1<bool> myForbidPlatformRecalculation;
    [CompilerGeneratedAttribute]
private ISimpleSignal <Invalidated>k__BackingField;
    public ISimpleSignal Invalidated { get; }
    [CanBeNullAttribute]
private ISolution CurrentSolution { get; private set; }
    public PlatformManager(Lifetime lifetime, ILogger logger, FrameworkLocationService frameworkLocationService, IShellLocks shellLocks, IEnumerable`1<ICompilePlatformProvider> compilePlatformProviders, IEnumerable`1<IRuntimePlatformProvider> runtimePlatformProviders, IReadyImmutableList`1<ILivePlatformsProvider> livePlatformsProviders, IImmutableList`1<IPerProjectCompilePlatformProvider> perProjectCompilePlatformProviders, IImmutableList`1<IRuntimeSelector> runtimeSelectors);
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_Invalidated();
    private ISolution get_CurrentSolution();
    private void set_CurrentSolution(ISolution value);
    private void ReloadPlatforms();
    private void CollectCompilePlatformsPrefixes(IEnumerable`1<CompilePlatform> compilePlatforms, bool immutableAssembliesInFileSystem);
    private void CollectRuntimePlatformsPrefixes(IEnumerable`1<RuntimePlatform> runtimePlatforms);
    [CanBeNullAttribute]
private static ReferencesAndTargetFramework GetReferences(IAssemblyLocation assemblyLocation);
    [ObsoleteAttribute("Use overload with IAssemblyLocation")]
private sealed virtual override TargetFrameworkId JetBrains.Application.Infra.IAssemblyInfoDatabaseBridge.GetAssemblyTargetFrameworkId(VirtualFileSystemPath assemblyPath);
    private sealed virtual override TargetFrameworkId JetBrains.Application.Infra.IAssemblyInfoDatabaseBridge.GetAssemblyTargetFrameworkId(IAssemblyLocation assemblyLocation);
    [CanBeNullAttribute]
private TargetFrameworkId GuessTargetFrameworkIdByCorlib(AssemblyNameInfo corlibReference, IReadOnlyCollection`1<AssemblyNameInfo> otherReferences);
    public sealed virtual bool IsPlatformFolder(VirtualFileSystemPath folder, bool includeRuntime);
    public sealed virtual bool IsPlatformAssembly(VirtualFileSystemPath assemblyPath, bool includeRuntime);
    private sealed virtual override bool JetBrains.Application.Infra.IAssemblyInfoDatabaseBridge.IsBlessedAssembly(VirtualFileSystemPath assemblyPath);
    public sealed virtual void Invalidate();
    public sealed virtual void InvalidateProjectPlatforms();
    public ForbidPlatformRecalculationCookie ForbidPlatformRecalculation();
    [CanBeNullAttribute]
private TargetFrameworkId GuessTargetFrameworkIdByPath(VirtualFileSystemPath assemblyPath);
    [CanBeNullAttribute]
private TargetFrameworkId GuessTargetFrameworkIdByPathInNuGetPackage(VirtualFileSystemPath assemblyPath);
    public sealed virtual void Dump(TextWriter writer);
    public sealed virtual void Dump(TextWriter writer, IProject project);
    public sealed virtual IReadOnlyCollection`1<CompilePlatform> ComputeShellCompilePlatforms();
    public sealed virtual IReadOnlyCollection`1<CompilePlatform> GetAllCompilePlatforms();
    public sealed virtual IReadOnlyCollection`1<RuntimePlatform> GetAllRuntimePlatforms();
    public sealed virtual IReadOnlyCollection`1<CompilePlatform> GetCompilePlatforms(TargetFrameworkId id, IProject project);
    public sealed virtual IReadOnlyCollection`1<RuntimePlatform> GetRuntimePlatforms(TargetFrameworkId id, IProject project, IRuntimeContext context);
    [CompilerGeneratedAttribute]
private void <.ctor>b__20_1(bool _);
    [CompilerGeneratedAttribute]
private void <.ctor>b__20_0(Lifetime _, IFrameworkLocationHelper _);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Platforms.PlatformManagerExtensions : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static RuntimePlatform GetHighestNetFrameworkRuntimePlatform(IPlatformManager platformManager);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static CompilePlatform GetHighestNetFrameworkCompilePlatform(IPlatformManager platformManager);
}
public class JetBrains.ProjectModel.Platforms.PlatformsContext : object {
    [CompilerGeneratedAttribute]
private ISolutionToolset <SolutionToolset>k__BackingField;
    [CanBeNullAttribute]
public ISolutionToolset SolutionToolset { get; }
    public PlatformsContext(ISolution solution);
    public PlatformsContext(ISolutionToolset solutionToolset);
    [CompilerGeneratedAttribute]
public ISolutionToolset get_SolutionToolset();
}
[IsReadOnlyAttribute]
public class JetBrains.ProjectModel.Platforms.PlatformsProjectKey : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Guid>k__BackingField;
    public string Name { get; }
    public Guid Guid { get; }
    public PlatformsProjectKey(string name, Guid guid);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Guid get_Guid();
    public sealed virtual bool Equals(PlatformsProjectKey other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
[BaseTypeRequiredAttribute("JetBrains.ProjectModel.Platforms.IPlatformsProvider")]
public class JetBrains.ProjectModel.Platforms.PlatformsProviderAttribute : ShellComponentAttribute {
    public PlatformsProviderAttribute(Instantiation instantiation);
}
public class JetBrains.ProjectModel.Platforms.PlatformsResult`1 : object {
    [NotNullAttribute]
public static PlatformsResult`1<T> Empty;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<T> <Platforms>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StopSearch>k__BackingField;
    [NotNullAttribute]
public IReadOnlyCollection`1<T> Platforms { get; }
    public bool StopSearch { get; }
    public PlatformsResult`1(IReadOnlyCollection`1<T> platforms, bool stopSearch);
    private static PlatformsResult`1();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<T> get_Platforms();
    [CompilerGeneratedAttribute]
public bool get_StopSearch();
}
internal class JetBrains.ProjectModel.Platforms.PlatformStore`1 : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IPlatformsProvider`1<T>> <providers>P;
    private OneToListMap`2<IPlatformsProvider`1<T>, T> myPlatformsByProvider;
    public PlatformStore`1(IEnumerable`1<IPlatformsProvider`1<T>> providers);
    public void ReloadPlatforms(PlatformsContext context);
    [NotNullAttribute]
public IReadOnlyCollection`1<T> ComputePlatforms(PlatformsContext context);
    [NotNullAttribute]
private OneToListMap`2<IPlatformsProvider`1<T>, T> DoComputePlatforms(PlatformsContext context);
    [NotNullAttribute]
public IReadOnlyCollection`1<T> GetPlatforms();
    [NotNullAttribute]
public OneToListMap`2<IPlatformsProvider`1<T>, T> GetPlatformsByProvider();
}
public static class JetBrains.ProjectModel.Platforms.PlatformUtils : object {
    [NotNullAttribute]
public static TargetFrameworkId CreateTargetFrameworkId(ICollection`1<Guid> projectTypeGuids, TargetFrameworkId defaultTargetFrameworkId, Version targetFrameworkVersion);
    [NotNullAttribute]
public static VirtualFileSystemPath GetProgramFiles86(IInteractionContext context);
    [NotNullAttribute]
public static VirtualFileSystemPath GetProgramFiles(IInteractionContext context);
    [NotNullAttribute]
public static VirtualFileSystemPath GetReferencedAssembliesDir(IInteractionContext context);
    public static void FindPlatformsInDirectory(VirtualFileSystemPath platformsRoot, List`1<CompilePlatform> result);
}
[PlatformsProviderAttribute("16")]
public class JetBrains.ProjectModel.Platforms.Providers.ClassicDotNetFrameworkPlatformsProvider : LivePlatformsProviderBase {
    [NotNullAttribute]
private FrameworkLocationService myFrameworkLocationService;
    public int Priority { get; }
    public bool ImmutableAssembliesInFileSystem { get; }
    public ClassicDotNetFrameworkPlatformsProvider(Lifetime lifetime, FrameworkLocationService frameworkLocationService);
    public virtual int get_Priority();
    public virtual bool get_ImmutableAssembliesInFileSystem();
    private sealed virtual override PlatformsResult`1<CompilePlatform> JetBrains.ProjectModel.Platforms.IPlatformsProvider<JetBrains.ProjectModel.Platforms.CompilePlatform>.GetPlatforms(PlatformsContext context);
    private sealed virtual override PlatformsResult`1<RuntimePlatform> JetBrains.ProjectModel.Platforms.IPlatformsProvider<JetBrains.ProjectModel.Platforms.RuntimePlatform>.GetPlatforms(PlatformsContext context);
    public sealed virtual TargetFrameworkId DetectTargetFrameworkIdByReferences(AssemblyNameInfo corlibReference, IReadOnlyCollection`1<AssemblyNameInfo> otherReferences, IReadOnlyCollection`1<CompilePlatform> platforms);
    protected virtual bool IsValidOnCurrentOperationSystem();
    protected virtual bool CompilePlatformFilter(CompilePlatform compilePlatform);
}
[PlatformsProviderAttribute("16")]
public class JetBrains.ProjectModel.Platforms.Providers.ClassicDotNetPortablePlatformsProvider : object {
    [NotNullAttribute]
private FrameworkLocationService myFrameworkLocationService;
    [NotNullAttribute]
private static Dictionary`2<Version, Version> ourPortableToFrameworkVersion;
    public int Priority { get; }
    public bool ImmutableAssembliesInFileSystem { get; }
    public ClassicDotNetPortablePlatformsProvider(FrameworkLocationService frameworkLocationService);
    private static ClassicDotNetPortablePlatformsProvider();
    public sealed virtual int get_Priority();
    public sealed virtual bool get_ImmutableAssembliesInFileSystem();
    public sealed virtual PlatformsResult`1<CompilePlatform> GetPlatforms(PlatformsContext context);
    public sealed virtual TargetFrameworkId DetectTargetFrameworkIdByReferences(AssemblyNameInfo corlibReference, IReadOnlyCollection`1<AssemblyNameInfo> otherReferences, IReadOnlyCollection`1<CompilePlatform> platforms);
    [CanBeNullAttribute]
private static Version ParseVersionFromFolderName(string input);
}
[PlatformsProviderAttribute("16")]
public class JetBrains.ProjectModel.Platforms.Providers.DotNetCorePlatformsProvider : LivePlatformsProviderBase {
    private DotNetCoreRuntimeService myDotNetCoreRuntimeService;
    public int Priority { get; }
    public bool ImmutableAssembliesInFileSystem { get; }
    public DotNetCorePlatformsProvider(Lifetime lifetime, DotNetCoreRuntimeService dotNetCoreRuntimeService);
    public virtual int get_Priority();
    public virtual bool get_ImmutableAssembliesInFileSystem();
    private sealed virtual override PlatformsResult`1<CompilePlatform> JetBrains.ProjectModel.Platforms.IPlatformsProvider<JetBrains.ProjectModel.Platforms.CompilePlatform>.GetPlatforms(PlatformsContext context);
    private sealed virtual override PlatformsResult`1<RuntimePlatform> JetBrains.ProjectModel.Platforms.IPlatformsProvider<JetBrains.ProjectModel.Platforms.RuntimePlatform>.GetPlatforms(PlatformsContext context);
    public sealed virtual TargetFrameworkId DetectTargetFrameworkIdByReferences(AssemblyNameInfo corlibReference, IReadOnlyCollection`1<AssemblyNameInfo> otherReferences, IReadOnlyCollection`1<CompilePlatform> platforms);
}
[PlatformsProviderAttribute("16")]
public class JetBrains.ProjectModel.Platforms.Providers.MicroFrameworkPlatformsProvider : object {
    private FrameworkLocationService myFrameworkLocationService;
    public int Priority { get; }
    public bool ImmutableAssembliesInFileSystem { get; }
    public MicroFrameworkPlatformsProvider(FrameworkLocationService frameworkLocationService);
    public sealed virtual int get_Priority();
    public sealed virtual bool get_ImmutableAssembliesInFileSystem();
    private sealed virtual override PlatformsResult`1<CompilePlatform> JetBrains.ProjectModel.Platforms.IPlatformsProvider<JetBrains.ProjectModel.Platforms.CompilePlatform>.GetPlatforms(PlatformsContext context);
    private sealed virtual override PlatformsResult`1<RuntimePlatform> JetBrains.ProjectModel.Platforms.IPlatformsProvider<JetBrains.ProjectModel.Platforms.RuntimePlatform>.GetPlatforms(PlatformsContext context);
    public sealed virtual TargetFrameworkId DetectTargetFrameworkIdByReferences(AssemblyNameInfo corlibReference, IReadOnlyCollection`1<AssemblyNameInfo> otherReferences, IReadOnlyCollection`1<CompilePlatform> platforms);
}
[PlatformsProviderAttribute("16")]
public class JetBrains.ProjectModel.Platforms.Providers.MonoFrameworkPlatformsProvider : LivePlatformsProviderBase {
    private MonoRuntimeService myMonoRuntimeService;
    public int Priority { get; }
    public bool ImmutableAssembliesInFileSystem { get; }
    public MonoFrameworkPlatformsProvider(Lifetime lifetime, MonoRuntimeService monoRuntimeService);
    public virtual int get_Priority();
    public virtual bool get_ImmutableAssembliesInFileSystem();
    private sealed virtual override PlatformsResult`1<CompilePlatform> JetBrains.ProjectModel.Platforms.IPlatformsProvider<JetBrains.ProjectModel.Platforms.CompilePlatform>.GetPlatforms(PlatformsContext context);
    private static void CollectCompilePlatformsFromRoot(VirtualFileSystemPath referenceAssembliesRoot, List`1<CompilePlatform> result);
    private sealed virtual override PlatformsResult`1<RuntimePlatform> JetBrains.ProjectModel.Platforms.IPlatformsProvider<JetBrains.ProjectModel.Platforms.RuntimePlatform>.GetPlatforms(PlatformsContext context);
    public sealed virtual TargetFrameworkId DetectTargetFrameworkIdByReferences(AssemblyNameInfo corlibReference, IReadOnlyCollection`1<AssemblyNameInfo> otherReferences, IReadOnlyCollection`1<CompilePlatform> platforms);
}
[PlatformsProviderAttribute("16")]
public class JetBrains.ProjectModel.Platforms.Providers.MonoPortablePlatformsProvider : LivePlatformsProviderBase {
    private MonoRuntimeService myMonoRuntimeService;
    public int Priority { get; }
    public bool ImmutableAssembliesInFileSystem { get; }
    public MonoPortablePlatformsProvider(Lifetime lifetime, MonoRuntimeService monoRuntimeService);
    public virtual int get_Priority();
    public virtual bool get_ImmutableAssembliesInFileSystem();
    public sealed virtual PlatformsResult`1<CompilePlatform> GetPlatforms(PlatformsContext context);
    [CanBeNullAttribute]
private static Version Parse(string name);
    public sealed virtual TargetFrameworkId DetectTargetFrameworkIdByReferences(AssemblyNameInfo corlibReference, IReadOnlyCollection`1<AssemblyNameInfo> otherReferences, IReadOnlyCollection`1<CompilePlatform> platforms);
}
public abstract class JetBrains.ProjectModel.Platforms.Providers.NuGetPlatformProvider : LivePlatformsProviderBase {
    protected static string NetStandardPlatform;
    protected static string NetCoreAppPlatform;
    public int Priority { get; }
    public bool ImmutableAssembliesInFileSystem { get; }
    protected NuGetPlatformProvider(Lifetime lifetime);
    public virtual int get_Priority();
    public virtual bool get_ImmutableAssembliesInFileSystem();
    [NotNullAttribute]
protected IReadOnlyCollection`1<CompilePlatform> FindNetCoreAppPlatformsFromLocation(string packageId, VirtualFileSystemPath root);
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.Platforms.Providers.NuGetPlatformProvider/<FindNetStandardPlatforms>d__8")]
[NotNullAttribute]
private IEnumerable`1<CompilePlatform> FindNetStandardPlatforms(VirtualFileSystemPath root);
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.Platforms.Providers.NuGetPlatformProvider/<FindNetCoreAppPlatforms>d__9")]
[NotNullAttribute]
private IEnumerable`1<CompilePlatform> FindNetCoreAppPlatforms(VirtualFileSystemPath root);
}
[PlatformsProviderAttribute("16")]
public class JetBrains.ProjectModel.Platforms.Providers.SilverlightPlatformsProvider : object {
    private static Byte[] ourSilverlightPublicToken;
    private static PublicKeyToken ourSilverlightPublicToken2;
    private FrameworkLocationService myFrameworkLocationService;
    public int Priority { get; }
    public bool ImmutableAssembliesInFileSystem { get; }
    public SilverlightPlatformsProvider(FrameworkLocationService frameworkLocationService);
    private static SilverlightPlatformsProvider();
    public sealed virtual int get_Priority();
    public sealed virtual bool get_ImmutableAssembliesInFileSystem();
    private sealed virtual override PlatformsResult`1<CompilePlatform> JetBrains.ProjectModel.Platforms.IPlatformsProvider<JetBrains.ProjectModel.Platforms.CompilePlatform>.GetPlatforms(PlatformsContext context);
    private sealed virtual override PlatformsResult`1<RuntimePlatform> JetBrains.ProjectModel.Platforms.IPlatformsProvider<JetBrains.ProjectModel.Platforms.RuntimePlatform>.GetPlatforms(PlatformsContext context);
    public sealed virtual TargetFrameworkId DetectTargetFrameworkIdByReferences(AssemblyNameInfo corlibReference, IReadOnlyCollection`1<AssemblyNameInfo> otherReferences, IReadOnlyCollection`1<CompilePlatform> platforms);
}
[PlatformsProviderAttribute("16")]
public class JetBrains.ProjectModel.Platforms.Providers.ThirdPartyPlatformsProvider : object {
    private FrameworkLocationService myFrameworkLocationService;
    public int Priority { get; }
    public bool ImmutableAssembliesInFileSystem { get; }
    public ThirdPartyPlatformsProvider(FrameworkLocationService frameworkLocationService);
    public sealed virtual int get_Priority();
    public sealed virtual bool get_ImmutableAssembliesInFileSystem();
    public sealed virtual PlatformsResult`1<CompilePlatform> GetPlatforms(PlatformsContext context);
    public sealed virtual TargetFrameworkId DetectTargetFrameworkIdByReferences(AssemblyNameInfo corlibReference, IReadOnlyCollection`1<AssemblyNameInfo> otherReferences, IReadOnlyCollection`1<CompilePlatform> platforms);
}
[PlatformsProviderAttribute("16")]
public class JetBrains.ProjectModel.Platforms.Providers.UwpPlatformsProvider : object {
    [NotNullAttribute]
private FrameworkLocationService myFrameworkLocationService;
    [NotNullAttribute]
private static Dictionary`2<Version, Version> ourCoreToSdkVersionsMap;
    public int Priority { get; }
    public bool ImmutableAssembliesInFileSystem { get; }
    public UwpPlatformsProvider(FrameworkLocationService frameworkLocationService);
    private static UwpPlatformsProvider();
    public sealed virtual int get_Priority();
    public sealed virtual bool get_ImmutableAssembliesInFileSystem();
    public sealed virtual PlatformsResult`1<CompilePlatform> GetPlatforms(PlatformsContext context);
    public sealed virtual TargetFrameworkId DetectTargetFrameworkIdByReferences(AssemblyNameInfo corlibReference, IReadOnlyCollection`1<AssemblyNameInfo> otherReferences, IReadOnlyCollection`1<CompilePlatform> platforms);
}
internal class JetBrains.ProjectModel.Platforms.ReferencesAndTargetFramework : object {
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFrameworkId>k__BackingField;
    [CompilerGeneratedAttribute]
private AssemblyNameInfo[] <ReferencedAssemblyInfos>k__BackingField;
    [CanBeNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; }
    public AssemblyNameInfo[] ReferencedAssemblyInfos { get; }
    public ReferencesAndTargetFramework(AssemblyNameInfo[] referencedAssemblyInfos, TargetFrameworkId targetFrameworkId);
    [CompilerGeneratedAttribute]
public TargetFrameworkId get_TargetFrameworkId();
    [CompilerGeneratedAttribute]
public AssemblyNameInfo[] get_ReferencedAssemblyInfos();
}
public class JetBrains.ProjectModel.Platforms.RuntimePlatform : TargetPlatformBase {
    [CompilerGeneratedAttribute]
private FrameworkIdentifier <FrameworkIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetVersion <RuntimeVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private RuntimePlatformKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<VirtualFileSystemPath> <FrameworkSpecificRootFolders>k__BackingField;
    [NotNullAttribute]
public FrameworkIdentifier FrameworkIdentifier { get; }
    [NotNullAttribute]
public NuGetVersion RuntimeVersion { get; }
    public RuntimePlatformKind Kind { get; }
    [NotNullAttribute]
public IReadOnlyCollection`1<VirtualFileSystemPath> FrameworkSpecificRootFolders { get; }
    public RuntimePlatform(FrameworkIdentifier frameworkIdentifier, NuGetVersion version, RuntimePlatformKind kind, VirtualFileSystemPath rootFolder, IEnumerable`1<VirtualFileSystemPath> frameworkSpecificRootFolders);
    [CompilerGeneratedAttribute]
public FrameworkIdentifier get_FrameworkIdentifier();
    [CompilerGeneratedAttribute]
public NuGetVersion get_RuntimeVersion();
    [CompilerGeneratedAttribute]
public RuntimePlatformKind get_Kind();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<VirtualFileSystemPath> get_FrameworkSpecificRootFolders();
    [NotNullAttribute]
public VirtualFileSystemPath FindInPlatformFolders(string fileOrFolderName);
    [CanBeNullAttribute]
private VirtualFileSystemPath FindInPlatformFolders(string fileOrFolderName, VirtualFileSystemPath root);
    public virtual string ToString();
}
public enum JetBrains.ProjectModel.Platforms.RuntimePlatformKind : Enum {
    public int value__;
    public static RuntimePlatformKind Net;
    public static RuntimePlatformKind NetFramework;
    public static RuntimePlatformKind Mono;
    public static RuntimePlatformKind NetCore;
    public static RuntimePlatformKind Other;
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.Platforms.Runtimes.ClassicDotNetFrameworkRuntimeSelector : DefaultRuntimeSelectorBase {
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    public int Priority { get; }
    [CompilerGeneratedAttribute]
public virtual int get_Priority();
    public virtual bool IsApplicable(TargetFrameworkId id, IProject project, IRuntimeContext context);
    protected virtual bool IsCompatible(TargetFrameworkId id, RuntimePlatform platform);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.Platforms.Runtimes.DefaultRuntimeSelector : DefaultRuntimeSelectorBase {
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    public int Priority { get; }
    [CompilerGeneratedAttribute]
public virtual int get_Priority();
    public virtual bool IsApplicable(TargetFrameworkId id, IProject project, IRuntimeContext context);
}
public abstract class JetBrains.ProjectModel.Platforms.Runtimes.DefaultRuntimeSelectorBase : object {
    public int Priority { get; }
    public abstract virtual int get_Priority();
    public abstract virtual bool IsApplicable(TargetFrameworkId id, IProject project, IRuntimeContext context);
    public sealed virtual IReadOnlyCollection`1<RuntimePlatform> Select(TargetFrameworkId id, IProject project, IRuntimeContext context, IReadOnlyCollection`1<RuntimePlatform> knownRuntimePlatforms);
    protected virtual bool IsCompatible(TargetFrameworkId id, RuntimePlatform platform);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.Platforms.Runtimes.DotNetCoreRuntimeSelector : object {
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    public int Priority { get; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Priority();
    public sealed virtual bool IsApplicable(TargetFrameworkId id, IProject project, IRuntimeContext context);
    public sealed virtual IReadOnlyCollection`1<RuntimePlatform> Select(TargetFrameworkId id, IProject project, IRuntimeContext context, IReadOnlyCollection`1<RuntimePlatform> knownRuntimePlatforms);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.Platforms.Runtimes.NetStandardRuntimeSelector : object {
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    public int Priority { get; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Priority();
    public sealed virtual bool IsApplicable(TargetFrameworkId id, IProject project, IRuntimeContext context);
    public sealed virtual IReadOnlyCollection`1<RuntimePlatform> Select(TargetFrameworkId id, IProject project, IRuntimeContext context, IReadOnlyCollection`1<RuntimePlatform> knownRuntimePlatforms);
}
public static class JetBrains.ProjectModel.Platforms.RuntimeSelector : object {
    public static RuntimePlatform Select(IPlatformManager platformManager, TargetFrameworkId targetFrameworkId, IProject project);
}
[ShellComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ProjectModel.Platforms.Services.DotNetCoreRuntimeService : object {
    [CompilerGeneratedAttribute]
private ISimpleSignal <HasChanged>k__BackingField;
    public ISimpleSignal HasChanged { get; }
    public DotNetCoreRuntimeService(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public ISimpleSignal get_HasChanged();
    [CanBeNullAttribute]
public virtual IDotNetCoreCli GetCurrentDotNetCoreCli(PlatformsContext context);
}
[ShellComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ProjectModel.Platforms.Services.MonoRuntimeService : object {
    [CompilerGeneratedAttribute]
private ISimpleSignal <HasChanged>k__BackingField;
    public ISimpleSignal HasChanged { get; }
    public MonoRuntimeService(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public ISimpleSignal get_HasChanged();
    [CanBeNullAttribute]
public virtual MonoRuntime GetCurrentMonoRuntime(PlatformsContext context);
}
public class JetBrains.ProjectModel.Platforms.SystemFrameworkLocationHelper : FrameworkLocationHelperBase {
    public SystemFrameworkLocationHelper(IInteractionContext interactionContext);
    public static Version ExtractSdkVersion(string key);
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.Platforms.SystemFrameworkLocationHelper/<GetExtensionSdksFolders>d__2")]
protected virtual IEnumerable`1<VirtualFileSystemPath> GetExtensionSdksFolders();
    public virtual IReadOnlyCollection`1<SdkInfo> GetWindowsSdk();
    public virtual IReadOnlyCollection`1<SdkInfo> GetDotNetSdk();
    public virtual IReadOnlyCollection`1<CompilePlatform> GetMicroFrameworkCompilePlatforms();
    public virtual IReadOnlyCollection`1<RuntimePlatform> GetMicroFrameworkRuntimePlatforms();
    [NotNullAttribute]
private IReadOnlyCollection`1<T> GetMicroFrameworkPlatforms(Func`3<Version, VirtualFileSystemPath, T> createPlatform);
    public virtual IReadOnlyCollection`1<CompilePlatform> GetThirdPartyCompilePlatforms();
    public virtual IReadOnlyCollection`1<CompilePlatform> GetSilverlightCompilePlatforms();
    public virtual IReadOnlyCollection`1<RuntimePlatform> GetSilverlightRuntimePlatforms();
    public virtual VirtualFileSystemPath GetNetPortableReferenceAssembliesPath();
    public virtual VirtualFileSystemPath GetReferenceAssembliesNetCoreFrameworkPath(Version netCoreVersion);
    [NotNullAttribute]
public virtual VirtualFileSystemPath GetWindows8PlatfromSdkFolder(Version version);
    public virtual VirtualFileSystemPath GetSharepointFilesPath(JetHashSet`1& numberFolders);
    private static IReadOnlyCollection`1<VirtualFileSystemPath> LoadAdditionalAssemblyFolders(RegistryKey assemblyFoldersKey, String[] excludedKeys);
    private static void LoadRegistryKey(RegistryKey assemblyFolderKey, ICollection`1<VirtualFileSystemPath> folders);
    [ObsoleteAttribute]
public virtual VirtualFileSystemPath GetNetFrameworkDirectory(Version version);
    public virtual Version[] EnumerateInstalledNetFrameworks();
    public virtual VirtualFileSystemPath GacPath40();
    public virtual VirtualFileSystemPath GacPath();
    [CanBeNullAttribute]
private VirtualFileSystemPath GetReferenceAssembliesDirectory(string directoryName);
}
public abstract class JetBrains.ProjectModel.Platforms.TargetPlatformBase : object {
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <RootFolder>k__BackingField;
    [NotNullAttribute]
public VirtualFileSystemPath RootFolder { get; }
    protected TargetPlatformBase(VirtualFileSystemPath rootFolder);
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_RootFolder();
}
public static class JetBrains.ProjectModel.Platforms.WellKnownTargetFrameworks : object {
    public static IReadOnlyCollection`1<TargetFrameworkId> TargetFrameworks { get; }
    public static IReadOnlyCollection`1<TargetFrameworkId> get_TargetFrameworks();
}
[ZoneMarkerAttribute]
public class JetBrains.ProjectModel.Platforms.ZoneMarker : object {
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.Processes.SolutionProcessStartInfoPatcher : ProcessStartInfoPatcherBase {
    private SolutionAwareProcessStartInfoMonoPatcher myMonoPatcher;
    private SolutionAwareDotNetCorePatcher myDotNetCorePatcher;
    protected ProcessStartInfoDotNetCorePatcher DotNetCorePatcher { get; }
    protected ProcessStartInfoMonoPatcher MonoPatcher { get; }
    public SolutionProcessStartInfoPatcher(ILogger logger, ISolutionToolset solutionToolset, DotNetCorePlatformsInRuntimeConfigJson cache);
    protected virtual ProcessStartInfoDotNetCorePatcher get_DotNetCorePatcher();
    protected virtual ProcessStartInfoMonoPatcher get_MonoPatcher();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.ProjectExtensions : object {
    private static Key`1<CachedProjectItemValue`2<IProject, IDictionary`2<TargetFrameworkId, AssemblyNameInfo>>> PROJECT_ASSEMBLY_NAME_INFO;
    private static ProjectExtensions();
    [ExtensionAttribute]
[NotNullAttribute]
[ObsoleteAttribute("Do not use the method! Use the one with TargetFrameworkId specified")]
public static VirtualFileSystemPath GetOutputFilePath(IProject project);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<VirtualFileSystemPath> GetOutputFilePaths(IProject project);
    [ExtensionAttribute]
[NotNullAttribute]
public static TargetFrameworkId GetCurrentTargetFrameworkId(IProject project);
    [ExtensionAttribute]
[NotNullAttribute]
public static TargetFrameworkId GetRandomTargetFrameworkId(IProject project);
    [ExtensionAttribute]
[NotNullAttribute]
public static TargetFrameworkId GetSingleTargetFrameworkId(IProject project);
    [ExtensionAttribute]
[NotNullAttribute]
public static IProjectSearchDescriptor ToProjectSearchDescriptor(IProject project);
    [ExtensionAttribute]
[NotNullAttribute]
public static IInteractionContext GetInteractionContext(ISolution solution);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProject GetProject(IModuleReferenceResolveContext resolveContext);
    [ExtensionAttribute]
public static bool IsWebApplication(IProject project);
    [ExtensionAttribute]
public static bool IsPortable(IProject project);
    [ExtensionAttribute]
public static bool IsWebProject(IProject project);
    [ExtensionAttribute]
public static bool IsSharepointWorkflow(IProject project);
    [ExtensionAttribute]
[ContractAnnotationAttribute("null => false")]
public static bool IsWinJSProjectKind(IProject project);
    [ExtensionAttribute]
public static bool IsBizTalkProject(IProject project);
    [ExtensionAttribute]
[ContractAnnotationAttribute("null => false")]
public static bool IsMiscFilesProject(IProject project);
    [ExtensionAttribute]
[ContractAnnotationAttribute("null => false")]
public static bool IsSolutionProject(IProject project);
    [ExtensionAttribute]
public static bool IsVCXMiscProjectInVs2015(IProject project);
    [ExtensionAttribute]
[ContractAnnotationAttribute("null => false")]
public static bool IsVCXProject(IProject project);
    [ExtensionAttribute]
public static bool IsProjectNative(IProject project);
    [ExtensionAttribute]
[ObsoleteAttribute("Do not use the method. Use the overload with IProject")]
public static bool IsProjectK(VirtualFileSystemPath projectFileLocation);
    [ExtensionAttribute]
public static bool IsDotNetCoreProject(IProject project);
    [ExtensionAttribute]
public static bool IsDotNetCoreProject(IProjectProperties projectProperties);
    [ExtensionAttribute]
[ObsoleteAttribute("Use IsDotNetCoreProject")]
public static bool IsProjectK(IProject project);
    [ExtensionAttribute]
public static bool IsProjectWithoutPsi(IProject project);
    [ExtensionAttribute]
[ObsoleteAttribute("Check WP8.1 and consider using IsWindowRuntimeProject() method")]
public static bool IsMetroStyleProject(IProject project);
    [ExtensionAttribute]
public static bool IsWindows10UniversalProject(IProject project);
    [ExtensionAttribute]
public static bool IsWindowRuntimeProject(IProject project);
    [ExtensionAttribute]
public static bool IsWindowsPhoneProject(IProject project);
    [ExtensionAttribute]
public static bool IsSqlProject(IProject project);
    [ExtensionAttribute]
public static bool IsWinMdProject(IProject project);
    [ExtensionAttribute]
public static bool IsAppContainerProject(IProject project);
    [ExtensionAttribute]
public static bool IsProxyStubProject(IProject project);
    [ExtensionAttribute]
[NotNullAttribute]
public static IModuleReferenceResolveContext GetResolveContext(IProject project, TargetFrameworkId targetFrameworkId);
    [ExtensionAttribute]
[ContractAnnotationAttribute("null => false")]
public static bool CanBeWindowsWebProject(IProjectFile projectFile);
    [ExtensionAttribute]
[ContractAnnotationAttribute("null => false")]
public static bool CanBeWindowsWebProject(IProject project);
    [ExtensionAttribute]
[ContractAnnotationAttribute("null => false")]
public static bool IsWinmdModule(IModule module);
    [ContractAnnotationAttribute("null => false")]
public static bool IsWinmdModule(IAssemblyLocation location);
    [ExtensionAttribute]
[NotNullAttribute]
public static VirtualFileSystemPath GetProjectJsonPath(IProject project);
    [ExtensionAttribute]
[NotNullAttribute]
public static VirtualFileSystemPath GetProjectJsonPath(VirtualFileSystemPath projectFilePath);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<IProjectFile> GetAllProjectFiles(IProjectFolder projectFolder, Predicate`1<IProjectFile> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<IProjectToModuleReference> GetAllModuleReferences(IProject project);
    [ExtensionAttribute]
public static IEnumerable`1<IProjectToPackageReference> GetAllPackagesReferences(IProject project);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectToPackageReference GetPackagesReference(IProject project, NugetId id, TargetFrameworkId targetFrameworkId);
    [ExtensionAttribute]
public static IInstalledNugetPackage GetInstalledPackage(IProject project, NugetId id);
    [ExtensionAttribute]
[NotNullAttribute]
public static ICollection`1<IProjectToAssemblyReference> GetAssemblyReferences(IProject project, TargetFrameworkId targetFrameworkId);
    [ExtensionAttribute]
[NotNullAttribute]
public static ICollection`1<IProjectToProjectReference> GetProjectReferences(IProject project, TargetFrameworkId targetFrameworkId);
    [ExtensionAttribute]
[NotNullAttribute]
public static ICollection`1<IRoslynAnalyzerReference> GetAnalyzerReferences(IProject project, TargetFrameworkId targetFrameworkId);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectToModuleReference GetModuleReference(IProject project, string moduleName, TargetFrameworkId targetFrameworkId);
    [ExtensionAttribute]
public static bool HasReferenceToWindowsWinmd(IProject project);
    [ExtensionAttribute]
[NotNullAttribute]
public static VirtualFileSystemPath GetIntermediateDirectory(IProject project, TargetFrameworkId targetFrameworkId);
    [ExtensionAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("project: null => null")]
public static IAssembly GetValidOutputAssembly(IProject project, TargetFrameworkId targetFrameworkId);
    [ExtensionAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("project: null => null")]
public static OutputAssemblyInfo GetOutputAssemblyInfo(IProject project, TargetFrameworkId targetFrameworkId);
    [NotNullAttribute]
private static AssemblyNameInfo CalculateAssemblyNameInfo(IProject project, TargetFrameworkId targetFrameworkId);
    [ExtensionAttribute]
[NotNullAttribute]
public static AssemblyNameInfo GetOutputAssemblyNameInfo(IProject project, TargetFrameworkId targetFrameworkId);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetOutputAssemblyName(IProject project, TargetFrameworkId targetFrameworkId);
    [ExtensionAttribute]
public static ICollection`1<IProject> GetThisAndReferencedProjects(IProject project, TargetFrameworkId targetFrameworkId, bool transitive);
    [ExtensionAttribute]
public static ICollection`1<IProject> GetThisAndReferencedProjectsFromAllTargetFrameworks(IProject project, bool transitive);
    [ExtensionAttribute]
public static ICollection`1<KeyValuePair`2<TargetFrameworkId, IProject>> GetThisAndReferencedProjectsEx(IProject project, TargetFrameworkId targetFrameworkId, bool transitive);
    [ExtensionAttribute]
public static ICollection`1<IProject> GetReferencedProjects(IProject project, TargetFrameworkId targetFrameworkId, bool transitive);
    [ExtensionAttribute]
public static ICollection`1<IProject> GetReferencedProjectsFromAllTargetFrameworks(IProject project, bool transitive);
    [ExtensionAttribute]
public static ICollection`1<IAssembly> GetAllReferencedAssemblies(IProject project);
    [ExtensionAttribute]
public static ICollection`1<KeyValuePair`2<TargetFrameworkId, IProject>> GetReferencedProjectsEx(IProject project, TargetFrameworkId targetFrameworkId, bool transitive);
    private static void GetReferencedProjectsImpl(IProject project, OrderedHashSet`1<IProject> projects, TargetFrameworkId targetFrameworkId, bool transitive);
    private static void GetReferencedProjectsFromAllTargetFrameworksImpl(IProject project, OrderedHashSet`1<IProject> projects, bool transitive);
    private static void GetReferencedProjectsExImpl(IProject project, OrderedHashSet`1<KeyValuePair`2<TargetFrameworkId, IProject>> projects, TargetFrameworkId targetFrameworkId, bool transitive);
    [ExtensionAttribute]
public static ICollection`1<IProject> GetThisAndReferencingProjects(IProject project, IModuleReferencesResolveStore store, TargetFrameworkId targetFrameworkId, bool transitive);
    [ExtensionAttribute]
public static ICollection`1<KeyValuePair`2<TargetFrameworkId, IProject>> GetThisAndReferencingProjectsEx(IProject project, TargetFrameworkId targetFrameworkId, bool transitive);
    [ExtensionAttribute]
public static ICollection`1<IProject> GetReferencingProjects(IProject project, IModuleReferencesResolveStore store, TargetFrameworkId targetFrameworkId, bool transitive);
    [ExtensionAttribute]
public static ICollection`1<KeyValuePair`2<TargetFrameworkId, IProject>> GetReferencingProjectsEx(IProject project, TargetFrameworkId targetFrameworkId, bool transitive);
    [ExtensionAttribute]
private static void GetReferencingProjects(IProject project, OrderedHashSet`1<IProject> projects, IModuleReferencesResolveStore store, TargetFrameworkId targetFrameworkId, bool transitive);
    [ExtensionAttribute]
private static void GetReferencingProjectsEx(IProject project, OrderedHashSet`1<KeyValuePair`2<TargetFrameworkId, IProject>> projects, TargetFrameworkId targetFrameworkId, bool transitive);
    [ExtensionAttribute]
public static bool IsSolutionFolder(IProjectFolder folder);
    [ExtensionAttribute]
public static IProjectDescriptor GetProjectDescriptor(IProject project);
    public static void FixTargetFrameworksForBuildAction(IProjectFile projectFile, IProject oldProject, IProject newProject);
    public static CompactList`1<Pair`2<TargetFrameworkId, BuildAction>> CalculateTargetFrameworksForBuildAction(IProjectFile projectFile, IProject oldProject, IProject newProject);
    [ExtensionAttribute]
public static bool IsEcmaScriptProject(IProject project);
    [ExtensionAttribute]
public static bool IsDockerComposeProject(IProject project);
    [ExtensionAttribute]
public static bool IsAspireHostProject(IProject project);
    [ExtensionAttribute]
public static bool IsAzureFunctionProject(IProject project);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectFileExtensions : object {
    private FileTypeDefinitionExtensionMapping myMappings;
    private IProjectFileTypes myProjectFileTypes;
    private object myLockObject;
    private IDictionary`2<string, ProjectFileType> myCache;
    [CompilerGeneratedAttribute]
private ISimpleSignal <Changed>k__BackingField;
    public ISimpleSignal Changed { get; }
    public ProjectFileExtensions(Lifetime lifetime, FileTypeDefinitionExtensionMapping extensionMappings, IProjectFileTypes projectFileTypes);
    private void Invalidate();
    public sealed virtual ProjectFileType GetFileType(string extension);
    protected virtual ProjectFileType CalcValue(string extension);
    public sealed virtual IEnumerable`1<string> GetExtensions(ProjectFileType fileType);
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_Changed();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.ProjectFileExtensionsExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static ProjectFileType GetFileType(IProjectFileExtensions component, IPath location);
    [ExtensionAttribute]
[NotNullAttribute]
public static BuildAction GetDefaultBuildAction(IProject project, IPath location);
    [ExtensionAttribute]
[NotNullAttribute]
public static BuildAction GetDefaultBuildAction(IProject project, ProjectFileType fileType, IPath location);
}
public class JetBrains.ProjectModel.ProjectFileImpl : ProjectItemBase {
    private CachedFileSystemData myCachedFileSystemData;
    private ModificationStamp myLastReconciliationStamp;
    private ModificationStamp myLastExternalModificationStamp;
    [CompilerGeneratedAttribute]
private ModificationStamp <LastInMemoryModificationStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectElementOrigin <Origin>k__BackingField;
    private IProjectFileProperties myProjectFileProperties;
    private CachedProjectItemValue`2<IProjectFile, ProjectFileType> myProjectFileType;
    private CachedProjectItemValue`2<ProjectFileImpl, VirtualFileSystemPath> myCachedLocation;
    [CompilerGeneratedAttribute]
private ProjectFilePath <Path>k__BackingField;
    private static Func`2<IProjectFile, ProjectFileType> GetProjectFileType;
    private static Func`2<ProjectFileImpl, VirtualFileSystemPath> GetCachedLocation;
    public ModificationStamp LastInMemoryModificationStamp { get; public set; }
    public IProjectElementOrigin Origin { get; public set; }
    public ProjectFilePath Path { get; private set; }
    public CachedFileSystemData CachedFileSystemData { get; }
    public string Name { get; }
    public Type MarshallerType { get; }
    public VirtualFileSystemPath Location { get; }
    public ProjectItemKind Kind { get; }
    public bool IsLinked { get; }
    private bool IsSolutionFile { get; }
    public ProjectFileType LanguageType { get; }
    public ModificationStamp LastExternalModificationStamp { get; }
    public DateTime LastWriteTimeUtc { get; }
    public bool IsFileSystemReadonly { get; }
    public bool IsMissing { get; }
    public bool HasChangedExternallySinceLastReconciliation { get; }
    public bool HasChangedInMemorySinceLastReconciliation { get; }
    public IProjectFileProperties Properties { get; }
    public ProjectFileImpl(string name, VirtualFileSystemPath path, ProjectFolderImpl parentItem, IProjectFileProperties properties);
    public ProjectFileImpl(ProjectFilePath path, ProjectFolderImpl parentItem, IProjectFileProperties properties);
    private static ProjectFileImpl();
    [CompilerGeneratedAttribute]
public sealed virtual ModificationStamp get_LastInMemoryModificationStamp();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LastInMemoryModificationStamp(ModificationStamp value);
    [CompilerGeneratedAttribute]
public sealed virtual IProjectElementOrigin get_Origin();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Origin(IProjectElementOrigin value);
    [CompilerGeneratedAttribute]
public ProjectFilePath get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(ProjectFilePath value);
    private static string ExtensionWithDot(ProjectFileImpl projectFile);
    public CachedFileSystemData get_CachedFileSystemData();
    internal void EnsureFileSystemDataLoaded();
    public void ResetCachedFileSystemData();
    public virtual string get_Name();
    public virtual Type get_MarshallerType();
    public virtual VirtualFileSystemPath get_Location();
    public virtual ProjectItemKind get_Kind();
    protected virtual void DoMoveImpl(IProjectFolder newParentItem);
    public virtual void DoRename(string newName);
    public virtual bool get_IsLinked();
    protected virtual void AdviseFileSystemChanges();
    private bool get_IsSolutionFile();
    public sealed virtual ProjectFileType get_LanguageType();
    public sealed virtual ModificationStamp get_LastExternalModificationStamp();
    public sealed virtual DateTime get_LastWriteTimeUtc();
    public sealed virtual bool get_IsFileSystemReadonly();
    public sealed virtual bool get_IsMissing();
    public sealed virtual void MarkReconciledWithInMemoryVersion();
    public sealed virtual void MarkReconciledWithExternalVersion();
    public sealed virtual bool get_HasChangedExternallySinceLastReconciliation();
    public sealed virtual bool get_HasChangedInMemorySinceLastReconciliation();
    public sealed virtual Stream CreateWriteStream(Lifetime lifetime);
    public sealed virtual IProjectFileProperties get_Properties();
    public sealed virtual IProjectFile GetDependsUponFile();
    public sealed virtual ICollection`1<IProjectFile> GetDependentFiles();
    public sealed virtual void UpdatePropertiesFrom(IProjectFileProperties properties);
    public virtual void Accept(ProjectVisitor projectVisitor);
    internal virtual void DumpInternal(TextWriter to, int indent, DumpFlags flags);
    internal CachedFileSystemDataChangeType TryApplyFileSystemChange();
    internal virtual void ApplyFileSystemChange(ApplyFileSystemChangeArgs args);
    public sealed virtual Stream CreateReadStream(Lifetime lifetime);
    public virtual string ToString();
    private string GetRelativeForToString();
    public virtual void Cleanup();
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ProjectModel.ProjectFileLocationLiveWatcher : object {
    private IShellLocks myLocks;
    private ISolution mySolution;
    public ProjectFileLocationLiveWatcher(Lifetime lifetime, ChangeManager changeManager, IShellLocks locks, ISolution solution);
    private void OnFUpdatePath(ChangeEventArgs args);
    private static void UpdateProjectLocationLive(IProject project);
}
public class JetBrains.ProjectModel.ProjectFilePath : object {
    [CanBeNullAttribute]
private VirtualFileSystemPath myAbsolutePath;
    [CanBeNullAttribute]
private string myShortName;
    private bool myIsLinked;
    public bool IsLinked { get; }
    [NotNullAttribute]
public string FileShortName { get; }
    private ProjectFilePath(string shortName);
    private ProjectFilePath(VirtualFileSystemPath absolutePath, bool isLinked);
    public ProjectFilePath(string shortName, VirtualFileSystemPath absolutePath, bool isLinked);
    public bool get_IsLinked();
    public VirtualFileSystemPath GetFullPath(VirtualFileSystemPath parentPath);
    public VirtualFileSystemPath GetFullPath(IProjectItem projectItem);
    public string get_FileShortName();
    public static ProjectFilePath Create(string name, VirtualFileSystemPath path, IProjectFolder parentFolder, IInteractionContext context);
    public static ProjectFilePath Create(string name, VirtualFileSystemPath path, VirtualFileSystemPath parentPath, IInteractionContext context);
    public virtual string ToString();
    public void WriteProjectItemPath(BinaryWriter writer, VirtualFileSystemPath baseLocation);
    public static ProjectFilePath ReadProjectItemPath(BinaryReader reader, VirtualFileSystemPath baseLocation);
}
public class JetBrains.ProjectModel.ProjectFileTextRange : ValueType {
    private IProjectFile myProjectFile;
    private TextRange myTextRange;
    [CanBeNullAttribute]
private TargetFrameworkId myTargetFrameworkId;
    public static ProjectFileTextRange Invalid;
    public IProjectFile ProjectFile { get; }
    public TextRange TextRange { get; }
    [CanBeNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; }
    public bool IsValid { get; }
    public ProjectFileTextRange(IProjectFile projectFile, int offset, TargetFrameworkId targetFrameworkId);
    public ProjectFileTextRange(IProjectFile projectFile, TextRange textRange, TargetFrameworkId targetFrameworkId);
    private ProjectFileTextRange(IProjectFile projectFile, TextRange textRange, bool invalid);
    private static ProjectFileTextRange();
    public IProjectFile get_ProjectFile();
    public TextRange get_TextRange();
    public TargetFrameworkId get_TargetFrameworkId();
    public bool get_IsValid();
    public sealed virtual bool Equals(ProjectFileTextRange other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[CannotApplyEqualityOperatorAttribute]
public abstract class JetBrains.ProjectModel.ProjectFileType : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PresentableName>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Extensions>k__BackingField;
    public string Name { get; private set; }
    public string PresentableName { get; private set; }
    public IEnumerable`1<string> Extensions { get; private set; }
    protected ProjectFileType(string name);
    protected ProjectFileType(string name, string presentableName);
    protected ProjectFileType(string name, string presentableName, IEnumerable`1<string> extensions);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_PresentableName();
    [CompilerGeneratedAttribute]
private void set_PresentableName(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Extensions();
    [CompilerGeneratedAttribute]
private void set_Extensions(IEnumerable`1<string> value);
    public virtual string ToString();
    [NotNullAttribute]
public virtual BuildAction GetDefaultBuildAction(IProject project, string extension);
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
public class JetBrains.ProjectModel.ProjectFileTypeAttribute : ComponentAttribute {
    protected static Instantiation ProjectFileTypeDefaultInstantiation;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; }
    public ProjectFileTypeAttribute(Type Type, Instantiation instantiation);
    [CompilerGeneratedAttribute]
public Type get_Type();
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
public class JetBrains.ProjectModel.ProjectFileTypeDefinitionAttribute : PartAttribute {
    [CompilerGeneratedAttribute]
private string <Edition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Edition { get; public set; }
    public string Type { get; public set; }
    public ProjectFileTypeDefinitionAttribute(string Type);
    [CompilerGeneratedAttribute]
public string get_Edition();
    [CompilerGeneratedAttribute]
public void set_Edition(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.ProjectFileTypeEx : object {
    [ExtensionAttribute]
[ContractAnnotationAttribute("null=>true")]
public static bool IsNullOrUnknown(ProjectFileType projectFileType);
    [ExtensionAttribute]
[ContractAnnotationAttribute("null=>true")]
public static bool IsNullOrUnknownOrBinary(ProjectFileType projectFileType);
    [ExtensionAttribute]
[ContractAnnotationAttribute("null=>false")]
public static bool IsBinary(ProjectFileType projectFileType);
    [ExtensionAttribute]
public static bool IsProjectFileType(ProjectFileType projectFileType, ProjectFileType fileType);
    [ExtensionAttribute]
public static bool IsProjectFileType(ProjectFileType projectFileType, Type fileTypeType);
    [ExtensionAttribute]
public static bool Is(ProjectFileType projectFileType);
    [ExtensionAttribute]
public static bool IsExactly(ProjectFileType projectFileType);
}
[ShellComponentAttribute("18")]
public class JetBrains.ProjectModel.ProjectFileTypes : object {
    private ViewableCollection`1<ProjectFileType> myFileTypes;
    private Dictionary`2<string, ProjectFileType> myNameToFileType;
    public IEnumerable`1<ProjectFileType> All { get; }
    public ProjectFileTypes(Lifetime lifetime, ShellPartCatalogSet ppc, IReadyImmutableList`1<IShouldBeInstantiatedBeforeProjectFileTypes> notUsed);
    public static T SetStaticInstanceProperty(Lifetime lifetime, Type type);
    [NotNullAttribute]
public static PropertyInfo GetStaticInstancePropertyInfo(Type type);
    private void AddFileTypes(Lifetime lifetime, CollectionSource`1<PartCatalogType> parts);
    public sealed virtual void View(Lifetime lifetime, Action`2<Lifetime, ProjectFileType> viewer);
    public sealed virtual IEnumerable`1<ProjectFileType> get_All();
    public sealed virtual ProjectFileType GetFileType(string fileTypeName);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.ProjectFolderEx : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectFolder GetNotLinkedSubFolder(IProjectFolder folder, string name);
    [ExtensionAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
public static IList`1<IProjectFolder> GetSubFolders(IProjectFolder folder);
    [ExtensionAttribute]
[PureAttribute]
public static ReadOnlyFrugalLocalList`1<IProjectFolder> GetSubFolders(IProjectFolder folder, string name);
    [ExtensionAttribute]
[PureAttribute]
public static ReadOnlyFrugalLocalList`1<IProjectFolder> GetSubFolders(IProjectFolder folder, string name, Predicate`1<IProjectFolder> predicate);
    [ExtensionAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
[PureAttribute]
public static IList`1<IProjectFile> GetSubFiles(IProjectFolder folder);
    [ExtensionAttribute]
[PureAttribute]
public static ReadOnlyFrugalLocalList`1<IProjectFile> GetSubFiles(IProjectFolder folder, string name);
    [ExtensionAttribute]
[PureAttribute]
public static ReadOnlyFrugalLocalList`1<IProjectFile> GetSubFiles(IProjectFolder folder, string name, Predicate`1<IProjectFile> predicate);
    [ExtensionAttribute]
[PureAttribute]
public static ReadOnlyFrugalLocalList`1<IProjectFile> GetSubFiles(IProjectFolder folder, string name, T context, Func`3<IProjectFile, T, bool> predicate);
    [ExtensionAttribute]
[PureAttribute]
public static bool HasSubItems(IProjectFolder folder, string name);
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.ProjectFolderEx/<FindProjectItemsByLocation>d__9")]
[ExtensionAttribute]
[PureAttribute]
public static IEnumerable`1<IProjectItem> FindProjectItemsByLocation(IProjectFolder folder, VirtualFileSystemPath location);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsSharedProjectFolder(IProjectFolder folder);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsSharedProjectFolder(IProjectFolder folder, IProject& sharedProject);
    [ExtensionAttribute]
[PureAttribute]
[CanBeNullAttribute]
public static IProjectFolder GetProjectOrSharedProjectLinkFolder(IProjectFolder projectFolder);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsSharedProjectLinkFolder(IProjectFolder projectFolder);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsFileInFolder(IProjectFile projectFile, IProjectFolder projectFolder, bool allowLinked);
}
public class JetBrains.ProjectModel.ProjectFolderImpl : ProjectItemBase {
    [CompilerGeneratedAttribute]
private ProjectFolderPath <Path>k__BackingField;
    private OneToListMap`2<string, IProjectItem> myNameToSubItemMap;
    [NotNullAttribute]
private List`1<IProjectItem> mySubItems;
    private bool myIsHidden;
    private bool myIsAppDesigner;
    private bool myAllowsNonExistence;
    [CanBeNullAttribute]
private CachedProjectItemValue`2<ProjectFolderImpl, VirtualFileSystemPath> myCachedLocation;
    [CompilerGeneratedAttribute]
private CachedProjectItemValue`2<IProjectFolder, OneToSetMap`2<IProjectFile, IProjectFile>> <DependentFilesCache>k__BackingField;
    public ProjectFolderPath Path { get; private set; }
    public CachedProjectItemValue`2<IProjectFolder, OneToSetMap`2<IProjectFile, IProjectFile>> DependentFilesCache { get; }
    public string Name { get; }
    public Type MarshallerType { get; }
    public VirtualFileSystemPath Location { get; }
    public ProjectItemKind Kind { get; }
    public bool IsLinked { get; }
    public bool IsHidden { get; public set; }
    public bool IsAppDesigner { get; public set; }
    public bool AllowsNonExistence { get; public set; }
    public ProjectFolderImpl(SolutionElement solutionElement, ProjectFolderPath path, ProjectFolderImpl parentItem, bool isHidden, bool isAppDesigner, bool allowsNonExistence);
    [CompilerGeneratedAttribute]
public sealed virtual ProjectFolderPath get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(ProjectFolderPath value);
    [CompilerGeneratedAttribute]
public CachedProjectItemValue`2<IProjectFolder, OneToSetMap`2<IProjectFile, IProjectFile>> get_DependentFilesCache();
    public virtual string get_Name();
    public virtual Type get_MarshallerType();
    public virtual VirtualFileSystemPath get_Location();
    public virtual ProjectItemKind get_Kind();
    public virtual bool get_IsLinked();
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
    public bool get_IsAppDesigner();
    public void set_IsAppDesigner(bool value);
    public bool get_AllowsNonExistence();
    public void set_AllowsNonExistence(bool value);
    private void OnPropertiesChanged();
    public virtual void DoRename(string newName);
    private static void ResetCachedDataInSubItems(IProjectItem projectItem);
    public virtual IProjectItem FindProjectItemByLocation(VirtualFileSystemPath path);
    internal virtual void DumpInternal(TextWriter to, int indent, DumpFlags flags);
    protected virtual void DumpSelf(TextWriter to, int indent, DumpFlags flags);
    protected static void DumpItems(TextWriter to, int indent, ICollection`1<IProjectItem> subItems, DumpFlags flags);
    protected virtual void AdviseFileSystemChanges();
    public virtual ProjectModelChange GetChangeDelta(ProjectModelChangeType changeType);
    public virtual void Accept(ProjectVisitor projectVisitor);
    protected internal virtual void AddSubItem(ProjectItemBase child);
    public virtual IProjectItem GetSubItem(string name);
    public sealed virtual ReadOnlyFrugalLocalList`1<IProjectItem> GetSubItems(string name);
    public sealed virtual IList`1<IProjectItem> GetSubItems();
    public virtual void RemoveSubItem(ProjectItemBase child);
    public sealed virtual void OnSubItemMoved(IProjectItem subItem, string oldName);
    [NotNullAttribute]
private ProjectFileImpl CreateFileInternal(string name, VirtualFileSystemPath location, IProjectFileProperties projectFileProperties, IProjectElementOrigin origin);
    [NotNullAttribute]
private ProjectFolderImpl CreatePhysicalFolderInternal(ProjectFolderPath projectFolderPath, bool isHidden, bool isAppDesigner, bool allowsNonExistence);
    [NotNullAttribute]
public IProjectFile DoCreateFile(string name, VirtualFileSystemPath location, IProjectFileProperties projectFileProperties);
    [NotNullAttribute]
public IProjectFile DoCreateFile(string name, VirtualFileSystemPath location, IProjectFileProperties projectFileProperties, IProjectElementOrigin origin);
    [NotNullAttribute]
public IProjectFile DoCreateFile(ProjectFilePath path, IProjectFileProperties properties);
    public IProjectFolder DoCreateFolder(ProjectFolderPath projectFolderPath, bool isHidden, bool isAppDesigner, bool allowsNonExistence);
    public sealed virtual IProjectFolder GetSubFolderByPath(ProjectFolderPath projectFolderPath);
    internal virtual void ApplyFileSystemChange(ApplyFileSystemChangeArgs args);
    public virtual string ToString();
    protected virtual void SubtreeChanged();
    public virtual void Cleanup();
}
public class JetBrains.ProjectModel.ProjectFolderPath : object {
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <ReferencedFolderPath>k__BackingField;
    public string ShortName { get; }
    public VirtualFileSystemPath ReferencedFolderPath { get; }
    public bool IsVirtualPath { get; }
    public ProjectFolderPath(string shortName, VirtualFileSystemPath referencedFolderPath);
    [CompilerGeneratedAttribute]
public string get_ShortName();
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_ReferencedFolderPath();
    public bool get_IsVirtualPath();
    internal VirtualFileSystemPath GetFolderLocation(IProjectItem projectItem);
    public virtual string ToString();
    public void WriteProjectItemPath(BinaryWriter writer);
    public void WriteProjectItemPath(UnsafeWriter writer);
    public static ProjectFolderPath ReadProjectItemPath(BinaryReader reader);
    public static ProjectFolderPath ReadProjectItemPath(UnsafeReader reader);
    public static bool Equals(ProjectFolderPath x, ProjectFolderPath y);
}
[ShellComponentAttribute("10")]
public class JetBrains.ProjectModel.ProjectHasPsiService : object {
    private ILogger myLogger;
    private ExcludedProjects myExcludedProjects;
    private List`1<Func`2<IProject, Nullable`1<bool>>> myCallbacks;
    public ProjectHasPsiService(Lifetime lifetime, ILogger logger, ExcludedProjects excludedProjects);
    public sealed virtual bool ProjectHasPsi(IProject project);
    public sealed virtual void RegisterProvider(Lifetime lifetime, Func`2<IProject, Nullable`1<bool>> checkProjectCrlFunc);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0();
}
public class JetBrains.ProjectModel.ProjectImpl : ProjectFolderImpl {
    [CanBeNullAttribute]
private IProjectFile myProjectFile;
    private LifetimeDefinition myLifetimeDefinition;
    private SolutionElement mySolution;
    private string myProjectName;
    private static ILogger ourLogger;
    private VirtualFileSystemPath myLocation;
    private VirtualFileSystemPath mySolutionRootFolder;
    private TargetFrameworkReferences myTargetFrameworkReferences;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <ProjectFileLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectProperties <ProjectProperties>k__BackingField;
    private ProjectFlavoursFactory myFactory;
    private CachedProjectItemValue`2<ProjectImpl, IList`1<Pair`2<TargetFrameworkId, VirtualFileSystemPath>>> myCachedOutputFolder;
    private CachedProjectItemValue`2<ProjectImpl, IList`1<Pair`2<TargetFrameworkId, VirtualFileSystemPath>>> myCachedIntermediateFolder;
    private CachedProjectItemValue`2<ProjectImpl, IList`1<Pair`2<TargetFrameworkId, VirtualFileSystemPath>>> myCachedOutputFile;
    [CompilerGeneratedAttribute]
private bool <IsOpened>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<VirtualFileSystemPath> <ProjectFileLocationLive>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<VirtualFileSystemPath> <ProjectLocationLive>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectOutputAssemblies <OutputAssemblies>k__BackingField;
    public Lifetime Lifetime { get; }
    private string ProjectName { get; private set; }
    public VirtualFileSystemPath ProjectFileLocation { get; private set; }
    public Guid Guid { get; }
    public IProjectProperties ProjectProperties { get; }
    [UsedImplicitlyAttribute]
internal IProjectFlavor[] FlavorNames { get; }
    public ProjectItemKind Kind { get; }
    public bool IsOpened { get; public set; }
    public IProperty`1<VirtualFileSystemPath> ProjectFileLocationLive { get; }
    public IProperty`1<VirtualFileSystemPath> ProjectLocationLive { get; }
    public IReadOnlyList`1<TargetFrameworkId> TargetFrameworkIds { get; }
    public Type MarshallerType { get; }
    public string Presentation { get; }
    public string Name { get; }
    public VirtualFileSystemPath Location { get; }
    public IProjectFile ProjectFile { get; internal set; }
    public ProjectOutputAssemblies OutputAssemblies { get; }
    protected ProjectImpl(SolutionElement solutionElement, IProjectProperties projectProperties, Guid guid, ProjectFolderImpl parentProject, VirtualFileSystemPath location, VirtualFileSystemPath projectFileLocation, string projectName);
    private static ProjectImpl();
    public static ProjectImpl CreateProjectImpl(SolutionElement solutionElement, IProjectProperties projectProperties, Guid guid, ProjectFolderImpl parentProject, VirtualFileSystemPath location, VirtualFileSystemPath projectFileLocation, string projectName);
    public static ProjectImpl CreateProjectImpl(SolutionElement solutionElement, IProjectProperties projectProperties, Guid guid, ProjectFolderImpl parentFolder, VirtualFileSystemPath projectFileLocation);
    public Lifetime get_Lifetime();
    private string get_ProjectName();
    private void set_ProjectName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual VirtualFileSystemPath get_ProjectFileLocation();
    [CompilerGeneratedAttribute]
private void set_ProjectFileLocation(VirtualFileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Guid();
    [CompilerGeneratedAttribute]
public sealed virtual IProjectProperties get_ProjectProperties();
    internal IProjectFlavor[] get_FlavorNames();
    public sealed virtual bool HasFlavour();
    private static string GetProjectName(VirtualFileSystemPath projectFileLocation, IProjectProperties projectProperties);
    private static int GetAzureFunctionVersion(IManagedProjectConfiguration configuration);
    private static IList`1<Pair`2<TargetFrameworkId, VirtualFileSystemPath>> CalculateCachedOutputFolder(ProjectImpl projectImpl);
    private static IList`1<Pair`2<TargetFrameworkId, VirtualFileSystemPath>> CalculateCachedOutputFile(ProjectImpl projectImpl);
    private static IList`1<Pair`2<TargetFrameworkId, VirtualFileSystemPath>> CalculateIntermediateFolder(ProjectImpl projectImpl);
    [NotNullAttribute]
private VirtualFileSystemPath EvaluateOutputPath(IManagedProjectConfiguration configuration, string defaultNamespace);
    [NotNullAttribute]
private VirtualFileSystemPath TryEvaluateOutputPathByTargetPath(IManagedProjectConfiguration configuration);
    [NotNullAttribute]
private VirtualFileSystemPath TryEvaluateOutputPathByOutputProperties(IManagedProjectConfiguration configuration, string defaultNamespace);
    public void PropertiesChanged();
    public sealed virtual void Dispose();
    public virtual ProjectItemKind get_Kind();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsOpened();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsOpened(bool value);
    public virtual void Accept(ProjectVisitor projectVisitor);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<VirtualFileSystemPath> get_ProjectFileLocationLive();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<VirtualFileSystemPath> get_ProjectLocationLive();
    public sealed virtual IReadOnlyList`1<TargetFrameworkId> get_TargetFrameworkIds();
    public sealed virtual IReadOnlyCollection`1<IProjectToModuleReference> GetModuleReferences(TargetFrameworkId targetFrameworkId);
    public void DoRemoveReference(IProjectToModuleReference referenceToRemove);
    private void DoRemoveModuleReferenceCore(IProjectToModuleReference referenceToRemove);
    public virtual ISolution GetSolution();
    protected virtual Pair`2<bool, bool> CalculateIsValid();
    protected virtual bool CalculateIsValidAndAliveImpl();
    protected virtual bool CalculateIsValidImpl();
    public virtual Type get_MarshallerType();
    public virtual bool IsReallyValid();
    public virtual IProject GetProject();
    public sealed virtual string get_Presentation();
    public sealed virtual string get_Name();
    public sealed virtual VirtualFileSystemPath get_Location();
    public sealed virtual IProjectFile get_ProjectFile();
    internal void set_ProjectFile(IProjectFile value);
    public void DoCreateProjectFile(VirtualFileSystemPath projectFilePath, IProjectFileProperties projectFileProperties);
    public virtual void DoRemove();
    public void MoveToNewLocation(VirtualFileSystemPath newprojectFileLocation);
    public void MoveToNewLocation(string newName, VirtualFileSystemPath newProjectLocation);
    public void MoveToNewLocation(string newName, VirtualFileSystemPath newProjectLocation, VirtualFileSystemPath newProjectFileLocation);
    [CompilerGeneratedAttribute]
public ProjectOutputAssemblies get_OutputAssemblies();
    public IProject AddProjectFromLocation(IProjectProperties projectProperties, VirtualFileSystemPath projectFileLocation, Guid projectGuid);
    private void AddProject(IProject project);
    protected internal virtual void AddSubItem(ProjectItemBase child);
    public virtual void RemoveSubItem(ProjectItemBase child);
    public sealed virtual ICollection`1<IProject> GetAllProjects();
    public virtual ProjectModelChange GetChangeDelta(ProjectModelChangeType changeType);
    internal void OpenImpl();
    protected virtual void AdviseFileSystemChanges();
    public void DoAddReference(IProjectToModuleReference addedReference);
    private void DoAddReferenceCore(IProjectToModuleReference addedReference);
    public void AddSdkReference(SdkReferenceImpl referenceImplToAdd);
    private void RaiseReferenceAdded(IProjectToModuleReference reference);
    private void RaiseReferenceRemoved(IProjectToModuleReference reference);
    public void DumpTargetFrameworkReferences(TextWriter to);
    internal virtual void DumpInternal(TextWriter to, int indent, DumpFlags flags);
    [NotNullAttribute]
private static string DumpReferenceProperties(IProjectToModuleReference reference, DumpFlags dumpFlags);
    protected virtual void DumpSelf(TextWriter to, int indent, DumpFlags flags);
    public virtual string ToString();
    public sealed virtual ProjectTargetFrameworkScope GetTargetFrameworkScope(TargetFrameworkId targetFrameworkId);
    public sealed virtual IEnumerable`1<TargetFrameworkScope> GetAllTargetFrameworks();
    public ProjectTargetFrameworkScope GetOrCreateTargetFrameworkScope(TargetFrameworkId targetFrameworkId);
    protected virtual void DoMoveImpl(IProjectFolder newParentItem);
    public virtual void DoRename(string newName);
    public sealed virtual VirtualFileSystemPath GetOutputDirectory(TargetFrameworkId targetFrameworkId);
    public sealed virtual ICollection`1<VirtualFileSystemPath> GetOutputDirectories();
    public sealed virtual VirtualFileSystemPath GetIntermediateDirectory(TargetFrameworkId targetFrameworkId);
    public sealed virtual ICollection`1<VirtualFileSystemPath> GetIntermediateDirectories();
    public sealed virtual VirtualFileSystemPath GetOutputFilePath(TargetFrameworkId targetFrameworkId);
    public sealed virtual VirtualFileSystemPath GetRefOutputFilePath(TargetFrameworkId targetFrameworkId);
    public sealed virtual TComponent GetComponent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private IProjectFlavor <get_FlavorNames>b__26_0(Guid x);
    [CompilerGeneratedAttribute]
private void <.ctor>b__34_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__34_1();
    [CompilerGeneratedAttribute]
private void <.ctor>b__34_2();
}
internal class JetBrains.ProjectModel.ProjectImplementation.CachedComponents : object {
    [CompilerGeneratedAttribute]
private IShellLocks <Locks>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileSystemTrackerSolutionProxy <FileSystemTrackerProxy>k__BackingField;
    [CompilerGeneratedAttribute]
private AssemblyInfoDatabase <AssemblyInfoDatabase>k__BackingField;
    [CompilerGeneratedAttribute]
private DependsUponProvider <DependsUponProvider>k__BackingField;
    public IShellLocks Locks { get; }
    public IFileSystemTrackerSolutionProxy FileSystemTrackerProxy { get; }
    public AssemblyInfoDatabase AssemblyInfoDatabase { get; }
    public DependsUponProvider DependsUponProvider { get; }
    public CachedComponents(ISolution solution);
    [CompilerGeneratedAttribute]
public IShellLocks get_Locks();
    [CompilerGeneratedAttribute]
public IFileSystemTrackerSolutionProxy get_FileSystemTrackerProxy();
    [CompilerGeneratedAttribute]
public AssemblyInfoDatabase get_AssemblyInfoDatabase();
    [CompilerGeneratedAttribute]
public DependsUponProvider get_DependsUponProvider();
}
[ExtensionAttribute]
internal static class JetBrains.ProjectModel.ProjectImplementation.CachedComponentsEx : object {
    private static Key`1<CachedComponents> OUR_KEY;
    private static CachedComponentsEx();
    [ExtensionAttribute]
[NotNullAttribute]
public static CachedComponents GetComponents(IProjectItem projectItemBase);
    [ExtensionAttribute]
[NotNullAttribute]
public static IShellLocks GetLocks(ProjectItemBase projectItemBase);
    [ExtensionAttribute]
[NotNullAttribute]
public static IFileSystemTrackerSolutionProxy GetFileSystemTrackerProxy(ProjectItemBase projectItemBase);
    [ExtensionAttribute]
[NotNullAttribute]
public static AssemblyInfoDatabase GetAssemblyInfoDatabase(ProjectItemBase projectItemBase);
}
[ShellComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ProjectModel.ProjectImplementation.DependsUponProvider : object {
    [CanBeNullAttribute]
protected internal virtual IProjectFile GetDependsUponFile(IProjectFile projectFile);
    [CanBeNullAttribute]
private IProjectFile FindDependsUponFile(IProjectFile original, string dependsUponName);
    [CanBeNullAttribute]
protected virtual string TryGetDependsUponNameFromProperties(IProjectFile projectFile);
    [NotNullAttribute]
protected virtual IEnumerable`1<string> GetDependsUponNameCandidates(IProjectFile projectFile);
}
public class JetBrains.ProjectModel.ProjectImplementation.ProjectConfigurations`1 : object {
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    private object myLockObject;
    private FrugalLocalList`1<TProjectConfiguration> myConfigurations;
    [NotNullAttribute]
private Func`2<TargetFrameworkId, TProjectConfiguration> myCreateConfigurationFunc;
    private IProject Project { get; private set; }
    public IEnumerable`1<TargetFrameworkId> TargetFrameworkIds { get; }
    public ICollection`1<IProjectConfiguration> Configurations { get; }
    public ProjectConfigurations`1(Func`2<TargetFrameworkId, TProjectConfiguration> createConfigurationFunc, IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds);
    [CompilerGeneratedAttribute]
private IProject get_Project();
    [CompilerGeneratedAttribute]
private void set_Project(IProject value);
    public sealed virtual IEnumerable`1<TargetFrameworkId> get_TargetFrameworkIds();
    public sealed virtual ICollection`1<IProjectConfiguration> get_Configurations();
    public sealed virtual IProjectConfiguration TryGetConfiguration(TargetFrameworkId targetFrameworkId);
    private void AssertWriteAccessAllowed();
    public sealed virtual IProjectConfiguration GetOrCreateConfiguration(TargetFrameworkId targetFrameworkId);
    private void AddConfiguration(IProjectConfiguration configuration, bool doFireChange);
    public sealed virtual void RemoveConfiguration(TargetFrameworkId targetFrameworkId);
    private void RemoveConfiguration(TargetFrameworkId targetFrameworkId, bool doFireChange);
    public sealed virtual void WriteConfigurations(UnsafeWriter writer, IStringIntern stringIntern);
    public sealed virtual void ReadConfigurations(UnsafeReader reader, IStringIntern stringIntern);
    public sealed virtual void SetProject(IProject project);
    private static bool UpdateConfiguration(IProjectConfiguration oldConfig, IProjectConfiguration newConfig);
    public sealed virtual bool UpdateFrom(IProjectConfigurations config, Func`3<IProjectConfiguration, IProjectConfiguration, bool> customUpdateConfigFunc);
    private void FireTargetFrameworksChanged();
}
public class JetBrains.ProjectModel.ProjectImplementation.ProjectOutputAssemblies : object {
    [CompilerGeneratedAttribute]
private IProject <project>P;
    private List`1<Entry> myEntries;
    public ProjectOutputAssemblies(IProject project);
    [NotNullAttribute]
private Entry TryGetEntry(TargetFrameworkId targetFrameworkId);
    private Entry GetOrCreateEntry(TargetFrameworkId targetFrameworkId);
    [CanBeNullAttribute]
public OutputAssemblyInfo GetOutputAssemblyInfo(TargetFrameworkId targetFrameworkId);
    public void SetOutputAssemblyInfo(TargetFrameworkId targetFrameworkId, OutputAssemblyInfo info);
    [CanBeNullAttribute]
public IAssembly GetOutputAssembly(TargetFrameworkId targetFrameworkId);
    public void SetOutputAssembly(TargetFrameworkId targetFrameworkId, IAssembly assembly);
    public IList`1<Entry> GetAllInfo();
}
public class JetBrains.ProjectModel.ProjectImplementation.ProjectTargetFrameworkScope : TargetFrameworkScope {
    [NotNullAttribute]
private IProject myOwner;
    private JetHashSet`1<IProjectToModuleReference> myReferences;
    [CompilerGeneratedAttribute]
private TargetFrameworkId <FrameworkId>k__BackingField;
    public IReadOnlyCollection`1<IProjectToModuleReference> ProjectReferences { get; }
    public TargetFrameworkId FrameworkId { get; }
    public IModuleReferenceResolveContext ResolveContext { get; }
    public ProjectTargetFrameworkScope(IProject owner, TargetFrameworkId targetFrameworkId, AssemblyInfoDatabase assemblyInfoDatabase);
    public IReadOnlyCollection`1<IProjectToModuleReference> get_ProjectReferences();
    [CompilerGeneratedAttribute]
public virtual TargetFrameworkId get_FrameworkId();
    public virtual IModuleReferenceResolveContext get_ResolveContext();
    internal void AddReference(IProjectToModuleReference reference, VirtualFileSystemPath resolvedPath);
    internal void RemoveReference(IProjectToModuleReference referenceToRemove);
    public void RemoveResolveResult(IProjectToAssemblyReference referenceToRemove);
    public ICollection`1<IModuleToAssemblyReference> CreateReferencesToAssembly(AssemblyNameInfo assemblyNameInfo);
    public virtual void Dump(TextWriter to);
    protected virtual bool IsPortable();
    public bool IsConsistent();
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.ProjectImplementation.TargetFrameworkIdInProjectFile : object {
    private IProjectFileDataCache myCache;
    private TargetFrameworkIdDataProvider myTargetFrameworkIdDataProvider;
    private ProjectSdkDataProvider myProjectSdkDataProvider;
    [CompilerGeneratedAttribute]
private static TargetFrameworkIdInProjectFile <Instance>k__BackingField;
    [CanBeNullAttribute]
public static TargetFrameworkIdInProjectFile Instance { get; private set; }
    public TargetFrameworkIdInProjectFile(Lifetime lifetime, IProjectFileDataCache cache);
    [CompilerGeneratedAttribute]
public static TargetFrameworkIdInProjectFile get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(TargetFrameworkIdInProjectFile value);
    public IList`1<TargetFrameworkId> GetTargetFrameworkIds(VirtualFileSystemPath projectFilePath);
    public IList`1<TargetFrameworkId> GetTargetFrameworkIds(IProject project);
    [CanBeNullAttribute]
public string GetNetSdk(VirtualFileSystemPath projectFilePath);
    public bool IsMicrosoftNetSdkProject(VirtualFileSystemPath projectFilePath);
    public bool IsMicrosoftNetSdkDesktopProject(VirtualFileSystemPath projectFilePath);
    public bool IsMicrosoftNetSdkWebProject(VirtualFileSystemPath projectFilePath);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0();
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.ProjectImplementation.TargetFrameworkIdProviderByProjectJson : object {
    private IProjectJsonDataCache myCache;
    private TargetFrameworkIdsInProjectJsonProvider myTargetFrameworkIdsInProjectJsonProvider;
    [CompilerGeneratedAttribute]
private ISignal`1<VirtualFileSystemPath> <TargetFrameworkIdsChanged>k__BackingField;
    public int Priority { get; }
    public ISignal`1<VirtualFileSystemPath> TargetFrameworkIdsChanged { get; }
    public TargetFrameworkIdProviderByProjectJson(Lifetime lifetime, IProjectJsonDataCache cache);
    private void OnSingleTargetFrameworkIdChanged(VirtualFileSystemPath projectJsonFileLocation, IList`1<TargetFrameworkId> old, IList`1<TargetFrameworkId> new);
    public sealed virtual int get_Priority();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<VirtualFileSystemPath> get_TargetFrameworkIdsChanged();
    public sealed virtual IReadOnlyCollection`1<TargetFrameworkId> GetTargetFrameworkIds(VirtualFileSystemPath projectFilePath);
}
public abstract class JetBrains.ProjectModel.ProjectImplementation.TargetFrameworkScope : object {
    protected IShellLocks Locks;
    private protected OneToSetMap`2<string, Pair`2<AssemblyNameInfo, IAssemblyLocation>> ResolvedReferences;
    protected AssemblyInfoDatabase AssemblyInfoDatabase;
    private ISolution mySolution;
    private protected static Dictionary`2<string, string> HardcodedRetargeting;
    public TargetFrameworkId FrameworkId { get; }
    public IModuleReferenceResolveContext ResolveContext { get; }
    protected TargetFrameworkScope(AssemblyInfoDatabase assemblyInfoDatabase, ISolution solution);
    private static TargetFrameworkScope();
    public void AddResolveResult(AssemblyNameInfo assemblyName, IAssemblyLocation resolveResult);
    public virtual TargetFrameworkId get_FrameworkId();
    public IEnumerable`1<IAssemblyLocation> GetAllResolveResults();
    protected bool RemoveResolve(AssemblyNameInfo assemblyNameInfo, IAssemblyLocation hintLocation, bool strictComparison);
    public abstract virtual IModuleReferenceResolveContext get_ResolveContext();
    [CanBeNullAttribute]
public IAssemblyLocation GetResolveResult(AssemblyNameInfo assemblyNameInfo);
    private IAssemblyLocation ReferenceMatchesDefinitionNoVersionCheck(AssemblyNameInfo assemblyNameInfo, Pair`2<AssemblyNameInfo, IAssemblyLocation> result);
    protected void AddResolveResultInternal(AssemblyNameInfo assemblyName, IAssemblyLocation resolveResult);
    public virtual void Dump(TextWriter to);
    protected virtual bool IsPortable();
    [CanBeNullAttribute]
public AssemblyNameInfo TryAdjustAssemblyName(AssemblyNameInfo initialAssemblyNameInfo);
    protected void ClearAllResolveResults();
}
public class JetBrains.ProjectModel.ProjectImplementation.UniversalReferencesScope : TargetFrameworkScope {
    public IModuleReferenceResolveContext ResolveContext { get; }
    public UniversalReferencesScope(AssemblyInfoDatabase assemblyInfoDatabase, ISolution solution);
    [NotNullAttribute]
public List`1<IAssemblyLocation> GetAllResolveResults(AssemblyNameInfo assemblyNameInfo);
    [ObsoleteAttribute("use in tests only")]
public void Invalidate();
    public virtual IModuleReferenceResolveContext get_ResolveContext();
    public bool ContainsResolve(IAssembly assembly);
}
public abstract class JetBrains.ProjectModel.ProjectItemBase : UserDataHolder {
    [CanBeNullAttribute]
private UserDataHolder myUserDataHolder;
    [CanBeNullAttribute]
protected internal ProjectFolderImpl myParentFolder;
    [CanBeNullAttribute]
private FileSystemTrackerRequestCookie myFileSystemTrackerRequestCookie;
    private CachedProjectItemValue`2<ProjectItemBase, string> myCachedPersistentId;
    private static Func`2<ProjectItemBase, string> ourGetCachedPersistentId;
    private CachedProjectItemValue`2<ProjectItemBase, Pair`2<bool, bool>> myCachedIsValid;
    public bool IsLinked { get; }
    public IProjectFolder ParentFolder { get; }
    public string Name { get; }
    public VirtualFileSystemPath Location { get; }
    public ProjectItemKind Kind { get; }
    public IShellLocks Locks { get; }
    public IFileSystemTrackerSolutionProxy FileSystemTracker { get; }
    public Type MarshallerType { get; }
    protected ProjectItemBase(ProjectFolderImpl parentFolder);
    private static ProjectItemBase();
    internal void IncrementPathsCacheState();
    public abstract virtual bool get_IsLinked();
    protected void UnadviseFileSystemChanges();
    protected abstract virtual void AdviseFileSystemChanges();
    protected void DoAdviseFileSystemChanges();
    public sealed virtual IProjectFolder get_ParentFolder();
    public abstract virtual string get_Name();
    public abstract virtual VirtualFileSystemPath get_Location();
    [NotNullAttribute]
public virtual ProjectModelChange GetChangeDelta(ProjectModelChangeType changeType);
    internal void RemoveInternal();
    private void RemoveFromParentFolder();
    public abstract virtual ProjectItemKind get_Kind();
    public sealed virtual IShellLocks get_Locks();
    public IFileSystemTrackerSolutionProxy get_FileSystemTracker();
    public sealed virtual string GetPresentableProjectPath();
    protected virtual void DoMoveImpl(IProjectFolder newParentItem);
    protected virtual Pair`2<bool, bool> CalculateIsValid();
    private Pair`2<bool, bool> GetIsValidPair();
    public sealed virtual bool IsValid();
    public sealed virtual bool IsValidAndAlive();
    public abstract virtual Type get_MarshallerType();
    public virtual bool IsReallyValid();
    public sealed virtual string GetPersistentID();
    public virtual IProject GetProject();
    public virtual void Accept(ProjectVisitor projectVisitor);
    public virtual ISolution GetSolution();
    public virtual object GetProperty(Key propertyName);
    public virtual void SetProperty(Key propertyName, object propertyValue);
    internal virtual void DumpInternal(TextWriter to, int indent, DumpFlags flags);
    public virtual void Dump(TextWriter to, DumpFlags flags);
    internal abstract virtual void ApplyFileSystemChange(ApplyFileSystemChangeArgs args);
    public virtual void OnRemove(IProject parentProject);
    public virtual void OnOpen(IProject parentProject);
    public virtual void DoRemove();
    public void DoMove(IProjectFolder newParentItem);
    public abstract virtual void DoRename(string newName);
    protected virtual void SubtreeChanged();
    public virtual void Cleanup();
    public static void E4A7C9CB_9D3A_4950_81E0_C54C1BD963F6(IReadOnlyCollection`1<IProjectFile> dependentFiles, IProjectFolder projectFolder, IProjectItem projectItem, ISolution solution);
    [CompilerGeneratedAttribute]
private ISolution <GetIsValidPair>b__31_0();
    [CompilerGeneratedAttribute]
private bool <DoMove>b__49_0(IProjectFolder x);
}
public class JetBrains.ProjectModel.ProjectItemChange : ProjectModelChange {
    private ExternalChangeType myExternalChangeType;
    [CompilerGeneratedAttribute]
private string <OldPersistentId>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectFolder <OldParentFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <OldLocation>k__BackingField;
    public string OldPersistentId { get; }
    public IProjectFolder OldParentFolder { get; }
    public IProjectItem ProjectItem { get; }
    protected string ElementPath { get; }
    protected string ElementDescription { get; }
    public bool IsContentsExternallyChanged { get; }
    public VirtualFileSystemPath OldLocation { get; }
    public ProjectItemChange(IList`1<ProjectModelChange> childrenDeltas, IProjectItem projectModelElement, IProjectFolder oldParentFolder, ProjectModelChangeType changeType, VirtualFileSystemPath oldLocation, ExternalChangeType externalChangeType, string oldPersistentId);
    public ProjectItemChange(IList`1<ProjectModelChange> childrenDeltas, IProjectItem projectModelElement, IProjectFolder oldParentItem, ProjectModelChangeType changeType, VirtualFileSystemPath oldLocation, string oldPersistentId);
    [CompilerGeneratedAttribute]
public string get_OldPersistentId();
    [CompilerGeneratedAttribute]
public IProjectFolder get_OldParentFolder();
    public IProjectItem get_ProjectItem();
    public virtual void Accept(IProjectModelChangeDeltaVisitor visitor);
    protected virtual string get_ElementPath();
    protected virtual string get_ElementDescription();
    private bool IsTopLevelProject();
    protected virtual void CollectAffectedSolutionFiles(HashSet`1<IProjectFile> affectedSolutionFiles);
    public virtual ProjectModelChange Propagate();
    public virtual IProject GetOldProject();
    public bool get_IsContentsExternallyChanged();
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_OldLocation();
    protected virtual string GetExtendedDump();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.ProjectItemExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IReadOnlyCollection`1<IProjectFile> GetDependentFilesTransitive(IProjectFile projectFile);
    [ExtensionAttribute]
[NotNullAttribute]
public static IProjectFile GetRootDependsUponFile(IProjectFile projectFile);
    [NotNullAttribute]
private static IProjectFile GetRootDependsUponFile(IProjectFile projectFile, HashSet`1<IProjectFile> visited);
    [ExtensionAttribute]
[NotNullAttribute]
public static IReadOnlyCollection`1<IProjectFile> GetThisAndDependentFilesTransitive(IProjectFile projectFile);
    private static void GetDependentFilesTransitive(IProjectFile projectFile, List`1<IProjectFile> container);
    [ExtensionAttribute]
public static int GetDependentFilesDepth(IProjectFile projectFile);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsShared(IProjectFile projectFile);
    [ExtensionAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
[PureAttribute]
public static IList`1<IProjectFile> GetSharedProjectFiles(IProjectFile projectFile);
    [ExtensionAttribute]
[PureAttribute]
[ContractAnnotationAttribute("project: null => false")]
public static bool IsSharedProject(IProject project);
    [ExtensionAttribute]
[PureAttribute]
[NotNullAttribute]
public static ICollection`1<IProjectFile> GetSharedProjectItemParts(IProject project);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsSharedProjectItemsFile(VirtualFileSystemPath location);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsSharedVcxItemsFile(VirtualFileSystemPath location);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectFile SelectBestProjectFile(IEnumerable`1<IProjectFile> projectFiles, Func`2<IProjectFile, int> customScore);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectItem SelectBestProjectItem(IEnumerable`1<IProjectItem> projectItems);
    private static int GetProjectScore(IProjectItem projectItem);
    private static int GetBuildActionScore(IProjectFile projectFile);
    private static int GetHiddenScore(IProjectFile projectFile);
    private static int GetProjectFileScore(IProjectFile projectFile, Func`2<IProjectFile, int> customScore);
}
public enum JetBrains.ProjectModel.ProjectItemKind : Enum {
    public short value__;
    public static ProjectItemKind UNKNOWN;
    public static ProjectItemKind PHYSICAL_FILE;
    public static ProjectItemKind PHYSICAL_DIRECTORY;
    public static ProjectItemKind PROJECT;
    public static ProjectItemKind VIRTUAL_DIRECTORY;
}
public class JetBrains.ProjectModel.ProjectItemsVisitor`1 : RecursiveProjectVisitor {
    private Action`1<TProjectItem> myActionWithItem;
    public ProjectItemsVisitor`1(Action`1<TProjectItem> actionWithItem);
    public virtual void VisitProjectItem(IProjectItem projectItem);
}
[FlagsAttribute]
public enum JetBrains.ProjectModel.ProjectKind : Enum {
    public byte value__;
    public static ProjectKind UNSUPPORTED;
    public static ProjectKind REGULAR_PROJECT;
    public static ProjectKind SOLUTION_FOLDER;
    public static ProjectKind WEB_SITE;
    public static ProjectKind OPEN_FOLDER;
    public static ProjectKind SOLUTION_PROJECT;
    public static ProjectKind MISC_FILES_PROJECT;
    public static ProjectKind SDK_MODULE;
}
public static class JetBrains.ProjectModel.ProjectLanguageUtil : object {
    public static ProjectLanguage GetLanguageTypeForWebSite(string s);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.ProjectLocations : object {
    private ISolution mySolution;
    private JetPathPrefixTree`2<VirtualFileSystemPath, ISet`1<IProject>> myLocationsTree;
    private JetPathPrefixTree`2<VirtualFileSystemPath, ISet`1<IProject>> myOutputsTree;
    private OneToSetMap`2<IProject, VirtualFileSystemPath> myOutputsSet;
    public ProjectLocations(Lifetime lifetime, ISolution solution, ChangeManager changeManager, IViewableProjectsCollection projectsCollection);
    private sealed virtual override object JetBrains.Application.changes.IChangeProvider.Execute(IChangeMap changeMap);
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.ProjectLocations/<FindInsideProjectLocation>d__6")]
public IEnumerable`1<IProject> FindInsideProjectLocation(VirtualFileSystemPath path);
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.ProjectLocations/<FindByProjectOutput>d__7")]
public IEnumerable`1<KeyValuePair`2<VirtualFileSystemPath, IProject>> FindByProjectOutput(VirtualFileSystemPath path);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0(Lifetime lt, IProject project);
    [CompilerGeneratedAttribute]
private void <JetBrains.Application.changes.IChangeProvider.Execute>b__5_0(ProjectModelChange change);
}
public abstract class JetBrains.ProjectModel.ProjectManager : object {
    public abstract virtual void TryOpenProject(IProject project, bool schedule);
    public abstract virtual void CloseProject(IProject project);
    public static ProjectManager GetInstance(ISolution solution);
    public static bool HasInstance(ISolution solution);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.ProjectManagerBase : ProjectManager {
    private Lifetime myLifetime;
    private ILogger myLogger;
    private IViewableProjectsCollection myViewableProject;
    private ISolution mySolution;
    private IShellLocks myLocks;
    private IComponentContainer myContainer;
    private IPartCatalogSet myCatalogSet;
    private Dictionary`2<IProject, Pair`2<LifetimeDefinition, ProjectInstance>> myProjects;
    private ISolutionLoadTasksScheduler myScheduler;
    private bool myIsInitialOpenFinished;
    unknown bool IsInitialOpenStarted {internal set; }
    public ProjectManagerBase(Lifetime lifetime, ILogger logger, IViewableProjectsCollection viewableProject, IComponentContainer container, ShellPartCatalogSet catalogSet, ISolution solution, IShellLocks locks, ISolutionLoadTasksScheduler scheduler);
    internal void set_IsInitialOpenStarted(bool value);
    private Pair`2<LifetimeDefinition, ProjectInstance> CreateProjectInstance(IProject project);
    private ProjectInstance CreateProjectInstance(Lifetime projectInstanceLifetime, IProject project);
    private void OpenProjectInstance(Pair`2<LifetimeDefinition, ProjectInstance> projectInstanceWithLifetime);
    private void CloseProjectInstance(IProject project);
    private void OpenProjectsRecursive(IEnumerable`1<IProject> projects, bool shouldSchedule);
    private void CloseProjectsRecursive(IEnumerable`1<IProject> projects);
    public virtual void TryOpenProject(IProject project, bool schedule);
    private void EnqueueOpenProjectInstance(IProject project, bool shouldSchedule);
    public virtual void CloseProject(IProject project);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_0();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.ProjectManagerInitializer : object {
    protected static SolutionLoadTaskIdentifier OpenTopLevel;
    protected static SolutionLoadTaskIdentifier RaiseAllProjectsAdded;
    public ProjectManagerInitializer(Lifetime lifetime, ISolution solution, ProjectManager projectManager, IShellLocks locks, ISolutionLoadTasksScheduler scheduler, ILogger logger);
    private static ProjectManagerInitializer();
    private static void ScheduleRaiseAllProjectsAdded(ISolution solution, IShellLocks locks, ISolutionLoadTasksScheduler scheduler);
    private static void SetOpenToHierarchy(IProject project);
    private static void OpenTopLevelProjects(ISolution solution, ProjectManager projectManager);
    private static void CloseTopLevelProjects(ISolution solution, ProjectManager projectManager, IShellLocks locks);
}
public abstract class JetBrains.ProjectModel.ProjectModelChange : object {
    private static ValueCollection<IProjectModelElement, ProjectModelChange> ourEmptyValueCollection;
    private Dictionary`2<IProjectModelElement, ProjectModelChange> myChildrenDeltas;
    public static ProjectModelChange[] EMPTY_DELTAS;
    [CompilerGeneratedAttribute]
private PropertyChangeSupport <PropertyChangeSupport>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectModelChange <ParentDelta>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectModelElement <ProjectModelElement>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectModelChangeType <ChangeType>k__BackingField;
    public PropertyChangeSupport PropertyChangeSupport { get; private set; }
    public ProjectModelChange ParentDelta { get; private set; }
    public IProjectModelElement ProjectModelElement { get; }
    internal ProjectModelChangeType ChangeType { get; internal set; }
    protected string ElementPath { get; }
    protected string ElementDescription { get; }
    public bool IsOpeningSolution { get; }
    public bool IsClosingSolution { get; }
    public bool IsAdded { get; }
    public bool IsRemoved { get; }
    public bool IsMovedOut { get; }
    public bool IsMovedIn { get; }
    public bool IsExternallyChanged { get; }
    public bool IsSubtreeChanged { get; }
    public bool IsReferenceTargetChanged { get; }
    public bool IsPropertiesChanged { get; }
    public bool IsTargetFrameworkChanged { get; }
    protected ProjectModelChange(IList`1<ProjectModelChange> childrenDeltas, IProjectModelElement projectModelElement, ProjectModelChangeType changeType);
    private static ProjectModelChange();
    [CompilerGeneratedAttribute]
public PropertyChangeSupport get_PropertyChangeSupport();
    [CompilerGeneratedAttribute]
private void set_PropertyChangeSupport(PropertyChangeSupport value);
    protected bool IsOpeningOrClosingProject();
    protected virtual void CollectAffectedSolutionFiles(HashSet`1<IProjectFile> affectedSolutionFiles);
    public ICollection`1<IProjectFile> GetAffectedSolutionFiles();
    protected IProjectFile GetNewProjectFile();
    protected IProjectFile GetOldProjectFile();
    protected IProjectFile GetSolutionFile();
    public static IList`1<ProjectModelChange> Merge(ICollection`1<ProjectModelChange> firstDeltas, ProjectModelChange[] secondDeltas);
    public static IList`1<ProjectModelChange> Merge(ICollection`1<ProjectModelChange> firstDeltas, ICollection`1<ProjectModelChange> secondDeltas);
    [NotNullAttribute]
public abstract virtual ProjectModelChange Propagate();
    private ProjectModelChange FindChild(IProjectModelElement element);
    private bool CanMerge(ProjectModelChange other);
    protected virtual ProjectModelChange Merge(ProjectModelChange other);
    [CanBeNullAttribute]
public ISolution GetSolution();
    public IProject GetNewProject();
    [CanBeNullAttribute]
public virtual IProject GetOldProject();
    [CompilerGeneratedAttribute]
public ProjectModelChange get_ParentDelta();
    [CompilerGeneratedAttribute]
private void set_ParentDelta(ProjectModelChange value);
    public ValueCollection<IProjectModelElement, ProjectModelChange> GetChildren();
    [CompilerGeneratedAttribute]
public IProjectModelElement get_ProjectModelElement();
    [CompilerGeneratedAttribute]
internal ProjectModelChangeType get_ChangeType();
    [CompilerGeneratedAttribute]
internal void set_ChangeType(ProjectModelChangeType value);
    public bool ContainsChangeType(ProjectModelChangeType changeType);
    public virtual void Accept(IProjectModelChangeDeltaVisitor visitor);
    private string GetPropertyChanges();
    private void DumpInternal(TextWriter to, int level);
    protected virtual string GetExtendedDump();
    protected abstract virtual string get_ElementPath();
    protected abstract virtual string get_ElementDescription();
    public void Dump(TextWriter to);
    public string Dump();
    public bool get_IsOpeningSolution();
    public bool get_IsClosingSolution();
    public bool get_IsAdded();
    public bool get_IsRemoved();
    public bool get_IsMovedOut();
    public bool get_IsMovedIn();
    public bool get_IsExternallyChanged();
    public bool get_IsSubtreeChanged();
    public bool get_IsReferenceTargetChanged();
    public bool get_IsPropertiesChanged();
    public bool get_IsTargetFrameworkChanged();
}
[FlagsAttribute]
public enum JetBrains.ProjectModel.ProjectModelChangeType : Enum {
    public int value__;
    public static ProjectModelChangeType UNKNOWN;
    public static ProjectModelChangeType ADDED;
    public static ProjectModelChangeType REMOVED;
    public static ProjectModelChangeType MOVED_OUT;
    public static ProjectModelChangeType MOVED_IN;
    public static ProjectModelChangeType SUBTREE;
    public static ProjectModelChangeType EXTERNAL_CHANGE;
    public static ProjectModelChangeType PROPERTIES;
    public static ProjectModelChangeType REFERENCE_TARGET;
    public static ProjectModelChangeType TARGET_FRAMEWORK;
    public static ProjectModelChangeType PROJECT_STRUCTURE_AND_COMPONENTS_READY;
    public static ProjectModelChangeType PROJECT_MODEL_CACHES_READY;
}
public class JetBrains.ProjectModel.ProjectModelElementEnvoy : object {
    private static ProjectModelElementEnvoy ourEmpty;
    private ISolution mySolution;
    private IProjectModelElementPointer myElementPointer;
    private ProjectModelElementPointerManager myPointerManager;
    private IPresentableItem myCache;
    private ProjectItemKind myProjectItemKind;
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFrameworkId>k__BackingField;
    [CanBeNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; }
    public string Text { get; }
    public bool IsValid { get; }
    public string Name { get; }
    [CanBeNullAttribute]
public ISolution Solution { get; }
    public ProjectItemKind ProjectItemKind { get; }
    public static ProjectModelElementEnvoy Empty { get; }
    public ProjectModelElementEnvoy(IProjectModelElement element, ISolution solution, ProjectModelElementPointerManager pmepm);
    public ProjectModelElementEnvoy(IProjectModelElement element, TargetFrameworkId targetFrameworkId);
    private static ProjectModelElementEnvoy();
    [CompilerGeneratedAttribute]
public TargetFrameworkId get_TargetFrameworkId();
    [CanBeNullAttribute]
public IProjectModelElement GetValidProjectElement();
    public string GetPersistentId();
    public string get_Text();
    public bool get_IsValid();
    public string get_Name();
    public ISolution get_Solution();
    public ProjectItemKind get_ProjectItemKind();
    public static ProjectModelElementEnvoy get_Empty();
    public static ProjectModelElementEnvoy Create(IProjectModelElement element);
    public void Present(StructuredPresenter`2<TStructureElement, IPresentableItem> presenter, TStructureElement structureElement, IPresentableItem item, PresentationState state);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.ProjectModelElementExtensions : object {
    [ExtensionAttribute]
[ConditionalAttribute("JET_MODE_ASSERT")]
public static void AssertIsValid(IProjectModelElement element);
    [ExtensionAttribute]
public static bool IsReallyValid(IProjectModelElement element);
    [ExtensionAttribute]
[ConditionalAttribute("JET_MODE_ASSERT")]
public static void AssertAllAreValid(IEnumerable`1<TProjectModelElement> elements);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.ProjectModelElementPointerExtensions : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectModelElement GetValidProjectElement(IProjectModelElementPointer pointer, ISolution solution);
    [ExtensionAttribute]
public static string GetPersistentId(IProjectModelElementPointer pointer, ISolution solution);
    [ExtensionAttribute]
[NotNullAttribute]
public static IProjectModelElementPointer CreatePointer(IProjectModelElement element);
}
public abstract class JetBrains.ProjectModel.ProjectModelElementPointerManager : object {
    [NotNullAttribute]
public static ProjectModelElementPointerManager GetInstance(ISolution solution);
    [NotNullAttribute]
public abstract virtual IProjectModelElementPointer CreatePointer(IProjectModelElement element);
    [NotNullAttribute]
public abstract virtual IProjectModelElementPointer CreatePointer(string persistentId);
    [CanBeNullAttribute]
public abstract virtual IProjectModelElement GetValidProjectModelElement(IProjectModelElementPointer pointer);
    [CanBeNullAttribute]
public abstract virtual string GetPersistentId(IProjectModelElementPointer pointer);
    public abstract virtual IList`1<IProjectModelElementPointer> GetAllPointersToTheSameElement(IProjectModelElementPointer pointer);
    public abstract virtual void Dump(TextWriter writer, VirtualFileSystemPath basePath);
    public abstract virtual object Execute(IChangeMap changeMap);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.ProjectModelElementPointerManagerEx : object {
    [ExtensionAttribute]
public static IList`1<IProjectModelElementPointer> GetAllPointersToTheSameElement(ProjectModelElementPointerManager manager, IProjectModelElement element);
    [ExtensionAttribute]
public static IList`1<IProjectModelElementPointer> GetAllPointersToTheSameElement(ProjectModelElementPointerManager manager, string persistentId);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectModelElementPresentationService : object {
    [CompilerGeneratedAttribute]
private IOrderedImmutableList`2<IProjectModelElementPresenter, ProjectModelElementPresenterAttribute> <presenters>P;
    public ProjectModelElementPresentationService(IOrderedImmutableList`2<IProjectModelElementPresenter, ProjectModelElementPresenterAttribute> presenters);
    [NotNullAttribute]
public IconId GetIcon(IProjectModelElement projectModelElement);
    [NotNullAttribute]
public string GetPresentableLocation(IProjectModelElement projectModelElement);
}
[MeansImplicitUseAttribute]
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.ProjectModel.IProjectModelElementPresenter")]
public class JetBrains.ProjectModel.ProjectModelElementPresenterAttribute : ShellComponentAttribute {
    [CompilerGeneratedAttribute]
private double <Priority>k__BackingField;
    public double Priority { get; }
    public ProjectModelElementPresenterAttribute(double priority, Instantiation instantiation);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Priority();
}
[ShellComponentAttribute("16")]
internal class JetBrains.ProjectModel.ProjectModelFakeSolutionZoneProvider : object {
    public IEnumerable`1<FakeSolutionZoneFilter> Zones { get; }
    public sealed virtual IEnumerable`1<FakeSolutionZoneFilter> get_Zones();
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.ProjectModelIcons : object {
    public IconId DirectoryIcon { get; }
    public IconId SdkModuleIcon { get; }
    public IconId AssemblyIcon { get; }
    public IconId AssemblyReferenceIcon { get; }
    public IconId CSharpProjectIcon { get; }
    public IconId SharedProjectIcon { get; }
    public IconId MissingFileIcon { get; }
    public IconId SolutionFolderIcon { get; }
    public IconId VisualBasicProjectIcon { get; }
    public IconId CppProjectIcon { get; }
    public IconId DatabaseProjectIcon { get; }
    public IconId UnknownIcon { get; }
    public virtual IconId get_DirectoryIcon();
    public virtual IconId get_SdkModuleIcon();
    public virtual IconId get_AssemblyIcon();
    public virtual IconId get_AssemblyReferenceIcon();
    public virtual IconId get_CSharpProjectIcon();
    public virtual IconId get_SharedProjectIcon();
    public virtual IconId get_MissingFileIcon();
    public virtual IconId get_SolutionFolderIcon();
    public virtual IconId get_VisualBasicProjectIcon();
    public virtual IconId get_CppProjectIcon();
    public virtual IconId get_DatabaseProjectIcon();
    public virtual IconId get_UnknownIcon();
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.ProjectModelKickOff : object {
    public ProjectModelKickOff(ISolution solution, ISolutionLoadTasksScheduler scheduler, IShellLocks locks);
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.ProjectModelUpdateStates : object {
    private ILogger myLogger;
    private int myHardOperationsCount;
    public IProperty`1<bool> IsInHardUpdateState;
    public ProjectModelUpdateStates(Lifetime lifetime, ILogger logger);
    public void Suspend(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0(Lifetime lt, bool value);
    [CompilerGeneratedAttribute]
private void <Suspend>b__3_0();
}
public class JetBrains.ProjectModel.ProjectOutputChange : object {
    public IList`1<SimpleProjectOutputChange> Changes;
    public ProjectOutputChange(IList`1<SimpleProjectOutputChange> changes);
}
public enum JetBrains.ProjectModel.ProjectOutputType : Enum {
    public byte value__;
    public static ProjectOutputType CONSOLE_EXE;
    public static ProjectOutputType WIN_EXE;
    public static ProjectOutputType LIBRARY;
    public static ProjectOutputType MODULE;
    public static ProjectOutputType WINMDOBJ;
    public static ProjectOutputType APPCONTAINEREXE;
    public static ProjectOutputType UNSPECIFIED;
    public static ProjectOutputType UNKNOWN;
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.ProjectPresentablePathCache : object {
    private ISolution mySolution;
    private Dictionary`2<IProjectItem, string> myCache;
    public ProjectPresentablePathCache(Lifetime lifetime, ISolution solution, ChangeManager changeManager);
    private void OnChange(ChangeEventArgs changeEventArgs);
    private void ClearCache();
    public sealed virtual string GetPresentableProjectPath(IProjectItem projectItem);
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.ProjectPropertiesListener : object {
    private ISolution mySolution;
    private Signal`1<IProject> mySignal;
    public ProjectPropertiesListener(Lifetime lifetime, ISolution solution, ChangeManager changeManager);
    public void AdviseProjectPropertiesChange(Lifetime lifetime, Action`1<IProject> onProjectPropertiesChanged);
    private void ProcessProjectModelChange(ProjectModelChange change);
    public sealed virtual object Execute(IChangeMap changeMap);
}
public class JetBrains.ProjectModel.ProjectReferenceChange : ProjectModelChange {
    protected string ElementPath { get; }
    protected string ElementDescription { get; }
    public IProjectToModuleReference ProjectToModuleReference { get; }
    public ProjectReferenceChange(IProjectToModuleReference projectModelElement, ProjectModelChangeType changeType);
    public virtual IProject GetOldProject();
    public virtual void Accept(IProjectModelChangeDeltaVisitor visitor);
    protected virtual string get_ElementPath();
    protected virtual string get_ElementDescription();
    public IProjectToModuleReference get_ProjectToModuleReference();
    protected virtual void CollectAffectedSolutionFiles(HashSet`1<IProjectFile> affectedSolutionFiles);
    public virtual ProjectModelChange Propagate();
    protected virtual ProjectModelChange Merge(ProjectModelChange other);
}
public class JetBrains.ProjectModel.ProjectReferenceTargetChange : ProjectReferenceChange {
    [CompilerGeneratedAttribute]
private IModule <OldReferenceTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private IModule <NewReferenceTarget>k__BackingField;
    public IModule OldReferenceTarget { get; }
    public IModule NewReferenceTarget { get; }
    public ProjectReferenceTargetChange(IProjectToModuleReference projectModelElement, IModule oldReferenceTarget, IModule newReferenceTarget);
    [CompilerGeneratedAttribute]
public IModule get_OldReferenceTarget();
    [CompilerGeneratedAttribute]
public IModule get_NewReferenceTarget();
    protected virtual string GetExtendedDump();
}
public class JetBrains.ProjectModel.ProjectSdkReferenceChange : ProjectModelChange {
    public SdkReferenceImpl SdkReferenceImpl { get; }
    protected string ElementPath { get; }
    protected string ElementDescription { get; }
    public ProjectSdkReferenceChange(IProjectModelElement projectModelElement, ProjectModelChangeType changeType);
    public virtual ProjectModelChange Propagate();
    public virtual void Accept(IProjectModelChangeDeltaVisitor visitor);
    public virtual IProject GetOldProject();
    public SdkReferenceImpl get_SdkReferenceImpl();
    protected virtual string get_ElementPath();
    protected virtual string get_ElementDescription();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.ProjectUtil : object {
    public static string PROJECT_PATH_SEPARATOR;
    public static Key`1<XmlNode> XmlElementKey;
    private static IProjectPresentablePathProvider ourPresentablePathProvider;
    private static string FILE_PREFIX;
    private static string FOLDER_PREFIX;
    private static string FOLDER_LINKED_PREFIX;
    private static string REF_PREFIX;
    private static string PKGREF_PREFIX;
    private static string SDK_REF_PREFIX;
    private static string FILE_DIFF_PREFIX;
    private static string FILE_LINKED_PREFIX;
    private static string FILE_SOLUTION_PREFIX;
    private static string SEPARATOR;
    private static char DRIVE_SEPARATOR;
    private static char PATH_SEPARATOR;
    public static IProjectPresentablePathProvider ProjectPresentablePathProvider { get; }
    private static ProjectUtil();
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.ProjectUtil/<GetPathChain>d__2")]
[ExtensionAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
public static IEnumerable`1<IProjectItem> GetPathChain(IProjectItem item);
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.ProjectUtil/<GetPathChainPresentable>d__3")]
[ExtensionAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
public static IEnumerable`1<IProjectItem> GetPathChainPresentable(IProjectItem item);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<IProjectFolder> GetPathChain(IProjectFolder item);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<IProjectFolder> GetPathChainPresentable(IProjectFolder item);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<IProjectFolder> GetParentFolders(IProjectItem item);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<IProjectFolder> GetParentFoldersPresentable(IProjectItem item);
    public static CascadeGroup CreateCascade(IProjectItem item);
    [CanBeNullAttribute]
public static IProjectToModuleReference ToReference(IProject ownerProject, IModule target);
    public static CascadeGroup CreateCascade(IProjectItem item, ProjectModelElementPointerManager projectModelElementPointerManager, ISolution solution);
    public static String[] ProjectPathAsArray(string projPath);
    public static string ProjectPathAsString(String[] projPath);
    public static string GetPresentableProjectPath(IEnumerable`1<IProjectItem> pathChain);
    public static string GetPresentableProjectPathElementName(IProjectModelElement element);
    public static string GetPresentableProjectPath(IProjectItem projectItem);
    public static string GetRelativePresentableProjectPath(IProjectItem projectItem, IProjectFolder projectFolder);
    public static IProjectPresentablePathProvider get_ProjectPresentablePathProvider();
    public static int GetFileCount(IProjectModelElement projectItem);
    public static IProjectItem[] GetFilteredSubItems(IProjectFolder projectFolder, Predicate`1<IProjectItem> filter);
    private static void ParseItem(string item, String& prefix, String& name);
    [CanBeNullAttribute]
public static IProject FindProjectByPersistentID(ISolution solution, string id);
    public static IProjectElement FindProjectElementByPersistentID(ISolution solution, string id);
    private static IProjectItem FindProjectItemByAmbiguityIndex(IProjectItem candidateItem, string ambiguityIndex);
    public static string GetPersistentID(IProjectItem projectItem);
    private static string GetRelativePathString(VirtualFileSystemPath path, VirtualFileSystemPath rootPath);
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.ProjectUtil/<GetSubItemsRecursively>d__42")]
[ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<IProjectItem> GetSubItemsRecursively(IProjectFolder item);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectItem GetSubItemRecursively(IProjectFolder where, string what);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<IProjectItem> GetSubItemsRecursively(IProjectFolder where, string what);
    public static string GetPersistentID(IProjectToModuleReference projectToModuleReference);
    public static string GetPersistentID(IProjectToPackageReference projectToPackageReference);
    public static string GetPersistentID(SdkReferenceImpl sdkReferenceImpl);
    [ExtensionAttribute]
public static bool IsProjectFromUserView(IProject project);
    [ExtensionAttribute]
public static bool IsProjectFromUserView(IProjectSearchDescriptor projectSearchDescriptor);
    [NotNullAttribute]
public static IProject GetProjectByFullPath(ISolution solution, VirtualFileSystemPath path);
    [CanBeNullAttribute]
public static IProject TryGetProjectByFullPath(ISolution solution, VirtualFileSystemPath path);
    private static IEnumerable`1<IProject> GetProjectsByFullPathCore(ISolution solution, VirtualFileSystemPath path);
    [ExtensionAttribute]
public static ProjectKind GetProjectKind(IProjectItem projectItem);
    [ExtensionAttribute]
public static bool IsMiscProjectItem(IProjectItem projectItem);
}
public abstract class JetBrains.ProjectModel.ProjectVisitor : object {
    public virtual void VisitProjectModelElement(IProjectModelElement element);
    public virtual void VisitProjectItem(IProjectItem projectItem);
    public virtual void VisitProjectFile(IProjectFile projectFile);
    public virtual void VisitProjectFolder(IProjectFolder projectFolder);
    public virtual void VisitProject(IProject project);
    public virtual void VisitSolution(ISolution solution);
    public virtual void VisitProjectAssemblyReference(IProjectToAssemblyReference reference);
    public virtual void VisitProjectSdkReference(SdkReferenceImpl sdkReferenceImpl);
    public virtual void VisitProjectToProjectReference(IProjectToProjectReference reference);
    public virtual void VisitAssemblyToAssemblyReference(IAssemblyToAssemblyReference reference);
    public virtual void VisitModuleToModuleReference(IProjectToModuleReference reference);
    public virtual void VisitPackageReference(IProjectToPackageReference reference);
}
public class JetBrains.ProjectModel.Properties.BuildSettingsBase : object {
    private IProject myProject;
    private string myPlatformTarget;
    private string myConfiguration;
    private bool myIsBuildable;
    private bool myIsDeployable;
    public string PlatformTarget { get; public set; }
    public string Configuration { get; public set; }
    public bool IsBuildable { get; public set; }
    public bool IsDeployable { get; public set; }
    public sealed virtual void SetProject(IProject project);
    public sealed virtual string get_PlatformTarget();
    public void set_PlatformTarget(string value);
    public sealed virtual string get_Configuration();
    public void set_Configuration(string value);
    public sealed virtual bool get_IsBuildable();
    public void set_IsBuildable(bool value);
    public sealed virtual bool get_IsDeployable();
    public void set_IsDeployable(bool value);
    public virtual void WriteBuildSettings(UnsafeWriter writer, IStringIntern stringIntern);
    public virtual void ReadBuildSettings(UnsafeReader reader, IStringIntern stringIntern);
    public virtual bool UpdateFrom(IBuildSettings settings);
    public virtual void Dump(TextWriter to, int indent);
    protected UndoUsingWriteLock UsingWriteLock();
    protected void OnPropertyChange();
}
public class JetBrains.ProjectModel.Properties.Common.MiscFilesProjectProperties : ProjectPropertiesBase`1<UnsupportedProjectConfiguration> {
    public static Guid MiscFilesPropertyFactoryGuid;
    public IBuildSettings BuildSettings { get; }
    public ProjectKind ProjectKind { get; }
    private static MiscFilesProjectProperties();
    public virtual IBuildSettings get_BuildSettings();
    public virtual ProjectKind get_ProjectKind();
    public virtual void Dump(TextWriter to, int indent);
}
[ProjectModelExtensionAttribute("16")]
public class JetBrains.ProjectModel.Properties.Common.MiscFilesProjectPropertiesFactory : UnknownProjectPropertiesFactory {
    public Guid FactoryGuid { get; }
    public virtual bool IsApplicable(ProjectPropertiesFactoryParameters parameters);
    public virtual bool IsKnownProjectTypeGuid(Guid projectTypeGuid);
    public virtual IProjectProperties CreateProjectProperties(ProjectPropertiesFactoryParameters parameters);
    public virtual Guid get_FactoryGuid();
    public virtual IProjectProperties Read(UnsafeReader reader, IStringIntern stringIntern);
}
public class JetBrains.ProjectModel.Properties.Common.OpenFolderProjectProperties : ProjectPropertiesBase`1<UnsupportedProjectConfiguration> {
    public IBuildSettings BuildSettings { get; }
    public ProjectKind ProjectKind { get; }
    public OpenFolderProjectProperties(Guid factoryGuid);
    public OpenFolderProjectProperties(ICollection`1<Guid> projectTypeGuids, Guid factoryGuid, IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds);
    public virtual IBuildSettings get_BuildSettings();
    public virtual ProjectKind get_ProjectKind();
    public virtual void Dump(TextWriter to, int indent);
}
[ProjectModelExtensionAttribute("16")]
public class JetBrains.ProjectModel.Properties.Common.OpenFolderProjectPropertiesFactory : UnknownProjectPropertiesFactory {
    public static Guid OpenFolderProjectPropertiesFactoryGuid;
    public Guid FactoryGuid { get; }
    private static OpenFolderProjectPropertiesFactory();
    public virtual bool IsApplicable(ProjectPropertiesFactoryParameters parameters);
    public virtual bool IsKnownProjectTypeGuid(Guid projectTypeGuid);
    public virtual IProjectProperties CreateProjectProperties(ProjectPropertiesFactoryParameters parameters);
    public static IProjectProperties CreateOpenFolderProjectProperties(ICollection`1<Guid> projectTypeGuids, IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds);
    public virtual Guid get_FactoryGuid();
    [NotNullAttribute]
public virtual IProjectProperties Read(UnsafeReader reader, IStringIntern stringIntern);
}
public abstract class JetBrains.ProjectModel.Properties.Common.ProjectPropertiesBase`1 : object {
    private ICollection`1<Guid> myProjectTypeGuids;
    private Guid myFactoryGuid;
    [CompilerGeneratedAttribute]
private IProjectConfigurations <ActiveConfigurations>k__BackingField;
    [CompilerGeneratedAttribute]
private DotNetCorePlatformInfo <DotNetCorePlatform>k__BackingField;
    public IProjectConfigurations ActiveConfigurations { get; }
    public IEnumerable`1<Guid> ProjectTypeGuids { get; }
    public IBuildSettings BuildSettings { get; }
    public ProjectLanguage DefaultLanguage { get; }
    public ProjectKind ProjectKind { get; }
    public Guid OwnerFactoryGuid { get; }
    public DotNetCorePlatformInfo DotNetCorePlatform { get; public set; }
    protected bool CustomDumpActiveConfigurations { get; }
    protected ProjectPropertiesBase`1(ICollection`1<Guid> projectTypeGuids, Guid factoryGuid, IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds, DotNetCorePlatformInfo dotNetCorePlatform);
    protected ProjectPropertiesBase`1(Guid factoryGuid);
    [CompilerGeneratedAttribute]
public sealed virtual IProjectConfigurations get_ActiveConfigurations();
    public sealed virtual IEnumerable`1<Guid> get_ProjectTypeGuids();
    public abstract virtual IBuildSettings get_BuildSettings();
    public virtual ProjectLanguage get_DefaultLanguage();
    public virtual ProjectKind get_ProjectKind();
    public sealed virtual Guid get_OwnerFactoryGuid();
    [CompilerGeneratedAttribute]
public sealed virtual DotNetCorePlatformInfo get_DotNetCorePlatform();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DotNetCorePlatform(DotNetCorePlatformInfo value);
    public virtual void WriteProjectProperties(UnsafeWriter writer, IStringIntern stringIntern);
    public virtual bool UpdateFrom(IProjectProperties properties);
    protected virtual Func`3<IProjectConfiguration, IProjectConfiguration, bool> CreateCustomUpdateConfigurationFunc(IProjectProperties properties);
    protected virtual bool UpdateBuildSettings(IProjectProperties properties);
    protected void WriteProjectTypeGuids(UnsafeWriter writer);
    public virtual void ReadProjectProperties(UnsafeReader reader, IStringIntern stringIntern);
    protected void ReadProjectTypeGuids(UnsafeReader reader);
    public virtual void Dump(TextWriter to, int indent);
    protected virtual bool get_CustomDumpActiveConfigurations();
    protected void DumpActiveConfigurations(TextWriter to, int indent);
}
public class JetBrains.ProjectModel.Properties.Common.SdkModuleProperties : ProjectPropertiesBase`1<UnsupportedProjectConfiguration> {
    private TargetPlatformData myTargetPlatformData;
    private static Guid ourFactoryGuid;
    public IBuildSettings BuildSettings { get; }
    public ProjectKind ProjectKind { get; }
    public TargetPlatformData TargetPlatformData { get; }
    public SdkModuleProperties(TargetPlatformData targetPlatformData, IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds);
    private static SdkModuleProperties();
    public virtual IBuildSettings get_BuildSettings();
    public virtual ProjectKind get_ProjectKind();
    public virtual void WriteProjectProperties(UnsafeWriter writer, IStringIntern stringIntern);
    public virtual void Dump(TextWriter to, int indent);
    public virtual void ReadProjectProperties(UnsafeReader reader, IStringIntern stringIntern);
    public sealed virtual TargetPlatformData get_TargetPlatformData();
}
public class JetBrains.ProjectModel.Properties.Common.SharedProjectProperties : ProjectPropertiesBase`1<ManagedProjectConfiguration> {
    private ManagedProjectBuildSettings myBuildSettings;
    public IBuildSettings BuildSettings { get; }
    public SharedProjectProperties(ICollection`1<Guid> flavours, Guid guid, IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds, DotNetCorePlatformInfo dotNetCorePlatform);
    public SharedProjectProperties(Guid guid);
    public virtual IBuildSettings get_BuildSettings();
    public virtual void WriteProjectProperties(UnsafeWriter writer, IStringIntern stringIntern);
    public virtual void ReadProjectProperties(UnsafeReader reader, IStringIntern stringIntern);
    public virtual void Dump(TextWriter to, int indent);
}
[ProjectModelExtensionAttribute("16")]
public class JetBrains.ProjectModel.Properties.Common.SharedProjectPropertiesFactory : UnknownProjectPropertiesFactory {
    public static string ShprojExt;
    public static string ProjItemsExt;
    public static string VcxitemsExt;
    private static Guid SharedProjectPropertiesFactoryGuid;
    public Guid FactoryGuid { get; }
    private static SharedProjectPropertiesFactory();
    public virtual bool IsApplicable(ProjectPropertiesFactoryParameters parameters);
    public virtual bool IsKnownProjectTypeGuid(Guid projectTypeGuid);
    public virtual IProjectProperties CreateProjectProperties(ProjectPropertiesFactoryParameters parameters);
    public virtual Guid get_FactoryGuid();
    [NotNullAttribute]
public virtual IProjectProperties Read(UnsafeReader reader, IStringIntern stringIntern);
    public static bool IsSharedProject(Guid projectTypeGuid, VirtualFileSystemPath projectFile);
    [NotNullAttribute]
public static SharedProjectProperties CreateSharedProjectProperties(ICollection`1<Guid> projectTypeGuids, IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds);
    [NotNullAttribute]
public static SharedProjectProperties CreateSharedProjectProperties(Guid[] flavors, IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds);
    [NotNullAttribute]
public static SharedProjectProperties CreateSharedProjectProperties(IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds);
}
public class JetBrains.ProjectModel.Properties.Common.SolutionFolderProjectProperties : ProjectPropertiesBase`1<UnsupportedProjectConfiguration> {
    public IBuildSettings BuildSettings { get; }
    public ProjectKind ProjectKind { get; }
    public SolutionFolderProjectProperties(Guid factoryGuid);
    public virtual IBuildSettings get_BuildSettings();
    public virtual ProjectKind get_ProjectKind();
    public virtual void Dump(TextWriter to, int indent);
    public virtual void WriteProjectProperties(UnsafeWriter writer, IStringIntern stringIntern);
    public virtual void ReadProjectProperties(UnsafeReader reader, IStringIntern stringIntern);
}
[ProjectModelExtensionAttribute("16")]
public class JetBrains.ProjectModel.Properties.Common.SolutionFolderProjectPropertiesFactory : UnknownProjectPropertiesFactory {
    private static Guid ourFactoryGuid;
    public static Guid ProjectTypeGuid;
    public Guid FactoryGuid { get; }
    private static SolutionFolderProjectPropertiesFactory();
    public virtual bool IsApplicable(ProjectPropertiesFactoryParameters parameters);
    public virtual bool IsKnownProjectTypeGuid(Guid projectTypeGuid);
    public virtual IProjectProperties CreateProjectProperties(ProjectPropertiesFactoryParameters parameters);
    public virtual Guid get_FactoryGuid();
    public virtual IProjectProperties Read(UnsafeReader reader, IStringIntern stringIntern);
    public static SolutionFolderProjectProperties CreateSolutionFolderProjectProperties();
}
public class JetBrains.ProjectModel.Properties.Common.SolutionProjectProperties : ProjectPropertiesBase`1<UnsupportedProjectConfiguration> {
    public IBuildSettings BuildSettings { get; }
    public ProjectKind ProjectKind { get; }
    public virtual IBuildSettings get_BuildSettings();
    public virtual ProjectKind get_ProjectKind();
    public virtual void WriteProjectProperties(UnsafeWriter writer, IStringIntern stringIntern);
    public virtual void Dump(TextWriter to, int indent);
    public virtual void ReadProjectProperties(UnsafeReader reader, IStringIntern stringIntern);
}
public class JetBrains.ProjectModel.Properties.Common.UnknownManagedProjectProperties : ProjectPropertiesBase`1<ManagedProjectConfiguration> {
    private ManagedProjectBuildSettings myBuildSettings;
    public IBuildSettings BuildSettings { get; }
    public UnknownManagedProjectProperties(ICollection`1<Guid> flavours, Guid guid, IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds, DotNetCorePlatformInfo dotNetCorePlatform);
    public UnknownManagedProjectProperties(Guid guid);
    public virtual IBuildSettings get_BuildSettings();
    public virtual void WriteProjectProperties(UnsafeWriter writer, IStringIntern stringIntern);
    public virtual void ReadProjectProperties(UnsafeReader reader, IStringIntern stringIntern);
    public virtual void Dump(TextWriter to, int indent);
}
[ProjectModelExtensionAttribute("16")]
public class JetBrains.ProjectModel.Properties.Common.UnknownProjectPropertiesFactory : object {
    private static Guid UnknownProjectPropertiesFactoryGuid;
    public Guid FactoryGuid { get; }
    private static UnknownProjectPropertiesFactory();
    public virtual bool IsApplicable(ProjectPropertiesFactoryParameters parameters);
    public virtual bool IsKnownProjectTypeGuid(Guid projectTypeGuid);
    public virtual IProjectProperties CreateProjectProperties(ProjectPropertiesFactoryParameters parameters);
    public virtual Guid get_FactoryGuid();
    public virtual IProjectProperties Read(UnsafeReader reader, IStringIntern stringIntern);
    public static UnknownManagedProjectProperties CreateUnknownProjectProperties(ICollection`1<Guid> projectTypeGuids, IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds, DotNetCorePlatformInfo dotNetCorePlatform);
    public static UnknownManagedProjectProperties CreateUnknownProjectProperties(Guid[] flavors, IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds);
    public static UnknownManagedProjectProperties CreateUnknownProjectProperties(IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds);
}
public class JetBrains.ProjectModel.Properties.Common.UnsupportedProjectConfiguration : ProjectConfigurationBase {
}
public class JetBrains.ProjectModel.Properties.Common.UnsupportedProjectProperties : ProjectPropertiesBase`1<UnsupportedProjectConfiguration> {
    public IBuildSettings BuildSettings { get; }
    public ProjectKind ProjectKind { get; }
    public UnsupportedProjectProperties(Guid guid);
    public virtual IBuildSettings get_BuildSettings();
    public virtual ProjectKind get_ProjectKind();
    public virtual void WriteProjectProperties(UnsafeWriter writer, IStringIntern stringIntern);
    public virtual void ReadProjectProperties(UnsafeReader reader, IStringIntern stringIntern);
    public virtual void Dump(TextWriter to, int indent);
}
[ProjectModelExtensionAttribute("16")]
public class JetBrains.ProjectModel.Properties.Common.UnsupportedProjectPropertiesFactory : object {
    private static Guid UnsupportedProjectPropertiesFactoryGuid;
    public Guid FactoryGuid { get; }
    private static UnsupportedProjectPropertiesFactory();
    public sealed virtual bool IsApplicable(ProjectPropertiesFactoryParameters parameters);
    public sealed virtual bool IsKnownProjectTypeGuid(Guid projectTypeGuid);
    public sealed virtual Guid get_FactoryGuid();
    public sealed virtual IProjectProperties CreateProjectProperties(ProjectPropertiesFactoryParameters parameters);
    public sealed virtual IProjectProperties Read(UnsafeReader reader, IStringIntern stringIntern);
    public static UnsupportedProjectProperties CreateUnsupportedProjectProperties();
}
[ProjectModelExtensionAttribute("16")]
public class JetBrains.ProjectModel.Properties.CppClCommandLinesProjectFilePropertiesProvider : CppProjectFilePropertiesProvider {
    private static Guid ourGuid;
    public CppClCommandLinesProjectFilePropertiesProvider(IIntelliSenseInfoSettingAccessor intelliSenseInfoSettingAccessor);
    protected CppClCommandLinesProjectFilePropertiesProvider(Guid factoryGuid, IIntelliSenseInfoSettingAccessor intelliSenseInfoSettingAccessor);
    private static CppClCommandLinesProjectFilePropertiesProvider();
    public virtual bool IsApplicable(IProjectProperties projectProperties);
    public virtual IProjectFileProperties CreateProjectFileProperties();
    public virtual IProjectFileProperties ReadProjectFileProperties(UnsafeReader unsafeReader, IStringIntern stringIntern);
}
[ProjectModelExtensionAttribute("16")]
public class JetBrains.ProjectModel.Properties.CppProjectFilePropertiesProvider : ProjectFilePropertiesProvider {
    public static Guid CppProjectFilePropertiesFactoryGuid;
    protected IIntelliSenseInfoSettingAccessor myIntelliSenseInfoSettingAccessor;
    public CppProjectFilePropertiesProvider(IIntelliSenseInfoSettingAccessor intelliSenseInfoSettingAccessor);
    protected CppProjectFilePropertiesProvider(Guid factoryGuid, IIntelliSenseInfoSettingAccessor intelliSenseInfoSettingAccessor);
    private static CppProjectFilePropertiesProvider();
    public virtual bool IsApplicable(IProjectProperties projectProperties);
    public virtual IProjectFileProperties CreateProjectFileProperties();
    public virtual IProjectFileProperties ReadProjectFileProperties(UnsafeReader unsafeReader, IStringIntern stringIntern);
}
public class JetBrains.ProjectModel.Properties.CSharp.CSharpBuildSettings : ManagedProjectBuildSettings {
    public virtual bool UpdateFrom(IBuildSettings settings);
}
public enum JetBrains.ProjectModel.Properties.CSharp.CSharpLanguageVersion : Enum {
    public int value__;
    public static CSharpLanguageVersion Default;
    public static CSharpLanguageVersion CSharp1;
    public static CSharpLanguageVersion CSharp2;
    public static CSharpLanguageVersion CSharp3;
    public static CSharpLanguageVersion CSharp4;
    public static CSharpLanguageVersion CSharp5;
    public static CSharpLanguageVersion CSharp6;
    public static CSharpLanguageVersion CSharp7;
    public static CSharpLanguageVersion CSharp71;
    public static CSharpLanguageVersion CSharp72;
    public static CSharpLanguageVersion CSharp73;
    public static CSharpLanguageVersion CSharp8;
    public static CSharpLanguageVersion CSharp9;
    public static CSharpLanguageVersion CSharp10;
    public static CSharpLanguageVersion CSharp11;
    public static CSharpLanguageVersion CSharp12;
    public static CSharpLanguageVersion CSharp13;
    public static CSharpLanguageVersion LatestMajor;
    public static CSharpLanguageVersion Latest;
    public static CSharpLanguageVersion Preview;
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Properties.CSharp.CSharpLanguageVersionUtil : object {
    [PureAttribute]
public static CSharpLanguageVersion ParseCompilationOption(string languageVersion, CSharpLanguageVersion emptyVersion, CSharpLanguageVersion unknownVersion);
    [PureAttribute]
public static Nullable`1<CSharpLanguageVersion> TryParseCompilationOption(string languageVersion, Nullable`1<CSharpLanguageVersion> emptyVersion, Nullable`1<CSharpLanguageVersion> unknownVersion);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static string ToCompilationOption(CSharpLanguageVersion languageVersion);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Properties.CSharp.CSharpProjectConfigurationExtensions : object {
    [NotNullAttribute]
private static Key`1<VirtualFileSystemPath> ourCompilerDirectoryPathKey;
    private static CSharpProjectConfigurationExtensions();
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static VirtualFileSystemPath GetCscToolPath(ICSharpProjectConfiguration projectConfiguration);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static VirtualFileSystemPath GetCscToolExe(ICSharpProjectConfiguration projectConfiguration);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static VirtualFileSystemPath GetCSharpCoreTargetsPath(ICSharpProjectConfiguration projectConfiguration);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static VirtualFileSystemPath GetCompilerDirectoryPath(ICSharpProjectConfiguration projectConfiguration);
}
public class JetBrains.ProjectModel.Properties.CSharp.CSharpProjectProperties : ProjectPropertiesBase`1<CSharpProjectConfiguration> {
    private CSharpBuildSettings myBuildSettings;
    private TargetPlatformData myTargetPlatformData;
    public IBuildSettings BuildSettings { get; }
    public ProjectLanguage DefaultLanguage { get; }
    public ProjectKind ProjectKind { get; }
    public TargetPlatformData TargetPlatformData { get; }
    public CSharpBuildSettings CSharpBuildSettings { get; }
    public CSharpProjectProperties(ICollection`1<Guid> flavours, Guid factoryGuid, IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds, TargetPlatformData targetPlatformData, DotNetCorePlatformInfo dotNetCorePlatform);
    public CSharpProjectProperties(Guid factoryGuid, TargetPlatformData targetPlatformData);
    public virtual IBuildSettings get_BuildSettings();
    public virtual ProjectLanguage get_DefaultLanguage();
    public virtual ProjectKind get_ProjectKind();
    public sealed virtual TargetPlatformData get_TargetPlatformData();
    public CSharpBuildSettings get_CSharpBuildSettings();
    public virtual void WriteProjectProperties(UnsafeWriter writer, IStringIntern stringIntern);
    public virtual void ReadProjectProperties(UnsafeReader reader, IStringIntern stringIntern);
    public virtual void Dump(TextWriter to, int indent);
}
[ProjectModelExtensionAttribute("16")]
public class JetBrains.ProjectModel.Properties.CSharp.CSharpProjectPropertiesFactory : UnknownProjectPropertiesFactory {
    private static Guid CSharpPropertyFactoryGuid;
    public static Guid CSharpProjectTypeGuid;
    public static Guid CSharpVs2017ProjectSystemTypeGuid;
    public static Guid ProjectKProjectTypeGuid;
    public Guid FactoryGuid { get; }
    private static CSharpProjectPropertiesFactory();
    public virtual bool IsApplicable(ProjectPropertiesFactoryParameters parameters);
    public virtual bool IsKnownProjectTypeGuid(Guid projectTypeGuid);
    public virtual IProjectProperties CreateProjectProperties(ProjectPropertiesFactoryParameters parameters);
    public virtual Guid get_FactoryGuid();
    public virtual IProjectProperties Read(UnsafeReader reader, IStringIntern stringIntern);
    public static CSharpProjectProperties CreateCSharpProjectProperties(IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds, ICollection`1<Guid> flavours, TargetPlatformData targetPlatformData, DotNetCorePlatformInfo dotNetCorePlatform);
    public static CSharpProjectProperties CreateCSharpProjectProperties(IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds, Guid[] flavors);
    public static CSharpProjectProperties CreateCSharpProjectProperties(IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.Properties.CSharp.CSharpProjectPropertiesRequest : object {
    private static String[] ourKeys;
    public IEnumerable`1<string> RequestedProperties { get; }
    private static CSharpProjectPropertiesRequest();
    public sealed virtual IEnumerable`1<string> get_RequestedProperties();
}
public interface JetBrains.ProjectModel.Properties.CSharp.ICSharpProjectConfiguration {
    public bool AllowUnsafeCode { get; public set; }
    public UInt32 BaseAddress { get; public set; }
    public UInt32 FileAlignment { get; public set; }
    public bool CheckForOverflowUnderflow { get; public set; }
    public bool DebugSymbols { get; public set; }
    public bool IncrementalBuild { get; public set; }
    public CSharpLanguageVersion LanguageVersion { get; public set; }
    [NotNullAttribute]
public string WarningsAsErrors { get; public set; }
    [NotNullAttribute]
public string WarningsNotAsErrors { get; public set; }
    public NullableContextKind NullableContextKind { get; public set; }
    public ImplicitUsingsKind ImplicitUsingsKind { get; public set; }
    [NotNullAttribute]
public string InterceptorsPreviewNamespaces { get; public set; }
    public abstract virtual bool get_AllowUnsafeCode();
    public abstract virtual void set_AllowUnsafeCode(bool value);
    public abstract virtual UInt32 get_BaseAddress();
    public abstract virtual void set_BaseAddress(UInt32 value);
    public abstract virtual UInt32 get_FileAlignment();
    public abstract virtual void set_FileAlignment(UInt32 value);
    public abstract virtual bool get_CheckForOverflowUnderflow();
    public abstract virtual void set_CheckForOverflowUnderflow(bool value);
    public abstract virtual bool get_DebugSymbols();
    public abstract virtual void set_DebugSymbols(bool value);
    public abstract virtual bool get_IncrementalBuild();
    public abstract virtual void set_IncrementalBuild(bool value);
    public abstract virtual CSharpLanguageVersion get_LanguageVersion();
    public abstract virtual void set_LanguageVersion(CSharpLanguageVersion value);
    public abstract virtual string get_WarningsAsErrors();
    public abstract virtual void set_WarningsAsErrors(string value);
    public abstract virtual string get_WarningsNotAsErrors();
    public abstract virtual void set_WarningsNotAsErrors(string value);
    public abstract virtual NullableContextKind get_NullableContextKind();
    public abstract virtual void set_NullableContextKind(NullableContextKind value);
    public abstract virtual ImplicitUsingsKind get_ImplicitUsingsKind();
    public abstract virtual void set_ImplicitUsingsKind(ImplicitUsingsKind value);
    public abstract virtual string get_InterceptorsPreviewNamespaces();
    public abstract virtual void set_InterceptorsPreviewNamespaces(string value);
    public abstract virtual string GetCompilerOptionsCommandLine(VirtualFileSystemPath projectDir);
}
public interface JetBrains.ProjectModel.Properties.CSharp.IEnablePreviewFeaturesPropertyModifier {
}
public interface JetBrains.ProjectModel.Properties.CSharp.IImplicitUsingsModifier {
}
public enum JetBrains.ProjectModel.Properties.CSharp.ImplicitUsingsKind : Enum {
    public byte value__;
    public static ImplicitUsingsKind Disable;
    public static ImplicitUsingsKind Enable;
    public static ImplicitUsingsKind True;
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Properties.CSharp.ImplicitUsingsKindUtil : object {
    [PureAttribute]
public static ImplicitUsingsKind ParseCompilationOption(string optionValue);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static string ToCompilationOption(ImplicitUsingsKind implicitUsingsKind);
}
public interface JetBrains.ProjectModel.Properties.CSharp.INullableContextModifier {
}
public interface JetBrains.ProjectModel.Properties.CSharp.INullableContextProjectProperty {
    [PureAttribute]
public abstract virtual NullableContextKind GetNullableContextKind(IProject project, TargetFrameworkId targetFrameworkId);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.Properties.CSharp.ManagedProjectPropertiesRequest : object {
    private static String[] ourKeys;
    public IEnumerable`1<string> RequestedProperties { get; }
    private static ManagedProjectPropertiesRequest();
    public sealed virtual IEnumerable`1<string> get_RequestedProperties();
}
public enum JetBrains.ProjectModel.Properties.CSharp.NullableContextKind : Enum {
    public byte value__;
    public static NullableContextKind Disable;
    public static NullableContextKind Enable;
    public static NullableContextKind Warnings;
    public static NullableContextKind Annotations;
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Properties.CSharp.NullableContextKindUtil : object {
    [PureAttribute]
public static NullableContextKind ParseCompilationOption(string nullableContextOption);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static string ToCompilationOption(NullableContextKind nullableContextKind);
}
public static class JetBrains.ProjectModel.Properties.CSharp.TypeScriptMsBuildProperties : object {
    public static string TypeScriptTarget;
    public static string TypeScriptNoImplicitAny;
    public static string TypeScriptNoImplicitThis;
    public static string TypeScriptNoResolve;
    public static string TypeScriptOutDir;
    public static string TypeScriptOutFile;
    public static string TypeScriptGeneratesDeclarations;
    public static string TypeScriptSuppressExcessPropertyErrors;
    public static string TypeScriptSuppressImplicitAnyIndexErrors;
    public static string TypeScriptAllowJs;
    public static string TypeScriptToolsVersion;
    public static string TypeScriptStrict;
    public static string TypeScriptAlwaysStrict;
    public static string TypeScriptStrictNullChecks;
    public static string TypeScriptModuleResolution;
    public static string TypeScriptModule;
    public static string TypeScriptBaseUrl;
    public static string TypeScriptAllowSyntheticDefaultImports;
    public static string TypeScriptJsxEmit;
    public static string TypeScriptJsxFactory;
    public static string TypeScriptLib;
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.Properties.CSharp.TypeScriptProjectPropertiesRequest : object {
    private static String[] ourKeys;
    public IEnumerable`1<string> RequestedProperties { get; }
    private static TypeScriptProjectPropertiesRequest();
    public sealed virtual IEnumerable`1<string> get_RequestedProperties();
}
public enum JetBrains.ProjectModel.Properties.DebugType : Enum {
    public int value__;
    public static DebugType NONE;
    public static DebugType PDB_ONLY;
    public static DebugType FULL;
}
public class JetBrains.ProjectModel.Properties.EmptyProjectFileProperties : ProjectFilePropertiesBase {
    public EmptyProjectFileProperties(Guid factoryGuid);
    public virtual bool UpdatePropertiesFrom(IProjectFileProperties properties);
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.Properties.ExcludedProjects.ExcludedProjectProperty : object {
    private static string PropertyName;
    private static bool DefaultValue;
    private PersistentProjectItemProperties myPersistentProjectItemProperties;
    public ExcludedProjectProperty(Lifetime lifetime, PersistentProjectItemProperties persistentProjectItemProperties);
    public bool IsProjectExcluded(IProject project);
    public void SetProjectExcluded(IProject project, bool isExcluded);
}
[ShellComponentAttribute("18")]
public class JetBrains.ProjectModel.Properties.ExcludedProjects.ExcludedProjects : object {
    private Lifetime myLifetime;
    private IShellLocks myLocks;
    private IContextBoundSettingsStoreLive myContextBoundSettingsStoreLive;
    private AsyncItemsProcessor`1<IProject> myProjectsProcessor;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcludedProjectProperty <ExcludedProjectProperty>k__BackingField;
    [CanBeNullAttribute]
private ISolution Solution { get; private set; }
    [CanBeNullAttribute]
private ExcludedProjectProperty ExcludedProjectProperty { get; private set; }
    public ExcludedProjects(Lifetime lifetime, ISettingsStore settingsStore, IShellLocks locks, ILogger logger);
    [CompilerGeneratedAttribute]
private ISolution get_Solution();
    [CompilerGeneratedAttribute]
private void set_Solution(ISolution value);
    [CompilerGeneratedAttribute]
private ExcludedProjectProperty get_ExcludedProjectProperty();
    [CompilerGeneratedAttribute]
private void set_ExcludedProjectProperty(ExcludedProjectProperty value);
    internal void SetSolution(Lifetime solutionLifetime, ISolution solution, IViewableProjectsCollection viewableProjectsCollection, ExcludedProjectProperty excludedProjectProperty);
    private void RecalculateAllProjects();
    private void RecalculateProject(IProject project);
    private List`1<PathWildcard> GetPathWildcards();
    private bool CalculateExcluded(VirtualFileSystemPath projectFileLocation, IList`1<PathWildcard> pathWildcards);
    public bool IsProjectExcluded(IProject project);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "JetBrains.ProjectModel.Resources.Strings", "ExcludedProjectsSettingDescription")]
public class JetBrains.ProjectModel.Properties.ExcludedProjects.ExcludedProjectsSettings : object {
    [SettingsIndexedEntryAttribute("JetBrains.ProjectModel.Resources.Strings", "ProjectMasksToIgnoreSettingDescription")]
public IIndexedEntry`2<string, bool> ProjectMasksToIgnore;
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.Properties.ExcludedProjects.ExcludedProjectsSolutionHelper : object {
    public ExcludedProjectsSolutionHelper(Lifetime lifetime, ISolution solution, IViewableProjectsCollection viewableProjectsCollection, ExcludedProjectProperty excludedProjectProperty, ExcludedProjects excludedProjects);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Properties.FilePropertiesHelper : object {
    [ExtensionAttribute]
public static void SetDependsUponFile(IProjectFile projectItem, string dependsUponItemName, bool raiseNotification);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static BuildAction GetUnique(CompactList`1<Pair`2<TargetFrameworkId, BuildAction>> buildActions);
    [ExtensionAttribute]
public static bool Contains(CompactList`1<Pair`2<TargetFrameworkId, BuildAction>> buildActions, BuildAction buildAction);
    [ExtensionAttribute]
public static bool Any(CompactList`1<Pair`2<TargetFrameworkId, BuildAction>> buildActions, Func`2<BuildAction, bool> filter);
    [ExtensionAttribute]
public static bool None(CompactList`1<Pair`2<TargetFrameworkId, BuildAction>> buildActions, Func`2<BuildAction, bool> filter);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static BuildAction GetFirstOrNull(CompactList`1<Pair`2<TargetFrameworkId, BuildAction>> buildActions, Func`2<BuildAction, bool> filter);
}
[ProjectFlavorAttribute("16")]
public class JetBrains.ProjectModel.Properties.Flavours.BizTalkProjectFlavor : object {
    public static Guid BizTalkProject;
    public Guid Guid { get; }
    public string FlavorName { get; }
    private static BizTalkProjectFlavor();
    public sealed virtual Guid get_Guid();
    public sealed virtual string get_FlavorName();
}
[ProjectFlavorAttribute("16")]
public class JetBrains.ProjectModel.Properties.Flavours.CppProjectFlavor : object {
    public Guid Guid { get; }
    public string FlavorName { get; }
    public sealed virtual Guid get_Guid();
    public sealed virtual string get_FlavorName();
}
[ProjectFlavorAttribute("16")]
public class JetBrains.ProjectModel.Properties.Flavours.DockerComposeProjectFlavor : object {
    public Guid Guid { get; }
    public string FlavorName { get; }
    public sealed virtual Guid get_Guid();
    public sealed virtual string get_FlavorName();
}
[ProjectFlavorAttribute("16")]
public class JetBrains.ProjectModel.Properties.Flavours.EcmaScriptProjectFlavor : object {
    public static Guid ProjectGuid;
    public Guid Guid { get; }
    public string FlavorName { get; }
    private static EcmaScriptProjectFlavor();
    public sealed virtual Guid get_Guid();
    public sealed virtual string get_FlavorName();
}
[ProjectFlavorAttribute("16")]
public class JetBrains.ProjectModel.Properties.Flavours.MetroStyleAppFlavor : object {
    public static Guid MetroStyleAppGuid;
    public Guid Guid { get; }
    public string FlavorName { get; }
    private static MetroStyleAppFlavor();
    public sealed virtual Guid get_Guid();
    public sealed virtual string get_FlavorName();
}
[ProjectFlavorAttribute("16")]
public class JetBrains.ProjectModel.Properties.Flavours.MonoDroidProjectFlavor : object {
    public static Guid MonoDroidProject;
    public Guid Guid { get; }
    public string FlavorName { get; }
    public static string RequiredDefineConstants { get; }
    private static MonoDroidProjectFlavor();
    public sealed virtual Guid get_Guid();
    public sealed virtual string get_FlavorName();
    public static string get_RequiredDefineConstants();
}
[ProjectFlavorAttribute("16")]
public class JetBrains.ProjectModel.Properties.Flavours.MsTestProjectFlavor : object {
    public static Guid MsTestProjectFlavorGuid;
    public Guid Guid { get; }
    public string FlavorName { get; }
    private static MsTestProjectFlavor();
    public sealed virtual Guid get_Guid();
    public sealed virtual string get_FlavorName();
}
[ProjectFlavorAttribute("16")]
public class JetBrains.ProjectModel.Properties.Flavours.NetPortableLibraryProjectFlavor : object {
    public static Guid NetPortableProject;
    public Guid Guid { get; }
    public string FlavorName { get; }
    private static NetPortableLibraryProjectFlavor();
    public sealed virtual Guid get_Guid();
    public sealed virtual string get_FlavorName();
}
[ProjectFlavorAttribute("16")]
public class JetBrains.ProjectModel.Properties.Flavours.NodeJsProjectFlavor : object {
    public static Guid ProjectGuid;
    public Guid Guid { get; }
    public string FlavorName { get; }
    private static NodeJsProjectFlavor();
    public sealed virtual Guid get_Guid();
    public sealed virtual string get_FlavorName();
}
[ProjectFlavorAttribute("16")]
public class JetBrains.ProjectModel.Properties.Flavours.ServiceFabricProjectFlavor : object {
    public Guid Guid { get; }
    public string FlavorName { get; }
    public sealed virtual Guid get_Guid();
    public sealed virtual string get_FlavorName();
}
[ProjectFlavorAttribute("16")]
public class JetBrains.ProjectModel.Properties.Flavours.SharepointCSharpWorkflowFlavor : SharepointWorkflowFlavorBase {
    public static Guid CSharpWorkflowProject;
    public Guid Guid { get; }
    public string FlavorName { get; }
    private static SharepointCSharpWorkflowFlavor();
    public virtual Guid get_Guid();
    public virtual string get_FlavorName();
}
[ProjectFlavorAttribute("16")]
public class JetBrains.ProjectModel.Properties.Flavours.SharepointVbWorkflowFlavor : SharepointWorkflowFlavorBase {
    public static Guid VbWorkflowProject;
    public Guid Guid { get; }
    public string FlavorName { get; }
    private static SharepointVbWorkflowFlavor();
    public virtual Guid get_Guid();
    public virtual string get_FlavorName();
}
public abstract class JetBrains.ProjectModel.Properties.Flavours.SharepointWorkflowFlavorBase : WebApplicationFlavorBase {
}
[ProjectFlavorAttribute("16")]
public class JetBrains.ProjectModel.Properties.Flavours.SilverlightProjectFlavor : object {
    public static Guid SilverlightProject;
    public Guid Guid { get; }
    public string FlavorName { get; }
    private static SilverlightProjectFlavor();
    public sealed virtual Guid get_Guid();
    public sealed virtual string get_FlavorName();
}
[ProjectFlavorAttribute("16")]
public class JetBrains.ProjectModel.Properties.Flavours.SqlServerDatabaseProjectFlavor : object {
    public Guid Guid { get; }
    public string FlavorName { get; }
    public sealed virtual Guid get_Guid();
    public sealed virtual string get_FlavorName();
}
[ProjectFlavorAttribute("16")]
public class JetBrains.ProjectModel.Properties.Flavours.UnrealFolderProjectFlavor : object {
    public static Guid ProjectGuid;
    public Guid Guid { get; }
    public string FlavorName { get; }
    private static UnrealFolderProjectFlavor();
    public sealed virtual Guid get_Guid();
    public sealed virtual string get_FlavorName();
}
[ProjectFlavorAttribute("16")]
public class JetBrains.ProjectModel.Properties.Flavours.UnrealModuleProjectFlavor : object {
    public static Guid ProjectGuid;
    public Guid Guid { get; }
    public string FlavorName { get; }
    private static UnrealModuleProjectFlavor();
    public sealed virtual Guid get_Guid();
    public sealed virtual string get_FlavorName();
}
[ProjectFlavorAttribute("16")]
public class JetBrains.ProjectModel.Properties.Flavours.WcfServiceProjectFlavor : object {
    public static Guid WcfServiceProject;
    public Guid Guid { get; }
    public string FlavorName { get; }
    private static WcfServiceProjectFlavor();
    public sealed virtual Guid get_Guid();
    public sealed virtual string get_FlavorName();
}
[ProjectFlavorAttribute("16")]
public class JetBrains.ProjectModel.Properties.Flavours.WebApplicationFlavor : WebApplicationFlavorBase {
    public static Guid WebApplicationProject;
    public Guid Guid { get; }
    public string FlavorName { get; }
    private static WebApplicationFlavor();
    public virtual Guid get_Guid();
    public virtual string get_FlavorName();
}
public abstract class JetBrains.ProjectModel.Properties.Flavours.WebApplicationFlavorBase : object {
    public Guid Guid { get; }
    public string FlavorName { get; }
    public abstract virtual Guid get_Guid();
    public abstract virtual string get_FlavorName();
}
[ProjectFlavorAttribute("16")]
public class JetBrains.ProjectModel.Properties.Flavours.Windows10AppFlavor : object {
    public Guid Guid { get; }
    public string FlavorName { get; }
    public sealed virtual Guid get_Guid();
    public sealed virtual string get_FlavorName();
}
[ProjectFlavorAttribute("16")]
public class JetBrains.ProjectModel.Properties.Flavours.WindowsPhone81ProjectFlavor : object {
    public static Guid WindowsPhoneProject;
    public Guid Guid { get; }
    public string FlavorName { get; }
    private static WindowsPhone81ProjectFlavor();
    public sealed virtual Guid get_Guid();
    public sealed virtual string get_FlavorName();
}
[ProjectFlavorAttribute("16")]
public class JetBrains.ProjectModel.Properties.Flavours.WindowsPhoneProjectFlavor : object {
    public static Guid WindowsPhoneProject;
    public Guid Guid { get; }
    public string FlavorName { get; }
    private static WindowsPhoneProjectFlavor();
    public sealed virtual Guid get_Guid();
    public sealed virtual string get_FlavorName();
}
[ProjectFlavorAttribute("16")]
public class JetBrains.ProjectModel.Properties.Flavours.WindowsPhoneVBProjectFlavor : object {
    public static Guid WindowsPhoneVBProject;
    public Guid Guid { get; }
    public string FlavorName { get; }
    private static WindowsPhoneVBProjectFlavor();
    public sealed virtual Guid get_Guid();
    public sealed virtual string get_FlavorName();
}
[ProjectFlavorAttribute("16")]
public class JetBrains.ProjectModel.Properties.Flavours.WixProjectFlavor : object {
    public static Guid ProjectGuid;
    public Guid Guid { get; }
    public string FlavorName { get; }
    private static WixProjectFlavor();
    public sealed virtual Guid get_Guid();
    public sealed virtual string get_FlavorName();
}
[ProjectFlavorAttribute("16")]
public class JetBrains.ProjectModel.Properties.Flavours.WorkflowProjectFlavor : object {
    public static Guid WorkflowProjectGuid;
    public Guid Guid { get; }
    public string FlavorName { get; }
    private static WorkflowProjectFlavor();
    public sealed virtual Guid get_Guid();
    public sealed virtual string get_FlavorName();
}
[ProjectFlavorAttribute("16")]
public class JetBrains.ProjectModel.Properties.Flavours.WorkflowWebProjectFlavor : object {
    public static Guid WorkflowWebProjectGuid;
    public Guid Guid { get; }
    public string FlavorName { get; }
    private static WorkflowWebProjectFlavor();
    public sealed virtual Guid get_Guid();
    public sealed virtual string get_FlavorName();
}
[ProjectFlavorAttribute("16")]
public class JetBrains.ProjectModel.Properties.Flavours.WPFProjectFlavor : object {
    public static Guid WPFProject;
    public Guid Guid { get; }
    public string FlavorName { get; }
    private static WPFProjectFlavor();
    public sealed virtual Guid get_Guid();
    public sealed virtual string get_FlavorName();
}
public interface JetBrains.ProjectModel.Properties.IAllowUnsafeCodePropertyModifier {
}
public interface JetBrains.ProjectModel.Properties.IBuildSettings {
    public string PlatformTarget { get; }
    public string Configuration { get; }
    public bool IsBuildable { get; }
    public bool IsDeployable { get; }
    public abstract virtual void SetProject(IProject project);
    public abstract virtual void WriteBuildSettings(UnsafeWriter writer, IStringIntern stringIntern);
    public abstract virtual void ReadBuildSettings(UnsafeReader reader, IStringIntern stringIntern);
    public abstract virtual string get_PlatformTarget();
    public abstract virtual string get_Configuration();
    public abstract virtual bool get_IsBuildable();
    public abstract virtual bool get_IsDeployable();
    public abstract virtual bool UpdateFrom(IBuildSettings settings);
    public abstract virtual void Dump(TextWriter to, int indent);
}
public interface JetBrains.ProjectModel.Properties.ILanguageVersionModifier`1 {
}
public interface JetBrains.ProjectModel.Properties.ILanguageVersionPresenter`1 {
    [NotNullAttribute]
public string LanguageName { get; }
    public abstract virtual string get_LanguageName();
    [PureAttribute]
[NotNullAttribute]
public abstract virtual string GetPresentation(TLanguageVersion languageVersion, LanguageVersionPresentationOptions options, IProject project, TargetFrameworkId targetFrameworkId);
}
public interface JetBrains.ProjectModel.Properties.ILanguageVersionProjectProperty`1 {
    [PureAttribute]
public abstract virtual TLanguageVersion GetLanguageVersion(IProject project, TargetFrameworkId targetFrameworkId);
    [PureAttribute]
public abstract virtual bool IsAvailable(TLanguageVersion languageVersion, IProject project, TargetFrameworkId targetFrameworkId);
    [PureAttribute]
public abstract virtual Nullable`1<TLanguageVersion> TryParseCompilationOption(string languageVersion);
    [NotNullAttribute]
public abstract virtual string ConvertToCompilationOption(TLanguageVersion languageVersion);
}
[NullableContextAttribute("1")]
public interface JetBrains.ProjectModel.Properties.INamespaceFolderCustomizer {
    public abstract virtual Nullable`1<bool> GetNamespaceFolderDefaultValue(IProjectFolder projectFolder);
}
public interface JetBrains.ProjectModel.Properties.IProjectCapabilityRequest {
    [NotNullAttribute]
[ItemNotNullAttribute]
public IEnumerable`1<string> RequestedCapabilities { get; }
    public abstract virtual IEnumerable`1<string> get_RequestedCapabilities();
}
public interface JetBrains.ProjectModel.Properties.IProjectConfiguration {
    public string Name { get; public set; }
    public TargetFrameworkId TargetFrameworkId { get; }
    public string RelativeOutputDirectory { get; public set; }
    public string RelativeIntermediateDirectory { get; public set; }
    [NotNullAttribute]
public IReadOnlyDictionary`2<string, string> PropertiesCollection { get; public set; }
    [NotNullAttribute]
public IReadOnlyCollection`1<string> CapabilitiesCollection { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual TargetFrameworkId get_TargetFrameworkId();
    public abstract virtual string get_RelativeOutputDirectory();
    public abstract virtual void set_RelativeOutputDirectory(string value);
    public abstract virtual string get_RelativeIntermediateDirectory();
    public abstract virtual void set_RelativeIntermediateDirectory(string value);
    public abstract virtual IReadOnlyDictionary`2<string, string> get_PropertiesCollection();
    public abstract virtual void set_PropertiesCollection(IReadOnlyDictionary`2<string, string> value);
    public abstract virtual IReadOnlyCollection`1<string> get_CapabilitiesCollection();
    public abstract virtual void set_CapabilitiesCollection(IReadOnlyCollection`1<string> value);
    public abstract virtual void SetProject(IProject project);
    public abstract virtual void WriteConfiguration(UnsafeWriter writer, IStringIntern stringIntern);
    public abstract virtual void ReadConfiguration(UnsafeReader reader, IStringIntern stringIntern);
    public abstract virtual bool UpdateFrom(IProjectConfiguration configuration);
    public abstract virtual void Dump(TextWriter to, int indent);
}
public interface JetBrains.ProjectModel.Properties.IProjectConfigurations {
    [NotNullAttribute]
public IEnumerable`1<TargetFrameworkId> TargetFrameworkIds { get; }
    [NotNullAttribute]
public ICollection`1<IProjectConfiguration> Configurations { get; }
    public abstract virtual IEnumerable`1<TargetFrameworkId> get_TargetFrameworkIds();
    public abstract virtual ICollection`1<IProjectConfiguration> get_Configurations();
    [CanBeNullAttribute]
public abstract virtual IProjectConfiguration TryGetConfiguration(TargetFrameworkId targetFrameworkId);
    [NotNullAttribute]
public abstract virtual IProjectConfiguration GetOrCreateConfiguration(TargetFrameworkId targetFrameworkId);
    public abstract virtual void RemoveConfiguration(TargetFrameworkId targetFrameworkId);
    public abstract virtual bool UpdateFrom(IProjectConfigurations config, Func`3<IProjectConfiguration, IProjectConfiguration, bool> customUpdateConfigFunc);
    public abstract virtual void WriteConfigurations(UnsafeWriter writer, IStringIntern stringIntern);
    public abstract virtual void ReadConfigurations(UnsafeReader reader, IStringIntern stringIntern);
    public abstract virtual void SetProject(IProject project);
}
public interface JetBrains.ProjectModel.Properties.IProjectElementOrigin {
    public abstract virtual bool CanModify(String& reason);
}
public interface JetBrains.ProjectModel.Properties.IProjectElementOriginWithItemType {
    [NotNullAttribute]
public string ItemType { get; }
    public abstract virtual string get_ItemType();
}
public interface JetBrains.ProjectModel.Properties.IProjectElementOriginWithMetadata {
    [NotNullAttribute]
public Dictionary`2<string, string> Metadata { get; }
    public abstract virtual Dictionary`2<string, string> get_Metadata();
}
public interface JetBrains.ProjectModel.Properties.IProjectFileProperties {
    public Guid OwnerFactoryGuid { get; }
    public bool IsHidden { get; public set; }
    [NotNullAttribute]
public IReadOnlyDictionary`2<string, string> PropertiesCollection { get; public set; }
    public abstract virtual Guid get_OwnerFactoryGuid();
    public abstract virtual bool get_IsHidden();
    public abstract virtual void set_IsHidden(bool value);
    public abstract virtual IReadOnlyDictionary`2<string, string> get_PropertiesCollection();
    public abstract virtual void set_PropertiesCollection(IReadOnlyDictionary`2<string, string> value);
    public abstract virtual void SetBuildAction(BuildAction buildAction, TargetFrameworkId targetFrameworkId);
    [NotNullAttribute]
public abstract virtual BuildAction GetBuildAction(TargetFrameworkId targetFrameworkId);
    public abstract virtual CompactList`1<Pair`2<TargetFrameworkId, BuildAction>> GetBuildActions();
    public abstract virtual void SetProjectFile(IProjectFile projectFile);
    public abstract virtual bool UpdatePropertiesFrom(IProjectFileProperties properties);
    public abstract virtual void Dump(TextWriter to, DumpFlags flags);
    public abstract virtual void ReadFileProperties(UnsafeReader reader, IStringIntern stringIntern);
    public abstract virtual void WriteProjectFileProperties(UnsafeWriter writer, IStringIntern stringIntern);
}
public interface JetBrains.ProjectModel.Properties.IProjectFilePropertiesProvider {
    public Guid FactoryGuid { get; }
    public abstract virtual Guid get_FactoryGuid();
    public abstract virtual bool IsApplicable(IProjectProperties projectProperties);
    public abstract virtual IProjectFileProperties CreateProjectFileProperties();
    public abstract virtual IProjectFileProperties ReadProjectFileProperties(UnsafeReader unsafeReader, IStringIntern stringIntern);
}
public interface JetBrains.ProjectModel.Properties.IProjectFilePropertiesRequest {
    [NotNullAttribute]
[ItemNotNullAttribute]
public IEnumerable`1<string> RequestedProperties { get; }
    public abstract virtual IEnumerable`1<string> get_RequestedProperties();
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ProjectModel.Properties.IProjectFlavor {
    public Guid Guid { get; }
    public string FlavorName { get; }
    public abstract virtual Guid get_Guid();
    public abstract virtual string get_FlavorName();
}
public interface JetBrains.ProjectModel.Properties.IProjectItemPropertiesRequest {
    [NotNullAttribute]
[ItemNotNullAttribute]
public IEnumerable`1<string> RequestedItems { get; }
    public abstract virtual IEnumerable`1<string> get_RequestedItems();
}
public interface JetBrains.ProjectModel.Properties.IProjectProperties {
    [NotNullAttribute]
public IEnumerable`1<Guid> ProjectTypeGuids { get; }
    [NotNullAttribute]
public IProjectConfigurations ActiveConfigurations { get; }
    [CanBeNullAttribute]
public IBuildSettings BuildSettings { get; }
    public ProjectLanguage DefaultLanguage { get; }
    public ProjectKind ProjectKind { get; }
    public Guid OwnerFactoryGuid { get; }
    [CanBeNullAttribute]
public DotNetCorePlatformInfo DotNetCorePlatform { get; public set; }
    public abstract virtual IEnumerable`1<Guid> get_ProjectTypeGuids();
    public abstract virtual IProjectConfigurations get_ActiveConfigurations();
    public abstract virtual IBuildSettings get_BuildSettings();
    public abstract virtual ProjectLanguage get_DefaultLanguage();
    public abstract virtual ProjectKind get_ProjectKind();
    public abstract virtual Guid get_OwnerFactoryGuid();
    public abstract virtual DotNetCorePlatformInfo get_DotNetCorePlatform();
    public abstract virtual void set_DotNetCorePlatform(DotNetCorePlatformInfo value);
    public abstract virtual bool UpdateFrom(IProjectProperties properties);
    public abstract virtual void Dump(TextWriter to, int indent);
    public abstract virtual void WriteProjectProperties(UnsafeWriter writer, IStringIntern stringIntern);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ProjectModel.Properties.IProjectPropertiesFactory {
    public Guid FactoryGuid { get; }
    public abstract virtual Guid get_FactoryGuid();
    public abstract virtual bool IsApplicable(ProjectPropertiesFactoryParameters parameters);
    public abstract virtual bool IsKnownProjectTypeGuid(Guid projectTypeGuid);
    [CanBeNullAttribute]
public abstract virtual IProjectProperties CreateProjectProperties(ProjectPropertiesFactoryParameters parameters);
    [NotNullAttribute]
public abstract virtual IProjectProperties Read(UnsafeReader reader, IStringIntern stringIntern);
}
public interface JetBrains.ProjectModel.Properties.IProjectPropertiesRequest {
    [NotNullAttribute]
[ItemNotNullAttribute]
public IEnumerable`1<string> RequestedProperties { get; }
    public abstract virtual IEnumerable`1<string> get_RequestedProperties();
}
public interface JetBrains.ProjectModel.Properties.IProjectPropertyModifier`1 {
    [PureAttribute]
public abstract virtual bool CanModify(TProperty value, IProject project);
    public abstract virtual void Modify(TProperty value, IProject project);
}
public class JetBrains.ProjectModel.Properties.IsDesignTimeBuildInputProperty : object {
}
public interface JetBrains.ProjectModel.Properties.ISdkConsumerProperties {
    [CanBeNullAttribute]
public TargetPlatformData TargetPlatformData { get; }
    public abstract virtual TargetPlatformData get_TargetPlatformData();
}
public interface JetBrains.ProjectModel.Properties.IStringIntern {
    public abstract virtual int Intern(string s);
    public abstract virtual bool TryGetInterned(int index, String& s);
}
[ProjectModelExtensionAttribute("16")]
public class JetBrains.ProjectModel.Properties.JavaScriptMetroStyle.JavaScriptMetroProjectPropertiesFactory : UnknownProjectPropertiesFactory {
    private static Guid JavaScriptMetroPropertyFactoryGuid;
    public static Guid JavaScriptMetroStyleProjectTypeGuild;
    public Guid FactoryGuid { get; }
    private static JavaScriptMetroProjectPropertiesFactory();
    public virtual bool IsApplicable(ProjectPropertiesFactoryParameters parameters);
    public virtual bool IsKnownProjectTypeGuid(Guid projectTypeGuid);
    public virtual IProjectProperties CreateProjectProperties(ProjectPropertiesFactoryParameters parameters);
    public virtual Guid get_FactoryGuid();
    public virtual IProjectProperties Read(UnsafeReader reader, IStringIntern stringIntern);
    public static JavaScriptMetroStyleProjectProperties CreateJavaScriptMetroProjectProperties(ICollection`1<Guid> flavours, IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds, TargetPlatformData targetPlatformData);
    public static JavaScriptMetroStyleProjectProperties CreateJavaScriptMetroProjectProperties(IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds, Guid[] flavours);
}
public class JetBrains.ProjectModel.Properties.JavaScriptMetroStyle.JavaScriptMetroStyleBuildSettings : BuildSettingsBase {
    public virtual bool UpdateFrom(IBuildSettings settings);
}
public class JetBrains.ProjectModel.Properties.JavaScriptMetroStyle.JavaScriptMetroStyleProjectProperties : ProjectPropertiesBase`1<JavaScriptProjectConfiguration> {
    private JavaScriptMetroStyleBuildSettings myBuildSettings;
    private TargetPlatformData myTargetPlatformData;
    public IBuildSettings BuildSettings { get; }
    public TargetPlatformData TargetPlatformData { get; }
    internal JavaScriptMetroStyleProjectProperties(ICollection`1<Guid> flavours, Guid factoryGuid, IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds, TargetPlatformData targetPlatformData);
    public JavaScriptMetroStyleProjectProperties(Guid factoryGuid, TargetPlatformData targetPlatformData);
    public virtual IBuildSettings get_BuildSettings();
    public sealed virtual TargetPlatformData get_TargetPlatformData();
    public virtual void WriteProjectProperties(UnsafeWriter writer, IStringIntern stringIntern);
    public virtual void ReadProjectProperties(UnsafeReader reader, IStringIntern stringIntern);
    public sealed virtual void Dump(TextWriter to, int indent);
}
public class JetBrains.ProjectModel.Properties.JavaScriptMetroStyle.JavaScriptProjectConfiguration : ProjectConfigurationBase {
    public virtual bool UpdateFrom(IProjectConfiguration configuration);
}
[FlagsAttribute]
public enum JetBrains.ProjectModel.Properties.LanguageVersionPresentationOptions : Enum {
    public int value__;
    public static LanguageVersionPresentationOptions None;
    public static LanguageVersionPresentationOptions ShowMinorVersionWhenZero;
    public static LanguageVersionPresentationOptions ShowLanguageName;
    public static LanguageVersionPresentationOptions ShowDescription;
    public static LanguageVersionPresentationOptions Full;
}
public interface JetBrains.ProjectModel.Properties.Managed.IManagedProjectBuildSettings {
    public string ApplicationType { get; }
    public string ProjectUISubcaption { get; }
    [NotNullAttribute]
public string DefaultNamespace { get; }
    [NotNullAttribute]
public String[] ImportedNamespaces { get; }
    public abstract virtual string get_ApplicationType();
    public abstract virtual string get_ProjectUISubcaption();
    public abstract virtual string get_DefaultNamespace();
    public abstract virtual String[] get_ImportedNamespaces();
}
public interface JetBrains.ProjectModel.Properties.Managed.IManagedProjectConfiguration {
    public string DefineConstants { get; public set; }
    public bool TreatWarningsAsErrors { get; public set; }
    public string DocumentationFile { get; public set; }
    public bool RegisterForCOMInterop { get; public set; }
    public bool RemoveIntegerChecks { get; public set; }
    public string NoWarn { get; public set; }
    public bool Optimize { get; public set; }
    public int WarningLevel { get; public set; }
    public bool GenerateSerializationAssemblies { get; public set; }
    public bool EnableUnmanagedCodeDebugging { get; public set; }
    public ProjectOutputType OutputType { get; public set; }
    public string StartupObject { get; public set; }
    [CanBeNullAttribute]
public string OutputAssemblyName { get; public set; }
    [CanBeNullAttribute]
public string OutputAssemblyExtension { get; public set; }
    public bool HasRunCommand { get; public set; }
    public abstract virtual string get_DefineConstants();
    public abstract virtual void set_DefineConstants(string value);
    public abstract virtual bool get_TreatWarningsAsErrors();
    public abstract virtual void set_TreatWarningsAsErrors(bool value);
    public abstract virtual string get_DocumentationFile();
    public abstract virtual void set_DocumentationFile(string value);
    public abstract virtual bool get_RegisterForCOMInterop();
    public abstract virtual void set_RegisterForCOMInterop(bool value);
    public abstract virtual bool get_RemoveIntegerChecks();
    public abstract virtual void set_RemoveIntegerChecks(bool value);
    public abstract virtual string get_NoWarn();
    public abstract virtual void set_NoWarn(string value);
    public abstract virtual bool get_Optimize();
    public abstract virtual void set_Optimize(bool value);
    public abstract virtual int get_WarningLevel();
    public abstract virtual void set_WarningLevel(int value);
    public abstract virtual bool get_GenerateSerializationAssemblies();
    public abstract virtual void set_GenerateSerializationAssemblies(bool value);
    public abstract virtual bool get_EnableUnmanagedCodeDebugging();
    public abstract virtual void set_EnableUnmanagedCodeDebugging(bool value);
    public abstract virtual ProjectOutputType get_OutputType();
    public abstract virtual void set_OutputType(ProjectOutputType value);
    public abstract virtual string get_StartupObject();
    public abstract virtual void set_StartupObject(string value);
    public abstract virtual string get_OutputAssemblyName();
    public abstract virtual void set_OutputAssemblyName(string value);
    public abstract virtual string get_OutputAssemblyExtension();
    public abstract virtual void set_OutputAssemblyExtension(string value);
    public abstract virtual bool get_HasRunCommand();
    public abstract virtual void set_HasRunCommand(bool value);
}
public class JetBrains.ProjectModel.Properties.Managed.ManagedProjectBuildSettings : BuildSettingsBase {
    private string myPreBuildStep;
    private string myPostBuildStep;
    private string myApplicationType;
    private RunPostBuildEventType myRunPostBuildEventType;
    private string myProjectUISubcaption;
    private string myDefaultNamespace;
    private string myOutputFileName;
    private String[] myImportedNamespaces;
    public string PreBuildEvent { get; public set; }
    public string PostBuildEvent { get; public set; }
    public string ApplicationType { get; public set; }
    public string ProjectUISubcaption { get; public set; }
    public RunPostBuildEventType RunPostBuildEventType { get; public set; }
    public string DefaultNamespace { get; public set; }
    public String[] ImportedNamespaces { get; public set; }
    public string get_PreBuildEvent();
    public void set_PreBuildEvent(string value);
    public string get_PostBuildEvent();
    public void set_PostBuildEvent(string value);
    public sealed virtual string get_ApplicationType();
    public void set_ApplicationType(string value);
    public sealed virtual string get_ProjectUISubcaption();
    public void set_ProjectUISubcaption(string value);
    public RunPostBuildEventType get_RunPostBuildEventType();
    public void set_RunPostBuildEventType(RunPostBuildEventType value);
    public sealed virtual string get_DefaultNamespace();
    public void set_DefaultNamespace(string value);
    public sealed virtual String[] get_ImportedNamespaces();
    public void set_ImportedNamespaces(String[] value);
    public virtual void WriteBuildSettings(UnsafeWriter writer, IStringIntern stringIntern);
    public virtual void ReadBuildSettings(UnsafeReader reader, IStringIntern stringIntern);
    public virtual bool UpdateFrom(IBuildSettings settings);
    public virtual void Dump(TextWriter to, int indent);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Properties.Managed.ManagedProjectConfigurationExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static VirtualFileSystemPath GetRoslynTargetsPath(IManagedProjectConfiguration projectConfiguration);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static VirtualFileSystemPath GetRoslynToolPath(IManagedProjectConfiguration projectConfiguration);
    [ExtensionAttribute]
public static VirtualFileSystemPath GetPathFor(IManagedProjectConfiguration projectConfiguration, string property);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Properties.Managed.ManagedProjectEx : object {
    [ExtensionAttribute]
public static bool IsManagedProjectProperties(IProjectProperties projectProperties);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static string GetOutputAssemblyFileName(IProjectProperties projectProperties, TargetFrameworkId targetFrameworkId);
    [CanBeNullAttribute]
public static string GetOutputAssemblyFileName(string outputAssemblyName, string outputAssemblyExtension, ProjectOutputType outputType, string defaultNamespace);
    [NotNullAttribute]
public static VirtualFileSystemPath SelectOutputAssemblyFilePath(VirtualFileSystemPath outputPathByTargetPath, VirtualFileSystemPath outputPathByOutputProperties);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.Properties.NamespaceFolderProperty : object {
    private static string PropertyName;
    private static bool DefaultValue;
    private PersistentProjectItemProperties myPersistentProjectItemProperties;
    private IEnumerable`1<INamespaceFolderCustomizer> myCustomizers;
    public NamespaceFolderProperty(Lifetime lifetime, PersistentProjectItemProperties persistentProjectItemProperties, IEnumerable`1<INamespaceFolderCustomizer> customizers);
    public bool GetNamespaceFolderProperty(IProjectFolder projectFolder);
    public void SetNamespaceFolderProperty(IProjectFolder projectFolder, bool providesNamespace);
    private bool GetDefaultValue(IProjectFolder projectFolder);
}
public class JetBrains.ProjectModel.Properties.NodeJs.NodeJsBuildSettings : BuildSettingsBase {
    public virtual bool UpdateFrom(IBuildSettings settings);
}
public class JetBrains.ProjectModel.Properties.NodeJs.NodeJsProjectConfiguration : ProjectConfigurationBase {
    public virtual bool UpdateFrom(IProjectConfiguration configuration);
}
public class JetBrains.ProjectModel.Properties.NodeJs.NodeJsProjectProperties : ProjectPropertiesBase`1<NodeJsProjectConfiguration> {
    private IBuildSettings myBuildSettings;
    public IBuildSettings BuildSettings { get; }
    public NodeJsProjectProperties(ICollection`1<Guid> projectTypeGuids, Guid factoryGuid, IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds);
    public NodeJsProjectProperties(Guid factoryGuid);
    public virtual IBuildSettings get_BuildSettings();
    public virtual void WriteProjectProperties(UnsafeWriter writer, IStringIntern stringIntern);
    public virtual void ReadProjectProperties(UnsafeReader reader, IStringIntern stringIntern);
    public virtual void Dump(TextWriter to, int indent);
}
[ProjectModelExtensionAttribute("16")]
public class JetBrains.ProjectModel.Properties.NodeJs.NodeJsProjectPropertiesFactory : UnknownProjectPropertiesFactory {
    private static Guid NodeJsProjectPropertiesFactoryGuid;
    public static Guid NodeJsProjectTypeGuild1;
    public static Guid NodeJsProjectTypeGuild2;
    public Guid FactoryGuid { get; }
    private static NodeJsProjectPropertiesFactory();
    public virtual Guid get_FactoryGuid();
    public virtual bool IsApplicable(ProjectPropertiesFactoryParameters parameters);
    public virtual bool IsKnownProjectTypeGuid(Guid projectTypeGuid);
    public virtual IProjectProperties CreateProjectProperties(ProjectPropertiesFactoryParameters parameters);
    public virtual IProjectProperties Read(UnsafeReader reader, IStringIntern stringIntern);
    public static NodeJsProjectProperties CreateNodeJsProjectProperties(ICollection`1<Guid> flavours, IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds);
    public static NodeJsProjectProperties CreateNodeJsProjectProperties(IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds, Guid[] flavours);
}
public static class JetBrains.ProjectModel.Properties.ProjectCapabilities : object {
    public static string ManagedLang;
    public static string AllTargetOutputGroups;
    public static string DeclaredSourceItems;
    public static string Managed;
    public static string AppDesigner;
    public static string VisualStudioWellKnownOutputGroups;
    public static string CSharp;
    public static string RelativePathDerivedDefaultNamespace;
    public static string ProjectReferences;
    public static string UserSourceItems;
    public static string CrossPlatformExecutable;
    public static string LanguageService;
    public static string UseFileGlobs;
    public static string SharedProjectReferences;
    public static string OpenProjectFile;
    public static string GenerateDocumentationFile;
    public static string PackageReferences;
    public static string SingleFileGenerators;
    public static string CPS;
    public static string ProjectConfigurationsInferredFromUsage;
    public static string OutputGroups;
    public static string RunningInVisualStudio;
    public static string Microsoft_VisualStudio_ProjectSystem_RetailRuntime;
    public static string LaunchProfiles;
    public static string DependenciesTree;
    public static string AssemblyReferences;
    public static string COMReferences;
    public static string HostSetActiveProjectConfiguration;
    public static string HandlesOwnReload;
    public static string SharedAssetsProject;
    public static string DotNetCoreWeb;
    public static string Web;
    public static string TypeScript;
    public static string AspNetCore;
    public static string SupportHierarchyContextSvc;
    public static string VB;
    public static string PerPlatformCompilation;
    public static string VCProject;
    public static String[] ConsoleCoreAppCapabilities;
    public static String[] WebCoreAppCapabilities;
    public static String[] CoreMultiTargetFrameworkCapabilitiesByMicha;
    private static ProjectCapabilities();
    [PureAttribute]
public static bool IsCPS(ISet`1<string> capabilities);
    [PureAttribute]
public static bool IsSharedProjectCPS(ISet`1<string> capabilities);
    [PureAttribute]
public static bool IsCSharpCPS(ISet`1<string> capabilities);
    [PureAttribute]
public static bool IsVisualBasicCPS(ISet`1<string> capabilities);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Properties.ProjectConfigurationEx : object {
    [ExtensionAttribute]
public static void SetRelativeOutputDirectory(IProjectConfiguration configuration, string outputDirectory, VirtualFileSystemPath projectDirectory);
    [ExtensionAttribute]
public static void SetRelativeIntermediateDirectory(IProjectConfiguration configuration, string intermediateDirectory, VirtualFileSystemPath projectDirectory);
    [ExtensionAttribute]
public static IReadOnlyDictionary`2<string, string> UpdatePropertyCollection(IProjectConfiguration configuration, Action`1<IDictionary`2<string, string>> updateAction);
    [NotNullAttribute]
private static string EnsureRelative(string directory, VirtualFileSystemPath projectDirectory);
}
public class JetBrains.ProjectModel.Properties.ProjectFileProperties : ProjectFilePropertiesBase {
    private ItemSubType mySubType;
    private string myCustomTool;
    private bool myIsDesignTimeBuildInput;
    private bool myIsCustomToolOutput;
    private string myCustomToolNamespace;
    private string myCustomToolOutput;
    private string myDependsUponName;
    [UsedImplicitlyAttribute]
public ItemSubType SubType { get; public set; }
    [UsedImplicitlyAttribute]
public bool IsDesignTimeBuildInput { get; public set; }
    [UsedImplicitlyAttribute]
public bool IsCustomToolOutput { get; public set; }
    [UsedImplicitlyAttribute]
[NotNullAttribute]
public string CustomTool { get; public set; }
    [UsedImplicitlyAttribute]
[NotNullAttribute]
public string CustomToolNamespace { get; public set; }
    [UsedImplicitlyAttribute]
[NotNullAttribute]
public string CustomToolOutput { get; public set; }
    [UsedImplicitlyAttribute]
[NotNullAttribute]
public string DependsUponName { get; public set; }
    public ProjectFileProperties(Guid factoryGuid);
    public ItemSubType get_SubType();
    public void set_SubType(ItemSubType value);
    public bool get_IsDesignTimeBuildInput();
    public void set_IsDesignTimeBuildInput(bool value);
    public bool get_IsCustomToolOutput();
    public void set_IsCustomToolOutput(bool value);
    public string get_CustomTool();
    public void set_CustomTool(string value);
    public string get_CustomToolNamespace();
    public void set_CustomToolNamespace(string value);
    public string get_CustomToolOutput();
    public void set_CustomToolOutput(string value);
    public string get_DependsUponName();
    public void set_DependsUponName(string value);
    public virtual void ReadFileProperties(UnsafeReader reader, IStringIntern stringIntern);
    public virtual void WriteProjectFileProperties(UnsafeWriter writer, IStringIntern stringIntern);
    public virtual void Dump(TextWriter to, DumpFlags flags);
    public virtual bool UpdatePropertiesFrom(IProjectFileProperties properties);
}
public class JetBrains.ProjectModel.Properties.ProjectFilePropertiesBase : object {
    [CompilerGeneratedAttribute]
private Guid <OwnerFactoryGuid>k__BackingField;
    protected IProjectFile myProjectFile;
    private bool myIsHidden;
    private CompactList`1<Pair`2<TargetFrameworkId, BuildAction>> myBuildActions;
    [NotNullAttribute]
private IReadOnlyDictionary`2<string, string> myPropertiesCollection;
    public Guid OwnerFactoryGuid { get; }
    public bool IsHidden { get; public set; }
    public IReadOnlyDictionary`2<string, string> PropertiesCollection { get; public set; }
    public ProjectFilePropertiesBase(Guid factoryGuid);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_OwnerFactoryGuid();
    public sealed virtual bool get_IsHidden();
    public sealed virtual void set_IsHidden(bool value);
    public sealed virtual IReadOnlyDictionary`2<string, string> get_PropertiesCollection();
    public sealed virtual void set_PropertiesCollection(IReadOnlyDictionary`2<string, string> value);
    protected UndoUsingWriteLock UsingWriteLock();
    private Pair`2<BuildAction, int> GetBuildActionWithIndex(TargetFrameworkId targetFrameworkId);
    public sealed virtual void SetBuildAction(BuildAction buildAction, TargetFrameworkId targetFrameworkId);
    public sealed virtual BuildAction GetBuildAction(TargetFrameworkId targetFrameworkId);
    public sealed virtual CompactList`1<Pair`2<TargetFrameworkId, BuildAction>> GetBuildActions();
    private void WriteProperties(UnsafeWriter writer);
    private void ReadProperties(UnsafeReader reader);
    public virtual void ReadFileProperties(UnsafeReader reader, IStringIntern stringIntern);
    public virtual void WriteProjectFileProperties(UnsafeWriter writer, IStringIntern stringIntern);
    public virtual void Dump(TextWriter to, DumpFlags flags);
    public virtual bool UpdatePropertiesFrom(IProjectFileProperties properties);
    protected void OnPropertyChange(string name, object oldValue, object newValue);
    public sealed virtual void SetProjectFile(IProjectFile projectFile);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Properties.ProjectFilePropertiesEx : object {
    [ExtensionAttribute]
public static TProjectFileProperties WithBuildAction(TProjectFileProperties properties, BuildAction buildAction, TargetFrameworkId targetFrameworkId);
    [ExtensionAttribute]
public static IReadOnlyDictionary`2<string, string> UpdatePropertyCollection(TProjectFileProperties properties, Action`1<IDictionary`2<string, string>> updateAction);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static BuildAction TryGetUniqueBuildAction(IProjectFileProperties properties);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.Properties.ProjectFilePropertiesFactory : object {
    private Lazy`1<ProjectModelExtensionsContainer> myContainer;
    private ProjectModelExtensionsContainer Container { get; }
    public ProjectFilePropertiesFactory(Lazy`1<ProjectModelExtensionsContainer> container);
    private ProjectModelExtensionsContainer get_Container();
    public IProjectFileProperties CreateProjectFileProperties(IProjectProperties projectProperties);
    [NotNullAttribute]
public IProjectFilePropertiesProvider CreateFilePropertiesProvider(IProjectProperties projectProperties);
    public IProjectFilePropertiesProvider GetFactory(Guid factoryGuid);
}
[ProjectModelExtensionAttribute("16")]
public class JetBrains.ProjectModel.Properties.ProjectFilePropertiesProvider : ProjectFilePropertiesProviderBase {
    public static Guid ManagedProjectFileProperiesFactoryGuid;
    protected ProjectFilePropertiesProvider(Guid factoryGuid);
    private static ProjectFilePropertiesProvider();
    public virtual bool IsApplicable(IProjectProperties projectProperties);
    public virtual IProjectFileProperties CreateProjectFileProperties();
}
[ProjectModelExtensionAttribute("16")]
public class JetBrains.ProjectModel.Properties.ProjectFilePropertiesProviderBase : object {
    public static Guid DefaultFactoryGuid;
    [CompilerGeneratedAttribute]
private Guid <FactoryGuid>k__BackingField;
    public Guid FactoryGuid { get; }
    protected ProjectFilePropertiesProviderBase(Guid factoryGuid);
    private static ProjectFilePropertiesProviderBase();
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_FactoryGuid();
    public virtual bool IsApplicable(IProjectProperties projectProperties);
    public virtual IProjectFileProperties CreateProjectFileProperties();
    public virtual IProjectFileProperties ReadProjectFileProperties(UnsafeReader unsafeReader, IStringIntern stringIntern);
}
public class JetBrains.ProjectModel.Properties.ProjectFlavorAttribute : ShellComponentAttribute {
    public ProjectFlavorAttribute(Instantiation instantiation);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.Properties.ProjectFlavoursFactory : object {
    private IDictionary`2<Guid, IProjectFlavor> myProjectFlavourFactories;
    public ProjectFlavoursFactory(IEnumerable`1<IProjectFlavor> flavourFactories);
    public IProjectFlavor GetFlavourbyId(Guid guid);
}
public class JetBrains.ProjectModel.Properties.ProjectLanguage : EnumPattern {
    public static ProjectLanguage CSHARP;
    public static ProjectLanguage CPP;
    public static ProjectLanguage JAVASCRIPT;
    public static ProjectLanguage JSON;
    public static ProjectLanguage JSX;
    public static ProjectLanguage VBASIC;
    public static ProjectLanguage UNKNOWN;
    private Func`1<ProjectFileType> myProjectFileType;
    [CompilerGeneratedAttribute]
private string <PresentableName>k__BackingField;
    public string PresentableName { get; }
    [NotNullAttribute]
public ProjectFileType DefaultProjectFileType { get; }
    protected ProjectLanguage(string name, string presentableName, Func`1<ProjectFileType> projectFileType);
    private static ProjectLanguage();
    [CompilerGeneratedAttribute]
public string get_PresentableName();
    public ProjectFileType get_DefaultProjectFileType();
    [NotNullAttribute]
public static ProjectLanguage ParsePresentableName(string presentableName);
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute("8")]
public class JetBrains.ProjectModel.Properties.ProjectModelExtensionAttribute : ComponentAttribute {
    public ProjectModelExtensionAttribute(Instantiation instantiation);
}
[ShellComponentAttribute("0")]
public class JetBrains.ProjectModel.Properties.ProjectModelExtensionsContainer : object {
    private IComponentContainer myContainer;
    public ProjectModelExtensionsContainer(NestedComponentContainerAllByPartAttribute`2<ProjectModelExtensionAttribute, ShellPartCatalogSet> nestedComponentContainer);
    public IEnumerable`1<T> GetParts(Func`2<T, bool> isApplicable);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Properties.ProjectPropertiesEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IProjectConfiguration GetOrCreateActiveConfiguration(IProjectProperties properties, TargetFrameworkId targetFrameworkId);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static TProjectConfiguration TryGetConfiguration(IProjectProperties properties, TargetFrameworkId targetFrameworkId);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<TProjectConfiguration> GetActiveConfigurations(IProjectProperties properties);
    [ExtensionAttribute]
[NotNullAttribute]
public static TargetFrameworkId GetRandomTargetFrameworkId(IProjectProperties properties);
    [ExtensionAttribute]
[NotNullAttribute]
public static TargetFrameworkId GetSingleTargetFrameworkId(IProjectProperties projectProperties);
    [ExtensionAttribute]
public static bool IsProxyStubProject(IProjectProperties projectProperties);
    [ExtensionAttribute]
public static bool IsVCXProject(IProjectProperties projectProperties);
    [ExtensionAttribute]
public static bool HasFlavour(IProjectProperties projectProperties, ProjectFlavoursFactory projectFlavoursFactory);
    [ExtensionAttribute]
[ContractAnnotationAttribute("null => false")]
public static bool IsWinJSProjectKind(IProjectProperties projectProperties);
    [ExtensionAttribute]
public static bool ShouldHaveImplicitReferences(IProjectProperties projectProperties);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.Properties.ProjectPropertiesFactory : object {
    private Lazy`1<ProjectModelExtensionsContainer> myContainer;
    [CompilerGeneratedAttribute]
private ProjectFlavoursFactory <FlavoursFactory>k__BackingField;
    public ProjectFlavoursFactory FlavoursFactory { get; }
    private ProjectModelExtensionsContainer Container { get; }
    public ProjectPropertiesFactory(Lazy`1<ProjectModelExtensionsContainer> container, ProjectFlavoursFactory flavoursFactory);
    [CompilerGeneratedAttribute]
public ProjectFlavoursFactory get_FlavoursFactory();
    private ProjectModelExtensionsContainer get_Container();
    public IProjectProperties CreateProjectProperties(ProjectPropertiesFactoryParameters parameters);
    public bool IsKnownProjectTypeGuid(Guid projectTypeGuid);
    public IEnumerable`1<IProjectPropertiesFactory> GetAllFactories();
    public IProjectPropertiesFactory GetFactory(Guid factoryGuid);
}
public class JetBrains.ProjectModel.Properties.ProjectPropertiesFactoryParameters : object {
    [CompilerGeneratedAttribute]
private Guid <ProjectTypeGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<Guid> <ProjectTypeGuids>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetPlatformData <TargetPlatformData>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<TargetFrameworkId> <TargetFrameworkIds>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <ProjectLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <ProjectFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private DotNetCorePlatformInfo <DotNetCorePlatform>k__BackingField;
    public Guid ProjectTypeGuid { get; public set; }
    [NotNullAttribute]
public ICollection`1<Guid> ProjectTypeGuids { get; public set; }
    [CanBeNullAttribute]
public TargetPlatformData TargetPlatformData { get; }
    [NotNullAttribute]
public IReadOnlyCollection`1<TargetFrameworkId> TargetFrameworkIds { get; }
    public VirtualFileSystemPath ProjectLocation { get; }
    [NotNullAttribute]
public VirtualFileSystemPath ProjectFilePath { get; }
    [CanBeNullAttribute]
public DotNetCorePlatformInfo DotNetCorePlatform { get; public set; }
    public ProjectPropertiesFactoryParameters(Guid projectTypeGuid, ICollection`1<Guid> projectTypeGuids, IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds, TargetPlatformData targetPlatformData, VirtualFileSystemPath projectLocation, VirtualFileSystemPath projectFilePath, DotNetCorePlatformInfo dotNetCorePlatform);
    [CompilerGeneratedAttribute]
public Guid get_ProjectTypeGuid();
    [CompilerGeneratedAttribute]
public void set_ProjectTypeGuid(Guid value);
    [CompilerGeneratedAttribute]
public ICollection`1<Guid> get_ProjectTypeGuids();
    [CompilerGeneratedAttribute]
public void set_ProjectTypeGuids(ICollection`1<Guid> value);
    [CompilerGeneratedAttribute]
public TargetPlatformData get_TargetPlatformData();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<TargetFrameworkId> get_TargetFrameworkIds();
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_ProjectLocation();
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_ProjectFilePath();
    [CompilerGeneratedAttribute]
public DotNetCorePlatformInfo get_DotNetCorePlatform();
    [CompilerGeneratedAttribute]
public void set_DotNetCorePlatform(DotNetCorePlatformInfo value);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.Properties.ProjectPropertiesRequests : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <RequestedProjectProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <RequestedProjectItemProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <RequestedProjectFileProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <RequestedProjectCapabilities>k__BackingField;
    [NotNullAttribute]
public IReadOnlyCollection`1<string> RequestedProjectProperties { get; }
    [NotNullAttribute]
public IReadOnlyCollection`1<string> RequestedProjectItemProperties { get; }
    [NotNullAttribute]
public IReadOnlyCollection`1<string> RequestedProjectFileProperties { get; }
    [NotNullAttribute]
public IReadOnlyCollection`1<string> RequestedProjectCapabilities { get; }
    public ProjectPropertiesRequests(IEnumerable`1<IProjectPropertiesRequest> projectPropertyRequests, IEnumerable`1<IProjectItemPropertiesRequest> projectItemPropertiesRequests, IEnumerable`1<IProjectFilePropertiesRequest> projectFilePropertyRequests, IEnumerable`1<IProjectCapabilityRequest> projectCapabilityRequests);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<string> get_RequestedProjectProperties();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<string> get_RequestedProjectItemProperties();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<string> get_RequestedProjectFileProperties();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<string> get_RequestedProjectCapabilities();
}
public class JetBrains.ProjectModel.Properties.ProjectPropertyModificationException : Exception {
    public ProjectPropertyModificationException(string message);
    public ProjectPropertyModificationException(string message, Exception inner);
    protected ProjectPropertyModificationException(SerializationInfo info, StreamingContext context);
}
public class JetBrains.ProjectModel.Properties.ProjectReferencePropertiesEqualityComparer : object {
    public static IEqualityComparer`1<IProjectReferenceProperties> Instance;
    private static ProjectReferencePropertiesEqualityComparer();
    public sealed virtual bool Equals(IProjectReferenceProperties x, IProjectReferenceProperties y);
    public sealed virtual int GetHashCode(IProjectReferenceProperties obj);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Properties.PropertiesRequestExtensions : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static string GetRequestedProjectProperty(IProject project, TargetFrameworkId targetFrameworkId, string propertyName);
    [ExtensionAttribute]
[NotNullAttribute]
public static IReadOnlyCollection`1<string> GetRequestedProjectItems(IProject project, TargetFrameworkId targetFrameworkId, string itemName);
    [ExtensionAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
public static IReadOnlyCollection`1<string> GetRequestedProjectProperties(IProject project, string propertyName);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static string GetUniqueRequestedProjectProperty(IProject project, string propertyName);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static string GetUniqueRequestedProjectProperty(IProject project, string propertyName, Predicate`1<TargetFrameworkId> targetFrameworkSelector);
    [ExtensionAttribute]
public static bool HasProjectPropertyValueInAnyTargetFramework(IProjectProperties properties, string propertyName, string propertyValue);
}
public enum JetBrains.ProjectModel.Properties.RunPostBuildEventType : Enum {
    public byte value__;
    public static RunPostBuildEventType ALWAYS;
    public static RunPostBuildEventType ON_SUCCESSFUL_BUILD;
    public static RunPostBuildEventType ON_OUTPUT_UPDATED;
}
public class JetBrains.ProjectModel.Properties.SdkFileProjectFileProperties : ProjectFilePropertiesBase {
    public virtual bool UpdatePropertiesFrom(IProjectFileProperties properties);
    public virtual void Dump(TextWriter to, DumpFlags flags);
}
[ProjectModelExtensionAttribute("16")]
public class JetBrains.ProjectModel.Properties.SdkModuleProjectFilePropertiesProvider : ProjectFilePropertiesProviderBase {
    public static Guid SdkModuleProjectFilePropertiesFactoryGuid;
    private static SdkModuleProjectFilePropertiesProvider();
    public virtual bool IsApplicable(IProjectProperties projectProperties);
    public virtual IProjectFileProperties CreateProjectFileProperties();
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
public class JetBrains.ProjectModel.Properties.SolutionProjectModelExtensionAttribute : ComponentAttribute {
    public SolutionProjectModelExtensionAttribute(Instantiation instantiation);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ProjectModel.Properties.SolutionProjectModelExtensionsContainer : object {
    private IComponentContainer myContainer;
    public SolutionProjectModelExtensionsContainer(NestedComponentContainerAllByPartAttribute`2<SolutionProjectModelExtensionAttribute, ShellPartCatalogSet> nestedComponentContainer);
    public IEnumerable`1<T> GetParts(Func`2<T, bool> isApplicable);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Properties.StringInternEx : object {
    [ExtensionAttribute]
public static string ReadStringInternedOrThrowIfMissing(UnsafeReader reader, IStringIntern stringIntern);
    [ExtensionAttribute]
public static void WriteStringInterned(UnsafeWriter writer, string s, IStringIntern stringIntern);
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.Properties.UnknownProjectElementOrigin : object {
    [NotNullAttribute]
public static IProjectElementOrigin Instance;
    private static UnknownProjectElementOrigin();
    public virtual string ToString();
    public sealed virtual bool CanModify(String& reason);
}
public interface JetBrains.ProjectModel.Properties.VB.IVBBuildSettings {
    public OptionCompare OptionCompare { get; }
    public OptionExplicit OptionExplicit { get; }
    public OptionInfer OptionInfer { get; }
    public OptionStrict OptionStrict { get; }
    public abstract virtual OptionCompare get_OptionCompare();
    public abstract virtual OptionExplicit get_OptionExplicit();
    public abstract virtual OptionInfer get_OptionInfer();
    public abstract virtual OptionStrict get_OptionStrict();
}
public interface JetBrains.ProjectModel.Properties.VB.IVBProjectConfiguration {
    public DebugType DebugType { get; public set; }
    public bool DefineDebug { get; public set; }
    public bool DefineTrace { get; public set; }
    public string WarningsAsErrors { get; public set; }
    public string Platform { get; public set; }
    public VBLanguageVersion LanguageVersion { get; public set; }
    public abstract virtual DebugType get_DebugType();
    public abstract virtual void set_DebugType(DebugType value);
    public abstract virtual bool get_DefineDebug();
    public abstract virtual void set_DefineDebug(bool value);
    public abstract virtual bool get_DefineTrace();
    public abstract virtual void set_DefineTrace(bool value);
    public abstract virtual string get_WarningsAsErrors();
    public abstract virtual void set_WarningsAsErrors(string value);
    public abstract virtual string get_Platform();
    public abstract virtual void set_Platform(string value);
    public abstract virtual VBLanguageVersion get_LanguageVersion();
    public abstract virtual void set_LanguageVersion(VBLanguageVersion value);
    public abstract virtual string GetCompilerOptionsCommandLine(VirtualFileSystemPath location);
}
public enum JetBrains.ProjectModel.Properties.VB.OptionCompare : Enum {
    public byte value__;
    public static OptionCompare Binary;
    public static OptionCompare Text;
}
public enum JetBrains.ProjectModel.Properties.VB.OptionExplicit : Enum {
    public byte value__;
    public static OptionExplicit Off;
    public static OptionExplicit On;
}
public enum JetBrains.ProjectModel.Properties.VB.OptionInfer : Enum {
    public byte value__;
    public static OptionInfer Off;
    public static OptionInfer On;
}
public enum JetBrains.ProjectModel.Properties.VB.OptionStrict : Enum {
    public byte value__;
    public static OptionStrict Off;
    public static OptionStrict On;
}
public enum JetBrains.ProjectModel.Properties.VB.VBLanguageVersion : Enum {
    public int value__;
    public static VBLanguageVersion LatestMajor;
    public static VBLanguageVersion Vb8;
    public static VBLanguageVersion Vb9;
    public static VBLanguageVersion Vb10;
    public static VBLanguageVersion Vb11;
    public static VBLanguageVersion Vb12;
    public static VBLanguageVersion Vb14;
    public static VBLanguageVersion Vb15;
    public static VBLanguageVersion Vb15_3;
    public static VBLanguageVersion Vb15_5;
    public static VBLanguageVersion Vb16;
    public static VBLanguageVersion Vb16_9;
    public static VBLanguageVersion Latest;
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Properties.VB.VBLanguageVersionUtil : object {
    [PureAttribute]
public static VBLanguageVersion ParseCompilationOption(string languageVersion, VBLanguageVersion emptyVersion, VBLanguageVersion unknownVersion);
    [PureAttribute]
public static Nullable`1<VBLanguageVersion> TryParseCompilationOption(string languageVersion, Nullable`1<VBLanguageVersion> emptyVersion, Nullable`1<VBLanguageVersion> unknownVersion);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static string ToCompilationOption(VBLanguageVersion languageVersion);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Properties.VB.VBProjectConfigurationExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static VirtualFileSystemPath GetVbcToolPath(IVBProjectConfiguration projectConfiguration);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static VirtualFileSystemPath GetVbcToolExe(IVBProjectConfiguration projectConfiguration);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static VirtualFileSystemPath GetVisualBasicCoreTargetsPath(IVBProjectConfiguration projectConfiguration);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static VirtualFileSystemPath GetCompilerDirectoryPath(IVBProjectConfiguration projectConfiguration);
}
public class JetBrains.ProjectModel.Properties.VB.VBProjectProperties : ProjectPropertiesBase`1<VBProjectConfiguration> {
    private VBBuildSettings myBuildSettings;
    private TargetPlatformData myTargetPlatformData;
    public IBuildSettings BuildSettings { get; }
    public ProjectLanguage DefaultLanguage { get; }
    public TargetPlatformData TargetPlatformData { get; }
    internal VBProjectProperties(ICollection`1<Guid> flavours, Guid guid, IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds, TargetPlatformData targetPlatformData, DotNetCorePlatformInfo dotNetCorePlatform);
    public VBProjectProperties(Guid factoryGuid, TargetPlatformData targetPlatformData);
    public virtual IBuildSettings get_BuildSettings();
    public virtual ProjectLanguage get_DefaultLanguage();
    public sealed virtual TargetPlatformData get_TargetPlatformData();
    public virtual void ReadProjectProperties(UnsafeReader reader, IStringIntern stringIntern);
    public virtual void WriteProjectProperties(UnsafeWriter writer, IStringIntern stringIntern);
    public virtual void Dump(TextWriter to, int indent);
}
[ProjectModelExtensionAttribute("16")]
public class JetBrains.ProjectModel.Properties.VB.VBProjectPropertiesFactory : UnknownProjectPropertiesFactory {
    private static Guid VBPropertyFactoryGuid;
    public static Guid VBProjectTypeGuid;
    public static Guid VBVs2017ProjectSystemTypeGuid;
    public Guid FactoryGuid { get; }
    private static VBProjectPropertiesFactory();
    public virtual bool IsApplicable(ProjectPropertiesFactoryParameters parameters);
    public virtual bool IsKnownProjectTypeGuid(Guid projectTypeGuid);
    public virtual IProjectProperties CreateProjectProperties(ProjectPropertiesFactoryParameters parameters);
    public virtual Guid get_FactoryGuid();
    public virtual IProjectProperties Read(UnsafeReader reader, IStringIntern stringIntern);
    public static VBProjectProperties CreateVBProjectProperties(IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds, Guid[] flavors);
    public static VBProjectProperties CreateVBProjectProperties(ICollection`1<Guid> flavours, IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds, TargetPlatformData targetPlatformData);
    public static VBProjectProperties CreateVBProjectProperties(IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.Properties.VB.VBProjectPropertiesRequest : object {
    private static String[] ourKeys;
    public IEnumerable`1<string> RequestedProperties { get; }
    private static VBProjectPropertiesRequest();
    public sealed virtual IEnumerable`1<string> get_RequestedProperties();
}
public enum JetBrains.ProjectModel.Properties.VCXProj.CLanguageStandard : Enum {
    public byte value__;
    [LocalizedDescriptionAttribute("Unspecified")]
public static CLanguageStandard Unspecified;
    [LocalizedDescriptionAttribute("C89")]
public static CLanguageStandard C89;
    [LocalizedDescriptionAttribute("C99")]
public static CLanguageStandard C99;
    [LocalizedDescriptionAttribute("C11")]
public static CLanguageStandard C11;
    [LocalizedDescriptionAttribute("C17")]
public static CLanguageStandard C17;
    [LocalizedDescriptionAttribute("C23")]
public static CLanguageStandard C23;
    [LocalizedDescriptionAttribute("Latest C working draft")]
public static CLanguageStandard CLatest;
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Properties.VCXProj.CLanguageStandardEx : object {
    public static Pair`2[] KnownOptions;
    private static CLanguageStandardEx();
    [ExtensionAttribute]
public static Nullable`1<CLanguageStandard> TryParseCLanguageStandard(string s);
    [ExtensionAttribute]
public static CLanguageStandard ParseCLanguageStandard(string s);
}
public class JetBrains.ProjectModel.Properties.VCXProj.ClCommandLine : object {
    [CompilerGeneratedAttribute]
private String[] <CommandLineArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<VirtualFileSystemPath> <Files>k__BackingField;
    public String[] CommandLineArgs { get; }
    public IList`1<VirtualFileSystemPath> Files { get; }
    public ClCommandLine(string commandLine, string files);
    private ClCommandLine(String[] commandLineArgs, IList`1<VirtualFileSystemPath> files);
    [CompilerGeneratedAttribute]
public String[] get_CommandLineArgs();
    [CompilerGeneratedAttribute]
public IList`1<VirtualFileSystemPath> get_Files();
    public void Write(UnsafeWriter writer, IStringIntern stringIntern);
    public static ClCommandLine Read(UnsafeReader reader, IStringIntern stringIntern);
    public void Dump(TextWriter to, int indent);
    public sealed virtual bool Equals(ClCommandLine other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NoReorderAttribute]
public enum JetBrains.ProjectModel.Properties.VCXProj.ConfigurationTypes : Enum {
    public int value__;
    public static ConfigurationTypes TypeUnknown;
    public static ConfigurationTypes TypeApplication;
    public static ConfigurationTypes TypeDynamicLibrary;
    public static ConfigurationTypes TypeStaticLibrary;
    public static ConfigurationTypes TypeMakefile;
    public static ConfigurationTypes TypeGeneric;
}
public static class JetBrains.ProjectModel.Properties.VCXProj.ConfigurationTypesExtensions : object {
    private static ConfigurationTypes UtilityConfigurationType;
    private static ConfigurationTypesExtensions();
    public static ConfigurationTypes GetConfigurationType(string configurationTypeValue);
    public static Pair`2[] GetKnownConfigurationTypes();
}
[NoReorderAttribute]
public enum JetBrains.ProjectModel.Properties.VCXProj.CppExceptionHandling : Enum {
    public byte value__;
    public static CppExceptionHandling CppExceptionHandlingNo;
    public static CppExceptionHandling CppExceptionHandlingYes;
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Properties.VCXProj.CppExceptionHandlingEx : object {
    public static Pair`2[] KnownOptions;
    private static CppExceptionHandlingEx();
    [ExtensionAttribute]
public static Nullable`1<CppExceptionHandling> TryParseCppExceptionHandling(string s);
    [ExtensionAttribute]
public static CppExceptionHandling ParseCppExceptionHandling(string s);
}
public class JetBrains.ProjectModel.Properties.VCXProj.CppIntelliSenseInfo : object {
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <ProjectDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<VirtualFileSystemPath> <IncludePaths>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <CommandLineArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolsetISenseIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigurationName>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <ExecutablePath>k__BackingField;
    public VirtualFileSystemPath ProjectDirectory { get; }
    public IList`1<VirtualFileSystemPath> IncludePaths { get; }
    public String[] CommandLineArguments { get; }
    public string ToolsetISenseIdentifier { get; }
    public string ConfigurationName { get; }
    public VirtualFileSystemPath ExecutablePath { get; }
    public CppIntelliSenseInfo(VirtualFileSystemPath projectDirectory, string includePath, String[] commandLineArguments, string toolsetISenseIdentifier, string configurationName, VirtualFileSystemPath executablePath);
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_ProjectDirectory();
    [CompilerGeneratedAttribute]
public IList`1<VirtualFileSystemPath> get_IncludePaths();
    [CompilerGeneratedAttribute]
public String[] get_CommandLineArguments();
    [CompilerGeneratedAttribute]
public string get_ToolsetISenseIdentifier();
    [CompilerGeneratedAttribute]
public string get_ConfigurationName();
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_ExecutablePath();
    protected bool Equals(CppIntelliSenseInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.ProjectModel.Properties.VCXProj.CppIntelliSenseInfoChange : object {
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <ProjectLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<VirtualFileSystemPath> <ChangedFiles>k__BackingField;
    public VirtualFileSystemPath ProjectLocation { get; }
    public ICollection`1<VirtualFileSystemPath> ChangedFiles { get; }
    public CppIntelliSenseInfoChange(VirtualFileSystemPath projectLocation, ICollection`1<VirtualFileSystemPath> changedFiles);
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_ProjectLocation();
    [CompilerGeneratedAttribute]
public ICollection`1<VirtualFileSystemPath> get_ChangedFiles();
    public IProject GetProject(ISolution solution);
}
public enum JetBrains.ProjectModel.Properties.VCXProj.CppLanguageStandard : Enum {
    public byte value__;
    [LocalizedDescriptionAttribute("Unspecified")]
public static CppLanguageStandard Unspecified;
    [LocalizedDescriptionAttribute("C++98")]
public static CppLanguageStandard Cpp98;
    [LocalizedDescriptionAttribute("C++03")]
public static CppLanguageStandard Cpp03;
    [LocalizedDescriptionAttribute("C++11")]
public static CppLanguageStandard Cpp11;
    [LocalizedDescriptionAttribute("C++14")]
public static CppLanguageStandard Cpp14;
    [LocalizedDescriptionAttribute("C++17")]
public static CppLanguageStandard Cpp17;
    [LocalizedDescriptionAttribute("C++20")]
public static CppLanguageStandard Cpp20;
    [LocalizedDescriptionAttribute("C++23")]
public static CppLanguageStandard Cpp23;
    [LocalizedDescriptionAttribute("Latest C++ working draft")]
public static CppLanguageStandard CppLatest;
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Properties.VCXProj.CppLanguageStandardEx : object {
    public static Pair`2[] KnownOptions;
    private static CppLanguageStandardEx();
    [ExtensionAttribute]
public static Nullable`1<CppLanguageStandard> TryParseCppLanguageStandard(string s);
    [ExtensionAttribute]
public static CppLanguageStandard ParseCppLanguageStandard(string s);
}
public class JetBrains.ProjectModel.Properties.VCXProj.CppProjectIntelliSenseInfo : object {
    public static CppProjectIntelliSenseInfo EmptyInstance;
    private List`1<CppIntelliSenseInfo> myIntelliSenseInfos;
    [CompilerGeneratedAttribute]
private Dictionary`2<VirtualFileSystemPath, CppIntelliSenseInfo> <FileToIntelliSenseInfoMap>k__BackingField;
    public IEnumerable`1<CppIntelliSenseInfo> IntelliSenseInfos { get; }
    public Dictionary`2<VirtualFileSystemPath, CppIntelliSenseInfo> FileToIntelliSenseInfoMap { get; }
    private static CppProjectIntelliSenseInfo();
    public IEnumerable`1<CppIntelliSenseInfo> get_IntelliSenseInfos();
    [CompilerGeneratedAttribute]
public Dictionary`2<VirtualFileSystemPath, CppIntelliSenseInfo> get_FileToIntelliSenseInfoMap();
    public void AddIntelliSenseInfo(CppIntelliSenseInfo info);
    public void AddDefaultIntelliSenseInfo(CppIntelliSenseInfo defaultIntelliSenseInfo);
}
public enum JetBrains.ProjectModel.Properties.VCXProj.DefaultCallingConvention : Enum {
    public byte value__;
    public static DefaultCallingConvention CDecl;
    public static DefaultCallingConvention FastCall;
    public static DefaultCallingConvention StdCall;
    public static DefaultCallingConvention VectorCall;
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Properties.VCXProj.DefaultCallingConventionEx : object {
    public static Pair`2[] KnownOptions;
    private static DefaultCallingConventionEx();
    [ExtensionAttribute]
public static Nullable`1<DefaultCallingConvention> TryParseDefaultCallingConvention(string s);
    [ExtensionAttribute]
public static DefaultCallingConvention ParseDefaultCallingConvention(string s);
}
public interface JetBrains.ProjectModel.Properties.VCXProj.ICppIntelliSenseInfoProvider {
    public IProperty`1<bool> IsInitialized { get; }
    public IProperty`1<bool> IsInfoForAddedProjectsReady { get; }
    public abstract virtual IProperty`1<bool> get_IsInitialized();
    public abstract virtual IProperty`1<bool> get_IsInfoForAddedProjectsReady();
    public abstract virtual CppIntelliSenseInfo GetIntelliSenseInfoForFile(IProject project, VirtualFileSystemPath file);
    public abstract virtual bool HasIntelliSenseInfoForFile(IProject project, VirtualFileSystemPath file);
    public abstract virtual CppProjectIntelliSenseInfo GetIntelliSenseInfosForProject(IProject project);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ProjectModel.Properties.VCXProj.IIntelliSenseInfoSettingAccessor {
    public bool UseIntelliSenseInfoApi { get; }
    public abstract virtual bool get_UseIntelliSenseInfoApi();
}
public interface JetBrains.ProjectModel.Properties.VCXProj.IVCProjectOrFileProperties {
    public abstract virtual void OnPropertyChange(string prop);
}
[NoReorderAttribute]
public enum JetBrains.ProjectModel.Properties.VCXProj.PchOption : Enum {
    public byte value__;
    public static PchOption None;
    public static PchOption CreateUsingSpecific;
    public static PchOption UseUsingSpecific;
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Properties.VCXProj.PchOptionEx : object {
    public static Pair`2[] KnownOptions;
    private static PchOptionEx();
    [ExtensionAttribute]
public static Nullable`1<PchOption> TryParsePchOption(string s);
    [ExtensionAttribute]
public static PchOption ParsePchOption(string s);
}
[NoReorderAttribute]
public enum JetBrains.ProjectModel.Properties.VCXProj.RuntimeCheckOption : Enum {
    public byte value__;
    public static RuntimeCheckOption BasicCheckNone;
    public static RuntimeCheckOption CheckStackFrame;
    public static RuntimeCheckOption CheckUninitVariables;
    public static RuntimeCheckOption BasicCheckAll;
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Properties.VCXProj.RuntimeCheckOptionEx : object {
    public static Pair`2[] KnownOptions;
    private static RuntimeCheckOptionEx();
    [ExtensionAttribute]
public static Nullable`1<RuntimeCheckOption> TryParseRuntimeCheckOption(string s);
    [ExtensionAttribute]
public static RuntimeCheckOption ParseVCXRuntimeCheckOption(string s);
}
[NoReorderAttribute]
public enum JetBrains.ProjectModel.Properties.VCXProj.RuntimeLibraryOption : Enum {
    public byte value__;
    public static RuntimeLibraryOption MultiThreaded;
    public static RuntimeLibraryOption MultiThreadedDebug;
    public static RuntimeLibraryOption MultiThreadedDLL;
    public static RuntimeLibraryOption MultiThreadedDebugDLL;
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Properties.VCXProj.RuntimeLibraryOptionEx : object {
    public static Pair`2[] KnownOptions;
    private static RuntimeLibraryOptionEx();
    [ExtensionAttribute]
public static Nullable`1<RuntimeLibraryOption> TryParseRuntimeLibraryOption(string s);
    [ExtensionAttribute]
public static RuntimeLibraryOption ParseRuntimeLibraryOption(string s);
}
[NoReorderAttribute]
public enum JetBrains.ProjectModel.Properties.VCXProj.TargetMachine : Enum {
    public byte value__;
    public static TargetMachine NotSet;
    public static TargetMachine X86;
    public static TargetMachine AM33;
    public static TargetMachine ARM;
    public static TargetMachine ARM64;
    public static TargetMachine EBC;
    public static TargetMachine IA64;
    public static TargetMachine M32R;
    public static TargetMachine MIPS;
    public static TargetMachine MIPS16;
    public static TargetMachine MIPSFPU;
    public static TargetMachine MIPSFPU16;
    public static TargetMachine MIPSR41XX;
    public static TargetMachine SH3;
    public static TargetMachine SH3DSP;
    public static TargetMachine SH4;
    public static TargetMachine SH5;
    public static TargetMachine THUMB;
    public static TargetMachine AMD64;
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Properties.VCXProj.TargetMachineEx : object {
    public static Pair`2[] KnownOptions;
    private static TargetMachineEx();
    [ExtensionAttribute]
public static Nullable`1<TargetMachine> TryParseTagMachineOptions(string s);
    [ExtensionAttribute]
public static TargetMachine ParseTargetMachineOptions(string s);
}
public enum JetBrains.ProjectModel.Properties.VCXProj.UseOfATL : Enum {
    public int value__;
    public static UseOfATL UseATLNotSet;
    public static UseOfATL UseATLStatic;
    public static UseOfATL UseATLDynamic;
}
public enum JetBrains.ProjectModel.Properties.VCXProj.UseOfMfc : Enum {
    public int value__;
    public static UseOfMfc UseMfcStdWin;
    public static UseOfMfc UseMfcStatic;
    public static UseOfMfc UseMfcDynamic;
}
public class JetBrains.ProjectModel.Properties.VCXProj.VCCompilerToolProperties : object {
    private static String[] Separators;
    private IVCProjectOrFileProperties myProperties;
    private IShellLocks myLocks;
    private VCXCompileAsManagedOptions myCompileAsManagedOptions;
    private VCXCompileAsOptions myCompileAs;
    private string myAdditionalOptions;
    private string myForcedIncludeFiles;
    private VirtualFileSystemPath[] myForcedIncludeFilePaths;
    private string myFullIncludePath;
    private VirtualFileSystemPath[] myFullIncludeFilePaths;
    private string myPreprocessorDefinitions;
    private string myUndefinePreprocessorDefinitions;
    private bool myDefaultCharIsUnsigned;
    private bool myTreatWCharTAsBuiltInType;
    private bool myRuntimeTypeInfo;
    private bool myDisableLanguageExtensions;
    private bool myOmitDefaultLibName;
    private PchOption myUsePrecompiledHeader;
    private string myPrecompiledHeaderThrough;
    private string myPrecompiledHeaderFile;
    private CppExceptionHandling myExceptionHandling;
    private RuntimeCheckOption myBasicRuntimeChecks;
    private RuntimeLibraryOption myRuntimeLibrary;
    private TargetMachine myTargetMachine;
    private DefaultCallingConvention myDefaultCallingConvention;
    private bool myConsumeWindowsRuntimeExtensionsWINRT;
    private CppLanguageStandard myCppLanguageStandard;
    private CLanguageStandard myCLanguageStandard;
    private bool myConformanceMode;
    private bool myConformantPreprocessor;
    public static string AFFECTING_PARSING_PROPERTY;
    [UsedImplicitlyAttribute]
public VCXCompileAsManagedOptions CompileAsManagedOptions { get; public set; }
    [UsedImplicitlyAttribute]
public VCXCompileAsOptions CompileAs { get; public set; }
    [UsedImplicitlyAttribute]
public string AdditionalOptions { get; public set; }
    [UsedImplicitlyAttribute]
public string ForcedIncludeFiles { get; public set; }
    [UsedImplicitlyAttribute]
public string FullIncludePath { get; public set; }
    [UsedImplicitlyAttribute]
public string PreprocessorDefinitions { get; public set; }
    [UsedImplicitlyAttribute]
public string UndefinePreprocessorDefinitions { get; public set; }
    [UsedImplicitlyAttribute]
public bool DefaultCharIsUnsigned { get; public set; }
    [UsedImplicitlyAttribute]
public bool TreatWChar_tAsBuiltInType { get; public set; }
    [UsedImplicitlyAttribute]
public bool RuntimeTypeInfo { get; public set; }
    [UsedImplicitlyAttribute]
public PchOption UsePrecompiledHeader { get; public set; }
    [UsedImplicitlyAttribute]
public string PrecompiledHeaderThrough { get; public set; }
    [UsedImplicitlyAttribute]
public string PrecompiledHeaderFile { get; public set; }
    [UsedImplicitlyAttribute]
public bool DisableLanguageExtensions { get; public set; }
    [UsedImplicitlyAttribute]
public bool OmitDefaultLibName { get; public set; }
    [UsedImplicitlyAttribute]
public RuntimeCheckOption BasicRuntimeChecks { get; public set; }
    [UsedImplicitlyAttribute]
public RuntimeLibraryOption RuntimeLibrary { get; public set; }
    [UsedImplicitlyAttribute]
public CppExceptionHandling ExceptionHandling { get; public set; }
    [UsedImplicitlyAttribute]
public TargetMachine TargetMachine { get; public set; }
    [UsedImplicitlyAttribute]
public DefaultCallingConvention DefaultCallingConvention { get; public set; }
    public bool ConsumeWindowsRuntimeExtensionsWINRT { get; public set; }
    public CppLanguageStandard CppLanguageStandard { get; public set; }
    public CLanguageStandard CLanguageStandard { get; public set; }
    [UsedImplicitlyAttribute]
public bool ConformanceMode { get; public set; }
    [UsedImplicitlyAttribute]
public bool ConformantPreprocessor { get; public set; }
    public VCCompilerToolProperties(IVCProjectOrFileProperties properties);
    public VCCompilerToolProperties(IVCProjectOrFileProperties properties, IShellLocks locks);
    private static VCCompilerToolProperties();
    private UndoUsingWriteLock UsingWriteLock();
    public void UpdateFrom(VCCompilerToolProperties otherConfiguration);
    public void WriteConfiguration(UnsafeWriter writer, IStringIntern stringIntern);
    public void ReadConfiguration(UnsafeReader reader, IStringIntern stringIntern);
    private static string ReadAndInternString(UnsafeReader reader, IStringIntern stringIntern);
    public void Dump(TextWriter to, int indent);
    public VCXCompileAsManagedOptions get_CompileAsManagedOptions();
    public void set_CompileAsManagedOptions(VCXCompileAsManagedOptions value);
    public VCXCompileAsOptions get_CompileAs();
    public void set_CompileAs(VCXCompileAsOptions value);
    public string get_AdditionalOptions();
    public void set_AdditionalOptions(string value);
    public string get_ForcedIncludeFiles();
    public void set_ForcedIncludeFiles(string value);
    public string get_FullIncludePath();
    public void set_FullIncludePath(string value);
    public VirtualFileSystemPath[] GetIncludeAbsolutePaths(VirtualFileSystemPath projectLocation);
    public VirtualFileSystemPath[] GetForcedIncludeAbsolutePaths(VirtualFileSystemPath projectLocation);
    public static VirtualFileSystemPath TryParseIncludePath(string path, VirtualFileSystemPath projectLocation);
    public static List`1<VirtualFileSystemPath> SplitIntoAbsoluteIncludePaths(string fullIncludePath, VirtualFileSystemPath projectLocation);
    public string get_PreprocessorDefinitions();
    public void set_PreprocessorDefinitions(string value);
    public string get_UndefinePreprocessorDefinitions();
    public void set_UndefinePreprocessorDefinitions(string value);
    public bool get_DefaultCharIsUnsigned();
    public void set_DefaultCharIsUnsigned(bool value);
    public bool get_TreatWChar_tAsBuiltInType();
    public void set_TreatWChar_tAsBuiltInType(bool value);
    public bool get_RuntimeTypeInfo();
    public void set_RuntimeTypeInfo(bool value);
    public PchOption get_UsePrecompiledHeader();
    public void set_UsePrecompiledHeader(PchOption value);
    public string get_PrecompiledHeaderThrough();
    public void set_PrecompiledHeaderThrough(string value);
    public string get_PrecompiledHeaderFile();
    public void set_PrecompiledHeaderFile(string value);
    public bool get_DisableLanguageExtensions();
    public void set_DisableLanguageExtensions(bool value);
    public bool get_OmitDefaultLibName();
    public void set_OmitDefaultLibName(bool value);
    public RuntimeCheckOption get_BasicRuntimeChecks();
    public void set_BasicRuntimeChecks(RuntimeCheckOption value);
    public RuntimeLibraryOption get_RuntimeLibrary();
    public void set_RuntimeLibrary(RuntimeLibraryOption value);
    public CppExceptionHandling get_ExceptionHandling();
    public void set_ExceptionHandling(CppExceptionHandling value);
    public TargetMachine get_TargetMachine();
    public void set_TargetMachine(TargetMachine value);
    public DefaultCallingConvention get_DefaultCallingConvention();
    public void set_DefaultCallingConvention(DefaultCallingConvention value);
    public bool get_ConsumeWindowsRuntimeExtensionsWINRT();
    public void set_ConsumeWindowsRuntimeExtensionsWINRT(bool value);
    public CppLanguageStandard get_CppLanguageStandard();
    public void set_CppLanguageStandard(CppLanguageStandard value);
    public CLanguageStandard get_CLanguageStandard();
    public void set_CLanguageStandard(CLanguageStandard value);
    public bool get_ConformanceMode();
    public void set_ConformanceMode(bool value);
    public bool get_ConformantPreprocessor();
    public void set_ConformantPreprocessor(bool value);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.Properties.VCXProj.VCCompilerToolPropertiesIntern : object {
    private static DataIntern ourIntern;
    public VCCompilerToolPropertiesIntern(Lifetime lifetime);
    private static VCCompilerToolPropertiesIntern();
    public static string Intern(string data);
    public static string Intern(StringView data);
}
public class JetBrains.ProjectModel.Properties.VCXProj.VCProjectFileProperties : ProjectFileProperties {
    private VCCompilerToolProperties myProperties;
    [CompilerGeneratedAttribute]
private bool <HasCompilerTool>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludedFromBuild>k__BackingField;
    public bool HasCompilerTool { get; public set; }
    public bool ExcludedFromBuild { get; public set; }
    public VCCompilerToolProperties Properties { get; }
    public VCProjectFileProperties(Guid ownerFactoryGuid);
    [CompilerGeneratedAttribute]
public bool get_HasCompilerTool();
    [CompilerGeneratedAttribute]
public void set_HasCompilerTool(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExcludedFromBuild();
    [CompilerGeneratedAttribute]
public void set_ExcludedFromBuild(bool value);
    public sealed virtual void OnPropertyChange(string name);
    public virtual void ReadFileProperties(UnsafeReader reader, IStringIntern stringIntern);
    public virtual void WriteProjectFileProperties(UnsafeWriter writer, IStringIntern stringIntern);
    public virtual void Dump(TextWriter to, DumpFlags flags);
    public virtual bool UpdatePropertiesFrom(IProjectFileProperties properties);
    public VCCompilerToolProperties get_Properties();
}
public class JetBrains.ProjectModel.Properties.VCXProj.VCUpdateDebuggerPropertiesCookie : object {
    [ThreadStaticAttribute]
private static bool ourUpdateDebuggerProperties;
    public static bool UpdateDebuggerProperties();
    public sealed virtual void Dispose();
}
public class JetBrains.ProjectModel.Properties.VCXProj.VCXBuildSettings : ManagedProjectBuildSettings {
    private string myAssemblyReferenceSearchPaths;
    public string AssemblyReferenceSearchPaths { get; public set; }
    public string get_AssemblyReferenceSearchPaths();
    public void set_AssemblyReferenceSearchPaths(string value);
    public virtual void Dump(TextWriter to, int indent);
}
[NoReorderAttribute]
public enum JetBrains.ProjectModel.Properties.VCXProj.VCXCompileAsManagedOptions : Enum {
    public byte value__;
    public static VCXCompileAsManagedOptions ManagedNotSet;
    public static VCXCompileAsManagedOptions ManagedAssembly;
    public static VCXCompileAsManagedOptions ManagedAssemblyPure;
    public static VCXCompileAsManagedOptions ManagedAssemblySafe;
    public static VCXCompileAsManagedOptions ManagedAssemblyOldSyntax;
    public static VCXCompileAsManagedOptions ManagedAssemblyNetCore;
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Properties.VCXProj.VCXCompileAsManagedOptionsEx : object {
    public static Pair`2[] KnownOptions;
    private static VCXCompileAsManagedOptionsEx();
    [ExtensionAttribute]
[PureAttribute]
public static bool IsManaged(VCXCompileAsManagedOptions options);
    [ExtensionAttribute]
public static Nullable`1<VCXCompileAsManagedOptions> TryParseVCXCompileAsManagedOptions(string s);
    [ExtensionAttribute]
public static VCXCompileAsManagedOptions ParseVCXCompileAsManagedOptions(string s);
}
[NoReorderAttribute]
public enum JetBrains.ProjectModel.Properties.VCXProj.VCXCompileAsOptions : Enum {
    public byte value__;
    public static VCXCompileAsOptions Default;
    public static VCXCompileAsOptions CompileAsC;
    public static VCXCompileAsOptions CompileAsCpp;
    public static VCXCompileAsOptions CompileAsHlsl;
    public static VCXCompileAsOptions CompileAsCppModule;
    public static VCXCompileAsOptions CompileAsCppModuleInternalPartition;
    public static VCXCompileAsOptions CompileAsHeaderUnit;
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Properties.VCXProj.VCXCompileAsOptionsEx : object {
    public static Pair`2[] KnownOptions;
    private static VCXCompileAsOptionsEx();
    [ExtensionAttribute]
public static Nullable`1<VCXCompileAsOptions> TryParseVCXCompileAsOptions(string s);
    [ExtensionAttribute]
public static VCXCompileAsOptions ParseVCXCompileAsOptions(string s);
}
public class JetBrains.ProjectModel.Properties.VCXProj.VcxDebuggerProperties : object {
    [CompilerGeneratedAttribute]
private string <LocalDebuggerCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalDebuggerCommandArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalDebuggerWorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalDebuggerEnvironment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LocalDebuggerMergeEnvironment>k__BackingField;
    public string LocalDebuggerCommand { get; public set; }
    public string LocalDebuggerCommandArguments { get; public set; }
    public string LocalDebuggerWorkingDirectory { get; public set; }
    public string LocalDebuggerEnvironment { get; public set; }
    public bool LocalDebuggerMergeEnvironment { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LocalDebuggerCommand();
    [CompilerGeneratedAttribute]
public void set_LocalDebuggerCommand(string value);
    [CompilerGeneratedAttribute]
public string get_LocalDebuggerCommandArguments();
    [CompilerGeneratedAttribute]
public void set_LocalDebuggerCommandArguments(string value);
    [CompilerGeneratedAttribute]
public string get_LocalDebuggerWorkingDirectory();
    [CompilerGeneratedAttribute]
public void set_LocalDebuggerWorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_LocalDebuggerEnvironment();
    [CompilerGeneratedAttribute]
public void set_LocalDebuggerEnvironment(string value);
    [CompilerGeneratedAttribute]
public bool get_LocalDebuggerMergeEnvironment();
    [CompilerGeneratedAttribute]
public void set_LocalDebuggerMergeEnvironment(bool value);
    protected bool Equals(VcxDebuggerProperties other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Properties.VCXProj.VcxDebuggerPropertiesEx : object {
    [ExtensionAttribute]
public static VcxDebuggerProperties ExportDebuggerProperties(VCXProjectConfiguration configuration);
    [ExtensionAttribute]
public static void ImportDebuggerProperties(VCXProjectConfiguration configuration, VcxDebuggerProperties properties);
}
public class JetBrains.ProjectModel.Properties.VCXProj.VCXProjectConfiguration : ManagedProjectConfigurationBase {
    private UseOfATL myUseOfAtl;
    private UseOfMfc myUseOfMfc;
    private string myPlatformToolset;
    private string myAndroidApiLevel;
    private VCCompilerToolProperties myProperties;
    private string myExecutablePath;
    private string myIncludePath;
    private string myFrameworkPath;
    private ClCommandLine[] myClCommandLines;
    private string myPublicIncludeDirectories;
    private bool myAllProjectIncludesArePublic;
    private VirtualFileSystemPath[] myIncludeFilePaths;
    private VirtualFileSystemPath[] myFrameworkFilePaths;
    private IDictionary`2<VirtualFileSystemPath, String[]> myFileToClCommandLineArgs;
    private ConfigurationTypes myConfigurationType;
    private string myLocalDebuggerCommand;
    private string myLocalDebuggerCommandArguments;
    private string myLocalDebuggerWorkingDirectory;
    private string myLocalDebuggerEnvironment;
    private bool myLocalDebuggerMergeEnvironment;
    [UsedImplicitlyAttribute]
public ConfigurationTypes ConfigurationType { get; public set; }
    [UsedImplicitlyAttribute]
public UseOfATL UseOfAtl { get; public set; }
    [UsedImplicitlyAttribute]
public UseOfMfc UseOfMfc { get; public set; }
    [UsedImplicitlyAttribute]
public string AndroidApiLevel { get; public set; }
    [UsedImplicitlyAttribute]
public string PlatformToolset { get; public set; }
    [UsedImplicitlyAttribute]
public string ExecutablePath { get; public set; }
    [UsedImplicitlyAttribute]
public string IncludePath { get; public set; }
    [UsedImplicitlyAttribute]
public string FrameworkPath { get; public set; }
    [UsedImplicitlyAttribute]
public ClCommandLine[] ClCommandLines { get; public set; }
    [UsedImplicitlyAttribute]
public string PublicIncludeDirectories { get; public set; }
    [UsedImplicitlyAttribute]
public bool AllProjectIncludesArePublic { get; public set; }
    [UsedImplicitlyAttribute]
public string LocalDebuggerCommand { get; public set; }
    [UsedImplicitlyAttribute]
public string LocalDebuggerCommandArguments { get; public set; }
    [UsedImplicitlyAttribute]
public string LocalDebuggerWorkingDirectory { get; public set; }
    [UsedImplicitlyAttribute]
public string LocalDebuggerEnvironment { get; public set; }
    [UsedImplicitlyAttribute]
public bool LocalDebuggerMergeEnvironment { get; public set; }
    public VCCompilerToolProperties Properties { get; }
    public sealed virtual void OnPropertyChange(string prop);
    public virtual bool UpdateFrom(IProjectConfiguration configuration);
    public virtual void WriteConfiguration(UnsafeWriter writer, IStringIntern stringIntern);
    public virtual void ReadConfiguration(UnsafeReader reader, IStringIntern stringIntern);
    public virtual void Dump(TextWriter to, int indent);
    public ConfigurationTypes get_ConfigurationType();
    public void set_ConfigurationType(ConfigurationTypes value);
    public UseOfATL get_UseOfAtl();
    public void set_UseOfAtl(UseOfATL value);
    public UseOfMfc get_UseOfMfc();
    public void set_UseOfMfc(UseOfMfc value);
    public string get_AndroidApiLevel();
    public void set_AndroidApiLevel(string value);
    public string get_PlatformToolset();
    public void set_PlatformToolset(string value);
    public string get_ExecutablePath();
    public void set_ExecutablePath(string value);
    public string get_IncludePath();
    public void set_IncludePath(string value);
    public string get_FrameworkPath();
    public void set_FrameworkPath(string value);
    public ClCommandLine[] get_ClCommandLines();
    public void set_ClCommandLines(ClCommandLine[] value);
    public string get_PublicIncludeDirectories();
    public void set_PublicIncludeDirectories(string value);
    public bool get_AllProjectIncludesArePublic();
    public void set_AllProjectIncludesArePublic(bool value);
    public string get_LocalDebuggerCommand();
    public void set_LocalDebuggerCommand(string value);
    public string get_LocalDebuggerCommandArguments();
    public void set_LocalDebuggerCommandArguments(string value);
    public string get_LocalDebuggerWorkingDirectory();
    public void set_LocalDebuggerWorkingDirectory(string value);
    public string get_LocalDebuggerEnvironment();
    public void set_LocalDebuggerEnvironment(string value);
    public bool get_LocalDebuggerMergeEnvironment();
    public void set_LocalDebuggerMergeEnvironment(bool value);
    public VCCompilerToolProperties get_Properties();
    public VirtualFileSystemPath[] GetIncludeAbsolutePaths(VirtualFileSystemPath projectLocation);
    public VirtualFileSystemPath[] GetFrameworkAbsolutePaths(VirtualFileSystemPath projectLocation);
    public String[] GetClCommandLineArgsFor(VirtualFileSystemPath file);
    private IDictionary`2<VirtualFileSystemPath, String[]> GetFileToClCommandLineArgsMap();
    private Dictionary`2<VirtualFileSystemPath, String[]> CalculateFileToClCommandLineArgs();
}
public class JetBrains.ProjectModel.Properties.VCXProj.VCXProjectProperties : ProjectPropertiesBase`1<VCXProjectConfiguration> {
    private IBuildSettings myBuildSettings;
    public IBuildSettings BuildSettings { get; }
    public ProjectLanguage DefaultLanguage { get; }
    public VCXProjectProperties(ICollection`1<Guid> projectTypeGuids, Guid factoryGuid, IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds);
    public VCXProjectProperties(Guid factoryGuid);
    public virtual IBuildSettings get_BuildSettings();
    public virtual void WriteProjectProperties(UnsafeWriter writer, IStringIntern stringIntern);
    public virtual void ReadProjectProperties(UnsafeReader reader, IStringIntern stringIntern);
    public virtual void Dump(TextWriter to, int indent);
    public virtual ProjectLanguage get_DefaultLanguage();
}
[ProjectModelExtensionAttribute("16")]
public class JetBrains.ProjectModel.Properties.VCXProj.VCXProjectPropertiesFactory : UnknownProjectPropertiesFactory {
    private static Guid VCXPropertyFactoryGuid;
    public static Guid VCXProjectTypeGuid;
    public Guid FactoryGuid { get; }
    private static VCXProjectPropertiesFactory();
    public virtual bool IsApplicable(ProjectPropertiesFactoryParameters parameters);
    public virtual bool IsKnownProjectTypeGuid(Guid projectTypeGuid);
    public virtual IProjectProperties CreateProjectProperties(ProjectPropertiesFactoryParameters parameters);
    public virtual Guid get_FactoryGuid();
    public virtual IProjectProperties Read(UnsafeReader reader, IStringIntern stringIntern);
    public static VCXProjectProperties CreateVCXProjectProperties(ICollection`1<Guid> flavours, IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds, TargetPlatformData targetPlatformData);
    public static VCXProjectProperties CreateVCXProjectProperties(IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds, Guid[] flavors);
    public static VCXProjectProperties CreateVCXProjectProperties(IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds);
}
public class JetBrains.ProjectModel.Properties.WebSite.WebSiteProjectProperties`1 : ProjectPropertiesBase`1<TProjectConfiguration> {
    private IBuildSettings myBuildSettings;
    private ProjectLanguage myDefaultLanguage;
    private ProjectKind myProjectKind;
    public IBuildSettings BuildSettings { get; }
    public ProjectLanguage DefaultLanguage { get; }
    public ProjectKind ProjectKind { get; }
    internal WebSiteProjectProperties`1(Guid factoryGuid, ProjectLanguage defaultLanguage);
    internal WebSiteProjectProperties`1(ICollection`1<Guid> projectTypeGuids, ProjectLanguage defaultLanguage, Guid guid, ProjectKind projectKind, IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds);
    private static IBuildSettings CreateBuildSettings(ProjectLanguage defaultLanguage);
    public virtual IBuildSettings get_BuildSettings();
    public virtual ProjectLanguage get_DefaultLanguage();
    public virtual ProjectKind get_ProjectKind();
    public virtual void WriteProjectProperties(UnsafeWriter writer, IStringIntern stringIntern);
    public virtual void ReadProjectProperties(UnsafeReader reader, IStringIntern stringIntern);
    public virtual bool UpdateFrom(IProjectProperties properties);
    protected virtual Func`3<IProjectConfiguration, IProjectConfiguration, bool> CreateCustomUpdateConfigurationFunc(IProjectProperties properties);
    protected virtual bool UpdateBuildSettings(IProjectProperties properties);
    public virtual void Dump(TextWriter to, int indent);
}
[ProjectModelExtensionAttribute("16")]
public class JetBrains.ProjectModel.Properties.WebSite.WebSiteProjectPropertiesFactory : object {
    public static Guid FACTORY_GUID;
    public static Guid ProjectTypeGuid;
    public Guid FactoryGuid { get; }
    private static WebSiteProjectPropertiesFactory();
    public sealed virtual bool IsApplicable(ProjectPropertiesFactoryParameters parameters);
    public sealed virtual bool IsKnownProjectTypeGuid(Guid projectTypeGuid);
    public sealed virtual IProjectProperties CreateProjectProperties(ProjectPropertiesFactoryParameters parameters);
    public sealed virtual Guid get_FactoryGuid();
    public sealed virtual IProjectProperties Read(UnsafeReader reader, IStringIntern stringIntern);
    public static IProjectProperties CreateWebSiteProjectProperties(IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds, ProjectLanguage defaultLanguage, ICollection`1<Guid> projectTypeGuids);
    public static IProjectProperties CreateWebSiteProjectPropertiesForTests(IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkIds, ProjectLanguage defaultLanguage, ICollection`1<Guid> flavours);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ProjectModel.PropertiesExtender.AdditionalItemsPropertiesExtenderProvider : object {
    private Lifetime myLifetime;
    private ProjectSettingsStorageComponent mySettingsStorage;
    private IShellLocks myLocks;
    public AdditionalItemsPropertiesExtenderProvider(Lifetime lifetime, ProjectSettingsStorageComponent settingsStorage, IShellLocks locks);
    public sealed virtual bool CanExtend(IProjectItem projectItem, PropertiesLocation location);
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.PropertiesExtender.AdditionalItemsPropertiesExtenderProvider/<GetPropertyDescriptors>d__5")]
public sealed virtual IEnumerable`1<PropertyDescriptor> GetPropertyDescriptors(IProjectItem projectItem);
}
[ActionAttribute("JetBrains.ProjectModel.Resources.Strings", "EditProjectItemPropertiesActionText")]
public class JetBrains.ProjectModel.PropertiesExtender.EditProjectItemPropertiesAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.PropertiesExtender.EditProjectItemPropertiesAction/<GetPropertyDescriptors>d__1")]
public IEnumerable`1<IPropertyDescriptorEditor> GetPropertyDescriptors(IDataContext context);
    private IList`1<object> PrepareMenuItems(IDataContext context);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public interface JetBrains.ProjectModel.PropertiesExtender.IEnumPropertyDescriptorEditor {
    [NotNullAttribute]
public IReadOnlyList`1<object> PossibleValues { get; }
    [CanBeNullAttribute]
public abstract virtual object GetCurrentValue();
    public abstract virtual IReadOnlyList`1<object> get_PossibleValues();
    public abstract virtual RichText GetValueText(object value);
}
public interface JetBrains.ProjectModel.PropertiesExtender.IPropertiesExtenderProvider {
    public abstract virtual bool CanExtend(IProjectItem projectItem, PropertiesLocation location);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<PropertyDescriptor> GetPropertyDescriptors(IProjectItem projectItem);
}
public interface JetBrains.ProjectModel.PropertiesExtender.IPropertyDescriptorEditor {
    public IProjectItem ProjectItem { get; }
    public PropertyDescriptor Descriptor { get; }
    public abstract virtual IProjectItem get_ProjectItem();
    public abstract virtual PropertyDescriptor get_Descriptor();
}
public interface JetBrains.ProjectModel.PropertiesExtender.IUIPropertyDescriptorEditor {
    public abstract virtual void RunEditor();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ProjectModel.PropertiesExtender.NamespaceFolderPropertiesExtenderProvider : object {
    private Lifetime myLifetime;
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private NamespaceFolderProperty myNamespaceFolderProperty;
    public NamespaceFolderPropertiesExtenderProvider(Lifetime lifetime, IShellLocks locks, NamespaceFolderProperty namespaceFolderProperty);
    public sealed virtual bool CanExtend(IProjectItem projectItem, PropertiesLocation location);
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.PropertiesExtender.NamespaceFolderPropertiesExtenderProvider/<GetPropertyDescriptors>d__5")]
public sealed virtual IEnumerable`1<PropertyDescriptor> GetPropertyDescriptors(IProjectItem projectItem);
    [CompilerGeneratedAttribute]
private bool <GetPropertyDescriptors>b__5_0(IProjectFolder folder);
    [CompilerGeneratedAttribute]
private void <GetPropertyDescriptors>b__5_1(IProjectFolder folder, bool value);
}
public abstract class JetBrains.ProjectModel.PropertiesExtender.ProjectPropertiesExtenderProviderBase : object {
    protected Lifetime myLifetime;
    [CompilerGeneratedAttribute]
private IShellLocks <Locks>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingsStore <SettingsStore>k__BackingField;
    [NotNullAttribute]
protected IShellLocks Locks { get; }
    [NotNullAttribute]
protected ISettingsStore SettingsStore { get; }
    protected ProjectPropertiesExtenderProviderBase(Lifetime lifetime, IShellLocks locks, ISettingsStore settingsStore);
    [CompilerGeneratedAttribute]
protected IShellLocks get_Locks();
    [CompilerGeneratedAttribute]
protected ISettingsStore get_SettingsStore();
    public sealed virtual bool CanExtend(IProjectItem projectItem, PropertiesLocation location);
    public sealed virtual IEnumerable`1<PropertyDescriptor> GetPropertyDescriptors(IProjectItem projectItem);
    protected abstract virtual IEnumerable`1<PropertyDescriptor> GetProjectPropertyDescriptors(IProject project);
    protected virtual bool IsSuitableProject(IProject project);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.PropertiesExtender.PropertiesExtenderUtils : object {
    [ExtensionAttribute]
public static void ExecuteReadLockMaybeBreakingTransactionIfUnlucky(IShellLocks locks, string name, Action action);
    [ExtensionAttribute]
public static T ExecuteReadLockMaybeBreakingTransactionIfUnlucky(IShellLocks locks, string name, Func`1<T> func);
}
public enum JetBrains.ProjectModel.PropertiesExtender.PropertiesLocation : Enum {
    public int value__;
    public static PropertiesLocation POPUP_MENU;
    public static PropertiesLocation TOOLWINDOW;
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ProjectModel.PropertiesExtender.PropertyDescriptorEditorFactory : object {
    [CanBeNullAttribute]
public virtual IPropertyDescriptorEditor TryCreateEditor(IProjectItem projectItem, PropertyDescriptor propertyDescriptor);
    protected virtual IPropertyDescriptorEditor TryCreateOtherEditor(IProjectItem projectItem, PropertyDescriptor propertyDescriptor);
    private IUIPropertyDescriptorEditor TryCreateFromDefaultUiEditor(IProjectItem projectItem, PropertyDescriptor propertyDescriptor);
    protected virtual IEnumPropertyDescriptorEditor TryCreateEnumEditor(IProjectItem projectItem, PropertyDescriptor propertyDescriptor);
}
public class JetBrains.ProjectModel.PropertiesExtender.ReSharperPropertyDescriptor`2 : SimplePropertyDescriptor`1<T> {
    [CanBeNullAttribute]
protected TProjectItem myProjectItem;
    [CanBeNullAttribute]
private Func`2<TProjectItem, T> myGetValueAction;
    [CanBeNullAttribute]
private Action`2<TProjectItem, T> mySetValueAction;
    public ReSharperPropertyDescriptor`2(Lifetime lifetime, IShellLocks locks, string name, Attribute[] attrs, TProjectItem projectItem, Func`2<TProjectItem, T> getValueAction, Action`2<TProjectItem, T> setValueAction);
    public ReSharperPropertyDescriptor`2(Lifetime lifetime, IShellLocks locks, string name, T defaultValue, string displayName, string description, TProjectItem projectItem, Func`2<TProjectItem, T> getValueAction, Action`2<TProjectItem, T> setValueAction);
    public ReSharperPropertyDescriptor`2(Lifetime lifetime, IShellLocks locks, string name, T defaultValue, string displayName, string description, Type converterType, TProjectItem projectItem, Func`2<TProjectItem, T> getValueAction, Action`2<TProjectItem, T> setValueAction);
    protected virtual T GetValue();
    protected virtual void SetValue(T value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0();
}
public class JetBrains.ProjectModel.PropertiesExtender.SimplePropertyDescriptor`1 : PropertyDescriptor {
    public static string CategoryName;
    [NotNullAttribute]
private IShellLocks myLocks;
    [CanBeNullAttribute]
private Func`1<T> myGetValueAction;
    [CanBeNullAttribute]
private Action`1<T> mySetValueAction;
    private bool myIsReadOnly;
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public SimplePropertyDescriptor`1(Lifetime lifetime, IShellLocks locks, string name, Attribute[] attrs, Func`1<T> getValueAction, Action`1<T> setValueAction);
    public SimplePropertyDescriptor`1(Lifetime lifetime, IShellLocks locks, string name, T defaultValue, string displayName, string description, string categoryName, Func`1<T> getValueAction, Action`1<T> setValueAction);
    public SimplePropertyDescriptor`1(Lifetime lifetime, IShellLocks locks, string name, T defaultValue, string displayName, string description, string categoryName, Type converterType, Func`1<T> getValueAction, Action`1<T> setValueAction);
    [NotNullAttribute]
public static Attribute[] CreateAttributes(T defaultValue, string displayName, string description, string categoryName, Type converterType, Attribute[] moreAttributes);
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    protected virtual T GetValue();
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    protected virtual void SetValue(T value);
    public virtual bool ShouldSerializeValue(object component);
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public SimplePropertyDescriptor`1<T> SetReadOnly(bool isReadOnly);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0();
}
public class JetBrains.ProjectModel.PropertyChangeInfo : object {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <OldValue>k__BackingField;
    [CompilerGeneratedAttribute]
private object <NewValue>k__BackingField;
    public string PropertyName { get; }
    public object OldValue { get; }
    public object NewValue { get; }
    public PropertyChangeInfo(string propertyName, object oldValue, object newValue);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public object get_OldValue();
    [CompilerGeneratedAttribute]
public object get_NewValue();
    public PropertyChangeInfo MergeWith(PropertyChangeInfo otherInfo);
}
public class JetBrains.ProjectModel.PropertyChangeSupport : object {
    private Dictionary`2<string, PropertyChangeInfo> myTypeToPropertyChangeMap;
    private static PropertyChangeInfo[] EMPTY;
    private static PropertyChangeSupport();
    public void OnPropertyChanged(string propertyType, object oldValue, object newValue);
    public bool IsPropertyChanged(string propertyName);
    public object GetOldValue(string propertyName);
    public object GetNewValue(string propertyName);
    private PropertyChangeInfo GetPropertyChangeInfo(string propertyType);
    public PropertyChangeSupport Merge(PropertyChangeSupport other);
    public ICollection`1<PropertyChangeInfo> GetChangedProperties();
}
public class JetBrains.ProjectModel.Propoerties.CSharpProjectConfiguration : ManagedProjectConfigurationBase {
    private bool myAllowUnsafeCode;
    private UInt32 myBaseAddress;
    private UInt32 myFileAlignment;
    private bool myCheckForOverflowUnderflow;
    private bool myDebugSymbols;
    private bool myIncrementalBuild;
    private string myWarningsAsErrors;
    private string myInterceptorsPreviewNamespaces;
    private CSharpLanguageVersion myLanguageVersion;
    private NullableContextKind myNullableContextKind;
    private ImplicitUsingsKind myImplicitUsingsKind;
    public bool AllowUnsafeCode { get; public set; }
    public UInt32 BaseAddress { get; public set; }
    public UInt32 FileAlignment { get; public set; }
    public bool CheckForOverflowUnderflow { get; public set; }
    public bool DebugSymbols { get; public set; }
    public bool IncrementalBuild { get; public set; }
    public string WarningsAsErrors { get; public set; }
    public string InterceptorsPreviewNamespaces { get; public set; }
    public string WarningsNotAsErrors { get; public set; }
    public CSharpLanguageVersion LanguageVersion { get; public set; }
    public NullableContextKind NullableContextKind { get; public set; }
    public ImplicitUsingsKind ImplicitUsingsKind { get; public set; }
    public sealed virtual bool get_AllowUnsafeCode();
    public sealed virtual void set_AllowUnsafeCode(bool value);
    public sealed virtual UInt32 get_BaseAddress();
    public sealed virtual void set_BaseAddress(UInt32 value);
    public sealed virtual UInt32 get_FileAlignment();
    public sealed virtual void set_FileAlignment(UInt32 value);
    public sealed virtual bool get_CheckForOverflowUnderflow();
    public sealed virtual void set_CheckForOverflowUnderflow(bool value);
    public sealed virtual bool get_DebugSymbols();
    public sealed virtual void set_DebugSymbols(bool value);
    public sealed virtual bool get_IncrementalBuild();
    public sealed virtual void set_IncrementalBuild(bool value);
    public sealed virtual string get_WarningsAsErrors();
    public sealed virtual void set_WarningsAsErrors(string value);
    public sealed virtual string get_InterceptorsPreviewNamespaces();
    public sealed virtual void set_InterceptorsPreviewNamespaces(string value);
    public sealed virtual string get_WarningsNotAsErrors();
    public sealed virtual void set_WarningsNotAsErrors(string value);
    public sealed virtual CSharpLanguageVersion get_LanguageVersion();
    public sealed virtual void set_LanguageVersion(CSharpLanguageVersion value);
    public sealed virtual NullableContextKind get_NullableContextKind();
    public sealed virtual void set_NullableContextKind(NullableContextKind value);
    public sealed virtual ImplicitUsingsKind get_ImplicitUsingsKind();
    public sealed virtual void set_ImplicitUsingsKind(ImplicitUsingsKind value);
    public sealed virtual string GetCompilerOptionsCommandLine(VirtualFileSystemPath projectDir);
    public virtual void WriteConfiguration(UnsafeWriter writer, IStringIntern stringIntern);
    public virtual void ReadConfiguration(UnsafeReader reader, IStringIntern stringIntern);
    public virtual bool UpdateFrom(IProjectConfiguration configuration);
    public virtual void Dump(TextWriter to, int indent);
}
[ProjectFileTypeDefinitionAttribute("Proto")]
public class JetBrains.ProjectModel.ProtobufProjectFileType : KnownProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static ProtobufProjectFileType <Instance>k__BackingField;
    public static string PROTO_EXTENSION;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static ProtobufProjectFileType Instance { get; private set; }
    protected ProtobufProjectFileType(string name);
    protected ProtobufProjectFileType(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static ProtobufProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(ProtobufProjectFileType value);
}
[ProjectFileTypeDefinitionAttribute("RAZOR_COMPONENT")]
public class JetBrains.ProjectModel.RazorComponentProjectFileType : RazorCSharpProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static RazorComponentProjectFileType <Instance>k__BackingField;
    public static string RazorExtension;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static RazorComponentProjectFileType Instance { get; private set; }
    protected RazorComponentProjectFileType(string name);
    protected RazorComponentProjectFileType(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static RazorComponentProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(RazorComponentProjectFileType value);
}
[ProjectFileTypeDefinitionAttribute("RAZOR_CSHARP")]
public class JetBrains.ProjectModel.RazorCSharpProjectFileType : RazorProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static RazorCSharpProjectFileType <Instance>k__BackingField;
    public static string RazorCSharpExtension;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static RazorCSharpProjectFileType Instance { get; private set; }
    protected RazorCSharpProjectFileType(string name);
    protected RazorCSharpProjectFileType(string name, string presentableName);
    protected RazorCSharpProjectFileType(string name, string presentableName, IEnumerable`1<string> extensions);
    [CompilerGeneratedAttribute]
public static RazorCSharpProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(RazorCSharpProjectFileType value);
}
[ProjectFileTypeDefinitionAttribute("RAZOR")]
public class JetBrains.ProjectModel.RazorProjectFileType : HtmlProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static RazorProjectFileType <Instance>k__BackingField;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static RazorProjectFileType Instance { get; private set; }
    protected RazorProjectFileType(string name);
    protected RazorProjectFileType(string name, string presentableName);
    protected RazorProjectFileType(string name, string presentableName, IEnumerable`1<string> extensions);
    [CompilerGeneratedAttribute]
public static RazorProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(RazorProjectFileType value);
}
public class JetBrains.ProjectModel.RecursiveProjectModelChangeDeltaVisitor : object {
    [CanBeNullAttribute]
private Action`1<ProjectModelChange> myFWithDelta;
    [CanBeNullAttribute]
private Action`1<ProjectItemChange> myFWithItemDelta;
    public RecursiveProjectModelChangeDeltaVisitor(Action`1<ProjectModelChange> FWithDelta, Action`1<ProjectItemChange> FWithItemDelta);
    public virtual void VisitDelta(ProjectModelChange changeDelta);
    public virtual void VisitItemDelta(ProjectItemChange change);
    public virtual void VisitProjectReferenceDelta(ProjectReferenceChange change);
    public virtual void VisitSolutionDelta(SolutionChange change);
    public virtual void VisitAssemblyDelta(AssemblyChange assemblyChange);
    public virtual void VisitAssemblyFileDelta(AssemblyFileChange change);
    public virtual void VisitSdkReferenceDelta(ProjectSdkReferenceChange projectSdkReferenceChange);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.RecursiveProjectModelChangeDeltaVisitorEx : object {
    [ExtensionAttribute]
public static void VisitDeltasRecursively(ProjectModelChange change, Action`1<ProjectModelChange> FWithDelta);
    [ExtensionAttribute]
public static void VisitItemDeltasRecursively(ProjectModelChange change, Action`1<ProjectItemChange> FWithItemDelta);
}
public abstract class JetBrains.ProjectModel.RecursiveProjectVisitor : ProjectVisitor {
    private bool myVisitReferences;
    public bool ProcessingIsFinished { get; }
    protected RecursiveProjectVisitor(bool visitReferences);
    public virtual void VisitSolution(ISolution solution);
    public virtual void VisitProjectFolder(IProjectFolder projectFolder);
    public virtual void VisitProject(IProject project);
    public virtual bool get_ProcessingIsFinished();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.ReferencedAssembliesService : object {
    private ISolution mySolution;
    private IModuleReferencesResolveStore myModuleReferencesResolveStore;
    private Nullable`1<LogWithLevel> myLogger;
    private static IEqualityComparer`1<AssemblyNameInfo> ourAssemblyNameComparer;
    private static Key`1<Dictionary`2<TargetFrameworkId, JetHashSet`1<AssemblyNameInfo>>> ourReferencedAssembliesHashKey;
    public static Key`1<AssemblyNameInfo> ReferencedAssemlyNameInfoKey;
    private static object ourReferencedAssembliesHashLock;
    public ReferencedAssembliesService(Lifetime lifetime, ISolution solution, IModuleReferencesResolveStore moduleReferencesResolveStore, ChangeManager changeManager, ILogger logger);
    private static ReferencedAssembliesService();
    private void TrackAssemblyReferences(ChangeEventArgs args);
    [NotNullAttribute]
[ItemNotNullAttribute]
[ObsoleteAttribute]
public static ICollection`1<ProjectModelChange> TryGetAssemblyReferenceChanges(ProjectModelChange projectModelChange, ICollection`1<AssemblyNameInfo> assemblyInfos, ILogger logger);
    [NotNullAttribute]
[ItemNotNullAttribute]
public static ICollection`1<ProjectModelChange> TryGetAssemblyReferenceChanges(ProjectModelChange projectModelChange, ICollection`1<AssemblyNameInfo> assemblyInfos, Nullable`1<LogWithLevel> logger);
    public static bool IsProjectReferencingAssemblyByName(IProject project, TargetFrameworkId targetFrameworkId, AssemblyNameInfo targetAssembly, AssemblyNameInfo& referencedAssembly);
    private static Dictionary`2<TargetFrameworkId, JetHashSet`1<AssemblyNameInfo>> GetAssemblyNamesInfo(IProject project, Nullable`1<LogWithLevel> logger);
    private static AssemblyNameInfo GetAssemblyNameInfoForReference(IProjectToModuleReference projectToModuleReference, IModuleReferencesResolveStore moduleReferencesResolveStore, Nullable`1<LogWithLevel> logger);
    [ContractAnnotationAttribute("=> true, referencedAssembly:notnull; => false, referencedAssembly:null")]
public static bool IsProjectReferencingAssemblyByName(IProjectElement projectElement, TargetFrameworkId targetFrameworkId, AssemblyNameInfo targetAssembly, AssemblyNameInfo& referencedAssembly);
}
public class JetBrains.ProjectModel.References.Impl.ProjectToPackageReferenceImpl : UserDataHolder {
    [CompilerGeneratedAttribute]
private IProject <OwnerModule>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFrameworkId>k__BackingField;
    [CompilerGeneratedAttribute]
private INugetReferenceSpec <ReferenceTargetSpec>k__BackingField;
    private ISolution mySolution;
    [NotNullAttribute]
public IProject OwnerModule { get; }
    public TargetFrameworkId TargetFrameworkId { get; }
    public INugetReferenceSpec ReferenceTargetSpec { get; }
    public string Name { get; }
    public Type MarshallerType { get; }
    public ProjectToPackageReferenceImpl(IProject ownerModule, TargetFrameworkId targetFrameworkId, INugetReferenceSpec spec, ISolution solution);
    [CompilerGeneratedAttribute]
public sealed virtual IProject get_OwnerModule();
    [CompilerGeneratedAttribute]
public sealed virtual TargetFrameworkId get_TargetFrameworkId();
    [CompilerGeneratedAttribute]
public sealed virtual INugetReferenceSpec get_ReferenceTargetSpec();
    public sealed virtual void Accept(ProjectVisitor projectVisitor);
    public sealed virtual ISolution GetSolution();
    public sealed virtual object GetProperty(Key propertyName);
    public sealed virtual void SetProperty(Key propertyName, object propertyValue);
    public sealed virtual string get_Name();
    public sealed virtual bool IsValid();
    public sealed virtual bool IsValidAndAlive();
    public sealed virtual Type get_MarshallerType();
    public sealed virtual IProject GetProject();
    public sealed virtual string GetPersistentID();
    public virtual string ToString();
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.References.Impl.SdkReferenceFactory : object {
    private SdkReferencesManager mySDKReferencesManager;
    public SdkReferencesManager SdkReferencesManager { get; }
    public SdkReferenceFactory(Lifetime lifetime, SdkReferencesManager sdkReferencesManager, IViewableProjectsCollection projects);
    public SdkReferencesManager get_SdkReferencesManager();
    public IProjectToSdkReference CreateSdkReference(IProject project, SdkModuleInfo sdkModuleInfo, TargetFrameworkId targetFrameworkId);
    public void OnSdkReferenceRemoved(IProjectToSdkReference projectToSdkReference);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(Lifetime pLifetime, IProject project);
}
public class JetBrains.ProjectModel.References.Impl.SdkReferenceImpl : UserDataHolder {
    private IProject myProject;
    private ICollection`1<IProjectToAssemblyReference> myNestedAssemblyReferences;
    private SdkReferenceInfo mySdkReferenceInfo;
    private IModuleReferenceResolveContext myModuleReferenceResolveContext;
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFrameworkId>k__BackingField;
    public SdkReferenceInfo SdkReferenceInfo { get; }
    public IProject Project { get; }
    public ICollection`1<IProjectToAssemblyReference> NestedAssemblyReferences { get; }
    public string Name { get; }
    public Type MarshallerType { get; }
    public IProject OwnerModule { get; }
    public IModuleReferenceResolveContext ModuleReferenceResolveContext { get; }
    public bool CopyLocal { get; public set; }
    public bool IsHidden { get; public set; }
    public bool EmbedInteropTypes { get; public set; }
    public string AliasList { get; public set; }
    public bool AutoReferenced { get; public set; }
    public bool IsOutputAssembly { get; public set; }
    public bool ReferenceOutputAssembly { get; public set; }
    public TargetFrameworkId TargetFrameworkId { get; }
    public IProjectElementOrigin Origin { get; public set; }
    internal SdkReferenceImpl(IProject project, ICollection`1<IProjectToAssemblyReference> nestedAssemblyReferences, SdkReferenceInfo sdkReferenceInfo, TargetFrameworkId targetFrameworkId);
    public sealed virtual SdkReferenceInfo get_SdkReferenceInfo();
    public IProject get_Project();
    public sealed virtual ICollection`1<IProjectToAssemblyReference> get_NestedAssemblyReferences();
    public sealed virtual void Accept(ProjectVisitor projectVisitor);
    public sealed virtual ISolution GetSolution();
    public sealed virtual object GetProperty(Key propertyName);
    public sealed virtual void SetProperty(Key propertyName, object propertyValue);
    public sealed virtual string get_Name();
    public sealed virtual bool IsValid();
    public sealed virtual bool IsValidAndAlive();
    public sealed virtual Type get_MarshallerType();
    public sealed virtual bool IsReallyValid();
    public sealed virtual IProject GetProject();
    public sealed virtual string GetPersistentID();
    public sealed virtual void Dispose();
    public sealed virtual IProject get_OwnerModule();
    public IModuleReferenceResolveContext get_ModuleReferenceResolveContext();
    public sealed virtual bool get_CopyLocal();
    public sealed virtual void set_CopyLocal(bool value);
    public sealed virtual bool get_IsHidden();
    public sealed virtual void set_IsHidden(bool value);
    public sealed virtual bool get_EmbedInteropTypes();
    public sealed virtual void set_EmbedInteropTypes(bool value);
    public sealed virtual string get_AliasList();
    public sealed virtual void set_AliasList(string value);
    public sealed virtual bool get_AutoReferenced();
    public sealed virtual void set_AutoReferenced(bool value);
    public sealed virtual bool get_IsOutputAssembly();
    public sealed virtual void set_IsOutputAssembly(bool value);
    public sealed virtual bool get_ReferenceOutputAssembly();
    public sealed virtual void set_ReferenceOutputAssembly(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual TargetFrameworkId get_TargetFrameworkId();
    public sealed virtual IProjectElementOrigin get_Origin();
    public sealed virtual void set_Origin(IProjectElementOrigin value);
    public void Dump(TextWriter textWriter, int indent);
}
public interface JetBrains.ProjectModel.References.IProjectToModuleWithSourcesReference {
}
public interface JetBrains.ProjectModel.References.IProjectToSdkReference {
    public ICollection`1<IProjectToAssemblyReference> NestedAssemblyReferences { get; }
    public SdkReferenceInfo SdkReferenceInfo { get; }
    public abstract virtual ICollection`1<IProjectToAssemblyReference> get_NestedAssemblyReferences();
    public abstract virtual SdkReferenceInfo get_SdkReferenceInfo();
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ProjectModel.References.NuGetPackageManager : object {
    public virtual void UninstallPackage(IProjectSearchDescriptor ownerModule, string id);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.References.SdkModuleUtil : object {
    [CanBeNullAttribute]
public static SdkModuleInfo GetSdkModuleInfoFromManifest(VirtualFileSystemPath sdkManifestDirectoryPath, string targetConfiguration, string targetArchitecture);
    [ExtensionAttribute]
public static bool IsMetroStyleSdk(ISdkModule sdkModule);
    [ExtensionAttribute]
public static bool IsWindows8Platform(TargetPlatformData data);
    [CanBeNullAttribute]
public static IProjectReferenceDescriptor GetWindowsSdkReference(TargetPlatformData targetPlatformData, TargetFrameworkId targetFrameworkId);
    [CanBeNullAttribute]
public static IProjectReferenceDescriptor GetWindowsSdkReference(TargetPlatformData targetPlatformData, TargetFrameworkId targetFrameworkId, VirtualFileSystemPath sdkPath);
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.References.SdkReferencesManager : object {
    private SolutionElement mySolution;
    private ILogger myLogger;
    private Dictionary`2<string, ISdkModule> mySdkModules;
    private OneToSetMap`2<ISdkModule, IProjectToSdkReference> mySdkModuleToClientsMap;
    private Dictionary`2<IProjectToSdkReference, ISdkModule> myReferenceToModuleMap;
    private Dictionary`2<IProjectToModuleReference, IProjectToSdkReference> myNestedReferenceToContainerMap;
    public SdkReferencesManager(SolutionElement solution, Lifetime lifetime, ILogger logger);
    public void InitializeSdkModule(SdkReferenceFactory sdkReferenceFactory, SdkModuleInfo sdkModuleInfo, SolutionElement solution, TargetPlatformData targetPlatfromData, SdkReferenceImpl sdkReference);
    [CanBeNullAttribute]
public ISdkModule GetSdkModule(string identity);
    [CanBeNullAttribute]
public ISdkModule ResolveSdkReference(IProjectToSdkReference reference);
    public ICollection`1<IProjectToSdkReference> GetAllReferencesToSdkModule(ISdkModule targetSdkModule);
    private ISdkModule CreateAndOpenSdkModule(SdkReferenceFactory sdkReferenceFactory, SdkModuleInfo sdkModuleInfo, SolutionElement solution, TargetPlatformData targetPlatfromData);
    protected virtual void FixSdkModuleReferences(SdkReferenceFactory sdkReferenceFactory, SdkModuleImpl referenceOwner, SolutionElement solutionElement);
    private static void LoadItemsHierarchy(IProjectFolder parent, SdkModuleInfo sdkModuleInfo);
    [CanBeNullAttribute]
public IProjectToSdkReference GetContainingSdkReference(IProjectToModuleReference projectToModuleReference);
    private void IncrementReferencesCount(ISdkModule sdkModule, IProjectToSdkReference sdkReference);
    private void DecrementReferencesCount(IProjectToSdkReference sdkReference, ISdkModule sdkModule);
    public void Dump(TextWriter textWriter);
    public bool IsNetCoreNestedModule(IModule module);
    public void OnSdkReferenceRemoved(IProjectToSdkReference sdkReference);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0();
}
public class JetBrains.ProjectModel.References.TargetFrameworkReferences : object {
    private Dictionary`2<TargetFrameworkId, ProjectTargetFrameworkScope> myTargetFrameworks;
    private IProject myProject;
    private AssemblyInfoDatabase myAssemblyInfoDatabase;
    public int Count { get; }
    internal ICollection`1<KeyValuePair`2<TargetFrameworkId, ProjectTargetFrameworkScope>> TargetFrameworks { get; }
    public TargetFrameworkReferences(Lifetime lifetime, IProject project, AssemblyInfoDatabase assemblyInfoDatabase);
    private void AssertNotDisposed();
    public void AddReference(IProjectToModuleReference reference);
    internal void RemoveReference(IProjectToModuleReference reference);
    public IReadOnlyCollection`1<IProjectToModuleReference> GetReferences(TargetFrameworkId targetFrameworkId);
    public int get_Count();
    internal ICollection`1<KeyValuePair`2<TargetFrameworkId, ProjectTargetFrameworkScope>> get_TargetFrameworks();
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.References.TargetFrameworkReferences/<GetAllReferences>d__12")]
public IEnumerable`1<IProjectToModuleReference> GetAllReferences();
    public IEnumerable`1<ProjectTargetFrameworkScope> GetAllProjectScopes();
    [NotNullAttribute]
internal ProjectTargetFrameworkScope GetOrCreateScope(TargetFrameworkId targetFrameworkId);
    internal void Dump(TextWriter to);
    [CanBeNullAttribute]
public ProjectTargetFrameworkScope GetScope(TargetFrameworkId targetFrameworkId);
}
[ProjectFileTypeDefinitionAttribute("RESJSON")]
public class JetBrains.ProjectModel.ResJsonProjectFileType : KnownProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static ResJsonProjectFileType <Instance>k__BackingField;
    public static string RESJSON_EXTENSION;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static ResJsonProjectFileType Instance { get; private set; }
    protected ResJsonProjectFileType(string name);
    protected ResJsonProjectFileType(string name, string presentableName);
    protected ResJsonProjectFileType(string name, string presentableName, IEnumerable`1<string> strings);
    [CompilerGeneratedAttribute]
public static ResJsonProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(ResJsonProjectFileType value);
}
public static class JetBrains.ProjectModel.Resolver.AssemblyNameUtil : object {
    [ObsoleteAttribute("Use overload with IAssemblyLocation")]
[CanBeNullAttribute]
public static AssemblyNameInfo GetAssemblyNameInfo(VirtualFileSystemPath path, ISolution solution);
    [CanBeNullAttribute]
public static AssemblyNameInfo GetAssemblyNameInfo(IAssemblyLocation assemblyLocation, ISolution solution);
    [ObsoleteAttribute("Use overload with IAssemblyLocation")]
public static Pair`2<AssemblyNameInfo, AssemblyId> GetAssemblyNameInfoAndId(VirtualFileSystemPath path, ISolution solution);
    public static Pair`2<AssemblyNameInfo, AssemblyId> GetAssemblyNameInfoAndId(IAssemblyLocation assemblyLocation, ISolution solution);
    [CanBeNullAttribute]
public static AssemblyNameInfo GetAssemblyNameInfo(VirtualFileSystemPath path, AssemblyInfoDatabase assemblyInfoDatabase);
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.Resolver.NugetPackageResolver : object {
    [CompilerGeneratedAttribute]
private ISignal`1<IProjectToPackageReferenceSearchDescriptor> <OnPackageRemoved>k__BackingField;
    public ISignal`1<IProjectToPackageReferenceSearchDescriptor> OnPackageRemoved { get; }
    public NugetPackageResolver(Lifetime lt);
    [CompilerGeneratedAttribute]
public ISignal`1<IProjectToPackageReferenceSearchDescriptor> get_OnPackageRemoved();
    [CanBeNullAttribute]
public IInstalledNugetPackage GetResolveResult(IProjectToPackageReference reference);
    public static NugetPackageResolver GetInstance(ISolution solution);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Resolver.NugetPackageResolverEx : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IInstalledNugetPackage Resolve(IProjectToPackageReference reference);
}
public class JetBrains.ProjectModel.Resolver.SimpleShortNameComparer : object {
    public static SimpleShortNameComparer Instance;
    private static SimpleShortNameComparer();
    public sealed virtual bool Equals(IProjectToAssemblyReference x, IProjectToAssemblyReference y);
    public sealed virtual int GetHashCode(IProjectToAssemblyReference reference);
}
public class JetBrains.ProjectModel.Resources.ProjectModelThemedIcons : object {
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ProjectModel.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string ActiveSettingDescription { get; }
    public static string AdditionalAssemblyReferencesPerProjectSettingDescription { get; }
    public static string AdditionalCompileItemsPerProjectSettingDescription { get; }
    public static string AfterBuildFinishesSwitchToTreeViewModeIfAnyImportantEventsWereReportedDuringTheBuildSettingDescription { get; }
    public static string RestoreFinished_Text { get; }
    public static string Project_Plural { get; }
    public static string Package_Plural { get; }
    public static string ShowFullPathInConsoleSettingDescription { get; }
    public static string AutoAttachSettingDescription { get; }
    public static string BuildResultsBrowserSettingsSettingDescription { get; }
    public static string BuildToolSettingsSettingDescription { get; }
    public static string BuildWithSolBuilderDuoSettingDescription { get; }
    public static string CacheFolderLocationTypeSettingDescription { get; }
    public static string CacheFullTreeInStubTreeNodesCachesDescription { get; }
    public static string CachesLocationIfLocationTypeCUSTOMFOLDERSettingDescription { get; }
    public static string CacheTokensAndBuffersDescription { get; }
    public static string ConfiguresNuGetSettingDescription { get; }
    public static string ConfiguresSolutionAndProjectBuildSettingDescription { get; }
    public static string UseAzureCredentialProviderV2Title { get; }
    public static string CredentialProvidersSettingDescription { get; }
    public static string CustomGlobalPropertiesSettingDescription { get; }
    public static string CustomPathForBuildToolSettingDescription { get; }
    public static string DefaultActionSettingDescription { get; }
    public static string DefaultPackageManagementFormatSettingDescription { get; }
    public static string DependencyBehaviorSettingDescription { get; }
    public static string DontUseReferencesProvidedByRoslynUseCOMAPISettingDescription { get; }
    public static string EditProjectItemPropertiesActionText { get; }
    public static string EnableGroupingSolutionBuilderResultsByNamespacesTypesAndMembersSettingDescription { get; }
    public static string EnvironmentHierarchySettingsInVisualStudioThisIsTheSolutionProjectModelSettingDescription { get; }
    public static string ExcludedProjectsSettingDescription { get; }
    public static string FileConflictActionSettingDescription { get; }
    public static string FolderAutoCleanModeSettingDescription { get; }
    public static string ForceRemoveSettingDescription { get; }
    public static string IncludePrereleaseSettingDescription { get; }
    public static string IncludeUnlistedSettingDescription { get; }
    public static string InstallationSourceSettingDescription { get; }
    public static string IsSolutionWatchdogEnabledSettingDescription { get; }
    public static string ItemTypesToFetchAsCompileFilesAlongWithTheirBuildActionSettingDescription { get; }
    public static string MonoExePathSettingDescription { get; }
    public static string MRUGroupingOfBuildResultsInBuildResultsViewSettingDescription { get; }
    public static string MSBuildSolutionLoadingTargetsSettingDescription { get; }
    public static string UseGetClCommandLinesTargetForCppProjectsDescription { get; }
    public static string UseGetClCommandLinesTargetForCppProjectsTooltip { get; }
    public static string NameSettingDescription { get; }
    public static string NETCLIExecutablePathSettingDescription { get; }
    public static string NETCLIX86ExecutablePathSettingDescription { get; }
    public static string NETCLIX64ExecutablePathSettingDescription { get; }
    public static string NETCoreRestoreEngineSettingDescription { get; }
    public static string NuGetBrowserSearchServiceUrlForTestsSettingDescription { get; }
    public static string NuGetBrowserSearchServiceUrlSettingDescription { get; }
    public static string NuGetSettingDescription { get; }
    public static string NumberOfProcessesRunningInParallelDuringSolutionLoadingSettingDescription { get; }
    public static string PackageSpecDumpStrategySettingDescription { get; }
    public static string PaintOutputLogSettingDescription { get; }
    public static string PolicyForautomaticNuGetConfigRestorePropertySettingDescription { get; }
    public static string PolicyForenabledNuGetConfigRestorePropertySettingDescription { get; }
    public static string PresentationAspectsOfTheSolutionBuilderSettingDescription { get; }
    public static string ProjectGuidSettingDescription { get; }
    public static string ProjectGuidsThatNeedMsbuildCalledSettingDescription { get; }
    public static string ProjectMasksToIgnoreSettingDescription { get; }
    public static string ProjectModelSynchronizerSettingsSettingDescription { get; }
    public static string PsiCachesRepairServiceEnabledDescription { get; }
    public static string AssertInterruptibleReadAccessDescription { get; }
    public static string PSIConfigurationSettingsSettingDescription { get; }
    public static string RecentCustomBuildToolPathsSettingDescription { get; }
    public static string RecentCustomMonoExecutablePathsSettingDescription { get; }
    public static string RecentCustomNETCLIExecutablePathsSettingDescription { get; }
    public static string RecentCustomNETCLIX86ExecutablePathsSettingDescription { get; }
    public static string RecentCustomNETCLIX64ExecutablePathsSettingDescription { get; }
    public static string RelativePathsToProjectFilesOrProjectFolderInCaseOfAWebsiteToLoadFromVisualStudioUsingCOMAPIIfAPathCannotBeMadeRelativeAbsolutePathWillBeUsedSettingDescription { get; }
    public static string RemoveDependenciesSettingDescription { get; }
    public static string RunBuildAfterSolutionIsLoadedSettingDescription { get; }
    public static string RunConfigurationsSettingDescription { get; }
    public static string SearchInAzureBlobsSettingDescription { get; }
    public static string SettingsForNuGetBrowserSettingDescription { get; }
    public static string ShowBuildProgressInStatusBarWhenABuildIsRunningSettingDescription { get; }
    public static string ShowBuildProgressInWindowsTaskBarWhenABuildIsRunningSettingDescription { get; }
    public static string ShowBuildResultsAfterBuildCompletedSettingDescription { get; }
    public static string ShowVerticalProgressBarWhenBuildStartedSettingDescription { get; }
    public static string SingleConfigurationSettingDescription { get; }
    public static string SmartRestoreOnBuildSettingDescription { get; }
    public static string SolutionBuilderDashboardActionsRestoreNugetActionDescription { get; }
    public static string SolutionBuilderDashboardActionsRestoreNugetActionText { get; }
    public static string SolutionSettingsUpgradedSettingDescription { get; }
    public static string SolutionWatchdogSettingsSettingDescription { get; }
    public static string SwapDefaultActionToSkipBuildingSettingDescription { get; }
    public static string TargetsToExecuteToFetchGeneratedFilesToBeCompiledAlongWithSourcesSettingDescription { get; }
    public static string TargetsToExecuteToObtainAssemblyReferencesSettingDescription { get; }
    public static string TheEventsAllowedIntoTheLoggerMustBeAtLeastThisImportantAllowingThroughLowerImportanceEventsSlowDownTheBuildProcessSettingDescription { get; }
    public static string TrackPublicAPIChangesAndOnlyRebuildDependenciesWhenPublicAPIIsChangedNotRecommendedForSolutionsThatIncludeNonMSBuildProjectsOrProjectsWithCustomBuildStepsSettingDescription { get; }
    public static string TurnSolutionWatchdogOnOrOffSettingDescription { get; }
    public static string TypeSettingDescription { get; }
    public static string UseAllColorsForPaintingOutputMessagesOnlyForTestingSettingDescription { get; }
    public static string UseNewPresentationBuildResultsTreeWithProjectsBuildStateSettingDescription { get; }
    public static string VersionOfMSBuildToUseWhenBuildingMeansasTheRuntimeVersionOfTheApplicationInitiatingTheBuildInCaseOfVisualStudioThisIsTheSameMSBuildVSItselfUsesForBuildingFFFFFFFFMeansUseTheHighestVersionAvailableOnThisMachineAnyOtherNumberHIWORDIsTheMajorVersionNumberLOWORDIsTheMinorVersionNumberSettingDescription { get; }
    public static string WaitTenSecondsBeforeRestoringPackagesShouldBeVisibleOnlyInInternalOnlyForManualTestingSettingDescription { get; }
    public static string WhenBuildStartsOpenAToolWindowWithGraphicalPresentationOfTheBuildProgressSettingDescription { get; }
    public static string WhenBuildStartsOpenAToolWindowWithGraphicalPresentationOfTheBuildDisableSmartnessProgressSettingDescription { get; }
    public static string WhetherToAvoidRebuildingUnchangedProjectsWhoseReferencesHaveOnlyHadInsignificantChangesSinceLastBuildSettingDescription { get; }
    public static string WhetherToLoadProjectModelFromVisualStudioCOMAPIOrFromFilesOnDiskSettingDescription { get; }
    public static string WhetherToRunMsbuildWithinVisualStudioOrUseExternalProcessSettingDescription { get; }
    public static string WhetherToUseMSBuildToObtainProjectReferencesAndGeneratedFilesSettingDescription { get; }
    public static string WriteLogToOutputSettingDescription { get; }
    public static string OrderProjectLoadingAccordingToDependenciesSettingDescription { get; }
    public static string DefaultPSIConfigurationSettings_Text { get; }
    public static string Solution_Personal_Text { get; }
    public static string Solution_TeamShared_Text { get; }
    public static string TheSolutionSettingsFileCouldNotBeUpgraded_Text { get; }
    public static string CanTStartBuildSolutionHasnTBeenLoaded_Text { get; }
    public static string Build_Caption { get; }
    public static string Project_Personal_Text { get; }
    public static string Project_Shared_Text { get; }
    public static string ProjectItemProperties_Text { get; }
    public static string CalculatingModifiedFiles_ToolTip { get; }
    public static string NuGet_Text { get; }
    public static string BRestoreFailedWithFollowingErrorsBN_Text { get; }
    public static string _WasSuccessfullyUninstalledFrom__Text { get; }
    public static string UninstallFailedProject_Package__Caption { get; }
    public static string UninstallFailedProject_Package__Text { get; }
    public static string ProjectWasSuccessfullyMigratedToProjectReferences_Text { get; }
    public static string MigrationFailedProject___Text { get; }
    public static string BindingRedirectsWasAddedSuccessfully_Text { get; }
    public static string GenerateBindingRedirectsFailedProject_Text { get; }
    public static string AllPackagesWereSuccessfullyInstalled_Text { get; }
    public static string _WasSuccessfullyInstalledTo__Text { get; }
    public static string MultiInstallFailed_Caption { get; }
    public static string AllPackagesWereSuccessfullyUpdated_Text { get; }
    public static string UpdateFailed_Text { get; }
    public static string InstallFailedProject_Package__Text { get; }
    public static string RestoreFailed_Caption { get; }
    public static string NuGetFoldersAreCleared_Caption { get; }
    public static string RestoreCancelled_Caption { get; }
    public static string NuGetFolderCleaningIsCancelled_Caption { get; }
    public static string HttpRequestError__Caption { get; }
    public static string TimeoutError__Caption { get; }
    public static string RestoreSkipped_Caption { get; }
    public static string RestoreFinished_Caption { get; }
    public static string SeeLogsForDetails_Text { get; }
    public static string AllPackagesAreAlreadyRestored_Text { get; }
    public static string ThereAreNoNuGetPackagesToRestore_Text { get; }
    public static string NuGetConfigContainsInvalidFallbackFolders_Caption { get; }
    public static string FollowingInvalidFallbackFoldersFound_Text { get; }
    public static string FailedToFindConfigFile_Text { get; }
    public static string FailedToAddPackageSource__Text { get; }
    public static string PackageSource_WasAdded_Text { get; }
    public static string PackageSource_WasRemoved_Text { get; }
    public static string FailedToRemovePackageSource__Text { get; }
    public static string FailedToUpdatePackageSource__Text { get; }
    public static string PackageSource_WasUpdated_Text { get; }
    public static string _CannotAccessNuGetConfigPleaseCheck_Text { get; }
    public static string NuGetSourcePathIsInvalid_Caption { get; }
    public static string CannotInstallPackage_InProject_Because_Text { get; }
    public static string NuGetRestoreIsDisabledInSettings_Text { get; }
    public static string RestoreFailed_Text { get; }
    public static string CanTRestoreNuGetPackagesInIntegrated_Caption { get; }
    public static string _RestoreFailed_Caption { get; }
    public static string PackageUninstallFailedDueToRestoreCancel_Text { get; }
    public static string PackageUninstallFailedDueToRestoreFail_Text { get; }
    public static string PackageUninstallFailedPackageRestore_Text { get; }
    public static string PackageUninstallFailedSeeLogForDetails_Text { get; }
    public static string _ReadFailed_Text { get; }
    public static string ___Text { get; }
    public static string ReSharperBuild__Text { get; }
    public static string SucceededWithErrors_Text { get; }
    public static string Succeeded_Text { get; }
    public static string Cancelled_Text { get; }
    public static string Failed_Text { get; }
    public static string FailedWithoutErrors_Text { get; }
    public static string Canceling_Text { get; }
    public static string Failing_Text { get; }
    public static string ReadingCaches_Text { get; }
    public static string LoadingProjects_Text { get; }
    public static string SyncingProjects_Text { get; }
    public static string ConstructingComponents_Text { get; }
    public static string PreparingSolutionStructure_Text { get; }
    public static string PreparingAssemblies_Text { get; }
    public static string StartingCodeAnalysis_Text { get; }
    public static string StartingFeatures_Text { get; }
    public static string LoadingSolution_Text { get; }
    public static string UpdatingAllPackagesIn__Caption { get; }
    public static string ClearNuGetFolders__Caption { get; }
    public static string Installing_In__Caption { get; }
    public static string RestoringPackagesInSolution__Caption { get; }
    public static string RestoringPackage__Caption { get; }
    public static string Uninstalling_From__Caption { get; }
    public static string DoNotCreateSolutionContainerUntilSolutionInstance_Text { get; }
    public static string WaitSolutionContainerComponentsCompose_Text { get; }
    public static string WaitForAsyncProjectModelLoad_Text { get; }
    public static string WaitForDelayedShellComponents_Text { get; }
    public static string Assembly_PresentableLocation_Text { get; }
    public static string Solution_PresentableLocation_Text { get; }
    public static string RiderIntegrated_Text { get; }
    public static string NuGetNETCLIPlugins_Text { get; }
    public static string NuGetNETCLIPluginsThenRiderIntegrated_Text { get; }
    public static string None_Text { get; }
    public static string Automatic_Text { get; }
    public static string Embedded_Text { get; }
    public static string MsBuild_Text { get; }
    public static string Console_Text { get; }
    public static string AlwaysUseValueFromNuGetConfig_Text { get; }
    public static string AlwaysEnable_Text { get; }
    public static string AlwaysDisable_Text { get; }
    public static string RestoreAllPackagesInSolution { get; }
    public static string MultiInstall { get; }
    public static string UpdatingAllPackagesIn { get; }
    public static string UpdatingAllPackagesInSolution { get; }
    public static string InstallPackage0InProject1 { get; }
    public static string UninstallPackage0FromProject1 { get; }
    public static string Effective_NuGet_Config { get; }
    public static string Displaying_NuGetConfig { get; }
    public static string Feed_Invalid_Name { get; }
    public static string Feed_Invalid_URL { get; }
    public static string Feed_Exists { get; }
    public static string Feed_URL_Exists { get; }
    public static string Feed_Not_Found { get; }
    public static string Local_Packages { get; }
    public static string Global_Packages { get; }
    public static string Http_Cache { get; }
    public static string Package_Cache { get; }
    public static string MachineSettingsBaseDir { get; }
    public static string MachineConfigDir { get; }
    public static string UserSettings { get; }
    public static string NuGetHome { get; }
    public static string NuGet_Fallback_Title { get; }
    public static string Temp { get; }
    public static string ReloadProjectsOnExternalRestore { get; }
    public static string PolicyForAutomaticDownloadSDKPropertySettingDescription { get; }
    public static string NamespaceProviderDisplayName_Text { get; }
    public static string NamespaceProviderDescription_Text { get; }
    public static string AdditionalCompileItemsDisplayName_Text { get; }
    public static string AdditionalCompileItemsDescription_Text { get; }
    public static string AdditionalAssemblyReferencesDisplayName_Text { get; }
    public static string AdditionalAssemblyReferencesDescription_Text { get; }
    public static string ProjectSettingsStorageComponentOriginPersonal_Text { get; }
    public static string ProjectSettingsStorageComponentOriginShared_Text { get; }
    public static string SolutionSettingsStoragePersonalOrigin_Text { get; }
    public static string SolutionSettingsStorageSharedOrigin_Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_ActiveSettingDescription();
    public static string get_AdditionalAssemblyReferencesPerProjectSettingDescription();
    public static string get_AdditionalCompileItemsPerProjectSettingDescription();
    public static string get_AfterBuildFinishesSwitchToTreeViewModeIfAnyImportantEventsWereReportedDuringTheBuildSettingDescription();
    public static string get_RestoreFinished_Text();
    public static string get_Project_Plural();
    public static string get_Package_Plural();
    public static string get_ShowFullPathInConsoleSettingDescription();
    public static string get_AutoAttachSettingDescription();
    public static string get_BuildResultsBrowserSettingsSettingDescription();
    public static string get_BuildToolSettingsSettingDescription();
    public static string get_BuildWithSolBuilderDuoSettingDescription();
    public static string get_CacheFolderLocationTypeSettingDescription();
    public static string get_CacheFullTreeInStubTreeNodesCachesDescription();
    public static string get_CachesLocationIfLocationTypeCUSTOMFOLDERSettingDescription();
    public static string get_CacheTokensAndBuffersDescription();
    public static string get_ConfiguresNuGetSettingDescription();
    public static string get_ConfiguresSolutionAndProjectBuildSettingDescription();
    public static string get_UseAzureCredentialProviderV2Title();
    public static string get_CredentialProvidersSettingDescription();
    public static string get_CustomGlobalPropertiesSettingDescription();
    public static string get_CustomPathForBuildToolSettingDescription();
    public static string get_DefaultActionSettingDescription();
    public static string get_DefaultPackageManagementFormatSettingDescription();
    public static string get_DependencyBehaviorSettingDescription();
    public static string get_DontUseReferencesProvidedByRoslynUseCOMAPISettingDescription();
    public static string get_EditProjectItemPropertiesActionText();
    public static string get_EnableGroupingSolutionBuilderResultsByNamespacesTypesAndMembersSettingDescription();
    public static string get_EnvironmentHierarchySettingsInVisualStudioThisIsTheSolutionProjectModelSettingDescription();
    public static string get_ExcludedProjectsSettingDescription();
    public static string get_FileConflictActionSettingDescription();
    public static string get_FolderAutoCleanModeSettingDescription();
    public static string get_ForceRemoveSettingDescription();
    public static string get_IncludePrereleaseSettingDescription();
    public static string get_IncludeUnlistedSettingDescription();
    public static string get_InstallationSourceSettingDescription();
    public static string get_IsSolutionWatchdogEnabledSettingDescription();
    public static string get_ItemTypesToFetchAsCompileFilesAlongWithTheirBuildActionSettingDescription();
    public static string get_MonoExePathSettingDescription();
    public static string get_MRUGroupingOfBuildResultsInBuildResultsViewSettingDescription();
    public static string get_MSBuildSolutionLoadingTargetsSettingDescription();
    public static string get_UseGetClCommandLinesTargetForCppProjectsDescription();
    public static string get_UseGetClCommandLinesTargetForCppProjectsTooltip();
    public static string get_NameSettingDescription();
    public static string get_NETCLIExecutablePathSettingDescription();
    public static string get_NETCLIX86ExecutablePathSettingDescription();
    public static string get_NETCLIX64ExecutablePathSettingDescription();
    public static string get_NETCoreRestoreEngineSettingDescription();
    public static string get_NuGetBrowserSearchServiceUrlForTestsSettingDescription();
    public static string get_NuGetBrowserSearchServiceUrlSettingDescription();
    public static string get_NuGetSettingDescription();
    public static string get_NumberOfProcessesRunningInParallelDuringSolutionLoadingSettingDescription();
    public static string get_PackageSpecDumpStrategySettingDescription();
    public static string get_PaintOutputLogSettingDescription();
    public static string get_PolicyForautomaticNuGetConfigRestorePropertySettingDescription();
    public static string get_PolicyForenabledNuGetConfigRestorePropertySettingDescription();
    public static string get_PresentationAspectsOfTheSolutionBuilderSettingDescription();
    public static string get_ProjectGuidSettingDescription();
    public static string get_ProjectGuidsThatNeedMsbuildCalledSettingDescription();
    public static string get_ProjectMasksToIgnoreSettingDescription();
    public static string get_ProjectModelSynchronizerSettingsSettingDescription();
    public static string get_PsiCachesRepairServiceEnabledDescription();
    public static string get_AssertInterruptibleReadAccessDescription();
    public static string get_PSIConfigurationSettingsSettingDescription();
    public static string get_RecentCustomBuildToolPathsSettingDescription();
    public static string get_RecentCustomMonoExecutablePathsSettingDescription();
    public static string get_RecentCustomNETCLIExecutablePathsSettingDescription();
    public static string get_RecentCustomNETCLIX86ExecutablePathsSettingDescription();
    public static string get_RecentCustomNETCLIX64ExecutablePathsSettingDescription();
    public static string get_RelativePathsToProjectFilesOrProjectFolderInCaseOfAWebsiteToLoadFromVisualStudioUsingCOMAPIIfAPathCannotBeMadeRelativeAbsolutePathWillBeUsedSettingDescription();
    public static string get_RemoveDependenciesSettingDescription();
    public static string get_RunBuildAfterSolutionIsLoadedSettingDescription();
    public static string get_RunConfigurationsSettingDescription();
    public static string get_SearchInAzureBlobsSettingDescription();
    public static string get_SettingsForNuGetBrowserSettingDescription();
    public static string get_ShowBuildProgressInStatusBarWhenABuildIsRunningSettingDescription();
    public static string get_ShowBuildProgressInWindowsTaskBarWhenABuildIsRunningSettingDescription();
    public static string get_ShowBuildResultsAfterBuildCompletedSettingDescription();
    public static string get_ShowVerticalProgressBarWhenBuildStartedSettingDescription();
    public static string get_SingleConfigurationSettingDescription();
    public static string get_SmartRestoreOnBuildSettingDescription();
    public static string get_SolutionBuilderDashboardActionsRestoreNugetActionDescription();
    public static string get_SolutionBuilderDashboardActionsRestoreNugetActionText();
    public static string get_SolutionSettingsUpgradedSettingDescription();
    public static string get_SolutionWatchdogSettingsSettingDescription();
    public static string get_SwapDefaultActionToSkipBuildingSettingDescription();
    public static string get_TargetsToExecuteToFetchGeneratedFilesToBeCompiledAlongWithSourcesSettingDescription();
    public static string get_TargetsToExecuteToObtainAssemblyReferencesSettingDescription();
    public static string get_TheEventsAllowedIntoTheLoggerMustBeAtLeastThisImportantAllowingThroughLowerImportanceEventsSlowDownTheBuildProcessSettingDescription();
    public static string get_TrackPublicAPIChangesAndOnlyRebuildDependenciesWhenPublicAPIIsChangedNotRecommendedForSolutionsThatIncludeNonMSBuildProjectsOrProjectsWithCustomBuildStepsSettingDescription();
    public static string get_TurnSolutionWatchdogOnOrOffSettingDescription();
    public static string get_TypeSettingDescription();
    public static string get_UseAllColorsForPaintingOutputMessagesOnlyForTestingSettingDescription();
    public static string get_UseNewPresentationBuildResultsTreeWithProjectsBuildStateSettingDescription();
    public static string get_VersionOfMSBuildToUseWhenBuildingMeansasTheRuntimeVersionOfTheApplicationInitiatingTheBuildInCaseOfVisualStudioThisIsTheSameMSBuildVSItselfUsesForBuildingFFFFFFFFMeansUseTheHighestVersionAvailableOnThisMachineAnyOtherNumberHIWORDIsTheMajorVersionNumberLOWORDIsTheMinorVersionNumberSettingDescription();
    public static string get_WaitTenSecondsBeforeRestoringPackagesShouldBeVisibleOnlyInInternalOnlyForManualTestingSettingDescription();
    public static string get_WhenBuildStartsOpenAToolWindowWithGraphicalPresentationOfTheBuildProgressSettingDescription();
    public static string get_WhenBuildStartsOpenAToolWindowWithGraphicalPresentationOfTheBuildDisableSmartnessProgressSettingDescription();
    public static string get_WhetherToAvoidRebuildingUnchangedProjectsWhoseReferencesHaveOnlyHadInsignificantChangesSinceLastBuildSettingDescription();
    public static string get_WhetherToLoadProjectModelFromVisualStudioCOMAPIOrFromFilesOnDiskSettingDescription();
    public static string get_WhetherToRunMsbuildWithinVisualStudioOrUseExternalProcessSettingDescription();
    public static string get_WhetherToUseMSBuildToObtainProjectReferencesAndGeneratedFilesSettingDescription();
    public static string get_WriteLogToOutputSettingDescription();
    public static string get_OrderProjectLoadingAccordingToDependenciesSettingDescription();
    public static string get_DefaultPSIConfigurationSettings_Text();
    public static string get_Solution_Personal_Text();
    public static string get_Solution_TeamShared_Text();
    public static string get_TheSolutionSettingsFileCouldNotBeUpgraded_Text();
    public static string get_CanTStartBuildSolutionHasnTBeenLoaded_Text();
    public static string get_Build_Caption();
    public static string get_Project_Personal_Text();
    public static string get_Project_Shared_Text();
    public static string get_ProjectItemProperties_Text();
    public static string get_CalculatingModifiedFiles_ToolTip();
    public static string get_NuGet_Text();
    public static string get_BRestoreFailedWithFollowingErrorsBN_Text();
    public static string get__WasSuccessfullyUninstalledFrom__Text();
    public static string get_UninstallFailedProject_Package__Caption();
    public static string get_UninstallFailedProject_Package__Text();
    public static string get_ProjectWasSuccessfullyMigratedToProjectReferences_Text();
    public static string get_MigrationFailedProject___Text();
    public static string get_BindingRedirectsWasAddedSuccessfully_Text();
    public static string get_GenerateBindingRedirectsFailedProject_Text();
    public static string get_AllPackagesWereSuccessfullyInstalled_Text();
    public static string get__WasSuccessfullyInstalledTo__Text();
    public static string get_MultiInstallFailed_Caption();
    public static string get_AllPackagesWereSuccessfullyUpdated_Text();
    public static string get_UpdateFailed_Text();
    public static string get_InstallFailedProject_Package__Text();
    public static string get_RestoreFailed_Caption();
    public static string get_NuGetFoldersAreCleared_Caption();
    public static string get_RestoreCancelled_Caption();
    public static string get_NuGetFolderCleaningIsCancelled_Caption();
    public static string get_HttpRequestError__Caption();
    public static string get_TimeoutError__Caption();
    public static string get_RestoreSkipped_Caption();
    public static string get_RestoreFinished_Caption();
    public static string get_SeeLogsForDetails_Text();
    public static string get_AllPackagesAreAlreadyRestored_Text();
    public static string get_ThereAreNoNuGetPackagesToRestore_Text();
    public static string get_NuGetConfigContainsInvalidFallbackFolders_Caption();
    public static string get_FollowingInvalidFallbackFoldersFound_Text();
    public static string get_FailedToFindConfigFile_Text();
    public static string get_FailedToAddPackageSource__Text();
    public static string get_PackageSource_WasAdded_Text();
    public static string get_PackageSource_WasRemoved_Text();
    public static string get_FailedToRemovePackageSource__Text();
    public static string get_FailedToUpdatePackageSource__Text();
    public static string get_PackageSource_WasUpdated_Text();
    public static string get__CannotAccessNuGetConfigPleaseCheck_Text();
    public static string get_NuGetSourcePathIsInvalid_Caption();
    public static string get_CannotInstallPackage_InProject_Because_Text();
    public static string get_NuGetRestoreIsDisabledInSettings_Text();
    public static string get_RestoreFailed_Text();
    public static string get_CanTRestoreNuGetPackagesInIntegrated_Caption();
    public static string get__RestoreFailed_Caption();
    public static string get_PackageUninstallFailedDueToRestoreCancel_Text();
    public static string get_PackageUninstallFailedDueToRestoreFail_Text();
    public static string get_PackageUninstallFailedPackageRestore_Text();
    public static string get_PackageUninstallFailedSeeLogForDetails_Text();
    public static string get__ReadFailed_Text();
    public static string get____Text();
    public static string get_ReSharperBuild__Text();
    public static string get_SucceededWithErrors_Text();
    public static string get_Succeeded_Text();
    public static string get_Cancelled_Text();
    public static string get_Failed_Text();
    public static string get_FailedWithoutErrors_Text();
    public static string get_Canceling_Text();
    public static string get_Failing_Text();
    public static string get_ReadingCaches_Text();
    public static string get_LoadingProjects_Text();
    public static string get_SyncingProjects_Text();
    public static string get_ConstructingComponents_Text();
    public static string get_PreparingSolutionStructure_Text();
    public static string get_PreparingAssemblies_Text();
    public static string get_StartingCodeAnalysis_Text();
    public static string get_StartingFeatures_Text();
    public static string get_LoadingSolution_Text();
    public static string get_UpdatingAllPackagesIn__Caption();
    public static string get_ClearNuGetFolders__Caption();
    public static string get_Installing_In__Caption();
    public static string get_RestoringPackagesInSolution__Caption();
    public static string get_RestoringPackage__Caption();
    public static string get_Uninstalling_From__Caption();
    public static string get_DoNotCreateSolutionContainerUntilSolutionInstance_Text();
    public static string get_WaitSolutionContainerComponentsCompose_Text();
    public static string get_WaitForAsyncProjectModelLoad_Text();
    public static string get_WaitForDelayedShellComponents_Text();
    public static string get_Assembly_PresentableLocation_Text();
    public static string get_Solution_PresentableLocation_Text();
    public static string get_RiderIntegrated_Text();
    public static string get_NuGetNETCLIPlugins_Text();
    public static string get_NuGetNETCLIPluginsThenRiderIntegrated_Text();
    public static string get_None_Text();
    public static string get_Automatic_Text();
    public static string get_Embedded_Text();
    public static string get_MsBuild_Text();
    public static string get_Console_Text();
    public static string get_AlwaysUseValueFromNuGetConfig_Text();
    public static string get_AlwaysEnable_Text();
    public static string get_AlwaysDisable_Text();
    public static string get_RestoreAllPackagesInSolution();
    public static string get_MultiInstall();
    public static string get_UpdatingAllPackagesIn();
    public static string get_UpdatingAllPackagesInSolution();
    public static string get_InstallPackage0InProject1();
    public static string get_UninstallPackage0FromProject1();
    public static string get_Effective_NuGet_Config();
    public static string get_Displaying_NuGetConfig();
    public static string get_Feed_Invalid_Name();
    public static string get_Feed_Invalid_URL();
    public static string get_Feed_Exists();
    public static string get_Feed_URL_Exists();
    public static string get_Feed_Not_Found();
    public static string get_Local_Packages();
    public static string get_Global_Packages();
    public static string get_Http_Cache();
    public static string get_Package_Cache();
    public static string get_MachineSettingsBaseDir();
    public static string get_MachineConfigDir();
    public static string get_UserSettings();
    public static string get_NuGetHome();
    public static string get_NuGet_Fallback_Title();
    public static string get_Temp();
    public static string get_ReloadProjectsOnExternalRestore();
    public static string get_PolicyForAutomaticDownloadSDKPropertySettingDescription();
    public static string get_NamespaceProviderDisplayName_Text();
    public static string get_NamespaceProviderDescription_Text();
    public static string get_AdditionalCompileItemsDisplayName_Text();
    public static string get_AdditionalCompileItemsDescription_Text();
    public static string get_AdditionalAssemblyReferencesDisplayName_Text();
    public static string get_AdditionalAssemblyReferencesDescription_Text();
    public static string get_ProjectSettingsStorageComponentOriginPersonal_Text();
    public static string get_ProjectSettingsStorageComponentOriginShared_Text();
    public static string get_SolutionSettingsStoragePersonalOrigin_Text();
    public static string get_SolutionSettingsStorageSharedOrigin_Text();
}
[ProjectFileTypeDefinitionAttribute("Resw")]
public class JetBrains.ProjectModel.ReswProjectFileType : XmlProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static ReswProjectFileType <Instance>k__BackingField;
    public static string RESW_FILE_EXTENSION;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static ReswProjectFileType Instance { get; private set; }
    protected ReswProjectFileType(string name);
    protected ReswProjectFileType(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static ReswProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(ReswProjectFileType value);
}
[ProjectFileTypeDefinitionAttribute("Resx")]
public class JetBrains.ProjectModel.ResxProjectFileType : XmlProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static ResxProjectFileType <Instance>k__BackingField;
    public static string RESX_FILE_EXTENSION;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static ResxProjectFileType Instance { get; private set; }
    protected ResxProjectFileType(string name);
    protected ResxProjectFileType(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static ResxProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(ResxProjectFileType value);
    public virtual BuildAction GetDefaultBuildAction(IProject project, string extension);
}
public class JetBrains.ProjectModel.RuntimeAndToolset : object {
    [CompilerGeneratedAttribute]
private MonoRuntime <MonoRuntime>k__BackingField;
    [CompilerGeneratedAttribute]
private DotNetCoreToolset <DotNetCoreToolset>k__BackingField;
    [CompilerGeneratedAttribute]
private IBuildTool <BuildTool>k__BackingField;
    [CompilerGeneratedAttribute]
private DotNetCoreToolset <NonNativeX86DotNetCoreToolset>k__BackingField;
    [CompilerGeneratedAttribute]
private DotNetCoreToolset <NonNativeX64DotNetCoreToolset>k__BackingField;
    public static RuntimeAndToolset Empty;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public MonoRuntime MonoRuntime { get; public set; }
    public DotNetCoreToolset DotNetCoreToolset { get; public set; }
    public IBuildTool BuildTool { get; public set; }
    public DotNetCoreToolset NonNativeX86DotNetCoreToolset { get; public set; }
    public DotNetCoreToolset NonNativeX64DotNetCoreToolset { get; public set; }
    public RuntimeAndToolset(MonoRuntime MonoRuntime, DotNetCoreToolset DotNetCoreToolset, IBuildTool BuildTool, DotNetCoreToolset NonNativeX86DotNetCoreToolset, DotNetCoreToolset NonNativeX64DotNetCoreToolset);
    [CompilerGeneratedAttribute]
protected RuntimeAndToolset(RuntimeAndToolset original);
    private static RuntimeAndToolset();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public MonoRuntime get_MonoRuntime();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MonoRuntime(MonoRuntime value);
    [CompilerGeneratedAttribute]
public DotNetCoreToolset get_DotNetCoreToolset();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DotNetCoreToolset(DotNetCoreToolset value);
    [CompilerGeneratedAttribute]
public IBuildTool get_BuildTool();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_BuildTool(IBuildTool value);
    [CompilerGeneratedAttribute]
public DotNetCoreToolset get_NonNativeX86DotNetCoreToolset();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NonNativeX86DotNetCoreToolset(DotNetCoreToolset value);
    [CompilerGeneratedAttribute]
public DotNetCoreToolset get_NonNativeX64DotNetCoreToolset();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NonNativeX64DotNetCoreToolset(DotNetCoreToolset value);
    public virtual string ToString();
    private static string Present(object o);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(RuntimeAndToolset left, RuntimeAndToolset right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(RuntimeAndToolset left, RuntimeAndToolset right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(RuntimeAndToolset other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual RuntimeAndToolset <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(MonoRuntime& MonoRuntime, DotNetCoreToolset& DotNetCoreToolset, IBuildTool& BuildTool, DotNetCoreToolset& NonNativeX86DotNetCoreToolset, DotNetCoreToolset& NonNativeX64DotNetCoreToolset);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.RuntimeAndToolsetChangeNotifier : object {
    private IShellLocks myLocks;
    private ViewableProperty`1<RuntimeAndToolset> myRuntimeAndToolsetProperty;
    public RuntimeAndToolsetChangeNotifier(Lifetime lifetime, ISolution solution, ISolutionLoadTasksScheduler solutionLoadTasksScheduler, IShellLocks locks);
    public void Update(RuntimeAndToolset runtimeAndToolset);
}
[ShellComponentAttribute("10")]
public class JetBrains.ProjectModel.SaveProjectFileAfterInMemoryChange : object {
    private SolutionManagerImpl mySolutionManagerImpl;
    private IShellLocks myLocks;
    public SaveProjectFileAfterInMemoryChange(IShellLocks locks, Lifetime lifetime, ChangeManager changeManager, SolutionManagerImpl solutionManagerImpl);
    public sealed virtual void SaveFile(IProjectFile file);
    public string GetProjectFileText(IProject project);
    private void SaveProjectFile(IProject project);
    private void SaveProjectFile(IProjectFile projectFile, string text, Encoding encoding);
    public sealed virtual object Execute(IChangeMap changeMap);
}
public class JetBrains.ProjectModel.Sdk.SdkModuleComparer : object {
    public static IEqualityComparer`1<ISdkModule> Instance { get; }
    public static IEqualityComparer`1<ISdkModule> get_Instance();
    public sealed virtual bool Equals(ISdkModule x, ISdkModule y);
    public sealed virtual int GetHashCode(ISdkModule obj);
}
public class JetBrains.ProjectModel.Sdk.SdkModuleImpl : ProjectFolderImpl {
    [CompilerGeneratedAttribute]
private IProperty`1<VirtualFileSystemPath> <ProjectFileLocationLive>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<VirtualFileSystemPath> <ProjectLocationLive>k__BackingField;
    private SolutionElement mySolution;
    private LifetimeDefinition myLifetimeDefinition;
    private ISdkConsumerProperties myProjectProperties;
    private TargetFrameworkReferences myModuleReferences;
    [CompilerGeneratedAttribute]
private bool <IsOpened>k__BackingField;
    [CompilerGeneratedAttribute]
private SdkModuleInfo <SDKModuleInfo>k__BackingField;
    public IProperty`1<VirtualFileSystemPath> ProjectFileLocationLive { get; }
    public IProperty`1<VirtualFileSystemPath> ProjectLocationLive { get; }
    public IReadOnlyList`1<TargetFrameworkId> TargetFrameworkIds { get; }
    public string SdkIdentity { get; }
    public string Name { get; }
    public Type MarshallerType { get; }
    public VirtualFileSystemPath Location { get; }
    public ProjectItemKind Kind { get; }
    public bool IsLinked { get; }
    public string Presentation { get; }
    public IProjectFile ProjectFile { get; }
    public Guid Guid { get; }
    public bool IsOpened { get; public set; }
    public IProjectProperties ProjectProperties { get; }
    public VirtualFileSystemPath ProjectFileLocation { get; }
    public VirtualFileSystemPath ContentRootFolder { get; }
    public ICollection`1<VirtualFileSystemPath> SdkContentFiles { get; }
    [CanBeNullAttribute]
public TargetPlatformData TargetPlatformData { get; }
    public SdkModuleInfo SDKModuleInfo { get; }
    public SdkModuleImpl(SdkModuleInfo sdkModuleInfo, SolutionElement solution, ISdkConsumerProperties projectProperties);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<VirtualFileSystemPath> get_ProjectFileLocationLive();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<VirtualFileSystemPath> get_ProjectLocationLive();
    public sealed virtual IReadOnlyList`1<TargetFrameworkId> get_TargetFrameworkIds();
    private void Remove();
    public virtual void Accept(ProjectVisitor projectVisitor);
    public virtual string ToString();
    public virtual ISolution GetSolution();
    internal virtual void DumpInternal(TextWriter to, int indent, DumpFlags flags);
    public sealed virtual string get_SdkIdentity();
    public virtual string get_Name();
    public virtual Type get_MarshallerType();
    protected virtual Pair`2<bool, bool> CalculateIsValid();
    public virtual bool IsReallyValid();
    public virtual IProject GetProject();
    public virtual VirtualFileSystemPath get_Location();
    public virtual ProjectItemKind get_Kind();
    public virtual bool get_IsLinked();
    public sealed virtual string get_Presentation();
    public sealed virtual void Dispose();
    public sealed virtual IReadOnlyCollection`1<IProjectToModuleReference> GetModuleReferences(TargetFrameworkId targetFrameworkId);
    public sealed virtual IProjectFile get_ProjectFile();
    public sealed virtual Guid get_Guid();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsOpened();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsOpened(bool value);
    public virtual ProjectModelChange GetChangeDelta(ProjectModelChangeType changeType);
    public sealed virtual IProjectProperties get_ProjectProperties();
    public sealed virtual VirtualFileSystemPath get_ProjectFileLocation();
    public sealed virtual bool HasFlavour();
    public sealed virtual VirtualFileSystemPath GetOutputDirectory(TargetFrameworkId targetFrameworkId);
    public sealed virtual VirtualFileSystemPath GetOutputFilePath(TargetFrameworkId targetFrameworkId);
    public sealed virtual VirtualFileSystemPath GetIntermediateDirectory(TargetFrameworkId targetFrameworkId);
    public sealed virtual VirtualFileSystemPath GetRefOutputFilePath(TargetFrameworkId targetFrameworkId);
    public sealed virtual ICollection`1<VirtualFileSystemPath> GetOutputDirectories();
    public sealed virtual ICollection`1<VirtualFileSystemPath> GetIntermediateDirectories();
    public sealed virtual T GetComponent();
    public sealed virtual ProjectTargetFrameworkScope GetTargetFrameworkScope(TargetFrameworkId targetFrameworkId);
    public sealed virtual IEnumerable`1<TargetFrameworkScope> GetAllTargetFrameworks();
    public sealed virtual VirtualFileSystemPath get_ContentRootFolder();
    public sealed virtual ICollection`1<VirtualFileSystemPath> get_SdkContentFiles();
    public sealed virtual TargetPlatformData get_TargetPlatformData();
    [CompilerGeneratedAttribute]
public sealed virtual SdkModuleInfo get_SDKModuleInfo();
    protected bool Equals(SdkModuleImpl other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void DoAddSdkToSdkReference(IProjectToSdkReference sdkReferenceImpl);
    private void DoAddReferenceCore(IProjectToModuleReference projectToModuleReference);
    [CompilerGeneratedAttribute]
private void <.ctor>b__12_0();
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.Search.AssemblyFileSearchDescriptor : object {
    [CompilerGeneratedAttribute]
private IAssemblyLocation <Location>k__BackingField;
    public IAssemblyLocation Location { get; }
    public AssemblyFileSearchDescriptor(IAssemblyLocation location);
    [CompilerGeneratedAttribute]
public sealed virtual IAssemblyLocation get_Location();
    public virtual string ToString();
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.Search.AssemblySearchDescriptor : object {
    [CompilerGeneratedAttribute]
private AssemblyId <AssemblyId>k__BackingField;
    public AssemblyId AssemblyId { get; }
    public AssemblySearchDescriptor(AssemblyId assemblyId);
    [CompilerGeneratedAttribute]
public sealed virtual AssemblyId get_AssemblyId();
    public virtual string ToString();
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.Search.BackendProjectModelLocator : ProjectLocatorBase`1<IProject> {
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssemblyCollection <AssemblyCollection>k__BackingField;
    protected ISolution Solution { get; }
    protected IAssemblyCollection AssemblyCollection { get; }
    public BackendProjectModelLocator(ILogger logger, ISolution solution, IAssemblyCollection assemblyCollection);
    [CompilerGeneratedAttribute]
protected ISolution get_Solution();
    [CompilerGeneratedAttribute]
protected IAssemblyCollection get_AssemblyCollection();
    protected virtual IEnumerable`1<Pair`2<IProjectSearchDescriptor, IProject>> GetProjectsCoreRaw(IProjectSearchDescriptor descriptor);
    protected virtual int GetProjectMatchScore(IProjectSearchDescriptor projectDescriptor, IProject project, IProjectSearchDescriptor searchDescriptor, ProjectSearchPreferences preferences);
    private bool CheckProjectOutputFilePath(IProject project, TargetFrameworkId targetFrameworkId, VirtualFileSystemPath outputPath);
    protected virtual IProject GetSolutionProject();
    protected virtual IProject GetMiscFilesProject();
    protected virtual IProject GetOpenFolderProject();
    protected virtual IEnumerable`1<Pair`2<IProjectSearchDescriptor, IProject>> GetProjectsByGuid(Guid projectGuid);
    protected virtual IEnumerable`1<Pair`2<IProjectSearchDescriptor, IProject>> GetProjectsByName(string projectName);
    protected virtual IEnumerable`1<Pair`2<IProjectSearchDescriptor, IProject>> GetProjectsByLocation(VirtualFileSystemPath projectLocation);
    protected virtual IEnumerable`1<Pair`2<IProjectSearchDescriptor, IProject>> GetProjectsByProjectFilePath(VirtualFileSystemPath projectFilePath);
    public virtual IProject TryFindProject(IProjectSearchDescriptor descriptor, ProjectSearchPreferences preferences);
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.Search.BackendProjectModelLocator/<GetProjects>d__18")]
public virtual IEnumerable`1<IProject> GetProjects(IProjectSearchDescriptor descriptor, ProjectSearchPreferences preferences);
    public IEnumerable`1<IProjectFolder> TryFindProjectFolders(IProjectFolderSearchDescriptor descriptor);
    public sealed virtual IList`1<IProjectFile> TryFindProjectFiles(IProjectFileSearchDescriptor descriptor);
    private Func`2<IProjectFile, bool> GetBuildActionPredicate(BuildAction buildAction);
    private IList`1<TProjectItem> TryFindProjectItemsCore(IProjectFileOrFolderSearchDescriptor descriptor, ProjectFileSearchPreferences fileSearchPreferences, Func`2<TProjectItem, bool> predicate);
    public sealed virtual IList`1<IProjectItem> TryFindProjectItems(IProjectFileOrFolderSearchDescriptor descriptor);
    public sealed virtual IList`1<IProjectModelElement> TryFindProjectModelElements(IProjectModelElementSearchDescriptor descriptor);
    public sealed virtual bool Equals(IProject project, IProjectSearchDescriptor otherProjectSearchDescriptor, ProjectSearchPreferences preferences);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<IProject> <>n__0(IProjectSearchDescriptor descriptor, ProjectSearchPreferences preferences);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Search.BackendProjectModelLocatorEx : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectFile TryFindProjectFile(IBackendProjectModelLocator locator, IProjectFileSearchDescriptor descriptor);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectItem TryFindProjectItem(IBackendProjectModelLocator locator, IProjectFileOrFolderSearchDescriptor descriptor);
}
internal class JetBrains.ProjectModel.Search.FakeProjectModelElementSearchDescriptor : object {
}
public interface JetBrains.ProjectModel.Search.IAssemblyFileSearchDescriptor {
    public IAssemblyLocation Location { get; }
    public abstract virtual IAssemblyLocation get_Location();
}
public interface JetBrains.ProjectModel.Search.IAssemblySearchDescriptor {
    public AssemblyId AssemblyId { get; }
    public abstract virtual AssemblyId get_AssemblyId();
}
public interface JetBrains.ProjectModel.Search.IBackendProjectModelLocator {
    [NotNullAttribute]
public abstract virtual IList`1<IProjectModelElement> TryFindProjectModelElements(IProjectModelElementSearchDescriptor descriptor);
    [CanBeNullAttribute]
public abstract virtual IProject TryFindProject(IProjectSearchDescriptor descriptor, ProjectSearchPreferences preferences);
    public abstract virtual IList`1<IProjectFile> TryFindProjectFiles(IProjectFileSearchDescriptor descriptor);
    public abstract virtual IList`1<IProjectItem> TryFindProjectItems(IProjectFileOrFolderSearchDescriptor descriptor);
}
public interface JetBrains.ProjectModel.Search.IBackendProjectSearchDescriptorEqualityComparer {
    public abstract virtual bool Equals(IProject project, IProjectSearchDescriptor otherProjectSearchDescriptor, ProjectSearchPreferences preferences);
}
public interface JetBrains.ProjectModel.Search.IProjectByNameReferenceDescriptor {
    [NotNullAttribute]
public String[] NameCandidates { get; }
    public abstract virtual String[] get_NameCandidates();
}
public interface JetBrains.ProjectModel.Search.IProjectElementSearchDescriptor {
    [CanBeNullAttribute]
public IProjectSearchDescriptor OwnerProject { get; }
    public abstract virtual IProjectSearchDescriptor get_OwnerProject();
}
public interface JetBrains.ProjectModel.Search.IProjectFileOrFolderSearchDescriptor {
    [NotNullAttribute]
public VirtualFileSystemPath Location { get; }
    [CanBeNullAttribute]
public string Name { get; }
    [CanBeNullAttribute]
public IProjectFolderSearchDescriptor ParentFolder { get; }
    public abstract virtual VirtualFileSystemPath get_Location();
    public abstract virtual string get_Name();
    public abstract virtual IProjectFolderSearchDescriptor get_ParentFolder();
}
public interface JetBrains.ProjectModel.Search.IProjectFileSearchDescriptor {
    public ProjectFileSearchPreferences SearchPreferences { get; }
    [CanBeNullAttribute]
public BuildAction BuildAction { get; }
    public abstract virtual ProjectFileSearchPreferences get_SearchPreferences();
    public abstract virtual BuildAction get_BuildAction();
}
public interface JetBrains.ProjectModel.Search.IProjectFolderSearchDescriptor {
}
public interface JetBrains.ProjectModel.Search.IProjectItemSearchDescriptor {
}
public interface JetBrains.ProjectModel.Search.IProjectModelElementSearchDescriptor {
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Search.IProjectModelElementSearchDescriptorEx : object {
    [ExtensionAttribute]
public static IProjectModelElement TryFindProjectModelElement(IProjectModelElementSearchDescriptor searchDescriptor, IBackendProjectModelLocator backendProjectModelLocator, ILogger logger);
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.Search.IProjectModelElementSearchDescriptorEx/<GetSensitiveData>d__1")]
private static IEnumerable`1<Pair`2<string, object>> GetSensitiveData(IProjectModelElementSearchDescriptor projectModelElementSearchDescriptor, IList`1<IProjectModelElement> items);
    private static string GetSensitiveDataItem(IProjectModelElement item);
    private static bool ContainsOnlyFilesWithSameLocation(IList`1<IProjectModelElement> items);
}
public interface JetBrains.ProjectModel.Search.IProjectReferenceByNameSearchDescriptor {
    public IProjectByNameReferenceDescriptor ReferenceByName { get; }
    public abstract virtual IProjectByNameReferenceDescriptor get_ReferenceByName();
}
public interface JetBrains.ProjectModel.Search.IProjectReferenceSearchDescriptor {
    [NotNullAttribute]
public IProjectSearchDescriptor OwnerProject { get; }
    public abstract virtual IProjectSearchDescriptor get_OwnerProject();
}
public interface JetBrains.ProjectModel.Search.IProjectSearchDescriptor {
    public ProjectKind ProjectKind { get; }
    [CanBeNullAttribute]
public string ProjectName { get; }
    public Guid ProjectGuid { get; }
    [NotNullAttribute]
public Guid ProjectPropertiesOwnerFactoryGuid { get; }
    [NotNullAttribute]
public VirtualFileSystemPath ProjectFileLocation { get; }
    [NotNullAttribute]
public VirtualFileSystemPath ProjectLocation { get; }
    [CanBeNullAttribute]
public IReadOnlyDictionary`2<TargetFrameworkId, VirtualFileSystemPath> OutputPaths { get; }
    public abstract virtual ProjectKind get_ProjectKind();
    public abstract virtual string get_ProjectName();
    public abstract virtual Guid get_ProjectGuid();
    public abstract virtual Guid get_ProjectPropertiesOwnerFactoryGuid();
    public abstract virtual VirtualFileSystemPath get_ProjectFileLocation();
    public abstract virtual VirtualFileSystemPath get_ProjectLocation();
    public abstract virtual IReadOnlyDictionary`2<TargetFrameworkId, VirtualFileSystemPath> get_OutputPaths();
    public abstract virtual IEnumerable`1<KeyValuePair`2<string, string>> GetAdditionalInfo();
}
public interface JetBrains.ProjectModel.Search.IProjectSearchDescriptorEqualityComparer`1 {
    public abstract virtual bool Equals(IProjectSearchDescriptor projectSearchDescriptor, IProjectSearchDescriptor otherProjectSearchDescriptor, ProjectSearchPreferences preferences);
    public abstract virtual bool Equals(IProjectSearchDescriptor projectSearchDescriptor, TProject project, IProjectSearchDescriptor otherProjectSearchDescriptor, ProjectSearchPreferences preferences);
}
public interface JetBrains.ProjectModel.Search.IProjectSearchDescriptorEx {
    public abstract virtual TargetFrameworkId GetSingleTargetFrameworkId();
    public abstract virtual TargetFrameworkId GetRandomTargetFrameworkId();
}
public interface JetBrains.ProjectModel.Search.IProjectToAssemblyReferenceSearchDescriptor {
    [NotNullAttribute]
public IProjectToAssemblyReferenceDescriptor AssemblyReference { get; }
    public abstract virtual IProjectToAssemblyReferenceDescriptor get_AssemblyReference();
}
public interface JetBrains.ProjectModel.Search.IProjectToComAssemblyReferenceSearchDescriptor {
    [NotNullAttribute]
public ProjectToComAssemblyReferenceDescriptor ComAssemblyReference { get; }
    public abstract virtual ProjectToComAssemblyReferenceDescriptor get_ComAssemblyReference();
}
public interface JetBrains.ProjectModel.Search.IProjectToModuleReferenceSearchDescriptor {
    [NotNullAttribute]
public IProjectReferenceDescriptor Reference { get; }
    public abstract virtual IProjectReferenceDescriptor get_Reference();
}
public interface JetBrains.ProjectModel.Search.IProjectToPackageReferenceSearchDescriptor {
    [CanBeNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; }
    [NotNullAttribute]
public NugetId NugetId { get; }
    public abstract virtual TargetFrameworkId get_TargetFrameworkId();
    public abstract virtual NugetId get_NugetId();
}
public interface JetBrains.ProjectModel.Search.IProjectToProjectReferenceSearchDescriptor {
    [NotNullAttribute]
public ProjectToProjectReferenceBySearchDescriptor ProjectReference { get; }
    public abstract virtual ProjectToProjectReferenceBySearchDescriptor get_ProjectReference();
}
public interface JetBrains.ProjectModel.Search.IProjectToRoslynAnalyzerReferenceSearchDescriptor {
    [NotNullAttribute]
public RoslynAnalyzerReferenceDescriptor RoslynReference { get; }
    public abstract virtual RoslynAnalyzerReferenceDescriptor get_RoslynReference();
}
public interface JetBrains.ProjectModel.Search.IProjectToSdkReferenceSearchDescriptor {
    [NotNullAttribute]
public ProjectToSdkReferenceDescriptor SdkReference { get; }
    public abstract virtual ProjectToSdkReferenceDescriptor get_SdkReference();
}
public interface JetBrains.ProjectModel.Search.IReferencesFolderDescriptor {
    public IProjectSearchDescriptor OwnerProject { get; }
    public ReferencesFolderKind Kind { get; }
    public abstract virtual IProjectSearchDescriptor get_OwnerProject();
    public abstract virtual ReferencesFolderKind get_Kind();
}
public interface JetBrains.ProjectModel.Search.ISolutionSearchDescriptor {
}
public abstract class JetBrains.ProjectModel.Search.ProjectElementSearchDescriptor : object {
    [CompilerGeneratedAttribute]
private IProjectSearchDescriptor <OwnerProject>k__BackingField;
    public IProjectSearchDescriptor OwnerProject { get; }
    protected ProjectElementSearchDescriptor(IProjectSearchDescriptor ownerProject);
    [CompilerGeneratedAttribute]
public sealed virtual IProjectSearchDescriptor get_OwnerProject();
    public virtual string ToString();
    protected abstract virtual void ToString(StringBuilder sb);
    protected bool Equals(ProjectElementSearchDescriptor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.Search.ProjectFileOrFolderSearchDescriptor : ProjectElementSearchDescriptor {
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectFolderSearchDescriptor <ParentFolder>k__BackingField;
    public VirtualFileSystemPath Location { get; }
    public string Name { get; }
    public IProjectFolderSearchDescriptor ParentFolder { get; }
    public ProjectFileOrFolderSearchDescriptor(IProjectFolderSearchDescriptor parentFolder, VirtualFileSystemPath location, string name);
    public ProjectFileOrFolderSearchDescriptor(IProjectSearchDescriptor project, VirtualFileSystemPath location, string name);
    [CompilerGeneratedAttribute]
public sealed virtual VirtualFileSystemPath get_Location();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual IProjectFolderSearchDescriptor get_ParentFolder();
    protected virtual void ToString(StringBuilder sb);
    protected bool Equals(ProjectFileOrFolderSearchDescriptor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Search.ProjectFileOrFolderSearchDescriptorEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IProjectFolderSearchDescriptor ToProjectFolderSearchDescriptor(IProjectFolder projectFolder);
    [ExtensionAttribute]
[NotNullAttribute]
public static IProjectFileSearchDescriptor ToProjectFileSearchDescriptor(IProjectFile projectFile);
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.Search.ProjectFileSearchDescriptor : ProjectFileOrFolderSearchDescriptor {
    [CompilerGeneratedAttribute]
private ProjectFileSearchPreferences <SearchPreferences>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildAction <BuildAction>k__BackingField;
    public ProjectFileSearchPreferences SearchPreferences { get; }
    public BuildAction BuildAction { get; }
    public ProjectFileSearchDescriptor(IProjectFolderSearchDescriptor parentFolder, VirtualFileSystemPath location, string name, ProjectFileSearchPreferences searchPreferences, BuildAction buildAction);
    public ProjectFileSearchDescriptor(IProjectSearchDescriptor project, VirtualFileSystemPath location, string name, ProjectFileSearchPreferences searchPreferences, BuildAction buildAction);
    [CompilerGeneratedAttribute]
public sealed virtual ProjectFileSearchPreferences get_SearchPreferences();
    [CompilerGeneratedAttribute]
public sealed virtual BuildAction get_BuildAction();
    protected virtual void ToString(StringBuilder sb);
    protected bool Equals(ProjectFileSearchDescriptor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum JetBrains.ProjectModel.Search.ProjectFileSearchPreferences : Enum {
    public int value__;
    public static ProjectFileSearchPreferences AS_REQUESTED;
    public static ProjectFileSearchPreferences NON_SHARED;
    public static ProjectFileSearchPreferences EXACT_MATCH_FOR_REMOVE;
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.Search.ProjectFolderSearchDescriptor : ProjectFileOrFolderSearchDescriptor {
    public ProjectFolderSearchDescriptor(IProjectSearchDescriptor projectSearchDescriptor, VirtualFileSystemPath location, string name);
}
public abstract class JetBrains.ProjectModel.Search.ProjectLocatorBase`1 : object {
    protected ILogger myLogger;
    protected ProjectLocatorBase`1(ILogger logger);
    [CanBeNullAttribute]
public virtual TProject TryFindProject(IProjectSearchDescriptor descriptor, ProjectSearchPreferences preferences);
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.Search.ProjectLocatorBase`1/<GetProjects>d__3")]
[NotNullAttribute]
public virtual IEnumerable`1<TProject> GetProjects(IProjectSearchDescriptor descriptor, ProjectSearchPreferences preferences);
    [NotNullAttribute]
private IEnumerable`1<Pair`2<Pair`2<IProjectSearchDescriptor, TProject>, int>> GetProjectsCore(IProjectSearchDescriptor descriptor, ProjectSearchPreferences preferences);
    protected virtual IEnumerable`1<Pair`2<IProjectSearchDescriptor, TProject>> GetProjectsCoreRaw(IProjectSearchDescriptor descriptor);
    private IEnumerable`1<Pair`2<Pair`2<IProjectSearchDescriptor, TProject>, int>> ScoreProjects(IEnumerable`1<Pair`2<IProjectSearchDescriptor, TProject>> projects, IProjectSearchDescriptor descriptor, ProjectSearchPreferences preferences);
    protected virtual int GetProjectMatchScore(IProjectSearchDescriptor projectDescriptor, TProject project, IProjectSearchDescriptor searchDescriptor, ProjectSearchPreferences preferences);
    protected abstract virtual TProject GetSolutionProject();
    protected abstract virtual TProject GetMiscFilesProject();
    protected abstract virtual TProject GetOpenFolderProject();
    protected abstract virtual IEnumerable`1<Pair`2<IProjectSearchDescriptor, TProject>> GetProjectsByGuid(Guid projectGuid);
    protected abstract virtual IEnumerable`1<Pair`2<IProjectSearchDescriptor, TProject>> GetProjectsByName(string projectName);
    protected abstract virtual IEnumerable`1<Pair`2<IProjectSearchDescriptor, TProject>> GetProjectsByLocation(VirtualFileSystemPath projectLocation);
    protected abstract virtual IEnumerable`1<Pair`2<IProjectSearchDescriptor, TProject>> GetProjectsByProjectFilePath(VirtualFileSystemPath projectFilePath);
    public sealed virtual bool Equals(IProjectSearchDescriptor projectSearchDescriptor, TProject project, IProjectSearchDescriptor otherProjectSearchDescriptor, ProjectSearchPreferences preferences);
    public sealed virtual bool Equals(IProjectSearchDescriptor projectSearchDescriptor, IProjectSearchDescriptor otherProjectSearchDescriptor, ProjectSearchPreferences preferences);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Search.ProjectModelElementSearchDescriptorEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IProjectFileOrFolderSearchDescriptor ToFileOrFolderSearchDescriptor(IProjectItem projectItem);
    [ExtensionAttribute]
[NotNullAttribute]
public static IProjectModelElementSearchDescriptor ToProjectModelElementSearchDescriptor(IProjectModelElement projectModelElement);
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.Search.ProjectReferenceByNameSearchDescriptor : ProjectReferenceSearchDescriptor {
    [CompilerGeneratedAttribute]
private IProjectByNameReferenceDescriptor <ReferenceByName>k__BackingField;
    public VirtualFileSystemPath HintPath { get; }
    public IProjectByNameReferenceDescriptor ReferenceByName { get; }
    public ProjectReferenceByNameSearchDescriptor(IProjectSearchDescriptor ownerProject, IProjectByNameReferenceDescriptor projectByNameReferenceDescriptor);
    public ProjectReferenceByNameSearchDescriptor(IProjectSearchDescriptor ownerProject, TargetFrameworkId targetFrameworkId, String[] nameCandidates);
    public VirtualFileSystemPath get_HintPath();
    [CompilerGeneratedAttribute]
public sealed virtual IProjectByNameReferenceDescriptor get_ReferenceByName();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Search.ProjectReferenceByNameSearchDescriptorEx : object {
    [ExtensionAttribute]
public static IProjectReferenceByNameSearchDescriptor ToProjectReferenceByNameSearchDescriptor(IProjectByNameReferenceDescriptor projectByNameReferenceDescriptor, IProjectSearchDescriptor sourceProject);
    [ExtensionAttribute]
public static IProjectToModuleReference TryFindReferenceByName(IProject project, IProjectByNameReferenceDescriptor descriptor);
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.Search.ProjectReferenceSearchDescriptor : ProjectElementSearchDescriptor {
    [CompilerGeneratedAttribute]
private IProjectReferenceDescriptor <Reference>k__BackingField;
    public IProjectReferenceDescriptor Reference { get; }
    public ProjectReferenceSearchDescriptor(IProjectSearchDescriptor ownerProject, IProjectReferenceDescriptor reference);
    [CompilerGeneratedAttribute]
public sealed virtual IProjectReferenceDescriptor get_Reference();
    protected virtual void ToString(StringBuilder sb);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Search.ProjectReferenceSearchDescriptorEx : object {
    [ExtensionAttribute]
public static IProjectToModuleReferenceSearchDescriptor ToProjectToModuleReferenceSearchDescriptor(IProjectToModuleReference projectToModuleReference);
    [ExtensionAttribute]
public static IProjectToModuleReferenceSearchDescriptor ToProjectReferenceSearchDescriptor(IProjectReferenceDescriptor projectReferenceDescriptor, IProjectSearchDescriptor sourceProject);
    [ExtensionAttribute]
public static IProjectToModuleReference TryFindModuleReference(IProject project, IProjectToModuleReferenceSearchDescriptor descriptor);
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.Search.ProjectReferenceSearchDescriptorEx/<GetModuleReferencesSoft>d__3")]
[ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<IProjectToModuleReference> GetModuleReferencesSoft(IProject project, TargetFrameworkId targetFrameworkId);
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.Search.ProjectSearchDescriptor : object {
    [CompilerGeneratedAttribute]
private ProjectKind <ProjectKind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ProjectGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ProjectPropertiesOwnerFactoryGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <ProjectFileLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <ProjectLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<TargetFrameworkId, VirtualFileSystemPath> <OutputPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PersistentId>k__BackingField;
    public ProjectKind ProjectKind { get; public set; }
    public string ProjectName { get; public set; }
    public Guid ProjectGuid { get; public set; }
    public Guid ProjectPropertiesOwnerFactoryGuid { get; public set; }
    public VirtualFileSystemPath ProjectFileLocation { get; public set; }
    public VirtualFileSystemPath ProjectLocation { get; public set; }
    public IReadOnlyDictionary`2<TargetFrameworkId, VirtualFileSystemPath> OutputPaths { get; public set; }
    public string PersistentId { get; public set; }
    private IProjectSearchDescriptor JetBrains.ProjectModel.Search.IProjectElementSearchDescriptor.OwnerProject { get; }
    [CompilerGeneratedAttribute]
public sealed virtual ProjectKind get_ProjectKind();
    [CompilerGeneratedAttribute]
public void set_ProjectKind(ProjectKind value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProjectName();
    [CompilerGeneratedAttribute]
public void set_ProjectName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_ProjectGuid();
    [CompilerGeneratedAttribute]
public void set_ProjectGuid(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_ProjectPropertiesOwnerFactoryGuid();
    [CompilerGeneratedAttribute]
public void set_ProjectPropertiesOwnerFactoryGuid(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual VirtualFileSystemPath get_ProjectFileLocation();
    [CompilerGeneratedAttribute]
public void set_ProjectFileLocation(VirtualFileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual VirtualFileSystemPath get_ProjectLocation();
    [CompilerGeneratedAttribute]
public void set_ProjectLocation(VirtualFileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<TargetFrameworkId, VirtualFileSystemPath> get_OutputPaths();
    [CompilerGeneratedAttribute]
public void set_OutputPaths(IReadOnlyDictionary`2<TargetFrameworkId, VirtualFileSystemPath> value);
    [CompilerGeneratedAttribute]
public string get_PersistentId();
    [CompilerGeneratedAttribute]
public void set_PersistentId(string value);
    private sealed virtual override IProjectSearchDescriptor JetBrains.ProjectModel.Search.IProjectElementSearchDescriptor.get_OwnerProject();
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.Search.ProjectSearchDescriptor/<GetAdditionalInfo>d__35")]
public sealed virtual IEnumerable`1<KeyValuePair`2<string, string>> GetAdditionalInfo();
    public virtual string ToString();
    protected bool Equals(ProjectSearchDescriptor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static IProjectSearchDescriptor CreateForMiscFilesProject();
    public static IProjectSearchDescriptor CreateForSolutionProject();
    public static IProjectSearchDescriptor CreateForOpenFolderProject();
    public static IProjectSearchDescriptor CreateByProjectGuid(Guid projectGuid);
    public static IProjectSearchDescriptor CreateByProjectFileLocation(VirtualFileSystemPath projectFileLocation);
    [ObsoleteAttribute("Do you actually need to get any random project by location?")]
public static IProjectSearchDescriptor CreateByProjectLocation(VirtualFileSystemPath projectLocation);
    public static ProjectSearchDescriptor CreateByProject(IProject project);
    public static IProjectSearchDescriptor CreateByPersistentId(string persistentId);
    public void Write(UnsafeWriter writer);
    public static void Write(IProjectSearchDescriptor self, UnsafeWriter writer);
    public static ProjectSearchDescriptor Read(UnsafeReader reader);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Search.ProjectSearchDescriptorEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IProjectSearchDescriptor ToProjectSearchDescriptor(IProjectPropertiesDescriptor projectDescriptor);
    [ExtensionAttribute]
public static string Dump(IProjectSearchDescriptor descriptor);
    [ExtensionAttribute]
public static void DumpTo(IProjectSearchDescriptor descriptor, StringBuilder sb);
    [ExtensionAttribute]
public static bool IsWebProject(IProjectSearchDescriptor projectSearchDescriptor);
    [ExtensionAttribute]
[ContractAnnotationAttribute("null => false")]
public static bool IsSolutionFolder(IProjectSearchDescriptor projectSearchDescriptor);
    [ExtensionAttribute]
[ContractAnnotationAttribute("null => false")]
public static bool IsMiscFilesProject(IProjectSearchDescriptor projectSearchDescriptor);
    [ExtensionAttribute]
public static bool IsVCXMiscProjectInVs2015(IProjectSearchDescriptor projectSearchDescriptor);
    [ContractAnnotationAttribute("null => false")]
public static bool IsVCXMiscProjectNameInVs2015(string projectName);
}
public static class JetBrains.ProjectModel.Search.ProjectSearchDescriptorMatcher : object {
    public static bool IsLikelyMatched(IProjectSearchDescriptor projectDescriptor, IProjectSearchDescriptor searchDescriptor, ILogger logger);
    public static int GetProjectMatchScore(IProjectSearchDescriptor projectDescriptor, IProjectSearchDescriptor searchDescriptor, ProjectSearchPreferences preferences, ILogger logger);
}
public static class JetBrains.ProjectModel.Search.ProjectSearchDescriptorStrongEqualityComparer : object {
    public static bool Equals(IProjectSearchDescriptor x, IProjectSearchDescriptor y);
}
public enum JetBrains.ProjectModel.Search.ProjectSearchPreferences : Enum {
    public int value__;
    public static ProjectSearchPreferences STRICT;
    public static ProjectSearchPreferences REFERENCE;
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.Search.ProjectToAssemblyReferenceSearchDescriptor : ProjectReferenceSearchDescriptor {
    [CompilerGeneratedAttribute]
private IProjectToAssemblyReferenceDescriptor <AssemblyReference>k__BackingField;
    public IProjectToAssemblyReferenceDescriptor AssemblyReference { get; }
    public ProjectToAssemblyReferenceSearchDescriptor(IProjectSearchDescriptor ownerProject, IProjectToAssemblyReferenceDescriptor reference);
    [CompilerGeneratedAttribute]
public sealed virtual IProjectToAssemblyReferenceDescriptor get_AssemblyReference();
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.Search.ProjectToComAssemblyReferenceSearchDescriptor : ProjectReferenceSearchDescriptor {
    [CompilerGeneratedAttribute]
private ProjectToComAssemblyReferenceDescriptor <ComAssemblyReference>k__BackingField;
    public ProjectToComAssemblyReferenceDescriptor ComAssemblyReference { get; }
    public ProjectToComAssemblyReferenceSearchDescriptor(IProjectSearchDescriptor ownerProject, ProjectToComAssemblyReferenceDescriptor reference);
    [CompilerGeneratedAttribute]
public sealed virtual ProjectToComAssemblyReferenceDescriptor get_ComAssemblyReference();
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.Search.ProjectToPackageReferenceSearchDescriptor : ProjectElementSearchDescriptor {
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFrameworkId>k__BackingField;
    [CompilerGeneratedAttribute]
private NugetId <NugetId>k__BackingField;
    public TargetFrameworkId TargetFrameworkId { get; }
    public NugetId NugetId { get; }
    public ProjectToPackageReferenceSearchDescriptor(IProjectSearchDescriptor ownerProject, TargetFrameworkId targetFrameworkId, NugetId nugetId);
    [CompilerGeneratedAttribute]
public sealed virtual TargetFrameworkId get_TargetFrameworkId();
    [CompilerGeneratedAttribute]
public sealed virtual NugetId get_NugetId();
    protected virtual void ToString(StringBuilder sb);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Search.ProjectToPackageReferenceSearchDescriptorEx : object {
    [ExtensionAttribute]
public static IProjectToPackageReferenceSearchDescriptor ToProjectToPackageReferenceSearchDescriptor(IProjectToPackageReference projectToPackageReference);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectToPackageReference TryFindPackageReference(IProject project, IProjectToPackageReferenceSearchDescriptor descriptor);
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.Search.ProjectToProjectReferenceSearchDescriptor : ProjectReferenceSearchDescriptor {
    [CompilerGeneratedAttribute]
private ProjectToProjectReferenceBySearchDescriptor <ProjectReference>k__BackingField;
    public ProjectToProjectReferenceBySearchDescriptor ProjectReference { get; }
    public ProjectToProjectReferenceSearchDescriptor(IProjectSearchDescriptor ownerProject, ProjectToProjectReferenceBySearchDescriptor reference);
    [CompilerGeneratedAttribute]
public sealed virtual ProjectToProjectReferenceBySearchDescriptor get_ProjectReference();
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.Search.ProjectToRoslynAnalyzerReferenceSearchDescriptor : ProjectReferenceSearchDescriptor {
    [CompilerGeneratedAttribute]
private RoslynAnalyzerReferenceDescriptor <RoslynReference>k__BackingField;
    public RoslynAnalyzerReferenceDescriptor RoslynReference { get; }
    public ProjectToRoslynAnalyzerReferenceSearchDescriptor(IProjectSearchDescriptor ownerProject, RoslynAnalyzerReferenceDescriptor reference);
    [CompilerGeneratedAttribute]
public sealed virtual RoslynAnalyzerReferenceDescriptor get_RoslynReference();
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.Search.ProjectToSdkReferenceSearchDescriptor : ProjectReferenceSearchDescriptor {
    [CompilerGeneratedAttribute]
private ProjectToSdkReferenceDescriptor <SdkReference>k__BackingField;
    public ProjectToSdkReferenceDescriptor SdkReference { get; }
    public ProjectToSdkReferenceSearchDescriptor(IProjectSearchDescriptor ownerProject, ProjectToSdkReferenceDescriptor reference);
    [CompilerGeneratedAttribute]
public sealed virtual ProjectToSdkReferenceDescriptor get_SdkReference();
}
public class JetBrains.ProjectModel.Search.ReferencesFolderDescriptor : object {
    [CompilerGeneratedAttribute]
private IProjectSearchDescriptor <OwnerProject>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferencesFolderKind <Kind>k__BackingField;
    public IProjectSearchDescriptor OwnerProject { get; }
    public ReferencesFolderKind Kind { get; }
    public ReferencesFolderDescriptor(IProjectSearchDescriptor ownerProject, ReferencesFolderKind kind);
    [CompilerGeneratedAttribute]
public sealed virtual IProjectSearchDescriptor get_OwnerProject();
    [CompilerGeneratedAttribute]
public sealed virtual ReferencesFolderKind get_Kind();
}
public enum JetBrains.ProjectModel.Search.ReferencesFolderKind : Enum {
    public int value__;
    public static ReferencesFolderKind None;
    public static ReferencesFolderKind Root;
    public static ReferencesFolderKind Target;
    public static ReferencesFolderKind Assemblies;
    public static ReferencesFolderKind Frameworks;
    public static ReferencesFolderKind Packages;
    public static ReferencesFolderKind Projects;
    public static ReferencesFolderKind Sdks;
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.Search.SolutionSearchDescriptor : object {
    public static SolutionSearchDescriptor Instance;
    private static SolutionSearchDescriptor();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Search.SolutionSearchDescriptorEx : object {
    [ExtensionAttribute]
public static ISolutionSearchDescriptor ToSolutionSearchDescriptor(ISolution solution);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.Settings.Cache.GlobalSettingsCache : SettingsCacheBase {
    public GlobalSettingsCache(Lifetime lifetime, ISettingsStore settingsStore);
}
public class JetBrains.ProjectModel.Settings.Cache.ProjectSettingsCache : SettingsCacheBase {
    public ProjectSettingsCache(Lifetime lifetime, IProject project, ISettingsStore settingsStore);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.Settings.Cache.SettingsCacheManager : object {
    [NotNullAttribute]
private ISettingsCache myGlobalSettingsCache;
    [NotNullAttribute]
private DataContexts myDataContexts;
    private Pair`2<ISolution, SolutionSettingsCacheOverrider> mySolutionAndOverrider;
    [CompilerGeneratedAttribute]
private ISettingsCache <SolutionCache>k__BackingField;
    internal ISolution Solution { get; internal set; }
    internal ISettingsCache SolutionCache { get; internal set; }
    public SettingsCacheManager(ISettingsCache globalSettingsCache, DataContexts dataContexts);
    internal ISolution get_Solution();
    internal void set_Solution(ISolution value);
    [CompilerGeneratedAttribute]
internal ISettingsCache get_SolutionCache();
    [CompilerGeneratedAttribute]
internal void set_SolutionCache(ISettingsCache value);
    [NotNullAttribute]
public ISettingsCache GetCache(IDataContext dataContext);
    [NotNullAttribute]
public ISettingsCache GetCache(IProjectModelElement project);
    public bool IsOverriden(ISolution solution);
    [NotNullAttribute]
public ISettingsCache GetCache(ISolution solution);
    [NotNullAttribute]
public ISettingsCache GetCache(Func`3<Lifetime, DataContexts, IDataContext> func);
}
[SolutionComponentAttribute("18")]
public class JetBrains.ProjectModel.Settings.Cache.SolutionSettingsCache : SettingsCacheBase {
    public SolutionSettingsCache(Lifetime lifetime, ISolution solution, ISettingsStore settingsStore, GlobalSettingsCache globalSettingsCache, SettingsCacheManager manager);
    protected virtual bool ContextsHaveDifferencesInternal(Func`3<Lifetime, DataContexts, IDataContext> dc1, Func`3<Lifetime, DataContexts, IDataContext> dc2, SettingsKey key);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ProjectModel.Settings.Cache.SolutionSettingsCacheOverrider : object {
    [CompilerGeneratedAttribute]
private ISettingsCache <OverrideValue>k__BackingField;
    [CanBeNullAttribute]
public ISettingsCache OverrideValue { get; private set; }
    [CompilerGeneratedAttribute]
public ISettingsCache get_OverrideValue();
    [CompilerGeneratedAttribute]
private void set_OverrideValue(ISettingsCache value);
    public void OverrideSettingsCache(Lifetime lifetime, ISettingsCache cache);
}
public class JetBrains.ProjectModel.Settings.ProjectSyncSettings : object {
    [CompilerGeneratedAttribute]
private bool <IsBackendCapableOfSync>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseVisualStudioByDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<VirtualFileSystemPath, bool> <UseVisualStudioForProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlySet`1<string> <UnsupportedOnBackendProjectExtensions>k__BackingField;
    public static ProjectSyncSettings BackendIsDisabled;
    public bool IsBackendCapableOfSync { get; }
    public bool UseVisualStudioByDefault { get; }
    public IReadOnlyDictionary`2<VirtualFileSystemPath, bool> UseVisualStudioForProjects { get; }
    public IReadOnlySet`1<string> UnsupportedOnBackendProjectExtensions { get; }
    public ProjectSyncSettings(bool isBackendCapableOfSync, bool useVisualStudioByDefault, IReadOnlyDictionary`2<VirtualFileSystemPath, bool> useVisualStudioForProjects);
    private static ProjectSyncSettings();
    [CompilerGeneratedAttribute]
public bool get_IsBackendCapableOfSync();
    [CompilerGeneratedAttribute]
public bool get_UseVisualStudioByDefault();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<VirtualFileSystemPath, bool> get_UseVisualStudioForProjects();
    [CompilerGeneratedAttribute]
public IReadOnlySet`1<string> get_UnsupportedOnBackendProjectExtensions();
    protected bool Equals(ProjectSyncSettings other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void Write(UnsafeWriter writer);
    public static ProjectSyncSettings Read(UnsafeReader reader);
}
[SolutionInstanceComponentAttribute("0")]
public class JetBrains.ProjectModel.Settings.ProjectSyncSettingsComponent : object {
    [CompilerGeneratedAttribute]
private IProperty`1<ProjectSyncSettings> <Settings>k__BackingField;
    public IProperty`1<ProjectSyncSettings> Settings { get; }
    public ProjectSyncSettingsComponent(Lifetime lifetime, ILogger logger, ISolution solution, SolutionFileLocationLive solutionLocationLive, ISettingsStore settingsStore, IFileSystemTracker fileSystemTracker, SolutionSettingsReadyForSolutionInstanceComponent settingsReadyForSolutionInstanceComponent);
    [CompilerGeneratedAttribute]
public IProperty`1<ProjectSyncSettings> get_Settings();
    private void SyncFromSettings(IContextBoundSettingsStore boundSettingsStore, VirtualFileSystemPath solutionFileLocation, VirtualFileSystemPath solutionLocation);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Settings.ProjectSyncSettingsComponentEx : object {
    [ExtensionAttribute]
public static bool IsProjectSyncedOnBackend(ProjectSyncSettingsComponent component, IProject project);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Settings.ProjectSyncSettingsEx : object {
    [ExtensionAttribute]
public static bool IsProjectSyncedOnBackend(ProjectSyncSettings settings, VirtualFileSystemPath projectFilePathOrProjectLocationInCaseOfWebsite);
    [ExtensionAttribute]
public static bool IsProjectSyncedOnBackend(ProjectSyncSettings settings, IProject project);
}
[SettingsKeyAttribute("JetBrains.ProjectModel.Settings.Schema.HierarchySettings", "JetBrains.ProjectModel.Resources.Strings", "ConfiguresSolutionAndProjectBuildSettingDescription")]
public class JetBrains.ProjectModel.Settings.Schema.BuildSettings : object {
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.ProjectModel.Resources.Strings", "EnvironmentHierarchySettingsInVisualStudioThisIsTheSolutionProjectModelSettingDescription")]
public class JetBrains.ProjectModel.Settings.Schema.HierarchySettings : object {
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "JetBrains.ProjectModel.Resources.Strings", "ProjectModelSynchronizerSettingsSettingDescription")]
public class JetBrains.ProjectModel.Settings.Schema.ProjectModelSynchronizerSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "WhetherToUseMSBuildToObtainProjectReferencesAndGeneratedFilesSettingDescription")]
public UseMsbuild UseMsbuildStrategy;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "WhetherToRunMsbuildWithinVisualStudioOrUseExternalProcessSettingDescription")]
public RunMsbuild RunMsbuildStrategy;
    [SettingsIndexedEntryAttribute("JetBrains.ProjectModel.Resources.Strings", "TargetsToExecuteToObtainAssemblyReferencesSettingDescription")]
public IIndexedEntry`2<string, bool> AssemblyTargets;
    [SettingsIndexedEntryAttribute("JetBrains.ProjectModel.Resources.Strings", "TargetsToExecuteToFetchGeneratedFilesToBeCompiledAlongWithSourcesSettingDescription")]
public IIndexedEntry`2<string, bool> ItemTargets;
    [SettingsIndexedEntryAttribute("JetBrains.ProjectModel.Resources.Strings", "ItemTypesToFetchAsCompileFilesAlongWithTheirBuildActionSettingDescription")]
public IIndexedEntry`2<string, string> CompileItemTypes;
    [SettingsIndexedEntryAttribute("JetBrains.ProjectModel.Resources.Strings", "ProjectGuidsThatNeedMsbuildCalledSettingDescription")]
public IIndexedEntry`2<GuidIndex, bool> ProjectGuidsToAlwaysCallMsbuild;
    [SettingsIndexedEntryAttribute("JetBrains.ProjectModel.Resources.Strings", "AdditionalAssemblyReferencesPerProjectSettingDescription")]
public IIndexedEntry`2<GuidIndex, string> ProjectGuidsToAssemblyReferenceList;
    [SettingsIndexedEntryAttribute("JetBrains.ProjectModel.Resources.Strings", "AdditionalCompileItemsPerProjectSettingDescription")]
public IIndexedEntry`2<GuidIndex, string> ProjectGuidsToCompileItemsList;
    [SettingsIndexedEntryAttribute("JetBrains.ProjectModel.Resources.Strings", "DontUseReferencesProvidedByRoslynUseCOMAPISettingDescription")]
public IIndexedEntry`2<GuidIndex, bool> DontUseRoslynToObtainReferences;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "WhetherToLoadProjectModelFromVisualStudioCOMAPIOrFromFilesOnDiskSettingDescription")]
public bool ReadProjectModelFromDisk;
    [SettingsIndexedEntryAttribute("JetBrains.ProjectModel.Resources.Strings", "RelativePathsToProjectFilesOrProjectFolderInCaseOfAWebsiteToLoadFromVisualStudioUsingCOMAPIIfAPathCannotBeMadeRelativeAbsolutePathWillBeUsedSettingDescription")]
public IIndexedEntry`2<VirtualFileSystemPath, bool> ProjectPathsToLoadFromDisk;
}
public class JetBrains.ProjectModel.Settings.Schema.ProjectModelSynchronizerSettingsAccessor : object {
    public static Expression`1<Func`2<ProjectModelSynchronizerSettings, IIndexedEntry`2<string, bool>>> AssemblyTargets;
    public static Expression`1<Func`2<ProjectModelSynchronizerSettings, IIndexedEntry`2<string, bool>>> ItemTargets;
    public static Expression`1<Func`2<ProjectModelSynchronizerSettings, IIndexedEntry`2<string, string>>> CompileItemTypes;
    private static ProjectModelSynchronizerSettingsAccessor();
}
public enum JetBrains.ProjectModel.Settings.Schema.RunMsbuild : Enum {
    public int value__;
    public static RunMsbuild EXTERNAL;
    public static RunMsbuild VISUAL_STUDIO;
}
public enum JetBrains.ProjectModel.Settings.Schema.UseMsbuild : Enum {
    public int value__;
    public static UseMsbuild NEVER;
    public static UseMsbuild AUTO;
    public static UseMsbuild ALWAYS;
}
public interface JetBrains.ProjectModel.Settings.Storages.IProjectSettingsDisabler {
    public abstract virtual bool ShouldDisableProjectSettings();
}
public static class JetBrains.ProjectModel.Settings.Storages.ProjectModelSettingsStorageMountPointPriorityClasses : object {
    public static double SolutionShared;
    public static double SolutionUser;
    public static double ProjectShared;
    public static double ProjectUser;
    public static double ConfigFiles;
    private static ProjectModelSettingsStorageMountPointPriorityClasses();
}
public class JetBrains.ProjectModel.Settings.Storages.ProjectSettingsStorage : SettingsStorageProviderBaseInChildContainer {
    public ProjectSettingsStorage(Lifetime lifetime, string name, IProperty`1<FileSystemPath> path, bool isWritable, double priority, IIsAvailable isAvailable, SavingEmptyContent whenNoContent, IThreading threading, IFileSystemTracker filetracker, IFileSettingsStorageBehavior behavior, SettingsStorageProvidersCollection expose, InternKeyPathComponent interned, IEnumerable`1<KeyValuePair`2<PropertyId, object>> metadata);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.Settings.Storages.ProjectSettingsStorageComponent : object {
    private Lifetime myLifetime;
    private ILogger myLogger;
    private ViewableCollection`1<SettingsPerProject> mySettingsPerProject;
    private Dictionary`2<IProject, SettingsPerProject> mySettingsPerProjectMap;
    public static string LayerIdPersonal;
    private static Dictionary`2<PropertyId, object> ourMountsMetadataPersonal;
    public static string LayerIdShared;
    private static Dictionary`2<PropertyId, object> ourMountsMetadataShared;
    private OneToListMap`2<SettingsEntry, Action`1<SettingsPerProject>> myOnChangedHandlers;
    private List`1<Action`2<Lifetime, SettingsPerProject>> myProjectSettingsLifetimeHandlers;
    public ProjectSettingsStorageComponent(DelayedInitialization initialization, Lifetime lifetime, IViewableProjectsCollection viewableProjects, IThreading threading, IFileSystemTracker filetracker, SettingsStorageProvidersCollection settingsStorageProviders, IShellLocks locks, IFileSettingsStorageBehavior behavior, InternKeyPathComponent interned, ISettingsStore settingsStore, IEnumerable`1<IProjectSettingsDisabler> projectSettingsDisablers, ILogger logger);
    private static ProjectSettingsStorageComponent();
    private void BindProjectSettings(IThreading threading, IFileSystemTracker filetracker, SettingsStorageProvidersCollection settingsStorageProviders, IShellLocks locks, IFileSettingsStorageBehavior behavior, InternKeyPathComponent interned, ISettingsStore settingsStore, Lifetime lt, IProject projectIn);
    private void OnProjectSettingsChanged(SettingsStoreChangeArgs args, SettingsPerProject settingsPerProject);
    [NotNullAttribute]
private static IProperty`1<FileSystemPath> GetProjectStoragePath(Lifetime lifetime, bool isPersonal, IProject projectIn);
    [CanBeNullAttribute]
public static FileSystemPath ConvertProjectFilePathToSettingsStoragePath(string projectName, FileSystemPath projectLocation, FileSystemPath projectFilePath, XmlExternalizationScope scope);
    [CanBeNullAttribute]
public static FileSystemPath GetLegacySettingsFilePath(IProject project, XmlExternalizationScope scope);
    [ObsoleteAttribute("To listen to settings changes use AdviseProjectSettingChange")]
public sealed virtual void View(Lifetime lifetime, Action`2<Lifetime, SettingsPerProject> viewer);
    public void AdviseProjectSettingChange(Lifetime lifetime, SettingsEntry settingsEntry, Action`1<SettingsPerProject> onProjectSettingsChanged, Action`2<Lifetime, SettingsPerProject> lifetimeHandler);
    public void ExecuteWithProjectSettings(IProject project, Action`1<SettingsPerProject> withProjectSettings);
    public SettingsPerProject GetProjectSettings(IProject project);
}
public abstract class JetBrains.ProjectModel.Settings.Storages.SettingsStorageProviderBaseInChildContainer : FileSettingsStorageProviderBase {
    protected SettingsStorageProviderBaseInChildContainer(Lifetime lifetime, string name, IProperty`1<FileSystemPath> path, bool isWritable, double priority, IIsAvailable isAvailable, SavingEmptyContent whenNoContent, IThreading threading, IFileSystemTracker filetracker, IFileSettingsStorageBehavior behavior, SettingsStorageProvidersCollection expose, InternKeyPathComponent interned, IEnumerable`1<KeyValuePair`2<PropertyId, object>> metadata);
}
[SolutionInstanceComponentAttribute("0")]
public class JetBrains.ProjectModel.Settings.Storages.SolutionSettingsReadyForSolutionInstanceComponent : object {
    private SettingsStoreWarmer myWarmer;
    public SolutionSettingsReadyForSolutionInstanceComponent(SettingsStoreWarmer warmer, SolutionSettingsStoragePersonal needToBeReady, SolutionSettingsStorageShared needToBeReady2);
    [ComponentAttribute("258")]
public ISettingsStore GetSettingsStoreForSolutionInstance();
}
public abstract class JetBrains.ProjectModel.Settings.Storages.SolutionSettingsStorageBase : SettingsStorageProviderBaseInChildContainer {
    protected SolutionSettingsStorageBase(Lifetime lifetime, ISolution solution, bool isPersonal, IThreading c1, IFileSystemTracker c2, SettingsStorageProvidersCollection expose, IShellLocks c3, IFileSettingsStorageBehavior c4, IEnumerable`1<KeyValuePair`2<PropertyId, object>> metadata, SolutionFileLocationLive c5, InternKeyPathComponent interned);
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.Settings.Storages.SolutionSettingsStoragePersonal : SolutionSettingsStorageBase {
    public static string LayerId;
    private static Dictionary`2<PropertyId, object> myMountsMetadata;
    public SolutionSettingsStoragePersonal(Lifetime lifetime, ISolution solution, IThreading c1, IFileSystemTracker c2, SettingsStorageProvidersCollection c3, IShellLocks c4, IFileSettingsStorageBehavior c5, SolutionFileLocationLive c6, IThemedIconManager iconman, InternKeyPathComponent interned);
    protected SolutionSettingsStoragePersonal(Lifetime lifetime, ISolution solution, IThreading c1, IFileSystemTracker c2, SettingsStorageProvidersCollection c3, IShellLocks c4, IFileSettingsStorageBehavior c5, SolutionFileLocationLive c6, IThemedIconManager iconman, InternKeyPathComponent interned, bool isWritable);
    private static SolutionSettingsStoragePersonal();
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.Settings.Storages.SolutionSettingsStorageShared : SolutionSettingsStorageBase {
    public static string LayerId;
    private static Dictionary`2<PropertyId, object> myMountsMetadata;
    public SolutionSettingsStorageShared(Lifetime lifetime, ISolution solution, IThreading c1, IFileSystemTracker c2, SettingsStorageProvidersCollection c3, IShellLocks c4, IFileSettingsStorageBehavior c5, SolutionFileLocationLive c6, IThemedIconManager iconman, InternKeyPathComponent interned);
    protected SolutionSettingsStorageShared(Lifetime lifetime, ISolution solution, IThreading c1, IFileSystemTracker c2, SettingsStorageProvidersCollection c3, IShellLocks c4, IFileSettingsStorageBehavior c5, SolutionFileLocationLive c6, IThemedIconManager iconman, InternKeyPathComponent interned, bool isWritable);
    private static SolutionSettingsStorageShared();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.Settings.Store.SolutionSettings : object {
    [CompilerGeneratedAttribute]
private Func`1<IContextBoundSettingsStore> <BindForWritingToSolutionPersonal>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<IContextBoundSettingsStore> <BindForWritingToSolutionShared>k__BackingField;
    [NotNullAttribute]
public Identity SolutionPersonalLayerId;
    [NotNullAttribute]
public Identity SolutionSharedLayerId;
    [NotNullAttribute]
public Func`1<IContextBoundSettingsStore> BindForWritingToSolutionPersonal { get; protected set; }
    [NotNullAttribute]
public Func`1<IContextBoundSettingsStore> BindForWritingToSolutionShared { get; protected set; }
    public SolutionSettings(ISolution solution, SolutionSettingsStorageShared shared, SolutionSettingsStoragePersonal personal, ISettingsStore store);
    [CompilerGeneratedAttribute]
public Func`1<IContextBoundSettingsStore> get_BindForWritingToSolutionPersonal();
    [CompilerGeneratedAttribute]
protected Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_BindForWritingToSolutionPersonal(Func`1<IContextBoundSettingsStore> value);
    [CompilerGeneratedAttribute]
public Func`1<IContextBoundSettingsStore> get_BindForWritingToSolutionShared();
    [CompilerGeneratedAttribute]
protected Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_BindForWritingToSolutionShared(Func`1<IContextBoundSettingsStore> value);
}
public interface JetBrains.ProjectModel.Settings.Upgrade.IProjectSettingsUpgrader {
    public abstract virtual void Upgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
}
public interface JetBrains.ProjectModel.Settings.Upgrade.ISolutionSettingsUpgrader {
    public abstract virtual void Upgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
[BaseTypeRequiredAttribute("JetBrains.ProjectModel.Settings.Upgrade.IProjectSettingsUpgrader")]
public class JetBrains.ProjectModel.Settings.Upgrade.ProjectSettingsUpgraderAttribute : ComponentAttribute {
    public ProjectSettingsUpgraderAttribute(Instantiation instantiation);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.Settings.Upgrade.SolutionSettingsUpgrade : SettingsUpgradeBase`2<ISolutionSettingsUpgrader, SolutionSettingsUpgraderAttribute> {
    private ISolution mySolution;
    private IApplicationHost myApplicationDescriptor;
    private ProductConfigurations myProductConfigurations;
    [CompilerGeneratedAttribute]
private ISettingsStore <SettingsStore>k__BackingField;
    public ISettingsStore SettingsStore { get; }
    public SolutionSettingsUpgrade(Lifetime lifetime, IComponentContainer parentContainer, ShellPartCatalogSet catalogueSet, ISettingsStore settingsStore, ISolution solution, IApplicationHost applicationDescriptor, ProductConfigurations productConfigurations, ResetSettings resetSettings, SolutionSettings solutionSettings);
    [CompilerGeneratedAttribute]
public ISettingsStore get_SettingsStore();
    protected virtual SettingsScalarEntry IsUpgradedFlagEntry(ISettingsSchema schema);
    protected virtual void DoUpgrade(ISolutionSettingsUpgrader settingsUpgrader, IComponentSettingsProvider solutionSettingsComponent, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
    protected virtual IComponentSettingsProvider CreateLegacySettingsComponent();
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "JetBrains.ProjectModel.Resources.Strings", "SolutionSettingsUpgradedSettingDescription")]
public class JetBrains.ProjectModel.Settings.Upgrade.SolutionSettingsUpgradedSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "SolutionSettingsUpgradedSettingDescription")]
public bool IsUpgraded;
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
[BaseTypeRequiredAttribute("JetBrains.ProjectModel.Settings.Upgrade.ISolutionSettingsUpgrader")]
public class JetBrains.ProjectModel.Settings.Upgrade.SolutionSettingsUpgraderAttribute : ComponentAttribute {
    public SolutionSettingsUpgraderAttribute(Instantiation instantiation);
}
public interface JetBrains.ProjectModel.Sharepoint.ISharepointDeploymentTypeTracker {
    public abstract virtual SharepointDeploymentType GetDeploymentType(IProjectFile projectFile);
}
public interface JetBrains.ProjectModel.Sharepoint.ISharepointFilesLocator {
    public VirtualFileSystemPath WebConfigPath { get; }
    public VirtualFileSystemPath PredefinedMasterFilesFolderPath { get; }
    public VirtualFileSystemPath PredefinedResourcesFolderPath { get; }
    public VirtualFileSystemPath PredefinedControlTemplatesPath { get; }
    public VirtualFileSystemPath PredefinedLayoutsPath { get; }
    public JetHashSet`1<string> NumberFoldersInLayouts { get; }
    public abstract virtual VirtualFileSystemPath get_WebConfigPath();
    public abstract virtual VirtualFileSystemPath get_PredefinedMasterFilesFolderPath();
    public abstract virtual VirtualFileSystemPath get_PredefinedResourcesFolderPath();
    public abstract virtual VirtualFileSystemPath get_PredefinedControlTemplatesPath();
    public abstract virtual VirtualFileSystemPath get_PredefinedLayoutsPath();
    public abstract virtual JetHashSet`1<string> get_NumberFoldersInLayouts();
}
public enum JetBrains.ProjectModel.Sharepoint.SharepointDeploymentType : Enum {
    public byte value__;
    public static SharepointDeploymentType NoDeployment;
    public static SharepointDeploymentType ElementManifest;
    public static SharepointDeploymentType ElementFile;
    public static SharepointDeploymentType TemplateFile;
    public static SharepointDeploymentType RootFile;
    public static SharepointDeploymentType ClassResource;
    public static SharepointDeploymentType ApplicationResource;
    public static SharepointDeploymentType AppGlobalResource;
    public static SharepointDeploymentType PackageOnly;
    public static SharepointDeploymentType Resource;
    public static SharepointDeploymentType DwpFile;
    public static SharepointDeploymentType AppPackage;
}
public class JetBrains.ProjectModel.Sharepoint.SharepointDeploymentTypeProperty : object {
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Sharepoint.SharepointDeploymentTypeTracker : object {
    [ExtensionAttribute]
public static SharepointDeploymentType GetDeploymentType(IProjectFile projectFile);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.Sharepoint.SharepointDeploymentTypeTrackerImpl : object {
    private static string SharepointProjecIitemSpdata;
    private ISolution mySolution;
    private ChangeManager myChangeManager;
    private IShellLocks myLocks;
    private IProjectModelBatchChangeManager myBatchChangeManager;
    private Dictionary`2<VirtualFileSystemPath, SharepointData> myEntries;
    private object myLockObject;
    public SharepointDeploymentTypeTrackerImpl(Lifetime lifetime, ISolution solution, ChangeManager changeManager, IShellLocks locks, IProjectModelBatchChangeManager batchChangeManager, IViewableProjectsCollection projectsCollection);
    private void OnFileAdded(IProjectFile spdataFile);
    private void NotifyAboutFiles(IList`1<Tuple`3<IProjectFile, SharepointDeploymentType, SharepointDeploymentType>> projectFiles);
    private void OnFileDeleted(VirtualFileSystemPath deletedFilePath);
    public sealed virtual SharepointDeploymentType GetDeploymentType(IProjectFile projectFile);
    private SharepointData GetEntry(VirtualFileSystemPath spdataFilePath);
    [NotNullAttribute]
protected VirtualFileSystemPath GetSpdataFilePath(VirtualFileSystemPath location);
}
[ShellComponentAttribute("10")]
public class JetBrains.ProjectModel.Sharepoint.SharepointFilesLocatorImpl : object {
    private object myLockObject;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <WebConfigPath>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <PredefinedMasterFilesFolderPath>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <PredefinedResourcesFolderPath>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <PredefinedControlTemplatesPath>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <PredefinedLayoutsPath>k__BackingField;
    [CompilerGeneratedAttribute]
private JetHashSet`1<string> <NumberFoldersInLayouts>k__BackingField;
    public VirtualFileSystemPath WebConfigPath { get; private set; }
    public VirtualFileSystemPath PredefinedMasterFilesFolderPath { get; private set; }
    public VirtualFileSystemPath PredefinedResourcesFolderPath { get; private set; }
    public VirtualFileSystemPath PredefinedControlTemplatesPath { get; private set; }
    public VirtualFileSystemPath PredefinedLayoutsPath { get; private set; }
    public JetHashSet`1<string> NumberFoldersInLayouts { get; private set; }
    public SharepointFilesLocatorImpl(Lifetime lifetime, FrameworkLocationService frameworkLocationService);
    protected void Initialize(IFrameworkLocationHelper helper);
    [CompilerGeneratedAttribute]
public sealed virtual VirtualFileSystemPath get_WebConfigPath();
    [CompilerGeneratedAttribute]
private void set_WebConfigPath(VirtualFileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual VirtualFileSystemPath get_PredefinedMasterFilesFolderPath();
    [CompilerGeneratedAttribute]
private void set_PredefinedMasterFilesFolderPath(VirtualFileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual VirtualFileSystemPath get_PredefinedResourcesFolderPath();
    [CompilerGeneratedAttribute]
private void set_PredefinedResourcesFolderPath(VirtualFileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual VirtualFileSystemPath get_PredefinedControlTemplatesPath();
    [CompilerGeneratedAttribute]
private void set_PredefinedControlTemplatesPath(VirtualFileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual VirtualFileSystemPath get_PredefinedLayoutsPath();
    [CompilerGeneratedAttribute]
private void set_PredefinedLayoutsPath(VirtualFileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual JetHashSet`1<string> get_NumberFoldersInLayouts();
    [CompilerGeneratedAttribute]
private void set_NumberFoldersInLayouts(JetHashSet`1<string> value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(Lifetime lt, IFrameworkLocationHelper helper);
}
public class JetBrains.ProjectModel.SimpleProjectOutputChange : object {
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssembly <NewOutputAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssembly <OldOutputAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFrameworkId>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectModelChangeType <ChangeType>k__BackingField;
    [NotNullAttribute]
public IProject Project { get; }
    [CanBeNullAttribute]
public IAssembly NewOutputAssembly { get; }
    [CanBeNullAttribute]
public IAssembly OldOutputAssembly { get; }
    [NotNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; }
    public ProjectModelChangeType ChangeType { get; }
    public SimpleProjectOutputChange(IProject projectWithOutput, IAssembly newOutputAssembly, IAssembly oldOutputAssembly, ProjectModelChangeType changeType, TargetFrameworkId targetFrameworkId);
    [CompilerGeneratedAttribute]
public IProject get_Project();
    [CompilerGeneratedAttribute]
public IAssembly get_NewOutputAssembly();
    [CompilerGeneratedAttribute]
public IAssembly get_OldOutputAssembly();
    [CompilerGeneratedAttribute]
public TargetFrameworkId get_TargetFrameworkId();
    [CompilerGeneratedAttribute]
public ProjectModelChangeType get_ChangeType();
}
[ProjectFileTypeDefinitionAttribute("Skin")]
public class JetBrains.ProjectModel.SkinProjectFileType : AspProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static SkinProjectFileType <Instance>k__BackingField;
    public static string SKIN_EXTENSION;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static SkinProjectFileType Instance { get; private set; }
    protected SkinProjectFileType(string name);
    protected SkinProjectFileType(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static SkinProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(SkinProjectFileType value);
}
public class JetBrains.ProjectModel.SolutionChange : ProjectModelChange {
    protected string ElementPath { get; }
    protected string ElementDescription { get; }
    public SolutionChange(IList`1<ProjectModelChange> childrenDeltas, ISolution solution, ProjectModelChangeType changeType);
    protected virtual void CollectAffectedSolutionFiles(HashSet`1<IProjectFile> affectedSolutionFiles);
    public virtual ProjectModelChange Propagate();
    public virtual void Accept(IProjectModelChangeDeltaVisitor visitor);
    protected virtual string get_ElementPath();
    protected virtual string get_ElementDescription();
}
[AttributeUsageAttribute("196")]
[MeansImplicitUseAttribute("8")]
[ComponentInstantiationAttribute("-32758")]
public class JetBrains.ProjectModel.SolutionComponentAttribute : ProductComponentAttribute {
    public SolutionComponentAttribute(Instantiation instantiation);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.SolutionComponentToShellComponentProvider : object {
    public SolutionComponentToShellComponentProvider(Lifetime lifetime, SolutionManagerBase solutionManager, IComponentContainer componentContainer, IEnumerable`1<IShellComponentDependentFromSolutionComponent> shellComponents);
    private static void SetComponent(Lifetime lifetime, IComponentContainer componentContainer, IShellComponentDependentFromSolutionComponent`1<TComponent> shellComponent, object readonlyToken);
}
[AttributeUsageAttribute("196")]
[MeansImplicitUseAttribute("8")]
public class JetBrains.ProjectModel.SolutionComponentWithPriorityAttribute : SolutionComponentAttribute {
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    public int Priority { get; }
    public SolutionComponentWithPriorityAttribute(int priority, Instantiation instantiation);
    [CompilerGeneratedAttribute]
public int get_Priority();
    public sealed virtual int CompareTo(SolutionComponentWithPriorityAttribute other);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.SolutionEx : object {
    [ExtensionAttribute]
[PureAttribute]
[ObsoleteAttribute("Use GetSolutionLifetimes() and select the lifetime you need.")]
public static Lifetime GetLifetime(ISolution solution);
    [ExtensionAttribute]
public static SolutionLifetimes GetSolutionLifetimes(ISolution solution);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static TComponent GetSolutionInstanceComponent(ISolution solution);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static TComponent GetComponent(ISolution solution);
    [ExtensionAttribute]
[ItemNotNullAttribute]
[PureAttribute]
public static ValueTask`1<TComponent> GetComponentAsync(ISolution solution);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static IEnumerable`1<TComponent> GetComponents(ISolution solution);
    [ExtensionAttribute]
[PureAttribute]
public static ValueTask`1<IEnumerable`1<TComponent>> GetComponentsAsync(ISolution solution, TaskPriority taskPriority);
    [ExtensionAttribute]
[CanBeNullAttribute]
[PureAttribute]
public static TComponent TryGetComponent(ISolution solution);
    [ExtensionAttribute]
[PureAttribute]
public static bool HasComponent(ISolution solution);
    [ExtensionAttribute]
[CanBeNullAttribute]
[PureAttribute]
public static IProject GetProjectByName(ISolution solution, string name);
    [ExtensionAttribute]
[CanBeNullAttribute]
[PureAttribute]
public static IProject GetProjectByGuid(ISolution solution, Guid projectGuid);
    [ExtensionAttribute]
[CanBeNullAttribute]
[PureAttribute]
public static IProject FindProjectByProjectFilePath(ISolution solution, VirtualFileSystemPath projectFilePath);
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.SolutionEx/<FindProjectsByProjectFilePath>d__12")]
[ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static IEnumerable`1<IProject> FindProjectsByProjectFilePath(ISolution solution, VirtualFileSystemPath projectFilePath);
    [NotNullAttribute]
[PureAttribute]
[ObsoleteAttribute("Please use the other overload")]
public static IContextBoundSettingsStore GetSettingsStore(ISolution solution);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static IContextBoundSettingsStore GetSettingsStore(ISolution solution, ISettingsStore settingsStore);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static IContextBoundSettingsStore GetLazySettingsStore(ISolution solution, ISettingsStore settingsStore);
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
[NotNullAttribute]
public static IDisposable UsingCommand(ISolution self, string commandName);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.SolutionExplorerEx : object {
    [ExtensionAttribute]
public static bool ShowInSolutionExplorer(ISolutionExplorer self, IProjectItem projectItem, bool activate);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.SolutionFileLocationLive : object {
    [NotNullAttribute]
public IProperty`1<VirtualFileSystemPath> SolutionFileLocation;
    [NotNullAttribute]
public IProperty`1<VirtualFileSystemPath> SolutionDirectory;
    public SolutionFileLocationLive(Lifetime lifetime, ChangeManager changemanager, ISolution solution, IShellLocks locks);
}
[ObsoleteAttribute]
public interface JetBrains.ProjectModel.SolutionFileParser.ISlnFile {
    public VirtualFileSystemPath Location { get; }
    public SolutionFormatVersion FormatVersion { get; }
    public OneToListMap`2<string, SlnFileGlobalSection> GlobalSections { get; }
    public List`1<SlnFileProject> Projects { get; }
    public bool HasErrors { get; }
    public string ErrorMessage { get; }
    public abstract virtual VirtualFileSystemPath get_Location();
    public abstract virtual SolutionFormatVersion get_FormatVersion();
    public abstract virtual OneToListMap`2<string, SlnFileGlobalSection> get_GlobalSections();
    public abstract virtual List`1<SlnFileProject> get_Projects();
    public abstract virtual bool get_HasErrors();
    public abstract virtual string get_ErrorMessage();
    public abstract virtual void Dump(TextWriter writer);
}
[ObsoleteAttribute]
public class JetBrains.ProjectModel.SolutionFileParser.SlnFileGlobalSection : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private OneToListMap`2<string, string> <Properties>k__BackingField;
    public string Name { get; }
    public string Value { get; }
    public OneToListMap`2<string, string> Properties { get; }
    public SlnFileGlobalSection(string name, string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public OneToListMap`2<string, string> get_Properties();
    public void AddProperty(string name, string value);
    public void Dump(TextWriter writer, string indent);
}
[ObsoleteAttribute]
public class JetBrains.ProjectModel.SolutionFileParser.SlnFileProject : object {
    private string myProjectLocation;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <SolutionFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ProjectGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ProjectTypeGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private OneToListMap`2<string, SlnFileProjectSection> <ProjectSections>k__BackingField;
    public VirtualFileSystemPath SolutionFilePath { get; }
    public string ProjectName { get; }
    public Guid ProjectGuid { get; }
    public Guid ProjectTypeGuid { get; }
    public OneToListMap`2<string, SlnFileProjectSection> ProjectSections { get; }
    public SlnFileProject(string projectName, Guid projectGuid, Guid projectTypeGuid, string projectLocation, VirtualFileSystemPath solutionFilePath);
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_SolutionFilePath();
    [CompilerGeneratedAttribute]
public string get_ProjectName();
    [CompilerGeneratedAttribute]
public Guid get_ProjectGuid();
    [CompilerGeneratedAttribute]
public Guid get_ProjectTypeGuid();
    [NotNullAttribute]
public VirtualFileSystemPath GetLocation();
    [CompilerGeneratedAttribute]
public OneToListMap`2<string, SlnFileProjectSection> get_ProjectSections();
    public void Dump(TextWriter writer, string indent);
}
[ObsoleteAttribute]
public class JetBrains.ProjectModel.SolutionFileParser.SlnFileProjectSection : object {
    [CompilerGeneratedAttribute]
private string <SectionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SectionValue>k__BackingField;
    [CompilerGeneratedAttribute]
private OneToListMap`2<string, string> <Properties>k__BackingField;
    public string SectionName { get; }
    public string SectionValue { get; }
    public OneToListMap`2<string, string> Properties { get; }
    public SlnFileProjectSection(string sectionName, string sectionValue);
    [CompilerGeneratedAttribute]
public string get_SectionName();
    [CompilerGeneratedAttribute]
public string get_SectionValue();
    [CompilerGeneratedAttribute]
public OneToListMap`2<string, string> get_Properties();
    public void AddProperty(string name, string value);
    public void Dump(TextWriter writer, string indent);
}
public class JetBrains.ProjectModel.SolutionFileParser.SolutionFileParser : object {
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private SolutionFormatVersion <FormatVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private OneToListMap`2<string, SlnFileGlobalSection> <GlobalSections>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SlnFileProject> <Projects>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    public VirtualFileSystemPath Location { get; }
    public SolutionFormatVersion FormatVersion { get; }
    public OneToListMap`2<string, SlnFileGlobalSection> GlobalSections { get; }
    public List`1<SlnFileProject> Projects { get; }
    public bool HasErrors { get; }
    public string ErrorMessage { get; }
    private SolutionFileParser(VirtualFileSystemPath solutionFilePath, IResult`1<SolutionNode> result);
    [ObsoleteAttribute("Use JetBrains.Application.SinceClr4.BuildScript.Compile.SolutionFileParser.Parser.Solution.Parse or JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.SolutionDefinition")]
public static ISlnFile ParseFile(VirtualFileSystemPath solutionFilePath);
    [CompilerGeneratedAttribute]
public sealed virtual VirtualFileSystemPath get_Location();
    [CompilerGeneratedAttribute]
public sealed virtual SolutionFormatVersion get_FormatVersion();
    [CompilerGeneratedAttribute]
public sealed virtual OneToListMap`2<string, SlnFileGlobalSection> get_GlobalSections();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<SlnFileProject> get_Projects();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasErrors();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ErrorMessage();
    public sealed virtual void Dump(TextWriter writer);
}
public class JetBrains.ProjectModel.SolutionInstance : object {
    public static string SolutionContainerId;
    public static string SolutionInstanceContainerId;
    private static ILogger ourPerformanceLogger;
    public static string PerformanceMarkerStartSolutionInstanceContainer;
    public static string PerformanceMarkerFinishSolutionInstanceContainer;
    public static string PerformanceMarkerStartSolutionContainer;
    public static string PerformanceMarkerFinishSolutionContainer;
    private LifetimeDefinition myLifetimeDefinition;
    private LifetimeDefinition myLifetimeDefinitionUntilSolutionCloseLifetime;
    [CompilerGeneratedAttribute]
private SolutionElement <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private ComponentContainer <SolutionComponentContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private ComponentContainer <InstanceComponentContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInstanceContainerComposed>k__BackingField;
    [CompilerGeneratedAttribute]
private IInitializationStrategy <InitializationStrategy>k__BackingField;
    public Lifetime Lifetime { get; }
    public Lifetime UntilSolutionCloseLifetime { get; }
    public SolutionElement Solution { get; }
    public ComponentContainer SolutionComponentContainer { get; }
    public ComponentContainer InstanceComponentContainer { get; }
    public bool IsInstanceContainerComposed { get; private set; }
    public IInitializationStrategy InitializationStrategy { get; }
    public SolutionInstance(IPartCatalogSet catalogSet, IComponentContainer parentContainer, SolutionElement solution, IEnumerable`1<ISolutionInstanceComponentContainerExtender> solutionInstanceComponentContainerExtenders, IEnumerable`1<ISolutionComponentContainerExtender> solutionComponentContainerExtenders, Func`2<Lifetime, IInitializationStrategy> getInitializationStrategy);
    private static SolutionInstance();
    public Lifetime get_Lifetime();
    public Lifetime get_UntilSolutionCloseLifetime();
    [CompilerGeneratedAttribute]
public SolutionElement get_Solution();
    [CompilerGeneratedAttribute]
public ComponentContainer get_SolutionComponentContainer();
    [CompilerGeneratedAttribute]
public ComponentContainer get_InstanceComponentContainer();
    [CompilerGeneratedAttribute]
public bool get_IsInstanceContainerComposed();
    [CompilerGeneratedAttribute]
private void set_IsInstanceContainerComposed(bool value);
    [CompilerGeneratedAttribute]
public IInitializationStrategy get_InitializationStrategy();
    public Task OpenSolutionInstanceAsync(ISolutionLoadTasksScheduler taskScheduler);
    public Task OpenSolutionAsync(ISolutionOwner solutionOwner, ISolutionLoadTasksScheduler taskScheduler);
    private void ThrowInitialChanges();
    public void BeforeCloseSolutionInstance();
    public void CloseSolutionInstance();
    private static void SetCloseToHierarchy(IProject project);
    public static IComponentContainer GetContainer(ISolution solution);
    public static IComponentContainer GetInstanceContainer(ISolution solution);
    public static SolutionLifetimes GetSolutionLifetimes(ISolution solution);
    public static IInitializationStrategy GetInitializationStrategy(Lifetime lifetime, IThreading threading, IAsyncComposeManager asyncComposeManager, bool sync);
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute("8")]
[ComponentInstantiationAttribute("-32758")]
public class JetBrains.ProjectModel.SolutionInstanceComponentAttribute : ProductComponentAttribute {
    public SolutionInstanceComponentAttribute(Instantiation instantiation);
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute("8")]
public class JetBrains.ProjectModel.SolutionInstanceServiceAttribute : SolutionInstanceComponentAttribute {
    public SolutionInstanceServiceAttribute(Instantiation instantiation);
}
[IsReadOnlyAttribute]
public class JetBrains.ProjectModel.SolutionLifetimes : ValueType {
    [CompilerGeneratedAttribute]
private Lifetime <MaximumLifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private Lifetime <UntilSolutionCloseLifetime>k__BackingField;
    public Lifetime MaximumLifetime { get; }
    public Lifetime UntilSolutionCloseLifetime { get; }
    public SolutionLifetimes(Lifetime maximumLifetime, Lifetime untilSolutionCloseLifetime);
    [CompilerGeneratedAttribute]
public Lifetime get_MaximumLifetime();
    [CompilerGeneratedAttribute]
public Lifetime get_UntilSolutionCloseLifetime();
}
public enum JetBrains.ProjectModel.SolutionLoadStates : Enum {
    public int value__;
    public static SolutionLoadStates Closed;
    public static SolutionLoadStates BackgroundLoad;
    public static SolutionLoadStates Load;
    public static SolutionLoadStates Synchronized;
}
public abstract class JetBrains.ProjectModel.SolutionManagerBase : object {
    protected IPartCatalogSet myCatalogSet;
    protected IComponentContainer myComponentContainer;
    protected IShellLocks Locks;
    protected ILogger myLogger;
    private IAsyncComposeManager myAsyncComposeManager;
    [CompilerGeneratedAttribute]
private SolutionManagerEvents <SolutionManagerEvents>k__BackingField;
    [CanBeNullAttribute]
private ISolution mySolution;
    private Lifetime myLifetime;
    private ISolutionLoadTasksSchedulerProvider myTaskSchedulerProvider;
    private IEnumerable`1<IQuerySolutionCloseHandler> myQuerySolutionCloseHandlers;
    private SynchronizationPoint mySyncPoint;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ISolutionInstanceComponentContainerExtender> <SolutionInstanceComponentContainerExtenders>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ISolutionComponentContainerExtender> <SolutionComponentContainerExtenders>k__BackingField;
    [CanBeNullAttribute]
private ISolutionLoadTasksScheduler myTaskScheduler;
    private ReadonlyToken myReadonlyToken;
    [NotNullAttribute]
[GuardAttribute("1")]
public IProperty`1<IComponentContainer> SolutionInstanceContainerNonComposed;
    [NotNullAttribute]
[GuardAttribute("1")]
public IProperty`1<IComponentContainer> SolutionInstanceContainerComposed;
    [NotNullAttribute]
[GuardAttribute("1")]
public IProperty`1<IComponentContainer> SolutionContainerNonComposed;
    [NotNullAttribute]
[GuardAttribute("1")]
public IProperty`1<IComponentContainer> SolutionContainerComposed;
    [CompilerGeneratedAttribute]
private SolutionInstance <CurrentSolutionInstance>k__BackingField;
    public SolutionManagerEvents SolutionManagerEvents { get; }
    protected IEnumerable`1<ISolutionInstanceComponentContainerExtender> SolutionInstanceComponentContainerExtenders { get; }
    protected IEnumerable`1<ISolutionComponentContainerExtender> SolutionComponentContainerExtenders { get; }
    [CanBeNullAttribute]
public SolutionInstance CurrentSolutionInstance { get; private set; }
    [CanBeNullAttribute]
public ISolution CurrentSolution { get; }
    [NotNullAttribute]
public ISolutionLoadTasksScheduler TaskScheduler { get; }
    public bool IsRealSolutionOwner { get; }
    protected bool AllowAsyncInitializationStrategy { get; }
    protected SolutionManagerBase(Lifetime lifetime, IShellLocks locks, IPartCatalogSet catalogSet, IComponentContainer componentContainer, ISolutionLoadTasksSchedulerProvider schedulerProvider, IEnumerable`1<IQuerySolutionCloseHandler> querySolutionCloseHandlers, IEnumerable`1<ISolutionInstanceComponentContainerExtender> solutionInstanceComponentContainerExtenders, IEnumerable`1<ISolutionComponentContainerExtender> solutionComponentContainerExtenders, SynchronizationPoints syncPoints, ILogger logger, IAsyncComposeManager asyncComposeManager);
    [CompilerGeneratedAttribute]
public sealed virtual SolutionManagerEvents get_SolutionManagerEvents();
    [CompilerGeneratedAttribute]
protected IEnumerable`1<ISolutionInstanceComponentContainerExtender> get_SolutionInstanceComponentContainerExtenders();
    [CompilerGeneratedAttribute]
protected IEnumerable`1<ISolutionComponentContainerExtender> get_SolutionComponentContainerExtenders();
    [CompilerGeneratedAttribute]
public SolutionInstance get_CurrentSolutionInstance();
    [CompilerGeneratedAttribute]
private void set_CurrentSolutionInstance(SolutionInstance value);
    public ISolution get_CurrentSolution();
    public ISolutionLoadTasksScheduler get_TaskScheduler();
    public abstract virtual bool get_IsRealSolutionOwner();
    public sealed virtual T GetComponent();
    public sealed virtual bool IsSolutionValid(ISolution solution);
    protected virtual bool CloseSolutionInstance(SolutionInstance instance);
    private bool QuerySolutionClose(ISolution solution);
    protected SolutionInstance CreateSolutionInstance(SolutionElement solutionElement, SolutionInstance solutionInstance);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.SolutionManagerBase/<CreateSolutionInstanceAsync>d__41")]
protected Task`1<SolutionInstance> CreateSolutionInstanceAsync(SolutionElement solutionElement, SolutionInstance solutionInstance);
    protected virtual void EnqueueProjectModelLoadFromCache(SolutionElement solutionElement, ISolutionLoadTasksScheduler solutionLoadTasksScheduler);
    protected virtual void WaitForProjectModelLoad(SolutionElement solutionElement, ISolutionLoadTasksScheduler taskScheduler);
    protected void WaitForAsyncLoadFromCache(SolutionElement solutionElement, ISolutionLoadTasksScheduler taskScheduler);
    protected void SetSolution(ISolution solution);
    protected virtual Task SolutionInstanceReadyAsync(SolutionInstance solutionInstance);
    protected virtual void SolutionReady(SolutionInstance solutionInstance);
    protected virtual ISolutionLoadTasksScheduler GetSolutionLoadTasksScheduler();
    protected virtual bool get_AllowAsyncInitializationStrategy();
    protected Func`2<Lifetime, IInitializationStrategy> GetInitializationStrategy(bool forceSync);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.SolutionManagerBase/<WaitForShellContainer>d__52")]
protected virtual Task WaitForShellContainer();
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute("8")]
public class JetBrains.ProjectModel.SolutionServiceAttribute : SolutionComponentAttribute {
    public SolutionServiceAttribute(Instantiation instantiation);
}
[ObsoleteAttribute("For usage only in settings upgraders. Do not create a component!")]
public class JetBrains.ProjectModel.SolutionSettingsTable : SettingsTableBase {
    private static XmlExternalizationScope ourConfigScope;
    private IComponentSettingsProvider mySettings;
    public SolutionSettingsTable(IComponentSettingsProvider settings, ProductConfigurations productConfigurations);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.SolutionsManager : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IProperty`1<ISolution> AnySolution;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IProperty`1<ISolution> RealSolution;
    [NullableAttribute("1")]
public ICollectionEvents`1<ISolution> Solutions;
    [NullableAttribute("2")]
public ISolution Solution { get; }
    [NullableContextAttribute("1")]
public SolutionsManager(Lifetime lifetime, ILogger logger);
    [NullableContextAttribute("2")]
public ISolution get_Solution();
}
public class JetBrains.ProjectModel.SolutionStructure.EnvironmentVariablesExpander : object {
    public static EnvironmentVariablesExpander Instance;
    private IDictionary myEnvironmentVariables;
    private static EnvironmentVariablesExpander();
    public string Expand(string value);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.SolutionStructure.SolutionConfigurations.ConfigurationExtensions : object {
    [ExtensionAttribute]
public static string ToActiveConfigurationString(ProjectDefinition projectDefinition, string solutionConfiguration);
    [ExtensionAttribute]
public static string ToBuildConfigurationString(ProjectDefinition projectDefinition, string solutionConfiguration);
    [ExtensionAttribute]
public static string ToDeployConfigurationString(ProjectDefinition projectDefinition, string solutionConfiguration);
    private static string ToConfigurationString(ProjectDefinition projectDefinition, string solutionConfiguration, string suffix);
    [ExtensionAttribute]
public static string ToSeparatedValue(SolutionConfigurationAndPlatform value);
    [ExtensionAttribute]
public static string ToSeparatedValue(ProjectConfigurationAndPlatform value);
    [ExtensionAttribute]
public static SolutionConfigurationAndPlatform ToSolutionConfiguration(ProjectConfigurationAndPlatform value);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.SolutionStructure.SolutionConfigurations.DefaultActiveConfigurationManager : object {
    [CompilerGeneratedAttribute]
private IViewableProperty`1<ISolutionConfigurationAndPlatform> <ActiveConfigurationAndPlatform>k__BackingField;
    public IViewableProperty`1<ISolutionConfigurationAndPlatform> ActiveConfigurationAndPlatform { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IViewableProperty`1<ISolutionConfigurationAndPlatform> get_ActiveConfigurationAndPlatform();
}
public interface JetBrains.ProjectModel.SolutionStructure.SolutionConfigurations.IActiveConfigurationManager {
    [NotNullAttribute]
public IViewableProperty`1<ISolutionConfigurationAndPlatform> ActiveConfigurationAndPlatform { get; }
    public abstract virtual IViewableProperty`1<ISolutionConfigurationAndPlatform> get_ActiveConfigurationAndPlatform();
}
public interface JetBrains.ProjectModel.SolutionStructure.SolutionConfigurations.IProjectConfigurationAndPlatform {
}
public interface JetBrains.ProjectModel.SolutionStructure.SolutionConfigurations.IProjectConfigurationsProvider {
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IReadOnlyList`1<IProjectConfigurationAndPlatform> GetProjectConfigurations(IProject project);
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IReadOnlyList`1<string> GetProjectConfigurationNames(IProject project);
}
public interface JetBrains.ProjectModel.SolutionStructure.SolutionConfigurations.ISolutionConfigurationAndPlatform {
    public string Uid { get; }
    public abstract virtual string get_Uid();
}
public class JetBrains.ProjectModel.SolutionStructure.SolutionConfigurations.MissingProjectConfigurationAndPlatform : object {
    public static IProjectConfigurationAndPlatform Instance;
    private static MissingProjectConfigurationAndPlatform();
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.SolutionStructure.SolutionConfigurations.MissingSolutionConfigurationAndPlatform : object {
    public static ISolutionConfigurationAndPlatform Instance;
    public string Uid { get; }
    private static MissingSolutionConfigurationAndPlatform();
    public sealed virtual string get_Uid();
}
public class JetBrains.ProjectModel.SolutionStructure.SolutionConfigurations.ProjectConfigurationAndPlatform : object {
    [NotNullAttribute]
public string Configuration;
    [NotNullAttribute]
public string Platform;
    [CompilerGeneratedAttribute]
private bool <ShouldBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldDeploy>k__BackingField;
    [NotNullAttribute]
public string ConfigurationForSolution { get; }
    [NotNullAttribute]
public string PlatformForSolution { get; }
    public bool ShouldBuild { get; }
    public bool ShouldDeploy { get; }
    public ProjectConfigurationAndPlatform(string configuration, string platform, bool shouldBuild, bool shouldDeploy);
    public ProjectConfigurationAndPlatform(SolutionConfigurationAndPlatform solutionConfigurationAndPlatform, bool shouldBuild, bool shouldDeploy);
    public string get_ConfigurationForSolution();
    public string get_PlatformForSolution();
    [CompilerGeneratedAttribute]
public bool get_ShouldBuild();
    [CompilerGeneratedAttribute]
public bool get_ShouldDeploy();
    public void Deconstruct(String& configuration, String& platform);
    public void Deconstruct(String& configuration, String& platform, Boolean& shouldBuild, Boolean& shouldDeploy);
    public sealed virtual bool Equals(ProjectConfigurationAndPlatform other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    [PureAttribute]
public static string ConvertConfigurationToSolutionStyle(string configuration);
    [PureAttribute]
[NotNullAttribute]
public static string ConvertPlatformToSolutionStyle(string platform);
    [PureAttribute]
public static string EnsureConfigurationInProjectStyle(string configuration);
    [PureAttribute]
[NotNullAttribute]
public static string EnsurePlatformInProjectStyle(string platform);
    [PureAttribute]
[CanBeNullAttribute]
public static string BuildCanonicalName(string configuration, string platform);
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.SolutionStructure.SolutionConfigurations.SolutionConfigurationAndPlatform : object {
    [NotNullAttribute]
public string Configuration;
    [NotNullAttribute]
public string Platform;
    public string Uid { get; }
    public SolutionConfigurationAndPlatform(string configuration, string platform);
    public void Deconstruct(String& configuration, String& platform);
    public sealed virtual bool Equals(SolutionConfigurationAndPlatform other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual string get_Uid();
    public virtual string ToString();
}
public abstract class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.CompositeDefinitionItem : DefinitionItem {
    [NotNullAttribute]
private IList`1<DefinitionItem> myItems;
    [NotNullAttribute]
public IEnumerable`1<DefinitionItem> Items { get; }
    [NotNullAttribute]
protected IList`1<DefinitionItem> ItemsList { get; }
    protected CompositeDefinitionItem(IList`1<DefinitionItem> items, int indent);
    public IEnumerable`1<DefinitionItem> get_Items();
    protected IList`1<DefinitionItem> get_ItemsList();
    protected void Add(DefinitionItem item);
    protected void Remove(DefinitionItem item);
    protected void InsertBefore(DefinitionItem item, DefinitionItem anchor);
    protected void InsertAfter(DefinitionItem item, DefinitionItem anchor);
}
public abstract class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.DefinitionItem : object {
    [CanBeNullAttribute]
private DefinitionItem myParent;
    public int Indent;
    [CanBeNullAttribute]
protected DefinitionItem Parent { get; }
    protected DefinitionItem(int indent);
    protected DefinitionItem get_Parent();
    protected internal void SetParent(DefinitionItem parent);
    protected internal void ResetParent();
    public abstract virtual void Visit(DefinitionItemVisitor visitor);
}
public abstract class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.DefinitionItemVisitor : object {
    public virtual void VisitSolution(SolutionDefinition item);
    public virtual void VisitProject(ProjectDefinition item);
    public virtual void VisitGlobal(GlobalDefinition item);
    public virtual void VisitSection(SectionDefinition item);
    public virtual void VisitProperty(PropertyDefinition item);
    public virtual void VisitLine(LineDefinition item);
    public virtual void VisitFormatVersion(FormatVersionDefinition item);
    public virtual void VisitCompositeItem(CompositeDefinitionItem item);
    public virtual void VisitItem(DefinitionItem item);
}
public class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.FormatVersionDefinition : DefinitionItem {
    [NotNullAttribute]
public SolutionFormatVersion FormatVersion;
    public FormatVersionDefinition(SolutionFormatVersion formatVersion, int indent);
    public virtual void Visit(DefinitionItemVisitor visitor);
}
public class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.GlobalDefinition : CompositeDefinitionItem {
    public GlobalDefinition(IList`1<DefinitionItem> items, int indent);
    public virtual void Visit(DefinitionItemVisitor visitor);
    [NotNullAttribute]
public SectionDefinition AddSection(string sectionName, string sectionValue);
}
public interface JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.IProjectDefinition {
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public string Path { get; }
    public Guid ProjectGuid { get; }
    public Guid ProjectTypeGuid { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Path();
    public abstract virtual Guid get_ProjectGuid();
    public abstract virtual Guid get_ProjectTypeGuid();
    public abstract virtual bool IsProjectDefinitionChanged(IProjectDefinition projectDefinition);
    public abstract virtual IReadOnlyCollection`1<OneToListMap`2<string, string>> GetProjectProperties(string propertiesName);
    public abstract virtual void AddProjectProperty(string propertiesName, string propertyName, string propertyValue);
    public abstract virtual void UpdateProjectProperty(string propertiesName, string propertyName, string propertyValue);
    public abstract virtual IReadOnlyCollection`1<VirtualFileSystemPath> GetSolutionItemsLocations(VirtualFileSystemPath solutionDirectory);
    public abstract virtual void AddSolutionItem(string solutionItemName);
    public abstract virtual void UpdateSolutionItem(string oldName, string newName);
    public abstract virtual void RemoveSolutionItem(string name);
    public abstract virtual IReadOnlyCollection`1<Guid> GetProjectDependencies();
    public abstract virtual void RemoveProjectDependency(IProjectDefinition dependencyProjectDefinition);
    public abstract virtual void AddProjectDependency(IProjectDefinition dependencyProjectDefinition);
}
public interface JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.IRegularProjectDefinition {
    [NotNullAttribute]
public VirtualFileSystemPath Location { get; }
    public abstract virtual VirtualFileSystemPath get_Location();
}
public interface JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.ISolutionDefinition {
    [NotNullAttribute]
public IReadOnlyCollection`1<SolutionDefinitionError> Errors { get; }
    [NotNullAttribute]
public IReadOnlyCollection`1<SolutionDefinitionError> Warnings { get; }
    public abstract virtual IReadOnlyCollection`1<SolutionDefinitionError> get_Errors();
    public abstract virtual IReadOnlyCollection`1<SolutionDefinitionError> get_Warnings();
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<IProjectDefinition> GetProjects();
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<ValueTuple`2<Guid, Guid>> GetChildParentGuids();
    [CanBeNullAttribute]
public abstract virtual FormatVersionDefinition GetFormatVersion();
    [NotNullAttribute]
public abstract virtual IProjectDefinition AddProject(ProjectDefinitionDescriptor descriptor, IProjectDefinition parent);
    [NotNullAttribute]
public abstract virtual IProjectDefinition RenameProject(IProjectDefinition projectDefinition, string name, string path);
    public abstract virtual void MoveProject(IProjectDefinition projectDefinition, IProjectDefinition parentProjectDefinition);
    public abstract virtual void RemoveProject(IProjectDefinition projectDefinition);
    public abstract virtual ICollection`1<SolutionConfigurationAndPlatform> GetSolutionConfigurations();
    public abstract virtual IDictionary`2<IProjectDefinition, IDictionary`2<SolutionConfigurationAndPlatform, ProjectConfigurationAndPlatform>> GetProjectConfigurations();
    public abstract virtual void UpdateSolutionConfigurations(ICollection`1<SolutionConfigurationAndPlatform> actualSolutionConfigurations);
    public abstract virtual void UpdateProjectConfigurations(IDictionary`2<SolutionConfigurationAndPlatform, IDictionary`2<IProjectDefinition, ProjectConfigurationAndPlatform>> actualProjectConfigurations);
    [NotNullAttribute]
public abstract virtual string Write();
}
public interface JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.ISolutionFolderDefinition {
    [NotNullAttribute]
public abstract virtual VirtualFileSystemPath CreateLocation(VirtualFileSystemPath parent);
}
public class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.LineDefinition : DefinitionItem {
    [NotNullAttribute]
public string Line;
    public LineDefinition(string line, int indent);
    public virtual void Visit(DefinitionItemVisitor visitor);
}
public abstract class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.ProjectDefinition : CompositeDefinitionItem {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ProjectGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ProjectTypeGuid>k__BackingField;
    public string Name { get; }
    public string Path { get; }
    public Guid ProjectGuid { get; }
    public Guid ProjectTypeGuid { get; }
    [NotNullAttribute]
public SolutionDefinition SolutionDefinition { get; }
    protected ProjectDefinition(string name, string path, Guid projectGuid, Guid projectTypeGuid, IList`1<DefinitionItem> items, int indent);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_ProjectGuid();
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_ProjectTypeGuid();
    public SolutionDefinition get_SolutionDefinition();
    public sealed virtual bool IsProjectDefinitionChanged(IProjectDefinition projectDefinition);
    public sealed virtual IReadOnlyCollection`1<OneToListMap`2<string, string>> GetProjectProperties(string propertiesName);
    public sealed virtual void AddProjectProperty(string propertiesName, string propertyName, string propertyValue);
    public sealed virtual void UpdateProjectProperty(string propertiesName, string propertyName, string propertyValue);
    public sealed virtual IReadOnlyCollection`1<VirtualFileSystemPath> GetSolutionItemsLocations(VirtualFileSystemPath solutionDirectory);
    public sealed virtual void AddSolutionItem(string solutionItemName);
    public sealed virtual void UpdateSolutionItem(string oldName, string newName);
    public sealed virtual void RemoveSolutionItem(string name);
    public sealed virtual IReadOnlyCollection`1<Guid> GetProjectDependencies();
    public sealed virtual void RemoveProjectDependency(IProjectDefinition dependencyProjectDefinition);
    public sealed virtual void AddProjectDependency(IProjectDefinition dependencyProjectDefinition);
    public sealed virtual void Visit(DefinitionItemVisitor visitor);
    public ProjectDefinition Alter(string name, string path, Guid projectGuid);
    protected abstract virtual ProjectDefinition AlterInternal(string name, string path, Guid projectGuid);
    [NotNullAttribute]
public IEnumerable`1<SectionDefinition> GetProjectSections();
    [NotNullAttribute]
public IEnumerable`1<SectionDefinition> GetProjectSections(string sectionName);
    [NotNullAttribute]
public SectionDefinition GetOrCreateProjectSection(string sectionName, string sectionValue);
    public void RemoveProjectSection(SectionDefinition sectionDefinition);
    public virtual string ToString();
    public abstract virtual void Dump(TextWriter writer, string indent);
    protected void DumpInternal(TextWriter writer, string indent, string name);
}
public class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.ProjectDefinitionDescriptor : object {
    [NotNullAttribute]
public string Name;
    [NotNullAttribute]
public string Path;
    public Guid ProjectGuid;
    public Guid ProjectTypeGuid;
    public IReadOnlyCollection`1<ProjectConfigurationAndPlatform> Configurations;
    public ProjectDefinitionDescriptor(string name, string path, Guid guid, Guid typeGuid, IReadOnlyCollection`1<ProjectConfigurationAndPlatform> configurations);
    public static ProjectDefinitionDescriptor ForSolutionFolder(string name, Guid guid);
}
public class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.PropertyDefinition : DefinitionItem {
    [NotNullAttribute]
public string PropertyName;
    [NotNullAttribute]
public string PropertyValue;
    public PropertyDefinition(string propertyName, string propertyValue, int indent);
    public virtual void Visit(DefinitionItemVisitor visitor);
    public static string ToProperty(Guid guid);
    public void Dump(TextWriter writer, string indent);
}
public class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.RegularProjectDefinition : ProjectDefinition {
    [NotNullAttribute]
private EnvironmentVariablesExpander myEnvironmentVariablesExpander;
    [CanBeNullAttribute]
private VirtualFileSystemPath myLocation;
    public VirtualFileSystemPath Location { get; }
    public bool IsDirectoryPath { get; }
    public RegularProjectDefinition(string name, string path, Guid projectGuid, Guid projectTypeGuid, IList`1<DefinitionItem> items, int indent, EnvironmentVariablesExpander environmentVariablesExpander);
    public sealed virtual VirtualFileSystemPath get_Location();
    [NotNullAttribute]
private VirtualFileSystemPath CalculateLocation();
    public bool get_IsDirectoryPath();
    protected virtual ProjectDefinition AlterInternal(string name, string path, Guid projectGuid);
    public virtual string ToString();
    public virtual void Dump(TextWriter writer, string indent);
}
public class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.SectionDefinition : CompositeDefinitionItem {
    public SectionDefinitionType Type;
    [NotNullAttribute]
public string SectionName;
    [NotNullAttribute]
public string SectionValue;
    public SectionDefinition(string sectionName, string sectionValue, SectionDefinitionType type, IList`1<DefinitionItem> items, int indent);
    [NotNullAttribute]
public IEnumerable`1<PropertyDefinition> GetProperties();
    [NotNullAttribute]
public IEnumerable`1<PropertyDefinition> GetProperties(string propertyName);
    [NotNullAttribute]
public IEnumerable`1<string> GetPropertyValues(string propertyName);
    public virtual void Visit(DefinitionItemVisitor visitor);
    [NotNullAttribute]
public PropertyDefinition AddProperty(string propertyName, string propertyValue);
    [NotNullAttribute]
public PropertyDefinition AddPropertyAfter(string propertyName, string propertyValue, DefinitionItem anchor);
    [NotNullAttribute]
public PropertyDefinition UpdateProperty(PropertyDefinition original, string propertyName, string propertyValue);
    public void RemoveProperty(PropertyDefinition propertyDefinition);
    public void Dump(TextWriter writer, string indent);
}
public enum JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.SectionDefinitionType : Enum {
    public int value__;
    public static SectionDefinitionType Project;
    public static SectionDefinitionType Global;
}
public class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.SolutionDefinition : CompositeDefinitionItem {
    public static char ConfigurationPlatformSeparatorChar;
    private static string ConfigurationPlatformSeparator;
    public static string SolutionConfigurationPlatformsSection;
    public static string SolutionConfigurationPlatformsSectionValue;
    public static string ProjectConfigurationPlatformsSection;
    public static string ProjectConfigurationPlatformsSectionValue;
    public static string ActiveCfgSuffix;
    public static string Build0Suffix;
    public static string Deploy0Suffix;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<SolutionDefinitionError> <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<SolutionDefinitionError> <Warnings>k__BackingField;
    [NotNullAttribute]
public VirtualFileSystemPath Location { get; }
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public VirtualFileSystemPath Directory { get; }
    public IReadOnlyCollection`1<SolutionDefinitionError> Errors { get; }
    public IReadOnlyCollection`1<SolutionDefinitionError> Warnings { get; }
    private SolutionDefinition(VirtualFileSystemPath location, IList`1<DefinitionItem> items, IReadOnlyCollection`1<SolutionDefinitionError> errors, IReadOnlyCollection`1<SolutionDefinitionError> warnings);
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_Location();
    public string get_Name();
    public VirtualFileSystemPath get_Directory();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<SolutionDefinitionError> get_Errors();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<SolutionDefinitionError> get_Warnings();
    public static SolutionDefinition Read(VirtualFileSystemPath location);
    public static SolutionDefinition Create(VirtualFileSystemPath location, IList`1<DefinitionItem> items);
    public sealed virtual string Write();
    public virtual void Visit(DefinitionItemVisitor visitor);
    public sealed virtual IReadOnlyCollection`1<IProjectDefinition> GetProjects();
    public sealed virtual IReadOnlyCollection`1<ValueTuple`2<Guid, Guid>> GetChildParentGuids();
    [NotNullAttribute]
public ICollection`1<SectionDefinition> GetGlobalSections();
    [NotNullAttribute]
public ICollection`1<SectionDefinition> GetGlobalSections(string sectionName);
    [NotNullAttribute]
public ICollection`1<PropertyDefinition> GetProperties();
    public sealed virtual FormatVersionDefinition GetFormatVersion();
    public sealed virtual IProjectDefinition AddProject(ProjectDefinitionDescriptor descriptor, IProjectDefinition parent);
    [NotNullAttribute]
private ProjectDefinition AddProjectDefinitionInternal(ProjectDefinitionDescriptor descriptor, IProjectDefinition parent, Func`4<string, List`1<DefinitionItem>, int, ProjectDefinition> factory);
    public sealed virtual IProjectDefinition RenameProject(IProjectDefinition p, string name, string path);
    public sealed virtual void RemoveProject(IProjectDefinition pp);
    public sealed virtual void MoveProject(IProjectDefinition projectDefinition, IProjectDefinition parentProjectDefinition);
    public SectionDefinition GetOrCreateGlobalSection(string sectionName, string sectionValue);
    private SectionDefinition GetOrCreateNestedProjectsSection();
    [NotNullAttribute]
private GlobalDefinition GetOrCreateGlobalDefinition();
    public sealed virtual ICollection`1<SolutionConfigurationAndPlatform> GetSolutionConfigurations();
    public sealed virtual IDictionary`2<IProjectDefinition, IDictionary`2<SolutionConfigurationAndPlatform, ProjectConfigurationAndPlatform>> GetProjectConfigurations();
    public sealed virtual void UpdateSolutionConfigurations(ICollection`1<SolutionConfigurationAndPlatform> actualSolutionConfigurations);
    public sealed virtual void UpdateProjectConfigurations(IDictionary`2<SolutionConfigurationAndPlatform, IDictionary`2<IProjectDefinition, ProjectConfigurationAndPlatform>> actualProjectConfigurations);
    private void SyncSectionProperties(string sectionName, string sectionValue, ISet`1<Pair`2<string, string>> allProperties, Func`2<string, string> prefixFunc);
    public void Dump(TextWriter writer);
}
public static class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.SolutionDefinitionConfigurator : object {
    [NotNullAttribute]
public static IEnumerable`1<Pair`2<string, string>> BuildNewProjectConfigurationsList(SolutionDefinition solutionDefinition, ProjectDefinition projectDefinition, IReadOnlyCollection`1<ProjectConfigurationAndPlatform> knownConfigurationAndPlatforms);
    [NotNullAttribute]
public static IReadOnlyCollection`1<Configuration> BuildNewProjectConfigurationsList(XmlSolutionDefinition solutionDefinition, XmlProjectDefinition projectDefinition, IReadOnlyCollection`1<ProjectConfigurationAndPlatform> knownConfigurationAndPlatforms);
    public static ProjectConfigurationAndPlatform FindProjectConfiguration(SolutionConfigurationAndPlatform configurationAndPlatform, IReadOnlyCollection`1<ProjectConfigurationAndPlatform> knownConfigurationAndPlatforms);
}
public static class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.SolutionDefinitionConstants : object {
    public static string VSSolutionExtension;
    public static string VSXmlSolutionExtension;
    public static string VSSolutionFilterExtension;
    public static string FormatVersionPrefix;
    public static string ProjectPrefix;
    public static string GlobalPrefix;
    public static string Section;
    public static string End;
    public static string SolutionItemsSectionName;
    public static string SolutionItemsSectionValue;
    public static string SolutionItemsProject;
    public static string ProjectDependenciesSectionName;
    public static string ProjectDependenciesSectionValue;
    private static SolutionDefinitionConstants();
}
public static class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.SolutionDefinitionConverter : object {
    public static XmlSolutionDefinition XmlFromSolutionDefinition(VirtualFileSystemPath location, SolutionDefinition solutionDefinition);
    public static SolutionDefinition SolutionDefinitionFromXml(VirtualFileSystemPath location, XmlSolutionDefinition xmlSolutionDefinition);
}
public class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.SolutionDefinitionError : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Line>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string Message { get; public set; }
    public Nullable`1<int> Line { get; public set; }
    public SolutionDefinitionError(string Message, Nullable`1<int> Line);
    [CompilerGeneratedAttribute]
protected SolutionDefinitionError(SolutionDefinitionError original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Message(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Line();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Line(Nullable`1<int> value);
    public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SolutionDefinitionError left, SolutionDefinitionError right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SolutionDefinitionError left, SolutionDefinitionError right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(SolutionDefinitionError other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual SolutionDefinitionError <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Message, Nullable`1& Line);
}
public class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.SolutionDefinitionReader : object {
    private VirtualFileSystemPath myLocation;
    private CurrentLine myLineForRollback;
    private int myLineNumber;
    private static Regex ourHeaderMatcher;
    private static Regex ourProjectMatcher;
    private static Regex ourGlobalMatcher;
    private static Regex ourSectionMatcher;
    private static Regex ourPropertyMatcher;
    private static string ReVisualStudioVersionProperty;
    private static string ReMinimumVisualStudioVersionProperty;
    [CompilerGeneratedAttribute]
private List`1<SolutionDefinitionError> <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SolutionDefinitionError> <Warnings>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<DefinitionItem> <Items>k__BackingField;
    public List`1<SolutionDefinitionError> Errors { get; }
    public List`1<SolutionDefinitionError> Warnings { get; }
    public List`1<DefinitionItem> Items { get; }
    public SolutionDefinitionReader(VirtualFileSystemPath location);
    private static SolutionDefinitionReader();
    [CompilerGeneratedAttribute]
public List`1<SolutionDefinitionError> get_Errors();
    [CompilerGeneratedAttribute]
public List`1<SolutionDefinitionError> get_Warnings();
    [CompilerGeneratedAttribute]
public List`1<DefinitionItem> get_Items();
    private void CaptureError(string message);
    private void CaptureWarning(string message);
    public void Read();
    private void ReadSolutionFile(StreamReader reader, ICollection`1<DefinitionItem> items);
    private void ParseSectionOwner(StreamReader reader, ICollection`1<DefinitionItem> items, string owner, string nextOwner);
    private void ParseSection(StreamReader reader, List`1<DefinitionItem> items, string name);
    private void ReadHeaderLine(StreamReader reader, ICollection`1<DefinitionItem> items);
    private CurrentLine FetchNextLine(StreamReader reader, ICollection`1<DefinitionItem> items);
    private void RollbackFetch(CurrentLine line);
    private static Regex ConstructRegex(string prefix, string pattern);
}
public static class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.SolutionDefinitionWriter : object {
    public static string Write(SolutionDefinition solutionDefinition);
}
public class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.SolutionFolderDefinition : ProjectDefinition {
    public static Guid TypeGuid;
    public SolutionFolderDefinition(string name, string path, Guid projectGuid, IList`1<DefinitionItem> items, int indent);
    private static SolutionFolderDefinition();
    protected virtual ProjectDefinition AlterInternal(string name, string path, Guid projectGuid);
    public sealed virtual VirtualFileSystemPath CreateLocation(VirtualFileSystemPath parent);
    public virtual string ToString();
    public virtual void Dump(TextWriter writer, string indent);
}
public class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.Xml.BuildDependency : object {
    [CompilerGeneratedAttribute]
private string <Project>k__BackingField;
    [XmlAttributeAttribute("Project")]
public string Project { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Project();
    [CompilerGeneratedAttribute]
public void set_Project(string value);
}
public class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.Xml.BuildType : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [XmlAttributeAttribute("Name")]
public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.Xml.Configuration : object {
    [CompilerGeneratedAttribute]
private string <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Project>k__BackingField;
    [XmlAttributeAttribute("Solution")]
public string Solution { get; public set; }
    [XmlAttributeAttribute("Project")]
public string Project { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Solution();
    [CompilerGeneratedAttribute]
public void set_Solution(string value);
    [CompilerGeneratedAttribute]
public string get_Project();
    [CompilerGeneratedAttribute]
public void set_Project(string value);
}
public class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.Xml.Configurations : object {
    [CompilerGeneratedAttribute]
private List`1<BuildType> <BuildTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Platform> <Platforms>k__BackingField;
    [XmlElementAttribute("BuildType")]
public List`1<BuildType> BuildTypes { get; public set; }
    [XmlElementAttribute("Platform")]
public List`1<Platform> Platforms { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<BuildType> get_BuildTypes();
    [CompilerGeneratedAttribute]
public void set_BuildTypes(List`1<BuildType> value);
    [CompilerGeneratedAttribute]
public List`1<Platform> get_Platforms();
    [CompilerGeneratedAttribute]
public void set_Platforms(List`1<Platform> value);
}
public class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.Xml.File : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [XmlAttributeAttribute("Path")]
public string Path { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
}
public class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.Xml.Folder : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Project> <Projects>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<File> <Files>k__BackingField;
    [XmlAttributeAttribute("Name")]
public string Name { get; public set; }
    [XmlElementAttribute("Project")]
public List`1<Project> Projects { get; public set; }
    [XmlElementAttribute("File")]
public List`1<File> Files { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public List`1<Project> get_Projects();
    [CompilerGeneratedAttribute]
public void set_Projects(List`1<Project> value);
    [CompilerGeneratedAttribute]
public List`1<File> get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(List`1<File> value);
}
public class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.Xml.Platform : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [XmlAttributeAttribute("Name")]
public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.Xml.Project : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<BuildDependency> <BuildDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Configuration> <Configurations>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Properties> <Properties>k__BackingField;
    [XmlAttributeAttribute("Path")]
public string Path { get; public set; }
    [XmlAttributeAttribute("DisplayName")]
public string DisplayName { get; public set; }
    [XmlAttributeAttribute("Type")]
public string Type { get; public set; }
    [XmlElementAttribute("BuildDependency")]
public List`1<BuildDependency> BuildDependencies { get; public set; }
    [XmlElementAttribute("Configuration")]
public List`1<Configuration> Configurations { get; public set; }
    [XmlElementAttribute("Properties")]
public List`1<Properties> Properties { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public List`1<BuildDependency> get_BuildDependencies();
    [CompilerGeneratedAttribute]
public void set_BuildDependencies(List`1<BuildDependency> value);
    [CompilerGeneratedAttribute]
public List`1<Configuration> get_Configurations();
    [CompilerGeneratedAttribute]
public void set_Configurations(List`1<Configuration> value);
    [CompilerGeneratedAttribute]
public List`1<Properties> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(List`1<Properties> value);
}
public static class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.Xml.ProjectTypeGuidGuesser : object {
    private static string SharedProjectTypeGuid;
    private static string FSharpProjectTypeGuid;
    private static string CppProjectTypeGuid;
    private static string VBProjectTypeGuid;
    private static string CSharpProjectTypeGuid;
    private static string InstallShieldProjectTypeGuid;
    private static string NodeJsProjectTypeGuid;
    private static string SqlServerDatabaseProjectGuid;
    private static string EcmaScriptProjectGuid;
    private static string WebsiteProjectGuid;
    private static string ClassicCSharp;
    private static string ClassicFSharp;
    private static string ClassicVB;
    private static string Website;
    [CanBeNullAttribute]
public static string GetWellKnownProjectTypeGuidByPath(string projectFilePath);
    [CanBeNullAttribute]
public static string GetWellKnownProjectTypeGuidByType(string type);
    [CanBeNullAttribute]
public static string GetWellKnownProjectTypeByGuid(string guid);
}
public class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.Xml.Properties : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Property> <PropertyList>k__BackingField;
    [XmlAttributeAttribute("Name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("Scope")]
public string Scope { get; public set; }
    [XmlElementAttribute("Property")]
public List`1<Property> PropertyList { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public List`1<Property> get_PropertyList();
    [CompilerGeneratedAttribute]
public void set_PropertyList(List`1<Property> value);
}
public class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.Xml.Property : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [XmlAttributeAttribute("Name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("Value")]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.Xml.SolutionDefinitionReaderResult : object {
    [CompilerGeneratedAttribute]
private XmlSolutionModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private SolutionDefinitionError <Error>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public XmlSolutionModel Model { get; public set; }
    public SolutionDefinitionError Error { get; public set; }
    public SolutionDefinitionReaderResult(XmlSolutionModel Model, SolutionDefinitionError Error);
    [CompilerGeneratedAttribute]
protected SolutionDefinitionReaderResult(SolutionDefinitionReaderResult original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public XmlSolutionModel get_Model();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Model(XmlSolutionModel value);
    [CompilerGeneratedAttribute]
public SolutionDefinitionError get_Error();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Error(SolutionDefinitionError value);
    public static SolutionDefinitionReaderResult Failure(SolutionDefinitionError error);
    public static SolutionDefinitionReaderResult Success(XmlSolutionModel model);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SolutionDefinitionReaderResult left, SolutionDefinitionReaderResult right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SolutionDefinitionReaderResult left, SolutionDefinitionReaderResult right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(SolutionDefinitionReaderResult other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual SolutionDefinitionReaderResult <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(XmlSolutionModel& Model, SolutionDefinitionError& Error);
}
public abstract class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.Xml.XmlProjectDefinition : object {
    [CompilerGeneratedAttribute]
private XmlSolutionDefinition <SolutionDefinition>k__BackingField;
    public XmlSolutionDefinition SolutionDefinition { get; protected set; }
    public string Name { get; }
    public string Path { get; }
    public Guid ProjectTypeGuid { get; }
    public Guid ProjectGuid { get; }
    protected XmlProjectDefinition(XmlSolutionDefinition solutionDefinition);
    [CompilerGeneratedAttribute]
public XmlSolutionDefinition get_SolutionDefinition();
    [CompilerGeneratedAttribute]
protected void set_SolutionDefinition(XmlSolutionDefinition value);
    public abstract virtual string get_Name();
    public abstract virtual string get_Path();
    public abstract virtual Guid get_ProjectTypeGuid();
    public sealed virtual Guid get_ProjectGuid();
    public static Guid GetGuidFromPath(string path);
    public abstract virtual bool IsProjectDefinitionChanged(IProjectDefinition projectDefinition);
    public virtual IReadOnlyCollection`1<OneToListMap`2<string, string>> GetProjectProperties(string propertiesName);
    public virtual void AddProjectProperty(string propertiesName, string propertyName, string propertyValue);
    public virtual void UpdateProjectProperty(string propertiesName, string propertyName, string propertyValue);
    public virtual IReadOnlyCollection`1<VirtualFileSystemPath> GetSolutionItemsLocations(VirtualFileSystemPath solutionDirectory);
    public virtual void AddSolutionItem(string solutionItemName);
    public virtual void UpdateSolutionItem(string oldName, string newName);
    public virtual void RemoveSolutionItem(string name);
    public virtual IReadOnlyCollection`1<Guid> GetProjectDependencies();
    public virtual void RemoveProjectDependency(IProjectDefinition dependencyProjectDefinition);
    public virtual void AddProjectDependency(IProjectDefinition dependencyProjectDefinition);
    public abstract virtual void Rename(string name, string path);
}
public class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.Xml.XmlRegularProjectDefinition : XmlProjectDefinition {
    [CompilerGeneratedAttribute]
private Project <ProjectModel>k__BackingField;
    [CompilerGeneratedAttribute]
private Folder <ParentFolderModel>k__BackingField;
    private EnvironmentVariablesExpander myEnvironmentVariablesExpander;
    [NotNullAttribute]
public Project ProjectModel { get; }
    [CanBeNullAttribute]
public Folder ParentFolderModel { get; public set; }
    public string Name { get; }
    public string Path { get; }
    public Guid ProjectTypeGuid { get; }
    public VirtualFileSystemPath Location { get; }
    public XmlRegularProjectDefinition(XmlSolutionDefinition solutionDefinition, Project project, Folder parentFolder);
    [CompilerGeneratedAttribute]
public Project get_ProjectModel();
    [CompilerGeneratedAttribute]
public Folder get_ParentFolderModel();
    [CompilerGeneratedAttribute]
public void set_ParentFolderModel(Folder value);
    public virtual string get_Name();
    public virtual string get_Path();
    public virtual Guid get_ProjectTypeGuid();
    public sealed virtual VirtualFileSystemPath get_Location();
    public Guid GetProjectTypeGuidByType(string type);
    [CanBeNullAttribute]
public static string GetTypeByProjectTypeGuid(Guid type);
    [NotNullAttribute]
private string CalculateName();
    [NotNullAttribute]
private VirtualFileSystemPath CalculateLocation();
    public virtual bool IsProjectDefinitionChanged(IProjectDefinition projectDefinition);
    public virtual IReadOnlyCollection`1<OneToListMap`2<string, string>> GetProjectProperties(string propertiesName);
    public virtual void AddProjectProperty(string propertiesName, string propertyName, string propertyValue);
    public virtual void UpdateProjectProperty(string propertiesName, string propertyName, string propertyValue);
    public virtual IReadOnlyCollection`1<Guid> GetProjectDependencies();
    public virtual void RemoveProjectDependency(IProjectDefinition dependencyProjectDefinition);
    public virtual void AddProjectDependency(IProjectDefinition dependencyProjectDefinition);
    public virtual void Rename(string name, string path);
}
public class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.Xml.XmlSolutionDefinition : object {
    private static char ConfigurationPlatformSeparatorChar;
    private static string Asterisk;
    private List`1<SolutionConfigurationAndPlatform> myDefaultSolutionConfigurations;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<SolutionDefinitionError> <Errors>k__BackingField;
    public XmlSolutionModel SolutionModel;
    private List`1<IProjectDefinition> myProjectDefinitions;
    [NotNullAttribute]
public VirtualFileSystemPath Location { get; }
    public IReadOnlyCollection`1<SolutionDefinitionError> Errors { get; }
    public IReadOnlyCollection`1<SolutionDefinitionError> Warnings { get; }
    private XmlSolutionDefinition(VirtualFileSystemPath location, XmlSolutionModel xmlSolutionModel, SolutionDefinitionError error);
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_Location();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<SolutionDefinitionError> get_Errors();
    public sealed virtual IReadOnlyCollection`1<SolutionDefinitionError> get_Warnings();
    public static XmlSolutionDefinition Read(VirtualFileSystemPath location);
    public static XmlSolutionDefinition CreateFromModel(VirtualFileSystemPath location, XmlSolutionModel model);
    public sealed virtual IReadOnlyCollection`1<IProjectDefinition> GetProjects();
    public sealed virtual IReadOnlyCollection`1<ValueTuple`2<Guid, Guid>> GetChildParentGuids();
    public sealed virtual FormatVersionDefinition GetFormatVersion();
    public sealed virtual IProjectDefinition AddProject(ProjectDefinitionDescriptor descriptor, IProjectDefinition parent);
    public sealed virtual IProjectDefinition RenameProject(IProjectDefinition projectDefinition, string name, string path);
    public sealed virtual void MoveProject(IProjectDefinition projectDefinition, IProjectDefinition parentProjectDefinition);
    public sealed virtual void RemoveProject(IProjectDefinition projectDefinition);
    public sealed virtual ICollection`1<SolutionConfigurationAndPlatform> GetSolutionConfigurations();
    public sealed virtual IDictionary`2<IProjectDefinition, IDictionary`2<SolutionConfigurationAndPlatform, ProjectConfigurationAndPlatform>> GetProjectConfigurations();
    private ProjectConfigurationAndPlatform GetDefaultProjectConfigurationAndPlatform(SolutionConfigurationAndPlatform solutionConfiguration);
    private string GetDefaultProjectConfiguration(string solutionConfiguration);
    private string GetDefaultProjectPlatform(string projectConfiguration, string solutionPlatform);
    private bool SuitableFor(SolutionConfigurationAndPlatform solutionConfiguration, string modelConfig);
    public sealed virtual void UpdateSolutionConfigurations(ICollection`1<SolutionConfigurationAndPlatform> actualSolutionConfigurations);
    public sealed virtual void UpdateProjectConfigurations(IDictionary`2<SolutionConfigurationAndPlatform, IDictionary`2<IProjectDefinition, ProjectConfigurationAndPlatform>> actualProjectConfigurations);
    public sealed virtual string Write();
    [CompilerGeneratedAttribute]
private XmlRegularProjectDefinition <.ctor>b__13_0(Project x);
}
public static class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.Xml.XmlSolutionDefinitionReader : object {
    public static SolutionDefinitionReaderResult Read(VirtualFileSystemPath location);
}
public class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.Xml.XmlSolutionFolderDefinition : XmlProjectDefinition {
    [CompilerGeneratedAttribute]
private Folder <FolderModel>k__BackingField;
    public Folder FolderModel { get; }
    public string Name { get; }
    public string Path { get; }
    public Guid ProjectTypeGuid { get; }
    public XmlSolutionFolderDefinition(XmlSolutionDefinition solutionDefinition, Folder folder);
    [CompilerGeneratedAttribute]
public Folder get_FolderModel();
    public virtual string get_Name();
    public virtual string get_Path();
    public virtual Guid get_ProjectTypeGuid();
    public sealed virtual VirtualFileSystemPath CreateLocation(VirtualFileSystemPath parent);
    public virtual bool IsProjectDefinitionChanged(IProjectDefinition projectDefinition);
    public virtual IReadOnlyCollection`1<VirtualFileSystemPath> GetSolutionItemsLocations(VirtualFileSystemPath solutionDirectory);
    public virtual void AddSolutionItem(string solutionItemName);
    public virtual void UpdateSolutionItem(string oldName, string newName);
    public virtual void RemoveSolutionItem(string name);
    public virtual void Rename(string name, string path);
    public static string FixSolutionFolderName(string solutionFolderName);
}
[XmlRootAttribute("Solution")]
public class JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.Xml.XmlSolutionModel : object {
    [CompilerGeneratedAttribute]
private Configurations <Configurations>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Folder> <Folders>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Project> <Projects>k__BackingField;
    [XmlElementAttribute("Configurations")]
public Configurations Configurations { get; public set; }
    [XmlElementAttribute("Folder")]
public List`1<Folder> Folders { get; public set; }
    [XmlElementAttribute("Project")]
public List`1<Project> Projects { get; public set; }
    [CompilerGeneratedAttribute]
public Configurations get_Configurations();
    [CompilerGeneratedAttribute]
public void set_Configurations(Configurations value);
    [CompilerGeneratedAttribute]
public List`1<Folder> get_Folders();
    [CompilerGeneratedAttribute]
public void set_Folders(List`1<Folder> value);
    [CompilerGeneratedAttribute]
public List`1<Project> get_Projects();
    [CompilerGeneratedAttribute]
public void set_Projects(List`1<Project> value);
}
public class JetBrains.ProjectModel.SolutionStructure.SolutionFilterDefinition : object {
    private HashSet`1<VirtualFileSystemPath> myProjectFilesSet;
    private List`1<string> myErrors;
    private bool myAbsoluteSolutionPath;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <SolutionFilePath>k__BackingField;
    [NotNullAttribute]
public VirtualFileSystemPath Location { get; }
    [NotNullAttribute]
public VirtualFileSystemPath SolutionFilePath { get; }
    [NotNullAttribute]
public IReadOnlyCollection`1<string> Errors { get; }
    [NotNullAttribute]
public IReadOnlyCollection`1<VirtualFileSystemPath> ProjectFilePaths { get; }
    public SolutionFilterDefinition(VirtualFileSystemPath location, VirtualFileSystemPath solutionFilePath, List`1<VirtualFileSystemPath> projectFilePaths, List`1<string> errors, bool absoluteSolutionPath);
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_Location();
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_SolutionFilePath();
    public IReadOnlyCollection`1<string> get_Errors();
    public IReadOnlyCollection`1<VirtualFileSystemPath> get_ProjectFilePaths();
    public bool Filter(VirtualFileSystemPath projectLocation);
    [NotNullAttribute]
public static SolutionFilterDefinition Read(VirtualFileSystemPath path);
    [NotNullAttribute]
private static SolutionFilterDefinition Error(VirtualFileSystemPath path, string error);
    public void AddProject(VirtualFileSystemPath path);
    public void RemoveProject(VirtualFileSystemPath path);
    [CanBeNullAttribute]
public HashSet`1<VirtualFileSystemPath> Update();
    [NotNullAttribute]
public string Write();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.SolutionToolsetEx : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IBuildTool GetBuildTool(ISolutionToolset toolset);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static MonoRuntime GetMonoRuntime(ISolutionToolset toolset);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static DotNetCoreToolset GetDotNetCoreToolset(ISolutionToolset toolset);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.SolutionToolsetEx/<GetBuildToolAsync>d__3")]
[ExtensionAttribute]
[ItemCanBeNullAttribute]
public static ValueTask`1<IBuildTool> GetBuildToolAsync(ISolutionToolset toolset);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.SolutionToolsetEx/<GetMonoRuntimeAsync>d__4")]
[ExtensionAttribute]
[ItemCanBeNullAttribute]
public static ValueTask`1<MonoRuntime> GetMonoRuntimeAsync(ISolutionToolset toolset);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.SolutionToolsetEx/<GetDotNetCoreToolsetAsync>d__5")]
[ExtensionAttribute]
[ItemCanBeNullAttribute]
public static ValueTask`1<DotNetCoreToolset> GetDotNetCoreToolsetAsync(ISolutionToolset toolset);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.SolutionToolsetListenerEx : object {
    private static ILogger ourLogger;
    private static SolutionToolsetListenerEx();
    [ExtensionAttribute]
public static void Changed(IImmutableList`1<ISolutionToolsetListener> listeners, RuntimeAndToolset runtimeAndToolset);
}
public interface JetBrains.ProjectModel.SolutionWatchdog.ISolutionEventsTracker {
    public ISimpleSignal AfterCloseSolution { get; }
    public abstract virtual ISimpleSignal get_AfterCloseSolution();
}
public class JetBrains.ProjectModel.SolutionWatchdog.SolutionLeakException : MemoryLeakException {
    public SolutionLeakException(string message);
}
public class JetBrains.ProjectModel.SolutionWatchdog.SolutionWatchdog : object {
    private static bool IsJetModeAssert;
    private ProductConfigurations myProductConfigurations;
    private ISettingsStore mySettingsStore;
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private static TimeSpan <Timeout>k__BackingField;
    public static TimeSpan Timeout { get; public set; }
    protected bool ThrowExceptionMode { get; }
    protected SolutionWatchdog(Lifetime lifetime, ProductConfigurations productConfigurations, ISettingsStore settingsStore, SolutionsManager solutionsManager, ILogger logger);
    private static SolutionWatchdog();
    [CompilerGeneratedAttribute]
public static TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public static void set_Timeout(TimeSpan value);
    public static void StartWatching(ISolution solution, Action`1<bool> onFinish);
    protected virtual bool get_ThrowExceptionMode();
    protected virtual void OnCloseSolution(ISolution solution);
    protected bool IsEnabled();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <.ctor>b__9_0(Lifetime solutionLifetime, ISolution solution);
}
public enum JetBrains.ProjectModel.SolutionWatchdog.SolutionWatchdogEnableOverride : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("Default")]
public static SolutionWatchdogEnableOverride None;
    [LocalizedDescriptionAttribute("Always ON")]
public static SolutionWatchdogEnableOverride Enable;
    [LocalizedDescriptionAttribute("Always OFF")]
public static SolutionWatchdogEnableOverride Disable;
}
[SettingsKeyAttribute("System.Reflection.Missing", "JetBrains.ProjectModel.Resources.Strings", "SolutionWatchdogSettingsSettingDescription")]
public class JetBrains.ProjectModel.SolutionWatchdog.SolutionWatchdogSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "IsSolutionWatchdogEnabledSettingDescription")]
[ObsoleteAttribute("Has no effect. SolutionWatchdog does not use it anymore.")]
public bool IsEnabled;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ProjectModel.Resources.Strings", "TurnSolutionWatchdogOnOrOffSettingDescription")]
public SolutionWatchdogEnableOverride EnableOverride;
}
public interface JetBrains.ProjectModel.SourceGenerator.ISourceGeneratorDataProvider {
    public IDictionaryEvents`2<SourceGeneratorProjectId, SourceGeneratorProjectData> GeneratedSources { get; }
    public abstract virtual IDictionaryEvents`2<SourceGeneratorProjectId, SourceGeneratorProjectData> get_GeneratedSources();
}
public class JetBrains.ProjectModel.SourceGenerator.SourceGeneratorFileData : ValueType {
    [CompilerGeneratedAttribute]
private string <FileText>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CodePage>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <DocumentId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AnalyzerReferencePath>k__BackingField;
    public string FileText { get; public set; }
    public int CodePage { get; public set; }
    public Guid DocumentId { get; public set; }
    public string AnalyzerReferencePath { get; public set; }
    public SourceGeneratorFileData(string FileText, int CodePage, Guid DocumentId, string AnalyzerReferencePath);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_FileText();
    [CompilerGeneratedAttribute]
public void set_FileText(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_CodePage();
    [CompilerGeneratedAttribute]
public void set_CodePage(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Guid get_DocumentId();
    [CompilerGeneratedAttribute]
public void set_DocumentId(Guid value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_AnalyzerReferencePath();
    [CompilerGeneratedAttribute]
public void set_AnalyzerReferencePath(string value);
    [IsReadOnlyAttribute]
public sealed virtual bool Equals(SourceGeneratorFileData other);
    [IsReadOnlyAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(SourceGeneratorFileData left, SourceGeneratorFileData right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(SourceGeneratorFileData left, SourceGeneratorFileData right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(String& FileText, Int32& CodePage, Guid& DocumentId, String& AnalyzerReferencePath);
}
public class JetBrains.ProjectModel.SourceGenerator.SourceGeneratorProjectData : ValueType {
    [CompilerGeneratedAttribute]
private Guid <RoslynProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SourceGeneratorFileData> <Files>k__BackingField;
    public Guid RoslynProjectId { get; public set; }
    public IDictionary`2<string, SourceGeneratorFileData> Files { get; public set; }
    public SourceGeneratorProjectData(Guid RoslynProjectId, IDictionary`2<string, SourceGeneratorFileData> Files);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Guid get_RoslynProjectId();
    [CompilerGeneratedAttribute]
public void set_RoslynProjectId(Guid value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IDictionary`2<string, SourceGeneratorFileData> get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(IDictionary`2<string, SourceGeneratorFileData> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(SourceGeneratorProjectData left, SourceGeneratorProjectData right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(SourceGeneratorProjectData left, SourceGeneratorProjectData right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(SourceGeneratorProjectData other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(Guid& RoslynProjectId, IDictionary`2& Files);
}
public class JetBrains.ProjectModel.SourceGenerator.SourceGeneratorProjectId : ValueType {
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <ProjectPath>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFramework>k__BackingField;
    public VirtualFileSystemPath ProjectPath { get; public set; }
    public TargetFrameworkId TargetFramework { get; public set; }
    public SourceGeneratorProjectId(VirtualFileSystemPath ProjectPath, TargetFrameworkId TargetFramework);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public VirtualFileSystemPath get_ProjectPath();
    [CompilerGeneratedAttribute]
public void set_ProjectPath(VirtualFileSystemPath value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public TargetFrameworkId get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(TargetFrameworkId value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(SourceGeneratorProjectId left, SourceGeneratorProjectId right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(SourceGeneratorProjectId left, SourceGeneratorProjectId right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(SourceGeneratorProjectId other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(VirtualFileSystemPath& ProjectPath, TargetFrameworkId& TargetFramework);
}
public interface JetBrains.ProjectModel.Standalone.IProjectImporter {
    public abstract virtual IProject AddProject(SolutionElement solution, VirtualFileSystemPath projectLocation, TargetFrameworkId defaultTargetFrameworkId);
    public abstract virtual bool ImportSolution(SolutionElement solution, VirtualFileSystemPath solutionFilePath);
}
public interface JetBrains.ProjectModel.Standalone.ISpecificProjectImporter {
    [CanBeNullAttribute]
public abstract virtual IProject ImportProject(SolutionElement solutionElement, SlnFileProject project, TargetFrameworkId defaultTargetFrameworkId);
}
public class JetBrains.ProjectModel.Standalone.WebSite.WebSiteProjectImporter : object {
    private IShellLocks myLocks;
    private static Regex ReTargetFrameworkMoniker;
    public WebSiteProjectImporter(IShellLocks locks);
    private static WebSiteProjectImporter();
    public sealed virtual IProject ImportProject(SolutionElement solutionElement, SlnFileProject slnProject, TargetFrameworkId defaultTargetFrameworkId);
    private static VirtualFileSystemPath GetWebSiteProjectLocation(SlnFileProject slnProject);
    private ProjectLanguage DefaultWebSiteLanguage(SlnFileProject slnProject);
    private TargetFrameworkId GetTargetFramework(SlnFileProject slnProject);
    private static void FillProjectStructure(VirtualFileSystemPath directory, ProjectImpl project);
}
[SolutionComponentAttribute("20")]
public class JetBrains.ProjectModel.StartupMeasurerDisabler : object {
    public StartupMeasurerDisabler(Lifetime lifetime, ILogger logger, ISolutionLoadTasksScheduler scheduler, SynchronizationPoints syncPoings);
    public sealed virtual IEnumerable`1<EventData> Dump(IComponentContainer container);
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ProjectModel.TargetFrameworkIdDetector : object {
    private IReadOnlyList`1<ITargetFrameworkIdProvider> myTargetFrameworkIdProviders;
    [CompilerGeneratedAttribute]
private ISignal`1<VirtualFileSystemPath> <TargetFrameworkIdsChanged>k__BackingField;
    public ISignal`1<VirtualFileSystemPath> TargetFrameworkIdsChanged { get; }
    public TargetFrameworkIdDetector(Lifetime lifetime, IEnumerable`1<ITargetFrameworkIdProvider> providers);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<VirtualFileSystemPath> get_TargetFrameworkIdsChanged();
    public sealed virtual IReadOnlyCollection`1<TargetFrameworkId> GetTargetFrameworkIds(VirtualFileSystemPath projectFilePath, Func`2<string, string> getPropertyValue, Func`1<IReadOnlyCollection`1<TargetFrameworkId>> getDefaultValue);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_1(VirtualFileSystemPath path);
}
public interface JetBrains.ProjectModel.Tasks.ISolutionLoadTasksBarrierCookie {
    public string Reason { get; }
    public bool IsDisposed { get; }
    public abstract virtual string get_Reason();
    public abstract virtual bool get_IsDisposed();
}
public interface JetBrains.ProjectModel.Tasks.ISolutionLoadTasksScheduler {
    public IProperty`1<bool> IsRunning { get; }
    public IProperty`1<SolutionLoadTask> CurrentTask { get; }
    public abstract virtual bool IsOccurred(SolutionLoadTaskKinds task);
    public abstract virtual void EnqueueTask(SolutionLoadTask task);
    [NotNullAttribute]
public abstract virtual ISolutionLoadTasksBarrierCookie SetTasksBarrier(SolutionLoadTaskKinds kind, string reason);
    public abstract virtual void StartScheduling();
    public abstract virtual void Shutdown();
    public abstract virtual IProperty`1<bool> get_IsRunning();
    public abstract virtual IProperty`1<SolutionLoadTask> get_CurrentTask();
    public abstract virtual SolutionLoadTasksStatistics GetStatistics();
}
public interface JetBrains.ProjectModel.Tasks.ISolutionLoadTasksSchedulerProvider {
    public abstract virtual ISolutionLoadTasksScheduler GetTasksScheduler();
}
public class JetBrains.ProjectModel.Tasks.SolutionLoadTask : object {
    private static Regex ourIdRegex;
    [CanBeNullAttribute]
public Type Source;
    [CanBeNullAttribute]
public SolutionLoadTaskIdentifier Id;
    [NotNullAttribute]
public string TaskName;
    [NotNullAttribute]
public Action ActionToExecute;
    public SolutionLoadTaskKinds Kind;
    public bool Uniq;
    private SolutionLoadTask(string name, SolutionLoadTaskKinds kind, Action action);
    public SolutionLoadTask(Type source, SolutionLoadTaskKinds kind, Action action);
    public SolutionLoadTask(Type source, SolutionLoadTaskKinds kind, bool uniq, Action action);
    public SolutionLoadTask(Type source, string name, SolutionLoadTaskKinds kind, Action action);
    public SolutionLoadTask(Type source, string name, SolutionLoadTaskKinds kind, bool uniq, Action action);
    public SolutionLoadTask(Type source, SolutionLoadTaskKinds kind, SolutionLoadTaskIdentifier id, Action action, string idExpression);
    public SolutionLoadTask(Type source, SolutionLoadTaskKinds kind, SolutionLoadTaskIdentifier id, bool uniq, Action action, string idExpression);
    public SolutionLoadTask(Type source, string name, SolutionLoadTaskKinds kind, SolutionLoadTaskIdentifier id, Action action, string idExpression);
    public SolutionLoadTask(Type source, string name, SolutionLoadTaskKinds kind, SolutionLoadTaskIdentifier id, bool uniq, Action action, string idExpression);
    private static SolutionLoadTask();
    private static void AssertIdArgumentExpression(SolutionLoadTaskIdentifier id, string idExpression, string idArgumentName);
    private static string GetNameBySourceAndId(Type source, SolutionLoadTaskIdentifier id);
    public virtual string ToString();
}
public class JetBrains.ProjectModel.Tasks.SolutionLoadTaskIdentifier : EnumPattern {
    public SolutionLoadTaskIdentifier(string name);
}
public enum JetBrains.ProjectModel.Tasks.SolutionLoadTaskKinds : Enum {
    public int value__;
    public static SolutionLoadTaskKinds LoadSolutionFromCache;
    public static SolutionLoadTaskKinds SolutionContainerCompose;
    public static SolutionLoadTaskKinds SolutionContainerComposed;
    public static SolutionLoadTaskKinds InitialSynchronizeSolution;
    public static SolutionLoadTaskKinds SolutionStructureReady;
    public static SolutionLoadTaskKinds FireProjectItemsAdded;
    public static SolutionLoadTaskKinds AfterProjectItemsAdded;
    public static SolutionLoadTaskKinds FireAssembliesAdded;
    public static SolutionLoadTaskKinds PreparePsiModules;
    public static SolutionLoadTaskKinds BeforeKickOff;
    public static SolutionLoadTaskKinds KickOff;
    public static SolutionLoadTaskKinds StartPsi;
    public static SolutionLoadTaskKinds WaitFinalSynchronizeSolution;
    public static SolutionLoadTaskKinds FinalSynchronizeSolution_UpdateProjects;
    public static SolutionLoadTaskKinds FinalSynchronizeSolution;
    public static SolutionLoadTaskKinds RefreshBuildSettings;
    public static SolutionLoadTaskKinds Done;
    public static SolutionLoadTaskKinds AfterDone;
    public static SolutionLoadTaskKinds AsLateAsPossible;
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Tasks.SolutionLoadTaskKindsEx : object {
    private static bool ourIsBadKindReported;
    [ExtensionAttribute]
public static SolutionLoadTaskKinds Next(SolutionLoadTaskKinds kind);
    [ExtensionAttribute]
public static string GetPresentableName(SolutionLoadTaskKinds kind);
}
public class JetBrains.ProjectModel.Tasks.SolutionLoadTasksSchedulerAsync : SolutionLoadTasksSchedulerBase {
    public static string ScheduleNextTaskQueueName;
    private IShellLocks myLocks;
    private TaskPriority myTaskPriority;
    public SolutionLoadTasksSchedulerAsync(IShellLocks locks, TaskPriority taskPriority);
    public virtual void EnqueueTask(SolutionLoadTask task);
    public virtual void StartScheduling();
    private void Schedule();
    [CompilerGeneratedAttribute]
private void <Schedule>b__6_0();
}
public abstract class JetBrains.ProjectModel.Tasks.SolutionLoadTasksSchedulerBase : object {
    private static GroupId ourPerfBarrierGroupId;
    private LifetimeDefinition myLifetimeDef;
    protected ILogger myLogger;
    protected Lifetime myLifetime;
    protected TasksBucket[] myBuckets;
    private SolutionLoadTaskKinds modreq(System.Runtime.CompilerServices.IsVolatile) myLastMaxKinds;
    protected IProperty`1<bool> IsStarted;
    private object mySentry;
    private int myTaskKindWatermark;
    private SolutionLoadTasksStatistics myStatistics;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsRunning>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<SolutionLoadTask> <CurrentTask>k__BackingField;
    public IProperty`1<bool> IsRunning { get; }
    public IProperty`1<SolutionLoadTask> CurrentTask { get; }
    private static SolutionLoadTasksSchedulerBase();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsRunning();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<SolutionLoadTask> get_CurrentTask();
    public virtual void EnqueueTask(SolutionLoadTask task);
    public sealed virtual bool IsOccurred(SolutionLoadTaskKinds task);
    public sealed virtual ISolutionLoadTasksBarrierCookie SetTasksBarrier(SolutionLoadTaskKinds kind, string reason);
    public virtual void StartScheduling();
    public sealed virtual void Shutdown();
    public sealed virtual SolutionLoadTasksStatistics GetStatistics();
    [CanBeNullAttribute]
protected SolutionLoadTask DequeueTask();
    [CanBeNullAttribute]
protected string GetNextTaskName();
    private bool GetNextTask(bool dequeue, SolutionLoadTask& task, WaitHandle& blocker);
    protected void ExecuteTask(SolutionLoadTask task);
    protected int GetTotalQueueSize();
    protected ICollection`1<string> GetAllWaitReasons();
    private static int GetMaxSolutionLoadTaskKind();
    private void AssertIsAlive(string message);
    private void AddWaitHandleInternal(Lifetime lifetime, WaitHandle handle);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_0();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Tasks.SolutionLoadTasksSchedulerEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static ISolutionLoadTasksBarrierCookie SetTasksBarrierOnNextKind(ISolutionLoadTasksScheduler scheduler, SolutionLoadTaskKinds kind, string reason);
}
public class JetBrains.ProjectModel.Tasks.SolutionLoadTasksSchedulerSync : SolutionLoadTasksSchedulerBase {
    private IShellLocks myLocks;
    public SolutionLoadTasksSchedulerSync(IShellLocks locks);
    public virtual void EnqueueTask(SolutionLoadTask task);
    public virtual void StartScheduling();
    private void ExecuteTasks();
}
public class JetBrains.ProjectModel.Tasks.SolutionLoadTasksStatistics : object {
    [CompilerGeneratedAttribute]
private Data <Total>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<SolutionLoadTaskKinds, Data> <Tasks>k__BackingField;
    public Data Total { get; }
    public IDictionary`2<SolutionLoadTaskKinds, Data> Tasks { get; }
    public SolutionLoadTasksStatistics(SolutionLoadTasksStatistics other);
    [CompilerGeneratedAttribute]
public Data get_Total();
    [CompilerGeneratedAttribute]
public IDictionary`2<SolutionLoadTaskKinds, Data> get_Tasks();
    internal void AddTaskStatistics(SolutionLoadTask task, TimeSpan start, TimeSpan duration);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ProjectModel.Tasks.SolutionLoadTasksStatisticsDumper : object {
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.Tasks.SolutionLoadTasksStatisticsDumper/<Dump>d__0")]
public sealed virtual IEnumerable`1<EventData> Dump(IComponentContainer container);
}
public class JetBrains.ProjectModel.Transaction.BeforeChangesCommitsEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IProjectModelBatchChange <ProjectModelBatchChange>k__BackingField;
    public IProjectModelBatchChange ProjectModelBatchChange { get; }
    public BeforeChangesCommitsEventArgs(IProjectModelBatchChange projectModelBatchChange);
    [CompilerGeneratedAttribute]
public IProjectModelBatchChange get_ProjectModelBatchChange();
}
public class JetBrains.ProjectModel.Transaction.BeforeChangesCommitsEventHandler : MulticastDelegate {
    public BeforeChangesCommitsEventHandler(object object, IntPtr method);
    public virtual void Invoke(BeforeChangesCommitsEventArgs args);
    public virtual IAsyncResult BeginInvoke(BeforeChangesCommitsEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public interface JetBrains.ProjectModel.Transaction.IProjectModelBatchChange {
    public abstract virtual IList`1<ProjectModelChange> GetChanges();
    public abstract virtual void Commit(ITaskExecutor executor);
}
public interface JetBrains.ProjectModel.Transaction.IProjectModelBatchChangeManager {
    public abstract virtual void AddChanges(ICollection`1<ProjectModelChange> deltas);
    public abstract virtual IProjectModelBatchChange BeginBatchChange(bool notifyChangeManager);
    [CompilerGeneratedAttribute]
public abstract virtual void add_BeforeChangesCommits(BeforeChangesCommitsEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BeforeChangesCommits(BeforeChangesCommitsEventHandler value);
}
public class JetBrains.ProjectModel.Transaction.ProjectModelBatchChangeCookie : object {
    private ITaskExecutor myTaskExecutor;
    private IProjectModelBatchChange myProjectModelBatchChange;
    public ProjectModelBatchChangeCookie(IProjectModelBatchChangeManager batchChangeManager, bool notifyChangeManger, ITaskExecutor taskExecutor);
    public ProjectModelBatchChangeCookie(ISolution solution, ITaskExecutor taskExecutor);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ProjectModel.Transaction.ProjectModelBatchChangeManager : object {
    [CompilerGeneratedAttribute]
private ISolution <solution>P;
    [CompilerGeneratedAttribute]
private ChangeManager <changeManager>P;
    [CompilerGeneratedAttribute]
private IShellLocks <locks>P;
    [CompilerGeneratedAttribute]
private IWritableProjectModelTimestamps <timestamps>P;
    [NullableAttribute("2")]
private ProjectModelBatchChange myCurrentProjectModelBatchChange;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private BeforeChangesCommitsEventHandler BeforeChangesCommits;
    public ProjectModelBatchChangeManager(ISolution solution, ChangeManager changeManager, IShellLocks locks, IWritableProjectModelTimestamps timestamps);
    public sealed virtual void AddChanges(ICollection`1<ProjectModelChange> deltas);
    internal void IncrementAnyChange();
    internal void EndTransaction(ProjectModelBatchChange projectModelBatchChange, ITaskExecutor executor);
    private void OnBeforeTransactionCommits(BeforeChangesCommitsEventArgs args);
    public sealed virtual IProjectModelBatchChange BeginBatchChange(bool notifyChangeManager);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_BeforeChangesCommits(BeforeChangesCommitsEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_BeforeChangesCommits(BeforeChangesCommitsEventHandler value);
}
public static class JetBrains.ProjectModel.Transaction.ProjectModelChangeUtil : object {
    public static void OnChange(IProjectModelBatchChangeManager batchChangeManager, ProjectModelChange changeDelta);
    public static void AddPropertyChange(IProjectModelBatchChangeManager batchChangeManager, IProjectItem item, string propertyName, object oldValue, object newValue);
}
[ProjectFileTypeDefinitionAttribute("TSX")]
public class JetBrains.ProjectModel.TsxProjectFileType : TypeScriptProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static TsxProjectFileType <Instance>k__BackingField;
    public static string TSX_EXTENSION;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static TsxProjectFileType Instance { get; private set; }
    public TsxProjectFileType(string name);
    public TsxProjectFileType(string name, string presentableName);
    public TsxProjectFileType(string name, string presentableName, IEnumerable`1<string> extensions);
    [CompilerGeneratedAttribute]
public static TsxProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(TsxProjectFileType value);
}
[ProjectFileTypeDefinitionAttribute("TS")]
public class JetBrains.ProjectModel.TypeScriptProjectFileType : JavaScriptProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static TypeScriptProjectFileType <Instance>k__BackingField;
    public static string TS_EXTENSION;
    public static string D_TS_EXTENSION;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static TypeScriptProjectFileType Instance { get; private set; }
    protected TypeScriptProjectFileType(string name);
    protected TypeScriptProjectFileType(string name, string presentableName);
    protected TypeScriptProjectFileType(string name, string presentableName, IEnumerable`1<string> strings);
    [CompilerGeneratedAttribute]
public static TypeScriptProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(TypeScriptProjectFileType value);
    public virtual BuildAction GetDefaultBuildAction(IProject project, string extension);
    [CompilerGeneratedAttribute]
internal static bool <GetDefaultBuildAction>g__IsBuildAction|11_0(IProjectFile projectFile, BuildAction buildAction);
}
[ProjectFileTypeDefinitionAttribute("UNKNOWN")]
public class JetBrains.ProjectModel.UnknownProjectFileType : ProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static UnknownProjectFileType <Instance>k__BackingField;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static UnknownProjectFileType Instance { get; private set; }
    protected UnknownProjectFileType(string name);
    protected UnknownProjectFileType(string name, string presentableName);
    protected UnknownProjectFileType(string name, string presentableName, IEnumerable`1<string> extensions);
    [CompilerGeneratedAttribute]
public static UnknownProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(UnknownProjectFileType value);
}
[ProjectFileTypeDefinitionAttribute("UNKNOWN_TEXTUAL")]
public class JetBrains.ProjectModel.UnknownTextualProjectFileType : UnknownProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static UnknownTextualProjectFileType <Instance>k__BackingField;
    public static string LEX_EXTENSION;
    public static string PSI_EXTENSION;
    public static string BAT_EXTENSION;
    public static string PS1_EXTENSION;
    public static string MD_EXTENSION;
    public static string TXT_EXTENSION;
    public static string RB_EXTENSION;
    public static string PHP_EXTENSION;
    public static string PY_EXTENSION;
    public static string JAVA_EXTENSION;
    public static string JSP_EXTENSION;
    public static string KT_EXTENSION;
    public static string HBS_EXTENSION;
    public static string LESS_EXTENSION;
    public static string SASS_EXTENSION;
    public static string SCSS_EXTENSION;
    public static string COFFEE_EXTENSION;
    public static string DART_EXTENSION;
    public static string AS_EXTENSION;
    public static string STYL_EXTENSION;
    public static string INI_EXTENSION;
    public static string FX_EXTENSION;
    public static string RULESET;
    public static string GLOBALCONFIG;
    public static string EDITORCONFIG;
    public static string CLANGFORMAT1;
    public static string CLANGFORMAT2;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static UnknownTextualProjectFileType Instance { get; private set; }
    [CompilerGeneratedAttribute]
public static UnknownTextualProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(UnknownTextualProjectFileType value);
    public virtual BuildAction GetDefaultBuildAction(IProject project, string extension);
}
public abstract class JetBrains.ProjectModel.UnloadedProjectSupportManager : object {
    public ISignal`1<Dictionary`2<Guid, Pair`2<IProjectReferenceDescriptor, IProjectReferenceProperties>>> ReferencesToAdd { get; }
    public ISignal`1<Dictionary`2<Guid, Pair`2<IProjectReferenceDescriptor, IProjectReferenceProperties>>> ReferencesToRemove { get; }
    public ISignal`1<IProject> BeforeProjectUnloadedSignal { get; }
    public ISignal`1<Guid> AfterProjectReloadedSignal { get; }
    public abstract virtual void AfterProjectLoaded(IProject project);
    public abstract virtual void AfterProjectReloaded(Guid projectGuid);
    public abstract virtual void BeforeProjectUnloaded(IProject unloadedProject);
    public abstract virtual void BeforeProjectRemoved(IProject project);
    public abstract virtual void BeforeUnloadedProjectRemoved(Guid projectGuid);
    public abstract virtual ISignal`1<Dictionary`2<Guid, Pair`2<IProjectReferenceDescriptor, IProjectReferenceProperties>>> get_ReferencesToAdd();
    public abstract virtual ISignal`1<Dictionary`2<Guid, Pair`2<IProjectReferenceDescriptor, IProjectReferenceProperties>>> get_ReferencesToRemove();
    public abstract virtual ISignal`1<IProject> get_BeforeProjectUnloadedSignal();
    public abstract virtual ISignal`1<Guid> get_AfterProjectReloadedSignal();
}
public static class JetBrains.ProjectModel.Unreal.CoreUnrealHelper : object {
    private static String[] UNREAL_PROJECT_FILE_SUFFIXES;
    private static CoreUnrealHelper();
    public static bool IsUnrealProjectFile(IProjectFile projectFile);
    public static bool IsUnrealSolution(ISolution solution);
}
[ObsoleteAttribute("Do not use this component, this is for test purposes only")]
[SolutionComponentAttribute("16")]
public class JetBrains.ProjectModel.UnusedDemandSolutionComponent : object {
    public UnusedDemandSolutionComponent(SolutionElement solution);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.Update.ExpandDesignTimeFacadesPatcher : object {
    private static string Facades;
    private IPlatformManager myPlatformManager;
    private AssemblyInfoDatabase myAssemblyInfoDatabase;
    private IShellLocks myShellLocks;
    private IMsBuildDataStorage myMsBuildDataStorage;
    public ExpandDesignTimeFacadesPatcher(Lifetime lifetime, IPlatformManager platformManager, AssemblyInfoDatabase assemblyInfoDatabase, IShellLocks shellLocks, IMsBuildDataStorage msBuildDataStorage);
    public virtual void PatchReferences(ProjectImpl project);
    public virtual bool IsApplicable(ProjectImpl project);
    private bool HasDependenciesOnSystemRuntime(ProjectImpl project);
    private static bool PortableProjectThatDependsOnSystemRuntime(IProject referencedProject);
}
public interface JetBrains.ProjectModel.Update.IProjectDescriptor {
}
public interface JetBrains.ProjectModel.Update.IProjectFileDescriptor {
    [CanBeNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public VirtualFileSystemPath Location { get; }
    [NotNullAttribute]
public IProjectFileProperties Properties { get; }
    [NotNullAttribute]
public IProjectElementOrigin Origin { get; }
    public bool IsFileBeingEdited { get; }
    public abstract virtual string get_Name();
    public abstract virtual VirtualFileSystemPath get_Location();
    public abstract virtual IProjectFileProperties get_Properties();
    public abstract virtual IProjectElementOrigin get_Origin();
    public abstract virtual bool get_IsFileBeingEdited();
}
public interface JetBrains.ProjectModel.Update.IProjectFolderDescriptor {
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public VirtualFileSystemPath Location { get; }
    [NotNullAttribute]
public IList`1<IProjectItemDescriptor> Items { get; }
    public bool IsHidden { get; }
    public bool IsAppDesigner { get; }
    public bool AllowsNonExistence { get; }
    public abstract virtual string get_Name();
    public abstract virtual VirtualFileSystemPath get_Location();
    public abstract virtual IList`1<IProjectItemDescriptor> get_Items();
    public abstract virtual bool get_IsHidden();
    public abstract virtual bool get_IsAppDesigner();
    public abstract virtual bool get_AllowsNonExistence();
}
public interface JetBrains.ProjectModel.Update.IProjectItemDescriptor {
}
public interface JetBrains.ProjectModel.Update.IProjectModelUpdater {
    [NotNullAttribute]
public IProperty`1<bool> IsIdle { get; }
    public ISignal`1<IProjectSearchDescriptor> ProjectCreatedOrUpdated { get; }
    public ISignal`1<IProjectSearchDescriptor> ProjectReferencesUpdated { get; }
    public abstract virtual IProperty`1<bool> get_IsIdle();
    public abstract virtual ISignal`1<IProjectSearchDescriptor> get_ProjectCreatedOrUpdated();
    public abstract virtual ISignal`1<IProjectSearchDescriptor> get_ProjectReferencesUpdated();
    [NotNullAttribute]
public abstract virtual IProject UpdateOrCreateProject(IProjectDescriptor projectDescriptor, UpdateFlags flags);
    [NotNullAttribute]
public abstract virtual Task`1<IProject> UpdateOrCreateProjectAsync(IProjectDescriptor projectDescriptor, UpdateFlags flags);
    [CanBeNullAttribute]
public abstract virtual IProjectToModuleReference FindProjectReference(IProjectSearchDescriptor projectSearchDescriptor, IProjectReferenceDescriptor referenceDescriptor);
    public abstract virtual void UpdateProjectReferences(IList`1<Pair`2<IProjectSearchDescriptor, IList`1<Pair`2<IProjectReferenceDescriptor, IProjectReferenceProperties>>>> descriptors, bool notifyChangeManager);
    public abstract virtual Task UpdateProjectReferencesAsync(IList`1<Pair`2<IProjectSearchDescriptor, IList`1<Pair`2<IProjectReferenceDescriptor, IProjectReferenceProperties>>>> descriptors, bool notifyChangeManager);
}
public interface JetBrains.ProjectModel.Update.IProjectPropertiesDescriptor {
    public Guid Guid { get; }
    [CanBeNullAttribute]
public IProjectSearchDescriptor ParentProjectPointer { get; }
    [NotNullAttribute]
public IProjectProperties ProjectProperties { get; }
    public abstract virtual Guid get_Guid();
    public abstract virtual IProjectSearchDescriptor get_ParentProjectPointer();
    public abstract virtual IProjectProperties get_ProjectProperties();
    public abstract virtual void SetParentProjectPointer(IProjectSearchDescriptor parentProjectSearchDescriptor);
}
public interface JetBrains.ProjectModel.Update.IProjectReferenceDescriptor {
    public TargetFrameworkId TargetFrameworkId { get; }
    public abstract virtual TargetFrameworkId get_TargetFrameworkId();
}
public interface JetBrains.ProjectModel.Update.IProjectReferenceProperties {
    public bool IsHidden { get; }
    public bool CopyLocal { get; }
    public bool EmbedInteropTypes { get; }
    public string AliasList { get; }
    [NotNullAttribute]
public IProjectElementOrigin Origin { get; }
    public bool AutoReferenced { get; }
    public bool IsOutputAssembly { get; }
    public bool ReferenceOutputAssembly { get; }
    public abstract virtual bool get_IsHidden();
    public abstract virtual bool get_CopyLocal();
    public abstract virtual bool get_EmbedInteropTypes();
    public abstract virtual string get_AliasList();
    public abstract virtual IProjectElementOrigin get_Origin();
    public abstract virtual bool get_AutoReferenced();
    public abstract virtual bool get_IsOutputAssembly();
    public abstract virtual bool get_ReferenceOutputAssembly();
}
public interface JetBrains.ProjectModel.Update.IProjectReferencesDescriptor {
    [NotNullAttribute]
public IList`1<Pair`2<IProjectReferenceDescriptor, IProjectReferenceProperties>> ProjectReferences { get; }
    public abstract virtual IList`1<Pair`2<IProjectReferenceDescriptor, IProjectReferenceProperties>> get_ProjectReferences();
}
public interface JetBrains.ProjectModel.Update.IProjectReferenceToken {
    [CanBeNullAttribute]
public abstract virtual IProjectToModuleReference CreateProjectReference(IProject project);
    public abstract virtual void OnProjectReferenceRemoved(IProjectToModuleReference reference);
}
public interface JetBrains.ProjectModel.Update.IProjectToAssemblyReferenceDescriptor {
    [CanBeNullAttribute]
public VirtualFileSystemPath HintPath { get; }
    [NotNullAttribute]
public AssemblyNameInfo AssemblyName { get; }
    public abstract virtual VirtualFileSystemPath get_HintPath();
    public abstract virtual AssemblyNameInfo get_AssemblyName();
}
public interface JetBrains.ProjectModel.Update.IProjectToAssemblyReferencePatcher {
    public abstract virtual void PatchReferences(ProjectImpl project);
    public abstract virtual bool IsApplicable(ProjectImpl project);
}
public interface JetBrains.ProjectModel.Update.ISdkReferenceToken {
}
public class JetBrains.ProjectModel.Update.LateWriteLockCookie : object {
    private ILogger myLogger;
    private IShellLocks myLocks;
    private IProjectModelBatchChangeManager myBatchChangeManager;
    private bool myNotifyChangeManager;
    private bool myIsReadOnly;
    private bool myWriteLockTaken;
    private IProjectModelBatchChange myBatchChange;
    [ThreadStaticAttribute]
private static LateWriteLockCookie ourCurrentCookie;
    public bool NotifyChangeManager { get; }
    public LateWriteLockCookie(ILogger logger, IShellLocks locks, IProjectModelBatchChangeManager batchChangeManager, bool notifyChangeManager, bool isReadOnly);
    public bool get_NotifyChangeManager();
    public void AcquireWriteLockIfNecessary(string callerFilePath, string callerMemberName);
    public void AcquireWriteLockIfNecessary(CallerInfo callerInfo);
    public sealed virtual void Dispose();
    public static bool TryAcquireWriteLock();
    public static void AssertWriteAccessAllowed(IShellLocks locks);
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.Update.ProjectDescriptor : UserDataHolder {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <ProjectFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectSearchDescriptor <ParentProjectPointer>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectProperties <ProjectProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IProjectItemDescriptor> <Items>k__BackingField;
    public string Name { get; private set; }
    public VirtualFileSystemPath ProjectFilePath { get; private set; }
    public VirtualFileSystemPath Location { get; private set; }
    public Guid Guid { get; }
    public IProjectSearchDescriptor ParentProjectPointer { get; public set; }
    public IProjectProperties ProjectProperties { get; }
    private IProjectSearchDescriptor JetBrains.ProjectModel.Search.IProjectElementSearchDescriptor.OwnerProject { get; }
    public bool IsHidden { get; public set; }
    public bool AllowsNonExistence { get; }
    public bool IsAppDesigner { get; }
    public IList`1<IProjectItemDescriptor> Items { get; }
    public ProjectKind ProjectKind { get; }
    public string ProjectName { get; }
    public Guid ProjectGuid { get; }
    public Guid ProjectPropertiesOwnerFactoryGuid { get; }
    public VirtualFileSystemPath ProjectFileLocation { get; }
    public VirtualFileSystemPath ProjectLocation { get; }
    public IReadOnlyDictionary`2<TargetFrameworkId, VirtualFileSystemPath> OutputPaths { get; }
    private ProjectDescriptor(Guid guid, IProjectProperties projectProperties, IProjectSearchDescriptor parentProjectPointer, string projectName);
    private ProjectDescriptor(Guid guid, IProjectProperties projectProperties, IProjectSearchDescriptor parentProjectPointer, VirtualFileSystemPath projectLocation);
    private ProjectDescriptor(Guid guid, IProjectProperties projectProperties, IProjectSearchDescriptor parentProjectPointer, IProjectFileDescriptor projectFileDescriptor);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_ProjectFilePath();
    [CompilerGeneratedAttribute]
private void set_ProjectFilePath(VirtualFileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual VirtualFileSystemPath get_Location();
    [CompilerGeneratedAttribute]
private void set_Location(VirtualFileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Guid();
    [CompilerGeneratedAttribute]
public sealed virtual IProjectSearchDescriptor get_ParentProjectPointer();
    [CompilerGeneratedAttribute]
public void set_ParentProjectPointer(IProjectSearchDescriptor value);
    [CompilerGeneratedAttribute]
public sealed virtual IProjectProperties get_ProjectProperties();
    public sealed virtual void SetParentProjectPointer(IProjectSearchDescriptor parentProjectSearchDescriptor);
    private sealed virtual override IProjectSearchDescriptor JetBrains.ProjectModel.Search.IProjectElementSearchDescriptor.get_OwnerProject();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsHidden();
    [CompilerGeneratedAttribute]
public void set_IsHidden(bool value);
    public sealed virtual bool get_AllowsNonExistence();
    public sealed virtual bool get_IsAppDesigner();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IProjectItemDescriptor> get_Items();
    public static ProjectDescriptor CreateByProjectFile(Guid guid, IProjectProperties projectProperties, IProjectSearchDescriptor parentProjectPointer, IProjectFileDescriptor projectFileDescriptor, string projectName);
    public static ProjectDescriptor CreateByProjectLocation(Guid guid, IProjectProperties projectProperties, IProjectSearchDescriptor parentProjectPointer, VirtualFileSystemPath projectFolder, string projectName);
    public static ProjectDescriptor CreateByProjectName(Guid guid, IProjectProperties projectProperties, IProjectSearchDescriptor parentProjectPointer, string projectName);
    public static ProjectDescriptor CreateWithoutItemsByProjectDescriptor(IProjectDescriptor projectDescriptor);
    public virtual string ToString();
    public sealed virtual ProjectKind get_ProjectKind();
    public sealed virtual string get_ProjectName();
    public sealed virtual Guid get_ProjectGuid();
    public sealed virtual Guid get_ProjectPropertiesOwnerFactoryGuid();
    public sealed virtual VirtualFileSystemPath get_ProjectFileLocation();
    public sealed virtual VirtualFileSystemPath get_ProjectLocation();
    public sealed virtual IReadOnlyDictionary`2<TargetFrameworkId, VirtualFileSystemPath> get_OutputPaths();
    public sealed virtual IEnumerable`1<KeyValuePair`2<string, string>> GetAdditionalInfo();
    public sealed virtual TargetFrameworkId GetSingleTargetFrameworkId();
    public sealed virtual TargetFrameworkId GetRandomTargetFrameworkId();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Update.ProjectDescriptorExtensions : object {
    [ExtensionAttribute]
public static bool IsDotNetCoreProject(IProjectPropertiesDescriptor projectDescriptor);
    [ExtensionAttribute]
public static bool IsWebApplication(IProjectPropertiesDescriptor projectDescriptor, ProjectFlavoursFactory projectFlavoursFactory);
    [ExtensionAttribute]
[NotNullAttribute]
public static TargetFrameworkId GetSingleTargetFrameworkId(IProjectPropertiesDescriptor projectDescriptor);
    [ExtensionAttribute]
[NotNullAttribute]
public static TargetFrameworkId GetRandomTargetFrameworkId(IProjectPropertiesDescriptor projectDescriptor);
    [ExtensionAttribute]
public static IReadOnlyList`1<TargetFrameworkId> GetTargetFrameworkIds(IProjectPropertiesDescriptor projectDescriptor);
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.Update.ProjectFileDescriptor : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectFileProperties <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectElementOrigin <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFileBeingEdited>k__BackingField;
    public string Name { get; }
    public VirtualFileSystemPath Location { get; }
    public IProjectFileProperties Properties { get; }
    public IProjectElementOrigin Origin { get; public set; }
    public bool IsFileBeingEdited { get; public set; }
    public ProjectFileDescriptor(string name, VirtualFileSystemPath location, IProjectFileProperties properties);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual VirtualFileSystemPath get_Location();
    [CompilerGeneratedAttribute]
public sealed virtual IProjectFileProperties get_Properties();
    [CompilerGeneratedAttribute]
public sealed virtual IProjectElementOrigin get_Origin();
    [CompilerGeneratedAttribute]
public void set_Origin(IProjectElementOrigin value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsFileBeingEdited();
    [CompilerGeneratedAttribute]
public void set_IsFileBeingEdited(bool value);
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.Update.ProjectFolderDescriptor : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IProjectItemDescriptor> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowsNonExistence>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAppDesigner>k__BackingField;
    public string Name { get; }
    public VirtualFileSystemPath Location { get; }
    public IList`1<IProjectItemDescriptor> Items { get; }
    public bool IsHidden { get; public set; }
    public bool AllowsNonExistence { get; public set; }
    public bool IsAppDesigner { get; public set; }
    public ProjectFolderDescriptor(VirtualFileSystemPath location, IProjectItemDescriptor[] items);
    public ProjectFolderDescriptor(string name, VirtualFileSystemPath location, IProjectItemDescriptor[] items);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual VirtualFileSystemPath get_Location();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IProjectItemDescriptor> get_Items();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsHidden();
    [CompilerGeneratedAttribute]
public void set_IsHidden(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowsNonExistence();
    [CompilerGeneratedAttribute]
public void set_AllowsNonExistence(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAppDesigner();
    [CompilerGeneratedAttribute]
public void set_IsAppDesigner(bool value);
}
public class JetBrains.ProjectModel.Update.ProjectModelNeedsToBeChangedException : Exception {
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Update.ProjectModelNeedsToBeChangedExceptionEx : object {
    public static void ThrowProjectModelNeedsToBeChangedExceptionIfInReadOnlyMode();
    [ExtensionAttribute]
public static UndoUsingWriteLock UsingWriteLockForUpdate(IProjectItem projectItem);
}
[SolutionInstanceComponentAttribute("0")]
public class JetBrains.ProjectModel.Update.ProjectModelUpdater : object {
    private IShellLocks myLocks;
    private ProjectReferenceFactory myReferenceFactory;
    private IProjectModelBatchChangeManager myBatchChangeManager;
    private SpecialFilesManager mySpecialFilesManager;
    private ILogger myLogger;
    private IBackendProjectModelLocator myProjectModelLocator;
    [CompilerGeneratedAttribute]
private SolutionElement <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveProjectElementOrigin>k__BackingField;
    protected SolutionElement Solution { get; }
    protected bool PreserveProjectElementOrigin { get; protected set; }
    public ProjectModelUpdater(SolutionElement solution, IShellLocks locks, ProjectReferenceFactory referenceFactory, IProjectModelBatchChangeManager batchChangeManager, SpecialFilesManager specialFilesManager, ILogger logger, IBackendProjectModelLocator projectModelLocator);
    [CompilerGeneratedAttribute]
protected SolutionElement get_Solution();
    [CompilerGeneratedAttribute]
protected bool get_PreserveProjectElementOrigin();
    [CompilerGeneratedAttribute]
protected void set_PreserveProjectElementOrigin(bool value);
    public virtual IProject UpdateOrCreateProject(IProjectDescriptor projectDescriptor, UpdateFlags flags, bool isReadOnly);
    private string TraceProjectDescriptor(IProjectDescriptor descriptor);
    private string TraceProjectFileDescriptor(IProjectFileDescriptor descriptor, IProjectFolder targetFolder);
    private string TraceTargetFrameworkIds(IEnumerable`1<TargetFrameworkId> targetFrameworkIds);
    private static int GetItemCount(IProjectFolderDescriptor folderDescriptor);
    protected virtual IProject UpdateOrCreateProject(LateWriteLockCookie lateWriteLockCookie, IProjectDescriptor descriptor, UpdateFlags flags);
    [CanBeNullAttribute]
public virtual IProjectToModuleReference FindProjectReference(IProjectSearchDescriptor projectSearchDescriptor, IProjectReferenceDescriptor referenceDescriptor);
    public virtual void UpdateProjectReferences(IProjectSearchDescriptor projectSearchDescriptor, IList`1<Pair`2<IProjectReferenceDescriptor, IProjectReferenceProperties>> referenceDescriptors, bool notifyChangeManager, bool isReadOnly);
    private void UpdateFileProperties(LateWriteLockCookie lateWriteLockCookie, IProjectFile projectFile, IProjectFileDescriptor projectFileDescriptor);
    private void UpdateFolderProperties(LateWriteLockCookie lateWriteLockCookie, IProjectFolder projectFolder, IProjectFolderDescriptor projectFolderDescriptor);
    private bool UpdateReferenceProperties(LateWriteLockCookie lateWriteLockCookie, IProjectToModuleReference reference, IProjectReferenceProperties properties);
    protected virtual bool UpdateProject(LateWriteLockCookie lateWriteLockCookie, IProject project, IProjectDescriptor descriptor, UpdateFlags flags);
    protected virtual IProject CreateProject(LateWriteLockCookie lateWriteLockCookie, IProjectDescriptor descriptor);
    protected virtual void OpenProject(IProject project, IProjectDescriptor descriptor);
    private static T FindAndRemoveItem(OneToListMap`2<VirtualFileSystemPath, IProjectItem> items, VirtualFileSystemPath path, Predicate`1<T> filter, Func`2<T, int> getItemScore);
    [NotNullAttribute]
private static IReadOnlyCollection`1<IProjectToModuleReference> GetNestedSdkAssemblyReferences(IProject project);
    protected virtual void UpdateFolderContent(LateWriteLockCookie lateWriteLockCookie, IProjectFolder folder, IProjectFolderDescriptor descriptor, UpdateFlags flags);
    private ProjectFolderPath FixFolderLocation(IProjectFolderDescriptor folderDescriptor, IProjectFolder parentFolder);
    protected virtual IProjectFile CreateProjectFileForProject(LateWriteLockCookie lateWriteLockCookie, IProject project, IProjectFileDescriptor fileDescriptor);
    protected virtual IProjectFile CreateProjectFile(LateWriteLockCookie lateWriteLockCookie, IProjectFolder parentFolder, IProjectFileDescriptor fileDescriptor);
    protected virtual IProjectFolder CreateFolder(LateWriteLockCookie lateWriteLockCookie, IProjectFolder parentFolder, IProjectFolderDescriptor folderDescriptor);
    private VirtualFileSystemPath FixEmptyLocation(VirtualFileSystemPath location);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private IProject <CreateProject>b__26_0(IProjectSearchDescriptor pointer);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Update.ProjectModelUpdaterEx : object {
    [ExtensionAttribute]
public static void UpdateProjectReferences(IProjectModelUpdater updater, IProjectSearchDescriptor projectSearchDescriptor, IList`1<Pair`2<IProjectReferenceDescriptor, IProjectReferenceProperties>> referenceDescriptors, bool notifyChangeManager);
    [ExtensionAttribute]
public static Task UpdateProjectReferencesAsync(IProjectModelUpdater updater, IProjectSearchDescriptor projectSearchDescriptor, IList`1<Pair`2<IProjectReferenceDescriptor, IProjectReferenceProperties>> referenceDescriptors, bool notifyChangeManager);
}
[SolutionInstanceComponentAttribute("10")]
internal class JetBrains.ProjectModel.Update.ProjectModelUpdaterImpl : object {
    [CompilerGeneratedAttribute]
private ISignal`1<IProjectSearchDescriptor> <ProjectCreatedOrUpdated>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<IProjectSearchDescriptor> <ProjectReferencesUpdated>k__BackingField;
    private Lifetime myLifetime;
    private IShellLocks myLocks;
    private ProjectModelUpdater myProjectModelUpdater;
    private ISolution mySolution;
    private ILogger myLogger;
    private SequentialLifetimes myTaskLifetimes;
    private Queue`1<Entry> myQueue;
    private RunningState myState;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsIdle>k__BackingField;
    public ISignal`1<IProjectSearchDescriptor> ProjectCreatedOrUpdated { get; }
    public ISignal`1<IProjectSearchDescriptor> ProjectReferencesUpdated { get; }
    private RunningState State { get; private set; }
    public IProperty`1<bool> IsIdle { get; }
    public ProjectModelUpdaterImpl(Lifetime lifetime, IShellLocks locks, ProjectModelUpdater projectModelUpdater, ISolution solution, ILogger logger);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IProjectSearchDescriptor> get_ProjectCreatedOrUpdated();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IProjectSearchDescriptor> get_ProjectReferencesUpdated();
    private RunningState get_State();
    private void set_State(RunningState value);
    private void BeginUpdateIsIdle();
    private bool EvaluateIsIdle();
    private T RunSync(Entry entry);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsIdle();
    public sealed virtual IProject UpdateOrCreateProject(IProjectDescriptor projectDescriptor, UpdateFlags flags);
    public sealed virtual Task`1<IProject> UpdateOrCreateProjectAsync(IProjectDescriptor projectDescriptor, UpdateFlags flags);
    public sealed virtual IProjectToModuleReference FindProjectReference(IProjectSearchDescriptor projectSearchDescriptor, IProjectReferenceDescriptor referenceDescriptor);
    public sealed virtual void UpdateProjectReferences(IList`1<Pair`2<IProjectSearchDescriptor, IList`1<Pair`2<IProjectReferenceDescriptor, IProjectReferenceProperties>>>> descriptors, bool notifyChangeManager);
    public sealed virtual Task UpdateProjectReferencesAsync(IList`1<Pair`2<IProjectSearchDescriptor, IList`1<Pair`2<IProjectReferenceDescriptor, IProjectReferenceProperties>>>> descriptors, bool notifyChangeManager);
    private void ScheduleRunAsync(Entry entry, TimeSpan delay);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.Update.ProjectModelUpdaterImpl/<RunAsync>d__35")]
private void RunAsync();
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.Update.ProjectModelUpdaterImpl/<UpdateProjectReferencesAsyncImpl>d__36")]
private Task`1<IList`1<IProjectSearchDescriptor>> UpdateProjectReferencesAsyncImpl(Lifetime lifetime, IList`1<Pair`2<IProjectSearchDescriptor, IList`1<Pair`2<IProjectReferenceDescriptor, IProjectReferenceProperties>>>> descriptors, bool notifyChangeManager);
    [AsyncStateMachineAttribute("JetBrains.ProjectModel.Update.ProjectModelUpdaterImpl/<UpdateOrCreateProjectAsyncImpl>d__37")]
private Task`1<IProject> UpdateOrCreateProjectAsyncImpl(Lifetime lifetime, IProjectDescriptor projectDescriptor, UpdateFlags flags);
}
[SolutionInstanceComponentAttribute("0")]
public class JetBrains.ProjectModel.Update.ProjectReferenceFactory : object {
    private SdkReferenceFactory mySdkReferenceFactory;
    private AssemblyInfoDatabase myAssemblyInfoDatabase;
    private ISolution mySolution;
    public ProjectReferenceFactory(SdkReferenceFactory sdkReferenceFactory, AssemblyInfoDatabase assemblyInfoDatabase, ISolution solution);
    [CanBeNullAttribute]
public ProjectReferenceTokens DescriptorToToken(IProject project, IProjectReferenceDescriptor descriptor);
    public virtual ProjectReferenceTokens DescriptorToToken(Lazy`1<IProjectProperties> projectProperties, IProjectReferenceDescriptor descriptor1);
    [CanBeNullAttribute]
public virtual IProjectReferenceToken ReferenceSearchDescriptorToToken(IProjectToModuleReferenceSearchDescriptor referenceSearchDescriptor);
    [CanBeNullAttribute]
public virtual IProjectReferenceToken ReferenceToToken(IProjectToModuleReference reference);
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.Update.ProjectReferenceProperties : object {
    public static string Global;
    private static ProjectReferenceProperties ourInstance;
    [CompilerGeneratedAttribute]
private bool <IsHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyLocal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EmbedInteropTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AliasList>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectElementOrigin <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoReferenced>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOutputAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReferenceOutputAssembly>k__BackingField;
    public static ProjectReferenceProperties Instance { get; }
    public bool IsHidden { get; public set; }
    public bool CopyLocal { get; public set; }
    public bool EmbedInteropTypes { get; public set; }
    public string AliasList { get; public set; }
    public IProjectElementOrigin Origin { get; public set; }
    public bool AutoReferenced { get; public set; }
    public bool IsOutputAssembly { get; public set; }
    public bool ReferenceOutputAssembly { get; public set; }
    private static ProjectReferenceProperties();
    public static ProjectReferenceProperties get_Instance();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsHidden();
    [CompilerGeneratedAttribute]
public void set_IsHidden(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CopyLocal();
    [CompilerGeneratedAttribute]
public void set_CopyLocal(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EmbedInteropTypes();
    [CompilerGeneratedAttribute]
public void set_EmbedInteropTypes(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AliasList();
    [CompilerGeneratedAttribute]
public void set_AliasList(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IProjectElementOrigin get_Origin();
    [CompilerGeneratedAttribute]
public void set_Origin(IProjectElementOrigin value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AutoReferenced();
    [CompilerGeneratedAttribute]
public void set_AutoReferenced(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsOutputAssembly();
    [CompilerGeneratedAttribute]
public void set_IsOutputAssembly(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReferenceOutputAssembly();
    [CompilerGeneratedAttribute]
public void set_ReferenceOutputAssembly(bool value);
    protected bool Equals(ProjectReferenceProperties other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.ProjectModel.Update.ProjectReferencesDescriptor : object {
    [CompilerGeneratedAttribute]
private IList`1<Pair`2<IProjectReferenceDescriptor, IProjectReferenceProperties>> <ProjectReferences>k__BackingField;
    public IList`1<Pair`2<IProjectReferenceDescriptor, IProjectReferenceProperties>> ProjectReferences { get; }
    public ProjectReferencesDescriptor(IList`1<Pair`2<IProjectReferenceDescriptor, IProjectReferenceProperties>> projectReferences);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<Pair`2<IProjectReferenceDescriptor, IProjectReferenceProperties>> get_ProjectReferences();
}
public abstract class JetBrains.ProjectModel.Update.ProjectReferenceTokenBase`1 : object {
    [CompilerGeneratedAttribute]
private TProjectReferenceDescriptor <ReferenceDescriptor>k__BackingField;
    [NotNullAttribute]
public TProjectReferenceDescriptor ReferenceDescriptor { get; }
    protected ProjectReferenceTokenBase`1(TProjectReferenceDescriptor referenceDescriptor);
    [CompilerGeneratedAttribute]
public TProjectReferenceDescriptor get_ReferenceDescriptor();
    public abstract virtual IProjectToModuleReference CreateProjectReference(IProject project);
    public abstract virtual void OnProjectReferenceRemoved(IProjectToModuleReference reference);
    protected bool Equals(ProjectReferenceTokenBase`1<TProjectReferenceDescriptor> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Update.ProjectReferenceTokenEx : object {
    [ExtensionAttribute]
public static bool EqualsOrMatches(IProjectReferenceToken t1, IProjectReferenceToken t2);
    private static bool Matches(IProjectToAssemblyReferenceDescriptor d1, IProjectToAssemblyReferenceDescriptor d2);
}
public class JetBrains.ProjectModel.Update.ProjectReferenceTokens : object {
    [CompilerGeneratedAttribute]
private IProjectReferenceToken <PrimaryToken>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IProjectReferenceToken> <SecondaryTokens>k__BackingField;
    [NotNullAttribute]
public IProjectReferenceToken PrimaryToken { get; }
    [NotNullAttribute]
public ICollection`1<IProjectReferenceToken> SecondaryTokens { get; }
    public ProjectReferenceTokens(IProjectReferenceToken primaryToken);
    public ProjectReferenceTokens(IProjectReferenceToken primaryToken, ICollection`1<IProjectReferenceToken> secondaryTokens);
    [CompilerGeneratedAttribute]
public IProjectReferenceToken get_PrimaryToken();
    [CompilerGeneratedAttribute]
public ICollection`1<IProjectReferenceToken> get_SecondaryTokens();
    [IteratorStateMachineAttribute("JetBrains.ProjectModel.Update.ProjectReferenceTokens/<GetAllTokens>d__8")]
public IEnumerable`1<IProjectReferenceToken> GetAllTokens();
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.Update.ProjectToAssemblyReferenceDescriptor : object {
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFrameworkId>k__BackingField;
    [CompilerGeneratedAttribute]
private AssemblyNameInfo <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <HintPath>k__BackingField;
    [NotNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; public set; }
    public AssemblyNameInfo AssemblyName { get; }
    [NotNullAttribute]
public VirtualFileSystemPath HintPath { get; }
    public ProjectToAssemblyReferenceDescriptor(TargetFrameworkId targetFrameworkId, AssemblyNameInfo assemblyName, VirtualFileSystemPath hintPath);
    [CompilerGeneratedAttribute]
public sealed virtual TargetFrameworkId get_TargetFrameworkId();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworkId(TargetFrameworkId value);
    [CompilerGeneratedAttribute]
public sealed virtual AssemblyNameInfo get_AssemblyName();
    [CompilerGeneratedAttribute]
public sealed virtual VirtualFileSystemPath get_HintPath();
    public bool Equals(ProjectToAssemblyReferenceDescriptor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Update.ProjectToAssemblyReferenceDescriptorEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IProjectToModuleReferenceSearchDescriptor ToProjectToAssemblyReferenceSearchDescriptor(IProjectToAssemblyReference projectToAssemblyReference);
    [ExtensionAttribute]
[NotNullAttribute]
public static IProjectToModuleReferenceSearchDescriptor ToProjectToAssemblyReferenceSearchDescriptor(IProjectToAssemblyReferenceDescriptor projectToAssemblyReferenceDescriptor, IProjectSearchDescriptor sourceProject);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectToAssemblyReference TryFindResolvedAssemblyReference(IProject project, IProjectToAssemblyReferenceDescriptor descriptor);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectToModuleReference TryFindAssemblyReference(IProject project, IProjectToAssemblyReferenceDescriptor descriptor);
}
public class JetBrains.ProjectModel.Update.ProjectToAssemblyReferenceDescriptorToken : ProjectReferenceTokenBase`1<ProjectToAssemblyReferenceDescriptor> {
    public ProjectToAssemblyReferenceDescriptorToken(ProjectToAssemblyReferenceDescriptor descriptor);
    public virtual IProjectToModuleReference CreateProjectReference(IProject project);
    public virtual void OnProjectReferenceRemoved(IProjectToModuleReference reference);
}
public class JetBrains.ProjectModel.Update.ProjectToComAssemblyReferenceDescriptor : object {
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFrameworkId>k__BackingField;
    public VirtualFileSystemPath ManifestFilePath;
    [NotNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; public set; }
    public ProjectToComAssemblyReferenceDescriptor(TargetFrameworkId targetFrameworkId, VirtualFileSystemPath manifestFilePath);
    [CompilerGeneratedAttribute]
public sealed virtual TargetFrameworkId get_TargetFrameworkId();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworkId(TargetFrameworkId value);
    protected bool Equals(ProjectToComAssemblyReferenceDescriptor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Update.ProjectToComAssemblyReferenceDescriptorEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IProjectToComAssemblyReferenceSearchDescriptor ToProjectToComAssemblyReferenceSearchDescriptor(IProjectToComAssemblyReference projectToComAssemblyReference);
    [ExtensionAttribute]
[NotNullAttribute]
public static IProjectToComAssemblyReferenceSearchDescriptor ToProjectToComAssemblyReferenceSearchDescriptor(ProjectToComAssemblyReferenceDescriptor projectToComAssemblyReferenceDescriptor, IProjectSearchDescriptor sourceProject);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static ProjectToComAssemblyReference TryFindComAssemblyReference(IProject project, ProjectToComAssemblyReferenceDescriptor descriptor);
}
public class JetBrains.ProjectModel.Update.ProjectToComAssemblyReferenceDescriptorToken : ProjectReferenceTokenBase`1<ProjectToComAssemblyReferenceDescriptor> {
    public ProjectToComAssemblyReferenceDescriptorToken(ProjectToComAssemblyReferenceDescriptor descriptor);
    public virtual IProjectToModuleReference CreateProjectReference(IProject project);
    public virtual void OnProjectReferenceRemoved(IProjectToModuleReference reference);
}
[RdTypeAttribute]
public class JetBrains.ProjectModel.Update.ProjectToProjectReferenceBySearchDescriptor : object {
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFrameworkId>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectSearchDescriptor <TargetProjectSearchDescriptor>k__BackingField;
    public TargetFrameworkId TargetFrameworkId { get; }
    public IProjectSearchDescriptor TargetProjectSearchDescriptor { get; }
    public ProjectToProjectReferenceBySearchDescriptor(TargetFrameworkId targetFrameworkId, IProjectSearchDescriptor targetProjectSearchDescriptor);
    [CompilerGeneratedAttribute]
public sealed virtual TargetFrameworkId get_TargetFrameworkId();
    [CompilerGeneratedAttribute]
public IProjectSearchDescriptor get_TargetProjectSearchDescriptor();
    protected bool Equals(ProjectToProjectReferenceBySearchDescriptor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ProjectToProjectReferenceBySearchDescriptor left, ProjectToProjectReferenceBySearchDescriptor right);
    public static bool op_Inequality(ProjectToProjectReferenceBySearchDescriptor left, ProjectToProjectReferenceBySearchDescriptor right);
    public virtual string ToString();
}
public class JetBrains.ProjectModel.Update.ProjectToProjectReferenceBySearchDescriptorToken : object {
    private ProjectToProjectReferenceBySearchDescriptor myDescriptor;
    private ISolution mySolution;
    public IProjectReferenceDescriptor ReferenceDescriptor { get; }
    public ProjectToProjectReferenceBySearchDescriptorToken(ProjectToProjectReferenceBySearchDescriptor descriptor, ISolution solution);
    public IProjectReferenceDescriptor get_ReferenceDescriptor();
    public sealed virtual IProjectToModuleReference CreateProjectReference(IProject project);
    public sealed virtual void OnProjectReferenceRemoved(IProjectToModuleReference reference);
    public bool Equals(ProjectToProjectReferenceBySearchDescriptorToken other);
    private static bool IsProjectSearchDescriptorByGuidAndHintPath(IProjectSearchDescriptor descriptor);
    private static bool IsProjectSearchDescriptorByLocationOnly(IProjectSearchDescriptor descriptor);
    private bool EqualsButOutputPath(IProjectSearchDescriptor a, IProjectSearchDescriptor b);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Update.ProjectToProjectReferenceDescriptorEx : object {
    [ExtensionAttribute]
public static IProjectToProjectReferenceSearchDescriptor ToProjectToProjectReferenceSearchDescriptor(IProjectToProjectReference projectToProjectReference);
    [ExtensionAttribute]
public static IProjectToProjectReferenceSearchDescriptor ToProjectToProjectReferenceSearchDescriptor(ProjectToProjectReferenceBySearchDescriptor projectToProjectReferenceBySearchDescriptor, IProjectSearchDescriptor sourceProject);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectToProjectReference TryFindProjectReference(IProject project, ProjectToProjectReferenceBySearchDescriptor descriptor);
}
public class JetBrains.ProjectModel.Update.ProjectToUnresolvedAssemblyReferenceDescriptor : object {
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFrameworkId>k__BackingField;
    [CompilerGeneratedAttribute]
private AssemblyNameInfo <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <HintPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    public TargetFrameworkId TargetFrameworkId { get; public set; }
    public AssemblyNameInfo AssemblyName { get; }
    public VirtualFileSystemPath HintPath { get; }
    [NotNullAttribute]
public string Reason { get; }
    public ProjectToUnresolvedAssemblyReferenceDescriptor(TargetFrameworkId targetFrameworkId, AssemblyNameInfo assemblyName, string reason, VirtualFileSystemPath hintPath);
    [CompilerGeneratedAttribute]
public sealed virtual TargetFrameworkId get_TargetFrameworkId();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworkId(TargetFrameworkId value);
    [CompilerGeneratedAttribute]
public sealed virtual AssemblyNameInfo get_AssemblyName();
    [CompilerGeneratedAttribute]
public sealed virtual VirtualFileSystemPath get_HintPath();
    [CompilerGeneratedAttribute]
public string get_Reason();
    public sealed virtual bool Equals(ProjectToUnresolvedAssemblyReferenceDescriptor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Update.ProjectToUnresolvedAssemblyReferenceDescriptorEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IProjectToAssemblyReferenceSearchDescriptor ToProjectToAssemblyReferenceSearchDescriptor(IProjectToUnresolvedAssemblyReference projectToAssemblyReference);
}
public class JetBrains.ProjectModel.Update.ProjectToUnresolvedAssemblyReferenceDescriptorToken : ProjectReferenceTokenBase`1<ProjectToUnresolvedAssemblyReferenceDescriptor> {
    public ProjectToUnresolvedAssemblyReferenceDescriptorToken(ProjectToUnresolvedAssemblyReferenceDescriptor descriptor);
    public virtual IProjectToModuleReference CreateProjectReference(IProject project);
    public virtual void OnProjectReferenceRemoved(IProjectToModuleReference reference);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ProjectModel.Update.ReferencePatcherService : object {
    private ISolution mySolution;
    private IShellLocks myShellLocks;
    private JetHashSet`1<ProjectImpl> myProjectToPatchSet;
    private bool mySolutionLoaded;
    private GroupingEvent myRefreshNeededGroupingEvent;
    public ReferencePatcherService(ISolutionLoadTasksScheduler scheduler, ISolution solution, IShellLocks shellLocks, ChangeManager changeManager, Lifetime lifetime);
    private void PatchDirtyProjects();
    private void PatchProjectToAssemblyReferences(ProjectImpl project);
    public sealed virtual object Execute(IChangeMap changeMap);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0();
    [CompilerGeneratedAttribute]
private void <Execute>b__8_0(ProjectModelChange change);
}
public class JetBrains.ProjectModel.Update.RoslynAnalyzerReferenceDescriptor : object {
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFrameworkId>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <Location>k__BackingField;
    public TargetFrameworkId TargetFrameworkId { get; public set; }
    [NotNullAttribute]
public VirtualFileSystemPath Location { get; }
    public RoslynAnalyzerReferenceDescriptor(TargetFrameworkId targetFrameworkId, VirtualFileSystemPath location);
    [CompilerGeneratedAttribute]
public sealed virtual TargetFrameworkId get_TargetFrameworkId();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworkId(TargetFrameworkId value);
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_Location();
    public sealed virtual bool Equals(RoslynAnalyzerReferenceDescriptor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Update.RoslynAnalyzerReferenceDescriptorEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IProjectToRoslynAnalyzerReferenceSearchDescriptor ToRoslynAnalyzerReferenceSearchDescriptor(IRoslynAnalyzerReference reference);
    [ExtensionAttribute]
[NotNullAttribute]
public static IProjectToRoslynAnalyzerReferenceSearchDescriptor ToRoslynAnalyzerReferenceSearchDescriptor(RoslynAnalyzerReferenceDescriptor referenceDescriptor, IProjectSearchDescriptor sourceProject);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static RoslynAnalyzerReference TryFindRoslynAnalyzerReference(IProject project, RoslynAnalyzerReferenceDescriptor descriptor);
}
public class JetBrains.ProjectModel.Update.RoslynAnalyzerReferenceDescriptorToken : ProjectReferenceTokenBase`1<RoslynAnalyzerReferenceDescriptor> {
    public RoslynAnalyzerReferenceDescriptorToken(RoslynAnalyzerReferenceDescriptor descriptor);
    public virtual IProjectToModuleReference CreateProjectReference(IProject project);
    public virtual void OnProjectReferenceRemoved(IProjectToModuleReference reference);
}
public class JetBrains.ProjectModel.Update.SdkReferences.ProjectToSdkReferenceDescriptor : object {
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFrameworkId>k__BackingField;
    [NotNullAttribute]
private string mySdkName;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <ManifestPath>k__BackingField;
    public TargetFrameworkId TargetFrameworkId { get; public set; }
    [NotNullAttribute]
public VirtualFileSystemPath ManifestPath { get; }
    public ProjectToSdkReferenceDescriptor(TargetFrameworkId targetFrameworkId, string sdkName, VirtualFileSystemPath sdkManifestPath);
    [CompilerGeneratedAttribute]
public sealed virtual TargetFrameworkId get_TargetFrameworkId();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworkId(TargetFrameworkId value);
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_ManifestPath();
    [CanBeNullAttribute]
public virtual SdkModuleInfo GetSdkModuleInfo(string targetArchitecture);
    protected bool Equals(ProjectToSdkReferenceDescriptor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Update.SdkReferences.ProjectToSdkReferenceDescriptorEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IProjectToSdkReferenceSearchDescriptor ToProjectToSdkReferenceSearchDescriptor(IProjectToSdkReference projectToSdkReference);
    [ExtensionAttribute]
[NotNullAttribute]
public static IProjectToSdkReferenceSearchDescriptor ToProjectToSdkReferenceSearchDescriptor(ProjectToSdkReferenceDescriptor projectToSdkReference, IProjectSearchDescriptor sourceProject);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectToSdkReference TryFindProjectToSdkReference(IProject project, ProjectToSdkReferenceDescriptor descriptor);
}
public class JetBrains.ProjectModel.Update.SdkReferences.ProjectToSdkReferenceDescriptorToken : ProjectReferenceTokenBase`1<ProjectToSdkReferenceDescriptor> {
    [NotNullAttribute]
private Func`2<IProject, SdkReferenceFactory> myGetSdkReferenceFactory;
    public ProjectToSdkReferenceDescriptorToken(ProjectToSdkReferenceDescriptor descriptor, SdkReferenceFactory sdkReferenceFactory);
    public ProjectToSdkReferenceDescriptorToken(ProjectToSdkReferenceDescriptor descriptor, Func`2<IProject, SdkReferenceFactory> getSdkReferenceFactory);
    public virtual IProjectToModuleReference CreateProjectReference(IProject project);
    public virtual void OnProjectReferenceRemoved(IProjectToModuleReference reference);
}
public class JetBrains.ProjectModel.Update.SdkReferences.SdkReferenceInfo : object {
    private string mySdkName;
    private string mySdkVersion;
    private string mySdkManifestPath;
    private string myIdentity;
    public string Identity { get; }
    public string SdkName { get; }
    public string SdkVersion { get; }
    public string SdkManifestPath { get; }
    public string PersistentName { get; }
    public SdkReferenceInfo(string sdkName, string sdkVersion, string sdkManifestPath, string identity);
    public string get_Identity();
    public string get_SdkName();
    public string get_SdkVersion();
    public string get_SdkManifestPath();
    public string get_PersistentName();
    public void Dump(TextWriter textWriter, int indent);
    public void Write(UnsafeWriter writer);
    public static SdkReferenceInfo Read(UnsafeReader reader);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ProjectModel.Update.SuspendHardOperationsManager : object {
    private Lifetime myLifetime;
    private ISolution mySolution;
    private ILogger myLogger;
    private ICollectionEvents`1<IProperty`1<bool>> mySuspendOperations;
    private IProperty`1<bool> myIsSuspended;
    public SuspendHardOperationsManager(Lifetime lifetime, ISolution solution, ILogger logger);
    public void Suspend(Lifetime subscriptionLifetime, IProperty`1<bool> property);
    public void OnSuspendChanged(Action`1<Lifetime> whenSuspended, Action suspendReleased);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0(Lifetime valueLifetime, bool isSuspended);
}
[FlagsAttribute]
public enum JetBrains.ProjectModel.Update.UpdateFlags : Enum {
    public int value__;
    public static UpdateFlags NONE;
    public static UpdateFlags F_UPDATE_PROJECT_PROPERTIES;
    public static UpdateFlags F_CREATE_MISSING_ITEMS;
    public static UpdateFlags F_REMOVE_REDUNDANT_FILES_AND_FOLDERS;
    public static UpdateFlags F_REMOVE_REDUNDANT_NESTED_PROJECTS;
    public static UpdateFlags F_NOTIFY_CHANGE_MANGER;
    public static UpdateFlags CREATE_MISSING_ITEMS;
    public static UpdateFlags ASL_STARTUP_SYNC;
    public static UpdateFlags FULL_SYNC;
    public static UpdateFlags FULL_SYNC_NOTIFY_CHANGE_MANAGER;
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Update.UpdateFlagsExtension : object {
    [ExtensionAttribute]
public static bool NotifyChangeManager(UpdateFlags flags);
    [ExtensionAttribute]
public static bool SynchronizeFilesAndFolders(UpdateFlags flags);
    [ExtensionAttribute]
public static bool SynchronizeNestedProjects(UpdateFlags flags);
    [ExtensionAttribute]
public static bool CreateMissingItems(UpdateFlags flags);
    [ExtensionAttribute]
public static bool UpdateProjectProperties(UpdateFlags flags);
}
[ProjectFileTypeDefinitionAttribute("VBASIC")]
public class JetBrains.ProjectModel.VBProjectFileType : KnownProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static VBProjectFileType <Instance>k__BackingField;
    public static string VB_EXTENSION;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static VBProjectFileType Instance { get; private set; }
    protected VBProjectFileType(string name);
    protected VBProjectFileType(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static VBProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(VBProjectFileType value);
    public virtual BuildAction GetDefaultBuildAction(IProject project, string extension);
}
[ProjectFileTypeDefinitionAttribute("VBS")]
public class JetBrains.ProjectModel.VBScriptProjectFileType : KnownProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static VBScriptProjectFileType <Instance>k__BackingField;
    public static string VBS_EXTENSION;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static VBScriptProjectFileType Instance { get; private set; }
    protected VBScriptProjectFileType(string name);
    protected VBScriptProjectFileType(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static VBScriptProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(VBScriptProjectFileType value);
}
[SolutionInstanceComponentAttribute("10")]
internal class JetBrains.ProjectModel.ViewableProjectsCollection : object {
    private ISolutionLoadTasksScheduler myScheduler;
    public ViewableCollection`1<IProject> myProjectsView;
    private Wrapper myWrapper;
    public IViewable`1<IProject> Projects { get; }
    public ViewableProjectsCollection(Lifetime lifetime, ISolutionLoadTasksScheduler scheduler);
    public sealed virtual IViewable`1<IProject> get_Projects();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Wasm.ProjectExtensions : object {
    [ExtensionAttribute]
public static bool IsBlazorWasmProject(IProject project);
}
[ShellComponentAttribute("16")]
public class JetBrains.ProjectModel.Web.Use64bitIISExpressPropertyRequest : object {
    public static string Property_IIS_Bitness2;
    public IEnumerable`1<string> RequestedProperties { get; }
    public sealed virtual IEnumerable`1<string> get_RequestedProperties();
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Web.WebFies : object {
    public static string DOT_DESIGNER;
    public static string GLOBAL_ASAX;
    public static string WEB_CONFIG;
    [ExtensionAttribute]
public static bool IsGlobalAsax(IProjectFile projectFile);
    [ExtensionAttribute]
public static bool IsMainWebConfig(IProjectFile projectFile);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectFile GetGlobalAsax(IProject project);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectFile GetMainWebConfig(IProject project);
    [NotNullAttribute]
public static VirtualFileSystemPath GetCodeBehindFilePath(IProjectFile projectFile, string codeFileString);
    [NotNullAttribute]
public static VirtualFileSystemPath GetDesignerFilePath(IProjectFile projectFile, string codeFileString);
    [NotNullAttribute]
public static VirtualFileSystemPath GetDesignerFilePath(VirtualFileSystemPath codeBehindFilePath);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectFile GetCodeBehindFileByWebPageFile(IProjectFile webPageFile, string codeFileString);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectFile GetDesignerFileByWebPageFile(IProjectFile webPageFile, string codeFileString);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectFile GetDesignerFileByCodeBehindFile(IProjectFile codeBehindFile);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectFile GetAspFileByCodeBehindFile(IProjectFile codeBehindFile, Func`2<IProjectFile, bool> isWebPage);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectFile GetWebPageFileByDesignerFile(IProjectFile designerFile, Func`2<IProjectFile, bool> isWebPage);
    [ExtensionAttribute]
public static bool IsDesignerFile(IProjectFile designerFile);
}
[ExtensionAttribute]
public static class JetBrains.ProjectModel.Web.WebFolders : object {
    public static string APP_CODE;
    public static string APP_CODE_SUBCODE;
    public static string APP_WEB;
    public static string CLIENT_BIN;
    public static string BIN;
    public static string BIN_ROSLYN;
    public static string APP_WEB_REFERENCES;
    public static string APP_GLOBAL_RESOURCES;
    public static string APP_THEMES;
    [NotNullAttribute]
public static IReadOnlyCollection`1<VirtualFileSystemPath> GetTemporaryAspNetFolders();
    [ExtensionAttribute]
[CanBeNullAttribute]
public static VirtualFileSystemPath TryGetContainingTemporaryAspNetFolder(VirtualFileSystemPath path);
    [ExtensionAttribute]
public static bool IsInTemporaryAspNetFolder(VirtualFileSystemPath path);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectFolder GetAppCodeFolder(IProject project);
    [ExtensionAttribute]
public static bool IsAppCodeFolder(IProjectFolder folder);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectFolder GetAppGlobalResourcesFolder(IProject project);
    [ExtensionAttribute]
public static bool IsAppGlobalResourcesFolder(IProjectFolder folder);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectFolder GetWebReferencesFolder(IProject project);
    [ExtensionAttribute]
public static bool IsWebReferencesFolder(IProjectFolder folder);
    [ExtensionAttribute]
public static bool IsBinFolder(IProjectFolder folder);
    [ExtensionAttribute]
public static bool IsBinRoslynFolder(IProjectFolder folder);
    [ExtensionAttribute]
public static bool IsClientBinFolder(IProjectFolder folder);
    [ExtensionAttribute]
public static bool IsFileInFolder(IProjectFile projectFile, Predicate`1<IProjectFolder> folderCheck);
    [ExtensionAttribute]
public static bool IsAppCodeFile(IProjectFile projectFile);
    [ExtensionAttribute]
public static bool InAppGlobalResourcesFolder(IProjectFile projectFile);
    [ExtensionAttribute]
public static bool InWebReferencesFolder(IProjectFile projectFile);
    [NotNullAttribute]
public static VirtualFileSystemPath ResolveInclude(ISolution solution, VirtualFileSystemPath baseFilePath, string includeName, bool isVirtual);
    [NotNullAttribute]
public static VirtualFileSystemPath GetReferencedPath(IProjectFile projectFile, string srcPath);
    [NotNullAttribute]
public static VirtualFileSystemPath GetReferencedPath(IProject project, VirtualFileSystemPath aspFilePath, string srcPath);
    [CanBeNullAttribute]
public static IProjectFile GetReferencedFile(IProjectFile file, VirtualFileSystemPath& referencedPath, string srcPath);
    [CanBeNullAttribute]
public static IProjectFile GetProjectItem(IProjectElement projectElement, VirtualFileSystemPath path);
    [CanBeNullAttribute]
public static IProjectFile GetProjectItem(IProject project, VirtualFileSystemPath path);
    [NotNullAttribute]
public static VirtualFileSystemPath GetProjectPath(IProjectFile file);
    public static VirtualFileSystemPath GetProjectPath(IProject project);
}
[ProjectFileTypeDefinitionAttribute("Web.Config")]
public class JetBrains.ProjectModel.WebConfigProjectFileType : XmlProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static WebConfigProjectFileType <Instance>k__BackingField;
    public static string WEB_CONFIG_EXTENSION;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static WebConfigProjectFileType Instance { get; private set; }
    protected WebConfigProjectFileType(string name);
    protected WebConfigProjectFileType(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static WebConfigProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(WebConfigProjectFileType value);
}
[ShellComponentAttribute("10")]
public class JetBrains.ProjectModel.WellKnownFoldersTracker : object {
    private IFileSystemTracker myTracker;
    public WellKnownFoldersTracker(IFileSystemTracker tracker, Lifetime lifetime);
    protected virtual void TrackGacRoot(Lifetime lifetime);
    protected virtual void TrackWellKnownFolders(Lifetime lifetime);
}
internal class JetBrains.ProjectModel.WritableProjectModelTimestamps : object {
    private int myAnyChange;
    private int myProjectItemLocations;
    private int myProjectFileTypes;
    public int AnyChange { get; private set; }
    public int ProjectItemLocations { get; private set; }
    public int ProjectFileTypes { get; private set; }
    public sealed virtual int get_AnyChange();
    private void set_AnyChange(int value);
    public sealed virtual int get_ProjectItemLocations();
    private void set_ProjectItemLocations(int value);
    public sealed virtual int get_ProjectFileTypes();
    private void set_ProjectFileTypes(int value);
    public sealed virtual int IncrementAnyChange();
    public sealed virtual int IncrementProjectItemLocations();
    public sealed virtual int IncrementProjectFileTypes();
}
[ProjectFileTypeDefinitionAttribute("XAML")]
public class JetBrains.ProjectModel.XamlProjectFileType : XmlProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static XamlProjectFileType <Instance>k__BackingField;
    [ObsoleteAttribute("Use XAML_EXTENSION instead")]
public static string XamlExtension;
    public static string XAML_EXTENSION;
    public static string AXAML_EXTENSION;
    public static string XOML_EXTENSION;
    public static string PAML_EXTENSION;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static XamlProjectFileType Instance { get; private set; }
    protected XamlProjectFileType(string name);
    protected XamlProjectFileType(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static XamlProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(XamlProjectFileType value);
}
[ProjectFileTypeDefinitionAttribute("XML")]
public class JetBrains.ProjectModel.XmlProjectFileType : KnownProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static XmlProjectFileType <Instance>k__BackingField;
    public static string XML_EXTENSION;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static XmlProjectFileType Instance { get; private set; }
    protected XmlProjectFileType(string name);
    protected XmlProjectFileType(string name, string presentableName);
    protected XmlProjectFileType(string name, string presentableName, IEnumerable`1<string> extensions);
    [CompilerGeneratedAttribute]
public static XmlProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(XmlProjectFileType value);
}
[ProjectFileTypeDefinitionAttribute("XSD")]
public class JetBrains.ProjectModel.XsdProjectFileType : XmlProjectFileType {
    public static string Name;
    [CompilerGeneratedAttribute]
private static XsdProjectFileType <Instance>k__BackingField;
    public static string XSD_EXTENSION;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static XsdProjectFileType Instance { get; private set; }
    protected XsdProjectFileType(string name);
    protected XsdProjectFileType(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static XsdProjectFileType get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(XsdProjectFileType value);
}
[ZoneMarkerAttribute]
public class JetBrains.ProjectModel.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
