public class JetBrains.Psi.Features.Tasks.Build.BuildScript.ForceTasksModeOptimize : object {
    [BuildStepAttribute]
public static IList`1<ForceModeOptimize> ForceModeOptimize(AllAssembliesOnEverything allass);
}
public static class JetBrains.Psi.Features.Tasks.Build.BuildScript.PreCompile.Common.ProxyToSolutionCompiledTask : object {
    public static string PackageId;
    private static ProxyToSolutionCompiledTask();
}
public static class JetBrains.Psi.Features.Tasks.Build.BuildScript.PreCompile.Common.PsiTasksBuildConstants : object {
    public static RelativePath TasksFolderUnderPackageContentRoot;
    public static SubplatformName SubplatformPsiFeaturesTasks;
    private static PsiTasksBuildConstants();
}
public static class JetBrains.Psi.Features.Tasks.Build.BuildScript.PreCompile.Unwrap.InjectPsiToolsSupportMsbuild : object {
    [BuildStepAttribute]
public static GeneratedMsbuildImport[] ImportProxyTaskPackage(AllAssembliesOnEverything allass, LocalRestoredPackages packages, AllAssembliesOnSources allassSrc, PackageVersionLocks verlocks, ILogger logger);
    [BuildStepAttribute]
public static void InjectTaskTargets(AllAssembliesOnEverything allass, AllAssembliesOnSources allassSrc, ICollection`1<PublishedPsiTask> tasks, ILogger logger, IList`1& imports, IList`1& properties, IList`1& nugetref);
    [BuildStepAttribute]
public static PackageReferenceArtifact[] RequestProxyTaskPackage(AllAssembliesOnEverything allass, PackageVersionLocks verlocks, AllAssembliesOnSources allassSrc);
    private static ValueTuple`2<IReadOnlyCollection`1<SubplatformOnSources>, IReadOnlyCollection`1<SubplatformProjectWrapper>> GetSubplatformsToInjectTo(AllAssembliesOnEverything allass, AllAssembliesOnSources allassSrc);
    [CompilerGeneratedAttribute]
internal static bool <GetSubplatformsToInjectTo>g__NonMiniSdkProjectFilter|3_0(ProjectAndAssembly paa);
}
public static class JetBrains.Psi.Features.Tasks.Build.BuildScript.PreCompile.Wrap.CsLexTargets : object {
    [BuildStepAttribute]
public static PublishedPsiTask Publish();
}
public static class JetBrains.Psi.Features.Tasks.Build.BuildScript.PreCompile.Wrap.ErrorDescriptionGenerator : object {
    [BuildStepAttribute]
public static PublishedPsiTask Publish();
}
public class JetBrains.Psi.Features.Tasks.Build.BuildScript.PreCompile.Wrap.MakeCustomNugetLayout : object {
    [IteratorStateMachineAttribute("JetBrains.Psi.Features.Tasks.Build.BuildScript.PreCompile.Wrap.MakeCustomNugetLayout/<AddPackageReferenceToProxyTask>d__0")]
[BuildStepAttribute]
public static IEnumerable`1<PackageReferenceArtifact> AddPackageReferenceToProxyTask(AllAssembliesOnEverything allass, PackageVersionLocks verlocks);
    [BuildStepAttribute]
public static IEnumerable`1<SubplatformFileForPackaging> EmbedPublishedTargetsAndSides(IEnumerable`1<PublishedPsiTask> tasks, ProductHomeDirArtifact homedir, AllAssembliesOnSources allassSrc);
    [IteratorStateMachineAttribute("JetBrains.Psi.Features.Tasks.Build.BuildScript.PreCompile.Wrap.MakeCustomNugetLayout/<EmbedPublishedTargetsAndSides_Task>d__2")]
private static IEnumerable`1<SubplatformFileForPackaging> EmbedPublishedTargetsAndSides_Task(PublishedPsiTask task, ProductHomeDirArtifact homedir);
}
public static class JetBrains.Psi.Features.Tasks.Build.BuildScript.PreCompile.Wrap.PsiGenTargets : object {
    [BuildStepAttribute]
public static PublishedPsiTask Publish();
}
[BuildArtifactAttribute("1")]
public class JetBrains.Psi.Features.Tasks.Build.BuildScript.PreCompile.Wrap.PublishedPsiTask : object {
    [NotNullAttribute]
public ICollection`1<RelativePath> SubplatformPathToSideFiles;
    [NotNullAttribute]
public RelativePath SubplatformPathToTargetsFile;
    public PublishedPsiTask(RelativePath relSubplatformPathToTargetsFile);
    private PublishedPsiTask(RelativePath relSubplatformPathToTargetsFile, ICollection`1<RelativePath> relSubplatformPathToSideFiles);
    [NotNullAttribute]
public PublishedPsiTask WithSideFiles(RelativePath[] relSubplatformPathToSideFiles);
}
public static class JetBrains.Psi.Features.Tasks.Build.BuildScript.PreCompile.Wrap.TokenGeneratorTargets : object {
    [BuildStepAttribute]
public static PublishedPsiTask Publish();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
