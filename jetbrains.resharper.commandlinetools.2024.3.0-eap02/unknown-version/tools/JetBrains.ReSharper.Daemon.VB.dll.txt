[CodeCleanupModuleAttribute]
public class JetBrains.ReSharper.Daemon.VB.CodeCleanup.VBHighlightingCleanupModule : HighlightingCleanupModule {
    public static CodeCleanupOptionDescriptor`1<bool> REMOVE_REDUNDANCIES;
    public static CodeCleanupOptionDescriptor`1<bool> MAKE_FIELD_READONLY;
    public static CodeCleanupOptionDescriptor`1[] ALL_DESCRIPTORS;
    public string Name { get; }
    public ICollection`1<CodeCleanupOptionDescriptor> Descriptors { get; }
    public PsiLanguageType LanguageType { get; }
    private static VBHighlightingCleanupModule();
    public virtual string get_Name();
    public virtual ICollection`1<CodeCleanupOptionDescriptor> get_Descriptors();
    public virtual PsiLanguageType get_LanguageType();
    public virtual bool IsAvailable(CodeCleanupProfile profile);
    public virtual void SetDefaultSetting(CodeCleanupProfile profile, DefaultProfileType profileType);
}
[ContainsContextConsumerAttribute]
public class JetBrains.ReSharper.Daemon.VB.ContextHighlighters.VBFormatItemAndMatchingArgumentContextHighlighter : ClrFormatItemAndMatchingArgumentContextHighlighter {
    [AsyncContextConsumerAttribute]
public static Action ProcessContext(Lifetime lifetime, HighlightingProlongedLifetime prolongedLifetime, IPsiDocumentRangeView psiDocumentRangeView);
    protected virtual IPsiView GetPsiView(IPsiDocumentRangeView psiDocumentRangeView);
}
[ContainsContextConsumerAttribute]
public class JetBrains.ReSharper.Daemon.VB.ContextHighlighters.VBMatchingBraceContextHighlighter : MatchingBraceContextHighlighterBase`1<VBLanguage> {
    private static OneToListMap`2<TokenNodeType, TokenNodeType> ourLeftToRightBraces;
    private static OneToListMap`2<TokenNodeType, TokenNodeType> ourRightToLeftBraces;
    private static VBMatchingBraceContextHighlighter();
    [AsyncContextConsumerAttribute]
public static Action ProcessContext(Lifetime lifetime, IPsiDocumentRangeView psiDocumentRangeView, InvisibleBraceHintManager invisibleBraceHintManager, MatchingBraceSuggester matchingBraceSuggester, MatchingBraceConsumerFactory consumerFactory, HighlightingProlongedLifetime prolongedLifetime);
    private static void AddMatch(TokenNodeType leftToken, TokenNodeType rightToken);
    protected virtual bool IsLeftBracket(TokenNodeType tokenType);
    protected virtual bool IsRightBracket(TokenNodeType tokenType);
    protected virtual bool IsLeftBracket(ITokenNode tokenNode);
    protected virtual bool IsRightBracket(ITokenNode tokenNode);
    protected virtual bool Match(TokenNodeType token1, TokenNodeType token2);
    protected virtual void TryHighlightToLeft(MatchingHighlightingsConsumer consumer, ITokenNode selectedToken, TreeOffset treeOffset);
    private RichTextBlock GetHintText(ITextControl textControl, ITokenNode lbraceNode);
    protected virtual void TryHighlightToRight(MatchingHighlightingsConsumer consumer, ITokenNode selectedToken, TreeOffset treeOffset);
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.AccessRightsError : object {
    private string MESSAGE;
    private IReference myReference;
    private string myMessage;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public AccessRightsError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("AccessToDisposedClosure", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.AccessToDisposedClosureWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IReferenceExpression myExpression;
    public IReferenceExpression Expression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public AccessToDisposedClosureWarning(IReferenceExpression expression);
    public IReferenceExpression get_Expression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("AccessToForEachVariableInClosure", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.AccessToForEachVariableInClosureWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IReferenceExpression myExpression;
    public IReferenceExpression Expression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public AccessToForEachVariableInClosureWarning(IReferenceExpression expression);
    public IReferenceExpression get_Expression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("AccessToModifiedClosure", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.AccessToModifiedClosureWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IReferenceExpression myExpression;
    public IReferenceExpression Expression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public AccessToModifiedClosureWarning(IReferenceExpression expression);
    public IReferenceExpression get_Expression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("AnnotationConflictInHierarchy", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.AnnotationConflictInHierarchyWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IAttribute myAttribute;
    private IAttributesOwnerDeclaration myDeclaration;
    public IAttribute Attribute { get; }
    public IAttributesOwnerDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public AnnotationConflictInHierarchyWarning(IAttribute attribute, IAttributesOwnerDeclaration declaration);
    public IAttribute get_Attribute();
    public IAttributesOwnerDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("AnnotationRedundancyAtValueType", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.AnnotationRedundancyAtValueTypeWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IAttribute myAttribute;
    private IAttributesOwnerDeclaration myDeclaration;
    private bool myIsVoid;
    private string myMessage;
    public IAttribute Attribute { get; }
    public IAttributesOwnerDeclaration Declaration { get; }
    public bool IsVoid { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public AnnotationRedundancyAtValueTypeWarning(IAttribute attribute, IAttributesOwnerDeclaration declaration, bool isVoid);
    public IAttribute get_Attribute();
    public IAttributesOwnerDeclaration get_Declaration();
    public bool get_IsVoid();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("AnnotationRedundancyInHierarchy", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.AnnotationRedundancyInHierarchyWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IAttribute myAttribute;
    private IAttributesOwnerDeclaration myDeclaration;
    public IAttribute Attribute { get; }
    public IAttributesOwnerDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public AnnotationRedundancyInHierarchyWarning(IAttribute attribute, IAttributesOwnerDeclaration declaration);
    public IAttribute get_Attribute();
    public IAttributesOwnerDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ArgumentsMismatchError : object {
    private string MESSAGE;
    private IReference myReference;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ArgumentsMismatchError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ArrayBoundSpecificationForNonTopLevelArrayError : object {
    private string MESSAGE;
    private IArrayBound myBoundSpecificationExpression;
    public IArrayBound BoundSpecificationExpression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ArrayBoundSpecificationForNonTopLevelArrayError(IArrayBound boundSpecificationExpression);
    public IArrayBound get_BoundSpecificationExpression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ArrayBoundSpecificationInTypeSpecifierError : object {
    private string MESSAGE;
    private IArrayBound myBound;
    public IArrayBound Bound { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ArrayBoundSpecificationInTypeSpecifierError(IArrayBound bound);
    public IArrayBound get_Bound();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ArrayExceeds32DimensionsError : object {
    private string MESSAGE;
    private IArrayModifier myArrayModifier;
    public IArrayModifier ArrayModifier { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ArrayExceeds32DimensionsError(IArrayModifier arrayModifier);
    public IArrayModifier get_ArrayModifier();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ArrayInitializerExpectedError : object {
    private string MESSAGE;
    private IVBExpression myInitializer;
    public IVBExpression Initializer { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ArrayInitializerExpectedError(IVBExpression initializer);
    public IVBExpression get_Initializer();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ArrayInitializerHasTooFewDimensionsError : object {
    private string MESSAGE;
    private IVBExpression myExpression;
    public IVBExpression Expression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ArrayInitializerHasTooFewDimensionsError(IVBExpression expression);
    public IVBExpression get_Expression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ArrayInitializerHasTooManyDimensionsError : object {
    private string MESSAGE;
    private IVBExpression myExpression;
    public IVBExpression Expression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ArrayInitializerHasTooManyDimensionsError(IVBExpression expression);
    public IVBExpression get_Expression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ArrayInitializerSizeMismatchError : object {
    private string MESSAGE;
    private IAnonymousArrayCreationExpression myInitializer;
    public IAnonymousArrayCreationExpression Initializer { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ArrayInitializerSizeMismatchError(IAnonymousArrayCreationExpression initializer);
    public IAnonymousArrayCreationExpression get_Initializer();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ArrayLowerBoundsCanBeOnlyZeroError : object {
    private string MESSAGE;
    private IVBExpression myLowerBoundExpression;
    public IVBExpression LowerBoundExpression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ArrayLowerBoundsCanBeOnlyZeroError(IVBExpression lowerBoundExpression);
    public IVBExpression get_LowerBoundExpression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ArrayModifiersSpecificationOnBothVariableAndItsTypeError : object {
    private string MESSAGE;
    private ITypeUsage myTypeUsage;
    public ITypeUsage TypeUsage { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ArrayModifiersSpecificationOnBothVariableAndItsTypeError(ITypeUsage typeUsage);
    public ITypeUsage get_TypeUsage();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("RedundantAssignment", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.AssignmentNotUsedWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IAssignmentStatement myStatement;
    public IAssignmentStatement Statement { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public AssignmentNotUsedWarning(IAssignmentStatement statement);
    public IAssignmentStatement get_Statement();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.AssignmentToMeError : object {
    private string MESSAGE;
    private IInstanceExpression myInstanceExpression;
    public IInstanceExpression InstanceExpression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public AssignmentToMeError(IInstanceExpression instanceExpression);
    public IInstanceExpression get_InstanceExpression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.AsyncMehodCannotHaveByRefParametersError : object {
    private string MESSAGE;
    private IParameter myParameter;
    private string myName;
    private string myMessage;
    public IParameter Parameter { get; }
    public string Name { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public AsyncMehodCannotHaveByRefParametersError(IParameter parameter, string name);
    public IParameter get_Parameter();
    public string get_Name();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC42358", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.AsyncMethodInvocationWithoutAwaitWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IInvocationStatement myInvocation;
    private IIndexExpression myIndexExpression;
    public IInvocationStatement Invocation { get; }
    public IIndexExpression IndexExpression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public AsyncMethodInvocationWithoutAwaitWarning(IInvocationStatement invocation, IIndexExpression indexExpression);
    public IInvocationStatement get_Invocation();
    public IIndexExpression get_IndexExpression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC42356", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.AsyncMethodWithoutAwait2Warning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IVBDeclaration myDeclaration;
    public IVBDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public AsyncMethodWithoutAwait2Warning(IVBDeclaration declaration);
    public IVBDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC42356", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.AsyncMethodWithoutAwaitWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IVBDeclaration myDeclaration;
    public IVBDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public AsyncMethodWithoutAwaitWarning(IVBDeclaration declaration);
    public IVBDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.AsyncModifierIsNotValidOnThisItemError : object {
    private string MESSAGE;
    private IModifiersList myModifiersList;
    private ITokenNode myTokenNode;
    public IModifiersList ModifiersList { get; }
    public ITokenNode TokenNode { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public AsyncModifierIsNotValidOnThisItemError(IModifiersList modifiersList, ITokenNode tokenNode);
    public IModifiersList get_ModifiersList();
    public ITokenNode get_TokenNode();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.AsyncOrIteratorLambdaToExpressionTreeError : object {
    private string MESSAGE;
    private ILambdaExpression myLambdaExpression;
    public ILambdaExpression LambdaExpression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public AsyncOrIteratorLambdaToExpressionTreeError(ILambdaExpression lambdaExpression);
    public ILambdaExpression get_LambdaExpression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.AttributeNameExpectedError : object {
    private string MESSAGE;
    private IReference myReference;
    private string myMessage;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public AttributeNameExpectedError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.AutoPropertyWithParametersError : object {
    private string MESSAGE;
    private IPropertyDeclaration myDeclaration;
    public IPropertyDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public AutoPropertyWithParametersError(IPropertyDeclaration declaration);
    public IPropertyDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.AwaitCannotBeUsedInCatchFinallySyncLockError : object {
    private string MESSAGE;
    private IAwaitExpression myAwaitExpression;
    public IAwaitExpression AwaitExpression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public AwaitCannotBeUsedInCatchFinallySyncLockError(IAwaitExpression awaitExpression);
    public IAwaitExpression get_AwaitExpression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.AwaitCannotBeUsedInQueryExpressionError : object {
    private string MESSAGE;
    private IAwaitExpression myAwaitExpression;
    public IAwaitExpression AwaitExpression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public AwaitCannotBeUsedInQueryExpressionError(IAwaitExpression awaitExpression);
    public IAwaitExpression get_AwaitExpression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.AwaitExpressionNotUnderAsyncMethodError : object {
    private string MESSAGE;
    private IAwaitExpression myAwaitExpression;
    public IAwaitExpression AwaitExpression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public AwaitExpressionNotUnderAsyncMethodError(IAwaitExpression awaitExpression);
    public IAwaitExpression get_AwaitExpression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.BadAwaitPatternError : object {
    private string MESSAGE;
    private IAwaitExpression myAwaitExpression;
    private IExpressionType myExpressionType;
    private string myMessage;
    public IAwaitExpression AwaitExpression { get; }
    public IExpressionType ExpressionType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public BadAwaitPatternError(IAwaitExpression awaitExpression, IExpressionType expressionType);
    public IAwaitExpression get_AwaitExpression();
    public IExpressionType get_ExpressionType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("BaseMethodCallWithDefaultParameter", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.BaseMethodCallWithDefaultParameterWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IReferenceExpression myExpression;
    private ITreeNode myErrorPosition;
    public IReferenceExpression Expression { get; }
    public ITreeNode ErrorPosition { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public BaseMethodCallWithDefaultParameterWarning(IReferenceExpression expression, ITreeNode errorPosition);
    public IReferenceExpression get_Expression();
    public ITreeNode get_ErrorPosition();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("BaseObjectEqualsIsObjectEquals", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.BaseObjectEqualsIsObjectEqualsWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IExpression myExpression;
    public IExpression Expression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public BaseObjectEqualsIsObjectEqualsWarning(IExpression expression);
    public IExpression get_Expression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("BaseObjectGetHashCodeCallInGetHashCode", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.BaseObjectGetHashCodeCallInGetHashCodeWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IReferenceExpression myReferenceExpression;
    public IReferenceExpression ReferenceExpression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public BaseObjectGetHashCodeCallInGetHashCodeWarning(IReferenceExpression referenceExpression);
    public IReferenceExpression get_ReferenceExpression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ByRefParameterForParamsParameterError : object {
    private string MESSAGE;
    private IParameter myParameter;
    public IParameter Parameter { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ByRefParameterForParamsParameterError(IParameter parameter);
    public IParameter get_Parameter();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC42505", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CallerArgumentExpressionAttributeHasInvalidParameterNameWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IAttribute myAttribute;
    private IVBParameterDeclaration myParameter;
    private string myMessage;
    public IAttribute Attribute { get; }
    public IVBParameterDeclaration Parameter { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CallerArgumentExpressionAttributeHasInvalidParameterNameWarning(IAttribute attribute, IVBParameterDeclaration parameter);
    public IAttribute get_Attribute();
    public IVBParameterDeclaration get_Parameter();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC42504", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CallerArgumentExpressionAttributeSelfReferentialWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IAttribute myAttribute;
    private IVBParameterDeclaration myParameter;
    private string myMessage;
    public IAttribute Attribute { get; }
    public IVBParameterDeclaration Parameter { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CallerArgumentExpressionAttributeSelfReferentialWarning(IAttribute attribute, IVBParameterDeclaration parameter);
    public IAttribute get_Attribute();
    public IVBParameterDeclaration get_Parameter();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("MergeCastWithTypeCheck", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CanBeReplacedWithTryCastAndCheckForNullWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IBlockIfStatement myIfStatement;
    private IType myType;
    private IVBExpression myCastSource;
    private string myCastDestVarName;
    private bool myUseVar;
    private IVBStatement myTargetVarDeclaration;
    private List`1<string> myUniqueNames;
    private string myMessage;
    public IBlockIfStatement IfStatement { get; }
    public IType Type { get; }
    public IVBExpression CastSource { get; }
    public string CastDestVarName { get; }
    public bool UseVar { get; }
    public IVBStatement TargetVarDeclaration { get; }
    public List`1<string> UniqueNames { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CanBeReplacedWithTryCastAndCheckForNullWarning(IBlockIfStatement ifStatement, IType type, IVBExpression castSource, string castDestVarName, bool useVar, IVBStatement targetVarDeclaration, List`1<string> uniqueNames);
    public IBlockIfStatement get_IfStatement();
    public IType get_Type();
    public IVBExpression get_CastSource();
    public string get_CastDestVarName();
    public bool get_UseVar();
    public IVBStatement get_TargetVarDeclaration();
    public List`1<string> get_UniqueNames();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CannotApplyBinaryOperatorError : object {
    private string MESSAGE;
    private IVBOperatorReference myReference;
    private IVBBinaryExpression myExpression;
    private string myMessage;
    public IVBOperatorReference Reference { get; }
    public IVBBinaryExpression Expression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CannotApplyBinaryOperatorError(IVBOperatorReference reference, IVBBinaryExpression expression);
    public IVBOperatorReference get_Reference();
    public IVBBinaryExpression get_Expression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CannotApplyUnaryOperatorError : object {
    private string MESSAGE;
    private IVBOperatorReference myReference;
    private string myMessage;
    public IVBOperatorReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CannotApplyUnaryOperatorError(IVBOperatorReference reference);
    public IVBOperatorReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CannotAwaitNothingError : object {
    private string MESSAGE;
    private IAwaitExpression myAwaitExpression;
    public IAwaitExpression AwaitExpression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CannotAwaitNothingError(IAwaitExpression awaitExpression);
    public IAwaitExpression get_AwaitExpression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CannotBeIndexedError : object {
    private string MESSAGE;
    private IReference myReference;
    private IType myType;
    private string myMessage;
    public IReference Reference { get; }
    public IType Type { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CannotBeIndexedError(IReference reference, IType type);
    public IReference get_Reference();
    public IType get_Type();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CannotConvertTypeInArgumentError : object {
    private string MESSAGE;
    private IVBArgumentInfo myArgument;
    private IType myTargetType;
    private string myMessage;
    public IVBArgumentInfo Argument { get; }
    public IType TargetType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CannotConvertTypeInArgumentError(IVBArgumentInfo argument, IType targetType);
    public IVBArgumentInfo get_Argument();
    public IType get_TargetType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC42016", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CannotConvertTypeInArgumentWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IVBArgumentInfo myArgument;
    private IType myTargetType;
    private string myMessage;
    public IVBArgumentInfo Argument { get; }
    public IType TargetType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CannotConvertTypeInArgumentWarning(IVBArgumentInfo argument, IType targetType);
    public IVBArgumentInfo get_Argument();
    public IType get_TargetType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CannotConvertTypeInAssignmentError : object {
    private string MESSAGE;
    private IAssignmentStatement myAssignmentStatement;
    private IExpressionType mySourceType;
    private IType myTargetType;
    private string myMessage;
    public IAssignmentStatement AssignmentStatement { get; }
    public IExpressionType SourceType { get; }
    public IType TargetType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CannotConvertTypeInAssignmentError(IAssignmentStatement assignmentStatement, IExpressionType sourceType, IType targetType);
    public IAssignmentStatement get_AssignmentStatement();
    public IExpressionType get_SourceType();
    public IType get_TargetType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC42016", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CannotConvertTypeInAssignmentWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IAssignmentStatement myAssignmentStatement;
    private IExpressionType mySourceType;
    private IType myTargetType;
    private string myMessage;
    public IAssignmentStatement AssignmentStatement { get; }
    public IExpressionType SourceType { get; }
    public IType TargetType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CannotConvertTypeInAssignmentWarning(IAssignmentStatement assignmentStatement, IExpressionType sourceType, IType targetType);
    public IAssignmentStatement get_AssignmentStatement();
    public IExpressionType get_SourceType();
    public IType get_TargetType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CannotConvertTypeInAsyncReturnError : object {
    private string MESSAGE;
    private IReturnStatement myReturnStatement;
    private IVBExpression myExpression;
    private IType myTargetType;
    private string myMessage;
    public IReturnStatement ReturnStatement { get; }
    public IVBExpression Expression { get; }
    public IType TargetType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CannotConvertTypeInAsyncReturnError(IReturnStatement returnStatement, IVBExpression expression, IType targetType);
    public IReturnStatement get_ReturnStatement();
    public IVBExpression get_Expression();
    public IType get_TargetType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC42016", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CannotConvertTypeInAsyncReturnWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IReturnStatement myReturnStatement;
    private IVBExpression myExpression;
    private IType myTargetType;
    private string myMessage;
    public IReturnStatement ReturnStatement { get; }
    public IVBExpression Expression { get; }
    public IType TargetType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CannotConvertTypeInAsyncReturnWarning(IReturnStatement returnStatement, IVBExpression expression, IType targetType);
    public IReturnStatement get_ReturnStatement();
    public IVBExpression get_Expression();
    public IType get_TargetType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CannotConvertTypeInDeclarationError : object {
    private string MESSAGE;
    private IDeclaration myDeclaration;
    private IVBExpression myExpression;
    private IType myTargetType;
    private string myMessage;
    public IDeclaration Declaration { get; }
    public IVBExpression Expression { get; }
    public IType TargetType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CannotConvertTypeInDeclarationError(IDeclaration declaration, IVBExpression expression, IType targetType);
    public IDeclaration get_Declaration();
    public IVBExpression get_Expression();
    public IType get_TargetType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC42016", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CannotConvertTypeInDeclarationWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IDeclaration myDeclaration;
    private IVBExpression myExpression;
    private IType myTargetType;
    private string myMessage;
    public IDeclaration Declaration { get; }
    public IVBExpression Expression { get; }
    public IType TargetType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CannotConvertTypeInDeclarationWarning(IDeclaration declaration, IVBExpression expression, IType targetType);
    public IDeclaration get_Declaration();
    public IVBExpression get_Expression();
    public IType get_TargetType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CannotConvertTypeInMemberInitializerError : object {
    private string MESSAGE;
    private IMemberInitializer myInitializer;
    private IVBExpression myExpression;
    private IType myTargetType;
    private string myMessage;
    public IMemberInitializer Initializer { get; }
    public IVBExpression Expression { get; }
    public IType TargetType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CannotConvertTypeInMemberInitializerError(IMemberInitializer initializer, IVBExpression expression, IType targetType);
    public IMemberInitializer get_Initializer();
    public IVBExpression get_Expression();
    public IType get_TargetType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC42016", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CannotConvertTypeInMemberInitializerWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IMemberInitializer myInitializer;
    private IVBExpression myExpression;
    private IType myTargetType;
    private string myMessage;
    public IMemberInitializer Initializer { get; }
    public IVBExpression Expression { get; }
    public IType TargetType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CannotConvertTypeInMemberInitializerWarning(IMemberInitializer initializer, IVBExpression expression, IType targetType);
    public IMemberInitializer get_Initializer();
    public IVBExpression get_Expression();
    public IType get_TargetType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CannotConvertTypeInReturnError : object {
    private string MESSAGE;
    private IReturnStatement myReturnStatement;
    private IVBExpression myExpression;
    private IType myTargetType;
    private string myMessage;
    public IReturnStatement ReturnStatement { get; }
    public IVBExpression Expression { get; }
    public IType TargetType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CannotConvertTypeInReturnError(IReturnStatement returnStatement, IVBExpression expression, IType targetType);
    public IReturnStatement get_ReturnStatement();
    public IVBExpression get_Expression();
    public IType get_TargetType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC42016", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CannotConvertTypeInReturnWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IReturnStatement myReturnStatement;
    private IVBExpression myExpression;
    private IType myTargetType;
    private string myMessage;
    public IReturnStatement ReturnStatement { get; }
    public IVBExpression Expression { get; }
    public IType TargetType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CannotConvertTypeInReturnWarning(IReturnStatement returnStatement, IVBExpression expression, IType targetType);
    public IReturnStatement get_ReturnStatement();
    public IVBExpression get_Expression();
    public IType get_TargetType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CannotConvertTypeInYieldError : object {
    private string MESSAGE;
    private IYieldStatement myYieldStatement;
    private IType myTargetType;
    private string myMessage;
    public IYieldStatement YieldStatement { get; }
    public IType TargetType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CannotConvertTypeInYieldError(IYieldStatement yieldStatement, IType targetType);
    public IYieldStatement get_YieldStatement();
    public IType get_TargetType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC42016", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CannotConvertTypeInYieldWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IYieldStatement myYieldStatement;
    private IType myTargetType;
    private string myMessage;
    public IYieldStatement YieldStatement { get; }
    public IType TargetType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CannotConvertTypeInYieldWarning(IYieldStatement yieldStatement, IType targetType);
    public IYieldStatement get_YieldStatement();
    public IType get_TargetType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CannotCreateInstanceOfInterfaceError : object {
    private string MESSAGE;
    private IReference myReference;
    private IInterface myInterface;
    private string myMessage;
    public IReference Reference { get; }
    public IInterface Interface { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CannotCreateInstanceOfInterfaceError(IReference reference, IInterface interface);
    public IReference get_Reference();
    public IInterface get_Interface();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CannotCreateInstanceOfTypeParameterError : object {
    private string MESSAGE;
    private IReference myReference;
    private ITypeParameter myTypeParameter;
    private string myMessage;
    public IReference Reference { get; }
    public ITypeParameter TypeParameter { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CannotCreateInstanceOfTypeParameterError(IReference reference, ITypeParameter typeParameter);
    public IReference get_Reference();
    public ITypeParameter get_TypeParameter();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CannotCreateValueTupleWithNewError : object {
    private string MESSAGE;
    private ITupleDeclaredTypeUsage myTypeUsage;
    public ITupleDeclaredTypeUsage TypeUsage { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CannotCreateValueTupleWithNewError(ITupleDeclaredTypeUsage typeUsage);
    public ITupleDeclaredTypeUsage get_TypeUsage();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CannotDetermineNullCoalescingExpressionType2Error : object {
    private string MESSAGE;
    private IConditionalExpression myExpression;
    private string myMessage;
    public IConditionalExpression Expression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CannotDetermineNullCoalescingExpressionType2Error(IConditionalExpression expression);
    public IConditionalExpression get_Expression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CannotDetermineNullCoalescingExpressionTypeError : object {
    private string MESSAGE;
    private IConditionalExpression myExpression;
    private string myMessage;
    public IConditionalExpression Expression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CannotDetermineNullCoalescingExpressionTypeError(IConditionalExpression expression);
    public IConditionalExpression get_Expression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CannotDetermineTernaryExpressionType2Error : object {
    private string MESSAGE;
    private IConditionalExpression myExpression;
    private string myMessage;
    public IConditionalExpression Expression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CannotDetermineTernaryExpressionType2Error(IConditionalExpression expression);
    public IConditionalExpression get_Expression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CannotDetermineTernaryExpressionTypeError : object {
    private string MESSAGE;
    private IConditionalExpression myExpression;
    private string myMessage;
    public IConditionalExpression Expression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CannotDetermineTernaryExpressionTypeError(IConditionalExpression expression);
    public IConditionalExpression get_Expression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CannotInferElementTypeOfAnonymousArrayError : object {
    private string MESSAGE;
    private IAnonymousArrayCreationExpression myAnonymousArrayCreation;
    public IAnonymousArrayCreationExpression AnonymousArrayCreation { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CannotInferElementTypeOfAnonymousArrayError(IAnonymousArrayCreationExpression anonymousArrayCreation);
    public IAnonymousArrayCreationExpression get_AnonymousArrayCreation();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CannotInferReturnTypeError : object {
    private string MESSAGE;
    private ILambdaExpression myLambdaExpression;
    public ILambdaExpression LambdaExpression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CannotInferReturnTypeError(ILambdaExpression lambdaExpression);
    public ILambdaExpression get_LambdaExpression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CannotUseBothAsyncAndIteratorModifiersError : object {
    private string MESSAGE;
    private IVBDeclaration myDeclaration;
    private ITokenNode myAsyncNode;
    private ITokenNode myIteratorNode;
    public IVBDeclaration Declaration { get; }
    public ITokenNode AsyncNode { get; }
    public ITokenNode IteratorNode { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CannotUseBothAsyncAndIteratorModifiersError(IVBDeclaration declaration, ITokenNode asyncNode, ITokenNode iteratorNode);
    public IVBDeclaration get_Declaration();
    public ITokenNode get_AsyncNode();
    public ITokenNode get_IteratorNode();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CannotUseNonEmptyInitializerIfDimensionIsNonConstantError : object {
    private string MESSAGE;
    private IAnonymousArrayCreationExpression myArrayCreationExpression;
    public IAnonymousArrayCreationExpression ArrayCreationExpression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CannotUseNonEmptyInitializerIfDimensionIsNonConstantError(IAnonymousArrayCreationExpression arrayCreationExpression);
    public IAnonymousArrayCreationExpression get_ArrayCreationExpression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CantUseAccessorDirectlyError : object {
    private string MESSAGE;
    private IReference myReference;
    private IDeclaredElement myDeclaredElement;
    private string myMessage;
    public IReference Reference { get; }
    public IDeclaredElement DeclaredElement { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CantUseAccessorDirectlyError(IReference reference, IDeclaredElement declaredElement);
    public IReference get_Reference();
    public IDeclaredElement get_DeclaredElement();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.CircularTypeDependencyError : object {
    private string MESSAGE;
    private IClassLikeDeclaration myDeclaration;
    private ITypeElement mySuperClass;
    private string myMessage;
    public IClassLikeDeclaration Declaration { get; }
    public ITypeElement SuperClass { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CircularTypeDependencyError(IClassLikeDeclaration declaration, ITypeElement superClass);
    public IClassLikeDeclaration get_Declaration();
    public ITypeElement get_SuperClass();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ClassCannotInheritSealedClassError : object {
    private string MESSAGE;
    private IClassBaseClause myElement;
    public IClassBaseClause Element { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ClassCannotInheritSealedClassError(IClassBaseClause element);
    public IClassBaseClause get_Element();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ClassShouldInheritClassError : object {
    private string MESSAGE;
    private IClassBaseClause myElement;
    public IClassBaseClause Element { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ClassShouldInheritClassError(IClassBaseClause element);
    public IClassBaseClause get_Element();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ConditionalExpressionArgIsNotBoolError : object {
    private string MESSAGE;
    private IConditionalExpression myExpression;
    private IVBExpression myCondition;
    public IConditionalExpression Expression { get; }
    public IVBExpression Condition { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ConditionalExpressionArgIsNotBoolError(IConditionalExpression expression, IVBExpression condition);
    public IConditionalExpression get_Expression();
    public IVBExpression get_Condition();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ConditionalExpressionWrongArgsNumberError : object {
    private string MESSAGE;
    private IConditionalExpression myExpression;
    public IConditionalExpression Expression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ConditionalExpressionWrongArgsNumberError(IConditionalExpression expression);
    public IConditionalExpression get_Expression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("ConditionalTernaryEqualBranch", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ConditionalTernaryEqualBranchWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IConditionalExpression myExpression;
    public IConditionalExpression Expression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ConditionalTernaryEqualBranchWarning(IConditionalExpression expression);
    public IConditionalExpression get_Expression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("ConditionIsAlwaysTrueOrFalse", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ConditionIsAlwaysTrueOrFalseWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IVBExpression myExpression;
    private bool myExpressionConstantValue;
    private string myMessage;
    public IVBExpression Expression { get; }
    public bool ExpressionConstantValue { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ConditionIsAlwaysTrueOrFalseWarning(IVBExpression expression, bool expressionConstantValue);
    public IVBExpression get_Expression();
    public bool get_ExpressionConstantValue();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ConstantAssignmentTargetError : object {
    private string MESSAGE;
    private IVBExpression myDestination;
    private IDeclaredElement myElement;
    public IVBExpression Destination { get; }
    public IDeclaredElement Element { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ConstantAssignmentTargetError(IVBExpression destination, IDeclaredElement element);
    public IVBExpression get_Destination();
    public IDeclaredElement get_Element();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ConstantInitializerMustBeConstantError : object {
    private string MESSAGE;
    private IDeclaration myDeclaration;
    private IVBExpression myExpression;
    public IDeclaration Declaration { get; }
    public IVBExpression Expression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ConstantInitializerMustBeConstantError(IDeclaration declaration, IVBExpression expression);
    public IDeclaration get_Declaration();
    public IVBExpression get_Expression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ConstantMustHaveInitializerError : object {
    private string MESSAGE;
    private IDeclaration myDeclaration;
    public IDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ConstantMustHaveInitializerError(IDeclaration declaration);
    public IDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ConstructorInitializerMissingError : object {
    private string MESSAGE;
    private IConstructorDeclaration myConstructorDeclaration;
    private IClass myBaseClass;
    private string myMessage;
    public IConstructorDeclaration ConstructorDeclaration { get; }
    public IClass BaseClass { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ConstructorInitializerMissingError(IConstructorDeclaration constructorDeclaration, IClass baseClass);
    public IConstructorDeclaration get_ConstructorDeclaration();
    public IClass get_BaseClass();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("ContainerAnnotationRedundancy", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ContainerAnnotationRedundancyWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IAttribute myAttribute;
    private IAttributesOwnerDeclaration myDeclaration;
    public IAttribute Attribute { get; }
    public IAttributesOwnerDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ContainerAnnotationRedundancyWarning(IAttribute attribute, IAttributesOwnerDeclaration declaration);
    public IAttribute get_Attribute();
    public IAttributesOwnerDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("ConvertToVbAutoProperty", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ConvertToAutoPropertyWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IPropertyDeclaration myPropertyDeclaration;
    private IField myBackingField;
    public IPropertyDeclaration PropertyDeclaration { get; }
    public IField BackingField { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ConvertToAutoPropertyWarning(IPropertyDeclaration propertyDeclaration, IField backingField);
    public IPropertyDeclaration get_PropertyDeclaration();
    public IField get_BackingField();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("ConvertToVbAutoPropertyWhenPossible", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ConvertToAutoPropertyWhenPossibleWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IPropertyDeclaration myPropertyDeclaration;
    private IField myBackingField;
    public IPropertyDeclaration PropertyDeclaration { get; }
    public IField BackingField { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ConvertToAutoPropertyWhenPossibleWarning(IPropertyDeclaration propertyDeclaration, IField backingField);
    public IPropertyDeclaration get_PropertyDeclaration();
    public IField get_BackingField();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("ConvertToVbAutoPropertyWithPrivateSetter", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ConvertToAutoPropertyWithPrivateSetterWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IPropertyDeclaration myPropertyDeclaration;
    private IField myBackingField;
    public IPropertyDeclaration PropertyDeclaration { get; }
    public IField BackingField { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ConvertToAutoPropertyWithPrivateSetterWarning(IPropertyDeclaration propertyDeclaration, IField backingField);
    public IPropertyDeclaration get_PropertyDeclaration();
    public IField get_BackingField();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.DefaultMemberShouldBePropertyError : object {
    private string MESSAGE;
    private IReference myReference;
    private string myMessage;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public DefaultMemberShouldBePropertyError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.DefaultPropertyNotFoundError : object {
    private string MESSAGE;
    private IReference myReference;
    private ITypeElement myTypeElement;
    private string myMessage;
    public IReference Reference { get; }
    public ITypeElement TypeElement { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public DefaultPropertyNotFoundError(IReference reference, ITypeElement typeElement);
    public IReference get_Reference();
    public ITypeElement get_TypeElement();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.DefaultPropertyWithoutParametersError : object {
    private string MESSAGE;
    private IPropertyDeclaration myDeclaration;
    public IPropertyDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public DefaultPropertyWithoutParametersError(IPropertyDeclaration declaration);
    public IPropertyDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.DisallowedTupleElementNameError : object {
    private string MESSAGE;
    private IVBIdentifier myNameIdentifier;
    private int myIndex;
    private string myMessage;
    public IVBIdentifier NameIdentifier { get; }
    public int Index { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public DisallowedTupleElementNameError(IVBIdentifier nameIdentifier, int index);
    public IVBIdentifier get_NameIdentifier();
    public int get_Index();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.DuplicateInterfaceInImplementsListError : object {
    private string MESSAGE;
    private IDeclaredTypeUsage myTypeUsage;
    public IDeclaredTypeUsage TypeUsage { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public DuplicateInterfaceInImplementsListError(IDeclaredTypeUsage typeUsage);
    public IDeclaredTypeUsage get_TypeUsage();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.DuplicateLabelError : object {
    private string MESSAGE;
    private IDeclaration myDeclaration;
    private string myMessage;
    public IDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public DuplicateLabelError(IDeclaration declaration);
    public IDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.DuplicateLocalDeclarationError : object {
    private string MESSAGE;
    private IDeclaration myDeclaration;
    private string myMessage;
    public IDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public DuplicateLocalDeclarationError(IDeclaration declaration);
    public IDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.DuplicateMemberDeclarationError : object {
    private string MESSAGE;
    private IVBDeclaration myDeclaration;
    private ITypeElement myContainingType;
    private string myMessage;
    public IVBDeclaration Declaration { get; }
    public ITypeElement ContainingType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public DuplicateMemberDeclarationError(IVBDeclaration declaration, ITypeElement containingType);
    public IVBDeclaration get_Declaration();
    public ITypeElement get_ContainingType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.DuplicateTupleElementNameError : object {
    private string MESSAGE;
    private IVBIdentifier myNameIdentifier;
    public IVBIdentifier NameIdentifier { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public DuplicateTupleElementNameError(IVBIdentifier nameIdentifier);
    public IVBIdentifier get_NameIdentifier();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.DuplicateTypeDeclarationError : object {
    private string MESSAGE;
    private IDeclaration myDeclaration;
    private IDeclaredElement[] myDuplicates;
    private string myMessage;
    public IDeclaration Declaration { get; }
    public IDeclaredElement[] Duplicates { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public DuplicateTypeDeclarationError(IDeclaration declaration, IDeclaredElement[] duplicates);
    public IDeclaration get_Declaration();
    public IDeclaredElement[] get_Duplicates();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("EqualExpressionComparison", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.EqualExpressionComparisonWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IVBExpression myExpression;
    private bool myExpressionConstantValue;
    public IVBExpression Expression { get; }
    public bool ExpressionConstantValue { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public EqualExpressionComparisonWarning(IVBExpression expression, bool expressionConstantValue);
    public IVBExpression get_Expression();
    public bool get_ExpressionConstantValue();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.EventExpectedError : object {
    private string MESSAGE;
    private IReference myReference;
    private string myMessage;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public EventExpectedError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.EventExpectedMultipleCandidatesError : object {
    private string MESSAGE;
    private IReference myReference;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public EventExpectedMultipleCandidatesError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.EventMustHaveDelegateTypeError : object {
    private string MESSAGE;
    private IEventDeclaration myDeclaration;
    public IEventDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public EventMustHaveDelegateTypeError(IEventDeclaration declaration);
    public IEventDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.EventTypeMustReturnVoidError : object {
    private string MESSAGE;
    private IEventDeclaration myDeclaration;
    public IEventDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public EventTypeMustReturnVoidError(IEventDeclaration declaration);
    public IEventDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC42380", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ExperimentalElementWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private ITreeNode myContextNode;
    private RichText myObsoleteMessage;
    private string myCompilerId;
    private string myUrlFormat;
    private DocumentRange myDisableRange;
    private string myMessage;
    public ITreeNode ContextNode { get; }
    public RichText ObsoleteMessage { get; }
    public string CompilerId { get; }
    public string UrlFormat { get; }
    public DocumentRange DisableRange { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public string ICustomCompilerIdHighlighting_CompilerId { get; }
    public string Title { get; }
    public Severity ICustomSeverityHighlighting_Severity { get; }
    public ExperimentalElementWarning(ITreeNode contextNode, RichText obsoleteMessage, string compilerId, string urlFormat, DocumentRange disableRange);
    public ITreeNode get_ContextNode();
    public RichText get_ObsoleteMessage();
    public string get_CompilerId();
    public string get_UrlFormat();
    public DocumentRange get_DisableRange();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
    public sealed virtual override string get_ICustomCompilerIdHighlighting_CompilerId();
    public sealed virtual override string get_Title();
    public sealed virtual override Severity get_ICustomSeverityHighlighting_Severity();
}
[ConfigurableSeverityHighlightingAttribute("ExplicitCallerInfoArgument", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ExplicitCallerInfoArgumentWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IVBArgument myArgument;
    public IVBArgument Argument { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ExplicitCallerInfoArgumentWarning(IVBArgument argument);
    public IVBArgument get_Argument();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ExplicitInitializationForArrayWithExplicitBoundsError : object {
    private string MESSAGE;
    private IVBDeclaration myDeclaration;
    private IArrayModifier myArrayModifier;
    public IVBDeclaration Declaration { get; }
    public IArrayModifier ArrayModifier { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ExplicitInitializationForArrayWithExplicitBoundsError(IVBDeclaration declaration, IArrayModifier arrayModifier);
    public IVBDeclaration get_Declaration();
    public IArrayModifier get_ArrayModifier();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ExpressionDoesnotProduceValueError : object {
    private string MESSAGE;
    private IVBExpression myExpression;
    public IVBExpression Expression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ExpressionDoesnotProduceValueError(IVBExpression expression);
    public IVBExpression get_Expression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ExpressionRangeVariableDeclarationWithExplicitTypeError : object {
    private string MESSAGE;
    private IExpressionRangeVariableDeclaration myDeclaration;
    public IExpressionRangeVariableDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ExpressionRangeVariableDeclarationWithExplicitTypeError(IExpressionRangeVariableDeclaration declaration);
    public IExpressionRangeVariableDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ExpressionTypeIsNotAwaitableError : object {
    private string MESSAGE;
    private IAwaitExpression myAwaitExpression;
    private IExpressionType myExpressionType;
    private string myMessage;
    public IAwaitExpression AwaitExpression { get; }
    public IExpressionType ExpressionType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ExpressionTypeIsNotAwaitableError(IAwaitExpression awaitExpression, IExpressionType expressionType);
    public IAwaitExpression get_AwaitExpression();
    public IExpressionType get_ExpressionType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ExtensionMethodInStaticContextError : object {
    private string MESSAGE;
    private IReference myReference;
    private string myMessage;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ExtensionMethodInStaticContextError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.FieldOrPropertyExpectedError : object {
    private string MESSAGE;
    private IReference myReference;
    private string myMessage;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public FieldOrPropertyExpectedError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("CompareOfFloatsByEqualityOperator", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.FloatingPointEqualityComparisonWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IRelationalExpression myExpression;
    private IssueType myIssueType;
    private SuspiciousConstant myConstant;
    private string myMessage;
    public IRelationalExpression Expression { get; }
    public IssueType IssueType { get; }
    public SuspiciousConstant Constant { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public FloatingPointEqualityComparisonWarning(IRelationalExpression expression, IssueType issueType, SuspiciousConstant constant);
    public IRelationalExpression get_Expression();
    public IssueType get_IssueType();
    public SuspiciousConstant get_Constant();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("ForeachCanBeConvertedToQueryUsingAnotherGetEnumerator", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ForeachCanBeConvertedToQueryUsingAnotherGetEnumeratorWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IForEachStatement myLoop;
    public IForEachStatement Loop { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ForeachCanBeConvertedToQueryUsingAnotherGetEnumeratorWarning(IForEachStatement loop);
    public IForEachStatement get_Loop();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("LoopCanBeConvertedToQuery", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ForeachCanBeConvertedToQueryWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IForEachStatement myLoop;
    public IForEachStatement Loop { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ForeachCanBeConvertedToQueryWarning(IForEachStatement loop);
    public IForEachStatement get_Loop();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("ForeachCanBePartlyConvertedToQueryUsingAnotherGetEnumerator", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ForeachCanBePartlyConvertedToQueryUsingAnotherGetEnumeratorWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IForEachStatement myLoop;
    public IForEachStatement Loop { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ForeachCanBePartlyConvertedToQueryUsingAnotherGetEnumeratorWarning(IForEachStatement loop);
    public IForEachStatement get_Loop();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("LoopCanBePartlyConvertedToQuery", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ForeachCanBePartlyConvertedToQueryWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IForEachStatement myLoop;
    public IForEachStatement Loop { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ForeachCanBePartlyConvertedToQueryWarning(IForEachStatement loop);
    public IForEachStatement get_Loop();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("GCSuppressFinalizeForTypeWithoutDestructor", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.GCSuppressFinalizeForTypeWithoutDestructorWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IIndexExpression myExpression;
    public IIndexExpression Expression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public GCSuppressFinalizeForTypeWithoutDestructorWarning(IIndexExpression expression);
    public IIndexExpression get_Expression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.HandlesFieldWithoutEventsError : object {
    private string MESSAGE;
    private IReference myReference;
    private IDeclaredElement myField;
    public IReference Reference { get; }
    public IDeclaredElement Field { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public HandlesFieldWithoutEventsError(IReference reference, IDeclaredElement field);
    public IReference get_Reference();
    public IDeclaredElement get_Field();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.HandlesMethodSignatureMismatchError : object {
    private string MESSAGE;
    private IReference myReference;
    private IMethod myMethod;
    private IEvent myEvt;
    private string myMessage;
    public IReference Reference { get; }
    public IMethod Method { get; }
    public IEvent Evt { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public HandlesMethodSignatureMismatchError(IReference reference, IMethod method, IEvent evt);
    public IReference get_Reference();
    public IMethod get_Method();
    public IEvent get_Evt();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("ConditionalTernaryEqualBranch", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.IIfEqualBranchWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IIndexExpression myExpression;
    private IVBExpression myThenExpression;
    public IIndexExpression Expression { get; }
    public IVBExpression ThenExpression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public IIfEqualBranchWarning(IIndexExpression expression, IVBExpression thenExpression);
    public IIndexExpression get_Expression();
    public IVBExpression get_ThenExpression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ImplementKeywordWithNotInterfaceError : object {
    private string MESSAGE;
    private ITypeImplementsClause myElement;
    private IDeclaredTypeUsage myTypeUsage;
    public ITypeImplementsClause Element { get; }
    public IDeclaredTypeUsage TypeUsage { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ImplementKeywordWithNotInterfaceError(ITypeImplementsClause element, IDeclaredTypeUsage typeUsage);
    public ITypeImplementsClause get_Element();
    public IDeclaredTypeUsage get_TypeUsage();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("ImplicitAnnotationRedundancy", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ImplicitAnnotationRedundancyWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IAttribute myAttribute;
    private IAttributesOwnerDeclaration myDeclaration;
    public IAttribute Attribute { get; }
    public IAttributesOwnerDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ImplicitAnnotationRedundancyWarning(IAttribute attribute, IAttributesOwnerDeclaration declaration);
    public IAttribute get_Attribute();
    public IAttributesOwnerDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC42105,BC42106,BC42107", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ImplicitReturnFromReferenceTypeFunctionWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private ITreeNode myNode;
    private IDeclaredElement myDeclaredElement;
    private string myMessage;
    public ITreeNode Node { get; }
    public IDeclaredElement DeclaredElement { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ImplicitReturnFromReferenceTypeFunctionWarning(ITreeNode node, IDeclaredElement declaredElement);
    public ITreeNode get_Node();
    public IDeclaredElement get_DeclaredElement();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC42353,BC42354,BC42355", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ImplicitReturnFromValueTypeFunctionWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private ITreeNode myNode;
    private IDeclaredElement myDeclaredElement;
    private string myMessage;
    public ITreeNode Node { get; }
    public IDeclaredElement DeclaredElement { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ImplicitReturnFromValueTypeFunctionWarning(ITreeNode node, IDeclaredElement declaredElement);
    public ITreeNode get_Node();
    public IDeclaredElement get_DeclaredElement();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC42322", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ImpossibleConvertTypeInArgumentWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IVBArgumentInfo myArgument;
    private IType myTargetType;
    private string myMessage;
    public IVBArgumentInfo Argument { get; }
    public IType TargetType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ImpossibleConvertTypeInArgumentWarning(IVBArgumentInfo argument, IType targetType);
    public IVBArgumentInfo get_Argument();
    public IType get_TargetType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC42322", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ImpossibleConvertTypeInAssignmentWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IAssignmentStatement myAssignmentStatement;
    private IExpressionType mySourceType;
    private IType myTargetType;
    private string myMessage;
    public IAssignmentStatement AssignmentStatement { get; }
    public IExpressionType SourceType { get; }
    public IType TargetType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ImpossibleConvertTypeInAssignmentWarning(IAssignmentStatement assignmentStatement, IExpressionType sourceType, IType targetType);
    public IAssignmentStatement get_AssignmentStatement();
    public IExpressionType get_SourceType();
    public IType get_TargetType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC42322", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ImpossibleConvertTypeInAsyncReturnWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IReturnStatement myReturnStatement;
    private IVBExpression myExpression;
    private IType myTargetType;
    private string myMessage;
    public IReturnStatement ReturnStatement { get; }
    public IVBExpression Expression { get; }
    public IType TargetType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ImpossibleConvertTypeInAsyncReturnWarning(IReturnStatement returnStatement, IVBExpression expression, IType targetType);
    public IReturnStatement get_ReturnStatement();
    public IVBExpression get_Expression();
    public IType get_TargetType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC42322", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ImpossibleConvertTypeInDeclarationWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IDeclaration myDeclaration;
    private IVBExpression myExpression;
    private IType myTargetType;
    private string myMessage;
    public IDeclaration Declaration { get; }
    public IVBExpression Expression { get; }
    public IType TargetType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ImpossibleConvertTypeInDeclarationWarning(IDeclaration declaration, IVBExpression expression, IType targetType);
    public IDeclaration get_Declaration();
    public IVBExpression get_Expression();
    public IType get_TargetType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC42322", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ImpossibleConvertTypeInMemberInitializerWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IMemberInitializer myInitializer;
    private IVBExpression myExpression;
    private IType myTargetType;
    private string myMessage;
    public IMemberInitializer Initializer { get; }
    public IVBExpression Expression { get; }
    public IType TargetType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ImpossibleConvertTypeInMemberInitializerWarning(IMemberInitializer initializer, IVBExpression expression, IType targetType);
    public IMemberInitializer get_Initializer();
    public IVBExpression get_Expression();
    public IType get_TargetType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC42322", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ImpossibleConvertTypeInReturnWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IReturnStatement myReturnStatement;
    private IVBExpression myExpression;
    private IType myTargetType;
    private string myMessage;
    public IReturnStatement ReturnStatement { get; }
    public IVBExpression Expression { get; }
    public IType TargetType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ImpossibleConvertTypeInReturnWarning(IReturnStatement returnStatement, IVBExpression expression, IType targetType);
    public IReturnStatement get_ReturnStatement();
    public IVBExpression get_Expression();
    public IType get_TargetType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC42322", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ImpossibleConvertTypeInYieldWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IYieldStatement myYieldStatement;
    private IType myTargetType;
    private string myMessage;
    public IYieldStatement YieldStatement { get; }
    public IType TargetType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ImpossibleConvertTypeInYieldWarning(IYieldStatement yieldStatement, IType targetType);
    public IYieldStatement get_YieldStatement();
    public IType get_TargetType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("PossiblyImpureMethodCallOnReadonlyVariable", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ImpureMethodCallOnReadonlyValueFieldWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IReferenceExpression myExpression;
    public IReferenceExpression Expression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ImpureMethodCallOnReadonlyValueFieldWarning(IReferenceExpression expression);
    public IReferenceExpression get_Expression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.InaccessibleAccessorError : object {
    private string MESSAGE;
    private IReference myReference;
    private IProperty myProperty;
    private AccessorKind myKind;
    private string myMessage;
    public IReference Reference { get; }
    public IProperty Property { get; }
    public AccessorKind Kind { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public InaccessibleAccessorError(IReference reference, IProperty property, AccessorKind kind);
    public IReference get_Reference();
    public IProperty get_Property();
    public AccessorKind get_Kind();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("InactivePreprocessorBranch", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.InactivePreprocessorBranchInfo : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IInactivePreprocessorBranch myNode;
    public IInactivePreprocessorBranch Node { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public InactivePreprocessorBranchInfo(IInactivePreprocessorBranch node);
    public IInactivePreprocessorBranch get_Node();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.InconsistentAccessibilityInDerivationError : object {
    private string MESSAGE;
    private ITypeElement myDerivedTypeElement;
    private IDeclaredTypeUsage myBaseTypeUsageNode;
    private ITypeElement myBaseTypeElement;
    private string myMessage;
    public ITypeElement DerivedTypeElement { get; }
    public IDeclaredTypeUsage BaseTypeUsageNode { get; }
    public ITypeElement BaseTypeElement { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public InconsistentAccessibilityInDerivationError(ITypeElement derivedTypeElement, IDeclaredTypeUsage baseTypeUsageNode, ITypeElement baseTypeElement);
    public ITypeElement get_DerivedTypeElement();
    public IDeclaredTypeUsage get_BaseTypeUsageNode();
    public ITypeElement get_BaseTypeElement();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.InconsistentAccessibilityInMemberTypeError : object {
    private string MESSAGE;
    private ITreeNode myTypeUsageNode;
    private IType myUsedType;
    private ITypeMember myTypeMember;
    private string myMessage;
    public ITreeNode TypeUsageNode { get; }
    public IType UsedType { get; }
    public ITypeMember TypeMember { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public InconsistentAccessibilityInMemberTypeError(ITreeNode typeUsageNode, IType usedType, ITypeMember typeMember);
    public ITreeNode get_TypeUsageNode();
    public IType get_UsedType();
    public ITypeMember get_TypeMember();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.InconsistentAccessibilityInParameterTypeError : object {
    private string MESSAGE;
    private ITypeUsage myTypeUsageNode;
    private IType myUsedType;
    private ITypeMember myTypeMember;
    private string myMessage;
    public ITypeUsage TypeUsageNode { get; }
    public IType UsedType { get; }
    public ITypeMember TypeMember { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public InconsistentAccessibilityInParameterTypeError(ITypeUsage typeUsageNode, IType usedType, ITypeMember typeMember);
    public ITypeUsage get_TypeUsageNode();
    public IType get_UsedType();
    public ITypeMember get_TypeMember();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.InconsistentAccessibilityInReturnTypeError : object {
    private string MESSAGE;
    private ITypeUsage myTypeUsageNode;
    private IType myUsedType;
    private ITypeMember myTypeMember;
    private string myMessage;
    public ITypeUsage TypeUsageNode { get; }
    public IType UsedType { get; }
    public ITypeMember TypeMember { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public InconsistentAccessibilityInReturnTypeError(ITypeUsage typeUsageNode, IType usedType, ITypeMember typeMember);
    public ITypeUsage get_TypeUsageNode();
    public IType get_UsedType();
    public ITypeMember get_TypeMember();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.InconsistentAccessibilityInTupleComponentError : object {
    private string MESSAGE;
    private ITreeNode myTypeUsageNode;
    private IType myUsedType;
    private ITypeMember myTypeMember;
    private string myMessage;
    public ITreeNode TypeUsageNode { get; }
    public IType UsedType { get; }
    public ITypeMember TypeMember { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public InconsistentAccessibilityInTupleComponentError(ITreeNode typeUsageNode, IType usedType, ITypeMember typeMember);
    public ITreeNode get_TypeUsageNode();
    public IType get_UsedType();
    public ITypeMember get_TypeMember();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.InconsistentAccessibilityInTypeArgumentError : object {
    private string MESSAGE;
    private ITreeNode myTypeUsageNode;
    private IType myUsedType;
    private ITypeMember myTypeMember;
    private string myMessage;
    public ITreeNode TypeUsageNode { get; }
    public IType UsedType { get; }
    public ITypeMember TypeMember { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public InconsistentAccessibilityInTypeArgumentError(ITreeNode typeUsageNode, IType usedType, ITypeMember typeMember);
    public ITreeNode get_TypeUsageNode();
    public IType get_UsedType();
    public ITypeMember get_TypeMember();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.InconsistentAccessibilityInTypeParameterConstraintError : object {
    private string MESSAGE;
    private ITypeUsage myTypeUsageNode;
    private IType myUsedType;
    private ITypeMember myTypeMember;
    private string myMessage;
    public ITypeUsage TypeUsageNode { get; }
    public IType UsedType { get; }
    public ITypeMember TypeMember { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public InconsistentAccessibilityInTypeParameterConstraintError(ITypeUsage typeUsageNode, IType usedType, ITypeMember typeMember);
    public ITypeUsage get_TypeUsageNode();
    public IType get_UsedType();
    public ITypeMember get_TypeMember();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.IncorrectArgumentNumberError : object {
    private string MESSAGE;
    private IReference myReference;
    private string myMessage;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public IncorrectArgumentNumberError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.IncorrectArgumentNumberMultipleCandidatesError : object {
    private string MESSAGE;
    private IReference myReference;
    private string myMessage;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public IncorrectArgumentNumberMultipleCandidatesError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.IncorrectArgumentTypesError : object {
    private string MESSAGE;
    private IReference myReference;
    private string myMessage;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public IncorrectArgumentTypesError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.IncorrectArrayElementTypeError : object {
    private string MESSAGE;
    private IVBExpression myInitializerExpression;
    private IType myTargetType;
    private string myMessage;
    public IVBExpression InitializerExpression { get; }
    public IType TargetType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public IncorrectArrayElementTypeError(IVBExpression initializerExpression, IType targetType);
    public IVBExpression get_InitializerExpression();
    public IType get_TargetType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.IncorrectMidStatementSyntaxError : object {
    private string MESSAGE;
    private IReference myReference;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public IncorrectMidStatementSyntaxError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.IncorrectSignatureInDelegateCreationError : object {
    private string MESSAGE;
    private IReference myReference;
    private IDelegate myDelegate;
    private ISubstitution mySubstitution;
    private string myMessage;
    public IReference Reference { get; }
    public IDelegate Delegate { get; }
    public ISubstitution Substitution { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public IncorrectSignatureInDelegateCreationError(IReference reference, IDelegate delegate, ISubstitution substitution);
    public IReference get_Reference();
    public IDelegate get_Delegate();
    public ISubstitution get_Substitution();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.IncorrectSignatureInDelegateCreationMultipleCandidatesError : object {
    private string MESSAGE;
    private IReference myReference;
    private IDelegate myDelegate;
    private ISubstitution mySubstitution;
    private string myMessage;
    public IReference Reference { get; }
    public IDelegate Delegate { get; }
    public ISubstitution Substitution { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public IncorrectSignatureInDelegateCreationMultipleCandidatesError(IReference reference, IDelegate delegate, ISubstitution substitution);
    public IReference get_Reference();
    public IDelegate get_Delegate();
    public ISubstitution get_Substitution();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("RedundantAssignment", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.InitializerNotUsedWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private ILocalVariableDeclaration myDeclaration;
    public ILocalVariableDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public InitializerNotUsedWarning(ILocalVariableDeclaration declaration);
    public ILocalVariableDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.InstanceExpressionInStaticContextError : object {
    private string MESSAGE;
    private IInstanceExpression myExpression;
    private string myMessage;
    public IInstanceExpression Expression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public InstanceExpressionInStaticContextError(IInstanceExpression expression);
    public IInstanceExpression get_Expression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.InterfaceCannotInheritNestedError : object {
    private string MESSAGE;
    private IInterfaceInheritsClause myElement;
    private IUserDeclaredTypeUsage myTypeUsage;
    private ITypeElement myOuterInterface;
    private string myMessage;
    public IInterfaceInheritsClause Element { get; }
    public IUserDeclaredTypeUsage TypeUsage { get; }
    public ITypeElement OuterInterface { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public InterfaceCannotInheritNestedError(IInterfaceInheritsClause element, IUserDeclaredTypeUsage typeUsage, ITypeElement outerInterface);
    public IInterfaceInheritsClause get_Element();
    public IUserDeclaredTypeUsage get_TypeUsage();
    public ITypeElement get_OuterInterface();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.InterfaceInheritsKeywordWithNotInterfaceError : object {
    private string MESSAGE;
    private IInterfaceInheritsClause myElement;
    private IDeclaredTypeUsage myTypeUsage;
    public IInterfaceInheritsClause Element { get; }
    public IDeclaredTypeUsage TypeUsage { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public InterfaceInheritsKeywordWithNotInterfaceError(IInterfaceInheritsClause element, IDeclaredTypeUsage typeUsage);
    public IInterfaceInheritsClause get_Element();
    public IDeclaredTypeUsage get_TypeUsage();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.InterfaceNotInImplementsListError : object {
    private string MESSAGE;
    private IVBTypeMemberDeclaration myDeclaration;
    private IInterfaceMemberSpecifier myImplementsSpecifier;
    private IDeclaredType myInterfaceType;
    private string myMessage;
    public IVBTypeMemberDeclaration Declaration { get; }
    public IInterfaceMemberSpecifier ImplementsSpecifier { get; }
    public IDeclaredType InterfaceType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public InterfaceNotInImplementsListError(IVBTypeMemberDeclaration declaration, IInterfaceMemberSpecifier implementsSpecifier, IDeclaredType interfaceType);
    public IVBTypeMemberDeclaration get_Declaration();
    public IInterfaceMemberSpecifier get_ImplementsSpecifier();
    public IDeclaredType get_InterfaceType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.InvalidCastError : object {
    private string MESSAGE;
    private ICastExpression myExpression;
    private ITypeUsage myTypeUsage;
    private IExpressionType myExpressionType;
    private IType myCastType;
    private string myMessage;
    public ICastExpression Expression { get; }
    public ITypeUsage TypeUsage { get; }
    public IExpressionType ExpressionType { get; }
    public IType CastType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public InvalidCastError(ICastExpression expression, ITypeUsage typeUsage, IExpressionType expressionType, IType castType);
    public ICastExpression get_Expression();
    public ITypeUsage get_TypeUsage();
    public IExpressionType get_ExpressionType();
    public IType get_CastType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.InvalidDigitSeparatorError : object {
    private string MESSAGE;
    private IVBLiteralExpression myLiteralExpression;
    private TextRange myInvalidSeparatorsRange;
    public IVBLiteralExpression LiteralExpression { get; }
    public TextRange InvalidSeparatorsRange { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public InvalidDigitSeparatorError(IVBLiteralExpression literalExpression, TextRange invalidSeparatorsRange);
    public IVBLiteralExpression get_LiteralExpression();
    public TextRange get_InvalidSeparatorsRange();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.InvalidExpressionStatementError : object {
    private string MESSAGE;
    private IVBExpression myExpression;
    private IVBExpression myStatementExpression;
    public IVBExpression Expression { get; }
    public IVBExpression StatementExpression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public InvalidExpressionStatementError(IVBExpression expression, IVBExpression statementExpression);
    public IVBExpression get_Expression();
    public IVBExpression get_StatementExpression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.InvalidInvocationStatementExpressionError : object {
    private string MESSAGE;
    private IVBExpression myExpression;
    private IVBExpression myStatementExpression;
    public IVBExpression Expression { get; }
    public IVBExpression StatementExpression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public InvalidInvocationStatementExpressionError(IVBExpression expression, IVBExpression statementExpression);
    public IVBExpression get_Expression();
    public IVBExpression get_StatementExpression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.InvalidInvocationStatementStartExpressionError : object {
    private string MESSAGE;
    private IVBExpression myExpression;
    private IVBExpression myStatementExpression;
    public IVBExpression Expression { get; }
    public IVBExpression StatementExpression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public InvalidInvocationStatementStartExpressionError(IVBExpression expression, IVBExpression statementExpression);
    public IVBExpression get_Expression();
    public IVBExpression get_StatementExpression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.InvalidModifierAndAccessRightCombinationError : object {
    private string MESSAGE;
    private IVBModifiersOwnerDeclaration myDeclaration;
    private TokenNodeType myModifier;
    private string myMessage;
    public IVBModifiersOwnerDeclaration Declaration { get; }
    public TokenNodeType Modifier { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public InvalidModifierAndAccessRightCombinationError(IVBModifiersOwnerDeclaration declaration, TokenNodeType modifier);
    public IVBModifiersOwnerDeclaration get_Declaration();
    public TokenNodeType get_Modifier();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("InvokeAsExtensionMethod", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.InvokeAsExtensionMethodWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IIndexExpression myIndexExpression;
    private IReference myMethodReference;
    public IIndexExpression IndexExpression { get; }
    public IReference MethodReference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public InvokeAsExtensionMethodWarning(IIndexExpression indexExpression, IReference methodReference);
    public IIndexExpression get_IndexExpression();
    public IReference get_MethodReference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.IsExpressionOperandMustBeReferenceTypeError : object {
    private string MESSAGE;
    private IVBExpression myExpression;
    public IVBExpression Expression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public IsExpressionOperandMustBeReferenceTypeError(IVBExpression expression);
    public IVBExpression get_Expression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.IteratorIsNotValidOnAutoImplementedPropertyError : object {
    private string MESSAGE;
    private IModifiersList myModifiersList;
    private ITokenNode myTokenNode;
    public IModifiersList ModifiersList { get; }
    public ITokenNode TokenNode { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public IteratorIsNotValidOnAutoImplementedPropertyError(IModifiersList modifiersList, ITokenNode tokenNode);
    public IModifiersList get_ModifiersList();
    public ITokenNode get_TokenNode();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.IteratorMethodCannotHaveByRefParametersError : object {
    private string MESSAGE;
    private IParameter myParameter;
    private string myName;
    private string myMessage;
    public IParameter Parameter { get; }
    public string Name { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public IteratorMethodCannotHaveByRefParametersError(IParameter parameter, string name);
    public IParameter get_Parameter();
    public string get_Name();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("RedundantIteratorKeyword", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.IteratorMethodWithoutYieldWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IVBDeclaration myDeclaration;
    public IVBDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public IteratorMethodWithoutYieldWarning(IVBDeclaration declaration);
    public IVBDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.IteratorModifierIsNotValidOnThisItemError : object {
    private string MESSAGE;
    private IModifiersList myModifiersList;
    private ITokenNode myTokenNode;
    public IModifiersList ModifiersList { get; }
    public ITokenNode TokenNode { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public IteratorModifierIsNotValidOnThisItemError(IModifiersList modifiersList, ITokenNode tokenNode);
    public IModifiersList get_ModifiersList();
    public ITokenNode get_TokenNode();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("IteratorNeverReturns", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.IteratorNeverReturnsWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private ITreeNode myEndDeclaration;
    public ITreeNode EndDeclaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public IteratorNeverReturnsWarning(ITreeNode endDeclaration);
    public ITreeNode get_EndDeclaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.JumpFromFinallyError : object {
    private string MESSAGE;
    private ITreeNode myNode;
    public ITreeNode Node { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public JumpFromFinallyError(ITreeNode node);
    public ITreeNode get_Node();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.LateBoundExtensionMethodsError : object {
    private string MESSAGE;
    private IReference myReference;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public LateBoundExtensionMethodsError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.LateBoundThroughtInterfaceError : object {
    private string MESSAGE;
    private IReference myReference;
    private string myMessage;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public LateBoundThroughtInterfaceError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("LocalVariableHidesMember", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.LocalVariableHidesMemberWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IDeclaration myDeclaration;
    private ITypeMember myHiddenMember;
    private string myMessage;
    public IDeclaration Declaration { get; }
    public ITypeMember HiddenMember { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public LocalVariableHidesMemberWarning(IDeclaration declaration, ITypeMember hiddenMember);
    public IDeclaration get_Declaration();
    public ITypeMember get_HiddenMember();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("LongLiteralEndingLowerL", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.LongLiteralEndingLowerLWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IVBLiteralExpression myLiteralExpression;
    public IVBLiteralExpression LiteralExpression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public LongLiteralEndingLowerLWarning(IVBLiteralExpression literalExpression);
    public IVBLiteralExpression get_LiteralExpression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.MemberIsReadonlyError : object {
    private string MESSAGE;
    private IReference myReference;
    private IDeclaredElement myElement;
    private string myMessage;
    public IReference Reference { get; }
    public IDeclaredElement Element { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public MemberIsReadonlyError(IReference reference, IDeclaredElement element);
    public IReference get_Reference();
    public IDeclaredElement get_Element();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.MemberIsSharedError : object {
    private string MESSAGE;
    private IReference myReference;
    private string myMessage;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public MemberIsSharedError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.MethodDiffersOnlyByOptionalParamerterError : object {
    private string MESSAGE;
    private IVBDeclaration myDeclaration;
    private ITypeElement myContainingType;
    private string myMessage;
    public IVBDeclaration Declaration { get; }
    public ITypeElement ContainingType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public MethodDiffersOnlyByOptionalParamerterError(IVBDeclaration declaration, ITypeElement containingType);
    public IVBDeclaration get_Declaration();
    public ITypeElement get_ContainingType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.MethodExpectedError : object {
    private string MESSAGE;
    private IReference myReference;
    private string myMessage;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public MethodExpectedError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.MethodExpectedMultipleCandidatesError : object {
    private string MESSAGE;
    private IReference myReference;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public MethodExpectedMultipleCandidatesError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("FunctionNeverReturns", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.MethodNeverReturnsWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private ITreeNode myEndDeclaration;
    public ITreeNode EndDeclaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public MethodNeverReturnsWarning(ITreeNode endDeclaration);
    public ITreeNode get_EndDeclaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.MethodTypeArgumentsUnderNameofError : object {
    private string MESSAGE;
    private IReferenceExpression myReferenceExpression;
    public IReferenceExpression ReferenceExpression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public MethodTypeArgumentsUnderNameofError(IReferenceExpression referenceExpression);
    public IReferenceExpression get_ReferenceExpression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.MidStatementArgumentIsNotVariableError : object {
    private string MESSAGE;
    private IVBArgument myFirstArgument;
    public IVBArgument FirstArgument { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public MidStatementArgumentIsNotVariableError(IVBArgument firstArgument);
    public IVBArgument get_FirstArgument();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.MissingMemberImplementation2Error : object {
    private string MESSAGE;
    private IClassLikeDeclaration myDeclaration;
    private IDeclaredTypeUsage myTypeUsage;
    private IList`1<OverridableMemberInstance> myMissingMembers;
    private string myMessage;
    public IClassLikeDeclaration Declaration { get; }
    public IDeclaredTypeUsage TypeUsage { get; }
    public IList`1<OverridableMemberInstance> MissingMembers { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public MissingMemberImplementation2Error(IClassLikeDeclaration declaration, IDeclaredTypeUsage typeUsage, IList`1<OverridableMemberInstance> missingMembers);
    public IClassLikeDeclaration get_Declaration();
    public IDeclaredTypeUsage get_TypeUsage();
    public IList`1<OverridableMemberInstance> get_MissingMembers();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.MissingMemberImplementationError : object {
    private string MESSAGE;
    private IClassLikeDeclaration myDeclaration;
    private IList`1<OverridableMemberInstance> myMissingMembers;
    private string myMessage;
    public IClassLikeDeclaration Declaration { get; }
    public IList`1<OverridableMemberInstance> MissingMembers { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public MissingMemberImplementationError(IClassLikeDeclaration declaration, IList`1<OverridableMemberInstance> missingMembers);
    public IClassLikeDeclaration get_Declaration();
    public IList`1<OverridableMemberInstance> get_MissingMembers();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.MissingPartialDeclarationError : object {
    private string MESSAGE;
    private IClassLikeDeclaration myDeclaration;
    private string myMessage;
    public IClassLikeDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public MissingPartialDeclarationError(IClassLikeDeclaration declaration);
    public IClassLikeDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("RedundantAssignment", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ModifiedValueNotUsedWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private ITreeNode myElement;
    public ITreeNode Element { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ModifiedValueNotUsedWarning(ITreeNode element);
    public ITreeNode get_Element();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.MoreApplicableNotFoundError : object {
    private string MESSAGE;
    private IReference myReference;
    private string myMessage;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public MoreApplicableNotFoundError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.MoreSpecificNotFoundError : object {
    private string MESSAGE;
    private IReference myReference;
    private string myMessage;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public MoreSpecificNotFoundError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.MultilineLambdaToExpressionTreeError : object {
    private string MESSAGE;
    private ILambdaExpression myLambdaExpression;
    public ILambdaExpression LambdaExpression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public MultilineLambdaToExpressionTreeError(ILambdaExpression lambdaExpression);
    public ILambdaExpression get_LambdaExpression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.MultipleAccessRights2Error : object {
    private string MESSAGE;
    private IReference myReference;
    private string myMessage;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public MultipleAccessRights2Error(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.MultipleAccessRightsError : object {
    private string MESSAGE;
    private IReference myReference;
    private string myMessage;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public MultipleAccessRightsError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC42309", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.MultipleCandidatesInDocCommentWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IReference myReference;
    private string myMessage;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public MultipleCandidatesInDocCommentWarning(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.MultipleInterfaceImplementationError : object {
    private string MESSAGE;
    private IVBTypeMemberDeclaration myDeclaration;
    private IInterfaceMemberSpecifier myImplementsSpecifier;
    private OverridableMemberInstance myInterfaceMember;
    private string myMessage;
    public IVBTypeMemberDeclaration Declaration { get; }
    public IInterfaceMemberSpecifier ImplementsSpecifier { get; }
    public OverridableMemberInstance InterfaceMember { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public MultipleInterfaceImplementationError(IVBTypeMemberDeclaration declaration, IInterfaceMemberSpecifier implementsSpecifier, OverridableMemberInstance interfaceMember);
    public IVBTypeMemberDeclaration get_Declaration();
    public IInterfaceMemberSpecifier get_ImplementsSpecifier();
    public OverridableMemberInstance get_InterfaceMember();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("MultipleNullableAttributesUsage", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.MultipleNullableAttributesUsageWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IDeclaration myDeclaration;
    public IDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public MultipleNullableAttributesUsageWarning(IDeclaration declaration);
    public IDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.MultipleOverridesError : object {
    private string MESSAGE;
    private IVBTypeMemberDeclaration myDeclaration;
    private IList`1<TypeMemberInstance> myOverriddenMembers;
    private string myMessage;
    public IVBTypeMemberDeclaration Declaration { get; }
    public IList`1<TypeMemberInstance> OverriddenMembers { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public MultipleOverridesError(IVBTypeMemberDeclaration declaration, IList`1<TypeMemberInstance> overriddenMembers);
    public IVBTypeMemberDeclaration get_Declaration();
    public IList`1<TypeMemberInstance> get_OverriddenMembers();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.MultipleResolveCandidatesError : object {
    private string MESSAGE;
    private string myType;
    private IReference myReference;
    private string myMessage;
    public string Type { get; }
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public MultipleResolveCandidatesError(string type, IReference reference);
    public string get_Type();
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.NamespaceExpectedError : object {
    private string MESSAGE;
    private IDeclaredElement myDeclaredElement;
    private IReference myReference;
    private string myMessage;
    public IDeclaredElement DeclaredElement { get; }
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NamespaceExpectedError(IDeclaredElement declaredElement, IReference reference);
    public IDeclaredElement get_DeclaredElement();
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.NamespaceExpectedNoCandidateError : object {
    private string MESSAGE;
    private IReference myReference;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NamespaceExpectedNoCandidateError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.NegativeArrayCreationParameterError : object {
    private string MESSAGE;
    private IVBExpression myExpression;
    public IVBExpression Expression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NegativeArrayCreationParameterError(IVBExpression expression);
    public IVBExpression get_Expression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.NoDefaultConstructorInBaseClassError : object {
    private string MESSAGE;
    private IClassDeclaration myClassDeclaration;
    private IClass myBaseClass;
    private string myMessage;
    public IClassDeclaration ClassDeclaration { get; }
    public IClass BaseClass { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NoDefaultConstructorInBaseClassError(IClassDeclaration classDeclaration, IClass baseClass);
    public IClassDeclaration get_ClassDeclaration();
    public IClass get_BaseClass();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.NoMatchingInInterfaceError : object {
    private string MESSAGE;
    private IReference myReference;
    private IInterface myInterface;
    private IDeclaredElement myDeclarationElement;
    private IDeclaredElement myInterfaceElement;
    private string myMessage;
    public IReference Reference { get; }
    public IInterface Interface { get; }
    public IDeclaredElement DeclarationElement { get; }
    public IDeclaredElement InterfaceElement { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NoMatchingInInterfaceError(IReference reference, IInterface interface, IDeclaredElement declarationElement, IDeclaredElement interfaceElement);
    public IReference get_Reference();
    public IInterface get_Interface();
    public IDeclaredElement get_DeclarationElement();
    public IDeclaredElement get_InterfaceElement();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.NoMatchingInInterfaceMultipleCandidatesError : object {
    private string MESSAGE;
    private IReference myReference;
    private IInterface myInterface;
    private IDeclaredElement myDeclarationElement;
    private string myMessage;
    public IReference Reference { get; }
    public IInterface Interface { get; }
    public IDeclaredElement DeclarationElement { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NoMatchingInInterfaceMultipleCandidatesError(IReference reference, IInterface interface, IDeclaredElement declarationElement);
    public IReference get_Reference();
    public IInterface get_Interface();
    public IDeclaredElement get_DeclarationElement();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NonReadonlyMemberInGetHashCode", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.NonReadonlyFieldInGetHashCodeWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IReferenceExpression myReferenceExpression;
    private IField myField;
    public IReferenceExpression ReferenceExpression { get; }
    public IField Field { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NonReadonlyFieldInGetHashCodeWarning(IReferenceExpression referenceExpression, IField field);
    public IReferenceExpression get_ReferenceExpression();
    public IField get_Field();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.NonSharedMethodWithSharedHandlesVariableError : object {
    private string MESSAGE;
    private IReference myReference;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NonSharedMethodWithSharedHandlesVariableError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.NonStaticElementInStaticContextError : object {
    private string MESSAGE;
    private IReference myReference;
    private string myMessage;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NonStaticElementInStaticContextError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("PossibleMultipleWriteAccessInDoubleCheckLocking", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.NonVolatileFieldInDoubleCheckLockingWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IReferenceExpression myReferenceExpression;
    public IReferenceExpression ReferenceExpression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NonVolatileFieldInDoubleCheckLockingWarning(IReferenceExpression referenceExpression);
    public IReferenceExpression get_ReferenceExpression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NotAssignedOutParameter", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.NotAssignedOutParameterWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IDeclaredElement[] myVariables;
    private ITreeNode myExitElement;
    private string myMessage;
    private static string ourVariableFormat;
    public IDeclaredElement[] Variables { get; }
    public ITreeNode ExitElement { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NotAssignedOutParameterWarning(IDeclaredElement[] variables, ITreeNode exitElement);
    public IDeclaredElement[] get_Variables();
    public ITreeNode get_ExitElement();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    private string GetVariableString(IDeclaredElement element);
    private string GetMessage();
    public sealed virtual override bool IsValid();
    [CompilerGeneratedAttribute]
private string _Lambda$__17-0(IDeclaredElement v);
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.NothingToOverrideError : object {
    private string MESSAGE;
    private IVBTypeMemberDeclaration myDeclaration;
    private string myMessage;
    public IVBTypeMemberDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NothingToOverrideError(IVBTypeMemberDeclaration declaration);
    public IVBTypeMemberDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.NotResolvedError : object {
    private string MESSAGE;
    private IReference myReference;
    private string myMessage;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NotResolvedError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.NotResolvedForEachPatternError : object {
    private string MESSAGE;
    private IForEachStatement myStatement;
    private IType myDeclaredType;
    private string myMessage;
    public IForEachStatement Statement { get; }
    public IType DeclaredType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NotResolvedForEachPatternError(IForEachStatement statement, IType declaredType);
    public IForEachStatement get_Statement();
    public IType get_DeclaredType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC40056", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.NotResolvedImportWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IImportClause myImportClause;
    private IReferenceName myReferenceName;
    private string myMessage;
    public IImportClause ImportClause { get; }
    public IReferenceName ReferenceName { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NotResolvedImportWarning(IImportClause importClause, IReferenceName referenceName);
    public IImportClause get_ImportClause();
    public IReferenceName get_ReferenceName();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.NotResolvedInAsyncError : object {
    private string MESSAGE;
    private IReference myReference;
    private IDeclaredType myDeclaredType;
    private string myMessage;
    public IReference Reference { get; }
    public IDeclaredType DeclaredType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NotResolvedInAsyncError(IReference reference, IDeclaredType declaredType);
    public IReference get_Reference();
    public IDeclaredType get_DeclaredType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC42309", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.NotResolvedInDocCommentWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IReference myReference;
    private string myMessage;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NotResolvedInDocCommentWarning(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NotResolvedInText", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.NotResolvedInTextWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IReference myReference;
    private string myMessage;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NotResolvedInTextWarning(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.NotValidError : object {
    private string MESSAGE;
    private IReference myReference;
    private string myMessage;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NotValidError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.NoTypeArgumentsInUsageError : object {
    private string MESSAGE;
    private IReference myReference;
    private int myParametersCount;
    private string myMessage;
    public IReference Reference { get; }
    public int ParametersCount { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NoTypeArgumentsInUsageError(IReference reference, int parametersCount);
    public IReference get_Reference();
    public int get_ParametersCount();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.NoTypeParametersInCandidateError : object {
    private string MESSAGE;
    private IReference myReference;
    private ITypeArgumentList myTypeArgumentList;
    private string myMessage;
    public IReference Reference { get; }
    public ITypeArgumentList TypeArgumentList { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NoTypeParametersInCandidateError(IReference reference, ITypeArgumentList typeArgumentList);
    public IReference get_Reference();
    public ITypeArgumentList get_TypeArgumentList();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ObsoleteElementError : object {
    private string MESSAGE;
    private IReference myReference;
    private string myObsoleteMessage;
    private string myMessage;
    public IReference Reference { get; }
    public string ObsoleteMessage { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ObsoleteElementError(IReference reference, string obsoleteMessage);
    public IReference get_Reference();
    public string get_ObsoleteMessage();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC40000", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ObsoleteElementWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IReference myReference;
    private string myObsoleteMessage;
    private string myMessage;
    public IReference Reference { get; }
    public string ObsoleteMessage { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ObsoleteElementWarning(IReference reference, string obsoleteMessage);
    public IReference get_Reference();
    public string get_ObsoleteMessage();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC40008", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ObsoleteElementWithoutMessageWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IReference myReference;
    private string myObsoleteMessage;
    private string myMessage;
    public IReference Reference { get; }
    public string ObsoleteMessage { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ObsoleteElementWithoutMessageWarning(IReference reference, string obsoleteMessage);
    public IReference get_Reference();
    public string get_ObsoleteMessage();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("OperatorIsCanBeUsed", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.OperatorIsCanBeUsedWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IVBExpression myExpression;
    private IDeclaredType myType;
    private IVBExpression myQualifier;
    public IVBExpression Expression { get; }
    public IDeclaredType Type { get; }
    public IVBExpression Qualifier { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public OperatorIsCanBeUsedWarning(IVBExpression expression, IDeclaredType type, IVBExpression qualifier);
    public IVBExpression get_Expression();
    public IDeclaredType get_Type();
    public IVBExpression get_Qualifier();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.OverrideOrImplementDiffersInOptionalError : object {
    private string MESSAGE;
    private IOverridableMember myMember;
    private IVBTypeMemberDeclaration myMemberDeclaration;
    private IOverridableMember mySuperMember;
    private IParameter myConflictParameter;
    private string myMessage;
    public IOverridableMember Member { get; }
    public IVBTypeMemberDeclaration MemberDeclaration { get; }
    public IOverridableMember SuperMember { get; }
    public IParameter ConflictParameter { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public OverrideOrImplementDiffersInOptionalError(IOverridableMember member, IVBTypeMemberDeclaration memberDeclaration, IOverridableMember superMember, IParameter conflictParameter);
    public IOverridableMember get_Member();
    public IVBTypeMemberDeclaration get_MemberDeclaration();
    public IOverridableMember get_SuperMember();
    public IParameter get_ConflictParameter();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.OverrideOrImplementDiffersInOptionalValueError : object {
    private string MESSAGE;
    private IOverridableMember myMember;
    private IVBTypeMemberDeclaration myMemberDeclaration;
    private IOverridableMember mySuperMember;
    private IParameter myConflictParameter;
    private string myMessage;
    public IOverridableMember Member { get; }
    public IVBTypeMemberDeclaration MemberDeclaration { get; }
    public IOverridableMember SuperMember { get; }
    public IParameter ConflictParameter { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public OverrideOrImplementDiffersInOptionalValueError(IOverridableMember member, IVBTypeMemberDeclaration memberDeclaration, IOverridableMember superMember, IParameter conflictParameter);
    public IOverridableMember get_Member();
    public IVBTypeMemberDeclaration get_MemberDeclaration();
    public IOverridableMember get_SuperMember();
    public IParameter get_ConflictParameter();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.OverrideOrImplementDiffersInParamArrayError : object {
    private string MESSAGE;
    private IOverridableMember myMember;
    private IVBTypeMemberDeclaration myMemberDeclaration;
    private IOverridableMember mySuperMember;
    private IParameter myConflictParameter;
    private string myMessage;
    public IOverridableMember Member { get; }
    public IVBTypeMemberDeclaration MemberDeclaration { get; }
    public IOverridableMember SuperMember { get; }
    public IParameter ConflictParameter { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public OverrideOrImplementDiffersInParamArrayError(IOverridableMember member, IVBTypeMemberDeclaration memberDeclaration, IOverridableMember superMember, IParameter conflictParameter);
    public IOverridableMember get_Member();
    public IVBTypeMemberDeclaration get_MemberDeclaration();
    public IOverridableMember get_SuperMember();
    public IParameter get_ConflictParameter();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("ParameterHidesMember", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ParameterHidesMemberWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IDeclaration myDeclaration;
    private ITypeMember myHiddenMember;
    private string myMessage;
    public IDeclaration Declaration { get; }
    public ITypeMember HiddenMember { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ParameterHidesMemberWarning(IDeclaration declaration, ITypeMember hiddenMember);
    public IDeclaration get_Declaration();
    public ITypeMember get_HiddenMember();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("RedundantAssignment", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ParameterValueIsOverriddenWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IParameterDeclaration myDeclaration;
    public IParameterDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ParameterValueIsOverriddenWarning(IParameterDeclaration declaration);
    public IParameterDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ParamsButNotArrayError : object {
    private string MESSAGE;
    private IVBParameterDeclaration myParameter;
    public IVBParameterDeclaration Parameter { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ParamsButNotArrayError(IVBParameterDeclaration parameter);
    public IVBParameterDeclaration get_Parameter();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ParamsMultiDimArrayError : object {
    private string MESSAGE;
    private IVBParameterDeclaration myParameter;
    public IVBParameterDeclaration Parameter { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ParamsMultiDimArrayError(IVBParameterDeclaration parameter);
    public IVBParameterDeclaration get_Parameter();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ParamsMustBeLastError : object {
    private string MESSAGE;
    private IVBParameterDeclaration myParameter;
    public IVBParameterDeclaration Parameter { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ParamsMustBeLastError(IVBParameterDeclaration parameter);
    public IVBParameterDeclaration get_Parameter();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ParamsParameterInOperatorError : object {
    private string MESSAGE;
    private IVBParameterDeclaration myParameter;
    public IVBParameterDeclaration Parameter { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ParamsParameterInOperatorError(IVBParameterDeclaration parameter);
    public IVBParameterDeclaration get_Parameter();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ParamsWithDefaultValueError : object {
    private string MESSAGE;
    private IVBParameterDeclaration myParameterDeclaration;
    public IVBParameterDeclaration ParameterDeclaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ParamsWithDefaultValueError(IVBParameterDeclaration parameterDeclaration);
    public IVBParameterDeclaration get_ParameterDeclaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.PartialArrayBoundsSpecificationError : object {
    private string MESSAGE;
    private IArrayModifier myArrayModifier;
    public IArrayModifier ArrayModifier { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public PartialArrayBoundsSpecificationError(IArrayModifier arrayModifier);
    public IArrayModifier get_ArrayModifier();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.PartialDeclarationCannotBeAsyncError : object {
    private string MESSAGE;
    private IModifiersList myModifiersList;
    private ITokenNode myAsyncNode;
    public IModifiersList ModifiersList { get; }
    public ITokenNode AsyncNode { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public PartialDeclarationCannotBeAsyncError(IModifiersList modifiersList, ITokenNode asyncNode);
    public IModifiersList get_ModifiersList();
    public ITokenNode get_AsyncNode();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("PossibleStructMemberModificationOfNonVariableStruct", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.PossibleAssignmentToReadonlyFieldWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IReferenceExpression myExpression;
    public IReferenceExpression Expression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public PossibleAssignmentToReadonlyFieldWarning(IReferenceExpression expression);
    public IReferenceExpression get_Expression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("PossibleIntendedRethrow", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.PossibleIntendedRethrowWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IThrowStatement myStatement;
    public IThrowStatement Statement { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public PossibleIntendedRethrowWarning(IThrowStatement statement);
    public IThrowStatement get_Statement();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("PossibleMultipleEnumeration", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.PossibleMultipleEnumerationWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IExpression myUsage;
    private IEnumerable`1<IVBExpression> myAllUsages;
    public IExpression Usage { get; }
    public IEnumerable`1<IVBExpression> AllUsages { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public PossibleMultipleEnumerationWarning(IExpression usage, IEnumerable`1<IVBExpression> allUsages);
    public IExpression get_Usage();
    public IEnumerable`1<IVBExpression> get_AllUsages();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("PossibleMultipleWriteAccessInDoubleCheckLocking", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.PossibleMultipleWriteAccessInDoubleCheckLockingWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IReferenceExpression myReferenceExpression;
    public IReferenceExpression ReferenceExpression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public PossibleMultipleWriteAccessInDoubleCheckLockingWarning(IReferenceExpression referenceExpression);
    public IReferenceExpression get_ReferenceExpression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("PossibleWriteToMe", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.PossibleWriteToMeWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IInstanceExpression myExpression;
    public IInstanceExpression Expression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public PossibleWriteToMeWarning(IInstanceExpression expression);
    public IInstanceExpression get_Expression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ProblemInResolveError : object {
    private string MESSAGE;
    private IReference myReference;
    private ResolveErrorType myErrorType;
    private string myMessage;
    public IReference Reference { get; }
    public ResolveErrorType ErrorType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ProblemInResolveError(IReference reference, ResolveErrorType errorType);
    public IReference get_Reference();
    public ResolveErrorType get_ErrorType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.PropertyCanHaveOnlySetterAndGetterError : object {
    private string MESSAGE;
    private IAccessorDeclaration myAccessorDeclaration;
    public IAccessorDeclaration AccessorDeclaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public PropertyCanHaveOnlySetterAndGetterError(IAccessorDeclaration accessorDeclaration);
    public IAccessorDeclaration get_AccessorDeclaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.PropertyMustHaveSetterAndGetterError : object {
    private string MESSAGE;
    private IPropertyDeclaration myPropertyDeclaration;
    public IPropertyDeclaration PropertyDeclaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public PropertyMustHaveSetterAndGetterError(IPropertyDeclaration propertyDeclaration);
    public IPropertyDeclaration get_PropertyDeclaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.PropertyShouldBeParameterlessError : object {
    private string MESSAGE;
    private IReference myReference;
    private string myMessage;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public PropertyShouldBeParameterlessError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.PropertyWithoutSetterError : object {
    private string MESSAGE;
    private IReference myReference;
    private IProperty myProperty;
    public IReference Reference { get; }
    public IProperty Property { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public PropertyWithoutSetterError(IReference reference, IProperty property);
    public IReference get_Reference();
    public IProperty get_Property();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("PureAttributeOnVoidMethod", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.PureAttributeOnVoidMethodWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IAttribute myAttribute;
    public IAttribute Attribute { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public PureAttributeOnVoidMethodWarning(IAttribute attribute);
    public IAttribute get_Attribute();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.QueryTypeInferenceError : object {
    private string MESSAGE;
    private IReference myReference;
    private IMethod myMethod;
    private string myMessage;
    public IReference Reference { get; }
    public IMethod Method { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public QueryTypeInferenceError(IReference Reference, IMethod method);
    public IReference get_Reference();
    public IMethod get_Method();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.QueryTypeInferenceMultipleCandidatesError : object {
    private string MESSAGE;
    private IReference myReference;
    private string myMessage;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public QueryTypeInferenceMultipleCandidatesError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("ReadAccessInDoubleCheckLocking", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ReadAccessInDoubleCheckLockingWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IReferenceExpression myReferenceExpression;
    public IReferenceExpression ReferenceExpression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ReadAccessInDoubleCheckLockingWarning(IReferenceExpression referenceExpression);
    public IReferenceExpression get_ReferenceExpression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ReadAccessToPropertyWithoutGetterError : object {
    private string MESSAGE;
    private IReference myReference;
    private IProperty myProperty;
    private string myMessage;
    public IReference Reference { get; }
    public IProperty Property { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ReadAccessToPropertyWithoutGetterError(IReference reference, IProperty property);
    public IReference get_Reference();
    public IProperty get_Property();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC42104", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ReadBeforeWriteWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private ITreeNode myAccessExpression;
    private IDeclaredElement myDeclaredElement;
    private string myMessage;
    public ITreeNode AccessExpression { get; }
    public IDeclaredElement DeclaredElement { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ReadBeforeWriteWarning(ITreeNode accessExpression, IDeclaredElement declaredElement);
    public ITreeNode get_AccessExpression();
    public IDeclaredElement get_DeclaredElement();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ReadonlyAssignmentTargetError : object {
    private string MESSAGE;
    private IVBExpression myDestination;
    private IDeclaredElement myElement;
    private string myMessage;
    public IVBExpression Destination { get; }
    public IDeclaredElement Element { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ReadonlyAssignmentTargetError(IVBExpression destination, IDeclaredElement element);
    public IVBExpression get_Destination();
    public IDeclaredElement get_Element();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ReadOnlyPropertyWithoutGetterError : object {
    private string MESSAGE;
    private IPropertyDeclaration myPropertyDeclaration;
    public IPropertyDeclaration PropertyDeclaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ReadOnlyPropertyWithoutGetterError(IPropertyDeclaration propertyDeclaration);
    public IPropertyDeclaration get_PropertyDeclaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ReadOnlyPropertyWithSetterError : object {
    private string MESSAGE;
    private IPropertyDeclaration myPropertyDeclaration;
    private IAccessorDeclaration myAccessorDeclaration;
    public IPropertyDeclaration PropertyDeclaration { get; }
    public IAccessorDeclaration AccessorDeclaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ReadOnlyPropertyWithSetterError(IPropertyDeclaration propertyDeclaration, IAccessorDeclaration accessorDeclaration);
    public IPropertyDeclaration get_PropertyDeclaration();
    public IAccessorDeclaration get_AccessorDeclaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("RedundantArrayLowerBoundSpecification", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.RedundantArrayLowerBoundSpecificationWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IArrayBound myArrayBound;
    public IArrayBound ArrayBound { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public RedundantArrayLowerBoundSpecificationWarning(IArrayBound arrayBound);
    public IArrayBound get_ArrayBound();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("RedundantAttributeParentheses", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.RedundantAttributeParenthesesWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IAttribute myAttribute;
    public IAttribute Attribute { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public RedundantAttributeParenthesesWarning(IAttribute attribute);
    public IAttribute get_Attribute();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("RedundantCallerArgumentExpressionDefaultValue", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.RedundantCallerArgumentExpressionDefaultValueWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IParameter myParameter;
    private IVBArgument myArgument;
    private string myMessage;
    public IParameter Parameter { get; }
    public IVBArgument Argument { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public RedundantCallerArgumentExpressionDefaultValueWarning(IParameter parameter, IVBArgument argument);
    public IParameter get_Parameter();
    public IVBArgument get_Argument();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("RedundantCast", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.RedundantCastWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private ICastExpression myExpression;
    private ITypeUsage myTypeUsage;
    public ICastExpression Expression { get; }
    public ITypeUsage TypeUsage { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public RedundantCastWarning(ICastExpression expression, ITypeUsage typeUsage);
    public ICastExpression get_Expression();
    public ITypeUsage get_TypeUsage();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC42349", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.RedundantDirectCastWithValueTypeWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private ICastExpression myExpression;
    private ITypeUsage myTypeUsage;
    public ICastExpression Expression { get; }
    public ITypeUsage TypeUsage { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public RedundantDirectCastWithValueTypeWarning(ICastExpression expression, ITypeUsage typeUsage);
    public ICastExpression get_Expression();
    public ITypeUsage get_TypeUsage();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("RedundantEmptyCaseElse", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.RedundantEmptyCaseElseWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private ICaseStatement myCaseStatement;
    public ICaseStatement CaseStatement { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public RedundantEmptyCaseElseWarning(ICaseStatement caseStatement);
    public ICaseStatement get_CaseStatement();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("RedundantExplicitArraySize", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.RedundantExplicitArraySizeWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IArrayBound mySizeExpression;
    public IArrayBound SizeExpression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public RedundantExplicitArraySizeWarning(IArrayBound sizeExpression);
    public IArrayBound get_SizeExpression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("RedundantIfStatementThenKeyword", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.RedundantIfStatementThenKeywordWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private ITokenNode myThenToken;
    public ITokenNode ThenToken { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public RedundantIfStatementThenKeywordWarning(ITokenNode thenToken);
    public ITokenNode get_ThenToken();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("RedundantLogicalConditionalExpressionOperand", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.RedundantLogicalConditionalExpressionOperandWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IVBBinaryExpression myConditionalExpression;
    private IExpression myOperand;
    public IVBBinaryExpression ConditionalExpression { get; }
    public IExpression Operand { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public RedundantLogicalConditionalExpressionOperandWarning(IVBBinaryExpression conditionalExpression, IExpression operand);
    public IVBBinaryExpression get_ConditionalExpression();
    public IExpression get_Operand();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("RedundantMeQualifier", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.RedundantMeQualifierWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IVBExpression myQualifier;
    private ITokenNode myDot;
    public IVBExpression Qualifier { get; }
    public ITokenNode Dot { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public RedundantMeQualifierWarning(IVBExpression qualifier, ITokenNode dot);
    public IVBExpression get_Qualifier();
    public ITokenNode get_Dot();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("RedundantMyBaseQualifier", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.RedundantMyBaseQualifierWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IVBExpression myQualifier;
    private ITokenNode myDot;
    public IVBExpression Qualifier { get; }
    public ITokenNode Dot { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public RedundantMyBaseQualifierWarning(IVBExpression qualifier, ITokenNode dot);
    public IVBExpression get_Qualifier();
    public ITokenNode get_Dot();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("RedundantMyClassQualifier", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.RedundantMyClassQualifierWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IVBExpression myQualifier;
    private ITokenNode myDot;
    public IVBExpression Qualifier { get; }
    public ITokenNode Dot { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public RedundantMyClassQualifierWarning(IVBExpression qualifier, ITokenNode dot);
    public IVBExpression get_Qualifier();
    public ITokenNode get_Dot();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("RedundantParentheses", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.RedundantParenthesesWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IParenthesizedExpression myParenthesizedExpression;
    public IParenthesizedExpression ParenthesizedExpression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public RedundantParenthesesWarning(IParenthesizedExpression parenthesizedExpression);
    public IParenthesizedExpression get_ParenthesizedExpression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("RedundantPropertyParentheses", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.RedundantPropertyParenthesesWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IPropertyDeclaration myPropertyDeclaration;
    public IPropertyDeclaration PropertyDeclaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public RedundantPropertyParenthesesWarning(IPropertyDeclaration propertyDeclaration);
    public IPropertyDeclaration get_PropertyDeclaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("RedundantQualifier", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.RedundantQualifierWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private ITreeNode myQualifier;
    private ITokenNode myDot;
    public ITreeNode Qualifier { get; }
    public ITokenNode Dot { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public RedundantQualifierWarning(ITreeNode qualifier, ITokenNode dot);
    public ITreeNode get_Qualifier();
    public ITokenNode get_Dot();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("RedundantSetterValueParameterDeclaration", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.RedundantSetterValueParameterDeclarationWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IAccessorDeclaration mySetterDeclaration;
    public IAccessorDeclaration SetterDeclaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public RedundantSetterValueParameterDeclarationWarning(IAccessorDeclaration setterDeclaration);
    public IAccessorDeclaration get_SetterDeclaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.RefArgumentTypeMismatchError : object {
    private string MESSAGE;
    private IVBArgumentInfo myArgument;
    public IVBArgumentInfo Argument { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public RefArgumentTypeMismatchError(IVBArgumentInfo argument);
    public IVBArgumentInfo get_Argument();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("ReferenceEqualsWithValueType", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ReferenceEqualsWithValueTypeWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IIndexExpression myExpression;
    public IIndexExpression Expression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ReferenceEqualsWithValueTypeWarning(IIndexExpression expression);
    public IIndexExpression get_Expression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[RegisterConfigurableSeverityAttribute("VBWarnings::BC42105,BC42106,BC42107", "", "", "", "CompilerWarnings", "Function doesn't return a reference type value on all code paths", "", "", "", "", "", "4")]
[RegisterConfigurableSeverityAttribute("VBWarnings::BC42353,BC42354,BC42355", "", "", "", "CompilerWarnings", "Function doesn't return a struct value on all code paths", "", "", "", "", "", "4")]
[RegisterConfigurableSeverityAttribute("VBWarnings::BC42309", "", "", "", "CompilerWarnings", "XML comment has a tag with a 'cref' attribute that could not be resolved", "", "", "", "", "", "4")]
[RegisterConfigurableSeverityAttribute("VBWarnings::BC42304", "", "", "", "CompilerWarnings", "Syntax error in XML comment", "", "", "", "", "", "4")]
[RegisterConfigurableSeverityAttribute("VBWarnings::BC40000", "", "", "", "CompilerWarnings", "Use obsolete member", "", "", "", "", "", "4")]
[RegisterConfigurableSeverityAttribute("VBWarnings::BC40008", "", "", "", "CompilerWarnings", "Use obsolete member (without message)", "", "", "", "", "", "4")]
[RegisterConfigurableSeverityAttribute("VBWarnings::BC42380", "", "", "", "CompilerWarnings", "Type is for evaluation purposes only and is subject to change or removal in future updates. Suppress this diagnostic to proceed.", "", "", "", "", "", "4")]
[RegisterConfigurableSeverityAttribute("VBWarnings::BC42025", "", "", "", "CompilerWarnings", "Access of shared member through an instance", "", "", "", "", "", "4")]
[RegisterConfigurableSeverityAttribute("VBWarnings::BC42016", "", "", "", "CompilerWarnings", "Runtime errors might occur when converting X to Y", "", "", "", "", "", "4")]
[RegisterConfigurableSeverityAttribute("VBWarnings::BC42322", "", "", "", "CompilerWarnings", "Runtime errors are likely to occur when converting X to Y", "", "", "", "", "", "4")]
[RegisterConfigurableSeverityAttribute("VBWarnings::BC42104", "", "", "", "CompilerWarnings", "Variable is used before it has been assigned a value", "", "", "", "", "", "4")]
[RegisterConfigurableSeverityAttribute("VBWarnings::BC40056", "", "", "", "CompilerWarnings", "Namespace or type specified in the Imports 'name' doesn't contain any public member or cannot be found", "", "", "", "", "", "4")]
[RegisterConfigurableSeverityAttribute("VBWarnings::BC42349", "", "", "", "CompilerWarnings", "Redundant DirectCast to the equals value type", "", "", "", "", "", "4")]
[RegisterConfigurableSeverityAttribute("VBWarnings::BC42356", "", "", "", "CompilerWarnings", "Async method lacks 'Await' operators", "", "", "", "", "", "4")]
[RegisterConfigurableSeverityAttribute("VBWarnings::BC400005", "", "", "", "CompilerWarnings", "Member shadows an overriable member", "", "", "", "", "", "4")]
[RegisterConfigurableSeverityAttribute("VBWarnings::BC42358", "", "", "", "CompilerWarnings", "Because this call is not awaited, execution of the current method continues before the call is completed. Consider applying the 'Await' operator to the result of the call.", "", "", "", "", "", "4")]
[RegisterConfigurableSeverityAttribute("VBWarnings::BC42504", "", "", "", "CompilerWarnings", "The CallerArgumentExpressionAttribute applied to parameter will have no effect because it's self-referential", "", "", "", "", "", "4")]
[RegisterConfigurableSeverityAttribute("VBWarnings::BC42505", "", "", "", "CompilerWarnings", "The CallerArgumentExpressionAttribute applied to parameter will have no effect. It is applied with an invalid parameter name.", "", "", "", "", "", "4")]
public class JetBrains.ReSharper.Daemon.VB.Errors.RegisterSeverityComponent07C226F76F7220B824E6C403AF73BEF744B1BA5278031E711B9286ADFCE5758D : object {
}
[RegisterConfigurableSeverityAttribute("InactivePreprocessorBranch", "", "", "", "CodeInfo", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "InactivePreprocessorBranch", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "InactivePreprocessorBranch", "4")]
public class JetBrains.ReSharper.Daemon.VB.Errors.RegisterSeverityComponent4E063D989D8CC7D7EBF98E0F20FBC34F9C5C43306F893AFFA27EF118C5FE6013 : object {
}
[RegisterConfigurableSeverityAttribute("UnusedImportClause", "", "", "", "CodeRedundancy", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "UnusedImportClause", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "ImportClauseIsNotUsedInTheFileAndCouldBeSafelyRemoved", "4")]
[RegisterConfigurableSeverityAttribute("VbUnreachableCode", "", "", "", "CodeRedundancy", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "UnreachableCode", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "CodeIsUnreachable", "4")]
[RegisterConfigurableSeverityAttribute("RedundantQualifier", "", "", "", "CodeRedundancy", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "RedundantQualifier", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "QualifierIsRedundant", "4")]
[RegisterConfigurableSeverityAttribute("RedundantMeQualifier", "", "", "", "CodeRedundancy", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "RedundantMeQualifier", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "MeQualifierIsRedundantAndCanBeSafelyRemovedWithoutChangingCodeSemantics", "4")]
[RegisterConfigurableSeverityAttribute("RedundantMyBaseQualifier", "", "", "", "CodeRedundancy", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "RedundantMyBaseQualifier", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "MyBaseQualifierIsRedundantAndCanBeSafelyRemovedWithoutChangingCodeSemantics", "4")]
[RegisterConfigurableSeverityAttribute("RedundantMyClassQualifier", "", "", "", "CodeRedundancy", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "RedundantMyClassQualifier", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "MyClassQualifierIsRedundantAndCanBeSafelyRemovedWithoutChangingCodeSemantics", "4")]
[RegisterConfigurableSeverityAttribute("RedundantArrayLowerBoundSpecification", "", "", "", "CodeRedundancy", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "RedundantArrayLowerBoundSpecification", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "ArrayLowerBoundSpecificationIsRedundant", "4")]
[RegisterConfigurableSeverityAttribute("RedundantEmptyCaseElse", "", "", "", "CodeRedundancy", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "RedundantEmptyCaseElseStatement", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "RedundantEmptyCaseElseStatement", "4")]
[RegisterConfigurableSeverityAttribute("RedundantIteratorKeyword", "", "", "", "CodeRedundancy", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "IteratorFunctionWithoutYieldStatements", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "IteratorFunctionWithoutYieldStatements", "4")]
[RegisterConfigurableSeverityAttribute("UseImplicitByValModifier", "", "", "", "CodeRedundancy", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "UseImplicitByValModifier", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "UseImplicitByValModifierInParameterDeclaration", "2")]
[RegisterConfigurableSeverityAttribute("RedundantPropertyParentheses", "", "", "", "CodeRedundancy", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "ParameterlessPropertyParenthesesAreRedundant", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "ParameterlessPropertyParameterParenthesesAreRedundant", "2")]
[RegisterConfigurableSeverityAttribute("RedundantSetterValueParameterDeclaration", "", "", "", "CodeRedundancy", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "ExplicitvalueParameterDeclarationIsRedundant", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "ExplicitSetAccessorvalueParameterDeclarationIsRedundant", "2")]
[RegisterConfigurableSeverityAttribute("UseImplicitlyTypedVariableEvident", "", "", "", "CodeRedundancy", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "UseImplicitlyTypedVariableDeclarationEvident", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "UseImplicitlyTypedVariableDeclarationWhenVariableTypeIsEvidentFromInitializerExpression", "2")]
[RegisterConfigurableSeverityAttribute("UseImplicitlyTypedVariable", "", "", "", "CodeRedundancy", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "UseImplicitlyTypedVariableDeclaration", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "UseImplicitlyTypedVariableDeclaration", "0")]
[RegisterConfigurableSeverityAttribute("RedundantIfStatementThenKeyword", "", "", "", "CodeRedundancy", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "KeywordThenIsRedundantInMultilineIfStatement", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "KeywordThenIsRedundantInMultilineIfStatement", "0")]
[RegisterConfigurableSeverityAttribute("RedundantParentheses", "", "", "", "CodeRedundancy", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "RemoveRedundantParentheses", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "ParenthesesCanBeSafelyRemovedFromExpressionsWithoutChangingCodeSemantics", "0")]
public class JetBrains.ReSharper.Daemon.VB.Errors.RegisterSeverityComponent55169E8B14C163D70464F09D120D1A2C24C421AC0EA6F5DC812208FDC7F46504 : object {
}
[RegisterConfigurableSeverityAttribute("NotAssignedOutParameter", "", "", "", "CodeSmell", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "outParameterIsNotAssignedUponExit", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "outParameterIsNotAssignedUponExit", "4")]
[RegisterConfigurableSeverityAttribute("PossibleWriteToMe", "", "", "", "CodeSmell", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "PossibleWriteToMe", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "PossibleWriteToMe1", "4")]
[RegisterConfigurableSeverityAttribute("LongLiteralEndingLowerL", "", "", "", "CodeSmell", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "ThelSuffixIsEasilyConfusedWithTheDigit", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "ThelSuffixIsEasilyConfusedWithTheDigitUseLForClarity", "4")]
public class JetBrains.ReSharper.Daemon.VB.Errors.RegisterSeverityComponent648FE7D92368FE7F38FFC1323400A526E62D0E5391BA5F0D229F849F783CCFF6 : object {
}
[RegisterConfigurableSeverityAttribute("VBWarnings::WME006", "", "", "", "CompilerWarnings", "Namespace should be default namespace of this project", "", "", "", "", "", "4")]
public class JetBrains.ReSharper.Daemon.VB.Errors.RegisterSeverityComponentB155B2FF7F929EDA9745043285DDAAAEB47C5A4BF3AB8C79748D6F1F89D5D16E : object {
}
[RegisterConfigurableSeverityAttribute("SimplifyConditionalOperator", "", "", "", "BestPractice", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "SimplifyConditionalOperator", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "ConditionalOperatorContainsTrueOrFalseInResultBranchForExamplepreIfConditionTrueElseBranchIfConditionThenBranchTruePre", "3")]
[RegisterConfigurableSeverityAttribute("SimplifyIIf", "", "", "", "BestPractice", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "SimplifyIIf", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "IIfContainsTrueOrFalseInResultBranchForExamplepreIIfConditionTrueElseBranchIIfConditionThenBranchTruePre", "3")]
[RegisterConfigurableSeverityAttribute("ConvertToVbAutoProperty", "", "", "", "BestPractice", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "ConvertPropertyToAutoProperty", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "ConvertsPropertyDeclarationToVBNETAutoPropertySyntax", "3")]
[RegisterConfigurableSeverityAttribute("ConvertToVbAutoPropertyWhenPossible", "", "", "", "BestPractice", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "ConvertPropertyToAutoPropertyWhenPossible", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "ConvertsPropertyDeclarationToVBNETAutoPropertySyntax", "2")]
[RegisterConfigurableSeverityAttribute("ConvertToVbAutoPropertyWithPrivateSetter", "", "", "", "BestPractice", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "ConvertPropertyToAutoPropertyWithPrivateSetter", "", "JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "ConvertsPropertyDeclarationToVBNETAutoPropertySyntaxWithPrivateSetterDeclared", "2")]
public class JetBrains.ReSharper.Daemon.VB.Errors.RegisterSeverityComponentE95C4DAA7CCD727B3E1458EADDE504A8B8D0C7AFE2DB8828DE8AA8BFFB552514 : object {
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ReturnNoExpressionFromFunctionError : object {
    private string MESSAGE;
    private IReturnStatement myReturnStatement;
    public IReturnStatement ReturnStatement { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ReturnNoExpressionFromFunctionError(IReturnStatement returnStatement);
    public IReturnStatement get_ReturnStatement();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ReturnValueFromAsyncTaskFunctionError : object {
    private string MESSAGE;
    private IReturnStatement myReturnStatement;
    public IReturnStatement ReturnStatement { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ReturnValueFromAsyncTaskFunctionError(IReturnStatement returnStatement);
    public IReturnStatement get_ReturnStatement();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ReturnValueFromIteratorError : object {
    private string MESSAGE;
    private IReturnStatement myReturnStatement;
    public IReturnStatement ReturnStatement { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ReturnValueFromIteratorError(IReturnStatement returnStatement);
    public IReturnStatement get_ReturnStatement();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ReturnValueFromSubError : object {
    private string MESSAGE;
    private IReturnStatement myReturnStatement;
    public IReturnStatement ReturnStatement { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ReturnValueFromSubError(IReturnStatement returnStatement);
    public IReturnStatement get_ReturnStatement();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("ReturnValueOfPureMethodIsNotUsed", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ReturnValueOfPureMethodIsNotUsedWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IInvocationStatement myInvocationStatement;
    private IReference myInvocationReference;
    public IInvocationStatement InvocationStatement { get; }
    public IReference InvocationReference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ReturnValueOfPureMethodIsNotUsedWarning(IInvocationStatement invocationStatement, IReference invocationReference);
    public IInvocationStatement get_InvocationStatement();
    public IReference get_InvocationReference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC400005", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ShadowsOverridableMemberWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IVBTypeMemberDeclaration myDerivedMemberDeclaration;
    private IOverridableMember myBaseMember;
    private string myMessage;
    public IVBTypeMemberDeclaration DerivedMemberDeclaration { get; }
    public IOverridableMember BaseMember { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ShadowsOverridableMemberWarning(IVBTypeMemberDeclaration derivedMemberDeclaration, IOverridableMember baseMember);
    public IVBTypeMemberDeclaration get_DerivedMemberDeclaration();
    public IOverridableMember get_BaseMember();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.SharedMemeberInModuleError : object {
    private string MESSAGE;
    private IVBModifiersOwnerDeclaration myDeclaration;
    public IVBModifiersOwnerDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public SharedMemeberInModuleError(IVBModifiersOwnerDeclaration declaration);
    public IVBModifiersOwnerDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ShouldBeInvocableError : object {
    private string MESSAGE;
    private IReference myReference;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ShouldBeInvocableError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ShouldBeInvocableOrArrayError : object {
    private string MESSAGE;
    private IReference myReference;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ShouldBeInvocableOrArrayError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ShouldBeSimpleNameError : object {
    private string MESSAGE;
    private IReference myReference;
    private string myMessage;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ShouldBeSimpleNameError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("SimplifyConditionalOperator", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.SimplifyConditionalOperatorWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IConditionalExpression myConditionalExpression;
    private Nullable`1<bool> myThenLiteralValue;
    private Nullable`1<bool> myElseLiteralValue;
    public IConditionalExpression ConditionalExpression { get; }
    public Nullable`1<bool> ThenLiteralValue { get; }
    public Nullable`1<bool> ElseLiteralValue { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public SimplifyConditionalOperatorWarning(IConditionalExpression conditionalExpression, Nullable`1<bool> thenLiteralValue, Nullable`1<bool> elseLiteralValue);
    public IConditionalExpression get_ConditionalExpression();
    public Nullable`1<bool> get_ThenLiteralValue();
    public Nullable`1<bool> get_ElseLiteralValue();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("SimplifyIIf", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.SimplifyIIfWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IIndexExpression myIIfExpression;
    private Nullable`1<bool> myThenLiteralValue;
    private Nullable`1<bool> myElseLiteralValue;
    public IIndexExpression IIfExpression { get; }
    public Nullable`1<bool> ThenLiteralValue { get; }
    public Nullable`1<bool> ElseLiteralValue { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public SimplifyIIfWarning(IIndexExpression iIfExpression, Nullable`1<bool> thenLiteralValue, Nullable`1<bool> elseLiteralValue);
    public IIndexExpression get_IIfExpression();
    public Nullable`1<bool> get_ThenLiteralValue();
    public Nullable`1<bool> get_ElseLiteralValue();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.SingleLineIteratorLambdaError : object {
    private string MESSAGE;
    private ILambdaExpression myLambdaExpression;
    public ILambdaExpression LambdaExpression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public SingleLineIteratorLambdaError(ILambdaExpression lambdaExpression);
    public ILambdaExpression get_LambdaExpression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("SpecifyStringComparison", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.SpecifyStringComparisonWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IVBExpression myExpression;
    private IVBExpression myArg1;
    private IVBExpression myArg2;
    private bool myNegate;
    private bool myInvariantCulture;
    private bool myIgnoreCase;
    public IVBExpression Expression { get; }
    public IVBExpression Arg1 { get; }
    public IVBExpression Arg2 { get; }
    public bool Negate { get; }
    public bool InvariantCulture { get; }
    public bool IgnoreCase { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public SpecifyStringComparisonWarning(IVBExpression expression, IVBExpression arg1, IVBExpression arg2, bool negate, bool invariantCulture, bool ignoreCase);
    public IVBExpression get_Expression();
    public IVBExpression get_Arg1();
    public IVBExpression get_Arg2();
    public bool get_Negate();
    public bool get_InvariantCulture();
    public bool get_IgnoreCase();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
    [CompilerGeneratedAttribute]
private DocumentRange _Lambda$__25-1();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC42025", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.StaticElementInNonStaticContextWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IReferenceExpressionReference myReference;
    private IReferenceExpression myReferenceExpression;
    public IReferenceExpressionReference Reference { get; }
    public IReferenceExpression ReferenceExpression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public StaticElementInNonStaticContextWarning(IReferenceExpressionReference reference, IReferenceExpression referenceExpression);
    public IReferenceExpressionReference get_Reference();
    public IReferenceExpression get_ReferenceExpression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("StaticMemberInGenericType", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.StaticFieldInGenericTypeWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IVariableDeclaration myFieldDeclaration;
    public IVariableDeclaration FieldDeclaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public StaticFieldInGenericTypeWarning(IVariableDeclaration fieldDeclaration);
    public IVariableDeclaration get_FieldDeclaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("StaticMemberInitializerReferesToMemberBelow", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.StaticFieldInitializersReferesToFieldBelowWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IVBExpression myExpression;
    public IVBExpression Expression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public StaticFieldInitializersReferesToFieldBelowWarning(IVBExpression expression);
    public IVBExpression get_Expression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.StrictnessFailedError : object {
    private string MESSAGE;
    private IReference myReference;
    private string myMessage;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public StrictnessFailedError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.SubCannotBeIteratorMethodError : object {
    private string MESSAGE;
    private ITokenNode mySubKeyword;
    public ITokenNode SubKeyword { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public SubCannotBeIteratorMethodError(ITokenNode subKeyword);
    public ITokenNode get_SubKeyword();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.SubCannotHaveReturnTypeError : object {
    private string MESSAGE;
    private IMethodDeclarationBase myDeclaration;
    public IMethodDeclarationBase Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public SubCannotHaveReturnTypeError(IMethodDeclarationBase declaration);
    public IMethodDeclarationBase get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::BC42304", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.SyntaxErrorInDocCommentWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private DocumentRange myRange;
    public DocumentRange Range { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public SyntaxErrorInDocCommentWarning(DocumentRange range);
    public DocumentRange get_Range();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("ThreadStaticAtInstanceField", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ThreadStaticAtInstanceFieldWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IAttribute myAttribute;
    private IVariableDeclaration myFieldDeclaration;
    public IAttribute Attribute { get; }
    public IVariableDeclaration FieldDeclaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ThreadStaticAtInstanceFieldWarning(IAttribute attribute, IVariableDeclaration fieldDeclaration);
    public IAttribute get_Attribute();
    public IVariableDeclaration get_FieldDeclaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("ThreadStaticFieldHasInitializer", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ThreadStaticFieldHasInitializerWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IVariableDeclaration myFieldDeclaration;
    public IVariableDeclaration FieldDeclaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ThreadStaticFieldHasInitializerWarning(IVariableDeclaration fieldDeclaration);
    public IVariableDeclaration get_FieldDeclaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.TryCastWithGenericTypeWithoutClassError : object {
    private string MESSAGE;
    private ICastExpression myExpression;
    private ITypeUsage myTypeUsage;
    private IType myCastType;
    private string myMessage;
    public ICastExpression Expression { get; }
    public ITypeUsage TypeUsage { get; }
    public IType CastType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public TryCastWithGenericTypeWithoutClassError(ICastExpression expression, ITypeUsage typeUsage, IType castType);
    public ICastExpression get_Expression();
    public ITypeUsage get_TypeUsage();
    public IType get_CastType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.TryCastWithValueTypeError : object {
    private string MESSAGE;
    private ICastExpression myExpression;
    private ITypeUsage myTypeUsage;
    private IType myCastType;
    private string myMessage;
    public ICastExpression Expression { get; }
    public ITypeUsage TypeUsage { get; }
    public IType CastType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public TryCastWithValueTypeError(ICastExpression expression, ITypeUsage typeUsage, IType castType);
    public ICastExpression get_Expression();
    public ITypeUsage get_TypeUsage();
    public IType get_CastType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("TryStatementsCanBeMerged", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.TryStatementsCanBeMergedWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private ITryStatement myTryStatement;
    private ITryStatement myChildTryStatement;
    public ITryStatement TryStatement { get; }
    public ITryStatement ChildTryStatement { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public TryStatementsCanBeMergedWarning(ITryStatement tryStatement, ITryStatement childTryStatement);
    public ITryStatement get_TryStatement();
    public ITryStatement get_ChildTryStatement();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.TupleMustContainAtLeastTwoElementsError : object {
    private string MESSAGE;
    private ITreeNode myRPar;
    public ITreeNode RPar { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public TupleMustContainAtLeastTwoElementsError(ITreeNode rPar);
    public ITreeNode get_RPar();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.TupleReservedElementNameAnyPositionError : object {
    private string MESSAGE;
    private IVBIdentifier myNameIdentifier;
    private string myMessage;
    public IVBIdentifier NameIdentifier { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public TupleReservedElementNameAnyPositionError(IVBIdentifier nameIdentifier);
    public IVBIdentifier get_NameIdentifier();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.TypeExpectedError : object {
    private string MESSAGE;
    private IDeclaredElement myDeclaredElement;
    private IReference myReference;
    private string myMessage;
    public IDeclaredElement DeclaredElement { get; }
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public TypeExpectedError(IDeclaredElement declaredElement, IReference reference);
    public IDeclaredElement get_DeclaredElement();
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.TypeExpectedNoCandidateError : object {
    private string MESSAGE;
    private IReference myReference;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public TypeExpectedNoCandidateError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.TypeInferenceError : object {
    private string MESSAGE;
    private IReference myReference;
    private IMethod myMethod;
    private string myMessage;
    public IReference Reference { get; }
    public IMethod Method { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public TypeInferenceError(IReference reference, IMethod method);
    public IReference get_Reference();
    public IMethod get_Method();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.TypeInferenceMultipleCandidatesError : object {
    private string MESSAGE;
    private IReference myReference;
    private string myMessage;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public TypeInferenceMultipleCandidatesError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.TypeParametersNumberMismatchError : object {
    private string MESSAGE;
    private IReference myReference;
    private ITypeArgumentList myTypeArgumentList;
    private string myMessage;
    public IReference Reference { get; }
    public ITypeArgumentList TypeArgumentList { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public TypeParametersNumberMismatchError(IReference reference, ITypeArgumentList typeArgumentList);
    public IReference get_Reference();
    public ITypeArgumentList get_TypeArgumentList();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.TypeParametersNumberMismatchMultipleCandidatesError : object {
    private string MESSAGE;
    private IReference myReference;
    private ITypeArgumentList myTypeArgumentList;
    private string myMessage;
    public IReference Reference { get; }
    public ITypeArgumentList TypeArgumentList { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public TypeParametersNumberMismatchMultipleCandidatesError(IReference reference, ITypeArgumentList typeArgumentList);
    public IReference get_Reference();
    public ITypeArgumentList get_TypeArgumentList();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VbUnreachableCode", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.UnreachableCodeWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private ITreeRange myTreeRange;
    public ITreeRange TreeRange { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UnreachableCodeWarning(ITreeRange treeRange);
    public ITreeRange get_TreeRange();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.UnresolvedBranchStatementError : object {
    private string MESSAGE;
    private ITreeNode myNode;
    public ITreeNode Node { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UnresolvedBranchStatementError(ITreeNode node);
    public ITreeNode get_Node();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("UnusedImportClause", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.UnusedImportClauseWarning : object {
    protected string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IImportClause myClause;
    public IImportClause Clause { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UnusedImportClauseWarning(IImportClause clause);
    public IImportClause get_Clause();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("UseImplicitByValModifier", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.UseImplicitByValModifierWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IVBParameterDeclaration myParameterDeclaration;
    private ITokenNode myByValModifier;
    public IVBParameterDeclaration ParameterDeclaration { get; }
    public ITokenNode ByValModifier { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UseImplicitByValModifierWarning(IVBParameterDeclaration parameterDeclaration, ITokenNode byValModifier);
    public IVBParameterDeclaration get_ParameterDeclaration();
    public ITokenNode get_ByValModifier();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("UseImplicitlyTypedVariableEvident", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.UseImplicitlyTypedVariableEvidentWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IVBTreeNode myDeclaration;
    private ITreeNode myFromNode;
    private ITreeNode myToNode;
    public IVBTreeNode Declaration { get; }
    public ITreeNode FromNode { get; }
    public ITreeNode ToNode { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UseImplicitlyTypedVariableEvidentWarning(IVBTreeNode declaration, ITreeNode fromNode, ITreeNode toNode);
    public IVBTreeNode get_Declaration();
    public ITreeNode get_FromNode();
    public ITreeNode get_ToNode();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("UseImplicitlyTypedVariable", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.UseImplicitlyTypedVariableWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IVBTreeNode myDeclaration;
    private ITreeNode myFromNode;
    private ITreeNode myToNode;
    public IVBTreeNode Declaration { get; }
    public ITreeNode FromNode { get; }
    public ITreeNode ToNode { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UseImplicitlyTypedVariableWarning(IVBTreeNode declaration, ITreeNode fromNode, ITreeNode toNode);
    public IVBTreeNode get_Declaration();
    public ITreeNode get_FromNode();
    public ITreeNode get_ToNode();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.UseLocalVariableBeforeDeclaration2Error : object {
    private string MESSAGE;
    private IReference myReference;
    private string myMessage;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UseLocalVariableBeforeDeclaration2Error(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.UseLocalVariableBeforeDeclarationError : object {
    private string MESSAGE;
    private IReference myReference;
    private string myMessage;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UseLocalVariableBeforeDeclarationError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.UsingVariableIsNotDisposableError : object {
    private string MESSAGE;
    private IUsingVariableDeclaration myDeclaration;
    private IType myVariableType;
    private string myMessage;
    public IUsingVariableDeclaration Declaration { get; }
    public IType VariableType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UsingVariableIsNotDisposableError(IUsingVariableDeclaration declaration, IType variableType);
    public IUsingVariableDeclaration get_Declaration();
    public IType get_VariableType();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.ValueTupleNotResolvedError : object {
    private string MESSAGE;
    private ITreeNode myContext;
    public ITreeNode Context { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ValueTupleNotResolvedError(ITreeNode context);
    public ITreeNode get_Context();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.VariableExpectedError : object {
    private string MESSAGE;
    private IReference myReference;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public VariableExpectedError(IReference reference);
    public IReference get_Reference();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.VB11LanguageFeatureError : object {
    private string MESSAGE;
    private ITreeNode myNode;
    public ITreeNode Node { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public VB11LanguageFeatureError(ITreeNode node);
    public ITreeNode get_Node();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.VB14LanguageFeatureError : object {
    private string MESSAGE;
    private ITreeNode myNode;
    public ITreeNode Node { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public VB14LanguageFeatureError(ITreeNode node);
    public ITreeNode get_Node();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.VB15_3LanguageFeatureError : object {
    private string MESSAGE;
    private ITreeNode myNode;
    public ITreeNode Node { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public VB15_3LanguageFeatureError(ITreeNode node);
    public ITreeNode get_Node();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.VB15_5LanguageFeatureError : object {
    private string MESSAGE;
    private ITreeNode myNode;
    public ITreeNode Node { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public VB15_5LanguageFeatureError(ITreeNode node);
    public ITreeNode get_Node();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.VB15LanguageFeatureError : object {
    private string MESSAGE;
    private ITreeNode myNode;
    public ITreeNode Node { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public VB15LanguageFeatureError(ITreeNode node);
    public ITreeNode get_Node();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.VB16LanguageFeatureError : object {
    private string MESSAGE;
    private ITreeNode myNode;
    public ITreeNode Node { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public VB16LanguageFeatureError(ITreeNode node);
    public ITreeNode get_Node();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[RegisterStaticHighlightingsGroupAttribute("JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings", "VBCompilerErrors_Text", "True")]
public class JetBrains.ReSharper.Daemon.VB.Errors.VBErrors : object {
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTArrayParameterBothDirectionsError : object {
    private string MESSAGE;
    private IRegularParameterDeclaration myDeclaration;
    public IRegularParameterDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTArrayParameterBothDirectionsError(IRegularParameterDeclaration declaration);
    public IRegularParameterDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTArrayParameterNoDirectionError : object {
    private string MESSAGE;
    private IRegularParameterDeclaration myDeclaration;
    public IRegularParameterDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTArrayParameterNoDirectionError(IRegularParameterDeclaration declaration);
    public IRegularParameterDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTArrayParameterOutReadOnlyError : object {
    private string MESSAGE;
    private IRegularParameterDeclaration myDeclaration;
    public IRegularParameterDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTArrayParameterOutReadOnlyError(IRegularParameterDeclaration declaration);
    public IRegularParameterDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTAsyncInfoInterfaceError : object {
    private string MESSAGE;
    private IDeclaredTypeUsage myTypeUsage;
    private IInterface myBaseInterfaceType;
    private IClassLikeDeclaration myCurrentTypeDeclaration;
    public IDeclaredTypeUsage TypeUsage { get; }
    public IInterface BaseInterfaceType { get; }
    public IClassLikeDeclaration CurrentTypeDeclaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTAsyncInfoInterfaceError(IDeclaredTypeUsage typeUsage, IInterface baseInterfaceType, IClassLikeDeclaration currentTypeDeclaration);
    public IDeclaredTypeUsage get_TypeUsage();
    public IInterface get_BaseInterfaceType();
    public IClassLikeDeclaration get_CurrentTypeDeclaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTCaseSensitiveNames2Error : object {
    private string MESSAGE;
    private IDeclaration myDeclaration;
    private IDeclaredElement myConflictedElement;
    private string myMessage;
    public IDeclaration Declaration { get; }
    public IDeclaredElement ConflictedElement { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTCaseSensitiveNames2Error(IDeclaration declaration, IDeclaredElement conflictedElement);
    public IDeclaration get_Declaration();
    public IDeclaredElement get_ConflictedElement();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTConflictWithGeneratedError : object {
    private string MESSAGE;
    private IVBTypeDeclaration myDeclaration;
    private string myName;
    private string myMessage;
    public IVBTypeDeclaration Declaration { get; }
    public string Name { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTConflictWithGeneratedError(IVBTypeDeclaration declaration, string name);
    public IVBTypeDeclaration get_Declaration();
    public string get_Name();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTConstructorOutParameterError : object {
    private string MESSAGE;
    private IRegularParameterDeclaration myDeclaration;
    public IRegularParameterDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTConstructorOutParameterError(IRegularParameterDeclaration declaration);
    public IRegularParameterDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTConstructorOverloadsError : object {
    private string MESSAGE;
    private IDeclaration myDeclaration;
    public IDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTConstructorOverloadsError(IDeclaration declaration);
    public IDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTConstructorReturnValueNameError : object {
    private string MESSAGE;
    private IRegularParameterDeclaration myDeclaration;
    public IRegularParameterDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTConstructorReturnValueNameError(IRegularParameterDeclaration declaration);
    public IRegularParameterDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTEnumUnderlyingTypeError : object {
    private string MESSAGE;
    private IDeclaredTypeUsage myTypeUsage;
    public IDeclaredTypeUsage TypeUsage { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTEnumUnderlyingTypeError(IDeclaredTypeUsage typeUsage);
    public IDeclaredTypeUsage get_TypeUsage();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTExternalConstantError : object {
    private string MESSAGE;
    private IConstantDeclaration myDeclaration;
    public IConstantDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTExternalConstantError(IConstantDeclaration declaration);
    public IConstantDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTExternalFieldError : object {
    private string MESSAGE;
    private IVariableDeclaration myDeclaration;
    public IVariableDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTExternalFieldError(IVariableDeclaration declaration);
    public IVariableDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTExternalMethodError : object {
    private string MESSAGE;
    private IExternalMethodDeclaration myDeclaration;
    public IExternalMethodDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTExternalMethodError(IExternalMethodDeclaration declaration);
    public IExternalMethodDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTFieldInitializerInStructError : object {
    private string MESSAGE;
    private IVariableDeclaration myDeclaration;
    public IVariableDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTFieldInitializerInStructError(IVariableDeclaration declaration);
    public IVariableDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTIndexerDeclarationError : object {
    private string MESSAGE;
    private IDeclaration myDeclaration;
    public IDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTIndexerDeclarationError(IDeclaration declaration);
    public IDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTInheritanceIsNotAllowedError : object {
    private string MESSAGE;
    private IDeclaredTypeUsage myTypeUsage;
    private IClassDeclaration myCurrentClassDeclaration;
    public IDeclaredTypeUsage TypeUsage { get; }
    public IClassDeclaration CurrentClassDeclaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTInheritanceIsNotAllowedError(IDeclaredTypeUsage typeUsage, IClassDeclaration currentClassDeclaration);
    public IDeclaredTypeUsage get_TypeUsage();
    public IClassDeclaration get_CurrentClassDeclaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTInternalInterfaceError : object {
    private string MESSAGE;
    private IDeclaredTypeUsage myTypeUsage;
    private IInterface myBaseInterfaceType;
    private IClassLikeDeclaration myCurrentTypeDeclaration;
    public IDeclaredTypeUsage TypeUsage { get; }
    public IInterface BaseInterfaceType { get; }
    public IClassLikeDeclaration CurrentTypeDeclaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTInternalInterfaceError(IDeclaredTypeUsage typeUsage, IInterface baseInterfaceType, IClassLikeDeclaration currentTypeDeclaration);
    public IDeclaredTypeUsage get_TypeUsage();
    public IInterface get_BaseInterfaceType();
    public IClassLikeDeclaration get_CurrentTypeDeclaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTInvalidFieldTypeError : object {
    private string MESSAGE;
    private ITreeNode myNode;
    private IType myType;
    private string myMessage;
    public ITreeNode Node { get; }
    public IType Type { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTInvalidFieldTypeError(ITreeNode node, IType type);
    public ITreeNode get_Node();
    public IType get_Type();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTInvalidReturnValueNameError : object {
    private string MESSAGE;
    private IDeclaration myDeclaration;
    public IDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTInvalidReturnValueNameError(IDeclaration declaration);
    public IDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTInvalidRootNamespaceError : object {
    private string MESSAGE;
    private IVBNamespaceDeclaration myDeclaration;
    private INamespace myRootNamespace;
    private string myMessage;
    public IVBNamespaceDeclaration Declaration { get; }
    public INamespace RootNamespace { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTInvalidRootNamespaceError(IVBNamespaceDeclaration declaration, INamespace rootNamespace);
    public IVBNamespaceDeclaration get_Declaration();
    public INamespace get_RootNamespace();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTInvalidTypeError : object {
    private string MESSAGE;
    private ITreeNode myNode;
    private IType myType;
    private string myMessage;
    public ITreeNode Node { get; }
    public IType Type { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTInvalidTypeError(ITreeNode node, IType type);
    public ITreeNode get_Node();
    public IType get_Type();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTMemberIsVirtualError : object {
    private string MESSAGE;
    private IVBTypeMemberDeclaration myDeclaration;
    private string myMessage;
    public IVBTypeMemberDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTMemberIsVirtualError(IVBTypeMemberDeclaration declaration);
    public IVBTypeMemberDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTMemberMultipleImplementsError : object {
    private string MESSAGE;
    private IDeclaration myDeclaration;
    private string myMessage;
    public IDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTMemberMultipleImplementsError(IDeclaration declaration);
    public IDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTMethodIsGenericError : object {
    private string MESSAGE;
    private IMethodDeclaration myDeclaration;
    public IMethodDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTMethodIsGenericError(IMethodDeclaration declaration);
    public IMethodDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTMultipleDefaultFunctionsError : object {
    private string MESSAGE;
    private IDeclaration myDeclaration;
    private string myMessage;
    public IDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTMultipleDefaultFunctionsError(IDeclaration declaration);
    public IDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTMultiRankArraysError : object {
    private string MESSAGE;
    private ITreeNode myNode;
    public ITreeNode Node { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTMultiRankArraysError(ITreeNode node);
    public ITreeNode get_Node();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTNestedArraysError : object {
    private string MESSAGE;
    private ITreeNode myNode;
    public ITreeNode Node { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTNestedArraysError(ITreeNode node);
    public ITreeNode get_Node();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTNestedTypeError : object {
    private string MESSAGE;
    private IVBTypeDeclaration myDeclaration;
    public IVBTypeDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTNestedTypeError(IVBTypeDeclaration declaration);
    public IVBTypeDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTNonWinRTInterfaceError : object {
    private string MESSAGE;
    private IDeclaredTypeUsage myTypeUsage;
    private IInterface myBaseInterfaceType;
    private IClassLikeDeclaration myCurrentTypeDeclaration;
    public IDeclaredTypeUsage TypeUsage { get; }
    public IInterface BaseInterfaceType { get; }
    public IClassLikeDeclaration CurrentTypeDeclaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTNonWinRTInterfaceError(IDeclaredTypeUsage typeUsage, IInterface baseInterfaceType, IClassLikeDeclaration currentTypeDeclaration);
    public IDeclaredTypeUsage get_TypeUsage();
    public IInterface get_BaseInterfaceType();
    public IClassLikeDeclaration get_CurrentTypeDeclaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTOperatorDeclarationError : object {
    private string MESSAGE;
    private IDeclaration myDeclaration;
    public IDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTOperatorDeclarationError(IDeclaration declaration);
    public IDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTOptionalParameterError : object {
    private string MESSAGE;
    private IRegularParameterDeclaration myDeclaration;
    public IRegularParameterDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTOptionalParameterError(IRegularParameterDeclaration declaration);
    public IRegularParameterDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTParametrizedEventError : object {
    private string MESSAGE;
    private IDeclaration myDeclaration;
    public IDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTParametrizedEventError(IDeclaration declaration);
    public IDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTPointerTypeError : object {
    private string MESSAGE;
    private ITreeNode myNode;
    public ITreeNode Node { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTPointerTypeError(ITreeNode node);
    public ITreeNode get_Node();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTPropertyHasNoGetterError : object {
    private string MESSAGE;
    private IPropertyDeclaration myDeclaration;
    public IPropertyDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTPropertyHasNoGetterError(IPropertyDeclaration declaration);
    public IPropertyDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTProtectedConstructorError : object {
    private string MESSAGE;
    private IConstructorDeclaration myDeclaration;
    public IConstructorDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTProtectedConstructorError(IConstructorDeclaration declaration);
    public IConstructorDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTProtectedMemberIsStaticError : object {
    private string MESSAGE;
    private IVBTypeMemberDeclaration myDeclaration;
    private string myMessage;
    public IVBTypeMemberDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTProtectedMemberIsStaticError(IVBTypeMemberDeclaration declaration);
    public IVBTypeMemberDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTRefParameterError : object {
    private string MESSAGE;
    private IRegularParameterDeclaration myDeclaration;
    public IRegularParameterDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTRefParameterError(IRegularParameterDeclaration declaration);
    public IRegularParameterDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTReturnValueNameCollideError : object {
    private string MESSAGE;
    private IDeclaration myDeclaration;
    private string myReturnValueName;
    private string myMessage;
    public IDeclaration Declaration { get; }
    public string ReturnValueName { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTReturnValueNameCollideError(IDeclaration declaration, string returnValueName);
    public IDeclaration get_Declaration();
    public string get_ReturnValueName();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTReturnValueNameDiffersError : object {
    private string MESSAGE;
    private IDeclaration myDeclaration;
    private string myReturnValueName;
    private string myMessage;
    public IDeclaration Declaration { get; }
    public string ReturnValueName { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTReturnValueNameDiffersError(IDeclaration declaration, string returnValueName);
    public IDeclaration get_Declaration();
    public string get_ReturnValueName();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTRootNamespaceDoesntExistsError : object {
    private string MESSAGE;
    private IVBNamespaceDeclaration myDeclaration;
    public IVBNamespaceDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTRootNamespaceDoesntExistsError(IVBNamespaceDeclaration declaration);
    public IVBNamespaceDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VBWarnings::WME006", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTRootNamespaceShouldBeDefaultWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    private IVBNamespaceDeclaration myDeclaration;
    private INamespace myRootNamespace;
    private string myMessage;
    public IVBNamespaceDeclaration Declaration { get; }
    public INamespace RootNamespace { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTRootNamespaceShouldBeDefaultWarning(IVBNamespaceDeclaration declaration, INamespace rootNamespace);
    public IVBNamespaceDeclaration get_Declaration();
    public INamespace get_RootNamespace();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTSameOverloadsError : object {
    private string MESSAGE;
    private IDeclaration myDeclaration;
    public IDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTSameOverloadsError(IDeclaration declaration);
    public IDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTShouldBeSealedError : object {
    private string MESSAGE;
    private IClassDeclaration myDeclaration;
    public IClassDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTShouldBeSealedError(IClassDeclaration declaration);
    public IClassDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTStaticInstanceNamesUniqueError : object {
    private string MESSAGE;
    private IDeclaration myDeclaration;
    private string myMessage;
    public IDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTStaticInstanceNamesUniqueError(IDeclaration declaration);
    public IDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTStructureContainsNotPublicFieldError : object {
    private string MESSAGE;
    private IVBTypeMemberDeclaration myDeclaration;
    public IVBTypeMemberDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTStructureContainsNotPublicFieldError(IVBTypeMemberDeclaration declaration);
    public IVBTypeMemberDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTStructureIsEmptyError : object {
    private string MESSAGE;
    private IStructureDeclaration myDeclaration;
    public IStructureDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTStructureIsEmptyError(IStructureDeclaration declaration);
    public IStructureDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTTypeIsGenericError : object {
    private string MESSAGE;
    private ITypeParameterOfTypeOwnerDeclaration myDeclaration;
    public ITypeParameterOfTypeOwnerDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTTypeIsGenericError(ITypeParameterOfTypeOwnerDeclaration declaration);
    public ITypeParameterOfTypeOwnerDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WinRTTypeWithoutNamespaceError : object {
    private string MESSAGE;
    private IVBTypeDeclaration myDeclaration;
    public IVBTypeDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WinRTTypeWithoutNamespaceError(IVBTypeDeclaration declaration);
    public IVBTypeDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WithEventsVariableHasWrongTypeError : object {
    private string MESSAGE;
    private IVariableDeclaration myDeclaration;
    public IVariableDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WithEventsVariableHasWrongTypeError(IVariableDeclaration declaration);
    public IVariableDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WriteAccessToPropertyWithoutSetterError : object {
    private string MESSAGE;
    private IReference myReference;
    private IProperty myProperty;
    private string myMessage;
    public IReference Reference { get; }
    public IProperty Property { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WriteAccessToPropertyWithoutSetterError(IReference reference, IProperty property);
    public IReference get_Reference();
    public IProperty get_Property();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WriteOnlyPropertyWithGetterError : object {
    private string MESSAGE;
    private IPropertyDeclaration myPropertyDeclaration;
    private IAccessorDeclaration myAccessorDeclaration;
    public IPropertyDeclaration PropertyDeclaration { get; }
    public IAccessorDeclaration AccessorDeclaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WriteOnlyPropertyWithGetterError(IPropertyDeclaration propertyDeclaration, IAccessorDeclaration accessorDeclaration);
    public IPropertyDeclaration get_PropertyDeclaration();
    public IAccessorDeclaration get_AccessorDeclaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WriteOnlyPropertyWithoutSetterError : object {
    private string MESSAGE;
    private IPropertyDeclaration myPropertyDeclaration;
    public IPropertyDeclaration PropertyDeclaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WriteOnlyPropertyWithoutSetterError(IPropertyDeclaration propertyDeclaration);
    public IPropertyDeclaration get_PropertyDeclaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WrongConstantTypeError : object {
    private string MESSAGE;
    private ITypeUsage myTypeUsage;
    private IDeclaration myDeclaration;
    public ITypeUsage TypeUsage { get; }
    public IDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WrongConstantTypeError(ITypeUsage typeUsage, IDeclaration declaration);
    public ITypeUsage get_TypeUsage();
    public IDeclaration get_Declaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WrongReturnTypeOfAsyncLambdaError : object {
    private string MESSAGE;
    private ILambdaExpression myLambdaExpression;
    public ILambdaExpression LambdaExpression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WrongReturnTypeOfAsyncLambdaError(ILambdaExpression lambdaExpression);
    public ILambdaExpression get_LambdaExpression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WrongReturnTypeOfAsyncMethodError : object {
    private string MESSAGE;
    private IMethodDeclaration myMethodDeclaration;
    public IMethodDeclaration MethodDeclaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WrongReturnTypeOfAsyncMethodError(IMethodDeclaration methodDeclaration);
    public IMethodDeclaration get_MethodDeclaration();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WrongReturnTypeOfIteratorLambdaError : object {
    private string MESSAGE;
    private ILambdaExpression myLambdaExpression;
    public ILambdaExpression LambdaExpression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WrongReturnTypeOfIteratorLambdaError(ILambdaExpression lambdaExpression);
    public ILambdaExpression get_LambdaExpression();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.WrongReturnTypeOfIteratorMethodError : object {
    private string MESSAGE;
    private IVBFunctionDeclaration myDeclaration;
    private string myName;
    private string myMessage;
    public IVBFunctionDeclaration Declaration { get; }
    public string Name { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public WrongReturnTypeOfIteratorMethodError(IVBFunctionDeclaration declaration, string name);
    public IVBFunctionDeclaration get_Declaration();
    public string get_Name();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.YieldCannotBeUsedInCatchFinallySyncLockError : object {
    private string MESSAGE;
    private IYieldStatement myYieldStatement;
    public IYieldStatement YieldStatement { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public YieldCannotBeUsedInCatchFinallySyncLockError(IYieldStatement yieldStatement);
    public IYieldStatement get_YieldStatement();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.YieldCannotBeUsedInQueryExpressionError : object {
    private string MESSAGE;
    private IYieldStatement myYieldStatement;
    public IYieldStatement YieldStatement { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public YieldCannotBeUsedInQueryExpressionError(IYieldStatement yieldStatement);
    public IYieldStatement get_YieldStatement();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.Errors.YieldStatementNotUnderIteratorMethodError : object {
    private string MESSAGE;
    private IYieldStatement myYieldStatement;
    public IYieldStatement YieldStatement { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public YieldStatementNotUnderIteratorMethodError(IYieldStatement yieldStatement);
    public IYieldStatement get_YieldStatement();
    public sealed virtual override string get_ToolTip();
    public sealed virtual override string get_ErrorStripeToolTip();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override bool IsValid();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Daemon.VB.Generate.VBInheritanceAnalyzer : object {
    public sealed virtual override IEnumerable`1<OverridableMemberInstance> IInheritanceAnalyzer_GetMissingMembers(ITypeDeclaration typeDeclaration);
    public static IEnumerable`1<OverridableMemberInstance> GetMissingMembers(ITypeDeclaration typeDeclaration);
    public sealed virtual override IEnumerable`1<OverridableMemberInstance> IInheritanceAnalyzer_GetOverridableMembers(ITypeDeclaration typeDeclaration);
    public static IEnumerable`1<OverridableMemberInstance> GetOverridableMembers(ITypeDeclaration typeDeclaration);
}
[GeneratorElementProviderAttribute("Implementations", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Daemon.VB.Generate.VBMissingMembersProvider : VBGeneratorProviderBase {
    public double Priority { get; }
    public virtual double get_Priority();
    public virtual void Populate(VBGeneratorContext context);
}
[GeneratorElementProviderAttribute("Overrides", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Daemon.VB.Generate.VBOverridableMembersProvider : VBGeneratorProviderBase {
    public double Priority { get; }
    public virtual void Populate(VBGeneratorContext context);
    private int CompareWithIndicies(Dictionary`2<OverridableMemberInstance, int> indicies, OverridableMemberInstance x, OverridableMemberInstance y);
    public virtual double get_Priority();
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.InvalidDigitSeparatorProblemAnalyzer : ElementProblemAnalyzer`1<IVBLiteralExpression> {
    private static char DigitSeparator;
    protected virtual void Run(IVBLiteralExpression literalExpression, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private static void CheckIntegerLiteral(IVBLiteralExpression literalExpression, ITokenNode literalToken, IHighlightingConsumer consumer);
    private static void CheckRealLiteral(IVBLiteralExpression literalExpression, ITokenNode literalToken, IHighlightingConsumer consumer);
    private static void InvalidSeparator(IVBLiteralExpression literalExpression, IHighlightingConsumer consumer, int offset, bool hasErrorAlready);
}
public class JetBrains.ReSharper.Daemon.VB.ParameterNameHints.VBCodeAnnotationHintBulbActionsProvider : ManagedLanguageCodeAnnotationHintBulbActionsProvider`1<VBOtherInlayHintsOptions> {
    public virtual string GetOptionsPageId();
}
[DaemonStageAttribute("0")]
internal class JetBrains.ReSharper.Daemon.VB.ParameterNameHints.VBCodeAnnotationHintHighlightingStage : VBDaemonStageBase {
    private static VBCodeAnnotationHintBulbActionsProvider ourBulbActionsProvider;
    private CodeAnnotationHintHighlightingProvider myCodeAnnotationHintHighlightingProvider;
    private static VBCodeAnnotationHintHighlightingStage();
    public VBCodeAnnotationHintHighlightingStage(CodeAnnotationHintHighlightingProvider codeAnnotationHintHighlightingProvider);
    public virtual IDaemonStageProcess CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind, IVBFile file);
    protected virtual bool IsSupported(IPsiSourceFile sourceFile, IContextBoundSettingsStore settingsStore);
}
public class JetBrains.ReSharper.Daemon.VB.ParameterNameHints.VbExpressionNameMatcher : ExpressionNameMatcherBase {
    public VbExpressionNameMatcher(NamingManager namingManager, INamingPolicyProvider namingPolicyProvider);
    public virtual bool IsIntentionOfArgumentClearFromExplicitConversion(string parameter, String[] parameterNameParts, IExpression expression);
    public virtual bool IsIntentionOfArgumentClearFromReferencedElement(string parameter, String[] parameterNameParts, IExpression expression);
    public virtual bool IsIntentionOfArgumentClearFromInvocation(string parameter, String[] parameterNameParts, IExpression expression);
    public virtual IExpression GetExpression(IExpression expression, bool getThroughInvocation, bool getThroughCast);
    private NamingRule GetTypeNamingRule(IPsiSourceFile sourceFile);
    public NamingRule GetParameterOwnerNamingRule(IPsiSourceFile sourceFile);
}
[DaemonStageAttribute("0")]
internal class JetBrains.ReSharper.Daemon.VB.ParameterNameHints.VBParameterNameHintHighlightingStage : VBDaemonStageBase {
    private ILanguageManager _myLanguageManager;
    private NamingManager _myNamingManager;
    private NameParser _myNameParser;
    private InlayHintsOptionsStore _myInlayHintsOptionsStore;
    private IInlayHintsExclusionListManager _myInlayHintsExclusionListManager;
    private VBParameterNameHintsHighlightingProvider _myParameterNameHintsHighlightingProvider;
    private IEnumerable`1<ICustomManagedLanguageParameterNameHintsHighlightingProvider`1<VBParameterNameHintsOptions>> _myCustomProviders;
    public VBParameterNameHintHighlightingStage(ILanguageManager languageManager, NamingManager namingManager, NameParser nameParser, InlayHintsOptionsStore inlayHintsOptionsStore, IInlayHintsExclusionListManager inlayHintsExclusionListManager, VBParameterNameHintsHighlightingProvider parameterNameHintsHighlightingProvider, IEnumerable`1<ICustomManagedLanguageParameterNameHintsHighlightingProvider`1<VBParameterNameHintsOptions>> customProviders);
    public virtual IDaemonStageProcess CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind, IVBFile file);
    protected virtual bool IsSupported(IPsiSourceFile sourceFile, IContextBoundSettingsStore settingsStore);
}
public class JetBrains.ReSharper.Daemon.VB.ParameterNameHints.VBParameterNameHintsHighlightingContext : ManagedLanguageParameterNameHintsHighlightingContextBase`1<VBParameterNameHintsOptions> {
    public VBParameterNameHintsHighlightingContext(IContextBoundSettingsStore settingsContext, NamingManager namingManager, NameParser nameParser, INamingPolicyProvider namingPolicyProvider, IParameterNameHintsExclusionListMatcher matcher, VbParameterNameHintsHighlightingStrategy strategy, IEnumerable`1<ICustomManagedLanguageParameterNameHintsHighlightingProvider`1<VBParameterNameHintsOptions>> customProviders);
}
[SolutionComponentAttribute("10")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.VB.ParameterNameHints.VBParameterNameHintsHighlightingProvider : ManagedLanguageParameterNameHintsHighlightingProvider`1<VBParameterNameHintsOptions> {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Daemon.VB.ParameterNameHints.VbParameterNameHintsHighlightingStrategy : ManagedLanguageParameterNameHintsHighlightingStrategy`1<VBParameterNameHintsOptions> {
    public virtual bool IsShouldBeIgnored(IArgument argument);
    public virtual bool IsShouldBeIgnored(IExpression expression);
    public virtual RichText GetShortDescription(IParameter parameter, IArgument argument);
    public virtual bool IsLast(IParameter parameter);
    public virtual bool CanBeConsideredAsLiteral(IArgument argument, IExpression expression);
    public virtual bool IsLambdaExpression(ParameterNameHintsHighlightingContext context, IExpression expression);
    public virtual bool IsLambdaExpression(IExpression expression);
    public virtual bool IsConstOrEnumMemberReference(ParameterNameHintsHighlightingContext context, IParameter parameter, IExpression expression);
    public virtual bool IsUnclearCreationExpression(ParameterNameHintsHighlightingContext context, IExpression expression);
    public virtual bool IsMethodInvocation(ParameterNameHintsHighlightingContext context, IExpression expression);
    public virtual bool IsDefaultExpression(IExpression expression);
    public virtual NamingRule GetParametersNamingRule(ParameterNameHintsHighlightingContext context, IPsiSourceFile sourceFile);
    public virtual NamingRule GetParameterOwnerNamingRule(ParameterNameHintsHighlightingContext context, IPsiSourceFile sourceFile);
    public virtual DocumentRange GetSuppressionRange(IExpression expression);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Daemon.VB.ParameterNameHints.VBStringFormatMethodParameterNameHintsHighlightingProvider : StringFormatMethodParameterNameHintsHighlightingProvider`1<VBParameterNameHintsOptions> {
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class JetBrains.ReSharper.Daemon.VB.Resources.LocalizedStrings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string AccessOfSharedMemberConstantMemberEnumMemberOrNestedTypeThroughAnInstanceQualifyingExpressionWillNotBeEvaluatedMessage { get; }
    public static string AccessToDisposedClosureMessage { get; }
    public static string AccessToForeachVariableInClosureMayHaveDifferentBehaviourWhenCompiledWithDifferentVersionsOfCompilerMessage { get; }
    public static string AccessToModifiedClosureMessage { get; }
    public static string AllPublicTypesMustBelongToNamespacesWithACommonPrefixMessage { get; }
    public static string AmbiguousmatchMessage { get; }
    public static string AmbiguousReferenceMessage { get; }
    public static string AMidAssignmentStatementShouldHaveSyntaxMidStringIntegerOptionalIntegerStringMessage { get; }
    public static string AndCannotBeCombinedMessage { get; }
    public static string AnnotatingSubByPureIsMeaninglessMessage { get; }
    public static string AnnotationIsAppliedImplicitlyMessage { get; }
    public static string AparamsParameterMustBeTheLastParameterInAFormalParameterListMessage { get; }
    public static string ApplyingContainerNullnessAnnotationToNonContainerTypeIsMeaninglessMessage { get; }
    public static string ApplyingNullnessAnnotationToTypeIsMeaninglessMessage { get; }
    public static string ArgumentsMismatchMessage { get; }
    public static string ArrayBoundsCannotAppearInTypeSpecifiersMessage { get; }
    public static string ArrayExceedsTheLimitOfDimensionsMessage { get; }
    public static string ArrayInitializerCannotBeSpecifiedForANonConstantDimensionUseEmptyInitializerInsteadMessage { get; }
    public static string ArrayInitializerHasTooFewDimensionsMessage { get; }
    public static string ArrayInitializerHasTooManyDimensionsMessage { get; }
    public static string ArrayInitializerIsExpectedMessage { get; }
    public static string ArrayInitializerLengthDoesNotMatchTheSpecifiedArraySizeMessage { get; }
    public static string ArrayLowerBoundSpecificationIsRedundant { get; }
    public static string ArrayModifierCannotContainBothSpecifiedAndUnspecifiedBoundsMessage { get; }
    public static string ArrayModifiersCannotBeSpecifiedOnBothAVariableAndItsTypeMessage { get; }
    public static string ArraysCannotBeNestedInWinRTPublicAPIMessage { get; }
    public static string ArraysInWinRTPublicAPIMustBeSingleDimensionalMessage { get; }
    public static string AssignmentToAPropertyOfAReadonlyFieldCanBeUselessFieldTypeIsNotKnownToBeReferenceTypeMessage { get; }
    public static string AsyncAndIteratorModifiersCannotBeUsedTogetherMessage { get; }
    public static string AsyncCannotHaveByRefParametersMessage { get; }
    public static string AsyncMethodWithoutAwaitOperatorMessage { get; }
    public static string AsyncModifierCannotBeUsedInPartialMethodDeclarationMessage { get; }
    public static string AsyncOrIteratorLambdaExpressionCannotBeConvertedToExpressionTreesMessage { get; }
    public static string AttributeSystemRuntimeInteropServicesPreserveSigAttributeIsNotSupportedInWinRTMessage { get; }
    public static string AutoPropertiesCannotBeDeclaredIteratorMessage { get; }
    public static string AutoPropertyCannotHaveParametersMessage { get; }
    public static string AwaitCannotBeUsedInATryCatchOrATryFinallyOrASyncLockMessage { get; }
    public static string AwaitCannotCurrentlyBeUsedInALINQQueryMessage { get; }
    public static string AwaitCanOnlyBeUsedInAMethodMarkedWithTheAsyncModifierMessage { get; }
    public static string BaseClassDoesntContainParameterlessConstructorMessage { get; }
    public static string BaseDeclarationHasTheSameAnnotationMessage { get; }
    public static string BecauseThisCallIsNotAwaitedExecutionOfTheCurrentMethodContinuesBeforeTheCallIsCompletedConsiderApplyingTheAwaitOperatorToTheResultOfTheCallMessage { get; }
    public static string BranchingOutOfAFinallyIsNotValidMessage { get; }
    public static string CallToBaseMemberWithImplicitDefaultParametersMessage { get; }
    public static string CallToMyBaseEqualsIsReferenceEqualityMessage { get; }
    public static string CanBeReplacedWithDimTryCastIfIsNotNothingEndIfMessage { get; }
    public static string CannotAccessHereDueToProtectionLevelMessage { get; }
    public static string CannotAccessHereMessage { get; }
    public static string CannotAccessNonSharedInSharedContextMessage { get; }
    public static string CannotApplyIndexingToTypeMessage { get; }
    public static string CannotApplyOperatorToOperandOfTypeMessage { get; }
    public static string CannotApplyOperatorToOperandsOfTypeAndMessage { get; }
    public static string CannotAssignToAPropertyWithoutSetterOrWithInaccessibleSetterMessage { get; }
    public static string CannotAwaitNothingConsiderAwaitingTaskExYieldInsteadMessage { get; }
    public static string CannotBecauseTheyDifferByOptionalParameterMessage { get; }
    public static string CannotBecauseTheyDifferByParamArrayParameterMessage { get; }
    public static string CannotBecauseTheyDifferByTheDefaultValuesOfOptionalParameterMessage { get; }
    public static string CannotBeDeclaredOverridesBecauseThereIsNoMatchingMemberToOverrideInTheBaseClassMessage { get; }
    public static string CannotBeIndexedBecauseItHasNoDefaultPropertyMessage { get; }
    public static string CannotBeUsedInThisContextBecauseTheAccessorIsInaccessibleMessage { get; }
    public static string CannotCallMethodUseInsteadMessage { get; }
    public static string CannotConvertExpressionOfTypeToTypeMessage { get; }
    public static string CannotCreateAnArrayOfNegativeSizeMessage { get; }
    public static string CannotCreateAnInstanceOfInterfaceMessage { get; }
    public static string CannotCreateAnInstanceOfTypeParameterBecauseItDoesNotHaveANewConstraintMessage { get; }
    public static string CannotImplicitlyConvertTypeToSystemIDisposableMessage { get; }
    public static string CannotInferACommonTypeBecauseMoreThanOneTypeIsPossibleForAndMessage { get; }
    public static string CannotInferACommonTypeForAndAndOptionStrictOnDoesNotAllowObjectToBeAssumedMessage { get; }
    public static string CannotInferAnElementTypeOfAnonymousArrayAndOptionStrictOnDoesNotAllowObjectToBeAssumedMessage { get; }
    public static string CannotInferAReturnTypeConsiderAddingAnAsClauseToSpecifyTheReturnTypeMessage { get; }
    public static string CannotInvokeAnExtensionMethodOverImplicitClassInstanceInStaticContextMessage { get; }
    public static string CannotResolveSymbolErrorTypeMessage { get; }
    public static string CannotResolveSymbolMessage { get; }
    public static string CannotSpecifyADefaultValueForAParameterArrayMessage { get; }
    public static string CannotUseBeforeItIsDeclaredMessage { get; }
    public static string CircularDependencyInvolvingAndMessage { get; }
    public static string ClassCannotInheritSealedClassMessage { get; }
    public static string CodeIsUnreachable { get; }
    public static string CodeIsUnreachableMessage { get; }
    public static string ConditionalExpressionHasIdenticalTrueAndFalseBranchesMessage { get; }
    public static string ConditionalOperatorContainsTrueOrFalseInResultBranchForExamplepreIfConditionTrueElseBranchIfConditionThenBranchTruePre { get; }
    public static string ConditionArgumentMustBeBooleanMessage { get; }
    public static string ConstantCannotBeUsedAsAnAssignmentTargetMessage { get; }
    public static string ConstantExpressionIsRequiredMessage { get; }
    public static string ConstantMustHaveAValueMessage { get; }
    public static string ConstantsMustBeOfAnIntrinsicOrEnumeratedTypeNotAClassStructureTypeParameterOrArrayTypeMessage { get; }
    public static string ConvertPropertyToAutoProperty { get; }
    public static string ConvertPropertyToAutoPropertyWhenPossible { get; }
    public static string ConvertPropertyToAutoPropertyWithPrivateSetter { get; }
    public static string ConvertsPropertyDeclarationToVBNETAutoPropertySyntax { get; }
    public static string ConvertsPropertyDeclarationToVBNETAutoPropertySyntaxWithPrivateSetterDeclared { get; }
    public static string ConvertToAutoPropertyMessage { get; }
    public static string ConvertToAutoPropertyWithPrivateSetterMessage { get; }
    public static string CustomAsyncOperationsAreNotSupportedUseAsyncInfoFactoryInsteadMessage { get; }
    public static string DefaultMemberIsNotAPropertyMessage { get; }
    public static string DigitSeparatorCannotBeUsedInAPositionWhereItsNotSeparatingTheDigitsMessage { get; }
    public static string DoesNotHaveTypeParametersMessage { get; }
    public static string DoesntReturnAValueOnAllCodePathsAreYouMissingAReturnStatementMessage { get; }
    public static string DoesntReturnAValueOnAllCodePathsMessage { get; }
    public static string DontProvideGenericArgumentsWhenTakingMethodNamesMessage { get; }
    public static string DuplicateBaseTypeSpecificationMessage { get; }
    public static string DuplicateDefinitionMessage { get; }
    public static string DuplicateDefinitionModifierPartialIsPossiblyMissingMessage { get; }
    public static string DynamicExtensionMethodsAreNotSupportedMessage { get; }
    public static string EqualityComparisonOfFloatingPointNumbersMessage { get; }
    public static string EventNameExpectedButNameFoundMessage { get; }
    public static string EventNameExpectedMessage { get; }
    public static string EventsCannotBeDeclaredWithADelegateTypeThatHasAReturnTypeMessage { get; }
    public static string EventsDeclaredWithAnAsClauseMustHaveADelegateTypeMessage { get; }
    public static string EventsOfSharedWithEventsVariablesCannotBeHandledByNonSharedMethodsMessage { get; }
    public static string ExceptionRethrowPossiblyIntendedMessage { get; }
    public static string ExplicitArgumentPassedToParameterWithCallerInfoAttributeMessage { get; }
    public static string ExplicitInitializationIsNotPermittedForArraysDeclaredWithExplicitBoundsMessage { get; }
    public static string ExplicitSetAccessorvalueParameterDeclarationIsRedundant { get; }
    public static string ExplicitvalueParameterDeclarationIsRedundant { get; }
    public static string ExpressionDoesNotProduceAValueMessage { get; }
    public static string ExpressionIsAlwaysMessage { get; }
    public static string ExpressionIsNotAnArrayOrAMethodAndCannotHaveAnArgumentListMessage { get; }
    public static string FieldInWinRTStructureCannotHaveInitializerMessage { get; }
    public static string FieldOrPropertyNameExpectedButNameFoundMessage { get; }
    public static string FunctionNeverReturnsMessage { get; }
    public static string GCSuppressFinalizeIsInvokedForTypeWithoutDestructorMessage { get; }
    public static string HandlesClauseRequiresAWithEventsVariableDefinedInTheContainingTypeOrOneOfItsBaseTypesMessage { get; }
    public static string HasNoGetterMessage { get; }
    public static string HasNoSetterMessage { get; }
    public static string HidesAVariableInAnEnclosingBlockAPreviouslyDefinedRangeVariableOrAnImplicitlyDeclaredVariableInAQueryExpressionMessage { get; }
    public static string HidesMessage { get; }
    public static string IfOperatorRequiresEitherTwoOrThreeOperandsMessage { get; }
    public static string IIfContainsTrueOrFalseInResultBranchForExamplepreIIfConditionTrueElseBranchIIfConditionThenBranchTruePre { get; }
    public static string IIfInvocationWithIdenticalSecondAndThirdArgumentsMessage { get; }
    public static string ImplementationInheritanceIsNotAllowedInWinRTMessage { get; }
    public static string ImplementingFriendInterfaceIsNotAllowedInWinRTMessage { get; }
    public static string ImplementsKeywordMustBeUsedWithAnInterfaceMessage { get; }
    public static string ImplementsMoreThanOneInterfaceMemberPleaseMakeSureThisMemberOnlyImplementsOneInterfaceMemberMessage { get; }
    public static string ImportClauseIsNotRequiredByTheCodeAndCanBeSafelyRemovedMessage { get; }
    public static string ImportClauseIsNotUsedInTheFileAndCouldBeSafelyRemoved { get; }
    public static string ImpureMethodIsCalledForReadonlyFieldOfValueTypeMessage { get; }
    public static string InactivePreprocessorBranch { get; }
    public static string InactivePreprocessorBranchMessage { get; }
    public static string InconsistentAccessibilityBaseIsLessAccessibleThanMessage { get; }
    public static string InconsistentAccessibilityConstraintTypeIsLessAccessibleThanMessage { get; }
    public static string InconsistentAccessibilityParameterTypeIsLessAccessibleThanMessage { get; }
    public static string InconsistentAccessibilityReturnTypeIsLessAccessibleThanMessage { get; }
    public static string InconsistentAccessibilityTupleComponentTypeIsLessAccessibleThanMessage { get; }
    public static string InconsistentAccessibilityTypeArgumentIsLessAccessibleThanMessage { get; }
    public static string InconsistentAccessibilityTypeIsLessAccessibleThanMessage { get; }
    public static string IncorrectArgumentTypesCandidatesAreMessage { get; }
    public static string IncorrectNumberOfArgumentsCandidatesAreMessage { get; }
    public static string IncorrectNumberOfArgumentsInReferenceToMessage { get; }
    public static string IncorrectNumberOfTypeParametersCandidatesAreMessage { get; }
    public static string IncorrectNumberOfTypeParametersInReferenceToMessage { get; }
    public static string InheritsKeywordMustBeUsedWithAnInterfaceMessage { get; }
    public static string InheritsKeywordMustBeUsedWithClassMessage { get; }
    public static string InterfaceCannotInheritFromATypeNestedWithinItMessage { get; }
    public static string InterfaceIsNotImplementedByThisClassMessage { get; }
    public static string InvokeAsExtensionMethodMessage { get; }
    public static string IsAlreadyImplementedInThisClassMessage { get; }
    public static string IsExpressionOperandMustBeReferenceOrNullableTypeMessage { get; }
    public static string IsNotAMemberOfMessage { get; }
    public static string IsNotAnAttributeMessage { get; }
    public static string IsReadOnlyMessage { get; }
    public static string IsValidOnlyWithinAnInstanceMethodMessage { get; }
    public static string IteratorCannotHaveByRefParametersMessage { get; }
    public static string IteratorFunctionWithoutYieldStatements { get; }
    public static string IteratorNeverReturnsMessage { get; }
    public static string IteratorWithoutYieldStatementMessage { get; }
    public static string KeywordThenIsRedundantInMultilineIfStatement { get; }
    public static string KeywordThenIsRedundantInMultilineIfStatementMessage { get; }
    public static string LabelIsAlreadyDefinedInTheCurrentMethodOrMultilineLambdaExpressionMessage { get; }
    public static string LateboundOverloadResolutionCannotBeAppliedToBecauseTheAccessingInstanceIsAnInterfaceTypeMessage { get; }
    public static string LongLiteralEndingWithlInsteadOfLMessage { get; }
    public static string LoopCanBeConvertedIntoLINQExpressionButAnotherGetEnumeratorMethodWillBeUsedMessage { get; }
    public static string LoopCanBeConvertedIntoLINQExpressionMessage { get; }
    public static string LowerArrayBoundsCanOnlyBeSetToMessage { get; }
    public static string MeCannotBeTheTargetOfAnAssignmentMessage { get; }
    public static string MemberInAModuleCannotBeDeclaredSharedMessage { get; }
    public static string MemberWithTheSameNameOrSignatureIsAlreadyDeclaredInMessage { get; }
    public static string MeQualifierIsRedundantAndCanBeSafelyRemovedWithoutChangingCodeSemantics { get; }
    public static string Message { get; }
    public static string Message2 { get; }
    public static string Message6 { get; }
    public static string MethodCannotHandleEventBecauseTheyDoNotHaveACompatibleSignatureMessage { get; }
    public static string MethodDiffersOnlyByOptionalParameterIsAlreadyDeclaredInMessage { get; }
    public static string MethodDoesNotHaveASignatureCompatibleWithDelegateMessage { get; }
    public static string MethodHasAsInvalidReturnValueNameMessage { get; }
    public static string MethodHasReturnValueNameThatDiffersFromImplementedInterfaceMethodReturnValueNamePleaseMakeSureThatTheNamesAreIdenticalMessage { get; }
    public static string MethodHasTheReturnValueNamedWhichIsTheSameAsAParameterNameWinRTMethodParametersAndReturnValueMustHaveUniqueNamesMessage { get; }
    public static string MethodNameExpectedButNameFoundMessage { get; }
    public static string MethodNameExpectedMessage { get; }
    public static string MethodPropertyDelegateOrEventIsExpectedMessage { get; }
    public static string MethodWithTheFollowingSignatureIsExpectedMessage { get; }
    public static string MissingImplementationOfMembersFromBaseTypesMessage { get; }
    public static string MissingImplementationOfMembersMessage { get; }
    public static string MultilineLambdaCannotBeConvertedToExpressionTreesMessage { get; }
    public static string MultipleNullnessAttributesUsageMessage { get; }
    public static string MultipleWithTheSameNumberOfParametersCannotBeMarkedWithDefaultOverloadAttributeMessage { get; }
    public static string MyBaseQualifierIsRedundantAndCanBeSafelyRemovedWithoutChangingCodeSemantics { get; }
    public static string MyClassQualifierIsRedundantAndCanBeSafelyRemovedWithoutChangingCodeSemantics { get; }
    public static string NameAndNameCannotDifferInCaseOnlyMessage { get; }
    public static string NameIsNotValidAtThisPointMessage { get; }
    public static string NamespaceNameExpectedButNameFoundMessage { get; }
    public static string NamespaceNameExpectedMessage { get; }
    public static string NamespaceOrTypeSpecifiedInTheImportsDoesntContainAnyPublicMemberOrCannotBeFoundMessage { get; }
    public static string NamespaceShouldBeTheDefaultNamespaceOfThisProjectMessage { get; }
    public static string NamespaceWithPublicTypesShouldStartWithCommonPrefixMessage { get; }
    public static string newCannotBeUsedWithValueTupleTypeUseATupleLiteralExpressionInsteadMessage { get; }
    public static string NoAccessibleCanBeCalledWithoutANarrowingConversionCandidatesAreMessage { get; }
    public static string NonReadonlyFieldReferencedInGetHashCodeMessage { get; }
    public static string NullnessAnnotationConflictsWithAnnotationInSuperTypeMessage { get; }
    public static string ObjectReferenceEqualsIsAlwaysFalseBecauseItIsCalledWithValueTypeMessage { get; }
    public static string OnlyIndexExpressionIsAllowedAsAStatementMessage { get; }
    public static string OnlyletQueryStatementCanContainExplicitTypeNameInVariableDeclarationMessage { get; }
    public static string OnlyMemberAccessExpressionCanStartAnInvocationStatementMessage { get; }
    public static string OnlyVariableOrPropertyCanBeTheTargetOfAnAssignemntMessage { get; }
    public static string OperatorCannotHaveParamArrayParameterMessage { get; }
    public static string OperatorTypeOfIsCanBeUsedMessage { get; }
    public static string outParameterIsNotAssignedUponExit { get; }
    public static string OverloadsWithTheSameNumberOfParametersAreNotAllowedPleaseMarkOneOfThemWithDefaultOverloadAttributeMessage { get; }
    public static string OverriddenGetHashCodeCallsBaseObjectGetHashCodeMessage { get; }
    public static string OverridesMultipleMembersWithTheSameNameAndSignatureMessage { get; }
    public static string ParameterHidesMessage { get; }
    public static string ParameterlessPropertyParameterParenthesesAreRedundant { get; }
    public static string ParameterlessPropertyParenthesesAreRedundant { get; }
    public static string ParameterWithparamsModifierMustHaveAnArrayTypeMessage { get; }
    public static string ParenthesesCanBeSafelyRemovedFromExpressionsWithoutChangingCodeSemantics { get; }
    public static string PartOfLoopsBodyCanBeConvertedIntoLINQExpressionButAnotherGetEnumeratorMethodWillBeUsedMessage { get; }
    public static string PartOfLoopsBodyCanBeConvertedIntoLINQExpressionMessage { get; }
    public static string PointerTypesAreNotAllowedInWinRTPublicAPIMessage { get; }
    public static string PossibleIncorrectImplementationOfDoubleCheckLockingCheckedFieldMustBeVolatileOrAssignedFromLocalVariableAfterThreadMemoryBarrierCallMessage { get; }
    public static string PossibleIncorrectImplementationOfDoubleCheckLockingPossibleMultipleWriteAccessToCheckedFieldMessage { get; }
    public static string PossibleIncorrectImplementationOfDoubleCheckLockingReadAccessToCheckedFieldMessage { get; }
    public static string PossibleMultipleEnumerationOfIEnumerableMessage { get; }
    public static string PossibleWriteToMe { get; }
    public static string PossibleWriteToMe1 { get; }
    public static string PossibleWriteToMeMessage { get; }
    public static string PropertiesWithNoRequiredParametersCannotBeDeclaredDefaultMessage { get; }
    public static string PropertyMightHaveOnlyGetAndASetMessage { get; }
    public static string PropertyWithoutAReadOnlyOrWriteOnlySpecifierMustProvideBothAGetAndASetMessage { get; }
    public static string QualifierIsRedundant { get; }
    public static string QualifierIsRedundantMessage { get; }
    public static string QualifierMeIsRedundantMessage { get; }
    public static string QualifierMyBaseIsRedundantMessage { get; }
    public static string QualifierMyClassIsRedundantMessage { get; }
    public static string ReadOnlyCannotBeUsedAsAnAssignmentTargetMessage { get; }
    public static string ReadOnlyPropertyMustNotHaveSetterMessage { get; }
    public static string ReadOnlyPropertyMustProvideGetterMessage { get; }
    public static string RedundantArrayLowerBoundSpecification { get; }
    public static string RedundantArrayLowerBoundSpecificationMessage { get; }
    public static string RedundantAttributeParenthesesMessage { get; }
    public static string RedundantEmptyCaseElseMessage { get; }
    public static string RedundantEmptyCaseElseStatement { get; }
    public static string RedundantExplicitArraySizeSpecificationMessage { get; }
    public static string RedundantMeQualifier { get; }
    public static string RedundantMyBaseQualifier { get; }
    public static string RedundantMyClassQualifier { get; }
    public static string RedundantOperandInLogicalConditionalExpressionMessage { get; }
    public static string RedundantPropertyParenthesesMessage { get; }
    public static string RedundantQualifier { get; }
    public static string RedundantvalueParameterDeclarationMessage { get; }
    public static string ReferenceToRequiresTypeMessage { get; }
    public static string RemoveRedundantParentheses { get; }
    public static string RemoveRedundantParenthesesMessage { get; }
    public static string ReturnStatementInAFunctionGetOrOperatorMustReturnAValueMessage { get; }
    public static string ReturnStatementInASubOrASetCannotReturnAValueMessage { get; }
    public static string ReturnStatementInThisAsyncMethodCannotReturnAValueConsiderChangingTheMethodReturnTypeToTaskOfTMessage { get; }
    public static string ReturnValueOfPureMethodIsNotUsedMessage { get; }
    public static string ShadowsAnOverridableMethodInTheBaseClassMessage { get; }
    public static string SharedFieldInGenericTypeMessage { get; }
    public static string SharedFieldInitializerRefersToSharedFieldBelowOrInOtherPartMessage { get; }
    public static string SharedFieldOrPropertyCannotBeAssignedInAnObjectInitializerMessage { get; }
    public static string ShouldBeParameterlessInOrderToInitializeItThroughAnObjectInitializerMessage { get; }
    public static string ShouldBeUsedAsSimpleNameMessage { get; }
    public static string SimilarExpressionsComparisonMessage { get; }
    public static string SimplifyConditionalOperator { get; }
    public static string SimplifyConditionalOperatorMessage { get; }
    public static string SimplifyIIf { get; }
    public static string SimplifyIIfMessage { get; }
    public static string SingleLineLambdaCannotHaveTheIteratorModifierMessage { get; }
    public static string SpecifyStringComparisonExplicitlyMessage { get; }
    public static string SubCannotBeIteratorMessage { get; }
    public static string SubCannotHaveReturnTypeMessage { get; }
    public static string SyntaxErrorMessage { get; }
    public static string TheArgumentTypeDoesNotMatchByRefParameterTypeMessage { get; }
    public static string TheAsyncLambdaExpressionMustEitherBeSubOrFunctionThatReturnsTaskOrTaskOfTMessage { get; }
    public static string TheAsyncMethodMustEitherBeSubOrFunctionThatReturnsTaskOrTaskOfTMessage { get; }
    public static string TheCallerArgumentExpressionAttributeAppliedToParameterWillHaveNoEffectBecauseItsSelfReferentialMessage { get; }
    public static string TheCallerArgumentExpressionAttributeAppliedToParameterWillHaveNoEffectItIsAppliedWithAnInvalidParameterNameMessage { get; }
    public static string ThelSuffixIsEasilyConfusedWithTheDigit { get; }
    public static string ThelSuffixIsEasilyConfusedWithTheDigitUseLForClarity { get; }
    public static string TheModifierAsyncIsNotValidForThisItemMessage { get; }
    public static string TheModifierIteratorIsNotValidForThisItemMessage { get; }
    public static string TheParameterHasCallerArgumentExpressionAttributeAppliedSoArgumentCouldBeOmittedMessage { get; }
    public static string TheParameterizedConstructorHasAParameterNamedvalueWhichIsTheSameAsTheDefaultReturnValueNameConsiderUsingAnotherNameForTheParameterMessage { get; }
    public static string TheparamsParameterCannotBeDeclaredAsByRefMessage { get; }
    public static string TheparamsParameterMustBeASingleDimensionalArrayMessage { get; }
    public static string ThereIsNoMatchingInInterfaceCandidatesAreMessage { get; }
    public static string ThereIsNoMatchingInInterfaceMessage { get; }
    public static string TheReturnTypeOfAnIteratorLambdaExpressionMustBeIEnumerableOfTIEnumeratorOfTIEnumerableOrIEnumeratorMessage { get; }
    public static string TheReturnTypeOfAnIteratorMustBeIEnumerableOfTIEnumeratorOfTIEnumerableOrIEnumeratorMessage { get; }
    public static string TheValuePassedToTheMethodIsNeverUsedBecauseItIsOverwrittenInTheMethodBodyBeforeBeingReadMessage { get; }
    public static string ThreadStaticDoesntWorkWithInstanceFieldsMessage { get; }
    public static string ThreadStaticFieldHasInitializerMessage { get; }
    public static string ToReturnAValueFromAnIteratorFunctionUseYieldMessage { get; }
    public static string TryCastOperandMustBeReferenceTypeButIsAValueTypeMessage { get; }
    public static string TryCastOperandsMustBeClassConstrainedTypeParameterButHasNoClassConstraintMessage { get; }
    public static string TryCatchAndTryFinallyStatementsCanBeMergedMessage { get; }
    public static string TupleElementNameIsDisallowedAtAnyPositionMessage { get; }
    public static string TupleElementNameIsOnlyAllowedAtPositionMessage { get; }
    public static string TupleElementNamesMustBeUniqueMessage { get; }
    public static string TupleMustContainAtLeastTwoElementsMessage { get; }
    public static string TypeArgumentsCannotBeInferredFromTheQueryCandidatesAreMessage { get; }
    public static string TypeArgumentsCannotBeInferredFromTheUsageTrySpecifyingTypeArgumentsExplicitlyCandidatesAreMessage { get; }
    public static string TypeArgumentsForCannotBeInferredFromTheQueryMessage { get; }
    public static string TypeArgumentsForCannotBeInferredFromTheUsageTrySpecifyingTypeArgumentsExplicitlyMessage { get; }
    public static string TypeCastIsRedundantMessage { get; }
    public static string TypeDeclarationHasTheSameNameAsInterfaceGeneratedForTypeMessage { get; }
    public static string TypeDoesntFollowTheAwaitPatternMessage { get; }
    public static string TypeIsNotAValidWinRTTypeMessage { get; }
    public static string TypeIsNotAwaitableMessage { get; }
    public static string TypeIsNotEnumerableMessage { get; }
    public static string TypeNameExpectedButNameFoundMessage { get; }
    public static string TypeNameExpectedMessage { get; }
    public static string TypeOfCannotBeInferredFromAnExpressionContainingMessage { get; }
    public static string TypeSystemValueTupleIsNotResolvedMessage { get; }
    public static string UnableToChooseAMoreApplicableCandidateCandidatesAreMessage { get; }
    public static string UnableToChooseAMoreSpecificCandidateCandidatesAreMessage { get; }
    public static string UnreachableCode { get; }
    public static string UnresolvedJumpMessage { get; }
    public static string UnusedImportClause { get; }
    public static string UseImplicitByValModifier { get; }
    public static string UseImplicitByValModifierInParameterDeclaration { get; }
    public static string UseImplicitByValParameterModifierMessage { get; }
    public static string UseImplicitlyTypedVariableDeclaration { get; }
    public static string UseImplicitlyTypedVariableDeclarationEvident { get; }
    public static string UseImplicitlyTypedVariableDeclarationMessage { get; }
    public static string UseImplicitlyTypedVariableDeclarationWhenVariableTypeIsEvidentFromInitializerExpression { get; }
    public static string UsingDirectCastOperatorToCastAValueTypeToTheSameTypeIsObsoleteMessage { get; }
    public static string ValueAssignedIsNotUsedInAnyExecutionPathMessage { get; }
    public static string VariableMightNotBeInitializedBeforeAccessingANullReferenceExceptionCouldOccurAtRuntimeMessage { get; }
    public static string VariableNameExpectedMessage { get; }
    public static string VisualBasicLanguageFeatureMessage { get; }
    public static string VisualBasicLanguageFeatureMessage1 { get; }
    public static string VisualBasicLanguageFeatureMessage2 { get; }
    public static string VisualBasicLanguageFeatureMessage3 { get; }
    public static string VisualBasicLanguageFeatureMessage4 { get; }
    public static string VisualBasicLanguageFeatureMessage5 { get; }
    public static string WhenInitializingAnArrayOfArraysBoundsCanOnlyBeSpecifiedForTheTopLevelArrayMessage { get; }
    public static string WinRTCannotBeOverridableMessage { get; }
    public static string WinRTClassCannotContainExternallyVisibleFieldsMessage { get; }
    public static string WinRTConstructorCannotBeProtectedMessage { get; }
    public static string WinRTDoesNotSupportEventsWithParametersMessage { get; }
    public static string WinRTDoesNotSupportOperatorOverloadsMessage { get; }
    public static string WinRTDoesNotSupportPropertiesWithParametersMessage { get; }
    public static string WinRTDoesNotSupportSetterOnlyPropertiesMessage { get; }
    public static string WinRTDoNotSupportsoutParametersOnConstructorsMessage { get; }
    public static string WinRTEnumerationTypeShouldBeBackedByValuesOfTypeIntegerOrUIntegerMessage { get; }
    public static string WinRTFieldCannotBeOfTypeEachFieldInAWinRTStructureCanOnlyBeUIntIntUIntIntUIntIntUIntSingleDoubleBooleanStringEnumCharOrItselfAStructureMessage { get; }
    public static string WinRTMethodCannotBeGenericMessage { get; }
    public static string WinRTMethodCannotHaveByRefParametersMessage { get; }
    public static string WinRTMethodCannotHaveOptionalParametersMessage { get; }
    public static string WinRTOutParametersOfArrayTypeCannotBeAnnotatedWithReadOnlyArrayAttributeSinceTheContentsOfOutputArraysAreWritableMessage { get; }
    public static string WinRTParametersOfArrayTypeCannotBeBothAnnotatedWithReadOnlyArrayAttributeAndWriteOnlyArrayAttributeAtributesMessage { get; }
    public static string WinRTParametersOfArrayTypeMustBeAnnotatedWithEitherReadOnlyArrayAttributeOrWriteOnlyArrayAttributeAttributeMessage { get; }
    public static string WinRTSharedCannotBeProtectedMessage { get; }
    public static string WinRTStructureMayOnlyContainPublicFieldsMessage { get; }
    public static string WinRTStructureShouldContainAtLeastOnePublicFieldMessage { get; }
    public static string WinRTTypeCannotBeGenericMessage { get; }
    public static string WinRTTypeCannotBeNestedMessage { get; }
    public static string WinRTTypeCannotContainBothSharedAndInstanceWithNameMessage { get; }
    public static string WinRTTypeCannotContainExternallyVisibleConstantsMessage { get; }
    public static string WinRTTypesCannotHaveMultipleConstructorsWithTheSameNumberOfArgumentsMessage { get; }
    public static string WinRTTypesCanOnlyImplementOtherWinRTInterfacesMessage { get; }
    public static string WinRTTypeShouldBeNotInheritableMessage { get; }
    public static string WithEventsVariablesCanOnlyBeTypedAsClassesInterfacesOrTypeParametersWithClassConstraintsMessage { get; }
    public static string WriteOnlyPropertyMustNotHaveGetterMessage { get; }
    public static string WriteOnlyPropertyMustProvideSetterMessage { get; }
    public static string YieldCannotBeUsedInATryCatchOrATryFinallyOrASyncLockMessage { get; }
    public static string YieldCannotCurrentlyBeUsedInALINQQueryMessage { get; }
    public static string YieldCanOnlyBeUsedInAMethodMarkedWithTheIteratorModifierMessage { get; }
    public static string AnalysisIsNotAvailableForTheFileFileLanguageIsNotVBNETMessage { get; }
    public static string ProcessingRedundancies_Text { get; }
    public static string VBCompilerErrors_Text { get; }
    private static LocalizedStrings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_AccessOfSharedMemberConstantMemberEnumMemberOrNestedTypeThroughAnInstanceQualifyingExpressionWillNotBeEvaluatedMessage();
    public static string get_AccessToDisposedClosureMessage();
    public static string get_AccessToForeachVariableInClosureMayHaveDifferentBehaviourWhenCompiledWithDifferentVersionsOfCompilerMessage();
    public static string get_AccessToModifiedClosureMessage();
    public static string get_AllPublicTypesMustBelongToNamespacesWithACommonPrefixMessage();
    public static string get_AmbiguousmatchMessage();
    public static string get_AmbiguousReferenceMessage();
    public static string get_AMidAssignmentStatementShouldHaveSyntaxMidStringIntegerOptionalIntegerStringMessage();
    public static string get_AndCannotBeCombinedMessage();
    public static string get_AnnotatingSubByPureIsMeaninglessMessage();
    public static string get_AnnotationIsAppliedImplicitlyMessage();
    public static string get_AparamsParameterMustBeTheLastParameterInAFormalParameterListMessage();
    public static string get_ApplyingContainerNullnessAnnotationToNonContainerTypeIsMeaninglessMessage();
    public static string get_ApplyingNullnessAnnotationToTypeIsMeaninglessMessage();
    public static string get_ArgumentsMismatchMessage();
    public static string get_ArrayBoundsCannotAppearInTypeSpecifiersMessage();
    public static string get_ArrayExceedsTheLimitOfDimensionsMessage();
    public static string get_ArrayInitializerCannotBeSpecifiedForANonConstantDimensionUseEmptyInitializerInsteadMessage();
    public static string get_ArrayInitializerHasTooFewDimensionsMessage();
    public static string get_ArrayInitializerHasTooManyDimensionsMessage();
    public static string get_ArrayInitializerIsExpectedMessage();
    public static string get_ArrayInitializerLengthDoesNotMatchTheSpecifiedArraySizeMessage();
    public static string get_ArrayLowerBoundSpecificationIsRedundant();
    public static string get_ArrayModifierCannotContainBothSpecifiedAndUnspecifiedBoundsMessage();
    public static string get_ArrayModifiersCannotBeSpecifiedOnBothAVariableAndItsTypeMessage();
    public static string get_ArraysCannotBeNestedInWinRTPublicAPIMessage();
    public static string get_ArraysInWinRTPublicAPIMustBeSingleDimensionalMessage();
    public static string get_AssignmentToAPropertyOfAReadonlyFieldCanBeUselessFieldTypeIsNotKnownToBeReferenceTypeMessage();
    public static string get_AsyncAndIteratorModifiersCannotBeUsedTogetherMessage();
    public static string get_AsyncCannotHaveByRefParametersMessage();
    public static string get_AsyncMethodWithoutAwaitOperatorMessage();
    public static string get_AsyncModifierCannotBeUsedInPartialMethodDeclarationMessage();
    public static string get_AsyncOrIteratorLambdaExpressionCannotBeConvertedToExpressionTreesMessage();
    public static string get_AttributeSystemRuntimeInteropServicesPreserveSigAttributeIsNotSupportedInWinRTMessage();
    public static string get_AutoPropertiesCannotBeDeclaredIteratorMessage();
    public static string get_AutoPropertyCannotHaveParametersMessage();
    public static string get_AwaitCannotBeUsedInATryCatchOrATryFinallyOrASyncLockMessage();
    public static string get_AwaitCannotCurrentlyBeUsedInALINQQueryMessage();
    public static string get_AwaitCanOnlyBeUsedInAMethodMarkedWithTheAsyncModifierMessage();
    public static string get_BaseClassDoesntContainParameterlessConstructorMessage();
    public static string get_BaseDeclarationHasTheSameAnnotationMessage();
    public static string get_BecauseThisCallIsNotAwaitedExecutionOfTheCurrentMethodContinuesBeforeTheCallIsCompletedConsiderApplyingTheAwaitOperatorToTheResultOfTheCallMessage();
    public static string get_BranchingOutOfAFinallyIsNotValidMessage();
    public static string get_CallToBaseMemberWithImplicitDefaultParametersMessage();
    public static string get_CallToMyBaseEqualsIsReferenceEqualityMessage();
    public static string get_CanBeReplacedWithDimTryCastIfIsNotNothingEndIfMessage();
    public static string get_CannotAccessHereDueToProtectionLevelMessage();
    public static string get_CannotAccessHereMessage();
    public static string get_CannotAccessNonSharedInSharedContextMessage();
    public static string get_CannotApplyIndexingToTypeMessage();
    public static string get_CannotApplyOperatorToOperandOfTypeMessage();
    public static string get_CannotApplyOperatorToOperandsOfTypeAndMessage();
    public static string get_CannotAssignToAPropertyWithoutSetterOrWithInaccessibleSetterMessage();
    public static string get_CannotAwaitNothingConsiderAwaitingTaskExYieldInsteadMessage();
    public static string get_CannotBecauseTheyDifferByOptionalParameterMessage();
    public static string get_CannotBecauseTheyDifferByParamArrayParameterMessage();
    public static string get_CannotBecauseTheyDifferByTheDefaultValuesOfOptionalParameterMessage();
    public static string get_CannotBeDeclaredOverridesBecauseThereIsNoMatchingMemberToOverrideInTheBaseClassMessage();
    public static string get_CannotBeIndexedBecauseItHasNoDefaultPropertyMessage();
    public static string get_CannotBeUsedInThisContextBecauseTheAccessorIsInaccessibleMessage();
    public static string get_CannotCallMethodUseInsteadMessage();
    public static string get_CannotConvertExpressionOfTypeToTypeMessage();
    public static string get_CannotCreateAnArrayOfNegativeSizeMessage();
    public static string get_CannotCreateAnInstanceOfInterfaceMessage();
    public static string get_CannotCreateAnInstanceOfTypeParameterBecauseItDoesNotHaveANewConstraintMessage();
    public static string get_CannotImplicitlyConvertTypeToSystemIDisposableMessage();
    public static string get_CannotInferACommonTypeBecauseMoreThanOneTypeIsPossibleForAndMessage();
    public static string get_CannotInferACommonTypeForAndAndOptionStrictOnDoesNotAllowObjectToBeAssumedMessage();
    public static string get_CannotInferAnElementTypeOfAnonymousArrayAndOptionStrictOnDoesNotAllowObjectToBeAssumedMessage();
    public static string get_CannotInferAReturnTypeConsiderAddingAnAsClauseToSpecifyTheReturnTypeMessage();
    public static string get_CannotInvokeAnExtensionMethodOverImplicitClassInstanceInStaticContextMessage();
    public static string get_CannotResolveSymbolErrorTypeMessage();
    public static string get_CannotResolveSymbolMessage();
    public static string get_CannotSpecifyADefaultValueForAParameterArrayMessage();
    public static string get_CannotUseBeforeItIsDeclaredMessage();
    public static string get_CircularDependencyInvolvingAndMessage();
    public static string get_ClassCannotInheritSealedClassMessage();
    public static string get_CodeIsUnreachable();
    public static string get_CodeIsUnreachableMessage();
    public static string get_ConditionalExpressionHasIdenticalTrueAndFalseBranchesMessage();
    public static string get_ConditionalOperatorContainsTrueOrFalseInResultBranchForExamplepreIfConditionTrueElseBranchIfConditionThenBranchTruePre();
    public static string get_ConditionArgumentMustBeBooleanMessage();
    public static string get_ConstantCannotBeUsedAsAnAssignmentTargetMessage();
    public static string get_ConstantExpressionIsRequiredMessage();
    public static string get_ConstantMustHaveAValueMessage();
    public static string get_ConstantsMustBeOfAnIntrinsicOrEnumeratedTypeNotAClassStructureTypeParameterOrArrayTypeMessage();
    public static string get_ConvertPropertyToAutoProperty();
    public static string get_ConvertPropertyToAutoPropertyWhenPossible();
    public static string get_ConvertPropertyToAutoPropertyWithPrivateSetter();
    public static string get_ConvertsPropertyDeclarationToVBNETAutoPropertySyntax();
    public static string get_ConvertsPropertyDeclarationToVBNETAutoPropertySyntaxWithPrivateSetterDeclared();
    public static string get_ConvertToAutoPropertyMessage();
    public static string get_ConvertToAutoPropertyWithPrivateSetterMessage();
    public static string get_CustomAsyncOperationsAreNotSupportedUseAsyncInfoFactoryInsteadMessage();
    public static string get_DefaultMemberIsNotAPropertyMessage();
    public static string get_DigitSeparatorCannotBeUsedInAPositionWhereItsNotSeparatingTheDigitsMessage();
    public static string get_DoesNotHaveTypeParametersMessage();
    public static string get_DoesntReturnAValueOnAllCodePathsAreYouMissingAReturnStatementMessage();
    public static string get_DoesntReturnAValueOnAllCodePathsMessage();
    public static string get_DontProvideGenericArgumentsWhenTakingMethodNamesMessage();
    public static string get_DuplicateBaseTypeSpecificationMessage();
    public static string get_DuplicateDefinitionMessage();
    public static string get_DuplicateDefinitionModifierPartialIsPossiblyMissingMessage();
    public static string get_DynamicExtensionMethodsAreNotSupportedMessage();
    public static string get_EqualityComparisonOfFloatingPointNumbersMessage();
    public static string get_EventNameExpectedButNameFoundMessage();
    public static string get_EventNameExpectedMessage();
    public static string get_EventsCannotBeDeclaredWithADelegateTypeThatHasAReturnTypeMessage();
    public static string get_EventsDeclaredWithAnAsClauseMustHaveADelegateTypeMessage();
    public static string get_EventsOfSharedWithEventsVariablesCannotBeHandledByNonSharedMethodsMessage();
    public static string get_ExceptionRethrowPossiblyIntendedMessage();
    public static string get_ExplicitArgumentPassedToParameterWithCallerInfoAttributeMessage();
    public static string get_ExplicitInitializationIsNotPermittedForArraysDeclaredWithExplicitBoundsMessage();
    public static string get_ExplicitSetAccessorvalueParameterDeclarationIsRedundant();
    public static string get_ExplicitvalueParameterDeclarationIsRedundant();
    public static string get_ExpressionDoesNotProduceAValueMessage();
    public static string get_ExpressionIsAlwaysMessage();
    public static string get_ExpressionIsNotAnArrayOrAMethodAndCannotHaveAnArgumentListMessage();
    public static string get_FieldInWinRTStructureCannotHaveInitializerMessage();
    public static string get_FieldOrPropertyNameExpectedButNameFoundMessage();
    public static string get_FunctionNeverReturnsMessage();
    public static string get_GCSuppressFinalizeIsInvokedForTypeWithoutDestructorMessage();
    public static string get_HandlesClauseRequiresAWithEventsVariableDefinedInTheContainingTypeOrOneOfItsBaseTypesMessage();
    public static string get_HasNoGetterMessage();
    public static string get_HasNoSetterMessage();
    public static string get_HidesAVariableInAnEnclosingBlockAPreviouslyDefinedRangeVariableOrAnImplicitlyDeclaredVariableInAQueryExpressionMessage();
    public static string get_HidesMessage();
    public static string get_IfOperatorRequiresEitherTwoOrThreeOperandsMessage();
    public static string get_IIfContainsTrueOrFalseInResultBranchForExamplepreIIfConditionTrueElseBranchIIfConditionThenBranchTruePre();
    public static string get_IIfInvocationWithIdenticalSecondAndThirdArgumentsMessage();
    public static string get_ImplementationInheritanceIsNotAllowedInWinRTMessage();
    public static string get_ImplementingFriendInterfaceIsNotAllowedInWinRTMessage();
    public static string get_ImplementsKeywordMustBeUsedWithAnInterfaceMessage();
    public static string get_ImplementsMoreThanOneInterfaceMemberPleaseMakeSureThisMemberOnlyImplementsOneInterfaceMemberMessage();
    public static string get_ImportClauseIsNotRequiredByTheCodeAndCanBeSafelyRemovedMessage();
    public static string get_ImportClauseIsNotUsedInTheFileAndCouldBeSafelyRemoved();
    public static string get_ImpureMethodIsCalledForReadonlyFieldOfValueTypeMessage();
    public static string get_InactivePreprocessorBranch();
    public static string get_InactivePreprocessorBranchMessage();
    public static string get_InconsistentAccessibilityBaseIsLessAccessibleThanMessage();
    public static string get_InconsistentAccessibilityConstraintTypeIsLessAccessibleThanMessage();
    public static string get_InconsistentAccessibilityParameterTypeIsLessAccessibleThanMessage();
    public static string get_InconsistentAccessibilityReturnTypeIsLessAccessibleThanMessage();
    public static string get_InconsistentAccessibilityTupleComponentTypeIsLessAccessibleThanMessage();
    public static string get_InconsistentAccessibilityTypeArgumentIsLessAccessibleThanMessage();
    public static string get_InconsistentAccessibilityTypeIsLessAccessibleThanMessage();
    public static string get_IncorrectArgumentTypesCandidatesAreMessage();
    public static string get_IncorrectNumberOfArgumentsCandidatesAreMessage();
    public static string get_IncorrectNumberOfArgumentsInReferenceToMessage();
    public static string get_IncorrectNumberOfTypeParametersCandidatesAreMessage();
    public static string get_IncorrectNumberOfTypeParametersInReferenceToMessage();
    public static string get_InheritsKeywordMustBeUsedWithAnInterfaceMessage();
    public static string get_InheritsKeywordMustBeUsedWithClassMessage();
    public static string get_InterfaceCannotInheritFromATypeNestedWithinItMessage();
    public static string get_InterfaceIsNotImplementedByThisClassMessage();
    public static string get_InvokeAsExtensionMethodMessage();
    public static string get_IsAlreadyImplementedInThisClassMessage();
    public static string get_IsExpressionOperandMustBeReferenceOrNullableTypeMessage();
    public static string get_IsNotAMemberOfMessage();
    public static string get_IsNotAnAttributeMessage();
    public static string get_IsReadOnlyMessage();
    public static string get_IsValidOnlyWithinAnInstanceMethodMessage();
    public static string get_IteratorCannotHaveByRefParametersMessage();
    public static string get_IteratorFunctionWithoutYieldStatements();
    public static string get_IteratorNeverReturnsMessage();
    public static string get_IteratorWithoutYieldStatementMessage();
    public static string get_KeywordThenIsRedundantInMultilineIfStatement();
    public static string get_KeywordThenIsRedundantInMultilineIfStatementMessage();
    public static string get_LabelIsAlreadyDefinedInTheCurrentMethodOrMultilineLambdaExpressionMessage();
    public static string get_LateboundOverloadResolutionCannotBeAppliedToBecauseTheAccessingInstanceIsAnInterfaceTypeMessage();
    public static string get_LongLiteralEndingWithlInsteadOfLMessage();
    public static string get_LoopCanBeConvertedIntoLINQExpressionButAnotherGetEnumeratorMethodWillBeUsedMessage();
    public static string get_LoopCanBeConvertedIntoLINQExpressionMessage();
    public static string get_LowerArrayBoundsCanOnlyBeSetToMessage();
    public static string get_MeCannotBeTheTargetOfAnAssignmentMessage();
    public static string get_MemberInAModuleCannotBeDeclaredSharedMessage();
    public static string get_MemberWithTheSameNameOrSignatureIsAlreadyDeclaredInMessage();
    public static string get_MeQualifierIsRedundantAndCanBeSafelyRemovedWithoutChangingCodeSemantics();
    public static string get_Message();
    public static string get_Message2();
    public static string get_Message6();
    public static string get_MethodCannotHandleEventBecauseTheyDoNotHaveACompatibleSignatureMessage();
    public static string get_MethodDiffersOnlyByOptionalParameterIsAlreadyDeclaredInMessage();
    public static string get_MethodDoesNotHaveASignatureCompatibleWithDelegateMessage();
    public static string get_MethodHasAsInvalidReturnValueNameMessage();
    public static string get_MethodHasReturnValueNameThatDiffersFromImplementedInterfaceMethodReturnValueNamePleaseMakeSureThatTheNamesAreIdenticalMessage();
    public static string get_MethodHasTheReturnValueNamedWhichIsTheSameAsAParameterNameWinRTMethodParametersAndReturnValueMustHaveUniqueNamesMessage();
    public static string get_MethodNameExpectedButNameFoundMessage();
    public static string get_MethodNameExpectedMessage();
    public static string get_MethodPropertyDelegateOrEventIsExpectedMessage();
    public static string get_MethodWithTheFollowingSignatureIsExpectedMessage();
    public static string get_MissingImplementationOfMembersFromBaseTypesMessage();
    public static string get_MissingImplementationOfMembersMessage();
    public static string get_MultilineLambdaCannotBeConvertedToExpressionTreesMessage();
    public static string get_MultipleNullnessAttributesUsageMessage();
    public static string get_MultipleWithTheSameNumberOfParametersCannotBeMarkedWithDefaultOverloadAttributeMessage();
    public static string get_MyBaseQualifierIsRedundantAndCanBeSafelyRemovedWithoutChangingCodeSemantics();
    public static string get_MyClassQualifierIsRedundantAndCanBeSafelyRemovedWithoutChangingCodeSemantics();
    public static string get_NameAndNameCannotDifferInCaseOnlyMessage();
    public static string get_NameIsNotValidAtThisPointMessage();
    public static string get_NamespaceNameExpectedButNameFoundMessage();
    public static string get_NamespaceNameExpectedMessage();
    public static string get_NamespaceOrTypeSpecifiedInTheImportsDoesntContainAnyPublicMemberOrCannotBeFoundMessage();
    public static string get_NamespaceShouldBeTheDefaultNamespaceOfThisProjectMessage();
    public static string get_NamespaceWithPublicTypesShouldStartWithCommonPrefixMessage();
    public static string get_newCannotBeUsedWithValueTupleTypeUseATupleLiteralExpressionInsteadMessage();
    public static string get_NoAccessibleCanBeCalledWithoutANarrowingConversionCandidatesAreMessage();
    public static string get_NonReadonlyFieldReferencedInGetHashCodeMessage();
    public static string get_NullnessAnnotationConflictsWithAnnotationInSuperTypeMessage();
    public static string get_ObjectReferenceEqualsIsAlwaysFalseBecauseItIsCalledWithValueTypeMessage();
    public static string get_OnlyIndexExpressionIsAllowedAsAStatementMessage();
    public static string get_OnlyletQueryStatementCanContainExplicitTypeNameInVariableDeclarationMessage();
    public static string get_OnlyMemberAccessExpressionCanStartAnInvocationStatementMessage();
    public static string get_OnlyVariableOrPropertyCanBeTheTargetOfAnAssignemntMessage();
    public static string get_OperatorCannotHaveParamArrayParameterMessage();
    public static string get_OperatorTypeOfIsCanBeUsedMessage();
    public static string get_outParameterIsNotAssignedUponExit();
    public static string get_OverloadsWithTheSameNumberOfParametersAreNotAllowedPleaseMarkOneOfThemWithDefaultOverloadAttributeMessage();
    public static string get_OverriddenGetHashCodeCallsBaseObjectGetHashCodeMessage();
    public static string get_OverridesMultipleMembersWithTheSameNameAndSignatureMessage();
    public static string get_ParameterHidesMessage();
    public static string get_ParameterlessPropertyParameterParenthesesAreRedundant();
    public static string get_ParameterlessPropertyParenthesesAreRedundant();
    public static string get_ParameterWithparamsModifierMustHaveAnArrayTypeMessage();
    public static string get_ParenthesesCanBeSafelyRemovedFromExpressionsWithoutChangingCodeSemantics();
    public static string get_PartOfLoopsBodyCanBeConvertedIntoLINQExpressionButAnotherGetEnumeratorMethodWillBeUsedMessage();
    public static string get_PartOfLoopsBodyCanBeConvertedIntoLINQExpressionMessage();
    public static string get_PointerTypesAreNotAllowedInWinRTPublicAPIMessage();
    public static string get_PossibleIncorrectImplementationOfDoubleCheckLockingCheckedFieldMustBeVolatileOrAssignedFromLocalVariableAfterThreadMemoryBarrierCallMessage();
    public static string get_PossibleIncorrectImplementationOfDoubleCheckLockingPossibleMultipleWriteAccessToCheckedFieldMessage();
    public static string get_PossibleIncorrectImplementationOfDoubleCheckLockingReadAccessToCheckedFieldMessage();
    public static string get_PossibleMultipleEnumerationOfIEnumerableMessage();
    public static string get_PossibleWriteToMe();
    public static string get_PossibleWriteToMe1();
    public static string get_PossibleWriteToMeMessage();
    public static string get_PropertiesWithNoRequiredParametersCannotBeDeclaredDefaultMessage();
    public static string get_PropertyMightHaveOnlyGetAndASetMessage();
    public static string get_PropertyWithoutAReadOnlyOrWriteOnlySpecifierMustProvideBothAGetAndASetMessage();
    public static string get_QualifierIsRedundant();
    public static string get_QualifierIsRedundantMessage();
    public static string get_QualifierMeIsRedundantMessage();
    public static string get_QualifierMyBaseIsRedundantMessage();
    public static string get_QualifierMyClassIsRedundantMessage();
    public static string get_ReadOnlyCannotBeUsedAsAnAssignmentTargetMessage();
    public static string get_ReadOnlyPropertyMustNotHaveSetterMessage();
    public static string get_ReadOnlyPropertyMustProvideGetterMessage();
    public static string get_RedundantArrayLowerBoundSpecification();
    public static string get_RedundantArrayLowerBoundSpecificationMessage();
    public static string get_RedundantAttributeParenthesesMessage();
    public static string get_RedundantEmptyCaseElseMessage();
    public static string get_RedundantEmptyCaseElseStatement();
    public static string get_RedundantExplicitArraySizeSpecificationMessage();
    public static string get_RedundantMeQualifier();
    public static string get_RedundantMyBaseQualifier();
    public static string get_RedundantMyClassQualifier();
    public static string get_RedundantOperandInLogicalConditionalExpressionMessage();
    public static string get_RedundantPropertyParenthesesMessage();
    public static string get_RedundantQualifier();
    public static string get_RedundantvalueParameterDeclarationMessage();
    public static string get_ReferenceToRequiresTypeMessage();
    public static string get_RemoveRedundantParentheses();
    public static string get_RemoveRedundantParenthesesMessage();
    public static string get_ReturnStatementInAFunctionGetOrOperatorMustReturnAValueMessage();
    public static string get_ReturnStatementInASubOrASetCannotReturnAValueMessage();
    public static string get_ReturnStatementInThisAsyncMethodCannotReturnAValueConsiderChangingTheMethodReturnTypeToTaskOfTMessage();
    public static string get_ReturnValueOfPureMethodIsNotUsedMessage();
    public static string get_ShadowsAnOverridableMethodInTheBaseClassMessage();
    public static string get_SharedFieldInGenericTypeMessage();
    public static string get_SharedFieldInitializerRefersToSharedFieldBelowOrInOtherPartMessage();
    public static string get_SharedFieldOrPropertyCannotBeAssignedInAnObjectInitializerMessage();
    public static string get_ShouldBeParameterlessInOrderToInitializeItThroughAnObjectInitializerMessage();
    public static string get_ShouldBeUsedAsSimpleNameMessage();
    public static string get_SimilarExpressionsComparisonMessage();
    public static string get_SimplifyConditionalOperator();
    public static string get_SimplifyConditionalOperatorMessage();
    public static string get_SimplifyIIf();
    public static string get_SimplifyIIfMessage();
    public static string get_SingleLineLambdaCannotHaveTheIteratorModifierMessage();
    public static string get_SpecifyStringComparisonExplicitlyMessage();
    public static string get_SubCannotBeIteratorMessage();
    public static string get_SubCannotHaveReturnTypeMessage();
    public static string get_SyntaxErrorMessage();
    public static string get_TheArgumentTypeDoesNotMatchByRefParameterTypeMessage();
    public static string get_TheAsyncLambdaExpressionMustEitherBeSubOrFunctionThatReturnsTaskOrTaskOfTMessage();
    public static string get_TheAsyncMethodMustEitherBeSubOrFunctionThatReturnsTaskOrTaskOfTMessage();
    public static string get_TheCallerArgumentExpressionAttributeAppliedToParameterWillHaveNoEffectBecauseItsSelfReferentialMessage();
    public static string get_TheCallerArgumentExpressionAttributeAppliedToParameterWillHaveNoEffectItIsAppliedWithAnInvalidParameterNameMessage();
    public static string get_ThelSuffixIsEasilyConfusedWithTheDigit();
    public static string get_ThelSuffixIsEasilyConfusedWithTheDigitUseLForClarity();
    public static string get_TheModifierAsyncIsNotValidForThisItemMessage();
    public static string get_TheModifierIteratorIsNotValidForThisItemMessage();
    public static string get_TheParameterHasCallerArgumentExpressionAttributeAppliedSoArgumentCouldBeOmittedMessage();
    public static string get_TheParameterizedConstructorHasAParameterNamedvalueWhichIsTheSameAsTheDefaultReturnValueNameConsiderUsingAnotherNameForTheParameterMessage();
    public static string get_TheparamsParameterCannotBeDeclaredAsByRefMessage();
    public static string get_TheparamsParameterMustBeASingleDimensionalArrayMessage();
    public static string get_ThereIsNoMatchingInInterfaceCandidatesAreMessage();
    public static string get_ThereIsNoMatchingInInterfaceMessage();
    public static string get_TheReturnTypeOfAnIteratorLambdaExpressionMustBeIEnumerableOfTIEnumeratorOfTIEnumerableOrIEnumeratorMessage();
    public static string get_TheReturnTypeOfAnIteratorMustBeIEnumerableOfTIEnumeratorOfTIEnumerableOrIEnumeratorMessage();
    public static string get_TheValuePassedToTheMethodIsNeverUsedBecauseItIsOverwrittenInTheMethodBodyBeforeBeingReadMessage();
    public static string get_ThreadStaticDoesntWorkWithInstanceFieldsMessage();
    public static string get_ThreadStaticFieldHasInitializerMessage();
    public static string get_ToReturnAValueFromAnIteratorFunctionUseYieldMessage();
    public static string get_TryCastOperandMustBeReferenceTypeButIsAValueTypeMessage();
    public static string get_TryCastOperandsMustBeClassConstrainedTypeParameterButHasNoClassConstraintMessage();
    public static string get_TryCatchAndTryFinallyStatementsCanBeMergedMessage();
    public static string get_TupleElementNameIsDisallowedAtAnyPositionMessage();
    public static string get_TupleElementNameIsOnlyAllowedAtPositionMessage();
    public static string get_TupleElementNamesMustBeUniqueMessage();
    public static string get_TupleMustContainAtLeastTwoElementsMessage();
    public static string get_TypeArgumentsCannotBeInferredFromTheQueryCandidatesAreMessage();
    public static string get_TypeArgumentsCannotBeInferredFromTheUsageTrySpecifyingTypeArgumentsExplicitlyCandidatesAreMessage();
    public static string get_TypeArgumentsForCannotBeInferredFromTheQueryMessage();
    public static string get_TypeArgumentsForCannotBeInferredFromTheUsageTrySpecifyingTypeArgumentsExplicitlyMessage();
    public static string get_TypeCastIsRedundantMessage();
    public static string get_TypeDeclarationHasTheSameNameAsInterfaceGeneratedForTypeMessage();
    public static string get_TypeDoesntFollowTheAwaitPatternMessage();
    public static string get_TypeIsNotAValidWinRTTypeMessage();
    public static string get_TypeIsNotAwaitableMessage();
    public static string get_TypeIsNotEnumerableMessage();
    public static string get_TypeNameExpectedButNameFoundMessage();
    public static string get_TypeNameExpectedMessage();
    public static string get_TypeOfCannotBeInferredFromAnExpressionContainingMessage();
    public static string get_TypeSystemValueTupleIsNotResolvedMessage();
    public static string get_UnableToChooseAMoreApplicableCandidateCandidatesAreMessage();
    public static string get_UnableToChooseAMoreSpecificCandidateCandidatesAreMessage();
    public static string get_UnreachableCode();
    public static string get_UnresolvedJumpMessage();
    public static string get_UnusedImportClause();
    public static string get_UseImplicitByValModifier();
    public static string get_UseImplicitByValModifierInParameterDeclaration();
    public static string get_UseImplicitByValParameterModifierMessage();
    public static string get_UseImplicitlyTypedVariableDeclaration();
    public static string get_UseImplicitlyTypedVariableDeclarationEvident();
    public static string get_UseImplicitlyTypedVariableDeclarationMessage();
    public static string get_UseImplicitlyTypedVariableDeclarationWhenVariableTypeIsEvidentFromInitializerExpression();
    public static string get_UsingDirectCastOperatorToCastAValueTypeToTheSameTypeIsObsoleteMessage();
    public static string get_ValueAssignedIsNotUsedInAnyExecutionPathMessage();
    public static string get_VariableMightNotBeInitializedBeforeAccessingANullReferenceExceptionCouldOccurAtRuntimeMessage();
    public static string get_VariableNameExpectedMessage();
    public static string get_VisualBasicLanguageFeatureMessage();
    public static string get_VisualBasicLanguageFeatureMessage1();
    public static string get_VisualBasicLanguageFeatureMessage2();
    public static string get_VisualBasicLanguageFeatureMessage3();
    public static string get_VisualBasicLanguageFeatureMessage4();
    public static string get_VisualBasicLanguageFeatureMessage5();
    public static string get_WhenInitializingAnArrayOfArraysBoundsCanOnlyBeSpecifiedForTheTopLevelArrayMessage();
    public static string get_WinRTCannotBeOverridableMessage();
    public static string get_WinRTClassCannotContainExternallyVisibleFieldsMessage();
    public static string get_WinRTConstructorCannotBeProtectedMessage();
    public static string get_WinRTDoesNotSupportEventsWithParametersMessage();
    public static string get_WinRTDoesNotSupportOperatorOverloadsMessage();
    public static string get_WinRTDoesNotSupportPropertiesWithParametersMessage();
    public static string get_WinRTDoesNotSupportSetterOnlyPropertiesMessage();
    public static string get_WinRTDoNotSupportsoutParametersOnConstructorsMessage();
    public static string get_WinRTEnumerationTypeShouldBeBackedByValuesOfTypeIntegerOrUIntegerMessage();
    public static string get_WinRTFieldCannotBeOfTypeEachFieldInAWinRTStructureCanOnlyBeUIntIntUIntIntUIntIntUIntSingleDoubleBooleanStringEnumCharOrItselfAStructureMessage();
    public static string get_WinRTMethodCannotBeGenericMessage();
    public static string get_WinRTMethodCannotHaveByRefParametersMessage();
    public static string get_WinRTMethodCannotHaveOptionalParametersMessage();
    public static string get_WinRTOutParametersOfArrayTypeCannotBeAnnotatedWithReadOnlyArrayAttributeSinceTheContentsOfOutputArraysAreWritableMessage();
    public static string get_WinRTParametersOfArrayTypeCannotBeBothAnnotatedWithReadOnlyArrayAttributeAndWriteOnlyArrayAttributeAtributesMessage();
    public static string get_WinRTParametersOfArrayTypeMustBeAnnotatedWithEitherReadOnlyArrayAttributeOrWriteOnlyArrayAttributeAttributeMessage();
    public static string get_WinRTSharedCannotBeProtectedMessage();
    public static string get_WinRTStructureMayOnlyContainPublicFieldsMessage();
    public static string get_WinRTStructureShouldContainAtLeastOnePublicFieldMessage();
    public static string get_WinRTTypeCannotBeGenericMessage();
    public static string get_WinRTTypeCannotBeNestedMessage();
    public static string get_WinRTTypeCannotContainBothSharedAndInstanceWithNameMessage();
    public static string get_WinRTTypeCannotContainExternallyVisibleConstantsMessage();
    public static string get_WinRTTypesCannotHaveMultipleConstructorsWithTheSameNumberOfArgumentsMessage();
    public static string get_WinRTTypesCanOnlyImplementOtherWinRTInterfacesMessage();
    public static string get_WinRTTypeShouldBeNotInheritableMessage();
    public static string get_WithEventsVariablesCanOnlyBeTypedAsClassesInterfacesOrTypeParametersWithClassConstraintsMessage();
    public static string get_WriteOnlyPropertyMustNotHaveGetterMessage();
    public static string get_WriteOnlyPropertyMustProvideSetterMessage();
    public static string get_YieldCannotBeUsedInATryCatchOrATryFinallyOrASyncLockMessage();
    public static string get_YieldCannotCurrentlyBeUsedInALINQQueryMessage();
    public static string get_YieldCanOnlyBeUsedInAMethodMarkedWithTheIteratorModifierMessage();
    public static string get_AnalysisIsNotAvailableForTheFileFileLanguageIsNotVBNETMessage();
    public static string get_ProcessingRedundancies_Text();
    public static string get_VBCompilerErrors_Text();
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.ArrayBoundsCountAnalyzer : object {
    public sealed virtual override void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.ArrayCreation.AnonymousArrayCreationAnalyzer : ElementProblemAnalyzer`1<IAnonymousArrayCreationExpression> {
    protected virtual void Run(IAnonymousArrayCreationExpression element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private static void AnalyseElementConversions(IAnonymousArrayCreationExpression element, IType elementType, IHighlightingConsumer consumer);
    private static void AnalyseElementTypeInference(IAnonymousArrayCreationExpression element, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.ArrayCreation.ArrayBoundAnalyzer : ElementProblemAnalyzer`1<IArrayBound> {
    protected virtual void Run(IArrayBound arrayBound, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    public static bool IsIntegerZeroExpression(IVBExpression vbExpression);
    public static Nullable`1<long> BoundToLong(IVBExpression bound);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.ArrayCreation.ArrayCreationProblemAnalyzer : object {
    private static void CheckArrayCreationExpression(ElementProblemAnalyzerData data, IHighlightingConsumer consumer, IArrayCreationExpression arrayCreationExpression);
    public static Nullable`1<long> GetArrayBoundValue(IArrayBound arrayBound, Boolean& sizesContainsError, Boolean& sizeIsNonConstant);
    public static IList`1<IArrayBound> GetArrayBounds(IArrayModifier arrayModifier);
    public static Nullable`1[] CheckArrayInitializer(ElementProblemAnalyzerData data, IHighlightingConsumer consumer, IAnonymousArrayCreationExpression initializer, Nullable`1[] size, IType elementType, Boolean[] sizeConstantness, bool isInternalInitializer);
    public sealed virtual override void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    public static IType GetArrayElementType(IType type);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.ArrayCreation.ArrayModifiresListAnalyzer : ElementProblemAnalyzer`1<IArrayModifiersList> {
    protected virtual void Run(IArrayModifiersList arrayModifiersList, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.ArrayDeclarationListAnalyzer : object {
    public sealed virtual override void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.ArrayParameterInLambdaAnalyzer : object {
    public sealed virtual override void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.ArrayVariableDeclarationAnalyzer : ElementProblemAnalyzer`1<IVariableDeclarationList> {
    protected virtual void Run(IVariableDeclarationList variableDeclarationList, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.AsyncAndIteratorModifierListProblemAnalyzer : ElementProblemAnalyzer`1<IModifiersList> {
    protected virtual void Run(IModifiersList element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.AsyncMethodInvocationProblemAnalyzer : ElementProblemAnalyzer`1<IInvocationStatement> {
    protected virtual void Run(IInvocationStatement invocationStmt, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.AsyncMethodProblemAnalyzer : ElementProblemAnalyzer`1<IMethodDeclaration> {
    protected virtual void Run(IMethodDeclaration element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[StandardModuleAttribute]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.AsyncProblemAnalyzerUtil : object {
    public static bool IsCorrectAsyncReturnType(IType returnType);
    public static bool HasAwaitExpression(IVBTreeNode body);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.AttributeDeclarationProblemAnalyzer : ElementProblemAnalyzer`1<IAttribute> {
    protected virtual void Run(IAttribute attribute, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.AwaitExpressionAnalyzer : ElementProblemAnalyzer`1<IAwaitExpression> {
    protected virtual void Run(IAwaitExpression awaitExpression, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private void CheckExpressionTypeConsistency(IAwaitExpression awaitExpression, IHighlightingConsumer consumer);
    private void CheckAwaitContainers(IAwaitExpression awaitExpression, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.BlockIfStatementProblemAnalyzer : ElementProblemAnalyzer`1<IBlockIfStatement> {
    protected virtual void Run(IBlockIfStatement ifStatement, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.CallerArgumentExpressionArgumentAnalyzer : ElementProblemAnalyzer`1<IVBArgument> {
    private static NodeTypeSet OurAnyStringLiteralSet;
    private static CallerArgumentExpressionArgumentAnalyzer();
    protected virtual void Run(IVBArgument argument, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private static bool IsConstant(IDeclaredElement declaredElement);
    private static bool IsAnyStringLiteral(TokenNodeType tokenType);
    [PureAttribute]
private static bool IsTrivial(IInterpolatedStringExpression expression);
    private static bool CheckStringRedundancy(IVBArgument argument);
    private static ValueTuple`2<string, string> NormalizeLineEndings(string firstText, string secondText);
    private static string NormalizeLineEndings(string text);
    [CanBeNullAttribute]
private static string TryGetMatchingCallerArgumentExpressionText(IVBArgument argument);
    [CanBeNullAttribute]
private static IParameter TryFindParameterSpecifiedInCallerArgumentExpressionAttribute(IParameter parameterWithCallerArgumentExpressionAttribute);
    private static bool NameMatches(string name, string match);
    [CanBeNullAttribute]
private static IVBArgument TryFindMatchingArgument(IIndexExpression invocationStatement, IParameter parameter);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.CallerArgumentExpressionProblemAnalyzer : ElementProblemAnalyzer`1<IParametersOwnerDeclaration> {
    protected virtual void Run(IParametersOwnerDeclaration parametersOwnerDeclaration, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private static void AnalyzeCallerArgumentExpressionAttributes(IVBParameterDeclaration parameterDeclaration, IAttribute callerArgumentExpressionAttribute, IHighlightingConsumer consumer);
    [CanBeNullAttribute]
private static IAttribute TryGetCallerArgumentExpressionAttribute(IAttributesOwnerDeclaration parameterDeclaration);
    private static bool NameMatches(string name, string match);
    [CanBeNullAttribute]
private static IVBParameterDeclaration TryGetParameterDeclaration(IVBParametersOwnerDeclaration parametersOwnerDeclaration, string name);
    private static void AnalyzeParameterArgument(IVBParameterDeclaration parameterDeclaration, IAttribute callerArgumentAttribute, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.CheckedCastProblemAnalyzer : ElementProblemAnalyzer`1<IBlockIfStatement> {
    protected virtual void Run(IBlockIfStatement ifStatement, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.CompareOfFloatsByEqualityOperatorAnalyzer : ElementProblemAnalyzer`1<IRelationalExpression> {
    protected virtual void Run(IRelationalExpression equalityExpression, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    public static bool IsNaN(IVBExpression expression);
    private static bool IsNegativeInfinity(IVBExpression expression);
    private static bool IsPositiveInfinity(IVBExpression expression);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.ConditionalNullCoalescingAnalyzer : ElementProblemAnalyzer`1<IConditionalExpression> {
    protected virtual void Run(IConditionalExpression expression, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private static void CheckTypes(IConditionalExpression expr, IHighlightingConsumer highlightingConsumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.ConditionalTernaryAnalyzer : ElementProblemAnalyzer`1<IConditionalExpression> {
    protected virtual void Run(IConditionalExpression expression, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private static void CheckTypes(IConditionalExpression expr, IHighlightingConsumer highlightingConsumer);
    public static Nullable`1<bool> GetBooleanLiteralValue(IVBExpression expression);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.DoubleCheckLockingProblemAnalyzer : ElementProblemAnalyzer`1<IBlockIfStatement> {
    private InterruptibleLazy`1<IStructuralMatcher> myMatcher;
    public DoubleCheckLockingProblemAnalyzer(ISolution solution, StructuralSearchEngine structuralSearchEngine);
    protected virtual void Run(IBlockIfStatement ifStatement, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private bool IsSimpleAssignmentAfterMemoryBarrier(IReferenceExpression referenceExpressionWithWriteAccess);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.EnumerableConversionInvocationProblemAnalyzer : ElementProblemAnalyzer`1<IIndexExpression> {
    protected virtual void Run(IIndexExpression expression, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    public static ExtensionInstance`1<IMethod> GetInvokedConversionMethod(IIndexExpression expression, IType& sourceType, IType& targetType);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.EqualExpressionComparisonAnalyser : ElementProblemAnalyzer`1<IRelationalExpression> {
    protected virtual void Run(IRelationalExpression relationalExpression, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private static bool CheckSign(TokenNodeType tokenType);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.EqualExpressionComparisonByIsAnalyser : ElementProblemAnalyzer`1<IIsExpression> {
    protected virtual void Run(IIsExpression isExpression, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.EqualExpressionComparisonByIsNotAnalyser : ElementProblemAnalyzer`1<IIsNotExpression> {
    protected virtual void Run(IIsNotExpression isNotExpression, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.EqualsMethodAnalyzer : object {
    public static IMethod GetEqualsInvocationArguments(IIndexExpression invocationExpression, IVBExpression& arg0, IVBExpression& arg1);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.ForEachStatementProblemAnalyzer : ElementProblemAnalyzer`1<IForEachStatement> {
    protected virtual void Run(IForEachStatement statement, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.GCSuppressFinalizeInvocationAnalyzer : ElementProblemAnalyzer`1<IIndexExpression> {
    private static string SuppressFinalizeID;
    protected virtual void Run(IIndexExpression element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private bool CanHaveDestructor(IType type, IPsiModule module);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.IIfAnalyzer : ElementProblemAnalyzer`1<IIndexExpression> {
    protected virtual void Run(IIndexExpression expression, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.IsExpressionProblemAnalyzer : object {
    public sealed virtual override void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private Pair`2<IVBExpression, IVBExpression> GetOperands(ITreeNode expr);
    private bool IsValidOperand(IVBExpression expr);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.IteratorMethodProblemAnalyzer : ElementProblemAnalyzer`1<IMethodDeclaration> {
    protected virtual void Run(IMethodDeclaration element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[StandardModuleAttribute]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.IteratorProblemAnalyzerUtil : object {
    public static bool IsCorrectIteratorReturnType(IType returnType);
    public static bool HasYieldStatement(IVBTreeNode body);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.IteratorPropertyProblemAnalyzer : ElementProblemAnalyzer`1<IPropertyDeclaration> {
    protected virtual void Run(IPropertyDeclaration element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.LambdaExpressionAnalyzer : ElementProblemAnalyzer`1<ILambdaExpression> {
    protected virtual void Run(ILambdaExpression lambdaExpression, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private void BodyBlockProblem(ILambdaExpression lambdaExpression, IHighlightingConsumer consumer);
    private IParameter TryFindByRefParameter(ILambdaExpression lambdaExpression);
    private void ParameterProblems(ILambdaExpression lambdaExpression, IHighlightingConsumer consumer);
    private void ReturnTypeProblems(ILambdaExpression element, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.LongLiteralEndingLowerLProblemAnalyzer : ElementProblemAnalyzer`1<IVBLiteralExpression> {
    protected virtual void Run(IVBLiteralExpression literalExpression, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.MethodGetTypeEqualsOperatorGetTypeProblemAnalyzer : ElementProblemAnalyzer`1<IIsExpression> {
    private InterruptibleLazy`1<IStructuralMatcher> myMatcher;
    public MethodGetTypeEqualsOperatorGetTypeProblemAnalyzer(StructuralSearchEngine engine, ISolution solution);
    protected virtual void Run(IIsExpression expression, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.MidAssignmentAnalyzer : ElementProblemAnalyzer`1<IMidAssignmentStatement> {
    protected virtual void Run(IMidAssignmentStatement element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private static bool AsVariableOrPropertyAccess(IVBArgument argument);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.ParameterDeclarationProblemAnalyzer : ElementProblemAnalyzer`1<IVBParameterDeclaration> {
    protected virtual void Run(IVBParameterDeclaration parameterDeclaration, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.ParenthesizedExpressionProblemAnalyzer : ElementProblemAnalyzer`1<IParenthesizedExpression> {
    protected virtual void Run(IParenthesizedExpression parenthesizedExpression, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private IVBExpression GetContainingExpression(IVBExpression expression);
    private int CalculateExpressionPriority(IVBExpression expression);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.PossibleIntendedRethrowAnalyzer : ElementProblemAnalyzer`1<IThrowStatement> {
    protected virtual void Run(IThrowStatement throwStatement, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private static ICatchStatement GetContainingCatchClause(IThrowStatement element);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.PropertyDeclarationProblemAnalyzer : ElementProblemAnalyzer`1<IPropertyDeclaration> {
    protected virtual void Run(IPropertyDeclaration propertyDeclaration, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.QueryExpressionRangeProblemAnalyzer : ElementProblemAnalyzer`1<IExpressionRangeVariableDeclaration> {
    protected virtual void Run(IExpressionRangeVariableDeclaration exprRangeVariableDeclaration, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.RedundantEmptyCaseElseAnalyzer : ElementProblemAnalyzer`1<ICaseStatement> {
    protected virtual void Run(ICaseStatement caseStatement, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.RedundantLogicalOperandAnalyzer : object {
    public sealed virtual override void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.ReferenceInGetHashCodeProblemAnalyzer : ElementProblemAnalyzer`1<IReferenceExpression> {
    protected virtual void Run(IReferenceExpression referenceExpression, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.SpecifyStringComparisonAnalyzer : ElementProblemAnalyzer`1<IVBExpression> {
    private Matchers myMatchers;
    public SpecifyStringComparisonAnalyzer(Matchers matchers);
    protected virtual void Run(IVBExpression element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private static bool Match(IStructuralMatcher matcher, IVBExpression arg1, IVBExpression arg2, IHighlightingConsumer consumer, IVBExpression element, bool negate, bool invariantCulture, bool ignoreCase);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.StaticFieldInitializationOrderAnalyzer : object {
    public sealed virtual override void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.StaticFieldsCodeSmellsldsInGenericTypeProblemAnalyzer : ElementProblemAnalyzer`1<IVariableDeclaration> {
    protected virtual void Run(IVariableDeclaration variableDeclaration, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private static bool RefersToTypeParameter(IType type, HashSet`1<ITypeParameter> typeParameters);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.ThreadStaticProblemAnalyzer : ElementProblemAnalyzer`1<IVariableDeclaration> {
    private static ClrTypeName ourClrTypeName;
    private static ThreadStaticProblemAnalyzer();
    protected virtual void Run(IVariableDeclaration fieldDeclaration, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.TryStatementProblemAnalyzer : ElementProblemAnalyzer`1<ITryStatement> {
    protected virtual void Run(ITryStatement tryStatement, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.TupleDeclaredTypeUsageProblemAnalyzer : TupleTypeUsageProblemAnalyzerBase`2<ITupleDeclaredTypeUsage, ITupleTypeComponent> {
    protected virtual void Run(ITupleDeclaredTypeUsage element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    public virtual TreeNodeCollection`1<ITupleTypeComponent> GetComponents(ITupleDeclaredTypeUsage element);
    public virtual ITreeNode GetLPar(ITupleDeclaredTypeUsage element);
    public virtual string GetComponentName(ITupleTypeComponent element);
    public virtual IVBIdentifier GetComponentIdentiifier(ITupleTypeComponent element);
    public virtual ITreeNode GetComponentSenceElement(ITupleTypeComponent element);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.TupleExpressionProblemAnalyzer : TupleTypeUsageProblemAnalyzerBase`2<ITupleExpression, ITupleComponent> {
    protected virtual void Run(ITupleExpression element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    public virtual TreeNodeCollection`1<ITupleComponent> GetComponents(ITupleExpression element);
    public virtual ITreeNode GetLPar(ITupleExpression element);
    public virtual string GetComponentName(ITupleComponent element);
    public virtual IVBIdentifier GetComponentIdentiifier(ITupleComponent element);
    public virtual ITreeNode GetComponentSenceElement(ITupleComponent element);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.TupleTypeUsageProblemAnalyzer : TupleTypeUsageProblemAnalyzerBase`2<ITupleTypeUsage, ITupleTypeComponent> {
    protected virtual void Run(ITupleTypeUsage element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    public virtual TreeNodeCollection`1<ITupleTypeComponent> GetComponents(ITupleTypeUsage element);
    public virtual ITreeNode GetLPar(ITupleTypeUsage element);
    public virtual string GetComponentName(ITupleTypeComponent element);
    public virtual IVBIdentifier GetComponentIdentiifier(ITupleTypeComponent element);
    public virtual ITreeNode GetComponentSenceElement(ITupleTypeComponent element);
}
internal abstract class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.TupleTypeUsageProblemAnalyzerBase`2 : ElementProblemAnalyzer`1<TTypleConstruction> {
    public abstract virtual TreeNodeCollection`1<TTupleComponent> GetComponents(TTypleConstruction element);
    public abstract virtual ITreeNode GetLPar(TTypleConstruction element);
    public abstract virtual string GetComponentName(TTupleComponent element);
    public abstract virtual IVBIdentifier GetComponentIdentiifier(TTupleComponent element);
    public abstract virtual ITreeNode GetComponentSenceElement(TTupleComponent element);
    protected void Analyse(TTypleConstruction element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.TypeCheck.TypeCheckAnalyzer : object {
    private void AddHighlighting(IHighlightingConsumer consumer, IHighlighting highlighting);
    protected void CheckInitializerOwnerDeclaration(IHighlightingConsumer consumer, IInitializerOwnerDeclaration initializerOwner);
    protected void Check(IHighlightingConsumer consumer, IVBExpression expression, IType targetType, IVBTypeConversionRule rule, bool strictOff, Func`1<IHighlighting> createError, Func`1<IHighlighting> createCannotConvertWarning, Func`1<IHighlighting> createImpossibleConvertWarning);
    protected void Check(IHighlightingConsumer consumer, IExpressionType expressionType, IType targetType, IVBTypeConversionRule rule, bool strictOff, Func`1<IHighlighting> createError, Func`1<IHighlighting> createCannotConvertWarning, Func`1<IHighlighting> createImpossibleConvertWarning);
    private void CheckTypes(IHighlightingConsumer consumer, IExpressionType expressionType, IType sourceType, IType targetType, IVBTypeConversionRule rule, bool strictOff, Func`1<IHighlighting> createError, Func`1<IHighlighting> createCannotConvertWarning, Func`1<IHighlighting> createImpossibleConvertWarning);
    private bool AnalyzeImpossibleConvert(IType fromType, IType targetType);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.TypeCheck.VBArgumentAnalyzer : TypeCheckAnalyzer {
    public sealed virtual override void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.TypeCheck.VBAssignmentStatementAnalyzer : TypeCheckAnalyzer {
    public sealed virtual override void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.TypeCheck.VBEnumMemberDeclarationAnalyzer : TypeCheckAnalyzer {
    public sealed virtual override void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.TypeCheck.VBFieldDeclarationAnalyzer : TypeCheckAnalyzer {
    public sealed virtual override void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.TypeCheck.VBLocalVariableDeclarationAnalyzer : TypeCheckAnalyzer {
    public sealed virtual override void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.TypeCheck.VBMemberInitializerAnalyzer : TypeCheckAnalyzer {
    public sealed virtual override void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.TypeCheck.VBPropertyDeclarationAnalyzer : TypeCheckAnalyzer {
    public sealed virtual override void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.TypeCheck.VBReturnStatementAnalyzer : TypeCheckAnalyzer {
    public sealed virtual override void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private bool IsAsyncDeclaration(IVBDeclaration functionDeclaration);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.TypeCheck.VBUsingVariableDeclarationAnalyzer : TypeCheckAnalyzer {
    public sealed virtual override void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.TypeofIsExpressionAnalyzer : ElementProblemAnalyzer`1<ITypeOfIsExpression> {
    protected virtual void Run(ITypeOfIsExpression element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VariableDeclarationProblemAnalyzer : object {
    public sealed virtual override void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private static void ProcessLocalVariable(ILocalDeclarationList localDeclarationList, IHighlightingConsumer consumer, ElementProblemAnalyzerData data);
    private static void ProcessUsingVariable(IUsingVariableDeclaration variableDeclaration, IHighlightingConsumer consumer, ElementProblemAnalyzerData data);
    private static void ProcessForVariable(IForStatement forStatement, IHighlightingConsumer consumer, ElementProblemAnalyzerData data);
    private static void ProcessForEachVariable(IForEachStatement forEachStatement, IHighlightingConsumer consumer, ElementProblemAnalyzerData data);
    private static bool CanUseTypeInference(IVBTreeNode declaration, ElementProblemAnalyzerData data);
    private static bool IsTypeEvident(IVBExpression expression);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBBaseClauseAnalyzer : ElementProblemAnalyzer`1<IClassBaseClause> {
    protected virtual void Run(IClassBaseClause element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBBaseMethodCallWithDefaultParameterAnalyzer1 : ElementProblemAnalyzer`1<IIndexExpression> {
    protected virtual void Run(IIndexExpression element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBBaseMethodCallWithDefaultParameterAnalyzer2 : ElementProblemAnalyzer`1<IInvocationStatement> {
    protected virtual void Run(IInvocationStatement element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBBaseMethodCallWithDefaultParameterAnalyzerUtil : object {
    public static bool IsSuspicious(IReferenceExpression invokedExpression, int argsCount);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBCastExpressionAnalyzer : ElementProblemAnalyzer`1<ICastExpression> {
    protected virtual void Run(ICastExpression element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBClassInheritanceAnalyzer : object {
    public sealed virtual override void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
public abstract class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBClassInheritanceProblemAnalyzerBase : object {
    private IClassLikeDeclaration myTypeDeclaration;
    private ITypeElement myTypeElement;
    protected OneToListMap`2<string, TypeMemberInstance> mySuperClassMembers;
    private HashSet`1<IDeclaredType> mySuperClassInterfaces;
    private OneToListMap`2<OverridableMemberInstance, OverridableMemberInstance> mySuperClassInterfaceImplementations;
    private HashSet`1<IDeclaredType> mySuperInterfaces;
    protected OneToSetMap`2<string, OverridableMemberInstance> mySuperInterfaceMembers;
    protected OneToListMap`2<OverridableMemberInstance, IOverridableMember> myOverridenSuperMembers;
    protected OneToListMap`2<OverridableMemberInstance, IOverridableMember> myImplementedSuperMembers;
    public VBClassInheritanceProblemAnalyzerBase(IClassLikeDeclaration typeDeclaration);
    protected abstract virtual void AddHighlighting(IHighlighting highlighting);
    protected abstract virtual void AddHighlighting(IHighlighting highlighting, DocumentRange range);
    private void AddTypeDeclarationGutterMark();
    private bool SuperTypeFilter(IDeclaredType type);
    public void Run();
    private void ExploreBaseClass(IDeclaredType declaredType, HashSet`1<ITypeElement> visited);
    private void ExploreBaseMemberSet();
    private void AnalyzeMemberForPolymorphism(ITypeMember member);
    private void HighlightInheritanceProblems(ITypeMember member, IVBTypeMemberDeclaration declaration);
    private void HighlightVBSpecificInheritanceProblems(IOverridableMember member, IVBTypeMemberDeclaration declaration, OverridableMemberInstance superMember);
    private static bool IsCompiledOptionalParameterWithoutDefaultValue(IParameter parameter);
    private void CheckNotImplemented(bool checkAbstractImplementation);
    private IDeclaredTypeUsage SelectCorrectTypeUsageNodeForSuperMember(OverridableMemberInstance member, Dictionary`2<IDeclaredType, IDeclaredTypeUsage> superTypes);
    private void AddDependencies();
    private IEnumerable`1<ITypeMember> CollectBaseAbstractMembers(ITypeElement typeElement, bool includeInterfaces);
    private void AddBaseAbstractMembers(IList`1<ITypeMember> list, ITypeElement typeElement, bool includeInterfaces, JetHashSet`1<ITypeElement> visited);
    private void AnalyzeCircularInheritance();
    [CompilerGeneratedAttribute]
private bool _Lambda$__14-0(IVBTypeMemberDeclaration d);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBConditionalExpressionAnalyzer : ElementProblemAnalyzer`1<IConditionalExpression> {
    protected virtual void Run(IConditionalExpression element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBConstantDeclarationAnalyzer : ElementProblemAnalyzer`1<IConstantDeclaration> {
    protected virtual void Run(IConstantDeclaration element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    public static bool IsGoodConstantType(IType type);
}
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBControlFlowAnalyzerBase : object {
    protected void Analyze(IVBControlFlowGraph graph, IParametersOwner function, bool isIterator, bool isAsynchronous, ITokenNode endToken, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private static IType GetExactAssignedType(ITreeNode assignment, IDeclaredElement declaredElement);
    private static bool ShouldIssueDFAProblem(IDeclaredElement variable, ITreeNode usage);
    private static IEnumerable`1<ITreeRange> SortDeadCode(IEnumerable`1<ITreeNode> elements);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBDuplicateMembersAnalyzer : object {
    public sealed virtual override void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private static IList`1<ITypeMember> GetDuplicateMembers(IList`1<ITypeMember> members, ISignatureComparer comparer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBDuplicateTypeAnalyzer : object {
    public sealed virtual override void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private bool IsPartialDeclaration(ITypeDeclaration declaration);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBEqualsMethodAnalyzer : ElementProblemAnalyzer`1<IIndexExpression> {
    protected virtual void Run(IIndexExpression indexExpression, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private static IMethod GetEqualsMethodArgs(IIndexExpression indexExpression, IVBExpression& arg0, IVBExpression& arg1);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBEventDeclarationAnalyzer : ElementProblemAnalyzer`1<IEventDeclaration> {
    protected virtual void Run(IEventDeclaration element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBExpressionStatementAnalyzer : object {
    public sealed virtual override void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBFunctionControlFlowAnalyzer : VBControlFlowAnalyzerBase {
    public sealed virtual override void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBHandlesClauseAnalyzer : ElementProblemAnalyzer`1<IHandlesClause> {
    protected virtual void Run(IHandlesClause element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private DeclaredElementInstance`1<IDelegate> GetDelegate(IReference reference);
    private ExtensionInstance`1<IMethod> GetMethod(IHandlesClause clause);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBImplicitBaseConstructorCallAnalyzer : ElementProblemAnalyzer`1<IConstructorDeclaration> {
    private IDependencyStore myDependencyStore;
    private ResolveHighlighterRegistrar myRegistrar;
    public VBImplicitBaseConstructorCallAnalyzer(IDependencyStore dependencyStore, ResolveHighlighterRegistrar registrar);
    protected virtual void Run(IConstructorDeclaration element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBImplicitBaseConstructorCallAnalyzer2 : ElementProblemAnalyzer`1<IClassDeclaration> {
    private IDependencyStore myDependencyStore;
    private ResolveHighlighterRegistrar myRegistrar;
    public VBImplicitBaseConstructorCallAnalyzer2(IDependencyStore dependencyStore, ResolveHighlighterRegistrar registrar);
    protected virtual void Run(IClassDeclaration element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBImportClauseAnalyzer : object {
    public sealed virtual override void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBImpureMethodCallForReadonlyStructFieldAnalyzer : ElementProblemAnalyzer`1<IReferenceExpression> {
    private PureAnnotationProvider myPureAnnotationProvider;
    public VBImpureMethodCallForReadonlyStructFieldAnalyzer(CodeAnnotationsCache annotationCache);
    protected virtual void Run(IReferenceExpression element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBInconsistentAccessibilityAnalyzer : ElementProblemAnalyzer`1<IVBTypeMemberDeclaration> {
    private static Func`4<ITypeUsage, IType, ITypeMember, IHighlighting> TupleComponentErrorCreator;
    private static Func`4<ITypeUsage, IType, ITypeMember, IHighlighting> ReturnTypeErrorCreator;
    private static Func`4<ITypeUsage, IType, ITypeMember, IHighlighting> ParameterTypeErrorCreator;
    private static Func`4<ITypeUsage, IType, ITypeMember, IHighlighting> TypeParameterConstraintErrorCreator;
    private static Func`4<ITreeNode, IType, ITypeMember, IHighlighting> MemberTypeConstraintErrorCreator;
    private static Func`4<ITypeUsage, IType, ITypeMember, IHighlighting> TypeArgumenttErrorCreator;
    private static VBInconsistentAccessibilityAnalyzer();
    protected virtual void Run(IVBTypeMemberDeclaration element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private bool CheckAccessibilityConsistent(ITypeElement testType, ITypeMember contextMember, CollectUsagesStageProcess process);
    private void CheckTypeArgumentsAccessibility(CollectUsagesStageProcess process, IHighlightingConsumer consumer, IReferenceName referenceName, ITypeMember typeMember);
    private void CheckTypeArgumentsAccessibility(CollectUsagesStageProcess process, IHighlightingConsumer consumer, ITreeNode typeUsageNode, IDeclaredType declaredType, ITypeMember typeMember);
    private void CheckTypeUsageAccessibility(CollectUsagesStageProcess process, IHighlightingConsumer consumer, ITypeMember typeMember, ITypeUsage typeUsage, Func`4<ITypeUsage, IType, ITypeMember, IHighlighting> eror);
    private void CheckDeclaredTypeUsageAccessibility(CollectUsagesStageProcess process, IHighlightingConsumer consumer, ITypeMember typeMember, IDeclaredTypeUsage typeUsage, Func`4<IDeclaredTypeUsage, IType, ITypeMember, IHighlighting> eror);
    private void CheckParametersAccessibility(CollectUsagesStageProcess process, IHighlightingConsumer consumer, ITypeMember typeMember, IEnumerable`1<IRegularParameterDeclaration> parameters);
    private void CheckTypeParameterConstraintAccessibility(CollectUsagesStageProcess process, IHighlightingConsumer consumer, ITypeMember typeMember, ITypeParameterOfTypeList typeParameterList);
    private void CheckTypeParameterConstraintAccessibility(CollectUsagesStageProcess process, IHighlightingConsumer consumer, ITypeMember typeMember, ITypeParameterOfMethodList typeParameterList);
    private void CheckInheritanceAccessibility(CollectUsagesStageProcess process, IHighlightingConsumer consumer, ITypeMember derivedType, IDeclaredTypeUsage usage);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBIncorrectNullableAttributeUsageAnalyzer : object {
    private NullnessProvider myNullnessCodeAnnotationProvider;
    private ContainerElementNullnessProvider myContainerElementNullnessProvider;
    public VBIncorrectNullableAttributeUsageAnalyzer(CodeAnnotationsCache codeAnnotationsCache);
    public sealed virtual override void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private static IHighlighting TryReportIssue(NullableAttributeUsage attributeUsage, IAttribute attribute, IAttributesOwnerDeclaration ownerDeclaration);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBInstanceExpressionAnalyzer : ElementProblemAnalyzer`1<IInstanceExpression> {
    protected virtual void Run(IInstanceExpression element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private IVBTypeMemberDeclaration GetContainingTypeMemberDeclaration(IInstanceExpression element);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBInterfaceInheritanceAnalyzer : ElementProblemAnalyzer`1<IInterfaceDeclaration> {
    protected virtual void Run(IInterfaceDeclaration element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private void AddTypeDeclarationGutterMark(IInterfaceDeclaration declaration, IHighlightingConsumer consumer);
    private void PutGutterMarks(IInterfaceDeclaration declaration, IHighlightingConsumer consumer);
    private void CheckCircularInterfaceDependency(IInterfaceDeclaration interfaceDeclarationParam, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBInterfaceInheritsClauseAnalyzer : ElementProblemAnalyzer`1<IInterfaceInheritsClause> {
    protected virtual void Run(IInterfaceInheritsClause element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBInvocationStatementAnalyzer : object {
    public sealed virtual override void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    public static bool NeedCallKeyword(IVBExpression expression);
    private static bool IsValidFirstExpression(IVBExpression expression);
    private static IVBExpression GetFirstExpression(IVBExpression expression);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBInvokeAsExtensionMethodAnalyzer : ElementProblemAnalyzer`1<IIndexExpression> {
    protected virtual void Run(IIndexExpression element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBLabelNameConflictAnalyzer : object {
    public sealed virtual override void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBLambdaControlFlowAnalyzer : VBControlFlowAnalyzerBase {
    public sealed virtual override void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBLinqToolsAnalyzer : object {
    public sealed virtual override void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBLocalConstantDeclarationAnalyzer : ElementProblemAnalyzer`1<ILocalVariableDeclaration> {
    protected virtual void Run(ILocalVariableDeclaration element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBLocalDeclarationsConflictAnalyzer : object {
    private static Key`1<CachedPsiValue`1<OneToListMap`2<string, ITypeMember>>> TableKey;
    private static VBLocalDeclarationsConflictAnalyzer();
    public sealed virtual override void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private ITypeMember GetConflictWithMember(IDeclaredElement element, IDeclaration declaration);
    private OneToListMap`2<string, ITypeMember> GetMembersTable(IDeclaration declaration);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBModifiersProblemAnalyzer : ElementProblemAnalyzer`1<IVBModifiersOwnerDeclaration> {
    protected virtual void Run(IVBModifiersOwnerDeclaration element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBPropertyDeclarationAnalyzer : ElementProblemAnalyzer`1<IPropertyDeclaration> {
    protected virtual void Run(IPropertyDeclaration element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBPureAnnotationProblemAnalyzer : ElementProblemAnalyzer`1<IMethodDeclarationBase> {
    [NotNullAttribute]
private PureAnnotationProvider myPureAnnotationProvider;
    public VBPureAnnotationProblemAnalyzer(CodeAnnotationsCache codeAnnotationsCache);
    protected virtual void Run(IMethodDeclarationBase element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBPureMethodCallProblemAnalyzer : ElementProblemAnalyzer`1<IInvocationStatement> {
    private PureAnnotationProvider myPureAnnotationProvider;
    public VBPureMethodCallProblemAnalyzer(CodeAnnotationsCache annotationCache);
    protected virtual void Run(IInvocationStatement element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBQualifiedNameAnalyzer : object {
    public sealed virtual override void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private static void CheckQualifierIsRedundant(IReferenceName referenceName, VBSmartResolverProcess smartResolver, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private static bool IsNonRedundantNamespaceFromSettings(IReferenceName qualifier, ElementProblemAnalyzerData data);
    private static void CheckQualifierIsRedundant(IReferenceExpression referenceExpression, VBSmartResolverProcess smartResolver, IHighlightingConsumer consumer);
    private static bool IsKeyword(IVBIdentifier identifier);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBReadWriteAccessAnalyzer : ElementProblemAnalyzer`1<IReferenceExpression> {
    private bool IsReadonlyAutoPropertyUsageInsideConstructor(IReferenceExpression element, IProperty property, ElementProblemAnalyzerData data);
    protected virtual void Run(IReferenceExpression referenceExpression, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private static bool IsQualifierForWriteAccess(IReferenceExpression referenceExpression);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBReferenceEqualsMethodAnalyzer : ElementProblemAnalyzer`1<IIndexExpression> {
    protected virtual void Run(IIndexExpression indexExpression, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private static IMethod GetReferenceEqualsMethodArgs(IIndexExpression indexExpression, IVBExpression& arg0, IVBExpression& arg1);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBStaticProblemAnalyzer : ElementProblemAnalyzer`1<IReferenceExpression> {
    protected virtual void Run(IReferenceExpression referenceExpression, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBSubAnalyzer : ElementProblemAnalyzer`1<IMethodDeclarationBase> {
    protected virtual void Run(IMethodDeclarationBase methodDeclaration, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBTypeImplementsClauseAnalyzer : ElementProblemAnalyzer`1<ITypeImplementsClause> {
    protected virtual void Run(ITypeImplementsClause element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.VBVariableDeclarationAnalyzer : ElementProblemAnalyzer`1<IVariableDeclaration> {
    protected virtual void Run(IVariableDeclaration element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private bool IsSuitableType(IType type);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.WriteToInstanceExpressionAnalyzer : ElementProblemAnalyzer`1<IInstanceExpression> {
    protected virtual void Run(IInstanceExpression instanceExpression, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.Analysis.YieldStatementAnalyzer : TypeCheckAnalyzer {
    public sealed virtual override void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    protected void Run(IYieldStatement yieldStatement, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private void CheckExpressionTypeConsistency(IYieldStatement yieldStatement, IHighlightingConsumer consumer);
    private void CheckYieldContainers(IYieldStatement yieldStatement, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.VB.Stages.ConvertToAutoPropertyAnalyzer : ElementProblemAnalyzer`1<IPropertyDeclaration> {
    protected virtual void Run(IPropertyDeclaration declaration, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ExtensionAttribute]
[StandardModuleAttribute]
internal class JetBrains.ReSharper.Daemon.VB.Stages.ElementProblemAnalyzerDataExtensions : object {
    [NotNullAttribute]
private static Key`1<Boxed`1<bool>> IsStrictOffKey;
    [NotNullAttribute]
private static Key`1<Boxed`1<VBLanguageLevel>> LanguageLevelKey;
    private static ElementProblemAnalyzerDataExtensions();
    [PureAttribute]
[ExtensionAttribute]
public static bool IsStrictOff(ElementProblemAnalyzerData data, ITreeNode node);
    [CanBeNullAttribute]
[PureAttribute]
[ExtensionAttribute]
public static CollectUsagesStageProcess TryGetUsageCheckerProcess(ElementProblemAnalyzerData data);
    [CanBeNullAttribute]
[PureAttribute]
[ExtensionAttribute]
public static VBSmartResolverProcess TryGetSmartResolverProcess(ElementProblemAnalyzerData data);
    [PureAttribute]
[ExtensionAttribute]
public static VBLanguageLevel GetVBLanguageLevel(ElementProblemAnalyzerData data, ITreeNode node);
    [PureAttribute]
[ExtensionAttribute]
public static bool IsVB16_9Supported(ElementProblemAnalyzerData data, ITreeNode node);
    [PureAttribute]
[ExtensionAttribute]
public static bool IsVB16Supported(ElementProblemAnalyzerData data, ITreeNode node);
    [PureAttribute]
[ExtensionAttribute]
public static bool IsVB15_5Supported(ElementProblemAnalyzerData data, ITreeNode node);
    [PureAttribute]
[ExtensionAttribute]
public static bool IsVB15_3Supported(ElementProblemAnalyzerData data, ITreeNode node);
    [PureAttribute]
[ExtensionAttribute]
public static bool IsVB15Supported(ElementProblemAnalyzerData data, ITreeNode node);
    [PureAttribute]
[ExtensionAttribute]
public static bool IsVB14Supported(ElementProblemAnalyzerData data, ITreeNode node);
    [PureAttribute]
[ExtensionAttribute]
public static bool IsVB12Supported(ElementProblemAnalyzerData data, ITreeNode node);
    [PureAttribute]
[ExtensionAttribute]
public static bool IsVB11Supported(ElementProblemAnalyzerData data, ITreeNode node);
    [PureAttribute]
[ExtensionAttribute]
public static bool IsVB10Supported(ElementProblemAnalyzerData data, ITreeNode node);
    [PureAttribute]
[ExtensionAttribute]
public static bool IsVB9Supported(ElementProblemAnalyzerData data, ITreeNode node);
    [PureAttribute]
[ExtensionAttribute]
public static bool IsVB8Supported(ElementProblemAnalyzerData data, ITreeNode node);
}
[DaemonStageAttribute("16")]
public class JetBrains.ReSharper.Daemon.VB.Stages.NewLanguageConstructStage : VBDaemonStageBase {
    public virtual IDaemonStageProcess CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind, IVBFile vbFile);
}
internal class JetBrains.ReSharper.Daemon.VB.Stages.NewLanguageConstructStageProcess : VBDaemonStageProcessBase {
    private VBLanguageLevel myLevel;
    public NewLanguageConstructStageProcess(IDaemonProcess daemonProcess, VBLanguageLevel level, IContextBoundSettingsStore settingsStore, IVBFile vbFile);
    public virtual void Execute(Action`1<DaemonStageResult> committer);
    public virtual void VisitAwaitExpression(IAwaitExpression awaitExpressionParam, IHighlightingConsumer context);
    public virtual void VisitYieldStatement(IYieldStatement yieldStatementParam, IHighlightingConsumer context);
    public virtual void VisitModifiersList(IModifiersList modifiersList, IHighlightingConsumer context);
    public virtual void VisitLambdaExpression(ILambdaExpression lambdaExpressionParam, IHighlightingConsumer context);
    public virtual void VisitInterfaceDeclaration(IInterfaceDeclaration interfaceDeclaration, IHighlightingConsumer context);
    public virtual void VisitModuleDeclaration(IModuleDeclaration moduleDeclaration, IHighlightingConsumer context);
    public virtual void VisitReferenceExpression(IReferenceExpression referenceExpression, IHighlightingConsumer consumer);
    public virtual void VisitTypeOfIsExpression(ITypeOfIsExpression typeOfIsExpression, IHighlightingConsumer consumer);
    public virtual void VisitPropertyDeclaration(IPropertyDeclaration propertyDeclaration, IHighlightingConsumer consumer);
    public virtual void VisitDisableWarningPreprocessorDirective(IDisableWarningPreprocessorDirective disableWarningPreprocessorDirective, IHighlightingConsumer consumer);
    public virtual void VisitEnableWarningPreprocessorDirective(IEnableWarningPreprocessorDirective enableWarningPreprocessorDirective, IHighlightingConsumer consumer);
    public virtual void VisitVBLiteralExpression(IVBLiteralExpression literalExpression, IHighlightingConsumer consumer);
    public virtual void VisitTupleDeclaredTypeUsage(ITupleDeclaredTypeUsage tupleDeclaredTypeUsage, IHighlightingConsumer consumer);
    public virtual void VisitTupleExpression(ITupleExpression tupleExpression, IHighlightingConsumer consumer);
    public virtual void VisitTupleTypeUsage(ITupleTypeUsage tupleTypeUsage, IHighlightingConsumer consumer);
    [CompilerGeneratedAttribute]
private void _Lambda$__2-0(IVBFile vbFile, IHighlightingConsumer consumer);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.AccessRightsErrorHandler : object {
    public int CustomTextFormatter { get; }
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public int get_CustomTextFormatter();
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    private AccessRights GetAccessRights(IDeclaredElement declaredElement);
    public sealed virtual override IHighlighting Run(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.ArgumentsMismatchErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.CantUseAccessorDirectlyErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.CantUseTypeArgumentsErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.DocCommentErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.DynamicErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.IncorrectAwaitablePatternErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.IncorrectParameterNumberErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.IncorrectParameterNumberInMidErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.IncorrectParameterTypeErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.IncorrectQualifierUsageErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.IncorrectSignatureErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.IncorrectTypeParameterNumberErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
    private ITypeArgumentList TypeArgumentList(ITreeNode node);
    private int TypeParametersCount(IDeclaredElement declaredElement);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.MoreApplicableNotFoundErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.MoreSpecificNotFoundErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.MultipleCandidatesErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.NamespaceExpectedErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.NotAttributeErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.NotEventErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.NotInvocableErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.NotMethodErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.NotPropertyInDictionaryAccessErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.NotResolvedErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
    private IHighlighting HandleForEachStatement(IForEachStatement forEachStatement);
    private IHighlighting HandleAwaitExpression(IReference reference, IAwaitExpression awaitExpression);
    private IHighlighting HandleImportClause(IImportClause importClause, IReferenceName referenceName);
    private IHighlighting HandleDictionaryAccessExpression(IReference reference, IDictionaryAccessExpression dictionaryAccessExpression);
    private IHighlighting HandleOperatorReference(IVBOperatorReference reference);
    private IHighlighting HandleObjectCreationConstructor(IReference reference, IObjectCreationExpression objectCreationExpression);
    private IHighlighting HandleIndexReference(IIndexExpressionReference reference);
    private IHighlighting HandleDefaultPropertyProblem(IReference reference, IType type);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.NotResolvedInterfaceSpecifierErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.NotResolvedInTextErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.NotValidHereErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.NotVariableErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.NotVariableInInitializerErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.StaticErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.StrictnessFailedErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.TypeExpectedErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.TypeInferenceFailedErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
    private IHighlighting HandleMultipleCandidates(IReference reference, IList`1<IDeclaredElement> candidates);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.VB.Stages.ResolveHandlers.UseLocalBeforeDeclarationErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual override IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual override IHighlighting Run(IReference reference);
    private bool InitializeItself(IDeclaredElement declaredElement, IReference reference);
}
[ConfigurableSeverityHighlightingAttribute("", "VBASIC")]
public class JetBrains.ReSharper.Daemon.VB.Stages.StructuralPatterns.VBPredefinedPatternHighlighting : StructuralSearchPatternHighlightingBase {
    public string ConfigurableSeverityId { get; }
    public VBPredefinedPatternHighlighting(IPredefinedPattern pattern, IStructuralMatchResult result);
    public sealed virtual override string get_ConfigurableSeverityId();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Daemon.VB.Stages.StructuralPatterns.VBPredefinedPatterns : object {
    private IStructuralSearcherFactory myStructuralSearcherFactory;
    private VBLanguage myVbLanguage;
    public VBPredefinedPatterns(ILanguageManagerServiceProvider`2<VBLanguage, IStructuralSearcherFactory> structuralSearcherFactoryProvider);
    private IPredefinedPattern CreatePattern(IStructuralSearcherFactory structuralSearcherFactory, string id, string compoundItemName, string groupName, Severity severity, string pattern, string comment, string replace, string replaceComment, bool matchSimilar, TreatBinaryExpressionsEquivalent binaryExpressions, IPlaceholder[] placeholders);
    public sealed virtual override IEnumerable`1<IPredefinedPattern> IPredefinedCustomPatternsSource_GetPatterns();
}
[DaemonStageAttribute("16")]
public class JetBrains.ReSharper.Daemon.VB.Stages.StructuralPatterns.VBPredefinedPatternsStage : PredefinedPatternsStage`2<VBLanguage, IVBFile> {
    public VBPredefinedPatternsStage(PredefinedCustomPatternsManager patternsManager);
    protected virtual IDaemonStageProcess CreateStageProcess(IDaemonProcess process, IContextBoundSettingsStore settings, IEnumerable`1<KeyValuePair`2<ICustomPattern, IStructuralMatcher>> matchers, IVBFile file);
}
public class JetBrains.ReSharper.Daemon.VB.Stages.StructuralPatterns.VBPredefinedPatternsStageProcess : VBStructuralSearchDaemonStageProcess {
    public VBPredefinedPatternsStageProcess(IDaemonProcess process, IContextBoundSettingsStore settingsStore, IEnumerable`1<KeyValuePair`2<ICustomPattern, IStructuralMatcher>> matchers, IVBFile psiFile);
    protected virtual IHighlighting CreateHighlighting(IStructuralMatchResult result, ICustomPattern pattern);
}
[DaemonStageAttribute("16")]
public class JetBrains.ReSharper.Daemon.VB.Stages.StructuralPatterns.VBStructuralSearchDaemonStage : VBDaemonStageBase {
    private CustomPatternMatcherManager myCustomPatternMatcherManager;
    public VBStructuralSearchDaemonStage(CustomPatternMatcherManager customPatternMatcherManager);
    public virtual IDaemonStageProcess CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind, IVBFile file);
}
public class JetBrains.ReSharper.Daemon.VB.Stages.StructuralPatterns.VBStructuralSearchDaemonStageProcess : StructuralSearchDaemonStageProcessBase {
    private Dictionary`2<ICustomPattern, IStructuralMatcher> myExpressionMatchers;
    private Dictionary`2<ICustomPattern, IStructuralMatcher> myStatementMatchers;
    public VBStructuralSearchDaemonStageProcess(IDaemonProcess process, IContextBoundSettingsStore settingsStore, IEnumerable`1<KeyValuePair`2<ICustomPattern, IStructuralMatcher>> matchers, IVBFile psiFile);
    public virtual bool InteriorShouldBeProcessed(ITreeNode element, IMatchingContext context);
    public virtual void ProcessBeforeInterior(ITreeNode element, IMatchingContext context);
}
[CompilerIdForLanguageAttribute("UnusedVariable.Compiler", "VBASIC", "BC42024")]
public class JetBrains.ReSharper.Daemon.VB.Stages.UsageChecking.UnusedVariableCompilerWarningCompilerId : object {
}
internal class JetBrains.ReSharper.Daemon.VB.Stages.UsageChecking.VBConvertToConstantUtil : object {
    public static bool CanConvertToConstant(ITypeOwner variable);
}
public class JetBrains.ReSharper.Daemon.VB.Stages.UsageChecking.VBPresentationHelper : object {
    public sealed virtual override string DeclaredElementName(IDeclaredElement declaredElement);
    public sealed virtual override string GetVirtualTerm(IDeclaration declaration);
    public sealed virtual override string GetInternalTerm(IDeclaration declaration);
    public sealed virtual override string GetStaticTerm();
    public sealed virtual override string GetSealedTerm(IDeclaration declaration);
    public sealed virtual override string GetReadOnlyTerm(IDeclaration declaration);
    public sealed virtual override string GetGetOnlyTerm(IDeclaration declaration);
    public sealed virtual override string GetInitOnlyTerm(IDeclaration declaration);
    public sealed virtual override DocumentRange ReturnTypeRange(IDeclaration declaration);
    public sealed virtual override DocumentRange VirtualMemberNeverOverriddenRange(ITypeMemberDeclaration declaration);
    public sealed virtual override DocumentRange LowerAccessHighlightingRange(IDeclaration declaration);
    public sealed virtual override DocumentRange TypeUsageRange(IDeclaration declaration);
}
public class JetBrains.ReSharper.Daemon.VB.Stages.UsageChecking.VBSpecificElementPropertiesCalculator : object {
    public sealed virtual override bool IsPartialMethod(IMethod method);
    public sealed virtual override bool IsPartialClass(IClass classType);
    public sealed virtual override bool IsStaticClass(IClass classType);
    public sealed virtual override bool CanConvertToConstant(IField field);
    public sealed virtual override bool CanConvertToConstant(ILocalVariable local);
    public sealed virtual override bool IsRedundantOverload(ITypeMember member);
    public sealed virtual override bool IsPrimaryConstructor(IConstructor constructor);
    public sealed virtual override bool HasPositionalParameters(ITypeElement typeElement);
    public sealed virtual override bool MethodDeclarationHasBody(IDeclaration declaration);
    public sealed virtual override bool IsInitializedInDeclaration(IDeclaration declaration);
    public sealed virtual override bool IsMemberVirtualByConvention(ITypeElement typeElement, ITypeMember typeMember);
    public sealed virtual override IDeclaration GetContainingTypeMember(IDeclaration declaration);
    public sealed virtual override IEnumerable`1<ITypeMember> GetPositionalMembers(ITypeElement typeElement);
}
[StandardModuleAttribute]
public class JetBrains.ReSharper.Daemon.VB.Stages.UsageChecking.VBTypeConstraintsUtil : object {
    public static ICollection`1<ITypeUsageConstraint> TypeConstraintsFromUsage(IDeclaredElement element, IType elementType, IVBExpression expression);
    private static ICollection`1<ITypeUsageConstraint> TypeConstraintsFromUsage(IDeclaredElement element, IType elementType, IVBExpression expression, List`1<ILocalVariable> variablesToCorrectType);
    private static ICollection`1<ITypeUsageConstraint> OneOrTwo(ITypeUsageConstraint first, ITypeUsageConstraint second);
    private static bool CanUseSuperMember(IExpression expression, OverridableMemberInstance superMember);
    private static ICollection`1<ITypeUsageConstraint> LocalVariableTypeConstraints(ILocalVariable variable, IType assumeType, List`1<ILocalVariable> variablesToCorrectType);
    public static IEnumerable`1<ILocalVariable> LocalsToCorrectType(IDeclaredElement element, IType newType, IVBExpression usage);
}
public class JetBrains.ReSharper.Daemon.VB.Stages.UsageChecking.VBUsageAnalyzer : UsageAnalyzer {
    public VBUsageAnalyzer(IEnumerable`1<IUsageInspectionsSuppressor> suppressors, IEnumerable`1<ICustomUsageAnalysisProcessor> customProcessors);
    public virtual void ProcessElement(ITreeNode node, IParameters parameters);
    protected virtual VariableUsageState GetExpressionAccessState(IExpression expr, IReference reference);
    protected virtual void ProcessDeclaration(IDeclaration declaration, IDeclaredElement element, IParameters parameters);
    protected virtual ICollection`1<ITypeUsageConstraint> TypeConstraintsFromUsage(IDeclaredElement declaredElement, IType elementType, ITreeNode usageNode, IParameters parameters);
    protected virtual void ProcessUsage(IDeclaredElement element, ITreeNode node, IReference reference, IParameters parameters);
    protected virtual void ProcessMemberUsage(ITypeMember member, IReference reference, IParameters parameters);
    protected virtual UsageState GetParameterUsageState(IParameter parameter, IReference reference, IParameters parameters);
    private static bool IsPassedToSameParameter(IReferenceExpression expression, IParameter parameter);
    private static bool IsPassedToSameParameter(IVBArgument argument, IParameter parameter);
    protected virtual UsageState GetReturnValueUsageState(IExpression expression, bool isCallToBase);
    protected virtual bool CanMakeFieldReadonly(UsageState accessState, IReference reference, IField field);
    protected virtual bool CanMakeAutoPropertyGetOnly(UsageState accessState, IReference reference, IProperty property);
    protected virtual bool CanMakePropertyInitOnly(UsageState accessState, IReference reference, IProperty property);
    private static bool IsConstructorWriteUsage(ITreeNode node, ITypeOwner typeOwner);
    protected virtual bool IsCallToBase(IReference reference, IOverridableMember member);
    protected virtual ITreeNode GetContainingTypeOfExpression(IReference reference);
    protected virtual ImplicitUseFlags GetImplicitUseFlagsByParameterUsage(ITreeNode treeNode);
    protected virtual bool IsAssignToDelegate(IReference reference);
    protected virtual VariableUsageState GetVariableUsageState(IDeclaredElement variable, IReference reference, IParameters parameters);
    private VariableUsageState GetCollectionAccessType(IReference reference);
    public virtual bool ShouldSkipUsage(IReference reference, IDeclaredElement declaredElement);
    protected virtual bool ShouldSkipUsageForCounter(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Daemon.VB.Stages.UsageChecking.VBUsageCheckingServices : CLRUsageCheckingServices {
    public VBUsageCheckingServices(FileDependency fileDependency, IEnumerable`1<IUsageInspectionsSuppressor> suppressors, IEnumerable`1<ICustomUsageAnalysisProcessor> customProcessors);
    public virtual bool GetUnusedDeclarationsSupported();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Daemon.VB.Stages.VBCompilerWarningProcessor : CompilerWarningProcessorBase {
    private static String[] DefaultStrictOffIgnoreWarnings;
    private static String[] DefaultStrictOnWarningsAsErrors;
    private static VBCompilerWarningProcessor();
    protected virtual CompilerWarningPreProcessResult PreProcess(HighlightingInfo highlightingInfo, IReadOnlyCollection`1<string> compilerIds, IFile psiFile);
    private static bool IsMentioned(IEnumerable`1<string> compilerIds, IReadOnlyCollection`1<string> list);
}
public abstract class JetBrains.ReSharper.Daemon.VB.Stages.VBDaemonStageProcessBase : TreeNodeVisitor`1<IHighlightingConsumer> {
    private IDaemonProcess myDaemonProcess;
    private IContextBoundSettingsStore mySettingsStore;
    private IVBFile myFile;
    private IVBTypeConversionRule myTypeConversionRule;
    public IFile IDaemonStageProcessWithPsiFile_File { get; }
    public IDaemonProcess DaemonProcess { get; }
    public IDocument Document { get; }
    public IVBTypeConversionRule TypeConversionRule { get; }
    public IContextBoundSettingsStore SettingsStore { get; }
    public IVBFile File { get; }
    protected VBDaemonStageProcessBase(IDaemonProcess daemonProcess, IContextBoundSettingsStore settingsStore, IVBFile file);
    public sealed virtual override IFile get_IDaemonStageProcessWithPsiFile_File();
    public sealed virtual override IDaemonProcess get_DaemonProcess();
    public IDocument get_Document();
    public IVBTypeConversionRule get_TypeConversionRule();
    public IContextBoundSettingsStore get_SettingsStore();
    public abstract virtual override void Execute(Action`1<DaemonStageResult> committer);
    protected void HighlightInFile(Action`2<IVBFile, IHighlightingConsumer> fileHighlighter, Action`1<DaemonStageResult> commiter);
    public IVBFile get_File();
    public virtual override bool InteriorShouldBeProcessed(ITreeNode element, IHighlightingConsumer context);
    public sealed virtual override bool IsProcessingFinished(IHighlightingConsumer context);
    public virtual override void ProcessBeforeInterior(ITreeNode element, IHighlightingConsumer consumer);
    public virtual override void ProcessAfterInterior(ITreeNode element, IHighlightingConsumer consumer);
}
[DaemonStageAttribute("0")]
public class JetBrains.ReSharper.Daemon.VB.Stages.VBErrorStage : VBDaemonStageBase {
    private ElementProblemAnalyzerRegistrar myAnalyzerRegistrar;
    public VBErrorStage(ElementProblemAnalyzerRegistrar analyzerRegistrar);
    public virtual IDaemonStageProcess CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind, IVBFile vbFile);
}
internal class JetBrains.ReSharper.Daemon.VB.Stages.VBFileStructure : FileStructureWithRegionsBase {
    private Predicate`1<DocumentRange> myIsRangeInvalidated;
    private JetHashSet`1<IVBTypeMemberDeclaration> myTypeMembers;
    public IReadOnlyCollection`1<IVBTypeMemberDeclaration> MembersToRehighlight { get; }
    private IReadOnlyCollection`1<ITypeMemberDeclaration> MembersToRehighlightImpl { get; }
    public VBFileStructure(Predicate`1<DocumentRange> IsRangeInvalidated, IVBFile file, IContextBoundSettingsStore settingsStore);
    private void Execute(IFile file);
    public IReadOnlyCollection`1<IVBTypeMemberDeclaration> get_MembersToRehighlight();
    private sealed virtual override IReadOnlyCollection`1<ITypeMemberDeclaration> get_MembersToRehighlightImpl();
    private static String[] GetWarningIds(TreeNodeCollection`1<IVBIdentifier> ids);
    protected virtual bool SkipNode(ITreeNode sibling);
    protected virtual ITreeNode FindNextValuableTreeNodeForDisableOnceComment(ITreeNode node);
}
[FileStructureExplorerAttribute("16")]
public class JetBrains.ReSharper.Daemon.VB.Stages.VbFileStructureExplorer : object {
    public sealed virtual override IFileStructure ExploreFile(IFile file1, IContextBoundSettingsStore settingsStore, Predicate`1<DocumentRange> isRangeInvalidated);
}
public abstract class JetBrains.ReSharper.Daemon.VB.Stages.VBHighlightingAttributeIds : object {
    public static string KEYWORD;
    public static string STRING;
    public static string NUMBER;
    public static string COMMENT;
    public static string PREPROCESSOR_KEYWORD;
    public static string PREPROCESSOR_INACTIVE_BRANCH;
    public static string CONSTANT_IDENTIFIER;
    public static string EVENT_IDENTIFIER;
    public static string FIELD_IDENTIFIER;
    public static string SHARED_FIELD_IDENTIFIER;
    public static string PROPERTY_IDENTIFIER;
    public static string LOCAL_VARIABLE;
    public static string MUTABLE_LOCAL_VARIABLE;
    public static string METHOD_IDENTIFIER;
    public static string SHARED_METHOD_IDENTIFIER;
    public static string OVERLOADED_OPERATOR;
    public static string CLASS_IDENTIFIER;
    public static string STRUCT_IDENTIFIER;
    public static string DELEGATE_IDENTIFIER;
    public static string ENUM_IDENTIFIER;
    public static string TYPE_PARAMETER;
    public static string INTERFACE_IDENTIFIER;
    public static string NAMESPACE_IDENTIFIER;
    public static string PARAMETER_IDENTIFIER;
    public static string GetHighlightAttributeForTypeElement(ITypeElement typeElement);
}
[ObsoleteAttribute("Implement IHighlighting directly")]
public abstract class JetBrains.ReSharper.Daemon.VB.Stages.VBHighlightingBase : object {
    private string ErrorStripeToolTip { get; }
    private string ToolTip { get; }
    private sealed virtual override string get_ErrorStripeToolTip();
    public abstract virtual override bool IsValid();
    public abstract virtual override DocumentRange CalculateRange();
    private sealed virtual override string get_ToolTip();
}
[DaemonStageAttribute("16")]
public class JetBrains.ReSharper.Daemon.VB.Stages.VBIdentifierHighlighterStage : VBDaemonStageBase {
    private ResolveHighlighterRegistrar myResolveHighlighterRegistrar;
    private ConfigurableIdentifierHighlightingStageService myIdentifierHighlightingStageService;
    public VBIdentifierHighlighterStage(ResolveHighlighterRegistrar resolveHighlighterRegistrar, ConfigurableIdentifierHighlightingStageService identifierHighlightingStageService);
    public virtual IDaemonStageProcess CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind, IVBFile file1);
    protected virtual bool IsSupported(IPsiSourceFile sourceFile, IContextBoundSettingsStore settingsStore);
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IdentifierHighlightings")]
[DaemonTooltipProviderAttribute("JetBrains.ReSharper.Daemon.VB.Stages.VBIdentifierTooltipProvider")]
public class JetBrains.ReSharper.Daemon.VB.Stages.VBIdentifierHighlighting : object {
    [CompilerGeneratedAttribute]
private DocumentRange _Range;
    [CompilerGeneratedAttribute]
private string _AttributeId;
    public DocumentRange Range { get; public set; }
    public string ToolTip { get; }
    public string AttributeId { get; }
    public VBIdentifierHighlighting(string attributeId, DocumentRange range);
    [CompilerGeneratedAttribute]
public DocumentRange get_Range();
    [CompilerGeneratedAttribute]
public void set_Range(DocumentRange AutoPropertyValue);
    public sealed virtual override string get_ToolTip();
    [CompilerGeneratedAttribute]
public sealed virtual override string get_AttributeId();
    public sealed virtual override bool IsValid();
    public sealed virtual override DocumentRange CalculateRange();
    public sealed virtual override Nullable`1<int> GetStatisticsKey();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Daemon.VB.Stages.VBIdentifierTooltipProvider : IdentifierTooltipProvider`1<VBLanguage> {
    [CompilerGeneratedAttribute]
private static DeclaredElementPresenterTextStyles _Styles;
    public static DeclaredElementPresenterTextStyles Styles { get; }
    private static VBIdentifierTooltipProvider();
    public VBIdentifierTooltipProvider(ISolution solution, IDeclaredElementDescriptionPresenter presenter, Lifetime lifetime, DeclaredElementPresenterTextStylesService textStylesService, IIdentifierTooltipSuppressor identifierTooltipSuppressor);
    protected virtual bool ShouldShowTooltip(IHighlighter highlighter);
    [CompilerGeneratedAttribute]
public static DeclaredElementPresenterTextStyles get_Styles();
}
public abstract class JetBrains.ReSharper.Daemon.VB.Stages.VBIncrementalDaemonStageProcess : VBDaemonStageProcessBase {
    private OneToListMap`2<IVBTypeMemberDeclaration, DocumentRange> myMemberRanges;
    protected VBIncrementalDaemonStageProcess(IDaemonProcess daemonProcess, IContextBoundSettingsStore settingsStore, IVBFile vbFile);
    private void ExploreMemberRanges(VBFileStructure fileStructure);
    public virtual void Execute(Action`1<DaemonStageResult> committer);
    [CompilerGeneratedAttribute]
private bool _Lambda$__2-0(DocumentRange r);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Daemon.VB.Stages.VBLanguageSpecificDaemonBehavior : LanguageSpecificDaemonBehavior {
    public virtual ErrorStripeRequestWithDescription InitialErrorStripe(IPsiSourceFile sourceFile);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Daemon.VB.Stages.VBMethodSeparatorFactory : object {
    public sealed virtual override void CollectSeparators(IFile file, MethodSeparatorConsumer consumer);
}
internal class JetBrains.ReSharper.Daemon.VB.Stages.VBMethodSeparatorProcessor : FirstApplicableChildSkippingProcessor {
    public VBMethodSeparatorProcessor(LanguageService service);
    public virtual bool IsApplicable(ITreeNode element);
}
[NamingConsistencyCheckerAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Daemon.VB.Stages.VBNamingConsistencyChecker : ClrNamingConsistencyCheckerBase {
    private ISettingsStore mySettingsStore;
    public VBNamingConsistencyChecker(ISettingsStore settingsStore);
    public virtual bool IsApplicable(IPsiSourceFile sourceFile);
    protected virtual bool IsUnnamedElement(IDeclaration declaration);
}
internal class JetBrains.ReSharper.Daemon.VB.Stages.VBResolveProblemHighlighter : object {
    private ResolveHighlighterRegistrar myRegistrar;
    private IReferenceProvider myReferenceProvider;
    public VBResolveProblemHighlighter(IFile file, ResolveHighlighterRegistrar resolveHighlighterRegistrar);
    public void Run(ITreeNode element, IHighlightingConsumer consumer);
    public void Run(ITreeNode element, IReference reference, IHighlightingConsumer consumer);
    private static void CheckForObsolete(IHighlightingConsumer consumer, IDeclaredElement declaredElement, ITreeNode element, IReference reference);
}
public class JetBrains.ReSharper.Daemon.VB.Stages.VBSmartResolverProcess : object {
    private IDaemonProcess myDaemonProcess;
    private IVBFile myFile;
    private HashSet`1<IImportClause> myUsedImportClauses;
    private Dictionary`2<IReference, IResolveResult> myUnqualifiedResolve;
    private HashSet`1<IDeclaredElement> myLocalNameConflict;
    public IFile File { get; }
    public IDaemonProcess DaemonProcess { get; }
    public VBSmartResolverProcess(IDaemonProcess daemonProcess, IVBFile file);
    public sealed virtual override IFile get_File();
    public sealed virtual override IDaemonProcess get_DaemonProcess();
    public sealed virtual override void Execute(Action`1<DaemonStageResult> committer);
    public bool IsImportClauseUsed(IImportClause clause);
    public bool HasLocalDeclarationConflict(IDeclaredElement element);
    public bool HasSameResolveAsUnqualified(IReference reference);
}
[DaemonStageAttribute("16")]
public class JetBrains.ReSharper.Daemon.VB.Stages.VBSmartResolverStage : VBDaemonStageBase {
    public virtual IDaemonStageProcess CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind, IVBFile vbFile);
    protected virtual bool IsSupported(IPsiSourceFile sourceFile, IContextBoundSettingsStore settingsStore);
}
public abstract class JetBrains.ReSharper.Daemon.VB.Stages.VBSwitchableIncrementalDaemonStageProcess : VBIncrementalDaemonStageProcess {
    protected bool _isEnabled;
    protected VBSwitchableIncrementalDaemonStageProcess(IDaemonProcess daemonProcess, IContextBoundSettingsStore settingsStore, IVBFile vbFile, bool isEnabled);
    public virtual void Execute(Action`1<DaemonStageResult> committer);
}
[StandardModuleAttribute]
internal class JetBrains.ReSharper.Daemon.VB.Stages.VBSyntaxHighlighter : object {
    private static TreeNodeActionType FindErrorElementPredicate(ITreeNode node);
    private static bool IsUnexpectedTokenMessage(IErrorElement element);
    public static void HighlightSyntax(IDaemonProcess process, ITreeNode element, IHighlightingConsumer consumer);
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.VBProjectFileType", "0")]
public class JetBrains.ReSharper.Daemon.VB.Stages.VBSyntaxHighlighting : SyntaxHighlighting {
    public VBSyntaxHighlighting(VBProjectFileType projectFileType, SolutionsManager solutionManager, ITextControlSchemeManager textControlSchemeManager);
    protected virtual bool IsString(TokenNodeType tokenType);
    protected virtual bool IsKeyword(TokenNodeType tokenType);
}
internal class JetBrains.ReSharper.Daemon.VB.Stages.VBWinRTProcessHelper : object {
    public void CheckWinRTType(ITypeUsage typeUsage, IHighlightingConsumer consumer);
    public void CheckWinRTType(IDeclaredTypeUsage typeUsage, IHighlightingConsumer consumer);
}
[DaemonStageAttribute("16")]
public class JetBrains.ReSharper.Daemon.VB.Stages.VBWinRTStage : VBDaemonStageBase {
    public virtual IDaemonStageProcess CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind, IVBFile file);
}
internal class JetBrains.ReSharper.Daemon.VB.Stages.WinRTStageProcess : VBDaemonStageProcessBase {
    private VBWinRTProcessHelper myHelper;
    public WinRTStageProcess(IDaemonProcess process, IContextBoundSettingsStore settingsStore, IVBFile file);
    public virtual void Execute(Action`1<DaemonStageResult> committer);
    public virtual bool InteriorShouldBeProcessed(ITreeNode element, IHighlightingConsumer consumer);
    private static void CheckInterfacesProblem(IClassLikeDeclaration declaration, IEnumerable`1<IDeclaredTypeUsage> interfaceTypeUsages, IHighlightingConsumer consumer);
    private void ImplementationInheritanceIsNotAllowed(IClassDeclaration classDeclaration, IHighlightingConsumer consumer);
    private static void CheckOverloadsProblem(TreeNodeEnumerable`1<TDeclaration> declarations, bool isStatic, IHighlightingConsumer consumer);
    private static void CheckGeneratedNames(IVBTypeDeclaration declaration, IHighlightingConsumer consumer);
    private static void CheckMemberNames(TreeNodeEnumerable`1<TDeclaration> memberDeclarations, IHighlightingConsumer consumer);
    private static void CheckTypeDeclarationProblems(IVBTypeDeclaration declaration, IHighlightingConsumer consumer);
    private static bool IsProtected(AccessRights accessRights);
    public virtual void VisitClassDeclaration(IClassDeclaration classDeclaration, IHighlightingConsumer consumer);
    public virtual void VisitStructureDeclaration(IStructureDeclaration structureDeclaration, IHighlightingConsumer consumer);
    public virtual void VisitInterfaceDeclaration(IInterfaceDeclaration interfaceDeclaration, IHighlightingConsumer consumer);
    public virtual void VisitModuleDeclaration(IModuleDeclaration moduleDeclaration, IHighlightingConsumer consumer);
    public virtual void VisitEnumDeclaration(IEnumDeclaration enumDeclaration, IHighlightingConsumer consumer);
    public virtual void VisitDelegateDeclaration(IDelegateDeclaration delegateDeclaration, IHighlightingConsumer consumer);
    public virtual void VisitConstantDeclaration(IConstantDeclaration constantDeclaration, IHighlightingConsumer consumer);
    public virtual void VisitVariableDeclaration(IVariableDeclaration variableDeclaration, IHighlightingConsumer consumer);
    public virtual void VisitMethodDeclaration(IMethodDeclaration methodDeclaration, IHighlightingConsumer consumer);
    public virtual void VisitExternalMethodDeclaration(IExternalMethodDeclaration externalMethodDeclaration, IHighlightingConsumer consumer);
    public virtual void VisitConstructorDeclaration(IConstructorDeclaration constructorDeclaration, IHighlightingConsumer consumer);
    public virtual void VisitRegularParameterDeclaration(IRegularParameterDeclaration parameterDeclaration, IHighlightingConsumer consumer);
    public virtual void VisitEventDeclaration(IEventDeclaration eventDeclaration, IHighlightingConsumer consumer);
    public virtual void VisitOperatorDeclaration(IOperatorDeclaration operatorDeclaration, IHighlightingConsumer consumer);
    public virtual void VisitPropertyDeclaration(IPropertyDeclaration propertyDeclaration, IHighlightingConsumer consumer);
    private static void VisitTypeMemberDeclaration(IVBTypeMemberDeclaration memberDeclaration, IHighlightingConsumer consumer);
    public virtual void VisitVBNamespaceDeclaration(IVBNamespaceDeclaration namespaceDeclaration, IHighlightingConsumer consumer);
    private static bool MethodImplementsOrOverridesMethodFromWinRTType(IMethod method);
    [CompilerGeneratedAttribute]
private void _Lambda$__2-0(IVBFile file, IHighlightingConsumer consumer);
}
[StandardModuleAttribute]
public class JetBrains.ReSharper.Daemon.VB.Util.VBDaemonUtil : object {
    public static ITreeNode GetContainingFunctionDeclaration(ITreeNode element);
    public static bool IsIterator(IVBDeclaration declaration);
    public static bool IsUnderAnonymousMethod(ITreeNode element);
}
[ExtensionAttribute]
[StandardModuleAttribute]
internal class JetBrains.ReSharper.Daemon.VB.Util.VBErrorUtil : object {
    public static DeclaredElementPresenterStyle PARAMETER_TYPES_PRESENTER;
    public static DeclaredElementPresenterStyle MEMBER_PRESENTER;
    public static DeclaredElementPresenterStyle FULL_MEMBER_PRESENTER;
    public static DeclaredElementPresenterStyle ACCESS_RIGHTS_PRESENTER;
    public static DeclaredElementPresenterStyle CANDIDATE_PRESENTER;
    private static VBErrorUtil();
    public static string ElementTypePlural(IDeclaredElement declaredElement);
    public static string ElementType(IList`1<IDeclaredElement> declaredElements);
    public static string DeclaredElementName(IDeclaredElement declaredElement);
    public static string ReferenceName(IReference reference);
    public static DocumentRange JoinRanges(DocumentRange r1, DocumentRange r2);
    public static DocumentRange JoinRanges(ITreeNode[] nodes);
    public static DocumentRange GetModifierRange(IDeclaration declaration, TokenNodeType[] modifiers);
    public static DocumentRange AccessRightsRange(IDeclaration declaration);
    public static DocumentRange OptionalRange(IDeclaration declaration);
    public static DocumentRange ParamArrayRange(IDeclaration declaration);
    public static DocumentRange OverridableRange(IDeclaration declaration);
    public static DocumentRange ProtectedRange(IDeclaration declaration);
    public static DocumentRange GetRangeByImportClause(IImportClause clause);
    public static DocumentRange GetRangeByExpression(IVBExpression expression);
    public static DocumentRange GetRangeByArgument(IVBArgumentInfo argument);
    public static DocumentRange GetRangeByReferenceName(IReference reference);
    public static DocumentRange GetRangeByReference(IReference reference);
    public static DocumentRange GetInvocationRangeByReference(IReference reference);
    public static string CannotConvertTypeMessage(string pattern, IExpressionType sourceType, IType targetType);
    private static string GetModuleFullName(IPsiModule module);
    public static string PresentCandidatesList(IEnumerable`1<TypeMemberInstance> candidates);
    public static string PresentCandidatesList(IEnumerable`1<OverridableMemberInstance> candidates);
    public static DocumentRange ReturnTypeRange(IVBDeclaration declaration);
    public static DocumentRange ReturnTypeRange(IVBFunctionDeclaration declaration);
    public static DocumentRange TypeUsageRange(IDeclaration declaration);
    public static DocumentRange AssignedValueRange(ILocalVariableDeclaration localVariableDeclaration);
    public static string PresentResolveCandidates(IReference reference);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IList`1<IVBArgumentInfo> Arguments(IReference reference);
    public static DocumentRange LocalRange(ITreeNode node, TextRange localRange1);
    public static DocumentRange LastSymbolRange(ITreeNode node);
    public static DocumentRange GetAttributeHighlightingRange(IAttribute attribute);
    public static DocumentRange GetParameterKindRange(IParameter parameter);
    public static DocumentRange GetReturnTypeOrKeywordRange(ILambdaExpression lambdaExpression, ITokenNode keyword);
    public static DocumentRange AsyncRange(IVBDeclaration declaration);
    public static DocumentRange IteratorRange(IVBDeclaration declaration);
    public static ITokenNode GetAsyncKeyword(IVBDeclaration declaration);
    public static ITokenNode GetIteratorKeyword(IVBDeclaration declaration);
    public static string KindAndName(IDeclaredElement element);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Daemon.VB.VBGenerateCompletionProvider : object {
    public sealed virtual override IEnumerable`1<OverridableMemberInstance> GetMissingMembers(ITypeDeclaration declaration);
    public sealed virtual override IEnumerable`1<OverridableMemberInstance> GetOverridableMembers(ITypeDeclaration declaration);
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.VBProjectFileType", "16")]
public class JetBrains.ReSharper.Daemon.VB.VBHighlightingSuppressor : object {
    private ISettingsStore mySettingsStore;
    private IThreading myLocks;
    public VBHighlightingSuppressor(ISettingsStore settingsStore, IThreading locks);
    public sealed virtual override IProperty`1<bool> ShouldSuppress(Lifetime lifetime, IProjectFile projectFile, ITextControl textControl);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.Daemon.VB.VbSpecificFileImageContributor : object {
    private VBLanguageLevelProjectProperty _languageLevel;
    public VbSpecificFileImageContributor(VBLanguageLevelProjectProperty languageLevel);
    public sealed virtual override IEnumerable`1<KeyValuePair`2<Dependency, Hash>> SolutionDependencies(ISolution solution);
    public sealed virtual override IEnumerable`1<KeyValuePair`2<Dependency, Hash>> ModuleDependencies(IPsiModule module);
    public sealed virtual override IEnumerable`1<KeyValuePair`2<Dependency, Hash>> FileDependencies(IPsiSourceFile psiSourceFile);
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.VB.Errors.VBErrors")]
public class JetBrains.ReSharper.Daemon.VB.VBSyntaxError : SyntaxErrorBase {
    public VBSyntaxError(string toolTip, DocumentRange range);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Daemon.VB.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[DebuggerDisplayAttribute("<generated method>")]
internal class VB$AnonymousDelegate_0`3 : MulticastDelegate {
    public VB$AnonymousDelegate_0`3(object TargetObject, IntPtr TargetMethod);
    public virtual IAsyncResult BeginInvoke(TArg0 x, TArg1 y, AsyncCallback DelegateCallback, object DelegateAsyncState);
    public virtual TResult EndInvoke(IAsyncResult DelegateAsyncResult);
    public virtual TResult Invoke(TArg0 x, TArg1 y);
}
[CompilerGeneratedAttribute]
[DebuggerDisplayAttribute("<generated method>")]
internal class VB$AnonymousDelegate_1 : MulticastDelegate {
    public VB$AnonymousDelegate_1(object TargetObject, IntPtr TargetMethod);
    public virtual IAsyncResult BeginInvoke(AsyncCallback DelegateCallback, object DelegateAsyncState);
    public virtual void EndInvoke(IAsyncResult DelegateAsyncResult);
    public virtual void Invoke();
}
