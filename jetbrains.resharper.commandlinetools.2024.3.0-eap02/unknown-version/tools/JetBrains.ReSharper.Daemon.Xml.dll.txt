[ContainsContextConsumerAttribute]
public class JetBrains.ReSharper.Daemon.Xml.ContextHighlighters.XmlMatchingBracesContextHighlighter : ContainingBracesContextHighlighterBase`1<XmlLanguage> {
    [CanBeNullAttribute]
[AsyncContextConsumerAttribute]
public static Action ProcessDataContext(Lifetime lifetime, IPsiDocumentRangeView psiDocumentRangeView, InvisibleBraceHintManager invisibleBraceHintManager, MatchingBraceSuggester matchingBraceSuggester, MatchingBraceConsumerFactory consumerFactory, HighlightingProlongedLifetime prolongedLifetime);
    protected virtual void CollectHighlightings(IPsiDocumentRangeView psiDocumentRangeView, MatchingHighlightingsConsumer consumer);
    protected virtual void CollectHighlightings(IPsiView psiView, MatchingHighlightingsConsumer consumer);
    private RichTextBlock GetHintText(ITextControl textControl, ITreeNode lBraceNode);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.DtdLanguage", "16")]
internal class JetBrains.ReSharper.Daemon.Xml.DtdDaemonBehavior : XmlDaemonBehavior {
    public bool CanShowErrorBox { get; }
    public bool RunInSolutionAnalysis { get; }
    public virtual ErrorStripeRequestWithDescription InitialErrorStripe(IPsiSourceFile sourceFile);
    public virtual bool get_CanShowErrorBox();
    public virtual bool get_RunInSolutionAnalysis();
}
[RegisterHighlighterGroupAttribute("HTML", "HTML", "6")]
[RegisterHighlighterAttribute("ReSharper HTML Fallback Attribute Name")]
[RegisterHighlighterAttribute("ReSharper HTML Fallback Attribute Value")]
[RegisterHighlighterAttribute("ReSharper HTML Fallback Element Name")]
[RegisterHighlighterAttribute("ReSharper HTML Fallback Tag Delimiter")]
[RegisterHighlighterAttribute("ReSharper HTML Entity 1")]
[RegisterHighlighterAttribute("ReSharper HTML Entity 2")]
public static class JetBrains.ReSharper.Daemon.Xml.Highlightings.HtmlHighlightingAttributeIds : object {
    public static string ATTRIBUTE_NAME;
    public static string ATTRIBUTE_VALUE;
    public static string ELEMENT_NAME;
    public static string TAG_DELIMITER;
    public static string ENTITY_1;
    public static string ENTITY_2;
}
internal class JetBrains.ReSharper.Daemon.Xml.Highlightings.HtmlSettingsNamesProvider : PrefixBasedSettingsNamesProvider {
    public static string HTML_GROUP_PREFIX;
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xml.Stages.XMLStaticHighlightingsGroups/XMLErrors")]
public class JetBrains.ReSharper.Daemon.Xml.Highlightings.XmlErrorHighlighting : XmlHighlighting {
    private DocumentRange myRange;
    public XmlErrorHighlighting(string tooltipTextFmt, DocumentRange range, Object[] args);
    public virtual bool IsValid();
    public virtual DocumentRange CalculateRange();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.XmlLanguage", "16")]
public class JetBrains.ReSharper.Daemon.Xml.Highlightings.XmlHighlightingAttributeIdProvider : DefaultHighlightingAttributeIdProvider {
}
[RegisterHighlighterAttribute("ReSharper XML Fallback Attribute Value")]
public class JetBrains.ReSharper.Daemon.Xml.Highlightings.XmlHighlightingAttributeIds : object {
    public static string ATTRIBUTE_VALUE;
}
[DaemonTooltipProviderAttribute("JetBrains.ReSharper.Daemon.Xml.Stages.XmlIdentifierTooltipProvider")]
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IdentifierHighlightings")]
public class JetBrains.ReSharper.Daemon.Xml.Highlightings.XmlIdentifierHighlighting : XmlHighlightingBase {
    private string myAttributeId;
    private DocumentRange myDocumentRange;
    public string AttributeId { get; }
    public XmlIdentifierHighlighting(string attributeId, DocumentRange documentRange);
    public sealed virtual string get_AttributeId();
    public virtual bool IsValid();
    public virtual DocumentRange CalculateRange();
    public sealed virtual Nullable`1<int> GetStatisticsKey();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xml.Stages.XMLStaticHighlightingsGroups/XMLErrors")]
public class JetBrains.ReSharper.Daemon.Xml.Highlightings.XmlMisplacedCommentErrorHighlighting : XmlErrorHighlighting {
    [NotNullAttribute]
private IXmlComment myComment;
    [NotNullAttribute]
public IXmlComment Comment { get; }
    public XmlMisplacedCommentErrorHighlighting(IXmlComment comment, DocumentRange range);
    public IXmlComment get_Comment();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xml.Stages.XMLStaticHighlightingsGroups/XMLErrors")]
public class JetBrains.ReSharper.Daemon.Xml.Highlightings.XmlNoRootTagDefinedHighlighting : XmlErrorHighlighting {
    public XmlNoRootTagDefinedHighlighting(string tooltipTextFmt, DocumentRange documentRange, String[] args);
    public virtual bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xml.Stages.XMLStaticHighlightingsGroups/XMLErrors")]
public class JetBrains.ReSharper.Daemon.Xml.Highlightings.XmlNotResolvedErrorHighlighting`1 : XmlResolveErrorHighlighting`1<T> {
    public XmlNotResolvedErrorHighlighting`1(T reference);
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xml.Stages.XMLStaticHighlightingsGroups/XMLErrors")]
public class JetBrains.ReSharper.Daemon.Xml.Highlightings.XmlOnlyOneTagAllowedAtRootLevelHighlighting : XmlErrorHighlighting {
    public XmlOnlyOneTagAllowedAtRootLevelHighlighting(string tooltipTextFmt, DocumentRange range, String[] args);
    public virtual bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xml.Stages.XMLStaticHighlightingsGroups/XMLErrors")]
public class JetBrains.ReSharper.Daemon.Xml.Highlightings.XmlPIErrorHighlighting : XmlHighlighting {
    private IXmlProcessingInstruction myXmlPI;
    private DocumentRange myRange;
    public IXmlProcessingInstruction XmlPI { get; }
    public XmlPIErrorHighlighting(IXmlProcessingInstruction xmlPI, string tooltipTextFmt, DocumentRange range, String[] args);
    public IXmlProcessingInstruction get_XmlPI();
    public virtual bool IsValid();
    public virtual DocumentRange CalculateRange();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xml.Stages.XMLStaticHighlightingsGroups/XMLErrors")]
public class JetBrains.ReSharper.Daemon.Xml.Highlightings.XmlResolveErrorHighlighting`1 : XmlHighlightingBase {
    private T myReference;
    private ResolveErrorType myErrorType;
    private string myTooltip;
    public T Reference { get; }
    public ResolveErrorType ErrorType { get; }
    public string ToolTip { get; }
    public XmlResolveErrorHighlighting`1(T reference);
    public XmlResolveErrorHighlighting`1(T reference, string tooltip);
    public T get_Reference();
    public ResolveErrorType get_ErrorType();
    protected static string CreateTooltip(IReference reference);
    public virtual string get_ToolTip();
    public virtual bool IsValid();
    public virtual DocumentRange CalculateRange();
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IdentifierHighlightings")]
public class JetBrains.ReSharper.Daemon.Xml.Highlightings.XmlSyntaxElementHighlighting : XmlHighlighting {
    private string myAttributeId;
    private DocumentRange myRange;
    public string AttributeId { get; }
    public XmlSyntaxElementHighlighting(string attributeId, DocumentRange range);
    public virtual bool IsValid();
    public virtual DocumentRange CalculateRange();
    public sealed virtual string get_AttributeId();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xml.Stages.XMLStaticHighlightingsGroups/XMLErrors")]
public class JetBrains.ReSharper.Daemon.Xml.Highlightings.XmlSyntaxErrorHighlighting : XmlErrorHighlighting {
    [CompilerGeneratedAttribute]
private IXmlSyntaxErrorElement <ErrorElement>k__BackingField;
    public IXmlSyntaxErrorElement ErrorElement { get; }
    public XmlSyntaxErrorHighlighting(IXmlSyntaxErrorElement errorElement, DocumentRange range);
    public XmlSyntaxErrorHighlighting(IXmlToken tokenNode, DocumentRange range);
    public XmlSyntaxErrorHighlighting(IXmlToken tokenNode, DocumentRange range, string tooltip, String[] args);
    [CompilerGeneratedAttribute]
public IXmlSyntaxErrorElement get_ErrorElement();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xml.Stages.XMLStaticHighlightingsGroups/XMLErrors")]
public class JetBrains.ReSharper.Daemon.Xml.Highlightings.XmlTagFooterErrorHighlighting : XmlErrorHighlighting {
    [CompilerGeneratedAttribute]
private IXmlSyntaxErrorElement <ErrorElement>k__BackingField;
    public IXmlSyntaxErrorElement ErrorElement { get; }
    public XmlTagFooterErrorHighlighting(IXmlSyntaxErrorElement errorElement, DocumentRange documentRange);
    [CompilerGeneratedAttribute]
public IXmlSyntaxErrorElement get_ErrorElement();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xml.Stages.XMLStaticHighlightingsGroups/XMLErrors")]
public class JetBrains.ReSharper.Daemon.Xml.Highlightings.XmlTagIsNotClosedHighlighting : XmlErrorHighlighting {
    [CompilerGeneratedAttribute]
private IXmlTag <Tag>k__BackingField;
    [NotNullAttribute]
public IXmlTag Tag { get; }
    public XmlTagIsNotClosedHighlighting(IXmlTag tag, DocumentRange range);
    [CompilerGeneratedAttribute]
public IXmlTag get_Tag();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xml.Stages.XMLStaticHighlightingsGroups/XMLErrors")]
public class JetBrains.ReSharper.Daemon.Xml.Highlightings.XmlTagIsNotClosedHighlighting2 : XmlErrorHighlighting {
    [CompilerGeneratedAttribute]
private IList`1<IXmlTag> <Tags>k__BackingField;
    [NotNullAttribute]
public IList`1<IXmlTag> Tags { get; }
    public XmlTagIsNotClosedHighlighting2(IList`1<IXmlTag> tags, DocumentRange documentRange);
    [CompilerGeneratedAttribute]
public IList`1<IXmlTag> get_Tags();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xml.Stages.XMLStaticHighlightingsGroups/XMLErrors")]
public class JetBrains.ReSharper.Daemon.Xml.Highlightings.XmlTextIsNotAllowedAtRootHighlighting : XmlErrorHighlighting {
    public XmlTextIsNotAllowedAtRootHighlighting(string tooltipTextFmt, DocumentRange documentRange, String[] args);
    public virtual bool IsValid();
}
[StaticSeverityHighlightingAttribute("4", "JetBrains.ReSharper.Daemon.Xml.Stages.XMLStaticHighlightingsGroups/XMLWarnings")]
public class JetBrains.ReSharper.Daemon.Xml.Highlightings.XmlWarningHighlighting : XmlHighlighting {
    private DocumentRange myRange;
    public XmlWarningHighlighting(string tooltipTextFmt, DocumentRange range, String[] args);
    public virtual bool IsValid();
    public virtual DocumentRange CalculateRange();
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Daemon.Xml.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string MisplacedComment_Text { get; }
    public static string CannotResolveSymbol__Text { get; }
    public static string WrongNameCase_Text { get; }
    public static string XMLElementIsNotClosed_Text { get; }
    public static string IncorrectNumberOfTypeParameters_Text { get; }
    public static string NameCannotBeEmpty_Text { get; }
    public static string InvalidCharactersInProcessingInstruction_Text { get; }
    public static string UnexpectedXMLDeclarationTheXMLDeclaration_Text { get; }
    public static string UnexpectedAttribute__Text { get; }
    public static string DuplicateAttribute__Text { get; }
    public static string MisplacedAttribute__Text { get; }
    public static string RequiredAttribute_IsMissing_Text { get; }
    public static string TextIsNotAllowedAtRootLevel_Text { get; }
    public static string CDataElementIsNotAllowedAtRootLevel_Text { get; }
    public static string OnlyOneTagAllowedAtRootLevel_Text { get; }
    public static string NoRootTagDefined_Text { get; }
    public static string CommentIsNotWellFormedSequentialCharacters_Text { get; }
    public static string ExpectedClosingForXMLEntity_Text { get; }
    public static string NoWhitespaceIsAllowedBetweenSlashAnd_Text { get; }
    public static string WhitespaceRequired_Text { get; }
    public static string XMLErrors_Text { get; }
    public static string XMLWarnings_Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_MisplacedComment_Text();
    public static string get_CannotResolveSymbol__Text();
    public static string get_WrongNameCase_Text();
    public static string get_XMLElementIsNotClosed_Text();
    public static string get_IncorrectNumberOfTypeParameters_Text();
    public static string get_NameCannotBeEmpty_Text();
    public static string get_InvalidCharactersInProcessingInstruction_Text();
    public static string get_UnexpectedXMLDeclarationTheXMLDeclaration_Text();
    public static string get_UnexpectedAttribute__Text();
    public static string get_DuplicateAttribute__Text();
    public static string get_MisplacedAttribute__Text();
    public static string get_RequiredAttribute_IsMissing_Text();
    public static string get_TextIsNotAllowedAtRootLevel_Text();
    public static string get_CDataElementIsNotAllowedAtRootLevel_Text();
    public static string get_OnlyOneTagAllowedAtRootLevel_Text();
    public static string get_NoRootTagDefined_Text();
    public static string get_CommentIsNotWellFormedSequentialCharacters_Text();
    public static string get_ExpectedClosingForXMLEntity_Text();
    public static string get_NoWhitespaceIsAllowedBetweenSlashAnd_Text();
    public static string get_WhitespaceRequired_Text();
    public static string get_XMLErrors_Text();
    public static string get_XMLWarnings_Text();
}
public interface JetBrains.ReSharper.Daemon.Xml.Stages.Analysis.IXmlAnalysisProvider {
    public bool OnlyPrimary { get; }
    public abstract virtual IEnumerable`1<IXmlAnalysis> GetAnalyses(IXmlFile file, IDaemonProcess process, IContextBoundSettingsStore settingsStore);
    public abstract virtual bool get_OnlyPrimary();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Daemon.Xml.Stages.Analysis.XmlAnalysisManager : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IXmlAnalysisProvider> <Providers>k__BackingField;
    public IEnumerable`1<IXmlAnalysisProvider> Providers { get; }
    public XmlAnalysisManager(IEnumerable`1<IXmlAnalysisProvider> providers);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IXmlAnalysisProvider> get_Providers();
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
public class JetBrains.ReSharper.Daemon.Xml.Stages.Analysis.XmlAnalysisProviderAttribute : SolutionComponentAttribute {
    public XmlAnalysisProviderAttribute(Instantiation instantiation);
}
[XmlAnalysisProviderAttribute("16")]
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.Xml.Stages.Analysis.XmlSyntaxAnalysisProvider : object {
    public bool OnlyPrimary { get; }
    public sealed virtual IEnumerable`1<IXmlAnalysis> GetAnalyses(IXmlFile file, IDaemonProcess process, IContextBoundSettingsStore settingsStore);
    public sealed virtual bool get_OnlyPrimary();
}
[XmlAnalysisProviderAttribute("16")]
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.Xml.Stages.DtdSyntaxAnanalysisProvider : object {
    public bool OnlyPrimary { get; }
    public sealed virtual IEnumerable`1<IXmlAnalysis> GetAnalyses(IXmlFile file, IDaemonProcess process, IContextBoundSettingsStore settingsStore);
    public sealed virtual bool get_OnlyPrimary();
}
public class JetBrains.ReSharper.Daemon.Xml.Stages.FileStructureStage.XmlFileStructure : FileStructureBase {
    public XmlFileStructure(IXmlFile file);
}
[FileStructureExplorerAttribute("16")]
public class JetBrains.ReSharper.Daemon.Xml.Stages.FileStructureStage.XmlFileStructureExplorer : object {
    public sealed virtual IFileStructure ExploreFile(IFile file, IContextBoundSettingsStore settingsStore, Predicate`1<DocumentRange> isRangeInvalidated);
}
public static class JetBrains.ReSharper.Daemon.Xml.Stages.HighlightingProcessUtil : object {
    [NotNullAttribute]
public static IReadOnlyList`1<HighlightingInfo> FixHighlightingInfos(IXmlFile xmlFile, IReadOnlyList`1<HighlightingInfo> infos);
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.Xml.Stages.Injected.XmlIdentifierHighlightingAnalysis : XmlAnalysis {
    public virtual bool InteriorShouldBeProcessed(ITreeNode element, IHighlightingConsumer _);
    public virtual void ProcessBeforeInterior(ITreeNode element, IHighlightingConsumer consumer);
    private static void HighlightTagFooter(IHighlightingConsumer consumer, IXmlTagFooter tagFooter);
    public virtual void Done(IXmlFile file, IHighlightingConsumer consumer);
}
[XmlAnalysisProviderAttribute("16")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.Xml.Stages.Injected.XmlIdentifierHighlightingAnalysisProvider : object {
    public bool OnlyPrimary { get; }
    public sealed virtual IEnumerable`1<IXmlAnalysis> GetAnalyses(IXmlFile file, IDaemonProcess process, IContextBoundSettingsStore settingsStore);
    public sealed virtual bool get_OnlyPrimary();
}
[HighlightingSourceAttribute]
public interface JetBrains.ReSharper.Daemon.Xml.Stages.IXmlAnalysis {
}
public interface JetBrains.ReSharper.Daemon.Xml.Stages.IXmlAnalysis`1 {
    public abstract virtual object InitAndGetContext(IXmlFile file, IHighlightingConsumer highlightingConsumer);
    public abstract virtual void Done(IXmlFile file, TContext context);
}
[HighlightingSourceAttribute]
public interface JetBrains.ReSharper.Daemon.Xml.Stages.IXmlAnalysisHighlightingContract {
}
public interface JetBrains.ReSharper.Daemon.Xml.Stages.IXmlHighlighting {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.XmlLanguage", "16")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.Xml.Stages.Resolve.XmlIncorrectTypeParameterNumberErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public virtual IHighlighting Run(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.XmlLanguage", "16")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.Xml.Stages.Resolve.XmlNotResolvedErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual IHighlighting Run(IReference reference);
    [CanBeNullAttribute]
protected virtual IHighlighting CreateNotResolvedLateBoundReferenceHighlighting(IReference reference);
    [NotNullAttribute]
protected virtual IHighlighting CreateNotResolvedErrorHighlighting(IReference reference);
}
[HighlightingSourceAttribute]
public abstract class JetBrains.ReSharper.Daemon.Xml.Stages.XmlAnalysis : XmlAnalysisBase`1<IHighlightingConsumer> {
    public virtual object InitAndGetContext(IXmlFile file, IHighlightingConsumer highlightingConsumer);
    public virtual void Init(IXmlFile file);
}
public abstract class JetBrains.ReSharper.Daemon.Xml.Stages.XmlAnalysisBase`1 : object {
    public virtual object InitAndGetContext(IXmlFile file, IHighlightingConsumer highlightingConsumer);
    public virtual bool InteriorShouldBeProcessed(ITreeNode element, TContext context);
    public virtual bool IsProcessingFinished(TContext context);
    public virtual void ProcessBeforeInterior(ITreeNode element, TContext context);
    public virtual void ProcessAfterInterior(ITreeNode element, TContext context);
    public virtual void Done(IXmlFile file, TContext context);
    public sealed virtual void Done(IXmlFile file, object context);
    public sealed virtual bool InteriorShouldBeProcessed(ITreeNode element, object context);
    public sealed virtual bool IsProcessingFinished(object context);
    public sealed virtual void ProcessBeforeInterior(ITreeNode element, object context);
    public sealed virtual void ProcessAfterInterior(ITreeNode element, object context);
    [ConditionalAttribute("JET_MODE_ASSERT")]
private void AssertContextType(object context);
}
[DaemonStageAttribute("16")]
public class JetBrains.ReSharper.Daemon.Xml.Stages.XmlAnalysisStage : object {
    [NotNullAttribute]
private XmlAnalysisManager myXmlAnalysisManager;
    public XmlAnalysisStage(XmlAnalysisManager xmlAnalysisManager);
    private static IXmlFile GetPrimaryXmlFile(IPsiSourceFile sourceFile);
    private static IEnumerable`1<IXmlFile> GetInjectedXmlFiles(IPsiSourceFile sourceFile);
    public sealed virtual IEnumerable`1<IDaemonStageProcess> CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind);
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.Xml.Stages.XmlAnalysisStageProcess : XmlDaemonStageProcessBase {
    [NotNullAttribute]
private IXmlAnalysis[] myAnalysises;
    [NotNullAttribute]
private IHighlightingConsumer myConsumer;
    public XmlAnalysisStageProcess(IXmlFile xmlFile, IEnumerable`1<IXmlAnalysis> analysises, IDaemonProcess process, IContextBoundSettingsStore settingsStore);
    public XmlAnalysisStageProcess(IXmlFile xmlFile, IEnumerable`1<IXmlAnalysis> analysises, IDaemonProcess daemonProcess, IHighlightingConsumer consumer);
    public virtual void Execute(Action`1<DaemonStageResult> committer);
    public sealed virtual bool InteriorShouldBeProcessed(ITreeNode element, Dictionary`2<IXmlAnalysis, object> context);
    public sealed virtual bool IsProcessingFinished(Dictionary`2<IXmlAnalysis, object> context);
    public sealed virtual void ProcessBeforeInterior(ITreeNode element, Dictionary`2<IXmlAnalysis, object> context);
    public sealed virtual void ProcessAfterInterior(ITreeNode element, Dictionary`2<IXmlAnalysis, object> context);
    [CompilerGeneratedAttribute]
private object <Execute>b__4_1(IXmlAnalysis analysis);
}
public abstract class JetBrains.ReSharper.Daemon.Xml.Stages.XmlDaemonStageProcessBase : object {
    [CompilerGeneratedAttribute]
private IXmlFile <File>k__BackingField;
    [CompilerGeneratedAttribute]
private IDaemonProcess <DaemonProcess>k__BackingField;
    [NotNullAttribute]
private IFile JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStageProcessWithPsiFile.File { get; }
    [NotNullAttribute]
public IXmlFile File { get; }
    public IDaemonProcess DaemonProcess { get; }
    protected XmlDaemonStageProcessBase(IXmlFile file, IDaemonProcess process);
    private sealed virtual override IFile JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStageProcessWithPsiFile.get_File();
    [CompilerGeneratedAttribute]
public IXmlFile get_File();
    [CompilerGeneratedAttribute]
public sealed virtual IDaemonProcess get_DaemonProcess();
    public abstract virtual void Execute(Action`1<DaemonStageResult> committer);
}
[HighlightingSourceAttribute]
public abstract class JetBrains.ReSharper.Daemon.Xml.Stages.XmlErrorStageProcess : XmlDaemonStageProcessBase {
    [NotNullAttribute]
private ResolveHighlighterRegistrar myResolveHighlighterRegistrar;
    [NotNullAttribute]
private IElementAnalyzerDispatcher myElementAnalyzerDispatcher;
    [NotNullAttribute]
protected IHighlightingConsumer Consumer;
    protected bool HighlightIdentifiers;
    [NotNullAttribute]
protected IHighlightingAttributeIdProvider AttributeIdProvider;
    public bool ProcessingIsFinished { get; }
    protected XmlErrorStageProcess(IXmlFile file, IDaemonProcess process, DaemonProcessKind processKind, ResolveHighlighterRegistrar resolveHighlighterRegistrar, ElementProblemAnalyzerRegistrar elementProblemAnalyzerRegistrar);
    public virtual void Execute(Action`1<DaemonStageResult> committer);
    public virtual bool InteriorShouldBeProcessed(ITreeNode element);
    public sealed virtual bool get_ProcessingIsFinished();
    public virtual void ProcessBeforeInterior(ITreeNode element);
    public virtual void ProcessReference(IReference reference);
    protected virtual void ProcessResolvedReference(IReference reference, IDeclaredElement declaredElement);
    public virtual void ProcessAfterInterior(ITreeNode element);
    protected virtual void HighlightDeclaration(IDeclaration declaration);
    protected virtual XmlIdentifierHighlighting CreateIdentifierHighlighting(string attributeID, DocumentRange nameDocumentRange);
    protected virtual void HighlightTypeMemberDeclaration(ITypeMemberDeclaration memberDeclaration);
    protected virtual void HighlightTypeDeclaration(ITypeDeclaration typeDeclaration);
    protected void HighlightReferencedIdentifier(IDeclaredElement declaredElement, DocumentRange referenceRange);
    [NotNullAttribute]
protected virtual IHighlighting CreateResolveErrorHighlighting(IReference reference, ResolveErrorType resolveErrorType);
}
public abstract class JetBrains.ReSharper.Daemon.Xml.Stages.XmlHighlighting : XmlHighlightingBase {
    protected string myTooltipText;
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public bool ShowToolTipInStatusBar { get; }
    public Color ColorOnStripe { get; }
    public XmlHighlighting(string tooltipTextFmt, Object[] args);
    public virtual string get_ToolTip();
    public virtual string get_ErrorStripeToolTip();
    public bool get_ShowToolTipInStatusBar();
    public Color get_ColorOnStripe();
}
public abstract class JetBrains.ReSharper.Daemon.Xml.Stages.XmlHighlightingBase : object {
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public virtual string get_ToolTip();
    public virtual string get_ErrorStripeToolTip();
    public abstract virtual bool IsValid();
    public abstract virtual DocumentRange CalculateRange();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Daemon.Xml.Stages.XmlIdentifierTooltipProvider : IdentifierTooltipProvider`1<XmlLanguage> {
    public XmlIdentifierTooltipProvider(ISolution solution, IDeclaredElementDescriptionPresenter presenter, Lifetime lifetime, DeclaredElementPresenterTextStylesService textStylesService, IIdentifierTooltipSuppressor identifierTooltipSuppressor);
    protected virtual IFile GetPsiFile(IPsiSourceFile sourceFile, DocumentRange documentRange);
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.Xml.Stages.XmlPIAnalysis : XmlAnalysis {
    public static String[] XML_PI_ATTRIBUTES;
    public static PiAttributeConstraint[] XML_PI_ATTRIBUTE_CONSTRAINT;
    public static String[] XML_PI_ATTRIBUTE_VALUES;
    private static XmlPIAnalysis();
    public virtual bool InteriorShouldBeProcessed(ITreeNode element, IHighlightingConsumer context);
    public virtual void ProcessBeforeInterior(ITreeNode element, IHighlightingConsumer highlightings);
}
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.Xml.Stages.XmlRootLevelAnalysis : XmlAnalysis {
    private bool myTagAllowed;
    public virtual bool InteriorShouldBeProcessed(ITreeNode element, IHighlightingConsumer context);
    public virtual void Init(IXmlFile file);
    public virtual void ProcessBeforeInterior(ITreeNode element, IHighlightingConsumer highlightings);
    public virtual void Done(IXmlFile file, IHighlightingConsumer consumer);
}
public static class JetBrains.ReSharper.Daemon.Xml.Stages.XMLStaticHighlightingsGroups : object {
}
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.Xml.Stages.XmlSyntaxErrorsAnalysis : XmlAnalysis {
    public virtual bool InteriorShouldBeProcessed(ITreeNode element, IHighlightingConsumer context);
    public virtual void ProcessBeforeInterior(ITreeNode element, IHighlightingConsumer highlightings);
}
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.Xml.Stages.XmlTagAnalysis : XmlAnalysis {
    private OneToListMap`2<DocumentRange, IXmlTag> myNotClosedTags;
    public virtual bool InteriorShouldBeProcessed(ITreeNode element, IHighlightingConsumer context);
    public virtual void ProcessBeforeInterior(ITreeNode element, IHighlightingConsumer highlightings);
    public virtual void Done(IXmlFile file, IHighlightingConsumer consumer);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.XmlLanguage", "16")]
public class JetBrains.ReSharper.Daemon.Xml.XmlDaemonBehavior : LanguageSpecificDaemonBehavior {
    public virtual ErrorStripeRequestWithDescription InitialErrorStripe(IPsiSourceFile sourceFile);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Daemon.Xml.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
