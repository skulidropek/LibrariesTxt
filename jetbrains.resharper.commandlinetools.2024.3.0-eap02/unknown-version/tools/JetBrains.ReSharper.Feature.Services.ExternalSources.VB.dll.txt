[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.VB.MetadataTranslator.VBMetadataTranslator : object {
    public bool IsAvailable { get; }
    public bool IsMethodBodiesDecompilationSupported { get; }
    public sealed virtual bool get_IsAvailable();
    public sealed virtual bool get_IsMethodBodiesDecompilationSupported();
    public sealed virtual string TranslateTopLevelTypeElement(ITypeElement element, IAssemblyPsiModule context, MetadataTranslatorOptions options, IMetadataLocalVariablesNameProvider metadataLocalVariablesNameProvider, Boolean& containsUnsafeCode, IProgressIndicator indicator, DebugData debugData, int documentIndex);
    public sealed virtual string TranslateTopLevelTypeElementByDecompiler(IMetadataTypeInfo typeInfo, IAssemblyPsiModule context, MetadataTranslatorOptions options, IMetadataLocalVariablesNameProvider metadataLocalVariablesNameProvider, IProgressIndicator indicator, DebugData debugData, int documentIndex);
    public sealed virtual string TranslateAssemblyInfo(IAssemblyPsiModule context, MetadataTranslatorOptions options);
    public sealed virtual string TranslateAssemblyInfo(IMetadataAssembly assembly, MetadataTranslatorOptions options);
    private static string GetNamespace(ITypeElement typeElement);
}
internal class JetBrains.ReSharper.Feature.Services.ExternalSources.VB.MetadataTranslator.VBMetadataTranslatorInstance : MetadataTranslatorInstanceBase {
    private static Dictionary`2<string, string> ourBinaryOperatorsMap;
    private static Dictionary`2<string, string> ourUnaryOperatorsMap;
    private LanguageService myLanguageService;
    private MetadataTranslatorOptions myOptions;
    private ITextAndDebugDataWriter myWriter;
    public VBMetadataTranslatorInstance(ITextAndDebugDataWriter writer, MetadataTranslatorOptions options);
    private static VBMetadataTranslatorInstance();
    protected virtual void SetTopLevelNullableAnnotationContext(ITypeElement topLevelType);
    protected virtual IDisposable WithNamespace(INamespace ns);
    private void RenderXmlDoc(IDeclaredElement declaredElement);
    protected virtual void RenderType(ITypeElement typeElement);
    private static bool HasExplicitImplementationOfVisibleInterface(ITypeMember typeMember);
    protected virtual bool ShouldRenderTypeMember(IDeclaredElement typeMember);
    private void RenderSignature(IParametersOwner parametersOwner, bool appendSub);
    [CanBeNullAttribute]
private IAttributesSet GetReturnTypeAttributes(IParametersOwner parametersOwner);
    private void RenderDelegate(IDelegate delegate);
    private static bool ShouldRenderMethod(IMethod method);
    private int RenderTypeMembers(ITypeElement typeElement);
    private void RenderConversionOperator(IConversionOperator conversionOperator);
    private void RenderMethod(IFunction method);
    private void RenderMemberImplements(ITypeMember typeMember);
    [CanBeNullAttribute]
private static string GetOperatorSign(ISignOperator signOperator);
    private void RenderSignOperator(ISignOperator signOperator);
    private void RenderParameters(IList`1<IParameter> parameters);
    private void RenderParameter(IParameter parameter);
    private void RenderDefaultValue(DefaultValue value);
    private void RenderProperty(IProperty property);
    private bool ShouldRenderAccessors(IProperty property);
    private bool ShouldRenderAccessor(IAccessor accessor);
    private bool ValueParameterHasAttributes(IAccessor setter);
    private bool HasAttributes(IAttributesSet attributesSet);
    private void RenderEvent(IEvent event);
    private void RenderField(IField field);
    private void RenderConstantValue(ConstantValue constantValue, IField field);
    private void RenderFloatConstantValue(ConstantValue constantValue, IField field);
    private void RenderDoubleConstantValue(ConstantValue constantValue, IField field);
    private void RenderTypeRef(IType type, bool isAttribute);
    private void RenderAttributeTypeRef(IType type);
    private static bool IsConstant(IDeclaredElement declaredElement);
    private static bool IsModule(IDeclaredElement declaredElement);
    private void RenderModifiers(IModifiersOwner owner);
    private void RenderNewModifierIfNeeded(ITypeMember typeMember);
    private void RenderAccessRights(IAccessRightsOwner accessRightsOwner);
    private void RenderAttributes(IAttributesSet attributes, AttributesPlacement attributesPlacement, string target);
    private void RenderAttribute(IAttributeInstance attr, string target);
    private void RenderAttributeValue(AttributeValue value);
    private void RenderClassLike(string name, ITypeElement typeElement);
    private void RenderInheritors(ITypeElement typeElement);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.ExternalSources.VB.MetadataTranslator.VBMetadataTranslatorInstance/<GetTextTypeConstraints>d__47")]
private static IEnumerable`1<string> GetTextTypeConstraints(ITypeParameter typeParameter);
    private void RenderTypeParameters(ITypeParametersOwner typeParametersOwner);
    private void RenderFlagsEnum(IEnum enum);
    private static ConstantValue EnumBitwiseOr(IEnum enum, ConstantValue left, ConstantValue right);
    private static ConstantValue EnumBitwiseAnd(IEnum enum, ConstantValue left, ConstantValue right);
    private static bool CheckEnumFlags(ConstantValue targetValue, IEnum enum, ICollection`1<ConstantValue> values);
    private void RenderOrdinalEnum(IEnum enum);
    private void RenderArrayTypeRef(IArrayType arrayType);
    private void RenderDeclaredTypeRef(IDeclaredType declaredType, bool isAttribute);
    private void RenderTypeArgumentList(ITypeParametersOwner element, ISubstitution substitution);
    private static string GetAccessorName(IAccessor accessor);
    private void RenderAccessor(IAccessor accessor);
    [CompilerGeneratedAttribute]
private void <RenderMemberImplements>b__19_1(OverridableMemberInstance member, ITextAndDebugDataWriter writer);
    [CompilerGeneratedAttribute]
private void <RenderTypeParameters>b__48_0(ITypeParameter p, ICodeTextWriter writer);
    [CompilerGeneratedAttribute]
private void <RenderDeclaredTypeRef>b__55_0(TupleTypeComponent component);
    [CompilerGeneratedAttribute]
private void <RenderDeclaredTypeRef>b__55_1(IType t);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.Feature.Services.ExternalSources.VB.MetadataTranslator.VBNamingUtil : object {
    public static string FixShortName(string name, bool replaceInvalidCharactersInIdentifiers);
    private static string ToEscaped(string name);
    public static IIdentifierFixer GetIdentifierFixer(bool replaceInvalidCharactersInIdentifiers);
    public static string FixIdentifier(string name);
    private static string GetUnicodeRepr(char c);
    [ExtensionAttribute]
private static bool IsAlphaCharacter(char c);
    [ExtensionAttribute]
private static bool IsCombiningCharacter(char c);
    [ExtensionAttribute]
private static bool IsNumericCharacter(char c);
    [ExtensionAttribute]
private static bool IsFormattingCharacter(char c);
    [ExtensionAttribute]
private static bool IsIdentifierStartCharacter(char c);
    [ExtensionAttribute]
private static bool IsUnderscoreCharacter(char c);
    [ExtensionAttribute]
private static bool IsIdentifierPartCharacter(char c);
    [ExtensionAttribute]
private static bool IsIdentifier(string s);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.VB.MetadataTranslator.VBTranslatorLanguageWithPriority : object {
    public PsiLanguageType Language { get; }
    public int Priority { get; }
    public sealed virtual PsiLanguageType get_Language();
    public sealed virtual int get_Priority();
}
public class JetBrains.ReSharper.Feature.Services.ExternalSources.VB.src.Utils.VBDeclaredElementBinderInstance : object {
    private IVBFile myFile;
    private IPsiModule myPsiModule;
    public VBDeclaredElementBinderInstance(IVBFile file, IPsiModule psiModule);
    public void BindDeclarations();
    private static void BindAccessors(IAccessorDeclaration accessorDeclaration);
    private static void BindTypeDeclarations(IVBTypeDeclaration typeDeclaration, ISymbolScope cache);
    private static void BindTypeMembersOfMethod(IMethodDeclaration methodDeclaration);
    private static void BindTypeParametersOfType(ITypeParametersOwner declaredElementTypeParametersOwner, ITypeParameterOfTypeOwnerDeclaration typeParametersOwnerDeclaration);
    private static void BindNamespaces(INamespaceDeclaration namespaceDeclaration, ISymbolScope cache);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.VB.Utils.VBDeclaredElementBinder : DeclaredElementBinder {
    public virtual void BindDeclarations(IFile file, IPsiModule psiModule, bool failOnUnresolvedSymbols);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.VB.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
