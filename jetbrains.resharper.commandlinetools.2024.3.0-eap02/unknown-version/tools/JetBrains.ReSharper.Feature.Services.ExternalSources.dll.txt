[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.ContextNavigation.ExternalSourcesReferencedCodeContextSearch : DeclaredElementsReferencedCodeContextSearch {
    private static ILogger ourLog;
    private static ExternalSourcesReferencedCodeContextSearch();
    public virtual bool IsContextApplicable(IDataContext dataContext);
    protected virtual bool IsAvailableInternal(IDataContext dataContext);
}
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Core.DecompilationCacheItem : object {
    [CompilerGeneratedAttribute]
private bool <Expired>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DecompilerId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Moniker>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<DebugData> <SourceDebugDataLazy>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyDictionary`2<string, string> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssembly <Assembly>k__BackingField;
    public bool Expired { get; }
    public string DecompilerId { get; }
    public string Moniker { get; }
    public FileSystemPath Location { get; }
    [CanBeNullAttribute]
public DebugData SourceDebugData { get; }
    [CanBeNullAttribute]
public Lazy`1<DebugData> SourceDebugDataLazy { get; }
    public ReadOnlyDictionary`2<string, string> Properties { get; }
    public IAssembly Assembly { get; }
    public DecompilationCacheItem(IAssembly assembly, FileSystemPath location, Lazy`1<DebugData> sourceDebugDataLazy, ReadOnlyDictionary`2<string, string> properties, string moniker, string decompilerId, bool expired);
    [CompilerGeneratedAttribute]
public bool get_Expired();
    [CompilerGeneratedAttribute]
public string get_DecompilerId();
    [CompilerGeneratedAttribute]
public string get_Moniker();
    [CompilerGeneratedAttribute]
public FileSystemPath get_Location();
    public DebugData get_SourceDebugData();
    [CompilerGeneratedAttribute]
public Lazy`1<DebugData> get_SourceDebugDataLazy();
    [CompilerGeneratedAttribute]
public ReadOnlyDictionary`2<string, string> get_Properties();
    [CompilerGeneratedAttribute]
public IAssembly get_Assembly();
}
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Core.DecompilationCacheStructure : object {
    private static string DecompilerCachesVersion;
    private static string DecompilerCacheFolder;
    private static string BundleContentSubFolder;
    private ProductSettingsLocation myProductSettingsLocation;
    private bool myShared;
    private Lazy`1<FileSystemPath> myLazyCacheDirectory;
    [NotNullAttribute]
public FileSystemPath CacheDirectory { get; }
    public DecompilationCacheStructure(ProductSettingsLocation productSettingsLocation, bool shared);
    [NotNullAttribute]
protected virtual FileSystemPath GetCacheDirectory();
    public FileSystemPath get_CacheDirectory();
    [NotNullAttribute]
private static string GetItemHash(AssemblyId assemblyId, string moniker);
    [NotNullAttribute]
public FileSystemPath GetAssemblyDirectory(string decompilerId, IAssembly assembly);
    [NotNullAttribute]
public FileSystemPath GetAssemblyDirectory(string decompilerId, AssemblyId assemblyId);
    [NotNullAttribute]
public FileSystemPath GetBundleDirectory(string bundleId);
    public bool IsInCacheFolder(FileSystemPath file);
    public string GetDecompilerId(FileSystemPath file);
    public Nullable`1<AssemblyId> GetAssemblyId(FileSystemPath file);
    [NotNullAttribute]
private static string GetItemRelativeDirectory(AssemblyId assemblyId, string itemMoniker);
    [NotNullAttribute]
public string GetItemRelativeDirectory(IAssembly assembly, string itemMoniker);
    [NotNullAttribute]
public FileSystemPath GetItemDirectory(string decompilerId, AssemblyId assemblyId, string itemMoniker);
    [NotNullAttribute]
public FileSystemPath GetItemDirectory(string decompilerId, IAssembly assembly, string itemMoniker);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Core.ExternalSourcesActivation : object {
    private IProperty`1<bool> myActive;
    public IProperty`1<bool> Active { get; }
    public ExternalSourcesActivation(Lifetime lifetime);
    public IProperty`1<bool> get_Active();
    public sealed virtual void Dump(TextWriter sw);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Core.ExternalSourcesActivationStandalone : ExternalSourcesActivation {
    public ExternalSourcesActivationStandalone(Lifetime lifetime);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Core.ExternalSourcesDebugInfoDumper : object {
    private IShellLocks myShellLocks;
    private IEnumerable`1<IExternalSourcesDebugInfoProvider> myProviders;
    public ExternalSourcesDebugInfoDumper(IShellLocks shellLocks, IEnumerable`1<IExternalSourcesDebugInfoProvider> providers);
    public void DumpToNotepad();
    public void Dump(TextWriter sw);
}
[ActionAttribute("JetBrains.ReSharper.Feature.Services.ExternalSources.Resources.Strings", "DumpExternalSourcesActionText")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Core.ExternalSourcesDumpSupportInformationActionHandler : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.ExternalSources.Core.ExternalSourcesServiceEx : object {
    [ExtensionAttribute]
public static bool HasMapping(IExternalSourcesService service, IProjectFile projectFile);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static ExternalSourcesMapping GetMapping(IExternalSourcesService service, IProjectFile projectFile);
}
[GlobalSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Core.ExternalSourcesSettingsConverter : object {
    public sealed virtual void Upgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Core.ExternalSourcesSettingsDumper : object {
    private ISettingsStore mySettingsStore;
    private ISolution mySolution;
    public ExternalSourcesSettingsDumper(ISettingsStore settingsStore, ISolution solution);
    public sealed virtual void Dump(TextWriter sw);
}
public interface JetBrains.ReSharper.Feature.Services.ExternalSources.Core.IDecompilationCacheBase {
    public DecompilationCacheStructure CacheStructure { get; }
    [CanBeNullAttribute]
public abstract virtual DecompilationCacheItem GetCacheItem(FileSystemPath file);
    [CanBeNullAttribute]
public abstract virtual DecompilationCacheItem GetCacheItem(string decompilerId, IAssembly assembly, string moniker, string fileName);
    [CanBeNullAttribute]
public abstract virtual DecompilationCacheItem PutCacheItem(string decompilerId, IAssembly assembly, string moniker, string fileName, IDictionary`2<string, string> properties, string content, DebugData sourceDebugData);
    [CanBeNullAttribute]
public abstract virtual DecompilationCacheItem PutCacheItem(string decompilerId, IAssemblyLocation assemblyLocation, AssemblyId assemblyId, string moniker, string fileName, IDictionary`2<string, string> properties, string content, DebugData sourceDebugData);
    [CanBeNullAttribute]
public abstract virtual DecompilationCacheItem PutCacheItemIfPropertiesHaveChanged(string decompilerId, IAssembly assembly, string moniker, string fileName, IDictionary`2<string, string> properties, string content, DebugData sourceDebugData);
    public abstract virtual bool CanBeCachedFile(string decompilerId, FileSystemPath file);
    public abstract virtual void ClearCache();
    public abstract virtual DecompilationCacheStructure get_CacheStructure();
    public abstract virtual FileSystemPath GetFilePath(string decompilerId, IAssembly assembly, string moniker, string fileName);
    [CanBeNullAttribute]
public abstract virtual Lazy`1<DebugData> GetDebugData(FileSystemPath file, string decompilerId, IAssemblyLocation& assemblyLocation, AssemblyId& assemblyId);
}
public interface JetBrains.ReSharper.Feature.Services.ExternalSources.Core.IExternalSourcesDefinesManager {
    [NotNullAttribute]
public abstract virtual PreProcessingDirective[] GetPreProcessingDirectives(IPsiModule psiModule);
}
public interface JetBrains.ReSharper.Feature.Services.ExternalSources.Core.IExternalSourcesDefinesProvider {
    [NotNullAttribute]
public abstract virtual PreProcessingDirective[] GetPreProcessingDirectives(IPsiModule psiModule);
}
public interface JetBrains.ReSharper.Feature.Services.ExternalSources.Core.IExternalSourcesMappingChangeManager {
    public DateTime LastMappingChanged { get; }
    public ISimpleSignal MappingChanged { get; }
    public abstract virtual DateTime get_LastMappingChanged();
    public abstract virtual void UpdateLastMappingChanged();
    public abstract virtual void FireMappingChanged();
    public abstract virtual ISimpleSignal get_MappingChanged();
}
public interface JetBrains.ReSharper.Feature.Services.ExternalSources.Core.IExternalSourcesService {
    public IReadOnlyList`1<IExternalSourcesProvider> OrderedProviders { get; }
    [CanBeNullAttribute]
public abstract virtual ExternalSourcesMapping TryGetMapping(FileSystemPath file);
    [CanBeNullAttribute]
public abstract virtual IReadOnlyCollection`1<ExternalSourcesMapping> NavigateToSources(CompiledElementNavigationInfo navigationInfo, IReadOnlyCollection`1<IExternalSourcesProvider> providers, ITaskExecutor taskExecutor, bool ignoreFilteringByOptions);
    public abstract virtual IReadOnlyList`1<IExternalSourcesProvider> get_OrderedProviders();
    [NotNullAttribute]
public abstract virtual IPsiSourceFile GetOrCreateSourceFile(FileSystemPath location, IAssemblyPsiModule assemblyPsiModule);
    [CanBeNullAttribute]
public abstract virtual IPsiSourceFile GetOrCreateSourceFile(IProjectFile projectFile);
    [CanBeNullAttribute]
public abstract virtual ExtendedDebugData GetTypeDebugData(ICompiledElement type, ITaskExecutor taskExecutor);
    [CanBeNullAttribute]
public abstract virtual ExtendedDebugData GetTypeDebugData(ICompiledElement type, ITaskExecutor taskExecutor, IReadOnlyCollection`1<IExternalSourcesProvider> sourcesProviders);
    [CanBeNullAttribute]
public abstract virtual ExtendedDebugData GetSourceDebugData(FileSystemPath file);
    [CanBeNullAttribute]
public abstract virtual ExtendedDebugData GetSourceDebugData(FileSystemPath file, IReadOnlyCollection`1<IExternalSourcesProvider> sourcesProviders);
    [CanBeNullAttribute]
public abstract virtual String[] GetGlobalUsings(IPsiSourceFile psiSourceFile);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Core.Impl.AssemblyConfigurationDefinesProvider : object {
    private IAssemblyInfoDatabase myAssemblyInfoDatabase;
    private static PreProcessingDirective[] ourReleaseDirectives;
    private static PreProcessingDirective[] ourDebugDirectives;
    public AssemblyConfigurationDefinesProvider(IAssemblyInfoDatabase assemblyInfoDatabase);
    private static AssemblyConfigurationDefinesProvider();
    public sealed virtual PreProcessingDirective[] GetPreProcessingDirectives(IPsiModule psiModule);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Core.Impl.AssemblyTargetFrameworkDefinesProvider : object {
    private static string Net;
    private static string NetCoreApp;
    private static string NetStandard;
    private static string NetFramework;
    private static string OrGreater;
    private static String[] ourNetFrameworkVersions;
    private static String[] ourNetStandardVersions;
    private static String[] ourNetCoreAppVersions;
    private static String[] ourNetVersions;
    private Dictionary`2<TargetFrameworkId, PreProcessingDirective[]> myCache;
    private static AssemblyTargetFrameworkDefinesProvider();
    private static int GetNetFrameworkIndex(Version version);
    private static int GetNetStandardIndex(Version version);
    private static int GetNetCoreAppIndex(Version version);
    private static int GetNetIndex(Version version);
    private static void AddRange(List`1<PreProcessingDirective> directives, string prefix, String[] versions, int maxIndex);
    private static void AddAll(List`1<PreProcessingDirective> directives, string prefix, String[] versions);
    private static void Add(List`1<PreProcessingDirective> directives, string prefix, String[] versions, int index);
    public sealed virtual PreProcessingDirective[] GetPreProcessingDirectives(IPsiModule psiModule);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Core.Impl.DeclaredElementBinderService : object {
    private ILanguageManager myLanguageManager;
    protected IProperty`1<bool> myFailOnUnresolvedSymbols;
    public DeclaredElementBinderService(Lifetime lifetime, IPsiFiles psiFiles, ILanguageManager languageManager);
    [NullableContextAttribute("2")]
public sealed virtual void Invalidate(ITreeNode element, PsiChangedElementType elementType);
    private void BindDeclarationsInFile(IFile file);
}
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Core.Impl.DecompilationCacheBase : object {
    private static string PropertiesFileExtension;
    private static string DebugDataFileExtension;
    private static string AssemblyInfoHashKey;
    private static string AssemblyContainerPathKey;
    private static string BundleFileEntryIndex;
    private static string BundleId;
    private static string MonikerKey;
    private static string AssemblySimpleHashMarkKey;
    private ISolution mySolution;
    private InfoFileContentGenerationService myInfoFileContentGenerationService;
    private AssemblyCollection myAssemblyCollection;
    private DocumentManager myDocumentManager;
    private IDocumentStorageHelpers myDocumentOperations;
    private IShellLocks myShellLocks;
    private EnsureWritableHandler myEnsureWritableHandler;
    private Lazy`1<DebugData> myCachedSourceDebugData;
    private FileSystemPath myCachedSourceDebugDataPath;
    [CompilerGeneratedAttribute]
private DecompilationCacheStructure <CacheStructure>k__BackingField;
    public DecompilationCacheStructure CacheStructure { get; }
    protected DecompilationCacheBase(ISolution solution, InfoFileContentGenerationService infoFileContentGenerationService, AssemblyCollection assemblyCollection, DocumentManager documentManager, IDocumentStorageHelpers documentOperations, IShellLocks shellLocks, EnsureWritableHandler ensureWritableHandler, DecompilationCacheStructure cacheStructure);
    [CompilerGeneratedAttribute]
public sealed virtual DecompilationCacheStructure get_CacheStructure();
    public sealed virtual DecompilationCacheItem GetCacheItem(string decompilerId, IAssembly assembly, string moniker, string fileName);
    public sealed virtual DecompilationCacheItem GetCacheItem(FileSystemPath file);
    public sealed virtual Lazy`1<DebugData> GetDebugData(FileSystemPath file, string decompilerId, IAssemblyLocation& assemblyLocation, AssemblyId& assemblyId);
    private bool PropertiesHaveChanged(FileSystemPath propertiesFile, IDictionary`2<string, string> newDecompilerProperties, string newAssemblyInfoHash, string newMoniker);
    private bool ReplaceDocumentContent(FileSystemPath file, string newContent);
    private static string GetAndRemoveValue(IDictionary`2<string, string> dictionary, string key);
    public sealed virtual bool CanBeCachedFile(string decompilerId, FileSystemPath file);
    [CanBeNullAttribute]
private Lazy`1<DebugData> GetCachedSourceDebugData(FileSystemPath sourceDebugDataPath);
    private void UpdateSourceDebugData(FileSystemPath sourceDebugDataPath);
    private DecompilationCacheItem PutCacheItem(string decompilerId, IAssembly assembly, IAssemblyLocation assemblyLocation, AssemblyId assemblyId, string moniker, string fileName, IDictionary`2<string, string> properties, string content, DebugData sourceDebugData, bool checkProperties);
    private static void RemoveAssemblyLocation(IDictionary`2<string, string> properties);
    private static void PutAssemblyLocation(IDictionary`2<string, string> properties, IAssemblyLocation location);
    private static IAssemblyLocation GetAndRemoveAssemblyLocation(IDictionary`2<string, string> properties);
    private static string GetSimpleAssemblyHash(AssemblyId assemblyId);
    public sealed virtual DecompilationCacheItem PutCacheItem(string decompilerId, IAssembly assembly, string moniker, string fileName, IDictionary`2<string, string> properties, string content, DebugData sourceDebugData);
    public sealed virtual DecompilationCacheItem PutCacheItem(string decompilerId, IAssemblyLocation assemblyLocation, AssemblyId assemblyId, string moniker, string fileName, IDictionary`2<string, string> properties, string content, DebugData sourceDebugData);
    public sealed virtual DecompilationCacheItem PutCacheItemIfPropertiesHaveChanged(string decompilerId, IAssembly assembly, string moniker, string fileName, IDictionary`2<string, string> properties, string content, DebugData sourceDebugData);
    public sealed virtual FileSystemPath GetFilePath(string decompilerId, IAssembly assembly, string moniker, string fileName);
    private FileSystemPath GetFilePath(string decompilerId, AssemblyId assemblyId, string moniker, string fileName);
    public sealed virtual void ClearCache();
    private sealed virtual override void JetBrains.Application.Infra.IExternalSourcesDebugInfoProvider.Dump(TextWriter sw);
}
internal class JetBrains.ReSharper.Feature.Services.ExternalSources.Core.Impl.ExternalSourceFileProperties : object {
    private IPsiSourceFile myPsiSourceFile;
    private IExternalSourcesDefinesManager myExternalSourcesDefinesManager;
    private IExternalSourcesService myExternalSourcesService;
    public bool ShouldBuildPsi { get; }
    public bool IsGeneratedFile { get; }
    public bool IsICacheParticipant { get; }
    public bool IsNonUserFile { get; }
    public bool ProvidesCodeModel { get; }
    public ExternalSourceFileProperties(IPsiSourceFile psiSourceFile, IExternalSourcesDefinesManager externalSourcesDefinesManager, IExternalSourcesService externalSourcesService);
    public sealed virtual bool get_ShouldBuildPsi();
    public sealed virtual bool get_IsGeneratedFile();
    public sealed virtual bool get_IsICacheParticipant();
    public sealed virtual bool get_IsNonUserFile();
    public sealed virtual bool get_ProvidesCodeModel();
    public sealed virtual ICollection`1<PreProcessingDirective> GetDefines();
    public sealed virtual IEnumerable`1<string> GetPreImportedNamespaces();
    public sealed virtual string GetDefaultNamespace();
    public sealed virtual string GetExplanation();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Core.Impl.ExternalSourcesDefinesManagerImpl : object {
    [NotNullAttribute]
private IEnumerable`1<IExternalSourcesDefinesProvider> myProviders;
    public ExternalSourcesDefinesManagerImpl(IEnumerable`1<IExternalSourcesDefinesProvider> providers);
    public sealed virtual PreProcessingDirective[] GetPreProcessingDirectives(IPsiModule psiModule);
}
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Core.Impl.ExternalSourcesForceSourceCookie : object {
    private static ThreadLocal`1<Queue`1<PreferredNavigationType>> ourTypes;
    private ExternalSourcesForceSourceCookie(PreferredNavigationType preferredNavigationType);
    private static ExternalSourcesForceSourceCookie();
    public static ExternalSourcesForceSourceCookie Create(PreferredNavigationType preferredNavigationType);
    public static bool Check(PreferredNavigationType preferredNavigationType);
    public static bool Check();
    private sealed virtual override void System.IDisposable.Dispose();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Core.Impl.ExternalSourcesMappingChangeManagerImpl : object {
    private ExternalSourcesActivation myExternalSourcesActivation;
    private ISimpleSignal myMappingChanged;
    private DateTime myLastMappingChanged;
    public DateTime LastMappingChanged { get; }
    public ISimpleSignal MappingChanged { get; }
    public ExternalSourcesMappingChangeManagerImpl(Lifetime lifetime, ExternalSourcesActivation externalSourcesActivation);
    public sealed virtual DateTime get_LastMappingChanged();
    public sealed virtual void UpdateLastMappingChanged();
    public sealed virtual void FireMappingChanged();
    public sealed virtual ISimpleSignal get_MappingChanged();
}
[MiscFilesProjectPsiModuleProviderAttribute("16")]
internal class JetBrains.ReSharper.Feature.Services.ExternalSources.Core.Impl.ExternalSourcesPsiModuleProvider : object {
    public sealed virtual IEnumerable`1<IPsiModule> GetModules();
    public sealed virtual IEnumerable`1<IPsiSourceFile> GetPsiSourceFilesFor(IProjectFile projectFile);
    public sealed virtual void OnProjectFileChanged(IProjectFile projectFile, ChangeType changeType, PsiModuleChangeBuilder changeBuilder, VirtualFileSystemPath oldLocation);
    public sealed virtual void Dispose();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Core.Impl.ExternalSourcesPsiSourceFiles : object {
    private object myLockObject;
    private CompactMap`2<FileSystemPath, PsiSourceFileFromPath> myPsiSourceFiles;
    private OneToListMap`2<IAssemblyPsiModule, PsiSourceFileFromPath> myAssemblyFiles;
    private ISolution mySolution;
    private IProjectFileExtensions myProjectFileExtensions;
    private PsiProjectFileTypeCoordinator myProjectFileTypeCoordinator;
    private IExternalSourcesDefinesManager myExternalSourcesDefinesManager;
    private DocumentManager myDocumentManager;
    private ChangeManager myChangeManager;
    private ILogger myLogger;
    public ExternalSourcesPsiSourceFiles(ISolution solution, IProjectFileExtensions projectFileExtensions, PsiProjectFileTypeCoordinator projectFileTypeCoordinator, IExternalSourcesDefinesManager externalSourcesDefinesManager, DocumentManager documentManager, IViewableProjectsCollection projects, ChangeManager changeManager, ILogger logger);
    private static void ProjectEntered(IProject obj);
    private void ProjectLeaving(IProject project);
    internal IPsiSourceFile GetOrCreateSourceFile(FileSystemPath location, IAssemblyPsiModule psiModule, IExternalSourcesService externalSourcesServiceImpl, IModuleReferenceResolveContext resolveContext, PsiModuleChangeBuilder changeBuilder);
    internal void OnPsiModuleRemoved(IAssemblyPsiModule psiModule, PsiModuleChangeBuilder changeBuilder);
    internal IPsiSourceFile GetOrCreateSourceFile(IProjectFile projectFile, IExternalSourcesService service, PsiModuleChangeBuilder changeBuilder);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_0();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Core.Impl.ExternalSourcesServiceImpl : object {
    private Lifetime myLifetime;
    private ILogger myLogger;
    private IPsiModules myModules;
    private IThreading myThreading;
    private IPdbGlobalUsingsService myPdbGlobalUsingsService;
    private IEnumerable`1<IExternalSourcesProvider> myProviders;
    private IExternalSourcesMappingChangeManager myMappingChangeManager;
    private IShellLocks myLocks;
    private INavigationModeProvider myNavigationModeProvider;
    private ExternalSourcesPsiSourceFiles mySourceFiles;
    private ChangeManager myChangeManager;
    private IContextBoundSettingsStoreLive myContextBoundSettings;
    private CompactMap`2<FileSystemPath, ExternalSourcesMapping> myCachedMappings;
    private PsiModuleChangeBuilder myUiThreadChangeBuilder;
    public IReadOnlyList`1<IExternalSourcesProvider> OrderedProviders { get; }
    public ExternalSourcesServiceImpl(ILogger logger, ISettingsStore settingsStore, ISolution solution, IPsiModules modules, IThreading threading, IEnumerable`1<IExternalSourcesProvider> providers, IPdbGlobalUsingsService pdbGlobalUsingsService, IExternalSourcesMappingChangeManager mappingChangeManager, IShellLocks locks, INavigationModeProvider navigationModeProvider, ExternalSourcesActivation externalSourcesActivation, ExternalSourcesPsiSourceFiles sourceFiles, ChangeManager changeManager);
    private void FlushBuilder(PsiModuleChangeBuilder builder);
    public sealed virtual IPsiSourceFile GetOrCreateSourceFile(FileSystemPath location, IAssemblyPsiModule assemblyPsiModule);
    private PsiModuleChangeBuilder Builder();
    public sealed virtual IPsiSourceFile GetOrCreateSourceFile(IProjectFile projectFile);
    public sealed virtual IReadOnlyCollection`1<ExternalSourcesMapping> NavigateToSources(CompiledElementNavigationInfo navigationInfo, IReadOnlyCollection`1<IExternalSourcesProvider> providers, ITaskExecutor taskExecutor, bool ignoreFilteringByOptions);
    public sealed virtual ExtendedDebugData GetTypeDebugData(ICompiledElement type, ITaskExecutor taskExecutor, IReadOnlyCollection`1<IExternalSourcesProvider> sourcesProviders);
    public sealed virtual ExtendedDebugData GetTypeDebugData(ICompiledElement type, ITaskExecutor taskExecutor);
    public sealed virtual IReadOnlyList`1<IExternalSourcesProvider> get_OrderedProviders();
    public sealed virtual ExtendedDebugData GetSourceDebugData(FileSystemPath file);
    public sealed virtual ExtendedDebugData GetSourceDebugData(FileSystemPath file, IReadOnlyCollection`1<IExternalSourcesProvider> sourcesProviders);
    public sealed virtual String[] GetGlobalUsings(IPsiSourceFile sourceFile);
    public sealed virtual ExternalSourcesMapping TryGetMapping(FileSystemPath file);
    private void DropMappings();
    private ExternalSourcesMapping GetMappingNonCached(FileSystemPath file);
    private sealed virtual override void JetBrains.Application.Infra.IExternalSourcesDebugInfoProvider.Dump(TextWriter sw);
    [CompilerGeneratedAttribute]
private void <.ctor>b__14_1();
    [CompilerGeneratedAttribute]
private void <.ctor>b__14_3();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <.ctor>b__14_4(ChangeEventArgs args);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Core.Impl.InfoFileContentGenerationService : object {
    private WeakToStrongDictionary`2<IAssembly, string> myAssemblyInfos;
    public string GetInfoFileContentCached(IAssembly assembly);
    public void ClearCaches();
    private string GetAssemblyInfo(IAssembly asm);
    protected virtual void WriteDecompilerVersion(BinaryWriter writer);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Core.Impl.InfoFileContentInvalidator : object {
    private IPsiModules myPsiModules;
    private InfoFileContentGenerationService myGenerationService;
    public InfoFileContentInvalidator(Lifetime lifetime, IPsiModules psiModules, ChangeManager changeManager, InfoFileContentGenerationService generationService);
    public sealed virtual object Execute(IChangeMap changeMap);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Core.Impl.NavigationDecompilationCache : DecompilationCacheBase {
    public NavigationDecompilationCache(ISolution solution, InfoFileContentGenerationService infoFileContentGenerationService, AssemblyCollection assemblyCollection, DocumentManager documentManager, IDocumentStorageHelpers documentOperations, IShellLocks shellLocks, EnsureWritableHandler ensureWritableHandler, ProductSettingsLocation productSettingsLocation);
    protected NavigationDecompilationCache(ISolution solution, InfoFileContentGenerationService infoFileContentGenerationService, AssemblyCollection assemblyCollection, DocumentManager documentManager, IDocumentStorageHelpers documentOperations, IShellLocks shellLocks, EnsureWritableHandler ensureWritableHandler, DecompilationCacheStructure cacheStructure);
}
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Core.Impl.PreferredNavigationType : EnumPattern {
    public static PreferredNavigationType AnyExternalSources;
    public static PreferredNavigationType Decompiler;
    public static PreferredNavigationType MetadataView;
    public static PreferredNavigationType Pdb;
    private PreferredNavigationType(string name);
    private static PreferredNavigationType();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Core.Impl.SharedDecompilationCache : DecompilationCacheBase {
    public SharedDecompilationCache(ISolution solution, InfoFileContentGenerationService infoFileContentGenerationService, AssemblyCollection assemblyCollection, DocumentManager documentManager, IDocumentStorageHelpers documentOperations, IShellLocks shellLocks, EnsureWritableHandler ensureWritableHandler, ProductSettingsLocation productSettingsLocation);
    protected SharedDecompilationCache(ISolution solution, InfoFileContentGenerationService infoFileContentGenerationService, AssemblyCollection assemblyCollection, DocumentManager documentManager, IDocumentStorageHelpers documentOperations, IShellLocks shellLocks, EnsureWritableHandler ensureWritableHandler, DecompilationCacheStructure cacheStructure);
}
public interface JetBrains.ReSharper.Feature.Services.ExternalSources.Core.INavigationDecompilationCache {
}
public interface JetBrains.ReSharper.Feature.Services.ExternalSources.Core.ISharedDecompilationCache {
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Core.PdbDefinesProvider : object {
    [CompilerGeneratedAttribute]
private PdbCache <pdbCache>P;
    public PdbDefinesProvider(PdbCache pdbCache);
    public sealed virtual PreProcessingDirective[] GetPreProcessingDirectives(IPsiModule psiModule);
}
[ZoneDefinitionAttribute]
[ZoneLicenseAttribute("3145720492160894540861205022590510994015486567574670580789")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.ExternalSourcesZone : object {
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Generation.DefaultGenerationManager : object {
    public virtual GenerationStateViewModel AddItem(FileSystemPath filePath, IAssemblyLocation assemblyLocation);
    public virtual void AddInfoItem(string fileName, string filePath, string assemblyName, string assemblyLocation, string infoMessage);
    public virtual void AddDoneItem(string fileName, string filePath, string assemblyName, string assemblyLocation, string infoMessage);
    public virtual void Clear();
    public virtual void CancelAll();
}
public enum JetBrains.ReSharper.Feature.Services.ExternalSources.Generation.GenerationState : Enum {
    public int value__;
    public static GenerationState Pending;
    public static GenerationState Running;
    public static GenerationState Info;
    public static GenerationState Canceled;
    public static GenerationState Done;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.ExternalSources.Generation.GenerationStateEx : object {
    [ExtensionAttribute]
public static bool IsFinalState(GenerationState state);
}
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Generation.GenerationStateViewModel : AAutomation {
    public static double ProgressMinimum;
    public static double ProgressMaximum;
    [CompilerGeneratedAttribute]
private IProperty`1<double> <Progress>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<GenerationState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public IProperty`1<double> Progress { get; }
    public IProperty`1<GenerationState> State { get; }
    [CanBeNullAttribute]
public string Message { get; }
    public GenerationStateViewModel(Lifetime lifetime, GenerationState state, string message);
    [CompilerGeneratedAttribute]
public IProperty`1<double> get_Progress();
    [CompilerGeneratedAttribute]
public IProperty`1<GenerationState> get_State();
    [CompilerGeneratedAttribute]
public string get_Message();
}
public interface JetBrains.ReSharper.Feature.Services.ExternalSources.Generation.IGenerationManager {
    [CanBeNullAttribute]
public abstract virtual GenerationStateViewModel AddItem(FileSystemPath filePath, IAssemblyLocation assemblyLocation);
    public abstract virtual void AddInfoItem(string fileName, string filePath, string assemblyName, string assemblyLocation, string infoMessage);
    public abstract virtual void AddDoneItem(string fileName, string filePath, string assemblyName, string assemblyLocation, string infoMessage);
    public abstract virtual void Clear();
    public abstract virtual void CancelAll();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.IL.ILLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.IL.IlDeclaredElementBinder : DeclaredElementBinder {
    public virtual void BindDeclarations(IFile file, IPsiModule psiModule, bool failOnUnresolvedSymbols);
    private static void BindNamespaces(IILNamespaceDeclaration namespaceDeclaration, ISymbolScope cache, bool failOnUnresolvedSymbols);
    private static void BindClassDeclarations(IILClassDeclaration classDeclaration, ISymbolScope cache, bool failOnUnresolvedSymbols);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.IL.ZoneMarker : object {
}
public interface JetBrains.ReSharper.Feature.Services.ExternalSources.MetadataTranslator.IMetadataTranslator {
    public bool IsAvailable { get; }
    public bool IsMethodBodiesDecompilationSupported { get; }
    public abstract virtual bool get_IsAvailable();
    public abstract virtual bool get_IsMethodBodiesDecompilationSupported();
    [CanBeNullAttribute]
public abstract virtual string TranslateTopLevelTypeElement(ITypeElement element, IAssemblyPsiModule context, MetadataTranslatorOptions options, IMetadataLocalVariablesNameProvider metadataLocalVariablesNameProvider, Boolean& containsUnsafeCode, IProgressIndicator indicator, DebugData debugData, int documentIndex);
    [CanBeNullAttribute]
public abstract virtual string TranslateTopLevelTypeElementByDecompiler(IMetadataTypeInfo typeInfo, IAssemblyPsiModule context, MetadataTranslatorOptions options, IMetadataLocalVariablesNameProvider metadataLocalVariablesNameProvider, IProgressIndicator indicator, DebugData debugData, int documentIndex);
    [CanBeNullAttribute]
public abstract virtual string TranslateAssemblyInfo(IAssemblyPsiModule context, MetadataTranslatorOptions options);
    [CanBeNullAttribute]
public abstract virtual string TranslateAssemblyInfo(IMetadataAssembly assembly, MetadataTranslatorOptions options);
}
public abstract class JetBrains.ReSharper.Feature.Services.ExternalSources.MetadataTranslator.MetadataTranslatorInstanceBase : object {
    public void RenderTopLevelType(ITypeElement typeElement);
    protected abstract virtual void SetTopLevelNullableAnnotationContext(ITypeElement topLevelType);
    protected abstract virtual IDisposable WithNamespace(INamespace ns);
    protected abstract virtual void RenderType(ITypeElement typeElement);
    protected IEnumerable`1<ITypeMember> GetSortedMembers(ITypeElement typeElement);
    protected abstract virtual bool ShouldRenderTypeMember(IDeclaredElement typeMember);
    private static UInt32 GetMemberPriority(ITypeMember member);
    private static void UpdatePriority(UInt32& priority, IAccessor accessor);
    protected static void SortAccessors(IAccessor& accessor1, IAccessor& accessor2);
    protected static bool HasOnlyDefaultConstructor(ITypeElement typeElement);
    private static bool IsProtectedConstructorInAbstractClass(IConstructor constructor);
    protected static bool IsNonStandardAccessor(IAccessor accessor);
    protected static bool IsSealed(IModifiersOwner owner, bool insideInterface);
    protected static int GetRightsWeight(AccessRights rights);
    protected static IEnumerable`1<IField> GetSortedEnumFields(IEnum declaredEnum);
    protected static bool NeedToWriteEnumMemberValues(IEnum declaredEnum);
    [CanBeNullAttribute]
private static IEnumerable`1<Pair`2<IField, decimal>> CalcEnumMembersDecimalValue(IEnum enum);
    protected static string GetParameterName(IParameter parameter);
    protected static bool NeedToRenderLastParameterAttribute(IAccessor accessor);
    protected static bool FieldIs(IField field, string typeFqn, string fieldName);
}
public class JetBrains.ReSharper.Feature.Services.ExternalSources.MetadataTranslator.MetadataTranslatorOptions : object {
    [CompilerGeneratedAttribute]
private bool <ShowNonVisibleMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowXmlDoc>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReorderMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DecompileMethodBodies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DecompileLongMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DecompileProtectedAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowCompilerGeneratedCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowMetadataTokenValues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowIlCodeInComments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InspectMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReplaceInvalidCharactersInIdentifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseExpressionBodiedMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseConditionalOperators>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseNullConditionalOperators>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseNullCoalescingOperators>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseWithExpressions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseUserDefinedOperators>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseForeach>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSwitch>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseUsing>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseLock>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseNameof>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsePlusInsteadOfStringConcat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowDescriptiveHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowAssemblyInfoInHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddPartialModifier>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AssemblyInfoForProject>k__BackingField;
    [CompilerGeneratedAttribute]
private FormatterOptions <FormatterOptions>k__BackingField;
    public static bool ShowXmlDocDefaultValue;
    public static bool ShowNonVisibleMembersDefaultValue;
    public static bool ShowCompilerGeneratedCodeDefaultValue;
    public static bool ShowMetadataTokenValuesDefaultValue;
    public static bool ShowIlCodeInCommentsDefaultValue;
    public static bool DecompileMethodBodiesDefaultValue;
    public static bool DecompileLongMethodsDefaultValue;
    public static bool DecompileProtectedAssembliesDefaultValue;
    public static bool InspectMethodsDefaultValue;
    public static bool ReplaceInvalidCharactersInIdentifiersDefaultValue;
    public static bool UseExpressionBodiedMembersDefaultValue;
    public static bool UseConditionalOperatorsDefaultValue;
    public static bool UseNullConditionalOperatorsDefaultValue;
    public static bool UseNullCoalescingOperatorsDefaultValue;
    public static bool UseWithExpressionsDefaultValue;
    public static bool UseUserDefinedOperatorsDefaultValue;
    public static bool UseForeachDefaultValue;
    public static bool UseSwitchDefaultValue;
    public static bool UseUsingDefaultValue;
    public static bool UseLockDefaultValue;
    public static bool UseNameofDefaultValue;
    public static bool UsePlusInsteadOfStringConcatDefaultValue;
    public static bool ReorderMembersDefaultValue;
    public static bool ShowDescriptiveHeaderDefaultValue;
    public static bool ShowAssemblyInfoInHeaderDefaultValue;
    public static bool AddPartialModifierDefaultValue;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public bool ShowNonVisibleMembers { get; public set; }
    public bool ShowXmlDoc { get; public set; }
    public bool ReorderMembers { get; public set; }
    public bool DecompileMethodBodies { get; public set; }
    public bool DecompileLongMethods { get; public set; }
    public bool DecompileProtectedAssemblies { get; public set; }
    public bool ShowCompilerGeneratedCode { get; public set; }
    public bool ShowMetadataTokenValues { get; public set; }
    public bool ShowIlCodeInComments { get; public set; }
    public bool InspectMethods { get; public set; }
    public bool ReplaceInvalidCharactersInIdentifiers { get; public set; }
    public bool UseExpressionBodiedMembers { get; public set; }
    public bool UseConditionalOperators { get; public set; }
    public bool UseNullConditionalOperators { get; public set; }
    public bool UseNullCoalescingOperators { get; public set; }
    public bool UseWithExpressions { get; public set; }
    public bool UseUserDefinedOperators { get; public set; }
    public bool UseForeach { get; public set; }
    public bool UseSwitch { get; public set; }
    public bool UseUsing { get; public set; }
    public bool UseLock { get; public set; }
    public bool UseNameof { get; public set; }
    public bool UsePlusInsteadOfStringConcat { get; public set; }
    public bool DecodeNullables { get; }
    public bool DecodeTuples { get; }
    public bool ShowDescriptiveHeader { get; public set; }
    public bool ShowAssemblyInfoInHeader { get; public set; }
    public bool AddPartialModifier { get; public set; }
    public bool AssemblyInfoForProject { get; public set; }
    [NotNullAttribute]
public FormatterOptions FormatterOptions { get; public set; }
    public MetadataTranslatorOptions(FormatterOptions formatterOptions);
    [CompilerGeneratedAttribute]
private MetadataTranslatorOptions(MetadataTranslatorOptions original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public bool get_ShowNonVisibleMembers();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ShowNonVisibleMembers(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowXmlDoc();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ShowXmlDoc(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReorderMembers();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ReorderMembers(bool value);
    [CompilerGeneratedAttribute]
public bool get_DecompileMethodBodies();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DecompileMethodBodies(bool value);
    [CompilerGeneratedAttribute]
public bool get_DecompileLongMethods();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DecompileLongMethods(bool value);
    [CompilerGeneratedAttribute]
public bool get_DecompileProtectedAssemblies();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DecompileProtectedAssemblies(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowCompilerGeneratedCode();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ShowCompilerGeneratedCode(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowMetadataTokenValues();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ShowMetadataTokenValues(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowIlCodeInComments();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ShowIlCodeInComments(bool value);
    [CompilerGeneratedAttribute]
public bool get_InspectMethods();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_InspectMethods(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReplaceInvalidCharactersInIdentifiers();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ReplaceInvalidCharactersInIdentifiers(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseExpressionBodiedMembers();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UseExpressionBodiedMembers(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseConditionalOperators();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UseConditionalOperators(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseNullConditionalOperators();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UseNullConditionalOperators(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseNullCoalescingOperators();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UseNullCoalescingOperators(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseWithExpressions();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UseWithExpressions(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseUserDefinedOperators();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UseUserDefinedOperators(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseForeach();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UseForeach(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseSwitch();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UseSwitch(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseUsing();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UseUsing(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseLock();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UseLock(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseNameof();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UseNameof(bool value);
    [CompilerGeneratedAttribute]
public bool get_UsePlusInsteadOfStringConcat();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UsePlusInsteadOfStringConcat(bool value);
    public bool get_DecodeNullables();
    public bool get_DecodeTuples();
    [CompilerGeneratedAttribute]
public bool get_ShowDescriptiveHeader();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ShowDescriptiveHeader(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowAssemblyInfoInHeader();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ShowAssemblyInfoInHeader(bool value);
    [CompilerGeneratedAttribute]
public bool get_AddPartialModifier();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AddPartialModifier(bool value);
    [CompilerGeneratedAttribute]
public bool get_AssemblyInfoForProject();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AssemblyInfoForProject(bool value);
    [CompilerGeneratedAttribute]
public FormatterOptions get_FormatterOptions();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_FormatterOptions(FormatterOptions value);
    public static MetadataTranslatorOptions GetDefaultOptionsForPdb(bool decompileProtectedAssemblies);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(MetadataTranslatorOptions left, MetadataTranslatorOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(MetadataTranslatorOptions left, MetadataTranslatorOptions right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(MetadataTranslatorOptions other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public MetadataTranslatorOptions <Clone>$();
}
public class JetBrains.ReSharper.Feature.Services.ExternalSources.MetadataTranslator.PsiModuleTypesCache : object {
    private ISymbolScope myCache;
    public PsiModuleTypesCache(IPsiModule psiModule);
    public sealed virtual IEnumerable`1<string> GetNamespacesContainingTypeShortName(string typeShortName, int typeParametersCount);
    public sealed virtual IEnumerable`1<string> GetNamespacesContainingAttributeShortName(string attributeTypeShortName, int typeParametersCount);
    private static bool ShortnameEquals(ITypeElement typeElement, string typeShortName, int typeParametersCount);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.NavigationModeProvider : object {
    [NotNullAttribute]
private ISettingsStore mySettingsStore;
    [NotNullAttribute]
private IProperty`1<ExternalSourcesNavigationMode> myNavigationMode;
    [NotNullAttribute]
private IProperty`1<bool> myUseSymbolFiles;
    [NotNullAttribute]
private IProperty`1<bool> myDownload;
    public NavigationModeProvider(Lifetime lifetime, ISettingsStore settingsStore, IThreading threading);
    public virtual ExternalSourcesNavigationMode GetNavigationMode();
    public virtual bool UseSymbolFiles();
    public virtual bool DownloadPdb();
    public virtual ExternalSourcesNavigationMode GetNavigationMode(IDataContext context);
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Occurrences.AssemblyAttributeOccurrencePresenter : object {
    public sealed virtual bool Present(IMenuItemDescriptor descriptor, IOccurrence occurrence, OccurrencePresentationOptions occurrencePresentationOptions);
    public sealed virtual bool IsApplicable(IOccurrence occurrence);
}
[OccurrenceProviderAttribute]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Occurrences.AssemblyAttributeOccurrenceProvider : object {
    public sealed virtual IOccurrence MakeOccurrence(FindResult findResult);
}
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.AssemblyByPdbProviders.AssemblyByPdbProviderBase : object {
    private AssemblyInfoDatabase myAssemblyInfoDataBase;
    public AssemblyByPdbProviderBase(AssemblyInfoDatabase assemblyInfoDataBase);
    public virtual ICollection`1<FileSystemPath> GetAssemblies(PdbNameAndSignature pdb);
    protected virtual IEnumerable`1<FileSystemPath> GetAssembliesWithName(string name);
    protected ICollection`1<FileSystemPath> WithPdbNameAndSignature(IEnumerable`1<FileSystemPath> locations, PdbNameAndSignature pdb);
    private bool TestAssembly(VirtualFileSystemPath assemblyPath, PdbNameAndSignature pdb);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.AssemblyByPdbProviders.AssemblyExplorerAssemblyByPdbDefaultProvider : AssemblyByPdbProviderBase {
    public AssemblyExplorerAssemblyByPdbDefaultProvider(AssemblyInfoDatabase assemblyInfoDataBase);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.AssemblyByPdbProviders.FrameworkAssemblyByPdbDefaultProvider : AssemblyByPdbProviderBase {
    public FrameworkAssemblyByPdbDefaultProvider(AssemblyInfoDatabase assemblyInfoDataBase);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.AssemblyByPdbProviders.GacAssemblyByPdbDefaultProvider : AssemblyByPdbProviderBase {
    public GacAssemblyByPdbDefaultProvider(AssemblyInfoDatabase assemblyInfoDataBase);
}
public interface JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.AssemblyByPdbProviders.IAssemblyByPdbProvider {
    [NotNullAttribute]
public abstract virtual ICollection`1<FileSystemPath> GetAssemblies(PdbNameAndSignature pdb);
}
public interface JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.AssemblyByPdbProviders.IAssemblyExplorerAssemblyByPdbProvider {
}
public interface JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.AssemblyByPdbProviders.IFrameworkAssemblyByPdbProvider {
}
public interface JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.AssemblyByPdbProviders.IGacAssemblyByPdbProvider {
}
public interface JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.AssemblyByPdbProviders.IInMemoryAssemblyByPdbProvider {
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.AssemblyByPdbProviders.InMemoryAssemblyByPdbDefaultProvider : AssemblyByPdbProviderBase {
    public InMemoryAssemblyByPdbDefaultProvider(AssemblyInfoDatabase assemblyInfoDataBase);
}
public interface JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.AssemblyByPdbProviders.INuGetPackagesCacheAssemblyByPdbProvider {
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.AssemblyByPdbProviders.NuGetPackagesCacheAssemblyByPdbDefaultProvider : AssemblyByPdbProviderBase {
    public NuGetPackagesCacheAssemblyByPdbDefaultProvider(AssemblyInfoDatabase assemblyInfoDataBase);
}
internal class JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.Cache.FileState : object {
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private long <FileLength>k__BackingField;
    public DateTime Timestamp { get; }
    public long FileLength { get; }
    public FileState(DateTime timestamp, long fileLength);
    [CompilerGeneratedAttribute]
public DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public long get_FileLength();
    public static void Write(UnsafeWriter writer, FileState state);
    public static FileState Read(UnsafeReader reader);
}
public abstract class JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.Cache.GeneratedPdbCacheBase : object {
    private static string SymbolCacheFolder;
    private FileSystemPath mySymbolCachePath;
    protected GeneratedPdbCacheBase(ProductSettingsLocation productSettingsLocation, string subfolderName);
    public sealed virtual FileSystemPath TryGetExistingPdbFile(string pdbFileName, string pdbSignature);
    public sealed virtual FileSystemPath GetPdbFilePath(string pdbFileName, string pdbSignature);
    public sealed virtual FileSystemPath GetPdbFolderPath(string pdbFileName, string pdbSignature);
}
public interface JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.Cache.IGeneratedPdbCache {
    [CanBeNullAttribute]
public abstract virtual FileSystemPath TryGetExistingPdbFile(string pdbFileName, string pdbSignature);
    public abstract virtual FileSystemPath GetPdbFilePath(string pdbFileName, string pdbSignature);
    public abstract virtual FileSystemPath GetPdbFolderPath(string pdbFileName, string pdbSignature);
}
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.Cache.ParsedPdbMemoryStorage : MemoryKeyValueStorage`2<FileSystemPath, ParsedPdb> {
    protected virtual string GetKeyStrongHash(FileSystemPath key);
}
[DefaultMemberAttribute("Item")]
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.Cache.PdbCache : object {
    private Lifetime myLifetime;
    private ILogger myLogger;
    private ISymbolsProvidersManager mySymbolsProvidersManager;
    private IPersistentSortedMap`2<FileSystemPath, PdbInfo> myPdbInfos;
    private IPersistentSortedMap`2<FileSystemPath, CompactOneToListMap`2<string, string>> myTypeToFilesMapping;
    private IPersistentSortedMap`2<FileSystemPath, HashSet`1<string>> myTypesWithInferredMapping;
    private IPersistentSortedMap`2<FileSystemPath, PdbState> myPdbStates;
    private IPersistentSortedMap`2<FileSystemPath, Int32[]> myPdbSourceHashes;
    private IPersistentSortedMap`2<FileSystemPath, FileState> myAssemblyStates;
    private IPersistentSortedMap`2<FileSystemPath, IList`1<DebugInfo>> myDebugInfoLists;
    private IPersistentSortedMap`2<FileSystemPath, String[]> myGlobalUsings;
    private IPersistentSortedMap`2<FileSystemPath, String[]> myGlobalUsingsFiles;
    private FreeThreadedGroupingEvent myRescanGroupingEvent;
    private SynchronizedSet`1<FileSystemPath> myAssembliesToRescan;
    public ISimpleSignal Changed;
    public PdbInfo Item { get; }
    public PdbCache(Lifetime lifetime, ILogger logger, IThreading taskHost, ShellCaches shellCaches, ISymbolsProvidersManager symbolsProvidersManager);
    private void Rescan(Lifetime lifetime);
    [NotNullAttribute]
private IList`1<DebugInfo> GetDebugInfos(FileSystemPath assemblyPath);
    private static Int32[] GetSourceHashes(IEnumerable`1<string> documents);
    public void Rescan(FileSystemPath path);
    public void RescanSync(FileSystemPath path);
    public void RescanSync(ICollection`1<FileSystemPath> paths);
    public PdbInfo get_Item(FileSystemPath assemblyPath);
    public IEnumerable`1<FileSystemPath> AllPaths();
    public IEnumerable`1<PdbInfo> AllInfos();
    public IEnumerable`1<FileSystemPath> GetFilteredPaths(FileSystemPath sourcePath);
    public IEnumerable`1<FileSystemPath> GetAssembliesReferencingSource(Byte[] sourceChecksum);
    [CanBeNullAttribute]
public CompactOneToListMap`2<string, string> GetTypeToFilesMapping(FileSystemPath assemblyPath, HashSet`1& typesWithInferredMapping);
    [CanBeNullAttribute]
public CompactOneToListMap`2<string, string> GetTypeToFilesMapping(PdbInfo pdbInfo);
    [CanBeNullAttribute]
public CompactOneToListMap`2<string, string> GetTypeToFilesMapping(PdbInfo pdbInfo, HashSet`1& typesWithInferredMapping);
    [CanBeNullAttribute]
public CompactOneToListMap`2<string, string> GetCalculatedTypeToFilesMapping(PdbInfo pdbInfo, HashSet`1& typesWithInferredMapping);
    public bool GlobalUsingsAreCached(FileSystemPath assemblyPath);
    [CanBeNullAttribute]
public String[] GetGlobalUsings(FileSystemPath assemblyPath, Func`2<string, IEnumerable`1<string>> getGlobalUsingsInFile);
    [CanBeNullAttribute]
public String[] GetGlobalUsingsFiles(FileSystemPath assemblyPath);
    [CanBeNullAttribute]
public PreProcessingDirective[] GetDefines(FileSystemPath assemblyPath);
    private void Wait();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.Cache.PdbCacheInvalidator : object {
    private Lifetime myLifetime;
    private ILogger myLogger;
    private ISolution mySolution;
    private IFileSystemTracker myFileSystemTracker;
    private IEnumerable`1<IDirectorySymbolsCache> mySymbolsCaches;
    private PdbCache myPdbCache;
    private IAssemblyCollection myAssemblyCollection;
    private IShellLocks myLocks;
    private IPsiModules myModules;
    private IThreading myInvocator;
    private GroupingEvent myReloadEvent;
    private static JetHashSet`1<string> ourInterestingExtensions;
    private SequentialLifetimes myTrackingLifetime;
    private Property`1<Nullable`1<ImmutableArray`1<FileSystemPath>>> myCacheDirectories;
    public PdbCacheInvalidator(Lifetime lifetime, ILogger logger, ISolution solution, ChangeManager changeManager, IFileSystemTracker fileSystemTracker, IEnumerable`1<IDirectorySymbolsCache> symbolsCaches, IThreading invocator, PdbCache pdbCache, IAssemblyCollection assemblyCollection, IShellLocks locks, IPsiModules modules, ISolutionLoadTasksScheduler scheduler);
    private static PdbCacheInvalidator();
    private void SymbolsSourcesChanged();
    private void RequestReload();
    private void Reload();
    private void ReregisterChangesListening();
    private bool IsPathUnderCacheDirectory(FileSystemPath path);
    private void CollectNames(FileSystemChangeDelta delta, JetHashSet`1<string> names);
    private void OnFileSystemChange(FileSystemChange change);
    private void OnPossibleCacheFileChanged(ICollection`1<string> names);
    private void RescanAll();
    private bool IsValid(IAssemblyFile assemblyFile);
    public sealed virtual object Execute(IChangeMap changeMap);
    private sealed virtual override void JetBrains.Application.Infra.IExternalSourcesDebugInfoProvider.Dump(TextWriter sw);
    [CompilerGeneratedAttribute]
private void <RequestReload>b__16_0(Lifetime asyncLifetime);
    [CompilerGeneratedAttribute]
private void <RequestReload>b__16_1();
    [CompilerGeneratedAttribute]
private void <Reload>b__17_0();
    [CompilerGeneratedAttribute]
private void <ReregisterChangesListening>b__18_0(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private bool <RescanAll>b__23_0();
    [CompilerGeneratedAttribute]
private void <Execute>b__25_0(AssemblyFileChange change);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.Cache.PdbChangesNearAssembliesAdviser : object {
    private Dictionary`2<IPsiAssembly, LifetimeDefinition> myCookies;
    private IFileSystemTracker myFileSystemTracker;
    private Lifetime myLifetime;
    private IPsiModules myPsiModules;
    public PdbChangesNearAssembliesAdviser(Lifetime lifetime, ChangeManager changeManager, IPsiModules psiModules, IFileSystemTracker fileSystemTracker);
    public sealed virtual object Execute(IChangeMap changeMap);
}
internal class JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.Cache.PdbState : object {
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private long <FileLength>k__BackingField;
    public DateTime Timestamp { get; }
    public FileSystemPath Path { get; }
    public long FileLength { get; }
    public PdbState(DateTime timestamp, FileSystemPath path, long fileLength);
    [CompilerGeneratedAttribute]
public DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public FileSystemPath get_Path();
    [CompilerGeneratedAttribute]
public long get_FileLength();
    public static void Write(UnsafeWriter writer, PdbState state);
    public static PdbState Read(UnsafeReader reader);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.CSharp.CSharpPdbGlobalUsingsService : DefaultPdbGlobalUsingsService {
    private PdbCache myPdbCache;
    private IPdbService myPdbService;
    private INavigationDecompilationCache myDecompilationCache;
    public CSharpPdbGlobalUsingsService(PdbCache pdbCache, IPdbService pdbService, INavigationDecompilationCache decompilationCache);
    public virtual String[] GetGlobalUsings(IPsiSourceFile sourceFile, IExternalSourcesService externalSourcesService);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.CSharp.CSharpPdbGlobalUsingsService/<GetGlobalUsingsInFile>d__5")]
private IEnumerable`1<string> GetGlobalUsingsInFile(string fileFromPdb, IAssemblyPsiModule assemblyPsiModule, IAssemblyFile assemblyFile, PsiLanguageType fileLanguage, IExternalSourcesService externalSourcesService);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.CSharp.ZoneMarker : object {
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.DefaultPdbGlobalUsingsService : object {
    public virtual String[] GetGlobalUsings(IPsiSourceFile sourceFile, IExternalSourcesService externalSourcesService);
}
[ShellComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.DefaultSourceLinkNotifications : object {
    protected ISourceLinkCredentialManager SourceLinkCredentialManager;
    private UserNotifications myUserNotifications;
    private SequentialLifetimes myLifetimes;
    [CompilerGeneratedAttribute]
private IPrivateSourceLinkStatistics <Statistics>k__BackingField;
    protected static TimeSpan ExpirationTimeout;
    protected IPrivateSourceLinkStatistics Statistics { get; }
    public DefaultSourceLinkNotifications(Lifetime lifetime, ISourceLinkCredentialManager sourceLinkCredentialManager, UserNotifications userNotifications, IPrivateSourceLinkStatistics statistics);
    private static DefaultSourceLinkNotifications();
    [CompilerGeneratedAttribute]
protected IPrivateSourceLinkStatistics get_Statistics();
    public virtual void NotifyUnauthorized(Uri uri, Nullable`1<HttpStatusCode> statusCode);
    protected Lifetime NextLifetime();
    protected void TerminateCurrentIfAlive(Lifetime lifetime);
    protected static string GetShortName(Uri uri);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_0(PropertyChangedEventArgs`1<bool> arg);
}
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.FolderSubstitution : object {
    private bool myEnabled;
    private string mySourceFolder;
    private string myTargetFolder;
    public bool Enabled { get; }
    public string SourceFolder { get; }
    public string TargetFolder { get; }
    public bool Incomplete { get; }
    public FolderSubstitution(string sourceFolder, string targetFolder, bool enabled);
    public bool get_Enabled();
    public string get_SourceFolder();
    public string get_TargetFolder();
    public bool get_Incomplete();
    public static void WriteToXml(XmlElement element, FolderSubstitution substitution);
    public static FolderSubstitution ReadFromXml(XmlElement element);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public FolderSubstitution SetEnabled(bool enabled);
    public static ImmutableArray`1<FolderSubstitution> FromSettings(IContextBoundSettingsStore settingsStore, SettingsIndexedEntry folderSubstitutionsSettingsEntry);
    public static void ToSettings(IContextBoundSettingsStore settingsStore, SettingsIndexedEntry folderSubstitutionsSettingsEntry, ImmutableArray`1<FolderSubstitution> folderSubstitutions);
}
public interface JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.IPdbGlobalUsingsService {
    [CanBeNullAttribute]
public abstract virtual String[] GetGlobalUsings(IPsiSourceFile sourceFile, IExternalSourcesService externalSourcesService);
}
public interface JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.IPdbService {
    [CanBeNullAttribute]
public abstract virtual PdbSourceFile GetPdbSourceFile(FileSystemPath path);
    [CanBeNullAttribute]
public abstract virtual string GetOriginalSourceFilePath(PdbSourceFile pdbSourceFile);
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<PdbSourceFile> GetTypeFiles(IAssemblyFile assembly, IClrTypeName typeName, Int32& countFromPdb, Boolean& inferred);
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<ValueTuple`2<string, string>> GetTypeUrls(IAssemblyFile assembly, IClrTypeName typeName, Boolean& inferred, PdbTypeUrlsResult& resultCode);
    [CanBeNullAttribute]
public abstract virtual PdbSourceFile GetSourceFile(IAssemblyFile assembly, string fileNameFromPdb);
    [CanBeNullAttribute]
public abstract virtual PdbInfo GetPdbInformation(IAssemblyFile assemblyFile);
    [CanBeNullAttribute]
public abstract virtual PdbInfo GetPdbInformation(FileSystemPath assemblyPath);
    public abstract virtual void DownloadSourceFilesForTypeIfNeeded(IAssemblyFile assemblyFile, IClrTypeName typeName, IProgressIndicator progressIndicator);
    public abstract virtual void DownloadSourceFileIfNeeded(IAssemblyFile assemblyFile, string fileNameFromPdb, IProgressIndicator progressIndicator);
    public abstract virtual bool InSourcesCacheDirectory(FileSystemPath path);
    public abstract virtual IEnumerable`1<ValueTuple`2<FileSystemPath, string>> GetFilePathsWithFolderSubstitution(FileSystemPath fsp);
}
public interface JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.IPrivateSourceLinkStatistics {
    public abstract virtual void Authorized();
    public abstract virtual void NoReaction();
    public abstract virtual void Disabled();
    public abstract virtual void Enabled();
    public abstract virtual void LogServer(SourceLinkServer server);
    public abstract virtual void SuccessfullyDownloaded();
    public abstract virtual void CannotDownload();
}
public interface JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.ISourceLinkNotifications {
    public abstract virtual void NotifyUnauthorized(Uri uri, Nullable`1<HttpStatusCode> statusCode);
}
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.PdbInfo : object {
    [CompilerGeneratedAttribute]
private FileSystemPath <AssemblyFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <PdbPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ParsedPdb <ParsedPdb>k__BackingField;
    [NotNullAttribute]
public FileSystemPath AssemblyFilePath { get; }
    [NotNullAttribute]
public FileSystemPath PdbPath { get; }
    [NotNullAttribute]
public ParsedPdb ParsedPdb { get; }
    [CanBeNullAttribute]
public SrcSrvInfo SrcSrvInfo { get; }
    [CanBeNullAttribute]
public SourceLink SourceLink { get; }
    public DateTime Timestamp { get; }
    public DebugInfoType DebugInfoType { get; }
    public PdbInfo(FileSystemPath assemblyFilePath, FileSystemPath pdbPath, ParsedPdb parsedPdb);
    [CompilerGeneratedAttribute]
public FileSystemPath get_AssemblyFilePath();
    [CompilerGeneratedAttribute]
public FileSystemPath get_PdbPath();
    [CompilerGeneratedAttribute]
public ParsedPdb get_ParsedPdb();
    public SrcSrvInfo get_SrcSrvInfo();
    public SourceLink get_SourceLink();
    public DateTime get_Timestamp();
    public DebugInfoType get_DebugInfoType();
    public bool ReferencesFile(FileSystemPath filePath);
    public bool ReferencesFile(string filePath);
    public PdbDocumentInfo TryGetDocumentInfo(string fileName);
    public virtual string ToString();
    public static void Write(UnsafeWriter s, PdbInfo arg);
    public static PdbInfo Read(UnsafeReader s);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.ExternalSource.ExternalSourcesSettings", "JetBrains.ReSharper.Feature.Services.ExternalSources.Resources.Strings", "SymbolFilesUsageOptionsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.PdbNavigationSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.ExternalSources.Resources.Strings", "UseSymbolFilesToGetCompiledCodeSourcesSettingDescription")]
public bool UseSymbolFiles;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.ExternalSources.Resources.Strings", "DownloadSymbolFilesFromSymbolServerSSettingDescription")]
public bool Download;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.ExternalSources.Resources.Strings", "EnablePrivateSourceLinkSupportSettingDescription")]
public bool SourceLinkV3;
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Feature.Services.ExternalSources.Resources.Strings", "FolderSubstitutionsUsedInSearchingForLocalSourcesSettingDescription")]
public IIndexedEntry`2<string, string> FolderSubstitutions;
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Feature.Services.ExternalSources.Resources.Strings", "PdbCmdAcceptedUnacceptedPatternsSettingDescription")]
public IIndexedEntry`2<string, int> PdbCmdPatterns;
}
[GlobalSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.PdbOptionsConverter : object {
    public sealed virtual void Upgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.PdbOptionsDumper : object {
    private ISettingsStore mySettingsStore;
    private ISolution mySolution;
    private SettingsIndexedEntry myFolderSubstitutionsSettingsEntry;
    private SettingsScalarEntry myDownloadSettingsEntry;
    private SettingsScalarEntry myUseSymbolFilesSettingsEntry;
    public PdbOptionsDumper(ISettingsStore settingsStore, ISolution solution);
    public sealed virtual void Dump(TextWriter sw);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.PdbServiceImpl : object {
    private static ILogger ourLog;
    private SrcSrvSourcesCache mySrcSrvSourcesCache;
    private SourceLinkOrEmbeddedSourcesCache mySourceLinkOrEmbeddedSourcesCache;
    private ISourcesDownloader mySourcesDownloader;
    private Lifetime myLifetime;
    private PdbCache myPdbCache;
    private AssemblyCollection myAssemblyCollection;
    private ILazy`1<ISourceLinkNotifications> mySourceLinkNotifications;
    private ILazy`1<ISourceLinkCredentialManager> mySourceLinkCredentialManager;
    private IContextBoundSettingsStore myContextBoundSettings;
    private SettingsIndexedEntry myFolderSubstitutionsSettingsEntry;
    private ImmutableArray`1<FolderSubstitution> myFolderSubstitutions;
    private bool myAllowDownload;
    protected FileSystemPath SolutionDirectory;
    private HashSet`1<string> mySupportedExtensions;
    private HashSet`1<string> SupportedExtensions { get; }
    public PdbServiceImpl(Lifetime lifetime, ISolution solution, SrcSrvSourcesCache srcSrvSourcesCache, SourceLinkOrEmbeddedSourcesCache sourceLinkOrEmbeddedSourcesCache, ISourcesDownloader sourcesDownloader, PdbCache pdbCache, IExternalSourcesMappingChangeManager externalSourcesMappingChangeManager, AssemblyCollection assemblyCollection, ExternalSourcesActivation externalSourcesActivation, ISettingsStore settingsStore, ILazy`1<ISourceLinkNotifications> sourceLinkNotifications, ILazy`1<ISourceLinkCredentialManager> sourceLinkCredentialManager);
    private static PdbServiceImpl();
    private void UpdateSettings();
    private HashSet`1<string> get_SupportedExtensions();
    public sealed virtual PdbSourceFile GetPdbSourceFile(FileSystemPath path);
    public sealed virtual string GetOriginalSourceFilePath(PdbSourceFile pdbSourceFile);
    private int CommonSuffixLength(string s1, string s2);
    private PdbSourceFile GetPdbSourceFileHonorShortNamesAndSubstitutions(FileSystemPath path);
    private PdbSourceFile GetPdbSourceFileHonorSubstitutions(FileSystemPath path);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.PdbServiceImpl/<GetFilePathsWithFolderSubstitution>d__24")]
public virtual IEnumerable`1<ValueTuple`2<FileSystemPath, string>> GetFilePathsWithFolderSubstitution(FileSystemPath fsp);
    private PdbSourceFile GetPdbSourceFileReal(FileSystemPath path, string url);
    private ValueTuple`2<IList`1<string>, bool> GetTypeFiles(PdbInfo pdbInfo, string type);
    public sealed virtual IReadOnlyCollection`1<PdbSourceFile> GetTypeFiles(IAssemblyFile assembly, IClrTypeName typeName, Int32& countFromPdb, Boolean& inferred);
    public sealed virtual PdbSourceFile GetSourceFile(IAssemblyFile assembly, string fileNameFromPdb);
    private ValueTuple`2<IList`1<PdbSourceFile>, bool> GetSourceFiles(IAssemblyFile assembly, Func`2<PdbInfo, ValueTuple`2<IList`1<string>, bool>> getFileNames, Int32& countFromPdb);
    public sealed virtual PdbInfo GetPdbInformation(IAssemblyFile assemblyFile);
    public sealed virtual PdbInfo GetPdbInformation(FileSystemPath assemblyPath);
    public sealed virtual void DownloadSourceFilesForTypeIfNeeded(IAssemblyFile assembly, IClrTypeName typeName, IProgressIndicator progressIndicator);
    public sealed virtual void DownloadSourceFileIfNeeded(IAssemblyFile assembly, string fileNameFromPdb, IProgressIndicator progressIndicator);
    private void DownloadSourceFilesIfNeeded(IAssemblyFile assembly, Func`2<PdbInfo, ValueTuple`2<IList`1<string>, bool>> getFileNames, IProgressIndicator progressIndicator);
    public sealed virtual IReadOnlyCollection`1<ValueTuple`2<string, string>> GetTypeUrls(IAssemblyFile assembly, IClrTypeName typeName, Boolean& inferred, PdbTypeUrlsResult& resultCode);
    public sealed virtual bool InSourcesCacheDirectory(FileSystemPath path);
    private sealed virtual override void JetBrains.Application.Infra.IExternalSourcesDebugInfoProvider.Dump(TextWriter sw);
    [CompilerGeneratedAttribute]
private void <.ctor>b__14_1(Lifetime _);
    [CompilerGeneratedAttribute]
private void <UpdateSettings>b__15_0();
    [CompilerGeneratedAttribute]
private FileSystemPath <GetFilePathsWithFolderSubstitution>g__TryMakeAbsolute|24_0(FileSystemPath path);
    [CompilerGeneratedAttribute]
private bool <DownloadSourceFilesIfNeeded>g__ExistsInPdbSourcesCache|34_0(SourceLocation sourceLocation);
    [CompilerGeneratedAttribute]
private bool <DownloadSourceFilesIfNeeded>g__DownloadSource|34_1(SourceLocation sourceLocation, bool inferredOrGlobalUsings, IProgressIndicator downloadProgress);
    [CompilerGeneratedAttribute]
private ISourcesCache <DownloadSourceFilesIfNeeded>g__GetSourcesCache|34_2(SourceLocationOrigin sourceLocationOrigin);
    [CompilerGeneratedAttribute]
internal static string <DownloadSourceFilesIfNeeded>g__GetSourcesCacheName|34_3(SourceLocationOrigin sourceLocationOrigin);
}
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.PdbSourceFile : object {
    [CompilerGeneratedAttribute]
private IAssemblyFile <AssemblyFile>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <File>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUserFile>k__BackingField;
    [NotNullAttribute]
public IAssemblyFile AssemblyFile { get; }
    [NotNullAttribute]
public FileSystemPath File { get; }
    public bool IsUserFile { get; }
    public PdbSourceFile(IAssemblyFile assemblyFile, FileSystemPath file, bool isUserFile);
    [CompilerGeneratedAttribute]
public IAssemblyFile get_AssemblyFile();
    [CompilerGeneratedAttribute]
public FileSystemPath get_File();
    [CompilerGeneratedAttribute]
public bool get_IsUserFile();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.PdbSourceFolderSubstitutionServiceImpl : PdbSourceFolderSubstitutionService {
    private IPdbService myPdbService;
    public PdbSourceFolderSubstitutionServiceImpl(IPdbService pdbService);
    public virtual IEnumerable`1<VirtualFileSystemPath> GetFilePathsWithFolderSubstitution(VirtualFileSystemPath fsp);
}
public enum JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.PdbTypeUrlsResult : Enum {
    public int value__;
    public static PdbTypeUrlsResult Success;
    public static PdbTypeUrlsResult NoDebugInfo;
    public static PdbTypeUrlsResult NoLocalPdb;
    public static PdbTypeUrlsResult NoTypeFiles;
    public static PdbTypeUrlsResult NoSourceServerInfo;
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Pdb.PrivateSourceLinkStatisticsStub : object {
    public virtual void Authorized();
    public virtual void NoReaction();
    public virtual void Disabled();
    public virtual void Enabled();
    public virtual void LogServer(SourceLinkServer server);
    public virtual void SuccessfullyDownloaded();
    public virtual void CannotDownload();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.ReferenceSource.ReferenceSourceDefinesProvider : object {
    private static PreProcessingDirective[] ourRefSrcDirectives;
    private static ReferenceSourceDefinesProvider();
    public sealed virtual PreProcessingDirective[] GetPreProcessingDirectives(IPsiModule psiModule);
}
public static class JetBrains.ReSharper.Feature.Services.ExternalSources.ReferenceSource.ReferenceSourceUtilsPsi : object {
    public static bool IsRelatedToReferenceSource(IPsiModule psiModule);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Feature.Services.ExternalSources.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string DownloadSymbolFilesFromSymbolServerSSettingDescription { get; }
    public static string DumpExternalSourcesActionText { get; }
    public static string EnablePrivateSourceLinkSupportSettingDescription { get; }
    public static string FolderSubstitutionsUsedInSearchingForLocalSourcesSettingDescription { get; }
    public static string PdbCmdAcceptedUnacceptedPatternsSettingDescription { get; }
    public static string SymbolFilesUsageOptionsSettingDescription { get; }
    public static string UseSymbolFilesToGetCompiledCodeSourcesSettingDescription { get; }
    public static string Authenticate_Caption { get; }
    public static string ExternalSources_Text { get; }
    public static string CannotDownload__ClickToAuthenticate_Text { get; }
    public static string OpenInBrowser_Caption { get; }
    public static string ExternalSourcesFile_Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_DownloadSymbolFilesFromSymbolServerSSettingDescription();
    public static string get_DumpExternalSourcesActionText();
    public static string get_EnablePrivateSourceLinkSupportSettingDescription();
    public static string get_FolderSubstitutionsUsedInSearchingForLocalSourcesSettingDescription();
    public static string get_PdbCmdAcceptedUnacceptedPatternsSettingDescription();
    public static string get_SymbolFilesUsageOptionsSettingDescription();
    public static string get_UseSymbolFilesToGetCompiledCodeSourcesSettingDescription();
    public static string get_Authenticate_Caption();
    public static string get_ExternalSources_Text();
    public static string get_CannotDownload__ClickToAuthenticate_Text();
    public static string get_OpenInBrowser_Caption();
    public static string get_ExternalSourcesFile_Text();
}
public abstract class JetBrains.ReSharper.Feature.Services.ExternalSources.Utils.AbstractKeyValueStorage`2 : object {
    private static int DATAFILE_SIGNATURE;
    private FileSystemPath myCacheDirectory;
    private int myFormatVersion;
    private bool myBrokenIo;
    private Mutex mySystemWideMutex;
    protected AbstractKeyValueStorage`2(FileSystemPath cacheDirectory, int formatVersion);
    private void CreateCacheDirectory();
    public sealed virtual void Dispose();
    public sealed virtual TValue Get(TKey key);
    public sealed virtual void Set(TKey key, TValue value);
    public sealed virtual void Remove(TKey key);
    protected abstract virtual string GetKeyStrongHash(TKey key);
    protected abstract virtual TValue ReadValue(TKey key, BinaryReader reader);
    protected abstract virtual void WriteValue(TKey key, TValue value, BinaryWriter writer);
    private FileSystemPath GetRecordFile(TKey key);
}
public static class JetBrains.ReSharper.Feature.Services.ExternalSources.Utils.CacheDirectoryUtil : object {
    public static FileSystemPath CreateCache(Lifetime lifetime, FileSystemPath solutionCacheFolder, bool persistCaches, string cacheName);
    private static bool TestCacheDirectory(FileSystemPath dir);
}
public static class JetBrains.ReSharper.Feature.Services.ExternalSources.Utils.CompiledModuleNamespacesUtil : object {
    [CanBeNullAttribute]
private static INamespace GetVBMyNamespace(IPsiModule psiModule);
    public static String[] GetPreimportedNamespaces(IPsiModule psiModule);
    [CanBeNullAttribute]
public static INamespace GetDefaultNamespace(IPsiModule psiModule);
}
public abstract class JetBrains.ReSharper.Feature.Services.ExternalSources.Utils.DeclaredElementBinder : object {
    public abstract virtual void BindDeclarations(IFile file, IPsiModule psiModule, bool failOnUnresolvedSymbols);
}
public static class JetBrains.ReSharper.Feature.Services.ExternalSources.Utils.DeclaredElementBinderUtils : object {
    public static void BindTypeMembersToDeclaredElementsUsingXmlDocId(ITypeDeclaration typeDeclaration, bool failOnUnresolvedSymbols);
    public static void BindParameters(IParametersOwnerDeclaration declaration, IParametersOwner declaredElement);
}
public static class JetBrains.ReSharper.Feature.Services.ExternalSources.Utils.DeclaredElementUtil : object {
    [CanBeNullAttribute]
public static ITypeElement GetTopLevelTypeElement(IClrDeclaredElement declaredElement);
}
public static class JetBrains.ReSharper.Feature.Services.ExternalSources.Utils.DecompiledSourcesConstants : object {
    public static string Id;
}
public static class JetBrains.ReSharper.Feature.Services.ExternalSources.Utils.DecompilerBasedConstants : object {
    public static string MinorVersion;
    public static string FullTypeNameKey;
    public static string PsiLanguageTypeKey;
    public static string CodeMinorVersionKey;
    public static string XmlDocPathKey;
    public static string ShowXmlDocKey;
    public static string ShowNonVisibleMembersKey;
    public static string ShowCompilerGeneratedCodeKey;
    public static string ShowMetadataTokenValuesKey;
    public static string ShowIlCodeInCommentsKey;
    public static string DecompileMethodBodiesKey;
    public static string DecompileLongMethodsKey;
    public static string DecompileProtectedAssembliesKey;
    public static string InspectMethodsKey;
    public static string ReplaceInvalidCharactersInIdentifiersKey;
    public static string UseExpressionBodiedMembersKey;
    public static string UseConditionalOperatorsKey;
    public static string UseNullConditionalOperatorsKey;
    public static string UseNullCoalescingOperatorsKey;
    public static string UseWithExpressionsKey;
    public static string UseUserDefinedOperatorsKey;
    public static string UseForeachKey;
    public static string UseSwitchKey;
    public static string UseUsingKey;
    public static string UseLockKey;
    public static string UseNameofKey;
    public static string UsePlusInsteadOfStringConcatKey;
    public static string ReorderMembersKey;
    public static string ShowDescriptiveHeaderKey;
    public static string ShowAssemblyInfoInHeaderKey;
    public static string AddPartialModifierKey;
    public static string UseTabsForIndentKey;
    public static string IndentSizeKey;
    public static string IndentEmptyLinesKey;
    public static string PlaceOpenBraceOnNewLineKey;
}
public static class JetBrains.ReSharper.Feature.Services.ExternalSources.Utils.EscapingFileNameUtil : object {
    private static HashSet`1<char> ourInvalidFileNameChars;
    private static HashSet`1<char> ourInvalidRelativePathChars;
    private static HashSet`1<char> ourInvalidProjectItemPathChars;
    private static string ProjectItemEscapeString;
    private static EscapingFileNameUtil();
    private static string EscapeName(string name, HashSet`1<char> invalidChars, bool projectItem);
    private static string EscapeSystemReservedName(string name);
    public static string EscapeFileName(string fileName, bool projectItem);
    public static string EscapeRelativePathName(string path, bool projectItem);
    public static string UnescapeFileName(string fileName);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.ExternalSources.Utils.ExtensionMethods : object {
    [ExtensionAttribute]
public static void Dump(IDictionary`2<TK, TV> dict, StringBuilder builder);
    [ExtensionAttribute]
public static string DumpToString(IDictionary`2<TK, TV> dict);
    [ExtensionAttribute]
public static void DumpOneToListMap(CompactOneToListMap`2<TK, TV> map, StringBuilder builder);
    [ExtensionAttribute]
public static void ReadValueFromXmlAttribute(IProperty`1<T> property, XmlElement element, T defaultValue);
    [ExtensionAttribute]
public static void ReadValueFromXmlAttribute(IProperty`1<string> property, XmlElement element, string defaultValue);
    [ExtensionAttribute]
public static void WriteToXmlAttribute(IProperty`1<T> property, XmlElement element);
    [ExtensionAttribute]
public static string EnsureEndsWithNewLine(string s);
    [ExtensionAttribute]
public static IPsiAssembly[] GetAllPsiAssemblies(IPsiModules psiModules);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IPsiAssembly GetPsiAssembly(IPsiModules psiModules, IAssemblyFile assemblyFile);
}
public interface JetBrains.ReSharper.Feature.Services.ExternalSources.Utils.IKeyValueStorage`2 {
    [CanBeNullAttribute]
public abstract virtual TValue Get(TKey key);
    public abstract virtual void Set(TKey key, TValue value);
    public abstract virtual void Remove(TKey key);
}
public interface JetBrains.ReSharper.Feature.Services.ExternalSources.Utils.IReorderMembers {
    public abstract virtual void ReorderMembers(IFile file);
}
public interface JetBrains.ReSharper.Feature.Services.ExternalSources.Utils.ITranslatorLanguageWithPriority {
    public PsiLanguageType Language { get; }
    public int Priority { get; }
    public abstract virtual PsiLanguageType get_Language();
    public abstract virtual int get_Priority();
}
public static class JetBrains.ReSharper.Feature.Services.ExternalSources.Utils.LanguagesUtils : object {
    public static List`1<PsiLanguageType> GetLanguagesWithTranslator();
    public static bool IsTranslatorAvailable(PsiLanguageType language);
    public static PsiLanguageType GetPrimeLanguage();
    [CanBeNullAttribute]
public static string GetLanguageExtensionNoDot(PsiLanguageType psiLanguageType);
    [CanBeNullAttribute]
public static string GetLanguageExtensionWithDot(PsiLanguageType psiLanguageType);
    public static Tuple`2<PsiLanguageType, string> GetLanguageAndExtension(PsiLanguageType language);
    public static Tuple`2<PsiLanguageType, string> GetPrimeLanguageAndExtension();
}
public abstract class JetBrains.ReSharper.Feature.Services.ExternalSources.Utils.MemoryKeyValueStorage`2 : object {
    private IDictionary`2<string, TValue> myData;
    public sealed virtual TValue Get(TKey key);
    public sealed virtual void Set(TKey key, TValue value);
    public sealed virtual void Remove(TKey key);
    protected abstract virtual string GetKeyStrongHash(TKey key);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Utils.MetadataAccessDebugInfo : object {
    public sealed virtual void Dump(TextWriter sw);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.ExternalSources.Utils.MetadataTranslatorOptionsExtensions : object {
    [ExtensionAttribute]
public static IDictionary`2<string, string> ToPropertiesDictionary(MetadataTranslatorOptions translatorOptions, ITypeElement typeElement, PsiLanguageType languageType);
    public static MetadataTranslatorOptions ToTranslatorOptions(IDictionary`2<string, string> properties);
    [ExtensionAttribute]
private static void AddIfNotDefault(Dictionary`2<string, string> d, string key, bool value, bool defaultValue);
    [ExtensionAttribute]
private static void AddIfNotDefault(Dictionary`2<string, string> d, string key, int value, int defaultValue);
    [ExtensionAttribute]
private static bool GetProperty(IDictionary`2<string, string> properties, string key, bool defaultValue);
    [ExtensionAttribute]
private static int GetProperty(IDictionary`2<string, string> properties, string key, int defaultValue);
    [ExtensionAttribute]
public static IDictionary`2<string, string> ToAssemblyInfoPropertiesDictionary(MetadataTranslatorOptions translatorOptions);
    public static bool PropertiesAreEqual(IDictionary`2<string, string> p1, IDictionary`2<string, string> p2);
}
public static class JetBrains.ReSharper.Feature.Services.ExternalSources.Utils.MonikerUtil : object {
    public static string TypeCacheMonikerPrefix;
    public static string GetTypeCacheMoniker(ITypeElement typeElement);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.ExternalSources.Utils.NamespaceFolderExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetFolderName(string namespaceQualifiedName);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetFolderName(INamespace ns);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetRelativeName(string name, string defaultNamespaceFolderName);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetRelativeFolderName(INamespace ns, string defaultNamespaceFolderName);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.ExternalSources.Utils.PropertiesFile : object {
    private static int SIGNATURE;
    [ExtensionAttribute]
public static void WriteAllProperties(FileSystemPath file, IDictionary`2<string, string> dict);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IDictionary`2<string, string> ReadAllProperties(FileSystemPath file);
}
public static class JetBrains.ReSharper.Feature.Services.ExternalSources.Utils.ResxUtil : object {
    [CanBeNullAttribute]
public static string PresentResxFromBinaryResources(Stream resourcesStream);
    private static void AddSerializedObjectResource(ResXResourceWriter writer, string key, Byte[] serializedObject);
    public static void ConvertResourcesToResx(Stream resourcesStream, string resxFilePath);
}
internal static class JetBrains.ReSharper.Feature.Services.ExternalSources.Utils.SimplifiedIdUtil : object {
    public static string GetTypeMemberSimplifiedId(ITypeMember element);
    private static void BuildTypeElementName(StringBuilder builder, ITypeElement element);
    private static void BuildTypeString(StringBuilder builder, IType type);
    private static string GetTypeName(IDeclaredType declaredType);
    private static void BuildQualifyingInterfaceString(StringBuilder builder, IType type);
    private static void BuildQualifyingInterfaceTypeParametersString(StringBuilder builder, IType[] typeArguments, ISubstitution substitution);
    public static string GetSimplifiedId(ITypeMemberDeclaration element);
    private static string GetIndexerName(IIndexerDeclaration indexerDeclaration);
    private static void BuildTypeElementName(StringBuilder builder, ITypeDeclaration element);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.ExternalSources.Utils.TypeElementFileNameExtensions : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static string TryGetFileName(ITypeElement typeElement, Tuple`2<PsiLanguageType, string> languageAndExtensionPair);
    [NotNullAttribute]
private static string ConvertToFilePath(string fileName);
    [ExtensionAttribute]
[NotNullAttribute]
public static string NormalizeFileName(string fileName);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Utils.Xaml.XamlDeclaredElementsBinder : DeclaredElementBinder {
    public virtual void BindDeclarations(IFile file, IPsiModule psiModule, bool failOnUnresolvedSymbols);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.Utils.Xaml.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.ExternalSources.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
