[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.AI.Context.XamlChatContextPartProvider : object {
    public int Priority { get; }
    public sealed virtual int get_Priority();
    public sealed virtual bool IsApplicable(IDataContext dataContext);
    public sealed virtual void ContributeTo(IDataContext dataContext, ChatContextPartSet parts);
    public static string GetMobileProjectType(IProject project);
    public static string GetMobilePlatformType(TargetFrameworkId framework);
}
public class JetBrains.ReSharper.Feature.Services.Xaml.Bulbs.XamlContextActionDataProvider : CachedContextActionDataProviderBase`1<IXamlFile> {
    public XamlContextActionDataProvider(ISolution solution, ITextControl textControl, IXamlFile xmlFile);
    [CanBeNullAttribute]
public sealed virtual XamlContextActionDataProvider TryTranslateToCurrentFork(IContentModelForkTranslator translator);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.Bulbs.XamlContextActionProvider : XmlContextActionProvider {
    public virtual TreeTextRange[] GetTagNameRanges(IXmlTag tagToReplace);
    public virtual ICollection`1<string> GetSuggestedNames(IXmlTag tagToReplace);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.Xaml.Clipboard.XamlCopyPasteAssist : XmlCopyPasteAssist {
    public XamlCopyPasteAssist(XamlLanguage language);
    protected virtual bool IsAssistAvailableForAttributeValue(IXmlAttribute attributeNode, ITreeNode treeNode, DocumentRange documentRange, Nullable`1& quotes);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.Code.XamlReferenceSorterLanguageService : ReferenceSorterLanguageService {
    public virtual ReferenceComparatorDelegate GetReferenceComparator();
    private static bool ShouldProcessBefore(IReference ref1, IReference ref2, OneToListMap`2<ITreeNode, IReference> references);
}
[CodeCleanupModuleAttribute]
public class JetBrains.ReSharper.Feature.Services.Xaml.CodeCleanup.CollapseEmptyTags : object {
    public static CodeCleanupOptionDescriptor`1<bool> Descriptor;
    public string Name { get; }
    public PsiLanguageType LanguageType { get; }
    public ICollection`1<CodeCleanupOptionDescriptor> Descriptors { get; }
    public bool IsAvailableOnSelection { get; }
    private static CollapseEmptyTags();
    public sealed virtual string get_Name();
    public sealed virtual PsiLanguageType get_LanguageType();
    public sealed virtual ICollection`1<CodeCleanupOptionDescriptor> get_Descriptors();
    public sealed virtual bool get_IsAvailableOnSelection();
    public sealed virtual void SetDefaultSetting(CodeCleanupProfile profile, DefaultProfileType profileType);
    [CanBeNullAttribute]
private static IXamlFile GetXamlFile(IPsiSourceFile sourceFile);
    public sealed virtual bool IsAvailable(IPsiSourceFile sourceFile);
    public sealed virtual bool IsAvailable(CodeCleanupProfile profile);
    public sealed virtual void Process(IPsiSourceFile sourceFile, IRangeMarker rangeMarker, CodeCleanupProfile profile, IProgressIndicator progressIndicator, IUserDataHolder cache);
}
public static class JetBrains.ReSharper.Feature.Services.Xaml.CodeCompletion.ValueReferenceUtil : object {
    [CanBeNullAttribute]
public static ITypeDeclaration GetTargetTypeDeclaration(IValueReference valueReference, IDeclaredType& eventType, IDelegate& delegate);
    public static string SuggestName(IValueReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.CodeInsight.XamlLocalSymbolsServiceProvider : object {
    public sealed virtual VariablesList GetVisibleVariables(IFile file, TreeOffset offset);
    private IAccessContext GetAccessContext(ITreeNode startElement);
    [ContractAnnotationAttribute("null <= null")]
public sealed virtual IType GetThisType(ITreeNode element);
}
internal class JetBrains.ReSharper.Feature.Services.Xaml.CodeStructure.XamlCodeStructureDeclarationAspect : object {
    [NotNullAttribute]
private IList`1<string> myFileMemberTexts;
    [NotNullAttribute]
private IList`1<string> myFileStructureTexts;
    [NotNullAttribute]
private XamlCodeStructureDeclarationElement myElement;
    private DocumentRange myNavigationRange;
    public bool InitiallyExpanded { get; }
    public DocumentRange NavigationRange { get; }
    public XamlCodeStructureDeclarationAspect(DocumentRange navigationRange, IList`1<string> fileMemberTexts, IList`1<string> fileStructureTexts, XamlCodeStructureDeclarationElement element);
    public sealed virtual bool get_InitiallyExpanded();
    public sealed virtual DocumentRange get_NavigationRange();
    public sealed virtual DocumentRange[] GetNavigationRanges();
    private sealed virtual override IList`1<string> JetBrains.ReSharper.Feature.Services.CodeStructure.IGotoFileMemberAspect.GetQuickSearchTexts();
    private sealed virtual override IList`1<string> JetBrains.ReSharper.Feature.Services.CodeStructure.IFileStructureAspect.GetQuickSearchTexts();
    public sealed virtual IPsiSourceFile GetSourceFile();
    public sealed virtual string InitialName();
    public sealed virtual bool CanRename();
    public sealed virtual void Rename(string newName);
    public sealed virtual bool CanRemove();
    public sealed virtual void Remove();
    public sealed virtual bool CanMoveElements(RelativeLocation location, IList`1<CodeStructureElement> dropElements);
    public sealed virtual void MoveElements(RelativeLocation location, IList`1<CodeStructureElement> dropElements);
    public sealed virtual void Present(IMenuItemDescriptor descriptor, PresentationState state);
    public sealed virtual void Present(StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
}
internal abstract class JetBrains.ReSharper.Feature.Services.Xaml.CodeStructure.XamlCodeStructureDeclarationElement : CodeStructureElement {
    [NotNullAttribute]
private ITreeNodePointer`1<IXamlTag> myElement;
    [NotNullAttribute]
private XamlCodeStructureDeclarationAspect myAspect;
    [NotNullAttribute]
private IList`1<string> myMemberNames;
    private DocumentRange myDocumentRange;
    public ITreeNode TreeNode { get; }
    public PsiLanguageType Language { get; }
    [NotNullAttribute]
public IList`1<string> MemberNames { get; }
    protected XamlCodeStructureDeclarationElement(CodeStructureElement parent, IXamlTag element);
    [NotNullAttribute]
protected virtual IList`1<string> GetMemberNames(ITreeNode element);
    [NotNullAttribute]
private IList`1<string> GetAllPossibleNames(ITreeNode element);
    [NotNullAttribute]
protected virtual string GetTagName(ITreeNode element, String& alias);
    public virtual ITreeNode get_TreeNode();
    public virtual PsiLanguageType get_Language();
    public IList`1<string> get_MemberNames();
    public virtual IFileStructureAspect GetFileStructureAspect();
    public virtual IMemberNavigationAspect GetMemberNavigationAspect();
    public virtual IGotoFileMemberAspect GetGotoMemberAspect();
    public virtual DocumentRange GetTextRange();
    [NotNullAttribute]
protected virtual RichText GetRichName(ITreeNode treeNode);
    public virtual void Present(IMenuItemDescriptor descriptor, PresentationState state);
    public virtual void Present(StructuredPresenter`2<TreeModelNode, IPresentableItem> descriptor, IPresentableItem item, TreeModelNode modelNode, PresentationState presentationState);
}
internal class JetBrains.ReSharper.Feature.Services.Xaml.CodeStructure.XamlCodeStructureObjectElement : XamlCodeStructureDeclarationElement {
    [NotNullAttribute]
private static DeclaredElementPresenterStyle myResourceStyle;
    private static TextStyle TypeTextStyle;
    private static string Ellipsis;
    private static int LineLength;
    public XamlCodeStructureObjectElement(CodeStructureElement parent, IXamlObjectElement objectElement);
    private static XamlCodeStructureObjectElement();
    [NotNullAttribute]
private static IconId GetIcon(ITreeNode treeNode);
    protected virtual IList`1<string> GetMemberNames(ITreeNode element);
    protected virtual RichText GetRichName(ITreeNode treeNode);
    [CanBeNullAttribute]
private static string GetContentPreview(IXamlObjectElement objectElement);
    private static string StyleSetterPreview(IXamlAttribute attribute, TreeNodeCollection`1<IXmlAttribute> attributes);
    private bool DeclaresMembers();
    public virtual IGotoFileMemberAspect GetGotoMemberAspect();
    protected virtual void DumpSelf(TextWriter builder);
    public virtual void Present(IMenuItemDescriptor descriptor, PresentationState state);
    public virtual void Present(StructuredPresenter`2<TreeModelNode, IPresentableItem> descriptor, IPresentableItem item, TreeModelNode modelNode, PresentationState presentationState);
}
internal class JetBrains.ReSharper.Feature.Services.Xaml.CodeStructure.XamlCodeStructurePropertyElement : XamlCodeStructureDeclarationElement {
    public XamlCodeStructurePropertyElement(CodeStructureElement parent, IXamlPropertyElement propertyElement);
    protected virtual string GetTagName(ITreeNode element, String& alias);
    public virtual IMemberNavigationAspect GetMemberNavigationAspect();
    public virtual IGotoFileMemberAspect GetGotoMemberAspect();
    protected virtual void DumpSelf(TextWriter builder);
    public virtual void Present(IMenuItemDescriptor descriptor, PresentationState state);
    public virtual void Present(StructuredPresenter`2<TreeModelNode, IPresentableItem> descriptor, IPresentableItem item, TreeModelNode modelNode, PresentationState presentationState);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.Xaml.CodeStructure.XamlCodeStructureProvider : XmlCodeStructureProvider {
    protected virtual void CreateElement(CodeStructureElement parent, IXmlTag xmlTag);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.ConstantValues.XamlConstantValuePresenter : ClrConstantValuePresenter {
    public virtual RichText Present(PsiLanguageType language, ConstantValue constantValue, TypePresentationStyle typePresentationStyle);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.ConstantValues.XamlConstantValueService : ClrConstantValueService {
    public XamlConstantValueService(IConstantValuePresenter constantValuePresenter);
    public virtual ConstantValue GetDefaultValue(IType type);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.CSharp.Daemon.CSharpXamlXBindExplicitConversionChecker : object {
    public sealed virtual bool IsAvailable(ITreeNode xamlNode, IExpressionType from, IExpressionType to);
}
[GeneratorBuilderAttribute("EventSubscriptions", "JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.Xaml.CSharp.Generate.XamlCSharpEventSubscriptionsBuilder : CodeBehindGeneratorBuilderBase`2<XamlGeneratorContext, CSharpGeneratorContext> {
    public double Priority { get; }
    public virtual double get_Priority();
    protected virtual IGeneratorBuilder CreateCodeBehindBuilder();
    protected virtual CSharpGeneratorContext CreateCodeBehindContext(XamlGeneratorContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.CSharp.Intentions.CSharpAvaloniaInitializeMethodCreator : object {
    public sealed virtual IDeclaration Create(ITreeNode xamlTreeNode, ITypeDeclaration typeDeclaration);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.CSharp.Intentions.CSharpCreateAttachedPropertyIntention : CSharpCreateDependencyPropertyIntentionBase {
    public sealed virtual string GetIntentionText(string propertyName);
    public sealed virtual IntentionResult ExecuteEx(CreateDependencyPropertyDeclarationContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.CSharp.Intentions.CSharpCreateAvaloniaAttachedPropertyIntention : object {
    public sealed virtual string GetIntentionText(string propertyName);
    public sealed virtual IntentionResult ExecuteEx(CreateDependencyPropertyDeclarationContext context);
    private IMethodDeclaration CreateGetMethod(CreateDependencyPropertyDeclarationContext context, List`1<ITemplateFieldHolder> holders, List`1<ITemplateFieldHolder> holdersToIgnore);
    private IMethodDeclaration CreateSetMethod(CreateDependencyPropertyDeclarationContext context, FindersTemplateFieldHolder typeHolder, List`1<ITemplateFieldHolder> holdersToIgnore, IMethodDeclaration getMethodDeclaration);
    [NotNullAttribute]
private IFieldDeclaration CreateDescriptorField(CreateDependencyPropertyDeclarationContext context, string methodName, IType propertyType, FindersTemplateFieldHolder typeHolder);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.CSharp.Intentions.CSharpCreateDependencyPropertyIntention : CSharpCreateDependencyPropertyIntentionBase {
    public sealed virtual string GetIntentionText(string propertyName);
    public sealed virtual IntentionResult ExecuteEx(CreateDependencyPropertyDeclarationContext context);
}
public class JetBrains.ReSharper.Feature.Services.Xaml.CSharp.Intentions.CSharpCreateDependencyPropertyIntentionBase : object {
    [NotNullAttribute]
protected IFieldDeclaration CreateDependencyPropertyField(CreateDependencyPropertyDeclarationContext context, string methodName, IType propertyType, FindersTemplateFieldHolder typeHolder, bool mayUseNameof);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.CSharp.Intentions.CSharpCreateDirectPropertyIntention : object {
    public sealed virtual string GetIntentionText(string propertyName);
    public sealed virtual IntentionResult ExecuteEx(CreateDependencyPropertyDeclarationContext context);
    private IFieldDeclaration CreateBackingField(CreateDependencyPropertyDeclarationContext context, List`1<ITemplateFieldHolder> holders);
    [NotNullAttribute]
private IPropertyDeclaration CreateProperty(CreateDependencyPropertyDeclarationContext context, IType propertyType, FindersTemplateFieldHolder typeHolder);
    [NotNullAttribute]
private IFieldDeclaration CreateDescriptorField(CreateDependencyPropertyDeclarationContext context, string methodName, IType propertyType, FindersTemplateFieldHolder typeHolder);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.CSharp.Intentions.CSharpCreateMauiAttachedPropertyIntention : CSharpCreateMauiDependencyPropertyIntentionBase {
    public sealed virtual string GetIntentionText(string propertyName);
    public sealed virtual IntentionResult ExecuteEx(CreateDependencyPropertyDeclarationContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.CSharp.Intentions.CSharpCreateMauiDependencyPropertyIntention : CSharpCreateMauiDependencyPropertyIntentionBase {
    public sealed virtual string GetIntentionText(string propertyName);
    public sealed virtual IntentionResult ExecuteEx(CreateDependencyPropertyDeclarationContext context);
}
public class JetBrains.ReSharper.Feature.Services.Xaml.CSharp.Intentions.CSharpCreateMauiDependencyPropertyIntentionBase : object {
    protected IFieldDeclaration CreateDependencyPropertyField(CreateDependencyPropertyDeclarationContext context, string methodName, IType propertyType, FindersTemplateFieldHolder typeHolder, bool mayUseNameof);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.CSharp.Intentions.CSharpCreateStyledPropertyIntention : object {
    public sealed virtual string GetIntentionText(string propertyName);
    public sealed virtual IntentionResult ExecuteEx(CreateDependencyPropertyDeclarationContext context);
    [NotNullAttribute]
private IPropertyDeclaration CreateProperty(CreateDependencyPropertyDeclarationContext context, List`1<ITemplateFieldHolder> holders);
    [NotNullAttribute]
private IFieldDeclaration CreateDescriptorField(CreateDependencyPropertyDeclarationContext context, string methodName, IType propertyType, FindersTemplateFieldHolder typeHolder);
}
public class JetBrains.ReSharper.Feature.Services.Xaml.CSharp.LiveTemplates.InMauiCSharpProject : InXamlCSharpProject {
    private static Guid DefaultUID;
    public PsiLanguageType RelatedLanguage { get; }
    public string PresentableShortName { get; }
    private static InMauiCSharpProject();
    public virtual Guid GetDefaultUID();
    public virtual PsiLanguageType get_RelatedLanguage();
    public virtual string get_PresentableShortName();
}
public class JetBrains.ReSharper.Feature.Services.Xaml.CSharp.LiveTemplates.InWpfCSharpProject : InXamlCSharpProject {
    private static Guid ourDefaultUid;
    public PsiLanguageType RelatedLanguage { get; }
    public string PresentableShortName { get; }
    private static InWpfCSharpProject();
    public virtual Guid GetDefaultUID();
    public virtual PsiLanguageType get_RelatedLanguage();
    public virtual string get_PresentableShortName();
}
public class JetBrains.ReSharper.Feature.Services.Xaml.CSharp.LiveTemplates.InXamarinCSharpProject : InXamlCSharpProject {
    private static Guid DefaultUID;
    public PsiLanguageType RelatedLanguage { get; }
    public string PresentableShortName { get; }
    private static InXamarinCSharpProject();
    public virtual Guid GetDefaultUID();
    public virtual PsiLanguageType get_RelatedLanguage();
    public virtual string get_PresentableShortName();
}
public class JetBrains.ReSharper.Feature.Services.Xaml.CSharp.LiveTemplates.InXamlCSharpProject : InXamlSpecificProject {
    private static Guid DefaultUID;
    private static Guid QuickUID;
    public PsiLanguageType RelatedLanguage { get; }
    public string PresentableShortName { get; }
    public Guid QuickListUID { get; }
    public string QuickListTitle { get; }
    private static InXamlCSharpProject();
    public virtual Guid GetDefaultUID();
    public virtual PsiLanguageType get_RelatedLanguage();
    public virtual string get_PresentableShortName();
    public sealed virtual Guid get_QuickListUID();
    public sealed virtual string get_QuickListTitle();
}
[ScopeCategoryUIProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.CSharp.LiveTemplates.XamlCSharpProjectScopeCategoryUIProvider : ScopeCategoryUIProvider {
    public string CategoryCaption { get; }
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Xaml.CSharp.LiveTemplates.XamlCSharpProjectScopeCategoryUIProvider/<BuildAllPoints>d__1")]
public virtual IEnumerable`1<ITemplateScopePoint> BuildAllPoints();
    public virtual string get_CategoryCaption();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.CSharp.LiveTemplates.XamlCSharpProjectScopeProvider : ScopeProvider {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Xaml.CSharp.LiveTemplates.XamlCSharpProjectScopeProvider/<ProvideScopePoints>d__1")]
public virtual IEnumerable`1<ITemplateScopePoint> ProvideScopePoints(TemplateAcceptanceContext context);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Xaml.CSharp.LiveTemplates.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Xaml.CSharp.ZoneMarker : object {
}
public interface JetBrains.ReSharper.Feature.Services.Xaml.Daemon.ExplicitConversionChecker.IXamlXBindExplicitConversionChecker {
    public abstract virtual bool IsAvailable(ITreeNode xamlNode, IExpressionType from, IExpressionType to);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Xaml.DataConstants.XamlDataRules : object {
    public XamlDataRules(Lifetime lifetime, IActionManager actionman);
    private static IList`1<IDeclaredElement> GetDeclaredElement(IDataContext context);
}
public class JetBrains.ReSharper.Feature.Services.Xaml.Generate.XamlAttachedEventGeneratorElement : GeneratorEventElement {
    [NotNullAttribute]
private AttachedEventsGroup myGroup;
    [CanBeNullAttribute]
public string NamespaceAlias { get; }
    public string TestDescriptor { get; }
    public XamlAttachedEventGeneratorElement(string namespaceAlias, IEvent declaredElement);
    public string get_NamespaceAlias();
    [NotNullAttribute]
public virtual object GetGroupingObject();
    public virtual string get_TestDescriptor();
    public sealed virtual void InitGeneratorPresenter(StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter);
    private static void PresentAttachedEventsGroup(AttachedEventsGroup value, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
}
[GeneratorElementProviderAttribute("EventSubscriptions", "JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.Generate.XamlEventsProvider : GeneratorEventsProviderBase`1<XamlGeneratorContext> {
    public virtual void Populate(XamlGeneratorContext context);
    private static List`1<AttachedEventsOwner> CollectAttachedEvents(IXamlObjectElement element);
    private static IDeclaredElement FindEventSubscription(IPropertySetter propertySetter);
}
[GeneratorBuilderAttribute("EventSubscriptions", "JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.Generate.XamlEventSubscriptionsBuilder : GeneratorBuilderBase`1<XamlGeneratorContext> {
    public double Priority { get; }
    public virtual double get_Priority();
    [ObsoleteAttribute("Please, override overload with progress indicator")]
protected virtual void Process(XamlGeneratorContext context);
    private static bool IsEmptySubscriptionAttribute(IPropertySetter property, IDeclaredElement event);
}
[GeneratorBuilderAttribute("EventSubscriptions", "JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.Generate.XamlEventSubscriptionsNamesBuilder : GenerateEventSubscriptionsBuilderBase`1<XamlGeneratorContext> {
    protected virtual string GetEventName(IGeneratorElement element);
    protected virtual string SuggestEventHandlerPrefix(XamlGeneratorContext context);
    protected virtual void Process(XamlGeneratorContext context, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Feature.Services.Xaml.Generate.XamlGeneratorContext : GeneratorContextBase {
    [CompilerGeneratedAttribute]
private IXamlFile <XamlFile>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlTypeDeclaration <XamlTypeDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IDeclaration> <CodebehindDeclarations>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeNode <Anchor>k__BackingField;
    public IXamlFile XamlFile { get; public set; }
    public IXamlTypeDeclaration XamlTypeDeclaration { get; }
    public IList`1<IDeclaration> CodebehindDeclarations { get; }
    public ITreeNode Anchor { get; public set; }
    public ITreeNode Root { get; }
    public ISolution Solution { get; }
    public IPsiModule PsiModule { get; }
    public PsiLanguageType Language { get; }
    public PsiLanguageType PresentationLanguage { get; }
    private XamlGeneratorContext(string kind, IXamlFile file, ITreeNode anchor);
    [CanBeNullAttribute]
public static XamlGeneratorContext CreateContext(string kind, IPsiDocumentRangeView psiDocumentRangeView);
    [CanBeNullAttribute]
public IXamlObjectElement FindXamlObjectElement(ITypeElement& typeElement);
    [CompilerGeneratedAttribute]
public IXamlFile get_XamlFile();
    [CompilerGeneratedAttribute]
public void set_XamlFile(IXamlFile value);
    [CompilerGeneratedAttribute]
public IXamlTypeDeclaration get_XamlTypeDeclaration();
    [CompilerGeneratedAttribute]
public IList`1<IDeclaration> get_CodebehindDeclarations();
    [CompilerGeneratedAttribute]
public sealed virtual ITreeNode get_Anchor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Anchor(ITreeNode value);
    public virtual ITreeNode get_Root();
    public virtual ISolution get_Solution();
    public virtual IPsiModule get_PsiModule();
    public virtual PsiLanguageType get_Language();
    public virtual PsiLanguageType get_PresentationLanguage();
    public virtual TreeTextRange GetSelectionTreeRange();
    public virtual IGeneratorContextPointer CreatePointer();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.Generate.XamlGeneratorContextFactory : object {
    public sealed virtual IGeneratorContext TryCreate(string kind, IPsiDocumentRangeView psiDocumentRangeView);
    public sealed virtual IGeneratorContext TryCreate(string kind, IDeclaredElement contextElement);
    public sealed virtual IGeneratorContext TryCreate(string kind, ITreeNode targetContext, ITreeNode anchor);
}
[ObsoleteAttribute]
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.ReSharper.Feature.Services.Xaml.Resources.Strings", "XamlInlayHintsSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.Xaml.InlayHints.XamlInlayHintsOptions : object {
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Xaml.Resources.Strings", "WhetherToShowImplicitMarkAttributeNameHintsSettingDescription")]
public bool ShowMarkupAttributeNames;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Xaml.Resources.Strings", "WhetherToShowHintsInsideThicknessValueMarginPaddingEtcSettingDescription")]
public bool ShowThicknessHints;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Xaml.Resources.Strings", "WhetherToShowHintsInsideCornerRadiusValueSettingDescription")]
public bool ShowCornerRadiusHints;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Xaml.Resources.Strings", "WhetherToShowHintsForMissingGridRowColumnEtcSettingDescription")]
public bool ShowGridIndexHints;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Xaml.Resources.Strings", "WhetherToShowHintsForTheDataContextOfTheBindingSettingDescription")]
public bool ShowDataContextHints;
}
[SettingsKeyAttribute("JetBrains.TextControl.DocumentMarkup.IntraTextAdornments.InlayHintsSettings", "JetBrains.ReSharper.Feature.Services.Xaml.Resources.Strings", "XamlInlayHintsSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.Xaml.InlayHints.XamlInlayHintsOptions2 : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Xaml.Resources.Strings", "VisibilityModeOfHintsForImplicitAttributeNamesSettingDescription")]
public PushToHintMode ShowMarkupAttributeNames;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Xaml.Resources.Strings", "VisibilityModeOfHintsInsideThicknessValueMarginPaddingEtcSettingDescription")]
public PushToHintMode ShowThicknessHints;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Xaml.Resources.Strings", "VisibilityModeOfHintsInsideCornerRadiusValueSettingDescription")]
public PushToHintMode ShowCornerRadiusHints;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Xaml.Resources.Strings", "VisibilityModeOfHintsForMissingGridRowColumnEtcSettingDescription")]
public PushToHintMode ShowGridIndexHints;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Xaml.Resources.Strings", "VisibilityModeOfHintsForTheDataContextOfTheBindingSettingDescription")]
public PushToHintMode ShowDataContextHints;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Xaml.Resources.Strings", "WhetherToShowFullyQualifiedNamesOfTypesSettingDescription")]
public bool ShowFullQualifiedNamesForDataContextAttribute;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Xaml.Resources.Strings", "WhetherToHideHintInTemplateBindingsIfDataContextHintAlreadyPresentedInParentElementSettingDescription")]
public bool HideHintForTemplateBindingIfDataContextHasBeenPresented;
}
[MigrateSettingsAttribute]
public class JetBrains.ReSharper.Feature.Services.Xaml.InlayHints.XamlInlayHintsOptionsMigration : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Xaml.InlayHints.XamlInlayHintsOptionsMigration/<GetEntriesToMigrate>d__0")]
public sealed virtual IEnumerable`1<SettingsEntry> GetEntriesToMigrate(ISettingsSchema schema);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Xaml.InlayHints.XamlInlayHintsOptionsMigration/<GetKeysToMigrate>d__1")]
public sealed virtual IEnumerable`1<SettingsKey> GetKeysToMigrate(ISettingsSchema schema);
    public sealed virtual void Migrate(IContextBoundSettingsStoreImplementation store);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[OptionsPageAttribute("XamlInlayHintsOptions", "XAML", "JetBrains.ReSharper.Psi.Xaml.Resources.PsiXamlThemedIcons/XamlFile")]
public class JetBrains.ReSharper.Feature.Services.Xaml.InlayHints.XamlInlayHintsOptionsPage : InlayHintsOptionPageBase {
    public static string PID;
    public XamlInlayHintsOptionsPage(Lifetime lifetime, OptionsPageContext optionsPageContext, OptionsSettingsSmartContext optionsSettingsSmartContext);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Xaml.InlayHints.ZoneMarker : object {
}
public class JetBrains.ReSharper.Feature.Services.Xaml.Intentions.CreateDependencyPropertyDeclarationContext : CreateContextBase {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeImage <PropertyType>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeNode <XamlContext>k__BackingField;
    [NotNullAttribute]
public string PropertyName { get; }
    [NotNullAttribute]
public ITypeImage PropertyType { get; }
    [NotNullAttribute]
public ITreeNode XamlContext { get; }
    public CreateDependencyPropertyDeclarationContext(ICreationTarget target, string propertyName, ITypeImage propertyType, ITreeNode xamlContext);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public ITypeImage get_PropertyType();
    [CompilerGeneratedAttribute]
public ITreeNode get_XamlContext();
}
public interface JetBrains.ReSharper.Feature.Services.Xaml.Intentions.IAvaloniaInitializeMethodCreator {
    public abstract virtual IDeclaration Create(ITreeNode xamlTreeNode, ITypeDeclaration typeDeclaration);
}
public interface JetBrains.ReSharper.Feature.Services.Xaml.Intentions.ICreateAttachedPropertyIntention {
}
public interface JetBrains.ReSharper.Feature.Services.Xaml.Intentions.ICreateAvaloniaAttachedPropertyIntention {
}
public interface JetBrains.ReSharper.Feature.Services.Xaml.Intentions.ICreateDependencyPropertyIntention {
}
public interface JetBrains.ReSharper.Feature.Services.Xaml.Intentions.ICreateDependencyPropertyIntentionBase {
    public abstract virtual string GetIntentionText(string propertyName);
    [NotNullAttribute]
public abstract virtual IntentionResult ExecuteEx(CreateDependencyPropertyDeclarationContext context);
}
public interface JetBrains.ReSharper.Feature.Services.Xaml.Intentions.ICreateDirectPropertyIntention {
}
public interface JetBrains.ReSharper.Feature.Services.Xaml.Intentions.ICreateMauiAttachedPropertyIntention {
}
public interface JetBrains.ReSharper.Feature.Services.Xaml.Intentions.ICreateMauiDependencyPropertyIntention {
}
public interface JetBrains.ReSharper.Feature.Services.Xaml.Intentions.ICreateStyledPropertyIntention {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.Intentions.XamlSetAccessRightsIntention : object {
    public sealed virtual void SetAccessRights(IAccessRightsOwnerDeclaration declaration, AccessRights accessRights);
}
[DefaultSettingsAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.LiveTemplatesSettings", "16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.LiveTemplates.Defaults.DefaultFileTemplates : object {
    public string Name { get; }
    public sealed virtual Stream GetDefaultSettingsStream(Lifetime lifetime);
    public sealed virtual string get_Name();
}
[MacroDefinitionAttribute("dependencyPropertyType")]
public class JetBrains.ReSharper.Feature.Services.Xaml.LiveTemplates.DependencyPropertyTypeMacroDef : SimpleMacroDefinition {
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.Xaml.LiveTemplates.DependencyPropertyTypeMacroImpl : SimpleMacroImplementation {
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
}
public class JetBrains.ReSharper.Feature.Services.Xaml.LiveTemplates.InXamlImpl : MacroImplementationScopeProviderBase {
}
public class JetBrains.ReSharper.Feature.Services.Xaml.LiveTemplates.Scope.InAnyXamlProject : InAnyProject {
    private static string Name;
    private static Guid DefaultUID;
    private static Guid QuickUID;
    public string DefaultFileName { get; }
    public PsiLanguageType RelatedLanguage { get; }
    public string PresentableShortName { get; }
    public Guid QuickListUID { get; }
    public string QuickListTitle { get; }
    private static InAnyXamlProject();
    public virtual Guid GetDefaultUID();
    public virtual string get_DefaultFileName();
    public virtual PsiLanguageType get_RelatedLanguage();
    public virtual string get_PresentableShortName();
    public sealed virtual Guid get_QuickListUID();
    public sealed virtual string get_QuickListTitle();
}
public class JetBrains.ReSharper.Feature.Services.Xaml.LiveTemplates.Scope.InSilverlightXamlProject : InAnyXamlProject {
    private static string Name;
    private static Guid DefaultUID;
    private static Guid QuickUID;
    public string PresentableShortName { get; }
    public Guid QuickListUID { get; }
    public string QuickListTitle { get; }
    private static InSilverlightXamlProject();
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
    public sealed virtual Guid get_QuickListUID();
    public sealed virtual string get_QuickListTitle();
}
public class JetBrains.ReSharper.Feature.Services.Xaml.LiveTemplates.Scope.InWinRTXamlProject : InAnyXamlProject {
    private static string Name;
    private static Guid DefaultUID;
    private static Guid QuickUID;
    public string PresentableShortName { get; }
    public Guid QuickListUID { get; }
    public string QuickListTitle { get; }
    private static InWinRTXamlProject();
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
    public sealed virtual Guid get_QuickListUID();
    public sealed virtual string get_QuickListTitle();
}
public class JetBrains.ReSharper.Feature.Services.Xaml.LiveTemplates.Scope.InWPFXamlProject : InAnyXamlProject {
    private static string Name;
    private static Guid DefaultUID;
    private static Guid QuickUID;
    public string PresentableShortName { get; }
    public Guid QuickListUID { get; }
    public string QuickListTitle { get; }
    private static InWPFXamlProject();
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
    public sealed virtual Guid get_QuickListUID();
    public sealed virtual string get_QuickListTitle();
}
public class JetBrains.ReSharper.Feature.Services.Xaml.LiveTemplates.Scope.InXamlSpecificProject : InAnyXamlProject {
    private static Guid DefaultUID;
    [CompilerGeneratedAttribute]
private ProjectLanguage <ProjectLanguage>k__BackingField;
    [NotNullAttribute]
private ProjectLanguage ProjectLanguage { get; }
    public InXamlSpecificProject(ProjectLanguage projectLanguage);
    private static InXamlSpecificProject();
    public virtual Guid GetDefaultUID();
    [CompilerGeneratedAttribute]
private ProjectLanguage get_ProjectLanguage();
    public virtual bool IsSubsetOf(ITemplateScopePoint other);
}
[FileTemplatesAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.LiveTemplates.XamlFileTemplatesSupport : XamlFileTemplatesSupportBase {
    public string Name { get; }
    protected ProjectLanguage Language { get; }
    public virtual string get_Name();
    protected virtual ProjectLanguage get_Language();
}
public abstract class JetBrains.ReSharper.Feature.Services.Xaml.LiveTemplates.XamlFileTemplatesSupportBase : object {
    public string Name { get; }
    public IEnumerable`1<ITemplateScopePoint> ScopePoints { get; }
    protected ProjectLanguage Language { get; }
    public abstract virtual string get_Name();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Xaml.LiveTemplates.XamlFileTemplatesSupportBase/<get_ScopePoints>d__3")]
public virtual IEnumerable`1<ITemplateScopePoint> get_ScopePoints();
    protected abstract virtual ProjectLanguage get_Language();
}
[ScopeCategoryUIProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.LiveTemplates.XamlProjectScopeCategoryUIProvider : ScopeCategoryUIProvider {
    public string CategoryCaption { get; }
    private static XamlProjectScopeCategoryUIProvider();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Xaml.LiveTemplates.XamlProjectScopeCategoryUIProvider/<BuildAllPoints>d__2")]
public virtual IEnumerable`1<ITemplateScopePoint> BuildAllPoints();
    public virtual string get_CategoryCaption();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.LiveTemplates.XamlProjectScopeProvider : ScopeProvider {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Xaml.LiveTemplates.XamlProjectScopeProvider/<ProvideScopePoints>d__1")]
public virtual IEnumerable`1<ITemplateScopePoint> ProvideScopePoints(TemplateAcceptanceContext context);
    public static XamlPlatform GetAssuredXamlPlatforms(IProject project);
    public static bool IsSurelyXamlProject(IProject project, Boolean& isXamarin);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Xaml.LiveTemplates.ZoneMarker : object {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.MatchingBrace.XamlMatchingBraceProvider : object {
    private XamlTokenTypes myXamlTokenTypes;
    public XamlMatchingBraceProvider(XamlTokenTypes xamlTokenTypes);
    public sealed virtual ILexer CreateLexer(IBuffer buffer);
    public sealed virtual bool IsLeftBracket(TokenNodeType tokenType);
    public sealed virtual bool IsRightBracket(TokenNodeType tokenType);
    public sealed virtual bool Match(TokenNodeType token1, TokenNodeType token2);
    public sealed virtual int Compare(TokenNodeType x, TokenNodeType y);
}
[OptionsPageAttribute("Xaml.Naming", "Naming Style", "JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons/NamingConvention")]
public class JetBrains.ReSharper.Feature.Services.Xaml.Naming.XamlNamingOptionsPage : CustomNamingOptionsPage`1<XamlNamingSettingsKey> {
    [PublicAPIAttribute]
public static string PID;
    public XamlNamingOptionsPage(Lifetime lifetime, OptionsSettingsSmartContext settings, INamedElementsManager namedElementsManager, IThemedIconManager uiIconsComponent);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Xaml.Naming.ZoneMarker : object {
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.Occurrences.XamlStyleClassOccurrencePresenter : DeclaredElementOccurrencePresenter {
    protected virtual void DisplayLocationAndGlyph(IMenuItemDescriptor descriptor, OccurrencePresentationOptions options, IDeclaredElement element, DeclaredElementOccurrence declaredElementOccurrence, bool specifyVersion, Nullable`1<DocumentCoords> documentCoords);
    public virtual bool IsApplicable(IOccurrence occurrence);
}
[OptionsPageAttribute("Xaml", "XAML", "JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons/Xaml")]
public class JetBrains.ReSharper.Feature.Services.Xaml.OptionPages.XamlPage : AEmptyOptionsPage {
    public static string PID;
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Xaml.OptionPages.ZoneMarker : object {
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.Options.TypingAssistSettings", "JetBrains.ReSharper.Feature.Services.Xaml.Resources.Strings", "XAMLTypingAssistanceSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.Xaml.Options.XamlTypingAssistSettings : XmlTypingAssistSettings {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Xaml.Resources.Strings", "AutoInsertTagFooterInCodeCompletionSettingDescription")]
public bool AutoInsertTagFooter;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Xaml.Resources.Strings", "UseSmartBehaviorForAutomaticCodeCompletionSettingDescription")]
public bool UseSmartBehaviorForAutoCompletion;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Xaml.Resources.Strings", "ExpandNamespaceAliasesInCodeCompletionSettingDescription")]
public bool ExpandNamespaceAliasesInCodeCompletion;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Xaml.Resources.Strings", "CreateSelfClosedTagsInCodeCompletionSettingDescription")]
public bool CreateCollapsedTagsInCodeCompletion;
}
public class JetBrains.ReSharper.Feature.Services.Xaml.RearrangeCode.RearrangeableMarkupAttribute : RearrangeableElementAppendRemove`2<IMarkupAttribute, IAttributeListMarkupValue> {
    protected IAttributeListMarkupValue Parent { get; }
    public RearrangeableMarkupAttribute(IMarkupAttribute attribute);
    protected virtual IAttributeListMarkupValue get_Parent();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Xaml.RearrangeCode.RearrangeableMarkupAttribute/<GetChildren>d__3")]
protected virtual IEnumerable`1<IMarkupAttribute> GetChildren(IAttributeListMarkupValue parent);
    protected virtual void RemoveChild(IAttributeListMarkupValue parent, IMarkupAttribute child);
    protected virtual IMarkupAttribute AddBefore(IAttributeListMarkupValue parent, IMarkupAttribute child, IMarkupAttribute anchor);
    protected virtual IMarkupAttribute AddAfter(IAttributeListMarkupValue parent, IMarkupAttribute child, IMarkupAttribute anchor);
}
public class JetBrains.ReSharper.Feature.Services.Xaml.RearrangeCode.RearrangeableXamlTag : RearrangeableTag {
    [NotNullAttribute]
private SearchDomainFactory myDomainFactory;
    public string Title { get; }
    public RearrangeableXamlTag(IXmlTag tag, SearchDomainFactory domainFactory);
    public virtual string get_Title();
    [CanBeNullAttribute]
private IXamlObjectElement FindOwnerIfResource();
    [CanBeNullAttribute]
private IXamlObjectElement FindWhereToMoveResource(Direction direction);
    private static bool CanContainsResources(IXamlObjectElement objectElement);
    public virtual bool CanMove(Direction direction);
    protected virtual ITreeNode MoveUnderPsiTransaction(Direction direction);
    [NotNullAttribute]
private ITreeNode MoveResource(Direction direction, IXamlObjectElement target, IXamlObjectElement resourceOwner);
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.Feature.Services.Xaml.RemoveUnused.XamlHiddenAssemblyReferenceProvider : object {
    [NotNullAttribute]
private XamlModulePlatformCache myPlatformCache;
    public XamlHiddenAssemblyReferenceProvider(XamlModulePlatformCache platformCache);
    public sealed virtual bool IsAvailable(IProject project);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Xaml.RemoveUnused.XamlHiddenAssemblyReferenceProvider/<GetHiddenReferencedModules>d__3")]
public sealed virtual IEnumerable`1<IProjectToModuleReference> GetHiddenReferencedModules(IProject project);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.Xaml.RemoveUnused.XamlReferencedCodeSearchHelper : object {
    public sealed virtual bool RemoveNamespaceImport(ITreeNode importNamespaceNode);
    private sealed virtual override ICollection`1<NamespaceImportData> JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.IReferencedCodeSearchHelper.GetNamespaceImportsList(IFile file);
    public sealed virtual ICollection`1<Pair`2<IReference, IDeclaredElement>> GetUpdatedTargets(IReference reference, IDeclaredElement target);
    public sealed virtual IDeclaredElement ProvideDeclaredElementsFromResolve(IReference reference, IResolveResult resolveResult);
}
public class JetBrains.ReSharper.Feature.Services.Xaml.Resources.ServicesXamlThemedIcons : object {
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Feature.Services.Xaml.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string AutoInsertTagFooterInCodeCompletionSettingDescription { get; }
    public static string CodeCleanupTask_XAMLCollapseEmptyTags { get; }
    public static string CollapseEmptyTags_Name_Collapse_empty_tags { get; }
    public static string CreateSelfClosedTagsInCodeCompletionSettingDescription { get; }
    public static string ExpandNamespaceAliasesInCodeCompletionSettingDescription { get; }
    public static string NamingStyleOptionPageTitle { get; }
    public static string UseSmartBehaviorForAutomaticCodeCompletionSettingDescription { get; }
    public static string VisibilityModeOfHintsForImplicitAttributeNamesSettingDescription { get; }
    public static string VisibilityModeOfHintsForMissingGridRowColumnEtcSettingDescription { get; }
    public static string VisibilityModeOfHintsForTheDataContextOfTheBindingSettingDescription { get; }
    public static string VisibilityModeOfHintsInsideCornerRadiusValueSettingDescription { get; }
    public static string VisibilityModeOfHintsInsideThicknessValueMarginPaddingEtcSettingDescription { get; }
    public static string WhetherToHideHintInTemplateBindingsIfDataContextHintAlreadyPresentedInParentElementSettingDescription { get; }
    public static string WhetherToShowFullyQualifiedNamesOfTypesSettingDescription { get; }
    public static string WhetherToShowHintsForMissingGridRowColumnEtcSettingDescription { get; }
    public static string WhetherToShowHintsForTheDataContextOfTheBindingSettingDescription { get; }
    public static string WhetherToShowHintsInsideCornerRadiusValueSettingDescription { get; }
    public static string WhetherToShowHintsInsideThicknessValueMarginPaddingEtcSettingDescription { get; }
    public static string WhetherToShowImplicitMarkAttributeNameHintsSettingDescription { get; }
    public static string XamlInlayHintsSettingsSettingDescription { get; }
    public static string XAMLOptionPageTitle { get; }
    public static string XAMLTypingAssistanceSettingsSettingDescription { get; }
    public static string ImplicitAttributeName_Header_Text { get; }
    public static string ThicknessArgument_Header_Text { get; }
    public static string CornerRadiusArgument_Header_Text { get; }
    public static string MissingGridRowColumn_Header_Text { get; }
    public static string DataContext_Header_Text { get; }
    public static string ShowFullyQualifiedNamesForDataContext_BoolOption_Text { get; }
    public static string HideForTemplateBindingsIfHintHasBeen_BoolOption_Text { get; }
    public static string AnyXAMLProjects_Text { get; }
    public static string XAMLProjects_Text { get; }
    public static string XAMLCProjects_Text { get; }
    public static string XamarinCProjects_Text { get; }
    public static string WPFCProjects_Text { get; }
    public static string SilverlightProjects_Text { get; }
    public static string WinRTProjects_Text { get; }
    public static string WPFProjects_Text { get; }
    public static string XAMLVBNETProjects_Text { get; }
    public static string AttachedEvents_Text { get; }
    public static string __Namespace_Text { get; }
    public static string AttachedEvents__ToolTip { get; }
    public static string MAUICProjects_Text { get; }
    public static string EvaluatesToDependencyPropertyTypeSpecificToCurrentFrameworkMacroDefinition_Description { get; }
    public static string EvaluatesToDependencyPropertyTypeSpecificToCurrentFrameworkMacroDefinition_LongDescription { get; }
    public static string CreateAttachedProperty__Text { get; }
    public static string CreateDirectProperty__Text { get; }
    public static string CreateStyledProperty__Text { get; }
    public static string CreateDependencyProperty__Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_AutoInsertTagFooterInCodeCompletionSettingDescription();
    public static string get_CodeCleanupTask_XAMLCollapseEmptyTags();
    public static string get_CollapseEmptyTags_Name_Collapse_empty_tags();
    public static string get_CreateSelfClosedTagsInCodeCompletionSettingDescription();
    public static string get_ExpandNamespaceAliasesInCodeCompletionSettingDescription();
    public static string get_NamingStyleOptionPageTitle();
    public static string get_UseSmartBehaviorForAutomaticCodeCompletionSettingDescription();
    public static string get_VisibilityModeOfHintsForImplicitAttributeNamesSettingDescription();
    public static string get_VisibilityModeOfHintsForMissingGridRowColumnEtcSettingDescription();
    public static string get_VisibilityModeOfHintsForTheDataContextOfTheBindingSettingDescription();
    public static string get_VisibilityModeOfHintsInsideCornerRadiusValueSettingDescription();
    public static string get_VisibilityModeOfHintsInsideThicknessValueMarginPaddingEtcSettingDescription();
    public static string get_WhetherToHideHintInTemplateBindingsIfDataContextHintAlreadyPresentedInParentElementSettingDescription();
    public static string get_WhetherToShowFullyQualifiedNamesOfTypesSettingDescription();
    public static string get_WhetherToShowHintsForMissingGridRowColumnEtcSettingDescription();
    public static string get_WhetherToShowHintsForTheDataContextOfTheBindingSettingDescription();
    public static string get_WhetherToShowHintsInsideCornerRadiusValueSettingDescription();
    public static string get_WhetherToShowHintsInsideThicknessValueMarginPaddingEtcSettingDescription();
    public static string get_WhetherToShowImplicitMarkAttributeNameHintsSettingDescription();
    public static string get_XamlInlayHintsSettingsSettingDescription();
    public static string get_XAMLOptionPageTitle();
    public static string get_XAMLTypingAssistanceSettingsSettingDescription();
    public static string get_ImplicitAttributeName_Header_Text();
    public static string get_ThicknessArgument_Header_Text();
    public static string get_CornerRadiusArgument_Header_Text();
    public static string get_MissingGridRowColumn_Header_Text();
    public static string get_DataContext_Header_Text();
    public static string get_ShowFullyQualifiedNamesForDataContext_BoolOption_Text();
    public static string get_HideForTemplateBindingsIfHintHasBeen_BoolOption_Text();
    public static string get_AnyXAMLProjects_Text();
    public static string get_XAMLProjects_Text();
    public static string get_XAMLCProjects_Text();
    public static string get_XamarinCProjects_Text();
    public static string get_WPFCProjects_Text();
    public static string get_SilverlightProjects_Text();
    public static string get_WinRTProjects_Text();
    public static string get_WPFProjects_Text();
    public static string get_XAMLVBNETProjects_Text();
    public static string get_AttachedEvents_Text();
    public static string get___Namespace_Text();
    public static string get_AttachedEvents__ToolTip();
    public static string get_MAUICProjects_Text();
    public static string get_EvaluatesToDependencyPropertyTypeSpecificToCurrentFrameworkMacroDefinition_Description();
    public static string get_EvaluatesToDependencyPropertyTypeSpecificToCurrentFrameworkMacroDefinition_LongDescription();
    public static string get_CreateAttachedProperty__Text();
    public static string get_CreateDirectProperty__Text();
    public static string get_CreateStyledProperty__Text();
    public static string get_CreateDependencyProperty__Text();
}
internal class JetBrains.ReSharper.Feature.Services.Xaml.SelectEmbracingConstruct.XamlDotSelection : XmlDotSelection {
    public XamlDotSelection(XamlSelectEmbracingConstructProvider provider, IXmlFile fileNode, TreeOffset offset, bool selectBetterToken, bool useCamelHumps, bool appendInjectedPsi);
    protected virtual bool IsWordToken(ITokenNode token);
    protected virtual bool IsLiteralToken(ITokenNode token);
    protected virtual bool IsSpaceToken(ITokenNode token);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.Xaml.SelectEmbracingConstruct.XamlSelectEmbracingConstructProvider : XmlSelectEmbracingConstructProvider {
    public XamlSelectEmbracingConstructProvider(ISettingsStore settingsStore);
    public virtual bool IsAvailable(IPsiSourceFile sourceFile);
    public virtual ISelectedRange GetSelectedRange(IPsiSourceFile sourceFile, DocumentRange documentRange);
    public virtual ISelectedRange ExtendSelectionRange(IXmlFile fileNode, ITreeNode first, ITreeNode last);
    public virtual ISelectedRange BuildTreeNodeSelection(IXmlFile fileNode, ITreeNode node);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.Statistics.XamlProjectTechnologyProvider : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Xaml.Statistics.XamlProjectTechnologyProvider/<GetProjectTechnology>d__0")]
public sealed virtual IEnumerable`1<string> GetProjectTechnology(IProject project);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.StructuralNavigation.XamlStructuralNavigationManager : XmlStructuralNavigationManager {
    protected virtual IStructuralNavigationItem GetNextSelection(StructuralNavigationContextBase context);
}
public class JetBrains.ReSharper.Feature.Services.Xaml.StructuralNavigation.XamlStructuralNavigationVisitor : XmlStructuralNavigationVisitor {
    public virtual StructuralNavigationContextBase VisitNode(IXmlTreeNode node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitTokenNode(IXmlToken token, StructuralNavigationContextBase context);
    private static bool IsQualifierNode(IXmlTreeNode node);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Xaml.StructuralNavigation.ZoneMarker : object {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.TypingAssist.XamlChangedTagNameTrackerSettingsProvider : XmlChangedTagNameTrackerSettingsProvider {
    public virtual bool IsAvailable(ITextControl textControl, IPsiSourceFile sourceFile, ISettingsStore settingsStore);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Xaml.TypingAssist.XamlTypingAssist : TypingAssistLanguageBase`1<XamlLanguage> {
    public XamlTypingAssist(Lifetime lifetime, TypingAssistDependencies dependencies);
    protected virtual bool IsSupported(ITextControl textControl);
    public sealed virtual bool QuickCheckAvailability(ITextControl textControl, IPsiSourceFile projectFile);
    private bool HandleBraceTyped(ITypingContext context);
    private bool HandleBackspacePressed(IActionContext context);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Xaml.TypingAssist.ZoneMarker : object {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.Util.XamlDefaultValueCreator : DefaultValueCreator {
    protected virtual IExpression CreateNull(ITreeNode context);
    protected virtual IExpression CreateTypeDefaultExpression(IType type, ITreeNode context, bool allowOmitTypeSpecification);
    protected virtual IExpression CreateConstantValue(ConstantValue value, ITreeNode context);
    public virtual IExpression CreateArrayConstructorCall(IType arrayType, ITreeNode context);
    protected virtual IExpression CreateDefaultConstructorCall(IType valueType, ITreeNode context, bool allowOmitTypeSpecification);
}
[GeneratorBuilderAttribute("EventSubscriptions", "JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.VB.Generate.XamlVBEventSubscriptionsBuilder : CodeBehindGeneratorBuilderBase`2<XamlGeneratorContext, VBGeneratorContext> {
    public double Priority { get; }
    public virtual double get_Priority();
    protected virtual IGeneratorBuilder CreateCodeBehindBuilder();
    protected virtual VBGeneratorContext CreateCodeBehindContext(XamlGeneratorContext context);
    public virtual void ProcessWithCodebehind(XamlGeneratorContext context, VBGeneratorContext codeBehindContext, IProgressIndicator progress);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.Xaml.VB.Intentions.VBCreateAttachedPropertyIntention : VBCreateDependencyPropertyIntentionBase {
    public sealed virtual string GetIntentionText(string propertyName);
    public sealed virtual IntentionResult ExecuteEx(CreateDependencyPropertyDeclarationContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.Xaml.VB.Intentions.VBCreateDependencyPropertyIntention : VBCreateDependencyPropertyIntentionBase {
    public sealed virtual string GetIntentionText(string propertyName);
    public sealed virtual IntentionResult ExecuteEx(CreateDependencyPropertyDeclarationContext context);
}
public class JetBrains.ReSharper.Feature.Services.Xaml.VB.Intentions.VBCreateDependencyPropertyIntentionBase : object {
    protected IVariableDeclaration CreateDependencyPropertyField(CreateDependencyPropertyDeclarationContext context, string methodName, IType propertyType, FindersTemplateFieldHolder typeHolder);
}
public class JetBrains.ReSharper.Feature.Services.Xaml.VB.LiveTemplates.InXamlVBProjectFile : InXamlSpecificProject {
    private static Guid DefaultUID;
    private static Guid QuickUID;
    public PsiLanguageType RelatedLanguage { get; }
    public Guid QuickListUID { get; }
    public string QuickListTitle { get; }
    public string PresentableShortName { get; }
    private static InXamlVBProjectFile();
    public virtual PsiLanguageType get_RelatedLanguage();
    public sealed virtual Guid get_QuickListUID();
    public sealed virtual string get_QuickListTitle();
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
}
[FileTemplatesAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.VB.LiveTemplates.XamlVBFileTemplatesSupport : XamlFileTemplatesSupportBase {
    public IEnumerable`1<ITemplateScopePoint> ScopePoints { get; }
    public string Name { get; }
    protected ProjectLanguage Language { get; }
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Xaml.VB.LiveTemplates.XamlVBFileTemplatesSupport/<get_ScopePoints>d__1")]
public virtual IEnumerable`1<ITemplateScopePoint> get_ScopePoints();
    public virtual string get_Name();
    protected virtual ProjectLanguage get_Language();
}
[ScopeCategoryUIProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.VB.LiveTemplates.XamlVBProjectScopeCategoryUIProvider : ScopeCategoryUIProvider {
    public string CategoryCaption { get; }
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Xaml.VB.LiveTemplates.XamlVBProjectScopeCategoryUIProvider/<BuildAllPoints>d__1")]
public virtual IEnumerable`1<ITemplateScopePoint> BuildAllPoints();
    public virtual string get_CategoryCaption();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.VB.LiveTemplates.XamlVBProjectScopeProvider : ScopeProvider {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Xaml.VB.LiveTemplates.XamlVBProjectScopeProvider/<ProvideScopePoints>d__1")]
public virtual IEnumerable`1<ITemplateScopePoint> ProvideScopePoints(TemplateAcceptanceContext context);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Xaml.VB.LiveTemplates.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Xaml.VB.ZoneMarker : object {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.Xaml.VisualElements.VisualElementFactory : object {
    private static Char[] ourSplitters;
    private static VisualElementFactory();
    public sealed virtual IColorReference GetColorReference(ITreeNode element);
    [CanBeNullAttribute]
public static IValueReference GetColorValueReference(ITreeNode element);
    public static Nullable`1<JetRgbaColor> ColorFromString(string colorText);
    private static Nullable`1<JetRgbaColor> TryParseFromRgb(string colorText);
    private static Nullable`1<JetRgbaColor> TryParseFromRgba(string colorText);
    private static Nullable`1<JetRgbaColor> TryParseFromHsv(string colorText);
    private static Nullable`1<JetRgbaColor> TryParseFromHsva(string colorText);
    private static Nullable`1<JetRgbaColor> TryParseFromHsl(string colorText);
    private static Nullable`1<JetRgbaColor> TryParseFromHsla(string colorText);
    private static bool TryConvertHslToRgb(double hue, double saturation, double light, Byte& red, Byte& green, Byte& blue);
    private static bool TryConvertHsvToRgb(double hue, double saturation, double value, Byte& red, Byte& green, Byte& blue);
    private static bool TryParsePercentOrDoubleAndScaleToByte(string value, Byte& result);
    private static bool TryParsePercentOrDouble(string value, Double& result);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.VisualElements.XamlColorDeclaredElementSearcher : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Xaml.VisualElements.XamlColorDeclaredElementSearcher/<GetWords>d__0")]
public sealed virtual IEnumerable`1<string> GetWords(IColorDeclaredElement element);
}
internal class JetBrains.ReSharper.Feature.Services.Xaml.VisualElements.XamlColorValueReference : object {
    [NotNullAttribute]
private ITreeNode myOwner;
    [NotNullAttribute]
private IValueReference myValueReference;
    public ITreeNode Owner { get; }
    public Nullable`1<DocumentRange> ColorConstantRange { get; }
    public IColorElement ColorElement { get; }
    public ColorBindOptions BindOptions { get; }
    public XamlColorValueReference(ITreeNode element, IValueReference valueReference);
    public sealed virtual ITreeNode get_Owner();
    public sealed virtual Nullable`1<DocumentRange> get_ColorConstantRange();
    public sealed virtual IColorElement get_ColorElement();
    public sealed virtual void Bind(IColorElement colorElement);
    public sealed virtual IEnumerable`1<IColorElement> GetColorTable();
    public sealed virtual ColorBindOptions get_BindOptions();
}
internal class JetBrains.ReSharper.Feature.Services.Xaml.VisualElements.XamlStaticResourceColorReference : object {
    [NotNullAttribute]
private IResourceReference myReference;
    public ITreeNode Owner { get; }
    public Nullable`1<DocumentRange> ColorConstantRange { get; }
    public IColorElement ColorElement { get; }
    public ColorBindOptions BindOptions { get; }
    public XamlStaticResourceColorReference(IResourceReference reference);
    public sealed virtual ITreeNode get_Owner();
    public sealed virtual Nullable`1<DocumentRange> get_ColorConstantRange();
    public sealed virtual IColorElement get_ColorElement();
    public sealed virtual void Bind(IColorElement colorElement);
    public sealed virtual IEnumerable`1<IColorElement> GetColorTable();
    public sealed virtual ColorBindOptions get_BindOptions();
}
internal class JetBrains.ReSharper.Feature.Services.Xaml.VisualElements.XamlXStaticColorReference : object {
    [NotNullAttribute]
private IXStatic myElement;
    [NotNullAttribute]
private ITypeMemberReference myMemberReference;
    [NotNullAttribute]
private ITypeElement myColorPropertyOwner;
    public ITreeNode Owner { get; }
    public Nullable`1<DocumentRange> ColorConstantRange { get; }
    public IColorElement ColorElement { get; }
    public ColorBindOptions BindOptions { get; }
    public XamlXStaticColorReference(IXStatic element, ITypeMemberReference memberReference, ITypeMember colorProperty);
    public sealed virtual ITreeNode get_Owner();
    public sealed virtual Nullable`1<DocumentRange> get_ColorConstantRange();
    public sealed virtual IColorElement get_ColorElement();
    public sealed virtual void Bind(IColorElement colorElement);
    public sealed virtual IEnumerable`1<IColorElement> GetColorTable();
    public sealed virtual ColorBindOptions get_BindOptions();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xaml.XamlEntities.XamlEntitiesNodeTypeSet : XmlEntitiesNodeTypeSet {
    public XamlEntitiesNodeTypeSet(XamlTokenTypes tokenTypes);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Xaml.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
