[ActionGroupAttribute("Bookmarks", "1", "10")]
public class JetBrains.ReSharper.Features.Inspections.Actions.BookmarksMenu : object {
    public BookmarksMenu(BookmarksMenuAction bookmarksMenuAction, ClearAllBookmarksActionHandler clearAllBookmarksActionHandler, ClearInDocumentAction clearInDocumentAction);
}
[ActionGroupAttribute("CallHierarchy.ContextMenu", "1", "10")]
public class JetBrains.ReSharper.Features.Inspections.Actions.CallHierarchyContextMenuActionGroup : object {
    public CallHierarchyContextMenuActionGroup(IgnoreItemActionGroup ignoreActionGroup, Separator sep, InspectMenuActionGroup inspectMenuActionGroup, Separator sep1, NavigateContextualGroup navigateContextual, Separator sep2, FindUsagesContextualGroup findUsagesContext);
}
[ActionGroupAttribute("CodeStructure.ActionBar", "1", "10")]
public class JetBrains.ReSharper.Features.Inspections.Actions.CodeStructureActionBarActionGroup : object {
    public CodeStructureActionBarActionGroup(TreeModelBrowserStandardActionGroup treeModelBrowserStandardActionGroup, Separator sep, CodeStructureSynchronizeToViewAction codeStructureSynchronizeToViewAction, CodeStructureSynchronizeToCaretAction codeStructureSynchronizeToCaretAction, Separator sep1, CodeStructureEnregionAction codeStructureEnregionAction, CodeStructureShowPreprocessorDirectivesAction showPreprocessorDirectivesAction);
}
[ActionGroupAttribute("DfaExplorerSession.ActionBar", "1", "10")]
public class JetBrains.ReSharper.Features.Inspections.Actions.DfaExplorerSessionActionBarActionGroup : object {
    public DfaExplorerSessionActionBarActionGroup(TreeModelBrowserStandardActionGroup treeModelBrowserStandardActionGroup);
}
[ActionGroupAttribute("DfaExplorerSession.ContextMenu", "1", "10")]
public class JetBrains.ReSharper.Features.Inspections.Actions.DfaExplorerSessionContextMenuActionGroup : object {
    public DfaExplorerSessionContextMenuActionGroup(OccurrenceBrowserContextMenuActionGroup occurrenceBrowserContextMenuActionGroup, Separator sep1, NavigateContextualGroup navigateContextual, Separator sep2, FindUsagesContextualGroup findUsages);
}
[ActionGroupAttribute("Inspect", "1", "10")]
public class JetBrains.ReSharper.Features.Inspections.Actions.InspectMenu : object {
    public InspectMenu(InspectThisAction inspectThisAction, Separator sep, InspectMenuActionGroup inspectMenuActionGroup);
}
[ActionGroupAttribute("InspectMenu", "0", "10")]
public class JetBrains.ReSharper.Features.Inspections.Actions.InspectMenuActionGroup : object {
    public InspectMenuActionGroup(ShowOutgoingCallsAction showOutgoingCallsAction, ShowIncomingCallsAction showIncomingCallsAction, ValueTrackingUpAction valueTrackingUp, ValueTrackingDownAction valueTrackingDown);
}
[ActionGroupAttribute("ProjectHierarchy.ActionBar", "1", "10")]
public class JetBrains.ReSharper.Features.Inspections.Actions.ProjectHierarchyActionBarActionGroup : object {
    public ProjectHierarchyActionBarActionGroup(UpdateProjectHierarchyAction updateProjectHierarchyAction, BaseOnThisModuleAction baseOnThisModuleAction, Separator sep1, TreeModelBrowserStandardActionGroup treeModelBrowserStandardActionGroup, Separator sep2, ProjectHierarchyToggleAssembliesAction projectHierarchyToggleAssemblies, Separator sep3, ProjectHierarchyReferencesAction projectHierarchyReferencesAction, ProjectHierarchyUsagesAction projectHierarchyUsagesAction);
}
[ActionGroupAttribute("ProjectHierarchy.ContextMenu", "1", "10")]
public class JetBrains.ReSharper.Features.Inspections.Actions.ProjectHierarchyContextMenuActionGroup : object {
    public ProjectHierarchyContextMenuActionGroup(BaseOnThisModuleAction baseOnThisModuleAction);
}
[ActionGroupAttribute("TodoExplorer.ActionBar", "1", "10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Inspections.Actions.TodoExplorerActionBarActionGroup : object {
    public static string ID;
    public TodoExplorerActionBarActionGroup(TreeModelBrowserStandardActionGroup treeModelBrowserStandardActionGroup, Separator sep, TodoShowOptionsAction todoShowOptionsAction, TodoPaintItemsAction todoPaintItemsAction, Separator sep2, ToDoShowInGeneratedCodeAction showInGeneratedCodeAction, Separator sep3, FilterTodosMenuAction filterTodosMenuAction);
}
[ActionAttribute("TodoExplorer.ActionBar.PaintItems", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "PaintItemsActionText")]
public class JetBrains.ReSharper.Features.Inspections.Actions.TodoPaintItemsAction : object {
    public sealed virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public sealed virtual void Execute(IDataContext context);
}
[ActionGroupAttribute("TypeHierarchy.ActionBar", "1", "10")]
public class JetBrains.ReSharper.Features.Inspections.Actions.TypeHierarchyActionBarActionGroup : object {
    public TypeHierarchyActionBarActionGroup(UpdateTypeHierarchyAction updateTypeHierarchyAction, BaseOnThisMemberAction baseOnThisMemberAction, Separator sep, TreeModelBrowserStandardActionGroup treeModelBrowserStandardActionGroup, Separator sep1, WholeMembersHierarchyActions wholeMembersHierarchyActions, SubMembersActions subMembersActions, SuperMembersAction superMembersAction, ImplementorsAction implementorsAction, InterfaceLeavesAction interfaceLeavesAction, Separator sep2, FilterAction filterAction);
}
[ActionGroupAttribute("TypeHierarchy.ContextMenu", "1", "10")]
public class JetBrains.ReSharper.Features.Inspections.Actions.TypeHierarchyContextMenuActionGroup : object {
    public TypeHierarchyContextMenuActionGroup(BaseOnThisMemberAction baseOnThisMember, Separator sep1, CodeEntityFeaturesActionGroup codeEntityFeatures);
}
[ActionGroupAttribute("TypeHierarchyMember.ContextMenu", "1", "10")]
public class JetBrains.ReSharper.Features.Inspections.Actions.TypeHierarchyMemberContextMenuActionGroup : object {
    public TypeHierarchyMemberContextMenuActionGroup(CodeEntityFeaturesActionGroup codeEntityFeatures);
}
[ActionGroupAttribute("TypeHierarchyMembers.ActionBar", "1", "10")]
public class JetBrains.ReSharper.Features.Inspections.Actions.TypeHierarchyMembersActionBarActionGroup : object {
    public TypeHierarchyMembersActionBarActionGroup(ShowMemberAllAction showMemberAllAction, ShowMemberPolymorphicAction showMemberPolymorphicAction);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.AnaFindDependentCodeProvider : object {
    private FindDependentCodeProvider myDefaultProvider;
    public AnaFindDependentCodeProvider(FindDependentCodeProvider defaultProvider);
    public sealed virtual Action GetSearchesExecution(IDataContext dataContext, INavigationExecutionHost host);
}
[ActionAttribute("AnalyzeReferences.ClearReferenceMarks", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ClearUsedAtRuntimeMarkActionText")]
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.AnalyzeReferenceClearsedAtRuntimeMark : AnalyzeReferenceMarkBase {
    protected virtual bool UpdateWithMgr(ProjectReferencesSelection selectedReferences, AnalyzeReferenceIgnoredReferencesManager mgr);
    protected virtual void ExecuteWithMgr(ProjectReferencesSelection selectedReferences, AnalyzeReferenceIgnoredReferencesManager mgr);
}
[ActionAttribute("AnalyzeReferences.FindDependendedOnSelected", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "FindCodeDependentOnModuleActionText")]
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.AnalyzeReferenceFindDependedModulesAction : ContextSearchActionBase`1<AnaFindDependentCodeProvider> {
}
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.AnalyzeReferenceIgnoredReferencesManager : object {
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private ISettingsStore mySettingsStore;
    public static Expression`1<Func`2<RuntimeUsedReferencesSettings, IIndexedEntry`2<string, bool>>> IgnoredReferencesKey { get; }
    public AnalyzeReferenceIgnoredReferencesManager(ISolution solution);
    private static List`1<ReferenceNameAndProjectId> ReferenceNameAndProjectIdsFromSelection(ProjectReferencesSelection selectedReferences);
    public bool AnyIsIgnored(ProjectReferencesSelection selection);
    public bool AllIsIgnored(ProjectReferencesSelection selection);
    public bool IsIgnored(IProject ownerModule, IModule module);
    public bool IsIgnored(IProject ownerModule, NugetId package);
    private bool IsIgnored(ReferenceNameAndProjectId projectId);
    public void SetIgnoredProjectLevel(ProjectReferencesSelection selectedReferences);
    public void SetIgnoredGlobal(ProjectReferencesSelection selectedReferences);
    public static Expression`1<Func`2<RuntimeUsedReferencesSettings, IIndexedEntry`2<string, bool>>> get_IgnoredReferencesKey();
    public void ClearIgnore(ProjectReferencesSelection selectedReferences);
}
[ActionAttribute("AnalyzeReferences.MarkReferenceAsRuntimeUsed", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "MarkReferenceAsUsedAtRuntimeForWholeSolutionActionText")]
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.AnalyzeReferenceMark : AnalyzeReferenceMarkBase {
    protected virtual bool UpdateWithMgr(ProjectReferencesSelection selectedReferences, AnalyzeReferenceIgnoredReferencesManager mgr);
    protected virtual void ExecuteWithMgr(ProjectReferencesSelection selectedReferences, AnalyzeReferenceIgnoredReferencesManager mgr);
}
[ActionGroupAttribute("AnalyzeReferences.RuntimeUsedReferencesSubmenu", "0", "10")]
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.AnalyzeReferenceMarkAsUnusedSubmenu : object {
    public AnalyzeReferenceMarkAsUnusedSubmenu(AnalyzeReferenceMarkAsUsedForProject proj, AnalyzeReferenceMark mark1, AnalyzeReferenceClearsedAtRuntimeMark clear);
}
[ActionAttribute("AnalyzeReferences.MarkReferenceAsRuntimeUsedForProject", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "MarkReferenceAsUsedAtRuntimeActionText")]
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.AnalyzeReferenceMarkAsUsedForProject : AnalyzeReferenceMarkBase {
    protected virtual bool UpdateWithMgr(ProjectReferencesSelection selectedReferences, AnalyzeReferenceIgnoredReferencesManager mgr);
    protected virtual void ExecuteWithMgr(ProjectReferencesSelection selectedReferences, AnalyzeReferenceIgnoredReferencesManager mgr);
}
public abstract class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.AnalyzeReferenceMarkBase : AnalyzeReferencesActionWithSelection {
    protected virtual bool Update(IDataContext dataContext, ActionPresentation presentation, ProjectReferencesSelection selectedReferences);
    [CanBeNullAttribute]
protected static AnalyzeReferenceIgnoredReferencesManager TryGetManager(IDataContext dataContext);
    protected virtual void Execute(IDataContext dataContext, IReferencesDescriptor descriptor, ProjectReferencesSelection selectedReferences);
    protected abstract virtual bool UpdateWithMgr(ProjectReferencesSelection selectedReferences, AnalyzeReferenceIgnoredReferencesManager mgr);
    protected abstract virtual void ExecuteWithMgr(ProjectReferencesSelection selectedReferences, AnalyzeReferenceIgnoredReferencesManager mgr);
}
[ActionGroupAttribute("AnalyzeReferences.ActionBar", "1", "10")]
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.AnalyzeReferencesActionBarActionGroup : object {
    public AnalyzeReferencesActionBarActionGroup(AnalyzeReferencesUpdateAction analyzeReferencesUpdateAction, Separator sep0, TreeModelBrowserStandardActionGroup treeModelBrowserStandardActionGroup, Separator sep1, OccurrenceBrowserMergeAction occurrenceBrowserMergeAction, Separator sep2, AnalyzeReferencesRemoveSelectedAction analyzeReferencesRemoveSelectedAction, AnalyzeReferencesRemoveUnusedAction analyzeReferencesRemoveUnusedAction, FilterOccurrencesMenuAction filterMenu, Separator sep3);
}
public abstract class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.AnalyzeReferencesActionWithSelection : object {
    protected abstract virtual bool Update(IDataContext dataContext, ActionPresentation presentation, ProjectReferencesSelection selectedReferences);
    protected abstract virtual void Execute(IDataContext dataContext, IReferencesDescriptor descriptor, ProjectReferencesSelection selectedReferences);
    [CanBeNullAttribute]
public static ProjectReferencesSelection TryGetSelection(IDataContext context);
    private static ProjectReferencesSelection GetSelectedReferences(IEnumerable`1<TreeModelNode> viewNodes, IReferencesDescriptor descriptor);
    public static bool CanBeRemoved(IProject owner, IModule module);
    public static bool CanBeRemoved(IProject owner, NugetId nugetId);
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionGroupAttribute("AnalyzeReferences.ContextMenu", "1", "10")]
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.AnalyzeReferencesContextMenuActionGroup : object {
    public AnalyzeReferencesContextMenuActionGroup(AnalyzeReferencesRemoveSelectedAction analyzeReferencesRemoveSelectedAction, AnalyzeReferenceFindDependedModulesAction fdAction, Separator sep1, AnalyzeReferenceMarkAsUnusedSubmenu marks);
}
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.AnalyzeReferencesDescriptor : OccurrenceBrowserDescriptor {
    public static OccurrenceKindClassificationAxis ModulesAxis;
    public static OccurrenceKind DirectUsage;
    public static OccurrenceKind UnusedProjectReference;
    public static OccurrenceKind UsedProjectReference;
    public static GroupingSectionId UnusedProjectReferences;
    public static GroupingSectionId DecomposableNugets;
    public static GroupingSectionId DirectUsageSection;
    public static GroupingSectionId ImplicitUsedSection;
    private TreeSectionModel myModel;
    private AnalyzeReferencesTreePresenter myPresenter;
    private bool myIsDirty;
    [CompilerGeneratedAttribute]
private ReferencedCodeTreeBuilder <ReferencesTreeBuilder>k__BackingField;
    private static ILogger ourLogger;
    private static ILogger ourPerfLogger;
    private ProjectModelElementEnvoy myTargetProjectEnvoy;
    public ReferencedCodeTreeBuilder ReferencesTreeBuilder { get; }
    public bool IsDirty { get; }
    public string ContextMenuID { get; }
    public StructuredPresenter`2<TreeModelNode, IPresentableItem> Presenter { get; }
    public string ActionBarID { get; }
    public TreeModel Model { get; }
    public IEnumerable`1<IModule> UnusedReferencedModules { get; }
    public IEnumerable`1<INugetPackageName> UnusedReferencedPackages { get; }
    public IProject TargetProject { get; }
    public AnalyzeReferencesDescriptor(IProject targetProject, SearchRequestFactory requestFactory, List`1<IModule> referencedCodeScope);
    private static AnalyzeReferencesDescriptor();
    [CompilerGeneratedAttribute]
public ReferencedCodeTreeBuilder get_ReferencesTreeBuilder();
    protected virtual IEqualityComparer`1<object> CreateEqualityComparer();
    private static ReferencedCodeTreeBuilder CreateBuilder(IProject targetProject, List`1<IModule> referencedCodeScope, SearchRequestFactory requestFactory);
    private void AnalyzeReferencesDescriptorPsiChanged(ITreeNode arg1, PsiChangedElementType arg2);
    public bool get_IsDirty();
    protected virtual ICollection`1<OccurrenceKind> GetOccurrenceKinds(IOccurrence occurrence);
    protected virtual ICollection`1<OccurrenceKind> GetAllOccurrenceKinds();
    public virtual IEnumerable`1<TreeModelNode> GetDefaultNodes(TreeModel model);
    public virtual bool ExpandNodeInitially(TreeModelNode modelNode);
    public bool BuildAssemblyReferencesTree();
    public void BuildAssemblyReferencesTree(IProgressIndicator progressIndicator);
    public bool IsThresholded(IModule module);
    protected virtual void SetResults(ICollection`1<IOccurrence> items, IProgressIndicator indicator, bool merge);
    public virtual string get_ContextMenuID();
    private void UpdateTitle();
    public virtual StructuredPresenter`2<TreeModelNode, IPresentableItem> get_Presenter();
    public virtual string get_ActionBarID();
    public virtual TreeModel get_Model();
    public Task`1<bool> RemoveSelectedAssemblyReferenceOccurrence(ProjectReferencesSelection selection, bool isDirty);
    private Task`1<bool> WaitNuGetUninstall(ProjectReferencesSelection selection);
    protected void RemoveItem(IModule module);
    protected void RemoveItem(IProject project, NugetId id);
    public bool IsImplicitlyReferencedModule(IModule module);
    public bool IsNestedAssemblyReference(IProjectToModuleReference projectToModuleReference);
    public IEnumerable`1<ReferencedCodeOccurrence> GetUsagesToRemove();
    public IEnumerable`1<IModule> get_UnusedReferencedModules();
    public IEnumerable`1<INugetPackageName> get_UnusedReferencedPackages();
    public IProject get_TargetProject();
    [CanBeNullAttribute]
[ContractAnnotationAttribute("module:null=>null")]
public ModuleReferenceOccurrence GetOccurrenceFromModule(IModule module);
    [NotNullAttribute]
public PackageReferenceOccurrence GetOccurrenceFromPackage(NugetId packageId);
    public bool IsUsedModule(IModule referencedModule);
    public bool IsImplicitUsedModule(IModule referencedModule);
    public IEnumerable`1<ReferencedCodeOccurrence> GetUsagesOfModule(IModule referencedModule);
    public sealed virtual bool CanBeSelected(IProjectToModuleReference projectToModuleReference);
    public sealed virtual void Refresh();
    public AnalyzeReferencesNuGetUsageType GetNugetPackageUsageType(NugetId packageId);
    public bool TryGetTreeBranchOfOccurrencesForPackageReference(PackageReferenceOccurrence item, IEnumerable`1& occurrences);
    public IEnumerable`1<string> UsedByReferencedModulesReference(IModule module);
    public IEnumerable`1<string> UsedByReferencedProjectPackage(NugetId packageId);
    public IEnumerable`1<NugetId> DirectUsedChildren(NugetId packageId);
    private static string GetResultsTitle(OccurrenceSection section);
    private static int CompareNodes(TreeModelNode node1, TreeModelNode node2);
    private static string GetSortingString(TreeModelNode node);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.AnalyzeReferencesGroupingProvider : OccurrenceBrowserGroupingProvider {
    public virtual ICollection`1<TreeModelGrouping`1<IOccurrence>> GetGroupings(TreeModelBrowserDescriptorBase descriptor);
    public virtual bool IsApplicable(TreeModelBrowserDescriptorBase descriptor);
}
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.AnalyzeReferencesNugetDependencyGraph : object {
    private static ILogger ourLog;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private IProject myProject;
    [NotNullAttribute]
private IPlatformManager myPlatformManager;
    private IEqualityComparer`1<IModule> myModuleComparer;
    private DirectedGraph`1<NuGetGraphNode> myDependencyGraphs;
    private HashMap`2<IModule, NugetId> myContainingNugetMap;
    [NotNullAttribute]
public ICollection`1<NuGetGraphNode> Nodes { get; }
    [NotNullAttribute]
public HashMap`2<IModule, NugetId> ContainingNugetMap { get; }
    public AnalyzeReferencesNugetDependencyGraph(ISolution solution, IProject project, IEqualityComparer`1<IModule> moduleComparer, TargetFrameworkId targetFrameworkId);
    private static AnalyzeReferencesNugetDependencyGraph();
    public ICollection`1<NuGetGraphNode> get_Nodes();
    public HashMap`2<IModule, NugetId> get_ContainingNugetMap();
    [CanBeNullAttribute]
public NugetId GetContainingPackageId(IModule module);
    private void Build(IProject project, TargetFrameworkId targetFramework);
    public void MarkUsed(IProject project, IEnumerable`1<IModule> usedReferencesModules);
    private void PromoteSdkToImplicityUsed();
    [CanBeNullAttribute]
public NuGetGraphNode GetNode(NugetId packageId);
    private void MarkExplicitUsage(IEnumerable`1<IModule> usedReferencesModules);
    public void Clear();
    public IEnumerable`1<INugetPackageName> PackageTransitiveDependencies(NugetId packageId);
    public IEnumerable`1<INugetPackageName> PackagesTransitiveDependsOn(NugetId packageId);
    public IEnumerable`1<NuGetGraphNode> TransitiveDependencies(NugetId packageId);
    public IEnumerable`1<NuGetGraphNode> TransitiveDependsOn(NugetId packageId);
    private IEnumerable`1<INugetPackageName> GetDescendantsPackagesInTree(NugetId packageId, IDirectedGraph`1<NuGetGraphNode> dependencyGraphs);
    private IEnumerable`1<NuGetGraphNode> GetDescendantsInTree(NugetId packageId, IDirectedGraph`1<NuGetGraphNode> dependencyGraphs);
    public void VisitSubtree(NugetId packageId, Action`2<NuGetGraphNode, IList`1<NuGetGraphNode>> visitNode);
    private void VisitSubtree(NugetId packageId, IDirectedGraph`1<NuGetGraphNode> dependencyGraphs, Action`2<NuGetGraphNode, IList`1<NuGetGraphNode>> visitNode);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.AnalyzeReferencesNugetDependencyGraph/<UnusedRootNodes>d__27")]
public IEnumerable`1<INugetPackageName> UnusedRootNodes();
    public bool UnusedByOthers(NugetId packageId);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.AnalyzeReferencesNugetDependencyGraph/<TopologicalSortedOrder>d__29")]
public IEnumerable`1<NugetId> TopologicalSortedOrder(HashSet`1<NugetId> packagesIds);
    public IEnumerable`1<NugetId> UsedByOtherPackages(HashSet`1<NugetId> packagesSubset);
    public IEnumerable`1<INugetPackageName> NotUnusedPackages();
    public IEnumerable`1<INugetPackageName> UnusedPackages();
    public IEnumerable`1<INugetPackageName> DirectlyUsed();
    public IEnumerable`1<INugetPackageName> Where(Func`2<NuGetGraphNode, bool> predicate);
    public void MarkUnusedPackagesIgnoredByUser(Func`2<NugetId, bool> isIgnored);
    public void MarkUnusedPackagesWithContentFilesAsImplicitUsed();
    [CompilerGeneratedAttribute]
private NuGetGraphNode <Build>g__GetOrCreateSdkNode|13_2();
    [CompilerGeneratedAttribute]
private IEnumerable`1<NuGetGraphNode> <MarkUsed>b__14_1(NuGetGraphNode n);
    [CompilerGeneratedAttribute]
private IEnumerable`1<NuGetGraphNode> <MarkUsed>b__14_4(NuGetGraphNode n);
    [CompilerGeneratedAttribute]
private IEnumerable`1<NuGetGraphNode> <MarkUsed>b__14_7(NuGetGraphNode n);
}
public enum JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.AnalyzeReferencesNuGetUsageType : Enum {
    public int value__;
    public static AnalyzeReferencesNuGetUsageType Unknown;
    public static AnalyzeReferencesNuGetUsageType Unused;
    public static AnalyzeReferencesNuGetUsageType ImplicitlyUsed;
    public static AnalyzeReferencesNuGetUsageType Used;
    public static AnalyzeReferencesNuGetUsageType Decomposable;
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.AnalyzeReferencesRegistrar : object {
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>P;
    public bool IsApplicable { get; }
    public AnalyzeReferencesRegistrar(Lifetime Lifetime);
    public virtual void Show(AnalyzeReferencesDescriptor descriptor);
    public virtual bool get_IsApplicable();
}
[ActionAttribute("AnalyzeReferences.RemoveSelected", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "RemoveSelectedReferencesActionText")]
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.AnalyzeReferencesRemoveSelectedAction : AnalyzeReferencesActionWithSelection {
    protected virtual bool Update(IDataContext dataContext, ActionPresentation presentation, ProjectReferencesSelection selectedReferences);
    protected virtual void Execute(IDataContext dataContext, IReferencesDescriptor descriptor, ProjectReferencesSelection selectedReferences);
    public static void RefreshWhenReady(AnalyzeReferencesDescriptor self, Task`1<bool> whenRemoved);
}
[ActionAttribute("AnalyzeReferences.RemoveUnused", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "RemoveAllUnusedReferencesActionText")]
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.AnalyzeReferencesRemoveUnusedAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private static ProjectReferencesSelection CreateSelectionAllUnused(AnalyzeReferencesDescriptor descriptor);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.AnalyzeReferencesSectionProvider : OccurrenceSectionProvider {
    public virtual bool IsApplicable(IOccurrenceBrowserDescriptor descriptor);
    public virtual ICollection`1<TreeSection> GetTreeSections(IOccurrenceBrowserDescriptor descriptor);
    public virtual ICollection`1<GroupingSectionId> GetGroupSectionId(IOccurrence occurrence, IOccurrenceBrowserDescriptor descriptor);
    private static GroupingSectionId GetSingleGroupSectionId(IOccurrence occurrence, IOccurrenceBrowserDescriptor descriptor);
    private static GroupingSectionId GetSectionForReferencedCode(ReferencedCodeOccurrence referencedCodeOccurrence, AnalyzeReferencesDescriptor analyzeReferencesDescriptor);
    private static GroupingSectionId GetSectionForModuleOccurrence(ModuleReferenceOccurrence assemblyReferenceOccurrence, AnalyzeReferencesDescriptor analyzeReferencesDescriptor);
    private static GroupingSectionId GetSectionForPackageOccurrence(PackageReferenceOccurrence packageReferenceOccurrence, AnalyzeReferencesDescriptor analyzeReferencesDescriptor);
    private static string GetResultsTitle(OccurrenceSection section);
    private static int CompareNodes(TreeModelNode node1, TreeModelNode node2);
    private static string GetSortingString(TreeModelNode node);
}
[ActionGroupAttribute("AnalyzeReferences.Show", "1", "10")]
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.AnalyzeReferencesShowActionGroup : object {
    public AnalyzeReferencesShowActionGroup(ShowReadAccessAction showReadAccessAction, ShowWriteAccessAction showWriteAccessAction, ShowInvocationAccessAction showInvocationAccessAction, ShowNameCaptureAccessAction showNameCaptureAccessAction, ShowAttributeAccessAction showAttributeAccessAction, ShowOtherAccessAction showOtherAccessAction, Separator sep, ShowRelatedUsagesAction showRelatedUsagesAction, ShowUnusedReferences showUnusedReferences);
}
[ToolWindowDescriptorAttribute("16")]
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.AnalyzeReferencesToolWindowDescriptor : ToolWindowDescriptor {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.AnalyzeReferencesToolWindowEmptyContent : ToolWindowEmptyContentWithActionHint {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
private AnalyzeReferencesToolWindowEmptyContent(AnalyzeReferencesToolWindowEmptyContent original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(AnalyzeReferencesToolWindowEmptyContent left, AnalyzeReferencesToolWindowEmptyContent right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(AnalyzeReferencesToolWindowEmptyContent left, AnalyzeReferencesToolWindowEmptyContent right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ToolWindowEmptyContentWithActionHint other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(AnalyzeReferencesToolWindowEmptyContent other);
    [CompilerGeneratedAttribute]
public virtual AAutomationRecord <Clone>$();
}
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.AnalyzeReferencesToolWindowPageAutomation : AAutomationRecord {
    [CompilerGeneratedAttribute]
private AnalyzeReferencesDescriptor <AnalyzeReferencesDescriptor>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public AnalyzeReferencesDescriptor AnalyzeReferencesDescriptor { get; public set; }
    public AnalyzeReferencesToolWindowPageAutomation(AnalyzeReferencesDescriptor AnalyzeReferencesDescriptor);
    [CompilerGeneratedAttribute]
private AnalyzeReferencesToolWindowPageAutomation(AnalyzeReferencesToolWindowPageAutomation original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public AnalyzeReferencesDescriptor get_AnalyzeReferencesDescriptor();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AnalyzeReferencesDescriptor(AnalyzeReferencesDescriptor value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(AnalyzeReferencesToolWindowPageAutomation left, AnalyzeReferencesToolWindowPageAutomation right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(AnalyzeReferencesToolWindowPageAutomation left, AnalyzeReferencesToolWindowPageAutomation right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(AAutomationRecord other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(AnalyzeReferencesToolWindowPageAutomation other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual AAutomationRecord <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(AnalyzeReferencesDescriptor& AnalyzeReferencesDescriptor);
}
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.AnalyzeReferencesTreePresenter : OccurrenceBrowserPresenter {
    private AnalyzeReferencesDescriptor myOwner;
    public AnalyzeReferencesTreePresenter(AnalyzeReferencesDescriptor analyzeReferencesDescriptor);
    internal void PresentPackageReference(PackageReferenceOccurrence value, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
    private void PresentReferencedCodeOccurrence(ReferencedCodeOccurrence value, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
    private void PresentAssemblyReferenceOccurrence(ModuleReferenceOccurrence value, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
    private void PresentAssemblyReferenceOccurrences(ModuleReferenceOccurrence[] values, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
    private static void SetUnusedStyle(IPresentableItem item);
    private void AppendOccurrencesCount(IPresentableItem item, TreeModelNode node, NugetId nugetId);
    private void AppendOccurrencesCount(IPresentableItem item, TreeModelNode node, ModuleReferenceOccurrence moduleReferenceOccurrence);
    private void PresentNuGetIds(NugetId[] value, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
    private void PresentNuGetId(NugetId value, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
}
[ActionAttribute("AnalyzeReferences.Update", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "RefreshActionText")]
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.AnalyzeReferencesUpdateAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
public interface JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.IReferencesDescriptor {
    public abstract virtual void Refresh();
    public abstract virtual bool CanBeSelected(IProjectToModuleReference projectToModuleReference);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.NugetDependencyGraphEx : object {
    [ExtensionAttribute]
public static void AddDependendedPackageToSelection(ProjectReferencesSelection occurrenceListToRemove, AnalyzeReferencesNugetDependencyGraph nugetDependencyGraph, IProject project);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.NuGetGraphNodeExt : object {
    public static Key`1<Boxed`1<AnalyzeReferencesNuGetUsageType>> UsageTypeKey;
    private static NuGetGraphNodeExt();
    [ExtensionAttribute]
public static void SetUsageType(NuGetGraphNode node, AnalyzeReferencesNuGetUsageType usageType);
    [ExtensionAttribute]
public static AnalyzeReferencesNuGetUsageType GetUsageType(NuGetGraphNode node);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.NugetPackageGroupingProvider : SdkReferencesGroupingProvider {
    public virtual ICollection`1<TreeModelGrouping`1<IOccurrence>> GetGroupings(TreeModelBrowserDescriptorBase descriptor);
    public virtual bool IsApplicable(TreeModelBrowserDescriptorBase descriptor);
}
[ActionAttribute("JetBrains.ReSharper.Features.Inspections.Resources.Strings", "OptimizeReferencesActionText")]
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.OptimizeReferencesAction : object {
    private bool IsAvailable(IDataContext context);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public static void Show(IProject project);
    [CanBeNullAttribute]
private IProject GetProject(IProjectModelElement projectModelElement);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.ProjectModulesDependencyGraph : object {
    private static ILogger ourLog;
    private IProject myRoot;
    private DirectedGraph`1<ModuleNode> myDependencyGraphs;
    private RetargetedModulesEqualityComparer myRetargetedModulesEqualityComparer;
    private TargetFrameworkId myTargetFrameworkId;
    private bool myTransitiveRootsExist;
    public ProjectModulesDependencyGraph(IProject root, TargetFrameworkId targetFrameworkId);
    private static ProjectModulesDependencyGraph();
    public void Create(int maxDepth, IEnumerable`1<IProject> rootProjects);
    public int IncomingCount(IModule module);
    public IEnumerable`1<IModule> Incoming(IModule module);
    public IEnumerable`1<IModule> Outgoing(IModule module);
    [CanBeNullAttribute]
private ModuleNode TryGetNode(IModule module);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.ProjectModulesDependencyGraph/<TransitiveRoots>d__14")]
public IEnumerable`1<IProject> TransitiveRoots();
    [CanBeNullAttribute]
public IProject GetTransitiveRoot(IModule module);
}
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.ProjectReferencesUtil : object {
    public static IEnumerable`1<IProject> GetRootProjects(IProject project);
    public static IEnumerable`1<IProject> CollectReferencedProjects(IProject project);
}
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.ReferencedCodeTreeBuilder : object {
    [CanBeNullAttribute]
private List`1<IModule> myReferencedCodeScope;
    private SearchRequestFactory myRequestFactory;
    private static ILogger ourLogger;
    protected JetHashSet`1<ModuleReferenceOccurrence> ModuleReferenceOccurrences;
    private HashMap`2<NugetId, PackageReferenceOccurrence> myPackageNameToOccurrence;
    private HashMap`2<IModule, ModuleReferenceOccurrence> myModuleToOcurrenceMap;
    private AnalyzeReferencesNugetDependencyGraph myNugetGrouping;
    private UnusedNugetTreeClonesBuilder myNugetUnusedTreeClonesBuilderOccurrences;
    private ProjectModulesDependencyGraph myModulesDependencyGraph;
    private OneToSetMap`2<NugetId, IProject> myUsedInReferencedProjectPackages;
    private AnalyzeReferenceIgnoredReferencesManager myAnalyzeReferenceIgnored;
    private ReferencedModulesBuilder myModulesBuilder;
    private ISolution mySolution;
    private ProjectModelElementEnvoy myProjectEnvoy;
    [NotNullAttribute]
private RetargetedModulesEqualityComparer myModulesComparer;
    public AnalyzeReferencesNugetDependencyGraph NugetDependencyGraph { get; }
    public ProjectModulesDependencyGraph ModuleDependencyGraph { get; }
    public IEnumerable`1<IModule> UnusedReferencedModules { get; }
    public IEnumerable`1<INugetPackageName> UnusedReferencedPackages { get; }
    public HashMap`2<IModule, ModuleReferenceOccurrence> ModuleToAssemblyOcurrenceMap { get; }
    public ReferencedModulesUsagesStore ModulesUsagesResult { get; }
    public ReferencedModulesBuilder ModulesBuilder { get; }
    internal ReferencedCodeTreeBuilder(IProject project, List`1<IModule> referencedCodeScope, SearchRequestFactory requestFactory);
    private static ReferencedCodeTreeBuilder();
    public AnalyzeReferencesNugetDependencyGraph get_NugetDependencyGraph();
    public ProjectModulesDependencyGraph get_ModuleDependencyGraph();
    private IProject GetValidProject();
    protected virtual void UpdateModuleReferences();
    private void ClearMaps();
    public void RemoveSelectedReferencesAndRelatedUsages(ProjectReferencesSelection selectedReferences);
    public IEnumerable`1<IModule> get_UnusedReferencedModules();
    public ICollection`1<IOccurrence> ExecuteAndGetTreeOccurrences(IProgressIndicator pi);
    public ICollection`1<IOccurrence> SetTreeOccurrences(List`1<IOccurrence> occurrences);
    private void RemoveExternalModulesOccurrences(List`1<IOccurrence> occurrences);
    private void CreateModulesDependencyGraph();
    public void AddDisplayOccurrences(List`1<IOccurrence> occurrences);
    public void PromoteModulesUsagesResultToNuGet();
    private UsageType IsBroughtAnyUsedReferences(IProject root);
    public void RemoveDisplayOccurrences(List`1<IOccurrence> occurrences);
    private void MoveNuGetModuleUsageToAppropriateType(IModule module, AnalyzeReferencesNuGetUsageType usageType);
    protected void UpdatePackagesReferences(AnalyzeReferencesNugetDependencyGraph nugetGraph);
    protected virtual List`1<ModuleReferenceOccurrence> GetAssemblyReferenceOccurrenceToDisplay();
    protected bool IsReferencedModuleShouldPresentedByItself(IModule referencedModule);
    public IEnumerable`1<INugetPackageName> get_UnusedReferencedPackages();
    public HashMap`2<IModule, ModuleReferenceOccurrence> get_ModuleToAssemblyOcurrenceMap();
    public ReferencedModulesUsagesStore get_ModulesUsagesResult();
    public ReferencedModulesBuilder get_ModulesBuilder();
    public void CreateAndCacheModuleOccurrence(IProjectToModuleReference reference, bool isNested);
    public virtual bool IsNestedAssemblyReference(IProjectToModuleReference projectToModuleReference);
    public AnalyzeReferencesNuGetUsageType GetNugetPackageUsageType(NugetId packageId);
    public IEnumerable`1<NugetId> DirectUsedChildren(NugetId packageId);
    public PackageReferenceOccurrence OccurrenceFromPackage(NugetId packageId);
    public bool TryGetTreeBranchOfOccurrencesForPackageReference(PackageReferenceOccurrence item, IEnumerable`1& occurrences);
    public bool IsImplicitlyUsed(IModule referencedModule);
    public void RemoveUnresolvedOccurrences(List`1<IOccurrence> asList);
    public IEnumerable`1<string> UsedByReferencedModulesReferenceNames(IModule module);
    private IEnumerable`1<IModule> UsedByReferencedModules(IModule module);
    public IEnumerable`1<string> UsedByReferencedProjectPackage(NugetId packageId);
    [CompilerGeneratedAttribute]
private bool <get_UnusedReferencedModules>b__25_0(IModule module);
    [CompilerGeneratedAttribute]
private bool <RemoveExternalModulesOccurrences>b__28_0(IOccurrence o);
    [CompilerGeneratedAttribute]
private bool <AddDisplayOccurrences>b__30_0(NugetId id);
    [CompilerGeneratedAttribute]
private PackageReferenceOccurrence <AddDisplayOccurrences>b__30_2(INugetPackageName package);
    [CompilerGeneratedAttribute]
private PackageReferenceOccurrence <AddDisplayOccurrences>b__30_3(INugetPackageName package);
}
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.ReferencedModulesBuilder : object {
    private static int MaxOccurrencesByModuleThreshold;
    private static ILogger ourLogger;
    private ProjectModelElementEnvoy myProjectEnvoy;
    private ISolution mySolution;
    public OneToSetMap`2<IModule, ReferencedCodeOccurrence> ModuleToUsagesMap;
    public JetHashSet`1<ReferencedCodeOccurrence> ReferencedCodeOccurrencesToRemove;
    [CanBeNullAttribute]
private List`1<IModule> myReferencedCodeScope;
    private IEqualityComparer`1<IModule> myModulesComparer;
    private SearchProjectItemReferencedCodeRequest myCodeRequest;
    private IPsiServices myPsiServices;
    private ReferencedModulesUsagesStore myResult;
    [CanBeNullAttribute]
public IProject Project { get; }
    public ReferencedModulesUsagesStore Result { get; }
    public ReferencedModulesBuilder(List`1<IModule> referencedCodeScope, ProjectModelElementEnvoy projectEnvoy, ISolution solution, SearchRequestFactory requestFactory);
    private static ReferencedModulesBuilder();
    public IProject get_Project();
    public ReferencedModulesUsagesStore get_Result();
    public List`1<IOccurrence> SearchOccurrences(IProgressIndicator pi);
    public bool InReferencedCodeScope(IModule referencedModule);
    private void AssignUsedAndUnusedReferencedModules(JetHashSet`1<IModule> finalUsedModulesList);
    private void CalculateImplicitReferencedModules();
    private void CollectReferencedCodeOccurrencesToRemove(JetHashSet`1<ReferencedCodeOccurrence> weakUsagesMap);
    private static void TraceOccurrences(string title, IEnumerable`1<IOccurrence> occurrences);
    public void RemoveInvalid();
}
[DefaultMemberAttribute("Item")]
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.ReferencedModulesUsagesStore : object {
    private Dictionary`2<IModule, UsageType> myResult;
    private JetHashSet`1<IModule> myThresholdedModules;
    public UsageType Item { get; public set; }
    public ReferencedModulesUsagesStore(IEqualityComparer`1<IModule> comparer);
    public ICollection`1<IModule> AllModulesCopy();
    public void Add(IModule module, UsageType usageType);
    public bool ContainsKey(IModule module);
    public UsageType get_Item(IModule module);
    public void set_Item(IModule module, UsageType value);
    public void Append(IModule module, UsageType usageType);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<IModule, UsageType>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<JetBrains.ProjectModel.IModule,JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.ReferencedModulesUsagesStore.UsageType>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public bool Remove(IModule module);
    public IEnumerable`1<IModule> GetModules(UsageType usageType);
    public bool Is(IModule module, UsageType usageType);
    public string DumpToString();
    public bool IsThresholded(IModule module);
    public void MarkThresholded(IModule module);
}
public interface JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.RemoveUnused.IRemoveUnusedReferencesWorkflowProvider {
}
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.RemoveUnused.ReferencedCodeUsage : object {
    private IEnumerable`1<IPsiModule> myReferencedPsiModules;
    private IReferencePointer myReferencePointer;
    private ReferencedCodeKind myKind;
    [NotNullAttribute]
public IEnumerable`1<IPsiModule> ReferencedPsiModules { get; }
    [CanBeNullAttribute]
public IReferencePointer ReferencePointer { get; }
    public ReferencedCodeKind Kind { get; }
    public ReferencedCodeUsage(IEnumerable`1<IPsiModule> referencedPsiModule, IReference reference, ReferencedCodeKind kind);
    public sealed virtual IEnumerable`1<IPsiModule> get_ReferencedPsiModules();
    public IReferencePointer get_ReferencePointer();
    public sealed virtual ReferencedCodeKind get_Kind();
}
[ActionGroupAttribute("RemoveUnusedReferences.ContextMenu", "1", "10")]
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.RemoveUnused.RemoveUnusedContextMenu : object {
    public RemoveUnusedContextMenu(TreeModelBrowserSelectionActionGroup selectionActionGroup, Separator sep0, AnalyzeReferenceMarkAsUnusedSubmenu marks);
}
[ActionAttribute("JetBrains.ReSharper.Features.Inspections.Resources.Strings", "RemoveUnusedReferencesActionText")]
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.RemoveUnused.RemoveUnusedReferencesAction : ExtensibleRefactoringAction`1<IRemoveUnusedReferencesWorkflowProvider> {
    public static string ACTION_ID;
    protected RichText Caption { get; }
    protected virtual RichText get_Caption();
}
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.RemoveUnused.RemoveUnusedReferencesBase : RefactoringExecBase`2<RemoveUnusedReferencesWorkflow, RemoveUnusedReferencesRefactoring> {
    public RemoveUnusedReferencesBase(RemoveUnusedReferencesWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    public virtual void RemoveUsing(IReference reference);
}
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.RemoveUnused.RemoveUnusedReferencesHelper : object {
    public bool IsLanguageSupported { get; }
    public sealed virtual bool get_IsLanguageSupported();
}
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.RemoveUnused.RemoveUnusedReferencesPage : SingleBeRefactoringPage {
    private RemoveUnusedReferencesWorkflow myWorkflow;
    private IList`1<IOccurrence> mySelectedOccurrences;
    private IOccurrence myFocusedOccurrence;
    public static string UnusedReferencesGrid;
    public string Description { get; }
    public string Title { get; }
    public RemoveUnusedReferencesPage(RemoveUnusedReferencesWorkflow workflow);
    public virtual string get_Description();
    public virtual string get_Title();
    public virtual bool Initialize(IProgressIndicator pi);
    public virtual BeControl GetPageContent();
    private IProject GetSelectedProject();
    public virtual void Commit();
}
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.RemoveUnused.RemoveUnusedReferencesRefactoring : DrivenRefactoringBase`1<RemoveUnusedReferencesWorkflow> {
    [CompilerGeneratedAttribute]
private CachingLanguageSpecificImpl`1<RemoveUnusedReferencesBase> <LanguageSpecific>k__BackingField;
    public CachingLanguageSpecificImpl`1<RemoveUnusedReferencesBase> LanguageSpecific { get; }
    public RemoveUnusedReferencesRefactoring(RemoveUnusedReferencesWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    [CompilerGeneratedAttribute]
public CachingLanguageSpecificImpl`1<RemoveUnusedReferencesBase> get_LanguageSpecific();
    public virtual bool Execute(IProgressIndicator pi);
}
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.RemoveUnused.RemoveUnusedReferencesWorkflow : DrivenRefactoringWorkflow2`1<RemoveUnusedReferencesHelper> {
    private OneToSetMap`2<IProject, IOccurrence> myUnusedReferenceEnvoys;
    private OneToSetMap`2<IProject, ReferencedCodeUsage> myRemovableUsages;
    private OneToSetMap`2<IProject, IModule> myUsedModulesMap;
    private SdkReferencesManager mySdkReferenceManager;
    private ProjectReferencesSelection myAssemblyReferencesToRemove;
    private AnalyzeReferenceIgnoredReferencesManager myAnalyzeReferenceIgnoredReferencesManager;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IOccurrence> <SelectedOccurrences>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IProject> <TargetProjects>k__BackingField;
    public List`1<ReferencedCodeUsage> RemovableUsages { get; }
    public HelpId HelpKeyword { get; }
    public IRefactoringPage FirstPendingRefactoringPage { get; }
    public bool MightModifyManyDocuments { get; }
    public string Title { get; }
    public RefactoringActionGroup ActionGroup { get; }
    public List`1<IOccurrence> AllUnusedAssemblyReferencePresentations { get; }
    public IEnumerable`1<IOccurrence> SelectedOccurrences { get; public set; }
    public ICollection`1<IProject> TargetProjects { get; private set; }
    public RemoveUnusedReferencesWorkflow(ISolution solution, string actionId);
    public List`1<ReferencedCodeUsage> get_RemovableUsages();
    public virtual HelpId get_HelpKeyword();
    public virtual IRefactoringPage get_FirstPendingRefactoringPage();
    public virtual bool get_MightModifyManyDocuments();
    public virtual bool IsAvailable(IDataContext context);
    public virtual bool Initialize(IDataContext context);
    public virtual string get_Title();
    public virtual RefactoringActionGroup get_ActionGroup();
    public List`1<IOccurrence> get_AllUnusedAssemblyReferencePresentations();
    public virtual bool PreExecute(IProgressIndicator progressIndicator);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IOccurrence> get_SelectedOccurrences();
    [CompilerGeneratedAttribute]
public void set_SelectedOccurrences(IEnumerable`1<IOccurrence> value);
    public virtual IRefactoringExecuter CreateRefactoring(IRefactoringDriver driver);
    public virtual bool PostExecute(IProgressIndicator pi);
    protected virtual RemoveUnusedReferencesHelper CreateUnsupportedHelper();
    protected virtual RemoveUnusedReferencesHelper CreateHelper(IRefactoringLanguageService service);
    [CompilerGeneratedAttribute]
public ICollection`1<IProject> get_TargetProjects();
    [CompilerGeneratedAttribute]
private void set_TargetProjects(ICollection`1<IProject> value);
    public bool SearchUnusedModules(IProgressIndicator pi);
    private bool ProcessSingleProject(IProject project, IProgressIndicator pi);
    private void ClearMaps();
    [NotNullAttribute]
internal static IList`1<IProject> CollectNestedProjects(IProjectModelElement[] projectModelElements);
}
[RefactoringWorkflowProviderAttribute("16")]
internal class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.RemoveUnused.RemoveUnusedReferencesWorkflowProvider : object {
    public sealed virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
}
internal class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.RemoveUnused.UnusedAssemblyReferencePresenter : OccurrenceBrowserPresenter {
    public UnusedAssemblyReferencePresenter(ProjectModelElementPresentationService svc, ISolution solution);
    private static void PresentPackageReferenceOccurrence(PackageReferenceOccurrence value, IPresentableItem item);
    private static void PresentAssemblyReferenceOccurrence(ModuleReferenceOccurrence value, IPresentableItem item, TreeModelNode structureelement, PresentationState state, ProjectModelElementPresentationService svc);
    private static void MakeIconsLightened(IPresentableItem item);
}
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.RemoveUnused.UnusedProjectReferencesControlViewModel : AAutomation {
    private RemoveUnusedReferencesWorkflow myWorkflow;
    public RemoveUnusedReferencesWorkflow Workflow { get; }
    public UnusedProjectReferencesControlViewModel(RemoveUnusedReferencesWorkflow workflow);
    public RemoveUnusedReferencesWorkflow get_Workflow();
}
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.RemoveUnused.UnusedReferencesDescriptor : OccurrenceBrowserDescriptor {
    private Func`1<ICollection`1<IOccurrence>> myUnusedReferenceProvider;
    [CompilerGeneratedAttribute]
private StructuredPresenter`2<TreeModelNode, IPresentableItem> <Presenter>k__BackingField;
    public StructuredPresenter`2<TreeModelNode, IPresentableItem> Presenter { get; }
    public string ContextMenuID { get; }
    public TreeModel Model { get; }
    public UnusedReferencesDescriptor(ISolution solution, Func`1<ICollection`1<IOccurrence>> unusedReferenceProvider, ProjectModelElementPresentationService svc);
    [CompilerGeneratedAttribute]
public virtual StructuredPresenter`2<TreeModelNode, IPresentableItem> get_Presenter();
    public virtual string get_ContextMenuID();
    public void SetResult(ICollection`1<IOccurrence> items, IProgressIndicator indicator, bool mergeKinds);
    public virtual TreeModel get_Model();
    public sealed virtual void Refresh();
    public sealed virtual bool CanBeSelected(IProjectToModuleReference projectToModuleReference);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.RemoveUnused.UnusedReferencesGroupingProvider : OccurrenceBrowserGroupingProvider {
    public virtual ICollection`1<TreeModelGrouping`1<IOccurrence>> GetGroupings(TreeModelBrowserDescriptorBase descriptor);
    public virtual bool IsApplicable(TreeModelBrowserDescriptorBase descriptor);
}
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.RemoveUnused.UsedModulesConsumer : object {
    private JetHashSet`1<IPsiModule> myUsedModules;
    private JetHashSet`1<ReferencedCodeUsage> myWeakUsagesHashSet;
    public sealed virtual ReferencedCodeUsage Build(FindResult result);
    public sealed virtual FindExecution Merge(ReferencedCodeUsage data);
    public List`1<IPsiModule> GetUsedModules();
    public List`1<ReferencedCodeUsage> GetRemovableUsages(IProject project, IEqualityComparer`1<IModule> comparer);
}
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.SafeDeleteReference.SafeDeleteAssemblyReferenceDescriptor : AnalyzeReferencesDescriptor {
    public string ActionBarID { get; }
    public SafeDeleteAssemblyReferenceDescriptor(IProject project, SearchRequestFactory searchRequestFactory, List`1<IModule> referencedCodeScope);
    public virtual string get_ActionBarID();
}
internal class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.SafeDeleteReference.SafeDeleteReferencePage : SingleBeRefactoringPage {
    private SafeDeleteReferenceWorkflow myWorkflow;
    private string UnusedReferencesGrid;
    public string Description { get; }
    public string Title { get; }
    public bool DoNotShow { get; }
    public SafeDeleteReferencePage(SafeDeleteReferenceWorkflow workflow);
    public virtual string get_Description();
    public virtual string get_Title();
    public virtual BeControl GetPageContent();
    public virtual bool get_DoNotShow();
    public virtual bool Initialize(IProgressIndicator pi);
    public virtual bool RefreshContents(IProgressIndicator pi);
    [CompilerGeneratedAttribute]
private void <GetPageContent>b__7_0(bool b);
}
internal class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.SafeDeleteReference.SafeDeleteReferenceRefactoring : DrivenRefactoringBase`1<SafeDeleteReferenceWorkflow> {
    public SafeDeleteReferenceRefactoring(SafeDeleteReferenceWorkflow safeDeleteReferenceWorkflow, ISolution solution, IRefactoringDriver driver);
    public virtual bool Execute(IProgressIndicator pi);
}
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.SafeDeleteReference.SafeDeleteReferenceWorkflow : DrivenRefactoringWorkflow2`1<SafeDeleteReferenceWorkflowHelper> {
    [CompilerGeneratedAttribute]
private bool <RemoveOnlyUnused>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IProjectToModuleReference> <ReferencesToDelete>k__BackingField;
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private SafeDeleteAssemblyReferenceDescriptor <Descriptor>k__BackingField;
    public bool RemoveOnlyUnused { get; public set; }
    public HelpId HelpKeyword { get; }
    public IRefactoringPage FirstPendingRefactoringPage { get; }
    public bool MightModifyManyDocuments { get; }
    public string Title { get; }
    public RefactoringActionGroup ActionGroup { get; }
    public ICollection`1<IProjectToModuleReference> ReferencesToDelete { get; public set; }
    public IProject Project { get; private set; }
    public SafeDeleteAssemblyReferenceDescriptor Descriptor { get; private set; }
    public SafeDeleteReferenceWorkflow(ISolution solution, string actionId);
    [CompilerGeneratedAttribute]
public bool get_RemoveOnlyUnused();
    [CompilerGeneratedAttribute]
public void set_RemoveOnlyUnused(bool value);
    public virtual HelpId get_HelpKeyword();
    public virtual IRefactoringPage get_FirstPendingRefactoringPage();
    public virtual bool get_MightModifyManyDocuments();
    public virtual bool IsAvailable(IDataContext context);
    public virtual string get_Title();
    public virtual RefactoringActionGroup get_ActionGroup();
    [CompilerGeneratedAttribute]
public ICollection`1<IProjectToModuleReference> get_ReferencesToDelete();
    [CompilerGeneratedAttribute]
public void set_ReferencesToDelete(ICollection`1<IProjectToModuleReference> value);
    [CompilerGeneratedAttribute]
public IProject get_Project();
    [CompilerGeneratedAttribute]
private void set_Project(IProject value);
    [CompilerGeneratedAttribute]
public SafeDeleteAssemblyReferenceDescriptor get_Descriptor();
    [CompilerGeneratedAttribute]
private void set_Descriptor(SafeDeleteAssemblyReferenceDescriptor value);
    public virtual bool Initialize(IDataContext context);
    public virtual IRefactoringExecuter CreateRefactoring(IRefactoringDriver driver);
    protected virtual SafeDeleteReferenceWorkflowHelper CreateUnsupportedHelper();
    protected virtual SafeDeleteReferenceWorkflowHelper CreateHelper(IRefactoringLanguageService service);
    public void BuildUsagesTree(IProgressIndicator pi);
    [CompilerGeneratedAttribute]
private void <BuildUsagesTree>b__32_0();
}
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.SafeDeleteReference.SafeDeleteReferenceWorkflowHelper : object {
    public bool IsLanguageSupported { get; }
    public sealed virtual bool get_IsLanguageSupported();
}
[RefactoringWorkflowProviderAttribute("16")]
internal class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.SafeDeleteReference.SafeDeleteReferenceWorkflowProvider : SafeDeleteWorkflowProvider {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.SafeDeleteReference.SafeDeleteReferenceWorkflowProvider/<CreateWorkflow>d__0")]
public virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
}
[ActionGroupAttribute("SafeDeleteReference.ActionBar", "1", "10")]
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.SafeDeleteReferenceActionBarActionGroup : object {
    public SafeDeleteReferenceActionBarActionGroup(TreeModelBrowserStandardActionGroup treeModelBrowserStandardActionGroup, Separator sep, AnalyzeReferencesShowActionGroup analyzeReferencesShowActionGroup, FilterOccurrencesMenuAction filterMenu);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.SdkReferencesGroupingProvider : AnalyzeReferencesGroupingProvider {
    public virtual ICollection`1<TreeModelGrouping`1<IOccurrence>> GetGroupings(TreeModelBrowserDescriptorBase descriptor);
    public virtual bool IsApplicable(TreeModelBrowserDescriptorBase descriptor);
}
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.SearchRequestFactory : object {
    private ISolution mySolution;
    private bool myUseRetargeting;
    private List`1<IModule> myReferencedCodeScope;
    [CompilerGeneratedAttribute]
private IProject[] <Projects>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeRelated>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ThresholdByModule>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, string> <OverflowPresentationMessage>k__BackingField;
    public IProject[] Projects { get; public set; }
    public bool IncludeRelated { get; public set; }
    public int ThresholdByModule { get; public set; }
    public Func`2<string, string> OverflowPresentationMessage { get; public set; }
    public SearchRequestFactory(IProject[] projects, ISolution solution, bool includeRelated, bool useRetargeting, List`1<IModule> referencedCodeScope);
    [CompilerGeneratedAttribute]
public IProject[] get_Projects();
    [CompilerGeneratedAttribute]
public void set_Projects(IProject[] value);
    [CompilerGeneratedAttribute]
public bool get_IncludeRelated();
    [CompilerGeneratedAttribute]
public void set_IncludeRelated(bool value);
    [CompilerGeneratedAttribute]
public int get_ThresholdByModule();
    [CompilerGeneratedAttribute]
public void set_ThresholdByModule(int value);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_OverflowPresentationMessage();
    [CompilerGeneratedAttribute]
public void set_OverflowPresentationMessage(Func`2<string, string> value);
    public SearchProjectItemReferencedCodeRequest CreateSearchRequest();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.Settings.DefautRuntimeUsedReferencesSettings : HaveDefaultSettings`1<RuntimeUsedReferencesSettings> {
    public string Name { get; }
    public DefautRuntimeUsedReferencesSettings(ILogger logger, ISettingsSchema settingsSchema);
    public virtual string get_Name();
    public virtual void InitDefaultSettings(ISettingsStorageMountPoint mountPoint);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "AnalyzeReferencesSettingsSettingDescription")]
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.Settings.RuntimeUsedReferencesSettings : object {
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ThisModulesNameAlwaysAssumedToBeUsedInAnalyzeReferencesSettingDescription")]
public IIndexedEntry`2<string, bool> SolutionImplicitUsedModulesNames;
}
[ActionAttribute("JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ModuleReferencesActionText")]
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.ShowAnalyzeReferencesAction : ActivateToolWindowActionHandler`1<AnalyzeReferencesToolWindowDescriptor> {
}
[ActionAttribute("AnalyzeReferences.Filter.ShowRelatedUsages", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ShowRelatedUsagesActionText")]
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.ShowRelatedUsagesAction : ShowOccurrenceKindBaseAction {
    public OccurrenceKind OccurrenceKind { get; }
    public virtual OccurrenceKind get_OccurrenceKind();
}
[ActionAttribute("AnalyzeReferences.Filter.ShowUnusedReferences", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ShowUnusedReferencesActionText")]
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.ShowUnusedReferences : ShowOccurrenceKindBaseAction {
    public OccurrenceKind OccurrenceKind { get; }
    public virtual OccurrenceKind get_OccurrenceKind();
}
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.SoftAssemblyReferenceOccurrenceComparer : object {
    private RetargetedModulesEqualityComparer myModulesComparer;
    public SoftAssemblyReferenceOccurrenceComparer(ISolution solution);
    public sealed virtual bool Equals(ModuleReferenceOccurrence x, ModuleReferenceOccurrence y);
    public sealed virtual int GetHashCode(ModuleReferenceOccurrence occurrence);
}
internal class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.UnusedNugetTreeClonesBuilder : object {
    private HashMap`2<PackageWithPath, PackageReferenceOccurrence> myAdjacentList;
    public IEnumerable`1<IOccurrence> CreateOccurrencesTreeForUnused(AnalyzeReferencesNugetDependencyGraph nugetGrouping, IProject project);
    public bool TryGetValue(PackageReferenceOccurrence package, IEnumerable`1& occurrences);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.UnusedNugetTreeClonesBuilder/<GetOccurrences>d__4")]
private IEnumerable`1<IOccurrence> GetOccurrences(PackageWithPath key);
    public void Clear();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.Inspections.AnalyzeReferences.ZoneMarker : object {
}
[UsedImplicitlyAttribute]
internal class JetBrains.ReSharper.Features.Inspections.AssemblyRef : object {
    public AssemblyRef(ServicesNavigationThemedIcons refs);
}
internal class JetBrains.ReSharper.Features.Inspections.Bookmarks.AnonymousBookmarks.AnonymousBookmarkGutterMark : BookmarkGutterMark {
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.Features.Inspections.Bookmarks.AnonymousBookmarks.AnonymousBookmarkManager : SpecificBookmarkManagerBase`3<IAnonymousBookmarkManager, AnonymousBookmarkId, AnonymousBookmarkData> {
    private static string ourOwnerId;
    private Dictionary`2<AnonymousBookmarkId, string> myBookmarkIds;
    private Dictionary`2<string, AnonymousBookmarkId> myAnonymousBookmarkIds;
    public AnonymousBookmarkManager(Lifetime lifetime, ISolution solution, ProjectModelElementPointerManager elementPointerManager);
    protected virtual string ConvertSpecificKey(AnonymousBookmarkId specificKey);
    protected virtual AnonymousBookmarkData ConvertData(BookmarkData data);
    private void UpdateMaps(string bookmarkId);
    public sealed virtual AnonymousBookmarkData AddBookmark(IProjectFile projectFile, DocumentCoords coords);
    protected virtual void BookmarkAdded(AddRemoveBookmarkEventArgs`2<IBookmarkManager, BookmarkData> args);
    private sealed virtual override bool JetBrains.ReSharper.Features.Inspections.Bookmarks.AnonymousBookmarks.Model.IAnonymousBookmarkManager.HasAnyBookmark();
    private sealed virtual override bool JetBrains.ReSharper.Features.Inspections.Bookmarks.AnonymousBookmarks.Model.IAnonymousBookmarkManager.HasBookmark(AnonymousBookmarkId bookmarkId);
    private sealed virtual override bool JetBrains.ReSharper.Features.Inspections.Bookmarks.AnonymousBookmarks.Model.IAnonymousBookmarkManager.HasBookmarks(IProjectFile file);
    private sealed virtual override bool JetBrains.ReSharper.Features.Inspections.Bookmarks.AnonymousBookmarks.Model.IAnonymousBookmarkManager.IsBookmarkValid(AnonymousBookmarkId bookmarkId);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Features.Inspections.Bookmarks.AnonymousBookmarks.AnonymousBookmarksHelper : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IAnonymousBookmarkManager GetAnonymousBookmarkManager(ISolution solution);
    [ExtensionAttribute]
public static void AdviseAddBookmark(IAnonymousBookmarkManager manager, Lifetime lifetime, Action`1<AddRemoveBookmarkEventArgs`2<IAnonymousBookmarkManager, AnonymousBookmarkData>> handler);
    [ExtensionAttribute]
public static void AdviseRemoveBookmark(IAnonymousBookmarkManager manager, Lifetime lifetime, Action`1<AddRemoveBookmarkEventArgs`2<IAnonymousBookmarkManager, AnonymousBookmarkData>> handler);
}
public class JetBrains.ReSharper.Features.Inspections.Bookmarks.AnonymousBookmarks.Model.AnonymousBookmarkData : BookmarkDataBase`1<AnonymousBookmarkId> {
    public AnonymousBookmarkData(ISolution solution, AnonymousBookmarkId bookmarkId, BookmarkPlacement placement);
}
public class JetBrains.ReSharper.Features.Inspections.Bookmarks.AnonymousBookmarks.Model.AnonymousBookmarkId : object {
}
public interface JetBrains.ReSharper.Features.Inspections.Bookmarks.AnonymousBookmarks.Model.IAnonymousBookmarkManager {
    public abstract virtual bool HasAnyBookmark();
    public abstract virtual bool HasBookmark(AnonymousBookmarkId bookmarkId);
    public abstract virtual bool HasBookmarks(IProjectFile file);
    public abstract virtual bool IsBookmarkValid(AnonymousBookmarkId bookmarkId);
    public abstract virtual AnonymousBookmarkData AddBookmark(IProjectFile projectFile, DocumentCoords coords);
}
[RegisterHighlighterAttribute("ReSharper Bookmark Line")]
public static class JetBrains.ReSharper.Features.Inspections.Bookmarks.BookmarkActions : object {
    internal static string LineHighlighter;
    private static string ourLineHighlighterKey;
    private static BookmarkActions();
    private static void DoAnonymousBookmarkAdd(IProjectFile file, DocumentCoords coords, JetPopupMenu menu, PopupWindowContextSource popupContext, IThemedIconManager featuresBrowsingIconsComponent);
    private static void DoAnonymousBookmarkDelete(ISolution solution, AnonymousBookmarkId bookmarkId, JetPopupMenu menu);
    private static SimpleMenuItem CreateNewAnonymousItem(IProjectFile projectFile, DocumentCoords coords, PopupWindowContextSource popupContext, IThemedIconManager featuresBrowsingIconsComponent);
    private static SimpleMenuItem CreateAnonymousGoToMenuItem(ISolution solution, IProjectFile localFile, DocumentCoords coords, BookmarkDataBase`1<AnonymousBookmarkId> data, PopupWindowContextSource context, IThemedIconManager featuresBrowsingIconsComponent);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Inspections.Bookmarks.BookmarkActions/<CreateAnonymousMenu>d__4")]
private static IEnumerable`1<SimpleMenuItem> CreateAnonymousMenu(ISolution solution, IProjectFile file, DocumentCoords coords, PopupWindowContextSource popupContext, IThemedIconManager featuresBrowsingIconsComponent);
    private static void ShowHighlighter(Lifetime lifetime, ITextControl textControl);
    public static void ShowBookmarksMenu(ISolution solution, ITextControl textControl, PopupWindowContextSource popupCtx, IThemedIconManager featuresBrowsingIconsComponent);
    private static void ItemActionExecuted(LifetimeDefinition definition, JetPopupMenu menu, ItemActionType itemActionType, IMenuItemDescriptor key);
    private static void UpdateMenu(JetPopupMenu menu, SimpleMenuItem[] newItems);
    private static void ReplaceItem(JetPopupMenu menu, int index, SimpleMenuItem newItem);
    public static void ClearAllBookmarks(ISolution solution);
    public static void ClearBookmarksInDocument(IProjectFile projectFile);
    private static void ClearNumberedBookmark(JetPopupMenu menu, INumberedBookmarkManager nbmMgr, NumberedBookmarkId bookmarkId);
    private static void SetNumberedBookmark(JetPopupMenu menu, INumberedBookmarkManager bmMgr, NumberedBookmarkId bookmarkId, IProjectFile file, DocumentCoords coords);
    private static void GoToNumberedBookmark(ISolution solution, INumberedBookmarkManager nbmMgr, NumberedBookmarkId bookmarkId, PopupWindowContextSource popupWindowContextSource);
    private static SimpleMenuItem CreateNumberedItem(ISolution solution, NumberedBookmarkId id, INumberedBookmarkManager bmMgr, IProjectFile file, DocumentCoords coords, PopupWindowContextSource popupCtx, IThemedIconManager featuresBrowsingIconsComponent);
}
internal abstract class JetBrains.ReSharper.Features.Inspections.Bookmarks.BookmarkGutterMark : IconGutterMarkType {
    public IAnchor Priority { get; }
    protected BookmarkGutterMark(IconId icon);
    public virtual IAnchor get_Priority();
    public virtual IEnumerable`1<BulbMenuItem> GetBulbMenuItems(IHighlighter highlighter);
}
[ActionAttribute("Bookmarks.BookmarksMenu", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "BookmarksActionText")]
public class JetBrains.ReSharper.Features.Inspections.Bookmarks.BookmarksMenuAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
[RegisterHighlighterAttribute("ReSharper Bookmark 0")]
[RegisterHighlighterAttribute("ReSharper Bookmark 1")]
[RegisterHighlighterAttribute("ReSharper Bookmark 2")]
[RegisterHighlighterAttribute("ReSharper Bookmark 3")]
[RegisterHighlighterAttribute("ReSharper Bookmark 4")]
[RegisterHighlighterAttribute("ReSharper Bookmark 5")]
[RegisterHighlighterAttribute("ReSharper Bookmark 6")]
[RegisterHighlighterAttribute("ReSharper Bookmark 7")]
[RegisterHighlighterAttribute("ReSharper Bookmark 8")]
[RegisterHighlighterAttribute("ReSharper Bookmark 9")]
[RegisterHighlighterAttribute("ReSharper Bookmark Anonymous")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Inspections.Bookmarks.BookmarksTextControlIntegration : object {
    public static string ATTRIBUTE_ID_PREFIX;
    private static Dictionary`2<NumberedBookmarkId, string> ourNumberedKeys;
    private ISolution mySolution;
    private IDocumentMarkupManager myMarkupManager;
    private INumberedBookmarkManager myNumberedBookmarkManager;
    private IAnonymousBookmarkManager myAnonymousBookmarkManager;
    private ICollectionEvents`1<ITextControl> myTextControls;
    private OneToSetMap`2<ITextControl, RangeMarkerListener`1<NumberedBookmarkId>> myNumberedListeners;
    private OneToSetMap`2<ITextControl, RangeMarkerListener`1<AnonymousBookmarkId>> myAnonymousListeners;
    private Dictionary`2<AnonymousBookmarkId, string> myAnonymousKeys;
    public BookmarksTextControlIntegration(Lifetime lifetime, ISolution solution, ITextControlManager textControlManager, IDocumentMarkupManager markupManager, INumberedBookmarkManager numberedBookmarkManager, IAnonymousBookmarkManager anonymousBookmarkManager);
    private static BookmarksTextControlIntegration();
    private static string GetBookmarkKey(NumberedBookmarkId numberedBookmarkId);
    public static string GetBookmarkAttributeId(NumberedBookmarkId numberedBookmarkId);
    private RangeMarkerListener`1<TKey> CreateRangeMarkerListener(TKey bookmarkId, TManager manager, DocumentCoords coords, ITextControl control, IThreading threading);
    private static void RangeMarkerChanged(TKey bookmarkId, TManager manager, RangeMarkerListener`1<TKey> listener, ITextControl control);
    [CanBeNullAttribute]
private IHighlighter AddHighlighter(string highlighterKey, string attributeId, IHighlighterTooltipProvider tooltipProvider, DocumentCoords coords, ITextControl control, Action clickAction);
    private void AddHighlighter(NumberedBookmarkId bookmarkId, DocumentCoords coords, ITextControl control);
    private void NumberedGutterClicked(NumberedBookmarkId bookmarkId);
    private void AddHighlighter(AnonymousBookmarkId bookmarkId, DocumentCoords coords, ITextControl control);
    private void AnonymousGutterClicked(AnonymousBookmarkId bookmarkId);
    private static IHighlighterTooltipProvider FormatNumberedTooltip(NumberedBookmarkId numberedBookmarkId);
    private void VisualiseIfSuitable(BookmarkPlacement placement, Action`1<ITextControl> addAction);
    private void NumberedBookmarkAdded(AddRemoveBookmarkEventArgs`2<INumberedBookmarkManager, NumberedBookmarkData> args);
    private void RemoveHighlighterAndMarker(ITextControl control, IHighlighter highlighter, OneToSetMap`2<ITextControl, RangeMarkerListener`1<TKey>> listeners, TKey bookmarkId, Func`3<TKey, TKey, bool> comparer);
    private void RemoveHighlighterForBookmark(BookmarkPlacement placement, string highlighterKey, OneToSetMap`2<ITextControl, RangeMarkerListener`1<TKey>> listeners, TKey bookmarkId, Func`3<TKey, TKey, bool> comparer);
    private void NumberedBookmarkRemoved(AddRemoveBookmarkEventArgs`2<INumberedBookmarkManager, NumberedBookmarkData> args);
    private void MoveHighlighter(BookmarkPlacement placement, string highlighterKey, OneToSetMap`2<ITextControl, RangeMarkerListener`1<TKey>> listeners, TKey bookmarkId, Func`3<TKey, TKey, bool> comparer, Action`1<ITextControl> addAction);
    private void NumberedBookmarkMoved(MoveBookmarkEventArgs`2<INumberedBookmarkManager, NumberedBookmarkData> args);
    private void AnonymousBookmarkAdded(AddRemoveBookmarkEventArgs`2<IAnonymousBookmarkManager, AnonymousBookmarkData> args);
    private void AnonymousBookmarkRemoved(AddRemoveBookmarkEventArgs`2<IAnonymousBookmarkManager, AnonymousBookmarkData> args);
    private void AnonymousBookmarkMoved(MoveBookmarkEventArgs`2<IAnonymousBookmarkManager, AnonymousBookmarkData> args);
    private void TextControlOpened(AddRemoveEventArgs`1<ITextControl> args);
    private void TextControlClosed(AddRemoveEventArgs`1<ITextControl> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_0();
}
[ActionAttribute("Bookmarks.ClearAll", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ClearAllBookmarksActionText")]
public class JetBrains.ReSharper.Features.Inspections.Bookmarks.ClearAllBookmarksActionHandler : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("Bookmarks.ClearInDocument", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ClearAllBookmarksInDocumentActionText")]
public class JetBrains.ReSharper.Features.Inspections.Bookmarks.ClearInDocumentAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
internal class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.Bookmark0GutterMark : NumberedBookmarkGutterMark {
}
internal class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.Bookmark1GutterMark : NumberedBookmarkGutterMark {
}
internal class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.Bookmark2GutterMark : NumberedBookmarkGutterMark {
}
internal class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.Bookmark3GutterMark : NumberedBookmarkGutterMark {
}
internal class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.Bookmark4GutterMark : NumberedBookmarkGutterMark {
}
internal class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.Bookmark5GutterMark : NumberedBookmarkGutterMark {
}
internal class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.Bookmark6GutterMark : NumberedBookmarkGutterMark {
}
internal class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.Bookmark7GutterMark : NumberedBookmarkGutterMark {
}
internal class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.Bookmark8GutterMark : NumberedBookmarkGutterMark {
}
internal class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.Bookmark9GutterMark : NumberedBookmarkGutterMark {
}
[ActionAttribute("Bookmarks.GoToBookmark0", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "GoToBookmark0ActionText")]
public class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.GoToSpecificNumberedBookmark0Action : GoToSpecificNumberedBookmarkActionBase {
}
[ActionAttribute("Bookmarks.GoToBookmark1", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "GoToBookmark1ActionText")]
public class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.GoToSpecificNumberedBookmark1Action : GoToSpecificNumberedBookmarkActionBase {
}
[ActionAttribute("Bookmarks.GoToBookmark2", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "GoToBookmark2ActionText")]
public class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.GoToSpecificNumberedBookmark2Action : GoToSpecificNumberedBookmarkActionBase {
}
[ActionAttribute("Bookmarks.GoToBookmark3", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "GoToBookmark3ActionText")]
public class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.GoToSpecificNumberedBookmark3Action : GoToSpecificNumberedBookmarkActionBase {
}
[ActionAttribute("Bookmarks.GoToBookmark4", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "GoToBookmark4ActionText")]
public class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.GoToSpecificNumberedBookmark4Action : GoToSpecificNumberedBookmarkActionBase {
}
[ActionAttribute("Bookmarks.GoToBookmark5", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "GoToBookmark5ActionText")]
public class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.GoToSpecificNumberedBookmark5Action : GoToSpecificNumberedBookmarkActionBase {
}
[ActionAttribute("Bookmarks.GoToBookmark6", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "GoToBookmark6ActionText")]
public class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.GoToSpecificNumberedBookmark6Action : GoToSpecificNumberedBookmarkActionBase {
}
[ActionAttribute("Bookmarks.GoToBookmark7", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "GoToBookmark7ActionText")]
public class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.GoToSpecificNumberedBookmark7Action : GoToSpecificNumberedBookmarkActionBase {
}
[ActionAttribute("Bookmarks.GoToBookmark8", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "GoToBookmark8ActionText")]
public class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.GoToSpecificNumberedBookmark8Action : GoToSpecificNumberedBookmarkActionBase {
}
[ActionAttribute("Bookmarks.GoToBookmark9", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "GoToBookmark9ActionText")]
public class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.GoToSpecificNumberedBookmark9Action : GoToSpecificNumberedBookmarkActionBase {
}
public class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.GoToSpecificNumberedBookmarkActionBase : object {
    private NumberedBookmarkId myNumberedBookmarkId;
    public GoToSpecificNumberedBookmarkActionBase(NumberedBookmarkId numberedBookmarkId);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.Model.AddRemoveNumberedBookmarkEventArgs : NumberedBookmarkEventArgs {
    private AddRemove myAction;
    public AddRemove Action { get; }
    public AddRemoveNumberedBookmarkEventArgs(INumberedBookmarkManager numberedBookmarkManager, NumberedBookmarkData data, AddRemove action);
    public AddRemove get_Action();
}
public interface JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.Model.INumberedBookmarkManager {
    public abstract virtual bool HasAnyBookmark();
    public abstract virtual bool HasBookmark(NumberedBookmarkId numberedBookmarkId);
    public abstract virtual bool HasBookmarks(IProjectFile file);
    public abstract virtual bool IsBookmarkValid(NumberedBookmarkId bookmarkId);
    public abstract virtual void ToggleBookmark(NumberedBookmarkId numberedBookmarkId, IProjectFile file, DocumentCoords coords);
}
public class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.Model.MoveNumberedBookmarkEventArgs : NumberedBookmarkEventArgs {
    private DocumentCoords myOldCoords;
    public DocumentCoords OldCoords { get; }
    public MoveNumberedBookmarkEventArgs(INumberedBookmarkManager manager, NumberedBookmarkData data, DocumentCoords oldCoords);
    public DocumentCoords get_OldCoords();
}
public class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.Model.NumberedBookmarkData : BookmarkDataBase`1<NumberedBookmarkId> {
    public NumberedBookmarkData(ISolution solution, NumberedBookmarkId bookmarkId, BookmarkPlacement placement, IRangeMarker rangeMarker);
}
public abstract class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.Model.NumberedBookmarkEventArgs : object {
    private INumberedBookmarkManager myManager;
    private NumberedBookmarkData myData;
    public INumberedBookmarkManager Manager { get; }
    public NumberedBookmarkData Data { get; }
    protected NumberedBookmarkEventArgs(INumberedBookmarkManager manager, NumberedBookmarkData data);
    public INumberedBookmarkManager get_Manager();
    public NumberedBookmarkData get_Data();
}
public enum JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.Model.NumberedBookmarkId : Enum {
    public int value__;
    public static NumberedBookmarkId Bookmark0;
    public static NumberedBookmarkId Bookmark1;
    public static NumberedBookmarkId Bookmark2;
    public static NumberedBookmarkId Bookmark3;
    public static NumberedBookmarkId Bookmark4;
    public static NumberedBookmarkId Bookmark5;
    public static NumberedBookmarkId Bookmark6;
    public static NumberedBookmarkId Bookmark7;
    public static NumberedBookmarkId Bookmark8;
    public static NumberedBookmarkId Bookmark9;
}
internal abstract class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.NumberedBookmarkGutterMark : BookmarkGutterMark {
    protected NumberedBookmarkGutterMark(NumberedBookmarkId numberedBookmarkId);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.NumberedBookmarkManager : SpecificBookmarkManagerBase`3<INumberedBookmarkManager, NumberedBookmarkId, NumberedBookmarkData> {
    private static string ourOwnerId;
    private static IDictionary`2<NumberedBookmarkId, string> ourBookmarkIds;
    private static IDictionary`2<string, NumberedBookmarkId> ourNumberedBookmarkIds;
    private static NumberedBookmarkManager();
    public NumberedBookmarkManager(Lifetime lifetime, ISolution solution, ProjectModelElementPointerManager elementPointerManager);
    public sealed virtual void ToggleBookmark(NumberedBookmarkId numberedBookmarkId, IProjectFile file, DocumentCoords coords);
    protected virtual string ConvertSpecificKey(NumberedBookmarkId specificKey);
    protected virtual NumberedBookmarkData ConvertData(BookmarkData data);
    private sealed virtual override bool JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.Model.INumberedBookmarkManager.HasAnyBookmark();
    private sealed virtual override bool JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.Model.INumberedBookmarkManager.HasBookmark(NumberedBookmarkId numberedBookmarkId);
    private sealed virtual override bool JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.Model.INumberedBookmarkManager.HasBookmarks(IProjectFile file);
    private sealed virtual override bool JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.Model.INumberedBookmarkManager.IsBookmarkValid(NumberedBookmarkId bookmarkId);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.NumberedBookmarksHelper : object {
    private static Dictionary`2<NumberedBookmarkId, IconId> ourBookmarkIcons;
    private static NumberedBookmarksHelper();
    [ExtensionAttribute]
public static INumberedBookmarkManager GetNumberedBookmarkManager(ISolution solution);
    [ExtensionAttribute]
[NotNullAttribute]
public static IconId GetBookmarkImage(NumberedBookmarkId numberedBookmarkId);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.NumberedBookmarksHelper/<EnumNumberedBookmarkIds>d__3")]
public static IEnumerable`1<NumberedBookmarkId> EnumNumberedBookmarkIds();
    [ExtensionAttribute]
[CanBeNullAttribute]
public static NumberedBookmarkData FindBookmark(INumberedBookmarkManager manager, NumberedBookmarkId bookmarkId);
    [ExtensionAttribute]
public static void AdviseAddBookmark(INumberedBookmarkManager numberedBookmarkManager, Lifetime lifetime, Action`1<AddRemoveBookmarkEventArgs`2<INumberedBookmarkManager, NumberedBookmarkData>> handler);
    [ExtensionAttribute]
public static void AdviseRemoveBookmark(INumberedBookmarkManager numberedBookmarkManager, Lifetime lifetime, Action`1<AddRemoveBookmarkEventArgs`2<INumberedBookmarkManager, NumberedBookmarkData>> handler);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectFile GetProjectFile(NumberedBookmarkData data, ISolution solution);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectFile GetProjectFile(BookmarkEventArgs`2<INumberedBookmarkManager, NumberedBookmarkData> args, ISolution solution);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectFile ToProjectFile(ITextControl control, ISolution solution);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static string GetFilePersistentId(ITextControl control, ISolution solution);
    [ExtensionAttribute]
public static void ToggleBookmark(NumberedBookmarkId numberedBookmarkId, ISolution solution, ITextControl textControl);
    [ExtensionAttribute]
public static void ToggleBookmark(NumberedBookmarkId numberedBookmarkId, IProjectElement modelElement, DocumentCoords coords);
    [ExtensionAttribute]
public static void ToggleBookmark(NumberedBookmarkId numberedBookmarkId, IProjectElement projectElement, ITextControl textControl);
    [ExtensionAttribute]
public static void RemoveBookmark(NumberedBookmarkId numberedBookmarkId, ISolution solution);
    public static OperationResult GoToBookmark(NumberedBookmarkId bookmarkId, ISolution solution, PopupWindowContextSource windowContext);
}
[ActionAttribute("Bookmarks.ToggleBookmark0", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ToggleBookmark0ActionText")]
public class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.ToggleSpecificNumberedBookmark0Action : ToggleSpecificNumberedBookmarkActionBase {
}
[ActionAttribute("Bookmarks.ToggleBookmark1", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ToggleBookmark1ActionText")]
public class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.ToggleSpecificNumberedBookmark1Action : ToggleSpecificNumberedBookmarkActionBase {
}
[ActionAttribute("Bookmarks.ToggleBookmark2", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ToggleBookmark2ActionText")]
public class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.ToggleSpecificNumberedBookmark2Action : ToggleSpecificNumberedBookmarkActionBase {
}
[ActionAttribute("Bookmarks.ToggleBookmark3", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ToggleBookmark3ActionText")]
public class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.ToggleSpecificNumberedBookmark3Action : ToggleSpecificNumberedBookmarkActionBase {
}
[ActionAttribute("Bookmarks.ToggleBookmark4", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ToggleBookmark4ActionText")]
public class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.ToggleSpecificNumberedBookmark4Action : ToggleSpecificNumberedBookmarkActionBase {
}
[ActionAttribute("Bookmarks.ToggleBookmark5", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ToggleBookmark5ActionText")]
public class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.ToggleSpecificNumberedBookmark5Action : ToggleSpecificNumberedBookmarkActionBase {
}
[ActionAttribute("Bookmarks.ToggleBookmark6", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ToggleBookmark6ActionText")]
public class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.ToggleSpecificNumberedBookmark6Action : ToggleSpecificNumberedBookmarkActionBase {
}
[ActionAttribute("Bookmarks.ToggleBookmark7", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ToggleBookmark7ActionText")]
public class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.ToggleSpecificNumberedBookmark7Action : ToggleSpecificNumberedBookmarkActionBase {
}
[ActionAttribute("Bookmarks.ToggleBookmark8", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ToggleBookmark8ActionText")]
public class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.ToggleSpecificNumberedBookmark8Action : ToggleSpecificNumberedBookmarkActionBase {
}
[ActionAttribute("Bookmarks.ToggleBookmark9", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ToggleBookmark9ActionText")]
public class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.ToggleSpecificNumberedBookmark9Action : ToggleSpecificNumberedBookmarkActionBase {
}
public abstract class JetBrains.ReSharper.Features.Inspections.Bookmarks.NumberedBookmarks.ToggleSpecificNumberedBookmarkActionBase : object {
    private NumberedBookmarkId myNumberedBookmarkId;
    protected ToggleSpecificNumberedBookmarkActionBase(NumberedBookmarkId numberedBookmarkId);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionGroupAttribute("CallHierarchyActionBar.ActionBarID", "0", "10")]
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Actions.CallHierarchyActionBar : object {
    public static string ID;
    public CallHierarchyActionBar(TreeModelBrowserStandardActionGroup standart, BrowserShowIgnoredAction showIgnored, Separator sep, FilterOccurrencesMenuAction filter);
}
[ActionAttribute("JetBrains.ReSharper.Features.Inspections.Resources.Strings", "CallHierarchyActionText")]
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Actions.CallHierarchyHideVsAction : HideVsMenuWhenHasReSharperPsiActionBase {
}
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Actions.CallsProviderBase : object {
    protected virtual bool IsAvailable(IDataContext context, ISolution solution, IDeclaredElement& selectedDeclaredElement);
    public IDeclaredElement SelectDeclaredElement(ICollection`1<IDeclaredElement> declaredElements, ICollection`1<IReference> references, ILanguageManager languageManager);
    protected static bool IsLanguageSpecificFunction(ILanguageManager languageManager, IDeclaredElement function);
}
public static class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Actions.CallTrackingPriorities : object {
    public static int Outgoing;
    public static int Incoming;
}
public interface JetBrains.ReSharper.Features.Inspections.CallHierarchy.Actions.IIncomingCallsProvider {
}
[InspectThisProviderAttribute("16")]
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Actions.IncomingCallsProvider : CallsProviderBase {
    private bool Update(IDataContext context, ActionPresentation presentation);
    private void Execute(IDataContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Inspections.CallHierarchy.Actions.IncomingCallsProvider/<CreateWorkflow>d__2")]
public sealed virtual IEnumerable`1<InspectGroupWorkflow> CreateWorkflow(IDataContext dataContext);
}
public interface JetBrains.ReSharper.Features.Inspections.CallHierarchy.Actions.IOutgoingCallsProvider {
}
[InspectThisProviderAttribute("16")]
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Actions.OutgoingCallsProvider : CallsProviderBase {
    public void Execute(IDataContext context, DelegateExecute nextExecute);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Inspections.CallHierarchy.Actions.OutgoingCallsProvider/<CreateWorkflow>d__1")]
public sealed virtual IEnumerable`1<InspectGroupWorkflow> CreateWorkflow(IDataContext dataContext);
}
[ActionAttribute("CallHierarchy.ShowIncomingCalls", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ShowIncomingCallsAction_Title")]
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Actions.ShowIncomingCallsAction : InspectThisActionBase`1<IIncomingCallsProvider> {
    public static string Title;
    public static string ActionId;
    protected RichText Caption { get; }
    private static ShowIncomingCallsAction();
    protected virtual RichText get_Caption();
}
[ActionAttribute("CallHierarchy.ShowOutgoingCalls", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ShowOutgoingCallsAction_Title")]
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Actions.ShowOutgoingCallsAction : InspectThisActionBase`1<IOutgoingCallsProvider> {
    public static string ActionId;
    public static string Title;
    protected RichText Caption { get; }
    private static ShowOutgoingCallsAction();
    protected virtual RichText get_Caption();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.CallHierarchyExplorerViewManager : object {
    private IList`1<CallHierarchyExplorerControllerBase> mySessions;
    private Lifetime myLifetime;
    private ISolution mySolution;
    private DeclaredElementPresenterStyle myStyle;
    private IPsiFiles myPsiFiles;
    private CustomHighlightingManager myCustomHighlightingManger;
    private IShellLocks myLocks;
    private ILazy`1<InspectionToolWindowDescriptor> myInspectionToolWindowDescriptor;
    private ILazy`1<ToolWindowManager> myToolWindowManager;
    private AsyncCommitService myAsyncCommitService;
    private IFeaturePartsContainer myFeaturePartsContainer;
    private ITheming myThemeManager;
    private NavigationManager myNavigationManager;
    private bool myToolWindowsAllowed;
    private IUIApplication myEnvironment;
    public CallHierarchyExplorerViewManager(Lifetime lifetime, ISolution solution, IActionManager actionManager, IPsiFiles psiFiles, CustomHighlightingManager customHighlightingManger, IShellLocks locks, ILazy`1<InspectionToolWindowDescriptor> inspectionToolWindowDescriptor, ILazy`1<ToolWindowManager> toolWindowManager, AsyncCommitService asyncCommitService, IFeaturePartsContainer featurePartsContainer, ITheming themeManager, NavigationManager navigationManager, IUIApplication environment);
    public IEnumerable`1<CallHierarchyExplorerControllerBase> GetSession(CallHierarchyExplorerControllerBase session);
    public static CallHierarchyExplorerViewManager GetInstance(ISolution solution);
    public void ShowOutgoing(DeclaredElementInstance`1<IDeclaredElement> function, string actionHeader, Func`2<CallHierarchyFindResult, bool> filter);
    public CallTreeOutgoingStrategy CreateOutgoingStrategy(CallHierarchyNode rootNode, Func`2<CallHierarchyFindResult, bool> filter);
    public CallHierarchyExplorerControllerBase CreateOutgoingController(string header, ICallGraphTreeStrategy strategy);
    public void ShowIncoming(DeclaredElementInstance`1<IDeclaredElement> function, string actionHeader, Func`2<CallHierarchyFindResult, bool> filter);
    public CallTreeIncomingStrategy CreateIncomingStrategy(CallHierarchyNode rootNode, Func`2<CallHierarchyFindResult, bool> filter);
    public CallHierarchyExplorerControllerBase CreateIncomingController(string header, ICallGraphTreeStrategy strategy);
    protected virtual void RegisterSession(CallHierarchyExplorerControllerBase newSession);
    private static ITreeNode CallHierarchyViewNodesToExpression(IDataContext context);
    [CanBeNullAttribute]
private ICollection`1<IDeclaredElement> CallHierarchyViewNodesToDeclaredElements(IDataContext context);
    [CanBeNullAttribute]
public ICollection`1<IDeclaredElement> NewCallHierarchyViewNodesToDeclaredElements(IDataContext context);
    private static IDeclaredElement GetDeclaredElement(TreeModelNode node);
}
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.CallHierarchyExplorerViewManagerTreeAutomation : AAutomation {
    public CallHierarchyExplorerViewManager Owner;
    public CallHierarchyExplorerControllerBase NewSession;
    public Lifetime Lt;
    public ToolWindowInstance Twi;
    public ISolution Solution;
    public AsyncCommitService AsyncCommitService;
    public ITheming ThemeManager;
    public IUIApplication UiApp;
    public CallHierarchyExplorerViewManagerTreeAutomation(CallHierarchyExplorerViewManager owner, CallHierarchyExplorerControllerBase newSession, Lifetime lt, ToolWindowInstance twi, ISolution solution, AsyncCommitService asyncCommitService, ITheming themeManager, IUIApplication uiApp);
}
public static class JetBrains.ReSharper.Features.Inspections.CallHierarchy.CallHierarchyIcons : object {
    private static IconId ourReadModifierImage;
    private static IconId ourWriteModifierImage;
    private static IconId ourRaiseModifierImage;
    private static IconId ourAddModifierImage;
    private static IconId ourRemoveModifierImage;
    private static Dictionary`2<Pair`2<DeclaredElementType, AccessorKind>, IconId> ourAccessorIconCache;
    public static IconId CalledByArrow { get; }
    public static IconId CalledArrow { get; }
    public static IconId CalledVirtualArrow { get; }
    public static IconId RecursionImage { get; }
    public static IconId ClosureImage { get; }
    public static IconId LINQImage { get; }
    private static CallHierarchyIcons();
    public static IconId get_CalledByArrow();
    public static IconId get_CalledArrow();
    public static IconId get_CalledVirtualArrow();
    public static IconId get_RecursionImage();
    public static IconId get_ClosureImage();
    public static IconId get_LINQImage();
    [CanBeNullAttribute]
public static IconId GetIconForAccessor(IAccessor element);
    private static IconId GetExtensionImage(IAccessor element);
    public static IconId GetInitializerIcon(IDeclaredElement initializer);
}
public abstract class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Controller.CallHierarchyExplorerControllerBase : OccurrenceBrowserDescriptor {
    private DebuggerStepThroughFilter myDebuggerStepThroughFilter;
    private IList`1<IFilter> myFilters;
    private TreeAsyncModel myModel;
    private ICallGraphTreeStrategy myStrategy;
    private SubstitutionFilter mySubstitutionFilter;
    private ComboBox myComboBox;
    private CallHierarchyCustomQualifierPresenter myCurrentPresenter;
    private CustomHighlightingManager myCustomHighlightingManager;
    private IThreading myInvocator;
    private IPsiServices myPsiServices;
    protected IFeaturePartsContainer myFeaturePartsContainer;
    private NavigationManager myNavigationManager;
    private ISimpleSignal myOnUpdateEntirePresentation;
    public ICallGraphTreeStrategy Strategy { get; }
    public bool QuickSearchSupported { get; }
    public string ContextMenuID { get; }
    public TreeModel Model { get; }
    public StructuredPresenter`2<TreeModelNode, IPresentableItem> Presenter { get; }
    public IEnumerable`1<IFilter> Filters { get; }
    public SubstitutionFilter SubstitutionFilter { get; }
    public DebuggerStepThroughFilter DebuggerStepThroughFilter { get; }
    public ISimpleSignal OnUpdateEntirePresentation { get; }
    public CallHierarchyCustomQualifierPresenter CurrentPresenter { get; public set; }
    protected CallHierarchyExplorerControllerBase(Lifetime callerLifetime, ISolution solution, ICallGraphTreeStrategy strategy, string title, CustomHighlightingManager customHighlightingManager, IThreading invocator, IPsiServices psiServices, IFeaturePartsContainer featurePartsContainer, NavigationManager navigationManager);
    public ICallGraphTreeStrategy get_Strategy();
    public virtual bool AcceptOccurrence(object value);
    public virtual bool get_QuickSearchSupported();
    public virtual string get_ContextMenuID();
    public virtual TreeModel get_Model();
    public virtual StructuredPresenter`2<TreeModelNode, IPresentableItem> get_Presenter();
    public IEnumerable`1<IFilter> get_Filters();
    public SubstitutionFilter get_SubstitutionFilter();
    public DebuggerStepThroughFilter get_DebuggerStepThroughFilter();
    [CanBeNullAttribute]
protected abstract virtual NavigationData GetNavigationData(TreeModelNode node);
    public virtual bool ExpandNodeInitially(TreeModelNode modelNode);
    public void AddFilter(IFilter filter);
    private void FilterChangedFired(object sender, EventArgs e);
    public void RemoveFilter(IFilter filter);
    public virtual bool Navigate(TreeModelNode node, PopupWindowContextSource windowContext, bool transferFocus, TabOptions options);
    private void HighlightTargetUsages(IDocument document, ICollection`1<ITreeNode> targetUsages);
    public void Refresh();
    public virtual void PreviewUpdate(IPreviewControl previewControl, TreeModelNode modelNode);
    public virtual bool CustomizeActionBar(IActionBar bar);
    private void OnGroupChangeCommitted(object sender, EventArgs e);
    public ISimpleSignal get_OnUpdateEntirePresentation();
    public CallHierarchyCustomQualifierPresenter get_CurrentPresenter();
    public void set_CurrentPresenter(CallHierarchyCustomQualifierPresenter value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__13_0();
    [CompilerGeneratedAttribute]
private void <CustomizeActionBar>b__41_0();
    [CompilerGeneratedAttribute]
private void <CustomizeActionBar>b__41_1();
    [CompilerGeneratedAttribute]
private void <CustomizeActionBar>b__41_2();
    [CompilerGeneratedAttribute]
private void <CustomizeActionBar>b__41_3();
    [CompilerGeneratedAttribute]
private void <OnGroupChangeCommitted>b__42_0();
}
internal class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Controller.CallHierarchyIncomingExplorerController : CallHierarchyExplorerControllerBase {
    public CallHierarchyIncomingExplorerController(Lifetime callerLifetime, ISolution solution, ICallGraphTreeStrategy strategy, string header, CustomHighlightingManager customHighlightingManger, IThreading invocator, IPsiServices psiServices, IFeaturePartsContainer featurePartsContainer, NavigationManager navigationManager);
    protected virtual NavigationData GetNavigationData(TreeModelNode node);
    private NavigationData GetNavigationDataFromDataValue(object dataValue, TreeModelNode node);
    [CanBeNullAttribute]
private static IDeclaredElement GetDeclaredElementForParent(CallHierarchyNode node);
}
internal class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Controller.CallHierarchyOutgoingExplorerController : CallHierarchyExplorerControllerBase {
    public CallHierarchyOutgoingExplorerController(Lifetime callerLifetime, ISolution solution, ICallGraphTreeStrategy strategy, string header, CustomHighlightingManager customHighlightingManger, IThreading invocator, IPsiServices psiServices, IFeaturePartsContainer featurePartsContainer, NavigationManager navigationManager);
    protected virtual NavigationData GetNavigationData(TreeModelNode modelNode);
    private static NavigationData GetNavigationDataFromDataValue(object dataValue);
}
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Controller.CallHierarchyTreeModelAdapter : object {
    private CallHierarchyExplorerControllerBase myController;
    public object RootNode { get; }
    public CallHierarchyTreeModelAdapter(CallHierarchyExplorerControllerBase controller);
    public sealed virtual object get_RootNode();
    public sealed virtual ICollection GetOutgoing(object node);
    public sealed virtual bool CanHaveChildren(object node);
    public sealed virtual bool IsOutgoingBuilt(object node);
    private void BuildOutgoing(object parentNode, IProgressIndicator progressIndicator);
    public sealed virtual Task BuildOutgoingAsync(object parentNode, IProgressIndicator progressIndicator, bool runSynchronous);
    public sealed virtual bool SemanticCompare(object firstNode, object secondNode);
    public sealed virtual bool RecursionPreventionCompare(object firstNode, object secondNode);
    [CompilerGeneratedAttribute]
private bool <GetOutgoing>b__4_0(CallHierarchyNode n);
}
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Controller.Filters.DebuggerStepThroughFilter : object {
    private bool myActive;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> FilterChanged;
    public bool Active { get; public set; }
    public bool get_Active();
    public void set_Active(bool value);
    public sealed virtual bool Accept(CallHierarchyNode node);
    [CompilerGeneratedAttribute]
public sealed virtual void add_FilterChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_FilterChanged(EventHandler`1<EventArgs> value);
    private void OnFilterChanged();
}
public interface JetBrains.ReSharper.Features.Inspections.CallHierarchy.Controller.Filters.IFilter {
    public abstract virtual bool Accept(CallHierarchyNode node);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FilterChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FilterChanged(EventHandler`1<EventArgs> value);
}
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Controller.Filters.SubstitutionFilter : object {
    private bool myActive;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> FilterChanged;
    public bool Active { get; public set; }
    public bool get_Active();
    public void set_Active(bool value);
    public sealed virtual bool Accept(CallHierarchyNode node);
    [CompilerGeneratedAttribute]
public sealed virtual void add_FilterChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_FilterChanged(EventHandler`1<EventArgs> value);
    private void OnFilterChanged();
}
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Model.CallHierarchyTree : object {
    private CallHierarchyNode myRootNode;
    public CallHierarchyNode RootNode { get; }
    public CallHierarchyTree(CallHierarchyNode rootNode);
    public sealed virtual CallHierarchyNode get_RootNode();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Model.CallHierarchyTreeExtension : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Inspections.CallHierarchy.Model.CallHierarchyTreeExtension/<AllNodes>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<CallHierarchyNode> AllNodes(ICallHierarchyTree tree);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Inspections.CallHierarchy.Model.CallHierarchyTreeExtension/<AllSiblings>d__1")]
[ExtensionAttribute]
public static IEnumerable`1<CallHierarchyNode> AllSiblings(CallHierarchyNode node);
}
public interface JetBrains.ReSharper.Features.Inspections.CallHierarchy.Model.ICallHierarchyTree {
    [NotNullAttribute]
public CallHierarchyNode RootNode { get; }
    public abstract virtual CallHierarchyNode get_RootNode();
}
[CannotApplyEqualityOperatorAttribute]
public abstract class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Model.Nodes.CallHierarchyNode : object {
    private CallHierarchyNode myParent;
    private IList`1<CallHierarchyNode> myChildren;
    private ICollection`1<ITreeNodePointer`1<ITreeNode>> myTreeNodePointers;
    private PresentableItem myCachedPresentation;
    private long myPresentationStamp;
    private IPsiSourceFile[] myProjectFiles;
    [CompilerGeneratedAttribute]
private bool <HasCache>k__BackingField;
    public CallHierarchyNode Parent { get; }
    public int InvocationCount { get; }
    public IEnumerable`1<CallHierarchyNode> Children { get; }
    private bool HasCache { get; private set; }
    protected CallHierarchyNode(CallHierarchyNode parent, IEnumerable`1<ITreeNode> occurrences);
    public CallHierarchyNode get_Parent();
    public sealed virtual int get_InvocationCount();
    public sealed virtual ICollection`1<ITreeNode> GetInvocations();
    public IEnumerable`1<CallHierarchyNode> get_Children();
    [CompilerGeneratedAttribute]
private bool get_HasCache();
    [CompilerGeneratedAttribute]
private void set_HasCache(bool value);
    public sealed virtual void ResetCache();
    public abstract virtual bool SemanticCompare(CallHierarchyNode other);
    public abstract virtual bool RecursionPreventionCompare(CallHierarchyNode other);
    public abstract virtual void Accept(ICallTreeNodeVisitor`1<TData> visitor, TData data);
    public void Present(CallHierarchyNodePresenter presenter, TreeModelNode structureElement, IPresentableItem item, PresentationState state);
    private void ReHash();
    private void AssertAccess();
    [CanBeNullAttribute]
protected abstract virtual ISolution GetSolution();
    [NotNullAttribute]
protected abstract virtual IPsiSourceFile[] GetProjectFiles();
    protected abstract virtual PresentableItem GetPresentation(CallHierarchyNodePresenter presenter, TreeModelNode structureElement, PresentationState state);
    private bool IsCacheUpToDate();
    private void PresentFromCache(IPresentableItem item, bool valid);
    private bool UpdateCache(CallHierarchyNodePresenter presenter, TreeModelNode element, PresentationState state);
}
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Model.Nodes.CallHierarchyNodeFilterData : object {
    private bool mySubstitutionIsOk;
    public bool SubstitutionIsOk { get; }
    public CallHierarchyNodeFilterData(bool substitutionIsOk);
    public bool get_SubstitutionIsOk();
    public bool Equals(CallHierarchyNodeFilterData other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Model.Nodes.CallTreeNodeVisitorBase`1 : object {
    public virtual void VisitIncomingTypeMemberNode(CallHierarchyIncomingDeclaredElementNode node, TData data);
    public virtual void VisitIncomingInitializerOwnerNode(CallHierarchyIncomingInitializerOwnerNode node, TData data);
    public virtual void VisitOutgoingTypeMemberNode(CallHierarchyOutgoingDeclaredElementNode node, TData data);
    public virtual void VisitOutgoingImplementorMemberNode(CallHierarchyOutgoingImplementorMemberNode node, TData data);
    public virtual void VisitOutgoingOverridableMemberNode(CallHierarchyOutgoingOverridableMemberNode node, TData data);
    public virtual void VisitOutgoingUnresolvedNode(CallHierarchyOutgoingUnresolvedNode node, TData data);
    public virtual void VisitOutgoingExpressionNode(CallHierarchyOutgoingExpressionNode node, TData data);
    public virtual void VisitOutgoingClosureNode(CallHierarchyOutgoingClosureNode node, TData data);
    public virtual void VisitOutgoingQueryNode(CallHierarchyOutgoingQueryNode node, TData data);
    public virtual void VisitOutgoingTypeParameterConstructorNode(CallHierarchyOutgoingTypeParameterConstructorNode node, TData data);
    public virtual void VisitOutgoingInitializerNode(CallHierarchyOutgoingInitializerNode node, TData data);
    public virtual void VisitOutgoingImplicitConstructorNode(CallHierarchyOutgoingImplicitConstructorNode node, TData data);
    public virtual void VisitIncomingEventSubscriptionNode(CallHierarchyIncomingEventSubscriptionNode node, TData data);
}
public interface JetBrains.ReSharper.Features.Inspections.CallHierarchy.Model.Nodes.ICallTreeNodeVisitor`1 {
    public abstract virtual void VisitIncomingTypeMemberNode(CallHierarchyIncomingDeclaredElementNode node, TData data);
    public abstract virtual void VisitIncomingInitializerOwnerNode(CallHierarchyIncomingInitializerOwnerNode node, TData data);
    public abstract virtual void VisitIncomingEventSubscriptionNode(CallHierarchyIncomingEventSubscriptionNode node, TData data);
    public abstract virtual void VisitOutgoingTypeMemberNode(CallHierarchyOutgoingDeclaredElementNode node, TData data);
    public abstract virtual void VisitOutgoingImplementorMemberNode(CallHierarchyOutgoingImplementorMemberNode node, TData data);
    public abstract virtual void VisitOutgoingOverridableMemberNode(CallHierarchyOutgoingOverridableMemberNode node, TData data);
    public abstract virtual void VisitOutgoingUnresolvedNode(CallHierarchyOutgoingUnresolvedNode node, TData data);
    public abstract virtual void VisitOutgoingExpressionNode(CallHierarchyOutgoingExpressionNode node, TData data);
    public abstract virtual void VisitOutgoingClosureNode(CallHierarchyOutgoingClosureNode node, TData data);
    public abstract virtual void VisitOutgoingQueryNode(CallHierarchyOutgoingQueryNode node, TData data);
    public abstract virtual void VisitOutgoingTypeParameterConstructorNode(CallHierarchyOutgoingTypeParameterConstructorNode node, TData data);
    public abstract virtual void VisitOutgoingInitializerNode(CallHierarchyOutgoingInitializerNode node, TData data);
    public abstract virtual void VisitOutgoingImplicitConstructorNode(CallHierarchyOutgoingImplicitConstructorNode node, TData data);
}
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Model.Nodes.Incoming.CallHierarchyIncomingDeclaredElementNode : CallHierarchyNode {
    private static DeclaredElementPresenterStyle ourPresentationKind;
    private IElementInstancePointer`1<IDeclaredElement> myElementInstancePointer;
    private int myHashCode;
    private CallHierarchyNodeFilterData myFilter;
    [CompilerGeneratedAttribute]
private OccurrenceKind <Kind>k__BackingField;
    public CallHierarchyNodeFilterData Filter { get; }
    public IElementInstancePointer`1<IDeclaredElement> ElementInstancePointer { get; }
    public OccurrenceKind Kind { get; }
    public CallHierarchyIncomingDeclaredElementNode(DeclaredElementInstance`1<IDeclaredElement> member);
    public CallHierarchyIncomingDeclaredElementNode(DeclaredElementInstance`1<IDeclaredElement> member, CallHierarchyNode parent);
    public CallHierarchyIncomingDeclaredElementNode(CallHierarchyNode parent, CallHierarchyFindResultIncomingDeclaredElement member, IEnumerable`1<ITreeNode> occurrences);
    private CallHierarchyIncomingDeclaredElementNode(DeclaredElementInstance`1<IDeclaredElement> member, CallHierarchyNode parent, IEnumerable`1<ITreeNode> occurrences);
    private static CallHierarchyIncomingDeclaredElementNode();
    public CallHierarchyNodeFilterData get_Filter();
    public sealed virtual IElementInstancePointer`1<IDeclaredElement> get_ElementInstancePointer();
    [CompilerGeneratedAttribute]
public sealed virtual OccurrenceKind get_Kind();
    public virtual void Accept(ICallTreeNodeVisitor`1<TData> visitor, TData data);
    public virtual bool SemanticCompare(CallHierarchyNode other);
    public virtual bool RecursionPreventionCompare(CallHierarchyNode other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual ISolution GetSolution();
    protected virtual IPsiSourceFile[] GetProjectFiles();
    protected virtual PresentableItem GetPresentation(CallHierarchyNodePresenter presenter, TreeModelNode structureElement, PresentationState state);
    public virtual string ToString();
}
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Model.Nodes.Incoming.CallHierarchyIncomingEventSubscriptionNode : CallHierarchyNode {
    private static DeclaredElementPresenterStyle ourPresentationKind;
    private IElementInstancePointer`1<IEvent> myEventInstancePointer;
    private int myHashCode;
    private CallHierarchyNodeFilterData myFilter;
    private IDeclaredElementPointer`1<IClrDeclaredElement> myContainingElement;
    private static RichText ourSubscribeToText;
    private static RichText ourInText;
    public CallHierarchyNodeFilterData Filter { get; }
    public IElementInstancePointer`1<IEvent> EventInstancePointer { get; }
    public IDeclaredElementPointer`1<IClrDeclaredElement> ContainingElement { get; }
    private static CallHierarchyIncomingEventSubscriptionNode();
    public CallHierarchyIncomingEventSubscriptionNode(CallHierarchyNode parent, CallHierarchyFindResultIncomingEventSubscription event, IEnumerable`1<ITreeNode> references);
    public CallHierarchyNodeFilterData get_Filter();
    public IElementInstancePointer`1<IEvent> get_EventInstancePointer();
    public IDeclaredElementPointer`1<IClrDeclaredElement> get_ContainingElement();
    public virtual void Accept(ICallTreeNodeVisitor`1<TData> visitor, TData data);
    public virtual bool SemanticCompare(CallHierarchyNode other);
    public virtual bool RecursionPreventionCompare(CallHierarchyNode other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual ISolution GetSolution();
    protected virtual IPsiSourceFile[] GetProjectFiles();
    protected virtual PresentableItem GetPresentation(CallHierarchyNodePresenter presenter, TreeModelNode structureElement, PresentationState state);
    public virtual string ToString();
}
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Model.Nodes.Incoming.CallHierarchyIncomingInitializerOwnerNode : CallHierarchyNode {
    private int myHashCode;
    [CompilerGeneratedAttribute]
private ITreeNodePointer`1<IInitializerOwnerDeclaration> <InitializerOwnerDeclarationPointer>k__BackingField;
    public ITreeNodePointer`1<IInitializerOwnerDeclaration> InitializerOwnerDeclarationPointer { get; }
    public CallHierarchyIncomingInitializerOwnerNode(CallHierarchyNode parent, CallHierarchyFindResultIncomingInitializerOwner owner, IEnumerable`1<ITreeNode> occurrences);
    [CompilerGeneratedAttribute]
public ITreeNodePointer`1<IInitializerOwnerDeclaration> get_InitializerOwnerDeclarationPointer();
    public virtual void Accept(ICallTreeNodeVisitor`1<TData> visitor, TData data);
    public virtual bool SemanticCompare(CallHierarchyNode other);
    public virtual bool RecursionPreventionCompare(CallHierarchyNode other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual ISolution GetSolution();
    protected virtual IPsiSourceFile[] GetProjectFiles();
    protected virtual PresentableItem GetPresentation(CallHierarchyNodePresenter presenter, TreeModelNode structureElement, PresentationState state);
    public virtual string ToString();
}
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Model.Nodes.Outgoing.CallHierarchyOutgoingClosureNode : CallHierarchyOutgoingExpressionNode {
    public CallHierarchyOutgoingClosureNode(CallHierarchyNode parent, IExpression expression);
    public virtual void Accept(ICallTreeNodeVisitor`1<TData> visitor, TData data);
    protected virtual PresentableItem GetPresentation(CallHierarchyNodePresenter presenter, TreeModelNode structureElement, PresentationState state);
    public virtual string ToString();
}
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Model.Nodes.Outgoing.CallHierarchyOutgoingDeclaredElementNode : CallHierarchyNode {
    internal static DeclaredElementPresenterStyle ourPresentationKind;
    private IElementInstancePointer`1<IDeclaredElement> myElementInstancePointer;
    private int myHashCode;
    private CallHierarchyNodeFilterData myFilter;
    [CompilerGeneratedAttribute]
private OccurrenceKind <Kind>k__BackingField;
    public CallHierarchyNodeFilterData Filter { get; }
    public IElementInstancePointer`1<IDeclaredElement> ElementInstancePointer { get; }
    public OccurrenceKind Kind { get; }
    public CallHierarchyOutgoingDeclaredElementNode(DeclaredElementInstance`1<IDeclaredElement> member);
    public CallHierarchyOutgoingDeclaredElementNode(CallHierarchyNode parent, CallHierarchyFindResultOutgoingDeclaredElement member, IEnumerable`1<ITreeNode> occurrences);
    private CallHierarchyOutgoingDeclaredElementNode(DeclaredElementInstance`1<IDeclaredElement> member, CallHierarchyNode parent, IEnumerable`1<ITreeNode> occurrences);
    private static CallHierarchyOutgoingDeclaredElementNode();
    public CallHierarchyNodeFilterData get_Filter();
    public sealed virtual IElementInstancePointer`1<IDeclaredElement> get_ElementInstancePointer();
    [CompilerGeneratedAttribute]
public sealed virtual OccurrenceKind get_Kind();
    public virtual void Accept(ICallTreeNodeVisitor`1<TData> visitor, TData data);
    protected virtual ISolution GetSolution();
    protected virtual IPsiSourceFile[] GetProjectFiles();
    protected virtual PresentableItem GetPresentation(CallHierarchyNodePresenter presenter, TreeModelNode structureElement, PresentationState state);
    public virtual bool SemanticCompare(CallHierarchyNode other);
    public virtual bool RecursionPreventionCompare(CallHierarchyNode other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public abstract class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Model.Nodes.Outgoing.CallHierarchyOutgoingExpressionNode : CallHierarchyNode {
    private static IExpressionPresentationProvider`1<RichText> ourPresentationProvider;
    private int myHashCode;
    [CompilerGeneratedAttribute]
private ITreeNodePointer`1<IExpression> <ExpressionPointer>k__BackingField;
    public ITreeNodePointer`1<IExpression> ExpressionPointer { get; }
    protected CallHierarchyOutgoingExpressionNode(CallHierarchyNode parent, IExpression expression);
    private static CallHierarchyOutgoingExpressionNode();
    [CompilerGeneratedAttribute]
public ITreeNodePointer`1<IExpression> get_ExpressionPointer();
    public virtual void Accept(ICallTreeNodeVisitor`1<TData> visitor, TData data);
    protected virtual ISolution GetSolution();
    protected virtual IPsiSourceFile[] GetProjectFiles();
    [CanBeNullAttribute]
protected virtual PresentableItem GetPresentation(CallHierarchyNodePresenter presenter, TreeModelNode structureElement, PresentationState state);
    public virtual bool SemanticCompare(CallHierarchyNode other);
    public virtual bool RecursionPreventionCompare(CallHierarchyNode other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Model.Nodes.Outgoing.CallHierarchyOutgoingImplementorMemberNode : CallHierarchyNode {
    private static DeclaredElementPresenterStyle ourPresentationKind;
    private IElementInstancePointer`1<IDeclaredElement> myElementInstancePointer;
    private int myHashCode;
    private bool myIsQuasiImplementaion;
    private CallHierarchyNodeFilterData myFilter;
    [CompilerGeneratedAttribute]
private OccurrenceKind <Kind>k__BackingField;
    public CallHierarchyNodeFilterData Filter { get; }
    public IElementInstancePointer`1<IDeclaredElement> ElementInstancePointer { get; }
    public OccurrenceKind Kind { get; }
    public CallHierarchyOutgoingImplementorMemberNode(CallHierarchyNode parent, CallHierarchyFindResultOutgoingImplementorMember member, IEnumerable`1<ITreeNode> occurrences);
    private static CallHierarchyOutgoingImplementorMemberNode();
    public CallHierarchyNodeFilterData get_Filter();
    public sealed virtual IElementInstancePointer`1<IDeclaredElement> get_ElementInstancePointer();
    [CompilerGeneratedAttribute]
public sealed virtual OccurrenceKind get_Kind();
    public virtual void Accept(ICallTreeNodeVisitor`1<TData> visitor, TData data);
    protected virtual ISolution GetSolution();
    protected virtual IPsiSourceFile[] GetProjectFiles();
    protected virtual PresentableItem GetPresentation(CallHierarchyNodePresenter presenter, TreeModelNode structureElement, PresentationState state);
    public virtual bool SemanticCompare(CallHierarchyNode other);
    public virtual bool RecursionPreventionCompare(CallHierarchyNode other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Model.Nodes.Outgoing.CallHierarchyOutgoingImplicitConstructorNode : CallHierarchyNode {
    private IElementInstancePointer`1<IDeclaredElement> myElementInstancePointer;
    private int myHashCode;
    private CallHierarchyNodeFilterData myFilter;
    [CompilerGeneratedAttribute]
private OccurrenceKind <Kind>k__BackingField;
    public CallHierarchyNodeFilterData Filter { get; }
    public IElementInstancePointer`1<IDeclaredElement> ElementInstancePointer { get; }
    public OccurrenceKind Kind { get; }
    public CallHierarchyOutgoingImplicitConstructorNode(CallHierarchyNode parent, CallHierarchyFindResultOutgoingImplicitConstructor member, IEnumerable`1<ITreeNode> occurrences);
    public CallHierarchyNodeFilterData get_Filter();
    public sealed virtual IElementInstancePointer`1<IDeclaredElement> get_ElementInstancePointer();
    [CompilerGeneratedAttribute]
public sealed virtual OccurrenceKind get_Kind();
    protected virtual ISolution GetSolution();
    protected virtual IPsiSourceFile[] GetProjectFiles();
    protected virtual PresentableItem GetPresentation(CallHierarchyNodePresenter presenter, TreeModelNode structureElement, PresentationState state);
    public virtual string ToString();
    public virtual void Accept(ICallTreeNodeVisitor`1<TData> visitor, TData data);
    public virtual bool SemanticCompare(CallHierarchyNode other);
    public virtual bool RecursionPreventionCompare(CallHierarchyNode other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Model.Nodes.Outgoing.CallHierarchyOutgoingInitializerNode : CallHierarchyOutgoingExpressionNode {
    public CallHierarchyOutgoingInitializerNode(CallHierarchyNode parent, IExpression expression);
    public virtual void Accept(ICallTreeNodeVisitor`1<TData> visitor, TData data);
    protected virtual PresentableItem GetPresentation(CallHierarchyNodePresenter presenter, TreeModelNode structureElement, PresentationState state);
    public virtual string ToString();
}
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Model.Nodes.Outgoing.CallHierarchyOutgoingOverridableMemberNode : CallHierarchyNode {
    private static DeclaredElementPresenterStyle ourPresentationKind;
    private IElementInstancePointer`1<IDeclaredElement> myElementInstancePointer;
    private int myEstimatedInheritors;
    private int myHashCode;
    private CallHierarchyNodeFilterData myFilter;
    [CompilerGeneratedAttribute]
private OccurrenceKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private PsiLanguageType <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeConversionRule <TypeConversionRule>k__BackingField;
    public IElementInstancePointer`1<IDeclaredElement> ElementInstancePointer { get; }
    public OccurrenceKind Kind { get; }
    public CallHierarchyNodeFilterData Filter { get; }
    public int EstimatedInheritors { get; }
    public PsiLanguageType Language { get; }
    public ITypeConversionRule TypeConversionRule { get; }
    public CallHierarchyOutgoingOverridableMemberNode(DeclaredElementInstance`1<IDeclaredElement> member);
    public CallHierarchyOutgoingOverridableMemberNode(CallHierarchyNode parent, CallHierarchyFindResultOutgoingOverridableMember member, IEnumerable`1<ITreeNode> occurrences);
    public CallHierarchyOutgoingOverridableMemberNode(DeclaredElementInstance`1<IDeclaredElement> member, CallHierarchyNode parent, IEnumerable`1<ITreeNode> occurrences);
    private static CallHierarchyOutgoingOverridableMemberNode();
    public sealed virtual IElementInstancePointer`1<IDeclaredElement> get_ElementInstancePointer();
    [CompilerGeneratedAttribute]
public sealed virtual OccurrenceKind get_Kind();
    public CallHierarchyNodeFilterData get_Filter();
    public int get_EstimatedInheritors();
    [CompilerGeneratedAttribute]
public PsiLanguageType get_Language();
    [CompilerGeneratedAttribute]
public ITypeConversionRule get_TypeConversionRule();
    public virtual void Accept(ICallTreeNodeVisitor`1<TData> visitor, TData data);
    protected virtual ISolution GetSolution();
    protected virtual IPsiSourceFile[] GetProjectFiles();
    protected virtual PresentableItem GetPresentation(CallHierarchyNodePresenter presenter, TreeModelNode structureElement, PresentationState state);
    public virtual bool Equals(object obj);
    public virtual bool SemanticCompare(CallHierarchyNode other);
    public virtual bool RecursionPreventionCompare(CallHierarchyNode other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Model.Nodes.Outgoing.CallHierarchyOutgoingQueryNode : CallHierarchyOutgoingExpressionNode {
    public CallHierarchyOutgoingQueryNode(CallHierarchyNode parent, IExpression expression);
    public virtual void Accept(ICallTreeNodeVisitor`1<TData> visitor, TData data);
    protected virtual PresentableItem GetPresentation(CallHierarchyNodePresenter presenter, TreeModelNode structureElement, PresentationState state);
    public virtual string ToString();
}
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Model.Nodes.Outgoing.CallHierarchyOutgoingTypeParameterConstructorNode : CallHierarchyNode {
    private int myEstimatedInheritors;
    private int myHashCode;
    private IDeclaredElementPointer`1<ITypeParameter> myTypeParameterPointer;
    public IDeclaredElementPointer`1<ITypeParameter> TypeParameterPointer { get; }
    public int EstimatedInheritors { get; }
    public CallHierarchyOutgoingTypeParameterConstructorNode(CallHierarchyNode parent, CallHierarchyFindResultOutgoingTypeParameterConstructor constructor, IEnumerable`1<ITreeNode> occurrences);
    public IDeclaredElementPointer`1<ITypeParameter> get_TypeParameterPointer();
    public int get_EstimatedInheritors();
    public virtual void Accept(ICallTreeNodeVisitor`1<TData> visitor, TData data);
    protected virtual ISolution GetSolution();
    protected virtual IPsiSourceFile[] GetProjectFiles();
    protected virtual PresentableItem GetPresentation(CallHierarchyNodePresenter presenter, TreeModelNode structureElement, PresentationState state);
    public virtual bool Equals(object obj);
    public virtual bool SemanticCompare(CallHierarchyNode other);
    public virtual bool RecursionPreventionCompare(CallHierarchyNode other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Model.Nodes.Outgoing.CallHierarchyOutgoingUnresolvedNode : CallHierarchyNode {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeNodePointer`1<ITreeNode> <ReferencePointer>k__BackingField;
    [NotNullAttribute]
public string Name { get; }
    public ITreeNodePointer`1<ITreeNode> ReferencePointer { get; }
    public CallHierarchyOutgoingUnresolvedNode(CallHierarchyNode parent, ITreeNode unresolvedReferenceElement);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public ITreeNodePointer`1<ITreeNode> get_ReferencePointer();
    protected virtual ISolution GetSolution();
    protected virtual IPsiSourceFile[] GetProjectFiles();
    protected virtual PresentableItem GetPresentation(CallHierarchyNodePresenter presenter, TreeModelNode structureElement, PresentationState state);
    public virtual void Accept(ICallTreeNodeVisitor`1<TData> visitor, TData data);
    public virtual bool SemanticCompare(CallHierarchyNode other);
    public virtual bool RecursionPreventionCompare(CallHierarchyNode other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.New.CallHierarchyDelegateDescriptor : DelegateDescriptorBase {
    private Lifetime myLifetime;
    private CallHierarchyExplorerControllerBase myController;
    private ComboBox myComboBox;
    private IShellLocks myLocks;
    public static CallHierarchyCustomQualifierPresenter[] CallHierarchyCustomQualifierPresenters;
    public CallHierarchyDelegateDescriptor(Lifetime lifetime, CallHierarchyExplorerControllerBase controller, IShellLocks locks);
    private static CallHierarchyDelegateDescriptor();
    public virtual bool CustomizeActionBar(IActionBar bar);
    private void OnGroupChangeCommitted(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private void <CustomizeActionBar>b__6_0();
    [CompilerGeneratedAttribute]
private void <CustomizeActionBar>b__6_1();
    [CompilerGeneratedAttribute]
private void <CustomizeActionBar>b__6_2();
    [CompilerGeneratedAttribute]
private void <CustomizeActionBar>b__6_3();
    [CompilerGeneratedAttribute]
private void <OnGroupChangeCommitted>b__7_0();
}
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.New.CallHierarchyTreeDescriptor : HierarchyTreeDescriptor {
    public string ContextMenuID { get; }
    public string ActionBarID { get; }
    public CallHierarchyTreeDescriptor(Lifetime lifetime, ISolution solution, ITreeModelAdapter treeModelAdapter, StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, IDelegateDescriptor callHierarchy);
    public virtual string get_ContextMenuID();
    public virtual string get_ActionBarID();
    protected virtual AsyncLiveTreeModel CreateAsyncLiveTreeModel();
    protected virtual void UpdateNodeValue(AsyncLiveTreeModel asyncLiveTreeModel, ITreeModelNode node);
}
internal class JetBrains.ReSharper.Features.Inspections.CallHierarchy.New.HierarchyAsyncLiveTreeModel : AsyncLiveTreeModel {
    private int myNextNodeId;
    [CompilerGeneratedAttribute]
private ISignal`1<HierarchyNodeWithAsyncChildren> <NewMeaningfulNode>k__BackingField;
    public ISignal`1<HierarchyNodeWithAsyncChildren> NewMeaningfulNode { get; }
    public HierarchyAsyncLiveTreeModel(Lifetime lifetime, ReadWriteLock rwLock, StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, ITreeModelAdapter treeModelAdapter, IShellLocks locks, IFreeThreadedThrottlingGroupingEventFactory freeThreadedThrottlingGroupingEventFactory);
    [CompilerGeneratedAttribute]
public ISignal`1<HierarchyNodeWithAsyncChildren> get_NewMeaningfulNode();
    protected virtual ITreeModelNode CreateMeaningfullNode(RichTextLiveTreeModel model, WrappedNodeValue val, IFreeThreadedThrottlingGroupingEvent throttlingGroupingEvent);
}
internal class JetBrains.ReSharper.Features.Inspections.CallHierarchy.New.HierarchyLiveTreeModelComparer : object {
    public IEnumerable`1<IDependencyDefinition> Dependencies { get; }
    public sealed virtual int Compare(ITreeModelNode x, ITreeModelNode y);
    public sealed virtual IEnumerable`1<IDependencyDefinition> get_Dependencies();
}
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.New.HierarchyNodeId : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Number>k__BackingField;
    public string Id { get; }
    public int Number { get; }
    public HierarchyNodeId(string id, int number);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public int get_Number();
}
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.New.HierarchyNodeWithAsyncChildren : NodeWithAsyncChildren {
    [CompilerGeneratedAttribute]
private HierarchyNodeId <Id>k__BackingField;
    public HierarchyNodeId Id { get; }
    public HierarchyNodeWithAsyncChildren(RichTextLiveTreeModel model, WrappedNodeValue dataItem, HierarchyNodeId id, IFreeThreadedThrottlingGroupingEvent throttlingGroupingEvent);
    [CompilerGeneratedAttribute]
public HierarchyNodeId get_Id();
}
public abstract class JetBrains.ReSharper.Features.Inspections.CallHierarchy.New.HierarchyTreeDescriptor : AsyncLiveTreeModelBrowserDescriptor {
    [CompilerGeneratedAttribute]
private IUserDataHolder <UserDataHolder>k__BackingField;
    private IDelegateDescriptor myDelegateDescriptor;
    private NavigationSettings myNavigationSettings;
    private OccurrenceFilters myFilters;
    [CompilerGeneratedAttribute]
private IIgnoredNodes <IgnoredNodes>k__BackingField;
    public IUserDataHolder UserDataHolder { get; }
    public IOccurrenceFilters Filters { get; }
    public IIgnoredNodes IgnoredNodes { get; }
    public HierarchyTreeDescriptor(Lifetime lifetime, ISolution solution, ITreeModelAdapter treeModelAdapter, StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, IDelegateDescriptor delegateDescriptor);
    [CompilerGeneratedAttribute]
public sealed virtual IUserDataHolder get_UserDataHolder();
    public sealed virtual IOccurrenceFilters get_Filters();
    [CompilerGeneratedAttribute]
public sealed virtual IIgnoredNodes get_IgnoredNodes();
    protected virtual void UpdateNodeValue(AsyncLiveTreeModel asyncLiveTreeModel, ITreeModelNode node);
    protected virtual void WrapEvaluateNodes(Action evaluateNodes);
    public virtual void PreviewUpdate(IPreviewControl previewControl, TreeModelNode modelNode);
    public virtual bool Navigate(TreeModelNode node, PopupWindowContextSource windowContext, bool transferFocus, TabOptions options);
    public virtual bool CustomizeActionBar(IActionBar bar);
    private static void TraverseChildren(IEnumerable`1<ITreeModelNode> childrenRaw, Action`1<ITreeModelNode> callback);
    public virtual bool ExpandNodeInitially(TreeModelNode modelNode);
    public sealed virtual void UpdateItem(ITreeModelNode treeModelNode);
    private sealed virtual override LifetimeDefinition JetBrains.ReSharper.Feature.Services.Tree.ISimpleOccurrenceBrowserDescriptor.get_LifetimeDefinition();
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_2(HierarchyNodeWithAsyncChildren n);
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_3();
}
public abstract class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Strategy.CallGraphTreeStrategyBase : object {
    private ICallHierarchyFindResultVisitor`2<NewNodeData, object> myConvertVisitor;
    private CallHierarchyFinder myFinder;
    private JetHashSet`1<CallHierarchyNode> myOutgoingBuildedNodes;
    private ISolution mySolution;
    private IFeaturePartsContainer myFeaturePartsContainer;
    private ICallHierarchyTree myTree;
    private Func`2<CallHierarchyFindResult, bool> myFilter;
    public ISolution Solution { get; }
    private JetHashSet`1<CallHierarchyNode> OutgoingBuildedNodes { get; }
    public CallHierarchyFinder Finder { get; }
    public ICallHierarchyTree Tree { get; }
    protected CallGraphTreeStrategyBase(ISolution solution, CallHierarchyNode rootNode, IFeaturePartsContainer featurePartsContainer, Func`2<CallHierarchyFindResult, bool> filter);
    public ISolution get_Solution();
    private JetHashSet`1<CallHierarchyNode> get_OutgoingBuildedNodes();
    public CallHierarchyFinder get_Finder();
    public sealed virtual ICallHierarchyTree get_Tree();
    public sealed virtual bool IsOutgoingBuilded(CallHierarchyNode node);
    public sealed virtual void BuildOutgoing(CallHierarchyNode node, IProgressIndicator progressIndicator);
    public sealed virtual void Dispose();
    protected abstract virtual ICallHierarchyFindResultVisitor`2<NewNodeData, object> GetConvertVisitor();
    protected virtual bool CanHaveOutgoing(CallHierarchyNode node);
    protected void AddNodesFromFindResult(IEnumerable`1<CallHierarchyFindResult> childFindResult, CallHierarchyNode parent);
    protected abstract virtual void CalculateOutgoingNodes(CallHierarchyNode fromNode, IProgressIndicator progressIndicator);
}
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Strategy.CallTreeIncomingStrategy : CallGraphTreeStrategyBase {
    public CallTreeIncomingStrategy(ISolution solution, CallHierarchyNode rootNode, IFeaturePartsContainer featurePartsContainer, Func`2<CallHierarchyFindResult, bool> filter);
    public sealed virtual void VisitIncomingTypeMemberNode(CallHierarchyIncomingDeclaredElementNode node, IProgressIndicator data);
    public sealed virtual void VisitOutgoingOverridableMemberNode(CallHierarchyOutgoingOverridableMemberNode node, IProgressIndicator data);
    public sealed virtual void VisitOutgoingImplementorMemberNode(CallHierarchyOutgoingImplementorMemberNode node, IProgressIndicator data);
    public sealed virtual void VisitOutgoingTypeMemberNode(CallHierarchyOutgoingDeclaredElementNode node, IProgressIndicator data);
    public sealed virtual void VisitOutgoingTypeParameterConstructorNode(CallHierarchyOutgoingTypeParameterConstructorNode node, IProgressIndicator data);
    public sealed virtual void VisitOutgoingUnresolvedNode(CallHierarchyOutgoingUnresolvedNode node, IProgressIndicator data);
    public sealed virtual void VisitOutgoingExpressionNode(CallHierarchyOutgoingExpressionNode node, IProgressIndicator data);
    public sealed virtual void VisitOutgoingClosureNode(CallHierarchyOutgoingClosureNode node, IProgressIndicator data);
    public sealed virtual void VisitOutgoingQueryNode(CallHierarchyOutgoingQueryNode node, IProgressIndicator data);
    public sealed virtual void VisitOutgoingInitializerNode(CallHierarchyOutgoingInitializerNode node, IProgressIndicator data);
    public sealed virtual void VisitOutgoingImplicitConstructorNode(CallHierarchyOutgoingImplicitConstructorNode node, IProgressIndicator data);
    public sealed virtual void VisitIncomingInitializerOwnerNode(CallHierarchyIncomingInitializerOwnerNode node, IProgressIndicator data);
    public sealed virtual void VisitIncomingEventSubscriptionNode(CallHierarchyIncomingEventSubscriptionNode node, IProgressIndicator data);
    protected virtual bool CanHaveOutgoing(CallHierarchyNode node);
    protected virtual void CalculateOutgoingNodes(CallHierarchyNode fromNode, IProgressIndicator progressIndicator);
    protected virtual ICallHierarchyFindResultVisitor`2<NewNodeData, object> GetConvertVisitor();
}
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Strategy.CallTreeOutgoingStrategy : CallGraphTreeStrategyBase {
    public CallTreeOutgoingStrategy(ISolution solution, CallHierarchyNode rootNode, IFeaturePartsContainer featurePartsContainer, Func`2<CallHierarchyFindResult, bool> filter);
    public sealed virtual void VisitIncomingTypeMemberNode(CallHierarchyIncomingDeclaredElementNode node, IProgressIndicator data);
    public sealed virtual void VisitIncomingEventSubscriptionNode(CallHierarchyIncomingEventSubscriptionNode node, IProgressIndicator data);
    public sealed virtual void VisitOutgoingTypeMemberNode(CallHierarchyOutgoingDeclaredElementNode node, IProgressIndicator data);
    public sealed virtual void VisitOutgoingImplicitConstructorNode(CallHierarchyOutgoingImplicitConstructorNode node, IProgressIndicator data);
    public sealed virtual void VisitOutgoingImplementorMemberNode(CallHierarchyOutgoingImplementorMemberNode node, IProgressIndicator data);
    public sealed virtual void VisitOutgoingOverridableMemberNode(CallHierarchyOutgoingOverridableMemberNode node, IProgressIndicator data);
    public sealed virtual void VisitOutgoingUnresolvedNode(CallHierarchyOutgoingUnresolvedNode node, IProgressIndicator data);
    public sealed virtual void VisitOutgoingTypeParameterConstructorNode(CallHierarchyOutgoingTypeParameterConstructorNode node, IProgressIndicator data);
    public sealed virtual void VisitOutgoingExpressionNode(CallHierarchyOutgoingExpressionNode node, IProgressIndicator data);
    public sealed virtual void VisitOutgoingClosureNode(CallHierarchyOutgoingClosureNode node, IProgressIndicator data);
    public sealed virtual void VisitOutgoingQueryNode(CallHierarchyOutgoingQueryNode node, IProgressIndicator data);
    public sealed virtual void VisitOutgoingInitializerNode(CallHierarchyOutgoingInitializerNode node, IProgressIndicator data);
    public sealed virtual void VisitIncomingInitializerOwnerNode(CallHierarchyIncomingInitializerOwnerNode node, IProgressIndicator data);
    protected virtual bool CanHaveOutgoing(CallHierarchyNode node);
    protected virtual void CalculateOutgoingNodes(CallHierarchyNode fromNode, IProgressIndicator progressIndicator);
    [NotNullAttribute]
protected virtual ICallHierarchyFindResultVisitor`2<NewNodeData, object> GetConvertVisitor();
}
internal class JetBrains.ReSharper.Features.Inspections.CallHierarchy.Strategy.GroupingComparer : object {
    private IFeaturePartsContainer myFeaturePartsContainer;
    public GroupingComparer(IFeaturePartsContainer featurePartsContainer);
    public sealed virtual bool Equals(CallHierarchyFindResult x, CallHierarchyFindResult y);
    public sealed virtual int GetHashCode(CallHierarchyFindResult obj);
}
public interface JetBrains.ReSharper.Features.Inspections.CallHierarchy.Strategy.ICallGraphTreeStrategy {
    [NotNullAttribute]
public ICallHierarchyTree Tree { get; }
    public abstract virtual ICallHierarchyTree get_Tree();
    public abstract virtual bool IsOutgoingBuilded(CallHierarchyNode node);
    public abstract virtual void BuildOutgoing(CallHierarchyNode node, IProgressIndicator progressIndicator);
}
internal class JetBrains.ReSharper.Features.Inspections.CallHierarchy.View.CallHierarchyClassQualifierPresenter : CallHierarchyCustomQualifierPresenter {
    public string Description { get; }
    public virtual RichText Present(DeclaredElementInstance`1<IClrDeclaredElement> element, PsiLanguageType languageType, bool appendSeparator);
    public virtual string get_Description();
}
public abstract class JetBrains.ReSharper.Features.Inspections.CallHierarchy.View.CallHierarchyCustomQualifierPresenter : object {
    public string Description { get; }
    public abstract virtual RichText Present(DeclaredElementInstance`1<IClrDeclaredElement> element, PsiLanguageType languageType, bool appendSeparator);
    public abstract virtual string get_Description();
    protected RichText PresentQualifier(DeclaredElementInstance`1<IClrDeclaredElement> value, PsiLanguageType languageType, bool appendSeparator);
    protected virtual string GetNameForSynthetic(ITypeElement containingType);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Features.Inspections.CallHierarchy.View.CallHierarchyNameSpaceAndClassQualifierPresenter : CallHierarchyCustomQualifierPresenter {
    public string Description { get; }
    public virtual RichText Present(DeclaredElementInstance`1<IClrDeclaredElement> element, PsiLanguageType languageType, bool appendSeparator);
    public virtual string get_Description();
    protected virtual string GetNameForSynthetic(ITypeElement containingType);
}
public class JetBrains.ReSharper.Features.Inspections.CallHierarchy.View.CallHierarchyNodePresenter : TreeModelBrowserPresenter {
    public static DeclaredElementPresenterStyle ShortStyle;
    public static DeclaredElementPresenterStyle SignatureStyle;
    public static DeclaredElementPresenterStyle SignatureStyleWithoutType;
    public static TextStyle GreyTextStyle;
    private CallHierarchyExplorerControllerBase myController;
    private IFeaturePartsContainer myFeaturePartsContainer;
    private PsiIconManager myPsiIconManager;
    [CompilerGeneratedAttribute]
private ITreeModelNodeVisibilityPresentor <TreeModelNodeVisibilityPresentor>k__BackingField;
    public ITreeModelNodeVisibilityPresentor TreeModelNodeVisibilityPresentor { get; public set; }
    public CallHierarchyNodePresenter(CallHierarchyExplorerControllerBase controller, IFeaturePartsContainer featurePartsContainer);
    private static CallHierarchyNodePresenter();
    [CompilerGeneratedAttribute]
public sealed virtual ITreeModelNodeVisibilityPresentor get_TreeModelNodeVisibilityPresentor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TreeModelNodeVisibilityPresentor(ITreeModelNodeVisibilityPresentor value);
    public virtual void UpdateItem(object value, TreeModelNode structureElement, IPresentableItem item, PresentationState state);
    private void PresentWrapper(WrappedNodeValue value, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
    private void PresentConstructor(DeclaredElementInstance`1<IConstructor> constructor, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
    private string PresentSignature(IConstructor constructorElement);
    private void PresentAccessor(DeclaredElementInstance`1<IAccessor> accessor, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    private RichText PresentDeclaredElement(DeclaredElementInstance value, PsiLanguageType languageType);
    protected virtual void PresentDeclaredElementInstance(DeclaredElementInstance value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    private static void ExpressionPresenter(IExpression value, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
    private RichText PresentQualifier(DeclaredElementInstance`1<IClrDeclaredElement> value, PsiLanguageType languageType);
    private void NodePresenter(CallHierarchyNode value, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
    protected virtual void AppendCallsCount(CallHierarchyNode value, IPresentableItem item);
    public IEnumerable`1<ICallHierarchyIncomingDeclaredElementNodePresenter> GetCustomPresenterForIncomingTypeMember(CallHierarchyIncomingDeclaredElementNode node);
}
public static class JetBrains.ReSharper.Features.Inspections.CallHierarchy.View.CallHierarchyPresentationUtil : object {
    private static DeclaredElementPresenterStyle ourDefaultPresentationStyle;
    private static CallHierarchyPresentationUtil();
    public static void PresentFilter(PresentableItem item, CallHierarchyNodeFilterData filter);
    public static RichText PresentShortElement(DeclaredElementInstance value, PsiLanguageType languageType, bool addSignature, bool showType);
    private static IList`1<ITypeParameter> GetTypeParameters(IDeclaredElement declaredElement);
    private static void SelectName(RichText result, DeclaredElementPresenterMarking marking);
    public static RichText PresentFullElement(DeclaredElementInstance value, PsiLanguageType languageType);
}
internal class JetBrains.ReSharper.Features.Inspections.CallHierarchy.View.CallHierarchyProjectNameSpaceAndClassQualifierPresenter : CallHierarchyNameSpaceAndClassQualifierPresenter {
    public string Description { get; }
    public virtual RichText Present(DeclaredElementInstance`1<IClrDeclaredElement> element, PsiLanguageType languageType, bool appendSeparator);
    public virtual string get_Description();
}
public class JetBrains.ReSharper.Features.Inspections.CodeStructure.CachedCodeStructurePresenter : StructuredPresenter`2<TreeModelNode, IPresentableItem> {
    private CodeStructureBrowser myCodeStructureBrowser;
    public CachedCodeStructurePresenter(CodeStructureBrowser codeStructureBrowser);
    private void PresentCodeStructureElement(CodeStructureElement value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Inspections.CodeStructure.CodeStructureBrowser : object {
    private static int CacheSize;
    private DocumentOffset myActiveTextControlCaretOffset;
    protected AsyncCommitService myCommitService;
    private DocumentManager myDocumentManager;
    protected ITextControlManager TextControlManager;
    private ChangeManager myChangeManager;
    protected IShellLocks Locks;
    private GroupingEvent mySynchronizeViewEvent;
    private Lifetime myLifetime;
    private PerformanceThresholds myThresholds;
    private SequentialLifetimes myBackgroundUpdateLifetimes;
    protected DirectMappedCache`2<IPsiSourceFile, CodeStructureCacheItem> myCache;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationManager <NavigationManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <SynchronizeCaretToView>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <SynchronizeViewToCaret>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ShowPreprocessorDirectives>k__BackingField;
    [CompilerGeneratedAttribute]
private Signal`1<Pair`2<TreeModel, IPsiSourceFile>> <OnActiveTreeModelChange>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextControl <ActiveTextControl>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<ICodeStructureView> <View>k__BackingField;
    private bool myOverrideWindowRequirements;
    private IContextBoundSettingsStoreLive myBoundSettings;
    public ISolution Solution { get; }
    public NavigationManager NavigationManager { get; }
    public IProperty`1<bool> SynchronizeCaretToView { get; }
    public IProperty`1<bool> SynchronizeViewToCaret { get; }
    public IProperty`1<bool> ShowPreprocessorDirectives { get; }
    public Signal`1<Pair`2<TreeModel, IPsiSourceFile>> OnActiveTreeModelChange { get; }
    [CanBeNullAttribute]
public ITextControl ActiveTextControl { get; private set; }
    public IProperty`1<ICodeStructureView> View { get; }
    public bool IsActive { get; }
    public CodeStructureBrowser(Lifetime lifetime, ISolution solution, ITextControlManager textControlManager, ChangeManager changeManager, IShellLocks locks, AsyncCommitService commitService, DocumentManager documentManager, IPsiFiles psiFiles, ISettingsStore settingsStore, NavigationManager navigationManager, PerformanceThresholds thresholds);
    [CompilerGeneratedAttribute]
public ISolution get_Solution();
    [CompilerGeneratedAttribute]
public NavigationManager get_NavigationManager();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_SynchronizeCaretToView();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_SynchronizeViewToCaret();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ShowPreprocessorDirectives();
    [CompilerGeneratedAttribute]
public sealed virtual Signal`1<Pair`2<TreeModel, IPsiSourceFile>> get_OnActiveTreeModelChange();
    [CompilerGeneratedAttribute]
public ITextControl get_ActiveTextControl();
    [CompilerGeneratedAttribute]
private void set_ActiveTextControl(ITextControl value);
    [CompilerGeneratedAttribute]
public IProperty`1<ICodeStructureView> get_View();
    public virtual void SubscribeForDocumentModelChanges(Lifetime lifetime, IShellLocks locks, bool overrideWindowRequirements);
    protected virtual void OnShowPreprocessorDirectivesChange(PropertyChangedEventArgs`1<bool> propertyChangedEventArgs);
    protected virtual void OnTextControlChanged(IShellLocks locks, ITextControl value, Lifetime valueLifetime);
    public void ToggleSynchronizeViewToCaret();
    public void ToggleSynchronizeCaretToView();
    public void ToggleShowPreprocessorDirectives();
    public virtual Action BeforeCommit();
    private sealed virtual override void JetBrains.ReSharper.Psi.IAsyncCommitClient.OnInterrupt();
    public virtual object Execute(IChangeMap changeMap);
    private void AsyncRefreshCache();
    private void OnPsiChanged(ITreeNode element, PsiChangedElementType psiChangedElementType);
    public static CodeStructureBrowser GetInstance(ISolution solution);
    private void TextControlCaretMoved(ITextControlPos newCaretPosition);
    private void ActiveTextControlChanged(ITextControl newTextControl);
    private void SaveActiveViewState();
    public sealed virtual void QueueRebuildIfInCache(IPsiSourceFile sourceFile);
    public sealed virtual bool get_IsActive();
    public sealed virtual void QueueRebuild(IPsiSourceFile sourceFile);
    private void SynchronizeView();
    private void ClearView();
    internal bool ViewNodeExpanded(CodeStructureElement element);
    internal bool ViewNodeSelected(CodeStructureElement element);
    private void DoSynchronizeCaretToView();
    private static CodeStructureElement GetNearestElement(CodeStructureElement root, DocumentOffset offset);
    private static CodeStructureElement GetNearestElementRecursive(CodeStructureElement root, DocumentOffset offset);
    private void FinishBackgroundUpdate();
    private void QueueRebuildIfNoPsiSourceFileForActiveTextControlInCache();
    private void StartBackgroundUpdate();
    private void PerformBackgroundUpdate();
    private bool UpdateCache(KeyValuePair`2<IPsiSourceFile, CodeStructureCacheItem> cachePair, CodeStructurePresenter presenter);
    private static void BuildPresentation(IEnumerable`1<TreeModelNode> modelNodes, IDictionary`2<TreeModelNode, IPresentableItem> presentation, StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, PresentationState state);
    internal void PresentCached(CodeStructureElement element, IPresentableItem presentableItem, TreeModelNode node);
    private static Dictionary`2<CodeStructureElement, CodeStructureElementState> TransferStates(IEnumerable`1<TreeModelNode> modelNodes, IDictionary`2<CodeStructureElement, CodeStructureElementState> oldStates);
    private static void TransferStates(IEnumerable`1<TreeModelNode> modelNodes, IDictionary`2<CodeStructureElement, CodeStructureElementState> states, Dictionary`2<DocumentRange, CodeStructureElementState> treeNodeStates);
    private Pair`2<TreeSimpleModel, CodeStructureElement> BuildCache(IPsiSourceFile sourceFile);
    private static void BuildModel(TreeSimpleModel model, object parent, IEnumerable`1<CodeStructureElement> elements);
    private void BackgroundUpdateInterrupted();
    public void UpdateCacheFor(IPsiSourceFile sourceFile);
    public CodeStructureElement GetElement(ITreeNode node);
    public void RenameElement(CodeStructureElement element);
    [CompilerGeneratedAttribute]
private void <BeforeCommit>b__46_0();
    [CompilerGeneratedAttribute]
private void <BeforeCommit>b__46_1(Lifetime asyncAllowedLifetime);
}
public class JetBrains.ReSharper.Features.Inspections.CodeStructure.CodeStructureDescriptor : TreeModelBrowserDescriptorPsi {
    private CodeStructureBrowser myBrowser;
    private CachedCodeStructurePresenter myPresenter;
    private TreeModel myModel;
    [CompilerGeneratedAttribute]
private Property`1<TreeModelNode> <SelectedNode>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<TreeModelNode> <OnNavigateToModelNode>k__BackingField;
    public Property`1<TreeModelNode> SelectedNode { get; }
    public ISignal`1<TreeModelNode> OnNavigateToModelNode { get; }
    public string ActionBarID { get; }
    public string ContextMenuID { get; }
    public TreeModel Model { get; }
    public StructuredPresenter`2<TreeModelNode, IPresentableItem> Presenter { get; }
    public bool VisibilitySupported { get; }
    public bool QuickSearchSupported { get; }
    public bool DragDropSupported { get; }
    public PreviewSupport PreviewSupport { get; }
    public CodeStructureDescriptor(CodeStructureBrowser browser);
    [CompilerGeneratedAttribute]
public Property`1<TreeModelNode> get_SelectedNode();
    [CompilerGeneratedAttribute]
public ISignal`1<TreeModelNode> get_OnNavigateToModelNode();
    public virtual string get_ActionBarID();
    public virtual string get_ContextMenuID();
    public virtual TreeModel get_Model();
    public virtual StructuredPresenter`2<TreeModelNode, IPresentableItem> get_Presenter();
    public virtual bool get_VisibilitySupported();
    public virtual bool get_QuickSearchSupported();
    public virtual bool get_DragDropSupported();
    public void SetModel(TreeModel model);
    public virtual bool Navigate(TreeModelNode node, PopupWindowContextSource windowContext, bool transferFocus, TabOptions options);
    public virtual bool QuickSearchMatches(TreeModelNode modelNode, string quickSearchText);
    public virtual IAutomation CreateViewAutomation(TreeModel model);
    public virtual bool ExpandNodeInitially(TreeModelNode modelNode);
    public virtual IEnumerable`1<TreeModelNode> GetDefaultNodes(TreeModel model);
    private void CollectSelectedNodes(IEnumerable`1<TreeModelNode> nodes, List`1<TreeModelNode> list);
    public sealed virtual DragDropEffects DragStarting(IList`1<TreeModelNode> selectedNodes, IDataObject dataObject);
    public sealed virtual DragResponse Dragging(TreeModelNode node, DragEventArgs data);
    public sealed virtual void DragDrop(TreeModelNode node, RelativeLocation location, DragEventArgs data);
    public sealed virtual PreviewSupport get_PreviewSupport();
    public sealed virtual IPreviewControl PreviewCreateControl(Lifetime lifetime);
    public sealed virtual void PreviewUpdate(IPreviewControl previewControl, TreeModelNode modelNode);
    public virtual bool AcceptOccurrence(object value);
}
public class JetBrains.ReSharper.Features.Inspections.CodeStructure.CodeStructureDragData : object {
    private IList`1<CodeStructureElement> myElements;
    public IList`1<CodeStructureElement> Elements { get; }
    public CodeStructureDragData(IList`1<CodeStructureElement> elements);
    public IList`1<CodeStructureElement> get_Elements();
}
[ActionAttribute("CodeStructure.Enregion", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "SurroundWithRegionActionText")]
public class JetBrains.ReSharper.Features.Inspections.CodeStructure.CodeStructureEnregionAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
public class JetBrains.ReSharper.Features.Inspections.CodeStructure.CodeStructurePresenter : TreeModelBrowserPresenter {
    protected virtual object Unwrap(object value);
    private void PresentCodeStructureElement(CodeStructureElement value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
}
[ObsoleteAttribute("Deprecated, use CodeStructureSettingsKey")]
public class JetBrains.ReSharper.Features.Inspections.CodeStructure.CodeStructureSettings : object {
    private static string TagName;
    private static XmlExternalizationScope Scope;
    [CompilerGeneratedAttribute]
private bool <SynchronizeCaretToView>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SynchronizeViewToCaret>k__BackingField;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool SynchronizeCaretToView { get; public set; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool SynchronizeViewToCaret { get; public set; }
    public CodeStructureSettings(IComponentSettingsProvider settingsProvider);
    [CompilerGeneratedAttribute]
public bool get_SynchronizeCaretToView();
    [CompilerGeneratedAttribute]
public void set_SynchronizeCaretToView(bool value);
    [CompilerGeneratedAttribute]
public bool get_SynchronizeViewToCaret();
    [CompilerGeneratedAttribute]
public void set_SynchronizeViewToCaret(bool value);
    public sealed virtual void ReadFromXml(XmlElement element);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "CodeStructureWindowSettingsSettingDescription")]
public class JetBrains.ReSharper.Features.Inspections.CodeStructure.CodeStructureSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "SynchronizeCaretToViewSettingDescription")]
public bool SynchronizeCaretToView;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "SynchronizeViewToCaretSettingDescription")]
public bool SynchronizeViewToCaret;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ShowPreprocessorDirectivesSettingDescription")]
public bool ShowPreprocessorDirectives;
}
[GlobalSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.Features.Inspections.CodeStructure.CodeStructureSettingsUpgrade : object {
    public sealed virtual void Upgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
}
[ActionAttribute("CodeStructure.ShowPreprocessorElements", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ShowPreprocessorDirectivesActionText")]
public class JetBrains.ReSharper.Features.Inspections.CodeStructure.CodeStructureShowPreprocessorDirectivesAction : object {
    public sealed virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public sealed virtual void Execute(IDataContext context);
}
[ActionAttribute("CodeStructure.SynchronizeViewToCaret", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "AutomaticallyScrollToSourceActionText")]
public class JetBrains.ReSharper.Features.Inspections.CodeStructure.CodeStructureSynchronizeToCaretAction : object {
    public sealed virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public sealed virtual void Execute(IDataContext context);
}
[ActionAttribute("CodeStructure.SynchronizeCaretToView", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "TrackCaretInEditorActionText")]
public class JetBrains.ReSharper.Features.Inspections.CodeStructure.CodeStructureSynchronizeToViewAction : object {
    public sealed virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public sealed virtual void Execute(IDataContext context);
}
public class JetBrains.ReSharper.Features.Inspections.CodeStructure.CodeStructureToolWindowAutomation : AAutomationRecord {
    [CompilerGeneratedAttribute]
private ToolWindowInstance <ToolWindowInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeStructureBrowser <CodeStructureBrowser>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public ToolWindowInstance ToolWindowInstance { get; public set; }
    public CodeStructureBrowser CodeStructureBrowser { get; public set; }
    public CodeStructureToolWindowAutomation(ToolWindowInstance ToolWindowInstance, CodeStructureBrowser CodeStructureBrowser);
    [CompilerGeneratedAttribute]
private CodeStructureToolWindowAutomation(CodeStructureToolWindowAutomation original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ToolWindowInstance get_ToolWindowInstance();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ToolWindowInstance(ToolWindowInstance value);
    [CompilerGeneratedAttribute]
public CodeStructureBrowser get_CodeStructureBrowser();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CodeStructureBrowser(CodeStructureBrowser value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(CodeStructureToolWindowAutomation left, CodeStructureToolWindowAutomation right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(CodeStructureToolWindowAutomation left, CodeStructureToolWindowAutomation right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(AAutomationRecord other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(CodeStructureToolWindowAutomation other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual AAutomationRecord <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(ToolWindowInstance& ToolWindowInstance, CodeStructureBrowser& CodeStructureBrowser);
}
[ToolWindowDescriptorAttribute("16")]
public class JetBrains.ReSharper.Features.Inspections.CodeStructure.CodeStructureToolWindowDescriptor : ToolWindowDescriptor {
}
public class JetBrains.ReSharper.Features.Inspections.CodeStructure.CodeStructureTreeModelPresentableViewModel : AAutomation {
    private TreeModel myTreeModel;
    private CodeStructureDescriptor myCodeStructureDescriptor;
    public TreeModel TreeModel { get; }
    public CodeStructureDescriptor CodeStructureDescriptor { get; }
    public CodeStructureTreeModelPresentableViewModel(TreeModel treeModel, CodeStructureDescriptor codeStructureDescriptor);
    public TreeModel get_TreeModel();
    public CodeStructureDescriptor get_CodeStructureDescriptor();
}
public interface JetBrains.ReSharper.Features.Inspections.CodeStructure.ICodeStructureView {
    public CodeStructureDescriptor Descriptor { get; }
    public IProperty`1<bool> IsVisible { get; }
    public IProperty`1<string> FileName { get; }
    public abstract virtual CodeStructureDescriptor get_Descriptor();
    public abstract virtual IProperty`1<bool> get_IsVisible();
    public abstract virtual IProperty`1<string> get_FileName();
    public abstract virtual bool HasActiveViewEditor();
    public abstract virtual void FocusElement(CodeStructureElement element);
    public abstract virtual void RenameElement(CodeStructureElement element);
    public abstract virtual void SaveState(CodeStructureCacheItem cache);
}
[ActionAttribute("JetBrains.ReSharper.Features.Inspections.Resources.Strings", "FileStructureActionText")]
public class JetBrains.ReSharper.Features.Inspections.CodeStructure.ShowCodeStructureAction : ActivateToolWindowActionHandler`1<CodeStructureToolWindowDescriptor> {
}
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.Actions.ApplyHierarchyFilterAction : object {
    public virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public sealed virtual void Execute(IDataContext context);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.Actions.BaseOnThisTypeAction : object {
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
[ActionAttribute("TypeHierarchy.Browse", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "BrowseTypeHierarchyAction_Title")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.Actions.BrowseTypeHierarchyAction : InspectThisActionBase`1<BrowseTypeHierarchyProvider> {
    public static string ActionId;
    public static string Title;
    protected RichText Caption { get; }
    private static BrowseTypeHierarchyAction();
    protected virtual RichText get_Caption();
}
[InspectThisProviderAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.Actions.BrowseTypeHierarchyProvider : object {
    private static int Order;
    protected virtual bool IsAvailable(IDataContext context);
    public static void TryExecute(IDataContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Inspections.Hierarchies.Actions.BrowseTypeHierarchyProvider/<CreateWorkflow>d__3")]
public sealed virtual IEnumerable`1<InspectGroupWorkflow> CreateWorkflow(IDataContext dataContext);
}
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.Actions.ClassHierarchyAction : object {
    public virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public sealed virtual void Execute(IDataContext context);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.Actions.ImplementingTypesHierarchyAction : object {
    public virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public sealed virtual void Execute(IDataContext context);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.Actions.InterfaceLeavesHierarchyAction : object {
    public virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public sealed virtual void Execute(IDataContext context);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.Actions.SubTypesHierarchyAction : object {
    public virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public sealed virtual void Execute(IDataContext context);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.Actions.SuperTypesHierarchyAction : object {
    public virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public sealed virtual void Execute(IDataContext context);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
[ActionAttribute("TypeHierarchy.Update", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "RefreshActionText")]
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.Actions.UpdateTypeHierarchyAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.Core.Hierarchies.DeclaredElementHierariesTargetPresenter : StructuredPresenter`2<IPresentableStructureElement, IPresentableItem> {
    public static StructuredPresenter`2<IPresentableStructureElement, IPresentableItem> FullNestedName;
    private static DeclaredElementPresenterStyle ourDeclaredElementPresenterStyle;
    private static DeclaredElementHierariesTargetPresenter();
    private void PresentDeclaredElementEnvoy(IDeclaredElementEnvoy value, IPresentableItem item, IPresentableStructureElement structureelement, PresentationState state);
    private void PresentDeclaredElement(IDeclaredElement value, IPresentableItem item, IPresentableStructureElement structureelement, PresentationState state);
    private void PresentDeclaredElementInstance(DeclaredElementInstance value, IPresentableItem item, IPresentableStructureElement structureelement, PresentationState state);
}
public abstract class JetBrains.ReSharper.Features.Inspections.Hierarchies.Core.Hierarchies.HierarchyDescriptor`1 : HierarchyDescriptorBase {
    private THierarchyItem myTarget;
    private bool myFilterExternalElements;
    protected Func`2<ICollection`1<IOccurrence>, ICollection`1<IOccurrence>> OccurrencesFilter;
    private ITypeHierarchyHelper myHierarchyHelper;
    private IHierarchyController`1<THierarchyItem> myHierarchyController;
    private ISettingsStore mySettingStore;
    protected TreeModel myModel;
    protected TreeModel myGroupingModel;
    public IProperty`1<THierarchyItem> Target;
    protected IHierarchyController`1<THierarchyItem> HierarchyController { get; }
    public bool ExcludeExternalElements { get; public set; }
    protected int DefaultGroupingIndex { get; protected set; }
    public IHierarchyController`1<THierarchyItem> HierarchyHelper { get; }
    public TreeModel Model { get; }
    public HierarchyDescriptor`1(IHierarchyController`1<THierarchyItem> controller, THierarchyItem target, TypeHierarchyViewStyle viewStyle, bool filterExternalElements, ISolution solution, Func`2<ICollection`1<IOccurrence>, ICollection`1<IOccurrence>> occurrencesFilter);
    private void TargetChanged(PropertyChangedEventArgs`1<THierarchyItem> propertyChangedEventArgs);
    private void OnViewStyleChanged(PropertyChangedEventArgs`1<TypeHierarchyViewStyle> args);
    public virtual void RefreshStructure();
    protected abstract virtual HierarchyPresenterBase`1<THierarchyItem> CreatePresenter();
    public virtual IEnumerable`1<TreeModelNode> GetDefaultNodes(TreeModel model);
    protected IHierarchyController`1<THierarchyItem> get_HierarchyController();
    public virtual bool get_ExcludeExternalElements();
    public virtual void set_ExcludeExternalElements(bool value);
    public virtual void UpdateHierarchy();
    protected virtual int get_DefaultGroupingIndex();
    protected virtual void set_DefaultGroupingIndex(int value);
    protected ICollection`1<IOccurrence> GetHierarchyOccurrences();
    public virtual void Update(UpdateKind updateKind);
    protected virtual void UpdateTitle();
    protected virtual string FormatTarget(string format, object target);
    private ICollection`1<IOccurrence> GetSubTypes();
    private ICollection`1<IOccurrence> GetImplementorsTreesOccurrences();
    private ICollection`1<IOccurrence> GetSuperTypes();
    private ICollection`1<IOccurrence> GetInterfaceLeaves();
    private ICollection`1<IOccurrence> GetClassHierarchy();
    public IHierarchyController`1<THierarchyItem> get_HierarchyHelper();
    public virtual TreeModel get_Model();
}
public abstract class JetBrains.ReSharper.Features.Inspections.Hierarchies.Core.Hierarchies.HierarchyDescriptorBase : OccurrenceBrowserDescriptor {
    public static string CONTAINING_MODULES_HIERARCHY;
    private IIdentifierMatcher myMatcher;
    private IPresentableItem myDummyPresentableItem;
    private PresentationState myDummyState;
    public IProperty`1<TypeHierarchyViewStyle> ViewStyle;
    public bool ExcludeExternalElements { get; public set; }
    public string PreviewActionName { get; }
    public PreviewSupport PreviewSupport { get; }
    public string ActionBarID { get; }
    public string ContextMenuID { get; }
    public bool QuickSearchSupported { get; }
    protected HierarchyDescriptorBase(ISolution solution);
    private static HierarchyDescriptorBase();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Inspections.Hierarchies.Core.Hierarchies.HierarchyDescriptorBase/<SupportedViewStyles>d__6")]
public virtual IEnumerable`1<TypeHierarchyViewStyle> SupportedViewStyles();
    public abstract virtual bool get_ExcludeExternalElements();
    public abstract virtual void set_ExcludeExternalElements(bool value);
    public virtual string get_PreviewActionName();
    public virtual PreviewSupport get_PreviewSupport();
    public virtual string get_ActionBarID();
    public virtual string get_ContextMenuID();
    public virtual bool get_QuickSearchSupported();
    public abstract virtual void RefreshStructure();
    public virtual bool ExpandNodeInitially(TreeModelNode modelNode);
    protected virtual IIdentifierMatcher GetMatcher(string text);
    protected virtual void SetResults(ICollection`1<IOccurrence> items, IProgressIndicator indicator, bool merge);
    protected virtual ICollection`1<OccurrenceKind> GetOccurrenceKinds(IOccurrence occurrence);
    public virtual bool QuickSearchMatches(TreeModelNode modelNode, string quickSearchText);
}
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.Core.Hierarchies.HierarchyPresenterBase`1 : TreeModelBrowserPresenter {
    private IProperty`1<THierarchyItem> myTarget;
    public IProperty`1<TypeHierarchyViewStyle> ViewStyle;
    public HierarchyPresenterBase`1(IProperty`1<THierarchyItem> target, ProjectModelElementPresentationService projectModelElementPresentationService);
    private void PresentProjectItemOccurrence(ProjectItemOccurrence value, IPresentableItem item, TreeModelNode structureelement, PresentationState state, ProjectModelElementPresentationService projectModelElementPresentationService);
    private static void PresentInvalidElement(InvalidHierarchyElement value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    private void PresentAssemblyInfoOccurrence(IAssemblyAttributeOccurrence value, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
    protected virtual void AppendOccurrencesCount(IPresentableItem item, TreeModelNode node);
    private string GetItemText();
    protected virtual void PresentDeclaredElementOccurrence(IDeclaredElementOccurrence value, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
    protected virtual void PresentTypeElement(ITypeElement value, ISubstitution substitution, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
}
[SettingsKeyAttribute("JetBrains.Application.UI.Utils.UserInterfaceSettings", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "TypeHierarchyViewSettingsSettingDescription")]
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.Core.Hierarchies.HierarchyViewSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ViewStyleSettingDescription")]
public TypeHierarchyViewStyle ViewStyle;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "GroupByIndexSettingDescription")]
public int GroupingIndex;
}
public interface JetBrains.ReSharper.Features.Inspections.Hierarchies.Core.Hierarchies.IHierarchyController`1 {
    public abstract virtual ICollection`1<IOccurrence> GetSubtypeOccurrences(THierarchyItem target);
    public abstract virtual ICollection`1<IOccurrence> GetClassHierarchyOccurrences(THierarchyItem target);
    public abstract virtual ICollection`1<IOccurrence> GetSuperTypesOccurrences(THierarchyItem target);
    public abstract virtual IList`1<IOccurrence> GetImplementersTreesOccurrences(THierarchyItem target);
    public abstract virtual IList`1<IOccurrence> GetInterfaceLeavesOccurrences(THierarchyItem target);
    public abstract virtual void OnRefreshed();
    public abstract virtual void OnViewStyleChanged();
    public abstract virtual IEnumerable`1<CascadeGroup> GetDefaultRootPath(IOccurrence item, HierarchyDescriptor`1<THierarchyItem> owner);
    public abstract virtual IOccurrence GetCachedOccurrence(THierarchyItem declaredElement, TypeHierarchyViewStyle viewStyle);
}
public interface JetBrains.ReSharper.Features.Inspections.Hierarchies.Core.Hierarchies.IHierarchyDescriptorFactory {
    public abstract virtual HierarchyDescriptorBase CreateDescriptor(IDataContext dataContext);
    public abstract virtual bool IsApplicable(IDataContext dataContext);
}
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.Core.Hierarchies.InvalidHierarchyElement : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public InvalidHierarchyElement(string text);
    [CompilerGeneratedAttribute]
public string get_Text();
}
public interface JetBrains.ReSharper.Features.Inspections.Hierarchies.Core.Hierarchies.ITypeHierarchyHelper {
    public abstract virtual bool AllowExcludingExternalElements();
}
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.Core.Hierarchies.RootPath`1 : LinkedList`1<THierarchyItem> {
    public RootPath`1(IEnumerable`1<THierarchyItem> collection);
}
public enum JetBrains.ReSharper.Features.Inspections.Hierarchies.Core.Hierarchies.ShowMembersStyle : Enum {
    public int value__;
    public static ShowMembersStyle Instance;
    public static ShowMembersStyle Polymorphic;
}
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.Core.Hierarchies.TypeHierarchyController : object {
    private OneToListMap`2<IDeclaredElementEnvoy, RootPath`1<IDeclaredElementEnvoy>> myRootPathsMap;
    private ElementEnvoyMap`1<IOccurrence> myBasesOccurrencesMap;
    private ElementEnvoyMap`1<IOccurrence> myInheritorsOccurrenceMap;
    private ElementEnvoyMap`1<IOccurrence> myClassHierarchyOccurrenceMap;
    private ElementEnvoyMap`1<IOccurrence> myImplementorsTreesMap;
    private ElementEnvoyMap`1<IOccurrence> myInterfaceLeavesTreesMap;
    private JetHashSet`1<IDeclaredElementEnvoy> myImplementors;
    private JetHashSet`1<IDeclaredElementEnvoy> myLeaves;
    protected ElementEnvoyMap`1<IOccurrence> BasesOccurrencesMap { get; }
    protected ElementEnvoyMap`1<IOccurrence> InheritorsOccurrenceMap { get; }
    protected ElementEnvoyMap`1<IOccurrence> ClassHierarchyOccurrenceMap { get; }
    protected ElementEnvoyMap`1<IOccurrence> ImplementorsTreesMap { get; }
    protected ElementEnvoyMap`1<IOccurrence> InterfaceLeavesTreesMap { get; }
    public virtual IEnumerable`1<CascadeGroup> GetDefaultRootPath(IOccurrence item, HierarchyDescriptor`1<IDeclaredElementEnvoy> owner);
    private ICollection`1<RootPath`1<IDeclaredElementEnvoy>> CollectPossibleRootPaths(IDeclaredElementEnvoy item, HierarchyDescriptorBase owner, HashSet`1<IDeclaredElementEnvoy> visitedElements);
    private IEnumerable`1<CascadeGroup> GetAdditionalGroupings(IDeclaredElementEnvoy hierarchyItem, HierarchyDescriptor`1<IDeclaredElementEnvoy> owner);
    private IList`1<IOccurrence> GetCachedOccurrences(RootPath`1<IDeclaredElementEnvoy> path, HierarchyDescriptor`1<IDeclaredElementEnvoy> owner);
    private static ICollection`1<RootPath`1<IDeclaredElementEnvoy>> ConcatElementToPathsCollection(ICollection`1<RootPath`1<IDeclaredElementEnvoy>> cachedPathsCollection, IDeclaredElementEnvoy elementToConcat);
    protected virtual IEnumerable`1<CascadeGroup> UpdateGroupingRootPath(IEnumerable`1<CascadeGroup> input, IOccurrence item, HierarchyDescriptor`1<IDeclaredElementEnvoy> owner);
    protected virtual IDeclaredElementEnvoy GetItemFromOccurrence(IOccurrence occurrence);
    protected virtual IOccurrence GetOccurrenceFromItem(IDeclaredElementEnvoy item, TypeHierarchyViewStyle viewStyle);
    private bool IsSpecificRoot(IDeclaredElementEnvoy envoy, TypeHierarchyViewStyle viewStyle);
    protected virtual IEnumerable`1<CascadeGroup> CutOffExternalSubTrees(IEnumerable`1<CascadeGroup> input, IDeclaredElementOccurrence declaredElementOccurrence);
    private IEnumerable`1<IDeclaredElementEnvoy> GetActualNodeParents(IDeclaredElementEnvoy envoy, TypeHierarchyViewStyle viewStyle);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Inspections.Hierarchies.Core.Hierarchies.TypeHierarchyController/<GetActualSuperTypes>d__13")]
protected virtual IEnumerable`1<IDeclaredElementEnvoy> GetActualSuperTypes(IDeclaredElementEnvoy envoy, TypeHierarchyViewStyle viewStyle);
    public virtual bool Equals(IDeclaredElementEnvoy x, IDeclaredElementEnvoy y);
    public virtual int GetHashCode(IDeclaredElementEnvoy envoy);
    public virtual ICollection`1<IOccurrence> GetSubtypeOccurrences(IDeclaredElementEnvoy target);
    protected virtual ICollection`1<IOccurrence> GetSubtypeOccurrencesInternal(IDeclaredElementEnvoy target, ElementEnvoyMap`1<IOccurrence> map);
    public virtual ICollection`1<IOccurrence> GetClassHierarchyOccurrences(IDeclaredElementEnvoy target);
    public virtual ICollection`1<IOccurrence> GetSuperTypesOccurrences(IDeclaredElementEnvoy target);
    protected virtual ICollection`1<IOccurrence> GetSuperTypesOccurrencesInternal(ITypeElement typeElement, ElementEnvoyMap`1<IOccurrence> envoyOccurrenceMap);
    public virtual IList`1<IOccurrence> GetImplementersTreesOccurrences(IDeclaredElementEnvoy target);
    public virtual IList`1<IOccurrence> GetInterfaceLeavesOccurrences(IDeclaredElementEnvoy target);
    private IEnumerable`1<ITypeElement> GetInterfaceLeaves(IDeclaredElementEnvoy targetEnvoy);
    private static IList`1<ITypeElement> GetRootPath(ITypeElement typeElement);
    private IEnumerable`1<ITypeElement> GetImplementingTypes(ITypeElement element);
    protected virtual bool IsTypeElementVisible(ITypeElement typeElement);
    protected virtual ISymbolScope GetCheckingCache(ITypeElement element);
    public virtual void OnViewStyleChanged();
    public bool IsApplicable(IDeclaredElementEnvoy item);
    public virtual void OnRefreshed();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Inspections.Hierarchies.Core.Hierarchies.TypeHierarchyController/<GetActualDerivedTypes>d__38")]
protected virtual IEnumerable`1<IDeclaredElementEnvoy> GetActualDerivedTypes(IDeclaredElementEnvoy envoy, TypeHierarchyViewStyle viewStyle);
    protected ElementEnvoyMap`1<IOccurrence> get_BasesOccurrencesMap();
    protected ElementEnvoyMap`1<IOccurrence> get_InheritorsOccurrenceMap();
    protected ElementEnvoyMap`1<IOccurrence> get_ClassHierarchyOccurrenceMap();
    protected ElementEnvoyMap`1<IOccurrence> get_ImplementorsTreesMap();
    protected ElementEnvoyMap`1<IOccurrence> get_InterfaceLeavesTreesMap();
    protected ElementEnvoyMap`1<IOccurrence> GetViewStyleOccurrencesMap(TypeHierarchyViewStyle viewStyle);
    [CanBeNullAttribute]
public sealed virtual IOccurrence GetCachedOccurrence(IDeclaredElementEnvoy envoy, TypeHierarchyViewStyle viewStyle);
    [CompilerGeneratedAttribute]
private void <GetImplementersTreesOccurrences>b__28_0(ITypeElement element);
    [CompilerGeneratedAttribute]
private void <GetInterfaceLeavesOccurrences>b__29_0(ITypeElement element);
}
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.Core.Hierarchies.TypeHierarchyDescriptor : HierarchyDescriptor`1<IDeclaredElementEnvoy> {
    private TypeHierarchyPresenter myTypeHierarchyPresenter;
    private TypeHierarchyMembersPanelDescriptor myPreviewControlDescriptor;
    public StructuredPresenter`2<TreeModelNode, IPresentableItem> Presenter { get; }
    public TypeDependenciesOptions DiagrammingOptions { get; }
    public TypeHierarchyDescriptor(IHierarchyController`1<IDeclaredElementEnvoy> controller, IDeclaredElementEnvoy target, TypeHierarchyViewStyle viewStyle, bool filterExternalElements, ISolution solution, Func`2<ICollection`1<IOccurrence>, ICollection`1<IOccurrence>> occurrencesFilter);
    protected virtual HierarchyPresenterBase`1<IDeclaredElementEnvoy> CreatePresenter();
    public virtual void UpdateHierarchy();
    public virtual StructuredPresenter`2<TreeModelNode, IPresentableItem> get_Presenter();
    internal bool IsImmediate(TreeModelNode modelNode);
    private bool IsImmediateRelation(ITypeElement nodeElement, ITypeElement parentElement);
    public virtual void PreviewUpdate(IPreviewControl previewControl, TreeModelNode modelNode);
    public virtual IPreviewControl PreviewCreateControl(Lifetime lifetime);
    protected virtual TypeHierarchyMembersPanelDescriptor CreateTypeHierarchyMembersPanelDescriptor();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Inspections.Hierarchies.Core.Hierarchies.TypeHierarchyDescriptor/<GetTypeElementsForDiagram>d__12")]
public sealed virtual IEnumerable`1<ITypeElement> GetTypeElementsForDiagram();
    public sealed virtual bool HasTypeElementsForDiagram();
    public sealed virtual TypeDependenciesOptions get_DiagrammingOptions();
    [CompilerGeneratedAttribute]
private void <UpdateHierarchy>b__3_0();
    [CompilerGeneratedAttribute]
private void <UpdateHierarchy>b__3_1();
    [CompilerGeneratedAttribute]
private void <PreviewCreateControl>b__10_0();
}
internal class JetBrains.ReSharper.Features.Inspections.Hierarchies.Core.Hierarchies.TypeHierarchyMemberLocation : object {
    private DeclaredElementEnvoy`1<ITypeElement> myTypeElement;
    private DeclaredElementEnvoy`1<ITypeMember> myMember;
    public ITypeElement TypeElement { get; }
    public ITypeMember Member { get; }
    public TypeHierarchyMemberLocation(ITypeElement typeElement, ITypeMember member);
    public ITypeElement get_TypeElement();
    public ITypeMember get_Member();
    public sealed virtual bool Equals(TypeHierarchyMemberLocation typeHierarchyMemberLocation);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.Core.Hierarchies.TypeHierarchyMembersPanelDescriptor : TreeModelBrowserDescriptorPsi {
    private HierarchyDescriptor`1<IDeclaredElementEnvoy> myParentDescriptor;
    private Func`2<ITypeMember, bool> myMemberIsVisible;
    private TreeModel myModel;
    private TypeHierarchyMembersPresenter myPresenter;
    private DeclaredElementEnvoy`1<ITypeElement> myTypeElementEnvoy;
    private ShowMembersStyle myShowMembers;
    public ITypeElement TypeElement { get; public set; }
    public HierarchyDescriptor`1<IDeclaredElementEnvoy> ParentDescriptor { get; }
    public ShowMembersStyle ShowMembers { get; public set; }
    public string ActionBarID { get; }
    public string ContextMenuID { get; }
    public TreeModel Model { get; }
    public StructuredPresenter`2<TreeModelNode, IPresentableItem> Presenter { get; }
    public TypeHierarchyMembersPanelDescriptor(HierarchyDescriptor`1<IDeclaredElementEnvoy> parentDescriptor, ISolution solution, Func`2<ITypeMember, bool> memberIsVisible);
    public ITypeElement get_TypeElement();
    public void set_TypeElement(ITypeElement value);
    public HierarchyDescriptor`1<IDeclaredElementEnvoy> get_ParentDescriptor();
    private void MakeModel();
    public void UpdateMembers();
    public virtual bool Navigate(TreeModelNode node, PopupWindowContextSource windowContext, bool transferFocus, TabOptions options);
    public ShowMembersStyle get_ShowMembers();
    public void set_ShowMembers(ShowMembersStyle value);
    public virtual string get_ActionBarID();
    public virtual string get_ContextMenuID();
    public virtual TreeModel get_Model();
    public virtual StructuredPresenter`2<TreeModelNode, IPresentableItem> get_Presenter();
}
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.Core.Hierarchies.TypeHierarchyMembersPresenter : TreeModelBrowserPresenter {
    private void PresentMemberLocation(TypeHierarchyMemberLocation value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    protected virtual void PresentTypeMember(ITypeMember value, ISubstitution substitution, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
}
public static class JetBrains.ReSharper.Features.Inspections.Hierarchies.Core.Hierarchies.TypeHierarchyPresentationUtil : object {
    public static RichText GetAssemblyInfoOccurrenceText(IAssemblyAttributeOccurrence assemblyAttributeOccurrence);
    [CanBeNullAttribute]
public static IconId GetIcon(IOccurrence occurrence, ProjectModelElementPresentationService projectModelElementPresentationService);
    public static RichText GeProjectItemOccurrenceText(ProjectItemOccurrence value);
}
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.Core.Hierarchies.TypeHierarchyPresenter : HierarchyPresenterBase`1<IDeclaredElementEnvoy> {
    private static IconId ourRecursionImage;
    private TypeHierarchyDescriptor myOwner;
    public TypeHierarchyPresenter(TypeHierarchyDescriptor owner);
    private static TypeHierarchyPresenter();
    private void PresentAdorementsHandle(object value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
}
public static class JetBrains.ReSharper.Features.Inspections.Hierarchies.Core.Hierarchies.TypeHierarchyUtil : object {
    public static void AggregateBaseElements(ITypeElement typeElement, List`1<ITypeElement> baseElements, ITypeElement objectType, bool filterExternalElements);
    private static void AggregateBaseElementsInternal(ITypeElement typeElement, List`1<ITypeElement> baseElements, ITypeElement objectType, bool filterExternalElements, JetHashSet`1<ITypeElement> visitedElements);
}
[GlobalSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.Core.Hierarchies.TypeHierarchyViewSettingsUpgrader : SettingTablesUpgrader {
    public TypeHierarchyViewSettingsUpgrader(ProductConfigurations productConfigurations);
    protected virtual void DoUpgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime, SettingsTableBase workspaceSettingsTable, SettingsTableBase globalSettingsTable);
}
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.Core.Hierarchies.WrappedPresentableStructureElement : ValueType {
    [CompilerGeneratedAttribute]
private object <PresentationObject>k__BackingField;
    public object PresentationObject { get; }
    public WrappedPresentableStructureElement(object dataValue);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual object get_PresentationObject();
}
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.HierarchyOptionsEventArgs : EventArgs {
    private TypeHierarchyViewStyle myViewStyle;
    public TypeHierarchyViewStyle ViewStyle { get; }
    public HierarchyOptionsEventArgs(TypeHierarchyViewStyle viewStyle);
    public TypeHierarchyViewStyle get_ViewStyle();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.HierarchyProvidersManager : object {
    private IFeaturePartsContainer myFeatureParts;
    public HierarchyProvidersManager(IFeaturePartsContainer featureParts);
    [CanBeNullAttribute]
public static HierarchyProvidersManager TryGetInstance(ISolution solution);
    [CanBeNullAttribute]
public HierarchyDescriptorBase TryCreateDescriptor(IDataContext dataContext);
    private IEnumerable`1<IHierarchyDescriptorFactory> GetApplicableFactories(IDataContext dataContext);
    public bool IsHierarchyAvailable(IDataContext dataContext);
}
[ActionAttribute("TypeHierarchy.BaseOnThis", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "BaseOnThisActionText")]
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.MemberHierarchy.Actions.BaseOnThisMemberAction : BaseOnThisTypeAction {
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("TypeHierarchy.IncludeExternalElements", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ShowElementsFromThisSolutionActionText")]
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.MemberHierarchy.Actions.FilterAction : ApplyHierarchyFilterAction {
    public virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
}
[ActionAttribute("TypeHierarchy.ImplementationHierarchy", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ImplementationHierarchyActionText")]
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.MemberHierarchy.Actions.ImplementorsAction : ImplementingTypesHierarchyAction {
    public virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
}
[ActionAttribute("TypeHierarchy.InterfaceLeaves", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "InterfaceLeavesActionText")]
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.MemberHierarchy.Actions.InterfaceLeavesAction : InterfaceLeavesHierarchyAction {
    public virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
}
[ActionAttribute("TypeHierarchy.SubTypesHierarchy", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "SubtypesHierarchyActionText")]
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.MemberHierarchy.Actions.SubMembersActions : SubTypesHierarchyAction {
    public virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
}
[ActionAttribute("TypeHierarchy.SuperTypesHierarchy", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "SupertypesHierarchyActionText")]
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.MemberHierarchy.Actions.SuperMembersAction : SuperTypesHierarchyAction {
    public virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
}
[ActionAttribute("TypeHierarchy.ClassHierarchy", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ClassHierarchyActionText")]
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.MemberHierarchy.Actions.WholeMembersHierarchyActions : ClassHierarchyAction {
    public virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
}
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.MemberHierarchy.MembersHierarchyController : TypeHierarchyController {
    protected virtual ICollection`1<IOccurrence> GetSubtypeOccurrencesInternal(IDeclaredElementEnvoy target, ElementEnvoyMap`1<IOccurrence> map);
    protected virtual IEnumerable`1<CascadeGroup> UpdateGroupingRootPath(IEnumerable`1<CascadeGroup> input, IOccurrence item, HierarchyDescriptor`1<IDeclaredElementEnvoy> owner);
    protected virtual IDeclaredElementEnvoy GetItemFromOccurrence(IOccurrence occurrence);
    protected virtual IEnumerable`1<CascadeGroup> CutOffExternalSubTrees(IEnumerable`1<CascadeGroup> input, IDeclaredElementOccurrence declaredElementOccurrence);
    public virtual ICollection`1<IOccurrence> GetClassHierarchyOccurrences(IDeclaredElementEnvoy target);
    public virtual ICollection`1<IOccurrence> GetSuperTypesOccurrences(IDeclaredElementEnvoy target);
    public virtual IList`1<IOccurrence> GetImplementersTreesOccurrences(IDeclaredElementEnvoy target);
    public virtual IList`1<IOccurrence> GetInterfaceLeavesOccurrences(IDeclaredElementEnvoy target);
}
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.MemberHierarchy.MembersHierarchyDescriptor : HierarchyDescriptor`1<IDeclaredElementEnvoy> {
    private MembersHierarchyPresenter myMembersPresenter;
    private IPreviewSupportProvider myPreviewSupportProvider;
    public StructuredPresenter`2<TreeModelNode, IPresentableItem> Presenter { get; }
    public PreviewSupport PreviewSupport { get; }
    public MembersHierarchyDescriptor(MembersHierarchyController controller, DeclaredElementEnvoy`1<ITypeMember> declaredElementEnvoy, TypeHierarchyViewStyle viewStyle, bool filterExternalElements, ISolution solution, Func`2<ICollection`1<IOccurrence>, ICollection`1<IOccurrence>> occurrencesFilter);
    protected virtual HierarchyPresenterBase`1<IDeclaredElementEnvoy> CreatePresenter();
    protected virtual void UpdateTitle();
    public virtual IEnumerable`1<TreeModelNode> GetDefaultNodes(TreeModel model);
    public virtual StructuredPresenter`2<TreeModelNode, IPresentableItem> get_Presenter();
    public virtual PreviewSupport get_PreviewSupport();
}
[ShellFeaturePartAttribute("0")]
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.MemberHierarchy.MembersHierarchyDescriptorFactory : TypeHierarchyDescriptorFactory {
    public MembersHierarchyDescriptorFactory(IUIApplication environment);
    public virtual HierarchyDescriptorBase CreateDescriptor(IDataContext dataContext);
    protected virtual HierarchyDescriptorBase CreateDescriptor(MembersHierarchyController controller, DeclaredElementEnvoy`1<ITypeMember> declaredElementEnvoy, TypeHierarchyViewStyle viewStyle, bool filterExternalElements, ISolution solution);
    public virtual bool IsApplicable(IDataContext dataContext);
}
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.MemberHierarchy.MembersHierarchyPresenter : HierarchyPresenterBase`1<IDeclaredElementEnvoy> {
    private IDeclaredElementEnvoy myTarget;
    private IconId myActiveImage;
    private IconId myInactiveImage;
    private DeclaredElementPresenterStyle myTypeElementShortNameStyle;
    private DeclaredElementPresenterStyle myNsStyle;
    public MembersHierarchyPresenter(HierarchyDescriptor`1<IDeclaredElementEnvoy> owner, ProjectModelElementPresentationService projectModelElementPresentationService);
    private void OwnersTargetChanged(PropertyChangedEventArgs`1<IDeclaredElementEnvoy> propertyChangedEventArgs);
    protected virtual void PresentDeclaredElementOccurrence(IDeclaredElementOccurrence value, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
    private void PresentTarget(ITypeMember target, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
    private void PresentOverriddenTypeMember(IDeclaredElementEnvoy envoy, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
    private void PresentHole(IDeclaredElementEnvoy envoy, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    protected virtual void PresentTypeMember(ITypeMember value, ISubstitution substitution, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    protected virtual void PresentTypeElement(ITypeElement value, ISubstitution substitution, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
}
public abstract class JetBrains.ReSharper.Features.Inspections.Hierarchies.Members.MembersFilterBaseAction : object {
    public ShowMembersStyle MembersStyle { get; }
    public sealed virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public sealed virtual void Execute(IDataContext context);
    public abstract virtual ShowMembersStyle get_MembersStyle();
}
[ActionAttribute("TypeHierarchyMembers.ShowInstance", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "AllInstanceMembersActionText")]
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.Members.ShowMemberAllAction : MembersFilterBaseAction {
    public ShowMembersStyle MembersStyle { get; }
    public virtual ShowMembersStyle get_MembersStyle();
}
[ActionAttribute("TypeHierarchyMembers.ShowPolymorphic", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "OnlyPolymorphicMembersActionText")]
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.Members.ShowMemberPolymorphicAction : MembersFilterBaseAction {
    public ShowMembersStyle MembersStyle { get; }
    public virtual ShowMembersStyle get_MembersStyle();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.TypeHierarchy.Components.DefaultTypeHierarchyHelper : object {
    public virtual bool AllowExcludingExternalElements();
}
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.TypeHierarchy.CustomModels.TypeHierarchyImplementationModel : TypeHierarchyModelBase {
    public TypeHierarchyImplementationModel(IDeclaredElementEnvoy typeElementEnvoy);
    protected virtual bool HasChildren(TreeModelNode modelNode);
    protected virtual IEnumerable GetChildren(TreeModelNode modelNode);
}
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.TypeHierarchy.CustomModels.TypeHierarchyInterfaceLeavesModel : TypeHierarchyModelBase {
    public TypeHierarchyInterfaceLeavesModel(IDeclaredElementEnvoy typeElementEnvoy);
    protected virtual bool HasChildren(TreeModelNode modelNode);
    protected virtual IEnumerable GetChildren(TreeModelNode modelNode);
}
public abstract class JetBrains.ReSharper.Features.Inspections.Hierarchies.TypeHierarchy.CustomModels.TypeHierarchyModelBase : TreeDemandModel {
    private IDeclaredElementEnvoy myTypeElementEnvoy;
    public IDeclaredElementEnvoy TypeElementEnvoy { get; }
    public ITypeElement TypeElement { get; }
    protected TypeHierarchyModelBase(IDeclaredElementEnvoy typeElementEnvoy);
    public IDeclaredElementEnvoy get_TypeElementEnvoy();
    public ITypeElement get_TypeElement();
    protected IEnumerable GetSupertypesChildren(object dataValue);
    protected static bool HasSubtypes(object dataValue);
    protected static bool HasSuperTypes(object dataValue);
    protected static bool HasSuperInterfaces(object dataValue);
    protected IEnumerable GetImplementingTypes(object dataValue);
    private static ISymbolScope GetCheckingCache(ITypeElement element);
    protected IEnumerable GetInterfaceLeaves(object dataValue);
    protected IEnumerable GetSubtypesChildren(object dataValue);
}
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.TypeHierarchy.CustomModels.TypeHierarchySubtypesModel : TypeHierarchyModelBase {
    public TypeHierarchySubtypesModel(DeclaredElementEnvoy`1<ITypeElement> typeElementEnvoy);
    protected virtual bool HasChildren(TreeModelNode modelNode);
    protected virtual IEnumerable GetChildren(TreeModelNode modelNode);
}
public interface JetBrains.ReSharper.Features.Inspections.Hierarchies.TypeHierarchy.ITypeHierarchyDescriptorFactory {
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.TypeHierarchy.TypeElementHierarchyGroupingProvider : TypeHierarchyGroupingProvider`1<IDeclaredElementEnvoy> {
}
[ShellFeaturePartAttribute("0")]
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.TypeHierarchy.TypeHierarchyDescriptorFactory : object {
    private static ILogger ourLogger;
    private IUIApplication myEnvironment;
    public TypeHierarchyDescriptorFactory(IUIApplication environment);
    private static TypeHierarchyDescriptorFactory();
    [CanBeNullAttribute]
public virtual HierarchyDescriptorBase CreateDescriptor(IDataContext dataContext);
    protected virtual TypeHierarchyDescriptor CreateDescriptor(TypeHierarchyController controller, DeclaredElementEnvoy`1<ITypeElement> targetEnvoy, TypeHierarchyViewStyle typeHierarchyViewStyle, bool filterExternalElement, ISolution solution, IUIApplication environment);
    protected virtual TypeHierarchyController CreateController();
    public virtual bool IsApplicable(IDataContext dataContext);
    private static IClrDeclaredElement GetElement(IDataContext context);
    private static ITypeElement GetTypeElement(IType type);
}
public abstract class JetBrains.ReSharper.Features.Inspections.Hierarchies.TypeHierarchy.TypeHierarchyGroupingProvider`1 : OccurrenceBrowserGroupingProvider {
    public virtual ICollection`1<TreeModelGrouping`1<IOccurrence>> GetGroupings(TreeModelBrowserDescriptorBase descriptor);
    public virtual bool IsApplicable(TreeModelBrowserDescriptorBase descriptor);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Features.Inspections.Hierarchies.TypeHierarchy.TypeHierarchySectionProvider : OccurrenceSectionProvider {
    public virtual bool IsApplicable(IOccurrenceBrowserDescriptor descriptor);
    public virtual ICollection`1<TreeSection> GetTreeSections(IOccurrenceBrowserDescriptor descriptor);
}
[ToolWindowDescriptorAttribute("16")]
public class JetBrains.ReSharper.Features.Inspections.HierarchyToolWindowDescriptor : ToolWindowDescriptor {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Features.Inspections.HierarchyToolWindowEmptyContent : ToolWindowEmptyContentWithActionHint {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
private HierarchyToolWindowEmptyContent(HierarchyToolWindowEmptyContent original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(HierarchyToolWindowEmptyContent left, HierarchyToolWindowEmptyContent right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(HierarchyToolWindowEmptyContent left, HierarchyToolWindowEmptyContent right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ToolWindowEmptyContentWithActionHint other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(HierarchyToolWindowEmptyContent other);
    [CompilerGeneratedAttribute]
public virtual AAutomationRecord <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Features.Inspections.HierarchyWindowRegistrar : object {
    protected ToolWindowManager myToolWindowManager;
    protected bool myToolWindowsAllowed;
    protected Lifetime myLifetime;
    public HierarchyWindowRegistrar(Lifetime lifetime, ISolution solution, ToolWindowManager toolWindowManager);
    public virtual void Show(TreeModelBrowserDescriptor browserDescriptor);
    public void Show(LifetimeDefinition definition, IAutomation content, string title, IconId image);
}
[ActionGroupAttribute("0", "10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Inspections.Menus.BrowseTypeHierarchyActionIntoAssemblyExplorerContextMenu : object {
    public BrowseTypeHierarchyActionIntoAssemblyExplorerContextMenu(BrowseTypeHierarchyAction browseTypeHierarchyAction);
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.ReSharper.Features.Inspections.Menus.IntoAnalyseContextualMenu : object {
    public IntoAnalyseContextualMenu(InspectThisAction inspectThisAction, Separator sep, InspectMenuActionGroup inpectThisActionGroup);
}
[ActionAttribute("ProjectHierarchy.BaseOnThis", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "BaseOnThisActionText")]
public class JetBrains.ReSharper.Features.Inspections.ProjectHierarchy.BaseOnThisModuleAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public abstract class JetBrains.ReSharper.Features.Inspections.ProjectHierarchy.BrowseHierarchyActionBase : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    [CanBeNullAttribute]
protected virtual IModule TryGetModule(IDataContext context);
    [CanBeNullAttribute]
private IModule TryGetModuleByModelElement(IProjectModelElement modelElement);
    [CanBeNullAttribute]
private IModule TryGetModuleByReference(IProjectToModuleReference projectToModuleReference);
    [CanBeNullAttribute]
protected abstract virtual IProjectHierarchyManager TryGetProjectHierarchyManager(ISolution solution);
    protected virtual bool ExtraContextCheck(IDataContext context);
}
[ActionAttribute("ProjectHierarchy.Browse", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ShowProjectHierarchyActionText")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Inspections.ProjectHierarchy.BrowseProjectHierarchyAction : BrowseHierarchyActionBase {
    public static string ProjectHierarchyId;
    protected virtual IProjectHierarchyManager TryGetProjectHierarchyManager(ISolution solution);
}
[InspectThisProviderAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Inspections.ProjectHierarchy.ProjectHierarchyInspectThisProvider : object {
    private static int Order;
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Inspections.ProjectHierarchy.ProjectHierarchyInspectThisProvider/<CreateWorkflow>d__1")]
public sealed virtual IEnumerable`1<InspectGroupWorkflow> CreateWorkflow(IDataContext dataContext);
}
public class JetBrains.ReSharper.Features.Inspections.ReferencesHierarchy.AssemblyUsagesModel : ProjectHierarchyModelBase {
    private IAssemblyCollection myAssemblyCollection;
    public AssemblyUsagesModel(ProjectModelElementEnvoy projectModelElementEnvoy, IAssemblyCollection assemblyCollection);
    protected virtual IEnumerable GetChildren(TreeModelNode modelNode);
}
[ActionAttribute("JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ReferencesHierarchyActionText")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Inspections.ReferencesHierarchy.BrowseReferencesHierarchyAction : BrowseHierarchyActionBase {
    protected virtual bool ExtraContextCheck(IDataContext context);
    protected virtual IModule TryGetModule(IDataContext context);
    protected virtual IProjectHierarchyManager TryGetProjectHierarchyManager(ISolution solution);
}
[ActionGroupAttribute("0", "10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Inspections.ReferencesHierarchy.ReferencesHierarchyActionGroup : object {
    public ReferencesHierarchyActionGroup(BrowseReferencesHierarchyAction browseReferencesHierarchyAction);
}
public class JetBrains.ReSharper.Features.Inspections.ReferencesHierarchy.ReferencesHierarchyModelFactory : ProjectHierarchyManager {
    private IAssemblyCollection myAssemblyCollection;
    public ReferencesHierarchyModelFactory(IAssemblyCollection assemblyCollection);
    public virtual bool IsViewStyleAvailable(ProjectHierarchyViewStyle style, IProjectModelElement projectModelElement);
    public virtual ProjectHierarchyViewStyle GetDefaultStyle(ProjectHierarchyViewStyle viewStyle, IModule module);
    protected virtual TreeModel MakeUsagesModel(ProjectModelElementEnvoy projectModelElementEnvoy, bool showAssemblies);
    protected virtual TreeModel MakeReferencesModel(ProjectModelElementEnvoy projectModelElementEnvoy, bool showAssemblies);
}
public class JetBrains.ReSharper.Features.Inspections.Resources.CallHierarchyThemedIcons : object {
}
public class JetBrains.ReSharper.Features.Inspections.Resources.FeaturesInspectionsThemedIcons : object {
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Features.Inspections.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string AllInstanceMembersActionText { get; }
    public static string AnalyzeReferencesActionGroupText { get; }
    public static string AnalyzeReferencesSettingsSettingDescription { get; }
    public static string AssemblyReferenceContextMenuActionGroupText { get; }
    public static string AutomaticallyScrollToSourceActionText { get; }
    public static string BaseOnThisActionText { get; }
    public static string BookmarksActionGroupText { get; }
    public static string BookmarksActionText { get; }
    public static string BookmarkTooltipText { get; }
    public static string Bookmark_Text { get; }
    public static string CallHierarchyActionGroupText { get; }
    public static string CallHierarchyActionText { get; }
    public static string ClassHierarchyActionText { get; }
    public static string ClearAllBookmarksActionText { get; }
    public static string ClearAllBookmarksInDocumentActionText { get; }
    public static string ClearUsedAtRuntimeMarkActionText { get; }
    public static string CodeStructureWindowSettingsSettingDescription { get; }
    public static string ContainingModulesHierarchy_Text { get; }
    public static string DisabledFiltersSettingDescription { get; }
    public static string ExplorerToolbarActionGroupText { get; }
    public static string FileStructureActionBarActionGroupText { get; }
    public static string FileStructureActionText { get; }
    public static string FileStructure_Text { get; }
    public static string FilterToDoItemsActionText { get; }
    public static string FilterUsagesActionGroupText { get; }
    public static string FindCodeDependentOnModuleActionText { get; }
    public static string GoToBookmark0ActionText { get; }
    public static string GoToBookmark1ActionText { get; }
    public static string GoToBookmark2ActionText { get; }
    public static string GoToBookmark3ActionText { get; }
    public static string GoToBookmark4ActionText { get; }
    public static string GoToBookmark5ActionText { get; }
    public static string GoToBookmark6ActionText { get; }
    public static string GoToBookmark7ActionText { get; }
    public static string GoToBookmark8ActionText { get; }
    public static string GoToBookmark9ActionText { get; }
    public static string GroupByIndexSettingDescription { get; }
    public static string HierarchiesActionText { get; }
    public static string ImplementationHierarchyActionText { get; }
    public static string InspectActionGroupText { get; }
    public static string InspectionsActionText { get; }
    public static string InterfaceLeavesActionText { get; }
    public static string LocateInToDoExplorerActionText { get; }
    public static string MarkReferenceAsUsedAtRuntimeActionText { get; }
    public static string MarkReferenceAsUsedAtRuntimeForWholeSolutionActionText { get; }
    public static string ModuleReferencesActionText { get; }
    public static string OnlyPolymorphicMembersActionText { get; }
    public static string OptimizeReferencesActionText { get; }
    public static string PaintItemsActionText { get; }
    public static string ProjectHierarchyActionGroupText { get; }
    public static string ReferencesHierarchyActionText { get; }
    public static string RefreshActionText { get; }
    public static string RemoveAllUnusedReferencesActionText { get; }
    public static string RemoveSelectedReferencesActionText { get; }
    public static string RemoveUnusedReferencesActionText { get; }
    public static string RemoveUnusedReferencesContextMenuActionGroupText { get; }
    public static string RuntimeReferencesSettingsActionGroupText { get; }
    public static string SafeDeleteAssemblyReferencesActionGroupText { get; }
    public static string ShowElementsFromThisSolutionActionText { get; }
    public static string ShowPreprocessorDirectivesActionText { get; }
    public static string ShowPreprocessorDirectivesSettingDescription { get; }
    public static string ShowProjectHierarchyActionText { get; }
    public static string ShowRelatedUsagesActionText { get; }
    public static string ShowToDoItemsInGeneratedCodeActionText { get; }
    public static string ShowUnusedReferencesActionText { get; }
    public static string StopExpandingActionText { get; }
    public static string SubtypesHierarchyActionText { get; }
    public static string SupertypesHierarchyActionText { get; }
    public static string SurroundWithRegionActionText { get; }
    public static string SynchronizeCaretToViewSettingDescription { get; }
    public static string SynchronizeViewToCaretSettingDescription { get; }
    public static string ThisModulesNameAlwaysAssumedToBeUsedInAnalyzeReferencesSettingDescription { get; }
    public static string ToDoExplorerActionGroupText { get; }
    public static string ToDoExplorerAmpActionText { get; }
    public static string ToDoExplorerActionText { get; }
    public static string ToDoExplorerOptionPageTitle { get; }
    public static string TodoFilterSettingsSettingDescription { get; }
    public static string ToDoSettingsActionText { get; }
    public static string ToggleBookmark0ActionText { get; }
    public static string ToggleBookmark1ActionText { get; }
    public static string ToggleBookmark2ActionText { get; }
    public static string ToggleBookmark3ActionText { get; }
    public static string ToggleBookmark4ActionText { get; }
    public static string ToggleBookmark5ActionText { get; }
    public static string ToggleBookmark6ActionText { get; }
    public static string ToggleBookmark7ActionText { get; }
    public static string ToggleBookmark8ActionText { get; }
    public static string ToggleBookmark9ActionText { get; }
    public static string TrackCaretInEditorActionText { get; }
    public static string TypeHierarchyActionGroupText { get; }
    public static string TypeHierarchyMembersActionGroupText { get; }
    public static string TypeHierarchyViewSettingsSettingDescription { get; }
    public static string ValueTrackingActionGroupText { get; }
    public static string ViewStyleSettingDescription { get; }
    public static string ShowIncomingCallsAction_Title { get; }
    public static string ShowOutgoingCallsAction_Title { get; }
    public static string BrowseTypeHierarchyAction_Title { get; }
    public static string ValueTrackingDownAction_Title { get; }
    public static string ValueTrackingUpAction_Title { get; }
    public static string NoUsagesWereFoundInTheseReferencedAssemblies_Text { get; }
    public static string SelectUnusedProjectReferences_Text { get; }
    public static string NoUnusedAssemblyReferencesFound_Text { get; }
    public static string _AnalyzeUsedReferences_Text { get; }
    public static string SeveralUsagesWereFoundInSelectedReferenced_Text { get; }
    public static string ConfirmRemove_Text { get; }
    public static string Remove_onlyUnusedReferences_Text { get; }
    public static string CannotEvaluate_ThereAreTooManyReferences_Text { get; }
    public static string RemovingAssemblyReferences_Text { get; }
    public static string RemoveUnusedProjectReferences_Text { get; }
    public static string RemoveUnusedReferences_Text { get; }
    public static string ProcessingProject__Text { get; }
    public static string PredefinedIgnoredReferencesInAnalyze_Text { get; }
    public static string SafeDeleteAssemblyReference_Text { get; }
    public static string ModulesAxis_Text { get; }
    public static string DirectUsage_Text { get; }
    public static string UnusedProjectReference_Text { get; }
    public static string UsedProjectReference_Text { get; }
    public static string UnusedAssemblyReferences_Text { get; }
    public static string DecomposableNugets_Text { get; }
    public static string DirectUsages_Text { get; }
    public static string ImplicitUsages_Text { get; }
    public static string SearchDependentCode_Text { get; }
    public static string CodeReferencedIn__Text { get; }
    public static string UnusedReferences_Text { get; }
    public static string NoUnusedReferencesForThisProject_Text { get; }
    public static string NoAssemblyReferencesFound_Text { get; }
    public static string InstalledIn__Text { get; }
    public static string _UsedDependencies_Text { get; }
    public static string _UsedDependency_Text { get; }
    public static string UnusedDependency_Text { get; }
    public static string NewAnonymousBookmark_Text { get; }
    public static string Bookmarks_Text { get; }
    public static string SetNumberedAddAnonymous_Text { get; }
    public static string ClearNumberedDeleteAnonymous_Text { get; }
    public static string NotSet_Text { get; }
    public static string Bookmark__Text { get; }
    public static string ClearAllBookmarks_Text { get; }
    public static string ClearAllBookmarksInDocument_Text { get; }
    public static string CouldNotGoToBookmark___Text { get; }
    public static string FieldInitializer_Text { get; }
    public static string Closure_Text { get; }
    public static string PolymorphicCall_Text { get; }
    public static string BookmarkIsNotSet_Text { get; }
    public static string PublicConstructor_Text { get; }
    public static string GenericConstructorCall_Text { get; }
    public static string ExpandingNode_Text { get; }
    public static string ExpressionIn__Text { get; }
    public static string UnknownSymbol_Text { get; }
    public static string Recursion_Text { get; }
    public static string AtLines__Text { get; }
    public static string Invalid_Text { get; }
    public static string SubtypesOf__Text { get; }
    public static string SupertypesOf__Text { get; }
    public static string ImplementationsOf__Text { get; }
    public static string LeafInterfacesOf__Text { get; }
    public static string HierarchyOf__Text { get; }
    public static string ShowMembers_Text { get; }
    public static string UnknownModule_Text { get; }
    public static string UnknownAssembly_Text { get; }
    public static string Inheritor_Text { get; }
    public static string BaseType_Text { get; }
    public static string SearchingForInheritors_Text { get; }
    public static string TypeMembers_Text { get; }
    public static string RecursiveInheritance__ToolTip { get; }
    public static string HideSubTreesWithoutImplementation_Text { get; }
    public static string ShowSubHierarchy_Text { get; }
    public static string ShowWholeHierarchy_Text { get; }
    public static string SubhierarchyOf__Text { get; }
    public static string HierarchyFor_ContainsAllTypesAndMay_Text { get; }
    public static string Hierarchy_Text { get; }
    public static string NoHierarchiesOpen_Text { get; }
    public static string OnAnItemToSeeHierarchy_Text { get; }
    public static string ClearSelection_Text { get; }
    public static string SelectAll_Text { get; }
    public static string OriginOf__Text { get; }
    public static string DestinationOf__Text { get; }
    public static string _In__Text { get; }
    public static string Patterns_Caption { get; }
    public static string ToDoExplorer_Text { get; }
    public static string LocateInToDoExplorer_Caption { get; }
    public static string ShowPRojectHierarchy_Caption { get; }
    public static string Item_DonTHaveFileStructureAspect_Text { get; }
    public static string CodeStructure_Text { get; }
    public static string IncomingCallsTo__Text { get; }
    public static string OutgoingCallsFrom__Text { get; }
    public static string AnalyzeReferences_Text { get; }
    public static string BuildingAssemblyReferencesTree_Text { get; }
    public static string CallHierarchy_Text { get; }
    public static string TypeHierarchy_Text { get; }
    public static string Add_Button_Text { get; }
    public static string AddPattern_Button_Text { get; }
    public static string Duplicate_Button_Text { get; }
    public static string DuplicatePattern_Button_Text { get; }
    public static string Edit_Button_Text { get; }
    public static string EditPattern_Button_Text { get; }
    public static string Remove_Button_Text { get; }
    public static string RemoveReferenceWarning_PackagesRemoved { get; }
    public static string RemoveReferenceWarning_ReferencesWillBeRemoved { get; }
    public static string RemoveReferenceWarning_UsedReferenceRemoved { get; }
    public static string RemoveReferenceWarning_ChangesDetected { get; }
    public static string RemoveReferenceWarning_ConfirmationMessage { get; }
    public static string _FromInitializer_Text { get; }
    public static string _Implicit_Text { get; }
    public static string NoModulesToAnalyzeOpen_Text { get; }
    public static string OnAModuleToAnalyzeItsReferencesAndRemoveUnused_Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_AllInstanceMembersActionText();
    public static string get_AnalyzeReferencesActionGroupText();
    public static string get_AnalyzeReferencesSettingsSettingDescription();
    public static string get_AssemblyReferenceContextMenuActionGroupText();
    public static string get_AutomaticallyScrollToSourceActionText();
    public static string get_BaseOnThisActionText();
    public static string get_BookmarksActionGroupText();
    public static string get_BookmarksActionText();
    public static string get_BookmarkTooltipText();
    public static string get_Bookmark_Text();
    public static string get_CallHierarchyActionGroupText();
    public static string get_CallHierarchyActionText();
    public static string get_ClassHierarchyActionText();
    public static string get_ClearAllBookmarksActionText();
    public static string get_ClearAllBookmarksInDocumentActionText();
    public static string get_ClearUsedAtRuntimeMarkActionText();
    public static string get_CodeStructureWindowSettingsSettingDescription();
    public static string get_ContainingModulesHierarchy_Text();
    public static string get_DisabledFiltersSettingDescription();
    public static string get_ExplorerToolbarActionGroupText();
    public static string get_FileStructureActionBarActionGroupText();
    public static string get_FileStructureActionText();
    public static string get_FileStructure_Text();
    public static string get_FilterToDoItemsActionText();
    public static string get_FilterUsagesActionGroupText();
    public static string get_FindCodeDependentOnModuleActionText();
    public static string get_GoToBookmark0ActionText();
    public static string get_GoToBookmark1ActionText();
    public static string get_GoToBookmark2ActionText();
    public static string get_GoToBookmark3ActionText();
    public static string get_GoToBookmark4ActionText();
    public static string get_GoToBookmark5ActionText();
    public static string get_GoToBookmark6ActionText();
    public static string get_GoToBookmark7ActionText();
    public static string get_GoToBookmark8ActionText();
    public static string get_GoToBookmark9ActionText();
    public static string get_GroupByIndexSettingDescription();
    public static string get_HierarchiesActionText();
    public static string get_ImplementationHierarchyActionText();
    public static string get_InspectActionGroupText();
    public static string get_InspectionsActionText();
    public static string get_InterfaceLeavesActionText();
    public static string get_LocateInToDoExplorerActionText();
    public static string get_MarkReferenceAsUsedAtRuntimeActionText();
    public static string get_MarkReferenceAsUsedAtRuntimeForWholeSolutionActionText();
    public static string get_ModuleReferencesActionText();
    public static string get_OnlyPolymorphicMembersActionText();
    public static string get_OptimizeReferencesActionText();
    public static string get_PaintItemsActionText();
    public static string get_ProjectHierarchyActionGroupText();
    public static string get_ReferencesHierarchyActionText();
    public static string get_RefreshActionText();
    public static string get_RemoveAllUnusedReferencesActionText();
    public static string get_RemoveSelectedReferencesActionText();
    public static string get_RemoveUnusedReferencesActionText();
    public static string get_RemoveUnusedReferencesContextMenuActionGroupText();
    public static string get_RuntimeReferencesSettingsActionGroupText();
    public static string get_SafeDeleteAssemblyReferencesActionGroupText();
    public static string get_ShowElementsFromThisSolutionActionText();
    public static string get_ShowPreprocessorDirectivesActionText();
    public static string get_ShowPreprocessorDirectivesSettingDescription();
    public static string get_ShowProjectHierarchyActionText();
    public static string get_ShowRelatedUsagesActionText();
    public static string get_ShowToDoItemsInGeneratedCodeActionText();
    public static string get_ShowUnusedReferencesActionText();
    public static string get_StopExpandingActionText();
    public static string get_SubtypesHierarchyActionText();
    public static string get_SupertypesHierarchyActionText();
    public static string get_SurroundWithRegionActionText();
    public static string get_SynchronizeCaretToViewSettingDescription();
    public static string get_SynchronizeViewToCaretSettingDescription();
    public static string get_ThisModulesNameAlwaysAssumedToBeUsedInAnalyzeReferencesSettingDescription();
    public static string get_ToDoExplorerActionGroupText();
    public static string get_ToDoExplorerAmpActionText();
    public static string get_ToDoExplorerActionText();
    public static string get_ToDoExplorerOptionPageTitle();
    public static string get_TodoFilterSettingsSettingDescription();
    public static string get_ToDoSettingsActionText();
    public static string get_ToggleBookmark0ActionText();
    public static string get_ToggleBookmark1ActionText();
    public static string get_ToggleBookmark2ActionText();
    public static string get_ToggleBookmark3ActionText();
    public static string get_ToggleBookmark4ActionText();
    public static string get_ToggleBookmark5ActionText();
    public static string get_ToggleBookmark6ActionText();
    public static string get_ToggleBookmark7ActionText();
    public static string get_ToggleBookmark8ActionText();
    public static string get_ToggleBookmark9ActionText();
    public static string get_TrackCaretInEditorActionText();
    public static string get_TypeHierarchyActionGroupText();
    public static string get_TypeHierarchyMembersActionGroupText();
    public static string get_TypeHierarchyViewSettingsSettingDescription();
    public static string get_ValueTrackingActionGroupText();
    public static string get_ViewStyleSettingDescription();
    public static string get_ShowIncomingCallsAction_Title();
    public static string get_ShowOutgoingCallsAction_Title();
    public static string get_BrowseTypeHierarchyAction_Title();
    public static string get_ValueTrackingDownAction_Title();
    public static string get_ValueTrackingUpAction_Title();
    public static string get_NoUsagesWereFoundInTheseReferencedAssemblies_Text();
    public static string get_SelectUnusedProjectReferences_Text();
    public static string get_NoUnusedAssemblyReferencesFound_Text();
    public static string get__AnalyzeUsedReferences_Text();
    public static string get_SeveralUsagesWereFoundInSelectedReferenced_Text();
    public static string get_ConfirmRemove_Text();
    public static string get_Remove_onlyUnusedReferences_Text();
    public static string get_CannotEvaluate_ThereAreTooManyReferences_Text();
    public static string get_RemovingAssemblyReferences_Text();
    public static string get_RemoveUnusedProjectReferences_Text();
    public static string get_RemoveUnusedReferences_Text();
    public static string get_ProcessingProject__Text();
    public static string get_PredefinedIgnoredReferencesInAnalyze_Text();
    public static string get_SafeDeleteAssemblyReference_Text();
    public static string get_ModulesAxis_Text();
    public static string get_DirectUsage_Text();
    public static string get_UnusedProjectReference_Text();
    public static string get_UsedProjectReference_Text();
    public static string get_UnusedAssemblyReferences_Text();
    public static string get_DecomposableNugets_Text();
    public static string get_DirectUsages_Text();
    public static string get_ImplicitUsages_Text();
    public static string get_SearchDependentCode_Text();
    public static string get_CodeReferencedIn__Text();
    public static string get_UnusedReferences_Text();
    public static string get_NoUnusedReferencesForThisProject_Text();
    public static string get_NoAssemblyReferencesFound_Text();
    public static string get_InstalledIn__Text();
    public static string get__UsedDependencies_Text();
    public static string get__UsedDependency_Text();
    public static string get_UnusedDependency_Text();
    public static string get_NewAnonymousBookmark_Text();
    public static string get_Bookmarks_Text();
    public static string get_SetNumberedAddAnonymous_Text();
    public static string get_ClearNumberedDeleteAnonymous_Text();
    public static string get_NotSet_Text();
    public static string get_Bookmark__Text();
    public static string get_ClearAllBookmarks_Text();
    public static string get_ClearAllBookmarksInDocument_Text();
    public static string get_CouldNotGoToBookmark___Text();
    public static string get_FieldInitializer_Text();
    public static string get_Closure_Text();
    public static string get_PolymorphicCall_Text();
    public static string get_BookmarkIsNotSet_Text();
    public static string get_PublicConstructor_Text();
    public static string get_GenericConstructorCall_Text();
    public static string get_ExpandingNode_Text();
    public static string get_ExpressionIn__Text();
    public static string get_UnknownSymbol_Text();
    public static string get_Recursion_Text();
    public static string get_AtLines__Text();
    public static string get_Invalid_Text();
    public static string get_SubtypesOf__Text();
    public static string get_SupertypesOf__Text();
    public static string get_ImplementationsOf__Text();
    public static string get_LeafInterfacesOf__Text();
    public static string get_HierarchyOf__Text();
    public static string get_ShowMembers_Text();
    public static string get_UnknownModule_Text();
    public static string get_UnknownAssembly_Text();
    public static string get_Inheritor_Text();
    public static string get_BaseType_Text();
    public static string get_SearchingForInheritors_Text();
    public static string get_TypeMembers_Text();
    public static string get_RecursiveInheritance__ToolTip();
    public static string get_HideSubTreesWithoutImplementation_Text();
    public static string get_ShowSubHierarchy_Text();
    public static string get_ShowWholeHierarchy_Text();
    public static string get_SubhierarchyOf__Text();
    public static string get_HierarchyFor_ContainsAllTypesAndMay_Text();
    public static string get_Hierarchy_Text();
    public static string get_NoHierarchiesOpen_Text();
    public static string get_OnAnItemToSeeHierarchy_Text();
    public static string get_ClearSelection_Text();
    public static string get_SelectAll_Text();
    public static string get_OriginOf__Text();
    public static string get_DestinationOf__Text();
    public static string get__In__Text();
    public static string get_Patterns_Caption();
    public static string get_ToDoExplorer_Text();
    public static string get_LocateInToDoExplorer_Caption();
    public static string get_ShowPRojectHierarchy_Caption();
    public static string get_Item_DonTHaveFileStructureAspect_Text();
    public static string get_CodeStructure_Text();
    public static string get_IncomingCallsTo__Text();
    public static string get_OutgoingCallsFrom__Text();
    public static string get_AnalyzeReferences_Text();
    public static string get_BuildingAssemblyReferencesTree_Text();
    public static string get_CallHierarchy_Text();
    public static string get_TypeHierarchy_Text();
    public static string get_Add_Button_Text();
    public static string get_AddPattern_Button_Text();
    public static string get_Duplicate_Button_Text();
    public static string get_DuplicatePattern_Button_Text();
    public static string get_Edit_Button_Text();
    public static string get_EditPattern_Button_Text();
    public static string get_Remove_Button_Text();
    public static string get_RemoveReferenceWarning_PackagesRemoved();
    public static string get_RemoveReferenceWarning_ReferencesWillBeRemoved();
    public static string get_RemoveReferenceWarning_UsedReferenceRemoved();
    public static string get_RemoveReferenceWarning_ChangesDetected();
    public static string get_RemoveReferenceWarning_ConfirmationMessage();
    public static string get__FromInitializer_Text();
    public static string get__Implicit_Text();
    public static string get_NoModulesToAnalyzeOpen_Text();
    public static string get_OnAModuleToAnalyzeItsReferencesAndRemoveUnused_Text();
}
public class JetBrains.ReSharper.Features.Inspections.Resources.TodoItemsThemedIcons : object {
}
[ActionAttribute("JetBrains.ReSharper.Features.Inspections.Resources.Strings", "HierarchiesActionText")]
public class JetBrains.ReSharper.Features.Inspections.ShowHierarchyWindowActionHandler : ActivateToolWindowActionHandler`1<HierarchyToolWindowDescriptor> {
}
[ActionAttribute("JetBrains.ReSharper.Features.Inspections.Resources.Strings", "InspectionsActionText")]
public class JetBrains.ReSharper.Features.Inspections.ShowInspectionWindowActionHandler : ActivateToolWindowActionHandler`1<InspectionToolWindowDescriptor> {
}
[ActionAttribute("JetBrains.ReSharper.Features.Inspections.Resources.Strings", "FilterToDoItemsActionText")]
public class JetBrains.ReSharper.Features.Inspections.TodoItems.FilterTodosMenuAction : object {
    public sealed virtual bool Update(IDataContext context, AutomationProviderActionPresentation presentation);
    public sealed virtual bool Execute(IDataContext context);
}
[ShellComponentAttribute("16")]
internal class JetBrains.ReSharper.Features.Inspections.TodoItems.Internal.TodoCanChangeColorChecker : TodoCanChangeColorCheckerBase {
    public bool CanChangeColor { get; }
    public virtual bool get_CanChangeColor();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.Inspections.TodoItems.Internal.ZoneMarker : object {
}
public interface JetBrains.ReSharper.Features.Inspections.TodoItems.ITodoCanChangeColorChecker {
    public bool CanChangeColor { get; }
    public abstract virtual bool get_CanChangeColor();
}
public interface JetBrains.ReSharper.Features.Inspections.TodoItems.ITodoPaintSettingsHolder {
    public IProperty`1<bool> ShouldPaint { get; }
    public abstract virtual IProperty`1<bool> get_ShouldPaint();
}
[ActionAttribute("TodoExplorer.Locate", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "LocateInToDoExplorerActionText")]
public class JetBrains.ReSharper.Features.Inspections.TodoItems.OpenInTodoExplorerAction : ContextNavigationActionBase`1<OpenInTodoExplorerProvider> {
}
[ContextNavigationProviderAttribute("16")]
public class JetBrains.ReSharper.Features.Inspections.TodoItems.OpenInTodoExplorerProvider : object {
    private static void Execute(IDataContext context);
    private static ITodoItem GetTodoItem(IDataContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Inspections.TodoItems.OpenInTodoExplorerProvider/<CreateWorkflow>d__2")]
public sealed virtual IEnumerable`1<ContextNavigation> CreateWorkflow(IDataContext dataContext);
}
[ActionAttribute("JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ToDoExplorerAmpActionText")]
public class JetBrains.ReSharper.Features.Inspections.TodoItems.ShowTodoExplorerAction : ActivateToolWindowActionHandler`1<TodoExplorerToolWindowDescriptor> {
}
[ShellComponentAttribute("16")]
internal class JetBrains.ReSharper.Features.Inspections.TodoItems.TodoCanChangeColorCheckerBase : object {
    public bool CanChangeColor { get; }
    public virtual bool get_CanChangeColor();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Inspections.TodoItems.TodoExplorer : object {
    [CompilerGeneratedAttribute]
private ILazy`1<ToolWindowManager> <toolWindowManager>P;
    public IProperty`1<ITodoItem> RequestToLocateItem;
    public bool CanLocateItems { get; }
    public TodoExplorer(ILazy`1<ToolWindowManager> toolWindowManager);
    public virtual bool get_CanLocateItems();
    public virtual void Locate(ITodoItem item);
}
public class JetBrains.ReSharper.Features.Inspections.TodoItems.TodoExplorerDescriptor : LiveTreeModelBrowserDescriptor {
    [NotNullAttribute]
private ISettingsStore mySettingsStore;
    [NotNullAttribute]
private IPrimaryTodoManager myTodoManager;
    [NotNullAttribute]
private TodoExplorerPresenter myPresenter;
    [NotNullAttribute]
private RichTextLiveTreeModel myTreeModel;
    [NotNullAttribute]
private TodoFiltersViewModel myFiltersViewModel;
    [NotNullAttribute]
private ProjectContext myProjectContext;
    [NotNullAttribute]
private IProperty`1<bool> myShowInGeneratedCodeProperty;
    [NotNullAttribute]
private Key`1<TargetFrameworkId> myTargetFrameworkIdKey;
    [NotNullAttribute]
private IDictionary`2<IPsiSourceFile, IList`1<ITodoItem>> myCachedTodoItems;
    [NotNullAttribute]
private Property`1<int> myIsUpdatingContentCount;
    [NotNullAttribute]
private TodoItemComparer myTodoItemsComparer;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsUpdatingContent>k__BackingField;
    [NotNullAttribute]
public TodoFiltersViewModel FiltersViewModel { get; }
    public IProperty`1<bool> IsUpdatingContent { get; }
    public TreeModel Model { get; }
    public LiveTreeGroupModel`1<object> TreeModel { get; }
    public SortedBindableCollection`1<ITodoItem> Items { get; }
    public StructuredPresenter`2<TreeModelNode, IPresentableItem> Presenter { get; }
    protected LiveTreeModelGrouping`1[] Groupings { get; }
    protected int DefaultGroupingIndex { get; protected set; }
    public string ActionBarID { get; }
    public string ContextMenuID { get; }
    public bool QuickSearchSupported { get; }
    public TodoExplorerDescriptor(Lifetime instanceLifetime, ISolution solution, ISettingsStore settingsStore, IPrimaryTodoManager manager, IPsiCachesState psiCaches, IPersistentIndexManager persistentIndexManager, IUIApplication uiApplication, ProjectContext projectContext, TodoItemFontPainter todoItemFontPainter, ITextControlSchemeManager textControlSchemeManager, IFreeThreadedThrottlingGroupingEventFactory freeThreadedThrottlingGroupingEventFactory, IThreading threading, ITodoPaintSettingsHolder todoPaintSettingsHolder, IBackendProjectModelLocator projectModelLocator);
    public TodoFiltersViewModel get_FiltersViewModel();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsUpdatingContent();
    public virtual TreeModel get_Model();
    public virtual LiveTreeGroupModel`1<object> get_TreeModel();
    public SortedBindableCollection`1<ITodoItem> get_Items();
    public virtual StructuredPresenter`2<TreeModelNode, IPresentableItem> get_Presenter();
    public virtual void PreviewUpdate(IPreviewControl previewControl, TreeModelNode modelNode);
    private void ExecuteAndQueueWriteLock(Action action);
    public virtual bool Navigate(TreeModelNode node, PopupWindowContextSource windowContext, bool transferFocus, TabOptions options);
    protected virtual LiveTreeModelGrouping`1[] get_Groupings();
    protected virtual int get_DefaultGroupingIndex();
    protected virtual void set_DefaultGroupingIndex(int value);
    public virtual string get_ActionBarID();
    public virtual string get_ContextMenuID();
    public virtual bool get_QuickSearchSupported();
    [CanBeNullAttribute]
public TreeModelNode LocateItem(ITodoItem item);
    public void EnsureEvaluated(TreeModelNode node, Action callback);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Inspections.TodoItems.TodoExplorerDescriptor/<TraverseAllNodes>d__45")]
[PureAttribute]
private static IEnumerable`1<ITreeModelNode> TraverseAllNodes(IEnumerable`1<ITreeModelNode> nodes);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Inspections.TodoItems.TodoExplorerDescriptor/<GetParentsFromRoot>d__46")]
[NotNullAttribute]
private static IEnumerable`1<ITreeModelNode> GetParentsFromRoot(ITreeModelNode node);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Features.Inspections.TodoItems.TodoExplorerGroupingProvider : object {
    public sealed virtual ICollection`1<TreeModelGrouping`1<ITodoItem>> GetGroupings(TreeModelBrowserDescriptorBase descriptor);
    public sealed virtual bool IsApplicable(TreeModelBrowserDescriptorBase descriptor);
}
[OptionsPageAttribute("TodoExplorer", "To-do Explorer", "JetBrains.ReSharper.Features.Inspections.Resources.TodoItemsThemedIcons/ToDoItemsPage")]
public class JetBrains.ReSharper.Features.Inspections.TodoItems.TodoExplorerOptionsPage : CustomSimpleOptionsPage {
    public static string PID;
    public TodoExplorerOptionsPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, TodoItemPatternDialogComponent todoItemPatternDialogComponent);
    public virtual OptionsPageKeywords GetKeywords();
}
public class JetBrains.ReSharper.Features.Inspections.TodoItems.TodoExplorerPresenter : TreeModelBrowserPresenter {
    [NotNullAttribute]
private IPrimaryTodoManager myTodoManager;
    [NotNullAttribute]
private TodoItemFontPainter myTodoItemFontPainter;
    [NotNullAttribute]
private IProperty`1<bool> myShouldPaint;
    private static IconId[] ourImages;
    public TodoExplorerPresenter(IPrimaryTodoManager todoManager, TodoItemFontPainter todoItemFontPainter, IProperty`1<bool> shouldPaint);
    private void PresentTodoItemGroup(TodoItemGroup value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    private void PresentTodoItem(ITodoItem value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    [NotNullAttribute]
public static IconId GetImageForStyle(TodoIconStyle style);
}
public class JetBrains.ReSharper.Features.Inspections.TodoItems.TodoExplorerToolWindowContent : AAutomation {
    public ToolWindowInstance ToolWindowInstance;
    public TodoExplorer TodoExplorer;
    public TodoExplorerDescriptor Descriptor;
    public TodoExplorerToolWindowContent(Lifetime lifetime, ToolWindowInstance toolWindowInstance, ISolution solution, ISettingsStore settingsStore, IPrimaryTodoManager todoManager, IPsiCachesState psiCaches, IPersistentIndexManager persistentIndexManager, IUIApplication uiApplication, ProjectContext projectContext, TodoItemFontPainter todoItemFontPainter, ITextControlSchemeManager textControlSchemeManager, IFreeThreadedThrottlingGroupingEventFactory freeThreadedThrottlingGroupingEventFactory, IThreading threading, ITodoPaintSettingsHolder todoPaintSettingsHolder, IBackendProjectModelLocator projectModelLocator, TodoExplorer todoExplorer);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0();
}
[ToolWindowDescriptorAttribute("16")]
public class JetBrains.ReSharper.Features.Inspections.TodoItems.TodoExplorerToolWindowDescriptor : ToolWindowDescriptor {
}
public class JetBrains.ReSharper.Features.Inspections.TodoItems.TodoFiltersViewModel : FilterMenuActionViewModelBase {
    [NotNullAttribute]
private JetHashSet`1<Guid> myDisabledPatterns;
    [NotNullAttribute]
private Dictionary`2<Guid, TodoPatternInfo> myAllPatterns;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private Action myOnFiltersChanged;
    protected bool ShouldCloseMenuOnExecute { get; }
    public TodoFiltersViewModel(Lifetime lifetime, ISolution solution, Action onFiltersChanged);
    public void UpdatePatterns(TodoRegexMatcher[] matchers);
    [PureAttribute]
public bool Matches(ITodoItem item);
    protected virtual bool get_ShouldCloseMenuOnExecute();
    protected virtual IReadOnlyList`1<IFilterMenuItem> CreateMenuItems();
    private void LoadDisabledPatterns(ISolution solution);
    [PureAttribute]
private bool IsSelected(Guid patternId);
    private void TogglePattern(TodoPatternInfo todoPatternInfo);
    private void SelectAllPatterns();
    private void ClearSelection();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Inspections.TodoItems.TodoItemFontPainter : object {
    private HighlighterFontsAndColorsCache myHighlighterFontsAndColorsCache;
    private ILogger myLogger;
    private IDictionary`2<TodoIconStyle, string> ids;
    public TodoItemFontPainter(HighlighterFontsAndColorsCache highlighterFontsAndColorsCache, ILogger logger);
    public JetRgbaColor GetColor(TodoIconStyle styleIcon);
}
public class JetBrains.ReSharper.Features.Inspections.TodoItems.TodoItemGroup : object {
    [CompilerGeneratedAttribute]
private Guid <PatternId>k__BackingField;
    public Guid PatternId { get; }
    public TodoItemGroup(Guid patternId);
    [CompilerGeneratedAttribute]
public Guid get_PatternId();
    public bool Equals(TodoItemGroup other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ShellComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Features.Inspections.TodoItems.TodoItemPatternDialogComponent : object {
    [CanBeNullAttribute]
[MustUseReturnValueAttribute]
public virtual TodoPatternsSettings ShowDialog(TodoPatternsSettings pattern, bool isNew);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.Features.Inspections.TodoItems.TodoPaintSettingsHolder : object {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ShouldPaint>k__BackingField;
    public IProperty`1<bool> ShouldPaint { get; }
    public TodoPaintSettingsHolder(Lifetime lifetime, ISettingsStore settingsStore);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_ShouldPaint();
}
[ActionAttribute("TodoExplorer.ActionBar.ShowInGeneratedCode", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ShowToDoItemsInGeneratedCodeActionText")]
public class JetBrains.ReSharper.Features.Inspections.TodoItems.ToDoShowInGeneratedCodeAction : object {
    public sealed virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public sealed virtual void Execute(IDataContext context);
}
[ActionAttribute("TodoExplorer.ActionBar.ShowOptions", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ToDoSettingsActionText")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Inspections.TodoItems.TodoShowOptionsAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public class JetBrains.ReSharper.Features.Inspections.TodoItems.ViewModel.TodoButtonProvider : ButtonProviderBase {
    private List`1<ButtonViewModel> myButtons;
    private ICollectionEditItemViewModelFactory myCollectionEditItemViewModelFactory;
    private ObservableCollection`1<ICollectionEditItemViewModel> myItems;
    private OptionsSettingsSmartContext myOptionsSettingsSmartContext;
    public TodoButtonProvider(Lifetime lifetime, ICollectionEditItemViewModelFactory collectionEditItemViewModelFactory, SettingsIndexedKey schemaKey, OptionsSettingsSmartContext optionsSettingsSmartContext, ObservableCollection`1<ICollectionEditItemViewModel> items, IProperty`1<ICollectionEditItemViewModel> selectedItemProperty, TodoItemPatternDialogComponent todoItemPatternDialogComponent);
    public virtual IEnumerable`1<ButtonViewModel> GetButtons();
    private void UpdateView();
}
public class JetBrains.ReSharper.Features.Inspections.TodoItems.ViewModel.TodoButtonProviderFactory : object {
    private ICollectionEditItemViewModelFactory myCollectionEditItemViewModelFactory;
    private Lifetime myLifetime;
    private OptionsSettingsSmartContext myOptionsSettingsSmartContext;
    private TodoItemPatternDialogComponent myTodoItemPatternDialogComponent;
    private SettingsIndexedKey mySchemaKey;
    public TodoButtonProviderFactory(Lifetime lifetime, ICollectionEditItemViewModelFactory collectionEditItemViewModelFactory, SettingsIndexedKey schemaKey, OptionsSettingsSmartContext optionsSettingsSmartContext, TodoItemPatternDialogComponent todoItemPatternDialogComponent);
    public sealed virtual IButtonProvider GetButtonProvider(ObservableCollection`1<ICollectionEditItemViewModel> items, IProperty`1<ICollectionEditItemViewModel> selectedItemProperty, IProperty`1<IEnumerable`1<ICollectionEditItemViewModel>> selectedMultipleItemsProperty);
}
public class JetBrains.ReSharper.Features.Inspections.TodoItems.ViewModel.TodoCollectionEditItemViewModel : StringCollectionEditItemViewModel {
    [CompilerGeneratedAttribute]
private TodoPatternsSettingsWithGuidIndex <TodoPatternsSettingsWithGuidIndex>k__BackingField;
    public TodoPatternsSettingsWithGuidIndex TodoPatternsSettingsWithGuidIndex { get; public set; }
    public TodoCollectionEditItemViewModel(string presentableName, IconId iconId, TodoPatternsSettingsWithGuidIndex todoPatternsSettingsWithGuidIndex);
    [CompilerGeneratedAttribute]
public TodoPatternsSettingsWithGuidIndex get_TodoPatternsSettingsWithGuidIndex();
    [CompilerGeneratedAttribute]
public void set_TodoPatternsSettingsWithGuidIndex(TodoPatternsSettingsWithGuidIndex value);
}
public class JetBrains.ReSharper.Features.Inspections.TodoItems.ViewModel.TodoCollectionEditItemViewModelFactory : object {
    public sealed virtual ICollectionEditItemViewModel GetCollectionEditItemViewModel(string presentableName, IconId iconId, object behindValue);
}
public class JetBrains.ReSharper.Features.Inspections.TodoItems.ViewModel.TodoPatternsSettingsWithGuidIndex : object {
    [CompilerGeneratedAttribute]
private GuidIndex <GuidIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private TodoPatternsSettings <TodoPatternsSettings>k__BackingField;
    public GuidIndex GuidIndex { get; }
    public TodoPatternsSettings TodoPatternsSettings { get; }
    public TodoPatternsSettingsWithGuidIndex(GuidIndex guidIndex, TodoPatternsSettings todoPatternsSettings);
    [CompilerGeneratedAttribute]
public GuidIndex get_GuidIndex();
    [CompilerGeneratedAttribute]
public TodoPatternsSettings get_TodoPatternsSettings();
}
[ActionGroupAttribute("ValueTrackingTree.ActionBarID", "0", "10")]
public class JetBrains.ReSharper.Features.Inspections.ValueTracking.Actions.ValueTrackingActionBar : object {
    public static string ID;
    public ValueTrackingActionBar(ValueTrackingStopAction stopAction, Separator sep1, TreeModelBrowserStandardActionGroup standard, BrowserShowIgnoredAction showIgnored);
}
[ActionAttribute("Dfa.ReachingDefinitionsDown", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ValueTrackingDownAction_Title")]
public class JetBrains.ReSharper.Features.Inspections.ValueTracking.Actions.ValueTrackingDownAction : InspectThisActionBase`1<ValueTrackingDownProvider> {
    public static string Title;
    public static string ActionId;
    protected RichText Caption { get; }
    private static ValueTrackingDownAction();
    protected virtual RichText get_Caption();
}
[InspectThisProviderAttribute("16")]
public class JetBrains.ReSharper.Features.Inspections.ValueTracking.Actions.ValueTrackingDownProvider : ValueTrackingRunActionBase {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Inspections.ValueTracking.Actions.ValueTrackingDownProvider/<CreateWorkflow>d__0")]
public virtual IEnumerable`1<InspectGroupWorkflow> CreateWorkflow(IDataContext dataContext);
    protected virtual ValueTrackingDirections GetDirection();
}
public static class JetBrains.ReSharper.Features.Inspections.ValueTracking.Actions.ValueTrackingPriorities : object {
    public static int ValueOrigin;
    public static int ValueDestination;
}
public abstract class JetBrains.ReSharper.Features.Inspections.ValueTracking.Actions.ValueTrackingRunActionBase : object {
    protected void Execute(IDataContext context);
    private bool PrepareToExecute(IDataContext context, ValueTrackingSessionEnvinonment& envinonment, String& text);
    protected bool IsAvailable(IDataContext context);
    protected abstract virtual ValueTrackingDirections GetDirection();
    public abstract virtual IEnumerable`1<InspectGroupWorkflow> CreateWorkflow(IDataContext dataContext);
}
[ActionAttribute("Dfa.Stop", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "StopExpandingActionText")]
public class JetBrains.ReSharper.Features.Inspections.ValueTracking.Actions.ValueTrackingStopAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("Dfa.ReachingDefinitionsUp", "JetBrains.ReSharper.Features.Inspections.Resources.Strings", "ValueTrackingUpAction_Title")]
public class JetBrains.ReSharper.Features.Inspections.ValueTracking.Actions.ValueTrackingUpAction : InspectThisActionBase`1<ValueTrackingUpProvider> {
    public static string Title;
    public static string ActionId;
    protected RichText Caption { get; }
    private static ValueTrackingUpAction();
    protected virtual RichText get_Caption();
}
[InspectThisProviderAttribute("16")]
public class JetBrains.ReSharper.Features.Inspections.ValueTracking.Actions.ValueTrackingUpProvider : ValueTrackingRunActionBase {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Inspections.ValueTracking.Actions.ValueTrackingUpProvider/<CreateWorkflow>d__0")]
public virtual IEnumerable`1<InspectGroupWorkflow> CreateWorkflow(IDataContext dataContext);
    protected virtual ValueTrackingDirections GetDirection();
}
public class JetBrains.ReSharper.Features.Inspections.ValueTracking.Impl.New.ValueTrackingTreeDescriptor : HierarchyTreeDescriptor {
    public string ContextMenuID { get; }
    public string ActionBarID { get; }
    public ValueTrackingTreeDescriptor(Lifetime lifetime, ISolution solution, ITreeModelAdapter treeModelAdapter, StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, IDelegateDescriptor callHierarchy);
    protected virtual AsyncLiveTreeModel CreateAsyncLiveTreeModel();
    protected virtual void WrapEvaluateNodes(Action evaluateNodes);
    protected virtual void ExpandRequestedNodes(ICollection`1<NodeWithAsyncChildren> nodesToEvaluate);
    public virtual string get_ContextMenuID();
    public virtual string get_ActionBarID();
}
public class JetBrains.ReSharper.Features.Inspections.ValueTracking.Impl.ValueTrackingModel : AsyncLiveTreeModel {
    private int myNextNodeId;
    public ValueTrackingModel(Lifetime lifetime, ReadWriteLock rwLock, StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, ITreeModelAdapter treeModelAdapter, IShellLocks locks, IFreeThreadedThrottlingGroupingEventFactory freeThreadedThrottlingGroupingEventFactory);
    protected virtual ITreeModelNode CreateNode(object dataItem);
    protected virtual ITreeModelNode CreateMeaningfullNode(RichTextLiveTreeModel model, WrappedNodeValue val, IFreeThreadedThrottlingGroupingEvent throttlingGroupingEvent);
}
public class JetBrains.ReSharper.Features.Inspections.ValueTracking.Impl.ValueTrackingModelAdapter : object {
    private static ILogger ourLog;
    private Lifetime myLifetime;
    private ValueTrackingSessionEnvinonment myEnvinonment;
    private ValueTrackingFilteredModel myFilteredModel;
    private IFinderOperationManager myFinderOperationManager;
    private IShellLocks myLocks;
    public object RootNode { get; }
    public ValueTrackingModelAdapter(Lifetime lifetime, ValueTrackingSessionEnvinonment envinonment, ValueTrackingFilteredModel valueTrackingFilteredModel);
    private static ValueTrackingModelAdapter();
    public sealed virtual object get_RootNode();
    public sealed virtual ICollection GetOutgoing(object obj);
    public sealed virtual bool CanHaveChildren(object node);
    public sealed virtual bool IsOutgoingBuilt(object obj);
    public sealed virtual Task BuildOutgoingAsync(object parentNode, IProgressIndicator progressIndicator, bool runSynchronous);
    public sealed virtual bool SemanticCompare(object firstNode, object secondNode);
    public sealed virtual bool RecursionPreventionCompare(object firstNode, object secondNode);
}
public class JetBrains.ReSharper.Features.Inspections.ValueTracking.Impl.ValueTrackingTreeModelBrowserDescriptor : OccurrenceBrowserDescriptor {
    private TreeAsyncModel myModel;
    private ActionComboBox myGroupsCombo;
    private IValueTrackingNodeGroupPresenter myCurrentPresenter;
    [CompilerGeneratedAttribute]
private ValueTrackingFilteredModel <FilteredModel>k__BackingField;
    [CompilerGeneratedAttribute]
private ValueTrackingNodesFilter <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private ValueTrackingSessionEnvinonment <Envinonment>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <TreeViewUpdateAllNodesPresentation>k__BackingField;
    private ValueTrackingFilteredModel FilteredModel { get; }
    private ValueTrackingNodesFilter Filter { get; }
    private ValueTrackingSessionEnvinonment Envinonment { get; }
    public ISimpleSignal TreeViewUpdateAllNodesPresentation { get; }
    public TreeModel Model { get; }
    public IValueTrackingNodeGroupPresenter GroupPresenter { get; public set; }
    public bool QuickSearchSupported { get; }
    public string ActionBarID { get; }
    public string ContextMenuID { get; }
    public StructuredPresenter`2<TreeModelNode, IPresentableItem> Presenter { get; }
    public ValueTrackingTreeModelBrowserDescriptor(ISolution solution, ValueTrackingSessionEnvinonment envinonment);
    [CompilerGeneratedAttribute]
private ValueTrackingFilteredModel get_FilteredModel();
    [CompilerGeneratedAttribute]
private ValueTrackingNodesFilter get_Filter();
    [CompilerGeneratedAttribute]
private ValueTrackingSessionEnvinonment get_Envinonment();
    [CompilerGeneratedAttribute]
public ISimpleSignal get_TreeViewUpdateAllNodesPresentation();
    public virtual bool ExpandNodeInitially(TreeModelNode modelNode);
    public virtual TreeModel get_Model();
    public IValueTrackingNodeGroupPresenter get_GroupPresenter();
    public void set_GroupPresenter(IValueTrackingNodeGroupPresenter value);
    public virtual bool CustomizeActionBar(IActionBar bar);
    private void OnGroupChangeCommitted(object sender, EventArgs e);
    public virtual void PreviewUpdate(IPreviewControl previewControl, TreeModelNode modelNode);
    public virtual bool Navigate(TreeModelNode node, PopupWindowContextSource windowContext, bool transferFocus, TabOptions options);
    public virtual bool AcceptOccurrence(object value);
    public virtual bool get_QuickSearchSupported();
    public virtual string get_ActionBarID();
    public virtual string get_ContextMenuID();
    public virtual StructuredPresenter`2<TreeModelNode, IPresentableItem> get_Presenter();
    [CompilerGeneratedAttribute]
private void <CustomizeActionBar>b__22_0();
    [CompilerGeneratedAttribute]
private void <CustomizeActionBar>b__22_1();
    [CompilerGeneratedAttribute]
private void <CustomizeActionBar>b__22_2();
    [CompilerGeneratedAttribute]
private void <CustomizeActionBar>b__22_3();
    [CompilerGeneratedAttribute]
private void <OnGroupChangeCommitted>b__23_0();
}
public interface JetBrains.ReSharper.Features.Inspections.ValueTracking.IValueTrackingExplorerManager {
    public abstract virtual void Open(ValueTrackingSessionEnvinonment environment);
}
public class JetBrains.ReSharper.Features.Inspections.ValueTracking.View.ValueTrackingNodePresenter : TreeModelBrowserPresenter {
    private ValueTrackingTreeModelBrowserDescriptor mySession;
    [CompilerGeneratedAttribute]
private ITreeModelNodeVisibilityPresentor <TreeModelNodeVisibilityPresentor>k__BackingField;
    public ITreeModelNodeVisibilityPresentor TreeModelNodeVisibilityPresentor { get; public set; }
    public ValueTrackingNodePresenter(ValueTrackingTreeModelBrowserDescriptor session);
    [CompilerGeneratedAttribute]
public sealed virtual ITreeModelNodeVisibilityPresentor get_TreeModelNodeVisibilityPresentor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TreeModelNodeVisibilityPresentor(ITreeModelNodeVisibilityPresentor value);
    public virtual void UpdateItem(object value, TreeModelNode structureElement, IPresentableItem item, PresentationState state);
    private void PresentWrapper(WrappedNodeValue value, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
    private void PresentAll(IValueTrackingNode node, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.Inspections.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
