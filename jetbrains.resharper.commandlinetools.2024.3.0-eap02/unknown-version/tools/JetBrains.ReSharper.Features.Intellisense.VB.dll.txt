[IntellisensePartAttribute("16")]
internal class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.CompletionInDocComments.VBCodeCompletionContextProviderInDocComment : CodeCompletionContextProviderInDocCommentBase {
    private VBIntellisenseManager myVBIntellisenseManager;
    public VBCodeCompletionContextProviderInDocComment(VBIntellisenseManager vbIntellisenseManager);
    public virtual bool IsApplicable(CodeCompletionContext context);
    protected virtual ITokenNode GetTokenNode(CodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.CompletionInDocComments.VBDocCommentElementsItemsProviderImpl : DocCommentElementsItemsProvider {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Filters.VBClassFilter : ClassFilter`1<VBCodeCompletionContextBase> {
    public VBClassFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Filters.VBDelegateFilter : DelegateFilter`1<VBCodeCompletionContextBase> {
    public VBDelegateFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Filters.VBEnumFilter : EnumFilter`1<VBCodeCompletionContextBase> {
    public VBEnumFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Filters.VBEventsFilter : EventsFilter`1<VBCodeCompletionContextBase> {
    public VBEventsFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Filters.VBExtensionMethodFilter : CompletionListFilterBase`2<VBCodeCompletionContextBase, ILookupItem> {
    public double Order { get; }
    public string Text { get; }
    public string ActionId { get; }
    public VBExtensionMethodFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
    protected virtual bool IsAvailable(VBCodeCompletionContextBase specificContext, IItemsCollector collector, CompletionListFilterAvailabilityCache cache);
    protected virtual bool Accepts(ILookupItem specificItem);
    public virtual double get_Order();
    public virtual IconId GetImage(ISolution solution);
    public virtual string get_Text();
    public virtual string get_ActionId();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Filters.VBFieldsFilter : FieldsFilter`1<VBCodeCompletionContextBase> {
    public VBFieldsFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.FilterStateSettingsKey", "JetBrains.ReSharper.Features.Intellisense.VB.Resources.LocalizedStrings", "VBNETSettingDescription")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Filters.VBFilterStateSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.VB.Resources.LocalizedStrings", "ClassesSettingDescription")]
public CompletionListFilterState Classes;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.VB.Resources.LocalizedStrings", "InterfacesSettingDescription")]
public CompletionListFilterState Interfaces;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.VB.Resources.LocalizedStrings", "StructuresSettingDescription")]
public CompletionListFilterState Structs;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.VB.Resources.LocalizedStrings", "EnumsSettingDescription")]
public CompletionListFilterState Enums;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.VB.Resources.LocalizedStrings", "DelegatesSettingDescription")]
public CompletionListFilterState Delegates;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.VB.Resources.LocalizedStrings", "MethodsSettingDescription")]
public CompletionListFilterState Methods;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.VB.Resources.LocalizedStrings", "FieldsSettingDescription")]
public CompletionListFilterState Fields;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.VB.Resources.LocalizedStrings", "PropertiesSettingDescription")]
public CompletionListFilterState Properties;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.VB.Resources.LocalizedStrings", "EventsSettingDescription")]
public CompletionListFilterState Events;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.VB.Resources.LocalizedStrings", "ExtensionMethodsSettingDescription")]
public CompletionListFilterState ExtensionMethods;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.VB.Resources.LocalizedStrings", "InternalSettingDescription")]
public CompletionListFilterState InternalSymbols;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.VB.Resources.LocalizedStrings", "KeywordsSettingDescription")]
public CompletionListFilterState Keywords;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.VB.Resources.LocalizedStrings", "LocalVariablesSettingDescription")]
public CompletionListFilterState LocalVariables;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.VB.Resources.LocalizedStrings", "NamespacesSettingDescription")]
public CompletionListFilterState Namespaces;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.VB.Resources.LocalizedStrings", "ParametersSettingDescription")]
public CompletionListFilterState Parameters;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.VB.Resources.LocalizedStrings", "PrivateSettingDescription")]
public CompletionListFilterState PrivateSymbols;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.VB.Resources.LocalizedStrings", "ProtectedSettingDescription")]
public CompletionListFilterState ProtectedSymbols;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.VB.Resources.LocalizedStrings", "PublicSettingDescription")]
public CompletionListFilterState PublicSymbols;
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Filters.VBInterfaceFilter : InterfaceFilter`1<VBCodeCompletionContextBase> {
    public VBInterfaceFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Filters.VBInternalFilter : InternalFilter`1<VBCodeCompletionContextBase> {
    public VBInternalFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Filters.VBKeywordFilter : CompletionListKeywordFilter`1<VBCodeCompletionContextBase> {
    public VBKeywordFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Filters.VBLocalVariableFilter : LocalVariablesFilter`1<VBCodeCompletionContextBase> {
    public VBLocalVariableFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Filters.VBMethodsFilter : MethodsFilter`1<VBCodeCompletionContextBase> {
    public VBMethodsFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Filters.VBNamespaceFilter : NamespaceFilter`1<VBCodeCompletionContextBase> {
    public VBNamespaceFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Filters.VBParameterFilter : ParameterFilter`1<VBCodeCompletionContextBase> {
    public VBParameterFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Filters.VBPrivateFilter : PrivateFilter`1<VBCodeCompletionContextBase> {
    public VBPrivateFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Filters.VBPropertiesFilter : PropertyFilter`1<VBCodeCompletionContextBase> {
    public VBPropertiesFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Filters.VBProtectedFilter : ProtectedFilter`1<VBCodeCompletionContextBase> {
    public VBProtectedFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Filters.VBPublicFilter : PublicFilter`1<VBCodeCompletionContextBase> {
    public VBPublicFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Filters.VBStructFilter : StructFilter`1<VBCodeCompletionContextBase> {
    public VBStructFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.LookupItems.VBAddressOfBehavior : DeclaredElementBehavior`1<DeclaredElementInfo> {
    private string myAddressOfText;
    public VBAddressOfBehavior(string addressOfText, DeclaredElementInfo info);
    protected virtual void OnAfterComplete(ITextControl textControl, LookupItemInsertType insertType, DocumentRange& nameRange, DocumentRange& decorationRange, TailType tailType, Suffix& suffix, IRangeMarker& caretPositionRangeMarker, Boolean& keepCaretStill);
}
[ExtensionAttribute]
[StandardModuleAttribute]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.LookupItems.VBCompletionKeys : object {
    public static Key`1<object> IsPreferred;
    public static Key`1<object> IsCreateLocalVariable;
    public static Key`1<object> IsAddressOf;
    public static Key`1<object> IsModuleMethods;
    private static VBCompletionKeys();
    [ExtensionAttribute]
public static bool IsAddressOfItem(ILookupItem lookupItem);
    [ExtensionAttribute]
public static bool IsPreferredLookupItem(ILookupItem lookupItem);
    [ExtensionAttribute]
public static bool IsCreateLocalVariableLookupItem(ILookupItem lookupItem);
    [ExtensionAttribute]
public static bool IsModuleMethodsLookupItem(ILookupItem lookupItem);
}
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.LookupItems.VBConstructorPresentation : DeclaredElementPresentation`1<DeclaredElementInfo> {
    private bool myIsArrayCreation;
    private IconId myImage;
    public IconId Image { get; }
    public VBConstructorPresentation(DeclaredElementInfo info, VBCodeCompletionContextBase context);
    public virtual IconId get_Image();
    protected virtual RichText GetDisplayName();
}
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.LookupItems.VBCreateEventHandlerLookupItem : CreateNewEventHandlerLookupItem`1<IReference> {
    private IPsiSourceFile mySourceFile;
    private bool myAddAddressOf;
    public VBCreateEventHandlerLookupItem(IReference reference, IDeclaredType eventType, IDelegate delegate, ITypeDeclaration targetTypeDeclaration, string expectedName, IEnumerable`1<NameRoot> expectedRoots, IPsiSourceFile sourceFile);
    private static string SuggestMethodName(IReference reference, string expectedName, IEnumerable`1<NameRoot> expectedRoots, IPsiSourceFile sourceFile);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
}
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.LookupItems.VBCreateLocalVariableBehavior : CreateLocalVariableBehaviorBase {
    protected string ArgumentModifier { get; }
    public VBCreateLocalVariableBehavior(INamesSuggestion namesSuggestion, TypeInfo info);
    protected virtual string get_ArgumentModifier();
    protected virtual IDeclaration CreateLocalVariableDeclaration(ITreeNode& nameElement, string safeName);
}
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.LookupItems.VBExtensionMethodsBehavior`1 : VBDeclaredElementBehavior`1<TInfo> {
    public VBExtensionMethodsBehavior`1(TInfo info);
    protected virtual void OnAfterComplete(ITextControl textControl, LookupItemInsertType insertType, DocumentRange& nameRange, DocumentRange& decorationRange, TailType tailType, Suffix& suffix, IRangeMarker& caretPositionRangeMarker, Boolean& keepCaretStill);
}
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.LookupItems.VBGenerateConstructorBehavior : TextualBehavior`1<TextualInfo> {
    private JetHashSet`1<DeclaredElementInstance> myElements;
    public VBGenerateConstructorBehavior(IEnumerable`1<DeclaredElementInstance> elements, TextualInfo info);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    private static void RemoveIdentifier(ISolution solution, ITextControl textControl);
    [CompilerGeneratedAttribute]
private void _Lambda$__2-0(IGeneratorContext context);
}
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.LookupItems.VBGenericTypePresentation : DeclaredElementPresentation`1<DeclaredElementInfo> {
    private static DeclaredElementPresenterStyle ourPresenterStyle;
    private static VBGenericTypePresentation();
    public VBGenericTypePresentation(DeclaredElementInfo info);
    protected virtual RichText GetDisplayName();
}
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.LookupItems.VBKeywordBehavior : TextualBehavior`1<TextualInfo> {
    public VBKeywordBehavior(TextualInfo info);
    protected virtual void InsertTailType(ITextControl textControl, ISolution solution, DocumentOffset offset, TailType tailType, LookupItemInsertType lookupItemInsertType);
}
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.LookupItems.VBLambdaBehavior : TextualBehavior`1<DelegateInfo> {
    private IPsiSourceFile myPsiSourceFile;
    private bool myIsIterator;
    public VBLambdaBehavior(IPsiSourceFile psiSourceFile, DelegateInfo info, bool isIterator);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    public int inc(Int32& i);
    [CompilerGeneratedAttribute]
private IType _Lambda$__3-0(IParameter p);
}
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.LookupItems.VBMemberInitializerBehavior : TextualBehavior`1<TextualInfo> {
    private string myName;
    public VBMemberInitializerBehavior(string name, TextualInfo info);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
}
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.LookupItems.VBMethodsBehavior : DeclaredElementBehavior`1<DeclaredElementInfo> {
    public VBMethodsBehavior(DeclaredElementInfo info);
    protected virtual DocumentRange DoReplaceText(ITextControl textControl, DocumentRange replaceRange, string typeInName, Suffix& suffix);
    protected virtual void OnAfterComplete(ITextControl textControl, LookupItemInsertType insertType, DocumentRange& nameRange, DocumentRange& decorationRange, TailType tailType, Suffix& suffix, IRangeMarker& caretPositionRangeMarker, Boolean& keepCaretStill);
    public static TailType CalculateTailType(IEnumerable`1<DeclaredElementInstance`1<IMethod>> methods, VBCodeCompletionContextBase context);
}
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.LookupItems.VBMethodsMatcher : TextualMatcher`1<DeclaredElementInfo> {
    public VBMethodsMatcher(DeclaredElementInfo info);
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
}
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.LookupItems.VBMissingMemberBehavior : MissingMemberBehaviorBase {
    public VBMissingMemberBehavior(bool isExplicitImplementation, DeclaredElementInfo info);
    protected virtual void RemoveIdentifier(ITextControl textControl, ISolution solution);
    protected virtual void SetOptions(IGeneratorContext context);
}
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.LookupItems.VBMissingMemberPresentation : MissingMemberPresentationBase {
    private MissingMemberKind myMemberKind;
    public VBMissingMemberPresentation(OverridableMemberInstance instance, bool isExplicitImplementation, DeclaredElementInfo info);
    protected virtual RichText GetDisplayName();
}
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.LookupItems.VBModuleMethodsBehavior : VBMethodsBehavior {
    public VBModuleMethodsBehavior(DeclaredElementInfo info);
    protected virtual void OnAfterComplete(ITextControl textControl, LookupItemInsertType insertType, DocumentRange& nameRange, DocumentRange& decorationRange, TailType tailType, Suffix& suffix, IRangeMarker& caretPositionRangeMarker, Boolean& keepCaretStill);
}
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.LookupItems.VBNamedParameterBehavior : TextualBehavior`1<TextualInfo> {
    private string myName;
    public VBNamedParameterBehavior(string name, TextualInfo info);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
}
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.LookupItems.VBOverridableMemberBehavior : VBDeclaredElementBehavior`1<DeclaredElementInfo> {
    public VBOverridableMemberBehavior(DeclaredElementInfo info);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    [CompilerGeneratedAttribute]
private void _Lambda$__1-0(IGeneratorContext context);
}
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.LookupItems.VBOverridableMemberPresentation : DeclaredElementPresentation`1<DeclaredElementInfo> {
    private IOverridableMember myElement;
    public VBOverridableMemberPresentation(OverridableMemberInstance instance, DeclaredElementInfo info);
    protected virtual RichText GetDisplayName();
}
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.LookupItems.VBParameterNamePresentation : DeclaredElementPresentation`1<DeclaredElementInfo> {
    public VBParameterNamePresentation(DeclaredElementInfo info);
    protected virtual RichText GetDisplayName();
}
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.LookupItems.VBPartialMethodBehavior : VBDeclaredElementBehavior`1<DeclaredElementInfo> {
    private ITreeNode myNodeToRemove;
    public VBPartialMethodBehavior(ITreeNode nodeToRemove, DeclaredElementInfo info);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    private void RemoveIdentifier(ISolution solution, ITextControl textControl);
    [CompilerGeneratedAttribute]
private void _Lambda$__2-0(IGeneratorContext context);
}
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.LookupItems.VBPartialMethodPresentation : DeclaredElementPresentation`1<DeclaredElementInfo> {
    private bool myDisplayPrivateKeyword;
    private bool myDisplaySubKeyword;
    public VBPartialMethodPresentation(DeclaredElementInfo info, bool displayPrivateKeyword, bool displaySubKeyword);
    protected virtual RichText GetDisplayName();
}
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.LookupItems.VBPropertyBehavior : TextualBehavior`1<DeclaredElementInfo> {
    private bool myIsReadonly;
    public VBPropertyBehavior(bool isReadonly, DeclaredElementInfo info);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    private static void RemoveIdentifier(ISolution solution, ITextControl textControl);
    [CompilerGeneratedAttribute]
private void _Lambda$__2-0(IGeneratorContext context);
}
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.LookupItems.VBPropertyPresentation : TextualPresentation`1<TextualInfo> {
    private string myPropertyName;
    private bool myIsReadOnly;
    public VBPropertyPresentation(string propertyName, bool isReadOnly, TextualInfo info, PsiIconManager psiIconManager);
    protected virtual RichText GetDisplayName();
}
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.LookupItems.VBSimpleTypeBehavior : VBDeclaredElementBehavior`1<DeclaredElementInfo> {
    public VBSimpleTypeBehavior(DeclaredElementInfo info);
    public virtual void FixTypeInNameAndReplaceRangeIfNecessary(ITextControl textcontrol, String& typeInName, DocumentRange& replaceRange);
}
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.LookupItems.VBTypeNamePresentation : DeclaredElementPresentation`1<DeclaredElementInfo> {
    protected bool AddInformationText { get; }
    public VBTypeNamePresentation(DeclaredElementInfo info);
    protected virtual RichText GetDisplayName();
    protected virtual bool get_AddInformationText();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.AddressOfItemsProvider : VBItemsProviderBase`2<VBCodeCompletionContextSmart, ICompletableReference> {
    protected virtual bool IsAvailable(VBCodeCompletionContextSmart context);
    protected virtual bool EvaluateLookupItems(ICompletableReference reference, VBCodeCompletionContextSmart context, IItemsCollector collector, TextLookupRanges ranges);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.CastSmartCompletionType : VBItemsProviderBase`2<VBCodeCompletionContextSmart, ICompletableReference> {
    private IVBExpectedTypesProvider myExpectedTypeProvider;
    public CastSmartCompletionType(IVBExpectedTypesProvider expectedTypeProvider);
    protected virtual bool IsAvailable(VBCodeCompletionContextSmart context);
    protected virtual bool AddLookupItems(VBCodeCompletionContextSmart context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.Combo.VBSmartConstructorRule : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextBase> {
    public CompletionMode SupportedCompletionMode { get; }
    protected virtual bool IsAvailable(VBCodeCompletionContextBase context);
    public virtual CompletionMode get_SupportedCompletionMode();
    protected virtual bool AddLookupItems(VBCodeCompletionContextBase context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.Double.VBDoubleCompletionRangesProvider : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextBase> {
    public CompletionMode SupportedCompletionMode { get; }
    public virtual CompletionMode get_SupportedCompletionMode();
    protected virtual TextLookupRanges GetDefaultRanges(VBCodeCompletionContextBase context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.Double.VBExpandBasicCompletionProvider : VBExpandBasicCompletionProviderBase {
}
public abstract class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.Double.VBExpandBasicCompletionProviderBase : VBItemsProviderBase`2<VBCodeCompletionContextSimple, ICompletableReference> {
    public CompletionMode SupportedCompletionMode { get; }
    protected virtual bool IsAvailable(VBCodeCompletionContextSimple context);
    public virtual CompletionMode get_SupportedCompletionMode();
    protected virtual bool AddLookupItems(VBCodeCompletionContextSimple context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.Double.VBExpandImportCompletionProvider : ExpandImportCompletionProviderBase`1<VBCodeCompletionContextSimple> {
    public VBExpandImportCompletionProvider(ModuleReferencerService moduleReferencerService);
    protected virtual bool IsQualifiedContext(VBCodeCompletionContextSimple context);
    protected virtual TextLookupRanges GetRanges(VBCodeCompletionContextSimple context);
    protected virtual ITreeNode GetTreeNode(VBCodeCompletionContextSimple context);
    protected virtual ILookupItem CreateLookupItem(VBCodeCompletionContextSimple context, IGrouping`2<string, ITypeElement> typeElements);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.Double.VBExpandSmartCompletionRule : VBItemsProviderBase`2<VBCodeCompletionContextBase, ICompletableReference> {
    public CompletionMode SupportedCompletionMode { get; }
    protected virtual bool IsAvailable(VBCodeCompletionContextBase context);
    public virtual CompletionMode get_SupportedCompletionMode();
    protected virtual bool AddLookupItems(VBCodeCompletionContextBase context, IItemsCollector collector);
    private void ProcessTable(VBCodeCompletionContextBase context, Int32& itemsAdded, List`1<ISymbolInfo> table, Dictionary`2<string, HashSet`1<IDeclaredElement>> overloadsCache, IItemsCollector collector, ILookupItem[] initialLookupItems, int priority, Nullable`1<bool> withTypeInference);
}
internal class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.EraseRedimSmartCompletionTypeBase : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextSmart> {
    protected virtual void TransformItems(VBCodeCompletionContextSmart context, IItemsCollector collector);
    public static bool FilterLookupItem(IDeclaredElement element, ISubstitution substitution);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.EraseSmartCompletionType : EraseRedimSmartCompletionTypeBase {
    protected virtual bool IsAvailable(VBCodeCompletionContextSmart context);
    protected virtual void DecorateItems(VBCodeCompletionContextSmart context, IReadOnlyCollection`1<ILookupItem> items);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.EventSubscriptionSmartCompletionType : VBItemsProviderBase`2<VBCodeCompletionContextSmart, IReferenceExpressionReference> {
    protected virtual bool IsAvailable(VBCodeCompletionContextSmart context);
    protected virtual ILookupItem CreateLookupItem(string name, DeclaredElementInstance`1<IDeclaredElement> declaredElementInstance, VBCodeCompletionContextSmart context, TextLookupRanges ranges, TailType tailType);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.ExpressionSmartCompletionType : VBItemsProviderBase`2<VBCodeCompletionContextSmart, ICompletableReference> {
    protected virtual bool IsAvailable(VBCodeCompletionContextSmart context);
    protected virtual void AddLookupItemsForDeclaredElement(VBCodeCompletionContextSmart context, IItemsCollector collector, TextLookupRanges ranges, DeclaredElementInstance`1<IDeclaredElement> instance, string name);
    private static bool MatchesByType(IDeclaredElement declaredElement, ISubstitution substitution, ExpectedType expected, VBCodeCompletionContextSmart context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.FileReferenceVBItemsProvider : FileReferenceItemsProvider`1<VBCodeCompletionContextBase> {
    protected virtual TextLookupRanges EvaluateRanges(VBCodeCompletionContextBase context);
    protected virtual IFileReference GetReference(VBCodeCompletionContextBase context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.FilterStaticEqualsRule : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextBase> {
    protected virtual bool IsAvailable(VBCodeCompletionContextBase context);
    protected virtual void TransformItems(VBCodeCompletionContextBase context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.Generate.VBConstructorRule : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextBase> {
    public EvaluationMode SupportedEvaluationMode { get; }
    protected virtual bool IsAvailable(VBCodeCompletionContextBase context);
    public virtual EvaluationMode get_SupportedEvaluationMode();
    protected virtual bool AddLookupItems(VBCodeCompletionContextBase context, IItemsCollector collector);
    private void AddItem(string text, IEnumerable`1<DeclaredElementInstance> elements, PsiIconManager psiIconManager, VBCodeCompletionContextBase context, IItemsCollector collector);
    private static bool IsTrivial(IDeclaration declaration);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.Generate.VBImplementMembersRule : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextSimple> {
    public EvaluationMode SupportedEvaluationMode { get; }
    protected virtual bool IsAvailable(VBCodeCompletionContextSimple context);
    public virtual EvaluationMode get_SupportedEvaluationMode();
    protected virtual bool AddLookupItems(VBCodeCompletionContextSimple context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.Generate.VBOverrideRule : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextSimple> {
    public EvaluationMode SupportedEvaluationMode { get; }
    protected virtual bool IsAvailable(VBCodeCompletionContextSimple context);
    public virtual EvaluationMode get_SupportedEvaluationMode();
    protected virtual bool AddLookupItems(VBCodeCompletionContextSimple context, IItemsCollector collector);
    private string GetAccessRightsText(AccessRights rights);
}
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.Generate.VBOverrideUtil : object {
    public static LookupItem`1<TextualInfo> CreateTextLookupItem(CodeCompletionContext context, TextLookupRanges ranges, string text, string type, bool emphasize, bool isDynamic);
    public static ILookupItem CreateOverridableMemberLookupItem(VBCodeCompletionContextBase context, OverridableMemberInstance instance);
    public static ILookupItem CreateMissingMemberLookupItem(VBCodeCompletionContextBase context, string name, OverridableMemberInstance instance, bool isExplicitImplementation);
    public static CombinedLookupItem CreateCombinedLookupItem(CodeCompletionContext context, TextLookupRanges ranges, ILookupItem[] items, ILookupItem sampleItem, bool autocomplete, bool exactMatch);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.Generate.VBPartialMethodRule : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextSimple> {
    protected virtual bool IsAvailable(VBCodeCompletionContextSimple context);
    protected virtual bool AddLookupItems(VBCodeCompletionContextSimple context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.Generate.VBPartialRule : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextSimple> {
    protected virtual bool IsAvailable(VBCodeCompletionContextSimple context);
    protected virtual bool AddLookupItems(VBCodeCompletionContextSimple context, IItemsCollector collector);
    private bool IsPartial(IClass classElement);
    [CompilerGeneratedAttribute]
private bool _Lambda$__2-0(IClass el);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.Generate.VBPropertyRule : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextBase> {
    protected virtual bool IsAvailable(VBCodeCompletionContextBase context);
    protected virtual bool AddLookupItems(VBCodeCompletionContextBase context, IItemsCollector collector);
    private ILookupItem CreateLookupItem(string propertyName, IField field, bool isReadOnly, PsiIconManager psiIconManager, VBCodeCompletionContextBase context);
    public IVBTreeNode GetResolveContext(IClassLikeDeclaration declaration);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.Generate.ZoneMarker : object {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.InterfaceMemberSpecifierCompletionType : VBItemsProviderBase`2<VBCodeCompletionContextSmart, ICompletableReference> {
    private static Key`1<IInterfaceMemberSpecifier> ourKey;
    private static InterfaceMemberSpecifierCompletionType();
    protected virtual bool IsAvailable(VBCodeCompletionContextSmart context);
    protected virtual bool AddLookupItems(VBCodeCompletionContextSmart context, IItemsCollector collector);
    protected virtual void AddLookupItemsForDeclaredElement(VBCodeCompletionContextSmart context, IItemsCollector collector, TextLookupRanges ranges, DeclaredElementInstance`1<IDeclaredElement> instance, string name);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.InvocationStatementSmartCompletionType : VBItemsProviderBase`2<VBCodeCompletionContextSmart, ICompletableReference> {
    protected virtual bool IsAvailable(VBCodeCompletionContextSmart context);
    protected virtual bool IsIncluded(IDeclaredElement declaredElement, ISubstitution substitution, VBCodeCompletionContextSmart context);
}
internal class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.Keyword.AsKeywordCompletionInfo : KeywordCompletionInfo {
    public AsKeywordCompletionInfo(LanguageService languageService, TailType tailType, TokenNodeType tokenType);
    protected virtual bool CheckErrorElements(ITokenNode tokenNode, ITreeNode treeNode, int insertedTokenStart, IList`1<IErrorElement> oldErrorElements, VBCodeCompletionContextSimple fullContext);
}
internal class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.Keyword.ElseKeywordCompletionInfo : KeywordCompletionInfo {
    public ElseKeywordCompletionInfo(LanguageService languageService, TokenNodeType[] tokenTypes);
    protected virtual bool CheckAfterReparse(ITokenNode tokenNode, ITreeNode treeNode, int insertedTokenStart, IList`1<IErrorElement> oldErrorElements, VBCodeCompletionContextSimple vbCodeCompletionContextSimple);
}
internal class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.Keyword.EndKeywordCompletionInfo : KeywordCompletionInfo {
    public EndKeywordCompletionInfo(string lookupItemText, string textToInsert, TokenNodeType tokenType);
    public static EndKeywordCompletionInfo Create(LanguageService languageService, TokenNodeType tokenType, bool cutEndOff);
    protected virtual bool CheckAfterReparse(ITokenNode tokenNode, ITreeNode treeNode, int insertedTokenStart, IList`1<IErrorElement> oldErrorElements, VBCodeCompletionContextSimple vbCodeCompletionContextSimple);
}
internal class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.Keyword.EndKeywordsProvider : object {
    private ITokenNode myTokenToReplace;
    private TextLookupRanges myRanges;
    private bool myTokenToReplaceTextIsPreserved;
    public ITokenNode TokenToReplace { get; }
    public bool TokenToReplaceTextIsPreserved { get; }
    public TextLookupRanges Ranges { get; }
    public EndKeywordsProvider(ITokenNode tokenToReplace, TextLookupRanges ranges, bool tokenToReplaceTextIsPreserved);
    public sealed virtual override ITokenNode get_TokenToReplace();
    public sealed virtual override bool get_TokenToReplaceTextIsPreserved();
    public sealed virtual override TextLookupRanges get_Ranges();
    public sealed virtual override IEnumerable`1<KeywordCompletionInfo> GetKeywords(VBReparseContextKeywords reparseContext);
}
internal interface JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.Keyword.IKeywordsProvider {
    public ITokenNode TokenToReplace { get; }
    public bool TokenToReplaceTextIsPreserved { get; }
    public TextLookupRanges Ranges { get; }
    public abstract virtual ITokenNode get_TokenToReplace();
    public abstract virtual bool get_TokenToReplaceTextIsPreserved();
    public abstract virtual TextLookupRanges get_Ranges();
    public abstract virtual IEnumerable`1<KeywordCompletionInfo> GetKeywords(VBReparseContextKeywords reparseContext);
}
internal class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.Keyword.KeywordCompletionInfo : object {
    private static string UnexpectedEndOfFileString;
    private string TextToInsert;
    private TokenNodeType[] TokenTypesToCheck;
    private bool OnlyNonQualifiedContext;
    private bool myIgnoreErrorElements;
    public string LookupItemText;
    public TailType TailType;
    public bool IgnoreErrorElements { get; public set; }
    protected int TokenTypesToCheckStartIndex { get; }
    public KeywordCompletionInfo(string textToInsert, TokenNodeType[] tokenTypesToCheck, string lookupItemText, TailType tailType, bool onlyNonQualifiedContext);
    private KeywordCompletionInfo(string text, TokenNodeType[] tokenTypesToCheck, TailType tailType);
    public KeywordCompletionInfo(LanguageService languageService, TokenNodeType[] tokenTypes);
    public KeywordCompletionInfo(LanguageService languageService, TailType tailType, TokenNodeType[] tokenTypes);
    public KeywordCompletionInfo(string text, TokenNodeType[] tokenTypes);
    public KeywordCompletionInfo(string text, TailType tailType, TokenNodeType[] tokenTypes);
    public bool get_IgnoreErrorElements();
    public void set_IgnoreErrorElements(bool value);
    public virtual bool IsApplicable(VBReparseContextKeywords reparseContext, string additionalText, IList`1<IErrorElement> oldErrorElements, bool qualifiedContext, VBCodeCompletionContextSimple context);
    protected virtual bool CheckAfterReparse(ITokenNode tokenNode, ITreeNode treeNode, int insertedTokenStart, IList`1<IErrorElement> oldErrorElements, VBCodeCompletionContextSimple fullContext);
    protected virtual bool CheckModifiers(ITokenNode tokenNode);
    protected virtual bool CheckForeachLoopVariable(ITokenNode tokenNode);
    protected virtual int get_TokenTypesToCheckStartIndex();
    protected virtual bool CheckErrorElements(ITokenNode tokenNode, ITreeNode treeNode, int insertedTokenStart, IList`1<IErrorElement> oldErrorElements, VBCodeCompletionContextSimple fullContext);
    protected virtual bool CheckContainingErrorElement(ITokenNode tokenNode);
    protected static bool CheckTokenType(ITokenNode tokenNode, TokenNodeType[] tokenNodeTypes, int startIndex);
    public static string CalculateText(LanguageService languageService, TokenNodeType[] tokenTypes);
    public static IList`1<string> GetWords(string text);
    public static string WordsToText(IList`1<string> words, int startIndex);
}
internal class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.Keyword.PreprocessorKeywordCompletionInfo : KeywordCompletionInfo {
    private int myTokenTypesToCheckStartIndex;
    protected int TokenTypesToCheckStartIndex { get; }
    private PreprocessorKeywordCompletionInfo(string textToInsert, TokenNodeType[] tokenTypesToCheck, int startIndex, string lookupItemText, TailType tailType);
    protected virtual int get_TokenTypesToCheckStartIndex();
    public static PreprocessorKeywordCompletionInfo Create(IList`1<string> existingWords, string text, TokenNodeType[] tokenTypesToCheck, TailType tailType);
    public static PreprocessorKeywordCompletionInfo Create(IList`1<string> existingWords, string lookupItemText, string textToInsert, TokenNodeType[] tokenTypesToCheck, TailType tailType);
    protected virtual bool CheckErrorElements(ITokenNode tokenNode, ITreeNode treeNode, int insertedTokenStart, IList`1<IErrorElement> oldErrorElements, VBCodeCompletionContextSimple fullContext);
}
internal class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.Keyword.PreprocessorKeywordsProvider : object {
    [CanBeNullAttribute]
private ITokenNode mySharpToken;
    [NotNullAttribute]
private ITokenNode myTokenToReplace;
    private bool myTokenTextIsPreserved;
    [NotNullAttribute]
private TextLookupRanges myRanges;
    public ITokenNode TokenToReplace { get; }
    public bool TokenToReplaceTextIsPreserved { get; }
    public TextLookupRanges Ranges { get; }
    public PreprocessorKeywordsProvider(ITokenNode sharpToken, ITokenNode tokenToReplace, bool tokenTextIsPreserved, TextLookupRanges ranges);
    public sealed virtual override ITokenNode get_TokenToReplace();
    public sealed virtual override bool get_TokenToReplaceTextIsPreserved();
    public sealed virtual override TextLookupRanges get_Ranges();
    public sealed virtual override IEnumerable`1<KeywordCompletionInfo> GetKeywords(VBReparseContextKeywords reparseContext);
    private string GetExistingPrefix();
}
internal class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.Keyword.RegularKeywordsProvider : object {
    private static List`1<KeywordCompletionInfo> ourGloballInfos;
    private static OneToListMap`2<ContextType, Pair`2<Func`2<ITreeNode, bool>, KeywordCompletionInfo>> ourInfosPerContext;
    private static OneToListMap`2<string, string> ourOptions;
    private ITokenNode myTokenToReplace;
    private TextLookupRanges myRanges;
    private bool myTokenToReplaceTextIsPreserved;
    public ITokenNode TokenToReplace { get; }
    public bool TokenToReplaceTextIsPreserved { get; }
    public TextLookupRanges Ranges { get; }
    public RegularKeywordsProvider(ITokenNode tokenToReplace, TextLookupRanges ranges, bool tokenToReplaceTextIsPreserved);
    private static RegularKeywordsProvider();
    private static void Add(KeywordCompletionInfo info, ContextType[] contexts);
    private static void Add(KeywordCompletionInfo info, Type type, ContextType[] contexts);
    private static void Add(KeywordCompletionInfo info, Type[] types, ContextType[] contexts);
    private static void Add(KeywordCompletionInfo info, Func`2<ITreeNode, bool> func, ContextType[] contexts);
    private static bool NotInSharedMember(ITreeNode arg);
    private static bool IsValidForNext(ITreeNode treeNode);
    public sealed virtual override IEnumerable`1<KeywordCompletionInfo> GetKeywords(VBReparseContextKeywords reparseContext);
    private static bool HasParentOfExpectedType(ITreeNode node, Type[] expectedTypes);
    private static bool IsSub(ITreeNode node);
    private static bool IsFunction(ITreeNode node);
    private static bool IsGet(ITreeNode node);
    private static bool IsSet(ITreeNode node);
    private static bool IsAddHandler(ITreeNode node);
    private static bool IsRemoveHandler(ITreeNode node);
    private static bool IsEventRaiser(ITreeNode node);
    private static bool AcceptsTypeMemberSpecificModifier(ITreeNode node);
    public sealed virtual override ITokenNode get_TokenToReplace();
    public sealed virtual override bool get_TokenToReplaceTextIsPreserved();
    public sealed virtual override TextLookupRanges get_Ranges();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.Keyword.VBItemsProviderKeywords : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextSimple> {
    protected virtual bool IsAvailable(VBCodeCompletionContextSimple context);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(VBCodeCompletionContextSimple context);
    protected virtual bool AddLookupItems(VBCodeCompletionContextSimple context, IItemsCollector collector);
    private static IEnumerable`1<IKeywordsProvider> GetKeywordsProviders(VBCodeCompletionContextSimple context);
}
internal class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.Keyword.VBKeywordTailType : SimpleTailType {
    public static TailType SpaceCaret;
    public static TailType SpaceString;
    public static TailType SpaceCaretNewLine;
    public static TailType NewLine;
    public static TailType Sub;
    public static TailType Function;
    private static VBKeywordTailType();
    public VBKeywordTailType(string name, TokenNodeType[] nodeTypes);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.Keyword.VBThenProvider : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextBase> {
    protected virtual bool IsAvailable(VBCodeCompletionContextBase context);
    protected virtual bool AddLookupItems(VBCodeCompletionContextBase context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.MemberInitializerSmartCompletionType : VBItemsProviderBase`2<VBCodeCompletionContextSmart, ICompletableReference> {
    protected virtual bool IsAvailable(VBCodeCompletionContextSmart context);
    protected virtual bool AddLookupItems(VBCodeCompletionContextSmart context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.MethodGroupCorrectionRule : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextBase> {
    protected virtual bool IsAvailable(VBCodeCompletionContextBase context);
    protected virtual void DecorateItems(VBCodeCompletionContextBase context, IReadOnlyCollection`1<ILookupItem> items);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.ObjectCreationSmartCompletionType : VBItemsProviderBase`2<VBCodeCompletionContextBase, ICompletableReference> {
    private IVBExpectedTypesProvider myExpectedTypeProvider;
    public EvaluationMode SupportedEvaluationMode { get; }
    public ObjectCreationSmartCompletionType(IVBExpectedTypesProvider expectedTypeProvider);
    protected virtual bool IsAvailable(VBCodeCompletionContextBase context);
    public virtual EvaluationMode get_SupportedEvaluationMode();
    protected virtual bool AddLookupItems(VBCodeCompletionContextBase context, IItemsCollector collector);
    public static void AddConstructorItems(VBCodeCompletionContextBase context, ICompletableReference reference, ITreeNode treeNode, IReadOnlyList`1<ExpectedType> expectedTypes, IItemsCollector collector, bool withInheritors, bool onlyInheritors, Boolean& itemsAdded, bool prioritizeItems);
    private static TailType CalculateTailType(ITypeElement typeElement, CodeCompletionContext basicContext);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.ObjectCreationTypeUsageSmartCompletionType : TypeUsageSmartCompletionTypeBase {
    private IVBExpectedTypesProvider myExpectedTypesProvider;
    public ObjectCreationTypeUsageSmartCompletionType(IVBExpectedTypesProvider expectedTypesProvider);
    protected virtual IReadOnlyList`1<ExpectedType> GetExpectedTypes(VBCodeCompletionContextSmart context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.RedimSmartCompletionType : EraseRedimSmartCompletionTypeBase {
    protected virtual bool IsAvailable(VBCodeCompletionContextSmart context);
    protected virtual void DecorateItems(VBCodeCompletionContextSmart context, IReadOnlyCollection`1<ILookupItem> items);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.SoftWhereTupleNameExpectedRule : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextSimple> {
    protected virtual bool IsAvailable(VBCodeCompletionContextSimple context);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(VBCodeCompletionContextSimple context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.SoftWhereVariableNameExpectedRule : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextSimple> {
    protected virtual bool IsAvailable(VBCodeCompletionContextSimple context);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(VBCodeCompletionContextSimple context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.TypeUsageSmartCompletionType : TypeUsageSmartCompletionTypeBase {
    private IVBExpectedTypesProvider myExpectedTypesProvider;
    public TypeUsageSmartCompletionType(IVBExpectedTypesProvider expectedTypesProvider);
    protected virtual IReadOnlyList`1<ExpectedType> GetExpectedTypes(VBCodeCompletionContextSmart context);
}
internal abstract class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.TypeUsageSmartCompletionTypeBase : VBItemsProviderBase`2<VBCodeCompletionContextSmart, ICompletableReference> {
    protected virtual bool AddLookupItems(VBCodeCompletionContextSmart context, IItemsCollector collector);
    protected abstract virtual IReadOnlyList`1<ExpectedType> GetExpectedTypes(VBCodeCompletionContextSmart context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBAddAwaitTaskMethods : VBItemsProviderBase`2<VBCodeCompletionContextSmart, ICompletableReference> {
    private static Key`1<JetHashSet`1<IDeclaredElement>> ourElementsToDecorateKey;
    private static VBAddAwaitTaskMethods();
    protected virtual bool IsAvailable(VBCodeCompletionContextSmart context);
    protected virtual bool AddLookupItems(VBCodeCompletionContextSmart context, IItemsCollector collector);
    protected virtual bool IsIncluded(IDeclaredElement declaredElement, ISubstitution substitution, VBCodeCompletionContextSmart context);
    protected virtual void DecorateItems(VBCodeCompletionContextSmart context, IReadOnlyCollection`1<ILookupItem> items);
    private bool MatchesByType(IDeclaredElement declaredElement, ExpectedType expectedType);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBCompletionRangesProviderForSimpleContext : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextSimple> {
    public EvaluationMode SupportedEvaluationMode { get; }
    protected virtual bool IsAvailable(VBCodeCompletionContextSimple context);
    public virtual EvaluationMode get_SupportedEvaluationMode();
    protected virtual TextLookupRanges GetDefaultRanges(VBCodeCompletionContextSimple context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBCompletionRangesProviderForSmartContext : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextSmart> {
    public EvaluationMode SupportedEvaluationMode { get; }
    protected virtual bool IsAvailable(VBCodeCompletionContextSmart context);
    public virtual EvaluationMode get_SupportedEvaluationMode();
    protected virtual TextLookupRanges GetDefaultRanges(VBCodeCompletionContextSmart context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBConstructorCallItemsProvider : VBItemsProviderBase`2<VBCodeCompletionContextBase, IReferenceExpressionReference> {
    protected virtual bool IsAvailable(VBCodeCompletionContextBase context);
    protected virtual ISymbolTable GetCompletionSymbolTable(IReferenceExpressionReference reference, VBCodeCompletionContextBase context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBEnumMembers : VBItemsProviderBase`2<VBCodeCompletionContextBase, ICompletableReference> {
    public bool IsFinal { get; }
    protected virtual bool AddLookupItems(VBCodeCompletionContextBase context, IItemsCollector collector);
    protected virtual bool IsAvailable(VBCodeCompletionContextBase context);
    public virtual bool get_IsFinal();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBExpandItemsProviderImportExtensionMethods : VBItemsProviderImportExtensionMethodsBase {
    private ModuleReferencerService myModuleReferencerService;
    public CompletionMode SupportedCompletionMode { get; }
    protected bool WithReferences { get; }
    public VBExpandItemsProviderImportExtensionMethods(ModuleReferencerService moduleReferencerService);
    protected virtual bool IsAvailable(VBCodeCompletionContextSimple specificContext);
    public virtual CompletionMode get_SupportedCompletionMode();
    protected virtual ILookupItem CreateMethodsLookupItem(VBCodeCompletionContextSimple context, Pair`2<INamespace, string> key, JetReadOnlyCollection`1<IMethod> itemMethods);
    protected virtual bool get_WithReferences();
    protected virtual bool ShouldBeIncluded(VBCodeCompletionContextSimple context, ICollection`1<IMethod> methods);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBFilterExtensionMethodsRule : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextSimple> {
    protected virtual void TransformItems(VBCodeCompletionContextSimple context, IItemsCollector collector);
    protected virtual bool IsAvailable(VBCodeCompletionContextSimple context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBFixTailTypeRule : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextBase> {
    protected virtual bool IsAvailable(VBCodeCompletionContextBase context);
    protected virtual void DecorateItems(VBCodeCompletionContextBase context, IReadOnlyCollection`1<ILookupItem> items);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBImportCompletionWorkflow : VBItemsProviderBase`2<VBCodeCompletionContextSimple, ICompletableReference> {
    public CompletionMode SupportedCompletionMode { get; }
    public EvaluationMode SupportedEvaluationMode { get; }
    protected virtual bool IsAvailable(VBCodeCompletionContextSimple context);
    public virtual CompletionMode get_SupportedCompletionMode();
    public virtual EvaluationMode get_SupportedEvaluationMode();
    protected virtual bool AddLookupItems(VBCodeCompletionContextSimple context, IItemsCollector collector);
    protected virtual void TransformItems(VBCodeCompletionContextSimple context, IItemsCollector collector);
    private void AddLookupItemsByReferenceName(IReferenceNameReference referenceNameReference, IdentifierMatcher prefixMatcher, IItemsCollector collector, VBCodeCompletionContextSimple context, bool isBasic);
    private void AddLookupItemsItemsByReferenceExpression(IReferenceExpressionReference referenceExpressionReference, IdentifierMatcher prefixMatcher, IItemsCollector collector, VBCodeCompletionContextSimple context, bool isBasic);
    private List`1<Pair`2<string, ITypeElement>> GetAccesibleTypeElements(ITreeNode element, IdentifierMatcher prefixMatcher, VBCodeCompletionContextSimple context, bool isBasic, IItemsCollector collector, ImportCompletionCache importCompletionCache);
    private List`1<Pair`2<string, ITypeElement>> FilterListByBaseClass(List`1<Pair`2<string, ITypeElement>> list, ITypeElement baseClass);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBItemsFromValueProvidersRule : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextBase> {
    protected virtual bool IsAvailable(VBCodeCompletionContextBase context);
    protected virtual bool AddLookupItems(VBCodeCompletionContextBase context, IItemsCollector collector);
}
public abstract class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBItemsProviderBase`2 : ItemsProviderWithSymbolTable`3<TContext, TReference, IVBFile> {
    protected virtual ILookupItem CreateLookupItem(string name, DeclaredElementInstance`1<IDeclaredElement> declaredElementInstance, TContext context, TextLookupRanges ranges, TailType tailType);
    protected virtual TextLookupRanges EvaluateRanges(TContext context);
    protected virtual TReference GetReference(TContext context);
    protected IDeclaration GetOriginalDeclaration(IDeclaration tmpDeclaration, TContext context);
    protected virtual ISymbolTable GetCompletionSymbolTable(TReference reference, TContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBItemsProviderBasicCompletionWorkflow : VBItemsProviderBase`2<VBCodeCompletionContextSimple, ICompletableReference> {
    private ObjectCreationSmartCompletionType myObjectCreationSmartCompletionType;
    public VBItemsProviderBasicCompletionWorkflow(ObjectCreationSmartCompletionType objectCreationSmartCompletionType);
    protected virtual ICompletableReference GetReference(VBCodeCompletionContextSimple context);
    protected virtual bool IsAvailable(VBCodeCompletionContextSimple context);
    protected virtual bool IsIncluded(IDeclaredElement declaredElement, ISubstitution substitution, VBCodeCompletionContextSimple context);
    protected virtual bool AddLookupItems(VBCodeCompletionContextSimple context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBItemsProviderExtraItemsOfExpectedTypes : VBItemsProviderBase`2<VBCodeCompletionContextBase, ICompletableReference> {
    protected virtual bool IsAvailable(VBCodeCompletionContextBase context);
    protected virtual bool AddLookupItems(VBCodeCompletionContextBase context, IItemsCollector collector);
    private static bool MemberFilter(ITypeMember arg);
    private void AddTypeMembers(IReference reference, VBCodeCompletionContextBase context, IDeclaredType declaredType, ITypeElement element, ISubstitution substitution, IReadOnlyList`1<ExpectedType> expectedTypes, IItemsCollector collector, TailType secondTail);
    private void GetSpecificItems(VBCodeCompletionContextBase context, IType type, IItemsCollector collector);
    private string GetExpectedName(IReadOnlyList`1<ExpectedType> expectedTypes, IType type);
    private IEnumerable`1<NameRoot> GetExpectedNameRoots(IReadOnlyList`1<ExpectedType> expectedTypes, IType type);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBItemsProviderImportExtensionMethods : VBItemsProviderImportExtensionMethodsBase {
    protected bool WithReferences { get; }
    protected virtual ILookupItem CreateMethodsLookupItem(VBCodeCompletionContextSimple context, Pair`2<INamespace, string> key, JetReadOnlyCollection`1<IMethod> itemMethods);
    protected virtual bool get_WithReferences();
}
public abstract class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBItemsProviderImportExtensionMethodsBase : VBItemsProviderBase`2<VBCodeCompletionContextSimple, ICompletableReference> {
    public CompletionMode SupportedCompletionMode { get; }
    public EvaluationMode SupportedEvaluationMode { get; }
    protected bool WithReferences { get; }
    protected virtual bool IsAvailable(VBCodeCompletionContextSimple context);
    public virtual CompletionMode get_SupportedCompletionMode();
    public virtual EvaluationMode get_SupportedEvaluationMode();
    protected virtual bool AddLookupItems(VBCodeCompletionContextSimple context, IItemsCollector collector);
    protected abstract virtual ILookupItem CreateMethodsLookupItem(VBCodeCompletionContextSimple context, Pair`2<INamespace, string> key, JetReadOnlyCollection`1<IMethod> itemMethods);
    protected abstract virtual bool get_WithReferences();
    protected virtual bool ShouldBeIncluded(VBCodeCompletionContextSimple context, ICollection`1<IMethod> methods);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBItemsProviderImportMethodsFromModules : VBItemsProviderBase`2<VBCodeCompletionContextSimple, ICompletableReference> {
    protected virtual bool IsAvailable(VBCodeCompletionContextSimple context);
    private void CollectModules(ISymbolScope symbolScope, VBModuleCache moduleCache, INamespace ns, OneToListMap`2<INamespace, ITypeElement> modules);
    protected virtual bool AddLookupItems(VBCodeCompletionContextSimple context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBItemsProviderInHandlesClause : VBItemsProviderBase`2<VBCodeCompletionContextSmart, ICompletableReference> {
    protected virtual bool IsAvailable(VBCodeCompletionContextSmart context);
    private static bool IsFieldReference(VBCodeCompletionContextSmart context);
    protected virtual ILookupItem CreateLookupItem(string name, DeclaredElementInstance`1<IDeclaredElement> declaredElementInstance, VBCodeCompletionContextSmart context, TextLookupRanges ranges, TailType tailType);
    protected virtual bool AddLookupItems(VBCodeCompletionContextSmart context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBItemsProviderNameCompletion : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextSimple> {
    private static Key`1<object> ItemsAddedKey;
    public bool IsDynamic { get; }
    private static VBItemsProviderNameCompletion();
    protected virtual AutocompletionBehaviour GetAutocompletionBehaviour(VBCodeCompletionContextSimple specificContext);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(VBCodeCompletionContextSimple context);
    protected virtual bool IsAvailable(VBCodeCompletionContextSimple context);
    private bool IsCatchVariable(VBCodeCompletionContextSimple context);
    private static bool IsForEachCase(VBCodeCompletionContextSimple context);
    private static IVBIdentifier GetDeclarationIdentifier(VBCodeCompletionContextSimple context);
    protected virtual bool AddLookupItems(VBCodeCompletionContextSimple context, IItemsCollector collector);
    public virtual bool get_IsDynamic();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBItemsProviderNamedArguments : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextSmart> {
    protected virtual bool IsAvailable(VBCodeCompletionContextSmart context);
    protected virtual bool AddLookupItems(VBCodeCompletionContextSmart context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBMergeConstructorsRule : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextBase> {
    protected virtual bool IsAvailable(VBCodeCompletionContextBase context);
    protected virtual void TransformItems(VBCodeCompletionContextBase context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBMergeGenericTypesRule : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextBase> {
    protected virtual void TransformItems(VBCodeCompletionContextBase context, IItemsCollector collector);
    public static void MergeGenericTypes(VBCodeCompletionContextBase context, IItemsCollector collector);
    private static DeclaredElementInstance SelectBestTypeElement(IEnumerable`1<DeclaredElementInstance> typeElements);
    private static int Comparison(DeclaredElementInstance x, DeclaredElementInstance y);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBMergeImportItemsRule : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextSimple> {
    protected virtual bool IsAvailable(VBCodeCompletionContextSimple context);
    protected virtual void TransformItems(VBCodeCompletionContextSimple context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBMergeMethodsRule : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextBase> {
    protected virtual void TransformItems(VBCodeCompletionContextBase context, IItemsCollector collector);
    public static ILookupItem DoTransformSingleItem(VBCodeCompletionContextBase context, ILookupItem lookupItem);
    public static void DoTransformItems(VBCodeCompletionContextBase context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBParameterNameItemsProvider : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextSimple> {
    protected virtual bool IsAvailable(VBCodeCompletionContextSimple context);
    protected virtual bool AddLookupItems(VBCodeCompletionContextSimple context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBPreferExactTypesInComparison : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextBase> {
    protected virtual bool IsAvailable(VBCodeCompletionContextBase context);
    protected virtual void TransformItems(VBCodeCompletionContextBase context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBPushExtensionMethodsDownRule : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextSimple> {
    public bool IsFinal { get; }
    protected virtual bool IsAvailable(VBCodeCompletionContextSimple context);
    public virtual bool get_IsFinal();
    protected virtual void TransformItems(VBCodeCompletionContextSimple context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBRelevanceRule : CLRLanguageRelevanceRuleBase`1<VBCodeCompletionContextBase> {
    protected virtual void AddLanguageSpecificRelevance(IEnumerable`1<ILookupItem> items, VBCodeCompletionContextBase context);
    protected virtual ITypeElement GetCurrentTypeElement(VBCodeCompletionContextBase context);
    protected virtual int GetStartOffsetInReparseContext(VBCodeCompletionContextBase context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBSimpleTypeItemsRule : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextBase> {
    protected virtual bool IsAvailable(VBCodeCompletionContextBase context);
    protected virtual void TransformItems(VBCodeCompletionContextBase context, IItemsCollector collector);
    private ILookupItem CreateLookupItem(string simpleTypeName, DeclaredElementInstance instance, VBCodeCompletionContextBase context);
    private Dictionary`2<ITypeElement, string> PrepareSimpleTypes(ICompletableReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBSoftAfterDimRule : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextBase> {
    protected virtual bool IsAvailable(VBCodeCompletionContextBase context);
    private bool IsAfterDimKeyword(VBCodeCompletionContextBase context);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(VBCodeCompletionContextBase context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBSoftAfterUsingRule : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextSimple> {
    protected virtual bool IsAvailable(VBCodeCompletionContextSimple context);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(VBCodeCompletionContextSimple context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBSoftenCompletionBehaviourForLoopVariablesRule : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextBase> {
    protected virtual bool IsAvailable(VBCodeCompletionContextBase context);
    private static bool IsLoopControlVariablePossible(VBCodeCompletionContextBase context);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(VBCodeCompletionContextBase context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBSoftenCompletionBehaviourForTemplateItemsRule : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextSimple> {
    private static Key`1<object> ourKey;
    private static VBSoftenCompletionBehaviourForTemplateItemsRule();
    protected virtual bool IsAvailable(VBCodeCompletionContextSimple context);
    protected virtual void DecorateItems(VBCodeCompletionContextSimple context, IReadOnlyCollection`1<ILookupItem> items);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(VBCodeCompletionContextSimple context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBSoftenCompletionBehaviourForXMLRule : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextBase> {
    protected virtual bool IsAvailable(VBCodeCompletionContextBase context);
    private static bool IsXmlVariablePossible(VBCodeCompletionContextBase context);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(VBCodeCompletionContextBase context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Rules.VBUnitTestCategorySuggestionRule : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextBase> {
    protected virtual bool IsAvailable(VBCodeCompletionContextBase context);
    protected virtual bool AddLookupItems(VBCodeCompletionContextBase context, IItemsCollector collector);
    private static TextLookupRanges EvaluateRanges(VBCodeCompletionContextBase context);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(VBCodeCompletionContextBase context);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Strategies.VBAutomaticStrategyOnDocCommentTags : object {
    private VBIntellisenseManager myVBIntellisenseManager;
    private SettingsScalarEntry mySettingsScalarEntry;
    public bool ForceHideCompletion { get; }
    public PsiLanguageType Language { get; }
    public VBAutomaticStrategyOnDocCommentTags(VBIntellisenseManager vbIntellisenseManager, ISettingsStore settingsStore);
    public sealed virtual override AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    public sealed virtual override bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore boundSettingsStore);
    public sealed virtual override bool ProcessSubsequentTyping(char c, ITextControl textControl);
    public sealed virtual override bool AcceptsFile(IFile file, ITextControl textControl);
    public sealed virtual override bool get_ForceHideCompletion();
    public sealed virtual override PsiLanguageType get_Language();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Strategies.VBAutomaticStrategyOnDot : VBAutomaticStrategyOnSymbolBase {
    public VBAutomaticStrategyOnDot(VBIntellisenseManager vbIntellisenseManager, ISettingsStore settingsStore);
    protected virtual char GetSymbol();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Strategies.VBAutomaticStrategyOnIdentifier : object {
    protected VBIntellisenseManager myVBIntellisenseManager;
    private SettingsScalarEntry mySettingsScalarEntry;
    public bool ForceHideCompletion { get; }
    public PsiLanguageType Language { get; }
    public VBAutomaticStrategyOnIdentifier(VBIntellisenseManager vbIntellisenseManager, ISettingsStore settingsStore);
    public sealed virtual override AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    public virtual override bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore boundSettingsStore);
    public sealed virtual override bool ProcessSubsequentTyping(char c, ITextControl textControl);
    public virtual override bool AcceptsFile(IFile file, ITextControl textControl);
    public sealed virtual override bool get_ForceHideCompletion();
    public sealed virtual override PsiLanguageType get_Language();
    private static bool IsValidFirstChar(char c);
    private static bool IsValidSecondChar(char c);
    protected virtual Nullable`1<char> GetPrevChar(ITextControl textControl);
    private bool TryStartOnIdentifier(bool startOnSecondLetter, ITextControl textControl, char c);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Strategies.VBAutomaticStrategyOnNew : object {
    private VBIntellisenseManager myVBIntellisenseManager;
    private SettingsScalarEntry mySettingsScalarEntry;
    public bool ForceHideCompletion { get; }
    public PsiLanguageType Language { get; }
    public VBAutomaticStrategyOnNew(VBIntellisenseManager vbIntellisenseManager, ISettingsStore settingsStore);
    public sealed virtual override AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    public virtual override bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore boundSettingsStore);
    public sealed virtual override bool ProcessSubsequentTyping(char c, ITextControl textControl);
    public virtual override bool AcceptsFile(IFile file, ITextControl textControl);
    public sealed virtual override bool get_ForceHideCompletion();
    public sealed virtual override PsiLanguageType get_Language();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Strategies.VBAutomaticStrategyOnOverrideOrPartial : object {
    [NotNullAttribute]
private VBIntellisenseManager myIntelliSenseManager;
    [NotNullAttribute]
private SettingsScalarEntry myEnabledSetting;
    public PsiLanguageType Language { get; }
    public bool ForceHideCompletion { get; }
    public VBAutomaticStrategyOnOverrideOrPartial(VBIntellisenseManager intelliSenseManager, ISettingsStore settingsStore);
    public sealed virtual override AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    public sealed virtual override PsiLanguageType get_Language();
    public sealed virtual override bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore boundSettingsStore);
    private bool IsAfterSubOrClass(ITextControl textControl);
    private bool IsAfterOverrideKeyword(ITextControl textControl);
    public sealed virtual override bool ProcessSubsequentTyping(char c, ITextControl textControl);
    public sealed virtual override bool AcceptsFile(IFile file, ITextControl textControl);
    public sealed virtual override bool get_ForceHideCompletion();
}
public abstract class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Strategies.VBAutomaticStrategyOnSymbolBase : object {
    private VBIntellisenseManager myVBIntellisenseManager;
    private SettingsScalarEntry mySettingsScalarEntry;
    public bool ForceHideCompletion { get; }
    public PsiLanguageType Language { get; }
    public VBAutomaticStrategyOnSymbolBase(VBIntellisenseManager vbIntellisenseManager, ISettingsStore settingsStore, Expression`1<Func`2<VBAutopopupEnabledSettingsKey, AutopopupType>> settingsEntryExpression);
    public virtual override AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    public virtual override bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore boundSettingsStore);
    public sealed virtual override bool ProcessSubsequentTyping(char c, ITextControl textControl);
    public virtual override bool AcceptsFile(IFile file, ITextControl textControl);
    public sealed virtual override bool get_ForceHideCompletion();
    public sealed virtual override PsiLanguageType get_Language();
    protected abstract virtual char GetSymbol();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Strategies.VBAutomaticStrategyOnUnderscore : VBAutomaticStrategyOnSymbolBase {
    public VBAutomaticStrategyOnUnderscore(VBIntellisenseManager vbIntellisenseManager, ISettingsStore settingsStore);
    protected virtual char GetSymbol();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.Strategies.VBAutomaticStrategyWhereValueIsExpected : object {
    private VBIntellisenseManager myVBIntellisenseManager;
    private ISettingsStore mySettingsStore;
    private SettingsScalarEntry mySettingsScalarEntry;
    private SettingsScalarEntry mySpaceAroundAssignmentOp;
    private SettingsScalarEntry mySpaceAfterComma;
    private SettingsScalarEntry mySpaceWithinMethodCallParentheses;
    public PsiLanguageType Language { get; }
    public bool ForceHideCompletion { get; }
    public VBAutomaticStrategyWhereValueIsExpected(VBIntellisenseManager vbIntellisenseManager, ISettingsStore settingsStore);
    public sealed virtual override AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    public sealed virtual override PsiLanguageType get_Language();
    public sealed virtual override bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore boundSettingsStore);
    private bool TryStartOnOperator(ITextControl textControl);
    private bool TryStartOnComma(ITextControl textControl);
    private bool TryStartOnParenthesis(ITextControl textControl);
    public sealed virtual override bool ProcessSubsequentTyping(char c, ITextControl textControl);
    public sealed virtual override bool AcceptsFile(IFile file, ITextControl textControl);
    public sealed virtual override bool get_ForceHideCompletion();
    private bool GetFormatterSetting(ITextControl textControl, SettingsScalarEntry settingsEntry);
    private bool TryStartOnSpace(ITextControl textControl);
}
[IntellisensePartAttribute("16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.VBCodeCompletionContextProvider : CodeCompletionContextProviderBase {
    private VBIntellisenseManager myVBIntellisenseManager;
    private static NodeTypeSet ADDITIONAL_KEYWORDS;
    private static VBCodeCompletionContextProvider();
    public VBCodeCompletionContextProvider(VBIntellisenseManager vbIntellisenseManager, ILanguageManager languageManager);
    public virtual bool IsApplicable(CodeCompletionContext context);
    public virtual ISpecificCodeCompletionContext GetCompletionContext(CodeCompletionContext context);
    private static bool IsKeywordToken(ITokenNode tokenNode);
    public static bool IsKeyword(TokenNodeType tokenType);
    private static IReadOnlyList`1<ExpectedType> TryCalculateExpectedTypesByIIf(IVBExpression expression);
    private IReadOnlyList`1<ExpectedType> CalculateExpectedTypes(IVBExpression expression);
    private static IVBExpression CalculateExpressionForExpectedTypes(IVBExpression e);
    private TreeTextRange GetTreeTextRange(ITreeNode node);
}
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.VBCodeCompletionContextSimple : VBCodeCompletionContextBase {
    public VBCodeCompletionContextSimple(CodeCompletionContext codeCompletionContext, VBReparsedCodeCompletionContext unterminatedContext, TextLookupRanges ranges, ExpectedTypeCompletionContextBase expectedTypeContext, IVBExpectedTypesProvider provider, IVBExpression expression, ITreeNode nodeInFile, IPsiModule psiModule);
    protected virtual string GetContextId();
}
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.VBCodeCompletionContextSmart : VBCodeCompletionContextBase {
    private bool myUnderDelegateCreation;
    public bool UnderDelegateCreation { get; }
    public VBCodeCompletionContextSmart(CodeCompletionContext codeCompletionContext, VBReparsedCodeCompletionContext unterminatedContext, TextLookupRanges ranges, ExpectedTypeCompletionContextBase expectedTypeContext, IVBExpectedTypesProvider provider, IVBExpression expression, ITreeNode nodeInFile, IPsiModule psiModule);
    protected virtual string GetContextId();
    public bool get_UnderDelegateCreation();
}
[StandardModuleAttribute]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.VBCodeCompletionUtil : object {
    public static TailType GetParenthesesTailType(CodeCompletionContext basicContext, bool hasParameters);
    public static bool IsAttribute(DeclaredElementInstance declaredElementInstance, VBCodeCompletionContextBase context);
    public static IEnumerable`1<Pair`2<IType, TailType>> GetConcreteTypes(VBCodeCompletionContextBase context, IReadOnlyList`1<ExpectedType> types, IAccessContext accessContext, bool withInheritors, bool onlyInheritors);
    public static TailType MergeTailTypes(TailType firstTail, TailType secondTail);
    internal static bool IsNameOfArgument(VBCodeCompletionContextBase context);
}
[IntellisensePartAttribute("16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.VBCompletingCharactersProvider : CompletingCharsProviderWithSetting`2<VBCodeCompletionContextSimple, VBIntelliSenseCompletingCharactersSettingsKey> {
    protected virtual bool IsApplicable(VBCodeCompletionContextSimple context);
    protected virtual CompletionAction IsCharacterAcceptable(char c, VBCodeCompletionContextSimple context, IContextBoundSettingsStore settingsStore);
    private bool CanBeTupleElementName(char c, VBCodeCompletionContextSimple context);
    protected virtual Expression`1<Func`2<VBIntelliSenseCompletingCharactersSettingsKey, bool>> GetCompleteOnSpaceSettingKey();
    protected virtual Expression`1<Func`2<VBIntelliSenseCompletingCharactersSettingsKey, string>> GetNonCompletingCharactersSettingKey();
}
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.VBLookupItemFactory : LookupItemFactoryBase {
    private static VBLookupItemFactory ourInstance;
    public static VBLookupItemFactory Instance { get; }
    public static VBLookupItemFactory get_Instance();
    public ILookupItem CreateKeywordLookupItem(VBCodeCompletionContextBase context, string text, IconId keywordIcon);
    public ILookupItem CreateParameterNameLookupItem(VBCodeCompletionContextBase context, IDeclaredElement parameter);
    public ILookupItem CreateAddressOfLookupItem(VBCodeCompletionContextBase context, string name, DeclaredElementInstance`1<IMethod> method);
    public ILookupItem CreateConstructorLookupItem(VBCodeCompletionContextBase context, ITypeElement typeElement, IDeclaredType declaredType);
    private static VBTailType CalculateTailType(ITypeElement typeElement);
    public ILookupItem CreateDeclaredElementLookupItem(VBCodeCompletionContextBase context, string name, DeclaredElementInstance`1<IDeclaredElement> declaredElementInstance);
    public ILookupItem CreateLookupItem(VBCodeCompletionContextBase context, IDeclaredElement declaredElement, ISubstitution substitution, TailType tailType, Nullable`1<bool> bind);
    public ILookupItem CreateLookupItem(VBCodeCompletionContextBase context, string shortName, DeclaredElementInstance instance, TailType tailType, Nullable`1<bool> bind);
    private string GetTypeParametersString(ITypeElement typeElement);
    public ILookupItem CreateGenerateConstructorItem(VBCodeCompletionContextBase context, string text, IEnumerable`1<DeclaredElementInstance> elements, PsiIconManager psiIconManager);
    public ILookupItem CreateEnumMemberLookupItem(VBCodeCompletionContextBase context, string name, DeclaredElementInstance instance, TailType secondTail);
    public ILookupItem CreateDeclaredElementWithReferenceLookupItem(VBCodeCompletionContextBase context, ITypeElement declaredElement, ModuleReferencerService moduleReferencerService);
    public ILookupItem CreateMethodsLookupItem(VBCodeCompletionContextBase context, string name, IEnumerable`1<DeclaredElementInstance`1<IMethod>> methods, QualifierKind qualifierKind);
    public ILookupItem CreateExtensionMethodsLookupItem(VBCodeCompletionContextBase context, string name, bool showSignatures, IEnumerable`1<DeclaredElementInstance`1<IMethod>> methods);
    public ILookupItem CreateExtensionMethodsWithReferenceLookupItem(VBCodeCompletionContextBase context, string name, ICollection`1<IMethod> methods, ModuleReferencerService moduleReferencerService, bool showSignatures, IPsiModule psiModule);
    public ILookupItem CreatePreferredTextLookupItem(VBCodeCompletionContextBase context, string text, string type, bool emphasize);
    public ILookupItem CreateLocalVariableLookupItem(VBCodeCompletionContextBase context, IType type, IEnumerable`1<NameRoot> roots);
    public ILookupItem CreateLambdaLookupItem(VBCodeCompletionContextBase context, IDelegate d, ISubstitution substitution, IPsiSourceFile psiSourceFile, bool isIterator);
    public ILookupItem CreateTypeNameLookupItemNoInit(VBCodeCompletionContextBase context, IDeclaredElement declaredElement, bool isBasic);
    public void InitLookupItem(VBCodeCompletionContextBase context, IDeclaredElement declaredElement, ILookupItem item, bool hasTypeArgumentList);
    public ILookupItem CreateGenericTypeLookupItem(VBCodeCompletionContextBase context, DeclaredElementInstance instance, bool bind);
    public ILookupItem CreateModuleMethodsLookupItem(VBCodeCompletionContextBase context, string name, IList`1<DeclaredElementInstance`1<IMethod>> methods, bool showSignatures);
    public ILookupItem CreateObjectCreationLookupItem(VBCodeCompletionContextBase context, IType type, PsiIconManager iconManager, bool isArrayCreation);
    public ILookupItem CreateMemberInitializerLookupItem(VBCodeCompletionContextBase context, string name, IDeclaredElement element);
    public ILookupItem CreateNamedParameterLookupItem(VBCodeCompletionContextBase context, string name);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.VBLookupItemsPresenter : object {
    public sealed virtual override RichTextBlock TryGetAdditionalDescription(ILookupItem lookupItem);
    public sealed virtual override RichTextBlock TryPresentSummary(IDeclaredElement declaredElement, ISubstitution substitution, ILookupItem lookupItem, ISolution solution, IContextBoundSettingsStore settingsStore, DeclaredElementDescriptionStyle descriptionStyle);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.VBLookupServiceProvider : object {
    public sealed virtual override void BindToType(ISolution solution, ITextControl textControl, DocumentRange range, ITypePointer typePointer, IRangeMarker& caretPositionRangeMarker);
    public sealed virtual override void BindToDeclaredElement(ISolution solution, IElementInstancePointer`1<T> instance, ITextControl textControl, DocumentRange range, IRangeMarker& caretPositionRangeMarker);
    private static DocumentRange BindToDeclaredElementInternal(ISolution solution, IElementInstancePointer`1<T> instancePtr, ITextControl textControl, DocumentRange range);
    [CanBeNullAttribute]
private static IRangeMarker FixTypeParametersAndMoveCaret(IReference reference, IDeclaredElement declaredElement, ITextControl textControl);
    public sealed virtual override DocumentRange BindToDeclaredElements(ISolution solution, ICollection`1<IElementInstancePointer`1<T>> instances, ITextControl textControl, DocumentRange range, IRangeMarker& caretPositionRangeMarker);
    public sealed virtual override string BuildQualifierText(DeclaredElementInstance declaredElementInstance, QualifierKind qualifierKind);
    private static string GetPrefixText(DeclaredElementInstance declaredElementInstance, QualifierKind qualifierKind);
}
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.VBTokenUtil : object {
    public static ITokenNode GetPrevMeaningfulToken(ITreeNode token);
    public static ITokenNode GetNextMeaningfulToken(ITreeNode token);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.Intellisense.VB.CodeCompletion.ZoneMarker : object {
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class JetBrains.ReSharper.Features.Intellisense.VB.Resources.LocalizedStrings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string ClassesSettingDescription { get; }
    public static string DelegatesSettingDescription { get; }
    public static string EnumsSettingDescription { get; }
    public static string EventsSettingDescription { get; }
    public static string ExtensionMethodsSettingDescription { get; }
    public static string FieldsSettingDescription { get; }
    public static string InterfacesSettingDescription { get; }
    public static string InternalSettingDescription { get; }
    public static string KeywordsSettingDescription { get; }
    public static string LocalVariablesSettingDescription { get; }
    public static string MethodsSettingDescription { get; }
    public static string NamespacesSettingDescription { get; }
    public static string ParametersSettingDescription { get; }
    public static string PrivateSettingDescription { get; }
    public static string PropertiesSettingDescription { get; }
    public static string ProtectedSettingDescription { get; }
    public static string PublicSettingDescription { get; }
    public static string StructuresSettingDescription { get; }
    public static string VBNETSettingDescription { get; }
    private static LocalizedStrings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_ClassesSettingDescription();
    public static string get_DelegatesSettingDescription();
    public static string get_EnumsSettingDescription();
    public static string get_EventsSettingDescription();
    public static string get_ExtensionMethodsSettingDescription();
    public static string get_FieldsSettingDescription();
    public static string get_InterfacesSettingDescription();
    public static string get_InternalSettingDescription();
    public static string get_KeywordsSettingDescription();
    public static string get_LocalVariablesSettingDescription();
    public static string get_MethodsSettingDescription();
    public static string get_NamespacesSettingDescription();
    public static string get_ParametersSettingDescription();
    public static string get_PrivateSettingDescription();
    public static string get_PropertiesSettingDescription();
    public static string get_ProtectedSettingDescription();
    public static string get_PublicSettingDescription();
    public static string get_StructuresSettingDescription();
    public static string get_VBNETSettingDescription();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.Intellisense.VB.ZoneMarker : object {
}
