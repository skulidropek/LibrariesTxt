public static class JetBrains.ReSharper.Features.ReSpeller.Analyzers.AnalyzerHelper : object {
    private static Nullable`1<AccessRights> GetAccessRights(IPsiHelper psiHelper, ITreeNode node);
    public static bool DoAccessRightsMatchSettings(ITreeNode node, IPsiHelper psiHelper, IContextBoundSettingsStore settings, ICalculatedSettingsSchema calculatedSettingsSchema);
    private static bool MatchesAccessRights(ICalculatedSettingsSchema calculatedSettingsSchema, IContextBoundSettingsStore settings, AccessRights accessRights);
    public static bool ShouldSkipInheritedMember(IDeclaredElement declaredElement, bool dontCheckInheritedMembers);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.KnownLanguage", "16")]
public class JetBrains.ReSharper.Features.ReSpeller.Analyzers.BuildScript.BuildScriptFileFilter : object {
    public sealed virtual bool ShouldSkipFile(IFile file);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.KnownLanguage", "16")]
public class JetBrains.ReSharper.Features.ReSpeller.Analyzers.ByExtensionFileFilter : object {
    public sealed virtual bool ShouldSkipFile(IFile file);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Features.ReSpeller.Analyzers.Comments.CommentTextExtractor : ElementTextExtractor`1<IComment> {
    private ILanguageManager myLanguageManager;
    private ISpellingAndGrammarDataBuilder mySpellingAndGrammarDataBuilder;
    public CommentTextExtractor(ILanguageManager languageManager, IRequiredSpellCheckingModesProvider requiredSpellCheckingModesProvider, ISpellingAndGrammarDataBuilder spellingAndGrammarDataBuilder, GrammarAndSpellingMeasurements grammarAndSpellingMeasurements);
    public virtual bool Extract(IComment comment, ElementTextExtractorContext context);
    private static SparseTextToCheck BuildTextForMultilineComment(IComment node, TreeTextRange commentRange);
    private static SparseTextToCheck BuildSparseTextForCommentsGroup(List`1<IComment> comments);
    [CanBeNullAttribute]
private static IComment GetCommentBefore(IComment node);
    private static List`1<IComment> GetCommentsGroup(IComment comment, IPsiHelper psiHelper);
    [CompilerGeneratedAttribute]
internal static void <BuildTextForMultilineComment>g__ConsumeChar|4_0(char c, <>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
internal static void <BuildTextForMultilineComment>g__Flush|4_1(<>c__DisplayClass4_0& );
}
public class JetBrains.ReSharper.Features.ReSpeller.Analyzers.Comments.MultiLineCommentTextModificationContext : TextModificationContextStub {
    private IComment myComment;
    private int myMeaningfulPartLength;
    private TextRange myLineRange;
    private DocumentRange myFullCleaningRange;
    public MultiLineCommentTextModificationContext(IComment comment, int meaningfulPartLength, TextRange lineRange, Nullable`1<TextRange> previousIgnoredRange);
    public virtual TextRange GetActualClearRange(TextRange range, bool isLast);
}
public class JetBrains.ReSharper.Features.ReSpeller.Analyzers.Comments.SingleLineCommentTextModificationContext : TextModificationContextStub {
    private IComment myComment;
    private int myActualStartOffset;
    private int myMeaningfulPartLength;
    private DocumentRange myFullCleaningRange;
    public SingleLineCommentTextModificationContext(IComment node, int meaningfulPartLength, int actualStartOffset, Nullable`1<DocumentRange> previousCommentRange);
    public virtual TextRange GetActualClearRange(TextRange range, bool isLast);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.ReSpeller.Analyzers.CSharp.CSharpPsiHelper : PsiHelperBase {
    private static string Format;
    public virtual bool ShouldSkipComment(IComment comment);
    public virtual IDocCommentXmlPsi GetXmlDocPsi(IDocCommentBlock docCommentBlock);
    public virtual ValueTuple`2[] GetNamespaceIdentifiers(IIdentifier identifier, INamespaceDeclaration declaration);
    public virtual bool ShouldSkipDeclaration(IDeclaration declaration);
    public virtual bool IsMultiLineComment(IComment comment);
    public virtual ITreeNode[] GetConcatenatedLiterals(ITreeNode literal);
    public virtual bool TryAppendLiteral(SparseTextToCheck textToCheck, ITreeNode node);
    private void ProcessRawInterpolatedString(SparseTextToCheck textToCheck, IInterpolatedStringExpression element);
    private static void ProcessTextPart(IInterpolatedStringExpression element, int spacesShift, SparseTextToCheck result, int currentOffset, ITreeNode child);
    private void ProcessInterpolatedString(SparseTextToCheck textToCheck, IInterpolatedStringExpression element);
    private bool TryCollectLiterals(ITreeNode expression, List`1<ITreeNode> literals);
    public virtual bool ShouldSkipExpression(IExpression expression);
    private static bool ArgumentHasIgnoreAnnotation(ICSharpArgument argumentInfo, ICSharpArgumentsOwner context);
    private static string TryGetName(ICSharpArgumentsOwner context);
    private static bool CheckByName(ISolution solution, string name);
    [CanBeNullAttribute]
private IExpression GetTopmostExpression(ICSharpExpression expression);
    [CompilerGeneratedAttribute]
internal static void <ProcessTextPart>g__Flush|9_0(<>c__DisplayClass9_0& );
}
public class JetBrains.ReSharper.Features.ReSpeller.Analyzers.CSharp.CSharpStringLiteralModificationContext : TextModificationContextStub {
    private CSharpLiteralType myLiteralType;
    public CSharpStringLiteralModificationContext(ITreeNode node, CSharpLiteralType literalType);
    public virtual string EscapeTextToInsert(string value);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.ReSpeller.Analyzers.CSharp.CSharpStringLiteralModificationContextProvider : object {
    public sealed virtual ITextModificationContext CreateContext(ILiteralExpression literalExpression);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Features.ReSpeller.Analyzers.CSharp.InterpolatedStringsTextExtractor : ElementTextExtractor`1<IInterpolatedStringExpression> {
    private ILanguageManager myLanguageManager;
    private IRequiredSpellCheckingModesProvider myRequiredSpellCheckingModesProvider;
    private ISpellingAndGrammarDataBuilder mySpellingAndGrammarDataBuilder;
    private ICalculatedSettingsSchema myCalculatedSettingsSchema;
    private ICustomInjectedFileSpellCheckingProvider myInjectedFileSpellCheckingProvider;
    public InterpolatedStringsTextExtractor(ILanguageManager languageManager, IRequiredSpellCheckingModesProvider requiredSpellCheckingModesProvider, ISpellingAndGrammarDataBuilder spellingAndGrammarDataBuilder, GrammarAndSpellingMeasurements grammarAndSpellingMeasurements, ICalculatedSettingsSchema calculatedSettingsSchema, ICustomInjectedFileSpellCheckingProvider injectedFileSpellCheckingProvider);
    public virtual bool Extract(IInterpolatedStringExpression element, ElementTextExtractorContext context);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.ReSpeller.Analyzers.CSharp.ZoneMarker : object {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.KnownLanguage", "16")]
public class JetBrains.ReSharper.Features.ReSpeller.Analyzers.EnabledInSettingsFilter : object {
    private ICalculatedSettingsSchema myCalculatedSettingsSchema;
    private IContextBoundSettingsStore myContextBoundSettingsStore;
    public EnabledInSettingsFilter(Lifetime lifetime, ISettingsStore settingsStore, ICalculatedSettingsSchema calculatedSettingsSchema);
    public sealed virtual bool ShouldSkipFile(IFile file);
}
public interface JetBrains.ReSharper.Features.ReSpeller.Analyzers.HighlightingGenerators.ISpellingAndGrammarDataBuilder {
    [CanBeNullAttribute]
public abstract virtual IGrammarCheckerData BuildGrammarCheckerData(IFile file, IReadOnlyCollection`1<ITreeNode> treeNodes, SparseTextToCheck text, CheckingContext checkingContext);
    [ItemCanBeNullAttribute]
public abstract virtual IReadOnlyCollection`1<ISpellCheckerData> BuildOrthographyCheckerData(IFile file, IReadOnlyCollection`1<ITreeNode> treeNodes, SparseTextToCheck textToCheck, CheckingContext checkingContext);
    [ItemCanBeNullAttribute]
public abstract virtual IReadOnlyCollection`1<ISpellCheckerData> BuildIdentifierCheckerData(DocumentRange elementRange, ITreeNode identifierNode, IDeclaredElement declaredElement, string qualifiedName);
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Features.ReSpeller.Analyzers.HighlightingGenerators.SpellCheckingMode : Enum {
    public int value__;
    public static SpellCheckingMode None;
    public static SpellCheckingMode Orthography;
    public static SpellCheckingMode Grammar;
    public static SpellCheckingMode All;
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Features.ReSpeller.Analyzers.IdentifierTextExtractor : ElementTextExtractor`1<IIdentifier> {
    private ISpellingAndGrammarDataBuilder mySpellingAndGrammarDataBuilder;
    private IRequiredSpellCheckingModesProvider myRequiredSpellCheckingModesProvider;
    private ILanguageManager myLanguageManager;
    public IdentifierTextExtractor(ISpellingAndGrammarDataBuilder spellingAndGrammarDataBuilder, IRequiredSpellCheckingModesProvider requiredSpellCheckingModesProvider, ILanguageManager languageManager, GrammarAndSpellingMeasurements grammarAndSpellingMeasurements);
    public virtual bool Extract(IIdentifier element, ElementTextExtractorContext context);
}
[PsiSharedComponentAttribute]
public class JetBrains.ReSharper.Features.ReSpeller.Analyzers.IgnoreSpellingAndGrammarErrorsAttributeWatcher : object {
    public static IClrTypeName IgnoreSpellingAndGrammarErrorsAttributeClrTypeName;
    public static IClrTypeName[] AllNames;
    public IEnumerable`1<IClrTypeName> AttributeClrNamesToWatch { get; }
    private static IgnoreSpellingAndGrammarErrorsAttributeWatcher();
    public sealed virtual IEnumerable`1<IClrTypeName> get_AttributeClrNamesToWatch();
}
public interface JetBrains.ReSharper.Features.ReSpeller.Analyzers.IGrammarAnalyzerFileFilter {
    public abstract virtual bool ShouldSkipFile(IFile file);
}
[DerivedComponentsInstantiationRequirementAttribute("0")]
public interface JetBrains.ReSharper.Features.ReSpeller.Analyzers.INamingPolicyCache {
    public abstract virtual INamingPolicyProvider Get(PsiLanguageType language, IPsiSourceFile sourceFile);
}
public interface JetBrains.ReSharper.Features.ReSpeller.Analyzers.IPsiHelper {
    [CanBeNullAttribute]
public abstract virtual IDeclaration GetDeclarationOnIdentifier(IIdentifier identifier);
    public abstract virtual DocumentRange GetNameRange(IIdentifier identifier, IDeclaration declaration);
    public abstract virtual bool ShouldSkipComment(IComment comment);
    public abstract virtual bool IsMultiLineComment(IComment comment);
    [CanBeNullAttribute]
public abstract virtual IDocCommentXmlPsi GetXmlDocPsi(IDocCommentBlock docCommentBlock);
    public abstract virtual bool ShouldSkipDeclaration(IDeclaration declaration);
    public abstract virtual Nullable`1<AccessRights> GetAccessRights(ITreeNode node);
    public abstract virtual bool ShouldSkipInheritedMember(IDeclaration declaration, bool dontCheckInheritedMembers);
    public abstract virtual ITreeNode[] GetConcatenatedLiterals(ITreeNode literal);
    public abstract virtual bool ShouldSkipExpression(IExpression expression);
    public abstract virtual bool TryAppendLiteral(SparseTextToCheck textToCheck, ITreeNode literal);
    public abstract virtual ValueTuple`2[] GetNamespaceIdentifiers(IIdentifier identifier, INamespaceDeclaration declaration);
}
public interface JetBrains.ReSharper.Features.ReSpeller.Analyzers.ITypoAnalyzerFileFilter {
    public abstract virtual bool ShouldSkipFile(IFile file);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.ReSpeller.Analyzers.NamingPolicyCache : object {
    private NamingManager myNamingManager;
    private DirectMappedCache`2<ValueTuple`2<PsiLanguageType, IPsiSourceFile>, INamingPolicyProvider> myCache;
    public NamingPolicyCache(Lifetime lifetime, ISettingsStore store, NamingManager namingManager);
    private void ResetCache();
    public sealed virtual INamingPolicyProvider Get(PsiLanguageType language, IPsiSourceFile sourceFile);
    private INamingPolicyProvider GetInternal(ValueTuple`2<PsiLanguageType, IPsiSourceFile> key);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0(SettingsStoreChangeArgs args);
}
public class JetBrains.ReSharper.Features.ReSpeller.Analyzers.PsiHelperBase : object {
    public virtual IDeclaration GetDeclarationOnIdentifier(IIdentifier identifier);
    public virtual bool ShouldSkipComment(IComment comment);
    public virtual bool IsMultiLineComment(IComment comment);
    public virtual IDocCommentXmlPsi GetXmlDocPsi(IDocCommentBlock docCommentBlock);
    public virtual bool ShouldSkipDeclaration(IDeclaration declaration);
    public virtual Nullable`1<AccessRights> GetAccessRights(ITreeNode node);
    public virtual bool ShouldSkipInheritedMember(IDeclaration declaration, bool dontCheckInheritedMembers);
    public virtual ITreeNode[] GetConcatenatedLiterals(ITreeNode literal);
    public virtual bool ShouldSkipExpression(IExpression expression);
    public virtual bool TryAppendLiteral(SparseTextToCheck textToCheck, ITreeNode node);
    [CanBeNullAttribute]
public virtual ValueTuple`2[] GetNamespaceIdentifiers(IIdentifier identifier, INamespaceDeclaration declaration);
    public virtual DocumentRange GetNameRange(IIdentifier identifier, IDeclaration declaration);
    private bool TryDecompose(ILanguageManager languageManager, ILiteralExpression element, String& text, RangeTranslator& rangeTranslator, TreeTextRange& literalValueRangeWithin);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.ReSpeller.Analyzers.Scopes.CustomInjectedFileSpellCheckingProvider : object {
    [CompilerGeneratedAttribute]
private ILanguageManager <languageManager>P;
    public CustomInjectedFileSpellCheckingProvider(ILanguageManager languageManager);
    public sealed virtual bool HasCustomSpellCheckingWhenInjected(IFile file);
}
public interface JetBrains.ReSharper.Features.ReSpeller.Analyzers.Scopes.ICustomInjectedFileSpellCheckingProvider {
    public abstract virtual bool HasCustomSpellCheckingWhenInjected(IFile file);
}
public interface JetBrains.ReSharper.Features.ReSpeller.Analyzers.Scopes.ICustomSpellCheckerForInjectedLanguage {
    public abstract virtual bool HasCustomSpellChecker(IFile file);
}
public interface JetBrains.ReSharper.Features.ReSpeller.Analyzers.Scopes.IGrammarCheckingStrategyChecker {
    public abstract virtual bool EnabledForInterpolatedStringLiterals(IContextBoundSettingsStore settings);
    public abstract virtual bool EnabledForDocumentation(IContextBoundSettingsStore settings);
}
public interface JetBrains.ReSharper.Features.ReSpeller.Analyzers.Scopes.IRequiredSpellCheckingModesProvider {
    public abstract virtual SpellCheckingMode CalcForFile(IFile file);
    public abstract virtual SpellCheckingMode CalcForString(bool verbatim, IContextBoundSettingsStore settings);
    public abstract virtual SpellCheckingMode CalcForInterpolatedString(bool verbatim, IContextBoundSettingsStore settings);
    public abstract virtual SpellCheckingMode CalcForDocumentation(IDocCommentBlockOwner declaredElement, IContextBoundSettingsStore settings);
    public abstract virtual SpellCheckingMode CalcForIdentifier(IIdentifier identifier, IContextBoundSettingsStore settings);
}
public interface JetBrains.ReSharper.Features.ReSpeller.Analyzers.Scopes.ISpellCheckingStrategyChecker {
    public abstract virtual bool EnabledForStringLiterals(bool verbatim, IContextBoundSettingsStore settings);
    public abstract virtual bool EnabledForDocumentation(IDocCommentBlockOwner documentationOwner, IContextBoundSettingsStore settings);
    public abstract virtual bool EnabledForIdentifier(IIdentifier identifier, IContextBoundSettingsStore settings);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.ReSpeller.Analyzers.Scopes.RequiredSpellCheckingModesProvider : object {
    private IGrammarCheckingStrategyChecker myGrammarCheckingStrategyChecker;
    private ISpellCheckingStrategyChecker mySpellCheckingStrategyChecker;
    private ILanguageManager myLanguageManager;
    public RequiredSpellCheckingModesProvider(IGrammarCheckingStrategyChecker grammarCheckingStrategyChecker, ISpellCheckingStrategyChecker spellCheckingStrategyChecker, ILanguageManager languageManager);
    public sealed virtual SpellCheckingMode CalcForString(bool verbatim, IContextBoundSettingsStore settings);
    public sealed virtual SpellCheckingMode CalcForInterpolatedString(bool verbatim, IContextBoundSettingsStore settings);
    public sealed virtual SpellCheckingMode CalcForDocumentation(IDocCommentBlockOwner declaredElement, IContextBoundSettingsStore settings);
    public sealed virtual SpellCheckingMode CalcForIdentifier(IIdentifier identifier, IContextBoundSettingsStore settings);
    public sealed virtual SpellCheckingMode CalcForFile(IFile file);
    private SpellCheckingMode Build(bool orthography, bool grammar);
    public static IRequiredSpellCheckingModesProvider GetInstance(ITreeNode context);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.ReSpeller.Analyzers.Scopes.SettingsBasedGrammarCheckingStrategyChecker : object {
    private ICalculatedSettingsSchema myCalculatedSettingsSchema;
    public SettingsBasedGrammarCheckingStrategyChecker(ICalculatedSettingsSchema calculatedSettingsSchema);
    public sealed virtual bool EnabledForInterpolatedStringLiterals(IContextBoundSettingsStore settings);
    public sealed virtual bool EnabledForDocumentation(IContextBoundSettingsStore settings);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Features.ReSpeller.Analyzers.Scopes.SettingsBasedSpellCheckingStrategyChecker : object {
    private ILanguageManager myLanguageManager;
    private ICalculatedSettingsSchema myCalculatedSettingsSchema;
    public SettingsBasedSpellCheckingStrategyChecker(ILanguageManager languageManager, ICalculatedSettingsSchema calculatedSettingsSchema);
    public sealed virtual bool EnabledForStringLiterals(bool verbatim, IContextBoundSettingsStore settings);
    public sealed virtual bool EnabledForDocumentation(IDocCommentBlockOwner documentationOwner, IContextBoundSettingsStore settings);
    public sealed virtual bool EnabledForIdentifier(IIdentifier element, IContextBoundSettingsStore settings);
}
public class JetBrains.ReSharper.Features.ReSpeller.Analyzers.SparseTextToCheck : object {
    [ItemNotNullAttribute]
private List`1<TextPartBase> myTextParts;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public int Length { get; private set; }
    public static SparseTextToCheck FromNode(ITreeNode node);
    public static SparseTextToCheck FromNode(ITreeNode node, TextRange rangeWithin, string text);
    public static SparseTextToCheck FromNode(ITreeNode node, TreeTextRange rangeWithin, string text);
    public static SparseTextToCheck FromNode(ITreeNode node, DocumentRange innerRange);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    public void AddNode(ITreeNode node, bool shouldBeChecked, string actualText, ITextModificationContext textModificationContext);
    public void AddIgnoredNode(ITreeNode node);
    public void AddNodePart(ITreeNode node, TextRange rangeWithin, string text, TextPartType partType, ITextModificationContext textModificationContext);
    public void AddSubstitutionTextNode(ITreeNode node, TextRange rangeWithin, string text);
    public void AddSubstitutionTextNode(ITreeNode node, string text);
    public string GetFullText();
    public ValueTuple`2<string, IList`1<GrammarCheckerTextRange>> GetTextWithRanges();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.ReSpeller.Analyzers.SparseTextToCheck/<GetDocumentRangeListByOffset>d__18")]
public IEnumerable`1<ValueTuple`2<ITextModificationContext, DocumentRange>> GetDocumentRangeListByOffset(int startOffset, int endOffset);
    public void AppendText(SparseTextToCheck textToInline);
    private void AddNodeImpl(ITextModificationContext textModificationContext, ITreeNode node, TextRange rangeWithinNode, bool shouldCheck, string text);
    private void AddIgnoredPart(ITreeNode node, TextRange rangeWithin);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Features.ReSpeller.Analyzers.SparseTextUtil : object {
    [ExtensionAttribute]
public static void AppendTextWithRangeTranslation(SparseTextToCheck result, ITreeNode node, string text, RangeTranslator rangeTranslator, int textInNodeShift, ITextModificationContext context);
    [CompilerGeneratedAttribute]
internal static void <AppendTextWithRangeTranslation>g__Flush|0_0(<>c__DisplayClass0_0& );
}
public interface JetBrains.ReSharper.Features.ReSpeller.Analyzers.StringLiterals.IStringLiteralModificationContextProvider {
    public abstract virtual ITextModificationContext CreateContext(ILiteralExpression literalExpression);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Features.ReSpeller.Analyzers.StringLiterals.StringLiteralTextExtractor : ElementTextExtractor`1<ILiteralExpression> {
    private ISpellingAndGrammarDataBuilder mySpellingAndGrammarDataBuilder;
    private IRequiredSpellCheckingModesProvider myRequiredSpellCheckingModesProvider;
    private ILanguageManager myLanguageManager;
    private ICalculatedSettingsSchema myCalculatedSettingsSchema;
    private ICustomInjectedFileSpellCheckingProvider myInjectedFileSpellCheckingProvider;
    public StringLiteralTextExtractor(ISpellingAndGrammarDataBuilder spellingAndGrammarDataBuilder, IRequiredSpellCheckingModesProvider requiredSpellCheckingModesProvider, ILanguageManager languageManager, GrammarAndSpellingMeasurements grammarAndSpellingMeasurements, ICalculatedSettingsSchema calculatedSettingsSchema, ICustomInjectedFileSpellCheckingProvider injectedFileSpellCheckingProvider);
    public virtual bool Extract(ILiteralExpression element, ElementTextExtractorContext context);
    private Nullable`1<StringVerbatimity> GetStringVerbatimity(ILiteralExpression element);
}
public class JetBrains.ReSharper.Features.ReSpeller.Analyzers.TextModificationContext.DefaultTextModificationContext : TextModificationContextStub {
    public DefaultTextModificationContext(ITreeNode node);
}
public interface JetBrains.ReSharper.Features.ReSpeller.Analyzers.TextModificationContext.ITextModificationContext {
    public ITreeNode Node { get; }
    public abstract virtual ITreeNode get_Node();
    public abstract virtual string EscapeTextToInsert(string value);
    public abstract virtual TextRange GetActualClearRange(TextRange range, bool isLast);
}
public abstract class JetBrains.ReSharper.Features.ReSpeller.Analyzers.TextModificationContext.TextModificationContextStub : object {
    [CompilerGeneratedAttribute]
private ITreeNode <Node>k__BackingField;
    public ITreeNode Node { get; }
    protected TextModificationContextStub(ITreeNode node);
    [CompilerGeneratedAttribute]
public sealed virtual ITreeNode get_Node();
    public virtual string EscapeTextToInsert(string value);
    public virtual TextRange GetActualClearRange(TextRange range, bool isLast);
}
public class JetBrains.ReSharper.Features.ReSpeller.Analyzers.TextModificationContext.XmlTagModificationContext : TextModificationContextStub {
    private IXmlTag myTag;
    private ITextModificationContext myParentContext;
    private Nullable`1<DocumentOffset> myFirstMeaningfulNodeStartOffset;
    private Nullable`1<DocumentOffset> myLastMeaningfulNodeEndOffset;
    private DocumentOffset FirstMeaningfulNodeStartOffset { get; }
    private DocumentOffset LastMeaningfulNodeEndOffset { get; }
    public XmlTagModificationContext(IXmlTag tag, ITextModificationContext parentContext);
    private DocumentOffset get_FirstMeaningfulNodeStartOffset();
    private DocumentOffset get_LastMeaningfulNodeEndOffset();
    public void ConsumeNode(ITreeNode node);
    public virtual TextRange GetActualClearRange(TextRange range, bool isLast);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Features.ReSpeller.Analyzers.VB.VBPsiHelper : PsiHelperBase {
    public virtual IDeclaration GetDeclarationOnIdentifier(IIdentifier identifier);
    public virtual bool ShouldSkipComment(IComment comment);
    public virtual IDocCommentXmlPsi GetXmlDocPsi(IDocCommentBlock docCommentBlock);
    public virtual bool ShouldSkipDeclaration(IDeclaration declaration);
    public virtual DocumentRange GetNameRange(IIdentifier identifier, IDeclaration declaration);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.ReSpeller.Analyzers.VB.ZoneMarker : object {
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Features.ReSpeller.Analyzers.Xaml.XamlDeclarationNameTextExtractor : ElementTextExtractor`1<IDeclarationNameElement> {
    private ISpellingAndGrammarDataBuilder mySpellingAndGrammarDataBuilder;
    public XamlDeclarationNameTextExtractor(ISpellingAndGrammarDataBuilder spellingAndGrammarDataBuilder, IRequiredSpellCheckingModesProvider requiredSpellCheckingModesProvider, GrammarAndSpellingMeasurements grammarAndSpellingMeasurements);
    public virtual bool Extract(IDeclarationNameElement declarationNameElement, ElementTextExtractorContext context);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.ReSpeller.Analyzers.Xaml.ZoneMarker : object {
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.Features.ReSpeller.Analyzers.Xml.XmlAnalyzersExtension : object {
    [ExtensionAttribute]
public static bool IsNodeSuitableForSpellChecking(ITreeNode node);
    [ExtensionAttribute]
public static bool IsDocComment(ITreeNode node);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Features.ReSpeller.Analyzers.Xml.XmlAttributeValueTextExtractor : ElementTextExtractor`1<IXmlAttributeValue> {
    private ISpellingAndGrammarDataBuilder mySpellingAndGrammarDataBuilder;
    private IRequiredSpellCheckingModesProvider myRequiredRequiredSpellCheckingModesProvider;
    private static Char[] ourQuotes;
    public XmlAttributeValueTextExtractor(ISpellingAndGrammarDataBuilder spellingAndGrammarDataBuilder, IRequiredSpellCheckingModesProvider requiredRequiredSpellCheckingModesProvider, GrammarAndSpellingMeasurements grammarAndSpellingMeasurements);
    private static XmlAttributeValueTextExtractor();
    public virtual bool Extract(IXmlAttributeValue xmlAttributeValue, ElementTextExtractorContext context);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Features.ReSpeller.Analyzers.Xml.XmlCommentTextExtractor : ElementTextExtractor`1<IXmlComment> {
    private ISpellingAndGrammarDataBuilder mySpellingAndGrammarDataBuilder;
    public XmlCommentTextExtractor(ISpellingAndGrammarDataBuilder spellingAndGrammarDataBuilder, IRequiredSpellCheckingModesProvider requiredRequiredSpellCheckingModesProvider, GrammarAndSpellingMeasurements grammarAndSpellingMeasurements);
    public virtual bool Extract(IXmlComment xmlComment, ElementTextExtractorContext context);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Features.ReSpeller.Analyzers.Xml.XmlTagTextExtractor : ElementTextExtractor`1<IXmlTag> {
    private ISpellingAndGrammarDataBuilder mySpellingAndGrammarDataBuilder;
    private IRequiredSpellCheckingModesProvider myRequiredRequiredSpellCheckingModesProvider;
    public XmlTagTextExtractor(ISpellingAndGrammarDataBuilder spellingAndGrammarDataBuilder, IRequiredSpellCheckingModesProvider requiredRequiredSpellCheckingModesProvider, GrammarAndSpellingMeasurements grammarAndSpellingMeasurements);
    public virtual bool Extract(IXmlTag xmlTag, ElementTextExtractorContext context);
    [CompilerGeneratedAttribute]
private void <Extract>g__Flush|3_0(<>c__DisplayClass3_0& );
}
public class JetBrains.ReSharper.Features.ReSpeller.Analyzers.XmlDocComments.DocCommentLineTextModificationContext : TextModificationContextStub {
    private ITextModificationContext myParentContext;
    private Nullable`1<DocumentOffset> myFirstNodeStartOffset;
    private Nullable`1<DocumentOffset> myLastNodeEndOffset;
    private Nullable`1<DocumentOffset> myFirstMeaningfulNodeStartOffset;
    private Nullable`1<DocumentOffset> myLastMeaningfulNodeEndOffset;
    private DocumentOffset FirstMeaningfulNodeStartOffset { get; }
    private DocumentOffset LastMeaningfulNodeEndOffset { get; }
    private DocumentOffset FirstNodeStartOffset { get; }
    private DocumentOffset LastNodeEndOffset { get; }
    public DocCommentLineTextModificationContext(ITreeNode node, ITextModificationContext parentContext);
    private DocumentOffset get_FirstMeaningfulNodeStartOffset();
    private DocumentOffset get_LastMeaningfulNodeEndOffset();
    private DocumentOffset get_FirstNodeStartOffset();
    private DocumentOffset get_LastNodeEndOffset();
    public void ConsumeNode(ITreeNode node);
    public virtual TextRange GetActualClearRange(TextRange range, bool isLast);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Features.ReSpeller.Analyzers.XmlDocComments.DocCommentTextExtractor : ElementTextExtractor`1<IDocCommentBlockOwner> {
    private IRequiredSpellCheckingModesProvider myRequiredSpellCheckingModesProvider;
    private ISpellingAndGrammarDataBuilder mySpellingAndGrammarDataBuilder;
    private ILanguageManager myLanguageManager;
    public DocCommentTextExtractor(IRequiredSpellCheckingModesProvider requiredSpellCheckingModesProvider, ISpellingAndGrammarDataBuilder spellingAndGrammarDataBuilder, ILanguageManager languageManager, GrammarAndSpellingMeasurements grammarAndSpellingMeasurements);
    public virtual bool Extract(IDocCommentBlockOwner element, ElementTextExtractorContext context);
}
public static class JetBrains.ReSharper.Features.ReSpeller.Analyzers.XmlDocComments.XmlDocCommentTextExtractor : object {
    public static List`1<SparseTextToCheck> Extract(IXmlFile xmlFile);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Features.ReSpeller.Bulbs.AddToDictionaryBulbItem : BulbActionBase {
    [CompilerGeneratedAttribute]
private ISettingsLayerInfo <layerInfo>P;
    [CompilerGeneratedAttribute]
private ITreeNode <ContextNode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewWord>k__BackingField;
    public ITreeNode ContextNode { get; }
    protected string NewWord { get; }
    public bool IsReadOnly { get; }
    public string Text { get; }
    public AddToDictionaryBulbItem(string newWord, ITreeNode contextNode, ISettingsLayerInfo layerInfo);
    [CompilerGeneratedAttribute]
public ITreeNode get_ContextNode();
    [CompilerGeneratedAttribute]
protected string get_NewWord();
    public sealed virtual bool get_IsReadOnly();
    protected AddWordUndoRedoHandler CreateHandler(ISolution solution);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual string get_Text();
}
public class JetBrains.ReSharper.Features.ReSpeller.Bulbs.AddWordUndoRedoHandler : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <newWord>P;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IUserModifiableDictionarySource <modifiableSource>P;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ISettingsLayerInfo <layer>P;
    [NullableContextAttribute("1")]
public AddWordUndoRedoHandler(string newWord, IUserModifiableDictionarySource modifiableSource, ISettingsLayerInfo layer);
    public sealed virtual void Undo();
    public sealed virtual void Redo();
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Features.ReSpeller.Bulbs.AddWordUndoRedoHandlerRegistererStub : object {
    [NullableContextAttribute("1")]
public virtual void QueueUndoableAction(ISpellCheckingSettingsUndoRedoHandler handler, ITreeNode contextNode);
}
public class JetBrains.ReSharper.Features.ReSpeller.Bulbs.AdvancedTypoRenameBulbItem : object {
    private string myTextWithTypo;
    private IDeclaredElement myElement;
    private IReadOnlyCollection`1<string> mySuggestedNames;
    public bool IsReadOnly { get; }
    public string Text { get; }
    public RichText MenuItemText { get; }
    public AdvancedTypoRenameBulbItem(string textWithTypo, IDeclaredElement element, IReadOnlyCollection`1<string> suggestedNames);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
    public sealed virtual string get_Text();
    public sealed virtual RichText get_MenuItemText();
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Features.ReSpeller.Bulbs.ConfigureGrazieRuleModalCallerStub : object {
    public virtual void Call(string ruleId);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Features.ReSpeller.Bulbs.IAddWordUndoRedoHandlerRegisterer {
    public abstract virtual void QueueUndoableAction(ISpellCheckingSettingsUndoRedoHandler handler, ITreeNode contextNode);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Features.ReSpeller.Bulbs.IConfigureDictionariesBulbItemFactory {
    public abstract virtual IReadOnlyBulbAction Create();
}
public interface JetBrains.ReSharper.Features.ReSpeller.Bulbs.IConfigureGrazieRuleModalCaller {
    public abstract virtual void Call(string ruleId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Features.ReSpeller.Bulbs.IgnorePhraseBulbItem : BulbActionBase {
    [CompilerGeneratedAttribute]
private SuppressionPattern <suppressionPattern>P;
    [CompilerGeneratedAttribute]
private ITreeNode <context>P;
    [CompilerGeneratedAttribute]
private ISettingsLayerInfo <layer>P;
    public string Text { get; }
    public IgnorePhraseBulbItem(SuppressionPattern suppressionPattern, ITreeNode context, ISettingsLayerInfo layer);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public interface JetBrains.ReSharper.Features.ReSpeller.Bulbs.ISpellCheckingSettingsUndoRedoHandler {
}
public class JetBrains.ReSharper.Features.ReSpeller.Bulbs.TextRangeTypoReplaceBulbItem : object {
    private DocumentRange myHotSpotRange;
    private Task`1<IReadOnlyCollection`1<string>> mySuggestions;
    public string Text { get; }
    public TextRangeTypoReplaceBulbItem(DocumentRange hotSpotRange, Task`1<IReadOnlyCollection`1<string>> suggestions);
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
    public sealed virtual string get_Text();
}
public enum JetBrains.ReSharper.Features.ReSpeller.Daemon.CheckingContext : Enum {
    public int value__;
    public static CheckingContext StringLiteral;
    public static CheckingContext Comment;
    public static CheckingContext Documentation;
    public static CheckingContext MarkupAttribute;
    public static CheckingContext MarkupText;
    public static CheckingContext Identifier;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Features.ReSpeller.Daemon.CheckingContextExtensions : object {
    [ExtensionAttribute]
public static TextDomain ToTextDomain(CheckingContext context);
}
public class JetBrains.ReSharper.Features.ReSpeller.Daemon.GrammarAndSpellingData : object {
    private List`1<IGrammarCheckerData> myGrammarDatum;
    private List`1<ISpellCheckerData> myOrthographyDatum;
    public IReadOnlyCollection`1<IGrammarCheckerData> GrammarDatum { get; }
    public IReadOnlyCollection`1<ISpellCheckerData> OrthographyDatum { get; }
    public IReadOnlyCollection`1<IGrammarCheckerData> get_GrammarDatum();
    public IReadOnlyCollection`1<ISpellCheckerData> get_OrthographyDatum();
    public void EnrichWithReSpellerData(ISpellingAndGrammarDataBuilder spellingAndGrammarDataBuilder, IFile file, ITreeNode treeNode, SpellCheckingMode mode, CheckingContext checkingContext, SparseTextToCheck textToCheck);
    public void EnrichWithReSpellerData(ISpellingAndGrammarDataBuilder spellingAndGrammarDataBuilder, IFile file, IReadOnlyCollection`1<ITreeNode> treeNodes, SpellCheckingMode mode, CheckingContext checkingContext, SparseTextToCheck textToCheck);
    public void EnrichWithIdentifierReSpellerData(ISpellingAndGrammarDataBuilder spellingAndGrammarDataBuilder, DocumentRange elementRange, ITreeNode identifierNode, IDeclaredElement declaredElement, string elementName);
    private void AddOrthographyData(IEnumerable`1<ISpellCheckerData> data);
    private void AddGrammarData(IGrammarCheckerData data);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.ReSpeller.Daemon.GrammarAndSpellingMeasurements : object {
    private ILogger myLogger;
    private int myGrammarRequests;
    private int mySpellingRequests;
    private int myDeconstructions;
    private TimeSpan myTotalGrammarTime;
    private TimeSpan myTotalSpellingTime;
    private TimeSpan myTotalDeconstructionTime;
    private ConcurrentDictionary`2<Type, int> myContributionCounters;
    private ConcurrentDictionary`2<Type, TimeSpan> myContributionTimes;
    public GrammarAndSpellingMeasurements(Lifetime lifetime);
    public void LogGrammarRequest(TimeSpan elapsed);
    public void LogSpellingRequest(TimeSpan elapsed);
    public void LogTextExtraction(Type contributor, ITreeNode node, TimeSpan elapsed);
    private void Dump();
}
public static class JetBrains.ReSharper.Features.ReSpeller.Daemon.GrammarAndSpellingSeverityIds : object {
    public static string SpellingMistakeInComment;
    public static string SpellingMistakeInIdentifier;
    public static string SpellingMistakeInMarkupAttribute;
    public static string SpellingMistakeInMarkupText;
    public static string SpellingMistakeInStringLiteral;
    public static string GrammarMistakeInComment;
    public static string GrammarMistakeInMarkupAttribute;
    public static string GrammarMistakeInMarkupText;
    public static string GrammarMistakeInStringLiteral;
}
public interface JetBrains.ReSharper.Features.ReSpeller.Daemon.IGrammarCheckerData {
}
public interface JetBrains.ReSharper.Features.ReSpeller.Daemon.ISpellCheckerData {
}
public class JetBrains.ReSharper.Features.ReSpeller.Daemon.RangeAndContext : ValueType {
    public ITextModificationContext Context;
    public DocumentRange Range;
    public RangeAndContext(ITextModificationContext context, DocumentRange range);
    public void Deconstruct(ITextModificationContext& context, DocumentRange& range);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.ReSpeller.Daemon.ReSpellerFilterProvider : object {
    public sealed virtual IEnumerable`1<IPencilsFilter> GetFilters(Lifetime lifetime, ISolution solution, ISettingsStore store);
}
public class JetBrains.ReSharper.Features.ReSpeller.Daemon.ReSpellerPencilsFilter : PencilsFilterBase {
    public string Kind { get; }
    public virtual string get_Kind();
}
public abstract class JetBrains.ReSharper.Features.ReSpeller.Daemon.TextExtraction.ElementTextExtractor`1 : object {
    private GrammarAndSpellingMeasurements myMeasurements;
    [CompilerGeneratedAttribute]
private ISpellingAndGrammarDataBuilder <SpellingAndGrammarDataBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequiredSpellCheckingModesProvider <RequiredSpellCheckingModesProvider>k__BackingField;
    protected ISpellingAndGrammarDataBuilder SpellingAndGrammarDataBuilder { get; }
    protected IRequiredSpellCheckingModesProvider RequiredSpellCheckingModesProvider { get; }
    public Type ApplicableTo { get; }
    protected ElementTextExtractor`1(ISpellingAndGrammarDataBuilder reSpellingAndGrammarDataBuilder, IRequiredSpellCheckingModesProvider requiredRequiredSpellCheckingModesProvider, GrammarAndSpellingMeasurements measurements);
    [CompilerGeneratedAttribute]
protected ISpellingAndGrammarDataBuilder get_SpellingAndGrammarDataBuilder();
    [CompilerGeneratedAttribute]
protected IRequiredSpellCheckingModesProvider get_RequiredSpellCheckingModesProvider();
    public sealed virtual Type get_ApplicableTo();
    private sealed virtual override bool JetBrains.ReSharper.Features.ReSpeller.Daemon.TextExtraction.IElementTextExtractor.Extract(ITreeNode node, ElementTextExtractorContext context);
    [NotNullAttribute]
[ItemNotNullAttribute]
protected static ISet`1<ITreeNode> GetOrCreateNodesWithCustomSpellCheckingInjects(ElementTextExtractorContext context, ICustomInjectedFileSpellCheckingProvider customInjectedFileSpellCheckingProvider);
    public abstract virtual bool Extract(T node, ElementTextExtractorContext context);
}
public class JetBrains.ReSharper.Features.ReSpeller.Daemon.TextExtraction.ElementTextExtractorContext : UserDataHolder {
    public static Key`1<ISet`1<ITreeNode>> InjectedFilesKey;
    [CompilerGeneratedAttribute]
private IFile <File>k__BackingField;
    [CompilerGeneratedAttribute]
private GrammarAndSpellingData <Collector>k__BackingField;
    [CompilerGeneratedAttribute]
private SpellCheckingMode <FileWideSpellCheckingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private IContextBoundSettingsStore <Settings>k__BackingField;
    public IFile File { get; }
    public GrammarAndSpellingData Collector { get; }
    public SpellCheckingMode FileWideSpellCheckingMode { get; }
    public IContextBoundSettingsStore Settings { get; }
    public ElementTextExtractorContext(IFile file, GrammarAndSpellingData collector, SpellCheckingMode fileWideSpellCheckingMode, IContextBoundSettingsStore settings);
    private static ElementTextExtractorContext();
    [CompilerGeneratedAttribute]
public IFile get_File();
    [CompilerGeneratedAttribute]
public GrammarAndSpellingData get_Collector();
    [CompilerGeneratedAttribute]
public SpellCheckingMode get_FileWideSpellCheckingMode();
    [CompilerGeneratedAttribute]
public IContextBoundSettingsStore get_Settings();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.ReSpeller.Daemon.TextExtraction.ElementTextExtractorsRegistry : object {
    private IElementTextExtractor[] myAnalyzers;
    private ConcurrentDictionary`2<Type, IElementTextExtractor[]> myAnalyzersPerType;
    public ElementTextExtractorsRegistry(IEnumerable`1<IElementTextExtractor> analyzers);
    public IElementTextExtractor[] GetAnalyzers(ITreeNode node);
}
public interface JetBrains.ReSharper.Features.ReSpeller.Daemon.TextExtraction.IElementTextExtractor {
    public Type ApplicableTo { get; }
    public abstract virtual Type get_ApplicableTo();
    public abstract virtual bool Extract(ITreeNode node, ElementTextExtractorContext context);
}
public interface JetBrains.ReSharper.Features.ReSpeller.Daemon.TextExtraction.ITextExtractionDaemonStageProcess {
    public GrammarAndSpellingData GrammarAndSpellingData { get; public set; }
    public abstract virtual GrammarAndSpellingData get_GrammarAndSpellingData();
    public abstract virtual void set_GrammarAndSpellingData(GrammarAndSpellingData value);
}
[DaemonStageAttribute("0")]
public class JetBrains.ReSharper.Features.ReSpeller.Daemon.TextExtraction.TextExtractionDaemonStage : object {
    private IRequiredSpellCheckingModesProvider myRequiredSpellCheckingModesProvider;
    private ElementTextExtractorsRegistry myRegistry;
    public TextExtractionDaemonStage(IRequiredSpellCheckingModesProvider requiredSpellCheckingModesProvider, ElementTextExtractorsRegistry registry, ICustomInjectedFileSpellCheckingProvider injectedFileSpellCheckingProvider);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.ReSpeller.Daemon.TextExtraction.TextExtractionDaemonStage/<CreateProcess>d__3")]
public sealed virtual IEnumerable`1<IDaemonStageProcess> CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind);
}
public class JetBrains.ReSharper.Features.ReSpeller.Daemon.TextExtraction.TextExtractionDaemonStageProcess : object {
    private IRequiredSpellCheckingModesProvider myRequiredSpellCheckingModesProvider;
    private ElementTextExtractorsRegistry myRegistry;
    private IContextBoundSettingsStore mySettings;
    [CompilerGeneratedAttribute]
private IDaemonProcess <DaemonProcess>k__BackingField;
    [CompilerGeneratedAttribute]
private IFile <File>k__BackingField;
    [CompilerGeneratedAttribute]
private GrammarAndSpellingData <GrammarAndSpellingData>k__BackingField;
    public IDaemonProcess DaemonProcess { get; }
    public IFile File { get; }
    public GrammarAndSpellingData GrammarAndSpellingData { get; public set; }
    public TextExtractionDaemonStageProcess(IFile file, IDaemonProcess daemonProcess, IRequiredSpellCheckingModesProvider requiredSpellCheckingModesProvider, ElementTextExtractorsRegistry registry, IContextBoundSettingsStore settings);
    public sealed virtual void Execute(Action`1<DaemonStageResult> committer);
    [CompilerGeneratedAttribute]
public sealed virtual IDaemonProcess get_DaemonProcess();
    [CompilerGeneratedAttribute]
public sealed virtual IFile get_File();
    [CompilerGeneratedAttribute]
public sealed virtual GrammarAndSpellingData get_GrammarAndSpellingData();
    [CompilerGeneratedAttribute]
public sealed virtual void set_GrammarAndSpellingData(GrammarAndSpellingData value);
    public sealed virtual bool InteriorShouldBeProcessed(ITreeNode element, ElementTextExtractorContext context);
    public sealed virtual bool IsProcessingFinished(ElementTextExtractorContext context);
    public sealed virtual void ProcessBeforeInterior(ITreeNode element, ElementTextExtractorContext context);
    public sealed virtual void ProcessAfterInterior(ITreeNode element, ElementTextExtractorContext context);
}
public static class JetBrains.ReSharper.Features.ReSpeller.Icons.GrammarAndSpellingIcons : object {
}
public static class JetBrains.ReSharper.Features.ReSpeller.Icons.ReSpellerThemedIcons : object {
}
[ZoneDefinitionAttribute]
[ZoneDefinitionConfigurableFeatureAttribute("Grammar and Spelling", "Grammar and spelling checks for textual strings, comments, and code identifiers", "False")]
public interface JetBrains.ReSharper.Features.ReSpeller.IReSpellerZone {
}
[RegisterConfigurableHighlightingsGroupAttribute("Spelling", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "SpellingIssues_Text", "Spelling")]
[RegisterConfigurableHighlightingsGroupAttribute("Grammar", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "GrammarIssues_Text", "Grammar")]
public static class JetBrains.ReSharper.Features.ReSpeller.Properties.ReSpellerAssemblyProperties : object {
    public static string Version;
    public static string PrereleaseSuffix;
    public static string Description;
    public static string Copyright;
    public static string Company;
    public static string SpellingHighlightingGroup;
    public static string GrammarHighlightingGroup;
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DaemonStageAttribute("0")]
public class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.Daemon.Highlighting.HighlightingDaemonStage : object {
    [CompilerGeneratedAttribute]
private GrammarAndSpellingHighlightingsContributor <highlightingsContributor>P;
    public HighlightingDaemonStage(GrammarAndSpellingHighlightingsContributor highlightingsContributor);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.Daemon.Highlighting.HighlightingDaemonStage/<CreateProcess>d__2")]
public sealed virtual IEnumerable`1<IDaemonStageProcess> CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind);
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.Daemon.Highlighting.HighlightingDaemonStageProcess : object {
    private ITextExtractionDaemonStageProcess myTextExtractionProcess;
    private IContextBoundSettingsStore mySettings;
    private GrammarAndSpellingHighlightingsContributor myHighlightingsContributor;
    public IDaemonProcess DaemonProcess { get; }
    public IFile File { get; }
    public HighlightingDaemonStageProcess(ITextExtractionDaemonStageProcess textExtractionProcess, IContextBoundSettingsStore settings, GrammarAndSpellingHighlightingsContributor highlightingsContributor);
    public sealed virtual void Execute(Action`1<DaemonStageResult> committer);
    public sealed virtual IDaemonProcess get_DaemonProcess();
    public sealed virtual IFile get_File();
}
[HighlightingSourceAttribute]
public interface JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.Daemon.IGrammarHighlightingFactory {
    public abstract virtual GrammarMistakeHighlightingBase Build(CheckingContext checkingContext, RangeAndContext rangeAndContext, IReadOnlyCollection`1<RangeAndContext> allRangesWithProblem, IGrammarMistakeDetails grammarMistakeDetails);
}
[HighlightingSourceAttribute]
public interface JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.Daemon.IGrammarMistakeHighlightingContract {
}
[HighlightingSourceAttribute]
public interface JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.Daemon.ISpellingHighlightingContract {
}
[HighlightingSourceAttribute]
public interface JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.Daemon.ISpellingHighlightingFactory {
    public abstract virtual SpellingMistakeHighlightingBase Build(CheckingContext checkingContext, string text, RangeAndContext rangeAndContext, IReadOnlyCollection`1<RangeAndContext> relatedRanges);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DaemonStageAttribute("0")]
public class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.Daemon.LanguageDetection.LanguageDetectionDaemonStage : object {
    private ISpellServiceBackendDispatcher mySpellServiceBackendDispatcher;
    private LanguageDetectionResultsHolder myLanguageDetectionResultsHolder;
    public LanguageDetectionDaemonStage(ISpellServiceBackendDispatcher spellServiceBackendDispatcher, LanguageDetectionResultsHolder languageDetectionResultsHolder);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.Daemon.LanguageDetection.LanguageDetectionDaemonStage/<CreateProcess>d__3")]
public sealed virtual IEnumerable`1<IDaemonStageProcess> CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind);
}
public class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.Daemon.LanguageDetection.LanguageDetectionDaemonStageProcess : object {
    [CompilerGeneratedAttribute]
private IPhraseSpellService <phraseSpellService>P;
    [CompilerGeneratedAttribute]
private LanguageDetectionResultsHolder <languageDetectionResultsHolder>P;
    [CompilerGeneratedAttribute]
private IDaemonProcess <DaemonProcess>k__BackingField;
    public IDaemonProcess DaemonProcess { get; }
    public LanguageDetectionDaemonStageProcess(IDaemonProcess daemonProcess, IPhraseSpellService phraseSpellService, LanguageDetectionResultsHolder languageDetectionResultsHolder);
    public sealed virtual void Execute(Action`1<DaemonStageResult> committer);
    [CompilerGeneratedAttribute]
public sealed virtual IDaemonProcess get_DaemonProcess();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.Daemon.LanguageDetection.LanguageDetectionResultsHolder : object {
    private ConcurrentDictionary`2<IProjectFile, IProperty`1<DetectedLanguage[]>> myDictionary;
    private ILogger myLogger;
    public LanguageDetectionResultsHolder(Lifetime lifetime);
    public void Update(IProjectFile projectFile, DetectedLanguage[] suggestedLanguages);
    public void WatchFile(Lifetime lifetime, IProjectFile projectFile);
    public bool TryGetLanguagesProperty(IProjectFile projectFile, IProperty`1& prop);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0();
}
[HighlightingSourceAttribute]
public static class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.Daemon.SpellCheckingHighlightingGenerator : object {
    public static void Generate(IHighlightingConsumer consumer, Dictionary`2<string, bool> results, IReadOnlyCollection`1<IReSharperSpellCheckerData> dataToCheck);
}
[ShellComponentAttribute("16")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.Daemon.SpellingHighlightingFactory : object {
    public sealed virtual SpellingMistakeHighlightingBase Build(CheckingContext checkingContext, string text, RangeAndContext rangeAndContext, IReadOnlyCollection`1<RangeAndContext> relatedRanges);
}
[SolutionComponentAttribute("0")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.GrammarAndSpellingHighlightingsContributor : object {
    private Lifetime myLifetime;
    private ISpellServiceBackendDispatcher mySpellServiceBackendDispatcher;
    private GrammarAndSpellingMeasurements myGrammarAndSpellingMeasurements;
    public GrammarAndSpellingHighlightingsContributor(Lifetime lifetime, ISpellServiceBackendDispatcher spellServiceBackendDispatcher, GrammarAndSpellingMeasurements grammarAndSpellingMeasurements);
    public void Contribute(IHighlightingConsumer consumer, IReadOnlyCollection`1<IGrammarCheckerData> grammar, IReadOnlyCollection`1<ISpellCheckerData> orthography);
    public void Contribute(IHighlightingConsumer consumer, GrammarAndSpellingData data);
    private void Measure(Action action, Action`1<TimeSpan> log);
    private void ContributeGrammarHighlightings(IHighlightingConsumer consumer, IReadOnlyCollection`1<IGrammarCheckerData> data);
    private void ContributeOrthographyHighlightings(IHighlightingConsumer consumer, IReadOnlyCollection`1<ISpellCheckerData> data);
}
[HighlightingSourceAttribute]
public static class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.GrammarCheckingHighlightingGenerator : object {
    public static void Generate(IHighlightingConsumer consumer, Dictionary`2<PhraseWithDomain, IReadOnlyCollection`1<SpellCheckingResultItem>> results, IReadOnlyCollection`1<IReSharperGrammarCheckerData> dataToCheck);
}
public class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.GrazieGrammarMistakeDetails : object {
    private SpellCheckingResultItem myGrazieCheckResult;
    private static TextStyle ourGrayTextStyle;
    private RichText myErrorText;
    private RichText myDescription;
    public string ShortMessage { get; }
    public RichText ErrorText { get; }
    public RichText Description { get; }
    public List`1<string> Suggestions { get; }
    public SuppressionPattern SuppressionPattern { get; }
    public string RuleCategoryName { get; }
    public string RuleId { get; }
    public string HtmlTooltip { get; }
    public GrazieGrammarMistakeDetails(SpellCheckingResultItem item);
    private static GrazieGrammarMistakeDetails();
    public sealed virtual string get_ShortMessage();
    public sealed virtual RichText get_ErrorText();
    public sealed virtual RichText get_Description();
    public sealed virtual List`1<string> get_Suggestions();
    public sealed virtual SuppressionPattern get_SuppressionPattern();
    public sealed virtual string get_RuleCategoryName();
    public sealed virtual string get_RuleId();
    public sealed virtual string get_HtmlTooltip();
    private RichText BuildErrorText();
    private RichText BuildDescription();
}
[RegisterConfigurableSeverityAttribute("CommentTypo", "", "", "", "Spelling", "", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "TypoInCommentConfigurableSeverityTitle", "", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "TypoInCommentConfigurableSeverityDescription", "3")]
[ConfigurableSeverityHighlightingAttribute("CommentTypo", "CSHARP,VBASIC,Razor,ASPX,ASXX,XML,XAML,JAVA_SCRIPT,TYPE_SCRIPT,RESX,CPP")]
public class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.Highlightings.CommentTypoHighlighting : SpellingMistakeHighlightingBase {
    private static string SeverityId;
    protected string ToolTipFormat { get; }
    public CommentTypoHighlighting(RangeAndContext rangeAndContext, IReadOnlyCollection`1<RangeAndContext> relatedRanges, string text);
    protected virtual string get_ToolTipFormat();
}
public abstract class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.Highlightings.GrammarMistakeHighlightingBase : ReSpellerHighlightingBase {
    [NotNullAttribute]
private IGrammarMistakeDetails myGrammarMistakeDetails;
    [NotNullAttribute]
public List`1<string> Suggestions { get; }
    [CanBeNullAttribute]
public SuppressionPattern SuppressionPattern { get; }
    protected string ToolTipFormat { get; }
    protected RichText ErrorText { get; }
    protected RichText Description { get; }
    public string RuleCategoryName { get; }
    public string RuleId { get; }
    public string HtmlText { get; }
    public string Title { get; }
    protected GrammarMistakeHighlightingBase(RangeAndContext rangeAndContext, IReadOnlyCollection`1<RangeAndContext> allRangesWithProblem, IGrammarMistakeDetails grammarMistakeDetails);
    public List`1<string> get_Suggestions();
    public SuppressionPattern get_SuppressionPattern();
    protected virtual string get_ToolTipFormat();
    protected virtual RichText get_ErrorText();
    protected virtual RichText get_Description();
    public string get_RuleCategoryName();
    public string get_RuleId();
    public string get_HtmlText();
    public string get_Title();
}
internal class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.Highlightings.GrammarReplaceTextAtRange : ReplaceTextAtRange {
    public GrammarReplaceTextAtRange(DocumentRange range, string replaceWith, IReadOnlyCollection`1<RangeAndContext> allRangesWithProblem);
}
[RegisterConfigurableSeverityAttribute("IdentifierTypo", "", "", "", "Spelling", "", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "TypoInIdentifierConfigurableSeverityTitle", "", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "TypoInIdentifierConfigurableSeverityDescription", "3")]
[ConfigurableSeverityHighlightingAttribute("IdentifierTypo", "CSHARP,VBASIC,Razor,ASPX,ASXX,XAML,JAVA_SCRIPT,TYPE_SCRIPT,CPP")]
public class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.Highlightings.IdentifierTypoHighlighting : SpellingMistakeHighlightingBase {
    private static string SeverityId;
    private IDeclaredElement myDeclaredElement;
    private TextPart myWrongPart;
    private static TextStyle ourWrongTextStyle;
    private static TextStyle ourRegularTextStyle;
    [CompilerGeneratedAttribute]
private List`1<TextPart> <InnerNameParts>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Suffix>k__BackingField;
    private List`1<TextPart> InnerNameParts { get; }
    public string Prefix { get; }
    public string Suffix { get; }
    public IDeclaredElement DeclaredElement { get; }
    protected string ToolTipFormat { get; }
    public IdentifierTypoHighlighting(RangeAndContext rangeAndContext, IDeclaredElement declaredElement, TextPart wrongPart, List`1<TextPart> innerNameParts, string prefix, string suffix);
    private static IdentifierTypoHighlighting();
    private RichText ComposeIdentifierName(List`1<TextPart> innerNameParts, TextPart wrongPart);
    [CompilerGeneratedAttribute]
private List`1<TextPart> get_InnerNameParts();
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public string get_Suffix();
    public virtual IReadOnlyCollection`1<string> StartCalculateSuggestions(ISpellService spellService);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.Highlightings.IdentifierTypoHighlighting/<CreateRenameBulbAction>d__17")]
public virtual IEnumerable`1<IBulbActionWithRichTextInMenu> CreateRenameBulbAction(IReadOnlyCollection`1<string> suggestedNames);
    public IDeclaredElement get_DeclaredElement();
    public virtual bool IsValid();
    protected virtual string get_ToolTipFormat();
    protected virtual RichTextBlock GetFormattedAllInfo();
}
public interface JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.Highlightings.IGrammarMistakeDetails {
    [CanBeNullAttribute]
public string ShortMessage { get; }
    [NotNullAttribute]
public RichText ErrorText { get; }
    [NotNullAttribute]
public List`1<string> Suggestions { get; }
    [NotNullAttribute]
public RichText Description { get; }
    [CanBeNullAttribute]
public SuppressionPattern SuppressionPattern { get; }
    [NotNullAttribute]
public string RuleCategoryName { get; }
    [NotNullAttribute]
public string RuleId { get; }
    [NotNullAttribute]
public string HtmlTooltip { get; }
    public abstract virtual string get_ShortMessage();
    public abstract virtual RichText get_ErrorText();
    public abstract virtual List`1<string> get_Suggestions();
    public abstract virtual RichText get_Description();
    public abstract virtual SuppressionPattern get_SuppressionPattern();
    public abstract virtual string get_RuleCategoryName();
    public abstract virtual string get_RuleId();
    public abstract virtual string get_HtmlTooltip();
}
[RegisterConfigurableSeverityAttribute("MarkupAttributeTypo", "", "", "", "Spelling", "", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "TypoInMarkupAttributeValueConfigurableSeverityTitle", "", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "TypoInMarkupAttributeValueConfigurableSeverityDescription", "3")]
[ConfigurableSeverityHighlightingAttribute("MarkupAttributeTypo", "XML,RESX,XAML,HTML,Razor,ASPX,ASXX")]
public class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.Highlightings.MarkupAttributeTypoHighlighting : SpellingMistakeHighlightingBase {
    private static string SeverityId;
    protected string ToolTipFormat { get; }
    public MarkupAttributeTypoHighlighting(RangeAndContext rangeAndContext, IReadOnlyCollection`1<RangeAndContext> relatedRanges, string text);
    protected virtual string get_ToolTipFormat();
}
[RegisterConfigurableSeverityAttribute("MarkupTextTypo", "", "", "", "Spelling", "", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "TypoInMarkupTextConfigurableSeverityTitle", "", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "TypoInMarkupTextConfigurableSeverityDescription", "3")]
[ConfigurableSeverityHighlightingAttribute("MarkupTextTypo", "XML,RESX,XAML,HTML,Razor,ASPX,ASXX")]
public class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.Highlightings.MarkupTextTypoHighlighting : SpellingMistakeHighlightingBase {
    private static string SeverityId;
    protected string ToolTipFormat { get; }
    public MarkupTextTypoHighlighting(RangeAndContext rangeAndContext, IReadOnlyCollection`1<RangeAndContext> relatedRanges, string text);
    protected virtual string get_ToolTipFormat();
}
internal abstract class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.Highlightings.ReplaceTextAtRange : BulbActionBase {
    private DocumentRange myRange;
    private string myReplaceWith;
    private IReadOnlyCollection`1<RangeAndContext> myAllRangesWithProblem;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <MenuItemText>k__BackingField;
    public string Text { get; }
    public RichText MenuItemText { get; }
    public ReplaceTextAtRange(DocumentRange range, string replaceWith, IReadOnlyCollection`1<RangeAndContext> allRangesWithProblem);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual Action`1<ITextControl> ExecuteAfterPsiTransaction(ISolution solution, IProjectModelTransactionCookie cookie, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    [CompilerGeneratedAttribute]
public sealed virtual RichText get_MenuItemText();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.Highlightings.ReSpellerCustomHighlightingsGroupContributor : object {
    [CompilerGeneratedAttribute]
private String[] <GroupIds>k__BackingField;
    public string CustomGroupName { get; }
    public String[] GroupIds { get; }
    public sealed virtual string get_CustomGroupName();
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_GroupIds();
}
public abstract class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.Highlightings.ReSpellerHighlightingBase : object {
    [CompilerGeneratedAttribute]
private ITextModificationContext <Context>k__BackingField;
    private DocumentRange myRange;
    [CompilerGeneratedAttribute]
private RichText <Description>k__BackingField;
    private RichText myTextWithError;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<RangeAndContext> <AllRangesWithProblem>k__BackingField;
    public ITextModificationContext Context { get; }
    protected RichText ErrorText { get; }
    protected RichText Description { get; protected set; }
    protected string ToolTipFormat { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public IReadOnlyCollection`1<RangeAndContext> AllRangesWithProblem { get; }
    protected ReSpellerHighlightingBase(RangeAndContext rangeAndContext, IReadOnlyCollection`1<RangeAndContext> allRangesWithProblem, string wrongText);
    [CompilerGeneratedAttribute]
public ITextModificationContext get_Context();
    protected virtual RichText get_ErrorText();
    [CompilerGeneratedAttribute]
protected virtual RichText get_Description();
    [CompilerGeneratedAttribute]
protected virtual void set_Description(RichText value);
    public virtual bool IsValid();
    public virtual DocumentRange CalculateRange();
    protected abstract virtual string get_ToolTipFormat();
    protected RichTextBlock GetFormattedMainInfo();
    protected virtual RichTextBlock GetFormattedAllInfo();
    public sealed virtual RichTextBlock TryGetTooltip(HighlighterTooltipKind where);
    public virtual string get_ToolTip();
    public virtual string get_ErrorStripeToolTip();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<RangeAndContext> get_AllRangesWithProblem();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.Highlightings.RichTextExtensions : object {
    private static Regex ourRegex;
    private static RichTextExtensions();
    [ExtensionAttribute]
public static RichText RtfFormatLine(string formatString, RichText[] args);
}
public abstract class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.Highlightings.SpellingMistakeHighlightingBase : ReSpellerHighlightingBase {
    [CompilerGeneratedAttribute]
private string <WrongPart>k__BackingField;
    public string WrongPart { get; }
    protected SpellingMistakeHighlightingBase(RangeAndContext rangeAndContext, IReadOnlyCollection`1<RangeAndContext> relatedRanges, string wrongPart);
    public virtual IReadOnlyCollection`1<string> StartCalculateSuggestions(ISpellService spellService);
    public virtual IEnumerable`1<IBulbActionWithRichTextInMenu> CreateRenameBulbAction(IReadOnlyCollection`1<string> suggestedNames);
    [CompilerGeneratedAttribute]
public string get_WrongPart();
    [CompilerGeneratedAttribute]
private SpellingReplaceTextAtRange <CreateRenameBulbAction>b__2_0(string x);
}
internal class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.Highlightings.SpellingReplaceTextAtRange : ReplaceTextAtRange {
    public SpellingReplaceTextAtRange(DocumentRange range, string replaceWith, IReadOnlyCollection`1<RangeAndContext> allRangesWithProblem);
}
[RegisterConfigurableSeverityAttribute("StringLiteralTypo", "", "", "", "Spelling", "", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "TypoInStringLiteralConfigurableSeverityTitle", "", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "TypoInStringLiteralConfigurableSeverityDescription", "3")]
[ConfigurableSeverityHighlightingAttribute("StringLiteralTypo", "CSHARP,VBASIC,JAVA_SCRIPT,Razor,ASPX,ASXX,TYPE_SCRIPT,CPP")]
public class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.Highlightings.StringLiteralTypoHighlighting : SpellingMistakeHighlightingBase {
    private static string SeverityId;
    protected string ToolTipFormat { get; }
    public StringLiteralTypoHighlighting(RangeAndContext rangeAndContext, IReadOnlyCollection`1<RangeAndContext> relatedRanges, string text);
    protected virtual string get_ToolTipFormat();
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.IdentifierSpellCheckerData : object {
    private RangeAndContext myRangeAndContext;
    private TextPart myPart;
    private List`1<TextPart> myInnerNameParts;
    private IDeclaredElement myDeclaredElement;
    private string myPrefix;
    private string mySuffix;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public CheckingContext Context { get; }
    public string Text { get; }
    public IdentifierSpellCheckerData(RangeAndContext rangeAndContext, TextPart part, List`1<TextPart> innerNameParts, IDeclaredElement declaredElement, string prefix, string suffix);
    public sealed virtual CheckingContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.IdentifierSpellCheckerData/<GetDocumentRanges>d__12")]
public sealed virtual IEnumerable`1<RangeAndContext> GetDocumentRanges();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.IdentifierSpellCheckerData/<BuildHighlightings>d__13")]
public sealed virtual IEnumerable`1<SpellingMistakeHighlightingBase> BuildHighlightings();
}
[HighlightingSourceAttribute]
public interface JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.IReSharperGrammarCheckerData {
    public PhraseWithDomain PhraseWithDomain { get; }
    public IFile File { get; }
    public abstract virtual PhraseWithDomain get_PhraseWithDomain();
    public abstract virtual IFile get_File();
    public abstract virtual IEnumerable`1<GrammarMistakeHighlightingBase> BuildHighlightings(SpellCheckingResultItem item);
}
[HighlightingSourceAttribute]
public interface JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.IReSharperSpellCheckerData {
    public CheckingContext Context { get; }
    public string Text { get; }
    public abstract virtual CheckingContext get_Context();
    public abstract virtual string get_Text();
    public abstract virtual IEnumerable`1<RangeAndContext> GetDocumentRanges();
    public abstract virtual IEnumerable`1<SpellingMistakeHighlightingBase> BuildHighlightings();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.LanguageToolExampleUtil : object {
    private static Regex ourExampleSplitter;
    private static LanguageToolExampleUtil();
    [ExtensionAttribute]
public static ValueTuple`2<RichText, RichText[]> BuildExampleTexts(LanguageToolIncorrectExample example);
    private static ValueTuple`3<string, string, string> SplitExample(string input);
    private static RichText BuildExample(string prefix, string marker, string suffix);
}
public class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.QuickFixes.ConfigureGrazieRuleBulbItem : object {
    private string myRuleId;
    private string myRuleCategoryName;
    public string Text { get; }
    public RichText MenuItemText { get; }
    public bool IsReadOnly { get; }
    public ConfigureGrazieRuleBulbItem(string ruleId, string ruleCategoryName);
    public sealed virtual string get_Text();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
    public sealed virtual RichText get_MenuItemText();
    public sealed virtual bool get_IsReadOnly();
}
public static class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.QuickFixes.GrammarAndSpellingFixAnchors : object {
    public static InvisibleAnchor Main;
    public static InvisibleAnchor GrammarFix;
    public static InvisibleAnchor GrammarMenu;
    public static InvisibleAnchor SpellingFix;
    public static InvisibleAnchor SpellingMenu;
    private static GrammarAndSpellingFixAnchors();
}
public interface JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.QuickFixes.IBulbActionWithRichTextInMenu {
    public RichText MenuItemText { get; }
    public abstract virtual RichText get_MenuItemText();
}
public interface JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.QuickFixes.ISpellCheckingMenuEntry {
}
public class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.QuickFixes.SpellCheckingMenuBulbItem : object {
    [CompilerGeneratedAttribute]
private IBulbAction <Action>k__BackingField;
    public IBulbAction Action { get; }
    public SpellCheckingMenuBulbItem(IBulbAction action);
    [CompilerGeneratedAttribute]
public IBulbAction get_Action();
}
public class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.QuickFixes.SpellCheckingMenuGroup : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IBulbAction> <Bulbs>k__BackingField;
    public string Text { get; }
    public List`1<IBulbAction> Bulbs { get; }
    public SpellCheckingMenuGroup(string text);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public List`1<IBulbAction> get_Bulbs();
}
public class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.QuickFixes.SpellCheckingQuickFixMenu : object {
    [CompilerGeneratedAttribute]
private List`1<ISpellCheckingMenuEntry> <Entries>k__BackingField;
    public List`1<ISpellCheckingMenuEntry> Entries { get; }
    [CompilerGeneratedAttribute]
public List`1<ISpellCheckingMenuEntry> get_Entries();
    public void Add(IBulbAction item);
    public void AddRange(IEnumerable`1<IBulbAction> items);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.QuickFixes.TypoQuickFix : object {
    private ReSpellerHighlightingBase myHighlighting;
    public TypoQuickFix(GrammarMistakeHighlightingBase highlighting);
    public TypoQuickFix(SpellingMistakeHighlightingBase highlighting);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    private SpellCheckingQuickFixMenu CreateMenu(ReSpellerHighlightingBase highlighting, ISpellService spellService, ISettingsLayersProvider settingsLayersProvider, IConfigureDictionariesBulbItemFactory configureDictionariesBulbItemFactory);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
}
internal static class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.RangeUtils : object {
    public static DocumentRange GetPartRange(DocumentRange sourceRange, TextPart part, int prefixLength);
}
public abstract class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.ReSharperCheckerDataBase : object {
    private SparseTextToCheck myFullText;
    protected ReSharperCheckerDataBase(SparseTextToCheck fullText);
    protected IReadOnlyCollection`1<RangeAndContext> GetOriginalRanges(int from, int to);
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.ReSharperGrammarCheckerData : ReSharperCheckerDataBase {
    private CheckingContext myCheckingContext;
    [CompilerGeneratedAttribute]
private PhraseWithDomain <PhraseWithDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private IFile <File>k__BackingField;
    public PhraseWithDomain PhraseWithDomain { get; }
    public IFile File { get; }
    public ReSharperGrammarCheckerData(IFile file, CheckingContext checkingContext, PhraseWithDomain phraseWithDomain, SparseTextToCheck text);
    [CompilerGeneratedAttribute]
public sealed virtual PhraseWithDomain get_PhraseWithDomain();
    [CompilerGeneratedAttribute]
public sealed virtual IFile get_File();
    public IEnumerable`1<RangeAndContext> GetDocumentRanges(SpellCheckingResultItem item);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.ReSharperGrammarCheckerData/<BuildHighlightings>d__9")]
public sealed virtual IEnumerable`1<GrammarMistakeHighlightingBase> BuildHighlightings(SpellCheckingResultItem item);
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.ReSharperSpellCheckerData : ReSharperCheckerDataBase {
    private IFile myFile;
    private TextPart myTextPart;
    [CompilerGeneratedAttribute]
private CheckingContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public CheckingContext Context { get; }
    public string Text { get; }
    public ReSharperSpellCheckerData(IFile file, TextPart textPart, SparseTextToCheck fullText, CheckingContext checkingContext);
    public sealed virtual IEnumerable`1<RangeAndContext> GetDocumentRanges();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.ReSharperSpellCheckerData/<BuildHighlightings>d__4")]
public sealed virtual IEnumerable`1<SpellingMistakeHighlightingBase> BuildHighlightings();
    [CompilerGeneratedAttribute]
public sealed virtual CheckingContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
}
[SolutionComponentAttribute("0")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.ReSharperSpellingAndGrammarDataBuilder : object {
    [CompilerGeneratedAttribute]
private ISpellServiceBackendDispatcher <spellServiceBackendDispatcher>P;
    [CompilerGeneratedAttribute]
private INamingPolicyCache <namingPolicyCache>P;
    public ReSharperSpellingAndGrammarDataBuilder(ISpellServiceBackendDispatcher spellServiceBackendDispatcher, INamingPolicyCache namingPolicyCache);
    public sealed virtual IGrammarCheckerData BuildGrammarCheckerData(IFile file, IReadOnlyCollection`1<ITreeNode> treeNodes, SparseTextToCheck text, CheckingContext checkingContext);
    private static RdLanguage GetLanguage(PsiLanguageType language);
    public sealed virtual IReadOnlyCollection`1<ISpellCheckerData> BuildOrthographyCheckerData(IFile file, IReadOnlyCollection`1<ITreeNode> treeNodes, SparseTextToCheck textToCheck, CheckingContext checkingContext);
    public sealed virtual IReadOnlyCollection`1<ISpellCheckerData> BuildIdentifierCheckerData(DocumentRange elementRange, ITreeNode identifierNode, IDeclaredElement declaredElement, string qualifiedName);
    [CompilerGeneratedAttribute]
internal static PhrasePartRange <BuildGrammarCheckerData>g__BuildPhrasePartRange|3_0(GrammarCheckerTextRange it);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.ReSpeller.ReSharperSpecific.ZoneMarker : object {
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Features.ReSpeller.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string DocCommentsUseMemberModifiersSettingDescription { get; }
    public static string CheckInDocumentation { get; }
    public static string CheckInInterpolatedStringLiterals { get; }
    public static string CheckInternalMembersSettingDescription { get; }
    public static string CheckLocalsLocalVariablesAndParametersSettingDescription { get; }
    public static string CheckPrivateMembersSettingDescription { get; }
    public static string CheckProtectedInternalMembersSettingDescription { get; }
    public static string CheckProtectedMembersSettingDescription { get; }
    public static string CheckPublicMembersSettingDescription { get; }
    public static string CheckInheritedMembersSettingDescription { get; }
    public static string CheckVerbatimStringsStartingWithSettingDescription { get; }
    public static string CheckNonLocalizableStringsSettingDescription { get; }
    public static string DontCheckInheritedMembersSettingDescription { get; }
    public static string DontCheckVerbatimStringsStartingWithSettingDescription { get; }
    public static string MinimalWordLengthToCheckSmallerWordsWillBeSkippedSettingDescription { get; }
    public static string ReSpellerIsEnabledSettingDescription { get; }
    public static string ReSpellerOptionPageTitle { get; }
    public static string UserWords_Header_Text { get; }
    public static string ReSpellerSettingsSettingDescription { get; }
    public static string ReSpellerUserDictionariesSettingDescription { get; }
    public static string ReSpellerUserDictionarySettingDescription { get; }
    public static string UnderlineTyposInRenameDialogSettingDescription { get; }
    public static string IgnoredWordsSettingDescription { get; }
    public static string WordsSettingDescription { get; }
    public static string GrammarAndSpellingSettings { get; }
    public static string GrammarSettings { get; }
    public static string LanguageDetectionSettings { get; }
    public static string SpellingSettings { get; }
    public static string GrammarCheckingScope { get; }
    public static string SpellCheckingScope { get; }
    public static string General_Header_Text { get; }
    public static string EnableReSpeller_BoolOption_Text { get; }
    public static string ConfigureDictionaries_Text { get; }
    public static string EnableSpellChecking { get; }
    public static string CheckLocals_BoolOption_Text { get; }
    public static string CheckInheritedMembers_BoolOption_Text { get; }
    public static string CheckVerbatimStringsStartingWith_BoolOption_Text { get; }
    public static string CheckNonLocalizableStrings_BoolOption_Text { get; }
    public static string CheckDocCommentsAccordingToVisibility_BoolOption_Text { get; }
    public static string VisibilityOptionsMarkedMembersWillBe_Header_Text { get; }
    public static string Private_BoolOption_Text { get; }
    public static string Public_BoolOption_Text { get; }
    public static string Protected_BoolOption_Text { get; }
    public static string Internal_BoolOption_Text { get; }
    public static string ProtectedInternal_BoolOption_Text { get; }
    public static string TypoIn_RenameTo_Text { get; }
    public static string TypoIn_ReplaceWith_Text { get; }
    public static string GrammarFix_RemoveText { get; }
    public static string TypoInComment__Text { get; }
    public static string TypoInString__Text { get; }
    public static string ConfigureReSpellerDictionaries_Text { get; }
    public static string AddToUserDictionary_Text { get; }
    public static string TypoInMarkupText__Text { get; }
    public static string TypoInMarkupAttributeValue__Text { get; }
    public static string TypoInIdentifier__Text { get; }
    public static string ReSpellerPencilsFilter_Spelling_Text { get; }
    public static string Grazie_Bulbs_IgnorePattern { get; }
    public static string ReSpellerInstalledDictionariesSettingDescription { get; }
    public static string InstalledDictionariesSettingDescription { get; }
    public static string UseBundledDictionarySettingDescription { get; }
    public static string GrammarMistake_Tooltip_Incorrect { get; }
    public static string GrammarMistake_Tooltip_Correct { get; }
    public static string GrammarMistake_Tooltip_PoweredByLanguageTool { get; }
    public static string GrammarMistake_TooltipFormat { get; }
    public static string TypoInCommentConfigurableSeverityDescription { get; }
    public static string TypoInCommentConfigurableSeverityTitle { get; }
    public static string TypoInIdentifierConfigurableSeverityDescription { get; }
    public static string TypoInIdentifierConfigurableSeverityTitle { get; }
    public static string TypoInMarkupAttributeValueConfigurableSeverityDescription { get; }
    public static string TypoInMarkupAttributeValueConfigurableSeverityTitle { get; }
    public static string TypoInMarkupTextConfigurableSeverityDescription { get; }
    public static string TypoInMarkupTextConfigurableSeverityTitle { get; }
    public static string TypoInStringLiteralConfigurableSeverityDescription { get; }
    public static string TypoInStringLiteralConfigurableSeverityTitle { get; }
    public static string SpellingIssues_Text { get; }
    public static string GrammarIssues_Text { get; }
    public static string HighlightingGroup_Common { get; }
    public static string ConfigureRule__Text { get; }
    public static string ShowDisableWarningOptionsPopup { get; }
    public static string DisableOnceWithComment { get; }
    public static string DisableAndRestoreWithComments { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_DocCommentsUseMemberModifiersSettingDescription();
    public static string get_CheckInDocumentation();
    public static string get_CheckInInterpolatedStringLiterals();
    public static string get_CheckInternalMembersSettingDescription();
    public static string get_CheckLocalsLocalVariablesAndParametersSettingDescription();
    public static string get_CheckPrivateMembersSettingDescription();
    public static string get_CheckProtectedInternalMembersSettingDescription();
    public static string get_CheckProtectedMembersSettingDescription();
    public static string get_CheckPublicMembersSettingDescription();
    public static string get_CheckInheritedMembersSettingDescription();
    public static string get_CheckVerbatimStringsStartingWithSettingDescription();
    public static string get_CheckNonLocalizableStringsSettingDescription();
    public static string get_DontCheckInheritedMembersSettingDescription();
    public static string get_DontCheckVerbatimStringsStartingWithSettingDescription();
    public static string get_MinimalWordLengthToCheckSmallerWordsWillBeSkippedSettingDescription();
    public static string get_ReSpellerIsEnabledSettingDescription();
    public static string get_ReSpellerOptionPageTitle();
    public static string get_UserWords_Header_Text();
    public static string get_ReSpellerSettingsSettingDescription();
    public static string get_ReSpellerUserDictionariesSettingDescription();
    public static string get_ReSpellerUserDictionarySettingDescription();
    public static string get_UnderlineTyposInRenameDialogSettingDescription();
    public static string get_IgnoredWordsSettingDescription();
    public static string get_WordsSettingDescription();
    public static string get_GrammarAndSpellingSettings();
    public static string get_GrammarSettings();
    public static string get_LanguageDetectionSettings();
    public static string get_SpellingSettings();
    public static string get_GrammarCheckingScope();
    public static string get_SpellCheckingScope();
    public static string get_General_Header_Text();
    public static string get_EnableReSpeller_BoolOption_Text();
    public static string get_ConfigureDictionaries_Text();
    public static string get_EnableSpellChecking();
    public static string get_CheckLocals_BoolOption_Text();
    public static string get_CheckInheritedMembers_BoolOption_Text();
    public static string get_CheckVerbatimStringsStartingWith_BoolOption_Text();
    public static string get_CheckNonLocalizableStrings_BoolOption_Text();
    public static string get_CheckDocCommentsAccordingToVisibility_BoolOption_Text();
    public static string get_VisibilityOptionsMarkedMembersWillBe_Header_Text();
    public static string get_Private_BoolOption_Text();
    public static string get_Public_BoolOption_Text();
    public static string get_Protected_BoolOption_Text();
    public static string get_Internal_BoolOption_Text();
    public static string get_ProtectedInternal_BoolOption_Text();
    public static string get_TypoIn_RenameTo_Text();
    public static string get_TypoIn_ReplaceWith_Text();
    public static string get_GrammarFix_RemoveText();
    public static string get_TypoInComment__Text();
    public static string get_TypoInString__Text();
    public static string get_ConfigureReSpellerDictionaries_Text();
    public static string get_AddToUserDictionary_Text();
    public static string get_TypoInMarkupText__Text();
    public static string get_TypoInMarkupAttributeValue__Text();
    public static string get_TypoInIdentifier__Text();
    public static string get_ReSpellerPencilsFilter_Spelling_Text();
    public static string get_Grazie_Bulbs_IgnorePattern();
    public static string get_ReSpellerInstalledDictionariesSettingDescription();
    public static string get_InstalledDictionariesSettingDescription();
    public static string get_UseBundledDictionarySettingDescription();
    public static string get_GrammarMistake_Tooltip_Incorrect();
    public static string get_GrammarMistake_Tooltip_Correct();
    public static string get_GrammarMistake_Tooltip_PoweredByLanguageTool();
    public static string get_GrammarMistake_TooltipFormat();
    public static string get_TypoInCommentConfigurableSeverityDescription();
    public static string get_TypoInCommentConfigurableSeverityTitle();
    public static string get_TypoInIdentifierConfigurableSeverityDescription();
    public static string get_TypoInIdentifierConfigurableSeverityTitle();
    public static string get_TypoInMarkupAttributeValueConfigurableSeverityDescription();
    public static string get_TypoInMarkupAttributeValueConfigurableSeverityTitle();
    public static string get_TypoInMarkupTextConfigurableSeverityDescription();
    public static string get_TypoInMarkupTextConfigurableSeverityTitle();
    public static string get_TypoInStringLiteralConfigurableSeverityDescription();
    public static string get_TypoInStringLiteralConfigurableSeverityTitle();
    public static string get_SpellingIssues_Text();
    public static string get_GrammarIssues_Text();
    public static string get_HighlightingGroup_Common();
    public static string get_ConfigureRule__Text();
    public static string get_ShowDisableWarningOptionsPopup();
    public static string get_DisableOnceWithComment();
    public static string get_DisableAndRestoreWithComments();
}
public static class JetBrains.ReSharper.Features.ReSpeller.ReSpellerVsZoneActivatorHelper : object {
    public static bool IsReSpellerAvailable();
}
[SettingsKeyAttribute("System.Reflection.Missing", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "GrammarAndSpellingSettings")]
public class JetBrains.ReSharper.Features.ReSpeller.Settings.GrammarAndSpellingSettings : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "ReSpellerIsEnabledSettingDescription")]
public bool Enabled { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
}
public class JetBrains.ReSharper.Features.ReSpeller.Settings.GrammarAndSpellingSettingsAccessor : object {
    [NotNullAttribute]
public static Expression`1<Func`2<GrammarAndSpellingSettings, bool>> Enabled;
    [NotNullAttribute]
public static Expression`1<Func`2<GrammarCheckingScope, bool>> CheckGrammarInInterpolatedStringLiterals;
    [NotNullAttribute]
public static Expression`1<Func`2<GrammarCheckingScope, bool>> CheckGrammarInDocumentation;
    [NotNullAttribute]
public static Expression`1<Func`2<SpellCheckingScopeSettings, bool>> CheckLocals;
    [NotNullAttribute]
public static Expression`1<Func`2<SpellCheckingScopeSettings, bool>> CheckVerbatimStrings;
    [NotNullAttribute]
public static Expression`1<Func`2<SpellCheckingScopeSettings, bool>> CheckNonLocalizableStrings;
    [NotNullAttribute]
public static Expression`1<Func`2<SpellCheckingScopeSettings, bool>> CheckInheritedMembers;
    [NotNullAttribute]
public static Expression`1<Func`2<SpellCheckingScopeSettings, bool>> DocCommentsUseMemberModifiers;
    [NotNullAttribute]
public static Expression`1<Func`2<SpellCheckingScopeSettings, bool>> CheckPublic;
    [NotNullAttribute]
public static Expression`1<Func`2<SpellCheckingScopeSettings, bool>> CheckProtected;
    [NotNullAttribute]
public static Expression`1<Func`2<SpellCheckingScopeSettings, bool>> CheckPrivate;
    [NotNullAttribute]
public static Expression`1<Func`2<SpellCheckingScopeSettings, bool>> CheckInternal;
    [NotNullAttribute]
public static Expression`1<Func`2<SpellCheckingScopeSettings, bool>> CheckProtectedInternal;
    private static GrammarAndSpellingSettingsAccessor();
}
[SettingsKeyAttribute("JetBrains.ReSharper.Features.ReSpeller.Settings.GrammarCheckingSettings", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "GrammarCheckingScope")]
public class JetBrains.ReSharper.Features.ReSpeller.Settings.GrammarCheckingScope : object {
    [CompilerGeneratedAttribute]
private bool <CheckInInterpolatedStringLiterals>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckInDocumentation>k__BackingField;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "CheckInInterpolatedStringLiterals")]
public bool CheckInInterpolatedStringLiterals { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "CheckInDocumentation")]
public bool CheckInDocumentation { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CheckInInterpolatedStringLiterals();
    [CompilerGeneratedAttribute]
public void set_CheckInInterpolatedStringLiterals(bool value);
    [CompilerGeneratedAttribute]
public bool get_CheckInDocumentation();
    [CompilerGeneratedAttribute]
public void set_CheckInDocumentation(bool value);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.ReSpeller.Settings.GrammarCheckingScopeSettingsWatcher : object {
    public GrammarCheckingScopeSettingsWatcher(Lifetime lifetime, ISolution solution, ISettingsStore settingsStore, ISpellServiceBackendDispatcher spellServiceBackendDispatcher);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Features.ReSpeller.Settings.GrammarAndSpellingSettings", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "GrammarSettings")]
public class JetBrains.ReSharper.Features.ReSpeller.Settings.GrammarCheckingSettings : object {
    [CompilerGeneratedAttribute]
private IIndexedEntry`2<string, GrazieLanguageSettingsState> <LanguagesStates>k__BackingField;
    [CompilerGeneratedAttribute]
private IIndexedEntry`2<string, bool> <RemovedBundledLanguages>k__BackingField;
    [CompilerGeneratedAttribute]
private IIndexedEntry`2<string, GrazieLanguageRuleState> <RulesStates>k__BackingField;
    [CompilerGeneratedAttribute]
private IIndexedEntry`2<string, bool> <Exceptions>k__BackingField;
    [SettingsIndexedEntryAttribute("Languages")]
public IIndexedEntry`2<string, GrazieLanguageSettingsState> LanguagesStates { get; public set; }
    [SettingsIndexedEntryAttribute("RemovedBundledLanguages")]
public IIndexedEntry`2<string, bool> RemovedBundledLanguages { get; public set; }
    [SettingsIndexedEntryAttribute("Rules")]
public IIndexedEntry`2<string, GrazieLanguageRuleState> RulesStates { get; public set; }
    [SettingsIndexedEntryAttribute("Exceptions")]
public IIndexedEntry`2<string, bool> Exceptions { get; public set; }
    [CompilerGeneratedAttribute]
public IIndexedEntry`2<string, GrazieLanguageSettingsState> get_LanguagesStates();
    [CompilerGeneratedAttribute]
public void set_LanguagesStates(IIndexedEntry`2<string, GrazieLanguageSettingsState> value);
    [CompilerGeneratedAttribute]
public IIndexedEntry`2<string, bool> get_RemovedBundledLanguages();
    [CompilerGeneratedAttribute]
public void set_RemovedBundledLanguages(IIndexedEntry`2<string, bool> value);
    [CompilerGeneratedAttribute]
public IIndexedEntry`2<string, GrazieLanguageRuleState> get_RulesStates();
    [CompilerGeneratedAttribute]
public void set_RulesStates(IIndexedEntry`2<string, GrazieLanguageRuleState> value);
    [CompilerGeneratedAttribute]
public IIndexedEntry`2<string, bool> get_Exceptions();
    [CompilerGeneratedAttribute]
public void set_Exceptions(IIndexedEntry`2<string, bool> value);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Features.ReSpeller.Settings.GrammarCheckingSettingsUtil : object {
    [ExtensionAttribute]
public static HashSet`1<string> GetEnabledGrazieLanguages(IContextBoundSettingsStore settingsStore, HashSet`1<string> bundledLanguages);
    [ExtensionAttribute]
public static Dictionary`2<string, GrazieLanguageSettingsState> GetGrazieLanguagesStates(IContextBoundSettingsStore settingsStore, HashSet`1<string> bundledLanguages);
    [ExtensionAttribute]
public static Dictionary`2<string, GrazieLanguageRuleState> GetGrazieLanguageRulesStates(IContextBoundSettingsStore settingsStore);
    [ExtensionAttribute]
public static List`1<string> GetGrazieExceptions(IContextBoundSettingsStore settingsStore);
}
public enum JetBrains.ReSharper.Features.ReSpeller.Settings.GrazieLanguageRuleState : Enum {
    public int value__;
    public static GrazieLanguageRuleState Default;
    public static GrazieLanguageRuleState EnabledByUser;
    public static GrazieLanguageRuleState DisabledByUser;
}
public enum JetBrains.ReSharper.Features.ReSpeller.Settings.GrazieLanguageSettingsState : Enum {
    public int value__;
    public static GrazieLanguageSettingsState Default;
    public static GrazieLanguageSettingsState Enabled;
    public static GrazieLanguageSettingsState Disabled;
}
[SettingsKeyAttribute("System.Reflection.Missing", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "ReSpellerInstalledDictionariesSettingDescription")]
public class JetBrains.ReSharper.Features.ReSpeller.Settings.InstalledDictionariesSettings : object {
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "InstalledDictionariesSettingDescription")]
public IIndexedEntry`2<string, bool> InstalledDictionaries;
    [CompilerGeneratedAttribute]
private bool <UseBundled>k__BackingField;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "UseBundledDictionarySettingDescription")]
public bool UseBundled { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_UseBundled();
    [CompilerGeneratedAttribute]
public void set_UseBundled(bool value);
}
public interface JetBrains.ReSharper.Features.ReSpeller.Settings.ISettingsLayerInfo {
    public string DisplayName { get; }
    public IconId Icon { get; }
    public abstract virtual string get_DisplayName();
    public abstract virtual IconId get_Icon();
}
public interface JetBrains.ReSharper.Features.ReSpeller.Settings.ISettingsLayersProvider {
    public bool NeedDecorateLayerName { get; }
    public abstract virtual IEnumerable`1<ISettingsLayerInfo> GetLayers();
    public abstract virtual bool get_NeedDecorateLayerName();
}
[SettingsKeyAttribute("JetBrains.ReSharper.Features.ReSpeller.Settings.GrammarAndSpellingSettings", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "LanguageDetectionSettings")]
public class JetBrains.ReSharper.Features.ReSpeller.Settings.LanguageDetectionSettings : object {
    [CompilerGeneratedAttribute]
private IIndexedEntry`2<string, bool> <DontSuggestLanguages>k__BackingField;
    [SettingsIndexedEntryAttribute("DontSuggestLanguages")]
public IIndexedEntry`2<string, bool> DontSuggestLanguages { get; public set; }
    [CompilerGeneratedAttribute]
public IIndexedEntry`2<string, bool> get_DontSuggestLanguages();
    [CompilerGeneratedAttribute]
public void set_DontSuggestLanguages(IIndexedEntry`2<string, bool> value);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.ReSpeller.Settings.LegacyReSpellerSettingsWatcher : object {
    public LegacyReSpellerSettingsWatcher(Lifetime lifetime, ISolution solution, ISettingsStore settingsStore, ISpellServiceBackendDispatcher spellServiceBackendDispatcher);
}
public class JetBrains.ReSharper.Features.ReSpeller.Settings.ResharperLayer : object {
    private UserFriendlySettingsLayer myLayer;
    private string myDecorationSuffix;
    public IContextBoundSettingsStore Store { get; }
    public string DisplayName { get; }
    public IconId Icon { get; }
    public ResharperLayer(UserFriendlySettingsLayer layer, bool needDecorateLayerName);
    public IContextBoundSettingsStore get_Store();
    public sealed virtual string get_DisplayName();
    public sealed virtual IconId get_Icon();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.ReSpeller.Settings.ReSharperLayersProvider : object {
    private UserFriendlySettingsLayers myUserFriendlySettingsLayers;
    [CompilerGeneratedAttribute]
private bool <NeedDecorateLayerName>k__BackingField;
    public bool NeedDecorateLayerName { get; }
    public ReSharperLayersProvider(UserFriendlySettingsLayers userFriendlySettingsLayers);
    public virtual IEnumerable`1<ISettingsLayerInfo> GetLayers();
    [CompilerGeneratedAttribute]
public virtual bool get_NeedDecorateLayerName();
    [CompilerGeneratedAttribute]
private ResharperLayer <GetLayers>b__2_2(UserFriendlySettingsLayer layer);
}
[ObsoleteAttribute("The old settings")]
[SettingsKeyAttribute("System.Reflection.Missing", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "ReSpellerSettingsSettingDescription")]
public class JetBrains.ReSharper.Features.ReSpeller.Settings.ReSpellerSettings : object {
    [CompilerGeneratedAttribute]
private int <MinWordLength>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckPrivate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckPublic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckProtected>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckProtectedInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckLocals>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DontCheckInheritedMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DontCheckVerbatimStrings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DocCommentsUseMemberModifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UnderlineTyposInRename>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReSpellerEnabled>k__BackingField;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "MinimalWordLengthToCheckSmallerWordsWillBeSkippedSettingDescription")]
public int MinWordLength { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "CheckPrivateMembersSettingDescription")]
public bool CheckPrivate { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "CheckPublicMembersSettingDescription")]
public bool CheckPublic { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "CheckProtectedMembersSettingDescription")]
public bool CheckProtected { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "CheckInternalMembersSettingDescription")]
public bool CheckInternal { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "CheckProtectedInternalMembersSettingDescription")]
public bool CheckProtectedInternal { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "CheckLocalsLocalVariablesAndParametersSettingDescription")]
public bool CheckLocals { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "DontCheckInheritedMembersSettingDescription")]
public bool DontCheckInheritedMembers { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "DontCheckVerbatimStringsStartingWithSettingDescription")]
public bool DontCheckVerbatimStrings { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "DocCommentsUseMemberModifiersSettingDescription")]
public bool DocCommentsUseMemberModifiers { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "UnderlineTyposInRenameDialogSettingDescription")]
public bool UnderlineTyposInRename { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "ReSpellerIsEnabledSettingDescription")]
public bool ReSpellerEnabled { get; public set; }
    [CompilerGeneratedAttribute]
public int get_MinWordLength();
    [CompilerGeneratedAttribute]
public void set_MinWordLength(int value);
    [CompilerGeneratedAttribute]
public bool get_CheckPrivate();
    [CompilerGeneratedAttribute]
public void set_CheckPrivate(bool value);
    [CompilerGeneratedAttribute]
public bool get_CheckPublic();
    [CompilerGeneratedAttribute]
public void set_CheckPublic(bool value);
    [CompilerGeneratedAttribute]
public bool get_CheckProtected();
    [CompilerGeneratedAttribute]
public void set_CheckProtected(bool value);
    [CompilerGeneratedAttribute]
public bool get_CheckInternal();
    [CompilerGeneratedAttribute]
public void set_CheckInternal(bool value);
    [CompilerGeneratedAttribute]
public bool get_CheckProtectedInternal();
    [CompilerGeneratedAttribute]
public void set_CheckProtectedInternal(bool value);
    [CompilerGeneratedAttribute]
public bool get_CheckLocals();
    [CompilerGeneratedAttribute]
public void set_CheckLocals(bool value);
    [CompilerGeneratedAttribute]
public bool get_DontCheckInheritedMembers();
    [CompilerGeneratedAttribute]
public void set_DontCheckInheritedMembers(bool value);
    [CompilerGeneratedAttribute]
public bool get_DontCheckVerbatimStrings();
    [CompilerGeneratedAttribute]
public void set_DontCheckVerbatimStrings(bool value);
    [CompilerGeneratedAttribute]
public bool get_DocCommentsUseMemberModifiers();
    [CompilerGeneratedAttribute]
public void set_DocCommentsUseMemberModifiers(bool value);
    [CompilerGeneratedAttribute]
public bool get_UnderlineTyposInRename();
    [CompilerGeneratedAttribute]
public void set_UnderlineTyposInRename(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReSpellerEnabled();
    [CompilerGeneratedAttribute]
public void set_ReSpellerEnabled(bool value);
}
[MigrateSettingsAttribute]
public class JetBrains.ReSharper.Features.ReSpeller.Settings.ReSpellerSettingsMigration : object {
    public sealed virtual IEnumerable`1<SettingsEntry> GetEntriesToMigrate(ISettingsSchema schema);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.ReSpeller.Settings.ReSpellerSettingsMigration/<GetKeysToMigrate>d__1")]
public sealed virtual IEnumerable`1<SettingsKey> GetKeysToMigrate(ISettingsSchema schema);
    public sealed virtual void Migrate(IContextBoundSettingsStoreImplementation store);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Features.ReSpeller.Settings.ReSpellerSettingsUpgradeDescription : object {
    [CompilerGeneratedAttribute]
private ICollectionEvents`1<ScalarSettingDescription> <Items>k__BackingField;
    public ICollectionEvents`1<ScalarSettingDescription> Items { get; }
    public ReSpellerSettingsUpgradeDescription(ISettingsSchema schema);
    [CompilerGeneratedAttribute]
public sealed virtual ICollectionEvents`1<ScalarSettingDescription> get_Items();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.ReSpeller.Settings.ReSpellerSettingsWatcher : object {
    public ReSpellerSettingsWatcher(Lifetime lifetime, ISolution solution, ISettingsStore settingsStore, ISpellServiceBackendDispatcher spellServiceBackendDispatcher);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Features.ReSpeller.Settings.SpellCheckingSettings", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "SpellCheckingScope")]
public class JetBrains.ReSharper.Features.ReSpeller.Settings.SpellCheckingScopeSettings : object {
    [CompilerGeneratedAttribute]
private bool <CheckPrivate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckPublic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckProtected>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckProtectedInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckLocals>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckInheritedMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckVerbatimStrings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckNonLocalizableStrings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DocCommentsUseMemberModifiers>k__BackingField;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "CheckPrivateMembersSettingDescription")]
public bool CheckPrivate { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "CheckPublicMembersSettingDescription")]
public bool CheckPublic { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "CheckProtectedMembersSettingDescription")]
public bool CheckProtected { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "CheckInternalMembersSettingDescription")]
public bool CheckInternal { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "CheckProtectedInternalMembersSettingDescription")]
public bool CheckProtectedInternal { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "CheckLocalsLocalVariablesAndParametersSettingDescription")]
public bool CheckLocals { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "CheckInheritedMembersSettingDescription")]
public bool CheckInheritedMembers { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "CheckVerbatimStringsStartingWithSettingDescription")]
public bool CheckVerbatimStrings { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "CheckNonLocalizableStringsSettingDescription")]
public bool CheckNonLocalizableStrings { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "DocCommentsUseMemberModifiersSettingDescription")]
public bool DocCommentsUseMemberModifiers { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CheckPrivate();
    [CompilerGeneratedAttribute]
public void set_CheckPrivate(bool value);
    [CompilerGeneratedAttribute]
public bool get_CheckPublic();
    [CompilerGeneratedAttribute]
public void set_CheckPublic(bool value);
    [CompilerGeneratedAttribute]
public bool get_CheckProtected();
    [CompilerGeneratedAttribute]
public void set_CheckProtected(bool value);
    [CompilerGeneratedAttribute]
public bool get_CheckInternal();
    [CompilerGeneratedAttribute]
public void set_CheckInternal(bool value);
    [CompilerGeneratedAttribute]
public bool get_CheckProtectedInternal();
    [CompilerGeneratedAttribute]
public void set_CheckProtectedInternal(bool value);
    [CompilerGeneratedAttribute]
public bool get_CheckLocals();
    [CompilerGeneratedAttribute]
public void set_CheckLocals(bool value);
    [CompilerGeneratedAttribute]
public bool get_CheckInheritedMembers();
    [CompilerGeneratedAttribute]
public void set_CheckInheritedMembers(bool value);
    [CompilerGeneratedAttribute]
public bool get_CheckVerbatimStrings();
    [CompilerGeneratedAttribute]
public void set_CheckVerbatimStrings(bool value);
    [CompilerGeneratedAttribute]
public bool get_CheckNonLocalizableStrings();
    [CompilerGeneratedAttribute]
public void set_CheckNonLocalizableStrings(bool value);
    [CompilerGeneratedAttribute]
public bool get_DocCommentsUseMemberModifiers();
    [CompilerGeneratedAttribute]
public void set_DocCommentsUseMemberModifiers(bool value);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Features.ReSpeller.Settings.GrammarAndSpellingSettings", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "SpellingSettings")]
public class JetBrains.ReSharper.Features.ReSpeller.Settings.SpellCheckingSettings : object {
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Features.ReSpeller.Settings.SpellCheckingSettingsUtil : object {
    [ExtensionAttribute]
public static HashSet`1<string> GetIgnoredWords(IContextBoundSettingsStore settingsStore);
    [ExtensionAttribute]
public static void AddIgnoredWord(IContextBoundSettingsStore settingsStore, string word);
    [ExtensionAttribute]
public static void RemoveIgnoredWord(IContextBoundSettingsStore settingsStore, string word);
    [ExtensionAttribute]
public static void SetIgnoredWords(IContextBoundSettingsStore settingsStore, HashSet`1<string> newWords);
    [ExtensionAttribute]
public static IEnumerable`1<Pair`2<string, bool>> GetHunspellDictionaries(IContextBoundSettingsStore store);
    [ExtensionAttribute]
public static List`1<string> GetEnabledHunspellDictionaries(IContextBoundSettingsStore store);
}
[ObsoleteAttribute("The old settings")]
[SettingsIndexedKeyAttribute("JetBrains.ReSharper.Features.ReSpeller.Settings.ReSpellerSettings", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "ReSpellerUserDictionariesSettingDescription", "System.String")]
public class JetBrains.ReSharper.Features.ReSpeller.Settings.UserDictionariesSettings : object {
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "WordsSettingDescription")]
public IIndexedEntry`2<string, bool> Words;
}
[SettingsKeyAttribute("System.Reflection.Missing", "JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "ReSpellerUserDictionarySettingDescription")]
public class JetBrains.ReSharper.Features.ReSpeller.Settings.UserDictionarySettings : object {
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Features.ReSpeller.Resources.Strings", "WordsSettingDescription")]
public IIndexedEntry`2<string, bool> Words;
}
public class JetBrains.ReSharper.Features.ReSpeller.SpellEngine.Constants : object {
    public static string DictExt;
    public static string SourceDictSubDir;
    public static string UserDictSubDir;
    public static string HunspellAffixExt;
    public static string HunspellDictExt;
    public static string CustomDictSuffix;
    public static FileSystemPath PluginPath;
    public static FileSystemPath SourceDictDir;
    public static FileSystemPath UserDictDir;
    private static Constants();
}
internal static class JetBrains.ReSharper.Features.ReSpeller.SpellEngine.ConstantsPro : object {
    private static string ReSpellerAppDataDirName;
    public static string ReSpellerAppDataDir;
    public static string LicenseFile;
    public static string UserDictDirName;
    public static string MainDictSubDir;
    public static string UserDictDirPro;
    public static string MainDictDirPro;
    private static ConstantsPro();
}
public class JetBrains.ReSharper.Features.ReSpeller.SpellEngine.Dictionaries.AggregatedDictionaryEngine : object {
    private IList`1<IDictionaryEngine> myEngines;
    private Func`2<Lifetime, IModifiableDictionaryEngine> myMixingEngineFactory;
    public AggregatedDictionaryEngine(IList`1<IDictionaryEngine> dictionaryEngines, Func`2<Lifetime, IModifiableDictionaryEngine> mixingEngineFactory);
    public sealed virtual bool IsCorrect(string word);
    public sealed virtual IReadOnlyCollection`1<string> Suggest(string word);
}
public class JetBrains.ReSharper.Features.ReSpeller.SpellEngine.Dictionaries.DictionaryEngineOnSource : object {
    private IModifiableDictionaryEngine myDictionaryEngine;
    public DictionaryEngineOnSource(IModifiableDictionaryEngine dictionaryEngine, IDictionarySource dictionarySource, ISignal`1<bool> changedSink, Lifetime lifetime);
    public sealed virtual bool IsCorrect(string word);
    public sealed virtual IReadOnlyCollection`1<string> Suggest(string word);
}
public interface JetBrains.ReSharper.Features.ReSpeller.SpellEngine.Dictionaries.IDictionaryEngine {
    public abstract virtual bool IsCorrect(string word);
    public abstract virtual IReadOnlyCollection`1<string> Suggest(string word);
}
public interface JetBrains.ReSharper.Features.ReSpeller.SpellEngine.Dictionaries.IModifiableDictionaryEngine {
    public abstract virtual void Add(string word);
    public abstract virtual void Remove(string word);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Features.ReSpeller.SpellEngine.Dictionaries.IModifiableDictionaryEngineEx : object {
    [ExtensionAttribute]
public static void AddRange(IModifiableDictionaryEngine engine, IEnumerable`1<string> words);
}
public interface JetBrains.ReSharper.Features.ReSpeller.SpellEngine.IPhraseSpellerBackend {
    [CanBeNullAttribute]
public abstract virtual Dictionary`2<PhraseWithDomain, IReadOnlyCollection`1<SpellCheckingResultItem>> QueryCheckPhrases(Lifetime lifetime, List`1<PhraseWithDomain> phrases);
    [CanBeNullAttribute]
public abstract virtual IReadOnlyCollection`1<DetectedLanguage> QueryDetectLanguages(Lifetime lifetime, List`1<PhraseWithDomain> phrases);
}
public interface JetBrains.ReSharper.Features.ReSpeller.SpellEngine.IPhraseSpellService {
    [CanBeNullAttribute]
public abstract virtual IReadOnlyCollection`1<DetectedLanguage> DetectLanguages(Lifetime lifetime, List`1<PhraseWithDomain> phrases);
    [CanBeNullAttribute]
public abstract virtual Dictionary`2<PhraseWithDomain, IReadOnlyCollection`1<SpellCheckingResultItem>> CheckPhrases(Lifetime lifetime, List`1<PhraseWithDomain> phrases);
}
public interface JetBrains.ReSharper.Features.ReSpeller.SpellEngine.ISpellService {
    [CanBeNullAttribute]
public abstract virtual IReadOnlyCollection`1<string> GetWordSuggestions(string word);
    [CanBeNullAttribute]
public abstract virtual Dictionary`2<string, bool> CheckWords(Lifetime lifetime, List`1<string> words);
    public abstract virtual void ResetCache();
}
public interface JetBrains.ReSharper.Features.ReSpeller.SpellEngine.IWordSpellerBackend {
    [CanBeNullAttribute]
public abstract virtual IReadOnlyCollection`1<string> QueryWordSuggestions(string word);
    [CanBeNullAttribute]
public abstract virtual Dictionary`2<string, bool> QueryIsCorrect(Lifetime lifetime, List`1<string> words);
}
public static class JetBrains.ReSharper.Features.ReSpeller.SpellEngine.NamingStyleConverter : object {
    public static string Convert(string word, string pattern);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Features.ReSpeller.SpellEngine.Sources.AbbreviationsDictionarySource : DictionarySourceOnSettings {
    private IEnumerable`1<IAbbreviationSettingsReader> mySettingsReaders;
    public AbbreviationsDictionarySource(Lifetime lifetime, ISettingsStore settingsStore, IEnumerable`1<IAbbreviationSettingsReader> settingsReaders, ILogger logger, IThreading threading);
    protected virtual HashSet`1<string> GetCurrentContent(IContextBoundSettingsStore settingsStore);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Features.ReSpeller.SpellEngine.Sources.CSharp.CSharpAbbreviationSettingsReader : object {
    public sealed virtual ISet`1<string> ReadAbbreviations(IContextBoundSettingsStoreLive storeLive);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.ReSpeller.SpellEngine.Sources.CSharp.ZoneMarker : object {
}
public abstract class JetBrains.ReSharper.Features.ReSpeller.SpellEngine.Sources.DictionarySourceBase : object {
    [CompilerGeneratedAttribute]
private ViewableSet`1<string> <Content>k__BackingField;
    private IViewableSet`1<string> JetBrains.ReSharper.Features.ReSpeller.SpellEngine.Sources.IDictionarySource.Content { get; }
    protected ViewableSet`1<string> Content { get; }
    private sealed virtual override IViewableSet`1<string> JetBrains.ReSharper.Features.ReSpeller.SpellEngine.Sources.IDictionarySource.get_Content();
    [CompilerGeneratedAttribute]
protected ViewableSet`1<string> get_Content();
}
public abstract class JetBrains.ReSharper.Features.ReSpeller.SpellEngine.Sources.DictionarySourceOnSettings : DictionarySourceBase {
    [CompilerGeneratedAttribute]
private IContextBoundSettingsStoreLive <SettingsStoreLive>k__BackingField;
    [CompilerGeneratedAttribute]
private IThreading <Threading>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    protected IContextBoundSettingsStoreLive SettingsStoreLive { get; }
    protected IThreading Threading { get; }
    protected ILogger Logger { get; }
    protected DictionarySourceOnSettings(Lifetime lifetime, ILogger logger, ISettingsStore settingsStore, IThreading threading);
    [CompilerGeneratedAttribute]
protected IContextBoundSettingsStoreLive get_SettingsStoreLive();
    [CompilerGeneratedAttribute]
protected IThreading get_Threading();
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    protected void Init();
    private void ReplaceContent(IContextBoundSettingsStore settingsStore);
    protected abstract virtual HashSet`1<string> GetCurrentContent(IContextBoundSettingsStore settingsStore);
}
public interface JetBrains.ReSharper.Features.ReSpeller.SpellEngine.Sources.IAbbreviationSettingsReader {
    public abstract virtual ISet`1<string> ReadAbbreviations(IContextBoundSettingsStoreLive storeLive);
}
public interface JetBrains.ReSharper.Features.ReSpeller.SpellEngine.Sources.IDictionarySource {
    public IViewableSet`1<string> Content { get; }
    public abstract virtual IViewableSet`1<string> get_Content();
}
public interface JetBrains.ReSharper.Features.ReSpeller.SpellEngine.Sources.IUserModifiableDictionarySource {
    public abstract virtual void AddWord(string word, ISettingsLayerInfo layer);
    public abstract virtual void RemoveWord(string word, ISettingsLayerInfo layer);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Features.ReSpeller.SpellEngine.Sources.SettingsUtil : object {
    [ExtensionAttribute]
public static HashSet`1<string> ReadIndexedValues(IContextBoundSettingsStoreLive storeLive, Expression`1<Func`2<TKey, IIndexedEntry`2<string, string>>> reader);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Features.ReSpeller.SpellEngine.Sources.UserModifiableDictionarySource : DictionarySourceOnSettings {
    public UserModifiableDictionarySource(Lifetime lifetime, ILogger logger, ISettingsStore settingsStore, IThreading threading);
    public virtual void AddWord(string word, ISettingsLayerInfo layer);
    public virtual void RemoveWord(string word, ISettingsLayerInfo layer);
    protected sealed virtual HashSet`1<string> GetCurrentContent(IContextBoundSettingsStore settingsStore);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Features.ReSpeller.SpellEngine.Sources.VB.VBAbbreviationsSettingsReader : object {
    public sealed virtual ISet`1<string> ReadAbbreviations(IContextBoundSettingsStoreLive storeLive);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.ReSpeller.SpellEngine.Sources.VB.ZoneMarker : object {
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.ReSpeller.SpellEngine.SpellBackend.DaemonResetManager : object {
    public DaemonResetManager(Lifetime lifetime, ISpellServiceBackendDispatcher spellServiceBackendDispatcher, IDaemon daemon, IShellLocks shellLocks);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Features.ReSpeller.SpellEngine.SpellBackend.DummySpellServiceBackendProvider : object {
    [CompilerGeneratedAttribute]
private ISpellService <SpellService>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <ResetCacheSignal>k__BackingField;
    public ISpellService SpellService { get; }
    public ISimpleSignal ResetCacheSignal { get; }
    [CompilerGeneratedAttribute]
public sealed virtual ISpellService get_SpellService();
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_ResetCacheSignal();
    public sealed virtual void ResetCache(string reason);
}
public interface JetBrains.ReSharper.Features.ReSpeller.SpellEngine.SpellBackend.ISpellServiceBackend {
    public ISimpleSignal EngineUpdated { get; }
    public ISpellService SpellService { get; }
    public abstract virtual ISimpleSignal get_EngineUpdated();
    public abstract virtual ISpellService get_SpellService();
}
public interface JetBrains.ReSharper.Features.ReSpeller.SpellEngine.SpellBackend.ISpellServiceBackendDispatcher {
    public ISpellService SpellService { get; }
    public ISimpleSignal ResetCacheSignal { get; }
    public abstract virtual ISpellService get_SpellService();
    public abstract virtual ISimpleSignal get_ResetCacheSignal();
    public abstract virtual void ResetCache(string reason);
}
public interface JetBrains.ReSharper.Features.ReSpeller.SpellEngine.SpellBackend.ISpellServiceBackendProvider {
    public ISpellService SpellService { get; }
    public ISimpleSignal ResetCacheSignal { get; }
    public abstract virtual ISpellService get_SpellService();
    public abstract virtual ISimpleSignal get_ResetCacheSignal();
    public abstract virtual void ResetCache(string reason);
}
public class JetBrains.ReSharper.Features.ReSpeller.SpellEngine.SpellBackend.KnownBackends.CachedServices.PhraseSpellCachedService : WordSpellCachedService {
    private IPhraseSpellerBackend myBackService;
    private ConcurrentDictionary`2<PhraseWithDomain, IReadOnlyCollection`1<SpellCheckingResultItem>> myResultsCache;
    public PhraseSpellCachedService(IPhraseSpellerBackend backService);
    public sealed virtual IReadOnlyCollection`1<DetectedLanguage> DetectLanguages(Lifetime lifetime, List`1<PhraseWithDomain> phrases);
    public sealed virtual Dictionary`2<PhraseWithDomain, IReadOnlyCollection`1<SpellCheckingResultItem>> CheckPhrases(Lifetime lifetime, List`1<PhraseWithDomain> phrases);
    private sealed virtual override void JetBrains.ReSharper.Features.ReSpeller.SpellEngine.ISpellService.ResetCache();
}
public class JetBrains.ReSharper.Features.ReSpeller.SpellEngine.SpellBackend.KnownBackends.CachedServices.SuggestionsCachedService : object {
    private ConcurrentDictionary`2<string, IReadOnlyCollection`1<string>> mySuggestionsCache;
    private Func`2<string, IReadOnlyCollection`1<string>> myRequestFunc;
    public SuggestionsCachedService(Func`2<string, IReadOnlyCollection`1<string>> requestFunction);
    public IReadOnlyCollection`1<string> Suggestions(string word);
    public void ResetCache();
}
public class JetBrains.ReSharper.Features.ReSpeller.SpellEngine.SpellBackend.KnownBackends.CachedServices.WordSpellCachedService : object {
    private IWordSpellerBackend myBackService;
    private SuggestionsCachedService mySuggestionsCachedService;
    private ConcurrentDictionary`2<string, bool> myWordsCache;
    private static int MIN_WORD_LENGTH;
    public WordSpellCachedService(IWordSpellerBackend backService);
    public sealed virtual IReadOnlyCollection`1<string> GetWordSuggestions(string word);
    public sealed virtual Dictionary`2<string, bool> CheckWords(Lifetime lifetime, List`1<string> words);
    public sealed virtual void ResetCache();
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <.ctor>b__2_0(string word);
}
public class JetBrains.ReSharper.Features.ReSpeller.SpellEngine.SpellBackend.KnownBackends.GrazieSpellerBackend : object {
    [CompilerGeneratedAttribute]
private List`1<IDictionarySource> <userDictionarySources>P;
    [CompilerGeneratedAttribute]
private IGrazieRequestExecutor <RequestExecutor>k__BackingField;
    private IGrazieRequestExecutor RequestExecutor { get; public set; }
    public GrazieSpellerBackend(List`1<IDictionarySource> userDictionarySources);
    [CompilerGeneratedAttribute]
private IGrazieRequestExecutor get_RequestExecutor();
    [CompilerGeneratedAttribute]
public void set_RequestExecutor(IGrazieRequestExecutor value);
    public sealed virtual Dictionary`2<PhraseWithDomain, IReadOnlyCollection`1<SpellCheckingResultItem>> QueryCheckPhrases(Lifetime lifetime, List`1<PhraseWithDomain> phrases);
    public sealed virtual IReadOnlyCollection`1<DetectedLanguage> QueryDetectLanguages(Lifetime lifetime, List`1<PhraseWithDomain> phrases);
    public sealed virtual IReadOnlyCollection`1<string> QueryWordSuggestions(string word);
    public sealed virtual Dictionary`2<string, bool> QueryIsCorrect(Lifetime lifetime, List`1<string> words);
}
public interface JetBrains.ReSharper.Features.ReSpeller.SpellEngine.SpellBackend.KnownBackends.IGrazieRequestExecutor {
    [CanBeNullAttribute]
public abstract virtual List`1<List`1<SpellCheckingResultItem>> CheckPhrases(Lifetime lifetime, List`1<PhraseWithDomain> phrases);
    [CanBeNullAttribute]
public abstract virtual Dictionary`2<string, bool> CheckWords(Lifetime lifetime, List`1<string> words);
    [CanBeNullAttribute]
public abstract virtual List`1<string> GetWordSuggestions(Lifetime lifetime, string word);
    [CanBeNullAttribute]
public abstract virtual List`1<DetectedLanguage> DetectLanguages(Lifetime lifetime, List`1<PhraseWithDomain> phrases);
}
public abstract class JetBrains.ReSharper.Features.ReSpeller.SpellEngine.SpellBackend.SpellServiceBackendBase : object {
    [CompilerGeneratedAttribute]
private ISimpleSignal <EngineUpdated>k__BackingField;
    public ISimpleSignal EngineUpdated { get; }
    public ISpellService SpellService { get; }
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_EngineUpdated();
    public abstract virtual ISpellService get_SpellService();
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Features.ReSpeller.SpellEngine.SpellBackend.SpellServiceBackendDispatcher : object {
    private ISpellServiceBackendProvider myBackendProvider;
    public ISpellService SpellService { get; }
    public ISimpleSignal ResetCacheSignal { get; }
    public SpellServiceBackendDispatcher(IEnumerable`1<ISpellServiceBackendProvider> availableProviders);
    public sealed virtual ISpellService get_SpellService();
    public sealed virtual ISimpleSignal get_ResetCacheSignal();
    public sealed virtual void ResetCache(string reason);
}
public abstract class JetBrains.ReSharper.Features.ReSpeller.SpellEngine.SpellBackend.SpellServiceBackendProviderBase : object {
    private GroupingEvent myResetCacheGroupingEvent;
    [CompilerGeneratedAttribute]
private ISimpleSignal <ResetCacheSignal>k__BackingField;
    protected ILogger Logger { get; }
    public ISpellService SpellService { get; }
    public ISimpleSignal ResetCacheSignal { get; }
    protected SpellServiceBackendProviderBase(Lifetime lifetime, IShellLocks shellLocks, SynchronizationPoints synchronizationPoints);
    protected abstract virtual ILogger get_Logger();
    public abstract virtual ISpellService get_SpellService();
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_ResetCacheSignal();
    public sealed virtual void ResetCache(string reason);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Features.ReSpeller.SpellEngine.SpellServiceExtensions : object {
    [ExtensionAttribute]
public static bool IsCorrect(ISpellService spellService, string word);
}
public interface JetBrains.ReSharper.Features.ReSpeller.SpellEngine.Suggestions.ISuggestMixer {
    public abstract virtual void AddWords(List`1<string> words);
    public abstract virtual List`1<string> Suggest(string word);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Features.ReSpeller.SpellEngine.Suggestions.SuggestionExtensions : object {
    private static ReadOnlyCollection`1<string> ourEmptyCollection;
    private static SuggestionExtensions();
    [ExtensionAttribute]
public static IReadOnlyCollection`1<string> GenerateForWord(ISpellService spellService, string word);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.ReSpeller.SpellEngine.Suggestions.SuggestionExtensions/<ExceptDoublingSuggestions>d__2")]
[ExtensionAttribute]
public static IEnumerable`1<string> ExceptDoublingSuggestions(IEnumerable`1<string> inputSequence);
    [ExtensionAttribute]
public static IReadOnlyCollection`1<string> Generate(ISpellService spellService, List`1<TextPart> innerNameParts, string prefix, string suffix);
    private static List`1<TextWeight> GenerateMixes(List`1<List`1<TextWeight>> variants, int columnIndex);
    private static IReadOnlyCollection`1<string> DoGenerate(ISpellService spellService, List`1<TextPart> parts);
}
public class JetBrains.ReSharper.Features.ReSpeller.SpellEngine.TextPart : object {
    [CompilerGeneratedAttribute]
private int <End>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private TextPartType <Type>k__BackingField;
    public int End { get; }
    public int Start { get; }
    public string Text { get; }
    public TextPartType Type { get; }
    public TextPart(string text, TextPartType type, int start, int end);
    [PureAttribute]
public TextPart ShiftLeft(int offset);
    [CompilerGeneratedAttribute]
public int get_End();
    [CompilerGeneratedAttribute]
public int get_Start();
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public TextPartType get_Type();
    public bool Equals(TextPart other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public enum JetBrains.ReSharper.Features.ReSpeller.SpellEngine.TextPartType : Enum {
    public int value__;
    public static TextPartType Word;
    public static TextPartType NotAWord;
}
public static class JetBrains.ReSharper.Features.ReSpeller.SpellEngine.TextSplitter : object {
    private static ILogger ourLog;
    public static string LinksRegexString;
    public static string GuidRegexString;
    public static string Base64RegexString;
    public static string ColorRegexString;
    public static string XmlEscapeSequencesRegexString;
    public static string HexRegexString;
    public static Regex MainRegex;
    private static TextSplitter();
    public static List`1<TextPart> SplitToWords(string text);
    public static List`1<TextPart> SplitIntoWordsExcludingMatch(string text, Regex regexForExclusion);
    public static List`1<TextPart> SplitExcludingMatch(string text, Regex regexForExclusion);
    public static bool IsSupportedLetter(char c);
    public static List`1<TextPart> Split(string text);
}
public class JetBrains.ReSharper.Features.ReSpeller.Util.FiniteStateMachine.FiniteStateMachine`2 : object {
    private bool myIsInTransaction;
    private Queue`1<TEvents> myEventsQueue;
    private TStates myCurrentState;
    [NotNullAttribute]
private Dictionary`2<TStates, Action> myOnEnterActionsByStates;
    [NotNullAttribute]
private Dictionary`2<TStates, Action> myOnExitActionsByStates;
    private Dictionary`2<TStates, StateOutgoingTransfersDefinition<TStates, TEvents>> myStateMachineDefinition;
    private FiniteStateMachine`2(TStates initialState, Dictionary`2<TStates, Action> onEnterActionsByStates, Dictionary`2<TStates, Action> onExitActionsByStates);
    public void StartAndTrigger();
    private void OnEnter();
    private void OnExit();
    public void Fire(TEvents newEvent);
    private void SwitchByTransfer(TransferDefinition<TStates, TEvents> transferDefinition);
    public void TriggerCurrentState();
}
public class JetBrains.ReSharper.Features.ReSpeller.Util.FiniteStateMachine.StateMachineConstructionException : Exception {
    public StateMachineConstructionException(string reason);
}
public class JetBrains.ReSharper.Features.ReSpeller.Util.FiniteStateMachine.StateMachineLogger`1 : object {
    private List`1<LogItem<TStates>> myTransferQueue;
    public void Log(TStates from, TStates to);
    public string GetLog();
    public void RegisterAction(string msg);
}
public class JetBrains.ReSharper.Features.ReSpeller.Util.FiniteStateMachine.StateMachineRuntimeException : Exception {
    public StateMachineRuntimeException(string reason);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.ReSpeller.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
