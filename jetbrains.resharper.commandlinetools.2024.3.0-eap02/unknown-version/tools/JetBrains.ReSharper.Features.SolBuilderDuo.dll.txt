public class JetBrains.ReSharper.Features.SolBuilderDuo.BuildScript.RequestPlatformCleanCompile : object {
    [BuildStepAttribute]
public static ValidateCleanCompilation Yield();
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.ConsoleRunner.Models.MsBuildEventNotification : object {
    [CompilerGeneratedAttribute]
private long <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private MsBuildEventNotificationKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinesCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    public static CtxReadDelegate`1<MsBuildEventNotification> Read;
    public static CtxReadDelegate`1<Nullable`1<int>> ReadIntNullable;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxWriteDelegate`1<MsBuildEventNotification> Write;
    public static CtxWriteDelegate`1<Nullable`1<int>> WriteIntNullable;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    public long Offset { get; private set; }
    [CanBeNullAttribute]
public Nullable`1<int> ProjectId { get; private set; }
    public MsBuildEventNotificationKind Kind { get; private set; }
    public int LinesCount { get; private set; }
    [CanBeNullAttribute]
public string TargetFramework { get; private set; }
    public MsBuildEventNotification(long offset, Nullable`1<int> projectId, MsBuildEventNotificationKind kind, int linesCount, string targetFramework);
    private static MsBuildEventNotification();
    [CompilerGeneratedAttribute]
public long get_Offset();
    [CompilerGeneratedAttribute]
private void set_Offset(long value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ProjectId();
    [CompilerGeneratedAttribute]
private void set_ProjectId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public MsBuildEventNotificationKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(MsBuildEventNotificationKind value);
    [CompilerGeneratedAttribute]
public int get_LinesCount();
    [CompilerGeneratedAttribute]
private void set_LinesCount(int value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
private void set_TargetFramework(string value);
    public void Deconstruct(Int64& offset, Nullable`1& projectId, MsBuildEventNotificationKind& kind, Int32& linesCount, String& targetFramework);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MsBuildEventNotification other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public enum JetBrains.ReSharper.Features.SolBuilderDuo.ConsoleRunner.Models.MsBuildEventNotificationKind : Enum {
    public int value__;
    public static MsBuildEventNotificationKind Error;
    public static MsBuildEventNotificationKind Warning;
    public static MsBuildEventNotificationKind Reference;
    public static MsBuildEventNotificationKind Info;
    public static MsBuildEventNotificationKind Message;
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.ConsoleRunner.Models.MsBuildExeBuildEvent : object {
    [CompilerGeneratedAttribute]
private MsBuildExeEventKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Column>k__BackingField;
    public static CtxReadDelegate`1<MsBuildExeBuildEvent> Read;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxReadDelegate`1<Nullable`1<int>> ReadIntNullable;
    public static CtxWriteDelegate`1<MsBuildExeBuildEvent> Write;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    public static CtxWriteDelegate`1<Nullable`1<int>> WriteIntNullable;
    public MsBuildExeEventKind Kind { get; private set; }
    [CanBeNullAttribute]
public string Message { get; private set; }
    [CanBeNullAttribute]
public string Code { get; private set; }
    [CanBeNullAttribute]
public string ProjectPath { get; private set; }
    [CanBeNullAttribute]
public string FilePath { get; private set; }
    [CanBeNullAttribute]
public Nullable`1<int> Line { get; private set; }
    [CanBeNullAttribute]
public Nullable`1<int> Column { get; private set; }
    public MsBuildExeBuildEvent(MsBuildExeEventKind kind, string message, string code, string projectPath, string filePath, Nullable`1<int> line, Nullable`1<int> column);
    private static MsBuildExeBuildEvent();
    [CompilerGeneratedAttribute]
public MsBuildExeEventKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(MsBuildExeEventKind value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
private void set_Code(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectPath();
    [CompilerGeneratedAttribute]
private void set_ProjectPath(string value);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
private void set_FilePath(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Line();
    [CompilerGeneratedAttribute]
private void set_Line(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Column();
    [CompilerGeneratedAttribute]
private void set_Column(Nullable`1<int> value);
    public void Deconstruct(MsBuildExeEventKind& kind, String& message, String& code, String& projectPath, String& filePath, Nullable`1& line, Nullable`1& column);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MsBuildExeBuildEvent other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.ConsoleRunner.Models.MsBuildExeBuildModelInitialized : RdBindableBase {
    [NotNullAttribute]
private RdProperty`1<MsBuildExeBuildModelWithParameters> _BuildModelWithParameters;
    [NotNullAttribute]
private RdSignal`1<MsBuildExeLogEntry> _Log;
    public static CtxReadDelegate`1<MsBuildExeBuildModelInitialized> Read;
    public static CtxWriteDelegate`1<MsBuildExeBuildModelInitialized> Write;
    [NotNullAttribute]
public IViewableProperty`1<MsBuildExeBuildModelWithParameters> BuildModelWithParameters { get; }
    [NotNullAttribute]
public ISource`1<MsBuildExeLogEntry> Log { get; }
    private MsBuildExeBuildModelInitialized(RdProperty`1<MsBuildExeBuildModelWithParameters> buildModelWithParameters, RdSignal`1<MsBuildExeLogEntry> log);
    private static MsBuildExeBuildModelInitialized();
    public IViewableProperty`1<MsBuildExeBuildModelWithParameters> get_BuildModelWithParameters();
    public ISource`1<MsBuildExeLogEntry> get_Log();
    public virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.ConsoleRunner.Models.MsBuildExeBuildModelWithParameters : RdBindableBase {
    [CompilerGeneratedAttribute]
private bool <IsMsBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <LoadedProjectPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StoragePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SaverAppendMode>k__BackingField;
    [NotNullAttribute]
private RdSignal`1<MsBuildEventNotification> _Notifications;
    [NotNullAttribute]
private RdSignal`1<MsBuildExeBuildResult> _BuildDone;
    [NotNullAttribute]
private RdSignal`1<string> _ProjectFinished;
    [NotNullAttribute]
private RdSignal`1<string> _ProjectStarted;
    public static CtxReadDelegate`1<MsBuildExeBuildModelWithParameters> Read;
    public static CtxReadDelegate`1<List`1<string>> ReadStringList;
    public static CtxWriteDelegate`1<MsBuildExeBuildModelWithParameters> Write;
    public static CtxWriteDelegate`1<List`1<string>> WriteStringList;
    public bool IsMsBuild { get; private set; }
    [NotNullAttribute]
public List`1<string> LoadedProjectPaths { get; private set; }
    [NotNullAttribute]
public string StoragePath { get; private set; }
    public bool SaverAppendMode { get; private set; }
    [NotNullAttribute]
public ISource`1<MsBuildEventNotification> Notifications { get; }
    [NotNullAttribute]
public ISource`1<MsBuildExeBuildResult> BuildDone { get; }
    [NotNullAttribute]
public ISource`1<string> ProjectFinished { get; }
    [NotNullAttribute]
public ISource`1<string> ProjectStarted { get; }
    private MsBuildExeBuildModelWithParameters(bool isMsBuild, List`1<string> loadedProjectPaths, string storagePath, bool saverAppendMode, RdSignal`1<MsBuildEventNotification> notifications, RdSignal`1<MsBuildExeBuildResult> buildDone, RdSignal`1<string> projectFinished, RdSignal`1<string> projectStarted);
    public MsBuildExeBuildModelWithParameters(bool isMsBuild, List`1<string> loadedProjectPaths, string storagePath, bool saverAppendMode);
    private static MsBuildExeBuildModelWithParameters();
    [CompilerGeneratedAttribute]
public bool get_IsMsBuild();
    [CompilerGeneratedAttribute]
private void set_IsMsBuild(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_LoadedProjectPaths();
    [CompilerGeneratedAttribute]
private void set_LoadedProjectPaths(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_StoragePath();
    [CompilerGeneratedAttribute]
private void set_StoragePath(string value);
    [CompilerGeneratedAttribute]
public bool get_SaverAppendMode();
    [CompilerGeneratedAttribute]
private void set_SaverAppendMode(bool value);
    public ISource`1<MsBuildEventNotification> get_Notifications();
    public ISource`1<MsBuildExeBuildResult> get_BuildDone();
    public ISource`1<string> get_ProjectFinished();
    public ISource`1<string> get_ProjectStarted();
    public virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.ConsoleRunner.Models.MsBuildExeBuildResult : object {
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    public static CtxReadDelegate`1<MsBuildExeBuildResult> Read;
    public static CtxWriteDelegate`1<MsBuildExeBuildResult> Write;
    public bool Success { get; private set; }
    public MsBuildExeBuildResult(bool success);
    private static MsBuildExeBuildResult();
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
private void set_Success(bool value);
    public void Deconstruct(Boolean& success);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MsBuildExeBuildResult other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public enum JetBrains.ReSharper.Features.SolBuilderDuo.ConsoleRunner.Models.MsBuildExeEventKind : Enum {
    public int value__;
    public static MsBuildExeEventKind Error;
    public static MsBuildExeEventKind Warning;
    public static MsBuildExeEventKind Reference;
    public static MsBuildExeEventKind Other;
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.ConsoleRunner.Models.MsBuildExeLogEntry : object {
    [CompilerGeneratedAttribute]
private string <LogMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private MsBuildExeLogEntryType <Severity>k__BackingField;
    public static CtxReadDelegate`1<MsBuildExeLogEntry> Read;
    public static CtxWriteDelegate`1<MsBuildExeLogEntry> Write;
    [NotNullAttribute]
public string LogMessage { get; private set; }
    public MsBuildExeLogEntryType Severity { get; private set; }
    public MsBuildExeLogEntry(string logMessage, MsBuildExeLogEntryType severity);
    private static MsBuildExeLogEntry();
    [CompilerGeneratedAttribute]
public string get_LogMessage();
    [CompilerGeneratedAttribute]
private void set_LogMessage(string value);
    [CompilerGeneratedAttribute]
public MsBuildExeLogEntryType get_Severity();
    [CompilerGeneratedAttribute]
private void set_Severity(MsBuildExeLogEntryType value);
    public void Deconstruct(String& logMessage, MsBuildExeLogEntryType& severity);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MsBuildExeLogEntry other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public enum JetBrains.ReSharper.Features.SolBuilderDuo.ConsoleRunner.Models.MsBuildExeLogEntryType : Enum {
    public int value__;
    public static MsBuildExeLogEntryType ERROR;
    public static MsBuildExeLogEntryType WARN;
    public static MsBuildExeLogEntryType INFO;
    public static MsBuildExeLogEntryType VERBOSE;
    public static MsBuildExeLogEntryType TRACE;
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.ConsoleRunner.Models.MsBuildExeLoggerModel : RdExtBase {
    [NotNullAttribute]
private RdProperty`1<MsBuildExeBuildModelInitialized> _BuildModelInitialized;
    [NotNullAttribute]
public IViewableProperty`1<MsBuildExeBuildModelInitialized> BuildModelInitialized { get; }
    protected long SerializationHash { get; }
    protected Action`1<ISerializers> Register { get; }
    private MsBuildExeLoggerModel(RdProperty`1<MsBuildExeBuildModelInitialized> buildModelInitialized);
    public MsBuildExeLoggerModel(Lifetime lifetime, IProtocol protocol);
    public IViewableProperty`1<MsBuildExeBuildModelInitialized> get_BuildModelInitialized();
    protected virtual long get_SerializationHash();
    protected virtual Action`1<ISerializers> get_Register();
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers);
    public virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.ConsoleRunner.MsBuildExeBuildRunner : object {
    private static ISet`1<string> ourAllowedSingleProjectBuildModeTargets;
    private Lifetime myLifetime;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private IBuildRunWrapper myBuildRunWrapper;
    [NotNullAttribute]
private ISolutionToolset myRiderSolutionToolset;
    [NotNullAttribute]
private SolutionBuilderSettingsFactory mySolutionBuilderSettingsFactory;
    [NotNullAttribute]
private ISolutionProcessStartInfoPatcher myProcessStartInfoPatcher;
    [NotNullAttribute]
private IMsBuildUserProfile myMsBuildUserProfile;
    [NotNullAttribute]
private MsBuildProjectPropertiesBuilder myPropertiesBuilder;
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private ISolutionConfigurationHolder mySolutionConfigurationHolder;
    [NotNullAttribute]
public HashSet`1<MsBuildExeLoggerModel> RunningSessions;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsReady>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsAvailable>k__BackingField;
    private static HashSet`1<char> ourProjectPathEscapingChar;
    public bool CanExecuteCustomTarget { get; }
    public IProperty`1<bool> IsReady { get; }
    public IProperty`1<bool> IsAvailable { get; }
    public double Priority { get; }
    public bool IsIncremental { get; }
    public MsBuildExeBuildRunner(Lifetime lifetime, ILogger logger, ISolutionConfigurationHolder solutionConfigurationHolder, ISolution solution, IBuildRunWrapper buildRunWrapper, ISolutionToolset riderSolutionToolset, SolutionBuilderSettingsFactory solutionBuilderSettingsFactory, ISolutionProcessStartInfoPatcher processStartInfoPatcher, IMsBuildUserProfile msBuildUserProfile, MsBuildProjectPropertiesBuilder propertiesBuilder, IShellLocks locks);
    private static MsBuildExeBuildRunner();
    public sealed virtual bool get_CanExecuteCustomTarget();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsReady();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsAvailable();
    public sealed virtual double get_Priority();
    public sealed virtual bool get_IsIncremental();
    public sealed virtual bool IsDefault();
    public sealed virtual int GetSkippedProjectsCount(SolutionBuilderRequest request);
    public sealed virtual void ExecuteBuildRequest(SolutionBuilderRequest builderRequest);
    public void ExecutePartialBuildRequest(SolutionBuilderRequest request, IProject project, Action projectBuildFinished, ProjectIdCounter projectIdCounter, Lifetime lifetime);
    private void ExecuteBuildRequestCore(Lifetime lifetime, SolutionBuilderRequest builderRequest, ProjectIdCounter projectIdCounter, PartialBuildRequest partialBuildRequest);
    private static void MarkBuildRequestCompleted(SolutionBuilderRequest builderRequest, PartialBuildRequest partialBuildRequest);
    private void CancelBuildOnWindows(Process process);
    private List`1<string> GetProjectPaths();
    private string FindFileLocation(string fileLocation, IProject project);
    private BuildEventKind SeverityFromEv(MsBuildEventNotificationKind evKind);
    private string CreateCommandLine(SolutionBuilderRequest builderRequest, IBuildTool toolset, int serverPort, FileSystemPath logFilePath, RdVerbosityLevel fileLoggerVerbosity, bool passVisualStudioParameters, int parallelProcessCount, PartialBuildRequest partialBuildRequest);
    private bool IsSingleProjectBuildMode(SolutionBuilderRequest builderRequest);
    [NotNullAttribute]
private static string ConstructProjectTarget(SessionProjectBuildRequest request, string target);
    public sealed virtual void Abort(SolutionBuilderRequest request);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.ConsoleRunner.NetCoreChecker : object {
    public IProperty`1<bool> UseNetCoreBuild;
    public IProperty`1<bool> AllNetCore;
    public IProperty`1<int> NumAll;
    public IProperty`1<int> NonCore;
    public IProperty`1<bool> HasTargets;
    public NetCoreChecker(Lifetime lifetime, ILogger logger, IViewableProjectsCollection projects);
    private void UpdateBuildTool(RuntimeAndToolset runtimeAndToolset);
    private sealed virtual override void JetBrains.ProjectModel.ISolutionToolsetListener.Changed(RuntimeAndToolset runtimeAndToolset);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0(Lifetime lt, IProject project);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_3();
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_4();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__5_1(int num);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.ConsoleRunner.ProjectIdCounter : object {
    private int myNextId;
    private Dictionary`2<IProject, int> myProjects;
    [NotNullAttribute]
public RdProjectId GetOrCreateProjectId(IProject project);
}
[ActionAttribute("DumpCopyLocalFiles", "Dump Copy Local Files")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Diagnostics.DumpCopyLocalFiles : object {
    private static Regex ourProjectKeyRegex;
    private static DumpCopyLocalFiles();
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionGroupAttribute("1", "10")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Diagnostics.SolutionBuilderAction : object {
    public SolutionBuilderAction(DumpCopyLocalFiles dumpCopyLocalFiles);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Diagnostics.ZoneMarker : object {
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.GraphBuilders.BuildDependencyProviderFromProjectModel : object {
    [NotNullAttribute]
private ILogger myLogger;
    private OutputAssemblies myOutputAssemblies;
    public int Priority { get; }
    public BuildDependencyProviderFromProjectModel(ILogger logger, OutputAssemblies outputAssemblies);
    public sealed virtual int get_Priority();
    public sealed virtual IReadOnlyCollection`1<BuildDependency> GetBuildDependencies(IList`1<IProject> projects);
    private void Log(IProject source, IProject target);
    private static string PresentProject(IProject project);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.GraphBuilders.BuildDependencyProviderFromSolutionDependencies : object {
    public static string DependencySource;
    private ILogger myLogger;
    private ProjectsPersistentKeeper myProjectsPersistentKeeper;
    private IReadOnlyCollection`1<BuildDependency> myCachedDependencies;
    private bool myNeedRecalculate;
    public int Priority { get; }
    public BuildDependencyProviderFromSolutionDependencies(Lifetime lifetime, ILogger logger, ProjectsPersistentKeeper projectsPersistentKeeper, IProjectStructureChangeTracker projectStructureChangeTracker);
    public sealed virtual int get_Priority();
    public sealed virtual IReadOnlyCollection`1<BuildDependency> GetBuildDependencies(IList`1<IProject> projects);
    private IReadOnlyCollection`1<BuildDependency> CalculateBuildDependencies(IList`1<IProject> projects);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0(bool res);
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.GraphBuilders.IBuildDependencyProvider {
    public int Priority { get; }
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<BuildDependency> GetBuildDependencies(IList`1<IProject> projects);
    public abstract virtual int get_Priority();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.GraphBuilders.ProjectsGraphBuilder : object {
    private ILogger myLogger;
    private IEnumerable`1<IBuildDependencyProvider> myGraphBuilders;
    public ProjectsGraphBuilder(ILogger logger, IEnumerable`1<IBuildDependencyProvider> graphBuilders);
    public ProjectsGraph Build(IList`1<IProject> projects, IList`1& deletedBuildDependencies);
    [CanBeNullAttribute]
private static BuildDependencyKey FindBuildDependencyToRemove(IList`1<IProject> projectCycle, OneToListMap`2<BuildDependencyKey, BuildDependency> allDependencies, Func`2<BuildDependency, bool> filter);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.GraphBuilders.ProjectsGraphByRelationsBuilder : object {
    private ILogger myLogger;
    [CanBeNullAttribute]
public ProjectsGraph Build(IEnumerable`1<IProject> projects, IEnumerable`1<BuildDependency> relations);
    private static bool ProjectsGraph(OneToSetMap`2<ProjectUniqueKey, ProjectUniqueKey> mappedRelations, Dictionary`2<ProjectUniqueKey, ProjectWithReferences> keysToProjectWithReferences, Func`2<ProjectWithReferences, IList`1<ProjectWithReferences>> getRefs, ICollection`1<IProject> projects, ICollection`1<BuildDependency> relations);
    private static void ThrowOnMissedProject(ProjectUniqueKey source, string text, IEnumerable`1<IProject> projects, ICollection`1<BuildDependency> relations);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Helpers.BoostProjectForBuildingChooser : object {
    private GraphRelativeStateMapper myGraphRelativeStateMapper;
    [CompilerGeneratedAttribute]
private ISignal`1<Pair`2<ICollection`1<IProject>, ProjectBuildingState>> <StateChanged>k__BackingField;
    public ISignal`1<Pair`2<ICollection`1<IProject>, ProjectBuildingState>> StateChanged { get; }
    public BoostProjectForBuildingChooser(Lifetime lifetime, GraphRelativeStateMapper graphRelativeStateMapper);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<Pair`2<ICollection`1<IProject>, ProjectBuildingState>> get_StateChanged();
    public sealed virtual ProjectForBuildingChooseResult ChooseProjectForBuilding(Guid sessionGuid, IBuildSessionTarget target, IDictionary`2<ProjectUniqueKey, IProject> projectsByKeys, ProjectsGraph graph, ProjectsGraphState graphState);
    private void SkipProjects(IDictionary`2<ProjectUniqueKey, IProject> projectsByKeys, List`1<ProjectState> itemsForSkipping);
    [NotNullAttribute]
private StateAnalyzeResult AnalyzeStates(IDictionary`2<ProjectUniqueKey, IProject> projectsByKeys, IEnumerable`1<ProjectState> states, bool isBuilding);
    private IEnumerable`1<ProjectState> GetRelativeStates(IDictionary`2<ProjectUniqueKey, IProject> projectsByKeys, ProjectUniqueKey projectUniqueKey);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Helpers.GraphAcyclicityChecker : object {
    public GraphAcyclicityCheckResult Check(ProjectsGraph graph);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Helpers.GraphAcyclicityCheckResult : object {
    [CompilerGeneratedAttribute]
private bool <IsAcyclic>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IProject> <ProjectCycle>k__BackingField;
    public bool IsAcyclic { get; }
    public IList`1<IProject> ProjectCycle { get; }
    private GraphAcyclicityCheckResult(bool isAcyclic, IList`1<IProject> projectCycle);
    public static GraphAcyclicityCheckResult CreateCyclicResult(IList`1<IProject> projectCycle);
    public static GraphAcyclicityCheckResult CreateAcyclicResult();
    [CompilerGeneratedAttribute]
public bool get_IsAcyclic();
    [CompilerGeneratedAttribute]
public IList`1<IProject> get_ProjectCycle();
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Helpers.GraphWalker : object {
    internal void Walk(ProjectsGraph graph, Func`2<IProjectWithReferences, bool> proceedNode, Action`1<IProjectWithReferences> actionAfterChildren);
    public void Walk(IProjectWithReferences graphNode, Func`2<IProjectWithReferences, bool> proceedNode, Action`1<IProjectWithReferences> actionAfterChildren);
    internal void WalkUp(ProjectsGraph graph, Func`2<IProjectWithReferences, bool> proceedNode, Action`1<IProjectWithReferences> actionAfterChildren);
    public void WalkUp(IProjectWithReferences graphNode, Func`2<IProjectWithReferences, bool> proceedNode, Action`1<IProjectWithReferences> actionAfterChildren);
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Helpers.IProjectForBuildingChooser {
    [NotNullAttribute]
public abstract virtual ProjectForBuildingChooseResult ChooseProjectForBuilding(Guid sessionGuid, IBuildSessionTarget target, IDictionary`2<ProjectUniqueKey, IProject> projectsByKeys, ProjectsGraph graph, ProjectsGraphState graphState);
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Helpers.IProjectsGraphStateCalculator {
    [NotNullAttribute]
public abstract virtual ProjectsGraphState BuildInitialState(ProjectsGraph graph, ICollection`1<ProjectState> cachedStates);
    public abstract virtual void ChangeState(ProjectsGraph graph, ProjectsGraphState grapthState, IEnumerable`1<IProjectStateCommand> commands);
    public abstract virtual ICollection`1<IProject> CaclAllSelectedProjects(ProjectsGraph projectsGraph, IEnumerable`1<IProject> selectedProjects, IList`1<IProject> allProjectsInSolution);
    public abstract virtual void ResetState(ProjectsGraphState currentProjectsGraphState, IEnumerable`1<IProject> allSelectedProjects);
    [NotNullAttribute]
public abstract virtual ProjectsGraphState BuildNewState(ProjectsGraph newProjectGraphForCurrentBuildSession, ProjectsGraph projectGraphForCurrentBuildSession, ProjectsGraphState oldGraphState);
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Helpers.IProjectStructureChangeTracker {
    public ISimpleSignal ProjectStructureChanged { get; }
    public abstract virtual ISimpleSignal get_ProjectStructureChanged();
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.Features.SolBuilderDuo.Helpers.PersistentMapUtil : object {
    [ExtensionAttribute]
public static Nullable`1<bool> ReadNullableBool(UnsafeReader reader);
    [ExtensionAttribute]
public static void WriteNullableBool(UnsafeWriter writer, Nullable`1<bool> val);
    [ExtensionAttribute]
public static Nullable`1<int> ReadNullableInt(UnsafeReader reader);
    [ExtensionAttribute]
public static void WriteNullableInt(UnsafeWriter writer, Nullable`1<int> val);
}
public static class JetBrains.ReSharper.Features.SolBuilderDuo.Helpers.ProjctConfigurationFactory : object {
    [NotNullAttribute]
public static Dictionary`2<string, string> GetAdditionalProperties(BuildSessionContext sessionContext, IProject project);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Helpers.ProjectByGuidIEqualityComparer : object {
    public static ProjectByGuidIEqualityComparer Instance;
    private static ProjectByGuidIEqualityComparer();
    public sealed virtual bool Equals(IProject x, IProject y);
    public sealed virtual int GetHashCode(IProject obj);
}
internal class JetBrains.ReSharper.Features.SolBuilderDuo.Helpers.ProjectsGraphSorter : object {
    public static ProjectsGraph GetSortedProjectsGraph(ProjectsGraph projectsGraph);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Helpers.ProjectsGraphStateCalculator : object {
    [CompilerGeneratedAttribute]
private IBuildHeuristicFactory <buildHeuristicFactory>P;
    [NotNullAttribute]
private GraphWalker walker;
    public ProjectsGraphStateCalculator(IBuildHeuristicFactory buildHeuristicFactory);
    public sealed virtual ProjectsGraphState BuildInitialState(ProjectsGraph graph, ICollection`1<ProjectState> cachedStates);
    public sealed virtual void ChangeState(ProjectsGraph graph, ProjectsGraphState grapthState, IEnumerable`1<IProjectStateCommand> commands);
    private void ProceedRecalculateHasBuildingParentStateCommand(ProjectsGraph graph, ProjectsGraphState grapthState, RecalculateHasBuildingParentStateCommand command);
    public sealed virtual ICollection`1<IProject> CaclAllSelectedProjects(ProjectsGraph projectsGraph, IEnumerable`1<IProject> selectedProjects, IList`1<IProject> allProjectsInSolution);
    public sealed virtual void ResetState(ProjectsGraphState currentProjectsGraphState, IEnumerable`1<IProject> allSelectedProjects);
    public sealed virtual ProjectsGraphState BuildNewState(ProjectsGraph newGraph, ProjectsGraph oldGraph, ProjectsGraphState oldGraphState);
    private void ProceedMarkBlackCommand(ProjectsGraph graph, ProjectsGraphState grapthState, MarkBlackCommand command);
    private void ProceedHandleBuildEventCommand(ProjectsGraph graph, ProjectsGraphState grapthState, HandleBuildEventCommand command);
    private void ProceedMarkAlwaysBuildCommand(ProjectsGraph graph, ProjectsGraphState grapthState, MarkAlwaysBuildCommand command);
    private void ProceedMarkNeverBuildCommand(ProjectsGraph graph, ProjectsGraphState grapthState, MarkNeverBuildCommand command);
    private void ProceedMarkBuildIsDisabledCommand(ProjectsGraph graph, ProjectsGraphState grapthState, MarkBuildIsDisabledCommand command);
    private void ProcessRecalculateOnlyInderectReferencesChangedStateCommand(ProjectsGraph graph, ProjectsGraphState grapthState, RecalculateOnlyInderectReferencesChangedStateCommand command);
    private void SetNewState(ProjectsGraph graph, ProjectsGraphState graphState, Guid projectGuid, ProjectChangingState newState);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Helpers.ProjectStructureChangeTracker : object {
    [CompilerGeneratedAttribute]
private ISimpleSignal <ProjectStructureChanged>k__BackingField;
    public ISimpleSignal ProjectStructureChanged { get; }
    public ProjectStructureChangeTracker(Lifetime lifetime, ISolutionFileChangingTracker solutionFileChangingTracker, ISolution solution, ChangeManager changeManager);
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_ProjectStructureChanged();
    public sealed virtual object Execute(IChangeMap changeMap);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0();
}
[ZoneDefinitionAttribute]
[ZoneDefinitionConfigurableFeatureAttribute("ReSharper Build", "Heuristic build optimizer and build result presenter", "False")]
public interface JetBrains.ReSharper.Features.SolBuilderDuo.ISolutionBuilderFeatureZone {
}
[DataContractAttribute]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Legacy.AssemblySurfaceCache : object {
    private ListEvents`1<AssemblySurfaceHash> myAssemblySurfaceHashes;
    private SpinWaitLockRef myLock;
    private Dictionary`2<FileSystemPath, AssemblySurfaceHash> myMapFullPathToAssemblySurfaceHash;
    [DesignerSerializationVisibilityAttribute("2")]
[DataMemberAttribute]
private IList`1<AssemblySurfaceHash> AssemblySurfaceHashes { get; private set; }
    private AssemblySurfaceCache(IList`1<AssemblySurfaceHash> surfaceHashes);
    private IList`1<AssemblySurfaceHash> get_AssemblySurfaceHashes();
    private void set_AssemblySurfaceHashes(IList`1<AssemblySurfaceHash> value);
    [NotNullAttribute]
public AssemblySurfaceHash GetAssemblySurfaceHash(FileSystemPath path, ITaskHost tasker);
    public static AssemblySurfaceCache Read(UnsafeReader reader);
    public static void Write(UnsafeWriter writer, AssemblySurfaceCache value);
    [OnDeserializedAttribute]
private void Init(StreamingContext sc);
    [CompilerGeneratedAttribute]
private void <Init>b__11_0(AddRemoveIndexEventArgs`1<AssemblySurfaceHash> args);
    [CompilerGeneratedAttribute]
private void <Init>b__11_1(AddRemoveIndexEventArgs`1<AssemblySurfaceHash> args);
}
[DataContractAttribute]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Legacy.AssemblySurfaceHash : object {
    internal static bool OptionDumpSignature;
    public static IEqualityComparer`1<AssemblySurfaceHash> StrictEqualityComparer;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullPath>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ModificationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublicApiHash>k__BackingField;
    public static ReadDelegate`1<AssemblySurfaceHash> ReadDelegate;
    public static WriteDelegate`1<AssemblySurfaceHash> WriteDelegate;
    public static IUnsafeMarshaller`1<AssemblySurfaceHash> Marshaller;
    [DataMemberAttribute]
public string AssemblyName { get; public set; }
    [DataMemberAttribute]
public string FullPath { get; public set; }
    [DataMemberAttribute]
public DateTime ModificationTime { get; public set; }
    [DataMemberAttribute]
public string PublicApiHash { get; public set; }
    public AssemblySurfaceHash(FileSystemPath path, ITaskHost tasker);
    private static AssemblySurfaceHash();
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public string get_FullPath();
    [CompilerGeneratedAttribute]
public void set_FullPath(string value);
    [CompilerGeneratedAttribute]
public DateTime get_ModificationTime();
    [CompilerGeneratedAttribute]
public void set_ModificationTime(DateTime value);
    [CompilerGeneratedAttribute]
public string get_PublicApiHash();
    [CompilerGeneratedAttribute]
public void set_PublicApiHash(string value);
    public static bool op_Equality(AssemblySurfaceHash left, AssemblySurfaceHash right);
    public static bool op_Inequality(AssemblySurfaceHash left, AssemblySurfaceHash right);
    public bool IsUpToDate();
    [NotNullAttribute]
private static Byte[] ComputeHash_Stream(FileSystemPath path, ITaskHost tasker);
    private static bool EqualsStrict(AssemblySurfaceHash α, AssemblySurfaceHash β);
    private static int GetHashCodeStrict(AssemblySurfaceHash this);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(AssemblySurfaceHash obj);
    public static AssemblySurfaceHash Read(UnsafeReader reader);
    public static void Write(UnsafeWriter writer, AssemblySurfaceHash value);
    public static void Write(BinaryWriter writer, AssemblySurfaceHash value);
    [CanBeNullAttribute]
public static AssemblySurfaceHash Read(BinaryReader reader);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Legacy.AssemblySurfaceSerializerOnTheFly : object {
    private ObsoleteLifetimeAndDefinitionAtTheSameTime Disposables;
    private XmlWriter myWriter;
    private static string CompilerServices;
    private static string CodeAnalysis;
    private static JetHashSet`1<string> CompilerNamespaces;
    private String[] FSharpSignaturePrefixes;
    private AssemblySurfaceSerializerOnTheFly(Stream stream);
    private static AssemblySurfaceSerializerOnTheFly();
    public static void Run(IMetadataAssembly assembly, Stream stream);
    private void SerializeArrayType(IMetadataArrayType type);
    private static bool ShouldSerializeCompilerAttribute(IMetadataCustomAttribute attribute);
    private void SerializeCompilerAttributes(IEnumerable`1<IMetadataCustomAttribute> attributes, string scope);
    private static bool ShouldSkipSerialization(IMetadataTypeMember item);
    private void SerializeAssembly(IMetadataAssembly assembly);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.SolBuilderDuo.Legacy.AssemblySurfaceSerializerOnTheFly/<GetImportantMetadata>d__13")]
private IEnumerable`1<IMetadataManifestResource> GetImportantMetadata(IMetadataAssembly assembly);
    private static string ToHexString(Byte[] value);
    private static bool ShouldSerializeType(IMetadataTypeInfo info);
    private void SerializeByRefType(IMetadataReferenceType type);
    private void SerializeClassType(IMetadataTypeInfo type);
    private void SerializeClassType_GenericParams(IMetadataTypeInfo type);
    private void SerializeClassType_Ifaces(IMetadataTypeInfo type);
    private void SerializeEvent(IMetadataEvent evt);
    private void SerializeField(IMetadataField field);
    private void SerializeTypeParameterReferenceType(IMetadataTypeParameterReferenceType typeParameterReferenceType);
    private void SerializeMetadataFunctionPointerType(IMetadataFunctionPointerType functionPointerType);
    private void SerializeMethod(IMetadataMethod method);
    private static string EscapeValue(object defaultValue);
    private void SerializePointerType(IMetadataPointerType type);
    private void SerializeProperty(IMetadataProperty property);
    private void SerializeType(IMetadataTypeInfo type);
    private void SerializeValueType(IMetadataType type);
    private void SerializeObsoleteAttribute(IMetadataEntity entity);
    public sealed virtual void Dispose();
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.BuildDependency : object {
    [CompilerGeneratedAttribute]
private BuildDependencyKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DependencySource>k__BackingField;
    [NotNullAttribute]
public BuildDependencyKey Key { get; }
    [NotNullAttribute]
public string DependencySource { get; }
    [NotNullAttribute]
public ProjectUniqueKey Source { get; }
    [NotNullAttribute]
public ProjectUniqueKey Target { get; }
    public BuildDependency(IProject source, IProject target, string dependencySource);
    public BuildDependency(ProjectUniqueKey source, ProjectUniqueKey target, string dependencySource);
    [CompilerGeneratedAttribute]
public BuildDependencyKey get_Key();
    [CompilerGeneratedAttribute]
public string get_DependencySource();
    public ProjectUniqueKey get_Source();
    public ProjectUniqueKey get_Target();
    public virtual string ToString();
    public static BuildDependency TryParse(string str);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.BuildDependencyKey : object {
    [CompilerGeneratedAttribute]
private ProjectUniqueKey <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectUniqueKey <Target>k__BackingField;
    [NotNullAttribute]
public ProjectUniqueKey Source { get; }
    [NotNullAttribute]
public ProjectUniqueKey Target { get; }
    public BuildDependencyKey(IProject source, IProject target);
    public BuildDependencyKey(ProjectUniqueKey source, ProjectUniqueKey target);
    [CompilerGeneratedAttribute]
public ProjectUniqueKey get_Source();
    [CompilerGeneratedAttribute]
public ProjectUniqueKey get_Target();
    public sealed virtual bool Equals(BuildDependencyKey other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public enum JetBrains.ReSharper.Features.SolBuilderDuo.Model.BuilderState : Enum {
    public int value__;
    public static BuilderState None;
    public static BuilderState Inited;
    public static BuilderState Running;
    public static BuilderState Cancelling;
    public static BuilderState Finished;
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.BuildEventForWholeLaunchQueue : object {
    [CompilerGeneratedAttribute]
private Guid <LaunchGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanCloseLaunch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <SessionGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Succeeded>k__BackingField;
    public Guid LaunchGuid { get; }
    public bool CanCloseLaunch { get; }
    [NotNullAttribute]
public string Message { get; }
    public Guid SessionGuid { get; }
    public bool Succeeded { get; }
    public BuildEventForWholeLaunchQueue(Guid launchGuid, bool canCloseLaunch, Guid sessionGuid, bool succeeded, string message);
    [CompilerGeneratedAttribute]
public Guid get_LaunchGuid();
    [CompilerGeneratedAttribute]
public bool get_CanCloseLaunch();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public Guid get_SessionGuid();
    [CompilerGeneratedAttribute]
public bool get_Succeeded();
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.BuildExecutionResult : object {
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildEventForWholeLaunchQueue <BuildEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private RdBuildResult <BuildResult>k__BackingField;
    public Lifetime Lifetime { get; public set; }
    public BuildEventForWholeLaunchQueue BuildEvent { get; }
    public IProject Project { get; }
    public RdBuildResult BuildResult { get; }
    public BuildExecutionResult(BuildEventForWholeLaunchQueue buildEvent, IProject project, RdBuildResult buildResult, Lifetime lifetime);
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public void set_Lifetime(Lifetime value);
    [CompilerGeneratedAttribute]
public BuildEventForWholeLaunchQueue get_BuildEvent();
    [CompilerGeneratedAttribute]
public IProject get_Project();
    [CompilerGeneratedAttribute]
public RdBuildResult get_BuildResult();
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.BuildExecutionResultShortInfo : object {
    [CompilerGeneratedAttribute]
private ProjectUniqueKey <ProjectUniqueKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Suceeded>k__BackingField;
    public ProjectUniqueKey ProjectUniqueKey { get; public set; }
    public Guid RequestId { get; public set; }
    public bool Suceeded { get; public set; }
    public BuildExecutionResultShortInfo(BuildResultWithProject res);
    [CompilerGeneratedAttribute]
public ProjectUniqueKey get_ProjectUniqueKey();
    [CompilerGeneratedAttribute]
public void set_ProjectUniqueKey(ProjectUniqueKey value);
    [CompilerGeneratedAttribute]
public Guid get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(Guid value);
    [CompilerGeneratedAttribute]
public bool get_Suceeded();
    [CompilerGeneratedAttribute]
public void set_Suceeded(bool value);
    public virtual string ToString();
    public static BuildExecutionResultShortInfo TryParse(string str);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.BuildLaunchContext : object {
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <LaunchGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildSessionContext <SessionContext>k__BackingField;
    public Lifetime Lifetime { get; }
    public Guid LaunchGuid { get; }
    public BuildSessionContext SessionContext { get; }
    public BuildLaunchContext(Lifetime lifetime, BuildSessionContext sessionContext, Guid launchGuid);
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public Guid get_LaunchGuid();
    [CompilerGeneratedAttribute]
public BuildSessionContext get_SessionContext();
}
public enum JetBrains.ReSharper.Features.SolBuilderDuo.Model.BuildProgressKind : Enum {
    public int value__;
    public static BuildProgressKind None;
    public static BuildProgressKind Clear;
    public static BuildProgressKind HasWarnings;
    public static BuildProgressKind HasErrors;
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.BuildSessionContext : object {
    private Lazy`1<IMsBuildSession> myLazySession;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private LifetimeDefinition <ExternalSessionLifetimeDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private SolutionConfigurationAndPlatform <ProjectElementActiveConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IBuildSessionTarget <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectCollectionActiveConfiguration <ProjectCollectionActiveConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IBuildEventOutputSink <BuildEventOutputSink>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LogToOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private RdVerbosityLevel <LogVerbosityLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InvokePreAndPostBuildEventTargetsForSkippedProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InvokeBeforeBuildAndAfterBuildTargetsForSkippedProjects>k__BackingField;
    public Lifetime Lifetime { get; }
    [NotNullAttribute]
public LifetimeDefinition ExternalSessionLifetimeDefinition { get; }
    [NotNullAttribute]
public SolutionConfigurationAndPlatform ProjectElementActiveConfiguration { get; }
    public IBuildSessionTarget Target { get; }
    public Guid SessionId { get; }
    public ProjectCollectionActiveConfiguration ProjectCollectionActiveConfiguration { get; public set; }
    [NotNullAttribute]
public IBuildEventOutputSink BuildEventOutputSink { get; }
    public IMsBuildSession Executor { get; }
    public bool LogToOutput { get; }
    public RdVerbosityLevel LogVerbosityLevel { get; }
    public bool InvokePreAndPostBuildEventTargetsForSkippedProjects { get; }
    public bool InvokeBeforeBuildAndAfterBuildTargetsForSkippedProjects { get; }
    public BuildSessionContext(Lifetime lifetime, LifetimeDefinition externalSessionLifetimeDefinition, SolutionConfigurationAndPlatform projectElementActiveConfiguration, IBuildSessionTarget target, Guid sessionId, ProjectCollectionActiveConfiguration projectCollectionActiveConfiguration, IBuildEventOutputSink buildEventOutputSink, Lazy`1<IMsBuildSession> lazySession, bool logToOutput, RdVerbosityLevel logVerbosityLevel, bool invokePreAndPostBuildEventTargetsForSkippedProjects, bool invokeBeforeBuildAndAfterBuildTargetsForSkippedProjects);
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public LifetimeDefinition get_ExternalSessionLifetimeDefinition();
    [CompilerGeneratedAttribute]
public SolutionConfigurationAndPlatform get_ProjectElementActiveConfiguration();
    [CompilerGeneratedAttribute]
public IBuildSessionTarget get_Target();
    [CompilerGeneratedAttribute]
public Guid get_SessionId();
    [CompilerGeneratedAttribute]
public ProjectCollectionActiveConfiguration get_ProjectCollectionActiveConfiguration();
    [CompilerGeneratedAttribute]
public void set_ProjectCollectionActiveConfiguration(ProjectCollectionActiveConfiguration value);
    [CompilerGeneratedAttribute]
public IBuildEventOutputSink get_BuildEventOutputSink();
    public IMsBuildSession get_Executor();
    [CompilerGeneratedAttribute]
public bool get_LogToOutput();
    [CompilerGeneratedAttribute]
public RdVerbosityLevel get_LogVerbosityLevel();
    [CompilerGeneratedAttribute]
public bool get_InvokePreAndPostBuildEventTargetsForSkippedProjects();
    [CompilerGeneratedAttribute]
public bool get_InvokeBeforeBuildAndAfterBuildTargetsForSkippedProjects();
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.BuildSessionContextCreationResult : object {
    [CompilerGeneratedAttribute]
private BuildSessionContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CanBeNullAttribute]
public BuildSessionContext Context { get; }
    [CanBeNullAttribute]
public string ErrorMessage { get; }
    public BuildSessionContextCreationResult(BuildSessionContext context);
    public BuildSessionContextCreationResult(string errorMessage);
    [CompilerGeneratedAttribute]
public BuildSessionContext get_Context();
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.Commands.BeginProcessCommand : object {
    private IDictionary`2<ProjectUniqueKey, IProject> myProjectsPerKeys;
    [CompilerGeneratedAttribute]
private SolutionBuilderRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private ISolutionConfigurationAndPlatform <SolutionActiveConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectCollectionActiveConfiguration <ProjectCollectionActiveConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldRunOnFinish>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IProject> <AlwaysBuildProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IProject> <NeverBuildProjects>k__BackingField;
    [NotNullAttribute]
public SolutionBuilderRequest Request { get; }
    [NotNullAttribute]
public ISolutionConfigurationAndPlatform SolutionActiveConfiguration { get; }
    [CanBeNullAttribute]
public ProjectCollectionActiveConfiguration ProjectCollectionActiveConfiguration { get; }
    public IList`1<IProject> AllProjectsInSolution { get; }
    public IDictionary`2<ProjectUniqueKey, IProject> ProjectsPerKeys { get; }
    public bool ShouldRunOnFinish { get; public set; }
    public Lifetime SessionLifetime { get; }
    public IList`1<IProject> AlwaysBuildProjects { get; }
    public IList`1<IProject> NeverBuildProjects { get; }
    public BeginProcessCommand(IList`1<IProject> allProjectsInSolution, IList`1<IProject> alwaysBuildProjects, IList`1<IProject> neverBuildProjects, ISolutionConfigurationAndPlatform solutionActiveConfiguration, ProjectCollectionActiveConfiguration projectCollectionActiveConfiguration, SolutionBuilderRequest request);
    [CompilerGeneratedAttribute]
public SolutionBuilderRequest get_Request();
    [CompilerGeneratedAttribute]
public ISolutionConfigurationAndPlatform get_SolutionActiveConfiguration();
    [CompilerGeneratedAttribute]
public ProjectCollectionActiveConfiguration get_ProjectCollectionActiveConfiguration();
    public IList`1<IProject> get_AllProjectsInSolution();
    public IDictionary`2<ProjectUniqueKey, IProject> get_ProjectsPerKeys();
    [CompilerGeneratedAttribute]
public bool get_ShouldRunOnFinish();
    [CompilerGeneratedAttribute]
public void set_ShouldRunOnFinish(bool value);
    public sealed virtual Lifetime get_SessionLifetime();
    [CompilerGeneratedAttribute]
public IList`1<IProject> get_AlwaysBuildProjects();
    [CompilerGeneratedAttribute]
public IList`1<IProject> get_NeverBuildProjects();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.Commands.BuildEventCommand : object {
    [CompilerGeneratedAttribute]
private Lifetime <SessionLifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildExecutionResult <BuildExecutionResult>k__BackingField;
    [NotNullAttribute]
public Lifetime SessionLifetime { get; }
    [NotNullAttribute]
public BuildExecutionResult BuildExecutionResult { get; }
    public BuildEventCommand(BuildExecutionResult buildExecutionResult);
    [CompilerGeneratedAttribute]
public sealed virtual Lifetime get_SessionLifetime();
    [CompilerGeneratedAttribute]
public BuildExecutionResult get_BuildExecutionResult();
}
internal class JetBrains.ReSharper.Features.SolBuilderDuo.Model.Commands.CancelBuildCommand : object {
    [CompilerGeneratedAttribute]
private Lifetime <SessionLifetime>k__BackingField;
    public Lifetime SessionLifetime { get; }
    public CancelBuildCommand(Lifetime sessionLifetime);
    [CompilerGeneratedAttribute]
public sealed virtual Lifetime get_SessionLifetime();
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.Commands.EmergencyStopCommand : object {
    [CompilerGeneratedAttribute]
private Lifetime <SessionLifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public Lifetime SessionLifetime { get; }
    public string Message { get; }
    public EmergencyStopCommand(Lifetime sessionLifetime, string message);
    [CompilerGeneratedAttribute]
public sealed virtual Lifetime get_SessionLifetime();
    [CompilerGeneratedAttribute]
public string get_Message();
}
internal interface JetBrains.ReSharper.Features.SolBuilderDuo.Model.Commands.ISolutionBuilderCommand {
    public Lifetime SessionLifetime { get; }
    public abstract virtual Lifetime get_SessionLifetime();
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Model.Commands.ISolutionBuilderPersistentDataLoadedCommandTracker {
    public abstract virtual void IncreaseFlag();
    public abstract virtual void DecreaseFlag();
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.Commands.SolutionBuilderPersistentDataLoadedCommand : object {
    [CompilerGeneratedAttribute]
private SolutionStoringState <SolutionStoringState>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IProject> <CurrentProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private Lifetime <SessionLifetime>k__BackingField;
    public SolutionStoringState SolutionStoringState { get; }
    public IList`1<IProject> CurrentProjects { get; }
    public Lifetime SessionLifetime { get; }
    public SolutionBuilderPersistentDataLoadedCommand(SolutionStoringState solutionStoringState, IList`1<IProject> currentProjects, Lifetime sessionLifetime);
    [CompilerGeneratedAttribute]
public SolutionStoringState get_SolutionStoringState();
    [CompilerGeneratedAttribute]
public IList`1<IProject> get_CurrentProjects();
    [CompilerGeneratedAttribute]
public sealed virtual Lifetime get_SessionLifetime();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.Commands.SolutionBuilderPersistentDataLoadedCommandSolutionBuilderConfigurationReloadTracker : object {
    private int myCounter;
    [NotNullAttribute]
private object mySyncObject;
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private IThreading myThreading;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Reloading>k__BackingField;
    public IProperty`1<bool> Reloading { get; }
    public SolutionBuilderPersistentDataLoadedCommandSolutionBuilderConfigurationReloadTracker(Lifetime lifetime, IThreading threading);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_Reloading();
    public sealed virtual void IncreaseFlag();
    public sealed virtual void DecreaseFlag();
    private void HandleCounterEmpty();
}
internal class JetBrains.ReSharper.Features.SolBuilderDuo.Model.Commands.SolutionConfigurationChangedCommand : object {
    [CompilerGeneratedAttribute]
private Lifetime <SessionLifetime>k__BackingField;
    public Lifetime SessionLifetime { get; }
    public SolutionConfigurationChangedCommand(Lifetime sessionLifetime);
    [CompilerGeneratedAttribute]
public sealed virtual Lifetime get_SessionLifetime();
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.CopyTasksInfo : object {
    [CompilerGeneratedAttribute]
private RdCopyTaskGlobalProperties <CopyTaskGlobalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdCopyTaskResult> <CopyTaskResults>k__BackingField;
    private static IUnsafeMarshaller`1<RdCopyTaskGlobalProperties> ourRdCopyTaskGlobalPropertiesMarshaller;
    private static IEqualityComparer`1<CopyTasksInfo> ourCopyTasksInfoComparerInstance;
    public RdCopyTaskGlobalProperties CopyTaskGlobalProperties { get; }
    public List`1<RdCopyTaskResult> CopyTaskResults { get; }
    public static IEqualityComparer`1<CopyTasksInfo> CopyTasksInfoComparer { get; }
    public CopyTasksInfo(RdCopyTaskGlobalProperties copyTaskGlobalProperties, List`1<RdCopyTaskResult> copyTaskResults);
    private static CopyTasksInfo();
    [CompilerGeneratedAttribute]
public RdCopyTaskGlobalProperties get_CopyTaskGlobalProperties();
    [CompilerGeneratedAttribute]
public List`1<RdCopyTaskResult> get_CopyTaskResults();
    private static IUnsafeMarshaller`1<RdCopyTaskResult> CreateRdCopyTaskResultMarshaller(CopyLocalFilesCaches cache);
    public static IUnsafeMarshaller`1<CopyTasksInfo> CreateMarshaller(CopyLocalFilesCaches copyLocalFilesCaches);
    public static IEqualityComparer`1<CopyTasksInfo> get_CopyTasksInfoComparer();
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.GraphStateCommands.HandleBuildEventCommand : object {
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBuilding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsProjectBuildingFinished>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <SessionGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Succeded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasWarnings>k__BackingField;
    public IProject Project { get; }
    public bool IsBuilding { get; }
    public bool IsProjectBuildingFinished { get; }
    public Guid SessionGuid { get; }
    public bool Succeded { get; }
    public bool HasWarnings { get; }
    public HandleBuildEventCommand(IProject project, bool isBuilding, bool isProjectBuildingFinished, Guid sessionGuid, bool succeded, bool hasWarnings);
    [CompilerGeneratedAttribute]
public IProject get_Project();
    [CompilerGeneratedAttribute]
public bool get_IsBuilding();
    [CompilerGeneratedAttribute]
public bool get_IsProjectBuildingFinished();
    [CompilerGeneratedAttribute]
public Guid get_SessionGuid();
    [CompilerGeneratedAttribute]
public bool get_Succeded();
    [CompilerGeneratedAttribute]
public bool get_HasWarnings();
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Model.GraphStateCommands.IProjectStateCommand {
}
internal class JetBrains.ReSharper.Features.SolBuilderDuo.Model.GraphStateCommands.MarkAlwaysBuildCommand : ProjectStateCommandWithProject {
    public MarkAlwaysBuildCommand(IProject project);
}
internal class JetBrains.ReSharper.Features.SolBuilderDuo.Model.GraphStateCommands.MarkBlackCommand : ProjectStateCommandWithProject {
    public MarkBlackCommand(IProject project);
}
internal class JetBrains.ReSharper.Features.SolBuilderDuo.Model.GraphStateCommands.MarkBuildIsDisabledCommand : ProjectStateCommandWithProject {
    public MarkBuildIsDisabledCommand(IProject project);
}
internal class JetBrains.ReSharper.Features.SolBuilderDuo.Model.GraphStateCommands.MarkNeverBuildCommand : ProjectStateCommandWithProject {
    public MarkNeverBuildCommand(IProject project);
}
internal abstract class JetBrains.ReSharper.Features.SolBuilderDuo.Model.GraphStateCommands.ProjectStateCommandWithProject : object {
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    public IProject Project { get; }
    protected ProjectStateCommandWithProject(IProject project);
    [CompilerGeneratedAttribute]
public IProject get_Project();
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.GraphStateCommands.RecalculateHasBuildingParentStateCommand : object {
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.GraphStateCommands.RecalculateOnlyInderectReferencesChangedStateCommand : object {
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.Heuristic.BuildHeuristicOnSurface : object {
    [CompilerGeneratedAttribute]
private bool <isHashChanged>P;
    private JetHashSet`1<IProject> myVisitedProjects;
    private JetHashSet`1<Guid> myCannotApplyHeuristicProjects;
    public BuildHeuristicOnSurface(bool isHashChanged, JetHashSet`1<Guid> cannotApplyHeuristicProjects);
    public sealed virtual BuildHeuristicResult Proceed(IProject sourceProject, IProject targetProject, ProjectState targetState, HandleBuildEventCommand projectStateCommand);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.Heuristic.BuildHeuristicOnSurfaceFactory : object {
    private ILogger myLogger;
    private IncrementalRunnerApplicabilityChecker myChecker;
    private ProjectsPersistentKeeper myPersistentKeeper;
    private IThreading myThreading;
    private ISolutionConfigurationHolder mySolutionConfigurationHolder;
    private AssemblySurfaceCache myCache;
    private SurfaceStorage mySurfaceStorage;
    private JetHashSet`1<Guid> myCannotApplyHeuristicProjects;
    [NotNullAttribute]
private IPersistentSortedMap`2<string, bool> myAdditionalSurfaceChangedMap;
    private ISolutionConfigurationAndPlatform myCurrentConfiguration;
    public BuildHeuristicOnSurfaceFactory(Lifetime lifetime, ILogger logger, IncrementalRunnerApplicabilityChecker checker, ISolutionCaches solutionCaches, ProjectsPersistentKeeper persistentKeeper, IThreading threading, IEnumerable`1<IProjectSurfaceChangeTracker> trackers, ISolutionConfigurationHolder solutionConfigurationHolder);
    public sealed virtual void InitBeforeBuildSession();
    public sealed virtual BuildHeuristicProjectCollectionState GetState();
    public sealed virtual void InitState(BuildHeuristicProjectCollectionState state);
    public sealed virtual IBuildHeuristic AcquireHeuristic(IProject project);
    private void HandleSurfaceChanged(IProject project);
    private static string HashToStr(AssemblySurfaceHash hash);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.Heuristic.BuildHeuristicProjectCollectionState : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<ProjectUniqueKey, AssemblySurfaceHash> <States>k__BackingField;
    public static IUnsafeMarshaller`1<BuildHeuristicProjectCollectionState> Marshaller;
    private static IUnsafeMarshaller`1<IDictionary`2<ProjectUniqueKey, AssemblySurfaceHash>> ourStatesMarshaller;
    public IDictionary`2<ProjectUniqueKey, AssemblySurfaceHash> States { get; }
    public BuildHeuristicProjectCollectionState(IDictionary`2<ProjectUniqueKey, AssemblySurfaceHash> states);
    private static BuildHeuristicProjectCollectionState();
    [CompilerGeneratedAttribute]
public IDictionary`2<ProjectUniqueKey, AssemblySurfaceHash> get_States();
    public void Write(BinaryWriter writer);
    public static BuildHeuristicProjectCollectionState Read(BinaryReader reader);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.Heuristic.BuildHeuristicResult : object {
    [CompilerGeneratedAttribute]
private bool <NeedToProoceedChildren>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ProjectChangingState> <NewProjectChangingState>k__BackingField;
    public bool NeedToProoceedChildren { get; }
    public Nullable`1<ProjectChangingState> NewProjectChangingState { get; }
    public BuildHeuristicResult(bool needToProoceedChildren, Nullable`1<ProjectChangingState> newProjectChangingState);
    [CompilerGeneratedAttribute]
public bool get_NeedToProoceedChildren();
    [CompilerGeneratedAttribute]
public Nullable`1<ProjectChangingState> get_NewProjectChangingState();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.Heuristic.DotNetCoreInstalledNuGetPackagesTracker : object {
    private IShellLocks myShellLocks;
    private ILogger myLogger;
    private IPersistentSortedMap`2<string, String[]> myCache;
    private List`1<IProject> myPendingChanges;
    private Action`1<IProject> myProjectSurfaceChangeHandler;
    public DotNetCoreInstalledNuGetPackagesTracker(Lifetime lifetime, IShellLocks shellLocks, ISolutionCaches solutionCaches, NuGetPackageReferenceTracker nuGetPackageReferenceTracker, ILogger logger);
    private void Update(IProject project, String[] installedPackages);
    public sealed virtual void SetProjectSurfaceChangeHandler(Action`1<IProject> action);
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Model.Heuristic.IBuildHeuristic {
    [NotNullAttribute]
public abstract virtual BuildHeuristicResult Proceed(IProject sourceProject, IProject targetProject, ProjectState targetState, HandleBuildEventCommand projectStateCommand);
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Model.Heuristic.IBuildHeuristicFactory {
    public abstract virtual IBuildHeuristic AcquireHeuristic(IProject project);
    public abstract virtual void InitBeforeBuildSession();
    [CanBeNullAttribute]
public abstract virtual BuildHeuristicProjectCollectionState GetState();
    public abstract virtual void InitState(BuildHeuristicProjectCollectionState state);
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Model.Heuristic.IProjectSurfaceChangeTracker {
    public abstract virtual void SetProjectSurfaceChangeHandler(Action`1<IProject> action);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.Heuristic.StupidBuildHeuristic : object {
    public sealed virtual BuildHeuristicResult Proceed(IProject sourceProject, IProject targetProject, ProjectState targetState, HandleBuildEventCommand projectStateCommand);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.Heuristic.StupidBuildHeuristicFactory : object {
    private StupidBuildHeuristic myHueristic;
    public sealed virtual void InitBeforeBuildSession();
    public sealed virtual BuildHeuristicProjectCollectionState GetState();
    public sealed virtual void InitState(BuildHeuristicProjectCollectionState state);
    public sealed virtual IBuildHeuristic AcquireHeuristic(IProject project);
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Model.IProjectStateViewModel {
    public IProperty`1<ProjectChangingState> ChangingState { get; }
    public IProperty`1<ProjectBuildingState> BuildingState { get; }
    public bool IncludedBySelection { get; }
    public abstract virtual IProperty`1<ProjectChangingState> get_ChangingState();
    public abstract virtual IProperty`1<ProjectBuildingState> get_BuildingState();
    public abstract virtual bool get_IncludedBySelection();
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Model.IProjectWithReferences {
    public IProject Project { get; }
    public IEnumerable`1<IProjectWithReferences> ReferencesToProject { get; }
    public IEnumerable`1<IProjectWithReferences> ProjectReferences { get; }
    public abstract virtual IProject get_Project();
    public abstract virtual IEnumerable`1<IProjectWithReferences> get_ReferencesToProject();
    public abstract virtual IEnumerable`1<IProjectWithReferences> get_ProjectReferences();
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Model.ISolutionDirtyState {
    public bool SolutionChanged { get; }
    public IEnumerable`1<IProject> ChangedProjects { get; }
    public IEnumerable`1<IProject> DirtyProjects { get; }
    public abstract virtual bool get_SolutionChanged();
    public abstract virtual IEnumerable`1<IProject> get_ChangedProjects();
    public abstract virtual IEnumerable`1<IProject> get_DirtyProjects();
}
internal class JetBrains.ReSharper.Features.SolBuilderDuo.Model.MutableProjectWithReferences : object {
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IProjectWithReferences> <ReferencesToProject>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IProjectWithReferences> <ProjectReferences>k__BackingField;
    public IProject Project { get; }
    public IList`1<IProjectWithReferences> ReferencesToProject { get; }
    public IList`1<IProjectWithReferences> ProjectReferences { get; }
    public MutableProjectWithReferences(IProject project);
    [CompilerGeneratedAttribute]
public IProject get_Project();
    [CompilerGeneratedAttribute]
public IList`1<IProjectWithReferences> get_ReferencesToProject();
    [CompilerGeneratedAttribute]
public IList`1<IProjectWithReferences> get_ProjectReferences();
}
public enum JetBrains.ReSharper.Features.SolBuilderDuo.Model.ProjectBuildingState : Enum {
    public int value__;
    public static ProjectBuildingState None;
    public static ProjectBuildingState HasRunningParent;
    public static ProjectBuildingState Skipped;
    public static ProjectBuildingState Running;
    public static ProjectBuildingState SuccessfulWithoutWarnings;
    public static ProjectBuildingState SuccessfulWithWarnings;
    public static ProjectBuildingState Failed;
    public static ProjectBuildingState Cleaned;
}
public enum JetBrains.ReSharper.Features.SolBuilderDuo.Model.ProjectChangingState : Enum {
    public int value__;
    public static ProjectChangingState None;
    public static ProjectChangingState White;
    public static ProjectChangingState Black;
    public static ProjectChangingState Gray;
    public static ProjectChangingState GrayToSkip;
    public static ProjectChangingState GrayToBuild;
    public static ProjectChangingState NeverBuild;
    public static ProjectChangingState AlwaysBuild;
    public static ProjectChangingState OnlyInderectReferencesChanged;
    public static ProjectChangingState BuildIsDisabled;
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.ProjectForBuildingChooseResult : object {
    [CompilerGeneratedAttribute]
private ICollection`1<IProject> <Projects>k__BackingField;
    [NotNullAttribute]
public ICollection`1<IProject> Projects { get; }
    public ProjectForBuildingChooseResult(ICollection`1<IProject> projects);
    [CompilerGeneratedAttribute]
public ICollection`1<IProject> get_Projects();
    public virtual string ToString();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.ProjectIdFactory : object {
    [NotNullAttribute]
private ILogger myLogger;
    private int myNextId;
    [NotNullAttribute]
private BidirectionalMapOnDictionary`2<IProject, int> myProjects;
    public ProjectIdFactory(ILogger logger);
    public virtual void Reset();
    [NotNullAttribute]
public RdProjectId GetOrCreateProjectId(IProject project);
    [CanBeNullAttribute]
public IProject TryGetProject(RdProjectId projectId);
    [CanBeNullAttribute]
public RdProjectId TryGetProjectId(IProject project);
    protected virtual void OnNewProjectAdded(RdProjectId res, IProject project);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.ProjectInBuildEvent : object {
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMajorProject>k__BackingField;
    [NotNullAttribute]
public IProject Project { get; }
    public bool IsMajorProject { get; }
    public ProjectInBuildEvent(IProject project, bool isMajorProject);
    [CompilerGeneratedAttribute]
public IProject get_Project();
    [CompilerGeneratedAttribute]
public bool get_IsMajorProject();
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.ProjectInputItems : object {
    private OneToListMap`2<ProjectItemOrigin, ProjectItem> myItems;
    [CompilerGeneratedAttribute]
private ProjectUniqueKey <ProjectUniqueKey>k__BackingField;
    [NotNullAttribute]
public ProjectUniqueKey ProjectUniqueKey { get; private set; }
    public ProjectInputItems(ProjectUniqueKey projectUniqueKey, IEnumerable`1<ProjectItem> items);
    [CompilerGeneratedAttribute]
public ProjectUniqueKey get_ProjectUniqueKey();
    [CompilerGeneratedAttribute]
private void set_ProjectUniqueKey(ProjectUniqueKey value);
    [NotNullAttribute]
public IEnumerable`1<ProjectItem> GetItems(ProjectItemOrigin origin);
    [NotNullAttribute]
public IEnumerable`1<ProjectItem> GetAllItems();
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.ProjectInputItemTimestampData : object {
    [CompilerGeneratedAttribute]
private DateTime <ItemTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectItem <Item>k__BackingField;
    public static IUnsafeMarshaller`1<ProjectInputItemTimestampData> Marshaller;
    public DateTime ItemTimestamp { get; public set; }
    public ProjectItem Item { get; public set; }
    public ProjectInputItemTimestampData(DateTime itemTimestamp, ProjectItem item);
    private static ProjectInputItemTimestampData();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public DateTime get_ItemTimestamp();
    [CompilerGeneratedAttribute]
public void set_ItemTimestamp(DateTime value);
    [CompilerGeneratedAttribute]
public ProjectItem get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(ProjectItem value);
    public void Write(BinaryWriter writer);
    public static ProjectInputItemTimestampData Read(BinaryReader reader);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.ProjectInputItemWithGuid : object {
    [CompilerGeneratedAttribute]
private Guid <ProjeGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <ItemPath>k__BackingField;
    public Guid ProjeGuid { get; }
    public FileSystemPath ItemPath { get; }
    public ProjectInputItemWithGuid(Guid projeGuid, FileSystemPath itemPath);
    protected bool Equals(ProjectInputItemWithGuid other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public Guid get_ProjeGuid();
    [CompilerGeneratedAttribute]
public FileSystemPath get_ItemPath();
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.ProjectsGraph : object {
    [CompilerGeneratedAttribute]
private List`1<IProjectWithReferences> <ProjectsWithReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IProjectWithReferences> <Roots>k__BackingField;
    [NotNullAttribute]
public List`1<IProjectWithReferences> ProjectsWithReferences { get; }
    [NotNullAttribute]
public List`1<IProjectWithReferences> Roots { get; }
    public ProjectsGraph(List`1<IProjectWithReferences> projectsWithReferences);
    [CompilerGeneratedAttribute]
public List`1<IProjectWithReferences> get_ProjectsWithReferences();
    [CompilerGeneratedAttribute]
public List`1<IProjectWithReferences> get_Roots();
    [CanBeNullAttribute]
public IProjectWithReferences GetProjectWithReferences(Guid projectGuid);
    public virtual string ToString();
    public string Dump();
    public static ProjectsGraph Merge(ProjectsGraph graph1, ProjectsGraph graph2);
    private static List`1<IProject> GetAbsentReferences(JetHashSet`1<IProject> projectReferences2, JetHashSet`1<IProject> projectReferences1);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.ProjectsGraphState : object {
    private Dictionary`2<ProjectUniqueKey, ProjectState> myStates;
    public static IUnsafeMarshaller`1<ProjectsGraphState> Marshaller;
    private static IUnsafeMarshaller`1<Dictionary`2<ProjectUniqueKey, ProjectState>> ourAllStatesMarshaller;
    [NotNullAttribute]
public ICollection`1<ProjectState> AllStates { get; }
    public ProjectsGraphState(Dictionary`2<ProjectUniqueKey, ProjectState> states);
    private static ProjectsGraphState();
    public ICollection`1<ProjectState> get_AllStates();
    [CanBeNullAttribute]
public ProjectState GetState(IProject project);
    [CanBeNullAttribute]
public ProjectState GetState(ProjectUniqueKey projectGuid);
    public virtual string ToString();
    public void Write(BinaryWriter writer);
    public static ProjectsGraphState Read(BinaryReader reader);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.ProjectState : object {
    private IProperty`1<ProjectChangingState> myChangingState;
    private IProperty`1<ProjectBuildingState> myBuildingState;
    [CompilerGeneratedAttribute]
private ProjectUniqueKey <ProjectUniqueKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludedBySelection>k__BackingField;
    public static IUnsafeMarshaller`1<ProjectState> Marshaller;
    private ProjectBuildingState myProjectBuildingState;
    private ILogger myLogger;
    private ProjectChangingState myProjectChangingState;
    private IProperty`1<ProjectChangingState> JetBrains.ReSharper.Features.SolBuilderDuo.Model.IProjectStateViewModel.ChangingState { get; }
    private IProperty`1<ProjectBuildingState> JetBrains.ReSharper.Features.SolBuilderDuo.Model.IProjectStateViewModel.BuildingState { get; }
    public ProjectUniqueKey ProjectUniqueKey { get; public set; }
    public bool IncludedBySelection { get; public set; }
    public ProjectChangingState ProjectChangingState { get; public set; }
    public ProjectBuildingState ProjectBuildingState { get; public set; }
    public ProjectState(IProject project);
    public ProjectState(ProjectUniqueKey projectUniqueKey, bool includedBySelection, ProjectChangingState projectChangingState, ProjectBuildingState projectBuildingState);
    private static ProjectState();
    private sealed virtual override IProperty`1<ProjectChangingState> JetBrains.ReSharper.Features.SolBuilderDuo.Model.IProjectStateViewModel.get_ChangingState();
    private sealed virtual override IProperty`1<ProjectBuildingState> JetBrains.ReSharper.Features.SolBuilderDuo.Model.IProjectStateViewModel.get_BuildingState();
    [CompilerGeneratedAttribute]
public ProjectUniqueKey get_ProjectUniqueKey();
    [CompilerGeneratedAttribute]
public void set_ProjectUniqueKey(ProjectUniqueKey value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IncludedBySelection();
    [CompilerGeneratedAttribute]
public void set_IncludedBySelection(bool value);
    public ProjectChangingState get_ProjectChangingState();
    public void set_ProjectChangingState(ProjectChangingState value);
    public ProjectBuildingState get_ProjectBuildingState();
    public void set_ProjectBuildingState(ProjectBuildingState value);
    public virtual string ToString();
    public static ProjectState TryParse(string str);
    private void InitViewModel();
    public void Write(BinaryWriter writer);
    public static ProjectState Read(BinaryReader reader);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Features.SolBuilderDuo.Model.ProjectStateUtil : object {
    [ExtensionAttribute]
public static bool IsFinishedState(ProjectBuildingState state);
    [ExtensionAttribute]
public static bool IsFinishedStateForCleaning(ProjectBuildingState state);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.ProjectsWithReferencesEqualityComparer : object {
    public static ProjectsWithReferencesEqualityComparer Instance;
    private static ProjectsWithReferencesEqualityComparer();
    public sealed virtual bool Equals(ProjectsGraph x, ProjectsGraph y);
    public sealed virtual int GetHashCode(ProjectsGraph obj);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.ProjectTimestampData : object {
    [CompilerGeneratedAttribute]
private ProjectUniqueKey <ProjectUniqueKey>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ProjectTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ProjectInputItemTimestampData> <InputTimestampData>k__BackingField;
    public static IUnsafeMarshaller`1<ProjectTimestampData> Marshaller;
    public static IUnsafeMarshaller`1<List`1<ProjectInputItemTimestampData>> InputTimestampDataMarshaller;
    public ProjectUniqueKey ProjectUniqueKey { get; }
    public DateTime ProjectTimestamp { get; public set; }
    public List`1<ProjectInputItemTimestampData> InputTimestampData { get; public set; }
    public ProjectTimestampData(DateTime projectTimestamp, List`1<ProjectInputItemTimestampData> inputTimestampData, ProjectUniqueKey projectUniqueKey);
    private static ProjectTimestampData();
    [CompilerGeneratedAttribute]
public ProjectUniqueKey get_ProjectUniqueKey();
    [CompilerGeneratedAttribute]
public DateTime get_ProjectTimestamp();
    [CompilerGeneratedAttribute]
public void set_ProjectTimestamp(DateTime value);
    [CompilerGeneratedAttribute]
public List`1<ProjectInputItemTimestampData> get_InputTimestampData();
    [CompilerGeneratedAttribute]
public void set_InputTimestampData(List`1<ProjectInputItemTimestampData> value);
    public virtual string ToString();
    public void Write(BinaryWriter writer);
    public static ProjectTimestampData Read(BinaryReader reader);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.ProjectUniqueKey : object {
    public static ProjectUniqueKey NullProjectUniqueKey;
    [CompilerGeneratedAttribute]
private Guid <ProjectGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    public static IUnsafeMarshaller`1<ProjectUniqueKey> Marshaller;
    public Guid ProjectGuid { get; public set; }
    public string ProjectName { get; public set; }
    public ProjectUniqueKey(IProject project);
    private static ProjectUniqueKey();
    [CompilerGeneratedAttribute]
public Guid get_ProjectGuid();
    [CompilerGeneratedAttribute]
public void set_ProjectGuid(Guid value);
    [CompilerGeneratedAttribute]
public string get_ProjectName();
    [CompilerGeneratedAttribute]
public void set_ProjectName(string value);
    protected bool Equals(ProjectUniqueKey other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static ProjectUniqueKey TryParse(string str);
    public void Write(BinaryWriter writer);
    public static ProjectUniqueKey Read(BinaryReader reader);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.ProjectWithReferences : object {
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ProjectWithReferences> <ReferencesToProject>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ProjectWithReferences> <ProjectReferences>k__BackingField;
    public IProject Project { get; }
    public IList`1<ProjectWithReferences> ReferencesToProject { get; }
    public IList`1<ProjectWithReferences> ProjectReferences { get; }
    private IProject JetBrains.ReSharper.Features.SolBuilderDuo.Model.IProjectWithReferences.Project { get; }
    private IEnumerable`1<IProjectWithReferences> JetBrains.ReSharper.Features.SolBuilderDuo.Model.IProjectWithReferences.ReferencesToProject { get; }
    private IEnumerable`1<IProjectWithReferences> JetBrains.ReSharper.Features.SolBuilderDuo.Model.IProjectWithReferences.ProjectReferences { get; }
    public ProjectWithReferences(IProject project, IList`1<ProjectWithReferences> referencesToProject, IList`1<ProjectWithReferences> projectReferences);
    [CompilerGeneratedAttribute]
public IProject get_Project();
    [CompilerGeneratedAttribute]
public IList`1<ProjectWithReferences> get_ReferencesToProject();
    [CompilerGeneratedAttribute]
public IList`1<ProjectWithReferences> get_ProjectReferences();
    private sealed virtual override IProject JetBrains.ReSharper.Features.SolBuilderDuo.Model.IProjectWithReferences.get_Project();
    private sealed virtual override IEnumerable`1<IProjectWithReferences> JetBrains.ReSharper.Features.SolBuilderDuo.Model.IProjectWithReferences.get_ReferencesToProject();
    private sealed virtual override IEnumerable`1<IProjectWithReferences> JetBrains.ReSharper.Features.SolBuilderDuo.Model.IProjectWithReferences.get_ProjectReferences();
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.ProjectWithReferencesByProjectGuidComparer : object {
    public static ProjectWithReferencesByProjectGuidComparer Instance;
    private static ProjectWithReferencesByProjectGuidComparer();
    public sealed virtual bool Equals(IProjectWithReferences x, IProjectWithReferences y);
    public sealed virtual int GetHashCode(IProjectWithReferences obj);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.ProjectWithReferencesEqualityComparer : object {
    public static ProjectWithReferencesEqualityComparer Instance;
    private static ProjectWithReferencesEqualityComparer();
    public sealed virtual bool Equals(IProjectWithReferences x, IProjectWithReferences y);
    public sealed virtual int GetHashCode(IProjectWithReferences obj);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.ProjectWithReferencesStrictComparer : object {
    public static ProjectWithReferencesStrictComparer Instance;
    private static ProjectWithReferencesStrictComparer();
    public sealed virtual bool Equals(IProjectWithReferences x, IProjectWithReferences y);
    public sealed virtual int GetHashCode(IProjectWithReferences obj);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.SolBuildEventKindToBugTypeConverter : object {
    public static SolBuildEventKindToBugTypeConverter Instance;
    private static SolBuildEventKindToBugTypeConverter();
    public BuildEventType Convert(SolBuildEventKind eventKind);
    public SolBuildEventKind ConvertBack(BuildEventType buildEventType);
    public SolBuildEventKind ConvertBack(BuildEventKind buildEventKind);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.SolutionBuilderCacheData : object {
    [CompilerGeneratedAttribute]
private ProjectsGraph <ProjectsGraph>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectsGraphState <ProjectsGraphState>k__BackingField;
    [CompilerGeneratedAttribute]
private SolutionTimestampData <SolutionTimestampData>k__BackingField;
    public ProjectsGraph ProjectsGraph { get; }
    public ProjectsGraphState ProjectsGraphState { get; }
    public SolutionTimestampData SolutionTimestampData { get; }
    public SolutionBuilderCacheData(ProjectsGraph projectsGraph, ProjectsGraphState projectsGraphState, SolutionTimestampData solutionTimestampData);
    [CompilerGeneratedAttribute]
public ProjectsGraph get_ProjectsGraph();
    [CompilerGeneratedAttribute]
public ProjectsGraphState get_ProjectsGraphState();
    [CompilerGeneratedAttribute]
public SolutionTimestampData get_SolutionTimestampData();
}
[SettingsKeyAttribute("JetBrains.ProjectModel.Settings.Schema.BuildSettings", "JetBrains.ReSharper.Features.SolBuilderDuo.Resources.Strings", "BuildWithSolBuilderDuoSettingDescription")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.SolutionBuilderNextSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.SolBuilderDuo.Resources.Strings", "VersionOfMSBuildToUseWhenBuildingMeansasTheRuntimeVersionOfTheApplicationInitiatingTheBuildInCaseOfVisualStudioThisIsTheSameMSBuildVSItselfUsesForBuildingFFFFFFFFMeansUseTheHighestVersionAvailableOnThisMachineAnyOtherNumberHIWORDIsTheMajorVersionNumberLOWORDIsTheMinorVersionNumberSettingDescription")]
public UInt32 MsbuildVersion;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.SolBuilderDuo.Resources.Strings", "NumberOfProcessesRunningInParallelSettingDescription")]
public int ParallelProcessesCount2;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.SolBuilderDuo.Resources.Strings", "EnableLoggerInsideMSBuildProcessToFileStoringToTempFolderSettingDescription")]
public bool EnableLogging;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.SolBuilderDuo.Resources.Strings", "EnableAdvancedLogsInDocumentChangeTrackerSettingDescription")]
public bool AdvancedLogInDocumentChangeTracker;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.SolBuilderDuo.Resources.Strings", "ProjectsShouldBeAlwaysBuiltIndependentlyFromHeuristicSettingDescription")]
public string AlwaysBuildProjects;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.SolBuilderDuo.Resources.Strings", "ProjectsShouldBeNeverBuiltIndependentlyFromHeuristicSettingDescription")]
public string NeverBuildProjects;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.SolBuilderDuo.Resources.Strings", "RestoreNuGetPackagesBeforeBuildSettingDescription")]
public bool ShouldRestoreNugetPackages;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.SolBuilderDuo.Resources.Strings", "CheckBuildStateBeforeBuildingProjectSettingDescription")]
public bool ShouldCheckGraphState;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.SolBuilderDuo.Resources.Strings", "DirectoryForFileLoggerSettingDescription")]
public string FileLoggerFolder;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.SolBuilderDuo.Resources.Strings", "WriteLogToOutputSettingDescription")]
public bool LogToOutput;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.SolBuilderDuo.Resources.Strings", "VerbosityOfOutputLoggerSettingDescription")]
public RdVerbosityLevel OutputVerbosityLevel;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.SolBuilderDuo.Resources.Strings", "WriteLogToFileSettingDescription")]
public bool LogToFile;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.SolBuilderDuo.Resources.Strings", "VerbosityOfFileLoggerSettingDescription")]
public RdVerbosityLevel FileVerbosityLevel;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.SolBuilderDuo.Resources.Strings", "FolderForFileLoggerSettingDescription")]
public string UserFileLoggerFolder;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.SolBuilderDuo.Resources.Strings", "WriteErrorsToOutputSettingDescription")]
public bool LogErrorsToOutput;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.SolBuilderDuo.Resources.Strings", "WriteWarningsToOutputSettingDescription")]
public bool LogWarningsToOutput;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.SolBuilderDuo.Resources.Strings", "WriteMessagesToOutputSettingDescription")]
public bool LogMessagesToOutput;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.SolBuilderDuo.Resources.Strings", "WriteConsoleLogToOutputSettingDescription")]
public bool LogConsoleToOutput;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.SolBuilderDuo.Resources.Strings", "UseNewLogModeSettingDescription")]
public bool NewLogMode;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.SolBuilderDuo.Resources.Strings", "DumpBuildStatesBeforeBuildSettingDescription")]
public bool StoreStatesForDumper;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.SolBuilderDuo.Resources.Strings", "InvokePreAndPostBuildEventTargetsForSkippedProjectsSettingDescription")]
public bool InvokePreAndPostBuildEventTargetsForSkippedProjects;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.SolBuilderDuo.Resources.Strings", "InvokeBeforeBuildAndAfterBuildTargetsForSkippedProjectsSettingDescription")]
public bool InvokeBeforeBuildAndAfterBuildTargetsForSkippedProjects;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.SolBuilderDuo.Resources.Strings", "PassVisualStudioParametersToTheBuildSettingDescription")]
public bool PassVisualStudioParameters;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.SolBuilderDuo.Resources.Strings", "AddDesignTimeItemsToChangeTrackingSettingDescription")]
public bool IncludeAllItemsToTracking;
}
public static class JetBrains.ReSharper.Features.SolBuilderDuo.Model.SolutionBuilderNextSettingsUtil : object {
    private static char Separator;
    public static int NodesCountForMsBuild(IContextBoundSettingsStore settingsStore, bool useDotNetCoreForLaunch);
    public static string GetSettingsValueFromIdList(IEnumerable`1<Guid> ids);
    public static JetHashSet`1<Guid> GetIdListFromSettingsValue(string settingsValue);
    public static bool GetLogToOutput(IContextBoundSettingsStore settingsStore);
    public static bool GetLogErrorsToOutput(IContextBoundSettingsStore settingsStore);
    public static bool GetLogWarningsToOutput(IContextBoundSettingsStore settingsStore);
    public static bool GetLogMessagesToOutput(IContextBoundSettingsStore settingsStore);
    public static bool GetLogConsoleToOutput(IContextBoundSettingsStore settingsStore);
    public static RdVerbosityLevel GetOutputVerbosityLevel(IContextBoundSettingsStore settingsStore);
    public static bool GetLogToFile(IContextBoundSettingsStore settingsStore);
    public static RdVerbosityLevel GetFileVerbosityLevel(IContextBoundSettingsStore settingsStore);
    public static bool GetNewLogMode(IContextBoundSettingsStore settingsStore);
    public static bool EnableLogging(IContextBoundSettingsStore settingsStore);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Features.SolBuilderDuo.Model.SolutionBuilderProcessKindUtil : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static string ToMsBuildTargetName(IBuildSessionTarget target);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.SolutionBuilderProgress : object {
    [CompilerGeneratedAttribute]
private Guid <SessionGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NotSkippedProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SkippedProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FinishedProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildProgressKind <BuildProgressKind>k__BackingField;
    [CompilerGeneratedAttribute]
private SolutionBuilderRequest <Request>k__BackingField;
    public Guid SessionGuid { get; }
    public int TotalProjects { get; }
    public int NotSkippedProjects { get; }
    public int SkippedProjects { get; }
    public int FinishedProjects { get; }
    public BuildProgressKind BuildProgressKind { get; }
    public SolutionBuilderRequest Request { get; }
    public SolutionBuilderProgress(Guid sessionGuid, int totalProjects, int skippedProjects, int finishedProjects, BuildProgressKind buildProgressKind, SolutionBuilderRequest request);
    [CompilerGeneratedAttribute]
public Guid get_SessionGuid();
    [CompilerGeneratedAttribute]
public int get_TotalProjects();
    [CompilerGeneratedAttribute]
public int get_NotSkippedProjects();
    [CompilerGeneratedAttribute]
public int get_SkippedProjects();
    [CompilerGeneratedAttribute]
public int get_FinishedProjects();
    [CompilerGeneratedAttribute]
public BuildProgressKind get_BuildProgressKind();
    [CompilerGeneratedAttribute]
public SolutionBuilderRequest get_Request();
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.SolutionDirtyState : object {
    [CompilerGeneratedAttribute]
private bool <SolutionChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private JetHashSet`1<IProject> <ChangedProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private JetHashSet`1<IProject> <DirtyProjects>k__BackingField;
    public bool SolutionChanged { get; public set; }
    public JetHashSet`1<IProject> ChangedProjects { get; }
    public JetHashSet`1<IProject> DirtyProjects { get; }
    private bool JetBrains.ReSharper.Features.SolBuilderDuo.Model.ISolutionDirtyState.SolutionChanged { get; }
    private IEnumerable`1<IProject> JetBrains.ReSharper.Features.SolBuilderDuo.Model.ISolutionDirtyState.ChangedProjects { get; }
    private IEnumerable`1<IProject> JetBrains.ReSharper.Features.SolBuilderDuo.Model.ISolutionDirtyState.DirtyProjects { get; }
    [CompilerGeneratedAttribute]
public bool get_SolutionChanged();
    [CompilerGeneratedAttribute]
public void set_SolutionChanged(bool value);
    [CompilerGeneratedAttribute]
public JetHashSet`1<IProject> get_ChangedProjects();
    [CompilerGeneratedAttribute]
public JetHashSet`1<IProject> get_DirtyProjects();
    public void Clear(SolutionDirtyStateResetMode reset);
    private sealed virtual override bool JetBrains.ReSharper.Features.SolBuilderDuo.Model.ISolutionDirtyState.get_SolutionChanged();
    private sealed virtual override IEnumerable`1<IProject> JetBrains.ReSharper.Features.SolBuilderDuo.Model.ISolutionDirtyState.get_ChangedProjects();
    private sealed virtual override IEnumerable`1<IProject> JetBrains.ReSharper.Features.SolBuilderDuo.Model.ISolutionDirtyState.get_DirtyProjects();
    public SolutionDirtyState Clone();
    public virtual string ToString();
}
public enum JetBrains.ReSharper.Features.SolBuilderDuo.Model.SolutionDirtyStateResetMode : Enum {
    public int value__;
    public static SolutionDirtyStateResetMode None;
    public static SolutionDirtyStateResetMode All;
    public static SolutionDirtyStateResetMode OnlyChangedProjects;
    public static SolutionDirtyStateResetMode OnlyRequestedProject;
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.SolutionStoringState : object {
    [CompilerGeneratedAttribute]
private DateTime <LastBuildTime>k__BackingField;
    [CompilerGeneratedAttribute]
private SolutionTimestampData <SolutionTimestampData>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectsGraphState <CurrentProjectsGraphState>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildHeuristicProjectCollectionState <HeuristicState>k__BackingField;
    public static SolutionStoringState Empty;
    public static IUnsafeMarshaller`1<SolutionStoringState> Marshaller;
    public DateTime LastBuildTime { get; public set; }
    public SolutionTimestampData SolutionTimestampData { get; }
    public ProjectsGraphState CurrentProjectsGraphState { get; }
    [CanBeNullAttribute]
public BuildHeuristicProjectCollectionState HeuristicState { get; }
    public SolutionStoringState(DateTime lastBuildTime, SolutionTimestampData solutionTimestampData, ProjectsGraphState currentProjectsGraphState, BuildHeuristicProjectCollectionState heuristicState);
    private static SolutionStoringState();
    [CompilerGeneratedAttribute]
public DateTime get_LastBuildTime();
    [CompilerGeneratedAttribute]
public void set_LastBuildTime(DateTime value);
    [CompilerGeneratedAttribute]
public SolutionTimestampData get_SolutionTimestampData();
    [CompilerGeneratedAttribute]
public ProjectsGraphState get_CurrentProjectsGraphState();
    [CompilerGeneratedAttribute]
public BuildHeuristicProjectCollectionState get_HeuristicState();
    public void Write(BinaryWriter writer);
    [CanBeNullAttribute]
internal static SolutionStoringState Read(BinaryReader reader);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Model.SolutionTimestampData : object {
    [CompilerGeneratedAttribute]
private DateTime <SolutionTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ProjectTimestampData> <ProjectsTimestampData>k__BackingField;
    public static IUnsafeMarshaller`1<SolutionTimestampData> Marshaller;
    public static IUnsafeMarshaller`1<List`1<ProjectTimestampData>> ProjectsTimestampDataMarshaller;
    public DateTime SolutionTimestamp { get; }
    public List`1<ProjectTimestampData> ProjectsTimestampData { get; }
    public SolutionTimestampData(DateTime solutionTimestamp, List`1<ProjectTimestampData> projectsTimestampData);
    private static SolutionTimestampData();
    [CompilerGeneratedAttribute]
public DateTime get_SolutionTimestamp();
    [CompilerGeneratedAttribute]
public List`1<ProjectTimestampData> get_ProjectsTimestampData();
    public void Write(BinaryWriter writer);
    public static SolutionTimestampData Read(BinaryReader reader);
}
[ShellComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Options.BuilderNewPresentationMarker : object {
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Options.IBuilderNewPresentationMarker {
}
[OptionsPageAttribute("SolutionBuilderInternalOptionsPage", "Internal", "JetBrains.Application.Resources.IdeThemedIcons/InternalPage")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Options.Internal.SolutionBuilderInternalOptionsPage : BeSimpleOptionsPage {
    public static string PID;
    public SolutionBuilderInternalOptionsPage(Lifetime lifetime, OptionsPageContext optionsPageContext, OptionsSettingsSmartContext optionsSettingsSmartContext, ILogFolderProvider logFolderProvider, IconHostBase iconHost, ICommonFileDialogs dialogs);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Options.Internal.ZoneMarker : object {
}
[OptionsPageAttribute("SolutionBuilderGeneralOptionsPage", "General", "JetBrains.ReSharper.Features.SolBuilderDuo.Src.SolBuilderDuoThemedIcons/SolBuilderDuoBuildPolicy")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Options.SolutionBuilderGeneralOptionsPage : BeSimpleOptionsPage {
    public static string PID;
    private ISolution mySolution;
    public SolutionBuilderGeneralOptionsPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, OptionsPageContext optionsPageContext, SolutionBuilderGeneralOptionsPageContext pageContext, IIconHost iconHost, HelpSystem helpSystem, DotNetCoreInstallationsDetector dotNetCoreInstallationsDetector, JetBrainsResourceMappingAccessor resourceMappingAccessor, INugetRestorerFactory nuGetRestorerFactory, ISolution solution);
    [NotNullAttribute]
private ToolsetChooserControl AddToolsetOptions(Lifetime lifetime, DotNetCoreInstallationsDetector dotNetCoreInstallationsDetector);
    private void AddPlatformSpecificSdkOptions(Lifetime lifetime, DotNetCoreInstallationsDetector dotNetCoreInstallationsDetector);
    private void AddBuildOptions(Lifetime lifetime, IViewableProperty`1<Nullable`1<bool>> enableReSharperBuild, INugetRestorerFactory nuGetRestorerFactory);
    private void AddPassVisualStudioParameters(Lifetime lifetime, SolutionBuilderGeneralOptionsPageContext pageContext, BeCheckbox useReSharperBuildCheckbox);
    private void AddDesignTimeBuildOptions(Lifetime lifetime, ToolsetChooserControl buildToolControl);
    private void AddBuildLoggingOptions(Lifetime lifetime, IViewableProperty`1<Nullable`1<bool>> enableReSharperBuild);
    private string GetVerbosityPresentation(RdVerbosityLevel value);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Options.SolutionBuilderGeneralOptionsPageContext : object {
    private IBuilderNewPresentationMarker myBuilderNewPresentationMarker;
    public bool BuildParametersOnlyForIncrementalBuild { get; }
    public bool ShowBuildParametersPaintOutput { get; }
    public bool ShowBuildBuildResultsViewOptions { get; }
    public bool ShowBuildWithoutSmartness { get; }
    public bool ShowBuildTreeIfEventsPresentOption { get; }
    public bool ShowFullPathsInConsole { get; }
    public bool ShowNewPresentationOptions { get; }
    public bool ShowBuildProgressInTaskBarOptions { get; }
    public bool ShowPassVisualStudioParameters { get; }
    public bool AlwaysEnablePresentationOptions { get; }
    public string ShowBuildProgressInTaskBarOptionsTitle { get; }
    public SolutionBuilderGeneralOptionsPageContext(IBuilderNewPresentationMarker builderNewPresentationMarker);
    public virtual bool get_BuildParametersOnlyForIncrementalBuild();
    public virtual bool get_ShowBuildParametersPaintOutput();
    public virtual bool get_ShowBuildBuildResultsViewOptions();
    public virtual bool get_ShowBuildWithoutSmartness();
    public virtual bool get_ShowBuildTreeIfEventsPresentOption();
    public virtual bool get_ShowFullPathsInConsole();
    public virtual bool get_ShowNewPresentationOptions();
    public virtual bool get_ShowBuildProgressInTaskBarOptions();
    public virtual bool get_ShowPassVisualStudioParameters();
    public virtual bool get_AlwaysEnablePresentationOptions();
    public virtual string get_ShowBuildProgressInTaskBarOptionsTitle();
}
[OptionsPageAttribute("SolutionBuilderOptionsPage", "Build", "JetBrains.ReSharper.Features.SolBuilderDuo.Src.SolBuilderDuoThemedIcons/SolBuilderDuoBuild")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Options.SolutionBuilderOptionsPage : AEmptyOptionsPage {
    public static string PID;
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Options.SolutionBuilderPageUtil : object {
    public static BeControl GetLoggerFolderViewModel(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, ILogFolderProvider logFolderProvider, Expression`1<Func`2<SolutionBuilderNextSettings, string>> getLoggerFolderExpression, string propertySuffix, Icon icon, Func`9<IProperty`1<FileSystemPath>, string, FileSystemPath, FileSystemPath, bool, Func`2<FileSystemPath, string>, bool, Icon, BeControl> folderChooserOptionFactory);
}
[OptionsPageAttribute("SolutionBuilderPresentationOptionsPage", "Presentation", "JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons/Appearance")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Options.SolutionBuilderPresentationOptionsPage : BeSimpleOptionsPage {
    private Lifetime myLifetime;
    private static string PID;
    public SolutionBuilderPresentationOptionsPage(Lifetime lifetime, OptionsPageContext optionsPageContext, OptionsSettingsSmartContext optionsSettingsSmartContext, SolutionBuilderGeneralOptionsPageContext pageContext);
    private List`1<BeControl> AddOptionsOnlyForOldPresentation(SolutionBuilderGeneralOptionsPageContext pageContext);
    private BeCheckbox CreateDisableSmartnessOption(BeCheckbox showProgressOption);
    private List`1<BeControl> AddOptionsForNewAndOldPresentation(SolutionBuilderGeneralOptionsPageContext pageContext);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Options.Tables.PropertiesListControl : TableDialogControlBase`1<PropertyEntry> {
    protected string Title { get; }
    protected string Description { get; }
    public PropertiesListControl(Lifetime lifetime, IContextBoundSettingsStore settingsStore);
    protected virtual string get_Title();
    protected virtual string get_Description();
    protected virtual IEnumerable`1<PropertyEntry> GetEntries();
    protected virtual IEnumerable`1<PropertyEntry> FilterEntries(IEnumerable`1<PropertyEntry> entries);
    protected virtual void SaveEntries(IEnumerable`1<PropertyEntry> entries);
    protected virtual IEnumerable`1<string> GetColumns();
    protected virtual IEnumerable`1<Pair`2<Property`1<string>, Func`2<string, string>>> GetRows(PropertyEntry entry);
    private IDictionary`2<string, string> GetPropertiesFromSettings();
}
public abstract class JetBrains.ReSharper.Features.SolBuilderDuo.Options.Tables.TableDialogControlBase`1 : object {
    protected Lifetime Lifetime;
    protected IContextBoundSettingsStore SettingsStore;
    protected Property`1<string> Property;
    [NotNullAttribute]
protected string Title { get; }
    [NotNullAttribute]
protected string Description { get; }
    protected TableDialogControlBase`1(Lifetime lifetime, IContextBoundSettingsStore settingsStore);
    protected abstract virtual string get_Title();
    protected abstract virtual string get_Description();
    [NotNullAttribute]
protected abstract virtual IEnumerable`1<T> GetEntries();
    [NotNullAttribute]
protected abstract virtual IEnumerable`1<T> FilterEntries(IEnumerable`1<T> entries);
    protected abstract virtual void SaveEntries(IEnumerable`1<T> entries);
    [NotNullAttribute]
protected abstract virtual IEnumerable`1<string> GetColumns();
    [NotNullAttribute]
protected abstract virtual IEnumerable`1<Pair`2<Property`1<string>, Func`2<string, string>>> GetRows(T entry);
    public ValueTuple`2<BeControl, BeButton> CreateControl();
    [NotNullAttribute]
private BeControl CreateDialogContent(Lifetime dialogLifetime, TableDialogModel<T> model);
    [NotNullAttribute]
private BeControl CreateCellTextBox(Lifetime lifetime, Property`1<string> property, Func`2<string, string> validationRule);
    [NotNullAttribute]
private string CalculatePresentableValue(IEnumerable`1<T> entries);
    [CompilerGeneratedAttribute]
private BeDialog <CreateControl>b__13_0();
    [CompilerGeneratedAttribute]
private List`1<BeControl> <CreateDialogContent>b__14_0(Lifetime entryLt, T line, ListNodeProperties _);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Options.Tables.TargetsListControl : TableDialogControlBase`1<TargetEntry> {
    protected string Title { get; }
    protected string Description { get; }
    public TargetsListControl(Lifetime lifetime, IContextBoundSettingsStore settingsStore);
    protected virtual string get_Title();
    protected virtual string get_Description();
    protected virtual IEnumerable`1<TargetEntry> GetEntries();
    protected virtual IEnumerable`1<TargetEntry> FilterEntries(IEnumerable`1<TargetEntry> entries);
    protected virtual void SaveEntries(IEnumerable`1<TargetEntry> entries);
    protected virtual IEnumerable`1<string> GetColumns();
    protected virtual IEnumerable`1<Pair`2<Property`1<string>, Func`2<string, string>>> GetRows(TargetEntry entry);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Options.Toolsets.BuildToolOptionProvider : ToolsetOptionProvider {
    public string Title { get; }
    protected Expression`1<Func`2<BuildToolSettings, IIndexedEntry`2<string, bool>>> RecentExpression { get; }
    public virtual string get_Title();
    protected virtual Expression`1<Func`2<BuildToolSettings, IIndexedEntry`2<string, bool>>> get_RecentExpression();
    public virtual ToolsetOptionValue GetCurrentToolset(IContextBoundSettingsStore settingsStore, IReadOnlyCollection`1<ToolsetOptionValue> knownToolsets, VirtualFileSystemPath solutionRoot);
    public virtual void SetCurrentToolset(IContextBoundSettingsStore settingsStore, ToolsetOptionValue toolset);
    public virtual IReadOnlyCollection`1<ToolsetOptionValue> GetAvailableToolsets(IContextBoundSettingsStore settingsStore, ISolution solution);
    public virtual ToolsetOptionValue CreateToolsetFromPath(VirtualFileSystemPath path, String& error);
    private static ToolsetOptionValue Create(IBuildTool buildTool, UInt32 key, string versionPrefix);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Options.Toolsets.BuildToolProjectFilesReader : object {
    public virtual IReadOnlyCollection`1<VirtualFileSystemPath> GetProjectPaths(ISolution solution);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Options.Toolsets.DotNetToolsetOptionProvider : PathBasedToolsetOptionProvider {
    protected DotNetCoreInstallationsDetector myDotNetCoreInstallationsDetector;
    public string Title { get; }
    protected Expression`1<Func`2<BuildToolSettings, string>> CurrentExpression { get; }
    protected Expression`1<Func`2<BuildToolSettings, IIndexedEntry`2<string, bool>>> RecentExpression { get; }
    public DotNetToolsetOptionProvider(DotNetCoreInstallationsDetector dotNetCoreInstallationsDetector);
    public virtual string get_Title();
    protected virtual Expression`1<Func`2<BuildToolSettings, string>> get_CurrentExpression();
    protected virtual Expression`1<Func`2<BuildToolSettings, IIndexedEntry`2<string, bool>>> get_RecentExpression();
    public virtual IReadOnlyCollection`1<ToolsetOptionValue> GetAvailableToolsets(IContextBoundSettingsStore settingsStore, ISolution solution);
    public virtual ToolsetOptionValue GetCurrentToolset(IContextBoundSettingsStore settingsStore, IReadOnlyCollection`1<ToolsetOptionValue> knownToolsets, VirtualFileSystemPath solutionRoot);
    public virtual ToolsetOptionValue CreateToolsetFromPath(VirtualFileSystemPath path, String& error);
    [NotNullAttribute]
protected ToolsetOptionValue Create(IDotNetCoreCli cli, ToolsetOptionSource source, string pathPresentation);
    [NotNullAttribute]
private ToolsetOptionValue CreateInvalid(VirtualFileSystemPath path, string errorMessage);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Options.Toolsets.DotNetX64ToolsetOptionProvider : DotNetToolsetOptionProvider {
    public string Title { get; }
    protected Expression`1<Func`2<BuildToolSettings, string>> CurrentExpression { get; }
    protected Expression`1<Func`2<BuildToolSettings, IIndexedEntry`2<string, bool>>> RecentExpression { get; }
    public DotNetX64ToolsetOptionProvider(DotNetCoreInstallationsDetector dotNetCoreInstallationsDetector);
    public virtual string get_Title();
    protected virtual Expression`1<Func`2<BuildToolSettings, string>> get_CurrentExpression();
    protected virtual Expression`1<Func`2<BuildToolSettings, IIndexedEntry`2<string, bool>>> get_RecentExpression();
    public virtual IReadOnlyCollection`1<ToolsetOptionValue> GetAvailableToolsets(IContextBoundSettingsStore settingsStore, ISolution solution);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Options.Toolsets.DotNetX86ToolsetOptionProvider : DotNetToolsetOptionProvider {
    public string Title { get; }
    protected Expression`1<Func`2<BuildToolSettings, string>> CurrentExpression { get; }
    protected Expression`1<Func`2<BuildToolSettings, IIndexedEntry`2<string, bool>>> RecentExpression { get; }
    public DotNetX86ToolsetOptionProvider(DotNetCoreInstallationsDetector dotNetCoreInstallationsDetector);
    public virtual string get_Title();
    protected virtual Expression`1<Func`2<BuildToolSettings, string>> get_CurrentExpression();
    protected virtual Expression`1<Func`2<BuildToolSettings, IIndexedEntry`2<string, bool>>> get_RecentExpression();
    public virtual IReadOnlyCollection`1<ToolsetOptionValue> GetAvailableToolsets(IContextBoundSettingsStore settingsStore, ISolution solution);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Options.Toolsets.MonoToolsetOptionProvider : PathBasedToolsetOptionProvider {
    public string Title { get; }
    protected Expression`1<Func`2<BuildToolSettings, string>> CurrentExpression { get; }
    protected Expression`1<Func`2<BuildToolSettings, IIndexedEntry`2<string, bool>>> RecentExpression { get; }
    public virtual string get_Title();
    protected virtual Expression`1<Func`2<BuildToolSettings, string>> get_CurrentExpression();
    protected virtual Expression`1<Func`2<BuildToolSettings, IIndexedEntry`2<string, bool>>> get_RecentExpression();
    public virtual IReadOnlyCollection`1<ToolsetOptionValue> GetAvailableToolsets(IContextBoundSettingsStore settingsStore, ISolution solution);
    public virtual ToolsetOptionValue CreateToolsetFromPath(VirtualFileSystemPath path, String& error);
    private ToolsetOptionValue Create(MonoRuntime monoRuntime, ToolsetOptionSource source, string pathPresentation);
}
public abstract class JetBrains.ReSharper.Features.SolBuilderDuo.Options.Toolsets.PathBasedToolsetOptionProvider : ToolsetOptionProvider {
    [NotNullAttribute]
protected Expression`1<Func`2<BuildToolSettings, string>> CurrentExpression { get; }
    protected abstract virtual Expression`1<Func`2<BuildToolSettings, string>> get_CurrentExpression();
    public virtual ToolsetOptionValue GetCurrentToolset(IContextBoundSettingsStore settingsStore, IReadOnlyCollection`1<ToolsetOptionValue> knownToolsets, VirtualFileSystemPath solutionRoot);
    public virtual void SetCurrentToolset(IContextBoundSettingsStore settingsStore, ToolsetOptionValue toolset);
    protected static ToolsetOptionValue Create(VirtualFileSystemPath path, ToolsetOptionSource source, string pathPresentation, string tooltip);
}
public static class JetBrains.ReSharper.Features.SolBuilderDuo.Options.Toolsets.PathUniqueficatorUtil : object {
    private static String[] ourAlwaysIncludeInPath;
    private static PathUniqueficatorUtil();
    private static bool HasMoreNumbersThanLetters(string str);
    [NotNullAttribute]
public static Dictionary`2<VirtualFileSystemPath, string> FixPaths(IReadOnlyCollection`1<VirtualFileSystemPath> paths);
    private static int CalculatePathPartWeight(string part, int idx, Dictionary`2<string, int> pathPartCounts);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Options.Toolsets.ProcessCountControl`1 : object {
    private Lifetime myLifetime;
    [NotNullAttribute]
private Property`1<int> myValue;
    [NotNullAttribute]
private Property`1<RichText> myDefaultCountText;
    public ProcessCountControl`1(Lifetime lifetime, IContextBoundSettingsStore settingsStore, Expression`1<Func`2<T, int>> settingFunc, int defaultCount);
    public void SetDefaultCount(int defaultCount);
    public BeControl CreateControl();
    [NotNullAttribute]
private RichText PresentDefault(int count);
    [NotNullAttribute]
private BeControl Present(int count);
    [CompilerGeneratedAttribute]
private BeControl <CreateControl>b__5_0(Lifetime _, int count, ComboItemProperties _);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Options.Toolsets.ToolsetChooserControl : object {
    private Lifetime myLifetime;
    [NotNullAttribute]
private ToolsetOptionProvider myProvider;
    [NotNullAttribute]
private IContextBoundSettingsStore mySettingsStore;
    [CanBeNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
public Property`1<ToolsetOptionValue> Current;
    [NotNullAttribute]
public ListEvents`1<ToolsetOptionValue> AllPossibleValues;
    [NotNullAttribute]
public Signal`1<ToolsetOptionValue> OnChange;
    public ToolsetChooserControl(Lifetime lifetime, ToolsetOptionProvider provider, IContextBoundSettingsStore settingsStore, ISolution solution);
    public void ReloadModel();
    public void AddControl(BeSpanGrid container, OptionsPageContext context);
    private void AddCustomToolset(VirtualFileSystemPath value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_0(PropertyChangedEventArgs`1<ToolsetOptionValue> x);
}
public abstract class JetBrains.ReSharper.Features.SolBuilderDuo.Options.Toolsets.ToolsetOptionProvider : object {
    private static int RecentPathCount;
    [NotNullAttribute]
protected Expression`1<Func`2<BuildToolSettings, IIndexedEntry`2<string, bool>>> RecentExpression { get; }
    [NotNullAttribute]
public string Title { get; }
    protected abstract virtual Expression`1<Func`2<BuildToolSettings, IIndexedEntry`2<string, bool>>> get_RecentExpression();
    public abstract virtual string get_Title();
    [CanBeNullAttribute]
public abstract virtual ToolsetOptionValue GetCurrentToolset(IContextBoundSettingsStore settingsStore, IReadOnlyCollection`1<ToolsetOptionValue> knownToolsets, VirtualFileSystemPath solutionRoot);
    public abstract virtual void SetCurrentToolset(IContextBoundSettingsStore settingsStore, ToolsetOptionValue toolset);
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<ToolsetOptionValue> GetAvailableToolsets(IContextBoundSettingsStore settingsStore, ISolution solution);
    [NotNullAttribute]
public IReadOnlyCollection`1<ToolsetOptionValue> GetRecentToolsets(IContextBoundSettingsStore settingsStore);
    public void AddRecentToolset(IContextBoundSettingsStore settingsStore, ToolsetOptionValue toolset);
    [CanBeNullAttribute]
public abstract virtual ToolsetOptionValue CreateToolsetFromPath(VirtualFileSystemPath path, String& error);
    [NotNullAttribute]
public IEnumerable`1<VirtualFileSystemPath> CleanupRecentToolsets(IContextBoundSettingsStore settingsStore);
    [NotNullAttribute]
private IEnumerable`1<string> GetRecentPaths(IContextBoundSettingsStore settingsStore);
}
public enum JetBrains.ReSharper.Features.SolBuilderDuo.Options.Toolsets.ToolsetOptionSource : Enum {
    public int value__;
    public static ToolsetOptionSource Automatic;
    public static ToolsetOptionSource Custom;
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Options.Toolsets.ToolsetOptionValue : object {
    [CompilerGeneratedAttribute]
private RichText <Presentation>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolsetOptionSource <Source>k__BackingField;
    [NotNullAttribute]
public RichText Presentation { get; }
    [NotNullAttribute]
public VirtualFileSystemPath Path { get; }
    [CanBeNullAttribute]
public string Tooltip { get; }
    public ToolsetOptionSource Source { get; }
    public ToolsetOptionValue(RichText presentation, VirtualFileSystemPath path, string tooltip, ToolsetOptionSource source);
    [CompilerGeneratedAttribute]
public RichText get_Presentation();
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_Path();
    [CompilerGeneratedAttribute]
public string get_Tooltip();
    [CompilerGeneratedAttribute]
public ToolsetOptionSource get_Source();
    public virtual int CompareTo(ToolsetOptionValue other);
    public virtual bool Equals(ToolsetOptionValue other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Features.SolBuilderDuo.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string AddDesignTimeItemsToChangeTrackingSettingDescription { get; }
    public static string BuildOptionPageTitle { get; }
    public static string BuildWithSolBuilderDuoSettingDescription { get; }
    public static string CheckBuildStateBeforeBuildingProjectSettingDescription { get; }
    public static string DirectoryForFileLoggerSettingDescription { get; }
    public static string DumpBuildStatesBeforeBuildSettingDescription { get; }
    public static string EnableAdvancedLogsInDocumentChangeTrackerSettingDescription { get; }
    public static string EnableLoggerInsideMSBuildProcessToFileStoringToTempFolderSettingDescription { get; }
    public static string FolderForFileLoggerSettingDescription { get; }
    public static string GeneralOptionPageTitle { get; }
    public static string InvokeBeforeBuildAndAfterBuildTargetsForSkippedProjectsSettingDescription { get; }
    public static string InvokePreAndPostBuildEventTargetsForSkippedProjectsSettingDescription { get; }
    public static string NumberOfProcessesRunningInParallelSettingDescription { get; }
    public static string PassVisualStudioParametersToTheBuildSettingDescription { get; }
    public static string PresentationOptionPageTitle { get; }
    public static string ProjectsShouldBeAlwaysBuiltIndependentlyFromHeuristicSettingDescription { get; }
    public static string ProjectsShouldBeNeverBuiltIndependentlyFromHeuristicSettingDescription { get; }
    public static string RestoreNuGetPackagesBeforeBuildSettingDescription { get; }
    public static string UseNewLogModeSettingDescription { get; }
    public static string VerbosityOfFileLoggerSettingDescription { get; }
    public static string VerbosityOfOutputLoggerSettingDescription { get; }
    public static string VersionOfMSBuildToUseWhenBuildingMeansasTheRuntimeVersionOfTheApplicationInitiatingTheBuildInCaseOfVisualStudioThisIsTheSameMSBuildVSItselfUsesForBuildingFFFFFFFFMeansUseTheHighestVersionAvailableOnThisMachineAnyOtherNumberHIWORDIsTheMajorVersionNumberLOWORDIsTheMinorVersionNumberSettingDescription { get; }
    public static string VerbosityLevel_Quite_Text { get; }
    public static string VerbosityLevel_Minimal_Text { get; }
    public static string VerbosityLevel_Normal_Text { get; }
    public static string VerbosityLevel_Detailed_Text { get; }
    public static string VerbosityLevel_Diagnostic_Text { get; }
    public static string WriteConsoleLogToOutputSettingDescription { get; }
    public static string WriteErrorsToOutputSettingDescription { get; }
    public static string WriteLogToFileSettingDescription { get; }
    public static string WriteLogToOutputSettingDescription { get; }
    public static string WriteMessagesToOutputSettingDescription { get; }
    public static string WriteWarningsToOutputSettingDescription { get; }
    public static string Toolset_Header_Text { get; }
    public static string Platform_Specific_Toolsets_Header_Text { get; }
    public static string Build_Header_Text { get; }
    public static string UseReSharperBuild_Text { get; }
    public static string DesignTimeBuildSolutionLoading_Header_Text { get; }
    public static string BuildLogging_Header_Text { get; }
    public static string RunBuildAfterSolutionIsLoaded_BoolOption_Text { get; }
    public static string RestoreNuGetPackagesBeforeBuild_BoolOption_Text { get; }
    public static string InvokePreAndPostBuildEventTargetsFor_BoolOption_Text { get; }
    public static string InvokeBeforeBuildAndAfterBuildTargets_BoolOption_Text { get; }
    public static string PassVisualStudioParametersToTheBuild_BoolOption_Text { get; }
    public static string WriteMSBuildLogToOutput_BoolOption_Text { get; }
    public static string VerbosityOfOutputLogger_ComboOptionFromEnum_TextPrefix { get; }
    public static string VisualStudioOptionProjectsAndSolutions_Text { get; }
    public static string WriteMSBuildLogToFile_BoolOption_Text { get; }
    public static string VerbosityOfFileLogger_ComboOptionFromEnum_TextPrefix { get; }
    public static string MSBuildLogFileWillBeWrittenInTheSpecified_Text { get; }
    public static string StatusBarShowBuildProgressInStatusBar_BoolOption_Text { get; }
    public static string TaskBarShowBuildProgressInWindowsTask_Text { get; }
    public static string PaintOutputLog_BoolOption_Text { get; }
    public static string Always_ShowBuildResultsMode_Text { get; }
    public static string OnlyIfErrorsOrWarningsReceived_ShowBuildResultsMode_Text { get; }
    public static string OnlyIfErrorsReceived_ShowBuildResultsMode_Text { get; }
    public static string Never_ShowBuildResultsMode_Text { get; }
    public static string ShowingBuildResultsAfterBuildCompleted_ComboOptionFromEnum_TextPrefix { get; }
    public static string ToolWindowWhenBuildStartsOpenTheBuild_BoolOption_Text { get; }
    public static string ToolWindowWhenBuildStartsOpenTheBuildDumb_BoolOption_Text { get; }
    public static string ToolWindowSwitchToTreeViewAfterTheBuild_BoolOption_Text { get; }
    public static string ToolWindowFullPathsInConsole_BoolOption_Text { get; }
    public static string BuildResultsViewEnableGroupingSolution_BoolOption_Text { get; }
    public static string UseNewPresentationBuildResultsTreeWith_BoolOption_Text { get; }
    public static string ShowVerticalProgressBarWhenBuildStarted_BoolOption_Text { get; }
    public static string Edit_Text { get; }
    public static string UseUpTo_Text { get; }
    public static string ProcessesInParallel_Text { get; }
    public static string Custom_Text { get; }
    public static string CopyPathToClipboard_Text { get; }
    public static string MSBuildGlobalProperties_Text { get; }
    public static string IDEProvidesThePropertiesToMSBuildDuring_Text { get; }
    public static string MSBuildSolutionLoadingTargets_Text { get; }
    public static string IDEUsesDesignTimeBuildToLoadSolutions_Text { get; }
    public static string Edit__Caption { get; }
    public static string _AutomaticallyBasedOnCPU_Text { get; }
    public static string CanNotReadMSBuildVersionFromSpecified_Text { get; }
    public static string MSBuild_RunsOn_N__Text { get; }
    public static string PropertyNameShouldNotContainWhitespaces_Text { get; }
    public static string TargetNameShouldNotContainWhitespaces_Text { get; }
    public static string CanNotAddToolset_Caption { get; }
    public static string LearnMore_Button_Text { get; }
    public static string UseReSharperBuild_Hint_Text { get; }
    public static string Browse_Text { get; }
    public static string MSBuildVersion_Text { get; }
    public static string NETCLIExecutablePath_Text { get; }
    public static string MonoExecutablePath_Text { get; }
    public static string Invalid_Version_Text { get; }
    public static string Name_Text { get; }
    public static string Value_Text { get; }
    public static string NETCLIExecutableX64Path_Text { get; }
    public static string NETCLIExecutableX86Path_Text { get; }
    public static string AutomaticallyDownloadSDK_ComboEnum_Caption { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_AddDesignTimeItemsToChangeTrackingSettingDescription();
    public static string get_BuildOptionPageTitle();
    public static string get_BuildWithSolBuilderDuoSettingDescription();
    public static string get_CheckBuildStateBeforeBuildingProjectSettingDescription();
    public static string get_DirectoryForFileLoggerSettingDescription();
    public static string get_DumpBuildStatesBeforeBuildSettingDescription();
    public static string get_EnableAdvancedLogsInDocumentChangeTrackerSettingDescription();
    public static string get_EnableLoggerInsideMSBuildProcessToFileStoringToTempFolderSettingDescription();
    public static string get_FolderForFileLoggerSettingDescription();
    public static string get_GeneralOptionPageTitle();
    public static string get_InvokeBeforeBuildAndAfterBuildTargetsForSkippedProjectsSettingDescription();
    public static string get_InvokePreAndPostBuildEventTargetsForSkippedProjectsSettingDescription();
    public static string get_NumberOfProcessesRunningInParallelSettingDescription();
    public static string get_PassVisualStudioParametersToTheBuildSettingDescription();
    public static string get_PresentationOptionPageTitle();
    public static string get_ProjectsShouldBeAlwaysBuiltIndependentlyFromHeuristicSettingDescription();
    public static string get_ProjectsShouldBeNeverBuiltIndependentlyFromHeuristicSettingDescription();
    public static string get_RestoreNuGetPackagesBeforeBuildSettingDescription();
    public static string get_UseNewLogModeSettingDescription();
    public static string get_VerbosityOfFileLoggerSettingDescription();
    public static string get_VerbosityOfOutputLoggerSettingDescription();
    public static string get_VersionOfMSBuildToUseWhenBuildingMeansasTheRuntimeVersionOfTheApplicationInitiatingTheBuildInCaseOfVisualStudioThisIsTheSameMSBuildVSItselfUsesForBuildingFFFFFFFFMeansUseTheHighestVersionAvailableOnThisMachineAnyOtherNumberHIWORDIsTheMajorVersionNumberLOWORDIsTheMinorVersionNumberSettingDescription();
    public static string get_VerbosityLevel_Quite_Text();
    public static string get_VerbosityLevel_Minimal_Text();
    public static string get_VerbosityLevel_Normal_Text();
    public static string get_VerbosityLevel_Detailed_Text();
    public static string get_VerbosityLevel_Diagnostic_Text();
    public static string get_WriteConsoleLogToOutputSettingDescription();
    public static string get_WriteErrorsToOutputSettingDescription();
    public static string get_WriteLogToFileSettingDescription();
    public static string get_WriteLogToOutputSettingDescription();
    public static string get_WriteMessagesToOutputSettingDescription();
    public static string get_WriteWarningsToOutputSettingDescription();
    public static string get_Toolset_Header_Text();
    public static string get_Platform_Specific_Toolsets_Header_Text();
    public static string get_Build_Header_Text();
    public static string get_UseReSharperBuild_Text();
    public static string get_DesignTimeBuildSolutionLoading_Header_Text();
    public static string get_BuildLogging_Header_Text();
    public static string get_RunBuildAfterSolutionIsLoaded_BoolOption_Text();
    public static string get_RestoreNuGetPackagesBeforeBuild_BoolOption_Text();
    public static string get_InvokePreAndPostBuildEventTargetsFor_BoolOption_Text();
    public static string get_InvokeBeforeBuildAndAfterBuildTargets_BoolOption_Text();
    public static string get_PassVisualStudioParametersToTheBuild_BoolOption_Text();
    public static string get_WriteMSBuildLogToOutput_BoolOption_Text();
    public static string get_VerbosityOfOutputLogger_ComboOptionFromEnum_TextPrefix();
    public static string get_VisualStudioOptionProjectsAndSolutions_Text();
    public static string get_WriteMSBuildLogToFile_BoolOption_Text();
    public static string get_VerbosityOfFileLogger_ComboOptionFromEnum_TextPrefix();
    public static string get_MSBuildLogFileWillBeWrittenInTheSpecified_Text();
    public static string get_StatusBarShowBuildProgressInStatusBar_BoolOption_Text();
    public static string get_TaskBarShowBuildProgressInWindowsTask_Text();
    public static string get_PaintOutputLog_BoolOption_Text();
    public static string get_Always_ShowBuildResultsMode_Text();
    public static string get_OnlyIfErrorsOrWarningsReceived_ShowBuildResultsMode_Text();
    public static string get_OnlyIfErrorsReceived_ShowBuildResultsMode_Text();
    public static string get_Never_ShowBuildResultsMode_Text();
    public static string get_ShowingBuildResultsAfterBuildCompleted_ComboOptionFromEnum_TextPrefix();
    public static string get_ToolWindowWhenBuildStartsOpenTheBuild_BoolOption_Text();
    public static string get_ToolWindowWhenBuildStartsOpenTheBuildDumb_BoolOption_Text();
    public static string get_ToolWindowSwitchToTreeViewAfterTheBuild_BoolOption_Text();
    public static string get_ToolWindowFullPathsInConsole_BoolOption_Text();
    public static string get_BuildResultsViewEnableGroupingSolution_BoolOption_Text();
    public static string get_UseNewPresentationBuildResultsTreeWith_BoolOption_Text();
    public static string get_ShowVerticalProgressBarWhenBuildStarted_BoolOption_Text();
    public static string get_Edit_Text();
    public static string get_UseUpTo_Text();
    public static string get_ProcessesInParallel_Text();
    public static string get_Custom_Text();
    public static string get_CopyPathToClipboard_Text();
    public static string get_MSBuildGlobalProperties_Text();
    public static string get_IDEProvidesThePropertiesToMSBuildDuring_Text();
    public static string get_MSBuildSolutionLoadingTargets_Text();
    public static string get_IDEUsesDesignTimeBuildToLoadSolutions_Text();
    public static string get_Edit__Caption();
    public static string get__AutomaticallyBasedOnCPU_Text();
    public static string get_CanNotReadMSBuildVersionFromSpecified_Text();
    public static string get_MSBuild_RunsOn_N__Text();
    public static string get_PropertyNameShouldNotContainWhitespaces_Text();
    public static string get_TargetNameShouldNotContainWhitespaces_Text();
    public static string get_CanNotAddToolset_Caption();
    public static string get_LearnMore_Button_Text();
    public static string get_UseReSharperBuild_Hint_Text();
    public static string get_Browse_Text();
    public static string get_MSBuildVersion_Text();
    public static string get_NETCLIExecutablePath_Text();
    public static string get_MonoExecutablePath_Text();
    public static string get_Invalid_Version_Text();
    public static string get_Name_Text();
    public static string get_Value_Text();
    public static string get_NETCLIExecutableX64Path_Text();
    public static string get_NETCLIExecutableX86Path_Text();
    public static string get_AutomaticallyDownloadSDK_ComboEnum_Caption();
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Features.SolBuilderDuo.Services.AfterBuildTargetExecutor : SurroundBuildTargetExecutor {
    public int Priority { get; }
    public AfterBuildTargetExecutor(ProjectIdFactory projectIdFactory);
    public virtual int get_Priority();
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.Features.SolBuilderDuo.Services.AggregatedSolutionBuilderConfigurationReloadTracker : object {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Reloading>k__BackingField;
    public IProperty`1<bool> Reloading { get; }
    public AggregatedSolutionBuilderConfigurationReloadTracker(Lifetime lifetime, ILogger logger, IImmutableList`1<ISolutionBuilderConfigurationReloadTracker> reloadTrackers, IThreading threading);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_Reloading();
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.ApplicabilityState : object {
    [CompilerGeneratedAttribute]
private bool <IsApplicable>k__BackingField;
    [CompilerGeneratedAttribute]
private SolutionApplicabilityState <SolutionApplicabilityState>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IProject> <NotApplicableProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IProject> <ProjectsWithoutConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <RemoveProjectsWithoutConfigurationFromBuild>k__BackingField;
    public bool IsApplicable { get; }
    public SolutionApplicabilityState SolutionApplicabilityState { get; }
    public ICollection`1<IProject> NotApplicableProjects { get; }
    public ICollection`1<IProject> ProjectsWithoutConfiguration { get; }
    public DelegateCommand RemoveProjectsWithoutConfigurationFromBuild { get; }
    public ApplicabilityState(Action`1<ICollection`1<IProject>> removeProjectsWithoutConfigurationFromBuild);
    public ApplicabilityState(SolutionApplicabilityState solutionApplicabilityState, ICollection`1<IProject> notApplicableProjects, ICollection`1<IProject> projectsWithoutConfiguration, Action`1<ICollection`1<IProject>> removeProjectsWithoutConfigurationFromBuild);
    [CompilerGeneratedAttribute]
public bool get_IsApplicable();
    [CompilerGeneratedAttribute]
public SolutionApplicabilityState get_SolutionApplicabilityState();
    [CompilerGeneratedAttribute]
public ICollection`1<IProject> get_NotApplicableProjects();
    [CompilerGeneratedAttribute]
public ICollection`1<IProject> get_ProjectsWithoutConfiguration();
    [CompilerGeneratedAttribute]
public DelegateCommand get_RemoveProjectsWithoutConfigurationFromBuild();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.ApplicableProjectsForIncrementalRunnerHolder : object {
    private ProjectsPersistentKeeper myProjectsPersistentKeeper;
    private ISolution mySolution;
    public ApplicableProjectsForIncrementalRunnerHolder(ProjectsPersistentKeeper projectsPersistentKeeper, ISolution solution);
    public sealed virtual IEnumerable`1<IProject> GetCurrentProjects();
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Features.SolBuilderDuo.Services.BeforeBuildTargetExecutor : SurroundBuildTargetExecutor {
    public int Priority { get; }
    public BeforeBuildTargetExecutor(ProjectIdFactory projectIdFactory);
    public virtual int get_Priority();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.BrowserWasmIncrementalRunnerProjectChecker : object {
    public sealed virtual bool IsApplicable(IProject project);
    private string GetTargetPlatformPropertyValue(string propertyName, TargetFrameworkId innerTfid, IProject project);
    public sealed virtual bool CanBuild(IProject project);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Features.SolBuilderDuo.Services.BuildEventPresenter : object {
    public sealed virtual string Present(OutputItemBase item, IBuildSessionLoader loader);
    [NotNullAttribute]
private static string PresentBuildEvent(BuildEvent ev);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.BuildResultWithProject : object {
    [CompilerGeneratedAttribute]
private RdBuildResult <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ProjectGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <ProjectPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <RequestId>k__BackingField;
    [CanBeNullAttribute]
public RdBuildResult Result { get; }
    public Guid ProjectGuid { get; }
    public FileSystemPath ProjectPath { get; }
    public Guid RequestId { get; }
    public BuildResultWithProject(RdBuildResult result, Guid projectGuid, FileSystemPath projectPath, Guid requestId);
    [CompilerGeneratedAttribute]
public RdBuildResult get_Result();
    [CompilerGeneratedAttribute]
public Guid get_ProjectGuid();
    [CompilerGeneratedAttribute]
public FileSystemPath get_ProjectPath();
    [CompilerGeneratedAttribute]
public Guid get_RequestId();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.BuildTimeTracker : object {
    [NotNullAttribute]
private IProjectBuildTimeStorage myTimeStorage;
    private DateTime myBuildBeginTime;
    [NotNullAttribute]
private IDictionary`2<IProject, DateTime> myStartedProjects;
    private SolutionBuilderRequestSilentMode myLastSilentMode;
    [CanBeNullAttribute]
private SolutionBuilderRequest myRequest;
    public BuildTimeTracker(IProjectBuildTimeStorage timeStorage);
    public sealed virtual void OnBuildBegin(SolutionBuilderRequest request);
    public sealed virtual void OnBuildDone(IEnumerable`1<IProject> skippedProjects, bool isCanceledBuild);
    public sealed virtual void OnProjectBegin(IProject project);
    public sealed virtual void OnProjectDone(IProject project, bool succeded);
    [CompilerGeneratedAttribute]
private void <OnBuildBegin>b__6_0();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.BuildUnexpectedEventTracker : object {
    [CompilerGeneratedAttribute]
private ISignal`1<int> <ProcessUnexpectedExited>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<string> <UnexpectedException>k__BackingField;
    public ISignal`1<int> ProcessUnexpectedExited { get; }
    public ISignal`1<string> UnexpectedException { get; }
    public BuildUnexpectedEventTracker(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<int> get_ProcessUnexpectedExited();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<string> get_UnexpectedException();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.ChangingTracking.Inputs.CompileInputItemAnalyzer : object {
    private ILogger myLogger;
    private IFileSystemTracker myFileSystemTracker;
    private IEnumerable`1<string> myIgnored;
    private ProjectInputItemLastTimeStorage myProjectInputItemLastTimeStorage;
    public CompileInputItemAnalyzer(ILogger logger, IFileSystemTracker fileSystemTracker, ProjectInputItemLastTimeStorage projectInputItemLastTimeStorage);
    public void BeginAnalyze(Lifetime lifetime, IProject project, ProjectItem projectInputItem, ISignal`1<string> changedSignal);
    [StringFormatMethodAttribute("format")]
private static void FireSignal(ISignal`1<string> changedSignal, string format, string param);
    public Nullable`1<DateTime> GetInputTimestamp(IProject project, ProjectItem projectInputItem);
    private bool IsApplicable(ProjectItem projectItem);
    private static FileSystemPath GetFilePath(IProject project, ProjectItem projectItem, ILogger logger);
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.ChangingTracking.Inputs.IDocumentChangeAnalyzer {
    [NotNullAttribute]
public IProperty`1<bool> Idle { get; }
    public abstract virtual IProperty`1<bool> get_Idle();
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.ChangingTracking.Inputs.IProjectChangeTracker {
    public ISimpleSignal FilesChangedSignal { get; }
    public abstract virtual ISimpleSignal get_FilesChangedSignal();
    [NotNullAttribute]
public abstract virtual ISolutionDirtyState GetDirtyState(SolutionDirtyStateResetMode reset, ISet`1<IProject> requestedProjects);
    public abstract virtual void CheckProjectFilesBeforeBuild(IEnumerable`1<IProject> allProjects);
    public abstract virtual void UpdateTimestampsBeforeRunBuilds(IList`1<IProject> allProjectsInSolution, IEnumerable`1<IProject> dirtyProjects, IEnumerable`1<IProject> changedProjects);
    public abstract virtual SolutionTimestampData GetSolutionTimestampData();
    public abstract virtual void InitWithLoadedPersistentData(SolutionTimestampData data, IList`1<IProject> currentProjects);
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.ChangingTracking.Inputs.IProjectChangeTrackerReloader {
    public abstract virtual void MarkAllProjectsAsDirty();
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.ChangingTracking.Inputs.IProjectFileChangingAnalyzer {
    public abstract virtual void Analyze(Lifetime lifetime, IProject project, ISignal`1<string> changedSignal);
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.ChangingTracking.Inputs.ISolutionBuilderCache {
    public ISignal`1<SolutionStoringState> SolutionConfigurationReloaded { get; }
    public abstract virtual ISignal`1<SolutionStoringState> get_SolutionConfigurationReloaded();
    public abstract virtual void SaveState(ISolutionConfigurationAndPlatform solutionActiveConfiguration, SolutionStoringState solutionTimestampData);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.ChangingTracking.Inputs.ProjectChangeTracker : object {
    private Lifetime myLifetime;
    private ILogger myLogger;
    private ISolution mySolution;
    private IProjectFileChangingAnalyzer myProjectFileChangingAnalyzer;
    private DocumentManager myDocumentManager;
    private IShellLocks myLocks;
    private ISettingsStore mySettingsStore;
    private IProjectChangingReasonTracker myProjectChangingReasonTracker;
    private SolutionDirtyState mySolutionDirtyState;
    private object mySyncObject;
    private IImmutableList`1<CompileInputItemAnalyzer> myInputItemAnalyzers;
    private IDictionary`2<ProjectUniqueKey, ProjectTrackingData> myData;
    private object myChangedDocsSyncObject;
    private IList`1<IDocument> myChangedDocuments;
    [NotNullAttribute]
private object myIdleSync;
    [CompilerGeneratedAttribute]
private ISimpleSignal <FilesChangedSignal>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Idle>k__BackingField;
    public ISimpleSignal FilesChangedSignal { get; }
    public IProperty`1<bool> Idle { get; }
    public ProjectChangeTracker(Lifetime lifetime, ILogger logger, ISolution solution, IImmutableList`1<CompileInputItemAnalyzer> inputItemAnalyzers, IProjectFileChangingAnalyzer projectFileChangingAnalyzer, IFileSystemTracker fileSystemTracker, IProjectBuildTracker projectBuildTracker, IEnumerable`1<IProjectDirtyStateTracker> projectDirtyStateTrackers, IEnumerable`1<IProjectChangedStateTracker> projectChangedStateTrackers, DocumentManager documentManager, IShellLocks locks, ISettingsStore settingsStore, IProjectChangingReasonTracker projectChangingReasonTracker);
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_FilesChangedSignal();
    private void AssignInitialEmptyInputs(ICollection`1<IProject> projects);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_Idle();
    private void AssignInputItemsFromBuildResult(ProjectBuildResult projectBuildResult);
    public sealed virtual ISolutionDirtyState GetDirtyState(SolutionDirtyStateResetMode reset, ISet`1<IProject> requestedProjects);
    public sealed virtual void CheckProjectFilesBeforeBuild(IEnumerable`1<IProject> allProjects);
    public sealed virtual void UpdateTimestampsBeforeRunBuilds(IList`1<IProject> allProjectsInSolution, IEnumerable`1<IProject> dirtyProjects, IEnumerable`1<IProject> changedProjects);
    public sealed virtual SolutionTimestampData GetSolutionTimestampData();
    private ProjectTimestampData GetProjectTimestamp(ProjectUniqueKey projectUniqueKey);
    private void SetInputs(IProject project, ProjectInputItems inputs);
    private void SetInputsToAnalyzer(IProject project, ProjectInputItems inputs);
    public sealed virtual void InitWithLoadedPersistentData(SolutionTimestampData data, IList`1<IProject> currentProjects);
    private bool AreEqual(ProjectInputItems prevInputs, ProjectInputItems newItems);
    private void CreateNewAnalyzer(IProject project, ProjectInputItems inputs);
    private void TryAddDirtyProject(ProjectWithComment projectWithComment);
    private void TryAddChangedProject(ProjectWithComment projectWithComment);
    private void TrySetSolutionChanged();
    private void ProcessDirtyProject(IProjectFile sourceFile);
    private void ScanChangedDocuments();
    private static ICollection`1<ProjectItem> GetItems(List`1<RdBuildProjectItem> items);
    private static ProjectItem TryGetProjectItem(string itemPath, ProjectItemOrigin origin);
    private sealed virtual override void JetBrains.ReSharper.Features.SolBuilderDuo.Services.ChangingTracking.Inputs.IProjectChangeTrackerReloader.MarkAllProjectsAsDirty();
    [CompilerGeneratedAttribute]
private void <.ctor>b__18_0(FileSystemChangeDelta args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__18_2(ProjectBuildResult p);
    [CompilerGeneratedAttribute]
private void <ScanChangedDocuments>b__38_0();
    [CompilerGeneratedAttribute]
private void <JetBrains.ReSharper.Features.SolBuilderDuo.Services.ChangingTracking.Inputs.IProjectChangeTrackerReloader.MarkAllProjectsAsDirty>b__41_0();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.ChangingTracking.Inputs.ProjectFileChangingAnalyzer : object {
    private IFileSystemTracker myFileSystemTracker;
    private ILogger myLogger;
    public ProjectFileChangingAnalyzer(IFileSystemTracker fileSystemTracker);
    public sealed virtual void Analyze(Lifetime lifetime, IProject project, ISignal`1<string> changedSignal);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.ChangingTracking.Inputs.ProjectInputItemLastTimeStorage : object {
    private Dictionary`2<ProjectInputItemWithGuid, DateTime> lastTimes;
    public Nullable`1<DateTime> GetLastTime(Guid projectGuid, FileSystemPath itemPath);
    public void SetLastTime(Guid projectGuid, FileSystemPath itemPath, DateTime fileModificationTimeUtc);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.ChangingTracking.Inputs.ProjectInputsAnalyzer : object {
    private IProject myProject;
    private IReadOnlyList`1<CompileInputItemAnalyzer> myInputItemAnalyzers;
    private bool myUseAllItems;
    [CompilerGeneratedAttribute]
private ProjectInputItems <Inputs>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<string> <ChangedSignal>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<string> <DirtySignal>k__BackingField;
    public ProjectInputItems Inputs { get; }
    public ISignal`1<string> ChangedSignal { get; }
    public ISignal`1<string> DirtySignal { get; }
    public ProjectInputsAnalyzer(Lifetime lifetime, IProject project, IProjectFileChangingAnalyzer projectFileChangingAnalyzer, IReadOnlyList`1<CompileInputItemAnalyzer> inputItemAnalyzers, ProjectInputItems inputs, ISettingsStore settingsStore);
    [CompilerGeneratedAttribute]
public ProjectInputItems get_Inputs();
    [CompilerGeneratedAttribute]
public ISignal`1<string> get_ChangedSignal();
    [CompilerGeneratedAttribute]
public ISignal`1<string> get_DirtySignal();
    public Nullable`1<DateTime> GetProjectTimestamp();
    public List`1<ProjectInputItemTimestampData> GetInputsTimestampData();
    public void AnalyzeTimestamps(DateTime projectTimestamp, List`1<ProjectInputItemTimestampData> inputTimestampData);
    [CompilerGeneratedAttribute]
private FileSystemPath <AnalyzeTimestamps>b__15_1(ProjectInputItemTimestampData tsd);
    [CompilerGeneratedAttribute]
private bool <AnalyzeTimestamps>b__15_2(ProjectInputItemTimestampData i);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.ChangingTracking.Inputs.ProjectItem : object {
    private FileSystemPath myFileSystemPath;
    private RelativePath myRelativePath;
    [CompilerGeneratedAttribute]
private bool <IsAbsolute>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectItemOrigin <Origin>k__BackingField;
    public IPath Path { get; }
    public bool IsAbsolute { get; }
    public ProjectItemOrigin Origin { get; public set; }
    public ProjectItem(FileSystemPath path, ProjectItemOrigin origin);
    public ProjectItem(RelativePath path, ProjectItemOrigin origin);
    public ProjectItem(string strPath, bool isAbsolute, ProjectItemOrigin origin);
    public IPath get_Path();
    [CompilerGeneratedAttribute]
public bool get_IsAbsolute();
    [CompilerGeneratedAttribute]
public ProjectItemOrigin get_Origin();
    [CompilerGeneratedAttribute]
public void set_Origin(ProjectItemOrigin value);
    public virtual string ToString();
    public FileSystemPath GetPath(FileSystemPath projectPath);
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Features.SolBuilderDuo.Services.ChangingTracking.Inputs.ProjectItemOrigin : Enum {
    public int value__;
    public static ProjectItemOrigin Build;
    public static ProjectItemOrigin Design;
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.ChangingTracking.Inputs.ProjectTrackingData : object {
    [CompilerGeneratedAttribute]
private ProjectUniqueKey <ProjectUniqueKey>k__BackingField;
    [CompilerGeneratedAttribute]
private SequentialLifetimes <SequentialLifetimes>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectInputsAnalyzer <ProjectInputsAnalyzer>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectTimestampData <ProjectTimestampData>k__BackingField;
    public ProjectUniqueKey ProjectUniqueKey { get; }
    public SequentialLifetimes SequentialLifetimes { get; }
    public ProjectInputsAnalyzer ProjectInputsAnalyzer { get; public set; }
    public ProjectTimestampData ProjectTimestampData { get; public set; }
    public ProjectTrackingData(ProjectUniqueKey projectUniqueKey, SequentialLifetimes sequentialLifetimes);
    [CompilerGeneratedAttribute]
public ProjectUniqueKey get_ProjectUniqueKey();
    [CompilerGeneratedAttribute]
public SequentialLifetimes get_SequentialLifetimes();
    [CompilerGeneratedAttribute]
public ProjectInputsAnalyzer get_ProjectInputsAnalyzer();
    [CompilerGeneratedAttribute]
public void set_ProjectInputsAnalyzer(ProjectInputsAnalyzer value);
    [CompilerGeneratedAttribute]
public ProjectTimestampData get_ProjectTimestampData();
    [CompilerGeneratedAttribute]
public void set_ProjectTimestampData(ProjectTimestampData value);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.Features.SolBuilderDuo.Services.ChangingTracking.Inputs.SolutionBuilderCache : object {
    private ILogger myLogger;
    private ISolutionCaches myCaches;
    private ProjectsPersistentKeeper myProjectsPersistentKeeper;
    private IThreading myThreading;
    private ISolutionConfigurationAccessibilityChecker mySolutionConfigurationAccessibilityChecker;
    private Lifetime myLifetime;
    [CompilerGeneratedAttribute]
private ISignal`1<SolutionStoringState> <SolutionConfigurationReloaded>k__BackingField;
    private static string CACHE_FOLDER;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Reloading>k__BackingField;
    public ISignal`1<SolutionStoringState> SolutionConfigurationReloaded { get; }
    public IProperty`1<bool> Reloading { get; }
    public SolutionBuilderCache(ISolutionCaches caches, ProjectsPersistentKeeper projectsPersistentKeeper, IThreading threading, ISolutionConfigurationAccessibilityChecker solutionConfigurationAccessibilityChecker, Lifetime lifetime, ISolutionLoadTasksScheduler solutionLoadTasksScheduler);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<SolutionStoringState> get_SolutionConfigurationReloaded();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_Reloading();
    private void HandleSolutionBuilderCacheData(SolutionStoringState storingState);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Features.SolBuilderDuo.Services.ChangingTracking.Inputs.SolutionBuilderCache/<ReloadConfigurations>d__15")]
private Task ReloadConfigurations(Lifetime reloadLifetime, ISolutionConfigurationAndPlatform solutionActiveConfiguration);
    private string GetCacheFileName(ISolutionConfigurationAndPlatform configuration);
    public sealed virtual void SaveState(ISolutionConfigurationAndPlatform solutionActiveConfiguration, SolutionStoringState solutionTimestampData);
    private FileSystemPath GetCacheFolderPath();
    private void SaveToFile(string fileName, SolutionStoringState state);
    [NotNullAttribute]
private SolutionStoringState LoadState(ISolutionConfigurationAndPlatform solutionActiveConfiguration);
    private SolutionStoringState LoadStateFromFile(string fileName);
    private void LogStateBeforeSaving(ISolutionConfigurationAndPlatform solutionActiveConfiguration, SolutionStoringState solutionTimestampData);
    [StringFormatMethodAttribute("format")]
private void Trace(string message, Object[] values);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_1(Lifetime ltToIgnore);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <.ctor>b__10_2(Lifetime valueLt, ISolutionConfigurationAndPlatform config);
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.ChangingTracking.IProjectChangedStateTracker {
    public ISignal`1<ProjectWithComment> ChangedProject { get; }
    public abstract virtual ISignal`1<ProjectWithComment> get_ChangedProject();
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.ChangingTracking.IProjectDirtyStateTracker {
    public ISignal`1<ProjectWithComment> DirtyProject { get; }
    public abstract virtual ISignal`1<ProjectWithComment> get_DirtyProject();
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.ChangingTracking.ProjectWithComment : object {
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    public IProject Project { get; }
    public string Comment { get; }
    public ProjectWithComment(IProject project, string comment, Object[] args);
    [CompilerGeneratedAttribute]
public IProject get_Project();
    [CompilerGeneratedAttribute]
public string get_Comment();
    public virtual string ToString();
    private string GetComment(string comment, Object[] args);
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.Common.IBuildRunner {
    public abstract virtual void BeginBuild(BuildLaunchContext buildLaunchContext, IProject project, Action`1<BuildExecutionResult> callback);
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.Common.IBuildSessionContextFactory {
    [NotNullAttribute]
public abstract virtual BuildSessionContextCreationResult Create(Lifetime lifetime, IBuildSessionTarget target, ProjectCollectionActiveConfiguration projectCollectionActiveConfiguration, SolutionBuilderRequest solutionBuilderRequest);
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.Common.IProjectsChangingCache {
    [NotNullAttribute]
public abstract virtual SolutionTimestampData GetCurrentTimestampData();
    public abstract virtual void Init(SolutionTimestampData solutionTimestampData, IList`1<IProject> currentProjects);
    public abstract virtual void UpdateTimestamps(IList`1<IProject> allProjectsInSolution, IEnumerable`1<IProject> dirtyProjects, IEnumerable`1<IProject> changedProjects);
}
public static class JetBrains.ReSharper.Features.SolBuilderDuo.Services.Common.SolutionBuilderDuoUtil : object {
    public static string CreateProjectKey(Guid projectGuid, ISolutionConfigurationAndPlatform configuration);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.CopyLocalHandling.CopyLocalFilesCaches : object {
    private static string CopyLocalFilesMapId;
    private static string CopyLocalInternedMapId;
    private static string CopyLocalInternedIdxMapId;
    private IntSlots mySlots;
    private OptimizedPersistentSortedMap`2<string, CopyTasksInfo> myTasksMap;
    private OptimizedPersistentSortedMap`2<int, string> myInternedMap;
    private OptimizedPersistentSortedMap`2<int, JetHashSet`1<int>> myInternedIndexMap;
    private object myInternedLock;
    public CopyLocalFilesCaches(Lifetime lifetime, ISolutionCaches solutionCaches);
    public int GetOrCreateIndex(string value);
    private int GetIndex(string value);
    private int StoreNewValue(string value);
    private int CalculateValueHash(string value);
    public string GetInternedString(int idx);
    public bool ContainsValue(string projectKey);
    public CopyTasksInfo GetValue(string projectKey);
    public void ClearValue(string projectKey);
    public void SetValue(string projectKey, CopyTasksInfo value);
    public bool TryGetValue(string projectKey, CopyTasksInfo& copyTasksInfo);
    public List`1<KeyValuePair`2<string, CopyTasksInfo>> GetAllValues();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.CopyLocalHandling.CopyLocalFileService : object {
    [NotNullAttribute]
private ILogger myLogger;
    private ProjectsPersistentKeeper myPersistentKeeper;
    private IShellLocks myShellLocks;
    private IFileSystemTracker myFileSystemTracker;
    private CopyLocalFilesCaches myCopyLocalFilesCaches;
    private Lifetime myLifetime;
    private SequentialLifetimes myReloadingLifetimes;
    private IDictionary`2<string, CopyTasksInfo> myTempMap;
    private IDictionary`2<string, ICopyTaskResultAnalyzer> myAnalyzersPerTargets;
    private IDictionary`2<Guid, SequentialLifetimes> myLifetimesPerProject;
    private IDefaultCopyTaskResultAnalyzer myDefaultCopyTaskResultAnalyzer;
    private ISolutionConfigurationAndPlatform myCurrentConfiguration;
    private Action`1<IProject> myProjectSurfaceChangeHandler;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Reloading>k__BackingField;
    public IProperty`1<bool> Reloading { get; }
    private int JetBrains.ReSharper.Features.SolBuilderDuo.Services.IProjectStateChangeHandler.Priority { get; }
    public CopyLocalFileService(Lifetime lifetime, ILogger logger, ProjectsPersistentKeeper persistentKeeper, IProjectBuildTracker projectBuildTracker, IEnumerable`1<ICopyTaskResultAnalyzer> analyzers, ISolutionBuilderCache cache, IShellLocks shellLocks, IFileSystemTracker fileSystemTracker, CopyLocalFilesCaches copyLocalFilesCaches, IDefaultCopyTaskResultAnalyzer defaultCopyTaskResultAnalyzer);
    private void HandleProjectCollectionBuildStartedSignal(ICollection`1<IProject> projects);
    private void HandleProjectCollectionBuildCompleted(ProjectBuildResult projectBuildResult);
    private void HandleSolutionConfigurationReloadedSignal();
    private static void CheckStateForNewItem(CopyTaskTrackingItem context);
    private static void CheckStateForSourcePath(CopyTaskTrackingItem trackingItem);
    private static void CheckStateForDestinationPath(CopyTaskTrackingItem trackingItem);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_Reloading();
    private void ExecuteCopyLocal(Lifetime lifetime, IProject project, ISolutionConfigurationAndPlatform solutionConfiguration, BuildSessionContext buildSessionContext);
    private void AddTaskInfoToAnalyzers(IProject project, CopyTasksInfo copyTasksInfo, List`1<CopyTaskTrackingItem> requestedTrackingItemsCollector);
    private void ExecuteForEachCopyTasksItem(Lifetime lifetime, IProject project, BuildSessionContext buildSessionContext, CopyTasksInfo copyTasksInfo, List`1<CopyTaskTrackingItem> requestedTrackingItemsCollector, Action`7<Lifetime, IProject, RdCopyTaskGlobalProperties, BuildSessionContext, ICopyTaskResultAnalyzer, List`1<RdCopyTaskResult>, List`1<CopyTaskTrackingItem>> action);
    private List`1<RdCopyTaskResult> FilterCopyTaskResults(List`1<RdCopyTaskResult> sourceResults);
    public sealed virtual void SetProjectSurfaceChangeHandler(Action`1<IProject> action);
    private sealed virtual override int JetBrains.ReSharper.Features.SolBuilderDuo.Services.IProjectStateChangeHandler.get_Priority();
    private sealed virtual override void JetBrains.ReSharper.Features.SolBuilderDuo.Services.IProjectStateChangeHandler.Handle(ICollection`1<IProject> projects, ProjectBuildingState newState, BuildSessionContext buildSessionContext);
    private static void LogCopyLocal(ILogger logger, IProject project, string projectKey, CopyTasksInfo previousTaskInfo, CopyTasksInfo newTaskInfo);
    [CompilerGeneratedAttribute]
internal static void <LogCopyLocal>g__LogInfo|31_0(CopyTasksInfo taskInfo, <>c__DisplayClass31_0& );
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.CopyLocalHandling.CopyLocalTaskExecutor : object {
    private ILogger myLogger;
    private ProjectIdFactory myProjectIdFactory;
    public CopyLocalTaskExecutor(ILogger logger, ProjectIdFactory projectIdFactory);
    public sealed virtual void TryExecuteCopyLocal(Lifetime lifetime, IProject project, BuildSessionContext buildSessionContext, List`1<RdCopyTaskResult> copyTasksResults, RdCopyTaskGlobalProperties copyTaskGlobalProperties);
}
public static class JetBrains.ReSharper.Features.SolBuilderDuo.Services.CopyLocalHandling.CopyTaskGlobalPropertiesProperties : object {
    [NotNullAttribute]
public static List`1<string> Properties;
    private static CopyTaskGlobalPropertiesProperties();
}
public abstract class JetBrains.ReSharper.Features.SolBuilderDuo.Services.CopyLocalHandling.CopyTaskResultAnalyzerBase : object {
    [NotNullAttribute]
private ILogger myLogger;
    public string TargetName { get; }
    protected CopyTaskResultAnalyzerBase(ILogger logger);
    public abstract virtual string get_TargetName();
    public sealed virtual void AddNewResults(Lifetime lifetime, IProject project, List`1<RdCopyTaskResult> copyTasksResults, RdCopyTaskGlobalProperties copyTaskGlobalProperties, List`1<CopyTaskTrackingItem> requestedTrackingItemsCollector);
    public virtual void TryExecuteCopyLocal(Lifetime lifetime, IProject project, BuildSessionContext buildSessionContext, List`1<RdCopyTaskResult> copyTasksResults, RdCopyTaskGlobalProperties copyTaskGlobalProperties);
    protected virtual void HandleProjectItemInconsistent(IProject project, FileSystemPath source, FileSystemPath destination, string changeReason);
    public sealed virtual void CheckConsistentFilesState(IProject project, bool skipUnchangedFiles, FileSystemPath source, FileSystemPath destination, DateTime sourceFileTimestamp, DateTime destinationFileTimestamp, string changeReason);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.CopyLocalHandling.CopyTaskTrackingItem : object {
    public Lifetime Lifetime;
    public IProject Project;
    public bool SkipUnchangedFiles;
    public FileSystemPath SourceFile;
    public DateTime SourceFileBuildTimestamp;
    public FileSystemPath DestinationFile;
    public DateTime DestinationFileBuildTimestamp;
    public ICopyTaskResultAnalyzer Analyzer;
    public CopyTaskTrackingItem(Lifetime lifetime, IProject project, bool skipUnchangedFiles, FileSystemPath sourceFile, DateTime sourceFileBuildTimestamp, FileSystemPath destinationFile, DateTime destinationFileBuildTimestamp, ICopyTaskResultAnalyzer analyzer);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.CopyLocalHandling.CurrentProjectCopyTaskResultAnalyzer : CopyTaskResultAnalyzerBase {
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private ISignal`1<ProjectWithComment> <DirtyProject>k__BackingField;
    public ISignal`1<ProjectWithComment> DirtyProject { get; }
    public string TargetName { get; }
    public CurrentProjectCopyTaskResultAnalyzer(Lifetime lifetime, ILogger logger);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<ProjectWithComment> get_DirtyProject();
    public virtual string get_TargetName();
    protected virtual void HandleProjectItemInconsistent(IProject project, FileSystemPath source, FileSystemPath destination, string changeReason);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Features.SolBuilderDuo.Services.CopyLocalHandling.FilesUtil : object {
    [ExtensionAttribute]
internal static FileSystemPath EnsureAbsolute(FileSystemPath path, FileSystemPath projectPath);
    public static bool AreFilesConsistent(bool skipUnchangedFiles, FileSystemPath source, FileSystemPath destination, DateTime sourceFileTimestamp, DateTime destinationFileTimestamp);
    private static bool AreEqual(DateTime a, DateTime b);
    private static bool IsMatchingSizeAndTimeStamp(FileSystemPath source, FileSystemPath destination, bool filesExist, Nullable`1<DateTime> sourceTime, Nullable`1<DateTime> destinationTime);
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.CopyLocalHandling.ICopyLocalTaskExecutor {
    public abstract virtual void TryExecuteCopyLocal(Lifetime lifetime, IProject project, BuildSessionContext buildSessionContext, List`1<RdCopyTaskResult> copyTasksResults, RdCopyTaskGlobalProperties copyTaskGlobalProperties);
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.CopyLocalHandling.ICopyTaskResultAnalyzer {
    public string TargetName { get; }
    public abstract virtual string get_TargetName();
    public abstract virtual void AddNewResults(Lifetime lifetime, IProject project, List`1<RdCopyTaskResult> copyTasksResults, RdCopyTaskGlobalProperties copyTaskGlobalProperties, List`1<CopyTaskTrackingItem> requestedTrackingItemsCollector);
    public abstract virtual void TryExecuteCopyLocal(Lifetime lifetime, IProject project, BuildSessionContext buildSessionContext, List`1<RdCopyTaskResult> copyTasksResults, RdCopyTaskGlobalProperties copyTaskGlobalProperties);
    public abstract virtual void CheckConsistentFilesState(IProject project, bool skipUnchangedFiles, FileSystemPath source, FileSystemPath destination, DateTime sourceFileTimestamp, DateTime destinationFileTimestamp, string changeReason);
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.CopyLocalHandling.IDefaultCopyTaskResultAnalyzer {
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.CopyLocalHandling.ReferenceProjectsCopyTaskResultAnalyzer : CopyTaskResultAnalyzerBase {
    private ICopyLocalTaskExecutor myCopyLocalTaskExecutor;
    public string TargetName { get; }
    public ReferenceProjectsCopyTaskResultAnalyzer(ILogger logger, ICopyLocalTaskExecutor copyLocalTaskExecutor);
    public virtual string get_TargetName();
    public virtual void TryExecuteCopyLocal(Lifetime lifetime, IProject project, BuildSessionContext buildSessionContext, List`1<RdCopyTaskResult> copyTasksResults, RdCopyTaskGlobalProperties copyTaskGlobalProperties);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.CopyLocalInvalidationTracker : object {
    [CompilerGeneratedAttribute]
private ISimpleSignal <InvalidCopyLocalDataReceived>k__BackingField;
    public ISimpleSignal InvalidCopyLocalDataReceived { get; }
    public CopyLocalInvalidationTracker(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_InvalidCopyLocalDataReceived();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.DotNetCoreIncrementalRunnerProjectChecker : object {
    public sealed virtual bool IsApplicable(IProject project);
    public sealed virtual bool CanBuild(IProject project);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.ExceptionalProjectBuildHeuristicHolder : object {
    private static char Separator;
    private IProperty`1<string> myNeverBuildProjectsProperty;
    private IProperty`1<string> myAlwaysBuildProjectsProperty;
    [CompilerGeneratedAttribute]
private ISimpleSignal <SettingsChanged>k__BackingField;
    public ISimpleSignal SettingsChanged { get; }
    public ExceptionalProjectBuildHeuristicHolder(ISolution solution, ISettingsStore settings, Lifetime lifetime);
    [CompilerGeneratedAttribute]
public ISimpleSignal get_SettingsChanged();
    public bool IsNeverBuild(IProject project);
    public bool IsAlwaysBuild(IProject project);
    public void SetIsNeverBuild(IProject project, bool val);
    public void SetIsAlwaysBuild(IProject project, bool val);
    private static void SetHeuristicPropertyValue(IProject project, bool val, IProperty`1<string> heuristicProperty);
    private static string GetSettingsValueFromIdList(IEnumerable`1<Guid> ids);
    private static JetHashSet`1<Guid> GetIdListFromSettingsValue(string settingsValue);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.GraphRelactionCalculator : object {
    public Dictionary`2<IProjectWithReferences, ISet`1<IProjectWithReferences>> GetNodesToAllReferences(ProjectsGraph graph);
    public Dictionary`2<IProjectWithReferences, ISet`1<IProjectWithReferences>> GetNodesToAllReferencesToNode(ProjectsGraph graph);
    private static Dictionary`2<IProjectWithReferences, ISet`1<IProjectWithReferences>> CalculateNodes(ProjectsGraph graph, Func`2<IProjectWithReferences, IEnumerable`1<IProjectWithReferences>> getRefNodes, Action`3<ProjectsGraph, Func`2<IProjectWithReferences, bool>, Action`1<IProjectWithReferences>> walk);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.GraphRelativeStateMapper : object {
    private Dictionary`2<IProject, IEnumerable`1<ProjectState>> myProjectReferencesStates;
    private Dictionary`2<IProject, IEnumerable`1<ProjectState>> myReferencedToProjectStates;
    private GraphRelactionCalculator myCalculator;
    public void Init(ProjectsGraph graph, ProjectsGraphState state);
    private static void FillMap(ProjectsGraphState state, Dictionary`2<IProjectWithReferences, ISet`1<IProjectWithReferences>> nodesToAllReferences, Dictionary`2<IProject, IEnumerable`1<ProjectState>> map);
    public IEnumerable`1<ProjectState> GetStatesFromAllProjectReferences(IProject project);
    public IEnumerable`1<ProjectState> GetStatesFromAllReferencesToProject(IProject project);
    private static IEnumerable`1<ProjectState> TryGetStates(IProject project, Dictionary`2<IProject, IEnumerable`1<ProjectState>> map);
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.IAggregatedSolutionBuilderConfigurationReloadTracker {
    [NotNullAttribute]
public IProperty`1<bool> Reloading { get; }
    public abstract virtual IProperty`1<bool> get_Reloading();
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.IBuildEventPresenter {
    [NotNullAttribute]
public abstract virtual string Present(OutputItemBase item, IBuildSessionLoader loader);
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.IBuildResultTracker {
    public abstract virtual void Add(Lifetime lifetime, BuildResultWithProject res);
    public abstract virtual IEnumerable`1<BuildResultWithProject> GetResults();
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.IBuildTimeTracker {
    public abstract virtual void OnBuildBegin(SolutionBuilderRequest builderRequest);
    public abstract virtual void OnBuildDone(IEnumerable`1<IProject> skippedProjects, bool isCanceledBuild);
    public abstract virtual void OnProjectBegin(IProject project);
    public abstract virtual void OnProjectDone(IProject project, bool succeded);
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.IBuildUnexpectedEventTracker {
    public ISignal`1<int> ProcessUnexpectedExited { get; }
    public ISignal`1<string> UnexpectedException { get; }
    public abstract virtual ISignal`1<int> get_ProcessUnexpectedExited();
    public abstract virtual ISignal`1<string> get_UnexpectedException();
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.ICopyLocalInvalidationTracker {
    public ISimpleSignal InvalidCopyLocalDataReceived { get; }
    public abstract virtual ISimpleSignal get_InvalidCopyLocalDataReceived();
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.IGraphChecker {
    public abstract virtual void Check(IProject project, ProjectsGraph projectsGraph, ProjectsGraphState graphState, IBuildSessionTarget target);
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.IIncrementalRunnerViewModel {
    public IProperty`1<bool> IsAvailable { get; }
    public IProperty`1<bool> IsWaitingSolutionLoaded { get; }
    public abstract virtual IProperty`1<bool> get_IsAvailable();
    public abstract virtual IProperty`1<bool> get_IsWaitingSolutionLoaded();
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.IMainThreadExecutor {
    public abstract virtual void Execute(Lifetime lifetime, string name, Action action);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.Features.SolBuilderDuo.Services.IncrementalBuildTrigger : object {
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private ICurrentBuildRunnerHolder myHolder;
    [NotNullAttribute]
private ISolutionBuilder myBuilder;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private IShellLocks myLocks;
    private bool myShouldBuild;
    public IncrementalBuildTrigger(Lifetime lifetime, ILogger logger, ICurrentBuildRunnerHolder holder, ISolutionBuilder builder, ISolution solution, IShellLocks locks);
    public sealed virtual void TriggerBuild();
    public void HandleBuildRunnerChanged();
    [CompilerGeneratedAttribute]
private void <HandleBuildRunnerChanged>b__9_0();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.IncrementalRunner : object {
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private IBuildRunWrapper myBuildRunWrapper;
    [NotNullAttribute]
private IReSharperBuildSettingsManager myEnabledSettingManager;
    [NotNullAttribute]
private IProjectConsistentConfigKeeper myProjectConsistentConfigKeeper;
    [NotNullAttribute]
private ISolutionBuilderFileAnalyzer mySolutionBuilderFileAnalyzer;
    [NotNullAttribute]
private IThreading myThreading;
    [NotNullAttribute]
private IProperty`1<bool> myIsAvailableExtended;
    [NotNullAttribute]
private IProperty`1<bool> myIsWaitingSolutionLoaded;
    [NotNullAttribute]
private SolutionBuilderControllerPrototype mySolutionBuilderControllerPrototype;
    private object myStateSync;
    private bool myIsAvailableValue;
    private bool myIsReadyValue;
    [NotNullAttribute]
private SequentialLifetimes myRequestLifetimes;
    private Guid myLastStartedRequestId;
    [CompilerGeneratedAttribute]
private IncrementalRunnerApplicabilityChecker <Checker>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsReady>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsAvailableMixin>k__BackingField;
    [NotNullAttribute]
public IncrementalRunnerApplicabilityChecker Checker { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsReady { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsAvailable { get; }
    [NotNullAttribute]
[PublicAPIAttribute]
protected IProperty`1<bool> IsAvailableMixin { get; }
    protected bool ShouldWaitUntilSolutionLoaded { get; }
    public bool CanExecuteCustomTarget { get; }
    public double Priority { get; }
    public bool IsIncremental { get; }
    private IProperty`1<bool> JetBrains.ReSharper.Features.SolBuilderDuo.Services.IIncrementalRunnerViewModel.IsAvailable { get; }
    private IProperty`1<bool> JetBrains.ReSharper.Features.SolBuilderDuo.Services.IIncrementalRunnerViewModel.IsWaitingSolutionLoaded { get; }
    public IncrementalRunner(Lifetime lifetime, ILogger logger, SolutionBuilderControllerPrototype solutionBuilderControllerPrototype, IncrementalRunnerApplicabilityChecker checker, IBuildRunWrapper buildRunWrapper, IReSharperBuildSettingsManager enabledSettingManager, IProjectConsistentConfigKeeper projectConsistentConfigKeeper, ISolutionBuilderFileAnalyzer solutionBuilderFileAnalyzer, IThreading threading);
    [CompilerGeneratedAttribute]
public IncrementalRunnerApplicabilityChecker get_Checker();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsReady();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsAvailable();
    [CompilerGeneratedAttribute]
protected IProperty`1<bool> get_IsAvailableMixin();
    protected virtual bool get_ShouldWaitUntilSolutionLoaded();
    private void RecalculateState();
    private void SetNewState();
    public sealed virtual bool get_CanExecuteCustomTarget();
    public sealed virtual int GetSkippedProjectsCount(SolutionBuilderRequest request);
    public sealed virtual double get_Priority();
    public sealed virtual bool get_IsIncremental();
    public sealed virtual bool IsDefault();
    private sealed virtual override IProperty`1<bool> JetBrains.ReSharper.Features.SolBuilderDuo.Services.IIncrementalRunnerViewModel.get_IsAvailable();
    private sealed virtual override IProperty`1<bool> JetBrains.ReSharper.Features.SolBuilderDuo.Services.IIncrementalRunnerViewModel.get_IsWaitingSolutionLoaded();
    public sealed virtual void ExecuteBuildRequest(SolutionBuilderRequest builderRequest);
    public sealed virtual void Abort(SolutionBuilderRequest request);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.IncrementalRunnerApplicabilityChecker : object {
    private ExceptionalProjectBuildHeuristicHolder myExceptionalProjectBuildHeuristicHolder;
    private IImmutableList`1<IIncrementalRunnerProjectChecker> myCheckers;
    [CompilerGeneratedAttribute]
private IProperty`1<ApplicabilityState> <ApplicabilityState>k__BackingField;
    private HashSet`1<IProject> myCantApplyHeuristicProject;
    [NotNullAttribute]
public IProperty`1<ApplicabilityState> ApplicabilityState { get; }
    public IEnumerable`1<IProject> CantApplyHeuristicProject { get; }
    public IncrementalRunnerApplicabilityChecker(Lifetime lifetime, IViewableProjectsCollection projects, IImmutableList`1<IIncrementalRunnerProjectChecker> checkers, IProjectsWithoutConfigurationHolder projecstWithoutConfigurationHolder, ExceptionalProjectBuildHeuristicHolder exceptionalProjectBuildHeuristicHolder, ISolutionApplicabilityCheckingManager solutionApplicabilityCheckingManager);
    [CompilerGeneratedAttribute]
public IProperty`1<ApplicabilityState> get_ApplicabilityState();
    public IEnumerable`1<IProject> get_CantApplyHeuristicProject();
    public bool CanApplyHeuristics(IProject project);
    private bool IsApplicableProject(IProject project);
    private void RemoveProjectsWithoutConfigurationFromBuild(ICollection`1<IProject> projects);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.IncrementalRunnerStrangeProjectRestrictor : object {
    private List`1<string> myForbiddenProjectExtensions;
    public sealed virtual bool IsApplicable(IProject project);
    public sealed virtual bool CanBuild(IProject project);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.Internal.BuildResultTracker : object {
    private List`1<BuildResultWithProject> myResults;
    public sealed virtual void Add(Lifetime lifetime, BuildResultWithProject res);
    public sealed virtual IEnumerable`1<BuildResultWithProject> GetResults();
}
[ActionAttribute("Dump Solution Builder project configurations")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.Internal.DumpSolutionBuilderBuildConfigurationsAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("Dump Solution Builder build story reasons")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.Internal.DumpSolutionBuilderBuildStoryReasonsAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.Internal.GraphChecker : object {
    private GraphWalker myWalker;
    private IContextBoundSettingsStore mySettingsStore;
    public GraphChecker(Lifetime lifetime, ISettingsStore settingsStore, ISolution solution);
    public sealed virtual void Check(IProject project, ProjectsGraph projectsGraph, ProjectsGraphState graphState, IBuildSessionTarget target);
    private void TraverseParents(IProjectWithReferences proj, ProjectsGraphState graphState);
    private void TraverseChildren(IProjectWithReferences proj, ProjectsGraphState graphState);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.Internal.ProjectChangingReasonTracker : object {
    [NotNullAttribute]
private ILogger myLogger;
    private bool myIsSolutionChanged;
    [NotNullAttribute]
private IList`1<ProjectChangingInfo> myProjectsInfo;
    public ProjectChangingReasonTracker(ILogger logger);
    public sealed virtual void AddDirtyProject(ProjectWithComment projectWithComment);
    public sealed virtual void AddChangedProject(ProjectWithComment projectWithComment);
    public sealed virtual void SetSolutionChanged();
    public sealed virtual void Clear();
    public sealed virtual ProjectChangingReasonInfo GetCurrentReasons();
    private void Log(string message);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.Internal.SolutionBuilderDump : object {
    private SolutionBuilderControllerPrototype myController;
    private IBuildResultTracker myBuildResultTracker;
    public SolutionBuilderDump(SolutionBuilderControllerPrototype solutionBuilderControllerPrototype, IBuildResultTracker buildResultTracker);
    [NotNullAttribute]
public string Dump();
    public void Dump(TextWriter writer);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.Internal.SolutionBuilderStoryDumper : object {
    private bool myShouldDump;
    private Queue`1<string> myDumps;
    [NotNullAttribute]
private ProjectChangingReasonTracker myProjectChangingReasonTracker;
    public SolutionBuilderStoryDumper(Lifetime lifetime, ISettingsStore settingsStore, ProjectChangingReasonTracker projectChangingReasonTracker);
    public sealed virtual void Dump(ISolutionDirtyState dirtyState, ProjectsGraphState projectsGraphState, UInt32 sessionId);
    public sealed virtual void DumpDirtyStateCleared();
    public void SaveToFile(StreamWriter writer);
    public string GetDump();
    private void Enqueue(string value);
    private string GetCurrentTime();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_1(Lifetime lt, bool val);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.Internal.ZoneMarker : object {
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.IProjectBuildTimeMap {
    public abstract virtual TimeSpan GetProjectBuildTime(IProject project);
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.IProjectBuildTimeStorage {
    public abstract virtual void SaveTime(IProject project, TimeSpan time);
    public abstract virtual TimeSpan GetSumTime(IEnumerable`1<IProject> projects);
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.IProjectBuildTracker {
    public Signal`1<ICollection`1<IProject>> ProjectCollectionBuildStarted { get; }
    public Signal`1<ProjectBuildResult> ProjectCollectionBuildCompleted { get; }
    public abstract virtual Signal`1<ICollection`1<IProject>> get_ProjectCollectionBuildStarted();
    public abstract virtual Signal`1<ProjectBuildResult> get_ProjectCollectionBuildCompleted();
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.IProjectChangingReasonStorage {
    [NotNullAttribute]
public abstract virtual ProjectChangingReasonInfo GetCurrentReasons();
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.IProjectChangingReasonTracker {
    public abstract virtual void AddDirtyProject(ProjectWithComment projectWithComment);
    public abstract virtual void AddChangedProject(ProjectWithComment projectWithComment);
    public abstract virtual void SetSolutionChanged();
    public abstract virtual void Clear();
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.IProjectConsistentConfigKeeper {
    [NotNullAttribute]
public IProperty`1<bool> IsConfigurationConsistent { get; }
    [NotNullAttribute]
public IProperty`1<bool> CalculationFinished { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsWaitingSolutionLoaded { get; }
    public abstract virtual IProperty`1<bool> get_IsConfigurationConsistent();
    public abstract virtual IProperty`1<bool> get_CalculationFinished();
    public abstract virtual IProperty`1<bool> get_IsWaitingSolutionLoaded();
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.IProjectStateChangeHandler {
    public int Priority { get; }
    public abstract virtual int get_Priority();
    public abstract virtual void Handle(ICollection`1<IProject> projects, ProjectBuildingState newState, BuildSessionContext buildSessionContext);
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.IProjectStateChangeNotifier {
    public ISignal`1<Pair`2<ICollection`1<IProject>, ProjectBuildingState>> StateChanged { get; }
    public abstract virtual ISignal`1<Pair`2<ICollection`1<IProject>, ProjectBuildingState>> get_StateChanged();
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.IProjectsWithoutConfigurationHolder {
    public IProperty`1<ProjectsWithoutConfiguration> ProjectsWithoutConfiguration { get; }
    public abstract virtual IProperty`1<ProjectsWithoutConfiguration> get_ProjectsWithoutConfiguration();
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.ISolutionBuilderBusyState {
    [NotNullAttribute]
public IProperty`1<bool> Idle { get; }
    public abstract virtual IProperty`1<bool> get_Idle();
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.ISolutionBuilderConfigurationReloadTracker {
    [NotNullAttribute]
public IProperty`1<bool> Reloading { get; }
    public abstract virtual IProperty`1<bool> get_Reloading();
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.ISolutionBuilderFileAnalyzer {
    [NotNullAttribute]
public IProperty`1<bool> Idle { get; }
    public abstract virtual IProperty`1<bool> get_Idle();
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.ISolutionBuilderStoryDumper {
    public abstract virtual void Dump(ISolutionDirtyState dirtyState, ProjectsGraphState projectsGraphState, UInt32 sessionId);
    public abstract virtual void DumpDirtyStateCleared();
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.ISolutionBuilderUnexpectedBehaviourTracker {
    public ISimpleSignal UnexpectedErrorReceived { get; }
    public abstract virtual ISimpleSignal get_UnexpectedErrorReceived();
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.ISolutionConfigurationManager {
    [NotNullAttribute]
public IProperty`1<bool> CalculationFinished { get; }
    public abstract virtual IProperty`1<bool> get_CalculationFinished();
}
public interface JetBrains.ReSharper.Features.SolBuilderDuo.Services.IViewableProjectMesssages {
    public abstract virtual void SubscribeToMessages(Lifetime lifetime, IProject project, Action`1<IEnumerable`1<string>> onCurrentMessages, Action`1<string> onNewMessage);
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.MainThreadExecutor : object {
    private IThreading myThreading;
    public MainThreadExecutor(IThreading threading);
    public sealed virtual void Execute(Lifetime lifetime, string name, Action action);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.Features.SolBuilderDuo.Services.OutOfProcBuildRunner : object {
    private IProjectBuildTracker myProjectBuildTracker;
    private IBuildTimeTracker myBuildTimeTracker;
    private ProjectIdFactory myProjectIdFactory;
    [CanBeNullAttribute]
private IBuildResultTracker myBuildResultTracker;
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private ISimpleSignal <UnexpectedErrorReceived>k__BackingField;
    public ISimpleSignal UnexpectedErrorReceived { get; }
    public OutOfProcBuildRunner(Lifetime lifetime, IProjectBuildTracker projectBuildTracker, IBuildTimeTracker buildTimeTracker, ProjectIdFactory projectIdFactory, IBuildResultTracker buildResultTracker);
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_UnexpectedErrorReceived();
    public sealed virtual void BeginBuild(BuildLaunchContext buildLaunchContext, IProject project, Action`1<BuildExecutionResult> callback);
    private static BuildEventForWholeLaunchQueue GetBuildEvents(BuildLaunchContext buildLaunchContext, RdBuildResult result);
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.Features.SolBuilderDuo.Services.OutOfProcBuildSessionContextFactory : object {
    private ISolution mySolution;
    [NotNullAttribute]
private MsBuildConnectionFactory myConnectionFactory;
    [NotNullAttribute]
private ISolutionConfigurationHolder mySolutionConfigurationHolder;
    [NotNullAttribute]
private IEnumerable`1<IBuildAdditionalPropertiesProvider> myPropertiesProviders;
    [CanBeNullAttribute]
private IOutputLogger myOutputLogger;
    private IBuildUnexpectedEventTracker myBuildUnexpectedEventTracker;
    [NotNullAttribute]
private ISolutionToolset mySolutionToolset;
    [NotNullAttribute]
private ProjectIdFactory myProjectIdFactory;
    [NotNullAttribute]
private ProjectMesssagesHolder myProjectMesssagesHolder;
    [NotNullAttribute]
private MsBuildCustomPropertiesProvider myCustomPropertiesProvider;
    [NotNullAttribute]
private MsBuildProjectPropertiesBuilder myPropertiesBuilder;
    [NotNullAttribute]
private ProjectStateChangeNotificationManager myProjectStateChangeNotificationManager;
    [NotNullAttribute]
private SolutionBuilderSettingsFactory mySolutionBuilderSettingsFactory;
    private ISolutionProcessStartInfoPatcher myProcessStartInfoPatcher;
    private IMsBuildUserProfile myMsBuildUserProfile;
    private ILogger myLogger;
    public OutOfProcBuildSessionContextFactory(ISolution solution, MsBuildConnectionFactory connectionFactory, ISolutionConfigurationHolder solutionConfigurationHolder, IEnumerable`1<IBuildAdditionalPropertiesProvider> propertiesProviders, IBuildUnexpectedEventTracker buildUnexpectedEventTracker, ISolutionToolset solutionToolset, ProjectIdFactory projectIdFactory, ProjectMesssagesHolder projectMesssagesHolder, MsBuildCustomPropertiesProvider customPropertiesProvider, MsBuildProjectPropertiesBuilder propertiesBuilder, ProjectStateChangeNotificationManager projectStateChangeNotificationManager, SolutionBuilderSettingsFactory solutionBuilderSettingsFactory, ISolutionProcessStartInfoPatcher processStartInfoPatcher, IMsBuildUserProfile msBuildUserProfile, ILogger logger, IOutputLogger outputLogger);
    public sealed virtual BuildSessionContextCreationResult Create(Lifetime lifetime, IBuildSessionTarget target, ProjectCollectionActiveConfiguration projectCollectionActiveConfiguration, SolutionBuilderRequest solutionBuilderRequest);
    private IMsBuildSession CreateSession(Lifetime lifetime, SolutionBuilderRequest solutionBuilderRequest, IBuildTool msBuildForSolution, MsBuildConnectionContext connectionContext, RdBuildSessionContext context2, SolutionBuilderSettings buildSettings);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.OutputLoggerSettingsProvider : OutputLoggerSettingsProviderStub {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <LogToOutput>k__BackingField;
    public IProperty`1<bool> LogToOutput { get; }
    public OutputLoggerSettingsProvider(Lifetime lifetime, ISettingsStore settingsStore);
    [CompilerGeneratedAttribute]
public virtual IProperty`1<bool> get_LogToOutput();
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Features.SolBuilderDuo.Services.PostBuildEventExecutor : SurroundBuildEventExecutor {
    public int Priority { get; }
    public PostBuildEventExecutor(ProjectIdFactory projectIdFactory);
    public virtual int get_Priority();
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Features.SolBuilderDuo.Services.PreBuildEventExecutor : SurroundBuildEventExecutor {
    public int Priority { get; }
    public PreBuildEventExecutor(ProjectIdFactory projectIdFactory);
    public virtual int get_Priority();
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.ProjectBuildResult : object {
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private RdBuildResult <BuildResult>k__BackingField;
    [NotNullAttribute]
public IProject Project { get; }
    [CanBeNullAttribute]
public RdBuildResult BuildResult { get; }
    public ProjectBuildResult(IProject project, RdBuildResult buildResult);
    [CompilerGeneratedAttribute]
public IProject get_Project();
    [CompilerGeneratedAttribute]
public RdBuildResult get_BuildResult();
}
internal class JetBrains.ReSharper.Features.SolBuilderDuo.Services.ProjectBuildTime : object {
    [CompilerGeneratedAttribute]
private TimeSpan <BuildTime>k__BackingField;
    public TimeSpan BuildTime { get; }
    public ProjectBuildTime(double totalMilliseconds);
    public ProjectBuildTime(TimeSpan buildTime);
    [CompilerGeneratedAttribute]
public TimeSpan get_BuildTime();
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.Features.SolBuilderDuo.Services.ProjectBuildTimeStorage : object {
    private IPersistentSortedMap`2<string, ProjectBuildTime> myMap;
    private static IUnsafeMarshaller`1<ProjectBuildTime> ourProjectTimeMarshaller;
    public ProjectBuildTimeStorage(ISolutionCaches solutionCaches);
    private static ProjectBuildTimeStorage();
    public sealed virtual void SaveTime(IProject project, TimeSpan time);
    public sealed virtual TimeSpan GetSumTime(IEnumerable`1<IProject> projects);
    private string GetProjectKey(IProject project);
    private sealed virtual override TimeSpan JetBrains.ReSharper.Features.SolBuilderDuo.Services.IProjectBuildTimeMap.GetProjectBuildTime(IProject project);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.ProjectBuildTracker : object {
    [CompilerGeneratedAttribute]
private Signal`1<ICollection`1<IProject>> <ProjectCollectionBuildStarted>k__BackingField;
    [CompilerGeneratedAttribute]
private Signal`1<ProjectBuildResult> <ProjectCollectionBuildCompleted>k__BackingField;
    public Signal`1<ICollection`1<IProject>> ProjectCollectionBuildStarted { get; }
    public Signal`1<ProjectBuildResult> ProjectCollectionBuildCompleted { get; }
    public ProjectBuildTracker(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public sealed virtual Signal`1<ICollection`1<IProject>> get_ProjectCollectionBuildStarted();
    [CompilerGeneratedAttribute]
public sealed virtual Signal`1<ProjectBuildResult> get_ProjectCollectionBuildCompleted();
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.ProjectChangingInfo : object {
    [CompilerGeneratedAttribute]
private ProjectChangingType <ChangingType>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectWithComment <ProjectInfo>k__BackingField;
    public ProjectChangingType ChangingType { get; }
    public ProjectWithComment ProjectInfo { get; }
    public ProjectChangingInfo(ProjectChangingType changingType, ProjectWithComment projectInfo);
    [CompilerGeneratedAttribute]
public ProjectChangingType get_ChangingType();
    [CompilerGeneratedAttribute]
public ProjectWithComment get_ProjectInfo();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.ProjectChangingReasonInfo : object {
    [CompilerGeneratedAttribute]
private bool <IsSolutionChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ProjectChangingInfo> <ProjectsInfo>k__BackingField;
    public bool IsSolutionChanged { get; }
    public IEnumerable`1<ProjectChangingInfo> ProjectsInfo { get; }
    public ProjectChangingReasonInfo(IEnumerable`1<ProjectChangingInfo> projectsInfo, bool isSolutionChanged);
    [CompilerGeneratedAttribute]
public bool get_IsSolutionChanged();
    [CompilerGeneratedAttribute]
public IEnumerable`1<ProjectChangingInfo> get_ProjectsInfo();
    public virtual string ToString();
}
public enum JetBrains.ReSharper.Features.SolBuilderDuo.Services.ProjectChangingType : Enum {
    public int value__;
    public static ProjectChangingType Changed;
    public static ProjectChangingType Dirty;
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.Features.SolBuilderDuo.Services.ProjectMesssagesHolder : object {
    private Lifetime myLifetime;
    [NotNullAttribute]
private ProjectIdFactory myProjectIdFactory;
    private IProject mySubscribedProject;
    private Action`1<string> myOnNewMessage;
    private int myNextMessageId;
    private IDictionary`2<int, List`1<int>> myMessagesIds;
    private IPersistentSortedMap`2<int, string> myMessagesMap;
    public ProjectMesssagesHolder(Lifetime lifetime, ISolutionCaches solutionCaches, ProjectIdFactory projectIdFactory);
    public void Clear();
    public void AddMessage(RdProjectId projectId, string text);
    public sealed virtual void SubscribeToMessages(Lifetime lifetime, IProject project, Action`1<IEnumerable`1<string>> onCurrentMessages, Action`1<string> onNewMessage);
    public void SetProjectId(IProject project, RdProjectId id);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_0();
    [CompilerGeneratedAttribute]
private void <SubscribeToMessages>b__10_0();
}
internal class JetBrains.ReSharper.Features.SolBuilderDuo.Services.ProjectReferenceChangeInfo : object {
    [CompilerGeneratedAttribute]
private IProject <SourceProject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetIdString>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectModelChangeType <ProjectModelChangeType>k__BackingField;
    public IProject SourceProject { get; }
    public string TargetIdString { get; }
    public ProjectModelChangeType ProjectModelChangeType { get; }
    public ProjectReferenceChangeInfo(IProject sourceProject, string targetIdString, ProjectModelChangeType projectModelChangeType);
    [CompilerGeneratedAttribute]
public IProject get_SourceProject();
    [CompilerGeneratedAttribute]
public string get_TargetIdString();
    [CompilerGeneratedAttribute]
public ProjectModelChangeType get_ProjectModelChangeType();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.ProjectsPersistentKeeper : object {
    private ILogger myLogger;
    private ISolution mySolution;
    private ISolutionConfigurationHolder mySolutionConfiguratoinHolder;
    private SolutionConfigurationManager mySolutionConfigurationManager;
    private ExceptionalProjectBuildHeuristicHolder myExceptionalProjectBuildHeuristicHolder;
    [NotNullAttribute]
private ProjectsPersistentKeeperLoggerSettings myProjectsPersistentKeeperLoggerSettings;
    private GroupingEvent myRescanEvent;
    private IList`1<IProject> myProjects;
    private IDictionary`2<ProjectUniqueKey, IProject> myProjectsPerKeys;
    private object mySyncObject;
    private ProjectCollectionActiveConfiguration myProjectCollectionActiveConfiguration;
    private SolutionBuildDependencies mySolutionBuildDependencies;
    private bool mySolutionLoaded;
    private bool myAccessGranted;
    private ViewableProperty`1<ISolutionConfigurationAndPlatform> mySolutionActiveConfiguration;
    [CompilerGeneratedAttribute]
private ISignal`1<ProjectWithComment> <ChangedProject>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <SolutionConfigurationChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <ProjectCollectionConfigurationChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsConfigurationConsistent>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <CalculationFinished>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsWaitingSolutionLoaded>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Reloading>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<ProjectsWithoutConfiguration> <ProjectsWithoutConfiguration>k__BackingField;
    public ISignal`1<ProjectWithComment> ChangedProject { get; }
    public IReadonlyProperty`1<ISolutionConfigurationAndPlatform> SolutionActiveConfiguration { get; }
    public ISimpleSignal SolutionConfigurationChanged { get; }
    public ISimpleSignal ProjectCollectionConfigurationChanged { get; }
    public IProperty`1<bool> IsConfigurationConsistent { get; }
    public IProperty`1<bool> CalculationFinished { get; }
    public IProperty`1<bool> IsWaitingSolutionLoaded { get; }
    public IProperty`1<bool> Reloading { get; }
    public IProperty`1<ProjectsWithoutConfiguration> ProjectsWithoutConfiguration { get; }
    public ProjectsPersistentKeeper(Lifetime lifetime, ILogger logger, ChangeManager changeManager, ISolution solution, IShellLocks locks, ISolutionConfigurationAccessibilityChecker solutionConfigurationAccessibilityChecker, ISolutionConfigurationHolder solutionConfiguratoinHolder, SolutionConfigurationManager solutionConfigurationManager, ExceptionalProjectBuildHeuristicHolder exceptionalProjectBuildHeuristicHolder, ProjectsPersistentKeeperLoggerSettings projectsPersistentKeeperLoggerSettings, ISolutionLoadTasksScheduler solutionLoadTasksScheduler);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<ProjectWithComment> get_ChangedProject();
    public IReadonlyProperty`1<ISolutionConfigurationAndPlatform> get_SolutionActiveConfiguration();
    [CompilerGeneratedAttribute]
public ISimpleSignal get_SolutionConfigurationChanged();
    [CompilerGeneratedAttribute]
public ISimpleSignal get_ProjectCollectionConfigurationChanged();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsConfigurationConsistent();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_CalculationFinished();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsWaitingSolutionLoaded();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_Reloading();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<ProjectsWithoutConfiguration> get_ProjectsWithoutConfiguration();
    public sealed virtual object Execute(IChangeMap changeMap);
    public IEnumerable`1<IProject> GetCurrentProjects();
    public IDictionary`2<ProjectUniqueKey, IProject> GetCurrentProjectsPerKeys();
    public ProjectCollectionActiveConfiguration GetCurrentProjectCollectionActiveConfiguration();
    public SolutionBuildDependencies GetSolutionBuildDependencies();
    public ISolutionConfigurationAndPlatform GetCurrentSolutionActiveConfiguration();
    private void ProcessProjectModelChange(ProjectModelChange modelChange, ICollection`1<ProjectReferenceChangeInfo> deltas);
    private void ProcessProjectItemChange(ProjectItemChange itemChange);
    private void FireRescanEvent();
    private void RecalculateProjects();
    private Dictionary`2<ProjectUniqueKey, IProject> GetProjectsMapping();
    private ProjectCollectionActiveConfiguration GetConfig(IEnumerable`1<IProject> projects);
    private ISolutionConfigurationAndPlatform CalculateCurrentSolutionActiveConfiguration();
    public SolutionBuildDependencies CalculateSolutionBuildDependencies();
    private void SetNewSolutionActiveConfiguration(ISolutionConfigurationAndPlatform solutionActiveConfiguration);
    private void SetNewSolutionBuildDependencies(SolutionBuildDependencies solutionBuildDependencies);
    private void CheckProjects(IList`1<IProject> projects);
    private static JetHashSet`1<IProject> CalculateChangedProjects(List`1<ProjectReferenceChangeInfo> deltas);
    [NotNullAttribute]
private string RemoveBracketSymbols(string source);
    [CompilerGeneratedAttribute]
private void <.ctor>b__15_0(Lifetime lt, bool calculationFinished);
    [CompilerGeneratedAttribute]
private void <.ctor>b__15_1(ISolutionConfigurationAndPlatform _);
    [CompilerGeneratedAttribute]
private void <.ctor>b__15_2(Lifetime ltToIgnore);
    [CompilerGeneratedAttribute]
private void <.ctor>b__15_3();
    [CompilerGeneratedAttribute]
private void <.ctor>b__15_4(Lifetime lt);
    [CompilerGeneratedAttribute]
private void <.ctor>b__15_5();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.ProjectsPersistentKeeperLoggerSettings : object {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <AdvancedLog>k__BackingField;
    public IProperty`1<bool> AdvancedLog { get; }
    public ProjectsPersistentKeeperLoggerSettings(Lifetime lifetime, ISolution solution, ISettingsStore settingsStore);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_AdvancedLog();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.ProjectStateChangeNotificationManager : object {
    [CanBeNullAttribute]
private BuildSessionContext myCurrentContext;
    public ProjectStateChangeNotificationManager(Lifetime lifetime, IProjectStateChangeNotifier notifier, IEnumerable`1<IProjectStateChangeHandler> projectStateChangeHandlers);
    public void UseBuildSession(Lifetime lifetime, BuildSessionContext buildSessionContext);
    [CompilerGeneratedAttribute]
private void <UseBuildSession>b__2_0();
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.ProjectsWithoutConfiguration : object {
    [CompilerGeneratedAttribute]
private ICollection`1<IProject> <Projects>k__BackingField;
    public ICollection`1<IProject> Projects { get; }
    public ProjectsWithoutConfiguration(ICollection`1<IProject> projects);
    [CompilerGeneratedAttribute]
public ICollection`1<IProject> get_Projects();
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.SolutionBuilderCommandProcessor : object {
    private ILogger myLogger;
    private Lifetime myLifetime;
    private IProperty`1<ProjectsGraphState> myGraphState;
    private IProperty`1<BuilderState> myBuilderState;
    private IProperty`1<ProjectsGraph> myProjectsGraph;
    private IBuildSessionContextFactory myBuildSessionContextFactory;
    private IProjectChangeTracker myProjectsChangingTracker;
    private ProjectsGraphBuilder myProjectsGraphBuilder;
    private IProjectsGraphStateCalculator myProjectsGraphStateCalculator;
    private IBuildHeuristicFactory myBuildHeuristicFactory;
    private IProjectForBuildingChooser myProjectForBuildingChooser;
    private ISolutionBuilderCache mySolutionBuilderCache;
    private ISimpleSignal myProjectsGraphStateChangedSignal;
    private ISimpleSignal mySolutionConfigurationChangedSignal;
    private ISignal`1<BuildExecutionResult> myBuildExecutionResultSignal;
    [CanBeNullAttribute]
private IGraphChecker myGraphChecker;
    private IBuildRunner myBuildRunner;
    [NotNullAttribute]
private IMainThreadExecutor myThreading;
    private GraphRelativeStateMapper myGraphRelativeStateMapper;
    private IProjectBuildTracker myProjectBuildTracker;
    private IBuildTimeTracker myBuildTimeTracker;
    private ISolutionBuilderPersistentDataLoadedCommandTracker mySolutionBuilderPersistentDataLoadedCommandTracker;
    [CanBeNullAttribute]
private ISolutionBuilderStoryDumper mySolutionBuilderDumper;
    [CanBeNullAttribute]
private IProjectChangingReasonTracker myProjectChangingReasonTracker;
    private BeginProcessCommand myLastBeginProcessCommand;
    private BuildSessionContext myBuildSessionContext;
    private DateTime myLastBuildTime;
    private bool mySolutionConfigurationChangedCommandReceived;
    private ProjectsGraphState State { get; private set; }
    private BuilderState BuilderState { get; private set; }
    private ProjectsGraph ProjectsGraph { get; private set; }
    public SolutionBuilderCommandProcessor(Lifetime lifetime, IProperty`1<ProjectsGraphState> graphState, IProperty`1<BuilderState> builderState, IProperty`1<ProjectsGraph> projectsGraph, ISimpleSignal projectsGraphStateChangedSignal, ISimpleSignal solutionConfigurationChangedSignal, ISignal`1<BuildExecutionResult> buildExecutionResultSignal, IBuildSessionContextFactory buildSessionContextFactory, IProjectChangeTracker projectsChangingTracker, ProjectsGraphBuilder projectsGraphBuilder, IProjectsGraphStateCalculator projectsGraphStateCalculator, IBuildHeuristicFactory buildHeuristicFactory, IProjectForBuildingChooser projectForBuildingChooser, ISolutionBuilderCache solutionBuilderCache, IGraphChecker graphChecker, IBuildRunner buildRunner, IMainThreadExecutor threading, GraphRelativeStateMapper graphRelativeStateMapper, IProjectBuildTracker projectBuildTracker, IBuildTimeTracker buildTimeTracker, ISolutionBuilderPersistentDataLoadedCommandTracker solutionBuilderPersistentDataLoadedCommandTracker, ISolutionBuilderStoryDumper solutionBuilderDumper, IProjectChangingReasonTracker projectChangingReasonTracker);
    private ProjectsGraphState get_State();
    private void set_State(ProjectsGraphState value);
    private BuilderState get_BuilderState();
    private void set_BuilderState(BuilderState value);
    private ProjectsGraph get_ProjectsGraph();
    private void set_ProjectsGraph(ProjectsGraph value);
    public void EmergencyStop(string errorMessage);
    public void ProceedEmergencyStopCommand(EmergencyStopCommand command);
    public void ProceedBeginBuildCommand(BeginProcessCommand command);
    public void ProceedCancelBuildCommand();
    private void CancelRunningProjects(bool forceKillPreviousProcess);
    private void TryRunBuildingNextProjectsLayer();
    private void Finish(bool succeeded, bool forceKillPreviousProcess, string errorMessage, Action afterFinish);
    public void ProcessPersistentDataLoadedCommand(SolutionBuilderPersistentDataLoadedCommand command);
    public void ProceedBuildEventCommand(BuildEventCommand buildEventCommand);
    private void ProceedBuildEventForSingleProject(IProject project, BuildEventForWholeLaunchQueue buildEvent, bool hasErrors, bool hasWarnings);
    public void ResetBuildStateAfterSolutionConfigurationChanged();
    private void SetNewProjectState(IProject project, BuildRunState state);
    private void WriteLine(string message, Object[] args);
    private void MeasureAction(Action action, string comment);
    private IEnumerable`1<IProject> CalculateSkippedProjects(bool succeeded);
    private void Dump(ISolutionDirtyState dirtyState, ProjectsGraphState state);
    private void DumpDirtyStateCleared();
    private static bool ValidateState(IList`1<IProject> allProjectsInSolution, ProjectsGraph projectGraphForCurrentBuildSession, ProjectsGraphState currentProjectsGraphState);
    [CompilerGeneratedAttribute]
private void <ProceedCancelBuildCommand>b__41_0();
    [CompilerGeneratedAttribute]
private void <TryRunBuildingNextProjectsLayer>b__43_3();
    [CompilerGeneratedAttribute]
private void <TryRunBuildingNextProjectsLayer>b__43_4(BuildExecutionResult res);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.SolutionBuilderControllerPrototype : object {
    private Lifetime myLifetime;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private IShellLocks myLocks;
    private UsageStatistics myActivityTracking;
    private SolutionBuilderUsagesCollector myUsagesCollector;
    private ProjectsPersistentKeeper myProjectsPersistentKeeper;
    private ISolution mySolution;
    [CanBeNullAttribute]
private INugetRestorer myNugetRestorer;
    private IBuildUnexpectedEventTracker myBuildUnexpectedEventTracker;
    private IBuildTimeTracker myBuildTimeTracker;
    [NotNullAttribute]
private IAggregatedSolutionBuilderConfigurationReloadTracker myAggregatedSolutionBuilderConfigurationReloadTracker;
    [NotNullAttribute]
private ISolutionBuilderPersistentDataLoadedCommandTracker mySolutionBuilderPersistentDataLoadedCommandTracker;
    [NotNullAttribute]
private IBuildEventPresenter myBuildEventPresenter;
    [CanBeNullAttribute]
private IOutputLogger myOutputLogger;
    private object mySyncObject;
    private SingleThreadExecutor mySingleThreadExecutor;
    private IList`1<ISolutionBuilderCommand> myCommands;
    private IContextBoundSettingsStore mySettingsStore;
    private SolutionBuilderCommandProcessor mySolutionBuilderCommandProcessor;
    [NotNullAttribute]
private SequentialLifetimes myNugetLifetimes;
    private Lifetime myLastNugetLifetime;
    [NotNullAttribute]
private IProperty`1<bool> myIdle;
    [CompilerGeneratedAttribute]
private ISimpleSignal <CurrentProjectsGraphStateChangedSignal>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<BuilderState> <CurrentBuilderState>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<ProjectsGraphState> <GraphState>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<ProjectsGraph> <ProjectsGraph>k__BackingField;
    public ISimpleSignal CurrentProjectsGraphStateChangedSignal { get; }
    [NotNullAttribute]
public IProperty`1<BuilderState> CurrentBuilderState { get; }
    [NotNullAttribute]
public IProperty`1<ProjectsGraphState> GraphState { get; }
    private IProperty`1<bool> JetBrains.ReSharper.Features.SolBuilderDuo.Services.ISolutionBuilderBusyState.Idle { get; }
    public IProperty`1<ProjectsGraph> ProjectsGraph { get; }
    public SolutionBuilderControllerPrototype(Lifetime lifetime, IProjectChangeTracker projectsChangingTracker, IBuildRunner buildRunner, IShellLocks locks, ProjectsGraphBuilder projectsGraphBuilder, IProjectsGraphStateCalculator projectsGraphStateCalculator, IProjectForBuildingChooser projectForBuildingChooser, IBuildSessionContextFactory buildSessionContextFactory, ISolutionBuilderCache solutionBuilderCache, IBuildHeuristicFactory buildHeuristicFactory, UsageStatistics activityTracking, SolutionBuilderUsagesCollector usagesCollector, ProjectsPersistentKeeper projectsPersistentKeeper, IProjectBuildTracker projectBuildTracker, ISolution solution, ISettingsStore settingsStore, INugetRestorerFactory nugetRestorerFactory, GraphRelativeStateMapper graphRelativeStateMapper, IBuildUnexpectedEventTracker buildUnexpectedEventTracker, IBuildTimeTracker buildTimeTracker, IAggregatedSolutionBuilderConfigurationReloadTracker aggregatedSolutionBuilderConfigurationReloadTracker, ISolutionBuilderPersistentDataLoadedCommandTracker solutionBuilderPersistentDataLoadedCommandTracker, IBuildEventPresenter buildEventPresenter, IGraphChecker graphChecker, ISolutionBuilderStoryDumper dumper, IProjectChangingReasonTracker projectChangingReasonTracker, IOutputLogger outputLogger);
    [CompilerGeneratedAttribute]
public ISimpleSignal get_CurrentProjectsGraphStateChangedSignal();
    [CompilerGeneratedAttribute]
public IProperty`1<BuilderState> get_CurrentBuilderState();
    [CompilerGeneratedAttribute]
public IProperty`1<ProjectsGraphState> get_GraphState();
    private sealed virtual override IProperty`1<bool> JetBrains.ReSharper.Features.SolBuilderDuo.Services.ISolutionBuilderBusyState.get_Idle();
    [CompilerGeneratedAttribute]
public IProperty`1<ProjectsGraph> get_ProjectsGraph();
    public void Cancel();
    public void StartProcess(SolutionBuilderRequest request);
    private void StartProcessAfterNugetRestore(SolutionBuilderRequest request);
    private static List`1<IProject> GetProjectsWithDisableFastUpToDateCheck(List`1<IProject> allProjectsAtBuildStart);
    private void HandleBuildEvent(BuildExecutionResult buildExecutionResult);
    private void HandleSolutionBuilderCacheLoadCompleted(SolutionStoringState data);
    private void HandleSolutionConfigurationChanged();
    private void HandleProjectCollectionConfigurationChanged();
    private void AddCommandToQueue(ISolutionBuilderCommand command);
    private void QueueProceedCommands();
    private void ProceedCommands();
    private void ProceedCommand(ISolutionBuilderCommand command);
    private void WriteLine(string message);
    private void WriteLine(string message, object args);
    private static List`1<IProject> GetAllProjectsWithConfigAtBuildStart(List`1<IProject> allProjectsAtBuildStart, ProjectCollectionActiveConfiguration projectCollectionActiveConfiguration, ICollection`1<Guid> neverBuildProjectGuids);
    [CompilerGeneratedAttribute]
private void <.ctor>b__22_0(Lifetime builderStateLifetime, BuilderState builderState);
    [CompilerGeneratedAttribute]
private void <.ctor>b__22_1(int code);
    [CompilerGeneratedAttribute]
private void <.ctor>b__22_2(string message);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.Features.SolBuilderDuo.Services.SolutionBuilderFileAnalyzer : object {
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private IThreading myThreading;
    [NotNullAttribute]
private IProjectConsistentConfigKeeper myProjectConsistentConfigKeeper;
    [NotNullAttribute]
private IDocumentChangeAnalyzer myDocumentChangeAnalyzer;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Idle>k__BackingField;
    public IProperty`1<bool> Idle { get; }
    public SolutionBuilderFileAnalyzer(Lifetime lifetime, ILogger logger, IThreading threading, IProjectConsistentConfigKeeper projectConsistentConfigKeeper, IDocumentChangeAnalyzer documentChangeAnalyzer);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_Idle();
    private void Handle();
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0(Lifetime lt, bool val);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_1(Lifetime lt, bool val);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Features.SolBuilderDuo.Services.SolutionBuilderProjectUtil : object {
    [ExtensionAttribute]
public static bool IsProjectForBuilding(IProject project);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.SolutionBuilderPropertiesRequest : object {
    public static string DisableFastUpToDateCheckProperty;
    private static String[] ourKeys;
    public IEnumerable`1<string> RequestedProperties { get; }
    private static SolutionBuilderPropertiesRequest();
    public sealed virtual IEnumerable`1<string> get_RequestedProperties();
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.SolutionBuilderSettings : object {
    [CompilerGeneratedAttribute]
private int <ParallelProcessesCount>k__BackingField;
    [CompilerGeneratedAttribute]
private RdVerbosityLevel <OutputLoggerVerbosity>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <InternalLogFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LogToOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LogToFile>k__BackingField;
    [CompilerGeneratedAttribute]
private RdVerbosityLevel <FileLoggerVerbosity>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <FileLoggerPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NewLogMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InvokePreAndPostBuildEventTargetsForSkippedProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InvokeBeforeBuildAndAfterBuildTargetsForSkippedProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PassVisualStudioParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <CustomGlobalProperties>k__BackingField;
    public int ParallelProcessesCount { get; }
    public RdVerbosityLevel OutputLoggerVerbosity { get; }
    public FileSystemPath InternalLogFilePath { get; }
    public bool LogToOutput { get; }
    public bool LogToFile { get; }
    public RdVerbosityLevel FileLoggerVerbosity { get; }
    [NotNullAttribute]
public FileSystemPath FileLoggerPath { get; }
    public bool NewLogMode { get; }
    public bool InvokePreAndPostBuildEventTargetsForSkippedProjects { get; }
    public bool InvokeBeforeBuildAndAfterBuildTargetsForSkippedProjects { get; }
    public bool PassVisualStudioParameters { get; }
    [NotNullAttribute]
public IReadOnlyDictionary`2<string, string> CustomGlobalProperties { get; }
    public SolutionBuilderSettings(int parallelProcessesCount, RdVerbosityLevel outputLoggerVerbosity, FileSystemPath internalLogFilePath, bool logToOutput, bool logToFile, RdVerbosityLevel fileLoggerVerbosity, FileSystemPath fileLoggerPath, bool newLogMode, bool invokePreAndPostBuildEventTargetsForSkippedProjects, bool invokeBeforeBuildAndAfterBuildTargetsForSkippedProjects, bool passVisualStudioParameters, IReadOnlyDictionary`2<string, string> customGlobalProperties);
    [CompilerGeneratedAttribute]
public int get_ParallelProcessesCount();
    [CompilerGeneratedAttribute]
public RdVerbosityLevel get_OutputLoggerVerbosity();
    [CompilerGeneratedAttribute]
public FileSystemPath get_InternalLogFilePath();
    [CompilerGeneratedAttribute]
public bool get_LogToOutput();
    [CompilerGeneratedAttribute]
public bool get_LogToFile();
    [CompilerGeneratedAttribute]
public RdVerbosityLevel get_FileLoggerVerbosity();
    [CompilerGeneratedAttribute]
public FileSystemPath get_FileLoggerPath();
    [CompilerGeneratedAttribute]
public bool get_NewLogMode();
    [CompilerGeneratedAttribute]
public bool get_InvokePreAndPostBuildEventTargetsForSkippedProjects();
    [CompilerGeneratedAttribute]
public bool get_InvokeBeforeBuildAndAfterBuildTargetsForSkippedProjects();
    [CompilerGeneratedAttribute]
public bool get_PassVisualStudioParameters();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_CustomGlobalProperties();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.SolutionBuilderSettingsFactory : object {
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private ISettingsStore mySettingsStore;
    [NotNullAttribute]
private ILogFolderProvider myLogFolderProvider;
    private SolutionCaches mySolutionCaches;
    public SolutionBuilderSettingsFactory(ISolution solution, ISettingsStore settingsStore, ILogFolderProvider logFolderProvider, SolutionCaches solutionCaches);
    [NotNullAttribute]
public SolutionBuilderSettings GetSettingsForRequest(SolutionBuilderRequest solutionBuilderRequest, bool useDotNetCoreForLaunch);
    public static string GetBuildLogFileName();
    private static string GetLogFileName(string prefix);
    [NotNullAttribute]
private FileSystemPath GetLoggerPath(IContextBoundSettingsStore contextBoundSettings, Expression`1<Func`2<SolutionBuilderNextSettings, string>> loggerFolderExpression, string fileName);
    private FileSystemPath GetLogFolder(FileSystemPath folderFromSettings);
    private RdVerbosityLevel ToRd(LoggerVerbosityLevel level);
}
internal class JetBrains.ReSharper.Features.SolBuilderDuo.Services.SolutionBuilderStatesPresenter : object {
    public static string GetStateForLogging(Exception ex, BeginProcessCommand lastBeginProcessCommand, ProjectsGraph projectGraph, ProjectsGraphState projectsGraphState, BuilderState value);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.SolutionBuilderUnexpectedBehaviourHandleManager : object {
    private IEnumerable`1<ISolutionBuilderUnexpectedBehaviourHandler> myHandlers;
    public SolutionBuilderUnexpectedBehaviourHandleManager(Lifetime lifetime, IEnumerable`1<ISolutionBuilderUnexpectedBehaviourTracker> trackers, IEnumerable`1<ISolutionBuilderUnexpectedBehaviourHandler> handlers);
    private void HandleUnexpectedBehaviour();
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.Features.SolBuilderDuo.Services.SolutionConfigurationChangeProvider : object {
    private ISolution mySolution;
    private RecursiveProjectModelChangeDeltaVisitor myModelChangeDeltaVisitor;
    [CompilerGeneratedAttribute]
private ISimpleSignal <ConfigurationChanged>k__BackingField;
    public ISimpleSignal ConfigurationChanged { get; }
    public SolutionConfigurationChangeProvider(Lifetime lifetime, ISolution solution, ChangeManager changeManager);
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_ConfigurationChanged();
    public sealed virtual object Execute(IChangeMap changeMap);
    private void Visit(ProjectItemChange itemChange);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.SolBuilderDuo.Services.SolutionConfigurationManager : object {
    [NotNullAttribute]
private GroupingEvent myRescanEvent;
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private ISolutionConfigurationHolder myHolder;
    [NotNullAttribute]
private ISolutionConfigurationAccessibilityChecker myAccessibilityChecker;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <CalculationFinished>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Reloading>k__BackingField;
    public IProperty`1<bool> CalculationFinished { get; }
    public IProperty`1<bool> Reloading { get; }
    public SolutionConfigurationManager(Lifetime lifetime, ILogger logger, IShellLocks locks, ISolutionConfigurationHolder holder, ISolutionFileChangingTracker solutionFileChangingTracker, ISolutionConfigurationAccessibilityChecker accessibilityChecker, IEnumerable`1<ISolutionConfigurationChangeProvider> solutionConfigurationChangeProviders);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_CalculationFinished();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_Reloading();
    private void Recalculate();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Features.SolBuilderDuo.Services.SolutionConfigurationManager/<RecalculateAsync>d__14")]
private Task RecalculateAsync();
    private void HandleProviderConfigurationChanged();
    private void ExecuteAfterRecalculate();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Features.SolBuilderDuo.Services.StringBuilderUtil : object {
    [ExtensionAttribute]
[StringFormatMethodAttribute("text")]
public static void AppendFormatWithIndent(StringBuilder sb, int indent, string text, Object[] args);
}
public abstract class JetBrains.ReSharper.Features.SolBuilderDuo.Services.SurroundBuildEventExecutor : SurroundBuildGoalExecutor {
    protected SurroundBuildEventExecutor(string targetName, ProjectIdFactory projectIdFactory);
    protected virtual bool ShouldExecute(BuildSessionContext buildSessionContext);
}
public abstract class JetBrains.ReSharper.Features.SolBuilderDuo.Services.SurroundBuildGoalExecutor : object {
    [NotNullAttribute]
private string myTargetName;
    [NotNullAttribute]
private ProjectIdFactory myProjectIdFactory;
    public int Priority { get; }
    protected SurroundBuildGoalExecutor(string targetName, ProjectIdFactory projectIdFactory);
    public abstract virtual int get_Priority();
    public sealed virtual void Handle(ICollection`1<IProject> projects, ProjectBuildingState newState, BuildSessionContext buildSessionContext);
    protected abstract virtual bool ShouldExecute(BuildSessionContext buildSessionContext);
    private void ExecuteCustomTargetForProject(BuildSessionContext buildSessionContext, IProject project);
}
public abstract class JetBrains.ReSharper.Features.SolBuilderDuo.Services.SurroundBuildTargetExecutor : SurroundBuildGoalExecutor {
    protected SurroundBuildTargetExecutor(string targetName, ProjectIdFactory projectIdFactory);
    protected virtual bool ShouldExecute(BuildSessionContext buildSessionContext);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.Features.SolBuilderDuo.Services.TriggerSolutionBuildAfterOpen : object {
    private ILogger myLogger;
    private static bool ourNeedToQueueBuild;
    public TriggerSolutionBuildAfterOpen(Lifetime lifetime, ILogger logger, IReSharperBuildSettingsManager reSharperBuildSettingsManager, ISettingsStore settingsStore, ISolution solution, IIncrementalBuildTrigger incrementalBuildTrigger, INotIncrementalBuildTriggerer notIncrementalBuildTriggerer);
    private static TriggerSolutionBuildAfterOpen();
    private bool CheckBuildNeeded(Lifetime lifetime, ISettingsStore settingsStore, ISolution solution);
    private bool CheckBuildRequested(Lifetime lifetime, ISettingsStore settingsStore, ISolution solution);
}
[ZoneDefinitionAttribute]
public class JetBrains.ReSharper.Features.SolBuilderDuo.SolutionBuilderDuoZone : object {
}
public class JetBrains.ReSharper.Features.SolBuilderDuo.Src.SolBuilderDuoThemedIcons : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.SolBuilderDuo.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
