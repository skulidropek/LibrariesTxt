public class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.AspCSharpFileReference : AspFileReferenceBase`2<ICSharpArgument, ICSharpLiteralExpression> {
    public bool CaseSensitive { get; }
    public AspCSharpFileReference(ICSharpArgument owner, ICSharpLiteralExpression token, TreeTextRange withinRange);
    public AspCSharpFileReference(ICSharpArgument owner, IQualifier quilifier, ICSharpLiteralExpression token, TreeTextRange withinRange);
    public virtual bool get_CaseSensitive();
    protected virtual string GetElementText();
    public virtual TreeTextRange GetTreeTextRange();
    public IPsiSourceFile GetResourceFile();
    public virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    protected virtual IReference SetNewValue(string newName, string tokenText);
}
public class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.AspCSharpFolderReference : AspFolderReferenceBase`2<ICSharpArgument, ICSharpLiteralExpression> {
    public AspCSharpFolderReference(ICSharpArgument owner, ICSharpLiteralExpression token, TreeTextRange withinRange);
    public AspCSharpFolderReference(ICSharpArgument owner, IQualifier quilifier, ICSharpLiteralExpression token, TreeTextRange withinRange);
    public virtual ITypeElement GetQualifierTypeElement();
    protected virtual string GetElementText();
    public virtual TreeTextRange GetTreeTextRange();
    protected virtual IReference SetNewValue(string newName, string tokenText);
}
public class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.AspCSharpResourceReference : CSharpResourceReference {
    public AspCSharpResourceReference(TreeTextRange withinRange, ICSharpArgument owner, ICSharpExpression token);
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
}
internal class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.AspGeneratedCodeResourceReferenceProvider : ResourceManagerReferenceProvider {
    protected virtual ReferenceCollection CreateArgumentReferences(ICSharpArgument argument, ICSharpExpression argumentValue, IInvocationInfo invocation, ParameterCandidateCheckResult parameterCandidateCheckResult);
}
internal class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.AspGlobalResourceReferenceProvider : StringArgumentReferenceFactoryBase`2<ICSharpArgument, ICSharpExpression> {
    [LocalizableAttribute("False")]
private static String[] ourTypes;
    [LocalizableAttribute("False")]
private static String[] ourParameters;
    private static AspGlobalResourceReferenceProvider();
    protected virtual ReferenceCollection CreateArgumentReferences(ICSharpArgument argument, ICSharpExpression argumentValue, IInvocationInfo invocation, ParameterCandidateCheckResult parameterCandidateCheckResult);
    protected virtual bool OnTypeCandidate(string typeName);
    protected virtual bool OnMethodCandidate(string methodName);
    protected virtual ParameterCandidateCheckResult OnParameterCandidate(IInvocationInfo invocationInfo, ICSharpArgument argument);
}
internal class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.AspLocalResourceReferenceProvider4HttpContext : StringArgumentReferenceFactoryBase`2<ICSharpArgument, ICSharpLiteralExpression> {
    [LocalizableAttribute("False")]
private static String[] ourTypes;
    [LocalizableAttribute("False")]
private static String[] ourParameters;
    private static AspLocalResourceReferenceProvider4HttpContext();
    protected virtual ReferenceCollection CreateArgumentReferences(ICSharpArgument argument, ICSharpLiteralExpression argumentValue, IInvocationInfo invocation, ParameterCandidateCheckResult parameterCandidateCheckResult);
    protected virtual bool OnTypeCandidate(string typeName);
    protected virtual bool OnMethodCandidate(string methodName);
    protected virtual ParameterCandidateCheckResult OnParameterCandidate(IInvocationInfo invocationInfo, ICSharpArgument argument);
}
internal class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.AspLocalResourceReferenceProvider4TemplateControl : StringArgumentReferenceFactoryBase`2<ICSharpArgument, ICSharpLiteralExpression> {
    private static string Type;
    [LocalizableAttribute("False")]
private static String[] ourParameters;
    private static AspLocalResourceReferenceProvider4TemplateControl();
    protected virtual ReferenceCollection CreateArgumentReferences(ICSharpArgument argument, ICSharpLiteralExpression argumentValue, IInvocationInfo invocation, ParameterCandidateCheckResult parameterCandidateCheckResult);
    protected virtual bool OnTypeCandidate(string typeName);
    protected virtual bool OnMethodCandidate(string methodName);
    protected virtual ParameterCandidateCheckResult OnParameterCandidate(IInvocationInfo invocationInfo, ICSharpArgument argument);
}
public class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.CSharpGlobalResourceItemReference : GlobalResourceItemReference`2<ICSharpArgument, ICSharpExpression> {
    public CSharpGlobalResourceItemReference(ICSharpArgument owner, ICSharpExpression token, TreeTextRange withinRange);
    public virtual TreeTextRange GetTreeTextRange();
    protected virtual string GetElementText();
    public virtual IQualifier GetQualifier();
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
}
public class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.CSharpGlobalResourceReference : GlobalResourceReference`2<ICSharpArgument, ICSharpExpression> {
    public bool CaseSensitive { get; }
    public CSharpGlobalResourceReference(ICSharpArgument owner, ICSharpExpression token, TreeTextRange withinRange);
    public virtual bool get_CaseSensitive();
    protected virtual string GetElementText();
    public virtual TreeTextRange GetTreeTextRange();
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
}
public class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.CSharpLocalResourceReference : LocalResourceReference`2<ICSharpArgument, ICSharpExpression> {
    public CSharpLocalResourceReference(ICSharpArgument owner, ICSharpExpression token, TreeTextRange withinRange);
    public CSharpLocalResourceReference(ICSharpArgument owner, IQualifier quilifier, ICSharpExpression token, TreeTextRange withinRange);
    protected virtual string GetElementText();
    public virtual TreeTextRange GetTreeTextRange();
    public virtual Staticness GetStaticness();
    public virtual ITypeElement GetQualifierTypeElement();
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
}
public class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.CSharpLocalResourceReference4HttpContext : CSharpLocalResourceReference {
    public CSharpLocalResourceReference4HttpContext(ICSharpArgument owner, ICSharpExpression token, TreeTextRange withinRange);
    public CSharpLocalResourceReference4HttpContext(ICSharpArgument owner, IQualifier quilifier, ICSharpExpression token, TreeTextRange withinRange);
    public virtual IQualifier GetQualifier();
    protected virtual IProjectFile GetAspFile();
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
}
public class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.CSharpPropertyReference : PropertyReference`2<ICSharpArgument, ICSharpExpression> {
    private int myArgumentObjTypeIndex;
    public CSharpPropertyReference(ICSharpArgument owner, ICSharpExpression token, TreeTextRange withinRange, int argumentObjTypeIndex);
    protected virtual IArgument FindArgument(ITreeNode element, string name);
}
internal class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.Mvc.AspMvcGlobalResourceReferenceProvider : AspGlobalResourceReferenceProvider {
    [LocalizableAttribute("False")]
private static String[] ourTypes;
    private static AspMvcGlobalResourceReferenceProvider();
    protected virtual ReferenceCollection CreateArgumentReferences(ICSharpArgument argument, ICSharpExpression argumentValue, IInvocationInfo invocation, ParameterCandidateCheckResult parameterCandidateCheckResult);
    protected virtual bool OnTypeCandidate(string typeName);
}
internal class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.Mvc.AspMvcLocalResourceReferenceProvider4HttpContext : AspLocalResourceReferenceProvider4HttpContext {
    [LocalizableAttribute("False")]
private static String[] ourTypes;
    private static AspMvcLocalResourceReferenceProvider4HttpContext();
    protected virtual ReferenceCollection CreateArgumentReferences(ICSharpArgument argument, ICSharpLiteralExpression argumentValue, IInvocationInfo invocation, ParameterCandidateCheckResult parameterCandidateCheckResult);
    protected virtual bool OnTypeCandidate(string typeName);
}
public class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.Mvc.CSharpMvcGlobalResourceItemReference : CSharpGlobalResourceItemReference {
    public CSharpMvcGlobalResourceItemReference(ICSharpArgument owner, ICSharpExpression token, TreeTextRange withinRange);
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
    [NotNullAttribute]
private static VirtualFileSystemPath FindPageFile(VirtualFileSystemPath resourceFile);
}
public class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.Mvc.CSharpMvcLocalResourceReference4HttpContext : CSharpLocalResourceReference4HttpContext {
    public CSharpMvcLocalResourceReference4HttpContext(ICSharpArgument owner, ICSharpExpression token, TreeTextRange withinRange);
    public CSharpMvcLocalResourceReference4HttpContext(ICSharpArgument owner, IQualifier quilifier, ICSharpExpression token, TreeTextRange withinRange);
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
    [NotNullAttribute]
private static VirtualFileSystemPath FindPageFile(VirtualFileSystemPath resourceFile);
}
[ReferenceProviderFactoryAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.Mvc.MvcResourceReferenceProviderFactory : MvcResourceReferenceProviderFactoryBase {
    public MvcResourceReferenceProviderFactory(Lifetime lifetime, IShellLocks shellLocks, MvcReferencedAssembliesService mvcReferencedAssembliesService);
    public virtual IReferenceFactory CreateFactory(IPsiSourceFile sourceFile, IFile file, IWordIndex wordIndexForChecks);
}
internal abstract class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.Mvc.MvcResourceReferenceProviderFactoryBase : object {
    [NotNullAttribute]
private IShellLocks myShellLocks;
    [NotNullAttribute]
private MvcReferencedAssembliesService myMvcReferencedAssembliesService;
    [CompilerGeneratedAttribute]
private ISignal`1<IReferenceProviderFactory> <Changed>k__BackingField;
    public ISignal`1<IReferenceProviderFactory> Changed { get; }
    protected MvcResourceReferenceProviderFactoryBase(Lifetime lifetime, IShellLocks shellLocks, MvcReferencedAssembliesService mvcReferencedAssembliesService);
    public abstract virtual IReferenceFactory CreateFactory(IPsiSourceFile sourceFile, IFile file, IWordIndex wordIndexForChecks);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IReferenceProviderFactory> get_Changed();
    protected bool CheckFileIsApplicable(IPsiSourceFile sourceFile, IFile file);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.Mvc.ZoneMarker : object {
}
public class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.NetCore.AspNetCoreCSharpCodeResourceReferenceBackendGenericProvider : AspNetCoreCSharpCodeResourceReferenceProviderBase {
    [NotNullAttribute]
private ISet`1<string> myApplicableGenericCallerTypes;
    protected virtual ParameterCandidateCheckResult CheckElementAccessExpression(IElementAccessExpression elementAccessExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.NetCore.AspNetCoreCSharpCodeResourceReferenceProviderBase : StringArgumentReferenceFactoryBase`2<ICSharpArgument, ICSharpExpression> {
    private HashSet`1<IClrTypeName> myApplicableReturnTypes;
    private HashSet`1<string> myApplicableCallerTypes;
    protected virtual bool OnMethodCandidate(string methodName);
    public virtual bool HasReference(ICSharpArgument argument, IReferenceNameContainer names);
    protected virtual ParameterCandidateCheckResult OnParameterCandidate(IInvocationInfo invocationInfo, ICSharpArgument argument);
    protected abstract virtual ParameterCandidateCheckResult CheckElementAccessExpression(IElementAccessExpression elementAccessExpression);
    protected virtual bool OnTypeCandidate(string typeName);
    protected virtual ReferenceCollection CreateArgumentReferences(ICSharpArgument argument, ICSharpExpression argumentValue, IInvocationInfo invocation, ParameterCandidateCheckResult parameterCandidateCheckResult);
}
public class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.NetCore.AspNetCoreCSharpCodeResourceReferenceViewProvider : AspNetCoreCSharpCodeResourceReferenceProviderBase {
    private static string ApplicableNonGenericCallerType;
    protected virtual ParameterCandidateCheckResult CheckElementAccessExpression(IElementAccessExpression elementAccessExpression);
    [NotNullAttribute]
private static List`1<string> GetNameParts(string classShortName);
}
public class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.NetCore.AspNetCoreCSharpResourceReference`1 : ReferenceWithTokenBase`2<T, ICSharpExpression> {
    [NotNullAttribute]
private IEnumerable`1<string> myClassFullNameParts;
    [NotNullAttribute]
private string myClassShortName;
    [NotNullAttribute]
private string myShortName;
    public AspNetCoreCSharpResourceReference`1(string shortName, TreeTextRange withinRange, T owner, ICSharpExpression token, IEnumerable`1<string> classFullNameParts, string classShortName);
    public virtual string GetName();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
}
public class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.NetCore.AspNetCoreCSharpResourceVirtualDeclaredElement : AspNetCoreCSharpResourceVirtualDeclaredElementBase {
    [NotNullAttribute]
private IPsiModule myPsiModule;
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ClassFullNameParts>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClassFullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClassShortName>k__BackingField;
    public string ShortName { get; }
    protected IProject Project { get; }
    protected IEnumerable`1<string> ClassFullNameParts { get; }
    protected string ClassFullName { get; }
    protected string ClassShortName { get; }
    public AspNetCoreCSharpResourceVirtualDeclaredElement(string shortName, IProject project, IEnumerable`1<string> classFullNameParts, string classShortName, IPsiModule psiModule, ISolutionResourceCache cache);
    [CompilerGeneratedAttribute]
public virtual string get_ShortName();
    [CompilerGeneratedAttribute]
protected virtual IProject get_Project();
    [CompilerGeneratedAttribute]
protected virtual IEnumerable`1<string> get_ClassFullNameParts();
    [CompilerGeneratedAttribute]
protected virtual string get_ClassFullName();
    [CompilerGeneratedAttribute]
protected virtual string get_ClassShortName();
    public virtual bool IsValid();
    protected virtual IPsiModule GetPsiModule();
    public virtual IPsiServices GetPsiServices();
}
public abstract class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.NetCore.AspNetCoreCSharpResourceVirtualDeclaredElementBase : object {
    private ISolutionResourceCache myCache;
    [CompilerGeneratedAttribute]
private bool <CaseSensitiveName>k__BackingField;
    [NotNullAttribute]
protected IProject Project { get; }
    [NotNullAttribute]
protected IEnumerable`1<string> ClassFullNameParts { get; }
    [NotNullAttribute]
protected string ClassFullName { get; }
    [NotNullAttribute]
protected string ClassShortName { get; }
    public string ShortName { get; }
    private IPsiModule JetBrains.ReSharper.Psi.Resx.Tree.IResxVirtualDeclaredElement.PsiModule { get; }
    public bool CaseSensitiveName { get; }
    public PsiLanguageType PresentationLanguage { get; }
    private IPsiModule JetBrains.ReSharper.Psi.IClrDeclaredElement.Module { get; }
    private ISubstitution JetBrains.ReSharper.Psi.IClrDeclaredElement.IdSubstitution { get; }
    protected AspNetCoreCSharpResourceVirtualDeclaredElementBase(ISolutionResourceCache cache);
    protected abstract virtual IProject get_Project();
    protected abstract virtual IEnumerable`1<string> get_ClassFullNameParts();
    protected abstract virtual string get_ClassFullName();
    protected abstract virtual string get_ClassShortName();
    public abstract virtual string get_ShortName();
    public abstract virtual IPsiServices GetPsiServices();
    public abstract virtual bool IsValid();
    [NotNullAttribute]
protected abstract virtual IPsiModule GetPsiModule();
    private sealed virtual override IPsiModule JetBrains.ReSharper.Psi.Resx.Tree.IResxVirtualDeclaredElement.get_PsiModule();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CaseSensitiveName();
    public sealed virtual IList`1<IDeclaration> GetDeclarations();
    public sealed virtual IList`1<IDeclaration> GetDeclarationsIn(IPsiSourceFile sourceFile);
    [NotNullAttribute]
private IList`1<IDeclaration> GetDeclarationsIn(IPsiSourceFile sourceFile, ISolutionResourceCache cache);
    public sealed virtual DeclaredElementType GetElementType();
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
    public sealed virtual XmlNode GetXMLDescriptionSummary(bool inherit);
    public sealed virtual bool IsSynthetic();
    public sealed virtual PsiLanguageType get_PresentationLanguage();
    public sealed virtual HybridCollection`1<IPsiSourceFile> GetSourceFiles();
    public sealed virtual bool HasDeclarationsIn(IPsiSourceFile sourceFile);
    private sealed virtual override bool JetBrains.ReSharper.Psi.Resx.Tree.IResxVirtualDeclaredElement.CanRelateWith(IPsiSourceFile resourceFile);
    [NotNullAttribute]
private ICollection`1<IPsiSourceFile> FindResourceFiles();
    protected bool Equals(AspNetCoreCSharpResourceVirtualDeclaredElementBase other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override IPsiModule JetBrains.ReSharper.Psi.IClrDeclaredElement.get_Module();
    private sealed virtual override ISubstitution JetBrains.ReSharper.Psi.IClrDeclaredElement.get_IdSubstitution();
    private sealed virtual override ITypeElement JetBrains.ReSharper.Psi.IClrDeclaredElement.GetContainingType();
    private sealed virtual override ITypeMember JetBrains.ReSharper.Psi.IClrDeclaredElement.GetContainingTypeMember();
}
[PsiComponentAttribute("0")]
internal class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.NetCore.AspNetCoreCSharpResourceVirtualDeclaredElementDomainSpecificSearcherFactory : DomainSpecificSearcherFactoryBase {
    [NotNullAttribute]
private SearchDomainFactory mySearchDomainFactory;
    private ISolutionResourceCache mySolutionResourceCache;
    [NotNullAttribute]
private AspNetCoreResourceFileDataExtractor myExtractor;
    public AspNetCoreCSharpResourceVirtualDeclaredElementDomainSpecificSearcherFactory(SearchDomainFactory searchDomainFactory, ISolutionResourceCache solutionResourceCache);
    public virtual bool IsCompatibleWithLanguage(PsiLanguageType languageType);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.NetCore.AspNetCoreCSharpResourceVirtualDeclaredElementDomainSpecificSearcherFactory/<GetAllPossibleWordsInFile>d__5")]
public virtual IEnumerable`1<string> GetAllPossibleWordsInFile(IDeclaredElement element);
    public virtual ISearchDomain GetDeclaredElementSearchDomain(IDeclaredElement declaredElement);
    public virtual IEnumerable`1<RelatedDeclaredElement> GetRelatedDeclaredElements(IDeclaredElement element);
    [CanBeNullAttribute]
private AspNetCoreResourceFileInfo TryGetClassInfo(IPsiSourceFile resourceFile, string projectName);
}
public class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.NetCore.AspNetCoreResourceFileDataExtractor : object {
    public static string ResourceDirName;
    [NotNullAttribute]
private Regex myLangPattern;
    [CanBeNullAttribute]
public AspNetCoreResourceFileInfo TryParse(string projectName, VirtualFileSystemPath projectLocation, VirtualFileSystemPath fileLocation);
    [CanBeNullAttribute]
public AspNetCoreResourceFileInfo TryParse(IPsiSourceFile resourceFile);
}
public class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.NetCore.AspNetCoreResourceFileInfo : object {
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ClassFullNameParts>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClassShortName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Lang>k__BackingField;
    [NotNullAttribute]
public string ProjectName { get; }
    [NotNullAttribute]
public IEnumerable`1<string> ClassFullNameParts { get; }
    [NotNullAttribute]
public string ClassShortName { get; }
    [CanBeNullAttribute]
public string Lang { get; }
    public AspNetCoreResourceFileInfo(string projectName, IEnumerable`1<string> classFullNameParts, string classShortName, string lang);
    [CompilerGeneratedAttribute]
public string get_ProjectName();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ClassFullNameParts();
    [CompilerGeneratedAttribute]
public string get_ClassShortName();
    [CompilerGeneratedAttribute]
public string get_Lang();
    public virtual string ToString();
    protected bool Equals(AspNetCoreResourceFileInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ReferenceProviderFactoryAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.NetCore.AspNetCoreResourceFromAttributesReferenceProviderFactory : MvcResourceReferenceProviderFactoryBase {
    public AspNetCoreResourceFromAttributesReferenceProviderFactory(Lifetime lifetime, IShellLocks shellLocks, MvcReferencedAssembliesService mvcReferencedAssembliesService);
    public virtual IReferenceFactory CreateFactory(IPsiSourceFile sourceFile, IFile file, IWordIndex wordIndexForChecks);
}
public class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.NetCore.AspNetCoreViewModelsAttributesResourceReferenceFactory : ResxAttributePropertyNameReferenceFactory {
    [NotNullAttribute]
private ISet`1<string> myApplicableAttributeTypes;
    [NotNullAttribute]
private ISet`1<string> myApplicablePropertyNames;
    private static string NamespaceMarker;
    public virtual bool HasReference(ITreeNode element, IReferenceNameContainer names);
    protected virtual bool CheckPropertyNameIsApplicable(string name);
    protected virtual bool CanUseOldReferences(ITreeNode element, ReferenceCollection oldReferences);
    protected virtual bool CheckExpressionIsApplicable(ICSharpExpression expression);
    protected virtual ReferenceCollection CreateReferenceCollection(IProperty property, IPropertyAssignment propertyAssignment, ICSharpExpression expression);
}
public class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.NetCore.AspNetCoreVirtualParameterCandidateCheckResult : ParameterCandidateCheckResult {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ClassFullNameParts>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClassShortName>k__BackingField;
    [NotNullAttribute]
public IEnumerable`1<string> ClassFullNameParts { get; }
    [NotNullAttribute]
public string ClassShortName { get; }
    public AspNetCoreVirtualParameterCandidateCheckResult(IEnumerable`1<string> classFullNameParts, string classShortName);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ClassFullNameParts();
    [CompilerGeneratedAttribute]
public string get_ClassShortName();
}
internal class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.NetCore.NetCoreResxReferenceFactoryUtil : object {
    public static List`1<string> GetMeaningfulParts(IEnumerable`1<string> namespaceNames, string namespaceMarker, string shortName);
}
public class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.NetCore.VirtualResourceItem : ResourceItemBase {
    public VirtualResourceItem(IPsiSourceFile psiSourceFile, string name, int offset, int formatArgs);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.NetCore.ZoneMarker : object {
}
[ReferenceProviderFactoryAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.ResourceReferenceProviderFactory : object {
    private IShellLocks myShellLocks;
    [CompilerGeneratedAttribute]
private ISignal`1<IReferenceProviderFactory> <Changed>k__BackingField;
    public ISignal`1<IReferenceProviderFactory> Changed { get; }
    public ResourceReferenceProviderFactory(IShellLocks shellLocks);
    public sealed virtual IReferenceFactory CreateFactory(IPsiSourceFile sourceFile, IFile file, IWordIndex wordIndexForChecks);
    protected virtual bool IsSuppressed(IPsiSourceFile sourceFile, IProject project);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IReferenceProviderFactory> get_Changed();
}
[ReferenceProviderFactoryAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.I18n.Services.Asp.CSharp.CustomReferences.ResourceReferenceProviderFactoryEvadesMvc : ResourceReferenceProviderFactory {
    protected MvcReferencedAssembliesService myMvcReferencedAssembliesService;
    [CompilerGeneratedAttribute]
private MvcKind <SupportedMvcKinds>k__BackingField;
    public MvcKind SupportedMvcKinds { get; }
    public PsiLanguageCategories SupportedPsiLanguageCategories { get; }
    public PsiLanguageType SupportedPsiLanguage { get; }
    public ResourceReferenceProviderFactoryEvadesMvc(IShellLocks shellLocks, MvcReferencedAssembliesService mvcReferencedAssembliesService);
    protected virtual bool IsSuppressed(IPsiSourceFile sourceFile, IProject project);
    [CompilerGeneratedAttribute]
public sealed virtual MvcKind get_SupportedMvcKinds();
    public sealed virtual PsiLanguageCategories get_SupportedPsiLanguageCategories();
    public sealed virtual PsiLanguageType get_SupportedPsiLanguage();
}
[GeneratedDocumentServiceAttribute("JetBrains.ProjectModel.ResxProjectFileType", "16")]
public class JetBrains.ReSharper.I18n.Services.Asp.CSharp.Generation.ResxCSharpCodeWrapperGeneratedDocumentService : ResxCodeWrapperGeneratedDocumentService {
    public PsiLanguageType GeneratedLanguage { get; }
    public virtual PsiLanguageType get_GeneratedLanguage();
    protected virtual CodeDomProvider GetCodeDomProvider();
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.Asp.CSharp.Navigation.ResourcesDeclaredElementOccurrencePresenter : DeclaredElementOccurrencePresenter {
    public virtual bool IsApplicable(IOccurrence occurrence);
    protected virtual void DisplayLocationAndGlyph(IMenuItemDescriptor descriptor, OccurrencePresentationOptions options, IDeclaredElement element, DeclaredElementOccurrence declaredElementOccurrence, bool specifyVersion, Nullable`1<DocumentCoords> coords);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.Asp.CSharp.Refactoring.ExpressionToGlobalWebSiteResourceExtractor : ExpressionToResourceExtractor {
    public byte Priority { get; }
    public ExpressionToGlobalWebSiteResourceExtractor(ResourceAccessorFinder resourceAccessorFinder, ExpressionToGlobalWebSiteResourceChecker expressionToGlobalWebSiteResourceChecker);
    public virtual byte get_Priority();
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.Asp.CSharp.Refactoring.ExpressionToLocalResourceExtractor : ExpressionToResourceExtractor {
    public byte Priority { get; }
    public ExpressionToLocalResourceExtractor(ResourceAccessorFinder resourceAccessorFinder, ExpressionToLocalResourceChecker expressionToLocalResourceChecker);
    public virtual byte get_Priority();
    public virtual bool CanExtractTo(ISourceElement sourceElement, IPsiSourceFile resourceFile);
    public virtual bool Extract(ISourceElement sourceElement, IResourceItem resourceItem, IRefactoringDriver driver);
}
[SolutionComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.I18n.Services.Asp.CSharp.Refactoring.ExpressionToMvcGlobalResourceExtractor : ExpressionToResourceExtractor {
    private MvcReferencedAssembliesService myMvcReferencedAssembliesService;
    public byte Priority { get; }
    public ExpressionToMvcGlobalResourceExtractor(ResourceAccessorFinder resourceAccessorFinder, MvcReferencedAssembliesService mvcReferencedAssembliesService, ExpressionToMvcGlobalResourceChecker expressionToMvcGlobalResourceChecker);
    public virtual byte get_Priority();
    public virtual bool CanExtractTo(ISourceElement sourceElement, IPsiSourceFile resourceFile);
    public virtual bool Extract(ISourceElement sourceElement, IResourceItem resourceItem, IRefactoringDriver driver);
}
[SolutionComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.I18n.Services.Asp.CSharp.Refactoring.ExpressionToMvcLocalResourceExtractor : ExpressionToResourceExtractor {
    private MvcReferencedAssembliesService myMvcReferencedAssembliesService;
    public byte Priority { get; }
    public ExpressionToMvcLocalResourceExtractor(ResourceAccessorFinder resourceAccessorFinder, MvcReferencedAssembliesService mvcReferencedAssembliesService, ExpressionToMvcLocalResourceChecker expressionToMvcLocalResourceChecker);
    public virtual byte get_Priority();
    public virtual bool CanExtractTo(ISourceElement sourceElement, IPsiSourceFile resourceFile);
    public virtual bool Extract(ISourceElement sourceElement, IResourceItem resourceItem, IRefactoringDriver driver);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.Asp.CSharp.Refactoring.NetCore.AspNetCSharpResourceInliner : ResourceToExpressionInlinerBase`1<ICSharpExpression> {
    private bool myShouldCheckCanInline;
    public byte Priority { get; }
    protected PsiLanguageType PsiLanguageType { get; }
    public virtual byte get_Priority();
    protected virtual PsiLanguageType get_PsiLanguageType();
    protected virtual ICSharpExpression CreateExpression(ConstantValue value, IPsiModule module);
    public virtual bool CanInline(IReference reference, IResourceItemDeclaredElement element);
    public virtual bool CanInline(ITreeNode sourceElement, IResourceItemDeclaredElement element);
    public virtual bool Inline(IReference reference, IResourceItemDeclaredElement element);
    protected virtual ITreeNode GetElementToInline(IReference reference);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.Asp.CSharp.Refactoring.NetCore.ExpressionToNetCoreResourceExtractor : ExpressionToResourceExtractor {
    public byte Priority { get; }
    public ExpressionToNetCoreResourceExtractor(ResourceAccessorFinder resourceAccessorFinder, NetCoreResourceChecker resourceChecker);
    public virtual byte get_Priority();
    public virtual bool CanExtractTo(ISourceElement sourceElement, IPsiSourceFile resourceFile);
    public sealed virtual bool CanExtractToAfterRefactoring(ISourceElement sourceElement, IPsiSourceFile resourceFile);
    public virtual string GetDefaultResourceName(ISourceElement sourceElement);
    public virtual bool Extract(ISourceElement sourceElement, IResourceItem resourceItem, IRefactoringDriver driver);
    private static bool CanExtractToInternal(ISourceElement sourceElement, IPsiSourceFile resourceFile, bool checkAlreadyExist);
    [CanBeNullAttribute]
private static IResxVirtualDeclaredElement TryGetVirtualDeclaredElement(ISourceElement sourceElement);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.Asp.CSharp.Refactoring.NetCore.NetCoreResourceChecker : object {
    public sealed virtual bool CanUseResource(IPsiSourceFile resourceFile, IAccessContext context);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.I18n.Services.Asp.CSharp.Refactoring.ZoneMarker : object {
}
[ResourceAccessorsFinderAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.Asp.CSharp.Searching.CSharpWebSiteGlobalResourceAccessorFinder : WebSiteGlobalResourceAccessorFinder {
    public CSharpWebSiteGlobalResourceAccessorFinder(GeneratedFileFinder generatedFileFinder);
    protected virtual WebSiteGlobalResourceAccessor CreateGlobalResourceAccessor(IProperty property);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.Asp.CSharp.Services.ExpressionToGlobalWebSiteResourceChecker : object {
    public sealed virtual bool CanUseResource(IPsiSourceFile resourceFile, IAccessContext context);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.Asp.CSharp.Services.ExpressionToLocalResourceChecker : object {
    public sealed virtual bool CanUseResource(IPsiSourceFile resourceFile, IAccessContext context);
}
[SolutionComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.I18n.Services.Asp.CSharp.Services.ExpressionToMvcGlobalResourceChecker : object {
    public sealed virtual bool CanUseResource(IPsiSourceFile resourceFile, IAccessContext context);
}
[SolutionComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.I18n.Services.Asp.CSharp.Services.ExpressionToMvcLocalResourceChecker : object {
    public sealed virtual bool CanUseResource(IPsiSourceFile resourceFile, IAccessContext context);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.I18n.Services.Asp.CSharp.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
