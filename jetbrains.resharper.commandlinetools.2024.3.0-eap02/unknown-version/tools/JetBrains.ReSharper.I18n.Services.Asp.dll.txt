[ContextActionAttribute]
public class JetBrains.ReSharper.I18n.Services.Asp.ContextActions.MoveHtmlToResourceAction : ContextActionBase {
    private static string OurResources;
    private IWebContextActionDataProvider`1<IAspFile> myDataProvider;
    public string Text { get; }
    public MoveHtmlToResourceAction(IWebContextActionDataProvider`1<IAspFile> dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private bool IsStaticHtml();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual void Execute(ISolution solution, ITextControl textControl);
    private static bool IsValidResource(IPsiSourceFile aspxFile, IPsiSourceFile resourceFile);
    private static string GetResourceKind(VirtualFileSystemPath path);
    private void Handler(VirtualFileSystemPath path, ITextControl textControl);
    private static void CreateResourceItem(IProjectFile resourceFile, IPsiServices psiServices, string name, string value);
    [CanBeNullAttribute]
private IProjectFile GetResourceFile(VirtualFileSystemPath path);
    private static bool CreateResourceFile(VirtualFileSystemPath filePath);
    private static bool CanUseFrom(IPsiSourceFile aspxFile, IPsiSourceFile resourceFile);
}
public abstract class JetBrains.ReSharper.I18n.Services.Asp.CustomReferences.AspFileReferenceBase`2 : QualifiableReferenceWithTokenBase`2<TOwner, TToken> {
    public bool Resolved { get; }
    public ProjectFileType ExpectedFileType { get; }
    public BuildAction ExpectedBuildAction { get; }
    public ICollection`1<string> ExpectedExtensions { get; }
    public bool ShouldResolveInGlobalTable { get; }
    protected AspFileReferenceBase`2(TOwner owner, TToken token, TreeTextRange withinRange);
    protected AspFileReferenceBase`2(TOwner owner, IQualifier quilifier, TToken token, TreeTextRange withinRange);
    public sealed virtual bool get_Resolved();
    public virtual ProjectFileType get_ExpectedFileType();
    public virtual BuildAction get_ExpectedBuildAction();
    public virtual ICollection`1<string> get_ExpectedExtensions();
    public sealed virtual QualifierKind GetKind();
    public virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public virtual ITypeElement GetQualifierTypeElement();
    public virtual Staticness GetStaticness();
    protected virtual ISymbolFilter[] GetSmartSymbolFilters();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    public virtual ISymbolFilter[] GetSymbolFilters();
    protected virtual ISymbolFilter[] GetCompletionFilters();
    public sealed virtual VirtualFileSystemPath GetBasePath();
    public sealed virtual ISymbolFilter[] GetPathFilters();
    protected virtual IReference BindToInternal(IDeclaredElement declaredElement, ISubstitution substitution);
    protected abstract virtual IReference SetNewValue(string newName, string tokenText);
    public virtual bool get_ShouldResolveInGlobalTable();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool <GetCompletionFilters>b__18_0(ISymbolInfo info);
}
public abstract class JetBrains.ReSharper.I18n.Services.Asp.CustomReferences.AspFolderReferenceBase`2 : QualifiableReferenceWithTokenBase`2<TOwner, TToken> {
    public bool CaseSensitive { get; }
    public bool Resolved { get; }
    protected AspFolderReferenceBase`2(TOwner owner, TToken token, TreeTextRange withinRange);
    protected AspFolderReferenceBase`2(TOwner owner, IQualifier quilifier, TToken token, TreeTextRange withinRange);
    public virtual bool get_CaseSensitive();
    public sealed virtual bool get_Resolved();
    public virtual Staticness GetStaticness();
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public sealed virtual QualifierKind GetKind();
    protected virtual ISymbolFilter[] GetSmartSymbolFilters();
    public virtual ITypeElement GetQualifierTypeElement();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    public virtual ISymbolFilter[] GetSymbolFilters();
    protected virtual ISymbolFilter[] GetCompletionFilters();
    public sealed virtual VirtualFileSystemPath GetBasePath();
    public sealed virtual ISymbolFilter[] GetPathFilters();
    protected virtual IReference BindToInternal(IDeclaredElement declaredElement, ISubstitution substitution);
    protected abstract virtual IReference SetNewValue(string newName, string tokenText);
}
public abstract class JetBrains.ReSharper.I18n.Services.Asp.CustomReferences.GlobalResourceItemReference`2 : QualifiableReferenceWithTokenBase`2<TOwner, TToken> {
    public bool CaseSensitive { get; }
    protected GlobalResourceItemReference`2(TOwner owner, TToken token, TreeTextRange withinRange);
    protected GlobalResourceItemReference`2(TOwner owner, IQualifier quilifier, TToken token, TreeTextRange withinRange);
    public sealed virtual bool get_CaseSensitive();
    public virtual Staticness GetStaticness();
    public virtual ITypeElement GetQualifierTypeElement();
    public sealed virtual ICollection`1<IPsiSourceFile> FindResourceFiles();
    public sealed virtual string GetDefaultName();
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
}
public abstract class JetBrains.ReSharper.I18n.Services.Asp.CustomReferences.GlobalResourceReference`2 : ReferenceWithTokenBase`2<TOwner, TToken> {
    public static Func`2<IProject, ICollection`1<IPathDeclaredElement>> GetResourceFilesFromGlobalResourcesFolder;
    public bool Resolved { get; }
    public bool CaseSensitive { get; }
    protected GlobalResourceReference`2(TOwner owner, TToken token, TreeTextRange withinRange);
    private static GlobalResourceReference`2();
    public sealed virtual bool get_Resolved();
    public virtual bool get_CaseSensitive();
    public virtual Staticness GetStaticness();
    public virtual ITypeElement GetQualifierTypeElement();
    protected virtual IReference BindToInternal(IDeclaredElement declaredElement, ISubstitution substitution);
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public static ISymbolTable GetGlobalResourcesSysmbolTable(IReference reference, Func`2<IProject, ICollection`1<IPathDeclaredElement>> getGlobalResourceFiles);
    public sealed virtual ICollection`1<IPsiSourceFile> FindResourceFiles();
    public virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public sealed virtual QualifierKind GetKind();
    public virtual ResolveResultWithInfo ResolveWithoutCache();
}
public interface JetBrains.ReSharper.I18n.Services.Asp.CustomReferences.IGlobalResourceReference {
}
public interface JetBrains.ReSharper.I18n.Services.Asp.CustomReferences.ILocalResourceItemReference {
}
public class JetBrains.ReSharper.I18n.Services.Asp.CustomReferences.Impl.AspGlobalResourceKeyReference : GlobalResourceItemReference`2<IAspSubstitution, IHtmlToken> {
    public AspGlobalResourceKeyReference(IAspSubstitution owner, IQualifier quilifier, IHtmlToken token, TreeTextRange withinRange);
    protected virtual string GetElementText();
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
}
public class JetBrains.ReSharper.I18n.Services.Asp.CustomReferences.Impl.AspGlobalResourceReference : GlobalResourceReference`2<IAspSubstitution, IHtmlToken> {
    public bool CaseSensitive { get; }
    public AspGlobalResourceReference(IAspSubstitution owner, IHtmlToken token, TreeTextRange withinRange);
    public virtual bool get_CaseSensitive();
    protected virtual string GetElementText();
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
}
public class JetBrains.ReSharper.I18n.Services.Asp.CustomReferences.Impl.AspLocalResourceReference : LocalResourceReference`2<IAspSubstitution, IHtmlToken> {
    public AspLocalResourceReference(IAspSubstitution owner, IHtmlToken token, TreeTextRange withinRange);
    protected virtual string GetElementText();
    public virtual Staticness GetStaticness();
    public virtual ITypeElement GetQualifierTypeElement();
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
    public virtual ISymbolTable GetCompletionSymbolTable();
}
public class JetBrains.ReSharper.I18n.Services.Asp.CustomReferences.Impl.ImplicitResourceUsageReference : ReferenceWithTokenBase`2<IWebAttribute, IHtmlToken> {
    [NotNullAttribute]
private static Lazy`1<IEnumerable`1<string>> ourPossibleNames;
    public bool CaseSensitive { get; }
    public ImplicitResourceUsageReference(IWebAttribute owner, TreeTextRange withinRange, IHtmlToken token);
    private static ImplicitResourceUsageReference();
    public virtual bool get_CaseSensitive();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public sealed virtual ICollection`1<IPsiSourceFile> FindResourceFiles();
    public sealed virtual string GetDefaultName();
    protected virtual string GetElementText();
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    private static IHtmlToken CreateAspToken(IHtmlToken oldToken, IBuffer buffer);
}
internal class JetBrains.ReSharper.I18n.Services.Asp.CustomReferences.Impl.PropertyReference : QualifiableReferenceWithTokenBase`2<IResxDataTagNameAttribute, IXmlToken> {
    protected bool AllowedNotResolved { get; }
    public bool Resolved { get; }
    public bool CaseSensitive { get; }
    public PropertyReference(TreeTextRange withinRange, IResxDataTagNameAttribute owner, IXmlToken token, IQualifier qualifier);
    protected virtual bool get_AllowedNotResolved();
    public sealed virtual bool get_Resolved();
    public virtual bool get_CaseSensitive();
    public sealed virtual QualifierKind GetKind();
    public virtual Staticness GetStaticness();
    public virtual ITypeElement GetQualifierTypeElement();
    protected virtual string GetElementText();
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public virtual ISymbolFilter[] GetSymbolFilters();
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    [CompilerGeneratedAttribute]
private ISymbolTable <GetReferenceSymbolTable>b__12_1(IType type);
    [CompilerGeneratedAttribute]
private ISymbolTable <GetSymbolTable>b__13_0(DeclaredElementInstance`1<IProperty> instance);
}
public class JetBrains.ReSharper.I18n.Services.Asp.CustomReferences.Impl.SharepointGlobalResourceReference : AspGlobalResourceReference {
    public SharepointGlobalResourceReference(IAspSubstitution owner, IHtmlToken token, TreeTextRange withinRange);
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
}
public abstract class JetBrains.ReSharper.I18n.Services.Asp.CustomReferences.LocalResourceReference`2 : QualifiableReferenceWithTokenBase`2<TOwner, TToken> {
    public bool CaseSensitive { get; }
    public bool ShouldResolveInGlobalTable { get; }
    protected LocalResourceReference`2(TOwner owner, TToken token, TreeTextRange withinRange);
    protected LocalResourceReference`2(TOwner owner, IQualifier quilifier, TToken token, TreeTextRange withinRange);
    public sealed virtual bool get_CaseSensitive();
    public virtual IQualifier GetQualifier();
    public virtual bool get_ShouldResolveInGlobalTable();
    protected virtual IProjectFile GetAspFile();
    public virtual ICollection`1<IPsiSourceFile> FindResourceFiles();
    public sealed virtual string GetDefaultName();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
}
public abstract class JetBrains.ReSharper.I18n.Services.Asp.CustomReferences.PropertyReference`2 : ReferenceWithTokenBase`2<TOwner, TToken> {
    public bool CaseSensitive { get; }
    protected PropertyReference`2(TOwner owner, TToken token, TreeTextRange withinRange);
    public sealed virtual bool get_CaseSensitive();
    protected virtual string GetElementText();
    public virtual TreeTextRange GetTreeTextRange();
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
    protected virtual IType GetArgumentType(ITreeNode element, string name);
    protected abstract virtual IArgument FindArgument(ITreeNode element, string name);
}
internal class JetBrains.ReSharper.I18n.Services.Asp.CustomReferences.Providers.ImplicitResourceUsageReferenceProvider : ElementReferenceFactoryBase`1<IWebAttribute> {
    public virtual ReferenceCollection GetReferencesWithoutCache(IWebAttribute element, ReferenceCollection oldReferences);
    public virtual bool UseOldReferences(IWebAttribute element, ReferenceCollection oldReferences);
    public virtual bool HasReference(IWebAttribute element, IReferenceNameContainer names);
}
internal class JetBrains.ReSharper.I18n.Services.Asp.CustomReferences.Providers.MetaResourceKeyReferenceProvider : ElementReferenceFactoryBase`1<IResxDataTagNameAttribute> {
    public static Regex NameParser;
    public static string RESOURCE_KEY;
    public static string PROPERTY;
    public static string SUB_PROPERTY;
    private static MetaResourceKeyReferenceProvider();
    public virtual ReferenceCollection GetReferencesWithoutCache(IResxDataTagNameAttribute element, ReferenceCollection oldReferences);
    public virtual bool UseOldReferences(IResxDataTagNameAttribute element, ReferenceCollection oldReferences);
    private static bool UseOldReferences(IResxDataTagNameAttribute element, IXmlToken token, IEnumerable`1<IReference> oldReferences);
    public virtual bool HasReference(IResxDataTagNameAttribute element, IReferenceNameContainer names);
}
internal class JetBrains.ReSharper.I18n.Services.Asp.CustomReferences.Providers.ResourcesExpressionReferenceProvider : ElementReferenceFactoryBase`1<IAspSubstitution> {
    public static string FIRST;
    public static string SECOND;
    public static string PROP_NAME;
    public static Regex Parser;
    private static ResourcesExpressionReferenceProvider();
    public virtual ReferenceCollection GetReferencesWithoutCache(IAspSubstitution element, ReferenceCollection oldReferences);
    public virtual bool UseOldReferences(IAspSubstitution element, ReferenceCollection oldReferences);
    private static bool UseOldReferences(IAspSubstitution element, IHtmlToken token, IEnumerable`1<IReference> oldReferences);
    public virtual bool HasReference(IAspSubstitution element, IReferenceNameContainer names);
    private static TextRange GetSourceRange(Capture capture, RangeTranslator translator);
}
public abstract class JetBrains.ReSharper.I18n.Services.Asp.Generation.ResxCodeWrapperGeneratedDocumentService : GeneratedDocumentServiceBase {
    public PsiLanguageType GeneratedLanguage { get; }
    public abstract virtual PsiLanguageType get_GeneratedLanguage();
    [NotNullAttribute]
protected abstract virtual CodeDomProvider GetCodeDomProvider();
    public virtual bool IsSecondaryPsiLanguageType(IProject project, PsiLanguageType language);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.Asp.Generation.ResxCodeWrapperGeneratedDocumentService/<GetSecondaryPsiLanguageTypes>d__4")]
public virtual IEnumerable`1<PsiLanguageType> GetSecondaryPsiLanguageTypes(IProject project);
    public virtual ISecondaryLexingProcess CreateSecondaryLexingService(ISolution solution, MixedLexer mixedLexer, IPsiSourceFile sourceFile);
    public virtual ILexerFactory LexerFactoryWithPreprocessor(PsiLanguageType primaryLanguage);
    public virtual ISecondaryDocumentGenerationResult Generate(PrimaryFileModificationInfo modificationInfo);
    protected virtual GenerationResults GenerateFile(IResxFile resxFile, IPsiSourceFile resourceFile);
    private static string CreateValidIdentifier(CodeDomProvider codeProvider, string part);
}
[RelatedFilesProviderAttribute("JetBrains.ProjectModel.KnownProjectFileType", "16")]
internal class JetBrains.ReSharper.I18n.Services.Asp.Navigation.AspResourcesRelatedFilesProvider : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.Asp.Navigation.AspResourcesRelatedFilesProvider/<GetRelatedFiles>d__0")]
public sealed virtual IEnumerable`1<RelatedFileOccurence> GetRelatedFiles(IProjectFile projectFile);
}
[QuickFixAttribute]
internal class JetBrains.ReSharper.I18n.Services.Asp.QuickFixes.AspCreateGlobalResourceFileFromUsageFix : QuickFixBase {
    [CanBeNullAttribute]
private IReferencePointer myReferencePointer;
    private string myText;
    [CanBeNullAttribute]
private IProjectFile myProjectFile;
    public string Text { get; }
    public AspCreateGlobalResourceFileFromUsageFix(ResourceNotResolvedWarning error);
    protected AspCreateGlobalResourceFileFromUsageFix(IGlobalResourceReference reference);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual void ExecuteBeforePsiTransaction(ISolution solution, IProjectModelTransactionCookie cookie, IProgressIndicator progress);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private bool IsValidResourceFilePath();
    private VirtualFileSystemPath GetResourceFilePath();
    [CanBeNullAttribute]
private string GetResourceFileName();
    [NotNullAttribute]
private string GetResourceFilePresentablePath();
    private static bool IsValidFileName(string fileName);
    private static bool CreateResourceFile(VirtualFileSystemPath filePath);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.I18n.Services.Asp.QuickFixes.AspCreateLocalResourceFileFromUsageFix : QuickFixBase {
    [CanBeNullAttribute]
private IReferencePointer myReferencePointer;
    private string myText;
    [CanBeNullAttribute]
private IProjectFile myProjectFile;
    public string Text { get; }
    public AspCreateLocalResourceFileFromUsageFix(ResourceItemNotResolvedWarning error);
    protected AspCreateLocalResourceFileFromUsageFix(ILocalResourceItemReference reference);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual void ExecuteBeforePsiTransaction(ISolution solution, IProjectModelTransactionCookie cookie, IProgressIndicator progress);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private bool IsValidResourceFilePath();
    private VirtualFileSystemPath GetResourceFilePath();
    [NotNullAttribute]
private string GetResourceFilePresentablePath();
    private static bool IsValidFileName(string fileName);
    private static bool CreateResourceFile(VirtualFileSystemPath filePath);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.I18n.Services.Asp.QuickFixes.ZoneMarker : object {
}
internal class JetBrains.ReSharper.I18n.Services.Asp.Refactoring.HtmlAttributeValue.HtmlAttributeValueSourceElement : object {
    private ITreeNodePointer`1<IHtmlAttributeValue> myAttributeValue;
    [CompilerGeneratedAttribute]
private IType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public IType Type { get; public set; }
    public IHtmlAttributeValue AttributeValue { get; }
    public IPsiSourceFile SourceFile { get; }
    public PsiLanguageType PsiLanguageType { get; }
    public DocumentRange DocumentRange { get; }
    public object Value { get; public set; }
    public HtmlAttributeValueSourceElement(IHtmlAttributeValue attributeValue);
    [CompilerGeneratedAttribute]
public sealed virtual IType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(IType value);
    public IHtmlAttributeValue get_AttributeValue();
    public sealed virtual IPsiSourceFile get_SourceFile();
    public sealed virtual PsiLanguageType get_PsiLanguageType();
    public sealed virtual DocumentRange get_DocumentRange();
    [CompilerGeneratedAttribute]
public sealed virtual object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    public sealed virtual bool IsValid();
    public virtual bool Equals(object obj);
    public bool Equals(HtmlAttributeValueSourceElement other);
    public virtual int GetHashCode();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.Asp.Refactoring.HtmlAttributeValue.HtmlAttributeValueToResourceByMetaResourceKeyExtractor : HtmlAttributeValueToResourceExtractorBase {
    public byte Priority { get; }
    public HtmlAttributeValueToResourceByMetaResourceKeyExtractor(GeneratedFileFinder generatedFileFinder, ResourceAccessorFinder resourceAccessorFinder, HtmlAttributeValueToResourceChecker htmlAttributeValueToResourceChecker);
    public virtual byte get_Priority();
    public virtual bool IsAvailable(IDataContext context);
    public virtual string GetDefaultResourceName(ISourceElement sourceElement);
    public virtual bool CanExtractTo(ISourceElement element, IPsiSourceFile resourceFile);
    public virtual bool Extract(ISourceElement sourceElement, IResourceItem resourceItem, IRefactoringDriver driver);
    private static bool IsValidName(string name, Match match);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.Asp.Refactoring.HtmlAttributeValue.HtmlAttributeValueToResourceByResourcesExpressionExtractor : HtmlAttributeValueToResourceExtractorBase {
    private static string Resources;
    public byte Priority { get; }
    public HtmlAttributeValueToResourceByResourcesExpressionExtractor(GeneratedFileFinder generatedFileFinder, ResourceAccessorFinder resourceAccessorFinder, HtmlAttributeValueToResourceChecker htmlAttributeValueToResourceChecker);
    public virtual byte get_Priority();
    public virtual bool CanExtractTo(ISourceElement element, IPsiSourceFile resourceFile);
    public virtual bool IsAvailable(IDataContext context);
    public virtual bool Extract(ISourceElement sourceElement, IResourceItem resourceItem, IRefactoringDriver driver);
}
public abstract class JetBrains.ReSharper.I18n.Services.Asp.Refactoring.HtmlAttributeValue.HtmlAttributeValueToResourceExtractorBase : object {
    private GeneratedFileFinder myGeneratedFileFinder;
    private ResourceAccessorFinder myResourceAccessorFinder;
    private HtmlAttributeValueToResourceChecker myHtmlAttributeValueToResourceChecker;
    public byte Priority { get; }
    protected HtmlAttributeValueToResourceExtractorBase(GeneratedFileFinder generatedFileFinder, ResourceAccessorFinder resourceAccessorFinder, HtmlAttributeValueToResourceChecker htmlAttributeValueToResourceChecker);
    public abstract virtual byte get_Priority();
    public sealed virtual bool CanUseResource(IPsiSourceFile resourceFile, IAccessContext context);
    public virtual bool IsAvailable(IDataContext context);
    public sealed virtual ISourceElement GetSourceElement(IDataContext dataContext);
    public virtual ISourceElement GetSourceElement(ITreeNode node);
    public virtual string GetDefaultResourceName(ISourceElement sourceElement);
    public abstract virtual bool CanExtractTo(ISourceElement sourceElement, IPsiSourceFile resourceFile);
    public abstract virtual bool Extract(ISourceElement sourceElement, IResourceItem resourceItem, IRefactoringDriver driver);
    [CanBeNullAttribute]
protected IProperty FindResourceAccessor(IResourceItem resourceItem, IPsiSourceFile resourceFile);
    [CompilerGeneratedAttribute]
private IProjectFile <FindResourceAccessor>b__13_0(IPsiSourceFile sourceFile);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.Asp.Refactoring.HtmlAttributeValue.ResourcesExpressionInliner : object {
    public byte Priority { get; }
    public sealed virtual byte get_Priority();
    public sealed virtual bool CanInline(IResourceItemDeclaredElement element);
    public sealed virtual bool CanInline(ITreeNode sourceElement, IResourceItemDeclaredElement element);
    public sealed virtual bool CanInline(IReference reference, IResourceItemDeclaredElement element);
    public sealed virtual bool Inline(IReference reference, IResourceItemDeclaredElement element);
    public sealed virtual bool Inline(ITreeNode sourceElement, IResourceItemDeclaredElement element);
    private static bool IsValidValue(string valueText);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.Asp.Refactoring.LocalResourceInliner : object {
    public byte Priority { get; }
    public sealed virtual byte get_Priority();
    public sealed virtual bool CanInline(IResourceItemDeclaredElement element);
    public sealed virtual bool CanInline(IReference reference, IResourceItemDeclaredElement element);
    public sealed virtual bool CanInline(ITreeNode sourceElement, IResourceItemDeclaredElement element);
    public sealed virtual bool Inline(ITreeNode sourceElement, IResourceItemDeclaredElement element);
    public sealed virtual bool Inline(IReference reference, IResourceItemDeclaredElement element);
    private static bool IsValidValue(string valueText);
}
[ResourceRenameActionAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.Asp.Refactoring.LocalResourceRenameAction : object {
    private IEnumerable`1<DeclaredElementInstance`1<IResourceItemDeclaredElement>> myElements;
    private ImplicitResourceUsageReference myReference;
    public sealed virtual bool IsAvailable(IDataContext context);
    public sealed virtual bool Initialize(IDataContext context, RenameResourceDrivenWorkflow workflow);
    public sealed virtual bool PreExecute(IProgressIndicator progressIndicator, RenameResourceDrivenWorkflow workflow);
    public sealed virtual bool Execute(IProgressIndicator progressIndicator, RenameResourceRefactoring refactoring);
    private static string GetNewName(string resourceName, string resourceKeyName);
    private static ImplicitResourceUsageReference GetReference(IDataContext context);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.I18n.Services.Asp.Refactoring.ZoneMarker : object {
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.I18n.Services.Asp.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string MoveHTMLToResource_Text { get; }
    public static string SelectResourceFile_Text { get; }
    public static string ThereAreNoResourceFiles_Text { get; }
    public static string CreateResourceFile__Text { get; }
    public static string CreateResourceFile_Text { get; }
    public static string MoveHtmlToResourceContextAction_Description { get; }
    public static string MoveHtmlToResourceContextAction_Name { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_MoveHTMLToResource_Text();
    public static string get_SelectResourceFile_Text();
    public static string get_ThereAreNoResourceFiles_Text();
    public static string get_CreateResourceFile__Text();
    public static string get_CreateResourceFile_Text();
    public static string get_MoveHtmlToResourceContextAction_Description();
    public static string get_MoveHtmlToResourceContextAction_Name();
}
[PsiSharedComponentAttribute]
internal class JetBrains.ReSharper.I18n.Services.Asp.Searching.AspLocalResourceSearcherFactory : DomainSpecificSearcherFactoryBase {
    [NotNullAttribute]
private SearchDomainFactory mySearchDomainFactory;
    public AspLocalResourceSearcherFactory(SearchDomainFactory searchDomainFactory);
    public virtual bool IsCompatibleWithLanguage(PsiLanguageType languageType);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.Asp.Searching.AspLocalResourceSearcherFactory/<GetAllPossibleWordsInFile>d__3")]
public virtual IEnumerable`1<string> GetAllPossibleWordsInFile(IDeclaredElement element);
    public virtual ISearchDomain GetDeclaredElementSearchDomain(IDeclaredElement declaredElement);
    public virtual IDomainSpecificSearcher CreateReferenceSearcher(IDeclaredElementsSet elements, ReferenceSearcherParameters referenceSearcherParameters);
    public virtual IDomainSpecificSearcher CreateLateBoundReferenceSearcher(IDeclaredElementsSet elements, ReferenceSearcherParameters referenceSearcherParameters);
}
public class JetBrains.ReSharper.I18n.Services.Asp.Searching.AspMetaResourceKeySearcher : object {
    private IDeclaredElementsSet`1<IResourceItemDeclaredElement> myElements;
    public AspMetaResourceKeySearcher(IDeclaredElementsSet`1<IResourceItemDeclaredElement> elements);
    public sealed virtual bool ProcessProjectItem(IPsiSourceFile sourceFile, IFindResultConsumer`1<TResult> consumer);
    public sealed virtual bool ProcessElement(ITreeNode element, IFindResultConsumer`1<TResult> consumer);
}
[ResourceSearchDomainProviderAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.Asp.Searching.AspResourceSearchDomainProvider : object {
    private SearchDomainFactory mySearchDomainFactory;
    public AspResourceSearchDomainProvider(SearchDomainFactory searchDomainFactory);
    public sealed virtual ISearchDomain GetSearchDomain(IResourceItemDeclaredElement element, ISearchDomain searchDomain);
}
[PsiComponentAttribute("0")]
internal class JetBrains.ReSharper.I18n.Services.Asp.Searching.AspResourceSearcherFactory : DomainSpecificSearcherFactoryBase {
    private SearchDomainFactory mySearchDomainFactory;
    private IWordIndex myWordIndex;
    public AspResourceSearcherFactory(SearchDomainFactory searchDomainFactory, IWordIndex wordIndex);
    public virtual ISearchDomain GetDeclaredElementSearchDomain(IDeclaredElement declaredElement);
    public virtual bool IsCompatibleWithLanguage(PsiLanguageType languageType);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.Asp.Searching.AspResourceSearcherFactory/<GetAllPossibleWordsInFile>d__5")]
public virtual IEnumerable`1<string> GetAllPossibleWordsInFile(IDeclaredElement element);
    public virtual IDomainSpecificSearcher CreateLateBoundReferenceSearcher(IDeclaredElementsSet elements, ReferenceSearcherParameters referenceSearcherParameters);
    public virtual IDomainSpecificSearcher CreateReferenceSearcher(IDeclaredElementsSet elements, ReferenceSearcherParameters referenceSearcherParameters);
}
[PsiComponentAttribute("0")]
public class JetBrains.ReSharper.I18n.Services.Asp.Searching.AspResxSearcherFactory : DomainSpecificSearcherFactoryBase {
    private SearchDomainFactory mySearchDomainFactory;
    private IResourceSearchService myResourceSearchService;
    private ResourceAccessorFinder myResourceAccessorFinder;
    private GeneratedFileFinder myGeneratedFileFinder;
    private ISolutionResourceCache mySolutionResourceCache;
    public AspResxSearcherFactory(SearchDomainFactory searchDomainFactory, IResourceSearchService resourceSearchService, ResourceAccessorFinder resourceAccessorFinder, GeneratedFileFinder generatedFileFinder, ISolutionResourceCache solutionResourceCache);
    public virtual bool IsCompatibleWithLanguage(PsiLanguageType languageType);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.Asp.Searching.AspResxSearcherFactory/<GetAllPossibleWordsInFile>d__7")]
public virtual IEnumerable`1<string> GetAllPossibleWordsInFile(IDeclaredElement element);
    public virtual ISearchDomain GetDeclaredElementSearchDomain(IDeclaredElement declaredElement);
    public virtual IDomainSpecificSearcher CreateConstantExpressionSearcher(ConstantValue constantValue, bool onlyLiteralExpression);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.Asp.Searching.AspResxSearcherFactory/<GetRelatedDeclaredElements>d__10")]
public virtual IEnumerable`1<RelatedDeclaredElement> GetRelatedDeclaredElements(IDeclaredElement element);
    public virtual DerivedFindRequest GetDerivedFindRequest(IFindResultReference result);
    public virtual NavigateTargets GetNavigateToTargets(IDeclaredElement element);
    private bool IsInGeneratedCode(FindResult findResult, IPsiSourceFile masterFile);
}
[ResourceSearchDomainProviderAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.Asp.Searching.AspWebSiteGlobalResourceSearchDomainProvider : object {
    public sealed virtual ISearchDomain GetSearchDomain(IResourceItemDeclaredElement element, ISearchDomain searchDomain);
    public static bool HasStandartResxBuildProvider(IProject project);
}
public abstract class JetBrains.ReSharper.I18n.Services.Asp.Searching.WebSiteGlobalResourceAccessorFinder : object {
    private GeneratedFileFinder myGeneratedFileFinder;
    protected WebSiteGlobalResourceAccessorFinder(GeneratedFileFinder generatedFileFinder);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.Asp.Searching.WebSiteGlobalResourceAccessorFinder/<FindAccessors>d__2")]
public sealed virtual IEnumerable`1<IResourceAccessor> FindAccessors(IResourceItemDeclaredElement element, IEnumerable`1<IResourceAccessor> accessors);
    public sealed virtual IEnumerable`1<ITypeElement> FindTypeElements(IPsiSourceFile resourceFile);
    protected abstract virtual WebSiteGlobalResourceAccessor CreateGlobalResourceAccessor(IProperty property);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.Asp.Services.HtmlAttributeValueToResourceChecker : object {
    public sealed virtual bool CanUseResource(IPsiSourceFile resourceFile, IAccessContext context);
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.ResxProjectFileType", "16")]
public class JetBrains.ReSharper.I18n.Services.Asp.Services.ResxResourceService : ResxResourceServiceBase {
    public virtual IEnumerable`1<IPsiSourceFile> GetResourcesWithAllCultures(IPsiSourceFile resourceFile);
    public virtual ICollection`1<IPsiSourceFile> GetResourcesWithSpecificCultures(IPsiSourceFile resourceFile);
    public virtual ICollection`1<IPsiSourceFile> GetResourcesWithCulture(IPsiSourceFile resourceFile, string cultureName);
    private static IProjectFolder GetAspResourceFolder(IProjectFile resourceFile);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.I18n.Services.Asp.WebUtil : object {
    private static string ResourcesPrefix;
    private static string ResourcesExpressionBuilder;
    private static string SharepointResourcesExpressionBuilder;
    private static string ResXResourceProviderFactory;
    private static string SystemWebAssembly;
    private static string SharepointAssembly;
    public static string AppLocalResources;
    public static string AppGlobalResources;
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectFile GetWebPage(IProjectFile pageOrCodeFile);
    [ExtensionAttribute]
public static bool IsInAppGlobalResources(IProjectFile resourceFile);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectFolder GetAppGlobalResourcesFolder(IProjectElement projectElement);
    [ExtensionAttribute]
public static bool IsInAppLocalResources(IProjectFile resourceFile);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectFolder GetAppLocalResourcesFolder(IProjectFile resourceFile);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectFile FindWebPageByLocalResource(IPsiSourceFile resourceFile);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectFile FindLocalResourceByWebPage(IProjectFile webPage);
    [NotNullAttribute]
public static VirtualFileSystemPath BuildPathToWebPageLocalResources(IPsiSourceFile webPage);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<IWebAttribute> FindAspMetaResourceKeys(ITreeNode element, string name);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<IWebAttribute> FindAspMetaResourceKeys(ITreeNode element, Predicate`1<IWebAttribute> filter);
    [CanBeNullAttribute]
public static IType GetAspElementType(ITreeNode element);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static string GetUnquotedValue(IWebAttribute element);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IHtmlToken GetValueToken(IWebAttribute element);
    public static bool HaveStandartResourcesExpression(IProject project);
    private static bool IsValidType(string assemblyQualifiedTypeName, string fullTypeName, string assemblyName);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.I18n.Services.Asp.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
