internal class JetBrains.ReSharper.I18n.Services.VB.CustomReferences.ComponentResourceManagerReferenceProvider : ResourceManagerReferenceProvider {
    public virtual bool HasReference(IExpressionArgument argument, IReferenceNameContainer names);
    protected virtual ReferenceCollection CreateArgumentReferences(IExpressionArgument argument, IVBExpression argumentValue, IInvocationInfo invocation, ParameterCandidateCheckResult parameterCandidateCheckResult);
    protected virtual bool OnTypeCandidate(string typeName);
    protected virtual bool OnMethodCandidate(string methodName);
    protected virtual ParameterCandidateCheckResult OnParameterCandidate(IInvocationInfo invocationInfo, IExpressionArgument argument);
}
internal class JetBrains.ReSharper.I18n.Services.VB.CustomReferences.DisplayNameAttributePropertyNameReferenceFactory : object {
    private static IClrTypeName AttributeClrName;
    private static HashSet`1<string> Names;
    private static DisplayNameAttributePropertyNameReferenceFactory();
    public sealed virtual ReferenceCollection GetReferences(ITreeNode element, ReferenceCollection oldReferences);
    public sealed virtual bool HasReference(ITreeNode element, IReferenceNameContainer names);
}
internal class JetBrains.ReSharper.I18n.Services.VB.CustomReferences.PropertyReference`1 : CheckedReferenceBase`1<IVBExpression> {
    private string myResourceTypePropertyName;
    protected I18nResolveErrorType ResoleErrorType { get; }
    public PropertyReference`1(IVBExpression expression, string resourceTypePropertyName);
    protected virtual I18nResolveErrorType get_ResoleErrorType();
    public virtual string GetName();
    public virtual TreeTextRange GetTreeTextRange();
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public sealed virtual ISymbolTable GetCompletionSymbolTable();
    public sealed virtual string GetDefaultName();
    public sealed virtual ICollection`1<IPsiSourceFile> FindResourceFiles();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual IReference BindTo(IDeclaredElement element);
    public virtual IReference BindTo(IDeclaredElement element, ISubstitution substitution);
    public virtual ResolveResultWithInfo GetResolveResult(ISymbolTable symbolTable, string referenceName);
    public virtual IAccessContext GetAccessContext();
    public virtual ISymbolFilter[] GetSymbolFilters();
    protected virtual bool IsValidAccessRights(AccessRights accessRights);
    [CompilerGeneratedAttribute]
private bool <GetReferenceSymbolTable>b__10_0(Pair`2<string, AttributeValue> pair);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool <GetReferenceSymbolTable>b__10_1(ISymbolInfo info);
    [CompilerGeneratedAttribute]
private bool <BindTo>b__11_0(Pair`2<string, AttributeValue> pair);
    [CompilerGeneratedAttribute]
private bool <BindTo>b__11_1(INamedArgument node);
}
internal class JetBrains.ReSharper.I18n.Services.VB.CustomReferences.PublicPropertyReference`1 : PropertyReference`1<T> {
    protected I18nResolveErrorType ResoleErrorType { get; }
    public PublicPropertyReference`1(IVBExpression expression, string resourceTypePropertyName);
    protected virtual I18nResolveErrorType get_ResoleErrorType();
    protected virtual bool IsValidAccessRights(AccessRights accessRights);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.I18n.Services.VB.CustomReferences.ResourceFileFinder : object {
    private IStructuralMatcher myResourceManagerFromTypeMatcher;
    private IStructuralMatcher myResourceManagerFromBaseNameAndAssemblyMatcher;
    public ResourceFileFinder(PsiLanguageType language);
    [CanBeNullAttribute]
public ICollection`1<IPsiSourceFile> FindResourceFiles(IVBExpression expression);
    private static void FindResourceFiles(ICollection`1<IPsiSourceFile> files, string name, IProject project);
    private bool FindResourceFileFromType(IVBExpression expression, HashSet`1<IPsiSourceFile> files);
    private bool FindFromBaseNameAndAssembly(IVBExpression expression, HashSet`1<IPsiSourceFile> files);
    [NotNullAttribute]
private IStructuralMatcher GetResourceManagerFromTypeMatcher(IExpression expression);
    [NotNullAttribute]
private IStructuralMatcher GetResourceManagerFromBaseNameAndAssemblyMatcher(IExpression expression);
    [CanBeNullAttribute]
private static IProject GetTypeModule(IDeclaredType type);
    [NotNullAttribute]
public static string GetEmbeddedResourceName(IPsiSourceFile sourceFile, IProjectFile projectFile);
    [NotNullAttribute]
public static string GetEmbeddedResourceName(IClassDeclaration classDeclaration, IPsiSourceFile sourceFile);
}
public class JetBrains.ReSharper.I18n.Services.VB.CustomReferences.ResourceManagerReferenceProvider : StringArgumentReferenceFactoryBase`2<IExpressionArgument, IVBExpression> {
    [LocalizableAttribute("False")]
private static String[] ourMethodNames;
    private static ResourceManagerReferenceProvider();
    protected virtual ReferenceCollection CreateArgumentReferences(IExpressionArgument argument, IVBExpression argumentValue, IInvocationInfo invocation, ParameterCandidateCheckResult parameterCandidateCheckResult);
    protected virtual bool OnTypeCandidate(string typeName);
    protected virtual bool OnMethodCandidate(string methodName);
    protected virtual ParameterCandidateCheckResult OnParameterCandidate(IInvocationInfo invocationInfo, IExpressionArgument argument);
}
[ReferenceProviderFactoryAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.VB.CustomReferences.ResourceReferenceProviderFactory : object {
    private IShellLocks myShellLocks;
    [CompilerGeneratedAttribute]
private ISignal`1<IReferenceProviderFactory> <Changed>k__BackingField;
    public ISignal`1<IReferenceProviderFactory> Changed { get; }
    public ResourceReferenceProviderFactory(IShellLocks shellLocks);
    public sealed virtual IReferenceFactory CreateFactory(IPsiSourceFile sourceFile, IFile file, IWordIndex wordIndexForChecks);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IReferenceProviderFactory> get_Changed();
}
internal class JetBrains.ReSharper.I18n.Services.VB.CustomReferences.ValidationAttributePropertyNameReferenceFactory : object {
    private static IClrTypeName ValidationAttribute;
    private static string ErrorMessageResourceName;
    private static ValidationAttributePropertyNameReferenceFactory();
    public sealed virtual ReferenceCollection GetReferences(ITreeNode element, ReferenceCollection oldReferences);
    private static ReferenceCollection CreateReferences(ITreeNode element);
    public sealed virtual bool HasReference(ITreeNode element, IReferenceNameContainer names);
}
internal class JetBrains.ReSharper.I18n.Services.VB.CustomReferences.VBComponentReference : ComponentReference`2<IVBArgument, IVBExpression> {
    public bool CaseSensitive { get; }
    public VBComponentReference(IVBArgument owner, IVBExpression token, TreeTextRange withinRange);
    public virtual bool get_CaseSensitive();
    protected virtual string GetElementText();
    public virtual TreeTextRange GetTreeTextRange();
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
    public virtual ISymbolTable GetCompletionSymbolTable();
    protected virtual IPsiSourceFile GetCodeFile();
}
public class JetBrains.ReSharper.I18n.Services.VB.CustomReferences.VBComponentResourceReference : VBResourceReference {
    public VBComponentResourceReference(TreeTextRange withinRange, IExpressionArgument owner, IVBExpression token);
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
}
public class JetBrains.ReSharper.I18n.Services.VB.CustomReferences.VBResourceReference : ResourceReference`2<IExpressionArgument, IVBExpression> {
    public VBResourceReference(TreeTextRange withinRange, IExpressionArgument owner, IVBExpression token);
    public virtual ICollection`1<IPsiSourceFile> FindResourceFiles();
    [CanBeNullAttribute]
private static IVBExpression GetInitializerExpression(IDeclaredElement declaredElement);
    [CanBeNullAttribute]
private static IVBExpression GetInitializerFromLocalVariable(ILocalVariable localVariable);
    [CanBeNullAttribute]
private static IVBExpression GetInitializerFromField(IField field);
}
public class JetBrains.ReSharper.I18n.Services.VB.CustomReferences.VBWindowsResourceItemReference : CheckedReferenceBase`1<IVBArgument> {
    public bool HasMultipleNames { get; }
    public VBWindowsResourceItemReference(IVBArgument owner);
    public virtual bool get_HasMultipleNames();
    public virtual string GetName();
    public virtual HybridCollection`1<string> GetAllNames();
    public virtual TreeTextRange GetTreeTextRange();
    protected virtual string GetResourceFullName();
    public sealed virtual string GetDefaultName();
    public sealed virtual ICollection`1<IPsiSourceFile> FindResourceFiles();
    public virtual IAccessContext GetAccessContext();
    public virtual ISymbolFilter[] GetSymbolFilters();
    public sealed virtual ISymbolTable GetCompletionSymbolTable();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual IReference BindTo(IDeclaredElement element);
    public virtual IReference BindTo(IDeclaredElement element, ISubstitution substitution);
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public static string GetResourceFullName(IVBArgument argument);
}
public class JetBrains.ReSharper.I18n.Services.VB.CustomReferences.VBWindowsResourceLoaderItemReference : VBWindowsResourceItemReference {
    public VBWindowsResourceLoaderItemReference(IVBArgument owner);
    protected virtual string GetResourceFullName();
    public virtual IReference BindTo(IDeclaredElement declaredElement, ISubstitution substitution);
    [CanBeNullAttribute]
public static IArgumentList GetConstructorArgumentList(IVBArgument argument);
    public static string GetResourceFullName(IVBArgument vbArgument);
}
public class JetBrains.ReSharper.I18n.Services.VB.CustomReferences.VBWindowsResourceLoaderItemReferenceProvider : StringArgumentReferenceFactoryBase`2<IExpressionArgument, IVBExpression> {
    [LocalizableAttribute("False")]
private static String[] ourMethodNames;
    private static VBWindowsResourceLoaderItemReferenceProvider();
    protected virtual ReferenceCollection CreateArgumentReferences(IExpressionArgument argument, IVBExpression argumentValue, IInvocationInfo invocation, ParameterCandidateCheckResult parameterCandidateCheckResult);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.VB.CustomReferences.VBWindowsResourceLoaderItemReferenceProvider/<GetNamesFromArgumentValue>d__3")]
protected virtual IEnumerable`1<string> GetNamesFromArgumentValue(IExpressionArgument argument);
    protected virtual bool OnTypeCandidate(string typeName);
    protected virtual bool OnMethodCandidate(string methodName);
    protected virtual ParameterCandidateCheckResult OnParameterCandidate(IInvocationInfo invocationInfo, IExpressionArgument argument);
}
public class JetBrains.ReSharper.I18n.Services.VB.CustomReferences.VBWindowsResourceManagerReferenceProvider : StringArgumentReferenceFactoryBase`2<IExpressionArgument, IVBExpression> {
    private static IStructuralMatcher ourResourceManagerMatcher;
    [LocalizableAttribute("False")]
private static String[] ourMethodNames;
    private static VBWindowsResourceManagerReferenceProvider();
    protected virtual ReferenceCollection CreateArgumentReferences(IExpressionArgument argument, IVBExpression argumentValue, IInvocationInfo invocation, ParameterCandidateCheckResult parameterCandidateCheckResult);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.VB.CustomReferences.VBWindowsResourceManagerReferenceProvider/<GetNamesFromArgumentValue>d__4")]
protected virtual IEnumerable`1<string> GetNamesFromArgumentValue(IExpressionArgument argument);
    protected virtual bool OnTypeCandidate(string typeName);
    protected virtual bool OnMethodCandidate(string methodName);
    protected virtual ParameterCandidateCheckResult OnParameterCandidate(IInvocationInfo invocationInfo, IExpressionArgument argument);
    [NotNullAttribute]
private IStructuralMatcher GetResourceManagerMatcher(IExpression expression);
}
[ConfigurableSeverityHighlightingAttribute("LocalizableElement", "VBASIC")]
public class JetBrains.ReSharper.I18n.Services.VB.Daemon.Errors.LocalizableStringWarning : HighlightingBase {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IVBExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <Range>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IVBExpression Expression { get; }
    public DocumentRange Range { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public LocalizableStringWarning(IVBExpression expression, DocumentRange range);
    [CompilerGeneratedAttribute]
public IVBExpression get_Expression();
    [CompilerGeneratedAttribute]
public DocumentRange get_Range();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public virtual bool IsValid();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.I18n.Services.VB.Daemon.ZoneMarker : object {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.I18n.Services.VB.ElementFactoryService : ElementFactoryService {
    public virtual IExpression CreateByValue(ConstantValue value);
    public virtual IExpression CreateExpression(IPsiModule module, string format, Object[] args);
    public virtual object CreateAttribute(IPsiModule module, ITypeElement attributeType, AttributeValue[] values);
}
public static class JetBrains.ReSharper.I18n.Services.VB.LocalizableManager : object {
    public static IClrTypeName ComponentLocalizableAttribute;
    private static LocalizableManager();
    public static Localizable IsLocalizable(IVBExpression expression);
    public static Localizable IsLocalizable(IVBExpression expression, IVBExpression& localizableExpression);
    public static Localizable IsLocalizable(IVBExpression expression, IDictionary`2<IDeclaredElement, Localizable> cacheLocalizableItems);
    public static Localizable IsLocalizable(IVBExpression expression, IVBExpression& localizableExpression, IDictionary`2<IDeclaredElement, Localizable> cacheLocalizableItems);
    public static Localizable IsLocalizable(IVBExpression expression, IVBExpression& localizableExpression, IDictionary`2<IDeclaredElement, Localizable> cacheLocalizableItems, LocalizationRequiredAnnotationProvider localizationRequiredAnnotationProvider);
    public static Localizable IsLocalizable(IDeclaredElement owner);
    public static Localizable IsLocalizable(IDeclaredElement owner, IDictionary`2<IDeclaredElement, Localizable> cacheLocalizableItems);
    public static Localizable IsLocalizable(IDeclaredElement owner, IDictionary`2<IDeclaredElement, Localizable> cacheLocalizableItems, LocalizationRequiredAnnotationProvider localizationRequiredAnnotationProvider);
    private static Localizable GetLocalizableAttributeValue(IDeclaredElement element, IDictionary`2<IDeclaredElement, Localizable> cacheLocalizableItems, LocalizationRequiredAnnotationProvider localizationRequiredAnnotationProvider);
    private static Localizable SaveResultToCache(IDeclaredElement owner, Localizable localizable, IDictionary`2<IDeclaredElement, Localizable> cacheLocalizableItems);
    private static Localizable IsLocalizableExpression(IVBExpression expression, IDictionary`2<IDeclaredElement, Localizable> cacheLocalizableItems, LocalizationRequiredAnnotationProvider localizationRequiredAnnotationProvider);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.I18n.Services.VB.PsiService : PsiService {
    public PsiLanguageType LanguageType { get; }
    public virtual PsiLanguageType get_LanguageType();
    public virtual IExpression GetArgumentValue(IArgument argument);
    public virtual string GetRegionName(ITreeNode element);
    public virtual ITreeNode GetEndRegion(ITreeNode element);
    public virtual IType GetExpressionCompileType(IExpression expression);
    public virtual IInvocationInfo GetInvocationInfoByArgument(IArgument argument);
    public virtual IReference GetInvokedReference(IInvocationInfo invocationInfo);
    public virtual IExpression GetOperandThroughParenthesis(IExpression expression);
    public virtual ConstantValue GetStringLiteralConstantValue(IExpression expression);
    public virtual IExpression GetContainingParenthesizedExpression(IExpression expression);
    public virtual IArgument GetArgumentByValue(IExpression expression);
    public virtual IExpression GetAssignmentTarget(IExpression source);
    public virtual void SetAttribute(IDeclaration declaration, object attribute);
}
[CustomHighlightingActionProviderAttribute("JetBrains.ProjectModel.KnownProjectFileType")]
public class JetBrains.ReSharper.I18n.Services.VB.QuickFixes.DisableProjectLocalizationActionProvider : DisableProjectLocalizationActionProviderBase {
    protected virtual ITreeNode GetContext(IHighlighting highlighting);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.VB.QuickFixes.errorsQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
public class JetBrains.ReSharper.I18n.Services.VB.QuickFixes.MarkDeclarationAsNonLocalizableFix : object {
    private IVBExpression myExpression;
    public MarkDeclarationAsNonLocalizableFix(LocalizableStringWarning error);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.VB.QuickFixes.MarkDeclarationAsNonLocalizableFix/<CreateBulbItems>d__2")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [CanBeNullAttribute]
private static MyAction CreateBulbAction(IDeclaredElement declaredElement, string bulbText);
}
public class JetBrains.ReSharper.I18n.Services.VB.QuickFixes.MoveToResourceFix : object {
    private IVBExpression myExpression;
    public string Text { get; }
    public bool IsReadOnly { get; }
    public MoveToResourceFix(LocalizableStringWarning error);
    public sealed virtual string get_Text();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
    private ICollection`1<Tuple`2<ISourceElement, IResourceExtractor>> GetSourceElements(IEnumerable`1<IResourceExtractor> extractors);
}
internal class JetBrains.ReSharper.I18n.Services.VB.QuickFixes.UseExistentResourceFix : object {
    private IVBExpression myExpression;
    [CompilerGeneratedAttribute]
private IBulbAction[] <Items>k__BackingField;
    public IBulbAction[] Items { get; }
    public UseExistentResourceFix(LocalizableStringWarning error);
    [CompilerGeneratedAttribute]
public IBulbAction[] get_Items();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.I18n.Services.VB.QuickFixes.ZoneMarker : object {
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.VB.Refactoring.DisplayNameAttributeResourceInliner : object {
    public byte Priority { get; }
    public sealed virtual byte get_Priority();
    public sealed virtual bool CanInline(IResourceItemDeclaredElement element);
    public sealed virtual bool CanInline(IReference reference, IResourceItemDeclaredElement element);
    public sealed virtual bool Inline(IReference reference, IResourceItemDeclaredElement element);
    private static void ResetCustomReferences(IAttribute attribute);
    public sealed virtual bool CanInline(ITreeNode sourceElement, IResourceItemDeclaredElement element);
    public sealed virtual bool Inline(ITreeNode sourceElement, IResourceItemDeclaredElement element);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.VB.Refactoring.DisplayNameAttributeToResourceExtractor : ExpressionToResourceExtractorBase`1<IVBExpression> {
    private static string ResourceType;
    private static IClrTypeName AttributeName;
    public byte Priority { get; }
    public DisplayNameAttributeToResourceExtractor(ResourceAccessorFinder resourceAccessorFinder, ExpressionToResourceChecker expressionToResourceChecker);
    private static DisplayNameAttributeToResourceExtractor();
    public virtual byte get_Priority();
    public virtual bool IsAvailable(IDataContext context);
    public virtual ISourceElement GetSourceElement(ITreeNode node);
    public virtual string GetDefaultResourceName(ISourceElement sourceElement);
    public virtual bool CanExtractTo(ISourceElement sourceElement, IPsiSourceFile resourceFile);
    public virtual bool Extract(ISourceElement sourceElement, IResourceItem resourceItem, IRefactoringDriver driver);
    private bool FixResourceType(IAttribute oldAttribute, IAttribute attribute, SourceElement element);
    private static SourceElement GetParameterSourceElement(ExpressionSourceElement`1<IVBExpression> element, IClrTypeName attributeClrName);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.VB.Refactoring.DisplayNameAttributeToResourceExtractor/<GetNamedParameters>d__12")]
private static IEnumerable`1<Pair`2<string, AttributeValue>> GetNamedParameters(string propertyName, string resourceName, ITypeElement resourceClassType, IPsiModule psiModule);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.VB.Refactoring.ErrorMessageFromValidationAttributeToResourceExtractor : ExpressionToResourceExtractorBase`1<IVBExpression> {
    private static string ValidationAttribute;
    private static string ErrorMessage;
    private static string ErrorMessageResourceType;
    private static string ErrorMessageResourceName;
    public byte Priority { get; }
    public ErrorMessageFromValidationAttributeToResourceExtractor(ResourceAccessorFinder resourceAccessorFinder, ExpressionToResourceChecker expressionToResourceChecker);
    public virtual byte get_Priority();
    public virtual bool IsAvailable(IDataContext context);
    public virtual ISourceElement GetSourceElement(ITreeNode node);
    public virtual string GetDefaultResourceName(ISourceElement sourceElement);
    public virtual bool CanExtractTo(ISourceElement sourceElement, IPsiSourceFile resourceFile);
    public virtual bool Extract(ISourceElement sourceElement, IResourceItem resourceItem, IRefactoringDriver driver);
    private static SourceElement GetParameterSourceElement(ExpressionSourceElement`1<IVBExpression> element, string attributeClrName, string name);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.VB.Refactoring.ErrorMessageFromValidationAttributeToResourceExtractor/<GetNamedParameters>d__13")]
private static IEnumerable`1<Pair`2<string, AttributeValue>> GetNamedParameters(string propertyName, ITypeElement resourceClassType, IPsiModule psiModule);
}
public abstract class JetBrains.ReSharper.I18n.Services.VB.Refactoring.ExpressionToResourceExtractor : ExpressionToResourceExtractorBase`1<IVBExpression> {
    protected ExpressionToResourceExtractor(ResourceAccessorFinder resourceAccessorFinder, IResourceChecker resourceChecker);
    public virtual ISourceElement GetSourceElement(ITreeNode node);
    private static bool IsCustomAttributeValue(IVBExpression expression);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.VB.Refactoring.ExpressionToWindowsResourceExtractor : ExpressionToResourceExtractor {
    public byte Priority { get; }
    public ExpressionToWindowsResourceExtractor(ResourceAccessorFinder resourceAccessorFinder, ExpressionToWindowsResourceChecker expressionToWindowsResourceChecker);
    public virtual byte get_Priority();
    public virtual bool CanExtractTo(ISourceElement sourceElement, IPsiSourceFile resourceFile);
    public virtual bool Extract(ISourceElement sourceElement, IResourceItem resourceItem, IRefactoringDriver driver);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.VB.Refactoring.ValidationAttributeResourceInliner : object {
    public byte Priority { get; }
    public sealed virtual byte get_Priority();
    public sealed virtual bool CanInline(IResourceItemDeclaredElement element);
    public sealed virtual bool CanInline(IReference reference, IResourceItemDeclaredElement element);
    public sealed virtual bool Inline(IReference reference, IResourceItemDeclaredElement element);
    public sealed virtual bool CanInline(ITreeNode sourceElement, IResourceItemDeclaredElement element);
    public sealed virtual bool Inline(ITreeNode sourceElement, IResourceItemDeclaredElement element);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.VB.Refactoring.VbExpressionToResourceExtractor : ExpressionToResourceExtractor {
    public byte Priority { get; }
    public VbExpressionToResourceExtractor(ResourceAccessorFinder resourceAccessorFinder, ExpressionToResourceChecker expressionToResourceChecker);
    public virtual byte get_Priority();
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.VB.Refactoring.VBResourceInliner : ResourceToExpressionInlinerBase`1<IVBExpression> {
    public byte Priority { get; }
    protected PsiLanguageType PsiLanguageType { get; }
    public virtual byte get_Priority();
    protected virtual PsiLanguageType get_PsiLanguageType();
    protected virtual IVBExpression CreateExpression(ConstantValue value, IPsiModule module);
    protected virtual ITreeNode GetElementToInline(IReference reference);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.I18n.Services.VB.Refactoring.ZoneMarker : object {
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.I18n.Services.VB.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string LocalizableStringMessage { get; }
    public static string Annotate_WithLocalizableFalse_Text { get; }
    public static string MoveToResource_Text { get; }
    public static string Use__InsteadOfLiteral_Text { get; }
    public static string TheProperty_IsNotPublicResourceAccess_Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_LocalizableStringMessage();
    public static string get_Annotate_WithLocalizableFalse_Text();
    public static string get_MoveToResource_Text();
    public static string get_Use__InsteadOfLiteral_Text();
    public static string get_TheProperty_IsNotPublicResourceAccess_Text();
}
[ResourceAccessorsFinderAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.VB.Searching.CommonRessourceAccessorFinder : ResourceAccessorFinderBase`2<VBProjectFileType, VBLanguage> {
    public CommonRessourceAccessorFinder(GeneratedFileFinder generatedFileFinder, SearchDomainFactory searchDomainFactory);
    protected virtual IResourceAccessor CreateResourceAccessor(ITypeMember typeMember);
    protected virtual IArgument GetArgument(ITreeNode element);
    protected virtual IExpression GetArgumentValue(IArgument argument);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.I18n.Services.VB.Searching.VBComponentReferenceSearcherSwitch : object {
}
[ResourceAccessorsFinderAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.VB.Searching.VBGeneratedResourceAccessorFinder : object {
    private GeneratedFileFinder myGeneratedFileFinder;
    [LocalizableAttribute("False")]
private JetHashSet`1<string> mySupportedCustomTools;
    public VBGeneratedResourceAccessorFinder(GeneratedFileFinder generatedFileFinder);
    public sealed virtual IEnumerable`1<IResourceAccessor> FindAccessors(IResourceItemDeclaredElement element, IEnumerable`1<IResourceAccessor> accessors);
    public sealed virtual IEnumerable`1<ITypeElement> FindTypeElements(IPsiSourceFile resourceFile);
}
internal class JetBrains.ReSharper.I18n.Services.VB.Searching.VBResourceReferenceSearcher : object {
    private IDeclaredElementsSet myElements;
    private ICollection`1<string> myWordsInFiles;
    private ICollection`1<string> myNames;
    private ReferenceSearcherParameters myReferenceSearcherParameters;
    public VBResourceReferenceSearcher(IDeclaredElementsSet elements, ICollection`1<string> wordsInFiles, ICollection`1<string> names, ReferenceSearcherParameters referenceSearcherParameters);
    public sealed virtual bool ProcessProjectItem(IPsiSourceFile sourceFile, IFindResultConsumer`1<TResult> consumer);
    public sealed virtual bool ProcessElement(ITreeNode element, IFindResultConsumer`1<TResult> consumer);
}
[PsiComponentAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.VB.Searching.VBResourceReferenceSearcherFactory : DomainSpecificSearcherFactoryBase {
    private SearchDomainFactory mySearchDomainFactory;
    public VBResourceReferenceSearcherFactory(SearchDomainFactory searchDomainFactory);
    public virtual bool IsCompatibleWithLanguage(PsiLanguageType languageType);
    public virtual ISearchDomain GetDeclaredElementSearchDomain(IDeclaredElement declaredElement);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.VB.Searching.VBResourceReferenceSearcherFactory/<GetAllPossibleWordsInFile>d__4")]
public virtual IEnumerable`1<string> GetAllPossibleWordsInFile(IDeclaredElement element);
    public virtual IDomainSpecificSearcher CreateReferenceSearcher(IDeclaredElementsSet elements, ReferenceSearcherParameters referenceSearcherParameters);
}
internal class JetBrains.ReSharper.I18n.Services.VB.Searching.VBResourceUsagesByArgumentSearcher : object {
    private IWordIndex myWordIndex;
    private VBResourceUsagesByArgumentSearcherFactory myFactory;
    private GeneratedFileFinder myGeneratedFileFinder;
    private IDeclaredElementsSet`1<IResourceItemDeclaredElement> myElements;
    private IReferenceNameContainer myNames;
    private bool mySearchLateBound;
    public VBResourceUsagesByArgumentSearcher(VBResourceUsagesByArgumentSearcherFactory factory, GeneratedFileFinder generatedFileFinder, IDeclaredElementsSet`1<IResourceItemDeclaredElement> elements, bool searchLateBound);
    public sealed virtual bool ProcessProjectItem(IPsiSourceFile sourceFile, IFindResultConsumer`1<TResult> consumer);
    public sealed virtual bool ProcessElement(ITreeNode element, IFindResultConsumer`1<TResult> consumer);
    private FindExecution ProcessReference(IReference reference, IFindResultConsumer`1<TResult> consumer);
    private FindExecution CommitReference(IReference reference, IFindResultConsumer`1<TResult> consumer, Func`2<IDeclaredElement, FindResult> createFindResult);
    protected virtual bool CanContainReferencesTo(IPsiSourceFile sourceFile);
}
[PsiComponentAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.VB.Searching.VBResourceUsagesByArgumentSearcherFactory : DomainSpecificSearcherFactoryBase {
    private GeneratedFileFinder myGeneratedFileFinder;
    private SearchDomainFactory mySearchDomainFactory;
    [LocalizableAttribute("False")]
private JetHashSet`1<string> myMethods;
    public ICollection`1<string> Methods { get; }
    public VBResourceUsagesByArgumentSearcherFactory(GeneratedFileFinder generatedFileFinder, SearchDomainFactory searchDomainFactory);
    public ICollection`1<string> get_Methods();
    public virtual bool IsCompatibleWithLanguage(PsiLanguageType languageType);
    public virtual ISearchDomain GetDeclaredElementSearchDomain(IDeclaredElement declaredElement);
    public virtual IEnumerable`1<string> GetAllPossibleWordsInFile(IDeclaredElement element);
    public virtual IDomainSpecificSearcher CreateReferenceSearcher(IDeclaredElementsSet elements, ReferenceSearcherParameters referenceSearcherParameters);
    public virtual IDomainSpecificSearcher CreateLateBoundReferenceSearcher(IDeclaredElementsSet elements, ReferenceSearcherParameters referenceSearcherParameters);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.VB.Services.ExpressionToResourceChecker : object {
    private GeneratedFileFinder myGeneratedFileFinder;
    public ExpressionToResourceChecker(GeneratedFileFinder generatedFileFinder);
    public sealed virtual bool CanUseResource(IPsiSourceFile resourceFile, IAccessContext context);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.VB.Services.ExpressionToWindowsResourceChecker : object {
    public sealed virtual bool CanUseResource(IPsiSourceFile resourceFile, IAccessContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.I18n.Services.VB.VBLocalizableManager : object {
    public sealed virtual Localizable IsLocalizable(IExpression expression);
    public sealed virtual bool ShouldAnalyzeVerbatimStrings(IContextBoundSettingsStore settingsStore);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.I18n.Services.VB.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
