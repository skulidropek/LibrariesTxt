[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.Actions.BaseResourceContextSearch : DeclaredElementContextSearchBase`1<SearchResourceBaseRequest> {
    protected ReferencePreferenceKind ReferencePreferenceKind { get; }
    protected virtual SearchResourceBaseRequest CreateSearchRequest(IDataContext dataContext, IDeclaredElement declaredElement, IDeclaredElement initialTarget);
    protected virtual ReferencePreferenceKind get_ReferencePreferenceKind();
    protected virtual bool IsAvailableInternal(IDataContext context);
    protected virtual IEnumerable`1<IDeclaredElement> GetElementCandidates(IDataContext context, ReferencePreferenceKind kind, bool updateOnly);
}
[ActionAttribute("JetBrains.ReSharper.I18n.Services.Resources.Strings", "ResourceValueActionText")]
public class JetBrains.ReSharper.I18n.Services.Actions.EditResourceValueActionHandler : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private static void EditResourceValue(IResourceItemDeclaredElement element);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.Actions.EditResourceValueActionHandler/<GetResources>d__3")]
[NotNullAttribute]
private static IEnumerable`1<IResourceItemDeclaredElement> GetResources(IDataContext context);
    private static bool IsValidResourceItem(IResourceItemDeclaredElement element);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.Actions.EditResourceValueFormProviderStub : object {
    public virtual void Show(IResourceItemDeclaredElement element);
}
[ContextNavigationProviderAttribute("0")]
public class JetBrains.ReSharper.I18n.Services.Actions.GotoImplementationsResourceProvider : ResourcesHierarchyProviderBase`3<IImplementationsResourceContextSearch, SearchResourceImplementationsRequest, SearchImplementationsDescriptor> {
    public GotoImplementationsResourceProvider(IFeaturePartsContainer manager);
    protected virtual SearchImplementationsDescriptor CreateSearchDescriptor(SearchResourceImplementationsRequest searchRequest, ICollection`1<IOccurrence> results);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.Actions.GotoImplementationsResourceProvider/<CreateWorkflow>d__2")]
public sealed virtual IEnumerable`1<ContextNavigation> CreateWorkflow(IDataContext dataContext);
}
[ContextNavigationProviderAttribute("0")]
public class JetBrains.ReSharper.I18n.Services.Actions.GotoInheritorsResourceProvider : ResourcesHierarchyProviderBase`3<IInheritorsResourceContextSearch, SearchResourceInheritorsRequest, SearchInheritorsDescriptor> {
    public GotoInheritorsResourceProvider(IFeaturePartsContainer manager);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.Actions.GotoInheritorsResourceProvider/<CreateWorkflow>d__1")]
public sealed virtual IEnumerable`1<ContextNavigation> CreateWorkflow(IDataContext dataContext);
    protected virtual SearchInheritorsDescriptor CreateSearchDescriptor(SearchResourceInheritorsRequest searchRequest, ICollection`1<IOccurrence> results);
}
public interface JetBrains.ReSharper.I18n.Services.Actions.IBaseResourceContextSearch {
}
public interface JetBrains.ReSharper.I18n.Services.Actions.IEditResourceValueFormProvider {
    public abstract virtual void Show(IResourceItemDeclaredElement element);
}
public interface JetBrains.ReSharper.I18n.Services.Actions.IImplementationsResourceContextSearch {
}
public interface JetBrains.ReSharper.I18n.Services.Actions.IInheritorsResourceContextSearch {
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.Actions.ImplementationsResourceContextSearch : DeclaredElementContextSearchBase`1<SearchResourceImplementationsRequest> {
    protected ReferencePreferenceKind ReferencePreferenceKind { get; }
    protected virtual SearchResourceImplementationsRequest CreateSearchRequest(IDataContext dataContext, IDeclaredElement declaredElement, IDeclaredElement initialTarget);
    protected virtual bool IsAvailableInternal(IDataContext context);
    protected virtual ReferencePreferenceKind get_ReferencePreferenceKind();
    protected virtual IEnumerable`1<IDeclaredElement> GetElementCandidates(IDataContext context, ReferencePreferenceKind kind, bool updateOnly);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.Actions.InheritorsResourceContextSearch : DeclaredElementContextSearchBase`1<SearchResourceInheritorsRequest> {
    protected ReferencePreferenceKind ReferencePreferenceKind { get; }
    protected virtual SearchResourceInheritorsRequest CreateSearchRequest(IDataContext dataContext, IDeclaredElement declaredElement, IDeclaredElement initialTarget);
    protected virtual bool IsAvailableInternal(IDataContext context);
    protected virtual ReferencePreferenceKind get_ReferencePreferenceKind();
    protected virtual IEnumerable`1<IDeclaredElement> GetElementCandidates(IDataContext context, ReferencePreferenceKind kind, bool updateOnly);
}
public abstract class JetBrains.ReSharper.I18n.Services.Actions.ResourcesHierarchyProviderBase`3 : RequestContextSearchProvider`3<TContextSearch, TSearchRequest, TDescriptor> {
    protected ResourcesHierarchyProviderBase`3(IFeaturePartsContainer manager);
    protected virtual void ProcessResults(IDataContext context, TSearchRequest searchRequest, INavigationExecutionHost host, ICollection`1<IOccurrence> occurrences, Func`1<IOccurrenceBrowserDescriptor> descriptorFactory);
    protected virtual OccurrencePresentationOptions ProvideFeatureSpecificPresentationOptions(TSearchRequest searchRequest);
}
public class JetBrains.ReSharper.I18n.Services.Actions.SearchResourceBaseRequest : SearchBasesRequest {
    public SearchResourceBaseRequest(IDeclaredElement element);
    public virtual ICollection`1<IOccurrence> Search(IProgressIndicator progressIndicator);
}
internal class JetBrains.ReSharper.I18n.Services.Actions.SearchResourceBasesDescriptor : SearchBasesDescriptor {
    public SearchResourceBasesDescriptor(SearchBasesRequest request, ICollection`1<IOccurrence> results);
}
public class JetBrains.ReSharper.I18n.Services.Actions.SearchResourceImplementationsRequest : SearchImplementationsRequest {
    public SearchResourceImplementationsRequest(IDeclaredElement declaredElement, ISearchDomain searchDomain);
    public virtual ICollection`1<IOccurrence> Search(IProgressIndicator progressIndicator);
    private static IEnumerable`1<IPsiSourceFile> GetAllResourceFiles(IDeclaredElement declaredElement);
}
public class JetBrains.ReSharper.I18n.Services.Actions.SearchResourceInheritorsRequest : SearchInheritorsRequest {
    public SearchResourceInheritorsRequest(IDeclaredElement element, ISearchDomain searchDomain);
    public virtual ICollection`1<IOccurrence> Search(IProgressIndicator progressIndicator);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.I18n.Services.AttributeInstanceExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static T ChangeAttributeParameters(IAttributeInstance instance, IEnumerable`1<string> oldParameters, IEnumerable`1<Pair`2<string, AttributeValue>> newParameters, Func`4<ITypeElement, AttributeValue[], Pair`2[], T> factory, StringComparison comparison);
}
public class JetBrains.ReSharper.I18n.Services.CustomReferences.ComponentPropertyReferenceFactory : ElementReferenceFactoryBase`1<IResxIdentifierAttribute> {
    public static Regex ResourceKeyParser;
    public static string COMPONENT;
    public static string PROPERTY;
    private static ComponentPropertyReferenceFactory();
    public virtual ReferenceCollection GetReferencesWithoutCache(IResxIdentifierAttribute element, ReferenceCollection oldReferences);
    public virtual bool UseOldReferences(IResxIdentifierAttribute element, ReferenceCollection oldReferences);
    private static bool UseOldReferences(IResxIdentifierAttribute element, IXmlToken token, IEnumerable`1<IReference> oldReferences);
    public virtual bool HasReference(IResxIdentifierAttribute element, IReferenceNameContainer names);
}
public abstract class JetBrains.ReSharper.I18n.Services.CustomReferences.ComponentReference`2 : ReferenceWithTokenBase`2<TOwner, TToken> {
    public bool Resolved { get; }
    protected ComponentReference`2(TOwner owner, TToken token, TreeTextRange withinRange);
    public sealed virtual bool get_Resolved();
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public sealed virtual QualifierKind GetKind();
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public virtual ISymbolFilter[] GetSymbolFilters();
    [CanBeNullAttribute]
protected abstract virtual IPsiSourceFile GetCodeFile();
    private static bool IsComponent(IType type, ITypeElement componentType);
    private ISymbolTable GetSymbolTable(IPsiSourceFile codeFile);
}
public abstract class JetBrains.ReSharper.I18n.Services.CustomReferences.ElementReferenceFactoryBase`1 : object {
    private sealed virtual override ReferenceCollection JetBrains.ReSharper.Psi.Resolve.IReferenceFactory.GetReferences(ITreeNode element, ReferenceCollection oldReferences);
    public virtual ReferenceCollection GetReferences(TElement element, ReferenceCollection oldReferences);
    private sealed virtual override bool JetBrains.ReSharper.Psi.Resolve.IReferenceFactory.HasReference(ITreeNode element, IReferenceNameContainer names);
    public abstract virtual bool UseOldReferences(TElement element, ReferenceCollection oldReferences);
    public abstract virtual bool HasReference(TElement element, IReferenceNameContainer names);
    public abstract virtual ReferenceCollection GetReferencesWithoutCache(TElement element, ReferenceCollection oldReferences);
    protected static TreeTextRange GetRange(Capture capture, RangeTranslator translator);
    protected static bool IsNotEmpty(Group group);
}
public class JetBrains.ReSharper.I18n.Services.CustomReferences.EnumMemberReferenceInsideTag : ReferenceInsideTagBase`1<IResxDataValueTag> {
    protected bool CaseSensitive { get; }
    public EnumMemberReferenceInsideTag(IResxDataValueTag owner, TreeTextRange withinRange);
    protected virtual bool get_CaseSensitive();
    public virtual IReference BindTo(IDeclaredElement element, ISubstitution substitution);
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual ResolveResultWithInfo ResolveWithoutCache();
}
public interface JetBrains.ReSharper.I18n.Services.CustomReferences.IElementReferenceFactory`1 {
    public abstract virtual ReferenceCollection GetReferences(TElement element, ReferenceCollection oldReferences);
    public abstract virtual bool HasReference(TElement element, IReferenceNameContainer names);
    public abstract virtual bool UseOldReferences(TElement element, ReferenceCollection oldReferences);
    public abstract virtual ReferenceCollection GetReferencesWithoutCache(TElement element, ReferenceCollection oldReferences);
}
public class JetBrains.ReSharper.I18n.Services.CustomReferences.OneElementReferenceFactory`1 : ElementReferenceFactoryBase`1<TElement> {
    [NotNullAttribute]
private ICollection`1<IElementReferenceFactory`1<TElement>> myFactories;
    public OneElementReferenceFactory`1(IElementReferenceFactory`1[] factories);
    public OneElementReferenceFactory`1(ICollection`1<IElementReferenceFactory`1<TElement>> factories);
    public virtual ReferenceCollection GetReferencesWithoutCache(TElement element, ReferenceCollection oldReferences);
    public virtual bool UseOldReferences(TElement element, ReferenceCollection oldReferences);
    public virtual bool HasReference(TElement element, IReferenceNameContainer names);
}
public class JetBrains.ReSharper.I18n.Services.CustomReferences.ParameterCandidateCheckResult : object {
    [NotNullAttribute]
public static ParameterCandidateCheckResult Applicable;
    [NotNullAttribute]
public static ParameterCandidateCheckResult NotApplicable;
    [CompilerGeneratedAttribute]
private bool <IsApplicable>k__BackingField;
    public bool IsApplicable { get; }
    public ParameterCandidateCheckResult(bool isApplicable);
    private static ParameterCandidateCheckResult();
    [CompilerGeneratedAttribute]
public bool get_IsApplicable();
    public static ParameterCandidateCheckResult op_Implicit(bool result);
}
public abstract class JetBrains.ReSharper.I18n.Services.CustomReferences.ResourceReference`2 : ResourceReferenceBase`2<TOwner, TToken> {
    public bool CaseSensitive { get; }
    protected ResourceReference`2(TreeTextRange withinRange, TOwner owner, TToken token);
    public virtual bool get_CaseSensitive();
    protected virtual string GetElementText();
    public virtual TreeTextRange GetTreeTextRange();
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
    private static void BindType(ITreeNode owner, IDeclaredElement declaredElement);
    private static ITypeElement GetTypeElement(IDeclaredElement element);
    [NotNullAttribute]
protected virtual ICollection`1<IPsiSourceFile> FindResourceFileFromDeclaredElement(IDeclaredElement declaredElement);
}
public abstract class JetBrains.ReSharper.I18n.Services.CustomReferences.ResourceReferenceBase`2 : ReferenceWithTokenBase`2<TOwner, TToken> {
    protected ResourceReferenceBase`2(TreeTextRange withinRange, TOwner owner, TToken token);
    public abstract virtual ICollection`1<IPsiSourceFile> FindResourceFiles();
    public sealed virtual string GetDefaultName();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual ResolveResultWithInfo ResolveWithoutCache();
}
public class JetBrains.ReSharper.I18n.Services.CustomReferences.ResxComponentNameReferenceFactory : ElementReferenceFactoryBase`1<IResxDataValueTag> {
    internal static JetHashSet`1<string> Properties;
    private static ResxComponentNameReferenceFactory();
    public virtual ReferenceCollection GetReferencesWithoutCache(IResxDataValueTag element, ReferenceCollection oldReferences);
    public virtual bool UseOldReferences(IResxDataValueTag element, ReferenceCollection oldReferences);
    private static bool UseOldReferences(IResxDataValueTag element, IEnumerable`1<IReference> oldReferences);
    public virtual bool HasReference(IResxDataValueTag element, IReferenceNameContainer names);
}
public class JetBrains.ReSharper.I18n.Services.CustomReferences.ResxComponentPropertyReference : QualifiableReferenceWithTokenBase`2<IResxIdentifierAttribute, IXmlToken> {
    public ResxComponentPropertyReference(IResxIdentifierAttribute owner, IXmlToken token, TreeTextRange withinRange);
    public ResxComponentPropertyReference(IResxIdentifierAttribute owner, IQualifier quilifier, IXmlToken token, TreeTextRange withinRange);
    protected virtual string GetElementText();
    public virtual Staticness GetStaticness();
    public virtual ITypeElement GetQualifierTypeElement();
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    public virtual ISymbolFilter[] GetSymbolFilters();
}
public class JetBrains.ReSharper.I18n.Services.CustomReferences.ResxComponentReference : ComponentReference`2<IResxIdentifierAttribute, IXmlToken> {
    public bool CaseSensitive { get; }
    public ResxComponentReference(IResxIdentifierAttribute owner, IXmlToken token, TreeTextRange withinRange);
    public virtual bool get_CaseSensitive();
    protected virtual string GetElementText();
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
    protected virtual IPsiSourceFile GetCodeFile();
    public virtual string ToString();
}
public class JetBrains.ReSharper.I18n.Services.CustomReferences.ResxComponentReferenceInsideTag : ReferenceInsideTagBase`1<IResxDataValueTag> {
    public ResxComponentReferenceInsideTag(IResxDataValueTag owner, TreeTextRange withinRange);
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public virtual IReference BindTo(IDeclaredElement element, ISubstitution substitution);
    public virtual string ToString();
}
public class JetBrains.ReSharper.I18n.Services.CustomReferences.ResxEnumMemberReferenceFactory : ElementReferenceFactoryBase`1<IResxDataValueTag> {
    private static Regex ourEnumValuesParser;
    private static ResxEnumMemberReferenceFactory();
    public virtual ReferenceCollection GetReferencesWithoutCache(IResxDataValueTag element, ReferenceCollection oldReferences);
    public virtual bool UseOldReferences(IResxDataValueTag element, ReferenceCollection oldReferences);
    private static bool UseOldReferences(IResxDataValueTag element, IEnumerable`1<IReference> oldReferences);
    public virtual bool HasReference(IResxDataValueTag element, IReferenceNameContainer names);
}
public abstract class JetBrains.ReSharper.I18n.Services.CustomReferences.StringArgumentReferenceFactoryBase`2 : ElementReferenceFactoryBase`1<TArgument> {
    private static string EmptyName;
    private PsiService myPsiService;
    protected StringArgumentReferenceFactoryBase`2(PsiLanguageType psiLanguageType);
    public virtual bool HasReference(TArgument argument, IReferenceNameContainer names);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.CustomReferences.StringArgumentReferenceFactoryBase`2/<GetNamesFromArgumentValue>d__4")]
[NotNullAttribute]
protected virtual IEnumerable`1<string> GetNamesFromArgumentValue(TArgument argument);
    public sealed virtual ReferenceCollection GetReferencesWithoutCache(TArgument argument, ReferenceCollection oldReferences);
    private bool IsValidType(IDeclaredType type, JetHashSet`1<IDeclaredType> visitedTypes);
    public sealed virtual bool UseOldReferences(TArgument argument, ReferenceCollection oldReferences);
    protected virtual bool UseOldReferences(TArgument argument, TArgumentValue argumentValue, ReferenceCollection oldReferences);
    protected abstract virtual bool OnMethodCandidate(string methodName);
    [NotNullAttribute]
protected abstract virtual ParameterCandidateCheckResult OnParameterCandidate(IInvocationInfo invocationInfo, TArgument argument);
    protected abstract virtual bool OnTypeCandidate(string typeName);
    protected abstract virtual ReferenceCollection CreateArgumentReferences(TArgument argument, TArgumentValue argumentValue, IInvocationInfo invocation, ParameterCandidateCheckResult parameterCandidateCheckResult);
    [NotNullAttribute]
protected ConstantValue GetArgumentConstantValue(TArgument argument);
    protected static TreeTextRange GetReferenceRange(ITreeNode element);
}
public abstract class JetBrains.ReSharper.I18n.Services.Daemon.DaemonStageBase`1 : object {
    public virtual IEnumerable`1<IDaemonStageProcess> CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind);
    [CanBeNullAttribute]
protected abstract virtual IDaemonStageProcess CreateDaemonProcess(IDaemonProcess process, DaemonProcessKind processKind, TPsiFile file, IContextBoundSettingsStore settingsStore);
    [NotNullAttribute]
protected abstract virtual IEnumerable`1<TPsiFile> GetPsiFiles(IPsiSourceFile sourceFile);
}
public abstract class JetBrains.ReSharper.I18n.Services.Daemon.DaemonStageProcessBase`1 : object {
    protected IHighlightingConsumer myHighlightingConsumer;
    protected IDaemonProcess myProcess;
    protected TPsiFile myFile;
    private IFile JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStageProcessWithPsiFile.File { get; }
    public IDaemonProcess DaemonProcess { get; }
    public bool ProcessingIsFinished { get; }
    protected DaemonStageProcessBase`1(IDaemonProcess process, TPsiFile file);
    private sealed virtual override IFile JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStageProcessWithPsiFile.get_File();
    public sealed virtual IDaemonProcess get_DaemonProcess();
    public virtual bool get_ProcessingIsFinished();
    public virtual void Execute(Action`1<DaemonStageResult> committer);
    public virtual bool InteriorShouldBeProcessed(ITreeNode element);
    public virtual void ProcessBeforeInterior(ITreeNode element);
    public virtual void ProcessAfterInterior(ITreeNode element);
    protected void AddHighlightingInfo(IHighlighting highlighting);
    protected void AddHighlightingInfo(DocumentRange range, IHighlighting highlighting);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.KnownLanguage", "16")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.I18n.Services.Daemon.I18nResolveErrorHelper : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public sealed virtual IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public sealed virtual IHighlighting Run(IReference reference);
}
[ConfigurableSeverityHighlightingAttribute("ResourceItemNotResolved", "CSHARP,VBASIC,ASPX")]
public class JetBrains.ReSharper.I18n.Services.Daemon.MultipleResourceItemCandidatesWarning : HighlightingBase {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private string <String1>k__BackingField;
    [CompilerGeneratedAttribute]
private IReference <Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public string String1 { get; }
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public MultipleResourceItemCandidatesWarning(string string1, IReference reference);
    [CompilerGeneratedAttribute]
public string get_String1();
    [CompilerGeneratedAttribute]
public IReference get_Reference();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("PropertyNotResolved", "CSHARP,VBASIC,ASPX")]
public class JetBrains.ReSharper.I18n.Services.Daemon.PropertyNotResolvedWarning : HighlightingBase {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IReference <Reference>k__BackingField;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public PropertyNotResolvedWarning(IReference reference);
    [CompilerGeneratedAttribute]
public IReference get_Reference();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("PropertyNotResolved", "CSHARP,VBASIC,ASPX")]
public class JetBrains.ReSharper.I18n.Services.Daemon.PublicPropertyNotResolvedWarning : HighlightingBase {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IReference <Reference>k__BackingField;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public PublicPropertyNotResolvedWarning(IReference reference);
    [CompilerGeneratedAttribute]
public IReference get_Reference();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public virtual bool IsValid();
}
[RegisterConfigurableSeverityAttribute("ResourceNotResolved", "", "", "", "CodeSmell", "", "JetBrains.ReSharper.I18n.Services.Resources.Strings", "CannotResolveResource", "", "JetBrains.ReSharper.I18n.Services.Resources.Strings", "CannotResolveResource1", "5")]
[RegisterConfigurableSeverityAttribute("ResourceItemNotResolved", "", "", "", "CodeSmell", "", "JetBrains.ReSharper.I18n.Services.Resources.Strings", "CannotResolveResourceItem", "", "JetBrains.ReSharper.I18n.Services.Resources.Strings", "CannotResolveResourceItem2", "5")]
[RegisterConfigurableSeverityAttribute("PropertyNotResolved", "", "", "", "CodeSmell", "", "JetBrains.ReSharper.I18n.Services.Resources.Strings", "CannotResolveProperty", "", "JetBrains.ReSharper.I18n.Services.Resources.Strings", "CannotResolveProperty3", "5")]
public class JetBrains.ReSharper.I18n.Services.Daemon.RegisterSeverityComponent00C87B1FF726C60F53D788F0F183E425A5072FBB652008E03895F57C9DB3AD37 : object {
}
[ConfigurableSeverityHighlightingAttribute("ResourceItemNotResolved", "CSHARP,VBASIC,ASPX")]
public class JetBrains.ReSharper.I18n.Services.Daemon.ResourceItemNotResolvedWarning : HighlightingBase {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IReference <Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ResourceItemNotResolvedWarning(IReference reference);
    [CompilerGeneratedAttribute]
public IReference get_Reference();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("ResourceNotResolved", "CSHARP,VBASIC,ASPX")]
public class JetBrains.ReSharper.I18n.Services.Daemon.ResourceNotResolvedWarning : HighlightingBase {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IReference <Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ResourceNotResolvedWarning(IReference reference);
    [CompilerGeneratedAttribute]
public IReference get_Reference();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public virtual bool IsValid();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.I18n.Services.Daemon.ZoneMarker : object {
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.I18n.Services.ElementFactory : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IExpression CreateByValue(ITreeNode element, string value);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IExpression CreateByValue(ITreeNode element, ConstantValue value);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IExpression CreateExpression(ITreeNode element, IDeclaredElement declaredElement);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IExpression CreateExpression(ITreeNode element, string format, Object[] args);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IExpression CreateByValue(IClrDeclaredElement element, string value);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IExpression CreateByValue(IClrDeclaredElement element, ConstantValue value);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IExpression CreateExpression(IClrDeclaredElement element, IDeclaredElement declaredElement);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IExpression CreateExpression(IClrDeclaredElement element, string format, Object[] args);
}
public abstract class JetBrains.ReSharper.I18n.Services.ElementFactoryService : object {
    [CanBeNullAttribute]
public static ElementFactoryService Get(ITreeNode element);
    [CanBeNullAttribute]
public static ElementFactoryService Get(PsiLanguageType language);
    public abstract virtual IExpression CreateByValue(ConstantValue value);
    [CanBeNullAttribute]
public virtual IExpression CreateExpression(IPsiModule module, IDeclaredElement declaredElement);
    [CanBeNullAttribute]
public abstract virtual IExpression CreateExpression(IPsiModule module, string format, Object[] args);
    [CanBeNullAttribute]
public abstract virtual object CreateAttribute(IPsiModule module, ITypeElement attributeType, AttributeValue[] values);
}
public class JetBrains.ReSharper.I18n.Services.ExpressionSourceElement`1 : object {
    private ITreeNodePointer`1<T> myExpression;
    [CompilerGeneratedAttribute]
private IType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public IType Type { get; public set; }
    public IPsiSourceFile SourceFile { get; }
    public PsiLanguageType PsiLanguageType { get; }
    public DocumentRange DocumentRange { get; }
    public object Value { get; public set; }
    [NotNullAttribute]
public T Expression { get; }
    public ExpressionSourceElement`1(T expression);
    [CompilerGeneratedAttribute]
public sealed virtual IType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(IType value);
    public sealed virtual IPsiSourceFile get_SourceFile();
    public sealed virtual PsiLanguageType get_PsiLanguageType();
    public sealed virtual DocumentRange get_DocumentRange();
    [CompilerGeneratedAttribute]
public virtual object get_Value();
    [CompilerGeneratedAttribute]
public virtual void set_Value(object value);
    public T get_Expression();
    public sealed virtual bool IsValid();
    public virtual bool Equals(object obj);
    public bool Equals(ExpressionSourceElement`1<T> other);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.I18n.Services.Impl.ItemByNameOrValueMarshaller : object {
    private IPersistentIndexManager myPersistentIndexManager;
    private static ItemsByNameOrValue ourEmpty;
    public ItemByNameOrValueMarshaller(IPersistentIndexManager persistentIndexManager);
    private static ItemByNameOrValueMarshaller();
    public sealed virtual void Marshal(UnsafeWriter writer, ItemsByNameOrValue value);
    public sealed virtual ItemsByNameOrValue Unmarshal(UnsafeReader reader);
}
public class JetBrains.ReSharper.I18n.Services.Impl.ItemsByNameOrValue : object {
    public IPsiSourceFile File;
    public CompactOneToListMap`2<string, IResourceItem> ItemsByName;
    public CompactOneToListMap`2<int, IResourceItem> ItemsByValue;
    public ItemsByNameOrValue(IPsiSourceFile file, CompactOneToListMap`2<string, IResourceItem> itemsByName);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.I18n.Services.Impl.ProjectFileTypeServicesEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static T GetService(IPsiSourceFile resourceFile);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static T TryGetService(IPsiSourceFile resourceFile);
    [NotNullAttribute]
public static T GetService(ISolution solution, ProjectFileType projectFileType);
    [CanBeNullAttribute]
public static T TryGetService(ISolution solution, ProjectFileType projectFileType);
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.ReswProjectFileType", "16")]
internal class JetBrains.ReSharper.I18n.Services.Impl.ReswResourceModificationService : ResxResourceModificationServiceBase {
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.ResxProjectFileType", "16")]
internal class JetBrains.ReSharper.I18n.Services.Impl.ResxResourceModificationService : ResxResourceModificationServiceBase {
}
public abstract class JetBrains.ReSharper.I18n.Services.Impl.ResxResourceModificationServiceBase : object {
    public virtual void AddResourceItem(IPsiSourceFile resourceFile, string name, string value, string comment, IType type, bool inLexicalOrder);
    public sealed virtual void ChangeResourceItem(IResourceItem resourceItem, string newValue, string newComment);
    public sealed virtual void ChangeResourceItemName(IPsiSourceFile resourceFile, string oldName, string newName);
    public sealed virtual void DeleteResourceItem(IResourceItem resourceItem);
    public sealed virtual void DeleteResourceItem(IPsiSourceFile resourceFile, string name);
    public sealed virtual void MoveResourceItem(IResourceItem resourceItem, IPsiSourceFile targetResourceFile, string newName);
    public sealed virtual void CopyResourceItem(IResourceItem resourceItem, IPsiSourceFile targetResourceFile, string newName);
    private void CopyVirtualResourceItem(IVirtualIResourceItem resourceItem, IPsiSourceFile targetResourceFile, string newName);
    [CanBeNullAttribute]
private static IXmlTag ApplyTagChanges(IXmlTagContainer tagsContainer, IXmlTag oldTag, IXmlTag newTag, IXmlTag anchor);
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.I18n.Services.Impl.SolutionResourceCache : SimpleICache`1<ItemsByNameOrValue> {
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private Dictionary`2<ProjectFileType, IResourceProvider> myServices;
    [NotNullAttribute]
private OneToSetMap`2<IPsiModule, IPsiSourceFile> myResourcesPerModule;
    private static CompactOneToListMap`2<string, IResourceItem> ourEmptyNameToItems;
    private static CompactOneToListMap`2<int, IResourceItem> ourEmptyValueToItems;
    private IPsiModules myPsiModules;
    [CompilerGeneratedAttribute]
private ISignal`1<IPsiSourceFile> <FileUpdated>k__BackingField;
    public ISignal`1<IPsiSourceFile> FileUpdated { get; }
    public SolutionResourceCache(Lifetime lifetime, IShellLocks locks, ISolution solution, IProjectFileTypes projectFileTypes, IPsiModules psiModules, ChangeManager changeManager, IPersistentIndexManager persistentIndexManager);
    private static SolutionResourceCache();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IPsiSourceFile> get_FileUpdated();
    public virtual object Load(IProgressIndicator progress, bool enablePersistence);
    public virtual void MergeLoaded(object data);
    public virtual void Merge(IPsiSourceFile sourceFile, object builtPart);
    public virtual void Drop(IPsiSourceFile sourceFile);
    public sealed virtual object Execute(IChangeMap changeMap);
    protected virtual bool IsApplicable(IPsiSourceFile sourceFile);
    private sealed virtual override void JetBrains.ReSharper.Psi.Caches.IPsiSourceFileCache.OnPsiChange(ITreeNode elementContainingChanges, PsiChangedElementType type);
    [CanBeNullAttribute]
private IResourceProvider TryGetResourceProvider(IPsiSourceFile sourceFile);
    public virtual object Build(IPsiSourceFile sourceFile, bool isStartup);
    public sealed virtual bool TryGetMapItemsByName(IPsiSourceFile sourceFile, CompactOneToListMap`2& itemsByName);
    public sealed virtual bool TryGetMapItemsByHashValue(IPsiSourceFile sourceFile, CompactOneToListMap`2& itemsByHashValue);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.Impl.SolutionResourceCache/<GetResourcesInProject>d__21")]
[NotNullAttribute]
[ItemNotNullAttribute]
public sealed virtual IEnumerable`1<IPsiSourceFile> GetResourcesInProject(IProject project, Func`2<IPsiSourceFile, bool> predicate);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.Impl.SolutionResourceCache/<GetResourcesInSolution>d__22")]
public sealed virtual IEnumerable`1<IPsiSourceFile> GetResourcesInSolution();
    public sealed virtual IEnumerable`1<IPsiSourceFile> GetResourcesInReferencedProjects(IProject project, Func`2<IPsiSourceFile, bool> predicate);
    public sealed virtual bool HasResourcesInReferencedProjects(IProject project, Func`2<IPsiSourceFile, bool> predicate);
    public sealed virtual bool ContainsItems(IPsiSourceFile sourceFile);
    public sealed virtual bool ContainsItems(IPsiSourceFile sourceFile, string name);
    public sealed virtual ICollection`1<string> GetResourceItemNames(IPsiSourceFile sourceFile);
    public sealed virtual IEnumerable`1<IResourceItem> EnumerateResourceItems(IPsiSourceFile sourceFile);
    public sealed virtual IEnumerable`1<IResourceItem> EnumerateResourceItems(IPsiSourceFile sourceFile, string name);
}
public interface JetBrains.ReSharper.I18n.Services.IResourceChecker {
    public abstract virtual bool CanUseResource(IPsiSourceFile resourceFile, IAccessContext context);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public interface JetBrains.ReSharper.I18n.Services.IResourceExtractor {
    public byte Priority { get; }
    public abstract virtual byte get_Priority();
    public abstract virtual bool IsAvailable(IDataContext context);
    [CanBeNullAttribute]
public abstract virtual ISourceElement GetSourceElement(IDataContext dataContext);
    [CanBeNullAttribute]
public abstract virtual ISourceElement GetSourceElement(ITreeNode node);
    [CanBeNullAttribute]
public abstract virtual string GetDefaultResourceName(ISourceElement sourceElement);
    public abstract virtual bool CanExtractTo(ISourceElement sourceElement, IPsiSourceFile resourceFile);
    public abstract virtual bool Extract(ISourceElement sourceElement, IResourceItem resourceItem, IRefactoringDriver driver);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public interface JetBrains.ReSharper.I18n.Services.IResourceExtractorExtended {
    public abstract virtual bool CanExtractToAfterRefactoring(ISourceElement sourceElement, IPsiSourceFile resourceFile);
}
public interface JetBrains.ReSharper.I18n.Services.ISolutionResourceCacheNotifications {
    [NotNullAttribute]
public ISignal`1<IPsiSourceFile> FileUpdated { get; }
    public abstract virtual ISignal`1<IPsiSourceFile> get_FileUpdated();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IPsiSourceFile> GetResourcesInSolution();
}
public interface JetBrains.ReSharper.I18n.Services.ISourceElement {
    [NotNullAttribute]
public IPsiSourceFile SourceFile { get; }
    [NotNullAttribute]
public PsiLanguageType PsiLanguageType { get; }
    public DocumentRange DocumentRange { get; }
    [CanBeNullAttribute]
public object Value { get; }
    [NotNullAttribute]
public IType Type { get; }
    public abstract virtual IPsiSourceFile get_SourceFile();
    public abstract virtual PsiLanguageType get_PsiLanguageType();
    public abstract virtual DocumentRange get_DocumentRange();
    public abstract virtual object get_Value();
    public abstract virtual IType get_Type();
    public abstract virtual bool IsValid();
}
public enum JetBrains.ReSharper.I18n.Services.LocalizableInspector : Enum {
    public int value__;
    public static LocalizableInspector Optimistic;
    public static LocalizableInspector Pessimistic;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.I18n.Services.LocalizableInspectorProperty : object {
    [ExtensionAttribute]
public static LocalizableInspector GetLocalizableInspectorProperty(IProject project, ISettingsStore settingsStore);
    public static LocalizableInspector GetLocalizableInspectorProperty(IContextBoundSettingsStore settingsStore);
    [ExtensionAttribute]
public static void SetLocalizableInspectorProperty(IProject project, LocalizableInspector value);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.I18n.Services.LocalizableProperty : object {
    [ExtensionAttribute]
[PureAttribute]
public static Localizable GetLocalizableProperty(IProject project, ISettingsStore settingsStore);
    [PureAttribute]
public static Localizable GetLocalizableProperty(IContextBoundSettingsStore settingsStore);
    [ExtensionAttribute]
public static void SetLocalizableProperty(IProject project, Localizable value);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Resources.Settings.CodeEditingSettings", "JetBrains.ReSharper.I18n.Services.Resources.Strings", "LocalizationProjectSettingsSettingDescription")]
public class JetBrains.ReSharper.I18n.Services.LocalizationProjectSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.I18n.Services.Resources.Strings", "LocalizableInspectorSwitchSettingDescription")]
public Localizable Localizable;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.I18n.Services.Resources.Strings", "LocalizableInspectorStrategySettingDescription")]
public LocalizableInspector LocalizableInspector;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.I18n.Services.Resources.Strings", "LastResourceFileSettingDescription")]
public string LastResourceFile;
}
[ProjectSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.LocalizationProjectSettingsUpgrader : object {
    private IProject myProject;
    private ISettingsStore mySettingsStore;
    public LocalizationProjectSettingsUpgrader(IProject project, ISettingsStore settingsStore);
    private sealed virtual override void JetBrains.Application.Configuration.IXmlReadable.ReadFromXml(XmlElement element);
    private sealed virtual override void JetBrains.ProjectModel.Settings.Upgrade.IProjectSettingsUpgrader.Upgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
}
[SettingsKeyAttribute("JetBrains.ReSharper.I18n.Services.LocalizationProjectSettings", "JetBrains.ReSharper.I18n.Services.Resources.Strings", "MoveResourceRefactoringSettingsSettingDescription")]
public class JetBrains.ReSharper.I18n.Services.MoveResourceSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.I18n.Services.Resources.Strings", "LastUsedResourceFileSettingDescription")]
public string LastResourceFile;
}
[SettingsKeyAttribute("JetBrains.ReSharper.I18n.Services.LocalizationProjectSettings", "JetBrains.ReSharper.I18n.Services.Resources.Strings", "MoveToResourceRefactoringSettingsSettingDescription")]
public class JetBrains.ReSharper.I18n.Services.MoveToResourceSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.I18n.Services.Resources.Strings", "LastUsedResourceFileSettingDescription")]
public string LastResourceFile;
}
public interface JetBrains.ReSharper.I18n.Services.Navigation.IResourceItemNavigationProvider {
}
[ContextNavigationProviderAttribute("0")]
internal class JetBrains.ReSharper.I18n.Services.Navigation.NavigateToBaseResourceProvider : ResourcesHierarchyProviderBase`3<IBaseResourceContextSearch, SearchResourceBaseRequest, SearchResourceBasesDescriptor> {
    public NavigateToBaseResourceProvider(IFeaturePartsContainer manager);
    protected virtual SearchResourceBasesDescriptor CreateSearchDescriptor(SearchResourceBaseRequest searchRequest, ICollection`1<IOccurrence> results);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.Navigation.NavigateToBaseResourceProvider/<CreateWorkflow>d__2")]
public sealed virtual IEnumerable`1<ContextNavigation> CreateWorkflow(IDataContext dataContext);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.Navigation.ResourceItemDeclarationSearch : DefaultDeclarationSearch {
    protected virtual bool IsAvailableInternal(IDataContext dataContext);
    public virtual bool IsGotoDeclarationApplicable(IDeclaredElement declaredElement);
    protected virtual IEnumerable`1<DeclaredElementTypeUsageInfo> GetElementCandidates(IDataContext context, ReferencePreferenceKind kind, bool updateOnly);
    public virtual bool IsContextApplicable(IDataContext dataContext);
    protected virtual SearchDeclarationsRequest CreateSearchRequest(IDataContext dataContext, DeclaredElementTypeUsageInfo element, DeclaredElementTypeUsageInfo initialTarget);
    protected virtual SearchDeclarationsRequest GetDeclarationSearchRequest(DeclaredElementTypeUsageInfo elementInfo, Func`1<bool> checkCancelled);
}
public class JetBrains.ReSharper.I18n.Services.Navigation.ResourceItemDeclarationsSearchRequest : SearchDeclarationsRequest {
    public ResourceItemDeclarationsSearchRequest(DeclaredElementTypeUsageInfo declaredElementInfo);
    public virtual ICollection`1<IOccurrence> Search(IProgressIndicator progressIndicator);
}
public class JetBrains.ReSharper.I18n.Services.Navigation.ResourceItemOccurrence : object {
    [NotNullAttribute]
private IResourceItem myResourceItem;
    [CanBeNullAttribute]
private ProjectModelElementEnvoy myProjectModelElementEnvoy;
    private OccurrenceMergeContext myMergeContext;
    [CompilerGeneratedAttribute]
private OccurrencePresentationOptions <PresentationOptions>k__BackingField;
    public string Name { get; }
    public IPsiSourceFile SourceFile { get; }
    public OccurrencePresentationOptions PresentationOptions { get; public set; }
    public OccurrenceType OccurrenceType { get; }
    public bool IsValid { get; }
    public OccurrenceMergeContext MergeContext { get; }
    public IResourceItem ResourceItem { get; }
    public ResourceItemOccurrence(IResourceItem resourceItem);
    public string get_Name();
    public IPsiSourceFile get_SourceFile();
    [CompilerGeneratedAttribute]
public sealed virtual OccurrencePresentationOptions get_PresentationOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PresentationOptions(OccurrencePresentationOptions value);
    public sealed virtual ISolution GetSolution();
    public TextRange GetTextRange();
    public ProjectModelElementEnvoy GetProjectModelElementEnvoy();
    public DeclaredElementEnvoy`1<ITypeMember> GetTypeMember();
    public DeclaredElementEnvoy`1<ITypeElement> GetTypeElement();
    public DeclaredElementEnvoy`1<INamespace> GetNamespace();
    public sealed virtual OccurrenceType get_OccurrenceType();
    public sealed virtual bool get_IsValid();
    public OccurrenceMergeContext get_MergeContext();
    public IResourceItem get_ResourceItem();
    public sealed virtual bool Navigate(ISolution solution, PopupWindowContextSource windowContextSource, bool transferFocus, TabOptions tabOptions);
    public sealed virtual string DumpToString();
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.Navigation.ResourceItemOccurrenceInfoProvider : object {
    public sealed virtual IDeclaredElementEnvoy GetTypeMember(IOccurrence occurrence);
    public sealed virtual IDeclaredElementEnvoy GetTypeElement(IOccurrence occurrence);
    public sealed virtual IDeclaredElementEnvoy GetNamespace(IOccurrence occurrence);
    public sealed virtual OccurrenceMergeContext GetMergeContext(IOccurrence occurrence);
    public sealed virtual TextRange GetTextRange(IOccurrence occurrence);
    public sealed virtual ProjectModelElementEnvoy GetProjectModelElementEnvoy(IOccurrence occurrence);
    public sealed virtual SourceFilePtr GetSourceFilePtr(IOccurrence occurrence);
    public sealed virtual bool IsApplicable(IOccurrence occurrence);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.I18n.Services.Navigation.ResourceItemOccurrenceNavigationProvider : object {
    private FileSystemPathNavigator myNavigator;
    private ProjectFileExtensions myExtensions;
    private PsiProjectFileTypeCoordinator myFileTypeCoordinator;
    private IEditorManager myEditorManager;
    public ResourceItemOccurrenceNavigationProvider(FileSystemPathNavigator navigator, ProjectFileExtensions extensions, PsiProjectFileTypeCoordinator fileTypeCoordinator, IEditorManager editorManager);
    public virtual bool IsApplicable(ResourceItemOccurrence data);
    public virtual IEnumerable`1<INavigationPoint> CreateNavigationPoints(ResourceItemOccurrence target);
}
[OccurrencePresenterAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.Navigation.ResourceItemOccurrencePresenter : RangeOccurrencePresenter {
    public virtual bool IsApplicable(IOccurrence occurrence);
    public virtual bool Present(IMenuItemDescriptor descriptor, IOccurrence occurrence, OccurrencePresentationOptions occurrencePresentationOptions);
}
[SettingsKeyAttribute("JetBrains.ReSharper.I18n.Services.LocalizationProjectSettings", "JetBrains.ReSharper.I18n.Services.Resources.Strings", "LocalizationOptionsSettingDescription")]
public class JetBrains.ReSharper.I18n.Services.Options.LocalizationOptionsSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.I18n.Services.Resources.Strings", "ResourceEntryDefaultNameSettingDescription")]
public string ResourceNameTemplate;
}
[GlobalSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.Options.LocalizationOptionsUpgrader : SettingTablesUpgrader {
    public LocalizationOptionsUpgrader(ProductConfigurations productConfigurations);
    protected virtual void DoUpgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime, SettingsTableBase workspaceSettingsTable, SettingsTableBase globalSettingsTable);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.I18n.Services.ProjectUtil : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectFile AddExistenFile(IProject project, VirtualFileSystemPath filePath, IProjectModelTransactionCookie cookie);
}
[UsedImplicitlyAttribute]
internal class JetBrains.ReSharper.I18n.Services.PropertiesExtender.LocalizableInspectorTypeConverter : StringConverter {
    public static string Optimistic;
    public static string Pessimistic;
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.PropertiesExtender.LocalizableProjectPropertiesExtenderProvider : ProjectPropertiesExtenderProviderBase {
    public LocalizableProjectPropertiesExtenderProvider(Lifetime lifetime, IShellLocks locks, ISettingsStore settingsStore);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.PropertiesExtender.LocalizableProjectPropertiesExtenderProvider/<GetProjectPropertyDescriptors>d__1")]
protected virtual IEnumerable`1<PropertyDescriptor> GetProjectPropertyDescriptors(IProject project);
    [CompilerGeneratedAttribute]
private string <GetProjectPropertyDescriptors>b__1_0(IProject proj);
    [CompilerGeneratedAttribute]
private string <GetProjectPropertyDescriptors>b__1_2(IProject proj);
}
[UsedImplicitlyAttribute]
internal class JetBrains.ReSharper.I18n.Services.PropertiesExtender.LocalizableTypeConverter : StringConverter {
    public static string Default;
    public static string Yes;
    public static string No;
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public abstract class JetBrains.ReSharper.I18n.Services.PsiService : object {
    [NotNullAttribute]
public PsiLanguageType LanguageType { get; }
    public abstract virtual PsiLanguageType get_LanguageType();
    [NotNullAttribute]
public static PsiService GetInstance(PsiLanguageType psiLanguageType);
    [NotNullAttribute]
public static PsiService GetInstance(ITreeNode element);
    [CanBeNullAttribute]
public static PsiService TryGetInstance(PsiLanguageType psiLanguageType);
    [CanBeNullAttribute]
public abstract virtual IExpression GetArgumentValue(IArgument argument);
    public abstract virtual string GetRegionName(ITreeNode element);
    public abstract virtual ITreeNode GetEndRegion(ITreeNode element);
    [NotNullAttribute]
public abstract virtual IType GetExpressionCompileType(IExpression expression);
    [CanBeNullAttribute]
public abstract virtual IInvocationInfo GetInvocationInfoByArgument(IArgument argument);
    [CanBeNullAttribute]
public abstract virtual IReference GetInvokedReference(IInvocationInfo invocationInfo);
    [CanBeNullAttribute]
public abstract virtual IExpression GetOperandThroughParenthesis(IExpression expression);
    public abstract virtual ConstantValue GetStringLiteralConstantValue(IExpression expression);
    [CanBeNullAttribute]
public abstract virtual IExpression GetContainingParenthesizedExpression(IExpression expression);
    [CanBeNullAttribute]
public abstract virtual IArgument GetArgumentByValue(IExpression expression);
    [CanBeNullAttribute]
public abstract virtual IExpression GetAssignmentTarget(IExpression source);
    public abstract virtual void SetAttribute(IDeclaration declaration, object attribute);
}
public abstract class JetBrains.ReSharper.I18n.Services.QuckFixes.DisableProjectLocalizationActionProviderBase : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.QuckFixes.DisableProjectLocalizationActionProviderBase/<GetActions>d__0")]
public sealed virtual IEnumerable`1<IntentionAction> GetActions(IHighlighting highlighting, DocumentRange highlightingRange, IPsiSourceFile sourceFile, IAnchor configureAnchor);
    protected abstract virtual ITreeNode GetContext(IHighlighting highlighting);
}
public abstract class JetBrains.ReSharper.I18n.Services.Refactoring.DrivenWorkflowWithRollBackBase : DrivenRefactoringWorkflow2`1<IWorkflowExec> {
    protected List`1<Action`1<IProgressIndicator>> myRollBackActions;
    protected DrivenWorkflowWithRollBackBase(ISolution solution, string actionId);
    public virtual bool PreExecute(IProgressIndicator progressIndicator);
    public virtual void UnsuccessfulFinish(IProgressIndicator pi);
    protected virtual IWorkflowExec CreateUnsupportedHelper();
    protected virtual IWorkflowExec CreateHelper(IRefactoringLanguageService service);
    public bool RunCustomTool(IPsiSourceFile file, IProgressIndicator progressIndicator);
    private bool RunCustomToolWithoutRollBack(IPsiSourceFile file, Predicate`1<IPsiSourceFile> runCustomTool);
    public void AddTextDocumentRollBackAction(IPsiSourceFile sourceFile);
    [CompilerGeneratedAttribute]
private void <UnsuccessfulFinish>b__3_0(Action`1<IProgressIndicator> action, IProgressIndicator indicator);
}
public class JetBrains.ReSharper.I18n.Services.Refactoring.ExtractToResource.ElementsPresenter : OccurrenceBrowserPresenter {
    public ElementsPresenter(ISolution solution);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0(SameElementOccurrence value, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
}
public class JetBrains.ReSharper.I18n.Services.Refactoring.ExtractToResource.ElementsTreeViewController : TreeModelBrowserDescriptor {
    private TreeModel myTreeModel;
    private ElementsPresenter myPresenter;
    public TreeModel Model { get; }
    public StructuredPresenter`2<TreeModelNode, IPresentableItem> Presenter { get; }
    public ElementsTreeViewController(ISolution solution, TreeModel treeModel, ElementsPresenter presenter);
    public virtual TreeModel get_Model();
    public virtual StructuredPresenter`2<TreeModelNode, IPresentableItem> get_Presenter();
    public virtual bool Navigate(TreeModelNode node, PopupWindowContextSource windowContext, bool transferFocus, TabOptions options);
}
public abstract class JetBrains.ReSharper.I18n.Services.Refactoring.ExtractToResource.ExpressionToResourceExtractorBase`1 : object {
    protected ResourceAccessorFinder ResourceAccessorFinder;
    private IResourceChecker myResourceChecker;
    public byte Priority { get; }
    protected ExpressionToResourceExtractorBase`1(ResourceAccessorFinder resourceAccessorFinder, IResourceChecker resourceChecker);
    public abstract virtual byte get_Priority();
    public sealed virtual bool CanUseResource(IPsiSourceFile resourceFile, IAccessContext context);
    public virtual bool IsAvailable(IDataContext context);
    public virtual ISourceElement GetSourceElement(IDataContext dataContext);
    public virtual ISourceElement GetSourceElement(ITreeNode node);
    public virtual string GetDefaultResourceName(ISourceElement sourceElement);
    public virtual bool CanExtractTo(ISourceElement sourceElement, IPsiSourceFile resourceFile);
    public virtual bool Extract(ISourceElement sourceElement, IResourceItem resourceItem, IRefactoringDriver driver);
    protected IExpression GetConstantExpression(IDataContext context);
    protected virtual bool IsApplicable(IExpression expression);
    protected static bool InInstanceMemeberOfType(ITypeMemberDeclaration declaration, string clrName);
}
public class JetBrains.ReSharper.I18n.Services.Refactoring.ExtractToResource.MoveToResourceDrivenWorkflow : DrivenWorkflowWithRollBackBase {
    [CanBeNullAttribute]
private IRefactoringPage myFirstPage;
    [CompilerGeneratedAttribute]
private Arguments <Args>k__BackingField;
    [CompilerGeneratedAttribute]
private IResourceItem <ResourceItem>k__BackingField;
    public RefactoringActionGroup ActionGroup { get; }
    [NotNullAttribute]
public Arguments Args { get; }
    public IResourceItem ResourceItem { get; private set; }
    public string Title { get; }
    public IRefactoringPage FirstPendingRefactoringPage { get; }
    public bool MightModifyManyDocuments { get; }
    public HelpId HelpKeyword { get; }
    public bool RequiresSolutionTransaction { get; }
    public MoveToResourceDrivenWorkflow(ISolution solution, string actionId);
    public virtual RefactoringActionGroup get_ActionGroup();
    [CompilerGeneratedAttribute]
public Arguments get_Args();
    [CompilerGeneratedAttribute]
public IResourceItem get_ResourceItem();
    [CompilerGeneratedAttribute]
private void set_ResourceItem(IResourceItem value);
    public virtual string get_Title();
    public virtual IRefactoringPage get_FirstPendingRefactoringPage();
    public virtual bool get_MightModifyManyDocuments();
    public virtual HelpId get_HelpKeyword();
    public virtual bool get_RequiresSolutionTransaction();
    public virtual bool IsAvailable(IDataContext context);
    public virtual bool Initialize(IDataContext context);
    public virtual bool PreExecute(IProgressIndicator indicator);
    public virtual IRefactoringExecuter CreateRefactoring(IRefactoringDriver driver);
    private bool ModifyResourceFileWithPsiTransaction(IProgressIndicator addingProgress, IPsiSourceFile resourceFile, Action modifyAction);
    private IRefactoringPage FindAvailableResources(IProgressIndicator progressIndicator);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringsMruSettings", "JetBrains.ReSharper.I18n.Services.Resources.Strings", "MoveToResourceRefactoringSettingsSettingDescription")]
public class JetBrains.ReSharper.I18n.Services.Refactoring.ExtractToResource.MoveToResourceDrivenWorkflowSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.I18n.Services.Resources.Strings", "WhetherToMoveSimilarElementsSettingDescription")]
public bool MoveSameElements;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.I18n.Services.Resources.Strings", "ScopeForMovingSimilarElementsSettingDescription")]
public SameElementsScope MoveSameElementsScope;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.I18n.Services.Resources.Strings", "WhetherToShowNewResourceEntryWithLocalizationManagerSettingDescription")]
public bool EditWithLocalizationManager;
}
public class JetBrains.ReSharper.I18n.Services.Refactoring.ExtractToResource.MoveToResourceFirstPage : SingleBeRefactoringPage {
    public static string NewName;
    public static string SameScope;
    public static string Value;
    public static string Comment;
    public static string SearchSameStrings;
    public static string SelectedFile;
    public static string EditWithLocalizationManager;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private IconHostBase myIconHostBase;
    private Arguments myArguments;
    [NotNullAttribute]
private IProperty`1<string> myResourceNameViewModel;
    [NotNullAttribute]
private IProperty`1<SameElementsScope> myScopeValueViewModel;
    [NotNullAttribute]
private IProperty`1<string> myResourceValueViewModel;
    [NotNullAttribute]
private IProperty`1<string> myResourceCommentViewModel;
    [NotNullAttribute]
private IProperty`1<bool> myFindSameStringsViewModel;
    [NotNullAttribute]
private IProperty`1<bool> myEditWithLocalizationManager;
    [NotNullAttribute]
private IProperty`1<IPsiSourceFile> mySelectedFileViewModel;
    [NotNullAttribute]
private List`1<IPsiSourceFile> myFiles;
    [CompilerGeneratedAttribute]
private bool <FindSameStrings>k__BackingField;
    public bool FindSameStrings { get; public set; }
    public string Title { get; }
    public string Description { get; }
    public MoveToResourceFirstPage(Lifetime lifetime, ISolution solution, Arguments arguments, IconHostBase iconHostBase);
    [CompilerGeneratedAttribute]
public bool get_FindSameStrings();
    [CompilerGeneratedAttribute]
public void set_FindSameStrings(bool value);
    public virtual string get_Title();
    public virtual string get_Description();
    public virtual BeControl GetPageContent();
    public virtual bool RefreshContents(IProgressIndicator progressIndicator);
    public virtual IRefactoringPage Commit(IProgressIndicator progressIndicator);
    [CanBeNullAttribute]
private BeControl CreateUiForScope();
    private static IEnumerable`1<ISourceElement> FindSameElements(ISourceElement sourceElement, IPsiSourceFile resourceFile, ISearchDomain searchDomain, IProgressIndicator pi);
    [CanBeNullAttribute]
internal static string GetScopeText(SameElementsScope scope, ISourceElement sourceElement);
    private ISearchDomain CreateSearchDomain(SameElementsScope scope);
}
public class JetBrains.ReSharper.I18n.Services.Refactoring.ExtractToResource.MoveToResourceRefactoring : DrivenRefactoringBase`1<MoveToResourceDrivenWorkflow> {
    public MoveToResourceRefactoring(MoveToResourceDrivenWorkflow workFlow, ISolution solution, IRefactoringDriver driver);
    public virtual bool Execute(IProgressIndicator pi);
    private bool ExtractElement(ISourceElement element, IResourceItem resourceItem, IEnumerable`1<IResourceExtractor> extractors, ICollection`1& executedRefactorings);
}
[RefactoringWorkflowProviderAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.Refactoring.ExtractToResource.MoveToResourceWorkflowProvider : MoveWorkflowProvider {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.Refactoring.ExtractToResource.MoveToResourceWorkflowProvider/<CreateWorkflow>d__0")]
public virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
}
[GlobalSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.Refactoring.ExtractToResource.RefactoringsSettingsUpgrader : SettingTablesUpgrader {
    public RefactoringsSettingsUpgrader(ProductConfigurations productConfigurations);
    protected virtual void DoUpgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime, SettingsTableBase workspaceSettingsTable, SettingsTableBase globalSettingsTable);
}
public class JetBrains.ReSharper.I18n.Services.Refactoring.ExtractToResource.SameElementOccurrence : RangeOccurrence {
    [CompilerGeneratedAttribute]
private ISourceElement <SourceElement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Included>k__BackingField;
    [NotNullAttribute]
public ISourceElement SourceElement { get; }
    public bool Included { get; public set; }
    public SameElementOccurrence(ISourceElement element);
    [CompilerGeneratedAttribute]
public ISourceElement get_SourceElement();
    [CompilerGeneratedAttribute]
public bool get_Included();
    [CompilerGeneratedAttribute]
public void set_Included(bool value);
}
public enum JetBrains.ReSharper.I18n.Services.Refactoring.ExtractToResource.SameElementsScope : Enum {
    public int value__;
    public static SameElementsScope Type;
    public static SameElementsScope File;
    public static SameElementsScope Folder;
    public static SameElementsScope Project;
    public static SameElementsScope Solution;
}
public class JetBrains.ReSharper.I18n.Services.Refactoring.Inline.InlineResourceDrivenWorkflow : DrivenWorkflowWithRollBackBase {
    private Arguments myArgs;
    public RefactoringActionGroup ActionGroup { get; }
    public Arguments Args { get; }
    public string Title { get; }
    public bool MightModifyManyDocuments { get; }
    public IRefactoringPage FirstPendingRefactoringPage { get; }
    public HelpId HelpKeyword { get; }
    public bool RequiresSolutionTransaction { get; }
    public InlineResourceDrivenWorkflow(ISolution solution, string actionId);
    public virtual RefactoringActionGroup get_ActionGroup();
    public Arguments get_Args();
    public virtual string get_Title();
    public virtual bool get_MightModifyManyDocuments();
    public virtual IRefactoringPage get_FirstPendingRefactoringPage();
    public virtual HelpId get_HelpKeyword();
    public virtual bool get_RequiresSolutionTransaction();
    public virtual bool IsAvailable(IDataContext context);
    public virtual bool Initialize(IDataContext context);
    public virtual void SuccessfulFinish(IProgressIndicator pi);
    public virtual IRefactoringExecuter CreateRefactoring(IRefactoringDriver driver);
}
public class JetBrains.ReSharper.I18n.Services.Refactoring.Inline.InlineResourceFirstPage : SingleBeRefactoringPage {
    public static string InlineAllUsages;
    public static string RemoveDeclaration;
    [NotNullAttribute]
private Arguments myArguments;
    [NotNullAttribute]
private Property`1<bool> myInlineAllUsagesViewModel;
    [NotNullAttribute]
private Property`1<bool> myRemoveDeclarationViewModel;
    public string Title { get; }
    public string Description { get; }
    public InlineResourceFirstPage(Lifetime lifetime, Arguments arguments);
    public virtual string get_Title();
    public virtual string get_Description();
    public virtual bool RefreshContents(IProgressIndicator progressIndicator);
    public virtual IRefactoringPage Commit(IProgressIndicator progressIndicator);
    public virtual BeControl GetPageContent();
}
public class JetBrains.ReSharper.I18n.Services.Refactoring.Inline.InlineResourceRefactoring : DrivenRefactoringBase`1<InlineResourceDrivenWorkflow> {
    public InlineResourceRefactoring(InlineResourceDrivenWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    public virtual bool Execute(IProgressIndicator pi);
}
[RefactoringWorkflowProviderAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.Refactoring.Inline.InlineResourceValueWorkflowProvider : InlineWorkflowProvider {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.Refactoring.Inline.InlineResourceValueWorkflowProvider/<CreateWorkflow>d__0")]
public virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
    public sealed virtual bool HideOtherActions(IDataContext context);
}
public interface JetBrains.ReSharper.I18n.Services.Refactoring.Inline.IResourceInliner {
    public byte Priority { get; }
    public abstract virtual byte get_Priority();
    public abstract virtual bool CanInline(IResourceItemDeclaredElement element);
    public abstract virtual bool CanInline(IReference reference, IResourceItemDeclaredElement element);
    public abstract virtual bool CanInline(ITreeNode sourceElement, IResourceItemDeclaredElement element);
    public abstract virtual bool Inline(IReference reference, IResourceItemDeclaredElement element);
    public abstract virtual bool Inline(ITreeNode sourceElement, IResourceItemDeclaredElement element);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.Refactoring.Inline.ResourceInliner : object {
    private ISolution mySolution;
    public ResourceInliner(ISolution solution);
    public bool CanInline(IResourceItemDeclaredElement element);
    public bool CanInline(IReference reference, IResourceItemDeclaredElement element);
    public bool CanInline(ITreeNode sourceElement, IResourceItemDeclaredElement element);
    public bool Inline(IReference reference, IResourceItemDeclaredElement element);
    public bool Inline(ITreeNode sourceElement, IResourceItemDeclaredElement element);
}
public class JetBrains.ReSharper.I18n.Services.Refactoring.Move.MoveResourceDrivenWorkflow : DrivenWorkflowWithRollBackBase {
    [CanBeNullAttribute]
private IRefactoringPage myFirstPage;
    private Arguments myArgs;
    [CompilerGeneratedAttribute]
private HashSet`1<IPsiSourceFile> <SkippedCultures>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<IPsiSourceFile> <ChangedCultures>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IReferencePointer> <UsagesDirectly>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Tuple`2<IReferencePointer, ParametersOwnerSignature>> <UsagesByWrapper>k__BackingField;
    public RefactoringActionGroup ActionGroup { get; }
    public Arguments Args { get; }
    public string Title { get; }
    public bool MightModifyManyDocuments { get; }
    public IRefactoringPage FirstPendingRefactoringPage { get; }
    public HelpId HelpKeyword { get; }
    public HashSet`1<IPsiSourceFile> SkippedCultures { get; }
    public HashSet`1<IPsiSourceFile> ChangedCultures { get; }
    public List`1<IReferencePointer> UsagesDirectly { get; }
    public List`1<Tuple`2<IReferencePointer, ParametersOwnerSignature>> UsagesByWrapper { get; }
    public bool RequiresSolutionTransaction { get; }
    public MoveResourceDrivenWorkflow(ISolution solution, string actionId);
    public virtual RefactoringActionGroup get_ActionGroup();
    public Arguments get_Args();
    public virtual string get_Title();
    public virtual bool get_MightModifyManyDocuments();
    public virtual IRefactoringPage get_FirstPendingRefactoringPage();
    public virtual HelpId get_HelpKeyword();
    [CompilerGeneratedAttribute]
public HashSet`1<IPsiSourceFile> get_SkippedCultures();
    [CompilerGeneratedAttribute]
public HashSet`1<IPsiSourceFile> get_ChangedCultures();
    [CompilerGeneratedAttribute]
public List`1<IReferencePointer> get_UsagesDirectly();
    [CompilerGeneratedAttribute]
public List`1<Tuple`2<IReferencePointer, ParametersOwnerSignature>> get_UsagesByWrapper();
    public virtual bool get_RequiresSolutionTransaction();
    public virtual bool IsAvailable(IDataContext context);
    public virtual bool Initialize(IDataContext context);
    public virtual bool PreExecute(IProgressIndicator progressIndicator);
    public virtual IRefactoringExecuter CreateRefactoring(IRefactoringDriver driver);
    private IRefactoringPage FindAvailableResources(IProgressIndicator progressIndicator);
    [CompilerGeneratedAttribute]
private void <PreExecute>b__31_0(IReference reference);
}
public class JetBrains.ReSharper.I18n.Services.Refactoring.Move.MoveResourceFirstPage : SingleBeRefactoringPage {
    public static string NewName;
    public static string SelectedFile;
    [NotNullAttribute]
private Arguments myArguments;
    [NotNullAttribute]
private Property`1<string> myResourceItemNameViewModel;
    [NotNullAttribute]
private Property`1<IPsiSourceFile> mySelectedFileViewModel;
    [NotNullAttribute]
private List`1<IPsiSourceFile> myAllFiles;
    public string Title { get; }
    public string Description { get; }
    public MoveResourceFirstPage(Lifetime lifetime, Arguments arguments);
    public virtual string get_Title();
    public virtual string get_Description();
    public virtual IRefactoringPage Commit(IProgressIndicator progressIndicator);
    public virtual BeControl GetPageContent();
    public virtual bool RefreshContents(IProgressIndicator progressIndicator);
    [CompilerGeneratedAttribute]
private int <.ctor>g__GetSelectedIndex|6_2(<>c__DisplayClass6_0& );
}
public class JetBrains.ReSharper.I18n.Services.Refactoring.Move.MoveResourceRefactoring : DrivenRefactoringBase`1<MoveResourceDrivenWorkflow> {
    public MoveResourceRefactoring(MoveResourceDrivenWorkflow workFlow, ISolution solution, IRefactoringDriver driver);
    public virtual bool Execute(IProgressIndicator pi);
    private bool BindReferences(IEnumerable`1<IResourceItem> resourceItems);
}
[RefactoringWorkflowProviderAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.Refactoring.Move.MoveResourceWorkflowProvider : MoveWorkflowProvider {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.Refactoring.Move.MoveResourceWorkflowProvider/<CreateWorkflow>d__0")]
public virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
    public sealed virtual bool HideOtherActions(IDataContext context);
}
[ResourceRenameActionAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.Refactoring.Rename.CommonResourceRenameAction : object {
    [CompilerGeneratedAttribute]
private List`1<IReferencePointer> <UsagesDirectly>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Tuple`2<IReferencePointer, ParametersOwnerSignature>> <UsagesByWrapper>k__BackingField;
    public List`1<IReferencePointer> UsagesDirectly { get; private set; }
    public List`1<Tuple`2<IReferencePointer, ParametersOwnerSignature>> UsagesByWrapper { get; private set; }
    [CompilerGeneratedAttribute]
public List`1<IReferencePointer> get_UsagesDirectly();
    [CompilerGeneratedAttribute]
private void set_UsagesDirectly(List`1<IReferencePointer> value);
    [CompilerGeneratedAttribute]
public List`1<Tuple`2<IReferencePointer, ParametersOwnerSignature>> get_UsagesByWrapper();
    [CompilerGeneratedAttribute]
private void set_UsagesByWrapper(List`1<Tuple`2<IReferencePointer, ParametersOwnerSignature>> value);
    public sealed virtual bool IsAvailable(IDataContext context);
    public sealed virtual bool Initialize(IDataContext context, RenameResourceDrivenWorkflow workflow);
    public sealed virtual bool PreExecute(IProgressIndicator progressIndicator, RenameResourceDrivenWorkflow workflow);
    private IDeclaredElementPointer`1<IResourceItemDeclaredElement> FindResourceItemDeclaredElement(ICollection`1<IPsiSourceFile> resourceFiles, string name, bool lookInAllCultures);
    private static ICollection`1<IPsiSourceFile> GetAllResourceFiles(IResourceItemDeclaredElement resourceItemDeclaredElement);
    private void SetName(IPsiSourceFile file, string oldName, string newName);
    public sealed virtual bool Execute(IProgressIndicator progressIndicator, RenameResourceRefactoring refactoring);
}
public interface JetBrains.ReSharper.I18n.Services.Refactoring.Rename.IResourceRenameAction {
    public abstract virtual bool IsAvailable(IDataContext context);
    public abstract virtual bool Initialize(IDataContext context, RenameResourceDrivenWorkflow workflow);
    public abstract virtual bool PreExecute(IProgressIndicator progressIndicator, RenameResourceDrivenWorkflow workflow);
    public abstract virtual bool Execute(IProgressIndicator progressIndicator, RenameResourceRefactoring refactoring);
}
public class JetBrains.ReSharper.I18n.Services.Refactoring.Rename.ParametersOwnerSignature : object {
    private IList`1<Tuple`3<string, IType, ParameterKind>> myParameters;
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
private ISubstitution <IDSubstitution>k__BackingField;
    [CompilerGeneratedAttribute]
private IType <ReturnType>k__BackingField;
    private static IEqualityComparer`1<Tuple`3<string, IType, ParameterKind>> myParametersEqualityComparer;
    public string ShortName { get; }
    public ISubstitution IDSubstitution { get; }
    public IType ReturnType { get; private set; }
    public ICollection`1<Tuple`3<string, IType, ParameterKind>> Parameters { get; }
    private ParametersOwnerSignature(string shortName, ISubstitution idSubstitution);
    private static ParametersOwnerSignature();
    [CompilerGeneratedAttribute]
public string get_ShortName();
    [CompilerGeneratedAttribute]
public ISubstitution get_IDSubstitution();
    [CompilerGeneratedAttribute]
public IType get_ReturnType();
    [CompilerGeneratedAttribute]
private void set_ReturnType(IType value);
    public ICollection`1<Tuple`3<string, IType, ParameterKind>> get_Parameters();
    public static ParametersOwnerSignature Create(IParametersOwner parametersOwner, ISubstitution idSubstitution);
    public static bool CompareWithoutName(ParametersOwnerSignature x, ParametersOwnerSignature y);
}
public class JetBrains.ReSharper.I18n.Services.Refactoring.Rename.RenameResourceDrivenWorkflow : DrivenWorkflowWithRollBackBase {
    private Arguments myArgs;
    [CompilerGeneratedAttribute]
private IResourceRenameAction <ResourceRenameAction>k__BackingField;
    public RefactoringActionGroup ActionGroup { get; }
    public Arguments Args { get; }
    public string Title { get; }
    public IResourceRenameAction ResourceRenameAction { get; private set; }
    public bool MightModifyManyDocuments { get; }
    public IRefactoringPage FirstPendingRefactoringPage { get; }
    public HelpId HelpKeyword { get; }
    public bool RequiresSolutionTransaction { get; }
    public RenameResourceDrivenWorkflow(ISolution solution, string actionId);
    public virtual RefactoringActionGroup get_ActionGroup();
    public Arguments get_Args();
    public virtual string get_Title();
    [CompilerGeneratedAttribute]
public IResourceRenameAction get_ResourceRenameAction();
    [CompilerGeneratedAttribute]
private void set_ResourceRenameAction(IResourceRenameAction value);
    public virtual bool get_MightModifyManyDocuments();
    public virtual IRefactoringPage get_FirstPendingRefactoringPage();
    public virtual HelpId get_HelpKeyword();
    public virtual bool get_RequiresSolutionTransaction();
    public virtual IRefactoringExecuter CreateRefactoring(IRefactoringDriver driver);
    public virtual bool IsAvailable(IDataContext context);
    public virtual bool Initialize(IDataContext context);
    public virtual bool PreExecute(IProgressIndicator progressIndicator);
}
public class JetBrains.ReSharper.I18n.Services.Refactoring.Rename.RenameResourceFirstPage : SingleBeRefactoringPage {
    public static string NewName;
    [NotNullAttribute]
private Arguments myArguments;
    [NotNullAttribute]
private IProperty`1<string> myNameViewModel;
    public string Title { get; }
    public string Description { get; }
    public RenameResourceFirstPage(Lifetime lifetime, Arguments arguments);
    public virtual string get_Title();
    public virtual string get_Description();
    public virtual bool RefreshContents(IProgressIndicator progressIndicator);
    public virtual IRefactoringPage Commit(IProgressIndicator progressIndicator);
    public virtual BeControl GetPageContent();
}
public class JetBrains.ReSharper.I18n.Services.Refactoring.Rename.RenameResourceRefactoring : DrivenRefactoringBase`1<RenameResourceDrivenWorkflow> {
    public RenameResourceRefactoring(RenameResourceDrivenWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    public virtual bool Execute(IProgressIndicator pi);
}
[RefactoringWorkflowProviderAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.Refactoring.Rename.RenameResourceWorkflowProvider : RenameWorkflowProvider {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.Refactoring.Rename.RenameResourceWorkflowProvider/<CreateWorkflow>d__0")]
public virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
    public sealed virtual bool HideOtherActions(IDataContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Resx.ResxLanguage", "16")]
public class JetBrains.ReSharper.I18n.Services.Refactoring.Rename.ResourceItemRenameHelper : RenameHelperBase {
    public bool IsLanguageSupported { get; }
    public virtual bool get_IsLanguageSupported();
    public virtual void AdditionalReferenceProcessing(IDeclaredElement newTarget, IReference reference, ICollection`1<IReference> newReferences);
    public virtual IReference TransformProjectedInitializer(IReference reference);
    public virtual SuspiciousReferencesSearchProcessor CreateSuspiciousReferenceSearchProcessor(ITreeNode root, SuspiciousReferenceSearchContext context);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.Refactoring.Rename.ResourceItemRenamesFactory : AtomicRenamesFactory {
    public virtual bool IsApplicable(IDeclaredElement declaredElement);
    public virtual RenameAvailabilityCheckResult CheckRenameAvailability(IDeclaredElement declaredElement);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.Refactoring.Rename.ResourceRenameAction : object {
    private IEnumerable`1<IResourceRenameAction> myRenameActions;
    public ResourceRenameAction(IEnumerable`1<IResourceRenameAction> renameActions);
    [CanBeNullAttribute]
public IResourceRenameAction GetAction(IDataContext context);
}
[BaseTypeRequiredAttribute("JetBrains.ReSharper.I18n.Services.Refactoring.Rename.IResourceRenameAction")]
public class JetBrains.ReSharper.I18n.Services.Refactoring.Rename.ResourceRenameActionAttribute : SolutionComponentAttribute {
    public ResourceRenameActionAttribute(Instantiation instantiation);
}
[RefactoringWorkflowProviderAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.Refactoring.ResourceElementsChangeSignatureWorkflowProvider : object {
    public sealed virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
    public sealed virtual bool HideOtherActions(IDataContext context);
}
[RefactoringWorkflowProviderAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.Refactoring.ResourceExtractSuperclassWorkflowProvider : object {
    public sealed virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
    public sealed virtual bool HideOtherActions(IDataContext context);
}
public static class JetBrains.ReSharper.I18n.Services.Refactoring.ResourceFileSettingsUtil : object {
    [CanBeNullAttribute]
public static IPsiSourceFile GetLastSelectedFile(Expression`1<Func`2<T, string>> expression, IPsiSourceFile sourceFile);
    public static void SetLastSelectedFile(Expression`1<Func`2<T, string>> expression, IProject project, IPsiSourceFile priSourceFile);
}
public abstract class JetBrains.ReSharper.I18n.Services.Refactoring.ResourceToExpressionInlinerBase`1 : object {
    public byte Priority { get; }
    protected PsiLanguageType PsiLanguageType { get; }
    public abstract virtual byte get_Priority();
    protected abstract virtual PsiLanguageType get_PsiLanguageType();
    public virtual bool CanInline(IResourceItemDeclaredElement element);
    public virtual bool CanInline(IReference reference, IResourceItemDeclaredElement element);
    public virtual bool CanInline(ITreeNode sourceElement, IResourceItemDeclaredElement element);
    public virtual bool Inline(IReference reference, IResourceItemDeclaredElement element);
    public virtual bool Inline(ITreeNode sourceElement, IResourceItemDeclaredElement element);
    [CanBeNullAttribute]
protected abstract virtual T CreateExpression(ConstantValue value, IPsiModule module);
    protected abstract virtual ITreeNode GetElementToInline(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Resx.ResxLanguage", "16")]
public class JetBrains.ReSharper.I18n.Services.Refactoring.SafeDelete.ResxSafeDeleteFolderHelper : SafeDeleteFolderLanguageSpecific {
    public bool IsLanguageSupported { get; }
    public virtual bool get_IsLanguageSupported();
    public virtual IList`1<IDeclaredElement> GetExternalDeclaredElements(IFile file);
}
public class JetBrains.ReSharper.I18n.Services.Refactoring.SafeDelete.SafeDeleteResourceDrivenWorkflow : DrivenWorkflowWithRollBackBase {
    private Arguments myArgs;
    [CompilerGeneratedAttribute]
private ICollection`1<IReferencePointer> <AllUsages>k__BackingField;
    public RefactoringActionGroup ActionGroup { get; }
    public Arguments Args { get; }
    public string Title { get; }
    public bool MightModifyManyDocuments { get; }
    public IRefactoringPage FirstPendingRefactoringPage { get; }
    public HelpId HelpKeyword { get; }
    public ICollection`1<IReferencePointer> AllUsages { get; }
    public bool RequiresSolutionTransaction { get; }
    public SafeDeleteResourceDrivenWorkflow(ISolution solution, string actionId);
    public virtual RefactoringActionGroup get_ActionGroup();
    public Arguments get_Args();
    public virtual string get_Title();
    public virtual bool get_MightModifyManyDocuments();
    public virtual IRefactoringPage get_FirstPendingRefactoringPage();
    public virtual HelpId get_HelpKeyword();
    [CompilerGeneratedAttribute]
public ICollection`1<IReferencePointer> get_AllUsages();
    public virtual bool get_RequiresSolutionTransaction();
    public virtual bool IsAvailable(IDataContext context);
    public virtual bool Initialize(IDataContext context);
    public virtual void SuccessfulFinish(IProgressIndicator pi);
    public virtual IRefactoringExecuter CreateRefactoring(IRefactoringDriver driver);
}
public class JetBrains.ReSharper.I18n.Services.Refactoring.SafeDelete.SafeDeleteResourceRefactoring : DrivenRefactoringBase`1<SafeDeleteResourceDrivenWorkflow> {
    public SafeDeleteResourceRefactoring(SafeDeleteResourceDrivenWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    public virtual bool Execute(IProgressIndicator pi);
    private static void RemoveResourceItems(IPsiSourceFile resourceFile, string name);
    private static ICollection`1<IPsiSourceFile> GetAllResourceFiles(IResourceItemDeclaredElement resourceItemDeclaredElement);
}
[RefactoringWorkflowProviderAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.Refactoring.SafeDelete.SafeDeleteResourceWorkflowProvider : SafeDeleteWorkflowProvider {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.Refactoring.SafeDelete.SafeDeleteResourceWorkflowProvider/<CreateWorkflow>d__0")]
public virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
    public sealed virtual bool HideOtherActions(IDataContext context);
}
public class JetBrains.ReSharper.I18n.Services.Refactoring.UnavailableRefactoringPage : SingleBeRefactoringPage {
    [NotNullAttribute]
private string myReason;
    [NotNullAttribute]
private IconHostBase myIconHost;
    public string Title { get; }
    public string Description { get; }
    public string PageDescription { get; }
    public UnavailableRefactoringPage(Lifetime lifetime, string reason, IconHostBase iconHost);
    public virtual string get_Title();
    public virtual string get_Description();
    public virtual string get_PageDescription();
    public virtual BeControl GetPageContent();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.Refactoring.WorkflowRefactoringInitializeProgressIndicatorProvider : object {
    [NotNullAttribute]
public IProgressIndicator Create();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.I18n.Services.Refactoring.ZoneMarker : object {
}
public class JetBrains.ReSharper.I18n.Services.Resolve.I18nResolveErrorType : ResolveErrorType {
    public static I18nResolveErrorType PROPERTY_NOT_RESOLVED;
    public static I18nResolveErrorType PUBLIC_PROPERTY_NOT_RESOLVED;
    protected I18nResolveErrorType(string name);
    private static I18nResolveErrorType();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.I18n.Services.ResourceAccessibleUtil : object {
    [ExtensionAttribute]
public static bool IsAccessible(ResourceAccessorFinder finder, IPsiSourceFile resourceFile, IAccessContext context);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.I18n.Services.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string AddNewActionText { get; }
    public static string AddNewCultureActionText { get; }
    public static string CheckedGroupsSettingDescription { get; }
    public static string ChooseCulturesActionText { get; }
    public static string ClearSelectionActionText { get; }
    public static string CopyActionText { get; }
    public static string CreateMissingFileActionText { get; }
    public static string DisabledLanguagesSettingDescription { get; }
    public static string EditWithTextEditorActionText { get; }
    public static string ExportToCSVActionText { get; }
    public static string GroupingNameSettingDescription { get; }
    public static string ImportFromCSVActionText { get; }
    public static string InitializedSettingDescription { get; }
    public static string InlineActionText { get; }
    public static string LastResourceFileSettingDescription { get; }
    public static string LastUsedResourceFileSettingDescription { get; }
    public static string LocalizableInspectorStrategySettingDescription { get; }
    public static string LocalizableInspectorSwitchSettingDescription { get; }
    public static string LocalizationManagerPersonalSolutionSettingsSettingDescription { get; }
    public static string LocalizationOptionPageTitle { get; }
    public static string LocalizationOptionsSettingDescription { get; }
    public static string LocalizationProjectSettingsSettingDescription { get; }
    public static string MoveActionText { get; }
    public static string MoveResourceRefactoringSettingsSettingDescription { get; }
    public static string MoveToResourceRefactoringSettingsSettingDescription { get; }
    public static string OpenActionText { get; }
    public static string OpenAllFilesWithChangesForEditingToEnableUndoActionText { get; }
    public static string OrderByFullPathSettingDescription { get; }
    public static string OrderByResourceFileKeyActionText { get; }
    public static string PasteActionText { get; }
    public static string RenameActionText { get; }
    public static string RenamingResource_Text { get; }
    public static string ResourceEntryDefaultNameSettingDescription { get; }
    public static string ResourceValueActionText { get; }
    public static string ResxEditorActionGroupText { get; }
    public static string SafeDeleteActionText { get; }
    public static string ScopeForMovingSimilarElementsSettingDescription { get; }
    public static string ShowCommentsActionText { get; }
    public static string ShowCommentsSettingDescription { get; }
    public static string ShowOnlyLocalizableStringResourcesActionText { get; }
    public static string ShowOnlyProblemsActionText { get; }
    public static string ShowOnlyProblemsSettingDescription { get; }
    public static string ShowOnlyStringResourcesSettingDescription { get; }
    public static string WhetherToMoveSimilarElementsSettingDescription { get; }
    public static string WhetherToShowNewResourceEntryWithLocalizationManagerSettingDescription { get; }
    public static string ResourceName_template_StringOption_Text { get; }
    public static string TypeNameNameOfTheContainingType_Text_Text { get; }
    public static string MemberNameNameOfTheContainingMember_Text_Text { get; }
    public static string ValueValue_Text_Text { get; }
    public static string File_path_Label_Text { get; }
    public static string CommaSeparatedValues_Files_Filter_Text { get; }
    public static string CannotApplyRefactoringToInvalidElement_Text { get; }
    public static string InitializingRefactoring_Text { get; }
    public static string SearchingForResourceUsages_Text { get; }
    public static string ProcessingReferences_Text { get; }
    public static string ReNameResource_Text { get; }
    public static string ErrorWhileModifyingTheResourceFile_Text { get; }
    public static string RunningCustomTools_Text { get; }
    public static string CannotFindResourceEntry_Text { get; }
    public static string RenamingDeclarations_Text { get; }
    public static string SearchingForIdenticalItems_Text { get; }
    public static string IdenticalItemsFound_Text { get; }
    public static string SelectIdenticalItemsThatShouldBeReplaced_Text { get; }
    public static string Find_identicalItemsIn_Text { get; }
    public static string ScanningFile__Text { get; }
    public static string ScanningAnElement_Text { get; }
    public static string ChooseResourceFileAndName_Text { get; }
    public static string SpecifyANameForTheNewResourceEntryAnd_Text { get; }
    public static string Na_me_Text { get; }
    public static string Re_sourceFile_Text { get; }
    public static string _Value_Text { get; }
    public static string _Comment_Text { get; }
    public static string ShowTheNewResourceEntryIn_Localization_Text { get; }
    public static string OnlyLocalizableStringResourcesWillBeImported_Text { get; }
    public static string ReadingCSV_Text { get; }
    public static string CanTParseInputData_Text { get; }
    public static string ImportingResourceItems_Text { get; }
    public static string ImportingResourceItem_Of__Text { get; }
    public static string ChooseFilePathAndSpecifyImportOptions_Text { get; }
    public static string _IgnoreEmptyValues_Text { get; }
    public static string Separator_Text { get; }
    public static string Separator_Comma_Text { get; }
    public static string Separator_Semicolon_Text { get; }
    public static string Separator_Tab_Text { get; }
    public static string ImportFromCSV_Text { get; }
    public static string SelectResource_Text { get; }
    public static string ThereAreNoResources_Text { get; }
    public static string In__Text { get; }
    public static string ResourceImpLementation_Caption { get; }
    public static string DeriVedResources_Caption { get; }
    public static string BaseResourceSymbols_Caption { get; }
    public static string ResourceItemNavigation_Caption { get; }
    public static string DisableLocalizationForThisProject_Text { get; }
    public static string RollingBackChanges_Text { get; }
    public static string ErrorWhileRollingBackRefactoringChanges_Text { get; }
    public static string IdenticalStringsFound_Text { get; }
    public static string MoveToResource_Text { get; }
    public static string CanTApplyRefactoringToInvalidElement_Text { get; }
    public static string CanTApplyRefactoringToThisElement_Text { get; }
    public static string InvalidTargetResourceFile_Text { get; }
    public static string ResourceFileAlreadyContainsAnItemWith_Text { get; }
    public static string ReplacingExistingItem_Text { get; }
    public static string AddingNewItem_Text { get; }
    public static string RunningCustomTool_Text { get; }
    public static string CanTAddItemToResourceFile_Text { get; }
    public static string ModifyingResourceFile_Text { get; }
    public static string Processing__Text { get; }
    public static string ChooseFilePathAndSpecifyExportOptions_Text { get; }
    public static string Apply_filters_Text { get; }
    public static string Export_comments_Text { get; }
    public static string OnlyLocalizableStringResourcesWillBeExported_Text { get; }
    public static string RunCustomToolFor__Text { get; }
    public static string ExportToCSV_Text { get; }
    public static string ExportingResourceItem_Of__Text { get; }
    public static string ExportingResourceItemsToCSV_Text { get; }
    public static string _U2022Missing_Text { get; }
    public static string _U2022_Text { get; }
    public static string Default_Text { get; }
    public static string LocalizationManagerChooseCultures_Caption { get; }
    public static string SelectAll_Text { get; }
    public static string ClearSelection_Text { get; }
    public static string InvertSelection_Text { get; }
    public static string Name_Text { get; }
    public static string _CultureOfResource__Text { get; }
    public static string ValueFor_IsMissing_Text { get; }
    public static string ValueFor_HasBeenRemovedByUser_Text { get; }
    public static string ValueFor_IsEmptyOrConsistsOnlyOfWhite_Text { get; }
    public static string ValueFor_IsIdenticalToDefaultValue_Text { get; }
    public static string TheResource_AppearsToBeUnused_Text { get; }
    public static string MoveResource_Text { get; }
    public static string InvalidResourceFile_Text { get; }
    public static string MovingResourceItemsToTargetFile_Text { get; }
    public static string ErrorWhileInitializing_Text { get; }
    public static string PleaseFixErrorsAndRunTheRefactoring_Text { get; }
    public static string ErrorWhileInitializingMakeSureThatThere_Text { get; }
    public static string ThisProjectDoesNotContainAnAvailable_Text { get; }
    public static string EditWithVisualStudioResourceEditor_Text { get; }
    public static string AddNewResource_Caption { get; }
    public static string ResourceFileGroup_Text { get; }
    public static string ResourceNameShouldBeNonEmpty_Text { get; }
    public static string CultureTagShouldBeIETFCompliant_Text { get; }
    public static string CultureAlreadyExists_Text { get; }
    public static string CultureTagShouldBeNonEmpty_Text { get; }
    public static string CultureTag_Text { get; }
    public static string SaFeDeleteResource_Text { get; }
    public static string CannotFindResourceItem_Text { get; }
    public static string SearchingForResourceItemUsages_Text { get; }
    public static string RemovingResourceItems_Text { get; }
    public static string EnterResourceName_Text { get; }
    public static string SpecifyANewNameForTheResource_Text { get; }
    public static string DeclaredElementIsInvalid_Text { get; }
    public static string ResourceItemWithThisNameAlreadyExists_Text { get; }
    public static string ResourceFile_ContainsSeveralItemsWith_Text { get; }
    public static string CannotFindResourceFileForThe_Culture_Text { get; }
    public static string ChooseDestinationResource_Text { get; }
    public static string SelectADestinationResourceFileAndOptionally_Text { get; }
    public static string NewN_ame_Text { get; }
    public static string Resource_file_Text { get; }
    public static string InliningUsages_Text { get; }
    public static string Inline_allUsages_Text { get; }
    public static string _RemoveDeclarationOfInlinedResource_Text { get; }
    public static string SelectOptions_Text { get; }
    public static string SpecifyOptionsForInliningResourceValue_Text { get; }
    public static string InLineResource_Text { get; }
    public static string File__Text { get; }
    public static string Folder__Text { get; }
    public static string Project__Text { get; }
    public static string Solution__Text { get; }
    public static string AmbiguousResourceItemmatchMessage { get; }
    public static string CannotResolveProperty { get; }
    public static string CannotResolveProperty3 { get; }
    public static string CannotResolveResource { get; }
    public static string CannotResolveResource1 { get; }
    public static string CannotResolveResourceItem { get; }
    public static string CannotResolveResourceItem2 { get; }
    public static string CannotResolveResourceItemMessage { get; }
    public static string CannotResolveResourceMessage { get; }
    public static string OnlyNamesOfPropertiesAreAllowedHereMessage { get; }
    public static string OnlyNamesOfPublicPropertiesAreAllowedHereMessage { get; }
    public static string CannotMove0ElementToResource_Text { get; }
    public static string LocalizableDisplayName_Text { get; }
    public static string LocalizableDescription_Text { get; }
    public static string LocalizableInspectorDisplayName_Text { get; }
    public static string LocalizableInspectorDescription_Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_AddNewActionText();
    public static string get_AddNewCultureActionText();
    public static string get_CheckedGroupsSettingDescription();
    public static string get_ChooseCulturesActionText();
    public static string get_ClearSelectionActionText();
    public static string get_CopyActionText();
    public static string get_CreateMissingFileActionText();
    public static string get_DisabledLanguagesSettingDescription();
    public static string get_EditWithTextEditorActionText();
    public static string get_ExportToCSVActionText();
    public static string get_GroupingNameSettingDescription();
    public static string get_ImportFromCSVActionText();
    public static string get_InitializedSettingDescription();
    public static string get_InlineActionText();
    public static string get_LastResourceFileSettingDescription();
    public static string get_LastUsedResourceFileSettingDescription();
    public static string get_LocalizableInspectorStrategySettingDescription();
    public static string get_LocalizableInspectorSwitchSettingDescription();
    public static string get_LocalizationManagerPersonalSolutionSettingsSettingDescription();
    public static string get_LocalizationOptionPageTitle();
    public static string get_LocalizationOptionsSettingDescription();
    public static string get_LocalizationProjectSettingsSettingDescription();
    public static string get_MoveActionText();
    public static string get_MoveResourceRefactoringSettingsSettingDescription();
    public static string get_MoveToResourceRefactoringSettingsSettingDescription();
    public static string get_OpenActionText();
    public static string get_OpenAllFilesWithChangesForEditingToEnableUndoActionText();
    public static string get_OrderByFullPathSettingDescription();
    public static string get_OrderByResourceFileKeyActionText();
    public static string get_PasteActionText();
    public static string get_RenameActionText();
    public static string get_RenamingResource_Text();
    public static string get_ResourceEntryDefaultNameSettingDescription();
    public static string get_ResourceValueActionText();
    public static string get_ResxEditorActionGroupText();
    public static string get_SafeDeleteActionText();
    public static string get_ScopeForMovingSimilarElementsSettingDescription();
    public static string get_ShowCommentsActionText();
    public static string get_ShowCommentsSettingDescription();
    public static string get_ShowOnlyLocalizableStringResourcesActionText();
    public static string get_ShowOnlyProblemsActionText();
    public static string get_ShowOnlyProblemsSettingDescription();
    public static string get_ShowOnlyStringResourcesSettingDescription();
    public static string get_WhetherToMoveSimilarElementsSettingDescription();
    public static string get_WhetherToShowNewResourceEntryWithLocalizationManagerSettingDescription();
    public static string get_ResourceName_template_StringOption_Text();
    public static string get_TypeNameNameOfTheContainingType_Text_Text();
    public static string get_MemberNameNameOfTheContainingMember_Text_Text();
    public static string get_ValueValue_Text_Text();
    public static string get_File_path_Label_Text();
    public static string get_CommaSeparatedValues_Files_Filter_Text();
    public static string get_CannotApplyRefactoringToInvalidElement_Text();
    public static string get_InitializingRefactoring_Text();
    public static string get_SearchingForResourceUsages_Text();
    public static string get_ProcessingReferences_Text();
    public static string get_ReNameResource_Text();
    public static string get_ErrorWhileModifyingTheResourceFile_Text();
    public static string get_RunningCustomTools_Text();
    public static string get_CannotFindResourceEntry_Text();
    public static string get_RenamingDeclarations_Text();
    public static string get_SearchingForIdenticalItems_Text();
    public static string get_IdenticalItemsFound_Text();
    public static string get_SelectIdenticalItemsThatShouldBeReplaced_Text();
    public static string get_Find_identicalItemsIn_Text();
    public static string get_ScanningFile__Text();
    public static string get_ScanningAnElement_Text();
    public static string get_ChooseResourceFileAndName_Text();
    public static string get_SpecifyANameForTheNewResourceEntryAnd_Text();
    public static string get_Na_me_Text();
    public static string get_Re_sourceFile_Text();
    public static string get__Value_Text();
    public static string get__Comment_Text();
    public static string get_ShowTheNewResourceEntryIn_Localization_Text();
    public static string get_OnlyLocalizableStringResourcesWillBeImported_Text();
    public static string get_ReadingCSV_Text();
    public static string get_CanTParseInputData_Text();
    public static string get_ImportingResourceItems_Text();
    public static string get_ImportingResourceItem_Of__Text();
    public static string get_ChooseFilePathAndSpecifyImportOptions_Text();
    public static string get__IgnoreEmptyValues_Text();
    public static string get_Separator_Text();
    public static string get_Separator_Comma_Text();
    public static string get_Separator_Semicolon_Text();
    public static string get_Separator_Tab_Text();
    public static string get_ImportFromCSV_Text();
    public static string get_SelectResource_Text();
    public static string get_ThereAreNoResources_Text();
    public static string get_In__Text();
    public static string get_ResourceImpLementation_Caption();
    public static string get_DeriVedResources_Caption();
    public static string get_BaseResourceSymbols_Caption();
    public static string get_ResourceItemNavigation_Caption();
    public static string get_DisableLocalizationForThisProject_Text();
    public static string get_RollingBackChanges_Text();
    public static string get_ErrorWhileRollingBackRefactoringChanges_Text();
    public static string get_IdenticalStringsFound_Text();
    public static string get_MoveToResource_Text();
    public static string get_CanTApplyRefactoringToInvalidElement_Text();
    public static string get_CanTApplyRefactoringToThisElement_Text();
    public static string get_InvalidTargetResourceFile_Text();
    public static string get_ResourceFileAlreadyContainsAnItemWith_Text();
    public static string get_ReplacingExistingItem_Text();
    public static string get_AddingNewItem_Text();
    public static string get_RunningCustomTool_Text();
    public static string get_CanTAddItemToResourceFile_Text();
    public static string get_ModifyingResourceFile_Text();
    public static string get_Processing__Text();
    public static string get_ChooseFilePathAndSpecifyExportOptions_Text();
    public static string get_Apply_filters_Text();
    public static string get_Export_comments_Text();
    public static string get_OnlyLocalizableStringResourcesWillBeExported_Text();
    public static string get_RunCustomToolFor__Text();
    public static string get_ExportToCSV_Text();
    public static string get_ExportingResourceItem_Of__Text();
    public static string get_ExportingResourceItemsToCSV_Text();
    public static string get__U2022Missing_Text();
    public static string get__U2022_Text();
    public static string get_Default_Text();
    public static string get_LocalizationManagerChooseCultures_Caption();
    public static string get_SelectAll_Text();
    public static string get_ClearSelection_Text();
    public static string get_InvertSelection_Text();
    public static string get_Name_Text();
    public static string get__CultureOfResource__Text();
    public static string get_ValueFor_IsMissing_Text();
    public static string get_ValueFor_HasBeenRemovedByUser_Text();
    public static string get_ValueFor_IsEmptyOrConsistsOnlyOfWhite_Text();
    public static string get_ValueFor_IsIdenticalToDefaultValue_Text();
    public static string get_TheResource_AppearsToBeUnused_Text();
    public static string get_MoveResource_Text();
    public static string get_InvalidResourceFile_Text();
    public static string get_MovingResourceItemsToTargetFile_Text();
    public static string get_ErrorWhileInitializing_Text();
    public static string get_PleaseFixErrorsAndRunTheRefactoring_Text();
    public static string get_ErrorWhileInitializingMakeSureThatThere_Text();
    public static string get_ThisProjectDoesNotContainAnAvailable_Text();
    public static string get_EditWithVisualStudioResourceEditor_Text();
    public static string get_AddNewResource_Caption();
    public static string get_ResourceFileGroup_Text();
    public static string get_ResourceNameShouldBeNonEmpty_Text();
    public static string get_CultureTagShouldBeIETFCompliant_Text();
    public static string get_CultureAlreadyExists_Text();
    public static string get_CultureTagShouldBeNonEmpty_Text();
    public static string get_CultureTag_Text();
    public static string get_SaFeDeleteResource_Text();
    public static string get_CannotFindResourceItem_Text();
    public static string get_SearchingForResourceItemUsages_Text();
    public static string get_RemovingResourceItems_Text();
    public static string get_EnterResourceName_Text();
    public static string get_SpecifyANewNameForTheResource_Text();
    public static string get_DeclaredElementIsInvalid_Text();
    public static string get_ResourceItemWithThisNameAlreadyExists_Text();
    public static string get_ResourceFile_ContainsSeveralItemsWith_Text();
    public static string get_CannotFindResourceFileForThe_Culture_Text();
    public static string get_ChooseDestinationResource_Text();
    public static string get_SelectADestinationResourceFileAndOptionally_Text();
    public static string get_NewN_ame_Text();
    public static string get_Resource_file_Text();
    public static string get_InliningUsages_Text();
    public static string get_Inline_allUsages_Text();
    public static string get__RemoveDeclarationOfInlinedResource_Text();
    public static string get_SelectOptions_Text();
    public static string get_SpecifyOptionsForInliningResourceValue_Text();
    public static string get_InLineResource_Text();
    public static string get_File__Text();
    public static string get_Folder__Text();
    public static string get_Project__Text();
    public static string get_Solution__Text();
    public static string get_AmbiguousResourceItemmatchMessage();
    public static string get_CannotResolveProperty();
    public static string get_CannotResolveProperty3();
    public static string get_CannotResolveResource();
    public static string get_CannotResolveResource1();
    public static string get_CannotResolveResourceItem();
    public static string get_CannotResolveResourceItem2();
    public static string get_CannotResolveResourceItemMessage();
    public static string get_CannotResolveResourceMessage();
    public static string get_OnlyNamesOfPropertiesAreAllowedHereMessage();
    public static string get_OnlyNamesOfPublicPropertiesAreAllowedHereMessage();
    public static string get_CannotMove0ElementToResource_Text();
    public static string get_LocalizableDisplayName_Text();
    public static string get_LocalizableDescription_Text();
    public static string get_LocalizableInspectorDisplayName_Text();
    public static string get_LocalizableInspectorDescription_Text();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.I18n.Services.ResourcesHelper : object {
    [CanBeNullAttribute]
public static IResourceItemDeclaredElement GetResourceItemDeclaredElement(IDataContext context);
    [ExtensionAttribute]
[NotNullAttribute]
public static ITreeNodePointer`1<T> CreatePointer(T element);
    [ExtensionAttribute]
public static bool IsValid(ITreeNodePointer`1<T> pointer);
    public static bool IsNoSelection(IDataContext context);
    [NotNullAttribute]
public static string GetNewResourceIdentifier(ITreeNode element, object value);
    private static string GetMemberName(ITreeNode element);
    private static string GetTypeName(ITreeNode element);
}
[ActionAttribute("JetBrains.ReSharper.I18n.Services.Resources.Strings", "CreateMissingFileActionText")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Actions.Files.AddMissingFileAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    [CanBeNullAttribute]
private static ResxEditorVirtualResourceFile TryGetVirtualFile(IDataContext context);
}
[ActionAttribute("JetBrains.ReSharper.I18n.Services.Resources.Strings", "AddNewCultureActionText")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Actions.Files.AddNewLangAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Actions.Files.AddNewLangActionUtil : object {
    private static IEnumerable`1<CultureInfo> ourCultures;
    private static AddNewLangActionUtil();
    public static void AddNewLang(TreeModelBrowserDescriptorBase descriptor, IDialogHost dialogHost, ResxEditorContext context, IThreading threading);
    private static BeDialog CreateDialog(Lifetime lifetime, IReadOnlyCollection`1<ResxEditorResourceAggregatedResourceGroup> groups, ResxEditorContext context);
}
[ActionAttribute("TreeModelBrowser.ClearSelection", "JetBrains.ReSharper.I18n.Services.Resources.Strings", "ClearSelectionActionText")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Actions.Files.ResxEditorClearSelectionAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionGroupAttribute("1", "10")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Actions.Files.ResxEditorFilesActionBarActionGroup : object {
    public ResxEditorFilesActionBarActionGroup(AddNewLangAction resxEditorFilesAddLangAction, AddMissingFileAction resxEditorFilesAddMissedFileAction, Separator sep0);
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Actions.Files.ResxEditorFilesActionGroup : object {
    public ResxEditorFilesActionGroup(ResxNavigateToResourceFileAction navigateToResourceFileAction, AddMissingFileAction addMissingFileAction);
}
[ActionGroupAttribute("1", "10")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Actions.Files.ResxEditorFilesRightActionBarActionGroup : object {
    public ResxEditorFilesRightActionBarActionGroup(TreeModelBrowserExpandAllAction treeModelBrowserExpandAllAction, TreeModelBrowserCollapseAllAction treeModelBrowserCollapseAllAction, Separator sep0, CheckedTreeModelBrowserSelectAllAction selectAllAction, ResxEditorClearSelectionAction clearSelectionAction);
}
[ActionGroupAttribute("1", "10")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Actions.Files.ResxEditorNavigationActionGroup : object {
    public ResxEditorNavigationActionGroup(ResxNavigateToResourceFileAction navigateToResourceFileAction);
}
[ActionAttribute("JetBrains.ReSharper.I18n.Services.Resources.Strings", "OpenActionText")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Actions.Files.ResxNavigateToResourceFileAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    [CanBeNullAttribute]
private static ResxEditorResourceFile TryGetFile(IDataContext context);
}
[ActionAttribute("JetBrains.ReSharper.I18n.Services.Resources.Strings", "AddNewActionText")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Actions.Items.AddNewResourceElementAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public ResxEditorResourceAggregatedResourceFileKey TryDetermineFileKey(IDataContext context, ResxEditorContext editorContext, IViewableMap`2<ResxEditorResourceAggregatedResourceFileKey, ResxEditorResourceAggregatedResourceGroup> allFiles);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.ReSharper.I18n.Services.Resources.Strings", "ChooseCulturesActionText")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Actions.Items.ChooseColumnsAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.ReSharper.I18n.Services.Resources.Strings", "EditWithTextEditorActionText")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Actions.Items.EditWithTextEditorAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private static void NavigateToResourceInEditor(IDataContext context, ResxEditorResourceItemElement element, ResxEditorLanguage selectedLanguageValue, IDictionary`2<ResxEditorResourceAggregatedResourceFileKey, ResxEditorResourceAggregatedResourceGroup> groups);
    private static void CreateResourceFileAndResourceThenNavigate(IDataContext context, ResxEditorResourceItemElement element, ResxEditorLanguage selectedLanguageValue, ResxEditorVirtualResourceFile virtualResourceFile, ResxEditorResourceAggregatedResourceGroup group);
    private static void NavigateToNewResourceInFile(ResxEditorResourceItemElement element, ISolution solution, IPsiSourceFile sourceFile);
    private static void CreateResourceInExistingFileThenNavigate(IDataContext context, ResxEditorResourceItemElement element, ResxEditorResourceFile resourceFile);
}
[ActionAttribute("JetBrains.ReSharper.I18n.Services.Resources.Strings", "ExportToCSVActionText")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Actions.Items.ExportResourcesAction : ResxEditorWorkflowAction`1<ExportResourcesWorkflowProvider> {
    public static string ACTION_ID;
    protected RichText Caption { get; }
    protected virtual RichText get_Caption();
    protected virtual bool IsEnabled(IDataContext context);
}
[ActionAttribute("JetBrains.ReSharper.I18n.Services.Resources.Strings", "ImportFromCSVActionText")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Actions.Items.ImportResourcesAction : ResxEditorWorkflowAction`1<ImportResourcesWorkflowProvider> {
    public static string ACTION_ID;
    protected RichText Caption { get; }
    protected virtual RichText get_Caption();
    protected virtual bool IsEnabled(IDataContext context);
}
public static class JetBrains.ReSharper.I18n.Services.ResxEditor.Actions.Items.NewResourceDialogFactory : object {
    [NotNullAttribute]
public static BeDialog BeDialog(Lifetime lifetime, IViewableMap`2<ResxEditorResourceAggregatedResourceFileKey, ResxEditorResourceAggregatedResourceGroup> files, ResxEditorResourceAggregatedResourceFileKey[] keys, ResxEditorContext context, ResxEditorFileChanger changer, IShellLocks shellLocks, ResxEditorResourceAggregatedResourceFileKey selectedKey);
}
[ActionAttribute("JetBrains.ReSharper.I18n.Services.Resources.Strings", "OpenAllFilesWithChangesForEditingToEnableUndoActionText")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Actions.Items.OpenFilesForEditingAction : object {
    public sealed virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public sealed virtual void Execute(IDataContext context);
}
[ActionAttribute("JetBrains.ReSharper.I18n.Services.Resources.Strings", "OrderByResourceFileKeyActionText")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Actions.Items.OrderByFullPathAction : object {
    public sealed virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public sealed virtual void Execute(IDataContext context);
}
[ActionAttribute("JetBrains.ReSharper.I18n.Services.Resources.Strings", "CopyActionText")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Actions.Items.ResxEditorCopyAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.ReSharper.I18n.Services.Resources.Strings", "InlineActionText")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Actions.Items.ResxEditorInlineAction : ResxEditorWorkflowAction`1<InlineResourceValueWorkflowProvider> {
    protected RichText Caption { get; }
    protected virtual RichText get_Caption();
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Actions.Items.ResxEditorItemsActionGroup : object {
    public ResxEditorItemsActionGroup(AddNewResourceElementAction addNewResourceElementAction, ResxEditorRenameAction renameAction, ResxEditorMoveAction moveAction, ResxEditorInlineAction inlineAction, ResxEditorSafeDeleteAction editorSafeDeleteAction, Separator sep0, ExportResourcesAction exportResourcesAction, ImportResourcesAction importResourcesAction, Separator sep1, EditWithTextEditorAction editWithTextEditorAction, OpenFilesForEditingAction openFilesForEditingAction, Separator sep2, ChooseColumnsAction chooseColumnsAction, ShowCommentsAction showCommentsAction, OrderByFullPathAction orderByFullPathAction, Separator sep3, ShowOnlyErrorsAction showOnlyErrorsAction, ShowOnlyStringResourcesAction showOnlyStringResourcesAction);
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Actions.Items.ResxEditorItemsContextMenuActionGroup : object {
    public ResxEditorItemsContextMenuActionGroup(ResxEditorCopyAction copyAction, ResxEditorPasteAction pasteAction, Separator sep0, EditWithTextEditorAction editWithTextEditorAction, Separator sep1, FindUsagesContextualGroup usages, Separator sep2, ResxEditorRenameAction renameAction, ResxEditorMoveAction moveAction, ResxEditorInlineAction inlineAction, ResxEditorSafeDeleteAction editorSafeDeleteAction, Separator sep3, AddNewResourceElementAction addNewResourceElementAction);
}
[ActionAttribute("JetBrains.ReSharper.I18n.Services.Resources.Strings", "MoveActionText")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Actions.Items.ResxEditorMoveAction : ResxEditorWorkflowAction`1<MoveResourceWorkflowProvider> {
    protected RichText Caption { get; }
    protected virtual RichText get_Caption();
}
[ActionAttribute("JetBrains.ReSharper.I18n.Services.Resources.Strings", "PasteActionText")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Actions.Items.ResxEditorPasteAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.ReSharper.I18n.Services.Resources.Strings", "RenameActionText")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Actions.Items.ResxEditorRenameAction : ResxEditorWorkflowAction`1<RenameWorkflowProvider> {
    protected RichText Caption { get; }
    protected virtual RichText get_Caption();
}
[ActionAttribute("JetBrains.ReSharper.I18n.Services.Resources.Strings", "SafeDeleteActionText")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Actions.Items.ResxEditorSafeDeleteAction : ResxEditorWorkflowAction`1<SafeDeleteWorkflowProvider> {
    protected RichText Caption { get; }
    protected virtual RichText get_Caption();
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Actions.Items.ResxEditorWorkflowAction`1 : ExtensibleRefactoringAction`1<TRefactoringWorkflowProvider> {
    protected RichText Caption { get; }
    protected virtual RichText get_Caption();
    protected virtual bool IsAvailable(IDataContext context, IRefactoringWorkflow refactoringWorkflow);
    protected virtual bool IsEnabled(IDataContext context, IRefactoringWorkflow workflow);
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    protected virtual bool IsEnabled(IDataContext context);
}
[ActionAttribute("JetBrains.ReSharper.I18n.Services.Resources.Strings", "ShowCommentsActionText")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Actions.Items.ShowCommentsAction : object {
    public sealed virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public sealed virtual void Execute(IDataContext context);
}
[ActionAttribute("JetBrains.ReSharper.I18n.Services.Resources.Strings", "ShowOnlyProblemsActionText")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Actions.Items.ShowOnlyErrorsAction : object {
    public sealed virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public sealed virtual void Execute(IDataContext context);
}
[ActionAttribute("JetBrains.ReSharper.I18n.Services.Resources.Strings", "ShowOnlyLocalizableStringResourcesActionText")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Actions.Items.ShowOnlyStringResourcesAction : object {
    public sealed virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public sealed virtual void Execute(IDataContext context);
}
public interface JetBrains.ReSharper.I18n.Services.ResxEditor.CellValues.IResxEditorCellValue {
    public string Value { get; }
    public abstract virtual string get_Value();
}
public abstract class JetBrains.ReSharper.I18n.Services.ResxEditor.CellValues.ResxEditorCellValueBase : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    protected ResxEditorCellValueBase(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Value();
    protected bool Equals(ResxEditorCellValueBase other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.CellValues.ResxEditorChangedCellValue : ResxEditorCellValueBase {
    public ResxEditorChangedCellValue(string value);
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.CellValues.ResxEditorFromSourceCellValue : ResxEditorCellValueBase {
    public ResxEditorFromSourceCellValue(string value);
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.CellValues.ResxEditorLinkedFileCellValue : ResxEditorCellValueBase {
    public ResxEditorLinkedFileCellValue(string value);
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.CellValues.ResxEditorMissedCellValue : ResxEditorCellValueBase {
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.CellValues.ResxEditorNonEditableCellValue : ResxEditorCellValueBase {
    public ResxEditorNonEditableCellValue(string value);
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.CellValues.ResxEditorRemovedByUserValue : ResxEditorCellValueBase {
}
public interface JetBrains.ReSharper.I18n.Services.ResxEditor.Changes.IResxEditorChange {
}
internal class JetBrains.ReSharper.I18n.Services.ResxEditor.Changes.ResxCreateEmptyFileChange : object {
    [CompilerGeneratedAttribute]
private ResxEditorVirtualResourceFile <ResourceFile>k__BackingField;
    public ResxEditorVirtualResourceFile ResourceFile { get; }
    public ResxCreateEmptyFileChange(ResxEditorVirtualResourceFile resourceFile);
    [CompilerGeneratedAttribute]
public ResxEditorVirtualResourceFile get_ResourceFile();
}
internal class JetBrains.ReSharper.I18n.Services.ResxEditor.Changes.ResxEditorCreateOrUpdateValueChange : object {
    [CompilerGeneratedAttribute]
private ResxEditorResourceAggregatedResourceGroup <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private ResxEditorLanguage <Lang>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [NotNullAttribute]
public ResxEditorResourceAggregatedResourceGroup Group { get; }
    [NotNullAttribute]
public ResxEditorLanguage Lang { get; }
    [NotNullAttribute]
public string Name { get; }
    [CanBeNullAttribute]
public string Value { get; }
    [CanBeNullAttribute]
public string Comment { get; }
    public ResxEditorCreateOrUpdateValueChange(ResxEditorResourceAggregatedResourceGroup group, ResxEditorLanguage lang, string name, string value, string comment);
    [CompilerGeneratedAttribute]
public ResxEditorResourceAggregatedResourceGroup get_Group();
    [CompilerGeneratedAttribute]
public ResxEditorLanguage get_Lang();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public string get_Comment();
}
internal class JetBrains.ReSharper.I18n.Services.ResxEditor.Changes.ResxUpdateFileFromCacheChange : object {
    [CompilerGeneratedAttribute]
private IPsiSourceFile <File>k__BackingField;
    [NotNullAttribute]
public IPsiSourceFile File { get; }
    public ResxUpdateFileFromCacheChange(IPsiSourceFile file);
    [CompilerGeneratedAttribute]
public IPsiSourceFile get_File();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.I18n.Services.ResxEditor.Changes.UnattendedChangeModeCookie : object {
    private static Property`1<bool> ourAcquired;
    private static UnattendedChangeModeCookie();
    public sealed virtual void Dispose();
    public static bool IsInUnattendedMode();
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.FocusOnResourceItemRequest : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    public string Name { get; public set; }
    public string Culture { get; public set; }
    public FocusOnResourceItemRequest(string name, string culture);
    public FocusOnResourceItemRequest(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(string value);
}
[ActionGroupAttribute("1", "10")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Internal.JetResourceGeneratorIntoInternalActionsMenu : object {
    public JetResourceGeneratorIntoInternalActionsMenu(RunJetResourceGeneratorForAllFiles runJetResourceGeneratorForAllFiles);
}
[ActionAttribute("Run for all resource files")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Internal.RunJetResourceGeneratorForAllFiles : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Internal.ZoneMarker : object {
}
public interface JetBrains.ReSharper.I18n.Services.ResxEditor.IResourceFileDesignerNavigationHost {
    public abstract virtual bool NavigateTo(IPsiSourceFile sourceFile);
}
public interface JetBrains.ReSharper.I18n.Services.ResxEditor.IResourceValueEditor {
    public abstract virtual void GetResourceValueAndComment(IPsiSourceFile sourceFile, string resourceItemName, ResourceItemValue& value, String& comment);
    public abstract virtual void CreateOrUpdateValue(ResxEditorResourceAggregatedResourceGroup group, ResxEditorLanguage lang, string name, string value, string comment);
}
public interface JetBrains.ReSharper.I18n.Services.ResxEditor.IResxEditorChangeProcessor {
    public abstract virtual void AddChange(IResxEditorChange change);
}
public interface JetBrains.ReSharper.I18n.Services.ResxEditor.IResxEditorNodeValue {
}
public interface JetBrains.ReSharper.I18n.Services.ResxEditor.IResxEditorResourceFile {
    [NotNullAttribute]
public ResxEditorResourceAggregatedResourceGroup Group { get; }
    [NotNullAttribute]
public ResxEditorLanguage Language { get; }
    public abstract virtual ResxEditorResourceAggregatedResourceGroup get_Group();
    public abstract virtual ResxEditorLanguage get_Language();
}
internal static class JetBrains.ReSharper.I18n.Services.ResxEditor.ItemsFilterHelper : object {
    public static IListEvents`1<ResxEditorResourceItemElement> CreateFilteredItems(Lifetime lifetime, ResxEditorContext context, ListEvents`1<ResxEditorResourceItemElement> items, IEnumerable`1<ResxEditorLanguage> languages, ResxEditorLanguage defaultLanguage, bool applyFilters);
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.LoadingViewModel : AAutomation {
    public static LoadingViewModel Instance;
    private static LoadingViewModel();
}
internal class JetBrains.ReSharper.I18n.Services.ResxEditor.NavigationHelper : object {
    public static void NavigateTo(ResxEditorResourceItemElement item, ResxEditorLanguage language, IResxEditorResourceFile file);
    public static void NavigateTo(IResourceItemDeclaredElement declaredElement);
    private static void NavigateToImpl(IResourceItemDeclaredElement declaredElement);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.I18n.Services.ResxEditor.ResourceItemDeclaredElementExtensions : object {
    [ExtensionAttribute]
public static void ShowResourceItemInResxEditor(IResourceItemDeclaredElement resource, Lifetime lifetime);
}
[PsiComponentAttribute("0")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.ResourceItemsGridFactory : object {
    private static ILogger ourLogger;
    [NotNullAttribute]
private IActionDefs myActionDefs;
    [NotNullAttribute]
private ITheming myTheming;
    [NotNullAttribute]
private IResourceSearchService myResourceSearchService;
    [NotNullAttribute]
private IPsiServices myPsiServices;
    public ResourceItemsGridFactory(IActionDefs actionDefs, ITheming theming, IResourceSearchService resourceSearchService, IPsiServices psiServices);
    private static ResourceItemsGridFactory();
    internal BeControl Create(Lifetime lifetime, ResxEditorContext context, IEnumerable`1<ResxEditorLanguage> languagesItems, ListEvents`1<ResxEditorResourceItemElement> allItems, IResourceValueEditor resourceValueEditor);
    private static BeDataGridRow GetRow(int rowIndex, ITheming theming, ResxEditorResourceItemElement element, List`1<ResxEditorLanguage> languages, ResxEditorLanguage defaultLanguage, string filter);
    private static BeDataGridRow GetCommentRow(int rowIndex, ITheming theming, ResxEditorResourceItemElement element, List`1<ResxEditorLanguage> languages, ResxEditorLanguage defaultLanguage, string filter);
    private static RichTextModel CreateDisplayValue(ITheming theming, TextStyle textStyle, string value, string filter, bool cellHighlighted);
    private static string GetError(IResxEditorCellValue value, string resourceValueId);
}
internal class JetBrains.ReSharper.I18n.Services.ResxEditor.ResourceValueEditRequestSender : object {
    [NotNullAttribute]
private IResxEditorChangeProcessor myChangeProcessor;
    [NotNullAttribute]
private IShellLocks myLocks;
    public ResourceValueEditRequestSender(IResxEditorChangeProcessor changeProcessor, IShellLocks locks);
    public sealed virtual void GetResourceValueAndComment(IPsiSourceFile sourceFile, string resourceItemName, ResourceItemValue& value, String& comment);
    public sealed virtual void CreateOrUpdateValue(ResxEditorResourceAggregatedResourceGroup group, ResxEditorLanguage lang, string name, string value, string comment);
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorAllLanguagesCollection : object {
    private ResxEditorPersonalSettingsStore mySettingsStore;
    [NotNullAttribute]
private HashSet`1<string> myDisabledLanguages;
    [CompilerGeneratedAttribute]
private IViewableSet`1<ResxEditorLanguage> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <FilterChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<ResxEditorLanguage> <FilteredItems>k__BackingField;
    [NotNullAttribute]
public IViewableSet`1<ResxEditorLanguage> Items { get; }
    [NotNullAttribute]
public ISimpleSignal FilterChanged { get; }
    [NotNullAttribute]
public HashSet`1<ResxEditorLanguage> FilteredItems { get; }
    public ResxEditorAllLanguagesCollection(Lifetime lifetime, ResxEditorPersonalSettingsStore settingsStore);
    [CompilerGeneratedAttribute]
public IViewableSet`1<ResxEditorLanguage> get_Items();
    [CompilerGeneratedAttribute]
public ISimpleSignal get_FilterChanged();
    [CompilerGeneratedAttribute]
public HashSet`1<ResxEditorLanguage> get_FilteredItems();
    public void AddLanguage(ResxEditorLanguage language);
    [NotNullAttribute]
public BeDialog GetEditDialog(Lifetime lifetime);
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorChangeProcessor : object {
    private Lifetime myLifetime;
    [NotNullAttribute]
private ICollection`1<IResxEditorChange> myChanges;
    [NotNullAttribute]
private Action`1<IPsiSourceFile> myFillFileAction;
    [NotNullAttribute]
private GroupingEvent myGroupingEvent;
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private IPsiServices myPsiServices;
    [NotNullAttribute]
private ResxEditorFileChanger myResxEditorFileChanger;
    [NotNullAttribute]
private object mySync;
    public ResxEditorChangeProcessor(Lifetime lifetime, Action`1<IPsiSourceFile> fillFileAction, IPsiServices psiServices, ResxEditorFileChanger resxEditorFileChanger, IShellLocks locks);
    public sealed virtual void AddChange(IResxEditorChange change);
    private void ProcessChanges();
    [CompilerGeneratedAttribute]
private void <ProcessChanges>b__10_0();
    [CompilerGeneratedAttribute]
private void <ProcessChanges>b__10_2();
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorCheckedRichTextLiveTreeNode : CheckedRichTextLiveTreeNode {
    public ResxEditorCheckedRichTextLiveTreeNode(CheckedRichTextLiveTreeModel model, ICheckedRichTextTreeNodeViewModel viewModel, object dataItem, bool showChildrenCount);
    public ResxEditorCheckedRichTextLiveTreeNode(CheckedRichTextLiveTreeModel model, IRichTextTreeNodeViewModel viewModel, object dataItem);
    public virtual void UpdateParentState();
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorContext : object {
    [NotNullAttribute]
public static DataConstant`1<ResxEditorContext> ResxEditorContextConstant;
    private IList`1<Func`1<IEnumerable`1<IDataRule>>> myDataRulesSuppliers;
    [CompilerGeneratedAttribute]
private SimpleSignal <ToolWindowActivated>k__BackingField;
    [CompilerGeneratedAttribute]
private Signal`1<IResxEditorChange> <Change>k__BackingField;
    [CompilerGeneratedAttribute]
private SimpleSignal <Clear>k__BackingField;
    [CompilerGeneratedAttribute]
private SimpleSignal <Paste>k__BackingField;
    [CompilerGeneratedAttribute]
private SimpleSignal <Copy>k__BackingField;
    [CompilerGeneratedAttribute]
private Signal`1<FocusOnResourceItemRequest> <FocusOnResourceItem>k__BackingField;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private ResxEditorPersonalSettingsStore <SettingsStore>k__BackingField;
    [CompilerGeneratedAttribute]
private ResxEditorAllLanguagesCollection <Languages>k__BackingField;
    [CompilerGeneratedAttribute]
private IViewableMap`2<ResxEditorResourceAggregatedResourceFileKey, ResxEditorResourceAggregatedResourceGroup> <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private IUsagesPublisher <UsagesPublisher>k__BackingField;
    [CompilerGeneratedAttribute]
private ResxEditorDeferredActionsDispatcher <DeferredActionsDispatcher>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GridContextMenuActionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<bool> <OrderByFullPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<bool> <ShowOnlyErrorsFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<bool> <ShowOnlyStringResourcesFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<bool> <ShowComments>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<string> <SearchFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<List`1<ResxEditorResourceItemElement>> <SelectedElements>k__BackingField;
    [CompilerGeneratedAttribute]
private Signal`1<ResxEditorResourceItemElement> <ResourceItemChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<ResxEditorItemsPresentationOptions> <PresentationOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<bool> <IsLoading>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<ResxEditorLanguage> <SelectedLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IEnumerable`1<IResourceItem>> <SelectedResourceItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<TreeModelNode> <SelectedTreeModelNode>k__BackingField;
    [CompilerGeneratedAttribute]
private ListEvents`1<ResxEditorResourceItemElement> <Items>k__BackingField;
    public SimpleSignal ToolWindowActivated { get; }
    public Signal`1<IResxEditorChange> Change { get; }
    public SimpleSignal Clear { get; }
    public SimpleSignal Paste { get; }
    public SimpleSignal Copy { get; }
    public Signal`1<FocusOnResourceItemRequest> FocusOnResourceItem { get; }
    public Lifetime Lifetime { get; }
    public ResxEditorPersonalSettingsStore SettingsStore { get; }
    public ResxEditorAllLanguagesCollection Languages { get; }
    public IViewableMap`2<ResxEditorResourceAggregatedResourceFileKey, ResxEditorResourceAggregatedResourceGroup> Files { get; private set; }
    public IUsagesPublisher UsagesPublisher { get; private set; }
    public ResxEditorDeferredActionsDispatcher DeferredActionsDispatcher { get; }
    public string GridContextMenuActionId { get; }
    public bool IsInVisualStudioContext { get; }
    public Property`1<bool> OrderByFullPath { get; }
    public Property`1<bool> ShowOnlyErrorsFilter { get; }
    public Property`1<bool> ShowOnlyStringResourcesFilter { get; }
    public Property`1<bool> ShowComments { get; }
    public Property`1<string> SearchFilter { get; }
    public Property`1<List`1<ResxEditorResourceItemElement>> SelectedElements { get; }
    public Signal`1<ResxEditorResourceItemElement> ResourceItemChanged { get; }
    public Property`1<ResxEditorItemsPresentationOptions> PresentationOptions { get; }
    public Property`1<bool> IsLoading { get; }
    public Property`1<ResxEditorLanguage> SelectedLanguage { get; }
    public IProperty`1<IEnumerable`1<IResourceItem>> SelectedResourceItems { get; }
    public IProperty`1<TreeModelNode> SelectedTreeModelNode { get; }
    public ListEvents`1<ResxEditorResourceItemElement> Items { get; }
    public ResxEditorContext(Lifetime lifetime, ResxEditorPersonalSettingsStore settingsStore, ResxEditorAllLanguagesCollection languages, IViewableMap`2<ResxEditorResourceAggregatedResourceFileKey, ResxEditorResourceAggregatedResourceGroup> files, ListEvents`1<ResxEditorResourceItemElement> items, IUsagesPublisher usagesPublisher, ResxEditorDeferredActionsDispatcher deferredActionsDispatcher, string gridContextMenuActionId);
    private static ResxEditorContext();
    private IList`1<IDataRule> CreateDateRules();
    [CompilerGeneratedAttribute]
public SimpleSignal get_ToolWindowActivated();
    [CompilerGeneratedAttribute]
public Signal`1<IResxEditorChange> get_Change();
    [CompilerGeneratedAttribute]
public SimpleSignal get_Clear();
    [CompilerGeneratedAttribute]
public SimpleSignal get_Paste();
    [CompilerGeneratedAttribute]
public SimpleSignal get_Copy();
    [CompilerGeneratedAttribute]
public Signal`1<FocusOnResourceItemRequest> get_FocusOnResourceItem();
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public ResxEditorPersonalSettingsStore get_SettingsStore();
    [CompilerGeneratedAttribute]
public ResxEditorAllLanguagesCollection get_Languages();
    [CompilerGeneratedAttribute]
public IViewableMap`2<ResxEditorResourceAggregatedResourceFileKey, ResxEditorResourceAggregatedResourceGroup> get_Files();
    [CompilerGeneratedAttribute]
private void set_Files(IViewableMap`2<ResxEditorResourceAggregatedResourceFileKey, ResxEditorResourceAggregatedResourceGroup> value);
    [CompilerGeneratedAttribute]
public IUsagesPublisher get_UsagesPublisher();
    [CompilerGeneratedAttribute]
private void set_UsagesPublisher(IUsagesPublisher value);
    [CompilerGeneratedAttribute]
public ResxEditorDeferredActionsDispatcher get_DeferredActionsDispatcher();
    [CompilerGeneratedAttribute]
public string get_GridContextMenuActionId();
    public virtual bool get_IsInVisualStudioContext();
    [CompilerGeneratedAttribute]
public Property`1<bool> get_OrderByFullPath();
    [CompilerGeneratedAttribute]
public Property`1<bool> get_ShowOnlyErrorsFilter();
    [CompilerGeneratedAttribute]
public Property`1<bool> get_ShowOnlyStringResourcesFilter();
    [CompilerGeneratedAttribute]
public Property`1<bool> get_ShowComments();
    [CompilerGeneratedAttribute]
public Property`1<string> get_SearchFilter();
    [CompilerGeneratedAttribute]
public Property`1<List`1<ResxEditorResourceItemElement>> get_SelectedElements();
    [CompilerGeneratedAttribute]
public Signal`1<ResxEditorResourceItemElement> get_ResourceItemChanged();
    [CompilerGeneratedAttribute]
public Property`1<ResxEditorItemsPresentationOptions> get_PresentationOptions();
    [CompilerGeneratedAttribute]
public Property`1<bool> get_IsLoading();
    [CompilerGeneratedAttribute]
public Property`1<ResxEditorLanguage> get_SelectedLanguage();
    [CompilerGeneratedAttribute]
public IProperty`1<IEnumerable`1<IResourceItem>> get_SelectedResourceItems();
    [CompilerGeneratedAttribute]
public IProperty`1<TreeModelNode> get_SelectedTreeModelNode();
    [CompilerGeneratedAttribute]
public ListEvents`1<ResxEditorResourceItemElement> get_Items();
    public IEnumerable`1<IDataRule> GetDataRules();
    public void AddDataRules(Func`1<IEnumerable`1<IDataRule>> dataRulesSupplier);
    [CompilerGeneratedAttribute]
private ResxEditorContext <CreateDateRules>b__3_0(IDataContext _);
    [CompilerGeneratedAttribute]
private ICollection`1<IDeclaredElement> <CreateDateRules>b__3_1(IDataContext _);
}
[PsiComponentAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorContextFactory : object {
    protected IActionDefs ActionDefs;
    public ResxEditorContextFactory(IActionDefs actionDefs);
    public virtual ResxEditorContext CreateContext(Lifetime lifetime, ResxEditorPersonalSettingsStore settingsStore, ResxEditorAllLanguagesCollection languages, IViewableMap`2<ResxEditorResourceAggregatedResourceFileKey, ResxEditorResourceAggregatedResourceGroup> files, ListEvents`1<ResxEditorResourceItemElement> items, IUsagesPublisher usagesPublisher, ResxEditorDeferredActionsDispatcher deferredActionsDispatcher);
}
internal class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorDefaultProvider : object {
    public sealed virtual object ExtractGroupObject(IResxEditorNodeValue item);
}
[PsiComponentAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorDeferredActionsDispatcher : object {
    private ConcurrentQueue`1<Action`1<ResxEditorContext>> myWhenReady;
    public void WhenReady(Action`1<ResxEditorContext> action);
    public void OnReady(ResxEditorContext context);
}
internal class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorDirectoryGroupProvider : object {
    public sealed virtual object ExtractGroupObject(IResxEditorNodeValue item);
    public static object Extract(IResxEditorNodeValue item);
}
[PsiComponentAttribute("0")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorFactory : object {
    private HashSet`1<ProjectFileType> ourSupportedFileTypes;
    [NotNullAttribute]
private IActionBarManager myActionBarManager;
    [NotNullAttribute]
private IActionDefs myActionDefs;
    [NotNullAttribute]
private IGroupingEventFactory myGroupingEventFactory;
    [NotNullAttribute]
private GroupingManager myGroupingManager;
    [NotNullAttribute]
private TreeModelBrowserViewContext myLiveTreeModelBrowserViewContext;
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private IPsiCachesState myPsiCachesState;
    [NotNullAttribute]
private IPsiServices myPsiServices;
    [NotNullAttribute]
private ResxEditorFileChanger myResxEditorFileChanger;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private ISolutionResourceCache mySolutionResourceCache;
    [NotNullAttribute]
private ResxEditorPersonalSettingsStore mySettingsStore;
    [NotNullAttribute]
private ISolutionResourceCacheNotifications mySolutionResourceCacheNotifications;
    [NotNullAttribute]
private TreeModelBrowserViewSolutionContext myTreeModelBrowserViewSolutionContext;
    [NotNullAttribute]
private ResxEditorDeferredActionsDispatcher myResxEditorDeferredActionsDispatcher;
    [NotNullAttribute]
private IUsagesPublisher myUsagesPublisher;
    [NotNullAttribute]
private ResxEditorContextFactory myResxEditorContextFactory;
    [NotNullAttribute]
private ResourceItemsGridFactory myResourceItemsGridFactory;
    public IProperty`1<bool> PreselectGroups;
    public ResxEditorFactory(Lifetime lifetime, ISolution solution, ISolutionResourceCache solutionResourceCache, ResxEditorPersonalSettingsStore settingsStore, ResxEditorFileChanger resxEditorFileChanger, ISolutionResourceCacheNotifications solutionResourceCacheNotifications, IPsiServices psiServices, IShellLocks locks, IActionBarManager actionBarManager, IActionDefs actionDefs, IPsiCachesState psiCachesState, IGroupingEventFactory groupingEventFactory, GroupingManager groupingManager, TreeModelBrowserViewContext liveTreeModelBrowserViewContext, TreeModelBrowserViewSolutionContext treeModelBrowserViewSolutionContext, ResxEditorDeferredActionsDispatcher resxEditorDeferredActionsDispatcher, IUsagesPublisher usagesPublisher, ResxEditorContextFactory resxEditorContextFactory, ResourceItemsGridFactory resourceItemsGridFactory);
    public NestedAutomationWrapper Create(Lifetime lifetime, ToolWindowInstance instance, ResxEditorHostModel resxEditorHostModel, bool preselectGroups);
    [NotNullAttribute]
private ResxEditorModel CreateResxEditorModel(Lifetime lifetime, IGroupingEventFactory groupingEventFactory, ToolWindowInstance instance, ResxEditorHostModel resxEditorHostModel);
    private void HandleGroupSelectionChanged(PropertyChangedEventArgs`1<bool> args, SequentialLifetimes trackingChangesLifetimes, ResxEditorResourceAggregatedResourceGroup group, ResxEditorItemsCollectionModel itemsCollectionModel, ResxEditorAllLanguagesCollection languages);
    private void FillItems(IEnumerable`1<ResxEditorResourceFile> files, ResxEditorResourceAggregatedResourceGroup group, ResxEditorItemsCollectionModel itemsCollectionModel, ResxEditorAllLanguagesCollection languages);
    private void ClearItemsForLanguage(ResxEditorResourceAggregatedResourceGroup group, ResxEditorLanguage language, ResxEditorItemsCollectionModel itemsCollectionModel, ResxEditorAllLanguagesCollection languages);
    private void FillFile(IPsiSourceFile sourceFile, ResxEditorAllLanguagesCollection languages, ResxEditorFilesCollectionModel filesCollectionModel);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorFileChanger : object {
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private ISolutionResourceCache mySolutionResourceCache;
    private string myInitialFileContent;
    public ResxEditorFileChanger(ILogger logger, ISolution solution, ISolutionResourceCache solutionResourceCache, IShellLocks locks);
    public void CreateOrUpdateValueInExistingFile(string name, string value, string comment, ResxEditorResourceFile existingFile, bool ignoreExisting);
    public bool CreateEmptyFile(ResxEditorVirtualResourceFile virtualResourceFile, IPsiSourceFile& created);
    private string GetInitialFileContent();
    private void TempInvalidateDocumentCache(VirtualFileSystemPath location);
    public void CreateEmptyValue(ResxEditorResourceAggregatedResourceGroup group, string name);
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorFilesCollectionModel : CheckedRichTextLiveTreeModel {
    [NotNullAttribute]
private ViewableMap`2<ResxEditorResourceAggregatedResourceFileKey, ResxEditorResourceAggregatedResourceGroup> myGroupedFiles;
    [NotNullAttribute]
private BindableSetCollectionWithoutIndexTracking`1<object> myItemsCollection;
    [NotNullAttribute]
private IDictionary`2<CheckedRichTextLiveTreeNode, LifetimeDefinition> myNodesLifetimes;
    [NotNullAttribute]
private IDictionary`2<IPsiSourceFile, ResxEditorResourceAggregatedResourceGroup> mySourceFilesToGroups;
    [CompilerGeneratedAttribute]
private IViewableMap`2<ResxEditorResourceAggregatedResourceFileKey, ResxEditorResourceAggregatedResourceGroup> <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private ResxEditorTreeModelBrowserViewContext <ResxEditorTreeModelBrowserViewContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ResxEditorContext <Context>k__BackingField;
    [NotNullAttribute]
public IViewableMap`2<ResxEditorResourceAggregatedResourceFileKey, ResxEditorResourceAggregatedResourceGroup> Content { get; }
    [NotNullAttribute]
public ResxEditorTreeModelBrowserViewContext ResxEditorTreeModelBrowserViewContext { get; private set; }
    public ResxEditorContext Context { get; private set; }
    public ResxEditorFilesCollectionModel(Lifetime lifetime, ResxEditorContext context, ResxEditorTreeModelBrowserViewContext resxEditorTreeModelBrowserViewContext, ReadWriteLock lock, IThreading threading, StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, ViewableMap`2<ResxEditorResourceAggregatedResourceFileKey, ResxEditorResourceAggregatedResourceGroup> resourceAggregatedResourceGroups);
    [CompilerGeneratedAttribute]
public IViewableMap`2<ResxEditorResourceAggregatedResourceFileKey, ResxEditorResourceAggregatedResourceGroup> get_Content();
    [CompilerGeneratedAttribute]
public ResxEditorTreeModelBrowserViewContext get_ResxEditorTreeModelBrowserViewContext();
    [CompilerGeneratedAttribute]
private void set_ResxEditorTreeModelBrowserViewContext(ResxEditorTreeModelBrowserViewContext value);
    [CompilerGeneratedAttribute]
public ResxEditorContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(ResxEditorContext value);
    internal void AddFile(ResxEditorResourceAggregatedResourceFileKey key, IPsiSourceFile sourceFile, ResourceService resourceService, ResxEditorLanguage language);
    internal void RemoveFile(IPsiSourceFile sourceFile);
    protected virtual CheckedRichTextLiveTreeNode InitializeTypedRoot();
    protected virtual ITreeModelNode CreateNode(object dataItem);
    protected virtual void OnChildAdded(ITreeModelNode parent, ITreeModelNode child);
    protected virtual void OnChildRemoved(ITreeModelNode parent, ITreeModelNode child);
    protected virtual bool IsMeaningfulItem(object item);
    private static Nullable`1<ValueTuple`2<ResxEditorResourceAggregatedResourceGroup, CheckedRichTextLiveTreeNode>> GetNodeData(ITreeModelNode child);
    public void UpdateLanguages(ICollection`1<ResxEditorLanguage> languages);
}
internal class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorFilesLiveComparer : object {
    public IEnumerable`1<IDependencyDefinition> Dependencies { get; }
    public sealed virtual IEnumerable`1<IDependencyDefinition> get_Dependencies();
    public sealed virtual int Compare(ITreeModelNode x, ITreeModelNode y);
    private static int Compare(IResxEditorResourceFile x, IResxEditorResourceFile y);
    private static int Compare(ResxEditorLanguage x, ResxEditorLanguage y);
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorItemsCollectionActionBarModel : AAutomation {
    [CompilerGeneratedAttribute]
private IActionBarManager <ActionBarManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ResxEditorContext <Context>k__BackingField;
    [NotNullAttribute]
public IActionBarManager ActionBarManager { get; }
    public ResxEditorContext Context { get; }
    public ResxEditorItemsCollectionActionBarModel(ResxEditorContext context, IActionBarManager actionBarManager);
    [CompilerGeneratedAttribute]
public IActionBarManager get_ActionBarManager();
    [CompilerGeneratedAttribute]
public ResxEditorContext get_Context();
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorItemsCollectionModel : AAutomation {
    private static ILogger ourLogger;
    private Lifetime myLifetime;
    [NotNullAttribute]
private Dictionary`2<ResxEditorResourceAggregatedResourceGroup, Dictionary`2<string, ResxEditorResourceItemElement>> myAllItems;
    [NotNullAttribute]
private BeGrid myContentControl;
    [NotNullAttribute]
private IPsiServices myPsiServices;
    [NotNullAttribute]
private ResourceItemsGridFactory myResourceItemsGridFactory;
    [NotNullAttribute]
private IResourceValueEditor myResourceValueEditor;
    [NotNullAttribute]
private IShellLocks myShellLocks;
    [NotNullAttribute]
private ISolutionResourceCache mySolutionResourceCache;
    [NotNullAttribute]
private SequentialLifetimes myTreeLifetimes;
    [NotNullAttribute]
private SequentialLifetimes myTreeCreationLifetimes;
    [CompilerGeneratedAttribute]
private ResxEditorContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private ListEvents`1<ResxEditorResourceItemElement> <Items>k__BackingField;
    private object mySyncRoot;
    private SequentialItemsProcessor`2<UpdateAction, bool> myItemsProcessor;
    [NotNullAttribute]
public ResxEditorContext Context { get; }
    [NotNullAttribute]
public BeControl Tree { get; }
    [NotNullAttribute]
public ListEvents`1<ResxEditorResourceItemElement> Items { get; }
    public ResxEditorItemsCollectionModel(Lifetime lifetime, ResxEditorContext context, ISolutionResourceCache solutionResourceCache, IPsiServices psiServices, ListEvents`1<ResxEditorResourceItemElement> items, ResourceItemsGridFactory resourceItemsGridFactory, IResourceValueEditor resourceValueEditor);
    private static ResxEditorItemsCollectionModel();
    [CompilerGeneratedAttribute]
public ResxEditorContext get_Context();
    public BeControl get_Tree();
    [CompilerGeneratedAttribute]
public ListEvents`1<ResxEditorResourceItemElement> get_Items();
    public void AddGroup(ResxEditorResourceAggregatedResourceGroup group);
    private void PostUpdate(UpdateAction action);
    public void ClearAll();
    public void ClearGroup(ResxEditorResourceAggregatedResourceGroup group);
    private void DoClearGroup(ResxEditorResourceAggregatedResourceGroup group);
    private void Remove(ResxEditorResourceItemElement item);
    public void ClearResourceItemsForLanguages(ResxEditorResourceAggregatedResourceGroup group, IEnumerable`1<ResxEditorLanguage> languages, ICollection`1<ResxEditorLanguage> allLanguages);
    public void LoadResourceItems(ResxEditorResourceAggregatedResourceGroup group, IEnumerable`1<ResxEditorResourceFile> files, ICollection`1<ResxEditorLanguage> allLanguages);
    private void DoSetResourceItems(ResxEditorResourceAggregatedResourceGroup group, IEnumerable`1<ResxEditorLanguage> languages, Dictionary`2<string, Dictionary`2<ResxEditorLanguage, IResourceItem>> resourceItems, ICollection`1<ResxEditorLanguage> allLanguages, CancellationToken cancellationToken);
    private static IResxEditorCellValue CreateInitialValue(object resValue);
    public void CreateNewItemsGrid(IEnumerable`1<ResxEditorLanguage> languages, ResxEditorItemsPresentationOptions itemsPresentationOptions);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorItemsCollectionModel/<<-ctor>b__12_0>d")]
[CompilerGeneratedAttribute]
private Task`1<bool> <.ctor>b__12_0(Lifetime lt, UpdateAction action);
    [CompilerGeneratedAttribute]
private void <ClearAll>b__25_0(CancellationToken cancellationToken);
}
internal class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorItemsCollectionModelPreventGroupHandlingCookie : object {
    [CompilerGeneratedAttribute]
private static bool <Acquired>k__BackingField;
    public static bool Acquired { get; private set; }
    [CompilerGeneratedAttribute]
public static bool get_Acquired();
    [CompilerGeneratedAttribute]
private static void set_Acquired(bool value);
    public sealed virtual void Dispose();
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorItemsPresentationOptions : object {
    [CompilerGeneratedAttribute]
private string <TextFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowOnlyErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowOnlyEditable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OrderByFullPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowComments>k__BackingField;
    [NotNullAttribute]
public string TextFilter { get; }
    public bool ShowOnlyErrors { get; }
    public bool ShowOnlyEditable { get; }
    public bool OrderByFullPath { get; }
    public bool ShowComments { get; }
    public ResxEditorItemsPresentationOptions(string textFilter, bool showOnlyErrors, bool showOnlyEditable, bool orderByFullPath, bool showComments);
    [CompilerGeneratedAttribute]
public string get_TextFilter();
    [CompilerGeneratedAttribute]
public bool get_ShowOnlyErrors();
    [CompilerGeneratedAttribute]
public bool get_ShowOnlyEditable();
    [CompilerGeneratedAttribute]
public bool get_OrderByFullPath();
    [CompilerGeneratedAttribute]
public bool get_ShowComments();
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorLanguage : object {
    [CompilerGeneratedAttribute]
private bool <IsRightToLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefaultCulture>k__BackingField;
    [CompilerGeneratedAttribute]
private static IComparer`1<ResxEditorLanguage> <Comparer>k__BackingField;
    public bool IsRightToLeft { get; }
    [NotNullAttribute]
public string ShortName { get; }
    public string FullName { get; }
    public string DisplayName { get; }
    public int Priority { get; }
    public bool IsDefaultCulture { get; }
    public static IComparer`1<ResxEditorLanguage> Comparer { get; }
    public ResxEditorLanguage(string shortName);
    private static ResxEditorLanguage();
    [CompilerGeneratedAttribute]
public bool get_IsRightToLeft();
    [CompilerGeneratedAttribute]
public string get_ShortName();
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    public int get_Priority();
    [CompilerGeneratedAttribute]
public bool get_IsDefaultCulture();
    [CompilerGeneratedAttribute]
public static IComparer`1<ResxEditorLanguage> get_Comparer();
    protected bool Equals(ResxEditorLanguage other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorModel : AAutomation {
    private ResxEditorPersonalSettingsStore mySettingsStore;
    [CompilerGeneratedAttribute]
private ResxEditorAllLanguagesCollection <Languages>k__BackingField;
    [CompilerGeneratedAttribute]
private ResxEditorContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private ResxEditorFilesCollectionModel <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private ResxEditorItemsCollectionActionBarModel <ItemsActionBarModel>k__BackingField;
    [CompilerGeneratedAttribute]
private ResxEditorItemsCollectionModel <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private ResxEditorStatusBarModel <StatusBarModel>k__BackingField;
    [NotNullAttribute]
public ResxEditorAllLanguagesCollection Languages { get; }
    public ResxEditorContext Context { get; }
    public ResxEditorFilesCollectionModel Files { get; private set; }
    [NotNullAttribute]
public ResxEditorItemsCollectionActionBarModel ItemsActionBarModel { get; }
    [NotNullAttribute]
public ResxEditorItemsCollectionModel Items { get; }
    [NotNullAttribute]
public ResxEditorStatusBarModel StatusBarModel { get; }
    public ResxEditorModel(ResxEditorPersonalSettingsStore settingsStore, ResxEditorContext context, ResxEditorAllLanguagesCollection languages, ResxEditorFilesCollectionModel files, ResxEditorItemsCollectionActionBarModel itemsActionBarModel, ResxEditorItemsCollectionModel items, ResxEditorStatusBarModel statusBarModel);
    [CompilerGeneratedAttribute]
public ResxEditorAllLanguagesCollection get_Languages();
    [CompilerGeneratedAttribute]
public ResxEditorContext get_Context();
    [CompilerGeneratedAttribute]
public ResxEditorFilesCollectionModel get_Files();
    [CompilerGeneratedAttribute]
private void set_Files(ResxEditorFilesCollectionModel value);
    [CompilerGeneratedAttribute]
public ResxEditorItemsCollectionActionBarModel get_ItemsActionBarModel();
    [CompilerGeneratedAttribute]
public ResxEditorItemsCollectionModel get_Items();
    [CompilerGeneratedAttribute]
public ResxEditorStatusBarModel get_StatusBarModel();
    public void InitializeGroupSelection();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorNavigationHost : ResxEditorNavigationHostStab {
    public virtual void EditWithLocalizationManager(IResourceItemDeclaredElement resourceItemDeclaredElement);
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorOccurrenceBrowserDescriptor : LiveTreeModelBrowserDescriptor {
    [NotNullAttribute]
private IActionDefs myActionDefs;
    [NotNullAttribute]
private GroupingManager myGroupingManager;
    [NotNullAttribute]
private ResxEditorFilesCollectionModel myModel;
    public bool QuickSearchSupported { get; }
    public TreeModel Model { get; }
    public StructuredPresenter`2<TreeModelNode, IPresentableItem> Presenter { get; }
    public LiveTreeGroupModel`1<object> TreeModel { get; }
    protected LiveTreeModelGrouping`1[] Groupings { get; }
    [NotNullAttribute]
public LiveTreeModelGrouping`1[] LiveGroupings { get; }
    public string ActionBarID { get; }
    public string ContextMenuID { get; }
    public PreviewSupport PreviewSupport { get; }
    public ResxEditorOccurrenceBrowserDescriptor(ISolution solution, ResxEditorFilesCollectionModel model, IActionDefs actionDefs, GroupingManager groupingManager);
    public virtual bool get_QuickSearchSupported();
    public virtual TreeModel get_Model();
    public virtual StructuredPresenter`2<TreeModelNode, IPresentableItem> get_Presenter();
    public virtual LiveTreeGroupModel`1<object> get_TreeModel();
    protected virtual LiveTreeModelGrouping`1[] get_Groupings();
    public LiveTreeModelGrouping`1[] get_LiveGroupings();
    public virtual string get_ActionBarID();
    public virtual string get_ContextMenuID();
    public virtual PreviewSupport get_PreviewSupport();
    public virtual bool CustomizeActionBar(IActionBar bar);
    public void Refresh();
    public virtual bool Navigate(TreeModelNode node, PopupWindowContextSource windowContext, bool transferFocus, TabOptions options);
    private static bool NavigateToExistingFile(ResxEditorResourceFile file);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorProjectModelChangeProvider : object {
    [NotNullAttribute]
private ISolution mySolution;
    [CompilerGeneratedAttribute]
private ISimpleSignal <ProjectMoved>k__BackingField;
    public ISimpleSignal ProjectMoved { get; }
    public ResxEditorProjectModelChangeProvider(Lifetime lifetime, ChangeManager changeManager, ISolution solution);
    [CompilerGeneratedAttribute]
public ISimpleSignal get_ProjectMoved();
    private void Handler(ChangeEventArgs e);
}
internal class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorProjectStructureGroupProvider : object {
    public sealed virtual object ExtractGroupObject(IResxEditorNodeValue item);
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorResourceAggregatedResourceFileKey : object {
    [CompilerGeneratedAttribute]
private StringSlice <ResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectFolder <Directory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathPresentation>k__BackingField;
    public StringSlice ResourceName { get; }
    [NotNullAttribute]
public IProjectFolder Directory { get; }
    [NotNullAttribute]
public string PathPresentation { get; }
    public ResxEditorResourceAggregatedResourceFileKey(StringSlice resourceName, IProjectFolder directory, string pathPresentation);
    public ResxEditorResourceAggregatedResourceFileKey(IPsiSourceFile sourceFile);
    [CompilerGeneratedAttribute]
public StringSlice get_ResourceName();
    [CompilerGeneratedAttribute]
public IProjectFolder get_Directory();
    [CompilerGeneratedAttribute]
public string get_PathPresentation();
    protected bool Equals(ResxEditorResourceAggregatedResourceFileKey other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorResourceAggregatedResourceGroup : object {
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private ResxEditorResourceAggregatedResourceFileKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsSelected>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<ResxEditorLanguage, IResxEditorResourceFile> <AllFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceService <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<IResxEditorResourceFile> <FileChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<IResxEditorResourceFile> <FileAdded>k__BackingField;
    public Lifetime Lifetime { get; }
    [NotNullAttribute]
public ResxEditorResourceAggregatedResourceFileKey Key { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsSelected { get; }
    [NotNullAttribute]
public IDictionary`2<ResxEditorLanguage, IResxEditorResourceFile> AllFiles { get; }
    [NotNullAttribute]
public ResourceService Service { get; }
    [NotNullAttribute]
public ISignal`1<IResxEditorResourceFile> FileChanged { get; }
    [NotNullAttribute]
public ISignal`1<IResxEditorResourceFile> FileAdded { get; }
    public ResxEditorResourceAggregatedResourceGroup(Lifetime lifetime, ResxEditorResourceAggregatedResourceFileKey key, ResourceService service);
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public ResxEditorResourceAggregatedResourceFileKey get_Key();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsSelected();
    [CompilerGeneratedAttribute]
public IDictionary`2<ResxEditorLanguage, IResxEditorResourceFile> get_AllFiles();
    [CompilerGeneratedAttribute]
public ResourceService get_Service();
    [CompilerGeneratedAttribute]
public ISignal`1<IResxEditorResourceFile> get_FileChanged();
    [CompilerGeneratedAttribute]
public ISignal`1<IResxEditorResourceFile> get_FileAdded();
    public virtual string ToString();
    protected bool Equals(ResxEditorResourceAggregatedResourceGroup other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorResourceFile : object {
    private SequentialLifetimes myActionLifetimes;
    private ModificationStamp myModificationStamp;
    [CompilerGeneratedAttribute]
private IPsiSourceFile <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ResxEditorResourceAggregatedResourceGroup <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private ResxEditorLanguage <Language>k__BackingField;
    [NotNullAttribute]
public IPsiSourceFile SourceFile { get; }
    public ResxEditorResourceAggregatedResourceGroup Group { get; }
    public ResxEditorLanguage Language { get; }
    public ResxEditorResourceFile(ResxEditorResourceAggregatedResourceGroup group, ResxEditorLanguage language, IPsiSourceFile sourceFile);
    public Lifetime NextActionLifetime();
    public bool UpdateStamp();
    [CompilerGeneratedAttribute]
public IPsiSourceFile get_SourceFile();
    [CompilerGeneratedAttribute]
public sealed virtual ResxEditorResourceAggregatedResourceGroup get_Group();
    [CompilerGeneratedAttribute]
public sealed virtual ResxEditorLanguage get_Language();
    public virtual string ToString();
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorResourceItemElement : object {
    private LifetimeDefinition myLifetimeDefinition;
    [CompilerGeneratedAttribute]
private bool <NonEditable>k__BackingField;
    [CompilerGeneratedAttribute]
private ResxEditorResourceAggregatedResourceFileKey <GroupKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<ResxEditorLanguage, IResourceItem> <ResourceItemsPerCultures>k__BackingField;
    [CompilerGeneratedAttribute]
private IResourceItem <ResourceItem>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<ResxEditorLanguage, IResxEditorCellValue> <ValuesPerCultures>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<ResxEditorLanguage, IResxEditorCellValue> <CommentsPerCultures>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <HasUsages>k__BackingField;
    [CompilerGeneratedAttribute]
private static IComparer`1<ResxEditorResourceItemElement> <ByGroupsAndNameComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private static IComparer`1<ResxEditorResourceItemElement> <ByNameOnlyComparer>k__BackingField;
    public bool NonEditable { get; public set; }
    public Lifetime Lifetime { get; }
    [NotNullAttribute]
public ResxEditorResourceAggregatedResourceFileKey GroupKey { get; }
    [NotNullAttribute]
public string ResourceName { get; }
    public string FullName { get; }
    public Dictionary`2<ResxEditorLanguage, IResourceItem> ResourceItemsPerCultures { get; private set; }
    public IResourceItem ResourceItem { get; private set; }
    public IDictionary`2<ResxEditorLanguage, IResxEditorCellValue> ValuesPerCultures { get; }
    public IDictionary`2<ResxEditorLanguage, IResxEditorCellValue> CommentsPerCultures { get; }
    public IProperty`1<bool> HasUsages { get; }
    [NotNullAttribute]
public static IComparer`1<ResxEditorResourceItemElement> ByGroupsAndNameComparer { get; }
    [NotNullAttribute]
public static IComparer`1<ResxEditorResourceItemElement> ByNameOnlyComparer { get; }
    public ResxEditorResourceItemElement(LifetimeDefinition lifetimeDefinition, ResxEditorResourceAggregatedResourceFileKey groupKey, string resourceName, Dictionary`2<ResxEditorLanguage, IResourceItem> resourceItemsByLanguages);
    private static ResxEditorResourceItemElement();
    [CompilerGeneratedAttribute]
public bool get_NonEditable();
    [CompilerGeneratedAttribute]
public void set_NonEditable(bool value);
    public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public ResxEditorResourceAggregatedResourceFileKey get_GroupKey();
    [CompilerGeneratedAttribute]
public string get_ResourceName();
    public string get_FullName();
    [CompilerGeneratedAttribute]
public Dictionary`2<ResxEditorLanguage, IResourceItem> get_ResourceItemsPerCultures();
    [CompilerGeneratedAttribute]
private void set_ResourceItemsPerCultures(Dictionary`2<ResxEditorLanguage, IResourceItem> value);
    [CompilerGeneratedAttribute]
public IResourceItem get_ResourceItem();
    [CompilerGeneratedAttribute]
private void set_ResourceItem(IResourceItem value);
    [CompilerGeneratedAttribute]
public IDictionary`2<ResxEditorLanguage, IResxEditorCellValue> get_ValuesPerCultures();
    [CompilerGeneratedAttribute]
public IDictionary`2<ResxEditorLanguage, IResxEditorCellValue> get_CommentsPerCultures();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_HasUsages();
    [CompilerGeneratedAttribute]
public static IComparer`1<ResxEditorResourceItemElement> get_ByGroupsAndNameComparer();
    [CompilerGeneratedAttribute]
public static IComparer`1<ResxEditorResourceItemElement> get_ByNameOnlyComparer();
    public void Terminate();
    public void UpdateResourceItemReferences(Dictionary`2<ResxEditorLanguage, IResourceItem> resourceItemByLanguages, bool initialize);
    internal void Invalidate();
    private static IResourceItem GetDefaultResourceItem(Dictionary`2<ResxEditorLanguage, IResourceItem> resourceItemByValues);
    protected bool Equals(ResxEditorResourceItemElement other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void RemoveReference(ResxEditorLanguage language);
    public void TryInvalidateReference(ResxEditorLanguage language, ResxEditorResourceFile resourceFile);
    [CompilerGeneratedAttribute]
private bool <TryInvalidateReference>b__49_0(IResourceItem item);
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorStatusBarModel : AAutomation {
    [CompilerGeneratedAttribute]
private IProperty`1<RichText> <Path>k__BackingField;
    [NotNullAttribute]
public IProperty`1<RichText> Path { get; }
    public ResxEditorStatusBarModel(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public IProperty`1<RichText> get_Path();
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorTreeGroupingProvider : object {
    [NotNullAttribute]
private static ResxEditorDefaultProvider ourDefaultProvider;
    private static TreeModelGrouping`1[] ourGroupings;
    private static ResxEditorTreeGroupingProvider();
    private sealed virtual override ICollection`1<TreeModelGrouping`1<IResxEditorNodeValue>> JetBrains.ReSharper.Feature.Services.Tree.GroupingManagement.IGroupingProvider<JetBrains.ReSharper.I18n.Services.ResxEditor.IResxEditorNodeValue>.GetGroupings(TreeModelBrowserDescriptorBase descriptor);
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.Tree.GroupingManagement.IGroupingProvider<JetBrains.ReSharper.I18n.Services.ResxEditor.IResxEditorNodeValue>.IsApplicable(TreeModelBrowserDescriptorBase descriptor);
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorTreeModelBrowserViewContext : object {
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeModelBrowserViewContext <TreeModelBrowserViewContext>k__BackingField;
    [CompilerGeneratedAttribute]
private GroupingManager <GroupingManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionDefs <ActionDefs>k__BackingField;
    [NotNullAttribute]
public ISolution Solution { get; }
    [NotNullAttribute]
public TreeModelBrowserViewContext TreeModelBrowserViewContext { get; }
    [NotNullAttribute]
public GroupingManager GroupingManager { get; }
    [NotNullAttribute]
public IActionDefs ActionDefs { get; }
    public ResxEditorTreeModelBrowserViewContext(ISolution solution, TreeModelBrowserViewContext treeModelBrowserViewContext, GroupingManager groupingManager, IActionDefs actionDefs);
    [CompilerGeneratedAttribute]
public ISolution get_Solution();
    [CompilerGeneratedAttribute]
public TreeModelBrowserViewContext get_TreeModelBrowserViewContext();
    [CompilerGeneratedAttribute]
public GroupingManager get_GroupingManager();
    [CompilerGeneratedAttribute]
public IActionDefs get_ActionDefs();
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorTreeNodePresenter : OccurrenceBrowserPresenter {
    private static TextStyle ourMissedFileLangStyle;
    public ResxEditorTreeNodePresenter(ISolution solution, IOccurrenceBrowserPresenterContext occurrenceBrowserPresenterContext);
    private static ResxEditorTreeNodePresenter();
    private void Present(ResxEditorResourceAggregatedResourceGroup value, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
    private void Present(ResxEditorResourceFile value, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
    private void Present(ResxEditorVirtualResourceFile value, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
    private static string PresentLangShortName(string shortName);
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorVirtualResourceFile : object {
    [CompilerGeneratedAttribute]
private ResxEditorResourceAggregatedResourceGroup <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private ResxEditorLanguage <Language>k__BackingField;
    public ResxEditorResourceAggregatedResourceGroup Group { get; }
    [NotNullAttribute]
public ResxEditorLanguage Language { get; }
    public ResxEditorVirtualResourceFile(ResxEditorResourceAggregatedResourceGroup group, ResxEditorLanguage language);
    [CompilerGeneratedAttribute]
public sealed virtual ResxEditorResourceAggregatedResourceGroup get_Group();
    [CompilerGeneratedAttribute]
public sealed virtual ResxEditorLanguage get_Language();
    public virtual string ToString();
}
[PsiComponentAttribute("0")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.ResxEditorWindowHost : object {
    private static string ActionId;
    protected ISolution ourSolution;
    public ResxEditorWindowHost(ISolution solution);
    public virtual void ShowResxEditor(bool preselectGroups);
}
[SettingsKeyAttribute("System.Reflection.Missing", "JetBrains.ReSharper.I18n.Services.Resources.Strings", "LocalizationManagerPersonalSolutionSettingsSettingDescription")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Settings.ResxEditorPersonalSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.I18n.Services.Resources.Strings", "InitializedSettingDescription")]
public bool Initialized;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.I18n.Services.Resources.Strings", "DisabledLanguagesSettingDescription")]
public string DisabledLanguages;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.I18n.Services.Resources.Strings", "ShowOnlyProblemsSettingDescription")]
public bool ShowOnlyErrors;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.I18n.Services.Resources.Strings", "ShowOnlyStringResourcesSettingDescription")]
public bool ShowOnlyStringResources;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.I18n.Services.Resources.Strings", "ShowCommentsSettingDescription")]
public bool ShowComments;
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.I18n.Services.Resources.Strings", "CheckedGroupsSettingDescription")]
public IIndexedEntry`2<string, bool> CheckedGroups;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.I18n.Services.Resources.Strings", "OrderByFullPathSettingDescription")]
public bool OrderByFullPath;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.I18n.Services.Resources.Strings", "GroupingNameSettingDescription")]
public string GroupingName;
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Settings.ResxEditorPersonalSettingsStore : object {
    private static string Separator;
    private static string DefaultLanguageCode;
    private ISolution mySolution;
    private SolutionSettingsStoragePersonal mySettingsStoragePersonal;
    private ISettingsStore mySettingsStore;
    public string GroupingName { get; public set; }
    public bool ShowOnlyErrors { get; public set; }
    public bool ShowOnlyStringResources { get; public set; }
    public bool ShowComments { get; public set; }
    public bool OrderByFullPath { get; public set; }
    public ResxEditorPersonalSettingsStore(ISolution solution, SolutionSettingsStoragePersonal settingsStoragePersonal, ISettingsStore settingsStore);
    public void SetInitialized();
    public bool IsInitialized();
    public string get_GroupingName();
    public void set_GroupingName(string value);
    public bool get_ShowOnlyErrors();
    public void set_ShowOnlyErrors(bool value);
    public bool get_ShowOnlyStringResources();
    public void set_ShowOnlyStringResources(bool value);
    public bool get_ShowComments();
    public void set_ShowComments(bool value);
    public bool get_OrderByFullPath();
    public void set_OrderByFullPath(bool value);
    public bool IsChecked(ResxEditorResourceAggregatedResourceFileKey key);
    public void SetChecked(ResxEditorResourceAggregatedResourceFileKey key, bool value);
    public void Remove(ResxEditorResourceAggregatedResourceFileKey key);
    public void SaveDisabledLanguages(HashSet`1<string> disabledLanguages);
    public IEnumerable`1<string> LoadDisabledLanguages();
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Workflow.Export.ExportResourcesExecutor : object {
    private static string LineEnding;
    private Lifetime myLifetime;
    private ResxEditorContext myEditorContext;
    private ExportResourcesOptions myOptions;
    public ExportResourcesExecutor(Lifetime lifetime, ResxEditorContext editorContext, ExportResourcesOptions options);
    public sealed virtual bool Execute(IProgressIndicator pi);
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Workflow.Export.ExportResourcesOptions : object {
    public IProperty`1<string> ExportPath;
    public IProperty`1<string> Separator;
    public IProperty`1<bool> ApplyFilters;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ExportComments>k__BackingField;
    public IProperty`1<bool> ExportComments { get; }
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ExportComments();
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Workflow.Export.ExportResourcesPage : SingleBeRefactoringPage {
    private ExportResourcesOptions myViewModel;
    public string Description { get; }
    public string Title { get; }
    public ExportResourcesPage(Lifetime lifetime, ExportResourcesOptions viewModel);
    public virtual string get_Description();
    public virtual string get_Title();
    public virtual BeControl GetPageContent();
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Workflow.Export.ExportResourcesWorkflow : ResxEditorWorkflow {
    private ExportResourcesOptions myExportResourcesOptions;
    private ResxEditorContext myEditorContext;
    public string Title { get; }
    public IconId Icon { get; }
    public HelpId HelpKeyword { get; }
    public RefactoringActionGroup ActionGroup { get; }
    public IRefactoringPage FirstPendingRefactoringPage { get; }
    public bool MightModifyManyDocuments { get; }
    public ExportResourcesWorkflow(ISolution solution, string actionId);
    public virtual string get_Title();
    public virtual IconId get_Icon();
    public virtual HelpId get_HelpKeyword();
    public virtual RefactoringActionGroup get_ActionGroup();
    public virtual IRefactoringPage get_FirstPendingRefactoringPage();
    public virtual bool get_MightModifyManyDocuments();
    public virtual bool IsAvailable(IDataContext context);
    public virtual bool Initialize(IDataContext context);
    public virtual IRefactoringExecuter CreateRefactoring(IRefactoringDriver driver);
}
[ResxEditorWorkflowProviderAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Workflow.Export.ExportResourcesWorkflowProvider : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.ResxEditor.Workflow.Export.ExportResourcesWorkflowProvider/<CreateWorkflow>d__0")]
public sealed virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Workflow.Import.ImportResourcesExecutor : object {
    private IRefactoringDriver myDriver;
    private ISolution mySolution;
    private ResxEditorContext myEditorContext;
    private ImportResourcesOptions myOptions;
    private HashSet`1<IPsiSourceFile> myUpdatedFiles;
    public ImportResourcesExecutor(IRefactoringDriver driver, ISolution solution, ResxEditorContext editorContext, ImportResourcesOptions options, HashSet`1<IPsiSourceFile> updatedFiles);
    public sealed virtual bool Execute(IProgressIndicator pi);
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Workflow.Import.ImportResourcesOptions : object {
    public IProperty`1<string> ImportPath;
    public IProperty`1<string> Separator;
    public IProperty`1<bool> IgnoreEmptyValues;
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Workflow.Import.ImportResourcesPage : SingleBeRefactoringPage {
    private ImportResourcesOptions myViewModel;
    public string Description { get; }
    public string Title { get; }
    public ImportResourcesPage(Lifetime lifetime, ImportResourcesOptions viewModel);
    public virtual string get_Description();
    public virtual string get_Title();
    public virtual BeControl GetPageContent();
}
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Workflow.Import.ImportResourcesWorkflow : ResxEditorWorkflow {
    private ImportResourcesOptions myImportResourcesOptions;
    private ResxEditorContext myEditorContext;
    private HashSet`1<IPsiSourceFile> myUpdatedFiles;
    public string Title { get; }
    public IconId Icon { get; }
    public HelpId HelpKeyword { get; }
    public RefactoringActionGroup ActionGroup { get; }
    public IRefactoringPage FirstPendingRefactoringPage { get; }
    public bool MightModifyManyDocuments { get; }
    public ImportResourcesWorkflow(ISolution solution, string actionId);
    public virtual string get_Title();
    public virtual IconId get_Icon();
    public virtual HelpId get_HelpKeyword();
    public virtual RefactoringActionGroup get_ActionGroup();
    public virtual IRefactoringPage get_FirstPendingRefactoringPage();
    public virtual bool get_MightModifyManyDocuments();
    public virtual bool IsAvailable(IDataContext context);
    public virtual bool Initialize(IDataContext context);
    public virtual bool PreExecute(IProgressIndicator pi);
    public virtual void SuccessfulFinish(IProgressIndicator pi);
    public virtual IRefactoringExecuter CreateRefactoring(IRefactoringDriver driver);
}
[ResxEditorWorkflowProviderAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Workflow.Import.ImportResourcesWorkflowProvider : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.ResxEditor.Workflow.Import.ImportResourcesWorkflowProvider/<CreateWorkflow>d__0")]
public sealed virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
}
public interface JetBrains.ReSharper.I18n.Services.ResxEditor.Workflow.IResxEditorWorkflow {
}
public interface JetBrains.ReSharper.I18n.Services.ResxEditor.Workflow.IResxEditorWorkflowProvider {
}
public abstract class JetBrains.ReSharper.I18n.Services.ResxEditor.Workflow.ResxEditorWorkflow : DrivenRefactoringWorkflow {
    protected ResxEditorWorkflow(ISolution solution, string actionId);
    public virtual bool PostExecute(IProgressIndicator pi);
    private void StartAndAdvanceProgressIndicator(IProgressIndicator pi);
    public virtual bool PreExecute(IProgressIndicator pi);
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.I18n.Services.ResxEditor.Workflow.IResxEditorWorkflowProvider")]
[MeansImplicitUseAttribute]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.Workflow.ResxEditorWorkflowProviderAttribute : ShellComponentAttribute {
    public ResxEditorWorkflowProviderAttribute(Instantiation instantiation);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.I18n.Services.ResxEditor.ZoneMarker : object {
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.I18n.Services.RunCustomToolEx : object {
    [ExtensionAttribute]
public static bool RunCustomTool(IPsiSourceFile projectFile, IProgressIndicator progressIndicator);
    [ExtensionAttribute]
public static void RunCustomToolAsync(IPsiSourceFile projectFile, Lifetime lifetime, IThreading invocator, ICustomToolService customToolService);
}
[ResourceSearchDomainProviderAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.Searching.CommonResourceSearchDomainProvider : object {
    private SearchDomainFactory mySearchDomainFactory;
    public CommonResourceSearchDomainProvider(SearchDomainFactory searchDomainFactory);
    public sealed virtual ISearchDomain GetSearchDomain(IResourceItemDeclaredElement element, ISearchDomain searchDomain);
}
internal class JetBrains.ReSharper.I18n.Services.Searching.ComponentReferenceSearcher : object {
    private ReferenceSearcherParameters myReferenceSearcherParameters;
    private bool myLateBoundReferences;
    private IDeclaredElement[] myElements;
    private bool myNeedToRun;
    public ComponentReferenceSearcher(IDeclaredElementsSet elements, ReferenceSearcherParameters referenceSearcherParameters, bool lateBoundReferences);
    public sealed virtual bool ProcessProjectItem(IPsiSourceFile sourceFile, IFindResultConsumer`1<TResult> consumer);
    public sealed virtual bool ProcessElement(ITreeNode element, IFindResultConsumer`1<TResult> consumer);
    private bool Search(IFindResultConsumer`1<TResult> consumer);
    private static bool IsValidElement(IDeclaredElement element);
    private static bool IsInitializeComponent(IMethod method);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.Searching.ComponentReferenceSearcher/<GetAllPossibleWordsInFile>d__10")]
[NotNullAttribute]
private static IEnumerable`1<string> GetAllPossibleWordsInFile(IDeclaredElement element);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.Searching.ComponentReferenceSearcher/<GetNames>d__11")]
[NotNullAttribute]
private static IEnumerable`1<string> GetNames(IDeclaredElement element);
    [NotNullAttribute]
private static ISearchDomain GetSearchDomain(IEnumerable`1<IDeclaredElement> elements);
}
[PsiSharedComponentAttribute]
internal class JetBrains.ReSharper.I18n.Services.Searching.ComponentReferenceSearcherFactory : DomainSpecificSearcherFactoryBase {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.Searching.ComponentReferenceSearcherFactory/<GetAllPossibleWordsInFile>d__0")]
public virtual IEnumerable`1<string> GetAllPossibleWordsInFile(IDeclaredElement element);
    public virtual IDomainSpecificSearcher CreateReferenceSearcher(IDeclaredElementsSet elements, ReferenceSearcherParameters referenceSearcherParameters);
    public virtual IDomainSpecificSearcher CreateLateBoundReferenceSearcher(IDeclaredElementsSet elements, ReferenceSearcherParameters referenceSearcherParameters);
    public virtual bool IsCompatibleWithLanguage(PsiLanguageType languageType);
}
public interface JetBrains.ReSharper.I18n.Services.Searching.IComponentReferenceSearcherSwitch {
}
public interface JetBrains.ReSharper.I18n.Services.Searching.IResourceAccessor {
    public byte Priority { get; }
    [CanBeNullAttribute]
public IDeclaredElement DeclaredElement { get; }
    public abstract virtual byte get_Priority();
    [CanBeNullAttribute]
public abstract virtual ITreeNode Replace(ITreeNode element);
    public abstract virtual IDeclaredElement get_DeclaredElement();
}
public interface JetBrains.ReSharper.I18n.Services.Searching.IResourceAccessorFinder {
    public abstract virtual IEnumerable`1<IResourceAccessor> FindAccessors(IResourceItemDeclaredElement element, IEnumerable`1<IResourceAccessor> accessors);
    public abstract virtual IEnumerable`1<ITypeElement> FindTypeElements(IPsiSourceFile resourceFile);
}
public interface JetBrains.ReSharper.I18n.Services.Searching.IResourceSearchDomainProvider {
    [NotNullAttribute]
public abstract virtual ISearchDomain GetSearchDomain(IResourceItemDeclaredElement element, ISearchDomain searchDomain);
}
internal class JetBrains.ReSharper.I18n.Services.Searching.PathDeclaredElementReferenceSearcher : object {
    private IDeclaredElementsSet`1<IPathDeclaredElement> myElements;
    private ReferenceSearcherParameters myReferenceSearcherParameters;
    public PathDeclaredElementReferenceSearcher(IDeclaredElementsSet`1<IPathDeclaredElement> elements, ReferenceSearcherParameters referenceSearcherParameters);
    public sealed virtual bool ProcessProjectItem(IPsiSourceFile sourceFile, IFindResultConsumer`1<TResult> consumer);
    private bool NeedToProcess(IPsiSourceFile sourceFile, IWordIndex wordIndex);
    public sealed virtual bool ProcessElement(ITreeNode element, IFindResultConsumer`1<TResult> consumer);
}
[PsiComponentAttribute("0")]
internal class JetBrains.ReSharper.I18n.Services.Searching.PathDeclaredElementSearcherFactory : DomainSpecificSearcherFactoryBase {
    private IWordIndex myWordIndex;
    private IPsiModules myPsiModules;
    public PathDeclaredElementSearcherFactory(IWordIndex wordIndex, IPsiModules psiModules);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.Searching.PathDeclaredElementSearcherFactory/<GetAllPossibleWordsInFile>d__3")]
public virtual IEnumerable`1<string> GetAllPossibleWordsInFile(IDeclaredElement element);
    public virtual IDomainSpecificSearcher CreateLateBoundReferenceSearcher(IDeclaredElementsSet elements, ReferenceSearcherParameters referenceSearcherParameters);
    public virtual IDomainSpecificSearcher CreateReferenceSearcher(IDeclaredElementsSet elements, ReferenceSearcherParameters referenceSearcherParameters);
    public virtual bool IsCompatibleWithLanguage(PsiLanguageType languageType);
    public virtual ISearchDomain GetDeclaredElementSearchDomain(IDeclaredElement declaredElement);
    [CompilerGeneratedAttribute]
private IEnumerable`1<IPsiModule> <GetDeclaredElementSearchDomain>b__7_1(IProject project);
}
[PsiSharedComponentAttribute]
public class JetBrains.ReSharper.I18n.Services.Searching.ResourceAccessorFinder : object {
    [NotNullAttribute]
private IEnumerable`1<IResourceAccessorFinder> myFinders;
    public static ResourceAccessorFinder Instance { get; }
    public ResourceAccessorFinder(Lifetime lifetime, IOrderedImmutableList`2<IResourceAccessorFinder, ResourceAccessorsFinderAttribute> finders);
    public static ResourceAccessorFinder get_Instance();
    [NotNullAttribute]
public ICollection`1<IResourceAccessor> FindAccessors(IResourceItemDeclaredElement element);
    [NotNullAttribute]
public IEnumerable`1<ITypeElement> FindTypeElements(IPsiSourceFile sourceFile);
    [CanBeNullAttribute]
private static IResourceItemDeclaredElement GetElementFromDefaultCulture(IResourceItemDeclaredElement element);
}
public abstract class JetBrains.ReSharper.I18n.Services.Searching.ResourceAccessorFinderBase`2 : object {
    private GeneratedFileFinder myGeneratedFileFinder;
    private SearchDomainFactory mySearchDomainFactory;
    protected ResourceAccessorFinderBase`2(GeneratedFileFinder generatedFileFinder, SearchDomainFactory searchDomainFactory);
    public sealed virtual IEnumerable`1<IResourceAccessor> FindAccessors(IResourceItemDeclaredElement element, IEnumerable`1<IResourceAccessor> accessors);
    public sealed virtual IEnumerable`1<ITypeElement> FindTypeElements(IPsiSourceFile resourceFile);
    protected virtual bool IsSupport(IResourceItemDeclaredElement element);
    protected abstract virtual IResourceAccessor CreateResourceAccessor(ITypeMember typeMember);
    [CanBeNullAttribute]
protected abstract virtual IArgument GetArgument(ITreeNode element);
    [CanBeNullAttribute]
protected abstract virtual IExpression GetArgumentValue(IArgument argument);
    [NotNullAttribute]
private IEnumerable`1<ITypeMemberDeclaration> FindResourceAccessors(IResourceItemDeclaredElement element);
    [NotNullAttribute]
private IEnumerable`1<ITypeMemberDeclaration> FindResourceAccessors(IFile file, IResourceItemDeclaredElement element);
    [CompilerGeneratedAttribute]
private IResourceAccessor <FindAccessors>b__3_0(ITypeMemberDeclaration typeMemberDeclaration);
    [CompilerGeneratedAttribute]
private IProjectFile <IsSupport>b__5_0(IPsiSourceFile file);
}
[MeansImplicitUseAttribute]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.I18n.Services.Searching.IResourceAccessorFinder")]
public class JetBrains.ReSharper.I18n.Services.Searching.ResourceAccessorsFinderAttribute : PsiSharedComponentAttribute {
    [CompilerGeneratedAttribute]
private byte <Priority>k__BackingField;
    public byte Priority { get; public set; }
    public ResourceAccessorsFinderAttribute(Instantiation instantiation);
    [CompilerGeneratedAttribute]
public sealed virtual byte get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(byte value);
}
[MeansImplicitUseAttribute]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.I18n.Services.Searching.IResourceSearchDomainProvider")]
public class JetBrains.ReSharper.I18n.Services.Searching.ResourceSearchDomainProviderAttribute : PsiSharedComponentAttribute {
    [CompilerGeneratedAttribute]
private byte <Priority>k__BackingField;
    public byte Priority { get; public set; }
    public ResourceSearchDomainProviderAttribute(Instantiation instantiation);
    [CompilerGeneratedAttribute]
public sealed virtual byte get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(byte value);
}
[PsiSharedComponentAttribute]
internal class JetBrains.ReSharper.I18n.Services.Searching.ResourceSearchService : object {
    private ResourceAccessorFinder myResourceAccessorFinder;
    [NotNullAttribute]
private IOrderedImmutableList`1<IResourceSearchDomainProvider> myProviders;
    public ResourceSearchService(Lifetime lifetime, ResourceAccessorFinder resourceAccessorFinder, IOrderedImmutableList`2<IResourceSearchDomainProvider, ResourceSearchDomainProviderAttribute> providers);
    public sealed virtual ISearchDomain GetSearchDomain(IResourceItemDeclaredElement element);
    public sealed virtual IEnumerable`1<IDeclaredElement> GetResourceAccessors(IResourceItemDeclaredElement element);
}
public class JetBrains.ReSharper.I18n.Services.Searching.ResxReferenceSearcher : object {
    private ICollection`1<IDeclaredElement> myElements;
    private JetHashSet`1<string> myWordsInFiles;
    private JetHashSet`1<string> myNames;
    private IDeclaredElementsSet mySet;
    private ReferenceSearcherParameters myReferenceSearcherParameters;
    public ResxReferenceSearcher(IDomainSpecificSearcherFactory factory, IDeclaredElementsSet elements, ReferenceSearcherParameters referenceSearcherParameters);
    private bool CanContainsDeclaredElement(IDeclaredElement de);
    public sealed virtual bool ProcessProjectItem(IPsiSourceFile sourceFile, IFindResultConsumer`1<TResult> consumer);
    public sealed virtual bool ProcessElement(ITreeNode element, IFindResultConsumer`1<TResult> consumer);
}
[PsiComponentAttribute("0")]
public class JetBrains.ReSharper.I18n.Services.Searching.ResxSearcherFactory : DomainSpecificSearcherFactoryBase {
    private SearchDomainFactory mySearchDomainFactory;
    private IResourceSearchService myResourceSearchService;
    private ResourceAccessorFinder myResourceAccessorFinder;
    private GeneratedFileFinder myGeneratedFileFinder;
    private ISolutionResourceCache mySolutionResourceCache;
    private IWordIndex myWordIndex;
    public ResxSearcherFactory(SearchDomainFactory searchDomainFactory, IResourceSearchService resourceSearchService, ResourceAccessorFinder resourceAccessorFinder, GeneratedFileFinder generatedFileFinder, ISolutionResourceCache solutionResourceCache, IWordIndex wordIndex);
    public virtual bool IsCompatibleWithLanguage(PsiLanguageType languageType);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.Searching.ResxSearcherFactory/<GetAllPossibleWordsInFile>d__8")]
public virtual IEnumerable`1<string> GetAllPossibleWordsInFile(IDeclaredElement element);
    public virtual ISearchDomain GetDeclaredElementSearchDomain(IDeclaredElement declaredElement);
    public virtual IDomainSpecificSearcher CreateReferenceSearcher(IDeclaredElementsSet elements, ReferenceSearcherParameters referenceSearcherParameters);
    public virtual IDomainSpecificSearcher CreateConstantExpressionSearcher(ConstantValue constantValue, bool onlyLiteralExpression);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.Searching.ResxSearcherFactory/<GetRelatedDeclaredElements>d__12")]
public virtual IEnumerable`1<RelatedDeclaredElement> GetRelatedDeclaredElements(IDeclaredElement element);
    public virtual DerivedFindRequest GetDerivedFindRequest(IFindResultReference result);
    public virtual NavigateTargets GetNavigateToTargets(IDeclaredElement element);
    private bool IsInGeneratedCode(FindResult findResult, IPsiSourceFile masterFile);
    [CompilerGeneratedAttribute]
private IProjectFile <GetRelatedDeclaredElements>b__12_4(IProjectFile f);
    [CompilerGeneratedAttribute]
private IProjectFile <GetNavigateToTargets>b__14_2(IProjectFile f);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.Services.ExtractToResource.ExpressionToResourceChecker : object {
    protected ResourceAccessorFinder ResourceAccessorFinder;
    public ExpressionToResourceChecker(ResourceAccessorFinder resourceAccessorFinder);
    public virtual bool CanUseResource(IPsiSourceFile resourceFile, IAccessContext context);
}
public interface JetBrains.ReSharper.I18n.Services.Services.IResourceModificationService {
    public abstract virtual void DeleteResourceItem(IResourceItem resourceItem);
    public abstract virtual void DeleteResourceItem(IPsiSourceFile resourceFile, string name);
    public abstract virtual void AddResourceItem(IPsiSourceFile resourceFile, string name, string value, string comment, IType type, bool inLexicalOrder);
    public abstract virtual void ChangeResourceItem(IResourceItem resourceItem, string newValue, string newComment);
    public abstract virtual void ChangeResourceItemName(IPsiSourceFile resourceFile, string oldName, string newName);
    public abstract virtual void MoveResourceItem(IResourceItem resourceItem, IPsiSourceFile targetResourceFile, string newName);
    public abstract virtual void CopyResourceItem(IResourceItem resourceItem, IPsiSourceFile targetResourceFile, string newName);
}
public interface JetBrains.ReSharper.I18n.Services.Services.IResourceSearchService {
    public abstract virtual ISearchDomain GetSearchDomain(IResourceItemDeclaredElement element);
    public abstract virtual IEnumerable`1<IDeclaredElement> GetResourceAccessors(IResourceItemDeclaredElement element);
}
public class JetBrains.ReSharper.I18n.Services.UI.ComboBoxItem`1 : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [NotNullAttribute]
public string Name { get; }
    public T Value { get; }
    public ComboBoxItem`1(string name, T value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public T get_Value();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ComboBoxItem`1<T> comboBoxItem);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[OptionsPageAttribute("LocalizationOptions", "Localization", "JetBrains.ReSharper.Feature.Services.Resx.Resources.Services118nThemedIcons/Localization")]
public class JetBrains.ReSharper.I18n.Services.UI.Options.LocalizationOptionPage : SimpleOptionsPage {
    public static string ID;
    public LocalizationOptionPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.I18n.Services.UI.Options.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.I18n.Services.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
