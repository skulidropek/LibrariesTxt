[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Asp.ContextActions.AddCodeBehindFileContextAction : ContextActionBase {
    [NotNullAttribute]
private IWebContextActionDataProvider`1<IAspFile> myDataProvider;
    public string Text { get; }
    public AddCodeBehindFileContextAction(IWebContextActionDataProvider`1<IAspFile> dataProvider);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual void Execute(ISolution solution, ITextControl textControl);
    public static void AddCodeBehind(ISolution solution, string commandText, IWebContextActionDataProvider`1<IAspFile> provider, ITextControl textControl, Func`2<IWebContextActionDataProvider`1<IAspFile>, IAspMainDirective> directiver, Action`2<IWebContextActionDataProvider`1<IAspFile>, ITypeDeclarationWithRangeContainer> actor);
    public static string GetCodeBehindAttributeName(IProject project);
    private static void ShowNotSupportedLanguageBanner(ITextControl textControl);
}
public abstract class JetBrains.ReSharper.Intentions.Asp.ContextActions.AspContextActionWithReferenceBase`1 : object {
    private IWebContextActionDataProvider`1<IAspFile> myDataProvider;
    private bool myEvaluated;
    private TReference myReference;
    [CanBeNullAttribute]
public TReference Reference { get; }
    protected AspContextActionWithReferenceBase`1(IWebContextActionDataProvider`1<IAspFile> dataProvider);
    public TReference get_Reference();
    [CanBeNullAttribute]
private TReference GetReference();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public abstract virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected abstract virtual bool IsAvailableInternal(TReference reference, IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Asp.ContextActions.AspCreateEventContextAction : AspContextActionWithReferenceBase`1<IHtmlAttributeOrPropertyReference> {
    [NullableAttribute("2")]
private ITypeDeclaration myTypeDeclaration;
    public AspCreateEventContextAction(IWebContextActionDataProvider`1<IAspFile> dataProvider);
    protected virtual bool IsAvailableInternal(IHtmlAttributeOrPropertyReference reference, IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Asp.ContextActions.AspCreateMethodContextAction : AspCreateMethodContextActionBase`1<IAspMethodReference> {
    public AspCreateMethodContextAction(IWebContextActionDataProvider`1<IAspFile> dataProvider);
}
public abstract class JetBrains.ReSharper.Intentions.Asp.ContextActions.AspCreateMethodContextActionBase`1 : AspContextActionWithReferenceBase`1<TReference> {
    private AspMethodReferenceHelper`1<TReference> myHelper;
    protected AspCreateMethodContextActionBase`1(IWebContextActionDataProvider`1<IAspFile> dataProvider);
    protected virtual bool IsAvailableInternal(TReference reference, IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Asp.ContextActions.AspCreateOdsMethodContextAction : AspCreateMethodContextActionBase`1<IOdsMethodReference> {
    public AspCreateOdsMethodContextAction(IWebContextActionDataProvider`1<IAspFile> dataProvider);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Asp.ContextActions.AspCreatePropertyFromAttributeContextAction : AspContextActionWithReferenceBase`1<IHtmlAttributeOrPropertyReference> {
    private ITypeDeclaration myTypeDeclaration;
    public AspCreatePropertyFromAttributeContextAction(IWebContextActionDataProvider`1<IAspFile> dataProvider);
    protected virtual bool IsAvailableInternal(IHtmlAttributeOrPropertyReference reference, IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Asp.ContextActions.AspCreatePropertyFromSubPropertyContextAction : AspContextActionWithReferenceBase`1<ISubPropertyReference> {
    private ITypeDeclaration myTypeDeclaration;
    public AspCreatePropertyFromSubPropertyContextAction(IWebContextActionDataProvider`1<IAspFile> dataProvider);
    protected virtual bool IsAvailableInternal(ISubPropertyReference reference, IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Asp.ContextActions.AspImageSizeContextAction : ContextActionBase {
    private IWebContextActionDataProvider`1<IAspFile> myDataProvider;
    public string Text { get; }
    public AspImageSizeContextAction(IWebContextActionDataProvider`1<IAspFile> dataProvider);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual void Execute(ISolution solution, ITextControl textControl);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Asp.ContextActions.AspImportTypeContextAction : object {
    private IWebContextActionDataProvider`1<IAspFile> myDataProvider;
    private IReference myReference;
    private IList`1<ITypeElement> myAlternatives;
    public AspImportTypeContextAction(IWebContextActionDataProvider`1<IAspFile> dataProvider);
    [CanBeNullAttribute]
private IReference GetMainReference();
    private IList`1<ITypeElement> GetAlternatives();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Asp.ContextActions.AspImportTypeContextAction/<CreateBulbItems>d__7")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Asp.ContextActions.ConvertTagContextAction : ContextActionBase {
    private IWebContextActionDataProvider`1<IAspFile> myDataProvider;
    [LocalizableAttribute("False")]
private static BidirectionalMap`2<string, string> ourTagsMap;
    [LocalizableAttribute("False")]
private static IDictionary`2<string, IDictionary`2<string, string>> ourTagAttributesMap;
    [LocalizableAttribute("False")]
private static IDictionary`2<string, IDictionary`2<string, string>> ourServerTagAttributesMap;
    [LocalizableAttribute("False")]
private static String[] ourIdAttrs;
    public string Text { get; }
    public ConvertTagContextAction(IWebContextActionDataProvider`1<IAspFile> dataProvider);
    private static ConvertTagContextAction();
    [CanBeNullAttribute]
protected ITagNameContainer GetActiveTag();
    [CanBeNullAttribute]
private static string GetTagId(ITagNameContainer container);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Asp.ContextActions.ConvertTagContextAction/<GetAttrRanges>d__11")]
private static IEnumerable`1<Tuple`2<IRangeMarker, string>> GetAttrRanges(ITagAttribute attr, IDictionary`2<string, string> attrMap);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual void Execute(ISolution solution, ITextControl textControl);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Asp.ContextActions.MergeScriptletsContextAction : ContextActionBase {
    private IWebContextActionDataProvider`1<IAspFile> myDataProvider;
    public string Text { get; }
    public MergeScriptletsContextAction(IWebContextActionDataProvider`1<IAspFile> dataProvider);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual void Execute(ISolution solution, ITextControl textControl);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Asp.ContextActions.MoveScriptletToCodeBehindContextAction : ContextActionBase {
    private IWebContextActionDataProvider`1<IAspFile> myDataProvider;
    public string Text { get; }
    public MoveScriptletToCodeBehindContextAction(IWebContextActionDataProvider`1<IAspFile> dataProvider);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual Action`1<ITextControl> ExecuteAfterPsiTransaction(ISolution solution, IProjectModelTransactionCookie cookie, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Asp.ContextActions.RemoveCodeBehindFileContextAction : ContextActionBase {
    private IWebContextActionDataProvider`1<IAspFile> myDataProvider;
    public string Text { get; }
    public RemoveCodeBehindFileContextAction(IWebContextActionDataProvider`1<IAspFile> dataProvider);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual Action`1<ITextControl> ExecuteAfterPsiTransaction(ISolution solution, IProjectModelTransactionCookie cookie, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Asp.ContextActions.RemoveDirectiveAttributeContextAction : RemoveAttributeContextActionBase`1<IAspDirectiveAttribute> {
    public RemoveDirectiveAttributeContextAction(IWebContextActionDataProvider`1<IHtmlFile> dataProvider);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Asp.ContextActions.ReorderDirectiveAttributesContextAction : ReorderAttributesContextActionBase`2<IAspDirectiveAttribute, IAspDirective> {
    public ReorderDirectiveAttributesContextAction(IWebContextActionDataProvider`1<IAspFile> dataProvider);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Intentions.Asp.ContextActions.ZoneMarker : object {
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Asp.CSharp.QuickFixes.AspOptimizeImportsFix : OptimizeImportsFix {
    public AspOptimizeImportsFix(AspUnusedUsingDirectiveWarning error);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.Asp.CSharp.QuickFixes.AspQuickFixesRegistrator : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
public abstract class JetBrains.ReSharper.Intentions.Asp.CSharp.QuickFixes.Mvc.CastInModelArgumentBase : CastInArgumentBase {
    [NotNullAttribute]
private IType myModelType;
    protected bool AsCast { get; }
    protected CastInModelArgumentBase(MvcConfigurableInvalidModelType error);
    protected abstract virtual bool get_AsCast();
    protected virtual IList`1<ValueTuple`2<ICSharpExpression, IType>> PossibleTypes(ICSharpExpression expression);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.Asp.CSharp.QuickFixes.Mvc.CastInModelArgumentFix : CastInModelArgumentBase {
    protected bool AsCast { get; }
    public CastInModelArgumentFix(MvcConfigurableInvalidModelType error);
    protected virtual bool get_AsCast();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.Asp.CSharp.QuickFixes.Mvc.CSharpMvcLanguageHelper : GenericMvcLanguageHelper {
    public virtual IType GetAssigmentType(IExpression expression);
    public virtual bool IsAttribute(IArgumentsOwner node);
    public virtual IEnumerable`1<IDeclaration> GetAttributeDeclarations(IArgumentsOwner node);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.Asp.CSharp.QuickFixes.Mvc.CSharpMvcQuickFixTemplateProvider : MvcQuickFixTemplateProviderBase {
    private static IDictionary`2<Pair`2<bool, bool>, Guid> ourTemplates;
    private static CSharpMvcQuickFixTemplateProvider();
    public virtual Guid GetTemplateGuid(bool viewPage, bool withMasterpage);
}
public class JetBrains.ReSharper.Intentions.Asp.CSharp.QuickFixes.Mvc.SafeCastInModelArgumentFix : CastInModelArgumentBase {
    protected bool AsCast { get; }
    public SafeCastInModelArgumentFix(MvcConfigurableInvalidModelType error);
    protected virtual bool get_AsCast();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Intentions.Asp.CSharp.ZoneMarker : object {
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Asp.QuickFixes.AspAttributeWithOptionalValueQuickFix : object {
    private ITagAttribute myTagAttribute;
    public AspAttributeWithOptionalValueQuickFix(AspAttributeWithOptionalValueWarningHighlighting highlighting);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Asp.QuickFixes.AspChangeSignatureQuickFix : object {
    private IEventHandlerReference myReference;
    private IParametersOwner mySourceDelegate;
    private ISubstitution mySourceSubstitution;
    private IParametersOwner myTarget;
    private List`1<IParametersOwnerDeclaration> myTargetDeclarations;
    public AspChangeSignatureQuickFix(AspResolveErrorHighlighting`1<IEventHandlerReference> highlighting);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Asp.QuickFixes.AspCodeBehindFileQuickFix : object {
    private IPathReference myReference;
    public string Text { get; }
    public AspCodeBehindFileQuickFix(HtmlPathWarningHighlighting pathWarningHighlighting);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual string get_Text();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Asp.QuickFixes.AspCodeFileWithoutInheritsAttributeQuickFix : object {
    private IAspMainDirective myMainDirective;
    public IBulbAction[] Items { get; }
    public AspCodeFileWithoutInheritsAttributeQuickFix(AspCodeFileWithoutInheritsAttributeErrorHighlighting highlighting);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public IBulbAction[] get_Items();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    private static ITypeElement FindTypeElement(ITypeAndNamespaceHolderDeclaration holder);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Asp.QuickFixes.AspCreateMissingAttributeQuickFix : QuickFixBase {
    private AspMissingAttributeHighlighting myHighlighting;
    public string Text { get; }
    public AspCreateMissingAttributeQuickFix(AspMissingAttributeHighlighting highlighting);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Asp.QuickFixes.AspCreatePlaceholderQuickFix : object {
    private AspNotResolvedErrorHighlighting`1<IContentPlaceholderReference> myHighlighting;
    public string Text { get; }
    public AspCreatePlaceholderQuickFix(AspNotResolvedErrorHighlighting`1<IContentPlaceholderReference> highlighting);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual string get_Text();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Asp.QuickFixes.AspCustomPageParserFilterTypeFix : object {
    private IProject myProject;
    public AspCustomPageParserFilterTypeFix(AspCustomPageParserFilterTypeHighlighting highlighting);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Asp.QuickFixes.AspImageQuickFix : object {
    private AspImageWarningHighlighting myImageWarning;
    public AspImageQuickFix(AspImageWarningHighlighting imageWarning);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Asp.QuickFixes.AspOptimizeRegisterDirectivesQuickFix : ModernScopedQuickFixWithCustomExecutor {
    private IAspRegisterDirective myRegisterDirective;
    public string Text { get; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public AspOptimizeRegisterDirectivesQuickFix(AspUnusedRegisterDirectiveHighlighting highlighting);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual ScopedActionExecutor GetScopedQuickFixExecutor(ISolution solution, IScopedFixingStrategy fixingStrategy, PsiLanguageType languageType);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Asp.QuickFixes.AspScriptLanguageQuickFix : object {
    private AspScriptLanguageErrorHighlighting myError;
    public string Text { get; }
    public AspScriptLanguageQuickFix(AspScriptLanguageErrorHighlighting error);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
    public sealed virtual string get_Text();
    [CompilerGeneratedAttribute]
private void <Execute>b__4_0();
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Asp.QuickFixes.AspTagToAttributeQuickFix : object {
    private AspResolveErrorHighlighting`1<IHtmlTagOrPropertyReference> myHighlighting;
    public AspTagToAttributeQuickFix(AspResolveErrorHighlighting`1<IHtmlTagOrPropertyReference> highlighting);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Asp.QuickFixes.CreateFromUsage.AspCreateClassFromUsageFix : ModernQuickFixBase {
    private IWebTypeReference myReference;
    [NullableAttribute("2")]
private ICreationTarget myCreationTarget;
    [NullableAttribute("2")]
private PsiLanguageType myTargetLanguage;
    public string Text { get; }
    public AspCreateClassFromUsageFix(AspNotResolvedErrorHighlighting`1<IWebTypeReference> error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private static IntentionLanguageSpecific CalculateIntentionLanguageSpecific(PsiLanguageType language);
    private CreateClassDeclarationContext CreateContext();
    private static SimpleTypeImage CalculateExpectedBaseType(IWebTypeReference reference);
    [NullableContextAttribute("2")]
private ICreationTarget CreateTarget();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
private IBulbActionCommand <ExecutePsiTransaction>b__11_0(ISolution _, ITextControl _, IProgressIndicator _);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Asp.QuickFixes.CreateFromUsage.AspCreateEventHandlerQuickFix : AspCreateMethodFromUsageQuickFixBase`1<IEventHandlerReference> {
    public AspCreateEventHandlerQuickFix(AspNotResolvedErrorHighlighting`1<IEventHandlerReference> highlighting);
    protected virtual MethodReferenceHelper`1<IEventHandlerReference> CreateHelper(IEventHandlerReference reference);
    protected virtual bool IsAvailableInternal(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class JetBrains.ReSharper.Intentions.Asp.QuickFixes.CreateFromUsage.AspCreateFromUsageBulbActionBase`1 : ModernBulbActionBase {
    protected TReference Reference;
    protected ITypeDeclaration TargetDeclaration;
    public string Text { get; }
    protected string MemberName { get; }
    protected AspCreateFromUsageBulbActionBase`1(TReference reference, ITypeDeclaration targetDeclaration);
    public virtual string get_Text();
    protected abstract virtual string get_MemberName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.Asp.QuickFixes.CreateFromUsage.AspCreateFromUsageQuickFixBase`1 : object {
    protected TReference Reference;
    [NullableAttribute("2")]
private ITypeDeclaration myTargetDeclaration;
    protected AspCreateFromUsageQuickFixBase`1(AspNotResolvedErrorHighlighting`1<TReference> highlighting);
    [NullableContextAttribute("2")]
protected ITypeDeclaration GetTargetDeclaration();
    protected abstract virtual bool IsSuitableTargetDeclaration(IDeclaration typeDeclaration);
    [NullableContextAttribute("2")]
protected virtual ITypeElement GetTargetTypeElement();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual bool IsAvailableInternal(IUserDataHolder cache);
    public abstract virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.Asp.QuickFixes.CreateFromUsage.AspCreateMethodBulbAction`1 : ModernBulbActionBase {
    [CompilerGeneratedAttribute]
private TReference <reference>P;
    [CompilerGeneratedAttribute]
private MethodReferenceHelper`1<TReference> <helper>P;
    public string Text { get; }
    public AspCreateMethodBulbAction`1(TReference reference, MethodReferenceHelper`1<TReference> helper);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Intentions.Asp.QuickFixes.CreateFromUsage.AspCreateMethodFromUsageQuickFixBase`1 : AspCreateFromUsageQuickFixBase`1<TReference> {
    [CompilerGeneratedAttribute]
private MethodReferenceHelper`1<TReference> <Helper>k__BackingField;
    protected MethodReferenceHelper`1<TReference> Helper { get; }
    protected AspCreateMethodFromUsageQuickFixBase`1(AspNotResolvedErrorHighlighting`1<TReference> highlighting);
    [CompilerGeneratedAttribute]
protected MethodReferenceHelper`1<TReference> get_Helper();
    protected abstract virtual MethodReferenceHelper`1<TReference> CreateHelper(TReference reference);
    protected virtual bool IsSuitableTargetDeclaration(IDeclaration typeDeclaration);
    [NullableContextAttribute("2")]
protected virtual ITypeElement GetTargetTypeElement();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Asp.QuickFixes.CreateFromUsage.AspCreateMethodQuickFix : AspCreateMethodFromUsageQuickFixBase`1<IAspMethodReference> {
    public AspCreateMethodQuickFix(AspNotResolvedErrorHighlighting`1<IAspMethodReference> highlighting);
    protected virtual MethodReferenceHelper`1<IAspMethodReference> CreateHelper(IAspMethodReference reference);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Asp.QuickFixes.CreateFromUsage.AspCreateOdsMethodQuickFix : AspCreateMethodFromUsageQuickFixBase`1<IOdsMethodReference> {
    public AspCreateOdsMethodQuickFix(AspNotResolvedErrorHighlighting`1<IOdsMethodReference> highlighting);
    protected virtual MethodReferenceHelper`1<IOdsMethodReference> CreateHelper(IOdsMethodReference reference);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Intentions.Asp.QuickFixes.CreateFromUsage.AspCreatePropertyBulbAction`1 : AspCreateFromUsageBulbActionBase`1<TReference> {
    [CompilerGeneratedAttribute]
private AccessRights <accessRights>P;
    protected string MemberName { get; }
    public AspCreatePropertyBulbAction`1(TReference reference, ITypeDeclaration targetDeclarations, AccessRights accessRights);
    protected virtual string get_MemberName();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Asp.QuickFixes.CreateFromUsage.AspCreatePropertyFromAttributeQuickFix : AspCreatePropertyQuickFixBase`1<IHtmlAttributeOrPropertyReference> {
    public AspCreatePropertyFromAttributeQuickFix(AspNotResolvedErrorHighlighting`1<IHtmlAttributeOrPropertyReference> highlighting);
    protected virtual bool IsAvailableInternal(IUserDataHolder cache);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Asp.QuickFixes.CreateFromUsage.AspCreatePropertyFromSubpropertyReferenceQuickFix : AspCreatePropertyQuickFixBase`1<ISubPropertyReference> {
    public AspCreatePropertyFromSubpropertyReferenceQuickFix(AspNotResolvedErrorHighlighting`1<ISubPropertyReference> highlighting);
    protected virtual bool IsAvailableInternal(IUserDataHolder cache);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Asp.QuickFixes.CreateFromUsage.AspCreatePropertyFromTagQuickFix : AspCreatePropertyQuickFixBase`1<IHtmlTagOrPropertyReference> {
    public AspCreatePropertyFromTagQuickFix(AspNotResolvedErrorHighlighting`1<IHtmlTagOrPropertyReference> highlighting);
    protected virtual bool IsAvailableInternal(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Intentions.Asp.QuickFixes.CreateFromUsage.AspCreatePropertyQuickFixBase`1 : AspCreateFromUsageQuickFixBase`1<TReference> {
    protected AspCreatePropertyQuickFixBase`1(AspNotResolvedErrorHighlighting`1<TReference> highlighting);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual bool IsSuitableTargetDeclaration(IDeclaration typeDeclaration);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Asp.QuickFixes.Import.AspCreateFileQuickFix : object {
    private static OneToListMap`2<string, Guid> TEMPLATE_GUIDS;
    private HtmlPathWarningHighlighting myHighlighting;
    private IProjectFolder myTargetFolder;
    private IList`1<Guid> myTemplateGuids;
    private string myFileName;
    public AspCreateFileQuickFix(HtmlPathWarningHighlighting highlighting);
    private static AspCreateFileQuickFix();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Asp.QuickFixes.Import.AspCreateFileQuickFix/<CreateBulbItems>d__7")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
internal class JetBrains.ReSharper.Intentions.Asp.QuickFixes.Import.AspImportTagNameBulbItem : BulbActionBase {
    private ICollection`1<IReference> myReferences;
    private string myImportFormat;
    private IDeclaredElement myTagNameDeclaredElement;
    private IPathDeclaredElement myPathElement;
    public IDeclaredElement TagNameDeclaredElement { get; }
    public string Text { get; }
    public AspImportTagNameBulbItem(IDeclaredElement tagNameDeclaredElement, IPathDeclaredElement pathElement, ICollection`1<IReference> references, string importFormat);
    public IDeclaredElement get_TagNameDeclaredElement();
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[QuickFixAttribute]
internal class JetBrains.ReSharper.Intentions.Asp.QuickFixes.Import.AspImportTagNamePopupQuickFix : AspImportTagNameQuickFix {
    public string PopupMenuCaption { get; }
    protected string ItemFormat { get; }
    public string PopupKey { get; }
    public Anchoring2D[] PopupAnchorings { get; }
    public AspImportTagNamePopupQuickFix(AspNotResolvedErrorHighlighting`1<ITagNameReference> tagNameReferenceHighlighting);
    public AspImportTagNamePopupQuickFix(AspResolveWarningHighlighting`1<ITagNameReference> tagNameReferenceHighlighting);
    public sealed virtual string get_PopupMenuCaption();
    protected virtual string get_ItemFormat();
    public sealed virtual void FillMenuItemDescriptor(IBulbAction key, IMenuItemDescriptor descriptor);
    public sealed virtual string get_PopupKey();
    public sealed virtual Anchoring2D[] get_PopupAnchorings();
    public sealed virtual void OnPopupShown(Lifetime showingLifetime);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Asp.QuickFixes.Import.AspImportTagNameQuickFix : object {
    private ITagNameReference myReference;
    private IList`1<Tuple`2<IDeclaredElement, IPathDeclaredElement>> myAlternatives;
    [NotNullAttribute]
protected string ItemFormat { get; }
    public AspImportTagNameQuickFix(AspNotResolvedErrorHighlighting`1<ITagNameReference> tagNameReferenceHighlighting);
    public AspImportTagNameQuickFix(AspResolveWarningHighlighting`1<ITagNameReference> tagNameReferenceHighlighting);
    [NotNullAttribute]
private IList`1<Tuple`2<IDeclaredElement, IPathDeclaredElement>> GetAlternatives();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual string get_ItemFormat();
    [NotNullAttribute]
public sealed virtual IEnumerable`1<IBulbAction> CreateBulbActions();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
internal class JetBrains.ReSharper.Intentions.Asp.QuickFixes.Import.AspImportTypeBulbAction : BulbActionBase {
    private ICollection`1<IReference> myReferences;
    private string myImportFormat;
    private ITypeElement myElement;
    public string Text { get; }
    public ITypeElement TypeElement { get; }
    public AspImportTypeBulbAction(ITypeElement element, ICollection`1<IReference> references, string importFormat);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public ITypeElement get_TypeElement();
}
[QuickFixAttribute]
internal class JetBrains.ReSharper.Intentions.Asp.QuickFixes.Import.AspImportTypePopupQuickFix : AspImportTypeQuickFix {
    [NotNullAttribute]
public string PopupMenuCaption { get; }
    protected string ItemFormat { get; }
    public string PopupKey { get; }
    public Anchoring2D[] PopupAnchorings { get; }
    public AspImportTypePopupQuickFix(AspNotResolvedErrorHighlighting`1<IWebTypeReference> typeReferenceHighlighting);
    public AspImportTypePopupQuickFix(AspNotResolvedErrorHighlighting`1<ITagNameReference> tagNameReferenceHighlighting);
    public AspImportTypePopupQuickFix(AspNotResolvedErrorHighlighting`1<IHtmlTagOrPropertyReference> tagOrPropertyReferenceHighlighting);
    public AspImportTypePopupQuickFix(AspResolveWarningHighlighting`1<IWebTypeReference> typeReferenceHighlighting);
    public AspImportTypePopupQuickFix(AspResolveWarningHighlighting`1<ITagNameReference> tagNameReferenceHighlighting);
    public AspImportTypePopupQuickFix(AspResolveWarningHighlighting`1<IHtmlTagOrPropertyReference> tagOrPropertyReferenceHighlighting);
    public sealed virtual string get_PopupMenuCaption();
    protected virtual string get_ItemFormat();
    public sealed virtual void FillMenuItemDescriptor(IBulbAction key, IMenuItemDescriptor descriptor);
    public sealed virtual string get_PopupKey();
    public sealed virtual Anchoring2D[] get_PopupAnchorings();
    public sealed virtual void OnPopupShown(Lifetime showingLifetime);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Asp.QuickFixes.Import.AspImportTypeQuickFix : object {
    private IReference myReference;
    private IList`1<ITypeElement> myAlternatives;
    [NotNullAttribute]
protected string ItemFormat { get; }
    public AspImportTypeQuickFix(AspNotResolvedErrorHighlighting`1<IWebTypeReference> typeReferenceHighlighting);
    public AspImportTypeQuickFix(AspNotResolvedErrorHighlighting`1<ITagNameReference> tagNameReferenceHighlighting);
    public AspImportTypeQuickFix(AspNotResolvedErrorHighlighting`1<IHtmlTagOrPropertyReference> tagOrPropertyReferenceHighlighting);
    public AspImportTypeQuickFix(AspResolveWarningHighlighting`1<IWebTypeReference> typeReferenceHighlighting);
    public AspImportTypeQuickFix(AspResolveWarningHighlighting`1<ITagNameReference> tagNameReferenceHighlighting);
    public AspImportTypeQuickFix(AspResolveWarningHighlighting`1<IHtmlTagOrPropertyReference> tagOrPropertyReferenceHighlighting);
    public IList`1<ITypeElement> GetAlternatives();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual string get_ItemFormat();
    [NotNullAttribute]
public sealed virtual IEnumerable`1<IBulbAction> CreateBulbActions();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [CompilerGeneratedAttribute]
private AspImportTypeBulbAction <CreateBulbActions>b__12_0(ITypeElement element);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Asp.QuickFixes.Import.ImportTypeFromExternalSourcesFix : ImportTypeFromExternalSourcesFixBase {
    public ImportTypeFromExternalSourcesFix(AspNotResolvedErrorHighlighting`1<IWebTypeReference> error);
    public ImportTypeFromExternalSourcesFix(AspNotResolvedErrorHighlighting`1<ITagNameReference> error);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.KnownLanguage", "16")]
public class JetBrains.ReSharper.Intentions.Asp.QuickFixes.Mvc.GenericMvcLanguageHelper : object {
    public virtual IType GetAssigmentType(IExpression expression);
    public virtual bool IsAttribute(IArgumentsOwner node);
    public virtual IEnumerable`1<IDeclaration> GetAttributeDeclarations(IArgumentsOwner node);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Asp.QuickFixes.Mvc.MvcActionControllerQuickFix : ModernQuickFixBase {
    [CanBeNullAttribute]
private IMvcActionControllerReference myReference;
    private ITypeElement myControllerType;
    private Func`1<IMvcActionControllerReference> myFindReferenceFunc;
    public string Text { get; }
    public MvcActionControllerQuickFix(AspConfigurableNotResolvedErrorHighlighting`1<IMvcReference> highlighting);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual BulbActionCommandSequence GetCommandSequence();
    private IBulbActionCommand CreateTypeAndSetControllerType(string name, IProjectFolder folder, ITreeNode baseFile, MvcKind mvcKind, Version version);
    private static string FormatName(string name, NamedElementKinds kind, PsiLanguageType language, ISolution solution, IPsiSourceFile sourceFile);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IBulbActionCommand CreateMethod(ITypeDeclaration declaration, IMvcActionControllerReference actionControllerReference, ITypeElement controllerType);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private IBulbActionCommand <GetCommandSequence>b__7_0(ISolution _, IProjectModelTransactionCookie projectModelTransactionCookie);
    [CompilerGeneratedAttribute]
internal static CreateMethodDeclarationContext <CreateMethod>g__CloneContext|11_3(CreateMethodDeclarationContext context);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Asp.QuickFixes.Mvc.MvcChangeModelTypeQuickFix : MvcChangeModelTypeQuickFixBase {
    private MvcConfigurableInvalidModelType myHighlighting;
    public MvcChangeModelTypeQuickFix(MvcConfigurableInvalidModelType highlighting);
    public virtual bool IsAvailable(IUserDataHolder cache);
    private static IAspDirectiveInheritsAttribute GetInheritsAttribute(MvcConfigurableInvalidModelType highlighting);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public abstract class JetBrains.ReSharper.Intentions.Asp.QuickFixes.Mvc.MvcQuickFixTemplateProviderBase : object {
    private static Version ourVersion60;
    public double Position { get; }
    private static MvcQuickFixTemplateProviderBase();
    public abstract virtual Guid GetTemplateGuid(bool viewPage, bool withMasterpage);
    public virtual string GetExtension(bool viewPage, bool withMasterpage);
    public virtual string GetQuickFixTitle(MvcKind mvcKind, bool viewPage, bool withMasterpage);
    public sealed virtual RichText GetAnchorTitle();
    public sealed virtual double get_Position();
    public virtual bool IsAvailable(IMvcViewReference reference);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Asp.QuickFixes.Mvc.MvcViewQuickFix : object {
    [CanBeNullAttribute]
private IMvcViewReference myReference;
    public MvcViewQuickFix(AspConfigurableNotResolvedErrorHighlighting`1<IMvcReference> highlighting);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Asp.QuickFixes.Mvc.MvcViewQuickFix/<CreateBulbItems>d__3")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Intentions.Asp.QuickFixes.Mvc.ZoneMarker : object {
}
public static class JetBrains.ReSharper.Intentions.Asp.Util.AspImportTypeUtil : object {
    public static string ItemFormat;
    public static IList`1<ITypeElement> CalculateAlternatives(IReference reference);
    public static ICollection`1<IReference> GetAllReferences(IReference mainReference);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Asp.VB.QuickFixes.AspOptimizeImportsFix : OptimizeImportsFix {
    public AspOptimizeImportsFix(AspUnusedImportClauseWarning warning);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.Asp.VB.QuickFixes.AspQuickFixesRegistrator : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.Asp.VB.QuickFixes.Mvc.CastInModelArgumentFix : CastFix {
    private IType myModelType;
    public CastInModelArgumentFix(MvcConfigurableInvalidModelType error);
    protected virtual Nullable`1<bool> IsValidTryCast(IVBExpression vbExpression, IType targetType);
    protected virtual IEnumerable`1<ValueTuple`2<IVBExpression, IType>> ToVB(IEnumerable`1<ValueTuple`2<IExpression, IType>> src);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private ValueTuple`2<IVBExpression, IType> <ToVB>b__3_1(ValueTuple`2<IVBExpression, IType> _);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.Asp.VB.QuickFixes.Mvc.VbMvcLanguageHelper : GenericMvcLanguageHelper {
    public virtual IType GetAssigmentType(IExpression expression);
    public virtual bool IsAttribute(IArgumentsOwner node);
    public virtual IEnumerable`1<IDeclaration> GetAttributeDeclarations(IArgumentsOwner node);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.Asp.VB.QuickFixes.Mvc.VbMvcQuickFixTemplateProvider : MvcQuickFixTemplateProviderBase {
    private static IDictionary`2<Pair`2<bool, bool>, Guid> ourTemplates;
    private static VbMvcQuickFixTemplateProvider();
    public virtual Guid GetTemplateGuid(bool viewPage, bool withMasterpage);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Intentions.Asp.VB.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Intentions.Asp.ZoneMarker : object {
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.AspRouteTemplates.ContextActions.AddParameterConstraintFix : ContextActionBase {
    private ICSharpContextActionDataProvider myContextActionDataProvider;
    private RouteConstraintsCache myConstraintsCache;
    private AspNetHttpEndpointsProvider myEndpointsProvider;
    private IPsiModule myPsiModule;
    public string Text { get; }
    public AddParameterConstraintFix(ICSharpContextActionDataProvider contextActionDataProvider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    private MyIntentionData GetIntentionData();
    [CanBeNullAttribute]
private ICSharpParameterDeclaration GetParameterUnderCaret();
    [CanBeNullAttribute]
private RouteParameterConstraint GetProposedConstraint(IType parameterType);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.AspRouteTemplates.ContextActions.AddParameterToControllerRouteTemplateFix : AddParameterToRouteTemplateFixBase {
    public string Text { get; }
    protected RouteTemplateSource TemplateSource { get; }
    public AddParameterToControllerRouteTemplateFix(ICSharpContextActionDataProvider contextActionDataProvider);
    public virtual string get_Text();
    protected virtual RouteTemplateSource get_TemplateSource();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.AspRouteTemplates.ContextActions.AddParameterToMethodRouteTemplateFix : AddParameterToRouteTemplateFixBase {
    public string Text { get; }
    protected RouteTemplateSource TemplateSource { get; }
    public AddParameterToMethodRouteTemplateFix(ICSharpContextActionDataProvider contextActionDataProvider);
    public virtual string get_Text();
    protected virtual RouteTemplateSource get_TemplateSource();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.AspRouteTemplates.ContextActions.AddParameterToMinimalApiRouteTemplateFix : AddParameterToRouteTemplateFixBase {
    public string Text { get; }
    protected RouteTemplateSource TemplateSource { get; }
    public AddParameterToMinimalApiRouteTemplateFix(ICSharpContextActionDataProvider contextActionDataProvider);
    public virtual string get_Text();
    protected virtual RouteTemplateSource get_TemplateSource();
}
public abstract class JetBrains.ReSharper.Intentions.AspRouteTemplates.ContextActions.AddParameterToRouteTemplateFixBase : ContextActionBase {
    protected ICSharpContextActionDataProvider ContextActionDataProvider;
    protected RouteTemplateSource TemplateSource { get; }
    protected AddParameterToRouteTemplateFixBase(ICSharpContextActionDataProvider contextActionDataProvider);
    protected abstract virtual RouteTemplateSource get_TemplateSource();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected List`1<DocumentRange> AddParameterToTargets(string parameterName, IType parameterType, IReadOnlyCollection`1<IEditableRouteTemplateProvider> sources);
    [CanBeNullAttribute]
protected MyIntentionData GetIntentionData();
}
[ContextActionGroupAttribute]
public static class JetBrains.ReSharper.Intentions.AspRouteTemplates.ContextActions.AspRouteTemplateContextActions : object {
    public static string GroupID;
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.AspRouteTemplates.QuickFixes.AddParameterConstraintQuickFix : QuickFixBase {
    private ParameterConstraintCanBeSpecifiedHighlighting myHighlighting;
    public string Text { get; }
    public AddParameterConstraintQuickFix(ParameterConstraintCanBeSpecifiedHighlighting highlighting);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.AspRouteTemplates.QuickFixes.ChangeParameterTypeQuickFix : QuickFixBase {
    private IParameter myParameter;
    private IType myProposedType;
    private RouteParameterConstraint myBaseConstraint;
    public string Text { get; }
    public ChangeParameterTypeQuickFix(ParameterTypeCanBeMoreStrictHighlighting highlighting);
    public ChangeParameterTypeQuickFix(ParameterTypeAndConstraintsMismatchHighlighting highlighting);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.AspRouteTemplates.QuickFixes.CreateMethodParameterQuickFix : object {
    private IRouteTemplateHighlighting myHighlighting;
    public CreateMethodParameterQuickFix(RouteParameterNotPassedToMethodHighlighting highlighting);
    public CreateMethodParameterQuickFix(MethodMissingRouteParametersHighlighting highlighting);
    public CreateMethodParameterQuickFix(ControllerRouteParameterNotPassedToMethodHighlighting highlighting);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.AspRouteTemplates.QuickFixes.CreateMethodParameterQuickFix/<CreateBulbItems>d__4")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.AspRouteTemplates.QuickFixes.EscapeCharacterFix : QuickFixBase {
    private RouteTemplateSyntaxError myError;
    public string Text { get; }
    public EscapeCharacterFix(RouteTemplateSyntaxError error);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual Action`1<ITextControl> ExecuteAfterPsiTransaction(ISolution solution, IProjectModelTransactionCookie cookie, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.AspRouteTemplates.QuickFixes.ExtractActionRoutePrefixQuickFix : QuickFixBase {
    private ActionRoutePrefixCanBeExtractedToControllerRouteHighlighting myHighlighting;
    public string Text { get; }
    public ExtractActionRoutePrefixQuickFix(ActionRoutePrefixCanBeExtractedToControllerRouteHighlighting highlighting);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Intentions.AspRouteTemplates.ZoneMarker : object {
}
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.WithJson.FakeJsonCodeFactory : object {
    private ICSharpExpression myFakeExpression;
    public FakeJsonCodeFactory(CSharpElementFactory factory);
    public sealed virtual ICSharpExpression CreateArray(List`1<IExpression> args);
    public sealed virtual ICSharpExpression CreateObject(IEnumerable`1<IExpression> args);
    public sealed virtual ICSharpExpression CreateProperty(ICSharpExpression propName, ICSharpExpression propertyVal);
    public sealed virtual ICSharpExpression CreateExpressionAsIs(string format);
    public sealed virtual ICSharpExpression MakeSamePresentation(TreeTextRange sourceValueRange);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.WithJson.GenerateNewtonsoftJsonFromString : ContextActionBase {
    private int MaxJsonStringSize;
    private ICSharpContextActionDataProvider myDataProvider;
    private static string GenerateJsonNetObject;
    public string Text { get; }
    public GenerateNewtonsoftJsonFromString(ICSharpContextActionDataProvider dataProvider);
    private static GenerateNewtonsoftJsonFromString();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private ICSharpExpression GenerateCreationExpression(IStringConcatenationClrWrapper stringData, IJsonCodeFactory codeFactory);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private IExpression ReplaceNode(ICSharpExpression newtonSoftExpression, ICSharpExpression expression);
    public bool IsInsideNewtonsoftParse(IInvocationExpression invocationExpression);
    public static IJavaScriptFile ParseJsonFile(string stringData, ISolution solution);
    [CompilerGeneratedAttribute]
private bool <IsAvailable>b__6_0(string s);
}
public interface JetBrains.ReSharper.Intentions.CSharp.ContextActions.WithJson.IJsonCodeFactory {
    public abstract virtual ICSharpExpression CreateArray(List`1<IExpression> args);
    public abstract virtual ICSharpExpression CreateObject(IEnumerable`1<IExpression> args);
    public abstract virtual ICSharpExpression CreateProperty(ICSharpExpression propName, ICSharpExpression propertyVal);
    public abstract virtual ICSharpExpression CreateExpressionAsIs(string format);
    public abstract virtual ICSharpExpression MakeSamePresentation(TreeTextRange sourceValueRange);
}
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.WithJson.JsonCodeFactory : object {
    private IStringConcatenationClrWrapper myStringConcatenationWrapper;
    private CSharpElementFactory myFactory;
    private NewtonsoftPredefinedTypes myTypes;
    public JsonCodeFactory(IStringConcatenationClrWrapper stringConcatenationWrapper, CSharpElementFactory factory, NewtonsoftPredefinedTypes types);
    public virtual ICSharpExpression CreateArray(List`1<IExpression> args);
    public sealed virtual ICSharpExpression CreateObject(IEnumerable`1<IExpression> args);
    public sealed virtual ICSharpExpression CreateProperty(ICSharpExpression propName, ICSharpExpression propertyVal);
    public sealed virtual ICSharpExpression CreateExpressionAsIs(string format);
    [CanBeNullAttribute]
public sealed virtual ICSharpExpression MakeSamePresentation(TreeTextRange sourceValueRange);
}
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.WithJson.NewtonsoftJsonCodeCreator : TreeNodeVisitor`2<ITreeNode, ICSharpExpression> {
    private IJsonCodeFactory myJsonCodeFactory;
    public NewtonsoftJsonCodeCreator(IJsonCodeFactory jsonCodeFactory);
    public virtual ICSharpExpression VisitObjectLiteral(IObjectLiteral literal, ITreeNode context);
    public virtual ICSharpExpression VisitObjectPropertyInitializer(IObjectPropertyInitializer initializer, ITreeNode context);
    public virtual ICSharpExpression VisitCompoundExpression(ICompoundExpression compoundExpression, ITreeNode context);
    public virtual ICSharpExpression VisitArrayLiteral(IArrayLiteral arrayLiteral, ITreeNode context);
    protected virtual ICSharpExpression CreateArray(List`1<IExpression> args);
    public virtual ICSharpExpression VisitJavaScriptFile(IJavaScriptFile file, ITreeNode context);
    public virtual ICSharpExpression VisitJavaScriptLiteralExpression(IJavaScriptLiteralExpression literalExpression, ITreeNode context);
}
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.WithJson.NewtonsoftPredefinedTypes : object {
    private IDeclaredType myJobject;
    private IDeclaredType myJproperty;
    private IDeclaredType myJarray;
    private IDeclaredType myJToken;
    public IDeclaredType JToken { get; }
    public IDeclaredType JObject { get; }
    public IDeclaredType JProperty { get; }
    public IDeclaredType JArray { get; }
    public NewtonsoftPredefinedTypes(IPsiModule psiModule);
    public IDeclaredType get_JToken();
    public IDeclaredType get_JObject();
    public IDeclaredType get_JProperty();
    public IDeclaredType get_JArray();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.WithJson.ZoneMarker : object {
}
[CodeCleanupModuleAttribute]
public class JetBrains.ReSharper.Intentions.Css.CodeCleanup.AlphabetizeProperties : object {
    private static CodeCleanupOptionDescriptor`1<bool> ourDescriptor;
    public ICollection`1<CodeCleanupOptionDescriptor> Descriptors { get; }
    public string Name { get; }
    public PsiLanguageType LanguageType { get; }
    public bool IsAvailableOnSelection { get; }
    private static AlphabetizeProperties();
    public sealed virtual ICollection`1<CodeCleanupOptionDescriptor> get_Descriptors();
    public sealed virtual void SetDefaultSetting(CodeCleanupProfile profile, DefaultProfileType profileType);
    public sealed virtual string get_Name();
    public sealed virtual PsiLanguageType get_LanguageType();
    public sealed virtual bool get_IsAvailableOnSelection();
    public sealed virtual bool IsAvailable(IPsiSourceFile sourceFile);
    public sealed virtual bool IsAvailable(CodeCleanupProfile profile);
    public sealed virtual void Process(IPsiSourceFile sourceFile, IRangeMarker rangeMarker, CodeCleanupProfile profile, IProgressIndicator progressIndicator, IUserDataHolder cache);
    private static void SortProperties(ICssBlockWithStatements block, DocumentRange documentRange);
    private static void AddNode(ITreeNode node, ICollection`1<ITreeNode> nodes, DocumentRange documentRange);
    [NotNullAttribute]
private static ITreeNode CollectNodesAtSameLine(ITreeNode node, ICollection`1<ITreeNode> nodes, DocumentRange documentRange);
    [CanBeNullAttribute]
private static string GetName(ICssPropertyStatement statement);
}
[CodeCleanupModuleAttribute]
public class JetBrains.ReSharper.Intentions.Css.CodeCleanup.CssReformatCodeCleanupModule : object {
    private static CodeCleanupOptionDescriptor`1<bool> ourDescriptor;
    public ICollection`1<CodeCleanupOptionDescriptor> Descriptors { get; }
    public string Name { get; }
    public PsiLanguageType LanguageType { get; }
    public bool IsAvailableOnSelection { get; }
    private static CssReformatCodeCleanupModule();
    public sealed virtual ICollection`1<CodeCleanupOptionDescriptor> get_Descriptors();
    public sealed virtual void SetDefaultSetting(CodeCleanupProfile profile, DefaultProfileType profileType);
    public sealed virtual string get_Name();
    public sealed virtual PsiLanguageType get_LanguageType();
    public sealed virtual bool get_IsAvailableOnSelection();
    public sealed virtual bool IsAvailable(IPsiSourceFile sourceFile);
    public sealed virtual bool IsAvailable(CodeCleanupProfile profile);
    public sealed virtual void Process(IPsiSourceFile sourceFile, IRangeMarker rangeMarker, CodeCleanupProfile profile, IProgressIndicator progressIndicator, IUserDataHolder cache);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Intentions.Css.CodeFormatting.Asp.InjectedCssCodeFormatterFactory : object {
    public sealed virtual CssFormattingVisitor CreateFormattingVisitor(CssFormattingData formattingData);
    public sealed virtual CssIndentVisitor CreateIndentVisitor(CssFormattingData formattingData);
}
[FormattingSettingsPresentationComponentAttribute("10")]
internal class JetBrains.ReSharper.Intentions.Css.CodeFormatting.CodeLayoutPageSchema : CssCodeStylePageSchema {
    public string PageName { get; }
    public CodeLayoutPageSchema(Lifetime lifetime, IContextBoundSettingsStoreLive smartContext, IValueEditorViewModelFactory itemViewModelFactory, IComponentContainer container, ISettingsToHide settingsToHide);
    public virtual string get_PageName();
    protected virtual IEnumerable`1<ICodeStyleEntry> Describe();
}
[OptionsPageAttribute("CssCodeLayoutPage", "Code Layout", "JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons/BracesLayout")]
internal class JetBrains.ReSharper.Intentions.Css.CodeFormatting.CssFormatterCodeLayoutPage : CodeStylePage {
    private static string PID;
    public string Id { get; }
    public CssFormatterCodeLayoutPage(Lifetime lifetime, OptionsSettingsSmartContext smartContext, IUIApplication environment, CodeLayoutPageSchema schema, CodeStylePreview preview, IComponentContainer container);
    public virtual string get_Id();
}
[OptionsPageAttribute("CssLineBreaks", "Line Breaks", "JetBrains.ReSharper.Resources.Resources.Icons.PsiFeaturesUnsortedOptionsThemedIcons/LineBreaks")]
internal class JetBrains.ReSharper.Intentions.Css.CodeFormatting.CssFormatterLineBreaksPage : CodeStylePage {
    public static string PID;
    public string Id { get; }
    public CssFormatterLineBreaksPage(Lifetime lifetime, OptionsSettingsSmartContext smartContext, IUIApplication environment, LineBreaksPageSchema schema, CodeStylePreview preview, IComponentContainer container);
    public virtual string get_Id();
}
[OptionsPageAttribute("CssSpacesPage", "Spaces", "JetBrains.ReSharper.Resources.Resources.Icons.PsiFeaturesUnsortedOptionsThemedIcons/Spaces")]
internal class JetBrains.ReSharper.Intentions.Css.CodeFormatting.CssFormatterSpacesPage : CodeStylePage {
    public static string PID;
    public string Id { get; }
    public CssFormatterSpacesPage(Lifetime lifetime, OptionsSettingsSmartContext smartContext, IUIApplication environment, SpacesPageSchema schema, CodeStylePreview preview, IComponentContainer container);
    public virtual string get_Id();
}
[OptionsPageAttribute("CssIndentStylePage", "Tabs and Indents", "JetBrains.ReSharper.Resources.Resources.Icons.PsiFeaturesUnsortedOptionsThemedIcons/Indent")]
public class JetBrains.ReSharper.Intentions.Css.CodeFormatting.CssIndentStylePage : CodeStylePage {
    public static string PID;
    public string Id { get; }
    public CssIndentStylePage(Lifetime lifetime, OptionsSettingsSmartContext smartContext, IUIApplication environment, CssIndentStylePageSchema schema, CodeStylePreview preview, IComponentContainer container);
    public virtual string get_Id();
}
[FormattingSettingsPresentationComponentAttribute("10")]
public class JetBrains.ReSharper.Intentions.Css.CodeFormatting.CssIndentStylePageSchema : IndentStylePageSchema`2<CssFormatterSettingsKey, CssCodeStylePreview> {
    public KnownLanguage Language { get; }
    protected bool SupportsDeclarativeIndentEngine { get; }
    public CssIndentStylePageSchema(Lifetime lifetime, IContextBoundSettingsStoreLive smartContext, IValueEditorViewModelFactory itemViewModelFactory, IComponentContainer container, ISettingsToHide settingsToHide);
    public virtual KnownLanguage get_Language();
    protected virtual Pair`2<string, PreviewParseType> GetPreviewForIndents();
    protected virtual bool get_SupportsDeclarativeIndentEngine();
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Intentions.Css.CodeFormatting.Html.EmbeddedCssCodeFormatterFactory : object {
    public sealed virtual CssFormattingVisitor CreateFormattingVisitor(CssFormattingData formattingData);
    public sealed virtual CssIndentVisitor CreateIndentVisitor(CssFormattingData formattingData);
    public static bool IsStyleTag(ITreeNode node, IHtmlTag& htmlTag);
    public static bool IsMultylineFormatedStyle(ITreeNode treeNode, CssFormattingData formattingData);
}
[FormattingSettingsPresentationComponentAttribute("10")]
internal class JetBrains.ReSharper.Intentions.Css.CodeFormatting.LineBreaksPageSchema : CssCodeStylePageSchema {
    public string PageName { get; }
    public LineBreaksPageSchema(Lifetime lifetime, IContextBoundSettingsStoreLive smartContext, IValueEditorViewModelFactory itemViewModelFactory, IComponentContainer container, ISettingsToHide settingsToHide);
    public virtual string get_PageName();
    protected virtual IEnumerable`1<ICodeStyleEntry> Describe();
}
[FormattingSettingsPresentationComponentAttribute("10")]
internal class JetBrains.ReSharper.Intentions.Css.CodeFormatting.SpacesPageSchema : CssCodeStylePageSchema {
    public string PageName { get; }
    public SpacesPageSchema(Lifetime lifetime, IContextBoundSettingsStoreLive smartContext, IValueEditorViewModelFactory itemViewModelFactory, IComponentContainer container, ISettingsToHide settingsToHide);
    public virtual string get_PageName();
    protected virtual IEnumerable`1<ICodeStyleEntry> Describe();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Css.CssLanguage", "16")]
internal class JetBrains.ReSharper.Intentions.Css.Comment.CssBlockCommentActionProvider : object {
    public string NestedStartBlockCommentMarker { get; }
    public string NestedEndBlockCommentMarker { get; }
    public string StartBlockCommentMarker { get; }
    public string EndBlockCommentMarker { get; }
    public sealed virtual string get_NestedStartBlockCommentMarker();
    public sealed virtual string get_NestedEndBlockCommentMarker();
    public sealed virtual string get_StartBlockCommentMarker();
    public sealed virtual string get_EndBlockCommentMarker();
    public sealed virtual DocumentRange GetBlockComment(ITokenNode tokenNode);
    public sealed virtual DocumentOffset InsertBlockCommentPosition(ITokenNode tokenNode, DocumentOffset position);
    public sealed virtual bool IsAvailable(IFile file, DocumentRange range, Boolean& disableAllProviders);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Css.CssLanguage", "16")]
public class JetBrains.ReSharper.Intentions.Css.Comment.CssLineCommentActionProvider : object {
    public string StartLineCommentMarker { get; }
    public string EndLineCommentMarker { get; }
    public sealed virtual string get_StartLineCommentMarker();
    public sealed virtual string get_EndLineCommentMarker();
    public sealed virtual bool ShouldInsertAtLineStart(IContextBoundSettingsStore settingsStore);
    public sealed virtual bool ShouldInsertSpaceAtCommentStartAndEnd(IContextBoundSettingsStore settingsStore);
    public sealed virtual LineCommentRangeInfo GetLineCommentRange(IFile psiFile, DocumentRange lineRange);
}
internal static class JetBrains.ReSharper.Intentions.Css.Common.ReplaceVarInvocationUtil : object {
    public static bool IsAvailable(ICssInvocationExpression node);
    public static Action`1<ITextControl> Execute(ICssInvocationExpression varNode);
}
public abstract class JetBrains.ReSharper.Intentions.Css.ContextActions.ColorConvertActionBase : ContextActionBase {
    [CompilerGeneratedAttribute]
private ICssContextActionDataProvider <DataProvider>k__BackingField;
    protected ICssContextActionDataProvider DataProvider { get; }
    protected ColorConvertActionBase(ICssContextActionDataProvider dataProvider);
    [CompilerGeneratedAttribute]
protected ICssContextActionDataProvider get_DataProvider();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected abstract virtual bool IsAvailable(ITreeNode colorNode, IColorElement colorElement);
    [CanBeNullAttribute]
protected abstract virtual ITreeNode FindColorNode();
    [NotNullAttribute]
protected abstract virtual ITreeNode CreateNewColorNode(IColorElement colorElement, ISolution solution);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private IColorElement FindColorElement(ITreeNode& colorNode);
}
[ContextActionDataBuilderAttribute("JetBrains.ReSharper.Feature.Services.Css.Bulbs.ICssContextActionDataProvider", "16")]
public class JetBrains.ReSharper.Intentions.Css.ContextActions.CssContextActionDataBuilder : ContextActionDataBuilderBase`2<CssLanguage, ICssFile> {
    public virtual IContextActionDataProvider BuildFromPsi(ISolution solution, ITextControl textControl, ICssFile psiFile);
}
[ContextActionGroupAttribute]
public static class JetBrains.ReSharper.Intentions.Css.ContextActions.CssContextActions : object {
    public static string GroupID;
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Css.ContextActions.HexColorToHslAction : ColorConvertActionBase {
    public string Text { get; }
    public HexColorToHslAction(ICssContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual bool IsAvailable(ITreeNode colorNode, IColorElement colorElement);
    protected virtual ITreeNode FindColorNode();
    protected virtual ITreeNode CreateNewColorNode(IColorElement colorElement, ISolution solution);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Css.ContextActions.HexColorToNamedColorAction : ColorConvertActionBase {
    public string Text { get; }
    public HexColorToNamedColorAction(ICssContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual bool IsAvailable(ITreeNode colorNode, IColorElement colorElement);
    protected virtual ITreeNode FindColorNode();
    protected virtual ITreeNode CreateNewColorNode(IColorElement colorElement, ISolution solution);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Css.ContextActions.HexColorToRgbAction : ColorConvertActionBase {
    public string Text { get; }
    public HexColorToRgbAction(ICssContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual bool IsAvailable(ITreeNode colorNode, IColorElement colorElement);
    protected virtual ITreeNode FindColorNode();
    protected virtual ITreeNode CreateNewColorNode(IColorElement colorElement, ISolution solution);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Css.ContextActions.HslToHexColorAction : ColorConvertActionBase {
    public string Text { get; }
    public HslToHexColorAction(ICssContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual bool IsAvailable(ITreeNode colorNode, IColorElement colorElement);
    protected virtual ITreeNode FindColorNode();
    protected virtual ITreeNode CreateNewColorNode(IColorElement colorElement, ISolution solution);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Css.ContextActions.HslToNamedColorAction : ColorConvertActionBase {
    public string Text { get; }
    public HslToNamedColorAction(ICssContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual bool IsAvailable(ITreeNode colorNode, IColorElement colorElement);
    protected virtual ITreeNode FindColorNode();
    protected virtual ITreeNode CreateNewColorNode(IColorElement colorElement, ISolution solution);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Css.ContextActions.HslToRgbAction : ColorConvertActionBase {
    public string Text { get; }
    public HslToRgbAction(ICssContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual bool IsAvailable(ITreeNode colorNode, IColorElement colorElement);
    protected virtual ITreeNode FindColorNode();
    protected virtual ITreeNode CreateNewColorNode(IColorElement colorElement, ISolution solution);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Css.ContextActions.NamedColorToHexColorAction : ColorConvertActionBase {
    public string Text { get; }
    public NamedColorToHexColorAction(ICssContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual bool IsAvailable(ITreeNode colorNode, IColorElement colorElement);
    protected virtual ITreeNode FindColorNode();
    protected virtual ITreeNode CreateNewColorNode(IColorElement colorElement, ISolution solution);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Css.ContextActions.NamedColorToHslAction : ColorConvertActionBase {
    public string Text { get; }
    public NamedColorToHslAction(ICssContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual bool IsAvailable(ITreeNode colorNode, IColorElement colorElement);
    protected virtual ITreeNode FindColorNode();
    protected virtual ITreeNode CreateNewColorNode(IColorElement colorElement, ISolution solution);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Css.ContextActions.NamedColorToRgbAction : ColorConvertActionBase {
    public string Text { get; }
    public NamedColorToRgbAction(ICssContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual bool IsAvailable(ITreeNode colorNode, IColorElement colorElement);
    protected virtual ITreeNode FindColorNode();
    protected virtual ITreeNode CreateNewColorNode(IColorElement colorElement, ISolution solution);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Css.ContextActions.ReplaceVarInvocationAction : ContextActionBase {
    private ICssContextActionDataProvider myDataProvider;
    private ICssInvocationExpression Node { get; }
    public string Text { get; }
    public ReplaceVarInvocationAction(ICssContextActionDataProvider dataProvider);
    private ICssInvocationExpression get_Node();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Css.ContextActions.RgbToHexColorAction : ColorConvertActionBase {
    public string Text { get; }
    public RgbToHexColorAction(ICssContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual bool IsAvailable(ITreeNode colorNode, IColorElement colorElement);
    protected virtual ITreeNode FindColorNode();
    protected virtual ITreeNode CreateNewColorNode(IColorElement colorElement, ISolution solution);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Css.ContextActions.RgbToHslAction : ColorConvertActionBase {
    public string Text { get; }
    public RgbToHslAction(ICssContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual bool IsAvailable(ITreeNode colorNode, IColorElement colorElement);
    protected virtual ITreeNode FindColorNode();
    protected virtual ITreeNode CreateNewColorNode(IColorElement colorElement, ISolution solution);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Css.ContextActions.RgbToNamedColorAction : ColorConvertActionBase {
    public string Text { get; }
    public RgbToNamedColorAction(ICssContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual bool IsAvailable(ITreeNode colorNode, IColorElement colorElement);
    protected virtual ITreeNode FindColorNode();
    protected virtual ITreeNode CreateNewColorNode(IColorElement colorElement, ISolution solution);
}
[ScopeCategoryUIProviderAttribute("16")]
public class JetBrains.ReSharper.Intentions.Css.LiveTemplates.CssScopeCategoryUIProvider : ScopeCategoryUIProvider {
    public string CategoryCaption { get; }
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Css.LiveTemplates.CssScopeCategoryUIProvider/<BuildAllPoints>d__1")]
public virtual IEnumerable`1<ITemplateScopePoint> BuildAllPoints();
    public virtual string get_CategoryCaption();
    public virtual string Present(ITemplateScopePoint point);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.Css.LiveTemplates.CssScopeProvider : ScopeProvider {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Css.LiveTemplates.CssScopeProvider/<ProvideScopePoints>d__1")]
public virtual IEnumerable`1<ITemplateScopePoint> ProvideScopePoints(TemplateAcceptanceContext context);
    [CompilerGeneratedAttribute]
private ITemplateScopePoint <.ctor>b__0_0(string s);
    [CompilerGeneratedAttribute]
private ITemplateScopePoint <.ctor>b__0_1(string s);
    [CompilerGeneratedAttribute]
private ITemplateScopePoint <.ctor>b__0_2(string s);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Css.CssLanguage", "16")]
internal class JetBrains.ReSharper.Intentions.Css.LiveTemplates.CssTemplateFormatter : object {
    public bool SupportsShorteningQualifiedReferences { get; }
    public string EndMarker { get; }
    public sealed virtual bool get_SupportsShorteningQualifiedReferences();
    public sealed virtual string get_EndMarker();
    public sealed virtual void BeforeFormatting(DocumentRange documentRange, ISolution solution);
    public sealed virtual void ShortenQualifiedReferences(DocumentRange documentRange, ISolution solution);
}
[RegisterHighlighterAttribute("ReSharper Template Editor CSS Keyword")]
[RegisterHighlighterAttribute("ReSharper Template Editor CSS Comment")]
[LanguageAttribute("JetBrains.ReSharper.Psi.Css.CssLanguage", "16")]
public class JetBrains.ReSharper.Intentions.Css.LiveTemplates.CssTemplateHighlightingProvider : TemplateHighlightingProvider {
    public static string CommentAttribute;
    public static string KeywordAttribute;
    public virtual string GetHighlightingAttributeId(TokenNodeType tokenType);
}
public class JetBrains.ReSharper.Intentions.Css.LiveTemplates.InCssExpression : InCssFile {
    private static Guid DefaultUID;
    public string PresentableShortName { get; }
    private static InCssExpression();
    public virtual Guid GetDefaultUID();
    public virtual string ToString();
    public virtual string get_PresentableShortName();
}
public class JetBrains.ReSharper.Intentions.Css.LiveTemplates.InCssFile : InAnyLanguageFile {
    private static Guid DefaultUID;
    public string PresentableShortName { get; }
    public PsiLanguageType RelatedLanguage { get; }
    public Guid QuickListUID { get; }
    public string QuickListTitle { get; }
    private static InCssFile();
    public virtual Guid GetDefaultUID();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Css.LiveTemplates.InCssFile/<GetExtensions>d__2")]
protected virtual IEnumerable`1<string> GetExtensions();
    public virtual string get_PresentableShortName();
    public virtual PsiLanguageType get_RelatedLanguage();
    public virtual string ToString();
    public sealed virtual Guid get_QuickListUID();
    public sealed virtual string get_QuickListTitle();
}
public class JetBrains.ReSharper.Intentions.Css.LiveTemplates.InCssStatement : InCssExpression {
    private static Guid DefaultUID;
    public string PresentableShortName { get; }
    private static InCssStatement();
    public virtual Guid GetDefaultUID();
    public virtual string ToString();
    public virtual string get_PresentableShortName();
}
public class JetBrains.ReSharper.Intentions.Css.QuickFixes.AddUnitMeasureFix : QuickFixBase {
    private ValueShouldHaveUnitsError myError;
    public string Text { get; }
    public AddUnitMeasureFix(ValueShouldHaveUnitsError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private Template CreateLiveTemplate();
}
public class JetBrains.ReSharper.Intentions.Css.QuickFixes.AddVendorSpecificPropertiesFix : QuickFixBase {
    private IReference myReference;
    private ICollection`1<BrowserInfo> myBrowsers;
    public string Text { get; }
    public AddVendorSpecificPropertiesFix(CssBrowserCompatibilityWarning warning);
    public AddVendorSpecificPropertiesFix(CssCaniuseFeatureRequiresPrefixWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.Css.QuickFixes.ConvertToHslaFix : QuickFixBase {
    private ICssColorExpression myNode;
    public string Text { get; }
    public ConvertToHslaFix(HexColorValueWithAlphaError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.Css.QuickFixes.ConvertToRgbaFix : QuickFixBase {
    private ICssColorExpression myNode;
    public string Text { get; }
    public ConvertToRgbaFix(HexColorValueWithAlphaError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
internal class JetBrains.ReSharper.Intentions.Css.QuickFixes.CreateCssStyleFix : QuickFixBase {
    private UnknownCssClassError myError;
    private string myStyleSelector;
    public string Text { get; }
    public CreateCssStyleFix(UnknownCssClassError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.Css.QuickFixes.CreateFallbackColorFix : QuickFixBase {
    private ICssInvocationExpression myNode;
    public string Text { get; }
    public CreateFallbackColorFix(RequiresFallbackColorWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.Css.QuickFixes.cssErrorsQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
public class JetBrains.ReSharper.Intentions.Css.QuickFixes.CssUseDoubleColonFix : QuickFixBase {
    private ITokenNode myNode;
    public string Text { get; }
    public CssUseDoubleColonFix(DoubleColonsExpectedError error);
    public CssUseDoubleColonFix(DoubleColonsPreferredWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.Css.QuickFixes.CssUsePseudoSelectorNotFix : QuickFixBase {
    private SyntaxIsNotAllowedError myError;
    public string Text { get; }
    public CssUsePseudoSelectorNotFix(SyntaxIsNotAllowedError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.Css.QuickFixes.CssUseSingleColonFix : QuickFixBase {
    private ITokenNode myNode;
    public string Text { get; }
    public CssUseSingleColonFix(IncompatibleDoubleColonsWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
internal class JetBrains.ReSharper.Intentions.Css.QuickFixes.DisableWarnings.DisableAndRestoreByCommentsFix : DisableByCommentFixBase {
    public string Text { get; }
    protected string OpeningText { get; }
    protected string ClosingText { get; }
    public DisableAndRestoreByCommentsFix(DocumentRange range, string severityId);
    public virtual string get_Text();
    protected virtual string get_OpeningText();
    protected virtual string get_ClosingText();
}
public abstract class JetBrains.ReSharper.Intentions.Css.QuickFixes.DisableWarnings.DisableByCommentFixBase : object {
    private DocumentRange myRange;
    [NotNullAttribute]
protected string SeverityId;
    public string Text { get; }
    [NotNullAttribute]
protected string OpeningText { get; }
    [CanBeNullAttribute]
protected string ClosingText { get; }
    protected DisableByCommentFixBase(DocumentRange range, string severityId);
    public abstract virtual string get_Text();
    protected abstract virtual string get_OpeningText();
    protected abstract virtual string get_ClosingText();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
    private static DocumentRange Filter(IEnumerable`1<ITokenNode> tokens, bool backward, IFile file);
}
[CustomHighlightingActionProviderAttribute("JetBrains.ProjectModel.CssProjectFileType")]
internal class JetBrains.ReSharper.Intentions.Css.QuickFixes.DisableWarnings.DisableByCommentWarningActionProvider : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Css.QuickFixes.DisableWarnings.DisableByCommentWarningActionProvider/<GetActions>d__0")]
public sealed virtual IEnumerable`1<IntentionAction> GetActions(IHighlighting highlighting, DocumentRange highlightingRange, IPsiSourceFile sourceFile, IAnchor configureAnchor);
}
internal class JetBrains.ReSharper.Intentions.Css.QuickFixes.DisableWarnings.DisableOnceByCommentFix : DisableByCommentFixBase {
    public string Text { get; }
    protected string OpeningText { get; }
    protected string ClosingText { get; }
    public DisableOnceByCommentFix(DocumentRange range, string severityId);
    public virtual string get_Text();
    protected virtual string get_OpeningText();
    protected virtual string get_ClosingText();
}
internal class JetBrains.ReSharper.Intentions.Css.QuickFixes.ExtractCssStyleFix : QuickFixBase {
    private UnknownCssClassError myError;
    public string Text { get; }
    public bool IsReadOnly { get; }
    public ExtractCssStyleFix(UnknownCssClassError error);
    public virtual string get_Text();
    public sealed virtual bool get_IsReadOnly();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static ExtractStyleDrivenWorkflow GetExtractStyleWorkflow(UnknownCssClassError error, DocumentRange& documentRange);
    private static IDataContext GetDataContext(Lifetime lifetime, DocumentRange documentRange, ISolution solution);
    private static bool HaveValue(IHtmlAttributeValue value);
}
public class JetBrains.ReSharper.Intentions.Css.QuickFixes.PutPropertyAfterVendorPropertiesFix : QuickFixBase {
    private CssPropertyDoesNotOverrideVendorPropertyWarning myWarning;
    public string Text { get; }
    public PutPropertyAfterVendorPropertiesFix(CssPropertyDoesNotOverrideVendorPropertyWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.Css.QuickFixes.RemoveAlphaComponentFix : QuickFixBase {
    private ICssColorExpression myNode;
    public string Text { get; }
    public RemoveAlphaComponentFix(HexColorValueWithAlphaError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.Css.QuickFixes.RemoveFix : QuickFixBase {
    private ITreeRange myRange;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public RemoveFix(DeclarationIsEmptyWarning warning);
    public RemoveFix(UnexpectedValueError warning);
    public RemoveFix(RedundantWarning warning);
    public RemoveFix(RedundantCssHackWarning warning);
    public RemoveFix(UnusedVariableWarning warning);
    protected RemoveFix(ITreeRange range, string text);
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.Css.QuickFixes.RemoveUnitMeasureFix : QuickFixBase {
    private UnitMeasureRedundantWarning myWarning;
    public string Text { get; }
    public RemoveUnitMeasureFix(UnitMeasureRedundantWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static string GetWithoutUnits(ITokenNode literalToken);
}
public class JetBrains.ReSharper.Intentions.Css.QuickFixes.ReplaceVarInvocationFix : QuickFixBase {
    [NotNullAttribute]
public static Key Key;
    private ICssInvocationExpression myNode;
    public string Text { get; }
    public ReplaceVarInvocationFix(UndeclaredVariableWarning warning);
    private static ReplaceVarInvocationFix();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.Css.QuickFixes.TurnOffBrowserCompatibilityFix : QuickFixBase {
    private IPsiSourceFile mySourceFile;
    public string Text { get; }
    public TurnOffBrowserCompatibilityFix(CssBrowserCompatibilityWarning warning);
    public TurnOffBrowserCompatibilityFix(CssValueBrowserCompatibilityWarning warning);
    public TurnOffBrowserCompatibilityFix(CssCaniuseUnsupportedFeatureWarning warning);
    public TurnOffBrowserCompatibilityFix(DoubleColonsPreferredWarning warning);
    public TurnOffBrowserCompatibilityFix(IncompatibleDoubleColonsWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.Css.QuickFixes.VisitCaniuseFix : object {
    private static Key ourVisitCaniuseFixKey;
    private ICssCaniuseDefinition myCaniuseDefinition;
    public string Text { get; }
    public VisitCaniuseFix(CssCaniuseUnsupportedFeatureWarning warning);
    public VisitCaniuseFix(CssCaniuseFeatureRequiresPrefixWarning warning);
    private static VisitCaniuseFix();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Css.QuickFixes.VisitCaniuseFix/<CreateBulbItems>d__4")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual string get_Text();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
}
public class JetBrains.ReSharper.Intentions.Css.RearrangeCode.RearrangeableCssPropertyStatement : RearrangeableElementSwap`1<ICssPropertyStatement> {
    private RearrangeableCssPropertyStatement(ICssPropertyStatement element);
    protected virtual IEnumerable`1<ICssPropertyStatement> GetSiblings();
}
public class JetBrains.ReSharper.Intentions.Css.RearrangeCode.RearrangeableCssPropertyValueExpression : RearrangeableElementSwap`1<ICssPropertyValueExpression> {
    private RearrangeableCssPropertyValueExpression(ICssPropertyValueExpression element);
    protected virtual IEnumerable`1<ICssPropertyValueExpression> GetSiblings();
}
public class JetBrains.ReSharper.Intentions.Css.RearrangeCode.RearrangeableRuleset : RearrangeableElementSwap`1<IRuleset> {
    private RearrangeableRuleset(IRuleset element);
    protected virtual IEnumerable`1<IRuleset> GetSiblings();
}
public class JetBrains.ReSharper.Intentions.Css.RearrangeCode.RearrangeableRulesetDeclaration : RearrangeableElementSwap`1<IRulesetDeclaration> {
    private RearrangeableRulesetDeclaration(IRulesetDeclaration element);
    protected virtual IEnumerable`1<IRulesetDeclaration> GetSiblings();
}
public class JetBrains.ReSharper.Intentions.Css.TypingAssist.CssBracketMatcher : BracketMatcher {
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Intentions.Css.TypingAssist.CssTypingAssist : CssTypingAssistBase {
    public CssTypingAssist(Lifetime lifetime, TypingAssistDependencies dependencies);
    protected virtual bool IsSupported(ITextControl textControl);
}
public abstract class JetBrains.ReSharper.Intentions.Css.TypingAssist.CssTypingAssistBase : TypingAssistLanguageBase`1<CssLanguage> {
    protected CssTypingAssistBase(Lifetime lifetime, TypingAssistDependencies dependencies);
    private static bool NeedAutoInsertPairToken(CachingLexer lexer, TokenNodeType leftToken);
    private bool HandleLeftBrace(ITypingContext typingContext);
    private bool AutoinsertRBrace(ITextControl textControl, CachingLexer lexer);
    private bool HandleLeftBracket(ITypingContext typingContext);
    private bool HandleLeftParenth(ITypingContext typingContext);
    private bool HandleRightBrace(ITypingContext typingContext);
    private void DoFormatOnRightBrace(ITextControl textControl);
    private bool CheckSpecialRightBraceCase(ITextControl textControl, Int32& pos);
    private static bool NeedSkipCloseBracket(CachingLexer lexer, TokenNodeType rightToken);
    private bool HandleRightParenth(ITypingContext typingContext);
    private bool HandleRightBracket(ITypingContext typingContext);
    private bool HandleQuote(ITypingContext typingContext);
    protected virtual bool IsStopperTokenForStringLiteral(TokenNodeType tokenType);
    private bool HandleSemicolon(ITypingContext typingContext);
    protected virtual void DoFormatStatementOnSemicolon(ITextControl textControl);
    protected virtual IndentTypingHelper`1<CssLanguage> GetIndentTypingHelper();
    private bool HandleEnterPressed(IActionContext context);
    private bool DoHandleEnterAfterLBracePressed(ITextControl textControl);
    public bool ReformatForSmartEnter(string dummyText, ITextControl textControl, IFile file, TreeTextRange reparseTreeOffset, TreeOffset lBraceTreePos, TreeOffset rBraceTreePos);
    protected void DoSmartIndentOnEnter(ITextControl textControl);
    private bool HandleBackspacePressed(IActionContext context);
    private bool IsNewLineToken(CachingLexer lexer);
    protected bool HandleDelPressed(IActionContext context);
    public virtual bool QuickCheckAvailability(ITextControl textControl, IPsiSourceFile projectFile);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Intentions.Css.TypingAssist.Html.CssHtmlTypingAssist : CssTypingAssistBase {
    public CssHtmlTypingAssist(Lifetime lifetime, TypingAssistDependencies dependencies);
    protected virtual bool IsSupported(ITextControl textControl);
    public virtual bool QuickCheckAvailability(ITextControl textControl, IPsiSourceFile projectFile);
    private bool IsProjectFileSupported(ITextControl textControl, ISolution solution);
    public virtual int TextControlToLexer(ITextControl textControl, DocOffset offset);
    protected virtual bool AllowCpuIntensiveAssists(ITextControl textControl);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Intentions.Css.TypingAssist.Html.CssTagSmartEnterHandler : object {
    private IProjectFileTypeServices myProjectFileTypeServices;
    private CssHtmlTypingAssist myCssHtmlTypingAssist;
    public CssTagSmartEnterHandler(IProjectFileTypeServices projectFileTypeServices, CssHtmlTypingAssist cssHtmlTypingAssist);
    public sealed virtual bool IsTagSupported(IHtmlTag tag, ITextControl textControl);
    public sealed virtual bool FormatOnSmartEnter(ITreeNode header, ITreeNode footer, ITextControl textControl, bool insertAdditionalLineBreak);
    public sealed virtual bool IsInsideSupportedTag(ITreeNode node, ITextControl textControl);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Intentions.Css.ZoneMarker : object {
}
public class JetBrains.ReSharper.Intentions.Html.Angular2.Angular2HtmlBananaFix : QuickFixBase {
    private AngularBananaInABoxHighlighting myHighlighting;
    public string Text { get; }
    public Angular2HtmlBananaFix(AngularBananaInABoxHighlighting highlighting);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.Html.Angular2.Angular2HtmlErrorRegister : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Html.ContextActions.ConvertHtmlEntityContextAction : ContextActionBase {
    [NotNullAttribute]
private IWebContextActionDataProvider`1<IHtmlFile> myDataProvider;
    [NotNullAttribute]
private HtmlEntitiesWalker myWalker;
    [NotNullAttribute]
private HtmlEntitiesService myHtmlEntitiesService;
    public string Text { get; }
    public ConvertHtmlEntityContextAction(IWebContextActionDataProvider`1<IHtmlFile> dataProvider);
    [CanBeNullAttribute]
private Tuple`2<IHtmlTreeNode, TreeTextRange> GetEntityTokenData();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
private IEnumerable`1<Tuple`2<IHtmlTreeNode, TreeTextRange>> <GetEntityTokenData>b__4_1(IHtmlToken _);
    [CompilerGeneratedAttribute]
private bool <GetEntityTokenData>b__4_2(Tuple`2<IHtmlTreeNode, TreeTextRange> _);
}
public abstract class JetBrains.ReSharper.Intentions.Html.ContextActions.ExpandEmptyTagActionBase : object {
    [CanBeNullAttribute]
public IHtmlTagHeader TagHeader { get; }
    public string Text { get; }
    protected bool IsAvailable(IHtmlTagHeader tagHeader);
    public abstract virtual IHtmlTagHeader get_TagHeader();
    public sealed virtual string get_Text();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Html.ContextActions.ExpandEmptyTagContextAction : ExpandEmptyTagActionBase {
    private IWebContextActionDataProvider`1<IHtmlFile> myDataProvider;
    public IHtmlTagHeader TagHeader { get; }
    public ExpandEmptyTagContextAction(IWebContextActionDataProvider`1<IHtmlFile> dataProvider);
    public virtual IHtmlTagHeader get_TagHeader();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[ContextActionGroupAttribute]
public static class JetBrains.ReSharper.Intentions.Html.ContextActions.HtmlContextActions : object {
    public static string GroupID;
}
public abstract class JetBrains.ReSharper.Intentions.Html.ContextActions.MakeEmptyTagActionBase : object {
    protected bool IsAvailable(IHtmlTag tag);
    protected IBulbAction CreateBulbAction(IHtmlTag tag);
    private static bool IsEmptyTag(IHtmlTag htmlTag);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Html.ContextActions.MakeEmptyTagContextAction : MakeEmptyTagActionBase {
    private IWebContextActionDataProvider`1<IHtmlFile> myDataProvider;
    public MakeEmptyTagContextAction(IWebContextActionDataProvider`1<IHtmlFile> dataProvider);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public abstract class JetBrains.ReSharper.Intentions.Html.ContextActions.RemoveAttributeContextActionBase`1 : ContextActionBase {
    private IWebContextActionDataProvider`1<IHtmlFile> myDataProvider;
    public string Text { get; }
    protected RemoveAttributeContextActionBase`1(IWebContextActionDataProvider`1<IHtmlFile> dataProvider);
    private TAttribute GetAttribute();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Html.ContextActions.RemoveTagAttributeContextAction : RemoveAttributeContextActionBase`1<ITagAttribute> {
    public RemoveTagAttributeContextAction(IWebContextActionDataProvider`1<IHtmlFile> dataProvider);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Html.ContextActions.RemoveTagContextAction : ContextActionBase {
    private IWebContextActionDataProvider`1<IHtmlFile> myDataProvider;
    protected bool OptimizeChangesOnCommit { get; }
    public string Text { get; }
    public RemoveTagContextAction(IWebContextActionDataProvider`1<IHtmlFile> dataProvider);
    protected virtual bool get_OptimizeChangesOnCommit();
    [CanBeNullAttribute]
protected ITagNameContainer GetActiveTag();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static Nullable`1<DocumentOffset> GetNewDocumentOffset(DocumentOffset offset, Nullable`1<int> offsetInside);
    private static Nullable`1<int> TryGetNewDocumentOffset(DocumentRange tagRange, DocumentRange innerRange, DocumentOffset offset);
}
public abstract class JetBrains.ReSharper.Intentions.Html.ContextActions.ReorderAttributesContextActionBase`2 : ContextActionBase {
    private IWebContextActionDataProvider`1<IHtmlFile> myDataProvider;
    public string Text { get; }
    protected ReorderAttributesContextActionBase`2(IWebContextActionDataProvider`1<IHtmlFile> dataProvider);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Html.ContextActions.ReorderTagAttributesContextAction : ReorderAttributesContextActionBase`2<ITagAttribute, IHtmlTagHeader> {
    public ReorderTagAttributesContextAction(IWebContextActionDataProvider`1<IHtmlFile> dataProvider);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Html.ContextActions.ReplaceAllTagsContextAction : ContextActionBase {
    private IWebContextActionDataProvider`1<IHtmlFile> myDataProvider;
    public string Text { get; }
    public ReplaceAllTagsContextAction(IWebContextActionDataProvider`1<IHtmlFile> dataProvider);
    [CanBeNullAttribute]
protected ITagNameContainer GetActiveTag();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    [NotNullAttribute]
protected virtual IEnumerable`1<IHtmlToken> FilterTagPlaceholders(ITagNameContainer activeTag, IEnumerable`1<IHtmlToken> tokens);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual Action`1<ITextControl> ExecuteAfterPsiTransaction(ISolution solution, IProjectModelTransactionCookie cookie, IProgressIndicator progress);
    private static IEnumerable`1<T> GetAllTags(ITreeNode activeTag);
}
[ActionHandler("JetBrains.ReSharper.Refactorings.Rename.RenameAction")]
public class JetBrains.ReSharper.Intentions.Html.ContextActions.ReplaceTagAsRenameAction : ContextActionAsActionHandler`1<ReplaceTagContextAction> {
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Html.ContextActions.ReplaceTagContextAction : ReplaceAllTagsContextAction {
    public string Text { get; }
    public ReplaceTagContextAction(IWebContextActionDataProvider`1<IHtmlFile> dataProvider);
    public virtual string get_Text();
    protected virtual IEnumerable`1<IHtmlToken> FilterTagPlaceholders(ITagNameContainer activeTag, IEnumerable`1<IHtmlToken> tokens);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Html.ContextActions.RunPathMappingEditorContextAction : object {
    private IWebContextActionDataProvider`1<IHtmlFile> myDataProvider;
    private IBulbAction[] myItems;
    public IBulbAction[] Items { get; }
    public RunPathMappingEditorContextAction(IWebContextActionDataProvider`1<IHtmlFile> dataProvider);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public IBulbAction[] get_Items();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[ActionGroupAttribute("ReSharper.WebTools", "1", "10")]
[ObsoleteAttribute("feature is obsolete, removed from main menu... Done.")]
public class JetBrains.ReSharper.Intentions.Html.Menu.WebToolsMenu : object {
    public WebToolsMenu(HighlightTableColumnAction highlightTableColumnAction, HighlightTableRowAction highlightTableRowAction, InsertTableColumnBeforeAction insertTableColumnBeforeContext, InsertTableColumnAfterAction insertTableColumnAfter, InsertTableRowBeforeAction insertTableRowBefore, InsertTableRowAfterAction insertTableRowAfter);
}
internal class JetBrains.ReSharper.Intentions.Html.QuickFixes.DisableWarning.HtmlDisableAndRestoreWarningByCommentsAction : HtmlDisableWarningByCommentActionBase {
    public string Text { get; }
    protected string OpeningText { get; }
    protected string ClosingText { get; }
    public HtmlDisableAndRestoreWarningByCommentsAction(DocumentRange range, string severityId);
    public virtual string get_Text();
    protected virtual string get_OpeningText();
    protected virtual string get_ClosingText();
}
internal class JetBrains.ReSharper.Intentions.Html.QuickFixes.DisableWarning.HtmlDisableOnceWarningByCommentAction : HtmlDisableWarningByCommentActionBase {
    public string Text { get; }
    protected string OpeningText { get; }
    protected string ClosingText { get; }
    public HtmlDisableOnceWarningByCommentAction(DocumentRange range, string severityId);
    public virtual string get_Text();
    protected virtual string get_OpeningText();
    protected virtual string get_ClosingText();
}
public abstract class JetBrains.ReSharper.Intentions.Html.QuickFixes.DisableWarning.HtmlDisableWarningByCommentActionBase : object {
    private DocumentRange myRange;
    [NotNullAttribute]
protected string SeverityId;
    public string Text { get; }
    [NotNullAttribute]
protected string OpeningText { get; }
    [CanBeNullAttribute]
protected string ClosingText { get; }
    protected HtmlDisableWarningByCommentActionBase(DocumentRange range, string severityId);
    public abstract virtual string get_Text();
    protected abstract virtual string get_OpeningText();
    protected abstract virtual string get_ClosingText();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
}
[CustomHighlightingActionProviderAttribute("JetBrains.ProjectModel.HtmlProjectFileType")]
public class JetBrains.ReSharper.Intentions.Html.QuickFixes.DisableWarning.HtmlDisableWarningByCommentActionProvider : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Html.QuickFixes.DisableWarning.HtmlDisableWarningByCommentActionProvider/<GetActions>d__0")]
public sealed virtual IEnumerable`1<IntentionAction> GetActions(IHighlighting highlighting, DocumentRange highlightingRange, IPsiSourceFile sourceFile, IAnchor configureAnchor);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Html.QuickFixes.ExpandEmptyTagQuickFix : ExpandEmptyTagActionBase {
    private HtmlTagShouldNotBeSelfClosedHighlighting myHighlighting;
    [NotNullAttribute]
public IHtmlTagHeader TagHeader { get; }
    public ExpandEmptyTagQuickFix(HtmlTagShouldNotBeSelfClosedHighlighting highlighting);
    public virtual IHtmlTagHeader get_TagHeader();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.Html.QuickFixes.HtmlAttributeQuotesFix : ModernScopedNonIncrementalQuickFixBase {
    [CompilerGeneratedAttribute]
private HtmlAttributesQuotesWarning <htmlAttributesQuotesWarning>P;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public HtmlAttributeQuotesFix(HtmlAttributesQuotesWarning htmlAttributesQuotesWarning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private bool IsValid();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.Html.QuickFixes.HtmlChangeNameFix : QuickFixBase {
    private string mySuggestedName;
    private IReference myReference;
    public string Text { get; }
    public HtmlChangeNameFix(IReference reference, IEnumerable`1<string> conflictName);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual void Execute(ISolution solution, ITextControl textControl);
    public virtual bool IsAvailable(IUserDataHolder cache);
    private bool IsAvailable();
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Html.QuickFixes.HtmlConditionalCommentQuickFix : object {
    private IHtmlConditionalComment myConditionalComment;
    public HtmlConditionalCommentQuickFix(HtmlConditionalCommentErrorHighlighting highlighting);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    private static string GetEndTokenText(IHtmlConditionalComment comment);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("16")]
internal class JetBrains.ReSharper.Intentions.Html.QuickFixes.HtmlQuickFixesRegistrator : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
    public sealed virtual void Register(IHighlightingCleanupItemsRegistrar registrar);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Html.QuickFixes.HtmlRemoveDeadCodeQuickFix : object {
    private IHtmlTreeNode myElement;
    public HtmlRemoveDeadCodeQuickFix(HtmlDeadCodeHighlighting highlighting);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Html.QuickFixes.HtmlTagNotClosedQuickFix : object {
    private HtmlTagNotClosedHighlighting myHighlighting;
    public HtmlTagNotClosedQuickFix(HtmlTagNotClosedHighlighting highlighting);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Html.QuickFixes.Import.HtmlChangePathMappingQuickFix : object {
    [CanBeNullAttribute]
private IIgnorablePathReference myPathReference;
    public HtmlChangePathMappingQuickFix(HtmlPathWarningHighlighting highlighting);
    protected HtmlChangePathMappingQuickFix(IIgnorablePathReference pathReference);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
internal class JetBrains.ReSharper.Intentions.Html.QuickFixes.Import.HtmlImportPathPopupQuickFix : HtmlImportPathQuickFix {
    public string PopupMenuCaption { get; }
    public string PopupKey { get; }
    public Anchoring2D[] PopupAnchorings { get; }
    public HtmlImportPathPopupQuickFix(HtmlPathWarningHighlighting highlighting);
    public sealed virtual string get_PopupMenuCaption();
    public sealed virtual string get_PopupKey();
    public sealed virtual Anchoring2D[] get_PopupAnchorings();
    public sealed virtual void OnPopupShown(Lifetime showingLifetime);
    public sealed virtual void FillMenuItemDescriptor(IBulbAction key, IMenuItemDescriptor descriptor);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Html.QuickFixes.Import.HtmlImportPathQuickFix : object {
    [NotNullAttribute]
private IPathReference myPathReference;
    [CanBeNullAttribute]
private IList`1<IPathDeclaredElement> myPathElements;
    public HtmlImportPathQuickFix(HtmlPathWarningHighlighting highlighting);
    protected HtmlImportPathQuickFix(IPathReference pathReferecne);
    protected IList`1<IPathDeclaredElement> GetProjectItems();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IBulbAction> CreateBulbActions();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Html.QuickFixes.MakeEmptyTagQuickFix : MakeEmptyTagActionBase {
    private HtmlTagShouldBeSelfClosedHighlighting myHighlighting;
    public MakeEmptyTagQuickFix(HtmlTagShouldBeSelfClosedHighlighting highlighting);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public abstract class JetBrains.ReSharper.Intentions.Html.Table.HighlightHtmlActionBase : HtmlActionBase {
    protected virtual IEnumerable`1<DocumentRange> GetEntryHighlightingRages(IHtmlTag element);
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "JetBrains.ReSharper.Intentions.Resources.Strings11", "HighlightHTMLActionSettingsSettingDescription")]
public class JetBrains.ReSharper.Intentions.Html.Table.HighlightHtmlActionSettings : object {
    [CompilerGeneratedAttribute]
private bool <HintUsed>k__BackingField;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Intentions.Resources.Strings11", "ExplanationHowToDismissHTMLHighlightingsIsAlreadyShownSettingDescription")]
public bool HintUsed { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_HintUsed();
    [CompilerGeneratedAttribute]
public void set_HintUsed(bool value);
}
[GlobalSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.Intentions.Html.Table.HighlightHtmlActionSettingsUpgrader : SettingTablesUpgrader {
    public HighlightHtmlActionSettingsUpgrader(ProductConfigurations productConfigurations);
    protected virtual void DoUpgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime, SettingsTableBase workspaceSettingsTable, SettingsTableBase globalSettingsTable);
}
[ActionAttribute("JetBrains.ReSharper.Intentions.Resources.Strings11", "HighlightTableColumnActionText")]
public class JetBrains.ReSharper.Intentions.Html.Table.HighlightTableColumnAction : HighlightHtmlActionBase {
    public virtual IHtmlTag GetEntry(IHtmlFile htmlFile, int offset);
    protected virtual IEnumerable`1<DocumentRange> GetEntryHighlightingRages(IHtmlTag element);
}
[ActionAttribute("JetBrains.ReSharper.Intentions.Resources.Strings11", "HighlightTableRowActionText")]
public class JetBrains.ReSharper.Intentions.Html.Table.HighlightTableRowAction : HighlightHtmlActionBase {
    public virtual IHtmlTag GetEntry(IHtmlFile htmlFile, int offset);
}
public abstract class JetBrains.ReSharper.Intentions.Html.Table.HtmlActionBase : object {
    [CanBeNullAttribute]
protected static Tuple`2<IHtmlFile, int> GetHtmlFile(ISolution solution, ITextControl textControl);
    [CanBeNullAttribute]
public abstract virtual IHtmlTag GetEntry(IHtmlFile htmlFile, int offset);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public abstract virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public abstract class JetBrains.ReSharper.Intentions.Html.Table.InsertTableActionBase : HtmlActionBase {
    public bool InsertBefore { get; }
    public abstract virtual bool get_InsertBefore();
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public void Execute(ISolution solution, ITextControl textControl);
    protected abstract virtual IEnumerable`1<Tuple`2<IEnumerable`1<ITreeNode>, IRangeMarker>> GetNewTags(IHtmlTag cell, IProjectFile projectFile);
}
public abstract class JetBrains.ReSharper.Intentions.Html.Table.InsertTableColumnAction : InsertTableActionBase {
    protected virtual IEnumerable`1<Tuple`2<IEnumerable`1<ITreeNode>, IRangeMarker>> GetNewTags(IHtmlTag entry, IProjectFile projectFile);
    public virtual IHtmlTag GetEntry(IHtmlFile htmlFile, int offset);
}
[ActionAttribute("InsertTableColumnAfter", "JetBrains.ReSharper.Intentions.Resources.Strings11", "InsertTableColumnAfterActionText")]
public class JetBrains.ReSharper.Intentions.Html.Table.InsertTableColumnAfterAction : InsertTableColumnAction {
    public static string ActionId;
    public bool InsertBefore { get; }
    public virtual bool get_InsertBefore();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Html.Table.InsertTableColumnAfterContextAction : InsertTableContextActionBase {
    public string Text { get; }
    protected string ActionId { get; }
    public InsertTableColumnAfterContextAction(IWebContextActionDataProvider`1<IHtmlFile> provider);
    public virtual string get_Text();
    protected virtual string get_ActionId();
    protected virtual IHtmlTag GetEntry(IHtmlFile htmlFile, int offset);
}
[ActionAttribute("InsertTableColumnBefore", "JetBrains.ReSharper.Intentions.Resources.Strings11", "InsertTableColumnBeforeActionText")]
public class JetBrains.ReSharper.Intentions.Html.Table.InsertTableColumnBeforeAction : InsertTableColumnAction {
    public static string ActionId;
    public bool InsertBefore { get; }
    public virtual bool get_InsertBefore();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Html.Table.InsertTableColumnBeforeContextAction : InsertTableContextActionBase {
    public string Text { get; }
    protected string ActionId { get; }
    public InsertTableColumnBeforeContextAction(IWebContextActionDataProvider`1<IHtmlFile> provider);
    public virtual string get_Text();
    protected virtual IHtmlTag GetEntry(IHtmlFile htmlFile, int offset);
    protected virtual string get_ActionId();
}
public abstract class JetBrains.ReSharper.Intentions.Html.Table.InsertTableContextActionBase : ContextActionBase {
    private IWebContextActionDataProvider`1<IHtmlFile> myProvider;
    [NotNullAttribute]
protected string ActionId { get; }
    protected InsertTableContextActionBase(IWebContextActionDataProvider`1<IHtmlFile> provider);
    protected abstract virtual string get_ActionId();
    [CanBeNullAttribute]
protected abstract virtual IHtmlTag GetEntry(IHtmlFile htmlFile, int offset);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected sealed virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual void Execute(ISolution solution, ITextControl textControl);
}
public abstract class JetBrains.ReSharper.Intentions.Html.Table.InsertTableRowAction : InsertTableActionBase {
    public static string BeforeActionID;
    public static string AfterActionID;
    protected virtual IEnumerable`1<Tuple`2<IEnumerable`1<ITreeNode>, IRangeMarker>> GetNewTags(IHtmlTag row, IProjectFile projectFile);
    public virtual IHtmlTag GetEntry(IHtmlFile htmlFile, int offset);
}
[ActionAttribute("InsertTableRowAfter", "JetBrains.ReSharper.Intentions.Resources.Strings11", "InsertTableRowAfterActionText")]
public class JetBrains.ReSharper.Intentions.Html.Table.InsertTableRowAfterAction : InsertTableRowAction {
    public bool InsertBefore { get; }
    public virtual bool get_InsertBefore();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Html.Table.InsertTableRowAfterContextAction : InsertTableContextActionBase {
    public string Text { get; }
    protected string ActionId { get; }
    public InsertTableRowAfterContextAction(IWebContextActionDataProvider`1<IHtmlFile> provider);
    public virtual string get_Text();
    protected virtual string get_ActionId();
    protected virtual IHtmlTag GetEntry(IHtmlFile htmlFile, int offset);
}
[ActionAttribute("InsertTableRowBefore", "JetBrains.ReSharper.Intentions.Resources.Strings11", "InsertTableRowBeforeActionText")]
public class JetBrains.ReSharper.Intentions.Html.Table.InsertTableRowBeforeAction : InsertTableRowAction {
    public bool InsertBefore { get; }
    public virtual bool get_InsertBefore();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Html.Table.InsertTableRowBeforeContextAction : InsertTableContextActionBase {
    public string Text { get; }
    protected string ActionId { get; }
    public InsertTableRowBeforeContextAction(IWebContextActionDataProvider`1<IHtmlFile> provider);
    public virtual string get_Text();
    protected virtual string get_ActionId();
    protected virtual IHtmlTag GetEntry(IHtmlFile htmlFile, int offset);
}
public static class JetBrains.ReSharper.Intentions.Html.Table.TableActionsUtil : object {
    private static String[] ourCellTagNames;
    private static IDictionary`2<string, IEnumerable`1<string>> ourCellToRowTagNames;
    private static IDictionary`2<string, IEnumerable`1<string>> ourRowToCellTagNames;
    private static TableActionsUtil();
    public static IHtmlTag GetCurrentCell(IHtmlFile htmlFile, int offset);
    public static IHtmlTag GetCurrentRow(IHtmlFile htmlFile, int offset);
    private static Func`2<IHtmlTag, bool> GetTagFilter(ITreeNode solutionElement, IEnumerable`1<string> tagNames);
    [CanBeNullAttribute]
public static IHtmlTag GetRow(IHtmlTag cell);
    public static IHtmlTag GetNewRow(IHtmlTag row);
    public static IEnumerable`1<ITreeNode> GetSpacesBeforeTag(IHtmlTag tag);
    private static IEnumerable`1<ITreeNode> GetSpacesBeforeHtmlToken(IHtmlToken token);
    public static IEnumerable`1<IHtmlTag> GetColumn(IHtmlTag cell);
    private static IEnumerable`1<IHtmlTag> GetRowCells(IHtmlTag row);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Intentions.Html.ZoneMarker : object {
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.AddBracesAction : ContextActionBase {
    private IJavaScriptContextActionDataProvider myProvider;
    public string Text { get; }
    public AddBracesAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [CanBeNullAttribute]
private IJavaScriptStatement FindEmbeddedStatement();
    [CanBeNullAttribute]
private IJavaScriptStatement FindEmbeddedStatementBody(IJavaScriptStatement statement);
    [CanBeNullAttribute]
private static IJavaScriptStatement FindOuterStatementWithBody(IJavaScriptStatement body);
    private bool CursorInRange(ITreeNode fromEnd, ITreeNode toStart);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator pi);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.AddDocCommentAction : DocCommentActionBase {
    public string Text { get; }
    public AddDocCommentAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [CanBeNullAttribute]
private IFunctionExpression FindFunctionWithoutDoc();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.AddJsDocAction : ContextActionBase {
    private IJavaScriptContextActionDataProvider myProvider;
    public string Text { get; }
    public AddJsDocAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    [CanBeNullAttribute]
private IFunctionExpression FindElementWithoutDoc();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.AddReferenceAction : object {
    private IJavaScriptContextActionDataProvider myDataProvider;
    private IReferenceExpression myReferenceExpression;
    public AddReferenceAction(IJavaScriptContextActionDataProvider dataProvider);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.JavaScript.ContextActions.AddReferenceAction/<CreateBulbItems>d__4")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    private List`1<IPsiSourceFile> BestSourceFiles();
    [CompilerGeneratedAttribute]
private bool <BestSourceFiles>b__5_1(IPsiSourceFile x);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.BinToDecAction : ConvertNumericBaseAction {
    public string Text { get; }
    public BinToDecAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual bool IsAvailableImpl(string literalValue, Int32& value);
    protected virtual string CreateReplacement(int value);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.ComputeConstantValueAction : ContextActionBase {
    private IJavaScriptContextActionDataProvider myProvider;
    public string Text { get; }
    public ComputeConstantValueAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.ConcatToTemplateAction : ContextActionBase {
    private IJavaScriptContextActionDataProvider myProvider;
    public string Text { get; }
    public ConcatToTemplateAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    private IBinaryExpression GetTopLevelExpression();
}
public abstract class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.ConvertNumericBaseAction : ContextActionBase {
    private IJavaScriptContextActionDataProvider myDataProvider;
    protected ConvertNumericBaseAction(IJavaScriptContextActionDataProvider provider);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected abstract virtual bool IsAvailableImpl(string literalValue, Int32& value);
    [NotNullAttribute]
protected abstract virtual string CreateReplacement(int value);
    private IJavaScriptLiteralExpression FindNumericLiteral(Int32& value);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected bool Es6LiteralsAvailable();
}
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.CreateFromUsage.BulbActions.CreateLocalFromUsageItem : BulbActionBase {
    private UsageInfo myUsageInfo;
    private IJsFunctionLike myFunction;
    private IJavaScriptStatement myTag;
    private IStatementsOwner myOwnerBlock;
    private JavaScriptServices myServices;
    public string Text { get; }
    public CreateLocalFromUsageItem(UsageInfo usageInfo, IJsFunctionLike function, IJavaScriptStatement tag, IStatementsOwner ownerBlock, JavaScriptServices services);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.CreateFromUsage.BulbActions.CreateParameterFromUsageItem : BulbActionBase {
    private UsageInfo myUsageInfo;
    private IFunctionExpression myFunction;
    private JavaScriptServices myServices;
    public string Text { get; }
    public CreateParameterFromUsageItem(UsageInfo usageInfo, IFunctionExpression function, JavaScriptServices services);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.CreateFromUsage.BulbActions.CreatePropertyFromUsageItem : BulbActionBase {
    private ICreatePropertyFromUsageContext myContext;
    private UsageInfo myUsageInfo;
    public string Text { get; }
    public IProjectFile ProjectFile { get; }
    public CreatePropertyFromUsageItem(ICreatePropertyFromUsageContext context, UsageInfo usageInfo);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public sealed virtual IProjectFile get_ProjectFile();
}
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.CreateFromUsage.BulbActions.ReplaceBinaryExpressionWithVariableDeclarationItem : BulbActionBase {
    private UsageInfo myUsageInfo;
    private IAssignmentExpression myAssignmentExpression;
    private ICompoundExpression myCompExp;
    public string Text { get; }
    public ReplaceBinaryExpressionWithVariableDeclarationItem(UsageInfo usageInfo, IAssignmentExpression assignmentExpression, ICompoundExpression compExp);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.CreateFromUsage.CreateFromUsageAction : object {
    private IJavaScriptContextActionDataProvider myDataProvider;
    private JsTypeResolveResult myType;
    private JsResolveContext myContext;
    private CreateFromUsageData myCreateFromUsageData;
    private UsageInfo myPropertyInfo;
    public CreateFromUsageAction(IJavaScriptContextActionDataProvider dataProvider);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    private IEnumerable`1<IBulbAction> CalculateItems();
    private IList`1<IBulbAction> GetContextlessUsageItems();
    public static bool IsSelfInvoked(IFunctionExpression function);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.CreateFromUsage.CreateFromUsageContextProviders : object {
    private IEnumerable`1<ICreatePropertyFromUsageContextProvier> myProviders;
    public CreateFromUsageContextProviders(IEnumerable`1<ICreatePropertyFromUsageContextProvier> providers);
    public ICollection`1<IJsCreateFromUsageBulbItem> ProvideContexts(JsTypeResolveResult type, UsageInfo usageInfo, CreateFromUsageData data);
}
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.CreateFromUsage.CreateFromUsageData : ValueType {
    [CompilerGeneratedAttribute]
private ITsModuleElement <NonInitializedModuleElement>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullUnresolvedDottedModuleName>k__BackingField;
    [CompilerGeneratedAttribute]
private IReferenceExpression <ReferenceExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private ITsReferenceName <TsReferenceName>k__BackingField;
    public ITsModuleElement NonInitializedModuleElement { get; public set; }
    public string FullUnresolvedDottedModuleName { get; public set; }
    public IReferenceExpression ReferenceExpression { get; public set; }
    public ITsReferenceName TsReferenceName { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ITsModuleElement get_NonInitializedModuleElement();
    [CompilerGeneratedAttribute]
public void set_NonInitializedModuleElement(ITsModuleElement value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_FullUnresolvedDottedModuleName();
    [CompilerGeneratedAttribute]
public void set_FullUnresolvedDottedModuleName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IReferenceExpression get_ReferenceExpression();
    [CompilerGeneratedAttribute]
public void set_ReferenceExpression(IReferenceExpression value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ITsReferenceName get_TsReferenceName();
    [CompilerGeneratedAttribute]
public void set_TsReferenceName(ITsReferenceName value);
}
public static class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.CreateFromUsage.CreateFromUsageUtil : object {
    public static string GetFileAndLinePresentation(UsageInfo info, ICreatePropertyFromUsageContext context, ITreeNode customCreationContext);
    public static string GetObjectLocationPresentation(ITreeNode expression);
    public static string GetObjectLocationPresentationStructured(IJavaScriptExpression expression);
    private static string ExpressionToText(IJavaScriptExpression invocationExpression);
}
public interface JetBrains.ReSharper.Intentions.JavaScript.ContextActions.CreateFromUsage.ICreatePropertyFromUsageContext {
    public string PresentationTextTemplate { get; }
    public string LocationText { get; }
    public int Line { get; }
    public IProjectFile ProjectFile { get; }
    public abstract virtual string get_PresentationTextTemplate();
    public abstract virtual string get_LocationText();
    public abstract virtual int get_Line();
    public abstract virtual IProjectFile get_ProjectFile();
    public abstract virtual Action`1<ITextControl> CreateProperty(UsageInfo usageInfo);
}
public interface JetBrains.ReSharper.Intentions.JavaScript.ContextActions.CreateFromUsage.ICreatePropertyFromUsageContextProvier {
    public abstract virtual IEnumerable`1<IJsCreateFromUsageBulbItem> ProvideContexts(CreateFromUsageContextProviders providers, JsTypeResolveResult type, UsageInfo usageInfo, CreateFromUsageData data);
}
public interface JetBrains.ReSharper.Intentions.JavaScript.ContextActions.CreateFromUsage.IJsCreateFromUsageBulbItem {
    public IProjectFile ProjectFile { get; }
    public abstract virtual IProjectFile get_ProjectFile();
}
public enum JetBrains.ReSharper.Intentions.JavaScript.ContextActions.CreateFromUsage.InvocationKind : Enum {
    public int value__;
    public static InvocationKind NoInvocation;
    public static InvocationKind Invocation;
    public static InvocationKind TaggedTemplate;
}
public interface JetBrains.ReSharper.Intentions.JavaScript.ContextActions.CreateFromUsage.IPropertyInfo {
    public string Name { get; }
    public InvocationKind InvocationKind { get; }
    public IList`1<IExpressionOrSpread> Arguments { get; }
    public abstract virtual string get_Name();
    public abstract virtual InvocationKind get_InvocationKind();
    public abstract virtual IList`1<IExpressionOrSpread> get_Arguments();
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.CreateFromUsage.Standard.FromObjectLiteral : object {
    public sealed virtual IEnumerable`1<IJsCreateFromUsageBulbItem> ProvideContexts(CreateFromUsageContextProviders providers, JsTypeResolveResult type, UsageInfo usageInfo, CreateFromUsageData data);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.CreateFromUsage.Standard.FromObjectTypeOfFunction : object {
    public sealed virtual IEnumerable`1<IJsCreateFromUsageBulbItem> ProvideContexts(CreateFromUsageContextProviders providers, JsTypeResolveResult type, UsageInfo usageInfo, CreateFromUsageData data);
}
internal static class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.CreateFromUsage.TypeScript.ErrorHelper : object {
    public static void ShowCannotGenerateMemberErrorTooltip(ITextControl textControl);
    public static void ShowErrorTooltip(ITextControl textControl, string text);
    public static bool ShowScopeChangeWarning(IProgressIndicator progress, bool importDecl);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.CreateFromUsage.TypeScript.TsQfUtil : object {
    private static int MAX_PROCESSED_IMPORTS_COUNT;
    public static string GetModuleScopeStringDescription(ITypeScriptModuleScope ownerModuleScope);
    public static bool IsOnlyClassToCreate(UsageInfo info);
    public static bool IsOnlyModuleToCreate(UsageInfo info);
    public static List`1<TsCreatedItemKind> CalculateCreatedItemKindsForModuleMembers(UsageInfo info);
    public static List`1<ILookupItem> CalculateCreateFromUsageLookupItems(UsageInfo info, bool isExported, ITreeNode contextNode, JavaScriptServices services);
    [ExtensionAttribute]
public static ITextControl GetProperTextControlForRange(DocumentRange range, ISolution solution, ITextControl currentControl);
    public static string GetQualifierWithDotSameFile(ITreeNode anchor, ITreeNode decl);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static string GetQualifierWithDot(ITreeNode anchor, IDeclaredElement element, JsResolveContext jsResolveContext);
    public static ITsModuleElement GetChildModuleElement(ITsModuleElement current, string name, JsResolveContext context, int recurseDepth);
    public static ITsModuleElement GetTopMostModuleElement(Stack`1<IQualifiedReferenceOwner`2<TQualifier, TReference>> allReferenceExpressions, ITsModuleElement currentElement, String& name, JsResolveContext context, int recurseDepth);
    public static ITsModuleElement GetModuleElementForReferenceExpressionFullQualifierHierarchy(IQualifiedReferenceOwner`2<TQualifier, TReference> expression, String& name, JsResolveContext context, int recurseDepth);
    public static ITsModuleElement GetModuleElementForReferenceExpression(IQualifiedReferenceOwner`2<TQualifier, TReference> expression, JsResolveContext context, int recurseDepth);
    private static ITsModuleElement ModuleElementForQualifierReferenceExpression(IQualifiedReferenceOwner`2<TQualifier, TReference> qq, string name, JsResolveContext context, int recurseDepth);
    private static ITsModuleElement GetModuleElementForQualifierReferenceExpression(IJavaScriptTypedExpression qq2, string name, JsResolveContext context, int recurseDepth);
    public static ITsModuleElement GetModuleDeclaredElement(IList`1<IDeclaredElement> symbolInfos, JsResolveContext context, int recurseDepth);
    private static Nullable`1<JsPrimitive> GetExpressionTypePrimitive(IJavaScriptTypedExpression qq2, JsResolveContext context);
    private static Nullable`1<JsPrimitive> GetInstanceTypePrimitiveForType(IJsUnresolvedType javaScriptType, JsResolveContext context);
}
public static class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.CreateFromUsage.UnresolvedReferenceExpressionActionHelper : object {
    public static bool IsAvailable(IJavaScriptContextActionDataProviderBase`1<TFile> dataProvider, JsResolveContext& context, IReferenceExpression& referenceExpression, ITsReferenceName& tsReferenceName, JsTypeResolveResult& type, ITreeNode contextNode);
}
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.CreateFromUsage.UsageInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private InvocationKind <InvocationKind>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IExpressionOrSpread> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ITsTypeUsage> <TypeParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private IReferenceExpressionReference <Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private IModuleNameReference <TsReference>k__BackingField;
    [CompilerGeneratedAttribute]
private JsResolveContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private ITsType[] <ExpectedTsTypes>k__BackingField;
    public string Name { get; }
    public InvocationKind InvocationKind { get; }
    public IList`1<IExpressionOrSpread> Arguments { get; }
    public IList`1<ITsTypeUsage> TypeParameters { get; }
    public IReferenceExpressionReference Reference { get; }
    public IModuleNameReference TsReference { get; }
    public JsResolveContext Context { get; }
    public ITsType[] ExpectedTsTypes { get; public set; }
    public object InitializerName { get; }
    public UsageInfo(string name, InvocationKind invocationKind, IList`1<IExpressionOrSpread> arguments, IList`1<ITsTypeUsage> typeParameters, IReferenceExpressionReference reference, IModuleNameReference tsReference, ITsType[] expectedTypes, JsResolveContext context);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual InvocationKind get_InvocationKind();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IExpressionOrSpread> get_Arguments();
    [CompilerGeneratedAttribute]
public IList`1<ITsTypeUsage> get_TypeParameters();
    [CompilerGeneratedAttribute]
public IReferenceExpressionReference get_Reference();
    [CompilerGeneratedAttribute]
public IModuleNameReference get_TsReference();
    [CompilerGeneratedAttribute]
public JsResolveContext get_Context();
    [CompilerGeneratedAttribute]
public ITsType[] get_ExpectedTsTypes();
    [CompilerGeneratedAttribute]
public void set_ExpectedTsTypes(ITsType[] value);
    public object get_InitializerName();
    public UsageInfo Clone();
    public string GetDefaultImplementedFunctionBody();
    [CanBeNullAttribute]
public Action`1<ITextControl> CreateInitializerExpression(JavaScriptElementFactory factory, ITreeNode context, Func`2<IJavaScriptExpression, IJavaScriptExpression> addToUserCode);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Intentions.JavaScript.ContextActions.CreateFromUsage.UsageInfo/<SetSelection>d__31")]
public static void SetSelection(IRangeMarker finishRangeMarker, ISolution solution);
}
[ContextActionDataBuilderAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.Bulbs.IInjectedJavaScriptContextActionDataProvider", "16")]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.DataProviders.InjectedJavaScriptContextActionDataBuilder : ContextActionDataBuilderBase`2<InjectedJavaScriptLanguage, IJavaScriptFile> {
    public virtual IContextActionDataProvider BuildFromPsi(ISolution solution, ITextControl textControl, IJavaScriptFile psiFile);
}
[ContextActionDataBuilderAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.Bulbs.IJavaScriptContextActionDataProvider", "16")]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.DataProviders.JavaScriptContextActionDataBuilder : ContextActionDataBuilderBase`2<JavaScriptLanguage, IJavaScriptFile> {
    public virtual IContextActionDataProvider BuildFromPsi(ISolution solution, ITextControl textControl, IJavaScriptFile psiFile);
}
[ContextActionDataBuilderAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.Bulbs.IJsonContextActionDataProvider", "16")]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.DataProviders.JsonContextActionDataBuilder : ContextActionDataBuilderBase`2<JsonLanguage, IJavaScriptFile> {
    public virtual IContextActionDataProvider BuildFromPsi(ISolution solution, ITextControl textControl, IJavaScriptFile psiFile);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.DecToBinAction : ConvertNumericBaseAction {
    public string Text { get; }
    public DecToBinAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual bool IsAvailableImpl(string literalValue, Int32& value);
    protected virtual string CreateReplacement(int value);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.DecToHexAction : ConvertNumericBaseAction {
    public string Text { get; }
    public DecToHexAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual bool IsAvailableImpl(string literalValue, Int32& value);
    protected virtual string CreateReplacement(int value);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.DecToOctAction : ConvertNumericBaseAction {
    public string Text { get; }
    public DecToOctAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual bool IsAvailableImpl(string literalValue, Int32& value);
    protected virtual string CreateReplacement(int value);
}
public abstract class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.DocCommentActionBase : ContextActionBase {
    protected IJavaScriptContextActionDataProvider myProvider;
    private static String[] BasicTypesList;
    protected DocCommentActionBase(IJavaScriptContextActionDataProvider provider);
    private static DocCommentActionBase();
    protected void DoWork(IFunctionExpression function);
    protected static Action`1<ITextControl> HotSpotsForEmptyTags(IJavaScriptDocCommentBlock block);
    private static void AddHotspot(string name, DocumentRange summary, ICollection`1<HotspotInfo> consumer, String[] items);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.FlipOperatorArgumentsAction : ContextActionBase {
    [NotNullAttribute]
private IJavaScriptContextActionDataProvider myProvider;
    [CanBeNullAttribute]
private string myOperatorSign;
    public string Text { get; }
    public FlipOperatorArgumentsAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private static bool IsSupported(TokenNodeType sign);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NotNullAttribute]
private static IJavaScriptExpression FindRightOperandInChainOfSameOperators(IJavaScriptExpression current, ITokenNodeType operatorSign);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.FlipRelationalExpressionAction : LogicalExpressionActionBase {
    [CanBeNullAttribute]
private string myOperatorSign;
    [CanBeNullAttribute]
private string myInvertedSign;
    public string Text { get; }
    public FlipRelationalExpressionAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private static bool IsRelational(TokenNodeType sign);
    private static string FlippedOperator(TokenNodeType sign);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.GetAccessorToPropertyAction : ContextActionBase {
    private IJavaScriptContextActionDataProvider myProvider;
    public string Text { get; }
    public GetAccessorToPropertyAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [CanBeNullAttribute]
private IObjectPropertyAccessor FindStandaloneGetAccessor(IObjectLiteral& objectLiteral);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.HexToDecAction : ConvertNumericBaseAction {
    public string Text { get; }
    public HexToDecAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual bool IsAvailableImpl(string literalValue, Int32& value);
    protected virtual string CreateReplacement(int value);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.IfAndMergeAction : IfMergeActionBase {
    public IfAndMergeAction(IJavaScriptContextActionDataProvider provider);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IIfStatement OuterStatementNavigator(IJavaScriptStatement statement);
    protected virtual IBlock GetBranchBlock(IIfStatement upperIf);
    protected virtual bool CanMergeIfs(IIfStatement groundIf, IIfStatement upperIf);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public abstract class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.IfMergeActionBase : ContextActionBase {
    protected IJavaScriptContextActionDataProvider Provider;
    public string Text { get; }
    protected IfMergeActionBase(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    [CanBeNullAttribute]
protected IIfStatement FindInnerIfStatement();
    [CanBeNullAttribute]
protected abstract virtual IIfStatement OuterStatementNavigator(IJavaScriptStatement statement);
    [CanBeNullAttribute]
protected abstract virtual IBlock GetBranchBlock(IIfStatement upperIf);
    [CanBeNullAttribute]
protected IIfStatement FindOuterIfStatement(IIfStatement innerIfStatement);
    [CanBeNullAttribute]
protected IBlock CheckInnerAsLastStatement(IIfStatement groundIf, IIfStatement upperIf);
    protected virtual bool CanMergeIfs(IIfStatement groundIf, IIfStatement upperIf);
    protected static bool NotAffectedByIf(IJavaScriptStatement statement);
    private static bool IsConstantOrJustDeclaration(IVariableDeclaration node);
    protected static void CopyStatementsToUpperBlock(IJavaScriptStatement statementsSource, IJavaScriptStatementsRange toMove);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.IfOrMergeAction : IfMergeActionBase {
    public IfOrMergeAction(IJavaScriptContextActionDataProvider provider);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IIfStatement OuterStatementNavigator(IJavaScriptStatement statement);
    protected virtual IBlock GetBranchBlock(IIfStatement upperIf);
    protected virtual bool CanMergeIfs(IIfStatement groundIf, IIfStatement upperIf);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.IfToSwitchAction : ContextActionBase {
    private IJavaScriptContextActionDataProvider myDataProvider;
    public string Text { get; }
    public IfToSwitchAction(IJavaScriptContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.IfToTernaryAction : ContextActionBase {
    private IJavaScriptContextActionDataProvider myProvider;
    private static ICase[] OurCases;
    public string Text { get; }
    public IfToTernaryAction(IJavaScriptContextActionDataProvider provider);
    private static IfToTernaryAction();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [CanBeNullAttribute]
private ICase FindCase(ICompoundExpression condition, IJavaScriptStatement then, IJavaScriptStatement else);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CanBeNullAttribute]
private ICompoundExpression CreateTernaryEquivalentExpression(ICompoundExpression condition, IJavaScriptTreeNode firstCase, IJavaScriptTreeNode secondCase);
    [NotNullAttribute]
private static IJavaScriptTreeNode GetExpressionThroughParenthesis(IJavaScriptTreeNode expression);
    private static Nullable`1<bool> IsBooleanConstant(IJavaScriptTreeNode expression);
    [CanBeNullAttribute]
private IJsControlFlowStatement FindControlFlowStatement(IIfStatement statement);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.IntroduceVariableAction : ContextActionBase {
    private IJavaScriptContextActionDataProvider myDataProvider;
    public string Text { get; }
    public IntroduceVariableAction(IJavaScriptContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private IExpressionStatement FindExpressionStatement();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [CompilerGeneratedAttribute]
private void <ExecutePsiTransaction>b__4_0(ITextControl textControl);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.InvertIfAction : ContextActionBase {
    private IJavaScriptContextActionDataProvider myProvider;
    public string Text { get; }
    public InvertIfAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [CanBeNullAttribute]
private IIfStatement FindIfStatement();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static void Execute(IIfStatement ifStatement, IJsControlFlowGraph graph);
    private static bool IsLocalContinueStatement(IReference loopLabelReference, IJavaScriptStatement loop);
    [CanBeNullAttribute]
private static IJavaScriptStatementsRange GetStatementsAfterIf(IIfStatement ifStatement, IBlock block);
    [NotNullAttribute]
private static IJavaScriptStatementsRange GetAllStatementsRange(IJavaScriptStatement statement);
    [CanBeNullAttribute]
private static TStatementType AsSingleStatement(IJavaScriptStatement statement);
    [CanBeNullAttribute]
private static ICompoundExpression GetSingleReturnValue(IJavaScriptStatement then, IControlFlowGraph graph);
    private static bool NavigatesToLoop(IJavaScriptStatementsRange range, IJavaScriptStatement loop, IJsControlFlowGraph graph);
    private static bool NavigatesToExit(IJavaScriptStatementsRange afterIfStatements, IControlFlowGraph graph);
    [NotNullAttribute]
private static List`1<IControlFlowEdge> ExitsExceptReturnsAndThrows(ITreeNode statement, IControlFlowGraph graph);
    [NotNullAttribute]
private static IEnumerable`1<IControlFlowEdge> AllReachableEdgesOutside(IJavaScriptStatement then, IControlFlowGraph graph);
    private static bool IsNullTarget(IControlFlowEdge edge);
    private static bool InsideLoopExceptFirstStatement(IJavaScriptStatement loopStatement, ITreeNode targetElement);
    private static bool EndsWithImplicitExit(ITreeNode ifStatement, IControlFlowGraph graph);
    private static bool IsReachableByRegularControlFlow(TreeTextRange fromRange, TreeTextRange toRange, IControlFlowGraph graph);
    [CanBeNullAttribute]
private static IReturnStatement EdgeTargetAsReturnStatement(IControlFlowEdge edge);
    private static TreeTextRange MakeTextRange(IJavaScriptStatementsRange statements);
    private static bool OutsideOfRange(ITreeNode targetElement, IJavaScriptStatementsRange range);
    private static bool IsLastExecutedInBlock(IJavaScriptStatement loopBody, IJavaScriptStatement isLast);
    private static void InvertIfWithElse(IIfStatement oldIfStatement);
    private static void InvertEmptyIf(IIfStatement oldIfStatement);
    private static void InvertIgnoringThen(IIfStatement oldIfStatement, IBlock block, IJavaScriptStatementsRange range);
    private static void InvertWithExit(IIfStatement oldIfStatement, IStatementsOwner owner, string exitKeyword, Object[] args);
    [CanBeNullAttribute]
private static ICompoundExpression InvertIfStatementCondition(IIfStatement ifStatement);
    private static void InvertWithThen(IIfStatement ifStatement, IBlock block, IJavaScriptStatementsRange afterIfStatements);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.InvertTernaryAction : ContextActionBase {
    private IJavaScriptContextActionDataProvider myProvider;
    public string Text { get; }
    public InvertTernaryAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [CanBeNullAttribute]
private IConditionalTernaryExpression FindConditionalExpression();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionGroupAttribute]
public static class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.JavaScriptContextActions : object {
    public static string GroupID;
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.JoinDeclarationAction : ContextActionBase {
    private IJavaScriptContextActionDataProvider myDataProvider;
    public string Text { get; }
    public JoinDeclarationAction(IJavaScriptContextActionDataProvider dataProvider);
    public virtual string get_Text();
    [CanBeNullAttribute]
private IAssignmentExpression FindAssignmentExpression();
    [CanBeNullAttribute]
private IVariableDeclaration FindLocalVariableDeclaration();
    [CanBeNullAttribute]
private static IBlock FindBlockByReference(IReference rf);
    private static bool ScopeContainsReferenceBlock(ITreeNode parent, ITreeNode child);
    private static bool CheckReferences(IDeclaredElement variable, IJavaScriptStatement assignment);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public static bool IsAvailable(IAssignmentExpression assignmentExpression, IVariableDeclaration localVariableDeclaration, Predicate`1<TreeTextRange> rangeChecker);
    private static IReference GetFirstReference(IDeclaredElement element);
    private static IVariableDeclaration FindSuitableLocalVariableDeclaration(IDeclaredElement element);
    private static IVariableDeclaration FindDeclaration(IAssignmentExpression expression);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static IJavaScriptStatement Execute(IAssignmentExpression assignmentExpression, IVariableDeclaration variableDeclaration);
    private static IAssignmentExpression FindAssignment(IDeclaredElement element);
    private static IEnumerable`1<IReference> FindReferences(IDeclaredElement variable);
    [CompilerGeneratedAttribute]
private bool <IsAvailable>b__9_0(TreeTextRange range);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.JoinStringLiteralsAction : ContextActionBase {
    private IJavaScriptContextActionDataProvider myProvider;
    public string Text { get; }
    public JoinStringLiteralsAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private bool FindPlusToken();
    [CanBeNullAttribute]
private IBinaryExpression FindStringConcatenation(IJavaScriptLiteralExpression& left, IJavaScriptLiteralExpression& right);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionGroupAttribute]
public static class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.Json.JsonContextActions : object {
    public static string GroupID;
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.Json.SortJsonPropertiesAction : ContextActionBase {
    private IJsonContextActionDataProvider myProvider;
    public string Text { get; }
    public SortJsonPropertiesAction(IJsonContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.LambdaExpressionToReturnAction : ContextActionBase {
    private IJavaScriptContextActionDataProvider myDataProvider;
    private IExpressionLambdaExpression myExpressionLambda;
    public string Text { get; }
    public LambdaExpressionToReturnAction(IJavaScriptContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.LambdaReturnToExpressionAction : ContextActionBase {
    private IJavaScriptContextActionDataProvider myDataProvider;
    private IBlockLambdaExpression myBlockLambda;
    public string Text { get; }
    public LambdaReturnToExpressionAction(IJavaScriptContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public abstract class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.LogicalExpressionActionBase : ContextActionBase {
    [NotNullAttribute]
protected IJavaScriptContextActionDataProvider Provider;
    private bool myInvokedFromSelection;
    protected LogicalExpressionActionBase(IJavaScriptContextActionDataProvider provider);
    [CanBeNullAttribute]
protected Action`1<ITextControl> ReSelectIfNeeded(IJavaScriptExpression resultingExpression);
    public static bool IsBooleanExpression(IJavaScriptExpression expression);
    [CanBeNullAttribute]
protected IJavaScriptExpression SelectionAsBooleanExpression();
    [CanBeNullAttribute]
private static IJavaScriptExpression FindBooleanExpression(IJavaScriptExpression expression);
    private bool CaretBetweenOperands(IBinaryExpression expression);
    [NotNullAttribute]
public static IJavaScriptExpression GetOuterExpressionOfSameKind(IJavaScriptExpression expression);
    [CanBeNullAttribute]
protected static IJavaScriptExpression FindNegatedOperand(IJavaScriptExpression expression);
    [CanBeNullAttribute]
protected static IPrefixExpression FindParentNegation(IJavaScriptExpression expression);
    [CanBeNullAttribute]
protected static string InvertedOperator(string operatorSign);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.MakeStrictAction : ContextActionBase {
    private IJavaScriptContextActionDataProvider myProvider;
    public string Text { get; }
    public MakeStrictAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual IJavaScriptDirectiveOwner FindDirectiveOwner();
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.NegateLogicalExpressionAction : LogicalExpressionActionBase {
    [CanBeNullAttribute]
private string myOperatorSign;
    public string Text { get; }
    public NegateLogicalExpressionAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.NewOctToDecAction : ConvertNumericBaseAction {
    public string Text { get; }
    public NewOctToDecAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual bool IsAvailableImpl(string literalValue, Int32& value);
    protected virtual string CreateReplacement(int value);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.OctToDecAction : ConvertNumericBaseAction {
    public string Text { get; }
    public OctToDecAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual bool IsAvailableImpl(string literalValue, Int32& value);
    protected virtual string CreateReplacement(int value);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.PropertyToAccessorsAction : ContextActionBase {
    private IJavaScriptContextActionDataProvider myProvider;
    public string Text { get; }
    public PropertyToAccessorsAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [CanBeNullAttribute]
private IObjectPropertyInitializer FindObjectLiteralField(IJavaScriptStatement& statement);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static Action`1<ITextControl> CreateRenameHotspot(ISolution solution, IReadOnlyList`1<string> suggestions, DocumentOffset endCaretOffset, DocumentRange[] ranges);
    public static Action`1<ITextControl> CreateRenameHotspot(ISolution solution, IReadOnlyList`1<string> suggestions, DocumentRange endSelectionRange, DocumentRange[] ranges);
    [NotNullAttribute]
public static IReadOnlyList`1<string> GetLocalNameSuggestions(NamingManager manager, ITreeNode context, string fieldName, IPsiSourceFile sourceFile);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.PropertyToGetAccessorAction : ContextActionBase {
    private IJavaScriptContextActionDataProvider myProvider;
    public string Text { get; }
    public PropertyToGetAccessorAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [CanBeNullAttribute]
private IObjectPropertyInitializer FindObjectLiteralProperty(IObjectLiteral& objectLiteral);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.RemoveBracesAction : ContextActionBase {
    private IJavaScriptContextActionDataProvider myDataProvider;
    public string Text { get; }
    public RemoveBracesAction(IJavaScriptContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator pi);
    public virtual bool IsAvailable(IUserDataHolder cache);
    private static bool IsBraceToken(ITreeNode token);
    private ITreeNode FindBraceToken();
    private static bool CheckBlock(IBlock block, ITreeNode token);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.RemoveParenthesisAction : ContextActionBase {
    private IJavaScriptContextActionDataProvider myProvider;
    public string Text { get; }
    public RemoveParenthesisAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [CanBeNullAttribute]
private IParenthesizedExpression FindRedundantParenthesizedExpression();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.ReplaceLogicalExpressionAction : LogicalExpressionActionBase {
    [CanBeNullAttribute]
private string myOperatorSign;
    [CanBeNullAttribute]
private string myInvertedSign;
    public string Text { get; }
    public ReplaceLogicalExpressionAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.ReplaceStringLiteralQuotesAction : ContextActionBase {
    private IJavaScriptContextActionDataProvider myProvider;
    public string Text { get; }
    public ReplaceStringLiteralQuotesAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [CanBeNullAttribute]
private ITreeNode FindStringLiteral();
    [PureAttribute]
private static bool IsStringLiteral(ITreeNode token);
    [PureAttribute]
public static bool IsSingleQuoted(ITreeNode token);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static bool LastQuoteIsEscaped(string text);
    [CanBeNullAttribute]
public static ITreeNode Execute(ITreeNode token);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.ReverseAssignmentAction : ContextActionBase {
    private IJavaScriptContextActionDataProvider myDataProvider;
    public string Text { get; }
    public ReverseAssignmentAction(IJavaScriptContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator pi);
    public virtual bool IsAvailable(IUserDataHolder cache);
    [CanBeNullAttribute]
private IAssignmentExpression GetAssignmentStatement();
}
public abstract class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.SplitActionBase : ContextActionBase {
    [NotNullAttribute]
protected IJavaScriptContextActionDataProvider Provider;
    protected SplitActionBase(IJavaScriptContextActionDataProvider provider);
    [CanBeNullAttribute]
protected IJavaScriptExpression FindIfStatementCondition(IIfStatement& ifStatement);
    protected static bool IsCursorAtSign(IBinaryExpression condition, TreeOffset offset, TokenNodeType sign);
    [NotNullAttribute]
protected static ICollection`1<IJavaScriptExpression> CollectOperands(IJavaScriptExpression expression, TokenNodeType sign, ICollection`1<IJavaScriptExpression> consumer);
    private bool IsSplitter(ITreeNode expression);
    [NotNullAttribute]
protected IJavaScriptExpression BuildLeftCondition(IEnumerable`1<IJavaScriptExpression> expressions, string sign, JavaScriptElementFactory factory);
    [NotNullAttribute]
protected IJavaScriptExpression BuildRightCondition(IEnumerable`1<IJavaScriptExpression> expressions, string sign, JavaScriptElementFactory factory);
    private static void AddArgument(object expression, StringBuilder builder, ICollection`1<object> args);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.SplitAndInIfAction : SplitActionBase {
    public string Text { get; }
    public SplitAndInIfAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.SplitAndInReturnAction : SplitActionBase {
    public string Text { get; }
    public SplitAndInReturnAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [CanBeNullAttribute]
protected IJavaScriptExpression FindReturnStatementValue(IReturnStatement& returnStatement);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.SplitDeclarationAction : ContextActionBase {
    private IJavaScriptContextActionDataProvider myDataProvider;
    private IVariableDeclaration myVariableDeclaration;
    public string Text { get; }
    public SplitDeclarationAction(IJavaScriptContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.SplitDeclarationsListAction : ContextActionBase {
    private IJavaScriptContextActionDataProvider myDataProvider;
    public string Text { get; }
    public SplitDeclarationsListAction(IJavaScriptContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator pi);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.SplitOrInIfAction : SplitActionBase {
    public string Text { get; }
    public SplitOrInIfAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static bool BodyEndsWithReturn(IJavaScriptStatement statement);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.SplitOrInReturnAction : SplitActionBase {
    public string Text { get; }
    public SplitOrInReturnAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [CanBeNullAttribute]
protected IJavaScriptExpression FindReturnStatementValue(IReturnStatement& returnStatement);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.SplitReturnToIfAction : ContextActionBase {
    [NotNullAttribute]
private IJavaScriptContextActionDataProvider myProvider;
    public string Text { get; }
    public SplitReturnToIfAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TernaryToIfAction : ContextActionBase {
    [NotNullAttribute]
private IJavaScriptContextActionDataProvider myProvider;
    private static ICase[] OurCases;
    public string Text { get; }
    public TernaryToIfAction(IJavaScriptContextActionDataProvider provider);
    private static TernaryToIfAction();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private IConditionalTernaryExpression FindConditionalTernaryExpression();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CanBeNullAttribute]
private static ICase CheckCases(IConditionalTernaryExpression expression);
    private static IJavaScriptExpression GetParentThroughParenthesis(IJavaScriptExpression expression);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.ToAccessorPropertyDefinitionAction : ToPropertyDefinitionActionBase {
    public string Text { get; }
    public ToAccessorPropertyDefinitionAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> CreatePropertyDescriptor(ISolution solution, IAssignmentExpression assignment, IJavaScriptStatement statement);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.ToDataPropertyDefinitionAction : ToPropertyDefinitionActionBase {
    public string Text { get; }
    public ToDataPropertyDefinitionAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> CreatePropertyDescriptor(ISolution solution, IAssignmentExpression assignment, IJavaScriptStatement statement);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.ToGetAccessorPropertyDefinitionAction : ToPropertyDefinitionActionBase {
    public string Text { get; }
    public ToGetAccessorPropertyDefinitionAction(IJavaScriptContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> CreatePropertyDescriptor(ISolution solution, IAssignmentExpression assignment, IJavaScriptStatement statement);
}
public abstract class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.ToPropertyDefinitionActionBase : ContextActionBase {
    protected IJavaScriptContextActionDataProvider Provider;
    protected ToPropertyDefinitionActionBase(IJavaScriptContextActionDataProvider provider);
    public virtual bool IsAvailable(IUserDataHolder cache);
    [CanBeNullAttribute]
protected IAssignmentExpression FindConstructorFieldAssign(IJavaScriptStatement& statement);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected abstract virtual Action`1<ITextControl> CreatePropertyDescriptor(ISolution solution, IAssignmentExpression assignment, IJavaScriptStatement statement);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.AddAnotherAccessorAction : ContextActionBase {
    private ITypeScriptContextActionDataProvider myDataProvider;
    private JsAccessorKind myKind;
    public string Text { get; }
    public AddAnotherAccessorAction(ITypeScriptContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.ChangeAnyToTypeAction : GenerateInterfaceItemBase {
    private ITypeScriptContextActionDataProvider myProvider;
    private JsResolveContext myJsResolveContext;
    public string Text { get; }
    public ChangeAnyToTypeAction(ITypeScriptContextActionDataProvider provider);
    public virtual string get_Text();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [CanBeNullAttribute]
private ITsDeclaredTypeUsage FindTypeUsage(String& name, IDeclaration& declaration);
    [CanBeNullAttribute]
private ITsDeclaredTypeUsage GetTypeUsage();
    [CanBeNullAttribute]
private static ITsTypeAnnotation GetTypeAnnotation(ITsTypeUsage typeUsage);
    [CanBeNullAttribute]
private static ITsPropertySignatureDeclaration GetPropertySignature(ITsTypeAnnotation typeAnnotation);
    [CanBeNullAttribute]
private static ITsVariableDeclaration GetAmbientVariableDeclaration(ITsTypeAnnotation typeAnnotation);
    private JsTypeResolveResult GetFullJsType(string name);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.CreateDerivedTypeAction : ContextActionBase {
    private ITypeScriptContextActionDataProvider myDataProvider;
    public string Text { get; }
    public CreateDerivedTypeAction(ITypeScriptContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
internal class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.CreateFromUsage.BulbActions.CreateModuleMemberFromUsageAction : BulbActionBase {
    private UsageInfo myInfo;
    private ITsNewExpression myNewExpression;
    private ITreeNode myAnchorNode;
    private TsCreatedItemKind myKind;
    private bool myIsExported;
    private ITypeScriptModuleScope myOwningScope;
    private TsModulePropertyContext myContext;
    public string Text { get; }
    public IProjectFile ProjectFile { get; }
    public CreateModuleMemberFromUsageAction(UsageInfo info, ITsNewExpression newExpression, ITreeNode anchorNode, TsCreatedItemKind kind, bool isExported, ITypeScriptModuleScope owningScope, TsModulePropertyContext context);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public sealed virtual IProjectFile get_ProjectFile();
}
public interface JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.CreateFromUsage.ICreateFromUsageTsContext {
    public string PresentationTextTemplate { get; }
    public string LocationText { get; }
    public int Line { get; }
    public IProjectFile ProjectFile { get; }
    public abstract virtual string get_PresentationTextTemplate();
    public abstract virtual string get_LocationText();
    public abstract virtual int get_Line();
    public abstract virtual IProjectFile get_ProjectFile();
    public abstract virtual Action`1<ITextControl> CreateProperty(UsageInfo usageInfo);
}
public interface JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.CreateFromUsage.ICreateFromUsageTsContextProvider {
    public abstract virtual IEnumerable`1<ITsCreateFromUsageBulbItem> ProvideContexts(TsCreateFromUsageContextProviders providers, JsTypeResolveResult type, UsageInfo usageInfo, CreateFromUsageData data);
}
public interface JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.CreateFromUsage.ITsCreateFromUsageBulbItem {
    public IProjectFile ProjectFile { get; }
    public abstract virtual IProjectFile get_ProjectFile();
}
public interface JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.CreateFromUsage.ITsItemInfo {
    public string Name { get; }
    public string TypeParametersString { get; }
    public bool IsPublic { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_TypeParametersString();
    public abstract virtual bool get_IsPublic();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.CreateFromUsage.Providers.CfuUtil : object {
    [ExtensionAttribute]
public static string GetName(TsCreatedItemKind kind);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static string CreateNodeText(TsCreatedItemKind kind, string name, string typeParametersString, bool isExported);
}
internal class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.CreateFromUsage.Providers.CreateClassFromNewItem : BulbActionBase {
    private TsModulePropertyContext myContext;
    private ITsModuleDeclaration myModuleDeclaration;
    private UsageInfo myUsageInfo;
    public IProjectFile ProjectFile { get; }
    public string Text { get; }
    public CreateClassFromNewItem(TsModulePropertyContext context, ITsModuleDeclaration moduleDeclaration, UsageInfo usageInfo);
    public sealed virtual IProjectFile get_ProjectFile();
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
internal class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.CreateFromUsage.Providers.CreateDottedNameModuleItem : BulbActionBase {
    private TsModulePropertyContext myContext;
    private ITsModuleDeclaration myModuleDeclaration;
    private string myFullUnresolvedModuleName;
    private UsageInfo myUsageInfo;
    public IProjectFile ProjectFile { get; }
    public string Text { get; }
    public CreateDottedNameModuleItem(TsModulePropertyContext context, ITsModuleDeclaration moduleDeclaration, string fullUnresolvedModuleName, UsageInfo usageInfo);
    public sealed virtual IProjectFile get_ProjectFile();
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
internal class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.CreateFromUsage.Providers.CreateTsModuleMemberLookupItem : TextLookupItemBase {
    private TsCreatedItemKind myKind;
    private UsageInfo myInfo;
    private ITreeNode myContextNode;
    private string myName;
    private bool myIsExported;
    private bool myNoImplicitAny;
    private string myTypeParametersString;
    public IconId Image { get; }
    public string Text { get; public set; }
    public CreateTsModuleMemberLookupItem(TsCreatedItemKind kind, UsageInfo info, ITreeNode contextNode, bool isExported, bool noImplicitAny);
    public virtual IconId get_Image();
    protected virtual DocumentRange DoReplaceText(ITextControl textControl, DocumentRange replaceRange, string typeInName);
    public virtual string get_Text();
    public virtual void set_Text(string value);
}
internal class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.CreateFromUsage.Providers.TsClassPropertyContext : object {
    private ITsClassLikeDeclaration myDeclaration;
    private UsageInfo myUsageInfo;
    private bool myMakeStatic;
    private string myLocationText;
    private Int32`1<DocLine> myLine;
    private IProjectFile myProjectFile;
    public string PresentationTextTemplate { get; }
    public string LocationText { get; }
    public int Line { get; }
    public IProjectFile ProjectFile { get; }
    public TsClassPropertyContext(ITsClassLikeDeclaration declaration, UsageInfo usageInfo, bool makeStatic);
    public sealed virtual string get_PresentationTextTemplate();
    public sealed virtual string get_LocationText();
    public sealed virtual int get_Line();
    public sealed virtual IProjectFile get_ProjectFile();
    public sealed virtual Action`1<ITextControl> CreateProperty(UsageInfo usageInfo);
}
public enum JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.CreateFromUsage.Providers.TsCreatedItemKind : Enum {
    public int value__;
    public static TsCreatedItemKind Enum;
    public static TsCreatedItemKind Class;
    public static TsCreatedItemKind Module;
    public static TsCreatedItemKind Variable;
    public static TsCreatedItemKind Interface;
    public static TsCreatedItemKind Field;
    public static TsCreatedItemKind Method;
    public static TsCreatedItemKind Function;
}
public static class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.CreateFromUsage.Providers.TsCreateFromUsageUtils : object {
    private static string CheckHasGenericArgumentsIdentType;
    public static Action`1<ITextControl> PositionAfterName(ITreeNode nameNode, int shift);
    public static Action`1<ITextControl> PositionInBlockOrAfterName(ITreeNode nameNode);
    public static Action`1<ITextControl> MakeHotSpotsForCreatedMethod(TsElementFactory factory, IJsSignatureNodeInPars newFunction, IList`1<IList`1<string>> allSuggestions, DocumentRange bodyOrReturnTypeRange);
    public static Action`1<ITextControl> MakeHotSpotsForCreatedMethod(TsElementFactory factory, TreeNodeCollection`1<IJavaScriptParameterDeclarationBase> parameters, IList`1<IList`1<string>> allSuggestions, DocumentRange bodyOrReturnTypeRange);
    public static Action`1<ITextControl> MakeHotSpotsForCreatedMethod(TsElementFactory factory, TreeNodeCollection`1<ITreeNode> parameters, Func`2<ITreeNode, DocumentRange> getRangeFunc, IList`1<IList`1<string>> allSuggestions, DocumentRange bodyOrReturnTypeRange);
    public static string CreateGenericTypeUsageString(ITsType tsType, ITreeNode anchorNode);
    public static ITsTypeUsage CreateGenericTypeUsage(ITsType tsType, TsElementFactory factory, ITreeNode anchorNode);
    public static bool CheckHasGenericArguments(ITsType typ, JsResolveContext context);
    public static ITsType GetTypeBaseConstraintOrNull(ITsType typeParameterType, JsResolveContext ctx);
    public static bool IsTypeParameterInScope(ITreeNode anchor, ITsNamedType typeParameter);
    public static string CreateGenericTypeAnnotationStringNoAngleBrackets(UsageInfo usageInfo, ITreeNode anchorNode, bool isForClass);
    public static List`1<IList`1<string>> AddParametersToMethod(UsageInfo usageInfo, TsElementFactory factory, ITreeNode context, ITsSignatureNodeInPars signature);
    public static Action`1<ITextControl> CreateTsClassConstructor(TsElementFactory factory, ITsClassLikeDeclaration classDeclaration, UsageInfo usageInfo);
    public static Action`1<ITextControl> CreateClassFromNewExpression(TsElementFactory factory, ITreeNode anchorStatement, UsageInfo info, bool isExported, bool afterAnchor);
    public static ITsStatement GetAnchorStatementForAddingBefore(ITreeNode anchorNode, ITypeScriptModuleScope ownerModuleScope);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.CreateFromUsage.Providers.TsCreationContextHelper : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.CreateFromUsage.Providers.TsCreationContextHelper/<ExpandNamedConstituents>d__0`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> ExpandNamedConstituents(IJsResolvedType type, JsResolveContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.CreateFromUsage.Providers.TsCreationContextHelper/<FilterOnlyVisibleUserFiles>d__1`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> FilterOnlyVisibleUserFiles(IEnumerable`1<T> items);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.CreateFromUsage.Providers.TsCreationContextHelper/<FilterAlreadyExistingItems>d__2`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> FilterAlreadyExistingItems(IEnumerable`1<T> items, UsageInfo info);
}
internal class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.CreateFromUsage.Providers.TsEnumPropertyContext : object {
    private ITsEnumDeclaration myDeclaration;
    private UsageInfo myUsageInfo;
    private string myLocationText;
    private Int32`1<DocLine> myLine;
    private IProjectFile myProjectFile;
    public string PresentationTextTemplate { get; }
    public string LocationText { get; }
    public int Line { get; }
    public IProjectFile ProjectFile { get; }
    public TsEnumPropertyContext(ITsEnumDeclaration declaration, UsageInfo usageInfo);
    public sealed virtual string get_PresentationTextTemplate();
    public sealed virtual string get_LocationText();
    public sealed virtual int get_Line();
    public sealed virtual IProjectFile get_ProjectFile();
    public sealed virtual Action`1<ITextControl> CreateProperty(UsageInfo usageInfo);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.CreateFromUsage.Providers.TsFromClass : object {
    public sealed virtual IEnumerable`1<ITsCreateFromUsageBulbItem> ProvideContexts(TsCreateFromUsageContextProviders providers, JsTypeResolveResult type, UsageInfo usageInfo, CreateFromUsageData data);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.CreateFromUsage.Providers.TsFromClassStatic : object {
    public sealed virtual IEnumerable`1<ITsCreateFromUsageBulbItem> ProvideContexts(TsCreateFromUsageContextProviders providers, JsTypeResolveResult type, UsageInfo usageInfo, CreateFromUsageData data);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.CreateFromUsage.Providers.TsFromEnum : object {
    public sealed virtual IEnumerable`1<ITsCreateFromUsageBulbItem> ProvideContexts(TsCreateFromUsageContextProviders providers, JsTypeResolveResult type, UsageInfo usageInfo, CreateFromUsageData data);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.CreateFromUsage.Providers.TsFromInterface : object {
    public sealed virtual IEnumerable`1<ITsCreateFromUsageBulbItem> ProvideContexts(TsCreateFromUsageContextProviders providers, JsTypeResolveResult type, UsageInfo usageInfo, CreateFromUsageData data);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.CreateFromUsage.Providers.TsFromModule : object {
    public sealed virtual IEnumerable`1<ITsCreateFromUsageBulbItem> ProvideContexts(TsCreateFromUsageContextProviders providers, JsTypeResolveResult type, UsageInfo usageInfo, CreateFromUsageData data);
    private static IEnumerable`1<ITsCreateFromUsageBulbItem> CreateJsFromUsageBulbItemsForModuleDecls(UsageInfo usageInfo, IEnumerable`1<ITsModuleDeclaration> decls);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.CreateFromUsage.Providers.TsFromObjectLiteral : object {
    public sealed virtual IEnumerable`1<ITsCreateFromUsageBulbItem> ProvideContexts(TsCreateFromUsageContextProviders providers, JsTypeResolveResult type, UsageInfo usageInfo, CreateFromUsageData data);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.CreateFromUsage.Providers.TsFromObjectTypeLiteral : object {
    public sealed virtual IEnumerable`1<ITsCreateFromUsageBulbItem> ProvideContexts(TsCreateFromUsageContextProviders providers, JsTypeResolveResult type, UsageInfo usageInfo, CreateFromUsageData data);
}
internal class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.CreateFromUsage.Providers.TsModulePropertyContext : object {
    private ITsModuleDeclaration myDeclaration;
    private UsageInfo myUsageInfo;
    private string myLocationText;
    private Int32`1<DocLine> myLine;
    private IProjectFile myProjectFile;
    public ITsModuleDeclaration Declaration { get; }
    public UsageInfo UsageInfo { get; }
    public string PresentationTextTemplate { get; }
    public string LocationText { get; }
    public int Line { get; }
    public IProjectFile ProjectFile { get; }
    public TsModulePropertyContext(ITsModuleDeclaration declaration, UsageInfo usageInfo);
    public ITsModuleDeclaration get_Declaration();
    public UsageInfo get_UsageInfo();
    public sealed virtual string get_PresentationTextTemplate();
    public sealed virtual string get_LocationText();
    public sealed virtual int get_Line();
    public sealed virtual IProjectFile get_ProjectFile();
    public sealed virtual Action`1<ITextControl> CreateProperty(UsageInfo usageInfo);
}
internal class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.CreateFromUsage.Providers.TsObjectTypePropertyContext : object {
    private ITsTypeMemberDeclarationOwner myObjectLiteral;
    private UsageInfo myUsageInfo;
    private string myLocationText;
    private Int32`1<DocLine> myLine;
    private IProjectFile myProjectFile;
    public string PresentationTextTemplate { get; }
    public string LocationText { get; }
    public int Line { get; }
    public IProjectFile ProjectFile { get; }
    public TsObjectTypePropertyContext(ITsTypeMemberDeclarationOwner objectLiteral, UsageInfo usageInfo, string locationText);
    public sealed virtual string get_PresentationTextTemplate();
    public sealed virtual string get_LocationText();
    public sealed virtual int get_Line();
    public sealed virtual IProjectFile get_ProjectFile();
    public sealed virtual Action`1<ITextControl> CreateProperty(UsageInfo usageInfo);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.CreateFromUsage.TsCreateFromUsageContextProviders : object {
    private IEnumerable`1<ICreateFromUsageTsContextProvider> myProviders;
    public TsCreateFromUsageContextProviders(IEnumerable`1<ICreateFromUsageTsContextProvider> providers);
    public ICollection`1<ITsCreateFromUsageBulbItem> ProvideContexts(JsTypeResolveResult type, UsageInfo usageInfo, CreateFromUsageData data);
}
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.CreateFromUsage.TsCreateFromUsageItem : BulbActionBase {
    private ICreatePropertyFromUsageContext myContext;
    private UsageInfo myUsageInfo;
    public string Text { get; }
    public IProjectFile ProjectFile { get; }
    public TsCreateFromUsageItem(ICreatePropertyFromUsageContext context, UsageInfo usageInfo);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public sealed virtual IProjectFile get_ProjectFile();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.CreateOverloadWithoutParameterAction : ContextActionBase {
    private ITypeScriptContextActionDataProvider myDataProvider;
    public string Text { get; }
    public CreateOverloadWithoutParameterAction(ITypeScriptContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.CreateTypeScriptLocalFromUsageItem : BulbActionBase {
    private UsageInfo myInfo;
    private ITsNewExpression myNewExpression;
    private ITreeNode myAnchorNode;
    private JavaScriptServices myServices;
    private bool myIsExported;
    private ITypeScriptModuleScope myOwnerModuleScope;
    public string Text { get; }
    public CreateTypeScriptLocalFromUsageItem(UsageInfo info, ITsNewExpression newExpression, ITreeNode anchorNode, JavaScriptServices services, bool isExported);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionDataBuilderAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.Bulbs.TypeScript.ITypeScriptContextActionDataProvider", "16")]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.DataProviders.TsContextActionDataBuilder : ContextActionDataBuilderBase`2<TypeScriptLanguage, ITsFile> {
    public virtual IContextActionDataProvider BuildFromPsi(ISolution solution, ITextControl textControl, ITsFile psiFile);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.FieldToParameterPropertyAction : ContextActionBase {
    private ITypeScriptContextActionDataProvider myDataProvider;
    public string Text { get; }
    public FieldToParameterPropertyAction(ITypeScriptContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    private bool GetData(IList`1<ITsReferenceExpression> variableUsages, IList`1<ITsAssignmentExpression> initsList, ITsMemberVariableDeclaration& variableDeclaration, ITsParameterDeclaration& parameterDeclaration);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.IfToSwitchAction : ContextActionBase {
    private ITypeScriptContextActionDataProvider myDataProvider;
    public string Text { get; }
    public IfToSwitchAction(ITypeScriptContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[ContextActionAttribute]
[NonHighlightingSourceAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.ImportTypesAction : object {
    private ITypeScriptContextActionDataProvider myProvider;
    private JsResolveContext myJsResolveContext;
    private JsTypeResolveResult myType;
    private IReferenceExpression myReferenceExpression;
    private ITsReferenceName myTsReferenceName;
    public ImportTypesAction(ITypeScriptContextActionDataProvider provider);
    public static List`1<IQualifiedReferenceOwner`2<TQualifier, TReference>> QualifierExpressions(IQualifiedReferenceOwner`2<TQualifier, TReference> expression);
    private string FilterElementsAndGetDescription(ITsMemberElement element, ITreeNode contextNode, bool isInvocable);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.InlineTypeAliasAction : ContextActionBase {
    private ITypeScriptContextActionDataProvider myDataProvider;
    private ITsTypeAliasDeclaration myTypeAliasDeclaration;
    private ITsTypeUsage myTypeUsage;
    public string Text { get; }
    public InlineTypeAliasAction(ITypeScriptContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.IntroduceTypeAliasAction : ContextActionBase {
    private ITypeScriptContextActionDataProvider myDataProvider;
    public string Text { get; }
    public IntroduceTypeAliasAction(ITypeScriptContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    private ITsTypeUsage GetSelectedTypeUsage();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.MoveTypeToAnotherFileAction : object {
    [NotNullAttribute]
private ITypeScriptContextActionDataProvider myDataProvider;
    [CanBeNullAttribute]
private string myProposedFileName;
    public string Text { get; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public MoveTypeToAnotherFileAction(ITypeScriptContextActionDataProvider dataProvider);
    public sealed virtual string get_Text();
    public sealed virtual string get_ScopedText();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
    public sealed virtual FileCollectorInfo get_FileCollectorInfo();
    public sealed virtual Action`1<ITextControl> ExecuteAction(ISolution solution, Scope scope, IHighlighting sourceHighlighting, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.ParameterPropertyToFieldAction : ContextActionBase {
    private ITypeScriptContextActionDataProvider myDataProvider;
    public string Text { get; }
    public ParameterPropertyToFieldAction(ITypeScriptContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.RenameFileToMatchTypeNameAction : RenameFileToMatchTypeNameActionBase {
    private ITypeScriptContextActionDataProvider myDataProvider;
    public string Text { get; }
    public RenameFileToMatchTypeNameAction(ITypeScriptContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public static bool TypeNameNameDoesNotCorrespondWithFileName(IDeclaredElement element, IProjectFile projectFile);
    public static int CountTopLevelTypeDeclarations(ITypeScriptModuleScope declaration);
    private ITypeScriptGlobalDeclaration FindTypeDeclaration();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.TsChangeModifierAction : object {
    private ITypeScriptContextActionDataProvider myDataProvider;
    private ITreeNode myToken;
    public TsChangeModifierAction(ITypeScriptContextActionDataProvider dataProvider);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    private static bool CheckIdentifierIsForTopLevelModifiersOwner(ITsIdentifierExpression idexpr);
    private static ITreeNode GetTokenOfTypeUnderCaret(IJavaScriptFile jsFile, TreeOffset caretOffset, TokenNodeType[] allowedModifierTypes);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.TsCreateFromUsageAction : object {
    private ITypeScriptContextActionDataProvider myDataProvider;
    private JsTypeResolveResult myType;
    [CanBeNullAttribute]
private ITsModuleElement myModuleDeclaredElement;
    private string myMaxUnresolvedModuleName;
    private JsResolveContext myContext;
    private CreateFromUsageData myCreateFromUsageData;
    private UsageInfo myPropertyInfo;
    public TsCreateFromUsageAction(ITypeScriptContextActionDataProvider dataProvider);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    private IEnumerable`1<IBulbAction> CalculateItems();
    private IList`1<IBulbAction> GetContextlessUsageItems();
    private void AddTypeScriptItems(IReferenceExpression referenceExpression, UsageInfo propertyInfo, List`1<IBulbAction> actions);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.TsDottedNameToNestedModuleAction : ContextActionBase {
    private ITypeScriptContextActionDataProvider myDataProvider;
    private ITsModuleQualifiedName myNameNode;
    private ITsModuleDeclaration myModule;
    public string Text { get; }
    public TsDottedNameToNestedModuleAction(ITypeScriptContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.TsLambdaToMemberFunctionAction : ContextActionBase {
    private ITsTypeAnnotation myTypeAnnotation;
    private ITsParametersList myParametersList;
    private ITsBlockLambdaExpression myExpressionNode;
    private ITsBlock myBlock;
    private ITypeScriptContextActionDataProvider myDataProvider;
    public string Text { get; }
    public TsLambdaToMemberFunctionAction(ITypeScriptContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private ITsObjectPropertyFunction CreatePropertyFunction(string projectedName, ITsBlock sourceBlock);
    private ITsMemberFunctionDeclaration CreateMemberFunction(string declaredName, ITsBlock sourceBlock);
    protected void ModifyTree(ITsBlock sourceBlock);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.TsNestedModuleToDottedNameAction : ContextActionBase {
    private ITypeScriptContextActionDataProvider myDataProvider;
    private ITsModuleDeclaration myModule;
    private ITsModuleDeclaration myParentModule;
    public string Text { get; }
    public TsNestedModuleToDottedNameAction(ITypeScriptContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.TsReplaceImportWithQualifierAction : ContextActionBase {
    private ITypeScriptContextActionDataProvider myDataProvider;
    private ITsImportDeclaration myParentImport;
    private ITsImportedName myImportedName;
    public string Text { get; }
    public TsReplaceImportWithQualifierAction(ITypeScriptContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.TsSpecifyReturnTypeExplicitlyAction : ContextActionBase {
    private ITypeScriptContextActionDataProvider myDataProvider;
    private string myTypeString;
    private ITreeNode myDeclaration;
    public string Text { get; }
    public TsSpecifyReturnTypeExplicitlyAction(ITypeScriptContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    private string GetStringTypeAnnotation(IJsFunctionLike memberFunction);
    private static string ToStringTypePresentation(ITreeNode contextNode, JsTypeResolveResult typ, JsInitialResolveContext context);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.TsSpecifyTypeExplicitlyAction : ContextActionBase {
    private ITypeScriptContextActionDataProvider myDataProvider;
    private string myTypeString;
    private ITsVariableDeclaration myDeclaration;
    public string Text { get; }
    public TsSpecifyTypeExplicitlyAction(ITypeScriptContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[ContextActionGroupAttribute]
public static class JetBrains.ReSharper.Intentions.JavaScript.ContextActions.TypeScript.TypeScriptContextActions : object {
    public static string GroupID;
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.JavaScript.Html.HtmlJsxErrorRegister : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
public class JetBrains.ReSharper.Intentions.JavaScript.Html.HtmlJsxWrongAttributeNameFix : QuickFixBase {
    private HtmlJsxWrongAttributeHighlighting myHighlighting;
    public string Text { get; }
    public HtmlJsxWrongAttributeNameFix(HtmlJsxWrongAttributeHighlighting highlighting);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.Html.JavaScriptFileReferenceImportFix : HtmlImportPathQuickFix {
    public JavaScriptFileReferenceImportFix(ErrorInXmlDocReferenceWarning pathReferecne);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.Html.ZoneMarker : object {
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.AddBlockForLexicalDeclarationFix : QuickFixBase {
    private ILexicalDeclaration myModifierNode;
    public string Text { get; }
    public AddBlockForLexicalDeclarationFix(TS1156Error err);
    public AddBlockForLexicalDeclarationFix(TS1157Error err);
    public AddBlockForLexicalDeclarationFix(LexicalDeclarationNeedsBlockError err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.AddMissingCommaFix : ModernScopedNonIncrementalQuickFixBase {
    [NullableAttribute("2")]
private ITreeNode myInvalidNode;
    public string Text { get; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public bool IsReanalysisRequired { get; }
    public AddMissingCommaFix(ObjectLiteralsAreNotCommaFreeError warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    public virtual bool get_IsReanalysisRequired();
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.AddParenthesesToMakeLambdaBodyObjectLiteralFix : QuickFixBase {
    private SuspiciousLambdaBlockWarning myWarning;
    public string Text { get; }
    public AddParenthesesToMakeLambdaBodyObjectLiteralFix(SuspiciousLambdaBlockWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.AddParenthesesToObjectDestructuringFix : QuickFixBase {
    private ObjectDestructuringWithoutParenthesesWarning myWarning;
    public string Text { get; }
    public AddParenthesesToObjectDestructuringFix(ObjectDestructuringWithoutParenthesesWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.AddReturnValueStatementFix : QuickFixBase {
    private NotAllPathsReturnValueWarning myWarning;
    public string Text { get; }
    public AddReturnValueStatementFix(NotAllPathsReturnValueWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator pi);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.ChangeLanguageLevelFix : QuickFixBase {
    private bool myIsExperimental;
    private bool myIsES7;
    private ITreeNode myErrorNode;
    public string Text { get; }
    public ChangeLanguageLevelFix(Es6FeatureError error);
    public ChangeLanguageLevelFix(Es7FeatureError error);
    public ChangeLanguageLevelFix(ExperimentalFeatureError error);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.codeInspectionsCodeCleanupRegistration : object {
    public sealed virtual void Register(IHighlightingCleanupItemsRegistrar registrar);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.codeInspectionsQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.ConcatToTemplateFix : ModernScopedQuickFixBase {
    [NullableAttribute("2")]
private IBinaryExpression myExpression;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public ConcatToTemplateFix(StringConcatenationToTemplateStringWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static void ConvertBinaryToTemplate(IBinaryExpression binaryExpression);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.controlFlowWarningsQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.ConvertParameterToLocalVariableFix : QuickFixBase {
    private IDeclaration myDeclaration;
    public string Text { get; }
    public ConvertParameterToLocalVariableFix(OverriddenUnusedParameterWarning warning);
    public ConvertParameterToLocalVariableFix(OverriddenInheritedUnusedParameterWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.CorrectVariableKindFix : ModernScopedNonIncrementalQuickFixBase {
    [NullableAttribute("2")]
private ISingleNameBinding myDeclaration;
    [NullableAttribute("2")]
private string myVariableName;
    private bool myTurnToConst;
    [NullableAttribute("2")]
private IVariableDeclaration myOwnerVariable;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public CorrectVariableKindFix(VariableCanBeMadeLetWarning variableCanBeMadeLetWarning);
    public CorrectVariableKindFix(VariableCanBeMadeConstWarning variableCanBeMadeConstWarning);
    public CorrectVariableKindFix(AllVariablesCanBeMadeLetWarning allVariablesCanBeMadeLetWarning);
    public CorrectVariableKindFix(AllVariablesCanBeMadeConstWarning allVariablesCanBeMadeConstWarning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private void ExecuteSingleDeclaration();
    private void ExecuteForBinding(IVariableDeclaration ownerVariable);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.DeclaredVariableForFieldFix : QuickFixBase {
    private MisuseOfOwnerFunctionThisWarning myWarning;
    public string Text { get; }
    public DeclaredVariableForFieldFix(MisuseOfOwnerFunctionThisWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.DeclareLocalVariableFix : QuickFixBase {
    private AssignToImplicitGlobalInFunctionScopeWarning myWarning;
    public string Text { get; }
    public DeclareLocalVariableFix(AssignToImplicitGlobalInFunctionScopeWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator pi);
    private static bool TryTransforForStatement(IJavaScriptStatement tagStatement, IReferenceExpression referenceExpression, string variableName, DocumentRange& varKeywordRange);
    private static bool TryTransforAssignmentStatement(IJavaScriptStatement tagStatement, IReferenceExpression referenceExpression, string variableName, DocumentRange& varKeywordRange);
}
internal class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.DisableWarnings.DisableAndRestoreByCommentsFix : DisableByCommentFixBase {
    public string Text { get; }
    protected string OpeningText { get; }
    protected string ClosingText { get; }
    public DisableAndRestoreByCommentsFix(DocumentRange range, string severityId);
    public virtual string get_Text();
    protected virtual string get_OpeningText();
    protected virtual string get_ClosingText();
}
public abstract class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.DisableWarnings.DisableByCommentFixBase : object {
    private DocumentRange myRange;
    [NotNullAttribute]
protected string SeverityId;
    public string Text { get; }
    [NotNullAttribute]
protected string OpeningText { get; }
    [CanBeNullAttribute]
protected string ClosingText { get; }
    protected DisableByCommentFixBase(DocumentRange range, string severityId);
    public abstract virtual string get_Text();
    protected abstract virtual string get_OpeningText();
    protected abstract virtual string get_ClosingText();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
    private static DocumentRange Filter(IEnumerable`1<ITokenNode> tokens, bool backward, IFile file, String& newLineInThisFile);
}
[CustomHighlightingActionProviderAttribute("JetBrains.ProjectModel.JavaScriptProjectFileType")]
internal class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.DisableWarnings.DisableByCommentWarningActionProvider : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.DisableWarnings.DisableByCommentWarningActionProvider/<GetActions>d__0")]
public sealed virtual IEnumerable`1<IntentionAction> GetActions(IHighlighting highlighting, DocumentRange highlightingRange, IPsiSourceFile sourceFile, IAnchor configureAnchor);
}
internal class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.DisableWarnings.DisableOnceByCommentFix : DisableByCommentFixBase {
    public string Text { get; }
    protected string OpeningText { get; }
    protected string ClosingText { get; }
    public DisableOnceByCommentFix(DocumentRange range, string severityId);
    public virtual string get_Text();
    protected virtual string get_OpeningText();
    protected virtual string get_ClosingText();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.errorsQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.ExplicitlyQualifyWithWindowFix : QuickFixBase {
    [CanBeNullAttribute]
private IReferenceExpression myReferenceExpression;
    [CanBeNullAttribute]
private string myName;
    public string Text { get; }
    public ExplicitlyQualifyWithWindowFix(AssignToImplicitGlobalInFunctionScopeWarning warning);
    public ExplicitlyQualifyWithWindowFix(UseOfImplicitGlobalInFunctionScopeWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator pi);
    private static string GetWindowVarialbeName(ITreeNode treeNode);
    private static bool IsWindow(IExpressionOrSpread expression);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.InlineRedundantIntermediateVariableFix : QuickFixBase {
    private RedundantIntermediateVariableWarning myWarning;
    public string Text { get; }
    public InlineRedundantIntermediateVariableFix(RedundantIntermediateVariableWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.IntroduceVariableFix : QuickFixBase {
    private IJavaScriptExpression myExpression;
    public string Text { get; }
    public IntroduceVariableFix(WrongExpressionStatementWarning warning);
    public IntroduceVariableFix(ConstructorCallNotUsedWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.JavaScript.ContextActions.JoinDeclarationAction")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.JoinDeclarationAndAssignmentFix : QuickFixBase {
    private IAssignmentExpression myAssignment;
    private IVariableDeclaration myDeclaration;
    public string Text { get; }
    public JoinDeclarationAndAssignmentFix(JoinDeclarationAndInitializerWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.JoinIntoSingleStatementFix : QuickFixBase {
    private PossiblyIncorrectlyBrokenStatementWarning myWarning;
    public string Text { get; }
    public JoinIntoSingleStatementFix(PossiblyIncorrectlyBrokenStatementWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.jsHintInspectionsQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.Json.AddExplicitNullJsonCommaFix : ModernScopedNonIncrementalQuickFixBase {
    [NullableAttribute("2")]
private ITreeNode myInvalidNode;
    public string Text { get; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public bool IsReanalysisRequired { get; }
    public AddExplicitNullJsonCommaFix(JsonProhibitedArrayElementOmissionWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    public virtual bool get_IsReanalysisRequired();
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.Json.AddMissingJsonCommaFix : ModernScopedNonIncrementalQuickFixBase {
    [NullableAttribute("2")]
private ITreeNode myInvalidNode;
    public string Text { get; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public bool IsReanalysisRequired { get; }
    public AddMissingJsonCommaFix(JsonCommaExpectedWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    public virtual bool get_IsReanalysisRequired();
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.Json.JsonSchemaIncompatibilitiesFix : object {
    [CompilerGeneratedAttribute]
private JsonValidationFailedWarning <warning>P;
    public JsonSchemaIncompatibilitiesFix(JsonValidationFailedWarning warning);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.Json.JsonSchemaIncompatibilitiesFix/<CreateBulbItems>d__3")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.Json.JsonSchemaIncompatibilitiesFix/<GetFixableIssues>d__4")]
private static IEnumerable`1<AssertionResult> GetFixableIssues(AssertionResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.Json.JsonSchemaIncompatibilitiesFixBulbAction : ModernScopedNonIncrementalQuickFixBase {
    [CompilerGeneratedAttribute]
private JsonValidationFailedWarning <warning>P;
    [CompilerGeneratedAttribute]
private AssertionResult <result>P;
    public string Text { get; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public bool IsReanalysisRequired { get; }
    public JsonSchemaIncompatibilitiesFixBulbAction(JsonValidationFailedWarning warning, AssertionResult result);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    public virtual bool get_IsReanalysisRequired();
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IBulbActionCommand CreatePossibleValueLookup(JsonNodeContext ctx, bool enumOnly, ITreeNode treeNode, bool omitCurrent);
    private static IList`1<string> CalculateLookupItemsForContext(JsonNodeContext ctx, bool enumOnly, ITreeNode treeNode, bool omitCurrent);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.Json.RemoveInvalidJsonConstructFix : QuickFixBase {
    private InvalidJsonSyntaxWarning myWarning;
    public string Text { get; }
    public RemoveInvalidJsonConstructFix(InvalidJsonSyntaxWarning warning);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.Json.RemoveUnexpectedJsonCommaFix : ModernScopedNonIncrementalQuickFixBase {
    [NullableAttribute("2")]
private ITreeNode myInvalidNode;
    public string Text { get; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveUnexpectedJsonCommaFix(JsonTrailingCommaWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    public virtual bool get_IsReanalysisRequired();
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.Json.SanitizeJsonPropertyNameFix : ModernScopedNonIncrementalQuickFixBase {
    [NullableAttribute("2")]
private IPropertyName myInvalidNode;
    public string Text { get; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public bool IsReanalysisRequired { get; }
    public SanitizeJsonPropertyNameFix(InvalidJsonPropertyNameWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    public virtual bool get_IsReanalysisRequired();
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.MoveSuperCallToTopFix : QuickFixBase {
    private IJavaScriptStatement mySuperNode;
    private bool myCanMove;
    public string Text { get; }
    public MoveSuperCallToTopFix(TS2104Error err);
    public MoveSuperCallToTopFix(TS17009Error err);
    public MoveSuperCallToTopFix(TS17009WarningError err);
    public MoveSuperCallToTopFix(SuperCallProhibitsThisError err);
    private MoveSuperCallToTopFix(IJavaScriptStatement superNode, bool canMove);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.MoveToInnerBlockFix : ModernScopedNonIncrementalQuickFixBase {
    [NullableAttribute("2")]
private ISingleNameBinding myDeclaration;
    private string myVariableName;
    private IBlock myTargetBlock;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public MoveToInnerBlockFix(VariableCanBeMovedToInnerBlockWarning variableCanBeMovedToInnerBlockWarning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private void AddToTarget(Action`1<IJavaScriptStatement> addToBlock);
    private static ILexicalDeclaration CreateNewDeclarationStatement(JavaScriptElementFactory factory, string kwd, IVariableDeclaration ownerVar);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.MoveTripleSlashCommentToTopFix : QuickFixBase {
    private bool myCanMove;
    private IDocCommentNode myCommentNode;
    public string Text { get; }
    public MoveTripleSlashCommentToTopFix(IncorrectTripleSlashLocationWarning warning);
    private MoveTripleSlashCommentToTopFix(IDocCommentNode commentNode, bool canMove);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IJavaScriptFileSection GetJavaScriptFileSection(IJavaScriptFile file);
    private static void AddCommentCopyToCommentBlock(IDocCommentBlock lastCommentBlockNode, IDocCommentNode commentNode);
    private static ITreeNode CreateNewLineNode(ITreeNode element);
    private static IJavaScriptDocCommentBlock CreateDocCommentBlock(ITreeNode element);
    private static void AddCommentCopyToFileSection(IJavaScriptFileSection fileSectionNode, IDocCommentNode commentNode);
    private static IDocCommentBlock GetLastCorrectDocCommentBlock(IJavaScriptFileSection fileSectionNode);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.NormalizeLocalDeclarationsFix : QuickFixBase {
    private IJavaScriptLocalElement myLocalElement;
    public string Text { get; }
    public NormalizeLocalDeclarationsFix(DuplicatingLocalDeclarationWarning warning);
    public NormalizeLocalDeclarationsFix(DuplicatingParameterDeclarationError error);
    public NormalizeLocalDeclarationsFix(VariableUsedBeforeDeclaredWarning warning);
    public NormalizeLocalDeclarationsFix(TS2448Error warning);
    public NormalizeLocalDeclarationsFix(VariableUsedInInnerScopeBeforeDeclaredWarning warning);
    public NormalizeLocalDeclarationsFix(FunctionUsedBeforeDeclaredWarning warning);
    public NormalizeLocalDeclarationsFix(VariableUsedOutOfBlockWarning warning);
    public NormalizeLocalDeclarationsFix(FunctionUsedOutOfBlockWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator pi);
    private static void RemoveDeclaration(IJavaScriptDeclaration otherDeclaration, JavaScriptElementFactory factory, IBlockScope ownerFunction);
    private static IJavaScriptDeclaration ChooseBestDeclaration(List`1<IJavaScriptDeclaration> declarations, IBlock block);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.PropertyGetterCannotHaveParametersFix : QuickFixBase {
    private PropertyGetterCannotHaveParametersError myError;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public PropertyGetterCannotHaveParametersFix(PropertyGetterCannotHaveParametersError error);
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.PropertySetterMustHaveSingleParameterFix : QuickFixBase {
    private PropertySetterMustHaveSingleParameterError myError;
    public string Text { get; }
    public PropertySetterMustHaveSingleParameterFix(PropertySetterMustHaveSingleParameterError error);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.QuoteNameFix : QuickFixBase {
    private UsingOfReservedWordWarning myWarning;
    public string Text { get; }
    public QuoteNameFix(UsingOfReservedWordWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator pi);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.RemoveDoubleNegationOfBooleanExpressionFix : QuickFixBase {
    private DoubleNegationOfBooleanWarning myWarning;
    public string Text { get; }
    public RemoveDoubleNegationOfBooleanExpressionFix(DoubleNegationOfBooleanWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.RemoveDuplicateFunctionDeclarationFix : QuickFixBase {
    private IFunctionExpression myDeclaration;
    public string Text { get; }
    public RemoveDuplicateFunctionDeclarationFix(DuplicatingLocalDeclarationWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.RemoveRedundantAssignmentFix : QuickFixBase {
    private SameVariableAssignmentWarning myWarning;
    public string Text { get; }
    public RemoveRedundantAssignmentFix(SameVariableAssignmentWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.RemoveRedundantBlockFix : QuickFixBase {
    private RedundantBlockWarning myWarning;
    public string Text { get; }
    public RemoveRedundantBlockFix(RedundantBlockWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.RemoveRedundantElseBlockFix : QuickFixBase {
    private RedundantElseBlockWarning myWarning;
    public string Text { get; }
    public RemoveRedundantElseBlockFix(RedundantElseBlockWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.RemoveRedundantFinallyBlockFix : QuickFixBase {
    private RedundantEmptyFinallyBlockWarning myWarning;
    public string Text { get; }
    public RemoveRedundantFinallyBlockFix(RedundantEmptyFinallyBlockWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.RemoveRedundantLocalClassNameFix : QuickFixBase {
    private IClassExpression myDeclaration;
    public string Text { get; }
    public RemoveRedundantLocalClassNameFix(IDeclaration declaration);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.RemoveRedundantLocalFunctionNameFix : QuickFixBase {
    private IFunctionExpression myDeclaration;
    public string Text { get; }
    public RemoveRedundantLocalFunctionNameFix(IDeclaration declaration);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.RemoveReturnValueFix : QuickFixBase {
    private ReturnFromGlobalScopetWithValueWarning myWarning;
    public string Text { get; }
    public RemoveReturnValueFix(ReturnFromGlobalScopetWithValueWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.RemoveTrailingElements : QuickFixBase {
    private ElidedTrailingElementWarning myWarning;
    public string Text { get; }
    public RemoveTrailingElements(ElidedTrailingElementWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.RemoveUnreachableCodeFix : UnreachableCodeFixBase {
    private ITreeRange myRange;
    public string Text { get; }
    public RemoveUnreachableCodeFix(UnreachableCodeWarning error);
    public RemoveUnreachableCodeFix(HeuristicallyUnreachableCodeWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.RemoveUnsafeCommaFix : QuickFixBase {
    private UnsafeCommaInObjectPropertiesListWarning myWarning;
    public string Text { get; }
    public RemoveUnsafeCommaFix(UnsafeCommaInObjectPropertiesListWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.RemoveUnusedLocalClassFix : QuickFixBase {
    private UnusedLocalClassWarning myWarning;
    public string Text { get; }
    public RemoveUnusedLocalClassFix(UnusedLocalClassWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.RemoveUnusedLocalFunctionFix : QuickFixBase {
    private UnusedLocalFunctionWarning myWarning;
    public string Text { get; }
    public RemoveUnusedLocalFunctionFix(UnusedLocalFunctionWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.RemoveUnusedParameterFix : QuickFixBase {
    private IDeclaration myDeclaration;
    public string Text { get; }
    public RemoveUnusedParameterFix(UnusedParameterWarning warning);
    public RemoveUnusedParameterFix(UnusedInheritedParameterWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.RemoveUnusedVariableFix : QuickFixBase {
    private UnusedLocalVariableWarning myWarning;
    public string Text { get; }
    public RemoveUnusedVariableFix(UnusedLocalVariableWarning warning);
    public virtual string get_Text();
    private void RemoveDeclaration(IVariableDeclaration variableDeclaration, IVariableDeclarationList list, IJavaScriptStatement stmt);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.RenamedWronglyNamedParameterFix : QuickFixBase {
    private IDeclaredElement myDeclaredElement;
    public string Text { get; }
    public RenamedWronglyNamedParameterFix(FunctionParameterNamedArgumentsWarning warning);
    public RenamedWronglyNamedParameterFix(EvalArgumentsNameError error);
    public RenamedWronglyNamedParameterFix(EvalArgumentsNameInTsModuleError error);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.ReplaceAssignmentWithEqualityFix : QuickFixBase {
    private IAssignmentExpression myAssignment;
    public string Text { get; }
    public ReplaceAssignmentWithEqualityFix(AssignmentInConditionExpressionWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.ReplaceCoercedEqualityWithStrictFix : QuickFixBase {
    private TokenNodeType myNewTokenType;
    private ITokenNode mySignNode;
    public string Text { get; }
    public ReplaceCoercedEqualityWithStrictFix(CoercedEqualsUsingWarning warning);
    public ReplaceCoercedEqualityWithStrictFix(CoercedEqualsUsingWithNullUndefinedWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.ReplaceConstructorWithFunctionCallFix : QuickFixBase {
    private ConstructorCallNotUsedWarning myWarning;
    public string Text { get; }
    public ReplaceConstructorWithFunctionCallFix(ConstructorCallNotUsedWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.ReplaceRedundantBooleanComparisonWithValueFix : QuickFixBase {
    private RedundantComparisonWithBooleanWarning myWarning;
    public string Text { get; }
    public ReplaceRedundantBooleanComparisonWithValueFix(RedundantComparisonWithBooleanWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.ReplaceTernaryWithConditionFix : QuickFixBase {
    private TernaryCanBeReplacedByItsConditionWarning myWarning;
    public string Text { get; }
    public ReplaceTernaryWithConditionFix(TernaryCanBeReplacedByItsConditionWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.ReplaceWithConstantValueFix : QuickFixBase {
    private IJavaScriptExpression myJavaScriptExpression;
    private JsVariableStateExtended myValue;
    public string Text { get; }
    public ReplaceWithConstantValueFix(ExpressionIsAlwaysConstWarning warning);
    public ReplaceWithConstantValueFix(SimilarExpressionsComparisonWarning warning);
    public ReplaceWithConstantValueFix(ConditionIsAlwaysConstWarning warning);
    private IBinaryExpression GetBinaryExpression();
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static IJavaScriptExpression TrySimplifyTrueFalse(IBinaryExpression binaryExpression, IJavaScriptExpression operand, JsVariableStateExtended replacingValue);
    private string GetValueText();
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.ReplaceWithDestructuringAndShortHandPropertiesFix : QuickFixBase {
    private ReplaceIndicingWithShortHandPropertiesAfterDestructuringWarning myWarning;
    public string Text { get; }
    public ReplaceWithDestructuringAndShortHandPropertiesFix(ReplaceIndicingWithShortHandPropertiesAfterDestructuringWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.ReplaceWithDestructuringAssignmentFix : QuickFixBase {
    private ReplaceIndicingWithArrayDestructuringWarning myWarning;
    public string Text { get; }
    public ReplaceWithDestructuringAssignmentFix(ReplaceIndicingWithArrayDestructuringWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static void SaveDeclarations(IVariableDeclaration varDecl, IList`1<Pair`2<string, string>> varsToDeclare, bool isTypeScript, JsInitialResolveContext resolveContext);
    private static void AddDeclarationsIfNeeded(IList`1<Pair`2<string, string>> varsToDeclare, string prefix, bool isTypeScript, IJavaScriptStatement addedStatement, JavaScriptElementFactory factory);
    private static void RemoveAssignment(IAssignmentExpression assignment);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.ReplaceWithDestructuringSwapFix : QuickFixBase {
    private ReplaceWithDestructuringSwapWarning myWarning;
    public string Text { get; }
    public ReplaceWithDestructuringSwapFix(ReplaceWithDestructuringSwapWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static void RemoveAssignment(ISimpleAssignmentExpression assignment);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.ReplaceWithObjectDestructuringAssignmentFix : QuickFixBase {
    private ReplaceUndefinedCheckingSeriesWithObjectDestructuringWarning myWarning;
    public string Text { get; }
    public ReplaceWithObjectDestructuringAssignmentFix(ReplaceUndefinedCheckingSeriesWithObjectDestructuringWarning warning);
    public virtual string get_Text();
    private Tuple`2<string, string> ExtractPropertyNameAndDefaultValue(IConditionalTernaryExpression ternaryExpression, IJavaScriptExpression& qualifier);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static void SaveDeclarations(IVariableDeclaration varDecl, IList`1<Pair`2<string, string>> varsToDeclare, bool isTypeScript, JsInitialResolveContext resolveContext);
    private static void AddDeclarationsIfNeeded(IList`1<Pair`2<string, string>> varsToDeclare, string prefix, bool isTypeScript, IJavaScriptStatement addedStatement, JavaScriptElementFactory factory);
    private static void RemoveAssignment(IAssignmentExpression assignment);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.ReplaceWithSingleBranchFix : QuickFixBase {
    private ConditionalTernaryEqualBranchWarning myWarning;
    public string Text { get; }
    public ReplaceWithSingleBranchFix(ConditionalTernaryEqualBranchWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.ReturnValueFix : QuickFixBase {
    private InconsistentFunctionReturnsWarning myWarning;
    public string Text { get; }
    public ReturnValueFix(InconsistentFunctionReturnsWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator pi);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.SpecifyElidedTrailingElements : QuickFixBase {
    private ElidedTrailingElementWarning myWarning;
    public string Text { get; }
    public SpecifyElidedTrailingElements(ElidedTrailingElementWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.StatementTerminationFix : QuickFixBase {
    [NotNullAttribute]
private StatementTerminationWarning myWarning;
    public string Text { get; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public StatementTerminationFix(StatementTerminationWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual string get_ScopedText();
    public sealed virtual FileCollectorInfo get_FileCollectorInfo();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private sealed virtual override Action`1<ITextControl> JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Actions.IManualScopedAction.ExecuteAction(ISolution solution, Scope scope, IHighlighting sourceHighlighting, IProgressIndicator progress);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.strictModeErrorsQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.StringLiteralQuotesFix : ModernScopedNonIncrementalQuickFixBase {
    [CompilerGeneratedAttribute]
private StringLiteralWrongQuotesWarning <stringLiteralWrongQuotesWarning>P;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public StringLiteralQuotesFix(StringLiteralWrongQuotesWarning stringLiteralWrongQuotesWarning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.SurroundForeachBodyWithHasOwnPropertyFix : QuickFixBase {
    private IForeachStatement myForeachStatement;
    public string Text { get; }
    public SurroundForeachBodyWithHasOwnPropertyFix(MissingHasOwnPropertyInForeachWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static bool IsOnlyQualifiedExpression(IJavaScriptExpression expression);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.SurroundWithParenthesesToIgnoreFix : QuickFixBase {
    private IAssignmentExpression myAssignmentExpression;
    public string Text { get; }
    public SurroundWithParenthesesToIgnoreFix(AssignmentInConditionExpressionWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeOfIncorrectValueFix : QuickFixBase {
    private IJavaScriptLiteralExpression myExpression;
    public string Text { get; }
    public TypeOfIncorrectValueFix(IncorrectOperandInTypeOfComparisonWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.AddAngleBracketsFix : QuickFixBase {
    private TS2453Error myError;
    public string Text { get; }
    public AddAngleBracketsFix(TS2453Error error);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.AddDefaultReturnValueFix : QuickFixBase {
    private EmptyReturnValueForTypeAnnotatedFunctionWarning myWarning;
    public string Text { get; }
    public AddDefaultReturnValueFix(EmptyReturnValueForTypeAnnotatedFunctionWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.AddExplicitAnyAnnotationFix : ModernScopedNonIncrementalQuickFixBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<ITsTypeAnnotation> mySetTypeAnnotation;
    [NullableAttribute("2")]
private ITreeNode myAnchorNode;
    private bool myIsTypeCast;
    private string myTypeDescription;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public AddExplicitAnyAnnotationFix(TS7005Warning warning);
    public AddExplicitAnyAnnotationFix(TS7005Error error);
    public AddExplicitAnyAnnotationFix(TS7007Warning warning);
    public AddExplicitAnyAnnotationFix(TS7007Error error);
    public AddExplicitAnyAnnotationFix(TS7008Warning warning);
    public AddExplicitAnyAnnotationFix(TS7008Error error);
    public AddExplicitAnyAnnotationFix(TS7010Error error);
    public AddExplicitAnyAnnotationFix(TS7010Warning warning);
    public AddExplicitAnyAnnotationFix(TS7011Error error);
    public AddExplicitAnyAnnotationFix(TS7011Warning warning);
    public AddExplicitAnyAnnotationFix(TS7025Error error);
    public AddExplicitAnyAnnotationFix(TS7025Warning warning);
    public AddExplicitAnyAnnotationFix(TS7026Error error);
    public AddExplicitAnyAnnotationFix(TS7026Warning warning);
    public AddExplicitAnyAnnotationFix(TS7013Error error);
    public AddExplicitAnyAnnotationFix(TS7013Warning warning);
    public AddExplicitAnyAnnotationFix(TS7020Error error);
    public AddExplicitAnyAnnotationFix(TS7020Warning warning);
    public AddExplicitAnyAnnotationFix(TS7016Error error);
    public AddExplicitAnyAnnotationFix(TS7016Warning warning);
    public AddExplicitAnyAnnotationFix(TS7018Error error);
    public AddExplicitAnyAnnotationFix(TS7018Warning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private void Execute();
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.AddFunctionBodyFix : QuickFixBase {
    private TS1041Error myErr;
    public string Text { get; }
    public AddFunctionBodyFix(TS1041Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.AddFunctionReturnStatementFix : QuickFixBase {
    private ITsTypeAnnotation typeAnnotationNode;
    private FuncType myFuncType;
    private ITreeNode customAnchorNode;
    public string Text { get; }
    public AddFunctionReturnStatementFix(TS2176Error err);
    public AddFunctionReturnStatementFix(TS2125Error err);
    public AddFunctionReturnStatementFix(TS2131Error err);
    public AddFunctionReturnStatementFix(TS2126Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.AddIndexSignatureParameterTypeAnnotationFix : AddTypeAnnotationFixBase {
    private TS1022Error myErr;
    public string Text { get; }
    public IEnumerable`1<ILookupItem> LookupItems { get; }
    public ITreeNode SourceNode { get; }
    public AddIndexSignatureParameterTypeAnnotationFix(TS1022Error err);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.AddIndexSignatureParameterTypeAnnotationFix/<get_LookupItems>d__6")]
public virtual IEnumerable`1<ILookupItem> get_LookupItems();
    public virtual ITreeNode get_SourceNode();
    public virtual ITsTypeAnnotation AddTypeAnnotation(ITsTypeAnnotation sandboxedAnnotation);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.AddIndexSignatureTypeAnnotationFix : QuickFixBase {
    private TS1021Error myErr;
    public string Text { get; }
    public AddIndexSignatureTypeAnnotationFix(TS1021Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.AddInitializerFix : QuickFixBase {
    private TS1061Error myErr;
    public string Text { get; }
    public AddInitializerFix(TS1061Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.AddLiteralTypeItemFix : QuickFixBase {
    private IJavaScriptExpression myProblemNode;
    private ITsDeclaredType myUnionDeclaredType;
    private ITsUnionType myUnionStrongType;
    private ITsLiteralWithValueType myItemLiteralWithValueType;
    private ITsBuiltinPrimitiveType myItemBuiltinPrimitiveType;
    private string myItemPresentation;
    public string Text { get; }
    public AddLiteralTypeItemFix(TS2011Error err);
    public AddLiteralTypeItemFix(TS2012Error err);
    private AddLiteralTypeItemFix(IJavaScriptExpression problemNode, JsTypeResolveResult sourceType, JsTypeResolveResult targetType);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.AddNewForNonCallableNewableFix : QuickFixBase {
    private TS2161Error myErr;
    public string Text { get; }
    public AddNewForNonCallableNewableFix(TS2161Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.AddNonAmbientMemberBodyFix : QuickFixBase {
    private MemberDoesntHaveBodyError myErr;
    public string Text { get; }
    public AddNonAmbientMemberBodyFix(MemberDoesntHaveBodyError err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.AddOverloadFix : AddOverloadFixBase {
    private bool myShouldUpdateTypes;
    public AddOverloadFix(TS2085Error error);
    public AddOverloadFix(TS2082Error error);
    public virtual void PerformMainSignatureChange(ITsParametersList mainSignatureParameters, JsResolveContext context, TsElementFactory factory);
}
public abstract class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.AddOverloadFixBase : QuickFixBase {
    protected ITsInvocationLikeExpression ExpressionNode;
    protected IJsFunctionSignature Signature;
    protected JsInitialResolveContext ResolveContext;
    public string Text { get; }
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private ITsFunctionStatementSignature CopyAndAddTypeAnnotation(ITsFunctionStatementSignature original, TsElementFactory factory);
    public virtual string GenerateOverloadString(string overloadName, JsInitialResolveContext resolveContext, TreeNodeCollection`1<ITsParameterDeclaration> params);
    public abstract virtual void PerformMainSignatureChange(ITsParametersList mainSignatureParameters, JsResolveContext context, TsElementFactory factory);
    protected static IJsResolvedType GetOwnOrExpectedType(JsResolveContext context, ITsExpressionOrSpread argument);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.AddOverloadForParamFix : AddOverloadFixBase {
    private ParameterTypeMismatch myError;
    public AddOverloadForParamFix(TS2085Error error);
    public AddOverloadForParamFix(TS2082Error error);
    public virtual void PerformMainSignatureChange(ITsParametersList mainSignatureParameters, JsResolveContext context, TsElementFactory factory);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.AddOwnTypeParameterToMethodFix : QuickFixBase {
    private TS2099Error myErr;
    public string Text { get; }
    public AddOwnTypeParameterToMethodFix(TS2099Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.AddParameterToMainSignatureFix : QuickFixBase {
    private ParameterDoesntMakeAnySenseWarning myWarning;
    public string Text { get; }
    public AddParameterToMainSignatureFix(ParameterDoesntMakeAnySenseWarning warning);
    public virtual string get_Text();
    private void FixTypeParameterUsage(ITsParameterDeclaration newParam, ITreeNode contextNode);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.AddParameterToSetterFix : QuickFixBase {
    private SetterShouldHaveOneParameterError myError;
    public string Text { get; }
    public AddParameterToSetterFix(SetterShouldHaveOneParameterError error);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.AddPossiblyMissingThisQualifierFix : QuickFixBase {
    private IReferenceExpression myReferenceExpression;
    public string Text { get; }
    public AddPossiblyMissingThisQualifierFix(TsNotResolvedError error);
    public AddPossiblyMissingThisQualifierFix(TsResolvedFromInaccessibleModuleWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.AddReferenceBulbAction : BulbActionBase {
    private AddReferenceData myAddReferenceData;
    private VirtualFileSystemPath myReferencePath;
    public string ShortText { get; }
    public string Text { get; }
    public AddReferenceBulbAction(AddReferenceData addReferenceData);
    public sealed virtual string get_ShortText();
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.AddRequiredDeclareModifierFix : QuickFixBase {
    private TS1046Error myErr;
    public string Text { get; }
    public AddRequiredDeclareModifierFix(TS1046Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.AddRequiredSuperCallFix : QuickFixBase {
    private TS2105Error myErr;
    public string Text { get; }
    public AddRequiredSuperCallFix(TS2105Error err);
    public virtual string get_Text();
    private ITsConstructorDeclaration GetSutableBaseConstructor(ITsClassLikeDeclaration baseDeclaration, JsResolveContext jsResolveContext);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.AddSingleOverloadAction : BulbActionBase {
    private ITsMemberElement myElement;
    private IJsFunctionSignature myMissingOverload;
    private IJsFunctionSignature myOwnSignature;
    private JsResolveContext myResolveContext;
    private string ParentText { get; }
    public string Text { get; }
    public AddSingleOverloadAction(ITsMemberElement element, IJsFunctionSignature missingOverload, IJsFunctionSignature ownSignature, JsResolveContext resolveContext);
    private void PerformMainSignatureChange(ITsParametersList mainSignatureParameters, TsElementFactory factory, ITreeNode contextNode);
    private string get_ParentText();
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private string GenerateOverloadString(string overloadName, ITreeNode contextNode);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.AddThisQualifierToReferenceFix : QuickFixBase {
    private AssignedValueWontBeAssignedToCorrespondingFieldWarning myWarning;
    public string Text { get; }
    public AddThisQualifierToReferenceFix(AssignedValueWontBeAssignedToCorrespondingFieldWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public abstract class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.AddTypeAnnotationFixBase : QuickFixBase {
    public IEnumerable`1<ILookupItem> LookupItems { get; }
    public ITreeNode SourceNode { get; }
    public abstract virtual IEnumerable`1<ILookupItem> get_LookupItems();
    public abstract virtual ITreeNode get_SourceNode();
    public abstract virtual ITsTypeAnnotation AddTypeAnnotation(ITsTypeAnnotation sandboxedAnnotation);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.CastParameterToAnyFix : QuickFixBase {
    private ITsExpression myExpression;
    public string Text { get; }
    public CastParameterToAnyFix(TS2082Error error);
    public CastParameterToAnyFix(TS2085Error error);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.CastToAnyFix : QuickFixBase {
    private IJavaScriptExpression myProblemNode;
    private IJavaScriptExpression myLeftHandExpression;
    public string Text { get; }
    public CastToAnyFix(TS2011Error err);
    public CastToAnyFix(TS2012Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.CastToPrimitiveFix : QuickFixBase {
    private IJavaScriptExpression myProblemNode;
    private IJavaScriptExpression myLeftHandExpression;
    private bool myIsString;
    private bool myIsBoolean;
    private bool myIsNumber;
    private string myAdditionalInfo;
    public string Text { get; }
    public CastToPrimitiveFix(TS2085Error error);
    public CastToPrimitiveFix(TS2082Error error);
    public CastToPrimitiveFix(TS2011Error err);
    public CastToPrimitiveFix(TS2012Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.CastToTargetTypeFix : QuickFixBase {
    private IJavaScriptExpression myProblemNode;
    private IJavaScriptExpression myLeftHandExpression;
    private string myTypeUsageString;
    public string Text { get; }
    public CastToTargetTypeFix(TS2011Error err);
    public CastToTargetTypeFix(TS2012Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ChangeAll.ReferenceExpressionReferenceOccurrence : ReferenceOccurrence`1<ITsReferenceExpression> {
    private bool myFilterClasses;
    private bool myFilterNamespaces;
    private Lazy`1<ITsType[]> myExpectedTypes;
    private JsInitialResolveContext myResolveContext;
    private static string FilterByContextHelperIdentType;
    public ReferenceExpressionReferenceOccurrence(ITsReferenceExpression referenceExpression, bool filterClasses, bool filterNamespaces);
    private bool FilterBySelf(IDeclaredElement element);
    private bool FilterByMemberAccess(IDeclaredElement element);
    private bool FilterByExpectedType(IDeclaredElement element);
    private static ITsReferenceExpression SubstituteReference(IDeclaredElement element, ITreeNode context, IJavaScriptExpression copy, IReferenceExpression toReplace);
    private bool FilterByContextHelper(IDeclaredElement element, ITsReferenceExpression driverExpression, ReferenceExpressionGetter expressionGetter);
    private bool FilterByFlags(IDeclaredElement element);
    protected virtual IReference GetReference(ITsReferenceExpression referenceExpression);
    protected virtual bool FastFilter(IJavaScriptDeclaredElement declaredElement);
    protected virtual bool SlowFilter(IJavaScriptDeclaredElement declaredElement);
    [CompilerGeneratedAttribute]
private ITsType[] <.ctor>b__4_0();
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ChangeAll.ReferenceNameOccurrence : ReferenceOccurrence`1<ITsReferenceName> {
    public ReferenceNameOccurrence(ITsReferenceName referenceExpression);
    protected virtual IReference GetReference(ITsReferenceName referenceExpression);
    protected virtual bool FastFilter(IJavaScriptDeclaredElement declaredElement);
    protected virtual bool SlowFilter(IJavaScriptDeclaredElement declaredElement);
    private bool FilterByAccess(IDeclaredElement declaredElement);
    private bool FilterByQualifier(IJavaScriptDeclaredElement declaredElement);
}
public abstract class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ChangeAll.ReferenceOccurrence`1 : object {
    private IJavaScriptCompleteableReference myReference;
    protected T ReferenceExpression;
    private ISymbolTable mySymbolTable;
    public string ReferenceName { get; }
    protected ReferenceOccurrence`1(T referenceExpression);
    protected abstract virtual IReference GetReference(T referenceExpression);
    public string get_ReferenceName();
    public DocumentRange ReferenceRange();
    public static DocumentRange GetReferenceRange(IReference reference);
    private void CopyTo(JetHashSet`1& declaredElements, JetHashSet`1& names, FilteringStep<T> step);
    private void Intersect(JetHashSet`1& declaredElements, JetHashSet`1& names, FilteringStep<T> step);
    private ISymbolTable GetSymbolTable();
    protected static bool FilterByName(IDeclaredElement element);
    protected static bool FilterByIsSynthetic(IDeclaredElement element);
    protected abstract virtual bool FastFilter(IJavaScriptDeclaredElement declaredElement);
    protected abstract virtual bool SlowFilter(IJavaScriptDeclaredElement declaredElement);
    private bool IsAccepted(IDeclaredElement declaredElement, FilteringStep<T> step);
    private static void FilterCandidates(JetHashSet`1& candidates, JetHashSet`1& names, ReferenceOccurrence`1[] references, FilteringStep<T> step);
    public static JetHashSet`1<IDeclaredElement> GetCandidates(ReferenceOccurrence`1[] references);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ChangeBothAccessorsTypesToAnyFix : QuickFixBase {
    private TS2096Error myErr;
    public string Text { get; }
    public ChangeBothAccessorsTypesToAnyFix(TS2096Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ChangeBothAccessorsTypesToAnyFix2 : QuickFixBase {
    private TS2096_1Error myErr;
    public string Text { get; }
    public ChangeBothAccessorsTypesToAnyFix2(TS2096_1Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ChangeModifierAction : BulbActionBase {
    private ITsMemberElement myElement;
    private JsModifiers myModifier;
    private string ParentText { get; }
    public string Text { get; }
    public ChangeModifierAction(ITsMemberElement element, JsModifiers modifier);
    private string get_ParentText();
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ChangeOptionalityAction : BulbActionBase {
    private ITsMemberElement myElement;
    private string ParentText { get; }
    public string Text { get; }
    public ChangeOptionalityAction(ITsMemberElement element);
    private string get_ParentText();
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ChangePublicModifierToConformStyleFix : ModernScopedQuickFixBase {
    [CompilerGeneratedAttribute]
private WrongPublicModifierSpecificationWarning <publicModifierWarning>P;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public ChangePublicModifierToConformStyleFix(WrongPublicModifierSpecificationWarning publicModifierWarning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private void Execute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ChangeRequireRelativePathToConformStyleFix : ModernScopedNonIncrementalQuickFixBase {
    [CompilerGeneratedAttribute]
private WrongRequireRelativePathWarning <warning>P;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public ChangeRequireRelativePathToConformStyleFix(WrongRequireRelativePathWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ChangeTsLanguageLevelFix : QuickFixBase {
    private string myExpectedLevel;
    private ITreeNode myErrorNode;
    public string Text { get; }
    public ChangeTsLanguageLevelFix(TS0994Error error);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ChangeVariableTypeFix : QuickFixBase {
    private IDeclaredElement myVariableElement;
    private TsElementFactory myFactory;
    private string myTypeUsageString;
    private ITsReferenceExpression myLeftHandReference;
    private bool myRequiresLeftHandRef;
    private bool myForceNotAvailable;
    public string Text { get; }
    public ChangeVariableTypeFix(TS2011Error err);
    public ChangeVariableTypeFix(TS2011BindingError err);
    public ChangeVariableTypeFix(TS2012Error err);
    public ChangeVariableTypeFix(TS2012BindingError err);
    private void InitializeFix(IDeclaredElement element, ITreeNode node, JsTypeResolveResult targetType);
    private void InitializeFix(ITsExpression node, JsTypeResolveResult targetType);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.codeInspectionsTypeScriptCodeCleanupRegistration : object {
    public sealed virtual void Register(IHighlightingCleanupItemsRegistrar registrar);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.codeInspectionsTypeScriptQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ConvertDefaultValueToOptionalParamMarkFix : QuickFixBase {
    private ArgumentsInSignaturesMayNotHaveDefaultValuesError myErr;
    public string Text { get; }
    public ConvertDefaultValueToOptionalParamMarkFix(ArgumentsInSignaturesMayNotHaveDefaultValuesError err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ConvertExportAssignmentToEs6ExportDefaultFix : ConvertToEs6StyleImportExportFixBase {
    private ITsExportAssignment myExportAssignment;
    public string Text { get; }
    public ConvertExportAssignmentToEs6ExportDefaultFix(TS1203Error error);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ConvertToDecFix : QuickFixBase {
    private TS1085Error myError;
    public string Text { get; }
    public ConvertToDecFix(TS1085Error error);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public abstract class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ConvertToEs6StyleImportExportFixBase : QuickFixBase {
    private ITreeNode myContextNode;
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    protected ConvertToEs6StyleImportExportFixBase(ITreeNode contextNode);
    protected static void FixSingleImport(ITsImportDeclaration importDeclaration);
    protected static void FixSingleExportAssignment(ITsExportAssignment exportAssignment);
    public sealed virtual Action`1<ITextControl> ExecuteAction(ISolution solution, Scope scope, IHighlighting sourceHighlighting, IProgressIndicator progress);
    public sealed virtual string get_ScopedText();
    public sealed virtual FileCollectorInfo get_FileCollectorInfo();
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ConvertToEs6StyleImportFix : ConvertToEs6StyleImportExportFixBase {
    private ITsImportDeclaration myImport;
    public string Text { get; }
    public ConvertToEs6StyleImportFix(TS1202Error error);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ConvertToGenericArrayFix : QuickFixBase {
    private TS2068Error myErr;
    public string Text { get; }
    public ConvertToGenericArrayFix(TS2068Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ConvertToHexFix : QuickFixBase {
    private TS1085Error myError;
    public string Text { get; }
    public ConvertToHexFix(TS1085Error error);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ConvertToPropertyNameFix : QuickFixBase {
    private AccessorIsNotAllowedInAmbientDeclaraionsError myErr;
    public string Text { get; }
    public ConvertToPropertyNameFix(AccessorIsNotAllowedInAmbientDeclaraionsError err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ConvertTypeCastToAsFix : ModernScopedQuickFixBase {
    [CompilerGeneratedAttribute]
private UseAsInsteadOfTypeCastWarning <warning>P;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public ConvertTypeCastToAsFix(UseAsInsteadOfTypeCastWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.CreateConstructorFix : QuickFixBase {
    private ITsInvocationExpression myExpressionNode;
    public string Text { get; }
    public CreateConstructorFix(TS2082Error error);
    public CreateConstructorFix(TS2085Error error);
    public virtual string get_Text();
    private ITsClassLikeDeclaration GetClassDeclaration();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.CreateFromUsage.CreateFromUsageFix : object {
    private string myMaxUnresolvedModuleName;
    private JsResolveContext myContext;
    private CreateFromUsageData myCreateFromUsageData;
    private JsTypeResolveResult myType;
    [CanBeNullAttribute]
private ITsModuleElement myModuleDeclaredElement;
    private UsageInfo myPropertyInfo;
    private ITreeNode myContextNode;
    public CreateFromUsageFix(TS2178Error error);
    public CreateFromUsageFix(TsNotResolvedError error);
    public CreateFromUsageFix(TsResolvedFromInaccessibleModuleWarning warning);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    private IEnumerable`1<IBulbAction> CalculateItems();
    private IList`1<IBulbAction> GetJsContextlessUsageItems();
    private IList`1<IBulbAction> GetTsContextlessUsageItems();
    private void AddTypeScriptItems(IReferenceExpression referenceExpression, UsageInfo propertyInfo, List`1<IBulbAction> actions);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.CreateParameterPropertyFix : QuickFixBase {
    private IDeclaration myDeclaration;
    public string Text { get; }
    public CreateParameterPropertyFix(UnusedParameterWarning warning);
    public CreateParameterPropertyFix(UnusedInheritedParameterWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.CreateSpecializedOverloadFix : QuickFixBase {
    private CreateSpecializedOverloadWarning myWarning;
    public string Text { get; }
    public CreateSpecializedOverloadFix(CreateSpecializedOverloadWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.DeclareAmbientModuleFix : QuickFixBase {
    private TS1035Error myErr;
    public string Text { get; }
    public DeclareAmbientModuleFix(TS1035Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.DeclareTypeScriptVariableFix : QuickFixBase {
    private NonDeclaredVariableError myError;
    public string Text { get; }
    public DeclareTypeScriptVariableFix(NonDeclaredVariableError error);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
internal class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.EasyHotspotExpression : object {
    private IList`1<ILookupItem> myItems;
    private LookupFocusBehaviour myLookupFocusBehaviour;
    public EasyHotspotExpression(IList`1<ILookupItem> items, LookupFocusBehaviour lookupFocusBehaviour);
    public sealed virtual HotspotItems GetLookupItems(IHotspotContext context);
    public sealed virtual string EvaluateQuickResult(IHotspotContext context);
    public sealed virtual void HandleExpansion(IHotspotContext context);
    public sealed virtual string Serialize();
    public sealed virtual object Clone();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.errorsTypeScriptGeneratedCodeCleanupRegistration : object {
    public sealed virtual void Register(IHighlightingCleanupItemsRegistrar registrar);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.errorsTypeScriptGeneratedQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.errorsTypeScriptQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ExchangeOverloadWithSignatureFix : QuickFixBase {
    private LessSpecificOverloadThanMainSignatureWarning myWarning;
    public string Text { get; }
    public ExchangeOverloadWithSignatureFix(LessSpecificOverloadThanMainSignatureWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ExportUsingKeywordNotAssignmentFix : QuickFixBase {
    private ITsExportAssignment myAssignment;
    public string Text { get; }
    public ExportUsingKeywordNotAssignmentFix(TS1063Error err);
    public ExportUsingKeywordNotAssignmentFix(TS1064Error err);
    public ExportUsingKeywordNotAssignmentFix(TS1065Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.FixIndexerTypeAction : BulbActionBase {
    private string myTypeName;
    private IndexerKind myKind;
    private ITsIndexSignatureDeclaration mySignature;
    private JsResolveContext myResolveContext;
    private ITsType myCommonType;
    public string Text { get; }
    public FixIndexerTypeAction(string typeName, IndexerKind kind, ITsIndexSignatureDeclaration signature, ITsType targetType, JsResolveContext resolveContext);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.FixOverloadStaticnessMakeNonStaticFix : QuickFixBase {
    private InconsistentOverloadStaticnesError myErr;
    public string Text { get; }
    public FixOverloadStaticnessMakeNonStaticFix(InconsistentOverloadStaticnesError err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.FixOverloadStaticnessMakeStaticFix : QuickFixBase {
    private InconsistentOverloadStaticnesError myErr;
    public string Text { get; }
    public FixOverloadStaticnessMakeStaticFix(InconsistentOverloadStaticnesError err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.FixOverloadVisibilityMakeExportedFix : QuickFixBase {
    private TS2151Error myErr;
    public string Text { get; }
    public FixOverloadVisibilityMakeExportedFix(TS2151Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.FixOverloadVisibilityMakeNonExportedFix : QuickFixBase {
    private TS2151Error myErr;
    public string Text { get; }
    public FixOverloadVisibilityMakeNonExportedFix(TS2151Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.FixOverloadVisibilityMakePrivateFix : QuickFixBase {
    private InconsistentOverloadVisibilityError myErr;
    public string Text { get; }
    public FixOverloadVisibilityMakePrivateFix(InconsistentOverloadVisibilityError err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.FixOverloadVisibilityMakePublicFix : QuickFixBase {
    private InconsistentOverloadVisibilityError myErr;
    public string Text { get; }
    public FixOverloadVisibilityMakePublicFix(InconsistentOverloadVisibilityError err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.FixOverloadVisibilityRemoveModifiersFix : QuickFixBase {
    private InconsistentOverloadVisibilityError myErr;
    public string Text { get; }
    public FixOverloadVisibilityRemoveModifiersFix(InconsistentOverloadVisibilityError err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.FixParameterTypeAction : BulbActionBase {
    private int myIndex;
    private ITsMemberElement myElement;
    private IJsFunctionSignature myOwnSignature;
    private JsResolveContext myResolveContext;
    private ITsType myCommonType;
    private string myName;
    private string ParentText { get; }
    public string Text { get; }
    public FixParameterTypeAction(int index, ITsMemberElement element, IJsFunctionSignature ownSignature, ITsType targetType, JsResolveContext resolveContext);
    private string get_ParentText();
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.FixReturnTypeAction : BulbActionBase {
    private ITsMemberElement myElement;
    private IJsFunctionSignature myOwnSignature;
    private JsResolveContext myResolveContext;
    private ITsType myCommonType;
    private string ParentText { get; }
    public string Text { get; }
    public FixReturnTypeAction(ITsMemberElement element, IJsFunctionSignature ownSignature, ITsType targetType, JsResolveContext resolveContext);
    private string get_ParentText();
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.FixStaticMemberUsageFix : QuickFixBase {
    private TS2156Error myErr;
    public string Text { get; }
    public FixStaticMemberUsageFix(TS2156Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.FixWrongExternalModuleReferenceNameFix : QuickFixBase {
    private ModuleReferenceNameShouldBeStringLiteralError myErr;
    public string Text { get; }
    public FixWrongExternalModuleReferenceNameFix(ModuleReferenceNameShouldBeStringLiteralError err);
    public virtual string get_Text();
    private ITsExpression CreateStringLiteralExpression(string s, ITreeNode ownerNode);
    private string GetNodeText(ITreeNode node);
    private string ConcatenateBinaryExpression(ITsBinaryExpression expr);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.FlipExtendsAndImplementsFix : QuickFixBase {
    private TS1025Error myErr;
    public string Text { get; }
    public FlipExtendsAndImplementsFix(TS1025Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
internal enum JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.FuncType : Enum {
    public int value__;
    public static FuncType Expression;
    public static FuncType StatementOrMemberFunc;
    public static FuncType ObjectPropertyFunc;
    public static FuncType MemberAccessor;
    public static FuncType LiteralMemberAccessor;
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.GenerateArgumentStubsFix : QuickFixBase {
    private ITsInvocationExpression myExpressionNode;
    private IJsFunctionSignature mySignature;
    public string Text { get; }
    public GenerateArgumentStubsFix(TS2085Error error);
    public GenerateArgumentStubsFix(TS2082Error error);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.GenerateInterfaceForJsVariable.GenerateInterfaceForVariableFix : object {
    private IReferenceExpression myReferenceExpression;
    private JsResolveContext myJsResolveContext;
    private JsDistinctDynamicPropertyConsumer myDynamicProperties;
    private IEnumerable`1<JsPrimitive> myJsPrimitives;
    public GenerateInterfaceForVariableFix(TsNotResolvedError error);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.GenerateInterfaceForJsVariable.GenerateInterfaceForVariableFix/<CreateBulbItems>d__6")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public abstract class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.GenerateInterfaceForJsVariable.GenerateInterfaceItemBase : BulbActionBase {
    [CompilerGeneratedAttribute]
private IPsiSourceFile <TargetPsiSourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ITsFile <TargetFile>k__BackingField;
    protected IPsiSourceFile TargetPsiSourceFile { get; protected set; }
    protected ITsFile TargetFile { get; protected set; }
    [CompilerGeneratedAttribute]
protected IPsiSourceFile get_TargetPsiSourceFile();
    [CompilerGeneratedAttribute]
protected void set_TargetPsiSourceFile(IPsiSourceFile value);
    [CompilerGeneratedAttribute]
protected ITsFile get_TargetFile();
    [CompilerGeneratedAttribute]
protected void set_TargetFile(ITsFile value);
    protected void CreateFile(IPsiSourceFile sourcePsiSourceFile, ITreeNode contextNode, string jsFilename);
    protected void DoGenerateInterface(JsTypeResolveResult fullJavaScriptType, ITsDeclaredTypeUsage declaredTypeUsage, JsResolveContext context, ITsStatement anchor, IProgressIndicator progress);
    protected virtual string RecursiveGenerateStub(JsTypeResolveResult fullJavaScriptType);
    private void DoGenerateProperty(JsTypeResolveResult fullJavaScriptType, ITsInterfaceDeclaration interfaceDeclarationStatement, IJavaScriptSymbolInfoService service, TsElementFactory factory, JsResolveContext context, IProgressIndicator progress);
    private void DoGenerateCallableSignature(JsTypeResolveResult fullJavaScriptType, ITsInterfaceDeclaration interfaceDeclarationStatement, IJavaScriptSymbolInfoService service, TsElementFactory factory, JsResolveContext context, IProgressIndicator progress);
    private static void GenerateCallOrConstructSignatures(string format, IEnumerable`1<JsParameterInfo[]> signaturesSet, ITsInterfaceDeclaration interfaceDeclaration, IJavaScriptSymbolInfoService service, TsElementFactory factory, IProgressIndicator progress);
    private static string TryGenerateTypeUsageForStandartType(JsTypeResolveResult fullJavaScriptType, IJavaScriptSymbolInfoService service, JsResolveContext context);
    private static string GenerateListParameters(JsParameterInfo[] signature, IJavaScriptSymbolInfoService service);
    private static bool IsConstructor(IFunctionExpression functionExpression);
}
internal class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.GenerateInterfaceForJsVariable.TsDeclaredTypeUsageForInterfaceLookupItem : TextLookupItemBase {
    private IconId myImage;
    private bool myInterfaceExist;
    public IconId Image { get; }
    public TsDeclaredTypeUsageForInterfaceLookupItem(string nameInterface, ILookupItemsOwner owner, bool interfaceExist);
    protected virtual RichText GetDisplayName();
    public virtual IconId get_Image();
}
internal class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.GenerateInterfaceForJsVariable.TsFunctionTypeUsageLookupItem : TextLookupItemBase {
    private IconId myImage;
    public IconId Image { get; }
    public TsFunctionTypeUsageLookupItem(string text, ILookupItemsOwner owner);
    public virtual IconId get_Image();
}
public interface JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.IItemWithShortText {
    public string ShortText { get; }
    public abstract virtual string get_ShortText();
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ImplementAbstractMemberFix : QuickFixBase {
    private ITsClassMemberDeclaration myModifierNode;
    public string Text { get; }
    public ImplementAbstractMemberFix(TS1244Error err);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ImplementMemberAbstractFix : QuickFixBase {
    [CanBeNullAttribute]
private ITsClassDeclaration myClassDeclaration;
    private bool myHasMissing;
    public string Text { get; }
    public bool IsReadOnly { get; }
    public ImplementMemberAbstractFix(TS2137Error error);
    public ImplementMemberAbstractFix(TS2138Error error);
    public ImplementMemberAbstractFix(TS2141Error error);
    public virtual string get_Text();
    public sealed virtual bool get_IsReadOnly();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual void Execute(ISolution solution, ITextControl textControl);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ImplementMemberFix : QuickFixBase {
    [CanBeNullAttribute]
private ITsTypeLikeDeclaration myTypeDeclaration;
    [CanBeNullAttribute]
private ITsObjectLiteral myObjectLiteral;
    private bool myHasMissing;
    public string Text { get; }
    public bool IsReadOnly { get; }
    public ImplementMemberFix(TS2082Error error);
    public ImplementMemberFix(TS2012Error error);
    public ImplementMemberFix(TS2137Error error);
    public ImplementMemberFix(TS2138Error error);
    public ImplementMemberFix(TS2141Error error);
    public virtual string get_Text();
    public sealed virtual bool get_IsReadOnly();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual void Execute(ISolution solution, ITextControl textControl);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ImportTypeBulbAction : BulbActionBase {
    private ImportTypeData myImportTypeData;
    private string myDesc;
    [CompilerGeneratedAttribute]
private bool <TheSameFile>k__BackingField;
    public bool TheSameFile { get; }
    public string ShortText { get; }
    public string Text { get; }
    public ImportTypeBulbAction(ImportTypeData importTypeData);
    [CompilerGeneratedAttribute]
public bool get_TheSameFile();
    public sealed virtual string get_ShortText();
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ImportTypePopupFix : ImportTypesFix {
    public string PopupMenuCaption { get; }
    public string PopupKey { get; }
    public Anchoring2D[] PopupAnchorings { get; }
    public ImportTypePopupFix(TS2178Error error);
    public ImportTypePopupFix(TsNotResolvedError error);
    public ImportTypePopupFix(TsResolvedFromInaccessibleModuleWarning warning);
    public sealed virtual string get_PopupMenuCaption();
    public sealed virtual void FillMenuItemDescriptor(IBulbAction key, IMenuItemDescriptor descriptor);
    public sealed virtual string get_PopupKey();
    public sealed virtual Anchoring2D[] get_PopupAnchorings();
    public sealed virtual IEnumerable`1<IBulbAction> CreateBulbActions();
    public sealed virtual void OnPopupShown(Lifetime showingLifetime);
    public sealed virtual string GetScopedPopupText(IBulbAction bulbAction);
    private sealed virtual override Action`1<ITextControl> JetBrains.ReSharper.Feature.Services.QuickFixes.Scoped.Popups.IScopedPopupBulbAction.ExecuteAction(ISolution solution, Scope scope, IHighlighting highlighting, IProgressIndicator singleFileProgress);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ImportTypesFix : object {
    private JsResolveContext myJsResolveContext;
    private JsTypeResolveResult myType;
    private IReferenceExpression myReferenceExpression;
    private ITsReferenceName myTsReferenceName;
    private ITreeNode myContextNode;
    protected IProjectFile ProjectFile;
    protected IList`1<IBulbAction> AllActions;
    public ImportTypesFix(TS2178Error error);
    public ImportTypesFix(TsNotResolvedError error);
    public ImportTypesFix(TsResolvedFromInaccessibleModuleWarning warning);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public static void ExecuteAddReference(AddReferenceData data);
    public static void ExecuteImportType(ImportTypeData data, DocumentRange& range1, DocumentRange& range2, String& importName);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.IncludeFileInSolutionFix : QuickFixBase {
    private TS0995Error myErr;
    public string Text { get; }
    public IncludeFileInSolutionFix(TS0995Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecuteAfterPsiTransaction(ISolution solution, IProjectModelTransactionCookie cookie, IProgressIndicator progress);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.IndexSignatureParameterTypeAnnotationMakeStringOrNumberFix : AddTypeAnnotationFixBase {
    private TS1023Error myErr;
    private ITsTypeAnnotation myTypeAnn;
    public string Text { get; }
    public IEnumerable`1<ILookupItem> LookupItems { get; }
    public ITreeNode SourceNode { get; }
    public IndexSignatureParameterTypeAnnotationMakeStringOrNumberFix(TS1023Error err);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.IndexSignatureParameterTypeAnnotationMakeStringOrNumberFix/<get_LookupItems>d__7")]
public virtual IEnumerable`1<ILookupItem> get_LookupItems();
    public virtual ITreeNode get_SourceNode();
    public virtual ITsTypeAnnotation AddTypeAnnotation(ITsTypeAnnotation sandboxedAnnotation);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.InitializeFieldFromConstructorParameterFix : QuickFixBase {
    private IDeclaration myDeclaration;
    private ITsConstructorDeclaration myOwnerConstructor;
    private ITsClassLikeDeclaration myOwnerClass;
    private bool myShouldIntroduce;
    private string MemberName { get; }
    public string Text { get; }
    public InitializeFieldFromConstructorParameterFix(UnusedParameterWarning warning);
    public InitializeFieldFromConstructorParameterFix(UnusedInheritedParameterWarning warning);
    private string get_MemberName();
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static bool IsSuperInvocation(ITsExpressionStatement statement);
    private bool IsAvailable();
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.IntroduceVariableForGuardFix : QuickFixBase {
    private IntroduceVariableToApplyGuardWarning myWarning;
    public string Text { get; }
    public IntroduceVariableForGuardFix(IntroduceVariableToApplyGuardWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static void ShowHotspots(IntroduceVariableResult result, ITextControl textControl, ISolution solution);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.JoinImportDeclarationsFix : QuickFixBase {
    private SameImportsWithDifferentNameWarning myWarning;
    public string Text { get; }
    public JoinImportDeclarationsFix(SameImportsWithDifferentNameWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
internal class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.Js2TsFixes.ErrorTransformationStrategy : object {
    private ITreeNode myNode;
    private IList`1<ITransformer> myTransformers;
    private TransformerClassInfosManager myInfosManager;
    private ITransformer myApplicableTransformer;
    private ITransformerMatchResult myMatchResult;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private FileCollectorInfo <FileCollectorInfo>k__BackingField;
    public string Text { get; private set; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public ErrorTransformationStrategy(TS2105Error error);
    public ErrorTransformationStrategy(TsNotResolvedError error);
    public ErrorTransformationStrategy(TsResolvedFromInaccessibleModuleWarning error);
    private ErrorTransformationStrategy(ITreeNode node);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(string value);
    public sealed virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [CompilerGeneratedAttribute]
public sealed virtual FileCollectorInfo get_FileCollectorInfo();
}
internal interface JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.Js2TsFixes.IJs2TsTransformationStrategy {
    public string Text { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public abstract virtual string get_Text();
    public abstract virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public abstract virtual bool IsAvailable(IUserDataHolder cache);
    public abstract virtual FileCollectorInfo get_FileCollectorInfo();
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.Js2TsFixes.Js2TsTransformationFix : QuickFixBase {
    private IJs2TsTransformationStrategy myStrategy;
    public string Text { get; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public Js2TsTransformationFix(Js2TsHighlighting highlighting);
    public Js2TsTransformationFix(TsNotResolvedError error);
    public Js2TsTransformationFix(TS2105Error error);
    public Js2TsTransformationFix(TsResolvedFromInaccessibleModuleWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual string get_ScopedText();
    public sealed virtual FileCollectorInfo get_FileCollectorInfo();
    public sealed virtual Action`1<ITextControl> ExecuteAction(ISolution solution, Scope scope, IHighlighting sourceHighlighting, IProgressIndicator progress);
}
internal class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.Js2TsFixes.SuggestionTransformationStrategy : object {
    private ITransformer myTransformer;
    private ITransformerMatchResult myMatchResult;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private FileCollectorInfo <FileCollectorInfo>k__BackingField;
    public string Text { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public SuggestionTransformationStrategy(IJs2TsHighlighting highlighting);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    public sealed virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [CompilerGeneratedAttribute]
public sealed virtual FileCollectorInfo get_FileCollectorInfo();
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.MakeAccessorsEquallyPrivateFix : QuickFixBase {
    private TS2127Error myErr;
    public string Text { get; }
    public MakeAccessorsEquallyPrivateFix(TS2127Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.MakeAccessorsEquallyProtectedFix : QuickFixBase {
    private TS2127Error myErr;
    public string Text { get; }
    public MakeAccessorsEquallyProtectedFix(TS2127Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.MakeAccessorsEquallyPublicFix : QuickFixBase {
    private TS2127Error myErr;
    public string Text { get; }
    public MakeAccessorsEquallyPublicFix(TS2127Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.MakeAccessorsEquallyVisibleRemoveModifiersFix : QuickFixBase {
    private TS2127Error myErr;
    public string Text { get; }
    public MakeAccessorsEquallyVisibleRemoveModifiersFix(TS2127Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.MakeClassAbstractFix : QuickFixBase {
    private ITreeNode myModifierNode;
    public string Text { get; }
    public MakeClassAbstractFix(TS2514Error err);
    public MakeClassAbstractFix(TS1244Error err);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private ITsClassDeclaration GetClassDeclaration();
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.MakeConstructorProtectedFix : QuickFixBase {
    private AbstractClassConstructorCanBeMadeProtectedWarning myWarning;
    public string Text { get; }
    public MakeConstructorProtectedFix(AbstractClassConstructorCanBeMadeProtectedWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.MakeFunctionReturnAnyFix : QuickFixBase {
    private ITsTypeAnnotation typeAnnotationNode;
    private FuncType myFuncType;
    public string Text { get; }
    public MakeFunctionReturnAnyFix(TS2125Error err);
    public MakeFunctionReturnAnyFix(TS2176Error err);
    public MakeFunctionReturnAnyFix(TS2131Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.MakeFunctionReturnVoidFix : QuickFixBase {
    private ITsTypeAnnotation typeAnnotationNode;
    private FuncType myFuncType;
    public string Text { get; }
    public MakeFunctionReturnVoidFix(TS2125Error err);
    public MakeFunctionReturnVoidFix(TS2176Error err);
    public MakeFunctionReturnVoidFix(TS2131Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.MakeMemberNonStaticFix : QuickFixBase {
    private TS2156Error myErr;
    public string Text { get; }
    public MakeMemberNonStaticFix(TS2156Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.MakeMemberNotStaticFix : QuickFixBase {
    private TS2099Error myErr;
    public string Text { get; }
    public MakeMemberNotStaticFix(TS2099Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.MakeMemberStaticFix : QuickFixBase {
    private TS2140_0Error myErr;
    public string Text { get; }
    public MakeMemberStaticFix(TS2140_0Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.MakeModuleMemberExportedFix : QuickFixBase {
    private TS2178_1Error myErr;
    public string Text { get; }
    public MakeModuleMemberExportedFix(TS2178_1Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.MakeModuleMemberExportedFromTypeUsageFix : QuickFixBase {
    private ITreeNode myInaccessibleTypeUsage;
    private string myInaccessibleTypeName;
    public string Text { get; }
    public MakeModuleMemberExportedFromTypeUsageFix(TS2018Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2019Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2020Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2021Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2022Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2023Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2024Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2025Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2026Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2027Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2028Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2029Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2030Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2031Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2032Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2033Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2034Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2035Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2036Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2037Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2038Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2039Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2040Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2041Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2042Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2043Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2044Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2045Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2046Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2047Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2048Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2049Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2050Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2051Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2052Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2053Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2054Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2055Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2056Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2057Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2058Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2059Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2060Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2061Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2062Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2063Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2064Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2065Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2066Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2067Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2181Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2182Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2220Error err);
    public MakeModuleMemberExportedFromTypeUsageFix(TS2222Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.MakeOtherParametersOptionalFix : QuickFixBase {
    private UnexpectedRequiredParameterAfterOptionalError myErr;
    public string Text { get; }
    public MakeOtherParametersOptionalFix(UnexpectedRequiredParameterAfterOptionalError err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.MakePrivateFieldDeclaredAsParameterReadonlyFix : QuickFixBase {
    private PrivateVariableDeclaredAsParameterCanBeMadeReadonlyWarning myWarning;
    public string Text { get; }
    public MakePrivateFieldDeclaredAsParameterReadonlyFix(PrivateVariableDeclaredAsParameterCanBeMadeReadonlyWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.MakePrivateFieldReadonlyFix : QuickFixBase {
    private PrivateVariableCanBeMadeReadonlyWarning myWarning;
    public string Text { get; }
    public MakePrivateFieldReadonlyFix(PrivateVariableCanBeMadeReadonlyWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.MakePublicFix : QuickFixBase {
    private TS2107Error myErr;
    public string Text { get; }
    public MakePublicFix(TS2107Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.MakeRestParameterLastFix : QuickFixBase {
    private UnexpectedRequiredParameterAfterRestError myErr;
    public string Text { get; }
    public MakeRestParameterLastFix(UnexpectedRequiredParameterAfterRestError err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.MakeReturnVoidFix : QuickFixBase {
    private TS2084Error myError;
    public string Text { get; }
    public MakeReturnVoidFix(TS2084Error error);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private ITsTypeAnnotation GetTypeAnnotation();
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.MergeImplementsClausesFix : QuickFixBase {
    private TS1027Error myErr;
    public string Text { get; }
    public MergeImplementsClausesFix(TS1027Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.MergeVariableDeclarationsAndUseCommonTypeFix : QuickFixBase {
    private TS2134Error myErr;
    public string Text { get; }
    public MergeVariableDeclarationsAndUseCommonTypeFix(TS2134Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.MoveClassDeclarationUpperFix : QuickFixBase {
    private TS2000_1Error myError;
    public string Text { get; }
    public MoveClassDeclarationUpperFix(TS2000_1Error error);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.MoveFunctionStatementUpperFix : QuickFixBase {
    private TS2000_2Error myError;
    public string Text { get; }
    public MoveFunctionStatementUpperFix(TS2000_2Error error);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.MoveImportDeclarationToExternalScopeFix : QuickFixBase {
    private TS2136Error myErr;
    public string Text { get; }
    public MoveImportDeclarationToExternalScopeFix(TS2136Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.MoveIntoSeparateGlobalFileFix : QuickFixBase {
    private TS2195Error myError;
    private IProjectFile myNewProjectFile;
    private IProjectFile myProjectFile;
    private IProjectFolder myFolder;
    private VirtualFileSystemPath myNewLocation;
    public string Text { get; }
    public MoveIntoSeparateGlobalFileFix(TS2195Error error);
    public virtual string get_Text();
    protected virtual void ExecuteBeforePsiTransaction(ISolution solution, IProjectModelTransactionCookie cookie, IProgressIndicator progress);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
internal class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.MyComparer : object {
    public sealed virtual int Compare(IBulbAction x, IBulbAction y);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.MyConsumer : object {
    public List`1<IJsRule> AllRules;
    public sealed virtual bool Consume(IJsRule rule, IJavaScriptTypeFileCache fileCache);
}
public static class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.OverloadFormattingHelper : object {
    public static void ReformatOverloads(ITreeNode firstOverload, ITreeNode lastOverload, ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ReferenceClassThisByExternalVariableFix : QuickFixBase {
    private SuspiciousThisUsageWarning myWarning;
    public string Text { get; }
    public ReferenceClassThisByExternalVariableFix(SuspiciousThisUsageWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveAmbientBodyFix : QuickFixBase {
    private TS1037Error myErr;
    public string Text { get; }
    public RemoveAmbientBodyFix(TS1037Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveAmbientInitializerFix : QuickFixBase {
    private TS1039Error myErr;
    public string Text { get; }
    public RemoveAmbientInitializerFix(TS1039Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveAmbientMemberBodyFix : QuickFixBase {
    private AmbientMemberHasBodyError myErr;
    public string Text { get; }
    public RemoveAmbientMemberBodyFix(AmbientMemberHasBodyError err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveCatchClauseTypeAnnotationFix : QuickFixBase {
    private TS1013Error myErr;
    public string Text { get; }
    public RemoveCatchClauseTypeAnnotationFix(TS1013Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveDuplicatedModifierFix : QuickFixBase {
    private DuplicateModifierError myErr;
    public string Text { get; }
    public RemoveDuplicatedModifierFix(DuplicateModifierError err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveDuplicateExtendsFix : QuickFixBase {
    private TS1024Error myErr;
    public string Text { get; }
    public RemoveDuplicateExtendsFix(TS1024Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveEnumMemberInitializerFix : QuickFixBase {
    private TS1066Error myErr;
    public string Text { get; }
    public RemoveEnumMemberInitializerFix(TS1066Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveFileExtensionFix : QuickFixBase {
    private TS0998Error myErr;
    public string Text { get; }
    public RemoveFileExtensionFix(TS0998Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveInitializerFix : QuickFixBase {
    private TS1015Error myErr;
    public string Text { get; }
    public RemoveInitializerFix(TS1015Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveOrReplaceModifierFix : QuickFixBase {
    private TS1243Error myErr;
    public string Text { get; }
    public RemoveOrReplaceModifierFix(TS1243Error err);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveQuestionMarkFix : QuickFixBase {
    private TS1015Error myErr;
    public string Text { get; }
    public RemoveQuestionMarkFix(TS1015Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveQuestionMarkRequiredAfterOptionalFix : RemoveWrongQuestionMarkFixBase {
    private UnexpectedRequiredParameterAfterOptionalError myErr;
    public string Text { get; }
    protected ITsParameterDeclaration ParameterDeclaration { get; }
    public RemoveQuestionMarkRequiredAfterOptionalFix(UnexpectedRequiredParameterAfterOptionalError myErr);
    public virtual string get_Text();
    protected virtual ITsParameterDeclaration get_ParameterDeclaration();
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveQuotesFromModuleNameFix : QuickFixBase {
    private TS1035Error myErr;
    public string Text { get; }
    public RemoveQuotesFromModuleNameFix(TS1035Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveRedundantConstructorFix : QuickFixBase {
    private RedundantEmptyConstructorWarning myWarning;
    public string Text { get; }
    public RemoveRedundantConstructorFix(RedundantEmptyConstructorWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveRedundantParentTypeSpecFix : QuickFixBase {
    private RedundantParentTypeDeclarationWarning myWarning;
    public string Text { get; }
    public RemoveRedundantParentTypeSpecFix(RedundantParentTypeDeclarationWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveRedundantQualifierFix : ModernScopedNonIncrementalQuickFixBase {
    [CompilerGeneratedAttribute]
private RedundantQualifierWarning <warning>P;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantQualifierFix(RedundantQualifierWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private void Execute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveRedundantReferenceCommentFix : ModernScopedQuickFixBase {
    [CompilerGeneratedAttribute]
private DuplicateReferenceCommentWarning <warning>P;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantReferenceCommentFix(DuplicateReferenceCommentWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveRedundantTypeCaseFix : QuickFixBase {
    private ITsCastExpression myCastExpression;
    public string Text { get; }
    public RemoveRedundantTypeCaseFix(RedundantTypeCastStructuralWarning warning);
    public RemoveRedundantTypeCaseFix(RedundantTypeCastWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveRedundantTypeSpecificationFix : ModernScopedNonIncrementalQuickFixBase {
    [CompilerGeneratedAttribute]
private RedundantVariableTypeSpecificationWarning <warning>P;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantTypeSpecificationFix(RedundantVariableTypeSpecificationWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveReturnedValueFix : QuickFixBase {
    private TS2122Error myErr;
    public string Text { get; }
    public RemoveReturnedValueFix(TS2122Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveReturnStatementFix : QuickFixBase {
    private TS2122Error myErr;
    public string Text { get; }
    public RemoveReturnStatementFix(TS2122Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveStatementFix : QuickFixBase {
    private TS1036Error myErr;
    public string Text { get; }
    public RemoveStatementFix(TS1036Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveStringSpecializationFix : RemoveStringSpecializationFixBase {
    private SpecializedParameterInImplamentationSignatureError myErr;
    protected ITsParameterDeclaration ParameterDeclaration { get; }
    public RemoveStringSpecializationFix(SpecializedParameterInImplamentationSignatureError err);
    protected virtual ITsParameterDeclaration get_ParameterDeclaration();
}
public abstract class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveStringSpecializationFixBase : QuickFixBase {
    protected ITsParameterDeclaration ParameterDeclaration { get; }
    public string Text { get; }
    protected abstract virtual ITsParameterDeclaration get_ParameterDeclaration();
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveStringSpecializationOptParamFix : RemoveStringSpecializationFixBase {
    private OptionalSpecializedParameterError myErr;
    protected ITsParameterDeclaration ParameterDeclaration { get; }
    public RemoveStringSpecializationOptParamFix(OptionalSpecializedParameterError err);
    protected virtual ITsParameterDeclaration get_ParameterDeclaration();
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveStringSpecializationRestParamFix : RemoveStringSpecializationFixBase {
    private ITsParameterDeclaration myParameter;
    private bool isSpecific;
    protected ITsParameterDeclaration ParameterDeclaration { get; }
    public RemoveStringSpecializationRestParamFix(RestSpecializedParameterError err);
    public RemoveStringSpecializationRestParamFix(TS2162Error err);
    protected virtual ITsParameterDeclaration get_ParameterDeclaration();
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveTypeAnnotationFix : QuickFixBase {
    private TS2133Error myErr;
    public string Text { get; }
    public RemoveTypeAnnotationFix(TS2133Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveTypeAnnotationForStatementFix : QuickFixBase {
    private TS2115Error myErr;
    public string Text { get; }
    public RemoveTypeAnnotationForStatementFix(TS2115Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveTypeArgumentListFix : QuickFixBase {
    private ITsTypeArgumentList myArgumentList;
    public string Text { get; }
    public RemoveTypeArgumentListFix(TS2158Error error);
    public RemoveTypeArgumentListFix(TS2159Error error);
    public RemoveTypeArgumentListFix(TS2315Error error);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveTypeConstraintFix : QuickFixBase {
    private TS2086Error myError;
    public string Text { get; }
    public RemoveTypeConstraintFix(TS2086Error error);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveTypeParameterConstraintFix : QuickFixBase {
    private TS2080Error myErr;
    public string Text { get; }
    public RemoveTypeParameterConstraintFix(TS2080Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveTypeParametersForSuperInvocationFix : QuickFixBase {
    private TS1034Error myErr;
    public string Text { get; }
    public RemoveTypeParametersForSuperInvocationFix(TS1034Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveUnexpectedModifierFix : QuickFixBase {
    private UnexpectedModifierError myErr;
    public string Text { get; }
    public RemoveUnexpectedModifierFix(UnexpectedModifierError err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveUnneededDeclareModifierFix : QuickFixBase {
    private TS1038Error myErr;
    public string Text { get; }
    public RemoveUnneededDeclareModifierFix(TS1038Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveUnneededDeclareModifierOnNonModuleFix : QuickFixBase {
    private DuplicateAmbientDeclarationError myErr;
    public string Text { get; }
    public RemoveUnneededDeclareModifierOnNonModuleFix(DuplicateAmbientDeclarationError err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveUnneededTypeAnnotationFix : QuickFixBase {
    private ITreeNode myNode;
    public string Text { get; }
    public RemoveUnneededTypeAnnotationFix(TS1092Error err);
    public RemoveUnneededTypeAnnotationFix(TS1095Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveUnneededTypeParametersListFix : QuickFixBase {
    private ITreeNode myNode;
    public string Text { get; }
    public RemoveUnneededTypeParametersListFix(TS1091Error err);
    public RemoveUnneededTypeParametersListFix(TS1094Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveUnusedImportFix : ModernScopedNonIncrementalQuickFixBase {
    [NullableAttribute("2")]
private ITreeNode myDeclaration;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveUnusedImportFix(UnusedLocalImportWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private void Execute();
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveVariableInitializerFix : QuickFixBase {
    private ITsVariableDeclaration myVariableDeclaration;
    public string Text { get; }
    public RemoveVariableInitializerFix(TS1189Error err);
    public RemoveVariableInitializerFix(TS1197Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveWrongInitializerFix : RemoveWrongInitializerFixBase {
    private TS1052Error myErr;
    protected ITsParameterDeclaration ParameterDeclaration { get; }
    public RemoveWrongInitializerFix(TS1052Error err);
    protected virtual ITsParameterDeclaration get_ParameterDeclaration();
}
public abstract class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveWrongInitializerFixBase : QuickFixBase {
    public string Text { get; }
    protected ITsParameterDeclaration ParameterDeclaration { get; }
    public virtual string get_Text();
    protected abstract virtual ITsParameterDeclaration get_ParameterDeclaration();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveWrongInitializerIndexSignatureParameterFix : RemoveWrongInitializerFixBase {
    private IndexSignatureParameterCanNotHaveDefaultValueError myErr;
    protected ITsParameterDeclaration ParameterDeclaration { get; }
    public RemoveWrongInitializerIndexSignatureParameterFix(IndexSignatureParameterCanNotHaveDefaultValueError err);
    protected virtual ITsParameterDeclaration get_ParameterDeclaration();
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveWrongInitializerRestParameterFix : RemoveWrongInitializerFixBase {
    private RestParameterCanNotHaveDefaultValueError myErr;
    protected ITsParameterDeclaration ParameterDeclaration { get; }
    public RemoveWrongInitializerRestParameterFix(RestParameterCanNotHaveDefaultValueError err);
    protected virtual ITsParameterDeclaration get_ParameterDeclaration();
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveWrongQuestionMarkFix : RemoveWrongQuestionMarkFixBase {
    private TS1051Error myErr;
    protected ITsParameterDeclaration ParameterDeclaration { get; }
    public RemoveWrongQuestionMarkFix(TS1051Error err);
    protected virtual ITsParameterDeclaration get_ParameterDeclaration();
}
public abstract class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveWrongQuestionMarkFixBase : QuickFixBase {
    protected ITsParameterDeclaration ParameterDeclaration { get; }
    public string Text { get; }
    protected abstract virtual ITsParameterDeclaration get_ParameterDeclaration();
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveWrongQuestionMarkIndexSignatureParameterFix : RemoveWrongQuestionMarkFixBase {
    private IndexSignatureParameterCanNotBeOptionalError myErr;
    protected ITsParameterDeclaration ParameterDeclaration { get; }
    public RemoveWrongQuestionMarkIndexSignatureParameterFix(IndexSignatureParameterCanNotBeOptionalError err);
    protected virtual ITsParameterDeclaration get_ParameterDeclaration();
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RemoveWrongQuestionMarkRestParameterFix : RemoveWrongQuestionMarkFixBase {
    private RestParameterCanNotHaveOptionalMarkError myErr;
    protected ITsParameterDeclaration ParameterDeclaration { get; }
    public RemoveWrongQuestionMarkRestParameterFix(RestParameterCanNotHaveOptionalMarkError myErr);
    protected virtual ITsParameterDeclaration get_ParameterDeclaration();
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RenameConflictingVariableFix : QuickFixBase {
    private IDeclaredElement myElement;
    public string Text { get; }
    public RenameConflictingVariableFix(TS2200Error error);
    public RenameConflictingVariableFix(TS2205Error error);
    public RenameConflictingVariableFix(TS2224Error error);
    public RenameConflictingVariableFix(TS2225Error error);
    public RenameConflictingVariableFix(TS2228Error error);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RenameFunctionOverloadProperlyFix : QuickFixBase {
    private TS1043Error myErr;
    public string Text { get; }
    public RenameFunctionOverloadProperlyFix(TS1043Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RenameHidingTypeParameterFix : QuickFixBase {
    private TypeParameterHidesTypeParamFromOuterScopeWarning myWarning;
    public string Text { get; }
    public RenameHidingTypeParameterFix(TypeParameterHidesTypeParamFromOuterScopeWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.RenameReservedWordClashFix : QuickFixBase {
    private TS1057890Error myErr;
    public string Text { get; }
    public RenameReservedWordClashFix(TS1057890Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ReorderModifiersFix : QuickFixBase {
    private TS1029Error myErr;
    public string Text { get; }
    public ReorderModifiersFix(TS1029Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ReorderOverloadsProperlyFix : QuickFixBase {
    private MoreSpecificSignatureAfterLessSpecificWarning myWarning;
    public string Text { get; }
    public ReorderOverloadsProperlyFix(MoreSpecificSignatureAfterLessSpecificWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.ReorderPropertiesFix : QuickFixBase {
    private UseOfPossiblyUnassignedPropertyWarning myWarning;
    public string Text { get; }
    public ReorderPropertiesFix(UseOfPossiblyUnassignedPropertyWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.resolve_typescriptQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.SmartTypeRelationsProblemsFix : object {
    private IList`1<IComparisonResult> myError;
    private ITsMemberElement myTargetElement;
    private ITsType[] mySuggestedTypes;
    private JsModifiers mySuggestedModifiers;
    private bool myChangeOptionality;
    private IJsFunctionSignature myMissingSignature;
    private IJsFunctionSignature myOwnSignature;
    private int myMismatchedParameterIndex;
    private IJsFunctionSignature myExpectedSignatureForReturnType;
    private IndexerKind myIndexerToChange;
    private ITsNamedType myOwnType;
    public SmartTypeRelationsProblemsFix(TS2141Error err);
    public SmartTypeRelationsProblemsFix(TS2142Error err);
    public SmartTypeRelationsProblemsFix(TS2143Error err);
    public SmartTypeRelationsProblemsFix(TS2137Error err);
    public SmartTypeRelationsProblemsFix(TS2138Error err);
    private void FillDataForInheritanceMemberMismatch(ITreeNode node);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.SmartTypeRelationsProblemsFix/<CreateBulbItems>d__17")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.SpecifyVariableTypeExplicitlyFix : ModernScopedNonIncrementalQuickFixBase {
    [CompilerGeneratedAttribute]
private SpecifyVariableTypeExplicitlyWarning <warning>P;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public SpecifyVariableTypeExplicitlyFix(SpecifyVariableTypeExplicitlyWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.SurroundWithDiscriminantTypeGuard : SurroundWithTypeGuardActionBase {
    public SurroundWithDiscriminantTypeGuard(IReferenceExpression referenceExpression, string typeDesc, string propertyName, string qualifiedName, TypeGuardSurroundKind kind);
    protected virtual string GetGuardRepresentation(string referenceName, string propertyName, string typeDescription, bool includeValue, bool negated);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.SurroundWithInstanceOfTypeGuard : SurroundWithTypeGuardActionBase {
    public SurroundWithInstanceOfTypeGuard(IReferenceExpression referenceExpression, string typeDesc, string qualifiedName, TypeGuardSurroundKind kind);
    protected virtual string GetGuardRepresentation(string referenceName, string propertyName, string typeDescription, bool includeValue, bool negated);
}
public abstract class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.SurroundWithTypeGuardActionBase : BulbActionBase {
    private IReferenceExpression myReferenceExpression;
    private string myTypeDesc;
    private string myPropertyName;
    private string myQualifiedName;
    private TypeGuardSurroundKind myKind;
    public string Text { get; }
    protected SurroundWithTypeGuardActionBase(IReferenceExpression referenceExpression, string typeDesc, string propertyName, string qualifiedName, TypeGuardSurroundKind kind);
    private string GetDescription(string guard);
    public virtual string get_Text();
    protected abstract virtual string GetGuardRepresentation(string referenceName, string propertyName, string typeDescription, bool includeValue, bool negated);
    private IJavaScriptExpression GetOwnerExpression(IJavaScriptExpression expression);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.SurroundWithTypeGuardFix : object {
    private IReferenceExpression myReferenceExpression;
    private bool myIsAvailable;
    private ITsUnionType myQualifierType;
    public SurroundWithTypeGuardFix(TsResolvedFromInaccessibleModuleWarning error);
    public SurroundWithTypeGuardFix(TsNotResolvedError error);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    private static string GetBuiltInTypeAsQuotedString(IJsResolvedType type);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.SurroundWithTypeGuardFix/<CalculateItems>d__8")]
private IEnumerable`1<IBulbAction> CalculateItems();
    private static bool IsSafeToSurroundWithStatement(IReferenceExpression referenceExpression);
    private static bool IsInterface(IJsResolvedType type);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.SurroundWithTypeOfGuardAction : SurroundWithTypeGuardActionBase {
    public SurroundWithTypeOfGuardAction(IReferenceExpression referenceExpression, string typeDesc, string qualifiedName, TypeGuardSurroundKind kind);
    protected virtual string GetGuardRepresentation(string referenceName, string propertyName, string typeDescription, bool includeValue, bool negated);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.SurroundWithWipeNullableTypeGuard : SurroundWithTypeGuardActionBase {
    private bool myHasNull;
    private bool myHasUndefined;
    public SurroundWithWipeNullableTypeGuard(IReferenceExpression referenceExpression, string qualifiedName, bool hasNull, bool hasUndefined, TypeGuardSurroundKind kind);
    protected virtual string GetGuardRepresentation(string referenceName, string propertyName, string typeDescription, bool includeValue, bool negated);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.TsChangeAllFix : TsChangeAllFixBase {
    public string Text { get; }
    public TsChangeAllFix(TS2178Error error);
    public TsChangeAllFix(TsNotResolvedError error);
    public TsChangeAllFix(TsResolvedFromInaccessibleModuleWarning warning);
    public virtual string get_Text();
    protected virtual ITreeNode GetScopeNode(ITreeNode refNode);
}
public abstract class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.TsChangeAllFixBase : QuickFixBase {
    private ITreeNode myContextNode;
    protected string mySymbolName;
    private JsResolveContext myContext;
    private ITsReferenceName myTsReferenceName;
    private IReferenceExpression myReferenceExpression;
    private JsTypeResolveResult myType;
    protected TsChangeAllFixBase(TS2178Error error);
    protected TsChangeAllFixBase(TsNotResolvedError error);
    protected TsChangeAllFixBase(TsResolvedFromInaccessibleModuleWarning warning);
    protected abstract virtual ITreeNode GetScopeNode(ITreeNode refNode);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.TsChangeAllLocalFix : TsChangeAllFixBase {
    public string Text { get; }
    public TsChangeAllLocalFix(TS2178Error error);
    public TsChangeAllLocalFix(TsNotResolvedError error);
    public TsChangeAllLocalFix(TsResolvedFromInaccessibleModuleWarning warning);
    public virtual string get_Text();
    protected virtual ITreeNode GetScopeNode(ITreeNode refNode);
}
public enum JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.TypeGuardSurroundKind : Enum {
    public int value__;
    public static TypeGuardSurroundKind IfStatement;
    public static TypeGuardSurroundKind And;
    public static TypeGuardSurroundKind Or;
    public static TypeGuardSurroundKind Switch;
}
public abstract class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.UnrestifyFixBase : QuickFixBase {
    public string Text { get; }
    protected ITsParameterDeclaration ParameterDeclaration { get; }
    public virtual string get_Text();
    protected abstract virtual ITsParameterDeclaration get_ParameterDeclaration();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.UnrestifyIndexSignatureParameterFix : UnrestifyFixBase {
    private IndexSignatureParameterCanNotBeRestError myErr;
    protected ITsParameterDeclaration ParameterDeclaration { get; }
    public UnrestifyIndexSignatureParameterFix(IndexSignatureParameterCanNotBeRestError err);
    protected virtual ITsParameterDeclaration get_ParameterDeclaration();
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.UnrestifyNonLastRestFix : UnrestifyFixBase {
    private UnexpectedRequiredParameterAfterRestError myErr;
    public string Text { get; }
    protected ITsParameterDeclaration ParameterDeclaration { get; }
    public UnrestifyNonLastRestFix(UnexpectedRequiredParameterAfterRestError myErr);
    public virtual string get_Text();
    protected virtual ITsParameterDeclaration get_ParameterDeclaration();
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.UnrestifySetAccessorParameterFix : UnrestifyFixBase {
    private TS1053Error myErr;
    protected ITsParameterDeclaration ParameterDeclaration { get; }
    public UnrestifySetAccessorParameterFix(TS1053Error err);
    protected virtual ITsParameterDeclaration get_ParameterDeclaration();
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.UseBaseCommonTypeAction : BulbActionBase {
    private ITsMemberElement myElement;
    private IJsResolvedType myCommonType;
    private JsResolveContext myResolveContext;
    private string ParentText { get; }
    public string Text { get; }
    public UseBaseCommonTypeAction(ITsMemberElement element, IJsResolvedType commonType, JsResolveContext resolveContext);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private string get_ParentText();
    public virtual string get_Text();
    private string GetStringAnnotation(JsResolveContext resolveContext, ITreeNode memberVariableDeclaration);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.UseBooleanNotBoolFix : QuickFixBase {
    private TS0999Error myErr;
    public string Text { get; }
    public UseBooleanNotBoolFix(TS0999Error err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.UseExtendsInsteadOfImplementsFix : QuickFixBase {
    private ImplementsClauseIsUnexpectedError myErr;
    public string Text { get; }
    public UseExtendsInsteadOfImplementsFix(ImplementsClauseIsUnexpectedError err);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public abstract class JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.UnreachableCodeFixBase : QuickFixBase {
    protected bool myExecuting;
    protected ITreeRange AdjustTreeRange(ITreeRange range);
    protected ITreeRange AdjustExpression(ITreeRange range, IJavaScriptExpression expression);
    protected ITreeRange AdjustStatement(ITreeRange range, IJavaScriptStatement statement);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.JavaScript.WinRT.QuickFixes.CreateFromUsage.CreateFromUsageWinRTContextProvider : object {
    public sealed virtual IEnumerable`1<IJsCreateFromUsageBulbItem> ProvideContexts(CreateFromUsageContextProviders providers, JsTypeResolveResult type, UsageInfo usageInfo, CreateFromUsageData data);
}
public class JetBrains.ReSharper.Intentions.JavaScript.WinRT.QuickFixes.CreateFromUsage.CreateMethodFromUsageWinRT : CreateFromUsageActionBase2`2<CreateMethodDeclarationContext, IReferenceExpressionReference> {
    private ITypeElement myTypeElement;
    private bool myIsStatic;
    public string Text { get; }
    public IProjectFile ProjectFile { get; }
    public CreateMethodFromUsageWinRT(ITypeElement typeElement, bool isStatic, UsageInfo usageInfo);
    protected virtual CreateMethodDeclarationContext CreateContext();
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    protected virtual ICreationTarget GetTarget();
    protected virtual IntentionResult ExecuteIntention(CreateMethodDeclarationContext context);
    private ITypeElement GetTypeElement();
    public virtual string get_Text();
    public sealed virtual IProjectFile get_ProjectFile();
    protected virtual bool IsAvailableInternal();
}
public class JetBrains.ReSharper.Intentions.JavaScript.WinRT.QuickFixes.CreateFromUsage.CreatePropertyFromUsageWinRT : CreateFromUsageActionBase2`2<CreatePropertyDeclarationContext, IReferenceExpressionReference> {
    private ITypeElement myTypeElement;
    private bool myIsStatic;
    public string Text { get; }
    public IProjectFile ProjectFile { get; }
    public CreatePropertyFromUsageWinRT(ITypeElement typeElement, bool isStatic, UsageInfo usageInfo);
    protected virtual CreatePropertyDeclarationContext CreateContext();
    protected virtual IntentionResult ExecuteIntention(CreatePropertyDeclarationContext context);
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    protected virtual ICreationTarget GetTarget();
    private ITypeElement GetTypeElement();
    public virtual string get_Text();
    public sealed virtual IProjectFile get_ProjectFile();
    protected virtual bool IsAvailableInternal();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.WinRT.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Intentions.JavaScript.ZoneMarker : object {
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Razor.ContextActions.BlazorMoveToCodeBehindContextAction : ContextActionBase {
    [CompilerGeneratedAttribute]
private IWebContextActionDataProvider`1<IRazorFile> <dataProvider>P;
    public string Text { get; }
    public BlazorMoveToCodeBehindContextAction(IWebContextActionDataProvider`1<IRazorFile> dataProvider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Razor.ContextActions.Comments.DeleteCommentAction : RazorCommentActionBase {
    private static Key ourDeleteRazorCommentActionKey;
    [NotNullAttribute]
private IWebContextActionDataProvider`1<IRazorFile> myDataProvider;
    public string Text { get; }
    public DeleteCommentAction(IWebContextActionDataProvider`1<IRazorFile> dataProvider);
    private static DeleteCommentAction();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NotNullAttribute]
private static ITreeRange CalculateRangeToDelete(IList`1<RazorComment> commentNodes, ISolution solution);
}
public abstract class JetBrains.ReSharper.Intentions.Razor.ContextActions.Comments.RazorCommentActionBase : ContextActionBase {
    [NotNullAttribute]
private IWebContextActionDataProvider`1<IRazorFile> myDataProvider;
    protected RazorCommentActionBase(IWebContextActionDataProvider`1<IRazorFile> dataProvider);
    [NotNullAttribute]
[ItemNotNullAttribute]
protected IList`1<RazorComment> GetSelectedCommentNodes();
    [NotNullAttribute]
[ItemNotNullAttribute]
protected IList`1<RazorComment> GetCommentNodes(IFile razorFile, RazorComment originalNode);
    private bool ValidateSelectionRange(IFile razorFile, IList`1<RazorComment> commentNodes);
    private bool ValidateSelectionBorders(IFile razorFile, RazorComment commentNode);
    private bool ValidateOffset(IFile razorFile, TreeOffset endOffset);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Razor.ContextActions.Comments.UncommentAction : RazorCommentActionBase {
    [NotNullAttribute]
private IWebContextActionDataProvider`1<IRazorFile> myDataProvider;
    public string Text { get; }
    public UncommentAction(IWebContextActionDataProvider`1<IRazorFile> dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NotNullAttribute]
private Action`1<ITextControl> ExecuteOverBlockComment(DocumentRange documentSelection, IProjectFile projectFile);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Razor.ContextActions.RazorBlockToLineMarkupContextAction : RazorMarkupConverterContextActionBase`1<IRazorBlockMarkup> {
    public string Text { get; }
    public RazorBlockToLineMarkupContextAction(IWebContextActionDataProvider`1<IRazorFile> dataProvider);
    public virtual string get_Text();
    public virtual IRazorHtmlMarkup CreateMarkup(RazorElementFactory factory, ITreeNode contextElement);
}
[ContextActionGroupAttribute]
public static class JetBrains.ReSharper.Intentions.Razor.ContextActions.RazorContextActions : object {
    public static string GroupID;
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Razor.ContextActions.RazorLineToBlockMarkupContextAction : RazorMarkupConverterContextActionBase`1<IRazorLineMarkup> {
    public string Text { get; }
    public RazorLineToBlockMarkupContextAction(IWebContextActionDataProvider`1<IRazorFile> dataProvider);
    public virtual string get_Text();
    public virtual IRazorHtmlMarkup CreateMarkup(RazorElementFactory factory, ITreeNode contextElement);
}
public abstract class JetBrains.ReSharper.Intentions.Razor.ContextActions.RazorMarkupConverterContextActionBase`1 : ContextActionBase {
    [NotNullAttribute]
private IWebContextActionDataProvider`1<IRazorFile> myDataProvider;
    protected RazorMarkupConverterContextActionBase`1(IWebContextActionDataProvider`1<IRazorFile> dataProvider);
    [NotNullAttribute]
public abstract virtual IRazorHtmlMarkup CreateMarkup(RazorElementFactory factory, ITreeNode contextElement);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Razor.CSharp.QuickFixes.BlazorCreateEditorRequiredAttributeQuickFix : QuickFixBase {
    private BlazorEditorRequiredHighlighting myHighlighting;
    public string Text { get; }
    public BlazorCreateEditorRequiredAttributeQuickFix(BlazorEditorRequiredHighlighting highlighting);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Razor.CSharp.QuickFixes.BlazorDuplicatedRenderModeDirectiveQuickFix : QuickFixBase {
    private BlazorDuplicatedRenderModeDirectiveHighlighting myHighlighting;
    public string Text { get; }
    public BlazorDuplicatedRenderModeDirectiveQuickFix(BlazorDuplicatedRenderModeDirectiveHighlighting highlighting);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.Razor.CSharp.QuickFixes.Css.CssEscapeAtCharFix : QuickFixBase {
    [CanBeNullAttribute]
private IReference myReference;
    public string Text { get; }
    public CssEscapeAtCharFix(NotResolvedError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private ICssTreeNode GetCssNode();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.Razor.CSharp.QuickFixes.Css.CssEscapeAtCharFixRegistartor : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Intentions.Razor.CSharp.QuickFixes.Css.ZoneMarker : object {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Intentions.Razor.CSharp.QuickFixes.Mvc.RazorCSharpMvcQuickFixTemplateProvider : MvcQuickFixTemplateProviderBase {
    private static IDictionary`2<Pair`2<bool, bool>, Guid> ourTemplates;
    public RazorCSharpMvcQuickFixTemplateProvider(MvcReferencedAssembliesService mvcReferencedAssembliesService);
    private static RazorCSharpMvcQuickFixTemplateProvider();
    public virtual Guid GetTemplateGuid(bool viewPage, bool withMasterpage);
    public virtual string GetExtension(bool viewPage, bool withMasterpage);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Intentions.Razor.CSharp.QuickFixes.Mvc.ZoneMarker : object {
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Razor.CSharp.QuickFixes.RazorMustUseReturnValueQuickFix : QuickFixBase {
    [NotNullAttribute]
private ICSharpExpression myIgnoredExpression;
    [NotNullAttribute]
private static IAnchor ourQuickFixesTopAnchor;
    public string Text { get; }
    public RazorMustUseReturnValueQuickFix(MustUseReturnValueWarning highlighting);
    private static RazorMustUseReturnValueQuickFix();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    private static bool CheckImplicitExpressionNeedsParentheses(ICSharpExpression expression);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Razor.CSharp.QuickFixes.RazorNotEnclosedBlockStatementInCodeQuickFix : QuickFixBase {
    private NestedStatementsOwner myNestedBlock;
    public string Text { get; }
    public RazorNotEnclosedBlockStatementInCodeQuickFix(RazorNotEnclosedBlockStatementInCodeHighlighting highlighting);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Razor.CSharp.QuickFixes.RazorNullConditionalOperatorQuickFix : QuickFixBase {
    [CompilerGeneratedAttribute]
private RazorNullConditionalOperatorHighlighting <highlighting>P;
    public string Text { get; }
    public RazorNullConditionalOperatorQuickFix(RazorNullConditionalOperatorHighlighting highlighting);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Intentions.Razor.CSharp.ZoneMarker : object {
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Razor.QuickFixes.Mvc.MvcChangeModelTypeQuickFix : MvcChangeModelTypeQuickFixBase {
    private MvcConfigurableInvalidModelType myHighlighting;
    public MvcChangeModelTypeQuickFix(MvcConfigurableInvalidModelType highlighting);
    public virtual bool IsAvailable(IUserDataHolder cache);
    private static IRazorFile GetViewRazorFile(MvcConfigurableInvalidModelType highlighting);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public abstract class JetBrains.ReSharper.Intentions.Razor.QuickFixes.Mvc.MvcQuickFixTemplateProviderBase : object {
    private MvcReferencedAssembliesService myMvcReferencedAssembliesService;
    public double Position { get; }
    protected MvcQuickFixTemplateProviderBase(MvcReferencedAssembliesService mvcReferencedAssembliesService);
    public abstract virtual Guid GetTemplateGuid(bool viewPage, bool withMasterpage);
    public abstract virtual string GetExtension(bool viewPage, bool withMasterpage);
    public virtual string GetQuickFixTitle(MvcKind mvcKind, bool viewPage, bool withMasterpage);
    public sealed virtual RichText GetAnchorTitle();
    public sealed virtual double get_Position();
    public virtual bool IsAvailable(IMvcViewReference reference);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Intentions.Razor.QuickFixes.Mvc.ZoneMarker : object {
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Razor.QuickFixes.RazorNotEnclosedBlockStatementQuickFix : QuickFixBase {
    [NotNullAttribute]
private ITreeRange myTreeRange;
    public string Text { get; }
    public RazorNotEnclosedBlockStatementQuickFix(RazorNotEnclosedBlockStatementHighlighting highlighting);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Razor.QuickFixes.RazorReferenceModuleQuickFix : ReferenceModuleFixBase {
    private string myAssemblyName;
    public RazorReferenceModuleQuickFix(RazorNotResolvedAssemblyHighlighting notResolvedAssemblyHighlighting);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual HybridCollection`1<IReferenceAction> FindModulesToReference(ModuleReferencerService moduleReferencerService);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Razor.QuickFixes.RazorReservedKeywordQuickFix : QuickFixBase {
    [NotNullAttribute]
private IHtmlErrorElement myError;
    public string Text { get; }
    public RazorReservedKeywordQuickFix(RazorReservedKeywordErrorHighlighting highlighting);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Razor.QuickFixes.RazorTransitionInsideCodeQuickFix : QuickFixBase {
    [NotNullAttribute]
private ITreeRange myTreeRange;
    public string Text { get; }
    public RazorTransitionInsideCodeQuickFix(RazorTransitionInsideCodeHighlighting highlighting);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
private void <ExecutePsiTransaction>b__5_0(ITextControl textControl);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Razor.QuickFixes.RazorVoidWriteCallErrorQuickFix : QuickFixBase {
    private IManagedExpression myMethod;
    private IExpression myArgument;
    public string Text { get; }
    public RazorVoidWriteCallErrorQuickFix(RazorVoidWriteCallErrorHighlighting highlighting);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Intentions.Razor.ZoneMarker : object {
}
public class JetBrains.ReSharper.Intentions.Resources.IntentionsAspThemedIcons : object {
}
public class JetBrains.ReSharper.Intentions.Resources.LiveTemplatesCssThemedIcons : object {
}
public class JetBrains.ReSharper.Intentions.Resources.QuickFixesCssThemedIcons : object {
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Intentions.Resources.Strings11 : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string CodeLayoutOptionPageTitle { get; }
    public static string ExplanationHowToDismissHTMLHighlightingsIsAlreadyShownSettingDescription { get; }
    public static string HighlightHTMLActionSettingsSettingDescription { get; }
    public static string HighlightTableColumnActionText { get; }
    public static string HighlightTableRowActionText { get; }
    public static string InsertTableColumnAfterActionText { get; }
    public static string InsertTableColumnBeforeActionText { get; }
    public static string InsertTableRowAfterActionText { get; }
    public static string InsertTableRowBeforeActionText { get; }
    public static string LineBreaksOptionPageTitle { get; }
    public static string SpacesOptionPageTitle { get; }
    public static string TabsAndIndentsOptionPageTitle { get; }
    public static string WEbToolsActionGroupText { get; }
    private static Strings11();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_CodeLayoutOptionPageTitle();
    public static string get_ExplanationHowToDismissHTMLHighlightingsIsAlreadyShownSettingDescription();
    public static string get_HighlightHTMLActionSettingsSettingDescription();
    public static string get_HighlightTableColumnActionText();
    public static string get_HighlightTableRowActionText();
    public static string get_InsertTableColumnAfterActionText();
    public static string get_InsertTableColumnBeforeActionText();
    public static string get_InsertTableRowAfterActionText();
    public static string get_InsertTableRowBeforeActionText();
    public static string get_LineBreaksOptionPageTitle();
    public static string get_SpacesOptionPageTitle();
    public static string get_TabsAndIndentsOptionPageTitle();
    public static string get_WEbToolsActionGroupText();
}
public interface JetBrains.ReSharper.Intentions.Web.QuickFixes.Mvc.IMvcQuickFixTemplateProvider {
    public double Position { get; }
    public abstract virtual double get_Position();
    public abstract virtual bool IsAvailable(IMvcViewReference reference);
    public abstract virtual Guid GetTemplateGuid(bool viewPage, bool withMasterpage);
    public abstract virtual string GetExtension(bool viewPage, bool withMasterpage);
    public abstract virtual string GetQuickFixTitle(MvcKind mvcKind, bool viewPage, bool withMasterpage);
    public abstract virtual RichText GetAnchorTitle();
}
public abstract class JetBrains.ReSharper.Intentions.Web.QuickFixes.Mvc.MvcChangeModelTypeQuickFixBase : object {
    public abstract virtual bool IsAvailable(IUserDataHolder cache);
    public abstract virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Intentions.Web.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string CodeCleanupTask_CssAlphabetizeProperties { get; }
    public static string CodeCleanupTask_CssReformatCode { get; }
    public static string AlphabetizeProperties_Name_Sort_CSS_properties { get; }
    public static string ReformatCode_Name_Reformat_CSS { get; }
    public static string Typescriptify_Text { get; }
    public static string AddConstraint_ToMatchingParametersIn_Text { get; }
    public static string AddParameterToControllerSRouteTemplate_Text { get; }
    public static string AddParameterToMethodSRouteTemplate_Text { get; }
    public static string AddParameterToRouteTemplate_Text { get; }
    public static string AddConstraint_ToRouteParameter_Text { get; }
    public static string ChangeTypeTo_ToSatisfyConstraint__Text { get; }
    public static string ChangeTypeTo_ToSatisfyAllRouteConstraints_Text { get; }
    public static string AddParameter__Text { get; }
    public static string AddMissingParametersFromRouteTemplate_Text { get; }
    public static string AddParameter_ToMethodsThatDonTHaveIt_Text { get; }
    public static string Replace_With__Text { get; }
    public static string Extract_ToControllerSRouteTemplates_Text { get; }
    public static string Extract_ToControllerSRouteTemplate_Text { get; }
    public static string AddCodeBehindFile_Text { get; }
    public static string UnsupportedCodeBehindLanguage_Text { get; }
    public static string AddMissingAttributesForImageDimensions_Text { get; }
    public static string ConvertToASPNETTag_Text { get; }
    public static string ConvertToHTMLTag_Text { get; }
    public static string MergeServerScriptsContent_Text { get; }
    public static string RemoveCodeBehindFile_Text { get; }
    public static string FixAttributeValue_Text { get; }
    public static string ChangeSignatureOf__Text { get; }
    public static string AddCodeBehindFile__Text { get; }
    public static string AddInheritsAttribute_Text { get; }
    public static string DeleteCodeFileAttribute_Text { get; }
    public static string CreateMissingAttribute__Text { get; }
    public static string CreateContentPlaceHolder_Text { get; }
    public static string TreatPageParserFilterTypeAs__Text { get; }
    public static string UseCorrectImageSize_Text { get; }
    public static string OptimizeRegisterDirectives_Text { get; }
    public static string AddRunatServerAttribute_Text { get; }
    public static string ConvertTagToAttribute_Text { get; }
    public static string ImportControl_Text { get; }
    public static string ImportType_Text { get; }
    public static string CreateAction__Text { get; }
    public static string CreateController_AndAction__Text { get; }
    public static string CreateController__Text { get; }
    public static string CreateViewComponent__Text { get; }
    public static string CanTCreateView_Text { get; }
    public static string GeneratingFileAlreadyExists_Text { get; }
    public static string ToLINQToJSON_Text { get; }
    public static string ConvertColorToHsl_Text { get; }
    public static string ConvertColorToNamedForm_Text { get; }
    public static string ConvertColorToRgb_Text { get; }
    public static string ConvertColorToHexLiteral_Text { get; }
    public static string ConvertColorToHexForm_Text { get; }
    public static string ReplaceVarWithItsFallbackValue_Text { get; }
    public static string AnywhereInCSS_Text { get; }
    public static string InCSSWhereStatementIsExpected_Text { get; }
    public static string InCSSWhereExpressionIsExpected_Text { get; }
    public static string CSSExpressions_Text { get; }
    public static string CSSStatements_Text { get; }
    public static string AddUnitOfMeasure_Text { get; }
    public static string AddVendorSpecificProperties_Text { get; }
    public static string ConvertToHSLA_Text { get; }
    public static string ConvertToRGBA_Text { get; }
    public static string CreateStyle__Text { get; }
    public static string CreateFallbackColor_Text { get; }
    public static string UseDoubleColonInsteadOf_Text { get; }
    public static string UsePseudoSelectorNot_Text { get; }
    public static string UseSingleColonInsteadOf_Text { get; }
    public static string ExtractStyle_Text { get; }
    public static string PutPropertyAfterVendorSpecificProperties_Text { get; }
    public static string RemoveAlphaComponent_Text { get; }
    public static string RemoveUnitOfMeasure_Text { get; }
    public static string TurnOffBrowserCompatibility_Text { get; }
    public static string GetMoreInfoOnBrowserSupportOf__Text { get; }
    public static string FixParenthesesBracketsNesting_Text { get; }
    public static string ExpandEmptyTag_Text { get; }
    public static string MakeEmpty_Tag_Text { get; }
    public static string Remove_Attribute_Text { get; }
    public static string Remove_Tag_Text { get; }
    public static string Remove_TagAndPromoteChild_Text { get; }
    public static string Remove_TagAndPromoteChildren_Text { get; }
    public static string ReorderAttributes_Text { get; }
    public static string ReplaceAll_Tags_Text { get; }
    public static string AddChangeQuotes_Text { get; }
    public static string AddChangeQuotesEverywhere_Text { get; }
    public static string ChangeNameTo__Text { get; }
    public static string AddEndif_Text { get; }
    public static string RemoveDeadCode_Text { get; }
    public static string Close_Tag_Text { get; }
    public static string CloseAllOpenTags_Text { get; }
    public static string MakeTag_Empty_Text { get; }
    public static string InsertClosingTag__Text { get; }
    public static string PressEscapeToRemoveHighlighting_Text { get; }
    public static string InsertTableColumnAfter_Text { get; }
    public static string InsertTableColumnBefore_Text { get; }
    public static string InsertTableRowAfter_Text { get; }
    public static string InsertTableRowBefore_Text { get; }
    public static string CreateMethod__Text { get; }
    public static string CreateProperty__Text { get; }
    public static string SortProperties_Text { get; }
    public static string CreatePaired_Accessor_Text { get; }
    public static string ChangeAnyToType_Text { get; }
    public static string CreateDerivedType_Text { get; }
    public static string CreateModule_InModule___Text { get; }
    public static string CreateClass_InModule___Text { get; }
    public static string Create_In___Text { get; }
    public static string CreateOverloadWithoutParameter_Text { get; }
    public static string ConvertToParameterProperty_Text { get; }
    public static string InlineTypeAlias_Text { get; }
    public static string IntroduceTypeAlias_Text { get; }
    public static string MoveTo_Ts_Text { get; }
    public static string MoveTypesToMatchingFiles_Text { get; }
    public static string ConvertToClassField_Text { get; }
    public static string RenameFileToMatchTypeName_Text { get; }
    public static string File_AlreadyExists_Text { get; }
    public static string ToNestedModule_Text { get; }
    public static string ReplaceAlias_WithQualifier__Text { get; }
    public static string ConvertToMemberFunction_Text { get; }
    public static string ToDottedName_Text { get; }
    public static string SpecifyReturnType_Explicitly_Text { get; }
    public static string SpecifyType_Explicitly_Text { get; }
    public static string AddBraces_Text { get; }
    public static string AddXmlDocComments_Text { get; }
    public static string AddJsDocComments_Text { get; }
    public static string ComputeConstantValue_Text { get; }
    public static string ConvertToTemplateString_Text { get; }
    public static string CreateFunction__Text { get; }
    public static string CreateVariable__Text { get; }
    public static string AddingImportDeclarationWillChangeFile_Text { get; }
    public static string AddingExportedStatementWillChangeFile_Text { get; }
    public static string CannotGenerateMemberProbablyBecause_Text { get; }
    public static string ConvertToHex_Text { get; }
    public static string ConvertToBin_Text { get; }
    public static string ConvertToOct_Text { get; }
    public static string FlipOperands_Text { get; }
    public static string Flip_Operands_Text { get; }
    public static string Flip_OperatorTo__Text { get; }
    public static string ConvertToSimpleProperty_Text { get; }
    public static string ConvertToDec_Text { get; }
    public static string MergeTwoIfS_Text { get; }
    public static string ConvertToSwitchStatement_Text { get; }
    public static string ConvertToOperator_Text { get; }
    public static string IntroduceVariable_Text { get; }
    public static string InvertIf_Text { get; }
    public static string InvertCondition_Text { get; }
    public static string JoinDeclarationAndAssignment_Text { get; }
    public static string JoinStrings_Text { get; }
    public static string ToBlockLambda_Text { get; }
    public static string ToExpressionLambda_Text { get; }
    public static string AddUseStrictStatement_Text { get; }
    public static string NegateBooleanExpression_Text { get; }
    public static string Negate_Expression_Text { get; }
    public static string ToAccessorsWithBackingField_Text { get; }
    public static string WrapToGetAccessor_Text { get; }
    public static string RemoveBraces_Text { get; }
    public static string RemoveRedundantParenthesis_Text { get; }
    public static string ReplaceSingleQuotedStringWithDouble_Text { get; }
    public static string ReplaceDoubleQuotedStringWithSingle_Text { get; }
    public static string ReverseAssignment_Text { get; }
    public static string SplitIntoTwoIfStatements_Text { get; }
    public static string SplitIntoIfAndReturn_Text { get; }
    public static string SplitDeclarationAndAssignment_Text { get; }
    public static string SplitIntoSeparateDeclarations_Text { get; }
    public static string SplitToIfStatement_Text { get; }
    public static string ConvertToIfStatement_Text { get; }
    public static string ToAccessorsDefinitionWithBackingField_Text { get; }
    public static string ToDataPropertyDefinition_Text { get; }
    public static string ToGetAccessorDefinition_Text { get; }
    public static string ReplaceClassWithClassName_Text { get; }
    public static string ReplaceForWithHtmlFor_Text { get; }
    public static string AddExplicitNull_Text { get; }
    public static string AddMissingComma_Text { get; }
    public static string FixAllValidationIssues_Text { get; }
    public static string AddProperty__Text { get; }
    public static string RemoveProperty__Text { get; }
    public static string ReplaceWithAllowedValue_Text { get; }
    public static string FixValueType_Text { get; }
    public static string RemoveInvalidConstruct_Text { get; }
    public static string RemoveUnexpectedComma_Text { get; }
    public static string FixPropertyName_Text { get; }
    public static string FixJSONPropertyNames_Text { get; }
    public static string ChangeAll__Text { get; }
    public static string ChangeAllLocal__Text { get; }
    public static string AddPublicModifier_Text { get; }
    public static string RemovePublicModifier_Text { get; }
    public static string FixPublicModifierPresence_Text { get; }
    public static string FixRelativePathStyle_Text { get; }
    public static string ChangeTypeScriptLevelTo__Text { get; }
    public static string CreateSpecializedOverloadForParameter_Text { get; }
    public static string AddReturnValue_Text { get; }
    public static string UseAnyExplicitly_Text { get; }
    public static string AddThisQualifier_Text { get; }
    public static string ConvertCastToAsOperator_Text { get; }
    public static string ConvertAllCastsToAsOperators_Text { get; }
    public static string PushLessSpecificTypesToTheMainSignature_Text { get; }
    public static string IntroduceAndInitializeField__Text { get; }
    public static string InitializeField_FromParameter_Text { get; }
    public static string AddAsAnOptionalParameterToTheMainSignature_Text { get; }
    public static string AddMissingParameter_Text { get; }
    public static string JoinImportDeclarations_Text { get; }
    public static string MakeConstructorProtected_Text { get; }
    public static string MakeFieldReadonly_Text { get; }
    public static string ReferenceClassThisByIntroducingVariable_Text { get; }
    public static string RemoveRedundantConstructor_Text { get; }
    public static string RemoveRedundantParentTypeSpecification_Text { get; }
    public static string RemoveRedundantQualifier_Text { get; }
    public static string RemoveRedundantQualifiers_Text { get; }
    public static string RemoveRedundantReferenceComment_Text { get; }
    public static string OptimizeReferenceComments_Text { get; }
    public static string RemoveRedundantTypeCast_Text { get; }
    public static string RemoveUnusedImport_Text { get; }
    public static string OptimizeImportStatements_Text { get; }
    public static string RenameHidingTypeParameter_Text { get; }
    public static string IntroduceVariableToApplyGuard_Text { get; }
    public static string ReorderOverloadsProperly_Text { get; }
    public static string ReorderPropertiesInACorrectInitialization_Text { get; }
    public static string GenerateDeclarationSourceFile_DTsFor_Text { get; }
    public static string GenerateDeclarationSourceFile_DTsForAllGlobalDynamicProperty_Text { get; }
    public static string ImplementAbstractMember_Text { get; }
    public static string ImplementMissingMembersAbstract_Text { get; }
    public static string ImplementMissingMembers_Text { get; }
    public static string ImplementMissingLiteralProperties_Text { get; }
    public static string AddReferenceTo__Text { get; }
    public static string AddReferenceTo__ShortText { get; }
    public static string Import_AndAllOtherTypes_Text { get; }
    public static string MakeClassAbstract_Text { get; }
    public static string Remove__Text { get; }
    public static string RemoveRedundantTypeSpecification_Text { get; }
    public static string FixTypeExplicitness_Text { get; }
    public static string AddReturnStatement_Text { get; }
    public static string CannotApplyFixCannotFindBlockToWhich_Text { get; }
    public static string MoveServerScriptContentToCodebehind_Text { get; }
    public static string CreateType__Text { get; }
    public static string UseControlFrom__Text { get; }
    public static string CreatePartialView__Text { get; }
    public static string CreateView_WithMasterpage_Text { get; }
    public static string CreateView__Text { get; }
    public static string CreateASPXViews_Text { get; }
    public static string DisableAndRestoreWithComments_Text { get; }
    public static string DisableOnceWithComment_Text { get; }
    public static string Replace_Tag_Text { get; }
    public static string AddNew_Text { get; }
    public static string AddAnOwnTypeParameterNamed_ToTheMethod_Text { get; }
    public static string AddThisQualifierToReferenceClassMember_Text { get; }
    public static string AddRequiredSuperCall_Text { get; }
    public static string CannotApplyFixCannotResolveBaseType_Text { get; }
    public static string CastToAny_Text { get; }
    public static string UnableToCreateCastExpression_Text { get; }
    public static string UnableToCreateParenthesizedExpression_Text { get; }
    public static string UnableToCreateInvocationExpression_Text { get; }
    public static string UnableToCreateInvocationExpressionWith_Text { get; }
    public static string CastTo__Text { get; }
    public static string ChangeTypesOfBothAccessorsToTheSame_Text { get; }
    public static string ChangeMemberVariable_TypeTo__Text { get; }
    public static string ChangeVariable_TypeTo__Text { get; }
    public static string UseNewArray__Text { get; }
    public static string MakeAllOverloadsExported_Text { get; }
    public static string MakeAllOverloadsNonExported_Text { get; }
    public static string UseStaticQualifier_Text { get; }
    public static string CannotApplyFixCannotDetermineTypeOf_Text { get; }
    public static string IncludeFile_IntoProject___Text { get; }
    public static string IncludeFile_IntoSolution__Text { get; }
    public static string MakeBothAccessorsPrivate_Text { get; }
    public static string MakeBothAccessorsProtected_Text { get; }
    public static string MakeBothAccessorsPublic_Text { get; }
    public static string RemoveAccessibilityModifiers_Text { get; }
    public static string SetReturnTypeToAny_Text { get; }
    public static string SetReturnTypeToVoid_Text { get; }
    public static string MakeMemberNonStatic_Text { get; }
    public static string CannotApplyFixProbablyTheActualType_Text { get; }
    public static string MakeMemberStatic_Text { get; }
    public static string MakeMemberNotStatic_Text { get; }
    public static string MakeMember_OfModule_Exported_Text { get; }
    public static string MakeScopeContaining_ExportedToTheSame_Text { get; }
    public static string MakeMemberPublic_Text { get; }
    public static string MakeSignatureReturnVoid_Text { get; }
    public static string MergeVariablesAndUseAny_Text { get; }
    public static string MoveClassDeclarationUpper_Text { get; }
    public static string MoveFunctionStatementUpper_Text { get; }
    public static string MoveImportToExternalModuleScopeChanges_Text { get; }
    public static string MoveIntoSeparateGlobalFile_Text { get; }
    public static string AddAngleBrackets_Text { get; }
    public static string CreateOverload_Text { get; }
    public static string CastParameterToAny_Text { get; }
    public static string CreateConstructorWithProvidedParameters_Text { get; }
    public static string GenerateArgumentStubs_Text { get; }
    public static string RemoveTypeConstraintFromDeclaration_Text { get; }
    public static string RemoveFileExtensionFromPath_Text { get; }
    public static string RemoveReturnedValue_Text { get; }
    public static string RemoveReturnStatement_Text { get; }
    public static string RemoveTypeAnnotation_Text { get; }
    public static string RemoveTypeArguments_Text { get; }
    public static string RemoveTypeParameterConstraint_Text { get; }
    public static string RenamingConflictingDeclaration_Text { get; }
    public static string AddFunctionBody_Text { get; }
    public static string AddTypeAnnotation_Text { get; }
    public static string AddInitializer_Text { get; }
    public static string AddMemberBody_Text { get; }
    public static string AddRequiredDeclareModifier_Text { get; }
    public static string ChangeToQuestionMark_Text { get; }
    public static string ChangeToECMAScript6ExportDefault_Text { get; }
    public static string ProcessingFiles_Text { get; }
    public static string ConvertAllObsoleteConstructsToECMAScript_Text { get; }
    public static string ConvertToECMAScript6ImportStatement_Text { get; }
    public static string ReplaceWithNamedProperty_Text { get; }
    public static string DeclareModuleAsAmbient_Text { get; }
    public static string UseExportKeywordOnTargetInsteadOfUsing_Text { get; }
    public static string MakeAllOverloadsNonStatic_Text { get; }
    public static string MakeAllOverloadsStatic_Text { get; }
    public static string MakeAllOverloadsPrivate_Text { get; }
    public static string MakeAllOverloadsPublic_Text { get; }
    public static string RemoveAllAccessibilityModifiers_Text { get; }
    public static string TryToJoinValuesAsString_Text { get; }
    public static string AddQuotes_Text { get; }
    public static string CannotConvertValueToStringLiteral_Text { get; }
    public static string FlipClausesToBeInTheRightOrder_Text { get; }
    public static string FixTypeAnnotation_Text { get; }
    public static string MakeAllFurtherParametersStartingFrom_Text { get; }
    public static string MoveRestParameterToTheEnd_Text { get; }
    public static string MergeImplementsClauses_Text { get; }
    public static string RemoveAmbientFunctionBody_Text { get; }
    public static string RemoveInitializer_Text { get; }
    public static string RemoveAmbientMemberBody_Text { get; }
    public static string RemoveDuplicatedModifier_Text { get; }
    public static string RemoveDuplicatedExtendsClause_Text { get; }
    public static string RemoveDuplicatedDirective_Text { get; }
    public static string RemoveQuestionMark_Text { get; }
    public static string RemoveModuleNameQuotes_Text { get; }
    public static string RemoveStatement_Text { get; }
    public static string RemoveUnneededTypeSpecializer_Text { get; }
    public static string RemoveTypeParameters_Text { get; }
    public static string RemoveUnexpectedModifier_Text { get; }
    public static string RemoveUnneededDeclare_Text { get; }
    public static string RemoveTypeParametersList_Text { get; }
    public static string RemoveUnneededInitializer_Text { get; }
    public static string MakeParameterNonOptional_Text { get; }
    public static string RenameFunctionOverloadProperly_Text { get; }
    public static string RenameClashing__Text { get; }
    public static string ReorderModifiersProperly_Text { get; }
    public static string UnrestifyParameter_Text { get; }
    public static string ChangeToBoolean_Text { get; }
    public static string ChangeToExtends_Text { get; }
    public static string RemoveQuestionMarkOnPrecedingOptional_Text { get; }
    public static string UnrestifyPrecedingRestParameter_Text { get; }
    public static string UseType_ForTheReturnTypeOf_IndexerIn_Text { get; }
    public static string AddBlock_Text { get; }
    public static string AddParenthesesToMakeItObjectLiteral_Text { get; }
    public static string AddParentheses_Text { get; }
    public static string ChangeLanguageLevelToExperimental_Text { get; }
    public static string ChangeLanguageLevelToECMAScript2016_Text { get; }
    public static string ChangeLanguageLevelToECMAScript2015_Text { get; }
    public static string ConvertParameterToLocalVariable_Text { get; }
    public static string MakeVariable_Constant_Text { get; }
    public static string MakeVariable_BlockScope_Text { get; }
    public static string MakeAllVariablesFromThisListConstant_Text { get; }
    public static string MakeAllVariablesFromThisListBlockScope_Text { get; }
    public static string CorrectVariableKinds_Text { get; }
    public static string DeclareVariableForThis_InTheOuterScope_Text { get; }
    public static string DeclareLocalVariable__Text { get; }
    public static string Specify_QualifierExplicitly_Text { get; }
    public static string InlineRedundantTemporaryVariable_Text { get; }
    public static string JoinBothLinesIntoASingleStatement_Text { get; }
    public static string MakeSuperCallTheFirstStatement_Text { get; }
    public static string MoveVariable_ToInnerBlock_Text { get; }
    public static string MoveAllVariablesToNarrowerBlocks_Text { get; }
    public static string MoveTripleSlashCommentToTheTopOfThe_Text { get; }
    public static string NormalizeLocalDeclarations_Text { get; }
    public static string RemoveParameters_Text { get; }
    public static string AddParameterNamedValue_Text { get; }
    public static string RemoveAllParametersExcept__Text { get; }
    public static string QuotePropertyName_Text { get; }
    public static string RemoveRedundantDoubleNegation_Text { get; }
    public static string RemoveDuplicatingFunctionUnderCursor_Text { get; }
    public static string RemoveRedundantAssignment_Text { get; }
    public static string RemoveRedundantBlock_Text { get; }
    public static string RemoveRedundantElseBlock_Text { get; }
    public static string RemoveRedundantFinally_Text { get; }
    public static string RemoveRedundantLocalFunctionName_Text { get; }
    public static string RemoveRedundantLocalClassName_Text { get; }
    public static string RemoveTrailingElidedElements_Text { get; }
    public static string RemoveUnreachableCode_Text { get; }
    public static string RemoveUnsafeComma_Text { get; }
    public static string RemoveUnusedFunction_Text { get; }
    public static string RemoveUnusedClass_Text { get; }
    public static string RemoveParameter_Text { get; }
    public static string RemoveUnusedVariable_Text { get; }
    public static string Rename___Text { get; }
    public static string Rename_Text { get; }
    public static string ReplaceAssignmentWithEquality_Text { get; }
    public static string ReplaceWithStrictOperator__Text { get; }
    public static string RemoveNewKeyword_Text { get; }
    public static string ReplaceWithNegatedValue_Text { get; }
    public static string ReplaceWithExactValue_Text { get; }
    public static string ReplaceTernaryWithItsNegatedCondition_Text { get; }
    public static string ReplaceTernaryWithItsCondition_Text { get; }
    public static string ReplaceWithDestructuringAndShortHand_Text { get; }
    public static string ReplaceWithDestructuringDeclaration_Text { get; }
    public static string ReplaceWithDestructuringAssignment_Text { get; }
    public static string ReplaceWithDestructuringSwap_Text { get; }
    public static string ReplaceWithSingleBranch_Text { get; }
    public static string AddValue_Text { get; }
    public static string ExplicitlySpecifyElidedTrailingElementsAsNull_Text { get; }
    public static string ExplicitlySpecifyElidedTrailingElementsAsUndefined_Text { get; }
    public static string TerminateAllUnterminatedStatementsIn_Text { get; }
    public static string TerminateAllUnterminatedStatements_Text { get; }
    public static string SurroundForInBodyWithHasOwnProperty_Text { get; }
    public static string SurroundWithToIgnore_Text { get; }
    public static string FixValue_Text { get; }
    public static string DeclareAmbientVariableUsingDeclareKeyword_Text { get; }
    public static string EscapeAtCharacterBy_Text { get; }
    public static string PrependAtSignToRenderReturnValue_Text { get; }
    public static string EncloseBlockStatement_Text { get; }
    public static string ConvertRazorBlockMarkupToLineMarkup_Text { get; }
    public static string ConvertRazorLineMarkupToBlockMarkup_Text { get; }
    public static string CreateViewComponentView__Text { get; }
    public static string CreateView_WithLayout_Text { get; }
    public static string CreateRazorViews_Text { get; }
    public static string RazorReservedKeywordQuickFix_Text { get; }
    public static string RemoveAtSignCharacter_Text { get; }
    public static string ExecuteExpressionWithoutRendering_Text { get; }
    public static string RemoveTag__Text { get; }
    public static string RemoveAllUnusedTagsAndAttributes_Text { get; }
    public static string Make_Public_Text { get; }
    public static string ChangeViewModelTypeTo__Text { get; }
    public static string AddModuleQualification_Text { get; }
    public static string InlineConfigSourceAttribute_Text { get; }
    public static string MakePathAbsolute_Text { get; }
    public static string FixModuleQualification_Text { get; }
    public static string ImportType__Text { get; }
    public static string RemoveDeclaration_Text { get; }
    public static string RemoveValue_Text { get; }
    public static string RemoveRedundant__Text { get; }
    public static string RemoveUnused__Text { get; }
    public static string AddAttributesForImageDimensionsContextAction_Description { get; }
    public static string AddAttributesForImageDimensionsContextAction_Name { get; }
    public static string AddBracesContextAction_Description { get; }
    public static string AddBracesContextAction_Name { get; }
    public static string AddCodeBehindFileContextAction_Description { get; }
    public static string AddCodeBehindFileContextAction_Name { get; }
    public static string AddJsDocCommentsContextAction_Description { get; }
    public static string AddJsDocCommentsContextAction_Name { get; }
    public static string AddParameterConstraintToMatchingParametersInRouteTemplatesContextAction_Description { get; }
    public static string AddParameterConstraintToMatchingParametersInRouteTemplatesContextAction_Name { get; }
    public static string AddParameterToControllerSRouteTemplateContextAction_Description { get; }
    public static string AddParameterToControllerSRouteTemplateContextAction_Name { get; }
    public static string AddParameterToMethodSRouteTemplateContextAction_Description { get; }
    public static string AddParameterToMethodSRouteTemplateContextAction_Name { get; }
    public static string AddParameterToMinimalAPIDeclarationRouteTemplateContextAction_Description { get; }
    public static string AddParameterToMinimalAPIDeclarationRouteTemplateContextAction_Name { get; }
    public static string AddUseStrictContextAction_Description { get; }
    public static string AddUseStrictContextAction_Name { get; }
    public static string AddXMLCommentReferenceContextAction_Description { get; }
    public static string AddXMLCommentReferenceContextAction_Name { get; }
    public static string AddXmlDocCommentsContextAction_Description { get; }
    public static string AddXmlDocCommentsContextAction_Name { get; }
    public static string ChangeVisibilityModifierContextAction_Description { get; }
    public static string ChangeVisibilityModifierContextAction_Name { get; }
    public static string CollapseEmptyTagContextAction_Description { get; }
    public static string CollapseEmptyTagContextAction_Name { get; }
    public static string ComputeConstantValueContextAction_Description { get; }
    public static string ComputeConstantValueContextAction_Name { get; }
    public static string ConvertBinToDecES6ContextAction_Description { get; }
    public static string ConvertBinToDecES6ContextAction_Name { get; }
    public static string ConvertConcatenationToTemplateStringContextAction_Description { get; }
    public static string ConvertConcatenationToTemplateStringContextAction_Name { get; }
    public static string ConvertFieldToParameterPropertyContextAction_Description { get; }
    public static string ConvertFieldToParameterPropertyContextAction_Name { get; }
    public static string ConvertHexColorToHslContextAction_Description { get; }
    public static string ConvertHexColorToHslContextAction_Name { get; }
    public static string ConvertHexColorToNamedContextAction_Description { get; }
    public static string ConvertHexColorToNamedContextAction_Name { get; }
    public static string ConvertHexColorToRgbContextAction_Description { get; }
    public static string ConvertHexColorToRgbContextAction_Name { get; }
    public static string ConvertHslToHexLiteralContextAction_Description { get; }
    public static string ConvertHslToHexLiteralContextAction_Name { get; }
    public static string ConvertHslToNamedFormContextAction_Description { get; }
    public static string ConvertHslToNamedFormContextAction_Name { get; }
    public static string ConvertHslToRgbContextAction_Description { get; }
    public static string ConvertHslToRgbContextAction_Name { get; }
    public static string ConvertHTMLEntityContextAction_Description { get; }
    public static string ConvertHTMLEntityContextAction_Name { get; }
    public static string ConvertIfStatementToTernaryExpressionContextAction_Description { get; }
    public static string ConvertIfStatementToTernaryExpressionContextAction_Name { get; }
    public static string ConvertIfToSwitchContextAction_Description { get; }
    public static string ConvertIfToSwitchContextAction_Name { get; }
    public static string ConvertIfToSwitchForEnumsContextAction_Description { get; }
    public static string ConvertIfToSwitchForEnumsContextAction_Name { get; }
    public static string ConvertMemberAssignedByALambdaExpressionToFunctionMemberContextAction_Description { get; }
    public static string ConvertMemberAssignedByALambdaExpressionToFunctionMemberContextAction_Name { get; }
    public static string ConvertNamedColorToHexFormContextAction_Description { get; }
    public static string ConvertNamedColorToHexFormContextAction_Name { get; }
    public static string ConvertNamedColorToHslContextAction_Description { get; }
    public static string ConvertNamedColorToHslContextAction_Name { get; }
    public static string ConvertNamedColorToRgbContextAction_Description { get; }
    public static string ConvertNamedColorToRgbContextAction_Name { get; }
    public static string ConvertObjectLiteralGetAccessorToSimplePropertyContextAction_Description { get; }
    public static string ConvertObjectLiteralGetAccessorToSimplePropertyContextAction_Name { get; }
    public static string ConvertObjectLiteralPropertyToAccessorsPairWithBackingFieldContextAction_Description { get; }
    public static string ConvertObjectLiteralPropertyToAccessorsPairWithBackingFieldContextAction_Name { get; }
    public static string ConvertObjectLiteralPropertyToGetAccessorContextAction_Description { get; }
    public static string ConvertObjectLiteralPropertyToGetAccessorContextAction_Name { get; }
    public static string ConvertOctToDecES6ContextAction_Description { get; }
    public static string ConvertOctToDecES6ContextAction_Name { get; }
    public static string ConvertParameterPropertyToFieldContextAction_Description { get; }
    public static string ConvertParameterPropertyToFieldContextAction_Name { get; }
    public static string ConvertPropertyAssignmentInConstructorsToAccessorPropertyDefinitionWithBackingFieldContextAction_Description { get; }
    public static string ConvertPropertyAssignmentInConstructorsToAccessorPropertyDefinitionWithBackingFieldContextAction_Name { get; }
    public static string ConvertPropertyAssignmentInConstructorsToDataPropertyDefinitionContextAction_Description { get; }
    public static string ConvertPropertyAssignmentInConstructorsToDataPropertyDefinitionContextAction_Name { get; }
    public static string ConvertPropertyAssignmentInConstructorsToGetAccessorPropertyDefinitionContextAction_Description { get; }
    public static string ConvertPropertyAssignmentInConstructorsToGetAccessorPropertyDefinitionContextAction_Name { get; }
    public static string ConvertRazorBlockMarkupToLineMarkupContextAction_Description { get; }
    public static string ConvertRazorBlockMarkupToLineMarkupContextAction_Name { get; }
    public static string ConvertRazorLineMarkupToBlockMarkupContextAction_Description { get; }
    public static string ConvertRazorLineMarkupToBlockMarkupContextAction_Name { get; }
    public static string ConvertRgbToHexLiteralContextAction_Description { get; }
    public static string ConvertRgbToHexLiteralContextAction_Name { get; }
    public static string ConvertRgbToHslContextAction_Description { get; }
    public static string ConvertRgbToHslContextAction_Name { get; }
    public static string ConvertRgbToNamedFormContextAction_Description { get; }
    public static string ConvertRgbToNamedFormContextAction_Name { get; }
    public static string ConvertsExpressionLambdaToBlockLambdaWithReturnContextAction_Description { get; }
    public static string ConvertsExpressionLambdaToBlockLambdaWithReturnContextAction_Name { get; }
    public static string ConvertsSingleReturnBlockLambdaToExpressionContextAction_Description { get; }
    public static string ConvertsSingleReturnBlockLambdaToExpressionContextAction_Name { get; }
    public static string ConvertTagContextAction_Description { get; }
    public static string ConvertTagContextAction_Name { get; }
    public static string ConvertTernaryExpressionToIfStatementContextAction_Description { get; }
    public static string ConvertTernaryExpressionToIfStatementContextAction_Name { get; }
    public static string ConvertToBinES6ContextAction_Description { get; }
    public static string ConvertToBinES6ContextAction_Name { get; }
    public static string ConvertToDecFromHexContextAction_Description { get; }
    public static string ConvertToDecFromOctContextAction_Description { get; }
    public static string ConvertToDecFromHexContextAction_Name { get; }
    public static string ConvertToDecFromOctContextAction_Name { get; }
    public static string ConvertToHexContextAction_Description { get; }
    public static string ConvertToHexContextAction_Name { get; }
    public static string ConvertToOctContextAction_Description { get; }
    public static string ConvertToOctContextAction_Name { get; }
    public static string CreateDerivedTypeContextAction_Description { get; }
    public static string CreateDerivedTypeContextAction_Name { get; }
    public static string CreateEventContextAction_Description { get; }
    public static string CreateEventContextAction_Name { get; }
    public static string CreatePropertyFromUsageContextAction_Description { get; }
    public static string CreateTypeFromUsageContextAction_Name { get; }
    public static string CreateTypeFromUsageContextAction_Description { get; }
    public static string CreateMethodContextAction_Description { get; }
    public static string CreateMethodContextAction_Name { get; }
    public static string CreateObjectDataSourceSMethodContextAction_Description { get; }
    public static string CreateObjectDataSourceSMethodContextAction_Name { get; }
    public static string CreateOverloadWithoutParameterContextAction_Description { get; }
    public static string CreateOverloadWithoutParameterContextAction_Name { get; }
    public static string CreatePairedAccessorContextAction_Description { get; }
    public static string CreatePairedAccessorContextAction_Name { get; }
    public static string CreatePropertyFromAttributeContextAction_Description { get; }
    public static string CreatePropertyFromAttributeContextAction_Name { get; }
    public static string CreatePropertyFromSubPropertyContextAction_Description { get; }
    public static string CreatePropertyFromSubPropertyContextAction_Name { get; }
    public static string DeleteCommentContextAction_Description { get; }
    public static string DeleteCommentContextAction_Name { get; }
    public static string DottedNameToNestedModuleContextAction_Description { get; }
    public static string DottedNameToNestedModuleContextAction_Name { get; }
    public static string EditPathMappingContextAction_Description { get; }
    public static string EditPathMappingContextAction_Name { get; }
    public static string ExpandEmptyTagContextAction_Description { get; }
    public static string ExpandEmptyTagContextAction_Name { get; }
    public static string FlipOperatorArgumentsContextAction_Description { get; }
    public static string FlipOperatorArgumentsContextAction_Name { get; }
    public static string FlipRelationalExpressionContextAction_Description { get; }
    public static string FlipRelationalExpressionContextAction_Name { get; }
    public static string ImportTypeContextAction_Description { get; }
    public static string ImportTypeContextAction_Name { get; }
    public static string ImportTypeOrTypeElementContextAction_Description { get; }
    public static string ImportTypeOrTypeElementContextAction_Name { get; }
    public static string InlineConfigSourceAttributeContextAction_Description { get; }
    public static string InlineConfigSourceAttributeContextAction_Name { get; }
    public static string InlineTypeAliasContextAction_Description { get; }
    public static string InlineTypeAliasContextAction_Name { get; }
    public static string InsertTableColumnAfterContextAction_Description { get; }
    public static string InsertTableColumnAfterContextAction_Name { get; }
    public static string InsertTableColumnBeforeContextAction_Description { get; }
    public static string InsertTableColumnBeforeContextAction_Name { get; }
    public static string InsertTableRowAfterContextAction_Description { get; }
    public static string InsertTableRowAfterContextAction_Name { get; }
    public static string InsertTableRowBeforeContextAction_Description { get; }
    public static string InsertTableRowBeforeContextAction_Name { get; }
    public static string IntroduceTypeAliasContextAction_Description { get; }
    public static string IntroduceTypeAliasContextAction_Name { get; }
    public static string IntroduceVariableFromExpressionStatementContextAction_Description { get; }
    public static string IntroduceVariableFromExpressionStatementContextAction_Name { get; }
    public static string InvertIfStatementContextAction_Description { get; }
    public static string InvertIfStatementContextAction_Name { get; }
    public static string InvertTernaryConditionContextAction_Description { get; }
    public static string InvertTernaryConditionContextAction_Name { get; }
    public static string JoinLocalVariableDeclarationAndAssignmentContextAction_Description { get; }
    public static string JoinLocalVariableDeclarationAndAssignmentContextAction_Name { get; }
    public static string JoinStringLiteralsContextAction_Description { get; }
    public static string JoinStringLiteralsContextAction_Name { get; }
    public static string MatchFileNameWithTypeNameContextAction_Description { get; }
    public static string MatchFileNameWithTypeNameContextAction_Name { get; }
    public static string MergeNestedIfStatementsContextAction_Description { get; }
    public static string MergeNestedIfStatementsContextAction_Name { get; }
    public static string MergeServerScriptsContentContextAction_Description { get; }
    public static string MergeServerScriptsContentContextAction_Name { get; }
    public static string MergeTwoIfStatementsContextAction_Description { get; }
    public static string MergeTwoIfStatementsContextAction_Name { get; }
    public static string MoveServerScriptContentToCodebehindContextAction_Description { get; }
    public static string MoveServerScriptContentToCodebehindContextAction_Name { get; }
    public static string MoveTypeToAnotherFileToMatchItsNameContextAction_Description { get; }
    public static string MoveTypeToAnotherFileToMatchItsNameContextAction_Name { get; }
    public static string NegateLogicalExpressionContextAction_Description { get; }
    public static string NegateLogicalExpressionContextAction_Name { get; }
    public static string NestedModuleToDottedNameContextAction_Description { get; }
    public static string NestedModuleToDottedNameContextAction_Name { get; }
    public static string RemoveBracesContextAction_Description { get; }
    public static string RemoveBracesContextAction_Name { get; }
    public static string RemoveCodeBehindFileContextAction_Description { get; }
    public static string RemoveCodeBehindFileContextAction_Name { get; }
    public static string RemoveDirectiveAttributeContextAction_Description { get; }
    public static string RemoveDirectiveAttributeContextAction_Name { get; }
    public static string RemoveRedundantParenthesisContextAction_Description { get; }
    public static string RemoveRedundantParenthesisContextAction_Name { get; }
    public static string RemoveTagAttributeContextAction_Description { get; }
    public static string RemoveTagAttributeContextAction_Name { get; }
    public static string RemoveTagContextAction_Description { get; }
    public static string RemoveTagContextAction_Name { get; }
    public static string ReorderDirectiveAttributesContextAction_Description { get; }
    public static string ReorderDirectiveAttributesContextAction_Name { get; }
    public static string ReorderTagAttributesContextAction_Description { get; }
    public static string ReorderTagAttributesContextAction_Name { get; }
    public static string ReplaceAliasWithQualifierContextAction_Description { get; }
    public static string ReplaceAliasWithQualifierContextAction_Name { get; }
    public static string ReplaceAllTagsContextAction_Description { get; }
    public static string ReplaceAllTagsContextAction_Name { get; }
    public static string ReplaceLogicalExpressionWithEqualExpressionContextAction_Description { get; }
    public static string ReplaceLogicalExpressionWithEqualExpressionContextAction_Name { get; }
    public static string ReplaceSingleQuotedStringLiteralWithDoubleQuotedContextAction_Description { get; }
    public static string ReplaceSingleQuotedStringLiteralWithDoubleQuotedContextAction_Name { get; }
    public static string ReplaceTagContextAction_Description { get; }
    public static string ReplaceTagContextAction_Name { get; }
    public static string ReplaceVarWithItsFallbackValueContextAction_Description { get; }
    public static string ReplaceVarWithItsFallbackValueContextAction_Name { get; }
    public static string ReverseAssignmentStatementContextAction_Description { get; }
    public static string ReverseAssignmentStatementContextAction_Name { get; }
    public static string SortJSONPropertiesContextAction_Description { get; }
    public static string SortJSONPropertiesContextAction_Name { get; }
    public static string SpecifyReturnTypeExplicitlyContextAction_Description { get; }
    public static string SpecifyReturnTypeExplicitlyContextAction_Name { get; }
    public static string SpecifyTypeExplicitlyContextAction_Description { get; }
    public static string SpecifyTypeExplicitlyContextAction_Name { get; }
    public static string SplitIfWithConditionIntoNestedIfStatementsContextAction_Description { get; }
    public static string SplitIfWithConditionIntoNestedIfStatementsContextAction_Name { get; }
    public static string SplitIfWithConditionIntoTwoIfStatementsContextAction_Description { get; }
    public static string SplitIfWithConditionIntoTwoIfStatementsContextAction_Name { get; }
    public static string SplitIntoSeparateDeclarationsContextAction_Description { get; }
    public static string SplitIntoSeparateDeclarationsContextAction_Name { get; }
    public static string SplitReturnStatementOfBooleanValueToIfStatementContextAction_Description { get; }
    public static string SplitReturnStatementOfBooleanValueToIfStatementContextAction_Name { get; }
    public static string SplitReturnWithConditionIntoAssignmentToTemporaryVariableContextAction_Description { get; }
    public static string SplitReturnWithConditionIntoAssignmentToTemporaryVariableContextAction_Name { get; }
    public static string SplitReturnWithConditionIntoGuardingIfAndReturnContextAction_Description { get; }
    public static string SplitReturnWithConditionIntoGuardingIfAndReturnContextAction_Name { get; }
    public static string SplitVariableDeclarationAndAssignmentContextAction_Description { get; }
    public static string SplitVariableDeclarationAndAssignmentContextAction_Name { get; }
    public static string ToLINQToJSONContextAction_Description { get; }
    public static string ToLINQToJSONContextAction_Name { get; }
    public static string UncommentContextAction_Description { get; }
    public static string UncommentContextAction_Name { get; }
    public static string CodeLayout_Text { get; }
    public static string BlankLines_Text { get; }
    public static string Other_Text { get; }
    public static string Selector_Text { get; }
    public static string AttributeSelector_Text { get; }
    public static string MediaQuery_Text { get; }
    public static string Property_Text { get; }
    public static string Function_Text { get; }
    public static string Expression_Text { get; }
    public static string TsCreateFromUsageAction_ModuleElement { get; }
    public static string TsCreateFromUsageAction_Class { get; }
    public static string TsCreateFromUsageAction_DefaultText { get; }
    public static string TsCreateFromUsageAction_ExternalScopeText { get; }
    public static string TsCreateFromUsageAction_InModuleText { get; }
    public static string TsCreateFromUsageAction_InExternalModuleText { get; }
    public static string AddExplicitAnyAnnotationFix_CastText { get; }
    public static string AddExplicitAnyAnnotationFix_SpecifyText { get; }
    public static string CastToPrimitiveFix_AdditionalInfo { get; }
    public static string CastToPrimitiveFix_Text { get; }
    public static string SurroundWithTypeGuard_SurroundWith { get; }
    public static string SurroundWithTypeGuard_PrefixWith { get; }
    public static string TypeRelationProblemFixes_ParentText { get; }
    public static string AddSingleOverloadAction_Text { get; }
    public static string ChangeModifierAction_Text { get; }
    public static string ChangeOptionalityAction_Text { get; }
    public static string FixParameterTypeAction_Text { get; }
    public static string FixReturnTypeAction_Text { get; }
    public static string UseBaseCommonTypeAction_Text { get; }
    public static string CSSFiles_Text { get; }
    public static string LineBreaks_Text { get; }
    public static string Spaces_Text { get; }
    public static string RazorMoveToCodeBehindContextAction_Name { get; }
    public static string RazorMoveToCodeBehindContextAction_Description { get; }
    public static string MoveBlockToCodeBehind_Text { get; }
    public static string RazorNullConditionalOperatorQuickFix_Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_CodeCleanupTask_CssAlphabetizeProperties();
    public static string get_CodeCleanupTask_CssReformatCode();
    public static string get_AlphabetizeProperties_Name_Sort_CSS_properties();
    public static string get_ReformatCode_Name_Reformat_CSS();
    public static string get_Typescriptify_Text();
    public static string get_AddConstraint_ToMatchingParametersIn_Text();
    public static string get_AddParameterToControllerSRouteTemplate_Text();
    public static string get_AddParameterToMethodSRouteTemplate_Text();
    public static string get_AddParameterToRouteTemplate_Text();
    public static string get_AddConstraint_ToRouteParameter_Text();
    public static string get_ChangeTypeTo_ToSatisfyConstraint__Text();
    public static string get_ChangeTypeTo_ToSatisfyAllRouteConstraints_Text();
    public static string get_AddParameter__Text();
    public static string get_AddMissingParametersFromRouteTemplate_Text();
    public static string get_AddParameter_ToMethodsThatDonTHaveIt_Text();
    public static string get_Replace_With__Text();
    public static string get_Extract_ToControllerSRouteTemplates_Text();
    public static string get_Extract_ToControllerSRouteTemplate_Text();
    public static string get_AddCodeBehindFile_Text();
    public static string get_UnsupportedCodeBehindLanguage_Text();
    public static string get_AddMissingAttributesForImageDimensions_Text();
    public static string get_ConvertToASPNETTag_Text();
    public static string get_ConvertToHTMLTag_Text();
    public static string get_MergeServerScriptsContent_Text();
    public static string get_RemoveCodeBehindFile_Text();
    public static string get_FixAttributeValue_Text();
    public static string get_ChangeSignatureOf__Text();
    public static string get_AddCodeBehindFile__Text();
    public static string get_AddInheritsAttribute_Text();
    public static string get_DeleteCodeFileAttribute_Text();
    public static string get_CreateMissingAttribute__Text();
    public static string get_CreateContentPlaceHolder_Text();
    public static string get_TreatPageParserFilterTypeAs__Text();
    public static string get_UseCorrectImageSize_Text();
    public static string get_OptimizeRegisterDirectives_Text();
    public static string get_AddRunatServerAttribute_Text();
    public static string get_ConvertTagToAttribute_Text();
    public static string get_ImportControl_Text();
    public static string get_ImportType_Text();
    public static string get_CreateAction__Text();
    public static string get_CreateController_AndAction__Text();
    public static string get_CreateController__Text();
    public static string get_CreateViewComponent__Text();
    public static string get_CanTCreateView_Text();
    public static string get_GeneratingFileAlreadyExists_Text();
    public static string get_ToLINQToJSON_Text();
    public static string get_ConvertColorToHsl_Text();
    public static string get_ConvertColorToNamedForm_Text();
    public static string get_ConvertColorToRgb_Text();
    public static string get_ConvertColorToHexLiteral_Text();
    public static string get_ConvertColorToHexForm_Text();
    public static string get_ReplaceVarWithItsFallbackValue_Text();
    public static string get_AnywhereInCSS_Text();
    public static string get_InCSSWhereStatementIsExpected_Text();
    public static string get_InCSSWhereExpressionIsExpected_Text();
    public static string get_CSSExpressions_Text();
    public static string get_CSSStatements_Text();
    public static string get_AddUnitOfMeasure_Text();
    public static string get_AddVendorSpecificProperties_Text();
    public static string get_ConvertToHSLA_Text();
    public static string get_ConvertToRGBA_Text();
    public static string get_CreateStyle__Text();
    public static string get_CreateFallbackColor_Text();
    public static string get_UseDoubleColonInsteadOf_Text();
    public static string get_UsePseudoSelectorNot_Text();
    public static string get_UseSingleColonInsteadOf_Text();
    public static string get_ExtractStyle_Text();
    public static string get_PutPropertyAfterVendorSpecificProperties_Text();
    public static string get_RemoveAlphaComponent_Text();
    public static string get_RemoveUnitOfMeasure_Text();
    public static string get_TurnOffBrowserCompatibility_Text();
    public static string get_GetMoreInfoOnBrowserSupportOf__Text();
    public static string get_FixParenthesesBracketsNesting_Text();
    public static string get_ExpandEmptyTag_Text();
    public static string get_MakeEmpty_Tag_Text();
    public static string get_Remove_Attribute_Text();
    public static string get_Remove_Tag_Text();
    public static string get_Remove_TagAndPromoteChild_Text();
    public static string get_Remove_TagAndPromoteChildren_Text();
    public static string get_ReorderAttributes_Text();
    public static string get_ReplaceAll_Tags_Text();
    public static string get_AddChangeQuotes_Text();
    public static string get_AddChangeQuotesEverywhere_Text();
    public static string get_ChangeNameTo__Text();
    public static string get_AddEndif_Text();
    public static string get_RemoveDeadCode_Text();
    public static string get_Close_Tag_Text();
    public static string get_CloseAllOpenTags_Text();
    public static string get_MakeTag_Empty_Text();
    public static string get_InsertClosingTag__Text();
    public static string get_PressEscapeToRemoveHighlighting_Text();
    public static string get_InsertTableColumnAfter_Text();
    public static string get_InsertTableColumnBefore_Text();
    public static string get_InsertTableRowAfter_Text();
    public static string get_InsertTableRowBefore_Text();
    public static string get_CreateMethod__Text();
    public static string get_CreateProperty__Text();
    public static string get_SortProperties_Text();
    public static string get_CreatePaired_Accessor_Text();
    public static string get_ChangeAnyToType_Text();
    public static string get_CreateDerivedType_Text();
    public static string get_CreateModule_InModule___Text();
    public static string get_CreateClass_InModule___Text();
    public static string get_Create_In___Text();
    public static string get_CreateOverloadWithoutParameter_Text();
    public static string get_ConvertToParameterProperty_Text();
    public static string get_InlineTypeAlias_Text();
    public static string get_IntroduceTypeAlias_Text();
    public static string get_MoveTo_Ts_Text();
    public static string get_MoveTypesToMatchingFiles_Text();
    public static string get_ConvertToClassField_Text();
    public static string get_RenameFileToMatchTypeName_Text();
    public static string get_File_AlreadyExists_Text();
    public static string get_ToNestedModule_Text();
    public static string get_ReplaceAlias_WithQualifier__Text();
    public static string get_ConvertToMemberFunction_Text();
    public static string get_ToDottedName_Text();
    public static string get_SpecifyReturnType_Explicitly_Text();
    public static string get_SpecifyType_Explicitly_Text();
    public static string get_AddBraces_Text();
    public static string get_AddXmlDocComments_Text();
    public static string get_AddJsDocComments_Text();
    public static string get_ComputeConstantValue_Text();
    public static string get_ConvertToTemplateString_Text();
    public static string get_CreateFunction__Text();
    public static string get_CreateVariable__Text();
    public static string get_AddingImportDeclarationWillChangeFile_Text();
    public static string get_AddingExportedStatementWillChangeFile_Text();
    public static string get_CannotGenerateMemberProbablyBecause_Text();
    public static string get_ConvertToHex_Text();
    public static string get_ConvertToBin_Text();
    public static string get_ConvertToOct_Text();
    public static string get_FlipOperands_Text();
    public static string get_Flip_Operands_Text();
    public static string get_Flip_OperatorTo__Text();
    public static string get_ConvertToSimpleProperty_Text();
    public static string get_ConvertToDec_Text();
    public static string get_MergeTwoIfS_Text();
    public static string get_ConvertToSwitchStatement_Text();
    public static string get_ConvertToOperator_Text();
    public static string get_IntroduceVariable_Text();
    public static string get_InvertIf_Text();
    public static string get_InvertCondition_Text();
    public static string get_JoinDeclarationAndAssignment_Text();
    public static string get_JoinStrings_Text();
    public static string get_ToBlockLambda_Text();
    public static string get_ToExpressionLambda_Text();
    public static string get_AddUseStrictStatement_Text();
    public static string get_NegateBooleanExpression_Text();
    public static string get_Negate_Expression_Text();
    public static string get_ToAccessorsWithBackingField_Text();
    public static string get_WrapToGetAccessor_Text();
    public static string get_RemoveBraces_Text();
    public static string get_RemoveRedundantParenthesis_Text();
    public static string get_ReplaceSingleQuotedStringWithDouble_Text();
    public static string get_ReplaceDoubleQuotedStringWithSingle_Text();
    public static string get_ReverseAssignment_Text();
    public static string get_SplitIntoTwoIfStatements_Text();
    public static string get_SplitIntoIfAndReturn_Text();
    public static string get_SplitDeclarationAndAssignment_Text();
    public static string get_SplitIntoSeparateDeclarations_Text();
    public static string get_SplitToIfStatement_Text();
    public static string get_ConvertToIfStatement_Text();
    public static string get_ToAccessorsDefinitionWithBackingField_Text();
    public static string get_ToDataPropertyDefinition_Text();
    public static string get_ToGetAccessorDefinition_Text();
    public static string get_ReplaceClassWithClassName_Text();
    public static string get_ReplaceForWithHtmlFor_Text();
    public static string get_AddExplicitNull_Text();
    public static string get_AddMissingComma_Text();
    public static string get_FixAllValidationIssues_Text();
    public static string get_AddProperty__Text();
    public static string get_RemoveProperty__Text();
    public static string get_ReplaceWithAllowedValue_Text();
    public static string get_FixValueType_Text();
    public static string get_RemoveInvalidConstruct_Text();
    public static string get_RemoveUnexpectedComma_Text();
    public static string get_FixPropertyName_Text();
    public static string get_FixJSONPropertyNames_Text();
    public static string get_ChangeAll__Text();
    public static string get_ChangeAllLocal__Text();
    public static string get_AddPublicModifier_Text();
    public static string get_RemovePublicModifier_Text();
    public static string get_FixPublicModifierPresence_Text();
    public static string get_FixRelativePathStyle_Text();
    public static string get_ChangeTypeScriptLevelTo__Text();
    public static string get_CreateSpecializedOverloadForParameter_Text();
    public static string get_AddReturnValue_Text();
    public static string get_UseAnyExplicitly_Text();
    public static string get_AddThisQualifier_Text();
    public static string get_ConvertCastToAsOperator_Text();
    public static string get_ConvertAllCastsToAsOperators_Text();
    public static string get_PushLessSpecificTypesToTheMainSignature_Text();
    public static string get_IntroduceAndInitializeField__Text();
    public static string get_InitializeField_FromParameter_Text();
    public static string get_AddAsAnOptionalParameterToTheMainSignature_Text();
    public static string get_AddMissingParameter_Text();
    public static string get_JoinImportDeclarations_Text();
    public static string get_MakeConstructorProtected_Text();
    public static string get_MakeFieldReadonly_Text();
    public static string get_ReferenceClassThisByIntroducingVariable_Text();
    public static string get_RemoveRedundantConstructor_Text();
    public static string get_RemoveRedundantParentTypeSpecification_Text();
    public static string get_RemoveRedundantQualifier_Text();
    public static string get_RemoveRedundantQualifiers_Text();
    public static string get_RemoveRedundantReferenceComment_Text();
    public static string get_OptimizeReferenceComments_Text();
    public static string get_RemoveRedundantTypeCast_Text();
    public static string get_RemoveUnusedImport_Text();
    public static string get_OptimizeImportStatements_Text();
    public static string get_RenameHidingTypeParameter_Text();
    public static string get_IntroduceVariableToApplyGuard_Text();
    public static string get_ReorderOverloadsProperly_Text();
    public static string get_ReorderPropertiesInACorrectInitialization_Text();
    public static string get_GenerateDeclarationSourceFile_DTsFor_Text();
    public static string get_GenerateDeclarationSourceFile_DTsForAllGlobalDynamicProperty_Text();
    public static string get_ImplementAbstractMember_Text();
    public static string get_ImplementMissingMembersAbstract_Text();
    public static string get_ImplementMissingMembers_Text();
    public static string get_ImplementMissingLiteralProperties_Text();
    public static string get_AddReferenceTo__Text();
    public static string get_AddReferenceTo__ShortText();
    public static string get_Import_AndAllOtherTypes_Text();
    public static string get_MakeClassAbstract_Text();
    public static string get_Remove__Text();
    public static string get_RemoveRedundantTypeSpecification_Text();
    public static string get_FixTypeExplicitness_Text();
    public static string get_AddReturnStatement_Text();
    public static string get_CannotApplyFixCannotFindBlockToWhich_Text();
    public static string get_MoveServerScriptContentToCodebehind_Text();
    public static string get_CreateType__Text();
    public static string get_UseControlFrom__Text();
    public static string get_CreatePartialView__Text();
    public static string get_CreateView_WithMasterpage_Text();
    public static string get_CreateView__Text();
    public static string get_CreateASPXViews_Text();
    public static string get_DisableAndRestoreWithComments_Text();
    public static string get_DisableOnceWithComment_Text();
    public static string get_Replace_Tag_Text();
    public static string get_AddNew_Text();
    public static string get_AddAnOwnTypeParameterNamed_ToTheMethod_Text();
    public static string get_AddThisQualifierToReferenceClassMember_Text();
    public static string get_AddRequiredSuperCall_Text();
    public static string get_CannotApplyFixCannotResolveBaseType_Text();
    public static string get_CastToAny_Text();
    public static string get_UnableToCreateCastExpression_Text();
    public static string get_UnableToCreateParenthesizedExpression_Text();
    public static string get_UnableToCreateInvocationExpression_Text();
    public static string get_UnableToCreateInvocationExpressionWith_Text();
    public static string get_CastTo__Text();
    public static string get_ChangeTypesOfBothAccessorsToTheSame_Text();
    public static string get_ChangeMemberVariable_TypeTo__Text();
    public static string get_ChangeVariable_TypeTo__Text();
    public static string get_UseNewArray__Text();
    public static string get_MakeAllOverloadsExported_Text();
    public static string get_MakeAllOverloadsNonExported_Text();
    public static string get_UseStaticQualifier_Text();
    public static string get_CannotApplyFixCannotDetermineTypeOf_Text();
    public static string get_IncludeFile_IntoProject___Text();
    public static string get_IncludeFile_IntoSolution__Text();
    public static string get_MakeBothAccessorsPrivate_Text();
    public static string get_MakeBothAccessorsProtected_Text();
    public static string get_MakeBothAccessorsPublic_Text();
    public static string get_RemoveAccessibilityModifiers_Text();
    public static string get_SetReturnTypeToAny_Text();
    public static string get_SetReturnTypeToVoid_Text();
    public static string get_MakeMemberNonStatic_Text();
    public static string get_CannotApplyFixProbablyTheActualType_Text();
    public static string get_MakeMemberStatic_Text();
    public static string get_MakeMemberNotStatic_Text();
    public static string get_MakeMember_OfModule_Exported_Text();
    public static string get_MakeScopeContaining_ExportedToTheSame_Text();
    public static string get_MakeMemberPublic_Text();
    public static string get_MakeSignatureReturnVoid_Text();
    public static string get_MergeVariablesAndUseAny_Text();
    public static string get_MoveClassDeclarationUpper_Text();
    public static string get_MoveFunctionStatementUpper_Text();
    public static string get_MoveImportToExternalModuleScopeChanges_Text();
    public static string get_MoveIntoSeparateGlobalFile_Text();
    public static string get_AddAngleBrackets_Text();
    public static string get_CreateOverload_Text();
    public static string get_CastParameterToAny_Text();
    public static string get_CreateConstructorWithProvidedParameters_Text();
    public static string get_GenerateArgumentStubs_Text();
    public static string get_RemoveTypeConstraintFromDeclaration_Text();
    public static string get_RemoveFileExtensionFromPath_Text();
    public static string get_RemoveReturnedValue_Text();
    public static string get_RemoveReturnStatement_Text();
    public static string get_RemoveTypeAnnotation_Text();
    public static string get_RemoveTypeArguments_Text();
    public static string get_RemoveTypeParameterConstraint_Text();
    public static string get_RenamingConflictingDeclaration_Text();
    public static string get_AddFunctionBody_Text();
    public static string get_AddTypeAnnotation_Text();
    public static string get_AddInitializer_Text();
    public static string get_AddMemberBody_Text();
    public static string get_AddRequiredDeclareModifier_Text();
    public static string get_ChangeToQuestionMark_Text();
    public static string get_ChangeToECMAScript6ExportDefault_Text();
    public static string get_ProcessingFiles_Text();
    public static string get_ConvertAllObsoleteConstructsToECMAScript_Text();
    public static string get_ConvertToECMAScript6ImportStatement_Text();
    public static string get_ReplaceWithNamedProperty_Text();
    public static string get_DeclareModuleAsAmbient_Text();
    public static string get_UseExportKeywordOnTargetInsteadOfUsing_Text();
    public static string get_MakeAllOverloadsNonStatic_Text();
    public static string get_MakeAllOverloadsStatic_Text();
    public static string get_MakeAllOverloadsPrivate_Text();
    public static string get_MakeAllOverloadsPublic_Text();
    public static string get_RemoveAllAccessibilityModifiers_Text();
    public static string get_TryToJoinValuesAsString_Text();
    public static string get_AddQuotes_Text();
    public static string get_CannotConvertValueToStringLiteral_Text();
    public static string get_FlipClausesToBeInTheRightOrder_Text();
    public static string get_FixTypeAnnotation_Text();
    public static string get_MakeAllFurtherParametersStartingFrom_Text();
    public static string get_MoveRestParameterToTheEnd_Text();
    public static string get_MergeImplementsClauses_Text();
    public static string get_RemoveAmbientFunctionBody_Text();
    public static string get_RemoveInitializer_Text();
    public static string get_RemoveAmbientMemberBody_Text();
    public static string get_RemoveDuplicatedModifier_Text();
    public static string get_RemoveDuplicatedExtendsClause_Text();
    public static string get_RemoveDuplicatedDirective_Text();
    public static string get_RemoveQuestionMark_Text();
    public static string get_RemoveModuleNameQuotes_Text();
    public static string get_RemoveStatement_Text();
    public static string get_RemoveUnneededTypeSpecializer_Text();
    public static string get_RemoveTypeParameters_Text();
    public static string get_RemoveUnexpectedModifier_Text();
    public static string get_RemoveUnneededDeclare_Text();
    public static string get_RemoveTypeParametersList_Text();
    public static string get_RemoveUnneededInitializer_Text();
    public static string get_MakeParameterNonOptional_Text();
    public static string get_RenameFunctionOverloadProperly_Text();
    public static string get_RenameClashing__Text();
    public static string get_ReorderModifiersProperly_Text();
    public static string get_UnrestifyParameter_Text();
    public static string get_ChangeToBoolean_Text();
    public static string get_ChangeToExtends_Text();
    public static string get_RemoveQuestionMarkOnPrecedingOptional_Text();
    public static string get_UnrestifyPrecedingRestParameter_Text();
    public static string get_UseType_ForTheReturnTypeOf_IndexerIn_Text();
    public static string get_AddBlock_Text();
    public static string get_AddParenthesesToMakeItObjectLiteral_Text();
    public static string get_AddParentheses_Text();
    public static string get_ChangeLanguageLevelToExperimental_Text();
    public static string get_ChangeLanguageLevelToECMAScript2016_Text();
    public static string get_ChangeLanguageLevelToECMAScript2015_Text();
    public static string get_ConvertParameterToLocalVariable_Text();
    public static string get_MakeVariable_Constant_Text();
    public static string get_MakeVariable_BlockScope_Text();
    public static string get_MakeAllVariablesFromThisListConstant_Text();
    public static string get_MakeAllVariablesFromThisListBlockScope_Text();
    public static string get_CorrectVariableKinds_Text();
    public static string get_DeclareVariableForThis_InTheOuterScope_Text();
    public static string get_DeclareLocalVariable__Text();
    public static string get_Specify_QualifierExplicitly_Text();
    public static string get_InlineRedundantTemporaryVariable_Text();
    public static string get_JoinBothLinesIntoASingleStatement_Text();
    public static string get_MakeSuperCallTheFirstStatement_Text();
    public static string get_MoveVariable_ToInnerBlock_Text();
    public static string get_MoveAllVariablesToNarrowerBlocks_Text();
    public static string get_MoveTripleSlashCommentToTheTopOfThe_Text();
    public static string get_NormalizeLocalDeclarations_Text();
    public static string get_RemoveParameters_Text();
    public static string get_AddParameterNamedValue_Text();
    public static string get_RemoveAllParametersExcept__Text();
    public static string get_QuotePropertyName_Text();
    public static string get_RemoveRedundantDoubleNegation_Text();
    public static string get_RemoveDuplicatingFunctionUnderCursor_Text();
    public static string get_RemoveRedundantAssignment_Text();
    public static string get_RemoveRedundantBlock_Text();
    public static string get_RemoveRedundantElseBlock_Text();
    public static string get_RemoveRedundantFinally_Text();
    public static string get_RemoveRedundantLocalFunctionName_Text();
    public static string get_RemoveRedundantLocalClassName_Text();
    public static string get_RemoveTrailingElidedElements_Text();
    public static string get_RemoveUnreachableCode_Text();
    public static string get_RemoveUnsafeComma_Text();
    public static string get_RemoveUnusedFunction_Text();
    public static string get_RemoveUnusedClass_Text();
    public static string get_RemoveParameter_Text();
    public static string get_RemoveUnusedVariable_Text();
    public static string get_Rename___Text();
    public static string get_Rename_Text();
    public static string get_ReplaceAssignmentWithEquality_Text();
    public static string get_ReplaceWithStrictOperator__Text();
    public static string get_RemoveNewKeyword_Text();
    public static string get_ReplaceWithNegatedValue_Text();
    public static string get_ReplaceWithExactValue_Text();
    public static string get_ReplaceTernaryWithItsNegatedCondition_Text();
    public static string get_ReplaceTernaryWithItsCondition_Text();
    public static string get_ReplaceWithDestructuringAndShortHand_Text();
    public static string get_ReplaceWithDestructuringDeclaration_Text();
    public static string get_ReplaceWithDestructuringAssignment_Text();
    public static string get_ReplaceWithDestructuringSwap_Text();
    public static string get_ReplaceWithSingleBranch_Text();
    public static string get_AddValue_Text();
    public static string get_ExplicitlySpecifyElidedTrailingElementsAsNull_Text();
    public static string get_ExplicitlySpecifyElidedTrailingElementsAsUndefined_Text();
    public static string get_TerminateAllUnterminatedStatementsIn_Text();
    public static string get_TerminateAllUnterminatedStatements_Text();
    public static string get_SurroundForInBodyWithHasOwnProperty_Text();
    public static string get_SurroundWithToIgnore_Text();
    public static string get_FixValue_Text();
    public static string get_DeclareAmbientVariableUsingDeclareKeyword_Text();
    public static string get_EscapeAtCharacterBy_Text();
    public static string get_PrependAtSignToRenderReturnValue_Text();
    public static string get_EncloseBlockStatement_Text();
    public static string get_ConvertRazorBlockMarkupToLineMarkup_Text();
    public static string get_ConvertRazorLineMarkupToBlockMarkup_Text();
    public static string get_CreateViewComponentView__Text();
    public static string get_CreateView_WithLayout_Text();
    public static string get_CreateRazorViews_Text();
    public static string get_RazorReservedKeywordQuickFix_Text();
    public static string get_RemoveAtSignCharacter_Text();
    public static string get_ExecuteExpressionWithoutRendering_Text();
    public static string get_RemoveTag__Text();
    public static string get_RemoveAllUnusedTagsAndAttributes_Text();
    public static string get_Make_Public_Text();
    public static string get_ChangeViewModelTypeTo__Text();
    public static string get_AddModuleQualification_Text();
    public static string get_InlineConfigSourceAttribute_Text();
    public static string get_MakePathAbsolute_Text();
    public static string get_FixModuleQualification_Text();
    public static string get_ImportType__Text();
    public static string get_RemoveDeclaration_Text();
    public static string get_RemoveValue_Text();
    public static string get_RemoveRedundant__Text();
    public static string get_RemoveUnused__Text();
    public static string get_AddAttributesForImageDimensionsContextAction_Description();
    public static string get_AddAttributesForImageDimensionsContextAction_Name();
    public static string get_AddBracesContextAction_Description();
    public static string get_AddBracesContextAction_Name();
    public static string get_AddCodeBehindFileContextAction_Description();
    public static string get_AddCodeBehindFileContextAction_Name();
    public static string get_AddJsDocCommentsContextAction_Description();
    public static string get_AddJsDocCommentsContextAction_Name();
    public static string get_AddParameterConstraintToMatchingParametersInRouteTemplatesContextAction_Description();
    public static string get_AddParameterConstraintToMatchingParametersInRouteTemplatesContextAction_Name();
    public static string get_AddParameterToControllerSRouteTemplateContextAction_Description();
    public static string get_AddParameterToControllerSRouteTemplateContextAction_Name();
    public static string get_AddParameterToMethodSRouteTemplateContextAction_Description();
    public static string get_AddParameterToMethodSRouteTemplateContextAction_Name();
    public static string get_AddParameterToMinimalAPIDeclarationRouteTemplateContextAction_Description();
    public static string get_AddParameterToMinimalAPIDeclarationRouteTemplateContextAction_Name();
    public static string get_AddUseStrictContextAction_Description();
    public static string get_AddUseStrictContextAction_Name();
    public static string get_AddXMLCommentReferenceContextAction_Description();
    public static string get_AddXMLCommentReferenceContextAction_Name();
    public static string get_AddXmlDocCommentsContextAction_Description();
    public static string get_AddXmlDocCommentsContextAction_Name();
    public static string get_ChangeVisibilityModifierContextAction_Description();
    public static string get_ChangeVisibilityModifierContextAction_Name();
    public static string get_CollapseEmptyTagContextAction_Description();
    public static string get_CollapseEmptyTagContextAction_Name();
    public static string get_ComputeConstantValueContextAction_Description();
    public static string get_ComputeConstantValueContextAction_Name();
    public static string get_ConvertBinToDecES6ContextAction_Description();
    public static string get_ConvertBinToDecES6ContextAction_Name();
    public static string get_ConvertConcatenationToTemplateStringContextAction_Description();
    public static string get_ConvertConcatenationToTemplateStringContextAction_Name();
    public static string get_ConvertFieldToParameterPropertyContextAction_Description();
    public static string get_ConvertFieldToParameterPropertyContextAction_Name();
    public static string get_ConvertHexColorToHslContextAction_Description();
    public static string get_ConvertHexColorToHslContextAction_Name();
    public static string get_ConvertHexColorToNamedContextAction_Description();
    public static string get_ConvertHexColorToNamedContextAction_Name();
    public static string get_ConvertHexColorToRgbContextAction_Description();
    public static string get_ConvertHexColorToRgbContextAction_Name();
    public static string get_ConvertHslToHexLiteralContextAction_Description();
    public static string get_ConvertHslToHexLiteralContextAction_Name();
    public static string get_ConvertHslToNamedFormContextAction_Description();
    public static string get_ConvertHslToNamedFormContextAction_Name();
    public static string get_ConvertHslToRgbContextAction_Description();
    public static string get_ConvertHslToRgbContextAction_Name();
    public static string get_ConvertHTMLEntityContextAction_Description();
    public static string get_ConvertHTMLEntityContextAction_Name();
    public static string get_ConvertIfStatementToTernaryExpressionContextAction_Description();
    public static string get_ConvertIfStatementToTernaryExpressionContextAction_Name();
    public static string get_ConvertIfToSwitchContextAction_Description();
    public static string get_ConvertIfToSwitchContextAction_Name();
    public static string get_ConvertIfToSwitchForEnumsContextAction_Description();
    public static string get_ConvertIfToSwitchForEnumsContextAction_Name();
    public static string get_ConvertMemberAssignedByALambdaExpressionToFunctionMemberContextAction_Description();
    public static string get_ConvertMemberAssignedByALambdaExpressionToFunctionMemberContextAction_Name();
    public static string get_ConvertNamedColorToHexFormContextAction_Description();
    public static string get_ConvertNamedColorToHexFormContextAction_Name();
    public static string get_ConvertNamedColorToHslContextAction_Description();
    public static string get_ConvertNamedColorToHslContextAction_Name();
    public static string get_ConvertNamedColorToRgbContextAction_Description();
    public static string get_ConvertNamedColorToRgbContextAction_Name();
    public static string get_ConvertObjectLiteralGetAccessorToSimplePropertyContextAction_Description();
    public static string get_ConvertObjectLiteralGetAccessorToSimplePropertyContextAction_Name();
    public static string get_ConvertObjectLiteralPropertyToAccessorsPairWithBackingFieldContextAction_Description();
    public static string get_ConvertObjectLiteralPropertyToAccessorsPairWithBackingFieldContextAction_Name();
    public static string get_ConvertObjectLiteralPropertyToGetAccessorContextAction_Description();
    public static string get_ConvertObjectLiteralPropertyToGetAccessorContextAction_Name();
    public static string get_ConvertOctToDecES6ContextAction_Description();
    public static string get_ConvertOctToDecES6ContextAction_Name();
    public static string get_ConvertParameterPropertyToFieldContextAction_Description();
    public static string get_ConvertParameterPropertyToFieldContextAction_Name();
    public static string get_ConvertPropertyAssignmentInConstructorsToAccessorPropertyDefinitionWithBackingFieldContextAction_Description();
    public static string get_ConvertPropertyAssignmentInConstructorsToAccessorPropertyDefinitionWithBackingFieldContextAction_Name();
    public static string get_ConvertPropertyAssignmentInConstructorsToDataPropertyDefinitionContextAction_Description();
    public static string get_ConvertPropertyAssignmentInConstructorsToDataPropertyDefinitionContextAction_Name();
    public static string get_ConvertPropertyAssignmentInConstructorsToGetAccessorPropertyDefinitionContextAction_Description();
    public static string get_ConvertPropertyAssignmentInConstructorsToGetAccessorPropertyDefinitionContextAction_Name();
    public static string get_ConvertRazorBlockMarkupToLineMarkupContextAction_Description();
    public static string get_ConvertRazorBlockMarkupToLineMarkupContextAction_Name();
    public static string get_ConvertRazorLineMarkupToBlockMarkupContextAction_Description();
    public static string get_ConvertRazorLineMarkupToBlockMarkupContextAction_Name();
    public static string get_ConvertRgbToHexLiteralContextAction_Description();
    public static string get_ConvertRgbToHexLiteralContextAction_Name();
    public static string get_ConvertRgbToHslContextAction_Description();
    public static string get_ConvertRgbToHslContextAction_Name();
    public static string get_ConvertRgbToNamedFormContextAction_Description();
    public static string get_ConvertRgbToNamedFormContextAction_Name();
    public static string get_ConvertsExpressionLambdaToBlockLambdaWithReturnContextAction_Description();
    public static string get_ConvertsExpressionLambdaToBlockLambdaWithReturnContextAction_Name();
    public static string get_ConvertsSingleReturnBlockLambdaToExpressionContextAction_Description();
    public static string get_ConvertsSingleReturnBlockLambdaToExpressionContextAction_Name();
    public static string get_ConvertTagContextAction_Description();
    public static string get_ConvertTagContextAction_Name();
    public static string get_ConvertTernaryExpressionToIfStatementContextAction_Description();
    public static string get_ConvertTernaryExpressionToIfStatementContextAction_Name();
    public static string get_ConvertToBinES6ContextAction_Description();
    public static string get_ConvertToBinES6ContextAction_Name();
    public static string get_ConvertToDecFromHexContextAction_Description();
    public static string get_ConvertToDecFromOctContextAction_Description();
    public static string get_ConvertToDecFromHexContextAction_Name();
    public static string get_ConvertToDecFromOctContextAction_Name();
    public static string get_ConvertToHexContextAction_Description();
    public static string get_ConvertToHexContextAction_Name();
    public static string get_ConvertToOctContextAction_Description();
    public static string get_ConvertToOctContextAction_Name();
    public static string get_CreateDerivedTypeContextAction_Description();
    public static string get_CreateDerivedTypeContextAction_Name();
    public static string get_CreateEventContextAction_Description();
    public static string get_CreateEventContextAction_Name();
    public static string get_CreatePropertyFromUsageContextAction_Description();
    public static string get_CreateTypeFromUsageContextAction_Name();
    public static string get_CreateTypeFromUsageContextAction_Description();
    public static string get_CreateMethodContextAction_Description();
    public static string get_CreateMethodContextAction_Name();
    public static string get_CreateObjectDataSourceSMethodContextAction_Description();
    public static string get_CreateObjectDataSourceSMethodContextAction_Name();
    public static string get_CreateOverloadWithoutParameterContextAction_Description();
    public static string get_CreateOverloadWithoutParameterContextAction_Name();
    public static string get_CreatePairedAccessorContextAction_Description();
    public static string get_CreatePairedAccessorContextAction_Name();
    public static string get_CreatePropertyFromAttributeContextAction_Description();
    public static string get_CreatePropertyFromAttributeContextAction_Name();
    public static string get_CreatePropertyFromSubPropertyContextAction_Description();
    public static string get_CreatePropertyFromSubPropertyContextAction_Name();
    public static string get_DeleteCommentContextAction_Description();
    public static string get_DeleteCommentContextAction_Name();
    public static string get_DottedNameToNestedModuleContextAction_Description();
    public static string get_DottedNameToNestedModuleContextAction_Name();
    public static string get_EditPathMappingContextAction_Description();
    public static string get_EditPathMappingContextAction_Name();
    public static string get_ExpandEmptyTagContextAction_Description();
    public static string get_ExpandEmptyTagContextAction_Name();
    public static string get_FlipOperatorArgumentsContextAction_Description();
    public static string get_FlipOperatorArgumentsContextAction_Name();
    public static string get_FlipRelationalExpressionContextAction_Description();
    public static string get_FlipRelationalExpressionContextAction_Name();
    public static string get_ImportTypeContextAction_Description();
    public static string get_ImportTypeContextAction_Name();
    public static string get_ImportTypeOrTypeElementContextAction_Description();
    public static string get_ImportTypeOrTypeElementContextAction_Name();
    public static string get_InlineConfigSourceAttributeContextAction_Description();
    public static string get_InlineConfigSourceAttributeContextAction_Name();
    public static string get_InlineTypeAliasContextAction_Description();
    public static string get_InlineTypeAliasContextAction_Name();
    public static string get_InsertTableColumnAfterContextAction_Description();
    public static string get_InsertTableColumnAfterContextAction_Name();
    public static string get_InsertTableColumnBeforeContextAction_Description();
    public static string get_InsertTableColumnBeforeContextAction_Name();
    public static string get_InsertTableRowAfterContextAction_Description();
    public static string get_InsertTableRowAfterContextAction_Name();
    public static string get_InsertTableRowBeforeContextAction_Description();
    public static string get_InsertTableRowBeforeContextAction_Name();
    public static string get_IntroduceTypeAliasContextAction_Description();
    public static string get_IntroduceTypeAliasContextAction_Name();
    public static string get_IntroduceVariableFromExpressionStatementContextAction_Description();
    public static string get_IntroduceVariableFromExpressionStatementContextAction_Name();
    public static string get_InvertIfStatementContextAction_Description();
    public static string get_InvertIfStatementContextAction_Name();
    public static string get_InvertTernaryConditionContextAction_Description();
    public static string get_InvertTernaryConditionContextAction_Name();
    public static string get_JoinLocalVariableDeclarationAndAssignmentContextAction_Description();
    public static string get_JoinLocalVariableDeclarationAndAssignmentContextAction_Name();
    public static string get_JoinStringLiteralsContextAction_Description();
    public static string get_JoinStringLiteralsContextAction_Name();
    public static string get_MatchFileNameWithTypeNameContextAction_Description();
    public static string get_MatchFileNameWithTypeNameContextAction_Name();
    public static string get_MergeNestedIfStatementsContextAction_Description();
    public static string get_MergeNestedIfStatementsContextAction_Name();
    public static string get_MergeServerScriptsContentContextAction_Description();
    public static string get_MergeServerScriptsContentContextAction_Name();
    public static string get_MergeTwoIfStatementsContextAction_Description();
    public static string get_MergeTwoIfStatementsContextAction_Name();
    public static string get_MoveServerScriptContentToCodebehindContextAction_Description();
    public static string get_MoveServerScriptContentToCodebehindContextAction_Name();
    public static string get_MoveTypeToAnotherFileToMatchItsNameContextAction_Description();
    public static string get_MoveTypeToAnotherFileToMatchItsNameContextAction_Name();
    public static string get_NegateLogicalExpressionContextAction_Description();
    public static string get_NegateLogicalExpressionContextAction_Name();
    public static string get_NestedModuleToDottedNameContextAction_Description();
    public static string get_NestedModuleToDottedNameContextAction_Name();
    public static string get_RemoveBracesContextAction_Description();
    public static string get_RemoveBracesContextAction_Name();
    public static string get_RemoveCodeBehindFileContextAction_Description();
    public static string get_RemoveCodeBehindFileContextAction_Name();
    public static string get_RemoveDirectiveAttributeContextAction_Description();
    public static string get_RemoveDirectiveAttributeContextAction_Name();
    public static string get_RemoveRedundantParenthesisContextAction_Description();
    public static string get_RemoveRedundantParenthesisContextAction_Name();
    public static string get_RemoveTagAttributeContextAction_Description();
    public static string get_RemoveTagAttributeContextAction_Name();
    public static string get_RemoveTagContextAction_Description();
    public static string get_RemoveTagContextAction_Name();
    public static string get_ReorderDirectiveAttributesContextAction_Description();
    public static string get_ReorderDirectiveAttributesContextAction_Name();
    public static string get_ReorderTagAttributesContextAction_Description();
    public static string get_ReorderTagAttributesContextAction_Name();
    public static string get_ReplaceAliasWithQualifierContextAction_Description();
    public static string get_ReplaceAliasWithQualifierContextAction_Name();
    public static string get_ReplaceAllTagsContextAction_Description();
    public static string get_ReplaceAllTagsContextAction_Name();
    public static string get_ReplaceLogicalExpressionWithEqualExpressionContextAction_Description();
    public static string get_ReplaceLogicalExpressionWithEqualExpressionContextAction_Name();
    public static string get_ReplaceSingleQuotedStringLiteralWithDoubleQuotedContextAction_Description();
    public static string get_ReplaceSingleQuotedStringLiteralWithDoubleQuotedContextAction_Name();
    public static string get_ReplaceTagContextAction_Description();
    public static string get_ReplaceTagContextAction_Name();
    public static string get_ReplaceVarWithItsFallbackValueContextAction_Description();
    public static string get_ReplaceVarWithItsFallbackValueContextAction_Name();
    public static string get_ReverseAssignmentStatementContextAction_Description();
    public static string get_ReverseAssignmentStatementContextAction_Name();
    public static string get_SortJSONPropertiesContextAction_Description();
    public static string get_SortJSONPropertiesContextAction_Name();
    public static string get_SpecifyReturnTypeExplicitlyContextAction_Description();
    public static string get_SpecifyReturnTypeExplicitlyContextAction_Name();
    public static string get_SpecifyTypeExplicitlyContextAction_Description();
    public static string get_SpecifyTypeExplicitlyContextAction_Name();
    public static string get_SplitIfWithConditionIntoNestedIfStatementsContextAction_Description();
    public static string get_SplitIfWithConditionIntoNestedIfStatementsContextAction_Name();
    public static string get_SplitIfWithConditionIntoTwoIfStatementsContextAction_Description();
    public static string get_SplitIfWithConditionIntoTwoIfStatementsContextAction_Name();
    public static string get_SplitIntoSeparateDeclarationsContextAction_Description();
    public static string get_SplitIntoSeparateDeclarationsContextAction_Name();
    public static string get_SplitReturnStatementOfBooleanValueToIfStatementContextAction_Description();
    public static string get_SplitReturnStatementOfBooleanValueToIfStatementContextAction_Name();
    public static string get_SplitReturnWithConditionIntoAssignmentToTemporaryVariableContextAction_Description();
    public static string get_SplitReturnWithConditionIntoAssignmentToTemporaryVariableContextAction_Name();
    public static string get_SplitReturnWithConditionIntoGuardingIfAndReturnContextAction_Description();
    public static string get_SplitReturnWithConditionIntoGuardingIfAndReturnContextAction_Name();
    public static string get_SplitVariableDeclarationAndAssignmentContextAction_Description();
    public static string get_SplitVariableDeclarationAndAssignmentContextAction_Name();
    public static string get_ToLINQToJSONContextAction_Description();
    public static string get_ToLINQToJSONContextAction_Name();
    public static string get_UncommentContextAction_Description();
    public static string get_UncommentContextAction_Name();
    public static string get_CodeLayout_Text();
    public static string get_BlankLines_Text();
    public static string get_Other_Text();
    public static string get_Selector_Text();
    public static string get_AttributeSelector_Text();
    public static string get_MediaQuery_Text();
    public static string get_Property_Text();
    public static string get_Function_Text();
    public static string get_Expression_Text();
    public static string get_TsCreateFromUsageAction_ModuleElement();
    public static string get_TsCreateFromUsageAction_Class();
    public static string get_TsCreateFromUsageAction_DefaultText();
    public static string get_TsCreateFromUsageAction_ExternalScopeText();
    public static string get_TsCreateFromUsageAction_InModuleText();
    public static string get_TsCreateFromUsageAction_InExternalModuleText();
    public static string get_AddExplicitAnyAnnotationFix_CastText();
    public static string get_AddExplicitAnyAnnotationFix_SpecifyText();
    public static string get_CastToPrimitiveFix_AdditionalInfo();
    public static string get_CastToPrimitiveFix_Text();
    public static string get_SurroundWithTypeGuard_SurroundWith();
    public static string get_SurroundWithTypeGuard_PrefixWith();
    public static string get_TypeRelationProblemFixes_ParentText();
    public static string get_AddSingleOverloadAction_Text();
    public static string get_ChangeModifierAction_Text();
    public static string get_ChangeOptionalityAction_Text();
    public static string get_FixParameterTypeAction_Text();
    public static string get_FixReturnTypeAction_Text();
    public static string get_UseBaseCommonTypeAction_Text();
    public static string get_CSSFiles_Text();
    public static string get_LineBreaks_Text();
    public static string get_Spaces_Text();
    public static string get_RazorMoveToCodeBehindContextAction_Name();
    public static string get_RazorMoveToCodeBehindContextAction_Description();
    public static string get_MoveBlockToCodeBehind_Text();
    public static string get_RazorNullConditionalOperatorQuickFix_Text();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Intentions.Web.ZoneMarker : object {
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.WebConfig.ContextActions.InlineConfigSourceAttributeContextAction : object {
    private IConfigSourceAttribute myConfigSourceAttribute;
    private IBulbAction myItem;
    public InlineConfigSourceAttributeContextAction(XmlContextActionDataProvider provider);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.WebConfig.ContextActions.RunPathMappingEditorContextAction : object {
    [NotNullAttribute]
private XmlContextActionDataProvider myDataProvider;
    [CanBeNullAttribute]
private IBulbAction[] myItems;
    public RunPathMappingEditorContextAction(XmlContextActionDataProvider dataProvider);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Web.WebConfig.WebConfigLanguage", "16")]
public class JetBrains.ReSharper.Intentions.WebConfig.ContextActions.WebConfigContextActionProvider : XmlContextActionProvider {
}
[ContextActionGroupAttribute]
public static class JetBrains.ReSharper.Intentions.WebConfig.ContextActions.WebConfigContextActions : object {
    public static string GroupId;
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.WebConfig.QuickFixes.AddModuleQualificationQuickFix : WebConfigQuickFixBase {
    private IWebConfigTypeAttribute myAttribute;
    private IWebTypeReference myTypeReference;
    public string Text { get; }
    public AddModuleQualificationQuickFix(ModuleQualificationMissingError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private IPsiModule GetPsiModule();
    protected virtual void ExecuteInternal(ISolution solution, ITextControl textControl);
}
public class JetBrains.ReSharper.Intentions.WebConfig.QuickFixes.ConfigSource.InlineConfigSourceBulbItem : RemoveAttributeBulbItem`1<IConfigSourceAttribute> {
    public IWebConfigTag ResolvedTag;
    public string Text { get; }
    public InlineConfigSourceBulbItem(IConfigSourceAttribute configSourceAttribute);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.WebConfig.QuickFixes.ConfigSource.RemoveAttributeBulbItem`1 : BulbActionBase {
    protected T myAttribute;
    protected IWebConfigTag myTag;
    public string Text { get; }
    public RemoveAttributeBulbItem`1(T attrubute);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.WebConfig.QuickFixes.ConfigSource.RemoveTagBulbItem : BulbActionBase {
    protected IWebConfigTag myTag;
    protected IXmlTagContainer myTagContainer;
    public string Text { get; }
    public RemoveTagBulbItem(IWebConfigTag tag);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.WebConfig.QuickFixes.ConfigSource.RemoveUnusedElements : BulbActionBase {
    private List`1<IXmlAttribute> myUnusedAttributes;
    private List`1<IWebConfigTag> myUnusedTags;
    private IWebConfigTag myTag;
    public string Text { get; }
    public RemoveUnusedElements(List`1<IXmlAttribute> unusedAttributes, List`1<IWebConfigTag> unusedTags, IWebConfigTag tag);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
private void <ExecutePsiTransaction>b__6_0(IXmlAttribute attribute);
    [CompilerGeneratedAttribute]
private void <ExecutePsiTransaction>b__6_1(IWebConfigTag tag);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.WebConfig.QuickFixes.ConfigSource.WebConfigConfigSourceQuickFix : object {
    [CanBeNullAttribute]
private IXmlAttribute myUnusedAttribute;
    [CanBeNullAttribute]
private IWebConfigTag myUnusedTag;
    private IWebConfigTag myTag;
    private IConfigSourceAttribute myConfigSourceAttribute;
    private IBulbAction[] myItems;
    public IBulbAction[] Items { get; }
    public WebConfigConfigSourceQuickFix(ConfigSourceErrorHighlighting highlighting);
    public WebConfigConfigSourceQuickFix(UnusedElementDueToConfigSourceAttributeHighlighting highlighting);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public IBulbAction[] get_Items();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.WebConfig.QuickFixes.MakePathAbsoluteQuickFix : WebConfigQuickFixBase {
    private IXmlPathAttribute myAttribute;
    private IPathReference myPathReference;
    public string Text { get; }
    public MakePathAbsoluteQuickFix(PathIsRelativeErrorHighlighting errorHighlighting);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual void ExecuteInternal(ISolution solution, ITextControl textControl);
}
[QuickFixAttribute]
internal class JetBrains.ReSharper.Intentions.WebConfig.QuickFixes.ModuleQualificationQuickFix : WebConfigQuickFixBase {
    private ModuleQualificationReference myQualificationReference;
    private string FullTypeName;
    public string Text { get; }
    public ModuleQualificationQuickFix(WebConfigModuleQualificationResolveError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual void ExecuteInternal(ISolution solution, ITextControl textControl);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.WebConfig.QuickFixes.RemoveRedundantTagQuickFix : object {
    private IWebConfigTag myTag;
    private RemoveRedundantTagQuickFix(IWebConfigTag tag);
    public RemoveRedundantTagQuickFix(UnusedAddTagHighlighting highlighting);
    public RemoveRedundantTagQuickFix(UnusedRemoveOrClearTagHighlighting highlighting);
    public RemoveRedundantTagQuickFix(RedundantAddNamespaceTagHighlighting highlighting);
    public RemoveRedundantTagQuickFix(RedundantLocationTagHighlighting highlighting);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
}
[QuickFixAttribute]
internal class JetBrains.ReSharper.Intentions.WebConfig.QuickFixes.TypeMustBePublicQuickFix : object {
    private List`1<IAccessRightsOwnerDeclaration> myDeclarations;
    public string Text { get; }
    public IBulbAction[] Items { get; }
    public TypeMustBePublicQuickFix(TypeMustBePublicErrorHighlighting highlighting);
    public sealed virtual string get_Text();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public IBulbAction[] get_Items();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.WebConfig.QuickFixes.WebConfigChangePathMappingQuickFix : object {
    [CanBeNullAttribute]
private IIgnorablePathReference myPathReference;
    public IBulbAction[] Items { get; }
    public WebConfigChangePathMappingQuickFix(WebConfigPathErrorHighlighting highlighting);
    public WebConfigChangePathMappingQuickFix(WebConfigPathWarningHighlighting highlighting);
    protected WebConfigChangePathMappingQuickFix(IIgnorablePathReference pathReferecne);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public IBulbAction[] get_Items();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.WebConfig.QuickFixes.WebConfigImportPathPoupQuickFix : WebConfigImportPathQuickFix {
    public string PopupMenuCaption { get; }
    public string PopupKey { get; }
    public Anchoring2D[] PopupAnchorings { get; }
    public WebConfigImportPathPoupQuickFix(WebConfigPathErrorHighlighting highlighting);
    public WebConfigImportPathPoupQuickFix(WebConfigPathWarningHighlighting highlighting);
    public sealed virtual string get_PopupMenuCaption();
    public sealed virtual void FillMenuItemDescriptor(IBulbAction key, IMenuItemDescriptor descriptor);
    public sealed virtual string get_PopupKey();
    public sealed virtual Anchoring2D[] get_PopupAnchorings();
    public sealed virtual void OnPopupShown(Lifetime showingLifetime);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.WebConfig.QuickFixes.WebConfigImportPathQuickFix : object {
    [NotNullAttribute]
private IPathReference myPathReference;
    [CanBeNullAttribute]
private IList`1<IPathDeclaredElement> myPathElements;
    public WebConfigImportPathQuickFix(WebConfigPathErrorHighlighting highlighting);
    [NotNullAttribute]
protected IList`1<IPathDeclaredElement> GetPathElements();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NotNullAttribute]
public sealed virtual IEnumerable`1<IBulbAction> CreateBulbActions();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
internal class JetBrains.ReSharper.Intentions.WebConfig.QuickFixes.WebConfigImportTypeAction : BulbActionBase {
    private IReference myReference;
    private PsiLanguageType myLanguage;
    private ITypeElement myTypeElement;
    private string myFormat;
    public ITypeElement TypeElement { get; }
    public PsiLanguageType Language { get; }
    public string Text { get; }
    public WebConfigImportTypeAction(IReference reference, PsiLanguageType language, ITypeElement typeElement, string format);
    public ITypeElement get_TypeElement();
    public PsiLanguageType get_Language();
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.WebConfig.QuickFixes.WebConfigImportTypePopupQuickFix : WebConfigImportTypeQuickFix {
    public string PopupMenuCaption { get; }
    public string PopupKey { get; }
    public Anchoring2D[] PopupAnchorings { get; }
    public WebConfigImportTypePopupQuickFix(WebConfigTypeResolveErrorHighlighting`1<IWebTypeReference> highlighting);
    public sealed virtual string get_PopupMenuCaption();
    public sealed virtual void FillMenuItemDescriptor(IBulbAction key, IMenuItemDescriptor descriptor);
    public sealed virtual string get_PopupKey();
    public sealed virtual Anchoring2D[] get_PopupAnchorings();
    public sealed virtual void OnPopupShown(Lifetime showingLifetime);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.WebConfig.QuickFixes.WebConfigImportTypeQuickFix : object {
    private IWebTypeReference myReference;
    [NotNullAttribute]
protected string ItemFormat { get; }
    public WebConfigImportTypeQuickFix(XmlResolveErrorHighlighting`1<IWebTypeReference> highlighting);
    private WebConfigImportTypeQuickFix(IWebTypeReference reference);
    private static bool IsValid(ITreeNode element);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    private List`1<ITypeElement> Alternatives();
    protected virtual string get_ItemFormat();
    [NotNullAttribute]
public sealed virtual IEnumerable`1<IBulbAction> CreateBulbActions();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public abstract class JetBrains.ReSharper.Intentions.WebConfig.QuickFixes.WebConfigQuickFixBase : object {
    public IBulbAction[] Items { get; }
    public string Text { get; }
    public IBulbAction[] get_Items();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
    protected abstract virtual void ExecuteInternal(ISolution solution, ITextControl textControl);
    public abstract virtual bool IsAvailable(IUserDataHolder cache);
    public abstract virtual string get_Text();
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.WebConfig.QuickFixes.WrongModuleQuickFix : WebConfigQuickFixBase {
    private IWebTypeReference myTypeReference;
    public string Text { get; }
    public WrongModuleQuickFix(WebConfigWrongModuleErrorHighlighting error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [CanBeNullAttribute]
private IPsiModule GetModule();
    protected virtual void ExecuteInternal(ISolution solution, ITextControl textControl);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Intentions.WebConfig.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Intentions.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
