[ActionAttribute("JetBrains.ReSharper.Intentions.Resources.Strings", "AltEnterActionText")]
public class JetBrains.ReSharper.Intentions.Bulbs.AltEnterActionHandler : object {
    public static string ActionName;
    [CanBeNullAttribute]
private static AltEnterHandlers GetAltEnterHandlers(IDataContext context);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
[ActionAttribute("JetBrains.ReSharper.Intentions.Resources.Strings", "ImFeelingLuckyActionText")]
public class JetBrains.ReSharper.Intentions.Bulbs.AltEnterFeelingLuckyAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
[SolutionPerClientComponentAttribute("10", "5")]
public class JetBrains.ReSharper.Intentions.Bulbs.AltEnterHandlers : object {
    [NotNullAttribute]
private IEnumerable`1<IAltEnterHandler> myOrderedHandlers;
    public AltEnterHandlers(IEnumerable`1<IAltEnterHandler> handlers);
    public void HandleAction(IDataContext context);
    public bool IsAvailable(IDataContext context);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.Bulbs.AltEnterTooltipService : object {
    public virtual RichText GetAltEnterTipText(IActionManager actionman);
}
public class JetBrains.ReSharper.Intentions.Bulbs.BulbIndicatorContext : object {
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextControl <TextControl>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <DocumentRange>k__BackingField;
    [NotNullAttribute]
public ISolution Solution { get; }
    [NotNullAttribute]
public ITextControl TextControl { get; }
    public DocumentRange DocumentRange { get; }
    public DocumentOffset DocumentOffset { get; }
    public DocOffset DocOffset { get; }
    public BulbIndicatorContext(ISolution solution, ITextControl textControl, DocumentRange documentRange);
    [CompilerGeneratedAttribute]
public ISolution get_Solution();
    [CompilerGeneratedAttribute]
public ITextControl get_TextControl();
    [CompilerGeneratedAttribute]
public DocumentRange get_DocumentRange();
    public DocumentOffset get_DocumentOffset();
    public DocOffset get_DocOffset();
}
[SolutionPerClientComponentAttribute("10", "5")]
public class JetBrains.ReSharper.Intentions.Bulbs.BulbItems : object {
    public static Key`1<HashSet`1<string>> StopListKey;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private DocumentManager myDocumentManager;
    [NotNullAttribute]
private IPsiFiles myPsiFiles;
    [NotNullAttribute]
private ITextControlManager myTextControlManager;
    [NotNullAttribute]
private ContextManager myContextManager;
    [NotNullAttribute]
private IShellLocks myShellLocks;
    [NotNullAttribute]
private IEnumerable`1<IBulbItemsProvider> myBulbActionProviders;
    [NotNullAttribute]
private HighlightingSettingsManager myHighlightingManager;
    [NotNullAttribute]
private IContextActionDataBuilders myContextActionBuilders;
    [NotNullAttribute]
private SequentialLifetimes mySequentialLifetimes;
    [NotNullAttribute]
private ILogger myLogger;
    private bool myIsRealSolution;
    [NotNullAttribute]
public IProperty`1<BulbItemsState> BulbItemsState;
    protected ClientId ClientId;
    public BulbItems(Lifetime lifetime, ISolution solution, DocumentManager documentManager, ISettingsStore settingsStore, IPsiFiles psiFiles, ITextControlManager textControlManager, IShellLocks shellLocks, ContextManager contextManager, AsyncCommitService asyncCommitService, IEnumerable`1<IBulbItemsProvider> bulbActionProviders, HighlightingSettingsManager highlightingSettingsManager, IContextActionDataBuilders contextActionDataBuilders, ILogger logger);
    private static BulbItems();
    private void SubscribeContextChange(Lifetime lifetime, ISettingsStore settingsStore, AsyncCommitService asyncCommitService);
    public void UpdateManual();
    protected virtual void RegisterContextConsumer(Lifetime lifetime, ContextManager contextManager, Action`1<Lifetime> onContextChanged);
    private void BuildActions(Lifetime lifetime);
    protected virtual ITextControl CurrentTextControl();
    private static void OnTextControlClosed(object sender, EventArgs`1<ITextControl> args);
    private void BuildAvailableActionsList(ITextControl textControl, Lifetime caretPositionLifetime);
    private void ResetBulbItemsState();
    private void SetEmptyBulbItemsState();
    [NotNullAttribute]
private BulbItemsCache BuildBulbCache(ITextControl textControl);
    protected virtual bool CheckViewContains(DocumentRange viewport, DocumentOffset caretOffset);
    [CompilerGeneratedAttribute]
private void <UpdateManual>b__18_0(Lifetime lifetime);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.Bulbs.BulbItemsCache : object {
    [CompilerGeneratedAttribute]
private DocumentOffset <CaretOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowImportPopup>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<Type, IContextActionDataProvider> <ContextActionCache>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<Type> <ExcludedItemTypes>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private HashSet`1<string> <StopList>k__BackingField;
    [CompilerGeneratedAttribute]
private UserDataHolder <DataHolder>k__BackingField;
    public DocumentOffset CaretOffset { get; }
    public bool ShowImportPopup { get; }
    public IDictionary`2<Type, IContextActionDataProvider> ContextActionCache { get; }
    public HashSet`1<Type> ExcludedItemTypes { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public HashSet`1<string> StopList { get; }
    public UserDataHolder DataHolder { get; }
    public BulbItemsCache(DocumentOffset caretOffset, bool showImportPopup, IDictionary`2<Type, IContextActionDataProvider> contextActionCache, HashSet`1<string> stopList);
    [CompilerGeneratedAttribute]
public DocumentOffset get_CaretOffset();
    [CompilerGeneratedAttribute]
public bool get_ShowImportPopup();
    [CompilerGeneratedAttribute]
public IDictionary`2<Type, IContextActionDataProvider> get_ContextActionCache();
    [CompilerGeneratedAttribute]
public HashSet`1<Type> get_ExcludedItemTypes();
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_StopList();
    [CompilerGeneratedAttribute]
public UserDataHolder get_DataHolder();
}
public class JetBrains.ReSharper.Intentions.Bulbs.BulbItemsReadyState : BulbItemsState {
    [NotNullAttribute]
public IntentionsBulbItems IntentionsBulbItems;
    [NotNullAttribute]
public ITextControl TextControl;
    public BulbItemsReadyState(IntentionsBulbItems intentionsBulbItems, ITextControl textControl);
    public virtual string ToString();
}
public class JetBrains.ReSharper.Intentions.Bulbs.BulbItemsState : object {
    public string Name;
    [NotNullAttribute]
public static BulbItemsState Reset;
    [NotNullAttribute]
public static BulbItemsState Empty;
    [NotNullAttribute]
public static BulbItemsState Invalidate;
    protected BulbItemsState(string name);
    private static BulbItemsState();
    public virtual string ToString();
}
[RegisterHighlighterAttribute("CaretDependentBulb")]
public class JetBrains.ReSharper.Intentions.Bulbs.BulbMenuOnGutterMark : object {
    public static string HIGHLIGHTER_ATTRIBUTE_ELEMENT;
    public sealed virtual IGutterMarkInfo GetGutterMarkInfo(IHighlighter highlighter);
}
[SolutionPerClientComponentAttribute("10", "5")]
public class JetBrains.ReSharper.Intentions.Bulbs.BulbOnJetActionMarginIndicator : IndicatorControllerBase {
    protected Lifetime myLifetime;
    [NotNullAttribute]
private IJetActionEditorMarginBehavior myActionMarginBehavior;
    [NotNullAttribute]
private IBulbIndicatorSettings myBulbIndicatorSettings;
    [NotNullAttribute]
protected IDocumentMarkupManager myMarkupManager;
    [NotNullAttribute]
protected BulbMenuComponent myBulbMenuComponent;
    [NotNullAttribute]
protected ISolution mySolution;
    [NotNullAttribute]
private SimpleSignal myInvalidateIndicator;
    public double Priority { get; }
    public BulbOnJetActionMarginIndicator(BulbItems bulbItems, IJetActionEditorMarginBehavior actionMarginBehavior, IBulbIndicatorSettings bulbIndicatorSettings, Lifetime lifetime, IDocumentMarkupManager markupManager, BulbMenuComponent bulbMenuComponent, ISolution solution, IShellLocks shellLocks, IActionManager actionManager, IGotoActionAltEnterHandler gotoActionHandler);
    public virtual double get_Priority();
    protected virtual bool CheckEnabled(ITextControl textControl);
    protected virtual void ShowIndicator(LifetimeDefinition lifetimeDef, BulbItemsReadyState readyState);
    protected virtual IDocumentMarkup SelectMarkup(Lifetime lifetime, ITextControl textControl);
    protected virtual TextRange CalculateRange(ITextControl textControl, IntentionsBulbItems bulbItems);
    protected virtual void InvalidateIndicator(Lifetime stateLifetime);
    protected virtual bool HasItemsToIndicate(IntentionsBulbItems intentionsBulbItems);
    protected virtual bool ExecuteIndicator(IDataContext context, BulbItemsReadyState readyState);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.Bulbs.ContextActionsProvider : object {
    [CompilerGeneratedAttribute]
private ISolution <solution>P;
    [CompilerGeneratedAttribute]
private IContextActionTable <contextActionTable>P;
    private static object ourAllowExecute;
    public int Priority { get; }
    public ContextActionsProvider(ISolution solution, IContextActionTable contextActionTable);
    private static ContextActionsProvider();
    public sealed virtual int get_Priority();
    public virtual void CollectActions(IntentionsBulbItems intentionsBulbItems, BulbItemsCache bulbItemsCache, ITextControl textControl, Lifetime caretPositionLifetime, IPsiSourceFile sourceFile, object precalculatedData);
    protected virtual bool IsAvailable(IntentionAction intentionAction);
    public sealed virtual object PreExecute(ITextControl textControl, Lifetime lifetime);
    public sealed virtual void CollectSyncResults(object data, IntentionsBulbItems intentionsBulbItems, ITextControl textControl);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Intentions.Bulbs.GoodDaemonStateContextProvider : object {
    public GoodDaemonStateContextProvider(Lifetime lifetime, ISolution solution, AsyncCommitService asyncCommitService, ContextManager contextManager, DaemonBase daemon, ITextControlManager textControlManager, ILogger logger);
}
public class JetBrains.ReSharper.Intentions.Bulbs.GoodDaemonStateKey : ContextKeyWithoutValueBase {
    public static GoodDaemonStateKey Instance;
    public bool IsClientSpecific { get; }
    private static GoodDaemonStateKey();
    public virtual bool get_IsClientSpecific();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Intentions.Bulbs.GutterMarkActionsProvider : object {
    [NotNullAttribute]
private IDaemon myDaemon;
    [NotNullAttribute]
private IJetActionEditorMarginBehavior myGutterMargin;
    [NotNullAttribute]
private GutterMarkInfoExtractor myGutterMarkInfoExtractor;
    [NotNullAttribute]
private IDocumentMarkupManager myDocumentMarkupManager;
    public int Priority { get; }
    public GutterMarkActionsProvider(IDaemon daemon, IJetActionEditorMarginBehavior gutterMargin, GutterMarkInfoExtractor gutterMarkInfoExtractor, IDocumentMarkupManager documentMarkupManager);
    public sealed virtual int get_Priority();
    public sealed virtual object PreExecute(ITextControl textControl, Lifetime lifetime);
    [CanBeNullAttribute]
private GutterData GetGutterMarkDataFromCurrentLine(ITextControl textControl);
    public sealed virtual void CollectActions(IntentionsBulbItems intentionsBulbItems, BulbItemsCache bulbItemsCache, ITextControl textControl, Lifetime caretPositionLifetime, IPsiSourceFile sourceFile, object precalculatedData);
    public sealed virtual void CollectSyncResults(object data, IntentionsBulbItems intentionsBulbItems, ITextControl textControl);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.Bulbs.HideIntellisenseHandler : object {
    private SolutionsManager mySolutionsManager;
    public double Priority { get; }
    public HideIntellisenseHandler(SolutionsManager solutionsManager);
    public sealed virtual double get_Priority();
    public sealed virtual bool IsAvailable(IDataContext context);
    public sealed virtual bool HandleAction(IDataContext context);
}
public interface JetBrains.ReSharper.Intentions.Bulbs.IBulbItemsProvider {
    public int Priority { get; }
    public abstract virtual int get_Priority();
    [CanBeNullAttribute]
public abstract virtual object PreExecute(ITextControl textControl, Lifetime lifetime);
    public abstract virtual void CollectActions(IntentionsBulbItems intentionsBulbItems, BulbItemsCache bulbItemsCache, ITextControl textControl, Lifetime caretPositionLifetime, IPsiSourceFile sourceFile, object preExecuteData);
    public abstract virtual void CollectSyncResults(object preExecuteData, IntentionsBulbItems intentionsBulbItems, ITextControl textControl);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Intentions.Bulbs.IContextActionFilter {
    public abstract virtual bool IsEnabledFor(IPsiSourceFile sourceFile);
    public abstract virtual bool IsEnabledFor(ContextActionInstance contextActionInstance);
}
public interface JetBrains.ReSharper.Intentions.Bulbs.IExternalBulbItemsProvider {
    [NotNullAttribute]
[MustUseReturnValueAttribute]
public abstract virtual IEnumerable`1<BulbMenuItem> Load();
}
public interface JetBrains.ReSharper.Intentions.Bulbs.IGotoActionAltEnterHandler {
}
public abstract class JetBrains.ReSharper.Intentions.Bulbs.IndicatorControllerBase : object {
    private ClientId myClientId;
    [NotNullAttribute]
protected IShellLocks ShellLocks;
    [NotNullAttribute]
protected BulbItems myBulbItems;
    [NotNullAttribute]
private IActionManager myActionManager;
    [CanBeNullAttribute]
private IGotoActionAltEnterHandler myGotoActionHandler;
    private SequentialLifetimes myIndicatorLifetime;
    [CanBeNullAttribute]
private ITextControlPos myRequestCaretPos;
    public double Priority { get; }
    protected IndicatorControllerBase(Lifetime lifetime, IShellLocks shellLocks, BulbItems bulbItems, IActionManager actionManager, IGotoActionAltEnterHandler gotoActionHandler);
    public abstract virtual double get_Priority();
    public sealed virtual bool IsAvailable(IDataContext context);
    public virtual bool HandleAction(IDataContext context);
    private void HandleBulbItemsStateChange(Lifetime stateLifetime, BulbItemsState bulbItemsState);
    protected virtual void InvalidateIndicator(Lifetime stateLifetime);
    private void HideIndicator();
    [CanBeNullAttribute]
[PureAttribute]
protected ITextControl GetEnabledTextControl(IDataContext context);
    private void FallbackToGotoAction(IDataContext context);
    protected virtual bool HasItemsToIndicate(IntentionsBulbItems intentionsBulbItems);
    protected abstract virtual bool CheckEnabled(ITextControl textControl);
    protected abstract virtual void ShowIndicator(LifetimeDefinition lifetimeDef, BulbItemsReadyState readyState);
    protected abstract virtual bool ExecuteIndicator(IDataContext context, BulbItemsReadyState readyState);
}
public class JetBrains.ReSharper.Intentions.Bulbs.IntentionsBulbItems : object {
    [CompilerGeneratedAttribute]
private List`1<BulbMenuItem> <ItemsToRepost>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IExternalBulbItemsProvider> <ExternalProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<PopupWithRange> <PopupActions>k__BackingField;
    [NotNullAttribute]
private IList`1<BulbMenuItem> myItemsNoRepost;
    [CompilerGeneratedAttribute]
private bool <CreatedUponInvalidatedDaemon>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CreatedWithHighlighterUnderCaret>k__BackingField;
    [NotNullAttribute]
public List`1<BulbMenuItem> ItemsToRepost { get; }
    [NotNullAttribute]
public List`1<IExternalBulbItemsProvider> ExternalProviders { get; }
    [NotNullAttribute]
public List`1<PopupWithRange> PopupActions { get; }
    public bool HasExternalItems { get; }
    public IEnumerable`1<BulbMenuItem> AllBulbMenuItems { get; }
    public bool CreatedUponInvalidatedDaemon { get; public set; }
    public bool CreatedWithHighlighterUnderCaret { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<BulbMenuItem> get_ItemsToRepost();
    [CompilerGeneratedAttribute]
public List`1<IExternalBulbItemsProvider> get_ExternalProviders();
    [CompilerGeneratedAttribute]
public List`1<PopupWithRange> get_PopupActions();
    public bool get_HasExternalItems();
    public void AddItem(BulbMenuItem item);
    public void AddItems(IEnumerable`1<BulbMenuItem> items);
    public void AddPopup(PopupWithRange popup);
    public void AddItemsNoRepost(IEnumerable`1<BulbMenuItem> item);
    public IEnumerable`1<BulbMenuItem> get_AllBulbMenuItems();
    public void AddExternalItemsProvider(IExternalBulbItemsProvider externalItemsProvider);
    public IList`1<BulbMenuItem> CollectAllBulbMenuItems();
    public IEnumerable`1<BulbMenuItem> CollectAllBulbMenuItemsToRepost();
    [CompilerGeneratedAttribute]
public bool get_CreatedUponInvalidatedDaemon();
    [CompilerGeneratedAttribute]
public void set_CreatedUponInvalidatedDaemon(bool value);
    [CompilerGeneratedAttribute]
public bool get_CreatedWithHighlighterUnderCaret();
    [CompilerGeneratedAttribute]
public void set_CreatedWithHighlighterUnderCaret(bool value);
    public virtual string ToString();
}
public class JetBrains.ReSharper.Intentions.Bulbs.OpenAdvisoryBulbAction : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    public string Text { get; }
    private Uri Uri { get; }
    public bool IsReadOnly { get; }
    public OpenAdvisoryBulbAction(string text, Uri uri);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    [CompilerGeneratedAttribute]
private Uri get_Uri();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
    public sealed virtual bool get_IsReadOnly();
}
[SolutionPerClientComponentAttribute("10", "5")]
public class JetBrains.ReSharper.Intentions.Bulbs.PopupIndicatorController : object {
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private BulbItems myBulbItems;
    [NotNullAttribute]
private IShellLocks myShellLocks;
    [NotNullAttribute]
private DefaultWinFormsControlViews myViewFactory;
    [NotNullAttribute]
private UsageStatistics myUsageStatistics;
    [NotNullAttribute]
private BulbActionsUsagesCollector myUsagesCollector;
    [NotNullAttribute]
private Property`1<PopupActionsContext> myPopupActionsContext;
    [CanBeNullAttribute]
private PopupIndicatorViewModel myPopupIndicatorViewModel;
    public double Priority { get; }
    public PopupIndicatorController(Lifetime lifetime, ISolution solution, BulbItems bulbItems, IShellLocks shellLocks, DefaultWinFormsControlViews viewFactory, UsageStatistics usageStatistics, BulbActionsUsagesCollector usagesCollector, ILogger logger);
    private void UpdatePopupActionsContext(Lifetime lifetime, BulbItemsState bulbItemsState);
    private void HandleNewPopupActionContext(Lifetime hasPopupActionsLifetime, PopupActionsContext popupActions);
    private void ShowIndicator(Lifetime hasPopupActionsLifetime, ITextControl textControl, PopupWithRange popupWithRange);
    public sealed virtual double get_Priority();
    public sealed virtual bool IsAvailable(IDataContext context);
    public sealed virtual bool HandleAction(IDataContext context);
}
public class JetBrains.ReSharper.Intentions.Bulbs.PopupIndicatorViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private LifetimeDefinition <LifetimeDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private BulbIndicatorContext <IndicatorContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <OnBeforeExecute>k__BackingField;
    [NotNullAttribute]
private IShellLocks myShellLocks;
    [NotNullAttribute]
private IntentionPopup myIntentionPopup;
    [NotNullAttribute]
private UsageStatistics myUsageStatistics;
    [NotNullAttribute]
private BulbActionsUsagesCollector myUsagesCollector;
    [NotNullAttribute]
public LifetimeDefinition LifetimeDefinition { get; }
    [NotNullAttribute]
public BulbIndicatorContext IndicatorContext { get; }
    [NotNullAttribute]
public ISimpleSignal OnBeforeExecute { get; }
    [NotNullAttribute]
public string Text { get; }
    [NotNullAttribute]
public Anchoring2D[] PopupAnchorings { get; }
    [NotNullAttribute]
public IconId IconId { get; }
    [NotNullAttribute]
public IPopupBulbAction PopupAction { get; }
    public PopupIndicatorViewModel(LifetimeDefinition lifetimeDefinition, BulbIndicatorContext indicatorContext, IShellLocks shellLocks, IntentionPopup intentionPopup, UsageStatistics usageStatistics, BulbActionsUsagesCollector usagesCollector);
    [CompilerGeneratedAttribute]
public LifetimeDefinition get_LifetimeDefinition();
    [CompilerGeneratedAttribute]
public BulbIndicatorContext get_IndicatorContext();
    [CompilerGeneratedAttribute]
public ISimpleSignal get_OnBeforeExecute();
    public string get_Text();
    public Anchoring2D[] get_PopupAnchorings();
    public void OnPopupViewShown(Lifetime lifetime);
    public IconId get_IconId();
    public IPopupBulbAction get_PopupAction();
    public void OnCancelPopup(object sender, EventArgs eventArgs);
    public void Execute();
    private void ShowPopupMenu(LifetimeDefinition textControlLockLifeDef);
    private void DescribeMenuItem(DescribeItemEventArgs args);
}
public class JetBrains.ReSharper.Intentions.Bulbs.PopupWithRange : ValueType {
    [NotNullAttribute]
public IntentionPopup Popup;
    public DocumentRange Range;
    public PopupWithRange(IntentionPopup popup, DocumentRange range);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Intentions.Bulbs.QuickFixesProvider : object {
    [NotNullAttribute]
private HighlightingSettingsManager mySettingsManager;
    [NotNullAttribute]
private HighlightingsUnderCaretProvider myHighlightingsProvider;
    [NotNullAttribute]
private ScopedIntentionsManager myScopedIntentionsManager;
    [NotNullAttribute]
private IDocumentMarkupManager myDocumentMarkupManager;
    [NotNullAttribute]
private IQuickFixes myQuickFixes;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private DaemonBase myDaemon;
    public int Priority { get; }
    public QuickFixesProvider(HighlightingSettingsManager settingsManager, HighlightingsUnderCaretProvider highlightingsProvider, ScopedIntentionsManager scopedIntentionsManager, IDocumentMarkupManager documentMarkupManager, IQuickFixes quickFixes, ISolution solution, DaemonBase daemon);
    public static bool ShouldRunUnderCaretDaemon(DaemonState daemonState);
    public sealed virtual int get_Priority();
    public sealed virtual object PreExecute(ITextControl textControl, Lifetime lifetime);
    public object PreExecuteUnderCaret(ITextControl textControl, DocumentOffset offset);
    public virtual void CollectActions(IntentionsBulbItems intentionsBulbItems, BulbItemsCache bulbItemsCache, ITextControl textControl, Lifetime caretPositionLifetime, IPsiSourceFile sourceFile, object precalculatedData);
    public void CollectActionsUnderCaret(IntentionsBulbItems intentionsBulbItems, BulbItemsCache bulbItemsCache, ITextControl textControl, DocumentOffset offset, object precalculatedData);
    public sealed virtual void CollectSyncResults(object data, IntentionsBulbItems intentionsBulbItems, ITextControl textControl);
    [CanBeNullAttribute]
protected object GetHighlightingsFromDaemon(ITextControl textControl, DocumentOffset offset);
    private void AddHighlightingInViewport(ITextControl textControl, DocumentOffset offset, DocumentRange viewportRange, HighlightingsData highlightingsData);
    private void AddHighlightingsUnderCaret(ITextControl textControl, IPsiSourceFile sourceFile, DocumentOffset offset, Func`3<IDocumentMarkup, DocumentRange, IEnumerable`1<HighlightingInDocument>> getHighlightingsAtRange, HighlightingsData highlightingsData);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Bulbs.QuickFixesProvider/<GetHighlightingsOverRangeFromMarkupModel>d__21")]
[NotNullAttribute]
private IEnumerable`1<HighlightingInDocument> GetHighlightingsOverRangeFromMarkupModel(IDocumentMarkup markupModel, DocumentRange analysisRange);
    [CanBeNullAttribute]
private HighlightingsData TryBuildUnderCaretHighlightingData(IntentionsBulbItems intentionsBulbItems, ITextControl textControl, DocumentOffset offset);
    protected virtual bool CheckViewportContains(DocumentRange viewport, DocumentRange range);
    [PureAttribute]
protected virtual bool IsRangeInTextView(CollapsedRegionsHelper collapsedRegionsHelper, TextRange highlightingRange);
    private void CollectQuickFixesUnderCaret(BulbItemsCache bulbItemsCache, IntentionsBulbItems intentionsBulbItems, ITextControl textControl, HighlightingsData highlightingsData);
    protected virtual void CreateIntentionsForHighlighting(BulbItemsCache bulbItemsCache, IntentionsBulbItems intentionsBulbItems, ITextControl textControl, HighlightingInDocument highlightingInDocument, HashSet`1<string> configurableHighlightings, IPsiSourceFile sourceFile, IContextBoundSettingsStore settingsStore);
    protected virtual void CreateIntentionsForHighlighting(BulbItemsCache bulbItemsCache, IntentionsBulbItems intentionsBulbItems, ITextControl textControl, HighlightingInDocument highlightingInDocument, HashSet`1<string> configurableHighlightings, IPsiSourceFile sourceFile, IContextBoundSettingsStore settingsStore, bool includeConfigureActions);
    protected virtual bool IsAvailable(IntentionAction intentionAction);
    protected virtual void FillConfigureMenu(IntentionsBulbItems intentionsBulbItems, ITextControl textControl, HighlightingInDocument pair, DocumentRange range, IHighlighting highlighting, IPsiSourceFile sourceFile, IContextBoundSettingsStore settingsStore);
    [PureAttribute]
private static bool CollectMutuallyExclusiveActions(BulbItemsCache bulbItemsCache, IQuickFix quickFix);
    private void CollectPopupQuickFixesFromVisibleArea(BulbItemsCache bulbItemsCache, IntentionsBulbItems intentionsBulbItems, ITextControl textControl, HighlightingsData highlightingsData);
    [CanBeNullAttribute]
public BulbMenuItem CreateBulbMenuItem(IntentionAction intentionAction, ITextControl textControl, IHighlighting highlighting, DocumentRange highlighterRange, IPsiSourceFile sourceFile, IContextBoundSettingsStore boundSettingsStore);
    [NotNullAttribute]
private static IconId GetIconIdFromSeverity(Severity severity);
    private static bool IsActionAvailable(IQuickFix action, BulbItemsCache cacheData);
}
public class JetBrains.ReSharper.Intentions.Bulbs.UpdateNuGetBulbAction : object {
    private NuGetNativePackageManager myNugetManager;
    private IProject myGetProject;
    private INugetPackageName myNuGetPackageName;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public UpdateNuGetBulbAction(NuGetNativePackageManager nugetManager, IProject project, INugetPackageName packageName);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
}
public class JetBrains.ReSharper.Intentions.ContextActions.Cleanup.ApplySyntaxStyleAction : CleanupSelectionWithProfileActionBase {
    [CanBeNullAttribute]
private IApplySyntaxStyleActionConfigurator myConfigurator;
    public string Text { get; }
    public ApplySyntaxStyleAction(LanguageIndependentContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IconId GetIconId();
    protected virtual CodeCleanupProfile GetCleanupProfile();
}
internal static class JetBrains.ReSharper.Intentions.ContextActions.Cleanup.CleanupContextActionsUtil : object {
    internal static void RunCleanup(LanguageIndependentContextActionDataProvider dataProvider, CodeCleanupProfile codeCleanupProfile);
}
public abstract class JetBrains.ReSharper.Intentions.ContextActions.Cleanup.CleanupOnSelectionActionBase : BulbActionBase {
    [NotNullAttribute]
protected LanguageIndependentContextActionDataProvider DataProvider;
    protected CleanupOnSelectionActionBase(LanguageIndependentContextActionDataProvider dataProvider);
    public virtual IconId GetIconId();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public abstract class JetBrains.ReSharper.Intentions.ContextActions.Cleanup.CleanupSelectionWithProfileActionBase : CleanupOnSelectionActionBase {
    protected CleanupSelectionWithProfileActionBase(LanguageIndependentContextActionDataProvider dataProvider);
    [CanBeNullAttribute]
protected abstract virtual CodeCleanupProfile GetCleanupProfile();
    protected sealed virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.ContextActions.Cleanup.ContextActionsMenuBuilders.CleanupMenuBuildContext : object {
    [CompilerGeneratedAttribute]
private IContextBoundSettingsStore <SettingsStore>k__BackingField;
    [CompilerGeneratedAttribute]
private ICodeFormatter <Formatter>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeCleanupProfile <FullCleanUpProfile>k__BackingField;
    [CompilerGeneratedAttribute]
private LanguageIndependentContextActionDataProvider <DataProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeCleanupSettingsComponent <CodeCleanupSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<CodeCleanupProfile> <Profiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MetAnyCustomProfile>k__BackingField;
    [NotNullAttribute]
public IContextBoundSettingsStore SettingsStore { get; }
    [CanBeNullAttribute]
public ICodeFormatter Formatter { get; }
    [NotNullAttribute]
public CodeCleanupProfile FullCleanUpProfile { get; }
    [NotNullAttribute]
public LanguageIndependentContextActionDataProvider DataProvider { get; }
    [NotNullAttribute]
public CodeCleanupSettingsComponent CodeCleanupSettings { get; }
    [NotNullAttribute]
public ICollection`1<CodeCleanupProfile> Profiles { get; }
    public bool MetAnyCustomProfile { get; }
    public CleanupMenuBuildContext(LanguageIndependentContextActionDataProvider dataProvider, CodeCleanupSettingsComponent codeCleanupSettings, IContextBoundSettingsStore settingsStore);
    [CompilerGeneratedAttribute]
public IContextBoundSettingsStore get_SettingsStore();
    [CompilerGeneratedAttribute]
public ICodeFormatter get_Formatter();
    [CompilerGeneratedAttribute]
public CodeCleanupProfile get_FullCleanUpProfile();
    [CompilerGeneratedAttribute]
public LanguageIndependentContextActionDataProvider get_DataProvider();
    [CompilerGeneratedAttribute]
public CodeCleanupSettingsComponent get_CodeCleanupSettings();
    [CompilerGeneratedAttribute]
public ICollection`1<CodeCleanupProfile> get_Profiles();
    [CompilerGeneratedAttribute]
public bool get_MetAnyCustomProfile();
    [CanBeNullAttribute]
public CodeCleanupProfile GetSilentProfile();
    public CodeCleanupProfile GetDefaultProfile(DefaultProfileType type);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Intentions.ContextActions.Cleanup.ContextActionsMenuBuilders.IReformatAndCleanupMenuBuilder {
    public abstract virtual IEnumerable`1<IntentionAction> Build(CleanupMenuBuildContext context, ICleanupOnSelectionAction topmostAction);
    public abstract virtual IEnumerable`1<IntentionAction> BuildReFormatOnlyMenu(CleanupMenuBuildContext context);
}
internal static class JetBrains.ReSharper.Intentions.ContextActions.Cleanup.ContextActionsMenuBuilders.OldReformatAndCleanupMenuBuilder : object {
    [NotNullAttribute]
public static InvisibleAnchor CleanupActionItemsMainAnchor;
    [NotNullAttribute]
public static InvisibleAnchor FormattingActionsSubMenuAnchor;
    [NotNullAttribute]
public static InvisibleAnchor ApplySyntaxStylesAnchor;
    [NotNullAttribute]
public static InvisibleAnchor CleanupSelectionAnchor;
    [NotNullAttribute]
public static InvisibleAnchor ConfigureCleanupProfilesAnchor;
    private static OldReformatAndCleanupMenuBuilder();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.ContextActions.Cleanup.ContextActionsMenuBuilders.OldReformatAndCleanupMenuBuilder/<Build>d__5")]
[NotNullAttribute]
public static IEnumerable`1<IntentionAction> Build(CleanupMenuBuildContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.ContextActions.Cleanup.ContextActionsMenuBuilders.OldReformatAndCleanupMenuBuilder/<CreateFormattingActions>d__6")]
[NotNullAttribute]
internal static IEnumerable`1<IntentionAction> CreateFormattingActions(CleanupMenuBuildContext context, IAnchor anchor, bool createConfigureActions, string topmostActionName);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.ContextActions.Cleanup.ContextActionsMenuBuilders.OldReformatAndCleanupMenuBuilder/<CreateConfigureCodeStyleActions>d__7")]
internal static IEnumerable`1<IntentionAction> CreateConfigureCodeStyleActions(ICodeFormatter formatter, LanguageIndependentContextActionDataProvider dataProvider, IAnchor anchor);
    [NotNullAttribute]
private static IntentionAction CreateApplySyntaxStyleAction(CleanupMenuBuildContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.ContextActions.Cleanup.ContextActionsMenuBuilders.OldReformatAndCleanupMenuBuilder/<CreateCleanupSelectionActions>d__9")]
[NotNullAttribute]
private static IEnumerable`1<IntentionAction> CreateCleanupSelectionActions(CleanupMenuBuildContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.ContextActions.Cleanup.ContextActionsMenuBuilders.ReformatAndCleanupMenuBuilder : object {
    protected SubmenuAnchor CleanupActionItemsAnchor;
    protected InvisibleAnchor CleanupActionItemsMainAnchor;
    protected InvisibleAnchor CleanupProfilesAnchor;
    protected InvisibleAnchor FormattingActionsSubMenuAnchor;
    protected InvisibleAnchor ConfigureSettingsAnchor;
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.ContextActions.Cleanup.ContextActionsMenuBuilders.ReformatAndCleanupMenuBuilder/<Build>d__6")]
public virtual IEnumerable`1<IntentionAction> Build(CleanupMenuBuildContext context, ICleanupOnSelectionAction topmostAction);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.ContextActions.Cleanup.ContextActionsMenuBuilders.ReformatAndCleanupMenuBuilder/<BuildReFormatOnlyMenu>d__7")]
public sealed virtual IEnumerable`1<IntentionAction> BuildReFormatOnlyMenu(CleanupMenuBuildContext context);
    protected IntentionAction CreateTopmostReformatAndCleanUpAction(ICleanupOnSelectionAction topmostAction);
    protected IEnumerable`1<IntentionAction> CollectBuiltInProfilesActions(CleanupMenuBuildContext context);
    protected IEnumerable`1<IntentionAction> CollectCustomProfilesActions(CleanupMenuBuildContext context);
    protected IntentionAction CreateConfigureCleanupProfilesAction();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.ContextActions.Cleanup.ContextActionsMenuBuilders.ReformatAndCleanupMenuBuilder/<CollectConfigureSettingsActions>d__12")]
protected IEnumerable`1<IntentionAction> CollectConfigureSettingsActions(CleanupMenuBuildContext context);
    public IEnumerable`1<IntentionAction> CollectProfileActions(CleanupMenuBuildContext context, bool collectDefaultProfiles, IAnchor anchor);
    private IEnumerable`1<IntentionAction> CollectDefaultProfilesActions(CleanupMenuBuildContext context, IAnchor anchor);
    private IEnumerable`1<IntentionAction> CollectProfilesActionsInternal(CleanupMenuBuildContext context, IEnumerable`1<CodeCleanupProfile> profiles, IAnchor anchor);
    protected virtual ICleanupOnSelectionAction CreateSpecificProfileCleanupSelectionAction(CleanupMenuBuildContext context, CodeCleanupProfile profile, string overridenName);
    protected virtual IBulbAction CreateFormatAction(CleanupMenuBuildContext context, string actionName, CodeFormatProfile profile);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.ContextActions.Cleanup.ContextActionsMenuBuilders.ReformatAndCleanupMenuBuilder/<CreateFormattingActions>d__18")]
internal IEnumerable`1<IntentionAction> CreateFormattingActions(CleanupMenuBuildContext context, IAnchor anchor, string topmostActionName);
    protected virtual bool ShouldCreateFormattingActionForReindenting(CleanupMenuBuildContext context);
    protected virtual bool ShouldCreateFormattingActionsWithAdditionalProfiles(CleanupMenuBuildContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.ContextActions.Cleanup.ContextActionsMenuBuilders.ReformatAndCleanupMenuBuilder/<CreateConfigureCodeStyleActions>d__21")]
protected virtual IEnumerable`1<IntentionAction> CreateConfigureCodeStyleActions(CleanupMenuBuildContext context, IAnchor anchor);
    public static string GetSpecificProfileActionText(CodeCleanupProfile codeCleanupProfile, string getOverridenText);
}
public interface JetBrains.ReSharper.Intentions.ContextActions.Cleanup.IApplySyntaxStyleActionConfigurator {
    [NotNullAttribute]
public abstract virtual CodeCleanupProfile GetCleanupProfile();
}
public interface JetBrains.ReSharper.Intentions.ContextActions.Cleanup.ICleanupOnSelectionAction {
    public abstract virtual IconId GetIconId();
}
public class JetBrains.ReSharper.Intentions.ContextActions.Cleanup.OpenCodeCleanupOptionPageAction : object {
    public string Text { get; }
    public sealed virtual string get_Text();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.ContextActions.Cleanup.ReformatAndCleanupSelectionAction : CleanupOnSelectionActionBase {
    [NotNullAttribute]
private CleanupMenuBuildContext myContext;
    private bool myHideCodeCleanup;
    private bool myUseNewGrouping;
    public string Text { get; }
    public ReformatAndCleanupSelectionAction(LanguageIndependentContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public static void DoWithProfileChoosing(CleanupMenuBuildContext context, ISolution solution, Action`1<Lifetime> beforeChoosing, Action`1<CodeCleanupProfile> afterChoosing);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
internal class JetBrains.ReSharper.Intentions.ContextActions.Cleanup.SpecificProfileCleanupSelectionAction : CleanupSelectionWithProfileActionBase {
    [NotNullAttribute]
private CodeCleanupProfile myCodeCleanupProfile;
    [CanBeNullAttribute]
private string myTextOverride;
    public string Text { get; }
    internal SpecificProfileCleanupSelectionAction(LanguageIndependentContextActionDataProvider dataProvider, CodeCleanupProfile codeCleanupProfile, string textOverride);
    public virtual string get_Text();
    protected virtual CodeCleanupProfile GetCleanupProfile();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.ContextActions.ClrConvertStringLiteralToInterpolationAction : FormatActionBase {
    private IContextActionDataProvider myProvider;
    public string Text { get; }
    protected ClrConvertStringLiteralToInterpolationAction(IContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected abstract virtual bool IsAvailableInternal(ILiteralExpression literalExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.ContextActions.ClrFormatString.ClrAddFormatItemAction : ClrUseFormatStringActionBase {
    private IContextActionDataProvider myDataProvider;
    [NullableAttribute("2")]
private IStringLiteralAlterer myLiteralAlterer;
    private FormattingFunctionKind myFormattingFunctionKind;
    public string Text { get; }
    protected ClrAddFormatItemAction(IContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual bool IsAvailableInternal();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private void AddInvocationArguments(int argumentsCount, int newArgIndex, IStringLiteralAlterer selectionText, IFunctionInvocationClrWrapper methodInvocationWrapper, int formatStringArgumentIndex);
    private IBulbActionCommand CreateHotspotAction(IFunctionInvocationClrWrapper methodInvocationWrapper, bool isPositionalArgument, int newArgIndex, int argumentsCount, int offset, DocumentRange rangeAfterFillingArguments);
    private int GetNewArgIndexForStructuredMessageTemplate(IStringConcatenationClrWrapper concatenation, int insertionStartOffset, bool canArgumentBePositional, int argumentsCount, Boolean& isPositionalArgument);
    [PureAttribute]
private static int GetNewArgIndex(IStringConcatenationClrWrapper concatenation);
    protected abstract virtual bool IsSelectionRangeValid(IExpression selectedExpression, TextRange textRange);
    protected abstract virtual IExpression GetExpressionThroughParenthesis(IExpression selectedExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.ContextActions.ClrFormatString.ClrAddStringInterpolationArgumentAction : FormatActionBase {
    private IContextActionDataProvider myDataProvider;
    [NullableAttribute("2")]
private IStringInterpolationHelper myStringInterpolationHelper;
    [NullableAttribute("2")]
private IStringConcatenationClrWrapper myStringConcatenationClrWrapper;
    public string Text { get; }
    protected ClrAddStringInterpolationArgumentAction(IContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static bool IsLocalizable(IExpression expression);
    private bool IsConvertibleToInterpolation(IExpression selectedExpression);
    protected abstract virtual IBulbActionCommand AddHotspotToInterpolation(IExpression interpolationExpression);
    protected abstract virtual bool IsValidLiteralOffset(ILiteralExpression literal, int offset);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.ContextActions.ClrFormatString.ClrConvertConcatenationToInterpolationAction : ModernScopedFormatActionBase {
    public string Text { get; }
    protected ClrConvertConcatenationToInterpolationAction(IContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode(FormatStringAvailabilityInfo availabilityInfo);
    protected virtual FormatStringAvailabilityInfo TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual FormatStringAvailabilityInfo TryCreateInfoFromTreeNode(ITreeNode treeNode);
    [PureAttribute]
private FormatStringAvailabilityInfo TryGetInfoFromExpression(IExpression selectedExpression, bool checkCaretPosition);
    protected virtual bool IsAvailable(FormatStringAvailabilityInfo availabilityInfo);
    protected virtual IStringConcatenationClrWrapper GetStringConcatenationWrapper(IExpression selectedExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(FormatStringAvailabilityInfo availabilityInfo, ISolution solution, IProgressIndicator progress);
    [PureAttribute]
private bool IsAvailableAtCaretPosition(IList`1<IExpression> arguments, TreeTextRange treeSelection);
    protected virtual bool IsStringLiteral(ILiteralExpression literalExpression);
    protected virtual bool IsAvailableAtCaretPosition(IExpression argumentExpression, TreeTextRange treeSelection);
    [PureAttribute]
protected abstract virtual Nullable`1<StringVerbatimity> TryGetStringVerbatimity(IExpression expression);
    protected abstract virtual void InsertArgumentExpression(IStringInterpolationBuilder builder, IExpression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.ContextActions.ClrFormatString.ClrPassStringFormatAction : FormatActionBase {
    private IContextActionDataProvider myDataProvider;
    public string Text { get; }
    protected ClrPassStringFormatAction(IContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected abstract virtual IExpression RewriteToStringFormat(FormattingFunctionInvocationInfo formattingInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.ContextActions.ClrFormatString.ClrPassStringInterpolationAction : ClrUseStringInterpolationAction {
    private IContextActionDataProvider myDataProvider;
    public string Text { get; }
    protected ClrPassStringInterpolationAction(IContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual bool IsAvailableWithFormatInvocation(FormattingFunctionInvocationInfo invocationInfo);
    protected virtual bool IsAvailableAtCaretOffset(FormattingFunctionInvocationInfo invocationInfo, TreeTextRange selectedTreeTextRange);
    protected virtual void ProcessInvocation(FormattingFunctionInvocationInfo invocationInfo, IStringInterpolationHelper interpolationHelper);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.ContextActions.ClrFormatString.ClrRemoveFormatItemAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private IContextActionDataProvider <dataProvider>P;
    [NullableAttribute("2")]
private IExpression myArgumentExpressionToDelete;
    private int myIndexToDelete;
    [NullableAttribute("2")]
private string myText;
    private FormattingFunctionKind myFormatFunctionKind;
    public string Text { get; }
    protected ClrRemoveFormatItemAction(IContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    private bool IsAvailableInStructuredTemplateMessage(IFunctionInvocationClrWrapper functionInvocationClrWrapper, IStringConcatenationClrWrapper stringConcatenationWrapper, int innerOffset, IStringLiteralAlterer literalWrapper);
    private bool IsAvailableInStringFormat(IFunctionInvocationClrWrapper functionInvocationClrWrapper, IStringConcatenationClrWrapper stringConcatenationWrapper, int innerOffset, IStringLiteralAlterer literalWrapper);
    [NullableContextAttribute("2")]
private void InitializeArgumentExpressionToDelete(FormattingFunctionInvocationInfo invocationInfo);
    private static bool EveryFormatItemToModifyIsInLiteral(IStringConcatenationClrWrapper concatenationWrapper, int indexToDelete);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.ContextActions.ClrFormatString.ClrSurroundWithFormatAction : FormatActionBase {
    private IContextActionDataProvider myDataProvider;
    public string Text { get; }
    public ClrSurroundWithFormatAction(IContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    private static bool LooksLikeFormatString(ConstantValue constantValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.ContextActions.ClrFormatString.ClrUseFormatStringAction : ClrUseFormatStringActionBase {
    private static Char[] ourBraceCharacters;
    private IContextActionDataProvider myDataProvider;
    public string Text { get; }
    protected ClrUseFormatStringAction(IContextActionDataProvider dataProvider);
    private static ClrUseFormatStringAction();
    public virtual string get_Text();
    protected virtual bool IsAvailableInternal();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private void InjectArgument(IExpression argumentToInject);
    private bool IsAvailableAtCaretPosition(IList`1<IExpression> arguments, TreeTextRange treeSelection);
    protected virtual bool IsAllowedOnExpression(IExpression argumentExpression);
    private static bool IsInjectableExpression(IExpression expression);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.ContextActions.ClrFormatString.ClrUseFormatStringActionBase : FormatActionBase {
    [NullableAttribute("1")]
private IContextActionDataProvider myDataProvider;
    protected IStringConcatenationClrWrapper StringConcatenation;
    [CompilerGeneratedAttribute]
private IExpression <SelectedConcatenationArgumentExpression>k__BackingField;
    protected IExpression SelectedConcatenationArgumentExpression { get; protected set; }
    [NullableContextAttribute("1")]
protected ClrUseFormatStringActionBase(IContextActionDataProvider dataProvider);
    [CompilerGeneratedAttribute]
protected IExpression get_SelectedConcatenationArgumentExpression();
    [CompilerGeneratedAttribute]
protected void set_SelectedConcatenationArgumentExpression(IExpression value);
    [NullableContextAttribute("1")]
private static void EscapeBracesInLiterals(IStringConcatenationClrWrapper stringConcatenation);
    protected void SurroundWithFormattingMethodIfNeeded();
    [NullableContextAttribute("1")]
public virtual bool IsAvailable(IUserDataHolder cache);
    protected abstract virtual bool IsAvailableInternal();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.ContextActions.ClrFormatString.ClrUseStringInterpolationAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private IContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    protected ClrUseStringInterpolationAction(IContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual bool IsAvailableWithFormatInvocation(FormattingFunctionInvocationInfo invocationInfo);
    protected virtual void ProcessInvocation(FormattingFunctionInvocationInfo invocationInfo, IStringInterpolationHelper interpolationHelper);
    protected abstract virtual bool IsAvailableAtCaretOffset(FormattingFunctionInvocationInfo invocationInfo, TreeTextRange selectedTreeTextRange);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.ContextActions.ClrFormatString.FormatActionBase : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private IContextActionDataProvider <dataProvider>P;
    public static SubmenuAnchor FormatActionAnchor;
    public static InvisibleAnchor FormatActionOverSelectionAnchor;
    protected FormatActionBase(IContextActionDataProvider dataProvider);
    private static FormatActionBase();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.ContextActions.ClrFormatString.FormatStringAvailabilityInfo : object {
    [CompilerGeneratedAttribute]
private IExpression <SelectedExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private IStringInterpolationHelper <StringInterpolationHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IStringConcatenationClrWrapper <StringConcatenationClrWrapper>k__BackingField;
    public IExpression SelectedExpression { get; }
    public IStringInterpolationHelper StringInterpolationHelper { get; }
    public IStringConcatenationClrWrapper StringConcatenationClrWrapper { get; }
    public FormatStringAvailabilityInfo(IExpression selectedExpression, IStringInterpolationHelper stringInterpolationHelper, IStringConcatenationClrWrapper stringConcatenationClrWrapper);
    [CompilerGeneratedAttribute]
public IExpression get_SelectedExpression();
    [CompilerGeneratedAttribute]
public IStringInterpolationHelper get_StringInterpolationHelper();
    [CompilerGeneratedAttribute]
public IStringConcatenationClrWrapper get_StringConcatenationClrWrapper();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Intentions.ContextActions.ClrFormatString.ModernScopedFormatActionBase : ModernScopedContextActionBase`1<FormatStringAvailabilityInfo> {
    [CompilerGeneratedAttribute]
private IContextActionDataProvider <DataProvider>k__BackingField;
    protected IContextActionDataProvider DataProvider { get; }
    protected ModernScopedFormatActionBase(IContextActionDataProvider dataProvider);
    [CompilerGeneratedAttribute]
protected IContextActionDataProvider get_DataProvider();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.ContextActions.CommentSelectionAction : ContextActionBase {
    [CompilerGeneratedAttribute]
private LanguageIndependentContextActionDataProvider <dataProvider>P;
    private static int LineCommentLengthLimit;
    private static Key ourCommentSelectionActionKey;
    public string Text { get; }
    public CommentSelectionAction(LanguageIndependentContextActionDataProvider dataProvider);
    private static CommentSelectionAction();
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private bool CanUseLineComment(DocumentRange& correctedRange);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.ContextActions.ContextActionAsActionHandler`1 : object {
    private static ContextActionInstance GetContextAction(ISolution solution, ITextControl textControl);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.ContextActions.EncapsulateFieldAction : ContextActionBase {
    [CompilerGeneratedAttribute]
private LanguageIndependentContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public EncapsulateFieldAction(LanguageIndependentContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
public static bool IsAvailable(IDeclaredElement declaredElement);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual void Execute(ISolution solution, ITextControl textControl);
    public static void Execute(IList`1<IReference> additionalReferences);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.ContextActions.InitializeActionBase : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private IContextActionDataProvider <dataProvider>P;
    [CompilerGeneratedAttribute]
private PsiLanguageType <language>P;
    [NullableAttribute("2")]
private MemberFromParameterFixBase myFix;
    public string Text { get; }
    protected InitializeActionBase(IContextActionDataProvider dataProvider, PsiLanguageType language);
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected abstract virtual MemberFromParameterFixBase CreateIntroduceFix(IParameterDeclaration parameterDeclaration);
    protected abstract virtual MemberFromParameterFixBase CreateInitializeFix(IParameterDeclaration parameterDeclaration);
    protected abstract virtual MemberFromParameterFixBase CreateReplaceAssignmentFix(IParameterDeclaration parameterDeclaration);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
private IParameterDeclaration FindParameterDeclaration();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.ContextActions.InitializeAutoPropertyActionBase : InitializeActionBase {
    protected InitializeAutoPropertyActionBase(IContextActionDataProvider dataProvider, PsiLanguageType language);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual MemberFromParameterFixBase CreateIntroduceFix(IParameterDeclaration parameterDeclaration);
    protected virtual MemberFromParameterFixBase CreateInitializeFix(IParameterDeclaration parameterDeclaration);
    protected virtual MemberFromParameterFixBase CreateReplaceAssignmentFix(IParameterDeclaration parameterDeclaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.ContextActions.InitializeFieldActionBase : InitializeActionBase {
    protected InitializeFieldActionBase(IContextActionDataProvider dataProvider, PsiLanguageType language);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual MemberFromParameterFixBase CreateIntroduceFix(IParameterDeclaration parameterDeclaration);
    protected virtual MemberFromParameterFixBase CreateInitializeFix(IParameterDeclaration parameterDeclaration);
    protected virtual MemberFromParameterFixBase CreateReplaceAssignmentFix(IParameterDeclaration parameterDeclaration);
}
internal abstract class JetBrains.ReSharper.Intentions.ContextActions.Inject.InjectionHandlerBase : object {
    [CompilerGeneratedAttribute]
private ISolution <solution>P;
    [CompilerGeneratedAttribute]
private IDocument <document>P;
    [CompilerGeneratedAttribute]
private ITreeNodePointer`1<ITreeNode> <pointer>P;
    [CompilerGeneratedAttribute]
private string <title>P;
    [CompilerGeneratedAttribute]
private IInjectorProviderInLiterals <provider>P;
    private ITreeNode Node { get; }
    protected InjectionHandlerBase(ISolution solution, IDocument document, ITreeNodePointer`1<ITreeNode> pointer, string title, IInjectorProviderInLiterals provider);
    private ITreeNode get_Node();
    private void Invoke(string name, Action`3<IInjectorProviderInLiterals, ITreeNodePointer`1<ITreeNode>, ITreeNode> action);
    protected abstract virtual void RedoInternal(IInjectorProviderInLiterals provider, ITreeNodePointer`1<ITreeNode> pointer, ITreeNode node);
    protected abstract virtual void UndoInternal(IInjectorProviderInLiterals provider, ITreeNodePointer`1<ITreeNode> pointer, ITreeNode node);
    public sealed virtual void Undo();
    public sealed virtual void Redo();
}
public class JetBrains.ReSharper.Intentions.ContextActions.Inject.InjectLanguageItem : BulbActionBase {
    private IInjectorProviderInLiterals myProvider;
    private ITreeNode myInjectOwnerNode;
    private IDocument myDocument;
    private bool myHasSubmenu;
    public string Text { get; }
    public string ID { get; }
    public InjectLanguageItem(IInjectorProviderInLiterals provider, ITreeNode injectOwnerNode, IDocument document, bool hasSubmenu);
    public virtual string get_Text();
    public sealed virtual string get_ID();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Intentions.ContextActions.Inject.InjectorProvidersInLiteralsViewer : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IInjectorProviderInLiterals> <Providers>k__BackingField;
    public IEnumerable`1<IInjectorProviderInLiterals> Providers { get; }
    public InjectorProvidersInLiteralsViewer(IEnumerable`1<IInjectorProviderInLiterals> providers);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IInjectorProviderInLiterals> get_Providers();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.ContextActions.Inject.InjectOrUninjectLanguageAction : object {
    public static string SqlGroupName;
    private static string ID;
    private LanguageIndependentContextActionDataProvider myProvider;
    private static IconId ourInjectionIconId;
    private static IconId ourRemoveIconId;
    [NotNullAttribute]
private static IAnchor ourSubmenuAnchor;
    [NotNullAttribute]
private static IDictionary`2<string, IAnchor> ourGroupSubmenuAnchors;
    public InjectOrUninjectLanguageAction(LanguageIndependentContextActionDataProvider provider);
    private static InjectOrUninjectLanguageAction();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.ContextActions.Inject.InjectOrUninjectLanguageAction/<CreateBulbItems>d__9")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
}
internal class JetBrains.ReSharper.Intentions.ContextActions.Inject.MakeLanguageInjectionHandler : InjectionHandlerBase {
    public MakeLanguageInjectionHandler(ISolution solution, IDocument document, ITreeNodePointer`1<ITreeNode> pointer, string title, IInjectorProviderInLiterals provider);
    protected virtual void RedoInternal(IInjectorProviderInLiterals provider, ITreeNodePointer`1<ITreeNode> pointer, ITreeNode node);
    protected virtual void UndoInternal(IInjectorProviderInLiterals provider, ITreeNodePointer`1<ITreeNode> pointer, ITreeNode node);
}
internal class JetBrains.ReSharper.Intentions.ContextActions.Inject.RemoveLanguageInjectionHandler : InjectionHandlerBase {
    public RemoveLanguageInjectionHandler(ISolution solution, IDocument document, ITreeNodePointer`1<ITreeNode> pointer, string title, IInjectorProviderInLiterals provider);
    protected virtual void RedoInternal(IInjectorProviderInLiterals provider, ITreeNodePointer`1<ITreeNode> pointer, ITreeNode node);
    protected virtual void UndoInternal(IInjectorProviderInLiterals provider, ITreeNodePointer`1<ITreeNode> pointer, ITreeNode node);
}
public class JetBrains.ReSharper.Intentions.ContextActions.Inject.UninjectLanguageItem : BulbActionBase {
    private IInjectorProviderInLiterals myProvider;
    private ITreeNode myInjectOwnerNode;
    private IDocument myDocument;
    public string Text { get; }
    public string ID { get; }
    public UninjectLanguageItem(IInjectorProviderInLiterals provider, ITreeNode injectOwnerNode, IDocument document);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public sealed virtual string get_ID();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.ContextActions.RenameFileToMatchTypeNameActionBase : ContextActionBase {
    public static IProjectFile TryGetProjectFileToRename(IDeclaredElement declaredElement, IPsiSourceFile psiSourceFile);
    public static bool TypeNameNameDoesNotCorrespondWithFileName(IDeclaredElement element, IProjectFile projectFile);
    [NullableContextAttribute("2")]
public static string GetFileName(IDeclaredElement element, IProjectFile projectFile);
    public static string GetExtension(IProjectFile file);
}
public class JetBrains.ReSharper.Intentions.ContextActions.RunPathMappingEditorBulbItem : BulbActionBase {
    [NotNullAttribute]
private IProject myProject;
    [NotNullAttribute]
private VirtualFileSystemPath myPath;
    public string Text { get; }
    public RunPathMappingEditorBulbItem(IProject project, VirtualFileSystemPath path);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
private void <ExecutePsiTransaction>b__5_0(ITextControl control);
}
[RefactoringWorkflowProviderAttribute("16")]
internal class JetBrains.ReSharper.Intentions.ContextActions.Scoped.ChangeNameRenameWorkflowProvider : RenameWorkflowProvider {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.ContextActions.Scoped.ChangeNameRenameWorkflowProvider/<CreateWorkflow>d__0")]
public virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Intentions.ContextActions.Scoped.RenameIntentionUtils : object {
    [NullableContextAttribute("2")]
public static bool IsNewNameValid(IDeclaredElement declaredElement, string suggestedName);
    public static Action`1<ITextControl> Rename(ISolution solution, IDeclaredElement declaredElement, string newName);
    public static Action`1<ITextControl> Rename(ISolution solution, RenameDataProvider renameDataProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.ContextActions.Scoped.ScopedChangeNameFix : ScopedQuickFixWithCustomExecutor {
    [NullableAttribute("2")]
private IDeclaredElement myDeclaredElement;
    [NullableAttribute("2")]
private string mySuggestedName;
    [NullableAttribute("2")]
private ITreeNode myDeclarationOrUsageContext;
    private bool mySuggestedNameHasConflicts;
    public string Text { get; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public ScopedChangeNameFix(InconsistentNamingWarningBase warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
    protected virtual ScopedActionExecutor GetScopedQuickFixExecutor(ISolution solution, IScopedFixingStrategy fixingStrategy, PsiLanguageType languageType);
}
[ContextActionAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.ContextActions.SimpleInternalLocalizeContextAction : ContextActionBase {
    [NotNullAttribute]
private LanguageIndependentContextActionDataProvider myProvider;
    public string Text { get; }
    public SimpleInternalLocalizeContextAction(LanguageIndependentContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private bool ModifyResourceFileWithPsiTransaction(ISolution solution, IPsiSourceFile resourceFile, Action modifyAction);
    public virtual bool IsAvailable(IUserDataHolder cache);
    internal static Data TryFromLiteralExpression(IExpression expression, string kind);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.ContextActions.UseStringEmptyActionBase : ModernContextActionBase {
    protected IContextActionDataProvider myProvider;
    private static string UsedKeyWord;
    [NullableAttribute("2")]
private IExpression myStringLiteral;
    public string Text { get; }
    protected UseStringEmptyActionBase(IContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected abstract virtual bool IsConstantExpression(IExpression expression);
    [NullableContextAttribute("2")]
private static bool IsEmptyString(IExpression literal);
    [NullableContextAttribute("2")]
private static string GetValue(IExpression literal);
    [NullableContextAttribute("2")]
private IExpression GetSelectedString();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IExpression ReplaceElement(ITreeNode oldElement, ITreeNode newElement);
    protected abstract virtual void ShortenReferences(IRangeMarker marker, IFile file);
    protected abstract virtual IExpression CreateExpression();
}
[GlobalSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.Intentions.ContextActionTableSettingsUpgrader : object {
    private IContextBoundSettingsStore myStore;
    private sealed virtual override void JetBrains.Application.Configuration.IXmlReadable.ReadFromXml(XmlElement element);
    private sealed virtual override void JetBrains.Application.Configuration.Upgrade.IGlobalSettingsUpgrader.Upgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
}
public class JetBrains.ReSharper.Intentions.CreateFromUsage.AlwaysConsistentGroup : object {
    [NullableAttribute("1")]
public static AlwaysConsistentGroup Instance;
    private static AlwaysConsistentGroup();
    public sealed virtual bool IsConsistent();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CreateFromUsage.ConsistencyGroupByNaming : object {
    [CompilerGeneratedAttribute]
private bool <isConsistent>P;
    private NamingRule myNamingRule;
    public ConsistencyGroupByNaming(NamingRule namingRule, bool isConsistent);
    public bool Equals(ConsistencyGroupByNaming other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool IsConsistent();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CreateFromUsage.CreateFromUsageActionBase2`2 : ModernBulbActionBase {
    [NullableAttribute("2")]
private TCreationContext myContext;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TReference <Reference>k__BackingField;
    [NullableAttribute("2")]
protected TReference Reference { get; }
    protected TCreationContext Context { get; }
    [NullableContextAttribute("2")]
protected CreateFromUsageActionBase2`2(TReference reference);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected TReference get_Reference();
    [UsedImplicitlyAttribute]
protected bool IsAvailableForContainer(ITreeNode declaration);
    [NullableContextAttribute("2")]
protected bool IsAvailableForContainer(ITreeNode declaration, ICreationTarget target);
    protected virtual bool IsAvailableForTarget(ICreationTarget target);
    protected virtual bool IsAvailableInternal();
    public abstract virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    private sealed virtual override IReadOnlyList`1<IBulbAction> JetBrains.ReSharper.Intentions.CreateFromUsage.ICreateFromUsageActionProvider.GetBulbItems();
    [NullableContextAttribute("2")]
[PureAttribute]
protected abstract virtual ICreationTarget GetTarget();
    protected TCreationContext get_Context();
    protected abstract virtual TCreationContext CreateContext();
    protected virtual BulbActionCommandSequence GetCommandSequence();
    [NullableContextAttribute("2")]
protected virtual IBulbActionCommand ExecuteCommandBeforeTypePartSelector(Func`1<IBulbActionCommand> continueExecution);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected abstract virtual IntentionResult ExecuteIntention(TCreationContext context);
    [CompilerGeneratedAttribute]
private IBulbActionCommand <GetCommandSequence>b__15_0(ISolution _, ITextControl _, IProgressIndicator _);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private IBulbActionCommand <GetCommandSequence>b__15_1();
    [CompilerGeneratedAttribute]
private IBulbActionCommand <GetCommandSequence>b__15_2(ISolution _, ITextControl _, IDeclaration selectedDecl);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CreateFromUsage.CreateFromUsageFixBase : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected List`1<ICreateFromUsageActionProvider> UnfilteredItems;
    public static InvisibleAnchor CreateFromUsageAnchor;
    public static SubmenuAnchor CreateFromUsageOthersAnchor;
    private static CreateFromUsageFixBase();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CreateFromUsage.CreateFromUsageFixBase/<CreateBulbItems>d__4")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public interface JetBrains.ReSharper.Intentions.CreateFromUsage.ICreatedElementConsistencyGroup {
    [PureAttribute]
public abstract virtual bool IsConsistent();
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Intentions.CreateFromUsage.ICreateFromUsageActionProvider {
    [PureAttribute]
public abstract virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    [PureAttribute]
public abstract virtual IReadOnlyList`1<IBulbAction> GetBulbItems();
}
public interface JetBrains.ReSharper.Intentions.CreateFromUsage.ICreateFromUsageActionProviderWithCustomAnchor {
    [NullableContextAttribute("1")]
[PureAttribute]
public abstract virtual IAnchor GetCustomAnchor();
}
public interface JetBrains.ReSharper.Intentions.DisableWarning.IDisableAndRestoreWarningWithCommentsAction {
}
public interface JetBrains.ReSharper.Intentions.DisableWarning.IDisableOnceWarningByCommentAction {
}
public interface JetBrains.ReSharper.Intentions.DisableWarning.IDisableWarningActionProvider {
}
[CustomHighlightingActionProviderAttribute("JetBrains.ProjectModel.KnownProjectFileType")]
public class JetBrains.ReSharper.Intentions.Explanatory.CodeInspectionWikiProvider : object {
    [NotNullAttribute]
private IEnumerable`1<ICodeInspectionWikiDataProvider> myDataProviders;
    [NotNullAttribute]
private IUIApplication myUiApplication;
    [NotNullAttribute]
private string myProductShortName;
    public CodeInspectionWikiProvider(IEnumerable`1<ICodeInspectionWikiDataProvider> dataProviders, IUIApplication uiApplication, IWindowBranding branding);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Explanatory.CodeInspectionWikiProvider/<GetActions>d__4")]
public sealed virtual IEnumerable`1<IntentionAction> GetActions(IHighlighting highlighting, DocumentRange highlightingRange, IPsiSourceFile sourceFile, IAnchor configureAnchor);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Explanatory.CodeInspectionWikiProvider/<GetActions>d__5")]
public IEnumerable`1<IntentionAction> GetActions(string severityId, IAnchor anchor);
    public IntentionAction GetAction(string url, IAnchor anchor);
}
public class JetBrains.ReSharper.Intentions.FeatureSuggestion.BulbItemSuggestion : object {
    [NotNullAttribute]
private LifetimeDefinition myLifetimeDefinition;
    [NotNullAttribute]
private FeatureSuggestionBulbItems myBulbMenuItems;
    [NotNullAttribute]
private string mySuggestionText;
    [NotNullAttribute]
private Action myOnAccepted;
    [NotNullAttribute]
private Action myOnDismissed;
    [NotNullAttribute]
private Action myOnBulbMenuSuggestionsDismissed;
    public Lifetime Lifetime { get; }
    public BulbItemSuggestion(Lifetime itemsLifetime, FeatureSuggestionBulbItems bulbMenuItems, string suggestionText, Action onAccepted, Action onDismissed, Action onBulbMenuSuggestionsDismissed);
    public sealed virtual Lifetime get_Lifetime();
    public sealed virtual void Show();
    public sealed virtual void Close();
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ActionAttribute("JetBrains.ReSharper.Intentions.Resources.Strings", "ReSharperMenuOpenedActionActionText")]
public class JetBrains.ReSharper.Intentions.FeatureSuggestion.ReSharperMenuOpenedAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Intentions.FeatureSuggestion.SwitchToGoToActionSuggester : object {
    [NotNullAttribute]
private FeatureSuggestionBulbItemsProvider myFeatureSuggestionBulbItemsProvider;
    [NotNullAttribute]
private IActionManager myActionManager;
    [NotNullAttribute]
private ISettingsStore mySettingsStore;
    [NotNullAttribute]
private IProperty`1<bool> myDisableMe;
    [CanBeNullAttribute]
private IActionDefWithId myGotoActionAction;
    [CanBeNullAttribute]
private IActionDefWithId myMenuOpenedAction;
    private int myReSharperMenuOpenedActionUpdateCounter;
    private IActivityUsageCondition myDisableWhen;
    public IFeatureSuggestionAspect[] Aspects { get; }
    public SwitchToGoToActionSuggester(Lifetime lifetime, FeatureSuggestionBulbItemsProvider featureSuggestionBulbItemsProvider, IThreading threading, IActionManager actionManager, ISettingsStore settingsStore);
    public sealed virtual IFeatureSuggestionAspect[] get_Aspects();
    public sealed virtual IProperty`1<IFeatureSuggestion> Subscribe(Lifetime lifetime, FeatureSuggestionMode mode);
    public void NotifyReSharperMenuOpenedActionUpdated();
}
[SettingsKeyAttribute("JetBrains.IDE.FeatureSuggestion.FeatureSuggestionSettings", "JetBrains.ReSharper.Intentions.Resources.Strings", "ConfiguresSwitchToGoToActionSuggesterSettingDescription")]
public class JetBrains.ReSharper.Intentions.FeatureSuggestion.SwitchToGoToActionSuggesterSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Intentions.Resources.Strings", "ReSharperMenuClicksThresholdSettingDescription")]
public int ReSharperMenuClickTreshold;
    public static int GetMenuClickThreshold(IContextBoundSettingsStore boundSettings);
}
internal class JetBrains.ReSharper.Intentions.Formatting.AutoDetectFormatAction : ConfigureFormattingActionBase`1<AutoDetectFormatViewModel> {
    public string Text { get; }
    public AutoDetectFormatAction(LanguageIndependentContextActionDataProvider dataProvider, IConfigureFormattingDialogProvider dialogProvider);
    public virtual string get_Text();
    protected virtual void Initialize(AutoDetectFormatViewModel model);
}
public class JetBrains.ReSharper.Intentions.Formatting.AutoDetectFormatViewModel : ConfigureFormatViewModel {
    public AutoDetectFormatViewModel(IShellLocks locks, Lifetime lifetime, IEnumerable`1<ICodeStylePageSchema> schemas, IEnumerable`1<IProvider`1<Identity>> customIdentityProviders, UserInjectedSettingsLayers injector, IConfigureFormatContext formatter, InplaceFormatTransaction transaction, InplaceFormatHighlightingRequestInfo highlightingRequestInfo, ICalculatedSettingsSchema calculatedSettingsSchema);
    public void FillWithResults(FormatterSettingValues results);
    private bool IsEmpty(IDictionary`2<IScalarSetting, Pair`2<object, object>> autoDetectedValues);
    public void AutoDetectFormat();
}
public class JetBrains.ReSharper.Intentions.Formatting.CategoryGroupItem : AAutomation {
    [CompilerGeneratedAttribute]
private ICodeStylePageSchema <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private ICodeStyleEntry <Entry>k__BackingField;
    [NotNullAttribute]
public string LanguageName { get; }
    public string Description { get; }
    public IValueEditorViewModel Editor { get; }
    [NotNullAttribute]
public ICodeStylePageSchema Schema { get; }
    [NotNullAttribute]
public ICodeStyleEntry Entry { get; }
    public IProperty`1<bool> IsAvailable { get; }
    public IScalarSetting SettingsEntry { get; }
    public SeverityItem Severity { get; }
    public IEnumerable`1<ICodeStyleEntry> Children { get; }
    public CategoryGroupItem(ICodeStylePageSchema schema, ICodeStyleEntry entry);
    public string get_LanguageName();
    public sealed virtual string get_Description();
    public sealed virtual IValueEditorViewModel get_Editor();
    [CompilerGeneratedAttribute]
public ICodeStylePageSchema get_Schema();
    [CompilerGeneratedAttribute]
public ICodeStyleEntry get_Entry();
    public sealed virtual IProperty`1<bool> get_IsAvailable();
    public sealed virtual IScalarSetting get_SettingsEntry();
    public sealed virtual SeverityItem get_Severity();
    public sealed virtual IEnumerable`1<ICodeStyleEntry> get_Children();
}
internal class JetBrains.ReSharper.Intentions.Formatting.ConfigureFormattingAction : ConfigureFormattingActionBase`1<ConfigureFormatViewModel> {
    public ConfigureFormattingAction(LanguageIndependentContextActionDataProvider dataProvider, IConfigureFormattingDialogProvider dialogProvider);
}
internal class JetBrains.ReSharper.Intentions.Formatting.ConfigureFormattingActionBase`1 : object {
    [NotNullAttribute]
private LanguageIndependentContextActionDataProvider myDataProvider;
    private IConfigureFormattingDialogProvider myDialogProvider;
    public string Text { get; }
    public ConfigureFormattingActionBase`1(LanguageIndependentContextActionDataProvider dataProvider, IConfigureFormattingDialogProvider dialogProvider);
    public virtual string get_Text();
    protected virtual void Initialize(TViewModel model);
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
}
public static class JetBrains.ReSharper.Intentions.Formatting.ConfigureFormattingUtils : object {
    [NotNullAttribute]
public static Dictionary`2<IScalarSetting, Pair`2<object, object>> ConvertDetectResults(IContextBoundSettingsStore settingsStore, FormatterSettingValues autoDetectFormat);
    public static TViewModel ConstructViewModel(ISolution solution, IConfigureFormatContext context, InplaceFormatHighlightingRequest request, Nullable`1<Instantiation> instantiation);
}
public class JetBrains.ReSharper.Intentions.Formatting.ConfigureFormatViewModel : AAutomation {
    [NotNullAttribute]
private InplaceFormatTransaction myTransaction;
    [CanBeNullAttribute]
private InplaceFormatHighlightingRequest myHighlightingRequest;
    [NotNullAttribute]
private GroupingEvent myReformatRequested;
    [NotNullAttribute]
private JetHashSet`1<PsiLanguageType> myApplicableLanguages;
    [NotNullAttribute]
protected HasChangesTracker myHasChangesTracker;
    [NotNullAttribute]
protected JetHashSet`1<IScalarSetting> mySettingsToShow;
    [CanBeNullAttribute]
private IDictionary`2<IScalarSetting, Pair`2<object, object>> myAutoDetectedValues;
    private bool myOnlyAutodetect;
    [CompilerGeneratedAttribute]
private IConfigureFormatContext <Formatter>k__BackingField;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private IShellLocks <Locks>k__BackingField;
    [CompilerGeneratedAttribute]
private SettingsSaveTargetAutomation <TargetLayer>k__BackingField;
    [CompilerGeneratedAttribute]
private UserFriendlySettingsLayerAutomation <DefaultLayer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldSaveToComments>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IFilterDescriptor> <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IReadOnlySet`1<IScalarSetting>> <FilterSet>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<ICodeStyleEntry> <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private SignalCommand <DetectCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private SignalCommand <SaveCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private SignalCommand <SaveToCommentsCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private SignalCommand <CancelCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private UserFriendlySettingsLayerAutomation[] <SettingsLayers>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ShouldShowEditorConfigWarning>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ShouldShowEditorConfigSaveSuggestion>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <CurrentFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <ConfigFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ShouldShowDetectCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <CanSaveAsComments>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <OnlyShowChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <PreviewFormatting>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ShowCheckBoxes>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<int> <CommandCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<SettingsScalarEntry> <EntriesOverridenByEditorConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private IContextBoundSettingsStoreLive <SmartContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InitializedOk>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<IConfigFileType> <ConfigFileTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private HelpId <HelpTopicId>k__BackingField;
    [NotNullAttribute]
public IConfigureFormatContext Formatter { get; }
    public Lifetime Lifetime { get; }
    [NotNullAttribute]
public IShellLocks Locks { get; }
    public SettingsSaveTargetAutomation TargetLayer { get; private set; }
    public UserFriendlySettingsLayerAutomation DefaultLayer { get; }
    public bool ShouldSaveToComments { get; private set; }
    public IProperty`1<IFilterDescriptor> Filter { get; }
    public IProperty`1<IReadOnlySet`1<IScalarSetting>> FilterSet { get; }
    public ObservableCollection`1<ICodeStyleEntry> Settings { get; }
    public SignalCommand DetectCommand { get; }
    public SignalCommand SaveCommand { get; }
    public SignalCommand SaveToCommentsCommand { get; }
    public SignalCommand CancelCommand { get; }
    public UserFriendlySettingsLayerAutomation[] SettingsLayers { get; }
    public IProperty`1<bool> ShouldShowEditorConfigWarning { get; }
    public IProperty`1<bool> ShouldShowEditorConfigSaveSuggestion { get; }
    public IProperty`1<string> Title { get; }
    public IProperty`1<string> CurrentFileName { get; }
    public IProperty`1<string> ConfigFileName { get; }
    public IProperty`1<bool> ShouldShowDetectCommand { get; }
    public IProperty`1<bool> CanSaveAsComments { get; }
    public IProperty`1<bool> OnlyShowChanged { get; }
    public IProperty`1<bool> PreviewFormatting { get; }
    public IProperty`1<bool> ShowCheckBoxes { get; }
    public IProperty`1<int> CommandCount { get; }
    public ICollection`1<SettingsScalarEntry> EntriesOverridenByEditorConfig { get; }
    public IContextBoundSettingsStoreLive SmartContext { get; }
    public bool InitializedOk { get; protected set; }
    public HashSet`1<IConfigFileType> ConfigFileTypes { get; }
    public HelpId HelpTopicId { get; }
    public ICommand GoToEditorConfigOrg { get; }
    public Func`2<object, bool> Focusability { get; }
    [UsedImplicitlyAttribute]
public ConfigureFormatViewModel(IShellLocks locks, Lifetime lifetime, IEnumerable`1<ICodeStylePageSchema> schemas, IEnumerable`1<IProvider`1<Identity>> customIdentityProviders, UserInjectedSettingsLayers injector, IConfigureFormatContext formatter, InplaceFormatTransaction transaction, InplaceFormatHighlightingRequestInfo highlightingRequestInfo, ICalculatedSettingsSchema calculatedSettingsSchema);
    protected ConfigureFormatViewModel(IShellLocks locks, Lifetime lifetime, IEnumerable`1<ICodeStylePageSchema> schemas, IEnumerable`1<IProvider`1<Identity>> customIdentityProviders, UserInjectedSettingsLayers injector, IConfigureFormatContext formatter, InplaceFormatTransaction transaction, InplaceFormatHighlightingRequestInfo highlightingRequestInfo, string title, bool onlyAutodetect, ICalculatedSettingsSchema calculatedSettingsSchema);
    [CompilerGeneratedAttribute]
public IConfigureFormatContext get_Formatter();
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public IShellLocks get_Locks();
    [CompilerGeneratedAttribute]
public SettingsSaveTargetAutomation get_TargetLayer();
    [CompilerGeneratedAttribute]
private void set_TargetLayer(SettingsSaveTargetAutomation value);
    [CompilerGeneratedAttribute]
public UserFriendlySettingsLayerAutomation get_DefaultLayer();
    [CompilerGeneratedAttribute]
public bool get_ShouldSaveToComments();
    [CompilerGeneratedAttribute]
private void set_ShouldSaveToComments(bool value);
    [CompilerGeneratedAttribute]
public IProperty`1<IFilterDescriptor> get_Filter();
    [CompilerGeneratedAttribute]
public IProperty`1<IReadOnlySet`1<IScalarSetting>> get_FilterSet();
    [CompilerGeneratedAttribute]
public ObservableCollection`1<ICodeStyleEntry> get_Settings();
    [CompilerGeneratedAttribute]
public SignalCommand get_DetectCommand();
    [CompilerGeneratedAttribute]
public SignalCommand get_SaveCommand();
    [CompilerGeneratedAttribute]
public SignalCommand get_SaveToCommentsCommand();
    [CompilerGeneratedAttribute]
public SignalCommand get_CancelCommand();
    [CompilerGeneratedAttribute]
public UserFriendlySettingsLayerAutomation[] get_SettingsLayers();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ShouldShowEditorConfigWarning();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ShouldShowEditorConfigSaveSuggestion();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_Title();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_CurrentFileName();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_ConfigFileName();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ShouldShowDetectCommand();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_CanSaveAsComments();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_OnlyShowChanged();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_PreviewFormatting();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ShowCheckBoxes();
    [CompilerGeneratedAttribute]
public IProperty`1<int> get_CommandCount();
    [CompilerGeneratedAttribute]
public ICollection`1<SettingsScalarEntry> get_EntriesOverridenByEditorConfig();
    [CompilerGeneratedAttribute]
public IContextBoundSettingsStoreLive get_SmartContext();
    [CompilerGeneratedAttribute]
public bool get_InitializedOk();
    [CompilerGeneratedAttribute]
protected void set_InitializedOk(bool value);
    [CompilerGeneratedAttribute]
public HashSet`1<IConfigFileType> get_ConfigFileTypes();
    [CompilerGeneratedAttribute]
public HelpId get_HelpTopicId();
    public void Reformat();
    public void SetFilter(IReadOnlySet`1<IScalarSetting> touchedSettings);
    private void ReallyDoReformat();
    private void UpdateHighlighting();
    private void Save(object layer);
    private void SaveToComments();
    protected void UpdateAutoDetectedValues(IEnumerable`1<ICodeStyleEntry> entries, IDictionary`2<IScalarSetting, Pair`2<object, object>> autoDetectedValues);
    protected void RestoreFromLastDetect(IEnumerable`1<ICodeStyleEntry> entries, IDictionary`2<IScalarSetting, Pair`2<object, object>> autoDetectedValues);
    public void Detect();
    public ICommand get_GoToEditorConfigOrg();
    public Func`2<object, bool> get_Focusability();
    public void CommitAndTerminateUnderLock(LifetimeDefinition lifetimeDefinition);
    public void CancelAndTerminateUnderLock(LifetimeDefinition lifetimeDefinition);
    public string Commit();
    public string DumpTransaction();
    [CompilerGeneratedAttribute]
private void <Reformat>b__103_0();
    [CompilerGeneratedAttribute]
private void <ReallyDoReformat>b__105_0(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private void <Detect>b__111_0(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private void <get_GoToEditorConfigOrg>b__113_0();
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Intentions.Formatting.DetectResultViewer : object {
    private ISolution mySolution;
    private Lifetime myLifetime;
    private IConfigureFormattingDialogProvider myDialogProvider;
    public DetectResultViewer(ISolution solution, Lifetime lifetime, IConfigureFormattingDialogProvider dialogProvider);
    public sealed virtual void ShowDetectionResults(FormatterSettingValues values, IEnumerable`1<PsiLanguageType> languages);
}
public class JetBrains.ReSharper.Intentions.Formatting.DocumentRangeBoundCodeFormatter : object {
    [NotNullAttribute]
private static ILogger ourLogger;
    [CompilerGeneratedAttribute]
private DocumentRange <InitialDocumentRange>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <InitialRangeMarkerRange>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommentOrDirectiveInserter <CommentInserter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InitialDocumentText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InitialRangeMarkerText>k__BackingField;
    [CompilerGeneratedAttribute]
private PsiLanguageType <SingleLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private IPsiSourceFile <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextControl <TextControl>k__BackingField;
    [CompilerGeneratedAttribute]
private IRangeMarker <RangeMarker>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<PsiLanguageType> <Languages>k__BackingField;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataContext <DataContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsAutodetect>k__BackingField;
    private DocumentRange InitialDocumentRange { get; }
    private DocumentRange InitialRangeMarkerRange { get; }
    [CanBeNullAttribute]
private ICommentOrDirectiveInserter CommentInserter { get; }
    [NotNullAttribute]
private string InitialDocumentText { get; }
    [NotNullAttribute]
private string InitialRangeMarkerText { get; }
    [CanBeNullAttribute]
private PsiLanguageType SingleLanguage { get; }
    [NotNullAttribute]
public IPsiSourceFile SourceFile { get; }
    [NotNullAttribute]
public ITextControl TextControl { get; }
    [NotNullAttribute]
public IRangeMarker RangeMarker { get; private set; }
    [NotNullAttribute]
public IEnumerable`1<PsiLanguageType> Languages { get; }
    [NotNullAttribute]
public Lifetime Lifetime { get; }
    [NotNullAttribute]
public ISolution Solution { get; }
    [NotNullAttribute]
public IDataContext DataContext { get; }
    public bool SupportsAutodetect { get; }
    public bool SupportsCommentInsertion { get; }
    public DocumentRangeBoundCodeFormatter(Lifetime lifetime, ISolution solution, DocumentRange range, IPsiSourceFile sourceFile, ITextControl textControl);
    private static DocumentRangeBoundCodeFormatter();
    [CompilerGeneratedAttribute]
private DocumentRange get_InitialDocumentRange();
    [CompilerGeneratedAttribute]
private DocumentRange get_InitialRangeMarkerRange();
    [CompilerGeneratedAttribute]
private ICommentOrDirectiveInserter get_CommentInserter();
    [CompilerGeneratedAttribute]
private string get_InitialDocumentText();
    [CompilerGeneratedAttribute]
private string get_InitialRangeMarkerText();
    [CompilerGeneratedAttribute]
private PsiLanguageType get_SingleLanguage();
    [CompilerGeneratedAttribute]
public sealed virtual IPsiSourceFile get_SourceFile();
    [CompilerGeneratedAttribute]
public sealed virtual ITextControl get_TextControl();
    [CompilerGeneratedAttribute]
public sealed virtual IRangeMarker get_RangeMarker();
    [CompilerGeneratedAttribute]
private void set_RangeMarker(IRangeMarker value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<PsiLanguageType> get_Languages();
    [CompilerGeneratedAttribute]
public sealed virtual Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public sealed virtual ISolution get_Solution();
    [CompilerGeneratedAttribute]
public sealed virtual IDataContext get_DataContext();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SupportsAutodetect();
    public sealed virtual bool get_SupportsCommentInsertion();
    public sealed virtual void SaveOptionsToComments(List`1<IScriptAction> changeScript);
    public sealed virtual void Reformat(Lifetime lifetime, IPotentSettingsTracker settingsTracker, IContextBoundSettingsStore settingsStore);
    public sealed virtual void RestoreFragment();
    private void UpdateRangeMarkerIfNeeded(bool documentTextWasFullyRestored);
    private bool RestoreOriginalDocumentText();
    private static int GetCommonPrefixLength(string s1, string s2);
    private static int GetCommonSuffixLength(string s1, string s2);
    [NotNullAttribute]
public sealed virtual IDictionary`2<IScalarSetting, Pair`2<object, object>> AutoDetectFormat(Lifetime lifetime, IProgressIndicator progress, IContextBoundSettingsStore settingsStore);
    public sealed virtual void DelayedRollback();
    public sealed virtual IContextBoundSettingsStore CreateSettingsContext(ISettingsStore store);
    public sealed virtual IContextBoundSettingsStoreLive CreateSettingsContextLive(ISettingsStore store);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.Formatting.FormatAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private LanguageIndependentContextActionDataProvider <dataProvider>P;
    [CompilerGeneratedAttribute]
private CodeFormatProfile <profile>P;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public FormatAction(LanguageIndependentContextActionDataProvider dataProvider, string name, CodeFormatProfile profile);
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[CounterUsagesCollectorAttribute("16")]
public class JetBrains.ReSharper.Intentions.Formatting.FormatterActionsCounterUsagesCollector : CounterUsagesCollector {
    [CompilerGeneratedAttribute]
private EventId1`1<CodeFormatProfile> <FormatSelectionEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private EventLogGroup <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private EventId1`1<CodeFormatProfile> <WrapLongLineEvent>k__BackingField;
    private EventId1`1<CodeFormatProfile> FormatSelectionEvent { get; }
    private EventLogGroup Group { get; }
    private EventId1`1<CodeFormatProfile> WrapLongLineEvent { get; }
    public FormatterActionsCounterUsagesCollector(FeatureUsageLogger featureUsageLogger);
    [CompilerGeneratedAttribute]
private EventId1`1<CodeFormatProfile> get_FormatSelectionEvent();
    [CompilerGeneratedAttribute]
private EventLogGroup get_Group();
    [CompilerGeneratedAttribute]
private EventId1`1<CodeFormatProfile> get_WrapLongLineEvent();
    public void RegisterFormatSelection(ISolution solution, CodeFormatProfile profile);
    public void RegisterWrapLongLine(ISolution solution, CodeFormatProfile profile);
    public virtual EventLogGroup GetGroup();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.Formatting.FormatterQuickFixRegistrar : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
public class JetBrains.ReSharper.Intentions.Formatting.GlobalConfigureFormatContext : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<PsiLanguageType> <Languages>k__BackingField;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataContext <DataContext>k__BackingField;
    public IEnumerable`1<PsiLanguageType> Languages { get; }
    public Lifetime Lifetime { get; }
    public ISolution Solution { get; }
    public IDataContext DataContext { get; }
    public bool SupportsAutodetect { get; }
    public bool SupportsCommentInsertion { get; }
    public GlobalConfigureFormatContext(IEnumerable`1<PsiLanguageType> languages, Lifetime lifetime, ISolution solution);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<PsiLanguageType> get_Languages();
    [CompilerGeneratedAttribute]
public sealed virtual Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public sealed virtual ISolution get_Solution();
    [CompilerGeneratedAttribute]
public sealed virtual IDataContext get_DataContext();
    public sealed virtual bool get_SupportsAutodetect();
    public sealed virtual bool get_SupportsCommentInsertion();
    public sealed virtual IContextBoundSettingsStoreLive CreateSettingsContextLive(ISettingsStore store);
    public sealed virtual IContextBoundSettingsStore CreateSettingsContext(ISettingsStore store);
    public sealed virtual void SaveOptionsToComments(List`1<IScriptAction> changeScript);
    public sealed virtual void Reformat(Lifetime lifetime, IPotentSettingsTracker settingsTracker, IContextBoundSettingsStore settingsStore);
    public sealed virtual void RestoreFragment();
    public sealed virtual IDictionary`2<IScalarSetting, Pair`2<object, object>> AutoDetectFormat(Lifetime lifetime, IProgressIndicator progress, IContextBoundSettingsStore settingsStore);
    public sealed virtual void DelayedRollback();
}
public interface JetBrains.ReSharper.Intentions.Formatting.IConfigureFormatContext {
    [NotNullAttribute]
public IEnumerable`1<PsiLanguageType> Languages { get; }
    [NotNullAttribute]
public Lifetime Lifetime { get; }
    [NotNullAttribute]
public ISolution Solution { get; }
    public bool SupportsAutodetect { get; }
    public bool SupportsCommentInsertion { get; }
    [NotNullAttribute]
public IDataContext DataContext { get; }
    public abstract virtual IEnumerable`1<PsiLanguageType> get_Languages();
    public abstract virtual Lifetime get_Lifetime();
    public abstract virtual ISolution get_Solution();
    public abstract virtual bool get_SupportsAutodetect();
    public abstract virtual bool get_SupportsCommentInsertion();
    public abstract virtual IDataContext get_DataContext();
    public abstract virtual IContextBoundSettingsStoreLive CreateSettingsContextLive(ISettingsStore store);
    public abstract virtual IContextBoundSettingsStore CreateSettingsContext(ISettingsStore store);
    public abstract virtual void SaveOptionsToComments(List`1<IScriptAction> changeScript);
    public abstract virtual void Reformat(Lifetime lifetime, IPotentSettingsTracker settingsTracker, IContextBoundSettingsStore settingsStore);
    public abstract virtual void RestoreFragment();
    [NotNullAttribute]
public abstract virtual IDictionary`2<IScalarSetting, Pair`2<object, object>> AutoDetectFormat(Lifetime lifetime, IProgressIndicator progress, IContextBoundSettingsStore settingsStore);
    public abstract virtual void DelayedRollback();
}
public interface JetBrains.ReSharper.Intentions.Formatting.IConfigureFormatRangeContext {
    [NotNullAttribute]
public IRangeMarker RangeMarker { get; }
    [NotNullAttribute]
public ITextControl TextControl { get; }
    [NotNullAttribute]
public IPsiSourceFile SourceFile { get; }
    public abstract virtual IRangeMarker get_RangeMarker();
    public abstract virtual ITextControl get_TextControl();
    public abstract virtual IPsiSourceFile get_SourceFile();
}
public interface JetBrains.ReSharper.Intentions.Formatting.IConfigureFormattingDialogProvider {
    public abstract virtual void ShowConfigureFormattingAction(ISolution solution, IConfigureFormatContext context, LifetimeDefinition lifetimeDefinition, TViewModel viewModel);
}
[ActionAttribute("JetBrains.ReSharper.Intentions.Resources.Strings", "IncreaseLineIndentActionText")]
public class JetBrains.ReSharper.Intentions.Formatting.IncreaseLineIndentAction : object {
    public sealed virtual bool Update(IDataContext dataContext, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext dataContext, DelegateExecute nextExecute);
}
[RegisterHighlighterAttribute("ReSharper Inplace Format")]
public static class JetBrains.ReSharper.Intentions.Formatting.InplaceFormatHighlighterIds : object {
    public static string HIGHLIGHTER_ID;
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.Formatting.InplaceFormatHighlightingManager : object {
    private static string HIGHLIGHTER_KEY;
    [NotNullAttribute]
private IDocumentMarkupManager myDocumentMarkupManager;
    [NotNullAttribute]
public static InplaceFormatHighlightingManager Instance { get; }
    public InplaceFormatHighlightingManager(IDocumentMarkupManager documentMarkupManager);
    public static InplaceFormatHighlightingManager get_Instance();
    public void Update(InplaceFormatHighlightingRequest request);
    public void InitHighlighting(InplaceFormatHighlightingRequest request);
    private void Show(InplaceFormatHighlightingRequest request);
    private void Hide(InplaceFormatHighlightingRequest request);
}
public class JetBrains.ReSharper.Intentions.Formatting.InplaceFormatHighlightingRequest : object {
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <Range>k__BackingField;
    public Lifetime Lifetime { get; }
    public DocumentRange Range { get; private set; }
    public InplaceFormatHighlightingRequest(Lifetime lifetime, DocumentRange range);
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public DocumentRange get_Range();
    [CompilerGeneratedAttribute]
private void set_Range(DocumentRange value);
    public void UpdateRange(TextRange newRange);
}
public class JetBrains.ReSharper.Intentions.Formatting.InplaceFormatHighlightingRequestInfo : object {
    [CompilerGeneratedAttribute]
private InplaceFormatHighlightingRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private static InplaceFormatHighlightingRequestInfo <EmptyInstance>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public InplaceFormatHighlightingRequest Request { get; public set; }
    public static InplaceFormatHighlightingRequestInfo EmptyInstance { get; }
    public InplaceFormatHighlightingRequestInfo(InplaceFormatHighlightingRequest Request);
    [CompilerGeneratedAttribute]
protected InplaceFormatHighlightingRequestInfo(InplaceFormatHighlightingRequestInfo original);
    private static InplaceFormatHighlightingRequestInfo();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public InplaceFormatHighlightingRequest get_Request();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Request(InplaceFormatHighlightingRequest value);
    [CompilerGeneratedAttribute]
public static InplaceFormatHighlightingRequestInfo get_EmptyInstance();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(InplaceFormatHighlightingRequestInfo left, InplaceFormatHighlightingRequestInfo right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(InplaceFormatHighlightingRequestInfo left, InplaceFormatHighlightingRequestInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(InplaceFormatHighlightingRequestInfo other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual InplaceFormatHighlightingRequestInfo <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(InplaceFormatHighlightingRequest& Request);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Formatting.ReformatQuickFix : ScopedBulbAction {
    private FormattingHighlighting myFormattingHighlighting;
    public string Text { get; }
    public ReformatQuickFix(FormattingHighlighting formattingHighlighting);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Formatting.ReindentQuickFix : ScopedBulbAction {
    private IndentingHighlighting myIndentingHighlighting;
    public string Text { get; }
    public ReindentQuickFix(IndentingHighlighting indentingHighlighting);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.Formatting.TemporaryWritableLayerUtils : object {
    public static void Create(Lifetime lifetime, IComponentContainer parent, Nullable`1<double> priority);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Formatting.WrapAction : ModernContextActionBase {
    private LanguageIndependentContextActionDataProvider myDataProvider;
    private string myName;
    private CodeFormatProfile myProfile;
    public static InvisibleAnchor WrapActionItems;
    public string Text { get; }
    public WrapAction(LanguageIndependentContextActionDataProvider dataProvider);
    private WrapAction(LanguageIndependentContextActionDataProvider dataProvider, string name, CodeFormatProfile profile);
    private static WrapAction();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Formatting.WrapAction/<CreateBulbItems>d__7")]
public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.Implementor.ImplementMemberBase : object {
    public string Text { get; }
    protected string SelectPartText { get; }
    protected string GeneratorKind { get; }
    public abstract virtual string get_Text();
    public abstract virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
    protected abstract virtual IOverridableMember GetMemberToImplement();
    protected abstract virtual List`1<ITypeElement> GetTargetTypes(IProgressIndicator progress);
    protected abstract virtual string get_SelectPartText();
    protected abstract virtual string get_GeneratorKind();
    protected virtual void SetBody(ITypeMemberDeclaration memberDeclaration);
    protected virtual void PostExecute();
}
public class JetBrains.ReSharper.Intentions.Implementor.MemberImplementorItem : BulbActionBase {
    [NotNullAttribute]
private string myGeneratorKind;
    [NotNullAttribute]
private ICollection`1<ITypeDeclaration> myTargetDeclarations;
    [NotNullAttribute]
private ITypeMember myMemberToImplement;
    [NotNullAttribute]
private Action`1<ITypeMemberDeclaration> myBodySetter;
    [NotNullAttribute]
private Action myPostExecute;
    [NotNullAttribute]
private IDictionary`2<ITypeDeclaration, Task`1<ITextControl>> myTextControlTasks;
    [NotNullAttribute]
private Dictionary`2<ITypeDeclaration, IRangeMarker> myMarkers;
    private IThreading myThreading;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public MemberImplementorItem(string generatorKind, string text, ICollection`1<ITypeDeclaration> targetDeclarations, ITypeMember memberToImplement, Action`1<ITypeMemberDeclaration> bodySetter, Action postExecute);
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    protected virtual void ExecuteBeforeProgressAndTransaction(ISolution solution);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private void ConfigureContext(IGeneratorContext context);
    private void SetupSelection(ITextControl control);
}
public class JetBrains.ReSharper.Intentions.Implementor.MemberImplementorPreparer : object {
    [NotNullAttribute]
private ITypeMember myMemberToImplement;
    [NotNullAttribute]
private string mySelectPartText;
    [NotNullAttribute]
private string myGeneratorKind;
    [NotNullAttribute]
private ITextControl myTextControl;
    [NotNullAttribute]
private Action`1<ITypeMemberDeclaration> myBodySetter;
    [NotNullAttribute]
private Action myPostExecute;
    [NotNullAttribute]
private JetPopupMenus myJetPopupMenus;
    private MemberImplementorPreparer(ITypeMember memberToImplement, string selectPartText, string generatorKind, ITextControl textControl, Action`1<ITypeMemberDeclaration> bodySetter, Action postExecute);
    public static void ImplementMember(ITypeMember memberToImplement, ICollection`1<ITypeElement> targetTypes, string selectPartText, string generatorKind, ITextControl textControl, Action`1<ITypeMemberDeclaration> bodySetter, Action postExecute);
    private void Execute(IEnumerable`1<ITypeElement> targetTypes);
    private void SelectTargetTypes(IReadOnlyList`1<ITypeElement> targetTypes);
    private void SelectTypeParts(IEnumerable`1<ITypeElement> targetTypes);
    private static void FillParetSelectionMenu(Lifetime lifetime, JetPopupMenu menu, IEnumerable`1<object> items);
    private void PerformInsert(ICollection`1<ITypeDeclaration> typeDeclarations);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Intentions.Implementor.OverridableMembersFinder : object {
    public static List`1<ITypeElement> FindOverridableNotHiddenMembersInInheritors(ITypeElement baseType, IOverridableMember memberToOverride, IProgressIndicator progress);
    private static bool CanOverrideMember(ITypeElement targetTypeElement, IOverridableMember overridableMember, bool mustBeMissing);
    private static IReadOnlyList`1<ITypeElement> FindInheritors(ITypeElement element, IProgressIndicator progress);
    private static bool HasImplementationOrHides(OverridableMemberInstance memberInstance, ITypeElement examinedType);
    private static bool CheckHides(IOverridableMember overridableMember, OverridableMemberInstance memberInstance);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.Implementor.PopupListProvider : object {
    [NullableAttribute("2")]
private static DeclaredElementPresenterStyle ourFirstPresenter;
    [NullableAttribute("2")]
private static DeclaredElementPresenterStyle ourSecondPresenter;
    public static DeclaredElementPresenterStyle FirstPresenter { get; }
    public static DeclaredElementPresenterStyle SecondPresenter { get; }
    public static DeclaredElementPresenterStyle get_FirstPresenter();
    public static DeclaredElementPresenterStyle get_SecondPresenter();
    public static int Compare(ITypeElement x, ITypeElement y);
    [NullableContextAttribute("2")]
[PureAttribute]
public static int TypeWeight(ITypeElement typeElement);
}
internal class JetBrains.ReSharper.Intentions.Options.ChangeConfigurableSeverityAction : object {
    private string myInspectionId;
    private SeverityOption myConfiugurableSeverity;
    private bool myIsSet;
    public string Text { get; }
    internal ChangeConfigurableSeverityAction(string inspectionId, SeverityOption confiugurableSeverity, bool isSet);
    public sealed virtual string get_Text();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
}
[CustomHighlightingActionProviderAttribute("JetBrains.ProjectModel.KnownProjectFileType")]
public class JetBrains.ReSharper.Intentions.Options.ChangeConfigurableSeverityWarningProvider : object {
    [NotNullAttribute]
private HighlightingSettingsManager mySettingsManager;
    [NotNullAttribute]
private IUIApplicationSimple myUIApplication;
    public ChangeConfigurableSeverityWarningProvider(HighlightingSettingsManager settingsManager, IUIApplicationSimple uiApplication);
    public sealed virtual IEnumerable`1<IntentionAction> GetActions(IHighlighting highlighting, DocumentRange highlightingRange, IPsiSourceFile sourceFile, IAnchor configureAnchor);
    public static Severity GetConfigurableSeverity(ITreeNode context, string severityId);
    private static Severity GetConfigurableSeverity(HighlightingSettingsManager settingsManager, IPsiSourceFile sourceFile, string severityId);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Options.ChangeConfigurableSeverityWarningProvider/<GetActions>d__6")]
public static IEnumerable`1<IntentionAction> GetActions(HighlightingSettingsManager settingsManager, IUIApplicationSimple uiApp, string severityId, Severity currentSeverity, IPsiSourceFile sourceFile, IAnchor configureAnchor);
}
[CustomHighlightingActionProviderAttribute("JetBrains.ProjectModel.KnownProjectFileType")]
public class JetBrains.ReSharper.Intentions.Options.ChangeNamingRuleActionProvider : object {
    private IUIApplicationSimple myUIApplication;
    public ChangeNamingRuleActionProvider(IUIApplicationSimple uiApplication);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Options.ChangeNamingRuleActionProvider/<GetActions>d__2")]
public sealed virtual IEnumerable`1<IntentionAction> GetActions(IHighlighting highlighting, DocumentRange highlightingRange, IPsiSourceFile sourceFile, IAnchor configureAnchor);
}
public class JetBrains.ReSharper.Intentions.Options.ContextActionGroupViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private string <GroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ContextActionViewModel> <Items>k__BackingField;
    [NotNullAttribute]
public string GroupName { get; }
    [NotNullAttribute]
public List`1<ContextActionViewModel> Items { get; }
    public ContextActionGroupViewModel(string groupName);
    [CompilerGeneratedAttribute]
public string get_GroupName();
    [CompilerGeneratedAttribute]
public List`1<ContextActionViewModel> get_Items();
}
[OptionsPageAttribute("ContextActions", "Context Actions", "JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons/ContextAction")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.Options.ContextActionsPage : AAutomation {
    [PublicAPIAttribute]
public static string PID;
    private static IComparer`1<ContextActionViewModel> ourComparer;
    private string myLocalSearch;
    [CompilerGeneratedAttribute]
private IList`1<ContextActionGroupViewModel> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private IChildrenProvider <ChildrenProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<OptionsFilterResult> <SearchFilter>k__BackingField;
    public IList`1<ContextActionGroupViewModel> Items { get; }
    public string LocalSearch { get; public set; }
    public IChildrenProvider ChildrenProvider { get; }
    public IProperty`1<OptionsFilterResult> SearchFilter { get; }
    private string JetBrains.Application.UI.Options.IOptionsPage.Id { get; }
    public ContextActionsPage(IContextActionTable contextActionTable, OptionsSettingsSmartContext settingsStore);
    private static ContextActionsPage();
    [CompilerGeneratedAttribute]
public IList`1<ContextActionGroupViewModel> get_Items();
    public string get_LocalSearch();
    public void set_LocalSearch(string value);
    [CompilerGeneratedAttribute]
public IChildrenProvider get_ChildrenProvider();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<OptionsFilterResult> get_SearchFilter();
    private sealed virtual override string JetBrains.Application.UI.Options.IOptionsPage.get_Id();
    private sealed virtual override bool JetBrains.Application.UI.Options.IOptionsPage.OnOk();
    [NotNullAttribute]
public sealed virtual OptionsPageKeywords GetKeywords();
    private sealed virtual override void JetBrains.Application.UI.Options.ISearchablePage.HighLightKeyword(OptionsFilterResult text);
    [NotNullAttribute]
private sealed virtual override IEnumerable`1<string> JetBrains.Application.UI.Options.ISearchablePage.GetTagKeywordsForPage();
    private sealed virtual override IFilterDescriptor JetBrains.Application.UI.Options.ITreeGridViewFilterPage.GetFilter();
}
public class JetBrains.ReSharper.Intentions.Options.ContextActionViewModel : ObservableObject {
    [NotNullAttribute]
private IContextActionInfo myContextActionInfo;
    [NotNullAttribute]
private IContextActionTable myContextActionTable;
    [NotNullAttribute]
private OptionsSettingsSmartContext mySettingsStore;
    private bool myIsEnabled;
    [NotNullAttribute]
private static Expression`1<Func`2<ContextActionTableSettings, IIndexedEntry`2<string, bool>>> DisabledContextActionSetting;
    [CanBeNullAttribute]
public string Group { get; }
    [CanBeNullAttribute]
public string GroupName { get; }
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public string Description { get; }
    public bool IsEnabled { get; public set; }
    public ContextActionViewModel(IContextActionInfo contextActionInfo, IContextActionTable contextActionTable, OptionsSettingsSmartContext settingsStore, bool isEnabled);
    private static ContextActionViewModel();
    public string get_Group();
    public string get_GroupName();
    public string get_Name();
    public string get_Description();
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
}
public class JetBrains.ReSharper.Intentions.Options.ContextActionViewModelToVisibilityConverter : object {
    [NotNullAttribute]
public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ActionAttribute("JetBrains.ReSharper.Intentions.Resources.Strings", "EditEditorconfigActionText")]
public class JetBrains.ReSharper.Intentions.Options.EditEditorConfigAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.ReSharper.Intentions.Resources.Strings", "ExportSettingsToEditorconfigActionText")]
public class JetBrains.ReSharper.Intentions.Options.ExportToEditorConfigAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public interface JetBrains.ReSharper.Intentions.Options.IChangeNamingRuleWindowProvider {
    public abstract virtual bool IsApplicable(IDeclaredElement declaredElement);
    public abstract virtual void ShowSettingsDialog(string ruleName, NamingPolicy policyToChange, IDeclaredElement declaredElement, IPsiSourceFile psiSourceFile, ITextControl textControl, NamingManager namingManager, IUIApplicationSimple uiApplicationSimple, ISolution solution);
}
public interface JetBrains.ReSharper.Intentions.Options.IConfigurableSeverityChangeWindowProvider {
    public abstract virtual void ShowSeverityWindow(HighlightingSettingsManager settingsManager, IPsiSourceFile sourceFile, string severityId, IUIApplicationSimple uiApplication, ISolution solution, ITextControl textControl);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.AddAccessorBulbAction : ModernBulbActionBase {
    [CompilerGeneratedAttribute]
private IProperty <property>P;
    [CompilerGeneratedAttribute]
private AccessorKind <accessorKind>P;
    public string Text { get; }
    private string AccessorName { get; }
    public AddAccessorBulbAction(IProperty property, AccessorKind accessorKind);
    public virtual string get_Text();
    public bool IsAvailable();
    private string get_AccessorName();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.ChangeSignatureFixBase : BulbActionBase {
    private IReference myReference;
    private IParametersOwner myTarget;
    private IParametersOwner mySource;
    private ISubstitution mySubstitution;
    private string myExtraDescription;
    private PsiLanguageType myLanguage;
    public string Text { get; }
    public ChangeSignatureFixBase(IReference reference, IParametersOwner target, IParametersOwner source, string extraDescription);
    public ChangeSignatureFixBase(IReference reference, IParametersOwner target, IParametersOwner source, ISubstitution substitution, string extraDescription);
    public virtual string get_Text();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected bool IsAvailableInternal(IUserDataHolder cache, bool checkSignatures);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.ChangeTypeAction : BulbActionBase {
    [NotNullAttribute]
private IClrDeclaredElement myDeclaredElement;
    [NotNullAttribute]
private IType myType;
    [NotNullAttribute]
private PsiLanguageType myLanguage;
    public string Text { get; }
    public RichText RichText { get; }
    public ChangeTypeAction(IClrDeclaredElement declaredElement, IType type, PsiLanguageType language);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public sealed virtual RichText get_RichText();
    [NotNullAttribute]
public static ChangeTypeAction[] CreateItems(IClrDeclaredElement lvalue, IType lvalueType, IClrDeclaredElement rvalue, IType rvalueType, PsiLanguageType language);
    [NotNullAttribute]
public static ChangeTypeAction[] CreateItems(IClrDeclaredElement lvalue, IType lvalueType, IClrDeclaredElement rvalue, IType rvalueType, IType lvalueSuggestedType, PsiLanguageType language);
    [NotNullAttribute]
public static ChangeTypeAction[] CreateItems(IClrDeclaredElement lvalue, IType rvalueType, IType lvalueSuggestedType, PsiLanguageType language);
    [NotNullAttribute]
public static ChangeTypeAction[] CreateItems(IEnumerable`1<Pair`2<IType, IClrDeclaredElement>> sources, PsiLanguageType language);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.QuickFixes.CheckNamespaceQuickFix : QuickFixBase {
    private ITypeAndNamespaceHolderDeclaration myHolderDeclaration;
    private string myExpectedNamespace;
    public string Text { get; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public CheckNamespaceQuickFix(CheckNamespaceWarning highlighting);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public sealed virtual string get_ScopedText();
    public sealed virtual FileCollectorInfo get_FileCollectorInfo();
    public sealed virtual Action`1<ITextControl> ExecuteAction(ISolution solution, Scope scope, IHighlighting sourceHighlighting, IProgressIndicator progress);
    private static void ExecuteCore(ISolution solution, Scope scope);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.ClrAddEmptyArgFix : BulbActionBase {
    private IArgumentsOwner myArgumentsOwner;
    public string Text { get; }
    public ClrAddEmptyArgFix(FormatStringInexistingArgumentWarning error);
    public ClrAddEmptyArgFix(StructuredMessageTemplateNonexistingArgumentWarning error);
    public virtual string get_Text();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.ClrEscapeUnmatchedBraceFix : BulbActionBase {
    private int myBraceEndOffset;
    private char myCharToInsert;
    public string Text { get; }
    public ClrEscapeUnmatchedBraceFix(FormatStringUnescapedRBraceWarning warning);
    public ClrEscapeUnmatchedBraceFix(FormatStringUnescapedLBraceWarning warning);
    public ClrEscapeUnmatchedBraceFix(StructuredMessageTemplateUnescapedRBraceWarning warning);
    public ClrEscapeUnmatchedBraceFix(StructuredMessageTemplateUnescapedLBraceWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [CompilerGeneratedAttribute]
private void <ExecutePsiTransaction>b__8_0(ITextControl textControl);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.ContextActions.ClrFormatString.ClrPassStringInterpolationAction")]
public class JetBrains.ReSharper.Intentions.QuickFixes.ClrPassStringInterpolationFix : ClrUseStringInterpolationFix {
    private IMethod mySuggestedMethod;
    private IFunctionInvocationClrWrapper myFormattingInvocationWrapper;
    public string Text { get; }
    public ClrPassStringInterpolationFix(PassStringInterpolationWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual void ProcessInvocation(IStringInterpolationHelper interpolationHelper, IExpression interpolations);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.ClrRemoveRedundantArgFix : QuickFixBase {
    [NotNullAttribute]
private IExpression myUnusedArgumentExpression;
    [NotNullAttribute]
private IExpression myMessageTemplateExpression;
    private bool myIsPositionalArgument;
    public string Text { get; }
    public ClrRemoveRedundantArgFix(FormatStringArgumentIsNotUsedWarning error);
    public ClrRemoveRedundantArgFix(StructuredMessageTemplateArgumentIsNotUsedWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.ClrSimplifyFormatArgumentToStringFix : QuickFixBase {
    [NotNullAttribute]
private IExpression myFormatArgumentExpression;
    [NotNullAttribute]
private IArgumentsOwner myFormattingInvocation;
    public string Text { get; }
    public ClrSimplifyFormatArgumentToStringFix(UseFormatSpecifierInFormatStringWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.ContextActions.ClrFormatString.ClrUseStringInterpolationAction")]
public class JetBrains.ReSharper.Intentions.QuickFixes.ClrUseStringInterpolationFix : ModernScopedQuickFixBase {
    public static Key`1<object> AvailabilityKey;
    private IArgumentsOwner myInvocation;
    private IExpression myFormatString;
    private IReadOnlyList`1<IExpression> myArguments;
    private bool myWhenPossibleFlag;
    public string Text { get; }
    protected IReadOnlyList`1<IExpression> Arguments { get; }
    protected ClrUseStringInterpolationFix(IArgumentsOwner invocation, IExpression formatString, IReadOnlyList`1<IExpression> arguments, bool whenPossibleFlag);
    public ClrUseStringInterpolationFix(UseStringInterpolationWarning error);
    private static ClrUseStringInterpolationFix();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected IReadOnlyList`1<IExpression> get_Arguments();
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual void ProcessInvocation(IStringInterpolationHelper interpolationHelper, IExpression interpolations);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.QuickFixes.CodeStyle.RemoveTabulationCharacterFixBase : ModernScopedQuickFixBase {
    [CompilerGeneratedAttribute]
private ITokenNode <whitespaceToken>P;
    private static char Tabulation;
    private static Char[] ourLineBreaks;
    public string Text { get; }
    protected RemoveTabulationCharacterFixBase(ITokenNode whitespaceToken);
    private static RemoveTabulationCharacterFixBase();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected sealed virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [PureAttribute]
private static string GetLinePrefix(ITokenNode tokenNode);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.QuickFixes.ColorPickerQuickFix : BulbActionBase {
    [NotNullAttribute]
private ColorHintHighlighting myHighlighting;
    public string Text { get; }
    public ColorPickerQuickFix(ColorHintHighlighting highlighting);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private JetRgbaColor GetInvertedColorForTest();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.QuickFixes.CommonErrorsQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Intentions.QuickFixes.CreateDefaultConstructorActionBase : CreateFromUsageActionBase2`2<CreateConstructorDeclarationContext, IReference> {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ITreeNode <anchor>P;
    [NullableAttribute("2")]
protected ITypeElement BaseType { get; }
    protected AccessRights AccessRights { get; }
    public string Text { get; }
    [NullableContextAttribute("2")]
protected CreateDefaultConstructorActionBase(ITreeNode anchor);
    [NullableContextAttribute("2")]
protected abstract virtual ITypeElement get_BaseType();
    protected abstract virtual AccessRights get_AccessRights();
    public virtual string get_Text();
    protected virtual bool IsAvailableInternal();
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    public sealed virtual IAnchor GetCustomAnchor();
    protected virtual CreateConstructorDeclarationContext CreateContext();
    protected virtual ICreationTarget GetTarget();
    protected virtual IntentionResult ExecuteIntention(CreateConstructorDeclarationContext context);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.CustomPatterns.EditCustomPatternAction : object {
    [NotNullAttribute]
private CustomPattern myPattern;
    private IStructuralSearchActionManager myActionManager;
    public string Text { get; }
    public EditCustomPatternAction(CustomPattern pattern, IStructuralSearchActionManager actionManager);
    public sealed virtual string get_Text();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
}
[CustomHighlightingActionProviderAttribute("JetBrains.ProjectModel.KnownProjectFileType")]
public class JetBrains.ReSharper.Intentions.QuickFixes.CustomPatterns.EditCustomPatternProvider : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.QuickFixes.CustomPatterns.EditCustomPatternProvider/<GetActions>d__0")]
public sealed virtual IEnumerable`1<IntentionAction> GetActions(IHighlighting highlighting, DocumentRange highlightingRange, IPsiSourceFile sourceFile, IAnchor configureAnchor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.QuickFixes.CustomPatterns.StructuralPatternReplaceFix : ModernScopedQuickFixWithCustomExecutor {
    private ICustomPattern myCustomPattern;
    private IStructuralMatchResult myMatchResult;
    public string Text { get; }
    public string ScopedText { get; }
    public StructuralPatternReplaceFix(StructuralSearchPatternHighlightingBase warning);
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual ScopedActionExecutor GetScopedQuickFixExecutor(ISolution solution, IScopedFixingStrategy fixingStrategy, PsiLanguageType languageType);
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
}
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.ContextActions.EncapsulateFieldAction")]
public class JetBrains.ReSharper.Intentions.QuickFixes.EncapsulateFieldFix : QuickFixBase {
    [CanBeNullAttribute]
private IDeclaredElement myElement;
    [CanBeNullAttribute]
private IReference myReference;
    public string Text { get; }
    public EncapsulateFieldFix(IDeclaredElement element);
    public EncapsulateFieldFix(IReference reference);
    public EncapsulateFieldFix(UnusedFieldWarningBase error);
    public EncapsulateFieldFix(UnusedFieldCompilerWarning error);
    public EncapsulateFieldFix(NotAccessedFieldWarningBase error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual void Execute(ISolution solution, ITextControl textControl);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.FolderDoNotProvideNamespaceFix : QuickFixBase {
    [NotNullAttribute]
private ITypeAndNamespaceHolderDeclaration myHolderDeclaration;
    [NotNullAttribute]
private string myActualNamespace;
    [CanBeNullAttribute]
private IProjectFolder myProjectFolderToSkip;
    public string Text { get; }
    public FolderDoNotProvideNamespaceFix(CheckNamespaceWarning highlighting);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public interface JetBrains.ReSharper.Intentions.QuickFixes.IBaseClassFixer {
    public abstract virtual void ChangeBaseClass(IDeclaration typeDeclaration, IType baseType);
}
public interface JetBrains.ReSharper.Intentions.QuickFixes.IColorPickerDialogProvider {
    public abstract virtual Nullable`1<JetRgbaColor> ShowColorPickerDialog(Nullable`1<JetRgbaColor> preselectedColor, ISolution solution);
}
public interface JetBrains.ReSharper.Intentions.QuickFixes.IEntityFromExternalSourcesImporterBase {
    public bool IsAvailable { get; }
    public abstract virtual bool get_IsAvailable();
    [NotNullAttribute]
public abstract virtual IntentionAction GetAction(ImportTypeContext importTypeContext, IAnchor customAnchor);
}
public interface JetBrains.ReSharper.Intentions.QuickFixes.IImportTypeHelper {
    [NotNullAttribute]
[ItemNotNullAttribute]
[PureAttribute]
public abstract virtual IEnumerable`1<ITypeElement> FindTypeCandidates(IReference reference, ImportTypeCacheFactory factory);
    [PureAttribute]
public abstract virtual bool ReferenceTargetCanBeType(IReference reference);
    [PureAttribute]
public abstract virtual bool ReferenceTargetIsUnlikelyBeType(IReference reference);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Intentions.QuickFixes.IMakeAbstractIntention {
    public abstract virtual bool CanMakeAbstract(IModifiersOwnerDeclaration declaration);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.ImportOneOfGenericTypesAction : ImportTypeAction {
    [NotNullAttribute]
private string myFormat;
    [NotNullAttribute]
private ITypeElement[] myGenericTypeElements;
    [NotNullAttribute]
private IReference myReference;
    public string Text { get; }
    public IconId Icon { get; }
    public bool IsValid { get; }
    public ImportOneOfGenericTypesAction(string format, IReference reference, ITypeElement[] genericTypeElements);
    public virtual string get_Text();
    public virtual IconId get_Icon();
    public virtual bool get_IsValid();
    [CanBeNullAttribute]
private ITypeElement FirstValid();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.ImportPath.IgnorePathBulbItem : BulbActionBase {
    private IPathReference myPathReference;
    private VirtualFileSystemPath myRelativePath;
    public string Text { get; }
    public IgnorePathBulbItem(IPathReference pathReference, VirtualFileSystemPath path);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.ImportPath.ImportPathBulbItem : BulbActionBase {
    [NotNullAttribute]
public IPathReference Reference;
    [NotNullAttribute]
public IPathDeclaredElement PathElement;
    public string Text { get; }
    public ImportPathBulbItem(IPathReference reference, IPathDeclaredElement pathElement);
    public virtual string get_Text();
    [NotNullAttribute]
private string GetKindName();
    [NotNullAttribute]
private string GetLocation();
    [CanBeNullAttribute]
public IProjectItem GetProjectItem();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public static class JetBrains.ReSharper.Intentions.QuickFixes.ImportPath.ImportPathPopupQuickFixUtil : object {
    public static string PopupMenuCaption;
    public static Anchoring2D[] PopupAnchorings { get; }
    private static ImportPathPopupQuickFixUtil();
    public static Anchoring2D[] get_PopupAnchorings();
    public static void FillMenuItemDescriptor(IBulbAction key, IMenuItemDescriptor descriptor);
}
public static class JetBrains.ReSharper.Intentions.QuickFixes.ImportPath.ImportPathQuickFixUtil : object {
    [NotNullAttribute]
public static IBulbAction[] CreateActions(IPathReference pathReference, IList`1<IPathDeclaredElement> pathElements);
    [NotNullAttribute]
public static IList`1<IPathDeclaredElement> CalculatePathElements(IPathReference pathReference);
    [NotNullAttribute]
public static IList`1<IPathDeclaredElement> CalculatePathElements(IPathReference pathReference, IProjectModelElement project);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.ImportPath.SetPathMappingBulbItem : BulbActionBase {
    private IPathReference myPathReference;
    private VirtualFileSystemPath myRelativePath;
    public string Text { get; }
    public SetPathMappingBulbItem(IPathReference pathReference, VirtualFileSystemPath path);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
private void <ExecutePsiTransaction>b__5_0(ITextControl control);
}
public abstract class JetBrains.ReSharper.Intentions.QuickFixes.ImportQuickFixBase : object {
    [NotNullAttribute]
private ResolveErrorType[] myAcceptedResolveErrors;
    [CompilerGeneratedAttribute]
private IReference <Reference>k__BackingField;
    [CanBeNullAttribute]
protected IReference Reference { get; }
    protected ImportQuickFixBase(IReference reference, ResolveErrorType[] acceptedResolveErrors);
    [CompilerGeneratedAttribute]
protected IReference get_Reference();
    [ItemNotNullAttribute]
[NotNullAttribute]
public abstract virtual IEnumerable`1<IBulbAction> CreateBulbActions();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [PureAttribute]
private static int GetTypeElementScore(ITypeElement typeElement, TargetFrameworkId currentTargetFrameworkId);
    protected virtual bool IsCaseSensitiveLookup(ITreeNode context);
    protected virtual ISymbolScope GetSymbolScope(ITreeNode context);
    [NotNullAttribute]
protected virtual ImportTypeResolver TypeResolverFactory(ITreeNode context);
    [NotNullAttribute]
protected virtual IEnumerable`1<ITypeElement> FilterConflicts(IEnumerable`1<ITypeElement> typeElements, IReference reference);
    [NotNullAttribute]
protected OneToListMap`2<INamespace, TypeElementWithFullClrName> FindCandidateTypeElements(IReference reference);
    [NotNullAttribute]
[PureAttribute]
private static IEnumerable`1<ITypeElement> IgnoreResolveResultCandidates(IEnumerable`1<ITypeElement> typeElements, IReference reference);
    [NotNullAttribute]
protected OneToListMap`2<ITypeElement, IMethod> AlternativesMethod(IReference reference);
    [NotNullAttribute]
[PureAttribute]
public static string PresentModule(IPsiModule psiModule);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.ImportSingleTypeAction : ImportTypeAction {
    [NotNullAttribute]
private string myFormat;
    [NotNullAttribute]
private IReference myReference;
    [NotNullAttribute]
private ITypeElement myTypeElement;
    public string Text { get; }
    public IconId Icon { get; }
    public bool IsValid { get; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public ImportSingleTypeAction(string format, IReference reference, ITypeElement typeElement);
    public virtual string get_Text();
    public virtual IconId get_Icon();
    public virtual bool get_IsValid();
    public sealed virtual string get_ScopedText();
    public sealed virtual FileCollectorInfo get_FileCollectorInfo();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private sealed virtual override Action`1<ITextControl> JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Actions.IManualScopedAction.ExecuteAction(ISolution solution, Scope scope, IHighlighting sourceHighlighting, IProgressIndicator progress);
}
public abstract class JetBrains.ReSharper.Intentions.QuickFixes.ImportTypeAction : BulbActionBase {
    [CompilerGeneratedAttribute]
private bool <QualifyWithAssemblyName>k__BackingField;
    public IconId Icon { get; }
    public bool IsValid { get; }
    public bool QualifyWithAssemblyName { get; public set; }
    public abstract virtual IconId get_Icon();
    public abstract virtual bool get_IsValid();
    [CompilerGeneratedAttribute]
public bool get_QualifyWithAssemblyName();
    [CompilerGeneratedAttribute]
public void set_QualifyWithAssemblyName(bool value);
}
[NotNullAttribute]
public class JetBrains.ReSharper.Intentions.QuickFixes.ImportTypeCacheFactory : MulticastDelegate {
    public ImportTypeCacheFactory(object object, IntPtr method);
    public virtual ImportTypeResolver Invoke(ITreeNode context);
    public virtual IAsyncResult BeginInvoke(ITreeNode context, AsyncCallback callback, object object);
    public virtual ImportTypeResolver EndInvoke(IAsyncResult result);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.ImportTypeContext : object {
    private InterruptibleLazy`1<IProject> myLazyProject;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    public string TypeName { get; }
    public IProject Project { get; }
    public ImportTypeContext(string typeName, Func`1<IProject> projectFactory);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    public IProject get_Project();
}
public class JetBrains.ReSharper.Intentions.QuickFixes.ImportTypeFix : ScopedImportQuickFixBase {
    [NotNullAttribute]
protected string Format { get; }
    public ImportTypeFix(IReference reference);
    protected virtual string get_Format();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual IEnumerable`1<IBulbAction> CreateBulbActions();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.QuickFixes.ImportTypeFix/<FilterConflicts>d__6")]
protected virtual IEnumerable`1<ITypeElement> FilterConflicts(IEnumerable`1<ITypeElement> typeElements, IReference reference);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.QuickFixes.ImportTypeFix/<ContainingNamespaces>d__7")]
[NotNullAttribute]
[ItemNotNullAttribute]
private static IEnumerable`1<INamespace> ContainingNamespaces(ITypeElement type);
    [NotNullAttribute]
private ImportTypeAction CreateImportActionByCount(ITypeElement[] typeElements);
    private static Pair`2<IPsiModule, IDeclaredElement> GetTypeContainer(TypeElementWithFullClrName typeWithName);
    protected virtual ImportTypeResolver TypeResolverFactory(ITreeNode context);
    [CompilerGeneratedAttribute]
internal static bool <FilterConflicts>g__HasCollisions|6_0(INamespace nameSpace, <>c__DisplayClass6_0& );
}
public abstract class JetBrains.ReSharper.Intentions.QuickFixes.ImportTypeFromExternalSourcesFixBase : object {
    [CanBeNullAttribute]
protected IReference Reference;
    protected ImportTypeFromExternalSourcesFixBase(IReference reference);
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NotNullAttribute]
protected IEnumerable`1<ITypeFromExternalSourcesImporter> GetTypeImporters(IReference reference);
    [CanBeNullAttribute]
[PureAttribute]
protected virtual string GetTypeName(IReference reference);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.QuickFixes.ImportTypeFromExternalSourcesFixBase/<CreateBulbItems>d__5")]
public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [CanBeNullAttribute]
private IProject GetProject();
}
public class JetBrains.ReSharper.Intentions.QuickFixes.ImportTypeQuickPopupFix : ImportTypeFix {
    protected string Format { get; }
    public string PopupKey { get; }
    public string PopupMenuCaption { get; }
    public Anchoring2D[] PopupAnchorings { get; }
    public ImportTypeQuickPopupFix(IReference reference);
    protected virtual string get_Format();
    public sealed virtual string GetScopedPopupText(IBulbAction bulbAction);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual bool IsCaseSensitiveLookup(ITreeNode context);
    public sealed virtual void FillMenuItemDescriptor(IBulbAction key, IMenuItemDescriptor descriptor);
    public sealed virtual string get_PopupKey();
    public sealed virtual string get_PopupMenuCaption();
    public sealed virtual Anchoring2D[] get_PopupAnchorings();
    public sealed virtual void OnPopupShown(Lifetime showingLifetime);
}
[NotNullAttribute]
public class JetBrains.ReSharper.Intentions.QuickFixes.ImportTypeResolver : MulticastDelegate {
    public ImportTypeResolver(object object, IntPtr method);
    public virtual IEnumerable`1<IClrDeclaredElement> Invoke(string name);
    public virtual IAsyncResult BeginInvoke(string name, AsyncCallback callback, object object);
    public virtual IEnumerable`1<IClrDeclaredElement> EndInvoke(IAsyncResult result);
}
public static class JetBrains.ReSharper.Intentions.QuickFixes.ImportTypeUtil : object {
    [PureAttribute]
public static bool IsAvailableForLanguage(PsiLanguageType language);
    [NotNullAttribute]
[PureAttribute]
public static IEnumerable`1<ITypeElement> FindTypeCandidates(IReference reference, ImportTypeCacheFactory factory);
    [PureAttribute]
public static bool ReferenceTargetCanBeType(IReference reference);
    [PureAttribute]
public static bool ReferenceTargetIsUnlikelyBeType(IReference reference);
    [PureAttribute]
public static bool TypeIsVisible(ITypeElement typeElement, ITreeNode context);
    [PureAttribute]
public static bool TypeHasTypeParametersCount(ITypeElement targetTypeElement, int typeParametersCount);
}
public interface JetBrains.ReSharper.Intentions.QuickFixes.INamespaceFromExternalSourcesImporter {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.QuickFixes.IncreaseTypeVisibilityFixBase : IncreaseVisibilityFixBase {
    protected IReference TypeUsageReference;
    protected IncreaseTypeVisibilityFixBase(ITypeMember accessibleElement, IReference typeUsageReference);
    public virtual bool IsAvailable(IUserDataHolder cache);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.QuickFixes.IncreaseTypeVisibilityFixBase/<GetElementsToFix>d__3")]
protected virtual IEnumerable`1<ITypeMember> GetElementsToFix();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.QuickFixes.IncreaseVisibilityFixBase : ModernQuickFixBase {
    protected ITypeMember AccessibleElement;
    public string Text { get; }
    protected IncreaseVisibilityFixBase(ITypeMember accessibleElement);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected abstract virtual IEnumerable`1<ITypeMember> GetElementsToFix();
    private static IEnumerable`1<AccessRights> GetIncrementPolicy(IModifiersOwner owner);
    protected abstract virtual PsiLanguageType GetLanguage();
}
public interface JetBrains.ReSharper.Intentions.QuickFixes.IQuickFixUtilComponent {
    [CanBeNullAttribute]
public abstract virtual IReference BindTo(IReference reference, ITypeElement typeElement, Action`1& moveCaretAction, bool targetHasGenericOverloads);
    [CanBeNullAttribute]
public abstract virtual IReference AddImportsForExtensionMethod(IReference reference, IList`1<IMethod> extensionMethods);
}
public interface JetBrains.ReSharper.Intentions.QuickFixes.ITypeFromExternalSourcesImporter {
}
public interface JetBrains.ReSharper.Intentions.QuickFixes.IVisibilityFixLanguageHelper {
    [PureAttribute]
public abstract virtual bool CanFixAccessibility(IReference reference);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.QuickFixes.MakeAbstractFix : ModifierFixBase {
    public static Key InstanceKey;
    protected string ModifiersText { get; }
    public MakeAbstractFix(IDeclaredElement element);
    public MakeAbstractFix(ClassNeverInstantiatedWarningBase error);
    private static MakeAbstractFix();
    protected virtual string get_ModifiersText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual void SetModifiers(IModifiersOwnerDeclaration declaration);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.MakeFileLocalFix : VisibilityFixBase {
    [NullableContextAttribute("1")]
public MakeFileLocalFix(MemberCanBeFileLocalWarning error);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.MakeInternalFix : VisibilityFixBase {
    protected bool mySkipCheck;
    public MakeInternalFix(MemberCanBeInternalWarning error);
    public MakeInternalFix(IModifiersOwnerDeclaration ownerDeclaration, bool updateHierarchy, bool skipCheck);
    public MakeInternalFix(IModifiersOwner modifiersOwner, bool updateHierarchy);
    protected MakeInternalFix(IReference reference, ITypeMember typeMember);
    public MakeInternalFix(IReference reference);
    protected virtual bool IsAvailableEx();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.QuickFixes.MakeNonReadonlyFix : ModifierFixBase {
    protected string ModifiersText { get; }
    [NullableContextAttribute("2")]
public MakeNonReadonlyFix(IDeclaredElement element);
    protected virtual string get_ModifiersText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual void SetModifiers(IModifiersOwnerDeclaration declaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.QuickFixes.MakeNonStaticFix : ModifierFixBase {
    protected string ModifiersText { get; }
    [NullableContextAttribute("2")]
public MakeNonStaticFix(IDeclaredElement element);
    protected virtual string get_ModifiersText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual void SetModifiers(IModifiersOwnerDeclaration declaration);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.MakePrivateFix : VisibilityFixBase {
    public MakePrivateFix(MemberCanBePrivateWarningBase error);
    public MakePrivateFix(IModifiersOwnerDeclaration ownerDeclaration, bool updateHierarchy);
    public MakePrivateFix(IModifiersOwner modifiersOwner, bool updateHierarchy);
    public MakePrivateFix(IReference reference, ITypeMember typeMember);
    public MakePrivateFix(IReference reference);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.MakePrivateProtectedFix : VisibilityFixBase {
    public MakePrivateProtectedFix(IModifiersOwnerDeclaration ownerDeclaration, bool updateHierarchy);
    public MakePrivateProtectedFix(IModifiersOwner modifiersOwner, bool updateHierarchy);
    public MakePrivateProtectedFix(IReference reference, ITypeMember typeMember);
    public MakePrivateProtectedFix(IReference reference);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.MakeProtectedFix : VisibilityFixBase {
    protected bool mySkipCheck;
    public MakeProtectedFix(MemberCanBeProtectedWarningBase error);
    public MakeProtectedFix(IModifiersOwnerDeclaration ownerDeclaration, bool updateHierarchy);
    public MakeProtectedFix(IModifiersOwner modifiersOwner, bool updateHierarchy);
    public MakeProtectedFix(IReference reference, ITypeMember typeMember);
    public MakeProtectedFix(IReference reference);
    protected virtual bool IsAvailableEx();
}
public class JetBrains.ReSharper.Intentions.QuickFixes.MakeProtectedInternalFix : VisibilityFixBase {
    public MakeProtectedInternalFix(IModifiersOwnerDeclaration ownerDeclaration, bool updateHierarchy);
    public MakeProtectedInternalFix(IModifiersOwner modifiersOwner, bool updateHierarchy);
    public MakeProtectedInternalFix(IReference reference, ITypeMember typeMember);
    public MakeProtectedInternalFix(IReference reference);
    protected virtual bool IsAvailableEx();
}
public class JetBrains.ReSharper.Intentions.QuickFixes.MakePublicFix : VisibilityFixBase {
    public MakePublicFix(IModifiersOwnerDeclaration ownerDeclaration, bool updateHierarchy);
    public MakePublicFix(IModifiersOwner modifiersOwner, bool updateHierarchy);
    public MakePublicFix(IReference reference, ITypeMember typeMember);
    public MakePublicFix(IReference reference, bool updateHierarchy);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.QuickFixes.MakeStaticFix : ModifierFixBase {
    protected string ModifiersText { get; }
    public MakeStaticFix(IDeclaredElement typeMember);
    public MakeStaticFix(LocalFunctionCanBeMadeStaticWarning warning);
    protected virtual string get_ModifiersText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual void SetModifiers(IModifiersOwnerDeclaration declaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.QuickFixes.ModifierFixBase : ModernScopedNonIncrementalQuickFixBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IDeclaredElement <Element>k__BackingField;
    [NullableAttribute("2")]
protected IDeclaredElement Element { get; }
    [NullableAttribute("2")]
protected IModifiersOwner ModifiersOwner { get; }
    protected PsiLanguageType Language { get; }
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    protected string ModifiersText { get; }
    [NullableContextAttribute("2")]
protected ModifierFixBase(IDeclaredElement element);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected IDeclaredElement get_Element();
    [NullableContextAttribute("2")]
protected IModifiersOwner get_ModifiersOwner();
    protected PsiLanguageType get_Language();
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool get_IsReanalysisRequired();
    protected abstract virtual string get_ModifiersText();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected abstract virtual void SetModifiers(IModifiersOwnerDeclaration declaration);
    [PureAttribute]
protected static string Negate(string modifier);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.MoveToFolderQuickFix : object {
    private Lazy`1<IBulbAction[]> myItems;
    public IBulbAction[] Items { get; }
    public MoveToFolderQuickFix(CheckNamespaceWarning highlighting);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public IBulbAction[] get_Items();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    private static IProjectFile GetProjectFile(ITypeAndNamespaceHolderDeclaration holderDeclaration);
    [CanBeNullAttribute]
private static IBulbAction[] CreateItems(CheckNamespaceWarning highlighting);
    private static string NamespaceSuffix(IProjectFolder prefixFolder, INamespace namspace, PsiLanguageType language);
    private static IEnumerable`1<IProjectFolder> LongestPrefixFoldersForNamespace(IProject project, INamespace namspace, PsiLanguageType language);
    private static bool Collect(IProjectFolder projectFolder, List`1<IProjectFolder> candidates, String[] targetFqn, PsiLanguageType language);
    private static bool StartsWithOrEqual(String[] targetFqn, String[] prefixFqn);
    private static Action`1<ITextControl> DoMoveToFolder(ISolution solution, ITypeAndNamespaceHolderDeclaration typeAndNamespaceHolderDeclaration, IProjectFolder target);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.MoveTypeToOuterScopeFix : QuickFixBase {
    [CanBeNullAttribute]
private ITypeElement myElement;
    public string Text { get; }
    public MoveTypeToOuterScopeFix(ITypeElement element);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual void Execute(ISolution solution, ITextControl textControl);
}
[CustomHighlightingActionProviderAttribute("JetBrains.ProjectModel.KnownProjectFileType")]
public class JetBrains.ReSharper.Intentions.QuickFixes.Naming.AddAbbreviationActionProvider : object {
    [NotNullAttribute]
private UserFriendlySettingsLayers myUserFriendlySettingsLayers;
    public AddAbbreviationActionProvider(UserFriendlySettingsLayers userFriendlySettingsLayers);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.QuickFixes.Naming.AddAbbreviationActionProvider/<GetActions>d__2")]
public sealed virtual IEnumerable`1<IntentionAction> GetActions(IHighlighting highlighting, DocumentRange highlightingRange, IPsiSourceFile sourceFile, IAnchor configureAnchor);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.QuickFixes.Naming.InconsistentNamingQuickFixRegistrar : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.Naming.RemoveAbbreviationFix : object {
    [CanBeNullAttribute]
private IDeclaredElement myElement;
    private PsiLanguageType myLanguage;
    public RemoveAbbreviationFix(InconsistentNamingWarningBase error);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.QuickFixes.Naming.RemoveAbbreviationFix/<GetCandidates>d__5")]
private IEnumerable`1<string> GetCandidates();
    [CanBeNullAttribute]
private static NamingPolicy GetNammingRule(IDeclaredElement element, IDeclaration declaration);
    [CompilerGeneratedAttribute]
private IBulbAction <CreateBulbItems>b__4_0(string candidate);
}
public abstract class JetBrains.ReSharper.Intentions.QuickFixes.Naming.RenameRefactoringFix : RenameRefactoringItem {
    [NullableContextAttribute("2")]
protected RenameRefactoringFix(IDeclaredElement element);
    [NullableContextAttribute("1")]
public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("1")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.QuickFixes.Naming.RenameRefactoringItem : object {
    [NullableAttribute("2")]
protected IDeclaredElement Element;
    public string Text { get; }
    public string NewName { get; }
    [NullableContextAttribute("2")]
protected RenameRefactoringItem(IDeclaredElement element);
    public virtual string get_Text();
    public virtual string get_NewName();
    public bool IsAvailable();
    public virtual void Execute(ISolution solution, ITextControl textControl);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.NuGet.EntityFromNuGetImporterBase : object {
    [NotNullAttribute]
private NuGetToolWindowAdapter myNuGetToolWindowAdapter;
    [NotNullAttribute]
private NuGetConfigManager myConfigManager;
    [NotNullAttribute]
private string myEntityName;
    private NuGetLookupMode myMode;
    public bool IsAvailable { get; }
    public EntityFromNuGetImporterBase(NuGetToolWindowAdapter nuGetToolWindowAdapter, NuGetConfigManager configManager, string entityName, NuGetLookupMode mode);
    private bool HasNuGetOrgFeedEnabled();
    public sealed virtual bool get_IsAvailable();
    public sealed virtual IntentionAction GetAction(ImportTypeContext importTypeContext, IAnchor customAnchor);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Intentions.QuickFixes.NuGet.NamespaceFromNuGetImporter : EntityFromNuGetImporterBase {
    public NamespaceFromNuGetImporter(NuGetToolWindowAdapter nuGetToolWindowAdapter, NuGetConfigManager configManager);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Intentions.QuickFixes.NuGet.TypeFromNuGetImporter : EntityFromNuGetImporterBase {
    public TypeFromNuGetImporter(NuGetToolWindowAdapter nuGetToolWindowAdapter, NuGetConfigManager configManager);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Intentions.QuickFixes.NuGet.ZoneMarker : object {
}
public class JetBrains.ReSharper.Intentions.QuickFixes.QuickFix : object {
    [NotNullAttribute]
private Lazy`1<IBulbAction[]> myItems;
    public IBulbAction[] Items { get; }
    public QuickFix(Lazy`1<IBulbAction[]> items);
    public QuickFix(Func`1<IEnumerable`1<IBulbAction>> items);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public IBulbAction[] get_Items();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public static class JetBrains.ReSharper.Intentions.QuickFixes.QuickFixUtil : object {
    [CanBeNullAttribute]
public static IReference BindTo(IReference reference, ITypeElement typeElement);
    [CanBeNullAttribute]
public static IReference BindTo(IReference reference, ITypeElement typeElement, Action`1& moveCaretAction, bool targetHasGenericOverloads);
    [CanBeNullAttribute]
public static IReference BindTo(IReference reference, IList`1<IMethod> methods);
    public static ITypeElement ChooseTypeElement(IList`1<IDeclaredElement> candidates);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.ReferenceModuleAndTypeFix : ImportQuickFixBase {
    [NotNullAttribute]
private ModuleReferencerService myModuleReferencerService;
    public ReferenceModuleAndTypeFix(IReference reference);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual IEnumerable`1<IBulbAction> CreateBulbActions();
    protected virtual ISymbolScope GetSymbolScope(ITreeNode context);
    protected virtual ImportTypeResolver TypeResolverFactory(ITreeNode context);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.ReferenceModuleAndTypeFixItem : BulbActionBase {
    [NotNullAttribute]
private ModuleReferencerService myModuleReferencerService;
    [NotNullAttribute]
private IDeclaredElementPointer`1<ITypeElement> myTypeElement;
    [CanBeNullAttribute]
private string myPackageId;
    [NotNullAttribute]
private IReferencePointer myReference;
    [NotNullAttribute]
private PsiLanguageType myReferenceLanguage;
    [NotNullAttribute]
private string myReferenceName;
    private DocumentRange myReferenceRange;
    [NotNullAttribute]
private Type myReferenceType;
    private bool myWasReferenced;
    [CanBeNullAttribute]
private ITypeElement TypeElement { get; }
    public string Text { get; }
    public ReferenceModuleAndTypeFixItem(ModuleReferencerService moduleReferencerService, IReference reference, ITypeElement typeElement, string packageId);
    private ITypeElement get_TypeElement();
    public virtual string get_Text();
    [CanBeNullAttribute]
private IReference ResolveReference(ISolution solution);
    protected virtual void ExecuteBeforePsiTransaction(ISolution solution, IProjectModelTransactionCookie cookie, IProgressIndicator progress);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.QuickFixes.ReferenceModuleFixBase : QuickFixBase {
    protected ITreeNode myElement;
    private ModuleReferencerService myModuleReferencerService;
    public string Text { get; }
    protected ReferenceModuleFixBase(ITreeNode element);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual string get_Text();
    protected abstract virtual HybridCollection`1<IReferenceAction> FindModulesToReference(ModuleReferencerService moduleReferencerService);
    protected IModule FindModuleByShortName(IPsiModule context, string name);
    protected VirtualFileSystemPath FindAssemblyByName(string name);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
private bool <IsAvailable>b__3_0(IReferenceAction m);
}
public abstract class JetBrains.ReSharper.Intentions.QuickFixes.ScopedImportQuickFixBase : ImportQuickFixBase {
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    protected ScopedImportQuickFixBase(IReference reference, ResolveErrorType[] acceptedResolveErrors);
    public virtual string get_ScopedText();
    public sealed virtual FileCollectorInfo get_FileCollectorInfo();
    public sealed virtual Action`1<ITextControl> ExecuteAction(ISolution solution, Scope scope, IHighlighting sourceHighlighting, IProgressIndicator progress);
    [PureAttribute]
public static bool IsScopedImportReference(IReference reference);
}
public static class JetBrains.ReSharper.Intentions.QuickFixes.SetLanguageLevelFixAnchors : object {
    [NotNullAttribute]
public static InvisibleAnchor SetLanguageLevelFixAnchor;
    [NotNullAttribute]
public static IAnchor SetLanguageVersionToLatestAnchor;
    [NotNullAttribute]
public static IAnchor SetLanguageVersionToLatestMajorAnchor;
    [NotNullAttribute]
public static IAnchor SetLanguageVersionAnchor;
    [NotNullAttribute]
public static IAnchor OverrideLanguageLevelAnchor;
    private static SetLanguageLevelFixAnchors();
}
public abstract class JetBrains.ReSharper.Intentions.QuickFixes.SetLanguageLevelFixBase`2 : BulbActionBase {
    protected static ILogger Logger;
    [CompilerGeneratedAttribute]
private ITreeNode <TreeNode>k__BackingField;
    [CompilerGeneratedAttribute]
private TLanguageLevel <LanguageLevel>k__BackingField;
    [CanBeNullAttribute]
protected ITreeNode TreeNode { get; protected set; }
    protected TLanguageLevel LanguageLevel { get; protected set; }
    public string Text { get; }
    protected TLanguageVersion LatestLanguageVersion { get; }
    protected TLanguageVersion LatestMajorLanguageVersion { get; }
    protected TLanguageVersion PreviewLanguageVersion { get; }
    [NotNullAttribute]
protected IComparer`1<TLanguageLevel> LanguageLevelComparer { get; }
    [NotNullAttribute]
protected Key`1<Boxed`1<TLanguageLevel>> LanguageLevelPsiDataCacheKey { get; }
    protected SetLanguageLevelFixBase`2(ITreeNode treeNode, TLanguageLevel languageLevel);
    private static SetLanguageLevelFixBase`2();
    [CompilerGeneratedAttribute]
protected ITreeNode get_TreeNode();
    [CompilerGeneratedAttribute]
protected void set_TreeNode(ITreeNode value);
    [CompilerGeneratedAttribute]
protected TLanguageLevel get_LanguageLevel();
    [CompilerGeneratedAttribute]
protected void set_LanguageLevel(TLanguageLevel value);
    public bool IsAvailable(IUserDataHolder cache);
    public sealed virtual string get_Text();
    protected sealed virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected abstract virtual TLanguageVersion get_LatestLanguageVersion();
    protected abstract virtual TLanguageVersion get_LatestMajorLanguageVersion();
    protected abstract virtual TLanguageVersion get_PreviewLanguageVersion();
    protected abstract virtual IComparer`1<TLanguageLevel> get_LanguageLevelComparer();
    protected abstract virtual Key`1<Boxed`1<TLanguageLevel>> get_LanguageLevelPsiDataCacheKey();
    public IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual IntentionAction ToIntention(IBulbActionWithCustomAnchor<TLanguageLevel, TLanguageVersion> bulbAction);
    [CanBeNullAttribute]
private static ILanguageLevelProvider`2<TLanguageLevel, TLanguageVersion> GetLanguageLevelProvider(IPsiModule psiModule);
    [CompilerGeneratedAttribute]
private IBulbActionWithCustomAnchor<TLanguageLevel, TLanguageVersion> <CreateBulbItems>g__CreateSetCompilerLanguageVersionAction|25_0(TLanguageVersion languageVersion, bool isSolutionWide, <>c__DisplayClass25_0& );
}
internal class JetBrains.ReSharper.Intentions.QuickFixes.TodoItems.LocateInTodoExplorerAction : QuickFixBase {
    [NotNullAttribute]
private ITodoItem myTodoItem;
    public string Text { get; }
    public LocateInTodoExplorerAction(TodoItemHighlightingBase highlighting);
    private LocateInTodoExplorerAction(ITodoItem todoItem);
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual void Execute(ISolution solution, ITextControl textControl);
    public virtual bool IsAvailable(IUserDataHolder cache);
    [CanBeNullAttribute]
[PureAttribute]
private ITodoExplorer TryGetTodoExplorer();
}
internal class JetBrains.ReSharper.Intentions.QuickFixes.TodoItems.OpenTodoLinkAction : QuickFixBase {
    [NotNullAttribute]
private Uri myTodoUri;
    public string Text { get; }
    public OpenTodoLinkAction(TodoItemHyperlinkHighlighting highlighting);
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual void Execute(ISolution solution, ITextControl textControl);
    public virtual bool IsAvailable(IUserDataHolder cache);
    [CompilerGeneratedAttribute]
private void <Execute>b__6_0();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.QuickFixes.TodoItems.TodoItemsQuickFixRegistrar : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
internal class JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.ChangeDefaultPropertyAccessRightsAction : BulbActionBase {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`2<AccessRights, AccessRights> myPropertyAccessRights;
    private IMemberFromParameterLanguageHelper myHelper;
    public string Text { get; }
    public ChangeDefaultPropertyAccessRightsAction(ValueTuple`2<AccessRights, AccessRights> propertyAccessRights, IMemberFromParameterLanguageHelper helper);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.CommentUnusedMemberFix : BulbActionBase {
    [NotNullAttribute]
private IDeclaration myDeclaration;
    public string Text { get; }
    public CommentUnusedMemberFix(UnusedMemberWarningBase error);
    public CommentUnusedMemberFix(UnusedTypeWarningBase error);
    public CommentUnusedMemberFix(UnusedFieldWarningBase error);
    public CommentUnusedMemberFix(UnusedFieldCompilerWarning error);
    public CommentUnusedMemberFix(UnusedLocalFunctionWarning error);
    public CommentUnusedMemberFix(UnusedLocalFunctionCompilerWarning error);
    private CommentUnusedMemberFix(IDeclaration declaration);
    public virtual string get_Text();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CustomHighlightingActionProviderAttribute("JetBrains.ProjectModel.KnownProjectFileType")]
public class JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.ConfigureAnnotationsFixProvider : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.ConfigureAnnotationsFixProvider/<GetActions>d__0")]
public sealed virtual IEnumerable`1<IntentionAction> GetActions(IHighlighting highlighting, DocumentRange highlightingRange, IPsiSourceFile sourceFile, IAnchor configureAnchor);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.FixReturnTypeFix : BulbActionBase {
    private ITypeOwnerDeclaration myDeclaration;
    private IType myType;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public FixReturnTypeFix(ReturnTypeCanBeEnumerableWarningBase error);
    public FixReturnTypeFix(PropertyTypeCanBeEnumerableWarningBase error);
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.QuickFixes.IQuickFix.IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private void UpdateType(IDeclaredElement element);
}
public interface JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.ICallSiteFieldToConstConverter {
    public abstract virtual void Convert(IReference callSiteReference, IField const);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.IFixTypeLanguageHelper {
    public abstract virtual bool IsArrayLengthAccess(IReference reference);
    public abstract virtual void FixArrayLengthAccess(IReference reference);
    public abstract virtual bool NaturalizeArgumentExpressionTypeBeforeChangingTheParameterType(IReference reference, IParameter parameter);
    public abstract virtual IEnumerable`1<ILocalVariable> LocalsToCorrectType(IDeclaredElement element, IType newType, IExpression usage);
}
public interface JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.IMakeReturnTypeVoidLanguageHelper {
    [NotNullAttribute]
public abstract virtual IType GetVoidReturnType(IDeclaration declaration);
    public abstract virtual void PrepareBodyForReturnRemove(IDeclaration declaration);
    public abstract virtual bool IsReturnStatement(IStatement statement, IExpression& returnValue);
    public abstract virtual bool IsReturnScope(ITreeNode node);
    public abstract virtual void RemoveReturnValue(IStatement returnStatement, IStatement& expressionStatementLeft);
    public abstract virtual string GetQuickFixText(IDeclaration declaration);
}
public interface JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.IMemberFromParameterLanguageHelper {
    public bool CaseSensitive { get; }
    [NotNullAttribute]
public string FieldPattern { get; }
    public bool IsAccessorsWithDifferentAccessSupported { get; }
    [NotNullAttribute]
[PureAttribute]
public abstract virtual IEnumerable`1<IStatement> BodyStatements(IParametersOwnerDeclaration constructorDeclaration);
    [CanBeNullAttribute]
[PureAttribute]
public abstract virtual IExpression BodyExpression(IParametersOwnerDeclaration constructorDeclaration);
    [NotNullAttribute]
[PureAttribute]
public abstract virtual IEnumerable`1<ITypeMemberDeclaration> NeighbourDeclarations(IParametersOwnerDeclaration constructorDeclaration);
    [PureAttribute]
public abstract virtual bool IsMemberAssignment(IStatement statement, ITypeMember& member, IParameter& parameter);
    [PureAttribute]
public abstract virtual bool IsMemberAssignment(IExpression expression, ITypeMember& member, IParameter& parameter);
    [PureAttribute]
public abstract virtual bool IsInitializedInDeclaration(ITypeMember typeMember, IParameter& parameter, ITreeNode& assignmentNode);
    [PureAttribute]
public abstract virtual bool IsMemberWithState(ITypeMember typeMember);
    [PureAttribute]
public abstract virtual bool CanInitialize(ITypeMember typeMember);
    [PureAttribute]
public abstract virtual bool IsCheckOfCodeInvariant(IStatement statement);
    [PureAttribute]
public abstract virtual bool IsPrimaryConstructor(IConstructor constructor, Boolean& isRecord);
    [PureAttribute]
public abstract virtual bool IsPrimaryConstructor(IParametersOwnerDeclaration constructorDeclaration);
    public abstract virtual void EnsureStatementBody(IParametersOwnerDeclaration constructorDeclaration);
    public abstract virtual void AddAssignmentToBody(IParametersOwnerDeclaration constructorDeclaration, IStatement anchorStatement, bool insertBefore, IParameter parameter, ITypeMember member);
    public abstract virtual bool get_CaseSensitive();
    public abstract virtual string get_FieldPattern();
    public abstract virtual bool get_IsAccessorsWithDifferentAccessSupported();
    [PureAttribute]
public abstract virtual bool IsGetOnlyAutoPropertiesSupported(ITreeNode context);
    [NotNullAttribute]
[PureAttribute]
public abstract virtual ValueTuple`2[] GetAutoPropertyAccessRightsOptions(ITreeNode context);
    [CanBeNullAttribute]
[PureAttribute]
public abstract virtual string GetAutoPropertyPattern(ValueTuple`2<AccessRights, AccessRights> propertyAccessRights);
    [NotNullAttribute]
[PureAttribute]
public abstract virtual string GetAutoPropertyDescription(ValueTuple`2<AccessRights, AccessRights> propertyAccessRights);
    [NotNullAttribute]
public abstract virtual ITypeMemberDeclaration AddTypeMemberDeclaration(ITypeDeclaration targetTypeDeclaration, ITypeMemberDeclaration anchorMember, bool insertBefore, string pattern, string name, IType type);
    public abstract virtual void AddConstructorDeclarationStubToStruct(ITypeDeclaration structDeclaration);
    [NotNullAttribute]
public abstract virtual ITypeMemberDeclaration AddConstructorDeclaration(ITypeDeclaration typeDeclaration);
    [PureAttribute]
public abstract virtual bool HasChainedConstructorInitializer(ITypeMemberDeclaration ctorDeclaration, Int32& argumentsCount, IConstructor& targetConstructor);
    public abstract virtual void EnsureHasChainedConstructorInitializer(ITypeMemberDeclaration ctorDeclaration);
    public abstract virtual void PassParameterToChainedConstructorInitializer(ITypeMemberDeclaration ctorDeclaration, string parameterName, ParameterKind kind, int atIndex);
    [NotNullAttribute]
public abstract virtual IParameterDeclaration AddConstructorParameter(ITypeMemberDeclaration ctorDeclaration, string parameterName, ParameterKind kind, IType type, int atIndex);
    [PureAttribute]
public abstract virtual bool IsParameterPassedByChain(ITypeMemberDeclaration ctorDeclaration, IParameterDeclaration parameterDeclaration, Int32& atIndex);
    [PureAttribute]
[CanBeNullAttribute]
public abstract virtual IConstructor TryGetPrimaryConstructor(ITypeElement typeElement);
    [PureAttribute]
public abstract virtual bool IsParameterUsedImplicitly(IParameter parameter);
    [CanBeNullAttribute]
[PureAttribute]
public abstract virtual IParameter TryFindPrimaryConstructorParameterForExplicitMemberWithoutInitializer(ITypeMemberDeclaration typeMemberDeclaration);
    public abstract virtual void InitializeExplicitMemberByPrimaryConstructorParameter(ITypeMemberDeclaration typeMemberDeclaration, IParameter parameter);
    [PureAttribute]
public abstract virtual bool HasArgumentToChainedConstructorParameter(ITypeMemberDeclaration ctorDeclaration, IParameter matchingParameter);
    [PureAttribute]
public abstract virtual bool CanBeAssignedFromParameter(ITypeOwner typeOwner, IParameter parameter, ITreeNode context);
    public abstract virtual void ReplaceAssignmentSourceWithParameter(ITreeNode assignmentNode, IParameter parameter);
    public abstract virtual bool HasDeclarationExpressionsWithUsagesWithExternalUsages(ITreeNode assignmentNode);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.InitializeAutoPropertyFix : InitializeTypeMemberFixBase`1<IProperty> {
    public static Key InstanceKey;
    public string Text { get; }
    protected NamedElementKinds MemberKind { get; }
    protected Key QuickFixInstanceKey { get; }
    public InitializeAutoPropertyFix(UnusedParameterWarningBase error);
    public InitializeAutoPropertyFix(UnusedPositionalParameterCompilerWarning error);
    public InitializeAutoPropertyFix(ParameterOnlyUsedForPreconditionCheckWarningBase error);
    public InitializeAutoPropertyFix(UnusedParameterInPartialMethodWarning error);
    public InitializeAutoPropertyFix(NotAccessedParameterWarningBase error);
    public InitializeAutoPropertyFix(NotAccessedPrimaryConstructorParameterCompilerWarning error);
    public InitializeAutoPropertyFix(IParameterDeclaration parameterDeclaration);
    private static InitializeAutoPropertyFix();
    public virtual string get_Text();
    protected virtual NamedElementKinds get_MemberKind();
    protected virtual Key get_QuickFixInstanceKey();
    protected virtual bool IsSupportedTypeMember(IProperty typeMember);
    [NullableContextAttribute("2")]
protected virtual bool AnchorMembersFilter(ITypeMember member);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.InitializeFieldFix : InitializeFieldFixBase {
    public static Key InstanceKey;
    protected NamedElementKinds MemberKind { get; }
    protected Key QuickFixInstanceKey { get; }
    public InitializeFieldFix(UnusedParameterWarningBase error);
    public InitializeFieldFix(ParameterOnlyUsedForPreconditionCheckWarningBase error);
    public InitializeFieldFix(UnusedParameterInPartialMethodWarning error);
    public InitializeFieldFix(NotAccessedParameterWarningBase error);
    public InitializeFieldFix(NotAccessedPrimaryConstructorParameterCompilerWarning error);
    public InitializeFieldFix(IParameterDeclaration parameterDeclaration);
    private static InitializeFieldFix();
    protected virtual NamedElementKinds get_MemberKind();
    protected virtual Key get_QuickFixInstanceKey();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.InitializeFieldFixBase : InitializeTypeMemberFixBase`1<IField> {
    public string Text { get; }
    protected InitializeFieldFixBase(ParameterOnlyUsedForPreconditionCheckWarningBase error);
    protected InitializeFieldFixBase(IParameterDeclaration parameterDeclaration);
    public sealed virtual string get_Text();
    protected sealed virtual bool IsSupportedTypeMember(IField typeMember);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.InitializeFromConstructorsFix : ModernQuickFixBase {
    private IReadOnlyList`1<ITypeMemberDeclaration> myMemberDeclarations;
    [NullableAttribute("2")]
private IConstructor myTargetConstructor;
    private bool myShowMemberName;
    public static Key InstanceKey;
    public string Text { get; }
    [NullableContextAttribute("2")]
public InitializeFromConstructorsFix(ITypeMemberDeclaration memberDeclaration);
    public InitializeFromConstructorsFix(IEnumerable`1<ITypeMember> typeMembers);
    public InitializeFromConstructorsFix(IEnumerable`1<ITypeMember> typeMembers, IConstructor targetConstructor);
    public InitializeFromConstructorsFix(UnusedMemberWarningBase error);
    public InitializeFromConstructorsFix(UnusedFieldWarningBase error);
    public InitializeFromConstructorsFix(UnusedFieldCompilerWarning error);
    public InitializeFromConstructorsFix(UnassignedFieldWarningBase error);
    public InitializeFromConstructorsFix(UnassignedFieldCompilerWarning error);
    public InitializeFromConstructorsFix(UnassignedReadonlyFieldWarning error);
    public InitializeFromConstructorsFix(UnassignedReadonlyFieldCompilerWarning error);
    public InitializeFromConstructorsFix(UnassignedGetOnlyAutoPropertyWarning error);
    public InitializeFromConstructorsFix(UnusedAutoPropertyAccessorWarningBase error);
    private static InitializeFromConstructorsFix();
    public virtual string get_Text();
    [NullableContextAttribute("2")]
private static IReadOnlyList`1<ITypeMemberDeclaration> EnumerateInstanceMembersToInitialize(IReadOnlyList`1<ITypeMemberDeclaration> memberDeclarations, IMemberFromParameterLanguageHelper& introduceHelper, ITypeElement& typeElement);
    public virtual bool IsAvailable(IUserDataHolder cache);
    [PureAttribute]
private static bool IsAppropriateConstructor(IConstructor constructor);
    [PureAttribute]
private static bool IsSerializationConstructor(IConstructor constructor);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
public static IBulbActionCommand Execute(IReadOnlyList`1<ITypeMemberDeclaration> memberDeclarations, IConstructor targetConstructor, HashSet`1<IConstructor> constructorsToSkip);
    [NullableContextAttribute("2")]
private static ParameterKind GetRequiredInitializationParameterKind(ITypeMember member);
    private static ITypeMemberDeclaration CreateExtraDataConstructorForPrimary(IMemberFromParameterLanguageHelper introduceHelper, ITypeDeclaration typeDeclaration, IConstructor primaryCtor);
    private static ConstructorsPreparationInfo PrepareConstructors(ITypeMemberDeclaration memberDeclaration, ITypeDeclaration typeDeclaration, ITypeElement typeElement, IConstructor targetConstructor, IMemberFromParameterLanguageHelper memberHelper, HashSet`1<IConstructor> constructorsToSkip);
    private static ValueTuple`2<string, IParameterDeclaration> GetNewParameterNameOrMatchingDeclaration(ITypeMemberDeclaration memberDeclaration, IDeclaration constructorDeclaration, IMemberFromParameterLanguageHelper introduceHelper);
    [CompilerGeneratedAttribute]
internal static void <Execute>g__ProcessConstructor|23_0(IConstructor constructor, <>c__DisplayClass23_0& , <>c__DisplayClass23_1& , <>c__DisplayClass23_2& );
    [CompilerGeneratedAttribute]
internal static bool <Execute>g__IsInitializedInChainedConstructor|23_1(ITypeMemberDeclaration ctorDeclaration, <>c__DisplayClass23_0& , <>c__DisplayClass23_1& , <>c__DisplayClass23_2& );
    [CompilerGeneratedAttribute]
internal static bool <Execute>g__IsMatchingParameterPassedToConstructorByChain|23_2(ITypeMemberDeclaration ctorDeclaration, string expectedParameterName, IParameterDeclaration matchingParameterDeclaration, ValueTuple`2& deepestConstructorParameter, <>c__DisplayClass23_0& , <>c__DisplayClass23_2& );
    [CompilerGeneratedAttribute]
internal static void <PrepareConstructors>g__PropagateSkippedCtors|27_1(<>c__DisplayClass27_0& );
    [CompilerGeneratedAttribute]
internal static void <PrepareConstructors>g__SkipIncoming|27_2(IConstructor ctor, <>c__DisplayClass27_0& );
    [CompilerGeneratedAttribute]
internal static IParameterDeclaration <GetNewParameterNameOrMatchingDeclaration>g__TryGetMatchingParameterWithName|28_1(ITypeMember member, string parameterName, Dictionary`2<string, IParameter> names);
    [CompilerGeneratedAttribute]
internal static bool <GetNewParameterNameOrMatchingDeclaration>g__ParameterKindMatchesMember|28_2(ITypeMember typeMember, IParameter parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.InitializeNonPrivateFieldFix : InitializeFieldFixBase {
    public static Key InstanceKey;
    protected NamedElementKinds MemberKind { get; }
    protected Key QuickFixInstanceKey { get; }
    public InitializeNonPrivateFieldFix(UnusedParameterWarningBase error);
    public InitializeNonPrivateFieldFix(ParameterOnlyUsedForPreconditionCheckWarningBase error);
    public InitializeNonPrivateFieldFix(UnusedParameterInPartialMethodWarning error);
    public InitializeNonPrivateFieldFix(NotAccessedParameterWarningBase error);
    public InitializeNonPrivateFieldFix(IParameterDeclaration parameterDeclaration);
    private static InitializeNonPrivateFieldFix();
    protected virtual NamedElementKinds get_MemberKind();
    protected virtual Key get_QuickFixInstanceKey();
}
public abstract class JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.InitializeTypeMemberFixBase`1 : MemberFromParameterFixBase {
    protected InitializeTypeMemberFixBase`1(IParameterDeclaration parameterDeclaration);
    protected InitializeTypeMemberFixBase`1(ParameterOnlyUsedForPreconditionCheckWarningBase warning);
    public virtual bool IsAvailable(bool unusedParameterOnly);
    public virtual void Execute();
    protected virtual void Execute(TMember typeMember);
    [PureAttribute]
protected virtual bool IsSupportedTypeMember(TMember typeMember);
    [PureAttribute]
protected virtual bool AnchorMembersFilter(ITypeMember member);
}
internal class JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.IntroduceAllAutoPropertiesFix : BulbActionBase {
    private bool myIsNested;
    private ValueTuple`2<AccessRights, AccessRights> myAccessRights;
    [CanBeNullAttribute]
private IReadOnlyList`1<IntroduceAutoPropertyFix> myAvailableFixes;
    [NotNullAttribute]
private IMemberFromParameterLanguageHelper myLanguageHelper;
    private bool myUnusedParametersOnly;
    public string Text { get; }
    public IntroduceAllAutoPropertiesFix(bool unusedParametersOnly, IList`1<IParameterDeclaration> parameterDeclarations);
    public IntroduceAllAutoPropertiesFix(bool unusedParametersOnly, IList`1<IParameterDeclaration> parameterDeclarations, ValueTuple`2<AccessRights, AccessRights> accessRights, bool isNested);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public bool IsAvailable();
    [CanBeNullAttribute]
[PureAttribute]
private IReadOnlyList`1<IntroduceAutoPropertyFix> GetAvailableFixes(IList`1<IParameterDeclaration> parameterDeclarations, bool unusedParametersOnly);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.IntroduceAndInitializeFieldFix : MemberFromParameterFixBase {
    [NotNullAttribute]
public static Key InstanceKey;
    public string Text { get; }
    protected NamedElementKinds MemberKind { get; }
    protected Key QuickFixInstanceKey { get; }
    public IntroduceAndInitializeFieldFix(UnusedParameterWarningBase error);
    public IntroduceAndInitializeFieldFix(UnusedParameterInPartialMethodWarning error);
    public IntroduceAndInitializeFieldFix(NotAccessedParameterWarningBase error);
    public IntroduceAndInitializeFieldFix(NotAccessedPrimaryConstructorParameterCompilerWarning error);
    public IntroduceAndInitializeFieldFix(IParameterDeclaration parameterDeclaration);
    public IntroduceAndInitializeFieldFix(ParameterOnlyUsedForPreconditionCheckWarningBase warning);
    private static IntroduceAndInitializeFieldFix();
    public virtual string get_Text();
    protected virtual NamedElementKinds get_MemberKind();
    protected virtual Key get_QuickFixInstanceKey();
    public virtual bool IsAvailable(bool unusedParameterOnly);
    public virtual void Execute();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual IEnumerable`1<IntentionAction> CreateCustomIntentions(bool unusedParametersOnly, IAnchor customAnchor, IconId customIcon);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.IntroduceAutoPropertyFix : MemberFromParameterFixBase {
    [NotNullAttribute]
public static Key InstanceKey;
    private IAnchor myFixSubmenuAnchor;
    private IAnchor myDefaultFixAnchor;
    private IAnchor myForAllGroupAnchor;
    private IAnchor myAccessRightsOptionsAnchor;
    private IAnchor myConfigureGroupAnchor;
    private IAnchor myForAllAnchor;
    private IAnchor myConfigureAnchor;
    private bool myIsNested;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`2<AccessRights, AccessRights> myAccessRights;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`2<AccessRights, AccessRights> myDefaultAccessRights;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ValueTuple`2<AccessRights, AccessRights> PropertyAccessRights { get; }
    public string Text { get; }
    protected NamedElementKinds MemberKind { get; }
    protected Key QuickFixInstanceKey { get; }
    public IntroduceAutoPropertyFix(UnusedParameterWarningBase error);
    public IntroduceAutoPropertyFix(ParameterOnlyUsedForPreconditionCheckWarningBase error);
    public IntroduceAutoPropertyFix(UnusedParameterInPartialMethodWarning error);
    public IntroduceAutoPropertyFix(NotAccessedParameterWarningBase error);
    public IntroduceAutoPropertyFix(NotAccessedPrimaryConstructorParameterCompilerWarning error);
    public IntroduceAutoPropertyFix(IParameterDeclaration parameterDeclaration);
    public IntroduceAutoPropertyFix(IParameterDeclaration parameterDeclaration, ValueTuple`2<AccessRights, AccessRights> accessRights, bool isNested);
    private static IntroduceAutoPropertyFix();
    public ValueTuple`2<AccessRights, AccessRights> get_PropertyAccessRights();
    public virtual string get_Text();
    protected virtual NamedElementKinds get_MemberKind();
    protected virtual Key get_QuickFixInstanceKey();
    public virtual bool IsAvailable(bool unusedParameterOnly);
    public virtual void Execute();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual IEnumerable`1<IntentionAction> CreateCustomIntentions(bool unusedParametersOnly, IAnchor customAnchor, IconId customIcon);
    private void InitializeAnchors(IAnchor rootAnchor);
    private void AddAccessRightsOptionsIntentions(IconId customIcon, List`1<IntentionAction> intentions, ValueTuple`2[] accessRightsOptions);
    private void AddCreateForAllIntentions(bool unusedParametersOnly, IconId customIcon, List`1<IntentionAction> intentions, ValueTuple`2[] accessRightsOptions);
    private void AddConfigureIntentions(List`1<IntentionAction> intentions, ValueTuple`2[] accessRightsOptions);
    [CompilerGeneratedAttribute]
internal static bool <Execute>g__AnchorMembersFilter|27_0(ITypeMember member);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Resources.Settings.CodeEditingSettings", "JetBrains.ReSharper.Intentions.Resources.Strings", "IntroducePropertySettingsSettingDescription")]
public class JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.IntroducePropertySettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Intentions.Resources.Strings", "DefaultGetterAccessRightsSettingDescription")]
public AccessRights GetterAccessRights;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Intentions.Resources.Strings", "DefaultSetterAccessRightsSettingDescription")]
public AccessRights SetterAccessRights;
    private static Expression`1<Func`2<IntroducePropertySettings, AccessRights>> ourGetterSelector;
    private static Expression`1<Func`2<IntroducePropertySettings, AccessRights>> ourSetterSelector;
    private static IntroducePropertySettings();
    public static ValueTuple`2<AccessRights, AccessRights> GetDefaultAccessRights(ITreeNode context);
    public static void SetDefaultAccessRights(ITreeNode context, ValueTuple`2<AccessRights, AccessRights> accessRights);
    public static void SetDefaultAccessRights(ISolution solution, ValueTuple`2<AccessRights, AccessRights> accessRights);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.IRemoveUnusedVarHelper {
    [PureAttribute]
public abstract virtual bool CanRemoveVariableDeclaration(IDeclaration declaration);
    [NullableContextAttribute("2")]
public abstract virtual void RemoveVariableDeclaration(IDeclaration declaration, ITreeNode& rangeToHighlight, Action& additionalUndoableAction);
    [PureAttribute]
public abstract virtual bool CanRemoveUsage(ITreeNode usage);
    [NullableContextAttribute("2")]
public abstract virtual void RemoveUsage(ITreeNode usage, IDeclaredElement variableElement, ITreeNode& rangeToHighlight);
}
public interface JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.IToConstLanguageHelper {
    public abstract virtual void FixReferenceQualifier(IReference reference);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.MakeClassSealedFix : ModernScopedNonIncrementalQuickFixBase {
    [CompilerGeneratedAttribute]
private ITypeDeclaration <declaration>P;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public MakeClassSealedFix(ITypeDeclaration declaration);
    public MakeClassSealedFix(ClassCanBeSealedWarningBase error);
    public MakeClassSealedFix(ClassWithVirtualMembersNeverInheritedWarningBase error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.MakeNonVirtualFix : ModifierFixBase {
    public static Key InstanceKey;
    protected string ModifiersText { get; }
    public MakeNonVirtualFix(VirtualMemberNeverOverriddenWarningBase error);
    public MakeNonVirtualFix(IDeclaredElement element);
    private static MakeNonVirtualFix();
    protected virtual string get_ModifiersText();
    protected virtual void SetModifiers(IModifiersOwnerDeclaration declaration);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.MakeParameterOfBaseTypeFix : ModernQuickFixBase {
    private IParameterDeclaration myParameterDeclaration;
    private IType mySuggestedType;
    public string Text { get; }
    public MakeParameterOfBaseTypeFix(ParameterTypeCanBeEnumerableWarningBase error);
    public MakeParameterOfBaseTypeFix(BaseTypeForParameterWarning error);
    public MakeParameterOfBaseTypeFix(BaseTypeForParameterInConstructorWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private void FixParameter(IParameterDeclaration parameterDeclaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.MakeReadonlyFix : ModifierFixBase {
    [NullableAttribute("2")]
private ITypeMemberDeclaration myDeclaration;
    protected string ModifiersText { get; }
    public string ScopedText { get; }
    public MakeReadonlyFix(FieldCanBeMadeReadOnlyLocalWarning error);
    public MakeReadonlyFix(FieldCanBeMadeReadOnlyGlobalWarning error);
    [NullableContextAttribute("2")]
protected MakeReadonlyFix(ITypeMember typeMember);
    protected virtual string get_ModifiersText();
    public virtual string get_ScopedText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual void SetModifiers(IModifiersOwnerDeclaration declaration);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.MakeReturnTypeVoidFix : QuickFixBase {
    [NotNullAttribute]
private IDeclaration myDeclaration;
    [CanBeNullAttribute]
private IParametersOwner myParametersOwner;
    [CanBeNullAttribute]
private IMakeReturnTypeVoidLanguageHelper myLanguageHelper;
    public string Text { get; }
    public MakeReturnTypeVoidFix(UnusedMethodReturnValueWarningBase error);
    public MakeReturnTypeVoidFix(UnusedLocalFunctionReturnValueWarning error);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NotNullAttribute]
[PureAttribute]
private IReadOnlyList`1<IStatement> CollectReturnStatements(IMakeReturnTypeVoidLanguageHelper languageHelper);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.MarkUsedImplicitlyFix : BulbActionBase {
    [CanBeNullAttribute]
private IDeclaration myDeclaration;
    [NotNullAttribute]
private static Key InstanceKey;
    private static string ourExternalAnnotationsPrompt;
    public string Text { get; }
    private MarkUsedImplicitlyFix(IDeclaration declaration);
    public MarkUsedImplicitlyFix(UnusedMemberWarningBase error);
    public MarkUsedImplicitlyFix(UnusedTypeWarningBase error);
    public MarkUsedImplicitlyFix(UnusedFieldWarningBase error);
    public MarkUsedImplicitlyFix(UnassignedFieldWarningBase error);
    public MarkUsedImplicitlyFix(UnassignedGetOnlyAutoPropertyWarning error);
    public MarkUsedImplicitlyFix(VirtualEventNeverInvokedWarning error);
    public MarkUsedImplicitlyFix(InterfaceEventNeverInvokedWarning error);
    public MarkUsedImplicitlyFix(UnusedMemberInInterfaceWarningBase error);
    public MarkUsedImplicitlyFix(UnusedMemberInBaseWarningBase error);
    public MarkUsedImplicitlyFix(MemberOnlyUsedInBaseCallsWarningBase error);
    public MarkUsedImplicitlyFix(UnusedAbstractMemberParameterWarningBase error);
    public MarkUsedImplicitlyFix(UnusedVirtualMemberParameterWarningBase error);
    public MarkUsedImplicitlyFix(ParameterOnlyPassedToSelfWarningBase error);
    public MarkUsedImplicitlyFix(NotAccessedFieldWarningBase error);
    public MarkUsedImplicitlyFix(UnusedAutoPropertyAccessorWarningBase error);
    public MarkUsedImplicitlyFix(NotAccessedPositionalPropertyWarningBase error);
    public MarkUsedImplicitlyFix(NotAccessedPositionalPropertyDuplicateStateWarningBase error);
    public MarkUsedImplicitlyFix(EventNeverSubscribedToWarningBase error);
    public MarkUsedImplicitlyFix(EventNeverSubscribedToInInterfaceWarningBase error);
    public MarkUsedImplicitlyFix(EventNeverSubscribedToInBaseWarningBase error);
    public MarkUsedImplicitlyFix(ClassNeverInstantiatedWarningBase error);
    public MarkUsedImplicitlyFix(EventNeverInvokedWarning error);
    private static MarkUsedImplicitlyFix();
    public virtual string get_Text();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual void ExecuteBeforeProgressAndTransaction(ISolution solution);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public abstract class JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.MemberFromParameterFixBase : BulbActionBase {
    [CanBeNullAttribute]
private string myMemberName;
    private bool myParameterKnownToBeUnused;
    [CompilerGeneratedAttribute]
private IMemberFromParameterLanguageHelper <LanguageHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IParameterDeclaration <ParameterDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private IParameter <Parameter>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeElement <ContainingType>k__BackingField;
    [NotNullAttribute]
protected IMemberFromParameterLanguageHelper LanguageHelper { get; }
    [NotNullAttribute]
protected IParameterDeclaration ParameterDeclaration { get; }
    [NotNullAttribute]
protected IParameter Parameter { get; }
    [CanBeNullAttribute]
protected ITypeElement ContainingType { get; }
    protected NamedElementKinds MemberKind { get; }
    [NotNullAttribute]
protected Key QuickFixInstanceKey { get; }
    [NotNullAttribute]
protected string MemberName { get; }
    protected MemberFromParameterFixBase(IParameterDeclaration parameterDeclaration);
    protected MemberFromParameterFixBase(ParameterOnlyUsedForPreconditionCheckWarningBase warning);
    [CompilerGeneratedAttribute]
protected IMemberFromParameterLanguageHelper get_LanguageHelper();
    [CompilerGeneratedAttribute]
protected IParameterDeclaration get_ParameterDeclaration();
    [CompilerGeneratedAttribute]
protected IParameter get_Parameter();
    [CompilerGeneratedAttribute]
protected ITypeElement get_ContainingType();
    protected abstract virtual NamedElementKinds get_MemberKind();
    protected abstract virtual Key get_QuickFixInstanceKey();
    protected string get_MemberName();
    protected sealed virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public abstract virtual void Execute();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public virtual bool IsAvailable(bool unusedParameterOnly);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual IEnumerable`1<IntentionAction> CreateCustomIntentions(bool unusedParametersOnly, IAnchor customAnchor, IconId customIcon);
    [CanBeNullAttribute]
[PureAttribute]
private static IConstructor GetInstanceConstructorByParameter(IParameter parameter);
    private bool IsParameterUsedForInitialization();
    protected bool IsAssignedInConstructor(ITypeMember typeMember);
    [CanBeNullAttribute]
protected ITreeNode FindAssignmentNode(ITypeMember typeMember);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.MemberFromParameterFixBase/<FindAssignmentsInConstructor>d__32")]
[NotNullAttribute]
private IEnumerable`1<ValueTuple`3<ITypeMember, IParameter, ITreeNode>> FindAssignmentsInConstructor();
}
public class JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.MemberFromParameterHelper : object {
    [NotNullAttribute]
private IParameterDeclaration myParameterDeclaration;
    [NotNullAttribute]
private Predicate`1<ITypeMember> myAnchorMembersFilter;
    [NotNullAttribute]
private IMemberFromParameterLanguageHelper myLanguageHelper;
    [NotNullAttribute]
private IParametersOwnerDeclaration myConstructorDeclaration;
    public MemberFromParameterHelper(IParameterDeclaration parameterDeclaration, Predicate`1<ITypeMember> anchorMembersFilter, IMemberFromParameterLanguageHelper languageHelper);
    [NotNullAttribute]
public static string GetMemberNameFromParameter(IParameterDeclaration parameterDeclaration, NamedElementKinds memberKind);
    [NotNullAttribute]
[PureAttribute]
public static IList`1<IParameterDeclaration> GetAllParametersByOne(IParameterDeclaration parameterDeclaration);
    public void InitializeMember(ITypeMember member, bool checkIsInitialized);
    [NotNullAttribute]
private ITypeMember IntroduceMember(string pattern, NamedElementKinds kind);
    public ITypeMember IntroduceAndInitializeMember(string pattern, NamedElementKinds kind);
    [CanBeNullAttribute]
private IStatement GetLastCheckOfCodeInvariant();
    [PureAttribute]
private bool IsMemberInitialized(ITypeMember member);
    [CanBeNullAttribute]
private AssignmentMatch FindStatementPosition();
    [CanBeNullAttribute]
private AssignmentMatch FindInitializationLocation(IParametersOwnerDeclaration constructorDeclaration, IParameterDeclaration parameterDeclaration);
    [NotNullAttribute]
[PureAttribute]
private static IDictionary`2<IParameterDeclaration, int> MakeDeclarationToIndexMap(IParametersOwnerDeclaration constructorDeclaration, IParameterDeclaration parameterDeclaration);
    [CompilerGeneratedAttribute]
internal static void <FindInitializationLocation>g__ChooseBetterMatch|13_0(AssignmentMatch match, <>c__DisplayClass13_0& );
}
public class JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.RemoveRedundantTypeParamFix : object {
    [CanBeNullAttribute]
private IDeclaration myDeclaration;
    public string Text { get; }
    public RemoveRedundantTypeParamFix(UnusedTypeParameterWarning error);
    public sealed virtual string get_Text();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.RemoveUnusedElementFix : object {
    private static string RefactoringName;
    private IDeclaration myDeclaration;
    private IDeclaredElement myElement;
    private string myText;
    [NotNullAttribute]
public static SubmenuAnchor RemoveAnchor;
    public string Text { get; }
    public bool IsReadOnly { get; }
    public RemoveUnusedElementFix(IDeclaration declaration, string text);
    public RemoveUnusedElementFix(UnusedMemberWarningBase error);
    public RemoveUnusedElementFix(UnusedTypeWarningBase error);
    public RemoveUnusedElementFix(UnusedFieldWarningBase error);
    public RemoveUnusedElementFix(UnusedFieldCompilerWarning error);
    public RemoveUnusedElementFix(UnusedMemberInBaseWarningBase error);
    public RemoveUnusedElementFix(UnusedMemberInInterfaceWarningBase error);
    public RemoveUnusedElementFix(MemberOnlyUsedInBaseCallsWarningBase error);
    public RemoveUnusedElementFix(EventNeverSubscribedToWarningBase error);
    public RemoveUnusedElementFix(EventNeverSubscribedToInInterfaceWarningBase error);
    public RemoveUnusedElementFix(EventNeverSubscribedToInBaseWarningBase error);
    public RemoveUnusedElementFix(UnusedParameterWarningBase error);
    public RemoveUnusedElementFix(ParameterOnlyUsedForPreconditionCheckWarningBase error);
    public RemoveUnusedElementFix(UnusedParameterInPartialMethodWarning error);
    public RemoveUnusedElementFix(UnusedAbstractMemberParameterWarningBase error);
    public RemoveUnusedElementFix(UnusedVirtualMemberParameterWarningBase error);
    public RemoveUnusedElementFix(ParameterOnlyPassedToSelfWarningBase error);
    public RemoveUnusedElementFix(OutParameterValueIsAlwaysDiscardedWarningBase error);
    public RemoveUnusedElementFix(NotAccessedParameterWarningBase error);
    public RemoveUnusedElementFix(UnusedLocalFunctionWarning error);
    public RemoveUnusedElementFix(UnusedLocalFunctionCompilerWarning error);
    public RemoveUnusedElementFix(NotAccessedFieldWarningBase error);
    public RemoveUnusedElementFix(UnusedAutoPropertyAccessorWarningBase error);
    public RemoveUnusedElementFix(NotAccessedPrimaryConstructorParameterCompilerWarning error);
    public RemoveUnusedElementFix(NotAccessedPositionalPropertyWarningBase error);
    private static RemoveUnusedElementFix();
    [CanBeNullAttribute]
private static IDeclaration ByGetAccessor(IDeclaration declaration);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual string get_Text();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.RemoveUnusedVarFix : ModernScopedQuickFixWithCustomExecutor {
    [NullableAttribute("2")]
private ITypeOwner myVariable;
    private string myUnusedWord;
    public string Text { get; }
    public bool IsReanalysisRequired { get; }
    [NullableAttribute("2")]
public ITreeNode ReanalysisDependencyRoot { get; }
    public ITreeNode ContextNode { get; }
    private RemoveUnusedVarFix(IDeclaredElement typeOwner, string unusedWord);
    public RemoveUnusedVarFix(UnusedVariableWarning error);
    public RemoveUnusedVarFix(UnusedVariableCompilerWarning error);
    public RemoveUnusedVarFix(NotAccessedVariableWarning error);
    public RemoveUnusedVarFix(NotAccessedVariableCompilerWarning error);
    public RemoveUnusedVarFix(NotAccessedOutParameterVariableWarning error);
    public virtual string get_Text();
    public sealed virtual bool get_IsReanalysisRequired();
    [NullableContextAttribute("2")]
public sealed virtual ITreeNode get_ReanalysisDependencyRoot();
    public sealed virtual ITreeNode get_ContextNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
    protected virtual ScopedActionExecutor GetScopedQuickFixExecutor(ISolution solution, IScopedFixingStrategy fixingStrategy, PsiLanguageType languageType);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.ReplaceAssignmentWithParameterFixBase`1 : InitializeTypeMemberFixBase`1<TMember> {
    protected ReplaceAssignmentWithParameterFixBase`1(IParameterDeclaration parameterDeclaration);
    protected virtual void Execute(TMember typeMember);
    protected virtual bool IsSupportedTypeMember(TMember typeMember);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.ReplaceFieldAssignmentWithParameterFix : ReplaceAssignmentWithParameterFixBase`1<IField> {
    public static Key InstanceKey;
    public string Text { get; }
    protected NamedElementKinds MemberKind { get; }
    protected Key QuickFixInstanceKey { get; }
    public ReplaceFieldAssignmentWithParameterFix(UnusedParameterWarningBase error);
    public ReplaceFieldAssignmentWithParameterFix(UnusedPositionalParameterCompilerWarning error);
    public ReplaceFieldAssignmentWithParameterFix(UnusedParameterInPartialMethodWarning error);
    public ReplaceFieldAssignmentWithParameterFix(NotAccessedParameterWarningBase error);
    public ReplaceFieldAssignmentWithParameterFix(IParameterDeclaration parameterDeclaration);
    private static ReplaceFieldAssignmentWithParameterFix();
    public virtual string get_Text();
    protected virtual NamedElementKinds get_MemberKind();
    protected virtual Key get_QuickFixInstanceKey();
    protected virtual bool IsSupportedTypeMember(IField typeMember);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.ReplacePropertyAssignmentWithParameterFix : ReplaceAssignmentWithParameterFixBase`1<IProperty> {
    public static Key InstanceKey;
    public string Text { get; }
    protected NamedElementKinds MemberKind { get; }
    protected Key QuickFixInstanceKey { get; }
    public ReplacePropertyAssignmentWithParameterFix(UnusedParameterWarningBase error);
    public ReplacePropertyAssignmentWithParameterFix(UnusedPositionalParameterCompilerWarning error);
    public ReplacePropertyAssignmentWithParameterFix(UnusedParameterInPartialMethodWarning error);
    public ReplacePropertyAssignmentWithParameterFix(NotAccessedParameterWarningBase error);
    public ReplacePropertyAssignmentWithParameterFix(IParameterDeclaration parameterDeclaration);
    private static ReplacePropertyAssignmentWithParameterFix();
    public virtual string get_Text();
    protected virtual NamedElementKinds get_MemberKind();
    protected virtual Key get_QuickFixInstanceKey();
    protected virtual bool IsSupportedTypeMember(IProperty typeMember);
}
public class JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.ToStaticFix : object {
    private ITypeMember myMember;
    private PsiLanguageType myLanguage;
    private string JetBrains.ReSharper.Feature.Services.Bulbs.IBulbAction.Text { get; }
    public ToStaticFix(MemberCanBeMadeStaticWarningBase error);
    private sealed virtual override string JetBrains.ReSharper.Feature.Services.Bulbs.IBulbAction.get_Text();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.QuickFixes.IQuickFix.IsAvailable(IUserDataHolder cache);
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.QuickFixes.UsageChecking.UsageCheckingWarningsQuickfixesQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.QuickFixes.VisibilityChangeAction : ModernBulbActionBase {
    [CompilerGeneratedAttribute]
private IModifiersOwner <owner>P;
    [CompilerGeneratedAttribute]
private bool <updateHierarchy>P;
    [CompilerGeneratedAttribute]
private PsiLanguageType <languageForPresentation>P;
    private HashSet`1<IAccessRightsOwnerDeclaration> myDeclarations;
    private HashSet`1<IAccessRightsOwnerDeclaration> myRelatedDeclarations;
    [CompilerGeneratedAttribute]
private AccessRights <AccessRights>k__BackingField;
    public AccessRights AccessRights { get; }
    public string Text { get; }
    public VisibilityChangeAction(IModifiersOwner owner, AccessRights accessRights, bool updateHierarchy, PsiLanguageType languageForPresentation);
    [CompilerGeneratedAttribute]
public AccessRights get_AccessRights();
    public virtual string get_Text();
    private static string GetAccessorKindName(IAccessor accessor);
    private void AppendHierarchyElements(IOverridableMember overridableMember);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private void SetAccessRights(IAccessRightsOwnerDeclaration declaration);
    [CompilerGeneratedAttribute]
private IBulbActionCommand <ExecutePsiTransaction>b__13_0(ISolution _, IProgressIndicator _);
}
public abstract class JetBrains.ReSharper.Intentions.QuickFixes.VisibilityFixBase : object {
    [NotNullAttribute]
public static Key InstanceKey;
    [CanBeNullAttribute]
private IReference myReference;
    private bool myUpdateHierarchy;
    [CompilerGeneratedAttribute]
private IModifiersOwner <ModifiersOwner>k__BackingField;
    [CompilerGeneratedAttribute]
private AccessRights <AccessRights>k__BackingField;
    [CanBeNullAttribute]
protected IModifiersOwner ModifiersOwner { get; }
    public AccessRights AccessRights { get; }
    protected VisibilityFixBase(IModifiersOwnerDeclaration ownerDeclaration, AccessRights accessRights, bool updateHierarchy);
    protected VisibilityFixBase(IModifiersOwner modifiersOwner, AccessRights accessRights, bool updateHierarchy);
    protected VisibilityFixBase(IReference reference, ITypeMember typeMember, AccessRights accessRights, bool updateHierarchy);
    protected VisibilityFixBase(IReference reference, AccessRights accessRights, bool updateHierarchy);
    private static VisibilityFixBase();
    [CompilerGeneratedAttribute]
protected IModifiersOwner get_ModifiersOwner();
    [CompilerGeneratedAttribute]
public AccessRights get_AccessRights();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [NotNullAttribute]
[PureAttribute]
private PsiLanguageType GetLanguage();
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.QuickFixes.IQuickFix.IsAvailable(IUserDataHolder cache);
    protected virtual bool IsAvailableEx();
    [CanBeNullAttribute]
[PureAttribute]
public static IAccessor GetAccessor(IProperty property, AccessorKind kind);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Intentions.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string AdditionalCodeCleanupAfterElementRemoval_Text { get; }
    public static string AltEnterActionText { get; }
    public static string ConfiguresSwitchToGoToActionSuggesterSettingDescription { get; }
    public static string ContextActionsOptionPageTitle { get; }
    public static string DefaultGetterAccessRightsSettingDescription { get; }
    public static string DefaultSetterAccessRightsSettingDescription { get; }
    public static string EditEditorconfigActionText { get; }
    public static string ExportSettingsToEditorconfigActionText { get; }
    public static string Getter_Text { get; }
    public static string ImFeelingLuckyActionText { get; }
    public static string IncreaseLineIndentActionText { get; }
    public static string IntroducePropertySettingsSettingDescription { get; }
    public static string ReSharperMenuClicksThresholdSettingDescription { get; }
    public static string ReSharperMenuOpenedActionActionText { get; }
    public static string EnterActionName_Text { get; }
    public static string ApplySyntaxStyle_Text { get; }
    public static string ConfigureCleanupProfiles_Text { get; }
    public static string ReformatAndCleanup_Text { get; }
    public static string CleanupWith_Profile_Text { get; }
    public static string Setter_Text { get; }
    public static string ToStringInterpolation_Text { get; }
    public static string InsertFormatArgument_Text { get; }
    public static string InsertInterpolationArgument_Text { get; }
    public static string ConvertConcatenationToInterpolation_Text { get; }
    public static string PassStringFormat_Text { get; }
    public static string RemoveTemplateArgument__Text { get; }
    public static string RemoveFormatArgument__Text { get; }
    public static string SurroundWithFormat_Text { get; }
    public static string ToStringFormatInvocation_Text { get; }
    public static string UpdatingHierarchyAccessRights_Text { get; }
    public static string UseStringInterpolation_Text { get; }
    public static string CommentSelection_Text { get; }
    public static string EncapsulateField_Text { get; }
    public static string MarkAsMyProviderInjectDescription_Text { get; }
    public static string MarkAsInjectedLanguageOrReference_Text { get; }
    public static string Remove_InjectionMark_Text { get; }
    public static string EditPathMappingsFor__Text { get; }
    public static string Rename_Text { get; }
    public static string RenameTo__Text { get; }
    public static string FixNaming_Text { get; }
    public static string Use__Text { get; }
    public static string WhyIs_SuggestingThis_Text { get; }
    public static string Tip__Text { get; }
    public static string DonTShowThisTipAgain_Text { get; }
    public static string DonTShowTipsInThisMenu_Text { get; }
    public static string ConfigureCodeStyle_Text { get; }
    public static string DetectCodeStyleSettings_Text { get; }
    public static string NoCodeInALanguageSupportedByAutodetection_Text { get; }
    public static string WeCanTRecommendAnyChangesToYourCode_Text { get; }
    public static string AutodetectCodeStyleSettings_Text { get; }
    public static string SomeOfTheSettingsYouModifiedAreOverridden_Text { get; }
    public static string SaveToEditorconfig_Caption { get; }
    public static string TheFollowingSettingsWereNotSavedBecause_Text { get; }
    public static string SaveFormatterOptionsToComments_Text { get; }
    public static string FixFormattingProblem_Text { get; }
    public static string FixIndentationProblem_Text { get; }
    public static string NothingToImplement_Text { get; }
    public static string ChopLongLine_Text { get; }
    public static string WrapLongLine_Text { get; }
    public static string GeneratingMembers_Text { get; }
    public static string AllAboveTypes_Text { get; }
    public static string NoPlacesWereFoundToImplementThisMember_Text { get; }
    public static string SelectTargetTypePart_Text { get; }
    public static string AnalyzingMembers_Text { get; }
    public static string SearchingForDerivedTypes_Text { get; }
    public static string ConfigureInspectionSeverity_Text { get; }
    public static string FormatSelection_Text { get; }
    public static string StrictFormat_Text { get; }
    public static string CompactFormatFewerLineBreaks_Text { get; }
    public static string SpaciousFormatChop_Text { get; }
    public static string ReindentOnly_Text { get; }
    public static string CleanupSelection_Text { get; }
    public static string FullCleanup_Text { get; }
    public static string ReformatSelection_Text { get; }
    public static string PassStringInterpolation_Text { get; }
    public static string CreateOther_Text { get; }
    public static string TryTypingToFindMoreActions_Text { get; }
    public static string ChangeNamingRule__Text { get; }
    public static string DisableAutoDetectedRules_Text { get; }
    public static string EnableAutoDetectedRules_Text { get; }
    public static string ChangeSignatureOf____Text { get; }
    public static string ChangeTypeOf__To__Text { get; }
    public static string MoveToGlobalNamespace_Text { get; }
    public static string MoveTo_Namespace_Text { get; }
    public static string AdjustNamespaces_Text { get; }
    public static string Folder_DoNotIntroduceNamespace_Text { get; }
    public static string MoveFileToFolder__Text { get; }
    public static string AddArgument_Text { get; }
    public static string EscapeUnmatchedBrace_Text { get; }
    public static string RemoveRedundantArgument_Text { get; }
    public static string ReplaceWithFormatSpecifier_Text { get; }
    public static string ReplaceTabsWithSpaces_Text { get; }
    public static string PickColorFromPalette_Text { get; }
    public static string CreateDefaultConstructorIn___Text { get; }
    public static string EditPattern__Text { get; }
    public static string ReplaceWith__Text { get; }
    public static string ApplyReplacement_Text { get; }
    public static string IgnorePath__Text { get; }
    public static string SetPathMappingFor__Text { get; }
    public static string ImportType__Text { get; }
    public static string ImportTypeWithDots_Text { get; }
    public static string Import_AndOtherMissingReferences_Text { get; }
    public static string ImportType_Text { get; }
    public static string ReferenceAndImportType_Text { get; }
    public static string InstallPackage_AndImport__Text { get; }
    public static string Reference_AndImport__Text { get; }
    public static string FailedToReferenceModuleProbablyReference_Text { get; }
    public static string FailedToImportType_Text { get; }
    public static string ImportMissingReferences_Text { get; }
    public static string Add_AccessorFor__Text { get; }
    public static string MakeAccessibilityConsistent_Text { get; }
    public static string Make__Text { get; }
    public static string Make____Text { get; }
    public static string MakeMembers__Text { get; }
    public static string Make_Accessor__Text { get; }
    public static string Add_ToTheAbbreviationsList_Text { get; }
    public static string Remove_FromTheAbbreviationsList_Text { get; }
    public static string Rename__Text { get; }
    public static string FindThis_OnNugetOrg_Text { get; }
    public static string ERROR_Text { get; }
    public static string AddReferenceTo__Text { get; }
    public static string UpdateProjects_Text { get; }
    public static string SetLanguageVersionTo_ForAll_Projects_Text { get; }
    public static string Set_LanguageVersionTo_ForThisProject_Text { get; }
    public static string Set_LanguageLevelTo_ForCodeAnalysis_Text { get; }
    public static string LocateInToDoExplorer_Text { get; }
    public static string OpenToDoLink_Text { get; }
    public static string ConfigureCodeAnnotations_Text { get; }
    public static string MakeReturnType__Text { get; }
    public static string MakeType__Text { get; }
    public static string InitializeAutoProperty__Text { get; }
    public static string InitializeField_WithParameterValue_Text { get; }
    public static string Initialize_FromConstructor_Text { get; }
    public static string InitializeMembersFromConstructor_Text { get; }
    public static string IntroduceReadOnlyField__Text { get; }
    public static string IntroduceFieldsForAllUnusedParameters_Text { get; }
    public static string IntroduceFieldsForAllParameters_Text { get; }
    public static string ForAllWith__Text { get; }
    public static string ForAllAs__Text { get; }
    public static string ForAllUnusedParameters_Text { get; }
    public static string ForAllParameters_Text { get; }
    public static string WithPrivateSetter_Text { get; }
    public static string As__Text { get; }
    public static string IntroduceAutoProperty_WithPrivateSetter_Text { get; }
    public static string ConfigureDefault_Text { get; }
    public static string MakeTypes__Text { get; }
    public static string UsedImplicitly_Text { get; }
    public static string AnnotationsAreRequiredToMakeReSharper_Text { get; }
    public static string RemoveRedundantTypeParameter__Text { get; }
    public static string RemoveParameterAndUpdateUsages_Text { get; }
    public static string RemoveUnused__Text { get; }
    public static string Remove___Text { get; }
    public static string ReplaceAssignmentToField_WithParameter_Text { get; }
    public static string ReplaceAssignmentToAutoProperty_With_Text { get; }
    public static string Make__Static_Text { get; }
    public static string SelectSignature_Text { get; }
    public static string SelectTargetPart_Text { get; }
    public static string Move_ToOuterScope_Text { get; }
    public static string MakeAllTypes__Text { get; }
    public static string MakeAllMembers__Text { get; }
    public static string MakeParameterType__Text { get; }
    public static string ImportPath_Text { get; }
    public static string ViewActionList_Text { get; }
    public static string ViewActionList__Text { get; }
    public static string DetectedSettings_Text { get; }
    public static string TheFollowingSettingsAffectTheCodeStyle_Caption { get; }
    public static string SettingsDetectedFromYourCodeSample_Caption { get; }
    public static string PreviousValue_DetectedValue__Text { get; }
    public static string Use___Text { get; }
    public static string CommentSelectionContextAction_Description { get; }
    public static string CommentSelectionContextAction_Name { get; }
    public static string EncapsulateFieldContextAction_Description { get; }
    public static string EncapsulateFieldContextAction_Name { get; }
    public static string MarkAsInjectedLanguageOrReferenceContextAction_Description { get; }
    public static string MarkAsInjectedLanguageOrReferenceContextAction_Name { get; }
    public static string ReformatAndCleanupContextAction_Description { get; }
    public static string ReformatAndCleanupContextAction_Name { get; }
    public static string WrapLongLineContextAction_Description { get; }
    public static string WrapLongLineContextAction_Name { get; }
    public static string CommentUnused__Text { get; }
    public static string RemoveUnusedFixUnused_Text { get; }
    public static string RemoveUnusedFixNotAccessed_Text { get; }
    public static string RemoveUnusedFixDiscarded_Text { get; }
    public static string MoveFileTo_Text { get; }
    public static string New_Text { get; }
    public static string Folder_Text { get; }
    public static string Namespace_Text { get; }
    public static string Type_Text { get; }
    public static string _From__Text { get; }
    public static string ShowAdvisoryFor__OnCheckmarx_Text { get; }
    public static string Update_ToTheLatestVersion_Text { get; }
    public static string SeeMore_Text { get; }
    public static string RenameCqrs_Text { get; }
    public static string RenameToCqrs__Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_AdditionalCodeCleanupAfterElementRemoval_Text();
    public static string get_AltEnterActionText();
    public static string get_ConfiguresSwitchToGoToActionSuggesterSettingDescription();
    public static string get_ContextActionsOptionPageTitle();
    public static string get_DefaultGetterAccessRightsSettingDescription();
    public static string get_DefaultSetterAccessRightsSettingDescription();
    public static string get_EditEditorconfigActionText();
    public static string get_ExportSettingsToEditorconfigActionText();
    public static string get_Getter_Text();
    public static string get_ImFeelingLuckyActionText();
    public static string get_IncreaseLineIndentActionText();
    public static string get_IntroducePropertySettingsSettingDescription();
    public static string get_ReSharperMenuClicksThresholdSettingDescription();
    public static string get_ReSharperMenuOpenedActionActionText();
    public static string get_EnterActionName_Text();
    public static string get_ApplySyntaxStyle_Text();
    public static string get_ConfigureCleanupProfiles_Text();
    public static string get_ReformatAndCleanup_Text();
    public static string get_CleanupWith_Profile_Text();
    public static string get_Setter_Text();
    public static string get_ToStringInterpolation_Text();
    public static string get_InsertFormatArgument_Text();
    public static string get_InsertInterpolationArgument_Text();
    public static string get_ConvertConcatenationToInterpolation_Text();
    public static string get_PassStringFormat_Text();
    public static string get_RemoveTemplateArgument__Text();
    public static string get_RemoveFormatArgument__Text();
    public static string get_SurroundWithFormat_Text();
    public static string get_ToStringFormatInvocation_Text();
    public static string get_UpdatingHierarchyAccessRights_Text();
    public static string get_UseStringInterpolation_Text();
    public static string get_CommentSelection_Text();
    public static string get_EncapsulateField_Text();
    public static string get_MarkAsMyProviderInjectDescription_Text();
    public static string get_MarkAsInjectedLanguageOrReference_Text();
    public static string get_Remove_InjectionMark_Text();
    public static string get_EditPathMappingsFor__Text();
    public static string get_Rename_Text();
    public static string get_RenameTo__Text();
    public static string get_FixNaming_Text();
    public static string get_Use__Text();
    public static string get_WhyIs_SuggestingThis_Text();
    public static string get_Tip__Text();
    public static string get_DonTShowThisTipAgain_Text();
    public static string get_DonTShowTipsInThisMenu_Text();
    public static string get_ConfigureCodeStyle_Text();
    public static string get_DetectCodeStyleSettings_Text();
    public static string get_NoCodeInALanguageSupportedByAutodetection_Text();
    public static string get_WeCanTRecommendAnyChangesToYourCode_Text();
    public static string get_AutodetectCodeStyleSettings_Text();
    public static string get_SomeOfTheSettingsYouModifiedAreOverridden_Text();
    public static string get_SaveToEditorconfig_Caption();
    public static string get_TheFollowingSettingsWereNotSavedBecause_Text();
    public static string get_SaveFormatterOptionsToComments_Text();
    public static string get_FixFormattingProblem_Text();
    public static string get_FixIndentationProblem_Text();
    public static string get_NothingToImplement_Text();
    public static string get_ChopLongLine_Text();
    public static string get_WrapLongLine_Text();
    public static string get_GeneratingMembers_Text();
    public static string get_AllAboveTypes_Text();
    public static string get_NoPlacesWereFoundToImplementThisMember_Text();
    public static string get_SelectTargetTypePart_Text();
    public static string get_AnalyzingMembers_Text();
    public static string get_SearchingForDerivedTypes_Text();
    public static string get_ConfigureInspectionSeverity_Text();
    public static string get_FormatSelection_Text();
    public static string get_StrictFormat_Text();
    public static string get_CompactFormatFewerLineBreaks_Text();
    public static string get_SpaciousFormatChop_Text();
    public static string get_ReindentOnly_Text();
    public static string get_CleanupSelection_Text();
    public static string get_FullCleanup_Text();
    public static string get_ReformatSelection_Text();
    public static string get_PassStringInterpolation_Text();
    public static string get_CreateOther_Text();
    public static string get_TryTypingToFindMoreActions_Text();
    public static string get_ChangeNamingRule__Text();
    public static string get_DisableAutoDetectedRules_Text();
    public static string get_EnableAutoDetectedRules_Text();
    public static string get_ChangeSignatureOf____Text();
    public static string get_ChangeTypeOf__To__Text();
    public static string get_MoveToGlobalNamespace_Text();
    public static string get_MoveTo_Namespace_Text();
    public static string get_AdjustNamespaces_Text();
    public static string get_Folder_DoNotIntroduceNamespace_Text();
    public static string get_MoveFileToFolder__Text();
    public static string get_AddArgument_Text();
    public static string get_EscapeUnmatchedBrace_Text();
    public static string get_RemoveRedundantArgument_Text();
    public static string get_ReplaceWithFormatSpecifier_Text();
    public static string get_ReplaceTabsWithSpaces_Text();
    public static string get_PickColorFromPalette_Text();
    public static string get_CreateDefaultConstructorIn___Text();
    public static string get_EditPattern__Text();
    public static string get_ReplaceWith__Text();
    public static string get_ApplyReplacement_Text();
    public static string get_IgnorePath__Text();
    public static string get_SetPathMappingFor__Text();
    public static string get_ImportType__Text();
    public static string get_ImportTypeWithDots_Text();
    public static string get_Import_AndOtherMissingReferences_Text();
    public static string get_ImportType_Text();
    public static string get_ReferenceAndImportType_Text();
    public static string get_InstallPackage_AndImport__Text();
    public static string get_Reference_AndImport__Text();
    public static string get_FailedToReferenceModuleProbablyReference_Text();
    public static string get_FailedToImportType_Text();
    public static string get_ImportMissingReferences_Text();
    public static string get_Add_AccessorFor__Text();
    public static string get_MakeAccessibilityConsistent_Text();
    public static string get_Make__Text();
    public static string get_Make____Text();
    public static string get_MakeMembers__Text();
    public static string get_Make_Accessor__Text();
    public static string get_Add_ToTheAbbreviationsList_Text();
    public static string get_Remove_FromTheAbbreviationsList_Text();
    public static string get_Rename__Text();
    public static string get_FindThis_OnNugetOrg_Text();
    public static string get_ERROR_Text();
    public static string get_AddReferenceTo__Text();
    public static string get_UpdateProjects_Text();
    public static string get_SetLanguageVersionTo_ForAll_Projects_Text();
    public static string get_Set_LanguageVersionTo_ForThisProject_Text();
    public static string get_Set_LanguageLevelTo_ForCodeAnalysis_Text();
    public static string get_LocateInToDoExplorer_Text();
    public static string get_OpenToDoLink_Text();
    public static string get_ConfigureCodeAnnotations_Text();
    public static string get_MakeReturnType__Text();
    public static string get_MakeType__Text();
    public static string get_InitializeAutoProperty__Text();
    public static string get_InitializeField_WithParameterValue_Text();
    public static string get_Initialize_FromConstructor_Text();
    public static string get_InitializeMembersFromConstructor_Text();
    public static string get_IntroduceReadOnlyField__Text();
    public static string get_IntroduceFieldsForAllUnusedParameters_Text();
    public static string get_IntroduceFieldsForAllParameters_Text();
    public static string get_ForAllWith__Text();
    public static string get_ForAllAs__Text();
    public static string get_ForAllUnusedParameters_Text();
    public static string get_ForAllParameters_Text();
    public static string get_WithPrivateSetter_Text();
    public static string get_As__Text();
    public static string get_IntroduceAutoProperty_WithPrivateSetter_Text();
    public static string get_ConfigureDefault_Text();
    public static string get_MakeTypes__Text();
    public static string get_UsedImplicitly_Text();
    public static string get_AnnotationsAreRequiredToMakeReSharper_Text();
    public static string get_RemoveRedundantTypeParameter__Text();
    public static string get_RemoveParameterAndUpdateUsages_Text();
    public static string get_RemoveUnused__Text();
    public static string get_Remove___Text();
    public static string get_ReplaceAssignmentToField_WithParameter_Text();
    public static string get_ReplaceAssignmentToAutoProperty_With_Text();
    public static string get_Make__Static_Text();
    public static string get_SelectSignature_Text();
    public static string get_SelectTargetPart_Text();
    public static string get_Move_ToOuterScope_Text();
    public static string get_MakeAllTypes__Text();
    public static string get_MakeAllMembers__Text();
    public static string get_MakeParameterType__Text();
    public static string get_ImportPath_Text();
    public static string get_ViewActionList_Text();
    public static string get_ViewActionList__Text();
    public static string get_DetectedSettings_Text();
    public static string get_TheFollowingSettingsAffectTheCodeStyle_Caption();
    public static string get_SettingsDetectedFromYourCodeSample_Caption();
    public static string get_PreviousValue_DetectedValue__Text();
    public static string get_Use___Text();
    public static string get_CommentSelectionContextAction_Description();
    public static string get_CommentSelectionContextAction_Name();
    public static string get_EncapsulateFieldContextAction_Description();
    public static string get_EncapsulateFieldContextAction_Name();
    public static string get_MarkAsInjectedLanguageOrReferenceContextAction_Description();
    public static string get_MarkAsInjectedLanguageOrReferenceContextAction_Name();
    public static string get_ReformatAndCleanupContextAction_Description();
    public static string get_ReformatAndCleanupContextAction_Name();
    public static string get_WrapLongLineContextAction_Description();
    public static string get_WrapLongLineContextAction_Name();
    public static string get_CommentUnused__Text();
    public static string get_RemoveUnusedFixUnused_Text();
    public static string get_RemoveUnusedFixNotAccessed_Text();
    public static string get_RemoveUnusedFixDiscarded_Text();
    public static string get_MoveFileTo_Text();
    public static string get_New_Text();
    public static string get_Folder_Text();
    public static string get_Namespace_Text();
    public static string get_Type_Text();
    public static string get__From__Text();
    public static string get_ShowAdvisoryFor__OnCheckmarx_Text();
    public static string get_Update_ToTheLatestVersion_Text();
    public static string get_SeeMore_Text();
    public static string get_RenameCqrs_Text();
    public static string get_RenameToCqrs__Text();
}
public abstract class JetBrains.ReSharper.Intentions.Util.AccessRightsCalculator : object {
    public static AccessRights GetAccessRightsForTypeDeclaration(IReference sourceReference, ICreationTarget target);
    public static bool GetStaticForTypeMemberDeclaration(IReference reference);
    protected abstract virtual bool SuggestStaticForTypeMemberDeclaration(IReference reference);
    private static AccessRights GetAccessRightsForFileTarget(ITypeMemberDeclaration sourceMemberDeclaration, IProject targetProject);
    protected abstract virtual ITypeMemberDeclaration GetSourceMemberDeclaration(ITreeNode sourceElement);
    private static AccessRights SuggestAccessRightsForTypeTarget(IReference sourceReference, ITypeMemberDeclaration sourceMemberDeclaration, ITypeTarget target);
    private static AccessRights SuggestAccessRightsForTypeTarget(IReference sourceReference, ITypeMemberDeclaration sourceMemberDeclaration, ITypeDeclarationTarget target);
    private static AccessRights SuggestAccessRightsForTypeTarget(IReference sourceReference, ITypeMemberDeclaration sourceMemberDeclaration, ITypeElement target);
    [ObsoleteAttribute("Use GetAccessRightsForTypeMemberDeclaration")]
public static AccessRights GetAccessRightsForTypeMemberDeclarationObsolete(IReference sourceReference, ITypeTarget targetType);
    public static IReadOnlyList`1<AccessRights> GetAccessRightsForTypeMemberDeclaration(IReference sourceReference, ITypeTarget targetType);
    public static IReadOnlyList`1<AccessRights> GetAccessRightsForTypeMemberDeclaration(IReference sourceReference, ITypeElement targetType);
    public static bool CanCreateAbstractMember(IClass class, IReference referenceFrom);
    public abstract virtual bool CheckStaticContextQualifierIsStatic(ITypeElement qualifier);
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<ITypeElement> <GetAccessRightsForTypeMemberDeclaration>g__GetNestedTypesRecursively|10_0(ITypeElement type);
}
public static class JetBrains.ReSharper.Intentions.Util.CastUtil : object {
    private static bool Check(IExpression expression, bool skipImplicitConversions, ITypeConversionRule conversionRule, IType targetType, IExpression castTarget);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Util.CastUtil/<PossibleTypeAndNewExpression>d__1")]
[NotNullAttribute]
private static IEnumerable`1<ValueTuple`2<IExpression, IType>> PossibleTypeAndNewExpression(IExpression expression, IEnumerable`1<IType> expected, bool removeInnerCasts, bool skipImplicitConversions, Func`2<IExpression, IExpression> getCastOperand);
    [NotNullAttribute]
public static IEnumerable`1<ValueTuple`2<IExpression, IType>> PossibleTypeAndNewExpression(IExpression expression, bool removeInnerCasts, bool skipImplicitConversions, Func`2<IExpression, IExpression> getCastOperand);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Util.CastUtil/<UnwrapCasts>d__3")]
[NotNullAttribute]
private static IEnumerable`1<IExpression> UnwrapCasts(IExpression expression, Func`2<IExpression, IExpression> getCastOperand);
    public static bool TargetTypeIsSingleBestConversion(IExpression expressionToCast, IType targetType, IExpression expressionToLeave);
    [NotNullAttribute]
public static IEnumerable`1<ValueTuple`2<IExpression, IType>> PossibleCasts(IExpression castedOperand, IEnumerable`1<IExpression> operands, ICollection`1<IType> commonBaseTypes, Func`2<IExpression, IExpression> getCastOperand);
    [CanBeNullAttribute]
public static IArgumentInfo SelectCastedArgument(IReference reference);
}
public abstract class JetBrains.ReSharper.Intentions.Util.ChangeTypeHelper : object {
    public sealed virtual bool IsAvailable(IType targetType, IDeclaredElement element);
    [NotNullAttribute]
public static RichText GetText(IDeclaredElement declaredElement, IType type, PsiLanguageType language);
    public sealed virtual bool CanCreateTypeUsage(IType type, IDeclaredElement element);
    public sealed virtual void ChangeType(IType targetType, IClrDeclaredElement clrDeclaredElement);
    [CanBeNullAttribute]
private static IOverridableMember FindOverridableMember(IDeclaredElement element);
    [CanBeNullAttribute]
private static IParametersOwner FindHierarchyTarget(IDeclaredElement element);
    private static bool MayBeOverridden(ITypeMember typeMember);
    private static void RemoveParamsAttributeIfNeeded(IType targetType, IDeclaredElement declaredElement);
    private static bool NeedToRemoveParamsAttribute(IParameter declaredParam, IType targetType);
    private bool IsChangeable(IDeclaredElement declaredElement, bool fast);
    [ContractAnnotationAttribute("null => false")]
protected virtual bool CheckKind(IDeclaredElement element);
    private static void ChangeTypeNotInHierarchy(IType targetType, IClrDeclaredElement declaredElement);
    [NotNullAttribute]
private static IList`1<IDeclaration> GetTypeOwnerDeclarations(IDeclaredElement declaredElement);
    private static void ChangeTypeInHierarchy(IType targetType, IClrDeclaredElement declaredElement);
}
public static class JetBrains.ReSharper.Intentions.Util.CommonBaseTypesUtil : object {
    [NotNullAttribute]
public static IEnumerable`1<IType> ComonBaseTypesOrArrays(IEnumerable`1<IExpression> expressions, bool mostSpecific, bool ignoreUnresolved);
    [NotNullAttribute]
public static IEnumerable`1<IDeclaredType> CommonBaseTypes(IEnumerable`1<IExpression> expressions, bool ignoreUnresolved);
    [NotNullAttribute]
public static IEnumerable`1<IDeclaredType> CommonBaseTypes(IEnumerable`1<IDeclaredType> forTypes, bool ignoreUnresolved);
    [NotNullAttribute]
public static IEnumerable`1<IDeclaredType> MostSpecificCommonBaseTypes(IEnumerable`1<IDeclaredType> commonBaseTypes);
    private static bool DontHaveSubtypes(IDeclaredType target, IEnumerable`1<IDeclaredType> typesToCheck);
    [NotNullAttribute]
public static IEnumerable`1<IDeclaredType> AllSuperTypes(IDeclaredType type);
}
public static class JetBrains.ReSharper.Intentions.Util.ContextActionUtils : object {
    public static void FormatWithDefaultProfile(ITreeNode root);
    public static void Format(ITreeNode root, CodeFormatProfile profile);
    public static void ApplyCodeStyleRecursiveAndFormat(ITreeNode root);
    public static void ApplyCodeStyleAndFormat(ITreeNode root);
    public static void ApplyCodeStyleAndFormat(ITreeNode root);
}
public abstract class JetBrains.ReSharper.Intentions.Util.ExtensionMethodImportUtilBase : object {
    [NotNullAttribute]
public static ResolveErrorType[] NonStrictResolve;
    [NotNullAttribute]
public static ResolveErrorType[] StrictResolve;
    [NotNullAttribute]
protected static DeclaredElementPresenterStyle Style;
    private static ExtensionMethodImportUtilBase();
    [NotNullAttribute]
public IList`1<IMethod> CalculateAlternatives(IReference reference, ResolveErrorType[] acceptedErrors);
    [NotNullAttribute]
protected virtual ResolveErrorType[] PatchResolveErrors(IReference reference, ResolveErrorType[] acceptedErrors);
    [NotNullAttribute]
private IList`1<IMethod> ProcessSingleReference(InvocationCandidate invocationCandidate, IReference reference, ResolveErrorType[] acceptedErrors, IDeclaredElement resolvedElement, ResolveErrorType resolveErrorType);
    [NotNullAttribute]
private IList`1<IMethod> MethodsWithGivenName(InvocationCandidate candidate, IReference reference, int typeArgumentsCount, ResolveErrorType[] acceptedErrors);
    public static bool CheckCandidateVisibleWithModuleReference(ModuleReferencerService moduleReferencerService, IReference sourceReference, IMethod method);
    public static bool CheckCandidateVisibleWithoutModuleReference(IReference sourceReference, IMethod method);
    private static bool CompleteCheck(IMethod method, InvocationCandidate candidate, ResolveErrorType[] acceptedErrors);
    [NotNullAttribute]
protected virtual IList`1<InvocationCandidate> GetInvocationInfo(ResolveErrorType[] acceptedErrors, IReference reference);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Util.ExtensionMethodImportUtilBase/<GetCandidateMethods>d__11")]
protected virtual IEnumerable`1<IMethod> GetCandidateMethods(IInvocationInfo invocationInfo, IReference reference);
    [CanBeNullAttribute]
protected virtual string Present(IDeclaredElement method);
    [CanBeNullAttribute]
protected virtual ResolveErrorType ResolveOverloadsForExtensionMethods(InvocationCandidate candidate, IMethod method);
}
[NullableContextAttribute("2")]
public interface JetBrains.ReSharper.Intentions.Util.IChangeTypeHelper {
    [ContractAnnotationAttribute("targetType: null => false")]
public abstract virtual bool IsAvailable(IType targetType, IDeclaredElement element);
    [ContractAnnotationAttribute("type: null => false; element: null => false")]
public abstract virtual bool CanCreateTypeUsage(IType type, IDeclaredElement element);
    [NullableContextAttribute("1")]
public abstract virtual void ChangeType(IType targetType, IClrDeclaredElement clrDeclaredElement);
}
public interface JetBrains.ReSharper.Intentions.Util.ICommentCodeLanguageHelper {
    public abstract virtual bool CanCommentDeclaration(IDeclaration declaration);
    [NotNullAttribute]
public abstract virtual Action CommentDeclaration(IDeclaration declaration);
    [NotNullAttribute]
public abstract virtual Action CommentTextRange(IFile file, DocumentRange range);
}
[ObsoleteAttribute("Use LiveTemplatesManager")]
public static class JetBrains.ReSharper.Intentions.Util.IntentionTemplateUtil : object {
    public static void ExecuteTemplate(ISolution solution, ITextControl textControl, DocumentRange selectionRange, HotspotInfo[] fieldInfos);
}
public static class JetBrains.ReSharper.Intentions.Util.PathQuickFixUtil : object {
    [NotNullAttribute]
public static IBulbAction[] CreateChangePathMappingItems(IPathReference pathReference);
    [NotNullAttribute]
public static IBulbAction[] CreateRunPathMappingEditorItems(IFile psiFile, TreeOffset treeOffset);
}
public abstract class JetBrains.ReSharper.Intentions.Util.SetBodyUtil : object {
    public abstract virtual void SetBody(IFunctionDeclaration destination, ITreeNode body);
    protected abstract virtual IFunctionDeclaration EnsureAccessor(ITypeMemberDeclaration destination, AccessorKind kind);
    public void SetAccessorBody(ITypeMemberDeclaration destination, AccessorKind kind, ITreeNode body);
}
public static class JetBrains.ReSharper.Intentions.Util.ValidUtils : object {
    [PureAttribute]
[ContractAnnotationAttribute("null => false")]
public static bool Valid(IReference reference);
    [PureAttribute]
[ContractAnnotationAttribute("null => false")]
public static bool Valid(ITreeNode element);
    [PureAttribute]
[ContractAnnotationAttribute("declaredElement:null => false")]
public static bool Valid(IDeclaredElement declaredElement, bool checkIsInSource);
    [PureAttribute]
[ContractAnnotationAttribute("type:null => false")]
public static bool Valid(IType type);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Intentions.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
