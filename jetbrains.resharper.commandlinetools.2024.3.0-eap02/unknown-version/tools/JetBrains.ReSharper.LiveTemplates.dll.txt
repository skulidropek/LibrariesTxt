[ActionAttribute("BuildTemplateFromSelection", "JetBrains.ReSharper.LiveTemplates.Resources.Strings", "CreateLiveTemplateFromSelectionActionText")]
public class JetBrains.ReSharper.LiveTemplates.Actions.BuildTemplateAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("LiveTemplates.Insert", "JetBrains.ReSharper.LiveTemplates.Resources.Strings", "InsertLiveTemplateActionText")]
public class JetBrains.ReSharper.LiveTemplates.Actions.InsertLiveTemplateAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public class JetBrains.ReSharper.LiveTemplates.ContextActions.SurroundWithAction : BulbActionBase {
    [NotNullAttribute]
private SurroundTemplateItem mySurroundTemplateItem;
    public string Text { get; }
    public SurroundWithAction(SurroundTemplateItem surroundTemplateItem);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.LiveTemplates.ContextActions.SurroundWithContextAction : object {
    [NotNullAttribute]
private LanguageIndependentContextActionDataProvider myDataProvider;
    [NotNullAttribute]
public static IAnchor SurroundWithAnchor;
    private static Guid ourBracesTemplate;
    public SurroundWithContextAction(LanguageIndependentContextActionDataProvider dataProvider);
    private static SurroundWithContextAction();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.LiveTemplates.ContextActions.SurroundWithContextAction/<CreateBulbItems>d__5")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public class JetBrains.ReSharper.LiveTemplates.ContextActions.SurroundWithMoreAction : BulbActionBase {
    [NotNullAttribute]
private TemplateAcceptanceContext myTemplateAcceptanceContext;
    public string Text { get; }
    public SurroundWithMoreAction(TemplateAcceptanceContext templateAcceptanceContext);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[FlagsAttribute]
public enum JetBrains.ReSharper.LiveTemplates.CSharp.Context.CSharpInsertionPoint : Enum {
    public int value__;
    public static CSharpInsertionPoint Everywhere;
    public static CSharpInsertionPoint Expression;
    public static CSharpInsertionPoint Statement;
    public static CSharpInsertionPoint TypeMember;
    public static CSharpInsertionPoint TypeAndNamespace;
    public static CSharpInsertionPoint QueryClause;
}
public class JetBrains.ReSharper.LiveTemplates.CSharp.Context.CSharpTemplateContext : TemplateContext {
    private CSharpInsertionPoint myInsertionPoint;
    private CSharpLanguageLevel myMinimumLanguageLevel;
    public CSharpLanguageLevel MinimumLanguageVersion { get; }
    public IEnumerable`1<ITemplateScopePoint> ScopePoints { get; }
    public CSharpTemplateContext(CSharpInsertionPoint insertionContext);
    public CSharpTemplateContext(CSharpInsertionPoint insertionContext, CSharpLanguageLevel minimumLanguageLevel);
    public CSharpLanguageLevel get_MinimumLanguageVersion();
    public virtual IEnumerable`1<ITemplateScopePoint> get_ScopePoints();
    private IList`1<ITemplateScopePoint> CalcScopePoints();
}
public class JetBrains.ReSharper.LiveTemplates.CSharp.Context.CSharpTemplateContextAcceptor : ScopedTemplateAcceptorBase {
    public CSharpTemplateContextAcceptor(TemplateAcceptanceContext context);
    public virtual string ToString();
}
public class JetBrains.ReSharper.LiveTemplates.CSharp.Context.InCSharpExceptStringLiterals : InCSharpFile {
    private static Guid DefaultUID;
    public string PresentableShortName { get; }
    public InCSharpExceptStringLiterals(CSharpLanguageLevel minimumLanguageLevel);
    private static InCSharpExceptStringLiterals();
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
    public virtual string ToString();
    public virtual InCSharpFile NewInstance(CSharpLanguageLevel minimumLanguageLevel);
}
public class JetBrains.ReSharper.LiveTemplates.CSharp.Context.InCSharpExpression : InCSharpFile {
    private static Guid DefaultUID;
    public string PresentableShortName { get; }
    public InCSharpExpression(CSharpLanguageLevel minimumLanguageLevel);
    private static InCSharpExpression();
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
    public virtual string ToString();
    public virtual InCSharpFile NewInstance(CSharpLanguageLevel minimumLanguageLevel);
}
public class JetBrains.ReSharper.LiveTemplates.CSharp.Context.InCSharpFile : InAnyLanguageFile {
    private static Guid DefaultUID;
    public static string MinimumLanguageVersionAttributeName;
    [CompilerGeneratedAttribute]
private CSharpLanguageLevel <MinimumLanguageLevel>k__BackingField;
    public PsiLanguageType RelatedLanguage { get; }
    public string PresentableShortName { get; }
    public CSharpLanguageLevel MinimumLanguageLevel { get; }
    public string LangDescr { get; }
    protected string LanguageVersionString { get; }
    public Guid QuickListUID { get; }
    public string QuickListTitle { get; }
    public InCSharpFile(CSharpLanguageLevel minimumLanguageLevel);
    private static InCSharpFile();
    public virtual Guid GetDefaultUID();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.LiveTemplates.CSharp.Context.InCSharpFile/<EnumerateCustomProperties>d__3")]
public virtual IEnumerable`1<Pair`2<string, string>> EnumerateCustomProperties();
    public virtual PsiLanguageType get_RelatedLanguage();
    public virtual string get_PresentableShortName();
    [CompilerGeneratedAttribute]
public CSharpLanguageLevel get_MinimumLanguageLevel();
    public string get_LangDescr();
    public virtual bool IsSubsetOf(ITemplateScopePoint other);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.LiveTemplates.CSharp.Context.InCSharpFile/<GetExtensions>d__15")]
protected virtual IEnumerable`1<string> GetExtensions();
    public virtual string ToString();
    protected string get_LanguageVersionString();
    public virtual InCSharpFile NewInstance(CSharpLanguageLevel minimumLanguageLevel);
    public sealed virtual Guid get_QuickListUID();
    public sealed virtual string get_QuickListTitle();
}
internal class JetBrains.ReSharper.LiveTemplates.CSharp.Context.InCSharpQuery : InCSharpFile {
    private static Guid DefaultUID;
    public string PresentableShortName { get; }
    public InCSharpQuery(CSharpLanguageLevel minimumLanguageLevel);
    private static InCSharpQuery();
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
    public virtual string ToString();
    public virtual InCSharpFile NewInstance(CSharpLanguageLevel minimumLanguageLevel);
}
public class JetBrains.ReSharper.LiveTemplates.CSharp.Context.InCSharpStatement : InCSharpExpression {
    private static Guid DefaultUID;
    public string PresentableShortName { get; }
    public InCSharpStatement(CSharpLanguageLevel minimumLanguageLevel);
    private static InCSharpStatement();
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
    public virtual InCSharpFile NewInstance(CSharpLanguageLevel minimumLanguageLevel);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.LiveTemplates.CSharp.Context.InCSharpTypeAndNamespace : InCSharpFile {
    private static Guid DefaultUID;
    public string PresentableShortName { get; }
    public InCSharpTypeAndNamespace(CSharpLanguageLevel minimumLanguageLevel);
    private static InCSharpTypeAndNamespace();
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
    public virtual string ToString();
    public virtual InCSharpFile NewInstance(CSharpLanguageLevel minimumLanguageLevel);
}
internal class JetBrains.ReSharper.LiveTemplates.CSharp.Context.InCSharpTypeMember : InCSharpFile {
    private static Guid DefaultUID;
    public string PresentableShortName { get; }
    public InCSharpTypeMember(CSharpLanguageLevel minimumLanguageLevel);
    private static InCSharpTypeMember();
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
    public virtual string ToString();
    public virtual InCSharpFile NewInstance(CSharpLanguageLevel minimumLanguageLevel);
}
[DefaultSettingsAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.LiveTemplatesSettings", "16")]
public class JetBrains.ReSharper.LiveTemplates.CSharp.Defaults.DefaultFileTemplates : object {
    public string Name { get; }
    private static DefaultFileTemplates();
    public sealed virtual Stream GetDefaultSettingsStream(Lifetime lifetime);
    public sealed virtual string get_Name();
}
[DefaultSettingsAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.LiveTemplatesSettings", "16")]
public class JetBrains.ReSharper.LiveTemplates.CSharp.Defaults.DefaultLiveTemplates : object {
    public string Name { get; }
    public sealed virtual Stream GetDefaultSettingsStream(Lifetime lifetime);
    public sealed virtual string get_Name();
}
[DefaultSettingsAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.LiveTemplatesSettings", "16")]
public class JetBrains.ReSharper.LiveTemplates.CSharp.Defaults.DefaultSurroundTemplates : object {
    public string Name { get; }
    public sealed virtual Stream GetDefaultSettingsStream(Lifetime lifetime);
    public sealed virtual string get_Name();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
internal class JetBrains.ReSharper.LiveTemplates.CSharp.Formatting.CSharpTemplateFormatter : object {
    public bool SupportsShorteningQualifiedReferences { get; }
    public string EndMarker { get; }
    public sealed virtual bool get_SupportsShorteningQualifiedReferences();
    public sealed virtual string get_EndMarker();
    public sealed virtual void BeforeFormatting(DocumentRange documentRange, ISolution solution);
    private static void UpdateTemplateCode(ICSharpFile file, DocumentRange documentRange);
    public sealed virtual void ShortenQualifiedReferences(DocumentRange documentRange, ISolution solution);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.LiveTemplates.CSharp.Hotspots.CSharpHotspotService : object {
    public sealed virtual void AcceptSessionDocument(IHotspotSession hotspotSession, IDocument document);
}
[FileTemplatesAttribute("16")]
internal class JetBrains.ReSharper.LiveTemplates.CSharp.LiveTemplates.CSharpLiveTemplatesSupport : object {
    public string Name { get; }
    public IEnumerable`1<ITemplateScopePoint> ScopePoints { get; }
    public sealed virtual string get_Name();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.LiveTemplates.CSharp.LiveTemplates.CSharpLiveTemplatesSupport/<get_ScopePoints>d__3")]
public sealed virtual IEnumerable`1<ITemplateScopePoint> get_ScopePoints();
}
[MacroDefinitionAttribute("castToLeftSideType")]
public class JetBrains.ReSharper.LiveTemplates.CSharp.Macros.CastToLeftSideTypeMacroDef : SimpleMacroDefinition {
    public virtual string GetPlaceholder(IDocument document, ISolution solution, IEnumerable`1<IMacroParameterValue> parameters);
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.LiveTemplates.CSharp.Macros.CastToLeftSideTypeMacroImpl : SimpleMacroImplementation {
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
}
public class JetBrains.ReSharper.LiveTemplates.CSharp.Macros.CSharpImpl : MacroImplementationScopeProviderBase {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.LiveTemplates.CSharp.Macros.CSharpMacroUtil : MacroUtilBase {
    [NotNullAttribute]
private ICSharpExpectedTypesProvider myExpectedTypesProvider;
    public CSharpMacroUtil(CSharpLanguage language, ICSharpExpectedTypesProvider expectedTypesProvider);
    public virtual ICollection`1<IType> GetElementTypes(IExpression collectionExpression);
    [CanBeNullAttribute]
public static IType GetElementTypeStatic(IExpression collectionExpression, Boolean& enforceExplicitType);
    public virtual ILookupItem CreateDeclaredElementLookupItem(DeclaredElementInstance`1<ITypeOwner> element, IHotspotContext context);
    protected virtual IExpression CreateExpression(IPsiModule module, string text);
    protected virtual IReadOnlyList`1<ExpectedType> GetExpectedTypes(ITreeNode element);
    [NotNullAttribute]
public IList`1<ILookupItem> SuggestVariableTypes(IHotspotContext context, PsiLanguageType languageType);
    private static void CollectConstantDeclarationExpectedTypes(TreeNodeCollection`1<ILocalConstantDeclaration> constantDeclarations, List`1<IExpectedTypeConstraint> constraints);
    private static void CollectVariableDeclarationExpectedTypes(TreeNodeCollection`1<ILocalVariableDeclaration> variableDeclarations, List`1<IExpectedTypeConstraint> constraints);
    [CanBeNullAttribute]
private static IType CollectArrayInitializerExpectedType(IArrayInitializer arrayInitializer, Int32& initializerArity);
}
public class JetBrains.ReSharper.LiveTemplates.CSharp.Macros.CSharpProjectImpl : MacroImplementationScopeProviderBase {
}
[MacroDefinitionAttribute("fileheader")]
public class JetBrains.ReSharper.LiveTemplates.CSharp.Macros.FileHeaderMacroDef : SimpleMacroDefinition {
    public virtual string GetPlaceholder(IDocument document, ISolution solution, IEnumerable`1<IMacroParameterValue> parameters);
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.LiveTemplates.CSharp.Macros.FileHeaderMacroImpl : SimpleMacroImplementation {
    public virtual bool HandleExpansion(IHotspotContext context);
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.LiveTemplates.CSharp.Macros.SuggestVariableNameMacroImpl : SuggestVariableNameMacroImplBase {
    public SuggestVariableNameMacroImpl(MacroParameterValueCollection arguments);
    protected virtual IList`1<string> SuggestNamesForIdentifier(IIdentifier identifier);
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.LiveTemplates.CSharp.Macros.SuggestVariableTypeMacroImpl : SimpleMacroImplementation {
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
}
[ScopeCategoryUIProviderAttribute("16")]
public class JetBrains.ReSharper.LiveTemplates.CSharp.Scope.CSharpProjectScopeCategoryUIProvider : ScopeCategoryUIProvider {
    public string CategoryCaption { get; }
    [IteratorStateMachineAttribute("JetBrains.ReSharper.LiveTemplates.CSharp.Scope.CSharpProjectScopeCategoryUIProvider/<BuildAllPoints>d__1")]
public virtual IEnumerable`1<ITemplateScopePoint> BuildAllPoints();
    public virtual string Present(ITemplateScopePoint point);
    public virtual string get_CategoryCaption();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.LiveTemplates.CSharp.Scope.CSharpProjectScopeProvider : ScopeProvider {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.LiveTemplates.CSharp.Scope.CSharpProjectScopeProvider/<ProvideScopePoints>d__1")]
public virtual IEnumerable`1<ITemplateScopePoint> ProvideScopePoints(TemplateAcceptanceContext context);
    [CompilerGeneratedAttribute]
private ITemplateScopePoint <.ctor>b__0_0(string t);
}
[ScopeCategoryUIProviderAttribute("16")]
public class JetBrains.ReSharper.LiveTemplates.CSharp.Scope.CSharpScopeCategoryUIProviderBase : ScopeCategoryUIProvider {
    public string CategoryCaption { get; }
    [IteratorStateMachineAttribute("JetBrains.ReSharper.LiveTemplates.CSharp.Scope.CSharpScopeCategoryUIProviderBase/<BuildAllPoints>d__1")]
public virtual IEnumerable`1<ITemplateScopePoint> BuildAllPoints();
    public virtual string get_CategoryCaption();
    public virtual string Present(ITemplateScopePoint point);
    public virtual IScopeOptionsUIBase CreateUI(ITemplateScopePoint point);
    public virtual bool HaveOptionsUIFor(ITemplateScopePoint point);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.LiveTemplates.CSharp.Scope.CSharpScopeProvider : ScopeProvider {
    private Dictionary`2<string, Func`2<CSharpLanguageLevel, ITemplateScopePoint>> myCreators;
    private static bool TestNode(CSharpReparseContext context, string text, bool strictStart);
    public virtual IEnumerable`1<ITemplateScopePoint> ProvideScopePoints(TemplateAcceptanceContext tacContext);
    private static bool IsRightAfterTopLevel(IPsiView view);
    [PureAttribute]
private static bool InsideTypeDeclaration(PsiFileView psiView);
    [PureAttribute]
private static bool ShouldSuppress(IPsiView psiView);
    [CanBeNullAttribute]
private static ITreeNode FindLeftToken(IPsiView psiView);
    [PureAttribute]
private static bool InsideStringLiteral(IPsiView psiView);
    public virtual ITemplateScopePoint CreateScope(Guid scopeGuid, string typeName, IEnumerable`1<Pair`2<string, string>> customProperties);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.LiveTemplates.CSharp.Scope.CSharpScopeProvider/<<ProvideScopePoints>g__Enumerate|3_0>d")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<ITemplateScopePoint> <ProvideScopePoints>g__Enumerate|3_0(ISolution solution, TemplateAcceptanceContext tacContext);
}
[RegisterHighlighterAttribute("ReSharper Template Editor C# Keyword")]
[RegisterHighlighterAttribute("ReSharper Template Editor C# Preprocessor Directive")]
[RegisterHighlighterAttribute("ReSharper Template Editor C# Comment")]
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.LiveTemplates.CSharp.Scope.CSharpTemplateHighlighterProvider : TemplateHighlightingProvider {
    public static string CommentAttribute;
    public static string KeywordAttribute;
    public static string PreprocessorAttribute;
    public virtual string GetHighlightingAttributeId(TokenNodeType tokenType);
}
public class JetBrains.ReSharper.LiveTemplates.CSharp.Scope.InCSharpProjectFile : InLanguageSpecificProject {
    private static Guid DefaultUID;
    public string PresentableShortName { get; }
    public PsiLanguageType RelatedLanguage { get; }
    public string DefaultFileName { get; }
    public Guid QuickListUID { get; }
    public string QuickListTitle { get; }
    private static InCSharpProjectFile();
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
    public virtual PsiLanguageType get_RelatedLanguage();
    public virtual string get_DefaultFileName();
    public sealed virtual Guid get_QuickListUID();
    public sealed virtual string get_QuickListTitle();
}
public static class JetBrains.ReSharper.LiveTemplates.CSharp.Scope.ScopeUtils : object {
    [PureAttribute]
public static bool IsLiteralPartInterpolatedString(ITreeNode tokeNode, TokenNodeType tokenNodeType, int caretOffset);
}
public class JetBrains.ReSharper.LiveTemplates.CSharp.TemplateBuilder.VariableDeclarationFieldEvaluator : FieldEvaluatorBase {
    public VariableDeclarationFieldEvaluator(CollectedFields context);
    public virtual void ProcessElement(ITreeNode element);
}
internal class JetBrains.ReSharper.LiveTemplates.CSharp.TemplateBuilder.VariableReferenceFieldEvaluator : FieldEvaluatorBase {
    private List`1<IReference> myProcessedReferences;
    public VariableReferenceFieldEvaluator(CollectedFields context);
    public virtual void ProcessElement(ITreeNode element);
    private void AddFieldForLocalVariable(ITypeOwner localVariable);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.LiveTemplates.CSharp.ZoneMarker : object {
}
[SolutionComponentAttribute("10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.LiveTemplates.Execution.LiveAndPostfixTemplatesTabTracker : object {
    public LiveAndPostfixTemplatesTabTracker(Lifetime lifetime, UndoManager changeUnitFactory, IActionManager actionManager, LiveTemplatesManager liveTemplatesManager, PostfixTemplatesManager postfixTemplatesManager, ICommandProcessor commandProcessor, ICodeCompletionSessionManager sessionManager, IExternalIntellisenseHost externalIntellisenseHost, LastTypingAction lastTypingAction);
}
public class JetBrains.ReSharper.LiveTemplates.ExtendedRichText : RichTextBox {
    private DummyControl myDummyControl;
    private Container components;
    protected virtual void Dispose(bool disposing);
    public void GetFocus();
    public void RemoveFocus();
    private void InitializeComponent();
}
[ActionAttribute("GenerateFileBesides", "JetBrains.ReSharper.LiveTemplates.Resources.Strings", "CreateNewFileActionText")]
public class JetBrains.ReSharper.LiveTemplates.FileTemplates.FileTemplatesGenerateAction : GenerateActionBase`1<GenerateFromTemplateItemProvider> {
    protected RichText Caption { get; }
    protected virtual ICollection`1<GenerateFromTemplateItemProvider> GetWorkflowProviders();
    protected virtual RichText get_Caption();
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.LiveTemplates.FileTemplates.FileTemplatesManagerBase : FileTemplatesManager {
    public static string NAME_PATTERN;
    [NotNullAttribute]
private Lifetime myLifetime;
    private TemplateScopeManager myScopeManager;
    private LiveTemplatesManager myLiveTemplatesManager;
    private ISettingsStore mySettingsStore;
    private BulbMenuComponent myBulbMenuComponent;
    private IMainWindowPopupWindowContext myMainWindowPopupWindowContext;
    private IThreading myThreading;
    private ILogger myLogger;
    public FileTemplatesManagerBase(Lifetime lifetime, IActionManager actionManager, TemplateScopeManager scopeManager, LiveTemplatesManager liveTemplatesManager, IParallelImmutableList`1<IScopeCategoryUIProvider> scopeCategoryUIProviders, IEnumerable`1<IFileTemplatesSupport> fileTemplateSupporters, ISettingsStore settingsStore, StoredTemplatesProvider storedTemplatesProvider, ChangeManager changeManager, IEnumerable`1<ISectionFilenameSelector> fileNameSelectors, BulbMenuComponent bulbMenuComponent, IMainWindowPopupWindowContext mainWindowPopupWindowContext, IThreading threading);
    public virtual Task`1<IProjectFile> CreateFileFromTemplateAsync(string fileName, ProjectFolderWithLocation[] targetFolders, Template template, TargetFrameworkId targetFrameworkId, FileCreationParameters parameters, IFileCreationContext context, Action`1<IHotspotSession> init, JetHashSet`1<Guid> sectionsToSkip);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.LiveTemplates.FileTemplates.FileTemplatesManagerBase/<FileFromTemplateWithingFolder>d__11")]
[NotNullAttribute]
[ItemCanBeNullAttribute]
private Task`1<IProjectFile> FileFromTemplateWithingFolder(string fileName, Template template, FileCreationParameters parameters, ProjectFolderWithLocation targetFolder, TargetFrameworkId targetFrameworkId, IFileCreationContext context, JetHashSet`1<Guid> sectionsToSkip);
    private bool IsSuitableTextControl(ITextControl textControl, IProjectFile expectedFile, DocumentsOnProjectFiles documentsOnProjectFiles, TargetFrameworkId targetFrameworkId);
    private Task`1<ITextControl> TryOpenProjectFileOrWaitUntilSuitableFileIsOpenAsync(Lifetime lifetime, IProjectFile projectFile, ISolution solution, TargetFrameworkId targetFrameworkId, Nullable`1<TimeSpan> timeout);
    private string ProcessMetaMacros(string value, Template template, string fileName, Dictionary`2<TemplateSection, string> resolvedNames);
    private static TProjectItem TryAdjustProjectItemForSharedProject(TProjectItem projectItem);
    private static ProjectFolderWithLocation TryAdjustProjectFolderForSharedProject(ProjectFolderWithLocation folderWithLocation);
    private static IProjectFile TryAdjustProjectFileForSharedProject(IProjectFile fileFromSharedProject, ISolution solution);
    protected virtual Task`1<string> GetFileName(Template template, ProjectFolderWithLocation targetFolder);
    protected virtual Template GetTemplate(List`1<ITemplateScopePoint> realScopePoints, Func`3<Lifetime, DataContexts, IDataContext> dataContext);
    protected virtual IProjectFile AddFile(string fileName, string text, FileCreationParameters parameters, ProjectFolderWithLocation targetFolder, IFileCreationContext context);
}
public class JetBrains.ReSharper.LiveTemplates.FileTemplates.GenerateFileActionWorkflow : object {
    private Template myTemplate;
    private float myIndex;
    [CanBeNullAttribute]
private IconId myCustomIcon;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public string Title { get; }
    public IconId Icon { get; }
    public string ActionId { get; }
    public double Order { get; }
    public GenerateActionGroup ActionGroup { get; }
    public GenerateFileActionWorkflow(Template template, int index);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Title();
    public sealed virtual IconId get_Icon();
    public sealed virtual string get_ActionId();
    public sealed virtual double get_Order();
    public sealed virtual GenerateActionGroup get_ActionGroup();
    public sealed virtual bool IsAvailable(IDataContext dataContext);
    public sealed virtual bool IsEnabled(IDataContext dataContext);
    public sealed virtual void Execute(IDataContext context);
}
[GenerateProviderAttribute("16")]
public class JetBrains.ReSharper.LiveTemplates.FileTemplates.GenerateFromTemplateItemProvider : object {
    private bool myWorkInTextControl;
    private ISettingsStore mySettingsStore;
    private StoredTemplatesProvider myStoredTemplatesProvider;
    private TemplatesLocalizationManager myLocalizationManager;
    public GenerateFromTemplateItemProvider(ISettingsStore settingsStore, TemplatesLocalizationManager templatesLocalizationManager, StoredTemplatesProvider storedTemplatesProvider);
    public GenerateFromTemplateItemProvider(bool workInTextControl);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.LiveTemplates.FileTemplates.GenerateFromTemplateItemProvider/<CreateWorkflow>d__6")]
public sealed virtual IEnumerable`1<IGenerateActionWorkflow> CreateWorkflow(IDataContext dataContext);
}
[ActionAttribute("FileTemplates.QuickList.More", "JetBrains.ReSharper.LiveTemplates.Resources.Strings", "AllTemplatesActionText")]
public class JetBrains.ReSharper.LiveTemplates.FileTemplates.MoreFileTemplatesAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public class JetBrains.ReSharper.LiveTemplates.FileTemplates.MoreTemplatesActionWorkflow : object {
    private TemplateScopeManager myScopeManager;
    public string Title { get; }
    public IconId Icon { get; }
    public string ActionId { get; }
    public GenerateActionGroup ActionGroup { get; }
    public double Order { get; }
    public sealed virtual string get_Title();
    public sealed virtual IconId get_Icon();
    public sealed virtual string get_ActionId();
    public sealed virtual GenerateActionGroup get_ActionGroup();
    public sealed virtual bool IsAvailable(IDataContext dataContext);
    public sealed virtual bool IsEnabled(IDataContext dataContext);
    public sealed virtual void Execute(IDataContext context);
    public sealed virtual double get_Order();
}
public class JetBrains.ReSharper.LiveTemplates.FileTemplates.ShowTemplatesGroupActionWorkflow : object {
    private TemplateScopeManager myScopeManager;
    private IList`1<Template> myTemplates;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <Icon>k__BackingField;
    public string Title { get; public set; }
    public IconId Icon { get; public set; }
    public string ActionId { get; }
    public GenerateActionGroup ActionGroup { get; }
    public double Order { get; }
    public ShowTemplatesGroupActionWorkflow(string name, IList`1<Template> templates);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IconId get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(IconId value);
    public sealed virtual string get_ActionId();
    public sealed virtual GenerateActionGroup get_ActionGroup();
    public sealed virtual bool IsAvailable(IDataContext dataContext);
    public sealed virtual bool IsEnabled(IDataContext dataContext);
    public sealed virtual void Execute(IDataContext context);
    public sealed virtual double get_Order();
}
public interface JetBrains.ReSharper.LiveTemplates.ITextEditor {
    [CompilerGeneratedAttribute]
public abstract virtual void add_TextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MouseMove(MouseEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MouseMove(MouseEventHandler value);
    public abstract virtual string GetText();
    public abstract virtual void SetText(string text);
    public abstract virtual void SetColor(TextRange textRange, Color color);
    public abstract virtual void SetFlags(TextRange textRange, bool underline);
    public abstract virtual void BeginHighlight();
    public abstract virtual void EndHighlight();
}
public static class JetBrains.ReSharper.LiveTemplates.MacroDescriptionFormatter : object {
    private static Regex VARIABLE_REGEX;
    private static MacroDescriptionFormatter();
    public static MacroDefinitionAttribute GetMacroAttribute(IMacroDefinition macro);
    public static FormattedText FormatMacroDescription(IMacroDefinition macro);
    public static FormattedText FormatMacroDescription(MacroDefinitionAttribute macroAttribute);
    private static string ParameterEvaluator(Match match);
    public static IList`1<string> GetParameterNames(IMacroDefinition macro);
    public static FormattedText FormatMacro(IMacroDefinition macro, IList`1<MacroParameterAutomationBase> parameters);
    public static string ToPlainText(FormattedText formatted);
}
[ActionGroupAttribute("FileTemplates.QuickList", "1", "10")]
public class JetBrains.ReSharper.LiveTemplates.Menus.FileTemplatesQuickListActionGroup : object {
    public FileTemplatesQuickListActionGroup(DefaultHandler defaultHandler, Separator sep, MoreFileTemplatesAction moreFileTemplatesAction);
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.ReSharper.LiveTemplates.Menus.IntoEditTemplatesGroup : object {
    public IntoEditTemplatesGroup(FileTemplatesGenerateAction fileTemplatesGenerateAction, InsertLiveTemplateAction insertLiveTemplateAction, SurroundAction surroundAction);
}
public class JetBrains.ReSharper.LiveTemplates.Resources.LiveTemplatesCSharpThemedIcons : object {
}
public class JetBrains.ReSharper.LiveTemplates.Resources.LiveTemplatesResxThemedIcons : object {
}
public class JetBrains.ReSharper.LiveTemplates.Resources.LiveTemplatesThemedIcons : object {
}
public class JetBrains.ReSharper.LiveTemplates.Resources.LiveTemplatesXmlThemedIcons : object {
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.LiveTemplates.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string AllTemplatesActionText { get; }
    public static string CreateLiveTemplateFromSelectionActionText { get; }
    public static string CreateNewFileActionText { get; }
    public static string InsertLiveTemplateActionText { get; }
    public static string NewFromTemplateActionGroupText { get; }
    public static string SUrroundWithTemplateActionText { get; }
    public static string TemplatesUIDialogActionText { get; }
    public static string MinimumCVersion_Text { get; }
    public static string DefaultFile_name_Text { get; }
    public static string FileNameMustBeAValid_identifier_Text { get; }
    public static string _Shortcut_Text { get; }
    public static string _Description_Text { get; }
    public static string _Group_Text { get; }
    public static string _Reformat_Text { get; }
    public static string Shorten_qualifiedReferences_Text { get; }
    public static string Options_Text { get; }
    public static string _Availability_Text { get; }
    public static string _Generation_Text { get; }
    public static string S_urround_Text { get; }
    public static string _Both_Text { get; }
    public static string UseIn_Text { get; }
    public static string MnemonicCouldBeSingleDigitOnly_Text { get; }
    public static string ShowIn_contextAction_Text { get; }
    public static string _Mnemonic_Text { get; }
    public static string AddTo_NewMenu_Text { get; }
    public static string Edit_variables_Text { get; }
    public static string EditVariables_Text { get; }
    public static string Done_Text { get; }
    public static string NoMacroSelected_Text { get; }
    public static string _Editable_Text { get; }
    public static string _EditableAt_Text { get; }
    public static string Change_macro_Text { get; }
    public static string _SuitableForTemplateSAvailabilityOnly_Text { get; }
    public static string _All_Text { get; }
    public static string NotInQuickList_Text { get; }
    public static string InQuickList_Text { get; }
    public static string _TypesAndNamespaces_Text { get; }
    public static string _TypeMembers_Text { get; }
    public static string _Queries_Text { get; }
    public static string _Expressions_Text { get; }
    public static string _ExceptStrings_Text { get; }
    public static string _Statements_Text { get; }
    public static string AnywhereInXMLFile_Text { get; }
    public static string WhereATagCouldBeInXMLFile_Text { get; }
    public static string WhereAnAttributeCouldBeInXMLFile_Text { get; }
    public static string XMLTags_Text { get; }
    public static string XMLAttributes_Text { get; }
    public static string CProjectsIncludingASPNETCProjects_Text { get; }
    public static string VBProjectsIncludingASPNETProjects_Text { get; }
    public static string AnywhereIn__Text { get; }
    public static string NamespaceDeclaration_Text { get; }
    public static string TypeMemberDeclaration_Text { get; }
    public static string Expression_Text { get; }
    public static string In_WhereNamespaceOrTypeDeclarationIsAllowed_Text { get; }
    public static string In_WhereNamespaceDeclarationIsAllowed_Text { get; }
    public static string In_WhereTypeMemberDeclarationIsAllowed_Text { get; }
    public static string In_WhereMethodParameterIsAllowed_Text { get; }
    public static string In_WhereExpressionIsAllowed_Text { get; }
    public static string In_WhereAnywhereExceptStringLiterals_Text { get; }
    public static string In_WhereStatementIsAllowed_Text { get; }
    public static string In_WhereQueryClauseIsAllowed_Text { get; }
    public static string CProjects_Text { get; }
    public static string VBProjects_Text { get; }
    public static string AnywhereInResxFile_Text { get; }
    public static string InResxFileWhereRootTagIsExpected_Text { get; }
    public static string InResxFileWhereDataTagIsExpected_Text { get; }
    public static string ResxRoots_Text { get; }
    public static string ResxDatatags_Text { get; }
    public static string SurroundWithBlock_Text { get; }
    public static string SurroundWith_Text { get; }
    public static string More_Text { get; }
    public static string DefaultCLiveTemplates_Text { get; }
    public static string DefaultCSurroundTemplates_Text { get; }
    public static string DefaultCFileTemplates_Text { get; }
    public static string CreateFileFromTemplate_Text { get; }
    public static string AllTemplates_Text { get; }
    public static string ProjectRoot_Text { get; }
    public static string SelectTargetFolder_Text { get; }
    public static string DefaultResxLiveTemplates_Text { get; }
    public static string DefaultResxFileTemplates_Text { get; }
    public static string SurroundWith_PopupMenu_Title_Text { get; }
    public static string NoApplicableSurroundsFound_Text { get; }
    public static string AllApplicableSurroundTemplates_Text { get; }
    public static string AllApplicableLiveTemplates_Text { get; }
    public static string AllApplicableFileTemplates_Text { get; }
    public static string Template_IsBeingEditedDoYouWantToDiscard_Text { get; }
    public static string ErrorRemovingTemplate_Caption { get; }
    public static string AreYouSureYouWantToDeleteThisSection_Text { get; }
    public static string DeleteConfirmation_Caption { get; }
    public static string ChooseMacro_Caption { get; }
    public static string AvailabilityConfiguration_Caption { get; }
    public static string EditQuickList_Caption { get; }
    public static string DefaultXMLLiveTemplates_Text { get; }
    public static string DefaultXMLSurroundTemplates_Text { get; }
    public static string DefaultXMLFileTemplates_Text { get; }
    public static string NewTemplate_Text { get; }
    public static string CloneAndEditTemplate_Text { get; }
    public static string DeleteTemplate_Text { get; }
    public static string EditQuickLists_Text { get; }
    public static string SurroundItemsContextAction_Description { get; }
    public static string SurroundItemsContextAction_Name { get; }
    public static string InsertsFullNameOfContainingTagMacroDefinition_Description { get; }
    public static string InsertsFullNameOfContainingTagMacroDefinition_LongDescription { get; }
    public static string InsertsIfRequiredCastToTheTypeWhichIsExpectedAtTheLeftSideOfAssignmentExpressionMacroDefinition_Description { get; }
    public static string InsertsIfRequiredCastToTheTypeWhichIsExpectedAtTheLeftSideOfAssignmentExpressionMacroDefinition_LongDescription { get; }
    public static string InsertsNameOfContainingTagWithoutNamespaceMacroDefinition_Description { get; }
    public static string InsertsNameOfContainingTagWithoutNamespaceMacroDefinition_LongDescription { get; }
    public static string InsertsNamespaceOfContainingTagMacroDefinition_Description { get; }
    public static string InsertsNamespaceOfContainingTagMacroDefinition_LongDescription { get; }
    public static string InsertsTheFileHeaderSpecifiedInTheReSharperOptionsMacroDefinition_Description { get; }
    public static string InsertsTheFileHeaderSpecifiedInTheReSharperOptionsMacroDefinition_LongDescription { get; }
    public static string SuggestsXMLAttributeNameUsedInCurrentDocumentMacroDefinition_Description { get; }
    public static string SuggestsXMLAttributeNameUsedInCurrentDocumentMacroDefinition_LongDescription { get; }
    public static string SuggestsXMLAttributeNameUsedInTheSameTagsInCurrentDocumentMacroDefinition_Description { get; }
    public static string SuggestsXMLAttributeNameUsedInTheSameTagsInCurrentDocumentMacroDefinition_LongDescription { get; }
    public static string SuggestsXMLTagNameUsedInCurrentDocumentMacroDefinition_Description { get; }
    public static string SuggestsXMLTagNameUsedInCurrentDocumentMacroDefinition_LongDescription { get; }
    public static string NoMacro_Text { get; }
    public static string VisualBasicFiles_Text { get; }
    public static string VisualBasicProjects_Text { get; }
    public static string CFiles_Text { get; }
    public static string ResxFiles_Text { get; }
    public static string XMLFiles_Text { get; }
    public static string Template_Editable_Sm9pbiBjbGF1c2UgaW4gbGFuZ3VhZ2UgaW50ZWdyYXRlZCBxdWVyeQEQEQ { get; }
    public static string Template_Editable_TGFuZ3VhZ2UtSW50ZWdyYXRlZCBRdWVyeQEQEQ { get; }
    public static string Template_Editable_Zm9yZWFjaCBibG9jawEQEQ { get; }
    public static string Template_Editable_SXRlcmF0ZSBhIElMaXN0PFQPL { get; }
    public static string Template_Editable_SXRlcmF0ZSBhbiBhcnJheQEQEQ { get; }
    public static string Template_Editable_SXRlcmF0ZSBhbiBhcnJheSBpbiBpbnZlcnNlIG9yZGVy { get; }
    public static string Template_Editable_U2ltcGxlICJmb3IiIGxvb3AEQ { get; }
    public static string Template_Editable_U2FmZWx5IGNhc3QgdmFyaWFibGUEQ { get; }
    public static string Template_Editable_VGhlICJNYWluIiBtZXRob2QgZGVjbGFyYXRpb24EQ { get; }
    public static string Template_Editable_UHJpbnQgdmFsdWUgb2YgYSB2YXJpYWJsZQEQEQ { get; }
    public static string Template_Editable_UHJpbnQgYSBzdHJpbmcEQ { get; }
    public static string Template_Editable_TWFrZSBhbiBhc3NlcnRpb24EQ { get; }
    public static string Template_Editable_QXNzZXJ0IGV4cHJlc3Npb24gbm90IG51bGwEQ { get; }
    public static string Template_Editable_dGhyb3cgbmV3 { get; }
    public static string Template_Editable_cHVibGljIGNvbnN0IGludAEQEQ { get; }
    public static string Template_Editable_cHVibGljIGNvbnN0IHN0cmluZwEQEQ { get; }
    public static string Template_Editable_cHVibGljIHN0YXRpYyByZWFkb25seQEQEQ { get; }
    public static string Template_Editable_ZG8uLi53aGlsZSBsb29w { get; }
    public static string Template_Editable_d3JpdGVsbiBmdW5jdGlvbiBjYWxs { get; }
    public static string Template_Editable_ZWxzZSBzdGF0ZW1lbnQEQ { get; }
    public static string Template_Editable_Zm9yIGxvb3AEQ { get; }
    public static string Template_Editable_Zm9yLi4uaW4gbG9vcAEQEQ { get; }
    public static string Template_Editable_cmV2ZXJzZSBmb3IgbG9vcAEQEQ { get; }
    public static string Template_Editable_aWYgc3RhdGVtZW50 { get; }
    public static string Template_Editable_d2hpbGUgbG9vcAEQEQ { get; }
    public static string Template_Editable_d2l0aCBzdGF0ZW1lbnQEQ { get; }
    public static string Template_Editable_c3dpdGNoIHN0YXRlbWVudAEQEQ { get; }
    public static string Template_Editable_dHJ5IGNhdGNoIHN0YXRlbWVudAEQEQ { get; }
    public static string Template_Editable_Z2VuZXJhdG9y { get; }
    public static string Template_Editable_Zm9yLW9mIGxvb3AEQ { get; }
    public static string Template_Editable_e30EQ { get; }
    public static string Template_Editable_KCkEQ { get; }
    public static string Template_Editable_Q2xhc3MvSW50ZXJmYWNl { get; }
    public static string Template_Editable_Q3VycmVudCBmaWxlIGNvbnRleHQEQ { get; }
    public static string Template_Editable_SW5zZXJ0IG5ldyBHVUlE { get; }
    public static string Template_Editable_JkNsYXNz { get; }
    public static string Template_Editable_JkludGVyZmFjZQEQEQ { get; }
    public static string Template_Editable_JlN0cnVjdAEQEQ { get; }
    public static string Template_Editable_JlN0cnVjdHVyZQEQEQ { get; }
    public static string Template_Editable_UmVzb3VyY2UgRGljdGlvbmFyeQEQEQ { get; }
    public static string Template_Editable_Q3JlYXRlIHJlc291cmNlIGVudHJ5 { get; }
    public static string Template_Editable_UHJvcGVydHkEQ { get; }
    public static string Template_Editable_Q3JlYXRlIGFuIGVtcHR5IGFycmF5 { get; }
    public static string Template_Editable_RGVzdHJ1Y3RvcgEQEQ { get; }
    public static string Template_Editable_Q29uc3RydWN0b3IEQ { get; }
    public static string Template_Editable_Q29uc29sZS5Xcml0ZUxpbmUEQ { get; }
    public static string Template_Editable_UmV2ZXJzZSAnZm9yJyBsb29w { get; }
    public static string Template_Editable_J2ludCBNYWluJyBtZXRob2Qg { get; }
    public static string Template_Editable_J3ZvaWQgTWFpbicgbWV0aG9k { get; }
    public static string Template_Editable_dW5zYWZlIHN0YXRlbWVudAEQEQ { get; }
    public static string Template_Editable_dW5jaGVja2VkIGJsb2Nr { get; }
    public static string Template_Editable_dHJ5IGZpbmFsbHkEQ { get; }
    public static string Template_Editable_dHJ5IGNhdGNo { get; }
    public static string Template_Editable_c2ltcGxlIGl0ZXJhdG9y { get; }
    public static string Template_Editable_Jk1vZHVsZQEQEQ { get; }
    public static string Template_Editable_JkVudW0EQ { get; }
    public static string Template_Editable_UHJvcGVydHkgd2l0aCBhICdnZXQnIGFjY2Vzc29yIGFuZCBhIHByaXZhdGUgJ3NldCcgYWNjZXNzb3IEQ { get; }
    public static string Template_Editable_QXR0cmlidXRlIHVzaW5nIHJlY29tbWVuZGVkIHBhdHRlcm4EQ { get; }
    public static string Template_Editable_Y2hlY2tlZCBibG9jawEQEQ { get; }
    public static string Template_Editable_bG9jayBzdGF0ZW1lbnQEQ { get; }
    public static string Template_Editable_TWVzc2FnZUJveC5TaG93 { get; }
    public static string Template_Editable_dXNpbmcgc3RhdGVtZW50 { get; }
    public static string Template_Editable_QXR0YWNoZWQgcHJvcGVydHkEQ { get; }
    public static string Template_Editable_RGVwZW5kZW5jeSBwcm9wZXJ0eQEQEQ { get; }
    public static string Template_Editable_Y2FzdAEQEQ { get; }
    public static string Template_Editable_JlJlY29yZAEQEQ { get; }
    public static string Template_Editable_JlRlc3QgRml4dHVyZQEQEQ { get; }
    public static string Template_Editable_Rm9yIEVhY2ggYmxvY2sEQ { get; }
    public static string Template_Editable_SXRlcmF0ZSBnZW5lcmljIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLklMaXN0KE9mIFQp { get; }
    public static string Template_Editable_U2ltcGxlICJGb3IiIGxvb3AEQ { get; }
    public static string Template_Editable_SXRlcmF0ZSBhcnJheSBpbiByZXZlcnNlIG9yZGVy { get; }
    public static string Template_Editable_RGVjbGFyZSBhIHZhcmlhYmxl { get; }
    public static string Template_Editable_UHJpbnQgdmFsdWUgb2YgYW4gZXhwcmVzc2lvbgEQEQ { get; }
    public static string Template_Editable_UHVibGljIFNoYXJlZCBTdWIgTWFpbgEQEQ { get; }
    public static string Template_Editable_U2FmZWx5IGNhc3QgYSB2YXJpYWJsZQEQEQ { get; }
    public static string Template_Editable_U3Vicm91dGluZSBkZWNsYXJhdGlvbgEQEQ { get; }
    public static string Template_Editable_RnVuY3Rpb24gZGVjbGFyYXRpb24EQ { get; }
    public static string Template_Editable_RGlyZWN0Q2FzdCBjbGF1c2UEQ { get; }
    public static string Template_Editable_VHJ5Q2FzdCBjbGF1c2UEQ { get; }
    public static string Template_Editable_Q1R5cGUgY2xhdXNl { get; }
    public static string Template_Editable_QnlSZWYgcGFyYW1ldGVy { get; }
    public static string Template_Editable_QnlWYWwgcGFyYW1ldGVy { get; }
    public static string Template_Editable_U2VsZWN0IGNhc2Ugc3RhdGVtZW50 { get; }
    public static string Template_Editable_SWYEQ { get; }
    public static string Template_Editable_SWYuLkVsc2UEQ { get; }
    public static string Template_Editable_U3luY0xvY2sEQ { get; }
    public static string Template_Editable_VXNpbmcEQ { get; }
    public static string Template_Editable_VHJ5Q2FzdAEQEQ { get; }
    public static string Template_Editable_Q1R5cGUEQ { get; }
    public static string Template_Editable_RGlyZWN0Q2FzdAEQEQ { get; }
    public static string Template_Editable_bmFtZXNwYWNl { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_AllTemplatesActionText();
    public static string get_CreateLiveTemplateFromSelectionActionText();
    public static string get_CreateNewFileActionText();
    public static string get_InsertLiveTemplateActionText();
    public static string get_NewFromTemplateActionGroupText();
    public static string get_SUrroundWithTemplateActionText();
    public static string get_TemplatesUIDialogActionText();
    public static string get_MinimumCVersion_Text();
    public static string get_DefaultFile_name_Text();
    public static string get_FileNameMustBeAValid_identifier_Text();
    public static string get__Shortcut_Text();
    public static string get__Description_Text();
    public static string get__Group_Text();
    public static string get__Reformat_Text();
    public static string get_Shorten_qualifiedReferences_Text();
    public static string get_Options_Text();
    public static string get__Availability_Text();
    public static string get__Generation_Text();
    public static string get_S_urround_Text();
    public static string get__Both_Text();
    public static string get_UseIn_Text();
    public static string get_MnemonicCouldBeSingleDigitOnly_Text();
    public static string get_ShowIn_contextAction_Text();
    public static string get__Mnemonic_Text();
    public static string get_AddTo_NewMenu_Text();
    public static string get_Edit_variables_Text();
    public static string get_EditVariables_Text();
    public static string get_Done_Text();
    public static string get_NoMacroSelected_Text();
    public static string get__Editable_Text();
    public static string get__EditableAt_Text();
    public static string get_Change_macro_Text();
    public static string get__SuitableForTemplateSAvailabilityOnly_Text();
    public static string get__All_Text();
    public static string get_NotInQuickList_Text();
    public static string get_InQuickList_Text();
    public static string get__TypesAndNamespaces_Text();
    public static string get__TypeMembers_Text();
    public static string get__Queries_Text();
    public static string get__Expressions_Text();
    public static string get__ExceptStrings_Text();
    public static string get__Statements_Text();
    public static string get_AnywhereInXMLFile_Text();
    public static string get_WhereATagCouldBeInXMLFile_Text();
    public static string get_WhereAnAttributeCouldBeInXMLFile_Text();
    public static string get_XMLTags_Text();
    public static string get_XMLAttributes_Text();
    public static string get_CProjectsIncludingASPNETCProjects_Text();
    public static string get_VBProjectsIncludingASPNETProjects_Text();
    public static string get_AnywhereIn__Text();
    public static string get_NamespaceDeclaration_Text();
    public static string get_TypeMemberDeclaration_Text();
    public static string get_Expression_Text();
    public static string get_In_WhereNamespaceOrTypeDeclarationIsAllowed_Text();
    public static string get_In_WhereNamespaceDeclarationIsAllowed_Text();
    public static string get_In_WhereTypeMemberDeclarationIsAllowed_Text();
    public static string get_In_WhereMethodParameterIsAllowed_Text();
    public static string get_In_WhereExpressionIsAllowed_Text();
    public static string get_In_WhereAnywhereExceptStringLiterals_Text();
    public static string get_In_WhereStatementIsAllowed_Text();
    public static string get_In_WhereQueryClauseIsAllowed_Text();
    public static string get_CProjects_Text();
    public static string get_VBProjects_Text();
    public static string get_AnywhereInResxFile_Text();
    public static string get_InResxFileWhereRootTagIsExpected_Text();
    public static string get_InResxFileWhereDataTagIsExpected_Text();
    public static string get_ResxRoots_Text();
    public static string get_ResxDatatags_Text();
    public static string get_SurroundWithBlock_Text();
    public static string get_SurroundWith_Text();
    public static string get_More_Text();
    public static string get_DefaultCLiveTemplates_Text();
    public static string get_DefaultCSurroundTemplates_Text();
    public static string get_DefaultCFileTemplates_Text();
    public static string get_CreateFileFromTemplate_Text();
    public static string get_AllTemplates_Text();
    public static string get_ProjectRoot_Text();
    public static string get_SelectTargetFolder_Text();
    public static string get_DefaultResxLiveTemplates_Text();
    public static string get_DefaultResxFileTemplates_Text();
    public static string get_SurroundWith_PopupMenu_Title_Text();
    public static string get_NoApplicableSurroundsFound_Text();
    public static string get_AllApplicableSurroundTemplates_Text();
    public static string get_AllApplicableLiveTemplates_Text();
    public static string get_AllApplicableFileTemplates_Text();
    public static string get_Template_IsBeingEditedDoYouWantToDiscard_Text();
    public static string get_ErrorRemovingTemplate_Caption();
    public static string get_AreYouSureYouWantToDeleteThisSection_Text();
    public static string get_DeleteConfirmation_Caption();
    public static string get_ChooseMacro_Caption();
    public static string get_AvailabilityConfiguration_Caption();
    public static string get_EditQuickList_Caption();
    public static string get_DefaultXMLLiveTemplates_Text();
    public static string get_DefaultXMLSurroundTemplates_Text();
    public static string get_DefaultXMLFileTemplates_Text();
    public static string get_NewTemplate_Text();
    public static string get_CloneAndEditTemplate_Text();
    public static string get_DeleteTemplate_Text();
    public static string get_EditQuickLists_Text();
    public static string get_SurroundItemsContextAction_Description();
    public static string get_SurroundItemsContextAction_Name();
    public static string get_InsertsFullNameOfContainingTagMacroDefinition_Description();
    public static string get_InsertsFullNameOfContainingTagMacroDefinition_LongDescription();
    public static string get_InsertsIfRequiredCastToTheTypeWhichIsExpectedAtTheLeftSideOfAssignmentExpressionMacroDefinition_Description();
    public static string get_InsertsIfRequiredCastToTheTypeWhichIsExpectedAtTheLeftSideOfAssignmentExpressionMacroDefinition_LongDescription();
    public static string get_InsertsNameOfContainingTagWithoutNamespaceMacroDefinition_Description();
    public static string get_InsertsNameOfContainingTagWithoutNamespaceMacroDefinition_LongDescription();
    public static string get_InsertsNamespaceOfContainingTagMacroDefinition_Description();
    public static string get_InsertsNamespaceOfContainingTagMacroDefinition_LongDescription();
    public static string get_InsertsTheFileHeaderSpecifiedInTheReSharperOptionsMacroDefinition_Description();
    public static string get_InsertsTheFileHeaderSpecifiedInTheReSharperOptionsMacroDefinition_LongDescription();
    public static string get_SuggestsXMLAttributeNameUsedInCurrentDocumentMacroDefinition_Description();
    public static string get_SuggestsXMLAttributeNameUsedInCurrentDocumentMacroDefinition_LongDescription();
    public static string get_SuggestsXMLAttributeNameUsedInTheSameTagsInCurrentDocumentMacroDefinition_Description();
    public static string get_SuggestsXMLAttributeNameUsedInTheSameTagsInCurrentDocumentMacroDefinition_LongDescription();
    public static string get_SuggestsXMLTagNameUsedInCurrentDocumentMacroDefinition_Description();
    public static string get_SuggestsXMLTagNameUsedInCurrentDocumentMacroDefinition_LongDescription();
    public static string get_NoMacro_Text();
    public static string get_VisualBasicFiles_Text();
    public static string get_VisualBasicProjects_Text();
    public static string get_CFiles_Text();
    public static string get_ResxFiles_Text();
    public static string get_XMLFiles_Text();
    public static string get_Template_Editable_Sm9pbiBjbGF1c2UgaW4gbGFuZ3VhZ2UgaW50ZWdyYXRlZCBxdWVyeQEQEQ();
    public static string get_Template_Editable_TGFuZ3VhZ2UtSW50ZWdyYXRlZCBRdWVyeQEQEQ();
    public static string get_Template_Editable_Zm9yZWFjaCBibG9jawEQEQ();
    public static string get_Template_Editable_SXRlcmF0ZSBhIElMaXN0PFQPL();
    public static string get_Template_Editable_SXRlcmF0ZSBhbiBhcnJheQEQEQ();
    public static string get_Template_Editable_SXRlcmF0ZSBhbiBhcnJheSBpbiBpbnZlcnNlIG9yZGVy();
    public static string get_Template_Editable_U2ltcGxlICJmb3IiIGxvb3AEQ();
    public static string get_Template_Editable_U2FmZWx5IGNhc3QgdmFyaWFibGUEQ();
    public static string get_Template_Editable_VGhlICJNYWluIiBtZXRob2QgZGVjbGFyYXRpb24EQ();
    public static string get_Template_Editable_UHJpbnQgdmFsdWUgb2YgYSB2YXJpYWJsZQEQEQ();
    public static string get_Template_Editable_UHJpbnQgYSBzdHJpbmcEQ();
    public static string get_Template_Editable_TWFrZSBhbiBhc3NlcnRpb24EQ();
    public static string get_Template_Editable_QXNzZXJ0IGV4cHJlc3Npb24gbm90IG51bGwEQ();
    public static string get_Template_Editable_dGhyb3cgbmV3();
    public static string get_Template_Editable_cHVibGljIGNvbnN0IGludAEQEQ();
    public static string get_Template_Editable_cHVibGljIGNvbnN0IHN0cmluZwEQEQ();
    public static string get_Template_Editable_cHVibGljIHN0YXRpYyByZWFkb25seQEQEQ();
    public static string get_Template_Editable_ZG8uLi53aGlsZSBsb29w();
    public static string get_Template_Editable_d3JpdGVsbiBmdW5jdGlvbiBjYWxs();
    public static string get_Template_Editable_ZWxzZSBzdGF0ZW1lbnQEQ();
    public static string get_Template_Editable_Zm9yIGxvb3AEQ();
    public static string get_Template_Editable_Zm9yLi4uaW4gbG9vcAEQEQ();
    public static string get_Template_Editable_cmV2ZXJzZSBmb3IgbG9vcAEQEQ();
    public static string get_Template_Editable_aWYgc3RhdGVtZW50();
    public static string get_Template_Editable_d2hpbGUgbG9vcAEQEQ();
    public static string get_Template_Editable_d2l0aCBzdGF0ZW1lbnQEQ();
    public static string get_Template_Editable_c3dpdGNoIHN0YXRlbWVudAEQEQ();
    public static string get_Template_Editable_dHJ5IGNhdGNoIHN0YXRlbWVudAEQEQ();
    public static string get_Template_Editable_Z2VuZXJhdG9y();
    public static string get_Template_Editable_Zm9yLW9mIGxvb3AEQ();
    public static string get_Template_Editable_e30EQ();
    public static string get_Template_Editable_KCkEQ();
    public static string get_Template_Editable_Q2xhc3MvSW50ZXJmYWNl();
    public static string get_Template_Editable_Q3VycmVudCBmaWxlIGNvbnRleHQEQ();
    public static string get_Template_Editable_SW5zZXJ0IG5ldyBHVUlE();
    public static string get_Template_Editable_JkNsYXNz();
    public static string get_Template_Editable_JkludGVyZmFjZQEQEQ();
    public static string get_Template_Editable_JlN0cnVjdAEQEQ();
    public static string get_Template_Editable_JlN0cnVjdHVyZQEQEQ();
    public static string get_Template_Editable_UmVzb3VyY2UgRGljdGlvbmFyeQEQEQ();
    public static string get_Template_Editable_Q3JlYXRlIHJlc291cmNlIGVudHJ5();
    public static string get_Template_Editable_UHJvcGVydHkEQ();
    public static string get_Template_Editable_Q3JlYXRlIGFuIGVtcHR5IGFycmF5();
    public static string get_Template_Editable_RGVzdHJ1Y3RvcgEQEQ();
    public static string get_Template_Editable_Q29uc3RydWN0b3IEQ();
    public static string get_Template_Editable_Q29uc29sZS5Xcml0ZUxpbmUEQ();
    public static string get_Template_Editable_UmV2ZXJzZSAnZm9yJyBsb29w();
    public static string get_Template_Editable_J2ludCBNYWluJyBtZXRob2Qg();
    public static string get_Template_Editable_J3ZvaWQgTWFpbicgbWV0aG9k();
    public static string get_Template_Editable_dW5zYWZlIHN0YXRlbWVudAEQEQ();
    public static string get_Template_Editable_dW5jaGVja2VkIGJsb2Nr();
    public static string get_Template_Editable_dHJ5IGZpbmFsbHkEQ();
    public static string get_Template_Editable_dHJ5IGNhdGNo();
    public static string get_Template_Editable_c2ltcGxlIGl0ZXJhdG9y();
    public static string get_Template_Editable_Jk1vZHVsZQEQEQ();
    public static string get_Template_Editable_JkVudW0EQ();
    public static string get_Template_Editable_UHJvcGVydHkgd2l0aCBhICdnZXQnIGFjY2Vzc29yIGFuZCBhIHByaXZhdGUgJ3NldCcgYWNjZXNzb3IEQ();
    public static string get_Template_Editable_QXR0cmlidXRlIHVzaW5nIHJlY29tbWVuZGVkIHBhdHRlcm4EQ();
    public static string get_Template_Editable_Y2hlY2tlZCBibG9jawEQEQ();
    public static string get_Template_Editable_bG9jayBzdGF0ZW1lbnQEQ();
    public static string get_Template_Editable_TWVzc2FnZUJveC5TaG93();
    public static string get_Template_Editable_dXNpbmcgc3RhdGVtZW50();
    public static string get_Template_Editable_QXR0YWNoZWQgcHJvcGVydHkEQ();
    public static string get_Template_Editable_RGVwZW5kZW5jeSBwcm9wZXJ0eQEQEQ();
    public static string get_Template_Editable_Y2FzdAEQEQ();
    public static string get_Template_Editable_JlJlY29yZAEQEQ();
    public static string get_Template_Editable_JlRlc3QgRml4dHVyZQEQEQ();
    public static string get_Template_Editable_Rm9yIEVhY2ggYmxvY2sEQ();
    public static string get_Template_Editable_SXRlcmF0ZSBnZW5lcmljIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLklMaXN0KE9mIFQp();
    public static string get_Template_Editable_U2ltcGxlICJGb3IiIGxvb3AEQ();
    public static string get_Template_Editable_SXRlcmF0ZSBhcnJheSBpbiByZXZlcnNlIG9yZGVy();
    public static string get_Template_Editable_RGVjbGFyZSBhIHZhcmlhYmxl();
    public static string get_Template_Editable_UHJpbnQgdmFsdWUgb2YgYW4gZXhwcmVzc2lvbgEQEQ();
    public static string get_Template_Editable_UHVibGljIFNoYXJlZCBTdWIgTWFpbgEQEQ();
    public static string get_Template_Editable_U2FmZWx5IGNhc3QgYSB2YXJpYWJsZQEQEQ();
    public static string get_Template_Editable_U3Vicm91dGluZSBkZWNsYXJhdGlvbgEQEQ();
    public static string get_Template_Editable_RnVuY3Rpb24gZGVjbGFyYXRpb24EQ();
    public static string get_Template_Editable_RGlyZWN0Q2FzdCBjbGF1c2UEQ();
    public static string get_Template_Editable_VHJ5Q2FzdCBjbGF1c2UEQ();
    public static string get_Template_Editable_Q1R5cGUgY2xhdXNl();
    public static string get_Template_Editable_QnlSZWYgcGFyYW1ldGVy();
    public static string get_Template_Editable_QnlWYWwgcGFyYW1ldGVy();
    public static string get_Template_Editable_U2VsZWN0IGNhc2Ugc3RhdGVtZW50();
    public static string get_Template_Editable_SWYEQ();
    public static string get_Template_Editable_SWYuLkVsc2UEQ();
    public static string get_Template_Editable_U3luY0xvY2sEQ();
    public static string get_Template_Editable_VXNpbmcEQ();
    public static string get_Template_Editable_VHJ5Q2FzdAEQEQ();
    public static string get_Template_Editable_Q1R5cGUEQ();
    public static string get_Template_Editable_RGlyZWN0Q2FzdAEQEQ();
    public static string get_Template_Editable_bmFtZXNwYWNl();
}
[DefaultSettingsAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.LiveTemplatesSettings", "16")]
public class JetBrains.ReSharper.LiveTemplates.Resx.Defaults.DefaultFileTemplates : object {
    public string Name { get; }
    public sealed virtual Stream GetDefaultSettingsStream(Lifetime lifetime);
    public sealed virtual string get_Name();
}
[DefaultSettingsAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.LiveTemplatesSettings", "16")]
public class JetBrains.ReSharper.LiveTemplates.Resx.Defaults.DefaultLiveTemplates : object {
    public string Name { get; }
    public sealed virtual Stream GetDefaultSettingsStream(Lifetime lifetime);
    public sealed virtual string get_Name();
}
public class JetBrains.ReSharper.LiveTemplates.Resx.InResxDatatag : InResxFile {
    private static Guid DefaultUID;
    public string PresentableShortName { get; }
    private static InResxDatatag();
    public virtual Guid GetDefaultUID();
    public virtual string ToString();
    public virtual string get_PresentableShortName();
}
public class JetBrains.ReSharper.LiveTemplates.Resx.InResxFile : InAnyLanguageFile {
    private static Guid DefaultUID;
    public string PresentableShortName { get; }
    public PsiLanguageType RelatedLanguage { get; }
    public Guid QuickListUID { get; }
    public string QuickListTitle { get; }
    private static InResxFile();
    public virtual Guid GetDefaultUID();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.LiveTemplates.Resx.InResxFile/<GetExtensions>d__2")]
protected virtual IEnumerable`1<string> GetExtensions();
    public virtual string ToString();
    public virtual string get_PresentableShortName();
    public virtual PsiLanguageType get_RelatedLanguage();
    public sealed virtual Guid get_QuickListUID();
    public sealed virtual string get_QuickListTitle();
}
public class JetBrains.ReSharper.LiveTemplates.Resx.InResxRoot : InResxFile {
    private static Guid DefaultUID;
    public string PresentableShortName { get; }
    private static InResxRoot();
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
    public virtual string ToString();
}
[ScopeCategoryUIProviderAttribute("16")]
public class JetBrains.ReSharper.LiveTemplates.Resx.ResxScopeCategoryUIProvider : ScopeCategoryUIProvider {
    public string CategoryCaption { get; }
    [IteratorStateMachineAttribute("JetBrains.ReSharper.LiveTemplates.Resx.ResxScopeCategoryUIProvider/<BuildAllPoints>d__1")]
public virtual IEnumerable`1<ITemplateScopePoint> BuildAllPoints();
    public virtual string get_CategoryCaption();
    public virtual string Present(ITemplateScopePoint point);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.LiveTemplates.Resx.ResxScopeProvider : ScopeProvider {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.LiveTemplates.Resx.ResxScopeProvider/<ProvideScopePoints>d__1")]
public virtual IEnumerable`1<ITemplateScopePoint> ProvideScopePoints(TemplateAcceptanceContext context);
    [CompilerGeneratedAttribute]
private ITemplateScopePoint <.ctor>b__0_0(string t);
    [CompilerGeneratedAttribute]
private ITemplateScopePoint <.ctor>b__0_1(string t);
    [CompilerGeneratedAttribute]
private ITemplateScopePoint <.ctor>b__0_2(string t);
}
public class JetBrains.ReSharper.LiveTemplates.Resx.ResxTemplateContext : TemplateContext {
    public static string TAG_NAME;
    public static string ATTRIBUTE_NAME;
    public ResxTemplateContextType ContextType;
    public IEnumerable`1<ITemplateScopePoint> ScopePoints { get; }
    public ResxTemplateContext(ResxTemplateContextType contextType);
    public virtual IEnumerable`1<ITemplateScopePoint> get_ScopePoints();
    private IList`1<ITemplateScopePoint> CalcScopePoints();
}
public enum JetBrains.ReSharper.LiveTemplates.Resx.ResxTemplateContextType : Enum {
    public int value__;
    public static ResxTemplateContextType EVERYWHERE;
    public static ResxTemplateContextType ROOT_EXPECTED;
    public static ResxTemplateContextType DATATAG_EXPECTED;
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.LiveTemplates.Resx.ZoneMarker : object {
}
public class JetBrains.ReSharper.LiveTemplates.RichTextEditor : object {
    private GroupingEvent myGroupingEvent;
    private ObsoleteLifetimeAndDefinitionAtTheSameTime myGroupingEventLifetime;
    private ExtendedRichText myRichTextBox;
    private bool myWasFocused;
    [CompilerGeneratedAttribute]
private MouseEventHandler MouseMove;
    [CompilerGeneratedAttribute]
private EventHandler TextChanged;
    public RichTextEditor(ExtendedRichText richTextBox);
    private void InvokeMouseMove(MouseEventArgs args);
    private void InvokeTextChanged();
    private void OnMouseMoved(object sender, MouseEventArgs e);
    private void OnTextChanged(object sender, EventArgs e);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public sealed virtual void add_MouseMove(MouseEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MouseMove(MouseEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TextChanged(EventHandler value);
    public sealed virtual void BeginHighlight();
    public sealed virtual void EndHighlight();
    public sealed virtual string GetText();
    public sealed virtual void SetColor(TextRange textRange, Color color);
    public sealed virtual void SetFlags(TextRange textRange, bool underline);
    public sealed virtual void SetText(string text);
}
public interface JetBrains.ReSharper.LiveTemplates.Surround.ISurroundChooseTemplateByDialogProvider {
    public abstract virtual void ChooseTemplateByDialog(ITextControl textControl, List`1<ITemplateScopePoint> realScopePoints, Action`1<Template> action);
}
[ActionAttribute("SurroundWith", "JetBrains.ReSharper.LiveTemplates.Resources.Strings", "SUrroundWithTemplateActionText")]
public class JetBrains.ReSharper.LiveTemplates.Surround.SurroundAction : object {
    private JetPopupMenus myPopupMenus;
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public static Nullable`1<int> CompareSurroundTemplates(SurroundTemplateItem i1, SurroundTemplateItem i2);
}
public static class JetBrains.ReSharper.LiveTemplates.Surround.SurroundUtil : object {
    public static void ChooseTemplateByDialog(ITextControl textControl, List`1<ITemplateScopePoint> realScopePoints, Action`1<Template> action);
}
public abstract class JetBrains.ReSharper.LiveTemplates.TemplateBuilder.FieldEvaluatorBase : object {
    private CollectedFields myContext;
    private List`1<OptionalField> myFields;
    protected CollectedFields Context { get; }
    public OptionalField[] Fields { get; }
    public bool ProcessingIsFinished { get; }
    public FieldEvaluatorBase(CollectedFields context);
    protected CollectedFields get_Context();
    public sealed virtual OptionalField[] get_Fields();
    public sealed virtual bool get_ProcessingIsFinished();
    public sealed virtual bool InteriorShouldBeProcessed(ITreeNode element);
    public sealed virtual void ProcessBeforeInterior(ITreeNode element);
    public sealed virtual void ProcessAfterInterior(ITreeNode element);
    public abstract virtual void ProcessElement(ITreeNode element);
    protected void AddField(OptionalField field);
    public string SuggestFieldName(string baseName);
}
public class JetBrains.ReSharper.LiveTemplates.TemplateBuilder.FieldNameTextChange : TextChangeBase {
    private TemplateField myTemplateField;
    public FieldNameTextChange(TextRange range, TemplateField templateField);
    protected virtual string GetNewText(string oldText);
}
internal class JetBrains.ReSharper.LiveTemplates.TemplateBuilder.QualifiableReferenceCollector : object {
    private DocumentRange myDocumentRange;
    private List`1<IReference> myReferences;
    public bool ProcessingIsFinished { get; }
    public QualifiableReferenceCollector(DocumentRange documentRange);
    public sealed virtual bool InteriorShouldBeProcessed(ITreeNode element);
    public sealed virtual bool get_ProcessingIsFinished();
    public sealed virtual void ProcessBeforeInterior(ITreeNode element);
    public sealed virtual void ProcessAfterInterior(ITreeNode element);
    public IList`1<TextChangeBase> GetTextChanges();
}
public class JetBrains.ReSharper.LiveTemplates.TemplateBuilder.SimpleTextChange : TextChangeBase {
    private string myNewText;
    public SimpleTextChange(TextRange range, string newText);
    protected virtual string GetNewText(string oldText);
}
public class JetBrains.ReSharper.LiveTemplates.TemplateBuilder.SurroundTextChange : TextChangeBase {
    private string myOpenText;
    private string myCloseText;
    public SurroundTextChange(TextRange range, string openText, string closeText);
    protected virtual string GetNewText(string oldText);
}
public abstract class JetBrains.ReSharper.LiveTemplates.TemplateBuilder.TemplateBuilder : object {
    public static TemplateBuilder GetInstance(ISolution solution);
    public abstract virtual TemplateBuilderResult CreateTemplate(DocumentRange documentRange);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.LiveTemplates.TemplateBuilder.TemplateBuilderImpl : TemplateBuilder {
    private IEnumerable`1<IFieldEvaluatorFactory> myFactories;
    private ISolution mySolution;
    public TemplateBuilderImpl(ISolution solution, IEnumerable`1<IFieldEvaluatorFactory> factories);
    public virtual TemplateBuilderResult CreateTemplate(DocumentRange documentRange);
    private ICollection`1<ITemplateContext> EvaluateContexts(DocumentRange documentRange);
    private void EvaluateOptionalFields(CollectedFields collectedFields, List`1<OptionalField> fields, IFile file);
    private static void EvaluateQualifyingChanges(List`1<TextChangeBase> changes, DocumentRange documentRange, IFile file);
    private static IList`1<TextChangeBase> EvaluateUnindentTextChanges(string text);
}
public class JetBrains.ReSharper.LiveTemplates.TemplateBuilder.TemplateBuildingData : object {
    private Dictionary`2<OptionalField, bool> mySelectedFields;
    private TemplateBuilderResult myTemplateBuilderResult;
    public TemplateBuilderResult TemplateBuilderResult { get; }
    public TemplateBuildingData(TemplateBuilderResult templateBuilderResult);
    public TemplateBuilderResult get_TemplateBuilderResult();
    public bool IsSelected(OptionalField optionalField);
    public void Select(OptionalField optionalField);
    public void Unselect(OptionalField optionalField);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.LiveTemplates.UI.DummyLiveTemplatesUIHelper : object {
    private sealed virtual override bool JetBrains.ReSharper.LiveTemplates.UI.ILiveTemplatesUIHelper.ChooseNewMacro(Lifetime chooseLifetime, ICollection`1<ITemplateScopePoint> templateScopePoints, IMacroDefinition prevMacro, IMacroDefinition& selectedMacro);
    private sealed virtual override void JetBrains.ReSharper.LiveTemplates.UI.ILiveTemplatesUIHelper.ChooseTemplate(IContextBoundSettingsStore boundStore, IEnumerable`1<QuickListSupport> instanceQuickListSupports, TemplateApplicability templateApplicability, Action`1<Template> onSelect);
    private sealed virtual override void JetBrains.ReSharper.LiveTemplates.UI.ILiveTemplatesUIHelper.ChooseTemplate(IEnumerable`1<Template> templates, TemplateApplicability applicability, Action`1<Template> onSelect);
    private sealed virtual override ConstantMacroParameter JetBrains.ReSharper.LiveTemplates.UI.ILiveTemplatesUIHelper.GetMacroParameterWithSolution(ConstantMacroParameter constantMacroParameter, ISolution solution, IShellLocks locks, IMainWindow mainWindow, IMainWindowPopupWindowContext mainWindowPopupWindowContext, IMainWindowPopupWindowContext windowPopupWindowContext, IWindowsHookManager windowsHookManager, IUIApplication uiApplication, ITooltipManager tooltipManager);
    private sealed virtual override Task`1<string> JetBrains.ReSharper.LiveTemplates.UI.ILiveTemplatesUIHelper.GetMasterpageEntityName(Template template, TemplateAcceptanceContext acceptanceContext);
    private sealed virtual override ICollection`1<ITemplateScopePoint> JetBrains.ReSharper.LiveTemplates.UI.ILiveTemplatesUIHelper.SelectScopePoints(ScopeFilter scopeFilter, IEnumerable`1<ITemplateScopePoint> scopePoints);
    private sealed virtual override bool JetBrains.ReSharper.LiveTemplates.UI.ILiveTemplatesUIHelper.SetupTemplateBuildingData(TemplateBuildingData templateBuildingData);
}
public class JetBrains.ReSharper.LiveTemplates.UI.EditorFieldInfo : object {
    private TemplateField myField;
    [CompilerGeneratedAttribute]
private int <Occurrences>k__BackingField;
    public TemplateField Field { get; }
    public int Occurrences { get; public set; }
    public EditorFieldInfo(TemplateField field);
    public TemplateField get_Field();
    [CompilerGeneratedAttribute]
public int get_Occurrences();
    [CompilerGeneratedAttribute]
public void set_Occurrences(int value);
}
public interface JetBrains.ReSharper.LiveTemplates.UI.ILiveTemplatesUIHelper {
    public abstract virtual ICollection`1<ITemplateScopePoint> SelectScopePoints(ScopeFilter scopeFilter, IEnumerable`1<ITemplateScopePoint> scopePoints);
    public abstract virtual bool ChooseNewMacro(Lifetime chooseLifetime, ICollection`1<ITemplateScopePoint> templateScopePoints, IMacroDefinition prevMacro, IMacroDefinition& selectedMacro);
    public abstract virtual void ChooseTemplate(IContextBoundSettingsStore boundStore, IEnumerable`1<QuickListSupport> instanceQuickListSupports, TemplateApplicability templateApplicability, Action`1<Template> onSelect);
    public abstract virtual void ChooseTemplate(IEnumerable`1<Template> templates, TemplateApplicability applicability, Action`1<Template> onSelect);
    public abstract virtual ConstantMacroParameter GetMacroParameterWithSolution(ConstantMacroParameter constantMacroParameter, ISolution solution, IShellLocks locks, IMainWindow mainWindow, IMainWindowPopupWindowContext mainWindowPopupWindowContext, IMainWindowPopupWindowContext windowPopupWindowContext, IWindowsHookManager windowsHookManager, IUIApplication uiApplication, ITooltipManager tooltipManager);
    public abstract virtual Task`1<string> GetMasterpageEntityName(Template template, TemplateAcceptanceContext acceptanceContext);
    public abstract virtual bool SetupTemplateBuildingData(TemplateBuildingData templateBuildingData);
}
public abstract class JetBrains.ReSharper.LiveTemplates.UI.LiveTemplatesUIHelperBase : object {
    protected JetPopupMenus JetPopupMenus;
    protected StoredTemplatesProvider StoredTemplatesProvider;
    private TemplatesLocalizationManager myLocalizationManager;
    protected LiveTemplatesUIHelperBase(JetPopupMenus jetPopupMenus, StoredTemplatesProvider storedTemplatesProvider, TemplatesLocalizationManager localizationManager);
    public abstract virtual ICollection`1<ITemplateScopePoint> SelectScopePoints(ScopeFilter scopeFilter, IEnumerable`1<ITemplateScopePoint> scopePoints);
    public abstract virtual bool ChooseNewMacro(Lifetime chooseLifetime, ICollection`1<ITemplateScopePoint> templateScopePoints, IMacroDefinition prevMacro, IMacroDefinition& selectedMacro);
    public abstract virtual void ChooseTemplate(IContextBoundSettingsStore boundStore, IEnumerable`1<QuickListSupport> instanceQuickListSupports, TemplateApplicability templateApplicability, Action`1<Template> onSelect);
    public sealed virtual void ChooseTemplate(IEnumerable`1<Template> templates, TemplateApplicability applicability, Action`1<Template> onSelect);
    public abstract virtual ConstantMacroParameter GetMacroParameterWithSolution(ConstantMacroParameter constantMacroParameter, ISolution solution, IShellLocks locks, IMainWindow mainWindow, IMainWindowPopupWindowContext mainWindowPopupWindowContext, IMainWindowPopupWindowContext windowPopupWindowContext, IWindowsHookManager windowsHookManager, IUIApplication uiApplication, ITooltipManager tooltipManager);
    public abstract virtual Task`1<string> GetMasterpageEntityName(Template template, TemplateAcceptanceContext acceptanceContext);
    public abstract virtual bool SetupTemplateBuildingData(TemplateBuildingData templateBuildingData);
}
public class JetBrains.ReSharper.LiveTemplates.UI.MacroChooser.MacroChooserAutomation : AAutomation {
    [CompilerGeneratedAttribute]
private IListEvents`1<MacroDefinitionAutomation> <FilteredMacros>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <AllChecked>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ScopeChecked>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<MacroDefinitionAutomation> <SelectedMacro>k__BackingField;
    [CompilerGeneratedAttribute]
private SimpleSignal <SelectionDone>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <MacroDoubleClicked>k__BackingField;
    public IListEvents`1<MacroDefinitionAutomation> FilteredMacros { get; }
    public IProperty`1<bool> AllChecked { get; }
    public IProperty`1<bool> ScopeChecked { get; }
    public IProperty`1<MacroDefinitionAutomation> SelectedMacro { get; }
    public SimpleSignal SelectionDone { get; }
    public ICommand MacroDoubleClicked { get; }
    public MacroChooserAutomation(Lifetime lifetime, ICollection`1<ITemplateScopePoint> scopePoints, MacroManager macroManager, IMacroDefinition value);
    [CompilerGeneratedAttribute]
public IListEvents`1<MacroDefinitionAutomation> get_FilteredMacros();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_AllChecked();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ScopeChecked();
    [CompilerGeneratedAttribute]
public IProperty`1<MacroDefinitionAutomation> get_SelectedMacro();
    [CompilerGeneratedAttribute]
public SimpleSignal get_SelectionDone();
    [CompilerGeneratedAttribute]
public ICommand get_MacroDoubleClicked();
    public static RichText FormattedTextToRichText(FormattedText text);
    [CompilerGeneratedAttribute]
private void <.ctor>b__18_0();
}
public class JetBrains.ReSharper.LiveTemplates.UI.MacroChooser.MacroDefinitionAutomation : AAutomation {
    [CompilerGeneratedAttribute]
private IMacroDefinition <Macro>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HaveImplementation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SortKey>k__BackingField;
    public IMacroDefinition Macro { get; public set; }
    public RichText Name { get; public set; }
    public RichText Description { get; public set; }
    public bool HaveImplementation { get; public set; }
    private string SortKey { get; }
    public MacroDefinitionAutomation(Lifetime lifetime, MacroManager macroManager, IEnumerable`1<ITemplateScopePoint> scopePoints, IMacroDefinition macro);
    [CompilerGeneratedAttribute]
public IMacroDefinition get_Macro();
    [CompilerGeneratedAttribute]
public void set_Macro(IMacroDefinition value);
    [CompilerGeneratedAttribute]
public RichText get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(RichText value);
    [CompilerGeneratedAttribute]
public RichText get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(RichText value);
    [CompilerGeneratedAttribute]
public bool get_HaveImplementation();
    [CompilerGeneratedAttribute]
public void set_HaveImplementation(bool value);
    [CompilerGeneratedAttribute]
private string get_SortKey();
    public sealed virtual int CompareTo(MacroDefinitionAutomation other);
}
public abstract class JetBrains.ReSharper.LiveTemplates.UI.RiderFileTemplatesOptionPageBase : RiderTemplatesOptionPageBase {
    public RiderFileTemplatesOptionPageBase(Lifetime lifetime, ScopeCategoryUIProvider uiProvider, OptionsPageContext optionsPageContext, OptionsSettingsSmartContext optionsSettingsSmartContext, StoredTemplatesProvider storedTemplatesProvider, ScopeCategoryManager scopeCategoryManager, TemplatesUIFactory uiFactory, IconHostBase iconHostBase, IDialogHost dialogHost, string rdLanguageName);
}
public abstract class JetBrains.ReSharper.LiveTemplates.UI.RiderLiveTemplatesOptionPageBase : RiderTemplatesOptionPageBase {
    public RiderLiveTemplatesOptionPageBase(Lifetime lifetime, ScopeCategoryUIProvider uiProvider, OptionsPageContext optionsPageContext, OptionsSettingsSmartContext optionsSettingsSmartContext, StoredTemplatesProvider storedTemplatesProvider, ScopeCategoryManager scopeCategoryManager, TemplatesUIFactory uiFactory, IconHostBase iconHostBase, IDialogHost dialogHost, string rdLanguageName);
}
public abstract class JetBrains.ReSharper.LiveTemplates.UI.RiderTemplatesOptionPageBase : BeSimpleOptionsPage {
    private ScopeCategoryUIProvider myUIProvider;
    private StoredTemplatesProvider myStoredTemplatesProvider;
    private Property`1<QuickListEx> myCurrentQuicklist;
    private ScopeCategoryManager myScopeCategoryManager;
    private ScopeFilter myScopeFilter;
    private ListEvents`1<TemplateModel> myTemplatesList;
    private Property`1<TemplateModel> mySelectedTemplate;
    public RiderTemplatesOptionPageBase(Lifetime lifetime, ScopeCategoryUIProvider uiProvider, OptionsPageContext optionsPageContext, OptionsSettingsSmartContext optionsSettingsSmartContext, StoredTemplatesProvider storedTemplatesProvider, ScopeCategoryManager scopeCategoryManager, TemplatesUIFactory uiFactory, IconHostBase iconHostBase, ScopeFilter scopeFilter, string rdLanguageName, IDialogHost dialogHost);
    private void SetupList();
    private void ToggleQuicklistPresence(Template template, bool shouldAdd);
    private void UpdateCurrentQuicklist();
    public virtual bool OnOk();
    public void Reset();
    [CompilerGeneratedAttribute]
private bool <Reset>b__12_0(TemplateModel m);
}
public class JetBrains.ReSharper.LiveTemplates.UI.TemplateEditor.ConstantMacroParameterAutomation : MacroParameterAutomationBase {
    public ConstantMacroParameterAutomation(Lifetime lifetime, string name, string value);
}
public class JetBrains.ReSharper.LiveTemplates.UI.TemplateEditor.FieldOccurrenceAutomation : object {
    [CanBeNullAttribute]
private TemplateTextSectionAutomation mySection;
    private int myNumber;
    private TemplateAutomation myTemplate;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Description>k__BackingField;
    public TemplateTextSectionAutomation Section { get; }
    public int Number { get; }
    public Guid Guid { get; }
    public IProperty`1<string> Description { get; }
    public FieldOccurrenceAutomation(Lifetime lifetime, TemplateTextSectionAutomation section, int number, TemplateAutomation template);
    public void UpdateDescription();
    public TemplateTextSectionAutomation get_Section();
    public int get_Number();
    public Guid get_Guid();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_Description();
    public sealed virtual int CompareTo(FieldOccurrenceAutomation other);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0(AddRemoveIndexEventArgs`1<TemplateSectionAutomation> args);
}
public class JetBrains.ReSharper.LiveTemplates.UI.TemplateEditor.FieldOccurrenceComparer : object {
    public sealed virtual int Compare(FieldOccurrenceAutomation x, FieldOccurrenceAutomation y);
}
public class JetBrains.ReSharper.LiveTemplates.UI.TemplateEditor.FieldOrder : object {
    private TemplateAutomation myTemplate;
    public FieldOrder(Lifetime lifetime, TemplateAutomation template);
    public ITemplateFieldRegister GetRegister(Lifetime l, Guid sectionGuid);
}
public interface JetBrains.ReSharper.LiveTemplates.UI.TemplateEditor.IFieldEditableOccurrence {
}
public interface JetBrains.ReSharper.LiveTemplates.UI.TemplateEditor.ITemplateEditor {
    public abstract virtual void Activate();
}
public interface JetBrains.ReSharper.LiveTemplates.UI.TemplateEditor.ITemplateFieldRegister {
    public abstract virtual bool RegisterFieldOccurrence(string fieldOrKeyword);
}
public abstract class JetBrains.ReSharper.LiveTemplates.UI.TemplateEditor.MacroParameterAutomationBase : AAutomation {
    [CompilerGeneratedAttribute]
private IProperty`1<string> <TextValue>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private SimpleSignal <Changed>k__BackingField;
    public IProperty`1<string> TextValue { get; }
    public IProperty`1<string> Name { get; }
    public SimpleSignal Changed { get; }
    protected MacroParameterAutomationBase(Lifetime lifetime, string name, string value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_TextValue();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_Name();
    [CompilerGeneratedAttribute]
public SimpleSignal get_Changed();
    public virtual IMacroParameterValue CreateMacroParameterValue();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0(PropertyChangedEventArgs`1<string> args);
}
public class JetBrains.ReSharper.LiveTemplates.UI.TemplateEditor.MultipleEditableOccurrence : AAutomation {
    [CompilerGeneratedAttribute]
private ListEvents`1<FieldOccurrenceAutomation> <Ranges>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<FieldOccurrenceAutomation> <SelectedRange>k__BackingField;
    public ListEvents`1<FieldOccurrenceAutomation> Ranges { get; }
    public Property`1<FieldOccurrenceAutomation> SelectedRange { get; }
    public MultipleEditableOccurrence(Lifetime lifetime, TemplateFieldAutomation field);
    [CompilerGeneratedAttribute]
public ListEvents`1<FieldOccurrenceAutomation> get_Ranges();
    [CompilerGeneratedAttribute]
public Property`1<FieldOccurrenceAutomation> get_SelectedRange();
    public virtual string ToString();
}
public class JetBrains.ReSharper.LiveTemplates.UI.TemplateEditor.SingleEditableOccurrence : AAutomation {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEditable>k__BackingField;
    public IProperty`1<bool> IsEditable { get; }
    public SingleEditableOccurrence(Lifetime lifetime, TemplateFieldAutomation field);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsEditable();
    public virtual string ToString();
}
public class JetBrains.ReSharper.LiveTemplates.UI.TemplateEditor.TemplateAutomation : AAutomation {
    private StoredTemplatesProvider myStoredTemplatesProvider;
    [CompilerGeneratedAttribute]
private Property`1<bool> <IsBlessed>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<Visibility> <ShortcutErrorVisibility>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<Visibility> <MnemonicErrorVisibility>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<TemplateContentAutomation> <TemplateContent>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<TemplateTextAutomation> <TextAutomation>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Visibility> <FilenameVisiblility>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<int> <ChangedCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <DescriptionError>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Visibility> <DescriptionErrorVisibility>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <ShortcutError>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <MnemonicError>k__BackingField;
    private ICollection`1<Template> myCachedTemplates;
    private IContextBoundSettingsStore myBoundStore;
    private StoragesLegacyHacks myStoragesLegacyHacks;
    [CompilerGeneratedAttribute]
private ILiveTemplatesUIHelper <LiveTemplatesUIHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <UITag>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <DefaultFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ValidateFileName>k__BackingField;
    private static string DEFAULT_FILE_NAME;
    internal bool myFileNameIsSet;
    private bool myAutomaticChange;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsOptimiseSelected>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsReformatSelected>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsUseGenerationChecked>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsUseSurroundChecked>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsUseBothChecked>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Visibility> <ShortcutVisibility>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Visibility> <ApplicabilityVisibility>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Shortcut>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Mnemonic>k__BackingField;
    [CompilerGeneratedAttribute]
private ListEvents`1<TemplateSectionAutomation> <Sections>k__BackingField;
    [CompilerGeneratedAttribute]
private ListEvents`1<TemplateFieldAutomation> <Fields>k__BackingField;
    [CompilerGeneratedAttribute]
private ListEvents`1<TemplateFieldAutomation> <FieldsOrdered>k__BackingField;
    [CompilerGeneratedAttribute]
private ListEvents`1<TemplateApplicability> <Applicabilities>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <AddSectionCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <AddReferenceCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ListEvents`1<ITemplateScopePoint> <ScopePoints>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <ScopeDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <ChangeScopeCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldOrder <FieldOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private SimpleSignal <Changed>k__BackingField;
    [CompilerGeneratedAttribute]
private SimpleSignal <DoRehighlight>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <TemplatePresentableName>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<TemplateFieldAutomation> <SelectedField>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <MoveUpCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <MoveDownCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsMoveUpEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsMoveDownEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<double> <MoveUpOpacity>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<double> <MoveDownOpacity>k__BackingField;
    [CompilerGeneratedAttribute]
private SimpleSignal <FieldRehighlightRequested>k__BackingField;
    public Property`1<bool> IsBlessed { get; public set; }
    public Property`1<Visibility> ShortcutErrorVisibility { get; public set; }
    public Property`1<Visibility> MnemonicErrorVisibility { get; public set; }
    public IProperty`1<TemplateContentAutomation> TemplateContent { get; }
    public IProperty`1<TemplateTextAutomation> TextAutomation { get; }
    public IProperty`1<Visibility> FilenameVisiblility { get; }
    public IProperty`1<int> ChangedCount { get; private set; }
    public IProperty`1<string> DescriptionError { get; }
    public IProperty`1<Visibility> DescriptionErrorVisibility { get; }
    public IProperty`1<string> ShortcutError { get; }
    public IProperty`1<string> MnemonicError { get; }
    public ILiveTemplatesUIHelper LiveTemplatesUIHelper { get; }
    public IProperty`1<string> Description { get; }
    public IProperty`1<string> UITag { get; }
    public IProperty`1<string> DefaultFileName { get; private set; }
    public IProperty`1<bool> ValidateFileName { get; private set; }
    public IProperty`1<bool> IsOptimiseSelected { get; }
    public IProperty`1<bool> IsReformatSelected { get; }
    public IProperty`1<bool> IsUseGenerationChecked { get; }
    public IProperty`1<bool> IsUseSurroundChecked { get; }
    public IProperty`1<bool> IsUseBothChecked { get; }
    public IProperty`1<Visibility> ShortcutVisibility { get; }
    public IProperty`1<Visibility> ApplicabilityVisibility { get; }
    public IProperty`1<string> Shortcut { get; }
    public IProperty`1<string> Mnemonic { get; }
    public ListEvents`1<TemplateSectionAutomation> Sections { get; }
    public ListEvents`1<TemplateFieldAutomation> Fields { get; }
    public ListEvents`1<TemplateFieldAutomation> FieldsOrdered { get; private set; }
    public ListEvents`1<TemplateApplicability> Applicabilities { get; }
    public ICommand AddSectionCommand { get; }
    public ICommand AddReferenceCommand { get; }
    public ListEvents`1<ITemplateScopePoint> ScopePoints { get; private set; }
    public IProperty`1<string> ScopeDescription { get; private set; }
    public ICommand ChangeScopeCommand { get; private set; }
    public FieldOrder FieldOrder { get; }
    public SimpleSignal Changed { get; }
    public SimpleSignal DoRehighlight { get; }
    private string Extension { get; }
    private string FileName { get; }
    public IProperty`1<string> TemplatePresentableName { get; }
    public IProperty`1<TemplateFieldAutomation> SelectedField { get; }
    public ICommand MoveUpCommand { get; private set; }
    public ICommand MoveDownCommand { get; private set; }
    public IProperty`1<bool> IsMoveUpEnabled { get; }
    public IProperty`1<bool> IsMoveDownEnabled { get; }
    public Property`1<double> MoveUpOpacity { get; }
    public Property`1<double> MoveDownOpacity { get; }
    public SimpleSignal FieldRehighlightRequested { get; }
    public TemplateAutomation(Lifetime lifetime, Template template, StoredTemplatesProvider storedTemplatesProvider, IContextBoundSettingsStore boundStore, StoragesLegacyHacks storagesLegacyHacks, ILiveTemplatesUIHelper liveTemplatesUIHelper, IIdeInMemoryDocumentFactory ideInMemoryDocumentFactory, IRunningDocuments rundocs);
    [CompilerGeneratedAttribute]
public Property`1<bool> get_IsBlessed();
    [CompilerGeneratedAttribute]
public void set_IsBlessed(Property`1<bool> value);
    [CompilerGeneratedAttribute]
public Property`1<Visibility> get_ShortcutErrorVisibility();
    [CompilerGeneratedAttribute]
public void set_ShortcutErrorVisibility(Property`1<Visibility> value);
    [CompilerGeneratedAttribute]
public Property`1<Visibility> get_MnemonicErrorVisibility();
    [CompilerGeneratedAttribute]
public void set_MnemonicErrorVisibility(Property`1<Visibility> value);
    [CompilerGeneratedAttribute]
public IProperty`1<TemplateContentAutomation> get_TemplateContent();
    [CompilerGeneratedAttribute]
public IProperty`1<TemplateTextAutomation> get_TextAutomation();
    [CompilerGeneratedAttribute]
public IProperty`1<Visibility> get_FilenameVisiblility();
    public void SaveToTemplate(Template template);
    private void InitializeFields(Lifetime lifetime, Template template);
    private void InitializeChangedTracking(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public IProperty`1<int> get_ChangedCount();
    [CompilerGeneratedAttribute]
private void set_ChangedCount(IProperty`1<int> value);
    private void InitializeFilename(Lifetime lifetime, Template template);
    private void InitializeScopePoints(Lifetime lifetime, Template template);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_DescriptionError();
    [CompilerGeneratedAttribute]
public IProperty`1<Visibility> get_DescriptionErrorVisibility();
    private void UpdateScopeDesription();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_ShortcutError();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_MnemonicError();
    private IEnumerable`1<Template> EnumerateOtherTemplates(TemplateApplicability templateApplicability, Template template);
    [CompilerGeneratedAttribute]
public ILiveTemplatesUIHelper get_LiveTemplatesUIHelper();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_Description();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_UITag();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_DefaultFileName();
    [CompilerGeneratedAttribute]
private void set_DefaultFileName(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ValidateFileName();
    [CompilerGeneratedAttribute]
private void set_ValidateFileName(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsOptimiseSelected();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsReformatSelected();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsUseGenerationChecked();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsUseSurroundChecked();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsUseBothChecked();
    [CompilerGeneratedAttribute]
public IProperty`1<Visibility> get_ShortcutVisibility();
    [CompilerGeneratedAttribute]
public IProperty`1<Visibility> get_ApplicabilityVisibility();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_Shortcut();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_Mnemonic();
    [CompilerGeneratedAttribute]
public ListEvents`1<TemplateSectionAutomation> get_Sections();
    [CompilerGeneratedAttribute]
public ListEvents`1<TemplateFieldAutomation> get_Fields();
    [CompilerGeneratedAttribute]
public ListEvents`1<TemplateFieldAutomation> get_FieldsOrdered();
    [CompilerGeneratedAttribute]
private void set_FieldsOrdered(ListEvents`1<TemplateFieldAutomation> value);
    [CompilerGeneratedAttribute]
public ListEvents`1<TemplateApplicability> get_Applicabilities();
    [CompilerGeneratedAttribute]
public ICommand get_AddSectionCommand();
    [CompilerGeneratedAttribute]
public ICommand get_AddReferenceCommand();
    [CompilerGeneratedAttribute]
public ListEvents`1<ITemplateScopePoint> get_ScopePoints();
    [CompilerGeneratedAttribute]
private void set_ScopePoints(ListEvents`1<ITemplateScopePoint> value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_ScopeDescription();
    [CompilerGeneratedAttribute]
private void set_ScopeDescription(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public ICommand get_ChangeScopeCommand();
    [CompilerGeneratedAttribute]
private void set_ChangeScopeCommand(ICommand value);
    [CompilerGeneratedAttribute]
public FieldOrder get_FieldOrder();
    [CompilerGeneratedAttribute]
public SimpleSignal get_Changed();
    [CompilerGeneratedAttribute]
public SimpleSignal get_DoRehighlight();
    private string get_Extension();
    private string get_FileName();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_TemplatePresentableName();
    [CompilerGeneratedAttribute]
public IProperty`1<TemplateFieldAutomation> get_SelectedField();
    [CompilerGeneratedAttribute]
public ICommand get_MoveUpCommand();
    [CompilerGeneratedAttribute]
private void set_MoveUpCommand(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_MoveDownCommand();
    [CompilerGeneratedAttribute]
private void set_MoveDownCommand(ICommand value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsMoveUpEnabled();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsMoveDownEnabled();
    [CompilerGeneratedAttribute]
public Property`1<double> get_MoveUpOpacity();
    [CompilerGeneratedAttribute]
public Property`1<double> get_MoveDownOpacity();
    [CompilerGeneratedAttribute]
public SimpleSignal get_FieldRehighlightRequested();
    internal void AssignNewDefaultFilename(IEnumerable`1<ITemplateScopePoint> newPoints);
    public void PurgeEmptyFields();
    [CompilerGeneratedAttribute]
private void <InitializeFields>b__24_0(AddRemoveIndexEventArgs`1<TemplateFieldAutomation> args);
    [CompilerGeneratedAttribute]
private bool <InitializeFields>b__24_1(TemplateFieldAutomation field);
    [CompilerGeneratedAttribute]
private bool <InitializeFields>b__24_2(TemplateFieldAutomation field);
    [CompilerGeneratedAttribute]
private void <InitializeFields>b__24_3();
    [CompilerGeneratedAttribute]
private void <InitializeFields>b__24_4();
    [CompilerGeneratedAttribute]
private void <InitializeChangedTracking>b__25_2(object o);
    [CompilerGeneratedAttribute]
private void <InitializeChangedTracking>b__25_0();
    [CompilerGeneratedAttribute]
private void <InitializeFilename>b__30_0(PropertyChangedEventArgs`1<string> args);
}
public class JetBrains.ReSharper.LiveTemplates.UI.TemplateEditor.TemplateContentAutomation : AAutomation {
    [CompilerGeneratedAttribute]
private TemplateAutomation <Template>k__BackingField;
    public TemplateAutomation Template { get; }
    public TemplateContentAutomation(Lifetime lifetime, TemplateAutomation template);
    [CompilerGeneratedAttribute]
public TemplateAutomation get_Template();
}
public class JetBrains.ReSharper.LiveTemplates.UI.TemplateEditor.TemplateEditor : object {
    private LifetimeDefinition myDefinition;
    private Lifetime myLifetime;
    private IPersistableView myPersistableView;
    private TemplateAutomation myTemplateAutomation;
    public TemplateEditor(Lifetime lifetime, Template template, string docMoniker, PersistableViewManager persistableViewManager, StoredTemplatesProvider storedTemplatesProvider, IContextBoundSettingsStore boundStore, StoragesLegacyHacks storagesLegacyHacks, ITemplateEditorTracker tracker, ILiveTemplatesUIHelper environment, IIdeInMemoryDocumentFactory ideInMemoryDocumentFactory, IRunningDocuments rundocs);
    private void Close();
    public sealed virtual void Activate();
}
[ShellComponentAttribute("0")]
public class JetBrains.ReSharper.LiveTemplates.UI.TemplateEditor.TemplateEditorManager : object {
    private Lifetime myLifetime;
    private ILiveTemplatesUIHelper myLiveTemplatesUIHelper;
    private PersistableViewManager myPersistableViewManager;
    private BidirectionalMap`2<TemplateReference, ITemplateEditor> myEditors;
    private Dictionary`2<ITemplateEditor, LifetimeDefinition> myEditorLifetimeDefinitions;
    private TemplateEditorTracker myTracker;
    private Dictionary`2<Template, string> myUsedPaths;
    private StoredTemplatesProvider myStoredTemplatedProvider;
    private StoragesLegacyHacks myStoragesLegacyHacks;
    private IIdeInMemoryDocumentFactory myIdeInMemoryDocumentFactory;
    private IRunningDocuments myRundocs;
    public static TemplateEditorManager Instance { get; }
    public TemplateEditorManager(Lifetime lifetime, ILiveTemplatesUIHelper liveTemplatesUIHelper, PersistableViewManager persistableViewManager, StoredTemplatesProvider storedTemplatedProvider, StoragesLegacyHacks storagesLegacyHacks, IIdeInMemoryDocumentFactory ideInMemoryDocumentFactory, IRunningDocuments rundocs);
    public static TemplateEditorManager get_Instance();
    public void EditTemplate(Template template, IContextBoundSettingsStore boundStore);
    public void CreateTemplate(Template template, IContextBoundSettingsStore boundStore);
    private void EditTemplate(Template template, Func`3<Template, Lifetime, ITemplateEditor> createEditor);
    private string GetTemplatePath(Template template);
    private void UnregisterView(ITemplateEditor editor);
    public sealed virtual void Dispose();
}
public class JetBrains.ReSharper.LiveTemplates.UI.TemplateEditor.TemplateFieldAutomation : AAutomation {
    private TemplateAutomation myTemplate;
    [CompilerGeneratedAttribute]
private ListEvents`1<MacroParameterAutomationBase> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ListEvents`1<FieldOccurrenceAutomation> <OccurrenceList>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionaryEvents`2<Guid, int> <PlainOccurrenceCount>k__BackingField;
    private static FormattedText ourChooseMacroFormattedText;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<int> <OccurrenceCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<int> <InitialRange>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Guid> <InitialSection>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IFieldEditableOccurrence> <EditableOccurrence>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<FormattedText> <FormattedDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <DescriptionText>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <ChooseMacroCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IMacroDefinition> <Macro>k__BackingField;
    [CompilerGeneratedAttribute]
private SimpleSignal <InitialChanged>k__BackingField;
    public bool UpdatingOccurrences;
    public ListEvents`1<MacroParameterAutomationBase> Parameters { get; public set; }
    public ListEvents`1<FieldOccurrenceAutomation> OccurrenceList { get; public set; }
    public IDictionaryEvents`2<Guid, int> PlainOccurrenceCount { get; public set; }
    public IProperty`1<string> Name { get; }
    public IProperty`1<int> OccurrenceCount { get; }
    public IProperty`1<int> InitialRange { get; }
    public IProperty`1<Guid> InitialSection { get; }
    public IProperty`1<IFieldEditableOccurrence> EditableOccurrence { get; }
    public IProperty`1<FormattedText> FormattedDescription { get; }
    public IProperty`1<string> DescriptionText { get; }
    public ICommand ChooseMacroCommand { get; }
    public IProperty`1<IMacroDefinition> Macro { get; }
    public SimpleSignal InitialChanged { get; }
    public TemplateFieldAutomation(Lifetime lifetime, TemplateField field, TemplateAutomation template);
    private static TemplateFieldAutomation();
    public MacroParameterAutomationBase CreateParameterAutomation(Lifetime lifetime, ParameterInfo parameterInfo, string name, IMacroParameterValue value);
    [CompilerGeneratedAttribute]
public ListEvents`1<MacroParameterAutomationBase> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(ListEvents`1<MacroParameterAutomationBase> value);
    [CompilerGeneratedAttribute]
public ListEvents`1<FieldOccurrenceAutomation> get_OccurrenceList();
    [CompilerGeneratedAttribute]
public void set_OccurrenceList(ListEvents`1<FieldOccurrenceAutomation> value);
    [CompilerGeneratedAttribute]
public IDictionaryEvents`2<Guid, int> get_PlainOccurrenceCount();
    [CompilerGeneratedAttribute]
public void set_PlainOccurrenceCount(IDictionaryEvents`2<Guid, int> value);
    public FormattedText GetFormattedDescription(IMacroDefinition macro, IList`1<MacroParameterAutomationBase> parameters);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_Name();
    [CompilerGeneratedAttribute]
public IProperty`1<int> get_OccurrenceCount();
    [CompilerGeneratedAttribute]
public IProperty`1<int> get_InitialRange();
    [CompilerGeneratedAttribute]
public IProperty`1<Guid> get_InitialSection();
    [CompilerGeneratedAttribute]
public IProperty`1<IFieldEditableOccurrence> get_EditableOccurrence();
    [CompilerGeneratedAttribute]
public IProperty`1<FormattedText> get_FormattedDescription();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_DescriptionText();
    [CompilerGeneratedAttribute]
public ICommand get_ChooseMacroCommand();
    [CompilerGeneratedAttribute]
public IProperty`1<IMacroDefinition> get_Macro();
    [CompilerGeneratedAttribute]
public SimpleSignal get_InitialChanged();
    public void SetSectionOccurrences(Guid sectionGuid, int value, bool bulkUpdate);
    public int GetSectionOccurrences(Guid sectionGuid);
    [CompilerGeneratedAttribute]
private void <CreateParameterAutomation>b__2_0();
}
public class JetBrains.ReSharper.LiveTemplates.UI.TemplateEditor.TemplateReferenceMappingAutomation : AAutomation {
    public static string UnchangedValue;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <ReferenceField>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <LocalField>k__BackingField;
    [CompilerGeneratedAttribute]
private ListEvents`1<string> <LocalFields>k__BackingField;
    public IProperty`1<string> ReferenceField { get; }
    public IProperty`1<string> LocalField { get; }
    public ListEvents`1<string> LocalFields { get; }
    public TemplateReferenceMappingAutomation(Lifetime lifetime, string refField, string localField, TemplateAutomation template);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_ReferenceField();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_LocalField();
    [CompilerGeneratedAttribute]
public ListEvents`1<string> get_LocalFields();
}
public class JetBrains.ReSharper.LiveTemplates.UI.TemplateEditor.TemplateReferenceSectionAutomation : TemplateSectionAutomation {
    private Guid myReferencedGuid;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <TemplateDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private ListEvents`1<TemplateReferenceMappingAutomation> <Mappings>k__BackingField;
    public IProperty`1<string> TemplateDescription { get; }
    public ListEvents`1<TemplateReferenceMappingAutomation> Mappings { get; }
    public TemplateReferenceSectionAutomation(Lifetime lifetime, TemplateAutomation parent, TemplateReferenceSection section, Template referencedTemplate);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_TemplateDescription();
    [CompilerGeneratedAttribute]
public ListEvents`1<TemplateReferenceMappingAutomation> get_Mappings();
    protected virtual TemplateSection CreateNewSectionModel();
}
public abstract class JetBrains.ReSharper.LiveTemplates.UI.TemplateEditor.TemplateSectionAutomation : AAutomation {
    private TemplateSection mySection;
    [CompilerGeneratedAttribute]
private ICommand <RemoveSectionCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private ListEvents`1<ISectionFilenameSelector> <Selectors>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<ISectionFilenameSelector> <CurrentSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<ISectionLocationAutomation> <CurrentSelectorAutomation>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <MainFilename>k__BackingField;
    public ICommand RemoveSectionCommand { get; }
    public Guid Guid { get; }
    public ListEvents`1<ISectionFilenameSelector> Selectors { get; }
    public IProperty`1<ISectionFilenameSelector> CurrentSelector { get; }
    public IProperty`1<ISectionLocationAutomation> CurrentSelectorAutomation { get; }
    public IProperty`1<string> MainFilename { get; }
    protected TemplateSectionAutomation(Lifetime lifetime, TemplateAutomation parent, TemplateSection section);
    [CompilerGeneratedAttribute]
public ICommand get_RemoveSectionCommand();
    [CompilerGeneratedAttribute]
public Guid get_Guid();
    [CompilerGeneratedAttribute]
public ListEvents`1<ISectionFilenameSelector> get_Selectors();
    [CompilerGeneratedAttribute]
public IProperty`1<ISectionFilenameSelector> get_CurrentSelector();
    [CompilerGeneratedAttribute]
public IProperty`1<ISectionLocationAutomation> get_CurrentSelectorAutomation();
    [NotNullAttribute]
protected abstract virtual TemplateSection CreateNewSectionModel();
    [NotNullAttribute]
public TemplateSection GetTemplateSectionModel();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<string> get_MainFilename();
}
public class JetBrains.ReSharper.LiveTemplates.UI.TemplateEditor.TemplateTextAutomation : AAutomation {
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private TextControlAutomation <TextControl>k__BackingField;
    [CompilerGeneratedAttribute]
private TemplateAutomation <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private TemplateTextSectionAutomation <Section>k__BackingField;
    public IProperty`1<string> Text { get; }
    public TextControlAutomation TextControl { get; }
    public TemplateAutomation Template { get; }
    public TemplateTextSectionAutomation Section { get; }
    public TemplateTextAutomation(Lifetime lifetime, string text, TemplateAutomation template, IIdeInMemoryDocumentFactory ideInMemoryDocumentFactory, IShellLocks locks, IRunningDocuments rundocs, TemplateTextSectionAutomation section);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_Text();
    [CompilerGeneratedAttribute]
public TextControlAutomation get_TextControl();
    [CompilerGeneratedAttribute]
public TemplateAutomation get_Template();
    [CompilerGeneratedAttribute]
public TemplateTextSectionAutomation get_Section();
}
public class JetBrains.ReSharper.LiveTemplates.UI.TemplateEditor.TemplateTextHighlighter : object {
    [NotNullAttribute]
private TemplateTextAutomation myText;
    private bool myIsHighlighting;
    private IDocument myDocument;
    public TemplateTextHighlighter(Lifetime lifetime, TemplateTextAutomation text, IDocument document);
    public void HighlightTemplateText();
    [CompilerGeneratedAttribute]
private void <HighlightTemplateText>b__4_0();
    [CompilerGeneratedAttribute]
private void <HighlightTemplateText>b__4_1();
}
[RegisterHighlighterAttribute("ReSharper Template Editor Template Keyword")]
public static class JetBrains.ReSharper.LiveTemplates.UI.TemplateEditor.TemplateTextHighlighterAttributeIds : object {
    public static string KEYWORD_ATTRIBUTE;
}
public class JetBrains.ReSharper.LiveTemplates.UI.TemplateEditor.TemplateTextSectionAutomation : TemplateSectionAutomation {
    [CompilerGeneratedAttribute]
private IProperty`1<TemplateTextAutomation> <TextAutomation>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<double> <ParentHeight>k__BackingField;
    public IProperty`1<TemplateTextAutomation> TextAutomation { get; }
    public IProperty`1<double> ParentHeight { get; public set; }
    public TemplateTextSectionAutomation(Lifetime lifetime, TemplateAutomation parent, TemplateTextSection section, IIdeInMemoryDocumentFactory ideInMemoryDocumentFactory, IShellLocks locks, IRunningDocuments rundocs);
    [CompilerGeneratedAttribute]
public IProperty`1<TemplateTextAutomation> get_TextAutomation();
    [CompilerGeneratedAttribute]
public IProperty`1<double> get_ParentHeight();
    [CompilerGeneratedAttribute]
public void set_ParentHeight(IProperty`1<double> value);
    protected virtual TemplateSection CreateNewSectionModel();
}
public class JetBrains.ReSharper.LiveTemplates.UI.TemplateEditor.TypeMacroParameterAutomation : MacroParameterAutomationBase {
    [CompilerGeneratedAttribute]
private ICommand <SetTypeCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Visibility> <SetTypeEnabled>k__BackingField;
    public ICommand SetTypeCommand { get; }
    public IProperty`1<Visibility> SetTypeEnabled { get; }
    public TypeMacroParameterAutomation(Lifetime lifetime, string name, ITooltipManager tooltipManager, IUIApplication uiApplication, IWindowsHookManager windowsHookManager, IMainWindowPopupWindowContext mainWindowPopupWindowContext, string value);
    [CompilerGeneratedAttribute]
public ICommand get_SetTypeCommand();
    [CompilerGeneratedAttribute]
public IProperty`1<Visibility> get_SetTypeEnabled();
}
public class JetBrains.ReSharper.LiveTemplates.UI.TemplateEditor.VariableMacroParameterAutomation : MacroParameterAutomationBase {
    [CompilerGeneratedAttribute]
private ListEvents`1<string> <LocalFields>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <SelectedField>k__BackingField;
    public ListEvents`1<string> LocalFields { get; public set; }
    public IProperty`1<string> SelectedField { get; }
    public VariableMacroParameterAutomation(Lifetime lifetime, TemplateFieldAutomation field, TemplateAutomation template, string name, string value);
    [CompilerGeneratedAttribute]
public ListEvents`1<string> get_LocalFields();
    [CompilerGeneratedAttribute]
public void set_LocalFields(ListEvents`1<string> value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_SelectedField();
    public virtual IMacroParameterValue CreateMacroParameterValue();
}
public class JetBrains.ReSharper.LiveTemplates.UI.TemplateFieldCollector : object {
    [NotNullAttribute]
private TemplateTextAutomation myText;
    private bool myIsHighlighting;
    public TemplateFieldCollector(Lifetime lifetime, TemplateTextAutomation text);
    public void HighlightTemplateText(string newText);
}
public class JetBrains.ReSharper.LiveTemplates.UI.TemplateModel : object {
    private Template myTemplate;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Caption>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<RichText> <RichTextCaption>k__BackingField;
    public Template Template { get; public set; }
    public IProperty`1<string> Caption { get; }
    public IProperty`1<RichText> RichTextCaption { get; }
    public TemplateModel(Template template);
    public Template get_Template();
    public void set_Template(Template value);
    public void UpdateCaption(string shortcut, string description);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_Caption();
    [CompilerGeneratedAttribute]
public IProperty`1<RichText> get_RichTextCaption();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.LiveTemplates.UI.TemplatesLocalizationSource : object {
    public sealed virtual Type GetResourceType();
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ActionAttribute("JetBrains.ReSharper.LiveTemplates.Resources.Strings", "TemplatesUIDialogActionText")]
public class JetBrains.ReSharper.LiveTemplates.UI.TemplatesUIDemoAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ShellComponentAttribute("0")]
public class JetBrains.ReSharper.LiveTemplates.UI.TemplatesUIFactory : object {
    private StoredTemplatesProvider myStoredTemplatesProvider;
    private StoragesLegacyHacks myStoragesLegacyHacks;
    private ILiveTemplatesUIHelper myUIHelper;
    private IconHostBase myIconHostBase;
    private ScopeCategoryManager myScopeCategoryManager;
    private MacroManager myMacroManager;
    private IIdeInMemoryDocumentFactory myIdeInMemoryDocumentFactory;
    private IRunningDocuments myRundocs;
    public TemplatesUIFactory(StoredTemplatesProvider storedTemplatesProvider, StoragesLegacyHacks storagesLegacyHacks, ILiveTemplatesUIHelper uiHelper, IconHostBase iconHostBase, ScopeCategoryManager scopeCategoryManager, MacroManager macroManager, IIdeInMemoryDocumentFactory ideInMemoryDocumentFactory, IRunningDocuments rundocs);
    public BeSplitControl GetEditorAutomation(Lifetime lifetime, Template template, IContextBoundSettingsStore boundSettings, IProperty`1<QuickListEx> currentQuickList, string rdLanguageName, TemplateAutomation& automation, IDialogHost dialogHost, Action`1<bool> toggleQuicklistAction);
    private BeDialog GetEditVariablesDialog(Lifetime lifetime, TemplateAutomation editorAutomation, IDialogHost dialogHost);
    private string DescribeMacro(IMacroDefinition macro);
    private BeControl GetFieldDetails(Lifetime lifetime, TemplateFieldAutomation field, TemplateAutomation template, IDialogHost dialogHost);
    private BeDialog GetChooseMacroDialog(Lifetime lifetime, TemplateAutomation template, TemplateFieldAutomation field, ListEvents`1<ITemplateScopePoint> templateScopePoints, IMacroDefinition prevMacro);
    private BeDialog GetSelectScopePointsDialog(Lifetime lifetime, TemplateAutomation editorAutomation, Template template);
    public BeDialog GetQuickListEditorAutomation(Lifetime lifetime, IList`1<TemplateModel> templatesList, ScopeCategoryUIProvider uiProvider, OptionsSettingsSmartContext optionsSettingsSmartContext, Action onSubmit);
}
public static class JetBrains.ReSharper.LiveTemplates.UI.Theming.LiveTemplateColor : object {
    public static ThemeColor LTSelectedBorder;
    public static ThemeColor LTSelectedBorderInner;
    public static ThemeColor LTSelectedGradientStart;
    public static ThemeColor LTSelectedGradientEnd;
    public static ThemeColor LTHeaderGradientBase;
    public static ThemeColor LTHeaderGradientStart;
    public static ThemeColor LTHeaderGradientEnd;
    public static ThemeColor LTInternalBorder;
    public static ThemeColor LTSplitterBorder;
    public static ThemeColor LTTagBackground;
    public static ThemeColor LTTagForeground;
    public static ThemeColor LTTagBorder;
    private static LiveTemplateColor();
}
[DefaultSettingsAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.LiveTemplatesSettings", "16")]
public class JetBrains.ReSharper.LiveTemplates.Xml.Defaults.DefaultFileTemplates : object {
    public string Name { get; }
    public sealed virtual Stream GetDefaultSettingsStream(Lifetime lifetime);
    public sealed virtual string get_Name();
}
[DefaultSettingsAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.LiveTemplatesSettings", "16")]
public class JetBrains.ReSharper.LiveTemplates.Xml.Defaults.DefaultLiveTemplates : object {
    public string Name { get; }
    public sealed virtual Stream GetDefaultSettingsStream(Lifetime lifetime);
    public sealed virtual string get_Name();
}
[DefaultSettingsAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.LiveTemplatesSettings", "16")]
public class JetBrains.ReSharper.LiveTemplates.Xml.Defaults.DefaultSurroundTemplates : object {
    public string Name { get; }
    public sealed virtual Stream GetDefaultSettingsStream(Lifetime lifetime);
    public sealed virtual string get_Name();
}
public class JetBrains.ReSharper.LiveTemplates.Xml.InXmlAttribute : InXmlFile {
    private static Guid DefaultUID;
    public string PresentableShortName { get; }
    private static InXmlAttribute();
    public virtual Guid GetDefaultUID();
    public virtual string ToString();
    public virtual string get_PresentableShortName();
}
public class JetBrains.ReSharper.LiveTemplates.Xml.InXmlFile : InAnyLanguageFile {
    private static Guid DefaultUID;
    public string PresentableShortName { get; }
    public PsiLanguageType RelatedLanguage { get; }
    public Guid QuickListUID { get; }
    public string QuickListTitle { get; }
    private static InXmlFile();
    public virtual Guid GetDefaultUID();
    public virtual string ToString();
    public virtual string get_PresentableShortName();
    public virtual PsiLanguageType get_RelatedLanguage();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.LiveTemplates.Xml.InXmlFile/<GetExtensions>d__7")]
protected virtual IEnumerable`1<string> GetExtensions();
    public sealed virtual Guid get_QuickListUID();
    public sealed virtual string get_QuickListTitle();
}
public class JetBrains.ReSharper.LiveTemplates.Xml.InXmlTag : InXmlFile {
    private static Guid DefaultUID;
    public string PresentableShortName { get; }
    private static InXmlTag();
    public virtual Guid GetDefaultUID();
    public virtual string ToString();
    public virtual string get_PresentableShortName();
}
[MacroDefinitionAttribute("fullTagName")]
public class JetBrains.ReSharper.LiveTemplates.Xml.Macros.FullTagNameMacroDef : XmlTagMacroDefBase {
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.LiveTemplates.Xml.Macros.FullTagNameMacroImpl : XmlTagMacroImplBase {
    public FullTagNameMacroImpl(MacroParameterValueCollection arguments);
    public virtual string EvaluateQuickResult(IHotspotContext context);
}
public class JetBrains.ReSharper.LiveTemplates.Xml.Macros.InXmlImpl : MacroImplementationScopeProviderBase {
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.LiveTemplates.Xml.Macros.SuggestAttributeNameByTagMacro : XmlMacroImpl {
    protected virtual ICollection`1<string> GetSuggestedNames(IXmlFile file, IHotspotContext context);
}
[MacroDefinitionAttribute("suggestXmlAttributeNameByTag")]
public class JetBrains.ReSharper.LiveTemplates.Xml.Macros.SuggestAttributeNameByTagMacroDef : SimpleMacroDefinition {
    public virtual string GetPlaceholder(IDocument document, ISolution solution, IEnumerable`1<IMacroParameterValue> parameters);
}
[MacroDefinitionAttribute("suggestAttributeName")]
public class JetBrains.ReSharper.LiveTemplates.Xml.Macros.SuggestAttributeNameMacroDef : SimpleMacroDefinition {
    public virtual string GetPlaceholder(IDocument document, ISolution solution, IEnumerable`1<IMacroParameterValue> parameters);
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.LiveTemplates.Xml.Macros.SuggestAttributeNameMacroImpl : XmlMacroImpl {
    protected virtual ICollection`1<string> GetSuggestedNames(IXmlFile file, IHotspotContext context);
}
[MacroDefinitionAttribute("suggestXmlTagName")]
public class JetBrains.ReSharper.LiveTemplates.Xml.Macros.SuggestTagNameMacroDef : SimpleMacroDefinition {
    public virtual string GetPlaceholder(IDocument document, ISolution solution, IEnumerable`1<IMacroParameterValue> parameters);
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.LiveTemplates.Xml.Macros.SuggestTagNameMacroImpl : XmlMacroImpl {
    protected virtual ICollection`1<string> GetSuggestedNames(IXmlFile file, IHotspotContext context);
}
[MacroDefinitionAttribute("tagName")]
public class JetBrains.ReSharper.LiveTemplates.Xml.Macros.TagNameMacroDef : XmlTagMacroDefBase {
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.LiveTemplates.Xml.Macros.TagNameMacroImpl : XmlTagMacroImplBase {
    public TagNameMacroImpl(MacroParameterValueCollection arguments);
    public virtual string EvaluateQuickResult(IHotspotContext context);
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.LiveTemplates.Xml.Macros.TagNamespaceMacro : XmlTagMacroImplBase {
    public TagNamespaceMacro(MacroParameterValueCollection arguments);
    public virtual string EvaluateQuickResult(IHotspotContext context);
}
[MacroDefinitionAttribute("tagNamespace")]
public class JetBrains.ReSharper.LiveTemplates.Xml.Macros.TagNamespaceMacroDef : XmlTagMacroDefBase {
}
public abstract class JetBrains.ReSharper.LiveTemplates.Xml.Macros.XmlMacroImpl : SimpleMacroImplementation {
    protected IXmlFile GetXmlFile(IHotspotContext context);
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
    protected abstract virtual ICollection`1<string> GetSuggestedNames(IXmlFile file, IHotspotContext context);
}
public class JetBrains.ReSharper.LiveTemplates.Xml.Macros.XmlTagMacroDefBase : SimpleMacroDefinition {
    public virtual string GetPlaceholder(IDocument document, ISolution solution, IEnumerable`1<IMacroParameterValue> parameters);
}
public abstract class JetBrains.ReSharper.LiveTemplates.Xml.Macros.XmlTagMacroImplBase : XmlMacroImpl {
    protected IEnumerable`1<IMacroParameterValueNew> myArguments;
    protected XmlTagMacroImplBase(MacroParameterValueCollection arguments);
    protected virtual ICollection`1<string> GetSuggestedNames(IXmlFile file, IHotspotContext context);
    [CanBeNullAttribute]
protected IXmlTag GetTag(IHotspotContext context);
}
[ScopeCategoryUIProviderAttribute("16")]
public class JetBrains.ReSharper.LiveTemplates.Xml.XmlScopeCategoryUIProvider : ScopeCategoryUIProvider {
    public string CategoryCaption { get; }
    [IteratorStateMachineAttribute("JetBrains.ReSharper.LiveTemplates.Xml.XmlScopeCategoryUIProvider/<BuildAllPoints>d__1")]
public virtual IEnumerable`1<ITemplateScopePoint> BuildAllPoints();
    public virtual string get_CategoryCaption();
    public virtual string Present(ITemplateScopePoint point);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.LiveTemplates.Xml.XmlScopeProvider : ScopeProvider {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.LiveTemplates.Xml.XmlScopeProvider/<ProvideScopePoints>d__1")]
public virtual IEnumerable`1<ITemplateScopePoint> ProvideScopePoints(TemplateAcceptanceContext context);
    private static bool IsInTag(TreeOffset treeOffset, IXmlToken tokenAtCaret);
    private static bool IsInAttr(TreeOffset treeOffset, IXmlToken tokenAtCaret);
}
public class JetBrains.ReSharper.LiveTemplates.Xml.XmlTemplateContext : TemplateContext {
    public static string TAG_NAME;
    public static string ATTRIBUTE_NAME;
    public XmlTemplateContextType ContextType;
    public IEnumerable`1<ITemplateScopePoint> ScopePoints { get; }
    public XmlTemplateContext(XmlTemplateContextType contextType);
    public virtual IEnumerable`1<ITemplateScopePoint> get_ScopePoints();
    private IList`1<ITemplateScopePoint> CalcScopePoints();
}
public enum JetBrains.ReSharper.LiveTemplates.Xml.XmlTemplateContextType : Enum {
    public int value__;
    public static XmlTemplateContextType EVERYWHERE;
    public static XmlTemplateContextType TAG_EXPECTED;
    public static XmlTemplateContextType ATTRIBUTE_EXPECTED;
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.XmlLanguage", "16")]
public class JetBrains.ReSharper.LiveTemplates.Xml.XmlTemplateFormatter : object {
    public string EndMarker { get; }
    public bool SupportsShorteningQualifiedReferences { get; }
    public sealed virtual string get_EndMarker();
    public sealed virtual bool get_SupportsShorteningQualifiedReferences();
    public sealed virtual void BeforeFormatting(DocumentRange documentRange, ISolution solution);
    public sealed virtual void ShortenQualifiedReferences(DocumentRange documentRange, ISolution solution);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.XmlLanguage", "16")]
public class JetBrains.ReSharper.LiveTemplates.Xml.XmlTemplateHighlightingProvider : TemplateHighlightingProvider {
    private XmlTokenTypes myXMLTokenTypes;
    public XmlTemplateHighlightingProvider(XmlTokenTypes xmlTokenTypes);
    public virtual string GetHighlightingAttributeId(TokenNodeType tokenType);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.LiveTemplates.Xml.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.LiveTemplates.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
