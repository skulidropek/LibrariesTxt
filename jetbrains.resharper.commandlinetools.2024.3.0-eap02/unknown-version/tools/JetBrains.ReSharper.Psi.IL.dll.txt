public class JetBrains.ReSharper.Psi.IL.Gen.ErrorMessages : object {
    private static string ourMessage_0;
    private static string ourMessage_1;
    private static string ourMessage_2;
    private static string ourMessage_3;
    private static string ourMessage_4;
    private static string ourMessage_5;
    private static string ourMessage_6;
    private static string ourMessage_7;
    private static string ourMessage_8;
    private static string ourMessage_9;
    private static string ourMessage_10;
    private static string ourMessage_11;
    private static string ourMessage_12;
    private static string ourMessage_13;
    private static string ourMessage_14;
    private static string ourMessage_15;
    private static string ourMessage_16;
    private static string ourMessage_17;
    private static string ourMessage_18;
    private static string ourMessage_19;
    private static string ourMessage_20;
    private static string ourMessage_21;
    private static string ourMessage_22;
    private static string ourMessage_23;
    private static string ourMessage_24;
    private static string ourMessage_25;
    private static string ourMessage_26;
    private static string ourMessage_27;
    private static string ourMessage_28;
    private static string ourMessage_29;
    private static string ourMessage_30;
    private static string ourMessage_31;
    private static string ourMessage_32;
    private static string ourMessage_33;
    private static string ourMessage_34;
    private static string ourMessage_35;
    private static string ourMessage_36;
    private static string ourMessage_37;
    private static string ourMessage_38;
    private static string ourMessage_39;
    private static string ourMessage_40;
    private static string ourMessage_41;
    private static string ourMessage_42;
    private static string ourMessage_43;
    private static string ourMessage_44;
    private static string ourMessage_45;
    private static string ourMessage_46;
    private static string ourMessage_47;
    private static string ourMessage_48;
    private static string ourMessage_49;
    private static string ourMessage_50;
    private static string ourMessage_51;
    private static string ourMessage_52;
    private static string ourMessage_53;
    private static string ourMessage_54;
    private static string ourMessage_55;
    private static string ourMessage_56;
    private static string ourMessage_57;
    private static string ourMessage_58;
    private static string ourMessage_59;
    private static string ourMessage_60;
    private static string ourMessage_61;
    private static string ourMessage_62;
    private static string ourMessage_63;
    private static string ourMessage_64;
    private static string ourMessage_65;
    private static string ourMessage_66;
    private static string ourMessage_67;
    private static string ourMessage_68;
    private static string ourMessage_69;
    private static string ourMessage_70;
    private static string ourMessage_71;
    private static string ourMessage_72;
    private static string ourMessage_73;
    private static string ourMessage_74;
    private static string ourMessage_75;
    private static string ourMessage_76;
    private static string ourMessage_77;
    private static string ourMessage_78;
    private static string ourMessage_79;
    private static string ourMessage_80;
    private static string ourMessage_81;
    private static string ourMessage_82;
    private static string ourMessage_83;
    private static string ourMessage_84;
    private static string ourMessage_85;
    private static string ourMessage_86;
    private static string ourMessage_87;
    private static string ourMessage_88;
    private static string ourMessage_89;
    private static string ourMessage_90;
    private static string ourMessage_91;
    private static string ourMessage_92;
    private static string ourMessage_93;
    private static string ourMessage_94;
    private static string ourMessage_95;
    private static string ourMessage_96;
    private static string ourMessage_97;
    private static string ourMessage_98;
    private static string ourMessage_99;
    private static string ourMessage_100;
    private static string ourMessage_101;
    private static string ourMessage_102;
    private static string ourMessage_103;
    private static string ourMessage_104;
    private static string ourMessage_105;
    private static string ourMessage_106;
    private static string ourMessage_107;
    private static string ourMessage_108;
    private static string ourMessage_109;
    private static string ourMessage_110;
    private static string ourMessage_111;
    private static string ourMessage_112;
    private static string ourMessage_113;
    private static string ourMessage_114;
    private static string ourMessage_115;
    private static string ourMessage_116;
    private static string ourMessage_117;
    private static string ourMessage_118;
    private static string ourMessage_119;
    private static string ourMessage_120;
    private static string ourMessage_121;
    private static string ourMessage_122;
    private static string ourMessage_123;
    private static string ourMessage_124;
    private static string ourMessage_125;
    private static string ourMessage_126;
    private static string ourMessage_127;
    private static string ourMessage_128;
    private static string ourMessage_129;
    private static string ourMessage_130;
    private static string ourMessage_131;
    private static string ourMessage_132;
    private static string ourMessage_133;
    private static string ourMessage_134;
    private static string ourMessage_135;
    private static string ourMessage_136;
    private static string ourMessage_137;
    private static string ourMessage_138;
    private static string ourMessage_139;
    private static string ourMessage_140;
    private static string ourMessage_141;
    private static string ourMessage_142;
    private static string ourMessage_143;
    private static string ourMessage_144;
    private static string ourMessage_145;
    private static string ourMessage_146;
    private static string ourMessage_147;
    private static string ourMessage_148;
    private static string ourMessage_149;
    private static string ourMessage_150;
    private static string ourMessage_151;
    private static string ourMessage_152;
    private static string ourMessage_153;
    private static string ourMessage_154;
    private static string ourMessage_155;
    private static string ourMessage_156;
    private static string ourMessage_157;
    private static string ourMessage_158;
    private static string ourMessage_159;
    private static string ourMessage_160;
    private static string ourMessage_161;
    private static string ourMessage_162;
    private static string ourMessage_163;
    private static string ourMessage_164;
    private static string ourMessage_165;
    private static string ourMessage_166;
    private static string ourMessage_167;
    private static string ourMessage_168;
    private static string ourMessage_169;
    private static string ourMessage_170;
    private static string ourMessage_171;
    private static string ourMessage_172;
    private static string ourMessage_173;
    private static string ourMessage_174;
    private static string ourMessage_175;
    private static string ourMessage_176;
    private static string ourMessage_177;
    private static string ourMessage_178;
    private static string ourMessage_179;
    private static string ourMessage_180;
    private static string ourMessage_181;
    private static string ourMessage_182;
    private static string ourMessage_183;
    private static string ourMessage_184;
    private static string ourMessage_185;
    private static string ourMessage_186;
    private static string ourMessage_187;
    private static string ourMessage_188;
    private static string ourMessage_189;
    private static string ourMessage_190;
    private static string ourMessage_191;
    private static string ourMessage_192;
    private static string ourMessage_193;
    private static string ourMessage_194;
    private static string ourMessage_195;
    private static string ourMessage_196;
    private static string ourMessage_197;
    private static string ourMessage_198;
    private static string ourMessage_199;
    private static string ourMessage_200;
    private static string ourMessage_201;
    private static string ourMessage_202;
    private static string ourMessage_203;
    private static string ourMessage_204;
    private static string ourMessage_205;
    private static string ourMessage_206;
    private static string ourMessage_207;
    private static string ourMessage_208;
    private static string ourMessage_209;
    private static string ourMessage_210;
    private static string ourMessage_211;
    private static string ourMessage_212;
    private static string ourMessage_213;
    private static string ourMessage_214;
    private static string ourMessage_215;
    private static string ourMessage_216;
    private static string ourMessage_217;
    private static string ourMessage_218;
    private static string ourMessage_219;
    private static string ourMessage_220;
    private static string ourMessage_221;
    private static string ourMessage_222;
    private static string ourMessage_223;
    private static string ourMessage_224;
    private static string ourMessage_225;
    private static string ourMessage_226;
    private static string ourMessage_227;
    private static string ourMessage_228;
    private static string ourMessage_229;
    private static string ourMessage_230;
    private static string ourMessage_231;
    private static string ourMessage_232;
    private static string ourMessage_233;
    private static string ourMessage_234;
    private static string ourMessage_235;
    private static string ourMessage_236;
    private static string ourMessage_237;
    private static string ourMessage_238;
    private static string ourMessage_239;
    private static string ourMessage_240;
    private static string ourMessage_241;
    private static string ourMessage_242;
    private static string ourMessage_243;
    private static string ourMessage_244;
    private static string ourMessage_245;
    private static string ourMessage_246;
    private static string ourMessage_247;
    private static string ourMessage_248;
    private static string ourMessage_249;
    private static string ourMessage_250;
    private static string ourMessage_251;
    private static string ourMessage_252;
    private static string ourMessage_253;
    private static string ourMessage_254;
    private static string ourMessage_255;
    private static string ourMessage_256;
    private static string ourMessage_257;
    private static string ourMessage_258;
    private static string ourMessage_259;
    private static string ourMessage_260;
    private static string ourMessage_261;
    private static string ourMessage_262;
    private static string ourMessage_263;
    private static string ourMessage_264;
    private static string ourMessage_265;
    private static string ourMessage_266;
    private static string ourMessage_267;
    private static string ourMessage_268;
    private static string ourMessage_269;
    private static string ourMessage_270;
    private static string ourMessage_271;
    private static string ourMessage_272;
    private static string ourMessage_273;
    private static string ourMessage_274;
    private static string ourMessage_275;
    private static string ourMessage_276;
    private static string ourMessage_277;
    private static string ourMessage_278;
    private static string ourMessage_279;
    private static string ourMessage_280;
    private static string ourMessage_281;
    private static string ourMessage_282;
    private static string ourMessage_283;
    private static string ourMessage_284;
    private static string ourMessage_285;
    private static string ourMessage_286;
    private static string ourMessage_287;
    private static string ourMessage_288;
    private static string ourMessage_289;
    private static string ourMessage_290;
    private static string ourMessage_291;
    private static string ourMessage_292;
    private static string ourMessage_293;
    private static string ourMessage_294;
    private static string ourMessage_295;
    private static string ourMessage_296;
    private static string ourMessage_297;
    private static string ourMessage_298;
    private static string ourMessage_299;
    private static string ourMessage_300;
    private static string ourMessage_301;
    private static string ourMessage_302;
    private static string ourMessage_303;
    private static string ourMessage_304;
    private static string ourMessage_305;
    private static string ourMessage_306;
    private static string ourMessage_307;
    private static string ourMessage_308;
    private static string ourMessage_309;
    private static string ourMessage_310;
    private static string ourMessage_311;
    private static string ourMessage_312;
    public static string GetErrorMessage0();
    public static string GetErrorMessage1();
    public static string GetErrorMessage2();
    public static string GetErrorMessage3();
    public static string GetErrorMessage4();
    public static string GetErrorMessage5();
    public static string GetErrorMessage6();
    public static string GetErrorMessage7();
    public static string GetErrorMessage8();
    public static string GetErrorMessage9();
    public static string GetErrorMessage10();
    public static string GetErrorMessage11();
    public static string GetErrorMessage12();
    public static string GetErrorMessage13();
    public static string GetErrorMessage14();
    public static string GetErrorMessage15();
    public static string GetErrorMessage16();
    public static string GetErrorMessage17();
    public static string GetErrorMessage18();
    public static string GetErrorMessage19();
    public static string GetErrorMessage20();
    public static string GetErrorMessage21();
    public static string GetErrorMessage22();
    public static string GetErrorMessage23();
    public static string GetErrorMessage24();
    public static string GetErrorMessage25();
    public static string GetErrorMessage26();
    public static string GetErrorMessage27();
    public static string GetErrorMessage28();
    public static string GetErrorMessage29();
    public static string GetErrorMessage30();
    public static string GetErrorMessage31();
    public static string GetErrorMessage32();
    public static string GetErrorMessage33();
    public static string GetErrorMessage34();
    public static string GetErrorMessage35();
    public static string GetErrorMessage36();
    public static string GetErrorMessage37();
    public static string GetErrorMessage38();
    public static string GetErrorMessage39();
    public static string GetErrorMessage40();
    public static string GetErrorMessage41();
    public static string GetErrorMessage42();
    public static string GetErrorMessage43();
    public static string GetErrorMessage44();
    public static string GetErrorMessage45();
    public static string GetErrorMessage46();
    public static string GetErrorMessage47();
    public static string GetErrorMessage48();
    public static string GetErrorMessage49();
    public static string GetErrorMessage50();
    public static string GetErrorMessage51();
    public static string GetErrorMessage52();
    public static string GetErrorMessage53();
    public static string GetErrorMessage54();
    public static string GetErrorMessage55();
    public static string GetErrorMessage56();
    public static string GetErrorMessage57();
    public static string GetErrorMessage58();
    public static string GetErrorMessage59();
    public static string GetErrorMessage60();
    public static string GetErrorMessage61();
    public static string GetErrorMessage62();
    public static string GetErrorMessage63();
    public static string GetErrorMessage64();
    public static string GetErrorMessage65();
    public static string GetErrorMessage66();
    public static string GetErrorMessage67();
    public static string GetErrorMessage68();
    public static string GetErrorMessage69();
    public static string GetErrorMessage70();
    public static string GetErrorMessage71();
    public static string GetErrorMessage72();
    public static string GetErrorMessage73();
    public static string GetErrorMessage74();
    public static string GetErrorMessage75();
    public static string GetErrorMessage76();
    public static string GetErrorMessage77();
    public static string GetErrorMessage78();
    public static string GetErrorMessage79();
    public static string GetErrorMessage80();
    public static string GetErrorMessage81();
    public static string GetErrorMessage82();
    public static string GetErrorMessage83();
    public static string GetErrorMessage84();
    public static string GetErrorMessage85();
    public static string GetErrorMessage86();
    public static string GetErrorMessage87();
    public static string GetErrorMessage88();
    public static string GetErrorMessage89();
    public static string GetErrorMessage90();
    public static string GetErrorMessage91();
    public static string GetErrorMessage92();
    public static string GetErrorMessage93();
    public static string GetErrorMessage94();
    public static string GetErrorMessage95();
    public static string GetErrorMessage96();
    public static string GetErrorMessage97();
    public static string GetErrorMessage98();
    public static string GetErrorMessage99();
    public static string GetErrorMessage100();
    public static string GetErrorMessage101();
    public static string GetErrorMessage102();
    public static string GetErrorMessage103();
    public static string GetErrorMessage104();
    public static string GetErrorMessage105();
    public static string GetErrorMessage106();
    public static string GetErrorMessage107();
    public static string GetErrorMessage108();
    public static string GetErrorMessage109();
    public static string GetErrorMessage110();
    public static string GetErrorMessage111();
    public static string GetErrorMessage112();
    public static string GetErrorMessage113();
    public static string GetErrorMessage114();
    public static string GetErrorMessage115();
    public static string GetErrorMessage116();
    public static string GetErrorMessage117();
    public static string GetErrorMessage118();
    public static string GetErrorMessage119();
    public static string GetErrorMessage120();
    public static string GetErrorMessage121();
    public static string GetErrorMessage122();
    public static string GetErrorMessage123();
    public static string GetErrorMessage124();
    public static string GetErrorMessage125();
    public static string GetErrorMessage126();
    public static string GetErrorMessage127();
    public static string GetErrorMessage128();
    public static string GetErrorMessage129();
    public static string GetErrorMessage130();
    public static string GetErrorMessage131();
    public static string GetErrorMessage132();
    public static string GetErrorMessage133();
    public static string GetErrorMessage134();
    public static string GetErrorMessage135();
    public static string GetErrorMessage136();
    public static string GetErrorMessage137();
    public static string GetErrorMessage138();
    public static string GetErrorMessage139();
    public static string GetErrorMessage140();
    public static string GetErrorMessage141();
    public static string GetErrorMessage142();
    public static string GetErrorMessage143();
    public static string GetErrorMessage144();
    public static string GetErrorMessage145();
    public static string GetErrorMessage146();
    public static string GetErrorMessage147();
    public static string GetErrorMessage148();
    public static string GetErrorMessage149();
    public static string GetErrorMessage150();
    public static string GetErrorMessage151();
    public static string GetErrorMessage152();
    public static string GetErrorMessage153();
    public static string GetErrorMessage154();
    public static string GetErrorMessage155();
    public static string GetErrorMessage156();
    public static string GetErrorMessage157();
    public static string GetErrorMessage158();
    public static string GetErrorMessage159();
    public static string GetErrorMessage160();
    public static string GetErrorMessage161();
    public static string GetErrorMessage162();
    public static string GetErrorMessage163();
    public static string GetErrorMessage164();
    public static string GetErrorMessage165();
    public static string GetErrorMessage166();
    public static string GetErrorMessage167();
    public static string GetErrorMessage168();
    public static string GetErrorMessage169();
    public static string GetErrorMessage170();
    public static string GetErrorMessage171();
    public static string GetErrorMessage172();
    public static string GetErrorMessage173();
    public static string GetErrorMessage174();
    public static string GetErrorMessage175();
    public static string GetErrorMessage176();
    public static string GetErrorMessage177();
    public static string GetErrorMessage178();
    public static string GetErrorMessage179();
    public static string GetErrorMessage180();
    public static string GetErrorMessage181();
    public static string GetErrorMessage182();
    public static string GetErrorMessage183();
    public static string GetErrorMessage184();
    public static string GetErrorMessage185();
    public static string GetErrorMessage186();
    public static string GetErrorMessage187();
    public static string GetErrorMessage188();
    public static string GetErrorMessage189();
    public static string GetErrorMessage190();
    public static string GetErrorMessage191();
    public static string GetErrorMessage192();
    public static string GetErrorMessage193();
    public static string GetErrorMessage194();
    public static string GetErrorMessage195();
    public static string GetErrorMessage196();
    public static string GetErrorMessage197();
    public static string GetErrorMessage198();
    public static string GetErrorMessage199();
    public static string GetErrorMessage200();
    public static string GetErrorMessage201();
    public static string GetErrorMessage202();
    public static string GetErrorMessage203();
    public static string GetErrorMessage204();
    public static string GetErrorMessage205();
    public static string GetErrorMessage206();
    public static string GetErrorMessage207();
    public static string GetErrorMessage208();
    public static string GetErrorMessage209();
    public static string GetErrorMessage210();
    public static string GetErrorMessage211();
    public static string GetErrorMessage212();
    public static string GetErrorMessage213();
    public static string GetErrorMessage214();
    public static string GetErrorMessage215();
    public static string GetErrorMessage216();
    public static string GetErrorMessage217();
    public static string GetErrorMessage218();
    public static string GetErrorMessage219();
    public static string GetErrorMessage220();
    public static string GetErrorMessage221();
    public static string GetErrorMessage222();
    public static string GetErrorMessage223();
    public static string GetErrorMessage224();
    public static string GetErrorMessage225();
    public static string GetErrorMessage226();
    public static string GetErrorMessage227();
    public static string GetErrorMessage228();
    public static string GetErrorMessage229();
    public static string GetErrorMessage230();
    public static string GetErrorMessage231();
    public static string GetErrorMessage232();
    public static string GetErrorMessage233();
    public static string GetErrorMessage234();
    public static string GetErrorMessage235();
    public static string GetErrorMessage236();
    public static string GetErrorMessage237();
    public static string GetErrorMessage238();
    public static string GetErrorMessage239();
    public static string GetErrorMessage240();
    public static string GetErrorMessage241();
    public static string GetErrorMessage242();
    public static string GetErrorMessage243();
    public static string GetErrorMessage244();
    public static string GetErrorMessage245();
    public static string GetErrorMessage246();
    public static string GetErrorMessage247();
    public static string GetErrorMessage248();
    public static string GetErrorMessage249();
    public static string GetErrorMessage250();
    public static string GetErrorMessage251();
    public static string GetErrorMessage252();
    public static string GetErrorMessage253();
    public static string GetErrorMessage254();
    public static string GetErrorMessage255();
    public static string GetErrorMessage256();
    public static string GetErrorMessage257();
    public static string GetErrorMessage258();
    public static string GetErrorMessage259();
    public static string GetErrorMessage260();
    public static string GetErrorMessage261();
    public static string GetErrorMessage262();
    public static string GetErrorMessage263();
    public static string GetErrorMessage264();
    public static string GetErrorMessage265();
    public static string GetErrorMessage266();
    public static string GetErrorMessage267();
    public static string GetErrorMessage268();
    public static string GetErrorMessage269();
    public static string GetErrorMessage270();
    public static string GetErrorMessage271();
    public static string GetErrorMessage272();
    public static string GetErrorMessage273();
    public static string GetErrorMessage274();
    public static string GetErrorMessage275();
    public static string GetErrorMessage276();
    public static string GetErrorMessage277();
    public static string GetErrorMessage278();
    public static string GetErrorMessage279();
    public static string GetErrorMessage280();
    public static string GetErrorMessage281();
    public static string GetErrorMessage282();
    public static string GetErrorMessage283();
    public static string GetErrorMessage284();
    public static string GetErrorMessage285();
    public static string GetErrorMessage286();
    public static string GetErrorMessage287();
    public static string GetErrorMessage288();
    public static string GetErrorMessage289();
    public static string GetErrorMessage290();
    public static string GetErrorMessage291();
    public static string GetErrorMessage292();
    public static string GetErrorMessage293();
    public static string GetErrorMessage294();
    public static string GetErrorMessage295();
    public static string GetErrorMessage296();
    public static string GetErrorMessage297();
    public static string GetErrorMessage298();
    public static string GetErrorMessage299();
    public static string GetErrorMessage300();
    public static string GetErrorMessage301();
    public static string GetErrorMessage302();
    public static string GetErrorMessage303();
    public static string GetErrorMessage304();
    public static string GetErrorMessage305();
    public static string GetErrorMessage306();
    public static string GetErrorMessage307();
    public static string GetErrorMessage308();
    public static string GetErrorMessage309();
    public static string GetErrorMessage310();
    public static string GetErrorMessage311();
    public static string GetErrorMessage312();
}
internal abstract class JetBrains.ReSharper.Psi.IL.Gen.ILParserGenerated : GeneratedParserBase`1<ILexer> {
    protected ParsingContext myCurrentContext;
    protected bool IsInFollow(TokenNodeType tokenType);
    protected virtual TreeElement Match(TokenNodeType tokenType);
    protected void Skip(CompositeElement parent);
    protected virtual void SkipErrorToken(CompositeElement parent);
    public virtual TreeElement ParseArrayBound();
    protected virtual CompositeElement HandleErrorInArrayBound(CompositeElement result, SyntaxError error);
    public abstract virtual TreeElement ParseArrayType();
    protected virtual TreeElement ParseArrayTypeInternal();
    protected virtual CompositeElement HandleErrorInArrayType(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseBlob();
    protected virtual CompositeElement HandleErrorInBlob(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseCallConvention();
    protected virtual CompositeElement HandleErrorInCallConvention(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseCallConventionKind();
    protected virtual CompositeElement HandleErrorInCallConventionKind(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseCatchClause();
    protected virtual CompositeElement HandleErrorInCatchClause(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClassBody();
    protected virtual CompositeElement HandleErrorInClassBody(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClassExtendsClause();
    protected virtual CompositeElement HandleErrorInClassExtendsClause(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClassHeader();
    protected virtual CompositeElement HandleErrorInClassHeader(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClassImplementsClause();
    protected virtual CompositeElement HandleErrorInClassImplementsClause(CompositeElement result, SyntaxError error);
    public virtual void ParseClassModifier(CompositeElement result);
    protected virtual CompositeElement HandleErrorInClassModifier(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClassModifierList();
    protected virtual CompositeElement HandleErrorInClassModifierList(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClassName();
    protected virtual CompositeElement HandleErrorInClassName(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseCodeLabel();
    protected virtual CompositeElement HandleErrorInCodeLabel(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseCompControl();
    protected virtual CompositeElement HandleErrorInCompControl(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseCompQstring();
    protected virtual CompositeElement HandleErrorInCompQstring(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseCompositeVariantType();
    protected virtual CompositeElement HandleErrorInCompositeVariantType(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseConstructorName();
    protected virtual CompositeElement HandleErrorInConstructorName(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseCustomAttribute();
    protected virtual CompositeElement HandleErrorInCustomAttribute(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseCustomModifierType();
    protected virtual CompositeElement HandleErrorInCustomModifierType(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseCustomType();
    protected virtual CompositeElement HandleErrorInCustomType(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseDataDeclarationItem();
    protected virtual CompositeElement HandleErrorInDataDeclarationItem(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseDataLabel();
    protected virtual CompositeElement HandleErrorInDataLabel(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseEmitbyte();
    protected virtual CompositeElement HandleErrorInEmitbyte(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseEntrypoint();
    protected virtual CompositeElement HandleErrorInEntrypoint(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseEventBody();
    protected virtual CompositeElement HandleErrorInEventBody(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseEventHeader();
    protected virtual CompositeElement HandleErrorInEventHeader(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseExceptionType();
    protected virtual CompositeElement HandleErrorInExceptionType(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseExport();
    protected virtual CompositeElement HandleErrorInExport(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseExternSource();
    protected virtual CompositeElement HandleErrorInExternSource(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseFaultClause();
    protected virtual CompositeElement HandleErrorInFaultClause(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseFieldByteOffset();
    protected virtual CompositeElement HandleErrorInFieldByteOffset(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseFieldInit();
    protected virtual CompositeElement HandleErrorInFieldInit(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseFieldReferenceName();
    protected virtual CompositeElement HandleErrorInFieldReferenceName(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseFilterClause();
    protected virtual CompositeElement HandleErrorInFilterClause(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseFinallyClause();
    protected virtual CompositeElement HandleErrorInFinallyClause(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseFromToBlock();
    protected virtual CompositeElement HandleErrorInFromToBlock(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseGenArity();
    protected virtual CompositeElement HandleErrorInGenArity(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseGenericArgumentList();
    protected virtual CompositeElement HandleErrorInGenericArgumentList(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseGenericParameter();
    public virtual void ParseGenericParameterAttribute(CompositeElement result);
    protected virtual CompositeElement HandleErrorInGenericParameterAttribute(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseGenericParameterAttributeList();
    protected virtual CompositeElement HandleErrorInGenericParameterAttributeList(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseGenericParameterConstraintList();
    protected virtual CompositeElement HandleErrorInGenericParameterConstraintList(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseGenericParameterDeclaration();
    protected virtual CompositeElement HandleErrorInGenericParameterDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseGenericParameterDeclarationList();
    protected virtual CompositeElement HandleErrorInGenericParameterDeclarationList(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseGenericParameterPointer();
    protected virtual CompositeElement HandleErrorInGenericParameterPointer(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseGenericScalarType();
    protected virtual CompositeElement HandleErrorInGenericScalarType(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseGenericType();
    protected virtual CompositeElement HandleErrorInGenericType(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseHandlerBlock();
    protected virtual CompositeElement HandleErrorInHandlerBlock(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILAccessorDeclaration();
    protected virtual CompositeElement HandleErrorInILAccessorDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILAddonDeclaration();
    protected virtual CompositeElement HandleErrorInILAddonDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILAliasDeclaration();
    protected virtual CompositeElement HandleErrorInILAliasDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILAssemblyAutodetection();
    protected virtual CompositeElement HandleErrorInILAssemblyAutodetection(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILAssemblyCulture();
    protected virtual CompositeElement HandleErrorInILAssemblyCulture(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILAssemblyDeclaration(TreeElement dotAssemblyKeyword);
    protected virtual CompositeElement HandleErrorInILAssemblyDeclaration(CompositeElement result, SyntaxError error);
    public abstract virtual void ParseILAssemblyDeclarationAux(CompositeElement result);
    protected virtual void ParseILAssemblyDeclarationAuxInternal(CompositeElement result);
    public virtual TreeElement ParseILAssemblyHash();
    protected virtual CompositeElement HandleErrorInILAssemblyHash(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILAssemblyHashAlgorithm();
    protected virtual CompositeElement HandleErrorInILAssemblyHashAlgorithm(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILAssemblyProperty();
    protected virtual CompositeElement HandleErrorInILAssemblyProperty(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILAssemblyPublicKey();
    protected virtual CompositeElement HandleErrorInILAssemblyPublicKey(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILAssemblyPublicKeyToken();
    protected virtual CompositeElement HandleErrorInILAssemblyPublicKeyToken(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILAssemblyVersion();
    protected virtual CompositeElement HandleErrorInILAssemblyVersion(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILClassDeclaration(TreeElement dotClassKeyword);
    protected virtual CompositeElement HandleErrorInILClassDeclaration(CompositeElement result, SyntaxError error);
    public abstract virtual void ParseILClassDeclarationAux(CompositeElement result);
    protected virtual void ParseILClassDeclarationAuxInternal(CompositeElement result);
    public abstract virtual void ParseILClassParamXSpecificationAux(CompositeElement result);
    protected virtual void ParseILClassParamXSpecificationAuxInternal(CompositeElement result);
    public virtual TreeElement ParseILCorFlags();
    protected virtual CompositeElement HandleErrorInILCorFlags(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILDataDeclaration();
    protected virtual CompositeElement HandleErrorInILDataDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILDeclaration();
    public virtual TreeElement ParseILEventDeclaration();
    protected virtual CompositeElement HandleErrorInILEventDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILEventMember();
    public virtual TreeElement ParseILExternAssemblyDeclaration(TreeElement dotAssemblyKeyword);
    protected virtual CompositeElement HandleErrorInILExternAssemblyDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILExternAssemblyProperty();
    protected virtual CompositeElement HandleErrorInILExternAssemblyProperty(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILExternClassAssemblyProperty();
    protected virtual CompositeElement HandleErrorInILExternClassAssemblyProperty(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILExternClassClassProperty();
    protected virtual CompositeElement HandleErrorInILExternClassClassProperty(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILExternClassDeclaration(TreeElement dotClassKeyword, TreeElement externKeyword);
    protected virtual CompositeElement HandleErrorInILExternClassDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILExternClassFileProperty();
    protected virtual CompositeElement HandleErrorInILExternClassFileProperty(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILExternClassProperty();
    public virtual TreeElement ParseILExternModuleDeclaration(TreeElement dotModuleKeyword);
    protected virtual CompositeElement HandleErrorInILExternModuleDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILFieldDeclaration();
    protected virtual CompositeElement HandleErrorInILFieldDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILFile();
    public virtual TreeElement ParseILFileAlignmentDeclaration(TreeElement dotFileKeyword);
    protected virtual CompositeElement HandleErrorInILFileAlignmentDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILFileDeclaration(TreeElement dotFileKeyword);
    protected virtual CompositeElement HandleErrorInILFileDeclaration(CompositeElement result, SyntaxError error);
    public abstract virtual void ParseILFileDeclarationAux(CompositeElement result);
    protected virtual void ParseILFileDeclarationAuxInternal(CompositeElement result);
    public virtual TreeElement ParseILFireDeclaration();
    protected virtual CompositeElement HandleErrorInILFireDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILForwardClassDeclaration(TreeElement dotClassKeyword, TreeElement externKeyword);
    protected virtual CompositeElement HandleErrorInILForwardClassDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILGetDeclaration();
    protected virtual CompositeElement HandleErrorInILGetDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILImageBaseDeclaration();
    protected virtual CompositeElement HandleErrorInILImageBaseDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILInstanceLayoutDeclaration();
    protected virtual CompositeElement HandleErrorInILInstanceLayoutDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILInterfaceimplSpecification();
    protected virtual CompositeElement HandleErrorInILInterfaceimplSpecification(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILLabel();
    public virtual TreeElement ParseILLanguageDeclaration();
    protected virtual CompositeElement HandleErrorInILLanguageDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILManifestAssemblyResource();
    protected virtual CompositeElement HandleErrorInILManifestAssemblyResource(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILManifestFileResource();
    protected virtual CompositeElement HandleErrorInILManifestFileResource(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILManifestResource();
    protected virtual CompositeElement HandleErrorInILManifestResource(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILManifestResourceDeclaration();
    protected virtual CompositeElement HandleErrorInILManifestResourceDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILMethodDeclaration();
    protected virtual CompositeElement HandleErrorInILMethodDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILMethodOverridingDeclarationFull(TreeElement dotOverrideKeyword);
    protected virtual CompositeElement HandleErrorInILMethodOverridingDeclarationFull(CompositeElement result, SyntaxError error);
    public abstract virtual void ParseILMethodOverridingDeclarationInClassAux(CompositeElement result);
    protected virtual void ParseILMethodOverridingDeclarationInClassAuxInternal(CompositeElement result);
    public virtual TreeElement ParseILMethodOverridingDeclarationInClassFull(TreeElement dotOverrideKeyword);
    protected virtual CompositeElement HandleErrorInILMethodOverridingDeclarationInClassFull(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILMethodOverridingDeclarationInClassShort(TreeElement dotOverrideKeyword);
    protected virtual CompositeElement HandleErrorInILMethodOverridingDeclarationInClassShort(CompositeElement result, SyntaxError error);
    public abstract virtual void ParseILMethodOverridingDeclarationInMethodAux(CompositeElement result);
    protected virtual void ParseILMethodOverridingDeclarationInMethodAuxInternal(CompositeElement result);
    public virtual TreeElement ParseILMethodOverridingDeclarationShort(TreeElement dotOverrideKeyword);
    protected virtual CompositeElement HandleErrorInILMethodOverridingDeclarationShort(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILMethodParamSpecification(TreeElement dotParamKeyword);
    protected virtual CompositeElement HandleErrorInILMethodParamSpecification(CompositeElement result, SyntaxError error);
    public abstract virtual void ParseILMethodParamXSpecificationAux(CompositeElement result);
    protected virtual void ParseILMethodParamXSpecificationAuxInternal(CompositeElement result);
    public virtual TreeElement ParseILModuleDeclaration(TreeElement dotModuleKeyword);
    protected virtual CompositeElement HandleErrorInILModuleDeclaration(CompositeElement result, SyntaxError error);
    public abstract virtual void ParseILModuleDeclarationAux(CompositeElement result);
    protected virtual void ParseILModuleDeclarationAuxInternal(CompositeElement result);
    public virtual TreeElement ParseILMscorlibDeclaration();
    protected virtual CompositeElement HandleErrorInILMscorlibDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILNamespaceBody();
    protected virtual CompositeElement HandleErrorInILNamespaceBody(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILNamespaceDeclaration();
    protected virtual CompositeElement HandleErrorInILNamespaceDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILOtherDeclaration();
    protected virtual CompositeElement HandleErrorInILOtherDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILParamTypeConstraintSpecification(TreeElement dotParamKeyword);
    protected virtual CompositeElement HandleErrorInILParamTypeConstraintSpecification(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILParamTypeSpecification(TreeElement dotParamKeyword);
    protected virtual CompositeElement HandleErrorInILParamTypeSpecification(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILPropertyDeclaration();
    protected virtual CompositeElement HandleErrorInILPropertyDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILPropertyMember();
    public virtual TreeElement ParseILRemoveonDeclaration();
    protected virtual CompositeElement HandleErrorInILRemoveonDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILSetDeclaration();
    protected virtual CompositeElement HandleErrorInILSetDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILStackReserveDeclaration();
    protected virtual CompositeElement HandleErrorInILStackReserveDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILSubsystem();
    protected virtual CompositeElement HandleErrorInILSubsystem(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILTypeMemberDeclaration();
    public virtual TreeElement ParseILTypelistDeclaration();
    protected virtual CompositeElement HandleErrorInILTypelistDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseILVtfixupDeclaration();
    protected virtual CompositeElement HandleErrorInILVtfixupDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseIdentifier();
    protected virtual CompositeElement HandleErrorInIdentifier(CompositeElement result, SyntaxError error);
    public abstract virtual TreeElement ParseIdentifierWithOwnerQualification();
    protected virtual TreeElement ParseIdentifierWithOwnerQualificationInternal();
    protected virtual CompositeElement HandleErrorInIdentifierWithOwnerQualification(CompositeElement result, SyntaxError error);
    public abstract virtual TreeElement ParseIlQualifiedName();
    protected virtual TreeElement ParseIlQualifiedNameInternal();
    public abstract virtual TreeElement ParseIlReferenceOwner();
    protected virtual TreeElement ParseIlReferenceOwnerInternal();
    public virtual void ParseImplementationAttribute(CompositeElement result);
    protected virtual CompositeElement HandleErrorInImplementationAttribute(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseImplementationAttributeList();
    protected virtual CompositeElement HandleErrorInImplementationAttributeList(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseImplementationMethodDeclarationShort();
    protected virtual CompositeElement HandleErrorInImplementationMethodDeclarationShort(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseInstanceConstructorName();
    protected virtual CompositeElement HandleErrorInInstanceConstructorName(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseInstanceConstructorReferenceName();
    protected virtual CompositeElement HandleErrorInInstanceConstructorReferenceName(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseInstruction();
    protected virtual CompositeElement HandleErrorInInstruction(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseInstructionBranchTarget();
    protected virtual CompositeElement HandleErrorInInstructionBranchTarget(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseInstructionField();
    protected virtual CompositeElement HandleErrorInInstructionField(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseInstructionFieldParameter();
    protected virtual CompositeElement HandleErrorInInstructionFieldParameter(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseInstructionI();
    protected virtual CompositeElement HandleErrorInInstructionI(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseInstructionI8();
    protected virtual CompositeElement HandleErrorInInstructionI8(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseInstructionMethod();
    protected virtual CompositeElement HandleErrorInInstructionMethod(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseInstructionMethodParameter();
    protected virtual CompositeElement HandleErrorInInstructionMethodParameter(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseInstructionNone();
    protected virtual CompositeElement HandleErrorInInstructionNone(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseInstructionR();
    protected virtual CompositeElement HandleErrorInInstructionR(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseInstructionSig();
    protected virtual CompositeElement HandleErrorInInstructionSig(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseInstructionString();
    protected virtual CompositeElement HandleErrorInInstructionString(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseInstructionSwitch();
    protected virtual CompositeElement HandleErrorInInstructionSwitch(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseInstructionTok();
    protected virtual CompositeElement HandleErrorInInstructionTok(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseInstructionType();
    protected virtual CompositeElement HandleErrorInInstructionType(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseInstructionVar();
    protected virtual CompositeElement HandleErrorInInstructionVar(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseIntInitializer();
    protected virtual CompositeElement HandleErrorInIntInitializer(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseIntOrWildcard();
    protected virtual CompositeElement HandleErrorInIntOrWildcard(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseLocalVariable();
    protected virtual CompositeElement HandleErrorInLocalVariable(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseLocalVariablesDeclaration();
    protected virtual CompositeElement HandleErrorInLocalVariablesDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseManagedPointerType();
    protected virtual CompositeElement HandleErrorInManagedPointerType(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseMarshalSpec();
    protected virtual CompositeElement HandleErrorInMarshalSpec(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseMaxstack();
    protected virtual CompositeElement HandleErrorInMaxstack(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseMdtoken();
    protected virtual CompositeElement HandleErrorInMdtoken(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseMemberRef();
    protected virtual CompositeElement HandleErrorInMemberRef(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseMethodHeader();
    protected virtual CompositeElement HandleErrorInMethodHeader(CompositeElement result, SyntaxError error);
    public virtual void ParseMethodNameAux(CompositeElement result);
    protected virtual CompositeElement HandleErrorInMethodNameAux(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseMethodReferenceName();
    protected virtual CompositeElement HandleErrorInMethodReferenceName(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseMethodScalarType();
    protected virtual CompositeElement HandleErrorInMethodScalarType(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseMethodScopeBlock();
    protected virtual CompositeElement HandleErrorInMethodScopeBlock(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseNameValuePair();
    protected virtual CompositeElement HandleErrorInNameValuePair(CompositeElement result, SyntaxError error);
    public virtual void ParseNativeBoolType(CompositeElement result);
    public virtual void ParseNativeFloat32Type(CompositeElement result);
    public virtual void ParseNativeFloat64Type(CompositeElement result);
    public virtual void ParseNativeInt16Type(CompositeElement result, TreeElement unsigned);
    public virtual void ParseNativeInt32Type(CompositeElement result, TreeElement unsigned);
    public virtual void ParseNativeInt64Type(CompositeElement result, TreeElement unsigned);
    public virtual void ParseNativeInt8Type(CompositeElement result, TreeElement unsigned);
    public virtual void ParseNativeIntType(CompositeElement result, TreeElement unsigned);
    public virtual TreeElement ParseNativeScalarType();
    protected virtual CompositeElement HandleErrorInNativeScalarType(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseNativeType();
    protected virtual CompositeElement HandleErrorInNativeType(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseNativeTypeArraySpecification();
    protected virtual CompositeElement HandleErrorInNativeTypeArraySpecification(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseOpcode();
    protected virtual CompositeElement HandleErrorInOpcode(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseOwnerType();
    protected virtual CompositeElement HandleErrorInOwnerType(CompositeElement result, SyntaxError error);
    public virtual void ParsePInvokeAttribute(CompositeElement result);
    protected virtual CompositeElement HandleErrorInPInvokeAttribute(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParsePInvokeAttributeList();
    protected virtual CompositeElement HandleErrorInPInvokeAttributeList(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParsePInvokeSpecification();
    protected virtual CompositeElement HandleErrorInPInvokeSpecification(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseParameter();
    protected virtual CompositeElement HandleErrorInParameter(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseParameterAttribute();
    protected virtual CompositeElement HandleErrorInParameterAttribute(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseParameterAttributeList();
    protected virtual CompositeElement HandleErrorInParameterAttributeList(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParsePermissionDeclaration();
    protected virtual CompositeElement HandleErrorInPermissionDeclaration(CompositeElement result, SyntaxError error);
    public abstract virtual TreeElement ParsePermissionSetBody();
    protected virtual TreeElement ParsePermissionSetBodyInternal();
    protected virtual CompositeElement HandleErrorInPermissionSetBody(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParsePermissionSetDeclaration();
    protected virtual CompositeElement HandleErrorInPermissionSetDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParsePinnedType();
    protected virtual CompositeElement HandleErrorInPinnedType(CompositeElement result, SyntaxError error);
    public virtual void ParsePredefinedFieldAttribute(CompositeElement result);
    protected virtual CompositeElement HandleErrorInPredefinedFieldAttribute(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParsePredefinedFieldAttributeList();
    protected virtual CompositeElement HandleErrorInPredefinedFieldAttributeList(CompositeElement result, SyntaxError error);
    public virtual void ParsePredefinedMethodAttribute(CompositeElement result);
    protected virtual CompositeElement HandleErrorInPredefinedMethodAttribute(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParsePredefinedMethodAttributeList();
    protected virtual CompositeElement HandleErrorInPredefinedMethodAttributeList(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParsePredefinedScalarType();
    protected virtual CompositeElement HandleErrorInPredefinedScalarType(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParsePresentableName();
    public virtual TreeElement ParsePropertyBody();
    protected virtual CompositeElement HandleErrorInPropertyBody(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParsePropertyHeader();
    protected virtual CompositeElement HandleErrorInPropertyHeader(CompositeElement result, SyntaxError error);
    public abstract virtual TreeElement ParseQualifiedName();
    protected virtual TreeElement ParseQualifiedNameInternal();
    public abstract virtual TreeElement ParseReferenceName();
    protected virtual TreeElement ParseReferenceNameInternal();
    protected virtual CompositeElement HandleErrorInReferenceName(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseScalarType();
    protected virtual CompositeElement HandleErrorInScalarType(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseSehBlock();
    protected virtual CompositeElement HandleErrorInSehBlock(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseSehClause();
    protected virtual CompositeElement HandleErrorInSehClause(CompositeElement result, SyntaxError error);
    public virtual void ParseSequrityAction(CompositeElement result);
    protected virtual CompositeElement HandleErrorInSequrityAction(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseSequrityDeclaration();
    public virtual TreeElement ParseSignatureDef();
    protected virtual CompositeElement HandleErrorInSignatureDef(CompositeElement result, SyntaxError error);
    public virtual void ParseSpecialnameAttribute(CompositeElement result);
    protected virtual CompositeElement HandleErrorInSpecialnameAttribute(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseSpecialnameAttributeList();
    protected virtual CompositeElement HandleErrorInSpecialnameAttributeList(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseStaticConstructorName();
    protected virtual CompositeElement HandleErrorInStaticConstructorName(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseTargetLabel();
    protected virtual CompositeElement HandleErrorInTargetLabel(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseTargetLabelList();
    protected virtual CompositeElement HandleErrorInTargetLabelList(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseTryBlock();
    protected virtual CompositeElement HandleErrorInTryBlock(CompositeElement result, SyntaxError error);
    public abstract virtual TreeElement ParseTypeMemberReferenceName();
    protected virtual TreeElement ParseTypeMemberReferenceNameInternal();
    public abstract virtual TreeElement ParseTypeMemberUsage();
    protected virtual TreeElement ParseTypeMemberUsageInternal();
    public virtual TreeElement ParseTypeModifier();
    protected virtual CompositeElement HandleErrorInTypeModifier(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseTypeReference();
    protected virtual CompositeElement HandleErrorInTypeReference(CompositeElement result, SyntaxError error);
    public virtual void ParseTypeReferenceAux(CompositeElement result, TreeElement scope);
    protected virtual CompositeElement HandleErrorInTypeReferenceAux(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseTypeResolutionScope();
    protected virtual CompositeElement HandleErrorInTypeResolutionScope(CompositeElement result, SyntaxError error);
    public abstract virtual TreeElement ParseTypeSpec();
    protected virtual TreeElement ParseTypeSpecInternal();
    protected virtual CompositeElement HandleErrorInTypeSpec(CompositeElement result, SyntaxError error);
    public abstract virtual TreeElement ParseTypeSpecWithDoubleColon();
    protected virtual TreeElement ParseTypeSpecWithDoubleColonInternal();
    protected virtual CompositeElement HandleErrorInTypeSpecWithDoubleColon(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseTypeUsage();
    protected virtual CompositeElement HandleErrorInTypeUsage(CompositeElement result, SyntaxError error);
    public abstract virtual TreeElement ParseTypeWithReferenceBase();
    protected virtual TreeElement ParseTypeWithReferenceBaseInternal();
    public virtual void ParseUnmanagedCdeclConv(CompositeElement result, TreeElement unmanagedKeyword);
    public virtual void ParseUnmanagedFastCallConv(CompositeElement result, TreeElement unmanagedKeyword);
    public virtual TreeElement ParseUnmanagedPointerType();
    protected virtual CompositeElement HandleErrorInUnmanagedPointerType(CompositeElement result, SyntaxError error);
    public virtual void ParseUnmanagedStdCallConv(CompositeElement result, TreeElement unmanagedKeyword);
    public virtual void ParseUnmanagedThisCallConv(CompositeElement result, TreeElement unmanagedKeyword);
    public virtual TreeElement ParseUserScalarType();
    protected virtual CompositeElement HandleErrorInUserScalarType(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseVariantType();
    protected virtual CompositeElement HandleErrorInVariantType(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseVtentry();
    protected virtual CompositeElement HandleErrorInVtentry(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseVtfixupAttribute();
    protected virtual CompositeElement HandleErrorInVtfixupAttribute(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseVtfixupAttributeList();
    protected virtual CompositeElement HandleErrorInVtfixupAttributeList(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseZeroinit();
    protected virtual CompositeElement HandleErrorInZeroinit(CompositeElement result, SyntaxError error);
    protected abstract virtual TreeElement MatchHexByte();
    protected abstract virtual bool ExpectHexByte();
}
public static class JetBrains.ReSharper.Psi.IL.Gen.TokenBitsets : object {
    public static NodeTypeSet TokenBitset_0;
    public static NodeTypeSet TokenBitset_1;
    public static NodeTypeSet TokenBitset_2;
    public static NodeTypeSet TokenBitset_3;
    public static NodeTypeSet TokenBitset_4;
    public static NodeTypeSet TokenBitset_5;
    public static NodeTypeSet TokenBitset_6;
    public static NodeTypeSet TokenBitset_7;
    public static NodeTypeSet TokenBitset_8;
    public static NodeTypeSet TokenBitset_9;
    public static NodeTypeSet TokenBitset_10;
    public static NodeTypeSet TokenBitset_11;
    public static NodeTypeSet TokenBitset_12;
    public static NodeTypeSet TokenBitset_13;
    public static NodeTypeSet TokenBitset_14;
    public static NodeTypeSet TokenBitset_15;
    public static NodeTypeSet TokenBitset_16;
    public static NodeTypeSet TokenBitset_17;
    public static NodeTypeSet TokenBitset_18;
    public static NodeTypeSet TokenBitset_19;
    public static NodeTypeSet TokenBitset_20;
    public static NodeTypeSet TokenBitset_21;
    public static NodeTypeSet TokenBitset_22;
    public static NodeTypeSet TokenBitset_23;
    public static NodeTypeSet TokenBitset_24;
    public static NodeTypeSet TokenBitset_25;
    public static NodeTypeSet TokenBitset_26;
    public static NodeTypeSet TokenBitset_27;
    public static NodeTypeSet TokenBitset_28;
    public static NodeTypeSet TokenBitset_29;
    public static NodeTypeSet TokenBitset_30;
    public static NodeTypeSet TokenBitset_31;
    public static NodeTypeSet TokenBitset_32;
    public static NodeTypeSet TokenBitset_33;
    public static NodeTypeSet TokenBitset_34;
    public static NodeTypeSet TokenBitset_35;
    public static NodeTypeSet TokenBitset_36;
    public static NodeTypeSet TokenBitset_37;
    public static NodeTypeSet TokenBitset_38;
    public static NodeTypeSet TokenBitset_39;
    public static NodeTypeSet TokenBitset_40;
    public static NodeTypeSet TokenBitset_41;
    public static NodeTypeSet TokenBitset_42;
    public static NodeTypeSet TokenBitset_43;
    public static NodeTypeSet TokenBitset_44;
    public static NodeTypeSet TokenBitset_45;
    public static NodeTypeSet TokenBitset_46;
    public static NodeTypeSet TokenBitset_47;
    public static NodeTypeSet TokenBitset_48;
    public static NodeTypeSet TokenBitset_49;
    public static NodeTypeSet TokenBitset_50;
    public static NodeTypeSet TokenBitset_51;
    public static NodeTypeSet TokenBitset_52;
    public static NodeTypeSet TokenBitset_53;
    public static NodeTypeSet TokenBitset_54;
    public static NodeTypeSet TokenBitset_55;
    public static NodeTypeSet TokenBitset_56;
    public static NodeTypeSet TokenBitset_57;
    public static NodeTypeSet TokenBitset_58;
    public static NodeTypeSet TokenBitset_59;
    public static NodeTypeSet TokenBitset_60;
    public static NodeTypeSet TokenBitset_61;
    public static NodeTypeSet TokenBitset_62;
    public static NodeTypeSet TokenBitset_63;
    public static NodeTypeSet TokenBitset_64;
    public static NodeTypeSet TokenBitset_65;
    public static NodeTypeSet TokenBitset_66;
    public static NodeTypeSet TokenBitset_67;
    public static NodeTypeSet TokenBitset_68;
    public static NodeTypeSet TokenBitset_69;
    public static NodeTypeSet TokenBitset_70;
    public static NodeTypeSet TokenBitset_71;
    public static NodeTypeSet TokenBitset_72;
    public static NodeTypeSet TokenBitset_73;
    public static NodeTypeSet TokenBitset_74;
    public static NodeTypeSet TokenBitset_75;
    public static NodeTypeSet TokenBitset_76;
    public static NodeTypeSet TokenBitset_77;
    public static NodeTypeSet TokenBitset_78;
    public static NodeTypeSet TokenBitset_79;
    public static NodeTypeSet TokenBitset_80;
    public static NodeTypeSet TokenBitset_81;
    public static NodeTypeSet TokenBitset_82;
    public static NodeTypeSet TokenBitset_83;
    public static NodeTypeSet TokenBitset_84;
    public static NodeTypeSet TokenBitset_85;
    public static NodeTypeSet TokenBitset_86;
    public static NodeTypeSet TokenBitset_87;
    public static NodeTypeSet TokenBitset_88;
    public static NodeTypeSet TokenBitset_89;
    public static NodeTypeSet TokenBitset_90;
    public static NodeTypeSet TokenBitset_91;
    public static NodeTypeSet TokenBitset_92;
    public static NodeTypeSet TokenBitset_93;
    public static NodeTypeSet TokenBitset_94;
    public static NodeTypeSet TokenBitset_95;
    public static NodeTypeSet TokenBitset_96;
    public static NodeTypeSet TokenBitset_97;
    public static NodeTypeSet TokenBitset_98;
    public static NodeTypeSet TokenBitset_99;
    public static NodeTypeSet TokenBitset_100;
    public static NodeTypeSet TokenBitset_101;
    public static NodeTypeSet TokenBitset_102;
    public static NodeTypeSet TokenBitset_103;
    public static NodeTypeSet TokenBitset_104;
    public static NodeTypeSet TokenBitset_105;
    public static NodeTypeSet TokenBitset_106;
    public static NodeTypeSet TokenBitset_107;
    public static NodeTypeSet TokenBitset_108;
    public static NodeTypeSet TokenBitset_109;
    public static NodeTypeSet TokenBitset_110;
    public static NodeTypeSet ElementBitset_0;
    public static NodeTypeSet ElementBitset_1;
    public static NodeTypeSet ElementBitset_2;
    public static NodeTypeSet ElementBitset_3;
    public static NodeTypeSet ElementBitset_4;
    public static NodeTypeSet ElementBitset_5;
    public static NodeTypeSet ElementBitset_6;
    public static NodeTypeSet ElementBitset_7;
    public static NodeTypeSet ElementBitset_8;
    public static NodeTypeSet ElementBitset_9;
    public static NodeTypeSet ElementBitset_10;
    public static NodeTypeSet ElementBitset_11;
    public static NodeTypeSet ElementBitset_12;
    public static NodeTypeSet ElementBitset_13;
    public static NodeTypeSet ElementBitset_14;
    public static NodeTypeSet ElementBitset_15;
    public static NodeTypeSet ElementBitset_16;
    public static NodeTypeSet ElementBitset_17;
    public static NodeTypeSet ElementBitset_18;
    public static NodeTypeSet ElementBitset_19;
    public static NodeTypeSet ElementBitset_20;
    public static NodeTypeSet ElementBitset_21;
    public static NodeTypeSet ElementBitset_22;
    public static NodeTypeSet FIRST_identifier;
    public static NodeTypeSet FIRST_typeUsage;
    public static NodeTypeSet FIRST_typeSpec;
    private static TokenBitsets();
}
[ZoneDefinitionAttribute]
public interface JetBrains.ReSharper.Psi.IL.ILanguageIlZone {
}
[LanguageDefinitionAttribute("IL")]
public class JetBrains.ReSharper.Psi.IL.ILLanguage : KnownLanguage {
    public static string Name;
    [CompilerGeneratedAttribute]
private static ILLanguage <Instance>k__BackingField;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static ILLanguage Instance { get; private set; }
    public PsiLanguageCategories SupportedCategories { get; }
    protected ILLanguage(string name);
    protected ILLanguage(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static ILLanguage get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(ILLanguage value);
    public virtual PsiLanguageCategories get_SupportedCategories();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.IL.ILLanguage", "16")]
public class JetBrains.ReSharper.Psi.IL.ILLanguageService : LanguageService {
    public bool IsCaseSensitive { get; }
    public ILanguageCacheProvider CacheProvider { get; }
    public bool SupportTypeMemberCache { get; }
    public ITypePresenter TypePresenter { get; }
    public ILLanguageService(ILLanguage ilLanguage, IConstantValueService constantValueService);
    public virtual bool get_IsCaseSensitive();
    public virtual ILanguageCacheProvider get_CacheProvider();
    public virtual bool get_SupportTypeMemberCache();
    public virtual ITypePresenter get_TypePresenter();
    public virtual ILexerFactory GetPrimaryLexerFactory();
    public virtual ILexer CreateFilteringLexer(ILexer lexer);
    public virtual IParser CreateParser(ILexer lexer, IPsiModule module, IPsiSourceFile sourceFile);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.IL.ILLanguageService/<FindTypeDeclarations>d__12")]
public virtual IEnumerable`1<ITypeDeclaration> FindTypeDeclarations(IFile file);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.IL.ILLanguageService/<EnumerateTypeDeclarations>d__13")]
private IEnumerable`1<ITypeDeclaration> EnumerateTypeDeclarations(IILNamespaceDeclaration ilNamespaceDeclaration);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.IL.ILLanguageService/<EnumerateNestedTypeDeclarations>d__14")]
private IEnumerable`1<ITypeDeclaration> EnumerateNestedTypeDeclarations(IILClassDeclaration ilClassDeclaration);
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.ILProjectFileType", "16")]
public class JetBrains.ReSharper.Psi.IL.ILProjectFileLanguageService : object {
    private ILProjectFileType myILProjectFileType;
    public ProjectFileType LanguageType { get; }
    public IconId Icon { get; }
    public ILProjectFileLanguageService(ILProjectFileType ilProjectFileType);
    public sealed virtual ProjectFileType get_LanguageType();
    public sealed virtual IconId get_Icon();
    public sealed virtual IPsiSourceFileProperties GetPsiProperties(IProjectFile projectFile, IPsiSourceFile sourceFile, IsCompileService isCompileService);
    public sealed virtual PsiLanguageType GetPsiLanguageType(IProjectFile projectFile);
    public sealed virtual PsiLanguageType GetPsiLanguageType(IPsiSourceFile sourceFile);
    public sealed virtual PsiLanguageType GetPsiLanguageType(ProjectFileType languageType);
    public sealed virtual ILexerFactory GetMixedLexerFactory(ISolution solution, IBuffer buffer, IPsiSourceFile sourceFile);
    public sealed virtual PreProcessingDirective[] GetPreprocessorDefines(IProject project, TargetFrameworkId targetFrameworkId);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.IL.Impl.Resolve.IlResolveUtil : object {
    [NotNullAttribute]
private static ISymbolTable GetQualifierSymbolTableForUntypedElements(IPsiModule module, IDeclaredElement element, ISubstitution substitution, SymbolTableMode mode);
    public static ISymbolTable AddNamespaceSymbols(IPsiModule psiModule, INamespace namespace, int level);
    public static ISymbolTable AddGlobalNamespaceSymbols(IPsiModule psiModule, int level);
    public static string GetTypeNameAndCount(string shortName, Int32& typeParameterCount);
    [ExtensionAttribute]
public static ISymbolTable GetQualifierSymbolTable(IIlQualifiedName qualifiedName, SymbolTableMode mode);
    [ExtensionAttribute]
public static ISymbolTable GetDeclarationSymbolTable(IIlReferenceOwner declaration, SymbolTableMode mode);
    [ExtensionAttribute]
public static QualifierKind GetQualifierKind(IIlQualifiedName qualifiedName);
    [ExtensionAttribute]
public static bool IsResolved(IReference reference, bool namespace, bool typeElement, bool method, bool field);
    public static bool Equals(ITypeUsage type1, IType type2);
    public static bool Equals(IParameter parameter1, IParameter parameter2);
}
public static class JetBrains.ReSharper.Psi.IL.Impl.Resolve.IlTypeFactory : object {
    private static BidirectionalMapOnDictionary`2<TokenNodeType, IClrTypeName> ourTypeKeywords;
    private static BidirectionalMapOnDictionary`2<TokenNodeType, IClrTypeName> ourUnsignedTypeKeywords;
    private static IlTypeFactory();
    [NotNullAttribute]
internal static IClrTypeName GetClrTypeName(IPredefinedScalarType predefinedScalarType);
    [NotNullAttribute]
internal static IDeclaredType CreateDeclaredType(IPredefinedScalarType predefinedScalarType);
    [NotNullAttribute]
private static IType CreateType(ITypeElement typeElement, TreeNodeCollection`1<ITypeModifier> typeModifiers);
    [NotNullAttribute]
public static IType CreateType(ITypeSpec typeSpec);
    [NotNullAttribute]
public static IDeclaredType CreateDeclaredType(ITypeSpec typeSpec);
}
public static class JetBrains.ReSharper.Psi.IL.Impl.Resolve.IlXmlDocUtil : object {
    public static string GetTypeString(ITypeUsage typeUsage);
    private static void BuildTypeString(StringBuilder builder, ITypeUsage typeUsage);
    private static void BuildTypeString(StringBuilder builder, IScalarType scalarType, TreeNodeCollection`1<ITypeUsage> substitution);
    private static void BuildQualifiedNameString(StringBuilder builder, IIlQualifiedName qualifiedName, TreeNodeCollection`1<ITypeUsage> substitution, Int32& indexShift);
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ArrayBound : ILCompositeElement {
    public static short MINUS;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<ITokenNode> Minus { get; }
    public TreeNodeEnumerable`1<ITokenNode> MinusEnumerable { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<ITokenNode> get_Minus();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_MinusEnumerable();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ArrayType : ILCompositeElement {
    public static short LBRACKER;
    public static short BOUND;
    public static short COMMA;
    public static short RBRACKER;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<IArrayBound> Bounds { get; }
    public TreeNodeEnumerable`1<IArrayBound> BoundsEnumerable { get; }
    public TreeNodeCollection`1<ITokenNode> Commas { get; }
    public TreeNodeEnumerable`1<ITokenNode> CommasEnumerable { get; }
    public ITokenNode LBracket { get; }
    public ITokenNode RBracket { get; }
    public int Rank { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<IArrayBound> get_Bounds();
    public virtual TreeNodeEnumerable`1<IArrayBound> get_BoundsEnumerable();
    public virtual TreeNodeCollection`1<ITokenNode> get_Commas();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_CommasEnumerable();
    public virtual ITokenNode get_LBracket();
    public virtual ITokenNode get_RBracket();
    public virtual string ToString();
    public sealed virtual int get_Rank();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.Blob : ILCompositeElement {
    public static short LPARENTH;
    public static short HEX_BYTE;
    public static short RPARENTH;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<ITokenNode> Bytes { get; }
    public TreeNodeEnumerable`1<ITokenNode> BytesEnumerable { get; }
    public ITokenNode LParenth { get; }
    public ITokenNode RParenth { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<ITokenNode> get_Bytes();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_BytesEnumerable();
    public virtual ITokenNode get_LParenth();
    public virtual ITokenNode get_RParenth();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.CallConvention : ILCompositeElement {
    public static short INSTANCE_KEYWORD;
    public static short EXPLICIT_KEYWORD;
    public static short CALLCONV_KIND;
    public NodeType NodeType { get; }
    public ICallConventionKind CallConventionKind { get; }
    public ITokenNode ExplicitKeyword { get; }
    public ITokenNode InstanceKeyword { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ICallConventionKind get_CallConventionKind();
    public virtual ITokenNode get_ExplicitKeyword();
    public virtual ITokenNode get_InstanceKeyword();
    public virtual ICallConventionKind SetCallConventionKind(ICallConventionKind param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.CallConventionKind : ILCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.CatchClause : ILCompositeElement {
    public static short CATCH_KEYWORD;
    public static short EXCEPTION_TYPE;
    public NodeType NodeType { get; }
    public ITokenNode CatchKeyword { get; }
    public IExceptionType ExceptionType { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_CatchKeyword();
    public virtual IExceptionType get_ExceptionType();
    public virtual IExceptionType SetExceptionType(IExceptionType param);
    public virtual string ToString();
}
public static class JetBrains.ReSharper.Psi.IL.Impl.Tree.ChildRole : object {
    public static short LAST;
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ClassBody : ILCompositeElement {
    public static short LBRACE;
    public static short SEQURITY_DECLARATION;
    public static short COMP_CONTROL;
    public static short EXTERN_SOURCE;
    public static short CLASS_MEMBER;
    public static short RBRACE;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<ICompControl> CompControls { get; }
    public TreeNodeEnumerable`1<ICompControl> CompControlsEnumerable { get; }
    public TreeNodeCollection`1<IExternSource> ExternSources { get; }
    public TreeNodeEnumerable`1<IExternSource> ExternSourcesEnumerable { get; }
    public ITokenNode LBrace { get; }
    public TreeNodeCollection`1<IILTreeNode> Members { get; }
    public TreeNodeEnumerable`1<IILTreeNode> MembersEnumerable { get; }
    public ITokenNode RBrace { get; }
    public TreeNodeCollection`1<ISequrityDeclaration> SecurityDeclarations { get; }
    public TreeNodeEnumerable`1<ISequrityDeclaration> SecurityDeclarationsEnumerable { get; }
    public int LevelDelta { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<ICompControl> get_CompControls();
    public virtual TreeNodeEnumerable`1<ICompControl> get_CompControlsEnumerable();
    public virtual TreeNodeCollection`1<IExternSource> get_ExternSources();
    public virtual TreeNodeEnumerable`1<IExternSource> get_ExternSourcesEnumerable();
    public virtual ITokenNode get_LBrace();
    public virtual TreeNodeCollection`1<IILTreeNode> get_Members();
    public virtual TreeNodeEnumerable`1<IILTreeNode> get_MembersEnumerable();
    public virtual ITokenNode get_RBrace();
    public virtual TreeNodeCollection`1<ISequrityDeclaration> get_SecurityDeclarations();
    public virtual TreeNodeEnumerable`1<ISequrityDeclaration> get_SecurityDeclarationsEnumerable();
    public virtual string ToString();
    public sealed virtual ISymbolTable AddGlobalDeclarations(ISymbolTable parentTable, int level, SymbolTableMode mode);
    public sealed virtual int get_LevelDelta();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ClassExtendsClause : ILCompositeElement {
    public static short EXTENDS_KEYWORD;
    public static short TYPE_SPEC;
    public NodeType NodeType { get; }
    public ITokenNode ExtendsKeyword { get; }
    public ITypeSpec TypeSpec { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_ExtendsKeyword();
    public virtual ITypeSpec get_TypeSpec();
    public virtual ITypeSpec SetTypeSpec(ITypeSpec param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ClassHeader : ILCompositeElement {
    public static short CLASS_MODIFIER_LIST;
    public static short NAME;
    public static short GENERIC_PARAM_LIST;
    public static short EXTENDS_CLAUSE;
    public static short IMPLEMENTS_CLAUSE;
    public NodeType NodeType { get; }
    public IClassExtendsClause ExtendsClause { get; }
    public IGenericParameterDeclarationList GenericParameterDeclarationList { get; }
    public IClassImplementsClause ImplementsClause { get; }
    public IClassModifierList ModifierList { get; }
    public IIdentifierWithOwnerQualification Name { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IClassExtendsClause get_ExtendsClause();
    public virtual IGenericParameterDeclarationList get_GenericParameterDeclarationList();
    public virtual IClassImplementsClause get_ImplementsClause();
    public virtual IClassModifierList get_ModifierList();
    public virtual IIdentifierWithOwnerQualification get_Name();
    public virtual IClassExtendsClause SetExtendsClause(IClassExtendsClause param);
    public virtual IGenericParameterDeclarationList SetGenericParameterDeclarationList(IGenericParameterDeclarationList param);
    public virtual IClassImplementsClause SetImplementsClause(IClassImplementsClause param);
    public virtual IClassModifierList SetModifierList(IClassModifierList param);
    public virtual IIdentifierWithOwnerQualification SetName(IIdentifierWithOwnerQualification param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ClassImplementsClause : ILCompositeElement {
    public static short IMPLEMENTS_KEYWORD;
    public static short TYPE_SPEC;
    public static short COMMA;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<ITokenNode> Commas { get; }
    public TreeNodeEnumerable`1<ITokenNode> CommasEnumerable { get; }
    public ITokenNode ImplementsKeyword { get; }
    public TreeNodeCollection`1<ITypeSpec> TypeSpecs { get; }
    public TreeNodeEnumerable`1<ITypeSpec> TypeSpecsEnumerable { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<ITokenNode> get_Commas();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_CommasEnumerable();
    public virtual ITokenNode get_ImplementsKeyword();
    public virtual TreeNodeCollection`1<ITypeSpec> get_TypeSpecs();
    public virtual TreeNodeEnumerable`1<ITypeSpec> get_TypeSpecsEnumerable();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ClassModifierList : ILCompositeElement {
    public static short MODIFIER;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<ITokenNode> Modifiers { get; }
    public TreeNodeEnumerable`1<ITokenNode> ModifiersEnumerable { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<ITokenNode> get_Modifiers();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_ModifiersEnumerable();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ClassName : ILCompositeElement {
    public static short DOT_THIS_KEYWORD;
    public static short DOT_BASE_KEYWORD;
    public static short DOT_NESTER_KEYWORD;
    public static short MDTOKEN;
    public static short LBRACKER;
    public static short ASTERISK;
    public static short DOT_MODULE_KEYWORD;
    public static short MODULE_NAME;
    public static short QUALIFIED_NAME;
    public static short RBRACKER;
    public static short REFERENCE_NAME;
    public NodeType NodeType { get; }
    public ITokenNode Asterisk { get; }
    public ITokenNode DotBaseKeyword { get; }
    public ITokenNode DotModuleKeyword { get; }
    public ITokenNode DotNesterKeyword { get; }
    public ITokenNode DotThisKeyword { get; }
    public ITokenNode LBracket { get; }
    public IMdtoken Mdtoken { get; }
    public IQualifiedName ModuleName { get; }
    public IQualifiedName QualifiedName { get; }
    public ITokenNode RBracket { get; }
    public IReferenceName ReferenceName { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_Asterisk();
    public virtual ITokenNode get_DotBaseKeyword();
    public virtual ITokenNode get_DotModuleKeyword();
    public virtual ITokenNode get_DotNesterKeyword();
    public virtual ITokenNode get_DotThisKeyword();
    public virtual ITokenNode get_LBracket();
    public virtual IMdtoken get_Mdtoken();
    public virtual IQualifiedName get_ModuleName();
    public virtual IQualifiedName get_QualifiedName();
    public virtual ITokenNode get_RBracket();
    public virtual IReferenceName get_ReferenceName();
    public virtual IMdtoken SetMdtoken(IMdtoken param);
    public virtual IQualifiedName SetModuleName(IQualifiedName param);
    public virtual IQualifiedName SetQualifiedName(IQualifiedName param);
    public virtual IReferenceName SetReferenceName(IReferenceName param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.CodeLabel : ILCompositeElement {
    public static short NAME;
    public static short COLON;
    public NodeType NodeType { get; }
    public ITokenNode Colon { get; }
    public IIdentifier Name { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_Colon();
    public virtual IIdentifier get_Name();
    public virtual IIdentifier SetName(IIdentifier param);
    public virtual string ToString();
    public sealed virtual string GetName();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.CompControl : ILCompositeElement {
    public static short PP_SHARP_DEFINE;
    public static short NAME;
    public static short STRING_VALUE;
    public static short PP_SHARP_UNDEF;
    public static short PP_SHARP_IFDEF;
    public static short PP_SHARP_IFNDEF;
    public static short PP_SHARP_ELSE_KEYWORD;
    public static short PP_SHARP_ENDIF;
    public static short PP_SHARP_INCLUDE;
    public static short FILE_NAME;
    public static short PP_SHARP_LINE;
    public static short LINE_NUMBER;
    public static short COLON;
    public static short COLUMN_NUMBER;
    public NodeType NodeType { get; }
    public ITokenNode Colon { get; }
    public ITokenNode ColumnNumber { get; }
    public ITokenNode Define { get; }
    public ITokenNode Else { get; }
    public ITokenNode Endif { get; }
    public ITokenNode FileName { get; }
    public ITokenNode Ifdef { get; }
    public ITokenNode Ifndef { get; }
    public ITokenNode Include { get; }
    public ITokenNode Line { get; }
    public ITokenNode LineNumber { get; }
    public IQualifiedName QualifiedName { get; }
    public ITokenNode StringValue { get; }
    public ITokenNode Undef { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_Colon();
    public virtual ITokenNode get_ColumnNumber();
    public virtual ITokenNode get_Define();
    public virtual ITokenNode get_Else();
    public virtual ITokenNode get_Endif();
    public virtual ITokenNode get_FileName();
    public virtual ITokenNode get_Ifdef();
    public virtual ITokenNode get_Ifndef();
    public virtual ITokenNode get_Include();
    public virtual ITokenNode get_Line();
    public virtual ITokenNode get_LineNumber();
    public virtual IQualifiedName get_QualifiedName();
    public virtual ITokenNode get_StringValue();
    public virtual ITokenNode get_Undef();
    public virtual IQualifiedName SetQualifiedName(IQualifiedName param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.CompositeVariantType : ILCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.CompQstring : ILCompositeElement {
    public static short QSTRING_LITERAL_ITEM;
    public static short PLUS;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<ITokenNode> Items { get; }
    public TreeNodeEnumerable`1<ITokenNode> ItemsEnumerable { get; }
    public TreeNodeCollection`1<ITokenNode> Pluses { get; }
    public TreeNodeEnumerable`1<ITokenNode> PlusesEnumerable { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<ITokenNode> get_Items();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_ItemsEnumerable();
    public virtual TreeNodeCollection`1<ITokenNode> get_Pluses();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_PlusesEnumerable();
    public virtual string ToString();
}
internal abstract class JetBrains.ReSharper.Psi.IL.Impl.Tree.ConstructorNameBase : ILCompositeElement {
    public string Name { get; }
    public string ShortName { get; }
    public string FullName { get; }
    public string PresentationName { get; }
    public bool ContainsQuotedStrings { get; }
    public abstract virtual string get_Name();
    public sealed virtual string get_ShortName();
    public sealed virtual string get_FullName();
    public sealed virtual string get_PresentationName();
    public sealed virtual bool get_ContainsQuotedStrings();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.CustomAttribute : ILCompositeElement {
    public static short DOT_CUSTOM_KEYWORD;
    public static short LPARENTH;
    public static short OWNER;
    public static short RPARENTH;
    public static short CUSTOM_TYPE;
    public static short EQ;
    public static short BLOB;
    public static short COMP_QSTRING;
    public NodeType NodeType { get; }
    public IBlob Blob { get; }
    public ICustomType CustomType { get; }
    public ITokenNode DotCustomKeyword { get; }
    public ITokenNode Eq { get; }
    public ITokenNode LParenth { get; }
    public IOwnerType Owner { get; }
    public ITokenNode RParenth { get; }
    public ICompQstring Strings { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IBlob get_Blob();
    public virtual ICustomType get_CustomType();
    public virtual ITokenNode get_DotCustomKeyword();
    public virtual ITokenNode get_Eq();
    public virtual ITokenNode get_LParenth();
    public virtual IOwnerType get_Owner();
    public virtual ITokenNode get_RParenth();
    public virtual ICompQstring get_Strings();
    public virtual IBlob SetBlob(IBlob param);
    public virtual ICustomType SetCustomType(ICustomType param);
    public virtual IOwnerType SetOwner(IOwnerType param);
    public virtual ICompQstring SetStrings(ICompQstring param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.CustomModifierType : ILCompositeElement {
    public static short MODIFIER_KEYWORD;
    public static short LPARENTH;
    public static short TYPE_REFERENCE;
    public static short RPARENTH;
    public NodeType NodeType { get; }
    public ITokenNode LParenth { get; }
    public ITokenNode ModifierKeyword { get; }
    public ITokenNode RParenth { get; }
    public ITypeReference TypeReference { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_LParenth();
    public virtual ITokenNode get_ModifierKeyword();
    public virtual ITokenNode get_RParenth();
    public virtual ITypeReference get_TypeReference();
    public virtual ITypeReference SetTypeReference(ITypeReference param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.CustomType : ILCompositeElement {
    public static short CALL_CONV;
    public static short TYPE;
    public static short TYPE_SPEC;
    public static short INSTANCE_CONSTRUCTOR_REFERENCE_NAME;
    public static short SIGNATURE;
    public NodeType NodeType { get; }
    public ICallConvention CallConvention { get; }
    public IInstanceConstructorReferenceName ConstructorName { get; }
    public ISignatureDef Signature { get; }
    public ITypeUsage Type { get; }
    public IILTreeNode TypeSpec { get; }
    public string MemberName { get; }
    public ITypeMemberReferenceName MemberReferenceName { get; }
    public ITypeSpec OwnerType { get; }
    public int GenericArgumentsCount { get; }
    public MemberKind Kind { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ICallConvention get_CallConvention();
    public virtual IInstanceConstructorReferenceName get_ConstructorName();
    public virtual ISignatureDef get_Signature();
    public virtual ITypeUsage get_Type();
    public virtual IILTreeNode get_TypeSpec();
    public virtual ICallConvention SetCallConvention(ICallConvention param);
    public virtual IInstanceConstructorReferenceName SetConstructorName(IInstanceConstructorReferenceName param);
    public virtual ISignatureDef SetSignature(ISignatureDef param);
    public virtual ITypeUsage SetType(ITypeUsage param);
    public virtual IILTreeNode SetTypeSpec(IILTreeNode param);
    public virtual string ToString();
    public sealed virtual string get_MemberName();
    public sealed virtual ITypeMemberReferenceName get_MemberReferenceName();
    public sealed virtual ITypeSpec get_OwnerType();
    public sealed virtual int get_GenericArgumentsCount();
    public sealed virtual MemberKind get_Kind();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.DataDeclarationItem : ILCompositeElement {
    public static short AND;
    public static short LPARENTH;
    public static short LABEL;
    public static short RPARENTH;
    public static short BYTEARRAY_KEYWORD;
    public static short DATA;
    public static short CHAR_KEYWORD;
    public static short ASTERISK;
    public static short QSTRING_LITERAL;
    public static short MINUS;
    public static short FLOAT_VALUE;
    public static short LBRACKER;
    public static short REPLICATION_NUMBER;
    public static short RBRACKER;
    public static short INTEGER_VALUE;
    public NodeType NodeType { get; }
    public ITokenNode AddressSign { get; }
    public ITokenNode Asterisk { get; }
    public ITokenNode BytearrayKeyword { get; }
    public ITokenNode CharKeyword { get; }
    public ITokenNode Characters { get; }
    public IBlob Data { get; }
    public ITokenNode FloatValue { get; }
    public ITokenNode IntegerValue { get; }
    public ITokenNode LBracket { get; }
    public ITokenNode LParenth { get; }
    public IIdentifier Label { get; }
    public ITokenNode Minus { get; }
    public ITokenNode RBracket { get; }
    public ITokenNode RParenth { get; }
    public ITokenNode ReplicationNumber { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_AddressSign();
    public virtual ITokenNode get_Asterisk();
    public virtual ITokenNode get_BytearrayKeyword();
    public virtual ITokenNode get_CharKeyword();
    public virtual ITokenNode get_Characters();
    public virtual IBlob get_Data();
    public virtual ITokenNode get_FloatValue();
    public virtual ITokenNode get_IntegerValue();
    public virtual ITokenNode get_LBracket();
    public virtual ITokenNode get_LParenth();
    public virtual IIdentifier get_Label();
    public virtual ITokenNode get_Minus();
    public virtual ITokenNode get_RBracket();
    public virtual ITokenNode get_RParenth();
    public virtual ITokenNode get_ReplicationNumber();
    public virtual IBlob SetData(IBlob param);
    public virtual IIdentifier SetLabel(IIdentifier param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.DataLabel : ILCompositeElement {
    public static short NAME;
    public NodeType NodeType { get; }
    public IIdentifier Name { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IIdentifier get_Name();
    public virtual IIdentifier SetName(IIdentifier param);
    public virtual string ToString();
}
public static class JetBrains.ReSharper.Psi.IL.Impl.Tree.ElementBitsets : object {
    public static NodeTypeSet CONSTRUCTOR_NAME_BIT_SET;
    public static NodeTypeSet EXCEPTION_TYPE_BIT_SET;
    public static NodeTypeSet GENERIC_PARAMETER_BIT_SET;
    public static NodeTypeSet I_L_ASSEMBLY_PROPERTY_BIT_SET;
    public static NodeTypeSet I_L_DECLARATION_BIT_SET;
    public static NodeTypeSet I_L_EVENT_MEMBER_BIT_SET;
    public static NodeTypeSet I_L_EXTERN_ASSEMBLY_PROPERTY_BIT_SET;
    public static NodeTypeSet I_L_EXTERN_CLASS_PROPERTY_BIT_SET;
    public static NodeTypeSet I_L_LABEL_BIT_SET;
    public static NodeTypeSet I_L_MANIFEST_RESOURCE_DECLARATION_BIT_SET;
    public static NodeTypeSet I_L_PROPERTY_MEMBER_BIT_SET;
    public static NodeTypeSet I_L_TYPE_MEMBER_DECLARATION_BIT_SET;
    public static NodeTypeSet IL_QUALIFIED_NAME_BIT_SET;
    public static NodeTypeSet IL_REFERENCE_OWNER_BIT_SET;
    public static NodeTypeSet OPCODE_BIT_SET;
    public static NodeTypeSet PRESENTABLE_NAME_BIT_SET;
    public static NodeTypeSet SCALAR_TYPE_BIT_SET;
    public static NodeTypeSet SEQURITY_DECLARATION_BIT_SET;
    public static NodeTypeSet TYPE_MEMBER_REFERENCE_NAME_BIT_SET;
    public static NodeTypeSet TYPE_MEMBER_USAGE_BIT_SET;
    public static NodeTypeSet TYPE_MODIFIER_BIT_SET;
    public static NodeTypeSet TYPE_SPEC_BIT_SET;
    public static NodeTypeSet TYPE_WITH_REFERENCE_BASE_BIT_SET;
    private static ElementBitsets();
}
public abstract class JetBrains.ReSharper.Psi.IL.Impl.Tree.ElementType : object {
    public static CompositeNodeType ERROR_ELEMENT;
    public static int ERROR_ELEMENT_NODE_TYPE_INDEX;
    public static CompositeNodeType ARRAY_BOUND;
    public static int ARRAY_BOUND_NODE_TYPE_INDEX;
    public static CompositeNodeType ARRAY_TYPE;
    public static int ARRAY_TYPE_NODE_TYPE_INDEX;
    public static CompositeNodeType BLOB;
    public static int BLOB_NODE_TYPE_INDEX;
    public static CompositeNodeType CALL_CONVENTION;
    public static int CALL_CONVENTION_NODE_TYPE_INDEX;
    public static CompositeNodeType CALL_CONVENTION_KIND;
    public static int CALL_CONVENTION_KIND_NODE_TYPE_INDEX;
    public static CompositeNodeType CATCH_CLAUSE;
    public static int CATCH_CLAUSE_NODE_TYPE_INDEX;
    public static CompositeNodeType CLASS_BODY;
    public static int CLASS_BODY_NODE_TYPE_INDEX;
    public static CompositeNodeType CLASS_EXTENDS_CLAUSE;
    public static int CLASS_EXTENDS_CLAUSE_NODE_TYPE_INDEX;
    public static CompositeNodeType CLASS_HEADER;
    public static int CLASS_HEADER_NODE_TYPE_INDEX;
    public static CompositeNodeType CLASS_IMPLEMENTS_CLAUSE;
    public static int CLASS_IMPLEMENTS_CLAUSE_NODE_TYPE_INDEX;
    public static CompositeNodeType CLASS_MODIFIER_LIST;
    public static int CLASS_MODIFIER_LIST_NODE_TYPE_INDEX;
    public static CompositeNodeType CLASS_NAME;
    public static int CLASS_NAME_NODE_TYPE_INDEX;
    public static CompositeNodeType CODE_LABEL;
    public static int CODE_LABEL_NODE_TYPE_INDEX;
    public static CompositeNodeType COMP_CONTROL;
    public static int COMP_CONTROL_NODE_TYPE_INDEX;
    public static CompositeNodeType COMP_QSTRING;
    public static int COMP_QSTRING_NODE_TYPE_INDEX;
    public static CompositeNodeType COMPOSITE_VARIANT_TYPE;
    public static int COMPOSITE_VARIANT_TYPE_NODE_TYPE_INDEX;
    public static CompositeNodeType CUSTOM_ATTRIBUTE;
    public static int CUSTOM_ATTRIBUTE_NODE_TYPE_INDEX;
    public static CompositeNodeType CUSTOM_MODIFIER_TYPE;
    public static int CUSTOM_MODIFIER_TYPE_NODE_TYPE_INDEX;
    public static CompositeNodeType CUSTOM_TYPE;
    public static int CUSTOM_TYPE_NODE_TYPE_INDEX;
    public static CompositeNodeType DATA_DECLARATION_ITEM;
    public static int DATA_DECLARATION_ITEM_NODE_TYPE_INDEX;
    public static CompositeNodeType DATA_LABEL;
    public static int DATA_LABEL_NODE_TYPE_INDEX;
    public static CompositeNodeType EMITBYTE;
    public static int EMITBYTE_NODE_TYPE_INDEX;
    public static CompositeNodeType ENTRYPOINT;
    public static int ENTRYPOINT_NODE_TYPE_INDEX;
    public static CompositeNodeType EVENT_BODY;
    public static int EVENT_BODY_NODE_TYPE_INDEX;
    public static CompositeNodeType EVENT_HEADER;
    public static int EVENT_HEADER_NODE_TYPE_INDEX;
    public static CompositeNodeType EXPORT;
    public static int EXPORT_NODE_TYPE_INDEX;
    public static CompositeNodeType EXTERN_SOURCE;
    public static int EXTERN_SOURCE_NODE_TYPE_INDEX;
    public static CompositeNodeType FAULT_CLAUSE;
    public static int FAULT_CLAUSE_NODE_TYPE_INDEX;
    public static CompositeNodeType FIELD_BYTE_OFFSET;
    public static int FIELD_BYTE_OFFSET_NODE_TYPE_INDEX;
    public static CompositeNodeType FIELD_INIT;
    public static int FIELD_INIT_NODE_TYPE_INDEX;
    public static CompositeNodeType FIELD_REFERENCE_NAME;
    public static int FIELD_REFERENCE_NAME_NODE_TYPE_INDEX;
    public static CompositeNodeType FILTER_CLAUSE;
    public static int FILTER_CLAUSE_NODE_TYPE_INDEX;
    public static CompositeNodeType FINALLY_CLAUSE;
    public static int FINALLY_CLAUSE_NODE_TYPE_INDEX;
    public static CompositeNodeType FROM_TO_BLOCK;
    public static int FROM_TO_BLOCK_NODE_TYPE_INDEX;
    public static CompositeNodeType GEN_ARITY;
    public static int GEN_ARITY_NODE_TYPE_INDEX;
    public static CompositeNodeType GENERIC_ARGUMENT_LIST;
    public static int GENERIC_ARGUMENT_LIST_NODE_TYPE_INDEX;
    public static CompositeNodeType GENERIC_PARAMETER_ATTRIBUTE_LIST;
    public static int GENERIC_PARAMETER_ATTRIBUTE_LIST_NODE_TYPE_INDEX;
    public static CompositeNodeType GENERIC_PARAMETER_CONSTRAINT_LIST;
    public static int GENERIC_PARAMETER_CONSTRAINT_LIST_NODE_TYPE_INDEX;
    public static CompositeNodeType GENERIC_PARAMETER_DECLARATION;
    public static int GENERIC_PARAMETER_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType GENERIC_PARAMETER_DECLARATION_LIST;
    public static int GENERIC_PARAMETER_DECLARATION_LIST_NODE_TYPE_INDEX;
    public static CompositeNodeType GENERIC_PARAMETER_POINTER;
    public static int GENERIC_PARAMETER_POINTER_NODE_TYPE_INDEX;
    public static CompositeNodeType GENERIC_SCALAR_TYPE;
    public static int GENERIC_SCALAR_TYPE_NODE_TYPE_INDEX;
    public static CompositeNodeType GENERIC_TYPE;
    public static int GENERIC_TYPE_NODE_TYPE_INDEX;
    public static CompositeNodeType HANDLER_BLOCK;
    public static int HANDLER_BLOCK_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_ACCESSOR_DECLARATION;
    public static int I_L_ACCESSOR_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_ADDON_DECLARATION;
    public static int I_L_ADDON_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_ALIAS_DECLARATION;
    public static int I_L_ALIAS_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_ASSEMBLY_AUTODETECTION;
    public static int I_L_ASSEMBLY_AUTODETECTION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_ASSEMBLY_CULTURE;
    public static int I_L_ASSEMBLY_CULTURE_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_ASSEMBLY_DECLARATION;
    public static int I_L_ASSEMBLY_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_ASSEMBLY_HASH;
    public static int I_L_ASSEMBLY_HASH_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_ASSEMBLY_HASH_ALGORITHM;
    public static int I_L_ASSEMBLY_HASH_ALGORITHM_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_ASSEMBLY_PUBLIC_KEY;
    public static int I_L_ASSEMBLY_PUBLIC_KEY_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_ASSEMBLY_PUBLIC_KEY_TOKEN;
    public static int I_L_ASSEMBLY_PUBLIC_KEY_TOKEN_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_ASSEMBLY_VERSION;
    public static int I_L_ASSEMBLY_VERSION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_CLASS_DECLARATION;
    public static int I_L_CLASS_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_COR_FLAGS;
    public static int I_L_COR_FLAGS_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_DATA_DECLARATION;
    public static int I_L_DATA_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_EVENT_DECLARATION;
    public static int I_L_EVENT_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_EXTERN_ASSEMBLY_DECLARATION;
    public static int I_L_EXTERN_ASSEMBLY_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_EXTERN_CLASS_ASSEMBLY_PROPERTY;
    public static int I_L_EXTERN_CLASS_ASSEMBLY_PROPERTY_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_EXTERN_CLASS_CLASS_PROPERTY;
    public static int I_L_EXTERN_CLASS_CLASS_PROPERTY_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_EXTERN_CLASS_DECLARATION;
    public static int I_L_EXTERN_CLASS_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_EXTERN_CLASS_FILE_PROPERTY;
    public static int I_L_EXTERN_CLASS_FILE_PROPERTY_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_EXTERN_MODULE_DECLARATION;
    public static int I_L_EXTERN_MODULE_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_FIELD_DECLARATION;
    public static int I_L_FIELD_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_FILE;
    public static int I_L_FILE_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_FILE_ALIGNMENT_DECLARATION;
    public static int I_L_FILE_ALIGNMENT_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_FILE_DECLARATION;
    public static int I_L_FILE_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_FIRE_DECLARATION;
    public static int I_L_FIRE_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_FORWARD_CLASS_DECLARATION;
    public static int I_L_FORWARD_CLASS_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_GET_DECLARATION;
    public static int I_L_GET_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_IMAGE_BASE_DECLARATION;
    public static int I_L_IMAGE_BASE_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_INSTANCE_LAYOUT_DECLARATION;
    public static int I_L_INSTANCE_LAYOUT_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_INTERFACEIMPL_SPECIFICATION;
    public static int I_L_INTERFACEIMPL_SPECIFICATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_LANGUAGE_DECLARATION;
    public static int I_L_LANGUAGE_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_MANIFEST_ASSEMBLY_RESOURCE;
    public static int I_L_MANIFEST_ASSEMBLY_RESOURCE_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_MANIFEST_FILE_RESOURCE;
    public static int I_L_MANIFEST_FILE_RESOURCE_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_MANIFEST_RESOURCE;
    public static int I_L_MANIFEST_RESOURCE_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_METHOD_DECLARATION;
    public static int I_L_METHOD_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_METHOD_OVERRIDING_DECLARATION_FULL;
    public static int I_L_METHOD_OVERRIDING_DECLARATION_FULL_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_METHOD_OVERRIDING_DECLARATION_IN_CLASS_FULL;
    public static int I_L_METHOD_OVERRIDING_DECLARATION_IN_CLASS_FULL_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_METHOD_OVERRIDING_DECLARATION_IN_CLASS_SHORT;
    public static int I_L_METHOD_OVERRIDING_DECLARATION_IN_CLASS_SHORT_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_METHOD_OVERRIDING_DECLARATION_SHORT;
    public static int I_L_METHOD_OVERRIDING_DECLARATION_SHORT_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_METHOD_PARAM_SPECIFICATION;
    public static int I_L_METHOD_PARAM_SPECIFICATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_MODULE_DECLARATION;
    public static int I_L_MODULE_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_MSCORLIB_DECLARATION;
    public static int I_L_MSCORLIB_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_NAMESPACE_BODY;
    public static int I_L_NAMESPACE_BODY_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_NAMESPACE_DECLARATION;
    public static int I_L_NAMESPACE_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_OTHER_DECLARATION;
    public static int I_L_OTHER_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_PARAM_TYPE_CONSTRAINT_SPECIFICATION;
    public static int I_L_PARAM_TYPE_CONSTRAINT_SPECIFICATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_PARAM_TYPE_SPECIFICATION;
    public static int I_L_PARAM_TYPE_SPECIFICATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_PROPERTY_DECLARATION;
    public static int I_L_PROPERTY_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_REMOVEON_DECLARATION;
    public static int I_L_REMOVEON_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_SET_DECLARATION;
    public static int I_L_SET_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_STACK_RESERVE_DECLARATION;
    public static int I_L_STACK_RESERVE_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_SUBSYSTEM;
    public static int I_L_SUBSYSTEM_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_TYPELIST_DECLARATION;
    public static int I_L_TYPELIST_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType I_L_VTFIXUP_DECLARATION;
    public static int I_L_VTFIXUP_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType IDENTIFIER;
    public static int IDENTIFIER_NODE_TYPE_INDEX;
    public static CompositeNodeType IDENTIFIER_WITH_OWNER_QUALIFICATION;
    public static int IDENTIFIER_WITH_OWNER_QUALIFICATION_NODE_TYPE_INDEX;
    public static CompositeNodeType IMPLEMENTATION_ATTRIBUTE_LIST;
    public static int IMPLEMENTATION_ATTRIBUTE_LIST_NODE_TYPE_INDEX;
    public static CompositeNodeType IMPLEMENTATION_METHOD_DECLARATION_SHORT;
    public static int IMPLEMENTATION_METHOD_DECLARATION_SHORT_NODE_TYPE_INDEX;
    public static CompositeNodeType INSTANCE_CONSTRUCTOR_NAME;
    public static int INSTANCE_CONSTRUCTOR_NAME_NODE_TYPE_INDEX;
    public static CompositeNodeType INSTANCE_CONSTRUCTOR_REFERENCE_NAME;
    public static int INSTANCE_CONSTRUCTOR_REFERENCE_NAME_NODE_TYPE_INDEX;
    public static CompositeNodeType INSTRUCTION;
    public static int INSTRUCTION_NODE_TYPE_INDEX;
    public static CompositeNodeType INSTRUCTION_BRANCH_TARGET;
    public static int INSTRUCTION_BRANCH_TARGET_NODE_TYPE_INDEX;
    public static CompositeNodeType INSTRUCTION_FIELD;
    public static int INSTRUCTION_FIELD_NODE_TYPE_INDEX;
    public static CompositeNodeType INSTRUCTION_FIELD_PARAMETER;
    public static int INSTRUCTION_FIELD_PARAMETER_NODE_TYPE_INDEX;
    public static CompositeNodeType INSTRUCTION_I;
    public static int INSTRUCTION_I_NODE_TYPE_INDEX;
    public static CompositeNodeType INSTRUCTION_I8;
    public static int INSTRUCTION_I8_NODE_TYPE_INDEX;
    public static CompositeNodeType INSTRUCTION_METHOD;
    public static int INSTRUCTION_METHOD_NODE_TYPE_INDEX;
    public static CompositeNodeType INSTRUCTION_METHOD_PARAMETER;
    public static int INSTRUCTION_METHOD_PARAMETER_NODE_TYPE_INDEX;
    public static CompositeNodeType INSTRUCTION_NONE;
    public static int INSTRUCTION_NONE_NODE_TYPE_INDEX;
    public static CompositeNodeType INSTRUCTION_R;
    public static int INSTRUCTION_R_NODE_TYPE_INDEX;
    public static CompositeNodeType INSTRUCTION_SIG;
    public static int INSTRUCTION_SIG_NODE_TYPE_INDEX;
    public static CompositeNodeType INSTRUCTION_STRING;
    public static int INSTRUCTION_STRING_NODE_TYPE_INDEX;
    public static CompositeNodeType INSTRUCTION_SWITCH;
    public static int INSTRUCTION_SWITCH_NODE_TYPE_INDEX;
    public static CompositeNodeType INSTRUCTION_TOK;
    public static int INSTRUCTION_TOK_NODE_TYPE_INDEX;
    public static CompositeNodeType INSTRUCTION_TYPE;
    public static int INSTRUCTION_TYPE_NODE_TYPE_INDEX;
    public static CompositeNodeType INSTRUCTION_VAR;
    public static int INSTRUCTION_VAR_NODE_TYPE_INDEX;
    public static CompositeNodeType INT_INITIALIZER;
    public static int INT_INITIALIZER_NODE_TYPE_INDEX;
    public static CompositeNodeType INT_OR_WILDCARD;
    public static int INT_OR_WILDCARD_NODE_TYPE_INDEX;
    public static CompositeNodeType LOCAL_VARIABLE;
    public static int LOCAL_VARIABLE_NODE_TYPE_INDEX;
    public static CompositeNodeType LOCAL_VARIABLES_DECLARATION;
    public static int LOCAL_VARIABLES_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType MANAGED_POINTER_TYPE;
    public static int MANAGED_POINTER_TYPE_NODE_TYPE_INDEX;
    public static CompositeNodeType MARSHAL_SPEC;
    public static int MARSHAL_SPEC_NODE_TYPE_INDEX;
    public static CompositeNodeType MAXSTACK;
    public static int MAXSTACK_NODE_TYPE_INDEX;
    public static CompositeNodeType MDTOKEN;
    public static int MDTOKEN_NODE_TYPE_INDEX;
    public static CompositeNodeType MEMBER_REF;
    public static int MEMBER_REF_NODE_TYPE_INDEX;
    public static CompositeNodeType METHOD_HEADER;
    public static int METHOD_HEADER_NODE_TYPE_INDEX;
    public static CompositeNodeType METHOD_REFERENCE_NAME;
    public static int METHOD_REFERENCE_NAME_NODE_TYPE_INDEX;
    public static CompositeNodeType METHOD_SCALAR_TYPE;
    public static int METHOD_SCALAR_TYPE_NODE_TYPE_INDEX;
    public static CompositeNodeType METHOD_SCOPE_BLOCK;
    public static int METHOD_SCOPE_BLOCK_NODE_TYPE_INDEX;
    public static CompositeNodeType NAME_VALUE_PAIR;
    public static int NAME_VALUE_PAIR_NODE_TYPE_INDEX;
    public static CompositeNodeType NATIVE_SCALAR_TYPE;
    public static int NATIVE_SCALAR_TYPE_NODE_TYPE_INDEX;
    public static CompositeNodeType NATIVE_TYPE;
    public static int NATIVE_TYPE_NODE_TYPE_INDEX;
    public static CompositeNodeType NATIVE_TYPE_ARRAY_SPECIFICATION;
    public static int NATIVE_TYPE_ARRAY_SPECIFICATION_NODE_TYPE_INDEX;
    public static CompositeNodeType OWNER_TYPE;
    public static int OWNER_TYPE_NODE_TYPE_INDEX;
    public static CompositeNodeType P_INVOKE_ATTRIBUTE_LIST;
    public static int P_INVOKE_ATTRIBUTE_LIST_NODE_TYPE_INDEX;
    public static CompositeNodeType P_INVOKE_SPECIFICATION;
    public static int P_INVOKE_SPECIFICATION_NODE_TYPE_INDEX;
    public static CompositeNodeType PARAMETER;
    public static int PARAMETER_NODE_TYPE_INDEX;
    public static CompositeNodeType PARAMETER_ATTRIBUTE;
    public static int PARAMETER_ATTRIBUTE_NODE_TYPE_INDEX;
    public static CompositeNodeType PARAMETER_ATTRIBUTE_LIST;
    public static int PARAMETER_ATTRIBUTE_LIST_NODE_TYPE_INDEX;
    public static CompositeNodeType PERMISSION_DECLARATION;
    public static int PERMISSION_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType PERMISSION_SET_BODY;
    public static int PERMISSION_SET_BODY_NODE_TYPE_INDEX;
    public static CompositeNodeType PERMISSION_SET_DECLARATION;
    public static int PERMISSION_SET_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType PINNED_TYPE;
    public static int PINNED_TYPE_NODE_TYPE_INDEX;
    public static CompositeNodeType PREDEFINED_FIELD_ATTRIBUTE_LIST;
    public static int PREDEFINED_FIELD_ATTRIBUTE_LIST_NODE_TYPE_INDEX;
    public static CompositeNodeType PREDEFINED_METHOD_ATTRIBUTE_LIST;
    public static int PREDEFINED_METHOD_ATTRIBUTE_LIST_NODE_TYPE_INDEX;
    public static CompositeNodeType PREDEFINED_SCALAR_TYPE;
    public static int PREDEFINED_SCALAR_TYPE_NODE_TYPE_INDEX;
    public static CompositeNodeType PROPERTY_BODY;
    public static int PROPERTY_BODY_NODE_TYPE_INDEX;
    public static CompositeNodeType PROPERTY_HEADER;
    public static int PROPERTY_HEADER_NODE_TYPE_INDEX;
    public static CompositeNodeType QUALIFIED_NAME;
    public static int QUALIFIED_NAME_NODE_TYPE_INDEX;
    public static CompositeNodeType REFERENCE_NAME;
    public static int REFERENCE_NAME_NODE_TYPE_INDEX;
    public static CompositeNodeType SEH_BLOCK;
    public static int SEH_BLOCK_NODE_TYPE_INDEX;
    public static CompositeNodeType SEH_CLAUSE;
    public static int SEH_CLAUSE_NODE_TYPE_INDEX;
    public static CompositeNodeType SIGNATURE_DEF;
    public static int SIGNATURE_DEF_NODE_TYPE_INDEX;
    public static CompositeNodeType SPECIALNAME_ATTRIBUTE_LIST;
    public static int SPECIALNAME_ATTRIBUTE_LIST_NODE_TYPE_INDEX;
    public static CompositeNodeType STATIC_CONSTRUCTOR_NAME;
    public static int STATIC_CONSTRUCTOR_NAME_NODE_TYPE_INDEX;
    public static CompositeNodeType TARGET_LABEL;
    public static int TARGET_LABEL_NODE_TYPE_INDEX;
    public static CompositeNodeType TARGET_LABEL_LIST;
    public static int TARGET_LABEL_LIST_NODE_TYPE_INDEX;
    public static CompositeNodeType TRY_BLOCK;
    public static int TRY_BLOCK_NODE_TYPE_INDEX;
    public static CompositeNodeType TYPE_REFERENCE;
    public static int TYPE_REFERENCE_NODE_TYPE_INDEX;
    public static CompositeNodeType TYPE_RESOLUTION_SCOPE;
    public static int TYPE_RESOLUTION_SCOPE_NODE_TYPE_INDEX;
    public static CompositeNodeType TYPE_SPEC_WITH_DOUBLE_COLON;
    public static int TYPE_SPEC_WITH_DOUBLE_COLON_NODE_TYPE_INDEX;
    public static CompositeNodeType TYPE_USAGE;
    public static int TYPE_USAGE_NODE_TYPE_INDEX;
    public static CompositeNodeType UNMANAGED_POINTER_TYPE;
    public static int UNMANAGED_POINTER_TYPE_NODE_TYPE_INDEX;
    public static CompositeNodeType USER_SCALAR_TYPE;
    public static int USER_SCALAR_TYPE_NODE_TYPE_INDEX;
    public static CompositeNodeType VARIANT_TYPE;
    public static int VARIANT_TYPE_NODE_TYPE_INDEX;
    public static CompositeNodeType VTENTRY;
    public static int VTENTRY_NODE_TYPE_INDEX;
    public static CompositeNodeType VTFIXUP_ATTRIBUTE;
    public static int VTFIXUP_ATTRIBUTE_NODE_TYPE_INDEX;
    public static CompositeNodeType VTFIXUP_ATTRIBUTE_LIST;
    public static int VTFIXUP_ATTRIBUTE_LIST_NODE_TYPE_INDEX;
    public static CompositeNodeType ZEROINIT;
    public static int ZEROINIT_NODE_TYPE_INDEX;
    private static ElementType();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.Emitbyte : ILCompositeElement {
    public static short DOT_EMITBYTE_KEYWORD;
    public static short EMITBYTE_VALUE;
    public NodeType NodeType { get; }
    public ITokenNode DotEmitbyteKeyword { get; }
    public ITokenNode EmitbyteValue { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_DotEmitbyteKeyword();
    public virtual ITokenNode get_EmitbyteValue();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.Entrypoint : ILCompositeElement {
    public static short DOT_ENTRYPOINT_KEYWORD;
    public NodeType NodeType { get; }
    public ITokenNode DotEntrypointKeyword { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_DotEntrypointKeyword();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.EventBody : ILCompositeElement {
    public static short LBRACE;
    public static short CUSTOM_ATTRIBUTE;
    public static short COMP_CONTROL;
    public static short EXTERN_SOURCE;
    public static short PROPERTY_MEMBER;
    public static short RBRACE;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<ICustomAttribute> Attributes { get; }
    public TreeNodeEnumerable`1<ICustomAttribute> AttributesEnumerable { get; }
    public TreeNodeCollection`1<ICompControl> CompControls { get; }
    public TreeNodeEnumerable`1<ICompControl> CompControlsEnumerable { get; }
    public TreeNodeCollection`1<IExternSource> ExternSources { get; }
    public TreeNodeEnumerable`1<IExternSource> ExternSourcesEnumerable { get; }
    public ITokenNode LBrace { get; }
    public TreeNodeCollection`1<IILEventMember> Members { get; }
    public TreeNodeEnumerable`1<IILEventMember> MembersEnumerable { get; }
    public ITokenNode RBrace { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<ICustomAttribute> get_Attributes();
    public virtual TreeNodeEnumerable`1<ICustomAttribute> get_AttributesEnumerable();
    public virtual TreeNodeCollection`1<ICompControl> get_CompControls();
    public virtual TreeNodeEnumerable`1<ICompControl> get_CompControlsEnumerable();
    public virtual TreeNodeCollection`1<IExternSource> get_ExternSources();
    public virtual TreeNodeEnumerable`1<IExternSource> get_ExternSourcesEnumerable();
    public virtual ITokenNode get_LBrace();
    public virtual TreeNodeCollection`1<IILEventMember> get_Members();
    public virtual TreeNodeEnumerable`1<IILEventMember> get_MembersEnumerable();
    public virtual ITokenNode get_RBrace();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.EventHeader : ILCompositeElement {
    public static short EVENT_ATTRIBUTE_LIST;
    public static short TYPE_SPEC;
    public static short NAME;
    public NodeType NodeType { get; }
    public ISpecialnameAttributeList EventAttributeList { get; }
    public IIdentifier Name { get; }
    public ITypeSpec TypeSpec { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ISpecialnameAttributeList get_EventAttributeList();
    public virtual IIdentifier get_Name();
    public virtual ITypeSpec get_TypeSpec();
    public virtual ISpecialnameAttributeList SetEventAttributeList(ISpecialnameAttributeList param);
    public virtual IIdentifier SetName(IIdentifier param);
    public virtual ITypeSpec SetTypeSpec(ITypeSpec param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.Export : ILCompositeElement {
    public static short DOT_EXPORT_KEYWORD;
    public static short LBRACKET;
    public static short NUMBER;
    public static short RBRACKET;
    public static short AS_KEYWORD;
    public static short EXPORT_NAME;
    public NodeType NodeType { get; }
    public ITokenNode AsKeyword { get; }
    public ITokenNode DotExportKeyword { get; }
    public IIdentifier ExportName { get; }
    public ITokenNode LBracket { get; }
    public ITokenNode Number { get; }
    public ITokenNode RBracket { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_AsKeyword();
    public virtual ITokenNode get_DotExportKeyword();
    public virtual IIdentifier get_ExportName();
    public virtual ITokenNode get_LBracket();
    public virtual ITokenNode get_Number();
    public virtual ITokenNode get_RBracket();
    public virtual IIdentifier SetExportName(IIdentifier param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ExternSource : ILCompositeElement {
    public static short DOT_LINE_KEYWORD;
    public static short LINE_NUMBER;
    public static short COLON;
    public static short COLUMN_NUMBER;
    public static short FILE_NAME;
    public NodeType NodeType { get; }
    public ITokenNode Colon { get; }
    public ITokenNode ColumnNumber { get; }
    public ITokenNode DotLineKeyword { get; }
    public ITokenNode FileName { get; }
    public ITokenNode LineNumber { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_Colon();
    public virtual ITokenNode get_ColumnNumber();
    public virtual ITokenNode get_DotLineKeyword();
    public virtual ITokenNode get_FileName();
    public virtual ITokenNode get_LineNumber();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.FaultClause : ILCompositeElement {
    public static short FAULT_KEYWORD;
    public NodeType NodeType { get; }
    public ITokenNode FaultKeyword { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_FaultKeyword();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.FieldByteOffset : ILCompositeElement {
    public static short LBRACKER;
    public static short BYTE_OFFSET;
    public static short RBRACKER;
    public NodeType NodeType { get; }
    public ITokenNode ByteOffset { get; }
    public ITokenNode LBracket { get; }
    public ITokenNode RBracket { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_ByteOffset();
    public virtual ITokenNode get_LBracket();
    public virtual ITokenNode get_RBracket();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.FieldInit : ILCompositeElement {
    public static short BOOL_KEYWORD;
    public static short LPARENTH;
    public static short TRUE_KEYWORD;
    public static short FALSE_KEYWORD;
    public static short RPARENTH;
    public static short BYTEARRAY_KEYWORD;
    public static short BLOB;
    public static short CHAR_KEYWORD;
    public static short INT8_KEYWORD;
    public static short INT16_KEYWORD;
    public static short INT32_KEYWORD;
    public static short INT64_KEYWORD;
    public static short UINT8_KEYWORD;
    public static short UINT16_KEYWORD;
    public static short UINT32_KEYWORD;
    public static short UINT64_KEYWORD;
    public static short INITIALIZER;
    public static short FLOAT32_KEYWORD;
    public static short FLOAT64_KEYWORD;
    public static short MINUS;
    public static short INT_VALUE;
    public static short FLOAT_VALUE;
    public static short UNSIGNED_KEYWORD;
    public static short STRING_VALUE;
    public static short NULLREF_KEYWORD;
    public NodeType NodeType { get; }
    public IBlob Blob { get; }
    public ITokenNode BoolKeyword { get; }
    public ITokenNode BytearrayKeyword { get; }
    public ITokenNode CharKeyword { get; }
    public ITokenNode FalseKeyword { get; }
    public ITokenNode Float32Keyword { get; }
    public ITokenNode Float64Keyword { get; }
    public ITokenNode FloatValue { get; }
    public IIntInitializer Initializer { get; }
    public ITokenNode Int16Keyword { get; }
    public ITokenNode Int32Keyword { get; }
    public ITokenNode Int64Keyword { get; }
    public ITokenNode Int8Keyword { get; }
    public ITokenNode IntValue { get; }
    public ITokenNode LParenth { get; }
    public ITokenNode Minus { get; }
    public ITokenNode NullrefKeyword { get; }
    public ITokenNode RParenth { get; }
    public ITokenNode StringValue { get; }
    public ITokenNode TrueKeyword { get; }
    public ITokenNode Uint16Keyword { get; }
    public ITokenNode Uint32Keyword { get; }
    public ITokenNode Uint64Keyword { get; }
    public ITokenNode Uint8Keyword { get; }
    public ITokenNode UnsignedKeyword { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IBlob get_Blob();
    public virtual ITokenNode get_BoolKeyword();
    public virtual ITokenNode get_BytearrayKeyword();
    public virtual ITokenNode get_CharKeyword();
    public virtual ITokenNode get_FalseKeyword();
    public virtual ITokenNode get_Float32Keyword();
    public virtual ITokenNode get_Float64Keyword();
    public virtual ITokenNode get_FloatValue();
    public virtual IIntInitializer get_Initializer();
    public virtual ITokenNode get_Int16Keyword();
    public virtual ITokenNode get_Int32Keyword();
    public virtual ITokenNode get_Int64Keyword();
    public virtual ITokenNode get_Int8Keyword();
    public virtual ITokenNode get_IntValue();
    public virtual ITokenNode get_LParenth();
    public virtual ITokenNode get_Minus();
    public virtual ITokenNode get_NullrefKeyword();
    public virtual ITokenNode get_RParenth();
    public virtual ITokenNode get_StringValue();
    public virtual ITokenNode get_TrueKeyword();
    public virtual ITokenNode get_Uint16Keyword();
    public virtual ITokenNode get_Uint32Keyword();
    public virtual ITokenNode get_Uint64Keyword();
    public virtual ITokenNode get_Uint8Keyword();
    public virtual ITokenNode get_UnsignedKeyword();
    public virtual IBlob SetBlob(IBlob param);
    public virtual IIntInitializer SetInitializer(IIntInitializer param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.FieldReferenceName : TypeMemberReferenceNameBase {
    public static short FIELD_NAME;
    public NodeType NodeType { get; }
    public IPresentableName Name { get; }
    protected IPresentableName PresentableName { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IPresentableName get_Name();
    public virtual IPresentableName SetName(IPresentableName param);
    public virtual string ToString();
    protected virtual IPresentableName get_PresentableName();
    protected virtual IReference CreateReference();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.FieldReferenceNameReference : TypeMemberReferenceNameReferenceBase`1<IFieldReferenceName> {
    public FieldReferenceNameReference(IFieldReferenceName owner);
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.FilterClause : ILCompositeElement {
    public static short FILTER_KEYWORD;
    public static short FILTER_FROM_LABEL;
    public static short FILTER_FROM_OFFSET;
    public static short FILTER_BLOCK;
    public NodeType NodeType { get; }
    public IMethodScopeBlock FilterBlock { get; }
    public IIdentifier FilterFromLabel { get; }
    public ITokenNode FilterFromOffset { get; }
    public ITokenNode FilterKeyword { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IMethodScopeBlock get_FilterBlock();
    public virtual IIdentifier get_FilterFromLabel();
    public virtual ITokenNode get_FilterFromOffset();
    public virtual ITokenNode get_FilterKeyword();
    public virtual IMethodScopeBlock SetFilterBlock(IMethodScopeBlock param);
    public virtual IIdentifier SetFilterFromLabel(IIdentifier param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.FinallyClause : ILCompositeElement {
    public static short FINALLY_KEYWORD;
    public NodeType NodeType { get; }
    public ITokenNode FinallyKeyword { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_FinallyKeyword();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.FromToBlock : ILCompositeElement {
    public static short FROM_LABEL;
    public static short TO_KEYWORD;
    public static short TO_LABEL;
    public static short FROM_OFFSET;
    public static short TO_OFFSET;
    public NodeType NodeType { get; }
    public IIdentifier FromLabel { get; }
    public ITokenNode FromOffset { get; }
    public ITokenNode ToKeyword { get; }
    public IIdentifier ToLabel { get; }
    public ITokenNode ToOffset { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IIdentifier get_FromLabel();
    public virtual ITokenNode get_FromOffset();
    public virtual ITokenNode get_ToKeyword();
    public virtual IIdentifier get_ToLabel();
    public virtual ITokenNode get_ToOffset();
    public virtual IIdentifier SetFromLabel(IIdentifier param);
    public virtual IIdentifier SetToLabel(IIdentifier param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.GenArity : ILCompositeElement {
    public static short LT;
    public static short LBRACKET;
    public static short GENERIC_PARAMETERS_NUMBER;
    public static short RBRACKET;
    public static short GT;
    public NodeType NodeType { get; }
    public ITokenNode GenericParametersNumber { get; }
    public ITokenNode Gt { get; }
    public ITokenNode LBracket { get; }
    public ITokenNode Lt { get; }
    public ITokenNode RBracket { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_GenericParametersNumber();
    public virtual ITokenNode get_Gt();
    public virtual ITokenNode get_LBracket();
    public virtual ITokenNode get_Lt();
    public virtual ITokenNode get_RBracket();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.GenericArgumentList : ILCompositeElement {
    public static short LT;
    public static short GEN_ARGUMENT;
    public static short COMMA;
    public static short GT;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<ITypeUsage> Arguments { get; }
    public TreeNodeEnumerable`1<ITypeUsage> ArgumentsEnumerable { get; }
    public TreeNodeCollection`1<ITokenNode> Commas { get; }
    public TreeNodeEnumerable`1<ITokenNode> CommasEnumerable { get; }
    public ITokenNode Gt { get; }
    public ITokenNode Lt { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<ITypeUsage> get_Arguments();
    public virtual TreeNodeEnumerable`1<ITypeUsage> get_ArgumentsEnumerable();
    public virtual TreeNodeCollection`1<ITokenNode> get_Commas();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_CommasEnumerable();
    public virtual ITokenNode get_Gt();
    public virtual ITokenNode get_Lt();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.GenericParameterAttributeList : ILCompositeElement {
    public static short ATTR;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<ITokenNode> Attributes { get; }
    public TreeNodeEnumerable`1<ITokenNode> AttributesEnumerable { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<ITokenNode> get_Attributes();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_AttributesEnumerable();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.GenericParameterConstraintList : ILCompositeElement {
    public static short LPARENTH;
    public static short TYPE;
    public static short COMMA;
    public static short RPARENTH;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<ITokenNode> Commas { get; }
    public TreeNodeEnumerable`1<ITokenNode> CommasEnumerable { get; }
    public ITokenNode LParenth { get; }
    public ITokenNode RParenth { get; }
    public TreeNodeCollection`1<ITypeUsage> Types { get; }
    public TreeNodeEnumerable`1<ITypeUsage> TypesEnumerable { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<ITokenNode> get_Commas();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_CommasEnumerable();
    public virtual ITokenNode get_LParenth();
    public virtual ITokenNode get_RParenth();
    public virtual TreeNodeCollection`1<ITypeUsage> get_Types();
    public virtual TreeNodeEnumerable`1<ITypeUsage> get_TypesEnumerable();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.GenericParameterDeclaration : ILDeclarationBase {
    public static short ATTR_LIST;
    public static short CONSTRAINT_LIST;
    public static short NAME;
    public NodeType NodeType { get; }
    public IGenericParameterAttributeList GenericParameterAttributeList { get; }
    public IGenericParameterConstraintList GenericParameterConstraintList { get; }
    public IIdentifier Name { get; }
    public int Index { get; }
    public bool IsMethodGenericParameter { get; }
    public bool IsTypeGenericParameter { get; }
    public ITypeElement OwnerType { get; }
    public IMethod OwnerMethod { get; }
    [NotNullAttribute]
private IGenericParameterDeclarationList ContainingParameterList { get; }
    [CanBeNullAttribute]
private IILMethodDeclaration ContainingMethodDeclaration { get; }
    protected IPresentableName PresentableName { get; }
    public IDeclaredElement DeclaredElement { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IGenericParameterAttributeList get_GenericParameterAttributeList();
    public virtual IGenericParameterConstraintList get_GenericParameterConstraintList();
    public virtual IIdentifier get_Name();
    public virtual IGenericParameterAttributeList SetGenericParameterAttributeList(IGenericParameterAttributeList param);
    public virtual IGenericParameterConstraintList SetGenericParameterConstraintList(IGenericParameterConstraintList param);
    public virtual IIdentifier SetName(IIdentifier param);
    public virtual string ToString();
    public sealed virtual int get_Index();
    public sealed virtual bool get_IsMethodGenericParameter();
    public sealed virtual bool get_IsTypeGenericParameter();
    public sealed virtual ITypeElement get_OwnerType();
    public sealed virtual IMethod get_OwnerMethod();
    private IGenericParameterDeclarationList get_ContainingParameterList();
    private IILMethodDeclaration get_ContainingMethodDeclaration();
    protected virtual IPresentableName get_PresentableName();
    public virtual IDeclaredElement get_DeclaredElement();
    protected virtual IReference CreateReference();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.GenericParameterDeclarationList : ILCompositeElement {
    public static short LT;
    public static short GEN_PARAM;
    public static short COMMA;
    public static short GT;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<ITokenNode> Commas { get; }
    public TreeNodeEnumerable`1<ITokenNode> CommasEnumerable { get; }
    public TreeNodeCollection`1<IGenericParameterDeclaration> GenericParameterDeclarations { get; }
    public TreeNodeEnumerable`1<IGenericParameterDeclaration> GenericParameterDeclarationsEnumerable { get; }
    public ITokenNode Gt { get; }
    public ITokenNode Lt { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<ITokenNode> get_Commas();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_CommasEnumerable();
    public virtual TreeNodeCollection`1<IGenericParameterDeclaration> get_GenericParameterDeclarations();
    public virtual TreeNodeEnumerable`1<IGenericParameterDeclaration> get_GenericParameterDeclarationsEnumerable();
    public virtual ITokenNode get_Gt();
    public virtual ITokenNode get_Lt();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.GenericParameterDeclarationReference : GenericParameterReference`1<IGenericParameterDeclaration> {
    public GenericParameterDeclarationReference(IGenericParameterDeclaration owner);
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.GenericParameterPointer : ILCompositeElement {
    public static short LBRACKER;
    public static short GENERIC_PARAMETER_INDEX;
    public static short RBRACKER;
    public static short GENERIC_PARAMETER_NAME;
    public NodeType NodeType { get; }
    public ITokenNode GenericParameterIndex { get; }
    public IIdentifier GenericParameterName { get; }
    public ITokenNode LBracket { get; }
    public ITokenNode RBracket { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_GenericParameterIndex();
    public virtual IIdentifier get_GenericParameterName();
    public virtual ITokenNode get_LBracket();
    public virtual ITokenNode get_RBracket();
    public virtual IIdentifier SetGenericParameterName(IIdentifier param);
    public virtual string ToString();
}
internal abstract class JetBrains.ReSharper.Psi.IL.Impl.Tree.GenericParameterReference`1 : IlTreeReferenceBase`1<TOwnerElement> {
    protected GenericParameterReference`1(TOwnerElement owner);
    public virtual string GetName();
    public virtual TreeTextRange GetTreeTextRange();
    protected virtual ISymbolFilter[] GetSymbolFilters();
    public virtual ResolveResultWithInfo ResolveWithoutCache();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.GenericScalarType : ILCompositeElement {
    public static short GENERIC_PARAMETER_MARKER;
    public static short METHOD_GENERIC_PARAMETER_MARKER;
    public static short GENERIC_PARAMETER_INDEX;
    public static short GENERIC_PARAMETER_NAME;
    private GenericScalarTypeReference modreq(System.Runtime.CompilerServices.IsVolatile) myReference;
    public NodeType NodeType { get; }
    public ITokenNode GenericParameterIndex { get; }
    public ITokenNode GenericParameterMarker { get; }
    public IIdentifier GenericParameterName { get; }
    public ITokenNode MethodGenericParameterMarker { get; }
    public ITypeElement OwnerType { get; }
    public IMethod OwnerMethod { get; }
    public IReference Reference { get; }
    public string ShortName { get; }
    public string FullName { get; }
    public string PresentationName { get; }
    public bool ContainsQuotedStrings { get; }
    public int Index { get; }
    public bool IsMethodGenericParameter { get; }
    public bool IsTypeGenericParameter { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_GenericParameterIndex();
    public virtual ITokenNode get_GenericParameterMarker();
    public virtual IIdentifier get_GenericParameterName();
    public virtual ITokenNode get_MethodGenericParameterMarker();
    public virtual IIdentifier SetGenericParameterName(IIdentifier param);
    public virtual string ToString();
    [CanBeNullAttribute]
private ITypeMemberUsage TryGetTypeMemberUsage();
    [CanBeNullAttribute]
private ITypeSpec TryGetOwnerTypeFromTypeMemberUsage();
    [CanBeNullAttribute]
private IMethodReferenceName TryGetOwnerMethodFromTypeMemberUsage();
    public sealed virtual ITypeElement get_OwnerType();
    public sealed virtual IMethod get_OwnerMethod();
    public sealed virtual IPsiModule GetScopePsiModule();
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    protected virtual void PreInit();
    public sealed virtual IReference get_Reference();
    public virtual ReferenceCollection GetFirstClassReferences();
    public sealed virtual string get_ShortName();
    public sealed virtual string get_FullName();
    public sealed virtual string get_PresentationName();
    public sealed virtual bool get_ContainsQuotedStrings();
    public sealed virtual int get_Index();
    public sealed virtual bool get_IsMethodGenericParameter();
    public sealed virtual bool get_IsTypeGenericParameter();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.GenericScalarTypeReference : GenericParameterReference`1<IGenericScalarType> {
    public GenericScalarTypeReference(IGenericScalarType owner);
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.GenericType : ILCompositeElement {
    public static short GEN_ARG_LIST;
    public NodeType NodeType { get; }
    public IGenericArgumentList GenericArgumentList { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IGenericArgumentList get_GenericArgumentList();
    public virtual IGenericArgumentList SetGenericArgumentList(IGenericArgumentList param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.HandlerBlock : ILCompositeElement {
    public static short HANDLER_KEYWORD;
    public static short FROM_TO_BLOCK;
    public static short SCOPE_BLOCK;
    public NodeType NodeType { get; }
    public IFromToBlock FromToBlock { get; }
    public ITokenNode HandlerKeyword { get; }
    public IMethodScopeBlock ScopeBlock { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IFromToBlock get_FromToBlock();
    public virtual ITokenNode get_HandlerKeyword();
    public virtual IMethodScopeBlock get_ScopeBlock();
    public virtual IFromToBlock SetFromToBlock(IFromToBlock param);
    public virtual IMethodScopeBlock SetScopeBlock(IMethodScopeBlock param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.Identifier : ILCompositeElement {
    private string myName;
    private bool myContainsQuotedStrings;
    public NodeType NodeType { get; }
    public string Name { get; }
    private string JetBrains.ReSharper.Psi.IL.Tree.IPresentableName.ShortName { get; }
    private string JetBrains.ReSharper.Psi.IL.Tree.IPresentableName.FullName { get; }
    public string PresentationName { get; }
    public bool ContainsQuotedStrings { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public sealed virtual string get_Name();
    private void CalculateNameAndQs();
    private sealed virtual override string JetBrains.ReSharper.Psi.IL.Tree.IPresentableName.get_ShortName();
    private sealed virtual override string JetBrains.ReSharper.Psi.IL.Tree.IPresentableName.get_FullName();
    public sealed virtual string get_PresentationName();
    public sealed virtual bool get_ContainsQuotedStrings();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.IdentifierWithOwnerQualification : ILCompositeElement {
    public static short OWNER_QUALIFICATION;
    public static short DOT;
    public static short IDENTIFIER;
    public NodeType NodeType { get; }
    public ITokenNode Dot { get; }
    public IIdentifier Identifier { get; }
    public IQualifiedName OwnerQualification { get; }
    public string ShortName { get; }
    public string FullName { get; }
    public string PresentationName { get; }
    public bool ContainsQuotedStrings { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_Dot();
    public virtual IIdentifier get_Identifier();
    public virtual IQualifiedName get_OwnerQualification();
    public virtual IIdentifier SetIdentifier(IIdentifier param);
    public virtual IQualifiedName SetOwnerQualification(IQualifiedName param);
    public sealed virtual string get_ShortName();
    public sealed virtual string get_FullName();
    public sealed virtual string get_PresentationName();
    public sealed virtual bool get_ContainsQuotedStrings();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILAccessorDeclaration : ILCompositeElement {
    public static short CALL_CONV;
    public static short TYPE;
    public static short TYPE_SPEC;
    public static short METHOD_REFERENCE_NAME;
    public static short SIGNATURE;
    public NodeType NodeType { get; }
    public ICallConvention CallConvention { get; }
    public IMethodReferenceName MethodName { get; }
    public ISignatureDef Signature { get; }
    public ITypeUsage Type { get; }
    public IILTreeNode TypeSpec { get; }
    public string MemberName { get; }
    public ITypeMemberReferenceName MemberReferenceName { get; }
    public ITypeSpec OwnerType { get; }
    public int GenericArgumentsCount { get; }
    public MemberKind Kind { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ICallConvention get_CallConvention();
    public virtual IMethodReferenceName get_MethodName();
    public virtual ISignatureDef get_Signature();
    public virtual ITypeUsage get_Type();
    public virtual IILTreeNode get_TypeSpec();
    public virtual ICallConvention SetCallConvention(ICallConvention param);
    public virtual IMethodReferenceName SetMethodName(IMethodReferenceName param);
    public virtual ISignatureDef SetSignature(ISignatureDef param);
    public virtual ITypeUsage SetType(ITypeUsage param);
    public virtual IILTreeNode SetTypeSpec(IILTreeNode param);
    public virtual string ToString();
    public sealed virtual string get_MemberName();
    public sealed virtual ITypeMemberReferenceName get_MemberReferenceName();
    public sealed virtual ITypeSpec get_OwnerType();
    public sealed virtual int get_GenericArgumentsCount();
    public sealed virtual MemberKind get_Kind();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILAddonDeclaration : ILCompositeElement {
    public static short DOT_ADDON_KEYWORD;
    public NodeType NodeType { get; }
    public ITokenNode DotAddonKeyword { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_DotAddonKeyword();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILAliasDeclaration : ILCompositeElement {
    public static short DOT_TYPEDEF_KEYWORD;
    public static short MEMBERR_REFERENCE;
    public static short TYPE_REFERENCE;
    public static short AS_KEYWORD;
    public static short ALIAS_NAME;
    public NodeType NodeType { get; }
    public IQualifiedName AliasName { get; }
    public ITokenNode AsKeyword { get; }
    public ITokenNode DotTypedefKeyword { get; }
    public IMemberRef MemberReference { get; }
    public ITypeReference TypeReference { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IQualifiedName get_AliasName();
    public virtual ITokenNode get_AsKeyword();
    public virtual ITokenNode get_DotTypedefKeyword();
    public virtual IMemberRef get_MemberReference();
    public virtual ITypeReference get_TypeReference();
    public virtual IQualifiedName SetAliasName(IQualifiedName param);
    public virtual IMemberRef SetMemberReference(IMemberRef param);
    public virtual ITypeReference SetTypeReference(ITypeReference param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILAssemblyAutodetection : ILCompositeElement {
    public static short AUTO_KEYWORD;
    public NodeType NodeType { get; }
    public ITokenNode AutoKeyword { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_AutoKeyword();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILAssemblyCulture : ILCompositeElement {
    public static short CULTURE_KEYWORD;
    public static short LOCALE_KEYWORD;
    public static short VALUE;
    public NodeType NodeType { get; }
    public ITokenNode CultureKeyword { get; }
    public ITokenNode LocaleKeyword { get; }
    public ITokenNode Value { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_CultureKeyword();
    public virtual ITokenNode get_LocaleKeyword();
    public virtual ITokenNode get_Value();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILAssemblyDeclaration : ILCompositeElement {
    public static short DOT_ASSEMBLY_KEYWORD;
    public static short ASSEMBLY_NAME;
    public static short LBRACE;
    public static short PROPERTIES;
    public static short CUSTOM_ATTRIBUTE;
    public static short COMP_CONTROL;
    public static short SEQURITY_DECLARATION;
    public static short EXTERN_SOURCE;
    public static short RBRACE;
    public NodeType NodeType { get; }
    public IQualifiedName AssemblyName { get; }
    public TreeNodeCollection`1<ICustomAttribute> Attributes { get; }
    public TreeNodeEnumerable`1<ICustomAttribute> AttributesEnumerable { get; }
    public TreeNodeCollection`1<ICompControl> CompControls { get; }
    public TreeNodeEnumerable`1<ICompControl> CompControlsEnumerable { get; }
    public ITokenNode DotAssemblyKeyword { get; }
    public TreeNodeCollection`1<IExternSource> ExternSources { get; }
    public TreeNodeEnumerable`1<IExternSource> ExternSourcesEnumerable { get; }
    public ITokenNode LBrace { get; }
    public TreeNodeCollection`1<IILAssemblyProperty> Properties { get; }
    public TreeNodeEnumerable`1<IILAssemblyProperty> PropertiesEnumerable { get; }
    public ITokenNode RBrace { get; }
    public TreeNodeCollection`1<ISequrityDeclaration> SecurityDeclarations { get; }
    public TreeNodeEnumerable`1<ISequrityDeclaration> SecurityDeclarationsEnumerable { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IQualifiedName get_AssemblyName();
    public virtual TreeNodeCollection`1<ICustomAttribute> get_Attributes();
    public virtual TreeNodeEnumerable`1<ICustomAttribute> get_AttributesEnumerable();
    public virtual TreeNodeCollection`1<ICompControl> get_CompControls();
    public virtual TreeNodeEnumerable`1<ICompControl> get_CompControlsEnumerable();
    public virtual ITokenNode get_DotAssemblyKeyword();
    public virtual TreeNodeCollection`1<IExternSource> get_ExternSources();
    public virtual TreeNodeEnumerable`1<IExternSource> get_ExternSourcesEnumerable();
    public virtual ITokenNode get_LBrace();
    public virtual TreeNodeCollection`1<IILAssemblyProperty> get_Properties();
    public virtual TreeNodeEnumerable`1<IILAssemblyProperty> get_PropertiesEnumerable();
    public virtual ITokenNode get_RBrace();
    public virtual TreeNodeCollection`1<ISequrityDeclaration> get_SecurityDeclarations();
    public virtual TreeNodeEnumerable`1<ISequrityDeclaration> get_SecurityDeclarationsEnumerable();
    public virtual IQualifiedName SetAssemblyName(IQualifiedName param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILAssemblyHash : ILCompositeElement {
    public static short PUBLICKEYTOKEN_KEYWORD;
    public static short EQ;
    public static short BLOB;
    public NodeType NodeType { get; }
    public IBlob Blob { get; }
    public ITokenNode EqSign { get; }
    public ITokenNode PublicKeyTokenKeyword { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IBlob get_Blob();
    public virtual ITokenNode get_EqSign();
    public virtual ITokenNode get_PublicKeyTokenKeyword();
    public virtual IBlob SetBlob(IBlob param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILAssemblyHashAlgorithm : ILCompositeElement {
    public static short HASH_KEYWORD;
    public static short ALGORITHM_KEYWORD;
    public static short VALUE;
    public NodeType NodeType { get; }
    public ITokenNode AlgorithmKeyword { get; }
    public ITokenNode HashKeyword { get; }
    public ITokenNode Value { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_AlgorithmKeyword();
    public virtual ITokenNode get_HashKeyword();
    public virtual ITokenNode get_Value();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILAssemblyPublicKey : ILCompositeElement {
    public static short PUBLICKEY_KEYWORD;
    public static short EQ;
    public static short BLOB;
    public NodeType NodeType { get; }
    public IBlob Blob { get; }
    public ITokenNode EqSign { get; }
    public ITokenNode PublicKeyKeyword { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IBlob get_Blob();
    public virtual ITokenNode get_EqSign();
    public virtual ITokenNode get_PublicKeyKeyword();
    public virtual IBlob SetBlob(IBlob param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILAssemblyPublicKeyToken : ILCompositeElement {
    public static short PUBLICKEYTOKEN_KEYWORD;
    public static short EQ;
    public static short BLOB;
    public NodeType NodeType { get; }
    public IBlob Blob { get; }
    public ITokenNode EqSign { get; }
    public ITokenNode PublicKeyTokenKeyword { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IBlob get_Blob();
    public virtual ITokenNode get_EqSign();
    public virtual ITokenNode get_PublicKeyTokenKeyword();
    public virtual IBlob SetBlob(IBlob param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILAssemblyVersion : ILCompositeElement {
    public static short VER_KEYWORD;
    public static short VALUE1;
    public static short VALUE2;
    public static short VALUE3;
    public static short VALUE4;
    public NodeType NodeType { get; }
    public IIntOrWildcard Value1 { get; }
    public IIntOrWildcard Value2 { get; }
    public IIntOrWildcard Value3 { get; }
    public IIntOrWildcard Value4 { get; }
    public ITokenNode VerKeyword { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IIntOrWildcard get_Value1();
    public virtual IIntOrWildcard get_Value2();
    public virtual IIntOrWildcard get_Value3();
    public virtual IIntOrWildcard get_Value4();
    public virtual ITokenNode get_VerKeyword();
    public virtual IIntOrWildcard SetValue1(IIntOrWildcard param);
    public virtual IIntOrWildcard SetValue2(IIntOrWildcard param);
    public virtual IIntOrWildcard SetValue3(IIntOrWildcard param);
    public virtual IIntOrWildcard SetValue4(IIntOrWildcard param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILClassDeclaration : ILDeclarationBase {
    public static short DOT_CLASS_KEYWORD;
    public static short CLASS_HEADER;
    public static short CLASS_BODY;
    [CompilerGeneratedAttribute]
private IDeclaredElement <CacheDeclaredElement>k__BackingField;
    public NodeType NodeType { get; }
    public IClassBody ClassBody { get; }
    public IClassHeader ClassHeader { get; }
    public ITokenNode DotClassKeyword { get; }
    public string CLRName { get; }
    public IEnumerable`1<IDeclaredType> SuperTypes { get; }
    public IDeclaredElement CacheDeclaredElement { get; public set; }
    public IDeclaredElement DeclaredElement { get; }
    private ITypeMember JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration.DeclaredElement { get; }
    private ITypeElement JetBrains.ReSharper.Psi.Tree.ITypeDeclaration.DeclaredElement { get; }
    public IReadOnlyList`1<ITypeDeclaration> NestedTypeDeclarations { get; }
    public IEnumerable`1<ITypeDeclaration> NestedTypeDeclarationsEnumerable { get; }
    public IReadOnlyList`1<ITypeMemberDeclaration> MemberDeclarations { get; }
    public IReadOnlyList`1<ITypeDeclaration> TypeDeclarations { get; }
    public IEnumerable`1<ITypeDeclaration> TypeDeclarationsEnumerable { get; }
    protected IPresentableName PresentableName { get; }
    public int LevelDelta { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IClassBody get_ClassBody();
    public virtual IClassHeader get_ClassHeader();
    public virtual ITokenNode get_DotClassKeyword();
    public virtual IClassBody SetClassBody(IClassBody param);
    public virtual IClassHeader SetClassHeader(IClassHeader param);
    public sealed virtual string get_CLRName();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.IL.Impl.Tree.ILClassDeclaration/<get_SuperTypes>d__21")]
public sealed virtual IEnumerable`1<IDeclaredType> get_SuperTypes();
    public sealed virtual ITypeDeclaration GetContainingTypeDeclaration();
    [CompilerGeneratedAttribute]
public sealed virtual IDeclaredElement get_CacheDeclaredElement();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheDeclaredElement(IDeclaredElement value);
    public virtual IDeclaredElement get_DeclaredElement();
    private sealed virtual override ITypeMember JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration.get_DeclaredElement();
    private sealed virtual override ITypeElement JetBrains.ReSharper.Psi.Tree.ITypeDeclaration.get_DeclaredElement();
    public sealed virtual IReadOnlyList`1<ITypeDeclaration> get_NestedTypeDeclarations();
    public sealed virtual IEnumerable`1<ITypeDeclaration> get_NestedTypeDeclarationsEnumerable();
    public sealed virtual IReadOnlyList`1<ITypeMemberDeclaration> get_MemberDeclarations();
    public sealed virtual IReadOnlyList`1<ITypeDeclaration> get_TypeDeclarations();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.IL.Impl.Tree.ILClassDeclaration/<get_TypeDeclarationsEnumerable>d__42")]
public sealed virtual IEnumerable`1<ITypeDeclaration> get_TypeDeclarationsEnumerable();
    protected virtual IPresentableName get_PresentableName();
    public virtual TreeTextRange GetNameRange();
    public sealed virtual ISymbolTable AddGlobalDeclarations(ISymbolTable parentTable, int level, SymbolTableMode mode);
    public sealed virtual int get_LevelDelta();
    public virtual string ToString();
    protected virtual IReference CreateReference();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.IlClassDeclarationReference : IlDeclarationReferenceBase`2<ILClassDeclaration, ITypeElement> {
    private string myName;
    private int myTypeParameterCount;
    public IlClassDeclarationReference(ILClassDeclaration owner);
    public virtual string GetName();
    private int GetTypeParameterCount();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    protected virtual ISymbolFilter[] GetSymbolFilters();
}
internal abstract class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILCompositeElement : CompositeElement {
    public PsiLanguageType Language { get; }
    public virtual PsiLanguageType get_Language();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILCorFlags : ILCompositeElement {
    public static short DOT_CORFLAGS_KEYWORD;
    public static short VALUE;
    public NodeType NodeType { get; }
    public ITokenNode DotCorFlagsKeyword { get; }
    public ITokenNode Value { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_DotCorFlagsKeyword();
    public virtual ITokenNode get_Value();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILDataDeclaration : ILCompositeElement {
    public static short DOT_DATA_KEYWORD;
    public static short DATA_LABEL;
    public static short EQ;
    public static short LBRACE;
    public static short DATA_DECLARATION_ITEM;
    public static short COMMA;
    public static short RBRACE;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<ITokenNode> Commas { get; }
    public TreeNodeEnumerable`1<ITokenNode> CommasEnumerable { get; }
    public IDataLabel DataLabel { get; }
    public ITokenNode DotDataKeyword { get; }
    public ITokenNode Eq { get; }
    public TreeNodeCollection`1<IDataDeclarationItem> Item { get; }
    public TreeNodeEnumerable`1<IDataDeclarationItem> ItemEnumerable { get; }
    public TreeNodeCollection`1<IDataDeclarationItem> Items { get; }
    public TreeNodeEnumerable`1<IDataDeclarationItem> ItemsEnumerable { get; }
    public ITokenNode LBrace { get; }
    public ITokenNode RBrace { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<ITokenNode> get_Commas();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_CommasEnumerable();
    public virtual IDataLabel get_DataLabel();
    public virtual ITokenNode get_DotDataKeyword();
    public virtual ITokenNode get_Eq();
    public virtual TreeNodeCollection`1<IDataDeclarationItem> get_Item();
    public virtual TreeNodeEnumerable`1<IDataDeclarationItem> get_ItemEnumerable();
    public virtual TreeNodeCollection`1<IDataDeclarationItem> get_Items();
    public virtual TreeNodeEnumerable`1<IDataDeclarationItem> get_ItemsEnumerable();
    public virtual ITokenNode get_LBrace();
    public virtual ITokenNode get_RBrace();
    public virtual IDataLabel SetDataLabel(IDataLabel param);
    public virtual string ToString();
}
internal abstract class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILDeclarationBase : ILCompositeElement {
    private IReference myReference;
    [CanBeNullAttribute]
protected IPresentableName PresentableName { get; }
    public IDeclaredElement DeclaredElement { get; }
    public string DeclaredName { get; }
    public string ShortName { get; }
    public string FullName { get; }
    public string PresentationName { get; }
    public bool ContainsQuotedStrings { get; }
    public IReference Reference { get; }
    protected abstract virtual IPresentableName get_PresentableName();
    public abstract virtual IDeclaredElement get_DeclaredElement();
    [NotNullAttribute]
protected abstract virtual IReference CreateReference();
    public sealed virtual string get_DeclaredName();
    public virtual TreeTextRange GetNameRange();
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
    public sealed virtual void SetName(string name);
    public sealed virtual bool IsSynthetic();
    public sealed virtual string get_ShortName();
    public sealed virtual string get_FullName();
    public sealed virtual string get_PresentationName();
    public sealed virtual bool get_ContainsQuotedStrings();
    public sealed virtual IReference get_Reference();
    public virtual ReferenceCollection GetFirstClassReferences();
}
internal abstract class JetBrains.ReSharper.Psi.IL.Impl.Tree.IlDeclarationReferenceBase`2 : IlTreeReferenceBase`1<TOwnerElement> {
    protected IlDeclarationReferenceBase`2(TOwnerElement owner);
    public virtual string GetName();
    protected ISymbolFilter GetDeclarationKindFilter();
    public virtual TreeTextRange GetTreeTextRange();
    protected virtual ISymbolFilter[] GetSymbolFilters();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILEventDeclaration : ILTypeMemberDeclarationBase {
    public static short DOT_EVENT_KEYWORD;
    public static short HEADER;
    public static short BODY;
    public NodeType NodeType { get; }
    public ITokenNode DotEventKeyword { get; }
    public IEventBody EventBody { get; }
    public IEventHeader EventHeader { get; }
    protected IPresentableName PresentableName { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_DotEventKeyword();
    public virtual IEventBody get_EventBody();
    public virtual IEventHeader get_EventHeader();
    public virtual IEventBody SetEventBody(IEventBody param);
    public virtual IEventHeader SetEventHeader(IEventHeader param);
    protected virtual IPresentableName get_PresentableName();
    public virtual string ToString();
    protected virtual IReference CreateReference();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.IlEventDeclarationReference : IlTypeMemberDeclarationReferenceBase`2<ILEventDeclaration, IEvent> {
    public IlEventDeclarationReference(ILEventDeclaration owner);
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILExternAssemblyDeclaration : ILCompositeElement {
    public static short DOT_ASSEMBLY_KEYWORD;
    public static short EXTERN_KEYWORD;
    public static short ASSEMBLY_NAME;
    public static short AS_KEYWORD;
    public static short ALIAS_NAME;
    public static short LBRACE;
    public static short PROPERTIES;
    public static short COMP_CONTROL;
    public static short CUSTOM_ATTRIBUTE;
    public static short RBRACE;
    public NodeType NodeType { get; }
    public IQualifiedName AliasName { get; }
    public ITokenNode AsKeyword { get; }
    public IQualifiedName AssemblyName { get; }
    public TreeNodeCollection`1<ICustomAttribute> Attributes { get; }
    public TreeNodeEnumerable`1<ICustomAttribute> AttributesEnumerable { get; }
    public TreeNodeCollection`1<ICompControl> CompControls { get; }
    public TreeNodeEnumerable`1<ICompControl> CompControlsEnumerable { get; }
    public ITokenNode DotAssemblyKeyword { get; }
    public ITokenNode ExternKeyword { get; }
    public ITokenNode LBrace { get; }
    public TreeNodeCollection`1<IILExternAssemblyProperty> Properties { get; }
    public TreeNodeEnumerable`1<IILExternAssemblyProperty> PropertiesEnumerable { get; }
    public ITokenNode RBrace { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IQualifiedName get_AliasName();
    public virtual ITokenNode get_AsKeyword();
    public virtual IQualifiedName get_AssemblyName();
    public virtual TreeNodeCollection`1<ICustomAttribute> get_Attributes();
    public virtual TreeNodeEnumerable`1<ICustomAttribute> get_AttributesEnumerable();
    public virtual TreeNodeCollection`1<ICompControl> get_CompControls();
    public virtual TreeNodeEnumerable`1<ICompControl> get_CompControlsEnumerable();
    public virtual ITokenNode get_DotAssemblyKeyword();
    public virtual ITokenNode get_ExternKeyword();
    public virtual ITokenNode get_LBrace();
    public virtual TreeNodeCollection`1<IILExternAssemblyProperty> get_Properties();
    public virtual TreeNodeEnumerable`1<IILExternAssemblyProperty> get_PropertiesEnumerable();
    public virtual ITokenNode get_RBrace();
    public virtual IQualifiedName SetAliasName(IQualifiedName param);
    public virtual IQualifiedName SetAssemblyName(IQualifiedName param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILExternClassAssemblyProperty : ILCompositeElement {
    public static short DOT_ASSEMBLY_KEYWORD;
    public static short EXTERN_KEYWORD;
    public static short ASSEMBLY_NAME;
    public NodeType NodeType { get; }
    public IQualifiedName AssemblyName { get; }
    public ITokenNode DotAssemblyKeyword { get; }
    public ITokenNode ExternKeyword { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IQualifiedName get_AssemblyName();
    public virtual ITokenNode get_DotAssemblyKeyword();
    public virtual ITokenNode get_ExternKeyword();
    public virtual IQualifiedName SetAssemblyName(IQualifiedName param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILExternClassClassProperty : ILCompositeElement {
    public static short DOT_CLASS_KEYWORD;
    public static short EXTERN_KEYWORD;
    public static short NAME;
    public NodeType NodeType { get; }
    public ITokenNode DotClassKeyword { get; }
    public ITokenNode ExternKeyword { get; }
    public IPresentableName Name { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_DotClassKeyword();
    public virtual ITokenNode get_ExternKeyword();
    public virtual IPresentableName get_Name();
    public virtual IPresentableName SetName(IPresentableName param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILExternClassDeclaration : ILCompositeElement {
    public static short DOT_CLASS_KEYWORD;
    public static short EXTERN_KEYWORD;
    public static short NESTED_KEYWORD;
    public static short PUBLIC_KEYWORD;
    public static short NAME;
    public static short LBRACE;
    public static short PROPERTY;
    public static short COMP_CONTROL;
    public static short CUSTOM_ATTRIBUTE;
    public static short RBRACE;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<ICustomAttribute> Attributes { get; }
    public TreeNodeEnumerable`1<ICustomAttribute> AttributesEnumerable { get; }
    public TreeNodeCollection`1<ICompControl> CompControls { get; }
    public TreeNodeEnumerable`1<ICompControl> CompControlsEnumerable { get; }
    public ITokenNode DotClassKeyword { get; }
    public ITokenNode ExternKeyword { get; }
    public ITokenNode LBrace { get; }
    public IIdentifierWithOwnerQualification Name { get; }
    public ITokenNode NestedKeyword { get; }
    public TreeNodeCollection`1<IILExternClassProperty> Properties { get; }
    public TreeNodeEnumerable`1<IILExternClassProperty> PropertiesEnumerable { get; }
    public ITokenNode PublicKeyword { get; }
    public ITokenNode RBrace { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<ICustomAttribute> get_Attributes();
    public virtual TreeNodeEnumerable`1<ICustomAttribute> get_AttributesEnumerable();
    public virtual TreeNodeCollection`1<ICompControl> get_CompControls();
    public virtual TreeNodeEnumerable`1<ICompControl> get_CompControlsEnumerable();
    public virtual ITokenNode get_DotClassKeyword();
    public virtual ITokenNode get_ExternKeyword();
    public virtual ITokenNode get_LBrace();
    public virtual IIdentifierWithOwnerQualification get_Name();
    public virtual ITokenNode get_NestedKeyword();
    public virtual TreeNodeCollection`1<IILExternClassProperty> get_Properties();
    public virtual TreeNodeEnumerable`1<IILExternClassProperty> get_PropertiesEnumerable();
    public virtual ITokenNode get_PublicKeyword();
    public virtual ITokenNode get_RBrace();
    public virtual IIdentifierWithOwnerQualification SetName(IIdentifierWithOwnerQualification param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILExternClassFileProperty : ILCompositeElement {
    public static short DOT_FILE_KEYWORD;
    public static short NAME;
    public NodeType NodeType { get; }
    public ITokenNode DotFileKeyword { get; }
    public IPresentableName Name { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_DotFileKeyword();
    public virtual IPresentableName get_Name();
    public virtual IPresentableName SetName(IPresentableName param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILExternModuleDeclaration : ILCompositeElement {
    public static short DOT_MODULE_KEYWORD;
    public static short EXTERN_KEYWORD;
    public static short FILE_NAME;
    public NodeType NodeType { get; }
    public ITokenNode DotModuleKeyword { get; }
    public ITokenNode ExternKeyword { get; }
    public IQualifiedName FileName { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_DotModuleKeyword();
    public virtual ITokenNode get_ExternKeyword();
    public virtual IQualifiedName get_FileName();
    public virtual IQualifiedName SetFileName(IQualifiedName param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILFieldDeclaration : ILTypeMemberDeclarationBase {
    public static short DOT_FIELD_KEYWORD;
    public static short Field_ATTRIBUTE_LIST;
    public static short TYPE;
    public static short NAME;
    public static short EQ;
    public static short FIELD_INIT;
    public static short AT_KEYWORD;
    public static short DATA_LABEL;
    public NodeType NodeType { get; }
    public ITokenNode AtKeyword { get; }
    public IDataLabel DataLabel { get; }
    public ITokenNode DotFieldKeyword { get; }
    public ITokenNode Eq { get; }
    public IPredefinedFieldAttributeList FieldAttributeList { get; }
    public IFieldInit FieldInit { get; }
    public IIdentifier Name { get; }
    public ITypeUsage Type { get; }
    protected IPresentableName PresentableName { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_AtKeyword();
    public virtual IDataLabel get_DataLabel();
    public virtual ITokenNode get_DotFieldKeyword();
    public virtual ITokenNode get_Eq();
    public virtual IPredefinedFieldAttributeList get_FieldAttributeList();
    public virtual IFieldInit get_FieldInit();
    public virtual IIdentifier get_Name();
    public virtual ITypeUsage get_Type();
    public virtual IDataLabel SetDataLabel(IDataLabel param);
    public virtual IPredefinedFieldAttributeList SetFieldAttributeList(IPredefinedFieldAttributeList param);
    public virtual IFieldInit SetFieldInit(IFieldInit param);
    public virtual IIdentifier SetName(IIdentifier param);
    public virtual ITypeUsage SetType(ITypeUsage param);
    protected virtual IPresentableName get_PresentableName();
    public virtual string ToString();
    protected virtual IReference CreateReference();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.IlFieldDeclarationReference : IlTypeMemberDeclarationReferenceBase`2<ILFieldDeclaration, IField> {
    public IlFieldDeclarationReference(ILFieldDeclaration owner);
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILFile : ILFileBase {
    public static short DECLARATION;
    public static short COMP_CONTROL;
    public static short SEQURITY_DECLARATION;
    public static short CUSTOM_ATTRIBUTE;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<ICustomAttribute> Attributes { get; }
    public TreeNodeEnumerable`1<ICustomAttribute> AttributesEnumerable { get; }
    public TreeNodeCollection`1<ICompControl> CompControls { get; }
    public TreeNodeEnumerable`1<ICompControl> CompControlsEnumerable { get; }
    public TreeNodeCollection`1<IILDeclaration> Declarations { get; }
    public TreeNodeEnumerable`1<IILDeclaration> DeclarationsEnumerable { get; }
    public TreeNodeCollection`1<ISequrityDeclaration> SecurityDeclarations { get; }
    public TreeNodeEnumerable`1<ISequrityDeclaration> SecurityDeclarationsEnumerable { get; }
    public int LevelDelta { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<ICustomAttribute> get_Attributes();
    public virtual TreeNodeEnumerable`1<ICustomAttribute> get_AttributesEnumerable();
    public virtual TreeNodeCollection`1<ICompControl> get_CompControls();
    public virtual TreeNodeEnumerable`1<ICompControl> get_CompControlsEnumerable();
    public virtual TreeNodeCollection`1<IILDeclaration> get_Declarations();
    public virtual TreeNodeEnumerable`1<IILDeclaration> get_DeclarationsEnumerable();
    public virtual TreeNodeCollection`1<ISequrityDeclaration> get_SecurityDeclarations();
    public virtual TreeNodeEnumerable`1<ISequrityDeclaration> get_SecurityDeclarationsEnumerable();
    public virtual string ToString();
    public sealed virtual ISymbolTable AddGlobalDeclarations(ISymbolTable parentTable, int level, SymbolTableMode mode);
    public sealed virtual int get_LevelDelta();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILFileAlignmentDeclaration : ILCompositeElement {
    public static short DOT_FILE_KEYWORD;
    public static short ALIGNMENT_KEYWORD;
    public static short VALUE;
    public NodeType NodeType { get; }
    public ITokenNode AlignmentKeyword { get; }
    public ITokenNode DotFileKeyword { get; }
    public ITokenNode Value { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_AlignmentKeyword();
    public virtual ITokenNode get_DotFileKeyword();
    public virtual ITokenNode get_Value();
    public virtual string ToString();
}
internal abstract class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILFileBase : FileElementBase {
    public PsiLanguageType Language { get; }
    public virtual PsiLanguageType get_Language();
    public abstract virtual void Accept(TreeNodeVisitor visitor);
    public abstract virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public abstract virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILFileDeclaration : ILCompositeElement {
    public static short DOT_FILE_KEYWORD;
    public static short NOMETADATA_KEYWORD;
    public static short FILE_NAME;
    public static short PUBLICKEYTOKEN_KEYWORD;
    public static short EQ;
    public static short BLOB;
    public static short DOT_ENTRYPOINT_KEYWORD;
    public NodeType NodeType { get; }
    public IBlob Blob { get; }
    public ITokenNode DotEntryPointKeyword { get; }
    public ITokenNode DotFileKeyword { get; }
    public ITokenNode EqSign { get; }
    public IQualifiedName FileName { get; }
    public ITokenNode NoMetadataKeyword { get; }
    public ITokenNode PublicKeyTokenKeyword { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IBlob get_Blob();
    public virtual ITokenNode get_DotEntryPointKeyword();
    public virtual ITokenNode get_DotFileKeyword();
    public virtual ITokenNode get_EqSign();
    public virtual IQualifiedName get_FileName();
    public virtual ITokenNode get_NoMetadataKeyword();
    public virtual ITokenNode get_PublicKeyTokenKeyword();
    public virtual IBlob SetBlob(IBlob param);
    public virtual IQualifiedName SetFileName(IQualifiedName param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILFireDeclaration : ILCompositeElement {
    public static short DOT_FIRE_KEYWORD;
    public NodeType NodeType { get; }
    public ITokenNode DotFireKeyword { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_DotFireKeyword();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILForwardClassDeclaration : ILCompositeElement {
    public static short DOT_CLASS_KEYWORD;
    public static short EXTERN_KEYWORD;
    public static short FORWARDER_KEYWORD;
    public static short CLASS_NAME;
    public static short LBRACE;
    public static short PROPERTY;
    public static short COMP_CONTROL;
    public static short CUSTOM_ATTRIBUTE;
    public static short RBRACE;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<ICustomAttribute> Attributes { get; }
    public TreeNodeEnumerable`1<ICustomAttribute> AttributesEnumerable { get; }
    public IIdentifierWithOwnerQualification ClassName { get; }
    public TreeNodeCollection`1<ICompControl> CompControls { get; }
    public TreeNodeEnumerable`1<ICompControl> CompControlsEnumerable { get; }
    public ITokenNode DotClassKeyword { get; }
    public ITokenNode ExternKeyword { get; }
    public ITokenNode ForwarderKeyword { get; }
    public ITokenNode LBrace { get; }
    public TreeNodeCollection`1<IILExternClassAssemblyProperty> Properties { get; }
    public TreeNodeEnumerable`1<IILExternClassAssemblyProperty> PropertiesEnumerable { get; }
    public ITokenNode RBrace { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<ICustomAttribute> get_Attributes();
    public virtual TreeNodeEnumerable`1<ICustomAttribute> get_AttributesEnumerable();
    public virtual IIdentifierWithOwnerQualification get_ClassName();
    public virtual TreeNodeCollection`1<ICompControl> get_CompControls();
    public virtual TreeNodeEnumerable`1<ICompControl> get_CompControlsEnumerable();
    public virtual ITokenNode get_DotClassKeyword();
    public virtual ITokenNode get_ExternKeyword();
    public virtual ITokenNode get_ForwarderKeyword();
    public virtual ITokenNode get_LBrace();
    public virtual TreeNodeCollection`1<IILExternClassAssemblyProperty> get_Properties();
    public virtual TreeNodeEnumerable`1<IILExternClassAssemblyProperty> get_PropertiesEnumerable();
    public virtual ITokenNode get_RBrace();
    public virtual IIdentifierWithOwnerQualification SetClassName(IIdentifierWithOwnerQualification param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILGetDeclaration : ILCompositeElement {
    public static short DOT_GET_KEYWORD;
    public NodeType NodeType { get; }
    public ITokenNode DotGetKeyword { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_DotGetKeyword();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILImageBaseDeclaration : ILCompositeElement {
    public static short DOT_IMAGEBASE_KEYWORD;
    public static short VALUE;
    public NodeType NodeType { get; }
    public ITokenNode DotImageBaseKeyword { get; }
    public ITokenNode Value { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_DotImageBaseKeyword();
    public virtual ITokenNode get_Value();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILInstanceLayoutDeclaration : ILCompositeElement {
    public static short DOT_PACK_KEYWORD;
    public static short FIELD_ADDRESS_ALIGNMENT;
    public static short DOT_SIZE_KEYWORD;
    public static short MIN_SIZE;
    public NodeType NodeType { get; }
    public ITokenNode DotPackKeyword { get; }
    public ITokenNode DotSizeKeyword { get; }
    public ITokenNode FieldAdressAlignment { get; }
    public ITokenNode MinSize { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_DotPackKeyword();
    public virtual ITokenNode get_DotSizeKeyword();
    public virtual ITokenNode get_FieldAdressAlignment();
    public virtual ITokenNode get_MinSize();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILInterfaceimplSpecification : ILCompositeElement {
    public static short DOT_INTERFACEIMPL_KEYWORD;
    public static short TYPE_KEYWORD;
    public static short TYPE_SPEC;
    public NodeType NodeType { get; }
    public ITokenNode DotInterfaceimplKeyword { get; }
    public ITokenNode TypeKeyword { get; }
    public ITypeSpec TypeSpec { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_DotInterfaceimplKeyword();
    public virtual ITokenNode get_TypeKeyword();
    public virtual ITypeSpec get_TypeSpec();
    public virtual ITypeSpec SetTypeSpec(ITypeSpec param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILLanguageDeclaration : ILCompositeElement {
    public static short DOT_LANGUAGE_KEYWORD;
    public static short SQSTRING_LITERAL_1;
    public static short COMMA_1;
    public static short SQSTRING_LITERAL_2;
    public static short COMMA_2;
    public static short SQSTRING_LITERAL_3;
    public NodeType NodeType { get; }
    public ITokenNode Comma1 { get; }
    public ITokenNode Comma2 { get; }
    public ITokenNode DotLanguageKeyword { get; }
    public ITokenNode String1 { get; }
    public ITokenNode String2 { get; }
    public ITokenNode String3 { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_Comma1();
    public virtual ITokenNode get_Comma2();
    public virtual ITokenNode get_DotLanguageKeyword();
    public virtual ITokenNode get_String1();
    public virtual ITokenNode get_String2();
    public virtual ITokenNode get_String3();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILManifestAssemblyResource : ILCompositeElement {
    public static short DOT_ASSEMBLY_KEYWORD;
    public static short EXTERN_KEYWORD;
    public static short ASSEMBLY_NAME;
    public NodeType NodeType { get; }
    public IQualifiedName AssemblyName { get; }
    public ITokenNode DotAssemblyKeyword { get; }
    public ITokenNode ExternKeyword { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IQualifiedName get_AssemblyName();
    public virtual ITokenNode get_DotAssemblyKeyword();
    public virtual ITokenNode get_ExternKeyword();
    public virtual IQualifiedName SetAssemblyName(IQualifiedName param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILManifestFileResource : ILCompositeElement {
    public static short DOT_FILE_KEYWORD;
    public static short FILE_NAME;
    public static short AT_KEYWORD;
    public static short OFFSET;
    public NodeType NodeType { get; }
    public ITokenNode AtKeyword { get; }
    public ITokenNode DotFileKeyword { get; }
    public IQualifiedName FileName { get; }
    public ITokenNode Offset { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_AtKeyword();
    public virtual ITokenNode get_DotFileKeyword();
    public virtual IQualifiedName get_FileName();
    public virtual ITokenNode get_Offset();
    public virtual IQualifiedName SetFileName(IQualifiedName param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILManifestResource : ILCompositeElement {
    public static short DOT_MRESOURCE_KEYWORD;
    public static short PRIVATE_KEYWORD;
    public static short PUBLIC_KEYWORD;
    public static short NAME;
    public static short LBRACE;
    public static short DECLARATION;
    public static short COMP_CONTROL;
    public static short CUSTOM_ATTRIBUTE;
    public static short RBRACE;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<ICustomAttribute> Attributes { get; }
    public TreeNodeEnumerable`1<ICustomAttribute> AttributesEnumerable { get; }
    public TreeNodeCollection`1<ICompControl> CompControls { get; }
    public TreeNodeEnumerable`1<ICompControl> CompControlsEnumerable { get; }
    public TreeNodeCollection`1<IILManifestResourceDeclaration> Declaration { get; }
    public TreeNodeEnumerable`1<IILManifestResourceDeclaration> DeclarationEnumerable { get; }
    public ITokenNode DotMResourceKeyword { get; }
    public ITokenNode LBrace { get; }
    public IQualifiedName Name { get; }
    public ITokenNode PrivateKeyword { get; }
    public ITokenNode PublicKeyword { get; }
    public ITokenNode RBrace { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<ICustomAttribute> get_Attributes();
    public virtual TreeNodeEnumerable`1<ICustomAttribute> get_AttributesEnumerable();
    public virtual TreeNodeCollection`1<ICompControl> get_CompControls();
    public virtual TreeNodeEnumerable`1<ICompControl> get_CompControlsEnumerable();
    public virtual TreeNodeCollection`1<IILManifestResourceDeclaration> get_Declaration();
    public virtual TreeNodeEnumerable`1<IILManifestResourceDeclaration> get_DeclarationEnumerable();
    public virtual ITokenNode get_DotMResourceKeyword();
    public virtual ITokenNode get_LBrace();
    public virtual IQualifiedName get_Name();
    public virtual ITokenNode get_PrivateKeyword();
    public virtual ITokenNode get_PublicKeyword();
    public virtual ITokenNode get_RBrace();
    public virtual IQualifiedName SetName(IQualifiedName param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILMethodDeclaration : ILTypeMemberDeclarationBase {
    public static short DOT_METHOD_KEYWORD;
    public static short HEADER;
    public static short BODY;
    private bool myVariablesAreCollected;
    private object myLockObject;
    private BidirectionalMapOnDictionary`2<int, ILocalVariable> myMapIndexToVariable;
    private Dictionary`2<string, int> myVariableNameToIndex;
    public NodeType NodeType { get; }
    public ITokenNode DotMethodKeyword { get; }
    public IMethodScopeBlock MethodBody { get; }
    public IMethodHeader MethodHeader { get; }
    protected IPresentableName PresentableName { get; }
    public int LevelDelta { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_DotMethodKeyword();
    public virtual IMethodScopeBlock get_MethodBody();
    public virtual IMethodHeader get_MethodHeader();
    public virtual IMethodScopeBlock SetMethodBody(IMethodScopeBlock param);
    public virtual IMethodHeader SetMethodHeader(IMethodHeader param);
    protected virtual IPresentableName get_PresentableName();
    public sealed virtual ISymbolTable AddGlobalDeclarations(ISymbolTable parentTable, int level, SymbolTableMode mode);
    public sealed virtual int get_LevelDelta();
    public virtual string ToString();
    protected virtual IReference CreateReference();
    private void CollectLocalVariables();
    [CanBeNullAttribute]
private static List`1<string> TryGetContainingNames(IIdentifier compositeName);
    public sealed virtual int GetLocalVariableIndex(ILocalVariable localVariable);
    public sealed virtual int GetLocalVariableIndex(string localVariableName);
    public sealed virtual ILocalVariable GetLocalVariable(int localVariableIndex);
    public sealed virtual int GetParameterIndex(IParameter parameter);
    public sealed virtual int GetParameterIndex(string parameterName);
    public sealed virtual int GetParameterIndex(IILMethodParamSpecification paramSpecification);
    public sealed virtual IParameter GetParameter(int parameterIndex);
    public sealed virtual bool IsStatic();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.IlMethodDeclarationReference : IlTypeMemberDeclarationReferenceBase`2<ILMethodDeclaration, IFunction> {
    public IlMethodDeclarationReference(ILMethodDeclaration owner);
    private int GetTypeParameterCount();
    protected virtual ISymbolFilter[] GetSymbolFilters();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILMethodOverridingDeclarationFull : ILCompositeElement {
    public static short DOT_OVERRIDE_KEYWORD;
    public static short METHOD_KEYWORD;
    public static short CALL_CONV;
    public static short TYPE;
    public static short TYPE_SPEC;
    public static short DOUBLE_COLON;
    public static short METHOD_REFERENCE_NAME;
    public static short GEN_ARITY;
    public static short SIGNATURE;
    public NodeType NodeType { get; }
    public ICallConvention CallConvention { get; }
    public ITokenNode DotOverrideKeyword { get; }
    public ITokenNode DoubleColon { get; }
    public IGenArity GenArity { get; }
    public ITokenNode MethodKeyword { get; }
    public IMethodReferenceName MethodName { get; }
    public ISignatureDef Signature { get; }
    public ITypeUsage Type { get; }
    public IILTreeNode TypeSpec { get; }
    public string MemberName { get; }
    public ITypeMemberReferenceName MemberReferenceName { get; }
    public ITypeSpec OwnerType { get; }
    public int GenericArgumentsCount { get; }
    public MemberKind Kind { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ICallConvention get_CallConvention();
    public virtual ITokenNode get_DotOverrideKeyword();
    public virtual ITokenNode get_DoubleColon();
    public virtual IGenArity get_GenArity();
    public virtual ITokenNode get_MethodKeyword();
    public virtual IMethodReferenceName get_MethodName();
    public virtual ISignatureDef get_Signature();
    public virtual ITypeUsage get_Type();
    public virtual IILTreeNode get_TypeSpec();
    public virtual ICallConvention SetCallConvention(ICallConvention param);
    public virtual IGenArity SetGenArity(IGenArity param);
    public virtual IMethodReferenceName SetMethodName(IMethodReferenceName param);
    public virtual ISignatureDef SetSignature(ISignatureDef param);
    public virtual ITypeUsage SetType(ITypeUsage param);
    public virtual IILTreeNode SetTypeSpec(IILTreeNode param);
    public virtual string ToString();
    public sealed virtual string get_MemberName();
    public sealed virtual ITypeMemberReferenceName get_MemberReferenceName();
    public sealed virtual ITypeSpec get_OwnerType();
    public sealed virtual int get_GenericArgumentsCount();
    public sealed virtual MemberKind get_Kind();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILMethodOverridingDeclarationInClassFull : ILCompositeElement {
    public static short OVERRIDDEN_METHOD;
    public static short WITH_KEYWORD;
    public static short IMPLEMENTATION_METHOD;
    public NodeType NodeType { get; }
    public IILMethodOverridingDeclarationFull ImplementationMethod { get; }
    public IILMethodOverridingDeclarationFull OverriddenMethod { get; }
    public ITokenNode WithKeyword { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IILMethodOverridingDeclarationFull get_ImplementationMethod();
    public virtual IILMethodOverridingDeclarationFull get_OverriddenMethod();
    public virtual ITokenNode get_WithKeyword();
    public virtual IILMethodOverridingDeclarationFull SetImplementationMethod(IILMethodOverridingDeclarationFull param);
    public virtual IILMethodOverridingDeclarationFull SetOverriddenMethod(IILMethodOverridingDeclarationFull param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILMethodOverridingDeclarationInClassShort : ILCompositeElement {
    public static short OVERRIDDEN_METHOD;
    public static short WITH_KEYWORD;
    public static short IMPLEMENTATION_METHOD;
    public NodeType NodeType { get; }
    public IImplementationMethodDeclarationShort ImplementationMethod { get; }
    public IILMethodOverridingDeclarationShort OverriddenMethod { get; }
    public ITokenNode WithKeyword { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IImplementationMethodDeclarationShort get_ImplementationMethod();
    public virtual IILMethodOverridingDeclarationShort get_OverriddenMethod();
    public virtual ITokenNode get_WithKeyword();
    public virtual IImplementationMethodDeclarationShort SetImplementationMethod(IImplementationMethodDeclarationShort param);
    public virtual IILMethodOverridingDeclarationShort SetOverriddenMethod(IILMethodOverridingDeclarationShort param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILMethodOverridingDeclarationShort : ILCompositeElement {
    public static short DOT_OVERRIDE_KEYWORD;
    public static short TYPE_SPEC;
    public static short DOUBLE_COLON;
    public static short METHOD_REFERENCE_NAME;
    public NodeType NodeType { get; }
    public ITokenNode DotOverrideKeyword { get; }
    public ITokenNode DoubleColon { get; }
    public IMethodReferenceName MethodName { get; }
    public IILTreeNode TypeSpec { get; }
    public string MemberName { get; }
    public ITypeMemberReferenceName MemberReferenceName { get; }
    public ITypeSpec OwnerType { get; }
    public int GenericArgumentsCount { get; }
    public ITypeUsage Type { get; }
    public ISignatureDef Signature { get; }
    public MemberKind Kind { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_DotOverrideKeyword();
    public virtual ITokenNode get_DoubleColon();
    public virtual IMethodReferenceName get_MethodName();
    public virtual IILTreeNode get_TypeSpec();
    public virtual IMethodReferenceName SetMethodName(IMethodReferenceName param);
    public virtual IILTreeNode SetTypeSpec(IILTreeNode param);
    public virtual string ToString();
    public sealed virtual string get_MemberName();
    public sealed virtual ITypeMemberReferenceName get_MemberReferenceName();
    public sealed virtual ITypeSpec get_OwnerType();
    public sealed virtual int get_GenericArgumentsCount();
    public sealed virtual ITypeUsage get_Type();
    public sealed virtual ISignatureDef get_Signature();
    public sealed virtual MemberKind get_Kind();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILMethodParamSpecification : ILCompositeElement {
    public static short DOT_PARAM_KEYWORD;
    public static short LBRACKER;
    public static short PARAMETER_INDEX;
    public static short RBRACKER;
    public static short EQ;
    public static short FIELD_INIT;
    public NodeType NodeType { get; }
    public ITokenNode DotParamKeyword { get; }
    public ITokenNode Eq { get; }
    public IFieldInit FieldInit { get; }
    public ITokenNode LBracket { get; }
    public ITokenNode ParameterIndex { get; }
    public ITokenNode RBracket { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_DotParamKeyword();
    public virtual ITokenNode get_Eq();
    public virtual IFieldInit get_FieldInit();
    public virtual ITokenNode get_LBracket();
    public virtual ITokenNode get_ParameterIndex();
    public virtual ITokenNode get_RBracket();
    public virtual IFieldInit SetFieldInit(IFieldInit param);
    public virtual string ToString();
    public sealed virtual bool IsReturnValue();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILModuleDeclaration : ILCompositeElement {
    public static short DOT_MODULE_KEYWORD;
    public static short FILE_NAME;
    public NodeType NodeType { get; }
    public ITokenNode DotModuleKeyword { get; }
    public IQualifiedName FileName { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_DotModuleKeyword();
    public virtual IQualifiedName get_FileName();
    public virtual IQualifiedName SetFileName(IQualifiedName param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILMscorlibDeclaration : ILCompositeElement {
    public static short DOT_MSCORLIB_KEYWORD;
    public NodeType NodeType { get; }
    public ITokenNode DotMscorlibKeyword { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_DotMscorlibKeyword();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILNamespaceBody : ILCompositeElement {
    public static short LBRACE;
    public static short NAMESPACE_DECLARATION;
    public static short CLASS_DECLARATION;
    public static short RBRACE;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<IILClassDeclaration> ClassDeclarations { get; }
    public TreeNodeEnumerable`1<IILClassDeclaration> ClassDeclarationsEnumerable { get; }
    public ITokenNode LBrace { get; }
    public TreeNodeCollection`1<IILNamespaceDeclaration> NamespaceDeclarations { get; }
    public TreeNodeEnumerable`1<IILNamespaceDeclaration> NamespaceDeclarationsEnumerable { get; }
    public ITokenNode RBrace { get; }
    public int LevelDelta { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<IILClassDeclaration> get_ClassDeclarations();
    public virtual TreeNodeEnumerable`1<IILClassDeclaration> get_ClassDeclarationsEnumerable();
    public virtual ITokenNode get_LBrace();
    public virtual TreeNodeCollection`1<IILNamespaceDeclaration> get_NamespaceDeclarations();
    public virtual TreeNodeEnumerable`1<IILNamespaceDeclaration> get_NamespaceDeclarationsEnumerable();
    public virtual ITokenNode get_RBrace();
    public virtual string ToString();
    public sealed virtual ISymbolTable AddGlobalDeclarations(ISymbolTable parentTable, int level, SymbolTableMode mode);
    public sealed virtual int get_LevelDelta();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILNamespaceDeclaration : ILDeclarationBase {
    public static short DOT_NAMESPACE_KEYWORD;
    public static short NAME;
    public static short DODY;
    [CompilerGeneratedAttribute]
private IDeclaredElement <CacheDeclaredElement>k__BackingField;
    public NodeType NodeType { get; }
    public IILNamespaceBody Body { get; }
    public ITokenNode DotNamespaceKeyword { get; }
    public IIdentifierWithOwnerQualification Name { get; }
    public IILNamespaceDeclaration ContainingNamespace { get; }
    public IDeclaredElement CacheDeclaredElement { get; public set; }
    public IDeclaredElement DeclaredElement { get; }
    private INamespace JetBrains.ReSharper.Psi.Tree.INamespaceDeclaration.DeclaredElement { get; }
    private string JetBrains.ReSharper.Psi.Tree.INamespaceDeclaration.QualifiedName { get; }
    protected IPresentableName PresentableName { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IILNamespaceBody get_Body();
    public virtual ITokenNode get_DotNamespaceKeyword();
    public virtual IIdentifierWithOwnerQualification get_Name();
    public virtual IILNamespaceBody SetBody(IILNamespaceBody param);
    public virtual IIdentifierWithOwnerQualification SetName(IIdentifierWithOwnerQualification param);
    public sealed virtual IILNamespaceDeclaration get_ContainingNamespace();
    [CompilerGeneratedAttribute]
public sealed virtual IDeclaredElement get_CacheDeclaredElement();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheDeclaredElement(IDeclaredElement value);
    public virtual IDeclaredElement get_DeclaredElement();
    private sealed virtual override INamespace JetBrains.ReSharper.Psi.Tree.INamespaceDeclaration.get_DeclaredElement();
    public sealed virtual DocumentRange GetDeclaredNameDocumentRange();
    private sealed virtual override string JetBrains.ReSharper.Psi.Tree.INamespaceDeclaration.get_QualifiedName();
    public sealed virtual void SetQualifiedName(string qualifiedName);
    protected virtual IPresentableName get_PresentableName();
    public virtual TreeTextRange GetNameRange();
    public virtual string ToString();
    protected virtual IReference CreateReference();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.IlNamespaceDeclarationReference : IlDeclarationReferenceBase`2<ILNamespaceDeclaration, INamespace> {
    public IlNamespaceDeclarationReference(ILNamespaceDeclaration owner);
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILOtherDeclaration : ILCompositeElement {
    public static short DOT_OTHER_KEYWORD;
    public NodeType NodeType { get; }
    public ITokenNode DotOtherKeyword { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_DotOtherKeyword();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILParamTypeConstraintSpecification : ILCompositeElement {
    public static short DOT_PARAM_KEYWORD;
    public static short CONSTRAINT_KEYWORD;
    public static short GENERIC_PARAMETER_POINTER;
    public static short COMMA;
    public static short TYPE_SPEC;
    public NodeType NodeType { get; }
    public ITokenNode Comma { get; }
    public ITokenNode ConstraintKeyword { get; }
    public ITokenNode DotParamKeyword { get; }
    public IGenericParameterPointer GenericParameterPointer { get; }
    public ITypeSpec TypeSpec { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_Comma();
    public virtual ITokenNode get_ConstraintKeyword();
    public virtual ITokenNode get_DotParamKeyword();
    public virtual IGenericParameterPointer get_GenericParameterPointer();
    public virtual ITypeSpec get_TypeSpec();
    public virtual IGenericParameterPointer SetGenericParameterPointer(IGenericParameterPointer param);
    public virtual ITypeSpec SetTypeSpec(ITypeSpec param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILParamTypeSpecification : ILCompositeElement {
    public static short DOT_PARAM_KEYWORD;
    public static short TYPE_KEYWORD;
    public static short GENERIC_PARAMETER_POINTER;
    public NodeType NodeType { get; }
    public ITokenNode DotParamKeyword { get; }
    public IGenericParameterPointer GenericParameterPointer { get; }
    public ITokenNode TypeKeyword { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_DotParamKeyword();
    public virtual IGenericParameterPointer get_GenericParameterPointer();
    public virtual ITokenNode get_TypeKeyword();
    public virtual IGenericParameterPointer SetGenericParameterPointer(IGenericParameterPointer param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILPropertyDeclaration : ILTypeMemberDeclarationBase {
    public static short DOT_PROPERTY_KEYWORD;
    public static short HEADER;
    public static short BODY;
    public NodeType NodeType { get; }
    public ITokenNode DotPropertyKeyword { get; }
    public IPropertyBody PropertyBody { get; }
    public IPropertyHeader PropertyHeader { get; }
    protected IPresentableName PresentableName { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_DotPropertyKeyword();
    public virtual IPropertyBody get_PropertyBody();
    public virtual IPropertyHeader get_PropertyHeader();
    public virtual IPropertyBody SetPropertyBody(IPropertyBody param);
    public virtual IPropertyHeader SetPropertyHeader(IPropertyHeader param);
    protected virtual IPresentableName get_PresentableName();
    public virtual string ToString();
    protected virtual IReference CreateReference();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.IlPropertyDeclarationReference : IlTypeMemberDeclarationReferenceBase`2<ILPropertyDeclaration, IProperty> {
    public IlPropertyDeclarationReference(ILPropertyDeclaration owner);
    protected virtual ISymbolFilter[] GetSymbolFilters();
}
internal abstract class JetBrains.ReSharper.Psi.IL.Impl.Tree.IlQualifiedNameReferenceBase`1 : IlTreeReferenceBase`1<TOwnerElement> {
    private string myName;
    private int myTypeParameterCount;
    private SymbolTableMode mySymbolTableMode;
    protected IlQualifiedNameReferenceBase`1(TOwnerElement owner, SymbolTableMode symbolTableMode);
    public virtual string GetName();
    private int GetTypeParameterCount();
    protected virtual ISymbolFilter[] GetSymbolFilters();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual TreeTextRange GetTreeTextRange();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILRemoveonDeclaration : ILCompositeElement {
    public static short DOT_REMOVEON_KEYWORD;
    public NodeType NodeType { get; }
    public ITokenNode DotRemoveonKeyword { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_DotRemoveonKeyword();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILSetDeclaration : ILCompositeElement {
    public static short DOT_SET_KEYWORD;
    public NodeType NodeType { get; }
    public ITokenNode DotSetKeyword { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_DotSetKeyword();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILStackReserveDeclaration : ILCompositeElement {
    public static short DOT_STACKRESERVE_KEYWORD;
    public static short VALUE;
    public NodeType NodeType { get; }
    public ITokenNode StackReserveKeyword { get; }
    public ITokenNode Value { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_StackReserveKeyword();
    public virtual ITokenNode get_Value();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILSubsystem : ILCompositeElement {
    public static short DOT_SUBSYSTEM_KEYWORD;
    public static short VALUE;
    public NodeType NodeType { get; }
    public ITokenNode DotSubsystemKeyword { get; }
    public ITokenNode Value { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_DotSubsystemKeyword();
    public virtual ITokenNode get_Value();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILToken : BoundToBufferLeafElement {
    public PsiLanguageType Language { get; }
    public ILToken(NodeType type, IBuffer buffer, TreeOffset startOffset, TreeOffset endOffset);
    public virtual PsiLanguageType get_Language();
    public virtual bool IsFiltered();
    public sealed virtual TokenNodeType GetTokenType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TResult Accept(TreeNodeVisitor`2<TContext, TResult> visitor, TContext context);
    public virtual string ToString();
}
internal abstract class JetBrains.ReSharper.Psi.IL.Impl.Tree.IlTreeReferenceBase`1 : TreeReferenceBase`1<TOwnerElement> {
    protected IlTreeReferenceBase`1(TOwnerElement owner);
    public virtual bool IsValid();
    protected abstract virtual ISymbolFilter[] GetSymbolFilters();
    private ResolveResultWithInfo Resolve(ISymbolTable symbolTable);
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public virtual IReference BindTo(IDeclaredElement element);
    public virtual IReference BindTo(IDeclaredElement element, ISubstitution substitution);
    public virtual IAccessContext GetAccessContext();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILTypelistDeclaration : ILCompositeElement {
    public static short DOT_TYPELIST_KEYWORD;
    public static short LBRACE;
    public static short CLASS_NAME;
    public static short RBRACE;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<IClassName> ClassNames { get; }
    public TreeNodeEnumerable`1<IClassName> ClassNamesEnumerable { get; }
    public ITokenNode DotTypelistKeyword { get; }
    public ITokenNode LBrace { get; }
    public ITokenNode RBrace { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<IClassName> get_ClassNames();
    public virtual TreeNodeEnumerable`1<IClassName> get_ClassNamesEnumerable();
    public virtual ITokenNode get_DotTypelistKeyword();
    public virtual ITokenNode get_LBrace();
    public virtual ITokenNode get_RBrace();
    public virtual string ToString();
}
internal abstract class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILTypeMemberDeclarationBase : ILDeclarationBase {
    [CompilerGeneratedAttribute]
private IDeclaredElement <CachedDeclaredElement>k__BackingField;
    public IDeclaredElement CachedDeclaredElement { get; public set; }
    public IDeclaredElement DeclaredElement { get; }
    private ITypeMember JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration.DeclaredElement { get; }
    public sealed virtual ITypeDeclaration GetContainingTypeDeclaration();
    [CompilerGeneratedAttribute]
public sealed virtual IDeclaredElement get_CachedDeclaredElement();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CachedDeclaredElement(IDeclaredElement value);
    public virtual IDeclaredElement get_DeclaredElement();
    private sealed virtual override ITypeMember JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration.get_DeclaredElement();
}
internal abstract class JetBrains.ReSharper.Psi.IL.Impl.Tree.IlTypeMemberDeclarationReferenceBase`2 : IlDeclarationReferenceBase`2<TOwnerElement, TDeclarationKind> {
    protected IlTypeMemberDeclarationReferenceBase`2(TOwnerElement owner);
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ILVtfixupDeclaration : ILCompositeElement {
    public static short DOT_VTFIXUP_KEYWORD;
    public static short LBRACKER;
    public static short ENTRIES_NUMBER;
    public static short RBRACKER;
    public static short AT_KEYWORD;
    public static short DATA_LABEL;
    public NodeType NodeType { get; }
    public ITokenNode AtKeyword { get; }
    public IDataLabel DataLabel { get; }
    public ITokenNode DotVtfixupKeyword { get; }
    public ITokenNode EntriesNumber { get; }
    public ITokenNode LBracket { get; }
    public ITokenNode RBracket { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_AtKeyword();
    public virtual IDataLabel get_DataLabel();
    public virtual ITokenNode get_DotVtfixupKeyword();
    public virtual ITokenNode get_EntriesNumber();
    public virtual ITokenNode get_LBracket();
    public virtual ITokenNode get_RBracket();
    public virtual IDataLabel SetDataLabel(IDataLabel param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ImplementationAttributeList : ILCompositeElement {
    public static short ATTR;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<ITokenNode> Attributes { get; }
    public TreeNodeEnumerable`1<ITokenNode> AttributesEnumerable { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<ITokenNode> get_Attributes();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_AttributesEnumerable();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ImplementationMethodDeclarationShort : ILCompositeElement {
    public static short CALL_CONV;
    public static short TYPE;
    public static short TYPE_SPEC;
    public static short DOUBLE_COLON;
    public static short METHOD_REFERENCE_NAME;
    public static short SIGNATURE;
    public NodeType NodeType { get; }
    public ICallConvention CallConvention { get; }
    public ITokenNode DoubleColon { get; }
    public IMethodReferenceName MethodName { get; }
    public ISignatureDef Signature { get; }
    public ITypeUsage Type { get; }
    public IILTreeNode TypeSpec { get; }
    public string MemberName { get; }
    public ITypeMemberReferenceName MemberReferenceName { get; }
    public ITypeSpec OwnerType { get; }
    public int GenericArgumentsCount { get; }
    public MemberKind Kind { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ICallConvention get_CallConvention();
    public virtual ITokenNode get_DoubleColon();
    public virtual IMethodReferenceName get_MethodName();
    public virtual ISignatureDef get_Signature();
    public virtual ITypeUsage get_Type();
    public virtual IILTreeNode get_TypeSpec();
    public virtual ICallConvention SetCallConvention(ICallConvention param);
    public virtual IMethodReferenceName SetMethodName(IMethodReferenceName param);
    public virtual ISignatureDef SetSignature(ISignatureDef param);
    public virtual ITypeUsage SetType(ITypeUsage param);
    public virtual IILTreeNode SetTypeSpec(IILTreeNode param);
    public virtual string ToString();
    public sealed virtual string get_MemberName();
    public sealed virtual ITypeMemberReferenceName get_MemberReferenceName();
    public sealed virtual ITypeSpec get_OwnerType();
    public sealed virtual int get_GenericArgumentsCount();
    public sealed virtual MemberKind get_Kind();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.InstanceConstructorName : ConstructorNameBase {
    public NodeType NodeType { get; }
    public string Name { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
    public virtual string get_Name();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.InstanceConstructorReferenceName : TypeMemberReferenceNameBase {
    public static short CONSTRUCTOR_NAME;
    public NodeType NodeType { get; }
    public IPresentableName Name { get; }
    protected IPresentableName PresentableName { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IPresentableName get_Name();
    public virtual IPresentableName SetName(IPresentableName param);
    public virtual string ToString();
    protected virtual IPresentableName get_PresentableName();
    protected virtual IReference CreateReference();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.Instruction : ILCompositeElement {
    public static short INSTR_NONE;
    public static short INSTR_VAR;
    public static short VARIABLE_OR_ARGUMENT_INDEX;
    public static short VARIABLE_OR_ARGUMENT_NAME;
    public static short INSTR_I;
    public static short MINUS;
    public static short NUMBER;
    public static short INSTR_I8;
    public static short INSTR_R;
    public static short BYTES;
    public static short FLOAT_NUMBER;
    public static short INSTR_BRANCH_TARGET;
    public static short TARGET;
    public static short INSTR_METHOD;
    public static short METHOD;
    public static short INSTR_FIELD;
    public static short FIELD;
    public static short INSTR_TYPE;
    public static short TYPE_SPEC;
    public static short INSTR_STRING;
    public static short COMP_QSTRING;
    public static short BYTEARRAY_KEYWORD;
    public static short DATA;
    public static short INSTR_SIG;
    public static short CALL_CONV;
    public static short TYPE;
    public static short SIGNATURE;
    public static short INSTR_TOK;
    public static short OWNER;
    public static short INSTR_SWITCH;
    public static short TARGET_LABEL;
    public NodeType NodeType { get; }
    public ITokenNode BytearrayKeyword { get; }
    public IBlob Bytes { get; }
    public ICallConvention CallConvention { get; }
    public IBlob Data { get; }
    public IInstructionFieldParameter Field { get; }
    public ITokenNode FloatNumber { get; }
    public IInstructionBranchTarget InstructionBranchTarget { get; }
    public IInstructionField InstructionField { get; }
    public IInstructionI InstructionI { get; }
    public IInstructionI8 InstructionI8 { get; }
    public IInstructionMethod InstructionMethod { get; }
    public IInstructionNone InstructionNone { get; }
    public IInstructionR InstructionR { get; }
    public IInstructionSig InstructionSig { get; }
    public IInstructionString InstructionString { get; }
    public IInstructionSwitch InstructionSwitch { get; }
    public IInstructionTok InstructionTok { get; }
    public IInstructionType InstructionType { get; }
    public IInstructionVar InstructionVar { get; }
    public IInstructionMethodParameter Method { get; }
    public ITokenNode Minus { get; }
    public ITokenNode Number { get; }
    public IOwnerType Owner { get; }
    public ISignatureDef Signature { get; }
    public ICompQstring Strings { get; }
    public ITargetLabel Target { get; }
    public ITargetLabelList TargetLabelList { get; }
    public ITypeUsage Type { get; }
    public ITypeSpec TypeSpec { get; }
    public ITokenNode VariableOrArgumentIndex { get; }
    public IIdentifier VariableOrArgumentName { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_BytearrayKeyword();
    public virtual IBlob get_Bytes();
    public virtual ICallConvention get_CallConvention();
    public virtual IBlob get_Data();
    public virtual IInstructionFieldParameter get_Field();
    public virtual ITokenNode get_FloatNumber();
    public virtual IInstructionBranchTarget get_InstructionBranchTarget();
    public virtual IInstructionField get_InstructionField();
    public virtual IInstructionI get_InstructionI();
    public virtual IInstructionI8 get_InstructionI8();
    public virtual IInstructionMethod get_InstructionMethod();
    public virtual IInstructionNone get_InstructionNone();
    public virtual IInstructionR get_InstructionR();
    public virtual IInstructionSig get_InstructionSig();
    public virtual IInstructionString get_InstructionString();
    public virtual IInstructionSwitch get_InstructionSwitch();
    public virtual IInstructionTok get_InstructionTok();
    public virtual IInstructionType get_InstructionType();
    public virtual IInstructionVar get_InstructionVar();
    public virtual IInstructionMethodParameter get_Method();
    public virtual ITokenNode get_Minus();
    public virtual ITokenNode get_Number();
    public virtual IOwnerType get_Owner();
    public virtual ISignatureDef get_Signature();
    public virtual ICompQstring get_Strings();
    public virtual ITargetLabel get_Target();
    public virtual ITargetLabelList get_TargetLabelList();
    public virtual ITypeUsage get_Type();
    public virtual ITypeSpec get_TypeSpec();
    public virtual ITokenNode get_VariableOrArgumentIndex();
    public virtual IIdentifier get_VariableOrArgumentName();
    public virtual IBlob SetBytes(IBlob param);
    public virtual ICallConvention SetCallConvention(ICallConvention param);
    public virtual IBlob SetData(IBlob param);
    public virtual IInstructionFieldParameter SetField(IInstructionFieldParameter param);
    public virtual IInstructionBranchTarget SetInstructionBranchTarget(IInstructionBranchTarget param);
    public virtual IInstructionField SetInstructionField(IInstructionField param);
    public virtual IInstructionI SetInstructionI(IInstructionI param);
    public virtual IInstructionI8 SetInstructionI8(IInstructionI8 param);
    public virtual IInstructionMethod SetInstructionMethod(IInstructionMethod param);
    public virtual IInstructionNone SetInstructionNone(IInstructionNone param);
    public virtual IInstructionR SetInstructionR(IInstructionR param);
    public virtual IInstructionSig SetInstructionSig(IInstructionSig param);
    public virtual IInstructionString SetInstructionString(IInstructionString param);
    public virtual IInstructionSwitch SetInstructionSwitch(IInstructionSwitch param);
    public virtual IInstructionTok SetInstructionTok(IInstructionTok param);
    public virtual IInstructionType SetInstructionType(IInstructionType param);
    public virtual IInstructionVar SetInstructionVar(IInstructionVar param);
    public virtual IInstructionMethodParameter SetMethod(IInstructionMethodParameter param);
    public virtual IOwnerType SetOwner(IOwnerType param);
    public virtual ISignatureDef SetSignature(ISignatureDef param);
    public virtual ICompQstring SetStrings(ICompQstring param);
    public virtual ITargetLabel SetTarget(ITargetLabel param);
    public virtual ITargetLabelList SetTargetLabelList(ITargetLabelList param);
    public virtual ITypeUsage SetType(ITypeUsage param);
    public virtual ITypeSpec SetTypeSpec(ITypeSpec param);
    public virtual IIdentifier SetVariableOrArgumentName(IIdentifier param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.InstructionBranchTarget : ILCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.InstructionField : ILCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.InstructionFieldParameter : ILCompositeElement {
    public static short TYPE;
    public static short TYPE_SPEC;
    public static short FIELD_REFERNCE_NAME;
    public NodeType NodeType { get; }
    public IFieldReferenceName FieldName { get; }
    public ITypeUsage Type { get; }
    public IILTreeNode TypeSpec { get; }
    public string MemberName { get; }
    public ITypeMemberReferenceName MemberReferenceName { get; }
    public ITypeSpec OwnerType { get; }
    public int GenericArgumentsCount { get; }
    public ISignatureDef Signature { get; }
    public MemberKind Kind { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IFieldReferenceName get_FieldName();
    public virtual ITypeUsage get_Type();
    public virtual IILTreeNode get_TypeSpec();
    public virtual IFieldReferenceName SetFieldName(IFieldReferenceName param);
    public virtual ITypeUsage SetType(ITypeUsage param);
    public virtual IILTreeNode SetTypeSpec(IILTreeNode param);
    public virtual string ToString();
    public sealed virtual string get_MemberName();
    public sealed virtual ITypeMemberReferenceName get_MemberReferenceName();
    public sealed virtual ITypeSpec get_OwnerType();
    public sealed virtual int get_GenericArgumentsCount();
    public sealed virtual ISignatureDef get_Signature();
    public sealed virtual MemberKind get_Kind();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.InstructionI : ILCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.InstructionI8 : ILCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.InstructionMethod : ILCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.InstructionMethodParameter : ILCompositeElement {
    public static short CALL_CONV;
    public static short TYPE;
    public static short TYPE_SPEC;
    public static short METHOD_REFERENCE_NAME;
    public static short GEN_ARG_LIST;
    public static short SIGNATURE;
    public NodeType NodeType { get; }
    public ICallConvention CallConvention { get; }
    public IGenericArgumentList GenericArgumentList { get; }
    public IMethodReferenceName MethodName { get; }
    public ISignatureDef Signature { get; }
    public ITypeUsage Type { get; }
    public IILTreeNode TypeSpec { get; }
    public string MemberName { get; }
    public ITypeMemberReferenceName MemberReferenceName { get; }
    public ITypeSpec OwnerType { get; }
    public int GenericArgumentsCount { get; }
    public MemberKind Kind { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ICallConvention get_CallConvention();
    public virtual IGenericArgumentList get_GenericArgumentList();
    public virtual IMethodReferenceName get_MethodName();
    public virtual ISignatureDef get_Signature();
    public virtual ITypeUsage get_Type();
    public virtual IILTreeNode get_TypeSpec();
    public virtual ICallConvention SetCallConvention(ICallConvention param);
    public virtual IGenericArgumentList SetGenericArgumentList(IGenericArgumentList param);
    public virtual IMethodReferenceName SetMethodName(IMethodReferenceName param);
    public virtual ISignatureDef SetSignature(ISignatureDef param);
    public virtual ITypeUsage SetType(ITypeUsage param);
    public virtual IILTreeNode SetTypeSpec(IILTreeNode param);
    public virtual string ToString();
    public sealed virtual string get_MemberName();
    public sealed virtual ITypeMemberReferenceName get_MemberReferenceName();
    public sealed virtual ITypeSpec get_OwnerType();
    public sealed virtual int get_GenericArgumentsCount();
    public sealed virtual MemberKind get_Kind();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.InstructionNone : ILCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.InstructionR : ILCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.InstructionSig : ILCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.InstructionString : ILCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.InstructionSwitch : ILCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.InstructionTok : ILCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.InstructionType : ILCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.InstructionVar : ILCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.IntInitializer : ILCompositeElement {
    public static short LPARENTH;
    public static short MINUS;
    public static short VALUE;
    public static short RPARENTH;
    public NodeType NodeType { get; }
    public ITokenNode LParenth { get; }
    public ITokenNode Minus { get; }
    public ITokenNode RParenth { get; }
    public ITokenNode Value { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_LParenth();
    public virtual ITokenNode get_Minus();
    public virtual ITokenNode get_RParenth();
    public virtual ITokenNode get_Value();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.IntOrWildcard : ILCompositeElement {
    public static short VALUE;
    public static short WILDCARD;
    public NodeType NodeType { get; }
    public ITokenNode Value { get; }
    public ITokenNode Wildcard { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_Value();
    public virtual ITokenNode get_Wildcard();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.LocalVariable : ILCompositeElement {
    public static short LBRACKER;
    public static short LOCAL_VARIABLE_INDEX;
    public static short RBRACKER;
    public static short TYPE;
    public static short NAME;
    public NodeType NodeType { get; }
    public ITokenNode LBracket { get; }
    public ITokenNode LocalVariableIndex { get; }
    public IIdentifier Name { get; }
    public ITokenNode RBracket { get; }
    public ITypeUsage Type { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_LBracket();
    public virtual ITokenNode get_LocalVariableIndex();
    public virtual IIdentifier get_Name();
    public virtual ITokenNode get_RBracket();
    public virtual ITypeUsage get_Type();
    public virtual IIdentifier SetName(IIdentifier param);
    public virtual ITypeUsage SetType(ITypeUsage param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.LocalVariablesDeclaration : ILCompositeElement {
    public static short DOT_LOCALS_KEYWORD;
    public static short INIT_KEYWORD;
    public static short LPARENTH;
    public static short LOCAL_VARIABLE;
    public static short COMMA;
    public static short RPARENTH;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<ITokenNode> Commas { get; }
    public TreeNodeEnumerable`1<ITokenNode> CommasEnumerable { get; }
    public ITokenNode DotLocalsKeyword { get; }
    public ITokenNode InitKeyword { get; }
    public ITokenNode LParenth { get; }
    public TreeNodeCollection`1<ILocalVariable> LocalVariables { get; }
    public TreeNodeEnumerable`1<ILocalVariable> LocalVariablesEnumerable { get; }
    public ITokenNode RParenth { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<ITokenNode> get_Commas();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_CommasEnumerable();
    public virtual ITokenNode get_DotLocalsKeyword();
    public virtual ITokenNode get_InitKeyword();
    public virtual ITokenNode get_LParenth();
    public virtual TreeNodeCollection`1<ILocalVariable> get_LocalVariables();
    public virtual TreeNodeEnumerable`1<ILocalVariable> get_LocalVariablesEnumerable();
    public virtual ITokenNode get_RParenth();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ManagedPointerType : ILCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.MarshalSpec : ILCompositeElement {
    public static short MARSHAL_KEYWORD;
    public static short LPARENTH;
    public static short NATIVE_TYPE;
    public static short RPARENTH;
    public NodeType NodeType { get; }
    public ITokenNode LParenth { get; }
    public ITokenNode MarshalKeyword { get; }
    public INativeType NativeType { get; }
    public ITokenNode RParenth { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_LParenth();
    public virtual ITokenNode get_MarshalKeyword();
    public virtual INativeType get_NativeType();
    public virtual ITokenNode get_RParenth();
    public virtual INativeType SetNativeType(INativeType param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.Maxstack : ILCompositeElement {
    public static short DOT_MAXSTACK_KEYWORD;
    public static short MAXSTACK_VALUE;
    public NodeType NodeType { get; }
    public ITokenNode DotMaxstackKeyword { get; }
    public ITokenNode MaxStackValue { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_DotMaxstackKeyword();
    public virtual ITokenNode get_MaxStackValue();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.Mdtoken : ILCompositeElement {
    public static short MDTOKEN_KEYWORD;
    public static short LPARENTH;
    public static short VALUE;
    public static short RPARENTH;
    public NodeType NodeType { get; }
    public ITokenNode LParenth { get; }
    public ITokenNode MdtokenKeyword { get; }
    public ITokenNode RParenth { get; }
    public ITokenNode Value { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_LParenth();
    public virtual ITokenNode get_MdtokenKeyword();
    public virtual ITokenNode get_RParenth();
    public virtual ITokenNode get_Value();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.MemberRef : ILCompositeElement {
    public static short FIELD_KEYWORD;
    public static short TYPE;
    public static short TYPE_SPEC;
    public static short FIELD_REFERNCE_NAME;
    public static short METHOD_KEYWORD;
    public static short CALL_CONV;
    public static short METHOD_REFERENCE_NAME;
    public static short SIGNATURE;
    public NodeType NodeType { get; }
    public ICallConvention CallConvention { get; }
    public ITokenNode FieldKeyword { get; }
    public IFieldReferenceName FieldName { get; }
    public ITokenNode MethodKeyword { get; }
    public IMethodReferenceName MethodName { get; }
    public ISignatureDef Signature { get; }
    public ITypeUsage Type { get; }
    public IILTreeNode TypeSpec { get; }
    public string MemberName { get; }
    public ITypeMemberReferenceName MemberReferenceName { get; }
    public ITypeSpec OwnerType { get; }
    public int GenericArgumentsCount { get; }
    public MemberKind Kind { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ICallConvention get_CallConvention();
    public virtual ITokenNode get_FieldKeyword();
    public virtual IFieldReferenceName get_FieldName();
    public virtual ITokenNode get_MethodKeyword();
    public virtual IMethodReferenceName get_MethodName();
    public virtual ISignatureDef get_Signature();
    public virtual ITypeUsage get_Type();
    public virtual IILTreeNode get_TypeSpec();
    public virtual ICallConvention SetCallConvention(ICallConvention param);
    public virtual IFieldReferenceName SetFieldName(IFieldReferenceName param);
    public virtual IMethodReferenceName SetMethodName(IMethodReferenceName param);
    public virtual ISignatureDef SetSignature(ISignatureDef param);
    public virtual ITypeUsage SetType(ITypeUsage param);
    public virtual IILTreeNode SetTypeSpec(IILTreeNode param);
    public virtual string ToString();
    public sealed virtual string get_MemberName();
    public sealed virtual ITypeMemberReferenceName get_MemberReferenceName();
    public sealed virtual ITypeSpec get_OwnerType();
    public sealed virtual int get_GenericArgumentsCount();
    public sealed virtual MemberKind get_Kind();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.MethodHeader : ILCompositeElement {
    public static short METHOD_ATTRIBUTE_LIST;
    public static short CALL_CONV;
    public static short TYPE;
    public static short MARSHAL_SPEC;
    public static short NAME;
    public static short GENERIC_PARAM_LIST;
    public static short SIGNATURE;
    public static short IMPL_ATTR;
    public NodeType NodeType { get; }
    public ICallConvention CallConvention { get; }
    public IGenericParameterDeclarationList GenericParameterDeclarationList { get; }
    public IImplementationAttributeList ImplementationAttributeList { get; }
    public IMarshalSpec Marshal { get; }
    public IPredefinedMethodAttributeList MethodAttributeList { get; }
    public IPresentableName Name { get; }
    public ITypeUsage ReturnType { get; }
    public ISignatureDef Signature { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ICallConvention get_CallConvention();
    public virtual IGenericParameterDeclarationList get_GenericParameterDeclarationList();
    public virtual IImplementationAttributeList get_ImplementationAttributeList();
    public virtual IMarshalSpec get_Marshal();
    public virtual IPredefinedMethodAttributeList get_MethodAttributeList();
    public virtual IPresentableName get_Name();
    public virtual ITypeUsage get_ReturnType();
    public virtual ISignatureDef get_Signature();
    public virtual ICallConvention SetCallConvention(ICallConvention param);
    public virtual IGenericParameterDeclarationList SetGenericParameterDeclarationList(IGenericParameterDeclarationList param);
    public virtual IImplementationAttributeList SetImplementationAttributeList(IImplementationAttributeList param);
    public virtual IMarshalSpec SetMarshal(IMarshalSpec param);
    public virtual IPredefinedMethodAttributeList SetMethodAttributeList(IPredefinedMethodAttributeList param);
    public virtual IPresentableName SetName(IPresentableName param);
    public virtual ITypeUsage SetReturnType(ITypeUsage param);
    public virtual ISignatureDef SetSignature(ISignatureDef param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.MethodReferenceName : TypeMemberReferenceNameBase {
    public static short METHOD_NAME;
    public NodeType NodeType { get; }
    public IPresentableName Name { get; }
    protected IPresentableName PresentableName { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IPresentableName get_Name();
    public virtual IPresentableName SetName(IPresentableName param);
    public virtual string ToString();
    protected virtual IPresentableName get_PresentableName();
    protected virtual IReference CreateReference();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.MethodReferenceNameReference : TypeMemberReferenceNameReferenceBase`1<ITypeMemberReferenceName> {
    public MethodReferenceNameReference(ITypeMemberReferenceName owner);
    public virtual TreeTextRange GetTreeTextRange();
    protected virtual ISymbolFilter[] GetSymbolFilters();
    protected virtual ISymbolTable GetOwnerTypeSymbolTable(ITypeSpec ownerType);
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.MethodScalarType : ILCompositeElement {
    public static short METHOD_KEYWORD;
    public static short CALL_CONV;
    public static short TYPE;
    public static short ASTERISK;
    public static short SIGNATURE;
    public NodeType NodeType { get; }
    public ITokenNode Asterisk { get; }
    public ICallConvention CallConvention { get; }
    public ITokenNode MethodKeyword { get; }
    public ISignatureDef Signature { get; }
    public ITypeUsage Type { get; }
    public IReference Reference { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_Asterisk();
    public virtual ICallConvention get_CallConvention();
    public virtual ITokenNode get_MethodKeyword();
    public virtual ISignatureDef get_Signature();
    public virtual ITypeUsage get_Type();
    public virtual ICallConvention SetCallConvention(ICallConvention param);
    public virtual ISignatureDef SetSignature(ISignatureDef param);
    public virtual ITypeUsage SetType(ITypeUsage param);
    public virtual string ToString();
    public sealed virtual IPsiModule GetScopePsiModule();
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public sealed virtual IReference get_Reference();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.MethodScopeBlock : ILCompositeElement {
    public static short LBRACE;
    public static short SEQURITY_DECLARATION;
    public static short COMP_CONTROL;
    public static short EXTERN_SOURCE;
    public static short LOCAL_VARIABLES_DECLARATION;
    public static short METHOD_MEMBER;
    public static short INSTRUCTION;
    public static short CODE_LABEL;
    public static short SEH_BLOCK;
    public static short RBRACE;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<ICodeLabel> CodeLabels { get; }
    public TreeNodeEnumerable`1<ICodeLabel> CodeLabelsEnumerable { get; }
    public TreeNodeCollection`1<ICompControl> CompControls { get; }
    public TreeNodeEnumerable`1<ICompControl> CompControlsEnumerable { get; }
    public TreeNodeCollection`1<ISehBlock> ExceptionHandlingBlocks { get; }
    public TreeNodeEnumerable`1<ISehBlock> ExceptionHandlingBlocksEnumerable { get; }
    public TreeNodeCollection`1<IExternSource> ExternSources { get; }
    public TreeNodeEnumerable`1<IExternSource> ExternSourcesEnumerable { get; }
    public TreeNodeCollection`1<IInstruction> Instructions { get; }
    public TreeNodeEnumerable`1<IInstruction> InstructionsEnumerable { get; }
    public ITokenNode LBrace { get; }
    public TreeNodeCollection`1<ILocalVariablesDeclaration> LocalVariablesDeclarations { get; }
    public TreeNodeEnumerable`1<ILocalVariablesDeclaration> LocalVariablesDeclarationsEnumerable { get; }
    public TreeNodeCollection`1<IILTreeNode> Members { get; }
    public TreeNodeEnumerable`1<IILTreeNode> MembersEnumerable { get; }
    public ITokenNode RBrace { get; }
    public TreeNodeCollection`1<ISequrityDeclaration> SecurityDeclarations { get; }
    public TreeNodeEnumerable`1<ISequrityDeclaration> SecurityDeclarationsEnumerable { get; }
    public int LevelDelta { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<ICodeLabel> get_CodeLabels();
    public virtual TreeNodeEnumerable`1<ICodeLabel> get_CodeLabelsEnumerable();
    public virtual TreeNodeCollection`1<ICompControl> get_CompControls();
    public virtual TreeNodeEnumerable`1<ICompControl> get_CompControlsEnumerable();
    public virtual TreeNodeCollection`1<ISehBlock> get_ExceptionHandlingBlocks();
    public virtual TreeNodeEnumerable`1<ISehBlock> get_ExceptionHandlingBlocksEnumerable();
    public virtual TreeNodeCollection`1<IExternSource> get_ExternSources();
    public virtual TreeNodeEnumerable`1<IExternSource> get_ExternSourcesEnumerable();
    public virtual TreeNodeCollection`1<IInstruction> get_Instructions();
    public virtual TreeNodeEnumerable`1<IInstruction> get_InstructionsEnumerable();
    public virtual ITokenNode get_LBrace();
    public virtual TreeNodeCollection`1<ILocalVariablesDeclaration> get_LocalVariablesDeclarations();
    public virtual TreeNodeEnumerable`1<ILocalVariablesDeclaration> get_LocalVariablesDeclarationsEnumerable();
    public virtual TreeNodeCollection`1<IILTreeNode> get_Members();
    public virtual TreeNodeEnumerable`1<IILTreeNode> get_MembersEnumerable();
    public virtual ITokenNode get_RBrace();
    public virtual TreeNodeCollection`1<ISequrityDeclaration> get_SecurityDeclarations();
    public virtual TreeNodeEnumerable`1<ISequrityDeclaration> get_SecurityDeclarationsEnumerable();
    public virtual string ToString();
    public sealed virtual ISymbolTable AddGlobalDeclarations(ISymbolTable parentTable, int level, SymbolTableMode mode);
    public sealed virtual int get_LevelDelta();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.NameValuePair : ILCompositeElement {
    public static short NAME;
    public static short EQ;
    public static short VALUE;
    public NodeType NodeType { get; }
    public ITokenNode Eq { get; }
    public ITokenNode Name { get; }
    public ITokenNode Value { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_Eq();
    public virtual ITokenNode get_Name();
    public virtual ITokenNode get_Value();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.NativeScalarType : ILCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.NativeType : ILCompositeElement {
    public static short SCALAR_TYPE;
    public static short ARRAY_SPEC;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<INativeTypeArraySpecification> ArraySpecifications { get; }
    public TreeNodeEnumerable`1<INativeTypeArraySpecification> ArraySpecificationsEnumerable { get; }
    public INativeScalarType ScalarType { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<INativeTypeArraySpecification> get_ArraySpecifications();
    public virtual TreeNodeEnumerable`1<INativeTypeArraySpecification> get_ArraySpecificationsEnumerable();
    public virtual INativeScalarType get_ScalarType();
    public virtual INativeScalarType SetScalarType(INativeScalarType param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.NativeTypeArraySpecification : ILCompositeElement {
    public static short LBRACKET;
    public static short BOUND1;
    public static short PLUS;
    public static short BOUND2;
    public NodeType NodeType { get; }
    public ITokenNode Bound1 { get; }
    public ITokenNode Bound2 { get; }
    public TreeNodeCollection`1<ITokenNode> LBracket { get; }
    public TreeNodeEnumerable`1<ITokenNode> LBracketEnumerable { get; }
    public ITokenNode Plus { get; }
    public TreeNodeCollection`1<ITokenNode> RBracket { get; }
    public TreeNodeEnumerable`1<ITokenNode> RBracketEnumerable { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_Bound1();
    public virtual ITokenNode get_Bound2();
    public virtual TreeNodeCollection`1<ITokenNode> get_LBracket();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_LBracketEnumerable();
    public virtual ITokenNode get_Plus();
    public virtual TreeNodeCollection`1<ITokenNode> get_RBracket();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_RBracketEnumerable();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.OwnerType : ILCompositeElement {
    public static short MEMBER_REF;
    public static short TYPE_SPEC;
    public NodeType NodeType { get; }
    public IMemberRef MemberRef { get; }
    public ITypeSpec TypeSpec { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IMemberRef get_MemberRef();
    public virtual ITypeSpec get_TypeSpec();
    public virtual IMemberRef SetMemberRef(IMemberRef param);
    public virtual ITypeSpec SetTypeSpec(ITypeSpec param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.Parameter : ILCompositeElement {
    public static short TRIDOT;
    public static short ATTR_LIST;
    public static short TYPE;
    public static short MARSHAL_SPEC;
    public static short NAME;
    public NodeType NodeType { get; }
    public IMarshalSpec Marshal { get; }
    public IIdentifier Name { get; }
    public IParameterAttributeList ParameterAttributeList { get; }
    public ITokenNode Tridot { get; }
    public ITypeUsage Type { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IMarshalSpec get_Marshal();
    public virtual IIdentifier get_Name();
    public virtual IParameterAttributeList get_ParameterAttributeList();
    public virtual ITokenNode get_Tridot();
    public virtual ITypeUsage get_Type();
    public virtual IMarshalSpec SetMarshal(IMarshalSpec param);
    public virtual IIdentifier SetName(IIdentifier param);
    public virtual IParameterAttributeList SetParameterAttributeList(IParameterAttributeList param);
    public virtual ITypeUsage SetType(ITypeUsage param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ParameterAttribute : ILCompositeElement {
    public static short LBRACKET;
    public static short KEYWORD;
    public static short VALUE;
    public NodeType NodeType { get; }
    public ITokenNode BitMask { get; }
    public ITokenNode Keyword { get; }
    public TreeNodeCollection`1<ITokenNode> LBracket { get; }
    public TreeNodeEnumerable`1<ITokenNode> LBracketEnumerable { get; }
    public TreeNodeCollection`1<ITokenNode> RBracket { get; }
    public TreeNodeEnumerable`1<ITokenNode> RBracketEnumerable { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_BitMask();
    public virtual ITokenNode get_Keyword();
    public virtual TreeNodeCollection`1<ITokenNode> get_LBracket();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_LBracketEnumerable();
    public virtual TreeNodeCollection`1<ITokenNode> get_RBracket();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_RBracketEnumerable();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ParameterAttributeList : ILCompositeElement {
    public static short ATTRIBUTE;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<IParameterAttribute> Attributes { get; }
    public TreeNodeEnumerable`1<IParameterAttribute> AttributesEnumerable { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<IParameterAttribute> get_Attributes();
    public virtual TreeNodeEnumerable`1<IParameterAttribute> get_AttributesEnumerable();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.PermissionDeclaration : ILCompositeElement {
    public static short DOT_PERMISSION_KEYWORD;
    public static short TYPE_REFERENCE;
    public static short LPARENTH;
    public static short NAME_VAL_PAIR;
    public static short CAMMA;
    public static short RPARENTH;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<ITokenNode> Commas { get; }
    public TreeNodeEnumerable`1<ITokenNode> CommasEnumerable { get; }
    public ITokenNode LParenth { get; }
    public TreeNodeCollection`1<INameValuePair> NameValuePairs { get; }
    public TreeNodeEnumerable`1<INameValuePair> NameValuePairsEnumerable { get; }
    public ITokenNode PermissionKeyword { get; }
    public ITokenNode RParenth { get; }
    public ITypeReference TypeReference { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<ITokenNode> get_Commas();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_CommasEnumerable();
    public virtual ITokenNode get_LParenth();
    public virtual TreeNodeCollection`1<INameValuePair> get_NameValuePairs();
    public virtual TreeNodeEnumerable`1<INameValuePair> get_NameValuePairsEnumerable();
    public virtual ITokenNode get_PermissionKeyword();
    public virtual ITokenNode get_RParenth();
    public virtual ITypeReference get_TypeReference();
    public virtual ITypeReference SetTypeReference(ITypeReference param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.PermissionSetBody : ILCompositeElement {
    public static short LBRACE;
    public static short RBRACE;
    public NodeType NodeType { get; }
    public ITokenNode LBrace { get; }
    public ITokenNode RBrace { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_LBrace();
    public virtual ITokenNode get_RBrace();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.PermissionSetDeclaration : ILCompositeElement {
    public static short DOT_PERMISSIONSET_KEYWORD;
    public static short EQ;
    public static short ILD_STYLE_BLOB;
    public static short NEW_STYLEBODY;
    public NodeType NodeType { get; }
    public ITokenNode Eq { get; }
    public IPermissionSetBody NewStyleBody { get; }
    public IBlob OldStyleBlob { get; }
    public ITokenNode PermissionSetKeyword { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_Eq();
    public virtual IPermissionSetBody get_NewStyleBody();
    public virtual IBlob get_OldStyleBlob();
    public virtual ITokenNode get_PermissionSetKeyword();
    public virtual IPermissionSetBody SetNewStyleBody(IPermissionSetBody param);
    public virtual IBlob SetOldStyleBlob(IBlob param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.PinnedType : ILCompositeElement {
    public static short PINNED_KEYWORD;
    public NodeType NodeType { get; }
    public ITokenNode PinnedKeyword { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_PinnedKeyword();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.PInvokeAttributeList : ILCompositeElement {
    public static short ATTR;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<ITokenNode> Attributes { get; }
    public TreeNodeEnumerable`1<ITokenNode> AttributesEnumerable { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<ITokenNode> get_Attributes();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_AttributesEnumerable();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.PInvokeSpecification : ILCompositeElement {
    public static short PINVOKE_KEYWORD;
    public static short LPARENTH;
    public static short NAME;
    public static short AS_KEYWORD;
    public static short ALIAS_NAME;
    public static short PINVOKE_ATTRIBUTE_List;
    public static short RPARENTH;
    public NodeType NodeType { get; }
    public ITokenNode AliasName { get; }
    public ITokenNode AsKeyword { get; }
    public ITokenNode LParenth { get; }
    public ITokenNode Name { get; }
    public IPInvokeAttributeList PInvokeAttributeList { get; }
    public ITokenNode PInvokeImplKeyword { get; }
    public ITokenNode RParenth { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_AliasName();
    public virtual ITokenNode get_AsKeyword();
    public virtual ITokenNode get_LParenth();
    public virtual ITokenNode get_Name();
    public virtual IPInvokeAttributeList get_PInvokeAttributeList();
    public virtual ITokenNode get_PInvokeImplKeyword();
    public virtual ITokenNode get_RParenth();
    public virtual IPInvokeAttributeList SetPInvokeAttributeList(IPInvokeAttributeList param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.PredefinedFieldAttributeList : ILCompositeElement {
    public static short ATTR;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<IILTreeNode> Attributes { get; }
    public TreeNodeEnumerable`1<IILTreeNode> AttributesEnumerable { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<IILTreeNode> get_Attributes();
    public virtual TreeNodeEnumerable`1<IILTreeNode> get_AttributesEnumerable();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.PredefinedMethodAttributeList : ILCompositeElement {
    public static short ATTR;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<IILTreeNode> Attributes { get; }
    public TreeNodeEnumerable`1<IILTreeNode> AttributesEnumerable { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<IILTreeNode> get_Attributes();
    public virtual TreeNodeEnumerable`1<IILTreeNode> get_AttributesEnumerable();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.PredefinedScalarType : ILCompositeElement {
    public static short TYPE_KEYWORD;
    public static short NATIVE_KEYWORD;
    public static short UNSIGNED_KEYWORD;
    private PredefinedScalarTypeReference modreq(System.Runtime.CompilerServices.IsVolatile) myReference;
    public NodeType NodeType { get; }
    public ITokenNode NativeKeyword { get; }
    public ITokenNode TypeKeyword { get; }
    public ITokenNode UnsignedKeyword { get; }
    public IReference Reference { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_NativeKeyword();
    public virtual ITokenNode get_TypeKeyword();
    public virtual ITokenNode get_UnsignedKeyword();
    public virtual string ToString();
    public sealed virtual IPsiModule GetScopePsiModule();
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    protected virtual void PreInit();
    public sealed virtual IReference get_Reference();
    public virtual ReferenceCollection GetFirstClassReferences();
}
public class JetBrains.ReSharper.Psi.IL.Impl.Tree.PredefinedScalarTypeReference : TreeReferenceBase`1<IPredefinedScalarType> {
    public PredefinedScalarTypeReference(IPredefinedScalarType owner);
    public virtual bool IsValid();
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public virtual string GetName();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual IReference BindTo(IDeclaredElement element);
    public virtual IReference BindTo(IDeclaredElement element, ISubstitution substitution);
    public virtual IAccessContext GetAccessContext();
    public virtual TreeTextRange GetTreeTextRange();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.PropertyBody : ILCompositeElement {
    public static short LBRACE;
    public static short CUSTOM_ATTRIBUTE;
    public static short COMP_CONTROL;
    public static short EXTERN_SOURCE;
    public static short PROPERTY_MEMBER;
    public static short RBRACE;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<ICustomAttribute> Attributes { get; }
    public TreeNodeEnumerable`1<ICustomAttribute> AttributesEnumerable { get; }
    public TreeNodeCollection`1<ICompControl> CompControls { get; }
    public TreeNodeEnumerable`1<ICompControl> CompControlsEnumerable { get; }
    public TreeNodeCollection`1<IExternSource> ExternSources { get; }
    public TreeNodeEnumerable`1<IExternSource> ExternSourcesEnumerable { get; }
    public ITokenNode LBrace { get; }
    public TreeNodeCollection`1<IILPropertyMember> Members { get; }
    public TreeNodeEnumerable`1<IILPropertyMember> MembersEnumerable { get; }
    public ITokenNode RBrace { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<ICustomAttribute> get_Attributes();
    public virtual TreeNodeEnumerable`1<ICustomAttribute> get_AttributesEnumerable();
    public virtual TreeNodeCollection`1<ICompControl> get_CompControls();
    public virtual TreeNodeEnumerable`1<ICompControl> get_CompControlsEnumerable();
    public virtual TreeNodeCollection`1<IExternSource> get_ExternSources();
    public virtual TreeNodeEnumerable`1<IExternSource> get_ExternSourcesEnumerable();
    public virtual ITokenNode get_LBrace();
    public virtual TreeNodeCollection`1<IILPropertyMember> get_Members();
    public virtual TreeNodeEnumerable`1<IILPropertyMember> get_MembersEnumerable();
    public virtual ITokenNode get_RBrace();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.PropertyHeader : ILCompositeElement {
    public static short PROPERTY_ATTRIBUTE_LIST;
    public static short CALL_CONV;
    public static short TYPE;
    public static short NAME;
    public static short SIGNATURE;
    public NodeType NodeType { get; }
    public ICallConvention CallConvention { get; }
    public IIdentifier Name { get; }
    public ISpecialnameAttributeList PropertyAttributeList { get; }
    public ISignatureDef Signature { get; }
    public ITypeUsage Type { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ICallConvention get_CallConvention();
    public virtual IIdentifier get_Name();
    public virtual ISpecialnameAttributeList get_PropertyAttributeList();
    public virtual ISignatureDef get_Signature();
    public virtual ITypeUsage get_Type();
    public virtual ICallConvention SetCallConvention(ICallConvention param);
    public virtual IIdentifier SetName(IIdentifier param);
    public virtual ISpecialnameAttributeList SetPropertyAttributeList(ISpecialnameAttributeList param);
    public virtual ISignatureDef SetSignature(ISignatureDef param);
    public virtual ITypeUsage SetType(ITypeUsage param);
    public virtual string ToString();
}
public class JetBrains.ReSharper.Psi.IL.Impl.Tree.PsiGeneratedGetterTestUtil : PsiGetterTestUtil {
    internal static void TestArrayBound(int level, IArrayBound param, string caller);
    internal static void TestArrayType(int level, IArrayType param, string caller);
    internal static void TestBlob(int level, IBlob param, string caller);
    internal static void TestCallConvention(int level, ICallConvention param, string caller);
    internal static void TestCallConventionKind(int level, ICallConventionKind param, string caller);
    internal static void TestCatchClause(int level, ICatchClause param, string caller);
    internal static void TestClassBody(int level, IClassBody param, string caller);
    internal static void TestClassExtendsClause(int level, IClassExtendsClause param, string caller);
    internal static void TestClassHeader(int level, IClassHeader param, string caller);
    internal static void TestClassImplementsClause(int level, IClassImplementsClause param, string caller);
    internal static void TestClassModifierList(int level, IClassModifierList param, string caller);
    internal static void TestClassName(int level, IClassName param, string caller);
    internal static void TestCodeLabel(int level, ICodeLabel param, string caller);
    internal static void TestCompControl(int level, ICompControl param, string caller);
    internal static void TestCompQstring(int level, ICompQstring param, string caller);
    internal static void TestCompositeVariantType(int level, ICompositeVariantType param, string caller);
    internal static void TestConstructorName(int level, IConstructorName param, string caller);
    internal static void TestCustomAttribute(int level, ICustomAttribute param, string caller);
    internal static void TestCustomModifierType(int level, ICustomModifierType param, string caller);
    internal static void TestCustomType(int level, ICustomType param, string caller);
    internal static void TestDataDeclarationItem(int level, IDataDeclarationItem param, string caller);
    internal static void TestDataLabel(int level, IDataLabel param, string caller);
    internal static void TestEmitbyte(int level, IEmitbyte param, string caller);
    internal static void TestEntrypoint(int level, IEntrypoint param, string caller);
    internal static void TestEventBody(int level, IEventBody param, string caller);
    internal static void TestEventHeader(int level, IEventHeader param, string caller);
    internal static void TestExceptionType(int level, IExceptionType param, string caller);
    internal static void TestExport(int level, IExport param, string caller);
    internal static void TestExternSource(int level, IExternSource param, string caller);
    internal static void TestFaultClause(int level, IFaultClause param, string caller);
    internal static void TestFieldByteOffset(int level, IFieldByteOffset param, string caller);
    internal static void TestFieldInit(int level, IFieldInit param, string caller);
    internal static void TestFieldReferenceName(int level, IFieldReferenceName param, string caller);
    internal static void TestFilterClause(int level, IFilterClause param, string caller);
    internal static void TestFinallyClause(int level, IFinallyClause param, string caller);
    internal static void TestFromToBlock(int level, IFromToBlock param, string caller);
    internal static void TestGenArity(int level, IGenArity param, string caller);
    internal static void TestGenericArgumentList(int level, IGenericArgumentList param, string caller);
    internal static void TestGenericParameter(int level, IGenericParameter param, string caller);
    internal static void TestGenericParameterAttributeList(int level, IGenericParameterAttributeList param, string caller);
    internal static void TestGenericParameterConstraintList(int level, IGenericParameterConstraintList param, string caller);
    internal static void TestGenericParameterDeclaration(int level, IGenericParameterDeclaration param, string caller);
    internal static void TestGenericParameterDeclarationList(int level, IGenericParameterDeclarationList param, string caller);
    internal static void TestGenericParameterPointer(int level, IGenericParameterPointer param, string caller);
    internal static void TestGenericScalarType(int level, IGenericScalarType param, string caller);
    internal static void TestGenericType(int level, IGenericType param, string caller);
    internal static void TestHandlerBlock(int level, IHandlerBlock param, string caller);
    internal static void TestILAccessorDeclaration(int level, IILAccessorDeclaration param, string caller);
    internal static void TestILAddonDeclaration(int level, IILAddonDeclaration param, string caller);
    internal static void TestILAliasDeclaration(int level, IILAliasDeclaration param, string caller);
    internal static void TestILAssemblyAutodetection(int level, IILAssemblyAutodetection param, string caller);
    internal static void TestILAssemblyCulture(int level, IILAssemblyCulture param, string caller);
    internal static void TestILAssemblyDeclaration(int level, IILAssemblyDeclaration param, string caller);
    internal static void TestILAssemblyHash(int level, IILAssemblyHash param, string caller);
    internal static void TestILAssemblyHashAlgorithm(int level, IILAssemblyHashAlgorithm param, string caller);
    internal static void TestILAssemblyProperty(int level, IILAssemblyProperty param, string caller);
    internal static void TestILAssemblyPublicKey(int level, IILAssemblyPublicKey param, string caller);
    internal static void TestILAssemblyPublicKeyToken(int level, IILAssemblyPublicKeyToken param, string caller);
    internal static void TestILAssemblyVersion(int level, IILAssemblyVersion param, string caller);
    internal static void TestILClassDeclaration(int level, IILClassDeclaration param, string caller);
    internal static void TestILCorFlags(int level, IILCorFlags param, string caller);
    internal static void TestILDataDeclaration(int level, IILDataDeclaration param, string caller);
    internal static void TestILDeclaration(int level, IILDeclaration param, string caller);
    internal static void TestILEventDeclaration(int level, IILEventDeclaration param, string caller);
    internal static void TestILEventMember(int level, IILEventMember param, string caller);
    internal static void TestILExternAssemblyDeclaration(int level, IILExternAssemblyDeclaration param, string caller);
    internal static void TestILExternAssemblyProperty(int level, IILExternAssemblyProperty param, string caller);
    internal static void TestILExternClassAssemblyProperty(int level, IILExternClassAssemblyProperty param, string caller);
    internal static void TestILExternClassClassProperty(int level, IILExternClassClassProperty param, string caller);
    internal static void TestILExternClassDeclaration(int level, IILExternClassDeclaration param, string caller);
    internal static void TestILExternClassFileProperty(int level, IILExternClassFileProperty param, string caller);
    internal static void TestILExternClassProperty(int level, IILExternClassProperty param, string caller);
    internal static void TestILExternModuleDeclaration(int level, IILExternModuleDeclaration param, string caller);
    internal static void TestILFieldDeclaration(int level, IILFieldDeclaration param, string caller);
    internal static void TestILFile(int level, IILFile param, string caller);
    internal static void TestILFileAlignmentDeclaration(int level, IILFileAlignmentDeclaration param, string caller);
    internal static void TestILFileDeclaration(int level, IILFileDeclaration param, string caller);
    internal static void TestILFireDeclaration(int level, IILFireDeclaration param, string caller);
    internal static void TestILForwardClassDeclaration(int level, IILForwardClassDeclaration param, string caller);
    internal static void TestILGetDeclaration(int level, IILGetDeclaration param, string caller);
    internal static void TestILImageBaseDeclaration(int level, IILImageBaseDeclaration param, string caller);
    internal static void TestILInstanceLayoutDeclaration(int level, IILInstanceLayoutDeclaration param, string caller);
    internal static void TestILInterfaceimplSpecification(int level, IILInterfaceimplSpecification param, string caller);
    internal static void TestILLabel(int level, IILLabel param, string caller);
    internal static void TestILLanguageDeclaration(int level, IILLanguageDeclaration param, string caller);
    internal static void TestILManifestAssemblyResource(int level, IILManifestAssemblyResource param, string caller);
    internal static void TestILManifestFileResource(int level, IILManifestFileResource param, string caller);
    internal static void TestILManifestResource(int level, IILManifestResource param, string caller);
    internal static void TestILManifestResourceDeclaration(int level, IILManifestResourceDeclaration param, string caller);
    internal static void TestILMethodDeclaration(int level, IILMethodDeclaration param, string caller);
    internal static void TestILMethodOverridingDeclarationFull(int level, IILMethodOverridingDeclarationFull param, string caller);
    internal static void TestILMethodOverridingDeclarationInClassFull(int level, IILMethodOverridingDeclarationInClassFull param, string caller);
    internal static void TestILMethodOverridingDeclarationInClassShort(int level, IILMethodOverridingDeclarationInClassShort param, string caller);
    internal static void TestILMethodOverridingDeclarationShort(int level, IILMethodOverridingDeclarationShort param, string caller);
    internal static void TestILMethodParamSpecification(int level, IILMethodParamSpecification param, string caller);
    internal static void TestILModuleDeclaration(int level, IILModuleDeclaration param, string caller);
    internal static void TestILMscorlibDeclaration(int level, IILMscorlibDeclaration param, string caller);
    internal static void TestILNamespaceBody(int level, IILNamespaceBody param, string caller);
    internal static void TestILNamespaceDeclaration(int level, IILNamespaceDeclaration param, string caller);
    internal static void TestILOtherDeclaration(int level, IILOtherDeclaration param, string caller);
    internal static void TestILParamTypeConstraintSpecification(int level, IILParamTypeConstraintSpecification param, string caller);
    internal static void TestILParamTypeSpecification(int level, IILParamTypeSpecification param, string caller);
    internal static void TestILPropertyDeclaration(int level, IILPropertyDeclaration param, string caller);
    internal static void TestILPropertyMember(int level, IILPropertyMember param, string caller);
    internal static void TestILRemoveonDeclaration(int level, IILRemoveonDeclaration param, string caller);
    internal static void TestILSetDeclaration(int level, IILSetDeclaration param, string caller);
    internal static void TestILStackReserveDeclaration(int level, IILStackReserveDeclaration param, string caller);
    internal static void TestILSubsystem(int level, IILSubsystem param, string caller);
    internal static void TestILTypeMemberDeclaration(int level, IILTypeMemberDeclaration param, string caller);
    internal static void TestILTypelistDeclaration(int level, IILTypelistDeclaration param, string caller);
    internal static void TestILVtfixupDeclaration(int level, IILVtfixupDeclaration param, string caller);
    internal static void TestIdentifier(int level, IIdentifier param, string caller);
    internal static void TestIdentifierWithOwnerQualification(int level, IIdentifierWithOwnerQualification param, string caller);
    internal static void TestIlQualifiedName(int level, IIlQualifiedName param, string caller);
    internal static void TestIlReferenceOwner(int level, IIlReferenceOwner param, string caller);
    internal static void TestImplementationAttributeList(int level, IImplementationAttributeList param, string caller);
    internal static void TestImplementationMethodDeclarationShort(int level, IImplementationMethodDeclarationShort param, string caller);
    internal static void TestInstanceConstructorName(int level, IInstanceConstructorName param, string caller);
    internal static void TestInstanceConstructorReferenceName(int level, IInstanceConstructorReferenceName param, string caller);
    internal static void TestInstruction(int level, IInstruction param, string caller);
    internal static void TestInstructionBranchTarget(int level, IInstructionBranchTarget param, string caller);
    internal static void TestInstructionField(int level, IInstructionField param, string caller);
    internal static void TestInstructionFieldParameter(int level, IInstructionFieldParameter param, string caller);
    internal static void TestInstructionI(int level, IInstructionI param, string caller);
    internal static void TestInstructionI8(int level, IInstructionI8 param, string caller);
    internal static void TestInstructionMethod(int level, IInstructionMethod param, string caller);
    internal static void TestInstructionMethodParameter(int level, IInstructionMethodParameter param, string caller);
    internal static void TestInstructionNone(int level, IInstructionNone param, string caller);
    internal static void TestInstructionR(int level, IInstructionR param, string caller);
    internal static void TestInstructionSig(int level, IInstructionSig param, string caller);
    internal static void TestInstructionString(int level, IInstructionString param, string caller);
    internal static void TestInstructionSwitch(int level, IInstructionSwitch param, string caller);
    internal static void TestInstructionTok(int level, IInstructionTok param, string caller);
    internal static void TestInstructionType(int level, IInstructionType param, string caller);
    internal static void TestInstructionVar(int level, IInstructionVar param, string caller);
    internal static void TestIntInitializer(int level, IIntInitializer param, string caller);
    internal static void TestIntOrWildcard(int level, IIntOrWildcard param, string caller);
    internal static void TestLocalVariable(int level, ILocalVariable param, string caller);
    internal static void TestLocalVariablesDeclaration(int level, ILocalVariablesDeclaration param, string caller);
    internal static void TestManagedPointerType(int level, IManagedPointerType param, string caller);
    internal static void TestMarshalSpec(int level, IMarshalSpec param, string caller);
    internal static void TestMaxstack(int level, IMaxstack param, string caller);
    internal static void TestMdtoken(int level, IMdtoken param, string caller);
    internal static void TestMemberRef(int level, IMemberRef param, string caller);
    internal static void TestMethodHeader(int level, IMethodHeader param, string caller);
    internal static void TestMethodReferenceName(int level, IMethodReferenceName param, string caller);
    internal static void TestMethodScalarType(int level, IMethodScalarType param, string caller);
    internal static void TestMethodScopeBlock(int level, IMethodScopeBlock param, string caller);
    internal static void TestNameValuePair(int level, INameValuePair param, string caller);
    internal static void TestNativeScalarType(int level, INativeScalarType param, string caller);
    internal static void TestNativeType(int level, INativeType param, string caller);
    internal static void TestNativeTypeArraySpecification(int level, INativeTypeArraySpecification param, string caller);
    internal static void TestOpcode(int level, IOpcode param, string caller);
    internal static void TestOwnerType(int level, IOwnerType param, string caller);
    internal static void TestPInvokeAttributeList(int level, IPInvokeAttributeList param, string caller);
    internal static void TestPInvokeSpecification(int level, IPInvokeSpecification param, string caller);
    internal static void TestParameter(int level, IParameter param, string caller);
    internal static void TestParameterAttribute(int level, IParameterAttribute param, string caller);
    internal static void TestParameterAttributeList(int level, IParameterAttributeList param, string caller);
    internal static void TestPermissionDeclaration(int level, IPermissionDeclaration param, string caller);
    internal static void TestPermissionSetBody(int level, IPermissionSetBody param, string caller);
    internal static void TestPermissionSetDeclaration(int level, IPermissionSetDeclaration param, string caller);
    internal static void TestPinnedType(int level, IPinnedType param, string caller);
    internal static void TestPredefinedFieldAttributeList(int level, IPredefinedFieldAttributeList param, string caller);
    internal static void TestPredefinedMethodAttributeList(int level, IPredefinedMethodAttributeList param, string caller);
    internal static void TestPredefinedScalarType(int level, IPredefinedScalarType param, string caller);
    internal static void TestPresentableName(int level, IPresentableName param, string caller);
    internal static void TestPropertyBody(int level, IPropertyBody param, string caller);
    internal static void TestPropertyHeader(int level, IPropertyHeader param, string caller);
    internal static void TestQualifiedName(int level, IQualifiedName param, string caller);
    internal static void TestReferenceName(int level, IReferenceName param, string caller);
    internal static void TestScalarType(int level, IScalarType param, string caller);
    internal static void TestSehBlock(int level, ISehBlock param, string caller);
    internal static void TestSehClause(int level, ISehClause param, string caller);
    internal static void TestSequrityDeclaration(int level, ISequrityDeclaration param, string caller);
    internal static void TestSignatureDef(int level, ISignatureDef param, string caller);
    internal static void TestSpecialnameAttributeList(int level, ISpecialnameAttributeList param, string caller);
    internal static void TestStaticConstructorName(int level, IStaticConstructorName param, string caller);
    internal static void TestTargetLabel(int level, ITargetLabel param, string caller);
    internal static void TestTargetLabelList(int level, ITargetLabelList param, string caller);
    internal static void TestTryBlock(int level, ITryBlock param, string caller);
    internal static void TestTypeMemberReferenceName(int level, ITypeMemberReferenceName param, string caller);
    internal static void TestTypeMemberUsage(int level, ITypeMemberUsage param, string caller);
    internal static void TestTypeModifier(int level, ITypeModifier param, string caller);
    internal static void TestTypeReference(int level, ITypeReference param, string caller);
    internal static void TestTypeResolutionScope(int level, ITypeResolutionScope param, string caller);
    internal static void TestTypeSpec(int level, ITypeSpec param, string caller);
    internal static void TestTypeSpecWithDoubleColon(int level, ITypeSpecWithDoubleColon param, string caller);
    internal static void TestTypeUsage(int level, ITypeUsage param, string caller);
    internal static void TestTypeWithReferenceBase(int level, ITypeWithReferenceBase param, string caller);
    internal static void TestUnmanagedPointerType(int level, IUnmanagedPointerType param, string caller);
    internal static void TestUserScalarType(int level, IUserScalarType param, string caller);
    internal static void TestVariantType(int level, IVariantType param, string caller);
    internal static void TestVtentry(int level, IVtentry param, string caller);
    internal static void TestVtfixupAttribute(int level, IVtfixupAttribute param, string caller);
    internal static void TestVtfixupAttributeList(int level, IVtfixupAttributeList param, string caller);
    internal static void TestZeroinit(int level, IZeroinit param, string caller);
    public static void TestILTreeNode(int level, ITreeNode param, string caller);
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.QualifiedName : ILCompositeElement {
    public static short IDENTIFIER;
    public static short QUALIFIER;
    public static short DOT;
    private QualifiedNameReference modreq(System.Runtime.CompilerServices.IsVolatile) myReference;
    public NodeType NodeType { get; }
    public ITokenNode Dot { get; }
    public IIdentifier Identifier { get; }
    public IIlQualifiedName Qualifier { get; }
    public IReference Reference { get; }
    public ITypeResolutionScope TypeResolutionScope { get; }
    public string ShortName { get; }
    public string FullName { get; }
    public string PresentationName { get; }
    public bool ContainsQuotedStrings { get; }
    public bool Resolved { get; }
    public QualifiedName(TreeElement identifier);
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_Dot();
    public virtual IIdentifier get_Identifier();
    public virtual IIlQualifiedName get_Qualifier();
    public virtual IIdentifier SetIdentifier(IIdentifier param);
    public virtual IIlQualifiedName SetQualifier(IIlQualifiedName param);
    protected virtual void PreInit();
    public sealed virtual IReference get_Reference();
    public sealed virtual ITypeResolutionScope get_TypeResolutionScope();
    public sealed virtual string get_ShortName();
    public sealed virtual string get_FullName();
    public sealed virtual string get_PresentationName();
    public sealed virtual bool get_ContainsQuotedStrings();
    public virtual ReferenceCollection GetFirstClassReferences();
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public sealed virtual QualifierKind GetKind();
    public sealed virtual bool get_Resolved();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.QualifiedNameReference : IlQualifiedNameReferenceBase`1<IIlQualifiedName> {
    public QualifiedNameReference(IIlQualifiedName owner);
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ReferenceName : ILCompositeElement {
    public static short IDENTIFIER;
    public static short QUALIFIER;
    public static short DOT;
    public static short DIV;
    private ReferenceNameReference modreq(System.Runtime.CompilerServices.IsVolatile) myReference;
    private CachedPsiValue`1<ITypeResolutionScope> myCachedTypeResolutionScope;
    public NodeType NodeType { get; }
    public ITokenNode Div { get; }
    public ITokenNode Dot { get; }
    public IIdentifier Identifier { get; }
    public IIlQualifiedName Qualifier { get; }
    public IReference Reference { get; }
    public ITypeResolutionScope TypeResolutionScope { get; }
    public string ShortName { get; }
    public string FullName { get; }
    public string PresentationName { get; }
    public bool ContainsQuotedStrings { get; }
    public bool Resolved { get; }
    public ReferenceName(TreeElement typeName);
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_Div();
    public virtual ITokenNode get_Dot();
    public virtual IIdentifier get_Identifier();
    public virtual IIlQualifiedName get_Qualifier();
    public virtual IIdentifier SetIdentifier(IIdentifier param);
    public virtual IIlQualifiedName SetQualifier(IIlQualifiedName param);
    protected virtual void PreInit();
    public sealed virtual IReference get_Reference();
    public sealed virtual ITypeResolutionScope get_TypeResolutionScope();
    public sealed virtual string get_ShortName();
    public sealed virtual string get_FullName();
    public sealed virtual string get_PresentationName();
    public sealed virtual bool get_ContainsQuotedStrings();
    public virtual ReferenceCollection GetFirstClassReferences();
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public sealed virtual QualifierKind GetKind();
    public sealed virtual bool get_Resolved();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.ReferenceNameReference : IlQualifiedNameReferenceBase`1<ReferenceName> {
    public ReferenceNameReference(ReferenceName owner);
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.SehBlock : ILCompositeElement {
    public static short TRY_BLOCK;
    public static short SEH_CLAUSE;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<ISehClause> SehClauses { get; }
    public TreeNodeEnumerable`1<ISehClause> SehClausesEnumerable { get; }
    public ITryBlock TryBlock { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<ISehClause> get_SehClauses();
    public virtual TreeNodeEnumerable`1<ISehClause> get_SehClausesEnumerable();
    public virtual ITryBlock get_TryBlock();
    public virtual ITryBlock SetTryBlock(ITryBlock param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.SehClause : ILCompositeElement {
    public static short CATCH_CLAUSE;
    public static short FAULT_CLAUSE;
    public static short FILTER_CLAUSE;
    public static short FINALLY_CLAUSE;
    public static short HANDLER_BLOCK;
    public NodeType NodeType { get; }
    public ICatchClause CatchClause { get; }
    public IFaultClause FaultClause { get; }
    public IFilterClause FilterClause { get; }
    public IFinallyClause FinallyClause { get; }
    public IHandlerBlock HandlerBlock { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ICatchClause get_CatchClause();
    public virtual IFaultClause get_FaultClause();
    public virtual IFilterClause get_FilterClause();
    public virtual IFinallyClause get_FinallyClause();
    public virtual IHandlerBlock get_HandlerBlock();
    public virtual ICatchClause SetCatchClause(ICatchClause param);
    public virtual IFaultClause SetFaultClause(IFaultClause param);
    public virtual IFilterClause SetFilterClause(IFilterClause param);
    public virtual IFinallyClause SetFinallyClause(IFinallyClause param);
    public virtual IHandlerBlock SetHandlerBlock(IHandlerBlock param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.SignatureDef : ILCompositeElement {
    public static short LPARENTH;
    public static short PARAMETER;
    public static short COMMA;
    public static short RPARENTH;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<ITokenNode> Commas { get; }
    public TreeNodeEnumerable`1<ITokenNode> CommasEnumerable { get; }
    public ITokenNode LParenth { get; }
    public TreeNodeCollection`1<IParameter> Parameters { get; }
    public TreeNodeEnumerable`1<IParameter> ParametersEnumerable { get; }
    public ITokenNode RParenth { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<ITokenNode> get_Commas();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_CommasEnumerable();
    public virtual ITokenNode get_LParenth();
    public virtual TreeNodeCollection`1<IParameter> get_Parameters();
    public virtual TreeNodeEnumerable`1<IParameter> get_ParametersEnumerable();
    public virtual ITokenNode get_RParenth();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.SignatureFilter : SimpleSymbolFilter {
    private ISignatureDef mySignature;
    private ITypeUsage myReturnType;
    public ResolveErrorType ErrorType { get; }
    public SignatureFilter(ISignatureDef signature, ITypeUsage returnType);
    public static ISymbolFilter CreateSignatureFilter(ISignatureDef signature, ITypeUsage returnType);
    public virtual ResolveErrorType get_ErrorType();
    public virtual bool Accepts(IDeclaredElement declaredElement, ISubstitution substitution);
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.SpecialnameAttributeList : ILCompositeElement {
    public static short ATTR;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<ITokenNode> Attributes { get; }
    public TreeNodeEnumerable`1<ITokenNode> AttributesEnumerable { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<ITokenNode> get_Attributes();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_AttributesEnumerable();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.StaticConstructorName : ConstructorNameBase {
    public NodeType NodeType { get; }
    public string Name { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
    public virtual string get_Name();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.TargetLabel : ILCompositeElement {
    public static short NAME;
    public static short MINUS;
    public static short OFFSET;
    public NodeType NodeType { get; }
    public ITokenNode Minus { get; }
    public IIdentifier Name { get; }
    public ITokenNode Offset { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_Minus();
    public virtual IIdentifier get_Name();
    public virtual ITokenNode get_Offset();
    public virtual IIdentifier SetName(IIdentifier param);
    public virtual string ToString();
    public sealed virtual string GetName();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.TargetLabelList : ILCompositeElement {
    public static short LPARENTH;
    public static short TARGET_LABEL;
    public static short COMMA;
    public static short RPARENTH;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<ITokenNode> Commas { get; }
    public TreeNodeEnumerable`1<ITokenNode> CommasEnumerable { get; }
    public ITokenNode LParenth { get; }
    public ITokenNode RParenth { get; }
    public TreeNodeCollection`1<ITargetLabel> TargetLabels { get; }
    public TreeNodeEnumerable`1<ITargetLabel> TargetLabelsEnumerable { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<ITokenNode> get_Commas();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_CommasEnumerable();
    public virtual ITokenNode get_LParenth();
    public virtual ITokenNode get_RParenth();
    public virtual TreeNodeCollection`1<ITargetLabel> get_TargetLabels();
    public virtual TreeNodeEnumerable`1<ITargetLabel> get_TargetLabelsEnumerable();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.TryBlock : ILCompositeElement {
    public static short DOT_TRY_KEYWORD;
    public static short SCOPE_BLOCK;
    public static short FROM_TO_BLOCK;
    public NodeType NodeType { get; }
    public ITokenNode DotTryKeyword { get; }
    public IFromToBlock FromToBlock { get; }
    public IMethodScopeBlock ScopeBlock { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_DotTryKeyword();
    public virtual IFromToBlock get_FromToBlock();
    public virtual IMethodScopeBlock get_ScopeBlock();
    public virtual IFromToBlock SetFromToBlock(IFromToBlock param);
    public virtual IMethodScopeBlock SetScopeBlock(IMethodScopeBlock param);
    public virtual string ToString();
}
internal abstract class JetBrains.ReSharper.Psi.IL.Impl.Tree.TypeMemberReferenceNameBase : ILCompositeElement {
    private IReference modreq(System.Runtime.CompilerServices.IsVolatile) myReference;
    protected IPresentableName PresentableName { get; }
    public IReference Reference { get; }
    public string ShortName { get; }
    public string FullName { get; }
    public string PresentationName { get; }
    public bool ContainsQuotedStrings { get; }
    public ITypeMemberUsage TypeMemberUsage { get; }
    protected abstract virtual IPresentableName get_PresentableName();
    protected abstract virtual IReference CreateReference();
    protected virtual void PreInit();
    public sealed virtual IReference get_Reference();
    public virtual ReferenceCollection GetFirstClassReferences();
    public sealed virtual string get_ShortName();
    public sealed virtual string get_FullName();
    public sealed virtual string get_PresentationName();
    public sealed virtual bool get_ContainsQuotedStrings();
    public sealed virtual ITypeMemberUsage get_TypeMemberUsage();
}
internal abstract class JetBrains.ReSharper.Psi.IL.Impl.Tree.TypeMemberReferenceNameReferenceBase`1 : IlTreeReferenceBase`1<TOwnerElement> {
    protected TypeMemberReferenceNameReferenceBase`1(TOwnerElement owner);
    public virtual string GetName();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual TreeTextRange GetTreeTextRange();
    protected virtual ISymbolFilter[] GetSymbolFilters();
    protected virtual ISymbolTable GetOwnerTypeSymbolTable(ITypeSpec ownerType);
}
public static class JetBrains.ReSharper.Psi.IL.Impl.Tree.TypeMemberUsageUtil : object {
    [CanBeNullAttribute]
public static ITypeSpec GetOwnerType(IILTreeNode typeSpecWithDoubleColon);
}
public class JetBrains.ReSharper.Psi.IL.Impl.Tree.TypeParameterNumberFilter : SimpleSymbolFilter {
    [CompilerGeneratedAttribute]
private int <count>P;
    public FilterRunType RunType { get; }
    public ResolveErrorType ErrorType { get; }
    public TypeParameterNumberFilter(int count);
    public virtual bool Accepts(IDeclaredElement declaredElement, ISubstitution substitution);
    public virtual FilterRunType get_RunType();
    public virtual ResolveErrorType get_ErrorType();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.TypeReference : ILCompositeElement {
    public static short RESOLUTION_SCOPE;
    public static short REFERENCE_NAME;
    public NodeType NodeType { get; }
    public IReferenceName ReferenceName { get; }
    public ITypeResolutionScope ResolutionScope { get; }
    public IReference Reference { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IReferenceName get_ReferenceName();
    public virtual ITypeResolutionScope get_ResolutionScope();
    public virtual IReferenceName SetReferenceName(IReferenceName param);
    public virtual ITypeResolutionScope SetResolutionScope(ITypeResolutionScope param);
    public virtual string ToString();
    public sealed virtual IPsiModule GetScopePsiModule();
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public sealed virtual IReference get_Reference();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.TypeResolutionScope : ILCompositeElement {
    public static short LBRACKET;
    public static short DOT_MODULE_KEYWORD;
    public static short NAME;
    public NodeType NodeType { get; }
    public ITokenNode DotModuleKeyword { get; }
    public TreeNodeCollection`1<ITokenNode> LBracket { get; }
    public TreeNodeEnumerable`1<ITokenNode> LBracketEnumerable { get; }
    public IQualifiedName QualifiedName { get; }
    public TreeNodeCollection`1<ITokenNode> RBracket { get; }
    public TreeNodeEnumerable`1<ITokenNode> RBracketEnumerable { get; }
    public IReference Reference { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_DotModuleKeyword();
    public virtual TreeNodeCollection`1<ITokenNode> get_LBracket();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_LBracketEnumerable();
    public virtual IQualifiedName get_QualifiedName();
    public virtual TreeNodeCollection`1<ITokenNode> get_RBracket();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_RBracketEnumerable();
    public virtual IQualifiedName SetQualifiedName(IQualifiedName param);
    public sealed virtual IPsiModule GetScopePsiModule();
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public sealed virtual IReference get_Reference();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.TypeSpecWithDoubleColon : ILCompositeElement {
    public static short TYPE_SPEC;
    public static short DOUBLE_COLON;
    public NodeType NodeType { get; }
    public ITokenNode DoubleColon { get; }
    public ITypeSpec TypeSpec { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_DoubleColon();
    public virtual ITypeSpec get_TypeSpec();
    public virtual ITypeSpec SetTypeSpec(ITypeSpec param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.TypeUsage : ILCompositeElement {
    public static short SCALAR_TYPE;
    public static short TYPE_MODIFIER;
    public NodeType NodeType { get; }
    public IScalarType ScalarType { get; }
    public TreeNodeCollection`1<ITypeModifier> TypeModifiers { get; }
    public TreeNodeEnumerable`1<ITypeModifier> TypeModifiersEnumerable { get; }
    public IReference Reference { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IScalarType get_ScalarType();
    public virtual TreeNodeCollection`1<ITypeModifier> get_TypeModifiers();
    public virtual TreeNodeEnumerable`1<ITypeModifier> get_TypeModifiersEnumerable();
    public virtual IScalarType SetScalarType(IScalarType param);
    public virtual string ToString();
    public sealed virtual IPsiModule GetScopePsiModule();
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public sealed virtual IReference get_Reference();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.UnmanagedPointerType : ILCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.UserScalarType : ILCompositeElement {
    public static short CLASS_KEYWORD;
    public static short VALUETYPE_KEYWORD;
    public static short TYPE_REFERENCE;
    public NodeType NodeType { get; }
    public ITokenNode ClassKeyword { get; }
    public ITypeReference TypeReference { get; }
    public ITokenNode ValuetypeKeyword { get; }
    public IReference Reference { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_ClassKeyword();
    public virtual ITypeReference get_TypeReference();
    public virtual ITokenNode get_ValuetypeKeyword();
    public virtual ITypeReference SetTypeReference(ITypeReference param);
    public virtual string ToString();
    public sealed virtual IPsiModule GetScopePsiModule();
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public sealed virtual IReference get_Reference();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.VariantType : ILCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.Vtentry : ILCompositeElement {
    public static short DOT_VTENTRY_KEYWORD;
    public static short ENTRY_NUMBER;
    public static short COLON;
    public static short SLOT_NUMBER;
    public NodeType NodeType { get; }
    public ITokenNode Colon { get; }
    public ITokenNode DotVtentryKeyword { get; }
    public ITokenNode EntryNumber { get; }
    public ITokenNode SlotNumber { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_Colon();
    public virtual ITokenNode get_DotVtentryKeyword();
    public virtual ITokenNode get_EntryNumber();
    public virtual ITokenNode get_SlotNumber();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.VtfixupAttribute : ILCompositeElement {
    public static short KEYWORD;
    public NodeType NodeType { get; }
    public ITokenNode Keyword { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_Keyword();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.VtfixupAttributeList : ILCompositeElement {
    public static short ATTRIBUTE;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<IVtfixupAttribute> Attributes { get; }
    public TreeNodeEnumerable`1<IVtfixupAttribute> AttributesEnumerable { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<IVtfixupAttribute> get_Attributes();
    public virtual TreeNodeEnumerable`1<IVtfixupAttribute> get_AttributesEnumerable();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.IL.Impl.Tree.Zeroinit : ILCompositeElement {
    public static short DOT_ZEROINIT_KEYWORD;
    public NodeType NodeType { get; }
    public ITokenNode DotZeroinitKeyword { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_DotZeroinitKeyword();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Psi.IL.Parsing.ILFilteringLexer : FilteringLexer {
    public ILFilteringLexer(ILexer lexer);
    protected virtual bool Skip(TokenNodeType tokenType);
}
public class JetBrains.ReSharper.Psi.IL.Parsing.ILLexer : ILLexerGenerated {
    public ILLexer(IBuffer buffer);
    protected virtual void locateToken();
    private bool NextTokenIsWhitespaceOrComment();
}
public class JetBrains.ReSharper.Psi.IL.Parsing.ILLexerFactory : object {
    public sealed virtual ILexer CreateLexer(IBuffer buffer);
}
public class JetBrains.ReSharper.Psi.IL.Parsing.ILLexerGenerated : object {
    private static int YY_F;
    private static int YY_NO_STATE;
    private static int YY_NOT_ACCEPT;
    private static int YY_START;
    private static int YY_END;
    private static int YY_NO_ANCHOR;
    private static int YY_BOL;
    private static int YY_EOF;
    private int yy_buffer_index;
    private int yy_buffer_start;
    private int yy_buffer_end;
    private IBuffer yy_buffer;
    private int yy_eof_pos;
    private bool yy_at_bol;
    private int yy_lexical_state;
    protected static int AFTERSHARP;
    protected static int YYINITIAL;
    protected static int AFTERID;
    protected static int AFTERDOT;
    private static Int32[] yy_state_dtrans;
    private static int YY_E_INTERNAL;
    private static int YY_E_MATCH;
    private static String[] yy_error_string;
    private static Int32[] yy_acpt;
    private static Int32[] yy_cmap;
    private static Int32[] yy_rmap;
    private static Int32[0...,0...] yy_nxt;
    protected TokenNodeType currTokenType;
    protected static Dictionary`2<string, TokenNodeType> Directives;
    protected static Dictionary`2<string, TokenNodeType> Keywords;
    protected static Dictionary`2<string, TokenNodeType> Instructions;
    protected static Dictionary`2<string, TokenNodeType> PreprocessorDirectives;
    public UInt32 LexerStateEx { get; }
    public object CurrentPosition { get; public set; }
    public TokenNodeType TokenType { get; }
    public int TokenStart { get; }
    public int TokenEnd { get; }
    public int LexemIndent { get; }
    public IBuffer Buffer { get; }
    protected int BufferIndex { get; protected set; }
    protected int BufferStart { get; protected set; }
    protected int BufferEnd { get; protected set; }
    public int EOFPos { get; }
    protected int LexicalState { get; }
    public ILLexerGenerated(IBuffer buffer);
    public ILLexerGenerated(IBuffer buffer, int startOffset, int endOffset);
    private static ILLexerGenerated();
    private void yybegin(int state);
    private void yy_move_end();
    private static bool yy_isnewline(char c);
    internal string yytext();
    private int yylength();
    private void yy_error(int code, bool fatal);
    public virtual TokenNodeType _locateToken();
    protected TokenNodeType makeToken(TokenNodeType type, int state);
    public sealed virtual void Start();
    public sealed virtual void Start(int startOffset, int endOffset, UInt32 state);
    public sealed virtual void Advance();
    public sealed virtual UInt32 get_LexerStateEx();
    public sealed virtual object get_CurrentPosition();
    public sealed virtual void set_CurrentPosition(object value);
    public sealed virtual TokenNodeType get_TokenType();
    public sealed virtual int get_TokenStart();
    public sealed virtual int get_TokenEnd();
    public sealed virtual int get_LexemIndent();
    public sealed virtual IBuffer get_Buffer();
    protected int get_BufferIndex();
    protected void set_BufferIndex(int value);
    protected int get_BufferStart();
    protected void set_BufferStart(int value);
    protected int get_BufferEnd();
    protected void set_BufferEnd(int value);
    public sealed virtual int get_EOFPos();
    protected int get_LexicalState();
    protected virtual void locateToken();
}
internal class JetBrains.ReSharper.Psi.IL.Parsing.ILMissingTokensInserter : object {
    private ILexer myLexer;
    private Func`2<ILexer, LeafElementBase> myTokenFactory;
    private ILMissingTokensInserter(ILexer lexer, Func`2<ILexer, LeafElementBase> tokenFactory);
    private TreeOffset GetLeafOffset(LeafElementBase element);
    private void Run(TreeElement root);
    public static void Run(TreeElement node, ILexer lexer, Func`2<ILexer, LeafElementBase> tokenFactory);
}
internal class JetBrains.ReSharper.Psi.IL.Parsing.ILParser : ILParserGenerated {
    private ILexer myOriginalLexer;
    public ILParser(ILexer lexer);
    public sealed virtual IFile ParseFile();
    protected virtual TreeElement CreateToken();
    private TreeElement CreateToken(TokenNodeType tokenType, int tokenLength);
    private TreeElement ParseReferenceName(bool slashed);
    public virtual TreeElement ParseQualifiedName();
    public virtual TreeElement ParseReferenceName();
    public virtual TreeElement ParseIdentifierWithOwnerQualification();
    public virtual TreeElement ParseTypeUsage();
    private TreeElement ParseTypeUsageInternal(bool returnTypeInMethodScalarType);
    private bool SignatureStart();
    private bool ExpectArrayBound();
    public virtual TreeElement ParseMethodScalarType();
    public virtual TreeElement ParseIlQualifiedName();
    public virtual TreeElement ParseIlReferenceOwner();
    public virtual TreeElement ParseTypeMemberUsage();
    public virtual TreeElement ParseTypeWithReferenceBase();
    public virtual TreeElement ParseTypeMemberReferenceName();
    public virtual TreeElement ParseTypeSpec();
    public virtual void ParseILAssemblyDeclarationAux(CompositeElement result);
    public virtual void ParseILClassParamXSpecificationAux(CompositeElement result);
    public virtual void ParseILMethodParamXSpecificationAux(CompositeElement result);
    public virtual void ParseILMethodOverridingDeclarationInMethodAux(CompositeElement result);
    public virtual void ParseILMethodOverridingDeclarationInClassAux(CompositeElement result);
    public virtual void ParseILModuleDeclarationAux(CompositeElement result);
    public virtual void ParseILClassDeclarationAux(CompositeElement result);
    public virtual void ParseILFileDeclarationAux(CompositeElement result);
    public virtual TreeElement ParsePermissionSetBody();
    public virtual TreeElement ParseTypeSpecWithDoubleColon();
    public virtual TreeElement ParseArrayType();
    protected virtual TreeElement MatchHexByte();
    protected virtual bool ExpectHexByte();
}
public class JetBrains.ReSharper.Psi.IL.Parsing.ILTokenType : object {
    public static int BAD_TOKEN_NODE_TYPE_INDEX;
    public static TokenNodeType BAD_TOKEN;
    public static int DUMMY_TERMINATOR_NODE_TYPE_INDEX;
    public static TokenNodeType DUMMY_TERMINATOR;
    public static int PERMISSION_BODY_NODE_TYPE_INDEX;
    public static TokenNodeType PERMISSION_BODY;
    public static int NEW_LINE_NODE_TYPE_INDEX;
    public static TokenNodeType NEW_LINE;
    public static int COMMENT_NODE_TYPE_INDEX;
    public static TokenNodeType COMMENT;
    public static int WHITE_SPACE_NODE_TYPE_INDEX;
    public static TokenNodeType WHITE_SPACE;
    public static int IDENTIFIER_NODE_TYPE_INDEX;
    public static TokenNodeType IDENTIFIER;
    public static int INTEGER_LITERAL_NODE_TYPE_INDEX;
    public static TokenNodeType INTEGER_LITERAL;
    public static int FLOAT_LITERAL_NODE_TYPE_INDEX;
    public static TokenNodeType FLOAT_LITERAL;
    public static int QSTRING_LITERAL_NODE_TYPE_INDEX;
    public static TokenNodeType QSTRING_LITERAL;
    public static int SQSTRING_LITERAL_NODE_TYPE_INDEX;
    public static TokenNodeType SQSTRING_LITERAL;
    public static int HEXBYTE_LITERAL_NODE_TYPE_INDEX;
    public static TokenNodeType HEXBYTE_LITERAL;
    public static int LPARENTH_NODE_TYPE_INDEX;
    public static TokenNodeType LPARENTH;
    public static int RPARENTH_NODE_TYPE_INDEX;
    public static TokenNodeType RPARENTH;
    public static int LBRACE_NODE_TYPE_INDEX;
    public static TokenNodeType LBRACE;
    public static int RBRACE_NODE_TYPE_INDEX;
    public static TokenNodeType RBRACE;
    public static int LBRACKET_NODE_TYPE_INDEX;
    public static TokenNodeType LBRACKET;
    public static int RBRACKET_NODE_TYPE_INDEX;
    public static TokenNodeType RBRACKET;
    public static int COMMA_NODE_TYPE_INDEX;
    public static TokenNodeType COMMA;
    public static int DOT_NODE_TYPE_INDEX;
    public static TokenNodeType DOT;
    public static int EQ_NODE_TYPE_INDEX;
    public static TokenNodeType EQ;
    public static int GT_NODE_TYPE_INDEX;
    public static TokenNodeType GT;
    public static int LT_NODE_TYPE_INDEX;
    public static TokenNodeType LT;
    public static int COLON_NODE_TYPE_INDEX;
    public static TokenNodeType COLON;
    public static int PLUS_NODE_TYPE_INDEX;
    public static TokenNodeType PLUS;
    public static int MINUS_NODE_TYPE_INDEX;
    public static TokenNodeType MINUS;
    public static int DIV_NODE_TYPE_INDEX;
    public static TokenNodeType DIV;
    public static int EXCL_NODE_TYPE_INDEX;
    public static TokenNodeType EXCL;
    public static int ASTERISK_NODE_TYPE_INDEX;
    public static TokenNodeType ASTERISK;
    public static int AND_NODE_TYPE_INDEX;
    public static TokenNodeType AND;
    public static int TRIDOT_NODE_TYPE_INDEX;
    public static TokenNodeType TRIDOT;
    public static int DOUBLE_COLON_NODE_TYPE_INDEX;
    public static TokenNodeType DOUBLE_COLON;
    public static int SHARP_NODE_TYPE_INDEX;
    public static TokenNodeType SHARP;
    public static int DOT_ADDON_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_ADDON_KEYWORD;
    public static int DOT_ASSEMBLY_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_ASSEMBLY_KEYWORD;
    public static int DOT_BASE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_BASE_KEYWORD;
    public static int DOT_CCTOR_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_CCTOR_KEYWORD;
    public static int DOT_CLASS_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_CLASS_KEYWORD;
    public static int DOT_CORFLAGS_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_CORFLAGS_KEYWORD;
    public static int DOT_CTOR_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_CTOR_KEYWORD;
    public static int DOT_CULTURE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_CULTURE_KEYWORD;
    public static int DOT_CUSTOM_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_CUSTOM_KEYWORD;
    public static int DOT_DATA_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_DATA_KEYWORD;
    public static int DOT_EMITBYTE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_EMITBYTE_KEYWORD;
    public static int DOT_ENTRYPOINT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_ENTRYPOINT_KEYWORD;
    public static int DOT_EVENT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_EVENT_KEYWORD;
    public static int DOT_EXPORT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_EXPORT_KEYWORD;
    public static int DOT_FIELD_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_FIELD_KEYWORD;
    public static int DOT_FILE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_FILE_KEYWORD;
    public static int DOT_FIRE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_FIRE_KEYWORD;
    public static int DOT_GET_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_GET_KEYWORD;
    public static int DOT_HASH_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_HASH_KEYWORD;
    public static int DOT_IMAGEBASE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_IMAGEBASE_KEYWORD;
    public static int DOT_IMPORT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_IMPORT_KEYWORD;
    public static int DOT_INTERFACEIMPL_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_INTERFACEIMPL_KEYWORD;
    public static int DOT_LANGUAGE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_LANGUAGE_KEYWORD;
    public static int DOT_LINE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_LINE_KEYWORD;
    public static int DOT_LOCALE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_LOCALE_KEYWORD;
    public static int DOT_LOCALS_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_LOCALS_KEYWORD;
    public static int DOT_MANIFESTRES_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_MANIFESTRES_KEYWORD;
    public static int DOT_MAXSTACK_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_MAXSTACK_KEYWORD;
    public static int DOT_METHOD_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_METHOD_KEYWORD;
    public static int DOT_MODULE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_MODULE_KEYWORD;
    public static int DOT_MRESOURCE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_MRESOURCE_KEYWORD;
    public static int DOT_MSCORLIB_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_MSCORLIB_KEYWORD;
    public static int DOT_NAMESPACE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_NAMESPACE_KEYWORD;
    public static int DOT_NESTER_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_NESTER_KEYWORD;
    public static int DOT_OTHER_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_OTHER_KEYWORD;
    public static int DOT_OVERRIDE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_OVERRIDE_KEYWORD;
    public static int DOT_PACK_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_PACK_KEYWORD;
    public static int DOT_PARAM_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_PARAM_KEYWORD;
    public static int DOT_PDIRECT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_PDIRECT_KEYWORD;
    public static int DOT_PERMISSION_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_PERMISSION_KEYWORD;
    public static int DOT_PERMISSIONSET_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_PERMISSIONSET_KEYWORD;
    public static int DOT_PROPERTY_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_PROPERTY_KEYWORD;
    public static int DOT_PUBLICKEY_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_PUBLICKEY_KEYWORD;
    public static int DOT_PUBLICKEYTOKEN_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_PUBLICKEYTOKEN_KEYWORD;
    public static int DOT_REMOVEON_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_REMOVEON_KEYWORD;
    public static int DOT_SET_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_SET_KEYWORD;
    public static int DOT_SIZE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_SIZE_KEYWORD;
    public static int DOT_STACKRESERVE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_STACKRESERVE_KEYWORD;
    public static int DOT_SUBSYSTEM_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_SUBSYSTEM_KEYWORD;
    public static int DOT_THIS_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_THIS_KEYWORD;
    public static int DOT_TRY_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_TRY_KEYWORD;
    public static int DOT_TYPEDEF_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_TYPEDEF_KEYWORD;
    public static int DOT_TYPELIST_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_TYPELIST_KEYWORD;
    public static int DOT_VER_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_VER_KEYWORD;
    public static int DOT_VTABLE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_VTABLE_KEYWORD;
    public static int DOT_VTENTRY_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_VTENTRY_KEYWORD;
    public static int DOT_VTFIXUP_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_VTFIXUP_KEYWORD;
    public static int DOT_ZEROINIT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DOT_ZEROINIT_KEYWORD;
    public static int ABSTRACT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType ABSTRACT_KEYWORD;
    public static int AGGRESSIVEINLINING_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType AGGRESSIVEINLINING_KEYWORD;
    public static int AGGRESSIVEOPTIMIZATION_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType AGGRESSIVEOPTIMIZATION_KEYWORD;
    public static int ALGORITHM_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType ALGORITHM_KEYWORD;
    public static int ALIGNMENT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType ALIGNMENT_KEYWORD;
    public static int ANSI_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType ANSI_KEYWORD;
    public static int ANY_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType ANY_KEYWORD;
    public static int ARRAY_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType ARRAY_KEYWORD;
    public static int AS_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType AS_KEYWORD;
    public static int ASSEMBLY_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType ASSEMBLY_KEYWORD;
    public static int ASSERT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType ASSERT_KEYWORD;
    public static int AT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType AT_KEYWORD;
    public static int AUTO_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType AUTO_KEYWORD;
    public static int AUTOCHAR_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType AUTOCHAR_KEYWORD;
    public static int BEFOREFIELDINIT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType BEFOREFIELDINIT_KEYWORD;
    public static int BLOB_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType BLOB_KEYWORD;
    public static int BLOB_OBJECT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType BLOB_OBJECT_KEYWORD;
    public static int BOOL_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType BOOL_KEYWORD;
    public static int BSTR_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType BSTR_KEYWORD;
    public static int BYTEARRAY_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType BYTEARRAY_KEYWORD;
    public static int BYVALSTR_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType BYVALSTR_KEYWORD;
    public static int CALLMOSTDERIVED_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType CALLMOSTDERIVED_KEYWORD;
    public static int CARRAY_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType CARRAY_KEYWORD;
    public static int CATCH_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType CATCH_KEYWORD;
    public static int CDECL_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType CDECL_KEYWORD;
    public static int CF_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType CF_KEYWORD;
    public static int CHAR_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType CHAR_KEYWORD;
    public static int CIL_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType CIL_KEYWORD;
    public static int CLASS_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType CLASS_KEYWORD;
    public static int CLSID_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType CLSID_KEYWORD;
    public static int COMPILERCONTROLLED_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType COMPILERCONTROLLED_KEYWORD;
    public static int CONST_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType CONST_KEYWORD;
    public static int CONSTRAINT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType CONSTRAINT_KEYWORD;
    public static int CURRENCY_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType CURRENCY_KEYWORD;
    public static int CUSTOM_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType CUSTOM_KEYWORD;
    public static int DATE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DATE_KEYWORD;
    public static int DECIMAL_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DECIMAL_KEYWORD;
    public static int DEFAULT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DEFAULT_KEYWORD;
    public static int DEMAND_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DEMAND_KEYWORD;
    public static int DENY_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType DENY_KEYWORD;
    public static int ENUM_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType ENUM_KEYWORD;
    public static int ERROR_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType ERROR_KEYWORD;
    public static int EXPLICIT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType EXPLICIT_KEYWORD;
    public static int EXTENDS_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType EXTENDS_KEYWORD;
    public static int EXTERN_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType EXTERN_KEYWORD;
    public static int FALSE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType FALSE_KEYWORD;
    public static int FAMANDASSEM_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType FAMANDASSEM_KEYWORD;
    public static int FAMILY_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType FAMILY_KEYWORD;
    public static int FAMORASSEM_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType FAMORASSEM_KEYWORD;
    public static int FASTCALL_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType FASTCALL_KEYWORD;
    public static int FAULT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType FAULT_KEYWORD;
    public static int FIELD_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType FIELD_KEYWORD;
    public static int FILTER_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType FILTER_KEYWORD;
    public static int FINAL_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType FINAL_KEYWORD;
    public static int FINALLY_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType FINALLY_KEYWORD;
    public static int FIXED_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType FIXED_KEYWORD;
    public static int FLOAT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType FLOAT_KEYWORD;
    public static int FLOAT32_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType FLOAT32_KEYWORD;
    public static int FLOAT64_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType FLOAT64_KEYWORD;
    public static int FORWARDER_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType FORWARDER_KEYWORD;
    public static int FORWARDREF_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType FORWARDREF_KEYWORD;
    public static int FROMUNMANAGED_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType FROMUNMANAGED_KEYWORD;
    public static int HANDLER_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType HANDLER_KEYWORD;
    public static int HASSECURITY_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType HASSECURITY_KEYWORD;
    public static int HIDEBYSIG_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType HIDEBYSIG_KEYWORD;
    public static int HRESULT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType HRESULT_KEYWORD;
    public static int HSTRING_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType HSTRING_KEYWORD;
    public static int IDISPATCH_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType IDISPATCH_KEYWORD;
    public static int IINSPECTABLE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType IINSPECTABLE_KEYWORD;
    public static int IL_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType IL_KEYWORD;
    public static int ILLEGAL_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType ILLEGAL_KEYWORD;
    public static int IMPLEMENTS_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType IMPLEMENTS_KEYWORD;
    public static int IMPLICITCOM_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType IMPLICITCOM_KEYWORD;
    public static int IMPLICITRES_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType IMPLICITRES_KEYWORD;
    public static int IMPORT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType IMPORT_KEYWORD;
    public static int IN_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType IN_KEYWORD;
    public static int INHERITCHECK_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType INHERITCHECK_KEYWORD;
    public static int INIT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType INIT_KEYWORD;
    public static int INITONLY_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType INITONLY_KEYWORD;
    public static int INSTANCE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType INSTANCE_KEYWORD;
    public static int INT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType INT_KEYWORD;
    public static int INT16_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType INT16_KEYWORD;
    public static int INT32_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType INT32_KEYWORD;
    public static int INT64_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType INT64_KEYWORD;
    public static int INT8_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType INT8_KEYWORD;
    public static int INTERFACE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType INTERFACE_KEYWORD;
    public static int INTERNALCALL_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType INTERNALCALL_KEYWORD;
    public static int IUNKNOWN_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType IUNKNOWN_KEYWORD;
    public static int LASTERR_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType LASTERR_KEYWORD;
    public static int LCID_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType LCID_KEYWORD;
    public static int LINKCHECK_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType LINKCHECK_KEYWORD;
    public static int LITERAL_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType LITERAL_KEYWORD;
    public static int LPSTR_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType LPSTR_KEYWORD;
    public static int LPSTRUCT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType LPSTRUCT_KEYWORD;
    public static int LPTSTR_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType LPTSTR_KEYWORD;
    public static int LPVOID_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType LPVOID_KEYWORD;
    public static int LPWSTR_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType LPWSTR_KEYWORD;
    public static int MANAGED_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType MANAGED_KEYWORD;
    public static int MARSHAL_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType MARSHAL_KEYWORD;
    public static int MDTOKEN_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType MDTOKEN_KEYWORD;
    public static int METHOD_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType METHOD_KEYWORD;
    public static int MODOPT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType MODOPT_KEYWORD;
    public static int MODREQ_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType MODREQ_KEYWORD;
    public static int NATIVE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType NATIVE_KEYWORD;
    public static int NESTED_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType NESTED_KEYWORD;
    public static int NEWSLOT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType NEWSLOT_KEYWORD;
    public static int NOAPPDOMAIN_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType NOAPPDOMAIN_KEYWORD;
    public static int NOINLINING_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType NOINLINING_KEYWORD;
    public static int NOMACHINE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType NOMACHINE_KEYWORD;
    public static int NOMANGLE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType NOMANGLE_KEYWORD;
    public static int NOMETADATA_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType NOMETADATA_KEYWORD;
    public static int NONCASDEMAND_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType NONCASDEMAND_KEYWORD;
    public static int NONCASINHERITANCE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType NONCASINHERITANCE_KEYWORD;
    public static int NONCASLINKDEMAND_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType NONCASLINKDEMAND_KEYWORD;
    public static int NOOPTIMIZATION_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType NOOPTIMIZATION_KEYWORD;
    public static int NOPROCESS_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType NOPROCESS_KEYWORD;
    public static int NOT_IN_GC_HEAP_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType NOT_IN_GC_HEAP_KEYWORD;
    public static int NOTREMOTABLE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType NOTREMOTABLE_KEYWORD;
    public static int NOTSERIALIZED_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType NOTSERIALIZED_KEYWORD;
    public static int NULL_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType NULL_KEYWORD;
    public static int NULLREF_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType NULLREF_KEYWORD;
    public static int OBJECT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType OBJECT_KEYWORD;
    public static int OBJECTREF_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType OBJECTREF_KEYWORD;
    public static int OPT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType OPT_KEYWORD;
    public static int OPTIL_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType OPTIL_KEYWORD;
    public static int OUT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType OUT_KEYWORD;
    public static int PERMITONLY_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType PERMITONLY_KEYWORD;
    public static int PINNED_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType PINNED_KEYWORD;
    public static int PINVOKEIMPL_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType PINVOKEIMPL_KEYWORD;
    public static int PREFIX_1_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType PREFIX_1_KEYWORD;
    public static int PREFIX_2_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType PREFIX_2_KEYWORD;
    public static int PREFIX_3_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType PREFIX_3_KEYWORD;
    public static int PREFIX_4_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType PREFIX_4_KEYWORD;
    public static int PREFIX_5_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType PREFIX_5_KEYWORD;
    public static int PREFIX_6_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType PREFIX_6_KEYWORD;
    public static int PREFIX_7_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType PREFIX_7_KEYWORD;
    public static int PREFIXREF_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType PREFIXREF_KEYWORD;
    public static int PREJITDENY_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType PREJITDENY_KEYWORD;
    public static int PREJITGRANT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType PREJITGRANT_KEYWORD;
    public static int PRESERVESIG_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType PRESERVESIG_KEYWORD;
    public static int PRIVATE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType PRIVATE_KEYWORD;
    public static int PRIVATESCOPE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType PRIVATESCOPE_KEYWORD;
    public static int PROPERTY_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType PROPERTY_KEYWORD;
    public static int PROTECTED_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType PROTECTED_KEYWORD;
    public static int PUBLIC_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType PUBLIC_KEYWORD;
    public static int RECORD_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType RECORD_KEYWORD;
    public static int REFANY_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType REFANY_KEYWORD;
    public static int REQMIN_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType REQMIN_KEYWORD;
    public static int REQOPT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType REQOPT_KEYWORD;
    public static int REQREFUSE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType REQREFUSE_KEYWORD;
    public static int REQSECOBJ_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType REQSECOBJ_KEYWORD;
    public static int REQUEST_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType REQUEST_KEYWORD;
    public static int RETAINAPPDOMAIN_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType RETAINAPPDOMAIN_KEYWORD;
    public static int RETVAL_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType RETVAL_KEYWORD;
    public static int RTSPECIALNAME_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType RTSPECIALNAME_KEYWORD;
    public static int RUNTIME_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType RUNTIME_KEYWORD;
    public static int SAFEARRAY_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType SAFEARRAY_KEYWORD;
    public static int SEALED_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType SEALED_KEYWORD;
    public static int SEQUENTIAL_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType SEQUENTIAL_KEYWORD;
    public static int SERIALIZABLE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType SERIALIZABLE_KEYWORD;
    public static int SPECIAL_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType SPECIAL_KEYWORD;
    public static int SPECIALNAME_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType SPECIALNAME_KEYWORD;
    public static int STATIC_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType STATIC_KEYWORD;
    public static int STDCALL_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType STDCALL_KEYWORD;
    public static int STORAGE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType STORAGE_KEYWORD;
    public static int STORED_OBJECT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType STORED_OBJECT_KEYWORD;
    public static int STREAM_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType STREAM_KEYWORD;
    public static int STREAMED_OBJECT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType STREAMED_OBJECT_KEYWORD;
    public static int STRICT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType STRICT_KEYWORD;
    public static int STRING_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType STRING_KEYWORD;
    public static int STRUCT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType STRUCT_KEYWORD;
    public static int SYNCHRONIZED_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType SYNCHRONIZED_KEYWORD;
    public static int SYSCHAR_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType SYSCHAR_KEYWORD;
    public static int SYSSTRING_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType SYSSTRING_KEYWORD;
    public static int TBSTR_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType TBSTR_KEYWORD;
    public static int THISCALL_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType THISCALL_KEYWORD;
    public static int TLS_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType TLS_KEYWORD;
    public static int TO_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType TO_KEYWORD;
    public static int TRUE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType TRUE_KEYWORD;
    public static int TYPE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType TYPE_KEYWORD;
    public static int TYPEDREF_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType TYPEDREF_KEYWORD;
    public static int UNICODE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType UNICODE_KEYWORD;
    public static int UNMANAGED_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType UNMANAGED_KEYWORD;
    public static int UNMANAGEDEXP_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType UNMANAGEDEXP_KEYWORD;
    public static int UNSIGNED_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType UNSIGNED_KEYWORD;
    public static int USERDEFINED_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType USERDEFINED_KEYWORD;
    public static int UINT16_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType UINT16_KEYWORD;
    public static int UINT32_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType UINT32_KEYWORD;
    public static int UINT64_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType UINT64_KEYWORD;
    public static int UINT8_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType UINT8_KEYWORD;
    public static int VALUE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType VALUE_KEYWORD;
    public static int VALUETYPE_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType VALUETYPE_KEYWORD;
    public static int VARARG_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType VARARG_KEYWORD;
    public static int VARIANT_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType VARIANT_KEYWORD;
    public static int VECTOR_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType VECTOR_KEYWORD;
    public static int VIRTUAL_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType VIRTUAL_KEYWORD;
    public static int VOID_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType VOID_KEYWORD;
    public static int WCHAR_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType WCHAR_KEYWORD;
    public static int WINAPI_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType WINAPI_KEYWORD;
    public static int WITH_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType WITH_KEYWORD;
    public static int WRAPPER_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType WRAPPER_KEYWORD;
    public static int FILETIME_KEYWORD_NODE_TYPE_INDEX;
    public static TokenNodeType FILETIME_KEYWORD;
    public static int ADD_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType ADD_INSTRUCTION;
    public static int ADD_OVF_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType ADD_OVF_INSTRUCTION;
    public static int ADD_OVF_UN_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType ADD_OVF_UN_INSTRUCTION;
    public static int AND_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType AND_INSTRUCTION;
    public static int ARGLIST_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType ARGLIST_INSTRUCTION;
    public static int BEQ_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType BEQ_INSTRUCTION;
    public static int BEQ_S_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType BEQ_S_INSTRUCTION;
    public static int BGE_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType BGE_INSTRUCTION;
    public static int BGE_S_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType BGE_S_INSTRUCTION;
    public static int BGE_UN_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType BGE_UN_INSTRUCTION;
    public static int BGE_UN_S_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType BGE_UN_S_INSTRUCTION;
    public static int BGT_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType BGT_INSTRUCTION;
    public static int BGT_S_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType BGT_S_INSTRUCTION;
    public static int BGT_UN_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType BGT_UN_INSTRUCTION;
    public static int BGT_UN_S_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType BGT_UN_S_INSTRUCTION;
    public static int BLE_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType BLE_INSTRUCTION;
    public static int BLE_S_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType BLE_S_INSTRUCTION;
    public static int BLE_UN_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType BLE_UN_INSTRUCTION;
    public static int BLE_UN_S_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType BLE_UN_S_INSTRUCTION;
    public static int BLT_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType BLT_INSTRUCTION;
    public static int BLT_S_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType BLT_S_INSTRUCTION;
    public static int BLT_UN_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType BLT_UN_INSTRUCTION;
    public static int BLT_UN_S_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType BLT_UN_S_INSTRUCTION;
    public static int BNE_UN_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType BNE_UN_INSTRUCTION;
    public static int BNE_UN_S_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType BNE_UN_S_INSTRUCTION;
    public static int BOX_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType BOX_INSTRUCTION;
    public static int BR_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType BR_INSTRUCTION;
    public static int BR_S_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType BR_S_INSTRUCTION;
    public static int BREAK_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType BREAK_INSTRUCTION;
    public static int BRFALSE_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType BRFALSE_INSTRUCTION;
    public static int BRFALSE_S_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType BRFALSE_S_INSTRUCTION;
    public static int BRTRUE_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType BRTRUE_INSTRUCTION;
    public static int BRTRUE_S_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType BRTRUE_S_INSTRUCTION;
    public static int CALL_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CALL_INSTRUCTION;
    public static int CALLI_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CALLI_INSTRUCTION;
    public static int CALLVIRT_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CALLVIRT_INSTRUCTION;
    public static int CASTCLASS_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CASTCLASS_INSTRUCTION;
    public static int CEQ_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CEQ_INSTRUCTION;
    public static int CGT_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CGT_INSTRUCTION;
    public static int CGT_UN_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CGT_UN_INSTRUCTION;
    public static int CKFINITE_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CKFINITE_INSTRUCTION;
    public static int CLT_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CLT_INSTRUCTION;
    public static int CLT_UN_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CLT_UN_INSTRUCTION;
    public static int CONSTRAINED_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONSTRAINED_INSTRUCTION;
    public static int CONV_I_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_I_INSTRUCTION;
    public static int CONV_I1_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_I1_INSTRUCTION;
    public static int CONV_I2_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_I2_INSTRUCTION;
    public static int CONV_I4_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_I4_INSTRUCTION;
    public static int CONV_I8_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_I8_INSTRUCTION;
    public static int CONV_OVF_I_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_OVF_I_INSTRUCTION;
    public static int CONV_OVF_I_UN_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_OVF_I_UN_INSTRUCTION;
    public static int CONV_OVF_I1_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_OVF_I1_INSTRUCTION;
    public static int CONV_OVF_I1_UN_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_OVF_I1_UN_INSTRUCTION;
    public static int CONV_OVF_I2_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_OVF_I2_INSTRUCTION;
    public static int CONV_OVF_I2_UN_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_OVF_I2_UN_INSTRUCTION;
    public static int CONV_OVF_I4_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_OVF_I4_INSTRUCTION;
    public static int CONV_OVF_I4_UN_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_OVF_I4_UN_INSTRUCTION;
    public static int CONV_OVF_I8_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_OVF_I8_INSTRUCTION;
    public static int CONV_OVF_I8_UN_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_OVF_I8_UN_INSTRUCTION;
    public static int CONV_OVF_U_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_OVF_U_INSTRUCTION;
    public static int CONV_OVF_U_UN_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_OVF_U_UN_INSTRUCTION;
    public static int CONV_OVF_U1_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_OVF_U1_INSTRUCTION;
    public static int CONV_OVF_U1_UN_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_OVF_U1_UN_INSTRUCTION;
    public static int CONV_OVF_U2_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_OVF_U2_INSTRUCTION;
    public static int CONV_OVF_U2_UN_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_OVF_U2_UN_INSTRUCTION;
    public static int CONV_OVF_U4_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_OVF_U4_INSTRUCTION;
    public static int CONV_OVF_U4_UN_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_OVF_U4_UN_INSTRUCTION;
    public static int CONV_OVF_U8_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_OVF_U8_INSTRUCTION;
    public static int CONV_OVF_U8_UN_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_OVF_U8_UN_INSTRUCTION;
    public static int CONV_R_UN_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_R_UN_INSTRUCTION;
    public static int CONV_R4_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_R4_INSTRUCTION;
    public static int CONV_R8_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_R8_INSTRUCTION;
    public static int CONV_U_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_U_INSTRUCTION;
    public static int CONV_U1_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_U1_INSTRUCTION;
    public static int CONV_U2_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_U2_INSTRUCTION;
    public static int CONV_U4_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_U4_INSTRUCTION;
    public static int CONV_U8_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CONV_U8_INSTRUCTION;
    public static int CPBLK_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CPBLK_INSTRUCTION;
    public static int CPOBJ_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType CPOBJ_INSTRUCTION;
    public static int DIV_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType DIV_INSTRUCTION;
    public static int DIV_UN_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType DIV_UN_INSTRUCTION;
    public static int DUP_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType DUP_INSTRUCTION;
    public static int ENDFILTER_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType ENDFILTER_INSTRUCTION;
    public static int ENDFINALLY_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType ENDFINALLY_INSTRUCTION;
    public static int INITBLK_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType INITBLK_INSTRUCTION;
    public static int NO_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType NO_INSTRUCTION;
    public static int INITOBJ_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType INITOBJ_INSTRUCTION;
    public static int ISINST_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType ISINST_INSTRUCTION;
    public static int JMP_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType JMP_INSTRUCTION;
    public static int LDARG_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDARG_INSTRUCTION;
    public static int LDARG_0_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDARG_0_INSTRUCTION;
    public static int LDARG_1_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDARG_1_INSTRUCTION;
    public static int LDARG_2_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDARG_2_INSTRUCTION;
    public static int LDARG_3_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDARG_3_INSTRUCTION;
    public static int LDARG_S_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDARG_S_INSTRUCTION;
    public static int LDARGA_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDARGA_INSTRUCTION;
    public static int LDARGA_S_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDARGA_S_INSTRUCTION;
    public static int LDC_I4_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDC_I4_INSTRUCTION;
    public static int LDC_I4_0_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDC_I4_0_INSTRUCTION;
    public static int LDC_I4_1_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDC_I4_1_INSTRUCTION;
    public static int LDC_I4_2_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDC_I4_2_INSTRUCTION;
    public static int LDC_I4_3_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDC_I4_3_INSTRUCTION;
    public static int LDC_I4_4_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDC_I4_4_INSTRUCTION;
    public static int LDC_I4_5_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDC_I4_5_INSTRUCTION;
    public static int LDC_I4_6_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDC_I4_6_INSTRUCTION;
    public static int LDC_I4_7_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDC_I4_7_INSTRUCTION;
    public static int LDC_I4_8_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDC_I4_8_INSTRUCTION;
    public static int LDC_I4_M1_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDC_I4_M1_INSTRUCTION;
    public static int LDC_I4_S_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDC_I4_S_INSTRUCTION;
    public static int LDC_I8_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDC_I8_INSTRUCTION;
    public static int LDC_R4_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDC_R4_INSTRUCTION;
    public static int LDC_R8_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDC_R8_INSTRUCTION;
    public static int LDELEM_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDELEM_INSTRUCTION;
    public static int LDELEM_I_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDELEM_I_INSTRUCTION;
    public static int LDELEM_I1_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDELEM_I1_INSTRUCTION;
    public static int LDELEM_I2_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDELEM_I2_INSTRUCTION;
    public static int LDELEM_I4_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDELEM_I4_INSTRUCTION;
    public static int LDELEM_I8_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDELEM_I8_INSTRUCTION;
    public static int LDELEM_R4_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDELEM_R4_INSTRUCTION;
    public static int LDELEM_R8_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDELEM_R8_INSTRUCTION;
    public static int LDELEM_REF_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDELEM_REF_INSTRUCTION;
    public static int LDELEM_U1_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDELEM_U1_INSTRUCTION;
    public static int LDELEM_U2_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDELEM_U2_INSTRUCTION;
    public static int LDELEM_U4_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDELEM_U4_INSTRUCTION;
    public static int LDELEMA_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDELEMA_INSTRUCTION;
    public static int LDFLD_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDFLD_INSTRUCTION;
    public static int LDFLDA_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDFLDA_INSTRUCTION;
    public static int LDFTN_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDFTN_INSTRUCTION;
    public static int LDIND_I_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDIND_I_INSTRUCTION;
    public static int LDIND_I1_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDIND_I1_INSTRUCTION;
    public static int LDIND_I2_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDIND_I2_INSTRUCTION;
    public static int LDIND_I4_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDIND_I4_INSTRUCTION;
    public static int LDIND_I8_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDIND_I8_INSTRUCTION;
    public static int LDIND_R4_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDIND_R4_INSTRUCTION;
    public static int LDIND_R8_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDIND_R8_INSTRUCTION;
    public static int LDIND_REF_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDIND_REF_INSTRUCTION;
    public static int LDIND_U1_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDIND_U1_INSTRUCTION;
    public static int LDIND_U2_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDIND_U2_INSTRUCTION;
    public static int LDIND_U4_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDIND_U4_INSTRUCTION;
    public static int LDLEN_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDLEN_INSTRUCTION;
    public static int LDLOC_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDLOC_INSTRUCTION;
    public static int LDLOC_0_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDLOC_0_INSTRUCTION;
    public static int LDLOC_1_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDLOC_1_INSTRUCTION;
    public static int LDLOC_2_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDLOC_2_INSTRUCTION;
    public static int LDLOC_3_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDLOC_3_INSTRUCTION;
    public static int LDLOC_S_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDLOC_S_INSTRUCTION;
    public static int LDLOCA_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDLOCA_INSTRUCTION;
    public static int LDLOCA_S_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDLOCA_S_INSTRUCTION;
    public static int LDNULL_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDNULL_INSTRUCTION;
    public static int LDOBJ_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDOBJ_INSTRUCTION;
    public static int LDSFLD_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDSFLD_INSTRUCTION;
    public static int LDSFLDA_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDSFLDA_INSTRUCTION;
    public static int LDSTR_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDSTR_INSTRUCTION;
    public static int LDTOKEN_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDTOKEN_INSTRUCTION;
    public static int LDVIRTFTN_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LDVIRTFTN_INSTRUCTION;
    public static int LEAVE_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LEAVE_INSTRUCTION;
    public static int LEAVE_S_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LEAVE_S_INSTRUCTION;
    public static int LOCALLOC_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType LOCALLOC_INSTRUCTION;
    public static int MKREFANY_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType MKREFANY_INSTRUCTION;
    public static int MUL_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType MUL_INSTRUCTION;
    public static int MUL_OVF_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType MUL_OVF_INSTRUCTION;
    public static int MUL_OVF_UN_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType MUL_OVF_UN_INSTRUCTION;
    public static int NEG_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType NEG_INSTRUCTION;
    public static int NEWARR_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType NEWARR_INSTRUCTION;
    public static int NEWOBJ_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType NEWOBJ_INSTRUCTION;
    public static int NOP_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType NOP_INSTRUCTION;
    public static int NOT_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType NOT_INSTRUCTION;
    public static int OR_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType OR_INSTRUCTION;
    public static int POP_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType POP_INSTRUCTION;
    public static int READONLY_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType READONLY_INSTRUCTION;
    public static int REFANYTYPE_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType REFANYTYPE_INSTRUCTION;
    public static int REFANYVAL_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType REFANYVAL_INSTRUCTION;
    public static int REM_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType REM_INSTRUCTION;
    public static int REM_UN_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType REM_UN_INSTRUCTION;
    public static int RET_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType RET_INSTRUCTION;
    public static int RETHROW_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType RETHROW_INSTRUCTION;
    public static int SHL_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType SHL_INSTRUCTION;
    public static int SHR_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType SHR_INSTRUCTION;
    public static int SHR_UN_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType SHR_UN_INSTRUCTION;
    public static int SIZEOF_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType SIZEOF_INSTRUCTION;
    public static int STARG_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType STARG_INSTRUCTION;
    public static int STARG_S_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType STARG_S_INSTRUCTION;
    public static int STELEM_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType STELEM_INSTRUCTION;
    public static int STELEM_I_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType STELEM_I_INSTRUCTION;
    public static int STELEM_I1_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType STELEM_I1_INSTRUCTION;
    public static int STELEM_I2_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType STELEM_I2_INSTRUCTION;
    public static int STELEM_I4_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType STELEM_I4_INSTRUCTION;
    public static int STELEM_I8_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType STELEM_I8_INSTRUCTION;
    public static int STELEM_R4_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType STELEM_R4_INSTRUCTION;
    public static int STELEM_R8_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType STELEM_R8_INSTRUCTION;
    public static int STELEM_REF_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType STELEM_REF_INSTRUCTION;
    public static int STFLD_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType STFLD_INSTRUCTION;
    public static int STIND_I_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType STIND_I_INSTRUCTION;
    public static int STIND_I1_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType STIND_I1_INSTRUCTION;
    public static int STIND_I2_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType STIND_I2_INSTRUCTION;
    public static int STIND_I4_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType STIND_I4_INSTRUCTION;
    public static int STIND_I8_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType STIND_I8_INSTRUCTION;
    public static int STIND_R4_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType STIND_R4_INSTRUCTION;
    public static int STIND_R8_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType STIND_R8_INSTRUCTION;
    public static int STIND_REF_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType STIND_REF_INSTRUCTION;
    public static int STLOC_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType STLOC_INSTRUCTION;
    public static int STLOC_0_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType STLOC_0_INSTRUCTION;
    public static int STLOC_1_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType STLOC_1_INSTRUCTION;
    public static int STLOC_2_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType STLOC_2_INSTRUCTION;
    public static int STLOC_3_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType STLOC_3_INSTRUCTION;
    public static int STLOC_S_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType STLOC_S_INSTRUCTION;
    public static int STOBJ_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType STOBJ_INSTRUCTION;
    public static int STSFLD_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType STSFLD_INSTRUCTION;
    public static int SUB_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType SUB_INSTRUCTION;
    public static int SUB_OVF_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType SUB_OVF_INSTRUCTION;
    public static int SUB_OVF_UN_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType SUB_OVF_UN_INSTRUCTION;
    public static int SWITCH_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType SWITCH_INSTRUCTION;
    public static int TAIL_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType TAIL_INSTRUCTION;
    public static int THROW_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType THROW_INSTRUCTION;
    public static int UNALIGNED_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType UNALIGNED_INSTRUCTION;
    public static int UNBOX_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType UNBOX_INSTRUCTION;
    public static int UNBOX_ANY_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType UNBOX_ANY_INSTRUCTION;
    public static int UNUSED_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType UNUSED_INSTRUCTION;
    public static int VOLATILE_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType VOLATILE_INSTRUCTION;
    public static int XOR_INSTRUCTION_NODE_TYPE_INDEX;
    public static TokenNodeType XOR_INSTRUCTION;
    public static int BRNULL_INSTRUCTION_ALIAS_NODE_TYPE_INDEX;
    public static TokenNodeType BRNULL_INSTRUCTION_ALIAS;
    public static int BRNULL_S_INSTRUCTION_ALIAS_NODE_TYPE_INDEX;
    public static TokenNodeType BRNULL_S_INSTRUCTION_ALIAS;
    public static int BRZERO_INSTRUCTION_ALIAS_NODE_TYPE_INDEX;
    public static TokenNodeType BRZERO_INSTRUCTION_ALIAS;
    public static int BRZERO_S_INSTRUCTION_ALIAS_NODE_TYPE_INDEX;
    public static TokenNodeType BRZERO_S_INSTRUCTION_ALIAS;
    public static int BRINST_INSTRUCTION_ALIAS_NODE_TYPE_INDEX;
    public static TokenNodeType BRINST_INSTRUCTION_ALIAS;
    public static int BRINST_S_INSTRUCTION_ALIAS_NODE_TYPE_INDEX;
    public static TokenNodeType BRINST_S_INSTRUCTION_ALIAS;
    public static int LDIND_U8_INSTRUCTION_ALIAS_NODE_TYPE_INDEX;
    public static TokenNodeType LDIND_U8_INSTRUCTION_ALIAS;
    public static int LDELEM_U8_INSTRUCTION_ALIAS_NODE_TYPE_INDEX;
    public static TokenNodeType LDELEM_U8_INSTRUCTION_ALIAS;
    public static int LDC_I4_M1X_INSTRUCTION_ALIAS_NODE_TYPE_INDEX;
    public static TokenNodeType LDC_I4_M1X_INSTRUCTION_ALIAS;
    public static int ENDFAULT_INSTRUCTION_ALIAS_NODE_TYPE_INDEX;
    public static TokenNodeType ENDFAULT_INSTRUCTION_ALIAS;
    public static int LDELEM_ANY_INSTRUCTION_ALIAS_NODE_TYPE_INDEX;
    public static TokenNodeType LDELEM_ANY_INSTRUCTION_ALIAS;
    public static int STELEM_ANY_INSTRUCTION_ALIAS_NODE_TYPE_INDEX;
    public static TokenNodeType STELEM_ANY_INSTRUCTION_ALIAS;
    public static int PP_SHARP_DEFINE_NODE_TYPE_INDEX;
    public static TokenNodeType PP_SHARP_DEFINE;
    public static int PP_SHARP_ELSE_NODE_TYPE_INDEX;
    public static TokenNodeType PP_SHARP_ELSE;
    public static int PP_SHARP_ENDIF_NODE_TYPE_INDEX;
    public static TokenNodeType PP_SHARP_ENDIF;
    public static int PP_SHARP_IFDEF_NODE_TYPE_INDEX;
    public static TokenNodeType PP_SHARP_IFDEF;
    public static int PP_SHARP_IFNDEF_NODE_TYPE_INDEX;
    public static TokenNodeType PP_SHARP_IFNDEF;
    public static int PP_SHARP_INCLUDE_NODE_TYPE_INDEX;
    public static TokenNodeType PP_SHARP_INCLUDE;
    public static int PP_SHARP_UNDEF_NODE_TYPE_INDEX;
    public static TokenNodeType PP_SHARP_UNDEF;
    public static int PP_SHARP_LINE_NODE_TYPE_INDEX;
    public static TokenNodeType PP_SHARP_LINE;
    private static int LAST_GENERATED_TOKEN_TYPE_INDEX;
    public static HashSet`1<string> InstructionsStarts;
    public static HashSet`1<string> InstructionsWithTrailingDot;
    public static NodeTypeSet DIRECTIVES;
    public static NodeTypeSet KEYWORDS;
    public static NodeTypeSet Instructions;
    public static NodeTypeSet PreprocessorDirectives;
    public static NodeTypeSet LITERALS;
    private static ILTokenType();
}
internal static class JetBrains.ReSharper.Psi.IL.Parsing.ParserMessages : object {
    public static string IDS_EXPECTED_SYMBOL;
    public static string IDS_EXPECTED_TWO_SYMBOLS;
    public static string IDS_UNEXPECTED_TOKEN;
    public static string IDS_UNEXPECTED_EOF;
    public static string IDS_QUALIFIED_NAME;
    public static string IDS_IDENTIFIER;
    public static string IDS_I_L_ASSEMBLY_PROPERTY;
    public static string IDS_ARRAY_BOUND;
    public static string IDS_CALL_CONVENTION_KIND;
    public static string IDS_GENERIC_PARAMETER_ATTRIBUTE;
    public static string IDS_CLASS_MODIFIER;
    public static string IDS_CLASS_NAME;
    public static string IDS_COMP_CONTROL;
    public static string IDS_I_L_FORWARD_CLASS_DECLARATION;
    public static string IDS_I_L_EXTERN_CLASS_PROPERTY;
    public static string IDS_I_L_EXTERN_CLASS_ASSEMBLY_PROPERTY;
    public static string IDS_IMPLEMENTATION_ATTRIBUTE;
    public static string IDS_METHOD_NAME_AUX;
    public static string IDS_NATIVE_SCALAR_TYPE;
    public static string IDS_VTFIXUP_ATTRIBUTE;
    public static string IDS_P_INVOKE_ATTRIBUTE;
    public static string IDS_PARAMETER_ATTRIBUTE;
    public static string IDS_PREDEFINED_METHOD_ATTRIBUTE;
    public static string IDS_PREDEFINED_FIELD_ATTRIBUTE;
    public static string IDS_SCALAR_TYPE;
    public static string IDS_TYPE_SPEC;
    public static string IDS_TYPE_REFERENCE;
    public static string IDS_CUSTOM_ATTRIBUTE;
    public static string IDS_I_L_ASSEMBLY_DECLARATION;
    public static string IDS_I_L_EXTERN_ASSEMBLY_DECLARATION;
    public static string IDS_I_L_EXTERN_ASSEMBLY_PROPERTY;
    public static string IDS_I_L_MANIFEST_RESOURCE_DECLARATION;
    public static string IDS_I_L_EXTERN_CLASS_DECLARATION;
    public static string IDS_I_L_CLASS_DECLARATION;
    public static string IDS_I_L_FILE_ALIGNMENT_DECLARATION;
    public static string IDS_I_L_FILE_DECLARATION;
    public static string IDS_I_L_NAMESPACE_DECLARATION;
    public static string IDS_SEQURITY_DECLARATION;
    public static string IDS_SEQURITY_ACTION;
    public static string IDS_EXTERN_SOURCE;
    public static string IDS_BLOB;
    public static string IDS_PERMISSION_SET_BODY;
    public static string IDS_I_L_PROPERTY_MEMBER;
    public static string IDS_I_L_EVENT_MEMBER;
    public static string IDS_SPECIALNAME_ATTRIBUTE;
    public static string IDS_FIELD_INIT;
    public static string IDS_GENERIC_PARAMETER_POINTER;
    public static string IDS_I_L_METHOD_PARAM_SPECIFICATION;
    public static string IDS_I_L_PARAM_TYPE_SPECIFICATION;
    public static string IDS_I_L_PARAM_TYPE_CONSTRAINT_SPECIFICATION;
    public static string IDS_DATA_DECLARATION_ITEM;
    public static string IDS_I_L_METHOD_OVERRIDING_DECLARATION_FULL;
    public static string IDS_I_L_METHOD_OVERRIDING_DECLARATION_SHORT;
    public static string IDS_I_L_METHOD_OVERRIDING_DECLARATION_IN_CLASS_FULL;
    public static string IDS_I_L_METHOD_OVERRIDING_DECLARATION_IN_CLASS_SHORT;
    public static string IDS_I_L_INSTANCE_LAYOUT_DECLARATION;
    public static string IDS_INT_OR_WILDCARD;
    public static string IDS_EXCEPTION_TYPE;
    public static string IDS_SEH_CLAUSE;
    public static string IDS_FROM_TO_BLOCK;
    public static string IDS_METHOD_SCOPE_BLOCK;
    public static string IDS_HANDLER_BLOCK;
    public static string IDS_COMP_QSTRING;
    public static string IDS_INSTRUCTION;
    public static string IDS_INSTRUCTION_BRANCH_TARGET;
    public static string IDS_INSTRUCTION_FIELD;
    public static string IDS_INSTRUCTION_I;
    public static string IDS_INSTRUCTION_METHOD;
    public static string IDS_INSTRUCTION_NONE;
    public static string IDS_INSTRUCTION_R;
    public static string IDS_INSTRUCTION_TYPE;
    public static string IDS_INSTRUCTION_VAR;
    public static string IDS_TARGET_LABEL;
    public static string IDS_PARAMETER;
    public static string IDS_MEMBER_REF;
    public static string IDS_OWNER_TYPE;
    public static string IDS_TYPE_MODIFIER;
    public static string IDS_PREDEFINED_SCALAR_TYPE;
    public static string IDS_REFERENCE_NAME;
    public static string IDS_TYPE_MEMBER_USAGE;
    public static string IDS_CONSTRUCTOR_NAME;
    public static string IDS_IL_QUALIFIED_NAME;
    public static string IDS_TYPE_WITH_REFERENCE_BASE;
    public static string IDS_I_L_TYPE_MEMBER_DECLARATION;
    public static string IDS_PRESENTABLE_NAME;
    public static string IDS_TYPE_MEMBER_REFERENCE_NAME;
    public static string IDS_IL_REFERENCE_OWNER;
    public static string IDS_OPCODE;
    public static string IDS_VARIANT_TYPE;
    public static string IDS_I_L_LABEL;
    public static string IDS_GENERIC_PARAMETER;
    public static string GetString(string id);
    public static string GetUnexpectedTokenMessage();
    public static string GetUnexpectedEofMessage();
    public static string GetExpectedMessage(string expectedSymbol);
    public static string GetExpectedMessage(string firstExpectedSymbol, string secondExpectedSymbol);
}
public class JetBrains.ReSharper.Psi.IL.Resources.PsiILThemedIcons : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ArrayBoundNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ArrayTypeNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IArrayType GetByBound(IArrayBound param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.BlobNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.CallConventionKindNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.CallConventionNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ICallConvention GetByCallConventionKind(ICallConventionKind param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.CatchClauseNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ICatchClause GetByExceptionType(IExceptionType param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.ClassBodyNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClassBody GetByCompControl(ICompControl param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClassBody GetByExternSource(IExternSource param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClassBody GetBySecurityDeclaration(ISequrityDeclaration param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ClassExtendsClauseNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClassExtendsClause GetByTypeSpec(ITypeSpec param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.ClassHeaderNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClassHeader GetByExtendsClause(IClassExtendsClause param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClassHeader GetByGenericParameterDeclarationList(IGenericParameterDeclarationList param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClassHeader GetByImplementsClause(IClassImplementsClause param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClassHeader GetByModifierList(IClassModifierList param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClassHeader GetByName(IIdentifierWithOwnerQualification param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ClassImplementsClauseNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClassImplementsClause GetByTypeSpec(ITypeSpec param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ClassModifierListNavigator : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.ClassNameNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClassName GetByMdtoken(IMdtoken param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClassName GetByModuleName(IQualifiedName param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClassName GetByQualifiedName(IQualifiedName param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClassName GetByReferenceName(IReferenceName param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.CodeLabelNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ICodeLabel GetByName(IIdentifier param);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.IL.Tree.CommentedMetadataTokenUtil : object {
    private static int CommentedTokenLength;
    [ExtensionAttribute]
public static bool IsCommentedMetadataToken(ITokenNode node);
    [ExtensionAttribute]
public static MetadataToken TryGetMetadataToken(ITokenNode node);
    [ExtensionAttribute]
public static DocumentRange GetMetadataTokenRange(DocumentRange commentedMetadataTokenRange);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.CompControlNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ICompControl GetByQualifiedName(IQualifiedName param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.CompositeVariantTypeNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.CompQstringNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ConstructorNameNavigator : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.CustomAttributeNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ICustomAttribute GetByBlob(IBlob param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ICustomAttribute GetByCustomType(ICustomType param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ICustomAttribute GetByOwner(IOwnerType param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ICustomAttribute GetByStrings(ICompQstring param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.CustomModifierTypeNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ICustomModifierType GetByTypeReference(ITypeReference param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.CustomTypeNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ICustomType GetByCallConvention(ICallConvention param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ICustomType GetByConstructorName(IInstanceConstructorReferenceName param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ICustomType GetBySignature(ISignatureDef param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ICustomType GetByType(ITypeUsage param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ICustomType GetByTypeSpec(ITypeSpecWithDoubleColon param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.DataDeclarationItemNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IDataDeclarationItem GetByData(IBlob param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IDataDeclarationItem GetByLabel(IIdentifier param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.DataLabelNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IDataLabel GetByName(IIdentifier param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.EmitbyteNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.EntrypointNavigator : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.EventBodyNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IEventBody GetByAttribute(ICustomAttribute param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IEventBody GetByCompControl(ICompControl param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IEventBody GetByExternSource(IExternSource param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IEventBody GetByMember(IILEventMember param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.EventHeaderNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IEventHeader GetByEventAttributeList(ISpecialnameAttributeList param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IEventHeader GetByName(IIdentifier param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IEventHeader GetByTypeSpec(ITypeSpec param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ExceptionTypeNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ExportNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IExport GetByExportName(IIdentifier param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ExternSourceNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.FaultClauseNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.FieldByteOffsetNavigator : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.FieldInitNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IFieldInit GetByBlob(IBlob param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IFieldInit GetByInitializer(IIntInitializer param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.FieldReferenceNameNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IFieldReferenceName GetByName(IIdentifier param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.FilterClauseNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IFilterClause GetByFilterBlock(IMethodScopeBlock param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IFilterClause GetByFilterFromLabel(IIdentifier param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.FinallyClauseNavigator : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.FromToBlockNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IFromToBlock GetByFromLabel(IIdentifier param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IFromToBlock GetByToLabel(IIdentifier param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.GenArityNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.GenericArgumentListNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IGenericArgumentList GetByArgument(ITypeUsage param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.GenericParameterAttributeListNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.GenericParameterConstraintListNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IGenericParameterConstraintList GetByType(ITypeUsage param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.GenericParameterDeclarationListNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IGenericParameterDeclarationList GetByGenericParameterDeclaration(IGenericParameterDeclaration param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.GenericParameterDeclarationNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IGenericParameterDeclaration GetByGenericParameterAttributeList(IGenericParameterAttributeList param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IGenericParameterDeclaration GetByGenericParameterConstraintList(IGenericParameterConstraintList param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IGenericParameterDeclaration GetByName(IIdentifier param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.GenericParameterNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.GenericParameterPointerNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IGenericParameterPointer GetByGenericParameterName(IIdentifier param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.GenericScalarTypeNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IGenericScalarType GetByGenericParameterName(IIdentifier param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.GenericTypeNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IGenericType GetByGenericArgumentList(IGenericArgumentList param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.HandlerBlockNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IHandlerBlock GetByFromToBlock(IFromToBlock param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IHandlerBlock GetByScopeBlock(IMethodScopeBlock param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IArrayBound {
    public TreeNodeCollection`1<ITokenNode> Minus { get; }
    public TreeNodeEnumerable`1<ITokenNode> MinusEnumerable { get; }
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_Minus();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_MinusEnumerable();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IArrayType {
    public TreeNodeCollection`1<IArrayBound> Bounds { get; }
    public TreeNodeEnumerable`1<IArrayBound> BoundsEnumerable { get; }
    public TreeNodeCollection`1<ITokenNode> Commas { get; }
    public TreeNodeEnumerable`1<ITokenNode> CommasEnumerable { get; }
    public ITokenNode LBracket { get; }
    public ITokenNode RBracket { get; }
    public int Rank { get; }
    public abstract virtual TreeNodeCollection`1<IArrayBound> get_Bounds();
    public abstract virtual TreeNodeEnumerable`1<IArrayBound> get_BoundsEnumerable();
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_Commas();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_CommasEnumerable();
    public abstract virtual ITokenNode get_LBracket();
    public abstract virtual ITokenNode get_RBracket();
    public abstract virtual int get_Rank();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IBlob {
    public TreeNodeCollection`1<ITokenNode> Bytes { get; }
    public TreeNodeEnumerable`1<ITokenNode> BytesEnumerable { get; }
    public ITokenNode LParenth { get; }
    public ITokenNode RParenth { get; }
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_Bytes();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_BytesEnumerable();
    public abstract virtual ITokenNode get_LParenth();
    public abstract virtual ITokenNode get_RParenth();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.ICallConvention {
    public ICallConventionKind CallConventionKind { get; }
    public ITokenNode ExplicitKeyword { get; }
    public ITokenNode InstanceKeyword { get; }
    public abstract virtual ICallConventionKind get_CallConventionKind();
    public abstract virtual ITokenNode get_ExplicitKeyword();
    public abstract virtual ITokenNode get_InstanceKeyword();
    public abstract virtual ICallConventionKind SetCallConventionKind(ICallConventionKind param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.ICallConventionKind {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.ICatchClause {
    public ITokenNode CatchKeyword { get; }
    public IExceptionType ExceptionType { get; }
    public abstract virtual ITokenNode get_CatchKeyword();
    public abstract virtual IExceptionType get_ExceptionType();
    public abstract virtual IExceptionType SetExceptionType(IExceptionType param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IClassBody {
    public TreeNodeCollection`1<ICompControl> CompControls { get; }
    public TreeNodeEnumerable`1<ICompControl> CompControlsEnumerable { get; }
    public TreeNodeCollection`1<IExternSource> ExternSources { get; }
    public TreeNodeEnumerable`1<IExternSource> ExternSourcesEnumerable { get; }
    public ITokenNode LBrace { get; }
    public TreeNodeCollection`1<IILTreeNode> Members { get; }
    public TreeNodeEnumerable`1<IILTreeNode> MembersEnumerable { get; }
    public ITokenNode RBrace { get; }
    public TreeNodeCollection`1<ISequrityDeclaration> SecurityDeclarations { get; }
    public TreeNodeEnumerable`1<ISequrityDeclaration> SecurityDeclarationsEnumerable { get; }
    public abstract virtual TreeNodeCollection`1<ICompControl> get_CompControls();
    public abstract virtual TreeNodeEnumerable`1<ICompControl> get_CompControlsEnumerable();
    public abstract virtual TreeNodeCollection`1<IExternSource> get_ExternSources();
    public abstract virtual TreeNodeEnumerable`1<IExternSource> get_ExternSourcesEnumerable();
    public abstract virtual ITokenNode get_LBrace();
    public abstract virtual TreeNodeCollection`1<IILTreeNode> get_Members();
    public abstract virtual TreeNodeEnumerable`1<IILTreeNode> get_MembersEnumerable();
    public abstract virtual ITokenNode get_RBrace();
    public abstract virtual TreeNodeCollection`1<ISequrityDeclaration> get_SecurityDeclarations();
    public abstract virtual TreeNodeEnumerable`1<ISequrityDeclaration> get_SecurityDeclarationsEnumerable();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IClassExtendsClause {
    public ITokenNode ExtendsKeyword { get; }
    public ITypeSpec TypeSpec { get; }
    public abstract virtual ITokenNode get_ExtendsKeyword();
    public abstract virtual ITypeSpec get_TypeSpec();
    public abstract virtual ITypeSpec SetTypeSpec(ITypeSpec param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IClassHeader {
    public IClassExtendsClause ExtendsClause { get; }
    public IGenericParameterDeclarationList GenericParameterDeclarationList { get; }
    public IClassImplementsClause ImplementsClause { get; }
    public IClassModifierList ModifierList { get; }
    public IIdentifierWithOwnerQualification Name { get; }
    public abstract virtual IClassExtendsClause get_ExtendsClause();
    public abstract virtual IGenericParameterDeclarationList get_GenericParameterDeclarationList();
    public abstract virtual IClassImplementsClause get_ImplementsClause();
    public abstract virtual IClassModifierList get_ModifierList();
    public abstract virtual IIdentifierWithOwnerQualification get_Name();
    public abstract virtual IClassExtendsClause SetExtendsClause(IClassExtendsClause param);
    public abstract virtual IGenericParameterDeclarationList SetGenericParameterDeclarationList(IGenericParameterDeclarationList param);
    public abstract virtual IClassImplementsClause SetImplementsClause(IClassImplementsClause param);
    public abstract virtual IClassModifierList SetModifierList(IClassModifierList param);
    public abstract virtual IIdentifierWithOwnerQualification SetName(IIdentifierWithOwnerQualification param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IClassImplementsClause {
    public TreeNodeCollection`1<ITokenNode> Commas { get; }
    public TreeNodeEnumerable`1<ITokenNode> CommasEnumerable { get; }
    public ITokenNode ImplementsKeyword { get; }
    public TreeNodeCollection`1<ITypeSpec> TypeSpecs { get; }
    public TreeNodeEnumerable`1<ITypeSpec> TypeSpecsEnumerable { get; }
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_Commas();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_CommasEnumerable();
    public abstract virtual ITokenNode get_ImplementsKeyword();
    public abstract virtual TreeNodeCollection`1<ITypeSpec> get_TypeSpecs();
    public abstract virtual TreeNodeEnumerable`1<ITypeSpec> get_TypeSpecsEnumerable();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IClassModifierList {
    public TreeNodeCollection`1<ITokenNode> Modifiers { get; }
    public TreeNodeEnumerable`1<ITokenNode> ModifiersEnumerable { get; }
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_Modifiers();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_ModifiersEnumerable();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IClassName {
    public ITokenNode Asterisk { get; }
    public ITokenNode DotBaseKeyword { get; }
    public ITokenNode DotModuleKeyword { get; }
    public ITokenNode DotNesterKeyword { get; }
    public ITokenNode DotThisKeyword { get; }
    public ITokenNode LBracket { get; }
    public IMdtoken Mdtoken { get; }
    public IQualifiedName ModuleName { get; }
    public IQualifiedName QualifiedName { get; }
    public ITokenNode RBracket { get; }
    public IReferenceName ReferenceName { get; }
    public abstract virtual ITokenNode get_Asterisk();
    public abstract virtual ITokenNode get_DotBaseKeyword();
    public abstract virtual ITokenNode get_DotModuleKeyword();
    public abstract virtual ITokenNode get_DotNesterKeyword();
    public abstract virtual ITokenNode get_DotThisKeyword();
    public abstract virtual ITokenNode get_LBracket();
    public abstract virtual IMdtoken get_Mdtoken();
    public abstract virtual IQualifiedName get_ModuleName();
    public abstract virtual IQualifiedName get_QualifiedName();
    public abstract virtual ITokenNode get_RBracket();
    public abstract virtual IReferenceName get_ReferenceName();
    public abstract virtual IMdtoken SetMdtoken(IMdtoken param);
    public abstract virtual IQualifiedName SetModuleName(IQualifiedName param);
    public abstract virtual IQualifiedName SetQualifiedName(IQualifiedName param);
    public abstract virtual IReferenceName SetReferenceName(IReferenceName param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.ICodeLabel {
    public ITokenNode Colon { get; }
    public abstract virtual ITokenNode get_Colon();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.ICompControl {
    public ITokenNode Colon { get; }
    public ITokenNode ColumnNumber { get; }
    public ITokenNode Define { get; }
    public ITokenNode Else { get; }
    public ITokenNode Endif { get; }
    public ITokenNode FileName { get; }
    public ITokenNode Ifdef { get; }
    public ITokenNode Ifndef { get; }
    public ITokenNode Include { get; }
    public ITokenNode Line { get; }
    public ITokenNode LineNumber { get; }
    public IQualifiedName QualifiedName { get; }
    public ITokenNode StringValue { get; }
    public ITokenNode Undef { get; }
    public abstract virtual ITokenNode get_Colon();
    public abstract virtual ITokenNode get_ColumnNumber();
    public abstract virtual ITokenNode get_Define();
    public abstract virtual ITokenNode get_Else();
    public abstract virtual ITokenNode get_Endif();
    public abstract virtual ITokenNode get_FileName();
    public abstract virtual ITokenNode get_Ifdef();
    public abstract virtual ITokenNode get_Ifndef();
    public abstract virtual ITokenNode get_Include();
    public abstract virtual ITokenNode get_Line();
    public abstract virtual ITokenNode get_LineNumber();
    public abstract virtual IQualifiedName get_QualifiedName();
    public abstract virtual ITokenNode get_StringValue();
    public abstract virtual ITokenNode get_Undef();
    public abstract virtual IQualifiedName SetQualifiedName(IQualifiedName param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.ICompositeVariantType {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.ICompQstring {
    public TreeNodeCollection`1<ITokenNode> Items { get; }
    public TreeNodeEnumerable`1<ITokenNode> ItemsEnumerable { get; }
    public TreeNodeCollection`1<ITokenNode> Pluses { get; }
    public TreeNodeEnumerable`1<ITokenNode> PlusesEnumerable { get; }
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_Items();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_ItemsEnumerable();
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_Pluses();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_PlusesEnumerable();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IConstructorName {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.ICustomAttribute {
    public IBlob Blob { get; }
    public ICustomType CustomType { get; }
    public ITokenNode DotCustomKeyword { get; }
    public ITokenNode Eq { get; }
    public ITokenNode LParenth { get; }
    public IOwnerType Owner { get; }
    public ITokenNode RParenth { get; }
    public ICompQstring Strings { get; }
    public abstract virtual IBlob get_Blob();
    public abstract virtual ICustomType get_CustomType();
    public abstract virtual ITokenNode get_DotCustomKeyword();
    public abstract virtual ITokenNode get_Eq();
    public abstract virtual ITokenNode get_LParenth();
    public abstract virtual IOwnerType get_Owner();
    public abstract virtual ITokenNode get_RParenth();
    public abstract virtual ICompQstring get_Strings();
    public abstract virtual IBlob SetBlob(IBlob param);
    public abstract virtual ICustomType SetCustomType(ICustomType param);
    public abstract virtual IOwnerType SetOwner(IOwnerType param);
    public abstract virtual ICompQstring SetStrings(ICompQstring param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.ICustomModifierType {
    public ITokenNode LParenth { get; }
    public ITokenNode ModifierKeyword { get; }
    public ITokenNode RParenth { get; }
    public ITypeReference TypeReference { get; }
    public abstract virtual ITokenNode get_LParenth();
    public abstract virtual ITokenNode get_ModifierKeyword();
    public abstract virtual ITokenNode get_RParenth();
    public abstract virtual ITypeReference get_TypeReference();
    public abstract virtual ITypeReference SetTypeReference(ITypeReference param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.ICustomType {
    public ICallConvention CallConvention { get; }
    public IInstanceConstructorReferenceName ConstructorName { get; }
    public ISignatureDef Signature { get; }
    public ITypeUsage Type { get; }
    public abstract virtual ICallConvention get_CallConvention();
    public abstract virtual IInstanceConstructorReferenceName get_ConstructorName();
    public abstract virtual ISignatureDef get_Signature();
    public abstract virtual ITypeUsage get_Type();
    public abstract virtual ICallConvention SetCallConvention(ICallConvention param);
    public abstract virtual IInstanceConstructorReferenceName SetConstructorName(IInstanceConstructorReferenceName param);
    public abstract virtual ISignatureDef SetSignature(ISignatureDef param);
    public abstract virtual ITypeUsage SetType(ITypeUsage param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IDataDeclarationItem {
    public ITokenNode AddressSign { get; }
    public ITokenNode Asterisk { get; }
    public ITokenNode BytearrayKeyword { get; }
    public ITokenNode CharKeyword { get; }
    public ITokenNode Characters { get; }
    public IBlob Data { get; }
    public ITokenNode FloatValue { get; }
    public ITokenNode IntegerValue { get; }
    public ITokenNode LBracket { get; }
    public ITokenNode LParenth { get; }
    public IIdentifier Label { get; }
    public ITokenNode Minus { get; }
    public ITokenNode RBracket { get; }
    public ITokenNode RParenth { get; }
    public ITokenNode ReplicationNumber { get; }
    public abstract virtual ITokenNode get_AddressSign();
    public abstract virtual ITokenNode get_Asterisk();
    public abstract virtual ITokenNode get_BytearrayKeyword();
    public abstract virtual ITokenNode get_CharKeyword();
    public abstract virtual ITokenNode get_Characters();
    public abstract virtual IBlob get_Data();
    public abstract virtual ITokenNode get_FloatValue();
    public abstract virtual ITokenNode get_IntegerValue();
    public abstract virtual ITokenNode get_LBracket();
    public abstract virtual ITokenNode get_LParenth();
    public abstract virtual IIdentifier get_Label();
    public abstract virtual ITokenNode get_Minus();
    public abstract virtual ITokenNode get_RBracket();
    public abstract virtual ITokenNode get_RParenth();
    public abstract virtual ITokenNode get_ReplicationNumber();
    public abstract virtual IBlob SetData(IBlob param);
    public abstract virtual IIdentifier SetLabel(IIdentifier param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IDataLabel {
    public IIdentifier Name { get; }
    public abstract virtual IIdentifier get_Name();
    public abstract virtual IIdentifier SetName(IIdentifier param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.IdentifierNavigator : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.IdentifierWithOwnerQualificationNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IIdentifierWithOwnerQualification GetByIdentifier(IIdentifier param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IIdentifierWithOwnerQualification GetByOwnerQualification(IQualifiedName param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IEmitbyte {
    public ITokenNode DotEmitbyteKeyword { get; }
    public ITokenNode EmitbyteValue { get; }
    public abstract virtual ITokenNode get_DotEmitbyteKeyword();
    public abstract virtual ITokenNode get_EmitbyteValue();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IEntrypoint {
    public ITokenNode DotEntrypointKeyword { get; }
    public abstract virtual ITokenNode get_DotEntrypointKeyword();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IEventBody {
    public TreeNodeCollection`1<ICustomAttribute> Attributes { get; }
    public TreeNodeEnumerable`1<ICustomAttribute> AttributesEnumerable { get; }
    public TreeNodeCollection`1<ICompControl> CompControls { get; }
    public TreeNodeEnumerable`1<ICompControl> CompControlsEnumerable { get; }
    public TreeNodeCollection`1<IExternSource> ExternSources { get; }
    public TreeNodeEnumerable`1<IExternSource> ExternSourcesEnumerable { get; }
    public ITokenNode LBrace { get; }
    public TreeNodeCollection`1<IILEventMember> Members { get; }
    public TreeNodeEnumerable`1<IILEventMember> MembersEnumerable { get; }
    public ITokenNode RBrace { get; }
    public abstract virtual TreeNodeCollection`1<ICustomAttribute> get_Attributes();
    public abstract virtual TreeNodeEnumerable`1<ICustomAttribute> get_AttributesEnumerable();
    public abstract virtual TreeNodeCollection`1<ICompControl> get_CompControls();
    public abstract virtual TreeNodeEnumerable`1<ICompControl> get_CompControlsEnumerable();
    public abstract virtual TreeNodeCollection`1<IExternSource> get_ExternSources();
    public abstract virtual TreeNodeEnumerable`1<IExternSource> get_ExternSourcesEnumerable();
    public abstract virtual ITokenNode get_LBrace();
    public abstract virtual TreeNodeCollection`1<IILEventMember> get_Members();
    public abstract virtual TreeNodeEnumerable`1<IILEventMember> get_MembersEnumerable();
    public abstract virtual ITokenNode get_RBrace();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IEventHeader {
    public ISpecialnameAttributeList EventAttributeList { get; }
    public IIdentifier Name { get; }
    public ITypeSpec TypeSpec { get; }
    public abstract virtual ISpecialnameAttributeList get_EventAttributeList();
    public abstract virtual IIdentifier get_Name();
    public abstract virtual ITypeSpec get_TypeSpec();
    public abstract virtual ISpecialnameAttributeList SetEventAttributeList(ISpecialnameAttributeList param);
    public abstract virtual IIdentifier SetName(IIdentifier param);
    public abstract virtual ITypeSpec SetTypeSpec(ITypeSpec param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IExceptionType {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IExport {
    public ITokenNode AsKeyword { get; }
    public ITokenNode DotExportKeyword { get; }
    public IIdentifier ExportName { get; }
    public ITokenNode LBracket { get; }
    public ITokenNode Number { get; }
    public ITokenNode RBracket { get; }
    public abstract virtual ITokenNode get_AsKeyword();
    public abstract virtual ITokenNode get_DotExportKeyword();
    public abstract virtual IIdentifier get_ExportName();
    public abstract virtual ITokenNode get_LBracket();
    public abstract virtual ITokenNode get_Number();
    public abstract virtual ITokenNode get_RBracket();
    public abstract virtual IIdentifier SetExportName(IIdentifier param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IExternSource {
    public ITokenNode Colon { get; }
    public ITokenNode ColumnNumber { get; }
    public ITokenNode DotLineKeyword { get; }
    public ITokenNode FileName { get; }
    public ITokenNode LineNumber { get; }
    public abstract virtual ITokenNode get_Colon();
    public abstract virtual ITokenNode get_ColumnNumber();
    public abstract virtual ITokenNode get_DotLineKeyword();
    public abstract virtual ITokenNode get_FileName();
    public abstract virtual ITokenNode get_LineNumber();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IFaultClause {
    public ITokenNode FaultKeyword { get; }
    public abstract virtual ITokenNode get_FaultKeyword();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IFieldByteOffset {
    public ITokenNode ByteOffset { get; }
    public ITokenNode LBracket { get; }
    public ITokenNode RBracket { get; }
    public abstract virtual ITokenNode get_ByteOffset();
    public abstract virtual ITokenNode get_LBracket();
    public abstract virtual ITokenNode get_RBracket();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IFieldInit {
    public IBlob Blob { get; }
    public ITokenNode BoolKeyword { get; }
    public ITokenNode BytearrayKeyword { get; }
    public ITokenNode CharKeyword { get; }
    public ITokenNode FalseKeyword { get; }
    public ITokenNode Float32Keyword { get; }
    public ITokenNode Float64Keyword { get; }
    public ITokenNode FloatValue { get; }
    public IIntInitializer Initializer { get; }
    public ITokenNode Int16Keyword { get; }
    public ITokenNode Int32Keyword { get; }
    public ITokenNode Int64Keyword { get; }
    public ITokenNode Int8Keyword { get; }
    public ITokenNode IntValue { get; }
    public ITokenNode LParenth { get; }
    public ITokenNode Minus { get; }
    public ITokenNode NullrefKeyword { get; }
    public ITokenNode RParenth { get; }
    public ITokenNode StringValue { get; }
    public ITokenNode TrueKeyword { get; }
    public ITokenNode Uint16Keyword { get; }
    public ITokenNode Uint32Keyword { get; }
    public ITokenNode Uint64Keyword { get; }
    public ITokenNode Uint8Keyword { get; }
    public ITokenNode UnsignedKeyword { get; }
    public abstract virtual IBlob get_Blob();
    public abstract virtual ITokenNode get_BoolKeyword();
    public abstract virtual ITokenNode get_BytearrayKeyword();
    public abstract virtual ITokenNode get_CharKeyword();
    public abstract virtual ITokenNode get_FalseKeyword();
    public abstract virtual ITokenNode get_Float32Keyword();
    public abstract virtual ITokenNode get_Float64Keyword();
    public abstract virtual ITokenNode get_FloatValue();
    public abstract virtual IIntInitializer get_Initializer();
    public abstract virtual ITokenNode get_Int16Keyword();
    public abstract virtual ITokenNode get_Int32Keyword();
    public abstract virtual ITokenNode get_Int64Keyword();
    public abstract virtual ITokenNode get_Int8Keyword();
    public abstract virtual ITokenNode get_IntValue();
    public abstract virtual ITokenNode get_LParenth();
    public abstract virtual ITokenNode get_Minus();
    public abstract virtual ITokenNode get_NullrefKeyword();
    public abstract virtual ITokenNode get_RParenth();
    public abstract virtual ITokenNode get_StringValue();
    public abstract virtual ITokenNode get_TrueKeyword();
    public abstract virtual ITokenNode get_Uint16Keyword();
    public abstract virtual ITokenNode get_Uint32Keyword();
    public abstract virtual ITokenNode get_Uint64Keyword();
    public abstract virtual ITokenNode get_Uint8Keyword();
    public abstract virtual ITokenNode get_UnsignedKeyword();
    public abstract virtual IBlob SetBlob(IBlob param);
    public abstract virtual IIntInitializer SetInitializer(IIntInitializer param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IFieldReferenceName {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IFilterClause {
    public IMethodScopeBlock FilterBlock { get; }
    public IIdentifier FilterFromLabel { get; }
    public ITokenNode FilterFromOffset { get; }
    public ITokenNode FilterKeyword { get; }
    public abstract virtual IMethodScopeBlock get_FilterBlock();
    public abstract virtual IIdentifier get_FilterFromLabel();
    public abstract virtual ITokenNode get_FilterFromOffset();
    public abstract virtual ITokenNode get_FilterKeyword();
    public abstract virtual IMethodScopeBlock SetFilterBlock(IMethodScopeBlock param);
    public abstract virtual IIdentifier SetFilterFromLabel(IIdentifier param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IFinallyClause {
    public ITokenNode FinallyKeyword { get; }
    public abstract virtual ITokenNode get_FinallyKeyword();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IFromToBlock {
    public IIdentifier FromLabel { get; }
    public ITokenNode FromOffset { get; }
    public ITokenNode ToKeyword { get; }
    public IIdentifier ToLabel { get; }
    public ITokenNode ToOffset { get; }
    public abstract virtual IIdentifier get_FromLabel();
    public abstract virtual ITokenNode get_FromOffset();
    public abstract virtual ITokenNode get_ToKeyword();
    public abstract virtual IIdentifier get_ToLabel();
    public abstract virtual ITokenNode get_ToOffset();
    public abstract virtual IIdentifier SetFromLabel(IIdentifier param);
    public abstract virtual IIdentifier SetToLabel(IIdentifier param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IGenArity {
    public ITokenNode GenericParametersNumber { get; }
    public ITokenNode Gt { get; }
    public ITokenNode LBracket { get; }
    public ITokenNode Lt { get; }
    public ITokenNode RBracket { get; }
    public abstract virtual ITokenNode get_GenericParametersNumber();
    public abstract virtual ITokenNode get_Gt();
    public abstract virtual ITokenNode get_LBracket();
    public abstract virtual ITokenNode get_Lt();
    public abstract virtual ITokenNode get_RBracket();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IGenericArgumentList {
    public TreeNodeCollection`1<ITypeUsage> Arguments { get; }
    public TreeNodeEnumerable`1<ITypeUsage> ArgumentsEnumerable { get; }
    public TreeNodeCollection`1<ITokenNode> Commas { get; }
    public TreeNodeEnumerable`1<ITokenNode> CommasEnumerable { get; }
    public ITokenNode Gt { get; }
    public ITokenNode Lt { get; }
    public abstract virtual TreeNodeCollection`1<ITypeUsage> get_Arguments();
    public abstract virtual TreeNodeEnumerable`1<ITypeUsage> get_ArgumentsEnumerable();
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_Commas();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_CommasEnumerable();
    public abstract virtual ITokenNode get_Gt();
    public abstract virtual ITokenNode get_Lt();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IGenericParameter {
    public int Index { get; }
    public bool IsMethodGenericParameter { get; }
    public bool IsTypeGenericParameter { get; }
    [CanBeNullAttribute]
public ITypeElement OwnerType { get; }
    [CanBeNullAttribute]
public IMethod OwnerMethod { get; }
    public abstract virtual int get_Index();
    public abstract virtual bool get_IsMethodGenericParameter();
    public abstract virtual bool get_IsTypeGenericParameter();
    public abstract virtual ITypeElement get_OwnerType();
    public abstract virtual IMethod get_OwnerMethod();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IGenericParameterAttributeList {
    public TreeNodeCollection`1<ITokenNode> Attributes { get; }
    public TreeNodeEnumerable`1<ITokenNode> AttributesEnumerable { get; }
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_Attributes();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_AttributesEnumerable();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IGenericParameterConstraintList {
    public TreeNodeCollection`1<ITokenNode> Commas { get; }
    public TreeNodeEnumerable`1<ITokenNode> CommasEnumerable { get; }
    public ITokenNode LParenth { get; }
    public ITokenNode RParenth { get; }
    public TreeNodeCollection`1<ITypeUsage> Types { get; }
    public TreeNodeEnumerable`1<ITypeUsage> TypesEnumerable { get; }
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_Commas();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_CommasEnumerable();
    public abstract virtual ITokenNode get_LParenth();
    public abstract virtual ITokenNode get_RParenth();
    public abstract virtual TreeNodeCollection`1<ITypeUsage> get_Types();
    public abstract virtual TreeNodeEnumerable`1<ITypeUsage> get_TypesEnumerable();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IGenericParameterDeclaration {
    public IGenericParameterAttributeList GenericParameterAttributeList { get; }
    public IGenericParameterConstraintList GenericParameterConstraintList { get; }
    public IIdentifier Name { get; }
    public abstract virtual IGenericParameterAttributeList get_GenericParameterAttributeList();
    public abstract virtual IGenericParameterConstraintList get_GenericParameterConstraintList();
    public abstract virtual IIdentifier get_Name();
    public abstract virtual IGenericParameterAttributeList SetGenericParameterAttributeList(IGenericParameterAttributeList param);
    public abstract virtual IGenericParameterConstraintList SetGenericParameterConstraintList(IGenericParameterConstraintList param);
    public abstract virtual IIdentifier SetName(IIdentifier param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IGenericParameterDeclarationList {
    public TreeNodeCollection`1<ITokenNode> Commas { get; }
    public TreeNodeEnumerable`1<ITokenNode> CommasEnumerable { get; }
    public TreeNodeCollection`1<IGenericParameterDeclaration> GenericParameterDeclarations { get; }
    public TreeNodeEnumerable`1<IGenericParameterDeclaration> GenericParameterDeclarationsEnumerable { get; }
    public ITokenNode Gt { get; }
    public ITokenNode Lt { get; }
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_Commas();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_CommasEnumerable();
    public abstract virtual TreeNodeCollection`1<IGenericParameterDeclaration> get_GenericParameterDeclarations();
    public abstract virtual TreeNodeEnumerable`1<IGenericParameterDeclaration> get_GenericParameterDeclarationsEnumerable();
    public abstract virtual ITokenNode get_Gt();
    public abstract virtual ITokenNode get_Lt();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IGenericParameterPointer {
    public ITokenNode GenericParameterIndex { get; }
    public IIdentifier GenericParameterName { get; }
    public ITokenNode LBracket { get; }
    public ITokenNode RBracket { get; }
    public abstract virtual ITokenNode get_GenericParameterIndex();
    public abstract virtual IIdentifier get_GenericParameterName();
    public abstract virtual ITokenNode get_LBracket();
    public abstract virtual ITokenNode get_RBracket();
    public abstract virtual IIdentifier SetGenericParameterName(IIdentifier param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IGenericScalarType {
    public ITokenNode GenericParameterIndex { get; }
    public ITokenNode GenericParameterMarker { get; }
    public IIdentifier GenericParameterName { get; }
    public ITokenNode MethodGenericParameterMarker { get; }
    public abstract virtual ITokenNode get_GenericParameterIndex();
    public abstract virtual ITokenNode get_GenericParameterMarker();
    public abstract virtual IIdentifier get_GenericParameterName();
    public abstract virtual ITokenNode get_MethodGenericParameterMarker();
    public abstract virtual IIdentifier SetGenericParameterName(IIdentifier param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IGenericType {
    public IGenericArgumentList GenericArgumentList { get; }
    public abstract virtual IGenericArgumentList get_GenericArgumentList();
    public abstract virtual IGenericArgumentList SetGenericArgumentList(IGenericArgumentList param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IHandlerBlock {
    public IFromToBlock FromToBlock { get; }
    public ITokenNode HandlerKeyword { get; }
    public IMethodScopeBlock ScopeBlock { get; }
    public abstract virtual IFromToBlock get_FromToBlock();
    public abstract virtual ITokenNode get_HandlerKeyword();
    public abstract virtual IMethodScopeBlock get_ScopeBlock();
    public abstract virtual IFromToBlock SetFromToBlock(IFromToBlock param);
    public abstract virtual IMethodScopeBlock SetScopeBlock(IMethodScopeBlock param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IIdentifier {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IIdentifierWithOwnerQualification {
    public ITokenNode Dot { get; }
    public IIdentifier Identifier { get; }
    public IQualifiedName OwnerQualification { get; }
    public abstract virtual ITokenNode get_Dot();
    public abstract virtual IIdentifier get_Identifier();
    public abstract virtual IQualifiedName get_OwnerQualification();
    public abstract virtual IIdentifier SetIdentifier(IIdentifier param);
    public abstract virtual IQualifiedName SetOwnerQualification(IQualifiedName param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILAccessorDeclaration {
    public ICallConvention CallConvention { get; }
    public IMethodReferenceName MethodName { get; }
    public ISignatureDef Signature { get; }
    public ITypeUsage Type { get; }
    public abstract virtual ICallConvention get_CallConvention();
    public abstract virtual IMethodReferenceName get_MethodName();
    public abstract virtual ISignatureDef get_Signature();
    public abstract virtual ITypeUsage get_Type();
    public abstract virtual ICallConvention SetCallConvention(ICallConvention param);
    public abstract virtual IMethodReferenceName SetMethodName(IMethodReferenceName param);
    public abstract virtual ISignatureDef SetSignature(ISignatureDef param);
    public abstract virtual ITypeUsage SetType(ITypeUsage param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILAddonDeclaration {
    public ITokenNode DotAddonKeyword { get; }
    public abstract virtual ITokenNode get_DotAddonKeyword();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILAliasDeclaration {
    public IQualifiedName AliasName { get; }
    public ITokenNode AsKeyword { get; }
    public ITokenNode DotTypedefKeyword { get; }
    public IMemberRef MemberReference { get; }
    public ITypeReference TypeReference { get; }
    public abstract virtual IQualifiedName get_AliasName();
    public abstract virtual ITokenNode get_AsKeyword();
    public abstract virtual ITokenNode get_DotTypedefKeyword();
    public abstract virtual IMemberRef get_MemberReference();
    public abstract virtual ITypeReference get_TypeReference();
    public abstract virtual IQualifiedName SetAliasName(IQualifiedName param);
    public abstract virtual IMemberRef SetMemberReference(IMemberRef param);
    public abstract virtual ITypeReference SetTypeReference(ITypeReference param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILAssemblyAutodetection {
    public ITokenNode AutoKeyword { get; }
    public abstract virtual ITokenNode get_AutoKeyword();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILAssemblyCulture {
    public ITokenNode CultureKeyword { get; }
    public ITokenNode LocaleKeyword { get; }
    public ITokenNode Value { get; }
    public abstract virtual ITokenNode get_CultureKeyword();
    public abstract virtual ITokenNode get_LocaleKeyword();
    public abstract virtual ITokenNode get_Value();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILAssemblyDeclaration {
    public IQualifiedName AssemblyName { get; }
    public TreeNodeCollection`1<ICustomAttribute> Attributes { get; }
    public TreeNodeEnumerable`1<ICustomAttribute> AttributesEnumerable { get; }
    public TreeNodeCollection`1<ICompControl> CompControls { get; }
    public TreeNodeEnumerable`1<ICompControl> CompControlsEnumerable { get; }
    public ITokenNode DotAssemblyKeyword { get; }
    public TreeNodeCollection`1<IExternSource> ExternSources { get; }
    public TreeNodeEnumerable`1<IExternSource> ExternSourcesEnumerable { get; }
    public ITokenNode LBrace { get; }
    public TreeNodeCollection`1<IILAssemblyProperty> Properties { get; }
    public TreeNodeEnumerable`1<IILAssemblyProperty> PropertiesEnumerable { get; }
    public ITokenNode RBrace { get; }
    public TreeNodeCollection`1<ISequrityDeclaration> SecurityDeclarations { get; }
    public TreeNodeEnumerable`1<ISequrityDeclaration> SecurityDeclarationsEnumerable { get; }
    public abstract virtual IQualifiedName get_AssemblyName();
    public abstract virtual TreeNodeCollection`1<ICustomAttribute> get_Attributes();
    public abstract virtual TreeNodeEnumerable`1<ICustomAttribute> get_AttributesEnumerable();
    public abstract virtual TreeNodeCollection`1<ICompControl> get_CompControls();
    public abstract virtual TreeNodeEnumerable`1<ICompControl> get_CompControlsEnumerable();
    public abstract virtual ITokenNode get_DotAssemblyKeyword();
    public abstract virtual TreeNodeCollection`1<IExternSource> get_ExternSources();
    public abstract virtual TreeNodeEnumerable`1<IExternSource> get_ExternSourcesEnumerable();
    public abstract virtual ITokenNode get_LBrace();
    public abstract virtual TreeNodeCollection`1<IILAssemblyProperty> get_Properties();
    public abstract virtual TreeNodeEnumerable`1<IILAssemblyProperty> get_PropertiesEnumerable();
    public abstract virtual ITokenNode get_RBrace();
    public abstract virtual TreeNodeCollection`1<ISequrityDeclaration> get_SecurityDeclarations();
    public abstract virtual TreeNodeEnumerable`1<ISequrityDeclaration> get_SecurityDeclarationsEnumerable();
    public abstract virtual IQualifiedName SetAssemblyName(IQualifiedName param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILAssemblyHash {
    public IBlob Blob { get; }
    public ITokenNode EqSign { get; }
    public ITokenNode PublicKeyTokenKeyword { get; }
    public abstract virtual IBlob get_Blob();
    public abstract virtual ITokenNode get_EqSign();
    public abstract virtual ITokenNode get_PublicKeyTokenKeyword();
    public abstract virtual IBlob SetBlob(IBlob param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILAssemblyHashAlgorithm {
    public ITokenNode AlgorithmKeyword { get; }
    public ITokenNode HashKeyword { get; }
    public ITokenNode Value { get; }
    public abstract virtual ITokenNode get_AlgorithmKeyword();
    public abstract virtual ITokenNode get_HashKeyword();
    public abstract virtual ITokenNode get_Value();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILAssemblyProperty {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILAssemblyPublicKey {
    public IBlob Blob { get; }
    public ITokenNode EqSign { get; }
    public ITokenNode PublicKeyKeyword { get; }
    public abstract virtual IBlob get_Blob();
    public abstract virtual ITokenNode get_EqSign();
    public abstract virtual ITokenNode get_PublicKeyKeyword();
    public abstract virtual IBlob SetBlob(IBlob param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILAssemblyPublicKeyToken {
    public IBlob Blob { get; }
    public ITokenNode EqSign { get; }
    public ITokenNode PublicKeyTokenKeyword { get; }
    public abstract virtual IBlob get_Blob();
    public abstract virtual ITokenNode get_EqSign();
    public abstract virtual ITokenNode get_PublicKeyTokenKeyword();
    public abstract virtual IBlob SetBlob(IBlob param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILAssemblyVersion {
    public IIntOrWildcard Value1 { get; }
    public IIntOrWildcard Value2 { get; }
    public IIntOrWildcard Value3 { get; }
    public IIntOrWildcard Value4 { get; }
    public ITokenNode VerKeyword { get; }
    public abstract virtual IIntOrWildcard get_Value1();
    public abstract virtual IIntOrWildcard get_Value2();
    public abstract virtual IIntOrWildcard get_Value3();
    public abstract virtual IIntOrWildcard get_Value4();
    public abstract virtual ITokenNode get_VerKeyword();
    public abstract virtual IIntOrWildcard SetValue1(IIntOrWildcard param);
    public abstract virtual IIntOrWildcard SetValue2(IIntOrWildcard param);
    public abstract virtual IIntOrWildcard SetValue3(IIntOrWildcard param);
    public abstract virtual IIntOrWildcard SetValue4(IIntOrWildcard param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILClassDeclaration {
    public IClassBody ClassBody { get; }
    public IClassHeader ClassHeader { get; }
    public ITokenNode DotClassKeyword { get; }
    public abstract virtual IClassBody get_ClassBody();
    public abstract virtual IClassHeader get_ClassHeader();
    public abstract virtual ITokenNode get_DotClassKeyword();
    public abstract virtual IClassBody SetClassBody(IClassBody param);
    public abstract virtual IClassHeader SetClassHeader(IClassHeader param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILCorFlags {
    public ITokenNode DotCorFlagsKeyword { get; }
    public ITokenNode Value { get; }
    public abstract virtual ITokenNode get_DotCorFlagsKeyword();
    public abstract virtual ITokenNode get_Value();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILDataDeclaration {
    public TreeNodeCollection`1<ITokenNode> Commas { get; }
    public TreeNodeEnumerable`1<ITokenNode> CommasEnumerable { get; }
    public IDataLabel DataLabel { get; }
    public ITokenNode DotDataKeyword { get; }
    public ITokenNode Eq { get; }
    public TreeNodeCollection`1<IDataDeclarationItem> Item { get; }
    public TreeNodeEnumerable`1<IDataDeclarationItem> ItemEnumerable { get; }
    public TreeNodeCollection`1<IDataDeclarationItem> Items { get; }
    public TreeNodeEnumerable`1<IDataDeclarationItem> ItemsEnumerable { get; }
    public ITokenNode LBrace { get; }
    public ITokenNode RBrace { get; }
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_Commas();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_CommasEnumerable();
    public abstract virtual IDataLabel get_DataLabel();
    public abstract virtual ITokenNode get_DotDataKeyword();
    public abstract virtual ITokenNode get_Eq();
    public abstract virtual TreeNodeCollection`1<IDataDeclarationItem> get_Item();
    public abstract virtual TreeNodeEnumerable`1<IDataDeclarationItem> get_ItemEnumerable();
    public abstract virtual TreeNodeCollection`1<IDataDeclarationItem> get_Items();
    public abstract virtual TreeNodeEnumerable`1<IDataDeclarationItem> get_ItemsEnumerable();
    public abstract virtual ITokenNode get_LBrace();
    public abstract virtual ITokenNode get_RBrace();
    public abstract virtual IDataLabel SetDataLabel(IDataLabel param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILDeclaration {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILEventDeclaration {
    public ITokenNode DotEventKeyword { get; }
    public IEventBody EventBody { get; }
    public IEventHeader EventHeader { get; }
    public abstract virtual ITokenNode get_DotEventKeyword();
    public abstract virtual IEventBody get_EventBody();
    public abstract virtual IEventHeader get_EventHeader();
    public abstract virtual IEventBody SetEventBody(IEventBody param);
    public abstract virtual IEventHeader SetEventHeader(IEventHeader param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILEventMember {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILExternAssemblyDeclaration {
    public IQualifiedName AliasName { get; }
    public ITokenNode AsKeyword { get; }
    public IQualifiedName AssemblyName { get; }
    public TreeNodeCollection`1<ICustomAttribute> Attributes { get; }
    public TreeNodeEnumerable`1<ICustomAttribute> AttributesEnumerable { get; }
    public TreeNodeCollection`1<ICompControl> CompControls { get; }
    public TreeNodeEnumerable`1<ICompControl> CompControlsEnumerable { get; }
    public ITokenNode DotAssemblyKeyword { get; }
    public ITokenNode ExternKeyword { get; }
    public ITokenNode LBrace { get; }
    public TreeNodeCollection`1<IILExternAssemblyProperty> Properties { get; }
    public TreeNodeEnumerable`1<IILExternAssemblyProperty> PropertiesEnumerable { get; }
    public ITokenNode RBrace { get; }
    public abstract virtual IQualifiedName get_AliasName();
    public abstract virtual ITokenNode get_AsKeyword();
    public abstract virtual IQualifiedName get_AssemblyName();
    public abstract virtual TreeNodeCollection`1<ICustomAttribute> get_Attributes();
    public abstract virtual TreeNodeEnumerable`1<ICustomAttribute> get_AttributesEnumerable();
    public abstract virtual TreeNodeCollection`1<ICompControl> get_CompControls();
    public abstract virtual TreeNodeEnumerable`1<ICompControl> get_CompControlsEnumerable();
    public abstract virtual ITokenNode get_DotAssemblyKeyword();
    public abstract virtual ITokenNode get_ExternKeyword();
    public abstract virtual ITokenNode get_LBrace();
    public abstract virtual TreeNodeCollection`1<IILExternAssemblyProperty> get_Properties();
    public abstract virtual TreeNodeEnumerable`1<IILExternAssemblyProperty> get_PropertiesEnumerable();
    public abstract virtual ITokenNode get_RBrace();
    public abstract virtual IQualifiedName SetAliasName(IQualifiedName param);
    public abstract virtual IQualifiedName SetAssemblyName(IQualifiedName param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILExternAssemblyProperty {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILExternClassAssemblyProperty {
    public IQualifiedName AssemblyName { get; }
    public ITokenNode DotAssemblyKeyword { get; }
    public ITokenNode ExternKeyword { get; }
    public abstract virtual IQualifiedName get_AssemblyName();
    public abstract virtual ITokenNode get_DotAssemblyKeyword();
    public abstract virtual ITokenNode get_ExternKeyword();
    public abstract virtual IQualifiedName SetAssemblyName(IQualifiedName param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILExternClassClassProperty {
    public ITokenNode DotClassKeyword { get; }
    public ITokenNode ExternKeyword { get; }
    public abstract virtual ITokenNode get_DotClassKeyword();
    public abstract virtual ITokenNode get_ExternKeyword();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILExternClassDeclaration {
    public TreeNodeCollection`1<ICustomAttribute> Attributes { get; }
    public TreeNodeEnumerable`1<ICustomAttribute> AttributesEnumerable { get; }
    public TreeNodeCollection`1<ICompControl> CompControls { get; }
    public TreeNodeEnumerable`1<ICompControl> CompControlsEnumerable { get; }
    public ITokenNode DotClassKeyword { get; }
    public ITokenNode ExternKeyword { get; }
    public ITokenNode LBrace { get; }
    public IIdentifierWithOwnerQualification Name { get; }
    public ITokenNode NestedKeyword { get; }
    public TreeNodeCollection`1<IILExternClassProperty> Properties { get; }
    public TreeNodeEnumerable`1<IILExternClassProperty> PropertiesEnumerable { get; }
    public ITokenNode PublicKeyword { get; }
    public ITokenNode RBrace { get; }
    public abstract virtual TreeNodeCollection`1<ICustomAttribute> get_Attributes();
    public abstract virtual TreeNodeEnumerable`1<ICustomAttribute> get_AttributesEnumerable();
    public abstract virtual TreeNodeCollection`1<ICompControl> get_CompControls();
    public abstract virtual TreeNodeEnumerable`1<ICompControl> get_CompControlsEnumerable();
    public abstract virtual ITokenNode get_DotClassKeyword();
    public abstract virtual ITokenNode get_ExternKeyword();
    public abstract virtual ITokenNode get_LBrace();
    public abstract virtual IIdentifierWithOwnerQualification get_Name();
    public abstract virtual ITokenNode get_NestedKeyword();
    public abstract virtual TreeNodeCollection`1<IILExternClassProperty> get_Properties();
    public abstract virtual TreeNodeEnumerable`1<IILExternClassProperty> get_PropertiesEnumerable();
    public abstract virtual ITokenNode get_PublicKeyword();
    public abstract virtual ITokenNode get_RBrace();
    public abstract virtual IIdentifierWithOwnerQualification SetName(IIdentifierWithOwnerQualification param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILExternClassFileProperty {
    public ITokenNode DotFileKeyword { get; }
    public abstract virtual ITokenNode get_DotFileKeyword();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILExternClassProperty {
    public IPresentableName Name { get; }
    public abstract virtual IPresentableName get_Name();
    public abstract virtual IPresentableName SetName(IPresentableName param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILExternModuleDeclaration {
    public ITokenNode DotModuleKeyword { get; }
    public ITokenNode ExternKeyword { get; }
    public IQualifiedName FileName { get; }
    public abstract virtual ITokenNode get_DotModuleKeyword();
    public abstract virtual ITokenNode get_ExternKeyword();
    public abstract virtual IQualifiedName get_FileName();
    public abstract virtual IQualifiedName SetFileName(IQualifiedName param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILFieldDeclaration {
    public ITokenNode AtKeyword { get; }
    public IDataLabel DataLabel { get; }
    public ITokenNode DotFieldKeyword { get; }
    public ITokenNode Eq { get; }
    public IPredefinedFieldAttributeList FieldAttributeList { get; }
    public IFieldInit FieldInit { get; }
    public IIdentifier Name { get; }
    public ITypeUsage Type { get; }
    public abstract virtual ITokenNode get_AtKeyword();
    public abstract virtual IDataLabel get_DataLabel();
    public abstract virtual ITokenNode get_DotFieldKeyword();
    public abstract virtual ITokenNode get_Eq();
    public abstract virtual IPredefinedFieldAttributeList get_FieldAttributeList();
    public abstract virtual IFieldInit get_FieldInit();
    public abstract virtual IIdentifier get_Name();
    public abstract virtual ITypeUsage get_Type();
    public abstract virtual IDataLabel SetDataLabel(IDataLabel param);
    public abstract virtual IPredefinedFieldAttributeList SetFieldAttributeList(IPredefinedFieldAttributeList param);
    public abstract virtual IFieldInit SetFieldInit(IFieldInit param);
    public abstract virtual IIdentifier SetName(IIdentifier param);
    public abstract virtual ITypeUsage SetType(ITypeUsage param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILFile {
    public TreeNodeCollection`1<ICustomAttribute> Attributes { get; }
    public TreeNodeEnumerable`1<ICustomAttribute> AttributesEnumerable { get; }
    public TreeNodeCollection`1<ICompControl> CompControls { get; }
    public TreeNodeEnumerable`1<ICompControl> CompControlsEnumerable { get; }
    public TreeNodeCollection`1<IILDeclaration> Declarations { get; }
    public TreeNodeEnumerable`1<IILDeclaration> DeclarationsEnumerable { get; }
    public TreeNodeCollection`1<ISequrityDeclaration> SecurityDeclarations { get; }
    public TreeNodeEnumerable`1<ISequrityDeclaration> SecurityDeclarationsEnumerable { get; }
    public abstract virtual TreeNodeCollection`1<ICustomAttribute> get_Attributes();
    public abstract virtual TreeNodeEnumerable`1<ICustomAttribute> get_AttributesEnumerable();
    public abstract virtual TreeNodeCollection`1<ICompControl> get_CompControls();
    public abstract virtual TreeNodeEnumerable`1<ICompControl> get_CompControlsEnumerable();
    public abstract virtual TreeNodeCollection`1<IILDeclaration> get_Declarations();
    public abstract virtual TreeNodeEnumerable`1<IILDeclaration> get_DeclarationsEnumerable();
    public abstract virtual TreeNodeCollection`1<ISequrityDeclaration> get_SecurityDeclarations();
    public abstract virtual TreeNodeEnumerable`1<ISequrityDeclaration> get_SecurityDeclarationsEnumerable();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILFileAlignmentDeclaration {
    public ITokenNode AlignmentKeyword { get; }
    public ITokenNode DotFileKeyword { get; }
    public ITokenNode Value { get; }
    public abstract virtual ITokenNode get_AlignmentKeyword();
    public abstract virtual ITokenNode get_DotFileKeyword();
    public abstract virtual ITokenNode get_Value();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILFileDeclaration {
    public IBlob Blob { get; }
    public ITokenNode DotEntryPointKeyword { get; }
    public ITokenNode DotFileKeyword { get; }
    public ITokenNode EqSign { get; }
    public IQualifiedName FileName { get; }
    public ITokenNode NoMetadataKeyword { get; }
    public ITokenNode PublicKeyTokenKeyword { get; }
    public abstract virtual IBlob get_Blob();
    public abstract virtual ITokenNode get_DotEntryPointKeyword();
    public abstract virtual ITokenNode get_DotFileKeyword();
    public abstract virtual ITokenNode get_EqSign();
    public abstract virtual IQualifiedName get_FileName();
    public abstract virtual ITokenNode get_NoMetadataKeyword();
    public abstract virtual ITokenNode get_PublicKeyTokenKeyword();
    public abstract virtual IBlob SetBlob(IBlob param);
    public abstract virtual IQualifiedName SetFileName(IQualifiedName param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILFireDeclaration {
    public ITokenNode DotFireKeyword { get; }
    public abstract virtual ITokenNode get_DotFireKeyword();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILForwardClassDeclaration {
    public TreeNodeCollection`1<ICustomAttribute> Attributes { get; }
    public TreeNodeEnumerable`1<ICustomAttribute> AttributesEnumerable { get; }
    public IIdentifierWithOwnerQualification ClassName { get; }
    public TreeNodeCollection`1<ICompControl> CompControls { get; }
    public TreeNodeEnumerable`1<ICompControl> CompControlsEnumerable { get; }
    public ITokenNode DotClassKeyword { get; }
    public ITokenNode ExternKeyword { get; }
    public ITokenNode ForwarderKeyword { get; }
    public ITokenNode LBrace { get; }
    public TreeNodeCollection`1<IILExternClassAssemblyProperty> Properties { get; }
    public TreeNodeEnumerable`1<IILExternClassAssemblyProperty> PropertiesEnumerable { get; }
    public ITokenNode RBrace { get; }
    public abstract virtual TreeNodeCollection`1<ICustomAttribute> get_Attributes();
    public abstract virtual TreeNodeEnumerable`1<ICustomAttribute> get_AttributesEnumerable();
    public abstract virtual IIdentifierWithOwnerQualification get_ClassName();
    public abstract virtual TreeNodeCollection`1<ICompControl> get_CompControls();
    public abstract virtual TreeNodeEnumerable`1<ICompControl> get_CompControlsEnumerable();
    public abstract virtual ITokenNode get_DotClassKeyword();
    public abstract virtual ITokenNode get_ExternKeyword();
    public abstract virtual ITokenNode get_ForwarderKeyword();
    public abstract virtual ITokenNode get_LBrace();
    public abstract virtual TreeNodeCollection`1<IILExternClassAssemblyProperty> get_Properties();
    public abstract virtual TreeNodeEnumerable`1<IILExternClassAssemblyProperty> get_PropertiesEnumerable();
    public abstract virtual ITokenNode get_RBrace();
    public abstract virtual IIdentifierWithOwnerQualification SetClassName(IIdentifierWithOwnerQualification param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILGetDeclaration {
    public ITokenNode DotGetKeyword { get; }
    public abstract virtual ITokenNode get_DotGetKeyword();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILImageBaseDeclaration {
    public ITokenNode DotImageBaseKeyword { get; }
    public ITokenNode Value { get; }
    public abstract virtual ITokenNode get_DotImageBaseKeyword();
    public abstract virtual ITokenNode get_Value();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILInstanceLayoutDeclaration {
    public ITokenNode DotPackKeyword { get; }
    public ITokenNode DotSizeKeyword { get; }
    public ITokenNode FieldAdressAlignment { get; }
    public ITokenNode MinSize { get; }
    public abstract virtual ITokenNode get_DotPackKeyword();
    public abstract virtual ITokenNode get_DotSizeKeyword();
    public abstract virtual ITokenNode get_FieldAdressAlignment();
    public abstract virtual ITokenNode get_MinSize();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILInterfaceimplSpecification {
    public ITokenNode DotInterfaceimplKeyword { get; }
    public ITokenNode TypeKeyword { get; }
    public ITypeSpec TypeSpec { get; }
    public abstract virtual ITokenNode get_DotInterfaceimplKeyword();
    public abstract virtual ITokenNode get_TypeKeyword();
    public abstract virtual ITypeSpec get_TypeSpec();
    public abstract virtual ITypeSpec SetTypeSpec(ITypeSpec param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILLabel {
    public IIdentifier Name { get; }
    public abstract virtual IIdentifier get_Name();
    public abstract virtual IIdentifier SetName(IIdentifier param);
    [CanBeNullAttribute]
public abstract virtual string GetName();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILLanguageDeclaration {
    public ITokenNode Comma1 { get; }
    public ITokenNode Comma2 { get; }
    public ITokenNode DotLanguageKeyword { get; }
    public ITokenNode String1 { get; }
    public ITokenNode String2 { get; }
    public ITokenNode String3 { get; }
    public abstract virtual ITokenNode get_Comma1();
    public abstract virtual ITokenNode get_Comma2();
    public abstract virtual ITokenNode get_DotLanguageKeyword();
    public abstract virtual ITokenNode get_String1();
    public abstract virtual ITokenNode get_String2();
    public abstract virtual ITokenNode get_String3();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILManifestAssemblyResource {
    public IQualifiedName AssemblyName { get; }
    public ITokenNode DotAssemblyKeyword { get; }
    public ITokenNode ExternKeyword { get; }
    public abstract virtual IQualifiedName get_AssemblyName();
    public abstract virtual ITokenNode get_DotAssemblyKeyword();
    public abstract virtual ITokenNode get_ExternKeyword();
    public abstract virtual IQualifiedName SetAssemblyName(IQualifiedName param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILManifestFileResource {
    public ITokenNode AtKeyword { get; }
    public ITokenNode DotFileKeyword { get; }
    public IQualifiedName FileName { get; }
    public ITokenNode Offset { get; }
    public abstract virtual ITokenNode get_AtKeyword();
    public abstract virtual ITokenNode get_DotFileKeyword();
    public abstract virtual IQualifiedName get_FileName();
    public abstract virtual ITokenNode get_Offset();
    public abstract virtual IQualifiedName SetFileName(IQualifiedName param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILManifestResource {
    public TreeNodeCollection`1<ICustomAttribute> Attributes { get; }
    public TreeNodeEnumerable`1<ICustomAttribute> AttributesEnumerable { get; }
    public TreeNodeCollection`1<ICompControl> CompControls { get; }
    public TreeNodeEnumerable`1<ICompControl> CompControlsEnumerable { get; }
    public TreeNodeCollection`1<IILManifestResourceDeclaration> Declaration { get; }
    public TreeNodeEnumerable`1<IILManifestResourceDeclaration> DeclarationEnumerable { get; }
    public ITokenNode DotMResourceKeyword { get; }
    public ITokenNode LBrace { get; }
    public IQualifiedName Name { get; }
    public ITokenNode PrivateKeyword { get; }
    public ITokenNode PublicKeyword { get; }
    public ITokenNode RBrace { get; }
    public abstract virtual TreeNodeCollection`1<ICustomAttribute> get_Attributes();
    public abstract virtual TreeNodeEnumerable`1<ICustomAttribute> get_AttributesEnumerable();
    public abstract virtual TreeNodeCollection`1<ICompControl> get_CompControls();
    public abstract virtual TreeNodeEnumerable`1<ICompControl> get_CompControlsEnumerable();
    public abstract virtual TreeNodeCollection`1<IILManifestResourceDeclaration> get_Declaration();
    public abstract virtual TreeNodeEnumerable`1<IILManifestResourceDeclaration> get_DeclarationEnumerable();
    public abstract virtual ITokenNode get_DotMResourceKeyword();
    public abstract virtual ITokenNode get_LBrace();
    public abstract virtual IQualifiedName get_Name();
    public abstract virtual ITokenNode get_PrivateKeyword();
    public abstract virtual ITokenNode get_PublicKeyword();
    public abstract virtual ITokenNode get_RBrace();
    public abstract virtual IQualifiedName SetName(IQualifiedName param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILManifestResourceDeclaration {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILMethodDeclaration {
    public ITokenNode DotMethodKeyword { get; }
    public IMethodScopeBlock MethodBody { get; }
    public IMethodHeader MethodHeader { get; }
    public abstract virtual ITokenNode get_DotMethodKeyword();
    public abstract virtual IMethodScopeBlock get_MethodBody();
    public abstract virtual IMethodHeader get_MethodHeader();
    public abstract virtual IMethodScopeBlock SetMethodBody(IMethodScopeBlock param);
    public abstract virtual IMethodHeader SetMethodHeader(IMethodHeader param);
    public abstract virtual int GetLocalVariableIndex(ILocalVariable localVariable);
    public abstract virtual int GetLocalVariableIndex(string localVariableName);
    [CanBeNullAttribute]
public abstract virtual ILocalVariable GetLocalVariable(int localVariableIndex);
    public abstract virtual int GetParameterIndex(IParameter parameter);
    public abstract virtual int GetParameterIndex(string parameterName);
    public abstract virtual int GetParameterIndex(IILMethodParamSpecification paramSpecification);
    [CanBeNullAttribute]
public abstract virtual IParameter GetParameter(int parameterIndex);
    public abstract virtual bool IsStatic();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILMethodOverridingDeclarationFull {
    public ICallConvention CallConvention { get; }
    public ITokenNode DotOverrideKeyword { get; }
    public ITokenNode DoubleColon { get; }
    public IGenArity GenArity { get; }
    public ITokenNode MethodKeyword { get; }
    public IMethodReferenceName MethodName { get; }
    public ISignatureDef Signature { get; }
    public ITypeUsage Type { get; }
    public abstract virtual ICallConvention get_CallConvention();
    public abstract virtual ITokenNode get_DotOverrideKeyword();
    public abstract virtual ITokenNode get_DoubleColon();
    public abstract virtual IGenArity get_GenArity();
    public abstract virtual ITokenNode get_MethodKeyword();
    public abstract virtual IMethodReferenceName get_MethodName();
    public abstract virtual ISignatureDef get_Signature();
    public abstract virtual ITypeUsage get_Type();
    public abstract virtual ICallConvention SetCallConvention(ICallConvention param);
    public abstract virtual IGenArity SetGenArity(IGenArity param);
    public abstract virtual IMethodReferenceName SetMethodName(IMethodReferenceName param);
    public abstract virtual ISignatureDef SetSignature(ISignatureDef param);
    public abstract virtual ITypeUsage SetType(ITypeUsage param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILMethodOverridingDeclarationInClassFull {
    public IILMethodOverridingDeclarationFull ImplementationMethod { get; }
    public IILMethodOverridingDeclarationFull OverriddenMethod { get; }
    public ITokenNode WithKeyword { get; }
    public abstract virtual IILMethodOverridingDeclarationFull get_ImplementationMethod();
    public abstract virtual IILMethodOverridingDeclarationFull get_OverriddenMethod();
    public abstract virtual ITokenNode get_WithKeyword();
    public abstract virtual IILMethodOverridingDeclarationFull SetImplementationMethod(IILMethodOverridingDeclarationFull param);
    public abstract virtual IILMethodOverridingDeclarationFull SetOverriddenMethod(IILMethodOverridingDeclarationFull param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILMethodOverridingDeclarationInClassShort {
    public IImplementationMethodDeclarationShort ImplementationMethod { get; }
    public IILMethodOverridingDeclarationShort OverriddenMethod { get; }
    public ITokenNode WithKeyword { get; }
    public abstract virtual IImplementationMethodDeclarationShort get_ImplementationMethod();
    public abstract virtual IILMethodOverridingDeclarationShort get_OverriddenMethod();
    public abstract virtual ITokenNode get_WithKeyword();
    public abstract virtual IImplementationMethodDeclarationShort SetImplementationMethod(IImplementationMethodDeclarationShort param);
    public abstract virtual IILMethodOverridingDeclarationShort SetOverriddenMethod(IILMethodOverridingDeclarationShort param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILMethodOverridingDeclarationShort {
    public ITokenNode DotOverrideKeyword { get; }
    public ITokenNode DoubleColon { get; }
    public IMethodReferenceName MethodName { get; }
    public abstract virtual ITokenNode get_DotOverrideKeyword();
    public abstract virtual ITokenNode get_DoubleColon();
    public abstract virtual IMethodReferenceName get_MethodName();
    public abstract virtual IMethodReferenceName SetMethodName(IMethodReferenceName param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILMethodParamSpecification {
    public ITokenNode DotParamKeyword { get; }
    public ITokenNode Eq { get; }
    public IFieldInit FieldInit { get; }
    public ITokenNode LBracket { get; }
    public ITokenNode ParameterIndex { get; }
    public ITokenNode RBracket { get; }
    public abstract virtual ITokenNode get_DotParamKeyword();
    public abstract virtual ITokenNode get_Eq();
    public abstract virtual IFieldInit get_FieldInit();
    public abstract virtual ITokenNode get_LBracket();
    public abstract virtual ITokenNode get_ParameterIndex();
    public abstract virtual ITokenNode get_RBracket();
    public abstract virtual IFieldInit SetFieldInit(IFieldInit param);
    public abstract virtual bool IsReturnValue();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILModuleDeclaration {
    public ITokenNode DotModuleKeyword { get; }
    public IQualifiedName FileName { get; }
    public abstract virtual ITokenNode get_DotModuleKeyword();
    public abstract virtual IQualifiedName get_FileName();
    public abstract virtual IQualifiedName SetFileName(IQualifiedName param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILMscorlibDeclaration {
    public ITokenNode DotMscorlibKeyword { get; }
    public abstract virtual ITokenNode get_DotMscorlibKeyword();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILNamespaceBody {
    public TreeNodeCollection`1<IILClassDeclaration> ClassDeclarations { get; }
    public TreeNodeEnumerable`1<IILClassDeclaration> ClassDeclarationsEnumerable { get; }
    public ITokenNode LBrace { get; }
    public TreeNodeCollection`1<IILNamespaceDeclaration> NamespaceDeclarations { get; }
    public TreeNodeEnumerable`1<IILNamespaceDeclaration> NamespaceDeclarationsEnumerable { get; }
    public ITokenNode RBrace { get; }
    public abstract virtual TreeNodeCollection`1<IILClassDeclaration> get_ClassDeclarations();
    public abstract virtual TreeNodeEnumerable`1<IILClassDeclaration> get_ClassDeclarationsEnumerable();
    public abstract virtual ITokenNode get_LBrace();
    public abstract virtual TreeNodeCollection`1<IILNamespaceDeclaration> get_NamespaceDeclarations();
    public abstract virtual TreeNodeEnumerable`1<IILNamespaceDeclaration> get_NamespaceDeclarationsEnumerable();
    public abstract virtual ITokenNode get_RBrace();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILNamespaceDeclaration {
    public IILNamespaceBody Body { get; }
    public ITokenNode DotNamespaceKeyword { get; }
    public IIdentifierWithOwnerQualification Name { get; }
    [CanBeNullAttribute]
public IILNamespaceDeclaration ContainingNamespace { get; }
    public abstract virtual IILNamespaceBody get_Body();
    public abstract virtual ITokenNode get_DotNamespaceKeyword();
    public abstract virtual IIdentifierWithOwnerQualification get_Name();
    public abstract virtual IILNamespaceBody SetBody(IILNamespaceBody param);
    public abstract virtual IIdentifierWithOwnerQualification SetName(IIdentifierWithOwnerQualification param);
    public abstract virtual IILNamespaceDeclaration get_ContainingNamespace();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILOtherDeclaration {
    public ITokenNode DotOtherKeyword { get; }
    public abstract virtual ITokenNode get_DotOtherKeyword();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILParamTypeConstraintSpecification {
    public ITokenNode Comma { get; }
    public ITokenNode ConstraintKeyword { get; }
    public ITokenNode DotParamKeyword { get; }
    public IGenericParameterPointer GenericParameterPointer { get; }
    public ITypeSpec TypeSpec { get; }
    public abstract virtual ITokenNode get_Comma();
    public abstract virtual ITokenNode get_ConstraintKeyword();
    public abstract virtual ITokenNode get_DotParamKeyword();
    public abstract virtual IGenericParameterPointer get_GenericParameterPointer();
    public abstract virtual ITypeSpec get_TypeSpec();
    public abstract virtual IGenericParameterPointer SetGenericParameterPointer(IGenericParameterPointer param);
    public abstract virtual ITypeSpec SetTypeSpec(ITypeSpec param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILParamTypeSpecification {
    public ITokenNode DotParamKeyword { get; }
    public IGenericParameterPointer GenericParameterPointer { get; }
    public ITokenNode TypeKeyword { get; }
    public abstract virtual ITokenNode get_DotParamKeyword();
    public abstract virtual IGenericParameterPointer get_GenericParameterPointer();
    public abstract virtual ITokenNode get_TypeKeyword();
    public abstract virtual IGenericParameterPointer SetGenericParameterPointer(IGenericParameterPointer param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILPropertyDeclaration {
    public ITokenNode DotPropertyKeyword { get; }
    public IPropertyBody PropertyBody { get; }
    public IPropertyHeader PropertyHeader { get; }
    public abstract virtual ITokenNode get_DotPropertyKeyword();
    public abstract virtual IPropertyBody get_PropertyBody();
    public abstract virtual IPropertyHeader get_PropertyHeader();
    public abstract virtual IPropertyBody SetPropertyBody(IPropertyBody param);
    public abstract virtual IPropertyHeader SetPropertyHeader(IPropertyHeader param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILPropertyMember {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IIlQualifiedName {
    public ITokenNode Dot { get; }
    public IIdentifier Identifier { get; }
    public IIlQualifiedName Qualifier { get; }
    [CanBeNullAttribute]
public ITypeResolutionScope TypeResolutionScope { get; }
    public abstract virtual ITokenNode get_Dot();
    public abstract virtual IIdentifier get_Identifier();
    public abstract virtual IIlQualifiedName get_Qualifier();
    public abstract virtual IIdentifier SetIdentifier(IIdentifier param);
    public abstract virtual IIlQualifiedName SetQualifier(IIlQualifiedName param);
    public abstract virtual ITypeResolutionScope get_TypeResolutionScope();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IIlReferenceOwner {
    [NotNullAttribute]
public IReference Reference { get; }
    public abstract virtual IReference get_Reference();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILRemoveonDeclaration {
    public ITokenNode DotRemoveonKeyword { get; }
    public abstract virtual ITokenNode get_DotRemoveonKeyword();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILSetDeclaration {
    public ITokenNode DotSetKeyword { get; }
    public abstract virtual ITokenNode get_DotSetKeyword();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILStackReserveDeclaration {
    public ITokenNode StackReserveKeyword { get; }
    public ITokenNode Value { get; }
    public abstract virtual ITokenNode get_StackReserveKeyword();
    public abstract virtual ITokenNode get_Value();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILSubsystem {
    public ITokenNode DotSubsystemKeyword { get; }
    public ITokenNode Value { get; }
    public abstract virtual ITokenNode get_DotSubsystemKeyword();
    public abstract virtual ITokenNode get_Value();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILTreeNode {
    public abstract virtual void Accept(TreeNodeVisitor visitor);
    public abstract virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public abstract virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILTypelistDeclaration {
    public TreeNodeCollection`1<IClassName> ClassNames { get; }
    public TreeNodeEnumerable`1<IClassName> ClassNamesEnumerable { get; }
    public ITokenNode DotTypelistKeyword { get; }
    public ITokenNode LBrace { get; }
    public ITokenNode RBrace { get; }
    public abstract virtual TreeNodeCollection`1<IClassName> get_ClassNames();
    public abstract virtual TreeNodeEnumerable`1<IClassName> get_ClassNamesEnumerable();
    public abstract virtual ITokenNode get_DotTypelistKeyword();
    public abstract virtual ITokenNode get_LBrace();
    public abstract virtual ITokenNode get_RBrace();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILTypeMemberDeclaration {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IILVtfixupDeclaration {
    public ITokenNode AtKeyword { get; }
    public IDataLabel DataLabel { get; }
    public ITokenNode DotVtfixupKeyword { get; }
    public ITokenNode EntriesNumber { get; }
    public ITokenNode LBracket { get; }
    public ITokenNode RBracket { get; }
    public abstract virtual ITokenNode get_AtKeyword();
    public abstract virtual IDataLabel get_DataLabel();
    public abstract virtual ITokenNode get_DotVtfixupKeyword();
    public abstract virtual ITokenNode get_EntriesNumber();
    public abstract virtual ITokenNode get_LBracket();
    public abstract virtual ITokenNode get_RBracket();
    public abstract virtual IDataLabel SetDataLabel(IDataLabel param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IImplementationAttributeList {
    public TreeNodeCollection`1<ITokenNode> Attributes { get; }
    public TreeNodeEnumerable`1<ITokenNode> AttributesEnumerable { get; }
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_Attributes();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_AttributesEnumerable();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IImplementationMethodDeclarationShort {
    public ICallConvention CallConvention { get; }
    public ITokenNode DoubleColon { get; }
    public IMethodReferenceName MethodName { get; }
    public ISignatureDef Signature { get; }
    public ITypeUsage Type { get; }
    public abstract virtual ICallConvention get_CallConvention();
    public abstract virtual ITokenNode get_DoubleColon();
    public abstract virtual IMethodReferenceName get_MethodName();
    public abstract virtual ISignatureDef get_Signature();
    public abstract virtual ITypeUsage get_Type();
    public abstract virtual ICallConvention SetCallConvention(ICallConvention param);
    public abstract virtual IMethodReferenceName SetMethodName(IMethodReferenceName param);
    public abstract virtual ISignatureDef SetSignature(ISignatureDef param);
    public abstract virtual ITypeUsage SetType(ITypeUsage param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IInstanceConstructorName {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IInstanceConstructorReferenceName {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IInstruction {
    public ITokenNode BytearrayKeyword { get; }
    public IBlob Bytes { get; }
    public ICallConvention CallConvention { get; }
    public IBlob Data { get; }
    public IInstructionFieldParameter Field { get; }
    public ITokenNode FloatNumber { get; }
    public IInstructionBranchTarget InstructionBranchTarget { get; }
    public IInstructionField InstructionField { get; }
    public IInstructionI InstructionI { get; }
    public IInstructionI8 InstructionI8 { get; }
    public IInstructionMethod InstructionMethod { get; }
    public IInstructionNone InstructionNone { get; }
    public IInstructionR InstructionR { get; }
    public IInstructionSig InstructionSig { get; }
    public IInstructionString InstructionString { get; }
    public IInstructionSwitch InstructionSwitch { get; }
    public IInstructionTok InstructionTok { get; }
    public IInstructionType InstructionType { get; }
    public IInstructionVar InstructionVar { get; }
    public IInstructionMethodParameter Method { get; }
    public ITokenNode Minus { get; }
    public ITokenNode Number { get; }
    public IOwnerType Owner { get; }
    public ISignatureDef Signature { get; }
    public ICompQstring Strings { get; }
    public ITargetLabel Target { get; }
    public ITargetLabelList TargetLabelList { get; }
    public ITypeUsage Type { get; }
    public ITypeSpec TypeSpec { get; }
    public ITokenNode VariableOrArgumentIndex { get; }
    public IIdentifier VariableOrArgumentName { get; }
    public abstract virtual ITokenNode get_BytearrayKeyword();
    public abstract virtual IBlob get_Bytes();
    public abstract virtual ICallConvention get_CallConvention();
    public abstract virtual IBlob get_Data();
    public abstract virtual IInstructionFieldParameter get_Field();
    public abstract virtual ITokenNode get_FloatNumber();
    public abstract virtual IInstructionBranchTarget get_InstructionBranchTarget();
    public abstract virtual IInstructionField get_InstructionField();
    public abstract virtual IInstructionI get_InstructionI();
    public abstract virtual IInstructionI8 get_InstructionI8();
    public abstract virtual IInstructionMethod get_InstructionMethod();
    public abstract virtual IInstructionNone get_InstructionNone();
    public abstract virtual IInstructionR get_InstructionR();
    public abstract virtual IInstructionSig get_InstructionSig();
    public abstract virtual IInstructionString get_InstructionString();
    public abstract virtual IInstructionSwitch get_InstructionSwitch();
    public abstract virtual IInstructionTok get_InstructionTok();
    public abstract virtual IInstructionType get_InstructionType();
    public abstract virtual IInstructionVar get_InstructionVar();
    public abstract virtual IInstructionMethodParameter get_Method();
    public abstract virtual ITokenNode get_Minus();
    public abstract virtual ITokenNode get_Number();
    public abstract virtual IOwnerType get_Owner();
    public abstract virtual ISignatureDef get_Signature();
    public abstract virtual ICompQstring get_Strings();
    public abstract virtual ITargetLabel get_Target();
    public abstract virtual ITargetLabelList get_TargetLabelList();
    public abstract virtual ITypeUsage get_Type();
    public abstract virtual ITypeSpec get_TypeSpec();
    public abstract virtual ITokenNode get_VariableOrArgumentIndex();
    public abstract virtual IIdentifier get_VariableOrArgumentName();
    public abstract virtual IBlob SetBytes(IBlob param);
    public abstract virtual ICallConvention SetCallConvention(ICallConvention param);
    public abstract virtual IBlob SetData(IBlob param);
    public abstract virtual IInstructionFieldParameter SetField(IInstructionFieldParameter param);
    public abstract virtual IInstructionBranchTarget SetInstructionBranchTarget(IInstructionBranchTarget param);
    public abstract virtual IInstructionField SetInstructionField(IInstructionField param);
    public abstract virtual IInstructionI SetInstructionI(IInstructionI param);
    public abstract virtual IInstructionI8 SetInstructionI8(IInstructionI8 param);
    public abstract virtual IInstructionMethod SetInstructionMethod(IInstructionMethod param);
    public abstract virtual IInstructionNone SetInstructionNone(IInstructionNone param);
    public abstract virtual IInstructionR SetInstructionR(IInstructionR param);
    public abstract virtual IInstructionSig SetInstructionSig(IInstructionSig param);
    public abstract virtual IInstructionString SetInstructionString(IInstructionString param);
    public abstract virtual IInstructionSwitch SetInstructionSwitch(IInstructionSwitch param);
    public abstract virtual IInstructionTok SetInstructionTok(IInstructionTok param);
    public abstract virtual IInstructionType SetInstructionType(IInstructionType param);
    public abstract virtual IInstructionVar SetInstructionVar(IInstructionVar param);
    public abstract virtual IInstructionMethodParameter SetMethod(IInstructionMethodParameter param);
    public abstract virtual IOwnerType SetOwner(IOwnerType param);
    public abstract virtual ISignatureDef SetSignature(ISignatureDef param);
    public abstract virtual ICompQstring SetStrings(ICompQstring param);
    public abstract virtual ITargetLabel SetTarget(ITargetLabel param);
    public abstract virtual ITargetLabelList SetTargetLabelList(ITargetLabelList param);
    public abstract virtual ITypeUsage SetType(ITypeUsage param);
    public abstract virtual ITypeSpec SetTypeSpec(ITypeSpec param);
    public abstract virtual IIdentifier SetVariableOrArgumentName(IIdentifier param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IInstructionBranchTarget {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IInstructionField {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IInstructionFieldParameter {
    public IFieldReferenceName FieldName { get; }
    public ITypeUsage Type { get; }
    public abstract virtual IFieldReferenceName get_FieldName();
    public abstract virtual ITypeUsage get_Type();
    public abstract virtual IFieldReferenceName SetFieldName(IFieldReferenceName param);
    public abstract virtual ITypeUsage SetType(ITypeUsage param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IInstructionI {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IInstructionI8 {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IInstructionMethod {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IInstructionMethodParameter {
    public ICallConvention CallConvention { get; }
    public IGenericArgumentList GenericArgumentList { get; }
    public IMethodReferenceName MethodName { get; }
    public ISignatureDef Signature { get; }
    public ITypeUsage Type { get; }
    public abstract virtual ICallConvention get_CallConvention();
    public abstract virtual IGenericArgumentList get_GenericArgumentList();
    public abstract virtual IMethodReferenceName get_MethodName();
    public abstract virtual ISignatureDef get_Signature();
    public abstract virtual ITypeUsage get_Type();
    public abstract virtual ICallConvention SetCallConvention(ICallConvention param);
    public abstract virtual IGenericArgumentList SetGenericArgumentList(IGenericArgumentList param);
    public abstract virtual IMethodReferenceName SetMethodName(IMethodReferenceName param);
    public abstract virtual ISignatureDef SetSignature(ISignatureDef param);
    public abstract virtual ITypeUsage SetType(ITypeUsage param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IInstructionNone {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IInstructionR {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IInstructionSig {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IInstructionString {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IInstructionSwitch {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IInstructionTok {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IInstructionType {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IInstructionVar {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IIntInitializer {
    public ITokenNode LParenth { get; }
    public ITokenNode Minus { get; }
    public ITokenNode RParenth { get; }
    public ITokenNode Value { get; }
    public abstract virtual ITokenNode get_LParenth();
    public abstract virtual ITokenNode get_Minus();
    public abstract virtual ITokenNode get_RParenth();
    public abstract virtual ITokenNode get_Value();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IIntOrWildcard {
    public ITokenNode Value { get; }
    public ITokenNode Wildcard { get; }
    public abstract virtual ITokenNode get_Value();
    public abstract virtual ITokenNode get_Wildcard();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.ILAccessorDeclarationNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILAccessorDeclaration GetByCallConvention(ICallConvention param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILAccessorDeclaration GetByMethodName(IMethodReferenceName param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILAccessorDeclaration GetBySignature(ISignatureDef param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILAccessorDeclaration GetByType(ITypeUsage param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILAccessorDeclaration GetByTypeSpec(ITypeSpecWithDoubleColon param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILAddonDeclarationNavigator : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.ILAliasDeclarationNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILAliasDeclaration GetByAliasName(IQualifiedName param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILAliasDeclaration GetByMemberReference(IMemberRef param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILAliasDeclaration GetByTypeReference(ITypeReference param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILAssemblyAutodetectionNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILAssemblyCultureNavigator : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.ILAssemblyDeclarationNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILAssemblyDeclaration GetByAssemblyName(IQualifiedName param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILAssemblyDeclaration GetByAttribute(ICustomAttribute param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILAssemblyDeclaration GetByCompControl(ICompControl param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILAssemblyDeclaration GetByExternSource(IExternSource param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILAssemblyDeclaration GetByPropertie(IILAssemblyProperty param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILAssemblyDeclaration GetBySecurityDeclaration(ISequrityDeclaration param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILAssemblyHashAlgorithmNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILAssemblyHashNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILAssemblyHash GetByBlob(IBlob param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILAssemblyPropertyNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILAssemblyPublicKeyNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILAssemblyPublicKey GetByBlob(IBlob param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILAssemblyPublicKeyTokenNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILAssemblyPublicKeyToken GetByBlob(IBlob param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.ILAssemblyVersionNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILAssemblyVersion GetByValue1(IIntOrWildcard param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILAssemblyVersion GetByValue2(IIntOrWildcard param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILAssemblyVersion GetByValue3(IIntOrWildcard param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILAssemblyVersion GetByValue4(IIntOrWildcard param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.ILClassDeclarationNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILClassDeclaration GetByClassBody(IClassBody param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILClassDeclaration GetByClassHeader(IClassHeader param);
}
public abstract class JetBrains.ReSharper.Psi.IL.Tree.ILCompositeNodeType : CompositeNodeType {
    protected ILCompositeNodeType(string s, int index);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILCorFlagsNavigator : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.ILDataDeclarationNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILDataDeclaration GetByDataLabel(IDataLabel param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILDataDeclaration GetByItem(IDataDeclarationItem param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILDeclarationNavigator : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.ILEventDeclarationNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILEventDeclaration GetByEventBody(IEventBody param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILEventDeclaration GetByEventHeader(IEventHeader param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILEventMemberNavigator : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.ILExternAssemblyDeclarationNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILExternAssemblyDeclaration GetByAliasName(IQualifiedName param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILExternAssemblyDeclaration GetByAssemblyName(IQualifiedName param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILExternAssemblyDeclaration GetByAttribute(ICustomAttribute param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILExternAssemblyDeclaration GetByCompControl(ICompControl param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILExternAssemblyDeclaration GetByPropertie(IILExternAssemblyProperty param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILExternAssemblyPropertyNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILExternClassAssemblyPropertyNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILExternClassAssemblyProperty GetByAssemblyName(IQualifiedName param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILExternClassClassPropertyNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILExternClassClassProperty GetByName(IIdentifierWithOwnerQualification param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.ILExternClassDeclarationNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILExternClassDeclaration GetByAttribute(ICustomAttribute param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILExternClassDeclaration GetByCompControl(ICompControl param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILExternClassDeclaration GetByName(IIdentifierWithOwnerQualification param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILExternClassDeclaration GetByPropertie(IILExternClassProperty param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILExternClassFilePropertyNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILExternClassFileProperty GetByName(IQualifiedName param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILExternClassPropertyNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILExternModuleDeclarationNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILExternModuleDeclaration GetByFileName(IQualifiedName param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.ILFieldDeclarationNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILFieldDeclaration GetByDataLabel(IDataLabel param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILFieldDeclaration GetByFieldAttributeList(IPredefinedFieldAttributeList param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILFieldDeclaration GetByFieldInit(IFieldInit param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILFieldDeclaration GetByName(IIdentifier param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILFieldDeclaration GetByType(ITypeUsage param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILFileAlignmentDeclarationNavigator : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.ILFileDeclarationNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILFileDeclaration GetByBlob(IBlob param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILFileDeclaration GetByFileName(IQualifiedName param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.ILFileNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILFile GetByAttribute(ICustomAttribute param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILFile GetByCompControl(ICompControl param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILFile GetByDeclaration(IILDeclaration param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILFile GetBySecurityDeclaration(ISequrityDeclaration param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILFireDeclarationNavigator : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.ILForwardClassDeclarationNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILForwardClassDeclaration GetByAttribute(ICustomAttribute param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILForwardClassDeclaration GetByClassName(IIdentifierWithOwnerQualification param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILForwardClassDeclaration GetByCompControl(ICompControl param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILForwardClassDeclaration GetByPropertie(IILExternClassAssemblyProperty param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILGetDeclarationNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILImageBaseDeclarationNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILInstanceLayoutDeclarationNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILInterfaceimplSpecificationNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILInterfaceimplSpecification GetByTypeSpec(ITypeSpec param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILLabelNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILLabel GetByName(IIdentifier param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILLanguageDeclarationNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILManifestAssemblyResourceNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILManifestAssemblyResource GetByAssemblyName(IQualifiedName param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILManifestFileResourceNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILManifestFileResource GetByFileName(IQualifiedName param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILManifestResourceDeclarationNavigator : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.ILManifestResourceNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILManifestResource GetByAttribute(ICustomAttribute param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILManifestResource GetByCompControl(ICompControl param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILManifestResource GetByDeclaration(IILManifestResourceDeclaration param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILManifestResource GetByName(IQualifiedName param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.ILMethodDeclarationNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILMethodDeclaration GetByMethodBody(IMethodScopeBlock param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILMethodDeclaration GetByMethodHeader(IMethodHeader param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.ILMethodOverridingDeclarationFullNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILMethodOverridingDeclarationFull GetByCallConvention(ICallConvention param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILMethodOverridingDeclarationFull GetByGenArity(IGenArity param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILMethodOverridingDeclarationFull GetByMethodName(IMethodReferenceName param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILMethodOverridingDeclarationFull GetBySignature(ISignatureDef param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILMethodOverridingDeclarationFull GetByType(ITypeUsage param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILMethodOverridingDeclarationFull GetByTypeSpec(ITypeSpec param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.ILMethodOverridingDeclarationInClassFullNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILMethodOverridingDeclarationInClassFull GetByImplementationMethod(IILMethodOverridingDeclarationFull param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILMethodOverridingDeclarationInClassFull GetByOverriddenMethod(IILMethodOverridingDeclarationFull param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.ILMethodOverridingDeclarationInClassShortNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILMethodOverridingDeclarationInClassShort GetByImplementationMethod(IImplementationMethodDeclarationShort param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILMethodOverridingDeclarationInClassShort GetByOverriddenMethod(IILMethodOverridingDeclarationShort param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.ILMethodOverridingDeclarationShortNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILMethodOverridingDeclarationShort GetByMethodName(IMethodReferenceName param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILMethodOverridingDeclarationShort GetByTypeSpec(ITypeSpec param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILMethodParamSpecificationNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILMethodParamSpecification GetByFieldInit(IFieldInit param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILModuleDeclarationNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILModuleDeclaration GetByFileName(IQualifiedName param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILMscorlibDeclarationNavigator : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.ILNamespaceBodyNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILNamespaceBody GetByClassDeclaration(IILClassDeclaration param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILNamespaceBody GetByNamespaceDeclaration(IILNamespaceDeclaration param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.ILNamespaceDeclarationNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILNamespaceDeclaration GetByBody(IILNamespaceBody param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILNamespaceDeclaration GetByName(IIdentifierWithOwnerQualification param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.ILocalVariable {
    public ITokenNode LBracket { get; }
    public ITokenNode LocalVariableIndex { get; }
    public IIdentifier Name { get; }
    public ITokenNode RBracket { get; }
    public ITypeUsage Type { get; }
    public abstract virtual ITokenNode get_LBracket();
    public abstract virtual ITokenNode get_LocalVariableIndex();
    public abstract virtual IIdentifier get_Name();
    public abstract virtual ITokenNode get_RBracket();
    public abstract virtual ITypeUsage get_Type();
    public abstract virtual IIdentifier SetName(IIdentifier param);
    public abstract virtual ITypeUsage SetType(ITypeUsage param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.ILocalVariablesDeclaration {
    public TreeNodeCollection`1<ITokenNode> Commas { get; }
    public TreeNodeEnumerable`1<ITokenNode> CommasEnumerable { get; }
    public ITokenNode DotLocalsKeyword { get; }
    public ITokenNode InitKeyword { get; }
    public ITokenNode LParenth { get; }
    public TreeNodeCollection`1<ILocalVariable> LocalVariables { get; }
    public TreeNodeEnumerable`1<ILocalVariable> LocalVariablesEnumerable { get; }
    public ITokenNode RParenth { get; }
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_Commas();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_CommasEnumerable();
    public abstract virtual ITokenNode get_DotLocalsKeyword();
    public abstract virtual ITokenNode get_InitKeyword();
    public abstract virtual ITokenNode get_LParenth();
    public abstract virtual TreeNodeCollection`1<ILocalVariable> get_LocalVariables();
    public abstract virtual TreeNodeEnumerable`1<ILocalVariable> get_LocalVariablesEnumerable();
    public abstract virtual ITokenNode get_RParenth();
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILOtherDeclarationNavigator : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.ILParamTypeConstraintSpecificationNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILParamTypeConstraintSpecification GetByGenericParameterPointer(IGenericParameterPointer param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILParamTypeConstraintSpecification GetByTypeSpec(ITypeSpec param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILParamTypeSpecificationNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILParamTypeSpecification GetByGenericParameterPointer(IGenericParameterPointer param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.ILPropertyDeclarationNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILPropertyDeclaration GetByPropertyBody(IPropertyBody param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILPropertyDeclaration GetByPropertyHeader(IPropertyHeader param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILPropertyMemberNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.IlQualifiedNameNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IIlQualifiedName GetByIdentifier(IIdentifier param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.IlReferenceOwnerNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILRemoveonDeclarationNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILSetDeclarationNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILStackReserveDeclarationNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILSubsystemNavigator : object {
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.IL.Tree.ILTreeNodeUtil : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IGenericParameterDeclaration GetTypeParameter(IGenericParameterDeclarationList typeParameterList, IGenericParameterPointer typeParameterPointer);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILTypelistDeclarationNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILTypelistDeclaration GetByClassName(IClassName param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILTypeMemberDeclarationNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ILVtfixupDeclarationNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IILVtfixupDeclaration GetByDataLabel(IDataLabel param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IManagedPointerType {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IMarshalSpec {
    public ITokenNode LParenth { get; }
    public ITokenNode MarshalKeyword { get; }
    public INativeType NativeType { get; }
    public ITokenNode RParenth { get; }
    public abstract virtual ITokenNode get_LParenth();
    public abstract virtual ITokenNode get_MarshalKeyword();
    public abstract virtual INativeType get_NativeType();
    public abstract virtual ITokenNode get_RParenth();
    public abstract virtual INativeType SetNativeType(INativeType param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IMaxstack {
    public ITokenNode DotMaxstackKeyword { get; }
    public ITokenNode MaxStackValue { get; }
    public abstract virtual ITokenNode get_DotMaxstackKeyword();
    public abstract virtual ITokenNode get_MaxStackValue();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IMdtoken {
    public ITokenNode LParenth { get; }
    public ITokenNode MdtokenKeyword { get; }
    public ITokenNode RParenth { get; }
    public ITokenNode Value { get; }
    public abstract virtual ITokenNode get_LParenth();
    public abstract virtual ITokenNode get_MdtokenKeyword();
    public abstract virtual ITokenNode get_RParenth();
    public abstract virtual ITokenNode get_Value();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IMemberRef {
    public ICallConvention CallConvention { get; }
    public ITokenNode FieldKeyword { get; }
    public IFieldReferenceName FieldName { get; }
    public ITokenNode MethodKeyword { get; }
    public IMethodReferenceName MethodName { get; }
    public ISignatureDef Signature { get; }
    public ITypeUsage Type { get; }
    public abstract virtual ICallConvention get_CallConvention();
    public abstract virtual ITokenNode get_FieldKeyword();
    public abstract virtual IFieldReferenceName get_FieldName();
    public abstract virtual ITokenNode get_MethodKeyword();
    public abstract virtual IMethodReferenceName get_MethodName();
    public abstract virtual ISignatureDef get_Signature();
    public abstract virtual ITypeUsage get_Type();
    public abstract virtual ICallConvention SetCallConvention(ICallConvention param);
    public abstract virtual IFieldReferenceName SetFieldName(IFieldReferenceName param);
    public abstract virtual IMethodReferenceName SetMethodName(IMethodReferenceName param);
    public abstract virtual ISignatureDef SetSignature(ISignatureDef param);
    public abstract virtual ITypeUsage SetType(ITypeUsage param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IMethodHeader {
    public ICallConvention CallConvention { get; }
    public IGenericParameterDeclarationList GenericParameterDeclarationList { get; }
    public IImplementationAttributeList ImplementationAttributeList { get; }
    public IMarshalSpec Marshal { get; }
    public IPredefinedMethodAttributeList MethodAttributeList { get; }
    public IPresentableName Name { get; }
    public ITypeUsage ReturnType { get; }
    public ISignatureDef Signature { get; }
    public abstract virtual ICallConvention get_CallConvention();
    public abstract virtual IGenericParameterDeclarationList get_GenericParameterDeclarationList();
    public abstract virtual IImplementationAttributeList get_ImplementationAttributeList();
    public abstract virtual IMarshalSpec get_Marshal();
    public abstract virtual IPredefinedMethodAttributeList get_MethodAttributeList();
    public abstract virtual IPresentableName get_Name();
    public abstract virtual ITypeUsage get_ReturnType();
    public abstract virtual ISignatureDef get_Signature();
    public abstract virtual ICallConvention SetCallConvention(ICallConvention param);
    public abstract virtual IGenericParameterDeclarationList SetGenericParameterDeclarationList(IGenericParameterDeclarationList param);
    public abstract virtual IImplementationAttributeList SetImplementationAttributeList(IImplementationAttributeList param);
    public abstract virtual IMarshalSpec SetMarshal(IMarshalSpec param);
    public abstract virtual IPredefinedMethodAttributeList SetMethodAttributeList(IPredefinedMethodAttributeList param);
    public abstract virtual IPresentableName SetName(IPresentableName param);
    public abstract virtual ITypeUsage SetReturnType(ITypeUsage param);
    public abstract virtual ISignatureDef SetSignature(ISignatureDef param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IMethodReferenceName {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IMethodScalarType {
    public ITokenNode Asterisk { get; }
    public ICallConvention CallConvention { get; }
    public ITokenNode MethodKeyword { get; }
    public ISignatureDef Signature { get; }
    public ITypeUsage Type { get; }
    public abstract virtual ITokenNode get_Asterisk();
    public abstract virtual ICallConvention get_CallConvention();
    public abstract virtual ITokenNode get_MethodKeyword();
    public abstract virtual ISignatureDef get_Signature();
    public abstract virtual ITypeUsage get_Type();
    public abstract virtual ICallConvention SetCallConvention(ICallConvention param);
    public abstract virtual ISignatureDef SetSignature(ISignatureDef param);
    public abstract virtual ITypeUsage SetType(ITypeUsage param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IMethodScopeBlock {
    public TreeNodeCollection`1<ICodeLabel> CodeLabels { get; }
    public TreeNodeEnumerable`1<ICodeLabel> CodeLabelsEnumerable { get; }
    public TreeNodeCollection`1<ICompControl> CompControls { get; }
    public TreeNodeEnumerable`1<ICompControl> CompControlsEnumerable { get; }
    public TreeNodeCollection`1<ISehBlock> ExceptionHandlingBlocks { get; }
    public TreeNodeEnumerable`1<ISehBlock> ExceptionHandlingBlocksEnumerable { get; }
    public TreeNodeCollection`1<IExternSource> ExternSources { get; }
    public TreeNodeEnumerable`1<IExternSource> ExternSourcesEnumerable { get; }
    public TreeNodeCollection`1<IInstruction> Instructions { get; }
    public TreeNodeEnumerable`1<IInstruction> InstructionsEnumerable { get; }
    public ITokenNode LBrace { get; }
    public TreeNodeCollection`1<ILocalVariablesDeclaration> LocalVariablesDeclarations { get; }
    public TreeNodeEnumerable`1<ILocalVariablesDeclaration> LocalVariablesDeclarationsEnumerable { get; }
    public TreeNodeCollection`1<IILTreeNode> Members { get; }
    public TreeNodeEnumerable`1<IILTreeNode> MembersEnumerable { get; }
    public ITokenNode RBrace { get; }
    public TreeNodeCollection`1<ISequrityDeclaration> SecurityDeclarations { get; }
    public TreeNodeEnumerable`1<ISequrityDeclaration> SecurityDeclarationsEnumerable { get; }
    public abstract virtual TreeNodeCollection`1<ICodeLabel> get_CodeLabels();
    public abstract virtual TreeNodeEnumerable`1<ICodeLabel> get_CodeLabelsEnumerable();
    public abstract virtual TreeNodeCollection`1<ICompControl> get_CompControls();
    public abstract virtual TreeNodeEnumerable`1<ICompControl> get_CompControlsEnumerable();
    public abstract virtual TreeNodeCollection`1<ISehBlock> get_ExceptionHandlingBlocks();
    public abstract virtual TreeNodeEnumerable`1<ISehBlock> get_ExceptionHandlingBlocksEnumerable();
    public abstract virtual TreeNodeCollection`1<IExternSource> get_ExternSources();
    public abstract virtual TreeNodeEnumerable`1<IExternSource> get_ExternSourcesEnumerable();
    public abstract virtual TreeNodeCollection`1<IInstruction> get_Instructions();
    public abstract virtual TreeNodeEnumerable`1<IInstruction> get_InstructionsEnumerable();
    public abstract virtual ITokenNode get_LBrace();
    public abstract virtual TreeNodeCollection`1<ILocalVariablesDeclaration> get_LocalVariablesDeclarations();
    public abstract virtual TreeNodeEnumerable`1<ILocalVariablesDeclaration> get_LocalVariablesDeclarationsEnumerable();
    public abstract virtual TreeNodeCollection`1<IILTreeNode> get_Members();
    public abstract virtual TreeNodeEnumerable`1<IILTreeNode> get_MembersEnumerable();
    public abstract virtual ITokenNode get_RBrace();
    public abstract virtual TreeNodeCollection`1<ISequrityDeclaration> get_SecurityDeclarations();
    public abstract virtual TreeNodeEnumerable`1<ISequrityDeclaration> get_SecurityDeclarationsEnumerable();
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ImplementationAttributeListNavigator : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.ImplementationMethodDeclarationShortNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IImplementationMethodDeclarationShort GetByCallConvention(ICallConvention param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IImplementationMethodDeclarationShort GetByMethodName(IMethodReferenceName param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IImplementationMethodDeclarationShort GetBySignature(ISignatureDef param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IImplementationMethodDeclarationShort GetByType(ITypeUsage param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IImplementationMethodDeclarationShort GetByTypeSpec(ITypeSpec param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.INameValuePair {
    public ITokenNode Eq { get; }
    public ITokenNode Name { get; }
    public ITokenNode Value { get; }
    public abstract virtual ITokenNode get_Eq();
    public abstract virtual ITokenNode get_Name();
    public abstract virtual ITokenNode get_Value();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.INativeScalarType {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.INativeType {
    public TreeNodeCollection`1<INativeTypeArraySpecification> ArraySpecifications { get; }
    public TreeNodeEnumerable`1<INativeTypeArraySpecification> ArraySpecificationsEnumerable { get; }
    public INativeScalarType ScalarType { get; }
    public abstract virtual TreeNodeCollection`1<INativeTypeArraySpecification> get_ArraySpecifications();
    public abstract virtual TreeNodeEnumerable`1<INativeTypeArraySpecification> get_ArraySpecificationsEnumerable();
    public abstract virtual INativeScalarType get_ScalarType();
    public abstract virtual INativeScalarType SetScalarType(INativeScalarType param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.INativeTypeArraySpecification {
    public ITokenNode Bound1 { get; }
    public ITokenNode Bound2 { get; }
    public TreeNodeCollection`1<ITokenNode> LBracket { get; }
    public TreeNodeEnumerable`1<ITokenNode> LBracketEnumerable { get; }
    public ITokenNode Plus { get; }
    public TreeNodeCollection`1<ITokenNode> RBracket { get; }
    public TreeNodeEnumerable`1<ITokenNode> RBracketEnumerable { get; }
    public abstract virtual ITokenNode get_Bound1();
    public abstract virtual ITokenNode get_Bound2();
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_LBracket();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_LBracketEnumerable();
    public abstract virtual ITokenNode get_Plus();
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_RBracket();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_RBracketEnumerable();
}
public static class JetBrains.ReSharper.Psi.IL.Tree.InstanceConstructorNameNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.InstanceConstructorReferenceNameNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstanceConstructorReferenceName GetByName(IInstanceConstructorName param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.InstructionBranchTargetNavigator : object {
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.IL.Tree.InstructionEx : object {
    [ExtensionAttribute]
public static bool IsFunctionExit(IInstruction instruction);
    [ExtensionAttribute]
public static bool IsLoc(IInstruction instruction);
    [ExtensionAttribute]
public static bool IsArg(IInstruction instruction);
    [ExtensionAttribute]
public static int GetIndex(IInstruction instruction);
    [ExtensionAttribute]
private static int GetLocNoneIndex(IInstruction instruction);
    [ExtensionAttribute]
private static int GetArgNoneIndex(IInstruction instruction);
    [ExtensionAttribute]
private static bool IsLocVar(IInstruction instruction);
    [ExtensionAttribute]
private static bool IsArgVar(IInstruction instruction);
    [ExtensionAttribute]
private static int Find(IOpcode opcode, TokenNodeType[] types);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.InstructionFieldNavigator : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.InstructionFieldParameterNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstructionFieldParameter GetByFieldName(IFieldReferenceName param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstructionFieldParameter GetByType(ITypeUsage param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstructionFieldParameter GetByTypeSpec(ITypeSpecWithDoubleColon param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.InstructionI8Navigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.InstructionINavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.InstructionMethodNavigator : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.InstructionMethodParameterNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstructionMethodParameter GetByCallConvention(ICallConvention param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstructionMethodParameter GetByGenericArgumentList(IGenericArgumentList param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstructionMethodParameter GetByMethodName(IMethodReferenceName param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstructionMethodParameter GetBySignature(ISignatureDef param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstructionMethodParameter GetByType(ITypeUsage param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstructionMethodParameter GetByTypeSpec(ITypeSpecWithDoubleColon param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.InstructionNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstruction GetByBytes(IBlob param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstruction GetByCallConvention(ICallConvention param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstruction GetByData(IBlob param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstruction GetByField(IInstructionFieldParameter param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstruction GetByInstructionBranchTarget(IInstructionBranchTarget param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstruction GetByInstructionField(IInstructionField param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstruction GetByInstructionI(IInstructionI param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstruction GetByInstructionI8(IInstructionI8 param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstruction GetByInstructionMethod(IInstructionMethod param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstruction GetByInstructionNone(IInstructionNone param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstruction GetByInstructionR(IInstructionR param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstruction GetByInstructionSig(IInstructionSig param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstruction GetByInstructionString(IInstructionString param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstruction GetByInstructionSwitch(IInstructionSwitch param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstruction GetByInstructionTok(IInstructionTok param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstruction GetByInstructionType(IInstructionType param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstruction GetByInstructionVar(IInstructionVar param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstruction GetByMethod(IInstructionMethodParameter param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstruction GetByOwner(IOwnerType param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstruction GetBySignature(ISignatureDef param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstruction GetByStrings(ICompQstring param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstruction GetByTarget(ITargetLabel param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstruction GetByTargetLabelList(ITargetLabelList param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstruction GetByType(ITypeUsage param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstruction GetByTypeSpec(ITypeSpec param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IInstruction GetByVariableOrArgumentName(IIdentifier param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.InstructionNoneNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.InstructionRNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.InstructionSigNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.InstructionStringNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.InstructionSwitchNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.InstructionTokNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.InstructionTypeNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.InstructionVarNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.IntInitializerNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.IntOrWildcardNavigator : object {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IOpcode {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IOwnerType {
    public IMemberRef MemberRef { get; }
    public ITypeSpec TypeSpec { get; }
    public abstract virtual IMemberRef get_MemberRef();
    public abstract virtual ITypeSpec get_TypeSpec();
    public abstract virtual IMemberRef SetMemberRef(IMemberRef param);
    public abstract virtual ITypeSpec SetTypeSpec(ITypeSpec param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IParameter {
    public IMarshalSpec Marshal { get; }
    public IIdentifier Name { get; }
    public IParameterAttributeList ParameterAttributeList { get; }
    public ITokenNode Tridot { get; }
    public ITypeUsage Type { get; }
    public abstract virtual IMarshalSpec get_Marshal();
    public abstract virtual IIdentifier get_Name();
    public abstract virtual IParameterAttributeList get_ParameterAttributeList();
    public abstract virtual ITokenNode get_Tridot();
    public abstract virtual ITypeUsage get_Type();
    public abstract virtual IMarshalSpec SetMarshal(IMarshalSpec param);
    public abstract virtual IIdentifier SetName(IIdentifier param);
    public abstract virtual IParameterAttributeList SetParameterAttributeList(IParameterAttributeList param);
    public abstract virtual ITypeUsage SetType(ITypeUsage param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IParameterAttribute {
    public ITokenNode BitMask { get; }
    public ITokenNode Keyword { get; }
    public TreeNodeCollection`1<ITokenNode> LBracket { get; }
    public TreeNodeEnumerable`1<ITokenNode> LBracketEnumerable { get; }
    public TreeNodeCollection`1<ITokenNode> RBracket { get; }
    public TreeNodeEnumerable`1<ITokenNode> RBracketEnumerable { get; }
    public abstract virtual ITokenNode get_BitMask();
    public abstract virtual ITokenNode get_Keyword();
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_LBracket();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_LBracketEnumerable();
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_RBracket();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_RBracketEnumerable();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IParameterAttributeList {
    public TreeNodeCollection`1<IParameterAttribute> Attributes { get; }
    public TreeNodeEnumerable`1<IParameterAttribute> AttributesEnumerable { get; }
    public abstract virtual TreeNodeCollection`1<IParameterAttribute> get_Attributes();
    public abstract virtual TreeNodeEnumerable`1<IParameterAttribute> get_AttributesEnumerable();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IPermissionDeclaration {
    public TreeNodeCollection`1<ITokenNode> Commas { get; }
    public TreeNodeEnumerable`1<ITokenNode> CommasEnumerable { get; }
    public ITokenNode LParenth { get; }
    public TreeNodeCollection`1<INameValuePair> NameValuePairs { get; }
    public TreeNodeEnumerable`1<INameValuePair> NameValuePairsEnumerable { get; }
    public ITokenNode PermissionKeyword { get; }
    public ITokenNode RParenth { get; }
    public ITypeReference TypeReference { get; }
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_Commas();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_CommasEnumerable();
    public abstract virtual ITokenNode get_LParenth();
    public abstract virtual TreeNodeCollection`1<INameValuePair> get_NameValuePairs();
    public abstract virtual TreeNodeEnumerable`1<INameValuePair> get_NameValuePairsEnumerable();
    public abstract virtual ITokenNode get_PermissionKeyword();
    public abstract virtual ITokenNode get_RParenth();
    public abstract virtual ITypeReference get_TypeReference();
    public abstract virtual ITypeReference SetTypeReference(ITypeReference param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IPermissionSetBody {
    public ITokenNode LBrace { get; }
    public ITokenNode RBrace { get; }
    public abstract virtual ITokenNode get_LBrace();
    public abstract virtual ITokenNode get_RBrace();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IPermissionSetDeclaration {
    public ITokenNode Eq { get; }
    public IPermissionSetBody NewStyleBody { get; }
    public IBlob OldStyleBlob { get; }
    public ITokenNode PermissionSetKeyword { get; }
    public abstract virtual ITokenNode get_Eq();
    public abstract virtual IPermissionSetBody get_NewStyleBody();
    public abstract virtual IBlob get_OldStyleBlob();
    public abstract virtual ITokenNode get_PermissionSetKeyword();
    public abstract virtual IPermissionSetBody SetNewStyleBody(IPermissionSetBody param);
    public abstract virtual IBlob SetOldStyleBlob(IBlob param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IPinnedType {
    public ITokenNode PinnedKeyword { get; }
    public abstract virtual ITokenNode get_PinnedKeyword();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IPInvokeAttributeList {
    public TreeNodeCollection`1<ITokenNode> Attributes { get; }
    public TreeNodeEnumerable`1<ITokenNode> AttributesEnumerable { get; }
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_Attributes();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_AttributesEnumerable();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IPInvokeSpecification {
    public ITokenNode AliasName { get; }
    public ITokenNode AsKeyword { get; }
    public ITokenNode LParenth { get; }
    public ITokenNode Name { get; }
    public IPInvokeAttributeList PInvokeAttributeList { get; }
    public ITokenNode PInvokeImplKeyword { get; }
    public ITokenNode RParenth { get; }
    public abstract virtual ITokenNode get_AliasName();
    public abstract virtual ITokenNode get_AsKeyword();
    public abstract virtual ITokenNode get_LParenth();
    public abstract virtual ITokenNode get_Name();
    public abstract virtual IPInvokeAttributeList get_PInvokeAttributeList();
    public abstract virtual ITokenNode get_PInvokeImplKeyword();
    public abstract virtual ITokenNode get_RParenth();
    public abstract virtual IPInvokeAttributeList SetPInvokeAttributeList(IPInvokeAttributeList param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IPredefinedFieldAttributeList {
    public TreeNodeCollection`1<IILTreeNode> Attributes { get; }
    public TreeNodeEnumerable`1<IILTreeNode> AttributesEnumerable { get; }
    public abstract virtual TreeNodeCollection`1<IILTreeNode> get_Attributes();
    public abstract virtual TreeNodeEnumerable`1<IILTreeNode> get_AttributesEnumerable();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IPredefinedMethodAttributeList {
    public TreeNodeCollection`1<IILTreeNode> Attributes { get; }
    public TreeNodeEnumerable`1<IILTreeNode> AttributesEnumerable { get; }
    public abstract virtual TreeNodeCollection`1<IILTreeNode> get_Attributes();
    public abstract virtual TreeNodeEnumerable`1<IILTreeNode> get_AttributesEnumerable();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IPredefinedScalarType {
    public ITokenNode NativeKeyword { get; }
    public ITokenNode TypeKeyword { get; }
    public ITokenNode UnsignedKeyword { get; }
    public abstract virtual ITokenNode get_NativeKeyword();
    public abstract virtual ITokenNode get_TypeKeyword();
    public abstract virtual ITokenNode get_UnsignedKeyword();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IPresentableName {
    public string ShortName { get; }
    public string FullName { get; }
    public string PresentationName { get; }
    public bool ContainsQuotedStrings { get; }
    public abstract virtual string get_ShortName();
    public abstract virtual string get_FullName();
    public abstract virtual string get_PresentationName();
    public abstract virtual bool get_ContainsQuotedStrings();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IPropertyBody {
    public TreeNodeCollection`1<ICustomAttribute> Attributes { get; }
    public TreeNodeEnumerable`1<ICustomAttribute> AttributesEnumerable { get; }
    public TreeNodeCollection`1<ICompControl> CompControls { get; }
    public TreeNodeEnumerable`1<ICompControl> CompControlsEnumerable { get; }
    public TreeNodeCollection`1<IExternSource> ExternSources { get; }
    public TreeNodeEnumerable`1<IExternSource> ExternSourcesEnumerable { get; }
    public ITokenNode LBrace { get; }
    public TreeNodeCollection`1<IILPropertyMember> Members { get; }
    public TreeNodeEnumerable`1<IILPropertyMember> MembersEnumerable { get; }
    public ITokenNode RBrace { get; }
    public abstract virtual TreeNodeCollection`1<ICustomAttribute> get_Attributes();
    public abstract virtual TreeNodeEnumerable`1<ICustomAttribute> get_AttributesEnumerable();
    public abstract virtual TreeNodeCollection`1<ICompControl> get_CompControls();
    public abstract virtual TreeNodeEnumerable`1<ICompControl> get_CompControlsEnumerable();
    public abstract virtual TreeNodeCollection`1<IExternSource> get_ExternSources();
    public abstract virtual TreeNodeEnumerable`1<IExternSource> get_ExternSourcesEnumerable();
    public abstract virtual ITokenNode get_LBrace();
    public abstract virtual TreeNodeCollection`1<IILPropertyMember> get_Members();
    public abstract virtual TreeNodeEnumerable`1<IILPropertyMember> get_MembersEnumerable();
    public abstract virtual ITokenNode get_RBrace();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IPropertyHeader {
    public ICallConvention CallConvention { get; }
    public IIdentifier Name { get; }
    public ISpecialnameAttributeList PropertyAttributeList { get; }
    public ISignatureDef Signature { get; }
    public ITypeUsage Type { get; }
    public abstract virtual ICallConvention get_CallConvention();
    public abstract virtual IIdentifier get_Name();
    public abstract virtual ISpecialnameAttributeList get_PropertyAttributeList();
    public abstract virtual ISignatureDef get_Signature();
    public abstract virtual ITypeUsage get_Type();
    public abstract virtual ICallConvention SetCallConvention(ICallConvention param);
    public abstract virtual IIdentifier SetName(IIdentifier param);
    public abstract virtual ISpecialnameAttributeList SetPropertyAttributeList(ISpecialnameAttributeList param);
    public abstract virtual ISignatureDef SetSignature(ISignatureDef param);
    public abstract virtual ITypeUsage SetType(ITypeUsage param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IQualifiedName {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IQualifiedNameReference {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IReferenceName {
    public ITokenNode Div { get; }
    public abstract virtual ITokenNode get_Div();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IReferenceNameReference {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IScalarType {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.ISehBlock {
    public TreeNodeCollection`1<ISehClause> SehClauses { get; }
    public TreeNodeEnumerable`1<ISehClause> SehClausesEnumerable { get; }
    public ITryBlock TryBlock { get; }
    public abstract virtual TreeNodeCollection`1<ISehClause> get_SehClauses();
    public abstract virtual TreeNodeEnumerable`1<ISehClause> get_SehClausesEnumerable();
    public abstract virtual ITryBlock get_TryBlock();
    public abstract virtual ITryBlock SetTryBlock(ITryBlock param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.ISehClause {
    public ICatchClause CatchClause { get; }
    public IFaultClause FaultClause { get; }
    public IFilterClause FilterClause { get; }
    public IFinallyClause FinallyClause { get; }
    public IHandlerBlock HandlerBlock { get; }
    public abstract virtual ICatchClause get_CatchClause();
    public abstract virtual IFaultClause get_FaultClause();
    public abstract virtual IFilterClause get_FilterClause();
    public abstract virtual IFinallyClause get_FinallyClause();
    public abstract virtual IHandlerBlock get_HandlerBlock();
    public abstract virtual ICatchClause SetCatchClause(ICatchClause param);
    public abstract virtual IFaultClause SetFaultClause(IFaultClause param);
    public abstract virtual IFilterClause SetFilterClause(IFilterClause param);
    public abstract virtual IFinallyClause SetFinallyClause(IFinallyClause param);
    public abstract virtual IHandlerBlock SetHandlerBlock(IHandlerBlock param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.ISequrityDeclaration {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.ISignatureDef {
    public TreeNodeCollection`1<ITokenNode> Commas { get; }
    public TreeNodeEnumerable`1<ITokenNode> CommasEnumerable { get; }
    public ITokenNode LParenth { get; }
    public TreeNodeCollection`1<IParameter> Parameters { get; }
    public TreeNodeEnumerable`1<IParameter> ParametersEnumerable { get; }
    public ITokenNode RParenth { get; }
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_Commas();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_CommasEnumerable();
    public abstract virtual ITokenNode get_LParenth();
    public abstract virtual TreeNodeCollection`1<IParameter> get_Parameters();
    public abstract virtual TreeNodeEnumerable`1<IParameter> get_ParametersEnumerable();
    public abstract virtual ITokenNode get_RParenth();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.ISpecialnameAttributeList {
    public TreeNodeCollection`1<ITokenNode> Attributes { get; }
    public TreeNodeEnumerable`1<ITokenNode> AttributesEnumerable { get; }
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_Attributes();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_AttributesEnumerable();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IStaticConstructorName {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.ITargetLabel {
    public ITokenNode Minus { get; }
    public ITokenNode Offset { get; }
    public abstract virtual ITokenNode get_Minus();
    public abstract virtual ITokenNode get_Offset();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.ITargetLabelList {
    public TreeNodeCollection`1<ITokenNode> Commas { get; }
    public TreeNodeEnumerable`1<ITokenNode> CommasEnumerable { get; }
    public ITokenNode LParenth { get; }
    public ITokenNode RParenth { get; }
    public TreeNodeCollection`1<ITargetLabel> TargetLabels { get; }
    public TreeNodeEnumerable`1<ITargetLabel> TargetLabelsEnumerable { get; }
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_Commas();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_CommasEnumerable();
    public abstract virtual ITokenNode get_LParenth();
    public abstract virtual ITokenNode get_RParenth();
    public abstract virtual TreeNodeCollection`1<ITargetLabel> get_TargetLabels();
    public abstract virtual TreeNodeEnumerable`1<ITargetLabel> get_TargetLabelsEnumerable();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.ITryBlock {
    public ITokenNode DotTryKeyword { get; }
    public IFromToBlock FromToBlock { get; }
    public IMethodScopeBlock ScopeBlock { get; }
    public abstract virtual ITokenNode get_DotTryKeyword();
    public abstract virtual IFromToBlock get_FromToBlock();
    public abstract virtual IMethodScopeBlock get_ScopeBlock();
    public abstract virtual IFromToBlock SetFromToBlock(IFromToBlock param);
    public abstract virtual IMethodScopeBlock SetScopeBlock(IMethodScopeBlock param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.ITypeMemberReferenceName {
    public IPresentableName Name { get; }
    [CanBeNullAttribute]
public ITypeMemberUsage TypeMemberUsage { get; }
    public abstract virtual IPresentableName get_Name();
    public abstract virtual IPresentableName SetName(IPresentableName param);
    public abstract virtual ITypeMemberUsage get_TypeMemberUsage();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.ITypeMemberUsage {
    public IILTreeNode TypeSpec { get; }
    [NotNullAttribute]
public string MemberName { get; }
    [NotNullAttribute]
public ITypeMemberReferenceName MemberReferenceName { get; }
    [CanBeNullAttribute]
public ITypeSpec OwnerType { get; }
    public int GenericArgumentsCount { get; }
    public ITypeUsage Type { get; }
    [CanBeNullAttribute]
public ISignatureDef Signature { get; }
    public MemberKind Kind { get; }
    public abstract virtual IILTreeNode get_TypeSpec();
    public abstract virtual IILTreeNode SetTypeSpec(IILTreeNode param);
    public abstract virtual string get_MemberName();
    public abstract virtual ITypeMemberReferenceName get_MemberReferenceName();
    public abstract virtual ITypeSpec get_OwnerType();
    public abstract virtual int get_GenericArgumentsCount();
    public abstract virtual ITypeUsage get_Type();
    public abstract virtual ISignatureDef get_Signature();
    public abstract virtual MemberKind get_Kind();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.ITypeModifier {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.ITypeReference {
    public IReferenceName ReferenceName { get; }
    public ITypeResolutionScope ResolutionScope { get; }
    public abstract virtual IReferenceName get_ReferenceName();
    public abstract virtual ITypeResolutionScope get_ResolutionScope();
    public abstract virtual IReferenceName SetReferenceName(IReferenceName param);
    public abstract virtual ITypeResolutionScope SetResolutionScope(ITypeResolutionScope param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.ITypeResolutionScope {
    public ITokenNode DotModuleKeyword { get; }
    public TreeNodeCollection`1<ITokenNode> LBracket { get; }
    public TreeNodeEnumerable`1<ITokenNode> LBracketEnumerable { get; }
    public IQualifiedName QualifiedName { get; }
    public TreeNodeCollection`1<ITokenNode> RBracket { get; }
    public TreeNodeEnumerable`1<ITokenNode> RBracketEnumerable { get; }
    public abstract virtual ITokenNode get_DotModuleKeyword();
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_LBracket();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_LBracketEnumerable();
    public abstract virtual IQualifiedName get_QualifiedName();
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_RBracket();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_RBracketEnumerable();
    public abstract virtual IQualifiedName SetQualifiedName(IQualifiedName param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.ITypeSpec {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.ITypeSpecWithDoubleColon {
    public ITokenNode DoubleColon { get; }
    public ITypeSpec TypeSpec { get; }
    public abstract virtual ITokenNode get_DoubleColon();
    public abstract virtual ITypeSpec get_TypeSpec();
    public abstract virtual ITypeSpec SetTypeSpec(ITypeSpec param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.ITypeUsage {
    public IScalarType ScalarType { get; }
    public TreeNodeCollection`1<ITypeModifier> TypeModifiers { get; }
    public TreeNodeEnumerable`1<ITypeModifier> TypeModifiersEnumerable { get; }
    public abstract virtual IScalarType get_ScalarType();
    public abstract virtual TreeNodeCollection`1<ITypeModifier> get_TypeModifiers();
    public abstract virtual TreeNodeEnumerable`1<ITypeModifier> get_TypeModifiersEnumerable();
    public abstract virtual IScalarType SetScalarType(IScalarType param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.ITypeWithReferenceBase {
    [CanBeNullAttribute]
public IReference Reference { get; }
    [CanBeNullAttribute]
public abstract virtual IPsiModule GetScopePsiModule();
    public abstract virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public abstract virtual IReference get_Reference();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IUnmanagedPointerType {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IUserScalarType {
    public ITokenNode ClassKeyword { get; }
    public ITypeReference TypeReference { get; }
    public ITokenNode ValuetypeKeyword { get; }
    public abstract virtual ITokenNode get_ClassKeyword();
    public abstract virtual ITypeReference get_TypeReference();
    public abstract virtual ITokenNode get_ValuetypeKeyword();
    public abstract virtual ITypeReference SetTypeReference(ITypeReference param);
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IVariantType {
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IVtentry {
    public ITokenNode Colon { get; }
    public ITokenNode DotVtentryKeyword { get; }
    public ITokenNode EntryNumber { get; }
    public ITokenNode SlotNumber { get; }
    public abstract virtual ITokenNode get_Colon();
    public abstract virtual ITokenNode get_DotVtentryKeyword();
    public abstract virtual ITokenNode get_EntryNumber();
    public abstract virtual ITokenNode get_SlotNumber();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IVtfixupAttribute {
    public ITokenNode Keyword { get; }
    public abstract virtual ITokenNode get_Keyword();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IVtfixupAttributeList {
    public TreeNodeCollection`1<IVtfixupAttribute> Attributes { get; }
    public TreeNodeEnumerable`1<IVtfixupAttribute> AttributesEnumerable { get; }
    public abstract virtual TreeNodeCollection`1<IVtfixupAttribute> get_Attributes();
    public abstract virtual TreeNodeEnumerable`1<IVtfixupAttribute> get_AttributesEnumerable();
}
public interface JetBrains.ReSharper.Psi.IL.Tree.IZeroinit {
    public ITokenNode DotZeroinitKeyword { get; }
    public abstract virtual ITokenNode get_DotZeroinitKeyword();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.LocalVariableNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ILocalVariable GetByName(IIdentifier param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ILocalVariable GetByType(ITypeUsage param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.LocalVariablesDeclarationNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ILocalVariablesDeclaration GetByLocalVariable(ILocalVariable param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ManagedPointerTypeNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.MarshalSpecNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMarshalSpec GetByNativeType(INativeType param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.MaxstackNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.MdtokenNavigator : object {
}
public enum JetBrains.ReSharper.Psi.IL.Tree.MemberKind : Enum {
    public int value__;
    public static MemberKind Field;
    public static MemberKind Method;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.MemberRefNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMemberRef GetByCallConvention(ICallConvention param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMemberRef GetByFieldName(IFieldReferenceName param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMemberRef GetByMethodName(IMethodReferenceName param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMemberRef GetBySignature(ISignatureDef param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMemberRef GetByType(ITypeUsage param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMemberRef GetByTypeSpec(ITypeSpecWithDoubleColon param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.MethodHeaderNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMethodHeader GetByCallConvention(ICallConvention param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMethodHeader GetByGenericParameterDeclarationList(IGenericParameterDeclarationList param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMethodHeader GetByImplementationAttributeList(IImplementationAttributeList param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMethodHeader GetByMarshal(IMarshalSpec param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMethodHeader GetByMethodAttributeList(IPredefinedMethodAttributeList param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMethodHeader GetByName(IPresentableName param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMethodHeader GetByReturnType(ITypeUsage param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMethodHeader GetBySignature(ISignatureDef param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.MethodReferenceNameNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMethodReferenceName GetByName(IPresentableName param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.MethodScalarTypeNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMethodScalarType GetByCallConvention(ICallConvention param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMethodScalarType GetBySignature(ISignatureDef param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMethodScalarType GetByType(ITypeUsage param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.MethodScopeBlockNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMethodScopeBlock GetByCodeLabel(ICodeLabel param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMethodScopeBlock GetByCompControl(ICompControl param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMethodScopeBlock GetByExceptionHandlingBlock(ISehBlock param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMethodScopeBlock GetByExternSource(IExternSource param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMethodScopeBlock GetByInstruction(IInstruction param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMethodScopeBlock GetByLocalVariablesDeclaration(ILocalVariablesDeclaration param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMethodScopeBlock GetBySecurityDeclaration(ISequrityDeclaration param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.NameValuePairNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.NativeScalarTypeNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.NativeTypeArraySpecificationNavigator : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.NativeTypeNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static INativeType GetByArraySpecification(INativeTypeArraySpecification param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static INativeType GetByScalarType(INativeScalarType param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.OpcodeNavigator : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.OwnerTypeNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IOwnerType GetByMemberRef(IMemberRef param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IOwnerType GetByTypeSpec(ITypeSpec param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ParameterAttributeListNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IParameterAttributeList GetByAttribute(IParameterAttribute param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ParameterAttributeNavigator : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.ParameterNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IParameter GetByMarshal(IMarshalSpec param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IParameter GetByName(IIdentifier param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IParameter GetByParameterAttributeList(IParameterAttributeList param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IParameter GetByType(ITypeUsage param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.PermissionDeclarationNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IPermissionDeclaration GetByNameValuePair(INameValuePair param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IPermissionDeclaration GetByTypeReference(ITypeReference param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.PermissionSetBodyNavigator : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.PermissionSetDeclarationNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IPermissionSetDeclaration GetByNewStyleBody(IPermissionSetBody param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IPermissionSetDeclaration GetByOldStyleBlob(IBlob param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.PinnedTypeNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.PInvokeAttributeListNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.PInvokeSpecificationNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IPInvokeSpecification GetByPInvokeAttributeList(IPInvokeAttributeList param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.PredefinedFieldAttributeListNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.PredefinedMethodAttributeListNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.PredefinedScalarTypeNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.PresentableNameNavigator : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.PropertyBodyNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IPropertyBody GetByAttribute(ICustomAttribute param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IPropertyBody GetByCompControl(ICompControl param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IPropertyBody GetByExternSource(IExternSource param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IPropertyBody GetByMember(IILPropertyMember param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.PropertyHeaderNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IPropertyHeader GetByCallConvention(ICallConvention param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IPropertyHeader GetByName(IIdentifier param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IPropertyHeader GetByPropertyAttributeList(ISpecialnameAttributeList param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IPropertyHeader GetBySignature(ISignatureDef param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IPropertyHeader GetByType(ITypeUsage param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.QualifiedNameNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IQualifiedName GetByIdentifier(IIdentifier param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IQualifiedName GetByQualifier(IQualifiedName param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.ReferenceNameNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IReferenceName GetByIdentifier(IIdentifier param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IReferenceName GetByQualifier(IReferenceName param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ScalarTypeNavigator : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.SehBlockNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ISehBlock GetBySehClause(ISehClause param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ISehBlock GetByTryBlock(ITryBlock param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.SehClauseNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ISehClause GetByCatchClause(ICatchClause param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ISehClause GetByFaultClause(IFaultClause param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ISehClause GetByFilterClause(IFilterClause param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ISehClause GetByFinallyClause(IFinallyClause param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ISehClause GetByHandlerBlock(IHandlerBlock param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.SequrityDeclarationNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.SignatureDefNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ISignatureDef GetByParameter(IParameter param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.SpecialnameAttributeListNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.StaticConstructorNameNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.TargetLabelListNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ITargetLabelList GetByTargetLabel(ITargetLabel param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.TargetLabelNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ITargetLabel GetByName(IIdentifier param);
}
public abstract class JetBrains.ReSharper.Psi.IL.Tree.TreeNodeVisitor : object {
    public virtual void VisitNode(ITreeNode node);
    public virtual void VisitArrayBound(IArrayBound arrayBoundParam);
    public virtual void VisitArrayType(IArrayType arrayTypeParam);
    public virtual void VisitBlob(IBlob blobParam);
    public virtual void VisitCallConvention(ICallConvention callConventionParam);
    public virtual void VisitCallConventionKind(ICallConventionKind callConventionKindParam);
    public virtual void VisitCatchClause(ICatchClause catchClauseParam);
    public virtual void VisitClassBody(IClassBody classBodyParam);
    public virtual void VisitClassExtendsClause(IClassExtendsClause classExtendsClauseParam);
    public virtual void VisitClassHeader(IClassHeader classHeaderParam);
    public virtual void VisitClassImplementsClause(IClassImplementsClause classImplementsClauseParam);
    public virtual void VisitClassModifierList(IClassModifierList classModifierListParam);
    public virtual void VisitClassName(IClassName classNameParam);
    public virtual void VisitCodeLabel(ICodeLabel codeLabelParam);
    public virtual void VisitCompControl(ICompControl compControlParam);
    public virtual void VisitCompQstring(ICompQstring compQstringParam);
    public virtual void VisitCompositeVariantType(ICompositeVariantType compositeVariantTypeParam);
    public virtual void VisitConstructorName(IConstructorName constructorNameParam);
    public virtual void VisitCustomAttribute(ICustomAttribute customAttributeParam);
    public virtual void VisitCustomModifierType(ICustomModifierType customModifierTypeParam);
    public virtual void VisitCustomType(ICustomType customTypeParam);
    public virtual void VisitDataDeclarationItem(IDataDeclarationItem dataDeclarationItemParam);
    public virtual void VisitDataLabel(IDataLabel dataLabelParam);
    public virtual void VisitEmitbyte(IEmitbyte emitbyteParam);
    public virtual void VisitEntrypoint(IEntrypoint entrypointParam);
    public virtual void VisitEventBody(IEventBody eventBodyParam);
    public virtual void VisitEventHeader(IEventHeader eventHeaderParam);
    [ObsoleteAttribute("There is no Node in PSI that directly implements exceptionType interface, so this visitor member will not be invoked")]
public virtual void VisitExceptionType(IExceptionType exceptionTypeParam);
    public virtual void VisitExport(IExport exportParam);
    public virtual void VisitExternSource(IExternSource externSourceParam);
    public virtual void VisitFaultClause(IFaultClause faultClauseParam);
    public virtual void VisitFieldByteOffset(IFieldByteOffset fieldByteOffsetParam);
    public virtual void VisitFieldInit(IFieldInit fieldInitParam);
    public virtual void VisitFieldReferenceName(IFieldReferenceName fieldReferenceNameParam);
    public virtual void VisitFilterClause(IFilterClause filterClauseParam);
    public virtual void VisitFinallyClause(IFinallyClause finallyClauseParam);
    public virtual void VisitFromToBlock(IFromToBlock fromToBlockParam);
    public virtual void VisitGenArity(IGenArity genArityParam);
    public virtual void VisitGenericArgumentList(IGenericArgumentList genericArgumentListParam);
    [ObsoleteAttribute("There are Nodes in PSI [genericScalarType] that directly implements genericParameter and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual void VisitGenericParameter(IGenericParameter genericParameterParam);
    public virtual void VisitGenericParameterAttributeList(IGenericParameterAttributeList genericParameterAttributeListParam);
    public virtual void VisitGenericParameterConstraintList(IGenericParameterConstraintList genericParameterConstraintListParam);
    public virtual void VisitGenericParameterDeclaration(IGenericParameterDeclaration genericParameterDeclarationParam);
    public virtual void VisitGenericParameterDeclarationList(IGenericParameterDeclarationList genericParameterDeclarationListParam);
    public virtual void VisitGenericParameterPointer(IGenericParameterPointer genericParameterPointerParam);
    public virtual void VisitGenericScalarType(IGenericScalarType genericScalarTypeParam);
    public virtual void VisitGenericType(IGenericType genericTypeParam);
    public virtual void VisitHandlerBlock(IHandlerBlock handlerBlockParam);
    public virtual void VisitILAccessorDeclaration(IILAccessorDeclaration iLAccessorDeclarationParam);
    public virtual void VisitILAddonDeclaration(IILAddonDeclaration iLAddonDeclarationParam);
    public virtual void VisitILAliasDeclaration(IILAliasDeclaration iLAliasDeclarationParam);
    public virtual void VisitILAssemblyAutodetection(IILAssemblyAutodetection iLAssemblyAutodetectionParam);
    public virtual void VisitILAssemblyCulture(IILAssemblyCulture iLAssemblyCultureParam);
    public virtual void VisitILAssemblyDeclaration(IILAssemblyDeclaration iLAssemblyDeclarationParam);
    public virtual void VisitILAssemblyHash(IILAssemblyHash iLAssemblyHashParam);
    public virtual void VisitILAssemblyHashAlgorithm(IILAssemblyHashAlgorithm iLAssemblyHashAlgorithmParam);
    [ObsoleteAttribute("There are Nodes in PSI [iLAssemblyCulture, iLAssemblyPublicKey, iLAssemblyVersion] that directly implements iLAssemblyProperty and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual void VisitILAssemblyProperty(IILAssemblyProperty iLAssemblyPropertyParam);
    public virtual void VisitILAssemblyPublicKey(IILAssemblyPublicKey iLAssemblyPublicKeyParam);
    public virtual void VisitILAssemblyPublicKeyToken(IILAssemblyPublicKeyToken iLAssemblyPublicKeyTokenParam);
    public virtual void VisitILAssemblyVersion(IILAssemblyVersion iLAssemblyVersionParam);
    public virtual void VisitILClassDeclaration(IILClassDeclaration iLClassDeclarationParam);
    public virtual void VisitILCorFlags(IILCorFlags iLCorFlagsParam);
    public virtual void VisitILDataDeclaration(IILDataDeclaration iLDataDeclarationParam);
    [ObsoleteAttribute("There are Nodes in PSI [iLClassDeclaration, iLLanguageDeclaration] that directly implements iLDeclaration and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual void VisitILDeclaration(IILDeclaration iLDeclarationParam);
    public virtual void VisitILEventDeclaration(IILEventDeclaration iLEventDeclarationParam);
    [ObsoleteAttribute("There are Nodes in PSI [iLLanguageDeclaration, iLOtherDeclaration] that directly implements iLEventMember and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual void VisitILEventMember(IILEventMember iLEventMemberParam);
    public virtual void VisitILExternAssemblyDeclaration(IILExternAssemblyDeclaration iLExternAssemblyDeclarationParam);
    [ObsoleteAttribute("There are Nodes in PSI [iLAssemblyCulture, iLAssemblyPublicKey, iLAssemblyVersion] that directly implements iLExternAssemblyProperty and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual void VisitILExternAssemblyProperty(IILExternAssemblyProperty iLExternAssemblyPropertyParam);
    public virtual void VisitILExternClassAssemblyProperty(IILExternClassAssemblyProperty iLExternClassAssemblyPropertyParam);
    public virtual void VisitILExternClassClassProperty(IILExternClassClassProperty iLExternClassClassPropertyParam);
    public virtual void VisitILExternClassDeclaration(IILExternClassDeclaration iLExternClassDeclarationParam);
    public virtual void VisitILExternClassFileProperty(IILExternClassFileProperty iLExternClassFilePropertyParam);
    public virtual void VisitILExternClassProperty(IILExternClassProperty iLExternClassPropertyParam);
    public virtual void VisitILExternModuleDeclaration(IILExternModuleDeclaration iLExternModuleDeclarationParam);
    public virtual void VisitILFieldDeclaration(IILFieldDeclaration iLFieldDeclarationParam);
    public virtual void VisitILFile(IILFile iLFileParam);
    public virtual void VisitILFileAlignmentDeclaration(IILFileAlignmentDeclaration iLFileAlignmentDeclarationParam);
    public virtual void VisitILFileDeclaration(IILFileDeclaration iLFileDeclarationParam);
    public virtual void VisitILFireDeclaration(IILFireDeclaration iLFireDeclarationParam);
    public virtual void VisitILForwardClassDeclaration(IILForwardClassDeclaration iLForwardClassDeclarationParam);
    public virtual void VisitILGetDeclaration(IILGetDeclaration iLGetDeclarationParam);
    public virtual void VisitILImageBaseDeclaration(IILImageBaseDeclaration iLImageBaseDeclarationParam);
    public virtual void VisitILInstanceLayoutDeclaration(IILInstanceLayoutDeclaration iLInstanceLayoutDeclarationParam);
    public virtual void VisitILInterfaceimplSpecification(IILInterfaceimplSpecification iLInterfaceimplSpecificationParam);
    public virtual void VisitILLabel(IILLabel iLLabelParam);
    public virtual void VisitILLanguageDeclaration(IILLanguageDeclaration iLLanguageDeclarationParam);
    public virtual void VisitILManifestAssemblyResource(IILManifestAssemblyResource iLManifestAssemblyResourceParam);
    public virtual void VisitILManifestFileResource(IILManifestFileResource iLManifestFileResourceParam);
    public virtual void VisitILManifestResource(IILManifestResource iLManifestResourceParam);
    public virtual void VisitILManifestResourceDeclaration(IILManifestResourceDeclaration iLManifestResourceDeclarationParam);
    public virtual void VisitILMethodDeclaration(IILMethodDeclaration iLMethodDeclarationParam);
    public virtual void VisitILMethodOverridingDeclarationFull(IILMethodOverridingDeclarationFull iLMethodOverridingDeclarationFullParam);
    public virtual void VisitILMethodOverridingDeclarationInClassFull(IILMethodOverridingDeclarationInClassFull iLMethodOverridingDeclarationInClassFullParam);
    public virtual void VisitILMethodOverridingDeclarationInClassShort(IILMethodOverridingDeclarationInClassShort iLMethodOverridingDeclarationInClassShortParam);
    public virtual void VisitILMethodOverridingDeclarationShort(IILMethodOverridingDeclarationShort iLMethodOverridingDeclarationShortParam);
    public virtual void VisitILMethodParamSpecification(IILMethodParamSpecification iLMethodParamSpecificationParam);
    public virtual void VisitILModuleDeclaration(IILModuleDeclaration iLModuleDeclarationParam);
    public virtual void VisitILMscorlibDeclaration(IILMscorlibDeclaration iLMscorlibDeclarationParam);
    public virtual void VisitILNamespaceBody(IILNamespaceBody iLNamespaceBodyParam);
    public virtual void VisitILNamespaceDeclaration(IILNamespaceDeclaration iLNamespaceDeclarationParam);
    public virtual void VisitILOtherDeclaration(IILOtherDeclaration iLOtherDeclarationParam);
    public virtual void VisitILParamTypeConstraintSpecification(IILParamTypeConstraintSpecification iLParamTypeConstraintSpecificationParam);
    public virtual void VisitILParamTypeSpecification(IILParamTypeSpecification iLParamTypeSpecificationParam);
    public virtual void VisitILPropertyDeclaration(IILPropertyDeclaration iLPropertyDeclarationParam);
    [ObsoleteAttribute("There are Nodes in PSI [iLLanguageDeclaration, iLOtherDeclaration] that directly implements iLPropertyMember and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual void VisitILPropertyMember(IILPropertyMember iLPropertyMemberParam);
    public virtual void VisitILRemoveonDeclaration(IILRemoveonDeclaration iLRemoveonDeclarationParam);
    public virtual void VisitILSetDeclaration(IILSetDeclaration iLSetDeclarationParam);
    public virtual void VisitILStackReserveDeclaration(IILStackReserveDeclaration iLStackReserveDeclarationParam);
    public virtual void VisitILSubsystem(IILSubsystem iLSubsystemParam);
    [ObsoleteAttribute("There are Nodes in PSI [iLClassDeclaration] that directly implements iLTypeMemberDeclaration and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual void VisitILTypeMemberDeclaration(IILTypeMemberDeclaration iLTypeMemberDeclarationParam);
    public virtual void VisitILTypelistDeclaration(IILTypelistDeclaration iLTypelistDeclarationParam);
    public virtual void VisitILVtfixupDeclaration(IILVtfixupDeclaration iLVtfixupDeclarationParam);
    public virtual void VisitIdentifier(IIdentifier identifierParam);
    public virtual void VisitIdentifierWithOwnerQualification(IIdentifierWithOwnerQualification identifierWithOwnerQualificationParam);
    public virtual void VisitIlQualifiedName(IIlQualifiedName ilQualifiedNameParam);
    [ObsoleteAttribute("There is no Node in PSI that directly implements ilReferenceOwner interface, so this visitor member will not be invoked")]
public virtual void VisitIlReferenceOwner(IIlReferenceOwner ilReferenceOwnerParam);
    public virtual void VisitImplementationAttributeList(IImplementationAttributeList implementationAttributeListParam);
    public virtual void VisitImplementationMethodDeclarationShort(IImplementationMethodDeclarationShort implementationMethodDeclarationShortParam);
    public virtual void VisitInstanceConstructorName(IInstanceConstructorName instanceConstructorNameParam);
    public virtual void VisitInstanceConstructorReferenceName(IInstanceConstructorReferenceName instanceConstructorReferenceNameParam);
    public virtual void VisitInstruction(IInstruction instructionParam);
    public virtual void VisitInstructionBranchTarget(IInstructionBranchTarget instructionBranchTargetParam);
    public virtual void VisitInstructionField(IInstructionField instructionFieldParam);
    public virtual void VisitInstructionFieldParameter(IInstructionFieldParameter instructionFieldParameterParam);
    public virtual void VisitInstructionI(IInstructionI instructionIParam);
    public virtual void VisitInstructionI8(IInstructionI8 instructionI8Param);
    public virtual void VisitInstructionMethod(IInstructionMethod instructionMethodParam);
    public virtual void VisitInstructionMethodParameter(IInstructionMethodParameter instructionMethodParameterParam);
    public virtual void VisitInstructionNone(IInstructionNone instructionNoneParam);
    public virtual void VisitInstructionR(IInstructionR instructionRParam);
    public virtual void VisitInstructionSig(IInstructionSig instructionSigParam);
    public virtual void VisitInstructionString(IInstructionString instructionStringParam);
    public virtual void VisitInstructionSwitch(IInstructionSwitch instructionSwitchParam);
    public virtual void VisitInstructionTok(IInstructionTok instructionTokParam);
    public virtual void VisitInstructionType(IInstructionType instructionTypeParam);
    public virtual void VisitInstructionVar(IInstructionVar instructionVarParam);
    public virtual void VisitIntInitializer(IIntInitializer intInitializerParam);
    public virtual void VisitIntOrWildcard(IIntOrWildcard intOrWildcardParam);
    public virtual void VisitLocalVariable(ILocalVariable localVariableParam);
    public virtual void VisitLocalVariablesDeclaration(ILocalVariablesDeclaration localVariablesDeclarationParam);
    public virtual void VisitManagedPointerType(IManagedPointerType managedPointerTypeParam);
    public virtual void VisitMarshalSpec(IMarshalSpec marshalSpecParam);
    public virtual void VisitMaxstack(IMaxstack maxstackParam);
    public virtual void VisitMdtoken(IMdtoken mdtokenParam);
    public virtual void VisitMemberRef(IMemberRef memberRefParam);
    public virtual void VisitMethodHeader(IMethodHeader methodHeaderParam);
    public virtual void VisitMethodReferenceName(IMethodReferenceName methodReferenceNameParam);
    public virtual void VisitMethodScalarType(IMethodScalarType methodScalarTypeParam);
    public virtual void VisitMethodScopeBlock(IMethodScopeBlock methodScopeBlockParam);
    public virtual void VisitNameValuePair(INameValuePair nameValuePairParam);
    public virtual void VisitNativeScalarType(INativeScalarType nativeScalarTypeParam);
    public virtual void VisitNativeType(INativeType nativeTypeParam);
    public virtual void VisitNativeTypeArraySpecification(INativeTypeArraySpecification nativeTypeArraySpecificationParam);
    public virtual void VisitOpcode(IOpcode opcodeParam);
    public virtual void VisitOwnerType(IOwnerType ownerTypeParam);
    public virtual void VisitPInvokeAttributeList(IPInvokeAttributeList pInvokeAttributeListParam);
    public virtual void VisitPInvokeSpecification(IPInvokeSpecification pInvokeSpecificationParam);
    public virtual void VisitParameter(IParameter parameterParam);
    public virtual void VisitParameterAttribute(IParameterAttribute parameterAttributeParam);
    public virtual void VisitParameterAttributeList(IParameterAttributeList parameterAttributeListParam);
    public virtual void VisitPermissionDeclaration(IPermissionDeclaration permissionDeclarationParam);
    public virtual void VisitPermissionSetBody(IPermissionSetBody permissionSetBodyParam);
    public virtual void VisitPermissionSetDeclaration(IPermissionSetDeclaration permissionSetDeclarationParam);
    public virtual void VisitPinnedType(IPinnedType pinnedTypeParam);
    public virtual void VisitPredefinedFieldAttributeList(IPredefinedFieldAttributeList predefinedFieldAttributeListParam);
    public virtual void VisitPredefinedMethodAttributeList(IPredefinedMethodAttributeList predefinedMethodAttributeListParam);
    public virtual void VisitPredefinedScalarType(IPredefinedScalarType predefinedScalarTypeParam);
    public virtual void VisitPresentableName(IPresentableName presentableNameParam);
    public virtual void VisitPropertyBody(IPropertyBody propertyBodyParam);
    public virtual void VisitPropertyHeader(IPropertyHeader propertyHeaderParam);
    public virtual void VisitQualifiedName(IQualifiedName qualifiedNameParam);
    public virtual void VisitReferenceName(IReferenceName referenceNameParam);
    [ObsoleteAttribute("There are Nodes in PSI [genericScalarType] that directly implements scalarType and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual void VisitScalarType(IScalarType scalarTypeParam);
    public virtual void VisitSehBlock(ISehBlock sehBlockParam);
    public virtual void VisitSehClause(ISehClause sehClauseParam);
    public virtual void VisitSequrityDeclaration(ISequrityDeclaration sequrityDeclarationParam);
    public virtual void VisitSignatureDef(ISignatureDef signatureDefParam);
    public virtual void VisitSpecialnameAttributeList(ISpecialnameAttributeList specialnameAttributeListParam);
    public virtual void VisitStaticConstructorName(IStaticConstructorName staticConstructorNameParam);
    public virtual void VisitTargetLabel(ITargetLabel targetLabelParam);
    public virtual void VisitTargetLabelList(ITargetLabelList targetLabelListParam);
    public virtual void VisitTryBlock(ITryBlock tryBlockParam);
    public virtual void VisitTypeMemberReferenceName(ITypeMemberReferenceName typeMemberReferenceNameParam);
    public virtual void VisitTypeMemberUsage(ITypeMemberUsage typeMemberUsageParam);
    public virtual void VisitTypeModifier(ITypeModifier typeModifierParam);
    public virtual void VisitTypeReference(ITypeReference typeReferenceParam);
    public virtual void VisitTypeResolutionScope(ITypeResolutionScope typeResolutionScopeParam);
    [ObsoleteAttribute("There are Nodes in PSI [typeReference] that directly implements typeSpec and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual void VisitTypeSpec(ITypeSpec typeSpecParam);
    public virtual void VisitTypeSpecWithDoubleColon(ITypeSpecWithDoubleColon typeSpecWithDoubleColonParam);
    public virtual void VisitTypeUsage(ITypeUsage typeUsageParam);
    [ObsoleteAttribute("There is no Node in PSI that directly implements typeWithReferenceBase interface, so this visitor member will not be invoked")]
public virtual void VisitTypeWithReferenceBase(ITypeWithReferenceBase typeWithReferenceBaseParam);
    public virtual void VisitUnmanagedPointerType(IUnmanagedPointerType unmanagedPointerTypeParam);
    public virtual void VisitUserScalarType(IUserScalarType userScalarTypeParam);
    public virtual void VisitVariantType(IVariantType variantTypeParam);
    public virtual void VisitVtentry(IVtentry vtentryParam);
    public virtual void VisitVtfixupAttribute(IVtfixupAttribute vtfixupAttributeParam);
    public virtual void VisitVtfixupAttributeList(IVtfixupAttributeList vtfixupAttributeListParam);
    public virtual void VisitZeroinit(IZeroinit zeroinitParam);
}
public abstract class JetBrains.ReSharper.Psi.IL.Tree.TreeNodeVisitor`1 : object {
    public virtual void VisitNode(ITreeNode node, TContext context);
    public virtual void VisitArrayBound(IArrayBound arrayBoundParam, TContext context);
    public virtual void VisitArrayType(IArrayType arrayTypeParam, TContext context);
    public virtual void VisitBlob(IBlob blobParam, TContext context);
    public virtual void VisitCallConvention(ICallConvention callConventionParam, TContext context);
    public virtual void VisitCallConventionKind(ICallConventionKind callConventionKindParam, TContext context);
    public virtual void VisitCatchClause(ICatchClause catchClauseParam, TContext context);
    public virtual void VisitClassBody(IClassBody classBodyParam, TContext context);
    public virtual void VisitClassExtendsClause(IClassExtendsClause classExtendsClauseParam, TContext context);
    public virtual void VisitClassHeader(IClassHeader classHeaderParam, TContext context);
    public virtual void VisitClassImplementsClause(IClassImplementsClause classImplementsClauseParam, TContext context);
    public virtual void VisitClassModifierList(IClassModifierList classModifierListParam, TContext context);
    public virtual void VisitClassName(IClassName classNameParam, TContext context);
    public virtual void VisitCodeLabel(ICodeLabel codeLabelParam, TContext context);
    public virtual void VisitCompControl(ICompControl compControlParam, TContext context);
    public virtual void VisitCompQstring(ICompQstring compQstringParam, TContext context);
    public virtual void VisitCompositeVariantType(ICompositeVariantType compositeVariantTypeParam, TContext context);
    public virtual void VisitConstructorName(IConstructorName constructorNameParam, TContext context);
    public virtual void VisitCustomAttribute(ICustomAttribute customAttributeParam, TContext context);
    public virtual void VisitCustomModifierType(ICustomModifierType customModifierTypeParam, TContext context);
    public virtual void VisitCustomType(ICustomType customTypeParam, TContext context);
    public virtual void VisitDataDeclarationItem(IDataDeclarationItem dataDeclarationItemParam, TContext context);
    public virtual void VisitDataLabel(IDataLabel dataLabelParam, TContext context);
    public virtual void VisitEmitbyte(IEmitbyte emitbyteParam, TContext context);
    public virtual void VisitEntrypoint(IEntrypoint entrypointParam, TContext context);
    public virtual void VisitEventBody(IEventBody eventBodyParam, TContext context);
    public virtual void VisitEventHeader(IEventHeader eventHeaderParam, TContext context);
    [ObsoleteAttribute("There is no Node in PSI that directly implements exceptionType interface, so this visitor member will not be invoked")]
public virtual void VisitExceptionType(IExceptionType exceptionTypeParam, TContext context);
    public virtual void VisitExport(IExport exportParam, TContext context);
    public virtual void VisitExternSource(IExternSource externSourceParam, TContext context);
    public virtual void VisitFaultClause(IFaultClause faultClauseParam, TContext context);
    public virtual void VisitFieldByteOffset(IFieldByteOffset fieldByteOffsetParam, TContext context);
    public virtual void VisitFieldInit(IFieldInit fieldInitParam, TContext context);
    public virtual void VisitFieldReferenceName(IFieldReferenceName fieldReferenceNameParam, TContext context);
    public virtual void VisitFilterClause(IFilterClause filterClauseParam, TContext context);
    public virtual void VisitFinallyClause(IFinallyClause finallyClauseParam, TContext context);
    public virtual void VisitFromToBlock(IFromToBlock fromToBlockParam, TContext context);
    public virtual void VisitGenArity(IGenArity genArityParam, TContext context);
    public virtual void VisitGenericArgumentList(IGenericArgumentList genericArgumentListParam, TContext context);
    [ObsoleteAttribute("There are Nodes in PSI [genericScalarType] that directly implements genericParameter and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual void VisitGenericParameter(IGenericParameter genericParameterParam, TContext context);
    public virtual void VisitGenericParameterAttributeList(IGenericParameterAttributeList genericParameterAttributeListParam, TContext context);
    public virtual void VisitGenericParameterConstraintList(IGenericParameterConstraintList genericParameterConstraintListParam, TContext context);
    public virtual void VisitGenericParameterDeclaration(IGenericParameterDeclaration genericParameterDeclarationParam, TContext context);
    public virtual void VisitGenericParameterDeclarationList(IGenericParameterDeclarationList genericParameterDeclarationListParam, TContext context);
    public virtual void VisitGenericParameterPointer(IGenericParameterPointer genericParameterPointerParam, TContext context);
    public virtual void VisitGenericScalarType(IGenericScalarType genericScalarTypeParam, TContext context);
    public virtual void VisitGenericType(IGenericType genericTypeParam, TContext context);
    public virtual void VisitHandlerBlock(IHandlerBlock handlerBlockParam, TContext context);
    public virtual void VisitILAccessorDeclaration(IILAccessorDeclaration iLAccessorDeclarationParam, TContext context);
    public virtual void VisitILAddonDeclaration(IILAddonDeclaration iLAddonDeclarationParam, TContext context);
    public virtual void VisitILAliasDeclaration(IILAliasDeclaration iLAliasDeclarationParam, TContext context);
    public virtual void VisitILAssemblyAutodetection(IILAssemblyAutodetection iLAssemblyAutodetectionParam, TContext context);
    public virtual void VisitILAssemblyCulture(IILAssemblyCulture iLAssemblyCultureParam, TContext context);
    public virtual void VisitILAssemblyDeclaration(IILAssemblyDeclaration iLAssemblyDeclarationParam, TContext context);
    public virtual void VisitILAssemblyHash(IILAssemblyHash iLAssemblyHashParam, TContext context);
    public virtual void VisitILAssemblyHashAlgorithm(IILAssemblyHashAlgorithm iLAssemblyHashAlgorithmParam, TContext context);
    [ObsoleteAttribute("There are Nodes in PSI [iLAssemblyCulture, iLAssemblyPublicKey, iLAssemblyVersion] that directly implements iLAssemblyProperty and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual void VisitILAssemblyProperty(IILAssemblyProperty iLAssemblyPropertyParam, TContext context);
    public virtual void VisitILAssemblyPublicKey(IILAssemblyPublicKey iLAssemblyPublicKeyParam, TContext context);
    public virtual void VisitILAssemblyPublicKeyToken(IILAssemblyPublicKeyToken iLAssemblyPublicKeyTokenParam, TContext context);
    public virtual void VisitILAssemblyVersion(IILAssemblyVersion iLAssemblyVersionParam, TContext context);
    public virtual void VisitILClassDeclaration(IILClassDeclaration iLClassDeclarationParam, TContext context);
    public virtual void VisitILCorFlags(IILCorFlags iLCorFlagsParam, TContext context);
    public virtual void VisitILDataDeclaration(IILDataDeclaration iLDataDeclarationParam, TContext context);
    [ObsoleteAttribute("There are Nodes in PSI [iLClassDeclaration, iLLanguageDeclaration] that directly implements iLDeclaration and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual void VisitILDeclaration(IILDeclaration iLDeclarationParam, TContext context);
    public virtual void VisitILEventDeclaration(IILEventDeclaration iLEventDeclarationParam, TContext context);
    [ObsoleteAttribute("There are Nodes in PSI [iLLanguageDeclaration, iLOtherDeclaration] that directly implements iLEventMember and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual void VisitILEventMember(IILEventMember iLEventMemberParam, TContext context);
    public virtual void VisitILExternAssemblyDeclaration(IILExternAssemblyDeclaration iLExternAssemblyDeclarationParam, TContext context);
    [ObsoleteAttribute("There are Nodes in PSI [iLAssemblyCulture, iLAssemblyPublicKey, iLAssemblyVersion] that directly implements iLExternAssemblyProperty and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual void VisitILExternAssemblyProperty(IILExternAssemblyProperty iLExternAssemblyPropertyParam, TContext context);
    public virtual void VisitILExternClassAssemblyProperty(IILExternClassAssemblyProperty iLExternClassAssemblyPropertyParam, TContext context);
    public virtual void VisitILExternClassClassProperty(IILExternClassClassProperty iLExternClassClassPropertyParam, TContext context);
    public virtual void VisitILExternClassDeclaration(IILExternClassDeclaration iLExternClassDeclarationParam, TContext context);
    public virtual void VisitILExternClassFileProperty(IILExternClassFileProperty iLExternClassFilePropertyParam, TContext context);
    public virtual void VisitILExternClassProperty(IILExternClassProperty iLExternClassPropertyParam, TContext context);
    public virtual void VisitILExternModuleDeclaration(IILExternModuleDeclaration iLExternModuleDeclarationParam, TContext context);
    public virtual void VisitILFieldDeclaration(IILFieldDeclaration iLFieldDeclarationParam, TContext context);
    public virtual void VisitILFile(IILFile iLFileParam, TContext context);
    public virtual void VisitILFileAlignmentDeclaration(IILFileAlignmentDeclaration iLFileAlignmentDeclarationParam, TContext context);
    public virtual void VisitILFileDeclaration(IILFileDeclaration iLFileDeclarationParam, TContext context);
    public virtual void VisitILFireDeclaration(IILFireDeclaration iLFireDeclarationParam, TContext context);
    public virtual void VisitILForwardClassDeclaration(IILForwardClassDeclaration iLForwardClassDeclarationParam, TContext context);
    public virtual void VisitILGetDeclaration(IILGetDeclaration iLGetDeclarationParam, TContext context);
    public virtual void VisitILImageBaseDeclaration(IILImageBaseDeclaration iLImageBaseDeclarationParam, TContext context);
    public virtual void VisitILInstanceLayoutDeclaration(IILInstanceLayoutDeclaration iLInstanceLayoutDeclarationParam, TContext context);
    public virtual void VisitILInterfaceimplSpecification(IILInterfaceimplSpecification iLInterfaceimplSpecificationParam, TContext context);
    public virtual void VisitILLabel(IILLabel iLLabelParam, TContext context);
    public virtual void VisitILLanguageDeclaration(IILLanguageDeclaration iLLanguageDeclarationParam, TContext context);
    public virtual void VisitILManifestAssemblyResource(IILManifestAssemblyResource iLManifestAssemblyResourceParam, TContext context);
    public virtual void VisitILManifestFileResource(IILManifestFileResource iLManifestFileResourceParam, TContext context);
    public virtual void VisitILManifestResource(IILManifestResource iLManifestResourceParam, TContext context);
    public virtual void VisitILManifestResourceDeclaration(IILManifestResourceDeclaration iLManifestResourceDeclarationParam, TContext context);
    public virtual void VisitILMethodDeclaration(IILMethodDeclaration iLMethodDeclarationParam, TContext context);
    public virtual void VisitILMethodOverridingDeclarationFull(IILMethodOverridingDeclarationFull iLMethodOverridingDeclarationFullParam, TContext context);
    public virtual void VisitILMethodOverridingDeclarationInClassFull(IILMethodOverridingDeclarationInClassFull iLMethodOverridingDeclarationInClassFullParam, TContext context);
    public virtual void VisitILMethodOverridingDeclarationInClassShort(IILMethodOverridingDeclarationInClassShort iLMethodOverridingDeclarationInClassShortParam, TContext context);
    public virtual void VisitILMethodOverridingDeclarationShort(IILMethodOverridingDeclarationShort iLMethodOverridingDeclarationShortParam, TContext context);
    public virtual void VisitILMethodParamSpecification(IILMethodParamSpecification iLMethodParamSpecificationParam, TContext context);
    public virtual void VisitILModuleDeclaration(IILModuleDeclaration iLModuleDeclarationParam, TContext context);
    public virtual void VisitILMscorlibDeclaration(IILMscorlibDeclaration iLMscorlibDeclarationParam, TContext context);
    public virtual void VisitILNamespaceBody(IILNamespaceBody iLNamespaceBodyParam, TContext context);
    public virtual void VisitILNamespaceDeclaration(IILNamespaceDeclaration iLNamespaceDeclarationParam, TContext context);
    public virtual void VisitILOtherDeclaration(IILOtherDeclaration iLOtherDeclarationParam, TContext context);
    public virtual void VisitILParamTypeConstraintSpecification(IILParamTypeConstraintSpecification iLParamTypeConstraintSpecificationParam, TContext context);
    public virtual void VisitILParamTypeSpecification(IILParamTypeSpecification iLParamTypeSpecificationParam, TContext context);
    public virtual void VisitILPropertyDeclaration(IILPropertyDeclaration iLPropertyDeclarationParam, TContext context);
    [ObsoleteAttribute("There are Nodes in PSI [iLLanguageDeclaration, iLOtherDeclaration] that directly implements iLPropertyMember and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual void VisitILPropertyMember(IILPropertyMember iLPropertyMemberParam, TContext context);
    public virtual void VisitILRemoveonDeclaration(IILRemoveonDeclaration iLRemoveonDeclarationParam, TContext context);
    public virtual void VisitILSetDeclaration(IILSetDeclaration iLSetDeclarationParam, TContext context);
    public virtual void VisitILStackReserveDeclaration(IILStackReserveDeclaration iLStackReserveDeclarationParam, TContext context);
    public virtual void VisitILSubsystem(IILSubsystem iLSubsystemParam, TContext context);
    [ObsoleteAttribute("There are Nodes in PSI [iLClassDeclaration] that directly implements iLTypeMemberDeclaration and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual void VisitILTypeMemberDeclaration(IILTypeMemberDeclaration iLTypeMemberDeclarationParam, TContext context);
    public virtual void VisitILTypelistDeclaration(IILTypelistDeclaration iLTypelistDeclarationParam, TContext context);
    public virtual void VisitILVtfixupDeclaration(IILVtfixupDeclaration iLVtfixupDeclarationParam, TContext context);
    public virtual void VisitIdentifier(IIdentifier identifierParam, TContext context);
    public virtual void VisitIdentifierWithOwnerQualification(IIdentifierWithOwnerQualification identifierWithOwnerQualificationParam, TContext context);
    public virtual void VisitIlQualifiedName(IIlQualifiedName ilQualifiedNameParam, TContext context);
    [ObsoleteAttribute("There is no Node in PSI that directly implements ilReferenceOwner interface, so this visitor member will not be invoked")]
public virtual void VisitIlReferenceOwner(IIlReferenceOwner ilReferenceOwnerParam, TContext context);
    public virtual void VisitImplementationAttributeList(IImplementationAttributeList implementationAttributeListParam, TContext context);
    public virtual void VisitImplementationMethodDeclarationShort(IImplementationMethodDeclarationShort implementationMethodDeclarationShortParam, TContext context);
    public virtual void VisitInstanceConstructorName(IInstanceConstructorName instanceConstructorNameParam, TContext context);
    public virtual void VisitInstanceConstructorReferenceName(IInstanceConstructorReferenceName instanceConstructorReferenceNameParam, TContext context);
    public virtual void VisitInstruction(IInstruction instructionParam, TContext context);
    public virtual void VisitInstructionBranchTarget(IInstructionBranchTarget instructionBranchTargetParam, TContext context);
    public virtual void VisitInstructionField(IInstructionField instructionFieldParam, TContext context);
    public virtual void VisitInstructionFieldParameter(IInstructionFieldParameter instructionFieldParameterParam, TContext context);
    public virtual void VisitInstructionI(IInstructionI instructionIParam, TContext context);
    public virtual void VisitInstructionI8(IInstructionI8 instructionI8Param, TContext context);
    public virtual void VisitInstructionMethod(IInstructionMethod instructionMethodParam, TContext context);
    public virtual void VisitInstructionMethodParameter(IInstructionMethodParameter instructionMethodParameterParam, TContext context);
    public virtual void VisitInstructionNone(IInstructionNone instructionNoneParam, TContext context);
    public virtual void VisitInstructionR(IInstructionR instructionRParam, TContext context);
    public virtual void VisitInstructionSig(IInstructionSig instructionSigParam, TContext context);
    public virtual void VisitInstructionString(IInstructionString instructionStringParam, TContext context);
    public virtual void VisitInstructionSwitch(IInstructionSwitch instructionSwitchParam, TContext context);
    public virtual void VisitInstructionTok(IInstructionTok instructionTokParam, TContext context);
    public virtual void VisitInstructionType(IInstructionType instructionTypeParam, TContext context);
    public virtual void VisitInstructionVar(IInstructionVar instructionVarParam, TContext context);
    public virtual void VisitIntInitializer(IIntInitializer intInitializerParam, TContext context);
    public virtual void VisitIntOrWildcard(IIntOrWildcard intOrWildcardParam, TContext context);
    public virtual void VisitLocalVariable(ILocalVariable localVariableParam, TContext context);
    public virtual void VisitLocalVariablesDeclaration(ILocalVariablesDeclaration localVariablesDeclarationParam, TContext context);
    public virtual void VisitManagedPointerType(IManagedPointerType managedPointerTypeParam, TContext context);
    public virtual void VisitMarshalSpec(IMarshalSpec marshalSpecParam, TContext context);
    public virtual void VisitMaxstack(IMaxstack maxstackParam, TContext context);
    public virtual void VisitMdtoken(IMdtoken mdtokenParam, TContext context);
    public virtual void VisitMemberRef(IMemberRef memberRefParam, TContext context);
    public virtual void VisitMethodHeader(IMethodHeader methodHeaderParam, TContext context);
    public virtual void VisitMethodReferenceName(IMethodReferenceName methodReferenceNameParam, TContext context);
    public virtual void VisitMethodScalarType(IMethodScalarType methodScalarTypeParam, TContext context);
    public virtual void VisitMethodScopeBlock(IMethodScopeBlock methodScopeBlockParam, TContext context);
    public virtual void VisitNameValuePair(INameValuePair nameValuePairParam, TContext context);
    public virtual void VisitNativeScalarType(INativeScalarType nativeScalarTypeParam, TContext context);
    public virtual void VisitNativeType(INativeType nativeTypeParam, TContext context);
    public virtual void VisitNativeTypeArraySpecification(INativeTypeArraySpecification nativeTypeArraySpecificationParam, TContext context);
    public virtual void VisitOpcode(IOpcode opcodeParam, TContext context);
    public virtual void VisitOwnerType(IOwnerType ownerTypeParam, TContext context);
    public virtual void VisitPInvokeAttributeList(IPInvokeAttributeList pInvokeAttributeListParam, TContext context);
    public virtual void VisitPInvokeSpecification(IPInvokeSpecification pInvokeSpecificationParam, TContext context);
    public virtual void VisitParameter(IParameter parameterParam, TContext context);
    public virtual void VisitParameterAttribute(IParameterAttribute parameterAttributeParam, TContext context);
    public virtual void VisitParameterAttributeList(IParameterAttributeList parameterAttributeListParam, TContext context);
    public virtual void VisitPermissionDeclaration(IPermissionDeclaration permissionDeclarationParam, TContext context);
    public virtual void VisitPermissionSetBody(IPermissionSetBody permissionSetBodyParam, TContext context);
    public virtual void VisitPermissionSetDeclaration(IPermissionSetDeclaration permissionSetDeclarationParam, TContext context);
    public virtual void VisitPinnedType(IPinnedType pinnedTypeParam, TContext context);
    public virtual void VisitPredefinedFieldAttributeList(IPredefinedFieldAttributeList predefinedFieldAttributeListParam, TContext context);
    public virtual void VisitPredefinedMethodAttributeList(IPredefinedMethodAttributeList predefinedMethodAttributeListParam, TContext context);
    public virtual void VisitPredefinedScalarType(IPredefinedScalarType predefinedScalarTypeParam, TContext context);
    public virtual void VisitPresentableName(IPresentableName presentableNameParam, TContext context);
    public virtual void VisitPropertyBody(IPropertyBody propertyBodyParam, TContext context);
    public virtual void VisitPropertyHeader(IPropertyHeader propertyHeaderParam, TContext context);
    public virtual void VisitQualifiedName(IQualifiedName qualifiedNameParam, TContext context);
    public virtual void VisitReferenceName(IReferenceName referenceNameParam, TContext context);
    [ObsoleteAttribute("There are Nodes in PSI [genericScalarType] that directly implements scalarType and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual void VisitScalarType(IScalarType scalarTypeParam, TContext context);
    public virtual void VisitSehBlock(ISehBlock sehBlockParam, TContext context);
    public virtual void VisitSehClause(ISehClause sehClauseParam, TContext context);
    public virtual void VisitSequrityDeclaration(ISequrityDeclaration sequrityDeclarationParam, TContext context);
    public virtual void VisitSignatureDef(ISignatureDef signatureDefParam, TContext context);
    public virtual void VisitSpecialnameAttributeList(ISpecialnameAttributeList specialnameAttributeListParam, TContext context);
    public virtual void VisitStaticConstructorName(IStaticConstructorName staticConstructorNameParam, TContext context);
    public virtual void VisitTargetLabel(ITargetLabel targetLabelParam, TContext context);
    public virtual void VisitTargetLabelList(ITargetLabelList targetLabelListParam, TContext context);
    public virtual void VisitTryBlock(ITryBlock tryBlockParam, TContext context);
    public virtual void VisitTypeMemberReferenceName(ITypeMemberReferenceName typeMemberReferenceNameParam, TContext context);
    public virtual void VisitTypeMemberUsage(ITypeMemberUsage typeMemberUsageParam, TContext context);
    public virtual void VisitTypeModifier(ITypeModifier typeModifierParam, TContext context);
    public virtual void VisitTypeReference(ITypeReference typeReferenceParam, TContext context);
    public virtual void VisitTypeResolutionScope(ITypeResolutionScope typeResolutionScopeParam, TContext context);
    [ObsoleteAttribute("There are Nodes in PSI [typeReference] that directly implements typeSpec and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual void VisitTypeSpec(ITypeSpec typeSpecParam, TContext context);
    public virtual void VisitTypeSpecWithDoubleColon(ITypeSpecWithDoubleColon typeSpecWithDoubleColonParam, TContext context);
    public virtual void VisitTypeUsage(ITypeUsage typeUsageParam, TContext context);
    [ObsoleteAttribute("There is no Node in PSI that directly implements typeWithReferenceBase interface, so this visitor member will not be invoked")]
public virtual void VisitTypeWithReferenceBase(ITypeWithReferenceBase typeWithReferenceBaseParam, TContext context);
    public virtual void VisitUnmanagedPointerType(IUnmanagedPointerType unmanagedPointerTypeParam, TContext context);
    public virtual void VisitUserScalarType(IUserScalarType userScalarTypeParam, TContext context);
    public virtual void VisitVariantType(IVariantType variantTypeParam, TContext context);
    public virtual void VisitVtentry(IVtentry vtentryParam, TContext context);
    public virtual void VisitVtfixupAttribute(IVtfixupAttribute vtfixupAttributeParam, TContext context);
    public virtual void VisitVtfixupAttributeList(IVtfixupAttributeList vtfixupAttributeListParam, TContext context);
    public virtual void VisitZeroinit(IZeroinit zeroinitParam, TContext context);
}
public abstract class JetBrains.ReSharper.Psi.IL.Tree.TreeNodeVisitor`2 : object {
    public virtual TReturn VisitNode(ITreeNode node, TContext context);
    public virtual TReturn VisitArrayBound(IArrayBound arrayBoundParam, TContext context);
    public virtual TReturn VisitArrayType(IArrayType arrayTypeParam, TContext context);
    public virtual TReturn VisitBlob(IBlob blobParam, TContext context);
    public virtual TReturn VisitCallConvention(ICallConvention callConventionParam, TContext context);
    public virtual TReturn VisitCallConventionKind(ICallConventionKind callConventionKindParam, TContext context);
    public virtual TReturn VisitCatchClause(ICatchClause catchClauseParam, TContext context);
    public virtual TReturn VisitClassBody(IClassBody classBodyParam, TContext context);
    public virtual TReturn VisitClassExtendsClause(IClassExtendsClause classExtendsClauseParam, TContext context);
    public virtual TReturn VisitClassHeader(IClassHeader classHeaderParam, TContext context);
    public virtual TReturn VisitClassImplementsClause(IClassImplementsClause classImplementsClauseParam, TContext context);
    public virtual TReturn VisitClassModifierList(IClassModifierList classModifierListParam, TContext context);
    public virtual TReturn VisitClassName(IClassName classNameParam, TContext context);
    public virtual TReturn VisitCodeLabel(ICodeLabel codeLabelParam, TContext context);
    public virtual TReturn VisitCompControl(ICompControl compControlParam, TContext context);
    public virtual TReturn VisitCompQstring(ICompQstring compQstringParam, TContext context);
    public virtual TReturn VisitCompositeVariantType(ICompositeVariantType compositeVariantTypeParam, TContext context);
    public virtual TReturn VisitConstructorName(IConstructorName constructorNameParam, TContext context);
    public virtual TReturn VisitCustomAttribute(ICustomAttribute customAttributeParam, TContext context);
    public virtual TReturn VisitCustomModifierType(ICustomModifierType customModifierTypeParam, TContext context);
    public virtual TReturn VisitCustomType(ICustomType customTypeParam, TContext context);
    public virtual TReturn VisitDataDeclarationItem(IDataDeclarationItem dataDeclarationItemParam, TContext context);
    public virtual TReturn VisitDataLabel(IDataLabel dataLabelParam, TContext context);
    public virtual TReturn VisitEmitbyte(IEmitbyte emitbyteParam, TContext context);
    public virtual TReturn VisitEntrypoint(IEntrypoint entrypointParam, TContext context);
    public virtual TReturn VisitEventBody(IEventBody eventBodyParam, TContext context);
    public virtual TReturn VisitEventHeader(IEventHeader eventHeaderParam, TContext context);
    [ObsoleteAttribute("There is no Node in PSI that directly implements exceptionType interface, so this visitor member will not be invoked")]
public virtual TReturn VisitExceptionType(IExceptionType exceptionTypeParam, TContext context);
    public virtual TReturn VisitExport(IExport exportParam, TContext context);
    public virtual TReturn VisitExternSource(IExternSource externSourceParam, TContext context);
    public virtual TReturn VisitFaultClause(IFaultClause faultClauseParam, TContext context);
    public virtual TReturn VisitFieldByteOffset(IFieldByteOffset fieldByteOffsetParam, TContext context);
    public virtual TReturn VisitFieldInit(IFieldInit fieldInitParam, TContext context);
    public virtual TReturn VisitFieldReferenceName(IFieldReferenceName fieldReferenceNameParam, TContext context);
    public virtual TReturn VisitFilterClause(IFilterClause filterClauseParam, TContext context);
    public virtual TReturn VisitFinallyClause(IFinallyClause finallyClauseParam, TContext context);
    public virtual TReturn VisitFromToBlock(IFromToBlock fromToBlockParam, TContext context);
    public virtual TReturn VisitGenArity(IGenArity genArityParam, TContext context);
    public virtual TReturn VisitGenericArgumentList(IGenericArgumentList genericArgumentListParam, TContext context);
    [ObsoleteAttribute("There are Nodes in PSI [genericScalarType] that directly implements genericParameter and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual TReturn VisitGenericParameter(IGenericParameter genericParameterParam, TContext context);
    public virtual TReturn VisitGenericParameterAttributeList(IGenericParameterAttributeList genericParameterAttributeListParam, TContext context);
    public virtual TReturn VisitGenericParameterConstraintList(IGenericParameterConstraintList genericParameterConstraintListParam, TContext context);
    public virtual TReturn VisitGenericParameterDeclaration(IGenericParameterDeclaration genericParameterDeclarationParam, TContext context);
    public virtual TReturn VisitGenericParameterDeclarationList(IGenericParameterDeclarationList genericParameterDeclarationListParam, TContext context);
    public virtual TReturn VisitGenericParameterPointer(IGenericParameterPointer genericParameterPointerParam, TContext context);
    public virtual TReturn VisitGenericScalarType(IGenericScalarType genericScalarTypeParam, TContext context);
    public virtual TReturn VisitGenericType(IGenericType genericTypeParam, TContext context);
    public virtual TReturn VisitHandlerBlock(IHandlerBlock handlerBlockParam, TContext context);
    public virtual TReturn VisitILAccessorDeclaration(IILAccessorDeclaration iLAccessorDeclarationParam, TContext context);
    public virtual TReturn VisitILAddonDeclaration(IILAddonDeclaration iLAddonDeclarationParam, TContext context);
    public virtual TReturn VisitILAliasDeclaration(IILAliasDeclaration iLAliasDeclarationParam, TContext context);
    public virtual TReturn VisitILAssemblyAutodetection(IILAssemblyAutodetection iLAssemblyAutodetectionParam, TContext context);
    public virtual TReturn VisitILAssemblyCulture(IILAssemblyCulture iLAssemblyCultureParam, TContext context);
    public virtual TReturn VisitILAssemblyDeclaration(IILAssemblyDeclaration iLAssemblyDeclarationParam, TContext context);
    public virtual TReturn VisitILAssemblyHash(IILAssemblyHash iLAssemblyHashParam, TContext context);
    public virtual TReturn VisitILAssemblyHashAlgorithm(IILAssemblyHashAlgorithm iLAssemblyHashAlgorithmParam, TContext context);
    [ObsoleteAttribute("There are Nodes in PSI [iLAssemblyCulture, iLAssemblyPublicKey, iLAssemblyVersion] that directly implements iLAssemblyProperty and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual TReturn VisitILAssemblyProperty(IILAssemblyProperty iLAssemblyPropertyParam, TContext context);
    public virtual TReturn VisitILAssemblyPublicKey(IILAssemblyPublicKey iLAssemblyPublicKeyParam, TContext context);
    public virtual TReturn VisitILAssemblyPublicKeyToken(IILAssemblyPublicKeyToken iLAssemblyPublicKeyTokenParam, TContext context);
    public virtual TReturn VisitILAssemblyVersion(IILAssemblyVersion iLAssemblyVersionParam, TContext context);
    public virtual TReturn VisitILClassDeclaration(IILClassDeclaration iLClassDeclarationParam, TContext context);
    public virtual TReturn VisitILCorFlags(IILCorFlags iLCorFlagsParam, TContext context);
    public virtual TReturn VisitILDataDeclaration(IILDataDeclaration iLDataDeclarationParam, TContext context);
    [ObsoleteAttribute("There are Nodes in PSI [iLClassDeclaration, iLLanguageDeclaration] that directly implements iLDeclaration and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual TReturn VisitILDeclaration(IILDeclaration iLDeclarationParam, TContext context);
    public virtual TReturn VisitILEventDeclaration(IILEventDeclaration iLEventDeclarationParam, TContext context);
    [ObsoleteAttribute("There are Nodes in PSI [iLLanguageDeclaration, iLOtherDeclaration] that directly implements iLEventMember and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual TReturn VisitILEventMember(IILEventMember iLEventMemberParam, TContext context);
    public virtual TReturn VisitILExternAssemblyDeclaration(IILExternAssemblyDeclaration iLExternAssemblyDeclarationParam, TContext context);
    [ObsoleteAttribute("There are Nodes in PSI [iLAssemblyCulture, iLAssemblyPublicKey, iLAssemblyVersion] that directly implements iLExternAssemblyProperty and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual TReturn VisitILExternAssemblyProperty(IILExternAssemblyProperty iLExternAssemblyPropertyParam, TContext context);
    public virtual TReturn VisitILExternClassAssemblyProperty(IILExternClassAssemblyProperty iLExternClassAssemblyPropertyParam, TContext context);
    public virtual TReturn VisitILExternClassClassProperty(IILExternClassClassProperty iLExternClassClassPropertyParam, TContext context);
    public virtual TReturn VisitILExternClassDeclaration(IILExternClassDeclaration iLExternClassDeclarationParam, TContext context);
    public virtual TReturn VisitILExternClassFileProperty(IILExternClassFileProperty iLExternClassFilePropertyParam, TContext context);
    public virtual TReturn VisitILExternClassProperty(IILExternClassProperty iLExternClassPropertyParam, TContext context);
    public virtual TReturn VisitILExternModuleDeclaration(IILExternModuleDeclaration iLExternModuleDeclarationParam, TContext context);
    public virtual TReturn VisitILFieldDeclaration(IILFieldDeclaration iLFieldDeclarationParam, TContext context);
    public virtual TReturn VisitILFile(IILFile iLFileParam, TContext context);
    public virtual TReturn VisitILFileAlignmentDeclaration(IILFileAlignmentDeclaration iLFileAlignmentDeclarationParam, TContext context);
    public virtual TReturn VisitILFileDeclaration(IILFileDeclaration iLFileDeclarationParam, TContext context);
    public virtual TReturn VisitILFireDeclaration(IILFireDeclaration iLFireDeclarationParam, TContext context);
    public virtual TReturn VisitILForwardClassDeclaration(IILForwardClassDeclaration iLForwardClassDeclarationParam, TContext context);
    public virtual TReturn VisitILGetDeclaration(IILGetDeclaration iLGetDeclarationParam, TContext context);
    public virtual TReturn VisitILImageBaseDeclaration(IILImageBaseDeclaration iLImageBaseDeclarationParam, TContext context);
    public virtual TReturn VisitILInstanceLayoutDeclaration(IILInstanceLayoutDeclaration iLInstanceLayoutDeclarationParam, TContext context);
    public virtual TReturn VisitILInterfaceimplSpecification(IILInterfaceimplSpecification iLInterfaceimplSpecificationParam, TContext context);
    public virtual TReturn VisitILLabel(IILLabel iLLabelParam, TContext context);
    public virtual TReturn VisitILLanguageDeclaration(IILLanguageDeclaration iLLanguageDeclarationParam, TContext context);
    public virtual TReturn VisitILManifestAssemblyResource(IILManifestAssemblyResource iLManifestAssemblyResourceParam, TContext context);
    public virtual TReturn VisitILManifestFileResource(IILManifestFileResource iLManifestFileResourceParam, TContext context);
    public virtual TReturn VisitILManifestResource(IILManifestResource iLManifestResourceParam, TContext context);
    public virtual TReturn VisitILManifestResourceDeclaration(IILManifestResourceDeclaration iLManifestResourceDeclarationParam, TContext context);
    public virtual TReturn VisitILMethodDeclaration(IILMethodDeclaration iLMethodDeclarationParam, TContext context);
    public virtual TReturn VisitILMethodOverridingDeclarationFull(IILMethodOverridingDeclarationFull iLMethodOverridingDeclarationFullParam, TContext context);
    public virtual TReturn VisitILMethodOverridingDeclarationInClassFull(IILMethodOverridingDeclarationInClassFull iLMethodOverridingDeclarationInClassFullParam, TContext context);
    public virtual TReturn VisitILMethodOverridingDeclarationInClassShort(IILMethodOverridingDeclarationInClassShort iLMethodOverridingDeclarationInClassShortParam, TContext context);
    public virtual TReturn VisitILMethodOverridingDeclarationShort(IILMethodOverridingDeclarationShort iLMethodOverridingDeclarationShortParam, TContext context);
    public virtual TReturn VisitILMethodParamSpecification(IILMethodParamSpecification iLMethodParamSpecificationParam, TContext context);
    public virtual TReturn VisitILModuleDeclaration(IILModuleDeclaration iLModuleDeclarationParam, TContext context);
    public virtual TReturn VisitILMscorlibDeclaration(IILMscorlibDeclaration iLMscorlibDeclarationParam, TContext context);
    public virtual TReturn VisitILNamespaceBody(IILNamespaceBody iLNamespaceBodyParam, TContext context);
    public virtual TReturn VisitILNamespaceDeclaration(IILNamespaceDeclaration iLNamespaceDeclarationParam, TContext context);
    public virtual TReturn VisitILOtherDeclaration(IILOtherDeclaration iLOtherDeclarationParam, TContext context);
    public virtual TReturn VisitILParamTypeConstraintSpecification(IILParamTypeConstraintSpecification iLParamTypeConstraintSpecificationParam, TContext context);
    public virtual TReturn VisitILParamTypeSpecification(IILParamTypeSpecification iLParamTypeSpecificationParam, TContext context);
    public virtual TReturn VisitILPropertyDeclaration(IILPropertyDeclaration iLPropertyDeclarationParam, TContext context);
    [ObsoleteAttribute("There are Nodes in PSI [iLLanguageDeclaration, iLOtherDeclaration] that directly implements iLPropertyMember and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual TReturn VisitILPropertyMember(IILPropertyMember iLPropertyMemberParam, TContext context);
    public virtual TReturn VisitILRemoveonDeclaration(IILRemoveonDeclaration iLRemoveonDeclarationParam, TContext context);
    public virtual TReturn VisitILSetDeclaration(IILSetDeclaration iLSetDeclarationParam, TContext context);
    public virtual TReturn VisitILStackReserveDeclaration(IILStackReserveDeclaration iLStackReserveDeclarationParam, TContext context);
    public virtual TReturn VisitILSubsystem(IILSubsystem iLSubsystemParam, TContext context);
    [ObsoleteAttribute("There are Nodes in PSI [iLClassDeclaration] that directly implements iLTypeMemberDeclaration and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual TReturn VisitILTypeMemberDeclaration(IILTypeMemberDeclaration iLTypeMemberDeclarationParam, TContext context);
    public virtual TReturn VisitILTypelistDeclaration(IILTypelistDeclaration iLTypelistDeclarationParam, TContext context);
    public virtual TReturn VisitILVtfixupDeclaration(IILVtfixupDeclaration iLVtfixupDeclarationParam, TContext context);
    public virtual TReturn VisitIdentifier(IIdentifier identifierParam, TContext context);
    public virtual TReturn VisitIdentifierWithOwnerQualification(IIdentifierWithOwnerQualification identifierWithOwnerQualificationParam, TContext context);
    public virtual TReturn VisitIlQualifiedName(IIlQualifiedName ilQualifiedNameParam, TContext context);
    [ObsoleteAttribute("There is no Node in PSI that directly implements ilReferenceOwner interface, so this visitor member will not be invoked")]
public virtual TReturn VisitIlReferenceOwner(IIlReferenceOwner ilReferenceOwnerParam, TContext context);
    public virtual TReturn VisitImplementationAttributeList(IImplementationAttributeList implementationAttributeListParam, TContext context);
    public virtual TReturn VisitImplementationMethodDeclarationShort(IImplementationMethodDeclarationShort implementationMethodDeclarationShortParam, TContext context);
    public virtual TReturn VisitInstanceConstructorName(IInstanceConstructorName instanceConstructorNameParam, TContext context);
    public virtual TReturn VisitInstanceConstructorReferenceName(IInstanceConstructorReferenceName instanceConstructorReferenceNameParam, TContext context);
    public virtual TReturn VisitInstruction(IInstruction instructionParam, TContext context);
    public virtual TReturn VisitInstructionBranchTarget(IInstructionBranchTarget instructionBranchTargetParam, TContext context);
    public virtual TReturn VisitInstructionField(IInstructionField instructionFieldParam, TContext context);
    public virtual TReturn VisitInstructionFieldParameter(IInstructionFieldParameter instructionFieldParameterParam, TContext context);
    public virtual TReturn VisitInstructionI(IInstructionI instructionIParam, TContext context);
    public virtual TReturn VisitInstructionI8(IInstructionI8 instructionI8Param, TContext context);
    public virtual TReturn VisitInstructionMethod(IInstructionMethod instructionMethodParam, TContext context);
    public virtual TReturn VisitInstructionMethodParameter(IInstructionMethodParameter instructionMethodParameterParam, TContext context);
    public virtual TReturn VisitInstructionNone(IInstructionNone instructionNoneParam, TContext context);
    public virtual TReturn VisitInstructionR(IInstructionR instructionRParam, TContext context);
    public virtual TReturn VisitInstructionSig(IInstructionSig instructionSigParam, TContext context);
    public virtual TReturn VisitInstructionString(IInstructionString instructionStringParam, TContext context);
    public virtual TReturn VisitInstructionSwitch(IInstructionSwitch instructionSwitchParam, TContext context);
    public virtual TReturn VisitInstructionTok(IInstructionTok instructionTokParam, TContext context);
    public virtual TReturn VisitInstructionType(IInstructionType instructionTypeParam, TContext context);
    public virtual TReturn VisitInstructionVar(IInstructionVar instructionVarParam, TContext context);
    public virtual TReturn VisitIntInitializer(IIntInitializer intInitializerParam, TContext context);
    public virtual TReturn VisitIntOrWildcard(IIntOrWildcard intOrWildcardParam, TContext context);
    public virtual TReturn VisitLocalVariable(ILocalVariable localVariableParam, TContext context);
    public virtual TReturn VisitLocalVariablesDeclaration(ILocalVariablesDeclaration localVariablesDeclarationParam, TContext context);
    public virtual TReturn VisitManagedPointerType(IManagedPointerType managedPointerTypeParam, TContext context);
    public virtual TReturn VisitMarshalSpec(IMarshalSpec marshalSpecParam, TContext context);
    public virtual TReturn VisitMaxstack(IMaxstack maxstackParam, TContext context);
    public virtual TReturn VisitMdtoken(IMdtoken mdtokenParam, TContext context);
    public virtual TReturn VisitMemberRef(IMemberRef memberRefParam, TContext context);
    public virtual TReturn VisitMethodHeader(IMethodHeader methodHeaderParam, TContext context);
    public virtual TReturn VisitMethodReferenceName(IMethodReferenceName methodReferenceNameParam, TContext context);
    public virtual TReturn VisitMethodScalarType(IMethodScalarType methodScalarTypeParam, TContext context);
    public virtual TReturn VisitMethodScopeBlock(IMethodScopeBlock methodScopeBlockParam, TContext context);
    public virtual TReturn VisitNameValuePair(INameValuePair nameValuePairParam, TContext context);
    public virtual TReturn VisitNativeScalarType(INativeScalarType nativeScalarTypeParam, TContext context);
    public virtual TReturn VisitNativeType(INativeType nativeTypeParam, TContext context);
    public virtual TReturn VisitNativeTypeArraySpecification(INativeTypeArraySpecification nativeTypeArraySpecificationParam, TContext context);
    public virtual TReturn VisitOpcode(IOpcode opcodeParam, TContext context);
    public virtual TReturn VisitOwnerType(IOwnerType ownerTypeParam, TContext context);
    public virtual TReturn VisitPInvokeAttributeList(IPInvokeAttributeList pInvokeAttributeListParam, TContext context);
    public virtual TReturn VisitPInvokeSpecification(IPInvokeSpecification pInvokeSpecificationParam, TContext context);
    public virtual TReturn VisitParameter(IParameter parameterParam, TContext context);
    public virtual TReturn VisitParameterAttribute(IParameterAttribute parameterAttributeParam, TContext context);
    public virtual TReturn VisitParameterAttributeList(IParameterAttributeList parameterAttributeListParam, TContext context);
    public virtual TReturn VisitPermissionDeclaration(IPermissionDeclaration permissionDeclarationParam, TContext context);
    public virtual TReturn VisitPermissionSetBody(IPermissionSetBody permissionSetBodyParam, TContext context);
    public virtual TReturn VisitPermissionSetDeclaration(IPermissionSetDeclaration permissionSetDeclarationParam, TContext context);
    public virtual TReturn VisitPinnedType(IPinnedType pinnedTypeParam, TContext context);
    public virtual TReturn VisitPredefinedFieldAttributeList(IPredefinedFieldAttributeList predefinedFieldAttributeListParam, TContext context);
    public virtual TReturn VisitPredefinedMethodAttributeList(IPredefinedMethodAttributeList predefinedMethodAttributeListParam, TContext context);
    public virtual TReturn VisitPredefinedScalarType(IPredefinedScalarType predefinedScalarTypeParam, TContext context);
    public virtual TReturn VisitPresentableName(IPresentableName presentableNameParam, TContext context);
    public virtual TReturn VisitPropertyBody(IPropertyBody propertyBodyParam, TContext context);
    public virtual TReturn VisitPropertyHeader(IPropertyHeader propertyHeaderParam, TContext context);
    public virtual TReturn VisitQualifiedName(IQualifiedName qualifiedNameParam, TContext context);
    public virtual TReturn VisitReferenceName(IReferenceName referenceNameParam, TContext context);
    [ObsoleteAttribute("There are Nodes in PSI [genericScalarType] that directly implements scalarType and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual TReturn VisitScalarType(IScalarType scalarTypeParam, TContext context);
    public virtual TReturn VisitSehBlock(ISehBlock sehBlockParam, TContext context);
    public virtual TReturn VisitSehClause(ISehClause sehClauseParam, TContext context);
    public virtual TReturn VisitSequrityDeclaration(ISequrityDeclaration sequrityDeclarationParam, TContext context);
    public virtual TReturn VisitSignatureDef(ISignatureDef signatureDefParam, TContext context);
    public virtual TReturn VisitSpecialnameAttributeList(ISpecialnameAttributeList specialnameAttributeListParam, TContext context);
    public virtual TReturn VisitStaticConstructorName(IStaticConstructorName staticConstructorNameParam, TContext context);
    public virtual TReturn VisitTargetLabel(ITargetLabel targetLabelParam, TContext context);
    public virtual TReturn VisitTargetLabelList(ITargetLabelList targetLabelListParam, TContext context);
    public virtual TReturn VisitTryBlock(ITryBlock tryBlockParam, TContext context);
    public virtual TReturn VisitTypeMemberReferenceName(ITypeMemberReferenceName typeMemberReferenceNameParam, TContext context);
    public virtual TReturn VisitTypeMemberUsage(ITypeMemberUsage typeMemberUsageParam, TContext context);
    public virtual TReturn VisitTypeModifier(ITypeModifier typeModifierParam, TContext context);
    public virtual TReturn VisitTypeReference(ITypeReference typeReferenceParam, TContext context);
    public virtual TReturn VisitTypeResolutionScope(ITypeResolutionScope typeResolutionScopeParam, TContext context);
    [ObsoleteAttribute("There are Nodes in PSI [typeReference] that directly implements typeSpec and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual TReturn VisitTypeSpec(ITypeSpec typeSpecParam, TContext context);
    public virtual TReturn VisitTypeSpecWithDoubleColon(ITypeSpecWithDoubleColon typeSpecWithDoubleColonParam, TContext context);
    public virtual TReturn VisitTypeUsage(ITypeUsage typeUsageParam, TContext context);
    [ObsoleteAttribute("There is no Node in PSI that directly implements typeWithReferenceBase interface, so this visitor member will not be invoked")]
public virtual TReturn VisitTypeWithReferenceBase(ITypeWithReferenceBase typeWithReferenceBaseParam, TContext context);
    public virtual TReturn VisitUnmanagedPointerType(IUnmanagedPointerType unmanagedPointerTypeParam, TContext context);
    public virtual TReturn VisitUserScalarType(IUserScalarType userScalarTypeParam, TContext context);
    public virtual TReturn VisitVariantType(IVariantType variantTypeParam, TContext context);
    public virtual TReturn VisitVtentry(IVtentry vtentryParam, TContext context);
    public virtual TReturn VisitVtfixupAttribute(IVtfixupAttribute vtfixupAttributeParam, TContext context);
    public virtual TReturn VisitVtfixupAttributeList(IVtfixupAttributeList vtfixupAttributeListParam, TContext context);
    public virtual TReturn VisitZeroinit(IZeroinit zeroinitParam, TContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.TryBlockNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ITryBlock GetByFromToBlock(IFromToBlock param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ITryBlock GetByScopeBlock(IMethodScopeBlock param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.TypeMemberReferenceNameNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.TypeMemberUsageNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.TypeModifierNavigator : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.TypeReferenceNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ITypeReference GetByReferenceName(IReferenceName param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ITypeReference GetByResolutionScope(ITypeResolutionScope param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.TypeResolutionScopeNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ITypeResolutionScope GetByQualifiedName(IQualifiedName param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.TypeSpecNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.TypeSpecWithDoubleColonNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ITypeSpecWithDoubleColon GetByTypeSpec(ITypeSpec param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.IL.Tree.TypeUsageNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ITypeUsage GetByScalarType(IScalarType param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ITypeUsage GetByTypeModifier(ITypeModifier param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.TypeWithReferenceBaseNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.UnmanagedPointerTypeNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.UserScalarTypeNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IUserScalarType GetByTypeReference(ITypeReference param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.VariantTypeNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.VtentryNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.VtfixupAttributeListNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IVtfixupAttributeList GetByAttribute(IVtfixupAttribute param);
}
public static class JetBrains.ReSharper.Psi.IL.Tree.VtfixupAttributeNavigator : object {
}
public static class JetBrains.ReSharper.Psi.IL.Tree.ZeroinitNavigator : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Psi.IL.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
