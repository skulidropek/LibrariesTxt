[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Psi.Protobuf.Caches.ProtobufDeclarationCache : SimpleICache`1<OneToListMap`2<string, ProtobufDeclaredElementBase>> {
    private Dictionary`2<IPsiSourceFile, HashSet`1<ExtendInfo>> myExtendList;
    private Dictionary`2<IPsiSourceFile, ProtobufFileAttributes> myFileAttributes;
    private object myLock;
    private static int EvictionAttemptIntervalMs;
    private static int ItemLifetimeToEvictMs;
    public string Version { get; }
    public ProtobufDeclarationCache(Lifetime lifetime, IPersistentIndexManager persistentIndexManager, IShellLocks locks);
    private ProtobufFileAttributes BuildAttributes(IProtobufFile file);
    [NotNullAttribute]
public IEnumerable`1<string> AllTypesEnumerable();
    [NotNullAttribute]
public IEnumerable`1<ProtobufDeclaredElementBase> GetAllDeclaredElements(string name);
    public IEnumerable`1<ProtobufDeclaredElementBase> GetSubDeclarations(ProtobufDeclaredElementBase decl);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.Protobuf.Caches.ProtobufDeclarationCache/<GetSubDeclarations>d__11")]
public IEnumerable`1<ProtobufDeclaredElementBase> GetSubDeclarations(IPsiSourceFile file, string name);
    public IEnumerable`1<ProtobufDeclaredElementBase> GetSubDeclarationsWithImports(IPsiSourceFile file, string name);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.Protobuf.Caches.ProtobufDeclarationCache/<GetFileTopLevelDeclarations>d__13")]
public IEnumerable`1<ProtobufDeclaredElementBase> GetFileTopLevelDeclarations(IPsiSourceFile file);
    public IEnumerable`1<ProtobufDeclaredElementBase> GetFileTopLevelDeclarationsWithImports(IPsiSourceFile file);
    private HashSet`1<ExtendInfo> BuildExtendCache(IProtobufFile file);
    private void ProcessExtendStatement(IExtendStatement decl, HashSet`1<ExtendInfo> rv);
    private void ProcessMessageBody(IMessageBody body, HashSet`1<ExtendInfo> rv);
    private OneToListMap`2<string, ProtobufDeclaredElementBase> BuildDeclarationCache(IProtobufFile file);
    private void ProcessEnumDeclaration(IEnumDeclaration enumDeclaration, OneToListMap`2<string, ProtobufDeclaredElementBase> rv);
    private void ProcessPackageStatement(IPackageStatement package, OneToListMap`2<string, ProtobufDeclaredElementBase> rv);
    private void ProcessMessageBody(IMessageBody messageDeclaration, OneToListMap`2<string, ProtobufDeclaredElementBase> rv);
    private void ProcessExtendStatement(IExtendStatement statement, OneToListMap`2<string, ProtobufDeclaredElementBase> rv);
    private void ProcessMessageDeclaration(IMessageLikeDeclaration messageDeclaration, OneToListMap`2<string, ProtobufDeclaredElementBase> rv);
    private void ProcessFieldDeclaration(IFieldDeclaration declaration, OneToListMap`2<string, ProtobufDeclaredElementBase> rv);
    private void ProcessOneofDeclaration(IOneofDeclaration declaration, OneToListMap`2<string, ProtobufDeclaredElementBase> rv);
    public OneToListMap`2<string, ProtobufDeclaredElementBase> GetDeclaredElements(IPsiSourceFile source);
    public HashSet`1<ExtendInfo> GetExtendInfos(IPsiSourceFile source);
    public virtual void OnPsiChange(ITreeNode elementContainingChanges, PsiChangedElementType type);
    public ICollection`1<ProtobufDeclaredElementBase> GetDeclaredElement(string fullName, IPsiSourceFile file);
    public ICollection`1<ProtobufDeclaredElementBase> ResolveDeclaredElement(string typeName, string enclosingContext, ICollection`1<IPsiSourceFile> sources, string ignoreType);
    public virtual void MarkAsDirty(IPsiSourceFile sourceFile);
    public virtual object Build(IPsiSourceFile sourceFile, bool isStartup);
    public virtual void Drop(IPsiSourceFile sourceFile);
    public virtual string get_Version();
    public ProtobufFileAttributes GetAttributes(IPsiSourceFile source);
    public object Build(IPsiSourceFile key);
    public void ElementRename(ProtobufDeclaredElementBase declaredElement, ProtobufDeclaredElementBase newDeclaredElement);
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <AllTypesEnumerable>b__8_0(IPsiSourceFile psiSourceFile);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Psi.Protobuf.Caches.ProtobufFileOptionsCache : SimpleICache`1<Dictionary`2<string, string>> {
    private static string PackageKey;
    public string Version { get; }
    public ProtobufFileOptionsCache(Lifetime lifetime, IPersistentIndexManager persistentIndexManager, IShellLocks locks);
    public virtual object Build(IPsiSourceFile sourceFile, bool isStartup);
    public object Build(IPsiSourceFile key);
    [NotNullAttribute]
public IDictionary`2<string, string> GetFileOptions(IPsiSourceFile file);
    [NotNullAttribute]
public string GetFilePackage(IPsiSourceFile file);
    public virtual string get_Version();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Psi.Protobuf.Caches.ProtobufImportCache : SimpleICache`1<Pair`2<ICollection`1<IPsiSourceFile>, ICollection`1<IPsiSourceFile>>> {
    private Dictionary`2<IPsiSourceFile, IList`1<IPsiSourceFile>> myTransitiveCache;
    public string Version { get; }
    public ProtobufImportCache(Lifetime lifetime, IPersistentIndexManager indexManager, IShellLocks locks);
    private void TransitiveImportsWalker(IPsiSourceFile source, ISet`1<IPsiSourceFile> result, bool wasImportedPublic);
    protected virtual bool IsApplicable(IPsiSourceFile sourceFile);
    public IList`1<IPsiSourceFile> GetTransitiveImportsForFile(IPsiSourceFile source);
    public virtual object Build(IPsiSourceFile sourceFile, bool isStartup);
    public object Build(IPsiSourceFile key);
    public virtual string get_Version();
}
public interface JetBrains.ReSharper.Psi.Protobuf.CodeStyle.IProtobufCodeFormatter {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Protobuf.ProtobufLanguage", "16")]
internal class JetBrains.ReSharper.Psi.Protobuf.CodeStyle.ProtobufCodeFormatter : CodeFormatterBase`1<ProtobufCodeFormattingSettingsKey> {
    private ProtobufFormattingInfoProvider myFormattingProvider;
    public bool SupportsWrapping { get; }
    public string OverridenSettingPrefix { get; }
    public ProtobufCodeFormatter(PsiLanguageType language, ProtobufFormattingInfoProvider formattingProvider, CodeFormatterRequirements requirements);
    public virtual MinimalSeparatorType GetMinimalSeparatorByNodeTypes(TokenNodeType tokenType1, TokenNodeType tokenType2);
    protected virtual CodeFormattingContext CreateFormatterContext(AdditionalFormatterParameters parameters, ICustomFormatterInfoProvider provider, int tabWidth, SingleLangChangeAccu changeAccu, FormatTask[] formatTasks);
    public virtual bool get_SupportsWrapping();
    public virtual ITreeNode CreateSpace(string indent, NodeType replacedOrLeftSiblingType);
    public virtual ITreeNode CreateNewLine(LineEnding lineEnding, NodeType lineBreakType);
    public virtual IFormatterInfoProvider GetFormatterInfoProvider(IPsiSourceFile sourceFile, AdditionalFormatterParameters parameters);
    public virtual ITreeRange Format(ITreeNode firstElement, ITreeNode lastElement, CodeFormatProfile profile, AdditionalFormatterParameters parameters);
    public virtual string get_OverridenSettingPrefix();
    public virtual void FormatInsertedNodes(ITreeNode nodeFirst, ITreeNode nodeLast, bool formatSurround, bool indentSurround);
    public virtual ITreeRange FormatInsertedRange(ITreeNode nodeFirst, ITreeNode nodeLast, ITreeRange origin);
    public virtual void FormatReplacedNode(ITreeNode oldNode, ITreeNode newNode);
    public virtual void FormatReplacedRange(ITreeNode first, ITreeNode last, ITreeRange oldNodes);
    public virtual void FormatDeletedNodes(ITreeNode parent, ITreeNode prevNode, ITreeNode nextNode);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Protobuf.ProtobufLanguage", "16")]
internal class JetBrains.ReSharper.Psi.Protobuf.CodeStyle.ProtobufFormattingInfoProvider : FormatterInfoProviderWithFluentApi`2<CodeFormattingContext, ProtobufCodeFormattingSettingsKey> {
    public ProjectFileType MainProjectFileType { get; }
    public ProtobufFormattingInfoProvider(ISettingsSchema settingsSchema, ICalculatedSettingsSchema calculatedSettingsSchema, IThreading threading, Lifetime lifetime);
    protected virtual void Initialize();
    public virtual ProjectFileType get_MainProjectFileType();
}
[SettingsKeyAttribute("JetBrains.ReSharper.Psi.CodeStyle.CodeFormattingSettingsKey", "JetBrains.ReSharper.Psi.Protobuf.Resources.Strings", "CodeFormattingInProtobufSettingDescription")]
[EditorConfigKeyAttribute("protobuf")]
public class JetBrains.ReSharper.Psi.Protobuf.CodeStyle.Style.ProtobufCodeFormattingSettingsKey : FormatSettingsKeyBase {
    [EditorConfigEntryAliasAttribute("brace_style", "2")]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Protobuf.Resources.Strings", "CurlyBracesNotInOptionsSettingDescription")]
public BraceFormatStyle NOT_OPTIONS_BRACES;
    [EditorConfigEntryAliasAttribute("brace_style", "2")]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Protobuf.Resources.Strings", "CurlyPointyBracesInAggregateValuesInOptionsSettingDescription")]
public BraceFormatStyle OPTIONS_BRACES;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Protobuf.Resources.Strings", "EmptyBlockStyleSettingDescription")]
public EmptyBlockStyle EMPTY_BLOCK_STYLE;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Protobuf.Resources.Strings", "SimpleBlocksSettingDescription")]
public SimpleEmbeddedStatementStyle SIMPLE_BLOCKS;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Protobuf.Resources.Strings", "UsePointyBracesInAggregateOptionsSettingDescription")]
public bool OPTIONS_BRACES_POINTY;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Protobuf.Resources.Strings", "AroundInFieldsAndOptionsSettingDescription")]
public bool SPACE_EQUALS;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Protobuf.Resources.Strings", "BeforeInAggregateOptionsSettingDescription")]
public bool SPACE_COLON_BEFORE;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Protobuf.Resources.Strings", "AfterInAggregateOptionsSettingDescription")]
public bool SPACE_COLON_AFTER;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Protobuf.Resources.Strings", "AfterCommaInOptionsSettingDescription")]
public bool SPACE_COMMA;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Protobuf.Resources.Strings", "InsideCurlyPointyBracesSettingDescription")]
public bool SPACE_INSIDE_BRACES;
}
public class JetBrains.ReSharper.Psi.Protobuf.Gen.ErrorMessages : object {
    private static string ourMessage_0;
    private static string ourMessage_1;
    private static string ourMessage_2;
    private static string ourMessage_3;
    private static string ourMessage_4;
    private static string ourMessage_5;
    private static string ourMessage_6;
    private static string ourMessage_7;
    private static string ourMessage_8;
    private static string ourMessage_9;
    private static string ourMessage_10;
    private static string ourMessage_11;
    private static string ourMessage_12;
    private static string ourMessage_13;
    private static string ourMessage_14;
    private static string ourMessage_15;
    private static string ourMessage_16;
    private static string ourMessage_17;
    private static string ourMessage_18;
    private static string ourMessage_19;
    private static string ourMessage_20;
    private static string ourMessage_21;
    private static string ourMessage_22;
    private static string ourMessage_23;
    private static string ourMessage_24;
    private static string ourMessage_25;
    private static string ourMessage_26;
    private static string ourMessage_27;
    private static string ourMessage_28;
    private static string ourMessage_29;
    private static string ourMessage_30;
    private static string ourMessage_31;
    private static string ourMessage_32;
    private static string ourMessage_33;
    private static string ourMessage_34;
    private static string ourMessage_35;
    private static string ourMessage_36;
    private static string ourMessage_37;
    private static string ourMessage_38;
    private static string ourMessage_39;
    private static string ourMessage_40;
    private static string ourMessage_41;
    private static string ourMessage_42;
    private static string ourMessage_43;
    private static string ourMessage_44;
    private static string ourMessage_45;
    private static string ourMessage_46;
    private static string ourMessage_47;
    private static string ourMessage_48;
    private static string ourMessage_49;
    private static string ourMessage_50;
    private static string ourMessage_51;
    private static string ourMessage_52;
    private static string ourMessage_53;
    private static string ourMessage_54;
    private static string ourMessage_55;
    private static string ourMessage_56;
    private static string ourMessage_57;
    private static string ourMessage_58;
    private static string ourMessage_59;
    public static string GetErrorMessage0();
    public static string GetErrorMessage1();
    public static string GetErrorMessage2();
    public static string GetErrorMessage3();
    public static string GetErrorMessage4();
    public static string GetErrorMessage5();
    public static string GetErrorMessage6();
    public static string GetErrorMessage7();
    public static string GetErrorMessage8();
    public static string GetErrorMessage9();
    public static string GetErrorMessage10();
    public static string GetErrorMessage11();
    public static string GetErrorMessage12();
    public static string GetErrorMessage13();
    public static string GetErrorMessage14();
    public static string GetErrorMessage15();
    public static string GetErrorMessage16();
    public static string GetErrorMessage17();
    public static string GetErrorMessage18();
    public static string GetErrorMessage19();
    public static string GetErrorMessage20();
    public static string GetErrorMessage21();
    public static string GetErrorMessage22();
    public static string GetErrorMessage23();
    public static string GetErrorMessage24();
    public static string GetErrorMessage25();
    public static string GetErrorMessage26();
    public static string GetErrorMessage27();
    public static string GetErrorMessage28();
    public static string GetErrorMessage29();
    public static string GetErrorMessage30();
    public static string GetErrorMessage31();
    public static string GetErrorMessage32();
    public static string GetErrorMessage33();
    public static string GetErrorMessage34();
    public static string GetErrorMessage35();
    public static string GetErrorMessage36();
    public static string GetErrorMessage37();
    public static string GetErrorMessage38();
    public static string GetErrorMessage39();
    public static string GetErrorMessage40();
    public static string GetErrorMessage41();
    public static string GetErrorMessage42();
    public static string GetErrorMessage43();
    public static string GetErrorMessage44();
    public static string GetErrorMessage45();
    public static string GetErrorMessage46();
    public static string GetErrorMessage47();
    public static string GetErrorMessage48();
    public static string GetErrorMessage49();
    public static string GetErrorMessage50();
    public static string GetErrorMessage51();
    public static string GetErrorMessage52();
    public static string GetErrorMessage53();
    public static string GetErrorMessage54();
    public static string GetErrorMessage55();
    public static string GetErrorMessage56();
    public static string GetErrorMessage57();
    public static string GetErrorMessage58();
    public static string GetErrorMessage59();
}
internal abstract class JetBrains.ReSharper.Psi.Protobuf.Gen.ProtobufParserGenerated : GeneratedParserBase`1<ILexer> {
    protected ParsingContext myCurrentContext;
    protected bool IsInFollow(TokenNodeType tokenType);
    protected virtual TreeElement Match(TokenNodeType tokenType);
    protected void Skip(CompositeElement parent);
    protected virtual void SkipErrorToken(CompositeElement parent);
    public virtual TreeElement ParseAggregateOptionIdentifier();
    protected virtual CompositeElement HandleErrorInAggregateOptionIdentifier(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseAnyTokenNotRcurly();
    public virtual TreeElement ParseBracketedOption();
    protected virtual CompositeElement HandleErrorInBracketedOption(CompositeElement result, SyntaxError error);
    public virtual void ParseConstant(CompositeElement result);
    public virtual void ParseCurlyBracketedOptions(CompositeElement result);
    protected virtual CompositeElement HandleErrorInCurlyBracketedOptions(CompositeElement result, SyntaxError error);
    public virtual void ParseCurlyBracketedOptionsInner(CompositeElement result);
    protected virtual CompositeElement HandleErrorInCurlyBracketedOptionsInner(CompositeElement result, SyntaxError error);
    public virtual void ParseEmptyStatement(CompositeElement result);
    public virtual TreeElement ParseEnumBody();
    protected virtual CompositeElement HandleErrorInEnumBody(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseEnumDeclaration();
    protected virtual CompositeElement HandleErrorInEnumDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseEnumField();
    protected virtual CompositeElement HandleErrorInEnumField(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseEnumValueReference();
    public abstract virtual TreeElement ParseErrorStatement();
    public abstract virtual TreeElement ParseErrorStatementNoRcurly();
    public virtual TreeElement ParseExtendStatement();
    protected virtual CompositeElement HandleErrorInExtendStatement(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseExtensionRange();
    protected virtual CompositeElement HandleErrorInExtensionRange(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseExtensions();
    protected virtual CompositeElement HandleErrorInExtensions(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseFieldDeclaration();
    protected virtual CompositeElement HandleErrorInFieldDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseFieldOrExtensionReference();
    public virtual void ParseField_declarator(CompositeElement result);
    public virtual TreeElement ParseFullIdentifier();
    public virtual TreeElement ParseGroupFieldDeclaration();
    protected virtual CompositeElement HandleErrorInGroupFieldDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseIdentifier();
    public virtual TreeElement ParseImportStatement();
    protected virtual CompositeElement HandleErrorInImportStatement(CompositeElement result, SyntaxError error);
    public virtual void ParseImport_specifier(CompositeElement result);
    public virtual TreeElement ParseMapArguments();
    protected virtual CompositeElement HandleErrorInMapArguments(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseMaybeStreamedType();
    public virtual TreeElement ParseMessageBody();
    protected virtual CompositeElement HandleErrorInMessageBody(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseMessageDeclaration();
    protected virtual CompositeElement HandleErrorInMessageDeclaration(CompositeElement result, SyntaxError error);
    public virtual void ParseOneLineOption(CompositeElement result);
    protected virtual CompositeElement HandleErrorInOneLineOption(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseOneofDeclaration();
    protected virtual CompositeElement HandleErrorInOneofDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseOptionAggregateBlock();
    protected virtual CompositeElement HandleErrorInOptionAggregateBlock(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseOptionAggregateOption();
    protected virtual CompositeElement HandleErrorInOptionAggregateOption(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseOptionIdentifier();
    public virtual TreeElement ParseOptionIdentifierPart();
    protected virtual CompositeElement HandleErrorInOptionIdentifierPart(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseOptionsOrSemicolon();
    protected virtual CompositeElement HandleErrorInOptionsOrSemicolon(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParsePackageDeclaredElementPart();
    public virtual TreeElement ParsePackageStatement();
    protected virtual CompositeElement HandleErrorInPackageStatement(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseProtobufFile();
    protected virtual CompositeElement HandleErrorInProtobufFile(CompositeElement result, SyntaxError error);
    public abstract virtual TreeElement ParseProtobufType();
    protected virtual TreeElement ParseProtobufTypeInternal();
    public virtual TreeElement ParseRealFieldDeclaration();
    protected virtual CompositeElement HandleErrorInRealFieldDeclaration(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseReserved();
    protected virtual CompositeElement HandleErrorInReserved(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseReservedValue();
    protected virtual CompositeElement HandleErrorInReservedValue(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseRpcDefinition();
    protected virtual CompositeElement HandleErrorInRpcDefinition(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseServiceDefinition();
    protected virtual CompositeElement HandleErrorInServiceDefinition(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseSingleOption();
    public virtual TreeElement ParseStreamDefinition();
    protected virtual CompositeElement HandleErrorInStreamDefinition(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseSyntaxDeclaration();
    protected virtual CompositeElement HandleErrorInSyntaxDeclaration(CompositeElement result, SyntaxError error);
}
public static class JetBrains.ReSharper.Psi.Protobuf.Gen.TokenBitsets : object {
    public static NodeTypeSet TokenBitset_0;
    public static NodeTypeSet TokenBitset_1;
    public static NodeTypeSet TokenBitset_2;
    public static NodeTypeSet TokenBitset_3;
    public static NodeTypeSet TokenBitset_4;
    public static NodeTypeSet TokenBitset_5;
    public static NodeTypeSet TokenBitset_6;
    public static NodeTypeSet TokenBitset_7;
    public static NodeTypeSet TokenBitset_8;
    public static NodeTypeSet TokenBitset_9;
    public static NodeTypeSet TokenBitset_10;
    public static NodeTypeSet TokenBitset_11;
    public static NodeTypeSet TokenBitset_12;
    public static NodeTypeSet TokenBitset_13;
    public static NodeTypeSet TokenBitset_14;
    public static NodeTypeSet TokenBitset_15;
    public static NodeTypeSet TokenBitset_16;
    public static NodeTypeSet ElementBitset_0;
    public static NodeTypeSet ElementBitset_1;
    public static NodeTypeSet ElementBitset_2;
    public static NodeTypeSet ElementBitset_3;
    public static NodeTypeSet ElementBitset_4;
    private static TokenBitsets();
}
[ZoneDefinitionAttribute]
[ZoneDefinitionConfigurableFeatureAttribute("Protobuf", "Support for Google Protocol Buffers in .proto files", "False")]
public interface JetBrains.ReSharper.Psi.Protobuf.ILanguageProtobufZone {
}
public class JetBrains.ReSharper.Psi.Protobuf.Impl.DeclaredElement.ExtendInfo : object {
    public IReferencePointer Pointer;
    public ITreeNodePointer`1<IExtendStatement> NodePointer;
    public HashSet`1<ulong> UsedNumbers;
    public ExtendInfo(IExtendStatement decl);
}
public enum JetBrains.ReSharper.Psi.Protobuf.Impl.DeclaredElement.FieldDeclarator : Enum {
    public byte value__;
    public static FieldDeclarator Required;
    public static FieldDeclarator Optional;
    public static FieldDeclarator Repeated;
}
public enum JetBrains.ReSharper.Psi.Protobuf.Impl.DeclaredElement.FieldType : Enum {
    public byte value__;
    public static FieldType Builtin;
    public static FieldType Map;
    public static FieldType Named;
    public static FieldType Group;
}
public class JetBrains.ReSharper.Psi.Protobuf.Impl.DeclaredElement.ProtobufBuiltinType : ProtobufDeclaredElementBase {
    internal ProtobufBuiltinType(string fullName, IPsiSourceFile sourceFile);
    public virtual DeclaredElementType GetElementType();
    public virtual int GetHashCode();
    public virtual bool Equals(object otherObject);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Psi.Protobuf.Impl.DeclaredElement.ProtobufBuiltinTypeRegistry : object {
    private Dictionary`2<string, ProtobufBuiltinType> myBuiltinTypes;
    private IPsiModules myPsiModules;
    public ProtobufBuiltinTypeRegistry(IPsiModules modules);
    public ProtobufBuiltinType GetNamedBuiltinType(string name);
}
public abstract class JetBrains.ReSharper.Psi.Protobuf.Impl.DeclaredElement.ProtobufDeclaredElementBase : object {
    private IPsiSourceFile mySourceFile;
    private int myTreeOffset;
    private ITreeNodePointer`1<IDeclaration> myPointer;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnclosingType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    public IPsiSourceFile SourceFile { get; }
    public string FullName { get; }
    public string EnclosingType { get; }
    public string ShortName { get; }
    public bool CaseSensitiveName { get; }
    public int TreeOffset { get; }
    public PsiLanguageType PresentationLanguage { get; }
    protected ProtobufDeclaredElementBase(string shortName, ProtobufDeclarationBase element);
    protected ProtobufDeclaredElementBase(string shortName, ProtobufDeclarationBase element, ProtobufDeclarationBase enclosingSource);
    protected ProtobufDeclaredElementBase(string shortName, ProtobufDeclarationBase element, string enclosingContext);
    protected ProtobufDeclaredElementBase(string fullName, string enclosingType, IPsiSourceFile source, int treeOffset);
    public IPsiSourceFile get_SourceFile();
    [CompilerGeneratedAttribute]
public sealed virtual string get_FullName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_EnclosingType();
    public sealed virtual IPsiServices GetPsiServices();
    public sealed virtual IList`1<IDeclaration> GetDeclarations();
    public sealed virtual IList`1<IDeclaration> GetDeclarationsIn(IPsiSourceFile sourceFile);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ShortName();
    public sealed virtual bool get_CaseSensitiveName();
    public abstract virtual DeclaredElementType GetElementType();
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
    public sealed virtual XmlNode GetXMLDescriptionSummary(bool inherit);
    public sealed virtual bool IsValid();
    public sealed virtual bool IsSynthetic();
    public int get_TreeOffset();
    public sealed virtual PsiLanguageType get_PresentationLanguage();
    public sealed virtual HybridCollection`1<IPsiSourceFile> GetSourceFiles();
    public sealed virtual bool HasDeclarationsIn(IPsiSourceFile sourceFile);
    public virtual void WriteExtra(UnsafeWriter writer);
    public sealed virtual bool Equals(ProtobufDeclaredElementBase other);
    public virtual bool Equals(object otherObject);
    public virtual ISymbolTable GetSymbolTable(SymbolTableMode mode, int level);
    private int GetOffset();
    public virtual int GetHashCode();
}
[PsiSharedComponentAttribute]
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.DeclaredElement.ProtobufDeclaredElementPresenter : object {
    public virtual RichText Format(DeclaredElementPresenterStyle style, IDeclaredElement element, ISubstitution substitution, DeclaredElementPresenterMarking& marking);
    public virtual string Format(ParameterKind parameterKind);
    public virtual string Format(AccessRights accessRights);
    public virtual string GetEntityKind(IDeclaredElement declaredElement);
}
public class JetBrains.ReSharper.Psi.Protobuf.Impl.DeclaredElement.ProtobufDeclaredElementType : DeclaredElementType {
    public static ProtobufDeclaredElementType EnumValue;
    public static ProtobufDeclaredElementType OneOf;
    public static ProtobufDeclaredElementType EnumType;
    public static ProtobufDeclaredElementType Message;
    public static ProtobufDeclaredElementType Field;
    public static ProtobufDeclaredElementType Package;
    public static ProtobufDeclaredElementType ExtensionField;
    public static ProtobufDeclaredElementType Builtin;
    public static ProtobufDeclaredElementType Service;
    public static ProtobufDeclaredElementType Method;
    private IconId myIconId;
    [CompilerGeneratedAttribute]
private string <PresentableName>k__BackingField;
    public string PresentableName { get; }
    protected IDeclaredElementPresenter DefaultPresenter { get; }
    private ProtobufDeclaredElementType(string name, IconId iconId);
    private static ProtobufDeclaredElementType();
    [CompilerGeneratedAttribute]
public virtual string get_PresentableName();
    public virtual IconId GetImage();
    protected virtual IDeclaredElementPresenter get_DefaultPresenter();
    public virtual bool IsPresentable(PsiLanguageType language);
    public static ProtobufDeclaredElementBase CreateFromType(UnsafeReader reader, string type, string fqn, string enclosingType, IPsiSourceFile sourceFile, int treeOffset);
}
public class JetBrains.ReSharper.Psi.Protobuf.Impl.DeclaredElement.ProtobufEnumDeclaration : ProtobufDeclaredElementBase {
    private HashSet`1<long> myValues;
    public ProtobufEnumDeclaration(string shortName, ProtobufDeclarationBase element);
    public ProtobufEnumDeclaration(UnsafeReader reader, string fullName, string enclosingType, IPsiSourceFile source, int treeOffset);
    public virtual void WriteExtra(UnsafeWriter writer);
    public virtual DeclaredElementType GetElementType();
    public bool HasValue(long value);
    public virtual ISymbolTable GetSymbolTable(SymbolTableMode mode, int level);
}
public class JetBrains.ReSharper.Psi.Protobuf.Impl.DeclaredElement.ProtobufEnumFieldDeclaration : ProtobufDeclaredElementBase {
    private string myEnumFqn;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    public string DeclaringEnumFQN { get; }
    internal ProtobufEnumFieldDeclaration(string shortName, EnumField element);
    public ProtobufEnumFieldDeclaration(UnsafeReader reader, string fullName, string enclosingType, IPsiSourceFile source, int treeOffset);
    public virtual void WriteExtra(UnsafeWriter writer);
    public virtual DeclaredElementType GetElementType();
    [CompilerGeneratedAttribute]
public string get_Value();
    public string get_DeclaringEnumFQN();
}
public class JetBrains.ReSharper.Psi.Protobuf.Impl.DeclaredElement.ProtobufExtensionFieldDeclaration : ProtobufFieldDeclaration {
    [CompilerGeneratedAttribute]
private string <ExtendedType>k__BackingField;
    private string myFullExtendedType;
    public string ExtendedType { get; }
    public string FullExtendedType { get; }
    internal ProtobufExtensionFieldDeclaration(string shortName, FieldDeclaration element);
    public ProtobufExtensionFieldDeclaration(UnsafeReader reader, string fullName, string enclosingType, IPsiSourceFile source, int treeOffset);
    public virtual void WriteExtra(UnsafeWriter writer);
    [CompilerGeneratedAttribute]
public string get_ExtendedType();
    public string get_FullExtendedType();
    public virtual DeclaredElementType GetElementType();
}
public class JetBrains.ReSharper.Psi.Protobuf.Impl.DeclaredElement.ProtobufFieldDeclaration : ProtobufDeclaredElementBase {
    [CompilerGeneratedAttribute]
private ulong <FieldNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldDeclarator <Declarator>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldType <Type>k__BackingField;
    private ISymbolTable mySymbolTable;
    private string myFullTypeName;
    public ulong FieldNumber { get; }
    public string FieldTypeName { get; }
    public FieldDeclarator Declarator { get; }
    public FieldType Type { get; }
    public ProtobufDeclaredElementBase FullType { get; }
    public string FullTypeName { get; }
    internal ProtobufFieldDeclaration(string shortName, FieldDeclaration element);
    public ProtobufFieldDeclaration(UnsafeReader reader, string fullName, string enclosingType, IPsiSourceFile source, int treeOffset);
    public virtual void WriteExtra(UnsafeWriter writer);
    [CompilerGeneratedAttribute]
public ulong get_FieldNumber();
    [CompilerGeneratedAttribute]
public string get_FieldTypeName();
    [CompilerGeneratedAttribute]
public FieldDeclarator get_Declarator();
    [CompilerGeneratedAttribute]
public FieldType get_Type();
    public virtual DeclaredElementType GetElementType();
    public virtual ISymbolTable GetSymbolTable(SymbolTableMode mode, int level);
    public ProtobufDeclaredElementBase get_FullType();
    public string get_FullTypeName();
}
public class JetBrains.ReSharper.Psi.Protobuf.Impl.DeclaredElement.ProtobufMessageDeclaration : ProtobufDeclaredElementBase {
    private ExtensionRange myExtensions;
    public static ulong MaxFieldNumberMessageSet;
    public static ulong MaxFieldNumberNormal;
    [CompilerGeneratedAttribute]
private ulong <MaxExtensionValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMessageSet>k__BackingField;
    public ulong MaxExtensionValue { get; }
    public bool IsMessageSet { get; }
    public ProtobufMessageDeclaration(UnsafeReader reader, string fullName, string enclosingType, IPsiSourceFile source, int treeOffset);
    internal ProtobufMessageDeclaration(string shortName, IMessageLikeDeclaration element);
    private static ProtobufMessageDeclaration();
    public virtual void WriteExtra(UnsafeWriter writer);
    private ISymbolTable BuildSymbolTable(int level);
    public virtual ISymbolTable GetSymbolTable(SymbolTableMode mode, int level);
    [CompilerGeneratedAttribute]
public ulong get_MaxExtensionValue();
    [CompilerGeneratedAttribute]
public bool get_IsMessageSet();
    public bool IsFieldNumberInExtensions(ulong number);
    public bool HasExtensions();
    public virtual DeclaredElementType GetElementType();
}
public class JetBrains.ReSharper.Psi.Protobuf.Impl.DeclaredElement.ProtobufMethodDeclaration : ProtobufDeclaredElementBase {
    public ProtobufMethodDeclaration(string shortName, ProtobufDeclarationBase element);
    public ProtobufMethodDeclaration(string fullName, string enclosingType, IPsiSourceFile source, int treeOffset);
    public virtual DeclaredElementType GetElementType();
}
public class JetBrains.ReSharper.Psi.Protobuf.Impl.DeclaredElement.ProtobufOneofDeclaration : ProtobufDeclaredElementBase {
    public ProtobufOneofDeclaration(string shortName, ProtobufDeclarationBase element);
    public ProtobufOneofDeclaration(string fullName, string enclosingType, IPsiSourceFile source, int treeOffset);
    public virtual DeclaredElementType GetElementType();
}
public class JetBrains.ReSharper.Psi.Protobuf.Impl.DeclaredElement.ProtobufPackageDeclaration : ProtobufDeclaredElementBase {
    private ISymbolTable mySymbolTable;
    internal ProtobufPackageDeclaration(string shortName, ProtobufDeclarationBase element);
    public ProtobufPackageDeclaration(string fullName, string enclosingType, IPsiSourceFile source, int treeOffset);
    private static string FindEnclosingContext(IProtobufTreeNode element);
    private ISymbolTable BuildSymbolTable(int level);
    public virtual ISymbolTable GetSymbolTable(SymbolTableMode mode, int level);
    public virtual DeclaredElementType GetElementType();
}
public class JetBrains.ReSharper.Psi.Protobuf.Impl.DeclaredElement.ProtobufPackageGroup : object {
    private IList`1<ProtobufPackageDeclaration> myPackages;
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    public string ShortName { get; }
    public bool CaseSensitiveName { get; }
    public PsiLanguageType PresentationLanguage { get; }
    public string FullName { get; }
    public string EnclosingType { get; }
    public ProtobufPackageGroup(IList`1<ProtobufPackageDeclaration> packages);
    public sealed virtual IPsiServices GetPsiServices();
    public sealed virtual IList`1<IDeclaration> GetDeclarations();
    public sealed virtual IList`1<IDeclaration> GetDeclarationsIn(IPsiSourceFile sourceFile);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ShortName();
    public sealed virtual bool get_CaseSensitiveName();
    public sealed virtual DeclaredElementType GetElementType();
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
    public sealed virtual XmlNode GetXMLDescriptionSummary(bool inherit);
    public sealed virtual bool IsValid();
    public sealed virtual bool IsSynthetic();
    public sealed virtual PsiLanguageType get_PresentationLanguage();
    public sealed virtual HybridCollection`1<IPsiSourceFile> GetSourceFiles();
    public sealed virtual bool HasDeclarationsIn(IPsiSourceFile sourceFile);
    public sealed virtual string get_FullName();
    public sealed virtual string get_EnclosingType();
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode, int level);
}
public class JetBrains.ReSharper.Psi.Protobuf.Impl.DeclaredElement.ProtobufServiceDeclaration : ProtobufDeclaredElementBase {
    public ProtobufServiceDeclaration(string shortName, ProtobufDeclarationBase element);
    public ProtobufServiceDeclaration(string fullName, string enclosingType, IPsiSourceFile source, int treeOffset);
    public virtual DeclaredElementType GetElementType();
    public virtual ISymbolTable GetSymbolTable(SymbolTableMode mode, int level);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.ReSharper.Psi.Protobuf.Impl.ExtensionRange : object {
    private SortedSet`1<Pair`2<ulong, ulong>> myIntervals;
    public bool IsEmpty { get; }
    public int Count { get; }
    public bool Item { get; }
    public bool AddRange(ulong start, ulong end);
    public bool CanAdd(ulong start, ulong end);
    public bool get_IsEmpty();
    public int get_Count();
    public bool AddSingle(ulong num);
    public IEnumerator`1<Pair`2<ulong, ulong>> GetEnumerator();
    public bool get_Item(ulong key);
}
public class JetBrains.ReSharper.Psi.Protobuf.Impl.ProtobufFileAttributes : ValueType {
    [CompilerGeneratedAttribute]
private ProtobufVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private ProtobufCompilaionMode <Optimize>k__BackingField;
    public ProtobufVersion Version { get; }
    public ProtobufCompilaionMode Optimize { get; }
    public ProtobufFileAttributes(IProtobufFile file);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ProtobufVersion get_Version();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ProtobufCompilaionMode get_Optimize();
}
public class JetBrains.ReSharper.Psi.Protobuf.Impl.PsiModules.DescriptorProtoSourceFile : UserDataHolder {
    private IInMemoryDocumentFactory myDocumentFactory;
    private JetWeakReference`1<IDocument> myDocument;
    private string ResourceName;
    [CompilerGeneratedAttribute]
private IPsiModule <PsiModule>k__BackingField;
    private PsiSourceFileStorage myPsiSourceFileStorage;
    public IPsiModule PsiModule { get; }
    public IDocument Document { get; }
    public string Name { get; }
    public string DisplayName { get; }
    public ProjectFileType LanguageType { get; }
    public PsiLanguageType PrimaryPsiLanguage { get; }
    public IPsiSourceFileProperties Properties { get; }
    public IPsiSourceFileStorage PsiStorage { get; }
    public Nullable`1<ModificationStamp> InMemoryModificationStamp { get; }
    public Nullable`1<ModificationStamp> ExternalModificationStamp { get; }
    public DateTime LastWriteTimeUtc { get; }
    public IModuleReferenceResolveContext ResolveContext { get; }
    public DescriptorProtoSourceFile(IInMemoryDocumentFactory documentFactory, IPsiModule psiModule);
    private IDocument CreateDocument(string name);
    public sealed virtual bool IsValid();
    [CompilerGeneratedAttribute]
public sealed virtual IPsiModule get_PsiModule();
    public sealed virtual IDocument get_Document();
    public sealed virtual string get_Name();
    public sealed virtual string get_DisplayName();
    public sealed virtual string GetPersistentID();
    public sealed virtual ProjectFileType get_LanguageType();
    public sealed virtual PsiLanguageType get_PrimaryPsiLanguage();
    public sealed virtual IPsiSourceFileProperties get_Properties();
    public sealed virtual IPsiSourceFileStorage get_PsiStorage();
    public sealed virtual Nullable`1<ModificationStamp> get_InMemoryModificationStamp();
    public sealed virtual Nullable`1<ModificationStamp> get_ExternalModificationStamp();
    public sealed virtual DateTime get_LastWriteTimeUtc();
    public sealed virtual IModuleReferenceResolveContext get_ResolveContext();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.PsiModules.DescriptorProtoSourceFileProperties : object {
    public static IPsiSourceFileProperties Instance;
    public bool ShouldBuildPsi { get; }
    public bool IsGeneratedFile { get; }
    public bool ProvidesCodeModel { get; }
    public bool IsNonUserFile { get; }
    public bool IsICacheParticipant { get; }
    private static DescriptorProtoSourceFileProperties();
    public sealed virtual bool get_ShouldBuildPsi();
    public sealed virtual bool get_IsGeneratedFile();
    public sealed virtual bool get_ProvidesCodeModel();
    public sealed virtual bool get_IsNonUserFile();
    public sealed virtual bool get_IsICacheParticipant();
    public sealed virtual IEnumerable`1<string> GetPreImportedNamespaces();
    public sealed virtual string GetDefaultNamespace();
    public sealed virtual ICollection`1<PreProcessingDirective> GetDefines();
}
public class JetBrains.ReSharper.Psi.Protobuf.Impl.PsiModules.ProtobufDescriptorModule : UserDataHolder {
    private ISolution mySolution;
    private IPsiSourceFile mySource;
    public static string ModulePersistentId;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public string DisplayName { get; }
    public TargetFrameworkId TargetFrameworkId { get; }
    public PsiLanguageType PsiLanguage { get; }
    public ProjectFileType ProjectFileType { get; }
    public IModule ContainingProjectModule { get; }
    public IEnumerable`1<IPsiSourceFile> SourceFiles { get; }
    public ProtobufDescriptorModule(ISolution solution, string name, IInMemoryDocumentFactory documentFactory);
    private static ProtobufDescriptorModule();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public sealed virtual string get_DisplayName();
    public sealed virtual TargetFrameworkId get_TargetFrameworkId();
    public sealed virtual IPsiServices GetPsiServices();
    public sealed virtual ISolution GetSolution();
    public sealed virtual PsiLanguageType get_PsiLanguage();
    public sealed virtual ProjectFileType get_ProjectFileType();
    public sealed virtual IEnumerable`1<IPsiModuleReference> GetReferences(IModuleReferenceResolveContext moduleReferenceResolveContext);
    public sealed virtual IModule get_ContainingProjectModule();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.Protobuf.Impl.PsiModules.ProtobufDescriptorModule/<get_SourceFiles>d__21")]
public sealed virtual IEnumerable`1<IPsiSourceFile> get_SourceFiles();
    public sealed virtual ICollection`1<PreProcessingDirective> GetAllDefines();
    public sealed virtual bool IsValid();
    public sealed virtual string GetPersistentID();
}
[PsiModuleFactoryAttribute("0")]
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.PsiModules.ProtobufExternalModulesFactory : object {
    [CompilerGeneratedAttribute]
private IPsiModule <Module>k__BackingField;
    [CompilerGeneratedAttribute]
private HybridCollection`1<IPsiModule> <Modules>k__BackingField;
    public IPsiModule Module { get; }
    public HybridCollection`1<IPsiModule> Modules { get; }
    public ProtobufExternalModulesFactory(ISolution solution, IInMemoryDocumentFactory factory);
    [CompilerGeneratedAttribute]
public IPsiModule get_Module();
    [CompilerGeneratedAttribute]
public sealed virtual HybridCollection`1<IPsiModule> get_Modules();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Resolve.OptionSymbolTable : object {
    private IPsiServices myServices;
    private OptionContext myContext;
    private IDeclaredElement myContainingField;
    private ISymbolInfo mySymbolInfo;
    public OptionSymbolTable(IPsiServices services, OptionContext context, IDeclaredElement containingField);
    public sealed virtual IEnumerable`1<string> Names();
    public sealed virtual IList`1<ISymbolInfo> GetSymbolInfos(string name);
    public sealed virtual void AppendSymbolInfos(string name, List`1<ISymbolInfo> consumer);
    public sealed virtual IList`1<ISymbolInfo> GetSymbolInfosConstitutingResolveResult(string name, IResolveInfo& resolveInfo);
    public sealed virtual void ForAllSymbolInfos(Action`1<ISymbolInfo> processor);
    public sealed virtual bool ForAllSymbolInfos(TState state, Func`3<TState, ISymbolInfo, bool> processor);
    public sealed virtual ISymbolTableDependencySet GetDependencySet();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Resolve.ProtobufBuiltinReference : ProtobufReferenceBase {
    private ProtobufBuiltinType myBuiltinType;
    internal ProtobufBuiltinReference(ITreeNode owner, ProtobufBuiltinType builtinType);
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public virtual ResolveResultWithInfo ResolveWithoutCache(ISymbolTable symbolTable, IAccessContext context);
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Resolve.ProtobufEnumValueReference : ProtobufReferenceBase {
    public ProtobufEnumValueReference(ITreeNode owner, IQualifier qualifier);
    protected virtual bool ResolveFilter(IDeclaredElement element);
}
public class JetBrains.ReSharper.Psi.Protobuf.Impl.Resolve.ProtobufFieldReference : ProtobufReferenceBase {
    public ProtobufFieldReference(ITreeNode owner, IQualifier qualifier);
    protected virtual bool ResolveFilter(IDeclaredElement element);
    protected virtual ProtobufReferenceBase CreateNewReference(ITreeNode element, IQualifier qualifier);
}
public class JetBrains.ReSharper.Psi.Protobuf.Impl.Resolve.ProtobufFileQualifier : object {
    private IPsiSourceFile myFile;
    private ProtobufDeclarationCache myCache;
    private ISymbolTable mySymbolTable;
    public bool Resolved { get; }
    public ProtobufFileQualifier(IPsiSourceFile file);
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public sealed virtual QualifierKind GetKind();
    public sealed virtual bool get_Resolved();
}
public class JetBrains.ReSharper.Psi.Protobuf.Impl.Resolve.ProtobufImportReference : TreeReferenceBase`1<IImportStatement> {
    private string myName;
    private TreeTextRange myRange;
    private IQualifier myQualifier;
    private IPsiSourceFile mySourceFile;
    public bool ShouldResolveInGlobalTable { get; }
    public bool IsQualified { get; }
    public bool Resolved { get; }
    public ProtobufImportReference(IImportStatement treeNode, string filename, IQualifier qualifier, TreeTextRange range);
    public virtual string GetName();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    private ISymbolTable WithParentElement(DeclaredElementsSymbolTable`1<PathDeclaredElement> sameFolderTable, IProjectItem projectFile);
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public virtual TreeTextRange GetTreeTextRange();
    public virtual IReference BindTo(IDeclaredElement element);
    public virtual IReference BindTo(IDeclaredElement element, ISubstitution substitution);
    public virtual IAccessContext GetAccessContext();
    public virtual bool IsValid();
    public sealed virtual ISymbolTable GetCompletionSymbolTable();
    private ResolveResultWithInfo ResolveWithoutCache(ISymbolTable symbolTable, IAccessContext context);
    public sealed virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    public sealed virtual bool get_ShouldResolveInGlobalTable();
    public sealed virtual bool get_IsQualified();
    public sealed virtual IQualifier GetQualifier();
    public sealed virtual VirtualFileSystemPath GetBasePath();
    public sealed virtual ISymbolFilter[] GetPathFilters();
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public sealed virtual QualifierKind GetKind();
    public sealed virtual bool get_Resolved();
    [CompilerGeneratedAttribute]
private PathDeclaredElement <GetReferenceSymbolTable>b__6_1(IProjectItem file);
    [CompilerGeneratedAttribute]
private PathDeclaredElement <GetSymbolTable>b__24_0(IProjectItem item);
}
public class JetBrains.ReSharper.Psi.Protobuf.Impl.Resolve.ProtobufOptionQualifier : object {
    private ProtobufDeclaredElementBase myDeclaredElement;
    private ProtobufFieldDeclaration myFieldDeclaredElement;
    public bool Resolved { get; }
    public ProtobufOptionQualifier(ProtobufDeclaredElementBase declaredElement, ProtobufFieldDeclaration fieldDeclaredElement);
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public sealed virtual QualifierKind GetKind();
    public sealed virtual bool get_Resolved();
}
public class JetBrains.ReSharper.Psi.Protobuf.Impl.Resolve.ProtobufReferenceBase : TreeReferenceBase`1<ITreeNode> {
    protected string enclosingContext;
    private string myName;
    private IPsiSourceFile mySourceFile;
    private IQualifier myQualifier;
    public IPsiSourceFile SourceFile { get; }
    public bool ShouldResolveInGlobalTable { get; }
    public bool IsQualified { get; }
    public bool Resolved { get; }
    internal ProtobufReferenceBase(ITreeNode owner, IQualifier qualifier);
    public IPsiSourceFile get_SourceFile();
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public virtual string GetName();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual TreeTextRange GetTreeTextRange();
    private string FindShortestName(IProtobufDeclaredElement declaredElement);
    public virtual IReference BindTo(IDeclaredElement element);
    public virtual IReference BindTo(IDeclaredElement element, ISubstitution substitution);
    protected virtual ProtobufReferenceBase CreateNewReference(ITreeNode element, IQualifier qualifier);
    protected virtual bool ResolveFilter(IDeclaredElement element);
    public virtual IAccessContext GetAccessContext();
    public virtual bool IsValid();
    public sealed virtual ISymbolTable GetCompletionSymbolTable();
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    public virtual ResolveResultWithInfo ResolveWithoutCache(ISymbolTable symbolTable, IAccessContext context);
    protected virtual bool PreResolveFilter(IDeclaredElement declaredElement);
    public sealed virtual bool get_ShouldResolveInGlobalTable();
    public sealed virtual bool get_IsQualified();
    public sealed virtual IQualifier GetQualifier();
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public sealed virtual QualifierKind GetKind();
    public sealed virtual bool get_Resolved();
}
public static class JetBrains.ReSharper.Psi.Protobuf.Impl.Resolve.ProtobufResolveUtil : object {
    public static string FindEnclosingType(ITreeNode node);
    public static IQualifier FindOptionQualifier(ITreeNode node);
}
public class JetBrains.ReSharper.Psi.Protobuf.Impl.Resolve.ProtobufTypeReference : ProtobufReferenceBase {
    private string myIgnoreType;
    public ProtobufTypeReference(ITreeNode owner, IQualifier qualifier);
    private ProtobufTypeReference(ITreeNode owner, IQualifier qualifier, string ignoreType);
    protected virtual bool PreResolveFilter(IDeclaredElement declaredElement);
    protected virtual bool ResolveFilter(IDeclaredElement element);
    protected virtual ProtobufReferenceBase CreateNewReference(ITreeNode element, IQualifier qualifier);
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.AggregateOptionIdentifier : ProtobufCompositeElement {
    public static short FIELD_NAME;
    public static short EXTENSION_NAME;
    private CachedPsiValue`1<ReferenceCollection> myCachedReferences;
    [CompilerGeneratedAttribute]
private IReference <LastReference>k__BackingField;
    public NodeType NodeType { get; }
    public IFieldOrExtensionReference ExtensionName { get; }
    public IIdentifier Name { get; }
    public IReference LastReference { get; private set; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IFieldOrExtensionReference get_ExtensionName();
    public virtual IIdentifier get_Name();
    public virtual IFieldOrExtensionReference SetExtensionName(IFieldOrExtensionReference param);
    public virtual IIdentifier SetName(IIdentifier param);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual IReference get_LastReference();
    [CompilerGeneratedAttribute]
private void set_LastReference(IReference value);
    public virtual ReferenceCollection GetFirstClassReferences();
    [CompilerGeneratedAttribute]
private ReferenceCollection <GetFirstClassReferences>b__21_0();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.AnyTokenNotRcurly : ProtobufCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.BracketedOption : ProtobufCompositeElement {
    public static short OPTION;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<ISingleOption> Options { get; }
    public TreeNodeEnumerable`1<ISingleOption> OptionsEnumerable { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<ISingleOption> get_Options();
    public virtual TreeNodeEnumerable`1<ISingleOption> get_OptionsEnumerable();
    public virtual string ToString();
}
public static class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.ChildRole : object {
    public static short LAST;
}
public static class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.ElementBitsets : object {
}
public abstract class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.ElementType : object {
    public static CompositeNodeType ERROR_ELEMENT;
    public static int ERROR_ELEMENT_NODE_TYPE_INDEX;
    public static CompositeNodeType AGGREGATE_OPTION_IDENTIFIER;
    public static int AGGREGATE_OPTION_IDENTIFIER_NODE_TYPE_INDEX;
    public static CompositeNodeType ANY_TOKEN_NOT_RCURLY;
    public static int ANY_TOKEN_NOT_RCURLY_NODE_TYPE_INDEX;
    public static CompositeNodeType BRACKETED_OPTION;
    public static int BRACKETED_OPTION_NODE_TYPE_INDEX;
    public static CompositeNodeType ENUM_BODY;
    public static int ENUM_BODY_NODE_TYPE_INDEX;
    public static CompositeNodeType ENUM_DECLARATION;
    public static int ENUM_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType ENUM_FIELD;
    public static int ENUM_FIELD_NODE_TYPE_INDEX;
    public static CompositeNodeType ENUM_VALUE_REFERENCE;
    public static int ENUM_VALUE_REFERENCE_NODE_TYPE_INDEX;
    public static NodeType _ERROR_STATEMENT;
    public static int _ERROR_STATEMENT_NODE_TYPE_INDEX;
    public static NodeType _ERROR_STATEMENT_NO_RCURLY;
    public static int _ERROR_STATEMENT_NO_RCURLY_NODE_TYPE_INDEX;
    public static CompositeNodeType EXTEND_STATEMENT;
    public static int EXTEND_STATEMENT_NODE_TYPE_INDEX;
    public static CompositeNodeType EXTENSION_RANGE;
    public static int EXTENSION_RANGE_NODE_TYPE_INDEX;
    public static CompositeNodeType EXTENSIONS;
    public static int EXTENSIONS_NODE_TYPE_INDEX;
    public static CompositeNodeType FIELD_DECLARATION;
    public static int FIELD_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType FIELD_OR_EXTENSION_REFERENCE;
    public static int FIELD_OR_EXTENSION_REFERENCE_NODE_TYPE_INDEX;
    public static CompositeNodeType FULL_IDENTIFIER;
    public static int FULL_IDENTIFIER_NODE_TYPE_INDEX;
    public static CompositeNodeType GROUP_FIELD_DECLARATION;
    public static int GROUP_FIELD_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType IDENTIFIER;
    public static int IDENTIFIER_NODE_TYPE_INDEX;
    public static CompositeNodeType IMPORT_STATEMENT;
    public static int IMPORT_STATEMENT_NODE_TYPE_INDEX;
    public static CompositeNodeType MAP_ARGUMENTS;
    public static int MAP_ARGUMENTS_NODE_TYPE_INDEX;
    public static CompositeNodeType MAYBE_STREAMED_TYPE;
    public static int MAYBE_STREAMED_TYPE_NODE_TYPE_INDEX;
    public static CompositeNodeType MESSAGE_BODY;
    public static int MESSAGE_BODY_NODE_TYPE_INDEX;
    public static CompositeNodeType MESSAGE_DECLARATION;
    public static int MESSAGE_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType ONEOF_DECLARATION;
    public static int ONEOF_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType OPTION_AGGREGATE_BLOCK;
    public static int OPTION_AGGREGATE_BLOCK_NODE_TYPE_INDEX;
    public static CompositeNodeType OPTION_AGGREGATE_OPTION;
    public static int OPTION_AGGREGATE_OPTION_NODE_TYPE_INDEX;
    public static CompositeNodeType OPTION_IDENTIFIER;
    public static int OPTION_IDENTIFIER_NODE_TYPE_INDEX;
    public static CompositeNodeType OPTION_IDENTIFIER_PART;
    public static int OPTION_IDENTIFIER_PART_NODE_TYPE_INDEX;
    public static CompositeNodeType OPTIONS_OR_SEMICOLON;
    public static int OPTIONS_OR_SEMICOLON_NODE_TYPE_INDEX;
    public static CompositeNodeType PACKAGE_DECLARED_ELEMENT_PART;
    public static int PACKAGE_DECLARED_ELEMENT_PART_NODE_TYPE_INDEX;
    public static CompositeNodeType PACKAGE_STATEMENT;
    public static int PACKAGE_STATEMENT_NODE_TYPE_INDEX;
    public static CompositeNodeType PROTOBUF_FILE;
    public static int PROTOBUF_FILE_NODE_TYPE_INDEX;
    public static CompositeNodeType PROTOBUF_TYPE;
    public static int PROTOBUF_TYPE_NODE_TYPE_INDEX;
    public static CompositeNodeType REAL_FIELD_DECLARATION;
    public static int REAL_FIELD_DECLARATION_NODE_TYPE_INDEX;
    public static CompositeNodeType RESERVED;
    public static int RESERVED_NODE_TYPE_INDEX;
    public static CompositeNodeType RESERVED_VALUE;
    public static int RESERVED_VALUE_NODE_TYPE_INDEX;
    public static CompositeNodeType RPC_DEFINITION;
    public static int RPC_DEFINITION_NODE_TYPE_INDEX;
    public static CompositeNodeType SERVICE_DEFINITION;
    public static int SERVICE_DEFINITION_NODE_TYPE_INDEX;
    public static CompositeNodeType SINGLE_OPTION;
    public static int SINGLE_OPTION_NODE_TYPE_INDEX;
    public static CompositeNodeType STREAM_DEFINITION;
    public static int STREAM_DEFINITION_NODE_TYPE_INDEX;
    public static CompositeNodeType SYNTAX_DECLARATION;
    public static int SYNTAX_DECLARATION_NODE_TYPE_INDEX;
    private static ElementType();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.EnumBody : ProtobufCompositeElement {
    public static short OPTION;
    public static short ENUM_FIELD;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<IEnumField> Field { get; }
    public TreeNodeEnumerable`1<IEnumField> FieldEnumerable { get; }
    public TreeNodeCollection`1<ISingleOption> Options { get; }
    public TreeNodeEnumerable`1<ISingleOption> OptionsEnumerable { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<IEnumField> get_Field();
    public virtual TreeNodeEnumerable`1<IEnumField> get_FieldEnumerable();
    public virtual TreeNodeCollection`1<ISingleOption> get_Options();
    public virtual TreeNodeEnumerable`1<ISingleOption> get_OptionsEnumerable();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.EnumDeclaration : ProtobufDeclarationBase {
    public static short ENUM_NAME;
    public static short ENUM_BODY;
    public NodeType NodeType { get; }
    public IEnumBody Body { get; }
    public IIdentifier Name { get; }
    public ITreeNode DeclarationName { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IEnumBody get_Body();
    public virtual IIdentifier get_Name();
    public virtual IEnumBody SetBody(IEnumBody param);
    public virtual IIdentifier SetName(IIdentifier param);
    public virtual string ToString();
    protected virtual ProtobufDeclaredElementBase CreateDeclaration(string name);
    public virtual ITreeNode get_DeclarationName();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.EnumField : ProtobufDeclarationBase {
    public static short FIELD_NAME;
    public static short FIELD_VALUE;
    public static short OPTION;
    public NodeType NodeType { get; }
    public IIdentifier Name { get; }
    public IBracketedOption Options { get; }
    public ITokenNode Value { get; }
    public ITreeNode DeclarationName { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IIdentifier get_Name();
    public virtual IBracketedOption get_Options();
    public virtual ITokenNode get_Value();
    public virtual IIdentifier SetName(IIdentifier param);
    public virtual IBracketedOption SetOptions(IBracketedOption param);
    public virtual string ToString();
    protected virtual ProtobufDeclaredElementBase CreateDeclaration(string name);
    public virtual ITreeNode get_DeclarationName();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.EnumValueReference : ProtobufCompositeElement {
    public static short NAME;
    private CachedPsiValue`1<ReferenceCollection> myCachedReferences;
    public NodeType NodeType { get; }
    public IIdentifier Name { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IIdentifier get_Name();
    public virtual IIdentifier SetName(IIdentifier param);
    public virtual string ToString();
    public virtual ReferenceCollection GetFirstClassReferences();
    [CompilerGeneratedAttribute]
private ReferenceCollection <GetFirstClassReferences>b__13_0();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.ExtendStatement : ProtobufCompositeElement {
    public static short EXTENDED_NAME;
    public static short EXTEND_FIELDS;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<IFieldDeclaration> Field { get; }
    public TreeNodeEnumerable`1<IFieldDeclaration> FieldEnumerable { get; }
    public IProtobufType Name { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<IFieldDeclaration> get_Field();
    public virtual TreeNodeEnumerable`1<IFieldDeclaration> get_FieldEnumerable();
    public virtual IProtobufType get_Name();
    public virtual IProtobufType SetName(IProtobufType param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.ExtensionRange : ProtobufCompositeElement {
    public static short RANGE_FROM;
    public static short RANGE_TO;
    public NodeType NodeType { get; }
    public ITokenNode From { get; }
    public ITokenNode To { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_From();
    public virtual ITokenNode get_To();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.Extensions : ProtobufCompositeElement {
    public static short EXTENSION_RANGE;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<IExtensionRange> Range { get; }
    public TreeNodeEnumerable`1<IExtensionRange> RangeEnumerable { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<IExtensionRange> get_Range();
    public virtual TreeNodeEnumerable`1<IExtensionRange> get_RangeEnumerable();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.FieldDeclaration : ProtobufDeclarationBase {
    public static short FIELD_DECLARATOR;
    public static short FIELD_DECLARATION_GROUP;
    public static short FIELD_DECLARATION_FIELD;
    public NodeType NodeType { get; }
    public ITokenNode Declarator { get; }
    public IRealFieldDeclaration Field { get; }
    public IGroupFieldDeclaration Group { get; }
    public ITreeNode DeclarationName { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_Declarator();
    public virtual IRealFieldDeclaration get_Field();
    public virtual IGroupFieldDeclaration get_Group();
    public virtual IRealFieldDeclaration SetField(IRealFieldDeclaration param);
    public virtual IGroupFieldDeclaration SetGroup(IGroupFieldDeclaration param);
    public virtual string ToString();
    protected virtual ProtobufDeclaredElementBase CreateDeclaration(string name);
    public virtual ITreeNode get_DeclarationName();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.FieldOrExtensionReference : ProtobufCompositeElement {
    public static short NAME;
    private CachedPsiValue`1<ReferenceCollection> myReferenceCache;
    public NodeType NodeType { get; }
    public IFullIdentifier Name { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IFullIdentifier get_Name();
    public virtual IFullIdentifier SetName(IFullIdentifier param);
    public virtual string ToString();
    public virtual ReferenceCollection GetFirstClassReferences();
    [CompilerGeneratedAttribute]
private ReferenceCollection <GetFirstClassReferences>b__13_0();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.FullIdentifier : ProtobufCompositeElement {
    public static short FIRST_DOT;
    public static short IDENT;
    public static short OTHER_DOTS;
    public static short IDENT_FOLLOWUP;
    public NodeType NodeType { get; }
    public ITokenNode FirstDot { get; }
    public IIdentifier FirstIdentifier { get; }
    public TreeNodeCollection`1<IIdentifier> FollowupIdentifiers { get; }
    public TreeNodeEnumerable`1<IIdentifier> FollowupIdentifiersEnumerable { get; }
    public TreeNodeCollection`1<ITokenNode> OtherDots { get; }
    public TreeNodeEnumerable`1<ITokenNode> OtherDotsEnumerable { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_FirstDot();
    public virtual IIdentifier get_FirstIdentifier();
    public virtual TreeNodeCollection`1<IIdentifier> get_FollowupIdentifiers();
    public virtual TreeNodeEnumerable`1<IIdentifier> get_FollowupIdentifiersEnumerable();
    public virtual TreeNodeCollection`1<ITokenNode> get_OtherDots();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_OtherDotsEnumerable();
    public virtual IIdentifier SetFirstIdentifier(IIdentifier param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.GroupFieldDeclaration : ProtobufDeclarationBase {
    public static short FIELD_TYPE;
    public static short FIELD_NAME;
    public static short FIELD_NUMBER;
    public static short GROUP_BODY;
    public NodeType NodeType { get; }
    public IMessageBody Body { get; }
    public IIdentifier Name { get; }
    public ITokenNode Number { get; }
    public ITokenNode Type { get; }
    public ITreeNode DeclarationName { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IMessageBody get_Body();
    public virtual IIdentifier get_Name();
    public virtual ITokenNode get_Number();
    public virtual ITokenNode get_Type();
    public virtual IMessageBody SetBody(IMessageBody param);
    public virtual IIdentifier SetName(IIdentifier param);
    public virtual string ToString();
    protected virtual ProtobufDeclaredElementBase CreateDeclaration(string name);
    public virtual ITreeNode get_DeclarationName();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.Identifier : ProtobufCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.ImportStatement : ProtobufCompositeElement {
    public static short IMPORT_SPECIFIER;
    public static short IMPORT_FILE;
    private CachedPsiValue`1<ReferenceCollection> myCahcedReferences;
    public NodeType NodeType { get; }
    public ITokenNode Specifier { get; }
    public TreeNodeCollection`1<ITokenNode> Value { get; }
    public TreeNodeEnumerable`1<ITokenNode> ValueEnumerable { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_Specifier();
    public virtual TreeNodeCollection`1<ITokenNode> get_Value();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_ValueEnumerable();
    public virtual string ToString();
    public virtual ReferenceCollection GetFirstClassReferences();
    [CompilerGeneratedAttribute]
private ReferenceCollection <GetFirstClassReferences>b__17_0();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.MapArguments : ProtobufCompositeElement {
    public static short MAP_KEY_TYPE;
    public static short MAP_VALUE_TYPE;
    public NodeType NodeType { get; }
    public IProtobufType KeyType { get; }
    public IProtobufType ValueType { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IProtobufType get_KeyType();
    public virtual IProtobufType get_ValueType();
    public virtual IProtobufType SetKeyType(IProtobufType param);
    public virtual IProtobufType SetValueType(IProtobufType param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.MaybeStreamedType : ProtobufCompositeElement {
    public static short TYPE;
    public NodeType NodeType { get; }
    public IProtobufType TypeName { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IProtobufType get_TypeName();
    public virtual IProtobufType SetTypeName(IProtobufType param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.MessageBody : ProtobufCompositeElement {
    public static short FIELD_DECLARATIONS;
    public static short NESTED_DECLARATIONS;
    public static short OPTION;
    public static short EXTENSIONS;
    public static short RESERVED;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<IExtensions> Extensions { get; }
    public TreeNodeEnumerable`1<IExtensions> ExtensionsEnumerable { get; }
    public TreeNodeCollection`1<IFieldDeclaration> Field { get; }
    public TreeNodeEnumerable`1<IFieldDeclaration> FieldEnumerable { get; }
    public TreeNodeCollection`1<IEnumDeclaration> NestedEnum { get; }
    public TreeNodeEnumerable`1<IEnumDeclaration> NestedEnumEnumerable { get; }
    public TreeNodeCollection`1<IExtendStatement> NestedExtend { get; }
    public TreeNodeEnumerable`1<IExtendStatement> NestedExtendEnumerable { get; }
    public TreeNodeCollection`1<IMessageDeclaration> NestedMessage { get; }
    public TreeNodeEnumerable`1<IMessageDeclaration> NestedMessageEnumerable { get; }
    public TreeNodeCollection`1<IOneofDeclaration> OneOf { get; }
    public TreeNodeEnumerable`1<IOneofDeclaration> OneOfEnumerable { get; }
    public TreeNodeCollection`1<ISingleOption> Options { get; }
    public TreeNodeEnumerable`1<ISingleOption> OptionsEnumerable { get; }
    public TreeNodeCollection`1<IReserved> Reserved { get; }
    public TreeNodeEnumerable`1<IReserved> ReservedEnumerable { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<IExtensions> get_Extensions();
    public virtual TreeNodeEnumerable`1<IExtensions> get_ExtensionsEnumerable();
    public virtual TreeNodeCollection`1<IFieldDeclaration> get_Field();
    public virtual TreeNodeEnumerable`1<IFieldDeclaration> get_FieldEnumerable();
    public virtual TreeNodeCollection`1<IEnumDeclaration> get_NestedEnum();
    public virtual TreeNodeEnumerable`1<IEnumDeclaration> get_NestedEnumEnumerable();
    public virtual TreeNodeCollection`1<IExtendStatement> get_NestedExtend();
    public virtual TreeNodeEnumerable`1<IExtendStatement> get_NestedExtendEnumerable();
    public virtual TreeNodeCollection`1<IMessageDeclaration> get_NestedMessage();
    public virtual TreeNodeEnumerable`1<IMessageDeclaration> get_NestedMessageEnumerable();
    public virtual TreeNodeCollection`1<IOneofDeclaration> get_OneOf();
    public virtual TreeNodeEnumerable`1<IOneofDeclaration> get_OneOfEnumerable();
    public virtual TreeNodeCollection`1<ISingleOption> get_Options();
    public virtual TreeNodeEnumerable`1<ISingleOption> get_OptionsEnumerable();
    public virtual TreeNodeCollection`1<IReserved> get_Reserved();
    public virtual TreeNodeEnumerable`1<IReserved> get_ReservedEnumerable();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.MessageDeclaration : ProtobufDeclarationBase {
    public static short MESSAGE_NAME;
    public static short MESSAGE_BODY;
    private CachedPsiValue`1<ISymbolTable> myCachedSymbols;
    public NodeType NodeType { get; }
    public IMessageBody Body { get; }
    public IIdentifier Name { get; }
    public ITreeNode DeclarationName { get; }
    public int LevelDelta { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IMessageBody get_Body();
    public virtual IIdentifier get_Name();
    public virtual IMessageBody SetBody(IMessageBody param);
    public virtual IIdentifier SetName(IIdentifier param);
    public virtual string ToString();
    protected virtual ProtobufDeclaredElementBase CreateDeclaration(string name);
    public virtual ITreeNode get_DeclarationName();
    public sealed virtual ISymbolTable AddGlobalDeclarations(ISymbolTable parentTable, int level, SymbolTableMode mode);
    public sealed virtual int get_LevelDelta();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.OneofDeclaration : ProtobufDeclarationBase {
    public static short FIELD_NAME;
    public static short ONEOF_FIELD;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<IFieldDeclaration> Field { get; }
    public TreeNodeEnumerable`1<IFieldDeclaration> FieldEnumerable { get; }
    public IIdentifier Name { get; }
    public ITreeNode DeclarationName { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<IFieldDeclaration> get_Field();
    public virtual TreeNodeEnumerable`1<IFieldDeclaration> get_FieldEnumerable();
    public virtual IIdentifier get_Name();
    public virtual IIdentifier SetName(IIdentifier param);
    public virtual string ToString();
    protected virtual ProtobufDeclaredElementBase CreateDeclaration(string name);
    public virtual ITreeNode get_DeclarationName();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.OptionAggregateBlock : ProtobufCompositeElement {
    public static short OPENING_BRACE;
    public static short AGGREGATE_OPTION;
    public static short CLOSING_BRACE;
    public NodeType NodeType { get; }
    public ITokenNode ClosingBrace { get; }
    public ITokenNode OpeningBrace { get; }
    public TreeNodeCollection`1<IOptionAggregateOption> Options { get; }
    public TreeNodeEnumerable`1<IOptionAggregateOption> OptionsEnumerable { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_ClosingBrace();
    public virtual ITokenNode get_OpeningBrace();
    public virtual TreeNodeCollection`1<IOptionAggregateOption> get_Options();
    public virtual TreeNodeEnumerable`1<IOptionAggregateOption> get_OptionsEnumerable();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.OptionAggregateOption : ProtobufCompositeElement {
    public static short OPTION_NAME;
    public static short KEY_VALUE_SEPARATOR;
    public static short CONSTANT_VALUE;
    public static short NONCONSTANT_VALUE;
    public static short AGGREGATE_BLOCK;
    public NodeType NodeType { get; }
    public IOptionAggregateBlock Aggregate { get; }
    public IAggregateOptionIdentifier Name { get; }
    public IEnumValueReference NamedValue { get; }
    public ITokenNode Separator { get; }
    public TreeNodeCollection`1<ITokenNode> Value { get; }
    public TreeNodeEnumerable`1<ITokenNode> ValueEnumerable { get; }
    public IReference LastReference { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IOptionAggregateBlock get_Aggregate();
    public virtual IAggregateOptionIdentifier get_Name();
    public virtual IEnumValueReference get_NamedValue();
    public virtual ITokenNode get_Separator();
    public virtual TreeNodeCollection`1<ITokenNode> get_Value();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_ValueEnumerable();
    public virtual IOptionAggregateBlock SetAggregate(IOptionAggregateBlock param);
    public virtual IAggregateOptionIdentifier SetName(IAggregateOptionIdentifier param);
    public virtual IEnumValueReference SetNamedValue(IEnumValueReference param);
    public virtual string ToString();
    public sealed virtual IReference get_LastReference();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.OptionIdentifier : ProtobufCompositeElement {
    public static short NAME_PART;
    private CachedPsiValue`1<ReferenceCollection> myCachedReferences;
    [CompilerGeneratedAttribute]
private IReference <LastReference>k__BackingField;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<IOptionIdentifierPart> Name { get; }
    public TreeNodeEnumerable`1<IOptionIdentifierPart> NameEnumerable { get; }
    public IReference LastReference { get; private set; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<IOptionIdentifierPart> get_Name();
    public virtual TreeNodeEnumerable`1<IOptionIdentifierPart> get_NameEnumerable();
    public virtual string ToString();
    public virtual ReferenceCollection GetFirstClassReferences();
    [CompilerGeneratedAttribute]
public sealed virtual IReference get_LastReference();
    [CompilerGeneratedAttribute]
private void set_LastReference(IReference value);
    [CompilerGeneratedAttribute]
private ReferenceCollection <GetFirstClassReferences>b__14_0();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.OptionIdentifierPart : ProtobufCompositeElement {
    public static short OPTION_NAME_DOT;
    public static short OPTION_NAME_IDENTIFIER;
    public static short OPTION_NAME_FULL_IDENTIFIER;
    public NodeType NodeType { get; }
    public ITokenNode Dot { get; }
    public IFieldOrExtensionReference FullIdentifier { get; }
    public IIdentifier Identifier { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_Dot();
    public virtual IFieldOrExtensionReference get_FullIdentifier();
    public virtual IIdentifier get_Identifier();
    public virtual IFieldOrExtensionReference SetFullIdentifier(IFieldOrExtensionReference param);
    public virtual IIdentifier SetIdentifier(IIdentifier param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.OptionsOrSemicolon : ProtobufCompositeElement {
    public static short OPTIONS;
    public static short SEMICOLON;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<ISingleOption> Options { get; }
    public TreeNodeEnumerable`1<ISingleOption> OptionsEnumerable { get; }
    public ITokenNode Semicolon { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<ISingleOption> get_Options();
    public virtual TreeNodeEnumerable`1<ISingleOption> get_OptionsEnumerable();
    public virtual ITokenNode get_Semicolon();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.PackageDeclaredElementPart : ProtobufDeclarationBase {
    public static short NAME;
    public NodeType NodeType { get; }
    public IIdentifier Name { get; }
    public ITreeNode DeclarationName { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IIdentifier get_Name();
    public virtual IIdentifier SetName(IIdentifier param);
    public virtual string ToString();
    protected virtual ProtobufDeclaredElementBase CreateDeclaration(string name);
    public virtual ITreeNode get_DeclarationName();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.PackageStatement : ProtobufCompositeElement {
    public static short PACKAGE_NAME;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<IPackageDeclaredElementPart> Name { get; }
    public TreeNodeEnumerable`1<IPackageDeclaredElementPart> NameEnumerable { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<IPackageDeclaredElementPart> get_Name();
    public virtual TreeNodeEnumerable`1<IPackageDeclaredElementPart> get_NameEnumerable();
    public virtual string ToString();
}
public abstract class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.ProtobufCompositeElement : CompositeElement {
    public PsiLanguageType Language { get; }
    public virtual PsiLanguageType get_Language();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public abstract class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.ProtobufDeclarationBase : ProtobufCompositeElement {
    private CachedPsiValueWithOffsets`1<IDeclaredElement> myCachedDeclaredElement;
    public IDeclaredElement DeclaredElement { get; }
    public string DeclaredName { get; }
    public ITreeNode DeclarationName { get; }
    protected abstract virtual ProtobufDeclaredElementBase CreateDeclaration(string name);
    public sealed virtual IDeclaredElement get_DeclaredElement();
    public sealed virtual string get_DeclaredName();
    public sealed virtual TreeTextRange GetNameRange();
    public sealed virtual void SetName(string name);
    public sealed virtual bool IsSynthetic();
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
    public abstract virtual ITreeNode get_DeclarationName();
    [CompilerGeneratedAttribute]
private IDeclaredElement <get_DeclaredElement>b__3_0();
}
public class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.ProtobufFakeToken : LeafElementBase {
    private string myText;
    private TokenNodeType myTokenType;
    private StringBuffer myCachedBuffer;
    public NodeType NodeType { get; }
    public PsiLanguageType Language { get; }
    public ProtobufFakeToken(string text, TokenNodeType tokenType);
    public virtual NodeType get_NodeType();
    public virtual PsiLanguageType get_Language();
    public virtual int GetTextLength();
    public virtual StringBuilder GetText(StringBuilder to);
    public virtual IBuffer GetTextAsBuffer();
    public virtual string GetText();
    public sealed virtual TokenNodeType GetTokenType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.ProtobufFile : ProtobufFileBase {
    public static short SYNTAX_DECLARATION;
    public static short MESSAGE_DECLARATION;
    public static short ENUM_DECLARATION;
    public static short EXTEND_DECLARATION;
    public static short IMPORT_STATEMENT;
    public static short PACKAGE_STATEMENT;
    public static short OPTION;
    public static short SERVICE_DECLARATION;
    [CompilerGeneratedAttribute]
private ProtobufFileAttributes <Attributes>k__BackingField;
    private CachedPsiValue`1<string> myCachedPackageName;
    private CachedPsiValue`1<ISymbolTable> myCachedSymbolTable;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<IEnumDeclaration> EnumDeclaration { get; }
    public TreeNodeEnumerable`1<IEnumDeclaration> EnumDeclarationEnumerable { get; }
    public TreeNodeCollection`1<IExtendStatement> ExtendDeclaration { get; }
    public TreeNodeEnumerable`1<IExtendStatement> ExtendDeclarationEnumerable { get; }
    public TreeNodeCollection`1<IImportStatement> ImportStatement { get; }
    public TreeNodeEnumerable`1<IImportStatement> ImportStatementEnumerable { get; }
    public TreeNodeCollection`1<IMessageDeclaration> MessageDeclaration { get; }
    public TreeNodeEnumerable`1<IMessageDeclaration> MessageDeclarationEnumerable { get; }
    public TreeNodeCollection`1<ISingleOption> Options { get; }
    public TreeNodeEnumerable`1<ISingleOption> OptionsEnumerable { get; }
    public TreeNodeCollection`1<IPackageStatement> PackageStatement { get; }
    public TreeNodeEnumerable`1<IPackageStatement> PackageStatementEnumerable { get; }
    public TreeNodeCollection`1<IServiceDefinition> ServiceDeclaration { get; }
    public TreeNodeEnumerable`1<IServiceDefinition> ServiceDeclarationEnumerable { get; }
    public TreeNodeCollection`1<ISyntaxDeclaration> Syntax { get; }
    public TreeNodeEnumerable`1<ISyntaxDeclaration> SyntaxEnumerable { get; }
    public ProtobufFileAttributes Attributes { get; private set; }
    public string PackageName { get; }
    public int LevelDelta { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<IEnumDeclaration> get_EnumDeclaration();
    public virtual TreeNodeEnumerable`1<IEnumDeclaration> get_EnumDeclarationEnumerable();
    public virtual TreeNodeCollection`1<IExtendStatement> get_ExtendDeclaration();
    public virtual TreeNodeEnumerable`1<IExtendStatement> get_ExtendDeclarationEnumerable();
    public virtual TreeNodeCollection`1<IImportStatement> get_ImportStatement();
    public virtual TreeNodeEnumerable`1<IImportStatement> get_ImportStatementEnumerable();
    public virtual TreeNodeCollection`1<IMessageDeclaration> get_MessageDeclaration();
    public virtual TreeNodeEnumerable`1<IMessageDeclaration> get_MessageDeclarationEnumerable();
    public virtual TreeNodeCollection`1<ISingleOption> get_Options();
    public virtual TreeNodeEnumerable`1<ISingleOption> get_OptionsEnumerable();
    public virtual TreeNodeCollection`1<IPackageStatement> get_PackageStatement();
    public virtual TreeNodeEnumerable`1<IPackageStatement> get_PackageStatementEnumerable();
    public virtual TreeNodeCollection`1<IServiceDefinition> get_ServiceDeclaration();
    public virtual TreeNodeEnumerable`1<IServiceDefinition> get_ServiceDeclarationEnumerable();
    public virtual TreeNodeCollection`1<ISyntaxDeclaration> get_Syntax();
    public virtual TreeNodeEnumerable`1<ISyntaxDeclaration> get_SyntaxEnumerable();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual ProtobufFileAttributes get_Attributes();
    [CompilerGeneratedAttribute]
private void set_Attributes(ProtobufFileAttributes value);
    public sealed virtual string get_PackageName();
    internal void InitPostParse();
    private ISymbolTable BuildPackageTable();
    public sealed virtual ISymbolTable AddGlobalDeclarations(ISymbolTable parentTable, int level, SymbolTableMode mode);
    public sealed virtual int get_LevelDelta();
}
public class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.ProtobufToken : BoundToBufferLeafElement {
    public PsiLanguageType Language { get; }
    public ProtobufToken(NodeType nodeType, IBuffer buffer, TreeOffset startOffset, TreeOffset endOffset);
    public virtual PsiLanguageType get_Language();
    public virtual bool IsFiltered();
    public sealed virtual TokenNodeType GetTokenType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.ProtobufType : ProtobufCompositeElement {
    public static short BUILTIN_TYPE;
    public static short MAP_ARGUMENTS;
    public static short NAMED_TYPE;
    private CachedPsiValue`1<ReferenceCollection> myCachedReferences;
    public NodeType NodeType { get; }
    public ITokenNode Builtin { get; }
    public IMapArguments MapArguments { get; }
    public IFullIdentifier Name { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_Builtin();
    public virtual IMapArguments get_MapArguments();
    public virtual IFullIdentifier get_Name();
    public virtual IMapArguments SetMapArguments(IMapArguments param);
    public virtual IFullIdentifier SetName(IFullIdentifier param);
    public virtual string ToString();
    public virtual ReferenceCollection GetFirstClassReferences();
    [CompilerGeneratedAttribute]
private ReferenceCollection <GetFirstClassReferences>b__20_0();
}
public class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.PsiGeneratedGetterTestUtil : PsiGetterTestUtil {
    internal static void TestAggregateOptionIdentifier(int level, IAggregateOptionIdentifier param, string caller);
    internal static void TestAnyTokenNotRcurly(int level, IAnyTokenNotRcurly param, string caller);
    internal static void TestBracketedOption(int level, IBracketedOption param, string caller);
    internal static void TestEnumBody(int level, IEnumBody param, string caller);
    internal static void TestEnumDeclaration(int level, IEnumDeclaration param, string caller);
    internal static void TestEnumField(int level, IEnumField param, string caller);
    internal static void TestEnumValueReference(int level, IEnumValueReference param, string caller);
    internal static void TestErrorStatement(int level, IErrorElement param, string caller);
    internal static void TestErrorStatementNoRcurly(int level, IErrorElement param, string caller);
    internal static void TestExtendStatement(int level, IExtendStatement param, string caller);
    internal static void TestExtensionRange(int level, IExtensionRange param, string caller);
    internal static void TestExtensions(int level, IExtensions param, string caller);
    internal static void TestFieldDeclaration(int level, IFieldDeclaration param, string caller);
    internal static void TestFieldOrExtensionReference(int level, IFieldOrExtensionReference param, string caller);
    internal static void TestFullIdentifier(int level, IFullIdentifier param, string caller);
    internal static void TestGroupFieldDeclaration(int level, IGroupFieldDeclaration param, string caller);
    internal static void TestIdentifier(int level, IIdentifier param, string caller);
    internal static void TestImportStatement(int level, IImportStatement param, string caller);
    internal static void TestMapArguments(int level, IMapArguments param, string caller);
    internal static void TestMaybeStreamedType(int level, IMaybeStreamedType param, string caller);
    internal static void TestMessageBody(int level, IMessageBody param, string caller);
    internal static void TestMessageDeclaration(int level, IMessageDeclaration param, string caller);
    internal static void TestOneofDeclaration(int level, IOneofDeclaration param, string caller);
    internal static void TestOptionAggregateBlock(int level, IOptionAggregateBlock param, string caller);
    internal static void TestOptionAggregateOption(int level, IOptionAggregateOption param, string caller);
    internal static void TestOptionIdentifier(int level, IOptionIdentifier param, string caller);
    internal static void TestOptionIdentifierPart(int level, IOptionIdentifierPart param, string caller);
    internal static void TestOptionsOrSemicolon(int level, IOptionsOrSemicolon param, string caller);
    internal static void TestPackageDeclaredElementPart(int level, IPackageDeclaredElementPart param, string caller);
    internal static void TestPackageStatement(int level, IPackageStatement param, string caller);
    internal static void TestProtobufFile(int level, IProtobufFile param, string caller);
    internal static void TestProtobufType(int level, IProtobufType param, string caller);
    internal static void TestRealFieldDeclaration(int level, IRealFieldDeclaration param, string caller);
    internal static void TestReserved(int level, IReserved param, string caller);
    internal static void TestReservedValue(int level, IReservedValue param, string caller);
    internal static void TestRpcDefinition(int level, IRpcDefinition param, string caller);
    internal static void TestServiceDefinition(int level, IServiceDefinition param, string caller);
    internal static void TestSingleOption(int level, ISingleOption param, string caller);
    internal static void TestStreamDefinition(int level, IStreamDefinition param, string caller);
    internal static void TestSyntaxDeclaration(int level, ISyntaxDeclaration param, string caller);
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.RealFieldDeclaration : ProtobufCompositeElement {
    public static short FIELD_TYPE;
    public static short FIELD_NAME;
    public static short FIELD_NUMBER;
    public static short OPTION;
    public NodeType NodeType { get; }
    public IIdentifier Name { get; }
    public ITokenNode Number { get; }
    public IBracketedOption Options { get; }
    public IProtobufType Type { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IIdentifier get_Name();
    public virtual ITokenNode get_Number();
    public virtual IBracketedOption get_Options();
    public virtual IProtobufType get_Type();
    public virtual IIdentifier SetName(IIdentifier param);
    public virtual IBracketedOption SetOptions(IBracketedOption param);
    public virtual IProtobufType SetType(IProtobufType param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.Reserved : ProtobufCompositeElement {
    public static short RESERVED_KEYWORD;
    public static short RESERVED_VALUE;
    public NodeType NodeType { get; }
    public ITokenNode Keyword { get; }
    public TreeNodeCollection`1<IReservedValue> Value { get; }
    public TreeNodeEnumerable`1<IReservedValue> ValueEnumerable { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_Keyword();
    public virtual TreeNodeCollection`1<IReservedValue> get_Value();
    public virtual TreeNodeEnumerable`1<IReservedValue> get_ValueEnumerable();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.ReservedValue : ProtobufCompositeElement {
    public static short RESERVED_NAME;
    public static short RANGE_FROM;
    public static short RANGE_TO;
    public NodeType NodeType { get; }
    public ITokenNode From { get; }
    public TreeNodeCollection`1<ITokenNode> Name { get; }
    public TreeNodeEnumerable`1<ITokenNode> NameEnumerable { get; }
    public ITokenNode To { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_From();
    public virtual TreeNodeCollection`1<ITokenNode> get_Name();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_NameEnumerable();
    public virtual ITokenNode get_To();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.RpcDefinition : ProtobufDeclarationBase {
    public static short RPC_NAME;
    public static short ARGUMENT_TYPE;
    public static short RETURN_TYPE;
    public static short OPTIONS_OR_SEMICOLON;
    public NodeType NodeType { get; }
    public IMaybeStreamedType ArgumentType { get; }
    public IIdentifier Name { get; }
    public IOptionsOrSemicolon Options { get; }
    public IMaybeStreamedType ReturnType { get; }
    public ITreeNode DeclarationName { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IMaybeStreamedType get_ArgumentType();
    public virtual IIdentifier get_Name();
    public virtual IOptionsOrSemicolon get_Options();
    public virtual IMaybeStreamedType get_ReturnType();
    public virtual IMaybeStreamedType SetArgumentType(IMaybeStreamedType param);
    public virtual IIdentifier SetName(IIdentifier param);
    public virtual IOptionsOrSemicolon SetOptions(IOptionsOrSemicolon param);
    public virtual IMaybeStreamedType SetReturnType(IMaybeStreamedType param);
    public virtual string ToString();
    protected virtual ProtobufDeclaredElementBase CreateDeclaration(string name);
    public virtual ITreeNode get_DeclarationName();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.ServiceDefinition : ProtobufDeclarationBase {
    public static short SERVICE_NAME;
    public static short STREAM_DECLARATION;
    public static short RPC_DECLARATION;
    public static short OPTION;
    private CachedPsiValue`1<ISymbolTable> myCachedSymbols;
    public NodeType NodeType { get; }
    public IIdentifier Name { get; }
    public TreeNodeCollection`1<ISingleOption> Options { get; }
    public TreeNodeEnumerable`1<ISingleOption> OptionsEnumerable { get; }
    public TreeNodeCollection`1<IRpcDefinition> RPC { get; }
    public TreeNodeEnumerable`1<IRpcDefinition> RPCEnumerable { get; }
    public TreeNodeCollection`1<IStreamDefinition> Stream { get; }
    public TreeNodeEnumerable`1<IStreamDefinition> StreamEnumerable { get; }
    public ITreeNode DeclarationName { get; }
    public int LevelDelta { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IIdentifier get_Name();
    public virtual TreeNodeCollection`1<ISingleOption> get_Options();
    public virtual TreeNodeEnumerable`1<ISingleOption> get_OptionsEnumerable();
    public virtual TreeNodeCollection`1<IRpcDefinition> get_RPC();
    public virtual TreeNodeEnumerable`1<IRpcDefinition> get_RPCEnumerable();
    public virtual TreeNodeCollection`1<IStreamDefinition> get_Stream();
    public virtual TreeNodeEnumerable`1<IStreamDefinition> get_StreamEnumerable();
    public virtual IIdentifier SetName(IIdentifier param);
    public virtual string ToString();
    protected virtual ProtobufDeclaredElementBase CreateDeclaration(string name);
    public virtual ITreeNode get_DeclarationName();
    public sealed virtual ISymbolTable AddGlobalDeclarations(ISymbolTable parentTable, int level, SymbolTableMode mode);
    public sealed virtual int get_LevelDelta();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.SingleOption : ProtobufCompositeElement {
    public static short OPTION_NAME;
    public static short CONSTANT_VALUE;
    public static short NONCONSTANT_VALUE;
    public static short AGGREGATE_BLOCK;
    public NodeType NodeType { get; }
    public IOptionAggregateBlock Aggregate { get; }
    public IOptionIdentifier Name { get; }
    public IEnumValueReference NamedValue { get; }
    public TreeNodeCollection`1<ITokenNode> Value { get; }
    public TreeNodeEnumerable`1<ITokenNode> ValueEnumerable { get; }
    public IReference LastReference { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IOptionAggregateBlock get_Aggregate();
    public virtual IOptionIdentifier get_Name();
    public virtual IEnumValueReference get_NamedValue();
    public virtual TreeNodeCollection`1<ITokenNode> get_Value();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_ValueEnumerable();
    public virtual IOptionAggregateBlock SetAggregate(IOptionAggregateBlock param);
    public virtual IOptionIdentifier SetName(IOptionIdentifier param);
    public virtual IEnumValueReference SetNamedValue(IEnumValueReference param);
    public virtual string ToString();
    public sealed virtual IReference get_LastReference();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.StreamDefinition : ProtobufCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.SyntaxDeclaration : ProtobufCompositeElement {
    public static short SYNTAX_VALUE;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<ITokenNode> Value { get; }
    public TreeNodeEnumerable`1<ITokenNode> ValueEnumerable { get; }
    public virtual NodeType get_NodeType();
    public virtual void Accept(TreeNodeVisitor visitor);
    public virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<ITokenNode> get_Value();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_ValueEnumerable();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.Protobuf.Impl.Tree.Whitespace : ProtobufToken {
    [CompilerGeneratedAttribute]
private bool <IsNewLine>k__BackingField;
    public bool IsNewLine { get; }
    public Whitespace(NodeType nodeType, IBuffer buffer, TreeOffset startOffset, TreeOffset endOffset, bool isNewLine);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsNewLine();
    public virtual bool IsFiltered();
}
internal static class JetBrains.ReSharper.Psi.Protobuf.Parsing.ParserMessages : object {
    public static string IDS_EXPECTED_SYMBOL;
    public static string IDS_EXPECTED_TWO_SYMBOLS;
    public static string IDS_UNEXPECTED_TOKEN;
    public static string IDS_UNEXPECTED_EOF;
    public static string IDS_IDENTIFIER;
    public static string IDS_CONSTANT;
    public static string IDS_FIELD_DECLARATION;
    public static string IDS_ENUM_DECLARATION;
    public static string IDS_MESSAGE_DECLARATION;
    public static string IDS_GROUP_FIELD_DECLARATION;
    public static string IDS_REAL_FIELD_DECLARATION;
    public static string IDS_EXTENSION_RANGE;
    public static string IDS_OPTION_IDENTIFIER;
    public static string IDS_ONE_LINE_OPTION;
    public static string IDS_OPTIONS_OR_SEMICOLON;
    public static string IDS_ERROR_STATEMENT;
    public static string IDS_CURLY_BRACKETED_OPTIONS_INNER;
    public static string IDS_PROTOBUF_TYPE;
    public static string IDS_ANY_TOKEN_NOT_RCURLY;
    public static string IDS_OPTION_AGGREGATE_BLOCK;
    public static string IDS_FULL_IDENTIFIER;
    public static string IDS_RESERVED_VALUE;
    public static string IDS_OPTION_IDENTIFIER_PART;
    public static string IDS_AGGREGATE_OPTION_IDENTIFIER;
    public static string IDS_FIELD_DECLARATOR;
    public static string IDS_IMPORT_SPECIFIER;
    public static string GetString(string id);
    public static string GetUnexpectedTokenMessage();
    public static string GetUnexpectedEofMessage();
    public static string GetExpectedMessage(string expectedSymbol);
    public static string GetExpectedMessage(string firstExpectedSymbol, string secondExpectedSymbol);
}
internal class JetBrains.ReSharper.Psi.Protobuf.Parsing.ProtobufFilteringLexer : FilteringLexer {
    public ProtobufFilteringLexer(ILexer lexer);
    protected virtual bool Skip(TokenNodeType tokenType);
}
internal class JetBrains.ReSharper.Psi.Protobuf.Parsing.ProtobufLexer : ProtobufLexerGenerated {
    public ProtobufLexer(IBuffer buffer);
}
public class JetBrains.ReSharper.Psi.Protobuf.Parsing.ProtobufLexerGenerated : object {
    private static int YY_F;
    private static int YY_NO_STATE;
    private static int YY_NOT_ACCEPT;
    private static int YY_START;
    private static int YY_END;
    private static int YY_NO_ANCHOR;
    private static int YY_BOL;
    private static int YY_EOF;
    private int yy_buffer_index;
    private int yy_buffer_start;
    private int yy_buffer_end;
    private IBuffer yy_buffer;
    private int yy_eof_pos;
    private bool yy_at_bol;
    private int yy_lexical_state;
    protected static int YYINITIAL;
    private static Int32[] yy_state_dtrans;
    private static int YY_E_INTERNAL;
    private static int YY_E_MATCH;
    private static String[] yy_error_string;
    private static Int32[] yy_acpt;
    private static Int32[] yy_cmap;
    private static Int32[] yy_rmap;
    private static Int32[0...,0...] yy_nxt;
    private TokenNodeType currTokenType;
    private static Dictionary`2<string, TokenNodeType> ourKeywords;
    public static HashSet`1<string> BuiltinTypes;
    public static HashSet`1<string> MapKeyTypes;
    public static HashSet`1<string> IntegralTypes;
    public static HashSet`1<string> SignedIntegralTypes;
    public static HashSet`1<string> FloatTypes;
    public static HashSet`1<string> StringTypes;
    public UInt32 LexerStateEx { get; }
    public object CurrentPosition { get; public set; }
    public TokenNodeType TokenType { get; }
    public int TokenStart { get; }
    public int TokenEnd { get; }
    public int LexemIndent { get; }
    public IBuffer Buffer { get; }
    protected int BufferIndex { get; protected set; }
    protected int BufferStart { get; protected set; }
    protected int BufferEnd { get; protected set; }
    public int EOFPos { get; }
    protected int LexicalState { get; }
    public ProtobufLexerGenerated(IBuffer buffer);
    public ProtobufLexerGenerated(IBuffer buffer, int startOffset, int endOffset);
    private static ProtobufLexerGenerated();
    private void yybegin(int state);
    private void yy_move_end();
    private static bool yy_isnewline(char c);
    internal string yytext();
    private int yylength();
    private void yy_error(int code, bool fatal);
    public virtual TokenNodeType _locateToken();
    protected TokenNodeType makeToken(TokenNodeType type);
    protected TokenNodeType makeToken(TokenNodeType type, int state);
    private TokenNodeType ImproveNodeType(TokenNodeType type);
    public sealed virtual void Start();
    public sealed virtual void Start(int startOffset, int endOffset, UInt32 state);
    public sealed virtual void Advance();
    public sealed virtual UInt32 get_LexerStateEx();
    public sealed virtual object get_CurrentPosition();
    public sealed virtual void set_CurrentPosition(object value);
    public sealed virtual TokenNodeType get_TokenType();
    public sealed virtual int get_TokenStart();
    public sealed virtual int get_TokenEnd();
    public sealed virtual int get_LexemIndent();
    public sealed virtual IBuffer get_Buffer();
    protected int get_BufferIndex();
    protected void set_BufferIndex(int value);
    protected int get_BufferStart();
    protected void set_BufferStart(int value);
    protected int get_BufferEnd();
    protected void set_BufferEnd(int value);
    public sealed virtual int get_EOFPos();
    protected int get_LexicalState();
    protected virtual void locateToken();
    public static bool IsBuiltinType(string s);
}
internal class JetBrains.ReSharper.Psi.Protobuf.Parsing.ProtobufMissingTokenInserter : MissingTokenInserterBase {
    private ILexer myLexer;
    private ProtobufMissingTokenInserter(ILexer lexer, ITokenOffsetProvider offsetProvider, ITokenIntern intern);
    protected virtual void ProcessLeafElement(TreeElement leafElement);
    private TreeElement CreateToken();
    public static void Run(TreeElement root, ILexer lexer, ITokenOffsetProvider offsetProvider, ITokenIntern intern);
}
internal class JetBrains.ReSharper.Psi.Protobuf.Parsing.ProtobufParser : ProtobufParserGenerated {
    private ILexer myOriginalLexer;
    public ProtobufParser(ILexer lex);
    public sealed virtual IFile ParseFile();
    public virtual TreeElement ParseErrorStatement();
    public virtual TreeElement ParseProtobufType();
    public virtual TreeElement ParseErrorStatementNoRcurly();
}
public class JetBrains.ReSharper.Psi.Protobuf.Parsing.ProtobufTokenType : object {
    public static int DOT_NODE_TYPE_INDEX;
    public static TokenNodeType DOT;
    public static int COMMA_NODE_TYPE_INDEX;
    public static TokenNodeType COMMA;
    public static int LBRACKET_NODE_TYPE_INDEX;
    public static TokenNodeType LBRACKET;
    public static int RBRACKET_NODE_TYPE_INDEX;
    public static TokenNodeType RBRACKET;
    public static int LCURLY_NODE_TYPE_INDEX;
    public static TokenNodeType LCURLY;
    public static int RCURLY_NODE_TYPE_INDEX;
    public static TokenNodeType RCURLY;
    public static int LSQUARE_NODE_TYPE_INDEX;
    public static TokenNodeType LSQUARE;
    public static int RSQUARE_NODE_TYPE_INDEX;
    public static TokenNodeType RSQUARE;
    public static int EQ_NODE_TYPE_INDEX;
    public static TokenNodeType EQ;
    public static int LT_NODE_TYPE_INDEX;
    public static TokenNodeType LT;
    public static int GT_NODE_TYPE_INDEX;
    public static TokenNodeType GT;
    public static int SEMICOLON_NODE_TYPE_INDEX;
    public static TokenNodeType SEMICOLON;
    public static int COLON_NODE_TYPE_INDEX;
    public static TokenNodeType COLON;
    public static int IDENTIFIER_NODE_TYPE_INDEX;
    public static TokenNodeType IDENTIFIER;
    public static int BUILTIN_TYPE_NODE_TYPE_INDEX;
    public static TokenNodeType BUILTIN_TYPE;
    public static int FIELD_DECLARATOR_REQUIRED_NODE_TYPE_INDEX;
    public static TokenNodeType FIELD_DECLARATOR_REQUIRED;
    public static int FIELD_DECLARATOR_OPTIONAL_NODE_TYPE_INDEX;
    public static TokenNodeType FIELD_DECLARATOR_OPTIONAL;
    public static int FIELD_DECLARATOR_REPEATED_NODE_TYPE_INDEX;
    public static TokenNodeType FIELD_DECLARATOR_REPEATED;
    public static int NEW_LINE_NODE_TYPE_INDEX;
    public static TokenNodeType NEW_LINE;
    public static int BAD_TOKEN_NODE_TYPE_INDEX;
    public static TokenNodeType BAD_TOKEN;
    public static int MESSAGE_NODE_TYPE_INDEX;
    public static TokenNodeType MESSAGE;
    public static int GROUP_NODE_TYPE_INDEX;
    public static TokenNodeType GROUP;
    public static int OPTION_NODE_TYPE_INDEX;
    public static TokenNodeType OPTION;
    public static int ENUM_NODE_TYPE_INDEX;
    public static TokenNodeType ENUM;
    public static int ONEOF_NODE_TYPE_INDEX;
    public static TokenNodeType ONEOF;
    public static int MAP_NODE_TYPE_INDEX;
    public static TokenNodeType MAP;
    public static int EXTENSIONS_NODE_TYPE_INDEX;
    public static TokenNodeType EXTENSIONS;
    public static int RESERVED_NODE_TYPE_INDEX;
    public static TokenNodeType RESERVED;
    public static int EXTEND_NODE_TYPE_INDEX;
    public static TokenNodeType EXTEND;
    public static int SERVICE_NODE_TYPE_INDEX;
    public static TokenNodeType SERVICE;
    public static int RPC_NODE_TYPE_INDEX;
    public static TokenNodeType RPC;
    public static int RETURNS_NODE_TYPE_INDEX;
    public static TokenNodeType RETURNS;
    public static int STREAM_NODE_TYPE_INDEX;
    public static TokenNodeType STREAM;
    public static int PACKAGE_NODE_TYPE_INDEX;
    public static TokenNodeType PACKAGE;
    public static int SYNTAX_NODE_TYPE_INDEX;
    public static TokenNodeType SYNTAX;
    public static int IMPORT_NODE_TYPE_INDEX;
    public static TokenNodeType IMPORT;
    public static int IMPORT_SPECIFIER_PUBLIC_NODE_TYPE_INDEX;
    public static TokenNodeType IMPORT_SPECIFIER_PUBLIC;
    public static int IMPORT_SPECIFIER_WEAK_NODE_TYPE_INDEX;
    public static TokenNodeType IMPORT_SPECIFIER_WEAK;
    public static int TO_NODE_TYPE_INDEX;
    public static TokenNodeType TO;
    public static int MAX_NODE_TYPE_INDEX;
    public static TokenNodeType MAX;
    public static int INTEGER_LITERAL_NODE_TYPE_INDEX;
    public static TokenNodeType INTEGER_LITERAL;
    public static int STRING_LITERAL_NODE_TYPE_INDEX;
    public static TokenNodeType STRING_LITERAL;
    public static int BOOL_LITERAL_NODE_TYPE_INDEX;
    public static TokenNodeType BOOL_LITERAL;
    public static int REAL_LITERAL_NODE_TYPE_INDEX;
    public static TokenNodeType REAL_LITERAL;
    public static int WHITE_SPACE_NODE_TYPE_INDEX;
    public static TokenNodeType WHITE_SPACE;
    public static int COMMENT_NODE_TYPE_INDEX;
    public static TokenNodeType COMMENT;
    private static int LAST_GENERATED_TOKEN_TYPE_INDEX;
    public static NodeTypeSet KEYWORDS;
    public static NodeTypeSet DOT_COMPLETION_BLACKLIST;
    public static NodeTypeSet TOP_LEVEL_KEYWORDS;
    public static NodeTypeSet RIGHT_BRACES;
    public static NodeTypeSet LEFT_BRACES;
    public static NodeTypeSet FIELD_DECLARATIORS;
    public static NodeTypeSet MESSAGE_KEYWORDS;
    private static ProtobufTokenType();
}
public enum JetBrains.ReSharper.Psi.Protobuf.ProtobufCompilaionMode : Enum {
    public int value__;
    public static ProtobufCompilaionMode SPEED;
    public static ProtobufCompilaionMode CODE_SIZE;
    public static ProtobufCompilaionMode LITE_RUNTIME;
}
[LanguageDefinitionAttribute("Protobuf")]
public class JetBrains.ReSharper.Psi.Protobuf.ProtobufLanguage : KnownLanguage {
    public static string Name;
    [CompilerGeneratedAttribute]
private static ProtobufLanguage <Instance>k__BackingField;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static ProtobufLanguage Instance { get; private set; }
    public PsiLanguageCategories SupportedCategories { get; }
    protected ProtobufLanguage(string name);
    protected ProtobufLanguage(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static ProtobufLanguage get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(ProtobufLanguage value);
    public virtual PsiLanguageCategories get_SupportedCategories();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Protobuf.ProtobufLanguage", "16")]
public class JetBrains.ReSharper.Psi.Protobuf.ProtobufLanguageService : LanguageService {
    private IProtobufCodeFormatter myCodeFormatter;
    private Regex myNameRegex;
    public ICodeFormatter CodeFormatter { get; }
    public IDeclaredElementPresenter DeclaredElementPresenter { get; }
    public ILanguageCacheProvider CacheProvider { get; }
    public bool IsCaseSensitive { get; }
    public bool SupportTypeMemberCache { get; }
    public ITypePresenter TypePresenter { get; }
    public ProtobufLanguageService(ProtobufLanguage psiLanguageType, IConstantValueService constantValueService, IProtobufCodeFormatter codeFormatter);
    public virtual ICodeFormatter get_CodeFormatter();
    public virtual IDeclaredElementPresenter get_DeclaredElementPresenter();
    public virtual ILanguageCacheProvider get_CacheProvider();
    public virtual bool IsValidName(DeclaredElementType elementType, string name);
    public virtual ILexerFactory GetPrimaryLexerFactory();
    public virtual ILexer CreateFilteringLexer(ILexer lexer);
    public virtual IParser CreateParser(ILexer lexer, IPsiModule module, IPsiSourceFile sourceFile);
    public virtual bool get_IsCaseSensitive();
    public virtual bool get_SupportTypeMemberCache();
    public virtual ITypePresenter get_TypePresenter();
    public virtual IEnumerable`1<ITypeDeclaration> FindTypeDeclarations(IFile file);
}
internal class JetBrains.ReSharper.Psi.Protobuf.ProtobufLexerFactory : object {
    public sealed virtual ILexer CreateLexer(IBuffer buffer);
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.ProtobufProjectFileType", "16")]
public class JetBrains.ReSharper.Psi.Protobuf.ProtobufProjectFileLanguageService : object {
    private ProtobufProjectFileType myProtobufProjectFileType;
    public ProjectFileType LanguageType { get; }
    public IconId Icon { get; }
    public ProtobufProjectFileLanguageService(ProtobufProjectFileType protobufProjectFileType);
    public sealed virtual ProjectFileType get_LanguageType();
    public sealed virtual IconId get_Icon();
    public sealed virtual IPsiSourceFileProperties GetPsiProperties(IProjectFile projectFile, IPsiSourceFile sourceFile, IsCompileService isCompileService);
    public sealed virtual PsiLanguageType GetPsiLanguageType(IProjectFile projectFile);
    public sealed virtual PsiLanguageType GetPsiLanguageType(IPsiSourceFile sourceFile);
    public sealed virtual PsiLanguageType GetPsiLanguageType(ProjectFileType languageType);
    public sealed virtual ILexerFactory GetMixedLexerFactory(ISolution solution, IBuffer buffer, IPsiSourceFile sourceFile);
    public sealed virtual PreProcessingDirective[] GetPreprocessorDefines(IProject project, TargetFrameworkId targetFrameworkId);
}
public enum JetBrains.ReSharper.Psi.Protobuf.ProtobufVersion : Enum {
    public int value__;
    public static ProtobufVersion Proto2;
    public static ProtobufVersion Proto3;
}
public interface JetBrains.ReSharper.Psi.Protobuf.Resolve.IProtobufDeclaredElement {
    public string FullName { get; }
    public string EnclosingType { get; }
    public abstract virtual string get_FullName();
    public abstract virtual string get_EnclosingType();
    public abstract virtual ISymbolTable GetSymbolTable(SymbolTableMode mode, int level);
}
public class JetBrains.ReSharper.Psi.Protobuf.Resources.PsiProtobufThemedIcons : object {
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Psi.Protobuf.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string AfterCommaInOptionsSettingDescription { get; }
    public static string AfterInAggregateOptionsSettingDescription { get; }
    public static string AroundInFieldsAndOptionsSettingDescription { get; }
    public static string BeforeInAggregateOptionsSettingDescription { get; }
    public static string BetweenOptionNameAndAggregateValueSettingDescription { get; }
    public static string CodeFormattingInProtobufSettingDescription { get; }
    public static string CurlyBracesNotInOptionsSettingDescription { get; }
    public static string CurlyPointyBracesInAggregateValuesInOptionsSettingDescription { get; }
    public static string EmptyBlockStyleSettingDescription { get; }
    public static string InsideCurlyPointyBracesSettingDescription { get; }
    public static string InsideEmptyCurlyPointyBracesSettingDescription { get; }
    public static string MaxBlankLinesBetweenDeclarationsSettingDescription { get; }
    public static string MinBlankLinesAroundLargeDeclarationsMessagesEtcSettingDescription { get; }
    public static string SimpleBlocksSettingDescription { get; }
    public static string UsePointyBracesInAggregateOptionsSettingDescription { get; }
    public static string DescriptorProtoBuiltin_Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_AfterCommaInOptionsSettingDescription();
    public static string get_AfterInAggregateOptionsSettingDescription();
    public static string get_AroundInFieldsAndOptionsSettingDescription();
    public static string get_BeforeInAggregateOptionsSettingDescription();
    public static string get_BetweenOptionNameAndAggregateValueSettingDescription();
    public static string get_CodeFormattingInProtobufSettingDescription();
    public static string get_CurlyBracesNotInOptionsSettingDescription();
    public static string get_CurlyPointyBracesInAggregateValuesInOptionsSettingDescription();
    public static string get_EmptyBlockStyleSettingDescription();
    public static string get_InsideCurlyPointyBracesSettingDescription();
    public static string get_InsideEmptyCurlyPointyBracesSettingDescription();
    public static string get_MaxBlankLinesBetweenDeclarationsSettingDescription();
    public static string get_MinBlankLinesAroundLargeDeclarationsMessagesEtcSettingDescription();
    public static string get_SimpleBlocksSettingDescription();
    public static string get_UsePointyBracesInAggregateOptionsSettingDescription();
    public static string get_DescriptorProtoBuiltin_Text();
}
public interface JetBrains.ReSharper.Psi.Protobuf.Search.IProtobufDerivedElementProvider {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IDeclaredElement> GetDerivedElements(IPsiSourceFile protoFile, string protobufPackage, string protobufTypeName, IDictionary`2<string, string> fileOptions, ProtobufDeclaredElementType declaredElementType, string subobjectName);
}
public static class JetBrains.ReSharper.Psi.Protobuf.Search.ProtobufDerivedElementProviderUtil : object {
    public static IEnumerable`1<IDeclaredElement> GetDerivedElements(IProtobufDeclaredElement declaredElement);
}
internal class JetBrains.ReSharper.Psi.Protobuf.Search.ProtobufReferenceSearcher : object {
    private IDeclaredElementsSet myElements;
    private ReferenceSearcherParameters myReferenceSearcherParameters;
    private List`1<string> myElementNames;
    public ProtobufReferenceSearcher(IDeclaredElementsSet elements, ReferenceSearcherParameters referenceSearcherParameters);
    public sealed virtual bool ProcessProjectItem(IPsiSourceFile sourceFile, IFindResultConsumer`1<TResult> consumer);
    public sealed virtual bool ProcessElement(ITreeNode element, IFindResultConsumer`1<TResult> consumer);
}
internal class JetBrains.ReSharper.Psi.Protobuf.Search.ProtobufTextOccurrenceSearcher : TextOccurrenceSearcherBase`1<ProtobufLanguage> {
    protected Predicate`1<ITreeNode> Predicate { get; }
    public ProtobufTextOccurrenceSearcher(IEnumerable`1<IDeclaredElement> elements);
    public ProtobufTextOccurrenceSearcher(string subject);
    protected virtual Predicate`1<ITreeNode> get_Predicate();
    private sealed virtual override bool JetBrains.ReSharper.Psi.ExtensionsAPI.IDomainSpecificSearcher.ProcessElement(ITreeNode element, IFindResultConsumer`1<TResult> consumer);
}
[PsiSharedComponentAttribute]
internal class JetBrains.ReSharper.Psi.Protobuf.Search.ProtobufUsageSearchFactory : DomainSpecificSearcherFactoryBase {
    private SearchDomainFactory mySearchDomainFactory;
    public ProtobufUsageSearchFactory(SearchDomainFactory searchDomainFactory);
    public virtual bool IsCompatibleWithLanguage(PsiLanguageType languageType);
    public virtual IDomainSpecificSearcher CreateReferenceSearcher(IDeclaredElementsSet elements, ReferenceSearcherParameters referenceSearcherParameters);
    public virtual IDomainSpecificSearcher CreateTextOccurrenceSearcher(IDeclaredElementsSet elements);
    public virtual IDomainSpecificSearcher CreateTextOccurrenceSearcher(string subject);
    public virtual IDomainSpecificSearcher CreateConstantExpressionSearcher(ConstantValue constantValue, bool onlyLiteralExpression);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.Protobuf.Search.ProtobufUsageSearchFactory/<GetAllPossibleWordsInFile>d__7")]
public virtual IEnumerable`1<string> GetAllPossibleWordsInFile(IDeclaredElement element);
    public virtual ISearchDomain GetDeclaredElementSearchDomain(IDeclaredElement declaredElement);
}
public enum JetBrains.ReSharper.Psi.Protobuf.Services.OptionContext : Enum {
    public int value__;
    public static OptionContext File;
    public static OptionContext Message;
    public static OptionContext MessageField;
    public static OptionContext Enum;
    public static OptionContext EnumValue;
    public static OptionContext Service;
    public static OptionContext Method;
}
public static class JetBrains.ReSharper.Psi.Protobuf.Services.OptionContextUtil : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.Protobuf.Services.OptionContextUtil/<OptionsEnumerable>d__0")]
public static IEnumerable`1<OptionContext> OptionsEnumerable();
    public static Nullable`1<OptionContext> DescriptorNameToContext(string name);
    public static string ContextToDescriptorName(OptionContext context);
    public static OptionContext DetectOptionContext(ITreeNode option);
    public static string ContextToDescriptorFullName(OptionContext context);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Psi.Protobuf.Services.ProtobufServices : object {
    [CompilerGeneratedAttribute]
private ProtobufDeclarationCache <DeclarationCache>k__BackingField;
    [CompilerGeneratedAttribute]
private ProtobufImportCache <ImportCache>k__BackingField;
    [CompilerGeneratedAttribute]
private ProtobufFileOptionsCache <OptionsCache>k__BackingField;
    public ProtobufDeclarationCache DeclarationCache { get; }
    public ProtobufImportCache ImportCache { get; }
    public ProtobufFileOptionsCache OptionsCache { get; }
    public ProtobufServices(ProtobufDeclarationCache declarationCache, ProtobufImportCache importCache, ProtobufFileOptionsCache optionsCache);
    [CompilerGeneratedAttribute]
public ProtobufDeclarationCache get_DeclarationCache();
    [CompilerGeneratedAttribute]
public ProtobufImportCache get_ImportCache();
    [CompilerGeneratedAttribute]
public ProtobufFileOptionsCache get_OptionsCache();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.AggregateOptionIdentifierNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IAggregateOptionIdentifier GetByExtensionName(IFieldOrExtensionReference param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IAggregateOptionIdentifier GetByName(IIdentifier param);
}
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.AnyTokenNotRcurlyNavigator : object {
}
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.BracketedOptionNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IBracketedOption GetByOption(ISingleOption param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.EnumBodyNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IEnumBody GetByField(IEnumField param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IEnumBody GetByOption(ISingleOption param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.EnumDeclarationNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IEnumDeclaration GetByBody(IEnumBody param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IEnumDeclaration GetByName(IIdentifier param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.EnumFieldNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IEnumField GetByName(IIdentifier param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IEnumField GetByOptions(IBracketedOption param);
}
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.EnumValueReferenceNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IEnumValueReference GetByName(IIdentifier param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.ExtendStatementNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IExtendStatement GetByField(IFieldDeclaration param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IExtendStatement GetByName(IProtobufType param);
}
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.ExtensionRangeNavigator : object {
}
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.ExtensionsNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IExtensions GetByRange(IExtensionRange param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.FieldDeclarationNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IFieldDeclaration GetByField(IRealFieldDeclaration param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IFieldDeclaration GetByGroup(IGroupFieldDeclaration param);
}
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.FieldOrExtensionReferenceNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IFieldOrExtensionReference GetByName(IFullIdentifier param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.FullIdentifierNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IFullIdentifier GetByFirstIdentifier(IIdentifier param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IFullIdentifier GetByFollowupIdentifier(IIdentifier param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.GroupFieldDeclarationNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IGroupFieldDeclaration GetByBody(IMessageBody param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IGroupFieldDeclaration GetByName(IIdentifier param);
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IAggregateOptionIdentifier {
    public IFieldOrExtensionReference ExtensionName { get; }
    public IIdentifier Name { get; }
    public IReference LastReference { get; }
    public abstract virtual IFieldOrExtensionReference get_ExtensionName();
    public abstract virtual IIdentifier get_Name();
    public abstract virtual IFieldOrExtensionReference SetExtensionName(IFieldOrExtensionReference param);
    public abstract virtual IIdentifier SetName(IIdentifier param);
    public abstract virtual IReference get_LastReference();
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IAnyTokenNotRcurly {
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IBracketedOption {
    public TreeNodeCollection`1<ISingleOption> Options { get; }
    public TreeNodeEnumerable`1<ISingleOption> OptionsEnumerable { get; }
    public abstract virtual TreeNodeCollection`1<ISingleOption> get_Options();
    public abstract virtual TreeNodeEnumerable`1<ISingleOption> get_OptionsEnumerable();
}
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.IdentifierNavigator : object {
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IEnumBody {
    public TreeNodeCollection`1<IEnumField> Field { get; }
    public TreeNodeEnumerable`1<IEnumField> FieldEnumerable { get; }
    public TreeNodeCollection`1<ISingleOption> Options { get; }
    public TreeNodeEnumerable`1<ISingleOption> OptionsEnumerable { get; }
    public abstract virtual TreeNodeCollection`1<IEnumField> get_Field();
    public abstract virtual TreeNodeEnumerable`1<IEnumField> get_FieldEnumerable();
    public abstract virtual TreeNodeCollection`1<ISingleOption> get_Options();
    public abstract virtual TreeNodeEnumerable`1<ISingleOption> get_OptionsEnumerable();
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IEnumDeclaration {
    public IEnumBody Body { get; }
    public IIdentifier Name { get; }
    public abstract virtual IEnumBody get_Body();
    public abstract virtual IIdentifier get_Name();
    public abstract virtual IEnumBody SetBody(IEnumBody param);
    public abstract virtual IIdentifier SetName(IIdentifier param);
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IEnumField {
    public IIdentifier Name { get; }
    public IBracketedOption Options { get; }
    public ITokenNode Value { get; }
    public abstract virtual IIdentifier get_Name();
    public abstract virtual IBracketedOption get_Options();
    public abstract virtual ITokenNode get_Value();
    public abstract virtual IIdentifier SetName(IIdentifier param);
    public abstract virtual IBracketedOption SetOptions(IBracketedOption param);
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IEnumValueReference {
    public IIdentifier Name { get; }
    public abstract virtual IIdentifier get_Name();
    public abstract virtual IIdentifier SetName(IIdentifier param);
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IExtendStatement {
    public TreeNodeCollection`1<IFieldDeclaration> Field { get; }
    public TreeNodeEnumerable`1<IFieldDeclaration> FieldEnumerable { get; }
    public IProtobufType Name { get; }
    public abstract virtual TreeNodeCollection`1<IFieldDeclaration> get_Field();
    public abstract virtual TreeNodeEnumerable`1<IFieldDeclaration> get_FieldEnumerable();
    public abstract virtual IProtobufType get_Name();
    public abstract virtual IProtobufType SetName(IProtobufType param);
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IExtensionRange {
    public ITokenNode From { get; }
    public ITokenNode To { get; }
    public abstract virtual ITokenNode get_From();
    public abstract virtual ITokenNode get_To();
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IExtensions {
    public TreeNodeCollection`1<IExtensionRange> Range { get; }
    public TreeNodeEnumerable`1<IExtensionRange> RangeEnumerable { get; }
    public abstract virtual TreeNodeCollection`1<IExtensionRange> get_Range();
    public abstract virtual TreeNodeEnumerable`1<IExtensionRange> get_RangeEnumerable();
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IFieldDeclaration {
    public ITokenNode Declarator { get; }
    public IRealFieldDeclaration Field { get; }
    public IGroupFieldDeclaration Group { get; }
    public abstract virtual ITokenNode get_Declarator();
    public abstract virtual IRealFieldDeclaration get_Field();
    public abstract virtual IGroupFieldDeclaration get_Group();
    public abstract virtual IRealFieldDeclaration SetField(IRealFieldDeclaration param);
    public abstract virtual IGroupFieldDeclaration SetGroup(IGroupFieldDeclaration param);
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IFieldOrExtensionReference {
    public IFullIdentifier Name { get; }
    public abstract virtual IFullIdentifier get_Name();
    public abstract virtual IFullIdentifier SetName(IFullIdentifier param);
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IFullIdentifier {
    public ITokenNode FirstDot { get; }
    public IIdentifier FirstIdentifier { get; }
    public TreeNodeCollection`1<IIdentifier> FollowupIdentifiers { get; }
    public TreeNodeEnumerable`1<IIdentifier> FollowupIdentifiersEnumerable { get; }
    public TreeNodeCollection`1<ITokenNode> OtherDots { get; }
    public TreeNodeEnumerable`1<ITokenNode> OtherDotsEnumerable { get; }
    public abstract virtual ITokenNode get_FirstDot();
    public abstract virtual IIdentifier get_FirstIdentifier();
    public abstract virtual TreeNodeCollection`1<IIdentifier> get_FollowupIdentifiers();
    public abstract virtual TreeNodeEnumerable`1<IIdentifier> get_FollowupIdentifiersEnumerable();
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_OtherDots();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_OtherDotsEnumerable();
    public abstract virtual IIdentifier SetFirstIdentifier(IIdentifier param);
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IGroupFieldDeclaration {
    public IMessageBody Body { get; }
    public IIdentifier Name { get; }
    public ITokenNode Number { get; }
    public ITokenNode Type { get; }
    public abstract virtual IMessageBody get_Body();
    public abstract virtual IIdentifier get_Name();
    public abstract virtual ITokenNode get_Number();
    public abstract virtual ITokenNode get_Type();
    public abstract virtual IMessageBody SetBody(IMessageBody param);
    public abstract virtual IIdentifier SetName(IIdentifier param);
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IIdentifier {
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IImportStatement {
    public ITokenNode Specifier { get; }
    public TreeNodeCollection`1<ITokenNode> Value { get; }
    public TreeNodeEnumerable`1<ITokenNode> ValueEnumerable { get; }
    public abstract virtual ITokenNode get_Specifier();
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_Value();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_ValueEnumerable();
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IMapArguments {
    public IProtobufType KeyType { get; }
    public IProtobufType ValueType { get; }
    public abstract virtual IProtobufType get_KeyType();
    public abstract virtual IProtobufType get_ValueType();
    public abstract virtual IProtobufType SetKeyType(IProtobufType param);
    public abstract virtual IProtobufType SetValueType(IProtobufType param);
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IMaybeStreamedType {
    public IProtobufType TypeName { get; }
    public abstract virtual IProtobufType get_TypeName();
    public abstract virtual IProtobufType SetTypeName(IProtobufType param);
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IMessageBody {
    public TreeNodeCollection`1<IExtensions> Extensions { get; }
    public TreeNodeEnumerable`1<IExtensions> ExtensionsEnumerable { get; }
    public TreeNodeCollection`1<IFieldDeclaration> Field { get; }
    public TreeNodeEnumerable`1<IFieldDeclaration> FieldEnumerable { get; }
    public TreeNodeCollection`1<IEnumDeclaration> NestedEnum { get; }
    public TreeNodeEnumerable`1<IEnumDeclaration> NestedEnumEnumerable { get; }
    public TreeNodeCollection`1<IExtendStatement> NestedExtend { get; }
    public TreeNodeEnumerable`1<IExtendStatement> NestedExtendEnumerable { get; }
    public TreeNodeCollection`1<IMessageDeclaration> NestedMessage { get; }
    public TreeNodeEnumerable`1<IMessageDeclaration> NestedMessageEnumerable { get; }
    public TreeNodeCollection`1<IOneofDeclaration> OneOf { get; }
    public TreeNodeEnumerable`1<IOneofDeclaration> OneOfEnumerable { get; }
    public TreeNodeCollection`1<ISingleOption> Options { get; }
    public TreeNodeEnumerable`1<ISingleOption> OptionsEnumerable { get; }
    public TreeNodeCollection`1<IReserved> Reserved { get; }
    public TreeNodeEnumerable`1<IReserved> ReservedEnumerable { get; }
    public abstract virtual TreeNodeCollection`1<IExtensions> get_Extensions();
    public abstract virtual TreeNodeEnumerable`1<IExtensions> get_ExtensionsEnumerable();
    public abstract virtual TreeNodeCollection`1<IFieldDeclaration> get_Field();
    public abstract virtual TreeNodeEnumerable`1<IFieldDeclaration> get_FieldEnumerable();
    public abstract virtual TreeNodeCollection`1<IEnumDeclaration> get_NestedEnum();
    public abstract virtual TreeNodeEnumerable`1<IEnumDeclaration> get_NestedEnumEnumerable();
    public abstract virtual TreeNodeCollection`1<IExtendStatement> get_NestedExtend();
    public abstract virtual TreeNodeEnumerable`1<IExtendStatement> get_NestedExtendEnumerable();
    public abstract virtual TreeNodeCollection`1<IMessageDeclaration> get_NestedMessage();
    public abstract virtual TreeNodeEnumerable`1<IMessageDeclaration> get_NestedMessageEnumerable();
    public abstract virtual TreeNodeCollection`1<IOneofDeclaration> get_OneOf();
    public abstract virtual TreeNodeEnumerable`1<IOneofDeclaration> get_OneOfEnumerable();
    public abstract virtual TreeNodeCollection`1<ISingleOption> get_Options();
    public abstract virtual TreeNodeEnumerable`1<ISingleOption> get_OptionsEnumerable();
    public abstract virtual TreeNodeCollection`1<IReserved> get_Reserved();
    public abstract virtual TreeNodeEnumerable`1<IReserved> get_ReservedEnumerable();
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IMessageDeclaration {
    public IMessageBody Body { get; }
    public IIdentifier Name { get; }
    public abstract virtual IMessageBody get_Body();
    public abstract virtual IIdentifier get_Name();
    public abstract virtual IMessageBody SetBody(IMessageBody param);
    public abstract virtual IIdentifier SetName(IIdentifier param);
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IMessageLikeDeclaration {
    public IMessageBody Body { get; }
    public abstract virtual IMessageBody get_Body();
}
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.ImportStatementNavigator : object {
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.INamedDeclaration {
    public ITreeNode DeclarationName { get; }
    public abstract virtual ITreeNode get_DeclarationName();
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IOneofDeclaration {
    public TreeNodeCollection`1<IFieldDeclaration> Field { get; }
    public TreeNodeEnumerable`1<IFieldDeclaration> FieldEnumerable { get; }
    public IIdentifier Name { get; }
    public abstract virtual TreeNodeCollection`1<IFieldDeclaration> get_Field();
    public abstract virtual TreeNodeEnumerable`1<IFieldDeclaration> get_FieldEnumerable();
    public abstract virtual IIdentifier get_Name();
    public abstract virtual IIdentifier SetName(IIdentifier param);
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IOptionAggregateBlock {
    public ITokenNode ClosingBrace { get; }
    public ITokenNode OpeningBrace { get; }
    public TreeNodeCollection`1<IOptionAggregateOption> Options { get; }
    public TreeNodeEnumerable`1<IOptionAggregateOption> OptionsEnumerable { get; }
    public abstract virtual ITokenNode get_ClosingBrace();
    public abstract virtual ITokenNode get_OpeningBrace();
    public abstract virtual TreeNodeCollection`1<IOptionAggregateOption> get_Options();
    public abstract virtual TreeNodeEnumerable`1<IOptionAggregateOption> get_OptionsEnumerable();
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IOptionAggregateOption {
    public IOptionAggregateBlock Aggregate { get; }
    public IAggregateOptionIdentifier Name { get; }
    public IEnumValueReference NamedValue { get; }
    public ITokenNode Separator { get; }
    public TreeNodeCollection`1<ITokenNode> Value { get; }
    public TreeNodeEnumerable`1<ITokenNode> ValueEnumerable { get; }
    public abstract virtual IOptionAggregateBlock get_Aggregate();
    public abstract virtual IAggregateOptionIdentifier get_Name();
    public abstract virtual IEnumValueReference get_NamedValue();
    public abstract virtual ITokenNode get_Separator();
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_Value();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_ValueEnumerable();
    public abstract virtual IOptionAggregateBlock SetAggregate(IOptionAggregateBlock param);
    public abstract virtual IAggregateOptionIdentifier SetName(IAggregateOptionIdentifier param);
    public abstract virtual IEnumValueReference SetNamedValue(IEnumValueReference param);
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IOptionContainer {
    public TreeNodeCollection`1<ISingleOption> Options { get; }
    public TreeNodeEnumerable`1<ISingleOption> OptionsEnumerable { get; }
    public abstract virtual TreeNodeCollection`1<ISingleOption> get_Options();
    public abstract virtual TreeNodeEnumerable`1<ISingleOption> get_OptionsEnumerable();
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IOptionIdentifier {
    public TreeNodeCollection`1<IOptionIdentifierPart> Name { get; }
    public TreeNodeEnumerable`1<IOptionIdentifierPart> NameEnumerable { get; }
    public IReference LastReference { get; }
    public abstract virtual TreeNodeCollection`1<IOptionIdentifierPart> get_Name();
    public abstract virtual TreeNodeEnumerable`1<IOptionIdentifierPart> get_NameEnumerable();
    public abstract virtual IReference get_LastReference();
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IOptionIdentifierPart {
    public ITokenNode Dot { get; }
    public IFieldOrExtensionReference FullIdentifier { get; }
    public IIdentifier Identifier { get; }
    public abstract virtual ITokenNode get_Dot();
    public abstract virtual IFieldOrExtensionReference get_FullIdentifier();
    public abstract virtual IIdentifier get_Identifier();
    public abstract virtual IFieldOrExtensionReference SetFullIdentifier(IFieldOrExtensionReference param);
    public abstract virtual IIdentifier SetIdentifier(IIdentifier param);
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IOptionsOrSemicolon {
    public TreeNodeCollection`1<ISingleOption> Options { get; }
    public TreeNodeEnumerable`1<ISingleOption> OptionsEnumerable { get; }
    public ITokenNode Semicolon { get; }
    public abstract virtual TreeNodeCollection`1<ISingleOption> get_Options();
    public abstract virtual TreeNodeEnumerable`1<ISingleOption> get_OptionsEnumerable();
    public abstract virtual ITokenNode get_Semicolon();
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IOptionValueHolder {
    public IReference LastReference { get; }
    public IOptionAggregateBlock Aggregate { get; }
    public IEnumValueReference NamedValue { get; }
    public TreeNodeCollection`1<ITokenNode> Value { get; }
    public TreeNodeEnumerable`1<ITokenNode> ValueEnumerable { get; }
    public abstract virtual IReference get_LastReference();
    public abstract virtual IOptionAggregateBlock get_Aggregate();
    public abstract virtual IEnumValueReference get_NamedValue();
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_Value();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_ValueEnumerable();
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IPackageDeclaredElementPart {
    public IIdentifier Name { get; }
    public abstract virtual IIdentifier get_Name();
    public abstract virtual IIdentifier SetName(IIdentifier param);
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IPackageStatement {
    public TreeNodeCollection`1<IPackageDeclaredElementPart> Name { get; }
    public TreeNodeEnumerable`1<IPackageDeclaredElementPart> NameEnumerable { get; }
    public abstract virtual TreeNodeCollection`1<IPackageDeclaredElementPart> get_Name();
    public abstract virtual TreeNodeEnumerable`1<IPackageDeclaredElementPart> get_NameEnumerable();
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IProtobufFile {
    public TreeNodeCollection`1<IEnumDeclaration> EnumDeclaration { get; }
    public TreeNodeEnumerable`1<IEnumDeclaration> EnumDeclarationEnumerable { get; }
    public TreeNodeCollection`1<IExtendStatement> ExtendDeclaration { get; }
    public TreeNodeEnumerable`1<IExtendStatement> ExtendDeclarationEnumerable { get; }
    public TreeNodeCollection`1<IImportStatement> ImportStatement { get; }
    public TreeNodeEnumerable`1<IImportStatement> ImportStatementEnumerable { get; }
    public TreeNodeCollection`1<IMessageDeclaration> MessageDeclaration { get; }
    public TreeNodeEnumerable`1<IMessageDeclaration> MessageDeclarationEnumerable { get; }
    public TreeNodeCollection`1<ISingleOption> Options { get; }
    public TreeNodeEnumerable`1<ISingleOption> OptionsEnumerable { get; }
    public TreeNodeCollection`1<IPackageStatement> PackageStatement { get; }
    public TreeNodeEnumerable`1<IPackageStatement> PackageStatementEnumerable { get; }
    public TreeNodeCollection`1<IServiceDefinition> ServiceDeclaration { get; }
    public TreeNodeEnumerable`1<IServiceDefinition> ServiceDeclarationEnumerable { get; }
    public TreeNodeCollection`1<ISyntaxDeclaration> Syntax { get; }
    public TreeNodeEnumerable`1<ISyntaxDeclaration> SyntaxEnumerable { get; }
    public string PackageName { get; }
    public ProtobufFileAttributes Attributes { get; }
    public abstract virtual TreeNodeCollection`1<IEnumDeclaration> get_EnumDeclaration();
    public abstract virtual TreeNodeEnumerable`1<IEnumDeclaration> get_EnumDeclarationEnumerable();
    public abstract virtual TreeNodeCollection`1<IExtendStatement> get_ExtendDeclaration();
    public abstract virtual TreeNodeEnumerable`1<IExtendStatement> get_ExtendDeclarationEnumerable();
    public abstract virtual TreeNodeCollection`1<IImportStatement> get_ImportStatement();
    public abstract virtual TreeNodeEnumerable`1<IImportStatement> get_ImportStatementEnumerable();
    public abstract virtual TreeNodeCollection`1<IMessageDeclaration> get_MessageDeclaration();
    public abstract virtual TreeNodeEnumerable`1<IMessageDeclaration> get_MessageDeclarationEnumerable();
    public abstract virtual TreeNodeCollection`1<ISingleOption> get_Options();
    public abstract virtual TreeNodeEnumerable`1<ISingleOption> get_OptionsEnumerable();
    public abstract virtual TreeNodeCollection`1<IPackageStatement> get_PackageStatement();
    public abstract virtual TreeNodeEnumerable`1<IPackageStatement> get_PackageStatementEnumerable();
    public abstract virtual TreeNodeCollection`1<IServiceDefinition> get_ServiceDeclaration();
    public abstract virtual TreeNodeEnumerable`1<IServiceDefinition> get_ServiceDeclarationEnumerable();
    public abstract virtual TreeNodeCollection`1<ISyntaxDeclaration> get_Syntax();
    public abstract virtual TreeNodeEnumerable`1<ISyntaxDeclaration> get_SyntaxEnumerable();
    public abstract virtual string get_PackageName();
    public abstract virtual ProtobufFileAttributes get_Attributes();
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IProtobufReferenceHolder {
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IProtobufTreeNode {
    public abstract virtual void Accept(TreeNodeVisitor visitor);
    public abstract virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public abstract virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IProtobufType {
    public ITokenNode Builtin { get; }
    public IMapArguments MapArguments { get; }
    public IFullIdentifier Name { get; }
    public abstract virtual ITokenNode get_Builtin();
    public abstract virtual IMapArguments get_MapArguments();
    public abstract virtual IFullIdentifier get_Name();
    public abstract virtual IMapArguments SetMapArguments(IMapArguments param);
    public abstract virtual IFullIdentifier SetName(IFullIdentifier param);
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IRealFieldDeclaration {
    public IIdentifier Name { get; }
    public ITokenNode Number { get; }
    public IBracketedOption Options { get; }
    public IProtobufType Type { get; }
    public abstract virtual IIdentifier get_Name();
    public abstract virtual ITokenNode get_Number();
    public abstract virtual IBracketedOption get_Options();
    public abstract virtual IProtobufType get_Type();
    public abstract virtual IIdentifier SetName(IIdentifier param);
    public abstract virtual IBracketedOption SetOptions(IBracketedOption param);
    public abstract virtual IProtobufType SetType(IProtobufType param);
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IReserved {
    public ITokenNode Keyword { get; }
    public TreeNodeCollection`1<IReservedValue> Value { get; }
    public TreeNodeEnumerable`1<IReservedValue> ValueEnumerable { get; }
    public abstract virtual ITokenNode get_Keyword();
    public abstract virtual TreeNodeCollection`1<IReservedValue> get_Value();
    public abstract virtual TreeNodeEnumerable`1<IReservedValue> get_ValueEnumerable();
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IReservedValue {
    public ITokenNode From { get; }
    public TreeNodeCollection`1<ITokenNode> Name { get; }
    public TreeNodeEnumerable`1<ITokenNode> NameEnumerable { get; }
    public ITokenNode To { get; }
    public abstract virtual ITokenNode get_From();
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_Name();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_NameEnumerable();
    public abstract virtual ITokenNode get_To();
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IRpcDefinition {
    public IMaybeStreamedType ArgumentType { get; }
    public IIdentifier Name { get; }
    public IOptionsOrSemicolon Options { get; }
    public IMaybeStreamedType ReturnType { get; }
    public abstract virtual IMaybeStreamedType get_ArgumentType();
    public abstract virtual IIdentifier get_Name();
    public abstract virtual IOptionsOrSemicolon get_Options();
    public abstract virtual IMaybeStreamedType get_ReturnType();
    public abstract virtual IMaybeStreamedType SetArgumentType(IMaybeStreamedType param);
    public abstract virtual IIdentifier SetName(IIdentifier param);
    public abstract virtual IOptionsOrSemicolon SetOptions(IOptionsOrSemicolon param);
    public abstract virtual IMaybeStreamedType SetReturnType(IMaybeStreamedType param);
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IServiceDefinition {
    public IIdentifier Name { get; }
    public TreeNodeCollection`1<ISingleOption> Options { get; }
    public TreeNodeEnumerable`1<ISingleOption> OptionsEnumerable { get; }
    public TreeNodeCollection`1<IRpcDefinition> RPC { get; }
    public TreeNodeEnumerable`1<IRpcDefinition> RPCEnumerable { get; }
    public TreeNodeCollection`1<IStreamDefinition> Stream { get; }
    public TreeNodeEnumerable`1<IStreamDefinition> StreamEnumerable { get; }
    public abstract virtual IIdentifier get_Name();
    public abstract virtual TreeNodeCollection`1<ISingleOption> get_Options();
    public abstract virtual TreeNodeEnumerable`1<ISingleOption> get_OptionsEnumerable();
    public abstract virtual TreeNodeCollection`1<IRpcDefinition> get_RPC();
    public abstract virtual TreeNodeEnumerable`1<IRpcDefinition> get_RPCEnumerable();
    public abstract virtual TreeNodeCollection`1<IStreamDefinition> get_Stream();
    public abstract virtual TreeNodeEnumerable`1<IStreamDefinition> get_StreamEnumerable();
    public abstract virtual IIdentifier SetName(IIdentifier param);
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.ISingleOption {
    public IOptionAggregateBlock Aggregate { get; }
    public IOptionIdentifier Name { get; }
    public IEnumValueReference NamedValue { get; }
    public TreeNodeCollection`1<ITokenNode> Value { get; }
    public TreeNodeEnumerable`1<ITokenNode> ValueEnumerable { get; }
    public abstract virtual IOptionAggregateBlock get_Aggregate();
    public abstract virtual IOptionIdentifier get_Name();
    public abstract virtual IEnumValueReference get_NamedValue();
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_Value();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_ValueEnumerable();
    public abstract virtual IOptionAggregateBlock SetAggregate(IOptionAggregateBlock param);
    public abstract virtual IOptionIdentifier SetName(IOptionIdentifier param);
    public abstract virtual IEnumValueReference SetNamedValue(IEnumValueReference param);
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.IStreamDefinition {
}
public interface JetBrains.ReSharper.Psi.Protobuf.Tree.ISyntaxDeclaration {
    public TreeNodeCollection`1<ITokenNode> Value { get; }
    public TreeNodeEnumerable`1<ITokenNode> ValueEnumerable { get; }
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_Value();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_ValueEnumerable();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.MapArgumentsNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMapArguments GetByKeyType(IProtobufType param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMapArguments GetByValueType(IProtobufType param);
}
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.MaybeStreamedTypeNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMaybeStreamedType GetByTypeName(IProtobufType param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.MessageBodyNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMessageBody GetByExtension(IExtensions param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMessageBody GetByField(IFieldDeclaration param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMessageBody GetByNestedEnum(IEnumDeclaration param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMessageBody GetByNestedExtend(IExtendStatement param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMessageBody GetByNestedMessage(IMessageDeclaration param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMessageBody GetByOneOf(IOneofDeclaration param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMessageBody GetByOption(ISingleOption param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMessageBody GetByReserved(IReserved param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.MessageDeclarationNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMessageDeclaration GetByBody(IMessageBody param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IMessageDeclaration GetByName(IIdentifier param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.OneofDeclarationNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IOneofDeclaration GetByField(IFieldDeclaration param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IOneofDeclaration GetByName(IIdentifier param);
}
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.OptionAggregateBlockNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IOptionAggregateBlock GetByOption(IOptionAggregateOption param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.OptionAggregateOptionNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IOptionAggregateOption GetByAggregate(IOptionAggregateBlock param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IOptionAggregateOption GetByName(IAggregateOptionIdentifier param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IOptionAggregateOption GetByNamedValue(IEnumValueReference param);
}
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.OptionIdentifierNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IOptionIdentifier GetByName(IOptionIdentifierPart param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.OptionIdentifierPartNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IOptionIdentifierPart GetByFullIdentifier(IFieldOrExtensionReference param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IOptionIdentifierPart GetByIdentifier(IIdentifier param);
}
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.OptionsOrSemicolonNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IOptionsOrSemicolon GetByOption(ISingleOption param);
}
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.PackageDeclaredElementPartNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IPackageDeclaredElementPart GetByName(IIdentifier param);
}
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.PackageStatementNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IPackageStatement GetByName(IPackageDeclaredElementPart param);
}
internal abstract class JetBrains.ReSharper.Psi.Protobuf.Tree.ProtobufCompositeNodeType : CompositeNodeType {
    public ProtobufCompositeNodeType(string s, int index);
}
internal abstract class JetBrains.ReSharper.Psi.Protobuf.Tree.ProtobufFileBase : FileElementBase {
    public PsiLanguageType Language { get; }
    public abstract virtual void Accept(TreeNodeVisitor visitor);
    public abstract virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public abstract virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual PsiLanguageType get_Language();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.ProtobufFileNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IProtobufFile GetByEnumDeclaration(IEnumDeclaration param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IProtobufFile GetByExtendDeclaration(IExtendStatement param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IProtobufFile GetByImportStatement(IImportStatement param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IProtobufFile GetByMessageDeclaration(IMessageDeclaration param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IProtobufFile GetByOption(ISingleOption param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IProtobufFile GetByPackageStatement(IPackageStatement param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IProtobufFile GetByServiceDeclaration(IServiceDefinition param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IProtobufFile GetBySyntax(ISyntaxDeclaration param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.ProtobufTypeNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IProtobufType GetByMapArguments(IMapArguments param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IProtobufType GetByName(IFullIdentifier param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.RealFieldDeclarationNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IRealFieldDeclaration GetByName(IIdentifier param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IRealFieldDeclaration GetByOptions(IBracketedOption param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IRealFieldDeclaration GetByType(IProtobufType param);
}
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.ReservedNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IReserved GetByValue(IReservedValue param);
}
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.ReservedValueNavigator : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.RpcDefinitionNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IRpcDefinition GetByArgumentType(IMaybeStreamedType param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IRpcDefinition GetByName(IIdentifier param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IRpcDefinition GetByOptions(IOptionsOrSemicolon param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IRpcDefinition GetByReturnType(IMaybeStreamedType param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.ServiceDefinitionNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IServiceDefinition GetByName(IIdentifier param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IServiceDefinition GetByOption(ISingleOption param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IServiceDefinition GetByRPC(IRpcDefinition param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IServiceDefinition GetByStream(IStreamDefinition param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.SingleOptionNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ISingleOption GetByAggregate(IOptionAggregateBlock param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ISingleOption GetByName(IOptionIdentifier param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static ISingleOption GetByNamedValue(IEnumValueReference param);
}
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.StreamDefinitionNavigator : object {
}
public static class JetBrains.ReSharper.Psi.Protobuf.Tree.SyntaxDeclarationNavigator : object {
}
public abstract class JetBrains.ReSharper.Psi.Protobuf.Tree.TreeNodeVisitor : object {
    public virtual void VisitNode(ITreeNode node);
    public virtual void VisitAggregateOptionIdentifier(IAggregateOptionIdentifier aggregateOptionIdentifierParam);
    public virtual void VisitAnyTokenNotRcurly(IAnyTokenNotRcurly anyTokenNotRcurlyParam);
    public virtual void VisitBracketedOption(IBracketedOption bracketedOptionParam);
    public virtual void VisitEnumBody(IEnumBody enumBodyParam);
    public virtual void VisitEnumDeclaration(IEnumDeclaration enumDeclarationParam);
    public virtual void VisitEnumField(IEnumField enumFieldParam);
    public virtual void VisitEnumValueReference(IEnumValueReference enumValueReferenceParam);
    public virtual void VisitExtendStatement(IExtendStatement extendStatementParam);
    public virtual void VisitExtensionRange(IExtensionRange extensionRangeParam);
    public virtual void VisitExtensions(IExtensions extensionsParam);
    public virtual void VisitFieldDeclaration(IFieldDeclaration fieldDeclarationParam);
    public virtual void VisitFieldOrExtensionReference(IFieldOrExtensionReference fieldOrExtensionReferenceParam);
    public virtual void VisitFullIdentifier(IFullIdentifier fullIdentifierParam);
    public virtual void VisitGroupFieldDeclaration(IGroupFieldDeclaration groupFieldDeclarationParam);
    public virtual void VisitIdentifier(IIdentifier identifierParam);
    public virtual void VisitImportStatement(IImportStatement importStatementParam);
    public virtual void VisitMapArguments(IMapArguments mapArgumentsParam);
    public virtual void VisitMaybeStreamedType(IMaybeStreamedType maybeStreamedTypeParam);
    public virtual void VisitMessageBody(IMessageBody messageBodyParam);
    public virtual void VisitMessageDeclaration(IMessageDeclaration messageDeclarationParam);
    public virtual void VisitOneofDeclaration(IOneofDeclaration oneofDeclarationParam);
    public virtual void VisitOptionAggregateBlock(IOptionAggregateBlock optionAggregateBlockParam);
    public virtual void VisitOptionAggregateOption(IOptionAggregateOption optionAggregateOptionParam);
    public virtual void VisitOptionIdentifier(IOptionIdentifier optionIdentifierParam);
    public virtual void VisitOptionIdentifierPart(IOptionIdentifierPart optionIdentifierPartParam);
    public virtual void VisitOptionsOrSemicolon(IOptionsOrSemicolon optionsOrSemicolonParam);
    public virtual void VisitPackageDeclaredElementPart(IPackageDeclaredElementPart packageDeclaredElementPartParam);
    public virtual void VisitPackageStatement(IPackageStatement packageStatementParam);
    public virtual void VisitProtobufFile(IProtobufFile protobufFileParam);
    public virtual void VisitProtobufType(IProtobufType protobufTypeParam);
    public virtual void VisitRealFieldDeclaration(IRealFieldDeclaration realFieldDeclarationParam);
    public virtual void VisitReserved(IReserved reservedParam);
    public virtual void VisitReservedValue(IReservedValue reservedValueParam);
    public virtual void VisitRpcDefinition(IRpcDefinition rpcDefinitionParam);
    public virtual void VisitServiceDefinition(IServiceDefinition serviceDefinitionParam);
    public virtual void VisitSingleOption(ISingleOption singleOptionParam);
    public virtual void VisitStreamDefinition(IStreamDefinition streamDefinitionParam);
    public virtual void VisitSyntaxDeclaration(ISyntaxDeclaration syntaxDeclarationParam);
}
public abstract class JetBrains.ReSharper.Psi.Protobuf.Tree.TreeNodeVisitor`1 : object {
    public virtual void VisitNode(ITreeNode node, TContext context);
    public virtual void VisitAggregateOptionIdentifier(IAggregateOptionIdentifier aggregateOptionIdentifierParam, TContext context);
    public virtual void VisitAnyTokenNotRcurly(IAnyTokenNotRcurly anyTokenNotRcurlyParam, TContext context);
    public virtual void VisitBracketedOption(IBracketedOption bracketedOptionParam, TContext context);
    public virtual void VisitEnumBody(IEnumBody enumBodyParam, TContext context);
    public virtual void VisitEnumDeclaration(IEnumDeclaration enumDeclarationParam, TContext context);
    public virtual void VisitEnumField(IEnumField enumFieldParam, TContext context);
    public virtual void VisitEnumValueReference(IEnumValueReference enumValueReferenceParam, TContext context);
    public virtual void VisitExtendStatement(IExtendStatement extendStatementParam, TContext context);
    public virtual void VisitExtensionRange(IExtensionRange extensionRangeParam, TContext context);
    public virtual void VisitExtensions(IExtensions extensionsParam, TContext context);
    public virtual void VisitFieldDeclaration(IFieldDeclaration fieldDeclarationParam, TContext context);
    public virtual void VisitFieldOrExtensionReference(IFieldOrExtensionReference fieldOrExtensionReferenceParam, TContext context);
    public virtual void VisitFullIdentifier(IFullIdentifier fullIdentifierParam, TContext context);
    public virtual void VisitGroupFieldDeclaration(IGroupFieldDeclaration groupFieldDeclarationParam, TContext context);
    public virtual void VisitIdentifier(IIdentifier identifierParam, TContext context);
    public virtual void VisitImportStatement(IImportStatement importStatementParam, TContext context);
    public virtual void VisitMapArguments(IMapArguments mapArgumentsParam, TContext context);
    public virtual void VisitMaybeStreamedType(IMaybeStreamedType maybeStreamedTypeParam, TContext context);
    public virtual void VisitMessageBody(IMessageBody messageBodyParam, TContext context);
    public virtual void VisitMessageDeclaration(IMessageDeclaration messageDeclarationParam, TContext context);
    public virtual void VisitOneofDeclaration(IOneofDeclaration oneofDeclarationParam, TContext context);
    public virtual void VisitOptionAggregateBlock(IOptionAggregateBlock optionAggregateBlockParam, TContext context);
    public virtual void VisitOptionAggregateOption(IOptionAggregateOption optionAggregateOptionParam, TContext context);
    public virtual void VisitOptionIdentifier(IOptionIdentifier optionIdentifierParam, TContext context);
    public virtual void VisitOptionIdentifierPart(IOptionIdentifierPart optionIdentifierPartParam, TContext context);
    public virtual void VisitOptionsOrSemicolon(IOptionsOrSemicolon optionsOrSemicolonParam, TContext context);
    public virtual void VisitPackageDeclaredElementPart(IPackageDeclaredElementPart packageDeclaredElementPartParam, TContext context);
    public virtual void VisitPackageStatement(IPackageStatement packageStatementParam, TContext context);
    public virtual void VisitProtobufFile(IProtobufFile protobufFileParam, TContext context);
    public virtual void VisitProtobufType(IProtobufType protobufTypeParam, TContext context);
    public virtual void VisitRealFieldDeclaration(IRealFieldDeclaration realFieldDeclarationParam, TContext context);
    public virtual void VisitReserved(IReserved reservedParam, TContext context);
    public virtual void VisitReservedValue(IReservedValue reservedValueParam, TContext context);
    public virtual void VisitRpcDefinition(IRpcDefinition rpcDefinitionParam, TContext context);
    public virtual void VisitServiceDefinition(IServiceDefinition serviceDefinitionParam, TContext context);
    public virtual void VisitSingleOption(ISingleOption singleOptionParam, TContext context);
    public virtual void VisitStreamDefinition(IStreamDefinition streamDefinitionParam, TContext context);
    public virtual void VisitSyntaxDeclaration(ISyntaxDeclaration syntaxDeclarationParam, TContext context);
}
public abstract class JetBrains.ReSharper.Psi.Protobuf.Tree.TreeNodeVisitor`2 : object {
    public virtual TReturn VisitNode(ITreeNode node, TContext context);
    public virtual TReturn VisitAggregateOptionIdentifier(IAggregateOptionIdentifier aggregateOptionIdentifierParam, TContext context);
    public virtual TReturn VisitAnyTokenNotRcurly(IAnyTokenNotRcurly anyTokenNotRcurlyParam, TContext context);
    public virtual TReturn VisitBracketedOption(IBracketedOption bracketedOptionParam, TContext context);
    public virtual TReturn VisitEnumBody(IEnumBody enumBodyParam, TContext context);
    public virtual TReturn VisitEnumDeclaration(IEnumDeclaration enumDeclarationParam, TContext context);
    public virtual TReturn VisitEnumField(IEnumField enumFieldParam, TContext context);
    public virtual TReturn VisitEnumValueReference(IEnumValueReference enumValueReferenceParam, TContext context);
    public virtual TReturn VisitExtendStatement(IExtendStatement extendStatementParam, TContext context);
    public virtual TReturn VisitExtensionRange(IExtensionRange extensionRangeParam, TContext context);
    public virtual TReturn VisitExtensions(IExtensions extensionsParam, TContext context);
    public virtual TReturn VisitFieldDeclaration(IFieldDeclaration fieldDeclarationParam, TContext context);
    public virtual TReturn VisitFieldOrExtensionReference(IFieldOrExtensionReference fieldOrExtensionReferenceParam, TContext context);
    public virtual TReturn VisitFullIdentifier(IFullIdentifier fullIdentifierParam, TContext context);
    public virtual TReturn VisitGroupFieldDeclaration(IGroupFieldDeclaration groupFieldDeclarationParam, TContext context);
    public virtual TReturn VisitIdentifier(IIdentifier identifierParam, TContext context);
    public virtual TReturn VisitImportStatement(IImportStatement importStatementParam, TContext context);
    public virtual TReturn VisitMapArguments(IMapArguments mapArgumentsParam, TContext context);
    public virtual TReturn VisitMaybeStreamedType(IMaybeStreamedType maybeStreamedTypeParam, TContext context);
    public virtual TReturn VisitMessageBody(IMessageBody messageBodyParam, TContext context);
    public virtual TReturn VisitMessageDeclaration(IMessageDeclaration messageDeclarationParam, TContext context);
    public virtual TReturn VisitOneofDeclaration(IOneofDeclaration oneofDeclarationParam, TContext context);
    public virtual TReturn VisitOptionAggregateBlock(IOptionAggregateBlock optionAggregateBlockParam, TContext context);
    public virtual TReturn VisitOptionAggregateOption(IOptionAggregateOption optionAggregateOptionParam, TContext context);
    public virtual TReturn VisitOptionIdentifier(IOptionIdentifier optionIdentifierParam, TContext context);
    public virtual TReturn VisitOptionIdentifierPart(IOptionIdentifierPart optionIdentifierPartParam, TContext context);
    public virtual TReturn VisitOptionsOrSemicolon(IOptionsOrSemicolon optionsOrSemicolonParam, TContext context);
    public virtual TReturn VisitPackageDeclaredElementPart(IPackageDeclaredElementPart packageDeclaredElementPartParam, TContext context);
    public virtual TReturn VisitPackageStatement(IPackageStatement packageStatementParam, TContext context);
    public virtual TReturn VisitProtobufFile(IProtobufFile protobufFileParam, TContext context);
    public virtual TReturn VisitProtobufType(IProtobufType protobufTypeParam, TContext context);
    public virtual TReturn VisitRealFieldDeclaration(IRealFieldDeclaration realFieldDeclarationParam, TContext context);
    public virtual TReturn VisitReserved(IReserved reservedParam, TContext context);
    public virtual TReturn VisitReservedValue(IReservedValue reservedValueParam, TContext context);
    public virtual TReturn VisitRpcDefinition(IRpcDefinition rpcDefinitionParam, TContext context);
    public virtual TReturn VisitServiceDefinition(IServiceDefinition serviceDefinitionParam, TContext context);
    public virtual TReturn VisitSingleOption(ISingleOption singleOptionParam, TContext context);
    public virtual TReturn VisitStreamDefinition(IStreamDefinition streamDefinitionParam, TContext context);
    public virtual TReturn VisitSyntaxDeclaration(ISyntaxDeclaration syntaxDeclarationParam, TContext context);
}
public static class JetBrains.ReSharper.Psi.Protobuf.Util.ConstantUtils : object {
    public static string JoinStringConstants(TreeNodeCollection`1<ITokenNode> strings, List`1<Pair`2<int, int>> charOffsets);
    public static long UlongToLong(ulong value, bool negative);
    public static bool ParseUlong(ITokenNode integer, UInt64& result);
    public static bool ParseUlong(ITokenNode integer, UInt64& result, Boolean& negative);
    public static string GetJoinedName(ITreeNode identifier);
}
public static class JetBrains.ReSharper.Psi.Protobuf.Util.ImportUtils : object {
    [CanBeNullAttribute]
private static IProjectFile FollowSubItemPath(IProjectFolder folder, String[] nameParts, int currentPart);
    [CanBeNullAttribute]
public static IProjectFile FindRelativeProjectFile(IPsiSourceFile source, string name);
    private static IProjectFile TryFindFile(IProjectFolder project, string name);
}
[ZoneMarkerAttribute]
internal class JetBrains.ReSharper.Psi.Protobuf.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
