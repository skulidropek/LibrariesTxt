[RefactoringWorkflowProviderAttribute("16")]
public class JetBrains.ReSharper.Refactorings.BuildScripts.IntroduceProperty.IntroduceMSBuildPropertyWorkflowProvider : IntroducePropertyWorkflowProvider {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.BuildScripts.IntroduceProperty.IntroduceMSBuildPropertyWorkflowProvider/<CreateWorkflow>d__0")]
public virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
}
[RefactoringWorkflowProviderAttribute("16")]
public class JetBrains.ReSharper.Refactorings.BuildScripts.IntroduceProperty.IntroduceNAntPropertyWorkflowProvider : IntroducePropertyWorkflowProvider {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.BuildScripts.IntroduceProperty.IntroduceNAntPropertyWorkflowProvider/<CreateWorkflow>d__0")]
public virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
}
public class JetBrains.ReSharper.Refactorings.BuildScripts.IntroduceProperty.IntroducePropertyConflictSearcher : object {
    private IntroducePropertyDataModel myDataModel;
    [CompilerGeneratedAttribute]
private ConflictSearchResult <LastResult>k__BackingField;
    public ConflictSearchResult LastResult { get; private set; }
    public IntroducePropertyConflictSearcher(IntroducePropertyDataModel dataModel);
    public sealed virtual ConflictSearchResult SearchConflicts(IProgressIndicator pi, bool canPerformRefactoring);
    [CompilerGeneratedAttribute]
public sealed virtual ConflictSearchResult get_LastResult();
    [CompilerGeneratedAttribute]
private void set_LastResult(ConflictSearchResult value);
    private ICollection`1<IConflict> SearchConflictingDeclarations(ITreeNode node, ICollection`1<IConflict> conflicts);
}
public class JetBrains.ReSharper.Refactorings.BuildScripts.IntroduceProperty.IntroducePropertyDataModel : AAutomation {
    [CompilerGeneratedAttribute]
private string <TextToReplace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IXmlToken> <Occurrences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReplaceOccurrences>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildScriptFileBase <File>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeTextRange <SelectionRange>k__BackingField;
    [CompilerGeneratedAttribute]
private TextRange <RandomRange>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SelectionText>k__BackingField;
    private XmlTokenTypes myTokenTypes;
    public string TextToReplace { get; }
    public string PropertyName { get; public set; }
    public List`1<IXmlToken> Occurrences { get; }
    public bool ReplaceOccurrences { get; public set; }
    public BuildScriptFileBase File { get; }
    public TreeTextRange SelectionRange { get; }
    public TextRange RandomRange { get; }
    public string SelectionText { get; }
    public IntroducePropertyDataModel(IFile file, ITextControl textControl, TextRange selectionRange);
    [CompilerGeneratedAttribute]
public string get_TextToReplace();
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public List`1<IXmlToken> get_Occurrences();
    [CompilerGeneratedAttribute]
public bool get_ReplaceOccurrences();
    [CompilerGeneratedAttribute]
public void set_ReplaceOccurrences(bool value);
    [CompilerGeneratedAttribute]
public BuildScriptFileBase get_File();
    [CompilerGeneratedAttribute]
public TreeTextRange get_SelectionRange();
    [CompilerGeneratedAttribute]
public TextRange get_RandomRange();
    [CompilerGeneratedAttribute]
public string get_SelectionText();
    public BuildScriptTagBase FindRootTag();
    [CompilerGeneratedAttribute]
private void <.ctor>b__28_0(IXmlToken t);
}
public class JetBrains.ReSharper.Refactorings.BuildScripts.IntroduceProperty.IntroducePropertyPage : SingleBeRefactoringPage {
    private IntroducePropertyDataModel myDataModel;
    public string Title { get; }
    public string Description { get; }
    public IntroducePropertyPage(IntroducePropertyDataModel dataModel, Lifetime lifetime);
    public virtual string get_Title();
    public virtual string get_Description();
    public virtual BeControl GetPageContent();
    [CompilerGeneratedAttribute]
private void <GetPageContent>b__6_0(string v);
    [CompilerGeneratedAttribute]
private void <GetPageContent>b__6_1(bool v);
}
public abstract class JetBrains.ReSharper.Refactorings.BuildScripts.IntroduceProperty.IntroducePropertyRefactoring : object {
    [CompilerGeneratedAttribute]
private IntroducePropertyDataModel <DataModel>k__BackingField;
    public IntroducePropertyDataModel DataModel { get; public set; }
    protected IntroducePropertyRefactoring(IntroducePropertyDataModel introducePropertyDataModel);
    [CompilerGeneratedAttribute]
public IntroducePropertyDataModel get_DataModel();
    [CompilerGeneratedAttribute]
public void set_DataModel(IntroducePropertyDataModel value);
    protected abstract virtual void ExecuteInternal();
    public sealed virtual bool Execute(IProgressIndicator pi);
}
public abstract class JetBrains.ReSharper.Refactorings.BuildScripts.IntroduceProperty.IntroducePropertyRefactoringWorkflow : DrivenRefactoringWorkflow {
    [CompilerGeneratedAttribute]
private IntroducePropertyDataModel <DataModel>k__BackingField;
    protected IntroducePropertyDataModel DataModel { get; private set; }
    public string Title { get; }
    public string ActionId { get; }
    public RefactoringActionGroup ActionGroup { get; }
    public IConflictSearcher ConflictSearcher { get; }
    public IRefactoringPage FirstPendingRefactoringPage { get; }
    public bool MightModifyManyDocuments { get; }
    public bool HasUI { get; }
    public HelpId HelpKeyword { get; }
    protected IntroducePropertyRefactoringWorkflow(ISolution solution, string actionId);
    [CompilerGeneratedAttribute]
protected IntroducePropertyDataModel get_DataModel();
    [CompilerGeneratedAttribute]
private void set_DataModel(IntroducePropertyDataModel value);
    public virtual string get_Title();
    public virtual string get_ActionId();
    public virtual RefactoringActionGroup get_ActionGroup();
    public virtual IConflictSearcher get_ConflictSearcher();
    public virtual IRefactoringPage get_FirstPendingRefactoringPage();
    public virtual bool get_MightModifyManyDocuments();
    public virtual bool IsAvailable(IDataContext context);
    private bool CheckConditions(BuildScriptFileBase file, ITextControl textControl);
    protected abstract virtual bool IsSuitableBuildFile(IProjectFile file);
    public virtual bool Initialize(IDataContext context);
    public virtual bool get_HasUI();
    public virtual HelpId get_HelpKeyword();
}
public abstract class JetBrains.ReSharper.Refactorings.BuildScripts.IntroduceProperty.IntroducePropertyWorkflowProvider : object {
    private static string ACTION_ID;
    protected static string ActionId { get; }
    private static IntroducePropertyWorkflowProvider();
    protected static string get_ActionId();
    public abstract virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
}
public class JetBrains.ReSharper.Refactorings.BuildScripts.IntroduceProperty.MSBuild.IntroduceMSBuildPropertyRefactoring : IntroducePropertyRefactoring {
    public IntroduceMSBuildPropertyRefactoring(IntroducePropertyDataModel dataModel);
    protected virtual void ExecuteInternal();
    private void IntroduceMSBuildProperty();
    private static MSBuildPropertyDeclaration UpdateStartToken(MSBuildPropertyDeclaration startDeclaration, ITreeNode selectionToken, TreeTextRange selectionRange);
    protected string MakePropertyTag();
}
public class JetBrains.ReSharper.Refactorings.BuildScripts.IntroduceProperty.MSBuild.IntroduceMSBuildPropertyRefactoringWorkflow : IntroducePropertyRefactoringWorkflow {
    public IntroduceMSBuildPropertyRefactoringWorkflow(ISolution solution, string actionId);
    protected virtual bool IsSuitableBuildFile(IProjectFile file);
    public virtual IRefactoringExecuter CreateRefactoring(IRefactoringDriver driver);
}
public class JetBrains.ReSharper.Refactorings.BuildScripts.IntroduceProperty.NAnt.IntroduceNAntPropertyRefactoring : IntroducePropertyRefactoring {
    public IntroduceNAntPropertyRefactoring(IntroducePropertyDataModel dataModel);
    protected virtual void ExecuteInternal();
    private void IntroduceNAntProperty();
    private IBuildScriptTag UpdateStartingTag(BuildScriptAttributeBase attribute, IBuildScriptTag insertAfterTag);
    [CompilerGeneratedAttribute]
private bool <UpdateStartingTag>b__3_0(IDeclaration d);
}
public class JetBrains.ReSharper.Refactorings.BuildScripts.IntroduceProperty.NAnt.IntroduceNAntPropertyRefactoringWorkflow : IntroducePropertyRefactoringWorkflow {
    public IntroduceNAntPropertyRefactoringWorkflow(ISolution solution, string actionId);
    protected virtual bool IsSuitableBuildFile(IProjectFile file);
    public virtual IRefactoringExecuter CreateRefactoring(IRefactoringDriver driver);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.BuildScripts.MSBuild.MSBuildLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.BuildScripts.MSBuildScriptRefactoringLanguageService : InternalRefactoringLanguageService {
    public RefactoringsHelper Helper { get; }
    public virtual RefactoringsHelper get_Helper();
    public virtual SafeDeleteBase CreateSafeDeleteBase(SafeDeleteWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    public virtual SafeDeleteHelperUnsupported CreateSafeDeleteHelper();
}
public class JetBrains.ReSharper.Refactorings.BuildScripts.MSBuildScriptRefactoringsHelper : RefactoringsHelper {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.BuildScripts.NAntBuildScriptRefactoringLanguageService : InternalRefactoringLanguageService {
    public RefactoringsHelper Helper { get; }
    public virtual RefactoringsHelper get_Helper();
    public virtual SafeDeleteBase CreateSafeDeleteBase(SafeDeleteWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    public virtual SafeDeleteHelperUnsupported CreateSafeDeleteHelper();
}
public class JetBrains.ReSharper.Refactorings.BuildScripts.NAntBuildScriptRefactoringsHelper : RefactoringsHelper {
}
public class JetBrains.ReSharper.Refactorings.BuildScripts.Rename.BuildScriptRenameConflictsSearcher : object {
    private IDeclaredElement myDeclaredElement;
    private string myNewName;
    private ISolution mySolution;
    [CompilerGeneratedAttribute]
private ConflictSearchResult <LastResult>k__BackingField;
    public ConflictSearchResult LastResult { get; private set; }
    public BuildScriptRenameConflictsSearcher(IDeclaredElement declaredElement, string newName, ISolution solution);
    public sealed virtual ConflictSearchResult SearchConflicts(IProgressIndicator progressIndicator, bool canPerformRefactoring);
    [CompilerGeneratedAttribute]
public sealed virtual ConflictSearchResult get_LastResult();
    [CompilerGeneratedAttribute]
private void set_LastResult(ConflictSearchResult value);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.BuildScripts.MSBuild.MSBuildLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.BuildScripts.Rename.MsBuildRenameHelper : RenameHelperBase {
    public bool IsLanguageSupported { get; }
    public virtual bool get_IsLanguageSupported();
    public virtual IList`1<IConflictSearcher> AdditionalConflictsSearchers(IDeclaredElement element, string newName);
    public virtual void AdditionalReferenceProcessing(IDeclaredElement newTarget, IReference reference, ICollection`1<IReference> newReferences);
    public virtual IReference TransformProjectedInitializer(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.BuildScripts.Rename.NAntRenameHelper : RenameHelperBase {
    public bool IsLanguageSupported { get; }
    public virtual bool get_IsLanguageSupported();
    public virtual IList`1<IConflictSearcher> AdditionalConflictsSearchers(IDeclaredElement element, string newName);
    public virtual void AdditionalReferenceProcessing(IDeclaredElement newTarget, IReference reference, ICollection`1<IReference> newReferences);
    public virtual IReference TransformProjectedInitializer(IReference reference);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Refactorings.BuildScripts.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string AnotherPropertyWithTheSameNameIsAlready_Text { get; }
    public static string IntroduceVariable_Text { get; }
    public static string SpecifyNameAndTypeOfTheIntroducedVariable_Text { get; }
    public static string PropertyN_ame_Text { get; }
    public static string _ReplaceAllOccurrencesOfExpression__Text { get; }
    public static string IntroDuceProperty_Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_AnotherPropertyWithTheSameNameIsAlready_Text();
    public static string get_IntroduceVariable_Text();
    public static string get_SpecifyNameAndTypeOfTheIntroducedVariable_Text();
    public static string get_PropertyN_ame_Text();
    public static string get__ReplaceAllOccurrencesOfExpression__Text();
    public static string get_IntroDuceProperty_Text();
}
public class JetBrains.ReSharper.Refactorings.BuildScripts.SafeDelete2.BuildScriptSafeDelete : SafeDeleteBase {
    public BuildScriptSafeDelete(SafeDeleteWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    public virtual void RemoveDeclaration(IDeclaration declaration);
    public virtual bool RemoveReference(IReference reference);
}
public class JetBrains.ReSharper.Refactorings.BuildScripts.SafeDelete2.BuildScriptSafeDeleteHelper : SafeDeleteHelperUnsupported {
    public bool IsLanguageSupported { get; }
    public virtual bool get_IsLanguageSupported();
    public virtual bool CanBeRemoved(IDeclaredElement element);
    public virtual bool CanBeRemoved(IDeclaration declaration);
    public virtual bool IsBaseClassSpecifier(IReference reference);
    public virtual bool IsInterfaceImplementationSpecifier(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.BuildScripts.MSBuild.MSBuildLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.BuildScripts.src.MsBuildTextOccurrenceSearcherFactory : XmlTextOccurrenceSearcherFactory {
    public virtual XmlTextOccurrenceSearchHelper`1<TResult> CreateHelper(JetHashSet`1<string> names, IFindResultConsumer`1<TResult> consumer);
}
public class JetBrains.ReSharper.Refactorings.BuildScripts.src.MsBuildTextOccurrenceSearchHelper`1 : XmlTextOccurrenceSearchHelper`1<TResult> {
    public MsBuildTextOccurrenceSearchHelper`1(JetHashSet`1<string> names, IFindResultConsumer`1<TResult> consumer);
    protected virtual bool DeclarationExists(IXmlToken textToken, TreeTextRange textRange);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Refactorings.BuildScripts.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
