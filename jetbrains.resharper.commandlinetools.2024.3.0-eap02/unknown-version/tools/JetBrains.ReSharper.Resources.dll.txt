[SolutionComponentAttribute("10")]
public class JetBrains.Application.Threading.ReadAccessInterruptionGuard : object {
    private static bool ourInterruptionIsRequired;
    [ThreadStaticAttribute]
private static int ourDisableChecks;
    public ReadAccessInterruptionGuard(Lifetime lifetime, ISolution solution, ISettingsStore settingsStore);
    [ConditionalAttribute("JET_MODE_ASSERT")]
public static void AssertInterruptible();
    [LocalizableAttribute("False")]
public static IDisposable DisableChecks(string exceptionIssueId);
}
[ZoneMarkerAttribute]
public class JetBrains.Application.Threading.ZoneMarker : object {
}
public class JetBrains.ReSharper.Resources.Application.Licensing.ReSharperLicenseSupport : LicenseSupportBase {
    private static string ReSharperPublicKey;
    private Dictionary`2<string, AcceptLicenseDelegate> myLicensePublicKeys;
    public bool SendBuildDateAsVersionToOldServers { get; }
    public IEnumerable`1<ProductEdition> Editions { get; }
    public string JBProductCode { get; }
    public ReSharperLicenseSupport(IApplicationHost applicationHost);
    private static ReSharperLicenseSupport();
    public virtual string GetLicenseServerEdition(ProductEdition edition);
    public virtual bool get_SendBuildDateAsVersionToOldServers();
    public virtual ProductEdition DecodeProductEdition(string productCode, IApplicationHost descriptor);
    public virtual IEnumerable`1<ProductEdition> get_Editions();
    public virtual ProductEdition DecodeProductEdition(int editionCode, IApplicationHost descriptor);
    public virtual string get_JBProductCode();
    protected static LicenseCheckResult Check30License(LicenseData licenseData);
    public virtual string GetLicenseAgreement(LicenseType licenseType);
    public virtual LicenseData LoadLicense(ISettingsTable settings, FileSystemPath installDir);
    public virtual void SaveLicense(LicenseData license, ISettingsTable settings);
    public virtual LicenseData CreateLicenseData(string licenseKey, string userName, string companyName);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class JetBrains.ReSharper.Resources.Application.Licensing.ReSharperLicenseSupportResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Academic { get; }
    internal static string Classroom { get; }
    internal static string Commercial { get; }
    internal static string OpenSource { get; }
    internal static string Personal { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Academic();
    internal static string get_Classroom();
    internal static string get_Commercial();
    internal static string get_OpenSource();
    internal static string get_Personal();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Resources.Application.ZoneMarker : object {
}
public class JetBrains.ReSharper.Resources.AssemblyReferenceClass_PsiFeaturesResources : object {
}
public static class JetBrains.ReSharper.Resources.BuildScript.Compile.Actions.ActionSystemTasksPsi : object {
    [BuildStepAttribute]
public static ICollection`1<SubplatformVsCommandsGuidArtifact> UseLegacyGuidForPsiSubplatformVsCommands(AllAssembliesOnEverything allass);
}
public static class JetBrains.ReSharper.Resources.BuildScript.Compile.PsiFeaturesZonesActivatorForBuild : object {
    [BuildStepAttribute]
public static SubplatformComponentForPackagingFast[] ProductMetaDependency(AllAssembliesOnSources allassSrc);
}
public class JetBrains.ReSharper.Resources.BuildScript.PsiFeaturesSubplatforms : object {
    public static SubplatformName Core;
    public static SubplatformName UnitTesting;
    public static SubplatformName Src;
    public static SubplatformName Web;
    private static PsiFeaturesSubplatforms();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Resources.Misc.ZoneMarker : object {
}
[ShellComponentAttribute("16")]
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Resources.PsiFeaturesUnsortedIcons.IconsForIconThemeSelectionSamplePsiUnsorted : object {
    private IEnumerable`1<IconId> JetBrains.Application.UI.Icons.Settings.IIconsForIconThemeSelectionSample.SampleIcons { get; }
    private sealed virtual override IEnumerable`1<IconId> JetBrains.Application.UI.Icons.Settings.IIconsForIconThemeSelectionSample.get_SampleIcons();
}
public static class JetBrains.ReSharper.Resources.ReSharperInfo : object {
    public static string AllAssembliesResourceName;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class JetBrains.ReSharper.Resources.resources.Clipart.ReSharperClipart : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
}
public class JetBrains.ReSharper.Resources.Resources.Icons.PsiFeaturesUnsortedOptionsThemedIcons : object {
}
public class JetBrains.ReSharper.Resources.Resources.Icons.PsiFeaturesUnsortedThemedIcons : object {
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Resources.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string Decompiler_Text { get; }
    public static string DecompilerLegalNotice_Html { get; }
    public static string DecompilerLegalNotice_Rtf { get; }
    public static string DecompilerLegalNotice_Text { get; }
    public static string LibrariesOfTemplatesAndPatternsSettingDescription { get; }
    public static string ReSharperCodeInspectionsEnabledStateSeveritiesParametersAndPossibleActionsUsuallyWouldBeSharedAlongWithTheSolutionFileAcrossTheTeamSettingDescription { get; }
    public static string SetsUpTheCodingStyleForReSharperFeaturesSettingDescription { get; }
    public static string SettingsForReSharperFeaturesWhichModifyTheSourceCodeSettingDescription { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_Decompiler_Text();
    public static string get_DecompilerLegalNotice_Html();
    public static string get_DecompilerLegalNotice_Rtf();
    public static string get_DecompilerLegalNotice_Text();
    public static string get_LibrariesOfTemplatesAndPatternsSettingDescription();
    public static string get_ReSharperCodeInspectionsEnabledStateSeveritiesParametersAndPossibleActionsUsuallyWouldBeSharedAlongWithTheSolutionFileAcrossTheTeamSettingDescription();
    public static string get_SetsUpTheCodingStyleForReSharperFeaturesSettingDescription();
    public static string get_SettingsForReSharperFeaturesWhichModifyTheSourceCodeSettingDescription();
}
[SettingsKeyAttribute("System.Reflection.Missing", "JetBrains.ReSharper.Resources.Resources.Strings", "SettingsForReSharperFeaturesWhichModifyTheSourceCodeSettingDescription")]
public class JetBrains.ReSharper.Resources.Settings.CodeEditingSettings : object {
}
[SettingsKeyAttribute("System.Reflection.Missing", "JetBrains.ReSharper.Resources.Resources.Strings", "ReSharperCodeInspectionsEnabledStateSeveritiesParametersAndPossibleActionsUsuallyWouldBeSharedAlongWithTheSolutionFileAcrossTheTeamSettingDescription")]
public class JetBrains.ReSharper.Resources.Settings.CodeInspectionSettings : object {
}
[SettingsKeyAttribute("System.Reflection.Missing", "JetBrains.ReSharper.Resources.Resources.Strings", "SetsUpTheCodingStyleForReSharperFeaturesSettingDescription")]
public class JetBrains.ReSharper.Resources.Settings.CodeStyleSettings : object {
}
[SettingsKeyAttribute("System.Reflection.Missing", "JetBrains.ReSharper.Resources.Resources.Strings", "LibrariesOfTemplatesAndPatternsSettingDescription")]
public class JetBrains.ReSharper.Resources.Settings.PatternsAndTemplatesSettingsKey : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Resources.Settings.ZoneMarker : object {
}
public static class JetBrains.ReSharper.Resources.Shell.CommandCookie : object {
    [ObsoleteAttribute("Inline this method and replace Shell.Instance.GetComponent with an imported ICommandProcessor instance.")]
public static IDisposable Create(string name);
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Resources.Shell.NonCSharpInteropReadLockCookie : ValueType {
    [CanBeNullAttribute]
private ContentModelReadWriteLock myLock;
    public NonCSharpInteropReadLockCookie(ContentModelReadWriteLock rwLock);
    public sealed virtual void Dispose();
    public static NonCSharpInteropReadLockCookie Create();
}
[ZoneDefinitionAttribute]
public class JetBrains.ReSharper.Resources.Shell.PsiFeaturesImplZone : object {
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Resources.Shell.ReadLockCookie : ValueType {
    [CanBeNullAttribute]
private ContentModelReadWriteLock myLock;
    [MustDisposeResourceAttribute]
public ReadLockCookie(ContentModelReadWriteLock rwLock);
    public void Dispose();
    [MustDisposeResourceAttribute]
public static ReadLockCookie Create();
    [MustDisposeResourceAttribute]
public static ReadLockCookie Create(bool takeLock);
    public static void Execute(Action action);
    [MustUseReturnValueAttribute]
public static T Execute(Func`1<T> func);
    public static void GuardedExecute(Action action);
    public static bool TryExecute(Action action);
}
[ZoneDefinitionAttribute]
public class JetBrains.ReSharper.Resources.Shell.ReplaceableByIntelliJPlatformZone : object {
}
[ZoneActivatorAttribute("10")]
public class JetBrains.ReSharper.Resources.Shell.Shell : object {
    [CanBeNullAttribute]
private static Shell ourInstance;
    [CanBeNullAttribute]
private IShellLocks myLocks;
    [CanBeNullAttribute]
private IComponentContainer myProductComponentContainer;
    private ComponentStorageState myState;
    private Nullable`1<bool> myIsTestShell;
    public static bool HasInstance { get; }
    [NotNullAttribute]
public static Shell Instance { get; }
    [NotNullAttribute]
private IComponentContainer ProductComponentContainer { get; }
    [CanBeNullAttribute]
[ObsoleteAttribute("Import IProductCommandLine.")]
public IProductCommandLine CommandLine { get; }
    [NotNullAttribute]
[ObsoleteAttribute("Import IThreading (if you already have IShellLocks, it'll do).")]
public IThreading Invocator { get; }
    [ObsoleteAttribute("Inject RunsProducts.ProductConfigurations and use .IsInternalMode() extension method")]
public bool IsInInternalMode { get; }
    [ObsoleteAttribute("Use separate test components (can be inherited from real ones)")]
public bool IsTestShell { get; }
    [NotNullAttribute]
[ObsoleteAttribute("Import IShellLocks.")]
public IShellLocks Locks { get; }
    [ObsoleteAttribute("Import IThreading and use its Dispatcher.")]
public JetDispatcher PrimaryDispatcher { get; }
    [ObsoleteAttribute("Import IThreading and use its Dispatcher.")]
public Thread PrimaryThread { get; }
    [ObsoleteAttribute("Currently, the state only so vaguely reflects the status of the component container. Import components in all of the critical places.")]
public ComponentStorageState State { get; }
    public Shell(Lifetime lifetime, RunningProducts runsProducts);
    public static bool get_HasInstance();
    public static Shell get_Instance();
    private IComponentContainer get_ProductComponentContainer();
    public IProductCommandLine get_CommandLine();
    public IThreading get_Invocator();
    public bool get_IsInInternalMode();
    public bool get_IsTestShell();
    private bool GetIsTestShell();
    public IShellLocks get_Locks();
    public JetDispatcher get_PrimaryDispatcher();
    public Thread get_PrimaryThread();
    public ComponentStorageState get_State();
    [NotNullAttribute]
public TInterface GetComponent();
    [NotNullAttribute]
public IEnumerable`1<TInterface> GetComponents();
    public bool HasComponent();
    [CanBeNullAttribute]
public TInterface TryGetComponent();
    public void SaveSettings();
    private sealed virtual override bool JetBrains.Application.Environment.IActivateDynamic<JetBrains.ReSharper.Resources.Shell.ShellInstanceFakeZone>.ActivatorEnabled();
}
[ZoneDefinitionAttribute]
public class JetBrains.ReSharper.Resources.Shell.ShellInstanceFakeZone : object {
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Resources.Shell.ShellLifetimes : object {
    internal static JetWeakReference`1<ShellLocks> LocksStorage;
    private static ShellLocks Locks { get; }
    [PublicAPIAttribute]
public static Lifetime ReadActivityLifetime { get; }
    private static ShellLifetimes();
    private static ShellLocks get_Locks();
    public static Lifetime get_ReadActivityLifetime();
    [ExtensionAttribute]
[PublicAPIAttribute]
public static Task StartMainRead(Lifetime lifetime, Action action);
    [ExtensionAttribute]
[PublicAPIAttribute]
public static Task`1<T> StartMainRead(Lifetime lifetime, Func`1<T> action);
    [ExtensionAttribute]
[PublicAPIAttribute]
public static Task StartMainReadAsync(Lifetime lifetime, Func`1<Task> action);
    [ExtensionAttribute]
[PublicAPIAttribute]
public static Task`1<T> StartMainReadAsync(Lifetime lifetime, Func`1<Task`1<T>> action);
    [ExtensionAttribute]
[PublicAPIAttribute]
public static Task StartBackground(Lifetime lifetime, Action action);
    [ExtensionAttribute]
[PublicAPIAttribute]
public static Task`1<T> StartBackground(Lifetime lifetime, Func`1<T> func);
    [ExtensionAttribute]
[PublicAPIAttribute]
public static Task StartBackgroundAsync(Lifetime lifetime, Func`1<Task> action);
    [ExtensionAttribute]
[PublicAPIAttribute]
public static Task`1<T> StartBackgroundAsync(Lifetime lifetime, Func`1<Task`1<T>> func);
    [ExtensionAttribute]
[PublicAPIAttribute]
public static Task StartBackgroundRead(Lifetime lifetime, Action action, bool retryOnOperationCanceled);
    [ExtensionAttribute]
[PublicAPIAttribute]
public static Task`1<T> StartBackgroundRead(Lifetime lifetime, Func`1<T> action, bool retryOnOperationCanceled);
    [ExtensionAttribute]
[PublicAPIAttribute]
public static Task StartBackgroundInterruptableRead(Lifetime lifetime, Action action, bool retryOnOperationCanceled);
    [ExtensionAttribute]
[PublicAPIAttribute]
public static Task`1<T> StartBackgroundInterruptableRead(Lifetime lifetime, Func`1<T> action, bool retryOnOperationCanceled);
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static Task StartReadActionAsync(Lifetime lifetime, Action action);
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static Task`1<T> StartReadActionAsync(Lifetime lifetime, Func`1<T> func);
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static Task StartReadActionAsync(Lifetime lifetime, Action`1<Lifetime> action);
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static Task`1<T> StartReadActionAsync(Lifetime lifetime, Func`2<Lifetime, T> func);
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static Task StartConstrainedReadActionAsync(Lifetime lifetime, IReadConstraint constraint, Action func);
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static Task`1<T> StartConstrainedReadActionAsync(Lifetime lifetime, IReadConstraint constraint, Func`1<T> func);
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static Task StartConstrainedReadActionAsync(Lifetime lifetime, IReadConstraint constraint, Action`1<Lifetime> func);
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static Task`1<T> StartConstrainedReadActionAsync(Lifetime lifetime, IReadConstraint constraint, Func`2<Lifetime, T> func);
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static Task`1<T> StartReadAndMainThreadActionAsync(Lifetime lifetime, Func`2<ReadAndWriteScope, ReadResult`1<T>> func);
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static Task`1<T> StartConstrainedReadAndMainThreadActionAsync(Lifetime lifetime, IReadConstraint constraint, Func`2<ReadAndWriteScope, ReadResult`1<T>> func);
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static Task StartReadAndMainThreadActionAsync(Lifetime lifetime, Func`2<ReadAndWriteScope, ReadResult> func);
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static Task StartConstrainedReadAndMainThreadActionAsync(Lifetime lifetime, IReadConstraint constraint, Func`2<ReadAndWriteScope, ReadResult> func);
    [ExtensionAttribute]
[PublicAPIAttribute]
public static Task StartMainUnguarded(Lifetime lifetime, Action action);
    [ExtensionAttribute]
[PublicAPIAttribute]
public static Task`1<T> StartMainUnguarded(Lifetime lifetime, Func`1<T> func);
    [ExtensionAttribute]
[PublicAPIAttribute]
public static Task StartMainUnguardedAsync(Lifetime lifetime, Func`1<Task> action);
    [ExtensionAttribute]
[PublicAPIAttribute]
public static Task`1<T> StartMainUnguardedAsync(Lifetime lifetime, Func`1<Task`1<T>> func);
    [ExtensionAttribute]
[PublicAPIAttribute]
public static Task StartMainWrite(Lifetime lifetime, Action action);
    [ExtensionAttribute]
[PublicAPIAttribute]
public static Task`1<T> StartMainWrite(Lifetime lifetime, Func`1<T> func);
    [ExtensionAttribute]
[PublicAPIAttribute]
public static Task StartMainWriteAsync(Lifetime lifetime, Func`1<Task> action);
    [ExtensionAttribute]
[PublicAPIAttribute]
public static Task`1<T> StartMainWriteAsync(Lifetime lifetime, Func`1<Task`1<T>> func);
}
[EnvironmentComponentAttribute("9")]
public class JetBrains.ReSharper.Resources.Shell.ShellLifetimesComponent : object {
    public ShellLifetimesComponent(ShellLocks locks);
}
public class JetBrains.ReSharper.Resources.Shell.WriteLockCookie : ValueType {
    [CanBeNullAttribute]
private ContentModelReadWriteLock myLock;
    [MustDisposeResourceAttribute]
public WriteLockCookie(ContentModelReadWriteLock rwLock);
    public sealed virtual void Dispose();
    [MustDisposeResourceAttribute]
public static WriteLockCookie Create(string callerFilePath, string callerMemberName);
    [MustDisposeResourceAttribute]
public static WriteLockCookie Create(CallerInfo caller);
    [MustDisposeResourceAttribute]
public static WriteLockCookie Create(bool takeLock, string callerFilePath, string callerMemberName);
    [MustDisposeResourceAttribute]
public static WriteLockCookie Create(bool takeLock, CallerInfo caller);
    public static void Execute(Action action, string callerFilePath, string callerMemberName);
    public static void Execute(Action action, CallerInfo caller);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Resources.Shell.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
