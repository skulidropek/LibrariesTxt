public static class JetBrains.ReSharper.UnitTestProvider.JavaScript.Browsers.BrowserExecutableName : object {
    public static string Chrome;
    public static string Opera;
    public static string Firefox;
    public static string Safari;
    public static string MicrosoftEdge;
    public static string InternetExplorer;
}
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.Browsers.DefaultWebBrowserInfo : object {
    public static DefaultWebBrowserInfo Instance;
    public string Id { get; }
    public string Name { get; }
    public IconId IconId { get; }
    public FileSystemPath Location { get; }
    private static DefaultWebBrowserInfo();
    public sealed virtual string get_Id();
    public sealed virtual string get_Name();
    public sealed virtual IconId get_IconId();
    public sealed virtual FileSystemPath get_Location();
}
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.Browsers.FirefoxLocator : object {
    public static string FirefoxUrlKeyNamePrefix;
    public static string GeneralFirefoxUrlKeyName;
    private static string FirefoxAppKey;
    private static string FirefoxName;
    private static string Nightly;
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestProvider.JavaScript.Browsers.FirefoxLocator/<GetBrowserInfos>d__5")]
public sealed virtual IEnumerable`1<IWebBrowserInfo> GetBrowserInfos();
    [NotNullAttribute]
private IWebBrowserInfo CreateHeadlessBrowserInfo(IWebBrowserInfo browserInfo);
    private static bool TryGetBrowserInfoByAppPaths(IWebBrowserInfo& webBrowserInfo, Boolean& supportsHeadlessMode);
    private static bool TryToCreateBrowserInfo(string executableFile, IWebBrowserInfo& webBrowserInfo, Boolean& supportsHeadlessMode);
    private static string GetBrowserId(string productName);
    private static IconId GetBrowserIconId(string browserId);
    private static bool TryGetBrowserInfoByFirefoxUrl(string registryKeyName, IWebBrowserInfo& webBrowserInfo, Boolean& supportsHeadlessMode);
    private static string GetBrowserName(string productName);
    private static bool TryParseCommandLine(string commandLine, String& executableFile);
}
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.Browsers.GoogleChromeCanaryLocator : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestProvider.JavaScript.Browsers.GoogleChromeCanaryLocator/<GetBrowserInfos>d__0")]
public sealed virtual IEnumerable`1<IWebBrowserInfo> GetBrowserInfos();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestProvider.JavaScript.Browsers.GoogleChromeCanaryLocator/<GetProbeRootDirs>d__1")]
private static IEnumerable`1<string> GetProbeRootDirs();
}
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.Browsers.GoogleChromeLocator : object {
    public static string ChromeAppKey;
    public static string UninstallChromeKey;
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestProvider.JavaScript.Browsers.GoogleChromeLocator/<GetBrowserInfos>d__2")]
public sealed virtual IEnumerable`1<IWebBrowserInfo> GetBrowserInfos();
    private static string GetExeFileNameByAppPathsKey();
    private static string GetExeFileNameByUninstallKey();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestProvider.JavaScript.Browsers.GoogleChromeLocator/<GetBrowserInfoByExecutableFileName>d__5")]
private static IEnumerable`1<IWebBrowserInfo> GetBrowserInfoByExecutableFileName(string executableFileName);
}
public interface JetBrains.ReSharper.UnitTestProvider.JavaScript.Browsers.IBrowserLocator {
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IEnumerable`1<IWebBrowserInfo> GetBrowserInfos();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.Browsers.InstalledBrowsersLocator : object {
    private static string AppPathRegistryKey;
    private IEnumerable`1<IWebBrowserInfo> myLocatedBrowsers;
    [NotNullAttribute]
public IEnumerable`1<IWebBrowserInfo> InstalledBrowsers { get; }
    [NotNullAttribute]
public IEnumerable`1<IWebBrowserInfo> InstalledBrowsersWithDefaultEntry { get; }
    public IEnumerable`1<IWebBrowserInfo> get_InstalledBrowsers();
    public IEnumerable`1<IWebBrowserInfo> get_InstalledBrowsersWithDefaultEntry();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestProvider.JavaScript.Browsers.InstalledBrowsersLocator/<Locate>d__6")]
[NotNullAttribute]
private static IEnumerable`1<IWebBrowserInfo> Locate();
    [NotNullAttribute]
private static WebBrowserInfo CreateWebBrowserInfo(RegistryKey key, string subKeyName, string browserId, IconId iconId, Func`2<FileVersionInfo, string> getVersion);
    private static WebBrowserInfo CreateWebBrowserInfo(string location, string browserId, IconId iconId, Func`2<FileVersionInfo, string> getVersion);
}
public interface JetBrains.ReSharper.UnitTestProvider.JavaScript.Browsers.IWebBrowserInfo {
    [NotNullAttribute]
public string Id { get; }
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public IconId IconId { get; }
    [NotNullAttribute]
public FileSystemPath Location { get; }
    public abstract virtual string get_Id();
    public abstract virtual string get_Name();
    public abstract virtual IconId get_IconId();
    public abstract virtual FileSystemPath get_Location();
}
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.Browsers.MicrosoftEdgeLocator : object {
    public static string AppFolder;
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestProvider.JavaScript.Browsers.MicrosoftEdgeLocator/<GetBrowserInfos>d__1")]
public sealed virtual IEnumerable`1<IWebBrowserInfo> GetBrowserInfos();
    [ContractAnnotationAttribute("=> true, webBrowserInfo: notnull; => false, webBrowserInfo: null")]
private static bool TryGetMsEdge(string browserId, string browserNameTemplate, string installFolder, IWebBrowserInfo& webBrowserInfo);
    [NotNullAttribute]
private IWebBrowserInfo CreateHeadlessWebBrowserInfo(IWebBrowserInfo webBrowserInfo);
    private static bool TryGetProductVersionMajor(string fileName, Int32& versionMajor);
    [ContractAnnotationAttribute("=> true, webBrowserInfo: notnull; => false, webBrowserInfo: null")]
private static bool TryGetMsEdgeAsUniversalApp(IWebBrowserInfo& webBrowserInfo);
    private static bool MayBeWindows10OrLater();
    private static bool IsWindowsServer2012OrLater();
    [ContractAnnotationAttribute("=> true, version: notnull; => false, version: null")]
private static bool TryParseEdgeVersion(string manifestFileName, Version& version);
}
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.Browsers.OperaLocator : object {
    public static string OperaAppKey;
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestProvider.JavaScript.Browsers.OperaLocator/<GetBrowserInfos>d__1")]
public sealed virtual IEnumerable`1<IWebBrowserInfo> GetBrowserInfos();
    private static bool TryGetVersionInfo(string fileName, FileVersionInfo& fileVersionInfo);
    private static bool TryGetExecutablePath(string openCommand, String& executablePath);
}
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.Browsers.WebBrowserInfo : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <IconId>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <Location>k__BackingField;
    public string Id { get; }
    public string Name { get; }
    public IconId IconId { get; }
    public FileSystemPath Location { get; }
    public WebBrowserInfo(string id, string name, IconId iconId, FileSystemPath location);
    public sealed virtual bool Equals(IWebBrowserInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual IconId get_IconId();
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_Location();
}
public static class JetBrains.ReSharper.UnitTestProvider.JavaScript.BuildScript.Install.InstallPhantomJSTestRunner : object {
    public static RelativePath InPackageRelativeLocation;
    private static InstallPhantomJSTestRunner();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestProvider.JavaScript.BuildScript.Install.InstallPhantomJSTestRunner/<DoInstallPhantomJSTestRunner>d__1")]
[BuildStepAttribute]
public static IEnumerable`1<SubplatformFileForPackagingFast> DoInstallPhantomJSTestRunner(AllAssembliesOnSources allass);
}
public interface JetBrains.ReSharper.UnitTestProvider.JavaScript.Common.IFileRoleParser {
    [CanBeNullAttribute]
public abstract virtual string GetFileRole(string filePath, IProjectUtils project);
    [CanBeNullAttribute]
public abstract virtual string GetFileRole(VirtualFileSystemPath filePath, IProjectUtils project);
    [NotNullAttribute]
public abstract virtual IDictionary`2<string, string> GetFileRoles(String[] files, IProjectUtils project);
}
public interface JetBrains.ReSharper.UnitTestProvider.JavaScript.Common.IProjectUtils {
    public abstract virtual string GetProjectFileText(VirtualFileSystemPath filePath);
    public abstract virtual VirtualFileSystemPath GetFileSystemPath(string filePath);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IProjectFile> GetAllProjectFiles();
    public abstract virtual bool IsJavaScriptModule(string filePath);
    public abstract virtual bool IsJavaScriptModule(IPsiSourceFile sourceFile);
    public abstract virtual bool IsJavaScriptModule(IProjectFile projectFile);
}
public interface JetBrains.ReSharper.UnitTestProvider.JavaScript.Common.IPsiMatcher {
    public abstract virtual IPsiMatcher Parent(Func`2<ITreeNode, bool> condition);
    public abstract virtual bool Match(ITreeNode node);
}
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.Common.ProjectUtils : object {
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private IProject myProject;
    public ProjectUtils(IProject project, ILogger logger);
    public sealed virtual string GetProjectFileText(VirtualFileSystemPath filePath);
    public sealed virtual VirtualFileSystemPath GetFileSystemPath(string filePath);
    public sealed virtual IEnumerable`1<IProjectFile> GetAllProjectFiles();
    public sealed virtual bool IsJavaScriptModule(string filePath);
    public sealed virtual bool IsJavaScriptModule(IPsiSourceFile sourceFile);
    public sealed virtual bool IsJavaScriptModule(IProjectFile projectFile);
    private bool IsJavaScriptModuleByText(string text);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestProvider.JavaScript.Common.ProjectUtilsExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<TestRunFileInfo> GetFileRolesAndTypes(IProjectUtils projectUtils, IFileRoleParser fileRoleParser, String[] files);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.UnitTestProvider.JavaScript.Common.PsiExtensions : object {
    [ExtensionAttribute]
public static bool IsImportDeclaration(IJavaScriptStatement statement);
    [ExtensionAttribute]
private static bool ContainsImportFunctionCall(TreeNodeEnumerable`1<IVariableDeclaration> variableDeclarations);
    [ExtensionAttribute]
public static bool IsImportVariableStatement(IJavaScriptStatement statement);
    [ExtensionAttribute]
public static bool IsImportLexicalDeclaration(IJavaScriptStatement statement);
    [ExtensionAttribute]
public static bool IsExportDeclaration(IJavaScriptStatement statement);
    [ExtensionAttribute]
public static bool IsExportFunction(IJavaScriptStatement statement);
    [ExtensionAttribute]
public static bool IsExportClass(IJavaScriptStatement statement);
    [ExtensionAttribute]
public static bool IsExportVariableStatement(IJavaScriptStatement statement);
    [ExtensionAttribute]
public static bool IsExportLexicalDeclaration(IJavaScriptStatement statement);
    [ExtensionAttribute]
public static bool IsJavaScriptBasedFileByExtension(IProjectFile projectFile);
}
internal static class JetBrains.ReSharper.UnitTestProvider.JavaScript.Common.PsiMatcher : object {
    public static IPsiMatcher Parent(Func`2<ITreeNode, bool> condition);
}
[FlagsAttribute]
public enum JetBrains.ReSharper.UnitTestProvider.JavaScript.Common.WindowsVersion : Enum {
    public int value__;
    public static WindowsVersion All;
    public static WindowsVersion PreWindows10;
    public static WindowsVersion Windows10OrLater;
    public static WindowsVersion PreWindowsServer2012;
    public static WindowsVersion WindowsServer2012OrLater;
}
public static class JetBrains.ReSharper.UnitTestProvider.JavaScript.Common.WindowsVersionDetector : object {
    [SecurityCriticalAttribute]
private static int RtlGetVersion(OSVERSIONINFOEX& versionInfo);
    public static bool IsWindowsServer2012OrLater();
    public static WindowsVersion GetVersion();
}
public interface JetBrains.ReSharper.UnitTestProvider.JavaScript.IJavaScriptUnitTestFramework {
    [NotNullAttribute]
public IUnitTestProvider TestProvider { get; }
    [NotNullAttribute]
public IJavaScriptServiceProvider ServiceProvider { get; }
    public abstract virtual IUnitTestProvider get_TestProvider();
    public abstract virtual IJavaScriptServiceProvider get_ServiceProvider();
    public abstract virtual void ExploreTests(IFile psiFile, IUnitTestElementObserverOnFile observer, Func`1<bool> interrupted);
}
public interface JetBrains.ReSharper.UnitTestProvider.JavaScript.ITestRunnerRegistry {
    public abstract virtual bool TryGetRunner(bool isTypeScript, string frameworkVersion, IJavaScriptUnitTestRunStrategy& runner);
}
public interface JetBrains.ReSharper.UnitTestProvider.JavaScript.Jasmine.IJasmineTestElement {
}
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.Jasmine.JasmineElementFactory : object {
    [NotNullAttribute]
private JasmineServiceProvider myProvider;
    [NotNullAttribute]
private JetHashSet`1<IUnitTestElement> myElements;
    public JasmineElementFactory(JasmineServiceProvider provider);
    public JasmineSpecificationElement GetOrCreateSpecification(string specificationName, IProjectModelElementPointer projectFile, TextRange textRange, T suite);
    public JasmineSuiteElement GetOrCreateSuite(IProjectModelElementPointer projectFile, string suiteName, JasmineSuiteElement parentSuite, TextRange textRange);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.Jasmine.JasmineElementsSource : TestFrameworkElementSourceBase`1<JasmineTestFramework> {
    public JasmineElementsSource(JasmineTestFramework testFramework);
}
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.Jasmine.JasmineFileExplorer : object {
    private static string TestSuiteFuncName;
    private static string DisabledTestSuiteFuncName;
    private static string TestFuncName;
    private JasmineElementFactory myFactory;
    private Func`1<bool> myInterrupted;
    private IUnitTestElementObserverOnFile myObserver;
    private IProjectModelElementPointer myProjectFileEnvoy;
    private IPsiMatcher[] myTestMatchers;
    [NotNullAttribute]
private Stack`1<SuiteAndTextRange> myCurrentSuites;
    private int myDisabledEndOffset;
    public bool ProcessingIsFinished { get; }
    public JasmineFileExplorer(JasmineElementFactory factory, ProjectModelElementPointerManager pmepm, IFile file, IUnitTestElementObserverOnFile observer, Func`1<bool> interrupted);
    private JasmineSuiteElement GetCurrentSuite();
    private TextRange GetCurrentTextRange();
    public sealed virtual bool InteriorShouldBeProcessed(ITreeNode element);
    public sealed virtual bool get_ProcessingIsFinished();
    public sealed virtual void ProcessBeforeInterior(ITreeNode element);
    public sealed virtual void ProcessAfterInterior(ITreeNode element);
    private static string GetJasmineItemName(ITreeNode node);
    private static IPsiMatcher CreateJsTestInLambdaMatcher();
    private static IPsiMatcher CreateJsTestInFunctionMatcher();
    private static IPsiMatcher CreateTsTestInFunctionMatcher();
    private static IPsiMatcher CreateTsTestInLambdaMatcher();
    private void ExploreTest(TextRange textRange, IInvocationExpression invocationExpression);
    private void ExploreSuite(IInvocationExpression invocationExpression);
    private void FinishCurrentSuite(int offset);
}
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.Jasmine.JasmineFileRoleParser : object {
    private static string JasmineBootJsFileContentMarker;
    private static string JasmineHtmlJsFileContentMarkerV2;
    private static string JasmineHtmlJsFileContentMarkerV1;
    private static string JasmineCssFileContentMarker;
    private Regex myJasmineBootFileNameRegex;
    private Regex myJasmineCssFileNameRegex;
    private Regex myJasmineFileNameRegex;
    private Regex myJasmineHtmlFileNameRegex;
    public sealed virtual string GetFileRole(string filePath, IProjectUtils project);
    public sealed virtual string GetFileRole(VirtualFileSystemPath filePath, IProjectUtils project);
    [NotNullAttribute]
public sealed virtual IDictionary`2<string, string> GetFileRoles(String[] files, IProjectUtils project);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.Jasmine.JasmineServiceProvider : JavaScriptServiceProviderBase`2<JasmineTestProvider, JasmineFileRoleParser> {
    public JasmineServiceProvider(Lifetime lifetime, ISolution solution, JasmineTestProvider provider, ISettingsStore settingsStore, ApplicationPackagesFiles applicationPackagesFiles, AssemblyExistsService fileExistsService, IJavaScriptDependencyManager dependencyManager, JasmineTestRunnerRegistry testRunnerRegistry, ITsProjectPropertiesProvider tsProjectPropertiesProvider, ILogger logger);
    protected virtual string GetTestHarnessFileName(IContextBoundSettingsStore contextBoundSettingsStore, IProjectFile projectFile);
    public virtual string GetDefaultUnitTestingFrameworkVersion();
    public virtual string GetUnitTestingFrameworkVersion(IJavaScriptTestElement element, IUnitTestRun run);
}
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.Jasmine.JasmineSpecificationElement : JasmineTestElementBase`1<JavaScriptTestTask> {
    public string Kind { get; }
    public JasmineSpecificationElement(string testId, string specificationName, IProjectModelElementPointer projectFile, UnitTestElement parentSuite, TextRange textRange);
    public virtual string get_Kind();
}
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.Jasmine.JasmineSuiteElement : JasmineTestElementBase`1<JavaScriptModuleTask> {
    public string Kind { get; }
    public JasmineSuiteElement(string testId, string suiteName, JasmineSuiteElement parentSuite, IProjectModelElementPointer projectFile, TextRange textRange);
    public virtual string get_Kind();
}
public abstract class JetBrains.ReSharper.UnitTestProvider.JavaScript.Jasmine.JasmineTestElementBase`1 : JavaScriptTestElementBase`1<TTask> {
    protected JasmineTestElementBase`1(string testId, string shortName, IProjectModelElementPointer projectFile, TextRange textRange);
    public virtual IReadOnlyCollection`1<IUnitTestElement> GetRelatedUnitTestElements();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.Jasmine.JasmineTestFramework : object {
    [NotNullAttribute]
private JasmineServiceProvider myServiceProvider;
    [NotNullAttribute]
private ProjectModelElementPointerManager myPmepm;
    [NotNullAttribute]
private JasmineTestProvider myTestProvider;
    public IUnitTestProvider TestProvider { get; }
    public IJavaScriptServiceProvider ServiceProvider { get; }
    public JasmineTestFramework(ProjectModelElementPointerManager pmepm, JasmineTestProvider testProvider, JasmineServiceProvider serviceProvider);
    public sealed virtual IUnitTestProvider get_TestProvider();
    public sealed virtual IJavaScriptServiceProvider get_ServiceProvider();
    public sealed virtual void ExploreTests(IFile psiFile, IUnitTestElementObserverOnFile observer, Func`1<bool> interrupted);
}
[UnitTestProviderAttribute("16")]
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.Jasmine.JasmineTestProvider : object {
    internal static string JASMINE_ID;
    public string ID { get; }
    public string Name { get; }
    public sealed virtual string get_ID();
    public sealed virtual string get_Name();
    public sealed virtual bool IsElementOfKind(IDeclaredElement declaredElement, UnitTestElementKind elementKind);
    public sealed virtual bool IsElementOfKind(IUnitTestElement element, UnitTestElementKind elementKind);
    public sealed virtual bool IsSupported(IHostProvider hostProvider, IProject project, TargetFrameworkId targetFrameworkId);
    public sealed virtual bool IsSupported(IProject project, TargetFrameworkId targetFrameworkId);
    public sealed virtual bool SupportsResultEventsForParentOf(IUnitTestElement element);
    public sealed virtual IUnitTestRunStrategy GetRunStrategy(IUnitTestElement element, IHostProvider hostProvider);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.Jasmine.JasmineTestRunnerRegistry : JavaScriptTestRunnerRegistryBase {
    public JasmineTestRunnerRegistry(ILogger logger);
}
public static class JetBrains.ReSharper.UnitTestProvider.JavaScript.Jasmine.JasmineVersion : object {
    public static string V_1_3;
    public static string V_2_0;
    public static string V_2_1;
    public static string V_2_2;
    public static string V_2_3;
    public static string V_2_4;
    public static string V_2_5;
    public static string V_2_6;
    public static string V_2_7;
    public static string V_2_8;
    public static string V_2_9;
    public static string V_3_0;
    public static string V_3_1;
    public static string V_3_2;
    public static string V_3_3;
    public static string V_3_4;
    public static string V_3_5;
    public static string Latest;
    public static string GetActualLatestVersion();
    public static bool TryGetCompatibleVersion(string majorMinorVersion, String& compatibleVersion);
}
public static class JetBrains.ReSharper.UnitTestProvider.JavaScript.Jasmine.JasmineVersionParser : object {
    private static string JasmineVersion13Pattern;
    private static string JasmineVersion2XPattern;
    public static bool TryGetMajorMinorVersion(string jasmineSourceFile, String& jasmineVersion);
    private static bool TryGetMajorMinorVersionWithPattern(string pattern, string jasmineSourceFile, String& jasmineVersion);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestProvider.JavaScript.JavaScriptFilePath : object {
    public static string ProjectRelativePrefix;
    public static string SolutionRelativePrefix;
    [ExtensionAttribute]
public static VirtualFileSystemPath CreateFileSystemPath(IProject project, string projectRelativePath);
    [ExtensionAttribute]
public static VirtualFileSystemPath CreateFileSystemPath(ISolution solution, string solutionRelativePath);
    [ExtensionAttribute]
[NotNullAttribute]
public static VirtualFileSystemPath GetFileSystemPath(IProject project, string filePath);
    private static VirtualFileSystemPath GetFileSystemPathInSolution(VirtualFileSystemPath solutionDir, string solutionRelativePath);
    private static VirtualFileSystemPath GetFileSystemPathInProject(VirtualFileSystemPath projectDir, string projectRelativePath);
    public static bool IsSolutionsRelativePath(string path);
    public static bool IsProjectsRelativePath(string path);
    public static string GetFilePathInProject(string projectDir, string projectsRelativePath);
    public static string GetFilePathInSolution(string solutionDir, string solutionsRelativePath);
}
public abstract class JetBrains.ReSharper.UnitTestProvider.JavaScript.JavaScriptServiceProviderBase`2 : object {
    [NotNullAttribute]
private IJavaScriptDependencyManager myDependencyManager;
    [NotNullAttribute]
private Lazy`1<IFileRoleParser> myFileRoleParser;
    [NotNullAttribute]
private string myFrameworkName;
    [NotNullAttribute]
private AssemblyExistsService myFileExistsService;
    [NotNullAttribute]
private ITestRunnerRegistry myTestRunnerRegistry;
    [NotNullAttribute]
private ITsProjectPropertiesProvider myTsProjectPropertiesProvider;
    [NotNullAttribute]
private IDictionary`2<IPsiSourceFile, string> myTsToJsMap;
    [CompilerGeneratedAttribute]
private ApplicationPackagesFiles <ApplicationPackagesFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private IContextBoundSettingsStore <ContextBoundSettingsStore>k__BackingField;
    [CompilerGeneratedAttribute]
private TTestProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <SolutionDirectoryPath>k__BackingField;
    protected ApplicationPackagesFiles ApplicationPackagesFiles { get; }
    protected IContextBoundSettingsStore ContextBoundSettingsStore { get; }
    public TTestProvider Provider { get; }
    [NotNullAttribute]
protected ILogger Logger { get; }
    [NotNullAttribute]
protected VirtualFileSystemPath SolutionDirectoryPath { get; }
    protected JavaScriptServiceProviderBase`2(string frameworkName, Lifetime lifetime, ISolution solution, ISettingsStore settingsStore, ApplicationPackagesFiles applicationPackagesFiles, AssemblyExistsService fileExistsService, IJavaScriptDependencyManager dependencyManager, TTestProvider provider, ITestRunnerRegistry testRunnerRegistry, ITsProjectPropertiesProvider tsProjectPropertiesProvider, ILogger logger);
    [CompilerGeneratedAttribute]
protected ApplicationPackagesFiles get_ApplicationPackagesFiles();
    [CompilerGeneratedAttribute]
protected IContextBoundSettingsStore get_ContextBoundSettingsStore();
    [CompilerGeneratedAttribute]
public TTestProvider get_Provider();
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
protected VirtualFileSystemPath get_SolutionDirectoryPath();
    public sealed virtual RemoteTask CreateTestRunTask(IProjectFile projectFile, IProject project);
    public sealed virtual RemoteTask CreateTestFileTask(IProjectFile projectFile, IProject project, String[] referencedFiles, IUnitTestRun run);
    public abstract virtual string GetDefaultUnitTestingFrameworkVersion();
    public abstract virtual string GetUnitTestingFrameworkVersion(IJavaScriptTestElement element, IUnitTestRun run);
    public sealed virtual IJavaScriptUnitTestRunStrategy GetRunStrategy(bool isTypeScript, string defaultFrameworkVersion);
    public sealed virtual String[] GetReferencedFilesWithSorting(IUnitTestRun run, IProjectFile projectFile);
    protected IEnumerable`1<TestRunFileInfo> GetFileRolesAndTypes(String[] files, IProject project, IJavaScriptUnitTestRunCache cache);
    protected abstract virtual string GetTestHarnessFileName(IContextBoundSettingsStore contextBoundSettingsStore, IProjectFile projectFile);
    private string MakePathRelativeToSolution(VirtualFileSystemPath path);
    private string CalcReferencedFileLocation(Lifetime lifetime, IPsiSourceFile f);
    private string GetReferencedFileLocation(Lifetime lifetime, IPsiSourceFile f, IJavaScriptUnitTestRunCache cache);
    private string AddToJs2TsMap(Lifetime lifetime, IPsiSourceFile file, VirtualFileSystemPath path);
    private static string GetVirtualPath(IProjectItem projectFile);
    [NotNullAttribute]
protected String[] GetReferencedFiles(IJavaScriptTestElement element, IUnitTestRun run);
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.JavaScriptTestCache : object {
    private Lifetime myLifetime;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private IPsiModules myPsiModules;
    [NotNullAttribute]
private IPersistentIndexManager myPersistentIndexManager;
    [NotNullAttribute]
private IUnitTestDiscoveryManager myDiscoveryManager;
    [NotNullAttribute]
private IEnumerable`1<IJavaScriptUnitTestFramework> myTestFrameworks;
    [NotNullAttribute]
private ILogger myLogger;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Active>k__BackingField;
    public IProperty`1<bool> Active { get; }
    private bool JetBrains.ReSharper.Psi.Caches.IPsiSourceFileCache.HasDirtyFiles { get; }
    public JavaScriptTestCache(IShellLocks locks, ISolution solution, IPsiModules psiModules, IPersistentIndexManager persistentIndexManager, IUnitTestProviderManager providerManager, IUnitTestDiscoveryManager discoveryManager, IEnumerable`1<IJavaScriptUnitTestFramework> testFrameworks, ILogger logger);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_Active();
    private sealed virtual override bool JetBrains.ReSharper.Psi.Caches.IPsiSourceFileCache.UpToDate(IPsiSourceFile sourceFile);
    public sealed virtual object Build(IPsiSourceFile sourceFile, bool isStartup);
    private sealed virtual override object JetBrains.ReSharper.Psi.Caches.ICache.Load(IProgressIndicator progress, bool enablePersistence);
    private sealed virtual override void JetBrains.ReSharper.Psi.Caches.ICache.MergeLoaded(object data);
    private sealed virtual override void JetBrains.ReSharper.Psi.Caches.ICache.Save(IProgressIndicator progress, bool enablePersistence);
    private sealed virtual override bool JetBrains.ReSharper.Psi.Caches.IPsiSourceFileCache.get_HasDirtyFiles();
    private sealed virtual override void JetBrains.ReSharper.Psi.Caches.IPsiSourceFileCache.MarkAsDirty(IPsiSourceFile sourceFile);
    private sealed virtual override void JetBrains.ReSharper.Psi.Caches.IPsiSourceFileCache.Merge(IPsiSourceFile sourceFile, object builtPart);
    private sealed virtual override void JetBrains.ReSharper.Psi.Caches.IPsiSourceFileCache.Drop(IPsiSourceFile sourceFile);
    private sealed virtual override void JetBrains.ReSharper.Psi.Caches.IPsiSourceFileCache.OnPsiChange(ITreeNode elementContainingChanges, PsiChangedElementType type);
    private sealed virtual override void JetBrains.ReSharper.Psi.Caches.IPsiSourceFileCache.OnDocumentChange(IPsiSourceFile sourceFile, ProjectFileDocumentCopyChange change);
    private sealed virtual override void JetBrains.ReSharper.Psi.Caches.IPsiSourceFileCache.SyncUpdate(bool underTransaction);
    private sealed virtual override void JetBrains.ReSharper.Psi.Caches.IPsiSourceFileCache.Dump(TextWriter writer, IPsiSourceFile sourceFile);
    private sealed virtual override void JetBrains.ReSharper.Psi.Caches.ISwitchingCache.Initialize();
    private sealed virtual override void JetBrains.ReSharper.Psi.Caches.ISwitchingCache.Release();
    private static bool CanHandle(IPsiSourceFile sourceFile);
    public sealed virtual Task ProcessExternal(CancellationToken ct);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestProvider.JavaScript.JavaScriptTestCache/<GetAllFiles>d__29")]
private IEnumerable`1<IPsiSourceFile> GetAllFiles();
}
public enum JetBrains.ReSharper.UnitTestProvider.JavaScript.JavaScriptTestEngine : Enum {
    public int value__;
    public static JavaScriptTestEngine Browser;
    public static JavaScriptTestEngine PhantomJS;
}
public static class JetBrains.ReSharper.UnitTestProvider.JavaScript.JavaScriptTestRunnerHelper : object {
    public static string GetBrowserId(IContextBoundSettingsStore settings);
    public static string GetBrowserLocation(IContextBoundSettingsStore settings, IProjectFile projectFile);
    private static string GetBrowserExecutablePath(IContextBoundSettingsStore settings, IProjectFile projectFile);
    private static string GetFileName(FileSystemLocation locationType, string location, IProjectFile projectFile);
    public static string GetPhantomJsScriptLocation(IContextBoundSettingsStore settings, ApplicationPackagesFiles applicationPackagesFiles);
    public static string GetTestName(IExpressionOrSpread expression);
    private static string GetGenericTestHarnessFileName(IContextBoundSettingsStore settings, IProjectFile projectFile, Expression`1<Func`2<JavaScriptUnitTestProvidersSettings, bool>> isTestHarnessEnabled, Expression`1<Func`2<JavaScriptUnitTestProvidersSettings, string>> getTestHarnessFileName, Expression`1<Func`2<JavaScriptUnitTestProvidersSettings, FileSystemLocation>> getTestHarnessLocation);
    public static string GetJasmineTestHarnessFilename(IContextBoundSettingsStore settings, IProjectFile projectFile);
    public static string GetQUnitTestHarnessFilename(IContextBoundSettingsStore settings, IProjectFile projectFile);
    public static string GetCommandLine(IContextBoundSettingsStore settings);
}
public abstract class JetBrains.ReSharper.UnitTestProvider.JavaScript.JavaScriptTestRunnerRegistryBase : object {
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private Dictionary`2<string, IJavaScriptUnitTestRunStrategy> myJavaScriptStrategies;
    [NotNullAttribute]
private Dictionary`2<string, IJavaScriptUnitTestRunStrategy> myTypeScriptStrategies;
    protected JavaScriptTestRunnerRegistryBase(ILogger logger);
    public sealed virtual bool TryGetRunner(bool isTypeScript, string frameworkVersion, IJavaScriptUnitTestRunStrategy& runner);
    protected void RegisterTestRunStrategy(string frameworkVersion, string testRunnerId);
    protected void RegisterDefaultTestRunStrategy(string frameworkVersion, string latestVersion, string testRunnerId);
}
[SettingsKeyAttribute("JetBrains.ReSharper.UnitTestFramework.Settings.UnitTestingSettings", "JetBrains.ReSharper.UnitTestProvider.JavaScript.Resources.Strings", "CommonSettingsForAllJavaScriptUnitTestProvidersSettingDescription")]
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.JavaScriptUnitTestProvidersSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestProvider.JavaScript.Resources.Strings", "WebBrowserIdentifierToRunTestsInSettingDescription")]
public string BrowserId;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestProvider.JavaScript.Resources.Strings", "BrowsersRelativeLocationSettingDescription")]
public FileSystemLocation BrowserLocationType;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestProvider.JavaScript.Resources.Strings", "PathToWebBrowserToRunTestsInSettingDescription")]
public string BrowserLocation;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestProvider.JavaScript.Resources.Strings", "CommandLineArgumentsSettingDescription")]
public string CommandLineArguments;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestProvider.JavaScript.Resources.Strings", "UseCustomTestHarnessToRunJavaScriptTestsSettingDescription")]
public bool CustomTestHarnessEnabled;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestProvider.JavaScript.Resources.Strings", "JasmineVersionSettingDescription")]
public string JasmineJsVersion;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestProvider.JavaScript.Resources.Strings", "WhereToRunJavaScriptTestsSettingDescription")]
public JavaScriptTestEngine JavaScriptTestEngine;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestProvider.JavaScript.Resources.Strings", "PathToPhantomJSSettingDescription")]
public string PhantomJSLocation;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestProvider.JavaScript.Resources.Strings", "PhantomJSRelativeLocationSettingDescription")]
public FileSystemLocation PhantomJSLocationType;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestProvider.JavaScript.Resources.Strings", "QUnitVersionSettingDescription")]
public string QUnitJsVersion;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestProvider.JavaScript.Resources.Strings", "UseCustomTestHarnessToRunJavaScriptTestsSettingDescription")]
public bool QUnitTestHarnessEnabled;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestProvider.JavaScript.Resources.Strings", "CustomTestHarnessFilenameSettingDescription")]
public string QUnitTestHarnessFileName;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestProvider.JavaScript.Resources.Strings", "TestHarnessRelativeLocationSettingDescription")]
public FileSystemLocation QUnitTestHarnessLocation;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestProvider.JavaScript.Resources.Strings", "CustomTestHarnessFilenameSettingDescription")]
public string TestHarnessFilename;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestProvider.JavaScript.Resources.Strings", "TestHarnessRelativeLocationSettingDescription")]
public FileSystemLocation TestHarnessLocation;
}
[MigrateSettingsAttribute]
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.JavaScriptUnitTestProvidersSettingsMigration : object {
    private IDictionary`2<string, string> myBrowsers;
    public sealed virtual IEnumerable`1<SettingsEntry> GetEntriesToMigrate(ISettingsSchema schema);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestProvider.JavaScript.JavaScriptUnitTestProvidersSettingsMigration/<GetKeysToMigrate>d__2")]
public sealed virtual IEnumerable`1<SettingsKey> GetKeysToMigrate(ISettingsSchema schema);
    public sealed virtual void Migrate(IContextBoundSettingsStoreImplementation store);
    public bool TryUpgradeBrowserId(string oldBrowserId, string browserLocation, String& newBrowserId);
}
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.Options.CustomWebBrowserInfo : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <IconId>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <Location>k__BackingField;
    public string Id { get; }
    public string Name { get; }
    public IconId IconId { get; }
    public FileSystemPath Location { get; private set; }
    public CustomWebBrowserInfo(string id, string name, IconId iconId, FileSystemPath location);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual IconId get_IconId();
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_Location();
    [CompilerGeneratedAttribute]
private void set_Location(FileSystemPath value);
    public sealed virtual void SetLocation(FileSystemPath location);
}
public interface JetBrains.ReSharper.UnitTestProvider.JavaScript.Options.ICustomWebBrowserInfo {
    public abstract virtual void SetLocation(FileSystemPath location);
}
[OptionsPageAttribute("JavaScript Tests", "JavaScript Tests", "JetBrains.ReSharper.UnitTestProvider.JavaScript.Resources.UnitTestingJavaScriptThemedIcons/Qunit")]
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.Options.JavaScriptTestsPage : CustomSimpleOptionsPage {
    public static string PID;
    [NotNullAttribute]
private ICommonFileDialogs myCommonFileDialogs;
    public JavaScriptTestsPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, ICommonFileDialogs commonFileDialogs, InstalledBrowsersLocator installedBrowsersLocator, QUnitTestProvider qUnitProvider, JasmineTestProvider jasmineProvider);
    private void CreateTestFrameworkGroup(ITestFrameworkSettings settings);
    private void CreateRuntimeGroup(InstalledBrowsersLocator installedBrowsersLocator);
    private void CreateRuntimeChooser(InstalledBrowsersLocator installedBrowsersLocator);
    private void CreateCommandLineOption();
    private void CreateRuntimeBrowserExecutablePath();
    private void CreateRuntimePhantomJsPath();
    private void CreateRuntimeBrowserComboBox(InstalledBrowsersLocator installedBrowsersLocator);
    private ComboBoxParams`2<TBrowserId, IWebBrowserInfo> GetBrowsersForComboBox(InstalledBrowsersLocator installedBrowsersLocator, Func`2<string, TBrowserId> idConverter);
    protected IOptionEntity AddMessage(MessageElement[] elements);
    private IOptionEntity AddIconComboBoxOption(string text, string toolTipText, IProperty`1<string> property, IEnumerable`1<IconComboBoxItem> items, string defaultValue);
    private IOptionEntity AddRelativeFilePathChooserOption(string text, string toolTipText, Expression`1<Func`2<TKeyClass1, FileSystemLocation>> locationTypeLambda, Expression`1<Func`2<TKeyClass2, string>> pathLambda, ChooseFileType[] fileTypes);
    public virtual bool OnOk();
    private bool CheckPhantomJsSettings();
    private bool CheckBrowserSettings();
}
public static class JetBrains.ReSharper.UnitTestProvider.JavaScript.Options.TestFrameworkVersionExtensions : object {
    public static IEnumerable`1<string> GetVersions(Type t);
}
public interface JetBrains.ReSharper.UnitTestProvider.JavaScript.QUnit.IQUnitTestElement {
}
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.QUnit.QUnitElementFactory : object {
    [NotNullAttribute]
private QUnitServiceProvider myProvider;
    [NotNullAttribute]
private JetHashSet`1<IUnitTestElement> myElements;
    public QUnitElementFactory(QUnitServiceProvider provider);
    public QUnitTestElement GetOrCreateTest(string testName, IProjectModelElementPointer projectFile, TextRange textRange, T module);
    public QUnitModuleElement GetOrCreateModule(IProjectModelElementPointer projectFile, string moduleName, TextRange textRange);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.QUnit.QUnitElementsSource : TestFrameworkElementSourceBase`1<QUnitTestFramework> {
    public QUnitElementsSource(QUnitTestFramework testFramework);
}
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.QUnit.QUnitFileExplorer : object {
    private QUnitElementFactory myFactory;
    private Func`1<bool> myInterrupted;
    private IUnitTestElementObserverOnFile myObserver;
    private IProjectModelElementPointer myProjectFileEnvoy;
    private QUnitModuleElement myCurrentModule;
    private int myCurrentModuleContainingRangeStart;
    private TextRange myCurrentModuleTextRange;
    public bool ProcessingIsFinished { get; }
    public QUnitFileExplorer(QUnitElementFactory factory, ProjectModelElementPointerManager pmepm, IUnitTestElementObserverOnFile observer, IFile file, Func`1<bool> interrupted);
    public sealed virtual bool InteriorShouldBeProcessed(ITreeNode element);
    public sealed virtual bool get_ProcessingIsFinished();
    public sealed virtual void ProcessBeforeInterior(ITreeNode element);
    public sealed virtual void ProcessAfterInterior(ITreeNode element);
    private static bool IsTestFunction(string functionName);
    private static bool IsModuleFunction(string functionName);
    private void ExploreTest(TextRange textRange, IInvocationExpression invocationExpression);
    private QUnitModuleElement ExploreModule(IInvocationExpression invocationExpression);
    public void FinishCurrentModule(int endOffset);
}
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.QUnit.QUnitFileRoleParser : object {
    private static string QUnitCssContentMarker;
    private Regex myQUnitCssFileNameRegex;
    private Regex myQUnitJsFileNameRegex;
    public sealed virtual string GetFileRole(string filePath, IProjectUtils project);
    public sealed virtual string GetFileRole(VirtualFileSystemPath filePath, IProjectUtils project);
    [NotNullAttribute]
public sealed virtual IDictionary`2<string, string> GetFileRoles(String[] files, IProjectUtils project);
}
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.QUnit.QUnitModuleElement : QUnitTestElementBase`1<JavaScriptModuleTask> {
    public string Kind { get; }
    public QUnitModuleElement(string testId, string moduleName, IProjectModelElementPointer projectFile, TextRange textRange);
    public virtual string get_Kind();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.QUnit.QUnitServiceProvider : JavaScriptServiceProviderBase`2<QUnitTestProvider, QUnitFileRoleParser> {
    public QUnitServiceProvider(Lifetime lifetime, ISolution solution, QUnitTestProvider provider, ISettingsStore settingsStore, ApplicationPackagesFiles applicationPackagesFiles, AssemblyExistsService fileExistsService, IJavaScriptDependencyManager dependencyManager, QUnitTestRunnerRegistry testRunnerRegistry, ITsProjectPropertiesProvider tsProjectPropertiesProvider, ILogger logger);
    protected virtual string GetTestHarnessFileName(IContextBoundSettingsStore contextBoundSettingsStore, IProjectFile projectFile);
    public virtual string GetDefaultUnitTestingFrameworkVersion();
    public virtual string GetUnitTestingFrameworkVersion(IJavaScriptTestElement element, IUnitTestRun run);
}
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.QUnit.QUnitTestElement : QUnitTestElementBase`1<JavaScriptTestTask> {
    public string Kind { get; }
    public QUnitTestElement(string testId, string testName, IProjectModelElementPointer projectFile, TextRange textRange);
    public virtual string get_Kind();
}
public abstract class JetBrains.ReSharper.UnitTestProvider.JavaScript.QUnit.QUnitTestElementBase`1 : JavaScriptTestElementBase`1<TTask> {
    protected QUnitTestElementBase`1(string testId, string shortName, IProjectModelElementPointer projectFile, TextRange textRange);
    public virtual IReadOnlyCollection`1<IUnitTestElement> GetRelatedUnitTestElements();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.QUnit.QUnitTestFramework : object {
    [NotNullAttribute]
private QUnitServiceProvider myServiceProvider;
    [NotNullAttribute]
private ProjectModelElementPointerManager myPmepm;
    [NotNullAttribute]
private QUnitTestProvider myTestProvider;
    public IUnitTestProvider TestProvider { get; }
    public IJavaScriptServiceProvider ServiceProvider { get; }
    public QUnitTestFramework(ProjectModelElementPointerManager pmepm, QUnitTestProvider testProvider, QUnitServiceProvider serviceProvider);
    public sealed virtual IUnitTestProvider get_TestProvider();
    public sealed virtual IJavaScriptServiceProvider get_ServiceProvider();
    public sealed virtual void ExploreTests(IFile psiFile, IUnitTestElementObserverOnFile observer, Func`1<bool> interrupted);
}
[UnitTestProviderAttribute("16")]
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.QUnit.QUnitTestProvider : object {
    internal static string QUNIT_ID;
    public string ID { get; }
    public string Name { get; }
    public sealed virtual string get_ID();
    public sealed virtual string get_Name();
    public sealed virtual bool IsElementOfKind(IDeclaredElement declaredElement, UnitTestElementKind elementKind);
    public sealed virtual bool IsElementOfKind(IUnitTestElement element, UnitTestElementKind elementKind);
    public sealed virtual bool IsSupported(IHostProvider hostProvider, IProject project, TargetFrameworkId targetFrameworkId);
    public sealed virtual bool IsSupported(IProject project, TargetFrameworkId targetFrameworkId);
    public sealed virtual bool SupportsResultEventsForParentOf(IUnitTestElement element);
    public sealed virtual IUnitTestRunStrategy GetRunStrategy(IUnitTestElement element, IHostProvider hostProvider);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.QUnit.QUnitTestProviderSettingsUpgrader : UnitTestProviderSettingsUpgraderBase {
    protected string SectionName { get; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public string BrowserLocation { get; public set; }
    protected virtual string get_SectionName();
    public string get_BrowserLocation();
    public void set_BrowserLocation(string value);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.QUnit.QUnitTestRunnerRegistry : JavaScriptTestRunnerRegistryBase {
    public QUnitTestRunnerRegistry(ILogger logger);
}
public static class JetBrains.ReSharper.UnitTestProvider.JavaScript.QUnit.QUnitVersion : object {
    public static string V_1;
    public static string V_2;
    public static string Latest;
}
public static class JetBrains.ReSharper.UnitTestProvider.JavaScript.QUnit.QUnitVersionParser : object {
    private static string ExplicitVersionPattern;
    private static string InformalVersionPattern;
    public static bool TryGetMajorVersionPattern(string qunitSourceFile, String& qunitVersion);
    private static bool TryGetMajorVersionWithPattern(string pattern, string qunitSourceFile, String& qunitMajorVersion);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.UnitTestProvider.JavaScript.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string BrowsersRelativeLocationSettingDescription { get; }
    public static string CommandLineArgumentsSettingDescription { get; }
    public static string CommonSettingsForAllJavaScriptUnitTestProvidersSettingDescription { get; }
    public static string CustomTestHarnessFilenameSettingDescription { get; }
    public static string JasmineVersionSettingDescription { get; }
    public static string PathToPhantomJSSettingDescription { get; }
    public static string PathToWebBrowserToRunTestsInSettingDescription { get; }
    public static string PhantomJSRelativeLocationSettingDescription { get; }
    public static string QUnitVersionSettingDescription { get; }
    public static string TestHarnessRelativeLocationSettingDescription { get; }
    public static string UseCustomTestHarnessToRunJavaScriptTestsSettingDescription { get; }
    public static string WebBrowserIdentifierToRunTestsInSettingDescription { get; }
    public static string WhereToRunJavaScriptTestsSettingDescription { get; }
    public static string Enable__Support_BoolOption_Text { get; }
    public static string EnableCustomHTML_harness_Text { get; }
    public static string CopyDefaultImplementationToClipboard_Button_Text { get; }
    public static string TestHarnessPath_RelativeFilePathChooserOption_Text { get; }
    public static string TestHarnessPath_RelativeFilePathChooserOption_ToolTip { get; }
    public static string _Version_Text { get; }
    public static string RunTestsWith_Header_Text { get; }
    public static string ChooseRuntime_Text_Text { get; }
    public static string WebBrowser_SingleRadioOption_Text { get; }
    public static string PhantomJS_SingleRadioOption_Text { get; }
    public static string CommandLineArguments_Text_Text { get; }
    public static string AdditionalCommandLineArgumentsPassed_StringOption_ToolTip { get; }
    public static string PathToBrowserExecutable_RelativeFilePathChooserOption_Text { get; }
    public static string PathToCustomBrowserExecutable_RelativeFilePathChooserOption_ToolTip { get; }
    public static string PathToPhantomJSExecutable_RelativeFilePathChooserOption_Text { get; }
    public static string PathToPhantomJSExecutable_RelativeFilePathChooserOption_ToolTip { get; }
    public static string ChooseBrowser_IconComboBoxOption_Text { get; }
    public static string ChooseBrowser_IconComboBoxOption_ToolTip { get; }
    public static string WebPages_Files_Filter_Text { get; }
    public static string ExecutableFiles_Files_Filter_Text { get; }
    public static string UnableToFindPhantomJsExecutable__Text { get; }
    public static string Empty_Text { get; }
    public static string UnableToFindBrowserExecutable__Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_BrowsersRelativeLocationSettingDescription();
    public static string get_CommandLineArgumentsSettingDescription();
    public static string get_CommonSettingsForAllJavaScriptUnitTestProvidersSettingDescription();
    public static string get_CustomTestHarnessFilenameSettingDescription();
    public static string get_JasmineVersionSettingDescription();
    public static string get_PathToPhantomJSSettingDescription();
    public static string get_PathToWebBrowserToRunTestsInSettingDescription();
    public static string get_PhantomJSRelativeLocationSettingDescription();
    public static string get_QUnitVersionSettingDescription();
    public static string get_TestHarnessRelativeLocationSettingDescription();
    public static string get_UseCustomTestHarnessToRunJavaScriptTestsSettingDescription();
    public static string get_WebBrowserIdentifierToRunTestsInSettingDescription();
    public static string get_WhereToRunJavaScriptTestsSettingDescription();
    public static string get_Enable__Support_BoolOption_Text();
    public static string get_EnableCustomHTML_harness_Text();
    public static string get_CopyDefaultImplementationToClipboard_Button_Text();
    public static string get_TestHarnessPath_RelativeFilePathChooserOption_Text();
    public static string get_TestHarnessPath_RelativeFilePathChooserOption_ToolTip();
    public static string get__Version_Text();
    public static string get_RunTestsWith_Header_Text();
    public static string get_ChooseRuntime_Text_Text();
    public static string get_WebBrowser_SingleRadioOption_Text();
    public static string get_PhantomJS_SingleRadioOption_Text();
    public static string get_CommandLineArguments_Text_Text();
    public static string get_AdditionalCommandLineArgumentsPassed_StringOption_ToolTip();
    public static string get_PathToBrowserExecutable_RelativeFilePathChooserOption_Text();
    public static string get_PathToCustomBrowserExecutable_RelativeFilePathChooserOption_ToolTip();
    public static string get_PathToPhantomJSExecutable_RelativeFilePathChooserOption_Text();
    public static string get_PathToPhantomJSExecutable_RelativeFilePathChooserOption_ToolTip();
    public static string get_ChooseBrowser_IconComboBoxOption_Text();
    public static string get_ChooseBrowser_IconComboBoxOption_ToolTip();
    public static string get_WebPages_Files_Filter_Text();
    public static string get_ExecutableFiles_Files_Filter_Text();
    public static string get_UnableToFindPhantomJsExecutable__Text();
    public static string get_Empty_Text();
    public static string get_UnableToFindBrowserExecutable__Text();
}
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.Resources.UnitTestingJavaScriptThemedIcons : object {
}
public abstract class JetBrains.ReSharper.UnitTestProvider.JavaScript.TestFrameworkElementSourceBase`1 : object {
    [NotNullAttribute]
private TTestFramework myTestFramework;
    public IUnitTestProvider Provider { get; }
    protected TestFrameworkElementSourceBase`1(TTestFramework testFramework);
    public sealed virtual IUnitTestProvider get_Provider();
    public sealed virtual void ProcessFile(IFile psiFile, IUnitTestElementObserverOnFile observer, Func`1<bool> interrupted);
}
public enum JetBrains.ReSharper.UnitTestProvider.JavaScript.TypeScript.TsProjectFileOut : Enum {
    public int value__;
    public static TsProjectFileOut Single;
    public static TsProjectFileOut Bundled;
    public static TsProjectFileOut Guessed;
}
public static class JetBrains.ReSharper.UnitTestProvider.JavaScript.TypeScript.TsProjectFileUtils : object {
    public static TsProjectFileOut TryGetOutputFilePath(ITsProjectPropertiesProvider tsProjectPropertiesProvider, IProjectFile tsProjectFile, IProject project, ILogger logger, VirtualFileSystemPath& jsFilePath);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
