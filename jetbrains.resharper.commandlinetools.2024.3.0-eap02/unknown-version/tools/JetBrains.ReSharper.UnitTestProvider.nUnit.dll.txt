[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestProvider.nUnit.Common.Extensions.ClrTypeNameExtensions : object {
    [ExtensionAttribute]
public static string GetNUnitNamespace(IClrTypeName typeName);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.UnitTestProvider.nUnit.Common.Extensions.ProjectExtensions : object {
    private static AssemblyNameInfo ourNUnitReferenceName;
    private static AssemblyNameInfo ourNUnitReferenceName2;
    private static ProjectExtensions();
    [ExtensionAttribute]
public static bool ReferencesNUnit2X(IProject project, TargetFrameworkId targetFrameworkId);
    [ExtensionAttribute]
public static bool ReferencesNUnit3X(IProject project, TargetFrameworkId targetFrameworkId);
    private static bool ReferencesNUnitFramework(IProject project, TargetFrameworkId targetFrameworkId, Func`2<AssemblyNameInfo, bool> checker);
    private static bool IsReferencing(IProject project, TargetFrameworkId targetFrameworkId, AssemblyNameInfo referenceName, Func`2<AssemblyNameInfo, bool> checker);
}
internal interface JetBrains.ReSharper.UnitTestProvider.nUnit.Common.INUnitArgsPresenterFromMetadata {
    [NotNullAttribute]
public abstract virtual string GetDisplayString(MetadataAttributeValue attrValue, IMetadataType parameterType);
}
internal interface JetBrains.ReSharper.UnitTestProvider.nUnit.Common.INUnitArgsPresenterFromPsi {
    [NotNullAttribute]
public abstract virtual string GetDisplayString(AttributeValue attrValue, IType parameterType);
}
public interface JetBrains.ReSharper.UnitTestProvider.nUnit.Common.INUnitFileExplorer {
}
public interface JetBrains.ReSharper.UnitTestProvider.nUnit.Common.INUnitFileExplorerFactory {
}
public interface JetBrains.ReSharper.UnitTestProvider.nUnit.Common.INUnitMetadataExplorer {
    public abstract virtual void ExploreAssembly(IMetadataAssembly assembly, CancellationToken token);
}
internal interface JetBrains.ReSharper.UnitTestProvider.nUnit.Common.INUnitMetadataExplorerFactory {
    [NotNullAttribute]
public abstract virtual INUnitMetadataExplorer GetExplorer(NUnitElementFactory factory, IUnitTestAttributeChecker checker, IUnitTestElementObserver observer, INUnitTypeOrValuePresenterFactory presenterFactory);
}
public interface JetBrains.ReSharper.UnitTestProvider.nUnit.Common.INUnitTypeOrValuePresenter {
    public abstract virtual string ValueRepresentation(AttributeValue value, bool escape, bool isFixtureParameter);
    public abstract virtual string ValueRepresentation(AttributeValue value, int i, IList`1<IParameter> parameters, bool escape);
    public abstract virtual string ValueRepresentation(MetadataAttributeValue value, int i, IMetadataParameter[] parameters, bool escape);
    public abstract virtual string ValueRepresentation(object value, bool escape, bool isFixtureParameter, IMetadataType type);
    public abstract virtual string ValueRepresentation(MetadataAttributeValue attributeValue, bool escape, bool isFixtureParameter);
    public abstract virtual string TypeRepresentation(IMetadataType type);
    public abstract virtual string TypeRepresentation(IType type);
}
public interface JetBrains.ReSharper.UnitTestProvider.nUnit.Common.INUnitTypeOrValuePresenterFactory {
    [NotNullAttribute]
public abstract virtual INUnitTypeOrValuePresenter GetPresenter(IUnitTestElementSource source);
}
public interface JetBrains.ReSharper.UnitTestProvider.nUnit.Common.INUnitVersionDetector {
    [CanBeNullAttribute]
public abstract virtual Version GetVersion(IProject project, TargetFrameworkId targetFrameworkId);
}
internal abstract class JetBrains.ReSharper.UnitTestProvider.nUnit.Common.NUnitArgsPresenter : object {
    private static string THREE_DOTS;
    protected object TryConvertToTargetType(object arg, Type targetType);
    protected static string GetDisplayString(object arg);
    private static string EscapeSingleChar(char c);
    private static string EscapeCharInString(char c);
    private static string EscapeControlChar(char c);
    protected static bool IsUInt64(object value);
    protected static ulong ToUInt64(object value);
}
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.Common.NUnitArgsPresenterFromMetadata : NUnitArgsPresenter {
    public sealed virtual string GetDisplayString(MetadataAttributeValue attrValue, IMetadataType parameterType);
    private static IMetadataType InferExpectedType(MetadataAttributeValue attrValue, IMetadataType parameterType);
    private static string TypeValuePresentation(IMetadataType value);
    private static string EnumValuePresentation(object value, IMetadataTypeInfo type);
    private static string FlagsValuePresentation(ulong value, IMetadataTypeInfo type);
    protected virtual Type ConvertToSystemType(IMetadataType type);
}
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.Common.NUnitArgsPresenterFromPsi : NUnitArgsPresenter {
    public sealed virtual string GetDisplayString(AttributeValue attrValue, IType parameterType);
    private static IType InferExpectedType(AttributeValue attrValue, IType parameterType);
    private string TypeValuePresentation(IType typeValue);
    private static string EnumValuePresentation(object value, IEnum enum);
    private static string FlagsValuePresentation(ulong value, IEnum enum);
    protected virtual Type ConvertToSystemType(IType type);
    private static void BuildTypeArgumentList(ITypeElement element, ISubstitution substitution, StringBuilder builder, string startSymbol, string endSymbol, Func`2<IType, string> typePresenter);
}
internal abstract class JetBrains.ReSharper.UnitTestProvider.nUnit.Common.NUnitFileExplorer : UnitTestElementRecursivePsiProcessor {
    private NUnitElementFactory myFactory;
    private IUnitTestElementObserverOnFile myObserver;
    private INUnitTypeOrValuePresenter myPresenter;
    private Dictionary`2<ITypeElement, Lazy`1<IUnitTestLikeElement>> myElementsByTypeElement;
    [CompilerGeneratedAttribute]
private IUnitTestAttributeChecker <AttributeChecker>k__BackingField;
    protected IUnitTestAttributeChecker AttributeChecker { get; }
    protected NUnitFileExplorer(IUnitTestAttributeChecker attributeChecker, IUnitTestElementObserverOnFile observer, INUnitTypeOrValuePresenterFactory presenterFactory, Func`1<bool> interrupted);
    [CompilerGeneratedAttribute]
protected IUnitTestAttributeChecker get_AttributeChecker();
    public virtual void ProcessBeforeInterior(ITreeNode element);
    private Lazy`1<IUnitTestLikeElement> ExploreType(ITypeElement typeElement);
    [NotNullAttribute]
private NUnitAbstractFixtureElement CreateAbstractFixture(ITypeElement typeElement);
    private NUnitFixtureElementBase GetOrCreateSetUpFixture(IClrTypeName clrTypeName);
    private NUnitFixtureElementBase CreateTestFixtureSource(ITypeElement typeElement, IJetSet`1<UnitTestElementCategory> fixtureCategories);
    private NUnitFixtureElementBase GetOrCreateFixture(ITypeElement typeElement);
    private NUnitFixtureElementBase CreateTestFixtureFromAttributes(ITypeElement typeElement, IList`1<IAttributeInstance> attrs);
    private NUnitFixtureElementBase CreateTestFixtureIfTypeHasTestMethods(ITypeElement typeElement);
    [NotNullAttribute]
private NUnitFixtureElementBase CreateFixtureFrom(ITypeElement typeElement, FixtureFactory factory);
    protected virtual string GetVariantDisplayName(ITypeElement typeElement, IAttributeInstance attr);
    [CanBeNullAttribute]
protected string TryGetTestNamePropertyFrom(IAttributeInstance attr);
    [NotNullAttribute]
protected string GetDisplayNameFromArgumentsOf(ITypeElement typeElement, IAttributeInstance attr);
    [CanBeNullAttribute]
private String[] TryGetTypeArgsFromTypeArgsProperty(IAttributeInstance attr);
    [CanBeNullAttribute]
private String[] TryGetTypeArgsFromPositionalArguments(AttributeValue[]& values);
    [NotNullAttribute]
private String[] TryGetTypeArgsInferred(ITypeElement typeElement, AttributeValue[] values);
    private IEnumerable`1<AttributeValue> GetArgumentsFromCtorOf(IAttributeInstance attr);
    private string GetTypeDisplayName(ITypeElement typeElement);
    private AttributeKind GetFirstReflectedAttributes(ITypeElement type, IList`1& attrs);
    private IUnitTestLikeElement ExploreMethod(IMethod method);
    private IUnitTestLikeElement CreateRealOrAbstractElement(IUnitTestLikeElement fixture, IMethod method);
    private IUnitTestLikeElement CreateElementIn(NUnitFixtureElementBase fixture, IMethod method);
    private string GetRowDisplayName(IMethod method, IAttributeInstance attr);
    [NotNullAttribute]
private IEnumerable`1<string> TryGetRowDataFromParameterDataSources(IMethod method);
    private bool TryGetAttributes(IAttributesOwner entity, IClrTypeName attrName, IList`1& attrs);
    [CanBeNullAttribute]
private JetHashSet`1<UnitTestElementCategory> CollectFixtureCategories(IDeclaredElement type, IList`1<IAttributeInstance> attrs);
    [CanBeNullAttribute]
private JetHashSet`1<UnitTestElementCategory> CollectCategoriesFromCategoryAttributesOn(IDeclaredElement declaredElement, JetHashSet`1<UnitTestElementCategory> categories);
    [CanBeNullAttribute]
private JetHashSet`1<UnitTestElementCategory> CollectCategoriesFromCategoryPropertyOf(IAttributeInstance attr, bool splitByComma);
    private void SetRunState(INUnitTestElement element, IAttributeInstance attribute);
    private RunState GetRunState(IAttributesSet member);
    private bool IsTestMethod(IMethod method);
    [CompilerGeneratedAttribute]
internal static IList`1<IAttributeInstance> <CreateTestFixtureFromAttributes>g__FilterDuplicateAttributes|14_0(IList`1<IAttributeInstance> attrs);
    [CompilerGeneratedAttribute]
private string <GetDisplayNameFromArgumentsOf>b__19_0(AttributeValue value);
    [CompilerGeneratedAttribute]
private StringBuilder <GetDisplayNameFromArgumentsOf>b__19_1(StringBuilder builder, AttributeValue value);
    [CompilerGeneratedAttribute]
private string <TryGetTypeArgsFromTypeArgsProperty>b__20_1(AttributeValue v);
    [CompilerGeneratedAttribute]
private string <TryGetTypeArgsFromPositionalArguments>b__21_1(AttributeValue x);
    [CompilerGeneratedAttribute]
private string <TryGetTypeArgsInferred>b__22_0(AttributeValue arg);
    [CompilerGeneratedAttribute]
internal static Nullable`1<AttributeKind> <GetFirstReflectedAttributes>g__TryFindAttributes|25_0(IAttributesOwner entity, IClrTypeName[] attributeTypes, AttributeKind attributeType, IList`1<IAttributeInstance> attrs);
}
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.Common.NUnitFileExplorerFactory : object {
    [NotNullAttribute]
private INUnitVersionDetector myNUnitVersionDetector;
    public NUnitFileExplorerFactory(INUnitVersionDetector nUnitVersionDetector);
    public INUnitFileExplorer GetExplorer(IUnitTestAttributeChecker attributeChecker, IUnitTestElementObserverOnFile observer, INUnitTypeOrValuePresenterFactory presenterFactory, Func`1<bool> interrupted);
}
internal abstract class JetBrains.ReSharper.UnitTestProvider.nUnit.Common.NUnitMetadataExplorer : object {
    private NUnitElementFactory myFactory;
    private IUnitTestAttributeChecker myChecker;
    private IUnitTestElementObserver myObserver;
    private ReflectionTypeNameCache myTypeNameCache;
    private INUnitTypeOrValuePresenter myPresenter;
    private Dictionary`2<IMetadataTypeInfo, NUnitFixtureElementBase> myFixtures;
    protected NUnitMetadataExplorer(NUnitElementFactory factory, IUnitTestAttributeChecker checker, IUnitTestElementObserver observer, INUnitTypeOrValuePresenterFactory presenterFactory);
    public sealed virtual void ExploreAssembly(IMetadataAssembly assembly, CancellationToken ct);
    private NUnitFixtureElementBase GetOrCreateFixture(IMetadataTypeInfo type);
    [CanBeNullAttribute]
private NUnitFixtureElementBase ExploreType(IMetadataTypeInfo type);
    private NUnitFixtureElementBase GetOrCreateSetUpFixture(IClrTypeName clrTypeName);
    [NotNullAttribute]
private NUnitFixtureElementBase CreateTestFixtureSource(IMetadataTypeInfo type, IJetSet`1<UnitTestElementCategory> fixtureCategories);
    private string GetTypeDisplayName(IMetadataTypeInfo type);
    protected virtual string GetVariantDisplayName(IMetadataTypeInfo type, IMetadataCustomAttribute attr);
    [CanBeNullAttribute]
protected string TryGetTestNamePropertyFrom(IMetadataCustomAttribute attr);
    [NotNullAttribute]
protected string GetDisplayNameFromArgumentsOf(IMetadataTypeInfo type, IMetadataCustomAttribute attr);
    [CanBeNullAttribute]
private String[] TryGetTypeArgsFromTypeArgsProperty(IMetadataCustomAttribute attr);
    [CanBeNullAttribute]
private String[] TryGetTypeArgsFromPositionalArguments(MetadataAttributeValue[]& values);
    [NotNullAttribute]
private String[] TryGetTypeArgsInferred(IMetadataTypeInfo type, MetadataAttributeValue[] values);
    [NotNullAttribute]
private NUnitFixtureElementBase CreateTestFixtureFromAttributes(IMetadataTypeInfo type, IList`1<IMetadataCustomAttribute> attrs);
    [CanBeNullAttribute]
private NUnitFixtureElementBase CreateTestFixtureIfTypeHasTestMethods(IMetadataTypeInfo type);
    [NotNullAttribute]
private NUnitFixtureElementBase CreateFixtureFrom(IMetadataTypeInfo type, FixtureFactory factory);
    private bool HasDerivedAttribute(IMetadataEntity entity, IClrTypeName[] attributeClrNames);
    private bool HasDerivedAttribute(IMetadataEntity entity, IClrTypeName attrOrInterfaceName, IClrTypeName[] exceptName);
    private IClrTypeName[] GetDerivedAttributes(IClrTypeName attrOrInterfaceName, IClrTypeName[] exceptName);
    [CanBeNullAttribute]
private JetHashSet`1<UnitTestElementCategory> CollectFixtureCategories(IMetadataTypeInfo type, IList`1<IMetadataCustomAttribute> attrs);
    [CanBeNullAttribute]
private JetHashSet`1<UnitTestElementCategory> CollectCategoriesFromCategoryAttributesOn(IMetadataEntity entity, JetHashSet`1<UnitTestElementCategory> categories);
    [CanBeNullAttribute]
private IJetSet`1<UnitTestElementCategory> CollectCategoriesFromCategoryPropertyOf(IMetadataCustomAttribute attr, bool splitByComma);
    private AttributeKind GetFirstReflectedAttributes(IMetadataTypeInfo type, IList`1& attrs);
    private bool TryGetAttributes(IMetadataEntity entity, IClrTypeName baseAttr, IList`1& attrs);
    private static RunState GetRunState(IMetadataEntity entity);
    private void SetRunState(INUnitTestElement element, IMetadataCustomAttribute attribute);
    [CanBeNullAttribute]
private NUnitFixtureElementBase CreateTestMethods(IMetadataTypeInfo type, Func`1<NUnitFixtureElementBase> fixtureFactory);
    [NotNullAttribute]
private IEnumerable`1<string> TryGetRowDataFromParameterDataSources(IMetadataMethod method);
    private string GetRowDisplayName(IMetadataMethod method, IMetadataCustomAttribute attr);
    private static MetadataAttributeValue[] GetArgumentsFromCtorOf(IMetadataCustomAttribute attr);
    private List`1<IMetadataMethod> GetAllTestMethods(IMetadataTypeInfo type);
    private bool IsTestMethod(IMetadataMethod method);
    [CompilerGeneratedAttribute]
private string <GetDisplayNameFromArgumentsOf>b__15_0(MetadataAttributeValue value);
    [CompilerGeneratedAttribute]
private StringBuilder <GetDisplayNameFromArgumentsOf>b__15_1(StringBuilder builder, MetadataAttributeValue value);
    [CompilerGeneratedAttribute]
private string <TryGetTypeArgsFromTypeArgsProperty>b__16_1(MetadataAttributeValue v);
    [CompilerGeneratedAttribute]
private string <TryGetTypeArgsFromPositionalArguments>b__17_1(MetadataAttributeValue x);
    [CompilerGeneratedAttribute]
private string <TryGetTypeArgsInferred>b__18_0(MetadataAttributeValue arg);
    [CompilerGeneratedAttribute]
internal static IList`1<IMetadataCustomAttribute> <CreateTestFixtureFromAttributes>g__FilterDuplicateAttributes|19_0(IList`1<IMetadataCustomAttribute> attrs);
    [CompilerGeneratedAttribute]
internal static Nullable`1<AttributeKind> <GetFirstReflectedAttributes>g__TryFindAttributes|28_0(IMetadataEntity entity, IClrTypeName[] attributeTypes, AttributeKind attributeType, IList`1<IMetadataCustomAttribute> attrs);
}
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.Common.NUnitMetadataExplorerFactory : object {
    private INUnitVersionDetector myNUnitVersionDetector;
    [NotNullAttribute]
private ILogger myLogger;
    public NUnitMetadataExplorerFactory(INUnitVersionDetector nUnitVersionDetector, ILogger logger);
    public sealed virtual INUnitMetadataExplorer GetExplorer(NUnitElementFactory factory, IUnitTestAttributeChecker checker, IUnitTestElementObserver observer, INUnitTypeOrValuePresenterFactory presenterFactory);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.Common.NUnitTypeOrValuePresenterFactory : object {
    private INUnitVersionDetector myNUnitVersionDetector;
    public NUnitTypeOrValuePresenterFactory(INUnitVersionDetector nUnitVersionDetector);
    public sealed virtual INUnitTypeOrValuePresenter GetPresenter(IUnitTestElementSource source);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.UnitTestProvider.nUnit.Common.NUnitValuesAndRangeHelper : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestProvider.nUnit.Common.NUnitValuesAndRangeHelper/<CreateRange>d__0`1")]
[ExtensionAttribute]
public static IEnumerable`1<Pair`2<string, T>> CreateRange(INUnitTypeOrValuePresenter presenter, IEnumerable`1<Pair`2<object, T>> positionParameters);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestProvider.nUnit.Common.NUnitValuesAndRangeHelper/<CreateRangeInt>d__1")]
[ExtensionAttribute]
private static IEnumerable`1<string> CreateRangeInt(INUnitTypeOrValuePresenter presenter, int from, int to, int step);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestProvider.nUnit.Common.NUnitValuesAndRangeHelper/<CreateRangeLong>d__2")]
[ExtensionAttribute]
private static IEnumerable`1<string> CreateRangeLong(INUnitTypeOrValuePresenter presenter, long from, long to, long step);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestProvider.nUnit.Common.NUnitValuesAndRangeHelper/<CreateRangeFloat>d__3")]
[ExtensionAttribute]
private static IEnumerable`1<string> CreateRangeFloat(INUnitTypeOrValuePresenter presenter, float from, float to, float step);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestProvider.nUnit.Common.NUnitValuesAndRangeHelper/<CreateRangeDouble>d__4")]
[ExtensionAttribute]
private static IEnumerable`1<string> CreateRangeDouble(INUnitTypeOrValuePresenter presenter, double from, double to, double step);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestProvider.nUnit.Common.NUnitValuesAndRangeHelper/<CreateRangeDecimal>d__5")]
[ExtensionAttribute]
private static IEnumerable`1<string> CreateRangeDecimal(INUnitTypeOrValuePresenter presenter, decimal from, decimal to, decimal step);
    public static IEnumerable`1<Pair`2<string, T[]>> GetSequential(List`1[] values);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestProvider.nUnit.Common.NUnitValuesAndRangeHelper/<GetCombinatorial>d__7`1")]
public static IEnumerable`1<Pair`2<string, T[]>> GetCombinatorial(List`1[] values);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.Common.NUnitVersionDetector : object {
    [NotNullAttribute]
private static AssemblyNameInfo ourNUnitReferenceName;
    [NotNullAttribute]
private ProjectContext myProjectContext;
    public NUnitVersionDetector(ProjectContext projectContext);
    private static NUnitVersionDetector();
    public Version GetVersion(IProject project);
    public sealed virtual Version GetVersion(IProject project, TargetFrameworkId targetFrameworkId);
    private Version GetVersionCore(IProject project, TargetFrameworkId targetFrameworkId);
}
[UnitTestElementsTransformationRuleAttribute("16")]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.Common.Rules.EnsureAncestorsAddedToExecutedElementsRule : object {
    public sealed virtual IUnitTestElementCriterion Apply(IUnitTestElementCriterion criterion, IUnitTestSession session, IHostProvider hostProvider);
    public sealed virtual void Apply(ISet`1<IUnitTestElement> elements, IUnitTestSession session, IHostProvider hostProvider);
}
[LocalizableAttribute("False")]
[ShellComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.Common.TestLinker.NUnitTestFixtureAttributeSubjectExtractor : object {
    public IClrTypeName AttributeName { get; }
    public string Query { get; }
    public sealed virtual IClrTypeName get_AttributeName();
    public sealed virtual string get_Query();
    public sealed virtual IEnumerable`1<ITypeElement> TryGetSubjects(IList`1<IAttributeInstance> attributes);
    public ITypeElement TryGetSubject(IAttributeInstance attribute);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.Common.TestLinker.ZoneMarker : object {
}
public class JetBrains.ReSharper.UnitTestProvider.nUnit.FileExplorer.NUnitFileExplorerInheritorsConsumer : object {
    private HashSet`1<ITypeElement> myFoundElements;
    private Nullable`1<int> myLimit;
    public IEnumerable`1<ITypeElement> FoundElements { get; }
    public NUnitFileExplorerInheritorsConsumer(int limit);
    public IEnumerable`1<ITypeElement> get_FoundElements();
    public sealed virtual ITypeElement Build(FindResult result);
    public sealed virtual FindExecution Merge(ITypeElement data);
}
[AssemblyToAssemblyReferencesResolverAttribute("50", "16")]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.NUnitFrameworkAssemblyResolver : object {
    private static string NunitFramework;
    private IAssemblyCollection myAssemblyCollection;
    public NUnitFrameworkAssemblyResolver(IAssemblyCollection assemblyCollection);
    public sealed virtual IEnumerable`1<VirtualFileSystemPath> ResolveReference(ICollection`1<VirtualFileSystemPath> sourceAssemblyFile, AssemblyNameInfo referenceName);
}
[OptionsPageAttribute("nUnit", "NUnit", "JetBrains.ReSharper.UnitTestProvider.nUnit.Resources.UnitTestingNunitThemedIcons/Nunit")]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.NUnitPage : CustomSimpleOptionsPage {
    private NunitCustomInstallationViewModel myNunitCustomInstallationViewModel;
    public NUnitPage(Lifetime lifetime, IThreading threading, OptionsSettingsSmartContext smartContext, CustomNUnitChecker customNUnitChecker, OptionsPageContext pageContext, IconHostBase iconHost, IShellLocks locks, ICommonFileDialogs commonFileDialogs, ProductConfigurations productConfigurations, ISolution solution, NUnitTestProvider v26provider, NUnitTestProvider v30provider);
    private BeControl TestParameters(Lifetime lifetime, IThreading threading, OptionsSettingsSmartContext smartContext, OptionsPageContext pageContext, IconHostBase iconHost, IShellLocks locks);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_20(PropertyChangedEventArgs`1<FileSystemPath> args);
}
[SettingsKeyAttribute("JetBrains.ReSharper.UnitTestFramework.Settings.UnitTestingSettings", "JetBrains.ReSharper.UnitTestProvider.nUnit.Resources.Strings", "SettingsForNUnitUnitTestProviderSettingDescription")]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.NUnitProviderSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestProvider.nUnit.Resources.Strings", "UseCustomNUnitInstallationSettingDescription")]
public bool UseCustomNUnit;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestProvider.nUnit.Resources.Strings", "PathToCustomNUnitInstallationSettingDescription")]
public string CustomNUnitFolder;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestProvider.nUnit.Resources.Strings", "NUnitAddinUsagePolicySettingDescription")]
public UseAddins UseAddins;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestProvider.nUnit.Resources.Strings", "CheckBinFolderForAddinsSettingDescription")]
public bool CheckBinFolderForAddins;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestProvider.nUnit.Resources.Strings", "CheckBinAddinsFolderForAddinsSettingDescription")]
public bool CheckBinAddinsFolderForAddins;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestProvider.nUnit.Resources.Strings", "AdditionalParametersAvailableThroughTestContextParametersSettingDescription")]
public string TestParameters;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestProvider.nUnit.Resources.Strings", "DiscoveryMethodForDiscoveryTestsFromArtifactsSettingDescription")]
public DiscoveryMethod TestDiscoveryFromArtifactsMethod;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestProvider.nUnit.Resources.Strings", "PrefilterTypesAndMethodsWhenDiscoveringTestsInTestRunnerSettingDescription")]
public bool PreFilter;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestProvider.nUnit.NUnitProviderSettingsExtensions : object {
    [ExtensionAttribute]
public static UseAddins UseAddins(NUnitProviderSettings settings);
}
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.NUnitSetupFixtureVault`2 : object {
    [NotNullAttribute]
private IDictionary`2<Key<TSetupFixture, TFixture>, Trie`2<TSetupFixture, TFixture, string, Int32`1<IUnitTestElement>>> myStores;
    [NotNullAttribute]
private Lazy`1<IUnitTestElementCriterion> myIsOurElementTypeCriterion;
    [NotNullAttribute]
private ILogger myLogger;
    [CompilerGeneratedAttribute]
private Task <Task>k__BackingField;
    public bool IsEmpty { get; }
    public Task Task { get; }
    public NUnitSetupFixtureVault`2(Lifetime lifetime, IShellLocks shellLocks, IWaitForCachesTask waitForCachesTask, IUnitTestElementRepository repository);
    public bool get_IsEmpty();
    [CompilerGeneratedAttribute]
public sealed virtual Task get_Task();
    private IUnitTestElementCriterion GetOurElementTypesCriterion();
    private void BuildTries(IUnitTestElementRepository repository);
    private void OnElementCreating(UnitTestPersistenceEvent evt);
    public void AddSetupFixtureToTrie(TSetupFixture fixture, IUnitTestTransaction tx);
    private void OnElementUpdating(UnitTestElementUpdatingEvent evt);
    private void OnElementDeleting(UnitTestPersistenceEvent evt);
    public void RemoveSetUpFixture(TSetupFixture setupFixture);
    private void OnElementsCleared(UnitTestElementsRemovedEvent obj);
    public void Clear();
    [CanBeNullAttribute]
public UnitTestElement FindSetUpFixtureFor(FromClass fixture, IUnitTestTransaction tx);
    [CompilerGeneratedAttribute]
internal static IUnitTestElementCriterion <GetOurElementTypesCriterion>g__TypeOf|9_0();
}
[SolutionSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.NUnitTestProviderSettingsUpgrader : UnitTestProviderSettingsUpgraderBase {
    protected internal string SectionName { get; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public string NUnitInstallDir { get; public set; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool UseSpecifiedNUnit { get; public set; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public UseAddins UseAddins { get; public set; }
    protected internal virtual string get_SectionName();
    public virtual string get_NUnitInstallDir();
    public virtual void set_NUnitInstallDir(string value);
    private static string SuggestNUnitInstallation();
    public virtual bool get_UseSpecifiedNUnit();
    public virtual void set_UseSpecifiedNUnit(bool value);
    public UseAddins get_UseAddins();
    public void set_UseAddins(UseAddins value);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.PreFilterRunSettingsPostProcessor : object {
    [NotNullAttribute]
private INUnitVersionDetector myNUnitVersionDetector;
    [NotNullAttribute]
private IContextBoundSettingsStore myContextBoundSettingsStore;
    public PreFilterRunSettingsPostProcessor(Lifetime lifetime, INUnitVersionDetector nUnitVersionDetector, ISettingsStore settingsStore);
    public sealed virtual void ProcessRunSettings(IUnitTestRun run, XmlDocument runSettings);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.UnitTestProvider.nUnit.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string AdditionalParametersAvailableThroughTestContextParametersSettingDescription { get; }
    public static string DiscoveryMethodForDiscoveryTestsFromArtifactsSettingDescription { get; }
    public static string NUnitAddinUsagePolicySettingDescription { get; }
    public static string NUnitOptionPageTitle { get; }
    public static string PathToCustomNUnitInstallationSettingDescription { get; }
    public static string PrefilterTypesAndMethodsWhenDiscoveringTestsInTestRunnerSettingDescription { get; }
    public static string SettingsForNUnitUnitTestProviderSettingDescription { get; }
    public static string UseCustomNUnitInstallationSettingDescription { get; }
    public static string _Enable_Support_BoolOption_Text { get; }
    public static string TestDiscovery_Header_Text { get; }
    public static string CustomNUnitInstallation_Header_Text { get; }
    public static string UseSpecifiedCustomNUnit_BoolOption_Text { get; }
    public static string UseSpecifiedCustomNUnit_BoolOption_ToolTip { get; }
    public static string NUnit2_Header_Text { get; }
    public static string LoadNUnitAddins_RadioOption_Caption { get; }
    public static string _Never_Text { get; }
    public static string _Always_Text { get; }
    public static string _IfRequired_Text { get; }
    public static string NUnit3_Header_Text { get; }
    public static string PrefilterTypesAndMethodsWhenDiscovering_BoolOption_Text { get; }
    public static string Add_ButtonWithListAction_ToolTip { get; }
    public static string Remove_Text { get; }
    public static string TestParameters_Text { get; }
    public static string TestParameter_Name_Column { get; }
    public static string TestParameters_Value_Column { get; }
    public static string CustomNUnitFolder_Caption { get; }
    public static string PutAddinsIn_TestRunnerAdaptersNUnit2_Text { get; }
    public static string CheckBinFolderForAddinsSettingDescription { get; }
    public static string CheckBinAddinsFolderForAddinsSettingDescription { get; }
    public static string CheckTestAssemblySFolderForAddins_Text { get; }
    public static string CheckAddinsFolderInsideTestAssembly_Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_AdditionalParametersAvailableThroughTestContextParametersSettingDescription();
    public static string get_DiscoveryMethodForDiscoveryTestsFromArtifactsSettingDescription();
    public static string get_NUnitAddinUsagePolicySettingDescription();
    public static string get_NUnitOptionPageTitle();
    public static string get_PathToCustomNUnitInstallationSettingDescription();
    public static string get_PrefilterTypesAndMethodsWhenDiscoveringTestsInTestRunnerSettingDescription();
    public static string get_SettingsForNUnitUnitTestProviderSettingDescription();
    public static string get_UseCustomNUnitInstallationSettingDescription();
    public static string get__Enable_Support_BoolOption_Text();
    public static string get_TestDiscovery_Header_Text();
    public static string get_CustomNUnitInstallation_Header_Text();
    public static string get_UseSpecifiedCustomNUnit_BoolOption_Text();
    public static string get_UseSpecifiedCustomNUnit_BoolOption_ToolTip();
    public static string get_NUnit2_Header_Text();
    public static string get_LoadNUnitAddins_RadioOption_Caption();
    public static string get__Never_Text();
    public static string get__Always_Text();
    public static string get__IfRequired_Text();
    public static string get_NUnit3_Header_Text();
    public static string get_PrefilterTypesAndMethodsWhenDiscovering_BoolOption_Text();
    public static string get_Add_ButtonWithListAction_ToolTip();
    public static string get_Remove_Text();
    public static string get_TestParameters_Text();
    public static string get_TestParameter_Name_Column();
    public static string get_TestParameters_Value_Column();
    public static string get_CustomNUnitFolder_Caption();
    public static string get_PutAddinsIn_TestRunnerAdaptersNUnit2_Text();
    public static string get_CheckBinFolderForAddinsSettingDescription();
    public static string get_CheckBinAddinsFolderForAddinsSettingDescription();
    public static string get_CheckTestAssemblySFolderForAddins_Text();
    public static string get_CheckAddinsFolderInsideTestAssembly_Text();
}
public class JetBrains.ReSharper.UnitTestProvider.nUnit.Resources.UnitTestingNunitThemedIcons : object {
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.TestParametersAddingRunSettingsPostProcessor : object {
    [NotNullAttribute]
private ISettingsStore mySettingsStore;
    public TestParametersAddingRunSettingsPostProcessor(ISettingsStore settingsStore);
    public sealed virtual void ProcessRunSettings(IUnitTestRun run, XmlDocument runSettings);
    private void AddOrUpdate(XmlElement paramsRoot, Dictionary`2<string, XmlElement> parametersByName, Tuple`2<string, string> tuple);
}
public class JetBrains.ReSharper.UnitTestProvider.nUnit.TestParametersModel : FromScalar`1<string, string, string> {
    public TestParametersModel(Lifetime lifetime, GroupingEventHosts hosts, OptionsSettingsSmartContext smartContext);
    public virtual Entry<string, string> GetNewEntry();
}
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.TextControlAssemblySomehowNeededByWpf : object {
    private Type type;
}
public interface JetBrains.ReSharper.UnitTestProvider.nUnit.v26.Elements.INUnit2TestElement {
}
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.Elements.NUnit2RowTestElement : Row {
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [PersistAttribute]
public string DisplayName { get; public set; }
    public string ShortName { get; }
    public string Kind { get; }
    public NUnit2RowTestElement(string testId, NUnit2TestElement parent);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    public virtual string get_ShortName();
    public virtual string get_Kind();
}
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.Elements.NUnit2SetUpFixtureElement : FromClass {
    public string Kind { get; }
    public NUnit2SetUpFixtureElement(IClrTypeName typeName);
    public virtual string get_Kind();
}
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.Elements.NUnit2TestElement : FromMethod`1<NUnit2TestFixtureElement> {
    public string Kind { get; }
    public NUnit2TestElement(string testId, NUnit2TestFixtureElement parent, string methodName, string declaredInTypeShortName);
    public virtual string get_Kind();
}
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.Elements.NUnit2TestFixtureElement : FromClass {
    public string Kind { get; }
    public NUnit2TestFixtureElement(IClrTypeName typeName, string displayName);
    public virtual string get_Kind();
    public virtual IDeclaredElement GetDeclaredElement();
}
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.Elements.NUnit2TestFromAbstractFixtureFakeElement : FakeUnitTestElement {
    [CanBeNullAttribute]
private IEnumerable`1<IUnitTestElement> mySubElements;
    [CompilerGeneratedAttribute]
private IClrTypeName <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [NotNullAttribute]
public IClrTypeName TypeName { get; }
    [NotNullAttribute]
public string MethodName { get; }
    public NUnit2TestFromAbstractFixtureFakeElement(IClrTypeName typeName, string methodName, IEnumerable`1<IUnitTestElement> subElements);
    [CompilerGeneratedAttribute]
public IClrTypeName get_TypeName();
    [CompilerGeneratedAttribute]
public string get_MethodName();
    public virtual IReadOnlyCollection`1<IUnitTestElement> GetRelatedUnitTestElements();
    private ITypeElement GetDeclaredType();
}
internal static class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.Mappings.NUnitElementMapping : object {
    public static Key`1<NUnitElementFactory> FactoryKey;
    private static NUnitElementMapping();
}
internal abstract class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.Mappings.NUnitElementMapping`2 : object {
    protected NUnitElementFactory GetFactory(ITestRunnerContext ctx, IUnitTestElementObserver observer);
    public abstract virtual TTask ToRemoteTask(TElement element, ITestRunnerExecutionContext ctx);
    public abstract virtual TElement ToElement(TTask task, ITestRunnerDiscoveryContext ctx, IUnitTestElementObserver observer);
    private sealed virtual override RemoteTask JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.IUnitTestElementToRemoteTaskMapping<TElement>.GetRemoteTask(TElement element, ITestRunnerExecutionContext ctx);
    private sealed virtual override IUnitTestElement JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.IRemoteTaskToUnitTestElementMapping<TTask>.GetElement(TTask task, ITestRunnerDiscoveryContext ctx, IUnitTestElementObserver observer);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.Mappings.NUnitRowTestElementMapping : NUnitElementMapping`2<NUnit2RowTestElement, NUnitRowTestTask> {
    public virtual NUnitRowTestTask ToRemoteTask(NUnit2RowTestElement element, ITestRunnerExecutionContext ctx);
    public virtual NUnit2RowTestElement ToElement(NUnitRowTestTask task, ITestRunnerDiscoveryContext ctx, IUnitTestElementObserver observer);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.Mappings.NUnitSetUpFixtureElementMapping : NUnitElementMapping`2<NUnit2SetUpFixtureElement, NUnitSetUpFixtureTask> {
    public virtual NUnitSetUpFixtureTask ToRemoteTask(NUnit2SetUpFixtureElement element, ITestRunnerExecutionContext ctx);
    public virtual NUnit2SetUpFixtureElement ToElement(NUnitSetUpFixtureTask task, ITestRunnerDiscoveryContext ctx, IUnitTestElementObserver observer);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.Mappings.NUnitTestElementMapping : NUnitElementMapping`2<NUnit2TestElement, NUnitTestTask> {
    public virtual NUnitTestTask ToRemoteTask(NUnit2TestElement element, ITestRunnerExecutionContext ctx);
    public virtual NUnit2TestElement ToElement(NUnitTestTask task, ITestRunnerDiscoveryContext ctx, IUnitTestElementObserver observer);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.Mappings.NUnitTestFixtureElementMapping : NUnitElementMapping`2<NUnit2TestFixtureElement, NUnitTestFixtureTask> {
    public virtual NUnitTestFixtureTask ToRemoteTask(NUnit2TestFixtureElement element, ITestRunnerExecutionContext ctx);
    public virtual NUnit2TestFixtureElement ToElement(NUnitTestFixtureTask task, ITestRunnerDiscoveryContext ctx, IUnitTestElementObserver observer);
}
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.NUnit26TypeOrValuePresenter : object {
    public sealed virtual string TypeRepresentation(IMetadataType type);
    public sealed virtual string ValueRepresentation(MetadataAttributeValue attributeValue, bool escape, bool isFixtureParameter);
    public sealed virtual string ValueRepresentation(object value, bool escape, bool isFixtureParameter, IMetadataType type);
    private static string TypeValueRepresentation(IMetadataType value);
    private static string EscapeControlChar(char c);
    public sealed virtual string ValueRepresentation(MetadataAttributeValue value, int i, IMetadataParameter[] parameters, bool escape);
    private static string EnumValueRepresentation(object value, IMetadataTypeInfo type);
    private static string FlagsValueRepresentation(ulong value, IMetadataTypeInfo type);
    public sealed virtual string ValueRepresentation(AttributeValue value, int i, IList`1<IParameter> parameters, bool escape);
    public sealed virtual string ValueRepresentation(AttributeValue value, bool escape, bool isFixtureParameter);
    private static string TypeValuePresentation(IType typeValue);
    private static string EnumValueRepresentation(object value, IEnum enum);
    private static string FlagsValueRepresentation(ulong value, IEnum enum);
    private static bool IsUInt64(object value);
    private static ulong ToUInt64(object value);
    public sealed virtual string TypeRepresentation(IType type);
    private static void BuildTypeArgumentList(ITypeElement element, ISubstitution substitution, StringBuilder builder, string startSymbol, string endSymbol, Func`2<IType, string> typePresenter);
}
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.NUnitElementFactory : object {
    [NotNullAttribute]
private IUnitTestElementObserver myObserver;
    [NotNullAttribute]
private JetHashSet`1<IUnitTestElement> myElements;
    public NUnitElementFactory(IUnitTestElementObserver observer);
    internal NUnit2TestFixtureElement GetOrCreateFixture(IClrTypeName typeName, string displayName, UnitTestElement parent, IJetSet`1<UnitTestElementCategory> categories);
    internal NUnit2TestElement GetOrCreateTest(string testId, NUnit2TestFixtureElement parent, string shortName, string declaredInTypeShortName, IJetSet`1<UnitTestElementCategory> categories);
    internal NUnit2RowTestElement GetOrCreateRowTest(string testId, NUnit2TestElement parent, IJetSet`1<UnitTestElementCategory> categories);
    internal NUnit2SetUpFixtureElement GetOrCreateSetUpFixture(IClrTypeName typeName, UnitTestElement parent);
    public NUnit2TestFromAbstractFixtureFakeElement CreateTestFromAbstractFixtureFakeElement(IClrTypeName clrTypeName, string shortName, IEnumerable`1<IUnitTestElement> subElements);
}
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.NUnitFileExplorer : object {
    private NUnitElementFactory myFactory;
    private IUnitTestElementObserverOnFile myObserver;
    private Func`1<bool> myInterrupted;
    private INUnitTypeOrValuePresenter myPresenter;
    private Dictionary`2<IDeclaredElement, List`1<NUnit2TestFixtureElement>> myFixtures;
    [CompilerGeneratedAttribute]
private IUnitTestAttributeChecker <AttributeChecker>k__BackingField;
    protected IProject Project { get; }
    protected TargetFrameworkId TargetFrameworkId { get; }
    protected IUnitTestAttributeChecker AttributeChecker { get; }
    public bool ProcessingIsFinished { get; }
    public NUnitFileExplorer(IUnitTestAttributeChecker attributeChecker, IUnitTestElementObserverOnFile observer, INUnitTypeOrValuePresenterFactory presenterFactory, Func`1<bool> interrupted);
    protected IProject get_Project();
    protected TargetFrameworkId get_TargetFrameworkId();
    [CompilerGeneratedAttribute]
protected IUnitTestAttributeChecker get_AttributeChecker();
    public sealed virtual bool InteriorShouldBeProcessed(ITreeNode element);
    public sealed virtual bool get_ProcessingIsFinished();
    public sealed virtual void ProcessBeforeInterior(ITreeNode element);
    private NUnit2TestFixtureElement ProcessMultipleTestFixture(ITypeElement typeElement, IList`1<IAttributeInstance> testFixtureAttributes, Boolean& isReallyMultiple);
    [CanBeNullAttribute]
private string GetFixtureVariant(ITypeElement typeElement, IAttributeInstance attribute);
    private void ProcessAbstractFixture(ITypeElement typeElement);
    private IList`1<IAttributeInstance> GetUniqueTestFixtureAttributeInstances(ITypeElement typeElement);
    private IUnitTestElement ProcessRegularFixture(ITypeElement typeElement, IAttributeInstance attr);
    private IJetSet`1<UnitTestElementCategory> CollectCategoriesFromAttributeProperty(IAttributeInstance attr, IJetSet`1<UnitTestElementCategory> alreadyKnown);
    private IJetSet`1<UnitTestElementCategory> CollectCategories(IDeclaredElement declaredElement);
    private List`1<IUnitTestElement> CreateTestElement(ITypeMember typeMember, IFunction declaration, NUnit2TestElement testElement, NUnit2TestFixtureElement fixtureElement);
    private IJetSet`1<UnitTestElementCategory> GetTestCaseCategories(IAttributeInstance attr);
    private static bool HasEmptyParamsArray(IAttributeInstance attributeInstance);
    private void AppendTests(NUnit2TestFixtureElement fixtureElement, ITypeElement derivedType);
    private string GetDerivedTestId(NUnit2TestFixtureElement fixtureElement, ITypeElement typeElement, IFunction member);
    public sealed virtual void ProcessAfterInterior(ITreeNode element);
    public static bool IsTestFixture(ITypeElement typeElement, Boolean& isAbstract, IUnitTestAttributeChecker attributeChecker, IProject project);
    public static bool IsTestMethod(ITypeMember element, IUnitTestAttributeChecker attributeChecker, IProject project);
    [CompilerGeneratedAttribute]
private StringBuilder <ProcessMultipleTestFixture>b__17_1(StringBuilder builder, AttributeValue value);
    [CompilerGeneratedAttribute]
private string <GetFixtureVariant>b__18_7(AttributeValue value);
    [CompilerGeneratedAttribute]
private string <GetFixtureVariant>b__18_9(AttributeValue value);
    [CompilerGeneratedAttribute]
private string <GetFixtureVariant>b__18_1(AttributeValue arg);
    [CompilerGeneratedAttribute]
private string <GetFixtureVariant>b__18_3(AttributeValue arg);
    [CompilerGeneratedAttribute]
private string <GetFixtureVariant>b__18_5(AttributeValue value);
    [CompilerGeneratedAttribute]
private StringBuilder <ProcessAbstractFixture>b__19_1(StringBuilder builder, AttributeValue value);
    [CompilerGeneratedAttribute]
internal static string <CreateTestElement>g__GetExplicitTestNameForRowTest|24_0(IAttributeInstance attr);
    [CompilerGeneratedAttribute]
private bool <AppendTests>b__27_0(IMethod method);
    [CompilerGeneratedAttribute]
private bool <GetDerivedTestId>b__28_0(IParameter p);
}
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.NUnitMetadataExplorer : object {
    private NUnitElementFactory myFactory;
    private IUnitTestAttributeChecker myChecker;
    private IUnitTestElementObserver myObserver;
    private ReflectionTypeNameCache myTypeNameCache;
    private List`1<IMetadataMethod> myTempMethods;
    private JetHashSet`1<string> myTempMethodsNames;
    private INUnitTypeOrValuePresenter myPresenter;
    public NUnitMetadataExplorer(NUnitElementFactory factory, IUnitTestAttributeChecker checker, IUnitTestElementObserver observer, INUnitTypeOrValuePresenterFactory presenterFactory);
    private NUnit2SetUpFixtureElement GetOrCreateSetUpFixture(IClrTypeName clrTypeName, UnitTestElement parent);
    private NUnit2TestFixtureElement GetOrCreateFixture(IClrTypeName clrName, string displayName, NUnit2TestFixtureElement parent, JetHashSet`1<UnitTestElementCategory> categories);
    private NUnit2RowTestElement GetOrCreateRowTest(string id, NUnit2TestElement testElement, JetHashSet`1<UnitTestElementCategory> categories);
    private NUnit2TestElement GetOrCreateTest(string testId, NUnit2TestFixtureElement fixture, string methodName, string declaredInTypeShortName, JetHashSet`1<UnitTestElementCategory> categories);
    private bool HasAttributeOrDerivedAttribute(IMetadataEntity entity, IClrTypeName[] attributeClrNames);
    private NUnit2TestFixtureElement GetParentFixture(IMetadataTypeInfo type, IDictionary`2<IMetadataTypeInfo, NUnit2TestFixtureElement> fixtures);
    private void ExploreType(IMetadataTypeInfo type, IMetadataAssembly assembly, IDictionary`2<IMetadataTypeInfo, NUnit2TestFixtureElement> fixtures, List`1<NUnit2SetUpFixtureElement> setUpFixtures, CancellationToken cancellationToken);
    public void ExploreAssembly(IMetadataAssembly assembly, CancellationToken cancellationToken);
    private bool IsSetUpFixture(IMetadataTypeInfo typeInfo);
    private bool HasTestFixtureAttribute(IMetadataTypeInfo typeInfo, IClrTypeName attribute);
    private bool IsTestMethod(IMetadataMethod method);
    private JetHashSet`1<UnitTestElementCategory> CollectCategories(IMetadataEntity entity, JetHashSet`1<UnitTestElementCategory> alreadyKnown);
    public static string ExtractCategoryFromAttributeName(string fullyQualifiedName);
    private void ExploreFixture(IMetadataAssembly assembly, IDictionary`2<IMetadataTypeInfo, NUnit2TestFixtureElement> fixtures, IMetadataTypeInfo type);
    private NUnit2TestFixtureElement DoCreateTestFixture(IMetadataTypeInfo type, IMetadataAssembly assembly, JetHashSet`1<UnitTestElementCategory> fixtureCategories, IDictionary`2<IMetadataTypeInfo, NUnit2TestFixtureElement> fixtures);
    private List`1<IMetadataCustomAttribute> GetAllTestFixtureAttributes(IMetadataTypeInfo type);
    private void CreateTestFixture(IMetadataTypeInfo type, Func`1<NUnit2TestFixtureElement> createFixture, JetHashSet`1<UnitTestElementCategory> fixtureCategories, Dictionary`2<IMetadataCustomAttribute, string> fixtureVariants);
    private void CreateTestMethods(IMetadataTypeInfo type, Func`1<NUnit2TestFixtureElement> createFixture);
    private static JetHashSet`1<UnitTestElementCategory> GetTestCaseCategories(IMetadataCustomAttribute attribute);
    private string GetBaseTypePrefix(NUnit2TestFixtureElement fixture, IMetadataMethod method, IClrTypeName typeName);
    private static bool IsSingleTestCaseAttribute(IList`1<IMetadataCustomAttribute> testCaseAttributes);
    private JetHashSet`1<UnitTestElementCategory> GetFixtureCategories(IMetadataTypeInfo type, List`1<IMetadataCustomAttribute> testFixtureAttributes);
    private List`1<IMetadataMethod> GetAllTestMethods(IMetadataTypeInfo type);
    [CompilerGeneratedAttribute]
internal static string <CreateTestMethods>g__GetExplicitTestNameForRowTest|25_0(IMetadataCustomAttribute attr);
    [CompilerGeneratedAttribute]
private string <CreateTestMethods>b__25_2(MetadataAttributeValue tp);
    [CompilerGeneratedAttribute]
private bool <GetBaseTypePrefix>b__27_0(IMetadataParameter p);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.NUnitServiceProvider : object {
    [CompilerGeneratedAttribute]
private IUnitTestProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private IPsiModules <PsiModules>k__BackingField;
    [CompilerGeneratedAttribute]
private ISymbolCache <SymbolCache>k__BackingField;
    private Lazy`1<NUnitTestRunnerRunStrategy> myUniversalRunner;
    public IUnitTestProvider Provider { get; }
    public IPsiModules PsiModules { get; }
    public ISymbolCache SymbolCache { get; }
    public NUnitServiceProvider(ISolution solution, IPsiModules psiModules, ISymbolCache symbolCache, NUnitTestProvider provider);
    [CompilerGeneratedAttribute]
public IUnitTestProvider get_Provider();
    [CompilerGeneratedAttribute]
public IPsiModules get_PsiModules();
    [CompilerGeneratedAttribute]
public ISymbolCache get_SymbolCache();
    public virtual IUnitTestRunStrategy GetRunStrategy(IUnitTestElement element);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.NUnitSetupFixtureVault : NUnitSetupFixtureVault`2<NUnit2SetUpFixtureElement, NUnit2TestFixtureElement> {
    public NUnitSetupFixtureVault(Lifetime lifetime, IShellLocks shellLocks, IWaitForCachesTask waitForCachesTask, IUnitTestElementRepository repository);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.NUnitTestExplorerFromArtifacts : Switching`1<NUnitProviderSettings> {
    public NUnitTestExplorerFromArtifacts(ISettingsStore settingsStore, NUnitTestExplorerFromMetadata metadataExplorer, NUnitTestExplorerFromTestRunner testRunnerExplorer);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.NUnitTestExplorerFromFile : object {
    [CompilerGeneratedAttribute]
private IUnitTestProvider <Provider>k__BackingField;
    private IUnitTestAttributeChecker myAttributeChecker;
    private INUnitTypeOrValuePresenterFactory myPresenterFactory;
    private ClrLanguagesKnown myClrLanguagesKnown;
    public IUnitTestProvider Provider { get; }
    public NUnitTestExplorerFromFile(NUnitServiceProvider serviceProvider, IUnitTestAttributeChecker attributeChecker, INUnitTypeOrValuePresenterFactory presenterFactory, ClrLanguagesKnown clrLanguagesKnown);
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestProvider get_Provider();
    public sealed virtual void ProcessFile(IFile psiFile, IUnitTestElementObserverOnFile observer, Func`1<bool> interrupted);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.NUnitTestExplorerFromMetadata : Metadata {
    private IUnitTestAttributeChecker myAttributeChecker;
    private INUnitTypeOrValuePresenterFactory myPresenterFactory;
    private ILogger myLogger;
    public NUnitTestExplorerFromMetadata(NUnitServiceProvider serviceProvider, IUnitTestAttributeChecker attributeChecker, AssemblyToAssemblyReferencesResolveManager resolveManager, NuGetInstalledPackageChecker installedPackageChecker, ResolveContextManager resolveContextManager, INUnitTypeOrValuePresenterFactory presenterFactory, ILogger logger);
    protected virtual void ProcessProject(MetadataLoader loader, IUnitTestElementObserver observer, CancellationToken token);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.NUnitTestExplorerFromTestRunner : TestRunner {
    public NUnitTestExplorerFromTestRunner(NUnitTestProvider provider, ITestRunnerAgentManager agentManager, NUnitTestRunnerOrchestrator adapter, NuGetInstalledPackageChecker installedPackageChecker);
}
[UnitTestProviderAttribute("16")]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.NUnitTestProvider : object {
    public static IClrTypeName TestFixtureAttribute;
    public static IClrTypeName SetUpFixtureAttribute;
    public static IClrTypeName TestAttribute;
    public static IClrTypeName TestCaseAttribute;
    public static IClrTypeName TestCaseSourceAttribute;
    public static IClrTypeName TheoryAttribute;
    public static IClrTypeName SequentialAttribute;
    public static IClrTypeName PairwiseAttribute;
    public static IClrTypeName ValuesAttribute;
    public static IClrTypeName ValueSourceAttribute;
    public static IClrTypeName RangeAttribute;
    public static IClrTypeName RandomAttribute;
    public static IClrTypeName CategoryAttribute;
    public static IClrTypeName IgnoreAttribute;
    public static IClrTypeName ExplicitAttribute;
    public static IClrTypeName DescriptionAttribute;
    public static IClrTypeName ParameterDataAttribute;
    public static IClrTypeName[] RandomAttributes;
    public string ID { get; }
    public string Name { get; }
    public IEnumerable`1<IClrTypeName> CategoryAttributes { get; }
    private static NUnitTestProvider();
    public sealed virtual string get_ID();
    public sealed virtual string get_Name();
    private bool IsUnitTest(IDeclaredElement element, IProject project);
    private bool IsUnitTestContainer(IDeclaredElement element, IProject project);
    private bool IsUnitTestStuff(IDeclaredElement declaredElement, TargetFrameworkId targetFrameworkId, IProject project, IProjectFile projectFile);
    public sealed virtual bool IsElementOfKind(IDeclaredElement declaredElement, UnitTestElementKind elementKind);
    public sealed virtual bool IsElementOfKind(IUnitTestElement element, UnitTestElementKind elementKind);
    public sealed virtual bool IsSupported(IHostProvider hostProvider, IProject project, TargetFrameworkId targetFrameworkId);
    public sealed virtual bool IsSupported(IProject project, TargetFrameworkId targetFrameworkId);
    public sealed virtual bool SupportsResultEventsForParentOf(IUnitTestElement element);
    public sealed virtual IUnitTestRunStrategy GetRunStrategy(IUnitTestElement element, IHostProvider hostProvider);
    public static bool ValidateNUnitPath(FileSystemPath path);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestProvider.nUnit.v26.NUnitTestProvider/<get_CategoryAttributes>d__33")]
public sealed virtual IEnumerable`1<IClrTypeName> get_CategoryAttributes();
    public sealed virtual void ContributeToSummary(IUnitTestElement element, IDeclaredElement declaredElement, XmlNode xmldoc);
    private static void ProcessAttributeWithDescriptionParameter(IClrTypeName attributeTypeName, XmlNode xmldoc, ITypeMember attrOwner, XmlNode summaryNode);
    private static XmlNode AppendParagraphToSummaryNode(XmlNode xmldoc, XmlNode summaryNode, string text);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.NUnitTestRunnerOrchestrator : object {
    [NotNullAttribute]
private Reader mySettingsReader;
    public Assembly InProcessAdapterAssembly { get; }
    public int Priority { get; }
    public NUnitTestRunnerOrchestrator(Reader settingsReader);
    public sealed virtual Assembly get_InProcessAdapterAssembly();
    public sealed virtual int get_Priority();
    public sealed virtual TestAdapterLoader GetTestAdapterLoader(ITestRunnerContext ctx);
    public sealed virtual TestContainer GetTestContainer(ITestRunnerContext ctx);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestProvider.nUnit.v26.NUnitTestRunnerOrchestrator/<GetMessageHandlers>d__8")]
public sealed virtual IEnumerable`1<IMessageHandlerMarker> GetMessageHandlers(ITestRunnerContext ctx);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.NUnitTestRunnerRunStrategy : TestRunnerRunStrategy {
    public NUnitTestRunnerRunStrategy(IDataCollectorFactory dataCollectorFactory, ITestRunnerAgentManager agentManager, NUnitTestRunnerOrchestrator adapter, IUnitTestProjectArtifactResolver artifactResolver);
}
public static class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.TestLinker.KnownPackages : object {
    [NotNullAttribute]
internal static VersionRange VersionRange;
    public static string TestFramework;
    public static string TestAdapter;
    public static string Sdk;
    private static KnownPackages();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.TestLinker.NUnitFrameworkAssemblyReferenceDescriptor : AssemblyReferenceDescriptor {
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.TestLinker.NUnitFrameworkNuGetReferenceDescriptor : AggregateDescriptor {
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.TestLinker.NUnitTestProjectScopeDescriptor : object {
    [CompilerGeneratedAttribute]
private IUnitTestProvider <Provider>k__BackingField;
    public IUnitTestProvider Provider { get; }
    public NUnitTestProjectScopeDescriptor(NUnitTestProvider provider);
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestProvider get_Provider();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.TestLinker.Templates.CSharp.CSharpNUnitTemplatesContributor : object {
    private string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestFileTemplate.TemplateResourceName { get; }
    private string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestLiveTemplate.TemplateResourceName { get; }
    private sealed virtual override string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestFileTemplate.get_TemplateResourceName();
    private sealed virtual override string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestLiveTemplate.get_TemplateResourceName();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.TestLinker.Templates.CSharp.ZoneMarker : object {
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.TestLinker.Templates.VB.VbNUnitTemplatesContributor : object {
    private string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestFileTemplate.TemplateResourceName { get; }
    private string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestLiveTemplate.TemplateResourceName { get; }
    private sealed virtual override string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestFileTemplate.get_TemplateResourceName();
    private sealed virtual override string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestLiveTemplate.get_TemplateResourceName();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.TestLinker.Templates.VB.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v26.TestLinker.ZoneMarker : object {
}
public interface JetBrains.ReSharper.UnitTestProvider.nUnit.v30.Elements.INUnitTestElement {
    [CanBeNullAttribute]
public INUnitTestElement Parent { get; }
    public RunState RunState { get; public set; }
    public abstract virtual INUnitTestElement get_Parent();
    public abstract virtual RunState get_RunState();
    public abstract virtual void set_RunState(RunState value);
}
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.Elements.NUnitAbstractFixtureElement : FakeUnitTestElement {
    [CompilerGeneratedAttribute]
private IClrTypeName <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [NotNullAttribute]
public IClrTypeName TypeName { get; }
    [NotNullAttribute]
public string DisplayName { get; }
    public NUnitAbstractFixtureElement(IClrTypeName typeName, string displayName);
    [CompilerGeneratedAttribute]
public IClrTypeName get_TypeName();
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    public virtual IReadOnlyCollection`1<IUnitTestElement> GetRelatedUnitTestElements();
    private ITypeElement GetDeclaredType();
}
public abstract class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.Elements.NUnitFixtureElementBase : FromClass {
    [CompilerGeneratedAttribute]
private RunState <RunState>k__BackingField;
    [PersistAttribute]
public RunState RunState { get; public set; }
    private INUnitTestElement JetBrains.ReSharper.UnitTestProvider.nUnit.v30.Elements.INUnitTestElement.Parent { get; }
    [UsedImplicitlyAttribute]
protected NUnitFixtureElementBase(string testId, IClrTypeName typeName, string displayName);
    [CompilerGeneratedAttribute]
public sealed virtual RunState get_RunState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RunState(RunState value);
    private sealed virtual override INUnitTestElement JetBrains.ReSharper.UnitTestProvider.nUnit.v30.Elements.INUnitTestElement.get_Parent();
    public virtual IDeclaredElement GetDeclaredElement();
}
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.Elements.NUnitParametrisedFixtureElement : NUnitFixtureElementBase {
    public string Kind { get; }
    public NUnitParametrisedFixtureElement(IClrTypeName typeName, string displayName);
    public virtual string get_Kind();
}
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.Elements.NUnitRowTestElement : Row {
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private RunState <RunState>k__BackingField;
    [PersistAttribute]
public string DisplayName { get; public set; }
    [PersistAttribute]
public RunState RunState { get; public set; }
    public string ShortName { get; }
    public string Kind { get; }
    [NotNullAttribute]
public NUnitTestElement Parent { get; public set; }
    private INUnitTestElement JetBrains.ReSharper.UnitTestProvider.nUnit.v30.Elements.INUnitTestElement.Parent { get; }
    public NUnitRowTestElement(NUnitTestElement parent, string shortName);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual RunState get_RunState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RunState(RunState value);
    public virtual string get_ShortName();
    public virtual string get_Kind();
    public NUnitTestElement get_Parent();
    public void set_Parent(NUnitTestElement value);
    private sealed virtual override INUnitTestElement JetBrains.ReSharper.UnitTestProvider.nUnit.v30.Elements.INUnitTestElement.get_Parent();
}
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.Elements.NUnitSetUpFixtureElement : FromClass {
    [CompilerGeneratedAttribute]
private RunState <RunState>k__BackingField;
    [PersistAttribute]
public RunState RunState { get; public set; }
    public string Kind { get; }
    private INUnitTestElement JetBrains.ReSharper.UnitTestProvider.nUnit.v30.Elements.INUnitTestElement.Parent { get; }
    public NUnitSetUpFixtureElement(IClrTypeName typeName);
    [CompilerGeneratedAttribute]
public sealed virtual RunState get_RunState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RunState(RunState value);
    public virtual string get_Kind();
    private sealed virtual override INUnitTestElement JetBrains.ReSharper.UnitTestProvider.nUnit.v30.Elements.INUnitTestElement.get_Parent();
}
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.Elements.NUnitTestElement : FromMethod`1<NUnitFixtureElementBase> {
    [CompilerGeneratedAttribute]
private RunState <RunState>k__BackingField;
    [PersistAttribute]
public RunState RunState { get; public set; }
    public string Kind { get; }
    private INUnitTestElement JetBrains.ReSharper.UnitTestProvider.nUnit.v30.Elements.INUnitTestElement.Parent { get; }
    public NUnitTestElement(NUnitFixtureElementBase parent, string methodName, string declaredInTypeShortName);
    [CompilerGeneratedAttribute]
public sealed virtual RunState get_RunState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RunState(RunState value);
    public virtual string get_Kind();
    private sealed virtual override INUnitTestElement JetBrains.ReSharper.UnitTestProvider.nUnit.v30.Elements.INUnitTestElement.get_Parent();
}
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.Elements.NUnitTestFixtureElement : NUnitFixtureElementBase {
    public string Kind { get; }
    public NUnitTestFixtureElement(IClrTypeName typeName, string displayName);
    public virtual string get_Kind();
}
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.Elements.NUnitTestInAbstractFixtureElement : FakeUnitTestElement {
    [CompilerGeneratedAttribute]
private NUnitAbstractFixtureElement <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    [NotNullAttribute]
public NUnitAbstractFixtureElement Parent { get; }
    [NotNullAttribute]
public string ShortName { get; }
    public NUnitTestInAbstractFixtureElement(string shortName, NUnitAbstractFixtureElement parent);
    [CompilerGeneratedAttribute]
public NUnitAbstractFixtureElement get_Parent();
    [CompilerGeneratedAttribute]
public string get_ShortName();
    public virtual IReadOnlyCollection`1<IUnitTestElement> GetRelatedUnitTestElements();
}
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.Elements.NUnitTestInParametrisedFixtureElement : FakeUnitTestElement {
    [CompilerGeneratedAttribute]
private NUnitParametrisedFixtureElement <Fixture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    [NotNullAttribute]
public NUnitParametrisedFixtureElement Fixture { get; }
    [NotNullAttribute]
public string ShortName { get; }
    public NUnitTestInParametrisedFixtureElement(string shortName, NUnitParametrisedFixtureElement fixture);
    [CompilerGeneratedAttribute]
public NUnitParametrisedFixtureElement get_Fixture();
    [CompilerGeneratedAttribute]
public string get_ShortName();
    public virtual IReadOnlyCollection`1<IUnitTestElement> GetRelatedUnitTestElements();
}
[FlagsAttribute]
public enum JetBrains.ReSharper.UnitTestProvider.nUnit.v30.Elements.RunState : Enum {
    public int value__;
    public static RunState Runnable;
    public static RunState Ignored;
    public static RunState Explicit;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.Elements.RunStateExtensions : object {
    [ExtensionAttribute]
public static RunState OrFromParentOf(RunState left, INUnitTestElement self);
    [ExtensionAttribute]
public static RunState Or(RunState left, Nullable`1<RunState> right);
    [ExtensionAttribute]
public static RunState FromRunner(RunState runState);
}
[NotNullAttribute]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.FixtureFactory : MulticastDelegate {
    public FixtureFactory(object object, IntPtr method);
    public virtual NUnitFixtureElementBase Invoke(IClrTypeName typeName, string displayName, UnitTestElement parent, IJetSet`1<UnitTestElementCategory> categories);
    public virtual IAsyncResult BeginInvoke(IClrTypeName typeName, string displayName, UnitTestElement parent, IJetSet`1<UnitTestElementCategory> categories, AsyncCallback callback, object object);
    public virtual NUnitFixtureElementBase EndInvoke(IAsyncResult result);
}
public interface JetBrains.ReSharper.UnitTestProvider.nUnit.v30.INUnitTestParametersProvider {
    [NotNullAttribute]
public abstract virtual IDictionary`2<string, string> GetParameters(ITestRunnerContext ctx);
}
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.Mappings.NUnitContext : NUnitElementFactory {
    [NotNullAttribute]
private Dictionary`2<Guid, IUnitTestElement> myMap;
    public NUnitContext(IUnitTestElementObserver observer);
    [CanBeNullAttribute]
public T Parent(NUnitTestElementTask task);
    public void Add(RemoteTask task, IUnitTestElement element);
}
internal static class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.Mappings.NUnitElementMapping : object {
    [NotNullAttribute]
public static Key`1<NUnitContext> FactoryKey;
    private static NUnitElementMapping();
}
internal abstract class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.Mappings.NUnitElementMapping`2 : object {
    protected NUnitContext GetFactory(ITestRunnerContext ctx, IUnitTestElementObserver observer);
    public abstract virtual TTask ToRemoteTask(TElement element, ITestRunnerExecutionContext ctx);
    public abstract virtual TElement ToElement(TTask task, NUnitContext ctx, NUnitElementFactory factory);
    private sealed virtual override RemoteTask JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.IUnitTestElementToRemoteTaskMapping<TElement>.GetRemoteTask(TElement element, ITestRunnerExecutionContext ctx);
    private sealed virtual override IUnitTestElement JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.IRemoteTaskToUnitTestElementMapping<TTask>.GetElement(TTask task, ITestRunnerDiscoveryContext ctx, IUnitTestElementObserver observer);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.Mappings.NUnitParametrisedFixtureElementMapping : NUnitElementMapping`2<NUnitParametrisedFixtureElement, NUnitParametrisedFixtureTask> {
    public virtual NUnitParametrisedFixtureTask ToRemoteTask(NUnitParametrisedFixtureElement element, ITestRunnerExecutionContext ctx);
    public virtual NUnitParametrisedFixtureElement ToElement(NUnitParametrisedFixtureTask task, NUnitContext ctx, NUnitElementFactory factory);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.Mappings.NUnitRowTestElementMapping : NUnitElementMapping`2<NUnitRowTestElement, NUnitRowTestTask> {
    public virtual NUnitRowTestTask ToRemoteTask(NUnitRowTestElement element, ITestRunnerExecutionContext ctx);
    public virtual NUnitRowTestElement ToElement(NUnitRowTestTask task, NUnitContext ctx, NUnitElementFactory factory);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.Mappings.NUnitSetUpFixtureElementMapping : NUnitElementMapping`2<NUnitSetUpFixtureElement, NUnitSetUpFixtureTask> {
    public virtual NUnitSetUpFixtureTask ToRemoteTask(NUnitSetUpFixtureElement element, ITestRunnerExecutionContext ctx);
    public virtual NUnitSetUpFixtureElement ToElement(NUnitSetUpFixtureTask task, NUnitContext ctx, NUnitElementFactory factory);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.Mappings.NUnitTestElementMapping : NUnitElementMapping`2<NUnitTestElement, NUnitTestTask> {
    public virtual NUnitTestTask ToRemoteTask(NUnitTestElement element, ITestRunnerExecutionContext ctx);
    public virtual NUnitTestElement ToElement(NUnitTestTask task, NUnitContext ctx, NUnitElementFactory factory);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.Mappings.NUnitTestFixtureElementMapping : NUnitElementMapping`2<NUnitTestFixtureElement, NUnitTestFixtureTask> {
    public virtual NUnitTestFixtureTask ToRemoteTask(NUnitTestFixtureElement element, ITestRunnerExecutionContext ctx);
    public virtual NUnitTestFixtureElement ToElement(NUnitTestFixtureTask task, NUnitContext ctx, NUnitElementFactory factory);
}
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.NUnit30FileExplorer : NUnitFileExplorer {
    public NUnit30FileExplorer(IUnitTestAttributeChecker attributeChecker, IUnitTestElementObserverOnFile observer, INUnitTypeOrValuePresenterFactory presenterFactory, Func`1<bool> interrupted);
    protected virtual string GetVariantDisplayName(ITypeElement typeElement, IAttributeInstance attr);
}
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.NUnit30MetadataExplorer : NUnitMetadataExplorer {
    public NUnit30MetadataExplorer(NUnitElementFactory factory, IUnitTestAttributeChecker checker, IUnitTestElementObserver observer, INUnitTypeOrValuePresenterFactory presenterFactory);
    protected virtual string GetVariantDisplayName(IMetadataTypeInfo type, IMetadataCustomAttribute attr);
}
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.NUnit30TypeOrValuePresenter : object {
    [NotNullAttribute]
private Regex myEscapeRegex;
    public sealed virtual string TypeRepresentation(IMetadataType type);
    public sealed virtual string ValueRepresentation(MetadataAttributeValue attributeValue, bool escape, bool isFixtureParameter);
    public sealed virtual string ValueRepresentation(object value, bool escape, bool isFixtureParameter, IMetadataType type);
    private static string TypeValueRepresentation(IMetadataType value);
    private static string EscapeChar(char c, bool charEscaping);
    public sealed virtual string ValueRepresentation(MetadataAttributeValue value, int i, IMetadataParameter[] parameters, bool escape);
    private static string EnumValueRepresentation(object value, IMetadataTypeInfo type);
    private static string FlagsValueRepresentation(ulong value, IMetadataTypeInfo type);
    public sealed virtual string ValueRepresentation(AttributeValue value, int i, IList`1<IParameter> parameters, bool escape);
    public sealed virtual string ValueRepresentation(AttributeValue value, bool escape, bool isFixtureParameter);
    private static string TypeValuePresentation(IType typeValue);
    private static string EnumValueRepresentation(object value, IEnum enum);
    private static string FlagsValueRepresentation(ulong value, IEnum enum);
    private static bool IsUInt64(object value);
    private static ulong ToUInt64(object value);
    public sealed virtual string TypeRepresentation(IType type);
    private static void BuildTypeArgumentList(ITypeElement element, ISubstitution substitution, StringBuilder builder, string startSymbol, string endSymbol, Func`2<IType, string> typePresenter);
}
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.NUnitElementFactory : object {
    [NotNullAttribute]
private IUnitTestElementObserver myObserver;
    [NotNullAttribute]
private JetHashSet`1<IUnitTestElement> myElements;
    public NUnitElementFactory(IUnitTestElementObserver observer);
    internal NUnitSetUpFixtureElement GetOrCreateSetUpFixture(IClrTypeName typeName, UnitTestElement parent);
    public NUnitParametrisedFixtureElement CreateParametrisedFixture(IClrTypeName typeName, string displayName, UnitTestElement parent, IJetSet`1<UnitTestElementCategory> categories);
    internal NUnitTestFixtureElement GetOrCreateFixture(IClrTypeName typeName, string displayName, UnitTestElement parent, IJetSet`1<UnitTestElementCategory> categories);
    internal NUnitTestElement GetOrCreateTest(NUnitFixtureElementBase parent, string shortName, string declaredInTypeShortName, IJetSet`1<UnitTestElementCategory> categories);
    internal NUnitRowTestElement GetOrCreateRowTest(string shortName, NUnitTestElement parent, IJetSet`1<UnitTestElementCategory> categories);
    [NotNullAttribute]
public NUnitAbstractFixtureElement CreateAbstractFixture(IClrTypeName typeName, string displayName);
    [NotNullAttribute]
public NUnitTestInParametrisedFixtureElement CreateTestInParametrisedFixture(string shortName, NUnitParametrisedFixtureElement parent);
    [NotNullAttribute]
public NUnitTestInAbstractFixtureElement CreateTestInAbstractFixture(string shortName, NUnitAbstractFixtureElement parent);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.NUnitServiceProvider : object {
    [CompilerGeneratedAttribute]
private IPsiModules <PsiModules>k__BackingField;
    [CompilerGeneratedAttribute]
private ISymbolCache <SymbolCache>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestProvider <Provider>k__BackingField;
    private Lazy`1<NUnitTestRunnerRunStrategy> myUniversalRunner;
    public IPsiModules PsiModules { get; }
    public ISymbolCache SymbolCache { get; }
    public IUnitTestProvider Provider { get; }
    public NUnitServiceProvider(ISolution solution, IPsiModules psiModules, ISymbolCache symbolCache, NUnitTestProvider provider);
    [CompilerGeneratedAttribute]
public IPsiModules get_PsiModules();
    [CompilerGeneratedAttribute]
public ISymbolCache get_SymbolCache();
    [CompilerGeneratedAttribute]
public IUnitTestProvider get_Provider();
    public virtual IUnitTestRunStrategy GetRunStrategy(IUnitTestElement element);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.NUnitSetupFixtureVault : NUnitSetupFixtureVault`2<NUnitSetUpFixtureElement, NUnitFixtureElementBase> {
    public NUnitSetupFixtureVault(Lifetime lifetime, IShellLocks shellLocks, IWaitForCachesTask waitForCachesTask, IUnitTestElementRepository repository);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.NUnitTestExplorerFromArtifacts : Switching`1<NUnitProviderSettings> {
    public NUnitTestExplorerFromArtifacts(ISettingsStore settingsStore, NUnitTestExplorerFromMetadata metadataExplorer, NUnitTestExplorerFromTestRunner testRunnerExplorer);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.NUnitTestExplorerFromFile : object {
    [CompilerGeneratedAttribute]
private IUnitTestProvider <Provider>k__BackingField;
    private IUnitTestAttributeChecker myAttributeChecker;
    private INUnitTypeOrValuePresenterFactory myPresenterFactory;
    private INUnitVersionDetector myNUnitVersionDetector;
    private ClrLanguagesKnown myClrLanguagesKnown;
    public IUnitTestProvider Provider { get; }
    public NUnitTestExplorerFromFile(NUnitServiceProvider serviceProvider, IUnitTestAttributeChecker attributeChecker, INUnitTypeOrValuePresenterFactory presenterFactory, INUnitVersionDetector nUnitVersionDetector, ClrLanguagesKnown clrLanguagesKnown);
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestProvider get_Provider();
    public sealed virtual void ProcessFile(IFile psiFile, IUnitTestElementObserverOnFile observer, Func`1<bool> interrupted);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.NUnitTestExplorerFromMetadata : Metadata {
    [NotNullAttribute]
private IUnitTestAttributeChecker myAttributeChecker;
    [NotNullAttribute]
private INUnitTypeOrValuePresenterFactory myPresenterFactory;
    [NotNullAttribute]
private INUnitVersionDetector myNUnitVersionDetector;
    [NotNullAttribute]
private ILogger myLogger;
    public NUnitTestExplorerFromMetadata(NUnitServiceProvider serviceProvider, IUnitTestAttributeChecker attributeChecker, AssemblyToAssemblyReferencesResolveManager resolveManager, ResolveContextManager resolveContextManager, NuGetInstalledPackageChecker installedPackageChecker, INUnitTypeOrValuePresenterFactory presenterFactory, INUnitVersionDetector nUnitVersionDetector, ILogger logger);
    protected virtual void ProcessProject(MetadataLoader loader, IUnitTestElementObserver observer, CancellationToken token);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.NUnitTestExplorerFromTestRunner : TestRunner {
    public NUnitTestExplorerFromTestRunner(NUnitTestProvider provider, ITestRunnerAgentManager agentManager, NUnitTestRunnerOrchestrator adapter, NuGetInstalledPackageChecker installedPackageChecker);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.NUnitTestParametersProvider : object {
    [NotNullAttribute]
private IRunSettingsFileProvider myRunSettingsFileProvider;
    [NotNullAttribute]
private ISettingsOptimization mySettingsOptimization;
    [CompilerGeneratedAttribute]
private SettingsKey <KeyExposed>k__BackingField;
    public SettingsKey KeyExposed { get; }
    public NUnitTestParametersProvider(IRunSettingsFileProvider runSettingsFileProvider, ISettingsStore settingsStore, ISettingsOptimization settingsOptimization);
    public sealed virtual IDictionary`2<string, string> GetParameters(ITestRunnerContext ctx);
    private IEnumerable`1<TestParameter> GetParametersFromSettings(ITestRunnerContext ctx);
    private IEnumerable`1<TestParameter> GetParametersFromRunSettings(ITestRunnerContext ctx);
    public sealed virtual NUnitProviderSettings ReadData(Lifetime lifetime, IContextBoundSettingsStore store);
    [CompilerGeneratedAttribute]
public sealed virtual SettingsKey get_KeyExposed();
}
[UnitTestProviderAttribute("16")]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.NUnitTestProvider : object {
    public static string PROVIDER_ID;
    public static string AssemblyName;
    public static IClrTypeName TestFixtureAttribute;
    public static IClrTypeName SetUpFixtureAttribute;
    public static IClrTypeName TestAttribute;
    public static IClrTypeName TestCaseAttribute;
    public static IClrTypeName TestCaseSourceAttribute;
    public static IClrTypeName TheoryAttribute;
    public static IClrTypeName CombinatorialAttribute;
    public static IClrTypeName SequentialAttribute;
    public static IClrTypeName PairwiseAttribute;
    public static IClrTypeName ValuesAttribute;
    public static IClrTypeName ValueSourceAttribute;
    public static IClrTypeName RangeAttribute;
    public static IClrTypeName RandomAttribute;
    public static IClrTypeName CategoryAttribute;
    public static IClrTypeName IgnoreAttribute;
    public static IClrTypeName ExplicitAttribute;
    public static IClrTypeName DescriptionAttribute;
    public static IClrTypeName NUnitAttribute;
    public static IClrTypeName TestOfAttribute;
    public static IClrTypeName CancelAfterAttribute;
    public static IClrTypeName FixtureBuilderInterface;
    public static IClrTypeName TestBuilderInterface;
    public static IClrTypeName SimpleTestBuilderInterface;
    public static IClrTypeName ParameterDataSourceInterface;
    public static IClrTypeName[] NotFixtureSourceAttributes;
    private IUnitTestAttributeChecker myCachedCache;
    public string ID { get; }
    public string Name { get; }
    public IEnumerable`1<IClrTypeName> CategoryAttributes { get; }
    private static NUnitTestProvider();
    public sealed virtual string get_ID();
    public sealed virtual string get_Name();
    private bool IsUnitTest(IDeclaredElement element);
    private IUnitTestAttributeChecker GetAttributeCache(IDeclaredElement element);
    private bool IsUnitTestContainer(IDeclaredElement element);
    private bool IsUnitTestStuff(IDeclaredElement declaredElement, IProject project, TargetFrameworkId targetFrameworkId, IProjectFile projectFile);
    public sealed virtual bool IsElementOfKind(IDeclaredElement declaredElement, UnitTestElementKind elementKind);
    public sealed virtual bool IsElementOfKind(IUnitTestElement element, UnitTestElementKind elementKind);
    public sealed virtual bool IsSupported(IHostProvider hostProvider, IProject project, TargetFrameworkId targetFrameworkId);
    public sealed virtual bool IsSupported(IProject project, TargetFrameworkId targetFrameworkId);
    public sealed virtual bool SupportsResultEventsForParentOf(IUnitTestElement element);
    public sealed virtual IUnitTestRunStrategy GetRunStrategy(IUnitTestElement element, IHostProvider hostProvider);
    public static bool ValidateNUnitPath(FileSystemPath path);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestProvider.nUnit.v30.NUnitTestProvider/<get_CategoryAttributes>d__44")]
public sealed virtual IEnumerable`1<IClrTypeName> get_CategoryAttributes();
    public sealed virtual void ContributeToSummary(IUnitTestElement element, IDeclaredElement declaredElement, XmlNode xmldoc);
    private static void ProcessAttributeWithDescriptionParameter(IClrTypeName attributeTypeName, XmlNode xmldoc, ITypeMember attrOwner, XmlNode summaryNode);
    private static XmlNode AppendParagraphToSummaryNode(XmlNode xmldoc, XmlNode summaryNode, string text);
    [CompilerGeneratedAttribute]
private void <GetAttributeCache>b__33_0();
    [CompilerGeneratedAttribute]
private bool <IsUnitTestContainer>b__34_0(TypeMemberInstance`1<IMethod> member);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.NUnitTestRunnerOrchestrator : object {
    [NotNullAttribute]
private INUnitTestParametersProvider myTestParametersProvider;
    [NotNullAttribute]
private Reader mySettingsReader;
    public Assembly InProcessAdapterAssembly { get; }
    public int Priority { get; }
    public NUnitTestRunnerOrchestrator(INUnitTestParametersProvider testParametersProvider, Reader settingsReader);
    public sealed virtual Assembly get_InProcessAdapterAssembly();
    public sealed virtual int get_Priority();
    public sealed virtual TestAdapterLoader GetTestAdapterLoader(ITestRunnerContext ctx);
    public sealed virtual TestContainer GetTestContainer(ITestRunnerContext ctx);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestProvider.nUnit.v30.NUnitTestRunnerOrchestrator/<GetMessageHandlers>d__9")]
public sealed virtual IEnumerable`1<IMessageHandlerMarker> GetMessageHandlers(ITestRunnerContext ctx);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.NUnitTestRunnerRunStrategy : TestRunnerRunStrategy {
    public NUnitTestRunnerRunStrategy(IDataCollectorFactory dataCollectorFactory, ITestRunnerAgentManager agentManager, NUnitTestRunnerOrchestrator adapter, IUnitTestProjectArtifactResolver artifactResolver);
}
[XmlRootAttribute("RunSettings")]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.RunSettings : object {
    [CompilerGeneratedAttribute]
private TestParameter[] <Parameters>k__BackingField;
    [XmlArrayAttribute("TestRunParameters")]
[XmlArrayItemAttribute("Parameter")]
public TestParameter[] Parameters { get; public set; }
    [CompilerGeneratedAttribute]
public TestParameter[] get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(TestParameter[] value);
}
public static class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.TestLinker.KnownPackages : object {
    [NotNullAttribute]
internal static VersionRange VersionRange;
    public static string TestFramework;
    public static string TestAdapter;
    public static string Sdk;
    private static KnownPackages();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.TestLinker.NUnitFrameworkAssemblyReferenceDescriptor : AssemblyReferenceDescriptor {
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.TestLinker.NUnitFrameworkNuGetReferenceDescriptor : AggregateDescriptor {
}
[LocalizableAttribute("False")]
[ShellComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.TestLinker.NUnitTestOfAttributeSubjectExtractor : object {
    public IClrTypeName AttributeName { get; }
    public string Query { get; }
    public sealed virtual IClrTypeName get_AttributeName();
    public sealed virtual string get_Query();
    public sealed virtual IEnumerable`1<ITypeElement> TryGetSubjects(IList`1<IAttributeInstance> attributes);
    public ITypeElement TryGetSubject(IAttributeInstance attribute);
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.TestLinker.NUnitTestOfAttributeSubjectInjector : TestSubjectInjectorBase {
    public NUnitTestOfAttributeSubjectInjector(IPsiServices psiServices, ILanguageManager languageManager);
    public sealed virtual Task TryInjectTestSubject(ITestGenerationContext ctx, IProgressIndicator pi);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.TestLinker.NUnitTestProjectScopeDescriptor : object {
    [CompilerGeneratedAttribute]
private IUnitTestProvider <Provider>k__BackingField;
    public IUnitTestProvider Provider { get; }
    public NUnitTestProjectScopeDescriptor(NUnitTestProvider provider);
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestProvider get_Provider();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.TestLinker.Templates.CSharp.CSharpNUnitFileTemplateContributor : object {
    private string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestFileTemplate.TemplateResourceName { get; }
    private string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestLiveTemplate.TemplateResourceName { get; }
    private sealed virtual override string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestFileTemplate.get_TemplateResourceName();
    private sealed virtual override string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestLiveTemplate.get_TemplateResourceName();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.TestLinker.Templates.CSharp.ZoneMarker : object {
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.TestLinker.Templates.VB.VbNUnitFileTemplateContributor : object {
    private string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestFileTemplate.TemplateResourceName { get; }
    private string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestLiveTemplate.TemplateResourceName { get; }
    private sealed virtual override string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestFileTemplate.get_TemplateResourceName();
    private sealed virtual override string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestLiveTemplate.get_TemplateResourceName();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.TestLinker.Templates.VB.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.TestLinker.ZoneMarker : object {
}
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v30.TestParameter : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("value")]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v311.NUnit310TypeOrValuePresenter : object {
    [NotNullAttribute]
private Regex myEscapeRegex;
    public sealed virtual string TypeRepresentation(IMetadataType type);
    public sealed virtual string ValueRepresentation(MetadataAttributeValue attributeValue, bool escape, bool isFixtureParameter);
    public sealed virtual string ValueRepresentation(object value, bool escape, bool isFixtureParameter, IMetadataType type);
    private static string TypeValueRepresentation(IMetadataType value);
    private static string EscapeChar(char c, bool charEscaping);
    public sealed virtual string ValueRepresentation(MetadataAttributeValue value, int i, IMetadataParameter[] parameters, bool escape);
    private static string EnumValueRepresentation(object value, IMetadataTypeInfo type);
    private static string FlagsValueRepresentation(ulong value, IMetadataTypeInfo type);
    public sealed virtual string ValueRepresentation(AttributeValue value, int i, IList`1<IParameter> parameters, bool escape);
    public sealed virtual string ValueRepresentation(AttributeValue value, bool escape, bool isFixtureParameter);
    private static string TypeValuePresentation(IType typeValue);
    private static string EnumValueRepresentation(object value, IEnum enum);
    private static string FlagsValueRepresentation(ulong value, IEnum enum);
    private static bool IsUInt64(object value);
    private static ulong ToUInt64(object value);
    public sealed virtual string TypeRepresentation(IType type);
    private static void BuildTypeArgumentList(ITypeElement element, ISubstitution substitution, StringBuilder builder, string startSymbol, string endSymbol, Func`2<IType, string> typePresenter);
}
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v32.NUnit32TypeOrValuePresenter : object {
    [NotNullAttribute]
private Regex myEscapeRegex;
    public sealed virtual string TypeRepresentation(IMetadataType type);
    public sealed virtual string ValueRepresentation(MetadataAttributeValue attributeValue, bool escape, bool isFixtureParameter);
    public sealed virtual string ValueRepresentation(object value, bool escape, bool isFixtureParameter, IMetadataType type);
    private static string TypeValueRepresentation(IMetadataType value);
    private static string EscapeChar(char c, bool charEscaping);
    public sealed virtual string ValueRepresentation(MetadataAttributeValue value, int i, IMetadataParameter[] parameters, bool escape);
    private static string EnumValueRepresentation(object value, IMetadataTypeInfo type);
    private static string FlagsValueRepresentation(ulong value, IMetadataTypeInfo type);
    public sealed virtual string ValueRepresentation(AttributeValue value, int i, IList`1<IParameter> parameters, bool escape);
    public sealed virtual string ValueRepresentation(AttributeValue value, bool escape, bool isFixtureParameter);
    private static string TypeValuePresentation(IType typeValue);
    private static string EnumValueRepresentation(object value, IEnum enum);
    private static string FlagsValueRepresentation(ulong value, IEnum enum);
    private static bool IsUInt64(object value);
    private static ulong ToUInt64(object value);
    public sealed virtual string TypeRepresentation(IType type);
    private static void BuildTypeArgumentList(ITypeElement element, ISubstitution substitution, StringBuilder builder, string startSymbol, string endSymbol, Func`2<IType, string> typePresenter);
}
public class JetBrains.ReSharper.UnitTestProvider.nUnit.v34.NUnit34TypeOrValuePresenter : object {
    [NotNullAttribute]
private Regex myEscapeRegex;
    public sealed virtual string TypeRepresentation(IMetadataType type);
    public sealed virtual string ValueRepresentation(MetadataAttributeValue attributeValue, bool escape, bool isFixtureParameter);
    public sealed virtual string ValueRepresentation(object value, bool escape, bool isFixtureParameter, IMetadataType type);
    private static string TypeValueRepresentation(IMetadataType value);
    private static string EscapeChar(char c, bool charEscaping);
    public sealed virtual string ValueRepresentation(MetadataAttributeValue value, int i, IMetadataParameter[] parameters, bool escape);
    private static string EnumValueRepresentation(object value, IMetadataTypeInfo type);
    private static string FlagsValueRepresentation(ulong value, IMetadataTypeInfo type);
    public sealed virtual string ValueRepresentation(AttributeValue value, int i, IList`1<IParameter> parameters, bool escape);
    public sealed virtual string ValueRepresentation(AttributeValue value, bool escape, bool isFixtureParameter);
    private static string TypeValuePresentation(IType typeValue);
    private static string EnumValueRepresentation(object value, IEnum enum);
    private static string FlagsValueRepresentation(ulong value, IEnum enum);
    private static bool IsUInt64(object value);
    private static ulong ToUInt64(object value);
    public sealed virtual string TypeRepresentation(IType type);
    private static void BuildTypeArgumentList(ITypeElement element, ISubstitution substitution, StringBuilder builder, string startSymbol, string endSymbol, Func`2<IType, string> typePresenter);
}
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.v39.NUnit39FileExplorer : NUnitFileExplorer {
    public NUnit39FileExplorer(IUnitTestAttributeChecker attributeChecker, IUnitTestElementObserverOnFile observer, INUnitTypeOrValuePresenterFactory presenterFactory, Func`1<bool> interrupted);
}
internal class JetBrains.ReSharper.UnitTestProvider.nUnit.v39.NUnit39MetadataExplorer : NUnitMetadataExplorer {
    public NUnit39MetadataExplorer(NUnitElementFactory factory, IUnitTestAttributeChecker checker, IUnitTestElementObserver observer, INUnitTypeOrValuePresenterFactory presenterFactory);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.VersionsSupport.CustomNUnitChecker : object {
    private ILogger myLogger;
    public CustomNUnitChecker(ILogger logger);
    public Version CheckNUnitVersionFromFolder(FileSystemPath folderToCheck);
}
public class JetBrains.ReSharper.UnitTestProvider.nUnit.ViewModel.NunitCustomInstallationViewModel : AAutomation {
    private ICommonFileDialogs myCommonFileDialogs;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEnabledProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <FolderChangedByUserCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <CustomNUnitFolderProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <DetectionCommentString>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IconId> <StateIconId>k__BackingField;
    public IProperty`1<bool> IsEnabledProperty { get; }
    public DelegateCommand FolderChangedByUserCommand { get; }
    public IProperty`1<string> CustomNUnitFolderProperty { get; }
    public IProperty`1<string> DetectionCommentString { get; }
    public IProperty`1<IconId> StateIconId { get; }
    public NunitCustomInstallationViewModel(Lifetime lifetime, ISolution solution, CustomNUnitChecker customNUnitChecker, IProperty`1<string> customNUnitFolderProperty, ICommonFileDialogs filedlg);
    public bool IsSelectedPathValid();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsEnabledProperty();
    [CompilerGeneratedAttribute]
public DelegateCommand get_FolderChangedByUserCommand();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_CustomNUnitFolderProperty();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_DetectionCommentString();
    [CompilerGeneratedAttribute]
public IProperty`1<IconId> get_StateIconId();
    public void BrowseForCustomNunitFolder();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.UnitTestProvider.nUnit.ZoneMarker : object {
}
public enum JetBrains.ReSharper.UnitTestRunner.nUnit.UseAddins : Enum {
    public int value__;
    public static UseAddins Never;
    public static UseAddins Always;
    public static UseAddins IfRequired;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
