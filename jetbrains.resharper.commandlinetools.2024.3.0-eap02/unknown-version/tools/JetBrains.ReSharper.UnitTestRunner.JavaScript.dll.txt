public interface JetBrains.ReSharper.UnitTestProvider.JavaScript.IJavaScriptServiceProvider {
    [NotNullAttribute]
public abstract virtual RemoteTask CreateTestRunTask(IProjectFile projectFile, IProject project);
    [NotNullAttribute]
public abstract virtual RemoteTask CreateTestFileTask(IProjectFile projectFile, IProject project, String[] referencedFiles, IUnitTestRun run);
    [NotNullAttribute]
public abstract virtual IJavaScriptUnitTestRunStrategy GetRunStrategy(bool isTypeScript, string defaultFrameworkVersion);
    [NotNullAttribute]
public abstract virtual string GetDefaultUnitTestingFrameworkVersion();
    [NotNullAttribute]
public abstract virtual string GetUnitTestingFrameworkVersion(IJavaScriptTestElement element, IUnitTestRun run);
    [NotNullAttribute]
public abstract virtual String[] GetReferencedFilesWithSorting(IUnitTestRun run, IProjectFile projectFile);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestProvider.JavaScript.IJavaScriptServiceProviderExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IList`1<RemoteTask> GetTaskSequence(IJavaScriptServiceProvider provider, IJavaScriptTestElement element, IUnitTestRun run);
}
public abstract class JetBrains.ReSharper.UnitTestProvider.JavaScript.JavaScriptTestElementBase`1 : UnitTestElement {
    [CompilerGeneratedAttribute]
private IProjectModelElementPointer <FilePointer>k__BackingField;
    [CompilerGeneratedAttribute]
private TextRange <TextRange>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [PersistAttribute("JetBrains.ReSharper.UnitTestProvider.JavaScript.Marshal.ProjectModelElementEnvoyMarshaller")]
public IProjectModelElementPointer FilePointer { get; public set; }
    [PersistAttribute("JetBrains.ReSharper.UnitTestProvider.JavaScript.Marshal.TextRangeMarshaller")]
public TextRange TextRange { get; public set; }
    [PersistAttribute]
public string DisplayName { get; public set; }
    public string ShortName { get; }
    protected JavaScriptTestElementBase`1(string testId, string shortName, IProjectModelElementPointer projectFile, TextRange textRange);
    [CompilerGeneratedAttribute]
public IProjectModelElementPointer get_FilePointer();
    [CompilerGeneratedAttribute]
public void set_FilePointer(IProjectModelElementPointer value);
    [CompilerGeneratedAttribute]
public TextRange get_TextRange();
    [CompilerGeneratedAttribute]
public void set_TextRange(TextRange value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    public virtual string get_ShortName();
    public virtual UnitTestElementNamespace GetNamespace();
    public virtual IEnumerable`1<UnitTestElementLocation> GetLocations();
    public virtual IDeclaredElement GetDeclaredElement();
    public virtual IEnumerable`1<IProjectFile> GetProjectFiles();
    public sealed virtual IProjectFile GetProjectFile();
}
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.Marshal.ProjectModelElementEnvoyMarshaller : object {
    [NotNullAttribute]
private ProjectModelElementPointerManager myPmepm;
    public ProjectModelElementEnvoyMarshaller(ProjectModelElementPointerManager pmepm);
    public sealed virtual void Marshal(UnsafeWriter writer, IProjectModelElementPointer value);
    public sealed virtual IProjectModelElementPointer Unmarshal(UnsafeReader reader);
}
public class JetBrains.ReSharper.UnitTestProvider.JavaScript.Marshal.TextRangeMarshaller : object {
    public sealed virtual void Marshal(UnsafeWriter writer, TextRange value);
    public sealed virtual TextRange Unmarshal(UnsafeReader reader);
}
[AttributeUsageAttribute("24516")]
internal class JetBrains.ReSharper.UnitTestRunner.JavaScript.Common.CanBeNullAttribute : Attribute {
}
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Common.CharValue : object {
    public static char Space;
    public static char Slash;
    public static char Backslash;
    public static char Comma;
    public static char DoubleQuote;
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Common.CommandLineBuilder : object {
    [NotNullAttribute]
private string myAssignmentOperator;
    [NotNullAttribute]
private StringBuilder myStringBuilder;
    [NotNullAttribute]
private string mySwitchPrefix;
    private CommandLineBuilder(string initialValue, string switchPrefix, string assignmentOperator);
    [NotNullAttribute]
public static CommandLineBuilder CreateInstance(string switchPrefix, string assignmentOperator);
    [NotNullAttribute]
public static CommandLineBuilder CreateInstance(string initialValue, string switchPrefix, string assignmentOperator);
    [NotNullAttribute]
public static CommandLineBuilder CreateInstance(string initialValue);
    [NotNullAttribute]
public CommandLineBuilder Add(string argument);
    [NotNullAttribute]
public CommandLineBuilder AddSwitch(string switchValue);
    private void AddCore(string argument);
    private void AddPairCore(string argumentName, string argumentValue);
    [NotNullAttribute]
public CommandLineBuilder AddNotEmpty(string argumentName, string argumentValue);
    [NotNullAttribute]
public CommandLineBuilder AddNotEmptyOrDefault(string argumentName, T argumentValue, T argumentDefaultValue);
    public virtual string ToString();
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Common.ConcurrentRandom : object {
    private Random myGenerator;
    private object myLockObject;
    public int Next(int minValue, int maxValue);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Common.DictionaryExtensions : object {
    [ExtensionAttribute]
public static TValue GetValue(IDictionary`2<TKey, TValue> dictionary, TKey key, TValue defaultValue);
    [ExtensionAttribute]
public static void AddEx(IDictionary`2<TKey, TValue> dictionary, TKey key, TValue value);
    [ExtensionAttribute]
public static string Write(IEnumerable`1<KeyValuePair`2<TKey, TValue>> items, string initialValue, string separator, string keyValueDelimiter);
    [ExtensionAttribute]
public static string Write(IEnumerable`1<KeyValuePair`2<TKey, TValue[]>> items, string initialValue, string separator);
    [ExtensionAttribute]
[NotNullAttribute]
public static IDictionary`2<TKey, TValue> Merge(IDictionary`2<TKey, TValue> source, IDictionary`2<TKey, TValue> map);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Common.DuplicateKeyException : ArgumentException {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Key { get; }
    public string Value { get; }
    public DuplicateKeyException(string key, string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public string get_Value();
    public static void Throw(TKey key, TValue value);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Common.EnumerableExtensions : object {
    [ExtensionAttribute]
public static string Join(IEnumerable`1<string> collection, string separator);
    [ExtensionAttribute]
[NotNullAttribute]
public static IDictionary`2<TKey, TElement> ToDictionaryEx(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector);
    [ExtensionAttribute]
public static void AddRange(ICollection`1<TValue> target, IEnumerable`1<TValue> source);
    [ExtensionAttribute]
[NotNullAttribute]
public static string Concat(IEnumerable`1<string> items, string separator);
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.ReSharper.UnitTestRunner.JavaScript.Common.ItemNotNullAttribute : Attribute {
}
[AttributeUsageAttribute("24516")]
internal class JetBrains.ReSharper.UnitTestRunner.JavaScript.Common.NotNullAttribute : Attribute {
}
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Common.ProcessArgumentEncoder : object {
    private static string EmptyArgument;
    private static char DoubleQuote;
    private static char Backslash;
    private static char Space;
    [NotNullAttribute]
public static string Encode(string argument);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Common.StopwatchExtensions : object {
    [ExtensionAttribute]
public static long GetRemaingTime(Stopwatch stopwatch, long timeout);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Common.StreamExtensions : object {
    [ExtensionAttribute]
public static Byte[] GetBytes(Stream stream);
    [ExtensionAttribute]
public static string ReadToEnd(Stream stream);
}
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.CommonFileName : object {
    public static string CommonJsImitation;
    public static string ReSharperConsoleReporterJs;
    public static string ReSharperErrorReporterJs;
    public static string ReSharperReporterJs;
    public static string ReSharperTopMessageBoxJs;
    public static string ReSharperTopMessageBoxCss;
    public static string ReSharperUtilsJs;
    public static string SprintfJs;
    public static string FaviconIco;
}
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.CommonFileRole : object {
    public static string CommonJsImitation;
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.DuplicateTasksException : Exception {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Tasks>k__BackingField;
    public IEnumerable`1<string> Tasks { get; }
    public DuplicateTasksException(String[] tasks);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Tasks();
}
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.DurationConverter : object {
    public static Nullable`1<TimeSpan> FromString(string text);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.GenericFileRole : object {
    public static string TestFile;
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Harness.IndexFileBuilder : object {
    [NotNullAttribute]
private string myIndexFileTemplate;
    [NotNullAttribute]
private ICollection`1<string> myReferencedCssFiles;
    [NotNullAttribute]
private ICollection`1<string> myReferencedJsFiles;
    [NotNullAttribute]
private ICollection`1<string> myReSharperScripts;
    [NotNullAttribute]
private IDictionary`2<string, string> myTestFiles;
    [NotNullAttribute]
private ICollection`1<string> myModuleJsFiles;
    [NotNullAttribute]
private ICollection`1<string> myTestFrameworkReferences;
    [NotNullAttribute]
private ICollection`1<string> myTestNames;
    private string myErrorMessage;
    private string myLoadScriptTemplate;
    private string myProjectFolder;
    private string mySolutionFolder;
    public IndexFileBuilder(string template);
    [NotNullAttribute]
public static IndexFileBuilder Create(string template);
    [NotNullAttribute]
public IndexFileBuilder SetSolutionFolder(string solutionFolder);
    [NotNullAttribute]
public IndexFileBuilder SetProjectFolder(string projectFolder);
    [NotNullAttribute]
public IndexFileBuilder SetLoadScriptTemplate(string loadScriptTemplate);
    [NotNullAttribute]
public IndexFileBuilder AddTestNames(IEnumerable`1<string> testNames);
    [NotNullAttribute]
public IndexFileBuilder AddReferencedCssFiles(IEnumerable`1<string> files);
    [NotNullAttribute]
public IndexFileBuilder AddReferencedJsFiles(IEnumerable`1<string> files);
    [NotNullAttribute]
public IndexFileBuilder AddModuleJsFiles(IEnumerable`1<string> files);
    [NotNullAttribute]
public IndexFileBuilder AddTestFrameworkReferences(IEnumerable`1<string> references);
    [NotNullAttribute]
public IndexFileBuilder AddReSharperScripts(IEnumerable`1<string> scripts);
    [NotNullAttribute]
public IndexFileBuilder AddTestFiles(IDictionary`2<string, string> files);
    [NotNullAttribute]
public IndexFileBuilder SetErrorMessage(string message);
    [NotNullAttribute]
public string Build();
    [NotNullAttribute]
private static string ProcessTemplate(string template, IDictionary`2<string, string> placeholders);
    private static string GetScriptType(string url, ISet`1<string> modules);
    private static string GetRelativeDirUrl(string rootDir, string filePath, bool isSolutionPath);
    [NotNullAttribute]
public static string EncodeStringLiteral(string text);
    [NotNullAttribute]
private static string GetReferencedFileUrl(string referencedFileUrl);
}
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Harness.Macros : object {
    public static string ReferencedCssFiles;
    public static string TestFrameworkDependencies;
    public static string ReferencedJsFiles;
    public static string ReSharperIntegration;
    public static string TestNames;
    public static string SolutionDir;
    public static string ProjectDir;
    public static string TestFileDir;
    public static string TestFileProjectDir;
    public static string TestFileSolutionDir;
    public static string TestFileFullName;
    public static string TestFileName;
    public static string TestFileNameWithoutExtension;
    public static string ReSharperMessage;
}
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Html.HtmlConst : object {
    public static string Script;
    public static string Link;
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Html.HtmlDocument : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<ScriptTag> <AllScriptTags>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<LinkTag> <AllLinkTags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public IEnumerable`1<ScriptTag> AllScriptTags { get; }
    public IEnumerable`1<LinkTag> AllLinkTags { get; }
    public string Text { get; }
    internal HtmlDocument(string text, IEnumerable`1<ScriptTag> scripts, IEnumerable`1<LinkTag> links);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<ScriptTag> get_AllScriptTags();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<LinkTag> get_AllLinkTags();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Html.HtmlTagExtensions : object {
    private static string ToHtmlString(string tagName, IDictionary`2<string, string> attributes, HtmlTagType type);
    private static string EncodeUrl(string url);
    [ExtensionAttribute]
public static string ToHtmlString(ScriptTag tag);
    [ExtensionAttribute]
public static string ToHtmlString(LinkTag tag);
}
public interface JetBrains.ReSharper.UnitTestRunner.JavaScript.Html.IHtmlDocument {
    [NotNullAttribute]
public string Text { get; }
    [NotNullAttribute]
[ItemNotNullAttribute]
public IEnumerable`1<ScriptTag> AllScriptTags { get; }
    [NotNullAttribute]
[ItemNotNullAttribute]
public IEnumerable`1<LinkTag> AllLinkTags { get; }
    public abstract virtual string get_Text();
    public abstract virtual IEnumerable`1<ScriptTag> get_AllScriptTags();
    public abstract virtual IEnumerable`1<LinkTag> get_AllLinkTags();
}
public interface JetBrains.ReSharper.UnitTestRunner.JavaScript.Html.ISimpleHtmlParser {
    [NotNullAttribute]
public abstract virtual IHtmlDocument Parse(string text);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Html.LinkTag : object {
    [CompilerGeneratedAttribute]
private string <Relationship>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LinkType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LinkRef>k__BackingField;
    public string Relationship { get; }
    public string LinkType { get; }
    public string LinkRef { get; }
    public LinkTag(string rel, string type, string href);
    [CompilerGeneratedAttribute]
public string get_Relationship();
    [CompilerGeneratedAttribute]
public string get_LinkType();
    [CompilerGeneratedAttribute]
public string get_LinkRef();
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Html.LinkTagParser : TagParser`1<LinkTag> {
    public LinkTagParser(ILogger logger);
    protected virtual LinkTag CreateTag(IDictionary`2<string, string> attributes);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Html.ScriptTag : object {
    [CompilerGeneratedAttribute]
private string <LanguageType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceRef>k__BackingField;
    public string LanguageType { get; }
    public string SourceRef { get; }
    public ScriptTag(string type, string src);
    [CompilerGeneratedAttribute]
public string get_LanguageType();
    [CompilerGeneratedAttribute]
public string get_SourceRef();
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Html.ScriptTagParser : TagParser`1<ScriptTag> {
    public ScriptTagParser(ILogger logger);
    protected virtual ScriptTag CreateTag(IDictionary`2<string, string> attributes);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Html.SimpleHtmlParser : object {
    [NotNullAttribute]
private LinkTagParser myLinkTagParser;
    [NotNullAttribute]
private ScriptTagParser myScriptTagParser;
    public SimpleHtmlParser(ILogger logger);
    public sealed virtual IHtmlDocument Parse(string text);
}
public abstract class JetBrains.ReSharper.UnitTestRunner.JavaScript.Html.TagParser`1 : object {
    [NotNullAttribute]
private Regex myAllTagsRegex;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private Regex mySingleTagRegex;
    protected TagParser`1(string tagName, ILogger logger);
    [NotNullAttribute]
private static string GetAllTagsPattern(string tagName);
    [NotNullAttribute]
private static string GetSingleTagPattern(string tagName);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestRunner.JavaScript.Html.TagParser`1/<Parse>d__6")]
[NotNullAttribute]
public IEnumerable`1<T> Parse(string text);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestRunner.JavaScript.Html.TagParser`1/<ParseAllTags>d__7")]
[NotNullAttribute]
private IEnumerable`1<string> ParseAllTags(string text);
    private T ParseTag(string tagText);
    [NotNullAttribute]
private static string RemoveQuotes(string quotedString);
    [NotNullAttribute]
protected abstract virtual T CreateTag(IDictionary`2<string, string> attributes);
}
public abstract class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.BaseMiddleware : OwinMiddleware {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [NotNullAttribute]
protected ILogger Logger { get; }
    protected BaseMiddleware(OwinMiddleware next, ILogger logger);
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    public sealed virtual Task Invoke(IOwinContext context);
    protected abstract virtual Task InvokeCore(IOwinContext context);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.BeginMiddleware : BaseMiddleware {
    public BeginMiddleware(OwinMiddleware next, ILogger logger);
    protected virtual Task InvokeCore(IOwinContext context);
}
public abstract class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.CommandMiddleware : BaseMiddleware {
    public static int MaxArgumentsLengthKb;
    [NotNullAttribute]
private string myCommand;
    protected CommandMiddleware(OwinMiddleware next, string command, ILogger logger);
    protected abstract virtual Task InvokeCore(IDictionary`2<string, string> arguments, IOwinResponse response);
    protected sealed virtual Task InvokeCore(IOwinContext context);
    [NotNullAttribute]
private IDictionary`2<string, string> ReadArguments(IOwinRequest request);
    [NotNullAttribute]
private string ReadArgumentsString(IOwinRequest request);
    [NotNullAttribute]
private static string ReadGetArgumentsString(IOwinRequest request);
    [NotNullAttribute]
private static string ReadPostArgumentsString(IOwinRequest request);
}
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.Commands.CommandId : object {
    public static string TestStarted;
    public static string TestFinished;
    public static string TestException;
    public static string TestOutput;
    public static string TestRunStarted;
    public static string TestRunError;
    public static string TestRunFinished;
    public static string ReferenceFile;
}
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.Commands.CommandParameterId : object {
    public static string Message;
    public static string Test;
    public static string Path;
    public static string Result;
    public static string Duration;
    public static string StackTrace;
    public static string Type;
    public static string FailChildren;
}
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.Commands.Constants : object {
    public static string UrlPrefix;
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.Commands.TestExceptionMiddleware : TestRunCommandMiddleware {
    public TestExceptionMiddleware(OwinMiddleware next, ITestRunManager testRunManager, ILogger logger);
    protected virtual Task InvokeCore(IDictionary`2<string, string> arguments, IOwinResponse response);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.Commands.TestFinishedMiddleware : TestRunCommandMiddleware {
    public TestFinishedMiddleware(OwinMiddleware next, ITestRunManager testRunManager, ILogger logger);
    protected virtual Task InvokeCore(IDictionary`2<string, string> arguments, IOwinResponse response);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.Commands.TestOutputMiddleware : TestRunCommandMiddleware {
    private IDictionary`2<string, TestOutputType> myMessageTypes;
    public TestOutputMiddleware(OwinMiddleware next, ITestRunManager testRunManager, ILogger logger);
    protected virtual Task InvokeCore(IDictionary`2<string, string> arguments, IOwinResponse response);
}
public abstract class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.Commands.TestRunCommandMiddleware : CommandMiddleware {
    [CompilerGeneratedAttribute]
private ITestRunManager <TestRunManager>k__BackingField;
    [NotNullAttribute]
protected ITestRunManager TestRunManager { get; }
    protected TestRunCommandMiddleware(OwinMiddleware next, string command, ITestRunManager testRunManager, ILogger logger);
    [CompilerGeneratedAttribute]
protected ITestRunManager get_TestRunManager();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.Commands.TestRunCommandsExtensions : object {
    [ExtensionAttribute]
private static IAppBuilder MapCommand(IAppBuilder builder, string command, ITestRunManager testRunManager, ILogger logger);
    [ExtensionAttribute]
public static IAppBuilder UseTestRunCommands(IAppBuilder builder, ITestRunManager testRunManager, ILogger logger);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.Commands.TestRunErrorMiddleware : TestRunCommandMiddleware {
    public TestRunErrorMiddleware(OwinMiddleware next, ITestRunManager testRunManager, ILogger logger);
    protected virtual Task InvokeCore(IDictionary`2<string, string> arguments, IOwinResponse response);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.Commands.TestRunFinishedMiddleware : TestRunCommandMiddleware {
    public TestRunFinishedMiddleware(OwinMiddleware next, ITestRunManager testRunManager, ILogger logger);
    protected virtual Task InvokeCore(IDictionary`2<string, string> arguments, IOwinResponse response);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.Commands.TestRunStartedMiddleware : TestRunCommandMiddleware {
    public TestRunStartedMiddleware(OwinMiddleware next, ITestRunManager testRunManager, ILogger logger);
    protected virtual Task InvokeCore(IDictionary`2<string, string> arguments, IOwinResponse response);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.Commands.TestStartedMiddleware : TestRunCommandMiddleware {
    public TestStartedMiddleware(OwinMiddleware next, ITestRunManager testRunManager, ILogger logger);
    protected virtual Task InvokeCore(IDictionary`2<string, string> arguments, IOwinResponse response);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.ContentTypeProviderExtensions : object {
    [ExtensionAttribute]
public static string GetContentType(IContentTypeProvider provider, string subPath);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.EndMiddleware : BaseMiddleware {
    public EndMiddleware(OwinMiddleware next, ILogger logger);
    protected virtual Task InvokeCore(IOwinContext context);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.FileSystemExtensions : object {
    [ExtensionAttribute]
public static string ReadAllText(IFileSystem fileSystem, string fileName);
}
public interface JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.IWebServer {
    public int PortNumber { get; }
    public string Url { get; }
    public abstract virtual int get_PortNumber();
    public abstract virtual string get_Url();
}
internal static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.JavaScriptFilePath : object {
    public static bool IsSolutionsRelativePath(string path);
    public static bool IsProjectsRelativePath(string path);
    public static bool IsWellFormedRelativePath(string path);
    public static string GetFilePath(string solutionDir, string projectDir, string relativePath);
    public static string GetFilePathInSolution(string solutionDir, string solutionsRelativePath);
    public static string GetFilePathInProject(string projectDir, string projectsRelativePath);
    public static string GetSolutionFilePath(string solutionDir, string fullFileName);
    public static bool IsJsFile(string filePath);
    public static bool IsCssFile(string filePath);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.LocalFilesExtensions : object {
    [ExtensionAttribute]
public static IAppBuilder UseLocalFiles(IAppBuilder builder, IFileSystem fileSystem, IDictionary`2<string, string> fileMappings, ILogger logger);
}
internal class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.LocalFilesMiddleware : BaseMiddleware {
    [NotNullAttribute]
private IContentTypeProvider myContentTypeProvider;
    [NotNullAttribute]
private IDictionary`2<string, string> myFileMap;
    [NotNullAttribute]
private IFileSystem myFileSystem;
    public LocalFilesMiddleware(OwinMiddleware next, IFileSystem fileSystem, IContentTypeProvider contentTypeProvider, IDictionary`2<string, string> fileMap, ILogger logger);
    protected virtual Task InvokeCore(IOwinContext context);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.LocalFilesOptions : object {
    [CompilerGeneratedAttribute]
private string <SolutionDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectDir>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <References>k__BackingField;
    public string SolutionDir { get; public set; }
    public string ProjectDir { get; public set; }
    public IEnumerable`1<string> References { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SolutionDir();
    [CompilerGeneratedAttribute]
public void set_SolutionDir(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectDir();
    [CompilerGeneratedAttribute]
public void set_ProjectDir(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_References();
    [CompilerGeneratedAttribute]
public void set_References(IEnumerable`1<string> value);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.LocalFilesOptionsExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IDictionary`2<string, string> ToFileMap(LocalFilesOptions options);
    private static string GetLocalPath(string solutionDir, string projectDir, string relativePath);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.LocalFileSystem : object {
    public sealed virtual bool TryGetDirectoryContents(string subpath, IEnumerable`1& contents);
    public sealed virtual bool TryGetFileInfo(string subpath, IFileInfo& fileInfo);
    private static IFileInfo CreateFileInfo(FileSystemInfo fileSystemInfo);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.LogMiddleware : BaseMiddleware {
    public LogMiddleware(OwinMiddleware next, ILogger logger);
    protected virtual Task InvokeCore(IOwinContext context);
    private void LogResponse(IOwinContext context);
    private void LogRequest(IOwinContext context);
    private static void WriteResponse(IOwinResponse response, StringBuilder output);
    private static void WriteRequest(IOwinRequest request, StringBuilder output);
    private static string FormatValues(IEnumerable`1<KeyValuePair`2<TKey, TValue>> values);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.LogMiddlewareExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IAppBuilder UseLogAlwaysFirst(IAppBuilder builder, ILogger logger);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.OwinContextExtensions : object {
    private static string HandledKey;
    [ExtensionAttribute]
public static void StartHandling(IOwinContext context);
    [ExtensionAttribute]
public static void SetHandled(IOwinContext context, StatusCode statusCode);
    [ExtensionAttribute]
public static bool IsHandled(IOwinContext context);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.OwinRequestExtensions : object {
    [ExtensionAttribute]
private static bool IsSpecificMethod(IOwinRequest request, string method);
    [ExtensionAttribute]
public static bool IsPostRequest(IOwinRequest request);
    [ExtensionAttribute]
public static bool IsGetRequest(IOwinRequest request);
    [ExtensionAttribute]
public static bool PathEquals(IOwinRequest request, string path);
    [ExtensionAttribute]
public static bool PathBaseEquals(IOwinRequest request, string pathBase);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.OwinResponseExtensions : object {
    [ExtensionAttribute]
public static Task SendLocalFileAsync(IOwinResponse response, IContentTypeProvider contentTypeProvider, IFileSystem fileSystem, string filePath);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.ReferenceFilesExtensions : object {
    [ExtensionAttribute]
public static IAppBuilder UseReferenceFiles(IAppBuilder builder, IFileSystem fileSystem, IDictionary`2<string, string> files, ILogger logger);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.ReferenceFilesMiddleware : CommandMiddleware {
    [NotNullAttribute]
private IContentTypeProvider myContentTypeProvider;
    [NotNullAttribute]
private IDictionary`2<string, string> myFiles;
    [NotNullAttribute]
private IFileSystem myFileSystem;
    public ReferenceFilesMiddleware(OwinMiddleware next, IFileSystem fileSystem, ILogger logger, IContentTypeProvider contentTypeProvider, IDictionary`2<string, string> files);
    protected virtual Task InvokeCore(IDictionary`2<string, string> arguments, IOwinResponse response);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.ResourceExtensions : object {
    [ExtensionAttribute]
public static IAppBuilder UseResources(IAppBuilder builder, Assembly assembly, IDictionary`2<string, string> resources, ILogger logger);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.ResourceMiddleware : BaseMiddleware {
    [NotNullAttribute]
private Assembly myAssembly;
    [NotNullAttribute]
private IContentTypeProvider myContentTypeProvider;
    [NotNullAttribute]
private string myPath;
    [NotNullAttribute]
private string myResourceName;
    public ResourceMiddleware(OwinMiddleware next, string path, Assembly assembly, string resourceName, IContentTypeProvider contentTypeProvider, ILogger logger);
    protected virtual Task InvokeCore(IOwinContext context);
}
public enum JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.StatusCode : Enum {
    public int value__;
    public static StatusCode Ok200;
    public static StatusCode NotFound404;
    public static StatusCode InternalServerError500;
}
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.UrlDecoder : object {
    [NotNullAttribute]
public static IDictionary`2<string, string> DecodeArguments(string arguments);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.VirtualFile : object {
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [NotNullAttribute]
public string ContentType { get; }
    [NotNullAttribute]
public string Content { get; }
    public VirtualFile(string contentType, string content);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public string get_Content();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.VirtualFileExtensions : object {
    [ExtensionAttribute]
public static IAppBuilder UseVirtualFile(IAppBuilder builder, string path, string contentType, string content, ILogger logger);
    [ExtensionAttribute]
public static IAppBuilder UseVirtualFiles(IAppBuilder builder, IDictionary`2<string, VirtualFile> fileMappings, ILogger logger);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.VirtualFileMiddleware : BaseMiddleware {
    [NotNullAttribute]
private Byte[] myContent;
    [NotNullAttribute]
private string myContentType;
    [NotNullAttribute]
private string myPath;
    public VirtualFileMiddleware(OwinMiddleware next, string path, string contentType, string content, ILogger logger);
    protected virtual Task InvokeCore(IOwinContext context);
}
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.WebContentType : object {
    public static string Unknown;
    public static string WebFormUrlEncoded;
    public static string Html;
    public static string JavaScript;
    public static string TextJavaScript;
    public static string TextCss;
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.WebServer : object {
    public static int MinPortNumber;
    public static int MaxPortNumber;
    [NotNullAttribute]
private static ConcurrentRandom ourPortNumberGenerator;
    [NotNullAttribute]
private IDisposable myInstance;
    [CompilerGeneratedAttribute]
private int <PortNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public int PortNumber { get; }
    public string Url { get; }
    private WebServer(IDisposable instance, int portNumber, string url);
    private static WebServer();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public sealed virtual int get_PortNumber();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Url();
    [NotNullAttribute]
public static IWebServer Start(Action`1<IAppBuilder> startup);
    public static void RunStartup(IAppBuilder builder, Action`1<IAppBuilder> startup);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.WebServerConfig : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <ResourceMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <LocalFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, VirtualFile> <VirtualFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <ReferencedFiles>k__BackingField;
    [NotNullAttribute]
public IDictionary`2<string, string> ResourceMappings { get; }
    [NotNullAttribute]
public IDictionary`2<string, string> LocalFiles { get; }
    [NotNullAttribute]
public IDictionary`2<string, VirtualFile> VirtualFiles { get; }
    [NotNullAttribute]
public IDictionary`2<string, string> ReferencedFiles { get; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_ResourceMappings();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_LocalFiles();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, VirtualFile> get_VirtualFiles();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_ReferencedFiles();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.WebServerConfigExtensions : object {
    [ExtensionAttribute]
public static IAppBuilder UseWebConfig(IAppBuilder builder, WebServerConfig config, IFileSystem fileSystem, ITestRunManager testRunManager, ILogger logger);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Http.WebServerStartupException : AggregateException {
    public WebServerStartupException(string message, Exception innerException);
    public WebServerStartupException(string message, IEnumerable`1<Exception> innerExceptions);
}
public interface JetBrains.ReSharper.UnitTestRunner.JavaScript.IJavaScriptTestRunner {
    public abstract virtual void Abort();
    public abstract virtual void Cancel();
    public abstract virtual void Run(IUnitTestRun run);
}
public interface JetBrains.ReSharper.UnitTestRunner.JavaScript.ITestRunManager {
    public bool IsFinished { get; }
    public abstract virtual bool get_IsFinished();
    public abstract virtual IDictionary`2<string, ITestRunTask> GetTasks(IEnumerable`1<string> taskIds);
    public abstract virtual void TestRunStarted();
    public abstract virtual void TestRunError(string message, string stackTrace);
    public abstract virtual void TestRunFinished();
    public abstract virtual void TestStarted(string testId);
    public abstract virtual void TestFinished(string testId, Nullable`1<UnitTestStatus> result, string message, Nullable`1<TimeSpan> duration);
    public abstract virtual void TestException(string testId, string message, string stackTrace, bool failChildren);
    public abstract virtual void TestOutput(string testId, string message, TestOutputType outputType);
    public abstract virtual bool WaitFor(long milliseconds, CancellationToken cancellationToken);
    public abstract virtual void Abort(TaskAbortReason reason);
}
public interface JetBrains.ReSharper.UnitTestRunner.JavaScript.ITestRunTask {
    public string TaskId { get; }
    public ICollection`1<ITestRunTask> Children { get; }
    public bool IsFinished { get; }
    public abstract virtual string get_TaskId();
    public abstract virtual ICollection`1<ITestRunTask> get_Children();
    public abstract virtual bool get_IsFinished();
    public abstract virtual void Start();
    public abstract virtual void Abort(TaskAbortReason reason);
    public abstract virtual void Finish(Nullable`1<UnitTestStatus> result, string message, Nullable`1<TimeSpan> duration);
    public abstract virtual void Fail(string message, string stackTrace, bool failChildren);
    public abstract virtual void Out(string message, TestOutputType outputType);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Jasmine.Jasmine13TestRunner : JavaScriptTestRunnerBase {
    public static string ID;
    public Jasmine13TestRunner(IJavaScriptServiceProvider serviceProvider, IUnitTestRun run, ILogger logger);
    protected virtual string GetTestId(TaskExecutionNode node);
    protected virtual TestRunnerConfig GetTestRunnerConfig();
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Jasmine.Jasmine20TestRunner : Jasmine2XTestRunner {
    public static string ID;
    public Jasmine20TestRunner(IJavaScriptServiceProvider serviceProvider, IUnitTestRun run, ILogger logger);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Jasmine.Jasmine21TestRunner : Jasmine2XTestRunner {
    public static string ID;
    public Jasmine21TestRunner(IJavaScriptServiceProvider serviceProvider, IUnitTestRun run, ILogger logger);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Jasmine.Jasmine22TestRunner : Jasmine2XTestRunner {
    public static string ID;
    public Jasmine22TestRunner(IJavaScriptServiceProvider serviceProvider, IUnitTestRun run, ILogger logger);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Jasmine.Jasmine23TestRunner : Jasmine2XTestRunner {
    public static string ID;
    public Jasmine23TestRunner(IJavaScriptServiceProvider serviceProvider, IUnitTestRun run, ILogger logger);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Jasmine.Jasmine24TestRunner : Jasmine2XTestRunner {
    public static string ID;
    public Jasmine24TestRunner(IJavaScriptServiceProvider serviceProvider, IUnitTestRun run, ILogger logger);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Jasmine.Jasmine25TestRunner : Jasmine2XTestRunner {
    public static string ID;
    public Jasmine25TestRunner(IJavaScriptServiceProvider serviceProvider, IUnitTestRun run, ILogger logger);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Jasmine.Jasmine26TestRunner : Jasmine2XTestRunner {
    public static string ID;
    public Jasmine26TestRunner(IJavaScriptServiceProvider serviceProvider, IUnitTestRun run, ILogger logger);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Jasmine.Jasmine27TestRunner : Jasmine2XTestRunner {
    public static string ID;
    public Jasmine27TestRunner(IJavaScriptServiceProvider serviceProvider, IUnitTestRun run, ILogger logger);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Jasmine.Jasmine28TestRunner : Jasmine2XTestRunner {
    public static string ID;
    public Jasmine28TestRunner(IJavaScriptServiceProvider serviceProvider, IUnitTestRun run, ILogger logger);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Jasmine.Jasmine29TestRunner : Jasmine2XTestRunner {
    public static string ID;
    public Jasmine29TestRunner(IJavaScriptServiceProvider serviceProvider, IUnitTestRun run, ILogger logger);
}
public abstract class JetBrains.ReSharper.UnitTestRunner.JavaScript.Jasmine.Jasmine2XTestRunner : JavaScriptTestRunnerBase {
    protected Jasmine2XTestRunner(IJavaScriptServiceProvider serviceProvider, IUnitTestRun run, ILogger logger, string resourcePath);
    protected Jasmine2XTestRunner(IJavaScriptServiceProvider serviceProvider, IUnitTestRun run, string resourcePath, IJavaScriptRuntimeFactory runtimeFactory, IFileSystem fileSystem, ILogger logger);
    protected virtual string GetTestId(TaskExecutionNode node);
    protected virtual TestRunnerConfig GetTestRunnerConfig();
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Jasmine.Jasmine30TestRunner : Jasmine3XTestRunner {
    public static string ID;
    public Jasmine30TestRunner(IJavaScriptServiceProvider serviceProvider, IUnitTestRun run, ILogger logger);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Jasmine.Jasmine31TestRunner : Jasmine3XTestRunner {
    public static string ID;
    public Jasmine31TestRunner(IJavaScriptServiceProvider serviceProvider, IUnitTestRun run, ILogger logger);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Jasmine.Jasmine32TestRunner : Jasmine3XTestRunner {
    public static string ID;
    public Jasmine32TestRunner(IJavaScriptServiceProvider serviceProvider, IUnitTestRun run, ILogger logger);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Jasmine.Jasmine33TestRunner : Jasmine3XTestRunner {
    public static string ID;
    public Jasmine33TestRunner(IJavaScriptServiceProvider serviceProvider, IUnitTestRun run, ILogger logger);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Jasmine.Jasmine34TestRunner : Jasmine3XTestRunner {
    public static string ID;
    public Jasmine34TestRunner(IJavaScriptServiceProvider serviceProvider, IUnitTestRun run, ILogger logger);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Jasmine.Jasmine35TestRunner : Jasmine3XTestRunner {
    public static string ID;
    public Jasmine35TestRunner(IJavaScriptServiceProvider serviceProvider, IUnitTestRun run, ILogger logger);
}
public abstract class JetBrains.ReSharper.UnitTestRunner.JavaScript.Jasmine.Jasmine3XTestRunner : JavaScriptTestRunnerBase {
    protected Jasmine3XTestRunner(IJavaScriptServiceProvider serviceProvider, IUnitTestRun run, ILogger logger, string resourcePath);
    protected Jasmine3XTestRunner(IJavaScriptServiceProvider serviceProvider, IUnitTestRun run, string resourcePath, IJavaScriptRuntimeFactory runtimeFactory, IFileSystem fileSystem, ILogger logger);
    protected virtual string GetTestId(TaskExecutionNode node);
    protected virtual TestRunnerConfig GetTestRunnerConfig();
}
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Jasmine.JasmineFileName : object {
    public static string JasmineCss;
    public static string JasmineJs;
    public static string JasmineHtmlJs;
    public static string BootJs;
    public static string JasmineHtml;
    public static string LoadScriptTemplate;
    public static string Jasmine2XLoadScriptTemplate;
    public static string Jasmine3XLoadScriptTemplate;
    public static string JasmineReSharperReporterJs;
    public static string Jasmine2XJasmine2ReSharperReporterJs;
    public static string Jasmine3XJasmine3ReSharperReporterJs;
}
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Jasmine.JasmineFileRole : object {
    public static string JasmineJs;
    public static string JasmineHtmlJs;
    public static string BootJs;
    public static string JasmineCss;
    public static string Unknown;
}
public abstract class JetBrains.ReSharper.UnitTestRunner.JavaScript.JavaScriptTestRunnerBase : object {
    public static int TestRunTimeoutMs;
    [NotNullAttribute]
private CancellationTokenSource myCancellationTokenSource;
    [NotNullAttribute]
private IFileSystem myFileSystem;
    [NotNullAttribute]
private ILogger myLogger;
    private IJavaScriptServiceProvider myServiceProvider;
    [NotNullAttribute]
private IUnitTestRun myRun;
    [NotNullAttribute]
private IJavaScriptRuntimeFactory myRuntimeFactory;
    private TaskAbortReason myAbortReason;
    [CompilerGeneratedAttribute]
private string <ResourcePath>k__BackingField;
    [NotNullAttribute]
protected string ResourcePath { get; }
    protected JavaScriptTestRunnerBase(IJavaScriptServiceProvider serviceProvider, IUnitTestRun run, ILogger logger, string resourcePath);
    protected JavaScriptTestRunnerBase(IJavaScriptServiceProvider serviceProvider, IUnitTestRun run, string resourcePath, IJavaScriptRuntimeFactory runtimeFactory, IFileSystem fileSystem, ILogger logger);
    [CompilerGeneratedAttribute]
protected string get_ResourcePath();
    public sealed virtual void Run(IUnitTestRun run);
    public sealed virtual void Abort();
    public sealed virtual void Cancel();
    public sealed virtual void Dispose();
    public void GetTaskRunInfo(IUnitTestRun run, TestRunInfo& testRunInfo, JavaScriptRuntimeOptions& runtimeOptions);
    private bool TryExecuteTestRun(TestRunInfo testRunInfo, TestRunManagerBase testRunManager, JavaScriptRuntimeOptions runtimeOptions, ILogger logger);
    [NotNullAttribute]
protected abstract virtual TestRunnerConfig GetTestRunnerConfig();
    protected abstract virtual string GetTestId(TaskExecutionNode node);
    [NotNullAttribute]
public static string GetIndexTemplate(string frameworkName);
    public void Run(TestRunInfo testRunInfo, JavaScriptRuntimeOptions runtimeOptions);
    private TaskExecutionNode ToExecutionNode(RemoteTaskPacket packet, TaskExecutionNode parentNode);
    private TaskExecutionNode ToExecutionNode(IUnitTestRun run);
    private RemoteTaskPacket GetTasks(IUnitTestRun run);
    private static void AddToTasksTree(KeyedCollection`2<RemoteTask, RemoteTaskPacket> remoteTaskPackets, IList`1<RemoteTask> sequence, int i);
}
public interface JetBrains.ReSharper.UnitTestRunner.JavaScript.New.IJavaScriptTestElement {
    [NotNullAttribute]
public abstract virtual IProjectFile GetProjectFile();
}
public interface JetBrains.ReSharper.UnitTestRunner.JavaScript.New.IJavaScriptUnitTestRunCache {
    public abstract virtual string GetReferencedFileLocation(IPsiSourceFile psiSourceFile, Func`2<IPsiSourceFile, string> newValueFunc);
    public abstract virtual bool GetFileIsJavaScriptModule(string filePath, Func`2<string, bool> newValueFunc);
}
public interface JetBrains.ReSharper.UnitTestRunner.JavaScript.New.IJavaScriptUnitTestRunStrategy {
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.New.JavaScriptRuntimeDescriptor : object {
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    public IProject Project { get; }
    public JavaScriptRuntimeDescriptor(IProject project);
    [CompilerGeneratedAttribute]
public IProject get_Project();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public bool Equals(JavaScriptRuntimeDescriptor obj);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.New.JavaScriptUnitTestRunCache : object {
    [NotNullAttribute]
private IDictionary`2<string, bool> myFileModules;
    [NotNullAttribute]
private IDictionary`2<IProject, string> myProjectFrameworks;
    [NotNullAttribute]
private IDictionary`2<IPsiSourceFile, string> mySourceFileLocations;
    public sealed virtual string GetReferencedFileLocation(IPsiSourceFile psiSourceFile, Func`2<IPsiSourceFile, string> newValueFunc);
    public sealed virtual bool GetFileIsJavaScriptModule(string filePath, Func`2<string, bool> newValueFunc);
    public string GetUnitTestingFrameworkVersion(IProject project, Func`2<IProject, string> newValueFunc);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.New.JavaScriptUnitTestRunExtensions : object {
    [NotNullAttribute]
private static Key`1<IJavaScriptTestRunner> ourRunnerKey;
    [NotNullAttribute]
private static Key`1<IJavaScriptUnitTestRunCache> ourCacheKey;
    [NotNullAttribute]
private static Key`1<ConcurrentDictionary`2<string, bool>> ourModuleCacheKey;
    private static JavaScriptUnitTestRunExtensions();
    [ExtensionAttribute]
[NotNullAttribute]
public static IJavaScriptUnitTestRunCache GetJavaScriptCache(IUnitTestRun run);
    [ExtensionAttribute]
public static void SetTestRunner(IUnitTestRun run, IJavaScriptTestRunner runner);
    [ExtensionAttribute]
public static bool TryGetTestRunner(IUnitTestRun run, IJavaScriptTestRunner& runner);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.New.JavaScriptUnitTestRunStrategyBase`2 : object {
    [NotNullAttribute]
private ILogger myLogger;
    public JavaScriptUnitTestRunStrategyBase`2(ILogger logger);
    public sealed virtual bool RequiresProjectBuild(IProject project);
    public sealed virtual bool RequiresProjectExplorationAfterBuild(IProject project);
    public bool RequiresProjectPropertiesRefreshBeforeLaunch(IProject project);
    public sealed virtual IProject GetProjectForPropertiesRefreshBeforeLaunch(IUnitTestElement element);
    public sealed virtual IRuntimeDescriptor GetRuntimeDescriptor(IUnitTestLaunch launch, IUnitTestElement element);
    public sealed virtual Task Run(IUnitTestRun run);
    public sealed virtual void Cancel(IUnitTestRun run);
    public sealed virtual void Abort(IUnitTestRun run);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.QUnit.QUnit2XTestRunner : JavaScriptTestRunnerBase {
    public static string ID;
    public QUnit2XTestRunner(IJavaScriptServiceProvider serviceProvider, IUnitTestRun run, ILogger logger);
    protected virtual string GetTestId(TaskExecutionNode node);
    protected virtual TestRunnerConfig GetTestRunnerConfig();
}
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.QUnit.QUnitFileName : object {
    public static string QUnitCss;
    public static string QUnitJs;
    public static string QUnitHtml;
    public static string LoadScriptTemplate;
    public static string QUnitReSharperReporterJs;
    public static string ReSharperQUnitTestFilterJs;
    public static string ReSharperQUnitTestRunnerJs;
}
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.QUnit.QUnitFileRole : object {
    public static string QUnitCss;
    public static string QUnitJs;
    public static string Unknown;
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.QUnit.QUnitTestRunner : JavaScriptTestRunnerBase {
    public static string ID;
    public QUnitTestRunner(IJavaScriptServiceProvider serviceProvider, IUnitTestRun run, ILogger logger);
    protected virtual string GetTestId(TaskExecutionNode node);
    protected virtual TestRunnerConfig GetTestRunnerConfig();
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Resource : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private Specifity <Specifity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileRole>k__BackingField;
    [NotNullAttribute]
public string FileName { get; }
    public Specifity Specifity { get; }
    [CanBeNullAttribute]
public string FileRole { get; }
    public Resource(string fileName, Specifity specifity, string fileRole);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public Specifity get_Specifity();
    [CompilerGeneratedAttribute]
public string get_FileRole();
}
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.ResourceLoader : object {
    [NotNullAttribute]
public static string ResourceRootPath;
    private static ResourceLoader();
    [NotNullAttribute]
public static string ReadAllText(string resourceName);
}
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Runtime.BrowserId : object {
    public static string SystemDefault;
    public static string GoogleChrome;
    public static string GoogleChromeHeadless;
    public static string GoogleChromeCanary;
    public static string GoogleChromeCanaryHeadless;
    public static string Opera;
    public static string Firefox;
    public static string FirefoxHeadless;
    public static string FirefoxNightly;
    public static string FirefoxNightlyHeadless;
    public static string FirefoxDeveloper;
    public static string FirefoxDeveloperHeadless;
    public static string Safari;
    public static string InternetExplorer;
    public static string MicrosoftEdge;
    public static string MicrosoftEdgeHeadless;
    public static string MicrosoftEdgeBeta;
    public static string MicrosoftEdgeBetaHeadless;
    public static string CustomWebBrowser;
    public static string CustomWebBrowserHeadless;
    private static string HeadlessPostfix;
    public static bool IsHeadless(string browserId);
    [NotNullAttribute]
public static string ToHeadlessId(string browserId);
}
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.Runtime.BrowserName : object {
    public static string SystemDefault;
    public static string GoogleChrome;
    public static string GoogleChromeHeadless;
    public static string GoogleChromeCanary;
    public static string GoogleChromeCanaryHeadless;
    public static string Firefox;
    public static string FirefoxHeadless;
    public static string FirefoxNightly;
    public static string FirefoxNightlyHeadless;
    public static string Opera;
    public static string InternetExplorer;
    public static string MicrosoftEdge;
    public static string MicrosoftEdgeHeadless;
    public static string MicrosoftEdgeBeta;
    public static string MicrosoftEdgeBetaHeadless;
    public static string Safari;
    public static string CustomWebBrowser;
    public static string CustomWebBrowserHeadless;
    private static string HeadlessPostfix;
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Runtime.DefaultJavaScriptRuntime : JavaScriptRuntimeBase {
    public DefaultJavaScriptRuntime(IJavaScriptRuntimeObserver observer, ILogger logger);
    protected virtual void PrepareProcess(Process process, string url);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Runtime.GenericHeadlessRuntime : JavaScriptRuntimeBase {
    [NotNullAttribute]
private string myBrowserLocation;
    [NotNullAttribute]
private CommandLineBuilder myCommandLineArguments;
    public GenericHeadlessRuntime(string browserName, string browserLocation, string headlessCommandLineArguments, string commandLineArguments, IJavaScriptRuntimeObserver observer, ILogger logger);
    protected virtual void PrepareProcess(Process process, string url);
    public virtual void WaitForExit();
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Runtime.GenericWebBrowser : JavaScriptRuntimeBase {
    [NotNullAttribute]
private string myBrowserLocation;
    [NotNullAttribute]
private CommandLineBuilder myCommandLinerArguments;
    public GenericWebBrowser(string name, string browserLocation, string commandLinerArguments, IJavaScriptRuntimeObserver observer, ILogger logger);
    protected virtual void PrepareProcess(Process process, string url);
}
public interface JetBrains.ReSharper.UnitTestRunner.JavaScript.Runtime.IJavaScriptRuntime {
    [NotNullAttribute]
public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual bool Start(string url);
    public abstract virtual bool WaitFor(long milliseconds, CancellationToken cancellationToken);
    public abstract virtual void WaitForExit();
    public abstract virtual void Abort();
}
public interface JetBrains.ReSharper.UnitTestRunner.JavaScript.Runtime.IJavaScriptRuntimeFactory {
    [NotNullAttribute]
public abstract virtual IJavaScriptRuntime CreateInstance(JavaScriptRuntimeOptions options, IJavaScriptRuntimeObserver observer, ILogger logger);
}
public interface JetBrains.ReSharper.UnitTestRunner.JavaScript.Runtime.IJavaScriptRuntimeObserver {
    public abstract virtual void ErrorReceived(string message, Exception exception);
    public abstract virtual void DataReceived(string message);
}
public abstract class JetBrains.ReSharper.UnitTestRunner.JavaScript.Runtime.JavaScriptRuntimeBase : object {
    private bool myAttachToProcess;
    private Process myProcess;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IJavaScriptRuntimeObserver <Observer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NotNullAttribute]
protected ILogger Logger { get; }
    [NotNullAttribute]
protected IJavaScriptRuntimeObserver Observer { get; }
    public string Name { get; }
    protected JavaScriptRuntimeBase(string name, IJavaScriptRuntimeObserver observer, ILogger logger, bool attachToProcess);
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
protected IJavaScriptRuntimeObserver get_Observer();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public sealed virtual bool Start(string url);
    public sealed virtual bool WaitFor(long milliseconds, CancellationToken cancellationToken);
    public virtual void WaitForExit();
    public sealed virtual void Abort();
    public sealed virtual void Dispose();
    protected abstract virtual void PrepareProcess(Process process, string url);
    protected virtual void ProcessStarted(Process process);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Runtime.JavaScriptRuntimeFactory : object {
    public sealed virtual IJavaScriptRuntime CreateInstance(JavaScriptRuntimeOptions options, IJavaScriptRuntimeObserver observer, ILogger logger);
    [NotNullAttribute]
private static IJavaScriptRuntime CreateFirefoxHeadless(string browserName, string browserLocation, string commandLineArguments, IJavaScriptRuntimeObserver observer, ILogger logger);
    private static int GetFreeTcpPort(int initialPort);
    [NotNullAttribute]
private static IJavaScriptRuntime CreateMicrosoftEdgeHeadless(string browserName, string browserLocation, string commandLineArguments, IJavaScriptRuntimeObserver observer, ILogger logger);
    [NotNullAttribute]
private static IJavaScriptRuntime CreateChromeHeadless(string browserName, string browserLocation, string commandLineArguments, IJavaScriptRuntimeObserver observer, ILogger logger);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Runtime.JavaScriptRuntimeOptions : object {
    [CompilerGeneratedAttribute]
private string <BrowserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutablePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandLineArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ScriptPath>k__BackingField;
    [NotNullAttribute]
public string BrowserId { get; }
    [NotNullAttribute]
public string ExecutablePath { get; }
    [CanBeNullAttribute]
public string CommandLineArguments { get; public set; }
    [CanBeNullAttribute]
public string ScriptPath { get; public set; }
    public JavaScriptRuntimeOptions(string browserId, string executablePath);
    [CompilerGeneratedAttribute]
public string get_BrowserId();
    [CompilerGeneratedAttribute]
public string get_ExecutablePath();
    [CompilerGeneratedAttribute]
public string get_CommandLineArguments();
    [CompilerGeneratedAttribute]
public void set_CommandLineArguments(string value);
    [CompilerGeneratedAttribute]
public string get_ScriptPath();
    [CompilerGeneratedAttribute]
public void set_ScriptPath(string value);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Runtime.PhantomJavaScriptRuntime : JavaScriptRuntimeBase {
    [NotNullAttribute]
private CommandLineBuilder myCommandLineArguments;
    [NotNullAttribute]
private string myExecutablePath;
    public PhantomJavaScriptRuntime(string executablePath, string commandLineArguments, string scriptPath, IJavaScriptRuntimeObserver observer, ILogger logger);
    private void ProcessOnErrorDataReceived(object sender, DataReceivedEventArgs e);
    private void ProcessOnOutputDataReceived(object sender, DataReceivedEventArgs e);
    protected virtual void PrepareProcess(Process process, string url);
    protected virtual void ProcessStarted(Process process);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Runtime.UniversalMicrosoftEdgeBrowser : JavaScriptRuntimeBase {
    public UniversalMicrosoftEdgeBrowser(IJavaScriptRuntimeObserver observer, ILogger logger);
    protected virtual void PrepareProcess(Process process, string url);
}
public enum JetBrains.ReSharper.UnitTestRunner.JavaScript.Specifity : Enum {
    public int value__;
    public static Specifity Common;
    public static Specifity Framework;
}
public enum JetBrains.ReSharper.UnitTestRunner.JavaScript.TaskAbortReason : Enum {
    public int value__;
    public static TaskAbortReason Complete;
    public static TaskAbortReason Timeout;
    public static TaskAbortReason Abort;
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.TaskResultConverter : object {
    public static Nullable`1<UnitTestStatus> FromString(string text);
}
public interface JetBrains.ReSharper.UnitTestRunner.JavaScript.Tasks.IJavaScriptTestableTask {
    public string TestName { get; }
    public abstract virtual string get_TestName();
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Tasks.JavaScriptModuleTask : JavaScriptRemoteTaskBase {
    private string myModuleName;
    public string TestName { get; }
    public JavaScriptModuleTask(string moduleName, IJavaScriptTestElement element);
    public virtual string get_TestName();
    public sealed virtual bool Equals(JavaScriptModuleTask other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public abstract class JetBrains.ReSharper.UnitTestRunner.JavaScript.Tasks.JavaScriptRemoteTaskBase : RemoteTask {
    public string TestName { get; }
    protected JavaScriptRemoteTaskBase(IJavaScriptTestElement element);
    public abstract virtual string get_TestName();
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Tasks.JavaScriptTestFileTask : RemoteTask {
    [CompilerGeneratedAttribute]
private IEnumerable`1<TestRunFileInfo> <ReferencedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsJavaScriptModule>k__BackingField;
    [NotNullAttribute]
public IEnumerable`1<TestRunFileInfo> ReferencedFiles { get; }
    public string Filename { get; }
    public bool IsJavaScriptModule { get; }
    public JavaScriptTestFileTask(string filename, bool isJavascriptModule, IEnumerable`1<TestRunFileInfo> referencedFiles);
    [CompilerGeneratedAttribute]
public IEnumerable`1<TestRunFileInfo> get_ReferencedFiles();
    [CompilerGeneratedAttribute]
public string get_Filename();
    [CompilerGeneratedAttribute]
public bool get_IsJavaScriptModule();
    public sealed virtual bool Equals(JavaScriptTestFileTask other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Tasks.JavaScriptTestRunTask : RemoteTask {
    [CompilerGeneratedAttribute]
private string <BrowserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BrowserLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PhantomJsScriptLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandLine>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SolutionFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestPageFileName>k__BackingField;
    public string BrowserId { get; }
    public string BrowserLocation { get; }
    public string PhantomJsScriptLocation { get; }
    public string CommandLine { get; }
    public string ProjectFolder { get; }
    public string SolutionFolder { get; }
    public string TestPageFileName { get; }
    public JavaScriptTestRunTask(string browserId, string browserLocation, string phantomJsScriptLocation, string commandLine, string projectFolder, string solutionFolder, string testPageFileName);
    [CompilerGeneratedAttribute]
public string get_BrowserId();
    [CompilerGeneratedAttribute]
public string get_BrowserLocation();
    [CompilerGeneratedAttribute]
public string get_PhantomJsScriptLocation();
    [CompilerGeneratedAttribute]
public string get_CommandLine();
    [CompilerGeneratedAttribute]
public string get_ProjectFolder();
    [CompilerGeneratedAttribute]
public string get_SolutionFolder();
    [CompilerGeneratedAttribute]
public string get_TestPageFileName();
    public sealed virtual bool Equals(JavaScriptTestRunTask other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Tasks.JavaScriptTestTask : JavaScriptRemoteTaskBase {
    private string myTestName;
    public string TestName { get; }
    public JavaScriptTestTask(string testName, IJavaScriptTestElement element);
    public sealed virtual bool Equals(JavaScriptTestTask other);
    public virtual string get_TestName();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public abstract class JetBrains.ReSharper.UnitTestRunner.JavaScript.Tasks.RemoteTask : object {
    [CompilerGeneratedAttribute]
private IJavaScriptTestElement <Element>k__BackingField;
    [CanBeNullAttribute]
public IJavaScriptTestElement Element { get; public set; }
    protected RemoteTask(IJavaScriptTestElement element);
    [CompilerGeneratedAttribute]
public IJavaScriptTestElement get_Element();
    [CompilerGeneratedAttribute]
public void set_Element(IJavaScriptTestElement value);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Tasks.RemoteTaskPacket : object {
    private ChildrenTaskCollection myPackets;
    [CompilerGeneratedAttribute]
private RemoteTask <Task>k__BackingField;
    public RemoteTask Task { get; }
    public KeyedCollection`2<RemoteTask, RemoteTaskPacket> TaskPackets { get; }
    public RemoteTaskPacket(RemoteTask task);
    [CompilerGeneratedAttribute]
public RemoteTask get_Task();
    public KeyedCollection`2<RemoteTask, RemoteTaskPacket> get_TaskPackets();
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.Tasks.TaskExecutionNode : object {
    [CompilerGeneratedAttribute]
private TaskExecutionNode <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TaskExecutionNode> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoteTask <RemoteTask>k__BackingField;
    public TaskExecutionNode Parent { get; }
    public List`1<TaskExecutionNode> Children { get; }
    public RemoteTask RemoteTask { get; }
    public TaskExecutionNode(TaskExecutionNode parent, RemoteTask task);
    [CompilerGeneratedAttribute]
public TaskExecutionNode get_Parent();
    [CompilerGeneratedAttribute]
public List`1<TaskExecutionNode> get_Children();
    [CompilerGeneratedAttribute]
public RemoteTask get_RemoteTask();
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.TestRunFileInfo : object {
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileRole>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsJavaScriptModule>k__BackingField;
    [NotNullAttribute]
public string FilePath { get; }
    [CanBeNullAttribute]
public string FileRole { get; }
    public bool IsJavaScriptModule { get; }
    public TestRunFileInfo(string filePath, string fileRole, bool isJavaScriptModule);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public string get_FileRole();
    [CompilerGeneratedAttribute]
public bool get_IsJavaScriptModule();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private bool Equals(TestRunFileInfo other);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.TestRunInfo : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, ITestRunTask> <Tasks>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SolutionFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestPageFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TestRunFileInfo> <ReferencedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TestRunFileInfo> <TestFiles>k__BackingField;
    [NotNullAttribute]
public IDictionary`2<string, ITestRunTask> Tasks { get; }
    public string SolutionFolder { get; }
    public string ProjectFolder { get; }
    [NotNullAttribute]
public string TestPageFileName { get; }
    [NotNullAttribute]
[ItemNotNullAttribute]
public IEnumerable`1<TestRunFileInfo> ReferencedFiles { get; }
    [NotNullAttribute]
[ItemNotNullAttribute]
public IEnumerable`1<TestRunFileInfo> TestFiles { get; }
    public TestRunInfo(IDictionary`2<string, ITestRunTask> tasks, string solutionFolder, string projectFolder, IEnumerable`1<TestRunFileInfo> referencedFiles, string testPageFileName, IEnumerable`1<TestRunFileInfo> testFiles);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, ITestRunTask> get_Tasks();
    [CompilerGeneratedAttribute]
public string get_SolutionFolder();
    [CompilerGeneratedAttribute]
public string get_ProjectFolder();
    [CompilerGeneratedAttribute]
public string get_TestPageFileName();
    [CompilerGeneratedAttribute]
public IEnumerable`1<TestRunFileInfo> get_ReferencedFiles();
    [CompilerGeneratedAttribute]
public IEnumerable`1<TestRunFileInfo> get_TestFiles();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.TestRunInfoExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static WebServerConfig GetWebServerConfig(TestRunInfo testRunInfo, TestRunnerConfig testRunnerConfig, IFileSystem fileSystem, ILogger logger);
    private static string GetProjectFolder(TestRunInfo session);
    [NotNullAttribute]
private static IEnumerable`1<string> GetCustomReferences(TestRunInfo session, string indexTemplate, ILogger logger);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.TestRunManager : TestRunManagerBase {
    public TestRunManager(IUnitTestRun run, IDictionary`2<string, ITestRunTask> tasks, int completionTimeout);
    public TestRunManager(IUnitTestRun run, TestRunInfo testRunInfo, int completionTimeout);
    protected virtual void StartAsync(Action action);
}
public abstract class JetBrains.ReSharper.UnitTestRunner.JavaScript.TestRunManagerBase : object {
    private int myCompletionTimeout;
    [NotNullAttribute]
private IUnitTestRun myRun;
    [NotNullAttribute]
private IDictionary`2<string, ITestRunTask> myTasks;
    [CanBeNullAttribute]
private ITestRunTask modreq(System.Runtime.CompilerServices.IsVolatile) myCurrentTask;
    public bool IsFinished { get; }
    protected TestRunManagerBase(IUnitTestRun run, IDictionary`2<string, ITestRunTask> tasks, int completionTimeout);
    public sealed virtual void Dispose();
    public sealed virtual void ErrorReceived(string message, Exception exception);
    public sealed virtual void DataReceived(string message);
    public sealed virtual bool get_IsFinished();
    public sealed virtual IDictionary`2<string, ITestRunTask> GetTasks(IEnumerable`1<string> taskIds);
    public sealed virtual void TestRunStarted();
    public sealed virtual void TestRunError(string message, string stackTrace);
    public sealed virtual void TestRunFinished();
    public sealed virtual void TestStarted(string testId);
    public sealed virtual void TestException(string testId, string message, string stackTrace, bool failChildren);
    public sealed virtual void TestOutput(string testId, string message, TestOutputType outputType);
    public sealed virtual void TestFinished(string testId, Nullable`1<UnitTestStatus> result, string message, Nullable`1<TimeSpan> duration);
    public sealed virtual void Abort(TaskAbortReason reason);
    public sealed virtual bool WaitFor(long milliseconds, CancellationToken cancellationToken);
    private ITestRunTask GetTask(string testId);
    protected abstract virtual void StartAsync(Action action);
    [CompilerGeneratedAttribute]
private void <TestRunFinished>b__13_0();
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.TestRunnerConfig : object {
    [CompilerGeneratedAttribute]
private string <ResourcesRootPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrivateResourcesRelativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Resource <IndexResource>k__BackingField;
    [CompilerGeneratedAttribute]
private Resource <LoadScriptTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Resource> <CommonResources>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Resource> <FrameworkResources>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Resource> <ReSharperResources>k__BackingField;
    [NotNullAttribute]
public string ResourcesRootPath { get; public set; }
    [NotNullAttribute]
public string PrivateResourcesRelativePath { get; public set; }
    [NotNullAttribute]
public Resource IndexResource { get; public set; }
    [CanBeNullAttribute]
public Resource LoadScriptTemplate { get; public set; }
    [NotNullAttribute]
public IEnumerable`1<Resource> CommonResources { get; public set; }
    [NotNullAttribute]
public IEnumerable`1<Resource> FrameworkResources { get; public set; }
    [NotNullAttribute]
public IEnumerable`1<Resource> ReSharperResources { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ResourcesRootPath();
    [CompilerGeneratedAttribute]
public void set_ResourcesRootPath(string value);
    [CompilerGeneratedAttribute]
public string get_PrivateResourcesRelativePath();
    [CompilerGeneratedAttribute]
public void set_PrivateResourcesRelativePath(string value);
    [CompilerGeneratedAttribute]
public Resource get_IndexResource();
    [CompilerGeneratedAttribute]
public void set_IndexResource(Resource value);
    [CompilerGeneratedAttribute]
public Resource get_LoadScriptTemplate();
    [CompilerGeneratedAttribute]
public void set_LoadScriptTemplate(Resource value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Resource> get_CommonResources();
    [CompilerGeneratedAttribute]
public void set_CommonResources(IEnumerable`1<Resource> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Resource> get_FrameworkResources();
    [CompilerGeneratedAttribute]
public void set_FrameworkResources(IEnumerable`1<Resource> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Resource> get_ReSharperResources();
    [CompilerGeneratedAttribute]
public void set_ReSharperResources(IEnumerable`1<Resource> value);
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.TestRunTask : object {
    public static int ChildrenTimeout;
    [NotNullAttribute]
private ReaderWriterLockSlim myLockObject;
    [NotNullAttribute]
private IUnitTestRun myRun;
    [NotNullAttribute]
private JavaScriptRemoteTaskBase myTask;
    [NotNullAttribute]
private Stopwatch myTaskDurationStopwatch;
    private TaskState myTaskState;
    [CompilerGeneratedAttribute]
private string <TaskId>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ITestRunTask> <Children>k__BackingField;
    public string TaskId { get; }
    public ICollection`1<ITestRunTask> Children { get; }
    public bool IsFinished { get; }
    public TestRunTask(IUnitTestRun run, string taskId, JavaScriptRemoteTaskBase task, ICollection`1<ITestRunTask> children);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TaskId();
    [CompilerGeneratedAttribute]
public sealed virtual ICollection`1<ITestRunTask> get_Children();
    public sealed virtual bool get_IsFinished();
    public sealed virtual void Start();
    public sealed virtual void Abort(TaskAbortReason reason);
    public sealed virtual void Fail(string message, string stackTrace, bool failChildren);
    public sealed virtual void Out(string message, TestOutputType outputType);
    public sealed virtual void Finish(Nullable`1<UnitTestStatus> result, string message, Nullable`1<TimeSpan> duration);
    private void FailChildren(string message, string stackTrace);
    private void WaitForChildren();
    private bool TryStop();
    [CompilerGeneratedAttribute]
private void <WaitForChildren>b__21_0();
}
public class JetBrains.ReSharper.UnitTestRunner.JavaScript.TestRunTaskInfo : object {
    [CompilerGeneratedAttribute]
private string <TaskId>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TestRunTaskInfo> <Children>k__BackingField;
    public string TaskId { get; }
    public IEnumerable`1<TestRunTaskInfo> Children { get; }
    public TestRunTaskInfo(string taskId, IEnumerable`1<TestRunTaskInfo> children);
    [CompilerGeneratedAttribute]
public string get_TaskId();
    [CompilerGeneratedAttribute]
public IEnumerable`1<TestRunTaskInfo> get_Children();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestRunner.JavaScript.TestRunTasksGenerator : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static TestRunInfo GetTestRunInfo(TaskExecutionNode node, IUnitTestRun run, Func`2<TaskExecutionNode, string> testIdGenerator);
    [NotNullAttribute]
private static TestRunInfo ToTestRunInfo(TestRunTaskFactory taskFactory, TaskExecutionNode rootNode, Func`2<TaskExecutionNode, string> testIdGenerator);
    private static void FromTreeExecutionNode(TestRunTaskFactory taskFactory, TaskExecutionNode node, Func`2<TaskExecutionNode, string> testIdGenerator);
    private static void CheckDuplicateTasks(IEnumerable`1<ITestRunTask> tasks);
    private static bool TryCreateTask(TestRunTaskFactory taskFactory, TaskExecutionNode node, Func`2<TaskExecutionNode, string> testIdGenerator, ITestRunTask& task);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestRunner.JavaScript.TestRunTasksGenerator/<GetChildrenTasks>d__5")]
[NotNullAttribute]
private static IEnumerable`1<ITestRunTask> GetChildrenTasks(TestRunTaskFactory taskFactory, TaskExecutionNode node, Func`2<TaskExecutionNode, string> testIdGenerator);
    [ExtensionAttribute]
[NotNullAttribute]
public static IDictionary`2<string, ITestRunTask> HierarchyToDictionary(IEnumerable`1<ITestRunTask> tasks);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestRunner.JavaScript.TestRunTasksGenerator/<HierarchyToList>d__7")]
[ExtensionAttribute]
[NotNullAttribute]
private static IEnumerable`1<ITestRunTask> HierarchyToList(IEnumerable`1<ITestRunTask> tasks);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
