public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Application.CommandLinePluginsMixin`1 : object {
    [CompilerGeneratedAttribute]
private HostInfo <hostInfo>P;
    [CompilerGeneratedAttribute]
private String[] <args>P;
    private HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.Priority { get; }
    public CommandLinePluginsMixin`1(HostInfo hostInfo, String[] args);
    private sealed virtual override HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.get_Priority();
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.InitHost(Lifetime outerLifetime);
}
public static class JetBrains.ReSharperAutomationTools.CommandLine.Common.Application.CommandLineProgram : object {
    public static int Run(string productHostShortName, String[] args);
    public static int Main(Assembly assembly, HostInfo hostInfo, String[] args, IJetHostMixin[] mixins);
    public static Full Prepare(Assembly assembly, HostInfo hostInfo, String[] args);
}
public static class JetBrains.ReSharperAutomationTools.CommandLine.Common.Application.CommandLineProgramWithPlugins`1 : object {
    public static int Run(string productHostShortName, String[] args);
    public static int Main(Assembly assembly, HostInfo hostInfo, String[] args, IJetHostMixin[] mixins);
}
[ExtensionAttribute]
public static class JetBrains.ReSharperAutomationTools.CommandLine.Common.Application.Install.ZipPack : object {
    public static ImmutableFileItem CreateZip(RelativePath zipName, IEnumerable`1<ImmutableFileItem> files);
    [ExtensionAttribute]
private static void SetHostSystem(ZipEntry entry, ZipEntryHostSystem hostSystem);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.CommandLineOneTimeInitializationManager : OneTimeInitializationManager {
    protected bool IsOneTimeInitAllowed { get; }
    public CommandLineOneTimeInitializationManager(Lifetime lifetime, IEnumerable`1<IOneTimeInitializationHandler> handlers, ProductSettingsLocation productSettingsLocation, IApplicationHost product, IProductCommandLine productCommandLine);
    protected virtual bool get_IsOneTimeInitAllowed();
    protected virtual bool IsInitializationNeeded(bool markAsDone);
    protected virtual void OnCheckFailed(Exception exception);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.Ide.BatchToolEditorManager : object {
    private Lifetime myLifetime;
    private DocumentManager myDocumentManager;
    private ISolution mySolution;
    private IComponentContainer myComponentContainer;
    private ILogger myLogger;
    private object myLockObject;
    private IDictionary`2<IProjectFile, EditorInfo> myProjectFiles;
    private IDictionary`2<VirtualFileSystemPath, EditorInfo> myFilePaths;
    private IDictionary`2<ITextControl, EditorInfo> myTextControls;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsFileOpenInProgress>k__BackingField;
    public IProperty`1<bool> IsFileOpenInProgress { get; }
    public BatchToolEditorManager(Lifetime lifetime, DocumentManager documentManager, ISolution solution, IComponentContainer componentContainer, ILogger logger);
    private void OnTextControlCreated(EditorInfo info);
    public sealed virtual Task`1<ITextControl> OpenProjectFileAsync(IProjectFile projectFile, OpenFileOptions options);
    public sealed virtual Task`1<ITextControl> OpenFileAsync(VirtualFileSystemPath filePath, OpenFileOptions options);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsFileOpenInProgress();
    public sealed virtual ITextControl TryGetTextControl(IProjectFile file);
    public ITextControl TryGetTextControl(VirtualFileSystemPath filePath);
    public sealed virtual bool IsOpenedInTextControl(IProjectFile file);
    [AsyncStateMachineAttribute("JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.Ide.BatchToolEditorManager/<JetBrains-IDE-IEditorManager-CloseTextControlAsync>d__20")]
private sealed virtual override Task JetBrains.IDE.IEditorManager.CloseTextControlAsync(ITextControl textControl, CloseTextControlSaveOptions mode);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.Ide.ZoneMarker : object {
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.MsBuild.CommandLineProjectPropertiesRequest : object {
    public static string CompilerGeneratedFilesOutputPath;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <RequestedProperties>k__BackingField;
    public IEnumerable`1<string> RequestedProperties { get; }
    private static CommandLineProjectPropertiesRequest();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_RequestedProperties();
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.MsBuild.CommandLineSolutionProcessStartInfoPatcher : SolutionProcessStartInfoPatcher {
    private CommandLineMonoPatcher myMonoPatcher;
    protected ProcessStartInfoMonoPatcher MonoPatcher { get; }
    public CommandLineSolutionProcessStartInfoPatcher(ILogger logger, DotNetCorePlatformsInRuntimeConfigJson cache, ISolutionToolset solutionToolset, ICommandLineToolSettings settings);
    protected virtual ProcessStartInfoMonoPatcher get_MonoPatcher();
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.MsBuild.CommandLineSolutionToolset : DefaultSolutionToolset {
    public CommandLineSolutionToolset(Lifetime lifetime, SolutionSettingsReadyForSolutionInstanceComponent settingsSync, ILogger logger, ICommandLineToolSettings settings, BuildToolContainer buildToolContainer, DotNetCoreInstallationsDetector dotNetCoreInstallationsDetector, RuntimeAndToolsetChangeNotifier notifier);
    private IReadOnlyCollection`1<IBuildTool> TryFilterBy(IReadOnlyCollection`1<IBuildTool> buildTools, Func`2<IBuildTool, bool> predicate, string notFoundMessage);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.MsBuild.CommandLineToolActiveConfigurationManager : DefaultActiveConfigurationManager {
    private ILogger myLogger;
    public CommandLineToolActiveConfigurationManager(ILogger logger, ICommandLineToolSettings settings);
    public sealed virtual void UpdateRemoteActiveConfiguration(ISolutionConfigurationAndPlatformStore store, ISolutionConfigurationAndPlatform activeConfigurationAndPlatform);
}
[PsiSharedComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.MsBuild.CommandLineToolGeneratedSourceFilePropertiesProvider : object {
    public double Order { get; }
    public sealed virtual double get_Order();
    public sealed virtual IPsiSourceFileProperties GetPsiProperties(IPsiSourceFileProperties prevProperties, IProject project, IProjectFile projectFile, IPsiSourceFile sourceFile);
}
[ProjectsHostComponentAttribute("16")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.MsBuild.CommandLineToolProjectToOutputAssemblyNotification : ProjectToOutputAssemblyNotification {
    [CompilerGeneratedAttribute]
private ILogger <logger>P;
    public CommandLineToolProjectToOutputAssemblyNotification(ILogger logger);
    public virtual void Notify(IProjectMark projectMark, VirtualFileSystemPath outputAssemblyPath);
}
[PsiSharedComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.MsBuild.CommandLineToolSourceFilePropertiesProvider : object {
    public double Order { get; }
    public sealed virtual double get_Order();
    public sealed virtual IPsiSourceFileProperties GetPsiProperties(IPsiSourceFileProperties prevProperties, IProject project, IProjectFile projectFile, IPsiSourceFile sourceFile);
}
[SolutionInstanceComponentAttribute("10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.MsBuild.CommandLineToolUserProfile : MsBuildUserProfileBase {
    [CanBeNullAttribute]
private ICommandLineToolSettings mySettings;
    [CanBeNullAttribute]
private SettingsData mySettingsRaw;
    private FileSystemPath mySourceGeneratorsPropsFile;
    private FileSystemPath mySourceGeneratorsTargetsFile;
    private static VersionRange ourRoslynSupportVersionRange;
    public IReadOnlyDictionary`2<string, string> GlobalProperties { get; }
    public IReadOnlyCollection`1<string> SolutionLoadingTargets { get; }
    public CommandLineToolUserProfile(Lifetime lifetime, IHostProductInfo productInfo, ISolutionToolset solutionToolset, IProductCommandLineArguments`1<SettingsData> settingArguments, ICommandLineToolSettings settings);
    private static CommandLineToolUserProfile();
    public static bool IsRoslynSourceGeneratorsSupport(ISolutionToolset solutionToolset);
    public virtual IReadOnlyDictionary`2<string, string> get_GlobalProperties();
    public virtual IReadOnlyCollection`1<string> get_SolutionLoadingTargets();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.MsBuild.ZoneMarker : object {
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.NuGet.CommandLineNuGetSupportStatus : NuGetSupportStatus {
    public virtual bool IsEmbeddedRestoreFullySupported();
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.NuGet.ProjectSystems.CommandLineNuGetDotnetToolsTracker : SolutionDotnetToolsTracker {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsInitialized>k__BackingField;
    public bool IsLocalToolInstalled { get; }
    public IProperty`1<bool> IsInitialized { get; }
    public CommandLineNuGetDotnetToolsTracker(Lifetime lifetime, ISolution solution, IFileSystemTracker fileSystemTracker, IShellLocks locks, ILogger logger, ISolutionToolset solutionToolset);
    public virtual bool get_IsLocalToolInstalled();
    [CompilerGeneratedAttribute]
public virtual IProperty`1<bool> get_IsInitialized();
    protected virtual void WatchManifestLocations();
    protected virtual void UpdateCliTargetFrameworkAttribute(RuntimeAndToolset runtimeAndToolset);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.NuGet.ZoneMarker : object {
}
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.Progress.ToolProgressIndicator : ProgressIndicatorBase {
    private ILogger myLogger;
    private bool myTaskNameIsLast;
    private string myLastMessage;
    unknown string CurrentItemText {public set; }
    unknown string TaskName {public set; }
    public ToolProgressIndicator(ILogger logger, string taskName);
    public virtual void Start(int totalWorkUnits);
    public virtual void Stop();
    public virtual void set_CurrentItemText(string value);
    public virtual void set_TaskName(string value);
}
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.Progress.ToolTaskExecutor : object {
    private ILogger myLogger;
    public ToolTaskExecutor(ILogger logger);
    public sealed virtual bool ExecuteTask(string taskName, TaskCancelable cancelable, Action`1<IProgressIndicator> task);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.Progress.ToolUITaskExecutorSwitchingImplementation : UITaskExecutorSwitchingImplementation {
    protected ILogger Logger;
    public ToolUITaskExecutorSwitchingImplementation(ILogger logger);
    public virtual ITaskExecutor CreateExecutor(TaskThreadAffinity threading, IWin32Window mainWindow);
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.ProjectModel.BatchToolAssemblyGC : AssemblyGC {
    private ILogger myLogger;
    public BatchToolAssemblyGC(Lifetime lifetime, ILogger logger, AssemblyCollection assemblyCollection, ISolution solution, IShellLocks locks, ChangeManager changeManager, ResolveContextManager resolveContextManager, AssemblyInfoDatabase assemblyInfoDatabase);
    protected virtual void DisposeUnusedSubgraph(IShellLocks locks);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.ProjectModel.CommandLineEnsureWritableHandler : EnsureWritableHandler {
    [CompilerGeneratedAttribute]
private ILogger <logger>P;
    public CommandLineEnsureWritableHandler(ILogger logger, ISolution solution, IShellLocks locks);
    public virtual IEnsureWritableCollection CreateCollection();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.ProjectModel.ZoneMarker : object {
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.Psi.CommandLinePsiConfiguration : PsiConfigurationImpl {
    public bool CacheJobServiceSynchronous { get; }
    public CommandLinePsiConfiguration(ISolution solution, ISolutionCaches solutionCaches, ShellCaches shellCaches, DocumentLineEndingsDetector documentLineEndingsDetector);
    public virtual bool get_CacheJobServiceSynchronous();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.Psi.CommandLineToolGlobalFormatSettingsService : GlobalFormatSettingsService {
    private GlobalFormatSettings myDefaultSettings;
    public CommandLineToolGlobalFormatSettingsService(PsiProjectFileTypeCoordinator coordinator, ILogger logger);
    public virtual GlobalFormatSettings GetLangSettings(PsiLanguageType languageType);
    public virtual GlobalFormatSettings GetDefaultSettings();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.Psi.StandAloneProjectFileCacheCleanup : ProjectFileCacheCleanup {
    public StandAloneProjectFileCacheCleanup(ISolutionLoadTasksScheduler scheduler, IPsiServices psiServices, ISolution solution, Lifetime lifetime, IShellLocks locks);
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.Psi.StandalonePsiModuleAttributesCache : PsiModuleAttributesCache {
    protected bool IsAsyncBehaviorProhibited { get; }
    public StandalonePsiModuleAttributesCache(Lifetime lifetime, ISolution solution, ChangeManager changeManager, IPsiModules psiModules, ISymbolCache symbolCache, IPsiCachesState psiCachesState, IShellLocks locks, ILogger logger, SynchronizationPoints synchronizationPoints, IPersistentIndexManager persistentIndexManager, ISolutionLoadTasksScheduler solutionLoadTasksScheduler);
    protected virtual bool get_IsAsyncBehaviorProhibited();
}
[SolutionInstanceComponentAttribute("10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.Psi.Web.StanaloneJavaScriptDependentFilesModuleFactory : JavaScriptDependentFilesModuleFactory {
    protected bool EnableFlushMinorChanges { get; }
    public StanaloneJavaScriptDependentFilesModuleFactory(Lifetime lifetime, ILogger logger, ISolutionLoadTasksScheduler scheduler, IShellLocks locks, IGroupingEventFactory groupingEventFactory, ChangeManager changeManager, IProjectFileExtensions extensions, PsiProjectFileTypeCoordinator coordinator, ISolution solution, IPsiConfiguration configuration, SynchronizationPoints synchronizationPoints, ContentFilesModuleFactory contentFilesModule, IFileDependencyFactory fileDependencyFactory, IEnumerable`1<IFileDependencyCandidatesTracker> candidatesTrackers, DefaultFileDependencyCandidatesTracker defaultFileDependencyCandidatesTracker, FileExistenceCacheManager fileExistenceCacheManager);
    protected virtual bool get_EnableFlushMinorChanges();
}
[SolutionComponentAttribute("10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.Psi.Web.StandaloneModulesFilesTracker : ModulesFilesTracker {
    public StandaloneModulesFilesTracker(Lifetime lifetime, ILogger logger, JavaScriptDependentFilesModuleFactory dependentFilesModuleFactory, ChangeManager changeManager, IShellLocks locks, IFileSystemTracker fileSystemTracker, ModulesFileDependencyCandidatesTracker modulesFileDependencyCandidatesTracker);
    protected virtual void AdviseDirectoryChanges(VirtualFileSystemPath path, VirtualFileSystemPath parent, bool exists);
    protected virtual void UnadviseDirectoryChanges(VirtualFileSystemPath path, VirtualFileSystemPath parent);
}
[SolutionComponentAttribute("0")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.Psi.Web.StandaloneWebsiteBuilderFactory : WebsiteBuilderFactory {
    public StandaloneWebsiteBuilderFactory(ISolution solution, ChangeManager changeManager, IDocumentStorageHelpers documentStorageHelpers, IShellLocks shellLocks, WebsiteBuildEngineFactory buildEngineFactory);
    public virtual IWebsiteBuilder CreateWebsiteBuilder(Lifetime lifetime, IWebsiteBuildRequestor requestor);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.Psi.ZoneMarker : object {
}
[SolutionComponentAttribute("10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.Roslyn.CommandLineRoslynEnabledHook : RoslynEnabledHook {
    public CommandLineRoslynEnabledHook(ILogger logger, ISolutionToolset solutionToolset);
}
[SolutionComponentAttribute("10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.Roslyn.CommandLineRoslynMonitor : object {
    private ILogger myLogger;
    private RoslynReadyMonitor myReady;
    private RoslynSourceGeneratorMonitor mySourceGenerator;
    private object myLock;
    [CompilerGeneratedAttribute]
private bool <Completed>k__BackingField;
    [ThreadUnsafeAttribute]
public bool Completed { get; private set; }
    public CommandLineRoslynMonitor(Lifetime lifetime, ILogger logger, RoslynReadyMonitor ready, RoslynSourceGeneratorMonitor sourceGenerator);
    [CompilerGeneratedAttribute]
public bool get_Completed();
    [CompilerGeneratedAttribute]
private void set_Completed(bool value);
    private void Update();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <.ctor>b__4_0(Unit _);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <.ctor>b__4_1(Unit _);
}
[ShellComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.Roslyn.CommandLineRoslynProcessLogger : object {
    [CompilerGeneratedAttribute]
private ILogger <logger>P;
    public CommandLineRoslynProcessLogger(ILogger logger);
    public sealed virtual void LogError(string message);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.Settings.CommandLineToolCustomSettingsStorages : object {
    private ICollectionEvents`1<ISettingsStorage> myStorages;
    private ICollectionEvents`1<ISettingsStorageMountPoint> myMountPoints;
    private ICollectionEvents`1<ISettingsStorage> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.Storage.ISettingsStorage>.Items { get; }
    private ICollectionEvents`1<ISettingsStorageMountPoint> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.ISettingsStorageMountPoint>.Items { get; }
    public CommandLineToolCustomSettingsStorages(Lifetime lifetime, ILogger logger, CommandLineToolStorageMountingPointProvider cmdSettingsStorageMountingPointProvider, IProductInfo commandLineProductInfo, IThreading threading, IFileSystemTracker fileTracker, IFileSettingsStorageBehavior behavior, InternKeyPathComponent interned, ICommandLineToolSettings settings);
    private sealed virtual override ICollectionEvents`1<ISettingsStorage> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.Storage.ISettingsStorage>.get_Items();
    private sealed virtual override ICollectionEvents`1<ISettingsStorageMountPoint> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.ISettingsStorageMountPoint>.get_Items();
}
public abstract class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.Settings.CommandLineToolSettings`1 : object {
    [NotNullAttribute]
protected FileSystemPath myStartupDirectory;
    [CanBeNullAttribute]
protected TSettingsData myData;
    private static String[] ourBuiltinSettingsLayers;
    [CompilerGeneratedAttribute]
private OneToListMap`2<string, string> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <SolutionFile>k__BackingField;
    public bool Debug { get; }
    public SnapshotKind Measure { get; }
    public FileSystemPath[] CustomSettingsProfiles { get; }
    public String[] DisableSettingsLayers { get; }
    public OneToListMap`2<string, string> Properties { get; }
    public FileSystemPath SolutionFile { get; }
    public Version2 Toolset { get; }
    public FileSystemPath ToolsetPath { get; }
    public FileSystemPath MonoPath { get; }
    public FileSystemPath DotNetCorePath { get; }
    public string DotNetCoreSdk { get; }
    public bool TelemetryOptOut { get; }
    protected CommandLineToolSettings`1(ILogger logger, ICommandLine commandLine, IProductCommandLineArguments`1<TSettingsData> productCommandLine);
    private static CommandLineToolSettings`1();
    public sealed virtual bool get_Debug();
    public sealed virtual SnapshotKind get_Measure();
    [CanBeNullAttribute]
protected abstract virtual String[] GetCustomSettingsProfiles();
    public abstract virtual bool IsValid(String& errorDescription);
    public sealed virtual FileSystemPath[] get_CustomSettingsProfiles();
    public sealed virtual String[] get_DisableSettingsLayers();
    [CompilerGeneratedAttribute]
public sealed virtual OneToListMap`2<string, string> get_Properties();
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_SolutionFile();
    public sealed virtual Version2 get_Toolset();
    public sealed virtual FileSystemPath get_ToolsetPath();
    public sealed virtual FileSystemPath get_MonoPath();
    public sealed virtual FileSystemPath get_DotNetCorePath();
    public sealed virtual string get_DotNetCoreSdk();
    public sealed virtual bool get_TelemetryOptOut();
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.Settings.CommandLineToolStorageMountingPointProvider : object {
    [CompilerGeneratedAttribute]
private ISettingsStorageMountPoint <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollectionEvents`1<ISettingsStorageMountPoint> <Items>k__BackingField;
    public ISettingsStorageMountPoint Item { get; }
    public ICollectionEvents`1<ISettingsStorageMountPoint> Items { get; }
    public CommandLineToolStorageMountingPointProvider(Lifetime lifetime, IProductInfo commandLineProductInfo, ILogger logger);
    [CompilerGeneratedAttribute]
public ISettingsStorageMountPoint get_Item();
    [CompilerGeneratedAttribute]
public sealed virtual ICollectionEvents`1<ISettingsStorageMountPoint> get_Items();
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.Settings.ICommandLineToolSettings {
    public bool Debug { get; }
    public SnapshotKind Measure { get; }
    [NotNullAttribute]
public FileSystemPath[] CustomSettingsProfiles { get; }
    [NotNullAttribute]
public String[] DisableSettingsLayers { get; }
    [NotNullAttribute]
public OneToListMap`2<string, string> Properties { get; }
    [NotNullAttribute]
public FileSystemPath SolutionFile { get; }
    [CanBeNullAttribute]
public Version2 Toolset { get; }
    [CanBeNullAttribute]
public FileSystemPath ToolsetPath { get; }
    [CanBeNullAttribute]
public FileSystemPath MonoPath { get; }
    [CanBeNullAttribute]
public FileSystemPath DotNetCorePath { get; }
    [CanBeNullAttribute]
public string DotNetCoreSdk { get; }
    public bool TelemetryOptOut { get; }
    public abstract virtual bool get_Debug();
    public abstract virtual bool IsValid(String& errorDescription);
    public abstract virtual SnapshotKind get_Measure();
    public abstract virtual FileSystemPath[] get_CustomSettingsProfiles();
    public abstract virtual String[] get_DisableSettingsLayers();
    public abstract virtual OneToListMap`2<string, string> get_Properties();
    public abstract virtual FileSystemPath get_SolutionFile();
    public abstract virtual Version2 get_Toolset();
    public abstract virtual FileSystemPath get_ToolsetPath();
    public abstract virtual FileSystemPath get_MonoPath();
    public abstract virtual FileSystemPath get_DotNetCorePath();
    public abstract virtual string get_DotNetCoreSdk();
    public abstract virtual bool get_TelemetryOptOut();
}
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.Settings.SettingsData : object {
    [CompilerGeneratedAttribute]
private bool <Debug>k__BackingField;
    [CompilerGeneratedAttribute]
private LoggingLevel <Verbosity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowHelp>k__BackingField;
    public static string HelpKey;
    [CompilerGeneratedAttribute]
private bool <ShowVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SolutionFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Toolset>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolsetPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mono>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DotNetCore>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DotNetCoreSdk>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DisabledSettingsLayers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressBuildInSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CachesHomeDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <TargetsForReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <TargetsForItems>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ExtensionSources>k__BackingField;
    [CompilerGeneratedAttribute]
private SnapshotKind <Measure>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Restore>k__BackingField;
    private Nullable`1<bool> myNoBuild;
    private Nullable`1<bool> myBuild;
    [CompilerGeneratedAttribute]
private string <MsBuildTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TelemetryOptOut>k__BackingField;
    [XmlElementAttribute("Debug")]
[OptionAttribute]
public bool Debug { get; public set; }
    [XmlElementAttribute("Verbosity")]
[TypeConverterAttribute("System.ComponentModel.EnumConverter")]
[OptionAttribute]
public LoggingLevel Verbosity { get; public set; }
    [XmlIgnoreAttribute]
[OptionAttribute]
public bool ShowHelp { get; public set; }
    [XmlIgnoreAttribute]
[OptionAttribute]
public bool ShowVersion { get; public set; }
    [CanBeNullAttribute]
[XmlElementAttribute("SolutionFile")]
public string SolutionFile { get; public set; }
    [XmlElementAttribute("Toolset")]
[OptionAttribute]
public string Toolset { get; public set; }
    [XmlElementAttribute("ToolsetPath")]
[OptionAttribute]
public string ToolsetPath { get; public set; }
    [XmlElementAttribute("Mono")]
[OptionAttribute]
public string Mono { get; public set; }
    [XmlElementAttribute("DotNetCore")]
[OptionAttribute]
public string DotNetCore { get; public set; }
    [XmlElementAttribute("DotNetCoreSdk")]
[OptionAttribute]
public string DotNetCoreSdk { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("Layer")]
[OptionAttribute]
public String[] DisabledSettingsLayers { get; public set; }
    [XmlElementAttribute("SuppressBuildInSettings")]
[OptionAttribute]
public bool SuppressBuildInSettings { get; public set; }
    [XmlElementAttribute("CachesHomeDirectory")]
[OptionAttribute]
public string CachesHomeDirectory { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("Properties")]
[OptionAttribute]
public String[] Properties { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("TargetsForReferences")]
[OptionAttribute]
public String[] TargetsForReferences { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("TargetsForReferences")]
[OptionAttribute]
public String[] TargetsForItems { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("Extension")]
[OptionAttribute]
public String[] Extensions { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("ExtensionSource")]
[OptionAttribute]
public String[] ExtensionSources { get; public set; }
    [XmlElementAttribute("Measure")]
[OptionAttribute]
public SnapshotKind Measure { get; public set; }
    [XmlIgnoreAttribute]
[OptionAttribute]
public Nullable`1<bool> Restore { get; public set; }
    [XmlElementAttribute("NoBuild")]
[OptionAttribute]
public Nullable`1<bool> NoBuild { get; public set; }
    [XmlElementAttribute("Build")]
[OptionAttribute]
public Nullable`1<bool> Build { get; public set; }
    [XmlElementAttribute("Target")]
[OptionAttribute]
public string MsBuildTarget { get; public set; }
    [XmlElementAttribute("TelemetryOptOut")]
[OptionAttribute]
public bool TelemetryOptOut { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Debug();
    [CompilerGeneratedAttribute]
public void set_Debug(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual LoggingLevel get_Verbosity();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Verbosity(LoggingLevel value);
    [CompilerGeneratedAttribute]
public bool get_ShowHelp();
    [CompilerGeneratedAttribute]
public void set_ShowHelp(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowVersion();
    [CompilerGeneratedAttribute]
public void set_ShowVersion(bool value);
    [CompilerGeneratedAttribute]
public string get_SolutionFile();
    [CompilerGeneratedAttribute]
public void set_SolutionFile(string value);
    [CompilerGeneratedAttribute]
public string get_Toolset();
    [CompilerGeneratedAttribute]
public void set_Toolset(string value);
    [CompilerGeneratedAttribute]
public string get_ToolsetPath();
    [CompilerGeneratedAttribute]
public void set_ToolsetPath(string value);
    [CompilerGeneratedAttribute]
public string get_Mono();
    [CompilerGeneratedAttribute]
public void set_Mono(string value);
    [CompilerGeneratedAttribute]
public string get_DotNetCore();
    [CompilerGeneratedAttribute]
public void set_DotNetCore(string value);
    [CompilerGeneratedAttribute]
public string get_DotNetCoreSdk();
    [CompilerGeneratedAttribute]
public void set_DotNetCoreSdk(string value);
    [CompilerGeneratedAttribute]
public String[] get_DisabledSettingsLayers();
    [CompilerGeneratedAttribute]
public void set_DisabledSettingsLayers(String[] value);
    [CompilerGeneratedAttribute]
public bool get_SuppressBuildInSettings();
    [CompilerGeneratedAttribute]
public void set_SuppressBuildInSettings(bool value);
    [CompilerGeneratedAttribute]
public string get_CachesHomeDirectory();
    [CompilerGeneratedAttribute]
public void set_CachesHomeDirectory(string value);
    [CompilerGeneratedAttribute]
public String[] get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_TargetsForReferences();
    [CompilerGeneratedAttribute]
public void set_TargetsForReferences(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_TargetsForItems();
    [CompilerGeneratedAttribute]
public void set_TargetsForItems(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Extensions();
    [CompilerGeneratedAttribute]
public void set_Extensions(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_ExtensionSources();
    [CompilerGeneratedAttribute]
public void set_ExtensionSources(String[] value);
    [CompilerGeneratedAttribute]
public SnapshotKind get_Measure();
    [CompilerGeneratedAttribute]
public void set_Measure(SnapshotKind value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Restore();
    [CompilerGeneratedAttribute]
public void set_Restore(Nullable`1<bool> value);
    public Nullable`1<bool> get_NoBuild();
    public void set_NoBuild(Nullable`1<bool> value);
    public Nullable`1<bool> get_Build();
    public void set_Build(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_MsBuildTarget();
    [CompilerGeneratedAttribute]
public void set_MsBuildTarget(string value);
    [CompilerGeneratedAttribute]
public bool get_TelemetryOptOut();
    [CompilerGeneratedAttribute]
public void set_TelemetryOptOut(bool value);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.Settings.SettingsLayersSuppressor : object {
    public SettingsLayersSuppressor(Lifetime lifetime, SettingsStorageMountPoints settingsStorageMountPoints, ICommandLineToolSettings settings);
}
public enum JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.Settings.SnapshotKind : Enum {
    public int value__;
    public static SnapshotKind None;
    public static SnapshotKind Memory;
    public static SnapshotKind Sampling;
    public static SnapshotKind Timeline;
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.SettingsUpgrade.NoGlobalSettingsUpgrade : GlobalSettingsUpgrade {
    public NoGlobalSettingsUpgrade(Lifetime lifetime, ISettingsStore settingsStore, IComponentContainer parentContainer, ShellPartCatalogSet catalogueSet, ProductSettingsLocation productSettingsLocation, ProductConfigurations productConfigurations, IShellLocks locks, ResetSettings resetSettings, GlobalSettings globalSettings, IApplicationHost productNameAndVersion, IEnumerable`1<ISettingsApplicationTrait> settingsApplicationTraits);
    protected virtual void DoUpgrade(IGlobalSettingsUpgrader settingsUpgrader, IComponentSettingsProvider solutionSettingsComponent, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
}
[SolutionComponentAttribute("10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.SettingsUpgrade.NoSolutionSettingsUpgrade : SolutionSettingsUpgrade {
    public NoSolutionSettingsUpgrade(Lifetime lifetime, IComponentContainer parentContainer, ShellPartCatalogSet catalogueSet, ISettingsStore settingsStore, ISolution solution, IApplicationHost applicationDescriptor, ProductConfigurations productConfigurations, ResetSettings resetSettings, SolutionSettings solutionSettings);
    protected virtual void DoUpgrade(ISolutionSettingsUpgrader settingsUpgrader, IComponentSettingsProvider solutionSettingsComponent, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.BatchTool.ZoneMarker : object {
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.CommandLine.CommandLineShortcutsManager : object {
    public ShortcutScheme CurrentScheme { get; }
    public sealed virtual ShortcutScheme get_CurrentScheme();
    public sealed virtual IList`1<ActionShortcut> GetAssignedShortcuts(IActionDefWithIdDescriptor actionDef);
    public sealed virtual void SelectShortcutScheme(ShortcutScheme scheme);
    public sealed virtual void AddShortcut(ShortcutScheme scheme, IActionDefWithIdDescriptor action, ShortcutScope scope, ActionShortcut shortcut);
    public sealed virtual void RemoveShortcut(ShortcutScheme scheme, IActionDefWithIdDescriptor action, ShortcutScope scope, ActionShortcut shortcut);
    public sealed virtual IList`1<Pair`2<ActionShortcut, ShortcutScope>> GetDefinedShortcutsWithScopes(IActionDefWithIdDescriptor action);
    public sealed virtual IActionDefWithIdDescriptor TryGetActionByShortcut(ActionShortcut shortcut);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.CommandLine.CommandLineTopLevelToolWindowFrameFactory : TopLevelToolWindowFrameFactory {
    public CommandLineTopLevelToolWindowFrameFactory(Lifetime lifetime, IThreading threading);
    public virtual TopLevelToolWindowFrameBase CreateTopLevelFrame(Lifetime lifetime, ToolWindowDescriptor toolWindowDescriptor);
    public virtual bool IsFrameRequired(ToolWindowDescriptor toolWindowDescriptor);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.CommandLine.Psi.ToolPsiCacheNotifier : PsiCacheNotifier {
    private IPsiFiles myPsiFiles;
    public ToolPsiCacheNotifier(Lifetime lifetime, ILogger logger, ISolution solution, IPsiCachesState cachesState, IPsiFiles psiFiles);
    public virtual bool WaitForCaches(string callerName, string cancelButtonContent);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private bool <>n__0(string callerName, string cancelButtonContent);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.CommandLine.Psi.ZoneMarker : object {
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.UI.CommandLineThemeManager : ThemeManager {
    public CommandLineThemeManager(Lifetime lifetime, IThreading threading, IEnumerable`1<IThemeColorFiller> fillers);
    protected virtual ColorTheme CreateTheme();
}
public static class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.Util.CltExitCodes : object {
    public static int OK;
    public static int GENERAL_ERROR;
    public static int LICENSE_CHECK_ERROR;
    public static int NOTHING_TO_ANALYSE_ERROR;
    public static int BUILD_FAILED;
}
public abstract class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.Util.CltSolutionCaches : SolutionCaches {
    [CanBeNullAttribute]
protected FileSystemPath CustomCachesLocation { get; }
    protected CltSolutionCaches(Lifetime lifetime, ILogger logger, ISettingsStore settingsStore, ISolution solution, IApplicationHost applicationHost, DbDriverManager driverManager, PolymorphicMarshallers polymorphicMarshallers, IShellLocks taskHost);
    protected abstract virtual FileSystemPath get_CustomCachesLocation();
    protected virtual FileSystemPath GetExpectedCachesPath(string solutionName);
}
public static class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.Util.CommandLineProductMain : object {
    [MustDisposeResourceAttribute]
public static IDisposable Main(Lifetime lifetime, IThreading invocator, IComponentContainer container, IShellLocks shellLocks, ILogger logger, ICommandLineToolSettings settings, IProductCommandLineArguments`1<SettingsData> argumentsRaw, IProductInfo productInfo, PrepareSolution prepareSolution, ISolution& solution, Nullable`1& exitCode);
    private static void DumpGeneralInformation(IThreading invocator, IComponentContainer container, ILogger logger, IProductCommandLineArguments argumentsRaw);
}
public interface JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.Util.ICodeSettingsDataWithExtensions {
    public String[] Extensions { get; }
    public String[] ExtensionSources { get; }
    public LoggingLevel Verbosity { get; public set; }
    public abstract virtual String[] get_Extensions();
    public abstract virtual String[] get_ExtensionSources();
    public abstract virtual LoggingLevel get_Verbosity();
    public abstract virtual void set_Verbosity(LoggingLevel value);
}
public interface JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.Util.IProductCommandLineArguments {
    public abstract virtual string Serialize();
}
public interface JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.Util.IProductCommandLineArguments`1 {
    public TCodeSettingsData SettingsRaw { get; }
    public abstract virtual TCodeSettingsData get_SettingsRaw();
}
[AttributeUsageAttribute("384")]
[MeansImplicitUseAttribute]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.Util.Options.OptionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    [NotNullAttribute]
public string Key { get; public set; }
    [CanBeNullAttribute]
public string ShortKey { get; public set; }
    [CanBeNullAttribute]
public string Description { get; public set; }
    [CanBeNullAttribute]
public object DefaultValue { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_ShortKey();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ShortKey(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Description(string value);
    [CompilerGeneratedAttribute]
public object get_DefaultValue();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DefaultValue(object value);
}
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.Util.Options.OptionException : ApplicationException {
    private string myErrorMessage;
    private string myOptionName;
    public string Message { get; }
    public OptionException(string errorMessage, string optionName);
    public OptionException(string message);
    public OptionException(string message, Exception innerException);
    public virtual string get_Message();
}
public static class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.Util.Options.OptionsUtils : object {
    public static void WriteOptionsDescription(Nullable`1<PartCatalog> partCatalog);
    public static T ParseOptions(ICommandLine commandLine);
    [NotNullAttribute]
public static T ApplyOptions(ICommandLine commandLine, T optionsInstance);
    public static string Serialize(T data);
    private static string GetShortKeyDescription(OptionAttribute optionAttribute);
    private static string GetDefaultValueDescription(OptionAttribute optionAttribute);
    [CanBeNullAttribute]
public static T DeserializeFromFile(VirtualFileSystemPath pathToConfig);
    public static void SerializeToFile(VirtualFileSystemPath pathToConfig, object settingsRaw);
    [NotNullAttribute]
[ItemNotNullAttribute]
public static IEnumerable`1<OptionAttribute> GetOptions(PropertyInfo propertyInfo);
    public static FileSystemPath ToAbsolute(FileSystemPath baseFolder, string inputName);
}
public abstract class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.Util.ProductCommandLineArguments`1 : object {
    [CompilerGeneratedAttribute]
private ILogger <logger>P;
    [CompilerGeneratedAttribute]
private IHostProductInfo <hostProductInfo>P;
    [CompilerGeneratedAttribute]
private ICommandLine <commandLine>P;
    [CompilerGeneratedAttribute]
private ConsoleLoggerMixin <consoleLoggerMixin>P;
    [CompilerGeneratedAttribute]
private IComponentContainer <componentContainer>P;
    [CompilerGeneratedAttribute]
private IPartCatalogSet <partCatalogSet>P;
    public static string ConfigOption;
    protected static string ConfigMakeOption;
    [CompilerGeneratedAttribute]
private TCodeSettingsData <SettingsRaw>k__BackingField;
    private IProperty`1<ProductCanBeStartedVerdict> myVerdict;
    private Task myReadyTask;
    [CanBeNullAttribute]
public TCodeSettingsData SettingsRaw { get; private set; }
    private double JetBrains.Application.Environment.IProductCanBeStarted.Priority { get; }
    protected Nullable`1<LoggingLevel> Verbosity { get; }
    protected ProductCommandLineArguments`1(ILogger logger, IHostProductInfo hostProductInfo, ICommandLine commandLine, ConsoleLoggerMixin consoleLoggerMixin, IComponentContainer componentContainer, IPartCatalogSet partCatalogSet, IContainerComposingProgress containerComposingProgress);
    [CompilerGeneratedAttribute]
public sealed virtual TCodeSettingsData get_SettingsRaw();
    [CompilerGeneratedAttribute]
private void set_SettingsRaw(TCodeSettingsData value);
    protected ProductCanBeStartedVerdict LogVerdict(ProductCanBeStartedVerdict verdict);
    public ProductCanBeStartedVerdict ParseCommandLine();
    protected abstract virtual ProductCanBeStartedVerdict ProcessSettings(ICommandLine commandLine);
    protected abstract virtual bool IsShowHelp();
    protected abstract virtual bool IsShowVersion();
    protected virtual void ShowHelp();
    public sealed virtual string Serialize();
    private sealed virtual override double JetBrains.Application.Environment.IProductCanBeStarted.get_Priority();
    private sealed virtual override IProperty`1<ProductCanBeStartedVerdict> JetBrains.Application.Environment.IProductCanBeStarted.CreateCanBeStarted(Lifetime lifetime);
    protected virtual Nullable`1<LoggingLevel> get_Verbosity();
    [CompilerGeneratedAttribute]
private bool <JetBrains.Application.Environment.IProductCanBeStarted.CreateCanBeStarted>b__24_0(Task _, object verdict);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Console.ZoneMarker : object {
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[EnvironmentComponentAttribute("10")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Environment.BatchToolZoneUserPreferenceStore : ZoneUserPreferenceStore {
    public BatchToolZoneUserPreferenceStore(IAnyProductSettingsLocation anyProductSettingsLocation, IHostCommandLine commandLine, IProductCommandLine productCommandLine);
    protected virtual Stream GetPrebuiltDisabledFeaturesStream();
}
[EnvironmentComponentAttribute("10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Environment.CommandLineFileSystemTracker : FileSystemTrackerImpl {
    public bool AsyncCommitAllowed { get; }
    public CommandLineFileSystemTracker(Lifetime lifetime, SynchronizationPoints synchronizationPoints, IThreading threading);
    public virtual bool get_AsyncCommitAllowed();
}
[EnvironmentComponentAttribute("10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Environment.CommandLineGreeter : object {
    [CompilerGeneratedAttribute]
private ILogger <logger>P;
    [CompilerGeneratedAttribute]
private IProductInfo <productInfo>P;
    [CompilerGeneratedAttribute]
private ApplicationPackagesLocallyInstalled <applicationPackagesLocallyInstalled>P;
    private Property`1<ProductCanBeStartedVerdict> myYesVerdict;
    private double JetBrains.Application.Environment.IProductCanBeStarted.Priority { get; }
    public CommandLineGreeter(ILogger logger, IProductInfo productInfo, ApplicationPackagesLocallyInstalled applicationPackagesLocallyInstalled);
    private sealed virtual override double JetBrains.Application.Environment.IProductCanBeStarted.get_Priority();
    private sealed virtual override IProperty`1<ProductCanBeStartedVerdict> JetBrains.Application.Environment.IProductCanBeStarted.CreateCanBeStarted(Lifetime lifetime);
}
[EnvironmentComponentAttribute("0")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Environment.CommandLineTimebombExplosionReporter : object {
    private ILogger myLogger;
    private IWindowBranding myWindowBranding;
    private ApplicationShutdownRequests myShutdownRequests;
    public CommandLineTimebombExplosionReporter(ILogger logger, IWindowBranding windowBranding, ApplicationShutdownRequests shutdownRequests);
    public sealed virtual void ReportTimebombed(ICollection`1<ZonePart> zoneParts, ICollection`1<string> timebombedProducts);
}
[ZoneDefinitionAttribute]
public interface JetBrains.ReSharperAutomationTools.CommandLine.Common.Environment.IBatchToolEnvironmentZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.ReSharperAutomationTools.CommandLine.Common.Environment.IConsoleEnvironmentZone {
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharperAutomationTools.CommandLine.Common.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string SourceGeneratorOutputFile_Text { get; }
    public static string _CustomSettingsProfile__Text { get; }
    public static string GeneratedSourceFileProperties_Explanation { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_SourceGeneratorOutputFile_Text();
    public static string get__CustomSettingsProfile__Text();
    public static string get_GeneratedSourceFileProperties_Explanation();
}
[EnvironmentComponentAttribute("16")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.TeamCity.Logging.TeamCityServiceMessagesComponent : TeamCityServiceMessages {
}
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.TeamCity.Logging.TeamCityToolLogger : object {
    private ITeamCityWriter myMessagesWriter;
    [CompilerGeneratedAttribute]
private ILayout <Layout>k__BackingField;
    public ILayout Layout { get; public set; }
    public TeamCityToolLogger(ITeamCityServiceMessages teamCityServiceMessages);
    public sealed virtual void OnLogEvent(LogEvent logEvent);
    private static IServiceMessage CreateVerboseMessage(string text);
    [CompilerGeneratedAttribute]
public ILayout get_Layout();
    [CompilerGeneratedAttribute]
public void set_Layout(ILayout value);
    public sealed virtual void Dispose();
}
[EnvironmentComponentAttribute("9")]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.TeamCity.Logging.TeamCityToolLoggerInstaller : object {
    public TeamCityToolLoggerInstaller(ITeamCityServiceMessages teamCityServiceMessages, ConsoleLoggerMixin consoleLogger);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.TeamCity.ZoneMarker : object {
}
public class JetBrains.ReSharperAutomationTools.CommandLine.Common.Util.FileSystemPathFiler : object {
    [CanBeNullAttribute]
private PathWildcard[] myWildcards;
    private FileSystemPath myRoot;
    private bool myHasByDefault;
    public FileSystemPathFiler(PathWildcard[] pathWildcards, FileSystemPath root, bool hasByDefault);
    public bool Has(FileSystemPath fileSystemPath);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
