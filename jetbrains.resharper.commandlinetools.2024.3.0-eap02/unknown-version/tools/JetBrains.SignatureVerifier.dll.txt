public class JetBrains.SignatureVerifier.Crypt.AppleSignatureVerifier : object {
    protected ILogger _logger;
    protected SignedMessageVerifier _signedMessageVerifier;
    public AppleSignatureVerifier(ILogger logger);
    public AppleSignatureVerifier(SignedMessageVerifier signedMessageVerifier, ILogger logger);
    public static VerifySignatureResult VerifyHashVerificationUnits(Stream stream, IEnumerable`1<HashVerificationUnit> hashVerificationUnits);
    public VerifySignatureResult VerifyCDHashes(Stream stream, IEnumerable`1<CDHash> cdHashesInfo, SignedMessage sectionSignature);
    public IEnumerable`1<DigestInfo> GetHashAgilityV2Hashes(SignedMessage signedMessage);
    public IEnumerable`1<Byte[]> GetHashAgilityV1Hashes(SignedMessage signedMessage);
}
public class JetBrains.SignatureVerifier.Crypt.AuthenticodeSignatureVerifier : object {
    private ILogger _logger;
    private SignedMessageVerifier _signedMessageVerifier;
    public AuthenticodeSignatureVerifier(ILogger logger);
    public AuthenticodeSignatureVerifier(SignedMessageVerifier signedMessageVerifier, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.SignatureVerifier.Crypt.AuthenticodeSignatureVerifier/<VerifyAsync>d__4")]
public Task`1<VerifySignatureResult> VerifyAsync(PeFile peFile, Stream stream, SignatureVerificationParams signatureVerificationParams, FileIntegrityVerificationParams fileIntegrityVerificationParams);
    [AsyncStateMachineAttribute("JetBrains.SignatureVerifier.Crypt.AuthenticodeSignatureVerifier/<VerifyAsync>d__5")]
public Task`1<VerifySignatureResult> VerifyAsync(CompoundFile msiFile, Stream stream, SignatureVerificationParams signatureVerificationParams, FileIntegrityVerificationParams fileIntegrityVerificationParams);
    [AsyncStateMachineAttribute("JetBrains.SignatureVerifier.Crypt.AuthenticodeSignatureVerifier/<VerifyAsync>d__6")]
public Task`1<VerifySignatureResult> VerifyAsync(SignatureData signatureData, ComputeHashInfo computeHashInfo, Stream stream, SignatureVerificationParams signatureVerificationParams, FileIntegrityVerificationParams fileIntegrityVerificationParams);
    private VerifySignatureResult VerifyFileIntegrity(SignedMessage signedMessage, ComputeHashInfo computeHashInfo, Stream stream, FileIntegrityVerificationParams fileIntegrityVerificationParams);
    private IEnumerable`1<SpcIndirectDataToken> GetIndirectDataTokens(SignedMessage signedMessage);
}
public class JetBrains.SignatureVerifier.Crypt.BC.Authenticode.AuthenticodeException : CmsException {
    public AuthenticodeException(string message);
    public AuthenticodeException(string message, Exception innerException);
    protected AuthenticodeException(SerializationInfo info, StreamingContext context);
}
public class JetBrains.SignatureVerifier.Crypt.BC.Authenticode.SpcIndirectDataContent : object {
    [CompilerGeneratedAttribute]
private DigestInfo <DigestInfo>k__BackingField;
    public DigestInfo DigestInfo { get; private set; }
    private SpcIndirectDataContent(Asn1Sequence seq);
    [CompilerGeneratedAttribute]
public DigestInfo get_DigestInfo();
    [CompilerGeneratedAttribute]
private void set_DigestInfo(DigestInfo value);
    public static SpcIndirectDataContent GetInstance(object obj);
}
public class JetBrains.SignatureVerifier.Crypt.BC.Authenticode.SpcIndirectDataToken : object {
    [CompilerGeneratedAttribute]
private SignerInformation <SignerInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private SpcIndirectDataContent <IndirectDataContent>k__BackingField;
    public SignerInformation SignerInfo { get; }
    public SpcIndirectDataContent IndirectDataContent { get; }
    public SpcIndirectDataToken(CmsSignedData signedData);
    [CompilerGeneratedAttribute]
public SignerInformation get_SignerInfo();
    [CompilerGeneratedAttribute]
public SpcIndirectDataContent get_IndirectDataContent();
}
internal class JetBrains.SignatureVerifier.Crypt.BC.BaseDigestCalculator : object {
    private Byte[] digest;
    internal BaseDigestCalculator(Byte[] digest);
    public sealed virtual Byte[] GetDigest();
}
internal class JetBrains.SignatureVerifier.Crypt.BC.CmsEnvelopedHelper : object {
    internal static CmsEnvelopedHelper Instance;
    private static IDictionary KeySizes;
    private static IDictionary BaseCipherNames;
    private static CmsEnvelopedHelper();
    private string GetAsymmetricEncryptionAlgName(string encryptionAlgOid);
    internal IBufferedCipher CreateAsymmetricCipher(string encryptionOid);
    internal IWrapper CreateWrapper(string encryptionOid);
    internal string GetRfc3211WrapperName(string oid);
    internal int GetKeySize(string oid);
}
public class JetBrains.SignatureVerifier.Crypt.BC.CmsSignedData : object {
    private static CmsSignedHelper Helper;
    private CmsProcessable signedContent;
    private SignedData signedData;
    private ContentInfo contentInfo;
    private SignerInformationStore signerInfoStore;
    private IStore`1<X509V2AttributeCertificate> attrCertStore;
    private IStore`1<X509Certificate> certificateStore;
    private IStore`1<X509Crl> crlStore;
    private IDictionary hashes;
    public int Version { get; }
    [ObsoleteAttribute("Use 'SignedContentType' property instead.")]
public string SignedContentTypeOid { get; }
    public DerObjectIdentifier SignedContentType { get; }
    public CmsProcessable SignedContent { get; }
    public ContentInfo ContentInfo { get; }
    private CmsSignedData(CmsSignedData c);
    public CmsSignedData(CmsProcessable signedContent, ContentInfo sigData);
    public CmsSignedData(IDictionary hashes, ContentInfo sigData);
    public CmsSignedData(ContentInfo sigData);
    private static CmsSignedData();
    public int get_Version();
    public SignerInformationStore GetSignerInfos();
    public IStore`1<X509V2AttributeCertificate> GetAttributeCertificates();
    public IStore`1<X509Certificate> GetCertificates();
    public IStore`1<X509Crl> GetCrls();
    public string get_SignedContentTypeOid();
    public DerObjectIdentifier get_SignedContentType();
    public CmsProcessable get_SignedContent();
    public ContentInfo get_ContentInfo();
    public Byte[] GetEncoded();
    public Byte[] GetEncoded(string encoding);
    public static CmsSignedData ReplaceSigners(CmsSignedData signedData, SignerInformationStore signerInformationStore);
}
internal class JetBrains.SignatureVerifier.Crypt.BC.CmsSignedHelper : object {
    internal static CmsSignedHelper Instance;
    private static string EncryptionECDsaWithSha1;
    private static string EncryptionECDsaWithSha224;
    private static string EncryptionECDsaWithSha256;
    private static string EncryptionECDsaWithSha384;
    private static string EncryptionECDsaWithSha512;
    private static IDictionary encryptionAlgs;
    private static IDictionary digestAlgs;
    private static IDictionary digestAliases;
    private static ISet`1<string> noParams;
    private static IDictionary ecAlgorithms;
    private static CmsSignedHelper();
    private static void AddEntries(DerObjectIdentifier oid, string digest, string encryption);
    internal string GetDigestAlgName(string digestAlgOid);
    internal AlgorithmIdentifier GetEncAlgorithmIdentifier(DerObjectIdentifier encOid, Asn1Encodable sigX509Parameters);
    internal String[] GetDigestAliases(string algName);
    internal string GetEncryptionAlgName(string encryptionAlgOid);
    internal IDigest GetDigestInstance(string algorithm);
    internal ISigner GetSignatureInstance(string algorithm);
    internal IStore`1<X509V2AttributeCertificate> CreateAttributeStore(Asn1Set certSet);
    internal IStore`1<X509Certificate> CreateCertificateStore(Asn1Set certSet);
    internal IStore`1<X509Crl> CreateCrlStore(Asn1Set crlSet);
    private void AddCertsFromSet(IList`1<X509Certificate> certs, Asn1Set certSet);
    private void AddCrlsFromSet(IList`1<X509Crl> crls, Asn1Set crlSet);
    internal AlgorithmIdentifier FixAlgID(AlgorithmIdentifier algId);
    internal string GetEncOid(AsymmetricKeyParameter key, string digestOID);
}
internal static class JetBrains.SignatureVerifier.Crypt.BC.Compat.Platform : object {
    internal static IList CreateArrayList();
    internal static IList CreateArrayList(int capacity);
    internal static IList CreateArrayList(ICollection collection);
    internal static IList CreateArrayList(IEnumerable collection);
    internal static IDictionary CreateHashtable();
}
internal class JetBrains.SignatureVerifier.Crypt.BC.CounterSignatureDigestCalculator : object {
    private string alg;
    private Byte[] data;
    internal CounterSignatureDigestCalculator(string alg, Byte[] data);
    public sealed virtual Byte[] GetDigest();
}
internal interface JetBrains.SignatureVerifier.Crypt.BC.IDigestCalculator {
    public abstract virtual Byte[] GetDigest();
}
public class JetBrains.SignatureVerifier.Crypt.BC.SignerInformation : object {
    private static CmsSignedHelper Helper;
    private SignerID sid;
    private SignerInfo info;
    private AlgorithmIdentifier digestAlgorithm;
    private AlgorithmIdentifier encryptionAlgorithm;
    private Asn1Set signedAttributeSet;
    private Asn1Set unsignedAttributeSet;
    private CmsProcessable content;
    private Byte[] signature;
    private DerObjectIdentifier contentType;
    private IDigestCalculator digestCalculator;
    private Byte[] resultDigest;
    private AttributeTable signedAttributeTable;
    private AttributeTable unsignedAttributeTable;
    private bool isCounterSignature;
    public bool IsCounterSignature { get; }
    public DerObjectIdentifier ContentType { get; }
    public SignerID SignerID { get; }
    public int Version { get; }
    public AlgorithmIdentifier DigestAlgorithmID { get; }
    public string DigestAlgOid { get; }
    public Asn1Object DigestAlgParams { get; }
    public AlgorithmIdentifier EncryptionAlgorithmID { get; }
    public string EncryptionAlgOid { get; }
    public Asn1Object EncryptionAlgParams { get; }
    public AttributeTable SignedAttributes { get; }
    public AttributeTable UnsignedAttributes { get; }
    internal SignerInformation(SignerInfo info, DerObjectIdentifier contentType, CmsProcessable content, IDigestCalculator digestCalculator);
    protected SignerInformation(SignerInformation baseInfo);
    private static SignerInformation();
    public bool get_IsCounterSignature();
    public DerObjectIdentifier get_ContentType();
    public SignerID get_SignerID();
    public int get_Version();
    public AlgorithmIdentifier get_DigestAlgorithmID();
    public string get_DigestAlgOid();
    public Asn1Object get_DigestAlgParams();
    public Byte[] GetContentDigest();
    public AlgorithmIdentifier get_EncryptionAlgorithmID();
    public string get_EncryptionAlgOid();
    public Asn1Object get_EncryptionAlgParams();
    public AttributeTable get_SignedAttributes();
    public AttributeTable get_UnsignedAttributes();
    public Byte[] GetSignature();
    public SignerInformationStore GetCounterSignatures();
    public Byte[] GetEncodedSignedAttributes();
    private bool DoVerify(AsymmetricKeyParameter key);
    private bool IsNull(Asn1Encodable o);
    private DigestInfo DerDecode(Byte[] encoding);
    private bool VerifyDigest(Byte[] digest, AsymmetricKeyParameter key, Byte[] signature);
    public bool Verify(AsymmetricKeyParameter pubKey);
    public bool Verify(X509Certificate cert);
    public SignerInfo ToSignerInfo();
    private Asn1Object GetSingleValuedSignedAttribute(DerObjectIdentifier attrOID, string printableName);
    private Time GetSigningTime();
}
public class JetBrains.SignatureVerifier.Crypt.BC.SignerInformationStore : object {
    private IList all;
    private IDictionary table;
    public int Count { get; }
    public SignerInformationStore(SignerInformation signerInfo);
    public SignerInformationStore(ICollection signerInfos);
    public SignerInformation GetFirstSigner(SignerID selector);
    public int get_Count();
    public ICollection GetSigners();
    public ICollection GetSigners(SignerID selector);
}
public class JetBrains.SignatureVerifier.Crypt.BC.TimeStampToken : object {
    private CmsSignedData tsToken;
    private SignerInformation tsaSignerInfo;
    private TimeStampTokenInfo tstInfo;
    private CertID certID;
    public TimeStampTokenInfo TimeStampInfo { get; }
    public SignerID SignerID { get; }
    public AttributeTable SignedAttributes { get; }
    public AttributeTable UnsignedAttributes { get; }
    public TimeStampToken(ContentInfo contentInfo);
    public TimeStampToken(CmsSignedData signedData);
    public TimeStampTokenInfo get_TimeStampInfo();
    public SignerID get_SignerID();
    public AttributeTable get_SignedAttributes();
    public AttributeTable get_UnsignedAttributes();
    public IStore`1<X509Certificate> GetCertificates();
    public IStore`1<X509Crl> GetCrls();
    public IStore`1<X509V2AttributeCertificate> GetAttributeCertificates();
    public void Validate(X509Certificate cert);
    public CmsSignedData ToCmsSignedData();
    public Byte[] GetEncoded();
    public Byte[] GetEncoded(string encoding);
}
public class JetBrains.SignatureVerifier.Crypt.BC.TspUtil : object {
    private static IDictionary digestLengths;
    private static IDictionary digestNames;
    private static TspUtil();
    public static ICollection GetSignatureTimestamps(SignerInformation signerInfo);
    public static void ValidateCertificate(X509Certificate cert);
    internal static string GetDigestAlgName(string digestAlgOID);
    internal static int GetDigestLength(string digestAlgOID);
    internal static IDigest CreateDigestInstance(string digestAlgOID);
    internal static ISet`1<DerObjectIdentifier> GetCriticalExtensionOids(X509Extensions extensions);
    internal static ISet`1<DerObjectIdentifier> GetNonCriticalExtensionOids(X509Extensions extensions);
    internal static IList`1<DerObjectIdentifier> GetExtensionOids(X509Extensions extensions);
}
internal class JetBrains.SignatureVerifier.Crypt.BC.X509CollectionStore : object {
    private IEnumerable`1<X509Certificate> _local;
    internal X509CollectionStore(IEnumerable`1<X509Certificate> collection);
    public sealed virtual IEnumerable`1<X509Certificate> EnumerateMatches(ISelector`1<X509Certificate> selector);
}
[ExtensionAttribute]
public static class JetBrains.SignatureVerifier.Crypt.BcExt : object {
    [ExtensionAttribute]
public static string Dump(Asn1Encodable asn1);
    [ExtensionAttribute]
public static void DumpToConsole(Asn1Encodable asn1);
    [ExtensionAttribute]
public static string SN(X509Certificate cert);
    [ExtensionAttribute]
public static string Thumbprint(X509Certificate cert);
    public static string ConvertToHexString(Byte[] data);
    [ExtensionAttribute]
public static string GetOcspUrl(X509Certificate cert);
    [ExtensionAttribute]
public static List`1<string> GetCrlDistributionUrls(X509Certificate cert);
    [ExtensionAttribute]
public static bool HasCrlDistributionPoints(X509Certificate cert);
    [ExtensionAttribute]
public static bool IsSelfSigned(X509Certificate cert);
    [ExtensionAttribute]
public static bool CanSignOcspResponses(X509Certificate cert);
    [ExtensionAttribute]
public static string GetAuthorityKeyIdentifier(X509Certificate cert);
    [ExtensionAttribute]
public static string GetSubjectKeyIdentifier(X509Certificate cert);
    [ExtensionAttribute]
public static Byte[] GetSubjectKeyIdentifierRaw(X509Certificate cert);
    [ExtensionAttribute]
internal static string FormatId(X509Certificate cert);
    [ExtensionAttribute]
public static string GetAuthorityKeyIdentifier(X509Crl crl);
    [ExtensionAttribute]
public static Asn1Encodable GetFirstAttributeValue(AttributeTable attrs, DerObjectIdentifier oid);
}
public class JetBrains.SignatureVerifier.Crypt.CrlCacheFileSystem : object {
    private string _cacheDir;
    private X509CrlParser _crlParser;
    public CrlCacheFileSystem(string cacheDir);
    public ReadOnlyCollection`1<X509Crl> GetCrls(string issuerId);
    public virtual void UpdateCrls(string issuerId, List`1<Byte[]> crlsData);
    private IEnumerable`1<string> getCrlFiles(string issuerId);
    private void ensureCacheDirectory();
    private void cleanUpCrls(string issuerId);
    private void saveCrls(string issuerId, List`1<Byte[]> crlsData);
    private void saveCrl(string crlFileName, Byte[] crlData);
}
public class JetBrains.SignatureVerifier.Crypt.CrlProvider : object {
    private CrlSource _crlSource;
    private CrlCacheFileSystem _crlCash;
    private X509CrlParser _crlParser;
    private ILogger _logger;
    public CrlProvider(ILogger logger);
    public CrlProvider(CrlSource crlSource, CrlCacheFileSystem crlCash, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.SignatureVerifier.Crypt.CrlProvider/<GetCrlsAsync>d__6")]
public virtual Task`1<ReadOnlyCollection`1<X509Crl>> GetCrlsAsync(X509Certificate cert);
    [AsyncStateMachineAttribute("JetBrains.SignatureVerifier.Crypt.CrlProvider/<downloadCrlsAsync>d__7")]
private Task`1<List`1<Byte[]>> downloadCrlsAsync(List`1<string> urls);
    private bool crlsIsOutDate(ReadOnlyCollection`1<X509Crl> crls);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType0`2<X509Crl, Byte[]> <GetCrlsAsync>b__6_0(Byte[] s);
}
public class JetBrains.SignatureVerifier.Crypt.CrlSource : object {
    [AsyncStateMachineAttribute("JetBrains.SignatureVerifier.Crypt.CrlSource/<GetCrlAsync>d__0")]
public virtual Task`1<Byte[]> GetCrlAsync(string url);
}
internal class JetBrains.SignatureVerifier.Crypt.CustomPkixBuilderParameters : PkixBuilderParameters {
    private IStore`1<X509Certificate> _intermediateCertsStore;
    private X509CertStoreSelector _primaryCertHolder;
    public CustomPkixBuilderParameters(HashSet`1<TrustAnchor> rootCertificates, IStore`1<X509Certificate> intermediateCertsStore, X509CertStoreSelector primaryCertHolder, Nullable`1<DateTime> signValidationTime);
    [AsyncStateMachineAttribute("JetBrains.SignatureVerifier.Crypt.CustomPkixBuilderParameters/<PrepareCrls>d__3")]
public Task`1<bool> PrepareCrls(CrlProvider crlProvider);
    public virtual IList`1<PkixCertPathChecker> GetCertPathCheckers();
    [AsyncStateMachineAttribute("JetBrains.SignatureVerifier.Crypt.CustomPkixBuilderParameters/<getCrlsForCertsAsync>d__5")]
private Task`1<List`1<X509Crl>> getCrlsForCertsAsync(CrlProvider crlProvider, List`1<X509Certificate> allCerts);
    private IStore`1<X509Crl> getCrlStore(List`1<X509Crl> crls);
}
internal class JetBrains.SignatureVerifier.Crypt.CustomPkixCertPathChecker : PkixCertPathChecker {
    public virtual void Init(bool forward);
    public virtual bool IsForwardCheckingSupported();
    public virtual ISet`1<string> GetSupportedExtensions();
    public virtual void Check(X509Certificate cert, ISet`1<string> unresolvedCritExts);
}
public class JetBrains.SignatureVerifier.Crypt.DmgSignatureVerifier : AppleSignatureVerifier {
    public DmgSignatureVerifier(ILogger logger);
    public DmgSignatureVerifier(SignedMessageVerifier signedMessageVerifier, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.SignatureVerifier.Crypt.DmgSignatureVerifier/<VerifyAsync>d__2")]
public Task`1<VerifySignatureResult> VerifyAsync(DmgFile dmgFile, Stream stream, SignatureVerificationParams signatureVerificationParams, FileIntegrityVerificationParams fileIntegrityVerificationParams);
}
public class JetBrains.SignatureVerifier.Crypt.FileIntegrityVerificationParams : object {
    public static FileIntegrityVerificationParams Default;
    [CompilerGeneratedAttribute]
private bool <AllowHashMismatches>k__BackingField;
    public bool AllowHashMismatches { get; private set; }
    public FileIntegrityVerificationParams(bool allowHashMismatches);
    private static FileIntegrityVerificationParams();
    [CompilerGeneratedAttribute]
public bool get_AllowHashMismatches();
    [CompilerGeneratedAttribute]
private void set_AllowHashMismatches(bool value);
}
public class JetBrains.SignatureVerifier.Crypt.MachOSignatureVerifier : AppleSignatureVerifier {
    public MachOSignatureVerifier(ILogger logger);
    public MachOSignatureVerifier(SignedMessageVerifier signedMessageVerifier, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.SignatureVerifier.Crypt.MachOSignatureVerifier/<VerifyAsync>d__2")]
public Task`1<VerifySignatureResult> VerifyAsync(MachOFile machOFile, Stream stream, SignatureVerificationParams signatureVerificationParams, FileIntegrityVerificationParams fileIntegrityVerificationParams);
    [AsyncStateMachineAttribute("JetBrains.SignatureVerifier.Crypt.MachOSignatureVerifier/<VerifyAsync>d__3")]
public Task`1<VerifySignatureResult> VerifyAsync(Section section, Stream stream, SignatureVerificationParams signatureVerificationParams, FileIntegrityVerificationParams fileIntegrityVerificationParams);
}
public class JetBrains.SignatureVerifier.Crypt.OcspVerifier : object {
    private static string OCSP_REQUEST_TYPE;
    private static string OCSP_RESPONSE_TYPE;
    private TimeSpan _ocspResponseTimeout;
    private ILogger _logger;
    private TimeSpan ocspResponseCorrectSpan;
    public OcspVerifier(TimeSpan ocspResponseTimeout, ILogger logger);
    private static OcspVerifier();
    [AsyncStateMachineAttribute("JetBrains.SignatureVerifier.Crypt.OcspVerifier/<CheckCertificateRevocationStatusAsync>d__6")]
public Task`1<VerifySignatureResult> CheckCertificateRevocationStatusAsync(X509Certificate targetCert, X509Certificate issuerCert);
    [AsyncStateMachineAttribute("JetBrains.SignatureVerifier.Crypt.OcspVerifier/<getOcspResponceAsync>d__7")]
private Task`1<OcspResp> getOcspResponceAsync(string ocspResponderUrl, OcspReq request, TimeSpan timeout);
    private bool validateOcspResponse(BasicOcspResp ocspResp);
    private bool validateSingleOcspResponse(SingleResp singleResp);
    private X509Certificate getOcspIssuerCert(BasicOcspResp ocspResp);
    private static string formatRevokedStatus(RevokedStatus revokedStatus);
}
public static class JetBrains.SignatureVerifier.Crypt.OIDs : object {
    public static DerObjectIdentifier SPC_INDIRECT_DATA;
    public static DerObjectIdentifier SPC_NESTED_SIGNATURE;
    public static DerObjectIdentifier SIGNING_TIME;
    public static DerObjectIdentifier MS_COUNTER_SIGN;
    public static DerObjectIdentifier TIMESTAMP_TOKEN;
    public static DerObjectIdentifier EXTENDED_KEY_USAGE;
    public static DerObjectIdentifier APPLE_CERTIFICATE_EXTENSION_CODE_SIGNING;
    public static DerObjectIdentifier APPLE_CERTIFICATE_EXTENSION_KEXT_SIGNING;
    public static DerObjectIdentifier APPLE_HASH_AGILITY;
    public static DerObjectIdentifier APPLE_HASH_AGILITY_V2;
    public static DerObjectIdentifier OCSP;
    private static OIDs();
}
public class JetBrains.SignatureVerifier.Crypt.Pkcs7ProcessableObject : object {
    [CompilerGeneratedAttribute]
private DerObjectIdentifier <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private Asn1Encodable <Content>k__BackingField;
    public DerObjectIdentifier ContentType { get; }
    public Asn1Encodable Content { get; }
    public Pkcs7ProcessableObject(DerObjectIdentifier contentType, Asn1Encodable content);
    [CompilerGeneratedAttribute]
public DerObjectIdentifier get_ContentType();
    [CompilerGeneratedAttribute]
public Asn1Encodable get_Content();
    public sealed virtual void Write(Stream outStream);
    public object GetContent();
}
public enum JetBrains.SignatureVerifier.Crypt.SignatureValidationTimeMode : Enum {
    public int value__;
    public static SignatureValidationTimeMode Timestamp;
    public static SignatureValidationTimeMode Current;
    public static SignatureValidationTimeMode SignValidationTime;
}
public class JetBrains.SignatureVerifier.Crypt.SignatureVerificationParams : object {
    private Stream _signRootCertStore;
    private Stream _timestampRootCertStore;
    [CompilerGeneratedAttribute]
private bool <BuildChain>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WithRevocationCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <OcspResponseTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private SignatureValidationTimeMode <SignValidationTimeMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <SignatureValidationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAdhocSignatures>k__BackingField;
    private HashSet`1<TrustAnchor> _rootCertificates;
    public bool BuildChain { get; private set; }
    public bool WithRevocationCheck { get; private set; }
    public TimeSpan OcspResponseTimeout { get; private set; }
    public SignatureValidationTimeMode SignValidationTimeMode { get; private set; }
    public Nullable`1<DateTime> SignatureValidationTime { get; private set; }
    public bool AllowAdhocSignatures { get; private set; }
    private string SignatureValidationTimeFormatted { get; }
    internal HashSet`1<TrustAnchor> RootCertificates { get; }
    public SignatureVerificationParams(Stream signRootCertStore, Stream timestampRootCertStore, bool buildChain, bool withRevocationCheck, Nullable`1<TimeSpan> ocspResponseTimeout, SignatureValidationTimeMode signatureValidationTimeMode, Nullable`1<DateTime> signatureValidationTime, bool allowAdhocSignatures);
    [CompilerGeneratedAttribute]
public bool get_BuildChain();
    [CompilerGeneratedAttribute]
private void set_BuildChain(bool value);
    [CompilerGeneratedAttribute]
public bool get_WithRevocationCheck();
    [CompilerGeneratedAttribute]
private void set_WithRevocationCheck(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_OcspResponseTimeout();
    [CompilerGeneratedAttribute]
private void set_OcspResponseTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public SignatureValidationTimeMode get_SignValidationTimeMode();
    [CompilerGeneratedAttribute]
private void set_SignValidationTimeMode(SignatureValidationTimeMode value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_SignatureValidationTime();
    [CompilerGeneratedAttribute]
private void set_SignatureValidationTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public bool get_AllowAdhocSignatures();
    [CompilerGeneratedAttribute]
private void set_AllowAdhocSignatures(bool value);
    private string get_SignatureValidationTimeFormatted();
    internal HashSet`1<TrustAnchor> get_RootCertificates();
    public void SetSignValidationTime(DateTime signValidationTime);
    private HashSet`1<TrustAnchor> readRootCertificates();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
internal static void <readRootCertificates>g__addCerts|33_0(Stream storeStream, <>c__DisplayClass33_0& );
}
public class JetBrains.SignatureVerifier.Crypt.SignedMessage : object {
    private CmsSignedData _cmsSignedData;
    public CmsSignedData SignedData { get; }
    public SignedMessage(Byte[] pkcs7Data);
    public SignedMessage(Byte[] signedData, Byte[] pkcs7Data);
    internal SignedMessage(Asn1Object obj);
    public CmsSignedData get_SignedData();
    public static SignedMessage CreateInstance(SignatureData signatureData);
}
public class JetBrains.SignatureVerifier.Crypt.SignedMessageVerifier : object {
    private CrlProvider _crlProvider;
    private ILogger _logger;
    public SignedMessageVerifier(ILogger logger);
    public SignedMessageVerifier(CrlProvider crlProvider, ILogger logger);
    public Task`1<VerifySignatureResult> VerifySignatureAsync(SignedMessage signedMessage, SignatureVerificationParams signatureVerificationParams);
    [AsyncStateMachineAttribute("JetBrains.SignatureVerifier.Crypt.SignedMessageVerifier/<verifySignatureAsync>d__5")]
private Task`1<VerifySignatureResult> verifySignatureAsync(SignerInformationStore signersStore, IStore`1<X509Certificate> certs, SignatureVerificationParams signatureVerificationParams);
}
internal class JetBrains.SignatureVerifier.Crypt.SignerInfoVerifier : object {
    private SignerInformation _signer;
    private IStore`1<X509Certificate> _certs;
    private CrlProvider _crlProvider;
    private ILogger _logger;
    private TimeStampToken _timeStampToken;
    private List`1<SignerInformation> _counterSignatures;
    private TimeStampToken TimeStampToken { get; }
    private List`1<SignerInformation> CounterSignatures { get; }
    public SignerInfoVerifier(SignerInformation signer, IStore`1<X509Certificate> certs, CrlProvider crlProvider, ILogger logger);
    private TimeStampToken get_TimeStampToken();
    private List`1<SignerInformation> get_CounterSignatures();
    [AsyncStateMachineAttribute("JetBrains.SignatureVerifier.Crypt.SignerInfoVerifier/<VerifyAsync>d__11")]
public Task`1<VerifySignatureResult> VerifyAsync(SignatureVerificationParams signatureVerificationParams);
    private void applySignValidationTime(SignatureVerificationParams signatureVerificationParams);
    [AsyncStateMachineAttribute("JetBrains.SignatureVerifier.Crypt.SignerInfoVerifier/<verifyNestedSignsAsync>d__13")]
private Task`1<VerifySignatureResult> verifyNestedSignsAsync(SignatureVerificationParams signatureVerificationParams);
    [AsyncStateMachineAttribute("JetBrains.SignatureVerifier.Crypt.SignerInfoVerifier/<verifyNestedSignsAsync>d__14")]
private Task`1<VerifySignatureResult> verifyNestedSignsAsync(DerObjectIdentifier attrOid, SignatureVerificationParams signatureVerificationParams);
    [AsyncStateMachineAttribute("JetBrains.SignatureVerifier.Crypt.SignerInfoVerifier/<verifyCounterSignAsync>d__15")]
private Task`1<VerifySignatureResult> verifyCounterSignAsync(SignatureVerificationParams signatureVerificationParams);
    [AsyncStateMachineAttribute("JetBrains.SignatureVerifier.Crypt.SignerInfoVerifier/<verifyTimeStampAsync>d__16")]
private Task`1<VerifySignatureResult> verifyTimeStampAsync(SignatureVerificationParams signatureVerificationParams);
    [AsyncStateMachineAttribute("JetBrains.SignatureVerifier.Crypt.SignerInfoVerifier/<buildCertificateChainAsync>d__17")]
private Task`1<VerifySignatureResult> buildCertificateChainAsync(X509Certificate primary, IStore`1<X509Certificate> intermediateCertsStore, SignatureVerificationParams signatureVerificationParams);
    private X509Certificate getIssuerCert(PkixCertPathBuilderResult chain, X509Certificate cert);
    private List`1<SignerInformation> getCounterSignatures();
    private TimeStampToken getTimeStampToken();
    private Nullable`1<DateTime> getTimestamp();
    private Nullable`1<DateTime> getTimeStampFromCounterSign();
    private Nullable`1<DateTime> getSigningTime();
    private Asn1Encodable getSignedAttributeValue(DerObjectIdentifier oid);
    private Asn1Encodable getUnsignedAttributeValue(DerObjectIdentifier oid);
    [CompilerGeneratedAttribute]
private SignerInfoVerifier <verifyCounterSignAsync>b__15_0(SignerInformation signerInformation);
    [CompilerGeneratedAttribute]
internal static void <getCounterSignatures>g__addCounterSign|19_0(SignerInformation current, <>c__DisplayClass19_0& );
}
[ExtensionAttribute]
internal static class JetBrains.SignatureVerifier.Crypt.Utils : object {
    [ExtensionAttribute]
public static string FlatMessages(Exception ex);
}
public class JetBrains.SignatureVerifier.Crypt.VerifySignatureResult : object {
    private VerifySignatureStatus _status;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public static VerifySignatureResult Valid;
    public VerifySignatureStatus Status { get; }
    public bool NotValid { get; }
    public bool IsValid { get; }
    public string Message { get; public set; }
    public VerifySignatureResult(VerifySignatureStatus status);
    private static VerifySignatureResult();
    public VerifySignatureStatus get_Status();
    public bool get_NotValid();
    public bool get_IsValid();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    public static VerifySignatureResult InvalidChain(string message);
}
public enum JetBrains.SignatureVerifier.Crypt.VerifySignatureStatus : Enum {
    public int value__;
    public static VerifySignatureStatus Valid;
    public static VerifySignatureStatus InvalidSignature;
    public static VerifySignatureStatus InvalidChain;
    public static VerifySignatureStatus InvalidTimestamp;
    public static VerifySignatureStatus InvalidFileHash;
    public static VerifySignatureStatus FileIntegrityDataNotFound;
}
public class JetBrains.SignatureVerifier.Crypt.X509CertificateEquComparer : object {
    public sealed virtual bool Equals(X509Certificate x, X509Certificate y);
    public sealed virtual int GetHashCode(X509Certificate obj);
}
internal class JetBrains.SignatureVerifier.Crypt.X509CrlEquComparer : object {
    public sealed virtual bool Equals(X509Crl x, X509Crl y);
    public sealed virtual int GetHashCode(X509Crl obj);
}
public static class JetBrains.SignatureVerifier.HashUtil : object {
    public static Byte[] ComputeHash(Stream stream, ComputeHashInfo computeHashInfo, string algorithmName);
    public static Byte[] ComputeHash(Stream stream, ComputeHashInfo computeHashInfo, AlgorithmIdentifier algorithmIdentifier);
    public static Byte[] ComputeHash(Stream stream, ComputeHashInfo computeHashInfo, IDigest digest);
    public static IDictionary`2<AlgorithmIdentifier, Byte[]> ComputeHashes(Stream stream, ComputeHashInfo computeHashInfo, IEnumerable`1<string> algorithmNames);
    public static IDictionary`2<AlgorithmIdentifier, Byte[]> ComputeHashes(Stream stream, ComputeHashInfo computeHashInfo, IEnumerable`1<AlgorithmIdentifier> algorithmIdentifiers);
}
public interface JetBrains.SignatureVerifier.ILogger {
    public abstract virtual void Info(string str);
    public abstract virtual void Warning(string str);
    public abstract virtual void Error(string str);
    public abstract virtual void Trace(string str);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class JetBrains.SignatureVerifier.Messages : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string certificate_revoked { get; }
    internal static string invalid_ocsp_response { get; }
    internal static string signer_cert_not_found { get; }
    internal static string unable_determin_certificate_revocation_status { get; }
    internal static string unknown_certificate_revocation_status { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_certificate_revoked();
    internal static string get_invalid_ocsp_response();
    internal static string get_signer_cert_not_found();
    internal static string get_unable_determin_certificate_revocation_status();
    internal static string get_unknown_certificate_revocation_status();
}
public class JetBrains.SignatureVerifier.NullLogger : object {
    public static ILogger Instance;
    private static NullLogger();
    private sealed virtual override void JetBrains.SignatureVerifier.ILogger.Info(string str);
    private sealed virtual override void JetBrains.SignatureVerifier.ILogger.Warning(string str);
    private sealed virtual override void JetBrains.SignatureVerifier.ILogger.Error(string str);
    private sealed virtual override void JetBrains.SignatureVerifier.ILogger.Trace(string str);
}
public static class JetBrains.SignatureVerifier.ResourceUtil : object {
    public static TResult OpenDefaultRoots(Func`2<Stream, TResult> handler);
    private static TResult OpenRead(string resourceName, Func`2<Stream, TResult> handler);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
