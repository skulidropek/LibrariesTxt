[AttributeUsageAttribute("2112")]
internal class JetBrains.TeamCity.ServiceMessages.Annotations.AspMvcActionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <AnonymousProperty>k__BackingField;
    public string AnonymousProperty { get; private set; }
    public AspMvcActionAttribute(string anonymousProperty);
    [CompilerGeneratedAttribute]
public string get_AnonymousProperty();
    [CompilerGeneratedAttribute]
private void set_AnonymousProperty(string value);
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.TeamCity.ServiceMessages.Annotations.AspMvcAreaAttribute : PathReferenceAttribute {
    [CompilerGeneratedAttribute]
private string <AnonymousProperty>k__BackingField;
    public string AnonymousProperty { get; private set; }
    public AspMvcAreaAttribute(string anonymousProperty);
    [CompilerGeneratedAttribute]
public string get_AnonymousProperty();
    [CompilerGeneratedAttribute]
private void set_AnonymousProperty(string value);
}
[AttributeUsageAttribute("2112")]
internal class JetBrains.TeamCity.ServiceMessages.Annotations.AspMvcControllerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <AnonymousProperty>k__BackingField;
    public string AnonymousProperty { get; private set; }
    public AspMvcControllerAttribute(string anonymousProperty);
    [CompilerGeneratedAttribute]
public string get_AnonymousProperty();
    [CompilerGeneratedAttribute]
private void set_AnonymousProperty(string value);
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.TeamCity.ServiceMessages.Annotations.AspMvcMasterAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.TeamCity.ServiceMessages.Annotations.AspMvcModelTypeAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.TeamCity.ServiceMessages.Annotations.AspMvcTemplateAttribute : Attribute {
}
[AttributeUsageAttribute("2112")]
internal class JetBrains.TeamCity.ServiceMessages.Annotations.AspMvcViewAttribute : PathReferenceAttribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.TeamCity.ServiceMessages.Annotations.AssertionConditionAttribute : Attribute {
    private AssertionConditionType myConditionType;
    public AssertionConditionType ConditionType { get; }
    public AssertionConditionAttribute(AssertionConditionType conditionType);
    public AssertionConditionType get_ConditionType();
}
internal enum JetBrains.TeamCity.ServiceMessages.Annotations.AssertionConditionType : Enum {
    public int value__;
    public static AssertionConditionType IS_TRUE;
    public static AssertionConditionType IS_FALSE;
    public static AssertionConditionType IS_NULL;
    public static AssertionConditionType IS_NOT_NULL;
}
[AttributeUsageAttribute("64")]
internal class JetBrains.TeamCity.ServiceMessages.Annotations.AssertionMethodAttribute : Attribute {
}
[BaseTypeRequiredAttribute("System.Attribute")]
[AttributeUsageAttribute("4")]
internal class JetBrains.TeamCity.ServiceMessages.Annotations.BaseTypeRequiredAttribute : Attribute {
    private Type[] myBaseTypes;
    public IEnumerable`1<Type> BaseTypes { get; }
    public BaseTypeRequiredAttribute(Type baseType);
    public IEnumerable`1<Type> get_BaseTypes();
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.TeamCity.ServiceMessages.Annotations.CanBeNullAttribute : Attribute {
}
[AttributeUsageAttribute("1036")]
internal class JetBrains.TeamCity.ServiceMessages.Annotations.CannotApplyEqualityOperatorAttribute : Attribute {
}
[FlagsAttribute]
internal enum JetBrains.TeamCity.ServiceMessages.Annotations.ImplicitUseKindFlags : Enum {
    public int value__;
    public static ImplicitUseKindFlags Default;
    public static ImplicitUseKindFlags Access;
    public static ImplicitUseKindFlags Assign;
    public static ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature;
    public static ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature;
}
[FlagsAttribute]
internal enum JetBrains.TeamCity.ServiceMessages.Annotations.ImplicitUseTargetFlags : Enum {
    public int value__;
    public static ImplicitUseTargetFlags Default;
    public static ImplicitUseTargetFlags Itself;
    public static ImplicitUseTargetFlags Members;
    public static ImplicitUseTargetFlags WithMembers;
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.TeamCity.ServiceMessages.Annotations.InstantHandleAttribute : Attribute {
}
[MeansImplicitUseAttribute]
internal class JetBrains.TeamCity.ServiceMessages.Annotations.internalAPIAttribute : Attribute {
    public internalAPIAttribute(string comment);
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.TeamCity.ServiceMessages.Annotations.InvokerParameterNameAttribute : Attribute {
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.TeamCity.ServiceMessages.Annotations.LocalizationRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    public bool Required { get; public set; }
    public LocalizationRequiredAttribute(bool required);
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(bool value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[AttributeUsageAttribute("4")]
internal class JetBrains.TeamCity.ServiceMessages.Annotations.MeansImplicitUseAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    [UsedImplicitlyAttribute]
public ImplicitUseKindFlags UseKindFlags { get; private set; }
    [UsedImplicitlyAttribute]
public ImplicitUseTargetFlags TargetFlags { get; private set; }
    [UsedImplicitlyAttribute]
public MeansImplicitUseAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [UsedImplicitlyAttribute]
public MeansImplicitUseAttribute(ImplicitUseKindFlags useKindFlags);
    [UsedImplicitlyAttribute]
public MeansImplicitUseAttribute(ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
private void set_UseKindFlags(ImplicitUseKindFlags value);
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
    [CompilerGeneratedAttribute]
private void set_TargetFlags(ImplicitUseTargetFlags value);
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.TeamCity.ServiceMessages.Annotations.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.TeamCity.ServiceMessages.Annotations.PathReferenceAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <BasePath>k__BackingField;
    public string BasePath { get; private set; }
    public PathReferenceAttribute(string basePath);
    [CompilerGeneratedAttribute]
public string get_BasePath();
    [CompilerGeneratedAttribute]
private void set_BasePath(string value);
}
[AttributeUsageAttribute("64")]
internal class JetBrains.TeamCity.ServiceMessages.Annotations.PureAttribute : Attribute {
}
[AttributeUsageAttribute("96")]
internal class JetBrains.TeamCity.ServiceMessages.Annotations.StringFormatMethodAttribute : Attribute {
    private string myFormatParameterName;
    public string FormatParameterName { get; }
    public StringFormatMethodAttribute(string formatParameterName);
    public string get_FormatParameterName();
}
[AttributeUsageAttribute("64")]
internal class JetBrains.TeamCity.ServiceMessages.Annotations.TerminatesProgramAttribute : Attribute {
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.TeamCity.ServiceMessages.Annotations.UsedImplicitlyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    [UsedImplicitlyAttribute]
public ImplicitUseKindFlags UseKindFlags { get; private set; }
    [UsedImplicitlyAttribute]
public ImplicitUseTargetFlags TargetFlags { get; private set; }
    [UsedImplicitlyAttribute]
public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [UsedImplicitlyAttribute]
public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags);
    [UsedImplicitlyAttribute]
public UsedImplicitlyAttribute(ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
private void set_UseKindFlags(ImplicitUseKindFlags value);
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
    [CompilerGeneratedAttribute]
private void set_TargetFlags(ImplicitUseTargetFlags value);
}
public interface JetBrains.TeamCity.ServiceMessages.IServiceMessage {
    [NotNullAttribute]
public string Name { get; }
    [CanBeNullAttribute]
public string DefaultValue { get; }
    [NotNullAttribute]
public IEnumerable`1<string> Keys { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_DefaultValue();
    public abstract virtual IEnumerable`1<string> get_Keys();
    [CanBeNullAttribute]
public abstract virtual string GetValue(string key);
}
public interface JetBrains.TeamCity.ServiceMessages.Read.IServiceMessageParser {
    public abstract virtual IEnumerable`1<IServiceMessage> ParseServiceMessages(string text);
    public abstract virtual IEnumerable`1<IServiceMessage> ParseServiceMessages(TextReader reader);
}
internal class JetBrains.TeamCity.ServiceMessages.Read.ServiceMessage : object {
    private Dictionary`2<string, string> myProperties;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    public string Name { get; private set; }
    public string DefaultValue { get; private set; }
    public IEnumerable`1<string> Keys { get; }
    public ServiceMessage(string name, string defaultValue, Dictionary`2<string, string> properties);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DefaultValue();
    [CompilerGeneratedAttribute]
private void set_DefaultValue(string value);
    public sealed virtual string GetValue(string key);
    public sealed virtual IEnumerable`1<string> get_Keys();
}
public class JetBrains.TeamCity.ServiceMessages.Read.ServiceMessageParser : object {
    public sealed virtual IEnumerable`1<IServiceMessage> ParseServiceMessages(string text);
    public sealed virtual IEnumerable`1<IServiceMessage> ParseServiceMessages(TextReader reader);
}
internal static class JetBrains.TeamCity.ServiceMessages.ServiceMessageConstants : object {
    public static string SERVICE_MESSAGE_OPEN;
    public static string SERVICE_MESSAGE_CLOSE;
}
public class JetBrains.TeamCity.ServiceMessages.ServiceMessageReplacements : object {
    public static string Encode(string value);
    public static string Decode(string value);
    public static string Decode(Char[] value);
}
public interface JetBrains.TeamCity.ServiceMessages.Write.IServiceMessageFormatter {
    public abstract virtual string FormatMessage(string messageName, string singleValue);
    [NotNullAttribute]
public abstract virtual string FormatMessage(string messageName, object anonymousProperties);
    [NotNullAttribute]
public abstract virtual string FormatMessage(string messageName, ServiceMessageProperty[] properties);
    [NotNullAttribute]
public abstract virtual string FormatMessage(string messageName, IEnumerable`1<ServiceMessageProperty> properties);
    [NotNullAttribute]
public abstract virtual string FormatMessage(IServiceMessage serviceMessage);
    [NotNullAttribute]
public abstract virtual string FormatMessage(string name, IEnumerable`1<KeyValuePair`2<string, string>> arguments);
}
public class JetBrains.TeamCity.ServiceMessages.Write.ServiceMessage : object {
    private string myName;
    private Dictionary`2<string, string> myArguments;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public string Name { get; }
    public string DefaultValue { get; }
    public IEnumerable`1<string> Keys { get; }
    public ServiceMessage(IServiceMessage message);
    public ServiceMessage(string name);
    public void Add(string key, string value);
    public void AddRange(IEnumerable`1<KeyValuePair`2<string, string>> values);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, string>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual string get_Name();
    public sealed virtual string get_DefaultValue();
    public sealed virtual IEnumerable`1<string> get_Keys();
    public sealed virtual string GetValue(string key);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(string x);
}
public class JetBrains.TeamCity.ServiceMessages.Write.ServiceMessageFormatter : object {
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, string>, ServiceMessageProperty> CS$<>9__CachedAnonymousMethodDelegate7;
    public sealed virtual string FormatMessage(string messageName, string singleValue);
    public sealed virtual string FormatMessage(string messageName, object anonymousProperties);
    public sealed virtual string FormatMessage(string messageName, ServiceMessageProperty[] properties);
    public sealed virtual string FormatMessage(IServiceMessage serviceMessage);
    public sealed virtual string FormatMessage(string name, IEnumerable`1<KeyValuePair`2<string, string>> arguments);
    public sealed virtual string FormatMessage(string messageName, IEnumerable`1<ServiceMessageProperty> properties);
    [CompilerGeneratedAttribute]
private static ServiceMessageProperty <FormatMessage>b__6(KeyValuePair`2<string, string> key);
}
public class JetBrains.TeamCity.ServiceMessages.Write.ServiceMessageProperty : ValueType {
    public string Key;
    public string Value;
    public ServiceMessageProperty(string key, string value);
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.IFlowIdGenerator {
    [NotNullAttribute]
public abstract virtual string NewFlowId();
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.IFlowServiceMessageProcessor {
    public string FlowId { get; }
    public abstract virtual string get_FlowId();
    [NotNullAttribute]
public abstract virtual IFlowServiceMessageProcessor ForNewFlow();
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.DefaultFlowIdGenerator : object {
    private int myIds;
    public sealed virtual string NewFlowId();
}
internal class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.DisposableDelegate : object {
    private Action myHost;
    public DisposableDelegate(Action host);
    public sealed virtual void Dispose();
}
internal class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.DisposableNOP : object {
    public static IDisposable Instance;
    private static DisposableNOP();
    public sealed virtual void Dispose();
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.FlowServiceMessageWriter : object {
    private IServiceMessageProcessor myProcessor;
    private IFlowIdGenerator myGenerator;
    private List`1<IServiceMessageUpdater> myUpdaters;
    [CompilerGeneratedAttribute]
private static Func`3<IServiceMessage, IServiceMessageUpdater, IServiceMessage> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<IServiceMessageUpdater, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    public string FlowId { get; }
    public FlowServiceMessageWriter(IServiceMessageProcessor processor, IFlowIdGenerator generator, IEnumerable`1<IServiceMessageUpdater> updaters);
    public sealed virtual void AddServiceMessage(IServiceMessage serviceMessage);
    public sealed virtual string get_FlowId();
    public sealed virtual IFlowServiceMessageProcessor ForNewFlow();
    [NotNullAttribute]
private List`1<IServiceMessageUpdater> IncludeFlowId(IEnumerable`1<IServiceMessageUpdater> updaters);
    [CompilerGeneratedAttribute]
private static IServiceMessage <AddServiceMessage>b__0(IServiceMessage current, IServiceMessageUpdater updater);
    [CompilerGeneratedAttribute]
private static bool <IncludeFlowId>b__2(IServiceMessageUpdater x);
}
internal class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.PatchedServiceMessage : ServiceMessage {
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public PatchedServiceMessage(IServiceMessage message);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(string x);
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.ServiceMessagesWriter : object {
    private IServiceMessageFormatter myFormatter;
    private Action`1<string> myPrinter;
    public ServiceMessagesWriter(IServiceMessageFormatter formatter, Action`1<string> printer);
    public sealed virtual void AddServiceMessage(IServiceMessage serviceMessage);
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.TeamCityWriterFacade : object {
    private IServiceMessageProcessor myProcessor;
    private ITeamCityBlockWriter`1<ITeamCityWriter> myBlockWriter;
    private ITeamCityCompilationBlockWriter`1<ITeamCityWriter> myCompilationWriter;
    private ITeamCityTestsWriter myTestsWriter;
    private ITeamCityMessageWriter myMessageWriter;
    private ITeamCityArtifactsWriter myArtifactsWriter;
    private ITeamCityBuildStatusWriter myStatusWriter;
    private ITeamCityFlowWriter`1<ITeamCityWriter> myFlowWriter;
    private IDisposable myDispose;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myIsDisposed;
    public TeamCityWriterFacade(IServiceMessageProcessor processor, ITeamCityBlockWriter`1<ITeamCityWriter> blockWriter, ITeamCityCompilationBlockWriter`1<ITeamCityWriter> compilationWriter, ITeamCityTestsWriter testsWriter, ITeamCityMessageWriter messageWriter, ITeamCityArtifactsWriter artifactsWriter, ITeamCityBuildStatusWriter statusWriter, ITeamCityFlowWriter`1<ITeamCityWriter> flowWriter, IDisposable disposeCallback);
    protected virtual void CheckConsistency();
    public sealed virtual ITeamCityWriter OpenFlow();
    public sealed virtual void WriteBuildNumber(string buildNumber);
    public sealed virtual void WriteBuildProblem(string identity, string message);
    public sealed virtual void WriteBuildParameter(string parameterName, string parameterValue);
    public sealed virtual void WriteBuildStatistics(string statisticsKey, string statisticsValue);
    public sealed virtual void WriteMessage(string text);
    public sealed virtual void WriteWarning(string text);
    public sealed virtual void WriteError(string text, string errorDetails);
    public virtual void Dispose();
    public sealed virtual void PublishArtifact(string rules);
    public sealed virtual ITeamCityWriter OpenBlock(string blockName);
    public sealed virtual void WriteRawMessage(IServiceMessage message);
    public sealed virtual ITeamCityTestsSubWriter OpenTestSuite(string suiteName);
    public sealed virtual ITeamCityTestWriter OpenTest(string testName);
    public sealed virtual ITeamCityWriter OpenCompilationBlock(string compilerName);
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.TeamCityWriterImpl : TeamCityWriterFacade {
    private IEnumerable`1<ISubWriter> myWriteCheck;
    [CompilerGeneratedAttribute]
private static CreateWriter<ITeamCityWriter> CS$<>9__CachedAnonymousMethodDelegate3;
    public TeamCityWriterImpl(IFlowServiceMessageProcessor processor, IDisposable dispose);
    private TeamCityWriterImpl(IFlowServiceMessageProcessor processor, TeamCityFlowWriter`1<ITeamCityWriter> flowWriter, TeamCityBlockWriter`1<ITeamCityWriter> blockWriter, TeamCityCompilationBlockWriter`1<ITeamCityWriter> compilationWriter, TeamCityTestSuiteBlock testsWriter, ITeamCityMessageWriter messageWriter, ITeamCityArtifactsWriter artifactsWriter, ITeamCityBuildStatusWriter statusWriter, IDisposable dispose);
    public sealed virtual void AssertNoChildOpened();
    protected virtual void CheckConsistency();
    public virtual void Dispose();
    [CompilerGeneratedAttribute]
private static ITeamCityWriter <.ctor>b__0(IDisposable handler, IFlowServiceMessageProcessor writer);
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Updater.FlowMessageUpdater : object {
    private string myFlowId;
    [NotNullAttribute]
public string FlowId { get; }
    public FlowMessageUpdater(string flowId);
    public FlowMessageUpdater(IFlowIdGenerator flowId);
    public string get_FlowId();
    public sealed virtual IServiceMessage UpdateServiceMessage(IServiceMessage message);
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Updater.TimestampUpdater : object {
    private Func`1<DateTime> myTimeService;
    public TimestampUpdater(Func`1<DateTime> timeService);
    public sealed virtual IServiceMessage UpdateServiceMessage(IServiceMessage message);
}
internal class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.ValueServiceMessage : object {
    private string myName;
    private string myValue;
    public string Name { get; }
    public string DefaultValue { get; }
    public IEnumerable`1<string> Keys { get; }
    public ValueServiceMessage(string name, string value);
    public sealed virtual string get_Name();
    public sealed virtual string get_DefaultValue();
    public sealed virtual IEnumerable`1<string> get_Keys();
    public sealed virtual string GetValue(string key);
}
public abstract class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Writer.BaseDisposableWriter`1 : BaseWriter`1<TProc> {
    private IDisposable myDisposableHandler;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myIsDisposed;
    protected BaseDisposableWriter`1(TProc target, IDisposable disposableHandler);
    public sealed virtual void Dispose();
    protected abstract virtual void DisposeImpl();
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Writer.BaseWriter : BaseWriter`1<IServiceMessageProcessor> {
    protected BaseWriter(IServiceMessageProcessor target);
    protected BaseWriter(BaseWriter`1<IServiceMessageProcessor> writer);
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Writer.BaseWriter`1 : object {
    protected TProc myTarget;
    protected BaseWriter`1(TProc target);
    protected BaseWriter`1(BaseWriter`1<TProc> writer);
    protected void PostMessage(IServiceMessage message);
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Writer.ISubWriter {
    public abstract virtual void AssertNoChildOpened();
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Writer.TeamCityArtifactsWriter : BaseWriter {
    public TeamCityArtifactsWriter(IServiceMessageProcessor target);
    public sealed virtual void PublishArtifact(string rules);
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Writer.TeamCityBlockWriter : TeamCityBlockWriter`1<IDisposable> {
    [CompilerGeneratedAttribute]
private static Func`2<IDisposable, IDisposable> CS$<>9__CachedAnonymousMethodDelegate1;
    public TeamCityBlockWriter(IServiceMessageProcessor target);
    [CompilerGeneratedAttribute]
private static IDisposable <.ctor>b__0(IDisposable x);
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Writer.TeamCityBlockWriter`1 : BaseWriter {
    private Func`2<IDisposable, TCloseBlock> myCloseBlock;
    private int myIsChildOpenned;
    public TeamCityBlockWriter`1(IServiceMessageProcessor target, Func`2<IDisposable, TCloseBlock> closeBlock);
    public sealed virtual void AssertNoChildOpened();
    public sealed virtual void Dispose();
    public sealed virtual TCloseBlock OpenBlock(string blockName);
    private void CloseBlock(string blockName);
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Writer.TeamCityBuildStatusWriter : BaseWriter {
    public TeamCityBuildStatusWriter(IServiceMessageProcessor target);
    public sealed virtual void WriteBuildNumber(string buildNumber);
    public sealed virtual void WriteBuildProblem(string identity, string message);
    public sealed virtual void WriteBuildParameter(string parameterName, string parameterValue);
    public sealed virtual void WriteBuildStatistics(string statisticsKey, string statisticsValue);
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Writer.TeamCityCompilationBlockWriter : TeamCityCompilationBlockWriter`1<IDisposable> {
    [CompilerGeneratedAttribute]
private static Func`2<IDisposable, IDisposable> CS$<>9__CachedAnonymousMethodDelegate1;
    public TeamCityCompilationBlockWriter(IServiceMessageProcessor target);
    [CompilerGeneratedAttribute]
private static IDisposable <.ctor>b__0(IDisposable x);
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Writer.TeamCityCompilationBlockWriter`1 : BaseWriter {
    private Func`2<IDisposable, TCloseBlock> myCloseBlock;
    private int myIsChildOpenned;
    public TeamCityCompilationBlockWriter`1(IServiceMessageProcessor target, Func`2<IDisposable, TCloseBlock> closeBlock);
    public sealed virtual void AssertNoChildOpened();
    public sealed virtual void Dispose();
    public sealed virtual TCloseBlock OpenCompilationBlock(string compilerName);
    private void CloseBlock(string compilerName);
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Writer.TeamCityFlowWriter`1 : BaseDisposableWriter`1<IFlowServiceMessageProcessor> {
    private CreateWriter<TCloseBlock> myCloseBlock;
    private int myIsChildFlowOpenned;
    public TeamCityFlowWriter`1(IFlowServiceMessageProcessor target, CreateWriter<TCloseBlock> closeBlock, IDisposable disposableHander);
    public sealed virtual void AssertNoChildOpened();
    protected virtual void DisposeImpl();
    public sealed virtual TCloseBlock OpenFlow();
    private void CloseBlock(IFlowServiceMessageProcessor flowId);
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Writer.TeamCityMessageWriter : BaseWriter {
    public TeamCityMessageWriter(IServiceMessageProcessor target);
    private void Write(string text, string details, string status);
    public sealed virtual void WriteMessage(string text);
    public sealed virtual void WriteWarning(string text);
    public sealed virtual void WriteError(string text, string errorDetails);
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Writer.TeamCityTestSuiteBlock : BaseDisposableWriter`1<IFlowServiceMessageProcessor> {
    private TeamCityFlowWriter`1<ITeamCityTestsSubWriter> myFlows;
    private int myIsChildTestOpened;
    private int myIsChildSuiteOpened;
    [CompilerGeneratedAttribute]
private static CreateWriter<ITeamCityTestsSubWriter> CS$<>9__CachedAnonymousMethodDelegate1;
    public TeamCityTestSuiteBlock(IFlowServiceMessageProcessor target, IDisposable disposableHandler);
    public sealed virtual ITeamCityTestsSubWriter OpenFlow();
    public sealed virtual void AssertNoChildOpened();
    protected virtual void DisposeImpl();
    public sealed virtual ITeamCityTestsSubWriter OpenTestSuite(string suiteName);
    public sealed virtual ITeamCityTestWriter OpenTest(string testName);
    [CompilerGeneratedAttribute]
private static ITeamCityTestsSubWriter <.ctor>b__0(IDisposable handler, IFlowServiceMessageProcessor writer);
    [CompilerGeneratedAttribute]
private void <OpenTest>b__7();
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Writer.TeamCityTestWriter : BaseDisposableWriter`1<IServiceMessageProcessor> {
    private string myTestName;
    private Nullable`1<TimeSpan> myDuration;
    public TeamCityTestWriter(IServiceMessageProcessor target, string testName, IDisposable disposableHander);
    public void OpenTest();
    protected virtual void DisposeImpl();
    public sealed virtual void WriteStdOutput(string text);
    public sealed virtual void WriteErrOutput(string text);
    public sealed virtual void WriteIgnored(string message);
    public sealed virtual void WriteIgnored();
    private void WriteIgnoredImpl(string message);
    public sealed virtual void WriteFailed(string errorMessage, string errorDetails);
    public sealed virtual void WriteDuration(TimeSpan span);
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.IServiceMessageProcessor {
    public abstract virtual void AddServiceMessage(IServiceMessage serviceMessage);
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.IServiceMessageUpdater {
    [NotNullAttribute]
public abstract virtual IServiceMessage UpdateServiceMessage(IServiceMessage message);
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.ITeamCityArtifactsWriter {
    public abstract virtual void PublishArtifact(string rules);
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.ITeamCityBlockWriter`1 {
    [NotNullAttribute]
public abstract virtual CloseBlock OpenBlock(string blockName);
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.ITeamCityBuildStatusWriter {
    public abstract virtual void WriteBuildNumber(string buildNumber);
    public abstract virtual void WriteBuildProblem(string identity, string description);
    public abstract virtual void WriteBuildParameter(string parameterName, string parameterValue);
    public abstract virtual void WriteBuildStatistics(string statisticsKey, string statisticsValue);
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.ITeamCityCompilationBlockWriter {
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.ITeamCityCompilationBlockWriter`1 {
    public abstract virtual CloseBlock OpenCompilationBlock(string compilerName);
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.ITeamCityFlowWriter`1 {
    [NotNullAttribute]
public abstract virtual CloseBlock OpenFlow();
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.ITeamCityMessageWriter {
    public abstract virtual void WriteMessage(string text);
    public abstract virtual void WriteWarning(string text);
    public abstract virtual void WriteError(string text, string errorDetails);
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.ITeamCityServiceMessages {
    [NotNullAttribute]
public abstract virtual ITeamCityWriter CreateWriter();
    [NotNullAttribute]
public abstract virtual ITeamCityWriter CreateWriter(Action`1<string> destination);
    public abstract virtual void AddServiceMessageUpdater(IServiceMessageUpdater updater);
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.ITeamCityTestsSubWriter {
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.ITeamCityTestSuiteWriter {
    public abstract virtual ITeamCityTestsSubWriter OpenTestSuite(string suiteName);
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.ITeamCityTestsWriter {
    [NotNullAttribute]
public abstract virtual ITeamCityTestWriter OpenTest(string testName);
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.ITeamCityTestWriter {
    public abstract virtual void WriteStdOutput(string text);
    public abstract virtual void WriteErrOutput(string text);
    public abstract virtual void WriteIgnored(string ignoreReason);
    public abstract virtual void WriteIgnored();
    public abstract virtual void WriteFailed(string errorMessage, string errorDetails);
    public abstract virtual void WriteDuration(TimeSpan duration);
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.ITeamCityWriter {
    public abstract virtual void WriteRawMessage(IServiceMessage message);
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.TeamCityServiceMessages : object {
    [CompilerGeneratedAttribute]
private IServiceMessageFormatter <Formatter>k__BackingField;
    [CompilerGeneratedAttribute]
private IFlowIdGenerator <FlowIdGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IServiceMessageUpdater> <Updaters>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`1<DateTime> CS$<>9__CachedAnonymousMethodDelegate1;
    [NotNullAttribute]
public IServiceMessageFormatter Formatter { get; public set; }
    [NotNullAttribute]
public IFlowIdGenerator FlowIdGenerator { get; public set; }
    [NotNullAttribute]
public IEnumerable`1<IServiceMessageUpdater> Updaters { get; public set; }
    public TeamCityServiceMessages(IServiceMessageFormatter formatter, IFlowIdGenerator flowIdGenerator, IEnumerable`1<IServiceMessageUpdater> updaters);
    [CompilerGeneratedAttribute]
public IServiceMessageFormatter get_Formatter();
    [CompilerGeneratedAttribute]
public void set_Formatter(IServiceMessageFormatter value);
    [CompilerGeneratedAttribute]
public IFlowIdGenerator get_FlowIdGenerator();
    [CompilerGeneratedAttribute]
public void set_FlowIdGenerator(IFlowIdGenerator value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IServiceMessageUpdater> get_Updaters();
    [CompilerGeneratedAttribute]
public void set_Updaters(IEnumerable`1<IServiceMessageUpdater> value);
    public sealed virtual void AddServiceMessageUpdater(IServiceMessageUpdater updater);
    public sealed virtual ITeamCityWriter CreateWriter();
    public sealed virtual ITeamCityWriter CreateWriter(Action`1<string> destination);
    [CompilerGeneratedAttribute]
private static DateTime <.ctor>b__0();
}
