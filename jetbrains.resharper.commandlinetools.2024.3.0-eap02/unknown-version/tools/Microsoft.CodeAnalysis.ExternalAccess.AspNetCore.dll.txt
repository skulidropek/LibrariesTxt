[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.CodeAnalysis.ExternalAccess.AspNetCore.AddPackage.AspNetCoreAddPackageCodeAction : object {
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.ExternalAccess.AspNetCore.AddPackage.AspNetCoreAddPackageCodeAction/<TryCreateCodeActionAsync>d__0")]
public static Task`1<CodeAction> TryCreateCodeActionAsync(Document document, int position, AspNetCoreInstallPackageData installPackageData, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.ExternalAccess.AspNetCore.AddPackage.AspNetCoreAddPackageCodeAction/<GetTextChangesAsync>d__1")]
private static Task`1<ImmutableArray`1<TextChange>> GetTextChangesAsync(Document document, int position, string namespaceName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.ExternalAccess.AspNetCore.AddPackage.AspNetCoreAddPackageCodeAction/<AddImportAsync>d__2")]
private static Task`1<Document> AddImportAsync(Document document, int position, SyntaxGenerator generator, SyntaxNode importDirective, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Microsoft.CodeAnalysis.ExternalAccess.AspNetCore.AddPackage.AspNetCoreInstallPackageData : ValueType {
    [NullableAttribute("2")]
public string PackageSource;
    public string PackageName;
    [NullableAttribute("2")]
public string PackageVersionOpt;
    public string PackageNamespaceName;
    public AspNetCoreInstallPackageData(string packageSource, string packageName, string packageVersionOpt, string packageNamespaceName);
}
[IsReadOnlyAttribute]
internal class Microsoft.CodeAnalysis.ExternalAccess.AspNetCore.EmbeddedLanguages.AspNetCoreBraceMatchingResult : ValueType {
    [CompilerGeneratedAttribute]
private TextSpan <LeftSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private TextSpan <RightSpan>k__BackingField;
    public TextSpan LeftSpan { get; public set; }
    public TextSpan RightSpan { get; public set; }
    public AspNetCoreBraceMatchingResult(TextSpan LeftSpan, TextSpan RightSpan);
    [CompilerGeneratedAttribute]
public TextSpan get_LeftSpan();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LeftSpan(TextSpan value);
    [CompilerGeneratedAttribute]
public TextSpan get_RightSpan();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RightSpan(TextSpan value);
    internal BraceMatchingResult ToBraceMatchingResult();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(AspNetCoreBraceMatchingResult left, AspNetCoreBraceMatchingResult right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(AspNetCoreBraceMatchingResult left, AspNetCoreBraceMatchingResult right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(AspNetCoreBraceMatchingResult other);
    [CompilerGeneratedAttribute]
public void Deconstruct(TextSpan& LeftSpan, TextSpan& RightSpan);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.ExternalAccess.AspNetCore.EmbeddedLanguages.AspNetCoreCSharpRouteSyntaxDetector : object {
    public static AspNetCoreCSharpRouteSyntaxDetector Instance;
    private static EmbeddedLanguageDetector s_detector;
    private static AspNetCoreCSharpRouteSyntaxDetector();
    public bool IsEmbeddedLanguageToken(SyntaxToken token, SemanticModel semanticModel, CancellationToken cancellationToken, String& identifier, IEnumerable`1& options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.ExternalAccess.AspNetCore.EmbeddedLanguages.AspNetCoreCSharpVirtualCharService : object {
    private static AspNetCoreCSharpVirtualCharService _instance;
    private IVirtualCharService _virtualCharService;
    public static AspNetCoreCSharpVirtualCharService Instance { get; }
    private AspNetCoreCSharpVirtualCharService(IVirtualCharService virtualCharService);
    private static AspNetCoreCSharpVirtualCharService();
    public static AspNetCoreCSharpVirtualCharService get_Instance();
    public AspNetCoreVirtualCharSequence TryConvertToVirtualChars(SyntaxToken token);
}
[IsReadOnlyAttribute]
internal class Microsoft.CodeAnalysis.ExternalAccess.AspNetCore.EmbeddedLanguages.AspNetCoreDocumentHighlights : ValueType {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<AspNetCoreHighlightSpan> <HighlightSpans>k__BackingField;
    public ImmutableArray`1<AspNetCoreHighlightSpan> HighlightSpans { get; }
    public AspNetCoreDocumentHighlights(ImmutableArray`1<AspNetCoreHighlightSpan> highlightSpans);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<AspNetCoreHighlightSpan> get_HighlightSpans();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Microsoft.CodeAnalysis.ExternalAccess.AspNetCore.EmbeddedLanguages.AspNetCoreEmbeddedLanguageClassificationContext : ValueType {
    private EmbeddedLanguageClassificationContext _context;
    public SyntaxToken SyntaxToken { get; }
    public SemanticModel SemanticModel { get; }
    public CancellationToken CancellationToken { get; }
    internal AspNetCoreEmbeddedLanguageClassificationContext(EmbeddedLanguageClassificationContext context);
    public SyntaxToken get_SyntaxToken();
    public SemanticModel get_SemanticModel();
    public CancellationToken get_CancellationToken();
    public void AddClassification(string classificationType, TextSpan span);
}
[IsReadOnlyAttribute]
[DataContractAttribute]
internal class Microsoft.CodeAnalysis.ExternalAccess.AspNetCore.EmbeddedLanguages.AspNetCoreHighlightSpan : ValueType {
    [CompilerGeneratedAttribute]
private TextSpan <TextSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private AspNetCoreHighlightSpanKind <Kind>k__BackingField;
    [DataMemberAttribute]
public TextSpan TextSpan { get; }
    [DataMemberAttribute]
public AspNetCoreHighlightSpanKind Kind { get; }
    public AspNetCoreHighlightSpan(TextSpan textSpan, AspNetCoreHighlightSpanKind kind);
    [CompilerGeneratedAttribute]
public TextSpan get_TextSpan();
    [CompilerGeneratedAttribute]
public AspNetCoreHighlightSpanKind get_Kind();
}
internal enum Microsoft.CodeAnalysis.ExternalAccess.AspNetCore.EmbeddedLanguages.AspNetCoreHighlightSpanKind : Enum {
    public int value__;
    public static AspNetCoreHighlightSpanKind None;
    public static AspNetCoreHighlightSpanKind Definition;
    public static AspNetCoreHighlightSpanKind Reference;
    public static AspNetCoreHighlightSpanKind WrittenReference;
}
[IsReadOnlyAttribute]
internal class Microsoft.CodeAnalysis.ExternalAccess.AspNetCore.EmbeddedLanguages.AspNetCoreVirtualChar : ValueType {
    internal VirtualChar VirtualChar;
    public int RuneValue { get; }
    public char SurrogateChar { get; }
    public TextSpan Span { get; }
    public int Value { get; }
    internal AspNetCoreVirtualChar(VirtualChar virtualChar);
    public int get_RuneValue();
    public char get_SurrogateChar();
    public TextSpan get_Span();
    public int get_Value();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(AspNetCoreVirtualChar other);
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
internal class Microsoft.CodeAnalysis.ExternalAccess.AspNetCore.EmbeddedLanguages.AspNetCoreVirtualCharSequence : ValueType {
    private VirtualCharSequence _virtualCharSequence;
    public static AspNetCoreVirtualCharSequence Empty;
    public bool IsDefault { get; }
    public int Length { get; }
    public AspNetCoreVirtualChar Item { get; }
    internal AspNetCoreVirtualCharSequence(VirtualCharSequence virtualCharSequence);
    private static AspNetCoreVirtualCharSequence();
    public bool get_IsDefault();
    public int get_Length();
    public AspNetCoreVirtualChar get_Item(int index);
    public AspNetCoreVirtualCharSequence GetSubSequence(TextSpan span);
    public Nullable`1<AspNetCoreVirtualChar> Find(int position);
    [NullableContextAttribute("1")]
public string CreateString();
    public static AspNetCoreVirtualCharSequence FromBounds(AspNetCoreVirtualCharSequence chars1, AspNetCoreVirtualCharSequence chars2);
    public int IndexOf(AspNetCoreVirtualChar char);
    public bool Contains(AspNetCoreVirtualChar char);
    public Enumerator GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MetadataAttributeAttribute]
[AttributeUsageAttribute("4")]
internal class Microsoft.CodeAnalysis.ExternalAccess.AspNetCore.EmbeddedLanguages.ExportAspNetCoreEmbeddedLanguageBraceMatcherAttribute : ExportAttribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    public string Name { get; }
    public string Language { get; }
    public ExportAspNetCoreEmbeddedLanguageBraceMatcherAttribute(string name, string language);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Language();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MetadataAttributeAttribute]
[AttributeUsageAttribute("4")]
internal class Microsoft.CodeAnalysis.ExternalAccess.AspNetCore.EmbeddedLanguages.ExportAspNetCoreEmbeddedLanguageClassifierAttribute : ExportAttribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    public string Name { get; }
    public string Language { get; }
    public ExportAspNetCoreEmbeddedLanguageClassifierAttribute(string name, string language);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Language();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MetadataAttributeAttribute]
[AttributeUsageAttribute("4")]
internal class Microsoft.CodeAnalysis.ExternalAccess.AspNetCore.EmbeddedLanguages.ExportAspNetCoreEmbeddedLanguageDocumentHighlighterAttribute : ExportAttribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    public string Name { get; }
    public string Language { get; }
    public ExportAspNetCoreEmbeddedLanguageDocumentHighlighterAttribute(string name, string language);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Language();
}
[NullableContextAttribute("1")]
internal interface Microsoft.CodeAnalysis.ExternalAccess.AspNetCore.EmbeddedLanguages.IAspNetCoreEmbeddedLanguageBraceMatcher {
    public abstract virtual Nullable`1<AspNetCoreBraceMatchingResult> FindBraces(SemanticModel semanticModel, SyntaxToken token, int position, CancellationToken cancellationToken);
}
internal interface Microsoft.CodeAnalysis.ExternalAccess.AspNetCore.EmbeddedLanguages.IAspNetCoreEmbeddedLanguageClassifier {
    public abstract virtual void RegisterClassifications(AspNetCoreEmbeddedLanguageClassificationContext context);
}
internal interface Microsoft.CodeAnalysis.ExternalAccess.AspNetCore.EmbeddedLanguages.IAspNetCoreEmbeddedLanguageDocumentHighlighter {
    public abstract virtual ImmutableArray`1<AspNetCoreDocumentHighlights> GetDocumentHighlights(SemanticModel semanticModel, SyntaxToken token, int position, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Microsoft.CodeAnalysis.ExternalAccess.AspNetCore.Internal.EmbeddedLanguages.AspNetCoreBraceMatcherExtensionProvider : AbstractProjectExtensionProvider`3<AspNetCoreBraceMatcherExtensionProvider, IAspNetCoreEmbeddedLanguageBraceMatcher, ExportAspNetCoreEmbeddedLanguageBraceMatcherAttribute> {
    protected virtual ImmutableArray`1<string> GetLanguages(ExportAspNetCoreEmbeddedLanguageBraceMatcherAttribute exportAttribute);
    protected virtual bool TryGetExtensionsFromReference(AnalyzerReference reference, ImmutableArray`1& extensions);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Microsoft.CodeAnalysis.ExternalAccess.AspNetCore.Internal.EmbeddedLanguages.AspNetCoreClassifierExtensionProvider : AbstractProjectExtensionProvider`3<AspNetCoreClassifierExtensionProvider, IAspNetCoreEmbeddedLanguageClassifier, ExportAspNetCoreEmbeddedLanguageClassifierAttribute> {
    protected virtual ImmutableArray`1<string> GetLanguages(ExportAspNetCoreEmbeddedLanguageClassifierAttribute exportAttribute);
    protected virtual bool TryGetExtensionsFromReference(AnalyzerReference reference, ImmutableArray`1& extensions);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Microsoft.CodeAnalysis.ExternalAccess.AspNetCore.Internal.EmbeddedLanguages.AspNetCoreDocumentHighlighterExtensionProvider : AbstractProjectExtensionProvider`3<AspNetCoreDocumentHighlighterExtensionProvider, IAspNetCoreEmbeddedLanguageDocumentHighlighter, ExportAspNetCoreEmbeddedLanguageDocumentHighlighterAttribute> {
    protected virtual ImmutableArray`1<string> GetLanguages(ExportAspNetCoreEmbeddedLanguageDocumentHighlighterAttribute exportAttribute);
    protected virtual bool TryGetExtensionsFromReference(AnalyzerReference reference, ImmutableArray`1& extensions);
}
[ExportEmbeddedLanguageBraceMatcherAttribute("AspNetCoreEmbeddedLanguageBraceMatcher", "Mono.Cecil.CustomAttributeArgument[]", "False", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class Microsoft.CodeAnalysis.ExternalAccess.AspNetCore.Internal.EmbeddedLanguages.AspNetCoreEmbeddedLanguageBraceMatcher : object {
    [NullableContextAttribute("1")]
public sealed virtual Nullable`1<BraceMatchingResult> FindBraces(Project project, SemanticModel semanticModel, SyntaxToken token, int position, BraceMatchingOptions options, CancellationToken cancellationToken);
}
[ExportEmbeddedLanguageClassifierAttribute("AspNetCoreEmbeddedLanguageClassifier", "Mono.Cecil.CustomAttributeArgument[]", "False", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class Microsoft.CodeAnalysis.ExternalAccess.AspNetCore.Internal.EmbeddedLanguages.AspNetCoreEmbeddedLanguageClassifier : object {
    public sealed virtual void RegisterClassifications(EmbeddedLanguageClassificationContext context);
}
[ExportEmbeddedLanguageDocumentHighlighterAttribute("AspNetCoreEmbeddedLanguageDocumentHighlighter", "Mono.Cecil.CustomAttributeArgument[]", "False", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class Microsoft.CodeAnalysis.ExternalAccess.AspNetCore.Internal.EmbeddedLanguages.AspNetCoreEmbeddedLanguageDocumentHighlighter : object {
    [NullableContextAttribute("1")]
public sealed virtual ImmutableArray`1<DocumentHighlights> GetDocumentHighlights(Document document, SemanticModel semanticModel, SyntaxToken token, int position, HighlightingOptions options, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static HighlightSpanKind <GetDocumentHighlights>g__ConvertKind|1_0(AspNetCoreHighlightSpanKind kind);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
