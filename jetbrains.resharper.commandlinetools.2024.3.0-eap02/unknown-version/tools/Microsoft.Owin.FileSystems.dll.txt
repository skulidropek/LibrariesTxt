public class Microsoft.Owin.FileSystems.EmbeddedResourceFileSystem : object {
    private Assembly _assembly;
    private string _baseNamespace;
    private DateTime _lastModified;
    public EmbeddedResourceFileSystem(Assembly assembly);
    public EmbeddedResourceFileSystem(string baseNamespace);
    public EmbeddedResourceFileSystem(Assembly assembly, string baseNamespace);
    public sealed virtual bool TryGetFileInfo(string subpath, IFileInfo& fileInfo);
    public sealed virtual bool TryGetDirectoryContents(string subpath, IEnumerable`1& contents);
}
public interface Microsoft.Owin.FileSystems.IFileInfo {
    public long Length { get; }
    public string PhysicalPath { get; }
    public string Name { get; }
    public DateTime LastModified { get; }
    public bool IsDirectory { get; }
    public abstract virtual long get_Length();
    public abstract virtual string get_PhysicalPath();
    public abstract virtual string get_Name();
    public abstract virtual DateTime get_LastModified();
    public abstract virtual bool get_IsDirectory();
    public abstract virtual Stream CreateReadStream();
}
public interface Microsoft.Owin.FileSystems.IFileSystem {
    public abstract virtual bool TryGetFileInfo(string subpath, IFileInfo& fileInfo);
    public abstract virtual bool TryGetDirectoryContents(string subpath, IEnumerable`1& contents);
}
public class Microsoft.Owin.FileSystems.PhysicalFileSystem : object {
    private static Dictionary`2<string, string> RestrictedFileNames;
    [CompilerGeneratedAttribute]
private string <Root>k__BackingField;
    public string Root { get; private set; }
    public PhysicalFileSystem(string root);
    private static PhysicalFileSystem();
    [CompilerGeneratedAttribute]
public string get_Root();
    [CompilerGeneratedAttribute]
private void set_Root(string value);
    private static string GetFullRoot(string root);
    private string GetFullPath(string path);
    public sealed virtual bool TryGetFileInfo(string subpath, IFileInfo& fileInfo);
    public sealed virtual bool TryGetDirectoryContents(string subpath, IEnumerable`1& contents);
    private bool IsRestricted(FileInfo fileInfo);
}
