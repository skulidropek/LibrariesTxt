public class Microsoft.Owin.Hosting.Builder.AppActivator : object {
    private IServiceProvider _services;
    public AppActivator(IServiceProvider services);
    public virtual object Activate(Type type);
}
public class Microsoft.Owin.Hosting.Builder.AppBuilderFactory : object {
    public virtual IAppBuilder Create();
}
public interface Microsoft.Owin.Hosting.Builder.IAppActivator {
    public abstract virtual object Activate(Type type);
}
public interface Microsoft.Owin.Hosting.Builder.IAppBuilderFactory {
    public abstract virtual IAppBuilder Create();
}
internal static class Microsoft.Owin.Hosting.Constants : object {
    internal static string HostTraceOutput;
    internal static string HostTraceSource;
    internal static string HostOnAppDisposing;
    internal static string HostAddresses;
    internal static string HostAppName;
    internal static string HostAppMode;
    internal static string AppModeDevelopment;
    internal static string OwinServerFactory;
    internal static string SettingsOwinServer;
    internal static string EnvOwnServer;
    internal static string DefaultServer;
    internal static string SettingsPort;
    internal static string EnvPort;
    internal static int DefaultPort;
    internal static string SettingsOwinAppStartup;
    internal static string Scheme;
    internal static string Host;
    internal static string Port;
    internal static string Path;
}
public class Microsoft.Owin.Hosting.Engine.HostingEngine : object {
    private IAppBuilderFactory _appBuilderFactory;
    private ITraceOutputFactory _traceOutputFactory;
    private IAppLoader _appLoader;
    private IServerFactoryLoader _serverFactoryLoader;
    private ILoggerFactory _loggerFactory;
    public static int DefaultPort { get; }
    public HostingEngine(IAppBuilderFactory appBuilderFactory, ITraceOutputFactory traceOutputFactory, IAppLoader appLoader, IServerFactoryLoader serverFactoryLoader, ILoggerFactory loggerFactory);
    public static int get_DefaultPort();
    public sealed virtual IDisposable Start(StartContext context);
    public static bool TryDetermineCustomPort(StartOptions options, Int32& port);
    private void ResolveOutput(StartContext context);
    private void InitializeBuilder(StartContext context);
    internal static bool DeconstructUrl(string url, String& scheme, String& host, String& port, String& path);
    private void EnableTracing(StartContext context);
    private static IDisposable EnableDisposing(StartContext context);
    private void ResolveServerFactory(StartContext context);
    private static string DetermineOwinServer(StartContext context);
    private static int DeterminePort(StartContext context);
    private static string GetPortEnvironmentVariable();
    private static string DetermineApplicationName(StartContext context);
    private static void InitializeServerFactory(StartContext context);
    private void ResolveApp(StartContext context);
    private static IDisposable StartServer(StartContext context);
}
public interface Microsoft.Owin.Hosting.Engine.IHostingEngine {
    public abstract virtual IDisposable Start(StartContext context);
}
public class Microsoft.Owin.Hosting.Engine.StartContext : object {
    [CompilerGeneratedAttribute]
private StartOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IServerFactoryAdapter <ServerFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IAppBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IDictionary`2<string, object>, Task> <App>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IAppBuilder> <Startup>k__BackingField;
    [CompilerGeneratedAttribute]
private TextWriter <TraceOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<KeyValuePair`2<string, object>> <EnvironmentData>k__BackingField;
    public StartOptions Options { get; private set; }
    public IServerFactoryAdapter ServerFactory { get; public set; }
    public IAppBuilder Builder { get; public set; }
    public Func`2<IDictionary`2<string, object>, Task> App { get; public set; }
    public Action`1<IAppBuilder> Startup { get; public set; }
    public TextWriter TraceOutput { get; public set; }
    public IList`1<KeyValuePair`2<string, object>> EnvironmentData { get; private set; }
    public StartContext(StartOptions options);
    [CompilerGeneratedAttribute]
public StartOptions get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(StartOptions value);
    [CompilerGeneratedAttribute]
public IServerFactoryAdapter get_ServerFactory();
    [CompilerGeneratedAttribute]
public void set_ServerFactory(IServerFactoryAdapter value);
    [CompilerGeneratedAttribute]
public IAppBuilder get_Builder();
    [CompilerGeneratedAttribute]
public void set_Builder(IAppBuilder value);
    [CompilerGeneratedAttribute]
public Func`2<IDictionary`2<string, object>, Task> get_App();
    [CompilerGeneratedAttribute]
public void set_App(Func`2<IDictionary`2<string, object>, Task> value);
    [CompilerGeneratedAttribute]
public Action`1<IAppBuilder> get_Startup();
    [CompilerGeneratedAttribute]
public void set_Startup(Action`1<IAppBuilder> value);
    [CompilerGeneratedAttribute]
public TextWriter get_TraceOutput();
    [CompilerGeneratedAttribute]
public void set_TraceOutput(TextWriter value);
    [CompilerGeneratedAttribute]
public IList`1<KeyValuePair`2<string, object>> get_EnvironmentData();
    [CompilerGeneratedAttribute]
private void set_EnvironmentData(IList`1<KeyValuePair`2<string, object>> value);
}
public class Microsoft.Owin.Hosting.Loader.AppLoader : object {
    private IEnumerable`1<IAppLoaderFactory> _providers;
    public AppLoader(IEnumerable`1<IAppLoaderFactory> providers);
    public virtual Action`1<IAppBuilder> Load(string appName, IList`1<string> errors);
}
public class Microsoft.Owin.Hosting.Loader.AppLoaderFactory : object {
    private IAppActivator _activator;
    public int Order { get; }
    public AppLoaderFactory(IAppActivator activator);
    public virtual int get_Order();
    public virtual Func`3<string, IList`1<string>, Action`1<IAppBuilder>> Create(Func`3<string, IList`1<string>, Action`1<IAppBuilder>> nextLoader);
}
public interface Microsoft.Owin.Hosting.Loader.IAppLoader {
    public abstract virtual Action`1<IAppBuilder> Load(string appName, IList`1<string> errors);
}
public interface Microsoft.Owin.Hosting.Loader.IAppLoaderFactory {
    public int Order { get; }
    public abstract virtual int get_Order();
    public abstract virtual Func`3<string, IList`1<string>, Action`1<IAppBuilder>> Create(Func`3<string, IList`1<string>, Action`1<IAppBuilder>> nextLoader);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Owin.Hosting.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Exception_AppLoadFailure { get; }
    internal static string Exception_FailedToResolveService { get; }
    internal static string Exception_ImproperlyFormattedSettingsFile { get; }
    internal static string Exception_ServerFactoryParameterCount { get; }
    internal static string Exception_ServerFactoryParameterType { get; }
    internal static string Exception_ServerNotFound { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Exception_AppLoadFailure();
    internal static string get_Exception_FailedToResolveService();
    internal static string get_Exception_ImproperlyFormattedSettingsFile();
    internal static string get_Exception_ServerFactoryParameterCount();
    internal static string get_Exception_ServerFactoryParameterType();
    internal static string get_Exception_ServerNotFound();
}
public interface Microsoft.Owin.Hosting.ServerFactory.IServerFactoryActivator {
    public abstract virtual object Activate(Type type);
}
public interface Microsoft.Owin.Hosting.ServerFactory.IServerFactoryAdapter {
    public abstract virtual void Initialize(IAppBuilder builder);
    public abstract virtual IDisposable Create(IAppBuilder builder);
}
public interface Microsoft.Owin.Hosting.ServerFactory.IServerFactoryLoader {
    public abstract virtual IServerFactoryAdapter Load(string serverName);
}
public class Microsoft.Owin.Hosting.ServerFactory.ServerFactoryActivator : object {
    private IServiceProvider _services;
    public ServerFactoryActivator(IServiceProvider services);
    public virtual object Activate(Type type);
}
public class Microsoft.Owin.Hosting.ServerFactory.ServerFactoryAdapter : object {
    private IServerFactoryActivator _activator;
    private Type _serverFactoryType;
    private object _serverFactory;
    public ServerFactoryAdapter(object serverFactory);
    public ServerFactoryAdapter(Type serverFactoryType, IServerFactoryActivator activator);
    public virtual void Initialize(IAppBuilder builder);
    public virtual IDisposable Create(IAppBuilder builder);
}
public class Microsoft.Owin.Hosting.ServerFactory.ServerFactoryLoader : object {
    private IServerFactoryActivator _activator;
    public ServerFactoryLoader(IServerFactoryActivator activator);
    public virtual IServerFactoryAdapter Load(string serverName);
    private static Type GetTypeAndMethodNameForConfigurationString(string configuration);
    [IteratorStateMachineAttribute("Microsoft.Owin.Hosting.ServerFactory.ServerFactoryLoader/<HuntForAssemblies>d__4")]
private static IEnumerable`1<Tuple`2<string, Assembly>> HuntForAssemblies(string configurationString);
    private static Assembly TryAssemblyLoad(string assemblyName);
    [IteratorStateMachineAttribute("Microsoft.Owin.Hosting.ServerFactory.ServerFactoryLoader/<DotByDot>d__6")]
private static IEnumerable`1<string> DotByDot(string text);
}
public static class Microsoft.Owin.Hosting.Services.ActivatorUtilities : object {
    public static object GetServiceOrCreateInstance(IServiceProvider services, Type type);
    private static object GetServiceNoExceptions(IServiceProvider services, Type type);
    public static object CreateInstance(IServiceProvider services, Type type);
    public static Func`2<IServiceProvider, object> CreateFactory(Type type);
    private static bool IsInjectable(ConstructorInfo constructor);
}
public class Microsoft.Owin.Hosting.Services.ServiceProvider : object {
    private IDictionary`2<Type, Func`1<object>> _services;
    private IDictionary`2<Type, List`1<Func`1<object>>> _priorServices;
    public virtual object GetService(Type serviceType);
    private object GetSingleService(Type serviceType);
    private object GetMultiService(Type collectionType);
    public virtual ServiceProvider RemoveAll();
    public virtual ServiceProvider RemoveAll(Type type);
    public virtual ServiceProvider AddInstance(object instance);
    public virtual ServiceProvider AddInstance(Type service, object instance);
    public virtual ServiceProvider Add();
    public virtual ServiceProvider Add(Type serviceType, Type implementationType);
    public virtual ServiceProvider Add(Type serviceType, Func`1<object> serviceFactory);
    [CompilerGeneratedAttribute]
private object <.ctor>b__2_0();
}
[ExtensionAttribute]
public static class Microsoft.Owin.Hosting.Services.ServiceProviderExtensions : object {
    [ExtensionAttribute]
public static T GetService(IServiceProvider services);
}
public static class Microsoft.Owin.Hosting.Services.ServicesFactory : object {
    private static Action`1<ServiceProvider> NoConfiguration;
    private static ServicesFactory();
    public static IServiceProvider Create(IDictionary`2<string, string> settings, Action`1<ServiceProvider> configuration);
    public static IServiceProvider Create(string settingsFile, Action`1<ServiceProvider> configuration);
    public static IServiceProvider Create(Action`1<ServiceProvider> configuration);
    public static IServiceProvider Create(IDictionary`2<string, string> settings);
    public static IServiceProvider Create(string settingsFile);
    public static IServiceProvider Create();
    public static void ForEach(IDictionary`2<string, string> settings, Action`2<Type, Type> callback);
    public static void ForEach(string settingsFile, Action`2<Type, Type> callback);
    public static void ForEach(Action`2<Type, Type> callback);
    private static void DoCallback(IDictionary`2<string, string> settings, Action`2<Type, Type> callback);
    private static void DoCallback(Action`2<Type, Type> callback);
}
public class Microsoft.Owin.Hosting.Starter.DirectHostingStarter : object {
    private IHostingEngine _engine;
    public DirectHostingStarter(IHostingEngine engine);
    public virtual IDisposable Start(StartOptions options);
}
public class Microsoft.Owin.Hosting.Starter.DomainHostingStarter : object {
    public virtual IDisposable Start(StartOptions options);
    private static DomainHostingStarterAgent CreateAgent(AppDomain domain);
}
public class Microsoft.Owin.Hosting.Starter.DomainHostingStarterAgent : MarshalByRefObject {
    private ILease _lease;
    private bool _disposed;
    private IDisposable _runningApp;
    public virtual void ResolveAssembliesFromDirectory(string directory);
    public virtual void Start(StartOptions options);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual TimeSpan Renewal(ILease lease);
}
public class Microsoft.Owin.Hosting.Starter.HostingStarter : object {
    private IHostingStarterFactory _hostingStarterFactory;
    public HostingStarter(IHostingStarterFactory hostingStarterFactory);
    public virtual IDisposable Start(StartOptions options);
}
public class Microsoft.Owin.Hosting.Starter.HostingStarterActivator : object {
    private IServiceProvider _services;
    public HostingStarterActivator(IServiceProvider services);
    public virtual IHostingStarter Activate(Type type);
}
[AttributeUsageAttribute("1")]
public class Microsoft.Owin.Hosting.Starter.HostingStarterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <HostingStarterType>k__BackingField;
    public Type HostingStarterType { get; private set; }
    public HostingStarterAttribute(Type hostingStarterType);
    [CompilerGeneratedAttribute]
public Type get_HostingStarterType();
    [CompilerGeneratedAttribute]
private void set_HostingStarterType(Type value);
}
public class Microsoft.Owin.Hosting.Starter.HostingStarterFactory : object {
    private IHostingStarterActivator _hostingStarterActivator;
    public HostingStarterFactory(IHostingStarterActivator hostingStarterActivator);
    public virtual IHostingStarter Create(string name);
    private static Assembly LoadProvider(String[] names);
}
public interface Microsoft.Owin.Hosting.Starter.IHostingStarter {
    public abstract virtual IDisposable Start(StartOptions options);
}
public interface Microsoft.Owin.Hosting.Starter.IHostingStarterActivator {
    public abstract virtual IHostingStarter Activate(Type type);
}
public interface Microsoft.Owin.Hosting.Starter.IHostingStarterFactory {
    public abstract virtual IHostingStarter Create(string name);
}
public class Microsoft.Owin.Hosting.StartOptions : object {
    [CompilerGeneratedAttribute]
private IList`1<string> <Urls>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppStartup>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Settings>k__BackingField;
    public IList`1<string> Urls { get; private set; }
    public Nullable`1<int> Port { get; public set; }
    public string AppStartup { get; public set; }
    public string ServerFactory { get; public set; }
    public IDictionary`2<string, string> Settings { get; private set; }
    public StartOptions(string url);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Urls();
    [CompilerGeneratedAttribute]
private void set_Urls(IList`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_AppStartup();
    [CompilerGeneratedAttribute]
public void set_AppStartup(string value);
    [CompilerGeneratedAttribute]
public string get_ServerFactory();
    [CompilerGeneratedAttribute]
public void set_ServerFactory(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Settings();
    [CompilerGeneratedAttribute]
private void set_Settings(IDictionary`2<string, string> value);
}
internal class Microsoft.Owin.Hosting.Tracing.DualWriter : TextWriter {
    private static bool IsMono;
    [CompilerGeneratedAttribute]
private TextWriter <Writer2>k__BackingField;
    private TextWriter Writer2 { get; private set; }
    public Encoding Encoding { get; }
    internal DualWriter(TextWriter writer2);
    private static DualWriter();
    [CompilerGeneratedAttribute]
private TextWriter get_Writer2();
    [CompilerGeneratedAttribute]
private void set_Writer2(TextWriter value);
    public virtual Encoding get_Encoding();
    private static void OutputDebugString(string message);
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
    private static void InternalWrite(string message);
    public virtual void Write(char value);
    public virtual void Write(Char[] buffer);
    public virtual void Write(string value);
    public virtual void Write(Char[] buffer, int index, int count);
    public virtual void Flush();
    public virtual Task FlushAsync();
    public virtual Task WriteAsync(char value);
    public virtual Task WriteAsync(string value);
    public virtual Task WriteAsync(Char[] buffer, int index, int count);
    public virtual Task WriteLineAsync();
    public virtual Task WriteLineAsync(char value);
    public virtual Task WriteLineAsync(string value);
    public virtual Task WriteLineAsync(Char[] buffer, int index, int count);
}
public interface Microsoft.Owin.Hosting.Tracing.ITraceOutputFactory {
    public abstract virtual TextWriter Create(string outputFile);
}
public class Microsoft.Owin.Hosting.Tracing.TraceOutputFactory : object {
    public virtual TextWriter Create(string outputFile);
}
internal class Microsoft.Owin.Hosting.Utilities.Disposable : MarshalByRefObject {
    private Action _dispose;
    public Disposable(Action dispose);
    public sealed virtual void Dispose();
}
internal class Microsoft.Owin.Hosting.Utilities.Encapsulate : object {
    private Func`2<IDictionary`2<string, object>, Task> _app;
    private IList`1<KeyValuePair`2<string, object>> _environmentData;
    public Encapsulate(Func`2<IDictionary`2<string, object>, Task> app, IList`1<KeyValuePair`2<string, object>> environmentData);
    public Task Invoke(IDictionary`2<string, object> environment);
}
public static class Microsoft.Owin.Hosting.Utilities.SettingsLoader : object {
    private static IDictionary`2<string, string> _fromConfigImplementation;
    public static IDictionary`2<string, string> LoadFromConfig();
    public static void LoadFromConfig(IDictionary`2<string, string> settings);
    public static IDictionary`2<string, string> LoadFromSettingsFile(string settingsFile);
    public static void LoadFromSettingsFile(string settingsFile, IDictionary`2<string, string> settings);
}
public static class Microsoft.Owin.Hosting.WebApp : object {
    public static IDisposable Start(string url, Action`1<IAppBuilder> startup);
    public static IDisposable Start(StartOptions options, Action`1<IAppBuilder> startup);
    public static IDisposable Start(string url);
    public static IDisposable Start(StartOptions options);
    public static IDisposable Start(string url);
    public static IDisposable Start(StartOptions options);
    private static StartOptions BuildOptions(string url);
    private static IServiceProvider BuildServices(StartOptions options);
    private static IDisposable StartImplementation(IServiceProvider services, StartOptions options);
    private static IDisposable StartImplementation(IServiceProvider services, StartOptions options, Action`1<IAppBuilder> startup);
}
internal static class Owin.Loader.Constants : object {
    internal static string OwinStartupAttribute;
    internal static string StartupType;
    internal static string FriendlyName;
    internal static string MethodName;
    internal static string Startup;
    internal static string Configuration;
    internal static string HostAppName;
}
internal class Owin.Loader.DefaultLoader : object {
    private Func`3<string, IList`1<string>, Action`1<IAppBuilder>> _next;
    private Func`2<Type, object> _activator;
    private IEnumerable`1<Assembly> _referencedAssemblies;
    public DefaultLoader(IEnumerable`1<Assembly> referencedAssemblies);
    public DefaultLoader(Func`3<string, IList`1<string>, Action`1<IAppBuilder>> next);
    public DefaultLoader(Func`3<string, IList`1<string>, Action`1<IAppBuilder>> next, Func`2<Type, object> activator);
    public DefaultLoader(Func`3<string, IList`1<string>, Action`1<IAppBuilder>> next, Func`2<Type, object> activator, IEnumerable`1<Assembly> referencedAssemblies);
    public Action`1<IAppBuilder> Load(string startupName, IList`1<string> errorDetails);
    private Action`1<IAppBuilder> LoadImplementation(string startupName, IList`1<string> errorDetails);
    private Tuple`2<Type, string> GetTypeAndMethodNameForConfigurationString(string configuration, IList`1<string> errors);
    private Tuple`2<Type, string> GetDefaultConfiguration(string friendlyName, IList`1<string> errors);
    private Tuple`2<Type, string> SearchForStartupAttribute(string friendlyName, IList`1<string> errors, Boolean& conflict);
    private static bool MatchesStartupAttribute(Type type);
    private Tuple`2<Type, string> SearchForStartupConvention(IList`1<string> errors);
    private static void CheckForStartupType(string startupName, Assembly assembly, Type& matchedType, Boolean& conflict, IList`1<string> errors);
    private Tuple`2<string, Assembly> HuntForAssembly(string configuration, IList`1<string> errors);
    private static Assembly TryAssemblyLoad(string assemblyName);
    [IteratorStateMachineAttribute("Owin.Loader.DefaultLoader/<DotByDot>d__18")]
public static IEnumerable`1<string> DotByDot(string text);
    private Action`1<IAppBuilder> MakeDelegate(Type type, string methodName, IList`1<string> errors);
    private static bool Matches(MethodInfo methodInfo, bool hasReturnValue, Type[] parameterTypes);
}
internal class Owin.Loader.NullLoader : object {
    private static NullLoader Singleton;
    public static Func`3<string, IList`1<string>, Action`1<IAppBuilder>> Instance { get; }
    private static NullLoader();
    public static Func`3<string, IList`1<string>, Action`1<IAppBuilder>> get_Instance();
    public Action`1<IAppBuilder> Load(string startup, IList`1<string> errors);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class SharedResourceNamespace.LoaderResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AssemblyNotFound { get; }
    internal static string ClassNotFoundInAssembly { get; }
    internal static string Exception_AttributeNameConflict { get; }
    internal static string Exception_StartupTypeConflict { get; }
    internal static string FriendlyNameMismatch { get; }
    internal static string MethodNotFoundInClass { get; }
    internal static string NoAssemblyWithStartupClass { get; }
    internal static string NoOwinStartupAttribute { get; }
    internal static string StartupTypePropertyEmpty { get; }
    internal static string StartupTypePropertyMissing { get; }
    internal static string TypeOrMethodNotFound { get; }
    internal static string UnexpectedMethodSignature { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AssemblyNotFound();
    internal static string get_ClassNotFoundInAssembly();
    internal static string get_Exception_AttributeNameConflict();
    internal static string get_Exception_StartupTypeConflict();
    internal static string get_FriendlyNameMismatch();
    internal static string get_MethodNotFoundInClass();
    internal static string get_NoAssemblyWithStartupClass();
    internal static string get_NoOwinStartupAttribute();
    internal static string get_StartupTypePropertyEmpty();
    internal static string get_StartupTypePropertyMissing();
    internal static string get_TypeOrMethodNotFound();
    internal static string get_UnexpectedMethodSignature();
}
