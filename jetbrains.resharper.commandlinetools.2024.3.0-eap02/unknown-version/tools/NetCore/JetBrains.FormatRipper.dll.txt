[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.FormatRipper.Compound.CompoundFile : object {
    private static string RootEntryName;
    private static Byte[] ourHeaderSignature;
    public FileType Type;
    public bool HasSignature;
    public SignatureData SignatureData;
    public ExtractStream[] ExtractStreams;
    [NullableAttribute("2")]
public ComputeHashInfo ComputeHashInfo;
    private CompoundFile(FileType type, bool hasSignature, SignatureData signatureData, ExtractStream[] extractStreams, ComputeHashInfo computeHashInfo);
    private static CompoundFile();
    public static bool Is(Stream stream);
    public static CompoundFile Parse(Stream stream, Mode mode, ExtractFilter extractFilter);
    [CompilerGeneratedAttribute]
internal static DirectoryEntry <Parse>g__TakeFirst|13_7(IEnumerable`1<DirectoryEntry> ids);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.FormatRipper.Compound.DirectoryNames : object {
    public static string DigitalSignatureName;
    public static string DocumentSummaryInformation;
    public static string MsiDigitalSignatureExName;
    public static string SummaryInformationName;
    public static string 䡀_ColumnsName;
    public static string 䡀_StringDataName;
    public static string 䡀_StringPoolName;
    public static string 䡀_TablesName;
    public static string 䡀_ValidationName;
}
public enum JetBrains.FormatRipper.Compound.Impl.CF : Enum {
    public byte value__;
    public static CF CF_RED;
    public static CF CF_BLACK;
}
internal class JetBrains.FormatRipper.Compound.Impl.CompoundFileDirectoryEntry : ValueType {
    [FixedBufferAttribute("System.Byte", "64")]
internal <DirectoryEntryName>e__FixedBuffer DirectoryEntryName;
    internal ushort DirectoryEntryNameLength;
    internal byte ObjectType;
    internal byte ColorFlag;
    internal UInt32 LeftSiblingId;
    internal UInt32 RightSiblingId;
    internal UInt32 ChildId;
    internal Guid Clsid;
    internal UInt32 StateBits;
    internal ulong CreationTime;
    internal ulong ModifiedTime;
    internal UInt32 StartingSectorLocation;
    internal ulong StreamSize;
}
internal class JetBrains.FormatRipper.Compound.Impl.CompoundFileHeader : ValueType {
    [FixedBufferAttribute("System.Byte", "8")]
internal <HeaderSignature>e__FixedBuffer HeaderSignature;
    internal Guid HeaderClsid;
    internal ushort MinorVersion;
    internal ushort MajorVersion;
    internal ushort ByteOrder;
    internal ushort SectorShift;
    internal ushort MiniSectorShift;
    [FixedBufferAttribute("System.Byte", "6")]
internal <Reserved>e__FixedBuffer Reserved;
    internal UInt32 NumberOfDirectorySectors;
    internal UInt32 NumberOfFatSectors;
    internal UInt32 FirstDirectorySectorLocation;
    internal UInt32 TransactionSignatureNumber;
    internal UInt32 MiniStreamCutoffSize;
    internal UInt32 FirstMiniFatSectorLocation;
    internal UInt32 NumberOfMiniFatSectors;
    internal UInt32 FirstDiFatSectorLocation;
    internal UInt32 NumberOfDiFatSectors;
}
internal static class JetBrains.FormatRipper.Compound.Impl.Declarations : object {
    internal static int HeaderSignatureSize;
    internal static int HeaderDiFatSize;
    internal static int DirectoryEntryNameSize;
    internal static ushort LittleEndianByteOrder;
}
internal enum JetBrains.FormatRipper.Compound.Impl.REGSECT : Enum {
    public UInt32 value__;
    public static REGSECT MAXREGSECT;
    public static REGSECT DIFSECT;
    public static REGSECT FATSECT;
    public static REGSECT ENDOFCHAIN;
    public static REGSECT FREESECT;
}
internal enum JetBrains.FormatRipper.Compound.Impl.REGSID : Enum {
    public UInt32 value__;
    public static REGSID MAXREGSID;
    public static REGSID NOSTREAM;
}
public enum JetBrains.FormatRipper.Compound.Impl.STGTY : Enum {
    public byte value__;
    public static STGTY STGTY_INVALID;
    public static STGTY STGTY_STORAGE;
    public static STGTY STGTY_STREAM;
    public static STGTY STGTY_LOCKBYTES;
    public static STGTY STGTY_PROPERTY;
    public static STGTY STGTY_ROOT;
}
public static class JetBrains.FormatRipper.Compound.MsiUtil : object {
    private static char MsiBase64Encode(byte v);
    [NullableContextAttribute("1")]
public static string MsiDecodeStreamName(string str);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.FormatRipper.ComputeHashInfo : object {
    public long Offset;
    public IEnumerable`1<StreamRange> OrderedIncludeRanges;
    public int ZeroPadding;
    internal ComputeHashInfo(long offset, IEnumerable`1<StreamRange> orderedIncludeRanges, int zeroPadding);
    public void WalkOnHashRanges(Stream stream, SubmitDelegate submit);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.FormatRipper.Dmg.DmgFile : object {
    public bool HasSignature;
    public SignatureData SignatureData;
    public IEnumerable`1<HashVerificationUnit> HashVerificationUnits;
    public IEnumerable`1<CDHash> CDHashes;
    [NullableAttribute("2")]
public DmgSignatureTransferData SignatureTransferData;
    private DmgFile(bool hasSignature, SignatureData signatureData, IEnumerable`1<HashVerificationUnit> hashVerificationUnits, IEnumerable`1<CDHash> cdHashes, DmgSignatureTransferData signatureTransferData);
    public static bool Is(Stream stream);
    public static DmgFile Parse(Stream stream, Mode mode);
}
public class JetBrains.FormatRipper.Dmg.DmgSignatureInjector : object {
    [NullableContextAttribute("1")]
public static void InjectSignature(Stream sourceStream, Stream outputStream, DmgSignatureTransferData signatureTransferData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.FormatRipper.Dmg.DmgSignatureTransferData : object {
    [CompilerGeneratedAttribute]
private long <SignatureOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SignatureLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <SignatureBlob>k__BackingField;
    public long SignatureOffset { get; internal set; }
    public long SignatureLength { get; internal set; }
    public Byte[] SignatureBlob { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_SignatureOffset();
    [CompilerGeneratedAttribute]
internal void set_SignatureOffset(long value);
    [CompilerGeneratedAttribute]
public long get_SignatureLength();
    [CompilerGeneratedAttribute]
internal void set_SignatureLength(long value);
    [CompilerGeneratedAttribute]
public Byte[] get_SignatureBlob();
    [CompilerGeneratedAttribute]
internal void set_SignatureBlob(Byte[] value);
}
internal enum JetBrains.FormatRipper.Dmg.Impl.DmgMagic : Enum {
    public UInt32 value__;
    public static DmgMagic KOLY;
}
internal class JetBrains.FormatRipper.Dmg.Impl.UDIF : ValueType {
    internal UInt32 Magic;
    internal UInt32 Version;
    internal UInt32 HeaderSize;
    internal UInt32 Flags;
    internal ulong RunningDataForkOffset;
    internal ulong DataForkOffset;
    internal ulong DataForkLength;
    internal ulong RsrcForkOffset;
    internal ulong RsrcForkLength;
    internal UInt32 SegmentNumber;
    internal UInt32 SegmentCount;
    [FixedBufferAttribute("System.Byte", "16")]
internal <SegmentID>e__FixedBuffer SegmentID;
    internal UInt32 DataChecksumType;
    internal UInt32 DataChecksumSize;
    [FixedBufferAttribute("System.UInt32", "32")]
internal <DataChecksum>e__FixedBuffer DataChecksum;
    internal ulong PlistOffset;
    internal ulong PlistLength;
    [FixedBufferAttribute("System.Byte", "64")]
internal <Reserved1>e__FixedBuffer Reserved1;
    internal ulong CodeSignatureOffset;
    internal ulong CodeSignatureLength;
    [FixedBufferAttribute("System.Byte", "40")]
internal <Reserved2>e__FixedBuffer Reserved2;
    internal UInt32 ChecksumType;
    internal UInt32 ChecksumSize;
    [FixedBufferAttribute("System.UInt32", "32")]
internal <Checksum>e__FixedBuffer Checksum;
    internal UInt32 ImageVariant;
    internal ulong SectorCount;
    internal UInt32 Reserved3;
    internal UInt32 Reserved4;
    internal UInt32 Reserved5;
}
[FlagsAttribute]
public enum JetBrains.FormatRipper.Elf.EF : Enum {
    public UInt32 value__;
    public static EF EF_ARM_RELEXEC;
    public static EF EF_ARM_HASENTRY;
    public static EF EF_ARM_SYMSARESORTED;
    public static EF EF_ARM_DYNSYMSUSESEGIDX;
    public static EF EF_ARM_MAPSYMSFIRST;
    public static EF EF_ARM_LE8;
    public static EF EF_ARM_BE8;
    public static EF EF_ARM_EABIMASK;
    public static EF EF_ARM_EABI_UNKNOWN;
    public static EF EF_ARM_EABI_VER1;
    public static EF EF_ARM_EABI_VER2;
    public static EF EF_ARM_EABI_VER3;
    public static EF EF_ARM_EABI_VER4;
    public static EF EF_ARM_EABI_VER5;
    public static EF EF_ARM_INTERWORK;
    public static EF EF_ARM_APCS_26;
    public static EF EF_ARM_APCS_FLOAT;
    public static EF EF_ARM_PIC;
    public static EF EF_ARM_ALIGN8;
    public static EF EF_ARM_NEW_ABI;
    public static EF EF_ARM_OLD_ABI;
    public static EF EF_ARM_ABI_FLOAT_SOFT;
    public static EF EF_ARM_ABI_FLOAT_HARD;
    public static EF EF_ARM_MAVERICK_FLOAT;
    public static EF EF_MIPS_NOREORDER;
    public static EF EF_MIPS_PIC;
    public static EF EF_MIPS_CPIC;
    public static EF EF_MIPS_UCODE;
    public static EF EF_MIPS_ABI2;
    public static EF EF_MIPS_OPTIONS_FIRST;
    public static EF EF_MIPS_32BITMODE;
    public static EF EF_MIPS_ABI;
    public static EF EF_MIPS_ABI_O32;
    public static EF EF_MIPS_ABI_O64;
    public static EF EF_MIPS_ABI_EABI32;
    public static EF EF_MIPS_ABI_EABI64;
    public static EF EF_MIPS_ARCH_ASE;
    public static EF EF_MIPS_ARCH_ASE_MDMX;
    public static EF EF_MIPS_ARCH_ASE_M16;
    public static EF EF_MIPS_ARCH;
    public static EF EF_MIPS_ARCH_1;
    public static EF EF_MIPS_ARCH_2;
    public static EF EF_MIPS_ARCH_3;
    public static EF EF_MIPS_ARCH_4;
    public static EF EF_MIPS_ARCH_5;
    public static EF EF_MIPS_ARCH_32;
    public static EF EF_MIPS_ARCH_64;
    public static EF EF_MIPS_ARCH_32R2;
    public static EF EF_MIPS_ARCH_64R2;
    public static EF EF_PPC_EMB;
    public static EF EF_PPC_RELOCATABLE;
    public static EF EF_PPC_RELOCATABLE_LIB;
    public static EF EF_PPC64_ABI_VER0;
    public static EF EF_PPC64_ABI_VER1;
    public static EF EF_PPC64_ABI_VER2;
    public static EF EF_PPC64_ABI;
    public static EF EF_RISCV_RVC;
    public static EF EF_RISCV_FLOAT_ABI_MASK;
    public static EF EF_RISCV_FLOAT_ABI_SOFT;
    public static EF EF_RISCV_FLOAT_ABI_SINGLE;
    public static EF EF_RISCV_FLOAT_ABI_DOUBLE;
    public static EF EF_RISCV_FLOAT_ABI_QUAD;
    public static EF EF_RISCV_RVE;
    public static EF EF_RISCV_TSO;
    public static EF EF_SPARC_EXT_MASK;
    public static EF EF_SPARC_32PLUS;
    public static EF EF_SPARC_SUN_US1;
    public static EF EF_SPARC_HAL_R1;
    public static EF EF_SPARC_SUN_US3;
    public static EF EF_SPARCV9_MM;
    public static EF EF_SPARCV9_TSO;
    public static EF EF_SPARCV9_PSO;
    public static EF EF_SPARCV9_RMO;
    public static EF EF_PARISC_TRAPNIL;
    public static EF EF_PARISC_EXT;
    public static EF EF_PARISC_LSB;
    public static EF EF_PARISC_WIDE;
    public static EF EF_PARISC_NO_KABP;
    public static EF EF_PARISC_LAZYSWAP;
    public static EF EF_PARISC_ARCH;
    public static EF EFA_PARISC_1_0;
    public static EF EFA_PARISC_1_1;
    public static EF EFA_PARISC_2_0;
    public static EF EF_SH_MACH_MASK;
    public static EF EF_SH_UNKNOWN;
    public static EF EF_SH_SH1;
    public static EF EF_SH_SH2;
    public static EF EF_SH_SH3;
    public static EF EF_SH_DSP;
    public static EF EF_SH_SH3_DSP;
    public static EF EF_SH_SH3E;
    public static EF EF_SH_SH4;
    public static EF EF_SH5;
    public static EF EF_SH2E;
    public static EF EF_SH4A;
    public static EF EF_SH2A;
    public static EF EF_SH4_NOFPU;
    public static EF EF_SH4A_NOFPU;
    public static EF EF_SH4_NOMMU_NOFPU;
    public static EF EF_SH2A_NOFPU;
    public static EF EF_SH3_NOMMU;
    public static EF EF_SH2A_SH4_NOFPU;
    public static EF EF_SH2A_SH3_NOFPU;
    public static EF EF_SH2A_SH4;
    public static EF EF_SH2A_SH3E;
    public static EF EF_IA_64_MASKOS;
    public static EF EF_IA_64_ARCH;
    public static EF EF_IA_64_ARCHVER_1;
    public static EF EF_IA_64_TRAPNIL;
    public static EF EF_IA_64_EXT;
    public static EF EF_IA_64_BE;
    public static EF EFA_IA_64_EAS2_3;
    public static EF EF_IA_64_ABI64;
    public static EF EF_IA_64_REDUCEDFP;
    public static EF EF_IA_64_CONS_GP;
    public static EF EF_IA_64_NOFUNCDESC_CONS_GP;
    public static EF EF_IA_64_ABSOLUTE;
}
public enum JetBrains.FormatRipper.Elf.ELFCLASS : Enum {
    public byte value__;
    public static ELFCLASS ELFCLASSNONE;
    public static ELFCLASS ELFCLASS32;
    public static ELFCLASS ELFCLASS64;
}
public enum JetBrains.FormatRipper.Elf.ELFDATA : Enum {
    public byte value__;
    public static ELFDATA ELFDATANONE;
    public static ELFDATA ELFDATA2LSB;
    public static ELFDATA ELFDATA2MSB;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class JetBrains.FormatRipper.Elf.ElfFile : object {
    public EF EFlags;
    public byte EiAbiVersion;
    public ELFCLASS EiClass;
    public ELFDATA EiData;
    public ELFOSABI EiOsAbi;
    public EM EMachine;
    public ET EType;
    public string Interpreter;
    private ElfFile(ELFCLASS eiClass, ELFDATA eiData, ELFOSABI eiOsAbi, byte eiAbiVersion, ET eType, EM eMachine, EF eFlags, string interpreter);
    [NullableContextAttribute("1")]
public static bool Is(Stream stream);
    [NullableContextAttribute("1")]
public static ElfFile Parse(Stream stream);
    [CompilerGeneratedAttribute]
internal static ushort <Parse>g__GetU2|10_0(ushort v, <>c__DisplayClass10_0& );
    [CompilerGeneratedAttribute]
internal static UInt32 <Parse>g__GetU4|10_1(UInt32 v, <>c__DisplayClass10_0& );
    [CompilerGeneratedAttribute]
internal static ulong <Parse>g__GetU8|10_2(ulong v, <>c__DisplayClass10_0& );
    [CompilerGeneratedAttribute]
internal static Data <Parse>g__Read32|10_3(<>c__DisplayClass10_0& );
    [CompilerGeneratedAttribute]
internal static Data <Parse>g__Read64|10_4(<>c__DisplayClass10_0& );
}
public enum JetBrains.FormatRipper.Elf.ELFOSABI : Enum {
    public byte value__;
    public static ELFOSABI ELFOSABI_NONE;
    public static ELFOSABI ELFOSABI_HPUX;
    public static ELFOSABI ELFOSABI_NETBSD;
    public static ELFOSABI ELFOSABI_LINUX;
    public static ELFOSABI ELFOSABI_HURD;
    public static ELFOSABI ELFOSABI_86OPEN;
    public static ELFOSABI ELFOSABI_SOLARIS;
    public static ELFOSABI ELFOSABI_AIX;
    public static ELFOSABI ELFOSABI_IRIX;
    public static ELFOSABI ELFOSABI_FREEBSD;
    public static ELFOSABI ELFOSABI_TRU64;
    public static ELFOSABI ELFOSABI_MODESTO;
    public static ELFOSABI ELFOSABI_OPENBSD;
    public static ELFOSABI ELFOSABI_OPENVMS;
    public static ELFOSABI ELFOSABI_NSK;
    public static ELFOSABI ELFOSABI_AROS;
    public static ELFOSABI ELFOSABI_FENIXOS;
    public static ELFOSABI ELFOSABI_CLOUDABI;
    public static ELFOSABI ELFOSABI_OPENVOS;
    public static ELFOSABI ELFOSABI_C6000_ELFABI;
    public static ELFOSABI ELFOSABI_AMDGPU_HSA;
    public static ELFOSABI ELFOSABI_C6000_LINUX;
    public static ELFOSABI ELFOSABI_ARM;
    public static ELFOSABI ELFOSABI_STANDALONE;
}
public enum JetBrains.FormatRipper.Elf.EM : Enum {
    public ushort value__;
    public static EM EM_NONE;
    public static EM EM_M32;
    public static EM EM_SPARC;
    public static EM EM_386;
    public static EM EM_68K;
    public static EM EM_88K;
    public static EM EM_IAMCU;
    public static EM EM_860;
    public static EM EM_MIPS;
    public static EM EM_S370;
    public static EM EM_MIPS_RS3_LE;
    public static EM EM_PARISC;
    public static EM EM_VPP500;
    public static EM EM_SPARC32PLUS;
    public static EM EM_960;
    public static EM EM_PPC;
    public static EM EM_PPC64;
    public static EM EM_S390;
    public static EM EM_SPU;
    public static EM EM_V800;
    public static EM EM_FR20;
    public static EM EM_RH32;
    public static EM EM_RCE;
    public static EM EM_ARM;
    public static EM EM_SH;
    public static EM EM_SPARCV9;
    public static EM EM_TRICORE;
    public static EM EM_ARC;
    public static EM EM_H8_300;
    public static EM EM_H8_300H;
    public static EM EM_H8S;
    public static EM EM_H8_500;
    public static EM EM_IA_64;
    public static EM EM_MIPS_X;
    public static EM EM_COLDFIRE;
    public static EM EM_68HC12;
    public static EM EM_MMA;
    public static EM EM_PCP;
    public static EM EM_NCPU;
    public static EM EM_NDR1;
    public static EM EM_STARCORE;
    public static EM EM_ME16;
    public static EM EM_ST100;
    public static EM EM_TINYJ;
    public static EM EM_X86_64;
    public static EM EM_PDSP;
    public static EM EM_PDP10;
    public static EM EM_PDP11;
    public static EM EM_FX66;
    public static EM EM_ST9PLUS;
    public static EM EM_ST7;
    public static EM EM_68HC16;
    public static EM EM_68HC11;
    public static EM EM_68HC08;
    public static EM EM_68HC05;
    public static EM EM_SVX;
    public static EM EM_ST19;
    public static EM EM_VAX;
    public static EM EM_CRIS;
    public static EM EM_JAVELIN;
    public static EM EM_FIREPATH;
    public static EM EM_ZSP;
    public static EM EM_MMIX;
    public static EM EM_HUANY;
    public static EM EM_PRISM;
    public static EM EM_AVR;
    public static EM EM_FR30;
    public static EM EM_D10V;
    public static EM EM_D30V;
    public static EM EM_V850;
    public static EM EM_M32R;
    public static EM EM_MN10300;
    public static EM EM_MN10200;
    public static EM EM_PJ;
    public static EM EM_OPENRISC;
    public static EM EM_ARC_COMPACT;
    public static EM EM_XTENSA;
    public static EM EM_VIDEOCORE;
    public static EM EM_TMM_GPP;
    public static EM EM_NS32K;
    public static EM EM_TPC;
    public static EM EM_SNP1K;
    public static EM EM_ST200;
    public static EM EM_IP2K;
    public static EM EM_MAX;
    public static EM EM_CR;
    public static EM EM_F2MC16;
    public static EM EM_MSP430;
    public static EM EM_BLACKFIN;
    public static EM EM_SE_C33;
    public static EM EM_SEP;
    public static EM EM_ARCA;
    public static EM EM_UNICORE;
    public static EM EM_EXCESS;
    public static EM EM_DXP;
    public static EM EM_ALTERA_NIOS2;
    public static EM EM_CRX;
    public static EM EM_XGATE;
    public static EM EM_C166;
    public static EM EM_M16C;
    public static EM EM_DSPIC30F;
    public static EM EM_CE;
    public static EM EM_M32C;
    public static EM EM_TSK3000;
    public static EM EM_RS08;
    public static EM EM_SHARC;
    public static EM EM_ECOG2;
    public static EM EM_SCORE7;
    public static EM EM_DSP24;
    public static EM EM_VIDEOCORE3;
    public static EM EM_LATTICEMICO32;
    public static EM EM_SE_C17;
    public static EM EM_TI_C6000;
    public static EM EM_TI_C2000;
    public static EM EM_TI_C5500;
    public static EM EM_MMDSP_PLUS;
    public static EM EM_CYPRESS_M8C;
    public static EM EM_R32C;
    public static EM EM_TRIMEDIA;
    public static EM EM_HEXAGON;
    public static EM EM_8051;
    public static EM EM_STXP7X;
    public static EM EM_NDS32;
    public static EM EM_ECOG1;
    public static EM EM_ECOG1X;
    public static EM EM_MAXQ30;
    public static EM EM_XIMO16;
    public static EM EM_MANIK;
    public static EM EM_CRAYNV2;
    public static EM EM_RX;
    public static EM EM_METAG;
    public static EM EM_MCST_ELBRUS;
    public static EM EM_ECOG16;
    public static EM EM_CR16;
    public static EM EM_ETPU;
    public static EM EM_SLE9X;
    public static EM EM_L10M;
    public static EM EM_K10M;
    public static EM EM_AARCH64;
    public static EM EM_AVR32;
    public static EM EM_STM8;
    public static EM EM_TILE64;
    public static EM EM_TILEPRO;
    public static EM EM_CUDA;
    public static EM EM_TILEGX;
    public static EM EM_CLOUDSHIELD;
    public static EM EM_COREA_1ST;
    public static EM EM_COREA_2ND;
    public static EM EM_ARC_COMPACT2;
    public static EM EM_OPEN8;
    public static EM EM_RL78;
    public static EM EM_VIDEOCORE5;
    public static EM EM_78KOR;
    public static EM EM_56800EX;
    public static EM EM_BA1;
    public static EM EM_BA2;
    public static EM EM_XCORE;
    public static EM EM_MCHP_PIC;
    public static EM EM_INTEL205;
    public static EM EM_INTEL206;
    public static EM EM_INTEL207;
    public static EM EM_INTEL208;
    public static EM EM_INTEL209;
    public static EM EM_KM32;
    public static EM EM_KMX32;
    public static EM EM_KMX16;
    public static EM EM_KMX8;
    public static EM EM_KVARC;
    public static EM EM_CDP;
    public static EM EM_COGE;
    public static EM EM_COOL;
    public static EM EM_NORC;
    public static EM EM_CSR_KALIMBA;
    public static EM EM_AMDGPU;
    public static EM EM_RISCV;
    public static EM EM_LOONGARCH;
    public static EM EM_WEBASSEMBLY;
    public static EM EM_ALPHA_STD;
    public static EM EM_ALPHA;
}
public enum JetBrains.FormatRipper.Elf.ET : Enum {
    public ushort value__;
    public static ET ET_NONE;
    public static ET ET_REL;
    public static ET ET_EXEC;
    public static ET ET_DYN;
    public static ET ET_CORE;
    public static ET ET_LOOS;
    public static ET ET_HIOS;
    public static ET ET_LOPROC;
    public static ET ET_HIPROC;
}
internal static class JetBrains.FormatRipper.Elf.Impl.EI : object {
    internal static int EI_NIDENT;
    internal static int EI_MAG0;
    internal static int EI_MAG1;
    internal static int EI_MAG2;
    internal static int EI_MAG3;
    internal static int EI_CLASS;
    internal static int EI_DATA;
    internal static int EI_VERSION;
    internal static int EI_OSABI;
    internal static int EI_ABIVERSION;
    internal static int EI_PAD;
}
internal class JetBrains.FormatRipper.Elf.Impl.Elf32_Ehdr : ValueType {
    internal ushort e_type;
    internal ushort e_machine;
    internal UInt32 e_version;
    internal UInt32 e_entry;
    internal UInt32 e_phoff;
    internal UInt32 e_shoff;
    internal UInt32 e_flags;
    internal ushort e_ehsize;
    internal ushort e_phentsize;
    internal ushort e_phnum;
    internal ushort e_shentsize;
    internal ushort e_shnum;
    internal ushort e_shstrndx;
}
internal class JetBrains.FormatRipper.Elf.Impl.Elf32_Phdr : ValueType {
    internal UInt32 p_type;
    internal UInt32 p_offset;
    internal UInt32 p_vaddr;
    internal UInt32 p_paddr;
    internal UInt32 p_filesz;
    internal UInt32 p_memsz;
    internal UInt32 p_flags;
    internal UInt32 p_align;
}
internal class JetBrains.FormatRipper.Elf.Impl.Elf64_Ehdr : ValueType {
    internal ushort e_type;
    internal ushort e_machine;
    internal UInt32 e_version;
    internal ulong e_entry;
    internal ulong e_phoff;
    internal ulong e_shoff;
    internal UInt32 e_flags;
    internal ushort e_ehsize;
    internal ushort e_phentsize;
    internal ushort e_phnum;
    internal ushort e_shentsize;
    internal ushort e_shnum;
    internal ushort e_shstrndx;
}
internal class JetBrains.FormatRipper.Elf.Impl.Elf64_Phdr : ValueType {
    internal UInt32 p_type;
    internal UInt32 p_flags;
    internal ulong p_offset;
    internal ulong p_vaddr;
    internal ulong p_paddr;
    internal ulong p_filesz;
    internal ulong p_memsz;
    internal ulong p_align;
}
internal static class JetBrains.FormatRipper.Elf.Impl.ELFMAG : object {
    internal static byte ELFMAG0;
    internal static byte ELFMAG1;
    internal static byte ELFMAG2;
    internal static byte ELFMAG3;
}
internal enum JetBrains.FormatRipper.Elf.Impl.EV : Enum {
    public byte value__;
    public static EV EV_NONE;
    public static EV EV_CURRENT;
}
internal enum JetBrains.FormatRipper.Elf.Impl.PT : Enum {
    public UInt32 value__;
    public static PT PT_NULL;
    public static PT PT_LOAD;
    public static PT PT_DYNAMIC;
    public static PT PT_INTERP;
    public static PT PT_NOTE;
    public static PT PT_SHLIB;
    public static PT PT_PHDR;
    public static PT PT_TLS;
    public static PT PT_NUM;
    public static PT PT_LOOS;
    public static PT PT_GNU_EH_FRAME;
    public static PT PT_GNU_STACK;
    public static PT PT_GNU_RELRO;
    public static PT PT_LOSUNW;
    public static PT PT_SUNWBSS;
    public static PT PT_SUNWSTACK;
    public static PT PT_HISUNW;
    public static PT PT_HIOS;
    public static PT PT_LOPROC;
    public static PT PT_HIPROC;
}
[FlagsAttribute]
public enum JetBrains.FormatRipper.FileExplorer.FileProperties : Enum {
    public UInt32 value__;
    public static FileProperties UnknownType;
    public static FileProperties ExecutableType;
    public static FileProperties SharedLibraryType;
    public static FileProperties BundleType;
    public static FileProperties TypeMask;
    public static FileProperties MultiArch;
    public static FileProperties Managed;
    public static FileProperties Signed;
}
public enum JetBrains.FormatRipper.FileExplorer.FileType : Enum {
    public int value__;
    public static FileType Unknown;
    public static FileType Pe;
    public static FileType Msi;
    public static FileType MachO;
    public static FileType Elf;
    public static FileType Sh;
    public static FileType Dmg;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.FormatRipper.FileExplorer.FileTypeExplorer : object {
    public static Result Detect(Stream stream);
    [ExtensionAttribute]
public static Result DetectFileType(Stream stream);
    private static bool TryParsePe(Stream stream, FileProperties& properties);
    private static bool TryParseElf(Stream stream, FileProperties& properties);
    private static bool TryParseMachO(Stream stream, FileProperties& properties);
    private static bool TryParseMsi(Stream stream, FileProperties& properties);
    private static bool TryParseSh(Stream stream, FileProperties& properties);
    private static bool TryParseDmg(Stream stream, FileProperties& properties);
    [CompilerGeneratedAttribute]
internal static Nullable`1<MH_FileType> <TryParseMachO>g__GetAggregatedFileType|5_0(IEnumerable`1<Section> sections);
    [CompilerGeneratedAttribute]
internal static bool <TryParseMachO>g__IsAllHasCodeSignature|5_1(IEnumerable`1<Section> sections);
}
internal static class JetBrains.FormatRipper.Impl.MemoryUtil : object {
    internal static ushort SwapU2(ushort v);
    internal static UInt32 SwapU4(UInt32 v);
    internal static ulong SwapU8(ulong v);
    internal static Guid SwapGuid(Guid v);
    internal static ushort GetLeU2(ushort v);
    internal static UInt32 GetLeU4(UInt32 v);
    internal static ulong GetLeU8(ulong v);
    internal static Guid GetLeGuid(Guid v);
    internal static ushort GetBeU2(ushort v);
    internal static UInt32 GetBeU4(UInt32 v);
    internal static ulong GetBeU8(ulong v);
    internal static Guid GetBeGuid(Guid v);
    internal static void CopyBytes(Byte* src, Byte* dst, int size);
    internal static Byte[] CopyBytes(Byte* buf, int size);
    [NullableContextAttribute("1")]
internal static int GetAsciiStringZSize(Byte[] buf);
    internal static bool ArraysEqual(Byte* array1, int size1, Byte[] array2);
    [NullableContextAttribute("1")]
internal static T[] ArrayMerge(T[] array1, T[] array2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class JetBrains.FormatRipper.Impl.StreamRangeUtil : object {
    internal static void Sort(List`1<StreamRange> sortedRanges);
    internal static List`1<StreamRange> Invert(long totalSize, List`1<StreamRange> sortedRanges);
    internal static void MergeNeighbors(List`1<StreamRange> orderedRanges);
}
internal static class JetBrains.FormatRipper.Impl.StreamUtil : object {
    [NullableContextAttribute("1")]
internal static void Read(Stream stream, Byte[] buffer, int index, int size);
    [NullableContextAttribute("1")]
internal static Byte[] ReadBytes(Stream stream, int size);
    internal static void ReadBytes(Stream stream, Byte* dst, int size);
    internal static void WriteBytes(Stream stream, Byte* src, int size);
    [NullableContextAttribute("1")]
internal static void CopyBytes(Stream sourceStream, Stream destinationStream, long bytesToCopy, int maxChunk);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.FormatRipper.MachO.CDHash : object {
    [CompilerGeneratedAttribute]
private string <HashName>k__BackingField;
    [CompilerGeneratedAttribute]
private ComputeHashInfo <ComputeHashInfo>k__BackingField;
    public string HashName { get; private set; }
    public ComputeHashInfo ComputeHashInfo { get; private set; }
    internal CDHash(string hashName, ComputeHashInfo computeHashInfo);
    [CompilerGeneratedAttribute]
public string get_HashName();
    [CompilerGeneratedAttribute]
private void set_HashName(string value);
    [CompilerGeneratedAttribute]
public ComputeHashInfo get_ComputeHashInfo();
    [CompilerGeneratedAttribute]
private void set_ComputeHashInfo(ComputeHashInfo value);
}
[FlagsAttribute]
public enum JetBrains.FormatRipper.MachO.CPU_SUBTYPE : Enum {
    public UInt32 value__;
    public static CPU_SUBTYPE CPU_SUBTYPE_MASK;
    public static CPU_SUBTYPE CPU_SUBTYPE_LIB64;
    public static CPU_SUBTYPE CPU_SUBTYPE_VAX_ALL;
    public static CPU_SUBTYPE CPU_SUBTYPE_VAX780;
    public static CPU_SUBTYPE CPU_SUBTYPE_VAX785;
    public static CPU_SUBTYPE CPU_SUBTYPE_VAX750;
    public static CPU_SUBTYPE CPU_SUBTYPE_VAX730;
    public static CPU_SUBTYPE CPU_SUBTYPE_UVAXI;
    public static CPU_SUBTYPE CPU_SUBTYPE_UVAXII;
    public static CPU_SUBTYPE CPU_SUBTYPE_VAX8200;
    public static CPU_SUBTYPE CPU_SUBTYPE_VAX8500;
    public static CPU_SUBTYPE CPU_SUBTYPE_VAX8600;
    public static CPU_SUBTYPE CPU_SUBTYPE_VAX8650;
    public static CPU_SUBTYPE CPU_SUBTYPE_VAX8800;
    public static CPU_SUBTYPE CPU_SUBTYPE_UVAXIII;
    public static CPU_SUBTYPE CPU_SUBTYPE_MC680x0_ALL;
    public static CPU_SUBTYPE CPU_SUBTYPE_MC68030;
    public static CPU_SUBTYPE CPU_SUBTYPE_MC68040;
    public static CPU_SUBTYPE CPU_SUBTYPE_MC68030_ONLY;
    public static CPU_SUBTYPE CPU_SUBTYPE_I386_ALL;
    public static CPU_SUBTYPE CPU_SUBTYPE_386;
    public static CPU_SUBTYPE CPU_SUBTYPE_486;
    public static CPU_SUBTYPE CPU_SUBTYPE_486SX;
    public static CPU_SUBTYPE CPU_SUBTYPE_586;
    public static CPU_SUBTYPE CPU_SUBTYPE_PENT;
    public static CPU_SUBTYPE CPU_SUBTYPE_PENTPRO;
    public static CPU_SUBTYPE CPU_SUBTYPE_PENTII_M3;
    public static CPU_SUBTYPE CPU_SUBTYPE_PENTII_M5;
    public static CPU_SUBTYPE CPU_SUBTYPE_CELERON;
    public static CPU_SUBTYPE CPU_SUBTYPE_CELERON_MOBILE;
    public static CPU_SUBTYPE CPU_SUBTYPE_PENTIUM_3;
    public static CPU_SUBTYPE CPU_SUBTYPE_PENTIUM_3_M;
    public static CPU_SUBTYPE CPU_SUBTYPE_PENTIUM_3_XEON;
    public static CPU_SUBTYPE CPU_SUBTYPE_PENTIUM_M;
    public static CPU_SUBTYPE CPU_SUBTYPE_PENTIUM_4;
    public static CPU_SUBTYPE CPU_SUBTYPE_PENTIUM_4_M;
    public static CPU_SUBTYPE CPU_SUBTYPE_ITANIUM;
    public static CPU_SUBTYPE CPU_SUBTYPE_ITANIUM_2;
    public static CPU_SUBTYPE CPU_SUBTYPE_XEON;
    public static CPU_SUBTYPE CPU_SUBTYPE_XEON_MP;
    public static CPU_SUBTYPE CPU_SUBTYPE_X86_ALL;
    public static CPU_SUBTYPE CPU_SUBTYPE_X86_64_ALL;
    public static CPU_SUBTYPE CPU_SUBTYPE_X86_ARCH1;
    public static CPU_SUBTYPE CPU_SUBTYPE_X86_64_H;
    public static CPU_SUBTYPE CPU_SUBTYPE_MIPS_ALL;
    public static CPU_SUBTYPE CPU_SUBTYPE_MIPS_R2300;
    public static CPU_SUBTYPE CPU_SUBTYPE_MIPS_R2600;
    public static CPU_SUBTYPE CPU_SUBTYPE_MIPS_R2800;
    public static CPU_SUBTYPE CPU_SUBTYPE_MIPS_R2000a;
    public static CPU_SUBTYPE CPU_SUBTYPE_MIPS_R2000;
    public static CPU_SUBTYPE CPU_SUBTYPE_MIPS_R3000a;
    public static CPU_SUBTYPE CPU_SUBTYPE_MIPS_R3000;
    public static CPU_SUBTYPE CPU_SUBTYPE_MC98000_ALL;
    public static CPU_SUBTYPE CPU_SUBTYPE_MC98601;
    public static CPU_SUBTYPE CPU_SUBTYPE_HPPA_ALL;
    public static CPU_SUBTYPE CPU_SUBTYPE_HPPA_7100;
    public static CPU_SUBTYPE CPU_SUBTYPE_HPPA_7100LC;
    public static CPU_SUBTYPE CPU_SUBTYPE_MC88000_ALL;
    public static CPU_SUBTYPE CPU_SUBTYPE_MC88100;
    public static CPU_SUBTYPE CPU_SUBTYPE_MC88110;
    public static CPU_SUBTYPE CPU_SUBTYPE_SPARC_ALL;
    public static CPU_SUBTYPE CPU_SUBTYPE_I860_ALL;
    public static CPU_SUBTYPE CPU_SUBTYPE_I860_860;
    public static CPU_SUBTYPE CPU_SUBTYPE_POWERPC_ALL;
    public static CPU_SUBTYPE CPU_SUBTYPE_POWERPC_601;
    public static CPU_SUBTYPE CPU_SUBTYPE_POWERPC_602;
    public static CPU_SUBTYPE CPU_SUBTYPE_POWERPC_603;
    public static CPU_SUBTYPE CPU_SUBTYPE_POWERPC_603e;
    public static CPU_SUBTYPE CPU_SUBTYPE_POWERPC_603ev;
    public static CPU_SUBTYPE CPU_SUBTYPE_POWERPC_604;
    public static CPU_SUBTYPE CPU_SUBTYPE_POWERPC_604e;
    public static CPU_SUBTYPE CPU_SUBTYPE_POWERPC_620;
    public static CPU_SUBTYPE CPU_SUBTYPE_POWERPC_750;
    public static CPU_SUBTYPE CPU_SUBTYPE_POWERPC_7400;
    public static CPU_SUBTYPE CPU_SUBTYPE_POWERPC_7450;
    public static CPU_SUBTYPE CPU_SUBTYPE_POWERPC_970;
    public static CPU_SUBTYPE CPU_SUBTYPE_ARM_ALL;
    public static CPU_SUBTYPE CPU_SUBTYPE_ARM_V4T;
    public static CPU_SUBTYPE CPU_SUBTYPE_ARM_V6;
    public static CPU_SUBTYPE CPU_SUBTYPE_ARM_V5TEJ;
    public static CPU_SUBTYPE CPU_SUBTYPE_ARM_XSCALE;
    public static CPU_SUBTYPE CPU_SUBTYPE_ARM_V7;
    public static CPU_SUBTYPE CPU_SUBTYPE_ARM_V7F;
    public static CPU_SUBTYPE CPU_SUBTYPE_ARM_V7S;
    public static CPU_SUBTYPE CPU_SUBTYPE_ARM_V7K;
    public static CPU_SUBTYPE CPU_SUBTYPE_ARM_V6M;
    public static CPU_SUBTYPE CPU_SUBTYPE_ARM_V7M;
    public static CPU_SUBTYPE CPU_SUBTYPE_ARM_V7EM;
    public static CPU_SUBTYPE CPU_SUBTYPE_ARM_V8;
    public static CPU_SUBTYPE CPU_SUBTYPE_ARM64_ALL;
    public static CPU_SUBTYPE CPU_SUBTYPE_ARM64_V8;
    public static CPU_SUBTYPE CPU_SUBTYPE_ARM64_E;
}
public enum JetBrains.FormatRipper.MachO.CPU_TYPE : Enum {
    public UInt32 value__;
    public static CPU_TYPE CPU_ARCH_MASK;
    public static CPU_TYPE CPU_ARCH_ABI64;
    public static CPU_TYPE CPU_TYPE_VAX;
    public static CPU_TYPE CPU_TYPE_ROMP;
    public static CPU_TYPE CPU_TYPE_MC680x0;
    public static CPU_TYPE CPU_TYPE_X86;
    public static CPU_TYPE CPU_TYPE_I386;
    public static CPU_TYPE CPU_TYPE_X86_64;
    public static CPU_TYPE CPU_TYPE_MIPS;
    public static CPU_TYPE CPU_TYPE_MC98000;
    public static CPU_TYPE CPU_TYPE_HPPA;
    public static CPU_TYPE CPU_TYPE_ARM;
    public static CPU_TYPE CPU_TYPE_ARM64;
    public static CPU_TYPE CPU_TYPE_MC88000;
    public static CPU_TYPE CPU_TYPE_SPARC;
    public static CPU_TYPE CPU_TYPE_I860;
    public static CPU_TYPE CPU_TYPE_ALPHA;
    public static CPU_TYPE CPU_TYPE_POWERPC;
    public static CPU_TYPE CPU_TYPE_POWERPC64;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.FormatRipper.MachO.HashVerificationUnit : object {
    [CompilerGeneratedAttribute]
private string <HashName>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ExpectedHashValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ComputeHashInfo <ComputeHashInfo>k__BackingField;
    public string HashName { get; private set; }
    public Byte[] ExpectedHashValue { get; private set; }
    public ComputeHashInfo ComputeHashInfo { get; private set; }
    internal HashVerificationUnit(string hashName, Byte[] expectedHashValue, ComputeHashInfo computeHashInfo);
    [CompilerGeneratedAttribute]
public string get_HashName();
    [CompilerGeneratedAttribute]
private void set_HashName(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_ExpectedHashValue();
    [CompilerGeneratedAttribute]
private void set_ExpectedHashValue(Byte[] value);
    [CompilerGeneratedAttribute]
public ComputeHashInfo get_ComputeHashInfo();
    [CompilerGeneratedAttribute]
private void set_ComputeHashInfo(ComputeHashInfo value);
}
internal class JetBrains.FormatRipper.MachO.Impl.CS_Blob : ValueType {
    internal UInt32 magic;
    internal UInt32 length;
}
internal class JetBrains.FormatRipper.MachO.Impl.CS_BlobIndex : ValueType {
    internal UInt32 type;
    internal UInt32 offset;
}
internal class JetBrains.FormatRipper.MachO.Impl.CS_CodeDirectory : ValueType {
    internal UInt32 magic;
    internal UInt32 length;
    internal UInt32 version;
    internal UInt32 flags;
    internal UInt32 hashOffset;
    internal UInt32 identOffset;
    internal UInt32 nSpecialSlots;
    internal UInt32 nCodeSlots;
    internal UInt32 codeLimit;
    internal byte hashSize;
    internal byte hashType;
    internal byte spare1;
    internal byte pageSize;
    internal UInt32 spare2;
}
internal class JetBrains.FormatRipper.MachO.Impl.CS_Entitlements : ValueType {
    internal UInt32 magic;
    internal UInt32 length;
}
internal static class JetBrains.FormatRipper.MachO.Impl.CS_HASHTYPE : object {
    internal static UInt32 CS_HASHTYPE_SHA1;
    internal static UInt32 CS_HASHTYPE_SHA256;
    internal static UInt32 CS_HASHTYPE_SHA256_TRUNCATED;
    internal static UInt32 CS_HASHTYPE_SHA384;
    internal static UInt32 CS_HASHTYPE_SHA512;
    [NullableContextAttribute("1")]
internal static string GetHashName(UInt32 id);
}
internal class JetBrains.FormatRipper.MachO.Impl.CS_SuperBlob : ValueType {
    internal UInt32 magic;
    internal UInt32 length;
    internal UInt32 count;
}
internal enum JetBrains.FormatRipper.MachO.Impl.CSMAGIC : Enum {
    public UInt32 value__;
    public static CSMAGIC CSMAGIC_REQUIREMENT;
    public static CSMAGIC CSMAGIC_REQUIREMENTS;
    public static CSMAGIC CSMAGIC_CODEDIRECTORY;
    public static CSMAGIC CSMAGIC_EMBEDDED_SIGNATURE;
    public static CSMAGIC CSMAGIC_DETACHED_SIGNATURE;
    public static CSMAGIC CSMAGIC_BLOBWRAPPER;
    public static CSMAGIC CSMAGIC_EMBEDDED_ENTITLEMENTS;
    public static CSMAGIC CSMAGIC_EMBEDDED_ENTITLEMENTS_DER;
}
internal static class JetBrains.FormatRipper.MachO.Impl.CSSLOT : object {
    internal static UInt32 CSSLOT_CODEDIRECTORY;
    internal static UInt32 CSSLOT_INFOSLOT;
    internal static UInt32 CSSLOT_REQUIREMENTS;
    internal static UInt32 CSSLOT_RESOURCEDIR;
    internal static UInt32 CSSLOT_APPLICATION;
    internal static UInt32 CSSLOT_ENTITLEMENTS;
    internal static UInt32 CSSLOT_REP_SPECIFIC;
    internal static UInt32 CSSLOT_ENTITLEMENTS_DER;
    internal static UInt32 CSSLOT_LAUNCH_CONSTRAINT_SELF;
    internal static UInt32 CSSLOT_LAUNCH_CONSTRAINT_PARENT;
    internal static UInt32 CSSLOT_LAUNCH_CONSTRAINT_RESPONSIBLE;
    internal static UInt32 CSSLOT_LIBRARY_CONSTRAINT;
    internal static UInt32 CSSLOT_ALTERNATE_CODEDIRECTORIES;
    internal static UInt32 CSSLOT_ALTERNATE_CODEDIRECTORIES1;
    internal static UInt32 CSSLOT_ALTERNATE_CODEDIRECTORIES2;
    internal static UInt32 CSSLOT_ALTERNATE_CODEDIRECTORIES3;
    internal static UInt32 CSSLOT_ALTERNATE_CODEDIRECTORIES4;
    internal static UInt32 CSSLOT_ALTERNATE_CODEDIRECTORY_MAX;
    internal static UInt32 CSSLOT_ALTERNATE_CODEDIRECTORY_LIMIT;
    internal static UInt32 CSSLOT_CMS_SIGNATURE;
    internal static UInt32 CSSLOT_HASHABLE_ENTRIES_MAX;
}
internal class JetBrains.FormatRipper.MachO.Impl.fat_arch : ValueType {
    internal UInt32 cputype;
    internal UInt32 cpusubtype;
    internal UInt32 offset;
    internal UInt32 size;
    internal UInt32 align;
}
internal class JetBrains.FormatRipper.MachO.Impl.fat_arch_64 : ValueType {
    internal UInt32 cputype;
    internal UInt32 cpusubtype;
    internal ulong offset;
    internal ulong size;
    internal UInt32 align;
    internal UInt32 reserved;
}
internal class JetBrains.FormatRipper.MachO.Impl.fat_header : ValueType {
    internal UInt32 nfat_arch;
}
internal enum JetBrains.FormatRipper.MachO.Impl.LC : Enum {
    public UInt32 value__;
    public static LC LC_REQ_DYLD;
    public static LC LC_SEGMENT;
    public static LC LC_SYMTAB;
    public static LC LC_SYMSEG;
    public static LC LC_THREAD;
    public static LC LC_UNIXTHREAD;
    public static LC LC_LOADFVMLIB;
    public static LC LC_IDFVMLIB;
    public static LC LC_IDENT;
    public static LC LC_FVMFILE;
    public static LC LC_PREPAGE;
    public static LC LC_DYSYMTAB;
    public static LC LC_LOAD_DYLIB;
    public static LC LC_ID_DYLIB;
    public static LC LC_LOAD_DYLINKER;
    public static LC LC_ID_DYLINKER;
    public static LC LC_PREBOUND_DYLIB;
    public static LC LC_ROUTINES;
    public static LC LC_SUB_FRAMEWORK;
    public static LC LC_SUB_UMBRELLA;
    public static LC LC_SUB_CLIENT;
    public static LC LC_SUB_LIBRARY;
    public static LC LC_TWOLEVEL_HINTS;
    public static LC LC_PREBIND_CKSUM;
    public static LC LC_LOAD_WEAK_DYLIB;
    public static LC LC_SEGMENT_64;
    public static LC LC_ROUTINES_64;
    public static LC LC_UUID;
    public static LC LC_RPATH;
    public static LC LC_CODE_SIGNATURE;
    public static LC LC_SEGMENT_SPLIT_INFO;
    public static LC LC_REEXPORT_DYLIB;
    public static LC LC_LAZY_LOAD_DYLIB;
    public static LC LC_ENCRYPTION_INFO;
    public static LC LC_DYLD_INFO;
    public static LC LC_DYLD_INFO_ONLY;
    public static LC LC_LOAD_UPWARD_DYLIB;
    public static LC LC_VERSION_MIN_MACOSX;
    public static LC LC_VERSION_MIN_IPHONEOS;
    public static LC LC_FUNCTION_STARTS;
    public static LC LC_DYLD_ENVIRONMENT;
    public static LC LC_MAIN;
    public static LC LC_DATA_IN_CODE;
    public static LC LC_SOURCE_VERSION;
    public static LC LC_DYLIB_CODE_SIGN_DRS;
}
internal class JetBrains.FormatRipper.MachO.Impl.linkedit_data_command : ValueType {
    internal UInt32 dataoff;
    internal UInt32 datasize;
}
internal class JetBrains.FormatRipper.MachO.Impl.load_command : ValueType {
    internal UInt32 cmd;
    internal UInt32 cmdsize;
}
internal class JetBrains.FormatRipper.MachO.Impl.mach_header : ValueType {
    internal UInt32 cputype;
    internal UInt32 cpusubtype;
    internal UInt32 filetype;
    internal UInt32 ncmds;
    internal UInt32 sizeofcmds;
    internal UInt32 flags;
}
internal class JetBrains.FormatRipper.MachO.Impl.mach_header_64 : ValueType {
    internal UInt32 cputype;
    internal UInt32 cpusubtype;
    internal UInt32 filetype;
    internal UInt32 ncmds;
    internal UInt32 sizeofcmds;
    internal UInt32 flags;
    internal UInt32 reserved;
}
internal enum JetBrains.FormatRipper.MachO.Impl.MH : Enum {
    public UInt32 value__;
    public static MH FAT_MAGIC;
    public static MH FAT_MAGIC_64;
    public static MH FAT_CIGAM;
    public static MH FAT_CIGAM_64;
    public static MH MH_MAGIC;
    public static MH MH_MAGIC_64;
    public static MH MH_CIGAM;
    public static MH MH_CIGAM_64;
}
internal static class JetBrains.FormatRipper.MachO.Impl.SEG : object {
    [NullableAttribute("1")]
internal static string SEG_LINKEDIT;
}
internal class JetBrains.FormatRipper.MachO.Impl.segment_command : ValueType {
    [FixedBufferAttribute("System.Byte", "16")]
internal <segname>e__FixedBuffer segname;
    internal UInt32 vmaddr;
    internal UInt32 vmsize;
    internal UInt32 fileoff;
    internal UInt32 filesize;
    internal UInt32 maxprot;
    internal UInt32 initprot;
    internal UInt32 nsects;
    internal UInt32 flags;
}
internal class JetBrains.FormatRipper.MachO.Impl.segment_command_64 : ValueType {
    [FixedBufferAttribute("System.Byte", "16")]
internal <segname>e__FixedBuffer segname;
    internal ulong vmaddr;
    internal ulong vmsize;
    internal ulong fileoff;
    internal ulong filesize;
    internal UInt32 maxprot;
    internal UInt32 initprot;
    internal UInt32 nsects;
    internal UInt32 flags;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.FormatRipper.MachO.MachOFile : object {
    public Nullable`1<bool> IsFatLittleEndian;
    public Section[] Sections;
    [NullableAttribute("2")]
public MachOSignatureTransferData Signature;
    private MachOFile(Nullable`1<bool> isFatLittleEndian, Section[] sections);
    public static bool Is(Stream stream);
    public static MachOFile Parse(Stream stream, Mode mode);
    [CompilerGeneratedAttribute]
internal static bool <Is>g__Check|7_0(MH magic);
    [CompilerGeneratedAttribute]
internal static UInt32 <Is>g__GetU4|7_1(UInt32 v, <>c__DisplayClass7_0& );
    [CompilerGeneratedAttribute]
internal static ulong <Is>g__GetU8|7_2(ulong v, <>c__DisplayClass7_0& );
    [CompilerGeneratedAttribute]
internal static Section <Parse>g__Read|8_0(StreamRange imageRange, MH magic, <>c__DisplayClass8_0& );
    [CompilerGeneratedAttribute]
internal static UInt32 <Parse>g__GetU4|8_1(UInt32 v, <>c__DisplayClass8_1& );
    [CompilerGeneratedAttribute]
internal static ulong <Parse>g__GetU8|8_2(ulong v, <>c__DisplayClass8_1& );
    [CompilerGeneratedAttribute]
internal static LoadCommandsInfo <Parse>g__ReadLoadCommands|8_3(long cmdOffset, UInt32 nCmds, UInt32 sizeOfCmds, <>c__DisplayClass8_0& , <>c__DisplayClass8_1& );
    [CompilerGeneratedAttribute]
internal static int <Parse>g__GetZeroPadding|8_4(bool hasCodeSignature, <>c__DisplayClass8_1& );
    [CompilerGeneratedAttribute]
internal static UInt32 <Parse>g__GetU4|8_5(UInt32 v, <>c__DisplayClass8_2& );
    [CompilerGeneratedAttribute]
internal static ulong <Parse>g__GetU8|8_6(ulong v, <>c__DisplayClass8_2& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.FormatRipper.MachO.MachOSectionSignatureTransferData : object {
    [CompilerGeneratedAttribute]
private UInt32 <NumberOfLoadCommands>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <SizeOfLoadCommands>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <LcCodeSignatureSize>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <LinkEditDataOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <LinkEditDataSize>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <LastLinkeditCommandNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <LastLinkeditVmSize64>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <LastLinkeditFileSize64>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <LastLinkeditVmSize32>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <LastLinkeditFileSize32>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <SignatureBlob>k__BackingField;
    public UInt32 NumberOfLoadCommands { get; internal set; }
    public UInt32 SizeOfLoadCommands { get; internal set; }
    public UInt32 LcCodeSignatureSize { get; internal set; }
    public UInt32 LinkEditDataOffset { get; internal set; }
    public UInt32 LinkEditDataSize { get; internal set; }
    public UInt32 LastLinkeditCommandNumber { get; internal set; }
    public ulong LastLinkeditVmSize64 { get; internal set; }
    public ulong LastLinkeditFileSize64 { get; internal set; }
    public UInt32 LastLinkeditVmSize32 { get; internal set; }
    public UInt32 LastLinkeditFileSize32 { get; internal set; }
    public Byte[] SignatureBlob { get; internal set; }
    [CompilerGeneratedAttribute]
public UInt32 get_NumberOfLoadCommands();
    [CompilerGeneratedAttribute]
internal void set_NumberOfLoadCommands(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_SizeOfLoadCommands();
    [CompilerGeneratedAttribute]
internal void set_SizeOfLoadCommands(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_LcCodeSignatureSize();
    [CompilerGeneratedAttribute]
internal void set_LcCodeSignatureSize(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_LinkEditDataOffset();
    [CompilerGeneratedAttribute]
internal void set_LinkEditDataOffset(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_LinkEditDataSize();
    [CompilerGeneratedAttribute]
internal void set_LinkEditDataSize(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_LastLinkeditCommandNumber();
    [CompilerGeneratedAttribute]
internal void set_LastLinkeditCommandNumber(UInt32 value);
    [CompilerGeneratedAttribute]
public ulong get_LastLinkeditVmSize64();
    [CompilerGeneratedAttribute]
internal void set_LastLinkeditVmSize64(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_LastLinkeditFileSize64();
    [CompilerGeneratedAttribute]
internal void set_LastLinkeditFileSize64(ulong value);
    [CompilerGeneratedAttribute]
public UInt32 get_LastLinkeditVmSize32();
    [CompilerGeneratedAttribute]
internal void set_LastLinkeditVmSize32(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_LastLinkeditFileSize32();
    [CompilerGeneratedAttribute]
internal void set_LastLinkeditFileSize32(UInt32 value);
    [CompilerGeneratedAttribute]
public Byte[] get_SignatureBlob();
    [CompilerGeneratedAttribute]
internal void set_SignatureBlob(Byte[] value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.FormatRipper.MachO.MachOSignatureInjector : object {
    private static long MaxPaddingBytes;
    public static void InjectSignature(Stream sourceStream, Stream outputStream, MachOSignatureTransferData signatureTransferData);
    private static void ProcessFatMachO(Stream sourceStream, Stream outputStream, MH fatMagic, MachOSignatureTransferData signatureTransferData);
    private static MachOSectionInfo ProcessSection(Stream sourceStream, Stream outputStream, MachOSectionInfo sectionInfo, MachOSectionSignatureTransferData sectionSignature);
    private static void WritePaddingBytes(Stream outputStream, int alignment);
    private static long TransferSectionSignature(Stream sourceStream, StreamRange sourceStreamRange, Stream outputStream, MH magic, MachOSectionSignatureTransferData sectionSignature);
    [CompilerGeneratedAttribute]
internal static UInt32 <ProcessFatMachO>g__GetU4|3_0(UInt32 v, <>c__DisplayClass3_0& );
    [CompilerGeneratedAttribute]
internal static ulong <ProcessFatMachO>g__GetU8|3_1(ulong v, <>c__DisplayClass3_0& );
    [CompilerGeneratedAttribute]
internal static long <TransferSectionSignature>g__PositionFromStart|6_0(<>c__DisplayClass6_0& );
    [CompilerGeneratedAttribute]
internal static UInt32 <TransferSectionSignature>g__GetU4|6_1(UInt32 v, <>c__DisplayClass6_0& );
    [CompilerGeneratedAttribute]
internal static ulong <TransferSectionSignature>g__GetU8|6_2(ulong v, <>c__DisplayClass6_0& );
}
public class JetBrains.FormatRipper.MachO.MachOSignatureTransferData : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MachOSectionSignatureTransferData[] <SectionSignatures>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public MachOSectionSignatureTransferData[] SectionSignatures { get; internal set; }
    public MachOSignatureTransferData(MachOSectionSignatureTransferData[] sectionSignatures);
    [CompilerGeneratedAttribute]
public MachOSectionSignatureTransferData[] get_SectionSignatures();
    [CompilerGeneratedAttribute]
internal void set_SectionSignatures(MachOSectionSignatureTransferData[] value);
}
public enum JetBrains.FormatRipper.MachO.MH_FileType : Enum {
    public UInt32 value__;
    public static MH_FileType MH_OBJECT;
    public static MH_FileType MH_EXECUTE;
    public static MH_FileType MH_FVMLIB;
    public static MH_FileType MH_CORE;
    public static MH_FileType MH_PRELOAD;
    public static MH_FileType MH_DYLIB;
    public static MH_FileType MH_DYLINKER;
    public static MH_FileType MH_BUNDLE;
    public static MH_FileType MH_DYLIB_STUB;
    public static MH_FileType MH_DSYM;
    public static MH_FileType MH_KEXT_BUNDLE;
}
[FlagsAttribute]
public enum JetBrains.FormatRipper.MachO.MH_Flags : Enum {
    public UInt32 value__;
    public static MH_Flags MH_NOUNDEFS;
    public static MH_Flags MH_INCRLINK;
    public static MH_Flags MH_DYLDLINK;
    public static MH_Flags MH_BINDATLOAD;
    public static MH_Flags MH_PREBOUND;
    public static MH_Flags MH_SPLIT_SEGS;
    public static MH_Flags MH_LAZY_INIT;
    public static MH_Flags MH_TWOLEVEL;
    public static MH_Flags MH_FORCE_FLAT;
    public static MH_Flags MH_NOMULTIDEFS;
    public static MH_Flags MH_NOFIXPREBINDING;
    public static MH_Flags MH_PREBINDABLE;
    public static MH_Flags MH_ALLMODSBOUND;
    public static MH_Flags MH_SUBSECTIONS_VIA_SYMBOLS;
    public static MH_Flags MH_CANONICAL;
    public static MH_Flags MH_WEAK_DEFINES;
    public static MH_Flags MH_BINDS_TO_WEAK;
    public static MH_Flags MH_ALLOW_STACK_EXECUTION;
    public static MH_Flags MH_ROOT_SAFE;
    public static MH_Flags MH_SETUID_SAFE;
    public static MH_Flags MH_NO_REEXPORTED_DYLIBS;
    public static MH_Flags MH_PIE;
    public static MH_Flags MH_DEAD_STRIPPABLE_DYLIB;
    public static MH_Flags MH_HAS_TLV_DESCRIPTORS;
    public static MH_Flags MH_NO_HEAP_EXECUTION;
}
[FlagsAttribute]
public enum JetBrains.FormatRipper.Pe.IMAGE_DLLCHARACTERISTICS : Enum {
    public ushort value__;
    public static IMAGE_DLLCHARACTERISTICS IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA;
    public static IMAGE_DLLCHARACTERISTICS IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE;
    public static IMAGE_DLLCHARACTERISTICS IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY;
    public static IMAGE_DLLCHARACTERISTICS IMAGE_DLLCHARACTERISTICS_NX_COMPAT;
    public static IMAGE_DLLCHARACTERISTICS IMAGE_DLLCHARACTERISTICS_NO_ISOLATION;
    public static IMAGE_DLLCHARACTERISTICS IMAGE_DLLCHARACTERISTICS_NO_SEH;
    public static IMAGE_DLLCHARACTERISTICS IMAGE_DLLCHARACTERISTICS_NO_BIND;
    public static IMAGE_DLLCHARACTERISTICS IMAGE_DLLCHARACTERISTICS_APPCONTAINER;
    public static IMAGE_DLLCHARACTERISTICS IMAGE_DLLCHARACTERISTICS_WDM_DRIVER;
    public static IMAGE_DLLCHARACTERISTICS IMAGE_DLLCHARACTERISTICS_GUARD_CF;
    public static IMAGE_DLLCHARACTERISTICS IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE;
}
[FlagsAttribute]
public enum JetBrains.FormatRipper.Pe.IMAGE_FILE : Enum {
    public ushort value__;
    public static IMAGE_FILE IMAGE_FILE_RELOCS_STRIPPED;
    public static IMAGE_FILE IMAGE_FILE_EXECUTABLE_IMAGE;
    public static IMAGE_FILE IMAGE_FILE_LINE_NUMS_STRIPPED;
    public static IMAGE_FILE IMAGE_FILE_LOCAL_SYMS_STRIPPED;
    public static IMAGE_FILE IMAGE_FILE_AGGRESIVE_WS_TRIM;
    public static IMAGE_FILE IMAGE_FILE_LARGE_ADDRESS_AWARE;
    public static IMAGE_FILE IMAGE_FILE_BYTES_REVERSED_LO;
    public static IMAGE_FILE IMAGE_FILE_32BIT_MACHINE;
    public static IMAGE_FILE IMAGE_FILE_DEBUG_STRIPPED;
    public static IMAGE_FILE IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP;
    public static IMAGE_FILE IMAGE_FILE_NET_RUN_FROM_SWAP;
    public static IMAGE_FILE IMAGE_FILE_SYSTEM;
    public static IMAGE_FILE IMAGE_FILE_DLL;
    public static IMAGE_FILE IMAGE_FILE_UP_SYSTEM_ONLY;
    public static IMAGE_FILE IMAGE_FILE_BYTES_REVERSED_HI;
}
public enum JetBrains.FormatRipper.Pe.IMAGE_FILE_MACHINE : Enum {
    public ushort value__;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_UNKNOWN;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_TARGET_HOST;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_I386;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_R3000;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_R4000;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_R10000;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_WCEMIPSV2;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_ALPHA;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_SH3;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_SH3DSP;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_SH3E;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_SH4;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_SH5;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_ARM;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_THUMB;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_ARMNT;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_AM33;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_POWERPC;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_POWERPCFP;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_IA64;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_MIPS16;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_ALPHA64;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_MIPSFPU;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_MIPSFPU16;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_AXP64;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_TRICORE;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_CEF;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_EBC;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_AMD64;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_M32R;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_ARM64;
    public static IMAGE_FILE_MACHINE IMAGE_FILE_MACHINE_CEE;
}
public enum JetBrains.FormatRipper.Pe.IMAGE_SUBSYSTEM : Enum {
    public ushort value__;
    public static IMAGE_SUBSYSTEM IMAGE_SUBSYSTEM_UNKNOWN;
    public static IMAGE_SUBSYSTEM IMAGE_SUBSYSTEM_NATIVE;
    public static IMAGE_SUBSYSTEM IMAGE_SUBSYSTEM_WINDOWS_GUI;
    public static IMAGE_SUBSYSTEM IMAGE_SUBSYSTEM_WINDOWS_CUI;
    public static IMAGE_SUBSYSTEM IMAGE_SUBSYSTEM_OS2_CUI;
    public static IMAGE_SUBSYSTEM IMAGE_SUBSYSTEM_POSIX_CUI;
    public static IMAGE_SUBSYSTEM IMAGE_SUBSYSTEM_NATIVE_WINDOWS;
    public static IMAGE_SUBSYSTEM IMAGE_SUBSYSTEM_WINDOWS_CE_GUI;
    public static IMAGE_SUBSYSTEM IMAGE_SUBSYSTEM_EFI_APPLICATION;
    public static IMAGE_SUBSYSTEM IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER;
    public static IMAGE_SUBSYSTEM IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER;
    public static IMAGE_SUBSYSTEM IMAGE_SUBSYSTEM_EFI_ROM;
    public static IMAGE_SUBSYSTEM IMAGE_SUBSYSTEM_XBOX;
    public static IMAGE_SUBSYSTEM IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION;
    public static IMAGE_SUBSYSTEM IMAGE_SUBSYSTEM_XBOX_CODE_CATALOG;
}
internal class JetBrains.FormatRipper.Pe.Impl.IMAGE_DATA_DIRECTORY : ValueType {
    internal UInt32 VirtualAddress;
    internal UInt32 Size;
}
internal class JetBrains.FormatRipper.Pe.Impl.IMAGE_DOS_HEADER : ValueType {
    internal ushort e_magic;
    internal ushort e_cblp;
    internal ushort e_cp;
    internal ushort e_crlc;
    internal ushort e_cparhdr;
    internal ushort e_minalloc;
    internal ushort e_maxalloc;
    internal ushort e_ss;
    internal ushort e_sp;
    internal ushort e_csum;
    internal ushort e_ip;
    internal ushort e_cs;
    internal ushort e_lfarlc;
    internal ushort e_ovno;
    [FixedBufferAttribute("System.UInt16", "4")]
internal <e_res>e__FixedBuffer e_res;
    internal ushort e_oemid;
    internal ushort e_oeminfo;
    [FixedBufferAttribute("System.UInt16", "10")]
internal <e_res2>e__FixedBuffer e_res2;
    internal UInt32 e_lfanew;
}
internal class JetBrains.FormatRipper.Pe.Impl.IMAGE_FILE_HEADER : ValueType {
    internal ushort Machine;
    internal ushort NumberOfSections;
    internal UInt32 TimeDateStamp;
    internal UInt32 PointerToSymbolTable;
    internal UInt32 NumberOfSymbols;
    internal ushort SizeOfOptionalHeader;
    internal ushort Characteristics;
}
internal class JetBrains.FormatRipper.Pe.Impl.IMAGE_OPTIONAL_HEADER32 : ValueType {
    internal byte MajorLinkerVersion;
    internal byte MinorLinkerVersion;
    internal UInt32 SizeOfCode;
    internal UInt32 SizeOfInitializedData;
    internal UInt32 SizeOfUninitializedData;
    internal UInt32 AddressOfEntryPoint;
    internal UInt32 BaseOfCode;
    internal UInt32 BaseOfData;
    internal UInt32 ImageBase;
    internal UInt32 SectionAlignment;
    internal UInt32 FileAlignment;
    internal ushort MajorOperatingSystemVersion;
    internal ushort MinorOperatingSystemVersion;
    internal ushort MajorImageVersion;
    internal ushort MinorImageVersion;
    internal ushort MajorSubsystemVersion;
    internal ushort MinorSubsystemVersion;
    internal UInt32 Win32VersionValue;
    internal UInt32 SizeOfImage;
    internal UInt32 SizeOfHeaders;
    internal UInt32 CheckSum;
    internal ushort Subsystem;
    internal ushort DllCharacteristics;
    internal UInt32 SizeOfStackReserve;
    internal UInt32 SizeOfStackCommit;
    internal UInt32 SizeOfHeapReserve;
    internal UInt32 SizeOfHeapCommit;
    internal UInt32 LoaderFlags;
    internal UInt32 NumberOfRvaAndSizes;
}
internal class JetBrains.FormatRipper.Pe.Impl.IMAGE_OPTIONAL_HEADER64 : ValueType {
    internal byte MajorLinkerVersion;
    internal byte MinorLinkerVersion;
    internal UInt32 SizeOfCode;
    internal UInt32 SizeOfInitializedData;
    internal UInt32 SizeOfUninitializedData;
    internal UInt32 AddressOfEntryPoint;
    internal UInt32 BaseOfCode;
    internal ulong ImageBase;
    internal UInt32 SectionAlignment;
    internal UInt32 FileAlignment;
    internal ushort MajorOperatingSystemVersion;
    internal ushort MinorOperatingSystemVersion;
    internal ushort MajorImageVersion;
    internal ushort MinorImageVersion;
    internal ushort MajorSubsystemVersion;
    internal ushort MinorSubsystemVersion;
    internal UInt32 Win32VersionValue;
    internal UInt32 SizeOfImage;
    internal UInt32 SizeOfHeaders;
    internal UInt32 CheckSum;
    internal ushort Subsystem;
    internal ushort DllCharacteristics;
    internal ulong SizeOfStackReserve;
    internal ulong SizeOfStackCommit;
    internal ulong SizeOfHeapReserve;
    internal ulong SizeOfHeapCommit;
    internal UInt32 LoaderFlags;
    internal UInt32 NumberOfRvaAndSizes;
}
internal class JetBrains.FormatRipper.Pe.Impl.IMAGE_SECTION_HEADER : ValueType {
    [FixedBufferAttribute("System.Byte", "8")]
internal <Name>e__FixedBuffer Name;
    internal UInt32 VirtualSize;
    internal UInt32 VirtualAddress;
    internal UInt32 SizeOfRawData;
    internal UInt32 PointerToRawData;
    internal UInt32 PointerToRelocations;
    internal UInt32 PointerToLinenumbers;
    internal ushort NumberOfRelocations;
    internal ushort NumberOfLinenumbers;
    internal UInt32 Characteristics;
}
internal static class JetBrains.FormatRipper.Pe.Impl.ImageDirectory : object {
    internal static UInt32 IMAGE_NUMBEROF_DIRECTORY_ENTRIES;
    internal static UInt32 IMAGE_DIRECTORY_ENTRY_EXPORT;
    internal static UInt32 IMAGE_DIRECTORY_ENTRY_IMPORT;
    internal static UInt32 IMAGE_DIRECTORY_ENTRY_RESOURCE;
    internal static UInt32 IMAGE_DIRECTORY_ENTRY_EXCEPTION;
    internal static UInt32 IMAGE_DIRECTORY_ENTRY_SECURITY;
    internal static UInt32 IMAGE_DIRECTORY_ENTRY_BASERELOC;
    internal static UInt32 IMAGE_DIRECTORY_ENTRY_DEBUG;
    internal static UInt32 IMAGE_DIRECTORY_ENTRY_COPYRIGHT;
    internal static UInt32 IMAGE_DIRECTORY_ENTRY_ARCHITECTURE;
    internal static UInt32 IMAGE_DIRECTORY_ENTRY_GLOBALPTR;
    internal static UInt32 IMAGE_DIRECTORY_ENTRY_TLS;
    internal static UInt32 IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG;
    internal static UInt32 IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT;
    internal static UInt32 IMAGE_DIRECTORY_ENTRY_IAT;
    internal static UInt32 IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT;
    internal static UInt32 IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR;
}
internal static class JetBrains.FormatRipper.Pe.Impl.ImageSection : object {
    internal static int IMAGE_SIZEOF_SHORT_NAME;
}
public static class JetBrains.FormatRipper.Pe.Impl.Magic : object {
    internal static ushort IMAGE_DOS_SIGNATURE;
    internal static ushort IMAGE_OS2_SIGNATURE;
    internal static ushort IMAGE_OS2_SIGNATURE_LE;
    internal static ushort IMAGE_VXD_SIGNATURE;
    internal static UInt32 IMAGE_NT_SIGNATURE;
    internal static ushort IMAGE_NT_OPTIONAL_HDR32_MAGIC;
    internal static ushort IMAGE_NT_OPTIONAL_HDR64_MAGIC;
    internal static ushort IMAGE_ROM_OPTIONAL_HDR_MAGIC;
}
internal class JetBrains.FormatRipper.Pe.Impl.WIN_CERTIFICATE : ValueType {
    internal UInt32 dwLength;
    internal ushort wRevision;
    internal ushort wCertificateType;
}
internal static class JetBrains.FormatRipper.Pe.Impl.WinCertificate : object {
    internal static ushort WIN_CERT_REVISION_1_0;
    internal static ushort WIN_CERT_REVISION_2_0;
    internal static ushort WIN_CERT_TYPE_X509;
    internal static ushort WIN_CERT_TYPE_PKCS_SIGNED_DATA;
    internal static ushort WIN_CERT_TYPE_RESERVED_1;
    internal static ushort WIN_CERT_TYPE_TS_STACK_SIGNED;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.FormatRipper.Pe.PeFile : object {
    public IMAGE_FILE_MACHINE Machine;
    public IMAGE_FILE Characteristics;
    public IMAGE_SUBSYSTEM Subsystem;
    public IMAGE_DLLCHARACTERISTICS DllCharacteristics;
    public bool HasSignature;
    public SignatureData SignatureData;
    [NullableAttribute("2")]
public ComputeHashInfo ComputeHashInfo;
    public bool HasMetadata;
    public StreamRange SecurityDataDirectoryRange;
    [NullableAttribute("2")]
public PeSignatureTransferData SignatureTransferData;
    [NullableContextAttribute("2")]
private PeFile(IMAGE_FILE_MACHINE machine, IMAGE_FILE characteristics, IMAGE_SUBSYSTEM subsystem, IMAGE_DLLCHARACTERISTICS dllCharacteristics, bool hasSignature, SignatureData signatureData, bool hasMetadata, StreamRange securityDataDirectoryRange, ComputeHashInfo computeHashInfo, PeSignatureTransferData signatureTransferData);
    public static bool Is(Stream stream);
    public static PeFile Parse(Stream stream, Mode mode);
    private static UInt32 TranslateVirtualAddress(IMAGE_SECTION_HEADER[] ishs, IMAGE_DATA_DIRECTORY& idd);
}
public class JetBrains.FormatRipper.Pe.PeSignatureInjector : object {
    internal static int SignatureAlignment;
    [NullableContextAttribute("1")]
public static void InjectSignature(Stream sourceStream, Stream outputStream, PeSignatureTransferData signatureTransferData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.FormatRipper.Pe.PeSignatureTransferData : object {
    [CompilerGeneratedAttribute]
private UInt32 <CheckSum>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <TimeDateStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <SignatureBlobOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <SignatureBlobSize>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <CertificateRevision>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <CertificateType>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <SignatureBlob>k__BackingField;
    public UInt32 CheckSum { get; internal set; }
    public UInt32 TimeDateStamp { get; internal set; }
    public UInt32 SignatureBlobOffset { get; internal set; }
    public UInt32 SignatureBlobSize { get; internal set; }
    public ushort CertificateRevision { get; internal set; }
    public ushort CertificateType { get; internal set; }
    public Byte[] SignatureBlob { get; internal set; }
    [CompilerGeneratedAttribute]
public UInt32 get_CheckSum();
    [CompilerGeneratedAttribute]
internal void set_CheckSum(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_TimeDateStamp();
    [CompilerGeneratedAttribute]
internal void set_TimeDateStamp(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_SignatureBlobOffset();
    [CompilerGeneratedAttribute]
internal void set_SignatureBlobOffset(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_SignatureBlobSize();
    [CompilerGeneratedAttribute]
internal void set_SignatureBlobSize(UInt32 value);
    [CompilerGeneratedAttribute]
public ushort get_CertificateRevision();
    [CompilerGeneratedAttribute]
internal void set_CertificateRevision(ushort value);
    [CompilerGeneratedAttribute]
public ushort get_CertificateType();
    [CompilerGeneratedAttribute]
internal void set_CertificateType(ushort value);
    [CompilerGeneratedAttribute]
public Byte[] get_SignatureBlob();
    [CompilerGeneratedAttribute]
internal void set_SignatureBlob(Byte[] value);
}
public static class JetBrains.FormatRipper.Sh.ShFile : object {
    [NullableContextAttribute("1")]
public static bool Is(Stream stream);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class JetBrains.FormatRipper.SignatureData : ValueType {
    public Byte[] SignedBlob;
    public Byte[] CmsBlob;
    public SignatureData(Byte[] signedBlob, Byte[] cmsBlob);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.FormatRipper.SignatureInjectionException : Exception {
    internal SignatureInjectionException(string message);
    internal SignatureInjectionException(string message, Exception innerException);
}
[IsReadOnlyAttribute]
public class JetBrains.FormatRipper.StreamRange : ValueType {
    public long Position;
    public long Size;
    internal StreamRange(long position, long size);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
