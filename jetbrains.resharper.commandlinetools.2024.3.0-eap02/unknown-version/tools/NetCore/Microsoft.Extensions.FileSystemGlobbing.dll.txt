internal static class FxResources.Microsoft.Extensions.FileSystemGlobbing.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public abstract class Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoBase : FileSystemInfoBase {
    public abstract virtual IEnumerable`1<FileSystemInfoBase> EnumerateFileSystemInfos();
    public abstract virtual DirectoryInfoBase GetDirectory(string path);
    public abstract virtual FileInfoBase GetFile(string path);
}
public class Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoWrapper : DirectoryInfoBase {
    private DirectoryInfo _directoryInfo;
    private bool _isParentPath;
    public string Name { get; }
    public string FullName { get; }
    public DirectoryInfoBase ParentDirectory { get; }
    public DirectoryInfoWrapper(DirectoryInfo directoryInfo);
    private DirectoryInfoWrapper(DirectoryInfo directoryInfo, bool isParentPath);
    [IteratorStateMachineAttribute("Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoWrapper/<EnumerateFileSystemInfos>d__4")]
public virtual IEnumerable`1<FileSystemInfoBase> EnumerateFileSystemInfos();
    public virtual DirectoryInfoBase GetDirectory(string name);
    public virtual FileInfoBase GetFile(string name);
    public virtual string get_Name();
    public virtual string get_FullName();
    public virtual DirectoryInfoBase get_ParentDirectory();
}
public abstract class Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileInfoBase : FileSystemInfoBase {
}
public class Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileInfoWrapper : FileInfoBase {
    private FileInfo _fileInfo;
    public string Name { get; }
    public string FullName { get; }
    public DirectoryInfoBase ParentDirectory { get; }
    public FileInfoWrapper(FileInfo fileInfo);
    public virtual string get_Name();
    public virtual string get_FullName();
    public virtual DirectoryInfoBase get_ParentDirectory();
}
public abstract class Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileSystemInfoBase : object {
    public string Name { get; }
    public string FullName { get; }
    public DirectoryInfoBase ParentDirectory { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_FullName();
    public abstract virtual DirectoryInfoBase get_ParentDirectory();
}
public class Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch : ValueType {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Stem>k__BackingField;
    public string Path { get; }
    public string Stem { get; }
    public FilePatternMatch(string path, string stem);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Path();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Stem();
    public sealed virtual bool Equals(FilePatternMatch other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private static int GetHashCode(string value);
}
public class Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo : DirectoryInfoBase {
    private static Char[] DirectorySeparators;
    private IEnumerable`1<string> _files;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string FullName { get; }
    public string Name { get; }
    public DirectoryInfoBase ParentDirectory { get; }
    public InMemoryDirectoryInfo(string rootDir, IEnumerable`1<string> files);
    private InMemoryDirectoryInfo(string rootDir, IEnumerable`1<string> files, bool normalized);
    private static InMemoryDirectoryInfo();
    [CompilerGeneratedAttribute]
public virtual string get_FullName();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    public virtual DirectoryInfoBase get_ParentDirectory();
    [IteratorStateMachineAttribute("Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo/<EnumerateFileSystemInfos>d__12")]
public virtual IEnumerable`1<FileSystemInfoBase> EnumerateFileSystemInfos();
    private bool IsRootDirectory(string rootDir, string filePath);
    public virtual DirectoryInfoBase GetDirectory(string path);
    public virtual FileInfoBase GetFile(string path);
}
public interface Microsoft.Extensions.FileSystemGlobbing.Internal.ILinearPattern {
    public IList`1<IPathSegment> Segments { get; }
    public abstract virtual IList`1<IPathSegment> get_Segments();
}
internal class Microsoft.Extensions.FileSystemGlobbing.Internal.InMemoryFileInfo : FileInfoBase {
    private InMemoryDirectoryInfo _parent;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string FullName { get; }
    public string Name { get; }
    public DirectoryInfoBase ParentDirectory { get; }
    public InMemoryFileInfo(string file, InMemoryDirectoryInfo parent);
    [CompilerGeneratedAttribute]
public virtual string get_FullName();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    public virtual DirectoryInfoBase get_ParentDirectory();
}
public interface Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment {
    public bool CanProduceStem { get; }
    public abstract virtual bool get_CanProduceStem();
    public abstract virtual bool Match(string value);
}
public interface Microsoft.Extensions.FileSystemGlobbing.Internal.IPattern {
    public abstract virtual IPatternContext CreatePatternContextForInclude();
    public abstract virtual IPatternContext CreatePatternContextForExclude();
}
public interface Microsoft.Extensions.FileSystemGlobbing.Internal.IPatternContext {
    public abstract virtual void Declare(Action`2<IPathSegment, bool> onDeclare);
    public abstract virtual bool Test(DirectoryInfoBase directory);
    public abstract virtual PatternTestResult Test(FileInfoBase file);
    public abstract virtual void PushDirectory(DirectoryInfoBase directory);
    public abstract virtual void PopDirectory();
}
public interface Microsoft.Extensions.FileSystemGlobbing.Internal.IRaggedPattern {
    public IList`1<IPathSegment> Segments { get; }
    public IList`1<IPathSegment> StartsWith { get; }
    public IList`1<IList`1<IPathSegment>> Contains { get; }
    public IList`1<IPathSegment> EndsWith { get; }
    public abstract virtual IList`1<IPathSegment> get_Segments();
    public abstract virtual IList`1<IPathSegment> get_StartsWith();
    public abstract virtual IList`1<IList`1<IPathSegment>> get_Contains();
    public abstract virtual IList`1<IPathSegment> get_EndsWith();
}
public class Microsoft.Extensions.FileSystemGlobbing.Internal.MatcherContext : object {
    private DirectoryInfoBase _root;
    private List`1<IPatternContext> _includePatternContexts;
    private List`1<IPatternContext> _excludePatternContexts;
    private List`1<FilePatternMatch> _files;
    private HashSet`1<string> _declaredLiteralFolderSegmentInString;
    private HashSet`1<LiteralPathSegment> _declaredLiteralFolderSegments;
    private HashSet`1<LiteralPathSegment> _declaredLiteralFileSegments;
    private bool _declaredParentPathSegment;
    private bool _declaredWildcardPathSegment;
    private StringComparison _comparisonType;
    public MatcherContext(IEnumerable`1<IPattern> includePatterns, IEnumerable`1<IPattern> excludePatterns, DirectoryInfoBase directoryInfo, StringComparison comparison);
    public PatternMatchingResult Execute();
    private void Match(DirectoryInfoBase directory, string parentRelativePath);
    private void Declare();
    private void DeclareInclude(IPathSegment patternSegment, bool isLastSegment);
    internal static string CombinePath(string left, string right);
    private bool MatchPatternContexts(TFileInfoBase fileinfo, Func`3<IPatternContext, TFileInfoBase, bool> test);
    private PatternTestResult MatchPatternContexts(TFileInfoBase fileinfo, Func`3<IPatternContext, TFileInfoBase, PatternTestResult> test);
    private void PopDirectory();
    private void PushDirectory(DirectoryInfoBase directory);
}
public class Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.CurrentPathSegment : object {
    public bool CanProduceStem { get; }
    public sealed virtual bool get_CanProduceStem();
    public sealed virtual bool Match(string value);
}
public class Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment : object {
    private StringComparison _comparisonType;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public bool CanProduceStem { get; }
    public string Value { get; }
    public LiteralPathSegment(string value, StringComparison comparisonType);
    public sealed virtual bool get_CanProduceStem();
    [CompilerGeneratedAttribute]
public string get_Value();
    public sealed virtual bool Match(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.ParentPathSegment : object {
    private static string LiteralParent;
    public bool CanProduceStem { get; }
    public sealed virtual bool get_CanProduceStem();
    public sealed virtual bool Match(string value);
}
public class Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.RecursiveWildcardSegment : object {
    public bool CanProduceStem { get; }
    public sealed virtual bool get_CanProduceStem();
    public sealed virtual bool Match(string value);
}
public class Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment : object {
    public static WildcardPathSegment MatchAll;
    private StringComparison _comparisonType;
    [CompilerGeneratedAttribute]
private string <BeginsWith>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Contains>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndsWith>k__BackingField;
    public bool CanProduceStem { get; }
    public string BeginsWith { get; }
    public List`1<string> Contains { get; }
    public string EndsWith { get; }
    public WildcardPathSegment(string beginsWith, List`1<string> contains, string endsWith, StringComparison comparisonType);
    private static WildcardPathSegment();
    public sealed virtual bool get_CanProduceStem();
    [CompilerGeneratedAttribute]
public string get_BeginsWith();
    [CompilerGeneratedAttribute]
public List`1<string> get_Contains();
    [CompilerGeneratedAttribute]
public string get_EndsWith();
    public sealed virtual bool Match(string value);
}
public abstract class Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContext`1 : object {
    private Stack`1<TFrame> _stack;
    protected TFrame Frame;
    public virtual void Declare(Action`2<IPathSegment, bool> declare);
    public abstract virtual PatternTestResult Test(FileInfoBase file);
    public abstract virtual bool Test(DirectoryInfoBase directory);
    public abstract virtual void PushDirectory(DirectoryInfoBase directory);
    public virtual void PopDirectory();
    protected void PushDataFrame(TFrame frame);
    protected bool IsStackEmpty();
}
public abstract class Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContextLinear : PatternContext`1<FrameData> {
    [CompilerGeneratedAttribute]
private ILinearPattern <Pattern>k__BackingField;
    protected ILinearPattern Pattern { get; }
    public PatternContextLinear(ILinearPattern pattern);
    public virtual PatternTestResult Test(FileInfoBase file);
    public virtual void PushDirectory(DirectoryInfoBase directory);
    [CompilerGeneratedAttribute]
protected ILinearPattern get_Pattern();
    protected bool IsLastSegment();
    protected bool TestMatchingSegment(string value);
    protected string CalculateStem(FileInfoBase matchedFile);
}
public class Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContextLinearExclude : PatternContextLinear {
    public PatternContextLinearExclude(ILinearPattern pattern);
    public virtual bool Test(DirectoryInfoBase directory);
}
public class Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContextLinearInclude : PatternContextLinear {
    public PatternContextLinearInclude(ILinearPattern pattern);
    public virtual void Declare(Action`2<IPathSegment, bool> onDeclare);
    public virtual bool Test(DirectoryInfoBase directory);
}
public abstract class Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContextRagged : PatternContext`1<FrameData> {
    [CompilerGeneratedAttribute]
private IRaggedPattern <Pattern>k__BackingField;
    protected IRaggedPattern Pattern { get; }
    public PatternContextRagged(IRaggedPattern pattern);
    public virtual PatternTestResult Test(FileInfoBase file);
    public sealed virtual void PushDirectory(DirectoryInfoBase directory);
    public virtual void PopDirectory();
    [CompilerGeneratedAttribute]
protected IRaggedPattern get_Pattern();
    protected bool IsStartingGroup();
    protected bool IsEndingGroup();
    protected bool TestMatchingSegment(string value);
    protected bool TestMatchingGroup(FileSystemInfoBase value);
    protected string CalculateStem(FileInfoBase matchedFile);
}
public class Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContextRaggedExclude : PatternContextRagged {
    public PatternContextRaggedExclude(IRaggedPattern pattern);
    public virtual bool Test(DirectoryInfoBase directory);
}
public class Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContextRaggedInclude : PatternContextRagged {
    public PatternContextRaggedInclude(IRaggedPattern pattern);
    public virtual void Declare(Action`2<IPathSegment, bool> onDeclare);
    public virtual bool Test(DirectoryInfoBase directory);
}
public class Microsoft.Extensions.FileSystemGlobbing.Internal.Patterns.PatternBuilder : object {
    private static Char[] _slashes;
    private static Char[] _star;
    [CompilerGeneratedAttribute]
private StringComparison <ComparisonType>k__BackingField;
    public StringComparison ComparisonType { get; }
    public PatternBuilder(StringComparison comparisonType);
    private static PatternBuilder();
    [CompilerGeneratedAttribute]
public StringComparison get_ComparisonType();
    public IPattern Build(string pattern);
    private static int NextIndex(string pattern, Char[] anyOf, int beginIndex, int endIndex);
    private static string Portion(string pattern, int beginIndex, int endIndex);
}
public class Microsoft.Extensions.FileSystemGlobbing.Internal.PatternTestResult : ValueType {
    public static PatternTestResult Failed;
    [CompilerGeneratedAttribute]
private bool <IsSuccessful>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Stem>k__BackingField;
    public bool IsSuccessful { get; }
    public string Stem { get; }
    private PatternTestResult(bool isSuccessful, string stem);
    private static PatternTestResult();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsSuccessful();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Stem();
    public static PatternTestResult Success(string stem);
}
public class Microsoft.Extensions.FileSystemGlobbing.Matcher : object {
    private IList`1<IPattern> _includePatterns;
    private IList`1<IPattern> _excludePatterns;
    private PatternBuilder _builder;
    private StringComparison _comparison;
    public Matcher(StringComparison comparisonType);
    public virtual Matcher AddInclude(string pattern);
    public virtual Matcher AddExclude(string pattern);
    public virtual PatternMatchingResult Execute(DirectoryInfoBase directoryInfo);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions : object {
    [ExtensionAttribute]
public static void AddExcludePatterns(Matcher matcher, IEnumerable`1[] excludePatternsGroups);
    [ExtensionAttribute]
public static void AddIncludePatterns(Matcher matcher, IEnumerable`1[] includePatternsGroups);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetResultsInFullPath(Matcher matcher, string directoryPath);
    [ExtensionAttribute]
public static PatternMatchingResult Match(Matcher matcher, string file);
    [ExtensionAttribute]
public static PatternMatchingResult Match(Matcher matcher, string rootDir, string file);
    [ExtensionAttribute]
public static PatternMatchingResult Match(Matcher matcher, IEnumerable`1<string> files);
    [ExtensionAttribute]
public static PatternMatchingResult Match(Matcher matcher, string rootDir, IEnumerable`1<string> files);
}
public class Microsoft.Extensions.FileSystemGlobbing.PatternMatchingResult : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<FilePatternMatch> <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasMatches>k__BackingField;
    public IEnumerable`1<FilePatternMatch> Files { get; public set; }
    public bool HasMatches { get; }
    public PatternMatchingResult(IEnumerable`1<FilePatternMatch> files);
    public PatternMatchingResult(IEnumerable`1<FilePatternMatch> files, bool hasMatches);
    [CompilerGeneratedAttribute]
public IEnumerable`1<FilePatternMatch> get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(IEnumerable`1<FilePatternMatch> value);
    [CompilerGeneratedAttribute]
public bool get_HasMatches();
}
internal static class Microsoft.Extensions.FileSystemGlobbing.Util.StringComparisonHelper : object {
    public static StringComparer GetStringComparer(StringComparison comparisonType);
}
internal static class System.Numerics.Hashing.HashHelpers : object {
    public static int Combine(int h1, int h2);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string CannotDeclarePathSegment { get; }
    internal static string CannotTestDirectory { get; }
    internal static string CannotTestFile { get; }
    internal static string UnexpectedStringComparisonType { get; }
    private static SR();
    private static bool UsingResourceKeys();
    [NullableContextAttribute("1")]
internal static string GetResourceString(string resourceKey);
    [NullableContextAttribute("1")]
internal static string GetResourceString(string resourceKey, string defaultString);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, object p1);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, object p1, object p2);
    [NullableContextAttribute("2")]
internal static string Format(string resourceFormat, object p1, object p2, object p3);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, Object[] args);
    [NullableContextAttribute("1")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    [NullableContextAttribute("2")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    [NullableContextAttribute("2")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    [NullableContextAttribute("1")]
internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_CannotDeclarePathSegment();
    internal static string get_CannotTestDirectory();
    internal static string get_CannotTestFile();
    internal static string get_UnexpectedStringComparisonType();
}
