internal abstract class Sprache.AbstractOption`1 : object {
    public bool IsEmpty { get; }
    public bool IsDefined { get; }
    public abstract virtual bool get_IsEmpty();
    public sealed virtual bool get_IsDefined();
    public sealed virtual T GetOrDefault();
    public abstract virtual T Get();
}
public class Sprache.CommentParser : object {
    [CompilerGeneratedAttribute]
private string <Single>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewLine>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MultiOpen>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MultiClose>k__BackingField;
    public string Single { get; public set; }
    public string NewLine { get; public set; }
    public string MultiOpen { get; public set; }
    public string MultiClose { get; public set; }
    public Parser`1<string> SingleLineComment { get; private set; }
    public Parser`1<string> MultiLineComment { get; private set; }
    public Parser`1<string> AnyComment { get; private set; }
    public CommentParser(string multiOpen, string multiClose, string newLine);
    public CommentParser(string single, string multiOpen, string multiClose, string newLine);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Single();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Single(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_NewLine();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NewLine(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_MultiOpen();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MultiOpen(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_MultiClose();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MultiClose(string value);
    public sealed virtual Parser`1<string> get_SingleLineComment();
    private void set_SingleLineComment(Parser`1<string> value);
    public sealed virtual Parser`1<string> get_MultiLineComment();
    private void set_MultiLineComment(Parser`1<string> value);
    public sealed virtual Parser`1<string> get_AnyComment();
    private void set_AnyComment(Parser`1<string> value);
    [CompilerGeneratedAttribute]
private Parser`1<string> <get_SingleLineComment>b__20_0(IEnumerable`1<char> first);
    [CompilerGeneratedAttribute]
private Parser`1<string> <get_MultiLineComment>b__23_0(IEnumerable`1<char> first);
}
public interface Sprache.IComment {
    public string Single { get; public set; }
    public string NewLine { get; public set; }
    public string MultiOpen { get; public set; }
    public string MultiClose { get; public set; }
    public Parser`1<string> SingleLineComment { get; }
    public Parser`1<string> MultiLineComment { get; }
    public Parser`1<string> AnyComment { get; }
    public abstract virtual string get_Single();
    public abstract virtual void set_Single(string value);
    public abstract virtual string get_NewLine();
    public abstract virtual void set_NewLine(string value);
    public abstract virtual string get_MultiOpen();
    public abstract virtual void set_MultiOpen(string value);
    public abstract virtual string get_MultiClose();
    public abstract virtual void set_MultiClose(string value);
    public abstract virtual Parser`1<string> get_SingleLineComment();
    public abstract virtual Parser`1<string> get_MultiLineComment();
    public abstract virtual Parser`1<string> get_AnyComment();
}
public interface Sprache.ICommented`1 {
    public IEnumerable`1<string> LeadingComments { get; }
    public T Value { get; }
    public IEnumerable`1<string> TrailingComments { get; }
    public abstract virtual IEnumerable`1<string> get_LeadingComments();
    public abstract virtual T get_Value();
    public abstract virtual IEnumerable`1<string> get_TrailingComments();
}
public interface Sprache.IInput {
    public string Source { get; }
    public char Current { get; }
    public bool AtEnd { get; }
    public int Position { get; }
    public int Line { get; }
    public int Column { get; }
    public IDictionary`2<object, object> Memos { get; }
    public abstract virtual IInput Advance();
    public abstract virtual string get_Source();
    public abstract virtual char get_Current();
    public abstract virtual bool get_AtEnd();
    public abstract virtual int get_Position();
    public abstract virtual int get_Line();
    public abstract virtual int get_Column();
    public abstract virtual IDictionary`2<object, object> get_Memos();
}
public class Sprache.Input : object {
    private string _source;
    private int _position;
    private int _line;
    private int _column;
    [CompilerGeneratedAttribute]
private IDictionary`2<object, object> <Memos>k__BackingField;
    public IDictionary`2<object, object> Memos { get; private set; }
    public string Source { get; }
    public char Current { get; }
    public bool AtEnd { get; }
    public int Position { get; }
    public int Line { get; }
    public int Column { get; }
    public Input(string source);
    internal Input(string source, int position, int line, int column);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<object, object> get_Memos();
    [CompilerGeneratedAttribute]
private void set_Memos(IDictionary`2<object, object> value);
    public sealed virtual IInput Advance();
    public sealed virtual string get_Source();
    public sealed virtual char get_Current();
    public sealed virtual bool get_AtEnd();
    public sealed virtual int get_Position();
    public sealed virtual int get_Line();
    public sealed virtual int get_Column();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(IInput other);
    public static bool op_Equality(Input left, Input right);
    public static bool op_Inequality(Input left, Input right);
}
public interface Sprache.IOption`1 {
    public bool IsEmpty { get; }
    public bool IsDefined { get; }
    public abstract virtual bool get_IsEmpty();
    public abstract virtual bool get_IsDefined();
    public abstract virtual T GetOrDefault();
    public abstract virtual T Get();
}
public interface Sprache.IPositionAware`1 {
    public abstract virtual T SetPos(Position startPos, int length);
}
public interface Sprache.IResult`1 {
    public T Value { get; }
    public bool WasSuccessful { get; }
    public string Message { get; }
    public IEnumerable`1<string> Expectations { get; }
    public IInput Remainder { get; }
    public abstract virtual T get_Value();
    public abstract virtual bool get_WasSuccessful();
    public abstract virtual string get_Message();
    public abstract virtual IEnumerable`1<string> get_Expectations();
    public abstract virtual IInput get_Remainder();
}
public interface Sprache.ITextSpan`1 {
    public T Value { get; }
    public Position Start { get; }
    public Position End { get; }
    public int Length { get; }
    public abstract virtual T get_Value();
    public abstract virtual Position get_Start();
    public abstract virtual Position get_End();
    public abstract virtual int get_Length();
}
internal class Sprache.None`1 : AbstractOption`1<T> {
    public bool IsEmpty { get; }
    public virtual bool get_IsEmpty();
    public virtual T Get();
}
[ExtensionAttribute]
public static class Sprache.OptionExtensions : object {
    [ExtensionAttribute]
public static T GetOrElse(IOption`1<T> option, T defaultValue);
    [ExtensionAttribute]
public static IOption`1<U> Select(IOption`1<T> option, Func`2<T, U> map);
    [ExtensionAttribute]
public static IOption`1<V> SelectMany(IOption`1<T> option, Func`2<T, IOption`1<U>> bind, Func`3<T, U, V> project);
    [ExtensionAttribute]
public static IOption`1<U> SelectMany(IOption`1<T> option, Func`2<T, IOption`1<U>> bind);
}
[ExtensionAttribute]
public static class Sprache.Parse : object {
    private static String[] EmptyStringList;
    private static IComment DefaultCommentParser;
    public static Parser`1<char> AnyChar;
    public static Parser`1<char> WhiteSpace;
    public static Parser`1<char> Digit;
    public static Parser`1<char> Letter;
    public static Parser`1<char> LetterOrDigit;
    public static Parser`1<char> Lower;
    public static Parser`1<char> Upper;
    public static Parser`1<char> Numeric;
    public static Parser`1<string> Number;
    public static Parser`1<string> Decimal;
    public static Parser`1<string> DecimalInvariant;
    public static Parser`1<string> LineEnd;
    public static Parser`1<string> LineTerminator;
    private static Parse();
    [ExtensionAttribute]
public static Parser`1<ITextSpan`1<T>> Span(Parser`1<T> parser);
    [ExtensionAttribute]
public static Parser`1<ICommented`1<T>> Commented(Parser`1<T> parser, IComment commentParser);
    public static Parser`1<char> Char(Predicate`1<char> predicate, string description);
    public static Parser`1<char> CharExcept(Predicate`1<char> predicate, string description);
    public static Parser`1<char> Char(char c);
    public static Parser`1<char> Chars(Char[] c);
    public static Parser`1<char> Chars(string c);
    public static Parser`1<char> CharExcept(char c);
    public static Parser`1<char> CharExcept(IEnumerable`1<char> c);
    public static Parser`1<char> CharExcept(string c);
    public static Parser`1<char> IgnoreCase(char c);
    public static Parser`1<IEnumerable`1<char>> IgnoreCase(string s);
    public static Parser`1<IEnumerable`1<char>> String(string s);
    [ExtensionAttribute]
public static Parser`1<object> Not(Parser`1<T> parser);
    [ExtensionAttribute]
public static Parser`1<U> Then(Parser`1<T> first, Func`2<T, Parser`1<U>> second);
    [ExtensionAttribute]
public static Parser`1<IEnumerable`1<T>> Many(Parser`1<T> parser);
    [ExtensionAttribute]
public static Parser`1<IEnumerable`1<T>> XMany(Parser`1<T> parser);
    [ExtensionAttribute]
public static Parser`1<IEnumerable`1<T>> AtLeastOnce(Parser`1<T> parser);
    [ExtensionAttribute]
public static Parser`1<IEnumerable`1<T>> XAtLeastOnce(Parser`1<T> parser);
    [ExtensionAttribute]
public static Parser`1<T> End(Parser`1<T> parser);
    [ExtensionAttribute]
public static Parser`1<U> Select(Parser`1<T> parser, Func`2<T, U> convert);
    [ExtensionAttribute]
public static Parser`1<T> Token(Parser`1<T> parser);
    public static Parser`1<T> Ref(Func`1<Parser`1<T>> reference);
    [ExtensionAttribute]
public static Parser`1<string> Text(Parser`1<IEnumerable`1<char>> characters);
    [ExtensionAttribute]
public static Parser`1<T> Or(Parser`1<T> first, Parser`1<T> second);
    [ExtensionAttribute]
public static Parser`1<T> Named(Parser`1<T> parser, string name);
    [ExtensionAttribute]
public static Parser`1<T> XOr(Parser`1<T> first, Parser`1<T> second);
    private static IResult`1<T> DetermineBestError(IResult`1<T> firstFailure, IResult`1<T> secondFailure);
    [ExtensionAttribute]
public static Parser`1<IEnumerable`1<T>> Once(Parser`1<T> parser);
    [ExtensionAttribute]
public static Parser`1<IEnumerable`1<T>> Concat(Parser`1<IEnumerable`1<T>> first, Parser`1<IEnumerable`1<T>> second);
    public static Parser`1<T> Return(T value);
    [ExtensionAttribute]
public static Parser`1<U> Return(Parser`1<T> parser, U value);
    [ExtensionAttribute]
public static Parser`1<T> Except(Parser`1<T> parser, Parser`1<U> except);
    [ExtensionAttribute]
public static Parser`1<IEnumerable`1<T>> Until(Parser`1<T> parser, Parser`1<U> until);
    [ExtensionAttribute]
public static Parser`1<T> Where(Parser`1<T> parser, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static Parser`1<V> SelectMany(Parser`1<T> parser, Func`2<T, Parser`1<U>> selector, Func`3<T, U, V> projector);
    public static Parser`1<T> ChainOperator(Parser`1<TOp> op, Parser`1<T> operand, Func`4<TOp, T, T, T> apply);
    public static Parser`1<T> XChainOperator(Parser`1<TOp> op, Parser`1<T> operand, Func`4<TOp, T, T, T> apply);
    private static Parser`1<T> ChainOperatorRest(T firstOperand, Parser`1<TOp> op, Parser`1<T> operand, Func`4<TOp, T, T, T> apply, Func`3<Parser`1<T>, Parser`1<T>, Parser`1<T>> or);
    public static Parser`1<T> ChainRightOperator(Parser`1<TOp> op, Parser`1<T> operand, Func`4<TOp, T, T, T> apply);
    public static Parser`1<T> XChainRightOperator(Parser`1<TOp> op, Parser`1<T> operand, Func`4<TOp, T, T, T> apply);
    private static Parser`1<T> ChainRightOperatorRest(T lastOperand, Parser`1<TOp> op, Parser`1<T> operand, Func`4<TOp, T, T, T> apply, Func`3<Parser`1<T>, Parser`1<T>, Parser`1<T>> or);
    private static Parser`1<string> DecimalWithoutLeadingDigits(CultureInfo ci);
    private static Parser`1<string> DecimalWithLeadingDigits(CultureInfo ci);
    [ExtensionAttribute]
public static Parser`1<IOption`1<T>> Optional(Parser`1<T> parser);
    [ExtensionAttribute]
public static Parser`1<IOption`1<T>> XOptional(Parser`1<T> parser);
    [ExtensionAttribute]
public static Parser`1<IOption`1<T>> Preview(Parser`1<T> parser);
    [ExtensionAttribute]
public static Parser`1<T> Positioned(Parser`1<T> parser);
    public static Parser`1<string> Identifier(Parser`1<char> firstLetterParser, Parser`1<char> tailLetterParser);
    public static Parser`1<string> Regex(string pattern, string description);
    public static Parser`1<string> Regex(Regex regex, string description);
    public static Parser`1<Match> RegexMatch(string pattern, string description);
    public static Parser`1<Match> RegexMatch(Regex regex, string description);
    private static Regex OptimizeRegex(Regex regex);
    [ExtensionAttribute]
public static Parser`1<IEnumerable`1<T>> DelimitedBy(Parser`1<T> parser, Parser`1<U> delimiter);
    [ExtensionAttribute]
public static Parser`1<IEnumerable`1<T>> DelimitedBy(Parser`1<T> parser, Parser`1<U> delimiter, Nullable`1<int> minimumCount, Nullable`1<int> maximumCount);
    [ExtensionAttribute]
public static Parser`1<IEnumerable`1<T>> XDelimitedBy(Parser`1<T> itemParser, Parser`1<U> delimiter);
    [ExtensionAttribute]
public static Parser`1<IEnumerable`1<T>> Repeat(Parser`1<T> parser, int count);
    [ExtensionAttribute]
public static Parser`1<IEnumerable`1<T>> Repeat(Parser`1<T> parser, Nullable`1<int> minimumCount, Nullable`1<int> maximumCount);
    [ExtensionAttribute]
public static Parser`1<T> Contained(Parser`1<T> parser, Parser`1<U> open, Parser`1<V> close);
    [CompilerGeneratedAttribute]
internal static bool <Commented>g__IsSameLine|5_0(ITextSpan`1<T> first, ITextSpan`1<string> second);
}
public class Sprache.ParseException : Exception {
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    public Position Position { get; }
    public ParseException(string message);
    public ParseException(string message, Position position);
    public ParseException(string message, Exception innerException);
    [CompilerGeneratedAttribute]
public Position get_Position();
}
public class Sprache.Parser`1 : MulticastDelegate {
    public Parser`1(object object, IntPtr method);
    public virtual IResult`1<T> Invoke(IInput input);
    public virtual IAsyncResult BeginInvoke(IInput input, AsyncCallback callback, object object);
    public virtual IResult`1<T> EndInvoke(IAsyncResult result);
}
[ExtensionAttribute]
public static class Sprache.ParserExtensions : object {
    [ExtensionAttribute]
public static IResult`1<T> TryParse(Parser`1<T> parser, string input);
    [ExtensionAttribute]
public static T Parse(Parser`1<T> parser, string input);
}
public class Sprache.Position : object {
    [CompilerGeneratedAttribute]
private int <Pos>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    public int Pos { get; private set; }
    public int Line { get; private set; }
    public int Column { get; private set; }
    public Position(int pos, int line, int column);
    public static Position FromInput(IInput input);
    [CompilerGeneratedAttribute]
public int get_Pos();
    [CompilerGeneratedAttribute]
private void set_Pos(int value);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
private void set_Line(int value);
    [CompilerGeneratedAttribute]
public int get_Column();
    [CompilerGeneratedAttribute]
private void set_Column(int value);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Position other);
    public static bool op_Equality(Position left, Position right);
    public static bool op_Inequality(Position left, Position right);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public static class Sprache.Result : object {
    public static IResult`1<T> Success(T value, IInput remainder);
    public static IResult`1<T> Failure(IInput remainder, string message, IEnumerable`1<string> expectations);
}
internal class Sprache.Result`1 : object {
    private T _value;
    private IInput _remainder;
    private bool _wasSuccessful;
    private string _message;
    private IEnumerable`1<string> _expectations;
    public T Value { get; }
    public bool WasSuccessful { get; }
    public string Message { get; }
    public IEnumerable`1<string> Expectations { get; }
    public IInput Remainder { get; }
    public Result`1(T value, IInput remainder);
    public Result`1(IInput remainder, string message, IEnumerable`1<string> expectations);
    public sealed virtual T get_Value();
    public sealed virtual bool get_WasSuccessful();
    public sealed virtual string get_Message();
    public sealed virtual IEnumerable`1<string> get_Expectations();
    public sealed virtual IInput get_Remainder();
    public virtual string ToString();
    private string CalculateRecentlyConsumed();
}
[ExtensionAttribute]
internal static class Sprache.ResultHelper : object {
    [ExtensionAttribute]
public static IResult`1<U> IfSuccess(IResult`1<T> result, Func`2<IResult`1<T>, IResult`1<U>> next);
    [ExtensionAttribute]
public static IResult`1<T> IfFailure(IResult`1<T> result, Func`2<IResult`1<T>, IResult`1<T>> next);
}
internal class Sprache.Some`1 : AbstractOption`1<T> {
    private T _value;
    public bool IsEmpty { get; }
    public Some`1(T value);
    public virtual bool get_IsEmpty();
    public virtual T Get();
}
[ExtensionAttribute]
internal static class Sprache.StringExtensions : object {
    [IteratorStateMachineAttribute("Sprache.StringExtensions/<ToEnumerable>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<char> ToEnumerable(string this);
    public static string Join(string separator, IEnumerable`1<T> values);
}
