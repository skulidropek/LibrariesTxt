internal static class FxResources.System.Composition.TypedParts.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class System.Composition.CompositionContextExtensions : object {
    private static DirectAttributeContext s_directAttributeContext;
    private static CompositionContextExtensions();
    [ExtensionAttribute]
public static void SatisfyImports(CompositionContext compositionContext, object objectWithLooseImports);
    [ExtensionAttribute]
public static void SatisfyImports(CompositionContext compositionContext, object objectWithLooseImports, AttributedModelProvider conventions);
    [ExtensionAttribute]
private static void SatisfyImportsInternal(CompositionContext exportProvider, object objectWithLooseImports, AttributedModelProvider conventions);
}
[ExtensionAttribute]
internal static class System.Composition.Convention.AttributedModelProviderExtensions : object {
    [ExtensionAttribute]
public static TAttribute GetDeclaredAttribute(AttributedModelProvider convention, Type reflectedType, MemberInfo member);
    [ExtensionAttribute]
public static Attribute[] GetDeclaredAttributes(AttributedModelProvider convention, Type reflectedType, MemberInfo member);
    [ExtensionAttribute]
public static TAttribute[] GetDeclaredAttributes(AttributedModelProvider convention, Type reflectedType, MemberInfo member);
    [ExtensionAttribute]
public static TAttribute GetDeclaredAttribute(AttributedModelProvider convention, Type reflectedType, ParameterInfo parameter);
    [ExtensionAttribute]
public static Attribute[] GetDeclaredAttributes(AttributedModelProvider convention, Type reflectedType, ParameterInfo parameter);
    [ExtensionAttribute]
public static TAttribute[] GetDeclaredAttributes(AttributedModelProvider convention, Type reflectedType, ParameterInfo parameter);
}
internal class System.Composition.Debugging.ContainerConfigurationDebuggerProxy : object {
    private ContainerConfiguration _configuration;
    private DiscoveredPart[] _discoveredParts;
    private Type[] _ignoredTypes;
    [DebuggerDisplayAttribute("Added Providers")]
public ExportDescriptorProvider[] AddedExportDescriptorProviders { get; }
    [DebuggerDisplayAttribute("Discovered Parts")]
public DiscoveredPart[] DiscoveredParts { get; }
    [DebuggerDisplayAttribute("Ignored Types")]
public Type[] IgnoredTypes { get; }
    public ContainerConfigurationDebuggerProxy(ContainerConfiguration configuration);
    public ExportDescriptorProvider[] get_AddedExportDescriptorProviders();
    public DiscoveredPart[] get_DiscoveredParts();
    public Type[] get_IgnoredTypes();
    private void InitDiscovery();
}
internal class System.Composition.Debugging.DiscoveredPartDebuggerProxy : object {
    private DiscoveredPart _discoveredPart;
    public Type PartType { get; }
    public DiscoveredExport[] Exports { get; }
    public IDictionary`2<string, object> PartMetadata { get; }
    public DiscoveredPartDebuggerProxy(DiscoveredPart discoveredPart);
    public Type get_PartType();
    public DiscoveredExport[] get_Exports();
    public IDictionary`2<string, object> get_PartMetadata();
}
[DebuggerTypeProxyAttribute("System.Composition.Debugging.ContainerConfigurationDebuggerProxy")]
public class System.Composition.Hosting.ContainerConfiguration : object {
    private AttributedModelProvider _defaultAttributeContext;
    private IList`1<ExportDescriptorProvider> _addedSources;
    private IList`1<Tuple`2<IEnumerable`1<Type>, AttributedModelProvider>> _types;
    public CompositionHost CreateContainer();
    public ContainerConfiguration WithProvider(ExportDescriptorProvider exportDescriptorProvider);
    public ContainerConfiguration WithDefaultConventions(AttributedModelProvider conventions);
    public ContainerConfiguration WithPart(Type partType);
    public ContainerConfiguration WithPart(Type partType, AttributedModelProvider conventions);
    public ContainerConfiguration WithPart();
    public ContainerConfiguration WithPart(AttributedModelProvider conventions);
    public ContainerConfiguration WithParts(Type[] partTypes);
    public ContainerConfiguration WithParts(IEnumerable`1<Type> partTypes);
    public ContainerConfiguration WithParts(IEnumerable`1<Type> partTypes, AttributedModelProvider conventions);
    public ContainerConfiguration WithAssembly(Assembly assembly);
    public ContainerConfiguration WithAssembly(Assembly assembly, AttributedModelProvider conventions);
    public ContainerConfiguration WithAssemblies(IEnumerable`1<Assembly> assemblies);
    public ContainerConfiguration WithAssemblies(IEnumerable`1<Assembly> assemblies, AttributedModelProvider conventions);
    public ContainerConfiguration WithExport(TExport exportedInstance);
    public ContainerConfiguration WithExport(TExport exportedInstance, string contractName, IDictionary`2<string, object> metadata);
    public ContainerConfiguration WithExport(Type contractType, object exportedInstance);
    public ContainerConfiguration WithExport(Type contractType, object exportedInstance, string contractName, IDictionary`2<string, object> metadata);
    internal ExportDescriptorProvider[] DebugGetAddedExportDescriptorProviders();
    internal Tuple`2[] DebugGetRegisteredTypes();
    internal AttributedModelProvider DebugGetDefaultAttributeContext();
}
internal class System.Composition.Hosting.InstanceExportDescriptorProvider : SinglePartExportDescriptorProvider {
    private object _exportedInstance;
    public InstanceExportDescriptorProvider(object exportedInstance, Type contractType, string contractName, IDictionary`2<string, object> metadata);
    [IteratorStateMachineAttribute("System.Composition.Hosting.InstanceExportDescriptorProvider/<GetExportDescriptors>d__2")]
public virtual IEnumerable`1<ExportDescriptorPromise> GetExportDescriptors(CompositionContract contract, DependencyAccessor descriptorAccessor);
    [CompilerGeneratedAttribute]
private ExportDescriptor <GetExportDescriptors>b__2_0(IEnumerable`1<CompositionDependency> _);
    [CompilerGeneratedAttribute]
private object <GetExportDescriptors>b__2_1(LifetimeContext c, CompositionOperation o);
}
internal abstract class System.Composition.Hosting.SinglePartExportDescriptorProvider : ExportDescriptorProvider {
    private Type _contractType;
    private string _contractName;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Metadata>k__BackingField;
    protected IDictionary`2<string, object> Metadata { get; }
    protected SinglePartExportDescriptorProvider(Type contractType, string contractName, IDictionary`2<string, object> metadata);
    protected bool IsSupportedContract(CompositionContract contract);
    [CompilerGeneratedAttribute]
protected IDictionary`2<string, object> get_Metadata();
    [CompilerGeneratedAttribute]
private bool <IsSupportedContract>b__3_0(KeyValuePair`2<string, object> c);
    [CompilerGeneratedAttribute]
private object <IsSupportedContract>b__3_2(KeyValuePair`2<string, object> c);
}
internal abstract class System.Composition.TypedParts.ActivationFeatures.ActivationFeature : object {
    protected static CompositionDependency[] NoDependencies;
    private static ActivationFeature();
    public abstract virtual CompositeActivator RewriteActivator(TypeInfo partType, CompositeActivator activator, IDictionary`2<string, object> partMetadata, IEnumerable`1<CompositionDependency> dependencies);
    public virtual IEnumerable`1<CompositionDependency> GetDependencies(TypeInfo partType, DependencyAccessor definitionAccessor);
}
internal class System.Composition.TypedParts.ActivationFeatures.DisposalFeature : ActivationFeature {
    public virtual CompositeActivator RewriteActivator(TypeInfo partType, CompositeActivator activator, IDictionary`2<string, object> partMetadata, IEnumerable`1<CompositionDependency> dependencies);
}
internal class System.Composition.TypedParts.ActivationFeatures.LifetimeFeature : ActivationFeature {
    public static string SharingBoundaryPartMetadataName;
    public virtual CompositeActivator RewriteActivator(TypeInfo partType, CompositeActivator activatorBody, IDictionary`2<string, object> partMetadata, IEnumerable`1<CompositionDependency> dependencies);
}
internal class System.Composition.TypedParts.ActivationFeatures.OnImportsSatisfiedFeature : ActivationFeature {
    private AttributedModelProvider _attributeContext;
    public OnImportsSatisfiedFeature(AttributedModelProvider attributeContext);
    public virtual CompositeActivator RewriteActivator(TypeInfo partType, CompositeActivator activator, IDictionary`2<string, object> partMetadata, IEnumerable`1<CompositionDependency> dependencies);
    [CompilerGeneratedAttribute]
private bool <RewriteActivator>b__2_0(MethodInfo mi);
}
internal class System.Composition.TypedParts.ActivationFeatures.PropertyImportSite : object {
    private PropertyInfo _pi;
    public PropertyInfo Property { get; }
    public PropertyImportSite(PropertyInfo pi);
    public PropertyInfo get_Property();
    public virtual string ToString();
}
internal class System.Composition.TypedParts.ActivationFeatures.PropertyInjectionFeature : ActivationFeature {
    private AttributedModelProvider _attributeContext;
    private static MethodInfo s_activatorInvokeMethod;
    public PropertyInjectionFeature(AttributedModelProvider attributeContext);
    private static PropertyInjectionFeature();
    public virtual IEnumerable`1<CompositionDependency> GetDependencies(TypeInfo partType, DependencyAccessor definitionAccessor);
    public virtual CompositeActivator RewriteActivator(TypeInfo partType, CompositeActivator activator, IDictionary`2<string, object> partMetadata, IEnumerable`1<CompositionDependency> dependencies);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType0`2<PropertyInfo, Attribute[]> <GetDependencies>b__3_1(PropertyInfo pi);
}
internal static class System.Composition.TypedParts.ContractHelpers : object {
    private static string ImportManyImportMetadataConstraintName;
    public static bool TryGetExplicitImportInfo(Type memberType, Object[] attributes, object site, ImportInfo& importInfo);
    public static ImportInfo GetImportInfo(Type memberType, Object[] attributes, object site);
    public static bool IsShared(IDictionary`2<string, object> partMetadata);
}
[DebuggerDisplayAttribute("{Contract}")]
internal abstract class System.Composition.TypedParts.Discovery.DiscoveredExport : object {
    private CompositionContract _exportKey;
    private IDictionary`2<string, object> _metadata;
    private DiscoveredPart _part;
    public CompositionContract Contract { get; }
    public IDictionary`2<string, object> Metadata { get; }
    public DiscoveredPart Part { get; public set; }
    public DiscoveredExport(CompositionContract exportKey, IDictionary`2<string, object> metadata);
    public CompositionContract get_Contract();
    public IDictionary`2<string, object> get_Metadata();
    public DiscoveredPart get_Part();
    public void set_Part(DiscoveredPart value);
    public ExportDescriptorPromise GetExportDescriptorPromise(CompositionContract contract, DependencyAccessor definitionAccessor);
    protected abstract virtual ExportDescriptor GetExportDescriptor(CompositeActivator partActivator);
    public abstract virtual DiscoveredExport CloseGenericExport(TypeInfo closedPartType, Type[] genericArguments);
}
internal class System.Composition.TypedParts.Discovery.DiscoveredInstanceExport : DiscoveredExport {
    public DiscoveredInstanceExport(CompositionContract contract, IDictionary`2<string, object> metadata);
    protected virtual ExportDescriptor GetExportDescriptor(CompositeActivator partActivator);
    public virtual DiscoveredExport CloseGenericExport(TypeInfo closedPartType, Type[] genericArguments);
}
[DebuggerDisplayAttribute("{PartType.Name}")]
[DebuggerTypeProxyAttribute("System.Composition.Debugging.DiscoveredPartDebuggerProxy")]
internal class System.Composition.TypedParts.Discovery.DiscoveredPart : object {
    private TypeInfo _partType;
    private AttributedModelProvider _attributeContext;
    private ICollection`1<DiscoveredExport> _exports;
    private ActivationFeature[] _activationFeatures;
    private Lazy`1<IDictionary`2<string, object>> _partMetadata;
    private IList`1<Type[]> _appliedArguments;
    private ConstructorInfo _constructor;
    private CompositeActivator _partActivator;
    private static IDictionary`2<string, object> s_noMetadata;
    private static MethodInfo s_activatorInvoke;
    public TypeInfo PartType { get; }
    public bool IsShared { get; }
    public IEnumerable`1<DiscoveredExport> DiscoveredExports { get; }
    private DiscoveredPart(TypeInfo partType, AttributedModelProvider attributeContext, ActivationFeature[] activationFeatures, Lazy`1<IDictionary`2<string, object>> partMetadata);
    public DiscoveredPart(TypeInfo partType, AttributedModelProvider attributeContext, ActivationFeature[] activationFeatures);
    private static DiscoveredPart();
    public TypeInfo get_PartType();
    public bool get_IsShared();
    public void AddDiscoveredExport(DiscoveredExport export);
    public CompositionDependency[] GetDependencies(DependencyAccessor definitionAccessor);
    [IteratorStateMachineAttribute("System.Composition.TypedParts.Discovery.DiscoveredPart/<GetPartActivatorDependencies>d__18")]
private IEnumerable`1<CompositionDependency> GetPartActivatorDependencies(DependencyAccessor definitionAccessor);
    private ConstructorInfo GetConstructorInfoFromGenericType(TypeInfo type);
    public CompositeActivator GetActivator(DependencyAccessor definitionAccessor, IEnumerable`1<CompositionDependency> dependencies);
    public IDictionary`2<string, object> GetPartMetadata(TypeInfo partType);
    public bool TryCloseGenericPart(Type[] typeArguments, DiscoveredPart& closed);
    public IEnumerable`1<DiscoveredExport> get_DiscoveredExports();
}
internal class System.Composition.TypedParts.Discovery.DiscoveredPropertyExport : DiscoveredExport {
    private static MethodInfo s_activatorInvoke;
    private PropertyInfo _property;
    public DiscoveredPropertyExport(CompositionContract contract, IDictionary`2<string, object> metadata, PropertyInfo property);
    private static DiscoveredPropertyExport();
    protected virtual ExportDescriptor GetExportDescriptor(CompositeActivator partActivator);
    public virtual DiscoveredExport CloseGenericExport(TypeInfo closedPartType, Type[] genericArguments);
}
internal class System.Composition.TypedParts.Discovery.ParameterImportSite : object {
    private ParameterInfo _pi;
    public ParameterInfo Parameter { get; }
    public ParameterImportSite(ParameterInfo pi);
    public ParameterInfo get_Parameter();
    public virtual string ToString();
}
internal class System.Composition.TypedParts.Discovery.TypeInspector : object {
    private static IDictionary`2<string, object> s_noMetadata;
    private ActivationFeature[] _activationFeatures;
    private AttributedModelProvider _attributeContext;
    public TypeInspector(AttributedModelProvider attributeContext, ActivationFeature[] activationFeatures);
    private static TypeInspector();
    public bool InspectTypeForPart(TypeInfo type, DiscoveredPart& part);
    [IteratorStateMachineAttribute("System.Composition.TypedParts.Discovery.TypeInspector/<DiscoverExports>d__5")]
private IEnumerable`1<DiscoveredExport> DiscoverExports(TypeInfo partType);
    [IteratorStateMachineAttribute("System.Composition.TypedParts.Discovery.TypeInspector/<DiscoverInstanceExports>d__6")]
private IEnumerable`1<DiscoveredExport> DiscoverInstanceExports(TypeInfo partType);
    [IteratorStateMachineAttribute("System.Composition.TypedParts.Discovery.TypeInspector/<DiscoverPropertyExports>d__7")]
private IEnumerable`1<DiscoveredExport> DiscoverPropertyExports(TypeInfo partType);
    private static void ReadLooseMetadata(Object[] appliedAttributes, IDictionary`2<string, object> metadata);
    private static void AddMetadata(IDictionary`2<string, object> metadata, string name, Type valueType, object value);
    private static void ReadMetadataAttribute(Attribute attribute, IDictionary`2<string, object> metadata);
    private static void CheckPropertyExportCompatibility(TypeInfo partType, PropertyInfo property, TypeInfo contractType);
    private static void CheckGenericContractCompatibility(TypeInfo partType, TypeInfo exportingMemberType, TypeInfo contractType);
    [IteratorStateMachineAttribute("System.Composition.TypedParts.Discovery.TypeInspector/<GetAssignableTypes>d__13")]
private static IEnumerable`1<TypeInfo> GetAssignableTypes(TypeInfo exportingMemberType);
    private static void CheckInstanceExportCompatibility(TypeInfo partType, TypeInfo contractType);
}
internal class System.Composition.TypedParts.ImportInfo : object {
    private CompositionContract _exportKey;
    private bool _allowDefault;
    public bool AllowDefault { get; }
    public CompositionContract Contract { get; }
    public ImportInfo(CompositionContract exportKey, bool allowDefault);
    public bool get_AllowDefault();
    public CompositionContract get_Contract();
}
internal class System.Composition.TypedParts.TypedPartExportDescriptorProvider : ExportDescriptorProvider {
    private IDictionary`2<CompositionContract, ICollection`1<DiscoveredExport>> _discoveredParts;
    public TypedPartExportDescriptorProvider(IEnumerable`1<Type> types, AttributedModelProvider attributeContext);
    private void AddDiscoveredPart(DiscoveredPart part);
    private void AddDiscoveredExport(DiscoveredExport export, CompositionContract contract);
    public virtual IEnumerable`1<ExportDescriptorPromise> GetExportDescriptors(CompositionContract contract, DependencyAccessor definitionAccessor);
    private void DiscoverConstrainedParts(CompositionContract contract);
    private void DiscoverGenericParts(CompositionContract contract);
    private static ActivationFeature[] CreateActivationFeatures(AttributedModelProvider attributeContext);
    internal static ActivationFeature[] DebugGetActivationFeatures(AttributedModelProvider attributeContext);
}
internal class System.Composition.TypedParts.Util.DirectAttributeContext : AttributedModelProvider {
    public virtual IEnumerable`1<Attribute> GetCustomAttributes(Type reflectedType, MemberInfo member);
    public virtual IEnumerable`1<Attribute> GetCustomAttributes(Type reflectedType, ParameterInfo parameter);
}
internal static class System.Numerics.Hashing.HashHelpers : object {
    public static int Combine(int h1, int h2);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("64")]
internal class System.Runtime.InteropServices.LibraryImportAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <LibraryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMarshalling <StringMarshalling>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StringMarshallingCustomType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetLastError>k__BackingField;
    public string LibraryName { get; }
    public string EntryPoint { get; public set; }
    public StringMarshalling StringMarshalling { get; public set; }
    public Type StringMarshallingCustomType { get; public set; }
    public bool SetLastError { get; public set; }
    public LibraryImportAttribute(string libraryName);
    [CompilerGeneratedAttribute]
public string get_LibraryName();
    [CompilerGeneratedAttribute]
public string get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(string value);
    [CompilerGeneratedAttribute]
public StringMarshalling get_StringMarshalling();
    [CompilerGeneratedAttribute]
public void set_StringMarshalling(StringMarshalling value);
    [CompilerGeneratedAttribute]
public Type get_StringMarshallingCustomType();
    [CompilerGeneratedAttribute]
public void set_StringMarshallingCustomType(Type value);
    [CompilerGeneratedAttribute]
public bool get_SetLastError();
    [CompilerGeneratedAttribute]
public void set_SetLastError(bool value);
}
internal enum System.Runtime.InteropServices.StringMarshalling : Enum {
    public int value__;
    public static StringMarshalling Custom;
    public static StringMarshalling Utf8;
    public static StringMarshalling Utf16;
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string CompositionContextExtensions_MissingDependency { get; }
    internal static string ContainerConfiguration_DefaultConventionSet { get; }
    internal static string ContractHelpers_TooManyImports { get; }
    internal static string DiscoveredPart_MultipleImportingConstructorsFound { get; }
    internal static string DiscoveredPart_NoImportingConstructorsFound { get; }
    internal static string OnImportsSatisfiedFeature_AttributeError { get; }
    internal static string TypeInspector_ArgumentMismatch { get; }
    internal static string TypeInspector_ContractNotAssignable { get; }
    internal static string TypeInspector_ExportedContractTypeNotAssignable { get; }
    internal static string TypeInspector_ExportNotCompatible { get; }
    internal static string TypeInspector_NoExportNonGenericContract { get; }
    private static SR();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_CompositionContextExtensions_MissingDependency();
    internal static string get_ContainerConfiguration_DefaultConventionSet();
    internal static string get_ContractHelpers_TooManyImports();
    internal static string get_DiscoveredPart_MultipleImportingConstructorsFound();
    internal static string get_DiscoveredPart_NoImportingConstructorsFound();
    internal static string get_OnImportsSatisfiedFeature_AttributeError();
    internal static string get_TypeInspector_ArgumentMismatch();
    internal static string get_TypeInspector_ContractNotAssignable();
    internal static string get_TypeInspector_ExportedContractTypeNotAssignable();
    internal static string get_TypeInspector_ExportNotCompatible();
    internal static string get_TypeInspector_NoExportNonGenericContract();
}
