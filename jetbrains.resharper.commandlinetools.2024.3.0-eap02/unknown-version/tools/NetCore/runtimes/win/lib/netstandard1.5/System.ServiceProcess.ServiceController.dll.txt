internal static class FxResources.System.ServiceProcess.ServiceController.SR : object {
}
internal static class Interop : object {
}
internal class Microsoft.Win32.SafeHandles.SafeServiceHandle : SafeHandle {
    public bool IsInvalid { get; }
    internal SafeServiceHandle(IntPtr handle);
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
public class System.ServiceProcess.ServiceController : object {
    private string _machineName;
    private ManualResetEvent _waitForStatusSignal;
    private static string DefaultMachineName;
    private string _name;
    private string _eitherName;
    private string _displayName;
    private int _commandsAccepted;
    private bool _statusGenerated;
    private bool _startTypeInitialized;
    private int _type;
    private bool _disposed;
    private SafeServiceHandle _serviceManagerHandle;
    private ServiceControllerStatus _status;
    private ServiceController[] _dependentServices;
    private ServiceController[] _servicesDependedOn;
    private ServiceStartMode _startType;
    private static int SERVICENAMEMAXLENGTH;
    private static int DISPLAYNAMEBUFFERSIZE;
    public bool CanPauseAndContinue { get; }
    public bool CanShutdown { get; }
    public bool CanStop { get; }
    public string DisplayName { get; }
    public ServiceController[] DependentServices { get; }
    public string MachineName { get; }
    public string ServiceName { get; }
    public ServiceController[] ServicesDependedOn { get; }
    public ServiceStartMode StartType { get; }
    public SafeHandle ServiceHandle { get; }
    public ServiceControllerStatus Status { get; }
    public ServiceType ServiceType { get; }
    public ServiceController(string name);
    public ServiceController(string name, string machineName);
    private ServiceController(string machineName, ENUM_SERVICE_STATUS status);
    private ServiceController(string machineName, ENUM_SERVICE_STATUS_PROCESS status);
    public bool get_CanPauseAndContinue();
    public bool get_CanShutdown();
    public bool get_CanStop();
    public string get_DisplayName();
    public ServiceController[] get_DependentServices();
    public string get_MachineName();
    public string get_ServiceName();
    public ServiceController[] get_ServicesDependedOn();
    public ServiceStartMode get_StartType();
    public SafeHandle get_ServiceHandle();
    public ServiceControllerStatus get_Status();
    public ServiceType get_ServiceType();
    private static bool CheckMachineName(string value);
    private void Close();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void GenerateStatus();
    private void GenerateNames();
    private static IntPtr GetDataBaseHandleWithAccess(string machineName, int serviceControlManagerAccess);
    private void GetDataBaseHandleWithConnectAccess();
    private static IntPtr GetDataBaseHandleWithEnumerateAccess(string machineName);
    public static ServiceController[] GetDevices();
    public static ServiceController[] GetDevices(string machineName);
    private IntPtr GetServiceHandle(int desiredAccess);
    public static ServiceController[] GetServices();
    public static ServiceController[] GetServices(string machineName);
    private static ENUM_SERVICE_STATUS_PROCESS[] GetServicesInGroup(string machineName, string group);
    private static ServiceController[] GetServicesOfType(string machineName, int serviceType);
    private static T[] GetServices(string machineName, int serviceType, string group, Func`2<ENUM_SERVICE_STATUS_PROCESS, T> selector);
    public void Pause();
    public void Continue();
    public void Refresh();
    public void Start();
    public void Start(String[] args);
    public void Stop();
    public void WaitForStatus(ServiceControllerStatus desiredStatus);
    public void WaitForStatus(ServiceControllerStatus desiredStatus, TimeSpan timeout);
}
public enum System.ServiceProcess.ServiceControllerStatus : Enum {
    public int value__;
    public static ServiceControllerStatus ContinuePending;
    public static ServiceControllerStatus Paused;
    public static ServiceControllerStatus PausePending;
    public static ServiceControllerStatus Running;
    public static ServiceControllerStatus StartPending;
    public static ServiceControllerStatus Stopped;
    public static ServiceControllerStatus StopPending;
}
public enum System.ServiceProcess.ServiceStartMode : Enum {
    public int value__;
    public static ServiceStartMode Manual;
    public static ServiceStartMode Automatic;
    public static ServiceStartMode Disabled;
    public static ServiceStartMode Boot;
    public static ServiceStartMode System;
}
[FlagsAttribute]
public enum System.ServiceProcess.ServiceType : Enum {
    public int value__;
    public static ServiceType Adapter;
    public static ServiceType FileSystemDriver;
    public static ServiceType InteractiveProcess;
    public static ServiceType KernelDriver;
    public static ServiceType RecognizerDriver;
    public static ServiceType Win32OwnProcess;
    public static ServiceType Win32ShareProcess;
}
public class System.ServiceProcess.TimeoutException : Exception {
    private static int ServiceControllerTimeout;
    public TimeoutException(string message);
    public TimeoutException(string message, Exception innerException);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string ArgsCantBeNull { get; }
    internal static string BadMachineName { get; }
    internal static string CannotStart { get; }
    internal static string DisplayName { get; }
    internal static string InvalidEnumArgument { get; }
    internal static string InvalidParameter { get; }
    internal static string NoDisplayName { get; }
    internal static string NoMachineName { get; }
    internal static string NoService { get; }
    internal static string OpenSC { get; }
    internal static string OpenService { get; }
    internal static string PauseService { get; }
    internal static string ResumeService { get; }
    internal static string ServiceName { get; }
    internal static string StopService { get; }
    internal static string Timeout { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_ArgsCantBeNull();
    internal static string get_BadMachineName();
    internal static string get_CannotStart();
    internal static string get_DisplayName();
    internal static string get_InvalidEnumArgument();
    internal static string get_InvalidParameter();
    internal static string get_NoDisplayName();
    internal static string get_NoMachineName();
    internal static string get_NoService();
    internal static string get_OpenSC();
    internal static string get_OpenService();
    internal static string get_PauseService();
    internal static string get_ResumeService();
    internal static string get_ServiceName();
    internal static string get_StopService();
    internal static string get_Timeout();
    internal static Type get_ResourceType();
}
