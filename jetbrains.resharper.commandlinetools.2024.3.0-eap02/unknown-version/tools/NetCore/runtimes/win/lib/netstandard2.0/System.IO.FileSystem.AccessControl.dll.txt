internal static class FxResources.System.IO.FileSystem.AccessControl.SR : object {
}
internal static class Interop : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.Win32.SafeHandles.SafeFindHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
internal class System.IO.DisableMediaInsertionPrompt : ValueType {
    private bool _disableSuccess;
    private UInt32 _oldMode;
    public static DisableMediaInsertionPrompt Create();
    public sealed virtual void Dispose();
}
internal static class System.IO.FileSystem : object {
    public static bool DirectoryExists(string fullPath);
    private static bool DirectoryExists(string path, Int32& lastError);
    public static bool FileExists(string fullPath);
    internal static int FillAttributeInfo(string path, WIN32_FILE_ATTRIBUTE_DATA& data, bool returnErrorOnNotFound);
    public static void CreateDirectory(string fullPath, Byte[] securityDescriptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.IO.FileSystemAclExtensions : object {
    [ExtensionAttribute]
public static DirectorySecurity GetAccessControl(DirectoryInfo directoryInfo);
    [ExtensionAttribute]
public static DirectorySecurity GetAccessControl(DirectoryInfo directoryInfo, AccessControlSections includeSections);
    [ExtensionAttribute]
public static void SetAccessControl(DirectoryInfo directoryInfo, DirectorySecurity directorySecurity);
    [ExtensionAttribute]
public static FileSecurity GetAccessControl(FileInfo fileInfo);
    [ExtensionAttribute]
public static FileSecurity GetAccessControl(FileInfo fileInfo, AccessControlSections includeSections);
    [ExtensionAttribute]
public static void SetAccessControl(FileInfo fileInfo, FileSecurity fileSecurity);
    [ExtensionAttribute]
public static FileSecurity GetAccessControl(FileStream fileStream);
    [ExtensionAttribute]
public static void SetAccessControl(FileStream fileStream, FileSecurity fileSecurity);
    [ExtensionAttribute]
public static void Create(DirectoryInfo directoryInfo, DirectorySecurity directorySecurity);
    [ExtensionAttribute]
public static FileStream Create(FileInfo fileInfo, FileMode mode, FileSystemRights rights, FileShare share, int bufferSize, FileOptions options, FileSecurity fileSecurity);
    [ExtensionAttribute]
public static DirectoryInfo CreateDirectory(DirectorySecurity directorySecurity, string path);
    private static FileAccess GetFileStreamFileAccess(FileSystemRights rights);
    private static SafeFileHandle CreateFileHandle(string fullPath, FileMode mode, FileSystemRights rights, FileShare share, FileOptions options, FileSecurity security);
    private static void ValidateFileHandle(SafeFileHandle handle, string fullPath);
}
internal static class System.IO.PathHelper : object {
    internal static string Normalize(string path);
    internal static string Normalize(ValueStringBuilder& path);
    private static void GetFullPathName(ReadOnlySpan`1<char> path, ValueStringBuilder& builder);
    internal static int PrependDevicePathChars(ValueStringBuilder& content, bool isDosUnc, ValueStringBuilder& buffer);
    internal static string TryExpandShortFileName(ValueStringBuilder& outputBuilder, string originalPath);
}
internal static class System.IO.PathInternal : object {
    internal static char DirectorySeparatorChar;
    internal static char AltDirectorySeparatorChar;
    internal static char VolumeSeparatorChar;
    internal static char PathSeparator;
    internal static string DirectorySeparatorCharAsString;
    internal static string ExtendedPathPrefix;
    internal static string UncPathPrefix;
    internal static string UncExtendedPrefixToInsert;
    internal static string UncExtendedPathPrefix;
    internal static string DevicePathPrefix;
    internal static string ParentDirectoryPrefix;
    internal static int MaxShortPath;
    internal static int MaxShortDirectoryPath;
    internal static int DevicePrefixLength;
    internal static int UncPrefixLength;
    internal static int UncExtendedPrefixLength;
    internal static bool StartsWithDirectorySeparator(ReadOnlySpan`1<char> path);
    internal static string EnsureTrailingSeparator(string path);
    internal static bool IsRoot(ReadOnlySpan`1<char> path);
    internal static int GetCommonPathLength(string first, string second, bool ignoreCase);
    internal static int EqualStartingCharacterCount(string first, string second, bool ignoreCase);
    internal static bool AreRootsEqual(string first, string second, StringComparison comparisonType);
    internal static string RemoveRelativeSegments(string path, int rootLength);
    internal static bool RemoveRelativeSegments(ReadOnlySpan`1<char> path, int rootLength, ValueStringBuilder& sb);
    internal static string TrimEndingDirectorySeparator(string path);
    internal static bool EndsInDirectorySeparator(string path);
    internal static ReadOnlySpan`1<char> TrimEndingDirectorySeparator(ReadOnlySpan`1<char> path);
    internal static bool EndsInDirectorySeparator(ReadOnlySpan`1<char> path);
    internal static bool IsValidDriveChar(char value);
    internal static bool EndsWithPeriodOrSpace(string path);
    internal static string EnsureExtendedPrefixIfNeeded(string path);
    internal static string EnsureExtendedPrefix(string path);
    internal static bool IsDevice(ReadOnlySpan`1<char> path);
    internal static bool IsDeviceUNC(ReadOnlySpan`1<char> path);
    internal static bool IsExtended(ReadOnlySpan`1<char> path);
    internal static bool HasWildCardCharacters(ReadOnlySpan`1<char> path);
    internal static int GetRootLength(ReadOnlySpan`1<char> path);
    internal static bool IsPartiallyQualified(ReadOnlySpan`1<char> path);
    internal static bool IsDirectorySeparator(char c);
    internal static string NormalizeDirectorySeparators(string path);
    internal static bool IsEffectivelyEmpty(ReadOnlySpan`1<char> path);
}
internal static class System.IO.Win32Marshal : object {
    internal static Exception GetExceptionForLastWin32Error(string path);
    internal static Exception GetExceptionForWin32Error(int errorCode, string path);
    internal static int MakeHRFromErrorCode(int errorCode);
    internal static int TryMakeWin32ErrorCodeFromHR(int hr);
    internal static string GetMessage(int errorCode);
}
internal static class System.NotImplemented : object {
    internal static Exception ByDesign { get; }
    internal static Exception get_ByDesign();
    internal static Exception ByDesignWithMessage(string message);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsByRefLikeAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[AttributeUsageAttribute("64")]
internal class System.Runtime.InteropServices.SuppressGCTransitionAttribute : Attribute {
}
internal abstract class System.Runtime.Versioning.OSPlatformAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <PlatformName>k__BackingField;
    public string PlatformName { get; }
    private protected OSPlatformAttribute(string platformName);
    [CompilerGeneratedAttribute]
public string get_PlatformName();
}
[AttributeUsageAttribute("1023")]
internal class System.Runtime.Versioning.SupportedOSPlatformAttribute : OSPlatformAttribute {
    public SupportedOSPlatformAttribute(string platformName);
}
[AttributeUsageAttribute("1")]
internal class System.Runtime.Versioning.TargetPlatformAttribute : OSPlatformAttribute {
    public TargetPlatformAttribute(string platformName);
}
[AttributeUsageAttribute("1023")]
internal class System.Runtime.Versioning.UnsupportedOSPlatformAttribute : OSPlatformAttribute {
    public UnsupportedOSPlatformAttribute(string platformName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Security.AccessControl.DirectoryObjectSecurity : ObjectSecurity {
    protected DirectoryObjectSecurity(CommonSecurityDescriptor securityDescriptor);
    private static bool IsValidTargetTypeStatic(Type targetType);
    private AuthorizationRuleCollection GetRules(bool access, bool includeExplicit, bool includeInherited, Type targetType);
    private bool ModifyAccess(AccessControlModification modification, ObjectAccessRule rule, Boolean& modified);
    private bool ModifyAudit(AccessControlModification modification, ObjectAuditRule rule, Boolean& modified);
    public virtual AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type, Guid objectType, Guid inheritedObjectType);
    public virtual AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags, Guid objectType, Guid inheritedObjectType);
    protected virtual bool ModifyAccess(AccessControlModification modification, AccessRule rule, Boolean& modified);
    protected virtual bool ModifyAudit(AccessControlModification modification, AuditRule rule, Boolean& modified);
    protected void AddAccessRule(ObjectAccessRule rule);
    protected void SetAccessRule(ObjectAccessRule rule);
    protected void ResetAccessRule(ObjectAccessRule rule);
    protected bool RemoveAccessRule(ObjectAccessRule rule);
    protected void RemoveAccessRuleAll(ObjectAccessRule rule);
    protected void RemoveAccessRuleSpecific(ObjectAccessRule rule);
    protected void AddAuditRule(ObjectAuditRule rule);
    protected void SetAuditRule(ObjectAuditRule rule);
    protected bool RemoveAuditRule(ObjectAuditRule rule);
    protected void RemoveAuditRuleAll(ObjectAuditRule rule);
    protected void RemoveAuditRuleSpecific(ObjectAuditRule rule);
    public AuthorizationRuleCollection GetAccessRules(bool includeExplicit, bool includeInherited, Type targetType);
    public AuthorizationRuleCollection GetAuditRules(bool includeExplicit, bool includeInherited, Type targetType);
}
public class System.Security.AccessControl.DirectorySecurity : FileSystemSecurity {
    [NullableContextAttribute("1")]
public DirectorySecurity(string name, AccessControlSections includeSections);
}
public class System.Security.AccessControl.FileSecurity : FileSystemSecurity {
    [NullableContextAttribute("1")]
public FileSecurity(string fileName, AccessControlSections includeSections);
    internal FileSecurity(SafeFileHandle handle, AccessControlSections includeSections);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.AccessControl.FileSystemAccessRule : AccessRule {
    public FileSystemRights FileSystemRights { get; }
    public FileSystemAccessRule(IdentityReference identity, FileSystemRights fileSystemRights, AccessControlType type);
    public FileSystemAccessRule(string identity, FileSystemRights fileSystemRights, AccessControlType type);
    public FileSystemAccessRule(IdentityReference identity, FileSystemRights fileSystemRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public FileSystemAccessRule(string identity, FileSystemRights fileSystemRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    internal FileSystemAccessRule(IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public FileSystemRights get_FileSystemRights();
    internal static int AccessMaskFromRights(FileSystemRights fileSystemRights, AccessControlType controlType);
    internal static FileSystemRights RightsFromAccessMask(int accessMask);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.AccessControl.FileSystemAuditRule : AuditRule {
    public FileSystemRights FileSystemRights { get; }
    public FileSystemAuditRule(IdentityReference identity, FileSystemRights fileSystemRights, AuditFlags flags);
    public FileSystemAuditRule(IdentityReference identity, FileSystemRights fileSystemRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    public FileSystemAuditRule(string identity, FileSystemRights fileSystemRights, AuditFlags flags);
    public FileSystemAuditRule(string identity, FileSystemRights fileSystemRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    internal FileSystemAuditRule(IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    private static int AccessMaskFromRights(FileSystemRights fileSystemRights);
    public FileSystemRights get_FileSystemRights();
}
[FlagsAttribute]
public enum System.Security.AccessControl.FileSystemRights : Enum {
    public int value__;
    public static FileSystemRights ReadData;
    public static FileSystemRights ListDirectory;
    public static FileSystemRights WriteData;
    public static FileSystemRights CreateFiles;
    public static FileSystemRights AppendData;
    public static FileSystemRights CreateDirectories;
    public static FileSystemRights ReadExtendedAttributes;
    public static FileSystemRights WriteExtendedAttributes;
    public static FileSystemRights ExecuteFile;
    public static FileSystemRights Traverse;
    public static FileSystemRights DeleteSubdirectoriesAndFiles;
    public static FileSystemRights ReadAttributes;
    public static FileSystemRights WriteAttributes;
    public static FileSystemRights Delete;
    public static FileSystemRights ReadPermissions;
    public static FileSystemRights ChangePermissions;
    public static FileSystemRights TakeOwnership;
    public static FileSystemRights Synchronize;
    public static FileSystemRights FullControl;
    public static FileSystemRights Read;
    public static FileSystemRights ReadAndExecute;
    public static FileSystemRights Write;
    public static FileSystemRights Modify;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Security.AccessControl.FileSystemSecurity : NativeObjectSecurity {
    private static ResourceType s_ResourceType;
    public Type AccessRightType { get; }
    public Type AccessRuleType { get; }
    public Type AuditRuleType { get; }
    internal FileSystemSecurity(bool isContainer);
    internal FileSystemSecurity(bool isContainer, string name, AccessControlSections includeSections, bool isDirectory);
    internal FileSystemSecurity(bool isContainer, SafeFileHandle handle, AccessControlSections includeSections, bool isDirectory);
    private static Exception _HandleErrorCode(int errorCode, string name, SafeHandle handle, object context);
    public sealed virtual AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public sealed virtual AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    internal AccessControlSections GetAccessControlSectionsFromChanges();
    internal void Persist(string fullPath);
    internal void Persist(SafeFileHandle handle, string fullPath);
    public void AddAccessRule(FileSystemAccessRule rule);
    public void SetAccessRule(FileSystemAccessRule rule);
    public void ResetAccessRule(FileSystemAccessRule rule);
    public bool RemoveAccessRule(FileSystemAccessRule rule);
    public void RemoveAccessRuleAll(FileSystemAccessRule rule);
    public void RemoveAccessRuleSpecific(FileSystemAccessRule rule);
    public void AddAuditRule(FileSystemAuditRule rule);
    public void SetAuditRule(FileSystemAuditRule rule);
    public bool RemoveAuditRule(FileSystemAuditRule rule);
    public void RemoveAuditRuleAll(FileSystemAuditRule rule);
    public void RemoveAuditRuleSpecific(FileSystemAuditRule rule);
    public virtual Type get_AccessRightType();
    public virtual Type get_AccessRuleType();
    public virtual Type get_AuditRuleType();
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string AccessControl_InvalidHandle { get; }
    internal static string Arg_MustBeIdentityReferenceType { get; }
    internal static string Argument_InvalidEnumValue { get; }
    internal static string Argument_InvalidName { get; }
    internal static string ArgumentOutOfRange_Enum { get; }
    internal static string ObjectDisposed_FileClosed { get; }
    internal static string PlatformNotSupported_AccessControl { get; }
    internal static string TypeUnrecognized_AccessControl { get; }
    internal static string InvalidOperation_RemoveFail { get; }
    internal static string Arg_MustBeDriveLetterOrRootDir { get; }
    internal static string IO_AlreadyExists_Name { get; }
    internal static string IO_FileExists_Name { get; }
    internal static string IO_FileNotFound { get; }
    internal static string IO_FileNotFound_FileName { get; }
    internal static string IO_PathNotFound_NoPathName { get; }
    internal static string IO_PathNotFound_Path { get; }
    internal static string IO_PathTooLong { get; }
    internal static string IO_PathTooLong_Path { get; }
    internal static string IO_SharingViolation_File { get; }
    internal static string IO_SharingViolation_NoFileName { get; }
    internal static string UnauthorizedAccess_IODenied_NoPathName { get; }
    internal static string UnauthorizedAccess_IODenied_Path { get; }
    internal static string Argument_InvalidPathChars { get; }
    internal static string Arg_PathEmpty { get; }
    internal static string ArgumentOutOfRange_NeedPosNum { get; }
    internal static string Argument_InvalidFileModeAndFileSystemRightsCombo { get; }
    private static SR();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_AccessControl_InvalidHandle();
    internal static string get_Arg_MustBeIdentityReferenceType();
    internal static string get_Argument_InvalidEnumValue();
    internal static string get_Argument_InvalidName();
    internal static string get_ArgumentOutOfRange_Enum();
    internal static string get_ObjectDisposed_FileClosed();
    internal static string get_PlatformNotSupported_AccessControl();
    internal static string get_TypeUnrecognized_AccessControl();
    internal static string get_InvalidOperation_RemoveFail();
    internal static string get_Arg_MustBeDriveLetterOrRootDir();
    internal static string get_IO_AlreadyExists_Name();
    internal static string get_IO_FileExists_Name();
    internal static string get_IO_FileNotFound();
    internal static string get_IO_FileNotFound_FileName();
    internal static string get_IO_PathNotFound_NoPathName();
    internal static string get_IO_PathNotFound_Path();
    internal static string get_IO_PathTooLong();
    internal static string get_IO_PathTooLong_Path();
    internal static string get_IO_SharingViolation_File();
    internal static string get_IO_SharingViolation_NoFileName();
    internal static string get_UnauthorizedAccess_IODenied_NoPathName();
    internal static string get_UnauthorizedAccess_IODenied_Path();
    internal static string get_Argument_InvalidPathChars();
    internal static string get_Arg_PathEmpty();
    internal static string get_ArgumentOutOfRange_NeedPosNum();
    internal static string get_Argument_InvalidFileModeAndFileSystemRightsCombo();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[DefaultMemberAttribute("Item")]
internal class System.Text.ValueStringBuilder : ValueType {
    private Char[] _arrayToReturnToPool;
    private Span`1<char> _chars;
    private int _pos;
    public int Length { get; public set; }
    public int Capacity { get; }
    public Char& Item { get; }
    public Span`1<char> RawChars { get; }
    public ValueStringBuilder(Span`1<char> initialBuffer);
    public ValueStringBuilder(int initialCapacity);
    public int get_Length();
    public void set_Length(int value);
    public int get_Capacity();
    public void EnsureCapacity(int capacity);
    public Char& GetPinnableReference();
    public Char& GetPinnableReference(bool terminate);
    public Char& get_Item(int index);
    public virtual string ToString();
    public Span`1<char> get_RawChars();
    public ReadOnlySpan`1<char> AsSpan(bool terminate);
    public ReadOnlySpan`1<char> AsSpan();
    public ReadOnlySpan`1<char> AsSpan(int start);
    public ReadOnlySpan`1<char> AsSpan(int start, int length);
    public bool TryCopyTo(Span`1<char> destination, Int32& charsWritten);
    public void Insert(int index, char value, int count);
    public void Insert(int index, string s);
    public void Append(char c);
    public void Append(string s);
    private void AppendSlow(string s);
    public void Append(char c, int count);
    public void Append(Char* value, int length);
    public void Append(ReadOnlySpan`1<char> value);
    public Span`1<char> AppendSpan(int length);
    private void GrowAndAppend(char c);
    private void Grow(int additionalCapacityBeyondPos);
    public void Dispose();
}
