[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class NuGet.DependencyResolver.AnalyzeResult`1 : object {
    [CompilerGeneratedAttribute]
private List`1<DowngradeResult`1<TItem>> <Downgrades>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<VersionConflictResult`1<TItem>> <VersionConflicts>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<GraphNode`1<TItem>> <Cycles>k__BackingField;
    public List`1<DowngradeResult`1<TItem>> Downgrades { get; }
    public List`1<VersionConflictResult`1<TItem>> VersionConflicts { get; }
    public List`1<GraphNode`1<TItem>> Cycles { get; }
    [CompilerGeneratedAttribute]
public List`1<DowngradeResult`1<TItem>> get_Downgrades();
    [CompilerGeneratedAttribute]
public List`1<VersionConflictResult`1<TItem>> get_VersionConflicts();
    [CompilerGeneratedAttribute]
public List`1<GraphNode`1<TItem>> get_Cycles();
    public void Combine(AnalyzeResult`1<TItem> result);
}
public enum NuGet.DependencyResolver.Disposition : Enum {
    public int value__;
    public static Disposition Acceptable;
    public static Disposition Rejected;
    public static Disposition Accepted;
    public static Disposition PotentiallyDowngraded;
    public static Disposition Cycle;
}
public class NuGet.DependencyResolver.DowngradeResult`1 : object {
    [CompilerGeneratedAttribute]
private GraphNode`1<TItem> <DowngradedFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphNode`1<TItem> <DowngradedTo>k__BackingField;
    public GraphNode`1<TItem> DowngradedFrom { get; public set; }
    public GraphNode`1<TItem> DowngradedTo { get; public set; }
    [CompilerGeneratedAttribute]
public GraphNode`1<TItem> get_DowngradedFrom();
    [CompilerGeneratedAttribute]
public void set_DowngradedFrom(GraphNode`1<TItem> value);
    [CompilerGeneratedAttribute]
public GraphNode`1<TItem> get_DowngradedTo();
    [CompilerGeneratedAttribute]
public void set_DowngradedTo(GraphNode`1<TItem> value);
}
public class NuGet.DependencyResolver.GraphEdge`1 : object {
    [CompilerGeneratedAttribute]
private GraphEdge`1<TItem> <OuterEdge>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphItem`1<TItem> <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private LibraryDependency <Edge>k__BackingField;
    public GraphEdge`1<TItem> OuterEdge { get; }
    public GraphItem`1<TItem> Item { get; }
    public LibraryDependency Edge { get; }
    public GraphEdge`1(GraphEdge`1<TItem> outerEdge, GraphItem`1<TItem> item, LibraryDependency edge);
    [CompilerGeneratedAttribute]
public GraphEdge`1<TItem> get_OuterEdge();
    [CompilerGeneratedAttribute]
public GraphItem`1<TItem> get_Item();
    [CompilerGeneratedAttribute]
public LibraryDependency get_Edge();
}
[DebuggerDisplayAttribute("{Key}")]
public class NuGet.DependencyResolver.GraphItem`1 : object {
    [CompilerGeneratedAttribute]
private LibraryIdentity <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private TItem <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCentralTransitive>k__BackingField;
    public LibraryIdentity Key { get; public set; }
    public TItem Data { get; public set; }
    public bool IsCentralTransitive { get; public set; }
    public GraphItem`1(LibraryIdentity key);
    [CompilerGeneratedAttribute]
public LibraryIdentity get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(LibraryIdentity value);
    [CompilerGeneratedAttribute]
public TItem get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(TItem value);
    [CompilerGeneratedAttribute]
public bool get_IsCentralTransitive();
    [CompilerGeneratedAttribute]
public void set_IsCentralTransitive(bool value);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(GraphItem`1<TItem> other);
    public virtual int GetHashCode();
    private bool KeyCompare(GraphItem`1<TItem> other);
}
public class NuGet.DependencyResolver.GraphItemKeyComparer`1 : object {
    private static Lazy`1<GraphItemKeyComparer`1<T>> DefaultComparer;
    public static GraphItemKeyComparer`1<T> Instance { get; }
    private static GraphItemKeyComparer`1();
    public static GraphItemKeyComparer`1<T> get_Instance();
    public sealed virtual bool Equals(GraphItem`1<T> x, GraphItem`1<T> y);
    public sealed virtual int GetHashCode(GraphItem`1<T> obj);
}
public class NuGet.DependencyResolver.GraphNode`1 : object {
    internal static IList`1<GraphNode`1<TItem>> EmptyList;
    [CompilerGeneratedAttribute]
private LibraryRange <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphItem`1<TItem> <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphNode`1<TItem> <OuterNode>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<GraphNode`1<TItem>> <InnerNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private Disposition <Disposition>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<GraphNode`1<TItem>> <ParentNodes>k__BackingField;
    public LibraryRange Key { get; public set; }
    public GraphItem`1<TItem> Item { get; public set; }
    public GraphNode`1<TItem> OuterNode { get; public set; }
    public IList`1<GraphNode`1<TItem>> InnerNodes { get; public set; }
    public Disposition Disposition { get; public set; }
    public IList`1<GraphNode`1<TItem>> ParentNodes { get; }
    public GraphNode`1(LibraryRange key);
    public GraphNode`1(LibraryRange key, bool hasInnerNodes, bool hasParentNodes);
    private static GraphNode`1();
    [CompilerGeneratedAttribute]
public LibraryRange get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(LibraryRange value);
    [CompilerGeneratedAttribute]
public GraphItem`1<TItem> get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(GraphItem`1<TItem> value);
    [CompilerGeneratedAttribute]
public GraphNode`1<TItem> get_OuterNode();
    [CompilerGeneratedAttribute]
public void set_OuterNode(GraphNode`1<TItem> value);
    [CompilerGeneratedAttribute]
public IList`1<GraphNode`1<TItem>> get_InnerNodes();
    [CompilerGeneratedAttribute]
public void set_InnerNodes(IList`1<GraphNode`1<TItem>> value);
    [CompilerGeneratedAttribute]
public Disposition get_Disposition();
    [CompilerGeneratedAttribute]
public void set_Disposition(Disposition value);
    [CompilerGeneratedAttribute]
public IList`1<GraphNode`1<TItem>> get_ParentNodes();
    internal bool AreAllParentsRejected();
    internal void EnsureInnerNodeCapacity(int additionalSpace);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class NuGet.DependencyResolver.GraphOperations : object {
    private static string NodeArrow;
    [ThreadStaticAttribute]
private static Dictionary`2<GraphNode`1<RemoteResolveResult>, GraphNode`1<RemoteResolveResult>> _tempDowngrades;
    private static char LIGHT_HORIZONTAL;
    private static char LIGHT_VERTICAL_AND_RIGHT;
    [ExtensionAttribute]
public static AnalyzeResult`1<RemoteResolveResult> Analyze(GraphNode`1<RemoteResolveResult> root);
    private static bool IsRelevantDowngrade(DowngradeResult`1<RemoteResolveResult> d);
    [ExtensionAttribute]
private static void CheckCycleAndNearestWins(GraphNode`1<RemoteResolveResult> root, List`1<DowngradeResult`1<RemoteResolveResult>> downgrades, List`1<GraphNode`1<RemoteResolveResult>> cycles);
    private static void WalkTreeCheckCycleAndNearestWins(CyclesAndDowngrades context, GraphNode`1<RemoteResolveResult> node);
    [ExtensionAttribute]
public static string GetPath(GraphNode`1<TItem> node);
    [ExtensionAttribute]
public static string GetPathWithLastRange(GraphNode`1<TItem> node);
    [ExtensionAttribute]
public static GraphNode`1<TItem> Path(GraphNode`1<TItem> node, String[] path);
    [ExtensionAttribute]
public static string GetIdAndRange(GraphNode`1<TItem> node);
    [ExtensionAttribute]
public static string GetIdAndVersionOrRange(GraphNode`1<TItem> node);
    [ExtensionAttribute]
public static string GetId(GraphNode`1<TItem> node);
    [ExtensionAttribute]
public static NuGetVersion GetVersionOrDefault(GraphNode`1<TItem> node);
    [ExtensionAttribute]
public static VersionRange GetVersionRange(GraphNode`1<TItem> node);
    [ExtensionAttribute]
public static bool IsPackage(GraphNode`1<TItem> node);
    [ExtensionAttribute]
private static bool TryResolveConflicts(GraphNode`1<TItem> root, List`1<VersionConflictResult`1<TItem>> versionConflicts);
    private static void WalkTreeDectectConflicts(GraphNode`1<TItem> node, ConflictsAndAccepted`1<TItem> context);
    private static WalkState WalkTreeMarkAmbiguousNodes(GraphNode`1<TItem> node, WalkState state, Tracker`1<TItem> context);
    private static bool WalkTreeRejectNodesOfRejectedNodes(bool state, GraphNode`1<TItem> node, Tracker`1<TItem> context);
    private static bool WalkTreeAcceptOrRejectNodes(TrackerAndAccepted`1<TItem> context, bool state, GraphNode`1<TItem> node);
    [ExtensionAttribute]
private static TState ForEachGlobalState(GraphNode`1<TItem> root, TState state, Func`3<GraphNode`1<TItem>, TState, TState> visitor, Func`2<GraphNode`1<TItem>, bool> skipNode);
    [ExtensionAttribute]
private static void ForEach(GraphNode`1<TItem> root, TState state, Func`4<GraphNode`1<TItem>, TState, TContext, TState> visitor, TContext context, Func`2<GraphNode`1<TItem>, bool> skipNode);
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<GraphNode`1<TItem>> roots, Action`1<GraphNode`1<TItem>> visitor);
    [ExtensionAttribute]
private static void ForEach(GraphNode`1<TItem> root, Action`1<GraphNode`1<TItem>> visitor, Func`2<GraphNode`1<TItem>, bool> skipNode);
    [ExtensionAttribute]
public static void ForEach(GraphNode`1<TItem> root, Action`1<GraphNode`1<TItem>> visitor);
    [ExtensionAttribute]
private static void ForEach(GraphNode`1<TItem> root, Action`2<GraphNode`1<TItem>, TContext> visitor, TContext context, Func`2<GraphNode`1<TItem>, bool> skipNode);
    [ExtensionAttribute]
public static void ForEach(GraphNode`1<TItem> root, Action`2<GraphNode`1<TItem>, TContext> visitor, TContext context);
    private static void AddInnerNodesToQueue(IList`1<GraphNode`1<TItem>> innerNodes, Queue`1<NodeWithState`2<TItem, TState>> queue, TState innerState);
    private static void AddInnerNodesToQueue(IList`1<GraphNode`1<TItem>> innerNodes, Queue`1<GraphNode`1<TItem>> queue);
    public static Dictionary`2<GraphNode`1<RemoteResolveResult>, GraphNode`1<RemoteResolveResult>> RentDowngradesDictionary();
    public static void ReleaseDowngradesDictionary(Dictionary`2<GraphNode`1<RemoteResolveResult>, GraphNode`1<RemoteResolveResult>> dictionary);
    private static ConflictsAndAccepted`1<TItem> CreateState(List`1<VersionConflictResult`1<TItem>> versionConflicts, Dictionary`2<string, GraphNode`1<TItem>> acceptedLibraries);
    private static TrackerAndAccepted`1<TItem> CreateState(Tracker`1<TItem> tracker, Dictionary`2<string, GraphNode`1<TItem>> acceptedLibraries);
    private static CyclesAndDowngrades CreateState(List`1<GraphNode`1<RemoteResolveResult>> cycles, Dictionary`2<GraphNode`1<RemoteResolveResult>, GraphNode`1<RemoteResolveResult>> downgrades);
    private static void DetectAndMarkAmbiguousCentralTransitiveDependencies(Tracker`1<TItem> tracker, List`1<GraphNode`1<TItem>> centralTransitiveNodes);
    [ExtensionAttribute]
private static void RejectCentralTransitiveBecauseOfRejectedParents(GraphNode`1<TItem> root, Tracker`1<TItem> tracker, List`1<GraphNode`1<TItem>> centralTransitiveNodes);
    private static bool WalkTreeRejectNodesOfRejectedNodes(bool state, GraphNode`1<TItem> node, HashSet`1<GraphNode`1<TItem>> context);
    [ExtensionAttribute]
[ConditionalAttribute("DEBUG")]
public static void Dump(GraphNode`1<TItem> root, Action`1<string> write);
    private static void DumpChildren(GraphNode`1<TItem> root, Action`1<string> write, int level);
    private static void DumpNode(GraphNode`1<TItem> node, Action`1<string> write, int level);
    [CompilerGeneratedAttribute]
internal static bool <IsRelevantDowngrade>g__AreAllParentsAccepted|3_0(DowngradeResult`1<RemoteResolveResult> d);
}
public interface NuGet.DependencyResolver.IDependencyProvider {
    public abstract virtual bool SupportsType(LibraryDependencyTarget libraryTypeFlag);
    public abstract virtual Library GetLibrary(LibraryRange libraryRange, NuGetFramework targetFramework);
}
public interface NuGet.DependencyResolver.IRemoteDependencyProvider {
    public bool IsHttp { get; }
    public PackageSource Source { get; }
    public SourceRepository SourceRepository { get; }
    public abstract virtual bool get_IsHttp();
    public abstract virtual PackageSource get_Source();
    public abstract virtual SourceRepository get_SourceRepository();
    public abstract virtual Task`1<LibraryIdentity> FindLibraryAsync(LibraryRange libraryRange, NuGetFramework targetFramework, SourceCacheContext cacheContext, ILogger logger, CancellationToken cancellationToken);
    public abstract virtual Task`1<LibraryDependencyInfo> GetDependenciesAsync(LibraryIdentity libraryIdentity, NuGetFramework targetFramework, SourceCacheContext cacheContext, ILogger logger, CancellationToken cancellationToken);
    public abstract virtual Task`1<IPackageDownloader> GetPackageDownloaderAsync(PackageIdentity packageIdentity, SourceCacheContext cacheContext, ILogger logger, CancellationToken cancellationToken);
    public abstract virtual Task`1<IEnumerable`1<NuGetVersion>> GetAllVersionsAsync(string id, SourceCacheContext cacheContext, ILogger logger, CancellationToken token);
}
[IsReadOnlyAttribute]
public class NuGet.DependencyResolver.LibraryRangeCacheKey : ValueType {
    [CompilerGeneratedAttribute]
private NuGetFramework <Framework>k__BackingField;
    [CompilerGeneratedAttribute]
private LibraryRange <LibraryRange>k__BackingField;
    public NuGetFramework Framework { get; }
    public LibraryRange LibraryRange { get; }
    public LibraryRangeCacheKey(LibraryRange range, NuGetFramework framework);
    [CompilerGeneratedAttribute]
public NuGetFramework get_Framework();
    [CompilerGeneratedAttribute]
public LibraryRange get_LibraryRange();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(LibraryRangeCacheKey other);
    public virtual string ToString();
    public static bool op_Equality(LibraryRangeCacheKey left, LibraryRangeCacheKey right);
    public static bool op_Inequality(LibraryRangeCacheKey left, LibraryRangeCacheKey right);
}
[DefaultMemberAttribute("Item")]
internal class NuGet.DependencyResolver.LightweightList`1 : ValueType {
    private static int Fields;
    private int _expectedCapacity;
    private int _count;
    private T _firstItem;
    private T _secondItem;
    private T _thirdItem;
    private T _fourthItem;
    private T _fifthItem;
    private List`1<T> _additionalItems;
    public int Count { get; }
    public T Item { get; }
    public LightweightList`1(int expectedCapacity);
    [IsReadOnlyAttribute]
public int get_Count();
    [IsReadOnlyAttribute]
public T get_Item(int index);
    public void Add(T task);
    [IsReadOnlyAttribute]
public Enumerator<T> GetEnumerator();
}
public class NuGet.DependencyResolver.LocalDependencyProvider : object {
    private IDependencyProvider _dependencyProvider;
    [CompilerGeneratedAttribute]
private bool <IsHttp>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageSource <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceRepository <SourceRepository>k__BackingField;
    public bool IsHttp { get; private set; }
    public PackageSource Source { get; private set; }
    public SourceRepository SourceRepository { get; private set; }
    public LocalDependencyProvider(IDependencyProvider dependencyProvider);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsHttp();
    [CompilerGeneratedAttribute]
private void set_IsHttp(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual PackageSource get_Source();
    [CompilerGeneratedAttribute]
private void set_Source(PackageSource value);
    [CompilerGeneratedAttribute]
public sealed virtual SourceRepository get_SourceRepository();
    [CompilerGeneratedAttribute]
private void set_SourceRepository(SourceRepository value);
    public sealed virtual Task`1<LibraryIdentity> FindLibraryAsync(LibraryRange libraryRange, NuGetFramework targetFramework, SourceCacheContext cacheContext, ILogger logger, CancellationToken cancellationToken);
    public sealed virtual Task`1<LibraryDependencyInfo> GetDependenciesAsync(LibraryIdentity libraryIdentity, NuGetFramework targetFramework, SourceCacheContext cacheContext, ILogger logger, CancellationToken cancellationToken);
    public sealed virtual Task`1<IPackageDownloader> GetPackageDownloaderAsync(PackageIdentity packageIdentity, SourceCacheContext cacheContext, ILogger logger, CancellationToken cancellationToken);
    public sealed virtual Task`1<IEnumerable`1<NuGetVersion>> GetAllVersionsAsync(string id, SourceCacheContext cacheContext, ILogger logger, CancellationToken token);
}
public class NuGet.DependencyResolver.LocalMatch : RemoteMatch {
    [CompilerGeneratedAttribute]
private Library <LocalLibrary>k__BackingField;
    [CompilerGeneratedAttribute]
private IDependencyProvider <LocalProvider>k__BackingField;
    public Library LocalLibrary { get; public set; }
    public IDependencyProvider LocalProvider { get; public set; }
    [CompilerGeneratedAttribute]
public Library get_LocalLibrary();
    [CompilerGeneratedAttribute]
public void set_LocalLibrary(Library value);
    [CompilerGeneratedAttribute]
public IDependencyProvider get_LocalProvider();
    [CompilerGeneratedAttribute]
public void set_LocalProvider(IDependencyProvider value);
}
public class NuGet.DependencyResolver.LockFileCacheKey : object {
    [CompilerGeneratedAttribute]
private NuGetFramework <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuntimeIdentifier>k__BackingField;
    public NuGetFramework TargetFramework { get; }
    public string RuntimeIdentifier { get; }
    public string Name { get; }
    public LockFileCacheKey(NuGetFramework framework, string runtimeIdentifier);
    [CompilerGeneratedAttribute]
public NuGetFramework get_TargetFramework();
    [CompilerGeneratedAttribute]
public string get_RuntimeIdentifier();
    public string get_Name();
    public sealed virtual bool Equals(LockFileCacheKey other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    private static string GetNameString(string framework, string runtime);
}
public static class NuGet.DependencyResolver.PackagingUtility : object {
    public static LibraryDependency GetLibraryDependencyFromNuspec(PackageDependency dependency);
}
public class NuGet.DependencyResolver.RemoteDependencyWalker : object {
    private RemoteWalkContext _context;
    public RemoteDependencyWalker(RemoteWalkContext context);
    [AsyncStateMachineAttribute("NuGet.DependencyResolver.RemoteDependencyWalker/<WalkAsync>d__2")]
public Task`1<GraphNode`1<RemoteResolveResult>> WalkAsync(LibraryRange library, NuGetFramework framework, string runtimeIdentifier, RuntimeGraph runtimeGraph, bool recursive);
    [AsyncStateMachineAttribute("NuGet.DependencyResolver.RemoteDependencyWalker/<CreateGraphNodeAsync>d__3")]
private Task`1<GraphNode`1<RemoteResolveResult>> CreateGraphNodeAsync(LibraryRange libraryRange, NuGetFramework framework, string runtimeName, RuntimeGraph runtimeGraph, Func`2<LibraryRange, ValueTuple`2<DependencyResult, LibraryDependency>> predicate, GraphEdge`1<RemoteResolveResult> outerEdge, TransitiveCentralPackageVersions transitiveCentralPackageVersions, bool hasParentNodes);
    public static void EvaluateRuntimeDependencies(LibraryRange& libraryRange, string runtimeName, RuntimeGraph runtimeGraph, HashSet`1& runtimeDependencies);
    public static void MergeRuntimeDependencies(HashSet`1<LibraryDependency> runtimeDependencies, GraphNode`1<RemoteResolveResult> node);
    private static ValueTuple`2<DependencyResult, LibraryDependency> WalkParentsAndCalculateDependencyResult(GraphEdge`1<RemoteResolveResult> graphEdge, LibraryDependency dependency, Func`2<LibraryRange, ValueTuple`2<DependencyResult, LibraryDependency>> rootPredicate);
    private static Func`2<LibraryRange, ValueTuple`2<DependencyResult, LibraryDependency>> ChainPredicate(Func`2<LibraryRange, ValueTuple`2<DependencyResult, LibraryDependency>> predicate, GraphNode`1<RemoteResolveResult> node, LibraryDependency dependency);
    private static ValueTuple`2<Nullable`1<DependencyResult>, LibraryDependency> CalculateDependencyResult(GraphItem`1<RemoteResolveResult> item, LibraryDependency parentDependency, LibraryRange childDependencyLibrary, bool isRoot);
    public static bool IsGreaterThanOrEqualTo(VersionRange nearVersion, VersionRange farVersion);
    private static NuGetVersion GetReleaseLabelFreeVersion(VersionRange versionRange);
    private void MarkCentralVersionForTransitiveProcessing(LibraryDependency libraryDependency, TransitiveCentralPackageVersions transitiveCentralPackageVersions, GraphNode`1<RemoteResolveResult> parentNode);
    [AsyncStateMachineAttribute("NuGet.DependencyResolver.RemoteDependencyWalker/<AddTransitiveCentralPackageVersionNodesAsync>d__13")]
private Task`1<GraphNode`1<RemoteResolveResult>> AddTransitiveCentralPackageVersionNodesAsync(GraphNode`1<RemoteResolveResult> rootNode, LibraryDependency centralPackageVersionDependency, NuGetFramework framework, string runtimeIdentifier, RuntimeGraph runtimeGraph, TransitiveCentralPackageVersions transitiveCentralPackageVersions);
    internal bool IsDependencyValidForGraph(LibraryDependency dependency);
}
public class NuGet.DependencyResolver.RemoteMatch : object {
    [CompilerGeneratedAttribute]
private IRemoteDependencyProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private LibraryIdentity <Library>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public IRemoteDependencyProvider Provider { get; public set; }
    public LibraryIdentity Library { get; public set; }
    public string Path { get; public set; }
    [CompilerGeneratedAttribute]
public IRemoteDependencyProvider get_Provider();
    [CompilerGeneratedAttribute]
public void set_Provider(IRemoteDependencyProvider value);
    [CompilerGeneratedAttribute]
public LibraryIdentity get_Library();
    [CompilerGeneratedAttribute]
public void set_Library(LibraryIdentity value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RemoteMatch other);
    public virtual int GetHashCode();
}
public class NuGet.DependencyResolver.RemoteResolveResult : object {
    internal static List`1<LibraryDependency> EmptyDependencies;
    [CompilerGeneratedAttribute]
private RemoteMatch <Match>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<LibraryDependency> <Dependencies>k__BackingField;
    public RemoteMatch Match { get; public set; }
    public List`1<LibraryDependency> Dependencies { get; public set; }
    private static RemoteResolveResult();
    [CompilerGeneratedAttribute]
public RemoteMatch get_Match();
    [CompilerGeneratedAttribute]
public void set_Match(RemoteMatch value);
    [CompilerGeneratedAttribute]
public List`1<LibraryDependency> get_Dependencies();
    [CompilerGeneratedAttribute]
public void set_Dependencies(List`1<LibraryDependency> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NuGet.DependencyResolver.RemoteWalkContext : object {
    [CompilerGeneratedAttribute]
private SourceCacheContext <CacheContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IDependencyProvider> <ProjectLibraryProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IRemoteDependencyProvider> <LocalLibraryProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IRemoteDependencyProvider> <RemoteLibraryProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageSourceMapping <PackageSourceMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<LockFileCacheKey, IList`1<LibraryIdentity>> <LockFileLibraries>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskResultCache`2<LibraryRangeCacheKey, GraphItem`1<RemoteResolveResult>> <FindLibraryEntryCache>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskResultCache`2<LibraryRange, Tuple`2<LibraryRange, RemoteMatch>> <ResolvePackageLibraryMatchCache>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMsBuildBased>k__BackingField;
    public SourceCacheContext CacheContext { get; }
    public ILogger Logger { get; }
    public IList`1<IDependencyProvider> ProjectLibraryProviders { get; }
    public IList`1<IRemoteDependencyProvider> LocalLibraryProviders { get; }
    public IList`1<IRemoteDependencyProvider> RemoteLibraryProviders { get; }
    public PackageSourceMapping PackageSourceMapping { get; }
    public IDictionary`2<LockFileCacheKey, IList`1<LibraryIdentity>> LockFileLibraries { get; }
    internal TaskResultCache`2<LibraryRangeCacheKey, GraphItem`1<RemoteResolveResult>> FindLibraryEntryCache { get; }
    internal TaskResultCache`2<LibraryRange, Tuple`2<LibraryRange, RemoteMatch>> ResolvePackageLibraryMatchCache { get; }
    public bool IsMsBuildBased { get; public set; }
    public RemoteWalkContext(SourceCacheContext cacheContext, PackageSourceMapping packageSourceMapping, ILogger logger);
    [CompilerGeneratedAttribute]
public SourceCacheContext get_CacheContext();
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public IList`1<IDependencyProvider> get_ProjectLibraryProviders();
    [CompilerGeneratedAttribute]
public IList`1<IRemoteDependencyProvider> get_LocalLibraryProviders();
    [CompilerGeneratedAttribute]
public IList`1<IRemoteDependencyProvider> get_RemoteLibraryProviders();
    [CompilerGeneratedAttribute]
public PackageSourceMapping get_PackageSourceMapping();
    [CompilerGeneratedAttribute]
public IDictionary`2<LockFileCacheKey, IList`1<LibraryIdentity>> get_LockFileLibraries();
    [CompilerGeneratedAttribute]
internal TaskResultCache`2<LibraryRangeCacheKey, GraphItem`1<RemoteResolveResult>> get_FindLibraryEntryCache();
    [CompilerGeneratedAttribute]
internal TaskResultCache`2<LibraryRange, Tuple`2<LibraryRange, RemoteMatch>> get_ResolvePackageLibraryMatchCache();
    [CompilerGeneratedAttribute]
public bool get_IsMsBuildBased();
    [CompilerGeneratedAttribute]
public void set_IsMsBuildBased(bool value);
    public IList`1<IRemoteDependencyProvider> FilterDependencyProvidersForLibrary(LibraryRange libraryRange);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class NuGet.DependencyResolver.ResolverUtility : object {
    public static Task`1<GraphItem`1<RemoteResolveResult>> FindLibraryCachedAsync(LibraryRange libraryRange, NuGetFramework framework, string runtimeIdentifier, RemoteWalkContext context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NuGet.DependencyResolver.ResolverUtility/<FindLibraryEntryAsync>d__1")]
public static Task`1<GraphItem`1<RemoteResolveResult>> FindLibraryEntryAsync(LibraryRange libraryRange, NuGetFramework framework, string runtimeIdentifier, RemoteWalkContext context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NuGet.DependencyResolver.ResolverUtility/<CreateGraphItemAsync>d__2")]
private static Task`1<GraphItem`1<RemoteResolveResult>> CreateGraphItemAsync(RemoteMatch match, NuGetFramework framework, SourceCacheContext cacheContext, ILogger logger, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NuGet.DependencyResolver.ResolverUtility/<FindLibraryMatchAsync>d__3")]
public static Task`1<RemoteMatch> FindLibraryMatchAsync(LibraryRange libraryRange, NuGetFramework framework, string runtimeIdentifier, IEnumerable`1<IRemoteDependencyProvider> remoteProviders, IEnumerable`1<IRemoteDependencyProvider> localProviders, IEnumerable`1<IDependencyProvider> projectProviders, IDictionary`2<LockFileCacheKey, IList`1<LibraryIdentity>> lockFileLibraries, SourceCacheContext cacheContext, ILogger logger, CancellationToken cancellationToken);
    public static Task`1<Tuple`2<LibraryRange, RemoteMatch>> FindPackageLibraryMatchCachedAsync(LibraryRange libraryRange, RemoteWalkContext remoteWalkContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NuGet.DependencyResolver.ResolverUtility/<ResolvePackageLibraryMatchAsync>d__5")]
private static Task`1<Tuple`2<LibraryRange, RemoteMatch>> ResolvePackageLibraryMatchAsync(LibraryRange libraryRange, RemoteWalkContext remoteWalkContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NuGet.DependencyResolver.ResolverUtility/<FindPackageLibraryMatchAsync>d__6")]
private static Task`1<RemoteMatch> FindPackageLibraryMatchAsync(LibraryRange libraryRange, NuGetFramework framework, IEnumerable`1<IRemoteDependencyProvider> remoteProviders, IEnumerable`1<IRemoteDependencyProvider> localProviders, SourceCacheContext cacheContext, ILogger logger, CancellationToken cancellationToken);
    public static Task`1<RemoteMatch> FindProjectMatchAsync(LibraryRange libraryRange, NuGetFramework framework, IEnumerable`1<IDependencyProvider> projectProviders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NuGet.DependencyResolver.ResolverUtility/<FindLibraryByVersionAsync>d__8")]
public static Task`1<RemoteMatch> FindLibraryByVersionAsync(LibraryRange libraryRange, NuGetFramework framework, IEnumerable`1<IRemoteDependencyProvider> providers, SourceCacheContext cacheContext, ILogger logger, CancellationToken token);
    [AsyncStateMachineAttribute("NuGet.DependencyResolver.ResolverUtility/<FindLibraryFromSourcesAsync>d__9")]
private static Task`1<RemoteMatch> FindLibraryFromSourcesAsync(LibraryRange libraryRange, IEnumerable`1<IRemoteDependencyProvider> providers, NuGetFramework framework, SourceCacheContext cacheContext, ILogger logger, CancellationToken token);
    private static GraphItem`1<RemoteResolveResult> CreateUnresolvedResult(LibraryRange libraryRange);
    private static RemoteMatch CreateUnresolvedMatch(LibraryRange libraryRange);
    private static void LogIfPackageSourceMappingIsEnabled(string packageName, RemoteWalkContext context, IList`1<IRemoteDependencyProvider> remoteDependencyProviders);
    [AsyncStateMachineAttribute("NuGet.DependencyResolver.ResolverUtility/<<FindLibraryFromSourcesAsync>g__FindLibraryFromProviderAsync|9_0>d")]
[CompilerGeneratedAttribute]
internal static Task`1<RemoteMatch> <FindLibraryFromSourcesAsync>g__FindLibraryFromProviderAsync|9_0(IRemoteDependencyProvider provider, LibraryRange libraryRange, NuGetFramework framework, SourceCacheContext cacheContext, ILogger logger, CancellationToken token);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class NuGet.DependencyResolver.Strings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Error_PackageNotFoundWhenExpected { get; }
    internal static string Log_MatchingSourceFoundForPackage { get; }
    internal static string Log_NoMatchingSourceFoundForPackage { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Error_PackageNotFoundWhenExpected();
    internal static string get_Log_MatchingSourceFoundForPackage();
    internal static string get_Log_NoMatchingSourceFoundForPackage();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NuGet.DependencyResolver.Tracker`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, Entry<TItem>> _entryByLibraryName;
    public void Track(GraphItem`1<TItem> item);
    public bool IsDisputed(GraphItem`1<TItem> item);
    public bool IsAmbiguous(GraphItem`1<TItem> item);
    public void MarkAmbiguous(GraphItem`1<TItem> item);
    public bool IsBestVersion(GraphItem`1<TItem> item);
    public IEnumerable`1<GraphItem`1<TItem>> GetDisputes(GraphItem`1<TItem> item);
    internal void Clear();
    private Entry<TItem> TryGetEntry(GraphItem`1<TItem> item);
    private Entry<TItem> GetOrAddEntry(GraphItem`1<TItem> item);
}
public class NuGet.DependencyResolver.VersionConflictResult`1 : object {
    [CompilerGeneratedAttribute]
private GraphNode`1<TItem> <Selected>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphNode`1<TItem> <Conflicting>k__BackingField;
    public GraphNode`1<TItem> Selected { get; public set; }
    public GraphNode`1<TItem> Conflicting { get; public set; }
    [CompilerGeneratedAttribute]
public GraphNode`1<TItem> get_Selected();
    [CompilerGeneratedAttribute]
public void set_Selected(GraphNode`1<TItem> value);
    [CompilerGeneratedAttribute]
public GraphNode`1<TItem> get_Conflicting();
    [CompilerGeneratedAttribute]
public void set_Conflicting(GraphNode`1<TItem> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class NuGet.NoAllocEnumerateExtensions : object {
    [ExtensionAttribute]
public static OptimisticallyNonAllocatingListEnumerable`1<T> NoAllocEnumerate(IList`1<T> list);
    [ExtensionAttribute]
public static OptimisticallyNonAllocatingEnumerable`1<T> NoAllocEnumerate(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static OptimisticallyNonAllocatingDictionaryEnumerable`2<TKey, TValue> NoAllocEnumerate(IDictionary`2<TKey, TValue> dictionary);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class NuGet.Shared.Extensions : object {
    [ExtensionAttribute]
public static List`1<T> AsList(IEnumerable`1<T> enumerable);
    [ExtensionAttribute]
public static HashSet`1<T> AsHashSet(ISet`1<T> enumerable, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<T> enumeration, Action`1<T> action);
    [ExtensionAttribute]
public static void AppendInt(StringBuilder sb, int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class NuGet.Shared.HashCodeCombiner : ValueType {
    private static long Seed;
    private long _combinedHash;
    internal int CombinedHash { get; }
    internal int get_CombinedHash();
    private void AddHashCode(int i);
    internal void AddObject(int i);
    internal void AddObject(bool b);
    internal void AddObject(T o, IEqualityComparer`1<T> comparer);
    internal void AddObject(T o);
    [NullableContextAttribute("0")]
internal void AddStruct(Nullable`1<T> o);
    [NullableContextAttribute("0")]
internal void AddStruct(T o);
    [NullableContextAttribute("2")]
internal void AddStringIgnoreCase(string s);
    internal void AddSequence(IEnumerable`1<T> sequence);
    internal void AddSequence(T[] array);
    internal void AddSequence(IList`1<T> list);
    internal void AddSequence(IReadOnlyList`1<T> list);
    internal void AddUnorderedSequence(IEnumerable`1<T> list);
    internal void AddUnorderedSequence(IEnumerable`1<T> list, IEqualityComparer`1<T> comparer);
    internal void AddDictionary(IEnumerable`1<KeyValuePair`2<TKey, TValue>> dictionary);
    internal static int GetHashCode(T1 o1, T2 o2);
    internal static int GetHashCode(T1 o1, T2 o2, T3 o3);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NuGet.TaskResult : object {
    [CompilerGeneratedAttribute]
private static Task`1<bool> <True>k__BackingField;
    [CompilerGeneratedAttribute]
private static Task`1<bool> <False>k__BackingField;
    [CompilerGeneratedAttribute]
private static Task`1<int> <Zero>k__BackingField;
    [CompilerGeneratedAttribute]
private static Task`1<int> <One>k__BackingField;
    public static Task`1<bool> True { get; }
    public static Task`1<bool> False { get; }
    public static Task`1<int> Zero { get; }
    public static Task`1<int> One { get; }
    private static TaskResult();
    [CompilerGeneratedAttribute]
public static Task`1<bool> get_True();
    [CompilerGeneratedAttribute]
public static Task`1<bool> get_False();
    public static Task`1<bool> Boolean(bool b);
    [CompilerGeneratedAttribute]
public static Task`1<int> get_Zero();
    [CompilerGeneratedAttribute]
public static Task`1<int> get_One();
    public static Task`1<int> Integer(int i);
    public static Task`1<T> Null();
    public static Task`1<IEnumerable`1<T>> EmptyEnumerable();
    public static Task`1<T[]> EmptyArray();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGet.TaskResultCache`2 : object {
    private ConcurrentDictionary`2<TKey, Task`1<TValue>> _cache;
    private ConcurrentDictionary`2<TKey, object> _perTaskLock;
    public TaskResultCache`2(IEqualityComparer`1<TKey> comparer);
    public Task`1<TValue> GetOrAddAsync(TKey key, Func`2<TState, Task`1<TValue>> valueFactory, TState state, CancellationToken cancellationToken);
    public Task`1<TValue> GetOrAddAsync(TKey key, bool refresh, Func`2<TState, Task`1<TValue>> valueFactory, TState state, CancellationToken cancellationToken);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
