internal static class FxResources.System.Composition.Hosting.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class System.Composition.Hosting.CompositionHost : CompositionContext {
    private static String[] s_noBoundaries;
    private LifetimeContext _rootLifetimeContext;
    private CompositionHost(LifetimeContext rootLifetimeContext);
    private static CompositionHost();
    public static CompositionHost CreateCompositionHost(ExportDescriptorProvider[] providers);
    public static CompositionHost CreateCompositionHost(IEnumerable`1<ExportDescriptorProvider> providers);
    public virtual bool TryGetExport(CompositionContract contract, Object& export);
    public sealed virtual void Dispose();
}
public class System.Composition.Hosting.Core.CompositeActivator : MulticastDelegate {
    public CompositeActivator(object object, IntPtr method);
    public virtual object Invoke(LifetimeContext context, CompositionOperation operation);
    public virtual IAsyncResult BeginInvoke(LifetimeContext context, CompositionOperation operation, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public class System.Composition.Hosting.Core.CompositionDependency : object {
    private ExportDescriptorPromise _target;
    private bool _isPrerequisite;
    private object _site;
    private CompositionContract _contract;
    private ExportDescriptorPromise[] _oversuppliedTargets;
    public ExportDescriptorPromise Target { get; }
    public bool IsPrerequisite { get; }
    public object Site { get; }
    public CompositionContract Contract { get; }
    internal bool IsError { get; }
    private CompositionDependency(CompositionContract contract, ExportDescriptorPromise target, bool isPrerequisite, object site);
    private CompositionDependency(CompositionContract contract, object site);
    private CompositionDependency(CompositionContract contract, IEnumerable`1<ExportDescriptorPromise> targets, object site);
    public static CompositionDependency Satisfied(CompositionContract contract, ExportDescriptorPromise target, bool isPrerequisite, object site);
    public static CompositionDependency Missing(CompositionContract contract, object site);
    public static CompositionDependency Oversupplied(CompositionContract contract, IEnumerable`1<ExportDescriptorPromise> targets, object site);
    public ExportDescriptorPromise get_Target();
    public bool get_IsPrerequisite();
    public object get_Site();
    public CompositionContract get_Contract();
    public virtual string ToString();
    internal bool get_IsError();
    internal void DescribeError(StringBuilder message);
}
public class System.Composition.Hosting.Core.CompositionOperation : object {
    private List`1<Action> _nonPrerequisiteActions;
    private List`1<Action> _postCompositionActions;
    private object _sharingLock;
    public static object Run(LifetimeContext outermostLifetimeContext, CompositeActivator compositionRootActivator);
    public void AddNonPrerequisiteAction(Action action);
    public void AddPostCompositionAction(Action action);
    internal void EnterSharingLock(object sharingLock);
    private void Complete();
    private void RunAndClearActions();
    public sealed virtual void Dispose();
}
internal class System.Composition.Hosting.Core.CycleBreakingExportDescriptor : ExportDescriptor {
    private Lazy`1<ExportDescriptor> _exportDescriptor;
    public CompositeActivator Activator { get; }
    public IDictionary`2<string, object> Metadata { get; }
    public CycleBreakingExportDescriptor(Lazy`1<ExportDescriptor> exportDescriptor);
    public virtual CompositeActivator get_Activator();
    public virtual IDictionary`2<string, object> get_Metadata();
    private object Activate(LifetimeContext context, CompositionOperation operation);
}
[DefaultMemberAttribute("Item")]
internal class System.Composition.Hosting.Core.CycleBreakingMetadataDictionary : object {
    private Lazy`1<ExportDescriptor> _exportDescriptor;
    private IDictionary`2<string, object> ActualMetadata { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<object> Values { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public CycleBreakingMetadataDictionary(Lazy`1<ExportDescriptor> exportDescriptor);
    private IDictionary`2<string, object> get_ActualMetadata();
    public sealed virtual void Add(string key, object value);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, Object& value);
    public sealed virtual ICollection`1<object> get_Values();
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public sealed virtual void Add(KeyValuePair`2<string, object> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, object> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(KeyValuePair`2<string, object> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public abstract class System.Composition.Hosting.Core.DependencyAccessor : object {
    protected abstract virtual IEnumerable`1<ExportDescriptorPromise> GetPromises(CompositionContract exportKey);
    public IEnumerable`1<CompositionDependency> ResolveDependencies(object site, CompositionContract contract, bool isPrerequisite);
    public CompositionDependency ResolveRequiredDependency(object site, CompositionContract contract, bool isPrerequisite);
    public bool TryResolveOptionalDependency(object site, CompositionContract contract, bool isPrerequisite, CompositionDependency& dependency);
}
internal class System.Composition.Hosting.Core.DirectExportDescriptor : ExportDescriptor {
    private CompositeActivator _activator;
    private IDictionary`2<string, object> _metadata;
    public CompositeActivator Activator { get; }
    public IDictionary`2<string, object> Metadata { get; }
    public DirectExportDescriptor(CompositeActivator activator, IDictionary`2<string, object> metadata);
    public virtual CompositeActivator get_Activator();
    public virtual IDictionary`2<string, object> get_Metadata();
}
public abstract class System.Composition.Hosting.Core.ExportDescriptor : object {
    public CompositeActivator Activator { get; }
    public IDictionary`2<string, object> Metadata { get; }
    public abstract virtual CompositeActivator get_Activator();
    public abstract virtual IDictionary`2<string, object> get_Metadata();
    public static ExportDescriptor Create(CompositeActivator activator, IDictionary`2<string, object> metadata);
}
public class System.Composition.Hosting.Core.ExportDescriptorPromise : object {
    private string _origin;
    private bool _isShared;
    private Lazy`1<ReadOnlyCollection`1<CompositionDependency>> _dependencies;
    private Lazy`1<ExportDescriptor> _descriptor;
    private CompositionContract _contract;
    private bool _creating;
    public string Origin { get; }
    public bool IsShared { get; }
    public ReadOnlyCollection`1<CompositionDependency> Dependencies { get; }
    public CompositionContract Contract { get; }
    public ExportDescriptorPromise(CompositionContract contract, string origin, bool isShared, Func`1<IEnumerable`1<CompositionDependency>> dependencies, Func`2<IEnumerable`1<CompositionDependency>, ExportDescriptor> getDescriptor);
    public string get_Origin();
    public bool get_IsShared();
    public ReadOnlyCollection`1<CompositionDependency> get_Dependencies();
    public CompositionContract get_Contract();
    public ExportDescriptor GetDescriptor();
    public virtual string ToString();
}
public abstract class System.Composition.Hosting.Core.ExportDescriptorProvider : object {
    protected static IEnumerable`1<ExportDescriptorPromise> NoExportDescriptors;
    protected static IDictionary`2<string, object> NoMetadata;
    protected static Func`1<IEnumerable`1<CompositionDependency>> NoDependencies;
    private static ExportDescriptorProvider();
    public abstract virtual IEnumerable`1<ExportDescriptorPromise> GetExportDescriptors(CompositionContract contract, DependencyAccessor descriptorAccessor);
}
internal class System.Composition.Hosting.Core.ExportDescriptorRegistry : object {
    private object _thisLock;
    private ExportDescriptorProvider[] _exportDescriptorProviders;
    private Dictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _partDefinitions;
    public ExportDescriptorRegistry(ExportDescriptorProvider[] exportDescriptorProviders);
    public bool TryGetSingleForExport(CompositionContract exportKey, ExportDescriptor& defaultForExport);
}
internal class System.Composition.Hosting.Core.ExportDescriptorRegistryUpdate : DependencyAccessor {
    private IDictionary`2<CompositionContract, ExportDescriptor[]> _partDefinitions;
    private ExportDescriptorProvider[] _exportDescriptorProviders;
    private Dictionary`2<CompositionContract, UpdateResult> _updateResults;
    private static CompositionDependency[] s_noDependenciesValue;
    private static Func`1<CompositionDependency[]> s_noDependencies;
    private bool _updateFinished;
    public ExportDescriptorRegistryUpdate(IDictionary`2<CompositionContract, ExportDescriptor[]> partDefinitions, ExportDescriptorProvider[] exportDescriptorProviders);
    private static ExportDescriptorRegistryUpdate();
    public void Execute(CompositionContract contract);
    private void CheckTarget(CompositionDependency dependency, HashSet`1<ExportDescriptorPromise> checked, Stack`1<CompositionDependency> checking);
    private void CheckDependency(CompositionDependency dependency, HashSet`1<ExportDescriptorPromise> checked, Stack`1<CompositionDependency> checking);
    private static StringBuilder DescribeCompositionStack(CompositionDependency import, Stack`1<CompositionDependency> dependencies);
    protected virtual IEnumerable`1<ExportDescriptorPromise> GetPromises(CompositionContract contract);
}
public class System.Composition.Hosting.Core.LifetimeContext : CompositionContext {
    private LifetimeContext _root;
    private LifetimeContext _parent;
    private object _sharingLock;
    private SmallSparseInitonlyArray _sharedPartInstances;
    private SmallSparseInitonlyArray _instancesUndergoingInitialization;
    private object _boundPartLock;
    private List`1<IDisposable> _boundPartInstances;
    private String[] _sharingBoundaries;
    private ExportDescriptorRegistry _partRegistry;
    private static int s_nextSharingId;
    internal LifetimeContext(ExportDescriptorRegistry partRegistry, String[] sharingBoundaries);
    internal LifetimeContext(LifetimeContext parent, String[] sharingBoundaries);
    private static LifetimeContext();
    public static int AllocateSharingId();
    public LifetimeContext FindContextWithin(string sharingBoundary);
    public sealed virtual void Dispose();
    public void AddBoundInstance(IDisposable instance);
    public object GetOrCreate(int sharingId, CompositionOperation operation, CompositeActivator creator);
    public virtual bool TryGetExport(CompositionContract contract, Object& export);
    public virtual string ToString();
}
internal class System.Composition.Hosting.Core.UpdateResult : object {
    private static ExportDescriptorPromise[] s_noPromises;
    private Queue`1<ExportDescriptorProvider> _remainingProviders;
    private List`1<ExportDescriptorPromise> _providedDescriptors;
    private ExportDescriptorPromise[] _results;
    public UpdateResult(IEnumerable`1<ExportDescriptorProvider> providers);
    private static UpdateResult();
    public bool TryDequeueNextProvider(ExportDescriptorProvider& provider);
    public void AddPromise(ExportDescriptorPromise promise);
    public ExportDescriptorPromise[] GetResults();
}
internal static class System.Composition.Hosting.Providers.Constants : object {
    public static string SharingBoundaryImportMetadataConstraintName;
    public static string ImportManyImportMetadataConstraintName;
}
internal class System.Composition.Hosting.Providers.CurrentScope.CurrentScopeExportDescriptorProvider : ExportDescriptorProvider {
    private static CompositionContract s_currentScopeContract;
    private static CurrentScopeExportDescriptorProvider();
    public virtual IEnumerable`1<ExportDescriptorPromise> GetExportDescriptors(CompositionContract contract, DependencyAccessor definitionAccessor);
}
internal class System.Composition.Hosting.Providers.ExportFactory.ExportFactoryExportDescriptorProvider : ExportDescriptorProvider {
    private static MethodInfo s_getExportFactoryDefinitionsMethod;
    private static ExportFactoryExportDescriptorProvider();
    public virtual IEnumerable`1<ExportDescriptorPromise> GetExportDescriptors(CompositionContract exportKey, DependencyAccessor definitionAccessor);
    private static ExportDescriptorPromise[] GetExportFactoryDescriptors(CompositionContract exportFactoryContract, DependencyAccessor definitionAccessor);
}
internal class System.Composition.Hosting.Providers.ExportFactory.ExportFactoryWithMetadataExportDescriptorProvider : ExportDescriptorProvider {
    private static MethodInfo s_getLazyDefinitionsMethod;
    private static ExportFactoryWithMetadataExportDescriptorProvider();
    public virtual IEnumerable`1<ExportDescriptorPromise> GetExportDescriptors(CompositionContract contract, DependencyAccessor definitionAccessor);
    private static ExportDescriptorPromise[] GetExportFactoryDescriptors(CompositionContract exportFactoryContract, DependencyAccessor definitionAccessor);
}
internal class System.Composition.Hosting.Providers.ImportMany.ImportManyExportDescriptorProvider : ExportDescriptorProvider {
    private static MethodInfo s_getImportManyDefinitionMethod;
    private static Type[] s_supportedContractTypes;
    private static ImportManyExportDescriptorProvider();
    public virtual IEnumerable`1<ExportDescriptorPromise> GetExportDescriptors(CompositionContract contract, DependencyAccessor definitionAccessor);
    private static ExportDescriptorPromise GetImportManyDescriptor(CompositionContract importManyContract, CompositionContract elementContract, DependencyAccessor definitionAccessor);
}
internal class System.Composition.Hosting.Providers.Lazy.LazyExportDescriptorProvider : ExportDescriptorProvider {
    private static MethodInfo s_getLazyDefinitionsMethod;
    private static LazyExportDescriptorProvider();
    public virtual IEnumerable`1<ExportDescriptorPromise> GetExportDescriptors(CompositionContract exportKey, DependencyAccessor definitionAccessor);
    private static ExportDescriptorPromise[] GetLazyDefinitions(CompositionContract lazyContract, DependencyAccessor definitionAccessor);
}
internal class System.Composition.Hosting.Providers.Lazy.LazyWithMetadataExportDescriptorProvider : ExportDescriptorProvider {
    private static MethodInfo s_getLazyDefinitionsMethod;
    private static LazyWithMetadataExportDescriptorProvider();
    public virtual IEnumerable`1<ExportDescriptorPromise> GetExportDescriptors(CompositionContract exportKey, DependencyAccessor definitionAccessor);
    private static ExportDescriptorPromise[] GetLazyDefinitions(CompositionContract lazyContract, DependencyAccessor definitionAccessor);
}
internal static class System.Composition.Hosting.Providers.Metadata.MetadataViewProvider : object {
    private static MethodInfo s_getMetadataValueMethod;
    private static MetadataViewProvider();
    public static Func`2<IDictionary`2<string, object>, TMetadata> GetMetadataViewProvider();
    private static TValue GetMetadataValue(IDictionary`2<string, object> metadata, string name, DefaultValueAttribute defaultValue);
}
internal static class System.Composition.Hosting.Util.Formatters : object {
    public static string ReadableList(IEnumerable`1<string> items);
    public static string Format(Type type);
    private static string FormatClosedGeneric(Type closedGenericType);
}
[ExtensionAttribute]
internal static class System.Composition.Hosting.Util.MethodInfoExtensions : object {
    [ExtensionAttribute]
public static T CreateStaticDelegate(MethodInfo methodInfo);
}
internal class System.Composition.Hosting.Util.SmallSparseInitonlyArray : object {
    private static int ElementsCapacity;
    private static int ElementIndexMask;
    private static int LocalOffsetMax;
    private Element[] _elements;
    private SmallSparseInitonlyArray _overflow;
    public void Add(int index, object value);
    public bool TryGetValue(int index, Object& value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("64")]
internal class System.Runtime.InteropServices.LibraryImportAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <LibraryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMarshalling <StringMarshalling>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StringMarshallingCustomType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetLastError>k__BackingField;
    public string LibraryName { get; }
    public string EntryPoint { get; public set; }
    public StringMarshalling StringMarshalling { get; public set; }
    public Type StringMarshallingCustomType { get; public set; }
    public bool SetLastError { get; public set; }
    public LibraryImportAttribute(string libraryName);
    [CompilerGeneratedAttribute]
public string get_LibraryName();
    [CompilerGeneratedAttribute]
public string get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(string value);
    [CompilerGeneratedAttribute]
public StringMarshalling get_StringMarshalling();
    [CompilerGeneratedAttribute]
public void set_StringMarshalling(StringMarshalling value);
    [CompilerGeneratedAttribute]
public Type get_StringMarshallingCustomType();
    [CompilerGeneratedAttribute]
public void set_StringMarshallingCustomType(Type value);
    [CompilerGeneratedAttribute]
public bool get_SetLastError();
    [CompilerGeneratedAttribute]
public void set_SetLastError(bool value);
}
internal enum System.Runtime.InteropServices.StringMarshalling : Enum {
    public int value__;
    public static StringMarshalling Custom;
    public static StringMarshalling Utf8;
    public static StringMarshalling Utf16;
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string Dependency_ExportNotFound { get; }
    internal static string Dependency_QuoteParameter { get; }
    internal static string Dependency_TooManyExports { get; }
    internal static string Dependency_ToStringFormat { get; }
    internal static string ExportDescriptor_ToStringFormat { get; }
    internal static string Formatter_None { get; }
    internal static string NotImplemented_MetadataCycles { get; }
    internal static string CardinalityMismatch_TooManyExports { get; }
    internal static string Diagnostic_ThrowingException { get; }
    internal static string ExportDescriptor_DependencyErrorContract { get; }
    internal static string ExportDescriptor_DependencyErrorLine { get; }
    internal static string ExportDescriptor_UnsupportedCycle { get; }
    internal static string Component_NotCreatableOutsideSharingBoundary { get; }
    internal static string MetadataViewProvider_InvalidViewImplementation { get; }
    internal static string MetadataViewProvider_MissingMetadata { get; }
    internal static string Formatter_ListSeparatorWithSpace { get; }
    internal static string Sharing_Lock_Taken { get; }
    internal static string Dependencies_Should_Be_Requested_Earlier { get; }
    internal static string Key_Already_Exist { get; }
    internal static string Providers_Remain_To_Be_Queried { get; }
    internal static string Diagnostic_InternalExceptionMessage { get; }
    internal static string Update_already_executed { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Dependency_ExportNotFound();
    internal static string get_Dependency_QuoteParameter();
    internal static string get_Dependency_TooManyExports();
    internal static string get_Dependency_ToStringFormat();
    internal static string get_ExportDescriptor_ToStringFormat();
    internal static string get_Formatter_None();
    internal static string get_NotImplemented_MetadataCycles();
    internal static string get_CardinalityMismatch_TooManyExports();
    internal static string get_Diagnostic_ThrowingException();
    internal static string get_ExportDescriptor_DependencyErrorContract();
    internal static string get_ExportDescriptor_DependencyErrorLine();
    internal static string get_ExportDescriptor_UnsupportedCycle();
    internal static string get_Component_NotCreatableOutsideSharingBoundary();
    internal static string get_MetadataViewProvider_InvalidViewImplementation();
    internal static string get_MetadataViewProvider_MissingMetadata();
    internal static string get_Formatter_ListSeparatorWithSpace();
    internal static string get_Sharing_Lock_Taken();
    internal static string get_Dependencies_Should_Be_Requested_Earlier();
    internal static string get_Key_Already_Exist();
    internal static string get_Providers_Remain_To_Be_Queried();
    internal static string get_Diagnostic_InternalExceptionMessage();
    internal static string get_Update_already_executed();
}
